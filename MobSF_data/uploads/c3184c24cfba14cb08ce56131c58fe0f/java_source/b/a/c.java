/*
 * Decompiled with CFR 0_132.
 */
package b.a;

import b.a.d;
import b.a.j;
import b.e.b.b;
import b.e.b.f;
import java.util.Collection;
import java.util.Iterator;

final class c<T>
implements Collection<T> {
    private final T[] a;
    private final boolean b;

    public c(T[] arrT, boolean bl2) {
        f.b(arrT, "values");
        this.a = arrT;
        this.b = bl2;
    }

    public int a() {
        return this.a.length;
    }

    @Override
    public boolean add(T t2) {
        throw new UnsupportedOperationException("Operation is not supported for read-only collection");
    }

    @Override
    public boolean addAll(Collection<? extends T> collection) {
        throw new UnsupportedOperationException("Operation is not supported for read-only collection");
    }

    @Override
    public void clear() {
        throw new UnsupportedOperationException("Operation is not supported for read-only collection");
    }

    @Override
    public boolean contains(Object object) {
        return d.a(this.a, object);
    }

    @Override
    public boolean containsAll(Collection<? extends Object> object) {
        boolean bl2;
        block2 : {
            f.b(object, "elements");
            object = (Iterable)object;
            bl2 = object.isEmpty();
            boolean bl3 = true;
            if (bl2) {
                return true;
            }
            object = object.iterator();
            do {
                bl2 = bl3;
                if (!object.hasNext()) break block2;
            } while (this.contains(object.next()));
            bl2 = false;
        }
        return bl2;
    }

    @Override
    public boolean isEmpty() {
        if (this.a.length == 0) {
            return true;
        }
        return false;
    }

    @Override
    public Iterator<T> iterator() {
        return b.a(this.a);
    }

    @Override
    public boolean remove(Object object) {
        throw new UnsupportedOperationException("Operation is not supported for read-only collection");
    }

    @Override
    public boolean removeAll(Collection<? extends Object> collection) {
        throw new UnsupportedOperationException("Operation is not supported for read-only collection");
    }

    @Override
    public boolean retainAll(Collection<? extends Object> collection) {
        throw new UnsupportedOperationException("Operation is not supported for read-only collection");
    }

    @Override
    public final int size() {
        return this.a();
    }

    @Override
    public final Object[] toArray() {
        return j.a(this.a, this.b);
    }

    @Override
    public <T> T[] toArray(T[] arrT) {
        return b.e.b.c.a(this, arrT);
    }
}

