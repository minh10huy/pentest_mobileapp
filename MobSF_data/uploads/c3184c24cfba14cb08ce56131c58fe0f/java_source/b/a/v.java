/*
 * Decompiled with CFR 0_132.
 */
package b.a;

import b.a.u;
import b.e.b.c;
import b.e.b.f;
import java.io.Serializable;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;
import java.util.ListIterator;
import java.util.RandomAccess;

public final class v
implements Serializable,
List,
RandomAccess {
    public static final v a = new v();

    private v() {
    }

    public int a() {
        return 0;
    }

    public Void a(int n2) {
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("Empty list doesn't contain element at index ");
        stringBuilder.append(n2);
        stringBuilder.append('.');
        throw (Throwable)new IndexOutOfBoundsException(stringBuilder.toString());
    }

    public boolean a(Void void_) {
        f.b(void_, "element");
        return false;
    }

    public /* synthetic */ void add(int n2, Object object) {
        throw new UnsupportedOperationException("Operation is not supported for read-only collection");
    }

    @Override
    public /* synthetic */ boolean add(Object object) {
        throw new UnsupportedOperationException("Operation is not supported for read-only collection");
    }

    public boolean addAll(int n2, Collection collection) {
        throw new UnsupportedOperationException("Operation is not supported for read-only collection");
    }

    @Override
    public boolean addAll(Collection collection) {
        throw new UnsupportedOperationException("Operation is not supported for read-only collection");
    }

    public int b(Void void_) {
        f.b(void_, "element");
        return -1;
    }

    public int c(Void void_) {
        f.b(void_, "element");
        return -1;
    }

    @Override
    public void clear() {
        throw new UnsupportedOperationException("Operation is not supported for read-only collection");
    }

    @Override
    public final boolean contains(Object object) {
        if (object instanceof Void) {
            return this.a((Void)object);
        }
        return false;
    }

    @Override
    public boolean containsAll(Collection collection) {
        f.b(collection, "elements");
        return collection.isEmpty();
    }

    @Override
    public boolean equals(Object object) {
        if (object instanceof List && ((List)object).isEmpty()) {
            return true;
        }
        return false;
    }

    public /* synthetic */ Object get(int n2) {
        return this.a(n2);
    }

    @Override
    public int hashCode() {
        return 1;
    }

    @Override
    public final int indexOf(Object object) {
        if (object instanceof Void) {
            return this.b((Void)object);
        }
        return -1;
    }

    @Override
    public boolean isEmpty() {
        return true;
    }

    @Override
    public Iterator iterator() {
        return u.a;
    }

    @Override
    public final int lastIndexOf(Object object) {
        if (object instanceof Void) {
            return this.c((Void)object);
        }
        return -1;
    }

    public ListIterator listIterator() {
        return u.a;
    }

    public ListIterator listIterator(int n2) {
        if (n2 == 0) {
            return u.a;
        }
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("Index: ");
        stringBuilder.append(n2);
        throw (Throwable)new IndexOutOfBoundsException(stringBuilder.toString());
    }

    public /* synthetic */ Object remove(int n2) {
        throw new UnsupportedOperationException("Operation is not supported for read-only collection");
    }

    @Override
    public boolean remove(Object object) {
        throw new UnsupportedOperationException("Operation is not supported for read-only collection");
    }

    @Override
    public boolean removeAll(Collection collection) {
        throw new UnsupportedOperationException("Operation is not supported for read-only collection");
    }

    @Override
    public boolean retainAll(Collection collection) {
        throw new UnsupportedOperationException("Operation is not supported for read-only collection");
    }

    public /* synthetic */ Object set(int n2, Object object) {
        throw new UnsupportedOperationException("Operation is not supported for read-only collection");
    }

    @Override
    public final int size() {
        return this.a();
    }

    public List subList(int n2, int n3) {
        if (n2 == 0 && n3 == 0) {
            return this;
        }
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("fromIndex: ");
        stringBuilder.append(n2);
        stringBuilder.append(", toIndex: ");
        stringBuilder.append(n3);
        throw (Throwable)new IndexOutOfBoundsException(stringBuilder.toString());
    }

    @Override
    public Object[] toArray() {
        return c.a(this);
    }

    @Override
    public <T> T[] toArray(T[] arrT) {
        return c.a(this, arrT);
    }

    public String toString() {
        return "[]";
    }
}

