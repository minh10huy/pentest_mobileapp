/*
 * Decompiled with CFR 0_132.
 */
package b.a;

import b.a.d;
import b.a.j;
import b.a.s;
import b.b.a;
import b.e.b.f;
import b.g;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.Iterator;
import java.util.List;
import java.util.NoSuchElementException;

class t
extends s {
    public static final <T> T a(Iterable<? extends T> object) {
        f.b(object, "$receiver");
        if (object instanceof List) {
            return j.b((List)object);
        }
        if ((object = object.iterator()).hasNext()) {
            Object e2 = object.next();
            if (!object.hasNext()) {
                return (T)e2;
            }
            throw (Throwable)new IllegalArgumentException("Collection has more than one element.");
        }
        throw (Throwable)new NoSuchElementException("Collection is empty.");
    }

    public static final <T, C extends Collection<? super T>> C a(Iterable<? extends T> object, C c2) {
        f.b(object, "$receiver");
        f.b(c2, "destination");
        object = object.iterator();
        while (object.hasNext()) {
            c2.add(object.next());
        }
        return c2;
    }

    public static final <T> List<T> a(Iterable<? extends T> arrobject, Comparator<? super T> comparator) {
        f.b(arrobject, "$receiver");
        f.b(comparator, "comparator");
        if (arrobject instanceof Collection) {
            Collection collection = (Collection)arrobject;
            if (collection.size() <= 1) {
                return j.c(arrobject);
            }
            arrobject = collection.toArray(new Object[0]);
            if (arrobject != null) {
                if (arrobject != null) {
                    d.a(arrobject, comparator);
                    return d.a(arrobject);
                }
                throw new g("null cannot be cast to non-null type kotlin.Array<T>");
            }
            throw new g("null cannot be cast to non-null type kotlin.Array<T>");
        }
        arrobject = j.d(arrobject);
        j.a(arrobject, comparator);
        return arrobject;
    }

    public static final <T> List<T> a(Collection<? extends T> collection) {
        f.b(collection, "$receiver");
        return new ArrayList<T>(collection);
    }

    public static final <T> T b(List<? extends T> list) {
        f.b(list, "$receiver");
        switch (list.size()) {
            default: {
                throw (Throwable)new IllegalArgumentException("List has more than one element.");
            }
            case 1: {
                return list.get(0);
            }
            case 0: 
        }
        throw (Throwable)new NoSuchElementException("List is empty.");
    }

    public static final <T extends Comparable<? super T>> List<T> b(Iterable<? extends T> iterable) {
        f.b(iterable, "$receiver");
        return j.a(iterable, a.a());
    }

    public static final <T> List<T> c(Iterable<? extends T> iterable) {
        f.b(iterable, "$receiver");
        if (iterable instanceof Collection) {
            Collection collection = (Collection)iterable;
            switch (collection.size()) {
                default: {
                    return j.a(collection);
                }
                case 1: {
                    iterable = iterable instanceof List ? ((List)iterable).get(0) : iterable.iterator().next();
                    return j.a(iterable);
                }
                case 0: 
            }
            return j.a();
        }
        return j.a(j.d(iterable));
    }

    public static final <T> List<T> d(Iterable<? extends T> iterable) {
        f.b(iterable, "$receiver");
        if (iterable instanceof Collection) {
            return j.a((Collection)iterable);
        }
        return (List)j.a(iterable, (Collection)new ArrayList());
    }
}

