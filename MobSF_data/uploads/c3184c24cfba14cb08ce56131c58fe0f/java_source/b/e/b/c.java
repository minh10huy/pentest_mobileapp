/*
 * Decompiled with CFR 0_132.
 */
package b.e.b;

import b.e.b.f;
import b.g;
import java.lang.reflect.Array;
import java.util.Arrays;
import java.util.Collection;
import java.util.Iterator;

public final class c {
    private static final Object[] a = new Object[0];

    /*
     * Enabled aggressive block sorting
     */
    public static final Object[] a(Collection<?> arrobject) {
        f.b(arrobject, "collection");
        int n2 = arrobject.size();
        if (n2 == 0) {
            return a;
        }
        Iterator iterator = arrobject.iterator();
        if (!iterator.hasNext()) {
            return a;
        }
        arrobject = new Object[n2];
        n2 = 0;
        do {
            Object[] arrobject2;
            int n3 = n2 + 1;
            arrobject[n2] = iterator.next();
            if (n3 >= arrobject.length) {
                int n4;
                if (!iterator.hasNext()) {
                    return arrobject;
                }
                n2 = n4 = n3 * 3 + 1 >>> 1;
                if (n4 <= n3) {
                    if (n3 >= 2147483645) throw (Throwable)new OutOfMemoryError();
                    n2 = 2147483645;
                }
                arrobject2 = Arrays.copyOf(arrobject, n2);
                f.a((Object)arrobject2, "Arrays.copyOf(result, newSize)");
            } else {
                arrobject2 = arrobject;
                if (!iterator.hasNext()) {
                    arrobject = Arrays.copyOf(arrobject, n3);
                    f.a((Object)arrobject, "Arrays.copyOf(result, size)");
                    return arrobject;
                }
            }
            n2 = n3;
            arrobject = arrobject2;
        } while (true);
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    public static final Object[] a(Collection<?> object, Object[] arrobject) {
        void var1_10;
        void var0_8;
        f.b(object, "collection");
        if (var1_10 == null) throw (Throwable)new NullPointerException();
        int n2 = object.size();
        int n3 = 0;
        if (n2 == 0) {
            void var0_1 = var1_10;
            if (((void)var1_10).length <= 0) return var0_8;
            var1_10[0] = null;
            return var1_10;
        }
        Iterator iterator = object.iterator();
        if (!iterator.hasNext()) {
            void var0_2 = var1_10;
            if (((void)var1_10).length <= 0) return var0_8;
            var1_10[0] = null;
            return var1_10;
        }
        if (n2 <= ((void)var1_10).length) {
            void var0_3 = var1_10;
        } else {
            Object object2 = Array.newInstance(var1_10.getClass().getComponentType(), n2);
            if (object2 == null) throw new g("null cannot be cast to non-null type kotlin.Array<kotlin.Any?>");
            Object[] arrobject2 = (Object[])object2;
        }
        do {
            T[] arrT;
            void var0_6;
            n2 = n3 + 1;
            var0_6[n3] = iterator.next();
            if (n2 >= ((void)var0_6).length) {
                int n4;
                if (!iterator.hasNext()) {
                    return var0_6;
                }
                n3 = n4 = n2 * 3 + 1 >>> 1;
                if (n4 <= n2) {
                    if (n2 >= 2147483645) throw (Throwable)new OutOfMemoryError();
                    n3 = 2147483645;
                }
                arrT = Arrays.copyOf(var0_6, n3);
                f.a(arrT, "Arrays.copyOf(result, newSize)");
            } else {
                arrT = var0_6;
                if (!iterator.hasNext()) {
                    if (var0_6 == var1_10) {
                        var1_10[n2] = null;
                        return var1_10;
                    }
                    T[] arrT2 = Arrays.copyOf(var0_6, n2);
                    f.a(arrT2, "Arrays.copyOf(result, size)");
                    return var0_8;
                }
            }
            n3 = n2;
            void var0_9 = arrT;
        } while (true);
    }
}

