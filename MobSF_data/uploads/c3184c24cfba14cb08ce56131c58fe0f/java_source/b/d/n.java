/*
 * Decompiled with CFR 0_132.
 */
package b.d;

import b.d.b;
import b.d.c;
import b.d.e;
import b.d.f;
import b.d.j;
import b.d.m;
import b.d.o;
import b.e.b.d;
import b.h.a;
import java.io.Closeable;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.OutputStream;
import java.io.Serializable;
import java.util.Iterator;

class n
extends m {
    /*
     * WARNING - Removed back jump from a try to a catch block - possible behaviour change.
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    public static final File a(File serializable, File file, boolean bl2, int n2) {
        Throwable throwable6222;
        Closeable closeable;
        Object object;
        block14 : {
            Throwable throwable22222;
            b.e.b.f.b(serializable, "$receiver");
            b.e.b.f.b(file, "target");
            if (!serializable.exists()) throw (Throwable)new o((File)serializable, null, "The source file doesn't exist.", 2, null);
            if (file.exists()) {
                boolean bl3 = true;
                if (bl2 && file.delete()) {
                    bl3 = false;
                }
                if (bl3) throw (Throwable)new e((File)serializable, file, "The destination file already exists.");
            }
            if (serializable.isDirectory()) {
                if (!file.mkdirs()) throw (Throwable)new f((File)serializable, file, "Failed to create target directory.");
                return file;
            }
            object = file.getParentFile();
            if (object != null) {
                object.mkdirs();
            }
            closeable = new FileInputStream((File)serializable);
            Throwable throwable3 = null;
            object = throwable3;
            FileInputStream fileInputStream = (FileInputStream)closeable;
            object = throwable3;
            Closeable closeable2 = new FileOutputStream(file);
            object = throwable3;
            Throwable throwable4 = null;
            serializable = throwable4;
            object = (FileOutputStream)closeable2;
            serializable = throwable4;
            b.a(fileInputStream, (OutputStream)object, n2);
            object = throwable3;
            c.a(closeable2, throwable4);
            c.a(closeable, throwable3);
            return file;
            {
                catch (Throwable throwable22222) {
                }
                catch (Throwable throwable5) {}
                serializable = throwable5;
                {
                    throw throwable5;
                }
            }
            object = throwable3;
            try {
                c.a(closeable2, (Throwable)serializable);
                object = throwable3;
                throw throwable22222;
            }
            catch (Throwable throwable6222) {
                break block14;
            }
            catch (Throwable throwable7) {
                object = throwable7;
                throw throwable7;
            }
        }
        c.a(closeable, (Throwable)object);
        throw throwable6222;
    }

    public static /* bridge */ /* synthetic */ File a(File file, File file2, boolean bl2, int n2, int n3, Object object) {
        if ((n3 & 2) != 0) {
            bl2 = false;
        }
        if ((n3 & 4) != 0) {
            n2 = 8192;
        }
        return j.a(file, file2, bl2, n2);
    }

    public static final boolean b(File object) {
        boolean bl2;
        b.e.b.f.b(object, "$receiver");
        object = ((a)j.a((File)object)).a();
        block0 : do {
            bl2 = true;
            while (object.hasNext()) {
                File file = (File)object.next();
                if ((file.delete() || !file.exists()) && bl2) continue block0;
                bl2 = false;
            }
            break;
        } while (true);
        return bl2;
    }
}

