/*
 * Decompiled with CFR 0_132.
 */
package b.d;

import b.d;
import b.d.h;
import b.d.i;
import b.e.b.f;
import b.j;
import java.io.File;
import java.io.IOException;
import java.util.Iterator;
import java.util.Stack;

public final class g
implements b.h.a<File> {
    private final File a;
    private final i b;
    private final b.e.a.a<File, Boolean> c;
    private final b.e.a.a<File, b.i> d;
    private final b.e.a.b<File, IOException, b.i> e;
    private final int f;

    public g(File file, i i2) {
        f.b(file, "start");
        f.b((Object)i2, "direction");
        this(file, i2, null, null, null, 0, 32, null);
    }

    private g(File file, i i2, b.e.a.a<? super File, Boolean> a2, b.e.a.a<? super File, b.i> a3, b.e.a.b<? super File, ? super IOException, b.i> b2, int n2) {
        this.a = file;
        this.b = i2;
        this.c = a2;
        this.d = a3;
        this.e = b2;
        this.f = n2;
    }

    /* synthetic */ g(File file, i i2, b.e.a.a a2, b.e.a.a a3, b.e.a.b b2, int n2, int n3, b.e.b.d d2) {
        if ((n3 & 2) != 0) {
            i2 = i.a;
        }
        if ((n3 & 32) != 0) {
            n2 = Integer.MAX_VALUE;
        }
        this(file, i2, a2, a3, b2, n2);
    }

    @Override
    public Iterator<File> a() {
        return new b();
    }

    private static abstract class a
    extends c {
        public a(File file) {
            f.b(file, "rootDir");
            super(file);
            if (j.a) {
                boolean bl2 = file.isDirectory();
                if (j.a) {
                    if (bl2) {
                        return;
                    }
                    throw (Throwable)((Object)new AssertionError((Object)"rootDir must be verified to be directory beforehand."));
                }
            }
        }
    }

    private final class b.d.g$b
    extends b.a.a<File> {
        private final Stack<b.d.g$c> b = new Stack();

        public b.d.g$b() {
            if (g.this.a.isDirectory()) {
                this.b.push(this.a(g.this.a));
                return;
            }
            if (g.this.a.isFile()) {
                this.b.push(new b(g.this.a));
                return;
            }
            this.b();
        }

        private final b.d.g$a a(File object) {
            i i2 = g.this.b;
            switch (h.a[i2.ordinal()]) {
                default: {
                    throw new d();
                }
                case 2: {
                    object = new a((File)object);
                    break;
                }
                case 1: {
                    object = new c((File)object);
                }
            }
            return (b.d.g$a)object;
        }

        private final File c() {
            File file;
            do {
                if (this.b.empty()) {
                    return null;
                }
                b.d.g$c c2 = this.b.peek();
                if (c2 == null) {
                    f.a();
                }
                if ((file = c2.a()) == null) {
                    this.b.pop();
                    continue;
                }
                if (f.a((Object)file, c2.b()) || !file.isDirectory()) break;
                if (this.b.size() >= g.this.f) {
                    return file;
                }
                this.b.push(this.a(file));
            } while (true);
            return file;
        }

        @Override
        protected void a() {
            File file = this.c();
            if (file != null) {
                this.a(file);
                return;
            }
            this.b();
        }

        private final class a
        extends b.d.g$a {
            private boolean b;
            private File[] c;
            private int d;
            private boolean e;

            public a(File file) {
                f.b(file, "rootDir");
                super(file);
            }

            @Override
            public File a() {
                Object object;
                if (!this.e && this.c == null) {
                    object = g.this.c;
                    if (object != null && !((Boolean)object.a(this.b())).booleanValue()) {
                        return null;
                    }
                    this.c = this.b().listFiles();
                    if (this.c == null) {
                        object = g.this.e;
                        if (object != null) {
                            object = (b.i)object.a(this.b(), new b.d.a(this.b(), null, "Cannot list files in a directory", 2, null));
                        }
                        this.e = true;
                    }
                }
                if (this.c != null) {
                    int n2 = this.d;
                    object = this.c;
                    if (object == null) {
                        f.a();
                    }
                    if (n2 < ((File[])object).length) {
                        object = this.c;
                        if (object == null) {
                            f.a();
                        }
                        n2 = this.d;
                        this.d = n2 + 1;
                        return object[n2];
                    }
                }
                if (!this.b) {
                    this.b = true;
                    return this.b();
                }
                object = g.this.d;
                if (object != null) {
                    object = (b.i)object.a(this.b());
                }
                return null;
            }
        }

        private final class b
        extends b.d.g$c {
            private boolean b;

            public b(File file) {
                f.b(file, "rootFile");
                super(file);
                if (j.a) {
                    boolean bl2 = file.isFile();
                    if (j.a) {
                        if (bl2) {
                            return;
                        }
                        throw (Throwable)((Object)new AssertionError((Object)"rootFile must be verified to be file beforehand."));
                    }
                }
            }

            @Override
            public File a() {
                if (this.b) {
                    return null;
                }
                this.b = true;
                return this.b();
            }
        }

        private final class c
        extends b.d.g$a {
            private boolean b;
            private File[] c;
            private int d;

            public c(File file) {
                f.b(file, "rootDir");
                super(file);
            }

            @Override
            public File a() {
                int n2;
                Object object;
                block13 : {
                    block14 : {
                        if (!this.b) {
                            b.e.a.a a2 = g.this.c;
                            if (a2 != null && !((Boolean)a2.a(this.b())).booleanValue()) {
                                return null;
                            }
                            this.b = true;
                            return this.b();
                        }
                        if (this.c != null) {
                            n2 = this.d;
                            object = this.c;
                            if (object == null) {
                                f.a();
                            }
                            if (n2 >= ((File[])object).length) {
                                object = g.this.d;
                                if (object != null) {
                                    object = (b.i)object.a(this.b());
                                }
                                return null;
                            }
                        }
                        if (this.c != null) break block13;
                        this.c = this.b().listFiles();
                        if (this.c == null && (object = g.this.e) != null) {
                            object = (b.i)object.a(this.b(), new b.d.a(this.b(), null, "Cannot list files in a directory", 2, null));
                        }
                        if (this.c == null) break block14;
                        object = this.c;
                        if (object == null) {
                            f.a();
                        }
                        if (((File[])object).length != 0) break block13;
                    }
                    if ((object = g.this.d) != null) {
                        object = (b.i)object.a(this.b());
                    }
                    return null;
                }
                if ((object = this.c) == null) {
                    f.a();
                }
                n2 = this.d;
                this.d = n2 + 1;
                return object[n2];
            }
        }

    }

    private static abstract class c {
        private final File a;

        public c(File file) {
            f.b(file, "root");
            this.a = file;
        }

        public abstract File a();

        public final File b() {
            return this.a;
        }
    }

}

