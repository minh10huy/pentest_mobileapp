/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.graphics.Bitmap
 *  android.graphics.Bitmap$CompressFormat
 *  android.graphics.Bitmap$Config
 *  android.graphics.BitmapFactory
 *  android.graphics.BitmapFactory$Options
 *  android.graphics.Canvas
 *  android.graphics.Matrix
 *  android.graphics.Paint
 *  android.media.ExifInterface
 */
package fec.mobile.activity.Manager;

import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Canvas;
import android.graphics.Matrix;
import android.graphics.Paint;
import android.media.ExifInterface;
import b.e.b.f;
import java.io.ByteArrayOutputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.util.List;

public final class BitmapManager {
    private final int a(BitmapFactory.Options options, int n2, int n3) {
        int n4 = options.outHeight;
        int n5 = options.outWidth;
        int n6 = 1;
        int n7 = 1;
        if (n4 > n3 || n5 > n2) {
            n5 /= 2;
            do {
                n6 = n7;
                if ((n4 /= 2) / n7 < n3) break;
                n6 = n7;
                if (n5 / n7 < n2) break;
                n7 *= 2;
            } while (true);
        }
        return n6;
    }

    public final Bitmap a(Bitmap bitmap, float f2) {
        f.b((Object)bitmap, "bitmap");
        int n2 = bitmap.getWidth();
        int n3 = bitmap.getHeight();
        Matrix matrix = new Matrix();
        matrix.setRotate(f2);
        bitmap = Bitmap.createBitmap((Bitmap)bitmap, (int)0, (int)0, (int)n2, (int)n3, (Matrix)matrix, (boolean)true);
        f.a((Object)bitmap, "Bitmap.createBitmap(bitmap, 0, 0, w, h, mtx, true)");
        return bitmap;
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    public final Bitmap a(Bitmap var1_1, int var2_3) {
        f.b((Object)var1_1, "bitmap");
        var4_4 = new Matrix();
        var3_5 = var1_1;
        switch (var2_3) {
            default: {
                return var1_1;
            }
            case 8: {
                var4_4.setRotate(-90.0f);
                ** GOTO lbl28
            }
            case 7: {
                var4_4.setRotate(-90.0f);
                ** GOTO lbl21
            }
            case 6: {
                var4_4.setRotate(90.0f);
                ** GOTO lbl28
            }
            case 5: {
                var4_4.setRotate(90.0f);
                ** GOTO lbl21
            }
            case 4: {
                var4_4.setRotate(180.0f);
lbl21: // 3 sources:
                var4_4.postScale(-1.0f, 1.0f);
                ** GOTO lbl28
            }
            case 3: {
                var4_4.setRotate(180.0f);
                ** GOTO lbl28
            }
            case 2: {
                var4_4.setScale(-1.0f, 1.0f);
lbl28: // 5 sources:
                try {
                    var3_5 = Bitmap.createBitmap((Bitmap)var1_1, (int)0, (int)0, (int)var1_1.getWidth(), (int)var1_1.getHeight(), (Matrix)var4_4, (boolean)true);
                    var1_1.recycle();
                    return var3_5;
                }
                catch (OutOfMemoryError var1_2) {
                    var1_2.printStackTrace();
                    var3_5 = null;
                }
            }
            case 1: 
        }
        return var3_5;
    }

    public final Bitmap a(String string2, int n2, int n3) {
        f.b(string2, "pathFile");
        BitmapFactory.Options options = new BitmapFactory.Options();
        options.inJustDecodeBounds = true;
        BitmapFactory.decodeFile((String)string2, (BitmapFactory.Options)options);
        options.inSampleSize = this.a(options, n2, n3);
        options.inJustDecodeBounds = false;
        string2 = BitmapFactory.decodeFile((String)string2, (BitmapFactory.Options)options);
        f.a((Object)string2, "BitmapFactory.decodeFile(pathFile,options)");
        return string2;
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    public final boolean a(String var1_1, List<String> var2_6, int var3_8) {
        block31 : {
            block30 : {
                f.b(var1_1, "pathCustomer");
                f.b((Object)var2_6, "listImage");
                if (var3_8 == 3) break block30;
                if (var3_8 != 4) return true;
                var6_16 = Bitmap.createScaledBitmap((Bitmap)BitmapFactory.decodeFile((String)((String)var2_6.get(0))), (int)581, (int)327, (boolean)true);
                var7_20 = Bitmap.createScaledBitmap((Bitmap)BitmapFactory.decodeFile((String)((String)var2_6.get(1))), (int)581, (int)327, (boolean)true);
                var8_22 = Bitmap.createScaledBitmap((Bitmap)BitmapFactory.decodeFile((String)((String)var2_6.get(2))), (int)400, (int)250, (boolean)true);
                var9_24 = BitmapFactory.decodeFile((String)((String)var2_6.get(3)));
                var5_11 = null;
                try {
                    var2_6 = new ExifInterface((String)var2_6.get(3));
                }
                catch (IOException var2_7) {
                    var2_7.printStackTrace();
                    var2_6 = var5_11;
                }
                if (var2_6 == null) {
                    f.a();
                }
                var3_8 = var2_6.getAttributeInt("Orientation", 0);
                if (var9_24 == null) {
                    f.a();
                }
                if ((var2_6 = this.a(var9_24, var3_8)) == null) {
                    f.a();
                }
                var3_8 = var2_6.getHeight() * 762 / var2_6.getWidth();
                var5_11 = Bitmap.createScaledBitmap((Bitmap)var2_6, (int)762, (int)var3_8, (boolean)true);
                var2_6 = Bitmap.createBitmap((int)1162, (int)(var3_8 + 327), (Bitmap.Config)Bitmap.Config.ARGB_8888);
                var9_24 = new Canvas(var2_6);
                var10_27 = new Paint();
                var9_24.drawBitmap((Bitmap)var6_16, 0.0f, 0.0f, var10_27);
                var9_24.drawBitmap(var7_20, 581.0f, 0.0f, var10_27);
                var9_24.drawBitmap(var8_22, 0.0f, 327.0f, var10_27);
                if (var5_11 == null) {
                    f.a();
                }
                var9_24.drawBitmap((Bitmap)var5_11, 400.0f, 327.0f, var10_27);
                var5_11 = new ByteArrayOutputStream();
                var3_8 = 150000;
                break block31;
            }
            var5_9 = BitmapFactory.decodeFile((String)((String)var2_6.get(0)));
            var6_13 = BitmapFactory.decodeFile((String)((String)var2_6.get(1)));
            var7_19 = BitmapFactory.decodeFile((String)((String)var2_6.get(2)));
            var2_6 = Bitmap.createBitmap((int)2064, (int)1743, (Bitmap.Config)Bitmap.Config.ARGB_8888);
            var8_21 = new Canvas(var2_6);
            var9_23 = new Paint();
            var8_21.drawBitmap(Bitmap.createScaledBitmap((Bitmap)var5_9, (int)1032, (int)581, (boolean)true), 0.0f, 0.0f, var9_23);
            var8_21.drawBitmap(Bitmap.createScaledBitmap((Bitmap)var6_13, (int)1032, (int)581, (boolean)true), 1032.0f, 0.0f, var9_23);
            var8_21.drawBitmap(Bitmap.createScaledBitmap((Bitmap)var7_19, (int)2064, (int)1162, (boolean)true), 0.0f, 581.0f, var9_23);
            var5_9 = new ByteArrayOutputStream();
            var3_8 = 150000;
            while (var3_8 >= 150000) {
                try {
                    var5_9.flush();
                    var5_9.reset();
                }
                catch (IOException var6_14) {
                    var6_14.printStackTrace();
                }
                f.a((Object)var2_6, "result");
                if (var2_6.getWidth() < 1300) break;
                var2_6 = Bitmap.createScaledBitmap((Bitmap)var2_6, (int)(var2_6.getWidth() - 500), (int)(var2_6.getHeight() * (var2_6.getWidth() - 500) / var2_6.getWidth()), (boolean)true);
                var2_6.compress(Bitmap.CompressFormat.JPEG, 100, (OutputStream)var5_9);
                var3_8 = var5_9.toByteArray().length;
            }
            var4_25 = 105;
            while (var3_8 >= 150000 && var4_25 > 30) {
                try {
                    var5_9.flush();
                    var5_9.reset();
                }
                catch (IOException var6_15) {
                    var6_15.printStackTrace();
                }
                var2_6.compress(Bitmap.CompressFormat.JPEG, var4_25 -= 5, (OutputStream)var5_9);
                var3_8 = var5_9.toByteArray().length;
            }
            try {
                var5_9.flush();
                var5_9.close();
            }
            catch (IOException var5_10) {
                var5_10.printStackTrace();
            }
            var5_9 = null;
            try {
                var6_13 = new StringBuilder();
                var6_13.append((String)var1_1);
                var6_13.append("/CK.jpg");
                var1_1 = new FileOutputStream(var6_13.toString());
            }
            catch (FileNotFoundException var1_2) {
                var1_2.printStackTrace();
                var1_1 = var5_9;
            }
            var2_6.compress(Bitmap.CompressFormat.JPEG, var4_25, (OutputStream)var1_1);
            if (var1_1 != null) ** GOTO lbl93
            try {
                f.a();
lbl93: // 2 sources:
                var1_1.close();
                return true;
            }
            catch (IOException var1_3) {}
            var1_3.printStackTrace();
            return true;
        }
        while (var3_8 >= 150000) {
            try {
                var5_11.flush();
                var5_11.reset();
            }
            catch (IOException var6_17) {
                var6_17.printStackTrace();
            }
            f.a((Object)var2_6, "result");
            if (var2_6.getWidth() < 900) break;
            var2_6 = Bitmap.createScaledBitmap((Bitmap)var2_6, (int)(var2_6.getWidth() - 100), (int)(var2_6.getHeight() * (var2_6.getWidth() - 100) / var2_6.getWidth()), (boolean)true);
            var2_6.compress(Bitmap.CompressFormat.JPEG, 100, (OutputStream)var5_11);
            var3_8 = var5_11.toByteArray().length;
        }
        var4_26 = 105;
        while (var3_8 >= 150000 && var4_26 > 30) {
            try {
                var5_11.flush();
                var5_11.reset();
            }
            catch (IOException var6_18) {
                var6_18.printStackTrace();
            }
            var2_6.compress(Bitmap.CompressFormat.JPEG, var4_26 -= 5, (OutputStream)var5_11);
            var3_8 = var5_11.toByteArray().length;
        }
        try {
            var5_11.flush();
            var5_11.close();
        }
        catch (IOException var5_12) {
            var5_12.printStackTrace();
        }
        var5_11 = null;
        try {
            var6_16 = new StringBuilder();
            var6_16.append((String)var1_1);
            var6_16.append("/CK.jpg");
            var1_1 = new FileOutputStream(var6_16.toString());
        }
        catch (FileNotFoundException var1_4) {
            var1_4.printStackTrace();
            var1_1 = var5_11;
        }
        var2_6.compress(Bitmap.CompressFormat.JPEG, var4_26, (OutputStream)var1_1);
        if (var1_1 != null) ** GOTO lbl143
        try {
            f.a();
lbl143: // 2 sources:
            var1_1.close();
            return true;
        }
        catch (IOException var1_5) {}
        var1_5.printStackTrace();
        return true;
    }
}

