/*
 * Decompiled with CFR 0_132.
 */
package a.a.e.d;

import a.a.c.a;
import a.a.d.d;
import a.a.g;
import java.util.concurrent.atomic.AtomicReference;

public final class b<T>
extends AtomicReference<a.a.b.b>
implements a.a.b.b,
g<T> {
    final d<? super T> a;
    final d<? super Throwable> b;
    final a.a.d.a c;
    final d<? super a.a.b.b> d;

    public b(d<? super T> d2, d<? super Throwable> d3, a.a.d.a a2, d<? super a.a.b.b> d4) {
        this.a = d2;
        this.b = d3;
        this.c = a2;
        this.d = d4;
    }

    @Override
    public void a() {
        a.a.e.a.b.a(this);
    }

    @Override
    public void a(a.a.b.b b2) {
        if (a.a.e.a.b.a(this, b2)) {
            try {
                this.d.a(this);
                return;
            }
            catch (Throwable throwable) {
                a.a.c.b.b(throwable);
                b2.a();
                this.a(throwable);
            }
        }
    }

    @Override
    public void a(Throwable throwable) {
        if (!this.b()) {
            this.lazySet(a.a.e.a.b.a);
            try {
                this.b.a(throwable);
                return;
            }
            catch (Throwable throwable2) {
                a.a.c.b.b(throwable2);
                a.a.f.a.a(new a(throwable, throwable2));
                return;
            }
        }
        a.a.f.a.a(throwable);
    }

    @Override
    public void a_(T t2) {
        if (!this.b()) {
            try {
                this.a.a(t2);
                return;
            }
            catch (Throwable throwable) {
                a.a.c.b.b(throwable);
                ((a.a.b.b)this.get()).a();
                this.a(throwable);
            }
        }
    }

    public boolean b() {
        if (this.get() == a.a.e.a.b.a) {
            return true;
        }
        return false;
    }

    @Override
    public void u_() {
        if (!this.b()) {
            this.lazySet(a.a.e.a.b.a);
            try {
                this.c.a();
                return;
            }
            catch (Throwable throwable) {
                a.a.c.b.b(throwable);
                a.a.f.a.a(throwable);
            }
        }
    }
}

