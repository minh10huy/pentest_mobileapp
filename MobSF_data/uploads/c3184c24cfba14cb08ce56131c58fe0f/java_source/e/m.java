/*
 * Decompiled with CFR 0_132.
 */
package e;

import e.c;
import e.d;
import e.f;
import e.r;
import e.s;
import e.t;
import e.u;
import java.nio.ByteBuffer;

final class m
implements d {
    public final c a = new c();
    public final r b;
    boolean c;

    m(r r2) {
        if (r2 != null) {
            this.b = r2;
            return;
        }
        throw new NullPointerException("sink == null");
    }

    @Override
    public long a(s s2) {
        if (s2 != null) {
            long l2;
            long l3 = 0L;
            while ((l2 = s2.a(this.a, 8192L)) != -1L) {
                l3 += l2;
                this.w();
            }
            return l3;
        }
        throw new IllegalArgumentException("source == null");
    }

    @Override
    public t a() {
        return this.b.a();
    }

    @Override
    public void a_(c c2, long l2) {
        if (!this.c) {
            this.a.a_(c2, l2);
            this.w();
            return;
        }
        throw new IllegalStateException("closed");
    }

    @Override
    public d b(f f2) {
        if (!this.c) {
            this.a.a(f2);
            return this.w();
        }
        throw new IllegalStateException("closed");
    }

    @Override
    public d b(String string2) {
        if (!this.c) {
            this.a.a(string2);
            return this.w();
        }
        throw new IllegalStateException("closed");
    }

    @Override
    public c c() {
        return this.a;
    }

    @Override
    public d c(byte[] arrby) {
        if (!this.c) {
            this.a.b(arrby);
            return this.w();
        }
        throw new IllegalStateException("closed");
    }

    @Override
    public d c(byte[] arrby, int n2, int n3) {
        if (!this.c) {
            this.a.b(arrby, n2, n3);
            return this.w();
        }
        throw new IllegalStateException("closed");
    }

    @Override
    public void close() {
        Throwable throwable;
        block7 : {
            if (this.c) {
                return;
            }
            Throwable throwable2 = throwable = null;
            try {
                if (this.a.b > 0L) {
                    this.b.a_(this.a, this.a.b);
                    throwable2 = throwable;
                }
            }
            catch (Throwable throwable3) {
                // empty catch block
            }
            try {
                this.b.close();
                throwable = throwable2;
            }
            catch (Throwable throwable4) {
                throwable = throwable2;
                if (throwable2 != null) break block7;
                throwable = throwable4;
            }
        }
        this.c = true;
        if (throwable != null) {
            u.a(throwable);
        }
    }

    @Override
    public void flush() {
        if (!this.c) {
            if (this.a.b > 0L) {
                this.b.a_(this.a, this.a.b);
            }
            this.b.flush();
            return;
        }
        throw new IllegalStateException("closed");
    }

    @Override
    public d g(int n2) {
        if (!this.c) {
            this.a.d(n2);
            return this.w();
        }
        throw new IllegalStateException("closed");
    }

    @Override
    public d h(int n2) {
        if (!this.c) {
            this.a.c(n2);
            return this.w();
        }
        throw new IllegalStateException("closed");
    }

    @Override
    public d i(int n2) {
        if (!this.c) {
            this.a.b(n2);
            return this.w();
        }
        throw new IllegalStateException("closed");
    }

    @Override
    public boolean isOpen() {
        return this.c ^ true;
    }

    @Override
    public d k(long l2) {
        if (!this.c) {
            this.a.j(l2);
            return this.w();
        }
        throw new IllegalStateException("closed");
    }

    @Override
    public d l(long l2) {
        if (!this.c) {
            this.a.i(l2);
            return this.w();
        }
        throw new IllegalStateException("closed");
    }

    public String toString() {
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("buffer(");
        stringBuilder.append(this.b);
        stringBuilder.append(")");
        return stringBuilder.toString();
    }

    @Override
    public d w() {
        if (!this.c) {
            long l2 = this.a.h();
            if (l2 > 0L) {
                this.b.a_(this.a, l2);
            }
            return this;
        }
        throw new IllegalStateException("closed");
    }

    @Override
    public int write(ByteBuffer byteBuffer) {
        if (!this.c) {
            int n2 = this.a.write(byteBuffer);
            this.w();
            return n2;
        }
        throw new IllegalStateException("closed");
    }
}

