/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.content.Context
 *  android.content.res.ColorStateList
 *  android.content.res.Resources
 *  android.content.res.TypedArray
 *  android.graphics.PointF
 *  android.graphics.RectF
 *  android.graphics.Typeface
 *  android.graphics.drawable.Drawable
 *  android.graphics.drawable.GradientDrawable
 *  android.os.Build
 *  android.os.Build$VERSION
 *  android.view.Gravity
 *  android.view.MotionEvent
 *  android.view.View
 *  android.view.View$OnAttachStateChangeListener
 *  android.view.View$OnClickListener
 *  android.view.View$OnLongClickListener
 *  android.view.View$OnTouchListener
 *  android.view.ViewGroup
 *  android.view.ViewGroup$LayoutParams
 *  android.view.ViewTreeObserver
 *  android.view.ViewTreeObserver$OnGlobalLayoutListener
 *  android.widget.ImageView
 *  android.widget.LinearLayout
 *  android.widget.LinearLayout$LayoutParams
 *  android.widget.PopupWindow
 *  android.widget.PopupWindow$OnDismissListener
 *  android.widget.TextView
 */
package com.a;

import android.content.Context;
import android.content.res.ColorStateList;
import android.content.res.Resources;
import android.content.res.TypedArray;
import android.graphics.PointF;
import android.graphics.RectF;
import android.graphics.Typeface;
import android.graphics.drawable.Drawable;
import android.graphics.drawable.GradientDrawable;
import android.os.Build;
import android.support.v4.widget.m;
import android.view.Gravity;
import android.view.MotionEvent;
import android.view.View;
import android.view.ViewGroup;
import android.view.ViewTreeObserver;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.PopupWindow;
import android.widget.TextView;
import com.a.b;
import com.a.c;
import com.a.d;
import com.a.e;
import com.a.g;

public final class f {
    private final boolean a;
    private final boolean b;
    private final int c;
    private final float d;
    private final View e;
    private final PopupWindow f;
    private b g;
    private d h;
    private c i;
    private LinearLayout j;
    private ImageView k;
    private final View.OnClickListener l = new View.OnClickListener(){

        public void onClick(View view) {
            if (f.this.g != null) {
                f.this.g.a(f.this);
            }
        }
    };
    private final View.OnLongClickListener m = new View.OnLongClickListener(){

        public boolean onLongClick(View view) {
            if (f.this.h != null && f.this.h.a(f.this)) {
                return true;
            }
            return false;
        }
    };
    private final View.OnTouchListener n = new View.OnTouchListener(){

        public boolean onTouch(View view, MotionEvent motionEvent) {
            if (f.this.a && motionEvent.getAction() == 4 || f.this.b && motionEvent.getAction() == 1) {
                f.this.c();
                return true;
            }
            return false;
        }
    };
    private final ViewTreeObserver.OnGlobalLayoutListener o = new ViewTreeObserver.OnGlobalLayoutListener(){

        public void onGlobalLayout() {
            g.a((View)f.this.j, this);
            f.this.j.getViewTreeObserver().addOnGlobalLayoutListener(f.this.p);
            PointF pointF = f.this.d();
            f.this.f.setClippingEnabled(true);
            f.this.f.update((int)pointF.x, (int)pointF.y, f.this.f.getWidth(), f.this.f.getHeight());
        }
    };
    private final ViewTreeObserver.OnGlobalLayoutListener p = new ViewTreeObserver.OnGlobalLayoutListener(){

        public void onGlobalLayout() {
            float f2;
            float f3;
            g.a((View)f.this.j, this);
            RectF rectF = g.a(f.this.e);
            RectF rectF2 = g.a((View)f.this.j);
            int n2 = f.this.c;
            int n3 = 1;
            int n4 = 1;
            if (n2 != 80 && f.this.c != 48) {
                f3 = (float)f.this.j.getPaddingTop() + g.a(2.0f);
                f2 = rectF2.height() / 2.0f - (float)f.this.k.getHeight() / 2.0f - (rectF2.centerY() - rectF.centerY());
                float f4 = f3;
                if (f2 > f3) {
                    f4 = (float)f.this.k.getHeight() + f2 + f3 > rectF2.height() ? rectF2.height() - (float)f.this.k.getHeight() - f3 : f2;
                }
                f3 = f.this.k.getLeft();
                if (f.this.c == 8388611) {
                    n4 = -1;
                }
                f3 += (float)n4;
                f2 = f4;
            } else {
                float f5 = (float)f.this.j.getPaddingLeft() + g.a(2.0f);
                f3 = rectF2.width() / 2.0f - (float)f.this.k.getWidth() / 2.0f - (rectF2.centerX() - rectF.centerX());
                if (f3 > f5) {
                    f5 = (float)f.this.k.getWidth() + f3 + f5 > rectF2.width() ? rectF2.width() - (float)f.this.k.getWidth() - f5 : f3;
                }
                f3 = f.this.k.getTop();
                n4 = n3;
                if (f.this.c == 48) {
                    n4 = -1;
                }
                f2 = (float)n4 + f3;
                f3 = f5;
            }
            f.this.k.setX(f3);
            f.this.k.setY(f2);
        }
    };
    private final View.OnAttachStateChangeListener q = new View.OnAttachStateChangeListener(){

        public void onViewAttachedToWindow(View view) {
        }

        public void onViewDetachedFromWindow(View view) {
            f.this.c();
        }
    };

    private f(a a2) {
        this.a = a2.b;
        this.b = a2.a;
        this.c = a2.c;
        this.d = a2.j;
        this.e = a2.t;
        this.g = a2.u;
        this.h = a2.v;
        this.i = a2.w;
        this.f = new PopupWindow(a2.s);
        this.f.setBackgroundDrawable(null);
        this.f.setClippingEnabled(false);
        this.f.setWidth(-2);
        this.f.setHeight(-2);
        this.f.setContentView(this.a(a2));
        this.f.setOutsideTouchable(a2.b);
        this.f.setOnDismissListener(new PopupWindow.OnDismissListener(){

            public void onDismiss() {
                f.this.e.removeOnAttachStateChangeListener(f.this.q);
                if (f.this.i != null) {
                    f.this.i.onDismiss();
                }
            }
        });
    }

    private View a(a a2) {
        GradientDrawable gradientDrawable = new GradientDrawable();
        gradientDrawable.setColor(a2.d);
        gradientDrawable.setCornerRadius(a2.g);
        int n2 = (int)a2.k;
        TextView textView = new TextView(a2.s);
        m.a(textView, a2.e);
        textView.setText((CharSequence)a2.p);
        textView.setPadding(n2, n2, n2, n2);
        textView.setLineSpacing(a2.m, a2.n);
        textView.setTypeface(a2.r, a2.f);
        if (a2.l >= 0.0f) {
            textView.setTextSize(0, a2.l);
        }
        if (a2.q != null) {
            textView.setTextColor(a2.q);
        }
        if (Build.VERSION.SDK_INT >= 16) {
            textView.setBackground((Drawable)gradientDrawable);
        } else {
            textView.setBackgroundDrawable((Drawable)gradientDrawable);
        }
        gradientDrawable = new LinearLayout.LayoutParams(-2, -2, 0.0f);
        gradientDrawable.gravity = 17;
        textView.setLayoutParams((ViewGroup.LayoutParams)gradientDrawable);
        this.k = new ImageView(a2.s);
        this.k.setImageDrawable(a2.o);
        gradientDrawable = this.c != 48 && this.c != 80 ? new LinearLayout.LayoutParams((int)a2.h, (int)a2.i, 0.0f) : new LinearLayout.LayoutParams((int)a2.i, (int)a2.h, 0.0f);
        gradientDrawable.gravity = 17;
        this.k.setLayoutParams((ViewGroup.LayoutParams)gradientDrawable);
        this.j = new LinearLayout(a2.s);
        this.j.setLayoutParams(new ViewGroup.LayoutParams(-2, -2));
        gradientDrawable = this.j;
        n2 = this.c != 8388611 && this.c != 8388613 ? 1 : 0;
        gradientDrawable.setOrientation(n2);
        n2 = (int)g.a(5.0f);
        int n3 = this.c;
        if (n3 != 48 && n3 != 80) {
            if (n3 != 8388611) {
                if (n3 == 8388613) {
                    this.j.setPadding(n2, 0, 0, 0);
                }
            } else {
                this.j.setPadding(0, 0, n2, 0);
            }
        } else {
            this.j.setPadding(n2, 0, n2, 0);
        }
        if (this.c != 48 && this.c != 8388611) {
            this.j.addView((View)this.k);
            this.j.addView((View)textView);
        } else {
            this.j.addView((View)textView);
            this.j.addView((View)this.k);
        }
        this.j.setOnClickListener(this.l);
        this.j.setOnLongClickListener(this.m);
        if (a2.b || a2.a) {
            this.j.setOnTouchListener(this.n);
        }
        return this.j;
    }

    private PointF d() {
        PointF pointF;
        float f2;
        block6 : {
            float f3;
            block5 : {
                block3 : {
                    block4 : {
                        pointF = new PointF();
                        RectF rectF = g.b(this.e);
                        PointF pointF2 = new PointF(rectF.centerX(), rectF.centerY());
                        int n2 = this.c;
                        if (n2 == 48) break block3;
                        if (n2 == 80) break block4;
                        if (n2 != 8388611) {
                            if (n2 != 8388613) {
                                return pointF;
                            }
                            f2 = rectF.right + this.d;
                        } else {
                            f2 = rectF.left - (float)this.j.getWidth() - this.d;
                        }
                        pointF.x = f2;
                        f2 = pointF2.y;
                        f3 = (float)this.j.getHeight() / 2.0f;
                        break block5;
                    }
                    pointF.x = pointF2.x - (float)this.j.getWidth() / 2.0f;
                    f2 = rectF.bottom + this.d;
                    break block6;
                }
                pointF.x = pointF2.x - (float)this.j.getWidth() / 2.0f;
                f2 = rectF.top - (float)this.j.getHeight();
                f3 = this.d;
            }
            f2 -= f3;
        }
        pointF.y = f2;
        return pointF;
    }

    public boolean a() {
        return this.f.isShowing();
    }

    public void b() {
        if (!this.a()) {
            this.j.getViewTreeObserver().addOnGlobalLayoutListener(this.o);
            this.e.addOnAttachStateChangeListener(this.q);
            this.e.post(new Runnable(){

                @Override
                public void run() {
                    f.this.f.showAsDropDown(f.this.e);
                }
            });
        }
    }

    public void c() {
        this.f.dismiss();
    }

    public static final class a {
        private boolean a;
        private boolean b;
        private int c;
        private int d;
        private int e;
        private int f;
        private float g;
        private float h;
        private float i;
        private float j;
        private float k;
        private float l;
        private float m;
        private float n = 1.0f;
        private Drawable o;
        private String p;
        private ColorStateList q;
        private Typeface r = Typeface.DEFAULT;
        private Context s;
        private View t;
        private b u;
        private d v;
        private c w;

        public a(View view) {
            this(view, 0);
        }

        public a(View view, int n2) {
            this.a(view.getContext(), view, n2);
        }

        private Typeface a(String string2, int n2, int n3) {
            if (string2 != null) {
                Typeface typeface = Typeface.create((String)string2, (int)n3);
                string2 = typeface;
                if (typeface != null) {
                    return typeface;
                }
            } else {
                string2 = null;
            }
            switch (n2) {
                default: {
                    return string2;
                }
                case 3: {
                    return Typeface.MONOSPACE;
                }
                case 2: {
                    return Typeface.SERIF;
                }
                case 1: 
            }
            return Typeface.SANS_SERIF;
        }

        private void a(Context context, View view, int n2) {
            this.s = context;
            this.t = view;
            context = context.obtainStyledAttributes(n2, e.b.Tooltip);
            this.b = context.getBoolean(e.b.Tooltip_cancelable, false);
            this.a = context.getBoolean(e.b.Tooltip_dismissOnClick, false);
            this.d = context.getColor(e.b.Tooltip_backgroundColor, -7829368);
            this.g = context.getDimension(e.b.Tooltip_cornerRadius, -1.0f);
            this.h = context.getDimension(e.b.Tooltip_arrowHeight, -1.0f);
            this.i = context.getDimension(e.b.Tooltip_arrowWidth, -1.0f);
            this.o = context.getDrawable(e.b.Tooltip_arrowDrawable);
            this.j = context.getDimension(e.b.Tooltip_margin, -1.0f);
            this.e = context.getResourceId(e.b.Tooltip_textAppearance, -1);
            this.k = context.getDimension(e.b.Tooltip_android_padding, -1.0f);
            this.c = context.getInteger(e.b.Tooltip_android_gravity, 80);
            this.p = context.getString(e.b.Tooltip_android_text);
            this.l = context.getDimension(e.b.Tooltip_android_textSize, -1.0f);
            this.q = context.getColorStateList(e.b.Tooltip_android_textColor);
            this.f = context.getInteger(e.b.Tooltip_android_textStyle, -1);
            this.m = context.getDimensionPixelSize(e.b.Tooltip_android_lineSpacingExtra, 0);
            this.n = context.getFloat(e.b.Tooltip_android_lineSpacingMultiplier, this.n);
            this.r = this.a(context.getString(e.b.Tooltip_android_fontFamily), context.getInt(e.b.Tooltip_android_typeface, -1), this.f);
            context.recycle();
        }

        public a a(int n2) {
            this.d = n2;
            return this;
        }

        public a a(String string2) {
            this.p = string2;
            return this;
        }

        public f a() {
            if (!Gravity.isHorizontal((int)this.c) && !Gravity.isVertical((int)this.c)) {
                throw new IllegalArgumentException("Gravity must have be START, END, TOP or BOTTOM.");
            }
            if (this.h == -1.0f) {
                this.h = this.s.getResources().getDimension(e.a.default_tooltip_arrow_height);
            }
            if (this.i == -1.0f) {
                this.i = this.s.getResources().getDimension(e.a.default_tooltip_arrow_width);
            }
            if (this.o == null) {
                this.o = new com.a.a(this.d, this.c);
            }
            if (this.j == -1.0f) {
                this.j = this.s.getResources().getDimension(e.a.default_tooltip_margin);
            }
            if (this.k == -1.0f) {
                this.k = this.s.getResources().getDimension(e.a.default_tooltip_padding);
            }
            return new f(this);
        }

        public a b(int n2) {
            this.c = n2;
            return this;
        }

        public f b() {
            f f2 = this.a();
            f2.b();
            return f2;
        }

        public a c(int n2) {
            this.q = ColorStateList.valueOf((int)n2);
            return this;
        }
    }

}

