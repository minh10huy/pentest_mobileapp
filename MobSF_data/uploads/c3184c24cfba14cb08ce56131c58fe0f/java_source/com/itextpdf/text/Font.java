/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text;

import com.itextpdf.text.BaseColor;
import com.itextpdf.text.ExceptionConverter;
import com.itextpdf.text.FontFactory;
import com.itextpdf.text.pdf.BaseFont;

public class Font
implements Comparable<Font> {
    public static final int BOLD = 1;
    public static final int BOLDITALIC = 3;
    public static final int DEFAULTSIZE = 12;
    public static final int ITALIC = 2;
    public static final int NORMAL = 0;
    public static final int STRIKETHRU = 8;
    public static final int UNDEFINED = -1;
    public static final int UNDERLINE = 4;
    private BaseFont baseFont = null;
    private BaseColor color = null;
    private FontFamily family = FontFamily.UNDEFINED;
    private float size = -1.0f;
    private int style = -1;

    public Font() {
        this(FontFamily.UNDEFINED, -1.0f, -1, null);
    }

    public Font(FontFamily fontFamily) {
        this(fontFamily, -1.0f, -1, null);
    }

    public Font(FontFamily fontFamily, float f2) {
        this(fontFamily, f2, -1, null);
    }

    public Font(FontFamily fontFamily, float f2, int n2) {
        this(fontFamily, f2, n2, null);
    }

    public Font(FontFamily fontFamily, float f2, int n2, BaseColor baseColor) {
        this.family = fontFamily;
        this.size = f2;
        this.style = n2;
        this.color = baseColor;
    }

    public Font(Font font) {
        this.family = font.family;
        this.size = font.size;
        this.style = font.style;
        this.color = font.color;
        this.baseFont = font.baseFont;
    }

    public Font(BaseFont baseFont) {
        this(baseFont, -1.0f, -1, null);
    }

    public Font(BaseFont baseFont, float f2) {
        this(baseFont, f2, -1, null);
    }

    public Font(BaseFont baseFont, float f2, int n2) {
        this(baseFont, f2, n2, null);
    }

    public Font(BaseFont baseFont, float f2, int n2, BaseColor baseColor) {
        this.baseFont = baseFont;
        this.size = f2;
        this.style = n2;
        this.color = baseColor;
    }

    public static FontFamily getFamily(String string2) {
        if (string2.equalsIgnoreCase("Courier")) {
            return FontFamily.COURIER;
        }
        if (string2.equalsIgnoreCase("Helvetica")) {
            return FontFamily.HELVETICA;
        }
        if (string2.equalsIgnoreCase("Times-Roman")) {
            return FontFamily.TIMES_ROMAN;
        }
        if (string2.equalsIgnoreCase("Symbol")) {
            return FontFamily.SYMBOL;
        }
        if (string2.equalsIgnoreCase("ZapfDingbats")) {
            return FontFamily.ZAPFDINGBATS;
        }
        return FontFamily.UNDEFINED;
    }

    public static int getStyleValue(String string2) {
        string2.indexOf(FontStyle.NORMAL.getValue());
        int n2 = 0;
        if (string2.indexOf(FontStyle.BOLD.getValue()) != -1) {
            n2 = 1;
        }
        int n3 = n2;
        if (string2.indexOf(FontStyle.ITALIC.getValue()) != -1) {
            n3 = n2 | 2;
        }
        n2 = n3;
        if (string2.indexOf(FontStyle.OBLIQUE.getValue()) != -1) {
            n2 = n3 | 2;
        }
        n3 = n2;
        if (string2.indexOf(FontStyle.UNDERLINE.getValue()) != -1) {
            n3 = n2 | 4;
        }
        n2 = n3;
        if (string2.indexOf(FontStyle.LINETHROUGH.getValue()) != -1) {
            n2 = n3 | 8;
        }
        return n2;
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    @Override
    public int compareTo(Font font) {
        block15 : {
            block14 : {
                block13 : {
                    block12 : {
                        block11 : {
                            block10 : {
                                if (font == null) {
                                    return -1;
                                }
                                try {
                                    if (this.baseFont == null || this.baseFont.equals(font.getBaseFont())) break block10;
                                    return -2;
                                }
                                catch (ClassCastException classCastException) {
                                    return -3;
                                }
                            }
                            if (this.family == font.getFamily()) break block11;
                            return 1;
                        }
                        if (this.size == font.getSize()) break block12;
                        return 2;
                    }
                    if (this.style == font.getStyle()) break block13;
                    return 3;
                }
                if (this.color != null) break block14;
                if (font.color != null) return 4;
                return 0;
            }
            if (font.color != null) break block15;
            return 4;
        }
        boolean bl2 = this.color.equals(font.getColor());
        if (!bl2) return 4;
        return 0;
    }

    public Font difference(Font font) {
        float f2;
        int n2;
        BaseColor baseColor;
        int n3;
        block13 : {
            int n4;
            int n5;
            block12 : {
                float f3;
                if (font == null) {
                    return this;
                }
                f2 = f3 = font.size;
                if (f3 == -1.0f) {
                    f2 = this.size;
                }
                n5 = this.style;
                n4 = font.getStyle();
                n3 = -1;
                if (n5 != -1) break block12;
                n2 = n5;
                if (n4 == -1) break block13;
            }
            n2 = n5;
            if (n5 == -1) {
                n2 = 0;
            }
            n5 = n4;
            if (n4 == -1) {
                n5 = 0;
            }
            n3 = n2 | n5;
        }
        BaseColor baseColor2 = baseColor = font.color;
        if (baseColor == null) {
            baseColor2 = this.color;
        }
        if (font.baseFont != null) {
            return new Font(font.baseFont, f2, n3, baseColor2);
        }
        if (font.getFamily() != FontFamily.UNDEFINED) {
            return new Font(font.family, f2, n3, baseColor2);
        }
        if (this.baseFont != null) {
            if (n3 == n2) {
                return new Font(this.baseFont, f2, n3, baseColor2);
            }
            return FontFactory.getFont(this.getFamilyname(), f2, n3, baseColor2);
        }
        return new Font(this.family, f2, n3, baseColor2);
    }

    public BaseFont getBaseFont() {
        return this.baseFont;
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    public BaseFont getCalculatedBaseFont(boolean var1_1) {
        block27 : {
            block26 : {
                if (this.baseFont != null) {
                    return this.baseFont;
                }
                var2_3 = var3_2 = this.style;
                if (var3_2 == -1) {
                    var2_3 = 0;
                }
                var6_4 = "Cp1252";
                var3_2 = .$SwitchMap$com$itextpdf$text$Font$FontFamily[this.family.ordinal()];
                if (var3_2 == 1) break block26;
                switch (var3_2) {
                    default: {
                        switch (var2_3 & 3) {
                            default: {
                                var4_5 = "Helvetica";
                                ** break;
                            }
                            case 3: {
                                var4_5 = "Helvetica-BoldOblique";
                                ** break;
                            }
                            case 2: {
                                var4_5 = "Helvetica-Oblique";
                                ** break;
                            }
                            case 1: 
                        }
                        var4_5 = "Helvetica-Bold";
                        ** break;
lbl24: // 4 sources:
                        break block27;
                    }
                    case 5: {
                        var5_9 = var7_7 = "ZapfDingbats";
                        var4_5 = var6_4;
                        if (var1_1) {
                            var4_5 = "ZapfDingbats";
                            var5_9 = var7_7;
                        }
                        ** GOTO lbl38
                    }
                    case 4: {
                        var5_9 = var7_8 = "Symbol";
                        var4_5 = var6_4;
                        if (var1_1) {
                            var4_5 = "Symbol";
                            var5_9 = var7_8;
                        }
lbl38: // 4 sources:
                        var6_4 = var4_5;
                        var4_5 = var5_9;
                        break block27;
                    }
                    case 3: 
                }
                switch (var2_3 & 3) {
                    default: {
                        var4_5 = "Times-Roman";
                        ** break;
                    }
                    case 3: {
                        var4_5 = "Times-BoldItalic";
                        ** break;
                    }
                    case 2: {
                        var4_5 = "Times-Italic";
                        ** break;
                    }
                    case 1: 
                }
                var4_5 = "Times-Bold";
                ** break;
lbl55: // 4 sources:
                break block27;
            }
            switch (var2_3 & 3) {
                default: {
                    var4_5 = "Courier";
                    ** break;
                }
                case 3: {
                    var4_5 = "Courier-BoldOblique";
                    ** break;
                }
                case 2: {
                    var4_5 = "Courier-Oblique";
                    ** break;
                }
                case 1: 
            }
            var4_5 = "Courier-Bold";
        }
        try {
            return BaseFont.createFont((String)var4_5, var6_4, false);
        }
        catch (Exception var4_6) {
            throw new ExceptionConverter(var4_6);
        }
    }

    public float getCalculatedLeading(float f2) {
        return f2 * this.getCalculatedSize();
    }

    public float getCalculatedSize() {
        float f2;
        float f3 = f2 = this.size;
        if (f2 == -1.0f) {
            f3 = 12.0f;
        }
        return f3;
    }

    public int getCalculatedStyle() {
        int n2;
        int n3 = n2 = this.style;
        if (n2 == -1) {
            n3 = 0;
        }
        if (this.baseFont != null) {
            return n3;
        }
        n2 = n3;
        if (this.family != FontFamily.SYMBOL) {
            if (this.family == FontFamily.ZAPFDINGBATS) {
                return n3;
            }
            n2 = n3 & -4;
        }
        return n2;
    }

    public BaseColor getColor() {
        return this.color;
    }

    public FontFamily getFamily() {
        return this.family;
    }

    public String getFamilyname() {
        String[] arrstring;
        block12 : {
            int n2;
            int n3;
            String[][] arrstring2;
            Object object = "unknown";
            switch (.$SwitchMap$com$itextpdf$text$Font$FontFamily[this.getFamily().ordinal()]) {
                default: {
                    arrstring = object;
                    if (this.baseFont != null) {
                        arrstring2 = this.baseFont.getFamilyFontName();
                        n2 = arrstring2.length;
                        n3 = 0;
                        break;
                    }
                    break block12;
                }
                case 5: {
                    return "ZapfDingbats";
                }
                case 4: {
                    return "Symbol";
                }
                case 3: {
                    return "Times-Roman";
                }
                case 2: {
                    return "Helvetica";
                }
                case 1: {
                    return "Courier";
                }
            }
            do {
                arrstring = object;
                if (n3 >= n2) break;
                arrstring = arrstring2[n3];
                if ("0".equals(arrstring[2])) {
                    return arrstring[3];
                }
                if ("1033".equals(arrstring[2])) {
                    object = arrstring[3];
                }
                if ("".equals(arrstring[2])) {
                    object = arrstring[3];
                }
                ++n3;
            } while (true);
        }
        return arrstring;
    }

    public float getSize() {
        return this.size;
    }

    public int getStyle() {
        return this.style;
    }

    public boolean isBold() {
        int n2 = this.style;
        boolean bl2 = false;
        if (n2 == -1) {
            return false;
        }
        if ((this.style & 1) == 1) {
            bl2 = true;
        }
        return bl2;
    }

    public boolean isItalic() {
        int n2 = this.style;
        boolean bl2 = false;
        if (n2 == -1) {
            return false;
        }
        if ((this.style & 2) == 2) {
            bl2 = true;
        }
        return bl2;
    }

    public boolean isStandardFont() {
        if (this.family == FontFamily.UNDEFINED && this.size == -1.0f && this.style == -1 && this.color == null && this.baseFont == null) {
            return true;
        }
        return false;
    }

    public boolean isStrikethru() {
        int n2 = this.style;
        boolean bl2 = false;
        if (n2 == -1) {
            return false;
        }
        if ((this.style & 8) == 8) {
            bl2 = true;
        }
        return bl2;
    }

    public boolean isUnderlined() {
        int n2 = this.style;
        boolean bl2 = false;
        if (n2 == -1) {
            return false;
        }
        if ((this.style & 4) == 4) {
            bl2 = true;
        }
        return bl2;
    }

    public void setColor(int n2, int n3, int n4) {
        this.color = new BaseColor(n2, n3, n4);
    }

    public void setColor(BaseColor baseColor) {
        this.color = baseColor;
    }

    public void setFamily(String string2) {
        this.family = Font.getFamily(string2);
    }

    public void setSize(float f2) {
        this.size = f2;
    }

    public void setStyle(int n2) {
        this.style = n2;
    }

    public void setStyle(String string2) {
        if (this.style == -1) {
            this.style = 0;
        }
        int n2 = this.style;
        this.style = Font.getStyleValue(string2) | n2;
    }

    public static enum FontFamily {
        COURIER,
        HELVETICA,
        TIMES_ROMAN,
        SYMBOL,
        ZAPFDINGBATS,
        UNDEFINED;
        

        private FontFamily() {
        }
    }

    public static enum FontStyle {
        NORMAL("normal"),
        BOLD("bold"),
        ITALIC("italic"),
        OBLIQUE("oblique"),
        UNDERLINE("underline"),
        LINETHROUGH("line-through");
        
        private String code;

        private FontStyle(String string3) {
            this.code = string3;
        }

        public String getValue() {
            return this.code;
        }
    }

}

