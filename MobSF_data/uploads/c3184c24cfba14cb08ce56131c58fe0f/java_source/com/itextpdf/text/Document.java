/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text;

import com.itextpdf.text.AccessibleElementId;
import com.itextpdf.text.ChapterAutoNumber;
import com.itextpdf.text.DocListener;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.ExceptionConverter;
import com.itextpdf.text.Header;
import com.itextpdf.text.LargeElement;
import com.itextpdf.text.Meta;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.Version;
import com.itextpdf.text.error_messages.MessageLocalization;
import com.itextpdf.text.pdf.PdfName;
import com.itextpdf.text.pdf.PdfObject;
import com.itextpdf.text.pdf.interfaces.IAccessibleElement;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Set;

public class Document
implements DocListener,
IAccessibleElement {
    public static boolean compress = true;
    public static boolean plainRandomAccess = false;
    public static float wmfFontCorrection = 0.86f;
    protected HashMap<PdfName, PdfObject> accessibleAttributes = null;
    protected int chapternumber = 0;
    protected boolean close;
    protected String htmlStyleClass = null;
    protected AccessibleElementId id = new AccessibleElementId();
    protected String javaScript_onLoad = null;
    protected String javaScript_onUnLoad = null;
    protected ArrayList<DocListener> listeners = new ArrayList();
    protected float marginBottom = 0.0f;
    protected float marginLeft = 0.0f;
    protected boolean marginMirroring = false;
    protected boolean marginMirroringTopBottom = false;
    protected float marginRight = 0.0f;
    protected float marginTop = 0.0f;
    protected boolean open;
    protected int pageN = 0;
    protected Rectangle pageSize;
    protected PdfName role = PdfName.DOCUMENT;

    public Document() {
        this(PageSize.A4);
    }

    public Document(Rectangle rectangle) {
        this(rectangle, 36.0f, 36.0f, 36.0f, 36.0f);
    }

    public Document(Rectangle rectangle, float f2, float f3, float f4, float f5) {
        this.pageSize = rectangle;
        this.marginLeft = f2;
        this.marginRight = f3;
        this.marginTop = f4;
        this.marginBottom = f5;
    }

    @Override
    public boolean add(Element element) {
        boolean bl2 = this.close;
        boolean bl3 = false;
        if (!bl2) {
            if (!this.open && element.isContent()) {
                throw new DocumentException(MessageLocalization.getComposedMessage("the.document.is.not.open.yet.you.can.only.add.meta.information", new Object[0]));
            }
            if (element instanceof ChapterAutoNumber) {
                this.chapternumber = ((ChapterAutoNumber)element).setAutomaticNumber(this.chapternumber);
            }
            Iterator<DocListener> iterator = this.listeners.iterator();
            while (iterator.hasNext()) {
                bl3 |= iterator.next().add(element);
            }
            if (element instanceof LargeElement && !(element = (LargeElement)element).isComplete()) {
                element.flushContent();
            }
            return bl3;
        }
        throw new DocumentException(MessageLocalization.getComposedMessage("the.document.has.been.closed.you.can.t.add.any.elements", new Object[0]));
    }

    public boolean addAuthor(String string2) {
        try {
            boolean bl2 = this.add(new Meta(4, string2));
            return bl2;
        }
        catch (DocumentException documentException) {
            throw new ExceptionConverter(documentException);
        }
    }

    public boolean addCreationDate() {
        try {
            boolean bl2 = this.add(new Meta(6, new SimpleDateFormat("EEE MMM dd HH:mm:ss zzz yyyy").format(new Date())));
            return bl2;
        }
        catch (DocumentException documentException) {
            throw new ExceptionConverter(documentException);
        }
    }

    public boolean addCreator(String string2) {
        try {
            boolean bl2 = this.add(new Meta(7, string2));
            return bl2;
        }
        catch (DocumentException documentException) {
            throw new ExceptionConverter(documentException);
        }
    }

    public void addDocListener(DocListener object) {
        this.listeners.add((DocListener)object);
        if (object instanceof IAccessibleElement) {
            object = (IAccessibleElement)object;
            object.setRole(this.role);
            object.setId(this.id);
            if (this.accessibleAttributes != null) {
                for (PdfName pdfName : this.accessibleAttributes.keySet()) {
                    object.setAccessibleAttribute(pdfName, this.accessibleAttributes.get(pdfName));
                }
            }
        }
    }

    public boolean addHeader(String string2, String string3) {
        try {
            boolean bl2 = this.add(new Header(string2, string3));
            return bl2;
        }
        catch (DocumentException documentException) {
            throw new ExceptionConverter(documentException);
        }
    }

    public boolean addKeywords(String string2) {
        try {
            boolean bl2 = this.add(new Meta(3, string2));
            return bl2;
        }
        catch (DocumentException documentException) {
            throw new ExceptionConverter(documentException);
        }
    }

    public boolean addLanguage(String string2) {
        try {
            boolean bl2 = this.add(new Meta(8, string2));
            return bl2;
        }
        catch (DocumentException documentException) {
            throw new ExceptionConverter(documentException);
        }
    }

    public boolean addProducer() {
        try {
            boolean bl2 = this.add(new Meta(5, Version.getInstance().getVersion()));
            return bl2;
        }
        catch (DocumentException documentException) {
            throw new ExceptionConverter(documentException);
        }
    }

    public boolean addSubject(String string2) {
        try {
            boolean bl2 = this.add(new Meta(2, string2));
            return bl2;
        }
        catch (DocumentException documentException) {
            throw new ExceptionConverter(documentException);
        }
    }

    public boolean addTitle(String string2) {
        try {
            boolean bl2 = this.add(new Meta(1, string2));
            return bl2;
        }
        catch (DocumentException documentException) {
            throw new ExceptionConverter(documentException);
        }
    }

    public float bottom() {
        return this.pageSize.getBottom(this.marginBottom);
    }

    public float bottom(float f2) {
        return this.pageSize.getBottom(this.marginBottom + f2);
    }

    public float bottomMargin() {
        return this.marginBottom;
    }

    @Override
    public void close() {
        if (!this.close) {
            this.open = false;
            this.close = true;
        }
        Iterator<DocListener> iterator = this.listeners.iterator();
        while (iterator.hasNext()) {
            iterator.next().close();
        }
    }

    @Override
    public PdfObject getAccessibleAttribute(PdfName pdfName) {
        if (this.accessibleAttributes != null) {
            return this.accessibleAttributes.get(pdfName);
        }
        return null;
    }

    @Override
    public HashMap<PdfName, PdfObject> getAccessibleAttributes() {
        return this.accessibleAttributes;
    }

    public String getHtmlStyleClass() {
        return this.htmlStyleClass;
    }

    @Override
    public AccessibleElementId getId() {
        return this.id;
    }

    public String getJavaScript_onLoad() {
        return this.javaScript_onLoad;
    }

    public String getJavaScript_onUnLoad() {
        return this.javaScript_onUnLoad;
    }

    public int getPageNumber() {
        return this.pageN;
    }

    public Rectangle getPageSize() {
        return this.pageSize;
    }

    @Override
    public PdfName getRole() {
        return this.role;
    }

    @Override
    public boolean isInline() {
        return false;
    }

    public boolean isMarginMirroring() {
        return this.marginMirroring;
    }

    public boolean isOpen() {
        return this.open;
    }

    public float left() {
        return this.pageSize.getLeft(this.marginLeft);
    }

    public float left(float f2) {
        return this.pageSize.getLeft(this.marginLeft + f2);
    }

    public float leftMargin() {
        return this.marginLeft;
    }

    @Override
    public boolean newPage() {
        if (this.open && !this.close) {
            Iterator<DocListener> iterator = this.listeners.iterator();
            while (iterator.hasNext()) {
                iterator.next().newPage();
            }
            return true;
        }
        return false;
    }

    @Override
    public void open() {
        if (!this.close) {
            this.open = true;
        }
        for (DocListener docListener : this.listeners) {
            docListener.setPageSize(this.pageSize);
            docListener.setMargins(this.marginLeft, this.marginRight, this.marginTop, this.marginBottom);
            docListener.open();
        }
    }

    public void removeDocListener(DocListener docListener) {
        this.listeners.remove(docListener);
    }

    @Override
    public void resetPageCount() {
        this.pageN = 0;
        Iterator<DocListener> iterator = this.listeners.iterator();
        while (iterator.hasNext()) {
            iterator.next().resetPageCount();
        }
    }

    public float right() {
        return this.pageSize.getRight(this.marginRight);
    }

    public float right(float f2) {
        return this.pageSize.getRight(this.marginRight + f2);
    }

    public float rightMargin() {
        return this.marginRight;
    }

    @Override
    public void setAccessibleAttribute(PdfName pdfName, PdfObject pdfObject) {
        if (this.accessibleAttributes == null) {
            this.accessibleAttributes = new HashMap();
        }
        this.accessibleAttributes.put(pdfName, pdfObject);
    }

    public void setHtmlStyleClass(String string2) {
        this.htmlStyleClass = string2;
    }

    @Override
    public void setId(AccessibleElementId accessibleElementId) {
        this.id = accessibleElementId;
    }

    public void setJavaScript_onLoad(String string2) {
        this.javaScript_onLoad = string2;
    }

    public void setJavaScript_onUnLoad(String string2) {
        this.javaScript_onUnLoad = string2;
    }

    @Override
    public boolean setMarginMirroring(boolean bl2) {
        this.marginMirroring = bl2;
        Iterator<DocListener> iterator = this.listeners.iterator();
        while (iterator.hasNext()) {
            iterator.next().setMarginMirroring(bl2);
        }
        return true;
    }

    @Override
    public boolean setMarginMirroringTopBottom(boolean bl2) {
        this.marginMirroringTopBottom = bl2;
        Iterator<DocListener> iterator = this.listeners.iterator();
        while (iterator.hasNext()) {
            iterator.next().setMarginMirroringTopBottom(bl2);
        }
        return true;
    }

    @Override
    public boolean setMargins(float f2, float f3, float f4, float f5) {
        this.marginLeft = f2;
        this.marginRight = f3;
        this.marginTop = f4;
        this.marginBottom = f5;
        Iterator<DocListener> iterator = this.listeners.iterator();
        while (iterator.hasNext()) {
            iterator.next().setMargins(f2, f3, f4, f5);
        }
        return true;
    }

    @Override
    public void setPageCount(int n2) {
        this.pageN = n2;
        Iterator<DocListener> iterator = this.listeners.iterator();
        while (iterator.hasNext()) {
            iterator.next().setPageCount(n2);
        }
    }

    @Override
    public boolean setPageSize(Rectangle rectangle) {
        this.pageSize = rectangle;
        Iterator<DocListener> iterator = this.listeners.iterator();
        while (iterator.hasNext()) {
            iterator.next().setPageSize(rectangle);
        }
        return true;
    }

    @Override
    public void setRole(PdfName pdfName) {
        this.role = pdfName;
    }

    public float top() {
        return this.pageSize.getTop(this.marginTop);
    }

    public float top(float f2) {
        return this.pageSize.getTop(this.marginTop + f2);
    }

    public float topMargin() {
        return this.marginTop;
    }
}

