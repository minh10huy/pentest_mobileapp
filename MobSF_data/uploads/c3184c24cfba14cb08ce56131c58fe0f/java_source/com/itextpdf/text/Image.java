/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text;

import com.itextpdf.text.AccessibleElementId;
import com.itextpdf.text.Annotation;
import com.itextpdf.text.BadElementException;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.ExceptionConverter;
import com.itextpdf.text.ImgCCITT;
import com.itextpdf.text.ImgJBIG2;
import com.itextpdf.text.ImgRaw;
import com.itextpdf.text.ImgTemplate;
import com.itextpdf.text.ImgWMF;
import com.itextpdf.text.Jpeg;
import com.itextpdf.text.Jpeg2000;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.Utilities;
import com.itextpdf.text.api.Indentable;
import com.itextpdf.text.api.Spaceable;
import com.itextpdf.text.error_messages.MessageLocalization;
import com.itextpdf.text.io.RandomAccessSource;
import com.itextpdf.text.io.RandomAccessSourceFactory;
import com.itextpdf.text.pdf.ICC_Profile;
import com.itextpdf.text.pdf.PRIndirectReference;
import com.itextpdf.text.pdf.PdfArray;
import com.itextpdf.text.pdf.PdfDictionary;
import com.itextpdf.text.pdf.PdfIndirectReference;
import com.itextpdf.text.pdf.PdfName;
import com.itextpdf.text.pdf.PdfNumber;
import com.itextpdf.text.pdf.PdfOCG;
import com.itextpdf.text.pdf.PdfObject;
import com.itextpdf.text.pdf.PdfReader;
import com.itextpdf.text.pdf.PdfString;
import com.itextpdf.text.pdf.PdfTemplate;
import com.itextpdf.text.pdf.RandomAccessFileOrArray;
import com.itextpdf.text.pdf.codec.BmpImage;
import com.itextpdf.text.pdf.codec.CCITTG4Encoder;
import com.itextpdf.text.pdf.codec.GifImage;
import com.itextpdf.text.pdf.codec.JBIG2Image;
import com.itextpdf.text.pdf.codec.PngImage;
import com.itextpdf.text.pdf.codec.TiffImage;
import com.itextpdf.text.pdf.interfaces.IAccessibleElement;
import com.itextpdf.text.pdf.interfaces.IAlternateDescription;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.lang.reflect.Constructor;
import java.net.URL;
import java.util.HashMap;
import java.util.Map;

public abstract class Image
extends Rectangle
implements Indentable,
Spaceable,
IAccessibleElement,
IAlternateDescription {
    public static final int AX = 0;
    public static final int AY = 1;
    public static final int BX = 2;
    public static final int BY = 3;
    public static final int CX = 4;
    public static final int CY = 5;
    public static final int DEFAULT = 0;
    public static final int DX = 6;
    public static final int DY = 7;
    public static final int LEFT = 0;
    public static final int MIDDLE = 1;
    public static final int ORIGINAL_BMP = 4;
    public static final int ORIGINAL_GIF = 3;
    public static final int ORIGINAL_JBIG2 = 9;
    public static final int ORIGINAL_JPEG = 1;
    public static final int ORIGINAL_JPEG2000 = 8;
    public static final int ORIGINAL_NONE = 0;
    public static final int ORIGINAL_PNG = 2;
    public static final int ORIGINAL_PS = 7;
    public static final int ORIGINAL_TIFF = 5;
    public static final int ORIGINAL_WMF = 6;
    public static final int RIGHT = 2;
    public static final int TEXTWRAP = 4;
    public static final int UNDERLYING = 8;
    static long serialId;
    private float XYRatio = 0.0f;
    protected float absoluteX = Float.NaN;
    protected float absoluteY = Float.NaN;
    protected HashMap<PdfName, PdfObject> accessibleAttributes = null;
    private PdfDictionary additional = null;
    protected int alignment;
    protected String alt;
    protected Annotation annotation = null;
    protected int bpc = 1;
    protected int colorspace = -1;
    protected int colortransform = 1;
    protected int compressionLevel = -1;
    protected boolean deflated = false;
    private PdfIndirectReference directReference;
    protected int dpiX = 0;
    protected int dpiY = 0;
    private AccessibleElementId id = null;
    protected Image imageMask;
    protected float indentationLeft = 0.0f;
    protected float indentationRight = 0.0f;
    private float initialRotation;
    protected boolean interpolation;
    protected boolean invert = false;
    protected PdfOCG layer;
    protected boolean mask = false;
    protected Long mySerialId = Image.getSerialId();
    protected byte[] originalData;
    protected int originalType = 0;
    protected float paddingTop;
    protected float plainHeight;
    protected float plainWidth;
    protected ICC_Profile profile = null;
    protected byte[] rawData;
    protected PdfName role = PdfName.FIGURE;
    protected float rotationRadians;
    protected boolean scaleToFitHeight = true;
    protected boolean scaleToFitLineWhenOverflow;
    protected float scaledHeight;
    protected float scaledWidth;
    private boolean smask;
    protected float spacingAfter;
    protected float spacingBefore;
    protected PdfTemplate[] template = new PdfTemplate[1];
    protected int[] transparency;
    protected int type;
    protected URL url;
    private float widthPercentage = 100.0f;

    protected Image(Image image) {
        super(image);
        this.type = image.type;
        this.url = image.url;
        this.rawData = image.rawData;
        this.bpc = image.bpc;
        this.template = image.template;
        this.alignment = image.alignment;
        this.alt = image.alt;
        this.absoluteX = image.absoluteX;
        this.absoluteY = image.absoluteY;
        this.plainWidth = image.plainWidth;
        this.plainHeight = image.plainHeight;
        this.scaledWidth = image.scaledWidth;
        this.scaledHeight = image.scaledHeight;
        this.mySerialId = image.mySerialId;
        this.directReference = image.directReference;
        this.rotationRadians = image.rotationRadians;
        this.initialRotation = image.initialRotation;
        this.indentationLeft = image.indentationLeft;
        this.indentationRight = image.indentationRight;
        this.spacingBefore = image.spacingBefore;
        this.spacingAfter = image.spacingAfter;
        this.widthPercentage = image.widthPercentage;
        this.scaleToFitLineWhenOverflow = image.scaleToFitLineWhenOverflow;
        this.scaleToFitHeight = image.scaleToFitHeight;
        this.annotation = image.annotation;
        this.layer = image.layer;
        this.interpolation = image.interpolation;
        this.originalType = image.originalType;
        this.originalData = image.originalData;
        this.deflated = image.deflated;
        this.dpiX = image.dpiX;
        this.dpiY = image.dpiY;
        this.XYRatio = image.XYRatio;
        this.colorspace = image.colorspace;
        this.invert = image.invert;
        this.profile = image.profile;
        this.additional = image.additional;
        this.mask = image.mask;
        this.imageMask = image.imageMask;
        this.smask = image.smask;
        this.transparency = image.transparency;
        this.role = image.role;
        if (image.accessibleAttributes != null) {
            this.accessibleAttributes = new HashMap<PdfName, PdfObject>(image.accessibleAttributes);
        }
        this.setId(image.getId());
    }

    public Image(URL uRL) {
        super(0.0f, 0.0f);
        this.url = uRL;
        this.alignment = 0;
        this.rotationRadians = 0.0f;
    }

    public static Image getInstance(int n2, int n3, int n4, int n5, byte[] arrby) {
        return Image.getInstance(n2, n3, n4, n5, arrby, null);
    }

    public static Image getInstance(int n2, int n3, int n4, int n5, byte[] object, int[] arrn) {
        if (arrn != null && arrn.length != n4 * 2) {
            throw new BadElementException(MessageLocalization.getComposedMessage("transparency.length.must.be.equal.to.componentes.2", new Object[0]));
        }
        if (n4 == 1 && n5 == 1) {
            return Image.getInstance(n2, n3, false, 256, 1, CCITTG4Encoder.compress(object, n2, n3), arrn);
        }
        object = new ImgRaw(n2, n3, n4, n5, (byte[])object);
        object.transparency = arrn;
        return object;
    }

    public static Image getInstance(int n2, int n3, boolean bl2, int n4, int n5, byte[] arrby) {
        return Image.getInstance(n2, n3, bl2, n4, n5, arrby, null);
    }

    public static Image getInstance(int n2, int n3, boolean bl2, int n4, int n5, byte[] object, int[] arrn) {
        if (arrn != null && arrn.length != 2) {
            throw new BadElementException(MessageLocalization.getComposedMessage("transparency.length.must.be.equal.to.2.with.ccitt.images", new Object[0]));
        }
        object = new ImgCCITT(n2, n3, bl2, n4, n5, (byte[])object);
        object.transparency = arrn;
        return object;
    }

    public static Image getInstance(int n2, int n3, byte[] arrby, byte[] arrby2) {
        return new ImgJBIG2(n2, n3, arrby, arrby2);
    }

    public static Image getInstance(Image image) {
        if (image == null) {
            return null;
        }
        try {
            image = (Image)image.getClass().getDeclaredConstructor(Image.class).newInstance(image);
            return image;
        }
        catch (Exception exception) {
            throw new ExceptionConverter(exception);
        }
    }

    public static Image getInstance(PRIndirectReference pRIndirectReference) {
        Object object = (PdfDictionary)PdfReader.getPdfObjectRelease(pRIndirectReference);
        int n2 = ((PdfNumber)PdfReader.getPdfObjectRelease(object.get(PdfName.WIDTH))).intValue();
        int n3 = ((PdfNumber)PdfReader.getPdfObjectRelease(object.get(PdfName.HEIGHT))).intValue();
        Object object2 = object.get(PdfName.SMASK);
        object = object2 != null && object2.isIndirect() ? Image.getInstance((PRIndirectReference)object2) : ((object = object.get(PdfName.MASK)) != null && object.isIndirect() && PdfReader.getPdfObjectRelease((PdfObject)object) instanceof PdfDictionary ? Image.getInstance((PRIndirectReference)object) : null);
        object2 = new ImgRaw(n2, n3, 1, 1, null);
        object2.imageMask = object;
        object2.directReference = pRIndirectReference;
        return object2;
    }

    public static Image getInstance(PdfTemplate pdfTemplate) {
        return new ImgTemplate(pdfTemplate);
    }

    public static Image getInstance(String string2) {
        return Image.getInstance(Utilities.toURL(string2));
    }

    public static Image getInstance(String string2, boolean bl2) {
        return Image.getInstance(Utilities.toURL(string2), bl2);
    }

    public static Image getInstance(URL uRL) {
        return Image.getInstance(uRL, false);
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    public static Image getInstance(URL var0, boolean var1_6) {
        block37 : {
            block36 : {
                block33 : {
                    block32 : {
                        var11_7 = new RandomAccessSourceFactory();
                        var10_9 = var0.openStream();
                        var2_11 = var10_9.read();
                        var3_12 = var10_9.read();
                        var4_13 = var10_9.read();
                        var5_14 = var10_9.read();
                        var6_15 = var10_9.read();
                        var7_16 = var10_9.read();
                        var8_17 = var10_9.read();
                        var9_18 = var10_9.read();
                        var10_9.close();
                        if (var2_11 != 71 || var3_12 != 73 || var4_13 != 70) break block32;
                        return new GifImage((URL)var0).getImage(1);
                    }
                    if (var2_11 == 255 && var3_12 == 216) {
                        return new Jpeg((URL)var0);
                    }
                    if (var2_11 == 0 && var3_12 == 0 && var4_13 == 0 && var5_14 == 12) {
                        return new Jpeg2000((URL)var0);
                    }
                    if (var2_11 != 255 || var3_12 != 79 || var4_13 != 255 || var5_14 != 81) ** GOTO lbl27
                    return new Jpeg2000((URL)var0);
lbl27: // 1 sources:
                    if (var2_11 == PngImage.PNGID[0] && var3_12 == PngImage.PNGID[1] && var4_13 == PngImage.PNGID[2] && var5_14 == PngImage.PNGID[3]) {
                        return PngImage.getImage((URL)var0);
                    }
                    if (var2_11 != 215 || var3_12 != 205) break block33;
                    return new ImgWMF((URL)var0);
                }
                if (var2_11 == 66 && var3_12 == 77) {
                    return BmpImage.getImage((URL)var0);
                }
                if (var2_11 == 77 && var3_12 == 77 && var4_13 == 0 && var5_14 == 42 || var2_11 == 73 && var3_12 == 73 && var4_13 == 42 && var5_14 == 0) {
                    block35 : {
                        block34 : {
                            var10_9 = var0.getProtocol().equals("file") != false ? new RandomAccessFileOrArray(var11_7.createBestSource(Utilities.unEscapeURL(var0.getFile()))) : new RandomAccessFileOrArray(var11_7.createSource((URL)var0));
                            var11_7 = var10_9;
                            var12_19 = TiffImage.getTiffImage((RandomAccessFileOrArray)var10_9, 1);
                            var11_7 = var10_9;
                            var12_19.url = var0;
                            var10_9.close();
                            return var12_19;
                            catch (RuntimeException var12_20) {
                                break block34;
                            }
                            catch (Throwable var0_1) {
                                var11_7 = null;
                                break block35;
                            }
                            catch (RuntimeException var12_21) {
                                var10_9 = null;
                            }
                        }
                        if (var1_6) {
                            var11_7 = var10_9;
                            var12_22 = TiffImage.getTiffImage((RandomAccessFileOrArray)var10_9, var1_6, 1);
                            var11_7 = var10_9;
                            var12_22.url = var0;
                            if (var10_9 == null) return var12_22;
                            var10_9.close();
                            return var12_22;
                        }
                        var11_7 = var10_9;
                        try {
                            throw var12_22;
                        }
                        catch (Throwable var0_2) {}
                    }
                    if (var11_7 == null) throw var0;
                    var11_7.close();
                    throw var0;
                }
                if (var2_11 != 151 || var3_12 != 74 || var4_13 != 66 || var5_14 != 50 || var6_15 != 13 || var7_16 != 10 || var8_17 != 26 || var9_18 != 10) throw new IOException(MessageLocalization.getComposedMessage("unknown.image.format", new Object[]{var0.toString()}));
                var10_9 = var0.getProtocol().equals("file") != false ? new RandomAccessFileOrArray(var11_7.createBestSource(Utilities.unEscapeURL(var0.getFile()))) : new RandomAccessFileOrArray(var11_7.createSource((URL)var0));
                try {
                    var11_7 = JBIG2Image.getJbig2Image((RandomAccessFileOrArray)var10_9, 1);
                    var11_7.url = var0;
                }
                catch (Throwable var0_4) {}
                var10_9.close();
                return var11_7;
                catch (Throwable var11_8) {
                    var0 = var10_9;
                    var10_9 = var11_8;
                }
                break block36;
                catch (Throwable var10_10) {
                    var0 = null;
                }
            }
            if (var0 == null) throw var10_9;
            var0.close();
            throw var10_9;
            break block37;
            catch (Throwable var0_5) {
                var10_9 = null;
            }
        }
        if (var10_9 == null) throw var0_3;
        var10_9.close();
        throw var0_3;
    }

    public static Image getInstance(byte[] arrby) {
        return Image.getInstance(arrby, false);
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    public static Image getInstance(byte[] var0, boolean var1_5) {
        block50 : {
            block48 : {
                block45 : {
                    block49 : {
                        block46 : {
                            block47 : {
                                block44 : {
                                    block43 : {
                                        block42 : {
                                            block41 : {
                                                var11_6 = new RandomAccessSourceFactory();
                                                var10_7 = null;
                                                var9_8 = null;
                                                var8_9 = null;
                                                var6_14 = var9_8;
                                                var7_16 = new ByteArrayInputStream((byte[])var0);
                                                var2_20 = var7_16.read();
                                                var3_21 = var7_16.read();
                                                var4_22 = var7_16.read();
                                                var5_23 = var7_16.read();
                                                var7_16.close();
                                                if (var2_20 != 71 || var3_21 != 73 || var4_22 != 70) break block41;
                                                var6_14 = var9_8;
                                                return new GifImage((byte[])var0).getImage(1);
                                            }
                                            if (var2_20 == 255 && var3_21 == 216) {
                                                var6_14 = var9_8;
                                                return new Jpeg((byte[])var0);
                                            }
                                            if (var2_20 == 0 && var3_21 == 0 && var4_22 == 0 && var5_23 == 12) {
                                                var6_14 = var9_8;
                                                return new Jpeg2000((byte[])var0);
                                            }
                                            if (var2_20 != 255 || var3_21 != 79 || var4_22 != 255 || var5_23 != 81) ** GOTO lbl31
                                            var6_14 = var9_8;
                                            return new Jpeg2000((byte[])var0);
lbl31: // 1 sources:
                                            var6_14 = var9_8;
                                            if (var2_20 == PngImage.PNGID[0]) {
                                                var6_14 = var9_8;
                                                if (var3_21 == PngImage.PNGID[1]) {
                                                    var6_14 = var9_8;
                                                    if (var4_22 == PngImage.PNGID[2]) {
                                                        var6_14 = var9_8;
                                                        if (var5_23 == PngImage.PNGID[3]) {
                                                            var6_14 = var9_8;
                                                            return PngImage.getImage((byte[])var0);
                                                        }
                                                    }
                                                }
                                            }
                                            if (var2_20 != 215 || var3_21 != 205) break block42;
                                            var6_14 = var9_8;
                                            return new ImgWMF((byte[])var0);
                                        }
                                        if (var2_20 == 66 && var3_21 == 77) {
                                            var6_14 = var9_8;
                                            return BmpImage.getImage((byte[])var0);
                                        }
                                        if ((var2_20 != 77 || var3_21 != 77 || var4_22 != 0 || var5_23 != 42) && (var2_20 != 73 || var3_21 != 73 || var4_22 != 42 || var5_23 != 0)) break block47;
                                        var6_14 = var7_16 = new RandomAccessFileOrArray(var11_6.createSource((byte[])var0));
                                        var8_9 = TiffImage.getTiffImage((RandomAccessFileOrArray)var7_16, 1);
                                        var6_14 = var7_16;
                                        if (var8_9.getOriginalData() == null) {
                                            var6_14 = var7_16;
                                            var8_9.setOriginalData((byte[])var0);
                                        }
                                        var6_14 = var9_8;
                                        var7_16.close();
                                        return var8_9;
                                        catch (RuntimeException var8_10) {
                                            break block43;
                                        }
                                        catch (Throwable var7_17) {
                                            var0 = null;
                                            break block44;
                                        }
                                        catch (RuntimeException var8_11) {
                                            var7_16 = null;
                                        }
                                    }
                                    if (var1_5) {
                                        var6_14 = var7_16;
                                        var8_12 = TiffImage.getTiffImage((RandomAccessFileOrArray)var7_16, var1_5, 1);
                                        var6_14 = var7_16;
                                        if (var8_12.getOriginalData() == null) {
                                            var6_14 = var7_16;
                                            var8_12.setOriginalData((byte[])var0);
                                        }
                                        if (var7_16 == null) return var8_12;
                                        var6_14 = var9_8;
                                        var7_16.close();
                                        return var8_12;
                                    }
                                    var6_14 = var7_16;
                                    try {
                                        throw var8_12;
                                    }
                                    catch (Throwable var7_18) {
                                        var0 = var6_14;
                                    }
                                }
                                if (var0 == null) ** GOTO lbl94
                                var6_14 = var9_8;
                                var0.close();
lbl94: // 2 sources:
                                var6_14 = var9_8;
                                throw var7_19;
                            }
                            var6_14 = var10_7;
                            if (var2_20 != 151) break block48;
                            var6_14 = var10_7;
                            if (var3_21 != 74) break block48;
                            var6_14 = var10_7;
                            if (var4_22 != 66) break block48;
                            var6_14 = var10_7;
                            if (var5_23 != 50) break block48;
                            var6_14 = var9_8;
                            var7_16 = new ByteArrayInputStream((byte[])var0);
                            var7_16.skip(4L);
                            var2_20 = var7_16.read();
                            var3_21 = var7_16.read();
                            var4_22 = var7_16.read();
                            var5_23 = var7_16.read();
                            var7_16.close();
                            if (var2_20 != 13 || var3_21 != 10 || var4_22 != 26 || var5_23 != 10) break block45;
                            var6_14 = new RandomAccessFileOrArray(var11_6.createSource((byte[])var0));
                            var8_9 = JBIG2Image.getJbig2Image((RandomAccessFileOrArray)var6_14, 1);
                            if (var8_9.getOriginalData() != null) break block46;
                            var8_9.setOriginalData((byte[])var0);
                        }
                        var6_14.close();
                        var7_16.close();
                        return var8_9;
                        catch (Throwable var8_13) {
                            var0 = var6_14;
                            var6_14 = var8_13;
                        }
                        break block49;
                        catch (Throwable var6_15) {
                            var0 = var8_9;
                        }
                    }
                    if (var0 == null) throw var6_14;
                    try {
                        var0.close();
                        throw var6_14;
                    }
                    catch (Throwable var0_1) {
                        var6_14 = var7_16;
                    }
                }
                var6_14 = var7_16;
                break block48;
                break block50;
            }
            throw new IOException(MessageLocalization.getComposedMessage("the.byte.array.is.not.a.recognized.imageformat", new Object[0]));
            catch (Throwable var0_2) {
                var6_14 = var7_16;
            }
            break block50;
            catch (Throwable var0_3) {
                // empty catch block
            }
        }
        if (var6_14 == null) throw var0_4;
        var6_14.close();
        throw var0_4;
    }

    protected static Long getSerialId() {
        synchronized (Image.class) {
            long l2 = ++serialId;
            return l2;
        }
    }

    private PdfObject simplifyColorspace(PdfArray pdfObject) {
        if (pdfObject == null) {
            return pdfObject;
        }
        PdfName pdfName = pdfObject.getAsName(0);
        if (PdfName.CALGRAY.equals(pdfName)) {
            return PdfName.DEVICEGRAY;
        }
        if (PdfName.CALRGB.equals(pdfName)) {
            pdfObject = PdfName.DEVICERGB;
        }
        return pdfObject;
    }

    public float getAbsoluteX() {
        return this.absoluteX;
    }

    public float getAbsoluteY() {
        return this.absoluteY;
    }

    @Override
    public PdfObject getAccessibleAttribute(PdfName pdfName) {
        if (this.accessibleAttributes != null) {
            return this.accessibleAttributes.get(pdfName);
        }
        return null;
    }

    @Override
    public HashMap<PdfName, PdfObject> getAccessibleAttributes() {
        return this.accessibleAttributes;
    }

    public PdfDictionary getAdditional() {
        return this.additional;
    }

    public int getAlignment() {
        return this.alignment;
    }

    @Override
    public String getAlt() {
        return this.alt;
    }

    public Annotation getAnnotation() {
        return this.annotation;
    }

    public int getBpc() {
        return this.bpc;
    }

    public int getColorTransform() {
        return this.colortransform;
    }

    public int getColorspace() {
        return this.colorspace;
    }

    public int getCompressionLevel() {
        return this.compressionLevel;
    }

    public PdfIndirectReference getDirectReference() {
        return this.directReference;
    }

    public int getDpiX() {
        return this.dpiX;
    }

    public int getDpiY() {
        return this.dpiY;
    }

    public ICC_Profile getICCProfile() {
        return this.profile;
    }

    @Override
    public AccessibleElementId getId() {
        if (this.id == null) {
            this.id = new AccessibleElementId();
        }
        return this.id;
    }

    public Image getImageMask() {
        return this.imageMask;
    }

    public float getImageRotation() {
        float f2;
        float f3 = f2 = (float)((double)(this.rotationRadians - this.initialRotation) % 6.283185307179586);
        if (f2 < 0.0f) {
            f3 = (float)((double)f2 + 6.283185307179586);
        }
        return f3;
    }

    @Override
    public float getIndentationLeft() {
        return this.indentationLeft;
    }

    @Override
    public float getIndentationRight() {
        return this.indentationRight;
    }

    public float getInitialRotation() {
        return this.initialRotation;
    }

    public PdfOCG getLayer() {
        return this.layer;
    }

    public Long getMySerialId() {
        return this.mySerialId;
    }

    public byte[] getOriginalData() {
        return this.originalData;
    }

    public int getOriginalType() {
        return this.originalType;
    }

    @Override
    public float getPaddingTop() {
        return this.paddingTop;
    }

    public float getPlainHeight() {
        return this.plainHeight;
    }

    public float getPlainWidth() {
        return this.plainWidth;
    }

    public byte[] getRawData() {
        return this.rawData;
    }

    @Override
    public PdfName getRole() {
        return this.role;
    }

    public float getScaledHeight() {
        return this.scaledHeight;
    }

    public float getScaledWidth() {
        return this.scaledWidth;
    }

    @Override
    public float getSpacingAfter() {
        return this.spacingAfter;
    }

    @Override
    public float getSpacingBefore() {
        return this.spacingBefore;
    }

    public PdfTemplate getTemplateData() {
        return this.template[0];
    }

    public int[] getTransparency() {
        return this.transparency;
    }

    public URL getUrl() {
        return this.url;
    }

    public float getWidthPercentage() {
        return this.widthPercentage;
    }

    public float getXYRatio() {
        return this.XYRatio;
    }

    public boolean hasAbsoluteX() {
        return Float.isNaN(this.absoluteX) ^ true;
    }

    public boolean hasAbsoluteY() {
        return Float.isNaN(this.absoluteY) ^ true;
    }

    public boolean hasICCProfile() {
        if (this.profile != null) {
            return true;
        }
        return false;
    }

    public boolean isDeflated() {
        return this.deflated;
    }

    public boolean isImgRaw() {
        if (this.type == 34) {
            return true;
        }
        return false;
    }

    public boolean isImgTemplate() {
        if (this.type == 35) {
            return true;
        }
        return false;
    }

    @Override
    public boolean isInline() {
        return true;
    }

    public boolean isInterpolation() {
        return this.interpolation;
    }

    public boolean isInverted() {
        return this.invert;
    }

    public boolean isJpeg() {
        if (this.type == 32) {
            return true;
        }
        return false;
    }

    public boolean isMask() {
        return this.mask;
    }

    public boolean isMaskCandidate() {
        if (this.type == 34 && this.bpc > 255) {
            return true;
        }
        if (this.colorspace == 1) {
            return true;
        }
        return false;
    }

    @Override
    public boolean isNestable() {
        return true;
    }

    public boolean isScaleToFitHeight() {
        return this.scaleToFitHeight;
    }

    public boolean isScaleToFitLineWhenOverflow() {
        return this.scaleToFitLineWhenOverflow;
    }

    public boolean isSmask() {
        return this.smask;
    }

    public void makeMask() {
        if (this.isMaskCandidate()) {
            this.mask = true;
            return;
        }
        throw new DocumentException(MessageLocalization.getComposedMessage("this.image.can.not.be.an.image.mask", new Object[0]));
    }

    public float[] matrix() {
        return this.matrix(1.0f);
    }

    public float[] matrix(float f2) {
        float[] arrf = new float[8];
        float f3 = (float)Math.cos(this.rotationRadians);
        float f4 = (float)Math.sin(this.rotationRadians);
        arrf[0] = this.plainWidth * f3 * f2;
        arrf[1] = this.plainWidth * f4 * f2;
        arrf[2] = (- this.plainHeight) * f4 * f2;
        arrf[3] = this.plainHeight * f3 * f2;
        if ((double)this.rotationRadians < 1.5707963267948966) {
            arrf[4] = arrf[2];
            arrf[5] = 0.0f;
            arrf[6] = arrf[0];
            arrf[7] = arrf[1] + arrf[3];
            return arrf;
        }
        if ((double)this.rotationRadians < 3.141592653589793) {
            arrf[4] = arrf[0] + arrf[2];
            arrf[5] = arrf[3];
            arrf[6] = 0.0f;
            arrf[7] = arrf[1];
            return arrf;
        }
        if ((double)this.rotationRadians < 4.71238898038469) {
            arrf[4] = arrf[0];
            arrf[5] = arrf[1] + arrf[3];
            arrf[6] = arrf[2];
            arrf[7] = 0.0f;
            return arrf;
        }
        arrf[4] = 0.0f;
        arrf[5] = arrf[1];
        arrf[6] = arrf[0] + arrf[2];
        arrf[7] = arrf[3];
        return arrf;
    }

    public void scaleAbsolute(float f2, float f3) {
        this.plainWidth = f2;
        this.plainHeight = f3;
        float[] arrf = this.matrix();
        this.scaledWidth = arrf[6] - arrf[4];
        this.scaledHeight = arrf[7] - arrf[5];
        this.setWidthPercentage(0.0f);
    }

    public void scaleAbsolute(Rectangle rectangle) {
        this.scaleAbsolute(rectangle.getWidth(), rectangle.getHeight());
    }

    public void scaleAbsoluteHeight(float f2) {
        this.plainHeight = f2;
        float[] arrf = this.matrix();
        this.scaledWidth = arrf[6] - arrf[4];
        this.scaledHeight = arrf[7] - arrf[5];
        this.setWidthPercentage(0.0f);
    }

    public void scaleAbsoluteWidth(float f2) {
        this.plainWidth = f2;
        float[] arrf = this.matrix();
        this.scaledWidth = arrf[6] - arrf[4];
        this.scaledHeight = arrf[7] - arrf[5];
        this.setWidthPercentage(0.0f);
    }

    public void scalePercent(float f2) {
        this.scalePercent(f2, f2);
    }

    public void scalePercent(float f2, float f3) {
        this.plainWidth = this.getWidth() * f2 / 100.0f;
        this.plainHeight = this.getHeight() * f3 / 100.0f;
        float[] arrf = this.matrix();
        this.scaledWidth = arrf[6] - arrf[4];
        this.scaledHeight = arrf[7] - arrf[5];
        this.setWidthPercentage(0.0f);
    }

    public void scaleToFit(float f2, float f3) {
        this.scalePercent(100.0f);
        f2 = f2 * 100.0f / this.getScaledWidth();
        f3 = f3 * 100.0f / this.getScaledHeight();
        if (f2 >= f3) {
            f2 = f3;
        }
        this.scalePercent(f2);
        this.setWidthPercentage(0.0f);
    }

    public void scaleToFit(Rectangle rectangle) {
        this.scaleToFit(rectangle.getWidth(), rectangle.getHeight());
    }

    public void setAbsolutePosition(float f2, float f3) {
        this.absoluteX = f2;
        this.absoluteY = f3;
    }

    @Override
    public void setAccessibleAttribute(PdfName pdfName, PdfObject pdfObject) {
        if (this.accessibleAttributes == null) {
            this.accessibleAttributes = new HashMap();
        }
        this.accessibleAttributes.put(pdfName, pdfObject);
    }

    public void setAdditional(PdfDictionary pdfDictionary) {
        this.additional = pdfDictionary;
    }

    public void setAlignment(int n2) {
        this.alignment = n2;
    }

    @Override
    public void setAlt(String string2) {
        this.alt = string2;
        this.setAccessibleAttribute(PdfName.ALT, new PdfString(string2));
    }

    public void setAnnotation(Annotation annotation) {
        this.annotation = annotation;
    }

    public void setColorTransform(int n2) {
        this.colortransform = n2;
    }

    public void setCompressionLevel(int n2) {
        int n3;
        block3 : {
            block2 : {
                if (n2 < 0) break block2;
                n3 = n2;
                if (n2 <= 9) break block3;
            }
            n3 = -1;
        }
        this.compressionLevel = n3;
    }

    public void setDeflated(boolean bl2) {
        this.deflated = bl2;
    }

    public void setDirectReference(PdfIndirectReference pdfIndirectReference) {
        this.directReference = pdfIndirectReference;
    }

    public void setDpi(int n2, int n3) {
        this.dpiX = n2;
        this.dpiY = n3;
    }

    @Override
    public void setId(AccessibleElementId accessibleElementId) {
        this.id = accessibleElementId;
    }

    public void setImageMask(Image image) {
        boolean bl2 = this.mask;
        boolean bl3 = false;
        if (!bl2) {
            if (image.mask) {
                this.imageMask = image;
                bl2 = bl3;
                if (image.bpc > 1) {
                    bl2 = bl3;
                    if (image.bpc <= 8) {
                        bl2 = true;
                    }
                }
                this.smask = bl2;
                return;
            }
            throw new DocumentException(MessageLocalization.getComposedMessage("the.image.mask.is.not.a.mask.did.you.do.makemask", new Object[0]));
        }
        throw new DocumentException(MessageLocalization.getComposedMessage("an.image.mask.cannot.contain.another.image.mask", new Object[0]));
    }

    @Override
    public void setIndentationLeft(float f2) {
        this.indentationLeft = f2;
    }

    @Override
    public void setIndentationRight(float f2) {
        this.indentationRight = f2;
    }

    public void setInitialRotation(float f2) {
        float f3 = this.rotationRadians;
        float f4 = this.initialRotation;
        this.initialRotation = f2;
        this.setRotation(f3 - f4);
    }

    public void setInterpolation(boolean bl2) {
        this.interpolation = bl2;
    }

    public void setInverted(boolean bl2) {
        this.invert = bl2;
    }

    public void setLayer(PdfOCG pdfOCG) {
        this.layer = pdfOCG;
    }

    public void setOriginalData(byte[] arrby) {
        this.originalData = arrby;
    }

    public void setOriginalType(int n2) {
        this.originalType = n2;
    }

    @Override
    public void setPaddingTop(float f2) {
        this.paddingTop = f2;
    }

    @Override
    public void setRole(PdfName pdfName) {
        this.role = pdfName;
    }

    public void setRotation(float f2) {
        this.rotationRadians = (float)((double)(f2 + this.initialRotation) % 6.283185307179586);
        if (this.rotationRadians < 0.0f) {
            this.rotationRadians = (float)((double)this.rotationRadians + 6.283185307179586);
        }
        float[] arrf = this.matrix();
        this.scaledWidth = arrf[6] - arrf[4];
        this.scaledHeight = arrf[7] - arrf[5];
    }

    public void setRotationDegrees(float f2) {
        this.setRotation(f2 / 180.0f * (float)3.141592653589793);
    }

    public void setScaleToFitHeight(boolean bl2) {
        this.scaleToFitHeight = bl2;
    }

    public void setScaleToFitLineWhenOverflow(boolean bl2) {
        this.scaleToFitLineWhenOverflow = bl2;
    }

    public void setSmask(boolean bl2) {
        this.smask = bl2;
    }

    @Override
    public void setSpacingAfter(float f2) {
        this.spacingAfter = f2;
    }

    @Override
    public void setSpacingBefore(float f2) {
        this.spacingBefore = f2;
    }

    public void setTemplateData(PdfTemplate pdfTemplate) {
        this.template[0] = pdfTemplate;
    }

    public void setTransparency(int[] arrn) {
        this.transparency = arrn;
    }

    public void setUrl(URL uRL) {
        this.url = uRL;
    }

    public void setWidthPercentage(float f2) {
        this.widthPercentage = f2;
    }

    public void setXYRatio(float f2) {
        this.XYRatio = f2;
    }

    public void simplifyColorspace() {
        if (this.additional == null) {
            return;
        }
        PdfArray pdfArray = this.additional.getAsArray(PdfName.COLORSPACE);
        if (pdfArray == null) {
            return;
        }
        PdfObject pdfObject = this.simplifyColorspace(pdfArray);
        if (!pdfObject.isName()) {
            PdfObject pdfObject2 = pdfArray.getAsName(0);
            pdfObject = pdfArray;
            if (PdfName.INDEXED.equals(pdfObject2)) {
                pdfObject = pdfArray;
                if (pdfArray.size() >= 2) {
                    pdfObject2 = pdfArray.getAsArray(1);
                    pdfObject = pdfArray;
                    if (pdfObject2 != null) {
                        pdfArray.set(1, this.simplifyColorspace((PdfArray)pdfObject2));
                        pdfObject = pdfArray;
                    }
                }
            }
        }
        this.additional.put(PdfName.COLORSPACE, pdfObject);
    }

    public void tagICC(ICC_Profile iCC_Profile) {
        this.profile = iCC_Profile;
    }

    @Override
    public int type() {
        return this.type;
    }
}

