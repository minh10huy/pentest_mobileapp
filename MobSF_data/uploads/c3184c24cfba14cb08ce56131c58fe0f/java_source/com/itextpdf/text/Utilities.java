/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text;

import com.itextpdf.text.pdf.ByteBuffer;
import com.itextpdf.text.pdf.PRTokeniser;
import com.itextpdf.text.pdf.PdfEncodings;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.net.URI;
import java.net.URL;
import java.util.Collections;
import java.util.Hashtable;
import java.util.Properties;
import java.util.Set;

public class Utilities {
    public static Object[][] addToArray(Object[][] arrobject, Object[] arrobject2) {
        if (arrobject == null) {
            return new Object[][]{arrobject2};
        }
        Object[][] arrobject3 = new Object[arrobject.length + 1][];
        System.arraycopy(arrobject, 0, arrobject3, 0, arrobject.length);
        arrobject3[arrobject.length] = arrobject2;
        return arrobject3;
    }

    public static boolean checkTrueOrFalse(Properties properties, String string2) {
        return "true".equalsIgnoreCase(properties.getProperty(string2));
    }

    public static String convertFromUtf32(int n2) {
        if (n2 < 65536) {
            return Character.toString((char)n2);
        }
        return new String(new char[]{(char)((n2 -= 65536) / 1024 + 55296), (char)(n2 % 1024 + 56320)});
    }

    public static String convertToHex(byte[] arrby) {
        ByteBuffer byteBuffer = new ByteBuffer();
        int n2 = arrby.length;
        for (int i2 = 0; i2 < n2; ++i2) {
            byteBuffer.appendHex(arrby[i2]);
        }
        return PdfEncodings.convertToString(byteBuffer.toByteArray(), null).toUpperCase();
    }

    public static int convertToUtf32(char c2, char c3) {
        return (c2 - 55296) * 1024 + c3 - 56320 + 65536;
    }

    public static int convertToUtf32(String string2, int n2) {
        return (string2.charAt(n2) - 55296) * 1024 + string2.charAt(n2 + 1) - 56320 + 65536;
    }

    public static int convertToUtf32(char[] arrc, int n2) {
        return (arrc[n2] - 55296) * 1024 + arrc[n2 + 1] - 56320 + 65536;
    }

    public static char[] copyOfRange(char[] object, int n2, int n3) {
        int n4 = n3 - n2;
        if (n4 >= 0) {
            char[] arrc = new char[n4];
            System.arraycopy(object, n2, arrc, 0, Math.min(((Object)object).length - n2, n4));
            return arrc;
        }
        object = new StringBuilder();
        object.append(n2);
        object.append(" > ");
        object.append(n3);
        throw new IllegalArgumentException(object.toString());
    }

    @Deprecated
    public static <K, V> Set<K> getKeySet(Hashtable<K, V> hashtable) {
        if (hashtable == null) {
            return Collections.emptySet();
        }
        return hashtable.keySet();
    }

    public static final float inchesToMillimeters(float f2) {
        return f2 * 25.4f;
    }

    public static final float inchesToPoints(float f2) {
        return f2 * 72.0f;
    }

    public static boolean isSurrogateHigh(char c2) {
        if (c2 >= '\ud800' && c2 <= '\udbff') {
            return true;
        }
        return false;
    }

    public static boolean isSurrogateLow(char c2) {
        if (c2 >= '\udc00' && c2 <= '\udfff') {
            return true;
        }
        return false;
    }

    public static boolean isSurrogatePair(String string2, int n2) {
        boolean bl2;
        boolean bl3 = bl2 = false;
        if (n2 >= 0) {
            if (n2 > string2.length() - 2) {
                return false;
            }
            bl3 = bl2;
            if (Utilities.isSurrogateHigh(string2.charAt(n2))) {
                bl3 = bl2;
                if (Utilities.isSurrogateLow(string2.charAt(n2 + 1))) {
                    bl3 = true;
                }
            }
        }
        return bl3;
    }

    public static boolean isSurrogatePair(char[] arrc, int n2) {
        boolean bl2;
        boolean bl3 = bl2 = false;
        if (n2 >= 0) {
            if (n2 > arrc.length - 2) {
                return false;
            }
            bl3 = bl2;
            if (Utilities.isSurrogateHigh(arrc[n2])) {
                bl3 = bl2;
                if (Utilities.isSurrogateLow(arrc[n2 + 1])) {
                    bl3 = true;
                }
            }
        }
        return bl3;
    }

    public static final float millimetersToInches(float f2) {
        return f2 / 25.4f;
    }

    public static final float millimetersToPoints(float f2) {
        return Utilities.inchesToPoints(Utilities.millimetersToInches(f2));
    }

    public static final float pointsToInches(float f2) {
        return f2 / 72.0f;
    }

    public static final float pointsToMillimeters(float f2) {
        return Utilities.inchesToMillimeters(Utilities.pointsToInches(f2));
    }

    public static String readFileToString(File file) {
        byte[] arrby = new byte[(int)file.length()];
        new FileInputStream(file).read(arrby);
        return new String(arrby);
    }

    public static String readFileToString(String string2) {
        return Utilities.readFileToString(new File(string2));
    }

    public static void skip(InputStream inputStream, int n2) {
        while (n2 > 0) {
            long l2 = n2;
            long l3 = inputStream.skip(l2);
            if (l3 <= 0L) {
                return;
            }
            n2 = (int)(l2 - l3);
        }
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    public static URL toURL(String string2) {
        try {
            return new URL(string2);
        }
        catch (Exception exception) {
            return new File(string2).toURI().toURL();
        }
    }

    public static String unEscapeURL(String arrc) {
        StringBuffer stringBuffer = new StringBuffer();
        arrc = arrc.toCharArray();
        for (int i2 = 0; i2 < arrc.length; ++i2) {
            int n2;
            char c2 = arrc[i2];
            if (c2 == '%' && (n2 = i2 + 2) < arrc.length) {
                int n3 = PRTokeniser.getHex(arrc[i2 + 1]);
                int n4 = PRTokeniser.getHex(arrc[n2]);
                if (n3 >= 0 && n4 >= 0) {
                    stringBuffer.append((char)(n3 * 16 + n4));
                    i2 = n2;
                    continue;
                }
            }
            stringBuffer.append(c2);
        }
        return stringBuffer.toString();
    }
}

