/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.io;

import com.itextpdf.text.io.ByteBufferRandomAccessSource;
import com.itextpdf.text.io.MapFailedException;
import com.itextpdf.text.io.RandomAccessSource;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.MappedByteBuffer;
import java.nio.channels.FileChannel;

class MappedChannelRandomAccessSource
implements RandomAccessSource {
    private final FileChannel channel;
    private final long length;
    private final long offset;
    private ByteBufferRandomAccessSource source;

    public MappedChannelRandomAccessSource(FileChannel object, long l2, long l3) {
        if (l2 >= 0L) {
            if (l3 > 0L) {
                this.channel = object;
                this.offset = l2;
                this.length = l3;
                this.source = null;
                return;
            }
            object = new StringBuilder();
            object.append(l3);
            object.append(" is zero or negative");
            throw new IllegalArgumentException(object.toString());
        }
        object = new StringBuilder();
        object.append(l2);
        object.append(" is negative");
        throw new IllegalArgumentException(object.toString());
    }

    private static boolean exceptionIsMapFailureException(IOException iOException) {
        if (iOException.getMessage() != null && iOException.getMessage().indexOf("Map failed") >= 0) {
            return true;
        }
        return false;
    }

    @Override
    public void close() {
        if (this.source == null) {
            return;
        }
        this.source.close();
        this.source = null;
    }

    @Override
    public int get(long l2) {
        if (this.source != null) {
            return this.source.get(l2);
        }
        throw new IOException("RandomAccessSource not opened");
    }

    @Override
    public int get(long l2, byte[] arrby, int n2, int n3) {
        if (this.source != null) {
            return this.source.get(l2, arrby, n2, n3);
        }
        throw new IOException("RandomAccessSource not opened");
    }

    @Override
    public long length() {
        return this.length;
    }

    void open() {
        if (this.source != null) {
            return;
        }
        if (this.channel.isOpen()) {
            try {
                this.source = new ByteBufferRandomAccessSource(this.channel.map(FileChannel.MapMode.READ_ONLY, this.offset, this.length));
                return;
            }
            catch (IOException iOException) {
                if (MappedChannelRandomAccessSource.exceptionIsMapFailureException(iOException)) {
                    throw new MapFailedException(iOException);
                }
                throw iOException;
            }
        }
        throw new IllegalStateException("Channel is closed");
    }

    public String toString() {
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append(this.getClass().getName());
        stringBuilder.append(" (");
        stringBuilder.append(this.offset);
        stringBuilder.append(", ");
        stringBuilder.append(this.length);
        stringBuilder.append(")");
        return stringBuilder.toString();
    }
}

