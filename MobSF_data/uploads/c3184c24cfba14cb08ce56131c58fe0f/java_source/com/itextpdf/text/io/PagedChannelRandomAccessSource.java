/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.io;

import com.itextpdf.text.io.GroupedRandomAccessSource;
import com.itextpdf.text.io.MappedChannelRandomAccessSource;
import com.itextpdf.text.io.RandomAccessSource;
import java.io.IOException;
import java.nio.channels.FileChannel;
import java.util.Iterator;
import java.util.LinkedList;

class PagedChannelRandomAccessSource
extends GroupedRandomAccessSource
implements RandomAccessSource {
    public static final int DEFAULT_MAX_OPEN_BUFFERS = 16;
    public static final int DEFAULT_TOTAL_BUFSIZE = 67108864;
    private final int bufferSize;
    private final FileChannel channel;
    private final MRU<RandomAccessSource> mru;

    public PagedChannelRandomAccessSource(FileChannel fileChannel) {
        this(fileChannel, 67108864, 16);
    }

    public PagedChannelRandomAccessSource(FileChannel fileChannel, int n2, int n3) {
        super(PagedChannelRandomAccessSource.buildSources(fileChannel, n2 /= n3));
        this.channel = fileChannel;
        this.bufferSize = n2;
        this.mru = new MRU(n3);
    }

    private static RandomAccessSource[] buildSources(FileChannel fileChannel, int n2) {
        long l2 = fileChannel.size();
        if (l2 > 0L) {
            long l3 = n2;
            int n3 = (int)(l2 / l3);
            int n4 = 0;
            n2 = l2 % l3 == 0L ? 0 : 1;
            RandomAccessSource[] arrrandomAccessSource = new MappedChannelRandomAccessSource[n3 += n2];
            for (n2 = n4; n2 < n3; ++n2) {
                long l4 = (long)n2 * l3;
                arrrandomAccessSource[n2] = new MappedChannelRandomAccessSource(fileChannel, l4, Math.min(l2 - l4, l3));
            }
            return arrrandomAccessSource;
        }
        throw new IOException("File size must be greater than zero");
    }

    @Override
    public void close() {
        super.close();
        this.channel.close();
    }

    @Override
    protected int getStartingSourceIndex(long l2) {
        return (int)(l2 / (long)this.bufferSize);
    }

    @Override
    protected void sourceInUse(RandomAccessSource randomAccessSource) {
        ((MappedChannelRandomAccessSource)randomAccessSource).open();
    }

    @Override
    protected void sourceReleased(RandomAccessSource randomAccessSource) {
        if ((randomAccessSource = this.mru.enqueue(randomAccessSource)) != null) {
            randomAccessSource.close();
        }
    }

    private static class MRU<E> {
        private final int limit;
        private LinkedList<E> queue = new LinkedList();

        public MRU(int n2) {
            this.limit = n2;
        }

        public E enqueue(E e2) {
            if (this.queue.size() > 0 && this.queue.getFirst() == e2) {
                return null;
            }
            Iterator<E> iterator = this.queue.iterator();
            while (iterator.hasNext()) {
                if (e2 != iterator.next()) continue;
                iterator.remove();
                this.queue.addFirst(e2);
                return null;
            }
            this.queue.addFirst(e2);
            if (this.queue.size() > this.limit) {
                return this.queue.removeLast();
            }
            return null;
        }
    }

}

