/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text;

import com.itextpdf.text.AccessibleElementId;
import com.itextpdf.text.Chunk;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.ElementListener;
import com.itextpdf.text.Font;
import com.itextpdf.text.LargeElement;
import com.itextpdf.text.MarkedObject;
import com.itextpdf.text.MarkedSection;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.TextElementArray;
import com.itextpdf.text.api.Indentable;
import com.itextpdf.text.error_messages.MessageLocalization;
import com.itextpdf.text.pdf.PdfName;
import com.itextpdf.text.pdf.PdfObject;
import com.itextpdf.text.pdf.interfaces.IAccessibleElement;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;

public class Section
extends ArrayList<Element>
implements LargeElement,
TextElementArray,
Indentable,
IAccessibleElement {
    public static final int NUMBERSTYLE_DOTTED = 0;
    public static final int NUMBERSTYLE_DOTTED_WITHOUT_FINAL_DOT = 1;
    private static final long serialVersionUID = 3324172577544748043L;
    protected boolean addedCompletely = false;
    protected boolean bookmarkOpen = true;
    protected String bookmarkTitle;
    protected boolean complete = true;
    protected float indentation;
    protected float indentationLeft;
    protected float indentationRight;
    protected boolean notAddedYet = true;
    protected int numberDepth;
    protected int numberStyle = 0;
    protected ArrayList<Integer> numbers = null;
    protected int subsections = 0;
    protected Paragraph title;
    protected boolean triggerNewPage = false;

    protected Section() {
        this.title = new Paragraph();
        this.numberDepth = 1;
        Paragraph paragraph = this.title;
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("H");
        stringBuilder.append(this.numberDepth);
        paragraph.setRole(new PdfName(stringBuilder.toString()));
    }

    protected Section(Paragraph paragraph, int n2) {
        this.numberDepth = n2;
        this.title = paragraph;
        if (paragraph != null) {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("H");
            stringBuilder.append(n2);
            paragraph.setRole(new PdfName(stringBuilder.toString()));
        }
    }

    public static Paragraph constructTitle(Paragraph paragraph, ArrayList<Integer> paragraph2, int n2, int n3) {
        if (paragraph == null) {
            return null;
        }
        int n4 = Math.min(paragraph2.size(), n2);
        if (n4 < 1) {
            return paragraph;
        }
        StringBuffer stringBuffer = new StringBuffer(" ");
        for (n2 = 0; n2 < n4; ++n2) {
            stringBuffer.insert(0, ".");
            stringBuffer.insert(0, (Integer)paragraph2.get(n2));
        }
        if (n3 == 1) {
            stringBuffer.deleteCharAt(stringBuffer.length() - 2);
        }
        paragraph2 = new Paragraph(paragraph);
        paragraph2.add(0, new Chunk(stringBuffer.toString(), paragraph.getFont()));
        return paragraph2;
    }

    private void setNumbers(int n2, ArrayList<Integer> arrayList) {
        this.numbers = new ArrayList();
        this.numbers.add(n2);
        this.numbers.addAll(arrayList);
    }

    @Override
    public void add(int n2, Element element) {
        if (!this.isAddedCompletely()) {
            try {
                if (element.isNestable()) {
                    super.add(n2, element);
                    return;
                }
                throw new ClassCastException(MessageLocalization.getComposedMessage("you.can.t.add.a.1.to.a.section", element.getClass().getName()));
            }
            catch (ClassCastException classCastException) {
                throw new ClassCastException(MessageLocalization.getComposedMessage("insertion.of.illegal.element.1", classCastException.getMessage()));
            }
        }
        throw new IllegalStateException(MessageLocalization.getComposedMessage("this.largeelement.has.already.been.added.to.the.document", new Object[0]));
    }

    @Override
    public boolean add(Element element) {
        if (!this.isAddedCompletely()) {
            try {
                if (element.type() == 13) {
                    int n2;
                    element = (Section)element;
                    this.subsections = n2 = this.subsections + 1;
                    Section.super.setNumbers(n2, this.numbers);
                    return super.add(element);
                }
                if (element instanceof MarkedSection && ((MarkedObject)element).element.type() == 13) {
                    int n3;
                    element = (MarkedSection)element;
                    Section section = (Section)element.element;
                    this.subsections = n3 = this.subsections + 1;
                    section.setNumbers(n3, this.numbers);
                    return super.add(element);
                }
                if (element.isNestable()) {
                    return super.add(element);
                }
                throw new ClassCastException(MessageLocalization.getComposedMessage("you.can.t.add.a.1.to.a.section", element.getClass().getName()));
            }
            catch (ClassCastException classCastException) {
                throw new ClassCastException(MessageLocalization.getComposedMessage("insertion.of.illegal.element.1", classCastException.getMessage()));
            }
        }
        throw new IllegalStateException(MessageLocalization.getComposedMessage("this.largeelement.has.already.been.added.to.the.document", new Object[0]));
    }

    @Override
    public boolean addAll(Collection<? extends Element> object) {
        if (object.size() == 0) {
            return false;
        }
        object = object.iterator();
        while (object.hasNext()) {
            this.add((Element)object.next());
        }
        return true;
    }

    protected MarkedSection addMarkedSection() {
        MarkedSection markedSection = new MarkedSection(new Section(null, this.numberDepth + 1));
        this.add(markedSection);
        return markedSection;
    }

    public Section addSection(float f2, Paragraph paragraph) {
        return this.addSection(f2, paragraph, this.numberDepth + 1);
    }

    public Section addSection(float f2, Paragraph arrayList, int n2) {
        if (!this.isAddedCompletely()) {
            arrayList = new Section((Paragraph)arrayList, n2);
            arrayList.setIndentation(f2);
            this.add((Element)((Object)arrayList));
            return arrayList;
        }
        throw new IllegalStateException(MessageLocalization.getComposedMessage("this.largeelement.has.already.been.added.to.the.document", new Object[0]));
    }

    public Section addSection(float f2, String string2) {
        return this.addSection(f2, new Paragraph(string2));
    }

    public Section addSection(float f2, String string2, int n2) {
        return this.addSection(f2, new Paragraph(string2), n2);
    }

    public Section addSection(Paragraph paragraph) {
        return this.addSection(0.0f, paragraph, this.numberDepth + 1);
    }

    public Section addSection(Paragraph paragraph, int n2) {
        return this.addSection(0.0f, paragraph, n2);
    }

    public Section addSection(String string2) {
        return this.addSection(new Paragraph(string2));
    }

    public Section addSection(String string2, int n2) {
        return this.addSection(new Paragraph(string2), n2);
    }

    @Override
    public void flushContent() {
        this.setNotAddedYet(false);
        this.title = null;
        Iterator iterator = this.iterator();
        while (iterator.hasNext()) {
            Element element = (Element)iterator.next();
            if (element instanceof Section) {
                if (!(element = (Section)element).isComplete() && this.size() == 1) {
                    element.flushContent();
                    return;
                }
                element.setAddedCompletely(true);
            }
            iterator.remove();
        }
    }

    @Override
    public PdfObject getAccessibleAttribute(PdfName pdfName) {
        return this.title.getAccessibleAttribute(pdfName);
    }

    @Override
    public HashMap<PdfName, PdfObject> getAccessibleAttributes() {
        return this.title.getAccessibleAttributes();
    }

    public Paragraph getBookmarkTitle() {
        if (this.bookmarkTitle == null) {
            return this.getTitle();
        }
        return new Paragraph(this.bookmarkTitle);
    }

    @Override
    public List<Chunk> getChunks() {
        ArrayList<Chunk> arrayList = new ArrayList<Chunk>();
        Iterator iterator = this.iterator();
        while (iterator.hasNext()) {
            arrayList.addAll(((Element)iterator.next()).getChunks());
        }
        return arrayList;
    }

    public int getDepth() {
        return this.numbers.size();
    }

    @Override
    public AccessibleElementId getId() {
        return this.title.getId();
    }

    public float getIndentation() {
        return this.indentation;
    }

    @Override
    public float getIndentationLeft() {
        return this.indentationLeft;
    }

    @Override
    public float getIndentationRight() {
        return this.indentationRight;
    }

    public int getNumberDepth() {
        return this.numberDepth;
    }

    public int getNumberStyle() {
        return this.numberStyle;
    }

    @Override
    public PdfName getRole() {
        return this.title.getRole();
    }

    public Paragraph getTitle() {
        return Section.constructTitle(this.title, this.numbers, this.numberDepth, this.numberStyle);
    }

    protected boolean isAddedCompletely() {
        return this.addedCompletely;
    }

    public boolean isBookmarkOpen() {
        return this.bookmarkOpen;
    }

    public boolean isChapter() {
        if (this.type() == 16) {
            return true;
        }
        return false;
    }

    @Override
    public boolean isComplete() {
        return this.complete;
    }

    @Override
    public boolean isContent() {
        return true;
    }

    @Override
    public boolean isInline() {
        return false;
    }

    @Override
    public boolean isNestable() {
        return false;
    }

    public boolean isNotAddedYet() {
        return this.notAddedYet;
    }

    public boolean isSection() {
        if (this.type() == 13) {
            return true;
        }
        return false;
    }

    public boolean isTriggerNewPage() {
        if (this.triggerNewPage && this.notAddedYet) {
            return true;
        }
        return false;
    }

    public void newPage() {
        this.add(Chunk.NEXTPAGE);
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    @Override
    public boolean process(ElementListener elementListener) {
        try {
            Iterator iterator = this.iterator();
            while (iterator.hasNext()) {
                elementListener.add((Element)iterator.next());
            }
            return true;
        }
        catch (DocumentException documentException) {
            return false;
        }
    }

    @Override
    public void setAccessibleAttribute(PdfName pdfName, PdfObject pdfObject) {
        this.title.setAccessibleAttribute(pdfName, pdfObject);
    }

    protected void setAddedCompletely(boolean bl2) {
        this.addedCompletely = bl2;
    }

    public void setBookmarkOpen(boolean bl2) {
        this.bookmarkOpen = bl2;
    }

    public void setBookmarkTitle(String string2) {
        this.bookmarkTitle = string2;
    }

    public void setChapterNumber(int n2) {
        this.numbers.set(this.numbers.size() - 1, n2);
        for (Object e2 : this) {
            if (!(e2 instanceof Section)) continue;
            ((Section)e2).setChapterNumber(n2);
        }
    }

    @Override
    public void setComplete(boolean bl2) {
        this.complete = bl2;
    }

    @Override
    public void setId(AccessibleElementId accessibleElementId) {
        this.title.setId(accessibleElementId);
    }

    public void setIndentation(float f2) {
        this.indentation = f2;
    }

    @Override
    public void setIndentationLeft(float f2) {
        this.indentationLeft = f2;
    }

    @Override
    public void setIndentationRight(float f2) {
        this.indentationRight = f2;
    }

    public void setNotAddedYet(boolean bl2) {
        this.notAddedYet = bl2;
    }

    public void setNumberDepth(int n2) {
        this.numberDepth = n2;
    }

    public void setNumberStyle(int n2) {
        this.numberStyle = n2;
    }

    @Override
    public void setRole(PdfName pdfName) {
        this.title.setRole(pdfName);
    }

    public void setTitle(Paragraph paragraph) {
        this.title = paragraph;
    }

    public void setTriggerNewPage(boolean bl2) {
        this.triggerNewPage = bl2;
    }

    @Override
    public int type() {
        return 13;
    }
}

