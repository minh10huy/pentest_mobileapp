/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf;

import com.itextpdf.text.BaseColor;
import com.itextpdf.text.ExceptionConverter;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.pdf.BaseField;
import com.itextpdf.text.pdf.BaseFont;
import com.itextpdf.text.pdf.PdfAnnotation;
import com.itextpdf.text.pdf.PdfAppearance;
import com.itextpdf.text.pdf.PdfBorderDictionary;
import com.itextpdf.text.pdf.PdfContentByte;
import com.itextpdf.text.pdf.PdfDashPattern;
import com.itextpdf.text.pdf.PdfFormField;
import com.itextpdf.text.pdf.PdfName;
import com.itextpdf.text.pdf.PdfTemplate;
import com.itextpdf.text.pdf.PdfWriter;

public class RadioCheckField
extends BaseField {
    public static final int TYPE_CHECK = 1;
    public static final int TYPE_CIRCLE = 2;
    public static final int TYPE_CROSS = 3;
    public static final int TYPE_DIAMOND = 4;
    public static final int TYPE_SQUARE = 5;
    public static final int TYPE_STAR = 6;
    protected static String[] typeChars = new String[]{"4", "l", "8", "u", "n", "H"};
    protected int checkType;
    private boolean checked;
    private String onValue;

    public RadioCheckField(PdfWriter pdfWriter, Rectangle rectangle, String string2, String string3) {
        super(pdfWriter, rectangle, string2);
        this.setOnValue(string3);
        this.setCheckType(2);
    }

    public PdfAppearance getAppearance(boolean bl2, boolean bl3) {
        if (bl2 && this.checkType == 2) {
            return this.getAppearanceRadioCircle(bl3);
        }
        PdfAppearance pdfAppearance = this.getBorderAppearance();
        if (!bl3) {
            return pdfAppearance;
        }
        BaseFont baseFont = this.getRealFont();
        boolean bl4 = this.borderStyle == 2 || this.borderStyle == 3;
        float f2 = this.box.getHeight() - this.borderWidth * 2.0f;
        float f3 = this.borderWidth;
        float f4 = f2;
        float f5 = f3;
        if (bl4) {
            f4 = f2 - this.borderWidth * 2.0f;
            f5 = f3 * 2.0f;
        }
        f3 = bl4 ? this.borderWidth * 2.0f : this.borderWidth;
        f2 = Math.min(f5, Math.max(f3, 1.0f));
        f5 = this.box.getWidth();
        float f6 = f2 * 2.0f;
        float f7 = f5 - f6;
        float f8 = this.box.getHeight();
        f5 = f3 = this.fontSize;
        if (f3 == 0.0f) {
            f5 = baseFont.getWidthPoint(this.text, 1.0f);
            f5 = f5 == 0.0f ? 12.0f : f7 / f5;
            f5 = Math.min(f5, f4 / baseFont.getFontDescriptor(1, 1.0f));
        }
        pdfAppearance.saveState();
        pdfAppearance.rectangle(f2, f2, f7, f8 - f6);
        pdfAppearance.clip();
        pdfAppearance.newPath();
        if (this.textColor == null) {
            pdfAppearance.resetGrayFill();
        } else {
            pdfAppearance.setColorFill(this.textColor);
        }
        pdfAppearance.beginText();
        pdfAppearance.setFontAndSize(baseFont, f5);
        pdfAppearance.setTextMatrix((this.box.getWidth() - baseFont.getWidthPoint(this.text, f5)) / 2.0f, (this.box.getHeight() - baseFont.getAscentPoint(this.text, f5)) / 2.0f);
        pdfAppearance.showText(this.text);
        pdfAppearance.endText();
        pdfAppearance.restoreState();
        return pdfAppearance;
    }

    public PdfAppearance getAppearanceRadioCircle(boolean bl2) {
        PdfAppearance pdfAppearance;
        float f2;
        float f3;
        float f4;
        block8 : {
            float f5;
            float f6;
            float f7;
            block9 : {
                block6 : {
                    block7 : {
                        pdfAppearance = PdfAppearance.createAppearance(this.writer, this.box.getWidth(), this.box.getHeight());
                        int n2 = this.rotation;
                        if (n2 == 90) break block6;
                        if (n2 == 180) break block7;
                        if (n2 != 270) break block8;
                        f2 = 0.0f;
                        f4 = -1.0f;
                        f3 = 1.0f;
                        f7 = 0.0f;
                        f5 = 0.0f;
                        f6 = this.box.getWidth();
                        break block9;
                    }
                    f2 = -1.0f;
                    f4 = 0.0f;
                    f3 = 0.0f;
                    f7 = -1.0f;
                    f5 = this.box.getWidth();
                    f6 = this.box.getHeight();
                    break block9;
                }
                f2 = 0.0f;
                f4 = 1.0f;
                f3 = -1.0f;
                f7 = 0.0f;
                f5 = this.box.getHeight();
                f6 = 0.0f;
            }
            pdfAppearance.setMatrix(f2, f4, f3, f7, f5, f6);
        }
        Rectangle rectangle = new Rectangle(pdfAppearance.getBoundingBox());
        f2 = rectangle.getWidth() / 2.0f;
        f4 = rectangle.getHeight() / 2.0f;
        f3 = (Math.min(rectangle.getWidth(), rectangle.getHeight()) - this.borderWidth) / 2.0f;
        if (f3 <= 0.0f) {
            return pdfAppearance;
        }
        if (this.backgroundColor != null) {
            pdfAppearance.setColorFill(this.backgroundColor);
            pdfAppearance.circle(f2, f4, this.borderWidth / 2.0f + f3);
            pdfAppearance.fill();
        }
        if (this.borderWidth > 0.0f && this.borderColor != null) {
            pdfAppearance.setLineWidth(this.borderWidth);
            pdfAppearance.setColorStroke(this.borderColor);
            pdfAppearance.circle(f2, f4, f3);
            pdfAppearance.stroke();
        }
        if (bl2) {
            if (this.textColor == null) {
                pdfAppearance.resetGrayFill();
            } else {
                pdfAppearance.setColorFill(this.textColor);
            }
            pdfAppearance.circle(f2, f4, f3 / 2.0f);
            pdfAppearance.fill();
        }
        return pdfAppearance;
    }

    public PdfFormField getCheckField() {
        return this.getField(false);
    }

    public int getCheckType() {
        return this.checkType;
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Lifted jumps to return sites
     */
    protected PdfFormField getField(boolean var1_1) {
        var3_2 = var1_1 != false ? PdfFormField.createEmpty(this.writer) : PdfFormField.createCheckBox(this.writer);
        var3_2.setWidget(this.box, PdfAnnotation.HIGHLIGHT_INVERT);
        if (!var1_1) {
            var3_2.setFieldName(this.fieldName);
            if ((this.options & 1) != 0) {
                var3_2.setFieldFlags(1);
            }
            if ((this.options & 2) != 0) {
                var3_2.setFieldFlags(2);
            }
            var4_3 = this.checked != false ? this.onValue : "Off";
            var3_2.setValueAsName((String)var4_3);
            this.setCheckType(this.checkType);
        }
        if (this.text != null) {
            var3_2.setMKNormalCaption(this.text);
        }
        if (this.rotation != 0) {
            var3_2.setMKRotation(this.rotation);
        }
        var3_2.setBorderStyle(new PdfBorderDictionary(this.borderWidth, this.borderStyle, new PdfDashPattern(3.0f)));
        var5_4 = this.getAppearance(var1_1, true);
        var4_3 = this.getAppearance(var1_1, false);
        var3_2.setAppearance(PdfAnnotation.APPEARANCE_NORMAL, this.onValue, var5_4);
        var3_2.setAppearance(PdfAnnotation.APPEARANCE_NORMAL, "Off", (PdfTemplate)var4_3);
        var4_3 = this.checked != false ? this.onValue : "Off";
        var3_2.setAppearanceState((String)var4_3);
        var4_3 = (PdfAppearance)var5_4.getDuplicate();
        if (this.getRealFont() != null) {
            var4_3.setFontAndSize(this.getRealFont(), this.fontSize);
        }
        if (this.textColor == null) {
            var4_3.setGrayFill(0.0f);
        } else {
            var4_3.setColorFill(this.textColor);
        }
        var3_2.setDefaultAppearanceString((PdfContentByte)var4_3);
        if (this.borderColor != null) {
            var3_2.setMKBorderColor(this.borderColor);
        }
        if (this.backgroundColor != null) {
            var3_2.setMKBackgroundColor(this.backgroundColor);
        }
        switch (this.visibility) {
            default: {
                var2_5 = 4;
                ** GOTO lbl44
            }
            case 3: {
                var2_5 = 36;
                ** GOTO lbl44
            }
            case 1: {
                var2_5 = 6;
lbl44: // 3 sources:
                var3_2.setFlags(var2_5);
                return var3_2;
            }
            case 2: 
        }
        return var3_2;
    }

    public String getOnValue() {
        return this.onValue;
    }

    public PdfFormField getRadioField() {
        return this.getField(true);
    }

    public PdfFormField getRadioGroup(boolean bl2, boolean bl3) {
        PdfFormField pdfFormField = PdfFormField.createRadioButton(this.writer, bl2);
        if (bl3) {
            pdfFormField.setFieldFlags(33554432);
        }
        pdfFormField.setFieldName(this.fieldName);
        if ((this.options & 1) != 0) {
            pdfFormField.setFieldFlags(1);
        }
        if ((this.options & 2) != 0) {
            pdfFormField.setFieldFlags(2);
        }
        String string2 = this.checked ? this.onValue : "Off";
        pdfFormField.setValueAsName(string2);
        return pdfFormField;
    }

    public boolean isChecked() {
        return this.checked;
    }

    public void setCheckType(int n2) {
        int n3;
        block5 : {
            block4 : {
                if (n2 < 1) break block4;
                n3 = n2;
                if (n2 <= 6) break block5;
            }
            n3 = 2;
        }
        this.checkType = n3;
        this.setText(typeChars[n3 - 1]);
        try {
            this.setFont(BaseFont.createFont("ZapfDingbats", "Cp1252", false));
            return;
        }
        catch (Exception exception) {
            throw new ExceptionConverter(exception);
        }
    }

    public void setChecked(boolean bl2) {
        this.checked = bl2;
    }

    public void setOnValue(String string2) {
        this.onValue = string2;
    }
}

