/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf.parser.clipper;

import com.itextpdf.text.pdf.parser.clipper.Clipper;
import com.itextpdf.text.pdf.parser.clipper.Point;
import java.math.BigInteger;
import java.util.logging.Logger;

class Edge {
    protected static final double HORIZONTAL = -3.4E38;
    private static final Logger LOGGER = Logger.getLogger(Edge.class.getName());
    protected static final int SKIP = -2;
    protected static final int UNASSIGNED = -1;
    private final Point.LongPoint bot = new Point.LongPoint();
    private final Point.LongPoint current = new Point.LongPoint();
    private final Point.LongPoint delta = new Point.LongPoint();
    double deltaX;
    Edge next;
    Edge nextInAEL;
    Edge nextInLML;
    Edge nextInSEL;
    int outIdx;
    Clipper.PolyType polyTyp;
    Edge prev;
    Edge prevInAEL;
    Edge prevInSEL;
    Side side;
    private final Point.LongPoint top = new Point.LongPoint();
    int windCnt;
    int windCnt2;
    int windDelta;

    static boolean doesE2InsertBeforeE1(Edge edge, Edge edge2) {
        long l2 = edge2.current.getX();
        long l3 = edge.current.getX();
        boolean bl2 = false;
        boolean bl3 = false;
        boolean bl4 = false;
        if (l2 == l3) {
            if (edge2.top.getY() > edge.top.getY()) {
                if (edge2.top.getX() < Edge.topX(edge, edge2.top.getY())) {
                    bl4 = true;
                }
                return bl4;
            }
            bl4 = bl2;
            if (edge.top.getX() > Edge.topX(edge2, edge.top.getY())) {
                bl4 = true;
            }
            return bl4;
        }
        bl4 = bl3;
        if (edge2.current.getX() < edge.current.getX()) {
            bl4 = true;
        }
        return bl4;
    }

    static boolean slopesEqual(Edge edge, Edge edge2, boolean bl2) {
        if (bl2) {
            return BigInteger.valueOf(edge.getDelta().getY()).multiply(BigInteger.valueOf(edge2.getDelta().getX())).equals(BigInteger.valueOf(edge.getDelta().getX()).multiply(BigInteger.valueOf(edge2.getDelta().getY())));
        }
        if (edge.getDelta().getY() * edge2.getDelta().getX() == edge.getDelta().getX() * edge2.getDelta().getY()) {
            return true;
        }
        return false;
    }

    static void swapPolyIndexes(Edge edge, Edge edge2) {
        int n2 = edge.outIdx;
        edge.outIdx = edge2.outIdx;
        edge2.outIdx = n2;
    }

    static void swapSides(Edge edge, Edge edge2) {
        Side side = edge.side;
        edge.side = edge2.side;
        edge2.side = side;
    }

    static long topX(Edge edge, long l2) {
        if (l2 == edge.getTop().getY()) {
            return edge.getTop().getX();
        }
        return edge.getBot().getX() + Math.round(edge.deltaX * (double)(l2 - edge.getBot().getY()));
    }

    public Edge findNextLocMin() {
        Edge edge = this;
        do {
            if (edge.bot.equals(edge.prev.bot) && !edge.current.equals(edge.top)) {
                Edge edge2 = edge;
                if (edge.deltaX != -3.4E38) {
                    edge2 = edge;
                    if (edge.prev.deltaX != -3.4E38) {
                        return edge;
                    }
                }
                while (edge2.prev.deltaX == -3.4E38) {
                    edge2 = edge2.prev;
                }
                edge = edge2;
                while (edge.deltaX == -3.4E38) {
                    edge = edge.next;
                }
                if (edge.top.getY() == edge.prev.bot.getY()) continue;
                if (edge2.prev.bot.getX() < edge.bot.getX()) {
                    return edge2;
                }
                return edge;
            }
            edge = edge.next;
        } while (true);
    }

    public Point.LongPoint getBot() {
        return this.bot;
    }

    public Point.LongPoint getCurrent() {
        return this.current;
    }

    public Point.LongPoint getDelta() {
        return this.delta;
    }

    public Edge getMaximaPair() {
        Edge edge = this.next.top.equals(this.top) && this.next.nextInLML == null ? this.next : (this.prev.top.equals(this.top) && this.prev.nextInLML == null ? this.prev : null);
        if (edge != null && (edge.outIdx == -2 || edge.nextInAEL == edge.prevInAEL && !edge.isHorizontal())) {
            return null;
        }
        return edge;
    }

    public Edge getNextInAEL(Clipper.Direction direction) {
        if (direction == Clipper.Direction.LEFT_TO_RIGHT) {
            return this.nextInAEL;
        }
        return this.prevInAEL;
    }

    public Point.LongPoint getTop() {
        return this.top;
    }

    public boolean isContributing(Clipper.PolyFillType polyFillType, Clipper.PolyFillType polyFillType2, Clipper.ClipType clipType) {
        LOGGER.entering(Edge.class.getName(), "isContributing");
        Clipper.PolyFillType polyFillType3 = polyFillType;
        Clipper.PolyFillType polyFillType4 = polyFillType2;
        if (this.polyTyp == Clipper.PolyType.SUBJECT) {
            polyFillType4 = polyFillType;
            polyFillType3 = polyFillType2;
        }
        int n2 = .$SwitchMap$com$itextpdf$text$pdf$parser$clipper$Clipper$PolyFillType[polyFillType3.ordinal()];
        boolean bl2 = false;
        boolean bl3 = false;
        boolean bl4 = false;
        boolean bl5 = false;
        boolean bl6 = false;
        boolean bl7 = false;
        boolean bl8 = false;
        boolean bl9 = false;
        boolean bl10 = false;
        boolean bl11 = false;
        switch (n2) {
            default: {
                if (this.windCnt == -1) break;
                return false;
            }
            case 3: {
                if (this.windCnt == 1) break;
                return false;
            }
            case 2: {
                if (Math.abs(this.windCnt) == 1) break;
                return false;
            }
            case 1: {
                if (this.windDelta != 0 || this.windCnt == 1) break;
                return false;
            }
        }
        switch (.$SwitchMap$com$itextpdf$text$pdf$parser$clipper$Clipper$ClipType[clipType.ordinal()]) {
            default: {
                return true;
            }
            case 4: {
                if (this.windDelta == 0) {
                    switch (.$SwitchMap$com$itextpdf$text$pdf$parser$clipper$Clipper$PolyFillType[polyFillType4.ordinal()]) {
                        default: {
                            bl11 = bl2;
                            if (this.windCnt2 < 0) break;
                            return true;
                        }
                        case 3: {
                            if (this.windCnt2 <= 0) {
                                bl11 = true;
                            }
                            return bl11;
                        }
                        case 1: 
                        case 2: {
                            bl11 = bl2;
                            if (this.windCnt2 != 0) break;
                            bl11 = true;
                        }
                    }
                    return bl11;
                }
                return true;
            }
            case 3: {
                if (this.polyTyp == Clipper.PolyType.SUBJECT) {
                    switch (.$SwitchMap$com$itextpdf$text$pdf$parser$clipper$Clipper$PolyFillType[polyFillType4.ordinal()]) {
                        default: {
                            bl11 = bl4;
                            if (this.windCnt2 < 0) break;
                            return true;
                        }
                        case 3: {
                            bl11 = bl3;
                            if (this.windCnt2 <= 0) {
                                bl11 = true;
                            }
                            return bl11;
                        }
                        case 1: 
                        case 2: {
                            bl11 = bl4;
                            if (this.windCnt2 != 0) break;
                            bl11 = true;
                        }
                    }
                    return bl11;
                }
                switch (.$SwitchMap$com$itextpdf$text$pdf$parser$clipper$Clipper$PolyFillType[polyFillType4.ordinal()]) {
                    default: {
                        bl11 = bl6;
                        if (this.windCnt2 >= 0) break;
                        return true;
                    }
                    case 3: {
                        bl11 = bl5;
                        if (this.windCnt2 > 0) {
                            bl11 = true;
                        }
                        return bl11;
                    }
                    case 1: 
                    case 2: {
                        bl11 = bl6;
                        if (this.windCnt2 == 0) break;
                        bl11 = true;
                    }
                }
                return bl11;
            }
            case 2: {
                switch (.$SwitchMap$com$itextpdf$text$pdf$parser$clipper$Clipper$PolyFillType[polyFillType4.ordinal()]) {
                    default: {
                        bl11 = bl8;
                        if (this.windCnt2 < 0) break;
                        return true;
                    }
                    case 3: {
                        bl11 = bl7;
                        if (this.windCnt2 <= 0) {
                            bl11 = true;
                        }
                        return bl11;
                    }
                    case 1: 
                    case 2: {
                        bl11 = bl8;
                        if (this.windCnt2 != 0) break;
                        bl11 = true;
                    }
                }
                return bl11;
            }
            case 1: 
        }
        switch (.$SwitchMap$com$itextpdf$text$pdf$parser$clipper$Clipper$PolyFillType[polyFillType4.ordinal()]) {
            default: {
                bl11 = bl10;
                if (this.windCnt2 >= 0) break;
                return true;
            }
            case 3: {
                bl11 = bl9;
                if (this.windCnt2 > 0) {
                    bl11 = true;
                }
                return bl11;
            }
            case 1: 
            case 2: {
                bl11 = bl10;
                if (this.windCnt2 == 0) break;
                bl11 = true;
            }
        }
        return bl11;
    }

    public boolean isEvenOddAltFillType(Clipper.PolyFillType polyFillType, Clipper.PolyFillType polyFillType2) {
        Clipper.PolyType polyType = this.polyTyp;
        Clipper.PolyType polyType2 = Clipper.PolyType.SUBJECT;
        boolean bl2 = false;
        boolean bl3 = false;
        if (polyType == polyType2) {
            if (polyFillType == Clipper.PolyFillType.EVEN_ODD) {
                bl3 = true;
            }
            return bl3;
        }
        bl3 = bl2;
        if (polyFillType2 == Clipper.PolyFillType.EVEN_ODD) {
            bl3 = true;
        }
        return bl3;
    }

    public boolean isEvenOddFillType(Clipper.PolyFillType polyFillType, Clipper.PolyFillType polyFillType2) {
        Clipper.PolyType polyType = this.polyTyp;
        Clipper.PolyType polyType2 = Clipper.PolyType.SUBJECT;
        boolean bl2 = false;
        boolean bl3 = false;
        if (polyType == polyType2) {
            if (polyFillType2 == Clipper.PolyFillType.EVEN_ODD) {
                bl3 = true;
            }
            return bl3;
        }
        bl3 = bl2;
        if (polyFillType == Clipper.PolyFillType.EVEN_ODD) {
            bl3 = true;
        }
        return bl3;
    }

    public boolean isHorizontal() {
        if (this.delta.getY() == 0L) {
            return true;
        }
        return false;
    }

    public boolean isIntermediate(double d2) {
        if ((double)this.top.getY() == d2 && this.nextInLML != null) {
            return true;
        }
        return false;
    }

    public boolean isMaxima(double d2) {
        if ((double)this.top.getY() == d2 && this.nextInLML == null) {
            return true;
        }
        return false;
    }

    public void reverseHorizontal() {
        long l2 = this.top.getX();
        this.top.setX(this.bot.getX());
        this.bot.setX(l2);
        l2 = this.top.getZ();
        this.top.setZ(this.bot.getZ());
        this.bot.setZ(l2);
    }

    public void setBot(Point.LongPoint longPoint) {
        this.bot.set(longPoint);
    }

    public void setCurrent(Point.LongPoint longPoint) {
        this.current.set(longPoint);
    }

    public void setTop(Point.LongPoint longPoint) {
        this.top.set(longPoint);
    }

    public String toString() {
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("TEdge [Bot=");
        stringBuilder.append(this.bot);
        stringBuilder.append(", Curr=");
        stringBuilder.append(this.current);
        stringBuilder.append(", Top=");
        stringBuilder.append(this.top);
        stringBuilder.append(", Delta=");
        stringBuilder.append(this.delta);
        stringBuilder.append(", Dx=");
        stringBuilder.append(this.deltaX);
        stringBuilder.append(", PolyTyp=");
        stringBuilder.append((Object)this.polyTyp);
        stringBuilder.append(", Side=");
        stringBuilder.append((Object)this.side);
        stringBuilder.append(", WindDelta=");
        stringBuilder.append(this.windDelta);
        stringBuilder.append(", WindCnt=");
        stringBuilder.append(this.windCnt);
        stringBuilder.append(", WindCnt2=");
        stringBuilder.append(this.windCnt2);
        stringBuilder.append(", OutIdx=");
        stringBuilder.append(this.outIdx);
        stringBuilder.append(", Next=");
        stringBuilder.append(this.next);
        stringBuilder.append(", Prev=");
        stringBuilder.append(this.prev);
        stringBuilder.append(", NextInLML=");
        stringBuilder.append(this.nextInLML);
        stringBuilder.append(", NextInAEL=");
        stringBuilder.append(this.nextInAEL);
        stringBuilder.append(", PrevInAEL=");
        stringBuilder.append(this.prevInAEL);
        stringBuilder.append(", NextInSEL=");
        stringBuilder.append(this.nextInSEL);
        stringBuilder.append(", PrevInSEL=");
        stringBuilder.append(this.prevInSEL);
        stringBuilder.append("]");
        return stringBuilder.toString();
    }

    /*
     * Enabled aggressive block sorting
     */
    public void updateDeltaX() {
        this.delta.setX(this.top.getX() - this.bot.getX());
        this.delta.setY(this.top.getY() - this.bot.getY());
        double d2 = this.delta.getY() == 0L ? -3.4E38 : (double)this.delta.getX() / (double)this.delta.getY();
        this.deltaX = d2;
    }

    static enum Side {
        LEFT,
        RIGHT;
        

        private Side() {
        }
    }

}

