/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf;

import com.itextpdf.text.ExceptionConverter;
import com.itextpdf.text.pdf.AcroFields;
import com.itextpdf.text.pdf.PRStream;
import com.itextpdf.text.pdf.PdfArray;
import com.itextpdf.text.pdf.PdfDictionary;
import com.itextpdf.text.pdf.PdfIndirectObject;
import com.itextpdf.text.pdf.PdfIndirectReference;
import com.itextpdf.text.pdf.PdfName;
import com.itextpdf.text.pdf.PdfObject;
import com.itextpdf.text.pdf.PdfReader;
import com.itextpdf.text.pdf.PdfStream;
import com.itextpdf.text.pdf.PdfString;
import com.itextpdf.text.pdf.PdfWriter;
import com.itextpdf.text.xml.XmlDomWriter;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.Collection;
import java.util.EmptyStackException;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import org.w3c.dom.Attr;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NamedNodeMap;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.w3c.dom.Text;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;

public class XfaForm {
    public static final String XFA_DATA_SCHEMA = "http://www.xfa.org/schema/xfa-data/1.0/";
    private AcroFieldsSearch acroFieldsSom;
    private boolean changed;
    private Node datasetsNode;
    private Xml2SomDatasets datasetsSom;
    private Document domDocument;
    private PdfReader reader;
    private Node templateNode;
    private Xml2SomTemplate templateSom;
    private boolean xfaPresent;

    public XfaForm() {
    }

    public XfaForm(PdfReader object) {
        this.reader = object;
        Object object2 = XfaForm.getXfaObject((PdfReader)object);
        if (object2 == null) {
            this.xfaPresent = false;
            return;
        }
        this.xfaPresent = true;
        object = new ByteArrayOutputStream();
        if (object2.isArray()) {
            object2 = (PdfArray)object2;
            for (int i2 = 1; i2 < object2.size(); i2 += 2) {
                PdfObject pdfObject = object2.getDirectObject(i2);
                if (!(pdfObject instanceof PRStream)) continue;
                object.write(PdfReader.getStreamBytes((PRStream)pdfObject));
            }
        } else if (object2 instanceof PRStream) {
            object.write(PdfReader.getStreamBytes((PRStream)object2));
        }
        object.close();
        object2 = DocumentBuilderFactory.newInstance();
        object2.setNamespaceAware(true);
        this.domDocument = object2.newDocumentBuilder().parse(new ByteArrayInputStream(object.toByteArray()));
        this.extractNodes();
    }

    private void createDatasetsNode(Node node) {
        while (node.getChildNodes().getLength() == 0) {
            node = node.getNextSibling();
        }
        if (node != null) {
            Element element = node.getOwnerDocument().createElement("xfa:datasets");
            element.setAttribute("xmlns:xfa", XFA_DATA_SCHEMA);
            this.datasetsNode = element;
            node.appendChild(this.datasetsNode);
        }
    }

    private void extractNodes() {
        Object object = XfaForm.extractXFANodes(this.domDocument);
        if (object.containsKey("template")) {
            this.templateNode = object.get("template");
            this.templateSom = new Xml2SomTemplate(this.templateNode);
        }
        if (object.containsKey("datasets")) {
            this.datasetsNode = object.get("datasets");
            object = this.findDataNode(this.datasetsNode);
            if (object == null) {
                object = this.datasetsNode.getFirstChild();
            }
            this.datasetsSom = new Xml2SomDatasets((Node)object);
        }
        if (this.datasetsNode == null) {
            this.createDatasetsNode(this.domDocument.getFirstChild());
        }
    }

    public static Map<String, Node> extractXFANodes(Document node) {
        HashMap<String, Node> hashMap = new HashMap<String, Node>();
        node = node.getFirstChild();
        while (node.getChildNodes().getLength() == 0) {
            node = node.getNextSibling();
        }
        for (node = node.getFirstChild(); node != null; node = node.getNextSibling()) {
            if (node.getNodeType() != 1) continue;
            hashMap.put(node.getLocalName(), node);
        }
        return hashMap;
    }

    private Node findDataNode(Node object) {
        object = object.getChildNodes();
        for (int i2 = 0; i2 < object.getLength(); ++i2) {
            if (!object.item(i2).getNodeName().equals("xfa:data")) continue;
            return object.item(i2);
        }
        return null;
    }

    private Node getFirstElementNode(Node object) {
        object = object.getChildNodes();
        for (int i2 = 0; i2 < object.getLength(); ++i2) {
            if (object.item(i2).getNodeType() != 1) continue;
            return object.item(i2);
        }
        return null;
    }

    public static String getNodeText(Node node) {
        if (node == null) {
            return "";
        }
        return XfaForm.getNodeText(node, "");
    }

    private static String getNodeText(Node object, String object2) {
        object = object.getFirstChild();
        Object object3 = object2;
        for (object2 = object; object2 != null; object2 = object2.getNextSibling()) {
            if (object2.getNodeType() == 1) {
                object = XfaForm.getNodeText((Node)object2, (String)object3);
            } else {
                object = object3;
                if (object2.getNodeType() == 3) {
                    object = new StringBuilder();
                    object.append((String)object3);
                    object.append(object2.getNodeValue());
                    object = object.toString();
                }
            }
            object3 = object;
        }
        return object3;
    }

    public static PdfObject getXfaObject(PdfReader object) {
        if ((object = (PdfDictionary)PdfReader.getPdfObjectRelease(object.getCatalog().get(PdfName.ACROFORM))) == null) {
            return null;
        }
        return PdfReader.getPdfObjectRelease(object.get(PdfName.XFA));
    }

    public static byte[] serializeDoc(Node node) {
        XmlDomWriter xmlDomWriter = new XmlDomWriter();
        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        xmlDomWriter.setOutput(byteArrayOutputStream, null);
        xmlDomWriter.setCanonical(false);
        xmlDomWriter.write(node);
        byteArrayOutputStream.close();
        return byteArrayOutputStream.toByteArray();
    }

    public static void setXfa(XfaForm object, PdfReader object2, PdfWriter pdfWriter) {
        PdfDictionary pdfDictionary = (PdfDictionary)PdfReader.getPdfObjectRelease(object2.getCatalog().get(PdfName.ACROFORM));
        if (pdfDictionary == null) {
            return;
        }
        PdfObject pdfObject = XfaForm.getXfaObject((PdfReader)object2);
        if (pdfObject.isArray()) {
            pdfObject = (PdfArray)pdfObject;
            int n2 = -1;
            int n3 = -1;
            for (int i2 = 0; i2 < pdfObject.size(); i2 += 2) {
                PdfString pdfString = pdfObject.getAsString(i2);
                if ("template".equals(pdfString.toString())) {
                    n2 = i2 + 1;
                }
                if (!"datasets".equals(pdfString.toString())) continue;
                n3 = i2 + 1;
            }
            if (n2 > -1 && n3 > -1) {
                object2.killXref(pdfObject.getAsIndirectObject(n2));
                object2.killXref(pdfObject.getAsIndirectObject(n3));
                object2 = new PdfStream(XfaForm.serializeDoc(object.templateNode));
                object2.flateCompress(pdfWriter.getCompressionLevel());
                pdfObject.set(n2, pdfWriter.addToBody((PdfObject)object2).getIndirectReference());
                object = new PdfStream(XfaForm.serializeDoc(object.datasetsNode));
                object.flateCompress(pdfWriter.getCompressionLevel());
                pdfObject.set(n3, pdfWriter.addToBody((PdfObject)object).getIndirectReference());
                pdfDictionary.put(PdfName.XFA, new PdfArray((PdfArray)pdfObject));
                return;
            }
        }
        object2.killXref(pdfDictionary.get(PdfName.XFA));
        object = new PdfStream(XfaForm.serializeDoc(object.domDocument));
        object.flateCompress(pdfWriter.getCompressionLevel());
        object = pdfWriter.addToBody((PdfObject)object).getIndirectReference();
        pdfDictionary.put(PdfName.XFA, (PdfObject)object);
    }

    public void fillXfaForm(File file) {
        this.fillXfaForm(file, false);
    }

    public void fillXfaForm(File file, boolean bl2) {
        this.fillXfaForm(new FileInputStream(file), bl2);
    }

    public void fillXfaForm(InputStream inputStream) {
        this.fillXfaForm(inputStream, false);
    }

    public void fillXfaForm(InputStream inputStream, boolean bl2) {
        this.fillXfaForm(new InputSource(inputStream), bl2);
    }

    public void fillXfaForm(Node node) {
        this.fillXfaForm(node, false);
    }

    public void fillXfaForm(Node node, boolean bl2) {
        int n2;
        Object object;
        int n3 = 0;
        if (bl2) {
            object = this.domDocument.getElementsByTagName("field");
            for (n2 = 0; n2 < object.getLength(); ++n2) {
                ((Element)object.item(n2)).setAttribute("access", "readOnly");
            }
        }
        NodeList nodeList = this.datasetsNode.getChildNodes();
        int n4 = nodeList.getLength();
        Object object2 = null;
        n2 = n3;
        do {
            object = object2;
            if (n2 >= n4 || (object = nodeList.item(n2)).getNodeType() == 1 && object.getLocalName().equals("data") && XFA_DATA_SCHEMA.equals(object.getNamespaceURI())) break;
            ++n2;
        } while (true);
        object2 = object;
        if (object == null) {
            object2 = this.datasetsNode.getOwnerDocument().createElementNS(XFA_DATA_SCHEMA, "xfa:data");
            this.datasetsNode.appendChild((Node)object2);
        }
        if (object2.getChildNodes().getLength() == 0) {
            object2.appendChild(this.domDocument.importNode(node, true));
        } else {
            object = this.getFirstElementNode((Node)object2);
            if (object != null) {
                object2.replaceChild(this.domDocument.importNode(node, true), (Node)object);
            }
        }
        this.extractNodes();
        this.setChanged(true);
    }

    public void fillXfaForm(InputSource inputSource) {
        this.fillXfaForm(inputSource, false);
    }

    public void fillXfaForm(InputSource inputSource, boolean bl2) {
        DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();
        try {
            this.fillXfaForm(documentBuilderFactory.newDocumentBuilder().parse(inputSource).getDocumentElement(), bl2);
            return;
        }
        catch (SAXException sAXException) {
            throw new ExceptionConverter(sAXException);
        }
        catch (ParserConfigurationException parserConfigurationException) {
            throw new ExceptionConverter(parserConfigurationException);
        }
    }

    public String findDatasetsName(String string2) {
        if (this.datasetsSom.getName2Node().containsKey(string2)) {
            return string2;
        }
        return this.datasetsSom.inverseSearchGlobal(Xml2Som.splitParts(string2));
    }

    public Node findDatasetsNode(String string2) {
        if (string2 == null) {
            return null;
        }
        if ((string2 = this.findDatasetsName(string2)) == null) {
            return null;
        }
        return this.datasetsSom.getName2Node().get(string2);
    }

    public String findFieldName(String string2, AcroFields object) {
        if ((object = object.getFields()).containsKey(string2)) {
            return string2;
        }
        if (this.acroFieldsSom == null) {
            this.acroFieldsSom = object.isEmpty() && this.xfaPresent ? new AcroFieldsSearch(this.datasetsSom.getName2Node().keySet()) : new AcroFieldsSearch(object.keySet());
        }
        if (this.acroFieldsSom.getAcroShort2LongName().containsKey(string2)) {
            return this.acroFieldsSom.getAcroShort2LongName().get(string2);
        }
        return this.acroFieldsSom.inverseSearchGlobal(Xml2Som.splitParts(string2));
    }

    public AcroFieldsSearch getAcroFieldsSom() {
        return this.acroFieldsSom;
    }

    public Node getDatasetsNode() {
        return this.datasetsNode;
    }

    public Xml2SomDatasets getDatasetsSom() {
        return this.datasetsSom;
    }

    public Document getDomDocument() {
        return this.domDocument;
    }

    public PdfReader getReader() {
        return this.reader;
    }

    public Xml2SomTemplate getTemplateSom() {
        return this.templateSom;
    }

    public boolean isChanged() {
        return this.changed;
    }

    public boolean isXfaPresent() {
        return this.xfaPresent;
    }

    public void setAcroFieldsSom(AcroFieldsSearch acroFieldsSearch) {
        this.acroFieldsSom = acroFieldsSearch;
    }

    public void setChanged(boolean bl2) {
        this.changed = bl2;
    }

    public void setDatasetsSom(Xml2SomDatasets xml2SomDatasets) {
        this.datasetsSom = xml2SomDatasets;
    }

    public void setDomDocument(Document document) {
        this.domDocument = document;
        this.extractNodes();
    }

    public void setNodeText(Node node, String string2) {
        Node node2;
        if (node == null) {
            return;
        }
        while ((node2 = node.getFirstChild()) != null) {
            node.removeChild(node2);
        }
        if (node.getAttributes().getNamedItemNS(XFA_DATA_SCHEMA, "dataNode") != null) {
            node.getAttributes().removeNamedItemNS(XFA_DATA_SCHEMA, "dataNode");
        }
        node.appendChild(this.domDocument.createTextNode(string2));
        this.changed = true;
    }

    public void setReader(PdfReader pdfReader) {
        this.reader = pdfReader;
    }

    public void setTemplateSom(Xml2SomTemplate xml2SomTemplate) {
        this.templateSom = xml2SomTemplate;
    }

    public void setXfa(PdfWriter pdfWriter) {
        XfaForm.setXfa(this, this.reader, pdfWriter);
    }

    public void setXfaPresent(boolean bl2) {
        this.xfaPresent = bl2;
    }

    public static class AcroFieldsSearch
    extends Xml2Som {
        private HashMap<String, String> acroShort2LongName;

        public AcroFieldsSearch(Collection<String> object) {
            this.inverseSearch = new HashMap();
            this.acroShort2LongName = new HashMap();
            object = object.iterator();
            while (object.hasNext()) {
                String string2 = (String)object.next();
                String string3 = AcroFieldsSearch.getShortName(string2);
                this.acroShort2LongName.put(string3, string2);
                AcroFieldsSearch.inverseSearchAdd(this.inverseSearch, AcroFieldsSearch.splitParts(string3), string2);
            }
        }

        public HashMap<String, String> getAcroShort2LongName() {
            return this.acroShort2LongName;
        }

        public void setAcroShort2LongName(HashMap<String, String> hashMap) {
            this.acroShort2LongName = hashMap;
        }
    }

    public static class InverseStore {
        protected ArrayList<Object> follow = new ArrayList();
        protected ArrayList<String> part = new ArrayList();

        public String getDefaultName() {
            Object object = this;
            while (!((object = object.follow.get(0)) instanceof String)) {
                object = (InverseStore)object;
            }
            return (String)object;
        }

        public boolean isSimilar(String string2) {
            string2 = string2.substring(0, string2.indexOf(91) + 1);
            for (int i2 = 0; i2 < this.part.size(); ++i2) {
                if (!this.part.get(i2).startsWith(string2)) continue;
                return true;
            }
            return false;
        }
    }

    public static class Stack2<T>
    extends ArrayList<T> {
        private static final long serialVersionUID = -7451476576174095212L;

        public boolean empty() {
            if (this.size() == 0) {
                return true;
            }
            return false;
        }

        public T peek() {
            if (this.size() != 0) {
                return (T)this.get(this.size() - 1);
            }
            throw new EmptyStackException();
        }

        public T pop() {
            if (this.size() != 0) {
                Object e2 = this.get(this.size() - 1);
                this.remove(this.size() - 1);
                return (T)e2;
            }
            throw new EmptyStackException();
        }

        public T push(T t2) {
            this.add(t2);
            return t2;
        }
    }

    public static class Xml2Som {
        protected int anform;
        protected HashMap<String, InverseStore> inverseSearch;
        protected HashMap<String, Node> name2Node;
        protected ArrayList<String> order;
        protected Stack2<String> stack;

        public static String escapeSom(String string2) {
            if (string2 == null) {
                return "";
            }
            int n2 = string2.indexOf(46);
            if (n2 < 0) {
                return string2;
            }
            StringBuffer stringBuffer = new StringBuffer();
            int n3 = 0;
            while (n2 >= 0) {
                stringBuffer.append(string2.substring(n3, n2));
                stringBuffer.append('\\');
                int n4 = string2.indexOf(46, n2 + 1);
                n3 = n2;
                n2 = n4;
            }
            stringBuffer.append(string2.substring(n3));
            return stringBuffer.toString();
        }

        public static String getShortName(String string2) {
            int n2 = string2.indexOf(".#subform[");
            if (n2 < 0) {
                return string2;
            }
            int n3 = 0;
            StringBuffer stringBuffer = new StringBuffer();
            while (n2 >= 0) {
                stringBuffer.append(string2.substring(n3, n2));
                n2 = string2.indexOf("]", n2 + 10);
                if (n2 < 0) {
                    return stringBuffer.toString();
                }
                n3 = n2 + 1;
                n2 = string2.indexOf(".#subform[", n3);
            }
            stringBuffer.append(string2.substring(n3));
            return stringBuffer.toString();
        }

        public static void inverseSearchAdd(HashMap<String, InverseStore> object, Stack2<String> stack2, String string2) {
            String string3 = stack2.peek();
            InverseStore inverseStore = object.get(string3);
            Object object2 = inverseStore;
            if (inverseStore == null) {
                object2 = new InverseStore();
                object.put((String)string3, (InverseStore)object2);
            }
            for (int i2 = stack2.size() - 2; i2 >= 0; --i2) {
                object = stack2.get(i2);
                int n2 = object2.part.indexOf(object);
                if (n2 < 0) {
                    object2.part.add((String)object);
                    object = new InverseStore();
                    object2.follow.add(object);
                } else {
                    object = (InverseStore)object2.follow.get(n2);
                }
                object2 = object;
            }
            object2.part.add("");
            object2.follow.add(string2);
        }

        public static Stack2<String> splitParts(String charSequence) {
            while (charSequence.startsWith(".")) {
                charSequence = charSequence.substring(1);
            }
            Stack2<String> stack2 = new Stack2<String>();
            int n2 = 0;
            do {
                CharSequence charSequence2;
                int n3 = n2;
                while ((n3 = charSequence.indexOf(46, n3)) >= 0 && charSequence.charAt(n3 - 1) == '\\') {
                    ++n3;
                }
                if (n3 < 0) {
                    charSequence = charSequence2 = charSequence.substring(n2);
                    if (!charSequence2.endsWith("]")) {
                        charSequence = new StringBuilder();
                        charSequence.append((String)charSequence2);
                        charSequence.append("[0]");
                        charSequence = charSequence.toString();
                    }
                    stack2.add((String)charSequence);
                    return stack2;
                }
                String string2 = charSequence.substring(n2, n3);
                charSequence2 = string2;
                if (!string2.endsWith("]")) {
                    charSequence2 = new StringBuilder();
                    charSequence2.append(string2);
                    charSequence2.append("[0]");
                    charSequence2 = charSequence2.toString();
                }
                stack2.add((String)charSequence2);
                n2 = n3 + 1;
            } while (true);
        }

        public static String unescapeSom(String string2) {
            int n2 = string2.indexOf(92);
            if (n2 < 0) {
                return string2;
            }
            StringBuffer stringBuffer = new StringBuffer();
            int n3 = 0;
            while (n2 >= 0) {
                stringBuffer.append(string2.substring(n3, n2));
                n3 = n2 + 1;
                n2 = string2.indexOf(92, n3);
            }
            stringBuffer.append(string2.substring(n3));
            return stringBuffer.toString();
        }

        public HashMap<String, InverseStore> getInverseSearch() {
            return this.inverseSearch;
        }

        public HashMap<String, Node> getName2Node() {
            return this.name2Node;
        }

        public ArrayList<String> getOrder() {
            return this.order;
        }

        public void inverseSearchAdd(String string2) {
            Xml2Som.inverseSearchAdd(this.inverseSearch, this.stack, string2);
        }

        public String inverseSearchGlobal(ArrayList<String> arrayList) {
            if (arrayList.isEmpty()) {
                return null;
            }
            InverseStore inverseStore = this.inverseSearch.get(arrayList.get(arrayList.size() - 1));
            if (inverseStore == null) {
                return null;
            }
            for (int i2 = arrayList.size() - 2; i2 >= 0; --i2) {
                String string2 = arrayList.get(i2);
                int n2 = inverseStore.part.indexOf(string2);
                if (n2 < 0) {
                    if (inverseStore.isSimilar(string2)) {
                        return null;
                    }
                    return inverseStore.getDefaultName();
                }
                inverseStore = (InverseStore)inverseStore.follow.get(n2);
            }
            return inverseStore.getDefaultName();
        }

        protected String printStack() {
            if (this.stack.empty()) {
                return "";
            }
            StringBuffer stringBuffer = new StringBuffer();
            for (int i2 = 0; i2 < this.stack.size(); ++i2) {
                stringBuffer.append('.');
                stringBuffer.append(this.stack.get(i2));
            }
            return stringBuffer.substring(1);
        }

        public void setInverseSearch(HashMap<String, InverseStore> hashMap) {
            this.inverseSearch = hashMap;
        }

        public void setName2Node(HashMap<String, Node> hashMap) {
            this.name2Node = hashMap;
        }

        public void setOrder(ArrayList<String> arrayList) {
            this.order = arrayList;
        }
    }

    public static class Xml2SomDatasets
    extends Xml2Som {
        public Xml2SomDatasets(Node node) {
            this.order = new ArrayList();
            this.name2Node = new HashMap();
            this.stack = new Stack2();
            this.anform = 0;
            this.inverseSearch = new HashMap();
            this.processDatasetsInternal(node);
        }

        private static boolean hasChildren(Node node) {
            Object object = node.getAttributes().getNamedItemNS(XfaForm.XFA_DATA_SCHEMA, "dataNode");
            if (object != null) {
                if ("dataGroup".equals(object = object.getNodeValue())) {
                    return true;
                }
                if ("dataValue".equals(object)) {
                    return false;
                }
            }
            if (!node.hasChildNodes()) {
                return false;
            }
            for (node = node.getFirstChild(); node != null; node = node.getNextSibling()) {
                if (node.getNodeType() != 1) continue;
                return true;
            }
            return false;
        }

        private void processDatasetsInternal(Node node) {
            if (node != null) {
                HashMap<String, Integer> hashMap = new HashMap<String, Integer>();
                for (node = node.getFirstChild(); node != null; node = node.getNextSibling()) {
                    if (node.getNodeType() != 1) continue;
                    String string2 = Xml2SomDatasets.escapeSom(node.getLocalName());
                    Object object = (Integer)hashMap.get(string2);
                    object = object == null ? Integer.valueOf(0) : Integer.valueOf(object.intValue() + 1);
                    hashMap.put(string2, (Integer)object);
                    Stack2 stack2 = this.stack;
                    StringBuilder stringBuilder = new StringBuilder();
                    stringBuilder.append(string2);
                    stringBuilder.append("[");
                    stringBuilder.append(object.toString());
                    stringBuilder.append("]");
                    stack2.push(stringBuilder.toString());
                    if (Xml2SomDatasets.hasChildren(node)) {
                        this.processDatasetsInternal(node);
                    }
                    object = this.printStack();
                    this.order.add(object);
                    this.inverseSearchAdd((String)object);
                    this.name2Node.put(object, node);
                    this.stack.pop();
                }
            }
        }

        public Node insertNode(Node object, String string2) {
            Stack2<String> stack2 = Xml2SomDatasets.splitParts(string2);
            Document document = object.getOwnerDocument();
            object = object.getFirstChild();
            while (object.getNodeType() != 1) {
                object = object.getNextSibling();
            }
            Object object2 = null;
            Object object3 = object;
            for (int i2 = 0; i2 < stack2.size(); ++i2) {
                int n2;
                object = stack2.get(i2);
                int n3 = object.lastIndexOf(91);
                String string3 = object.substring(0, n3);
                int n4 = Integer.parseInt(object.substring(n3 + 1, object.length() - 1));
                n3 = -1;
                object = object3.getFirstChild();
                do {
                    n2 = n3;
                    object2 = object;
                    if (object == null) break;
                    n2 = n3;
                    if (object.getNodeType() == 1) {
                        n2 = n3++;
                        if (Xml2SomDatasets.escapeSom(object.getLocalName()).equals(string3)) {
                            n2 = n3;
                            if (n3 == n4) {
                                n2 = n3;
                                object2 = object;
                                break;
                            }
                        }
                    }
                    object = object.getNextSibling();
                    n3 = n2;
                } while (true);
                while (n2 < n4) {
                    object2 = object3.appendChild(document.createElementNS(null, string3));
                    object = document.createAttributeNS(XfaForm.XFA_DATA_SCHEMA, "dataNode");
                    object.setNodeValue("dataGroup");
                    object2.getAttributes().setNamedItemNS((Node)object);
                    ++n2;
                }
                object = object2;
                object3 = object2;
                object2 = object;
            }
            Xml2SomDatasets.inverseSearchAdd(this.inverseSearch, stack2, string2);
            this.name2Node.put(string2, object2);
            this.order.add(string2);
            return object2;
        }
    }

    public static class Xml2SomTemplate
    extends Xml2Som {
        private boolean dynamicForm;
        private int templateLevel;

        public Xml2SomTemplate(Node node) {
            this.order = new ArrayList();
            this.name2Node = new HashMap();
            this.stack = new Stack2();
            this.anform = 0;
            this.templateLevel = 0;
            this.inverseSearch = new HashMap();
            this.processTemplate(node, null);
        }

        /*
         * Loose catch block
         * Enabled aggressive block sorting
         * Enabled unnecessary exception pruning
         * Enabled aggressive exception aggregation
         * Lifted jumps to return sites
         */
        private void processTemplate(Node node, HashMap<String, Integer> object) {
            HashMap<String, Integer> hashMap = object;
            if (object == null) {
                hashMap = new HashMap<String, Integer>();
            }
            HashMap<Object, Object> hashMap2 = new HashMap<Object, Object>();
            node = node.getFirstChild();
            while (node != null) {
                block24 : {
                    int n4;
                    int n3;
                    int n2;
                    block23 : {
                        block22 : {
                            block21 : {
                                block28 : {
                                    block26 : {
                                        Object object2;
                                        Stack2 stack2;
                                        StringBuilder stringBuilder;
                                        block27 : {
                                            block25 : {
                                                if (node.getNodeType() != 1) break block24;
                                                object = node.getLocalName();
                                                boolean bl2 = "subform".equals(object);
                                                n4 = 0;
                                                if (!bl2) break block25;
                                                object2 = node.getAttributes().getNamedItem("name");
                                                object = "#subform";
                                                if (object2 != null) {
                                                    object = Xml2SomTemplate.escapeSom(object2.getNodeValue());
                                                    n2 = 0;
                                                } else {
                                                    n2 = 1;
                                                }
                                                if (n2 != 0) {
                                                    object2 = this.anform;
                                                    ++this.anform;
                                                } else {
                                                    object2 = (Integer)hashMap2.get(object);
                                                    if (object2 != null) {
                                                        n4 = object2.intValue() + 1;
                                                    }
                                                    object2 = n4;
                                                    hashMap2.put(object, object2);
                                                }
                                                stack2 = this.stack;
                                                stringBuilder = new StringBuilder();
                                                stringBuilder.append((String)object);
                                                stringBuilder.append("[");
                                                stringBuilder.append(object2.toString());
                                                stringBuilder.append("]");
                                                stack2.push(stringBuilder.toString());
                                                ++this.templateLevel;
                                                if (n2 != 0) {
                                                    this.processTemplate(node, hashMap);
                                                } else {
                                                    this.processTemplate(node, null);
                                                }
                                                --this.templateLevel;
                                                break block26;
                                            }
                                            if ("field".equals(object) || "exclGroup".equals(object)) break block27;
                                            if (this.dynamicForm || this.templateLevel <= 0 || !"occur".equals(object)) break block24;
                                            object = node.getAttributes().getNamedItem("initial");
                                            if (object != null) {
                                                n2 = Integer.parseInt(object.getNodeValue().trim());
                                                break block21;
                                            }
                                            break block28;
                                        }
                                        object = node.getAttributes().getNamedItem("name");
                                        if (object == null) break block24;
                                        object2 = Xml2SomTemplate.escapeSom(object.getNodeValue());
                                        object = (Integer)hashMap.get(object2);
                                        object = object == null ? Integer.valueOf(0) : Integer.valueOf(object.intValue() + 1);
                                        hashMap.put((String)object2, (Integer)object);
                                        stack2 = this.stack;
                                        stringBuilder = new StringBuilder();
                                        stringBuilder.append((String)object2);
                                        stringBuilder.append("[");
                                        stringBuilder.append(object.toString());
                                        stringBuilder.append("]");
                                        stack2.push(stringBuilder.toString());
                                        object = this.printStack();
                                        this.order.add(object);
                                        this.inverseSearchAdd((String)object);
                                        this.name2Node.put(object, node);
                                    }
                                    this.stack.pop();
                                    break block24;
                                    catch (Exception exception) {}
                                }
                                n2 = 1;
                            }
                            object = node.getAttributes().getNamedItem("min");
                            if (object != null) {
                                try {
                                    n4 = Integer.parseInt(object.getNodeValue().trim());
                                    break block22;
                                }
                                catch (Exception exception) {}
                            }
                            n4 = 1;
                        }
                        object = node.getAttributes().getNamedItem("max");
                        if (object != null) {
                            try {
                                n3 = Integer.parseInt(object.getNodeValue().trim());
                                break block23;
                            }
                            catch (Exception exception) {}
                        }
                        n3 = 1;
                    }
                    if (n2 != n4 || n4 != n3) {
                        this.dynamicForm = true;
                    }
                }
                node = node.getNextSibling();
            }
        }

        public String getFieldType(String object) {
            if ((object = (Node)this.name2Node.get(object)) == null) {
                return null;
            }
            if ("exclGroup".equals(object.getLocalName())) {
                return "exclGroup";
            }
            for (object = object.getFirstChild(); !(object == null || object.getNodeType() == 1 && "ui".equals(object.getLocalName())); object = object.getNextSibling()) {
            }
            if (object == null) {
                return null;
            }
            for (object = object.getFirstChild(); object != null; object = object.getNextSibling()) {
                if (object.getNodeType() != 1 || "extras".equals(object.getLocalName()) && "picture".equals(object.getLocalName())) continue;
                return object.getLocalName();
            }
            return null;
        }

        public boolean isDynamicForm() {
            return this.dynamicForm;
        }

        public void setDynamicForm(boolean bl2) {
            this.dynamicForm = bl2;
        }
    }

}

