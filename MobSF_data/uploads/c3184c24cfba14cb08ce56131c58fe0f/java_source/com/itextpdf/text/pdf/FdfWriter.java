/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf;

import com.itextpdf.text.DocWriter;
import com.itextpdf.text.ExceptionConverter;
import com.itextpdf.text.Image;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.log.Counter;
import com.itextpdf.text.log.CounterFactory;
import com.itextpdf.text.pdf.AcroFields;
import com.itextpdf.text.pdf.FdfReader;
import com.itextpdf.text.pdf.OutputStreamCounter;
import com.itextpdf.text.pdf.PdfAction;
import com.itextpdf.text.pdf.PdfAnnotation;
import com.itextpdf.text.pdf.PdfArray;
import com.itextpdf.text.pdf.PdfDictionary;
import com.itextpdf.text.pdf.PdfDocument;
import com.itextpdf.text.pdf.PdfImportedPage;
import com.itextpdf.text.pdf.PdfIndirectObject;
import com.itextpdf.text.pdf.PdfIndirectReference;
import com.itextpdf.text.pdf.PdfName;
import com.itextpdf.text.pdf.PdfObject;
import com.itextpdf.text.pdf.PdfReader;
import com.itextpdf.text.pdf.PdfReaderInstance;
import com.itextpdf.text.pdf.PdfStream;
import com.itextpdf.text.pdf.PdfString;
import com.itextpdf.text.pdf.PdfTemplate;
import com.itextpdf.text.pdf.PdfWriter;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import java.util.StringTokenizer;

public class FdfWriter {
    private static final byte[] HEADER_FDF = DocWriter.getISOBytes("%FDF-1.4\n%\u00e2\u00e3\u00cf\u00d3\n");
    protected Counter COUNTER = CounterFactory.getCounter(FdfWriter.class);
    HashMap<String, Object> fields = new HashMap();
    private String file;
    private String statusMessage;
    Wrt wrt = null;

    public FdfWriter() {
    }

    public FdfWriter(OutputStream outputStream) {
        this.wrt = new Wrt(outputStream, this);
    }

    public PdfTemplate createTemplate(float f2, float f3) {
        return PdfTemplate.createTemplate(this.wrt, f2, f3);
    }

    protected Counter getCounter() {
        return this.COUNTER;
    }

    public String getField(String object) {
        block5 : {
            HashMap<String, Object> hashMap = this.fields;
            StringTokenizer stringTokenizer = new StringTokenizer((String)object, ".");
            object = hashMap;
            if (!stringTokenizer.hasMoreTokens()) {
                return null;
            }
            do {
                if ((object = object.get(stringTokenizer.nextToken())) == null) {
                    return null;
                }
                if (!stringTokenizer.hasMoreTokens()) break block5;
                if (!(object instanceof HashMap)) break;
                object = (HashMap)object;
            } while (true);
            return null;
        }
        if (object instanceof HashMap) {
            return null;
        }
        if (((PdfObject)object).isString()) {
            return ((PdfString)object).toUnicodeString();
        }
        return PdfName.decodeName(object.toString());
    }

    public HashMap<String, Object> getFields() {
        HashMap<String, Object> hashMap = new HashMap<String, Object>();
        this.iterateFields(hashMap, this.fields, "");
        return hashMap;
    }

    public String getFile() {
        return this.file;
    }

    public PdfImportedPage getImportedPage(PdfReader pdfReader, int n2) {
        return this.wrt.getImportedPage(pdfReader, n2);
    }

    public String getStatusMessage() {
        return this.statusMessage;
    }

    void iterateFields(HashMap<String, Object> hashMap, HashMap<String, Object> object, String string2) {
        for (Map.Entry entry : object.entrySet()) {
            StringBuilder stringBuilder;
            String string3 = (String)entry.getKey();
            Object v2 = entry.getValue();
            if (v2 instanceof HashMap) {
                HashMap hashMap2 = (HashMap)v2;
                stringBuilder = new StringBuilder();
                stringBuilder.append(string2);
                stringBuilder.append(".");
                stringBuilder.append(string3);
                this.iterateFields(hashMap, hashMap2, stringBuilder.toString());
                continue;
            }
            stringBuilder = new StringBuilder();
            stringBuilder.append(string2);
            stringBuilder.append(".");
            stringBuilder.append(string3);
            hashMap.put(stringBuilder.toString().substring(1), v2);
        }
    }

    public boolean removeField(String object) {
        ArrayList<Object> arrayList;
        Object v2;
        block5 : {
            Object object2 = this.fields;
            StringTokenizer stringTokenizer = new StringTokenizer((String)object, ".");
            if (!stringTokenizer.hasMoreTokens()) {
                return false;
            }
            arrayList = new ArrayList<Object>();
            object = object2;
            do {
                if ((v2 = object.get(object2 = stringTokenizer.nextToken())) == null) {
                    return false;
                }
                arrayList.add(object);
                arrayList.add(object2);
                if (!stringTokenizer.hasMoreTokens()) break block5;
                if (!(v2 instanceof HashMap)) break;
                object = (HashMap)v2;
            } while (true);
            return false;
        }
        if (v2 instanceof HashMap) {
            return false;
        }
        for (int i2 = arrayList.size() - 2; i2 >= 0; i2 -= 2) {
            object = (HashMap)arrayList.get(i2);
            object.remove((String)arrayList.get(i2 + 1));
            if (!object.isEmpty()) break;
        }
        return true;
    }

    /*
     * Enabled aggressive block sorting
     */
    boolean setField(String hashMap, PdfObject pdfObject) {
        String string2;
        HashMap hashMap2 = this.fields;
        StringTokenizer stringTokenizer = new StringTokenizer((String)((Object)hashMap), ".");
        hashMap = hashMap2;
        if (!stringTokenizer.hasMoreTokens()) {
            return false;
        }
        do {
            string2 = stringTokenizer.nextToken();
            hashMap2 = hashMap.get(string2);
            if (!stringTokenizer.hasMoreTokens()) break;
            if (hashMap2 == null) {
                hashMap2 = new HashMap();
                hashMap.put(string2, hashMap2);
                hashMap = hashMap2;
                continue;
            }
            if (!(hashMap2 instanceof HashMap)) {
                return false;
            }
            hashMap = hashMap2;
        } while (true);
        if (!(hashMap2 instanceof HashMap)) {
            hashMap.put(string2, pdfObject);
            return true;
        }
        return false;
    }

    public boolean setFieldAsAction(String string2, PdfAction pdfAction) {
        return this.setField(string2, pdfAction);
    }

    public boolean setFieldAsImage(String string2, Image object) {
        try {
            if (Float.isNaN(object.getAbsoluteX())) {
                object.setAbsolutePosition(0.0f, object.getAbsoluteY());
            }
            if (Float.isNaN(object.getAbsoluteY())) {
                object.setAbsolutePosition(object.getAbsoluteY(), 0.0f);
            }
            Object object2 = PdfTemplate.createTemplate(this.wrt, object.getWidth(), object.getHeight());
            object2.addImage((Image)object);
            object = object2.getFormXObject(0);
            object = this.wrt.addToBody((PdfObject)object).getIndirectReference();
            object2 = new PdfDictionary();
            object2.put(PdfName.N, (PdfObject)object);
            boolean bl2 = this.setField(string2, (PdfObject)object2);
            return bl2;
        }
        catch (Exception exception) {
            throw new ExceptionConverter(exception);
        }
    }

    public boolean setFieldAsJavascript(String string2, PdfName pdfName, String string3) {
        PdfAnnotation pdfAnnotation = this.wrt.createAnnotation(null, null);
        pdfAnnotation.put(pdfName, PdfAction.javaScript(string3, this.wrt));
        return this.setField(string2, pdfAnnotation);
    }

    public boolean setFieldAsName(String string2, String string3) {
        return this.setField(string2, new PdfName(string3));
    }

    public boolean setFieldAsString(String string2, String string3) {
        return this.setField(string2, new PdfString(string3, "UnicodeBig"));
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public boolean setFieldAsTemplate(String string2, PdfTemplate object) {
        try {
            PdfIndirectReference pdfIndirectReference;
            PdfDictionary pdfDictionary = new PdfDictionary();
            if (object instanceof PdfImportedPage) {
                PdfName pdfName = PdfName.N;
                pdfIndirectReference = object.getIndirectReference();
                object = pdfName;
            } else {
                object = object.getFormXObject(0);
                pdfIndirectReference = this.wrt.addToBody((PdfObject)object).getIndirectReference();
                object = PdfName.N;
            }
            pdfDictionary.put((PdfName)object, pdfIndirectReference);
            return this.setField(string2, pdfDictionary);
        }
        catch (Exception exception) {
            throw new ExceptionConverter(exception);
        }
    }

    public void setFields(AcroFields object) {
        for (Map.Entry<String, AcroFields.Item> entry : object.getFields().entrySet()) {
            String string2 = entry.getKey();
            PdfObject pdfObject = entry.getValue().getMerged(0);
            PdfObject object2 = PdfReader.getPdfObjectRelease(pdfObject.get(PdfName.V));
            if (object2 == null || (pdfObject = PdfReader.getPdfObjectRelease(pdfObject.get(PdfName.FT))) == null || PdfName.SIG.equals(pdfObject)) continue;
            this.setField(string2, object2);
        }
    }

    public void setFields(FdfReader object) {
        for (Map.Entry<String, PdfDictionary> entry : object.getFields().entrySet()) {
            PdfObject object2;
            String string2 = entry.getKey();
            PdfDictionary pdfDictionary = entry.getValue();
            PdfObject pdfObject = pdfDictionary.get(PdfName.V);
            if (pdfObject != null) {
                this.setField(string2, pdfObject);
            }
            if ((object2 = pdfDictionary.get(PdfName.A)) == null) continue;
            this.setField(string2, object2);
        }
    }

    public void setFields(PdfReader pdfReader) {
        this.setFields(pdfReader.getAcroFields());
    }

    public void setFile(String string2) {
        this.file = string2;
    }

    public void setStatusMessage(String string2) {
        this.statusMessage = string2;
    }

    public void write() {
        this.wrt.write();
    }

    public void writeTo(OutputStream outputStream) {
        if (this.wrt == null) {
            this.wrt = new Wrt(outputStream, this);
        }
        this.wrt.write();
    }

    static class Wrt
    extends PdfWriter {
        private FdfWriter fdf;

        Wrt(OutputStream outputStream, FdfWriter fdfWriter) {
            super(new PdfDocument(), outputStream);
            this.fdf = fdfWriter;
            this.os.write(HEADER_FDF);
            this.body = new PdfWriter.PdfBody(this);
        }

        /*
         * Unable to fully structure code
         * Enabled aggressive block sorting
         * Lifted jumps to return sites
         */
        PdfArray calculate(HashMap<String, Object> var1_1) {
            var3_11 = new PdfArray();
            var4_12 = var1_1.entrySet().iterator();
            while (var4_12.hasNext() != false) {
                block5 : {
                    block4 : {
                        block3 : {
                            var1_3 = var4_12.next();
                            var2_13 = (String)var1_3.getKey();
                            var1_4 = var1_3.getValue();
                            var5_14 = new PdfDictionary();
                            var5_14.put(PdfName.T, new PdfString((String)var2_13, "UnicodeBig"));
                            if (!(var1_4 instanceof HashMap)) break block3;
                            var2_13 = PdfName.KIDS;
                            var1_5 = this.calculate((HashMap)var1_4);
                            ** GOTO lbl29
                        }
                        if (!(var1_4 instanceof PdfAction)) break block4;
                        var2_13 = PdfName.A;
                        var1_7 = (PdfAction)var1_4;
                        ** GOTO lbl29
                    }
                    if (!(var1_4 instanceof PdfAnnotation)) break block5;
                    var2_13 = PdfName.AA;
                    var1_8 = (PdfAnnotation)var1_4;
                    ** GOTO lbl29
                }
                if (var1_4 instanceof PdfDictionary && (var2_13 = (PdfDictionary)var1_4).size() == 1 && var2_13.contains(PdfName.N)) {
                    var5_14.put(PdfName.AP, (PdfObject)var2_13);
                } else {
                    var2_13 = PdfName.V;
                    var1_9 = (PdfObject)var1_4;
lbl29: // 4 sources:
                    var5_14.put((PdfName)var2_13, (PdfObject)var1_6);
                }
                var3_11.add(var5_14);
            }
            return var3_11;
        }

        void write() {
            for (PdfReaderInstance this.currentPdfReaderInstance : this.readerInstances.values()) {
                this.currentPdfReaderInstance.writeAllPages();
            }
            Object object = new PdfDictionary();
            object.put(PdfName.FIELDS, this.calculate(this.fdf.fields));
            if (this.fdf.file != null) {
                object.put(PdfName.F, new PdfString(this.fdf.file, "UnicodeBig"));
            }
            if (this.fdf.statusMessage != null && this.fdf.statusMessage.trim().length() != 0) {
                object.put(PdfName.STATUS, new PdfString(this.fdf.statusMessage));
            }
            PdfDictionary pdfDictionary = new PdfDictionary();
            pdfDictionary.put(PdfName.FDF, (PdfObject)object);
            object = this.addToBody(pdfDictionary).getIndirectReference();
            this.os.write(Wrt.getISOBytes("trailer\n"));
            pdfDictionary = new PdfDictionary();
            pdfDictionary.put(PdfName.ROOT, (PdfObject)object);
            pdfDictionary.toPdf(null, this.os);
            this.os.write(Wrt.getISOBytes("\n%%EOF\n"));
            this.os.close();
        }
    }

}

