/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  org.spongycastle.crypto.BlockCipher
 *  org.spongycastle.crypto.CipherParameters
 *  org.spongycastle.crypto.engines.AESFastEngine
 *  org.spongycastle.crypto.modes.CBCBlockCipher
 *  org.spongycastle.crypto.paddings.PaddedBufferedBlockCipher
 *  org.spongycastle.crypto.params.KeyParameter
 *  org.spongycastle.crypto.params.ParametersWithIV
 */
package com.itextpdf.text.pdf.crypto;

import org.spongycastle.crypto.BlockCipher;
import org.spongycastle.crypto.CipherParameters;
import org.spongycastle.crypto.engines.AESFastEngine;
import org.spongycastle.crypto.modes.CBCBlockCipher;
import org.spongycastle.crypto.paddings.PaddedBufferedBlockCipher;
import org.spongycastle.crypto.params.KeyParameter;
import org.spongycastle.crypto.params.ParametersWithIV;

public class AESCipher {
    private PaddedBufferedBlockCipher bp = new PaddedBufferedBlockCipher((BlockCipher)new CBCBlockCipher((BlockCipher)new AESFastEngine()));

    public AESCipher(boolean bl2, byte[] parametersWithIV, byte[] arrby) {
        parametersWithIV = new ParametersWithIV((CipherParameters)new KeyParameter((byte[])parametersWithIV), arrby);
        this.bp.init(bl2, (CipherParameters)parametersWithIV);
    }

    public byte[] doFinal() {
        int n2;
        byte[] arrby = new byte[this.bp.getOutputSize(0)];
        try {
            n2 = this.bp.doFinal(arrby, 0);
        }
        catch (Exception exception) {
            return arrby;
        }
        if (n2 != arrby.length) {
            byte[] arrby2 = new byte[n2];
            System.arraycopy(arrby, 0, arrby2, 0, n2);
            return arrby2;
        }
        return arrby;
    }

    public byte[] update(byte[] arrby, int n2, int n3) {
        int n4 = this.bp.getUpdateOutputSize(n3);
        byte[] arrby2 = n4 > 0 ? new byte[n4] : null;
        this.bp.processBytes(arrby, n2, n3, arrby2, 0);
        return arrby2;
    }
}

