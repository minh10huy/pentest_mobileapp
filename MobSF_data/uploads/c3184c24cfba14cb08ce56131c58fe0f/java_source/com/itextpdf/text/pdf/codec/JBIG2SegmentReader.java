/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf.codec;

import com.itextpdf.text.error_messages.MessageLocalization;
import com.itextpdf.text.pdf.RandomAccessFileOrArray;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.Iterator;
import java.util.Set;
import java.util.SortedMap;
import java.util.SortedSet;
import java.util.TreeMap;
import java.util.TreeSet;

public class JBIG2SegmentReader {
    public static final int END_OF_FILE = 51;
    public static final int END_OF_PAGE = 49;
    public static final int END_OF_STRIPE = 50;
    public static final int EXTENSION = 62;
    public static final int IMMEDIATE_GENERIC_REFINEMENT_REGION = 42;
    public static final int IMMEDIATE_GENERIC_REGION = 38;
    public static final int IMMEDIATE_HALFTONE_REGION = 22;
    public static final int IMMEDIATE_LOSSLESS_GENERIC_REFINEMENT_REGION = 43;
    public static final int IMMEDIATE_LOSSLESS_GENERIC_REGION = 39;
    public static final int IMMEDIATE_LOSSLESS_HALFTONE_REGION = 23;
    public static final int IMMEDIATE_LOSSLESS_TEXT_REGION = 7;
    public static final int IMMEDIATE_TEXT_REGION = 6;
    public static final int INTERMEDIATE_GENERIC_REFINEMENT_REGION = 40;
    public static final int INTERMEDIATE_GENERIC_REGION = 36;
    public static final int INTERMEDIATE_HALFTONE_REGION = 20;
    public static final int INTERMEDIATE_TEXT_REGION = 4;
    public static final int PAGE_INFORMATION = 48;
    public static final int PATTERN_DICTIONARY = 16;
    public static final int PROFILES = 52;
    public static final int SYMBOL_DICTIONARY = 0;
    public static final int TABLES = 53;
    private final SortedSet<JBIG2Segment> globals = new TreeSet<JBIG2Segment>();
    private int number_of_pages = -1;
    private boolean number_of_pages_known;
    private final SortedMap<Integer, JBIG2Page> pages = new TreeMap<Integer, JBIG2Page>();
    private RandomAccessFileOrArray ra;
    private boolean read = false;
    private final SortedMap<Integer, JBIG2Segment> segments = new TreeMap<Integer, JBIG2Segment>();
    private boolean sequential;

    public JBIG2SegmentReader(RandomAccessFileOrArray randomAccessFileOrArray) {
        this.ra = randomAccessFileOrArray;
    }

    public static byte[] copyByteArray(byte[] arrby) {
        byte[] arrby2 = new byte[arrby.length];
        System.arraycopy(arrby, 0, arrby2, 0, arrby.length);
        return arrby2;
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public byte[] getGlobal(boolean bl2) {
        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        try {
            for (JBIG2Segment jBIG2Segment : this.globals) {
                if (bl2 && (jBIG2Segment.type == 51 || jBIG2Segment.type == 49)) continue;
                byteArrayOutputStream.write(jBIG2Segment.headerData);
                byteArrayOutputStream.write(jBIG2Segment.data);
            }
            byteArrayOutputStream.close();
        }
        catch (IOException iOException) {
            iOException.printStackTrace();
        }
        if (byteArrayOutputStream.size() <= 0) {
            return null;
        }
        return byteArrayOutputStream.toByteArray();
    }

    public JBIG2Page getPage(int n2) {
        return this.pages.get(n2);
    }

    public int getPageHeight(int n2) {
        return this.pages.get((Object)Integer.valueOf((int)n2)).pageBitmapHeight;
    }

    public int getPageWidth(int n2) {
        return this.pages.get((Object)Integer.valueOf((int)n2)).pageBitmapWidth;
    }

    public int numberOfPages() {
        return this.pages.size();
    }

    public void read() {
        if (!this.read) {
            Object object;
            this.read = true;
            this.readFileHeader();
            if (this.sequential) {
                do {
                    JBIG2Segment jBIG2Segment = this.readHeader();
                    this.readSegment(jBIG2Segment);
                    this.segments.put(jBIG2Segment.segmentNumber, jBIG2Segment);
                } while (this.ra.getFilePointer() < this.ra.length());
                return;
            }
            do {
                object = this.readHeader();
                this.segments.put(object.segmentNumber, (JBIG2Segment)object);
            } while (object.type != 51);
            object = this.segments.keySet().iterator();
            while (object.hasNext()) {
                this.readSegment(this.segments.get(object.next()));
            }
            return;
        }
        throw new IllegalStateException(MessageLocalization.getComposedMessage("already.attempted.a.read.on.this.jbig2.file", new Object[0]));
    }

    void readFileHeader() {
        int n2;
        this.ra.seek(0L);
        byte[] arrby = new byte[8];
        this.ra.read(arrby);
        for (n2 = 0; n2 < arrby.length; ++n2) {
            if (arrby[n2] == new byte[]{-105, 74, 66, 50, 13, 10, 26, 10}[n2]) {
                continue;
            }
            throw new IllegalStateException(MessageLocalization.getComposedMessage("file.header.idstring.not.good.at.byte.1", n2));
        }
        n2 = this.ra.read();
        boolean bl2 = true;
        boolean bl3 = (n2 & 1) == 1;
        this.sequential = bl3;
        bl3 = (n2 & 2) == 0 ? bl2 : false;
        this.number_of_pages_known = bl3;
        if ((n2 & 252) == 0) {
            if (this.number_of_pages_known) {
                this.number_of_pages = this.ra.readInt();
            }
            return;
        }
        throw new IllegalStateException(MessageLocalization.getComposedMessage("file.header.flags.bits.2.7.not.0", new Object[0]));
    }

    JBIG2Segment readHeader() {
        int n2;
        int n3;
        block17 : {
            JBIG2Segment jBIG2Segment;
            boolean bl2;
            int n4;
            int n5;
            boolean[] arrbl;
            block15 : {
                int n6;
                int n7;
                boolean bl3;
                block16 : {
                    n3 = (int)this.ra.getFilePointer();
                    n2 = this.ra.readInt();
                    jBIG2Segment = new JBIG2Segment(n2);
                    n4 = this.ra.read();
                    bl2 = (n4 & 128) == 128;
                    jBIG2Segment.deferredNonRetain = bl2;
                    bl2 = (n4 & 64) == 64;
                    jBIG2Segment.type = n4 & 63;
                    n6 = this.ra.read();
                    n7 = (n6 & 224) >> 5;
                    arrbl = null;
                    if (n7 != 7) break block16;
                    this.ra.seek(this.ra.getFilePointer() - 1L);
                    n7 = this.ra.readInt() & 536870911;
                    arrbl = new boolean[n7 + 1];
                    n4 = 0;
                    n5 = 0;
                    do {
                        if ((n6 = n4 % 8) == 0) {
                            n5 = this.ra.read();
                        }
                        bl3 = (1 << n6 & n5) >> n6 == 1;
                        arrbl[n4] = bl3;
                        n4 = n6 = n4 + 1;
                    } while (n6 <= n7);
                    n4 = n7;
                    break block15;
                }
                if (n7 <= 4) {
                    boolean[] arrbl2 = new boolean[n7 + 1];
                    n5 = 0;
                    do {
                        n4 = n7;
                        arrbl = arrbl2;
                        if (n5 <= n7) {
                            bl3 = (1 << n5 & (n6 & 31)) >> n5 == 1;
                            arrbl2[n5] = bl3;
                            ++n5;
                            continue;
                        }
                        break block15;
                        break;
                    } while (true);
                }
                if (n7 == 5 || n7 == 6) break block17;
                n4 = n7;
            }
            jBIG2Segment.segmentRetentionFlags = arrbl;
            jBIG2Segment.countOfReferredToSegments = n4;
            arrbl = new int[n4 + 1];
            for (n5 = 1; n5 <= n4; ++n5) {
                arrbl[n5] = n2 <= 256 ? this.ra.read() : (n2 <= 65536 ? this.ra.readUnsignedShort() : (int)this.ra.readUnsignedInt());
            }
            jBIG2Segment.referredToSegmentNumbers = arrbl;
            n5 = (int)this.ra.getFilePointer();
            n4 = bl2 ? this.ra.readInt() : this.ra.read();
            if (n4 >= 0) {
                jBIG2Segment.page = n4;
                jBIG2Segment.page_association_size = bl2;
                jBIG2Segment.page_association_offset = n5 - n3;
                if (n4 > 0 && !this.pages.containsKey(n4)) {
                    this.pages.put(n4, new JBIG2Page(n4, this));
                }
                if (n4 > 0) {
                    this.pages.get(n4).addSegment(jBIG2Segment);
                } else {
                    this.globals.add(jBIG2Segment);
                }
                jBIG2Segment.dataLength = this.ra.readUnsignedInt();
                n4 = (int)this.ra.getFilePointer();
                this.ra.seek(n3);
                arrbl = new byte[n4 - n3];
                this.ra.read((byte[])arrbl);
                jBIG2Segment.headerData = arrbl;
                return jBIG2Segment;
            }
            throw new IllegalStateException(MessageLocalization.getComposedMessage("page.1.invalid.for.segment.2.starting.at.3", String.valueOf(n4), String.valueOf(n2), String.valueOf(n3)));
        }
        throw new IllegalStateException(MessageLocalization.getComposedMessage("count.of.referred.to.segments.had.bad.value.in.header.for.segment.1.starting.at.2", String.valueOf(n2), String.valueOf(n3)));
    }

    void readSegment(JBIG2Segment jBIG2Segment) {
        int n2 = (int)this.ra.getFilePointer();
        if (jBIG2Segment.dataLength == 0xFFFFFFFFL) {
            return;
        }
        Object object = new byte[(int)jBIG2Segment.dataLength];
        this.ra.read((byte[])object);
        jBIG2Segment.data = object;
        if (jBIG2Segment.type == 48) {
            int n3 = (int)this.ra.getFilePointer();
            this.ra.seek(n2);
            n2 = this.ra.readInt();
            int n4 = this.ra.readInt();
            this.ra.seek(n3);
            object = this.pages.get(jBIG2Segment.page);
            if (object != null) {
                object.pageBitmapWidth = n2;
                object.pageBitmapHeight = n4;
                return;
            }
            throw new IllegalStateException(MessageLocalization.getComposedMessage("referring.to.widht.height.of.page.we.havent.seen.yet.1", jBIG2Segment.page));
        }
    }

    public String toString() {
        if (this.read) {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("Jbig2SegmentReader: number of pages: ");
            stringBuilder.append(this.numberOfPages());
            return stringBuilder.toString();
        }
        return "Jbig2SegmentReader in indeterminate state.";
    }

    public static class JBIG2Page {
        public final int page;
        public int pageBitmapHeight = -1;
        public int pageBitmapWidth = -1;
        private final SortedMap<Integer, JBIG2Segment> segs = new TreeMap<Integer, JBIG2Segment>();
        private final JBIG2SegmentReader sr;

        public JBIG2Page(int n2, JBIG2SegmentReader jBIG2SegmentReader) {
            this.page = n2;
            this.sr = jBIG2SegmentReader;
        }

        public void addSegment(JBIG2Segment jBIG2Segment) {
            this.segs.put(jBIG2Segment.segmentNumber, jBIG2Segment);
        }

        public byte[] getData(boolean bl2) {
            ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
            for (Integer n2 : this.segs.keySet()) {
                void var2_8;
                JBIG2Segment jBIG2Segment = this.segs.get(n2);
                if (bl2 && (jBIG2Segment.type == 51 || jBIG2Segment.type == 49)) continue;
                if (bl2) {
                    byte[] arrby = JBIG2SegmentReader.copyByteArray(jBIG2Segment.headerData);
                    if (jBIG2Segment.page_association_size) {
                        arrby[jBIG2Segment.page_association_offset] = 0;
                        arrby[jBIG2Segment.page_association_offset + 1] = 0;
                        arrby[jBIG2Segment.page_association_offset + 2] = 0;
                        arrby[jBIG2Segment.page_association_offset + 3] = 1;
                    } else {
                        arrby[jBIG2Segment.page_association_offset] = 1;
                    }
                } else {
                    byte[] arrby = jBIG2Segment.headerData;
                }
                byteArrayOutputStream.write((byte[])var2_8);
                byteArrayOutputStream.write(jBIG2Segment.data);
            }
            byteArrayOutputStream.close();
            return byteArrayOutputStream.toByteArray();
        }
    }

    public static class JBIG2Segment
    implements Comparable<JBIG2Segment> {
        public int countOfReferredToSegments = -1;
        public byte[] data = null;
        public long dataLength = -1L;
        public boolean deferredNonRetain = false;
        public byte[] headerData = null;
        public int page = -1;
        public int page_association_offset = -1;
        public boolean page_association_size = false;
        public int[] referredToSegmentNumbers = null;
        public final int segmentNumber;
        public boolean[] segmentRetentionFlags = null;
        public int type = -1;

        public JBIG2Segment(int n2) {
            this.segmentNumber = n2;
        }

        @Override
        public int compareTo(JBIG2Segment jBIG2Segment) {
            return this.segmentNumber - jBIG2Segment.segmentNumber;
        }
    }

}

