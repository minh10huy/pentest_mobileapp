/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf;

import com.itextpdf.text.AccessibleElementId;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chunk;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.ElementListener;
import com.itextpdf.text.ExceptionConverter;
import com.itextpdf.text.Font;
import com.itextpdf.text.Image;
import com.itextpdf.text.ImgTemplate;
import com.itextpdf.text.ListBody;
import com.itextpdf.text.ListItem;
import com.itextpdf.text.ListLabel;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.TabSettings;
import com.itextpdf.text.TabStop;
import com.itextpdf.text.Version;
import com.itextpdf.text.error_messages.MessageLocalization;
import com.itextpdf.text.io.TempFileCache;
import com.itextpdf.text.pdf.BaseFont;
import com.itextpdf.text.pdf.ColumnText;
import com.itextpdf.text.pdf.FloatLayout;
import com.itextpdf.text.pdf.PageResources;
import com.itextpdf.text.pdf.PdfAcroForm;
import com.itextpdf.text.pdf.PdfAction;
import com.itextpdf.text.pdf.PdfAnnotation;
import com.itextpdf.text.pdf.PdfArray;
import com.itextpdf.text.pdf.PdfBody;
import com.itextpdf.text.pdf.PdfChunk;
import com.itextpdf.text.pdf.PdfContentByte;
import com.itextpdf.text.pdf.PdfContents;
import com.itextpdf.text.pdf.PdfDate;
import com.itextpdf.text.pdf.PdfDestination;
import com.itextpdf.text.pdf.PdfDictionary;
import com.itextpdf.text.pdf.PdfDiv;
import com.itextpdf.text.pdf.PdfEncodings;
import com.itextpdf.text.pdf.PdfEncryption;
import com.itextpdf.text.pdf.PdfFileSpecification;
import com.itextpdf.text.pdf.PdfFont;
import com.itextpdf.text.pdf.PdfFormField;
import com.itextpdf.text.pdf.PdfIndirectObject;
import com.itextpdf.text.pdf.PdfIndirectReference;
import com.itextpdf.text.pdf.PdfLine;
import com.itextpdf.text.pdf.PdfName;
import com.itextpdf.text.pdf.PdfNameTree;
import com.itextpdf.text.pdf.PdfNumber;
import com.itextpdf.text.pdf.PdfObject;
import com.itextpdf.text.pdf.PdfOutline;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfPage;
import com.itextpdf.text.pdf.PdfPageEvent;
import com.itextpdf.text.pdf.PdfPageLabels;
import com.itextpdf.text.pdf.PdfRectangle;
import com.itextpdf.text.pdf.PdfStream;
import com.itextpdf.text.pdf.PdfString;
import com.itextpdf.text.pdf.PdfStructureElement;
import com.itextpdf.text.pdf.PdfStructureTreeRoot;
import com.itextpdf.text.pdf.PdfTextArray;
import com.itextpdf.text.pdf.PdfTransition;
import com.itextpdf.text.pdf.PdfWriter;
import com.itextpdf.text.pdf.PdfXConformanceException;
import com.itextpdf.text.pdf.collection.PdfCollection;
import com.itextpdf.text.pdf.draw.DrawInterface;
import com.itextpdf.text.pdf.interfaces.IAccessibleElement;
import com.itextpdf.text.pdf.internal.PdfAnnotationsImp;
import com.itextpdf.text.pdf.internal.PdfVersionImp;
import com.itextpdf.text.pdf.internal.PdfViewerPreferencesImp;
import java.io.IOException;
import java.io.Serializable;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.Stack;
import java.util.TreeMap;

public class PdfDocument
extends Document {
    protected static final DecimalFormat SIXTEEN_DIGITS = new DecimalFormat("0000000000000000");
    static final String hangingPunctuation = ".,;:'";
    protected PdfDictionary additionalActions;
    protected int alignment = 0;
    protected PdfAction anchorAction = null;
    PdfAnnotationsImp annotationsImp;
    private PdfBody body;
    protected HashMap<String, PdfRectangle> boxSize = new HashMap();
    protected PdfCollection collection;
    protected float currentHeight = 0.0f;
    protected PdfOutline currentOutline;
    protected HashMap<String, PdfObject> documentFileAttachment = new HashMap();
    protected HashMap<String, PdfObject> documentLevelJS = new HashMap();
    private HashMap<AccessibleElementId, AccessibleElementId> elementsParents = new HashMap();
    private TempFileCache externalCache;
    private HashMap<AccessibleElementId, TempFileCache.ObjectPosition> externallyStoredStructElements = new HashMap();
    protected boolean firstPageEvent = true;
    private ArrayList<Element> floatingElements = new ArrayList();
    protected PdfContentByte graphics;
    protected float imageEnd = -1.0f;
    protected Image imageWait = null;
    protected Indentation indentation = new Indentation();
    protected PdfInfo info = new PdfInfo();
    protected boolean isSectionTitle = false;
    private boolean isToUseExternalCache = false;
    int jsCounter;
    protected PdfString language;
    protected int lastElementType = -1;
    protected float leading = 0.0f;
    private Stack<Float> leadingStack = new Stack();
    protected PdfLine line = null;
    protected ArrayList<PdfLine> lines = new ArrayList();
    protected TreeMap<String, Destination> localDestinations = new TreeMap();
    protected HashMap<Object, Integer> markPoints = new HashMap();
    protected float nextMarginBottom;
    protected float nextMarginLeft;
    protected float nextMarginRight;
    protected float nextMarginTop;
    protected Rectangle nextPageSize = null;
    protected PdfAction openActionAction;
    protected String openActionName;
    protected boolean openMCDocument = false;
    protected PdfDictionary pageAA = null;
    private boolean pageEmpty = true;
    protected PdfPageLabels pageLabels;
    protected PageResources pageResources;
    protected PdfOutline rootOutline;
    protected boolean strictImageSequence = false;
    private HashMap<AccessibleElementId, PdfStructureElement> structElements = new HashMap();
    protected HashMap<Object, int[]> structParentIndices = new HashMap();
    protected TabSettings tabSettings;
    protected PdfContentByte text;
    protected int textEmptySize;
    protected HashMap<String, PdfRectangle> thisBoxSize = new HashMap();
    protected PdfViewerPreferencesImp viewerPreferences = new PdfViewerPreferencesImp();
    protected PdfWriter writer;

    public PdfDocument() {
        this.addProducer();
        this.addCreationDate();
    }

    private void addDiv(PdfDiv pdfDiv) {
        if (this.floatingElements == null) {
            this.floatingElements = new ArrayList();
        }
        this.floatingElements.add(pdfDiv);
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    private void flushFloatingElements() {
        if (this.floatingElements == null) return;
        if (this.floatingElements.isEmpty() != false) return;
        object = this.floatingElements;
        this.floatingElements = null;
        floatLayout = new FloatLayout((List<Element>)object, false);
        n2 = 0;
        do lbl-1000: // 2 sources:
        {
            this.indentLeft();
            floatLayout.setSimpleColumn(this.indentLeft(), this.indentBottom(), this.indentRight(), this.indentTop() - this.currentHeight);
            object = PdfDocument.isTagged(this.writer) != false ? this.text : this.writer.getDirectContent();
            if ((floatLayout.layout((PdfContentByte)object, false) & 1) == 0) ** break block6
            if (PdfDocument.isTagged(this.writer)) {
                this.text.setTextMatrix(this.indentLeft(), floatLayout.getYLine());
            } else {
                this.text.moveText(0.0f, floatLayout.getYLine() - this.indentTop() + this.currentHeight);
            }
            this.currentHeight = this.indentTop() - floatLayout.getYLine();
            return;
            break;
        } while (true);
        catch (Exception exception) {
            return;
        }
        {
            
            n2 = this.indentTop() - this.currentHeight != floatLayout.getYLine() && !this.isPageEmpty() ? 0 : ++n2;
            if (n2 == 2) {
                return;
            }
            this.newPage();
            ** while (true)
        }
    }

    private PdfLine getLastLine() {
        if (this.lines.size() > 0) {
            return this.lines.get(this.lines.size() - 1);
        }
        return null;
    }

    private static boolean isTagged(PdfWriter pdfWriter) {
        if (pdfWriter != null && pdfWriter.isTagged()) {
            return true;
        }
        return false;
    }

    /*
     * Enabled aggressive block sorting
     */
    protected void add(Image image) {
        float f2;
        if (image.hasAbsoluteY()) {
            this.graphics.addImage(image);
            this.pageEmpty = false;
            return;
        }
        if (this.currentHeight != 0.0f && this.indentTop() - this.currentHeight - image.getScaledHeight() < this.indentBottom()) {
            if (!this.strictImageSequence && this.imageWait == null) {
                this.imageWait = image;
                return;
            }
            this.newPage();
            if (this.currentHeight != 0.0f && this.indentTop() - this.currentHeight - image.getScaledHeight() < this.indentBottom()) {
                this.imageWait = image;
                return;
            }
        }
        this.pageEmpty = false;
        if (image == this.imageWait) {
            this.imageWait = null;
        }
        boolean bl2 = (image.getAlignment() & 4) == 4 && (image.getAlignment() & 1) != 1;
        boolean bl3 = (image.getAlignment() & 8) == 8;
        float f3 = f2 = this.leading / 2.0f;
        if (bl2) {
            f3 = f2 + this.leading;
        }
        float f4 = this.indentTop();
        float f5 = this.currentHeight;
        float f6 = image.getScaledHeight();
        float[] arrf = image.matrix();
        f2 = this.indentLeft() - arrf[4];
        if ((image.getAlignment() & 2) == 2) {
            f2 = this.indentRight() - image.getScaledWidth() - arrf[4];
        }
        if ((image.getAlignment() & 1) == 1) {
            f2 = this.indentLeft() + (this.indentRight() - this.indentLeft() - image.getScaledWidth()) / 2.0f - arrf[4];
        }
        if (image.hasAbsoluteX()) {
            f2 = image.getAbsoluteX();
        }
        if (bl2) {
            if (this.imageEnd < 0.0f || this.imageEnd < this.currentHeight + image.getScaledHeight() + f3) {
                this.imageEnd = this.currentHeight + image.getScaledHeight() + f3;
            }
            if ((image.getAlignment() & 2) == 2) {
                Indentation indentation = this.indentation;
                indentation.imageIndentRight += image.getScaledWidth() + image.getIndentationLeft();
            } else {
                Indentation indentation = this.indentation;
                indentation.imageIndentLeft += image.getScaledWidth() + image.getIndentationRight();
            }
        } else if ((image.getAlignment() & 2) == 2) {
            f2 -= image.getIndentationRight();
        } else {
            float f7 = (image.getAlignment() & 1) == 1 ? image.getIndentationLeft() - image.getIndentationRight() : image.getIndentationLeft();
            f2 += f7;
        }
        this.graphics.addImage(image, arrf[0], arrf[1], arrf[2], arrf[3], f2, f4 - f5 - f6 - f3 - arrf[5]);
        if (!bl2 && !bl3) {
            this.currentHeight += image.getScaledHeight() + f3;
            this.flushLines();
            this.text.moveText(0.0f, - image.getScaledHeight() + f3);
            this.newLine();
        }
    }

    /*
     * Exception decompiling
     */
    @Override
    public boolean add(Element var1_1) {
        // This method has failed to decompile.  When submitting a bug report, please provide this stack trace, and (if you hold appropriate legal rights) the relevant class file.
        // org.benf.cfr.reader.util.ConfusedCFRException: First case is not immediately after switch.
        // org.benf.cfr.reader.bytecode.analysis.opgraph.op3rewriters.SwitchReplacer.examineSwitchContiguity(SwitchReplacer.java:366)
        // org.benf.cfr.reader.bytecode.analysis.opgraph.op3rewriters.SwitchReplacer.replaceRawSwitches(SwitchReplacer.java:65)
        // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisInner(CodeAnalyser.java:416)
        // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisOrWrapFail(CodeAnalyser.java:196)
        // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysis(CodeAnalyser.java:141)
        // org.benf.cfr.reader.entities.attributes.AttributeCode.analyse(AttributeCode.java:95)
        // org.benf.cfr.reader.entities.Method.analyse(Method.java:372)
        // org.benf.cfr.reader.entities.ClassFile.analyseMid(ClassFile.java:867)
        // org.benf.cfr.reader.entities.ClassFile.analyseTop(ClassFile.java:768)
        // org.benf.cfr.reader.Main.doJar(Main.java:141)
        // org.benf.cfr.reader.Main.main(Main.java:242)
        throw new IllegalStateException("Decompilation failed");
    }

    void addAdditionalAction(PdfName pdfName, PdfAction pdfAction) {
        if (this.additionalActions == null) {
            this.additionalActions = new PdfDictionary();
        }
        if (pdfAction == null) {
            this.additionalActions.remove(pdfName);
        } else {
            this.additionalActions.put(pdfName, pdfAction);
        }
        if (this.additionalActions.size() == 0) {
            this.additionalActions = null;
        }
    }

    void addAnnotation(PdfAnnotation pdfAnnotation) {
        this.pageEmpty = false;
        this.annotationsImp.addAnnotation(pdfAnnotation);
    }

    void addCalculationOrder(PdfFormField pdfFormField) {
        this.annotationsImp.addCalculationOrder(pdfFormField);
    }

    void addFileAttachment(String object, PdfFileSpecification pdfFileSpecification) {
        CharSequence charSequence = object;
        if (object == null) {
            object = (PdfString)pdfFileSpecification.get(PdfName.DESC);
            charSequence = object == null ? "" : PdfEncodings.convertToString(object.getBytes(), null);
        }
        pdfFileSpecification.addDescription((String)charSequence, true);
        object = charSequence;
        if (charSequence.length() == 0) {
            object = "Unnamed";
        }
        charSequence = PdfEncodings.convertToString(new PdfString((String)object, "UnicodeBig").getBytes(), null);
        int n2 = 0;
        while (this.documentFileAttachment.containsKey(charSequence)) {
            charSequence = new StringBuilder();
            charSequence.append((String)object);
            charSequence.append(" ");
            charSequence.append(++n2);
            charSequence = PdfEncodings.convertToString(new PdfString(charSequence.toString(), "UnicodeBig").getBytes(), null);
        }
        this.documentFileAttachment.put((String)charSequence, pdfFileSpecification.getReference());
    }

    void addJavaScript(PdfAction pdfAction) {
        if (pdfAction.get(PdfName.JS) != null) {
            try {
                HashMap<String, PdfObject> hashMap = this.documentLevelJS;
                DecimalFormat decimalFormat = SIXTEEN_DIGITS;
                int n2 = this.jsCounter;
                this.jsCounter = n2 + 1;
                hashMap.put(decimalFormat.format(n2), this.writer.addToBody(pdfAction).getIndirectReference());
                return;
            }
            catch (IOException iOException) {
                throw new ExceptionConverter(iOException);
            }
        }
        throw new RuntimeException(MessageLocalization.getComposedMessage("only.javascript.actions.are.allowed", new Object[0]));
    }

    void addJavaScript(String string2, PdfAction pdfAction) {
        if (pdfAction.get(PdfName.JS) != null) {
            try {
                this.documentLevelJS.put(string2, this.writer.addToBody(pdfAction).getIndirectReference());
                return;
            }
            catch (IOException iOException) {
                throw new ExceptionConverter(iOException);
            }
        }
        throw new RuntimeException(MessageLocalization.getComposedMessage("only.javascript.actions.are.allowed", new Object[0]));
    }

    void addOutline(PdfOutline pdfOutline, String string2) {
        this.localDestination(string2, pdfOutline.getPdfDestination());
    }

    void addPTable(PdfPTable pdfPTable) {
        Object object = PdfDocument.isTagged(this.writer) ? this.text : this.writer.getDirectContent();
        object = new ColumnText((PdfContentByte)object);
        object.setRunDirection(pdfPTable.getRunDirection());
        if (pdfPTable.getKeepTogether() && !this.fitsPage(pdfPTable, 0.0f) && this.currentHeight > 0.0f) {
            this.newPage();
            if (PdfDocument.isTagged(this.writer)) {
                object.setCanvas(this.text);
            }
        }
        if (this.currentHeight == 0.0f) {
            object.setAdjustFirstLine(false);
        }
        object.addElement(pdfPTable);
        boolean bl2 = pdfPTable.isHeadersInEvent();
        pdfPTable.setHeadersInEvent(true);
        int n2 = 0;
        do {
            object.setSimpleColumn(this.indentLeft(), this.indentBottom(), this.indentRight(), this.indentTop() - this.currentHeight);
            if ((object.go() & 1) != 0) {
                if (PdfDocument.isTagged(this.writer)) {
                    this.text.setTextMatrix(this.indentLeft(), object.getYLine());
                } else {
                    this.text.moveText(0.0f, object.getYLine() - this.indentTop() + this.currentHeight);
                }
                this.currentHeight = this.indentTop() - object.getYLine();
                pdfPTable.setHeadersInEvent(bl2);
                return;
            }
            int n3 = this.indentTop() - this.currentHeight == object.getYLine() ? n2 + 1 : 0;
            if (n3 == 3) break;
            this.currentHeight = this.indentTop() - object.getYLine();
            this.newPage();
            n2 = n3;
            if (!PdfDocument.isTagged(this.writer)) continue;
            object.setCanvas(this.text);
            n2 = n3;
        } while (true);
        throw new DocumentException(MessageLocalization.getComposedMessage("infinite.table.loop", new Object[0]));
    }

    protected void addSpacing(float f2, float f3, Font font) {
        this.addSpacing(f2, f3, font, false);
    }

    protected void addSpacing(float f2, float f3, Font font, boolean bl2) {
        Chunk chunk;
        if (f2 == 0.0f) {
            return;
        }
        if (this.pageEmpty) {
            return;
        }
        float f4 = bl2 ? f2 : this.calculateLineHeight();
        if (this.currentHeight + f4 > this.indentTop() - this.indentBottom()) {
            this.newPage();
            return;
        }
        this.leading = f2;
        this.carriageReturn();
        if (font.isUnderlined() || font.isStrikethru()) {
            font = new Font(font);
            font.setStyle(font.getStyle() & -5 & -9);
        }
        Chunk chunk2 = chunk = new Chunk(" ", font);
        if (bl2) {
            chunk2 = chunk;
            if (this.pageEmpty) {
                chunk2 = new Chunk("", font);
            }
        }
        chunk2.process(this);
        this.carriageReturn();
        this.leading = f3;
    }

    void addViewerPreference(PdfName pdfName, PdfObject pdfObject) {
        this.viewerPreferences.addViewerPreference(pdfName, pdfObject);
    }

    public void addWriter(PdfWriter pdfWriter) {
        if (this.writer == null) {
            this.writer = pdfWriter;
            this.annotationsImp = new PdfAnnotationsImp(pdfWriter);
            return;
        }
        throw new DocumentException(MessageLocalization.getComposedMessage("you.can.only.add.a.writer.to.a.pdfdocument.once", new Object[0]));
    }

    protected float calculateLineHeight() {
        float f2;
        float f3 = f2 = this.line.height();
        if (f2 != this.leading) {
            f3 = f2 + this.leading;
        }
        return f3;
    }

    void calculateOutlineCount() {
        if (this.rootOutline.getKids().size() == 0) {
            return;
        }
        this.traverseOutlineCount(this.rootOutline);
    }

    protected void carriageReturn() {
        if (this.lines == null) {
            this.lines = new ArrayList();
        }
        if (this.line != null && this.line.size() > 0) {
            if (this.currentHeight + this.calculateLineHeight() > this.indentTop() - this.indentBottom() && this.currentHeight != 0.0f) {
                PdfLine pdfLine = this.line;
                this.line = null;
                this.newPage();
                this.line = pdfLine;
                pdfLine.left = this.indentLeft();
            }
            this.currentHeight += this.line.height();
            this.lines.add(this.line);
            this.pageEmpty = false;
        }
        if (this.imageEnd > -1.0f && this.currentHeight > this.imageEnd) {
            this.imageEnd = -1.0f;
            this.indentation.imageIndentRight = 0.0f;
            this.indentation.imageIndentLeft = 0.0f;
        }
        this.line = new PdfLine(this.indentLeft(), this.indentRight(), this.alignment, this.leading);
    }

    public void clearTextWrap() {
        float f2;
        float f3 = f2 = this.imageEnd - this.currentHeight;
        if (this.line != null) {
            f3 = f2 + this.line.height();
        }
        if (this.imageEnd > -1.0f && f3 > 0.0f) {
            this.carriageReturn();
            this.currentHeight += f3;
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @Override
    public void close() {
        if (this.close) {
            return;
        }
        try {
            if (PdfDocument.isTagged(this.writer)) {
                int n2;
                this.flushFloatingElements();
                this.flushLines();
                this.writer.flushAcroFields();
                this.writer.flushTaggedObjects();
                if (this.isPageEmpty() && (n2 = this.writer.pageReferences.size()) > 0 && this.writer.currentPageNumber == n2) {
                    this.writer.pageReferences.remove(n2 - 1);
                }
            } else {
                this.writer.flushAcroFields();
            }
            if (this.imageWait != null) {
                this.newPage();
            }
            this.endPage();
            if (PdfDocument.isTagged(this.writer)) {
                this.writer.getDirectContent().closeMCBlock(this);
            }
            if (!this.annotationsImp.hasUnusedAnnotations()) {
                PdfPageEvent pdfPageEvent = this.writer.getPageEvent();
                if (pdfPageEvent != null) {
                    pdfPageEvent.onCloseDocument(this.writer, this);
                }
                super.close();
                this.writer.addLocalDestinations(this.localDestinations);
                this.calculateOutlineCount();
                this.writeOutlines();
                this.writer.close();
                return;
            }
            throw new RuntimeException(MessageLocalization.getComposedMessage("not.all.annotations.could.be.added.to.the.document.the.document.doesn.t.have.enough.pages", new Object[0]));
        }
        catch (Exception exception) {
            throw ExceptionConverter.convertException(exception);
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    protected ArrayList<IAccessibleElement> endPage() {
        Serializable serializable;
        Object var5_2;
        block20 : {
            boolean bl2 = this.isPageEmpty();
            var5_2 = null;
            if (bl2) {
                return null;
            }
            try {
                this.flushFloatingElements();
                this.lastElementType = -1;
                serializable = this.writer.getPageEvent();
                if (serializable == null) break block20;
                serializable.onEndPage(this.writer, this);
            }
            catch (DocumentException documentException) {
                throw new ExceptionConverter(documentException);
            }
        }
        try {
            Object object;
            this.flushLines();
            int n2 = this.pageSize.getRotation();
            if (this.writer.isPdfIso()) {
                if (this.thisBoxSize.containsKey("art") && this.thisBoxSize.containsKey("trim")) {
                    throw new PdfXConformanceException(MessageLocalization.getComposedMessage("only.one.of.artbox.or.trimbox.can.exist.in.the.page", new Object[0]));
                }
                if (!this.thisBoxSize.containsKey("art") && !this.thisBoxSize.containsKey("trim")) {
                    if (this.thisBoxSize.containsKey("crop")) {
                        serializable = this.thisBoxSize;
                        object = this.thisBoxSize.get("crop");
                    } else {
                        serializable = this.thisBoxSize;
                        object = new PdfRectangle(this.pageSize, this.pageSize.getRotation());
                    }
                    serializable.put((String)"trim", (PdfRectangle)object);
                }
            }
            this.pageResources.addDefaultColorDiff(this.writer.getDefaultColorspace());
            if (this.writer.isRgbTransparencyBlending()) {
                serializable = new PdfDictionary();
                serializable.put(PdfName.CS, PdfName.DEVICERGB);
                this.pageResources.addDefaultColorDiff((PdfDictionary)serializable);
            }
            serializable = this.pageResources.getResources();
            PdfPage pdfPage = new PdfPage(new PdfRectangle(this.pageSize, n2), this.thisBoxSize, (PdfDictionary)serializable, n2);
            if (PdfDocument.isTagged(this.writer)) {
                serializable = PdfName.TABS;
                object = PdfName.S;
            } else {
                serializable = PdfName.TABS;
                object = this.writer.getTabs();
            }
            pdfPage.put((PdfName)serializable, (PdfObject)object);
            pdfPage.putAll(this.writer.getPageDictEntries());
            this.writer.resetPageDictEntries();
            if (this.pageAA != null) {
                pdfPage.put(PdfName.AA, this.writer.addToBody(this.pageAA).getIndirectReference());
                this.pageAA = null;
            }
            if (this.annotationsImp.hasUnusedAnnotations() && (serializable = this.annotationsImp.rotateAnnotations(this.writer, this.pageSize)).size() != 0) {
                pdfPage.put(PdfName.ANNOTS, (PdfObject)serializable);
            }
            if (PdfDocument.isTagged(this.writer)) {
                pdfPage.put(PdfName.STRUCTPARENTS, new PdfNumber(this.getStructParentIndex(this.writer.getCurrentPage())));
            }
            if (this.text.size() <= this.textEmptySize && !PdfDocument.isTagged(this.writer)) {
                this.text = null;
            } else {
                this.text.endText();
            }
            serializable = PdfDocument.isTagged(this.writer) ? this.writer.getDirectContent().saveMCBlocks() : null;
            PdfWriter pdfWriter = this.writer;
            PdfContentByte pdfContentByte = this.writer.getDirectContentUnder();
            PdfContentByte pdfContentByte2 = this.graphics;
            object = var5_2;
            if (!PdfDocument.isTagged(this.writer)) {
                object = this.text;
            }
            pdfWriter.add(pdfPage, new PdfContents(pdfContentByte, pdfContentByte2, (PdfContentByte)object, this.writer.getDirectContent(), this.pageSize));
            this.annotationsImp.resetAnnotations();
            this.writer.resetContent();
            return serializable;
        }
        catch (IOException iOException) {
            throw new ExceptionConverter(iOException);
        }
        catch (DocumentException documentException) {
            throw new ExceptionConverter(documentException);
        }
    }

    protected void ensureNewLine() {
        try {
            if (this.lastElementType == 11 || this.lastElementType == 10) {
                this.newLine();
                this.flushLines();
            }
            return;
        }
        catch (DocumentException documentException) {
            throw new ExceptionConverter(documentException);
        }
    }

    boolean fitsPage(PdfPTable pdfPTable, float f2) {
        if (!pdfPTable.isLockedWidth()) {
            pdfPTable.setTotalWidth((this.indentRight() - this.indentLeft()) * pdfPTable.getWidthPercentage() / 100.0f);
        }
        this.ensureNewLine();
        float f3 = pdfPTable.isSkipFirstHeader() ? pdfPTable.getTotalHeight() - pdfPTable.getHeaderHeight() : pdfPTable.getTotalHeight();
        float f4 = Float.valueOf(f3).floatValue();
        float f5 = this.currentHeight;
        f3 = 0.0f;
        if (f5 > 0.0f) {
            f3 = pdfPTable.spacingBefore();
        }
        if (f4 + f3 <= this.indentTop() - this.currentHeight - this.indentBottom() - f2) {
            return true;
        }
        return false;
    }

    protected float flushLines() {
        if (this.lines == null) {
            return 0.0f;
        }
        if (this.line != null && this.line.size() > 0) {
            this.lines.add(this.line);
            this.line = new PdfLine(this.indentLeft(), this.indentRight(), this.alignment, this.leading);
        }
        if (this.lines.isEmpty()) {
            return 0.0f;
        }
        Object[] arrobject = new Object[2];
        arrobject[1] = new Float(0.0f);
        Iterator<PdfLine> iterator = this.lines.iterator();
        PdfFont pdfFont = null;
        float f2 = 0.0f;
        while (iterator.hasNext()) {
            PdfLine pdfLine = iterator.next();
            float f3 = pdfLine.indentLeft() - this.indentLeft() + this.indentation.indentLeft + this.indentation.listIndentLeft + this.indentation.sectionIndentLeft;
            this.text.moveText(f3, - pdfLine.height());
            pdfLine.flush();
            if (pdfLine.listSymbol() != null) {
                ListLabel listLabel;
                Chunk chunk = pdfLine.listSymbol();
                if (PdfDocument.isTagged(this.writer)) {
                    listLabel = pdfLine.listItem().getListLabel();
                    this.graphics.openMCBlock(listLabel);
                    chunk = new Chunk(chunk);
                    chunk.setRole(null);
                } else {
                    listLabel = null;
                }
                ColumnText.showTextAligned(this.graphics, 0, new Phrase(chunk), this.text.getXTLM() - pdfLine.listIndent(), this.text.getYTLM(), 0.0f);
                if (listLabel != null) {
                    this.graphics.closeMCBlock(listLabel);
                }
            }
            arrobject[0] = pdfFont;
            if (PdfDocument.isTagged(this.writer) && pdfLine.listItem() != null) {
                this.text.openMCBlock(pdfLine.listItem().getListBody());
            }
            this.writeLineToContent(pdfLine, this.text, this.graphics, arrobject, this.writer.getSpaceCharRatio());
            pdfFont = (PdfFont)arrobject[0];
            f2 += pdfLine.height();
            this.text.moveText(- f3, 0.0f);
        }
        this.lines = new ArrayList();
        return f2;
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    protected void flushStructureElementsOnNewPage() {
        if (!this.isToUseExternalCache) {
            return;
        }
        Iterator<Map.Entry<AccessibleElementId, PdfStructureElement>> iterator = this.structElements.entrySet().iterator();
        while (iterator.hasNext()) {
            Map.Entry<AccessibleElementId, PdfStructureElement> entry = iterator.next();
            if (entry.getValue().getStructureType().equals(PdfName.DOCUMENT)) continue;
            try {
                PdfStructureElement pdfStructureElement = entry.getValue();
                PdfDictionary pdfDictionary = pdfStructureElement.getParent();
                Object object = null;
                if (pdfDictionary instanceof PdfStructureElement && (object = (PdfStructureElement)pdfDictionary) != null) {
                    this.elementsParents.put(entry.getKey(), object.getElementId());
                }
                object = this.externalCache.put(pdfStructureElement);
                this.externallyStoredStructElements.put(entry.getKey(), (TempFileCache.ObjectPosition)object);
                iterator.remove();
                continue;
            }
            catch (IOException iOException) {}
            throw new ExceptionConverter(iOException);
        }
        return;
    }

    PdfAcroForm getAcroForm() {
        return this.annotationsImp.getAcroForm();
    }

    Rectangle getBoxSize(String object) {
        if ((object = this.thisBoxSize.get(object)) != null) {
            return object.getRectangle();
        }
        return null;
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    PdfCatalog getCatalog(PdfIndirectReference pdfObject) {
        PdfCatalog pdfCatalog;
        block13 : {
            void var1_3;
            block12 : {
                block11 : {
                    pdfCatalog = new PdfCatalog((PdfIndirectReference)pdfObject, this.writer);
                    if (this.rootOutline.getKids().size() > 0) {
                        pdfCatalog.put(PdfName.PAGEMODE, PdfName.USEOUTLINES);
                        pdfCatalog.put(PdfName.OUTLINES, this.rootOutline.indirectReference());
                    }
                    this.writer.getPdfVersion().addToCatalog(pdfCatalog);
                    this.viewerPreferences.addToCatalog(pdfCatalog);
                    if (this.pageLabels != null) {
                        pdfCatalog.put(PdfName.PAGELABELS, this.pageLabels.getDictionary(this.writer));
                    }
                    pdfCatalog.addNames(this.localDestinations, this.getDocumentLevelJS(), this.documentFileAttachment, this.writer);
                    if (this.openActionName == null) break block11;
                    PdfAction pdfAction = this.getLocalGotoAction(this.openActionName);
                    break block12;
                }
                if (this.openActionAction == null) break block13;
                PdfAction pdfAction = this.openActionAction;
            }
            pdfCatalog.setOpenAction((PdfAction)var1_3);
        }
        if (this.additionalActions != null) {
            pdfCatalog.setAdditionalActions(this.additionalActions);
        }
        if (this.collection != null) {
            pdfCatalog.put(PdfName.COLLECTION, this.collection);
        }
        if (this.annotationsImp.hasValidAcroForm()) {
            try {
                pdfCatalog.put(PdfName.ACROFORM, this.writer.addToBody(this.annotationsImp.getAcroForm()).getIndirectReference());
            }
            catch (IOException iOException) {
                throw new ExceptionConverter(iOException);
            }
        }
        if (this.language != null) {
            pdfCatalog.put(PdfName.LANG, this.language);
        }
        return pdfCatalog;
    }

    HashMap<String, PdfObject> getDocumentFileAttachment() {
        return this.documentFileAttachment;
    }

    HashMap<String, PdfObject> getDocumentLevelJS() {
        return this.documentLevelJS;
    }

    PdfInfo getInfo() {
        return this.info;
    }

    public float getLeading() {
        return this.leading;
    }

    PdfAction getLocalGotoAction(String string2) {
        Object object = this.localDestinations.get(string2);
        Destination destination = object;
        if (object == null) {
            destination = new Destination();
        }
        if (destination.action == null) {
            if (destination.reference == null) {
                destination.reference = this.writer.getPdfIndirectReference();
            }
            destination.action = object = new PdfAction(destination.reference);
            this.localDestinations.put(string2, destination);
            return object;
        }
        return destination.action;
    }

    public int getNextMarkPoint(Object object) {
        int[] arrn;
        int[] arrn2 = arrn = this.structParentIndices.get(object);
        if (arrn == null) {
            arrn2 = new int[]{this.structParentIndices.size(), 0};
            this.structParentIndices.put(object, arrn2);
        }
        int n2 = arrn2[1];
        arrn2[1] = arrn2[1] + 1;
        return n2;
    }

    public PdfPageLabels getPageLabels() {
        return this.pageLabels;
    }

    PageResources getPageResources() {
        return this.pageResources;
    }

    public PdfOutline getRootOutline() {
        return this.rootOutline;
    }

    protected PdfStructureElement getStructElement(AccessibleElementId accessibleElementId) {
        return this.getStructElement(accessibleElementId, true);
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    protected PdfStructureElement getStructElement(AccessibleElementId accessibleElementId, boolean bl2) {
        PdfStructureElement pdfStructureElement;
        PdfStructureElement pdfStructureElement2 = pdfStructureElement = this.structElements.get(accessibleElementId);
        if (!this.isToUseExternalCache) return pdfStructureElement2;
        pdfStructureElement2 = pdfStructureElement;
        if (pdfStructureElement != null) return pdfStructureElement2;
        TempFileCache.ObjectPosition objectPosition = this.externallyStoredStructElements.get(accessibleElementId);
        pdfStructureElement2 = pdfStructureElement;
        if (objectPosition == null) return pdfStructureElement2;
        pdfStructureElement = (PdfStructureElement)this.externalCache.get(objectPosition);
        pdfStructureElement.setStructureTreeRoot(this.writer.getStructureTreeRoot());
        pdfStructureElement.setStructureElementParent(this.getStructElement(this.elementsParents.get(pdfStructureElement.getElementId()), bl2));
        pdfStructureElement2 = pdfStructureElement;
        if (!bl2) return pdfStructureElement2;
        try {
            this.externallyStoredStructElements.remove(accessibleElementId);
            this.structElements.put(accessibleElementId, pdfStructureElement);
            return pdfStructureElement;
        }
        catch (ClassNotFoundException classNotFoundException) {
            throw new ExceptionConverter(classNotFoundException);
        }
        catch (IOException iOException) {
            throw new ExceptionConverter(iOException);
        }
    }

    public Set<AccessibleElementId> getStructElements() {
        HashSet<AccessibleElementId> hashSet = new HashSet<AccessibleElementId>();
        hashSet.addAll(this.externallyStoredStructElements.keySet());
        hashSet.addAll(this.structElements.keySet());
        return hashSet;
    }

    public int getStructParentIndex(Object object) {
        int[] arrn;
        int[] arrn2 = arrn = this.structParentIndices.get(object);
        if (arrn == null) {
            arrn2 = new int[]{this.structParentIndices.size(), 0};
            this.structParentIndices.put(object, arrn2);
        }
        return arrn2[0];
    }

    public int[] getStructParentIndexAndNextMarkPoint(Object object) {
        int[] arrn;
        int[] arrn2 = arrn = this.structParentIndices.get(object);
        if (arrn == null) {
            arrn2 = new int[]{this.structParentIndices.size(), 0};
            this.structParentIndices.put(object, arrn2);
        }
        int n2 = arrn2[1];
        arrn2[1] = arrn2[1] + 1;
        return new int[]{arrn2[0], n2};
    }

    public TabSettings getTabSettings() {
        return this.tabSettings;
    }

    public float getVerticalPosition(boolean bl2) {
        if (bl2) {
            this.ensureNewLine();
        }
        return this.top() - this.currentHeight - this.indentation.indentTop;
    }

    float indentBottom() {
        return this.bottom(this.indentation.indentBottom);
    }

    protected float indentLeft() {
        return this.left(this.indentation.indentLeft + this.indentation.listIndentLeft + this.indentation.imageIndentLeft + this.indentation.sectionIndentLeft);
    }

    protected float indentRight() {
        return this.right(this.indentation.indentRight + this.indentation.sectionIndentRight + this.indentation.imageIndentRight);
    }

    protected float indentTop() {
        return this.top(this.indentation.indentTop);
    }

    protected void initPage() {
        ++this.pageN;
        this.pageResources = new PageResources();
        if (PdfDocument.isTagged(this.writer)) {
            this.writer.getDirectContent().duplicatedFrom = this.graphics = this.writer.getDirectContentUnder().getDuplicate();
        } else {
            this.graphics = new PdfContentByte(this.writer);
        }
        this.setNewPageSizeAndMargins();
        this.imageEnd = -1.0f;
        this.indentation.imageIndentRight = 0.0f;
        this.indentation.imageIndentLeft = 0.0f;
        this.indentation.indentBottom = 0.0f;
        this.indentation.indentTop = 0.0f;
        this.currentHeight = 0.0f;
        this.thisBoxSize = new HashMap<String, PdfRectangle>(this.boxSize);
        if (this.pageSize.getBackgroundColor() != null || this.pageSize.hasBorders() || this.pageSize.getBorderColor() != null) {
            this.add(this.pageSize);
        }
        float f2 = this.leading;
        int n2 = this.alignment;
        this.pageEmpty = true;
        try {
            if (this.imageWait != null) {
                this.add(this.imageWait);
                this.imageWait = null;
            }
            this.leading = f2;
            this.alignment = n2;
            this.carriageReturn();
            PdfPageEvent pdfPageEvent = this.writer.getPageEvent();
            if (pdfPageEvent != null) {
                if (this.firstPageEvent) {
                    pdfPageEvent.onOpenDocument(this.writer, this);
                }
                pdfPageEvent.onStartPage(this.writer, this);
            }
            this.firstPageEvent = false;
            return;
        }
        catch (Exception exception) {
            throw new ExceptionConverter(exception);
        }
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    boolean isPageEmpty() {
        boolean bl2 = PdfDocument.isTagged(this.writer);
        boolean bl3 = true;
        boolean bl4 = true;
        if (bl2) {
            bl2 = bl4;
            if (this.writer == null) return bl2;
            if (this.writer.getDirectContent().size(false) != 0) return false;
            if (this.writer.getDirectContentUnder().size(false) != 0) return false;
            if (this.text.size(false) - this.textEmptySize != 0) return false;
            bl2 = bl4;
            if (this.pageEmpty) return bl2;
            if (!this.writer.isPaused()) return false;
            return true;
        }
        bl2 = bl3;
        if (this.writer == null) return bl2;
        if (this.writer.getDirectContent().size() != 0) return false;
        if (this.writer.getDirectContentUnder().size() != 0) return false;
        bl2 = bl3;
        if (this.pageEmpty) return bl2;
        if (!this.writer.isPaused()) return false;
        return true;
    }

    boolean isStrictImageSequence() {
        return this.strictImageSequence;
    }

    boolean localDestination(String string2, PdfDestination pdfDestination) {
        Destination destination;
        Destination destination2 = destination = this.localDestinations.get(string2);
        if (destination == null) {
            destination2 = new Destination();
        }
        if (destination2.destination != null) {
            return false;
        }
        destination2.destination = pdfDestination;
        this.localDestinations.put(string2, destination2);
        if (!pdfDestination.hasPage()) {
            pdfDestination.addPage(this.writer.getCurrentPage());
        }
        return true;
    }

    void localGoto(String object, float f2, float f3, float f4, float f5) {
        object = this.getLocalGotoAction((String)object);
        this.annotationsImp.addPlainAnnotation(this.writer.createAnnotation(f2, f3, f4, f5, (PdfAction)object, null));
    }

    protected void newLine() {
        this.lastElementType = -1;
        this.carriageReturn();
        if (this.lines != null && !this.lines.isEmpty()) {
            this.lines.add(this.line);
            this.currentHeight += this.line.height();
        }
        this.line = new PdfLine(this.indentLeft(), this.indentRight(), this.alignment, this.leading);
    }

    @Override
    public boolean newPage() {
        if (this.isPageEmpty()) {
            this.setNewPageSizeAndMargins();
            return false;
        }
        if (this.open && !this.close) {
            ArrayList<IAccessibleElement> arrayList = this.endPage();
            super.newPage();
            this.indentation.imageIndentLeft = 0.0f;
            this.indentation.imageIndentRight = 0.0f;
            try {
                if (PdfDocument.isTagged(this.writer)) {
                    this.flushStructureElementsOnNewPage();
                    this.writer.getDirectContentUnder().restoreMCBlocks(arrayList);
                }
                this.initPage();
                if (this.body != null && this.body.getBackgroundColor() != null) {
                    this.graphics.rectangle(this.body);
                }
                return true;
            }
            catch (DocumentException documentException) {
                throw new ExceptionConverter(documentException);
            }
        }
        throw new RuntimeException(MessageLocalization.getComposedMessage("the.document.is.not.open", new Object[0]));
    }

    @Override
    public void open() {
        if (!this.open) {
            super.open();
            this.writer.open();
            this.currentOutline = this.rootOutline = new PdfOutline(this.writer);
        }
        try {
            if (PdfDocument.isTagged(this.writer)) {
                this.openMCDocument = true;
            }
            this.initPage();
            return;
        }
        catch (DocumentException documentException) {
            throw new ExceptionConverter(documentException);
        }
    }

    void outlineTree(PdfOutline pdfOutline) {
        int n2;
        pdfOutline.setIndirectReference(this.writer.getPdfIndirectReference());
        if (pdfOutline.parent() != null) {
            pdfOutline.put(PdfName.PARENT, pdfOutline.parent().indirectReference());
        }
        ArrayList<PdfOutline> arrayList = pdfOutline.getKids();
        int n3 = arrayList.size();
        int n4 = 0;
        for (n2 = 0; n2 < n3; ++n2) {
            this.outlineTree(arrayList.get(n2));
        }
        for (n2 = 0; n2 < n3; ++n2) {
            if (n2 > 0) {
                arrayList.get(n2).put(PdfName.PREV, arrayList.get(n2 - 1).indirectReference());
            }
            if (n2 >= n3 - 1) continue;
            arrayList.get(n2).put(PdfName.NEXT, arrayList.get(n2 + 1).indirectReference());
        }
        n2 = n4;
        if (n3 > 0) {
            pdfOutline.put(PdfName.FIRST, arrayList.get(0).indirectReference());
            pdfOutline.put(PdfName.LAST, arrayList.get(n3 - 1).indirectReference());
            n2 = n4;
        }
        while (n2 < n3) {
            pdfOutline = arrayList.get(n2);
            this.writer.addToBody((PdfObject)pdfOutline, pdfOutline.indirectReference());
            ++n2;
        }
    }

    protected void popLeading() {
        this.leading = this.leadingStack.pop().floatValue();
        if (this.leadingStack.size() > 0) {
            this.leading = this.leadingStack.peek().floatValue();
        }
    }

    protected void pushLeading() {
        this.leadingStack.push(Float.valueOf(this.leading));
    }

    void remoteGoto(String string2, int n2, float f2, float f3, float f4, float f5) {
        this.addAnnotation(this.writer.createAnnotation(f2, f3, f4, f5, new PdfAction(string2, n2), null));
    }

    void remoteGoto(String string2, String string3, float f2, float f3, float f4, float f5) {
        this.annotationsImp.addPlainAnnotation(this.writer.createAnnotation(f2, f3, f4, f5, new PdfAction(string2, string3), null));
    }

    @Override
    public void resetPageCount() {
        if (this.writer != null && this.writer.isPaused()) {
            return;
        }
        super.resetPageCount();
    }

    protected void saveStructElement(AccessibleElementId accessibleElementId, PdfStructureElement pdfStructureElement) {
        this.structElements.put(accessibleElementId, pdfStructureElement);
    }

    void setAction(PdfAction pdfAction, float f2, float f3, float f4, float f5) {
        this.addAnnotation(this.writer.createAnnotation(f2, f3, f4, f5, pdfAction, null));
    }

    void setBoxSize(String string2, Rectangle rectangle) {
        if (rectangle == null) {
            this.boxSize.remove(string2);
            return;
        }
        this.boxSize.put(string2, new PdfRectangle(rectangle));
    }

    public void setCollection(PdfCollection pdfCollection) {
        this.collection = pdfCollection;
    }

    void setCropBoxSize(Rectangle rectangle) {
        this.setBoxSize("crop", rectangle);
    }

    void setDuration(int n2) {
        if (n2 > 0) {
            this.writer.addPageDictEntry(PdfName.DUR, new PdfNumber(n2));
        }
    }

    void setLanguage(String string2) {
        this.language = new PdfString(string2);
    }

    void setLeading(float f2) {
        this.leading = f2;
    }

    @Override
    public boolean setMarginMirroring(boolean bl2) {
        if (this.writer != null && this.writer.isPaused()) {
            return false;
        }
        return super.setMarginMirroring(bl2);
    }

    @Override
    public boolean setMarginMirroringTopBottom(boolean bl2) {
        if (this.writer != null && this.writer.isPaused()) {
            return false;
        }
        return super.setMarginMirroringTopBottom(bl2);
    }

    @Override
    public boolean setMargins(float f2, float f3, float f4, float f5) {
        if (this.writer != null && this.writer.isPaused()) {
            return false;
        }
        this.nextMarginLeft = f2;
        this.nextMarginRight = f3;
        this.nextMarginTop = f4;
        this.nextMarginBottom = f5;
        return true;
    }

    protected void setNewPageSizeAndMargins() {
        float f2;
        this.pageSize = this.nextPageSize;
        if (this.marginMirroring && (this.getPageNumber() & 1) == 0) {
            this.marginRight = this.nextMarginLeft;
            this.marginLeft = this.nextMarginRight;
        } else {
            this.marginLeft = this.nextMarginLeft;
            this.marginRight = this.nextMarginRight;
        }
        if (this.marginMirroringTopBottom && (this.getPageNumber() & 1) == 0) {
            this.marginTop = this.nextMarginBottom;
            f2 = this.nextMarginTop;
        } else {
            this.marginTop = this.nextMarginTop;
            f2 = this.nextMarginBottom;
        }
        this.marginBottom = f2;
        if (!PdfDocument.isTagged(this.writer)) {
            this.text = new PdfContentByte(this.writer);
            this.text.reset();
        } else {
            this.text = this.graphics;
        }
        this.text.beginText();
        this.text.moveText(this.left(), this.top());
        if (PdfDocument.isTagged(this.writer)) {
            this.textEmptySize = this.text.size();
        }
    }

    void setOpenAction(PdfAction pdfAction) {
        this.openActionAction = pdfAction;
        this.openActionName = null;
    }

    void setOpenAction(String string2) {
        this.openActionName = string2;
        this.openActionAction = null;
    }

    void setPageAction(PdfName pdfName, PdfAction pdfAction) {
        if (this.pageAA == null) {
            this.pageAA = new PdfDictionary();
        }
        this.pageAA.put(pdfName, pdfAction);
    }

    @Override
    public void setPageCount(int n2) {
        if (this.writer != null && this.writer.isPaused()) {
            return;
        }
        super.setPageCount(n2);
    }

    void setPageEmpty(boolean bl2) {
        this.pageEmpty = bl2;
    }

    void setPageLabels(PdfPageLabels pdfPageLabels) {
        this.pageLabels = pdfPageLabels;
    }

    @Override
    public boolean setPageSize(Rectangle rectangle) {
        if (this.writer != null && this.writer.isPaused()) {
            return false;
        }
        this.nextPageSize = new Rectangle(rectangle);
        return true;
    }

    void setSigFlags(int n2) {
        this.annotationsImp.setSigFlags(n2);
    }

    void setStrictImageSequence(boolean bl2) {
        this.strictImageSequence = bl2;
    }

    public void setTabSettings(TabSettings tabSettings) {
        this.tabSettings = tabSettings;
    }

    void setThumbnail(Image image) {
        this.writer.addPageDictEntry(PdfName.THUMB, this.writer.getImageReference(this.writer.addDirectImageSimple(image)));
    }

    void setTransition(PdfTransition pdfTransition) {
        this.writer.addPageDictEntry(PdfName.TRANS, pdfTransition.getTransitionDictionary());
    }

    void setViewerPreferences(int n2) {
        this.viewerPreferences.setViewerPreferences(n2);
    }

    public void setXmpMetadata(byte[] object) {
        object = new PdfStream((byte[])object);
        object.put(PdfName.TYPE, PdfName.METADATA);
        object.put(PdfName.SUBTYPE, PdfName.XML);
        Object object2 = this.writer.getEncryption();
        if (object2 != null && !object2.isMetadataEncrypted()) {
            object2 = new PdfArray();
            object2.add(PdfName.CRYPT);
            object.put(PdfName.FILTER, (PdfObject)object2);
        }
        this.writer.addPageDictEntry(PdfName.METADATA, this.writer.addToBody((PdfObject)object).getIndirectReference());
    }

    /*
     * Enabled aggressive block sorting
     */
    void traverseOutlineCount(PdfOutline pdfOutline) {
        block4 : {
            PdfOutline pdfOutline2;
            block6 : {
                int n2;
                block5 : {
                    ArrayList<PdfOutline> arrayList;
                    block3 : {
                        arrayList = pdfOutline.getKids();
                        pdfOutline2 = pdfOutline.parent();
                        if (!arrayList.isEmpty()) break block3;
                        if (pdfOutline2 == null) break block4;
                        n2 = pdfOutline2.getCount();
                        break block5;
                    }
                    for (n2 = 0; n2 < arrayList.size(); ++n2) {
                        this.traverseOutlineCount(arrayList.get(n2));
                    }
                    if (pdfOutline2 == null) break block4;
                    if (!pdfOutline.isOpen()) break block6;
                    n2 = pdfOutline.getCount() + pdfOutline2.getCount();
                }
                pdfOutline2.setCount(n2 + 1);
                return;
            }
            pdfOutline2.setCount(pdfOutline2.getCount() + 1);
            pdfOutline.setCount(- pdfOutline.getCount());
        }
    }

    protected void useExternalCache(TempFileCache tempFileCache) {
        this.isToUseExternalCache = true;
        this.externalCache = tempFileCache;
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Lifted jumps to return sites
     */
    float writeLineToContent(PdfLine var1_1, PdfContentByte var2_2, PdfContentByte var3_3, Object[] var4_4, float var5_5) {
        block106 : {
            block105 : {
                block102 : {
                    block108 : {
                        block107 : {
                            block103 : {
                                block104 : {
                                    block101 : {
                                        var36_6 = var1_1;
                                        var35_7 = var2_2;
                                        var38_8 = (PdfFont)var4_4[0];
                                        var9_18 = ((Float)var4_4[1]).floatValue();
                                        var6_19 = var2_2.getXTLM() + var1_1.getOriginalWidth();
                                        var24_20 = var1_1.numberOfSpaces();
                                        var25_21 = var1_1.getLineLengthUtf32();
                                        var27_22 = var1_1.hasToBeJustified() != false && (var24_20 != 0 || var25_21 > 1);
                                        var26_23 = var1_1.getSeparatorCount();
                                        if (var26_23 <= 0) break block101;
                                        var10_24 = var1_1.widthLeft() / (float)var26_23;
                                        break block102;
                                    }
                                    if (!var27_22 || var26_23 != 0) break block103;
                                    if (!var1_1.isNewlineSplit() || (var7_26 = var1_1.widthLeft()) < (var8_25 = ((float)var24_20 * var5_5 + (float)var25_21 - 1.0f) * var9_18)) break block104;
                                    if (var1_1.isRTL()) {
                                        var35_7.moveText(var1_1.widthLeft() - var8_25, 0.0f);
                                    }
                                    var7_26 = var5_5 * var9_18;
                                    var8_25 = var9_18;
                                    var10_24 = 0.0f;
                                    break block105;
                                }
                                var8_25 = var1_1.widthLeft();
                                if ((var36_6 = var36_6.getChunk(var1_1.size() - 1)) != null && (var37_29 = var36_6.toString()).length() > 0 && ".,;:'".indexOf(var26_23 = (int)var37_29.charAt(var37_29.length() - 1)) >= 0) {
                                    var9_18 = var36_6.font().width(var26_23) * 0.4f + var8_25;
                                    var7_26 = var9_18 - var8_25;
                                    var8_25 = var9_18;
                                } else {
                                    var7_26 = 0.0f;
                                }
                                var9_18 = var5_5 * (var8_25 /= (float)var24_20 * var5_5 + (float)var25_21 - 1.0f);
                                var5_5 = var8_25;
                                var15_27 = var7_26;
                                var10_24 = 0.0f;
                                var8_25 = var5_5;
                                var7_26 = var9_18;
                                var14_28 = var6_19;
                                break block106;
                            }
                            if (var36_6.alignment == 0) break block107;
                            var5_5 = var6_19;
                            if (var36_6.alignment != -1) break block108;
                        }
                        var5_5 = var6_19 - var1_1.widthLeft();
                    }
                    var10_24 = 0.0f;
                    var6_19 = var5_5;
                }
                var8_25 = 0.0f;
                var7_26 = 0.0f;
            }
            var5_5 = var9_18;
            var15_27 = 0.0f;
            var14_28 = var6_19;
        }
        var28_30 = var1_1.getLastStrokeChunk();
        var21_31 = var2_2.getXTLM();
        var9_18 = var2_2.getYTLM();
        var44_32 = var1_1.iterator();
        var6_19 = var21_31;
        var33_33 = false;
        var26_23 = 0;
        var12_34 = 0.0f;
        var25_21 = 0;
        var11_35 = Float.NaN;
        do {
            block115 : {
                block109 : {
                    block114 : {
                        block110 : {
                            block113 : {
                                block111 : {
                                    block112 : {
                                        var41_51 = var3_3;
                                        var42_52 = this;
                                        if (!var44_32.hasNext()) break;
                                        var37_29 = var44_32.next();
                                        if (PdfDocument.isTagged(var42_52.writer) && var37_29.accessibleElement != null) {
                                            var35_7.openMCBlock(var37_29.accessibleElement);
                                            var33_33 = true;
                                        }
                                        var36_6 = var37_29.color();
                                        var20_41 = var37_29.font().size();
                                        if (var37_29.isImage()) {
                                            var19_40 = var37_29.height();
                                            var20_41 = var37_29.height();
                                            var18_39 = 0.0f;
                                        } else {
                                            var19_40 = var37_29.font().getFont().getFontDescriptor(1, var20_41);
                                            var18_39 = var37_29.font().getFont().getFontDescriptor(3, var20_41);
                                        }
                                        if (var26_23 > var28_30) break block109;
                                        var13_36 = var27_22 != false ? var37_29.getWidthCorrected(var8_25, var7_26) : var37_29.width();
                                        if (!var37_29.isStroked()) break block110;
                                        var43_53 = var1_1.getChunk(var26_23 + 1);
                                        if (var37_29.isSeparator()) {
                                            var39_49 = (Object[])var37_29.getAttribute("SEPARATOR");
                                            var40_50 = (DrawInterface)var39_49[0];
                                            if (((Boolean)var39_49[1]).booleanValue()) {
                                                var40_50.draw(var3_3, var21_31, var9_18 + var18_39, var21_31 + var1_1.getOriginalWidth(), var19_40 - var18_39, var9_18);
                                            } else {
                                                var40_50.draw(var3_3, var6_19, var9_18 + var18_39, var6_19 + var10_24, var19_40 - var18_39, var9_18);
                                            }
                                            var13_36 = var10_24;
                                        }
                                        var17_38 = var7_26;
                                        var16_37 = var8_25;
                                        if (!var37_29.isTab()) break block111;
                                        if (!var37_29.isAttribute("TABSETTINGS")) break block112;
                                        var39_49 = var37_29.getTabStop();
                                        if (var39_49 != null) {
                                            var7_26 = var39_49.getPosition() + var21_31;
                                            if (var39_49.getLeader() != null) {
                                                var39_49.getLeader().draw(var3_3, var6_19, var9_18 + var18_39, var7_26, var19_40 - var18_39, var9_18);
                                            }
                                        } else {
                                            var7_26 = var6_19;
                                        }
                                        ** GOTO lbl-1000
                                    }
                                    var8_25 = var9_18;
                                    var39_49 = (Object[])var37_29.getAttribute("TAB");
                                    var40_50 = (DrawInterface)var39_49[0];
                                    var7_26 = var12_34 = ((Float)var39_49[1]).floatValue() + ((Float)var39_49[3]).floatValue();
                                    if (var12_34 > var6_19) {
                                        var7_26 = var8_25;
                                        var40_50.draw(var3_3, var6_19, var8_25 + var18_39, var12_34, var19_40 - var18_39, var8_25);
                                        var8_25 = var7_26;
                                        var7_26 = var12_34;
                                    } else lbl-1000: // 3 sources:
                                    {
                                        var8_25 = var9_18;
                                    }
                                    var9_18 = var6_19;
                                    var6_19 = var7_26;
                                    var7_26 = var9_18;
                                    break block113;
                                }
                                var8_25 = var9_18;
                                var7_26 = var12_34;
                            }
                            if (var37_29.isAttribute("BACKGROUND") && (var39_49 = (Object[])var37_29.getAttribute("BACKGROUND"))[0] != null) {
                                var34_48 = var3_3.getInText();
                                if (var34_48 && PdfDocument.isTagged(var42_52.writer)) {
                                    var3_3.endText();
                                }
                                var3_3.saveState();
                                var9_18 = var43_53 != null && var43_53.isAttribute("BACKGROUND") != false ? 0.0f : var5_5;
                                var12_34 = var9_18;
                                if (var43_53 == null) {
                                    var12_34 = var9_18 + var15_27;
                                }
                                var41_51.setColorFill((BaseColor)var39_49[0]);
                                var39_49 = (float[])var39_49[1];
                                var41_51.rectangle(var6_19 - var39_49[0], var8_25 + var18_39 - var39_49[1] + var37_29.getTextRise(), var13_36 - var12_34 + var39_49[0] + var39_49[2], var19_40 - var18_39 + var39_49[1] + var39_49[3]);
                                var3_3.fill();
                                var41_51.setGrayFill(0.0f);
                                var3_3.restoreState();
                                if (var34_48 && PdfDocument.isTagged(var42_52.writer)) {
                                    var41_51.beginText(true);
                                }
                            }
                            var12_34 = var8_25;
                            if (var37_29.isAttribute("UNDERLINE")) {
                                var34_48 = var3_3.getInText();
                                if (var34_48 && PdfDocument.isTagged(var42_52.writer)) {
                                    var3_3.endText();
                                }
                                var8_25 = var43_53 != null && var43_53.isAttribute("UNDERLINE") != false ? 0.0f : var5_5;
                                var9_18 = var8_25;
                                if (var43_53 == null) {
                                    var9_18 = var8_25 + var15_27;
                                }
                                var39_49 = (Object[][])var37_29.getAttribute("UNDERLINE");
                                for (var29_44 = 0; var29_44 < ((Object)var39_49).length; ++var29_44) {
                                    var45_54 = var39_49[var29_44];
                                    var40_50 = (BaseColor)var45_54[0];
                                    var45_54 = (float[])var45_54[1];
                                    if (var40_50 == null) {
                                        var40_50 = var36_6;
                                    }
                                    if (var40_50 != null) {
                                        var41_51.setColorStroke((BaseColor)var40_50);
                                    }
                                    var41_51.setLineWidth(var45_54[0] + var37_29.font().size() * var45_54[1]);
                                    var8_25 = var45_54[2];
                                    var22_42 = var37_29.font().size();
                                    var23_43 = var45_54[3];
                                    var30_45 = (int)var45_54[4];
                                    if (var30_45 != 0) {
                                        var41_51.setLineCap(var30_45);
                                    }
                                    var8_25 = var12_34 + (var8_25 + var22_42 * var23_43);
                                    var41_51.moveTo(var6_19, var8_25);
                                    var41_51.lineTo(var6_19 + var13_36 - var9_18, var8_25);
                                    var3_3.stroke();
                                    if (var40_50 != null) {
                                        var3_3.resetGrayStroke();
                                    }
                                    if (var30_45 == 0) continue;
                                    var41_51.setLineCap(0);
                                }
                                var39_49 = var36_6;
                                var29_44 = var24_20;
                                var41_51.setLineWidth(1.0f);
                                var36_6 = var39_49;
                                var24_20 = var29_44;
                                if (var34_48) {
                                    var36_6 = var39_49;
                                    var24_20 = var29_44;
                                    if (PdfDocument.isTagged(var42_52.writer)) {
                                        var41_51.beginText(true);
                                        var36_6 = var39_49;
                                        var24_20 = var29_44;
                                    }
                                }
                            }
                            if (var37_29.isAttribute("ACTION")) {
                                var8_25 = var43_53 != null && var43_53.isAttribute("ACTION") != false ? 0.0f : var5_5;
                                var9_18 = var8_25;
                                if (var43_53 == null) {
                                    var9_18 = var8_25 + var15_27;
                                }
                                if (var37_29.isImage()) {
                                    var39_49 = var42_52.writer;
                                    var8_25 = var37_29.getImageOffsetY();
                                    var22_42 = var37_29.getImageHeight();
                                    var39_49 = var39_49.createAnnotation(var6_19, var8_25 + var12_34, var6_19 + var13_36 - var9_18, var37_29.getImageOffsetY() + (var22_42 + var12_34), (PdfAction)var37_29.getAttribute("ACTION"), null);
                                } else {
                                    var8_25 = var6_19;
                                    var39_49 = var42_52.writer.createAnnotation(var8_25, var37_29.getTextRise() + (var12_34 + var18_39), var8_25 + var13_36 - var9_18, var12_34 + var19_40 + var37_29.getTextRise(), (PdfAction)var37_29.getAttribute("ACTION"), null);
                                }
                                var35_7.addAnnotation((PdfAnnotation)var39_49, true);
                                if (PdfDocument.isTagged(var42_52.writer) && var37_29.accessibleElement != null && (var40_50 = var42_52.getStructElement(var37_29.accessibleElement.getId())) != null) {
                                    var29_44 = var42_52.getStructParentIndex(var39_49);
                                    var39_49.put(PdfName.STRUCTPARENT, new PdfNumber(var29_44));
                                    var40_50.setAnnotation((PdfAnnotation)var39_49, var42_52.writer.getCurrentPage());
                                    var42_52.writer.getStructureTreeRoot().setAnnotationMark(var29_44, var40_50.getReference());
                                }
                            }
                            var9_18 = var10_24;
                            var10_24 = var6_19;
                            if (var37_29.isAttribute("REMOTEGOTO")) {
                                var6_19 = var43_53 != null && var43_53.isAttribute("REMOTEGOTO") != false ? 0.0f : var5_5;
                                var8_25 = var6_19;
                                if (var43_53 == null) {
                                    var8_25 = var6_19 + var15_27;
                                }
                                var39_49 = (Object[])var37_29.getAttribute("REMOTEGOTO");
                                var40_50 = (String)var39_49[0];
                                if (var39_49[1] instanceof String) {
                                    this.remoteGoto((String)var40_50, (String)var39_49[1], var10_24, var12_34 + var18_39 + var37_29.getTextRise(), var10_24 + var13_36 - var8_25, var12_34 + var19_40 + var37_29.getTextRise());
                                } else {
                                    this.remoteGoto((String)var40_50, (Integer)var39_49[1], var10_24, var12_34 + var18_39 + var37_29.getTextRise(), var10_24 + var13_36 - var8_25, var12_34 + var19_40 + var37_29.getTextRise());
                                }
                            }
                            if (var37_29.isAttribute("LOCALGOTO")) {
                                var6_19 = var43_53 != null && var43_53.isAttribute("LOCALGOTO") != false ? 0.0f : var5_5;
                                var8_25 = var6_19;
                                if (var43_53 == null) {
                                    var8_25 = var6_19 + var15_27;
                                }
                                this.localGoto((String)var37_29.getAttribute("LOCALGOTO"), var10_24, var12_34, var10_24 + var13_36 - var8_25, var12_34 + var20_41);
                            }
                            if (var37_29.isAttribute("LOCALDESTINATION")) {
                                var42_52.localDestination((String)var37_29.getAttribute("LOCALDESTINATION"), new PdfDestination(0, var10_24, var12_34 + var20_41, 0.0f));
                            }
                            if (var37_29.isAttribute("GENERICTAG")) {
                                var6_19 = var43_53 != null && var43_53.isAttribute("GENERICTAG") != false ? 0.0f : var5_5;
                                var8_25 = var6_19;
                                if (var43_53 == null) {
                                    var8_25 = var6_19 + var15_27;
                                }
                                var39_49 = new Rectangle(var10_24, var12_34, var10_24 + var13_36 - var8_25, var12_34 + var20_41);
                                var40_50 = var42_52.writer.getPageEvent();
                                if (var40_50 != null) {
                                    var40_50.onGenericTag(var42_52.writer, var42_52, (Rectangle)var39_49, (String)var37_29.getAttribute("GENERICTAG"));
                                }
                            }
                            if (var37_29.isAttribute("PDFANNOTATION")) {
                                var6_19 = var43_53 != null && var43_53.isAttribute("PDFANNOTATION") != false ? 0.0f : var5_5;
                                var8_25 = var6_19;
                                if (var43_53 == null) {
                                    var8_25 = var6_19 + var15_27;
                                }
                                var39_49 = PdfFormField.shallowDuplicate((PdfAnnotation)var37_29.getAttribute("PDFANNOTATION"));
                                var39_49.put(PdfName.RECT, new PdfRectangle(var10_24, var12_34 + var18_39, var10_24 + var13_36 - var8_25, var12_34 + var19_40));
                                var35_7.addAnnotation((PdfAnnotation)var39_49, true);
                            }
                            var39_49 = (float[])var37_29.getAttribute("SKEW");
                            var40_50 = (Float)var37_29.getAttribute("HSCALE");
                            if (var39_49 == null && var40_50 == null) {
                                var6_19 = 1.0f;
                            } else {
                                if (var39_49 != null) {
                                    var8_25 = (float)var39_49[0];
                                    var18_39 = (float)var39_49[1];
                                } else {
                                    var8_25 = 0.0f;
                                    var18_39 = 0.0f;
                                }
                                var6_19 = var40_50 != null ? var40_50.floatValue() : 1.0f;
                                var2_2.setTextMatrix(var6_19, var8_25, var18_39, 1.0f, var10_24, var12_34);
                            }
                            if (!var27_22) {
                                if (var37_29.isAttribute("WORD_SPACING")) {
                                    var35_7.setWordSpacing(((Float)var37_29.getAttribute("WORD_SPACING")).floatValue());
                                }
                                if (var37_29.isAttribute("CHAR_SPACING")) {
                                    var35_7.setCharacterSpacing(((Float)var37_29.getAttribute("CHAR_SPACING")).floatValue());
                                }
                            }
                            if (var37_29.isImage()) {
                                var35_7 = var37_29.getImage();
                                var8_25 = var37_29.getImageWidth();
                                var39_49 = var35_7.matrix(var37_29.getImageScalePercentage());
                                var39_49[4] = var10_24 + var37_29.getImageOffsetX() - var39_49[4];
                                var39_49[5] = var37_29.getImageOffsetY() + var12_34 - var39_49[5];
                                if (var3_3.getInText() && !(var35_7 instanceof ImgTemplate)) {
                                    var3_3.endText();
                                    var29_44 = 1;
                                } else {
                                    var29_44 = 0;
                                }
                                var3_3.addImage((Image)var35_7, (double)var39_49[0], (double)var39_49[1], (double)var39_49[2], (double)var39_49[3], (double)var39_49[4], (double)var39_49[5], false, var33_33);
                                if (var29_44 != 0) {
                                    var41_51.beginText(true);
                                }
                                var13_36 = var37_29.getImageWidth();
                                var18_39 = var2_2.getXTLM();
                                var35_7 = var2_2;
                                var35_7.moveText(var10_24 + var5_5 + var13_36 - var18_39, 0.0f);
                            } else {
                                var8_25 = var13_36;
                            }
                            var13_36 = var17_38;
                            var39_49 = var36_6;
                            var36_6 = var35_7;
                            var17_38 = var8_25;
                            var18_39 = var10_24;
                            var10_24 = var7_26;
                            var7_26 = var12_34;
                            var8_25 = var16_37;
                            var35_7 = var39_49;
                            break block114;
                        }
                        var16_37 = var13_36;
                        var39_49 = var35_7;
                        var35_7 = var36_6;
                        var17_38 = 1.0f;
                        var13_36 = var7_26;
                        var7_26 = var9_18;
                        var9_18 = var10_24;
                        var10_24 = var12_34;
                        var18_39 = var6_19;
                        var6_19 = var17_38;
                        var17_38 = var16_37;
                        var36_6 = var39_49;
                    }
                    ++var26_23;
                    var12_34 = var18_39 + var17_38;
                    var16_37 = var10_24;
                    var10_24 = var12_34;
                    var40_50 = var37_29;
                    break block115;
                }
                var40_50 = var37_29;
                var37_29 = var35_7;
                var35_7 = var36_6;
                var16_37 = var10_24;
                var10_24 = var6_19;
                var6_19 = 1.0f;
                var13_36 = var7_26;
                var7_26 = var9_18;
                var9_18 = var16_37;
                var16_37 = var12_34;
                var36_6 = var37_29;
            }
            if (!var40_50.isImage() && var40_50.font().compareTo((PdfFont)var38_9) != 0) {
                var37_29 = var40_50.font();
                var36_6.setFontAndSize(var37_29.getFont(), var37_29.size());
            } else {
                var37_29 = var38_9;
            }
            var38_10 = (Object[])var40_50.getAttribute("TEXTRENDERMODE");
            var41_51 = (Float)var40_50.getAttribute("SUBSUPSCRIPT");
            if (var38_10 != null) {
                var30_45 = (Integer)var38_10[0] & 3;
                if (var30_45 != 0) {
                    var36_6.setTextRenderingMode(var30_45);
                }
                if (var30_45 != 1 && var30_45 != 2) {
                    var38_11 = null;
                    var12_34 = 1.0f;
                    var29_44 = var30_45;
                } else {
                    var17_38 = ((Float)var38_10[1]).floatValue();
                    if (var17_38 != 1.0f) {
                        var36_6.setLineWidth(var17_38);
                    }
                    var38_12 = (BaseColor)var38_10[2];
                    var39_49 = var38_12;
                    if (var38_12 == null) {
                        var39_49 = var35_7;
                    }
                    var38_13 = var39_49;
                    var12_34 = var17_38;
                    var29_44 = var30_45;
                    if (var39_49 != null) {
                        var36_6.setColorStroke((BaseColor)var39_49);
                        var38_14 = var39_49;
                        var12_34 = var17_38;
                        var29_44 = var30_45;
                    }
                }
            } else {
                var38_15 = null;
                var12_34 = 1.0f;
                var29_44 = 0;
            }
            var17_38 = var41_51 != null ? var41_51.floatValue() : 0.0f;
            if (var35_7 != null) {
                var36_6.setColorFill((BaseColor)var35_7);
            }
            if ((var32_47 = (var17_38 FCMPL 0.0f)) != false) {
                var36_6.setTextRise(var17_38);
            }
            if (var40_50.isImage()) {
                var25_21 = 1;
            } else if (var40_50.isHorizontalSeparator()) {
                var39_49 = new PdfTextArray();
                var39_49.add((- var9_18) * 1000.0f / var40_50.font.size() / var6_19);
                var36_6.showText((PdfTextArray)var39_49);
            } else if (var40_50.isTab() && var16_37 != var10_24) {
                var39_49 = new PdfTextArray();
                var39_49.add((var16_37 - var10_24) * 1000.0f / var40_50.font.size() / var6_19);
                var36_6.showText((PdfTextArray)var39_49);
            } else if (var27_22 && var24_20 > 0 && var40_50.isSpecialEncoding()) {
                if (var6_19 != var11_35) {
                    var36_6.setWordSpacing(var13_36 / var6_19);
                    var36_6.setCharacterSpacing(var8_25 / var6_19 + var2_2.getCharacterSpacing());
                    var11_35 = var6_19;
                }
                if ((var30_45 = (var39_49 = var40_50.toString()).indexOf(32)) < 0) {
                    var36_6.showText((String)var39_49);
                } else {
                    var6_19 = (- var13_36) * 1000.0f / var40_50.font.size() / var6_19;
                    var41_51 = new PdfTextArray(var39_49.substring(0, var30_45));
                    while ((var31_46 = var39_49.indexOf(32, var30_45 + 1)) >= 0) {
                        var41_51.add(var6_19);
                        var41_51.add(var39_49.substring(var30_45, var31_46));
                        var30_45 = var31_46;
                    }
                    var41_51.add(var6_19);
                    var41_51.add(var39_49.substring(var30_45));
                    var36_6.showText((PdfTextArray)var41_51);
                }
            } else {
                if (var27_22 && var6_19 != var11_35) {
                    var36_6.setWordSpacing(var13_36 / var6_19);
                    var36_6.setCharacterSpacing(var8_25 / var6_19 + var2_2.getCharacterSpacing());
                } else {
                    var6_19 = var11_35;
                }
                var36_6.showText(var40_50.toString());
                var11_35 = var6_19;
            }
            if (var32_47 != false) {
                var36_6.setTextRise(0.0f);
            }
            if (var35_7 != null) {
                var2_2.resetRGBColorFill();
            }
            if (var29_44 != 0) {
                var36_6.setTextRenderingMode(0);
            }
            if (var38_16 != null) {
                var2_2.resetRGBColorStroke();
            }
            if (var12_34 != 1.0f) {
                var36_6.setLineWidth(1.0f);
            }
            if (var40_50.isAttribute("SKEW") || var40_50.isAttribute("HSCALE")) {
                var36_6.setTextMatrix(var10_24, var7_26);
                var25_21 = 1;
            }
            if (!var27_22) {
                if (var40_50.isAttribute("CHAR_SPACING")) {
                    var36_6.setCharacterSpacing(var8_25);
                }
                if (var40_50.isAttribute("WORD_SPACING")) {
                    var36_6.setWordSpacing(var13_36);
                }
            }
            if (PdfDocument.isTagged(this.writer) && var40_50.accessibleElement != null) {
                var36_6.closeMCBlock(var40_50.accessibleElement);
            }
            var35_7 = var36_6;
            var6_19 = var10_24;
            var12_34 = var13_36;
            var10_24 = var9_18;
            var38_17 = var37_29;
            var9_18 = var7_26;
            var7_26 = var12_34;
            var12_34 = var16_37;
        } while (true);
        if (var27_22) {
            var35_7.setWordSpacing(0.0f);
            var35_7.setCharacterSpacing(0.0f);
            if (var1_1.isNewlineSplit()) {
                var5_5 = 0.0f;
            }
        }
        if (var25_21 != 0) {
            var35_7.moveText(var21_31 - var2_2.getXTLM(), 0.0f);
        }
        var4_4[0] = var38_9;
        var4_4[1] = new Float(var5_5);
        return var14_28;
    }

    void writeOutlines() {
        if (this.rootOutline.getKids().size() == 0) {
            return;
        }
        this.outlineTree(this.rootOutline);
        this.writer.addToBody((PdfObject)this.rootOutline, this.rootOutline.indirectReference());
    }

    public class Destination {
        public PdfAction action;
        public PdfDestination destination;
        public PdfIndirectReference reference;
    }

    public static class Indentation {
        float imageIndentLeft = 0.0f;
        float imageIndentRight = 0.0f;
        float indentBottom = 0.0f;
        float indentLeft = 0.0f;
        float indentRight = 0.0f;
        float indentTop = 0.0f;
        float listIndentLeft = 0.0f;
        float sectionIndentLeft = 0.0f;
        float sectionIndentRight = 0.0f;
    }

    static class PdfCatalog
    extends PdfDictionary {
        PdfWriter writer;

        PdfCatalog(PdfIndirectReference pdfIndirectReference, PdfWriter pdfWriter) {
            super(CATALOG);
            this.writer = pdfWriter;
            this.put(PdfName.PAGES, pdfIndirectReference);
        }

        void addNames(TreeMap<String, Destination> object, HashMap<String, PdfObject> hashMap, HashMap<String, PdfObject> hashMap2, PdfWriter pdfWriter) {
            if (object.isEmpty() && hashMap.isEmpty() && hashMap2.isEmpty()) {
                return;
            }
            try {
                PdfDictionary pdfDictionary = new PdfDictionary();
                if (!object.isEmpty()) {
                    HashMap<String, PdfIndirectReference> hashMap3 = new HashMap<String, PdfIndirectReference>();
                    for (Map.Entry entry : object.entrySet()) {
                        String string2 = (String)entry.getKey();
                        Destination object2 = (Destination)entry.getValue();
                        if (object2.destination == null) continue;
                        hashMap3.put(string2, object2.reference);
                    }
                    if (hashMap3.size() > 0) {
                        pdfDictionary.put(PdfName.DESTS, pdfWriter.addToBody(PdfNameTree.writeTree(hashMap3, pdfWriter)).getIndirectReference());
                    }
                }
                if (!hashMap.isEmpty()) {
                    object = PdfNameTree.writeTree(hashMap, pdfWriter);
                    pdfDictionary.put(PdfName.JAVASCRIPT, pdfWriter.addToBody((PdfObject)((Object)object)).getIndirectReference());
                }
                if (!hashMap2.isEmpty()) {
                    pdfDictionary.put(PdfName.EMBEDDEDFILES, pdfWriter.addToBody(PdfNameTree.writeTree(hashMap2, pdfWriter)).getIndirectReference());
                }
                if (pdfDictionary.size() > 0) {
                    this.put(PdfName.NAMES, pdfWriter.addToBody(pdfDictionary).getIndirectReference());
                }
                return;
            }
            catch (IOException iOException) {
                throw new ExceptionConverter(iOException);
            }
        }

        void setAdditionalActions(PdfDictionary pdfDictionary) {
            try {
                this.put(PdfName.AA, this.writer.addToBody(pdfDictionary).getIndirectReference());
                return;
            }
            catch (Exception exception) {
                throw new ExceptionConverter(exception);
            }
        }

        void setOpenAction(PdfAction pdfAction) {
            this.put(PdfName.OPENACTION, pdfAction);
        }
    }

    public static class PdfInfo
    extends PdfDictionary {
        PdfInfo() {
            this.addProducer();
            this.addCreationDate();
        }

        PdfInfo(String string2, String string3, String string4) {
            this();
            this.addTitle(string3);
            this.addSubject(string4);
            this.addAuthor(string2);
        }

        void addAuthor(String string2) {
            this.put(PdfName.AUTHOR, new PdfString(string2, "UnicodeBig"));
        }

        void addCreationDate() {
            PdfDate pdfDate = new PdfDate();
            this.put(PdfName.CREATIONDATE, pdfDate);
            this.put(PdfName.MODDATE, pdfDate);
        }

        void addCreator(String string2) {
            this.put(PdfName.CREATOR, new PdfString(string2, "UnicodeBig"));
        }

        void addKeywords(String string2) {
            this.put(PdfName.KEYWORDS, new PdfString(string2, "UnicodeBig"));
        }

        void addProducer() {
            this.put(PdfName.PRODUCER, new PdfString(Version.getInstance().getVersion()));
        }

        void addSubject(String string2) {
            this.put(PdfName.SUBJECT, new PdfString(string2, "UnicodeBig"));
        }

        void addTitle(String string2) {
            this.put(PdfName.TITLE, new PdfString(string2, "UnicodeBig"));
        }

        void addkey(String string2, String string3) {
            if (!string2.equals("Producer")) {
                if (string2.equals("CreationDate")) {
                    return;
                }
                this.put(new PdfName(string2), new PdfString(string3, "UnicodeBig"));
            }
        }
    }

}

