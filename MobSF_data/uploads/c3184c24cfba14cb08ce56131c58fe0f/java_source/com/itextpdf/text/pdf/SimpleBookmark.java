/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf;

import com.itextpdf.text.error_messages.MessageLocalization;
import com.itextpdf.text.pdf.ByteBuffer;
import com.itextpdf.text.pdf.IntHashtable;
import com.itextpdf.text.pdf.PRIndirectReference;
import com.itextpdf.text.pdf.PdfAction;
import com.itextpdf.text.pdf.PdfArray;
import com.itextpdf.text.pdf.PdfBoolean;
import com.itextpdf.text.pdf.PdfDictionary;
import com.itextpdf.text.pdf.PdfEncodings;
import com.itextpdf.text.pdf.PdfIndirectObject;
import com.itextpdf.text.pdf.PdfIndirectReference;
import com.itextpdf.text.pdf.PdfName;
import com.itextpdf.text.pdf.PdfNull;
import com.itextpdf.text.pdf.PdfNumber;
import com.itextpdf.text.pdf.PdfObject;
import com.itextpdf.text.pdf.PdfReader;
import com.itextpdf.text.pdf.PdfString;
import com.itextpdf.text.pdf.PdfWriter;
import com.itextpdf.text.pdf.SimpleNamedDestination;
import com.itextpdf.text.xml.XMLUtil;
import com.itextpdf.text.xml.simpleparser.IanaEncodings;
import com.itextpdf.text.xml.simpleparser.SimpleXMLDocHandler;
import com.itextpdf.text.xml.simpleparser.SimpleXMLParser;
import java.io.BufferedWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.Reader;
import java.io.Writer;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.ListIterator;
import java.util.Map;
import java.util.Set;
import java.util.Stack;
import java.util.StringTokenizer;

public final class SimpleBookmark
implements SimpleXMLDocHandler {
    private final Stack<HashMap<String, Object>> attr = new Stack();
    private ArrayList<HashMap<String, Object>> topList;

    private SimpleBookmark() {
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    private static List<HashMap<String, Object>> bookmarkDepth(PdfReader var0, PdfDictionary var1_1, IntHashtable var2_2, boolean var3_3) {
        var8_4 = new ArrayList<HashMap<String, Object>>();
        while (var1_1 != null) {
            block29 : {
                var9_10 = new HashMap<String, Object>();
                var9_10.put("Title", ((PdfString)PdfReader.getPdfObjectRelease(var1_1.get(PdfName.TITLE))).toUnicodeString());
                var6_7 = (PdfArray)PdfReader.getPdfObjectRelease(var1_1.get(PdfName.C));
                var4_5 = 2;
                if (var6_7 != null && var6_7.size() == 3) {
                    var7_9 = new ByteBuffer();
                    var7_9.append(var6_7.getAsNumber(0).floatValue()).append(' ');
                    var7_9.append(var6_7.getAsNumber(1).floatValue()).append(' ');
                    var7_9.append(var6_7.getAsNumber(2).floatValue());
                    var9_10.put("Color", PdfEncodings.convertToString(var7_9.toByteArray(), null));
                }
                if ((var6_7 = (PdfNumber)PdfReader.getPdfObjectRelease(var1_1.get(PdfName.F))) != null) {
                    var5_6 = var6_7.intValue();
                    var6_7 = "";
                    if ((var5_6 & 1) != 0) {
                        var6_7 = new StringBuilder();
                        var6_7.append("");
                        var6_7.append("italic ");
                        var6_7 = var6_7.toString();
                    }
                    var7_9 = var6_7;
                    if ((var5_6 & 2) != 0) {
                        var7_9 = new StringBuilder();
                        var7_9.append((String)var6_7);
                        var7_9.append("bold ");
                        var7_9 = var7_9.toString();
                    }
                    if ((var6_7 = var7_9.trim()).length() != 0) {
                        var9_10.put("Style", var6_7);
                    }
                }
                if ((var6_7 = (PdfNumber)PdfReader.getPdfObjectRelease(var1_1.get(PdfName.COUNT))) != null && var6_7.intValue() < 0) {
                    var9_10.put("Open", "false");
                }
                try {
                    block38 : {
                        block36 : {
                            block33 : {
                                block31 : {
                                    block34 : {
                                        block37 : {
                                            block35 : {
                                                block32 : {
                                                    block30 : {
                                                        var6_7 = PdfReader.getPdfObjectRelease(var1_1.get(PdfName.DEST));
                                                        if (var6_7 == null) {
                                                            var10_11 = (PdfDictionary)PdfReader.getPdfObjectRelease(var1_1.get(PdfName.A));
                                                            if (var10_11 == null) break block29;
                                                            if (PdfName.GOTO.equals(PdfReader.getPdfObjectRelease(var10_11.get(PdfName.S)))) {
                                                                var6_7 = PdfReader.getPdfObjectRelease(var10_11.get(PdfName.D));
                                                                if (var6_7 == null) break block29;
                                                            }
                                                        } else {
                                                            SimpleBookmark.mapGotoBookmark(var9_10, (PdfObject)var6_7, var2_2);
                                                            break block29;
                                                        }
                                                        if (!PdfName.URI.equals(PdfReader.getPdfObjectRelease(var10_11.get(PdfName.S)))) break block30;
                                                        var9_10.put("Action", "URI");
                                                        var6_7 = "URI";
                                                        var7_9 = (PdfString)PdfReader.getPdfObjectRelease(var10_11.get(PdfName.URI));
                                                        break block31;
                                                    }
                                                    if (!PdfName.JAVASCRIPT.equals(PdfReader.getPdfObjectRelease(var10_11.get(PdfName.S)))) break block32;
                                                    var9_10.put("Action", "JS");
                                                    var6_7 = "Code";
                                                    var7_9 = PdfReader.getPdfObjectRelease(var10_11.get(PdfName.JS));
                                                    break block33;
                                                }
                                                if (!PdfName.GOTOR.equals(PdfReader.getPdfObjectRelease(var10_11.get(PdfName.S)))) break block34;
                                                var7_9 = PdfReader.getPdfObjectRelease(var10_11.get(PdfName.D));
                                                if (var7_9 == null) ** GOTO lbl99
                                                if (!var7_9.isString()) break block35;
                                                var6_7 = "Named";
                                                var7_9 = var7_9.toString();
                                                break block36;
                                            }
                                            if (!var7_9.isName()) break block37;
                                            var6_7 = "NamedN";
                                            var7_9 = PdfName.decodeName(var7_9.toString());
                                            break block36;
                                        }
                                        if (!var7_9.isArray()) ** GOTO lbl99
                                        var6_7 = (PdfArray)var7_9;
                                        var7_9 = new StringBuffer();
                                        var7_9.append(var6_7.getPdfObject(0).toString());
                                        var7_9.append(' ');
                                        var7_9.append(var6_7.getPdfObject(1).toString());
                                        break block38;
                                    }
                                    if (!PdfName.LAUNCH.equals(PdfReader.getPdfObjectRelease(var10_11.get(PdfName.S)))) break block29;
                                    var9_10.put("Action", "Launch");
                                    var6_7 = var7_9 = PdfReader.getPdfObjectRelease(var10_11.get(PdfName.F));
                                    if (var7_9 == null) {
                                        var6_7 = PdfReader.getPdfObjectRelease(var10_11.get(PdfName.WIN));
                                    }
                                    if (var6_7 == null) break block29;
                                    if (var6_7.isString()) {
                                        var9_10.put("File", ((PdfString)var6_7).toUnicodeString());
                                        break block29;
                                    }
                                    if (!var6_7.isDictionary() || !(var7_9 = PdfReader.getPdfObjectRelease(((PdfDictionary)var6_7).get(PdfName.F))).isString()) break block29;
                                    var6_7 = "File";
                                    var7_9 = (PdfString)var7_9;
                                }
                                var7_9 = var7_9.toUnicodeString();
lbl89: // 2 sources:
                                do {
                                    var9_10.put((String)var6_7, var7_9);
                                    break block29;
                                    break;
                                } while (true);
                            }
lbl93: // 2 sources:
                            do {
                                var7_9 = var7_9.toString();
                                ** continue;
                                break;
                            } while (true);
                        }
lbl97: // 2 sources:
                        do {
                            block39 : {
                                block41 : {
                                    block40 : {
                                        var9_10.put((String)var6_7, var7_9);
lbl99: // 3 sources:
                                        var9_10.put("Action", "GoToR");
                                        var6_7 = PdfReader.getPdfObjectRelease(var10_11.get(PdfName.F));
                                        if (var6_7 == null) break block39;
                                        if (!var6_7.isString()) break block40;
                                        var6_7 = (PdfString)var6_7;
                                        break block41;
                                    }
                                    if (!var6_7.isDictionary() || !(var6_7 = PdfReader.getPdfObject(((PdfDictionary)var6_7).get(PdfName.F))).isString()) break block39;
                                    var6_7 = (PdfString)var6_7;
                                }
                                var9_10.put("File", var6_7.toUnicodeString());
                            }
                            if ((var7_9 = PdfReader.getPdfObjectRelease(var10_11.get(PdfName.NEWWINDOW))) != null) {
                                var6_7 = "NewWindow";
                                ** continue;
                            }
                            break block29;
                            break;
                        } while (true);
                    }
                    while (var4_5 < var6_7.size()) {
                        var7_9.append(' ');
                        var7_9.append(var6_7.getPdfObject(var4_5).toString());
                        ++var4_5;
                    }
                    var6_7 = "Page";
                    var7_9 = var7_9.toString();
                    ** continue;
                }
                catch (Exception var6_8) {}
            }
            if ((var6_7 = (PdfDictionary)PdfReader.getPdfObjectRelease(var1_1.get(PdfName.FIRST))) != null) {
                var9_10.put("Kids", SimpleBookmark.bookmarkDepth(var0, (PdfDictionary)var6_7, var2_2, false));
            }
            var8_4.add(var9_10);
            if (var3_3 != false) return var8_4;
            var1_1 = (PdfDictionary)PdfReader.getPdfObjectRelease(var1_1.get(PdfName.NEXT));
        }
        return var8_4;
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    static void createOutlineAction(PdfDictionary var0, HashMap<String, Object> var1_2, PdfWriter var2_3, boolean var3_4) {
        block31 : {
            block30 : {
                block21 : {
                    block22 : {
                        block23 : {
                            block19 : {
                                block20 : {
                                    try {
                                        block26 : {
                                            block29 : {
                                                block28 : {
                                                    block27 : {
                                                        block24 : {
                                                            block25 : {
                                                                var7_5 = (String)var1_2.get("Action");
                                                                var6_6 = "GoTo".equals(var7_5);
                                                                var5_7 = 0;
                                                                var4_8 = 0;
                                                                if (!var6_6) break block24;
                                                                var7_5 = (String)var1_2.get("Named");
                                                                if (var7_5 == null) break block25;
                                                                if (var3_4) {
                                                                    var2_3 = PdfName.DEST;
                                                                    var1_2 = new PdfName((String)var7_5);
                                                                } else {
                                                                    var2_3 = PdfName.DEST;
                                                                    var1_2 = new PdfString((String)var7_5, null);
                                                                }
                                                                ** GOTO lbl81
                                                            }
                                                            if ((var1_2 = (String)var1_2.get("Page")) == null) return;
                                                            var7_5 = new PdfArray();
                                                            var8_9 = new StringTokenizer((String)var1_2);
                                                            var7_5.add(var2_3.getPageReference(Integer.parseInt(var8_9.nextToken())));
                                                            if (!var8_9.hasMoreTokens()) {
                                                                var7_5.add(PdfName.XYZ);
                                                                var7_5.add(new float[]{0.0f, 10000.0f, 0.0f});
                                                                break block19;
                                                            }
                                                            var1_2 = var2_3 = var8_9.nextToken();
                                                            if (var2_3.startsWith("/")) {
                                                                var1_2 = var2_3.substring(1);
                                                            }
                                                            var7_5.add(new PdfName((String)var1_2));
                                                            break block20;
                                                        }
                                                        if (!"GoToR".equals(var7_5)) break block26;
                                                        var8_10 = new PdfDictionary();
                                                        var7_5 = (String)var1_2.get("Named");
                                                        if (var7_5 == null) break block27;
                                                        var2_3 = PdfName.D;
                                                        var7_5 = new PdfString((String)var7_5, null);
                                                        break block28;
                                                    }
                                                    var7_5 = (String)var1_2.get("NamedN");
                                                    if (var7_5 == null) break block29;
                                                    var2_3 = PdfName.D;
                                                    var7_5 = new PdfName((String)var7_5);
                                                }
                                                var8_10.put((PdfName)var2_3, (PdfObject)var7_5);
                                                break block21;
                                            }
                                            var2_3 = (String)var1_2.get("Page");
                                            if (var2_3 == null) break block21;
                                            var9_11 = new PdfArray();
                                            var10_12 = new StringTokenizer((String)var2_3);
                                            var9_11.add(new PdfNumber(var10_12.nextToken()));
                                            if (!var10_12.hasMoreTokens()) {
                                                var9_11.add(PdfName.XYZ);
                                                var9_11.add(new float[]{0.0f, 10000.0f, 0.0f});
                                                break block22;
                                            }
                                            var2_3 = var7_5 = var10_12.nextToken();
                                            if (var7_5.startsWith("/")) {
                                                var2_3 = var7_5.substring(1);
                                            }
                                            var9_11.add(new PdfName((String)var2_3));
                                            break block23;
                                        }
                                        if ("URI".equals(var7_5)) {
                                            var2_3 = (String)var1_2.get("URI");
                                            if (var2_3 == null) return;
                                            var1_2 = new PdfDictionary();
                                            var1_2.put(PdfName.S, PdfName.URI);
                                            var1_2.put(PdfName.URI, new PdfString((String)var2_3));
                                        } else {
                                            if ("JS".equals(var7_5)) {
                                                if ((var1_2 = (String)var1_2.get("Code")) == null) return;
                                                var0.put(PdfName.A, PdfAction.javaScript((String)var1_2, (PdfWriter)var2_3));
                                                return;
                                            }
                                            if ("Launch".equals(var7_5) == false) return;
                                            var2_3 = (String)var1_2.get("File");
                                            if (var2_3 == null) return;
                                            var1_2 = new PdfDictionary();
                                            var1_2.put(PdfName.S, PdfName.LAUNCH);
                                            var1_2.put(PdfName.F, new PdfString((String)var2_3));
                                        }
lbl79: // 5 sources:
                                        do {
                                            var2_3 = PdfName.A;
lbl81: // 3 sources:
                                            var0.put((PdfName)var2_3, (PdfObject)var1_2);
                                            return;
                                            break;
                                        } while (true);
                                    }
                                    catch (Exception var0_1) {
                                        return;
                                    }
                                }
                                while (var4_8 < 4 && var8_9.hasMoreTokens()) {
                                    var1_2 = var8_9.nextToken();
                                    if (var1_2.equals("null")) {
                                        var7_5.add(PdfNull.PDFNULL);
                                    } else {
                                        var7_5.add(new PdfNumber((String)var1_2));
                                    }
                                    ++var4_8;
                                }
                            }
                            var0.put(PdfName.DEST, (PdfObject)var7_5);
                            return;
                        }
                        for (var4_8 = var5_7; var4_8 < 4 && var10_12.hasMoreTokens(); ++var4_8) {
                            var2_3 = var10_12.nextToken();
                            if (var2_3.equals("null")) {
                                var9_11.add(PdfNull.PDFNULL);
                                continue;
                            }
                            var9_11.add(new PdfNumber((String)var2_3));
                        }
                    }
                    var8_10.put(PdfName.D, var9_11);
                }
                var2_3 = (String)var1_2.get("File");
                if (var8_10.size() <= 0) return;
                if (var2_3 == null) return;
                var8_10.put(PdfName.S, PdfName.GOTOR);
                var8_10.put(PdfName.F, new PdfString((String)var2_3));
                var2_3 = (String)var1_2.get("NewWindow");
                var1_2 = var8_10;
                if (var2_3 == null) ** GOTO lbl79
                if (!var2_3.equals("true")) break block30;
                var1_2 = PdfName.NEWWINDOW;
                var2_3 = PdfBoolean.PDFTRUE;
                break block31;
            }
            var1_2 = var8_10;
            if (!var2_3.equals("false")) ** GOTO lbl79
            var1_2 = PdfName.NEWWINDOW;
            var2_3 = PdfBoolean.PDFFALSE;
        }
        var8_10.put((PdfName)var1_2, (PdfObject)var2_3);
        var1_2 = var8_10;
        ** while (true)
    }

    /*
     * Enabled aggressive block sorting
     */
    public static void eliminatePages(List<HashMap<String, Object>> object, int[] arrn) {
        if (object == null) {
            return;
        }
        ListIterator listIterator = object.listIterator();
        while (listIterator.hasNext()) {
            boolean bl2;
            HashMap hashMap = (HashMap)listIterator.next();
            boolean bl3 = "GoTo".equals(hashMap.get("Action"));
            boolean bl4 = bl2 = false;
            if (bl3) {
                object = (String)hashMap.get("Page");
                bl4 = bl2;
                if (object != null) {
                    int n2 = (object = object.trim()).indexOf(32);
                    if (n2 >= 0) {
                        object = object.substring(0, n2);
                    }
                    int n3 = Integer.parseInt((String)object);
                    int n4 = arrn.length;
                    n2 = 0;
                    do {
                        bl4 = bl2;
                        if (n2 >= (n4 & -2)) break;
                        if (n3 >= arrn[n2] && n3 <= arrn[n2 + 1]) {
                            bl4 = true;
                            break;
                        }
                        n2 += 2;
                    } while (true);
                }
            }
            List list = (List)hashMap.get("Kids");
            object = list;
            if (list != null) {
                SimpleBookmark.eliminatePages(list, arrn);
                object = list;
                if (list.isEmpty()) {
                    hashMap.remove("Kids");
                    object = null;
                }
            }
            if (!bl4) continue;
            if (object == null) {
                listIterator.remove();
                continue;
            }
            hashMap.remove("Action");
            hashMap.remove("Page");
            hashMap.remove("Named");
        }
        return;
    }

    public static void exportToXML(List<HashMap<String, Object>> list, OutputStream outputStream, String string2, boolean bl2) {
        SimpleBookmark.exportToXML(list, new BufferedWriter(new OutputStreamWriter(outputStream, IanaEncodings.getJavaEncoding(string2))), string2, bl2);
    }

    public static void exportToXML(List<HashMap<String, Object>> list, Writer writer, String string2, boolean bl2) {
        writer.write("<?xml version=\"1.0\" encoding=\"");
        writer.write(XMLUtil.escapeXML(string2, bl2));
        writer.write("\"?>\n<Bookmark>\n");
        SimpleBookmark.exportToXMLNode(list, writer, 1, bl2);
        writer.write("</Bookmark>\n");
        writer.flush();
    }

    public static void exportToXMLNode(List<HashMap<String, Object>> object, Writer writer, int n2, boolean bl2) {
        int n3;
        Object object2 = "";
        CharSequence charSequence = object2;
        if (n2 != -1) {
            n3 = 0;
            do {
                charSequence = object2;
                if (n3 >= n2) break;
                charSequence = new StringBuilder();
                charSequence.append((String)object2);
                charSequence.append("  ");
                object2 = charSequence.toString();
                ++n3;
            } while (true);
        }
        Iterator<HashMap<String, Object>> iterator = object.iterator();
        while (iterator.hasNext()) {
            Map.Entry entry;
            object = iterator.next();
            writer.write((String)charSequence);
            writer.write("<Title ");
            Iterator iterator2 = object.entrySet().iterator();
            object = null;
            object2 = null;
            while (iterator2.hasNext()) {
                block12 : {
                    String string2;
                    block11 : {
                        entry = iterator2.next();
                        String string3 = (String)entry.getKey();
                        if (string3.equals("Title")) {
                            object = (String)entry.getValue();
                            continue;
                        }
                        if (string3.equals("Kids")) {
                            object2 = (List)entry.getValue();
                            continue;
                        }
                        writer.write(string3);
                        writer.write("=\"");
                        string2 = (String)entry.getValue();
                        if (string3.equals("Named")) break block11;
                        entry = string2;
                        if (!string3.equals("NamedN")) break block12;
                    }
                    entry = SimpleNamedDestination.escapeBinaryString(string2);
                }
                writer.write(XMLUtil.escapeXML((String)((Object)entry), bl2));
                writer.write("\" ");
            }
            writer.write(">");
            entry = object;
            if (object == null) {
                entry = "";
            }
            writer.write(XMLUtil.escapeXML((String)((Object)entry), bl2));
            if (object2 != null) {
                writer.write("\n");
                n3 = n2 == -1 ? n2 : n2 + 1;
                SimpleBookmark.exportToXMLNode((List<HashMap<String, Object>>)object2, writer, n3, bl2);
                writer.write((String)charSequence);
            }
            writer.write("</Title>\n");
        }
    }

    public static List<HashMap<String, Object>> getBookmark(PdfReader pdfReader) {
        PdfObject pdfObject = PdfReader.getPdfObjectRelease(pdfReader.getCatalog().get(PdfName.OUTLINES));
        if (pdfObject != null && pdfObject.isDictionary()) {
            return SimpleBookmark.getBookmark(pdfReader, (PdfDictionary)pdfObject, false);
        }
        return null;
    }

    public static List<HashMap<String, Object>> getBookmark(PdfReader pdfReader, PdfDictionary pdfDictionary, boolean bl2) {
        pdfReader.getCatalog();
        if (pdfDictionary == null) {
            return null;
        }
        IntHashtable intHashtable = new IntHashtable();
        int n2 = pdfReader.getNumberOfPages();
        for (int i2 = 1; i2 <= n2; ++i2) {
            intHashtable.put(pdfReader.getPageOrigRef(i2).getNumber(), i2);
            pdfReader.releasePage(i2);
        }
        if (bl2) {
            return SimpleBookmark.bookmarkDepth(pdfReader, pdfDictionary, intHashtable, true);
        }
        return SimpleBookmark.bookmarkDepth(pdfReader, (PdfDictionary)PdfReader.getPdfObjectRelease(pdfDictionary.get(PdfName.FIRST)), intHashtable, false);
    }

    private static int getNumber(PdfIndirectReference pdfIndirectReference) {
        PdfDictionary pdfDictionary = (PdfDictionary)PdfReader.getPdfObjectRelease(pdfIndirectReference);
        PdfIndirectReference pdfIndirectReference2 = pdfIndirectReference;
        if (pdfDictionary.contains(PdfName.TYPE)) {
            pdfIndirectReference2 = pdfIndirectReference;
            if (pdfDictionary.get(PdfName.TYPE).equals(PdfName.PAGES)) {
                pdfIndirectReference2 = pdfIndirectReference;
                if (pdfDictionary.contains(PdfName.KIDS)) {
                    pdfIndirectReference2 = (PdfIndirectReference)((PdfArray)pdfDictionary.get(PdfName.KIDS)).getPdfObject(0);
                }
            }
        }
        return pdfIndirectReference2.getNumber();
    }

    public static List<HashMap<String, Object>> importFromXML(InputStream inputStream) {
        SimpleBookmark simpleBookmark = new SimpleBookmark();
        SimpleXMLParser.parse((SimpleXMLDocHandler)simpleBookmark, inputStream);
        return simpleBookmark.topList;
    }

    public static List<HashMap<String, Object>> importFromXML(Reader reader) {
        SimpleBookmark simpleBookmark = new SimpleBookmark();
        SimpleXMLParser.parse((SimpleXMLDocHandler)simpleBookmark, reader);
        return simpleBookmark.topList;
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    public static Object[] iterateOutlines(PdfWriter var0, PdfIndirectReference var1_1, List<HashMap<String, Object>> var2_2, boolean var3_4) {
        var11_5 = new PdfIndirectReference[var2_2.size()];
        for (var6_6 = 0; var6_6 < var11_5.length; ++var6_6) {
            var11_5[var6_6] = var0.getPdfIndirectReference();
        }
        var12_7 = var2_2.listIterator();
        var6_6 = 0;
        var8_8 = 0;
        do {
            block20 : {
                if (!var12_7.hasNext()) {
                    return new Object[]{var11_5[0], var11_5[var11_5.length - 1], var6_6};
                }
                var13_14 = (HashMap)var12_7.next();
                var10_13 = null;
                var14_15 = (List)var13_14.get("Kids");
                var2_2 = var10_13;
                if (var14_15 != null) {
                    var2_2 = var10_13;
                    if (!var14_15.isEmpty()) {
                        var2_2 = SimpleBookmark.iterateOutlines(var0, var11_5[var8_8], (List<HashMap<String, Object>>)var14_15, var3_4);
                    }
                }
                var10_13 = new PdfDictionary();
                var6_6 = var7_11 = var6_6 + 1;
                if (var2_2 != null) {
                    var10_13.put(PdfName.FIRST, (PdfIndirectReference)var2_2[0]);
                    var10_13.put(PdfName.LAST, (PdfIndirectReference)var2_2[1]);
                    var6_6 = (Integer)var2_2[2];
                    if ("false".equals(var13_14.get("Open"))) {
                        var10_13.put(PdfName.COUNT, new PdfNumber(- var6_6));
                        var6_6 = var7_11;
                    } else {
                        var10_13.put(PdfName.COUNT, new PdfNumber(var6_6));
                        var6_6 = var7_11 + var6_6;
                    }
                }
                var10_13.put(PdfName.PARENT, var1_1);
                if (var8_8 > 0) {
                    var10_13.put(PdfName.PREV, var11_5[var8_8 - 1]);
                }
                if (var8_8 < var11_5.length - 1) {
                    var10_13.put(PdfName.NEXT, var11_5[var8_8 + 1]);
                }
                var10_13.put(PdfName.TITLE, new PdfString((String)var13_14.get("Title"), "UnicodeBig"));
                var14_15 = (String)var13_14.get("Color");
                if (var14_15 != null) {
                    try {
                        var2_2 = new PdfArray();
                        var14_15 = new StringTokenizer((String)var14_15);
                        var7_11 = 0;
                        do {
                            if (var7_11 >= 3) {
                                var10_13.put(PdfName.C, (PdfObject)var2_2);
                                break block20;
                            }
                            var4_9 = var5_10 = Float.parseFloat(var14_15.nextToken());
                            if (var5_10 < 0.0f) {
                                var4_9 = 0.0f;
                            }
                            var5_10 = var4_9;
                            if (var4_9 <= 1.0f) ** break block21
                            var5_10 = 1.0f;
                            break;
                        } while (true);
                    }
                    catch (Exception var2_3) {}
                    {
                        
                        var2_2.add(new PdfNumber(var5_10));
                        ++var7_11;
                        continue;
                    }
                }
            }
            if ((var2_2 = (String)var13_14.get("Style")) != null) {
                var7_11 = (var2_2 = var2_2.toLowerCase()).indexOf("italic") >= 0 ? 1 : 0;
                var9_12 = var7_11;
                if (var2_2.indexOf("bold") < 0 || (var9_12 = var7_11 | 2) != 0) {
                    var10_13.put(PdfName.F, new PdfNumber(var9_12));
                }
            }
            SimpleBookmark.createOutlineAction(var10_13, var13_14, var0, var3_4);
            var0.addToBody((PdfObject)var10_13, var11_5[var8_8]);
            ++var8_8;
        } while (true);
    }

    /*
     * Enabled aggressive block sorting
     */
    private static String makeBookmarkParam(PdfArray pdfArray, IntHashtable intHashtable) {
        StringBuffer stringBuffer = new StringBuffer();
        PdfObject pdfObject = pdfArray.getPdfObject(0);
        int n2 = pdfObject.isNumber() ? ((PdfNumber)pdfObject).intValue() + 1 : intHashtable.get(SimpleBookmark.getNumber((PdfIndirectReference)pdfObject));
        stringBuffer.append(n2);
        stringBuffer.append(' ');
        stringBuffer.append(pdfArray.getPdfObject(1).toString().substring(1));
        n2 = 2;
        while (n2 < pdfArray.size()) {
            stringBuffer.append(' ');
            stringBuffer.append(pdfArray.getPdfObject(n2).toString());
            ++n2;
        }
        return stringBuffer.toString();
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Lifted jumps to return sites
     */
    private static void mapGotoBookmark(HashMap<String, Object> var0, PdfObject var1_1, IntHashtable var2_2) {
        block3 : {
            if (!var1_1.isString()) break block3;
            var1_1 = var1_1.toString();
            ** GOTO lbl7
        }
        if (var1_1.isName()) {
            var1_1 = PdfName.decodeName(var1_1.toString());
lbl7: // 2 sources:
            var0.put("Named", var1_1);
        } else if (var1_1.isArray()) {
            var0.put("Page", SimpleBookmark.makeBookmarkParam((PdfArray)var1_1, var2_2));
        }
        var0.put("Action", "GoTo");
    }

    public static void shiftPageNumbers(List<HashMap<String, Object>> object, int n2, int[] arrn) {
        if (object == null) {
            return;
        }
        ListIterator<HashMap<String, Object>> listIterator = object.listIterator();
        while (listIterator.hasNext()) {
            HashMap<String, Object> hashMap = listIterator.next();
            if ("GoTo".equals(hashMap.get("Action")) && (object = (String)hashMap.get("Page")) != null) {
                int n3;
                int n4;
                String string2;
                int n5;
                block9 : {
                    string2 = object.trim();
                    n5 = string2.indexOf(32);
                    n4 = n5 < 0 ? Integer.parseInt(string2) : Integer.parseInt(string2.substring(0, n5));
                    int n6 = 1;
                    if (arrn == null) {
                        n3 = n6;
                    } else {
                        int n7 = arrn.length;
                        for (n3 = 0; n3 < (n7 & -2); n3 += 2) {
                            if (n4 < arrn[n3] || n4 > arrn[n3 + 1]) continue;
                            n3 = n6;
                            break block9;
                        }
                        n3 = 0;
                    }
                }
                object = string2;
                if (n3 != 0) {
                    if (n5 < 0) {
                        object = Integer.toString(n4 + n2);
                    } else {
                        object = new StringBuilder();
                        object.append(n4 + n2);
                        object.append(string2.substring(n5));
                        object = object.toString();
                    }
                }
                hashMap.put("Page", object);
            }
            if ((object = (List)hashMap.get("Kids")) == null) continue;
            SimpleBookmark.shiftPageNumbers((List<HashMap<String, Object>>)object, n2, arrn);
        }
    }

    @Override
    public void endDocument() {
    }

    @Override
    public void endElement(String arrayList) {
        if (arrayList.equals((Object)"Bookmark")) {
            if (this.attr.isEmpty()) {
                return;
            }
            throw new RuntimeException(MessageLocalization.getComposedMessage("bookmark.end.tag.out.of.place", new Object[0]));
        }
        if (arrayList.equals((Object)"Title")) {
            HashMap<String, Object> hashMap = this.attr.pop();
            hashMap.put("Title", ((String)hashMap.get("Title")).trim());
            arrayList = (String)hashMap.get("Named");
            if (arrayList != null) {
                hashMap.put("Named", SimpleNamedDestination.unEscapeBinaryString((String)((Object)arrayList)));
            }
            if ((arrayList = (String)hashMap.get("NamedN")) != null) {
                hashMap.put("NamedN", SimpleNamedDestination.unEscapeBinaryString((String)((Object)arrayList)));
            }
            if (this.attr.isEmpty()) {
                this.topList.add(hashMap);
                return;
            }
            HashMap<String, Object> hashMap2 = this.attr.peek();
            List list = (List)hashMap2.get("Kids");
            arrayList = list;
            if (list == null) {
                arrayList = new ArrayList<HashMap<String, Object>>();
                hashMap2.put("Kids", arrayList);
            }
            arrayList.add(hashMap);
            return;
        }
        throw new RuntimeException(MessageLocalization.getComposedMessage("invalid.end.tag.1", arrayList));
    }

    @Override
    public void startDocument() {
    }

    @Override
    public void startElement(String object, Map<String, String> map) {
        if (this.topList == null) {
            if (object.equals("Bookmark")) {
                this.topList = new ArrayList();
                return;
            }
            throw new RuntimeException(MessageLocalization.getComposedMessage("root.element.is.not.bookmark.1", object));
        }
        if (object.equals("Title")) {
            object = new HashMap<String, String>(map);
            object.put("Title", "");
            object.remove("Kids");
            this.attr.push((HashMap<String, Object>)object);
            return;
        }
        throw new RuntimeException(MessageLocalization.getComposedMessage("tag.1.not.allowed", object));
    }

    @Override
    public void text(String string2) {
        if (this.attr.isEmpty()) {
            return;
        }
        HashMap<String, Object> hashMap = this.attr.peek();
        String string3 = (String)hashMap.get("Title");
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append(string3);
        stringBuilder.append(string2);
        hashMap.put("Title", stringBuilder.toString());
    }
}

