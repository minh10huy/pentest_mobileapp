/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf;

import com.itextpdf.text.BaseColor;
import com.itextpdf.text.error_messages.MessageLocalization;
import com.itextpdf.text.pdf.CMYKColor;
import com.itextpdf.text.pdf.ICachedColorSpace;
import com.itextpdf.text.pdf.LabColor;
import com.itextpdf.text.pdf.PdfArray;
import com.itextpdf.text.pdf.PdfDictionary;
import com.itextpdf.text.pdf.PdfName;
import com.itextpdf.text.pdf.PdfObject;
import com.itextpdf.text.pdf.PdfWriter;
import java.util.Arrays;

public class PdfLabColor
implements ICachedColorSpace {
    float[] blackPoint = null;
    float[] range = null;
    float[] whitePoint = new float[]{0.9505f, 1.0f, 1.089f};

    public PdfLabColor() {
    }

    public PdfLabColor(float[] arrf) {
        if (arrf != null && arrf.length == 3 && arrf[0] >= 1.0E-6f && arrf[2] >= 1.0E-6f && arrf[1] >= 0.999999f && arrf[1] <= 1.000001f) {
            this.whitePoint = arrf;
            return;
        }
        throw new RuntimeException(MessageLocalization.getComposedMessage("lab.cs.white.point", new Object[0]));
    }

    public PdfLabColor(float[] arrf, float[] arrf2) {
        this(arrf);
        this.blackPoint = arrf2;
    }

    public PdfLabColor(float[] arrf, float[] arrf2, float[] arrf3) {
        this(arrf, arrf2);
        this.range = arrf3;
    }

    private static double fXyz(double d2) {
        if (d2 > 0.008856) {
            return Math.pow(d2, 0.3333333333333333);
        }
        return d2 * 7.787 + 0.13793103448275862;
    }

    @Override
    public boolean equals(Object object) {
        if (this == object) {
            return true;
        }
        if (!(object instanceof PdfLabColor)) {
            return false;
        }
        object = (PdfLabColor)object;
        if (!Arrays.equals(this.blackPoint, object.blackPoint)) {
            return false;
        }
        if (!Arrays.equals(this.range, object.range)) {
            return false;
        }
        if (!Arrays.equals(this.whitePoint, object.whitePoint)) {
            return false;
        }
        return true;
    }

    @Override
    public PdfObject getPdfObject(PdfWriter object) {
        object = new PdfArray(PdfName.LAB);
        PdfDictionary pdfDictionary = new PdfDictionary();
        if (this.whitePoint != null && this.whitePoint.length == 3 && this.whitePoint[0] >= 1.0E-6f && this.whitePoint[2] >= 1.0E-6f && this.whitePoint[1] >= 0.999999f && this.whitePoint[1] <= 1.000001f) {
            pdfDictionary.put(PdfName.WHITEPOINT, new PdfArray(this.whitePoint));
            if (this.blackPoint != null) {
                if (this.blackPoint.length == 3 && this.blackPoint[0] >= -1.0E-6f && this.blackPoint[1] >= -1.0E-6f && this.blackPoint[2] >= -1.0E-6f) {
                    pdfDictionary.put(PdfName.BLACKPOINT, new PdfArray(this.blackPoint));
                } else {
                    throw new RuntimeException(MessageLocalization.getComposedMessage("lab.cs.black.point", new Object[0]));
                }
            }
            if (this.range != null) {
                if (this.range.length == 4 && this.range[0] <= this.range[1] && this.range[2] <= this.range[3]) {
                    pdfDictionary.put(PdfName.RANGE, new PdfArray(this.range));
                } else {
                    throw new RuntimeException(MessageLocalization.getComposedMessage("lab.cs.range", new Object[0]));
                }
            }
            object.add(pdfDictionary);
            return object;
        }
        throw new RuntimeException(MessageLocalization.getComposedMessage("lab.cs.white.point", new Object[0]));
    }

    @Override
    public int hashCode() {
        int n2 = Arrays.hashCode(this.whitePoint);
        float[] arrf = this.blackPoint;
        int n3 = 0;
        int n4 = arrf != null ? Arrays.hashCode(this.blackPoint) : 0;
        if (this.range != null) {
            n3 = Arrays.hashCode(this.range);
        }
        return (n2 * 31 + n4) * 31 + n3;
    }

    CMYKColor lab2Cmyk(float f2, float f3, float f4) {
        double[] arrd = this.lab2RgbLinear(f2, f3, f4);
        double d2 = arrd[0];
        double d3 = arrd[1];
        double d4 = arrd[2];
        double d5 = 0.0;
        if (d2 == 0.0 && d3 == 0.0 && f4 == 0.0f) {
            d3 = d2 = 0.0;
            d4 = 1.0;
        } else {
            d2 = 1.0 - d2;
            d3 = 1.0 - d3;
            double d6 = 1.0 - d4;
            d4 = Math.min(d2, Math.min(d3, d6));
            double d7 = 1.0 - d4;
            d5 = (d2 - d4) / d7;
            d2 = (d3 - d4) / d7;
            d3 = (d6 - d4) / d7;
        }
        return new CMYKColor((float)d5, (float)d2, (float)d3, (float)d4);
    }

    public BaseColor lab2Rgb(float f2, float f3, float f4) {
        double[] arrd = this.lab2RgbLinear(f2, f3, f4);
        return new BaseColor((float)arrd[0], (float)arrd[1], (float)arrd[2]);
    }

    protected double[] lab2RgbLinear(float f2, float f3, float f4) {
        float f5;
        float[] arrf = this.range;
        int n2 = 0;
        if (arrf != null && this.range.length == 4) {
            float f6 = f3 < this.range[0] ? this.range[0] : f3;
            f3 = f6;
            if (f6 > this.range[1]) {
                f3 = this.range[1];
            }
            f6 = f4 < this.range[2] ? this.range[2] : f4;
            f5 = f3;
            f4 = f6;
            if (f6 > this.range[3]) {
                f4 = this.range[3];
                f5 = f3;
            }
        } else {
            f5 = f3;
        }
        double d2 = (double)(f2 + 16.0f) / 116.0;
        double d3 = (double)f5 / 500.0 + d2;
        double d4 = d2 - (double)f4 / 200.0;
        d3 = d3 > 0.20689655172413793 ? (double)this.whitePoint[0] * (d3 * d3 * d3) : (d3 - 0.13793103448275862) * 3.0 * 0.04280618311533888 * (double)this.whitePoint[0];
        d2 = d2 > 0.20689655172413793 ? (double)this.whitePoint[1] * (d2 * d2 * d2) : (double)this.whitePoint[1] * ((d2 - 0.13793103448275862) * 3.0 * 0.04280618311533888);
        d4 = d4 > 0.20689655172413793 ? (double)this.whitePoint[2] * (d4 * d4 * d4) : (double)this.whitePoint[2] * ((d4 - 0.13793103448275862) * 3.0 * 0.04280618311533888);
        arrf = new double[]{(float)(3.241 * d3 - 1.5374 * d2 - 0.4986 * d4), (float)((- d3) * 0.9692 + 1.876 * d2 - 0.0416 * d4), (float)(d3 * 0.0556 - d2 * 0.204 + d4 * 1.057)};
        while (n2 < 3) {
            d3 = arrf[n2] <= 0.0031308 ? (double)(arrf[n2] * 12.92) : Math.pow(arrf[n2], 0.4166666666666667) * 1.055 - 0.055;
            arrf[n2] = (float)d3;
            if (arrf[n2] < 0.0) {
                arrf[n2] = (float)0.0;
            } else if (arrf[n2] > 1.0) {
                arrf[n2] = (float)1.0;
            }
            ++n2;
        }
        return arrf;
    }

    public LabColor rgb2lab(BaseColor baseColor) {
        double d2 = (float)baseColor.getRed() / 255.0f;
        double d3 = (float)baseColor.getGreen() / 255.0f;
        double d4 = (float)baseColor.getBlue() / 255.0f;
        d2 = d2 > 0.04045 ? Math.pow((d2 + 0.055) / 1.055, 2.2) : (d2 /= 12.92);
        d3 = d3 > 0.04045 ? Math.pow((d3 + 0.055) / 1.055, 2.2) : (d3 /= 12.92);
        d4 = d4 > 0.04045 ? Math.pow((d4 + 0.055) / 1.055, 2.2) : (d4 /= 12.92);
        double d5 = 0.2126 * d2 + 0.7152 * d3 + 0.0722 * d4;
        return new LabColor(this, (float)Math.round((PdfLabColor.fXyz(d5 / (double)this.whitePoint[1]) * 116.0 - 16.0) * 1000.0) / 1000.0f, (float)Math.round((PdfLabColor.fXyz((0.4124 * d2 + 0.3576 * d3 + 0.1805 * d4) / (double)this.whitePoint[0]) - PdfLabColor.fXyz(d5 / (double)this.whitePoint[1])) * 500.0 * 1000.0) / 1000.0f, (float)Math.round((PdfLabColor.fXyz(d5 / (double)this.whitePoint[1]) - PdfLabColor.fXyz((d2 * 0.0193 + d3 * 0.1192 + d4 * 0.9505) / (double)this.whitePoint[2])) * 200.0 * 1000.0) / 1000.0f);
    }
}

