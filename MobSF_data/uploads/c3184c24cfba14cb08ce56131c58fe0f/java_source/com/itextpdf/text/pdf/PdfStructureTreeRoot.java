/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf;

import com.itextpdf.text.pdf.PdfArray;
import com.itextpdf.text.pdf.PdfDictionary;
import com.itextpdf.text.pdf.PdfIndirectObject;
import com.itextpdf.text.pdf.PdfIndirectReference;
import com.itextpdf.text.pdf.PdfName;
import com.itextpdf.text.pdf.PdfNameTree;
import com.itextpdf.text.pdf.PdfNumberTree;
import com.itextpdf.text.pdf.PdfObject;
import com.itextpdf.text.pdf.PdfWriter;
import com.itextpdf.text.pdf.interfaces.IPdfStructureElement;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;

public class PdfStructureTreeRoot
extends PdfDictionary
implements IPdfStructureElement {
    private PdfDictionary classMap = null;
    protected HashMap<PdfName, PdfObject> classes = null;
    private HashMap<String, PdfObject> idTreeMap;
    private HashMap<Integer, PdfIndirectReference> numTree = null;
    private HashMap<Integer, PdfObject> parentTree = new HashMap();
    private PdfIndirectReference reference;
    private PdfWriter writer;

    PdfStructureTreeRoot(PdfWriter pdfWriter) {
        super(PdfName.STRUCTTREEROOT);
        this.writer = pdfWriter;
        this.reference = pdfWriter.getPdfIndirectReference();
    }

    /*
     * Enabled aggressive block sorting
     */
    private void createNumTree() {
        if (this.numTree != null) {
            return;
        }
        this.numTree = new HashMap();
        Iterator<Integer> iterator = this.parentTree.keySet().iterator();
        while (iterator.hasNext()) {
            HashMap<Integer, PdfIndirectReference> hashMap;
            Integer n2 = iterator.next();
            PdfObject pdfObject = this.parentTree.get(n2);
            if (pdfObject.isArray()) {
                pdfObject = (PdfArray)pdfObject;
                hashMap = this.numTree;
                pdfObject = this.writer.addToBody(pdfObject).getIndirectReference();
            } else {
                if (!(pdfObject instanceof PdfIndirectReference)) continue;
                hashMap = this.numTree;
                pdfObject = (PdfIndirectReference)pdfObject;
            }
            hashMap.put(n2, (PdfIndirectReference)pdfObject);
        }
        return;
    }

    void buildTree() {
        this.createNumTree();
        Object object = PdfNumberTree.writeTree(this.numTree, this.writer);
        if (object != null) {
            this.put(PdfName.PARENTTREE, this.writer.addToBody((PdfObject)object).getIndirectReference());
        }
        if (this.classMap != null && !this.classes.isEmpty()) {
            for (Map.Entry entry : this.classes.entrySet()) {
                PdfObject pdfObject = (PdfObject)entry.getValue();
                if (pdfObject.isDictionary()) {
                    this.classMap.put((PdfName)entry.getKey(), this.writer.addToBody(pdfObject).getIndirectReference());
                    continue;
                }
                if (!pdfObject.isArray()) continue;
                PdfArray pdfArray = new PdfArray();
                pdfObject = (PdfArray)pdfObject;
                for (int i2 = 0; i2 < pdfObject.size(); ++i2) {
                    if (!pdfObject.getPdfObject(i2).isDictionary()) continue;
                    pdfArray.add(this.writer.addToBody(pdfObject.getAsDict(i2)).getIndirectReference());
                }
                this.classMap.put((PdfName)entry.getKey(), pdfArray);
            }
            this.put(PdfName.CLASSMAP, this.writer.addToBody(this.classMap).getIndirectReference());
        }
        if (this.idTreeMap != null && !this.idTreeMap.isEmpty()) {
            object = PdfNameTree.writeTree(this.idTreeMap, this.writer);
            this.put(PdfName.IDTREE, (PdfObject)object);
        }
        this.writer.addToBody((PdfObject)this, this.reference);
    }

    @Override
    public PdfObject getAttribute(PdfName pdfName) {
        PdfDictionary pdfDictionary = this.getAsDict(PdfName.A);
        if (pdfDictionary != null && pdfDictionary.contains(pdfName)) {
            return pdfDictionary.get(pdfName);
        }
        return null;
    }

    public PdfObject getMappedClass(PdfName pdfName) {
        if (this.classes == null) {
            return null;
        }
        return this.classes.get(pdfName);
    }

    public HashMap<Integer, PdfIndirectReference> getNumTree() {
        if (this.numTree == null) {
            this.createNumTree();
        }
        return this.numTree;
    }

    public PdfIndirectReference getReference() {
        return this.reference;
    }

    public PdfWriter getWriter() {
        return this.writer;
    }

    public void mapClass(PdfName pdfName, PdfObject pdfObject) {
        if (this.classMap == null) {
            this.classMap = new PdfDictionary();
            this.classes = new HashMap();
        }
        this.classes.put(pdfName, pdfObject);
    }

    public void mapRole(PdfName pdfName, PdfName pdfName2) {
        PdfDictionary pdfDictionary;
        PdfDictionary pdfDictionary2 = pdfDictionary = (PdfDictionary)this.get(PdfName.ROLEMAP);
        if (pdfDictionary == null) {
            pdfDictionary2 = new PdfDictionary();
            this.put(PdfName.ROLEMAP, pdfDictionary2);
        }
        pdfDictionary2.put(pdfName, pdfName2);
    }

    void putIDTree(String string2, PdfObject pdfObject) {
        if (this.idTreeMap == null) {
            this.idTreeMap = new HashMap();
        }
        this.idTreeMap.put(string2, pdfObject);
    }

    void setAnnotationMark(int n2, PdfIndirectReference pdfIndirectReference) {
        this.parentTree.put(n2, pdfIndirectReference);
    }

    @Override
    public void setAttribute(PdfName pdfName, PdfObject pdfObject) {
        PdfDictionary pdfDictionary;
        PdfDictionary pdfDictionary2 = pdfDictionary = this.getAsDict(PdfName.A);
        if (pdfDictionary == null) {
            pdfDictionary2 = new PdfDictionary();
            this.put(PdfName.A, pdfDictionary2);
        }
        pdfDictionary2.put(pdfName, pdfObject);
    }

    void setPageMark(int n2, PdfIndirectReference pdfIndirectReference) {
        PdfArray pdfArray;
        Integer n3 = n2;
        PdfArray pdfArray2 = pdfArray = (PdfArray)this.parentTree.get(n3);
        if (pdfArray == null) {
            pdfArray2 = new PdfArray();
            this.parentTree.put(n3, pdfArray2);
        }
        pdfArray2.add(pdfIndirectReference);
    }
}

