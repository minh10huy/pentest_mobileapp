/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  org.spongycastle.asn1.ASN1Encodable
 *  org.spongycastle.asn1.ASN1InputStream
 *  org.spongycastle.asn1.ASN1ObjectIdentifier
 *  org.spongycastle.asn1.ASN1Primitive
 *  org.spongycastle.asn1.ASN1Sequence
 *  org.spongycastle.asn1.ASN1Set
 *  org.spongycastle.asn1.ASN1String
 *  org.spongycastle.asn1.ASN1TaggedObject
 */
package com.itextpdf.text.pdf.security;

import com.itextpdf.text.ExceptionConverter;
import com.itextpdf.text.error_messages.MessageLocalization;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.security.cert.X509Certificate;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.spongycastle.asn1.ASN1Encodable;
import org.spongycastle.asn1.ASN1InputStream;
import org.spongycastle.asn1.ASN1ObjectIdentifier;
import org.spongycastle.asn1.ASN1Primitive;
import org.spongycastle.asn1.ASN1Sequence;
import org.spongycastle.asn1.ASN1Set;
import org.spongycastle.asn1.ASN1String;
import org.spongycastle.asn1.ASN1TaggedObject;

public class CertificateInfo {
    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public static ASN1Primitive getIssuer(byte[] aSN1Sequence) {
        try {
            aSN1Sequence = (ASN1Sequence)new ASN1InputStream((InputStream)new ByteArrayInputStream((byte[])aSN1Sequence)).readObject();
            int n2 = aSN1Sequence.getObjectAt(0) instanceof ASN1TaggedObject ? 3 : 2;
            return (ASN1Primitive)aSN1Sequence.getObjectAt(n2);
        }
        catch (IOException iOException) {
            throw new ExceptionConverter(iOException);
        }
    }

    public static X500Name getIssuerFields(X509Certificate object) {
        try {
            object = new X500Name((ASN1Sequence)CertificateInfo.getIssuer(object.getTBSCertificate()));
            return object;
        }
        catch (Exception exception) {
            throw new ExceptionConverter(exception);
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public static ASN1Primitive getSubject(byte[] aSN1Sequence) {
        try {
            aSN1Sequence = (ASN1Sequence)new ASN1InputStream((InputStream)new ByteArrayInputStream((byte[])aSN1Sequence)).readObject();
            int n2 = aSN1Sequence.getObjectAt(0) instanceof ASN1TaggedObject ? 5 : 4;
            return (ASN1Primitive)aSN1Sequence.getObjectAt(n2);
        }
        catch (IOException iOException) {
            throw new ExceptionConverter(iOException);
        }
    }

    public static X500Name getSubjectFields(X509Certificate object) {
        if (object != null) {
            try {
                object = new X500Name((ASN1Sequence)CertificateInfo.getSubject(object.getTBSCertificate()));
                return object;
            }
            catch (Exception exception) {
                throw new ExceptionConverter(exception);
            }
        }
        return null;
    }

    public static class X500Name {
        public static final ASN1ObjectIdentifier C = new ASN1ObjectIdentifier("2.5.4.6");
        public static final ASN1ObjectIdentifier CN;
        public static final ASN1ObjectIdentifier DC;
        public static final Map<ASN1ObjectIdentifier, String> DefaultSymbols;
        public static final ASN1ObjectIdentifier E;
        public static final ASN1ObjectIdentifier EmailAddress;
        public static final ASN1ObjectIdentifier GENERATION;
        public static final ASN1ObjectIdentifier GIVENNAME;
        public static final ASN1ObjectIdentifier INITIALS;
        public static final ASN1ObjectIdentifier L;
        public static final ASN1ObjectIdentifier O;
        public static final ASN1ObjectIdentifier OU;
        public static final ASN1ObjectIdentifier SN;
        public static final ASN1ObjectIdentifier ST;
        public static final ASN1ObjectIdentifier SURNAME;
        public static final ASN1ObjectIdentifier T;
        public static final ASN1ObjectIdentifier UID;
        public static final ASN1ObjectIdentifier UNIQUE_IDENTIFIER;
        public Map<String, ArrayList<String>> values = new HashMap<String, ArrayList<String>>();

        static {
            O = new ASN1ObjectIdentifier("2.5.4.10");
            OU = new ASN1ObjectIdentifier("2.5.4.11");
            T = new ASN1ObjectIdentifier("2.5.4.12");
            CN = new ASN1ObjectIdentifier("2.5.4.3");
            SN = new ASN1ObjectIdentifier("2.5.4.5");
            L = new ASN1ObjectIdentifier("2.5.4.7");
            ST = new ASN1ObjectIdentifier("2.5.4.8");
            SURNAME = new ASN1ObjectIdentifier("2.5.4.4");
            GIVENNAME = new ASN1ObjectIdentifier("2.5.4.42");
            INITIALS = new ASN1ObjectIdentifier("2.5.4.43");
            GENERATION = new ASN1ObjectIdentifier("2.5.4.44");
            UNIQUE_IDENTIFIER = new ASN1ObjectIdentifier("2.5.4.45");
            E = EmailAddress = new ASN1ObjectIdentifier("1.2.840.113549.1.9.1");
            DC = new ASN1ObjectIdentifier("0.9.2342.19200300.100.1.25");
            UID = new ASN1ObjectIdentifier("0.9.2342.19200300.100.1.1");
            DefaultSymbols = new HashMap<ASN1ObjectIdentifier, String>();
            DefaultSymbols.put(C, "C");
            DefaultSymbols.put(O, "O");
            DefaultSymbols.put(T, "T");
            DefaultSymbols.put(OU, "OU");
            DefaultSymbols.put(CN, "CN");
            DefaultSymbols.put(L, "L");
            DefaultSymbols.put(ST, "ST");
            DefaultSymbols.put(SN, "SN");
            DefaultSymbols.put(EmailAddress, "E");
            DefaultSymbols.put(DC, "DC");
            DefaultSymbols.put(UID, "UID");
            DefaultSymbols.put(SURNAME, "SURNAME");
            DefaultSymbols.put(GIVENNAME, "GIVENNAME");
            DefaultSymbols.put(INITIALS, "INITIALS");
            DefaultSymbols.put(GENERATION, "GENERATION");
        }

        public X500Name(String object) {
            X509NameTokenizer x509NameTokenizer = new X509NameTokenizer((String)object);
            while (x509NameTokenizer.hasMoreTokens()) {
                object = x509NameTokenizer.nextToken();
                int n2 = object.indexOf(61);
                if (n2 != -1) {
                    String string2 = object.substring(0, n2).toUpperCase();
                    String string3 = object.substring(n2 + 1);
                    ArrayList<String> arrayList = this.values.get(string2);
                    object = arrayList;
                    if (arrayList == null) {
                        object = new ArrayList<String>();
                        this.values.put(string2, (ArrayList<String>)object);
                    }
                    object.add(string3);
                    continue;
                }
                throw new IllegalArgumentException(MessageLocalization.getComposedMessage("badly.formated.directory.string", new Object[0]));
            }
        }

        public X500Name(ASN1Sequence object) {
            Enumeration enumeration = object.getObjects();
            while (enumeration.hasMoreElements()) {
                ASN1Set aSN1Set = (ASN1Set)enumeration.nextElement();
                for (int i2 = 0; i2 < aSN1Set.size(); ++i2) {
                    ASN1Sequence aSN1Sequence = (ASN1Sequence)aSN1Set.getObjectAt(i2);
                    String string2 = DefaultSymbols.get((Object)aSN1Sequence.getObjectAt(0));
                    if (string2 == null) continue;
                    ArrayList<String> arrayList = this.values.get(string2);
                    object = arrayList;
                    if (arrayList == null) {
                        object = new ArrayList();
                        this.values.put(string2, (ArrayList<String>)object);
                    }
                    object.add(((ASN1String)aSN1Sequence.getObjectAt(1)).getString());
                }
            }
        }

        public String getField(String object) {
            if ((object = (List)this.values.get(object)) == null) {
                return null;
            }
            return (String)object.get(0);
        }

        public List<String> getFieldArray(String string2) {
            return this.values.get(string2);
        }

        public Map<String, ArrayList<String>> getFields() {
            return this.values;
        }

        public String toString() {
            return this.values.toString();
        }
    }

    public static class X509NameTokenizer {
        private StringBuffer buf = new StringBuffer();
        private int index;
        private String oid;

        public X509NameTokenizer(String string2) {
            this.oid = string2;
            this.index = -1;
        }

        public boolean hasMoreTokens() {
            if (this.index != this.oid.length()) {
                return true;
            }
            return false;
        }

        public String nextToken() {
            int n2;
            if (this.index == this.oid.length()) {
                return null;
            }
            this.buf.setLength(0);
            boolean bl2 = false;
            boolean bl3 = false;
            for (n2 = this.index + 1; n2 != this.oid.length(); ++n2) {
                block6 : {
                    char c2;
                    block5 : {
                        block4 : {
                            c2 = this.oid.charAt(n2);
                            if (c2 != '\"') break block4;
                            if (bl2) break block5;
                            bl3 ^= true;
                            break block6;
                        }
                        if (!bl2 && !bl3) {
                            if (c2 == '\\') {
                                bl2 = true;
                                continue;
                            }
                            if (c2 == ',') break;
                            this.buf.append(c2);
                            continue;
                        }
                    }
                    this.buf.append(c2);
                }
                bl2 = false;
            }
            this.index = n2;
            return this.buf.toString().trim();
        }
    }

}

