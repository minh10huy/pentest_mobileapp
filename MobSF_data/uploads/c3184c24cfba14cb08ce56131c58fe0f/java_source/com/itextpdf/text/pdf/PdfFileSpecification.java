/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf;

import com.itextpdf.text.error_messages.MessageLocalization;
import com.itextpdf.text.io.StreamUtil;
import com.itextpdf.text.pdf.PdfBoolean;
import com.itextpdf.text.pdf.PdfDate;
import com.itextpdf.text.pdf.PdfDictionary;
import com.itextpdf.text.pdf.PdfEFStream;
import com.itextpdf.text.pdf.PdfIndirectObject;
import com.itextpdf.text.pdf.PdfIndirectReference;
import com.itextpdf.text.pdf.PdfName;
import com.itextpdf.text.pdf.PdfNumber;
import com.itextpdf.text.pdf.PdfObject;
import com.itextpdf.text.pdf.PdfString;
import com.itextpdf.text.pdf.PdfWriter;
import com.itextpdf.text.pdf.collection.PdfCollectionItem;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.URL;

public class PdfFileSpecification
extends PdfDictionary {
    protected PdfIndirectReference ref;
    protected PdfWriter writer;

    public PdfFileSpecification() {
        super(PdfName.FILESPEC);
    }

    public static PdfFileSpecification fileEmbedded(PdfWriter pdfWriter, String string2, String string3, byte[] arrby) {
        return PdfFileSpecification.fileEmbedded(pdfWriter, string2, string3, arrby, 9);
    }

    public static PdfFileSpecification fileEmbedded(PdfWriter pdfWriter, String string2, String string3, byte[] arrby, int n2) {
        return PdfFileSpecification.fileEmbedded(pdfWriter, string2, string3, arrby, null, null, n2);
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    public static PdfFileSpecification fileEmbedded(PdfWriter var0, String var1_6, String var2_8, byte[] var3_9, String var4_10, PdfDictionary var5_11, int var6_12) {
        block22 : {
            block24 : {
                block23 : {
                    block20 : {
                        block21 : {
                            var10_13 = new PdfFileSpecification();
                            var10_13.writer = var0;
                            var10_13.put(PdfName.F, new PdfString((String)var2_8));
                            var10_13.setUnicodeFileName((String)var2_8, false);
                            var9_14 = null;
                            var7_15 = null;
                            if (var3_9 != null) ** GOTO lbl44
                            var2_8 = var9_14;
                            var8_16 = var0.getPdfIndirectReference();
                            var2_8 = var9_14;
                            if (new File((String)var1_6).canRead()) {
                                var2_8 = var9_14;
                                var1_6 = new FileInputStream((String)var1_6);
                            } else {
                                var2_8 = var9_14;
                                if (var1_6.startsWith("file:/")) break block20;
                                var2_8 = var9_14;
                                if (var1_6.startsWith("http://")) break block20;
                                var2_8 = var9_14;
                                if (var1_6.startsWith("https://")) break block20;
                                var2_8 = var9_14;
                                if (var1_6.startsWith("jar:")) break block20;
                                var2_8 = var9_14;
                                var7_15 = StreamUtil.getResourceStream((String)var1_6);
                                if (var7_15 == null) break block21;
                                var1_6 = var7_15;
                            }
                            ** GOTO lbl39
                        }
                        try {
                            throw new IOException(MessageLocalization.getComposedMessage("1.not.found.as.file.or.resource", new Object[]{var1_6}));
                        }
                        catch (Throwable var0_1) {
                            var1_6 = var7_15;
                            break block22;
                        }
                    }
                    var2_8 = var9_14;
                    var1_6 = new URL((String)var1_6).openStream();
lbl39: // 3 sources:
                    var2_8 = var1_6;
                    var9_14 = new PdfEFStream((InputStream)var1_6, (PdfWriter)var0);
                    var7_15 = var8_16;
                    var2_8 = var9_14;
                    break block23;
lbl44: // 1 sources:
                    var2_8 = var9_14;
                    var1_6 = new PdfEFStream(var3_9);
                    var8_16 = null;
                    var2_8 = var1_6;
                    var1_6 = var8_16;
                }
                try {
                    var2_8.put(PdfName.TYPE, PdfName.EMBEDDEDFILE);
                    var2_8.flateCompress(var6_12);
                    var8_16 = new PdfDictionary();
                    if (var5_11 != null) {
                        var8_16.merge(var5_11);
                    }
                    if (!var8_16.contains(PdfName.MODDATE)) {
                        var8_16.put(PdfName.MODDATE, new PdfDate());
                    }
                    if (var3_9 == null) {
                        var2_8.put(PdfName.PARAMS, (PdfObject)var7_15);
                    } else {
                        var8_16.put(PdfName.SIZE, new PdfNumber(var2_8.getRawLength()));
                        var2_8.put(PdfName.PARAMS, var8_16);
                    }
                    if (var4_10 != null) {
                        var2_8.put(PdfName.SUBTYPE, new PdfName((String)var4_10));
                    }
                    var4_10 = var0.addToBody((PdfObject)var2_8).getIndirectReference();
                    if (var3_9 == null) {
                        var2_8.writeLength();
                        var8_16.put(PdfName.SIZE, new PdfNumber(var2_8.getRawLength()));
                        var0.addToBody(var8_16, (PdfIndirectReference)var7_15);
                    }
                    ** if (var1_6 == null) goto lbl-1000
                }
                catch (Throwable var0_2) {
                    // empty catch block
                }
lbl-1000: // 1 sources:
                {
                    var1_6.close();
                }
lbl-1000: // 2 sources:
                {
                    break block24;
                }
                break block22;
                catch (Exception var0_4) {}
            }
            var0 = new PdfDictionary();
            var0.put(PdfName.F, (PdfObject)var4_10);
            var0.put(PdfName.UF, (PdfObject)var4_10);
            var10_13.put(PdfName.EF, (PdfObject)var0);
            return var10_13;
            catch (Throwable var0_5) {
                var1_6 = var2_8;
            }
        }
        if (var1_6 == null) throw var0_3;
        try {
            var1_6.close();
        }
        catch (Exception var1_7) {
            throw var0_3;
        }
        throw var0_3;
    }

    public static PdfFileSpecification fileEmbedded(PdfWriter pdfWriter, String string2, String string3, byte[] arrby, boolean bl2) {
        int n2 = bl2 ? 9 : 0;
        return PdfFileSpecification.fileEmbedded(pdfWriter, string2, string3, arrby, null, null, n2);
    }

    public static PdfFileSpecification fileEmbedded(PdfWriter pdfWriter, String string2, String string3, byte[] arrby, boolean bl2, String string4, PdfDictionary pdfDictionary) {
        int n2 = bl2 ? 9 : 0;
        return PdfFileSpecification.fileEmbedded(pdfWriter, string2, string3, arrby, string4, pdfDictionary, n2);
    }

    public static PdfFileSpecification fileExtern(PdfWriter pdfWriter, String string2) {
        PdfFileSpecification pdfFileSpecification = new PdfFileSpecification();
        pdfFileSpecification.writer = pdfWriter;
        pdfFileSpecification.put(PdfName.F, new PdfString(string2));
        pdfFileSpecification.setUnicodeFileName(string2, false);
        return pdfFileSpecification;
    }

    public static PdfFileSpecification url(PdfWriter pdfWriter, String string2) {
        PdfFileSpecification pdfFileSpecification = new PdfFileSpecification();
        pdfFileSpecification.writer = pdfWriter;
        pdfFileSpecification.put(PdfName.FS, PdfName.URL);
        pdfFileSpecification.put(PdfName.F, new PdfString(string2));
        return pdfFileSpecification;
    }

    public void addCollectionItem(PdfCollectionItem pdfCollectionItem) {
        this.put(PdfName.CI, pdfCollectionItem);
    }

    public void addDescription(String string2, boolean bl2) {
        PdfName pdfName = PdfName.DESC;
        String string3 = bl2 ? "UnicodeBig" : "PDF";
        this.put(pdfName, new PdfString(string2, string3));
    }

    public PdfIndirectReference getReference() {
        if (this.ref != null) {
            return this.ref;
        }
        this.ref = this.writer.addToBody(this).getIndirectReference();
        return this.ref;
    }

    public void setMultiByteFileName(byte[] arrby) {
        this.put(PdfName.F, new PdfString(arrby).setHexWriting(true));
    }

    public void setUnicodeFileName(String string2, boolean bl2) {
        PdfName pdfName = PdfName.UF;
        String string3 = bl2 ? "UnicodeBig" : "PDF";
        this.put(pdfName, new PdfString(string2, string3));
    }

    public void setVolatile(boolean bl2) {
        this.put(PdfName.V, new PdfBoolean(bl2));
    }

    @Override
    public void toPdf(PdfWriter pdfWriter, OutputStream outputStream) {
        PdfWriter.checkPdfIsoConformance(pdfWriter, 10, this);
        super.toPdf(pdfWriter, outputStream);
    }
}

