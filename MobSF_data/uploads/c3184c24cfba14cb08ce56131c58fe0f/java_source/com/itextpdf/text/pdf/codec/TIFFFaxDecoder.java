/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf.codec;

import com.itextpdf.text.error_messages.MessageLocalization;
import com.itextpdf.text.exceptions.InvalidImageException;

public class TIFFFaxDecoder {
    static short[] additionalMakeup;
    static short[] black;
    static byte[] flipTable;
    static short[] initBlack;
    static int[] table1;
    static int[] table2;
    static short[] twoBitBlack;
    static byte[] twoDCodes;
    static short[] white;
    private int bitPointer;
    private int bytePointer;
    private int changingElemSize = 0;
    private int compression = 2;
    private int[] currChangingElems;
    private byte[] data;
    private int fillBits = 0;
    private long fillOrder;
    private int h;
    private int lastChangingElement = 0;
    private int oneD;
    private int[] prevChangingElems;
    private boolean recoverFromImageError;
    private int uncompressedMode = 0;
    private int w;

    static {
        table1 = new int[]{0, 1, 3, 7, 15, 31, 63, 127, 255};
        table2 = new int[]{0, 128, 192, 224, 240, 248, 252, 254, 255};
        flipTable = new byte[]{0, -128, 64, -64, 32, -96, 96, -32, 16, -112, 80, -48, 48, -80, 112, -16, 8, -120, 72, -56, 40, -88, 104, -24, 24, -104, 88, -40, 56, -72, 120, -8, 4, -124, 68, -60, 36, -92, 100, -28, 20, -108, 84, -44, 52, -76, 116, -12, 12, -116, 76, -52, 44, -84, 108, -20, 28, -100, 92, -36, 60, -68, 124, -4, 2, -126, 66, -62, 34, -94, 98, -30, 18, -110, 82, -46, 50, -78, 114, -14, 10, -118, 74, -54, 42, -86, 106, -22, 26, -102, 90, -38, 58, -70, 122, -6, 6, -122, 70, -58, 38, -90, 102, -26, 22, -106, 86, -42, 54, -74, 118, -10, 14, -114, 78, -50, 46, -82, 110, -18, 30, -98, 94, -34, 62, -66, 126, -2, 1, -127, 65, -63, 33, -95, 97, -31, 17, -111, 81, -47, 49, -79, 113, -15, 9, -119, 73, -55, 41, -87, 105, -23, 25, -103, 89, -39, 57, -71, 121, -7, 5, -123, 69, -59, 37, -91, 101, -27, 21, -107, 85, -43, 53, -75, 117, -11, 13, -115, 77, -51, 45, -83, 109, -19, 29, -99, 93, -35, 61, -67, 125, -3, 3, -125, 67, -61, 35, -93, 99, -29, 19, -109, 83, -45, 51, -77, 115, -13, 11, -117, 75, -53, 43, -85, 107, -21, 27, -101, 91, -37, 59, -69, 123, -5, 7, -121, 71, -57, 39, -89, 103, -25, 23, -105, 87, -41, 55, -73, 119, -9, 15, -113, 79, -49, 47, -81, 111, -17, 31, -97, 95, -33, 63, -65, 127, -1};
        white = new short[]{6430, 6400, 6400, 6400, 3225, 3225, 3225, 3225, 944, 944, 944, 944, 976, 976, 976, 976, 1456, 1456, 1456, 1456, 1488, 1488, 1488, 1488, 718, 718, 718, 718, 718, 718, 718, 718, 750, 750, 750, 750, 750, 750, 750, 750, 1520, 1520, 1520, 1520, 1552, 1552, 1552, 1552, 428, 428, 428, 428, 428, 428, 428, 428, 428, 428, 428, 428, 428, 428, 428, 428, 654, 654, 654, 654, 654, 654, 654, 654, 1072, 1072, 1072, 1072, 1104, 1104, 1104, 1104, 1136, 1136, 1136, 1136, 1168, 1168, 1168, 1168, 1200, 1200, 1200, 1200, 1232, 1232, 1232, 1232, 622, 622, 622, 622, 622, 622, 622, 622, 1008, 1008, 1008, 1008, 1040, 1040, 1040, 1040, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 1712, 1712, 1712, 1712, 1744, 1744, 1744, 1744, 846, 846, 846, 846, 846, 846, 846, 846, 1264, 1264, 1264, 1264, 1296, 1296, 1296, 1296, 1328, 1328, 1328, 1328, 1360, 1360, 1360, 1360, 1392, 1392, 1392, 1392, 1424, 1424, 1424, 1424, 686, 686, 686, 686, 686, 686, 686, 686, 910, 910, 910, 910, 910, 910, 910, 910, 1968, 1968, 1968, 1968, 2000, 2000, 2000, 2000, 2032, 2032, 2032, 2032, 16, 16, 16, 16, 10257, 10257, 10257, 10257, 12305, 12305, 12305, 12305, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 878, 878, 878, 878, 878, 878, 878, 878, 1904, 1904, 1904, 1904, 1936, 1936, 1936, 1936, -18413, -18413, -16365, -16365, -14317, -14317, -10221, -10221, 590, 590, 590, 590, 590, 590, 590, 590, 782, 782, 782, 782, 782, 782, 782, 782, 1584, 1584, 1584, 1584, 1616, 1616, 1616, 1616, 1648, 1648, 1648, 1648, 1680, 1680, 1680, 1680, 814, 814, 814, 814, 814, 814, 814, 814, 1776, 1776, 1776, 1776, 1808, 1808, 1808, 1808, 1840, 1840, 1840, 1840, 1872, 1872, 1872, 1872, 6157, 6157, 6157, 6157, 6157, 6157, 6157, 6157, 6157, 6157, 6157, 6157, 6157, 6157, 6157, 6157, -12275, -12275, -12275, -12275, -12275, -12275, -12275, -12275, -12275, -12275, -12275, -12275, -12275, -12275, -12275, -12275, 14353, 14353, 14353, 14353, 16401, 16401, 16401, 16401, 22547, 22547, 24595, 24595, 20497, 20497, 20497, 20497, 18449, 18449, 18449, 18449, 26643, 26643, 28691, 28691, 30739, 30739, -32749, -32749, -30701, -30701, -28653, -28653, -26605, -26605, -24557, -24557, -22509, -22509, -20461, -20461, 8207, 8207, 8207, 8207, 8207, 8207, 8207, 8207, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 492, 492, 492, 492, 492, 492, 492, 492, 492, 492, 492, 492, 492, 492, 492, 492, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232};
        additionalMakeup = new short[]{28679, 28679, 31752, -32759, -31735, -30711, -29687, -28663, 29703, 29703, 30727, 30727, -27639, -26615, -25591, -24567};
        initBlack = new short[]{3226, 6412, 200, 168, 38, 38, 134, 134, 100, 100, 100, 100, 68, 68, 68, 68};
        twoBitBlack = new short[]{292, 260, 226, 226};
        black = new short[]{62, 62, 30, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 588, 588, 588, 588, 588, 588, 588, 588, 1680, 1680, 20499, 22547, 24595, 26643, 1776, 1776, 1808, 1808, -24557, -22509, -20461, -18413, 1904, 1904, 1936, 1936, -16365, -14317, 782, 782, 782, 782, 814, 814, 814, 814, -12269, -10221, 10257, 10257, 12305, 12305, 14353, 14353, 16403, 18451, 1712, 1712, 1744, 1744, 28691, 30739, -32749, -30701, -28653, -26605, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 750, 750, 750, 750, 1616, 1616, 1648, 1648, 1424, 1424, 1456, 1456, 1488, 1488, 1520, 1520, 1840, 1840, 1872, 1872, 1968, 1968, 8209, 8209, 524, 524, 524, 524, 524, 524, 524, 524, 556, 556, 556, 556, 556, 556, 556, 556, 1552, 1552, 1584, 1584, 2000, 2000, 2032, 2032, 976, 976, 1008, 1008, 1040, 1040, 1072, 1072, 1296, 1296, 1328, 1328, 718, 718, 718, 718, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 4113, 4113, 6161, 6161, 848, 848, 880, 880, 912, 912, 944, 944, 622, 622, 622, 622, 654, 654, 654, 654, 1104, 1104, 1136, 1136, 1168, 1168, 1200, 1200, 1232, 1232, 1264, 1264, 686, 686, 686, 686, 1360, 1360, 1392, 1392, 12, 12, 12, 12, 12, 12, 12, 12, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390};
        twoDCodes = new byte[]{80, 88, 23, 71, 30, 30, 62, 62, 4, 4, 4, 4, 4, 4, 4, 4, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41};
    }

    public TIFFFaxDecoder(long l2, int n2, int n3) {
        this.fillOrder = l2;
        this.w = n2;
        this.h = n3;
        this.bitPointer = 0;
        this.bytePointer = 0;
        this.prevChangingElems = new int[n2 *= 2];
        this.currChangingElems = new int[n2];
    }

    private boolean advancePointer() {
        if (this.bitPointer != 0) {
            ++this.bytePointer;
            this.bitPointer = 0;
        }
        return true;
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    private int decodeBlackCodeWord() {
        int n2;
        int n3;
        int n4;
        int n5;
        block5 : {
            n5 = 0;
            n3 = 0;
            while (n5 == 0) {
                n4 = this.nextLesserThan8Bits(4);
                n2 = (n4 = initBlack[n4]) >>> 5 & 2047;
                if (n2 == 100) {
                    n4 = this.nextNBits(9);
                    n2 = black[n4];
                    int n6 = n2 >>> 1 & 15;
                    if (n6 == 12) {
                        this.updatePointer(5);
                        n4 = this.nextLesserThan8Bits(4);
                        n4 = additionalMakeup[n4];
                        n3 += n4 >>> 4 & 4095;
                        this.updatePointer(4 - (n4 >>> 1 & 7));
                        continue;
                    }
                    if (n6 == 15) throw new RuntimeException(MessageLocalization.getComposedMessage("eol.code.word.encountered.in.black.run", new Object[0]));
                    n4 = n3 + (n2 >>> 5 & 2047);
                    this.updatePointer(9 - n6);
                    n3 = n4;
                    if ((n2 & 1) == 0) return n4;
                    continue;
                }
                break block5;
            }
            return n3;
        }
        if (n2 == 200) {
            n5 = this.nextLesserThan8Bits(2);
            n5 = twoBitBlack[n5];
            n3 += n5 >>> 5 & 2047;
            this.updatePointer(2 - (n5 >>> 1 & 15));
            do {
                return n3;
                break;
            } while (true);
        }
        n3 += n2;
        this.updatePointer(4 - (n4 >>> 1 & 15));
        return n3;
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    private int decodeWhiteCodeWord() {
        boolean bl2 = true;
        int n2 = 0;
        while (bl2) {
            int n3 = this.nextNBits(10);
            int n4 = white[n3];
            int n5 = n4 >>> 1 & 15;
            if (n5 == 12) {
                n4 = this.nextLesserThan8Bits(2);
                n3 = additionalMakeup[n4 | n3 << 2 & 12];
                n2 += n3 >>> 4 & 4095;
                this.updatePointer(4 - (n3 >>> 1 & 7));
                continue;
            }
            if (n5 == 0) throw new InvalidImageException(MessageLocalization.getComposedMessage("invalid.code.encountered", new Object[0]));
            if (n5 == 15) {
                if (n2 != 0) throw new RuntimeException(MessageLocalization.getComposedMessage("eol.code.word.encountered.in.white.run", new Object[0]));
                return n2;
            }
            n3 = n2 + (n4 >>> 5 & 2047);
            this.updatePointer(10 - n5);
            n2 = n3;
            if ((n4 & 1) == 0) return n3;
        }
        return n2;
    }

    private void getNextChangingElement(int n2, boolean bl2, int[] arrn) {
        int[] arrn2 = this.prevChangingElems;
        int n3 = this.changingElemSize;
        int n4 = this.lastChangingElement > 0 ? this.lastChangingElement - 1 : 0;
        n4 = bl2 ? (n4 &= -2) : (n4 |= 1);
        while (n4 < n3) {
            int n5 = arrn2[n4];
            if (n5 > n2) {
                this.lastChangingElement = n4;
                arrn[0] = n5;
                break;
            }
            n4 += 2;
        }
        if ((n2 = n4 + 1) < n3) {
            arrn[1] = arrn2[n2];
        }
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Lifted jumps to return sites
     */
    private int nextLesserThan8Bits(int var1_1) {
        block6 : {
            block5 : {
                var2_2 = this.data.length - 1;
                var4_3 = this.bytePointer;
                if (this.fillOrder != 1L) break block5;
                var3_4 = this.data[var4_3];
                if (var4_3 == var2_2) ** GOTO lbl-1000
                var2_2 = this.data[var4_3 + 1];
                break block6;
            }
            if (this.fillOrder != 2L) throw new RuntimeException(MessageLocalization.getComposedMessage("tiff.fill.order.tag.must.be.either.1.or.2", new Object[0]));
            if (this.recoverFromImageError && var4_3 >= this.data.length) {
                var2_2 = 0;
                var3_4 = 0;
            } else {
                var3_4 = TIFFFaxDecoder.flipTable[this.data[var4_3] & 255];
                if (var4_3 == var2_2) lbl-1000: // 2 sources:
                {
                    var2_2 = 0;
                } else {
                    var2_2 = TIFFFaxDecoder.flipTable[this.data[var4_3 + 1] & 255];
                }
            }
        }
        var6_5 = 8 - this.bitPointer;
        var4_3 = var1_1 - var6_5;
        var5_6 = var6_5 - var1_1;
        if (var5_6 >= 0) {
            var2_2 = (TIFFFaxDecoder.table1[var6_5] & var3_4) >>> var5_6;
            this.bitPointer += var1_1;
            var1_1 = var2_2;
            if (this.bitPointer != 8) return var1_1;
            this.bitPointer = 0;
            ++this.bytePointer;
            return var2_2;
        }
        var1_1 = TIFFFaxDecoder.table1[var6_5];
        var5_6 = - var5_6;
        var1_1 = (var2_2 & TIFFFaxDecoder.table2[var4_3]) >>> 8 - var4_3 | (var1_1 & var3_4) << var5_6;
        ++this.bytePointer;
        this.bitPointer = var4_3;
        return var1_1;
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Lifted jumps to return sites
     */
    private int nextNBits(int var1_1) {
        block9 : {
            block10 : {
                block7 : {
                    block6 : {
                        block8 : {
                            var3_2 = this.data.length - 1;
                            var4_3 = this.bytePointer;
                            if (this.fillOrder != 1L) break block6;
                            var2_4 = this.data[var4_3];
                            if (var4_3 == var3_2) break block7;
                            var5_5 = var4_3 + 1;
                            if (var5_5 != var3_2) break block8;
                            var3_2 = this.data[var5_5];
                            ** GOTO lbl25
                        }
                        var3_2 = this.data[var5_5];
                        var4_3 = this.data[var4_3 + 2];
                        break block9;
                    }
                    if (this.fillOrder != 2L) throw new RuntimeException(MessageLocalization.getComposedMessage("tiff.fill.order.tag.must.be.either.1.or.2", new Object[0]));
                    var2_4 = TIFFFaxDecoder.flipTable[this.data[var4_3] & 255];
                    if (var4_3 != var3_2) break block10;
                }
                var3_2 = 0;
                ** GOTO lbl25
            }
            var5_5 = var4_3 + 1;
            if (var5_5 == var3_2) {
                var3_2 = TIFFFaxDecoder.flipTable[this.data[var5_5] & 255];
lbl25: // 3 sources:
                var4_3 = 0;
            } else {
                var3_2 = TIFFFaxDecoder.flipTable[this.data[var5_5] & 255];
                var4_3 = TIFFFaxDecoder.flipTable[this.data[var4_3 + 2] & 255];
            }
        }
        var7_6 = 8 - this.bitPointer;
        var6_7 = var1_1 - var7_6;
        if (var6_7 > 8) {
            var1_1 = var6_7 - 8;
            var5_5 = 8;
        } else {
            var5_5 = var6_7;
            var1_1 = 0;
        }
        ++this.bytePointer;
        var7_6 = TIFFFaxDecoder.table1[var7_6];
        var3_2 = (var3_2 & TIFFFaxDecoder.table2[var5_5]) >>> 8 - var5_5;
        if (var1_1 != 0) {
            var3_2 = var3_2 << var1_1 | (var4_3 & TIFFFaxDecoder.table2[var1_1]) >>> 8 - var1_1;
            ++this.bytePointer;
            this.bitPointer = var1_1;
            var1_1 = var3_2;
            return (var2_4 & var7_6) << var6_7 | var1_1;
        }
        if (var5_5 == 8) {
            this.bitPointer = 0;
            ++this.bytePointer;
            var1_1 = var3_2;
            return (var2_4 & var7_6) << var6_7 | var1_1;
        }
        this.bitPointer = var5_5;
        var1_1 = var3_2;
        return (var2_4 & var7_6) << var6_7 | var1_1;
    }

    private int readEOL(boolean bl2) {
        if (this.fillBits == 0) {
            int n2 = this.nextNBits(12);
            if (bl2 && n2 == 0 && this.nextNBits(4) == 1) {
                this.fillBits = 1;
                return 1;
            }
            if (n2 != 1) {
                throw new RuntimeException(MessageLocalization.getComposedMessage("scanline.must.begin.with.eol.code.word", new Object[0]));
            }
        } else if (this.fillBits == 1) {
            int n3 = 8 - this.bitPointer;
            if (this.nextNBits(n3) == 0) {
                if (n3 < 4 && this.nextNBits(8) != 0) {
                    throw new RuntimeException(MessageLocalization.getComposedMessage("all.fill.bits.preceding.eol.code.must.be.0", new Object[0]));
                }
                while ((n3 = this.nextNBits(8)) != 1) {
                    if (n3 == 0) continue;
                    throw new RuntimeException(MessageLocalization.getComposedMessage("all.fill.bits.preceding.eol.code.must.be.0", new Object[0]));
                }
            } else {
                throw new RuntimeException(MessageLocalization.getComposedMessage("all.fill.bits.preceding.eol.code.must.be.0", new Object[0]));
            }
        }
        if (this.oneD == 0) {
            return 1;
        }
        return this.nextLesserThan8Bits(1);
    }

    public static void reverseBits(byte[] arrby) {
        for (int i2 = 0; i2 < arrby.length; ++i2) {
            arrby[i2] = flipTable[arrby[i2] & 255];
        }
    }

    private void setToBlack(byte[] arrby, int n2, int n3, int n4) {
        n3 = n2 * 8 + n3;
        int n5 = n4 + n3;
        int n6 = n3 >> 3;
        n4 = n3 & 7;
        n2 = n3;
        if (n4 > 0) {
            n4 = 1 << 7 - n4;
            byte by2 = arrby[n6];
            n2 = n3;
            for (n3 = n4; n3 > 0 && n2 < n5; n3 >>= 1, ++n2) {
                by2 = (byte)(by2 | n3);
            }
            arrby[n6] = by2;
        }
        n3 = n2 >> 3;
        do {
            if (n2 >= n5 - 7) break;
            arrby[n3] = -1;
            n2 += 8;
            ++n3;
        } while (true);
        for (n4 = n2; n4 < n5; ++n4) {
            n2 = n4 >> 3;
            if (this.recoverFromImageError && n2 >= arrby.length) continue;
            arrby[n2] = (byte)(arrby[n2] | 1 << 7 - (n4 & 7));
        }
    }

    private void updatePointer(int n2) {
        int n3;
        n2 = n3 = this.bitPointer - n2;
        if (n3 < 0) {
            --this.bytePointer;
            n2 = n3 + 8;
        }
        this.bitPointer = n2;
    }

    public void decode1D(byte[] arrby, byte[] arrby2, int n2, int n3) {
        this.data = arrby2;
        int n4 = (this.w + 7) / 8;
        this.bitPointer = 0;
        this.bytePointer = 0;
        int n5 = 0;
        for (int i2 = 0; i2 < n3; ++i2) {
            this.decodeNextScanline(arrby, n5, n2);
            n5 += n4;
        }
    }

    /*
     * Enabled aggressive block sorting
     */
    public void decode2D(byte[] arrby, byte[] arrby2, int n2, int n3, long l2) {
        this.data = arrby2;
        this.compression = 3;
        this.bitPointer = 0;
        this.bytePointer = 0;
        int n4 = (this.w + 7) / 8;
        arrby2 = new int[2];
        this.oneD = (int)(l2 & 1L);
        this.uncompressedMode = (int)((l2 & 2L) >> 1);
        this.fillBits = (int)((l2 & 4L) >> 2);
        if (this.readEOL(true) != 1) {
            throw new RuntimeException(MessageLocalization.getComposedMessage("first.scanline.must.be.1d.encoded", new Object[0]));
        }
        this.decodeNextScanline(arrby, 0, n2);
        int n5 = n4 + 0;
        int n6 = 1;
        while (n6 < n3) {
            if (this.readEOL(false) != 0) {
                this.decodeNextScanline(arrby, n5, n2);
            } else {
                int[] arrn = this.prevChangingElems;
                this.prevChangingElems = this.currChangingElems;
                this.currChangingElems = arrn;
                this.lastChangingElement = 0;
                int n7 = n2;
                int n8 = -1;
                boolean bl2 = true;
                int n9 = 0;
                while (n7 < this.w) {
                    this.getNextChangingElement(n8, bl2, arrby2);
                    int n10 = arrby2[0];
                    n8 = arrby2[1];
                    int n11 = this.nextLesserThan8Bits(7);
                    int n12 = twoDCodes[n11] & 255;
                    n11 = (n12 & 120) >>> 3;
                    n12 &= 7;
                    if (n11 == 0) {
                        if (!bl2) {
                            this.setToBlack(arrby, n5, n7, n8 - n7);
                        }
                        this.updatePointer(7 - n12);
                        n7 = n8;
                        continue;
                    }
                    if (n11 == 1) {
                        this.updatePointer(7 - n12);
                        if (bl2) {
                            arrn = this.currChangingElems;
                            n10 = n9 + 1;
                            arrn[n9] = n7 += this.decodeWhiteCodeWord();
                            n8 = this.decodeBlackCodeWord();
                            this.setToBlack(arrby, n5, n7, n8);
                            arrn = this.currChangingElems;
                            n8 = n10 + 1;
                            arrn[n10] = n7 += n8;
                        } else {
                            n8 = this.decodeBlackCodeWord();
                            this.setToBlack(arrby, n5, n7, n8);
                            arrn = this.currChangingElems;
                            n10 = n9 + 1;
                            arrn[n9] = n7 += n8;
                            arrn = this.currChangingElems;
                            n8 = n10 + 1;
                            arrn[n10] = n7 += this.decodeWhiteCodeWord();
                        }
                        n9 = n8;
                        n8 = n7;
                        continue;
                    }
                    if (n11 > 8) {
                        throw new RuntimeException(MessageLocalization.getComposedMessage("invalid.code.encountered.while.decoding.2d.group.3.compressed.data", new Object[0]));
                    }
                    this.currChangingElems[n9] = n8 = n10 + (n11 - 5);
                    if (!bl2) {
                        this.setToBlack(arrby, n5, n7, n8 - n7);
                    }
                    bl2 ^= true;
                    this.updatePointer(7 - n12);
                    n8 = n7 = n8;
                    ++n9;
                }
                this.currChangingElems[n9] = n7;
                this.changingElemSize = n9 + 1;
            }
            n5 += n4;
            ++n6;
        }
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Lifted jumps to return sites
     */
    public void decodeNextScanline(byte[] var1_1, int var2_2, int var3_3) {
        block12 : {
            this.changingElemSize = 0;
            var6_4 = 1;
            var4_5 = var3_3;
            do {
                var5_6 = var4_5;
                if (var4_5 >= this.w) break block12;
                var5_6 = var6_4;
                while (var5_6 != 0) {
                    var3_3 = this.nextNBits(10);
                    var6_4 = TIFFFaxDecoder.white[var3_3];
                    var7_7 = var6_4 >>> 1 & 15;
                    if (var7_7 == 12) {
                        var6_4 = this.nextLesserThan8Bits(2);
                        var3_3 = TIFFFaxDecoder.additionalMakeup[12 & var3_3 << 2 | var6_4];
                        var4_5 += var3_3 >>> 4 & 4095;
                        this.updatePointer(4 - (var3_3 >>> 1 & 7));
                        continue;
                    }
                    if (var7_7 == 0) throw new RuntimeException(MessageLocalization.getComposedMessage("invalid.code.encountered", new Object[0]));
                    if (var7_7 == 15) throw new RuntimeException(MessageLocalization.getComposedMessage("eol.code.word.encountered.in.white.run", new Object[0]));
                    var3_3 = var4_5 + (var6_4 >>> 5 & 2047);
                    this.updatePointer(10 - var7_7);
                    var4_5 = var3_3;
                    if ((var6_4 & 1) != 0) continue;
                    var8_8 = this.currChangingElems;
                    var4_5 = this.changingElemSize;
                    this.changingElemSize = var4_5 + 1;
                    var8_8[var4_5] = var3_3;
                    var5_6 = 0;
                    var4_5 = var3_3;
                }
                var3_3 = var4_5;
                if (var4_5 == this.w) {
                    var5_6 = var4_5;
                    if (this.compression == 2) {
                        var3_3 = var4_5;
lbl36: // 2 sources:
                        do {
                            this.advancePointer();
                            var5_6 = var3_3;
                            ** GOTO lbl94
                            break;
                        } while (true);
                    }
                    break block12;
                }
                while (var5_6 == 0) {
                    var4_5 = this.nextLesserThan8Bits(4);
                    var6_4 = (var4_5 = TIFFFaxDecoder.initBlack[var4_5]) >>> 5 & 2047;
                    if (var6_4 == 100) {
                        var4_5 = this.nextNBits(9);
                        var6_4 = TIFFFaxDecoder.black[var4_5];
                        var7_7 = var6_4 >>> 1 & 15;
                        var4_5 = var6_4 >>> 5 & 2047;
                        if (var7_7 == 12) {
                            this.updatePointer(5);
                            var4_5 = this.nextLesserThan8Bits(4);
                            var4_5 = TIFFFaxDecoder.additionalMakeup[var4_5];
                            var6_4 = var4_5 >>> 4 & 4095;
                            this.setToBlack(var1_1, var2_2, var3_3, var6_4);
                            var3_3 += var6_4;
                            this.updatePointer(4 - (var4_5 >>> 1 & 7));
                            continue;
                        }
                        if (var7_7 == 15) throw new RuntimeException(MessageLocalization.getComposedMessage("eol.code.word.encountered.in.black.run", new Object[0]));
                        this.setToBlack(var1_1, var2_2, var3_3, var4_5);
                        var4_5 = var3_3 + var4_5;
                        this.updatePointer(9 - var7_7);
                        var3_3 = var4_5;
                        if ((var6_4 & 1) != 0) continue;
                        var8_8 = this.currChangingElems;
                        var3_3 = this.changingElemSize;
                        this.changingElemSize = var3_3 + 1;
                        var8_8[var3_3] = var4_5;
                        var3_3 = var4_5;
                    } else if (var6_4 == 200) {
                        var4_5 = this.nextLesserThan8Bits(2);
                        var4_5 = TIFFFaxDecoder.twoBitBlack[var4_5];
                        var5_6 = var4_5 >>> 5 & 2047;
                        this.setToBlack(var1_1, var2_2, var3_3, var5_6);
                        this.updatePointer(2 - (var4_5 >>> 1 & 15));
                        var8_8 = this.currChangingElems;
                        var4_5 = this.changingElemSize;
                        this.changingElemSize = var4_5 + 1;
                        var8_8[var4_5] = var3_3 += var5_6;
                    } else {
                        this.setToBlack(var1_1, var2_2, var3_3, var6_4);
                        this.updatePointer(4 - (var4_5 >>> 1 & 15));
                        var8_8 = this.currChangingElems;
                        var4_5 = this.changingElemSize;
                        this.changingElemSize = var4_5 + 1;
                        var8_8[var4_5] = var3_3 += var6_4;
                    }
                    var5_6 = 1;
                }
                var6_4 = var5_6;
                var4_5 = var3_3;
            } while (var3_3 != this.w);
            var5_6 = var3_3;
            ** while (this.compression == 2)
        }
        var1_1 = this.currChangingElems;
        var2_2 = this.changingElemSize;
        this.changingElemSize = var2_2 + 1;
        var1_1[var2_2] = var5_6;
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Lifted jumps to return sites
     */
    public void decodeT6(byte[] var1_1, byte[] var2_2, int var3_3, int var4_4, long var5_5) {
        this.data = var2_2;
        this.compression = 4;
        this.bitPointer = 0;
        this.bytePointer = 0;
        var17_6 = (this.w + 7) / 8;
        var2_2 = new int[2];
        this.uncompressedMode = (int)((var5_5 & 2L) >> 1);
        var20_7 = this.currChangingElems;
        var7_8 = this.changingElemSize = 0;
        this.changingElemSize = var7_8 + 1;
        var20_7[var7_8] = this.w;
        var7_8 = this.changingElemSize;
        this.changingElemSize = var7_8 + 1;
        var20_7[var7_8] = this.w;
        var13_9 = 0;
        var14_10 = 0;
        block0 : do {
            if (var13_9 >= var4_4) return;
            var20_7 = this.prevChangingElems;
            this.prevChangingElems = this.currChangingElems;
            this.currChangingElems = var20_7;
            this.lastChangingElement = 0;
            var8_11 = var3_3;
            var7_8 = 0;
            var15_16 = -1;
            var18_18 = true;
            block1 : do {
                block25 : {
                    block23 : {
                        block26 : {
                            block24 : {
                                if (var8_11 >= this.w || this.bytePointer >= this.data.length) break block23;
                                this.getNextChangingElement(var15_16, var18_18, var2_2);
                                var10_13 = var2_2[0];
                                var9_12 = var2_2[1];
                                var11_14 = this.nextLesserThan8Bits(7);
                                var11_14 = TIFFFaxDecoder.twoDCodes[var11_14] & 255;
                                var12_15 = (var11_14 & 120) >>> 3;
                                var11_14 &= 7;
                                if (var12_15 != 0) break block24;
                                if (!var18_18) {
                                    this.setToBlack(var1_1, var14_10, var8_11, var9_12 - var8_11);
                                }
                                this.updatePointer(7 - var11_14);
                                var12_15 = var9_12;
                                var19_19 = var18_18;
                                var11_14 = var7_8;
                                break block25;
                            }
                            if (var12_15 != 1) break block26;
                            this.updatePointer(7 - var11_14);
                            if (var18_18) {
                                var9_12 = var7_8 + 1;
                                var20_7[var7_8] = var8_11 += this.decodeWhiteCodeWord();
                                var7_8 = this.decodeBlackCodeWord();
                                this.setToBlack(var1_1, var14_10, var8_11, var7_8);
                                var7_8 = var8_11 + var7_8;
                                var8_11 = var9_12 + 1;
                                var20_7[var9_12] = var7_8;
                            } else {
                                var9_12 = this.decodeBlackCodeWord();
                                this.setToBlack(var1_1, var14_10, var8_11, var9_12);
                                var9_12 = var7_8 + 1;
                                var20_7[var7_8] = var8_11 += var9_12;
                                var7_8 = var8_11 + this.decodeWhiteCodeWord();
                                var8_11 = var9_12 + 1;
                                var20_7[var9_12] = var7_8;
                            }
                            var11_14 = var8_11;
                            ** GOTO lbl74
                        }
                        if (var12_15 <= 8) {
                            var20_7[var7_8] = var9_12 = var10_13 + (var12_15 - 5);
                            if (!var18_18) {
                                this.setToBlack(var1_1, var14_10, var8_11, var9_12 - var8_11);
                            }
                            var18_18 ^= true;
                            this.updatePointer(7 - var11_14);
                            var11_14 = var7_8 + 1;
                            var7_8 = var9_12;
lbl74: // 2 sources:
                            var9_12 = var7_8;
                            var12_15 = var7_8;
                            var19_19 = var18_18;
                        } else {
                            if (var12_15 == 11) {
                                if (this.nextLesserThan8Bits(3) != 7) throw new InvalidImageException(MessageLocalization.getComposedMessage("invalid.code.encountered.while.decoding.2d.group.4.compressed.data", new Object[0]));
                                var16_17 = false;
                                var10_13 = 0;
                                break block0;
                            }
                            var9_12 = this.w;
                            this.updatePointer(7 - var11_14);
                            var11_14 = var7_8;
                            var12_15 = var15_16;
                            var19_19 = var18_18;
                        }
                        break block25;
                    }
                    var9_12 = var7_8;
                    if (var7_8 < var20_7.length) {
                        var20_7[var7_8] = var8_11;
                        var9_12 = var7_8 + 1;
                    }
                    this.changingElemSize = var9_12;
                    var14_10 += var17_6;
                    ++var13_9;
                    continue block0;
                }
                do {
                    var8_11 = var9_12;
                    var7_8 = var11_14;
                    var15_16 = var12_15;
                    var18_18 = var19_19;
                    continue block1;
                    break;
                } while (true);
                break;
            } while (true);
            break;
        } while (true);
        do {
            var9_12 = var8_11;
            var11_14 = var7_8;
            var12_15 = var15_16;
            var19_19 = var18_18;
            if (var16_17) ** continue;
            var11_14 = var10_13;
            while (this.nextLesserThan8Bits(1) != 1) {
                ++var11_14;
            }
            var9_12 = var11_14;
            var12_15 = var8_11;
            var10_13 = var7_8;
            var19_19 = var18_18;
            if (var11_14 > 5) {
                var11_14 -= 6;
                var9_12 = var7_8;
                if (!var18_18) {
                    var9_12 = var7_8;
                    if (var11_14 > 0) {
                        var20_7[var7_8] = var8_11;
                        var9_12 = var7_8 + 1;
                    }
                }
                var12_15 = var8_11 + var11_14;
                if (var11_14 > 0) {
                    var18_18 = true;
                }
                if (this.nextLesserThan8Bits(1) == 0) {
                    var7_8 = var9_12;
                    if (!var18_18) {
                        var20_7[var9_12] = var12_15;
                        var7_8 = var9_12 + 1;
                    }
                    var18_18 = true;
                } else {
                    var7_8 = var9_12;
                    if (var18_18) {
                        var20_7[var9_12] = var12_15;
                        var7_8 = var9_12 + 1;
                    }
                    var18_18 = false;
                }
                var16_17 = true;
                var19_19 = var18_18;
                var10_13 = var7_8;
                var9_12 = var11_14;
            }
            if (var9_12 == 5) {
                var7_8 = var10_13;
                if (!var19_19) {
                    var20_7[var10_13] = var12_15;
                    var7_8 = var10_13 + 1;
                }
                var8_11 = var12_15 + var9_12;
                var18_18 = true;
                var10_13 = var9_12;
                continue;
            }
            var20_7[var10_13] = var7_8 = var12_15 + var9_12;
            this.setToBlack(var1_1, var14_10, var7_8, 1);
            var8_11 = var7_8 + 1;
            var7_8 = var10_13 + 1;
            var18_18 = false;
            var10_13 = var9_12;
        } while (true);
    }

    public void setRecoverFromImageError(boolean bl2) {
        this.recoverFromImageError = bl2;
    }
}

