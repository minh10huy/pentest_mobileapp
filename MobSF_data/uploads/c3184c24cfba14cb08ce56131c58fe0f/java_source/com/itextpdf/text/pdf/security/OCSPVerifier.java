/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  org.spongycastle.asn1.ASN1ObjectIdentifier
 *  org.spongycastle.asn1.ocsp.OCSPObjectIdentifiers
 *  org.spongycastle.cert.X509CertificateHolder
 *  org.spongycastle.cert.jcajce.JcaX509CertificateConverter
 *  org.spongycastle.cert.ocsp.BasicOCSPResp
 *  org.spongycastle.cert.ocsp.CertificateID
 *  org.spongycastle.cert.ocsp.CertificateStatus
 *  org.spongycastle.cert.ocsp.OCSPException
 *  org.spongycastle.cert.ocsp.SingleResp
 *  org.spongycastle.operator.ContentVerifierProvider
 *  org.spongycastle.operator.DigestCalculatorProvider
 *  org.spongycastle.operator.OperatorCreationException
 *  org.spongycastle.operator.bc.BcDigestCalculatorProvider
 *  org.spongycastle.operator.jcajce.JcaContentVerifierProviderBuilder
 */
package com.itextpdf.text.pdf.security;

import com.itextpdf.text.log.Logger;
import com.itextpdf.text.log.LoggerFactory;
import com.itextpdf.text.pdf.security.CRLVerifier;
import com.itextpdf.text.pdf.security.CertificateUtil;
import com.itextpdf.text.pdf.security.CertificateVerifier;
import com.itextpdf.text.pdf.security.OcspClientBouncyCastle;
import com.itextpdf.text.pdf.security.RootStoreVerifier;
import com.itextpdf.text.pdf.security.VerificationException;
import com.itextpdf.text.pdf.security.VerificationOK;
import java.io.Serializable;
import java.math.BigInteger;
import java.security.GeneralSecurityException;
import java.security.KeyStore;
import java.security.KeyStoreException;
import java.security.PublicKey;
import java.security.cert.CRL;
import java.security.cert.Certificate;
import java.security.cert.CertificateParsingException;
import java.security.cert.X509CRL;
import java.security.cert.X509Certificate;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.List;
import org.spongycastle.asn1.ASN1ObjectIdentifier;
import org.spongycastle.asn1.ocsp.OCSPObjectIdentifiers;
import org.spongycastle.cert.X509CertificateHolder;
import org.spongycastle.cert.jcajce.JcaX509CertificateConverter;
import org.spongycastle.cert.ocsp.BasicOCSPResp;
import org.spongycastle.cert.ocsp.CertificateID;
import org.spongycastle.cert.ocsp.CertificateStatus;
import org.spongycastle.cert.ocsp.OCSPException;
import org.spongycastle.cert.ocsp.SingleResp;
import org.spongycastle.operator.ContentVerifierProvider;
import org.spongycastle.operator.DigestCalculatorProvider;
import org.spongycastle.operator.OperatorCreationException;
import org.spongycastle.operator.bc.BcDigestCalculatorProvider;
import org.spongycastle.operator.jcajce.JcaContentVerifierProviderBuilder;

public class OCSPVerifier
extends RootStoreVerifier {
    protected static final Logger LOGGER = LoggerFactory.getLogger(OCSPVerifier.class);
    protected static final String id_kp_OCSPSigning = "1.3.6.1.5.5.7.3.9";
    protected List<BasicOCSPResp> ocsps;

    public OCSPVerifier(CertificateVerifier certificateVerifier, List<BasicOCSPResp> list) {
        super(certificateVerifier);
        this.ocsps = list;
    }

    public BasicOCSPResp getOcspResponse(X509Certificate x509Certificate, X509Certificate arrsingleResp) {
        if (x509Certificate == null && arrsingleResp == null) {
            return null;
        }
        if ((x509Certificate = new OcspClientBouncyCastle().getBasicOCSPResp(x509Certificate, (X509Certificate)arrsingleResp, null)) == null) {
            return null;
        }
        arrsingleResp = x509Certificate.getResponses();
        for (int i2 = 0; i2 < arrsingleResp.length; ++i2) {
            if (arrsingleResp[i2].getCertStatus() != CertificateStatus.GOOD) continue;
            return x509Certificate;
        }
        return null;
    }

    public boolean isSignatureValid(BasicOCSPResp basicOCSPResp, Certificate certificate) {
        try {
            boolean bl2 = basicOCSPResp.isSignatureValid(new JcaContentVerifierProviderBuilder().setProvider("BC").build(certificate.getPublicKey()));
            return bl2;
        }
        catch (OCSPException | OperatorCreationException operatorCreationException) {
            return false;
        }
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    public void isValidResponse(BasicOCSPResp var1_1, X509Certificate var2_4) {
        block15 : {
            block16 : {
                block17 : {
                    block13 : {
                        var6_9 = this.isSignatureValid(var1_1 /* !! */ , (Certificate)var2_8) != false ? var2_8 : null;
                        var7_10 = var6_9;
                        if (var6_9 != null) ** GOTO lbl36
                        if (var1_1 /* !! */ .getCerts() != null) break block17;
                        var7_10 = var6_9;
                        if (this.rootStore == null) break block13;
                        try {
                            var8_14 = this.rootStore.aliases();
lbl9: // 3 sources:
                            var7_10 = var6_9;
                            if (!var8_14.hasMoreElements()) break block13;
                            var7_10 = var8_14.nextElement();
                            if (!this.rootStore.isCertificateEntry((String)var7_10) || !(var5_18 = this.isSignatureValid(var1_1 /* !! */ , (Certificate)(var7_10 = (X509Certificate)this.rootStore.getCertificate((String)var7_10))))) ** GOTO lbl9
                            break block13;
                        }
                        catch (KeyStoreException var1_2) {}
                        var7_10 = null;
                    }
                    if (var7_10 == null) throw new VerificationException((Certificate)var2_8, "OCSP response could not be verified");
                    ** GOTO lbl36
                    catch (GeneralSecurityException var7_12) {
                        ** GOTO lbl9
                    }
                }
                var8_13 = var1_1 /* !! */ .getCerts();
                var4_15 = var8_13.length;
                var3_16 = 0;
                do lbl-1000: // 2 sources:
                {
                    var7_10 = var6_9;
                    if (var3_16 < var4_15) {
                        var7_10 = var8_13[var3_16];
                        var7_10 = new JcaX509CertificateConverter().getCertificate((X509CertificateHolder)var7_10);
                        var9_19 = var7_10.getExtendedKeyUsage();
                        if (var9_19 == null || !var9_19.contains("1.3.6.1.5.5.7.3.9") || !(var5_17 = this.isSignatureValid(var1_1 /* !! */ , (Certificate)var7_10))) break block14;
                    }
                    if (var7_10 == null) throw new VerificationException((Certificate)var2_8, "OCSP response could not be verified");
lbl36: // 3 sources:
                    var7_10.verify(var2_8.getPublicKey());
                    if (var7_10.getExtensionValue(OCSPObjectIdentifiers.id_pkix_ocsp_nocheck.getId()) != null) break block15;
                    var1_4 = CertificateUtil.getCRL((X509Certificate)var7_10);
                    break block16;
                    break;
                } while (true);
                catch (Exception var1_5) {}
                {
                    block14 : {
                        catch (Exception | CertificateParsingException var7_11) {}
                    }
                    ++var3_16;
                    ** while (true)
                }
                var1_6 = null;
            }
            if (var1_7 != null && var1_7 instanceof X509CRL) {
                var6_9 = new CRLVerifier(null, null);
                var6_9.setRootStore(this.rootStore);
                var6_9.setOnlineCheckingAllowed(this.onlineCheckingAllowed);
                var6_9.verify((X509CRL)var1_7, (X509Certificate)var7_10, (X509Certificate)var2_8, new Date());
                return;
            }
        }
        var7_10.checkValidity();
    }

    @Override
    public List<VerificationOK> verify(X509Certificate x509Certificate, X509Certificate x509Certificate2, Date date) {
        int n2;
        int n3;
        ArrayList<VerificationOK> arrayList = new ArrayList<VerificationOK>();
        Object object = this.ocsps;
        boolean bl2 = false;
        if (object != null) {
            object = this.ocsps.iterator();
            n3 = 0;
            do {
                n2 = n3++;
                if (object.hasNext()) {
                    if (!this.verify((BasicOCSPResp)object.next(), x509Certificate, x509Certificate2, date)) continue;
                    continue;
                }
                break;
            } while (true);
        } else {
            n2 = 0;
        }
        boolean bl3 = bl2;
        n3 = n2;
        if (this.onlineCheckingAllowed) {
            bl3 = bl2;
            n3 = n2;
            if (n2 == 0) {
                bl3 = bl2;
                n3 = n2;
                if (this.verify(this.getOcspResponse(x509Certificate, x509Certificate2), x509Certificate, x509Certificate2, date)) {
                    n3 = n2 + 1;
                    bl3 = true;
                }
            }
        }
        object = LOGGER;
        Serializable serializable = new StringBuilder();
        serializable.append("Valid OCSPs found: ");
        serializable.append(n3);
        object.info(serializable.toString());
        if (n3 > 0) {
            serializable = this.getClass();
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("Valid OCSPs Found: ");
            stringBuilder.append(n3);
            object = bl3 ? " (online)" : "";
            stringBuilder.append((String)object);
            arrayList.add(new VerificationOK(x509Certificate, (Class<? extends CertificateVerifier>)serializable, stringBuilder.toString()));
        }
        if (this.verifier != null) {
            arrayList.addAll(this.verifier.verify(x509Certificate, x509Certificate2, date));
        }
        return arrayList;
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public boolean verify(BasicOCSPResp basicOCSPResp, X509Certificate x509Certificate, X509Certificate x509Certificate2, Date date) {
        if (basicOCSPResp == null) {
            return false;
        }
        SingleResp[] arrsingleResp = basicOCSPResp.getResponses();
        int n2 = 0;
        X509Certificate x509Certificate3 = x509Certificate2;
        do {
            if (n2 >= arrsingleResp.length) {
                return false;
            }
            if (x509Certificate.getSerialNumber().equals(arrsingleResp[n2].getCertID().getSerialNumber())) {
                void var6_12;
                Date date2;
                block11 : {
                    void var6_8;
                    x509Certificate2 = var6_8;
                    if (var6_8 == null) {
                        x509Certificate2 = x509Certificate;
                    }
                    try {
                        if (arrsingleResp[n2].getCertID().matchesIssuer(new X509CertificateHolder(x509Certificate2.getEncoded()), (DigestCalculatorProvider)new BcDigestCalculatorProvider())) break block11;
                        LOGGER.info("OCSP: Issuers doesn't match.");
                        X509Certificate x509Certificate4 = x509Certificate2;
                    }
                    catch (OCSPException oCSPException) {
                        X509Certificate x509Certificate5 = x509Certificate2;
                    }
                }
                Date date3 = date2 = arrsingleResp[n2].getNextUpdate();
                if (date2 == null) {
                    Date date4 = new Date(arrsingleResp[n2].getThisUpdate().getTime() + 180000L);
                    LOGGER.info(String.format("No 'next update' for OCSP Response; assuming %s", date4));
                }
                if (date.after((Date)var6_12)) {
                    LOGGER.info(String.format("OCSP no longer valid: %s after %s", date, var6_12));
                    X509Certificate x509Certificate6 = x509Certificate2;
                } else {
                    X509Certificate x509Certificate7 = x509Certificate2;
                    if (arrsingleResp[n2].getCertStatus() == CertificateStatus.GOOD) {
                        this.isValidResponse(basicOCSPResp, x509Certificate2);
                        return true;
                    }
                }
            }
            ++n2;
        } while (true);
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    @Deprecated
    public boolean verifyResponse(BasicOCSPResp basicOCSPResp, X509Certificate x509Certificate) {
        try {
            this.isValidResponse(basicOCSPResp, x509Certificate);
            return true;
        }
        catch (Exception exception) {
            return false;
        }
    }
}

