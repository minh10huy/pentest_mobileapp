/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf.codec;

import com.itextpdf.text.ExceptionConverter;
import com.itextpdf.text.Image;
import com.itextpdf.text.ImgRaw;
import com.itextpdf.text.Utilities;
import com.itextpdf.text.error_messages.MessageLocalization;
import com.itextpdf.text.pdf.PdfArray;
import com.itextpdf.text.pdf.PdfDictionary;
import com.itextpdf.text.pdf.PdfName;
import com.itextpdf.text.pdf.PdfNumber;
import com.itextpdf.text.pdf.PdfObject;
import com.itextpdf.text.pdf.PdfString;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.util.ArrayList;

public class GifImage {
    protected static final int MaxStackSize = 4096;
    protected int bgColor;
    protected int bgIndex;
    protected byte[] block;
    protected int blockSize;
    protected int delay;
    protected int dispose;
    protected ArrayList<GifFrame> frames;
    protected byte[] fromData;
    protected URL fromUrl;
    protected boolean gctFlag;
    protected int height;
    protected int ih;
    protected DataInputStream in;
    protected boolean interlace;
    protected int iw;
    protected int ix;
    protected int iy;
    protected boolean lctFlag;
    protected int lctSize;
    protected int m_bpc;
    protected byte[] m_curr_table;
    protected int m_gbpc;
    protected byte[] m_global_table;
    protected int m_line_stride;
    protected byte[] m_local_table;
    protected byte[] m_out;
    protected int pixelAspect;
    protected byte[] pixelStack;
    protected byte[] pixels;
    protected short[] prefix;
    protected byte[] suffix;
    protected int transIndex;
    protected boolean transparency;
    protected int width;

    public GifImage(InputStream inputStream) {
        this.block = new byte[256];
        this.blockSize = 0;
        this.dispose = 0;
        this.transparency = false;
        this.delay = 0;
        this.frames = new ArrayList();
        this.process(inputStream);
    }

    public GifImage(String string2) {
        this(Utilities.toURL(string2));
    }

    /*
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    public GifImage(URL object) {
        void var1_5;
        Object object2;
        block7 : {
            Object object3;
            this.block = new byte[256];
            this.blockSize = 0;
            this.dispose = 0;
            this.transparency = false;
            this.delay = 0;
            this.frames = new ArrayList();
            this.fromUrl = object;
            object2 = object.openStream();
            try {
                int n2;
                object = new ByteArrayOutputStream();
                object3 = new byte[1024];
                while ((n2 = object2.read((byte[])object3)) != -1) {
                    object.write((byte[])object3, 0, n2);
                }
                object2.close();
                object3 = new ByteArrayInputStream(object.toByteArray());
            }
            catch (Throwable throwable) {}
            try {
                object.flush();
                object.close();
                this.process((InputStream)object3);
            }
            catch (Throwable throwable) {
                object2 = object3;
            }
            object3.close();
            return;
            break block7;
            catch (Throwable throwable) {
                object2 = null;
            }
        }
        if (object2 == null) throw var1_5;
        object2.close();
        throw var1_5;
    }

    /*
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    public GifImage(byte[] object) {
        void var2_5;
        block4 : {
            this.block = new byte[256];
            this.blockSize = 0;
            this.dispose = 0;
            this.transparency = false;
            this.delay = 0;
            this.frames = new ArrayList();
            this.fromData = object;
            Object var3_2 = null;
            object = new ByteArrayInputStream((byte[])object);
            try {
                this.process((InputStream)object);
            }
            catch (Throwable throwable) {
                break block4;
            }
            object.close();
            return;
            catch (Throwable throwable) {
                object = var3_2;
            }
        }
        if (object == null) throw var2_5;
        object.close();
        throw var2_5;
    }

    protected static int newBpc(int n2) {
        int n3 = n2;
        switch (n2) {
            default: {
                return 8;
            }
            case 3: {
                n3 = 4;
            }
            case 1: 
            case 2: 
            case 4: 
        }
        return n3;
    }

    protected boolean decodeImageData() {
        int n2 = this.iw * this.ih;
        if (this.prefix == null) {
            this.prefix = new short[4096];
        }
        if (this.suffix == null) {
            this.suffix = new byte[4096];
        }
        if (this.pixelStack == null) {
            this.pixelStack = new byte[4097];
        }
        int n3 = this.iw;
        int n4 = this.m_bpc;
        int n5 = 8;
        this.m_line_stride = (n3 * n4 + 7) / 8;
        this.m_out = new byte[this.m_line_stride * this.ih];
        if (!this.interlace) {
            n5 = 1;
        }
        n3 = this.in.read();
        int n6 = 1 << n3;
        int n7 = n6 + 2;
        int n8 = (1 << ++n3) - 1;
        for (n4 = 0; n4 < n6; ++n4) {
            this.prefix[n4] = 0;
            this.suffix[n4] = (byte)n4;
        }
        int n9 = n3;
        int n10 = n7;
        int n11 = n8;
        int n12 = -1;
        int n13 = 0;
        int n14 = 0;
        int n15 = 0;
        int n16 = 0;
        int n17 = 0;
        int n18 = 0;
        int n19 = 0;
        int n20 = 1;
        int n21 = 0;
        n4 = n2;
        block6 : do {
            int n22 = 0;
            n2 = n21;
            n21 = n11;
            int n23 = n13;
            while (n23 < n4) {
                int n24;
                block28 : {
                    int n25;
                    block30 : {
                        block26 : {
                            byte by2;
                            byte[] arrby;
                            block29 : {
                                block27 : {
                                    if (n14 != 0) break block26;
                                    if (n15 < n9) {
                                        n11 = n16;
                                        if (n16 == 0) {
                                            n11 = this.readBlock();
                                            if (n11 <= 0) {
                                                return true;
                                            }
                                            n18 = 0;
                                        }
                                        n17 += (this.block[n18] & 255) << n15;
                                        n15 += 8;
                                        ++n18;
                                        n16 = n11 - 1;
                                        continue;
                                    }
                                    n11 = n17 & n21;
                                    n13 = n17 >> n9;
                                    n25 = n15 - n9;
                                    if (n11 > n10 || n11 == n6 + 1) break block6;
                                    if (n11 != n6) break block27;
                                    n17 = n3;
                                    n10 = n7;
                                    n21 = n8;
                                    n12 = -1;
                                    n24 = n14;
                                    n15 = n25;
                                    n11 = n13;
                                    n13 = n21;
                                    break block28;
                                }
                                if (n12 != -1) break block29;
                                this.pixelStack[n14] = this.suffix[n11];
                                n19 = n11;
                                n24 = n14 + 1;
                                n12 = n11;
                                n15 = n25;
                                n17 = n9;
                                n11 = n13;
                                n13 = n21;
                                break block28;
                            }
                            if (n11 == n10) {
                                arrby = this.pixelStack;
                                n17 = n14 + 1;
                                arrby[n14] = (byte)n19;
                                n15 = n12;
                                n19 = n11;
                                n14 = n17;
                            } else {
                                n15 = n11;
                                n19 = n11;
                            }
                            while (n15 > n6) {
                                this.pixelStack[n14] = this.suffix[n15];
                                n15 = this.prefix[n15];
                                ++n14;
                            }
                            n15 = this.suffix[n15] & 255;
                            if (n10 >= 4096) break block6;
                            arrby = this.pixelStack;
                            n24 = n14 + 1;
                            arrby[n14] = by2 = (byte)n15;
                            this.prefix[n10] = (short)n12;
                            this.suffix[n10] = by2;
                            n14 = n10 + 1;
                            if ((n14 & n21) == 0) {
                                n17 = n9;
                                n11 = n21;
                                if (n14 < 4096) {
                                    n17 = n9 + 1;
                                    n11 = n21 + n14;
                                }
                            } else {
                                n11 = n21;
                                n17 = n9;
                            }
                            n12 = n15;
                            n9 = n19;
                            n15 = n25;
                            n21 = n13;
                            n19 = n12;
                            break block30;
                        }
                        n11 = n21;
                        n21 = n17;
                        n17 = n9;
                        n24 = n14;
                        n14 = n10;
                        n9 = n12;
                    }
                    n12 = n3;
                    ++n23;
                    this.setPixel(n22, n2, this.pixelStack[--n24]);
                    if (++n22 >= this.iw) {
                        n3 = n10 = n2 + n5;
                        n2 = n20;
                        n22 = n5;
                        if (n10 >= this.ih) {
                            if (this.interlace) {
                                n10 = n5;
                                do {
                                    n2 = n20 + 1;
                                    n3 = 4;
                                    n5 = n10;
                                    switch (n2) {
                                        default: {
                                            n3 = this.ih - 1;
                                            n5 = 0;
                                            break;
                                        }
                                        case 4: {
                                            n3 = 1;
                                            n5 = 2;
                                            break;
                                        }
                                        case 3: {
                                            n3 = 2;
                                            n5 = 4;
                                        }
                                        case 2: 
                                    }
                                    n20 = n2;
                                    n10 = n5;
                                } while (n3 >= this.ih);
                                n22 = n5;
                            } else {
                                n2 = this.ih - 1;
                                n3 = n12;
                                n5 = 0;
                                n12 = n9;
                                n13 = n23;
                                n10 = n14;
                                n14 = n24;
                                n9 = n17;
                                n17 = n21;
                                n21 = n2;
                                continue block6;
                            }
                        }
                        n25 = n3;
                        n3 = n12;
                        n12 = n9;
                        n13 = n23;
                        n10 = n14;
                        n14 = n24;
                        n9 = n17;
                        n17 = n21;
                        n20 = n2;
                        n5 = n22;
                        n21 = n25;
                        continue block6;
                    }
                    n3 = n12;
                    n13 = n11;
                    n11 = n21;
                    n10 = n14;
                    n12 = n9;
                }
                n14 = n24;
                n9 = n17;
                n17 = n11;
                n21 = n13;
            }
            break;
        } while (true);
        return false;
    }

    public int getFrameCount() {
        return this.frames.size();
    }

    public int[] getFramePosition(int n2) {
        GifFrame gifFrame = this.frames.get(n2 - 1);
        return new int[]{gifFrame.ix, gifFrame.iy};
    }

    public Image getImage(int n2) {
        return this.frames.get((int)(n2 - 1)).image;
    }

    public int[] getLogicalScreen() {
        return new int[]{this.width, this.height};
    }

    void process(InputStream inputStream) {
        this.in = new DataInputStream(new BufferedInputStream(inputStream));
        this.readHeader();
        this.readContents();
        if (!this.frames.isEmpty()) {
            return;
        }
        throw new IOException(MessageLocalization.getComposedMessage("the.file.does.not.contain.any.valid.image", new Object[0]));
    }

    protected int readBlock() {
        this.blockSize = this.in.read();
        if (this.blockSize <= 0) {
            this.blockSize = 0;
            return 0;
        }
        this.blockSize = this.in.read(this.block, 0, this.blockSize);
        return this.blockSize;
    }

    protected byte[] readColorTable(int n2) {
        byte[] arrby = new byte[(1 << GifImage.newBpc(n2)) * 3];
        this.in.readFully(arrby, 0, (1 << n2) * 3);
        return arrby;
    }

    /*
     * Enabled aggressive block sorting
     */
    protected void readContents() {
        boolean bl2 = false;
        while (!bl2) {
            int n2 = this.in.read();
            if (n2 != 33) {
                if (n2 != 44) {
                    return;
                }
                this.readImage();
                continue;
            }
            n2 = this.in.read();
            if (n2 != 249) {
                if (n2 == 255) {
                    this.readBlock();
                }
                this.skip();
                continue;
            }
            this.readGraphicControlExt();
        }
        return;
    }

    protected void readGraphicControlExt() {
        this.in.read();
        int n2 = this.in.read();
        int n3 = this.dispose = (n2 & 28) >> 2;
        boolean bl2 = true;
        if (n3 == 0) {
            this.dispose = 1;
        }
        if ((n2 & 1) == 0) {
            bl2 = false;
        }
        this.transparency = bl2;
        this.delay = this.readShort() * 10;
        this.transIndex = this.in.read();
        this.in.read();
    }

    protected void readHeader() {
        StringBuilder stringBuilder = new StringBuilder("");
        for (int i2 = 0; i2 < 6; ++i2) {
            stringBuilder.append((char)this.in.read());
        }
        if (stringBuilder.toString().startsWith("GIF8")) {
            this.readLSD();
            if (this.gctFlag) {
                this.m_global_table = this.readColorTable(this.m_gbpc);
            }
            return;
        }
        throw new IOException(MessageLocalization.getComposedMessage("gif.signature.nor.found", new Object[0]));
    }

    protected void readImage() {
        Object object;
        this.ix = this.readShort();
        this.iy = this.readShort();
        this.iw = this.readShort();
        this.ih = this.readShort();
        int n2 = this.in.read();
        boolean bl2 = (n2 & 128) != 0;
        this.lctFlag = bl2;
        bl2 = (n2 & 64) != 0;
        this.interlace = bl2;
        this.lctSize = 2 << (n2 &= 7);
        this.m_bpc = GifImage.newBpc(this.m_gbpc);
        if (this.lctFlag) {
            this.m_curr_table = this.readColorTable(++n2);
            this.m_bpc = GifImage.newBpc(n2);
        } else {
            this.m_curr_table = this.m_global_table;
        }
        if (this.transparency && this.transIndex >= this.m_curr_table.length / 3) {
            this.transparency = false;
        }
        if (this.transparency && this.m_bpc == 1) {
            object = new byte[12];
            System.arraycopy(this.m_curr_table, 0, object, 0, 6);
            this.m_curr_table = object;
            this.m_bpc = 2;
        }
        if (!this.decodeImageData()) {
            this.skip();
        }
        try {
            object = new ImgRaw(this.iw, this.ih, 1, this.m_bpc, this.m_out);
            Object object2 = new PdfArray();
            object2.add(PdfName.INDEXED);
            object2.add(PdfName.DEVICERGB);
            object2.add(new PdfNumber(this.m_curr_table.length / 3 - 1));
            object2.add(new PdfString(this.m_curr_table));
            PdfDictionary pdfDictionary = new PdfDictionary();
            pdfDictionary.put(PdfName.COLORSPACE, (PdfObject)object2);
            object.setAdditional(pdfDictionary);
            if (this.transparency) {
                object.setTransparency(new int[]{this.transIndex, this.transIndex});
            }
            object.setOriginalType(3);
            object.setOriginalData(this.fromData);
            object.setUrl(this.fromUrl);
            object2 = new GifFrame();
            object2.image = object;
            object2.ix = this.ix;
            object2.iy = this.iy;
            this.frames.add((GifFrame)object2);
            return;
        }
        catch (Exception exception) {
            throw new ExceptionConverter(exception);
        }
    }

    protected void readLSD() {
        this.width = this.readShort();
        this.height = this.readShort();
        int n2 = this.in.read();
        boolean bl2 = (n2 & 128) != 0;
        this.gctFlag = bl2;
        this.m_gbpc = (n2 & 7) + 1;
        this.bgIndex = this.in.read();
        this.pixelAspect = this.in.read();
    }

    protected int readShort() {
        return this.in.read() | this.in.read() << 8;
    }

    protected void resetFrame() {
    }

    protected void setPixel(int n2, int n3, int n4) {
        if (this.m_bpc == 8) {
            int n5 = this.iw;
            this.m_out[n2 + n5 * n3] = (byte)n4;
            return;
        }
        n3 = this.m_line_stride * n3 + n2 / (8 / this.m_bpc);
        int n6 = this.m_bpc;
        int n7 = 8 / this.m_bpc;
        int n8 = this.m_bpc;
        byte[] arrby = this.m_out;
        arrby[n3] = (byte)(n4 << 8 - n6 * (n2 % n7) - n8 | arrby[n3]);
    }

    protected void skip() {
        do {
            this.readBlock();
        } while (this.blockSize > 0);
    }

    static class GifFrame {
        Image image;
        int ix;
        int iy;

        GifFrame() {
        }
    }

}

