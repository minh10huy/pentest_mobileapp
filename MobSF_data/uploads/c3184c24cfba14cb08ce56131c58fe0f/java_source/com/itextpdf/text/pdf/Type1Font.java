/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf;

import com.itextpdf.text.DocumentException;
import com.itextpdf.text.error_messages.MessageLocalization;
import com.itextpdf.text.pdf.BaseFont;
import com.itextpdf.text.pdf.GlyphList;
import com.itextpdf.text.pdf.IntHashtable;
import com.itextpdf.text.pdf.PdfArray;
import com.itextpdf.text.pdf.PdfDictionary;
import com.itextpdf.text.pdf.PdfIndirectObject;
import com.itextpdf.text.pdf.PdfIndirectReference;
import com.itextpdf.text.pdf.PdfName;
import com.itextpdf.text.pdf.PdfNumber;
import com.itextpdf.text.pdf.PdfObject;
import com.itextpdf.text.pdf.PdfRectangle;
import com.itextpdf.text.pdf.PdfStream;
import com.itextpdf.text.pdf.PdfWriter;
import com.itextpdf.text.pdf.RandomAccessFileOrArray;
import com.itextpdf.text.pdf.fonts.FontsResourceAnchor;
import java.util.HashMap;
import java.util.StringTokenizer;

class Type1Font
extends BaseFont {
    private static final int[] PFB_TYPES = new int[]{1, 2, 1};
    private static FontsResourceAnchor resourceAnchor;
    private int Ascender;
    private int CapHeight;
    private HashMap<Object, Object[]> CharMetrics;
    private String CharacterSet;
    private int Descender;
    private String EncodingScheme;
    private String FamilyName;
    private String FontName;
    private String FullName;
    private boolean IsFixedPitch;
    private float ItalicAngle;
    private HashMap<String, Object[]> KernPairs;
    private int StdHW;
    private int StdVW;
    private int UnderlinePosition;
    private int UnderlineThickness;
    private String Weight;
    private int XHeight;
    private boolean builtinFont;
    private String fileName;
    private int llx;
    private int lly;
    protected byte[] pfb;
    private int urx;
    private int ury;

    /*
     * Exception decompiling
     */
    Type1Font(String var1_1, String var2_9, boolean var3_16, byte[] var4_17, byte[] var5_20, boolean var6_21) {
        // This method has failed to decompile.  When submitting a bug report, please provide this stack trace, and (if you hold appropriate legal rights) the relevant class file.
        // org.benf.cfr.reader.util.ConfusedCFRException: Tried to end blocks [1[TRYBLOCK]], but top level block is 29[UNCONDITIONALDOLOOP]
        // org.benf.cfr.reader.bytecode.analysis.opgraph.Op04StructuredStatement.processEndingBlocks(Op04StructuredStatement.java:416)
        // org.benf.cfr.reader.bytecode.analysis.opgraph.Op04StructuredStatement.buildNestedBlocks(Op04StructuredStatement.java:468)
        // org.benf.cfr.reader.bytecode.analysis.opgraph.Op03SimpleStatement.createInitialStructuredBlock(Op03SimpleStatement.java:2960)
        // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisInner(CodeAnalyser.java:818)
        // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisOrWrapFail(CodeAnalyser.java:196)
        // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysis(CodeAnalyser.java:141)
        // org.benf.cfr.reader.entities.attributes.AttributeCode.analyse(AttributeCode.java:95)
        // org.benf.cfr.reader.entities.Method.analyse(Method.java:372)
        // org.benf.cfr.reader.entities.ClassFile.analyseMid(ClassFile.java:867)
        // org.benf.cfr.reader.entities.ClassFile.analyseTop(ClassFile.java:768)
        // org.benf.cfr.reader.Main.doJar(Main.java:141)
        // org.benf.cfr.reader.Main.main(Main.java:242)
        throw new IllegalStateException("Decompilation failed");
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Lifted jumps to return sites
     */
    private PdfDictionary getFontBaseType(PdfIndirectReference var1_1, int var2_2, int var3_3, byte[] var4_4) {
        block9 : {
            block10 : {
                block11 : {
                    var11_5 = new PdfDictionary(PdfName.FONT);
                    var11_5.put(PdfName.SUBTYPE, PdfName.TYPE1);
                    var11_5.put(PdfName.BASEFONT, new PdfName(this.FontName));
                    var7_6 = this.encoding.equals("Cp1252") || this.encoding.equals("MacRoman");
                    if (!this.fontSpecific) break block11;
                    var5_7 = var2_2;
                    if (this.specialMap == null) ** GOTO lbl27
                }
                var6_8 = var2_2;
                do {
                    var5_7 = var2_2;
                    if (var6_8 > var3_3) break;
                    if (!this.differences[var6_8].equals(".notdef")) {
                        var5_7 = var6_8;
                        break;
                    }
                    ++var6_8;
                } while (true);
                if (!var7_6) {
                    var9_10 = new PdfDictionary(PdfName.ENCODING);
                    var10_9 = new PdfArray();
                    var2_2 = 1;
                } else {
                    var10_9 = PdfName.ENCODING;
                    var9_10 = this.encoding.equals("Cp1252") ? PdfName.WIN_ANSI_ENCODING : PdfName.MAC_ROMAN_ENCODING;
lbl25: // 2 sources:
                    do {
                        var11_5.put((PdfName)var10_9, var9_10);
lbl27: // 2 sources:
                        if (this.specialMap == null && !this.forceWidthsOutput && this.builtinFont && (this.fontSpecific || var7_6)) break block9;
                        var11_5.put(PdfName.FIRSTCHAR, new PdfNumber(var5_7));
                        var11_5.put(PdfName.LASTCHAR, new PdfNumber(var3_3));
                        var10_9 = new PdfArray();
                        break block10;
                        break;
                    } while (true);
                }
                for (var8_11 = var5_7; var8_11 <= var3_3; ++var8_11) {
                    if (var4_4[var8_11] != 0) {
                        var6_8 = var2_2;
                        if (var2_2 != 0) {
                            var10_9.add(new PdfNumber(var8_11));
                            var6_8 = 0;
                        }
                        var10_9.add(new PdfName(this.differences[var8_11]));
                        var2_2 = var6_8;
                        continue;
                    }
                    var2_2 = 1;
                }
                var9_10.put(PdfName.DIFFERENCES, var10_9);
                var10_9 = PdfName.ENCODING;
                ** while (true)
            }
            while (var5_7 <= var3_3) {
                var9_10 = var4_4[var5_7] == 0 ? new PdfNumber(0) : new PdfNumber(this.widths[var5_7]);
                var10_9.add(var9_10);
                ++var5_7;
            }
            var11_5.put(PdfName.WIDTHS, var10_9);
        }
        if (this.builtinFont != false) return var11_5;
        if (var1_1 == null) return var11_5;
        var11_5.put(PdfName.FONTDESCRIPTOR, var1_1);
        return var11_5;
    }

    private PdfDictionary getFontDescriptor(PdfIndirectReference pdfIndirectReference) {
        int n2;
        int n3;
        PdfDictionary pdfDictionary;
        block9 : {
            block8 : {
                if (this.builtinFont) {
                    return null;
                }
                pdfDictionary = new PdfDictionary(PdfName.FONTDESCRIPTOR);
                pdfDictionary.put(PdfName.ASCENT, new PdfNumber(this.Ascender));
                pdfDictionary.put(PdfName.CAPHEIGHT, new PdfNumber(this.CapHeight));
                pdfDictionary.put(PdfName.DESCENT, new PdfNumber(this.Descender));
                pdfDictionary.put(PdfName.FONTBBOX, new PdfRectangle(this.llx, this.lly, this.urx, this.ury));
                pdfDictionary.put(PdfName.FONTNAME, new PdfName(this.FontName));
                pdfDictionary.put(PdfName.ITALICANGLE, new PdfNumber(this.ItalicAngle));
                pdfDictionary.put(PdfName.STEMV, new PdfNumber(this.StdVW));
                if (pdfIndirectReference != null) {
                    pdfDictionary.put(PdfName.FONTFILE, pdfIndirectReference);
                }
                n2 = 0;
                if (this.IsFixedPitch) {
                    n2 = 1;
                }
                n3 = this.fontSpecific ? 4 : 32;
                n2 = n3 = n2 | n3;
                if (this.ItalicAngle < 0.0f) {
                    n2 = n3 | 64;
                }
                if (this.FontName.indexOf("Caps") >= 0) break block8;
                n3 = n2;
                if (!this.FontName.endsWith("SC")) break block9;
            }
            n3 = n2 | 131072;
        }
        n2 = n3;
        if (this.Weight.equals("Bold")) {
            n2 = n3 | 262144;
        }
        pdfDictionary.put(PdfName.FLAGS, new PdfNumber(n2));
        return pdfDictionary;
    }

    @Override
    public String[][] getAllNameEntries() {
        return new String[][]{{"4", "", "", "", this.FullName}};
    }

    @Override
    public String[][] getFamilyFontName() {
        return new String[][]{{"", "", "", this.FamilyName}};
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    @Override
    public float getFontDescriptor(int n2, float f2) {
        switch (n2) {
            default: {
                return 0.0f;
            }
            case 14: {
                n2 = this.UnderlineThickness;
                do {
                    return (float)n2 * f2 / 1000.0f;
                    break;
                } while (true);
            }
            case 13: {
                n2 = this.UnderlinePosition;
                return (float)n2 * f2 / 1000.0f;
            }
            case 12: {
                n2 = this.urx - this.llx;
                return (float)n2 * f2 / 1000.0f;
            }
            case 11: {
                return 0.0f;
            }
            case 8: {
                n2 = this.ury;
                return (float)n2 * f2 / 1000.0f;
            }
            case 7: {
                n2 = this.urx;
                return (float)n2 * f2 / 1000.0f;
            }
            case 6: {
                n2 = this.lly;
                return (float)n2 * f2 / 1000.0f;
            }
            case 5: {
                n2 = this.llx;
                return (float)n2 * f2 / 1000.0f;
            }
            case 4: {
                return this.ItalicAngle;
            }
            case 3: 
            case 10: {
                n2 = this.Descender;
                return (float)n2 * f2 / 1000.0f;
            }
            case 2: {
                n2 = this.CapHeight;
                return (float)n2 * f2 / 1000.0f;
            }
            case 1: 
            case 9: 
        }
        n2 = this.Ascender;
        return (float)n2 * f2 / 1000.0f;
    }

    @Override
    public String[][] getFullFontName() {
        return new String[][]{{"", "", "", this.FullName}};
    }

    /*
     * Exception decompiling
     */
    @Override
    public PdfStream getFullFontStream() {
        // This method has failed to decompile.  When submitting a bug report, please provide this stack trace, and (if you hold appropriate legal rights) the relevant class file.
        // java.lang.IllegalStateException: Backjump on non jumping statement [7] lbl84 : TryStatement: try { 4[TRYBLOCK]

        // org.benf.cfr.reader.bytecode.analysis.opgraph.op3rewriters.Cleaner$1.call(Cleaner.java:44)
        // org.benf.cfr.reader.bytecode.analysis.opgraph.op3rewriters.Cleaner$1.call(Cleaner.java:22)
        // org.benf.cfr.reader.util.graph.GraphVisitorDFS.process(GraphVisitorDFS.java:67)
        // org.benf.cfr.reader.bytecode.analysis.opgraph.op3rewriters.Cleaner.removeUnreachableCode(Cleaner.java:54)
        // org.benf.cfr.reader.bytecode.analysis.opgraph.op3rewriters.RemoveDeterministicJumps.apply(RemoveDeterministicJumps.java:35)
        // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisInner(CodeAnalyser.java:497)
        // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisOrWrapFail(CodeAnalyser.java:196)
        // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysis(CodeAnalyser.java:141)
        // org.benf.cfr.reader.entities.attributes.AttributeCode.analyse(AttributeCode.java:95)
        // org.benf.cfr.reader.entities.Method.analyse(Method.java:372)
        // org.benf.cfr.reader.entities.ClassFile.analyseMid(ClassFile.java:867)
        // org.benf.cfr.reader.entities.ClassFile.analyseTop(ClassFile.java:768)
        // org.benf.cfr.reader.Main.doJar(Main.java:141)
        // org.benf.cfr.reader.Main.main(Main.java:242)
        throw new IllegalStateException("Decompilation failed");
    }

    @Override
    public int getKerning(int n2, int n3) {
        Object[] arrobject = GlyphList.unicodeToName(n2);
        if (arrobject == null) {
            return 0;
        }
        String string2 = GlyphList.unicodeToName(n3);
        if (string2 == null) {
            return 0;
        }
        if ((arrobject = this.KernPairs.get(arrobject)) == null) {
            return 0;
        }
        for (n2 = 0; n2 < arrobject.length; n2 += 2) {
            if (!string2.equals(arrobject[n2])) continue;
            return (Integer)arrobject[n2 + 1];
        }
        return 0;
    }

    @Override
    public String getPostscriptFontName() {
        return this.FontName;
    }

    /*
     * Enabled aggressive block sorting
     */
    @Override
    protected int[] getRawCharBBox(int n2, String arrobject) {
        if (arrobject == null) {
            arrobject = this.CharMetrics.get(n2);
        } else {
            if (arrobject.equals(".notdef")) {
                return null;
            }
            arrobject = this.CharMetrics.get(arrobject);
        }
        if (arrobject == null) {
            return null;
        }
        return (int[])arrobject[3];
    }

    /*
     * Enabled aggressive block sorting
     */
    @Override
    int getRawWidth(int n2, String arrobject) {
        if (arrobject == null) {
            arrobject = this.CharMetrics.get(n2);
        } else {
            if (arrobject.equals(".notdef")) {
                return 0;
            }
            arrobject = this.CharMetrics.get(arrobject);
        }
        if (arrobject == null) {
            return 0;
        }
        return (Integer)arrobject[1];
    }

    @Override
    public boolean hasKernPairs() {
        return this.KernPairs.isEmpty() ^ true;
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Lifted jumps to return sites
     */
    public void process(RandomAccessFileOrArray var1_1) {
        block35 : {
            block34 : {
                block33 : {
                    while ((var4_2 = var1_1.readLine()) != null) {
                        if (!(var4_2 = new StringTokenizer((String)var4_2, " ,\n\r\t\f")).hasMoreTokens()) continue;
                        var5_3 = var4_2.nextToken();
                        if (var5_3.equals("FontName")) {
                            this.FontName = var4_2.nextToken("\u00ff").substring(1);
                            continue;
                        }
                        if (var5_3.equals("FullName")) {
                            this.FullName = var4_2.nextToken("\u00ff").substring(1);
                            continue;
                        }
                        if (var5_3.equals("FamilyName")) {
                            this.FamilyName = var4_2.nextToken("\u00ff").substring(1);
                            continue;
                        }
                        if (var5_3.equals("Weight")) {
                            this.Weight = var4_2.nextToken("\u00ff").substring(1);
                            continue;
                        }
                        if (var5_3.equals("ItalicAngle")) {
                            this.ItalicAngle = Float.parseFloat(var4_2.nextToken());
                            continue;
                        }
                        if (var5_3.equals("IsFixedPitch")) {
                            this.IsFixedPitch = var4_2.nextToken().equals("true");
                            continue;
                        }
                        if (var5_3.equals("CharacterSet")) {
                            this.CharacterSet = var4_2.nextToken("\u00ff").substring(1);
                            continue;
                        }
                        if (var5_3.equals("FontBBox")) {
                            this.llx = (int)Float.parseFloat(var4_2.nextToken());
                            this.lly = (int)Float.parseFloat(var4_2.nextToken());
                            this.urx = (int)Float.parseFloat(var4_2.nextToken());
                            this.ury = (int)Float.parseFloat(var4_2.nextToken());
                            continue;
                        }
                        if (var5_3.equals("UnderlinePosition")) {
                            this.UnderlinePosition = (int)Float.parseFloat(var4_2.nextToken());
                            continue;
                        }
                        if (var5_3.equals("UnderlineThickness")) {
                            this.UnderlineThickness = (int)Float.parseFloat(var4_2.nextToken());
                            continue;
                        }
                        if (var5_3.equals("EncodingScheme")) {
                            this.EncodingScheme = var4_2.nextToken("\u00ff").substring(1);
                            continue;
                        }
                        if (var5_3.equals("CapHeight")) {
                            this.CapHeight = (int)Float.parseFloat(var4_2.nextToken());
                            continue;
                        }
                        if (var5_3.equals("XHeight")) {
                            this.XHeight = (int)Float.parseFloat(var4_2.nextToken());
                            continue;
                        }
                        if (var5_3.equals("Ascender")) {
                            this.Ascender = (int)Float.parseFloat(var4_2.nextToken());
                            continue;
                        }
                        if (var5_3.equals("Descender")) {
                            this.Descender = (int)Float.parseFloat(var4_2.nextToken());
                            continue;
                        }
                        if (var5_3.equals("StdHW")) {
                            this.StdHW = (int)Float.parseFloat(var4_2.nextToken());
                            continue;
                        }
                        if (var5_3.equals("StdVW")) {
                            this.StdVW = (int)Float.parseFloat(var4_2.nextToken());
                            continue;
                        }
                        if (!var5_3.equals("StartCharMetrics")) continue;
                        var2_4 = 1;
                        break block33;
                    }
                    var2_4 = 0;
                }
                if (var2_4 == 0) {
                    throw new DocumentException(MessageLocalization.getComposedMessage("missing.startcharmetrics.in.1", new Object[]{this.fileName}));
                }
                do {
                    var8_8 = var1_1.readLine();
                    var3_5 = var2_4;
                    if (var8_8 == null) ** GOTO lbl79
                    var4_2 = new StringTokenizer((String)var8_8);
                    if (!var4_2.hasMoreTokens()) continue;
                    if (!var4_2.nextToken().equals("EndCharMetrics")) {
                        var7_7 = Integer.valueOf(-1);
                        var6_6 = 250;
                        var5_3 = "";
                        var4_2 = null;
                        var8_8 = new StringTokenizer((String)var8_8, ";");
                    } else {
                        var3_5 = 0;
lbl79: // 2 sources:
                        if (var3_5 != 0) {
                            throw new DocumentException(MessageLocalization.getComposedMessage("missing.endcharmetrics.in.1", new Object[]{this.fileName}));
                        }
                        if (this.CharMetrics.containsKey("nonbreakingspace") || (var4_2 = this.CharMetrics.get("space")) == null) break;
                        this.CharMetrics.put("nonbreakingspace", (Object[])var4_2);
                        break;
                    }
                    while (var8_8.hasMoreTokens()) {
                        var9_9 = new StringTokenizer(var8_8.nextToken());
                        if (!var9_9.hasMoreTokens()) continue;
                        var10_10 = var9_9.nextToken();
                        if (var10_10.equals("C")) {
                            var7_7 = Integer.valueOf(var9_9.nextToken());
                            continue;
                        }
                        if (var10_10.equals("WX")) {
                            var6_6 = (int)Float.parseFloat(var9_9.nextToken());
                            continue;
                        }
                        if (var10_10.equals("N")) {
                            var5_3 = var9_9.nextToken();
                            continue;
                        }
                        if (!var10_10.equals("B")) continue;
                        var4_2 = new int[]{Integer.parseInt(var9_9.nextToken()), Integer.parseInt(var9_9.nextToken()), Integer.parseInt(var9_9.nextToken()), Integer.parseInt(var9_9.nextToken())};
                    }
                    var8_8 = new Object[]{var7_7, var6_6, var5_3, var4_2};
                    if (var7_7.intValue() >= 0) {
                        this.CharMetrics.put(var7_7, var8_8);
                    }
                    this.CharMetrics.put(var5_3, var8_8);
                } while (true);
                do lbl-1000: // 3 sources:
                {
                    var4_2 = var1_1.readLine();
                    var2_4 = var3_5;
                    if (var4_2 == null) break block34;
                    if (!(var4_2 = new StringTokenizer((String)var4_2)).hasMoreTokens()) ** GOTO lbl-1000
                    if (!(var4_2 = var4_2.nextToken()).equals("EndFontMetrics")) continue;
                    return;
                } while (!var4_2.equals("StartKernPairs"));
                var2_4 = 1;
            }
            if (var2_4 == 0) {
                throw new DocumentException(MessageLocalization.getComposedMessage("missing.endfontmetrics.in.1", new Object[]{this.fileName}));
            }
            do {
                var4_2 = var1_1.readLine();
                var3_5 = var2_4;
                if (var4_2 == null) break block35;
                var6_6 = new StringTokenizer((String)var4_2);
                if (!var6_6.hasMoreTokens()) continue;
                var4_2 = var6_6.nextToken();
                if (var4_2.equals("KPX")) {
                    var4_2 = var6_6.nextToken();
                    var5_3 = var6_6.nextToken();
                    var6_6 = (int)Float.parseFloat(var6_6.nextToken());
                    var7_7 = this.KernPairs.get(var4_2);
                    if (var7_7 == null) {
                        this.KernPairs.put((String)var4_2, new Object[]{var5_3, var6_6});
                        continue;
                    }
                    var3_5 = var7_7.length;
                    var8_8 = new Object[var3_5 + 2];
                    System.arraycopy(var7_7, 0, var8_8, 0, var3_5);
                    var8_8[var3_5] = var5_3;
                    var8_8[var3_5 + 1] = var6_6;
                    this.KernPairs.put((String)var4_2, var8_8);
                    continue;
                }
                if (var4_2.equals("EndKernPairs")) break;
            } while (true);
            var3_5 = 0;
        }
        if (var3_5 != 0) throw new DocumentException(MessageLocalization.getComposedMessage("missing.endkernpairs.in.1", new Object[]{this.fileName}));
        var1_1.close();
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Lifted jumps to return sites
     */
    @Override
    public void setFontDescriptor(int var1_1, float var2_2) {
        block4 : {
            if (var1_1 == 1) break block4;
            if (var1_1 == 3) ** GOTO lbl-1000
            switch (var1_1) {
                default: {
                    return;
                }
                case 10: lbl-1000: // 2 sources:
                {
                    this.Descender = (int)var2_2;
                    return;
                }
                case 9: 
            }
        }
        this.Ascender = (int)var2_2;
    }

    @Override
    public boolean setKerning(int n2, int n3, int n4) {
        String string2 = GlyphList.unicodeToName(n2);
        if (string2 == null) {
            return false;
        }
        String string3 = GlyphList.unicodeToName(n3);
        if (string3 == null) {
            return false;
        }
        Object[] arrobject = this.KernPairs.get(string2);
        if (arrobject == null) {
            this.KernPairs.put(string2, new Object[]{string3, n4});
            return true;
        }
        for (n2 = 0; n2 < arrobject.length; n2 += 2) {
            if (!string3.equals(arrobject[n2])) continue;
            arrobject[n2 + 1] = n4;
            return true;
        }
        n2 = arrobject.length;
        Object[] arrobject2 = new Object[n2 + 2];
        System.arraycopy(arrobject, 0, arrobject2, 0, n2);
        arrobject2[n2] = string3;
        arrobject2[n2 + 1] = n4;
        this.KernPairs.put(string2, arrobject2);
        return true;
    }

    @Override
    public void setPostscriptFontName(String string2) {
        this.FontName = string2;
    }

    @Override
    void writeFont(PdfWriter pdfWriter, PdfIndirectReference pdfIndirectReference, Object[] object) {
        int n2 = 0;
        int n3 = (Integer)object[0];
        int n4 = (Integer)object[1];
        byte[] arrby = (byte[])object[2];
        int n5 = (Boolean)object[3] != false && this.subset ? 1 : 0;
        if (n5 != 0 && this.embedded) {
            n5 = n3;
        } else {
            int n6 = arrby.length - 1;
            n3 = 0;
            do {
                n5 = n2;
                n4 = n6;
                if (n3 >= arrby.length) break;
                arrby[n3] = 1;
                ++n3;
            } while (true);
        }
        object = null;
        PdfDictionary pdfDictionary = this.getFullFontStream();
        if (pdfDictionary != null) {
            object = pdfWriter.addToBody(pdfDictionary).getIndirectReference();
        }
        if ((pdfDictionary = this.getFontDescriptor((PdfIndirectReference)object)) != null) {
            object = pdfWriter.addToBody(pdfDictionary).getIndirectReference();
        }
        pdfWriter.addToBody((PdfObject)this.getFontBaseType((PdfIndirectReference)object, n5, n4, arrby), pdfIndirectReference);
    }
}

