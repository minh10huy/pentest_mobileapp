/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf;

import com.itextpdf.text.BaseColor;
import com.itextpdf.text.ExceptionConverter;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.error_messages.MessageLocalization;
import com.itextpdf.text.pdf.Barcode;
import com.itextpdf.text.pdf.BaseFont;
import com.itextpdf.text.pdf.PdfContentByte;

public class BarcodeInter25
extends Barcode {
    private static final byte[][] BARS;

    static {
        byte[] arrby = new byte[]{1, 1, 0, 0, 0};
        BARS = new byte[][]{{0, 0, 1, 1, 0}, {1, 0, 0, 0, 1}, {0, 1, 0, 0, 1}, arrby, {0, 0, 1, 0, 1}, {1, 0, 1, 0, 0}, {0, 1, 1, 0, 0}, {0, 0, 0, 1, 1}, {1, 0, 0, 1, 0}, {0, 1, 0, 1, 0}};
    }

    public BarcodeInter25() {
        try {
            this.x = 0.8f;
            this.n = 2.0f;
            this.font = BaseFont.createFont("Helvetica", "winansi", false);
            this.baseline = this.size = 8.0f;
            this.barHeight = this.size * 3.0f;
            this.textAlignment = 1;
            this.generateChecksum = false;
            this.checksumText = false;
            return;
        }
        catch (Exception exception) {
            throw new ExceptionConverter(exception);
        }
    }

    public static byte[] getBarsInter25(String string2) {
        if (((string2 = BarcodeInter25.keepNumbers(string2)).length() & 1) == 0) {
            int n2;
            byte[] arrby = new byte[string2.length() * 5 + 7];
            arrby[0] = 0;
            arrby[1] = 0;
            arrby[2] = 0;
            int n3 = 4;
            arrby[3] = 0;
            int n4 = string2.length() / 2;
            for (n2 = 0; n2 < n4; ++n2) {
                int n5 = n2 * 2;
                int n6 = string2.charAt(n5);
                n5 = string2.charAt(n5 + 1);
                byte[] arrby2 = BARS[n6 - 48];
                byte[] arrby3 = BARS[n5 - 48];
                for (n6 = 0; n6 < 5; ++n6) {
                    n5 = n3 + 1;
                    arrby[n3] = arrby2[n6];
                    n3 = n5 + 1;
                    arrby[n5] = arrby3[n6];
                }
            }
            n2 = n3 + 1;
            arrby[n3] = 1;
            arrby[n2] = 0;
            arrby[n2 + 1] = 0;
            return arrby;
        }
        throw new IllegalArgumentException(MessageLocalization.getComposedMessage("the.text.length.must.be.even", new Object[0]));
    }

    public static char getChecksum(String string2) {
        int n2 = 3;
        int n3 = 0;
        for (int i2 = string2.length() - 1; i2 >= 0; --i2) {
            n3 += (string2.charAt(i2) - 48) * n2;
            n2 ^= 2;
        }
        return (char)((10 - n3 % 10) % 10 + 48);
    }

    public static String keepNumbers(String string2) {
        StringBuffer stringBuffer = new StringBuffer();
        for (int i2 = 0; i2 < string2.length(); ++i2) {
            char c2 = string2.charAt(i2);
            if (c2 < '0' || c2 > '9') continue;
            stringBuffer.append(c2);
        }
        return stringBuffer.toString();
    }

    @Override
    public Rectangle getBarcodeSize() {
        int n2;
        float f2;
        Object object = this.font;
        float f3 = 0.0f;
        if (object != null) {
            Object object2;
            f3 = this.baseline > 0.0f ? this.baseline - this.font.getFontDescriptor(3, this.size) : - this.baseline + this.size;
            object = object2 = this.code;
            if (this.generateChecksum) {
                object = object2;
                if (this.checksumText) {
                    object = new StringBuilder();
                    object.append((String)object2);
                    object.append(BarcodeInter25.getChecksum((String)object2));
                    object = object.toString();
                }
            }
            object2 = this.font;
            if (this.altText != null) {
                object = this.altText;
            }
            f2 = object2.getWidthPoint((String)object, this.size);
        } else {
            f2 = 0.0f;
        }
        int n3 = n2 = BarcodeInter25.keepNumbers(this.code).length();
        if (this.generateChecksum) {
            n3 = n2 + 1;
        }
        return new Rectangle(Math.max((float)n3 * (this.x * 3.0f + this.x * 2.0f * this.n) + (this.n + 6.0f) * this.x, f2), this.barHeight + f3);
    }

    /*
     * Enabled aggressive block sorting
     */
    @Override
    public Rectangle placeBarcode(PdfContentByte pdfContentByte, BaseColor baseColor, BaseColor baseColor2) {
        Object object;
        float f2;
        byte[] arrby;
        float f3;
        float f4;
        int n2;
        float f5;
        float f6;
        block20 : {
            block17 : {
                block14 : {
                    block18 : {
                        block19 : {
                            block15 : {
                                block16 : {
                                    arrby = this.code;
                                    object = this.font;
                                    f6 = 0.0f;
                                    if (object != null) {
                                        object = arrby;
                                        if (this.generateChecksum) {
                                            object = arrby;
                                            if (this.checksumText) {
                                                object = new StringBuilder();
                                                object.append((String)arrby);
                                                object.append(BarcodeInter25.getChecksum((String)arrby));
                                                object = object.toString();
                                            }
                                        }
                                        arrby = this.font;
                                        if (this.altText != null) {
                                            object = this.altText;
                                        }
                                        f3 = arrby.getWidthPoint((String)object, this.size);
                                    } else {
                                        f3 = 0.0f;
                                        object = arrby;
                                    }
                                    String string2 = BarcodeInter25.keepNumbers(this.code);
                                    arrby = string2;
                                    if (this.generateChecksum) {
                                        arrby = new StringBuilder();
                                        arrby.append(string2);
                                        arrby.append(BarcodeInter25.getChecksum(string2));
                                        arrby = arrby.toString();
                                    }
                                    f4 = (float)arrby.length() * (this.x * 3.0f + this.x * 2.0f * this.n) + (this.n + 6.0f) * this.x;
                                    n2 = this.textAlignment;
                                    if (n2 == 0) break block14;
                                    if (n2 == 2) break block15;
                                    if (f3 <= f4) break block16;
                                    f3 = (f3 - f4) / 2.0f;
                                    break block17;
                                }
                                f3 = (f4 - f3) / 2.0f;
                                break block18;
                            }
                            if (f3 <= f4) break block19;
                            f3 -= f4;
                            break block17;
                        }
                        f3 = f4 - f3;
                    }
                    f5 = f3;
                    f3 = 0.0f;
                    break block20;
                }
                f3 = 0.0f;
            }
            f5 = 0.0f;
        }
        if (this.font != null) {
            if (this.baseline <= 0.0f) {
                f4 = this.barHeight - this.baseline;
            } else {
                f6 = - this.font.getFontDescriptor(3, this.size);
                f2 = this.baseline;
                f4 = f6;
                f6 = f2 + f6;
            }
        } else {
            f4 = 0.0f;
        }
        arrby = BarcodeInter25.getBarsInter25((String)arrby);
        if (baseColor != null) {
            pdfContentByte.setColorFill(baseColor);
        }
        boolean bl2 = true;
        for (n2 = 0; n2 < arrby.length; bl2 ^= true, f3 += f2, ++n2) {
            f2 = arrby[n2] == 0 ? this.x : this.x * this.n;
            if (!bl2) continue;
            pdfContentByte.rectangle(f3, f6, f2 - this.inkSpreading, this.barHeight);
        }
        pdfContentByte.fill();
        if (this.font != null) {
            if (baseColor2 != null) {
                pdfContentByte.setColorFill(baseColor2);
            }
            pdfContentByte.beginText();
            pdfContentByte.setFontAndSize(this.font, this.size);
            pdfContentByte.setTextMatrix(f5, f4);
            pdfContentByte.showText((String)object);
            pdfContentByte.endText();
        }
        return this.getBarcodeSize();
    }
}

