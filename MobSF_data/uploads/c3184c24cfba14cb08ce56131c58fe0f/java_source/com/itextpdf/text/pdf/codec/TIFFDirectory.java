/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf.codec;

import com.itextpdf.text.error_messages.MessageLocalization;
import com.itextpdf.text.pdf.RandomAccessFileOrArray;
import com.itextpdf.text.pdf.codec.TIFFField;
import java.io.EOFException;
import java.io.Serializable;
import java.lang.reflect.Array;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Hashtable;

public class TIFFDirectory
implements Serializable {
    private static final long serialVersionUID = -168636766193675380L;
    private static final int[] sizeOfType = new int[]{0, 1, 1, 2, 4, 8, 1, 1, 2, 4, 8, 4, 8};
    long IFDOffset = 8L;
    Hashtable<Integer, Integer> fieldIndex = new Hashtable();
    TIFFField[] fields;
    boolean isBigEndian;
    long nextIFDOffset = 0L;
    int numEntries;

    TIFFDirectory() {
    }

    public TIFFDirectory(RandomAccessFileOrArray randomAccessFileOrArray, int n2) {
        long l2 = randomAccessFileOrArray.getFilePointer();
        randomAccessFileOrArray.seek(0L);
        int n3 = randomAccessFileOrArray.readUnsignedShort();
        if (TIFFDirectory.isValidEndianTag(n3)) {
            boolean bl2 = n3 == 19789;
            this.isBigEndian = bl2;
            if (this.readUnsignedShort(randomAccessFileOrArray) == 42) {
                long l3 = this.readUnsignedInt(randomAccessFileOrArray);
                for (n3 = 0; n3 < n2; ++n3) {
                    if (l3 != 0L) {
                        randomAccessFileOrArray.seek(l3);
                        randomAccessFileOrArray.skip(this.readUnsignedShort(randomAccessFileOrArray) * 12);
                        l3 = this.readUnsignedInt(randomAccessFileOrArray);
                        continue;
                    }
                    throw new IllegalArgumentException(MessageLocalization.getComposedMessage("directory.number.too.large", new Object[0]));
                }
                randomAccessFileOrArray.seek(l3);
                this.initialize(randomAccessFileOrArray);
                randomAccessFileOrArray.seek(l2);
                return;
            }
            throw new IllegalArgumentException(MessageLocalization.getComposedMessage("bad.magic.number.should.be.42", new Object[0]));
        }
        throw new IllegalArgumentException(MessageLocalization.getComposedMessage("bad.endianness.tag.not.0x4949.or.0x4d4d", new Object[0]));
    }

    public TIFFDirectory(RandomAccessFileOrArray randomAccessFileOrArray, long l2, int n2) {
        long l3 = randomAccessFileOrArray.getFilePointer();
        randomAccessFileOrArray.seek(0L);
        int n3 = randomAccessFileOrArray.readUnsignedShort();
        boolean bl2 = TIFFDirectory.isValidEndianTag(n3);
        if (bl2) {
            bl2 = n3 == 19789;
            this.isBigEndian = bl2;
            randomAccessFileOrArray.seek(l2);
            for (int i2 = 0; i2 < n2; ++i2) {
                randomAccessFileOrArray.seek(l2 + (long)(this.readUnsignedShort(randomAccessFileOrArray) * 12));
                l2 = this.readUnsignedInt(randomAccessFileOrArray);
                randomAccessFileOrArray.seek(l2);
            }
            this.initialize(randomAccessFileOrArray);
            randomAccessFileOrArray.seek(l3);
            return;
        }
        throw new IllegalArgumentException(MessageLocalization.getComposedMessage("bad.endianness.tag.not.0x4949.or.0x4d4d", new Object[0]));
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public static int getNumDirectories(RandomAccessFileOrArray randomAccessFileOrArray) {
        int n2;
        long l2;
        block5 : {
            l2 = randomAccessFileOrArray.getFilePointer();
            randomAccessFileOrArray.seek(0L);
            n2 = randomAccessFileOrArray.readUnsignedShort();
            boolean bl2 = TIFFDirectory.isValidEndianTag(n2);
            int n3 = 0;
            if (!bl2) {
                throw new IllegalArgumentException(MessageLocalization.getComposedMessage("bad.endianness.tag.not.0x4949.or.0x4d4d", new Object[0]));
            }
            bl2 = n2 == 19789;
            if (TIFFDirectory.readUnsignedShort(randomAccessFileOrArray, bl2) != 42) {
                throw new IllegalArgumentException(MessageLocalization.getComposedMessage("bad.magic.number.should.be.42", new Object[0]));
            }
            randomAccessFileOrArray.seek(4L);
            long l3 = TIFFDirectory.readUnsignedInt(randomAccessFileOrArray, bl2);
            do {
                n2 = n3++;
                if (l3 == 0L) break block5;
                try {
                    randomAccessFileOrArray.seek(l3);
                    randomAccessFileOrArray.skip(TIFFDirectory.readUnsignedShort(randomAccessFileOrArray, bl2) * 12);
                    l3 = TIFFDirectory.readUnsignedInt(randomAccessFileOrArray, bl2);
                    continue;
                }
                catch (EOFException eOFException) {}
                break;
            } while (true);
            n2 = n3 - 1;
        }
        randomAccessFileOrArray.seek(l2);
        return n2;
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    private void initialize(RandomAccessFileOrArray var1_1) {
        var12_3 = var1_1.length();
        this.IFDOffset = var1_1.getFilePointer();
        this.numEntries = this.readUnsignedShort(var1_1);
        this.fields = new TIFFField[this.numEntries];
        var4_4 = 0;
        var10_5 = 0L;
        do {
            block32 : {
                block31 : {
                    block30 : {
                        if (var4_4 < this.numEntries && var10_5 < var12_3) {
                            var8_11 = this.readUnsignedShort(var1_1);
                            var9_12 = this.readUnsignedShort(var1_1);
                            var7_10 = (int)this.readUnsignedInt(var1_1);
                            var10_5 = var1_1.getFilePointer() + 4L;
                            if (TIFFDirectory.sizeOfType[var9_12] * var7_10 > 4) {
                                var14_13 = this.readUnsignedInt(var1_1);
                                if (var14_13 >= var12_3) break block30;
                                var1_1.seek(var14_13);
                            }
                            var2_6 = 1;
                            break block31;
                        }
                        this.nextIFDOffset = this.readUnsignedInt(var1_1);
                        return;
                        catch (ArrayIndexOutOfBoundsException var16_15) {}
                    }
                    var2_6 = 0;
                }
                if (var2_6 == 0) break block32;
                this.fieldIndex.put(var8_11, var4_4);
                var16_14 /* !! */  = null;
                block2 : switch (var9_12) {
                    default: {
                        var2_6 = var7_10;
                        break;
                    }
                    case 12: {
                        var17_17 = new double[var7_10];
                        var3_7 = 0;
                        do {
                            var16_14 /* !! */  = var17_17;
                            var2_6 = var7_10;
                            if (var3_7 >= var7_10) break block2;
                            var17_17[var3_7] = this.readDouble(var1_1);
                            ++var3_7;
                        } while (true);
                    }
                    case 11: {
                        var17_18 = new float[var7_10];
                        var3_7 = 0;
                        do {
                            var16_14 /* !! */  = var17_18;
                            var2_6 = var7_10;
                            if (var3_7 >= var7_10) break block2;
                            var17_18[var3_7] = this.readFloat(var1_1);
                            ++var3_7;
                        } while (true);
                    }
                    case 10: {
                        var17_19 = (int[][])Array.newInstance(Integer.TYPE, new int[]{var7_10, 2});
                        var3_7 = 0;
                        do {
                            var16_14 /* !! */  = var17_19;
                            var2_6 = var7_10;
                            if (var3_7 >= var7_10) break block2;
                            var17_19[var3_7][0] = this.readInt(var1_1);
                            var17_19[var3_7][1] = this.readInt(var1_1);
                            ++var3_7;
                        } while (true);
                    }
                    case 9: {
                        var17_20 = new int[var7_10];
                        var3_7 = 0;
                        do {
                            var16_14 /* !! */  = var17_20;
                            var2_6 = var7_10;
                            if (var3_7 >= var7_10) break block2;
                            var17_20[var3_7] = this.readInt(var1_1);
                            ++var3_7;
                        } while (true);
                    }
                    case 8: {
                        var17_21 = new short[var7_10];
                        var3_7 = 0;
                        do {
                            var16_14 /* !! */  = var17_21;
                            var2_6 = var7_10;
                            if (var3_7 >= var7_10) break block2;
                            var17_21[var3_7] = this.readShort(var1_1);
                            ++var3_7;
                        } while (true);
                    }
                    case 5: {
                        var17_22 = (long[][])Array.newInstance(Long.TYPE, new int[]{var7_10, 2});
                        var3_7 = 0;
                        do {
                            var16_14 /* !! */  = var17_22;
                            var2_6 = var7_10;
                            if (var3_7 >= var7_10) break block2;
                            var17_22[var3_7][0] = this.readUnsignedInt(var1_1);
                            var17_22[var3_7][1] = this.readUnsignedInt(var1_1);
                            ++var3_7;
                        } while (true);
                    }
                    case 4: {
                        var17_23 = new long[var7_10];
                        var3_7 = 0;
                        do {
                            var16_14 /* !! */  = var17_23;
                            var2_6 = var7_10;
                            if (var3_7 >= var7_10) break block2;
                            var17_23[var3_7] = this.readUnsignedInt(var1_1);
                            ++var3_7;
                        } while (true);
                    }
                    case 3: {
                        var17_24 = new char[var7_10];
                        var3_7 = 0;
                        do {
                            var16_14 /* !! */  = var17_24;
                            var2_6 = var7_10;
                            if (var3_7 >= var7_10) break block2;
                            var17_24[var3_7] = (char)this.readUnsignedShort(var1_1);
                            ++var3_7;
                        } while (true);
                    }
                    case 1: 
                    case 2: 
                    case 6: 
                    case 7: {
                        var17_25 = new byte[var7_10];
                        var1_1.readFully(var17_25, 0, var7_10);
                        var16_14 /* !! */  = var17_25;
                        var2_6 = var7_10;
                        if (var9_12 != 2) break;
                        var18_27 = new ArrayList<String>();
                        var2_6 = 0;
                        var5_8 = 0;
                        while (var2_6 < var7_10) {
                            while (var2_6 < var7_10) {
                                var3_7 = var6_9 = var2_6 + 1;
                                if (var17_25[var2_6] != 0) {
                                    var2_6 = var6_9;
                                    continue;
                                }
                                ** GOTO lbl133
                            }
                            var3_7 = var2_6;
lbl133: // 2 sources:
                            var18_27.add(new String(var17_25, var5_8, var3_7 - var5_8));
                            var5_8 = var2_6 = var3_7;
                        }
                        var5_8 = var18_27.size();
                        var17_26 = new String[var5_8];
                        var3_7 = 0;
                        do {
                            var16_14 /* !! */  = var17_26;
                            var2_6 = var5_8;
                            if (var3_7 >= var5_8) break block2;
                            var17_26[var3_7] = (String)var18_27.get(var3_7);
                            ++var3_7;
                        } while (true);
                    }
                }
                this.fields[var4_4] = new TIFFField(var8_11, var9_12, var2_6, var16_14 /* !! */ );
            }
            var1_1.seek(var10_5);
            ++var4_4;
        } while (true);
        catch (Exception var1_2) {}
        this.nextIFDOffset = 0L;
    }

    private static boolean isValidEndianTag(int n2) {
        if (n2 != 18761 && n2 != 19789) {
            return false;
        }
        return true;
    }

    private double readDouble(RandomAccessFileOrArray randomAccessFileOrArray) {
        if (this.isBigEndian) {
            return randomAccessFileOrArray.readDouble();
        }
        return randomAccessFileOrArray.readDoubleLE();
    }

    private float readFloat(RandomAccessFileOrArray randomAccessFileOrArray) {
        if (this.isBigEndian) {
            return randomAccessFileOrArray.readFloat();
        }
        return randomAccessFileOrArray.readFloatLE();
    }

    private int readInt(RandomAccessFileOrArray randomAccessFileOrArray) {
        if (this.isBigEndian) {
            return randomAccessFileOrArray.readInt();
        }
        return randomAccessFileOrArray.readIntLE();
    }

    private long readLong(RandomAccessFileOrArray randomAccessFileOrArray) {
        if (this.isBigEndian) {
            return randomAccessFileOrArray.readLong();
        }
        return randomAccessFileOrArray.readLongLE();
    }

    private short readShort(RandomAccessFileOrArray randomAccessFileOrArray) {
        if (this.isBigEndian) {
            return randomAccessFileOrArray.readShort();
        }
        return randomAccessFileOrArray.readShortLE();
    }

    private long readUnsignedInt(RandomAccessFileOrArray randomAccessFileOrArray) {
        if (this.isBigEndian) {
            return randomAccessFileOrArray.readUnsignedInt();
        }
        return randomAccessFileOrArray.readUnsignedIntLE();
    }

    private static long readUnsignedInt(RandomAccessFileOrArray randomAccessFileOrArray, boolean bl2) {
        if (bl2) {
            return randomAccessFileOrArray.readUnsignedInt();
        }
        return randomAccessFileOrArray.readUnsignedIntLE();
    }

    private int readUnsignedShort(RandomAccessFileOrArray randomAccessFileOrArray) {
        if (this.isBigEndian) {
            return randomAccessFileOrArray.readUnsignedShort();
        }
        return randomAccessFileOrArray.readUnsignedShortLE();
    }

    private static int readUnsignedShort(RandomAccessFileOrArray randomAccessFileOrArray, boolean bl2) {
        if (bl2) {
            return randomAccessFileOrArray.readUnsignedShort();
        }
        return randomAccessFileOrArray.readUnsignedShortLE();
    }

    public TIFFField getField(int n2) {
        Integer n3 = this.fieldIndex.get(n2);
        if (n3 == null) {
            return null;
        }
        return this.fields[n3];
    }

    public byte getFieldAsByte(int n2) {
        return this.getFieldAsByte(n2, 0);
    }

    public byte getFieldAsByte(int n2, int n3) {
        Integer n4 = this.fieldIndex.get(n2);
        return this.fields[n4].getAsBytes()[n3];
    }

    public double getFieldAsDouble(int n2) {
        return this.getFieldAsDouble(n2, 0);
    }

    public double getFieldAsDouble(int n2, int n3) {
        Integer n4 = this.fieldIndex.get(n2);
        return this.fields[n4].getAsDouble(n3);
    }

    public float getFieldAsFloat(int n2) {
        return this.getFieldAsFloat(n2, 0);
    }

    public float getFieldAsFloat(int n2, int n3) {
        Integer n4 = this.fieldIndex.get(n2);
        return this.fields[n4].getAsFloat(n3);
    }

    public long getFieldAsLong(int n2) {
        return this.getFieldAsLong(n2, 0);
    }

    public long getFieldAsLong(int n2, int n3) {
        Integer n4 = this.fieldIndex.get(n2);
        return this.fields[n4].getAsLong(n3);
    }

    public TIFFField[] getFields() {
        return this.fields;
    }

    public long getIFDOffset() {
        return this.IFDOffset;
    }

    public long getNextIFDOffset() {
        return this.nextIFDOffset;
    }

    public int getNumEntries() {
        return this.numEntries;
    }

    public int[] getTags() {
        int[] arrn = new int[this.fieldIndex.size()];
        Enumeration<Integer> enumeration = this.fieldIndex.keys();
        int n2 = 0;
        while (enumeration.hasMoreElements()) {
            arrn[n2] = enumeration.nextElement();
            ++n2;
        }
        return arrn;
    }

    public boolean isBigEndian() {
        return this.isBigEndian;
    }

    public boolean isTagPresent(int n2) {
        return this.fieldIndex.containsKey(n2);
    }
}

