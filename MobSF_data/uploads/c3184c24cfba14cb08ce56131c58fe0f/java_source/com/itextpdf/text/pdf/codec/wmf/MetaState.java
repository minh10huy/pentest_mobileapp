/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf.codec.wmf;

import com.itextpdf.text.BaseColor;
import com.itextpdf.text.pdf.PdfContentByte;
import com.itextpdf.text.pdf.codec.wmf.MetaBrush;
import com.itextpdf.text.pdf.codec.wmf.MetaFont;
import com.itextpdf.text.pdf.codec.wmf.MetaObject;
import com.itextpdf.text.pdf.codec.wmf.MetaPen;
import com.itextpdf.text.pdf.codec.wmf.Point;
import java.util.ArrayList;
import java.util.Stack;

public class MetaState {
    public static final int ALTERNATE = 1;
    public static final int OPAQUE = 2;
    public static final int TA_BASELINE = 24;
    public static final int TA_BOTTOM = 8;
    public static final int TA_CENTER = 6;
    public static final int TA_LEFT = 0;
    public static final int TA_NOUPDATECP = 0;
    public static final int TA_RIGHT = 2;
    public static final int TA_TOP = 0;
    public static final int TA_UPDATECP = 1;
    public static final int TRANSPARENT = 1;
    public static final int WINDING = 2;
    public ArrayList<MetaObject> MetaObjects;
    public int backgroundMode = 2;
    public BaseColor currentBackgroundColor = BaseColor.WHITE;
    public MetaBrush currentBrush;
    public MetaFont currentFont;
    public MetaPen currentPen;
    public Point currentPoint;
    public BaseColor currentTextColor = BaseColor.BLACK;
    public int extentWx;
    public int extentWy;
    public int lineJoin = 1;
    public int offsetWx;
    public int offsetWy;
    public int polyFillMode = 1;
    public Stack<MetaState> savedStates;
    public float scalingX;
    public float scalingY;
    public int textAlign;

    public MetaState() {
        this.savedStates = new Stack();
        this.MetaObjects = new ArrayList();
        this.currentPoint = new Point(0, 0);
        this.currentPen = new MetaPen();
        this.currentBrush = new MetaBrush();
        this.currentFont = new MetaFont();
    }

    public MetaState(MetaState metaState) {
        this.setMetaState(metaState);
    }

    public void addMetaObject(MetaObject metaObject) {
        for (int i2 = 0; i2 < this.MetaObjects.size(); ++i2) {
            if (this.MetaObjects.get(i2) != null) continue;
            this.MetaObjects.set(i2, metaObject);
            return;
        }
        this.MetaObjects.add(metaObject);
    }

    public void cleanup(PdfContentByte pdfContentByte) {
        for (int i2 = this.savedStates.size(); i2 > 0; --i2) {
            pdfContentByte.restoreState();
        }
    }

    public void deleteMetaObject(int n2) {
        this.MetaObjects.set(n2, null);
    }

    public int getBackgroundMode() {
        return this.backgroundMode;
    }

    public BaseColor getCurrentBackgroundColor() {
        return this.currentBackgroundColor;
    }

    public MetaBrush getCurrentBrush() {
        return this.currentBrush;
    }

    public MetaFont getCurrentFont() {
        return this.currentFont;
    }

    public MetaPen getCurrentPen() {
        return this.currentPen;
    }

    public Point getCurrentPoint() {
        return this.currentPoint;
    }

    public BaseColor getCurrentTextColor() {
        return this.currentTextColor;
    }

    public boolean getLineNeutral() {
        if (this.lineJoin == 0) {
            return true;
        }
        return false;
    }

    public int getPolyFillMode() {
        return this.polyFillMode;
    }

    public int getTextAlign() {
        return this.textAlign;
    }

    public void restoreState(int n2, PdfContentByte pdfContentByte) {
        n2 = n2 < 0 ? Math.min(- n2, this.savedStates.size()) : Math.max(this.savedStates.size() - n2, 0);
        if (n2 == 0) {
            return;
        }
        MetaState metaState = null;
        while (n2 != 0) {
            pdfContentByte.restoreState();
            metaState = this.savedStates.pop();
            --n2;
        }
        this.setMetaState(metaState);
    }

    public void saveState(PdfContentByte object) {
        object.saveState();
        object = new MetaState(this);
        this.savedStates.push((MetaState)object);
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Lifted jumps to return sites
     */
    public void selectMetaObject(int var1_1, PdfContentByte var2_2) {
        var3_3 = this.MetaObjects.get(var1_1);
        if (var3_3 == null) {
            return;
        }
        switch (var3_3.getType()) {
            default: {
                return;
            }
            case 3: {
                this.currentFont = (MetaFont)var3_3;
                return;
            }
            case 2: {
                this.currentBrush = (MetaBrush)var3_3;
                var1_1 = this.currentBrush.getStyle();
                if (var1_1 == 0) {
                    var3_3 = this.currentBrush.getColor();
                } else {
                    if (var1_1 != 2) return;
                    var3_3 = this.currentBackgroundColor;
                }
                var2_2.setColorFill((BaseColor)var3_3);
                return;
            }
            case 1: 
        }
        this.currentPen = (MetaPen)var3_3;
        var1_1 = this.currentPen.getStyle();
        if (var1_1 == 5) return;
        var2_2.setColorStroke(this.currentPen.getColor());
        var2_2.setLineWidth(Math.abs((float)this.currentPen.getPenWidth() * this.scalingX / (float)this.extentWx));
        switch (var1_1) {
            default: {
                var2_2.setLineDash(0.0f);
                return;
            }
            case 4: {
                var3_3 = "[9 3 3 3 3 3]0 d\n";
                ** GOTO lbl35
            }
            case 3: {
                var3_3 = "[9 6 3 6]0 d\n";
lbl35: // 2 sources:
                var2_2.setLiteral((String)var3_3);
                return;
            }
            case 2: {
                var2_2.setLineDash(3.0f, 0.0f);
                return;
            }
            case 1: 
        }
        var2_2.setLineDash(18.0f, 6.0f, 0.0f);
    }

    public void setBackgroundMode(int n2) {
        this.backgroundMode = n2;
    }

    public void setCurrentBackgroundColor(BaseColor baseColor) {
        this.currentBackgroundColor = baseColor;
    }

    public void setCurrentPoint(Point point) {
        this.currentPoint = point;
    }

    public void setCurrentTextColor(BaseColor baseColor) {
        this.currentTextColor = baseColor;
    }

    public void setExtentWx(int n2) {
        this.extentWx = n2;
    }

    public void setExtentWy(int n2) {
        this.extentWy = n2;
    }

    public void setLineJoinPolygon(PdfContentByte pdfContentByte) {
        if (this.lineJoin == 0) {
            this.lineJoin = 1;
            pdfContentByte.setLineJoin(1);
        }
    }

    public void setLineJoinRectangle(PdfContentByte pdfContentByte) {
        if (this.lineJoin != 0) {
            this.lineJoin = 0;
            pdfContentByte.setLineJoin(0);
        }
    }

    public void setMetaState(MetaState metaState) {
        this.savedStates = metaState.savedStates;
        this.MetaObjects = metaState.MetaObjects;
        this.currentPoint = metaState.currentPoint;
        this.currentPen = metaState.currentPen;
        this.currentBrush = metaState.currentBrush;
        this.currentFont = metaState.currentFont;
        this.currentBackgroundColor = metaState.currentBackgroundColor;
        this.currentTextColor = metaState.currentTextColor;
        this.backgroundMode = metaState.backgroundMode;
        this.polyFillMode = metaState.polyFillMode;
        this.textAlign = metaState.textAlign;
        this.lineJoin = metaState.lineJoin;
        this.offsetWx = metaState.offsetWx;
        this.offsetWy = metaState.offsetWy;
        this.extentWx = metaState.extentWx;
        this.extentWy = metaState.extentWy;
        this.scalingX = metaState.scalingX;
        this.scalingY = metaState.scalingY;
    }

    public void setOffsetWx(int n2) {
        this.offsetWx = n2;
    }

    public void setOffsetWy(int n2) {
        this.offsetWy = n2;
    }

    public void setPolyFillMode(int n2) {
        this.polyFillMode = n2;
    }

    public void setScalingX(float f2) {
        this.scalingX = f2;
    }

    public void setScalingY(float f2) {
        this.scalingY = f2;
    }

    public void setTextAlign(int n2) {
        this.textAlign = n2;
    }

    public float transformAngle(float f2) {
        float f3 = f2;
        if (this.scalingY < 0.0f) {
            f3 = - f2;
        }
        double d2 = this.scalingX < 0.0f ? 3.141592653589793 - (double)f3 : (double)f3;
        return (float)d2;
    }

    public float transformX(int n2) {
        return ((float)n2 - (float)this.offsetWx) * this.scalingX / (float)this.extentWx;
    }

    public float transformY(int n2) {
        return (1.0f - ((float)n2 - (float)this.offsetWy) / (float)this.extentWy) * this.scalingY;
    }
}

