/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf.codec;

import com.itextpdf.text.error_messages.MessageLocalization;

public class TIFFLZWDecoder {
    int[] andTable = new int[]{511, 1023, 2047, 4095};
    int bitPointer;
    int bitsToGet = 9;
    int bytePointer;
    byte[] data = null;
    int dstIndex;
    int h;
    int nextBits = 0;
    int nextData = 0;
    int predictor;
    int samplesPerPixel;
    byte[][] stringTable;
    int tableIndex;
    byte[] uncompData;
    int w;

    public TIFFLZWDecoder(int n2, int n3, int n4) {
        this.w = n2;
        this.predictor = n3;
        this.samplesPerPixel = n4;
    }

    /*
     * Enabled aggressive block sorting
     */
    public void addStringToTable(byte[] arrby) {
        byte[][] arrby2 = this.stringTable;
        int n2 = this.tableIndex;
        this.tableIndex = n2 + 1;
        arrby2[n2] = arrby;
        if (this.tableIndex == 511) {
            n2 = 10;
        } else if (this.tableIndex == 1023) {
            n2 = 11;
        } else {
            if (this.tableIndex != 2047) {
                return;
            }
            n2 = 12;
        }
        this.bitsToGet = n2;
    }

    /*
     * Enabled aggressive block sorting
     */
    public void addStringToTable(byte[] arrby, byte by2) {
        int n2 = arrby.length;
        byte[] arrby2 = new byte[n2 + 1];
        System.arraycopy(arrby, 0, arrby2, 0, n2);
        arrby2[n2] = by2;
        arrby = this.stringTable;
        n2 = this.tableIndex;
        this.tableIndex = n2 + 1;
        arrby[n2] = (byte)arrby2;
        if (this.tableIndex == 511) {
            n2 = 10;
        } else if (this.tableIndex == 1023) {
            n2 = 11;
        } else {
            if (this.tableIndex != 2047) {
                return;
            }
            n2 = 12;
        }
        this.bitsToGet = n2;
    }

    public byte[] composeString(byte[] arrby, byte by2) {
        int n2 = arrby.length;
        byte[] arrby2 = new byte[n2 + 1];
        System.arraycopy(arrby, 0, arrby2, 0, n2);
        arrby2[n2] = by2;
        return arrby2;
    }

    public byte[] decode(byte[] arrby, byte[] arrby2, int n2) {
        int n3;
        int n4 = 0;
        if (arrby[0] == 0 && arrby[1] == 1) {
            throw new UnsupportedOperationException(MessageLocalization.getComposedMessage("tiff.5.0.style.lzw.codes.are.not.supported", new Object[0]));
        }
        this.initializeStringTable();
        this.data = arrby;
        this.h = n2;
        this.uncompData = arrby2;
        this.bytePointer = 0;
        this.bitPointer = 0;
        this.dstIndex = 0;
        this.nextData = 0;
        this.nextBits = 0;
        int n5 = 0;
        while ((n3 = this.getNextCode()) != 257 && this.dstIndex < arrby2.length) {
            if (n3 == 256) {
                this.initializeStringTable();
                n5 = this.getNextCode();
                if (n5 == 257) break;
                this.writeString(this.stringTable[n5]);
                continue;
            }
            if (n3 < this.tableIndex) {
                arrby = this.stringTable[n3];
                this.writeString(arrby);
                this.addStringToTable(this.stringTable[n5], arrby[0]);
            } else {
                arrby = this.stringTable[n5];
                arrby = this.composeString(arrby, arrby[0]);
                this.writeString(arrby);
                this.addStringToTable(arrby);
            }
            n5 = n3;
        }
        if (this.predictor == 2) {
            for (n5 = n4; n5 < n2; ++n5) {
                n3 = this.samplesPerPixel * (this.w * n5 + 1);
                for (n4 = this.samplesPerPixel; n4 < this.w * this.samplesPerPixel; ++n4) {
                    arrby2[n3] = (byte)(arrby2[n3] + arrby2[n3 - this.samplesPerPixel]);
                    ++n3;
                }
            }
        }
        return arrby2;
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    public int getNextCode() {
        try {
            int n2 = this.nextData;
            byte[] arrby = this.data;
            int n3 = this.bytePointer;
            this.bytePointer = n3 + 1;
            this.nextData = n2 << 8 | arrby[n3] & 255;
            this.nextBits += 8;
            if (this.nextBits < this.bitsToGet) {
                n2 = this.nextData;
                arrby = this.data;
                n3 = this.bytePointer;
                this.bytePointer = n3 + 1;
                this.nextData = n2 << 8 | arrby[n3] & 255;
                this.nextBits += 8;
            }
            n2 = this.nextData;
            n3 = this.nextBits;
            int n4 = this.bitsToGet;
            int n5 = this.andTable[this.bitsToGet - 9];
            this.nextBits -= this.bitsToGet;
            return n2 >> n3 - n4 & n5;
        }
        catch (ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException) {
            return 257;
        }
    }

    public void initializeStringTable() {
        this.stringTable = new byte[4096][];
        for (int i2 = 0; i2 < 256; ++i2) {
            this.stringTable[i2] = new byte[1];
            this.stringTable[i2][0] = (byte)i2;
        }
        this.tableIndex = 258;
        this.bitsToGet = 9;
    }

    public void writeString(byte[] arrby) {
        int n2;
        int n3 = n2 = this.uncompData.length - this.dstIndex;
        if (arrby.length < n2) {
            n3 = arrby.length;
        }
        System.arraycopy(arrby, 0, this.uncompData, this.dstIndex, n3);
        this.dstIndex += n3;
    }
}

