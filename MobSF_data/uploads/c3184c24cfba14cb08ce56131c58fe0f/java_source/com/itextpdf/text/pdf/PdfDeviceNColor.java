/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf;

import com.itextpdf.text.BaseColor;
import com.itextpdf.text.error_messages.MessageLocalization;
import com.itextpdf.text.pdf.CMYKColor;
import com.itextpdf.text.pdf.ColorDetails;
import com.itextpdf.text.pdf.ExtendedColor;
import com.itextpdf.text.pdf.GrayColor;
import com.itextpdf.text.pdf.ICachedColorSpace;
import com.itextpdf.text.pdf.IPdfSpecialColorSpace;
import com.itextpdf.text.pdf.LabColor;
import com.itextpdf.text.pdf.PdfArray;
import com.itextpdf.text.pdf.PdfDictionary;
import com.itextpdf.text.pdf.PdfFunction;
import com.itextpdf.text.pdf.PdfIndirectReference;
import com.itextpdf.text.pdf.PdfName;
import com.itextpdf.text.pdf.PdfObject;
import com.itextpdf.text.pdf.PdfSpotColor;
import com.itextpdf.text.pdf.PdfWriter;
import java.io.Serializable;
import java.lang.reflect.Array;
import java.util.Arrays;
import java.util.Locale;

public class PdfDeviceNColor
implements ICachedColorSpace,
IPdfSpecialColorSpace {
    ColorDetails[] colorantsDetails;
    PdfSpotColor[] spotColors;

    public PdfDeviceNColor(PdfSpotColor[] arrpdfSpotColor) {
        this.spotColors = arrpdfSpotColor;
    }

    @Override
    public boolean equals(Object object) {
        if (this == object) {
            return true;
        }
        if (!(object instanceof PdfDeviceNColor)) {
            return false;
        }
        object = (PdfDeviceNColor)object;
        if (!Arrays.equals(this.spotColors, object.spotColors)) {
            return false;
        }
        return true;
    }

    @Override
    public ColorDetails[] getColorantDetails(PdfWriter pdfWriter) {
        if (this.colorantsDetails == null) {
            this.colorantsDetails = new ColorDetails[this.spotColors.length];
            PdfSpotColor[] arrpdfSpotColor = this.spotColors;
            int n2 = arrpdfSpotColor.length;
            int n3 = 0;
            for (int i2 = 0; i2 < n2; ++i2) {
                PdfSpotColor pdfSpotColor = arrpdfSpotColor[i2];
                this.colorantsDetails[n3] = pdfWriter.addSimple(pdfSpotColor);
                ++n3;
            }
        }
        return this.colorantsDetails;
    }

    public int getNumberOfColorants() {
        return this.spotColors.length;
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Lifted jumps to return sites
     */
    @Override
    public PdfObject getPdfObject(PdfWriter var1_1) {
        var16_2 = new PdfArray(PdfName.DEVICEN);
        var19_3 = new PdfArray();
        var17_4 = new float[this.spotColors.length * 2];
        var15_5 = new PdfDictionary();
        var10_6 = this.spotColors.length;
        var18_7 = (float[][])Array.newInstance(Float.TYPE, new int[]{4, var10_6});
        var13_8 = "";
        for (var8_9 = 0; var8_9 < var10_6; ++var8_9) {
            var20_19 = this.spotColors[var8_9];
            var9_16 = var8_9 * 2;
            var17_4[var9_16] = 0.0f;
            var4_12 = 1.0f;
            var17_4[var9_16 + 1] = 1.0f;
            var19_3.add(var20_19.getName());
            if (var15_5.get(var20_19.getName()) != null) throw new RuntimeException(MessageLocalization.getComposedMessage("devicen.component.names.shall.be.different", new Object[0]));
            if (this.colorantsDetails != null) {
                var12_17 = var20_19.getName();
                var14_18 = this.colorantsDetails[var8_9].getIndirectReference();
            } else {
                var12_17 = var20_19.getName();
                var14_18 = var20_19.getPdfObject((PdfWriter)var1_1);
            }
            var15_5.put((PdfName)var12_17, (PdfObject)var14_18);
            var14_18 = var20_19.getAlternativeCS();
            if (var14_18 instanceof ExtendedColor) {
                var9_16 = ((ExtendedColor)var14_18).type;
                if (var9_16 != 7) {
                    switch (var9_16) {
                        default: {
                            throw new RuntimeException(MessageLocalization.getComposedMessage("only.rgb.gray.and.cmyk.are.supported.as.alternative.color.spaces", new Object[0]));
                        }
                        case 2: {
                            var12_17 = var18_7[0];
                            var14_18 = (CMYKColor)var14_18;
                            var12_17[var8_9] = var14_18.getCyan();
                            var18_7[1][var8_9] = var14_18.getMagenta();
                            var18_7[2][var8_9] = var14_18.getYellow();
                            var18_7[3][var8_9] = var14_18.getBlack();
                            ** break;
                        }
                        case 1: 
                    }
                    var18_7[0][var8_9] = (float)false;
                    var18_7[1][var8_9] = (float)false;
                    var18_7[2][var8_9] = (float)false;
                    var18_7[3][var8_9] = 1.0f - ((GrayColor)var14_18).getGray();
                    ** break;
lbl44: // 2 sources:
                } else {
                    var12_17 = ((LabColor)var14_18).toCmyk();
                    var18_7[0][var8_9] = var12_17.getCyan();
                    var18_7[1][var8_9] = var12_17.getMagenta();
                    var18_7[2][var8_9] = var12_17.getYellow();
                    var18_7[3][var8_9] = var12_17.getBlack();
                }
            } else {
                var3_11 = var14_18.getRed();
                var6_14 = var14_18.getGreen();
                var2_10 = var14_18.getBlue();
                var5_13 = 0.0f;
                if (var3_11 == 0.0f && var6_14 == 0.0f && var2_10 == 0.0f) {
                    var2_10 = 0.0f;
                    var3_11 = 0.0f;
                } else {
                    var3_11 = 1.0f - var3_11 / 255.0f;
                    var5_13 = 1.0f - var6_14 / 255.0f;
                    var6_14 = 1.0f - var2_10 / 255.0f;
                    var4_12 = Math.min(var3_11, Math.min(var5_13, var6_14));
                    var7_15 = 1.0f - var4_12;
                    var2_10 = (var3_11 - var4_12) / var7_15;
                    var3_11 = (var5_13 - var4_12) / var7_15;
                    var5_13 = (var6_14 - var4_12) / var7_15;
                }
                var18_7[0][var8_9] = var2_10;
                var18_7[1][var8_9] = var3_11;
                var18_7[2][var8_9] = var5_13;
                var18_7[3][var8_9] = var4_12;
            }
            var12_17 = new StringBuilder();
            var12_17.append(var13_8);
            var12_17.append("pop ");
            var13_8 = var12_17.toString();
        }
        var16_2.add((PdfObject)var19_3);
        var12_17 = String.format(Locale.US, "1.000000 %d 1 roll ", new Object[]{var10_6 + 1});
        var16_2.add(PdfName.DEVICECMYK);
        var14_18 = new StringBuilder();
        var14_18.append((String)var12_17);
        var14_18.append((String)var12_17);
        var14_18.append((String)var12_17);
        var14_18.append((String)var12_17);
        var19_3 = var14_18.toString();
        var11_20 = var10_6 + 4;
        var14_18 = "";
        var8_9 = var11_20;
        var12_17 = var15_5;
        do {
            if (var8_9 <= var10_6) {
                var15_5 = new StringBuilder();
                var15_5.append("{ ");
                var15_5.append((String)var19_3);
                var15_5.append((String)var14_18);
                var15_5.append(var13_8);
                var15_5.append("}");
                var13_8 = var15_5.toString();
                var16_2.add(PdfFunction.type4((PdfWriter)var1_1, var17_4, new float[]{0.0f, 1.0f, 0.0f, 1.0f, 0.0f, 1.0f, 0.0f, 1.0f}, var13_8).getReference());
                var1_1 = new PdfDictionary();
                var1_1.put(PdfName.SUBTYPE, PdfName.NCHANNEL);
                var1_1.put(PdfName.COLORANTS, (PdfObject)var12_17);
                var16_2.add((PdfObject)var1_1);
                return var16_2;
            }
            var15_5 = new StringBuilder();
            var15_5.append((String)var14_18);
            var15_5.append(String.format(Locale.US, "%d -1 roll ", new Object[]{var8_9}));
            var14_18 = var15_5.toString();
            for (var9_16 = var10_6; var9_16 > 0; --var9_16) {
                var15_5 = new StringBuilder();
                var15_5.append((String)var14_18);
                var15_5.append(String.format(Locale.US, "%d index %f mul 1.000000 cvr exch sub mul ", new Object[]{var9_16, Float.valueOf(var18_7[var11_20 - var8_9][var10_6 - var9_16])}));
                var14_18 = var15_5.toString();
            }
            var15_5 = new StringBuilder();
            var15_5.append((String)var14_18);
            var15_5.append(String.format(Locale.US, "1.000000 cvr exch sub %d 1 roll ", new Object[]{var8_9}));
            var14_18 = var15_5.toString();
            --var8_9;
        } while (true);
    }

    public PdfSpotColor[] getSpotColors() {
        return this.spotColors;
    }

    @Override
    public int hashCode() {
        return Arrays.hashCode(this.spotColors);
    }
}

