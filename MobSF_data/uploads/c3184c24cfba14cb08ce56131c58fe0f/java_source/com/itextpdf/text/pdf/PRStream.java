/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf;

import com.itextpdf.text.Document;
import com.itextpdf.text.ExceptionConverter;
import com.itextpdf.text.pdf.PdfDictionary;
import com.itextpdf.text.pdf.PdfEncryption;
import com.itextpdf.text.pdf.PdfName;
import com.itextpdf.text.pdf.PdfNumber;
import com.itextpdf.text.pdf.PdfObject;
import com.itextpdf.text.pdf.PdfReader;
import com.itextpdf.text.pdf.PdfStream;
import com.itextpdf.text.pdf.PdfWriter;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.zip.Deflater;
import java.util.zip.DeflaterOutputStream;

public class PRStream
extends PdfStream {
    protected int length;
    protected int objGen;
    protected int objNum;
    protected long offset;
    protected PdfReader reader;

    public PRStream(PRStream pRStream, PdfDictionary pdfDictionary) {
        this.objNum = 0;
        this.objGen = 0;
        this.reader = pRStream.reader;
        this.offset = pRStream.offset;
        this.length = pRStream.length;
        this.compressed = pRStream.compressed;
        this.compressionLevel = pRStream.compressionLevel;
        this.streamBytes = pRStream.streamBytes;
        this.bytes = pRStream.bytes;
        this.objNum = pRStream.objNum;
        this.objGen = pRStream.objGen;
        if (pdfDictionary != null) {
            this.putAll(pdfDictionary);
            return;
        }
        this.hashMap.putAll(pRStream.hashMap);
    }

    public PRStream(PRStream pRStream, PdfDictionary pdfDictionary, PdfReader pdfReader) {
        this(pRStream, pdfDictionary);
        this.reader = pdfReader;
    }

    public PRStream(PdfReader pdfReader, long l2) {
        this.objNum = 0;
        this.objGen = 0;
        this.reader = pdfReader;
        this.offset = l2;
    }

    public PRStream(PdfReader pdfReader, byte[] arrby) {
        this(pdfReader, arrby, -1);
    }

    public PRStream(PdfReader object, byte[] arrby, int n2) {
        block3 : {
            block2 : {
                this.objNum = 0;
                this.objGen = 0;
                this.reader = object;
                this.offset = -1L;
                if (!Document.compress) break block2;
                try {
                    object = new ByteArrayOutputStream();
                    Deflater deflater = new Deflater(n2);
                    DeflaterOutputStream deflaterOutputStream = new DeflaterOutputStream((OutputStream)object, deflater);
                    deflaterOutputStream.write(arrby);
                    deflaterOutputStream.close();
                    deflater.end();
                    this.bytes = object.toByteArray();
                }
                catch (IOException iOException) {
                    throw new ExceptionConverter(iOException);
                }
                this.put(PdfName.FILTER, PdfName.FLATEDECODE);
                break block3;
            }
            this.bytes = arrby;
        }
        this.setLength(this.bytes.length);
    }

    @Override
    public byte[] getBytes() {
        return this.bytes;
    }

    public int getLength() {
        return this.length;
    }

    int getObjGen() {
        return this.objGen;
    }

    int getObjNum() {
        return this.objNum;
    }

    public long getOffset() {
        return this.offset;
    }

    public PdfReader getReader() {
        return this.reader;
    }

    public void setData(byte[] arrby) {
        this.setData(arrby, true);
    }

    public void setData(byte[] arrby, boolean bl2) {
        this.setData(arrby, bl2, -1);
    }

    public void setData(byte[] arrby, boolean bl2, int n2) {
        block3 : {
            block2 : {
                this.remove(PdfName.FILTER);
                this.offset = -1L;
                if (!Document.compress || !bl2) break block2;
                try {
                    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
                    Deflater deflater = new Deflater(n2);
                    DeflaterOutputStream deflaterOutputStream = new DeflaterOutputStream((OutputStream)byteArrayOutputStream, deflater);
                    deflaterOutputStream.write(arrby);
                    deflaterOutputStream.close();
                    deflater.end();
                    this.bytes = byteArrayOutputStream.toByteArray();
                    this.compressionLevel = n2;
                }
                catch (IOException iOException) {
                    throw new ExceptionConverter(iOException);
                }
                this.put(PdfName.FILTER, PdfName.FLATEDECODE);
                break block3;
            }
            this.bytes = arrby;
        }
        this.setLength(this.bytes.length);
    }

    public void setDataRaw(byte[] arrby) {
        this.offset = -1L;
        this.bytes = arrby;
        this.setLength(this.bytes.length);
    }

    public void setLength(int n2) {
        this.length = n2;
        this.put(PdfName.LENGTH, new PdfNumber(n2));
    }

    public void setObjNum(int n2, int n3) {
        this.objNum = n2;
        this.objGen = n3;
    }

    @Override
    public void toPdf(PdfWriter arrby, OutputStream outputStream) {
        int n2;
        byte[] arrby2 = PdfReader.getStreamBytesRaw(this);
        PdfEncryption pdfEncryption = arrby != null ? arrby.getEncryption() : null;
        PdfObject pdfObject = this.get(PdfName.LENGTH);
        int n3 = n2 = arrby2.length;
        if (pdfEncryption != null) {
            n3 = pdfEncryption.calculateStreamSize(n2);
        }
        this.put(PdfName.LENGTH, new PdfNumber(n3));
        this.superToPdf((PdfWriter)arrby, outputStream);
        this.put(PdfName.LENGTH, pdfObject);
        outputStream.write(STARTSTREAM);
        if (this.length > 0) {
            arrby = arrby2;
            if (pdfEncryption != null) {
                arrby = arrby2;
                if (!pdfEncryption.isEmbeddedFilesOnly()) {
                    arrby = pdfEncryption.encryptByteArray(arrby2);
                }
            }
            outputStream.write(arrby);
        }
        outputStream.write(ENDSTREAM);
    }
}

