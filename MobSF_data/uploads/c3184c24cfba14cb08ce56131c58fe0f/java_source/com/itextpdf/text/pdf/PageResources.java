/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf;

import com.itextpdf.text.pdf.PdfDictionary;
import com.itextpdf.text.pdf.PdfIndirectReference;
import com.itextpdf.text.pdf.PdfName;
import com.itextpdf.text.pdf.PdfObject;
import com.itextpdf.text.pdf.PdfReader;
import com.itextpdf.text.pdf.PdfResources;
import java.io.Serializable;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Set;

class PageResources {
    protected PdfDictionary colorDictionary = new PdfDictionary();
    protected PdfDictionary extGStateDictionary = new PdfDictionary();
    protected PdfDictionary fontDictionary = new PdfDictionary();
    protected HashSet<PdfName> forbiddenNames;
    protected int[] namePtr = new int[]{0};
    protected PdfDictionary originalResources;
    protected PdfDictionary patternDictionary = new PdfDictionary();
    protected PdfDictionary propertyDictionary = new PdfDictionary();
    protected PdfDictionary shadingDictionary = new PdfDictionary();
    protected HashMap<PdfName, PdfName> usedNames;
    protected PdfDictionary xObjectDictionary = new PdfDictionary();

    PageResources() {
    }

    PdfName addColor(PdfName pdfName, PdfIndirectReference pdfIndirectReference) {
        pdfName = this.translateName(pdfName);
        this.colorDictionary.put(pdfName, pdfIndirectReference);
        return pdfName;
    }

    void addDefaultColor(PdfDictionary pdfDictionary) {
        this.colorDictionary.merge(pdfDictionary);
    }

    void addDefaultColor(PdfName pdfName, PdfObject pdfObject) {
        if (pdfObject != null && !pdfObject.isNull()) {
            this.colorDictionary.put(pdfName, pdfObject);
            return;
        }
        this.colorDictionary.remove(pdfName);
    }

    void addDefaultColorDiff(PdfDictionary pdfDictionary) {
        this.colorDictionary.mergeDifferent(pdfDictionary);
    }

    PdfName addExtGState(PdfName pdfName, PdfIndirectReference pdfIndirectReference) {
        pdfName = this.translateName(pdfName);
        this.extGStateDictionary.put(pdfName, pdfIndirectReference);
        return pdfName;
    }

    PdfName addFont(PdfName pdfName, PdfIndirectReference pdfIndirectReference) {
        pdfName = this.translateName(pdfName);
        this.fontDictionary.put(pdfName, pdfIndirectReference);
        return pdfName;
    }

    PdfName addPattern(PdfName pdfName, PdfIndirectReference pdfIndirectReference) {
        pdfName = this.translateName(pdfName);
        this.patternDictionary.put(pdfName, pdfIndirectReference);
        return pdfName;
    }

    PdfName addProperty(PdfName pdfName, PdfIndirectReference pdfIndirectReference) {
        pdfName = this.translateName(pdfName);
        this.propertyDictionary.put(pdfName, pdfIndirectReference);
        return pdfName;
    }

    PdfName addShading(PdfName pdfName, PdfIndirectReference pdfIndirectReference) {
        pdfName = this.translateName(pdfName);
        this.shadingDictionary.put(pdfName, pdfIndirectReference);
        return pdfName;
    }

    PdfName addXObject(PdfName pdfName, PdfIndirectReference pdfIndirectReference) {
        pdfName = this.translateName(pdfName);
        this.xObjectDictionary.put(pdfName, pdfIndirectReference);
        return pdfName;
    }

    PdfDictionary getResources() {
        PdfResources pdfResources = new PdfResources();
        if (this.originalResources != null) {
            pdfResources.putAll(this.originalResources);
        }
        pdfResources.add(PdfName.FONT, this.fontDictionary);
        pdfResources.add(PdfName.XOBJECT, this.xObjectDictionary);
        pdfResources.add(PdfName.COLORSPACE, this.colorDictionary);
        pdfResources.add(PdfName.PATTERN, this.patternDictionary);
        pdfResources.add(PdfName.SHADING, this.shadingDictionary);
        pdfResources.add(PdfName.EXTGSTATE, this.extGStateDictionary);
        pdfResources.add(PdfName.PROPERTIES, this.propertyDictionary);
        return pdfResources;
    }

    boolean hasResources() {
        if (this.fontDictionary.size() <= 0 && this.xObjectDictionary.size() <= 0 && this.colorDictionary.size() <= 0 && this.patternDictionary.size() <= 0 && this.shadingDictionary.size() <= 0 && this.extGStateDictionary.size() <= 0 && this.propertyDictionary.size() <= 0) {
            return false;
        }
        return true;
    }

    void setOriginalResources(PdfDictionary pdfDictionary, int[] object) {
        if (object != null) {
            this.namePtr = object;
        }
        this.forbiddenNames = new HashSet();
        this.usedNames = new HashMap();
        if (pdfDictionary == null) {
            return;
        }
        this.originalResources = new PdfDictionary();
        this.originalResources.merge(pdfDictionary);
        for (PdfName pdfName : pdfDictionary.getKeys()) {
            PdfObject pdfObject = PdfReader.getPdfObject(pdfDictionary.get(pdfName));
            if (pdfObject == null || !pdfObject.isDictionary()) continue;
            pdfObject = (PdfDictionary)pdfObject;
            for (PdfName pdfName2 : pdfObject.getKeys()) {
                this.forbiddenNames.add(pdfName2);
            }
            PdfDictionary pdfDictionary2 = new PdfDictionary();
            pdfDictionary2.merge((PdfDictionary)pdfObject);
            this.originalResources.put(pdfName, pdfDictionary2);
        }
    }

    PdfName translateName(PdfName pdfName) {
        Serializable serializable;
        if (this.forbiddenNames != null) {
            int[] arrn = this.usedNames.get(pdfName);
            serializable = arrn;
            if (arrn == null) {
                do {
                    serializable = new StringBuilder();
                    serializable.append("Xi");
                    arrn = this.namePtr;
                    int n2 = arrn[0];
                    arrn[0] = n2 + 1;
                    serializable.append(n2);
                } while (this.forbiddenNames.contains(serializable = new PdfName(serializable.toString())));
                this.usedNames.put(pdfName, (PdfName)serializable);
                return serializable;
            }
        } else {
            serializable = pdfName;
        }
        return serializable;
    }
}

