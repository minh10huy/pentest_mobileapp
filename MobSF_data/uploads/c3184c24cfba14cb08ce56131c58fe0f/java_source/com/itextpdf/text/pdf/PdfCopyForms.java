/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf;

import com.itextpdf.text.DocWriter;
import com.itextpdf.text.pdf.PdfCopyFormsImp;
import com.itextpdf.text.pdf.PdfEncodings;
import com.itextpdf.text.pdf.PdfName;
import com.itextpdf.text.pdf.PdfObject;
import com.itextpdf.text.pdf.PdfReader;
import com.itextpdf.text.pdf.PdfWriter;
import com.itextpdf.text.pdf.SequenceList;
import com.itextpdf.text.pdf.interfaces.PdfEncryptionSettings;
import com.itextpdf.text.pdf.interfaces.PdfViewerPreferences;
import java.io.OutputStream;
import java.security.cert.Certificate;
import java.util.HashMap;
import java.util.List;

public class PdfCopyForms
implements PdfEncryptionSettings,
PdfViewerPreferences {
    private PdfCopyFormsImp fc;

    public PdfCopyForms(OutputStream outputStream) {
        this.fc = new PdfCopyFormsImp(outputStream);
    }

    public void addDocument(PdfReader pdfReader) {
        this.fc.addDocument(pdfReader);
    }

    public void addDocument(PdfReader pdfReader, String string2) {
        this.fc.addDocument(pdfReader, SequenceList.expand(string2, pdfReader.getNumberOfPages()));
    }

    public void addDocument(PdfReader pdfReader, List<Integer> list) {
        this.fc.addDocument(pdfReader, list);
    }

    public void addJavaScript(String string2) {
        this.fc.addJavaScript(string2, PdfEncodings.isPdfDocEncoding(string2) ^ true);
    }

    @Override
    public void addViewerPreference(PdfName pdfName, PdfObject pdfObject) {
        this.fc.addViewerPreference(pdfName, pdfObject);
    }

    public void close() {
        this.fc.close();
    }

    public void copyDocumentFields(PdfReader pdfReader) {
        this.fc.copyDocumentFields(pdfReader);
    }

    public PdfWriter getWriter() {
        return this.fc;
    }

    public boolean isFullCompression() {
        return this.fc.isFullCompression();
    }

    public void open() {
        this.fc.openDoc();
    }

    public void setEncryption(boolean bl2, String string2, String string3, int n2) {
        this.setEncryption(DocWriter.getISOBytes(string2), DocWriter.getISOBytes(string3), n2, bl2);
    }

    @Override
    public void setEncryption(byte[] arrby, byte[] arrby2, int n2, int n3) {
        this.fc.setEncryption(arrby, arrby2, n2, n3);
    }

    public void setEncryption(byte[] arrby, byte[] arrby2, int n2, boolean bl2) {
        RuntimeException runtimeException;
        super("d2j fail translate: java.lang.RuntimeException: can not merge I and Z\n\tat com.googlecode.dex2jar.ir.TypeClass.merge(TypeClass.java:100)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeRef.updateTypeClass(TypeTransformer.java:174)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.copyTypes(TypeTransformer.java:311)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.fixTypes(TypeTransformer.java:226)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.analyze(TypeTransformer.java:207)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer.transform(TypeTransformer.java:44)\n\tat com.googlecode.d2j.dex.Dex2jar$2.optimize(Dex2jar.java:162)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertCode(Dex2Asm.java:414)\n\tat com.googlecode.d2j.dex.ExDex2Asm.convertCode(ExDex2Asm.java:42)\n\tat com.googlecode.d2j.dex.Dex2jar$2.convertCode(Dex2jar.java:128)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertMethod(Dex2Asm.java:509)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertClass(Dex2Asm.java:406)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertDex(Dex2Asm.java:422)\n\tat com.googlecode.d2j.dex.Dex2jar.doTranslate(Dex2jar.java:172)\n\tat com.googlecode.d2j.dex.Dex2jar.to(Dex2jar.java:272)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.doCommandLine(Dex2jarCmd.java:108)\n\tat com.googlecode.dex2jar.tools.BaseCmd.doMain(BaseCmd.java:288)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.main(Dex2jarCmd.java:32)\n");
        throw runtimeException;
    }

    @Override
    public void setEncryption(Certificate[] arrcertificate, int[] arrn, int n2) {
        this.fc.setEncryption(arrcertificate, arrn, n2);
    }

    public void setFullCompression() {
        this.fc.setFullCompression();
    }

    public void setOutlines(List<HashMap<String, Object>> list) {
        this.fc.setOutlines(list);
    }

    @Override
    public void setViewerPreferences(int n2) {
        this.fc.setViewerPreferences(n2);
    }
}

