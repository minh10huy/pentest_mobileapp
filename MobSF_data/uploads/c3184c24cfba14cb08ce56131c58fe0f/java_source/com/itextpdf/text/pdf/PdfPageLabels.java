/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf;

import com.itextpdf.text.ExceptionConverter;
import com.itextpdf.text.error_messages.MessageLocalization;
import com.itextpdf.text.factories.RomanAlphabetFactory;
import com.itextpdf.text.factories.RomanNumberFactory;
import com.itextpdf.text.pdf.PdfDictionary;
import com.itextpdf.text.pdf.PdfName;
import com.itextpdf.text.pdf.PdfNumber;
import com.itextpdf.text.pdf.PdfNumberTree;
import com.itextpdf.text.pdf.PdfObject;
import com.itextpdf.text.pdf.PdfReader;
import com.itextpdf.text.pdf.PdfString;
import com.itextpdf.text.pdf.PdfWriter;
import java.io.IOException;
import java.io.Serializable;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Set;

public class PdfPageLabels {
    public static final int DECIMAL_ARABIC_NUMERALS = 0;
    public static final int EMPTY = 5;
    public static final int LOWERCASE_LETTERS = 4;
    public static final int LOWERCASE_ROMAN_NUMERALS = 2;
    public static final int UPPERCASE_LETTERS = 3;
    public static final int UPPERCASE_ROMAN_NUMERALS = 1;
    static PdfName[] numberingStyle = new PdfName[]{PdfName.D, PdfName.R, new PdfName("r"), PdfName.A, new PdfName("a")};
    private HashMap<Integer, PdfDictionary> map = new HashMap();

    public PdfPageLabels() {
        this.addPageLabel(1, 0, null, 1);
    }

    public static PdfPageLabelFormat[] getPageLabelFormats(PdfReader object) {
        if ((object = (PdfDictionary)PdfReader.getPdfObjectRelease(object.getCatalog().get(PdfName.PAGELABELS))) == null) {
            return null;
        }
        HashMap<Integer, PdfObject> hashMap = PdfNumberTree.readTree((PdfDictionary)object);
        object = new Integer[hashMap.size()];
        Object[] arrobject = hashMap.keySet().toArray((T[])object);
        Arrays.sort(arrobject);
        PdfPageLabelFormat[] arrpdfPageLabelFormat = new PdfPageLabelFormat[hashMap.size()];
        for (int i2 = 0; i2 < arrobject.length; ++i2) {
            int n2;
            Object object2 = arrobject[i2];
            PdfDictionary pdfDictionary = (PdfDictionary)PdfReader.getPdfObjectRelease(hashMap.get(object2));
            int n3 = pdfDictionary.contains(PdfName.ST) ? ((PdfNumber)pdfDictionary.get(PdfName.ST)).intValue() : 1;
            object = pdfDictionary.contains(PdfName.P) ? ((PdfString)pdfDictionary.get(PdfName.P)).toUnicodeString() : "";
            n2 = pdfDictionary.contains(PdfName.S) ? ((n2 = (int)((PdfName)pdfDictionary.get(PdfName.S)).toString().charAt(1)) != 65 ? (n2 != 82 ? (n2 != 97 ? (n2 != 114 ? 0 : 2) : 4) : 1) : 3) : 5;
            arrpdfPageLabelFormat[i2] = new PdfPageLabelFormat(object2.intValue() + 1, n2, (String)object, n3);
        }
        return arrpdfPageLabelFormat;
    }

    public static String[] getPageLabels(PdfReader object) {
        int n2 = object.getNumberOfPages();
        if ((object = (PdfDictionary)PdfReader.getPdfObjectRelease(object.getCatalog().get(PdfName.PAGELABELS))) == null) {
            return null;
        }
        String[] arrstring = new String[n2];
        HashMap<Integer, PdfObject> hashMap = PdfNumberTree.readTree((PdfDictionary)object);
        int n3 = 68;
        object = "";
        int n4 = 1;
        for (int i2 = 0; i2 < n2; ++i2) {
            Serializable serializable = Integer.valueOf(i2);
            if (hashMap.containsKey(serializable)) {
                n3 = (serializable = (PdfDictionary)PdfReader.getPdfObjectRelease(hashMap.get(serializable))).contains(PdfName.ST) ? ((PdfNumber)serializable.get(PdfName.ST)).intValue() : 1;
                object = serializable.contains(PdfName.P) ? ((PdfString)serializable.get(PdfName.P)).toUnicodeString() : "";
                if (serializable.contains(PdfName.S)) {
                    char c2 = ((PdfName)serializable.get(PdfName.S)).toString().charAt(1);
                    n4 = n3;
                    n3 = c2;
                } else {
                    n4 = n3;
                    n3 = 101;
                }
            }
            if (n3 != 65) {
                if (n3 != 82) {
                    if (n3 != 97) {
                        if (n3 != 101) {
                            if (n3 != 114) {
                                serializable = new StringBuilder();
                                serializable.append((String)object);
                                serializable.append(n4);
                                arrstring[i2] = serializable.toString();
                            } else {
                                serializable = new StringBuilder();
                                serializable.append((String)object);
                                serializable.append(RomanNumberFactory.getLowerCaseString(n4));
                                arrstring[i2] = serializable.toString();
                            }
                        } else {
                            arrstring[i2] = object;
                        }
                    } else {
                        serializable = new StringBuilder();
                        serializable.append((String)object);
                        serializable.append(RomanAlphabetFactory.getLowerCaseString(n4));
                        arrstring[i2] = serializable.toString();
                    }
                } else {
                    serializable = new StringBuilder();
                    serializable.append((String)object);
                    serializable.append(RomanNumberFactory.getUpperCaseString(n4));
                    arrstring[i2] = serializable.toString();
                }
            } else {
                serializable = new StringBuilder();
                serializable.append((String)object);
                serializable.append(RomanAlphabetFactory.getUpperCaseString(n4));
                arrstring[i2] = serializable.toString();
            }
            ++n4;
        }
        return arrstring;
    }

    public void addPageLabel(int n2, int n3) {
        this.addPageLabel(n2, n3, null, 1);
    }

    public void addPageLabel(int n2, int n3, String string2) {
        this.addPageLabel(n2, n3, string2, 1);
    }

    public void addPageLabel(int n2, int n3, String string2, int n4) {
        if (n2 >= 1 && n4 >= 1) {
            PdfDictionary pdfDictionary = new PdfDictionary();
            if (n3 >= 0 && n3 < numberingStyle.length) {
                pdfDictionary.put(PdfName.S, numberingStyle[n3]);
            }
            if (string2 != null) {
                pdfDictionary.put(PdfName.P, new PdfString(string2, "UnicodeBig"));
            }
            if (n4 != 1) {
                pdfDictionary.put(PdfName.ST, new PdfNumber(n4));
            }
            this.map.put(n2 - 1, pdfDictionary);
            return;
        }
        throw new IllegalArgumentException(MessageLocalization.getComposedMessage("in.a.page.label.the.page.numbers.must.be.greater.or.equal.to.1", new Object[0]));
    }

    public void addPageLabel(int n2, int n3, String string2, int n4, boolean bl2) {
        if (n2 >= 1 && n4 >= 1) {
            PdfDictionary pdfDictionary = new PdfDictionary();
            if (n3 >= 0 && n3 < numberingStyle.length) {
                pdfDictionary.put(PdfName.S, numberingStyle[n3]);
            }
            if (string2 != null) {
                pdfDictionary.put(PdfName.P, new PdfString(string2, "UnicodeBig"));
            }
            if (n4 != 1 || bl2) {
                pdfDictionary.put(PdfName.ST, new PdfNumber(n4));
            }
            this.map.put(n2 - 1, pdfDictionary);
            return;
        }
        throw new IllegalArgumentException(MessageLocalization.getComposedMessage("in.a.page.label.the.page.numbers.must.be.greater.or.equal.to.1", new Object[0]));
    }

    public void addPageLabel(PdfPageLabelFormat pdfPageLabelFormat) {
        this.addPageLabel(pdfPageLabelFormat.physicalPage, pdfPageLabelFormat.numberStyle, pdfPageLabelFormat.prefix, pdfPageLabelFormat.logicalPage);
    }

    public PdfDictionary getDictionary(PdfWriter object) {
        try {
            object = PdfNumberTree.writeTree(this.map, (PdfWriter)object);
            return object;
        }
        catch (IOException iOException) {
            throw new ExceptionConverter(iOException);
        }
    }

    public void removePageLabel(int n2) {
        if (n2 <= 1) {
            return;
        }
        this.map.remove(n2 - 1);
    }

    public static class PdfPageLabelFormat {
        public int logicalPage;
        public int numberStyle;
        public int physicalPage;
        public String prefix;

        public PdfPageLabelFormat(int n2, int n3, String string2, int n4) {
            this.physicalPage = n2;
            this.numberStyle = n3;
            this.prefix = string2;
            this.logicalPage = n4;
        }

        public String toString() {
            return String.format("Physical page %s: style: %s; prefix '%s'; logical page: %s", this.physicalPage, this.numberStyle, this.prefix, this.logicalPage);
        }
    }

}

