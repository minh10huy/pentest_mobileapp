/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf;

import com.itextpdf.text.SplitCharacter;
import com.itextpdf.text.pdf.PdfChunk;

public class DefaultSplitCharacter
implements SplitCharacter {
    public static final SplitCharacter DEFAULT = new DefaultSplitCharacter();
    protected char[] characters;

    public DefaultSplitCharacter() {
    }

    public DefaultSplitCharacter(char c2) {
        this(new char[]{c2});
    }

    public DefaultSplitCharacter(char[] arrc) {
        this.characters = arrc;
    }

    protected char getCurrentCharacter(int n2, char[] arrc, PdfChunk[] arrpdfChunk) {
        if (arrpdfChunk == null) {
            return arrc[n2];
        }
        return (char)arrpdfChunk[Math.min(n2, arrpdfChunk.length - 1)].getUnicodeEquivalent(arrc[n2]);
    }

    @Override
    public boolean isSplitCharacter(int n2, int n3, int n4, char[] arrc, PdfChunk[] arrpdfChunk) {
        boolean bl2;
        block8 : {
            block12 : {
                boolean bl3;
                block11 : {
                    block10 : {
                        block9 : {
                            n3 = this.getCurrentCharacter(n3, arrc, arrpdfChunk);
                            arrc = this.characters;
                            bl3 = true;
                            if (arrc != null) {
                                for (n2 = 0; n2 < this.characters.length; ++n2) {
                                    if (n3 != this.characters[n2]) continue;
                                    return true;
                                }
                                return false;
                            }
                            bl2 = bl3;
                            if (n3 <= 32) break block8;
                            bl2 = bl3;
                            if (n3 == 45) break block8;
                            if (n3 == 8208) {
                                return true;
                            }
                            if (n3 < 8194) {
                                return false;
                            }
                            if (n3 < 8194) break block9;
                            bl2 = bl3;
                            if (n3 <= 8203) break block8;
                        }
                        if (n3 < 11904) break block10;
                        bl2 = bl3;
                        if (n3 < 55200) break block8;
                    }
                    if (n3 < 63744) break block11;
                    bl2 = bl3;
                    if (n3 < 64256) break block8;
                }
                if (n3 < 65072) break block12;
                bl2 = bl3;
                if (n3 < 65104) break block8;
            }
            if (n3 >= 65377 && n3 < 65440) {
                return true;
            }
            bl2 = false;
        }
        return bl2;
    }
}

