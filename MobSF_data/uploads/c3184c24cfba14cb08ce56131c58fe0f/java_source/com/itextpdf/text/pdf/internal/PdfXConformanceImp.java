/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf.internal;

import com.itextpdf.text.BaseColor;
import com.itextpdf.text.error_messages.MessageLocalization;
import com.itextpdf.text.pdf.BaseFont;
import com.itextpdf.text.pdf.ExtendedColor;
import com.itextpdf.text.pdf.PatternColor;
import com.itextpdf.text.pdf.PdfArray;
import com.itextpdf.text.pdf.PdfDictionary;
import com.itextpdf.text.pdf.PdfGState;
import com.itextpdf.text.pdf.PdfImage;
import com.itextpdf.text.pdf.PdfName;
import com.itextpdf.text.pdf.PdfNumber;
import com.itextpdf.text.pdf.PdfObject;
import com.itextpdf.text.pdf.PdfPatternPainter;
import com.itextpdf.text.pdf.PdfShading;
import com.itextpdf.text.pdf.PdfShadingPattern;
import com.itextpdf.text.pdf.PdfSpotColor;
import com.itextpdf.text.pdf.PdfWriter;
import com.itextpdf.text.pdf.PdfXConformanceException;
import com.itextpdf.text.pdf.ShadingColor;
import com.itextpdf.text.pdf.SpotColor;
import com.itextpdf.text.pdf.interfaces.PdfXConformance;

public class PdfXConformanceImp
implements PdfXConformance {
    protected int pdfxConformance = 0;
    protected PdfWriter writer;

    public PdfXConformanceImp(PdfWriter pdfWriter) {
        this.writer = pdfWriter;
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Lifted jumps to return sites
     */
    @Override
    public void checkPdfIsoConformance(int var1_1, Object var2_2) {
        if (this.writer == null) return;
        if (!this.writer.isPdfX()) {
            return;
        }
        var5_3 = this.writer.getPDFXConformance();
        switch (var1_1) {
            default: {
                return;
            }
            case 7: {
                throw new PdfXConformanceException(MessageLocalization.getComposedMessage("layers.are.not.allowed", new Object[0]));
            }
            case 6: {
                var2_2 = (PdfDictionary)var2_2;
                if (var2_2 == null) {
                    return;
                }
                var6_4 = var2_2.get(PdfName.BM);
                if (var6_4 != null && !PdfGState.BM_NORMAL.equals(var6_4) && !PdfGState.BM_COMPATIBLE.equals(var6_4)) {
                    throw new PdfXConformanceException(MessageLocalization.getComposedMessage("blend.mode.1.not.allowed", new Object[]{var6_4.toString()}));
                }
                var6_4 = var2_2.get(PdfName.CA);
                if (var6_4 != null && (var3_5 = ((PdfNumber)var6_4).doubleValue()) != 1.0) {
                    throw new PdfXConformanceException(MessageLocalization.getComposedMessage("transparency.is.not.allowed.ca.eq.1", new Object[]{String.valueOf(var3_5)}));
                }
                if ((var2_2 = var2_2.get(PdfName.ca)) == null) return;
                var3_5 = ((PdfNumber)var2_2).doubleValue();
                if (var3_5 != 1.0) throw new PdfXConformanceException(MessageLocalization.getComposedMessage("transparency.is.not.allowed.ca.eq.1", new Object[]{String.valueOf(var3_5)}));
                return;
            }
            case 5: {
                var2_2 = (PdfImage)var2_2;
                if (var2_2.get(PdfName.SMASK) != null) throw new PdfXConformanceException(MessageLocalization.getComposedMessage("the.smask.key.is.not.allowed.in.images", new Object[0]));
                if (var5_3 != 1) {
                    return;
                }
                if ((var2_2 = var2_2.get(PdfName.COLORSPACE)) == null) {
                    return;
                }
                if (var2_2.isName()) {
                    if (PdfName.DEVICERGB.equals(var2_2) != false) throw new PdfXConformanceException(MessageLocalization.getComposedMessage("colorspace.rgb.is.not.allowed", new Object[0]));
                    return;
                }
                if (var2_2.isArray() == false) return;
                if (PdfName.CALRGB.equals(((PdfArray)var2_2).getPdfObject(0)) != false) throw new PdfXConformanceException(MessageLocalization.getComposedMessage("colorspace.calrgb.is.not.allowed", new Object[0]));
                return;
            }
            case 4: {
                var2_2 = (BaseFont)var2_2;
                if (!var2_2.isEmbedded()) throw new PdfXConformanceException(MessageLocalization.getComposedMessage("all.the.fonts.must.be.embedded.this.one.isn.t.1", new Object[]{var2_2.getPostscriptFontName()}));
                return;
            }
            case 3: {
                if (var5_3 == 1) throw new PdfXConformanceException(MessageLocalization.getComposedMessage("colorspace.rgb.is.not.allowed", new Object[0]));
                return;
            }
            case 1: {
                if (var5_3 != 1) {
                    return;
                }
                if (!(var2_2 instanceof ExtendedColor)) {
                    if (var2_2 instanceof BaseColor != false) throw new PdfXConformanceException(MessageLocalization.getComposedMessage("colorspace.rgb.is.not.allowed", new Object[0]));
                    return;
                }
                var2_2 = (ExtendedColor)var2_2;
                switch (var2_2.getType()) {
                    default: {
                        return;
                    }
                    case 5: {
                        var2_2 = ((ShadingColor)var2_2).getPdfShadingPattern().getShading().getColorSpace();
                        ** GOTO lbl62
                    }
                    case 4: {
                        var2_2 = ((PatternColor)var2_2).getPainter().getDefaultColor();
                        ** GOTO lbl62
                    }
                    case 3: {
                        var2_2 = ((SpotColor)var2_2).getPdfSpotColor().getAlternativeCS();
lbl62: // 3 sources:
                        this.checkPdfIsoConformance(1, var2_2);
                        return;
                    }
                    case 1: 
                    case 2: {
                        return;
                    }
                    case 0: 
                }
                throw new PdfXConformanceException(MessageLocalization.getComposedMessage("colorspace.rgb.is.not.allowed", new Object[0]));
            }
            case 2: 
        }
    }

    @Override
    public int getPDFXConformance() {
        return this.pdfxConformance;
    }

    @Override
    public boolean isPdfIso() {
        return this.isPdfX();
    }

    @Override
    public boolean isPdfX() {
        if (this.pdfxConformance != 0) {
            return true;
        }
        return false;
    }

    public boolean isPdfX1A2001() {
        if (this.pdfxConformance == 1) {
            return true;
        }
        return false;
    }

    public boolean isPdfX32002() {
        if (this.pdfxConformance == 2) {
            return true;
        }
        return false;
    }

    @Override
    public void setPDFXConformance(int n2) {
        this.pdfxConformance = n2;
    }
}

