/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  org.spongycastle.asn1.ASN1Encodable
 *  org.spongycastle.asn1.ASN1InputStream
 *  org.spongycastle.asn1.ASN1Integer
 *  org.spongycastle.asn1.ASN1ObjectIdentifier
 *  org.spongycastle.asn1.ASN1OctetString
 *  org.spongycastle.asn1.ASN1Primitive
 *  org.spongycastle.asn1.ASN1Set
 *  org.spongycastle.asn1.DEROctetString
 *  org.spongycastle.asn1.DEROutputStream
 *  org.spongycastle.asn1.DERSet
 *  org.spongycastle.asn1.cms.ContentInfo
 *  org.spongycastle.asn1.cms.EncryptedContentInfo
 *  org.spongycastle.asn1.cms.EnvelopedData
 *  org.spongycastle.asn1.cms.IssuerAndSerialNumber
 *  org.spongycastle.asn1.cms.KeyTransRecipientInfo
 *  org.spongycastle.asn1.cms.OriginatorInfo
 *  org.spongycastle.asn1.cms.RecipientIdentifier
 *  org.spongycastle.asn1.cms.RecipientInfo
 *  org.spongycastle.asn1.pkcs.PKCSObjectIdentifiers
 *  org.spongycastle.asn1.x500.X500Name
 *  org.spongycastle.asn1.x509.AlgorithmIdentifier
 *  org.spongycastle.asn1.x509.SubjectPublicKeyInfo
 *  org.spongycastle.asn1.x509.TBSCertificateStructure
 */
package com.itextpdf.text.pdf;

import com.itextpdf.text.pdf.PdfArray;
import com.itextpdf.text.pdf.PdfLiteral;
import com.itextpdf.text.pdf.PdfObject;
import com.itextpdf.text.pdf.PdfPublicKeyRecipient;
import com.itextpdf.text.pdf.StringUtils;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.math.BigInteger;
import java.security.AlgorithmParameterGenerator;
import java.security.AlgorithmParameters;
import java.security.GeneralSecurityException;
import java.security.InvalidKeyException;
import java.security.Key;
import java.security.NoSuchAlgorithmException;
import java.security.PublicKey;
import java.security.SecureRandom;
import java.security.cert.Certificate;
import java.security.cert.X509Certificate;
import java.util.ArrayList;
import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import org.spongycastle.asn1.ASN1Encodable;
import org.spongycastle.asn1.ASN1InputStream;
import org.spongycastle.asn1.ASN1Integer;
import org.spongycastle.asn1.ASN1ObjectIdentifier;
import org.spongycastle.asn1.ASN1OctetString;
import org.spongycastle.asn1.ASN1Primitive;
import org.spongycastle.asn1.ASN1Set;
import org.spongycastle.asn1.DEROctetString;
import org.spongycastle.asn1.DEROutputStream;
import org.spongycastle.asn1.DERSet;
import org.spongycastle.asn1.cms.ContentInfo;
import org.spongycastle.asn1.cms.EncryptedContentInfo;
import org.spongycastle.asn1.cms.EnvelopedData;
import org.spongycastle.asn1.cms.IssuerAndSerialNumber;
import org.spongycastle.asn1.cms.KeyTransRecipientInfo;
import org.spongycastle.asn1.cms.OriginatorInfo;
import org.spongycastle.asn1.cms.RecipientIdentifier;
import org.spongycastle.asn1.cms.RecipientInfo;
import org.spongycastle.asn1.pkcs.PKCSObjectIdentifiers;
import org.spongycastle.asn1.x500.X500Name;
import org.spongycastle.asn1.x509.AlgorithmIdentifier;
import org.spongycastle.asn1.x509.SubjectPublicKeyInfo;
import org.spongycastle.asn1.x509.TBSCertificateStructure;

public class PdfPublicKeySecurityHandler {
    static final int SEED_LENGTH = 20;
    private ArrayList<PdfPublicKeyRecipient> recipients;
    private byte[] seed;

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public PdfPublicKeySecurityHandler() {
        block2 : {
            this.recipients = null;
            this.seed = new byte[20];
            try {
                KeyGenerator keyGenerator = KeyGenerator.getInstance("AES");
                keyGenerator.init(192, new SecureRandom());
                System.arraycopy(keyGenerator.generateKey().getEncoded(), 0, this.seed, 0, 20);
                break block2;
            }
            catch (NoSuchAlgorithmException noSuchAlgorithmException) {}
            this.seed = SecureRandom.getSeed(20);
        }
        this.recipients = new ArrayList();
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    private KeyTransRecipientInfo computeRecipientInfo(X509Certificate x509Certificate, byte[] arrby) {
        AlgorithmIdentifier algorithmIdentifier;
        Cipher cipher;
        TBSCertificateStructure tBSCertificateStructure;
        block2 : {
            tBSCertificateStructure = TBSCertificateStructure.getInstance((Object)new ASN1InputStream((InputStream)new ByteArrayInputStream(x509Certificate.getTBSCertificate())).readObject());
            algorithmIdentifier = tBSCertificateStructure.getSubjectPublicKeyInfo().getAlgorithm();
            tBSCertificateStructure = new IssuerAndSerialNumber(tBSCertificateStructure.getIssuer(), tBSCertificateStructure.getSerialNumber().getValue());
            cipher = Cipher.getInstance(algorithmIdentifier.getAlgorithm().getId());
            try {
                cipher.init(1, x509Certificate);
                break block2;
            }
            catch (InvalidKeyException invalidKeyException) {}
            cipher.init(1, x509Certificate.getPublicKey());
        }
        x509Certificate = new DEROctetString(cipher.doFinal(arrby));
        return new KeyTransRecipientInfo(new RecipientIdentifier((IssuerAndSerialNumber)tBSCertificateStructure), algorithmIdentifier, (ASN1OctetString)x509Certificate);
    }

    private ASN1Primitive createDERForRecipient(byte[] dEROctetString, X509Certificate x509Certificate) {
        AlgorithmParameters algorithmParameters = AlgorithmParameterGenerator.getInstance("1.2.840.113549.3.2").generateParameters();
        ASN1Primitive aSN1Primitive = new ASN1InputStream((InputStream)new ByteArrayInputStream(algorithmParameters.getEncoded("ASN.1"))).readObject();
        Object object = KeyGenerator.getInstance("1.2.840.113549.3.2");
        object.init(128);
        object = object.generateKey();
        Cipher cipher = Cipher.getInstance("1.2.840.113549.3.2");
        cipher.init(1, (Key)object, algorithmParameters);
        dEROctetString = new DEROctetString(cipher.doFinal((byte[])dEROctetString));
        x509Certificate = new DERSet((ASN1Encodable)new RecipientInfo(this.computeRecipientInfo(x509Certificate, object.getEncoded())));
        aSN1Primitive = new AlgorithmIdentifier(new ASN1ObjectIdentifier("1.2.840.113549.3.2"), (ASN1Encodable)aSN1Primitive);
        dEROctetString = new EnvelopedData(null, (ASN1Set)x509Certificate, new EncryptedContentInfo(PKCSObjectIdentifiers.data, (AlgorithmIdentifier)aSN1Primitive, (ASN1OctetString)dEROctetString), null);
        return new ContentInfo(PKCSObjectIdentifiers.envelopedData, (ASN1Encodable)dEROctetString).toASN1Primitive();
    }

    public void addRecipient(PdfPublicKeyRecipient pdfPublicKeyRecipient) {
        this.recipients.add(pdfPublicKeyRecipient);
    }

    public byte[] getEncodedRecipient(int n2) {
        PdfPublicKeyRecipient pdfPublicKeyRecipient = this.recipients.get(n2);
        byte[] arrby = pdfPublicKeyRecipient.getCms();
        if (arrby != null) {
            return arrby;
        }
        arrby = pdfPublicKeyRecipient.getCertificate();
        n2 = ((pdfPublicKeyRecipient.getPermission() | -3904) & -4) + 1;
        Object object = new byte[24];
        byte by2 = (byte)n2;
        byte by3 = (byte)(n2 >> 8);
        byte by4 = (byte)(n2 >> 16);
        byte by5 = (byte)(n2 >> 24);
        System.arraycopy(this.seed, 0, object, 0, 20);
        object[20] = by5;
        object[21] = by4;
        object[22] = by3;
        object[23] = by2;
        arrby = this.createDERForRecipient((byte[])object, (X509Certificate)arrby);
        object = new ByteArrayOutputStream();
        new DEROutputStream((OutputStream)object).writeObject((ASN1Encodable)arrby);
        arrby = object.toByteArray();
        pdfPublicKeyRecipient.setCms(arrby);
        return arrby;
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public PdfArray getEncodedRecipients() {
        PdfArray pdfArray = new PdfArray();
        int n2 = 0;
        while (n2 < this.recipients.size()) {
            block3 : {
                try {
                    pdfArray.add(new PdfLiteral(StringUtils.escapeString(this.getEncodedRecipient(n2))));
                    break block3;
                }
                catch (IOException | GeneralSecurityException exception) {}
                pdfArray = null;
            }
            ++n2;
        }
        return pdfArray;
    }

    public int getRecipientsSize() {
        return this.recipients.size();
    }

    protected byte[] getSeed() {
        return (byte[])this.seed.clone();
    }
}

