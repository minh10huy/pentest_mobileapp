/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf.fonts.otf;

import com.itextpdf.text.log.Logger;
import com.itextpdf.text.log.LoggerFactory;
import com.itextpdf.text.pdf.RandomAccessFileOrArray;
import com.itextpdf.text.pdf.fonts.otf.FontReadingException;
import com.itextpdf.text.pdf.fonts.otf.Language;
import com.itextpdf.text.pdf.fonts.otf.TableHeader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

public abstract class OpenTypeFontTableReader {
    protected static final Logger LOG = LoggerFactory.getLogger(OpenTypeFontTableReader.class);
    protected final RandomAccessFileOrArray rf;
    private List<String> supportedLanguages;
    protected final int tableLocation;

    public OpenTypeFontTableReader(RandomAccessFileOrArray randomAccessFileOrArray, int n2) {
        this.rf = randomAccessFileOrArray;
        this.tableLocation = n2;
    }

    private void readFeatureListTable(int n2) {
        this.rf.seek(n2);
        int n3 = this.rf.readShort();
        Object object = LOG;
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("featureCount=");
        stringBuilder.append(n3);
        object.debug(stringBuilder.toString());
        object = new LinkedHashMap(n3);
        for (int i2 = 0; i2 < n3; ++i2) {
            object.put(this.rf.readString(4, "utf-8"), this.rf.readShort());
        }
        for (String string2 : object.keySet()) {
            Logger logger = LOG;
            StringBuilder stringBuilder2 = new StringBuilder();
            stringBuilder2.append("*************featureName=");
            stringBuilder2.append(string2);
            logger.debug(stringBuilder2.toString());
            this.readFeatureTable((Short)object.get(string2) + n2);
        }
    }

    private void readFeatureTable(int n2) {
        this.rf.seek(n2);
        n2 = this.rf.readShort();
        Object object = LOG;
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("featureParamsOffset=");
        stringBuilder.append(n2);
        object.debug(stringBuilder.toString());
        int n3 = this.rf.readShort();
        object = LOG;
        stringBuilder = new StringBuilder();
        stringBuilder.append("lookupCount=");
        stringBuilder.append(n3);
        object.debug(stringBuilder.toString());
        object = new ArrayList(n3);
        for (n2 = 0; n2 < n3; ++n2) {
            object.add(this.rf.readShort());
        }
    }

    private TableHeader readHeader() {
        this.rf.seek(this.tableLocation);
        return new TableHeader(this.rf.readInt(), this.rf.readUnsignedShort(), this.rf.readUnsignedShort(), this.rf.readUnsignedShort());
    }

    private void readLangSysRecord(Map<String, Integer> map) {
        map.put(this.rf.readString(4, "utf-8"), Integer.valueOf(this.rf.readShort()));
    }

    private void readLangSysTable(int n2) {
        this.rf.seek(n2);
        n2 = this.rf.readShort();
        Object object = LOG;
        Object object2 = new StringBuilder();
        object2.append("lookupOrderOffset=");
        object2.append(n2);
        object.debug(object2.toString());
        n2 = this.rf.readShort();
        object = LOG;
        object2 = new StringBuilder();
        object2.append("reqFeatureIndex=");
        object2.append(n2);
        object.debug(object2.toString());
        int n3 = this.rf.readShort();
        object = new ArrayList(n3);
        for (n2 = 0; n2 < n3; ++n2) {
            object.add(this.rf.readShort());
        }
        object2 = LOG;
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("featureListIndices=");
        stringBuilder.append(object);
        object2.debug(stringBuilder.toString());
    }

    private void readLookupListTable(int n2) {
        this.rf.seek(n2);
        int n3 = this.rf.readShort();
        ArrayList<Integer> arrayList = new ArrayList<Integer>();
        int n4 = 0;
        int n5 = 0;
        do {
            if (n5 >= n3) break;
            arrayList.add(Integer.valueOf(this.rf.readShort()));
            ++n5;
        } while (true);
        for (int i2 = n4; i2 < n3; ++i2) {
            this.readLookupTable((Integer)arrayList.get(i2) + n2);
        }
    }

    private void readLookupTable(int n2) {
        this.rf.seek(n2);
        short s2 = this.rf.readShort();
        this.rf.skipBytes(2);
        int n3 = this.rf.readShort();
        Object object = new ArrayList<Integer>();
        for (int i2 = 0; i2 < n3; ++i2) {
            object.add(Integer.valueOf(this.rf.readShort()));
        }
        object = object.iterator();
        while (object.hasNext()) {
            this.readSubTable(s2, (Integer)object.next() + n2);
        }
    }

    private void readRangeRecord(List<Integer> list) {
        short s2 = this.rf.readShort();
        this.rf.readShort();
        for (int i2 = this.rf.readShort(); i2 <= s2; ++i2) {
            list.add(i2);
        }
    }

    private void readScriptListTable(int n2) {
        this.rf.seek(n2);
        int n3 = this.rf.readShort();
        HashMap<String, Integer> hashMap = new HashMap<String, Integer>(n3);
        for (int i2 = 0; i2 < n3; ++i2) {
            this.readScriptRecord(n2, hashMap);
        }
        ArrayList<String> arrayList = new ArrayList<String>(n3);
        for (String string2 : hashMap.keySet()) {
            this.readScriptTable(hashMap.get(string2));
            arrayList.add(string2);
        }
        this.supportedLanguages = Collections.unmodifiableList(arrayList);
    }

    private void readScriptRecord(int n2, Map<String, Integer> map) {
        map.put(this.rf.readString(4, "utf-8"), n2 + this.rf.readShort());
    }

    private void readScriptTable(int n2) {
        this.rf.seek(n2);
        short s2 = this.rf.readShort();
        int n3 = this.rf.readShort();
        if (n3 > 0) {
            LinkedHashMap<String, Integer> linkedHashMap = new LinkedHashMap<String, Integer>(n3);
            for (int i2 = 0; i2 < n3; ++i2) {
                this.readLangSysRecord(linkedHashMap);
            }
            Iterator iterator = linkedHashMap.keySet().iterator();
            while (iterator.hasNext()) {
                this.readLangSysTable(linkedHashMap.get((String)iterator.next()) + n2);
            }
        }
        this.readLangSysTable(n2 + s2);
    }

    public Language getSupportedLanguage() {
        Object object = Language.values();
        for (String string2 : this.supportedLanguages) {
            for (Object object2 : object) {
                if (!object2.isSupported(string2)) continue;
                return object2;
            }
        }
        object = new StringBuilder();
        object.append("Unsupported languages ");
        object.append(this.supportedLanguages);
        throw new FontReadingException(object.toString());
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    protected final List<Integer> readCoverageFormat(int n2) {
        ArrayList<Integer> arrayList;
        this.rf.seek(n2);
        short s2 = this.rf.readShort();
        short s3 = 0;
        n2 = 0;
        if (s2 == 1) {
            s3 = this.rf.readShort();
            ArrayList<Integer> arrayList2 = new ArrayList<Integer>(s3);
            do {
                arrayList = arrayList2;
                if (n2 >= s3) return Collections.unmodifiableList(arrayList);
                arrayList2.add(Integer.valueOf(this.rf.readShort()));
                ++n2;
            } while (true);
        }
        if (s2 == 2) {
            s2 = this.rf.readShort();
            ArrayList<Integer> arrayList3 = new ArrayList<Integer>();
            n2 = s3;
            do {
                arrayList = arrayList3;
                if (n2 >= s2) return Collections.unmodifiableList(arrayList);
                this.readRangeRecord(arrayList3);
                ++n2;
            } while (true);
        }
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("Invalid coverage format: ");
        stringBuilder.append(s2);
        throw new UnsupportedOperationException(stringBuilder.toString());
    }

    protected abstract void readSubTable(int var1, int var2);

    protected final void startReadingTable() {
        try {
            TableHeader tableHeader = this.readHeader();
            this.readScriptListTable(this.tableLocation + tableHeader.scriptListOffset);
            this.readFeatureListTable(this.tableLocation + tableHeader.featureListOffset);
            this.readLookupListTable(this.tableLocation + tableHeader.lookupListOffset);
            return;
        }
        catch (IOException iOException) {
            throw new FontReadingException("Error reading font file", iOException);
        }
    }
}

