/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf.codec;

import com.itextpdf.text.BadElementException;
import com.itextpdf.text.ExceptionConverter;
import com.itextpdf.text.Image;
import com.itextpdf.text.ImgRaw;
import com.itextpdf.text.Utilities;
import com.itextpdf.text.error_messages.MessageLocalization;
import com.itextpdf.text.pdf.PdfArray;
import com.itextpdf.text.pdf.PdfDictionary;
import com.itextpdf.text.pdf.PdfName;
import com.itextpdf.text.pdf.PdfNumber;
import com.itextpdf.text.pdf.PdfObject;
import com.itextpdf.text.pdf.PdfString;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.util.HashMap;

public class BmpImage {
    private static final int BI_BITFIELDS = 3;
    private static final int BI_RGB = 0;
    private static final int BI_RLE4 = 2;
    private static final int BI_RLE8 = 1;
    private static final int LCS_CALIBRATED_RGB = 0;
    private static final int LCS_CMYK = 2;
    private static final int LCS_sRGB = 1;
    private static final int VERSION_2_1_BIT = 0;
    private static final int VERSION_2_24_BIT = 3;
    private static final int VERSION_2_4_BIT = 1;
    private static final int VERSION_2_8_BIT = 2;
    private static final int VERSION_3_1_BIT = 4;
    private static final int VERSION_3_24_BIT = 7;
    private static final int VERSION_3_4_BIT = 5;
    private static final int VERSION_3_8_BIT = 6;
    private static final int VERSION_3_NT_16_BIT = 8;
    private static final int VERSION_3_NT_32_BIT = 9;
    private static final int VERSION_4_16_BIT = 13;
    private static final int VERSION_4_1_BIT = 10;
    private static final int VERSION_4_24_BIT = 14;
    private static final int VERSION_4_32_BIT = 15;
    private static final int VERSION_4_4_BIT = 11;
    private static final int VERSION_4_8_BIT = 12;
    private int alphaMask;
    private long bitmapFileSize;
    private long bitmapOffset;
    private int bitsPerPixel;
    private int blueMask;
    private long compression;
    private int greenMask;
    int height;
    private long imageSize;
    private int imageType;
    private InputStream inputStream;
    private boolean isBottomUp;
    private int numBands;
    private byte[] palette;
    public HashMap<String, Object> properties = new HashMap();
    private int redMask;
    int width;
    private long xPelsPerMeter;
    private long yPelsPerMeter;

    BmpImage(InputStream inputStream, boolean bl2, int n2) {
        this.bitmapFileSize = n2;
        this.bitmapOffset = 0L;
        this.process(inputStream, bl2);
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    private byte[] decodeRLE(boolean var1_1, byte[] var2_2) {
        var13_4 = new byte[this.width * this.height];
        var6_5 = 0;
        var5_6 = 0;
        var4_7 = 0;
        var3_8 = 0;
        do {
            block27 : {
                block28 : {
                    block26 : {
                        block24 : {
                            block25 : {
                                if (var6_5 >= this.height) return var13_4;
                                if (var5_6 >= var2_2.length) return var13_4;
                                var9_11 = var5_6 + 1;
                                var8_10 = var2_2[var5_6] & 255;
                                if (var8_10 == 0) break block25;
                                var10_12 = var2_2[var9_11] & 255;
                                if (var1_1) {
                                    var7_9 = var8_10;
                                    do {
                                        var5_6 = var3_8++;
                                        if (var7_9 != 0) {
                                            var13_4[var3_8] = (byte)var10_12;
                                            --var7_9;
                                            continue;
                                        }
                                        break block23;
                                        break;
                                    } while (true);
                                }
                                ** GOTO lbl58
                            }
                            var5_6 = var9_11 + 1;
                            var11_13 = var2_2[var9_11] & 255;
                            if (var11_13 == 1) {
                                return var13_4;
                            }
                            if (var11_13 == 0) ** GOTO lbl52
                            if (var11_13 != 2) {
                                if (var1_1) {
                                    var9_11 = var11_13;
                                    do {
                                        var7_9 = var3_8++;
                                        var8_10 = var5_6;
                                        if (var9_11 != 0) {
                                            var13_4[var3_8] = (byte)(var2_2[var5_6] & 255);
                                            --var9_11;
                                            ++var5_6;
                                            continue;
                                        }
                                        break block24;
                                        break;
                                    } while (true);
                                }
                            } else {
                                block23 : {
                                    var3_8 = var5_6 + 1;
                                    var4_7 += var2_2[var5_6] & 255;
                                    var5_6 = var3_8 + 1;
                                    var6_5 += var2_2[var3_8] & 255;
                                    try {
                                        var3_8 = this.width * var6_5 + var4_7;
                                    }
                                    catch (RuntimeException var2_3) {
                                        return var13_4;
                                    }
lbl52: // 1 sources:
                                    ++var6_5;
                                    var3_8 = this.width;
                                    var3_8 *= var6_5;
                                    var4_7 = 0;
lbl58: // 2 sources:
                                    for (var5_6 = 0; var5_6 < var8_10; ++var5_6, ++var3_8) {
                                        var7_9 = (var5_6 & 1) == 1 ? var10_12 & 15 : var10_12 >>> 4 & 15;
                                        var13_4[var3_8] = (byte)var7_9;
                                    }
                                    var5_6 = var3_8;
                                }
                                var4_7 += var8_10;
                                var3_8 = var5_6;
                                var5_6 = var9_11 + 1;
                                continue;
                            }
                            var9_11 = 0;
                            var10_12 = 0;
                            do {
                                var7_9 = var3_8;
                                var8_10 = var5_6;
                                if (var9_11 >= var11_13) break;
                                var12_14 = var9_11 & 1;
                                var7_9 = var5_6;
                                var8_10 = var10_12;
                                if (var12_14 == 0) {
                                    var8_10 = var2_2[var5_6] & 255;
                                    var7_9 = var5_6 + 1;
                                }
                                var5_6 = var12_14 == 1 ? var8_10 & 15 : var8_10 >>> 4 & 15;
                                var13_4[var3_8] = (byte)var5_6;
                                ++var9_11;
                                ++var3_8;
                                var5_6 = var7_9;
                                var10_12 = var8_10;
                            } while (true);
                        }
                        var4_7 += var11_13;
                        if (!var1_1) break block26;
                        var3_8 = var8_10;
                        if ((var11_13 & 1) != 1) break block27;
                        break block28;
                    }
                    var5_6 = var11_13 & 3;
                    if (var5_6 == 1) break block28;
                    var3_8 = var8_10;
                    if (var5_6 != 2) break block27;
                }
                var3_8 = var8_10 + 1;
            }
            var5_6 = var3_8;
            var3_8 = var7_9;
        } while (true);
    }

    private int findMask(int n2) {
        int n3 = 0;
        int n4 = n2;
        for (n2 = n3; n2 < 32; ++n2) {
            if ((n4 & 1) == 1) {
                return n4;
            }
            n4 >>>= 1;
        }
        return n4;
    }

    private int findShift(int n2) {
        int n3 = 0;
        int n4 = n2;
        for (n2 = n3; n2 < 32; ++n2) {
            if ((n4 & 1) == 1) {
                return n2;
            }
            n4 >>>= 1;
        }
        return n2;
    }

    private Image getImage() {
        switch (this.imageType) {
            default: {
                return null;
            }
            case 15: {
                return this.read1632Bit(true);
            }
            case 14: {
                byte[] arrby = new byte[this.width * this.height * 3];
                this.read24Bit(arrby);
                return new ImgRaw(this.width, this.height, 3, 8, arrby);
            }
            case 13: {
                return this.read1632Bit(false);
            }
            case 12: {
                switch ((int)this.compression) {
                    default: {
                        throw new RuntimeException("Invalid compression specified for BMP file.");
                    }
                    case 1: {
                        return this.readRLE8();
                    }
                    case 0: 
                }
                return this.read8Bit(4);
            }
            case 11: {
                int n2 = (int)this.compression;
                if (n2 != 0) {
                    if (n2 == 2) {
                        return this.readRLE4();
                    }
                    throw new RuntimeException("Invalid compression specified for BMP file.");
                }
                return this.read4Bit(4);
            }
            case 10: {
                return this.read1Bit(4);
            }
            case 9: {
                return this.read1632Bit(true);
            }
            case 8: {
                return this.read1632Bit(false);
            }
            case 7: {
                byte[] arrby = new byte[this.width * this.height * 3];
                this.read24Bit(arrby);
                return new ImgRaw(this.width, this.height, 3, 8, arrby);
            }
            case 6: {
                switch ((int)this.compression) {
                    default: {
                        throw new RuntimeException("Invalid compression specified for BMP file.");
                    }
                    case 1: {
                        return this.readRLE8();
                    }
                    case 0: 
                }
                return this.read8Bit(4);
            }
            case 5: {
                int n3 = (int)this.compression;
                if (n3 != 0) {
                    if (n3 == 2) {
                        return this.readRLE4();
                    }
                    throw new RuntimeException("Invalid compression specified for BMP file.");
                }
                return this.read4Bit(4);
            }
            case 4: {
                return this.read1Bit(4);
            }
            case 3: {
                byte[] arrby = new byte[this.width * this.height * 3];
                this.read24Bit(arrby);
                return new ImgRaw(this.width, this.height, 3, 8, arrby);
            }
            case 2: {
                return this.read8Bit(3);
            }
            case 1: {
                return this.read4Bit(3);
            }
            case 0: 
        }
        return this.read1Bit(3);
    }

    public static Image getImage(InputStream inputStream) {
        return BmpImage.getImage(inputStream, false, 0);
    }

    public static Image getImage(InputStream object, boolean bl2, int n2) {
        object = new BmpImage((InputStream)object, bl2, n2);
        try {
            Image image = BmpImage.super.getImage();
            image.setDpi((int)((double)object.xPelsPerMeter * 0.0254 + 0.5), (int)((double)object.yPelsPerMeter * 0.0254 + 0.5));
            image.setOriginalType(4);
            return image;
        }
        catch (BadElementException badElementException) {
            throw new ExceptionConverter(badElementException);
        }
    }

    public static Image getImage(String string2) {
        return BmpImage.getImage(Utilities.toURL(string2));
    }

    /*
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    public static Image getImage(URL object) {
        Object object2;
        block4 : {
            Image image;
            object2 = object.openStream();
            try {
                image = BmpImage.getImage((InputStream)object2);
                image.setUrl((URL)object);
                if (object2 == null) return image;
            }
            catch (Throwable throwable) {
                object = object2;
                object2 = throwable;
            }
            object2.close();
            return image;
            break block4;
            catch (Throwable throwable) {
                object = null;
            }
        }
        if (object == null) throw object2;
        object.close();
        throw object2;
    }

    public static Image getImage(byte[] arrby) {
        Image image = BmpImage.getImage(new ByteArrayInputStream(arrby));
        image.setOriginalData(arrby);
        return image;
    }

    private byte[] getPalette(int n2) {
        if (this.palette == null) {
            return null;
        }
        byte[] arrby = new byte[this.palette.length / n2 * 3];
        int n3 = this.palette.length / n2;
        for (int i2 = 0; i2 < n3; ++i2) {
            int n4 = i2 * n2;
            int n5 = i2 * 3;
            byte[] arrby2 = this.palette;
            int n6 = n4 + 1;
            arrby[n5 + 2] = arrby2[n4];
            arrby[n5 + 1] = this.palette[n6];
            arrby[n5] = this.palette[n6 + 1];
        }
        return arrby;
    }

    private Image indexedModel(byte[] object, int n2, int n3) {
        object = new ImgRaw(this.width, this.height, 1, n2, (byte[])object);
        PdfArray pdfArray = new PdfArray();
        pdfArray.add(PdfName.INDEXED);
        pdfArray.add(PdfName.DEVICERGB);
        Object object2 = this.getPalette(n3);
        pdfArray.add(new PdfNumber(((byte[])object2).length / 3 - 1));
        pdfArray.add(new PdfString((byte[])object2));
        object2 = new PdfDictionary();
        object2.put(PdfName.COLORSPACE, pdfArray);
        object.setAdditional((PdfDictionary)object2);
        return object;
    }

    private Image read1632Bit(boolean bl2) {
        byte[] arrby;
        int n2;
        int n3 = this.findMask(this.redMask);
        int n4 = this.findShift(this.redMask);
        int n5 = n3 + 1;
        int n6 = this.findMask(this.greenMask);
        int n7 = this.findShift(this.greenMask);
        int n8 = n6 + 1;
        int n9 = this.findMask(this.blueMask);
        int n10 = this.findShift(this.blueMask);
        int n11 = n9 + 1;
        arrby = new byte[this.width * this.height * 3];
        n2 = !bl2 && (n2 = this.width * 16) % 32 != 0 ? (int)Math.ceil((double)((n2 / 32 + 1) * 32 - n2) / 8.0) : 0;
        if ((int)this.imageSize == 0) {
            long l2 = this.bitmapFileSize;
            l2 = this.bitmapOffset;
        }
        if (this.isBottomUp) {
            int n12 = n2;
            n2 = n7;
            int n13 = n4;
            for (int i2 = this.height - 1; i2 >= 0; --i2) {
                int n14;
                n4 = this.width * 3 * i2;
                for (n14 = 0; n14 < this.width; ++n14) {
                    n7 = bl2 ? (int)this.readDWord(this.inputStream) : this.readWord(this.inputStream);
                    int n15 = n4 + 1;
                    arrby[n4] = (byte)((n7 >>> n13 & n3) * 256 / n5);
                    int n16 = n15 + 1;
                    arrby[n15] = (byte)((n7 >>> n2 & n6) * 256 / n8);
                    n4 = n16 + 1;
                    arrby[n16] = (byte)((n7 >>> n10 & n9) * 256 / n11);
                }
                for (n14 = 0; n14 < n12; ++n14) {
                    this.inputStream.read();
                }
            }
        } else {
            int n17 = 0;
            for (int i3 = 0; i3 < this.height; ++i3) {
                int n18;
                for (n18 = 0; n18 < this.width; ++n18) {
                    int n19 = bl2 ? (int)this.readDWord(this.inputStream) : this.readWord(this.inputStream);
                    int n20 = n17 + 1;
                    arrby[n17] = (byte)((n19 >>> n4 & n3) * 256 / n5);
                    int n21 = n20 + 1;
                    arrby[n20] = (byte)((n19 >>> n7 & n6) * 256 / n8);
                    n17 = n21 + 1;
                    arrby[n21] = (byte)((n19 >>> n10 & n9) * 256 / n11);
                }
                for (n18 = 0; n18 < n2; ++n18) {
                    this.inputStream.read();
                }
            }
        }
        return new ImgRaw(this.width, this.height, 3, 8, arrby);
    }

    private Image read1Bit(int n2) {
        byte[] arrby;
        arrby = new byte[(this.width + 7) / 8 * this.height];
        int n3 = (int)Math.ceil((double)this.width / 8.0);
        int n4 = n3 % 4;
        int n5 = 0;
        int n6 = 0;
        n4 = n4 != 0 ? 4 - n4 : 0;
        int n7 = n4 + n3;
        int n8 = this.height * n7;
        byte[] arrby2 = new byte[n8];
        for (n4 = 0; n4 < n8; n4 += this.inputStream.read((byte[])arrby2, (int)n4, (int)(n8 - n4))) {
        }
        if (this.isBottomUp) {
            n4 = n6;
            while (n4 < this.height) {
                n6 = n4 + 1;
                System.arraycopy(arrby2, n8 - n6 * n7, arrby, n4 * n3, n3);
                n4 = n6;
            }
        } else {
            for (n4 = n5; n4 < this.height; ++n4) {
                System.arraycopy(arrby2, n4 * n7, arrby, n4 * n3, n3);
            }
        }
        return this.indexedModel(arrby, 1, n2);
    }

    private void read24Bit(byte[] arrby) {
        int n2;
        int n3 = this.width * 24;
        int n4 = n3 % 32 != 0 ? (int)Math.ceil((double)((n3 / 32 + 1) * 32 - n3) / 8.0) : 0;
        int n5 = (this.width * 3 + 3) / 4 * 4 * this.height;
        byte[] arrby2 = new byte[n5];
        for (n3 = 0; n3 < n5; n3 += n2) {
            try {
                n2 = this.inputStream.read(arrby2, n3, n5 - n3);
                if (n2 < 0) break;
                continue;
            }
            catch (IOException iOException) {
                throw new ExceptionConverter(iOException);
            }
        }
        if (this.isBottomUp) {
            int n6 = this.width;
            int n7 = this.height;
            n3 = - n4;
            n5 = 0;
            while (n5 < this.height) {
                int n8 = n5 + 1;
                n2 = n6 * n7 * 3 - 1 - this.width * n8 * 3 + 1;
                n3 += n4;
                for (n5 = 0; n5 < this.width; ++n5) {
                    int n9 = n3 + 1;
                    arrby[n2 + 2] = arrby2[n3];
                    int n10 = n9 + 1;
                    arrby[n2 + 1] = arrby2[n9];
                    n3 = n10 + 1;
                    arrby[n2] = arrby2[n10];
                    n2 += 3;
                }
                n5 = n8;
            }
        } else {
            n3 = - n4;
            n2 = 0;
            for (n5 = 0; n5 < this.height; ++n5) {
                n3 += n4;
                for (int i2 = 0; i2 < this.width; ++i2) {
                    int n11 = n3 + 1;
                    arrby[n2 + 2] = arrby2[n3];
                    int n12 = n11 + 1;
                    arrby[n2 + 1] = arrby2[n11];
                    n3 = n12 + 1;
                    arrby[n2] = arrby2[n12];
                    n2 += 3;
                }
            }
        }
    }

    private Image read4Bit(int n2) {
        byte[] arrby;
        arrby = new byte[(this.width + 1) / 2 * this.height];
        int n3 = (int)Math.ceil((double)this.width / 2.0);
        int n4 = n3 % 4;
        int n5 = 0;
        int n6 = 0;
        n4 = n4 != 0 ? 4 - n4 : 0;
        int n7 = n4 + n3;
        int n8 = this.height * n7;
        byte[] arrby2 = new byte[n8];
        for (n4 = 0; n4 < n8; n4 += this.inputStream.read((byte[])arrby2, (int)n4, (int)(n8 - n4))) {
        }
        if (this.isBottomUp) {
            n4 = n6;
            while (n4 < this.height) {
                n6 = n4 + 1;
                System.arraycopy(arrby2, n8 - n6 * n7, arrby, n4 * n3, n3);
                n4 = n6;
            }
        } else {
            for (n4 = n5; n4 < this.height; ++n4) {
                System.arraycopy(arrby2, n4 * n7, arrby, n4 * n3, n3);
            }
        }
        return this.indexedModel(arrby, 4, n2);
    }

    private Image read8Bit(int n2) {
        byte[] arrby;
        int n3;
        arrby = new byte[this.width * this.height];
        int n4 = this.width * 8;
        int n5 = 0;
        int n6 = 0;
        n4 = n4 % 32 != 0 ? (int)Math.ceil((double)((n4 / 32 + 1) * 32 - n4) / 8.0) : 0;
        int n7 = (this.width + n4) * this.height;
        byte[] arrby2 = new byte[n7];
        for (n3 = 0; n3 < n7; n3 += this.inputStream.read((byte[])arrby2, (int)n3, (int)(n7 - n3))) {
        }
        if (this.isBottomUp) {
            n3 = n6;
            while (n3 < this.height) {
                n6 = n3 + 1;
                System.arraycopy(arrby2, n7 - (this.width + n4) * n6, arrby, n3 * this.width, this.width);
                n3 = n6;
            }
        } else {
            for (n3 = n5; n3 < this.height; ++n3) {
                System.arraycopy(arrby2, (this.width + n4) * n3, arrby, this.width * n3, this.width);
            }
        }
        return this.indexedModel(arrby, 8, n2);
    }

    private long readDWord(InputStream inputStream) {
        return this.readUnsignedInt(inputStream);
    }

    private int readInt(InputStream inputStream) {
        int n2 = this.readUnsignedByte(inputStream);
        int n3 = this.readUnsignedByte(inputStream);
        int n4 = this.readUnsignedByte(inputStream);
        return this.readUnsignedByte(inputStream) << 24 | n4 << 16 | n3 << 8 | n2;
    }

    private int readLong(InputStream inputStream) {
        return this.readInt(inputStream);
    }

    private void readPalette(int n2) {
        int n3;
        if (n2 == 0) {
            return;
        }
        this.palette = new byte[n2];
        for (int i2 = 0; i2 < n2; i2 += n3) {
            n3 = this.inputStream.read(this.palette, i2, n2 - i2);
            if (n3 >= 0) {
                continue;
            }
            throw new RuntimeException(MessageLocalization.getComposedMessage("incomplete.palette", new Object[0]));
        }
        this.properties.put("palette", this.palette);
    }

    private Image readRLE4() {
        int n2;
        int n3;
        int n4;
        int n5;
        int n6 = n3 = (int)this.imageSize;
        if (n3 == 0) {
            n6 = (int)(this.bitmapFileSize - this.bitmapOffset);
        }
        byte[] arrby = new byte[n6];
        for (n3 = 0; n3 < n6; n3 += this.inputStream.read((byte[])arrby, (int)n3, (int)(n6 - n3))) {
        }
        byte[] arrby2 = this.decodeRLE(false, arrby);
        arrby = arrby2;
        if (this.isBottomUp) {
            arrby = new byte[this.width * this.height];
            n3 = this.height - 1;
            n6 = 0;
            do {
                n4 = n6;
                if (n3 < 0) break;
                n2 = this.width * n3;
                n5 = this.width;
                n6 = n4;
                while (n6 != n5 + n4) {
                    arrby[n6] = arrby2[n2];
                    ++n6;
                    ++n2;
                }
                --n3;
            } while (true);
        }
        n5 = (this.width + 1) / 2;
        arrby2 = new byte[this.height * n5];
        n6 = 0;
        n4 = 0;
        for (n3 = 0; n3 < this.height; ++n3) {
            for (n2 = 0; n2 < this.width; ++n2) {
                if ((n2 & 1) == 0) {
                    arrby2[n2 / 2 + n4] = (byte)(arrby[n6] << 4);
                    ++n6;
                    continue;
                }
                int n7 = n2 / 2 + n4;
                byte by2 = arrby2[n7];
                arrby2[n7] = (byte)((byte)(arrby[n6] & 15) | by2);
                ++n6;
            }
            n4 += n5;
        }
        return this.indexedModel(arrby2, 4, 4);
    }

    private Image readRLE8() {
        int n2;
        int n3 = n2 = (int)this.imageSize;
        if (n2 == 0) {
            n3 = (int)(this.bitmapFileSize - this.bitmapOffset);
        }
        byte[] arrby = new byte[n3];
        int n4 = 0;
        for (n2 = 0; n2 < n3; n2 += this.inputStream.read((byte[])arrby, (int)n2, (int)(n3 - n2))) {
        }
        byte[] arrby2 = this.decodeRLE(true, arrby);
        int n5 = this.width;
        int n6 = this.height;
        arrby = arrby2;
        if (this.isBottomUp) {
            arrby = new byte[arrby2.length];
            int n7 = this.width;
            n3 = n4;
            while (n3 < this.height) {
                n2 = n3 + 1;
                System.arraycopy(arrby2, n5 * n6 - n2 * n7, arrby, n3 * n7, n7);
                n3 = n2;
            }
        }
        return this.indexedModel(arrby, 8, 4);
    }

    private int readShort(InputStream inputStream) {
        int n2 = this.readUnsignedByte(inputStream);
        return this.readUnsignedByte(inputStream) << 8 | n2;
    }

    private int readUnsignedByte(InputStream inputStream) {
        return inputStream.read() & 255;
    }

    private long readUnsignedInt(InputStream inputStream) {
        int n2 = this.readUnsignedByte(inputStream);
        int n3 = this.readUnsignedByte(inputStream);
        int n4 = this.readUnsignedByte(inputStream);
        return (long)(this.readUnsignedByte(inputStream) << 24 | n4 << 16 | n3 << 8 | n2) & -1L;
    }

    private int readUnsignedShort(InputStream inputStream) {
        int n2 = this.readUnsignedByte(inputStream);
        return (this.readUnsignedByte(inputStream) << 8 | n2) & 65535;
    }

    private int readWord(InputStream inputStream) {
        return this.readUnsignedShort(inputStream);
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Lifted jumps to return sites
     */
    protected void process(InputStream var1_1, boolean var2_2) {
        block71 : {
            block84 : {
                block72 : {
                    block81 : {
                        block82 : {
                            block83 : {
                                block77 : {
                                    block79 : {
                                        block80 : {
                                            block78 : {
                                                block76 : {
                                                    block74 : {
                                                        block75 : {
                                                            block73 : {
                                                                block70 : {
                                                                    this.inputStream = !var2_2 && !(var1_1 instanceof BufferedInputStream) ? new BufferedInputStream((InputStream)var1_1) : var1_1;
                                                                    if (!var2_2) {
                                                                        if (this.readUnsignedByte(this.inputStream) != 66) throw new RuntimeException(MessageLocalization.getComposedMessage("invalid.magic.value.for.bmp.file", new Object[0]));
                                                                        if (this.readUnsignedByte(this.inputStream) != 77) throw new RuntimeException(MessageLocalization.getComposedMessage("invalid.magic.value.for.bmp.file", new Object[0]));
                                                                        this.bitmapFileSize = this.readDWord(this.inputStream);
                                                                        this.readWord(this.inputStream);
                                                                        this.readWord(this.inputStream);
                                                                        this.bitmapOffset = this.readDWord(this.inputStream);
                                                                    }
                                                                    if ((var4_4 = (var17_3 = this.readDWord(this.inputStream) LCMP 12L)) == false) {
                                                                        this.width = this.readWord(this.inputStream);
                                                                        var3_5 = this.readWord(this.inputStream);
                                                                    } else {
                                                                        this.width = this.readLong(this.inputStream);
                                                                        var3_5 = this.readLong(this.inputStream);
                                                                    }
                                                                    this.height = var3_5;
                                                                    var3_5 = this.readWord(this.inputStream);
                                                                    this.bitsPerPixel = this.readWord(this.inputStream);
                                                                    this.properties.put("color_planes", var3_5);
                                                                    this.properties.put("bits_per_pixel", this.bitsPerPixel);
                                                                    this.numBands = 3;
                                                                    if (this.bitmapOffset == 0L) {
                                                                        this.bitmapOffset = var17_3;
                                                                    }
                                                                    if (var4_4 != false) break block70;
                                                                    this.properties.put("bmp_version", "BMP v. 2.x");
                                                                    if (this.bitsPerPixel == 1) {
                                                                        this.imageType = 0;
                                                                    } else if (this.bitsPerPixel == 4) {
                                                                        this.imageType = 1;
                                                                    } else if (this.bitsPerPixel == 8) {
                                                                        this.imageType = 2;
                                                                    } else if (this.bitsPerPixel == 24) {
                                                                        this.imageType = 3;
                                                                    }
                                                                    var3_5 = (int)((this.bitmapOffset - 14L - var17_3) / 3L) * 3;
                                                                    var4_4 = var3_5;
                                                                    if (this.bitmapOffset == var17_3) {
                                                                        switch (this.imageType) {
                                                                            default: {
                                                                                ** break;
                                                                            }
                                                                            case 3: {
                                                                                var3_5 = 0;
                                                                                ** break;
                                                                            }
                                                                            case 2: {
                                                                                var3_5 = 768;
                                                                                ** break;
                                                                            }
                                                                            case 1: {
                                                                                var3_5 = 48;
                                                                                ** break;
                                                                            }
                                                                            case 0: 
                                                                        }
                                                                        var3_5 = 6;
lbl53: // 5 sources:
                                                                        this.bitmapOffset = var17_3 + (long)var3_5;
                                                                        var4_4 = var3_5;
                                                                    }
                                                                    this.readPalette((int)var4_4);
                                                                    break block71;
                                                                }
                                                                this.compression = this.readDWord(this.inputStream);
                                                                this.imageSize = this.readDWord(this.inputStream);
                                                                this.xPelsPerMeter = this.readLong(this.inputStream);
                                                                this.yPelsPerMeter = this.readLong(this.inputStream);
                                                                var13_6 = this.readDWord(this.inputStream);
                                                                var15_7 = this.readDWord(this.inputStream);
                                                                switch ((int)this.compression) {
                                                                    default: {
                                                                        break;
                                                                    }
                                                                    case 3: {
                                                                        var1_1 = this.properties;
                                                                        var27_8 = "BI_BITFIELDS";
                                                                        ** break;
                                                                    }
                                                                    case 2: {
                                                                        var1_1 = this.properties;
                                                                        var27_9 = "BI_RLE4";
                                                                        ** break;
                                                                    }
                                                                    case 1: {
                                                                        var1_1 = this.properties;
                                                                        var27_10 = "BI_RLE8";
                                                                        ** break;
                                                                    }
                                                                    case 0: {
                                                                        var1_1 = this.properties;
                                                                        var27_11 = "BI_RGB";
lbl82: // 4 sources:
                                                                        var1_1.put("compression", var27_12);
                                                                    }
                                                                }
                                                                this.properties.put("x_pixels_per_meter", this.xPelsPerMeter);
                                                                this.properties.put("y_pixels_per_meter", this.yPelsPerMeter);
                                                                this.properties.put("colors_used", var13_6);
                                                                this.properties.put("colors_important", var15_7);
                                                                if (var17_3 == 40L || var17_3 == 52L || var17_3 == 56L) break block72;
                                                                if (var17_3 != 108L) {
                                                                    this.properties.put("bmp_version", "BMP v. 5.x");
                                                                    throw new RuntimeException("BMP version 5 not implemented yet.");
                                                                }
                                                                this.properties.put("bmp_version", "BMP v. 4.x");
                                                                this.redMask = (int)this.readDWord(this.inputStream);
                                                                this.greenMask = (int)this.readDWord(this.inputStream);
                                                                this.blueMask = (int)this.readDWord(this.inputStream);
                                                                this.alphaMask = (int)this.readDWord(this.inputStream);
                                                                var19_20 = this.readDWord(this.inputStream);
                                                                var4_4 = this.readLong(this.inputStream);
                                                                var5_21 = this.readLong(this.inputStream);
                                                                var6_22 = this.readLong(this.inputStream);
                                                                var7_23 = this.readLong(this.inputStream);
                                                                var8_24 = this.readLong(this.inputStream);
                                                                var9_25 = this.readLong(this.inputStream);
                                                                var10_26 = this.readLong(this.inputStream);
                                                                var11_27 = this.readLong(this.inputStream);
                                                                var12_28 = this.readLong(this.inputStream);
                                                                var21_29 = this.readDWord(this.inputStream);
                                                                var23_30 = this.readDWord(this.inputStream);
                                                                var25_31 = this.readDWord(this.inputStream);
                                                                if (this.bitsPerPixel != 1) break block73;
                                                                var3_5 = 10;
                                                                break block74;
                                                            }
                                                            if (this.bitsPerPixel != 4) break block75;
                                                            var3_5 = 11;
                                                            break block74;
                                                        }
                                                        if (this.bitsPerPixel != 8) break block76;
                                                        var3_5 = 12;
                                                    }
                                                    this.imageType = var3_5;
                                                    break block77;
                                                }
                                                if (this.bitsPerPixel != 16) break block78;
                                                this.imageType = 13;
                                                if ((int)this.compression != 0) break block77;
                                                this.redMask = 31744;
                                                this.greenMask = 992;
                                                var3_5 = 31;
                                                break block79;
                                            }
                                            if (this.bitsPerPixel != 24) break block80;
                                            this.imageType = 14;
                                            break block77;
                                        }
                                        if (this.bitsPerPixel != 32) break block77;
                                        this.imageType = 15;
                                        if ((int)this.compression != 0) break block77;
                                        this.redMask = 16711680;
                                        this.greenMask = 65280;
                                        var3_5 = 255;
                                    }
                                    this.blueMask = var3_5;
                                }
                                this.properties.put("red_mask", this.redMask);
                                this.properties.put("green_mask", this.greenMask);
                                this.properties.put("blue_mask", this.blueMask);
                                this.properties.put("alpha_mask", this.alphaMask);
                                var3_5 = (int)((this.bitmapOffset - 14L - var17_3) / 4L) * 4;
                                if (this.bitmapOffset != var17_3) break block81;
                                switch (this.imageType) {
                                    default: {
                                        var3_5 = 0;
                                        break block82;
                                    }
                                    case 12: {
                                        var15_7 = var13_6;
                                        if (var13_6 == 0L) {
                                            var15_7 = 256L;
                                        }
                                        var3_5 = (int)var15_7;
                                        break block83;
                                    }
                                    case 11: {
                                        var15_7 = var13_6;
                                        if (var13_6 != 0L) break;
                                        var15_7 = 16L;
                                        break;
                                    }
                                    case 10: {
                                        var15_7 = var13_6;
                                        if (var13_6 != 0L) break;
                                        var15_7 = 2L;
                                    }
                                }
                                var3_5 = (int)var15_7;
                            }
                            var3_5 *= 4;
                        }
                        this.bitmapOffset = var17_3 + (long)var3_5;
                    }
                    this.readPalette(var3_5);
                    switch ((int)var19_20) {
                        default: {
                            break block71;
                        }
                        case 2: {
                            this.properties.put("color_space", "LCS_CMYK");
                            throw new RuntimeException("Not implemented yet.");
                        }
                        case 1: {
                            var1_1 = this.properties;
                            var27_13 = "color_space";
                            var28_32 = "LCS_sRGB";
                            break block84;
                        }
                        case 0: 
                    }
                    this.properties.put("color_space", "LCS_CALIBRATED_RGB");
                    this.properties.put("redX", (int)var4_4);
                    this.properties.put("redY", var5_21);
                    this.properties.put("redZ", var6_22);
                    this.properties.put("greenX", var7_23);
                    this.properties.put("greenY", var8_24);
                    this.properties.put("greenZ", var9_25);
                    this.properties.put("blueX", var10_26);
                    this.properties.put("blueY", var11_27);
                    this.properties.put("blueZ", var12_28);
                    this.properties.put("gamma_red", var21_29);
                    this.properties.put("gamma_green", var23_30);
                    this.properties.put("gamma_blue", var25_31);
                    throw new RuntimeException("Not implemented yet.");
                }
                switch ((int)this.compression) {
                    default: {
                        throw new RuntimeException("Invalid compression specified in BMP file.");
                    }
                    case 3: {
                        if (this.bitsPerPixel != 16) ** GOTO lbl210
                        var3_5 = 8;
                        ** GOTO lbl212
lbl210: // 1 sources:
                        if (this.bitsPerPixel != 32) ** GOTO lbl213
                        var3_5 = 9;
lbl212: // 2 sources:
                        this.imageType = var3_5;
lbl213: // 2 sources:
                        this.redMask = (int)this.readDWord(this.inputStream);
                        this.greenMask = (int)this.readDWord(this.inputStream);
                        this.blueMask = (int)this.readDWord(this.inputStream);
                        if (var17_3 == 56L) {
                            this.alphaMask = (int)this.readDWord(this.inputStream);
                            this.properties.put("alpha_mask", this.alphaMask);
                        }
                        this.properties.put("red_mask", this.redMask);
                        this.properties.put("green_mask", this.greenMask);
                        this.properties.put("blue_mask", this.blueMask);
                        if (var13_6 != 0L) {
                            this.readPalette((int)var13_6 * 4);
                        }
                        var1_1 = this.properties;
                        var27_14 = "bmp_version";
                        var28_33 = "BMP v. 3.x NT";
                        break;
                    }
                    case 0: 
                    case 1: 
                    case 2: {
                        if (this.bitsPerPixel != 1) ** GOTO lbl232
                        this.imageType = 4;
                        ** GOTO lbl257
lbl232: // 1 sources:
                        if (this.bitsPerPixel != 4) ** GOTO lbl235
                        var3_5 = 5;
                        ** GOTO lbl240
lbl235: // 1 sources:
                        if (this.bitsPerPixel != 8) ** GOTO lbl238
                        var3_5 = 6;
                        ** GOTO lbl240
lbl238: // 1 sources:
                        if (this.bitsPerPixel != 24) ** GOTO lbl242
                        var3_5 = 7;
lbl240: // 3 sources:
                        this.imageType = var3_5;
                        ** GOTO lbl257
lbl242: // 1 sources:
                        if (this.bitsPerPixel != 16) ** GOTO lbl248
                        this.imageType = 8;
                        this.redMask = 31744;
                        this.greenMask = 992;
                        var3_5 = 31;
                        ** GOTO lbl253
lbl248: // 1 sources:
                        if (this.bitsPerPixel != 32) ** GOTO lbl257
                        this.imageType = 9;
                        this.redMask = 16711680;
                        this.greenMask = 65280;
                        var3_5 = 255;
lbl253: // 2 sources:
                        this.blueMask = var3_5;
                        this.properties.put("red_mask", this.redMask);
                        this.properties.put("green_mask", this.greenMask);
                        this.properties.put("blue_mask", this.blueMask);
lbl257: // 4 sources:
                        if (var17_3 >= 52L) {
                            this.redMask = (int)this.readDWord(this.inputStream);
                            this.greenMask = (int)this.readDWord(this.inputStream);
                            this.blueMask = (int)this.readDWord(this.inputStream);
                            this.properties.put("red_mask", this.redMask);
                            this.properties.put("green_mask", this.greenMask);
                            this.properties.put("blue_mask", this.blueMask);
                        }
                        if (var17_3 == 56L) {
                            this.alphaMask = (int)this.readDWord(this.inputStream);
                            this.properties.put("alpha_mask", this.alphaMask);
                        }
                        var3_5 = (int)((this.bitmapOffset - 14L - var17_3) / 4L) * 4;
                        if (this.bitmapOffset != var17_3) ** GOTO lbl291
                        switch (this.imageType) {
                            default: {
                                var3_5 = 0;
                                ** GOTO lbl290
                            }
                            case 6: {
                                var15_7 = var13_6;
                                if (var13_6 == 0L) {
                                    var15_7 = 256L;
                                }
                                var3_5 = (int)var15_7;
                                ** GOTO lbl289
                            }
                            case 5: {
                                var15_7 = var13_6;
                                if (var13_6 != 0L) break;
                                var15_7 = 16L;
                                break;
                            }
                            case 4: {
                                var15_7 = var13_6;
                                if (var13_6 != 0L) break;
                                var15_7 = 2L;
                            }
                        }
                        var3_5 = (int)var15_7;
lbl289: // 2 sources:
                        var3_5 *= 4;
lbl290: // 2 sources:
                        this.bitmapOffset = var17_3 + (long)var3_5;
lbl291: // 2 sources:
                        this.readPalette(var3_5);
                        var1_1 = this.properties;
                        var27_16 = "bmp_version";
                        var28_35 = "BMP v. 3.x";
                    }
                }
            }
            var1_1.put(var27_15, var28_34);
            ** break;
        }
        if (this.height > 0) {
            this.isBottomUp = true;
        } else {
            this.isBottomUp = false;
            this.height = Math.abs(this.height);
        }
        var5_21 = 0;
        var4_4 = 0;
        if (this.bitsPerPixel != 1 && this.bitsPerPixel != 4 && this.bitsPerPixel != 8) {
            if (this.bitsPerPixel == 16) {
                var3_5 = 3;
            } else {
                var4_4 = 3;
                var3_5 = (int)var4_4;
                if (this.bitsPerPixel == 32) {
                    var3_5 = this.alphaMask == 0 ? (int)var4_4 : 4;
                }
            }
            this.numBands = var3_5;
            return;
        }
        this.numBands = 1;
        if (this.imageType != 0 && this.imageType != 1 && this.imageType != 2) {
            var3_5 = var5_21 = this.palette.length / 4;
            if (var5_21 > 256) {
                var3_5 = 256;
            }
            var1_1 = new byte[var3_5];
            var27_18 = new byte[var3_5];
            var28_36 = new byte[var3_5];
            while (var4_4 < var3_5) {
                var5_21 = (int)(var4_4 * 4);
                var28_36[var4_4] = this.palette[var5_21];
                var27_18[var4_4] = this.palette[var5_21 + 1];
                var1_1[var4_4] = this.palette[var5_21 + 2];
                ++var4_4;
            }
            return;
        }
        var4_4 = this.palette.length / 3;
        var3_5 = (int)var4_4;
        if (var4_4 > 256) {
            var3_5 = 256;
        }
        var1_1 = new byte[var3_5];
        var27_19 = new byte[var3_5];
        var28_37 = new byte[var3_5];
        var4_4 = var5_21;
        while (var4_4 < var3_5) {
            var5_21 = (int)(var4_4 * 3);
            var28_37[var4_4] = this.palette[var5_21];
            var27_19[var4_4] = this.palette[var5_21 + 1];
            var1_1[var4_4] = this.palette[var5_21 + 2];
            ++var4_4;
        }
    }
}

