/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf.hyphenation;

import com.itextpdf.text.pdf.hyphenation.ByteVector;
import com.itextpdf.text.pdf.hyphenation.CharVector;
import com.itextpdf.text.pdf.hyphenation.Hyphenation;
import com.itextpdf.text.pdf.hyphenation.PatternConsumer;
import com.itextpdf.text.pdf.hyphenation.SimplePatternParser;
import com.itextpdf.text.pdf.hyphenation.TernaryTree;
import java.io.InputStream;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.HashMap;

public class HyphenationTree
extends TernaryTree
implements PatternConsumer {
    private static final long serialVersionUID = -7763254239309429432L;
    protected TernaryTree classmap = new TernaryTree();
    private transient TernaryTree ivalues;
    protected HashMap<String, ArrayList<Object>> stoplist = new HashMap(23);
    protected ByteVector vspace = new ByteVector();

    public HyphenationTree() {
        this.vspace.alloc(1);
    }

    @Override
    public void addClass(String string2) {
        if (string2.length() > 0) {
            char c2 = string2.charAt(0);
            char[] arrc = new char[2];
            arrc[1] = '\u0000';
            for (int i2 = 0; i2 < string2.length(); ++i2) {
                arrc[0] = string2.charAt(i2);
                this.classmap.insert(arrc, 0, c2);
            }
        }
    }

    @Override
    public void addException(String string2, ArrayList<Object> arrayList) {
        this.stoplist.put(string2, arrayList);
    }

    @Override
    public void addPattern(String string2, String string3) {
        int n2;
        int n3 = n2 = this.ivalues.find(string3);
        if (n2 <= 0) {
            n3 = this.packValues(string3);
            this.ivalues.insert(string3, (char)n3);
        }
        this.insert(string2, (char)n3);
    }

    public String findPattern(String string2) {
        int n2 = super.find(string2);
        if (n2 >= 0) {
            return this.unpackValues(n2);
        }
        return "";
    }

    protected byte[] getValues(int n2) {
        StringBuffer stringBuffer = new StringBuffer();
        byte[] arrby = this.vspace;
        int n3 = n2 + 1;
        char c2 = arrby.get(n2);
        n2 = n3;
        while (c2 != '\u0000') {
            stringBuffer.append((char)((c2 >>> 4) - 1));
            c2 = (char)(c2 & 15);
            if (c2 == '\u0000') break;
            stringBuffer.append((char)(c2 - '\u0001'));
            c2 = (char)this.vspace.get(n2);
            ++n2;
        }
        arrby = new byte[stringBuffer.length()];
        for (n2 = 0; n2 < arrby.length; ++n2) {
            arrby[n2] = (byte)stringBuffer.charAt(n2);
        }
        return arrby;
    }

    protected int hstrcmp(char[] arrc, int n2, char[] arrc2, int n3) {
        while (arrc[n2] == arrc2[n3]) {
            if (arrc[n2] == '\u0000') {
                return 0;
            }
            ++n2;
            ++n3;
        }
        if (arrc2[n3] == '\u0000') {
            return 0;
        }
        return arrc[n2] - arrc2[n3];
    }

    public Hyphenation hyphenate(String arrc, int n2, int n3) {
        arrc = arrc.toCharArray();
        return this.hyphenate(arrc, 0, arrc.length, n2, n3);
    }

    public Hyphenation hyphenate(char[] arrc, int n2, int n3, int n4, int n5) {
        int n6;
        int n7;
        int n8;
        Object object = new char[n3 + 3];
        char[] arrc2 = new char[2];
        int n9 = n3;
        int n10 = 0;
        int n11 = 0;
        for (n7 = 1; n7 <= n3; ++n7) {
            arrc2[0] = arrc[n2 + n7 - 1];
            n8 = this.classmap.find(arrc2, 0);
            if (n8 < 0) {
                n8 = n10 + 1;
                if (n7 == n8) {
                    n10 = n8;
                } else {
                    n11 = 1;
                }
                --n9;
                continue;
            }
            if (n11 == 0) {
                object[n7 - n10] = (char)n8;
                continue;
            }
            return null;
        }
        if (n9 < n4 + n5) {
            return null;
        }
        n7 = n9 + 1;
        arrc2 = new int[n7];
        Object object2 = new byte[]((char[])object, 1, n9);
        if (this.stoplist.containsKey(object2)) {
            object = this.stoplist.get(object2);
            n7 = 0;
            n8 = 0;
            n11 = 0;
            do {
                n6 = n11;
                if (n7 < object.size()) {
                    object2 = object.get(n7);
                    n6 = n8;
                    int n12 = n11;
                    if (object2 instanceof String) {
                        n6 = n8 += ((String)object2).length();
                        n12 = n11;
                        if (n8 >= n4) {
                            n6 = n8;
                            n12 = n11;
                            if (n8 < n9 - n5) {
                                arrc2[n11] = n8 + n10;
                                n12 = n11 + 1;
                                n6 = n8;
                            }
                        }
                    }
                    ++n7;
                    n8 = n6;
                    n11 = n12;
                    continue;
                }
                break;
            } while (true);
        } else {
            object[0] = 46;
            object[n7] = 46;
            object[n9 + 2] = '\u0000';
            object2 = new byte[n9 + 3];
            for (n11 = 0; n11 < n7; ++n11) {
                this.searchPatterns((char[])object, n11, (byte[])object2);
            }
            n8 = 0;
            n11 = 0;
            while (n8 < n9) {
                n6 = n8 + 1;
                n7 = n11;
                if ((object2[n6] & 1) == 1) {
                    n7 = n11;
                    if (n8 >= n4) {
                        n7 = n11;
                        if (n8 <= n9 - n5) {
                            arrc2[n11] = n8 + n10;
                            n7 = n11 + 1;
                        }
                    }
                }
                n8 = n6;
                n11 = n7;
            }
            n6 = n11;
        }
        if (n6 > 0) {
            object = new int[n6];
            System.arraycopy(arrc2, 0, object, 0, n6);
            return new Hyphenation(new String(arrc, n2, n3), (int[])object);
        }
        return null;
    }

    public void loadSimplePatterns(InputStream inputStream) {
        SimplePatternParser simplePatternParser = new SimplePatternParser();
        this.ivalues = new TernaryTree();
        simplePatternParser.parse(inputStream, this);
        this.trimToSize();
        this.vspace.trimToSize();
        this.classmap.trimToSize();
        this.ivalues = null;
    }

    protected int packValues(String string2) {
        int n2 = string2.length();
        int n3 = (n2 & 1) == 1 ? (n2 >> 1) + 2 : (n2 >> 1) + 1;
        int n4 = this.vspace.alloc(n3);
        byte[] arrby = this.vspace.getArray();
        for (int i2 = 0; i2 < n2; ++i2) {
            int n5 = i2 >> 1;
            byte by2 = (byte)(string2.charAt(i2) - 48 + 1 & 15);
            if ((i2 & 1) == 1) {
                arrby[n5 += n4] = (byte)(by2 | arrby[n5]);
                continue;
            }
            arrby[n5 + n4] = (byte)(by2 << 4);
        }
        arrby[n3 - 1 + n4] = 0;
        return n4;
    }

    @Override
    public void printStats() {
        PrintStream printStream = System.out;
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("Value space size = ");
        stringBuilder.append(Integer.toString(this.vspace.length()));
        printStream.println(stringBuilder.toString());
        super.printStats();
    }

    protected void searchPatterns(char[] arrc, int n2, byte[] arrby) {
        int n3 = arrc[n2];
        int n4 = this.root;
        int n5 = n2;
        block0 : while (n4 > 0 && n4 < this.sc.length) {
            char c2;
            int n6 = this.sc[n4];
            int n7 = 0;
            int n8 = 0;
            if (n6 == 65535) {
                if (this.hstrcmp(arrc, n5, this.kv.getArray(), this.lo[n4]) == 0) {
                    arrc = this.getValues(this.eq[n4]);
                    n3 = arrc.length;
                    n4 = n2;
                    for (n2 = n8; n2 < n3; ++n2) {
                        c2 = arrc[n2];
                        if (n4 < arrby.length && c2 > arrby[n4]) {
                            arrby[n4] = c2;
                        }
                        ++n4;
                    }
                }
                return;
            }
            n8 = n3 - this.sc[n4];
            if (n8 == 0) {
                if (n3 == 0) {
                    return;
                }
                int n9 = n5 + 1;
                int n10 = arrc[n9];
                n6 = n8 = this.eq[n4];
                do {
                    n5 = n9;
                    n4 = n8;
                    n3 = n10;
                    if (n6 <= 0) continue block0;
                    n5 = n9;
                    n4 = n8;
                    n3 = n10;
                    if (n6 >= this.sc.length) continue block0;
                    if (this.sc[n6] == '\uffff') {
                        n5 = n9;
                        n4 = n8;
                        n3 = n10;
                        continue block0;
                    }
                    if (this.sc[n6] == '\u0000') {
                        byte[] arrby2 = this.getValues(this.eq[n6]);
                        int n11 = arrby2.length;
                        int n12 = n2;
                        n6 = n7;
                        do {
                            n5 = n9;
                            n4 = n8;
                            n3 = n10;
                            if (n6 >= n11) continue block0;
                            c2 = arrby2[n6];
                            if (n12 < arrby.length && c2 > arrby[n12]) {
                                arrby[n12] = c2;
                            }
                            ++n12;
                            ++n6;
                        } while (true);
                    }
                    n6 = this.lo[n6];
                } while (true);
            }
            if (n8 < 0) {
                n4 = this.lo[n4];
                continue;
            }
            n4 = this.hi[n4];
        }
    }

    protected String unpackValues(int n2) {
        StringBuffer stringBuffer = new StringBuffer();
        ByteVector byteVector = this.vspace;
        int n3 = n2 + 1;
        char c2 = byteVector.get(n2);
        n2 = n3;
        while (c2 != '\u0000') {
            stringBuffer.append((char)((c2 >>> 4) - 1 + 48));
            c2 = (char)(c2 & 15);
            if (c2 == '\u0000') break;
            stringBuffer.append((char)(c2 - '\u0001' + 48));
            c2 = (char)this.vspace.get(n2);
            ++n2;
        }
        return stringBuffer.toString();
    }
}

