/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf;

import com.itextpdf.text.DocumentException;
import com.itextpdf.text.error_messages.MessageLocalization;
import com.itextpdf.text.pdf.AcroFields;
import com.itextpdf.text.pdf.IntHashtable;
import com.itextpdf.text.pdf.PdfCopyFieldsImp;
import com.itextpdf.text.pdf.PdfReader;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

class PdfCopyFormsImp
extends PdfCopyFieldsImp {
    PdfCopyFormsImp(OutputStream outputStream) {
        super(outputStream);
    }

    public void copyDocumentFields(PdfReader pdfReader) {
        block2 : {
            block5 : {
                block4 : {
                    block3 : {
                        if (!pdfReader.isOpenedWithFullPermissions()) break block2;
                        if (!this.readers2intrefs.containsKey(pdfReader)) break block3;
                        pdfReader = new PdfReader(pdfReader);
                        break block4;
                    }
                    if (pdfReader.isTampered()) break block5;
                    pdfReader.consolidateNamedDestinations();
                    pdfReader.setTampered(true);
                }
                pdfReader.shuffleSubsetNames();
                this.readers2intrefs.put(pdfReader, new IntHashtable());
                this.visited.put(pdfReader, new IntHashtable());
                this.fields.add(pdfReader.getAcroFields());
                this.updateCalculationOrder(pdfReader);
                return;
            }
            throw new DocumentException(MessageLocalization.getComposedMessage("the.document.was.reused", new Object[0]));
        }
        throw new IllegalArgumentException(MessageLocalization.getComposedMessage("pdfreader.not.opened.with.owner.password", new Object[0]));
    }

    @Override
    void mergeFields() {
        for (int i2 = 0; i2 < this.fields.size(); ++i2) {
            this.mergeWithMaster(((AcroFields)this.fields.get(i2)).getFields());
        }
    }
}

