/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf;

import com.itextpdf.text.BaseColor;
import com.itextpdf.text.ExceptionConverter;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.pdf.BaseFont;
import com.itextpdf.text.pdf.PdfAction;
import com.itextpdf.text.pdf.PdfAnnotation;
import com.itextpdf.text.pdf.PdfAppearance;
import com.itextpdf.text.pdf.PdfArray;
import com.itextpdf.text.pdf.PdfBoolean;
import com.itextpdf.text.pdf.PdfBorderDictionary;
import com.itextpdf.text.pdf.PdfContentByte;
import com.itextpdf.text.pdf.PdfDictionary;
import com.itextpdf.text.pdf.PdfFormField;
import com.itextpdf.text.pdf.PdfIndirectReference;
import com.itextpdf.text.pdf.PdfName;
import com.itextpdf.text.pdf.PdfNumber;
import com.itextpdf.text.pdf.PdfObject;
import com.itextpdf.text.pdf.PdfString;
import com.itextpdf.text.pdf.PdfTemplate;
import com.itextpdf.text.pdf.PdfWriter;
import java.io.OutputStream;
import java.util.Collection;
import java.util.HashSet;
import java.util.Iterator;
import java.util.StringTokenizer;

public class PdfAcroForm
extends PdfDictionary {
    private PdfArray calculationOrder = new PdfArray();
    private PdfArray documentFields = new PdfArray();
    private HashSet<PdfTemplate> fieldTemplates = new HashSet();
    private int sigFlags = 0;
    private PdfWriter writer;

    public PdfAcroForm(PdfWriter pdfWriter) {
        this.writer = pdfWriter;
    }

    public void addCalculationOrder(PdfFormField pdfFormField) {
        this.calculationOrder.add(pdfFormField.getIndirectReference());
    }

    public PdfFormField addCheckBox(String string2, String string3, boolean bl2, float f2, float f3, float f4, float f5) {
        PdfFormField pdfFormField = PdfFormField.createCheckBox(this.writer);
        this.setCheckBoxParams(pdfFormField, string2, string3, bl2, f2, f3, f4, f5);
        this.drawCheckBoxAppearences(pdfFormField, string3, f2, f3, f4, f5);
        this.addFormField(pdfFormField);
        return pdfFormField;
    }

    public PdfFormField addComboBox(String string2, String[] arrstring, String string3, boolean bl2, BaseFont baseFont, float f2, float f3, float f4, float f5, float f6) {
        PdfFormField pdfFormField = PdfFormField.createCombo(this.writer, bl2, arrstring, 0);
        this.setChoiceParams(pdfFormField, string2, string3, f3, f4, f5, f6);
        if (string3 == null) {
            string3 = arrstring[0];
        }
        this.drawSingleLineOfText(pdfFormField, string3, baseFont, f2, f3, f4, f5, f6);
        this.addFormField(pdfFormField);
        return pdfFormField;
    }

    public PdfFormField addComboBox(String object, String[][] arrstring, String object2, boolean bl2, BaseFont baseFont, float f2, float f3, float f4, float f5, float f6) {
        PdfFormField pdfFormField;
        block2 : {
            pdfFormField = PdfFormField.createCombo(this.writer, bl2, arrstring, 0);
            this.setChoiceParams(pdfFormField, (String)object, (String)object2, f3, f4, f5, f6);
            int n2 = arrstring.length;
            for (int i2 = 0; i2 < n2; ++i2) {
                object = arrstring[i2];
                if (!object[0].equals(object2)) continue;
                object = object[1];
                break block2;
            }
            object = null;
        }
        object2 = object;
        if (object == null) {
            object2 = arrstring[0][1];
        }
        this.drawSingleLineOfText(pdfFormField, (String)object2, baseFont, f2, f3, f4, f5, f6);
        this.addFormField(pdfFormField);
        return pdfFormField;
    }

    public void addDocumentField(PdfIndirectReference pdfIndirectReference) {
        this.documentFields.add(pdfIndirectReference);
    }

    public void addFieldTemplates(HashSet<PdfTemplate> hashSet) {
        this.fieldTemplates.addAll(hashSet);
    }

    public void addFormField(PdfFormField pdfFormField) {
        this.writer.addAnnotation(pdfFormField);
    }

    public PdfFormField addHiddenField(String string2, String string3) {
        PdfFormField pdfFormField = PdfFormField.createEmpty(this.writer);
        pdfFormField.setFieldName(string2);
        pdfFormField.setValueAsName(string3);
        this.addFormField(pdfFormField);
        return pdfFormField;
    }

    public PdfFormField addHtmlPostButton(String string2, String string3, String string4, String object, BaseFont baseFont, float f2, float f3, float f4, float f5, float f6) {
        object = PdfAction.createSubmitForm((String)object, null, 4);
        object = new PdfFormField(this.writer, f3, f4, f5, f6, (PdfAction)object);
        this.setButtonParams((PdfFormField)object, 65536, string2, string4);
        this.drawButton((PdfFormField)object, string3, baseFont, f2, f3, f4, f5, f6);
        this.addFormField((PdfFormField)object);
        return object;
    }

    public PdfFormField addMap(String object, String object2, String string2, PdfContentByte pdfContentByte, float f2, float f3, float f4, float f5) {
        object2 = PdfAction.createSubmitForm(string2, null, 20);
        object2 = new PdfFormField(this.writer, f2, f3, f4, f5, (PdfAction)object2);
        this.setButtonParams((PdfFormField)object2, 65536, (String)object, null);
        object = PdfAppearance.createAppearance(this.writer, f4 - f2, f5 - f3);
        object.add(pdfContentByte);
        object2.setAppearance(PdfAnnotation.APPEARANCE_NORMAL, (PdfTemplate)object);
        this.addFormField((PdfFormField)object2);
        return object2;
    }

    public PdfFormField addMultiLineTextField(String string2, String string3, BaseFont baseFont, float f2, float f3, float f4, float f5, float f6) {
        PdfFormField pdfFormField = PdfFormField.createTextField(this.writer, true, false, 0);
        this.setTextFieldParams(pdfFormField, string3, string2, f3, f4, f5, f6);
        this.drawMultiLineOfText(pdfFormField, string3, baseFont, f2, f3, f4, f5, f6);
        this.addFormField(pdfFormField);
        return pdfFormField;
    }

    public PdfFormField addRadioButton(PdfFormField pdfFormField, String string2, float f2, float f3, float f4, float f5) {
        PdfFormField pdfFormField2 = PdfFormField.createEmpty(this.writer);
        pdfFormField2.setWidget(new Rectangle(f2, f3, f4, f5), PdfAnnotation.HIGHLIGHT_TOGGLE);
        if (((PdfName)pdfFormField.get(PdfName.V)).toString().substring(1).equals(string2)) {
            pdfFormField2.setAppearanceState(string2);
        } else {
            pdfFormField2.setAppearanceState("Off");
        }
        this.drawRadioAppearences(pdfFormField2, string2, f2, f3, f4, f5);
        pdfFormField.addKid(pdfFormField2);
        return pdfFormField2;
    }

    public void addRadioGroup(PdfFormField pdfFormField) {
        this.addFormField(pdfFormField);
    }

    public PdfFormField addResetButton(String string2, String string3, String string4, BaseFont baseFont, float f2, float f3, float f4, float f5, float f6) {
        PdfDictionary pdfDictionary = PdfAction.createResetForm(null, 0);
        pdfDictionary = new PdfFormField(this.writer, f3, f4, f5, f6, (PdfAction)pdfDictionary);
        this.setButtonParams((PdfFormField)pdfDictionary, 65536, string2, string4);
        this.drawButton((PdfFormField)pdfDictionary, string3, baseFont, f2, f3, f4, f5, f6);
        this.addFormField((PdfFormField)pdfDictionary);
        return pdfDictionary;
    }

    public PdfFormField addSelectList(String charSequence, String[] arrstring, String string2, BaseFont baseFont, float f2, float f3, float f4, float f5, float f6) {
        Object object = this.writer;
        object = PdfFormField.createList((PdfWriter)object, arrstring, 0);
        this.setChoiceParams((PdfFormField)object, (String)charSequence, string2, f3, f4, f5, f6);
        charSequence = new StringBuffer();
        int n2 = arrstring.length;
        for (int i2 = 0; i2 < n2; ++i2) {
            charSequence.append(arrstring[i2]);
            charSequence.append('\n');
        }
        this.drawMultiLineOfText((PdfFormField)object, charSequence.toString(), baseFont, f2, f3, f4, f5, f6);
        this.addFormField((PdfFormField)object);
        return object;
    }

    public PdfFormField addSelectList(String charSequence, String[][] arrstring, String string2, BaseFont baseFont, float f2, float f3, float f4, float f5, float f6) {
        Object object = this.writer;
        object = PdfFormField.createList((PdfWriter)object, arrstring, 0);
        this.setChoiceParams((PdfFormField)object, (String)charSequence, string2, f3, f4, f5, f6);
        charSequence = new StringBuffer();
        int n2 = arrstring.length;
        for (int i2 = 0; i2 < n2; ++i2) {
            charSequence.append(arrstring[i2][1]);
            charSequence.append('\n');
        }
        this.drawMultiLineOfText((PdfFormField)object, charSequence.toString(), baseFont, f2, f3, f4, f5, f6);
        this.addFormField((PdfFormField)object);
        return object;
    }

    public PdfFormField addSignature(String string2, float f2, float f3, float f4, float f5) {
        PdfFormField pdfFormField = PdfFormField.createSignature(this.writer);
        this.setSignatureParams(pdfFormField, string2, f2, f3, f4, f5);
        this.drawSignatureAppearences(pdfFormField, f2, f3, f4, f5);
        this.addFormField(pdfFormField);
        return pdfFormField;
    }

    public PdfFormField addSingleLinePasswordField(String string2, String string3, BaseFont baseFont, float f2, float f3, float f4, float f5, float f6) {
        PdfFormField pdfFormField = PdfFormField.createTextField(this.writer, false, true, 0);
        this.setTextFieldParams(pdfFormField, string3, string2, f3, f4, f5, f6);
        this.drawSingleLineOfText(pdfFormField, string3, baseFont, f2, f3, f4, f5, f6);
        this.addFormField(pdfFormField);
        return pdfFormField;
    }

    public PdfFormField addSingleLineTextField(String string2, String string3, BaseFont baseFont, float f2, float f3, float f4, float f5, float f6) {
        PdfFormField pdfFormField = PdfFormField.createTextField(this.writer, false, false, 0);
        this.setTextFieldParams(pdfFormField, string3, string2, f3, f4, f5, f6);
        this.drawSingleLineOfText(pdfFormField, string3, baseFont, f2, f3, f4, f5, f6);
        this.addFormField(pdfFormField);
        return pdfFormField;
    }

    public void drawButton(PdfFormField pdfFormField, String string2, BaseFont baseFont, float f2, float f3, float f4, float f5, float f6) {
        Object object = this.writer;
        f3 = f5 - f3;
        f4 = f6 - f4;
        object = PdfAppearance.createAppearance((PdfWriter)object, f3, f4);
        object.drawButton(0.0f, 0.0f, f3, f4, string2, baseFont, f2);
        pdfFormField.setAppearance(PdfAnnotation.APPEARANCE_NORMAL, (PdfTemplate)object);
    }

    public void drawCheckBoxAppearences(PdfFormField pdfFormField, String object, float f2, float f3, float f4, float f5) {
        BaseFont baseFont;
        try {
            baseFont = BaseFont.createFont("ZapfDingbats", "Cp1252", false);
        }
        catch (Exception exception) {
            throw new ExceptionConverter(exception);
        }
        f3 = f5 - f3;
        Object object2 = this.writer;
        f2 = f4 - f2;
        object2 = PdfAppearance.createAppearance((PdfWriter)object2, f2, f3);
        PdfAppearance pdfAppearance = (PdfAppearance)object2.getDuplicate();
        pdfAppearance.setFontAndSize(baseFont, f3);
        pdfAppearance.resetRGBColorFill();
        pdfFormField.setDefaultAppearanceString(pdfAppearance);
        object2.drawTextField(0.0f, 0.0f, f2, f3);
        object2.saveState();
        object2.resetRGBColorFill();
        object2.beginText();
        object2.setFontAndSize(baseFont, f3);
        object2.showTextAligned(1, "4", f2 / 2.0f, f3 / 2.0f - 0.3f * f3, 0.0f);
        object2.endText();
        object2.restoreState();
        pdfFormField.setAppearance(PdfAnnotation.APPEARANCE_NORMAL, (String)object, (PdfTemplate)object2);
        object = PdfAppearance.createAppearance(this.writer, f2, f3);
        object.drawTextField(0.0f, 0.0f, f2, f3);
        pdfFormField.setAppearance(PdfAnnotation.APPEARANCE_NORMAL, "Off", (PdfTemplate)object);
    }

    public void drawMultiLineOfText(PdfFormField pdfFormField, String object, BaseFont baseFont, float f2, float f3, float f4, float f5, float f6) {
        Object object2 = this.writer;
        f3 = f6 - f4;
        object2 = PdfAppearance.createAppearance((PdfWriter)object2, f5 -= f3, f3);
        PdfAppearance pdfAppearance = (PdfAppearance)object2.getDuplicate();
        pdfAppearance.setFontAndSize(baseFont, f2);
        pdfAppearance.resetRGBColorFill();
        pdfFormField.setDefaultAppearanceString(pdfAppearance);
        object2.drawTextField(0.0f, 0.0f, f5, f3);
        object2.beginVariableText();
        object2.saveState();
        object2.rectangle(3.0f, 3.0f, f5 - 6.0f, f3 - 6.0f);
        object2.clip();
        object2.newPath();
        object2.beginText();
        object2.setFontAndSize(baseFont, f2);
        object2.resetRGBColorFill();
        object2.setTextMatrix(4.0f, 5.0f);
        object = new StringTokenizer((String)object, "\n");
        while (object.hasMoreTokens()) {
            object2.showTextAligned(0, object.nextToken(), 3.0f, f3 -= 1.2f * f2, 0.0f);
        }
        object2.endText();
        object2.restoreState();
        object2.endVariableText();
        pdfFormField.setAppearance(PdfAnnotation.APPEARANCE_NORMAL, (PdfTemplate)object2);
    }

    public void drawRadioAppearences(PdfFormField pdfFormField, String object, float f2, float f3, float f4, float f5) {
        Object object2 = this.writer;
        f2 = f4 - f2;
        f3 = f5 - f3;
        object2 = PdfAppearance.createAppearance((PdfWriter)object2, f2, f3);
        object2.drawRadioField(0.0f, 0.0f, f2, f3, true);
        pdfFormField.setAppearance(PdfAnnotation.APPEARANCE_NORMAL, (String)object, (PdfTemplate)object2);
        object = PdfAppearance.createAppearance(this.writer, f2, f3);
        object.drawRadioField(0.0f, 0.0f, f2, f3, false);
        pdfFormField.setAppearance(PdfAnnotation.APPEARANCE_NORMAL, "Off", (PdfTemplate)object);
    }

    public void drawSignatureAppearences(PdfFormField pdfFormField, float f2, float f3, float f4, float f5) {
        Object object = this.writer;
        f2 = f4 - f2;
        f3 = f5 - f3;
        object = PdfAppearance.createAppearance((PdfWriter)object, f2, f3);
        object.setGrayFill(1.0f);
        object.rectangle(0.0f, 0.0f, f2, f3);
        object.fill();
        object.setGrayStroke(0.0f);
        object.setLineWidth(1.0f);
        object.rectangle(0.5f, 0.5f, f2 - 0.5f, f3 - 0.5f);
        object.closePathStroke();
        object.saveState();
        object.rectangle(1.0f, 1.0f, f2 - 2.0f, f3 - 2.0f);
        object.clip();
        object.newPath();
        object.restoreState();
        pdfFormField.setAppearance(PdfAnnotation.APPEARANCE_NORMAL, (PdfTemplate)object);
    }

    public void drawSingleLineOfText(PdfFormField pdfFormField, String string2, BaseFont baseFont, float f2, float f3, float f4, float f5, float f6) {
        Object object = this.writer;
        f3 = f5 - f3;
        f4 = f6 - f4;
        object = PdfAppearance.createAppearance((PdfWriter)object, f3, f4);
        PdfAppearance pdfAppearance = (PdfAppearance)object.getDuplicate();
        pdfAppearance.setFontAndSize(baseFont, f2);
        pdfAppearance.resetRGBColorFill();
        pdfFormField.setDefaultAppearanceString(pdfAppearance);
        object.drawTextField(0.0f, 0.0f, f3, f4);
        object.beginVariableText();
        object.saveState();
        object.rectangle(3.0f, 3.0f, f3 - 6.0f, f4 - 6.0f);
        object.clip();
        object.newPath();
        object.beginText();
        object.setFontAndSize(baseFont, f2);
        object.resetRGBColorFill();
        object.setTextMatrix(4.0f, f4 / 2.0f - f2 * 0.3f);
        object.showText(string2);
        object.endText();
        object.restoreState();
        object.endVariableText();
        pdfFormField.setAppearance(PdfAnnotation.APPEARANCE_NORMAL, (PdfTemplate)object);
    }

    public PdfFormField getRadioGroup(String string2, String string3, boolean bl2) {
        PdfFormField pdfFormField = PdfFormField.createRadioButton(this.writer, bl2);
        pdfFormField.setFieldName(string2);
        pdfFormField.setValueAsName(string3);
        return pdfFormField;
    }

    public boolean isValid() {
        if (this.documentFields.size() == 0) {
            return false;
        }
        this.put(PdfName.FIELDS, this.documentFields);
        if (this.sigFlags != 0) {
            this.put(PdfName.SIGFLAGS, new PdfNumber(this.sigFlags));
        }
        if (this.calculationOrder.size() > 0) {
            this.put(PdfName.CO, this.calculationOrder);
        }
        if (this.fieldTemplates.isEmpty()) {
            return true;
        }
        PdfDictionary pdfDictionary = new PdfDictionary();
        Iterator<PdfTemplate> iterator = this.fieldTemplates.iterator();
        while (iterator.hasNext()) {
            PdfFormField.mergeResources(pdfDictionary, (PdfDictionary)iterator.next().getResources());
        }
        this.put(PdfName.DR, pdfDictionary);
        this.put(PdfName.DA, new PdfString("/Helv 0 Tf 0 g "));
        pdfDictionary = (PdfDictionary)pdfDictionary.get(PdfName.FONT);
        if (pdfDictionary != null) {
            this.writer.eliminateFontSubset(pdfDictionary);
        }
        return true;
    }

    public void setButtonParams(PdfFormField pdfFormField, int n2, String string2, String string3) {
        pdfFormField.setButton(n2);
        pdfFormField.setFlags(4);
        pdfFormField.setPage();
        pdfFormField.setFieldName(string2);
        if (string3 != null) {
            pdfFormField.setValueAsString(string3);
        }
    }

    public void setCheckBoxParams(PdfFormField pdfFormField, String string2, String string3, boolean bl2, float f2, float f3, float f4, float f5) {
        pdfFormField.setWidget(new Rectangle(f2, f3, f4, f5), PdfAnnotation.HIGHLIGHT_TOGGLE);
        pdfFormField.setFieldName(string2);
        if (bl2) {
            pdfFormField.setValueAsName(string3);
            pdfFormField.setAppearanceState(string3);
        } else {
            pdfFormField.setValueAsName("Off");
            pdfFormField.setAppearanceState("Off");
        }
        pdfFormField.setFlags(4);
        pdfFormField.setPage();
        pdfFormField.setBorderStyle(new PdfBorderDictionary(1.0f, 0));
    }

    public void setChoiceParams(PdfFormField pdfFormField, String string2, String string3, float f2, float f3, float f4, float f5) {
        pdfFormField.setWidget(new Rectangle(f2, f3, f4, f5), PdfAnnotation.HIGHLIGHT_INVERT);
        if (string3 != null) {
            pdfFormField.setValueAsString(string3);
            pdfFormField.setDefaultValueAsString(string3);
        }
        pdfFormField.setFieldName(string2);
        pdfFormField.setFlags(4);
        pdfFormField.setPage();
        pdfFormField.setBorderStyle(new PdfBorderDictionary(2.0f, 0));
    }

    public void setNeedAppearances(boolean bl2) {
        this.put(PdfName.NEEDAPPEARANCES, new PdfBoolean(bl2));
    }

    public void setSigFlags(int n2) {
        this.sigFlags = n2 | this.sigFlags;
    }

    public void setSignatureParams(PdfFormField pdfFormField, String string2, float f2, float f3, float f4, float f5) {
        pdfFormField.setWidget(new Rectangle(f2, f3, f4, f5), PdfAnnotation.HIGHLIGHT_INVERT);
        pdfFormField.setFieldName(string2);
        pdfFormField.setFlags(4);
        pdfFormField.setPage();
        pdfFormField.setMKBorderColor(BaseColor.BLACK);
        pdfFormField.setMKBackgroundColor(BaseColor.WHITE);
    }

    public void setTextFieldParams(PdfFormField pdfFormField, String string2, String string3, float f2, float f3, float f4, float f5) {
        pdfFormField.setWidget(new Rectangle(f2, f3, f4, f5), PdfAnnotation.HIGHLIGHT_INVERT);
        pdfFormField.setValueAsString(string2);
        pdfFormField.setDefaultValueAsString(string2);
        pdfFormField.setFieldName(string3);
        pdfFormField.setFlags(4);
        pdfFormField.setPage();
    }

    @Override
    public void toPdf(PdfWriter pdfWriter, OutputStream outputStream) {
        PdfWriter.checkPdfIsoConformance(pdfWriter, 15, this);
        super.toPdf(pdfWriter, outputStream);
    }
}

