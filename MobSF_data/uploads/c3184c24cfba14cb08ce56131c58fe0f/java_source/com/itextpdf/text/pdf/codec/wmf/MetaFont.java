/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf.codec.wmf;

import com.itextpdf.text.Document;
import com.itextpdf.text.ExceptionConverter;
import com.itextpdf.text.FontFactory;
import com.itextpdf.text.pdf.BaseFont;
import com.itextpdf.text.pdf.codec.wmf.InputMeta;
import com.itextpdf.text.pdf.codec.wmf.MetaObject;
import com.itextpdf.text.pdf.codec.wmf.MetaState;
import java.io.UnsupportedEncodingException;

public class MetaFont
extends MetaObject {
    static final int BOLDTHRESHOLD = 600;
    static final int DEFAULT_PITCH = 0;
    static final int ETO_CLIPPED = 4;
    static final int ETO_OPAQUE = 2;
    static final int FF_DECORATIVE = 5;
    static final int FF_DONTCARE = 0;
    static final int FF_MODERN = 3;
    static final int FF_ROMAN = 1;
    static final int FF_SCRIPT = 4;
    static final int FF_SWISS = 2;
    static final int FIXED_PITCH = 1;
    static final int MARKER_BOLD = 1;
    static final int MARKER_COURIER = 0;
    static final int MARKER_HELVETICA = 4;
    static final int MARKER_ITALIC = 2;
    static final int MARKER_SYMBOL = 12;
    static final int MARKER_TIMES = 8;
    static final int VARIABLE_PITCH = 2;
    static final String[] fontNames = new String[]{"Courier", "Courier-Bold", "Courier-Oblique", "Courier-BoldOblique", "Helvetica", "Helvetica-Bold", "Helvetica-Oblique", "Helvetica-BoldOblique", "Times-Roman", "Times-Bold", "Times-Italic", "Times-BoldItalic", "Symbol", "ZapfDingbats"};
    static final int nameSize = 32;
    float angle;
    int bold;
    int charset;
    String faceName = "arial";
    BaseFont font = null;
    int height;
    int italic;
    int pitchAndFamily;
    boolean strikeout;
    boolean underline;

    public MetaFont() {
        this.type = 3;
    }

    public float getAngle() {
        return this.angle;
    }

    public BaseFont getFont() {
        String string2;
        block12 : {
            block9 : {
                block10 : {
                    block13 : {
                        int n2;
                        block14 : {
                            block11 : {
                                if (this.font != null) {
                                    return this.font;
                                }
                                string2 = this.faceName;
                                n2 = this.italic != 0 ? 2 : 0;
                                int n3 = this.bold != 0 ? 1 : 0;
                                this.font = FontFactory.getFont(string2, "Cp1252", true, 10.0f, n2 | n3).getBaseFont();
                                if (this.font != null) {
                                    return this.font;
                                }
                                if (this.faceName.indexOf("courier") != -1 || this.faceName.indexOf("terminal") != -1 || this.faceName.indexOf("fixedsys") != -1) break block9;
                                if (this.faceName.indexOf("ms sans serif") != -1 || this.faceName.indexOf("arial") != -1 || this.faceName.indexOf("system") != -1) break block10;
                                if (this.faceName.indexOf("arial black") == -1) break block11;
                                string2 = fontNames[this.italic + 4 + 1];
                                break block12;
                            }
                            if (this.faceName.indexOf("times") != -1 || this.faceName.indexOf("ms serif") != -1 || this.faceName.indexOf("roman") != -1) break block13;
                            if (this.faceName.indexOf("symbol") == -1) break block14;
                            string2 = fontNames[12];
                            break block12;
                        }
                        n2 = this.pitchAndFamily;
                        switch (this.pitchAndFamily >> 4 & 7) {
                            default: {
                                if ((n2 & 3) == 1) break;
                                string2 = fontNames[this.italic + 4 + this.bold];
                                break block12;
                            }
                            case 3: {
                                string2 = fontNames[this.italic + 0 + this.bold];
                                break block12;
                            }
                            case 2: 
                            case 4: 
                            case 5: {
                                string2 = fontNames[this.italic + 4 + this.bold];
                                break block12;
                            }
                            case 1: {
                                string2 = fontNames[this.italic + 8 + this.bold];
                                break block12;
                            }
                        }
                        string2 = fontNames[this.italic + 0 + this.bold];
                        break block12;
                    }
                    string2 = fontNames[this.italic + 8 + this.bold];
                    break block12;
                }
                string2 = fontNames[this.italic + 4 + this.bold];
                break block12;
            }
            string2 = fontNames[this.italic + 0 + this.bold];
        }
        try {
            this.font = BaseFont.createFont(string2, "Cp1252", false);
            return this.font;
        }
        catch (Exception exception) {
            throw new ExceptionConverter(exception);
        }
    }

    public float getFontSize(MetaState metaState) {
        return Math.abs(metaState.transformY(this.height) - metaState.transformY(0)) * Document.wmfFontCorrection;
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public void init(InputMeta inputMeta) {
        block3 : {
            this.height = Math.abs(inputMeta.readShort());
            int n2 = 2;
            inputMeta.skip(2);
            this.angle = (float)((double)inputMeta.readShort() / 1800.0 * 3.141592653589793);
            inputMeta.skip(2);
            int n3 = inputMeta.readShort();
            boolean bl2 = true;
            n3 = n3 >= 600 ? 1 : 0;
            this.bold = n3;
            n3 = inputMeta.readByte() != 0 ? n2 : 0;
            this.italic = n3;
            boolean bl3 = inputMeta.readByte() != 0;
            this.underline = bl3;
            bl3 = inputMeta.readByte() != 0 ? bl2 : false;
            this.strikeout = bl3;
            this.charset = inputMeta.readByte();
            inputMeta.skip(3);
            this.pitchAndFamily = inputMeta.readByte();
            byte[] arrby = new byte[32];
            for (n3 = 0; n3 < 32 && (n2 = inputMeta.readByte()) != 0; ++n3) {
                arrby[n3] = (byte)n2;
            }
            try {
                this.faceName = new String(arrby, 0, n3, "Cp1252");
                break block3;
            }
            catch (UnsupportedEncodingException unsupportedEncodingException) {}
            this.faceName = new String(arrby, 0, n3);
        }
        this.faceName = this.faceName.toLowerCase();
    }

    public boolean isStrikeout() {
        return this.strikeout;
    }

    public boolean isUnderline() {
        return this.underline;
    }
}

