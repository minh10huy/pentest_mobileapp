/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf.codec;

import java.io.OutputStream;

public class BitFile {
    int bitsLeft_;
    boolean blocks_ = false;
    byte[] buffer_;
    int index_;
    OutputStream output_;

    public BitFile(OutputStream outputStream, boolean bl2) {
        this.output_ = outputStream;
        this.blocks_ = bl2;
        this.buffer_ = new byte[256];
        this.index_ = 0;
        this.bitsLeft_ = 8;
    }

    public void flush() {
        int n2 = this.index_;
        int n3 = this.bitsLeft_ == 8 ? 0 : 1;
        if ((n3 = n2 + n3) > 0) {
            if (this.blocks_) {
                this.output_.write(n3);
            }
            this.output_.write(this.buffer_, 0, n3);
            this.buffer_[0] = 0;
            this.index_ = 0;
            this.bitsLeft_ = 8;
        }
    }

    /*
     * Enabled aggressive block sorting
     */
    public void writeBits(int n2, int n3) {
        int n4 = n3;
        do {
            int n5;
            byte[] arrby;
            if (this.index_ == 254 && this.bitsLeft_ == 0 || this.index_ > 254) {
                if (this.blocks_) {
                    this.output_.write(255);
                }
                this.output_.write(this.buffer_, 0, 255);
                this.buffer_[0] = 0;
                this.index_ = 0;
                this.bitsLeft_ = 8;
            }
            if (n4 <= this.bitsLeft_) {
                if (this.blocks_) {
                    arrby = this.buffer_;
                    n3 = this.index_;
                    n5 = arrby[n3];
                    arrby[n3] = (byte)((n2 & (1 << n4) - 1) << 8 - this.bitsLeft_ | n5);
                } else {
                    arrby = this.buffer_;
                    n3 = this.index_;
                    n5 = arrby[n3];
                    arrby[n3] = (byte)((n2 & (1 << n4) - 1) << this.bitsLeft_ - n4 | n5);
                }
                this.bitsLeft_ -= n4;
                n3 = 0;
                n4 = n2;
            } else {
                if (this.blocks_) {
                    arrby = this.buffer_;
                    n3 = this.index_;
                    arrby[n3] = (byte)(arrby[n3] | ((1 << this.bitsLeft_) - 1 & n2) << 8 - this.bitsLeft_);
                    n3 = this.bitsLeft_;
                    n3 = n2 >> this.bitsLeft_;
                    n2 = n4 - this.bitsLeft_;
                    arrby = this.buffer_;
                    this.index_ = n4 = this.index_ + 1;
                    arrby[n4] = 0;
                } else {
                    n3 = this.bitsLeft_;
                    n5 = this.bitsLeft_;
                    arrby = this.buffer_;
                    int n6 = this.index_;
                    arrby[n6] = (byte)(n2 >>> n4 - n3 & (1 << n5) - 1 | arrby[n6]);
                    n3 = this.bitsLeft_;
                    arrby = this.buffer_;
                    this.index_ = n3 = this.index_ + 1;
                    arrby[n3] = 0;
                    n3 = n2;
                    n2 = n4 -= this.bitsLeft_;
                }
                this.bitsLeft_ = 8;
                n4 = n3;
                n3 = n2;
            }
            n2 = n4;
            n4 = n3;
        } while (n3 != 0);
    }
}

