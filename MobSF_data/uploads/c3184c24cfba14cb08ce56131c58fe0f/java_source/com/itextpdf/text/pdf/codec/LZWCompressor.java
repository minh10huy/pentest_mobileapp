/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf.codec;

import com.itextpdf.text.pdf.codec.BitFile;
import com.itextpdf.text.pdf.codec.LZWStringTable;
import java.io.OutputStream;

public class LZWCompressor {
    BitFile bf_;
    int clearCode_;
    int codeSize_;
    int endOfInfo_;
    int limit_;
    LZWStringTable lzss_;
    int numBits_;
    short prefix_;
    boolean tiffFudge_;

    public LZWCompressor(OutputStream outputStream, int n2, boolean bl2) {
        this.bf_ = new BitFile(outputStream, bl2 ^ true);
        this.codeSize_ = n2;
        this.tiffFudge_ = bl2;
        this.clearCode_ = 1 << this.codeSize_;
        this.endOfInfo_ = this.clearCode_ + 1;
        this.numBits_ = this.codeSize_ + 1;
        this.limit_ = (1 << this.numBits_) - 1;
        if (this.tiffFudge_) {
            --this.limit_;
        }
        this.prefix_ = (short)-1;
        this.lzss_ = new LZWStringTable();
        this.lzss_.ClearTable(this.codeSize_);
        this.bf_.writeBits(this.clearCode_, this.numBits_);
    }

    /*
     * Enabled aggressive block sorting
     */
    public void compress(byte[] arrby, int n2, int n3) {
        int n4 = n2;
        int n5;
        while ((n5 = n4) < n3 + n2) {
            byte by2 = arrby[n5];
            short s2 = this.lzss_.FindCharString(this.prefix_, by2);
            if (s2 != -1) {
                this.prefix_ = s2;
            } else {
                this.bf_.writeBits(this.prefix_, this.numBits_);
                if (this.lzss_.AddCharString(this.prefix_, by2) > this.limit_) {
                    if (this.numBits_ == 12) {
                        this.bf_.writeBits(this.clearCode_, this.numBits_);
                        this.lzss_.ClearTable(this.codeSize_);
                        n4 = this.codeSize_;
                    } else {
                        n4 = this.numBits_;
                    }
                    this.numBits_ = n4 + 1;
                    this.limit_ = (1 << this.numBits_) - 1;
                    if (this.tiffFudge_) {
                        --this.limit_;
                    }
                }
                this.prefix_ = (short)((short)by2 & 255);
            }
            n4 = n5 + 1;
        }
        return;
    }

    public void flush() {
        if (this.prefix_ != -1) {
            this.bf_.writeBits(this.prefix_, this.numBits_);
        }
        this.bf_.writeBits(this.endOfInfo_, this.numBits_);
        this.bf_.flush();
    }
}

