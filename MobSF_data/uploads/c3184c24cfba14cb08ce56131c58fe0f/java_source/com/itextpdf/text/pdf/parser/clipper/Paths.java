/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf.parser.clipper;

import com.itextpdf.text.pdf.parser.clipper.LongRect;
import com.itextpdf.text.pdf.parser.clipper.Path;
import com.itextpdf.text.pdf.parser.clipper.Point;
import com.itextpdf.text.pdf.parser.clipper.PolyNode;
import com.itextpdf.text.pdf.parser.clipper.PolyTree;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

public class Paths
extends ArrayList<Path> {
    private static final long serialVersionUID = 1910552127810480852L;

    public Paths() {
    }

    public Paths(int n2) {
        super(n2);
    }

    public static Paths closedPathsFromPolyTree(PolyTree polyTree) {
        Paths paths = new Paths();
        paths.addPolyNode(polyTree, PolyNode.NodeType.CLOSED);
        return paths;
    }

    public static Paths makePolyTreeToPaths(PolyTree polyTree) {
        Paths paths = new Paths();
        paths.addPolyNode(polyTree, PolyNode.NodeType.ANY);
        return paths;
    }

    public static Paths openPathsFromPolyTree(PolyTree object) {
        Paths paths = new Paths();
        for (PolyNode polyNode : object.getChilds()) {
            if (!polyNode.isOpen()) continue;
            paths.add(polyNode.getPolygon());
        }
        return paths;
    }

    public void addPolyNode(PolyNode object, PolyNode.NodeType nodeType) {
        int n2 = .$SwitchMap$com$itextpdf$text$pdf$parser$clipper$PolyNode$NodeType[nodeType.ordinal()];
        boolean bl2 = true;
        switch (n2) {
            default: {
                break;
            }
            case 2: {
                bl2 = true ^ object.isOpen();
                break;
            }
            case 1: {
                return;
            }
        }
        if (object.getPolygon().size() > 0 && bl2) {
            this.add(object.getPolygon());
        }
        object = object.getChilds().iterator();
        while (object.hasNext()) {
            this.addPolyNode((PolyNode)object.next(), nodeType);
        }
    }

    public Paths cleanPolygons() {
        return this.cleanPolygons(1.415);
    }

    public Paths cleanPolygons(double d2) {
        Paths paths = new Paths(this.size());
        for (int i2 = 0; i2 < this.size(); ++i2) {
            paths.add(((Path)this.get(i2)).cleanPolygon(d2));
        }
        return paths;
    }

    public LongRect getBounds() {
        int n2;
        int n3 = this.size();
        LongRect longRect = new LongRect();
        for (n2 = 0; n2 < n3 && ((Path)this.get(n2)).isEmpty(); ++n2) {
        }
        if (n2 == n3) {
            return longRect;
        }
        longRect.right = longRect.left = ((Point.LongPoint)((Path)this.get(n2)).get(0)).getX();
        longRect.bottom = longRect.top = ((Point.LongPoint)((Path)this.get(n2)).get(0)).getY();
        while (n2 < n3) {
            for (int i2 = 0; i2 < ((Path)this.get(n2)).size(); ++i2) {
                if (((Point.LongPoint)((Path)this.get(n2)).get(i2)).getX() < longRect.left) {
                    longRect.left = ((Point.LongPoint)((Path)this.get(n2)).get(i2)).getX();
                } else if (((Point.LongPoint)((Path)this.get(n2)).get(i2)).getX() > longRect.right) {
                    longRect.right = ((Point.LongPoint)((Path)this.get(n2)).get(i2)).getX();
                }
                if (((Point.LongPoint)((Path)this.get(n2)).get(i2)).getY() < longRect.top) {
                    longRect.top = ((Point.LongPoint)((Path)this.get(n2)).get(i2)).getY();
                    continue;
                }
                if (((Point.LongPoint)((Path)this.get(n2)).get(i2)).getY() <= longRect.bottom) continue;
                longRect.bottom = ((Point.LongPoint)((Path)this.get(n2)).get(i2)).getY();
            }
            ++n2;
        }
        return longRect;
    }

    public void reversePaths() {
        Iterator iterator = this.iterator();
        while (iterator.hasNext()) {
            ((Path)iterator.next()).reverse();
        }
    }

}

