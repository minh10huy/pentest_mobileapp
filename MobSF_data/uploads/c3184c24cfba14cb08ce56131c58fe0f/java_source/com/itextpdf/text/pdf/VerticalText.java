/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf;

import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chunk;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.error_messages.MessageLocalization;
import com.itextpdf.text.pdf.BaseFont;
import com.itextpdf.text.pdf.PdfAction;
import com.itextpdf.text.pdf.PdfChunk;
import com.itextpdf.text.pdf.PdfContentByte;
import com.itextpdf.text.pdf.PdfFont;
import com.itextpdf.text.pdf.PdfLine;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

public class VerticalText {
    public static final int NO_MORE_COLUMN = 2;
    public static final int NO_MORE_TEXT = 1;
    protected int alignment = 0;
    protected ArrayList<PdfChunk> chunks = new ArrayList();
    private Float curCharSpace = Float.valueOf(0.0f);
    protected int currentChunkMarker = -1;
    protected PdfChunk currentStandbyChunk;
    protected float height;
    protected float leading;
    protected int maxLines;
    protected String splittedChunkText;
    protected float startX;
    protected float startY;
    protected PdfContentByte text;

    public VerticalText(PdfContentByte pdfContentByte) {
        this.text = pdfContentByte;
    }

    public void addText(Chunk chunk) {
        this.chunks.add(new PdfChunk(chunk, null));
    }

    public void addText(Phrase object) {
        for (Chunk chunk : object.getChunks()) {
            this.chunks.add(new PdfChunk(chunk, null));
        }
    }

    protected PdfLine createLine(float f2) {
        if (this.chunks.isEmpty()) {
            return null;
        }
        this.splittedChunkText = null;
        this.currentStandbyChunk = null;
        PdfLine pdfLine = new PdfLine(0.0f, f2, this.alignment, 0.0f);
        int n2 = 0;
        do {
            this.currentChunkMarker = n2;
            if (this.currentChunkMarker >= this.chunks.size()) break;
            PdfChunk pdfChunk = this.chunks.get(this.currentChunkMarker);
            String string2 = pdfChunk.toString();
            this.currentStandbyChunk = pdfLine.add(pdfChunk);
            if (this.currentStandbyChunk != null) {
                this.splittedChunkText = pdfChunk.toString();
                pdfChunk.setValue(string2);
                return pdfLine;
            }
            n2 = this.currentChunkMarker + 1;
        } while (true);
        return pdfLine;
    }

    public int getAlignment() {
        return this.alignment;
    }

    public float getHeight() {
        return this.height;
    }

    public float getLeading() {
        return this.leading;
    }

    public int getMaxLines() {
        return this.maxLines;
    }

    public float getOriginX() {
        return this.startX;
    }

    public float getOriginY() {
        return this.startY;
    }

    public int go() {
        return this.go(false);
    }

    public int go(boolean bl2) {
        block12 : {
            int n2;
            PdfContentByte pdfContentByte;
            block11 : {
                block10 : {
                    pdfContentByte = this.text;
                    n2 = 0;
                    if (pdfContentByte == null) break block10;
                    pdfContentByte = this.text.getDuplicate();
                    break block11;
                }
                if (!bl2) break block12;
                pdfContentByte = null;
            }
            do {
                int n3;
                block15 : {
                    block14 : {
                        block13 : {
                            int n4 = this.maxLines;
                            n3 = 1;
                            if (n4 > 0) break block13;
                            n3 = 2;
                            if (this.chunks.isEmpty()) {
                                n3 = 3;
                            }
                            break block14;
                        }
                        if (!this.chunks.isEmpty()) break block15;
                    }
                    if (n2 != 0) {
                        this.text.endText();
                        this.text.add(pdfContentByte);
                    }
                    return n3;
                }
                PdfLine pdfLine = this.createLine(this.height);
                n3 = n2;
                if (!bl2) {
                    n3 = n2;
                    if (n2 == 0) {
                        this.text.beginText();
                        n3 = 1;
                    }
                }
                this.shortenChunkArray();
                if (!bl2) {
                    this.text.setTextMatrix(this.startX, this.startY - pdfLine.indentLeft());
                    this.writeLine(pdfLine, this.text, pdfContentByte);
                }
                --this.maxLines;
                this.startX -= this.leading;
                n2 = n3;
            } while (true);
        }
        throw new NullPointerException(MessageLocalization.getComposedMessage("verticaltext.go.with.simulate.eq.eq.false.and.text.eq.eq.null", new Object[0]));
    }

    public void setAlignment(int n2) {
        this.alignment = n2;
    }

    public void setHeight(float f2) {
        this.height = f2;
    }

    public void setLeading(float f2) {
        this.leading = f2;
    }

    public void setMaxLines(int n2) {
        this.maxLines = n2;
    }

    public void setOrigin(float f2, float f3) {
        this.startX = f2;
        this.startY = f3;
    }

    public void setVerticalLayout(float f2, float f3, float f4, int n2, float f5) {
        this.startX = f2;
        this.startY = f3;
        this.height = f4;
        this.maxLines = n2;
        this.setLeading(f5);
    }

    protected void shortenChunkArray() {
        if (this.currentChunkMarker < 0) {
            return;
        }
        if (this.currentChunkMarker >= this.chunks.size()) {
            this.chunks.clear();
            return;
        }
        this.chunks.get(this.currentChunkMarker).setValue(this.splittedChunkText);
        this.chunks.set(this.currentChunkMarker, this.currentStandbyChunk);
        for (int i2 = this.currentChunkMarker - 1; i2 >= 0; --i2) {
            this.chunks.remove(i2);
        }
    }

    void writeLine(PdfLine object, PdfContentByte pdfContentByte, PdfContentByte object2) {
        Iterator<PdfChunk> iterator = object.iterator();
        object = null;
        while (iterator.hasNext()) {
            Object object3;
            PdfChunk pdfChunk;
            float f2;
            int n2;
            BaseColor baseColor;
            block14 : {
                int n3;
                block13 : {
                    block12 : {
                        pdfChunk = iterator.next();
                        object2 = object;
                        if (!pdfChunk.isImage()) {
                            object2 = object;
                            if (pdfChunk.font().compareTo((PdfFont)object) != 0) {
                                object2 = pdfChunk.font();
                                pdfContentByte.setFontAndSize(object2.getFont(), object2.size());
                            }
                        }
                        object = (Object[])pdfChunk.getAttribute("TEXTRENDERMODE");
                        baseColor = pdfChunk.color();
                        if (object == null) break block12;
                        n3 = (Integer)object[0] & 3;
                        if (n3 != 0) {
                            pdfContentByte.setTextRenderingMode(n3);
                        }
                        if (n3 != 1 && n3 != 2) break block13;
                        float f3 = ((Float)object[1]).floatValue();
                        if (f3 != 1.0f) {
                            pdfContentByte.setLineWidth(f3);
                        }
                        object = object3 = (BaseColor)object[2];
                        if (object3 == null) {
                            object = baseColor;
                        }
                        object3 = object;
                        n2 = n3;
                        f2 = f3;
                        if (object != null) {
                            pdfContentByte.setColorStroke((BaseColor)object);
                            object3 = object;
                            n2 = n3;
                            f2 = f3;
                        }
                        break block14;
                    }
                    n3 = 0;
                }
                object3 = null;
                f2 = 1.0f;
                n2 = n3;
            }
            if ((object = (Float)pdfChunk.getAttribute("CHAR_SPACING")) != null && !this.curCharSpace.equals(object)) {
                this.curCharSpace = Float.valueOf(object.floatValue());
                pdfContentByte.setCharacterSpacing(this.curCharSpace.floatValue());
            }
            if (baseColor != null) {
                pdfContentByte.setColorFill(baseColor);
            }
            pdfContentByte.showText(pdfChunk.toString());
            if (baseColor != null) {
                pdfContentByte.resetRGBColorFill();
            }
            if (n2 != 0) {
                pdfContentByte.setTextRenderingMode(0);
            }
            if (object3 != null) {
                pdfContentByte.resetRGBColorStroke();
            }
            object = object2;
            if (f2 == 1.0f) continue;
            pdfContentByte.setLineWidth(1.0f);
            object = object2;
        }
    }
}

