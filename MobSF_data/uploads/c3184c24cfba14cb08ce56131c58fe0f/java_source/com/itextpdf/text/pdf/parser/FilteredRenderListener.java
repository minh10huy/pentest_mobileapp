/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf.parser;

import com.itextpdf.text.pdf.parser.ImageRenderInfo;
import com.itextpdf.text.pdf.parser.RenderFilter;
import com.itextpdf.text.pdf.parser.RenderListener;
import com.itextpdf.text.pdf.parser.TextRenderInfo;

public class FilteredRenderListener
implements RenderListener {
    private final RenderListener delegate;
    private final RenderFilter[] filters;

    public /* varargs */ FilteredRenderListener(RenderListener renderListener, RenderFilter ... arrrenderFilter) {
        this.delegate = renderListener;
        this.filters = arrrenderFilter;
    }

    @Override
    public void beginTextBlock() {
        this.delegate.beginTextBlock();
    }

    @Override
    public void endTextBlock() {
        this.delegate.endTextBlock();
    }

    @Override
    public void renderImage(ImageRenderInfo imageRenderInfo) {
        RenderFilter[] arrrenderFilter = this.filters;
        int n2 = arrrenderFilter.length;
        for (int i2 = 0; i2 < n2; ++i2) {
            if (arrrenderFilter[i2].allowImage(imageRenderInfo)) continue;
            return;
        }
        this.delegate.renderImage(imageRenderInfo);
    }

    @Override
    public void renderText(TextRenderInfo textRenderInfo) {
        RenderFilter[] arrrenderFilter = this.filters;
        int n2 = arrrenderFilter.length;
        for (int i2 = 0; i2 < n2; ++i2) {
            if (arrrenderFilter[i2].allowText(textRenderInfo)) continue;
            return;
        }
        this.delegate.renderText(textRenderInfo);
    }
}

