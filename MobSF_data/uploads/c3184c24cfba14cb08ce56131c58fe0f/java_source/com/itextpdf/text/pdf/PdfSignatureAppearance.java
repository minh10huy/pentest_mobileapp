/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf;

import com.itextpdf.text.Chunk;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.Image;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.Version;
import com.itextpdf.text.error_messages.MessageLocalization;
import com.itextpdf.text.io.RASInputStream;
import com.itextpdf.text.io.RandomAccessSource;
import com.itextpdf.text.io.RandomAccessSourceFactory;
import com.itextpdf.text.pdf.AcroFields;
import com.itextpdf.text.pdf.ByteBuffer;
import com.itextpdf.text.pdf.ColumnText;
import com.itextpdf.text.pdf.PdfAnnotation;
import com.itextpdf.text.pdf.PdfArray;
import com.itextpdf.text.pdf.PdfContentByte;
import com.itextpdf.text.pdf.PdfDeveloperExtension;
import com.itextpdf.text.pdf.PdfDictionary;
import com.itextpdf.text.pdf.PdfFormField;
import com.itextpdf.text.pdf.PdfIndirectObject;
import com.itextpdf.text.pdf.PdfIndirectReference;
import com.itextpdf.text.pdf.PdfLiteral;
import com.itextpdf.text.pdf.PdfName;
import com.itextpdf.text.pdf.PdfNumber;
import com.itextpdf.text.pdf.PdfObject;
import com.itextpdf.text.pdf.PdfReader;
import com.itextpdf.text.pdf.PdfSigLockDictionary;
import com.itextpdf.text.pdf.PdfStamper;
import com.itextpdf.text.pdf.PdfStamperImp;
import com.itextpdf.text.pdf.PdfString;
import com.itextpdf.text.pdf.PdfTemplate;
import com.itextpdf.text.pdf.PdfWriter;
import com.itextpdf.text.pdf.internal.PdfVersionImp;
import com.itextpdf.text.pdf.security.CertificateInfo;
import java.io.EOFException;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.RandomAccessFile;
import java.security.cert.Certificate;
import java.security.cert.X509Certificate;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;

public class PdfSignatureAppearance {
    public static final int CERTIFIED_FORM_FILLING = 2;
    public static final int CERTIFIED_FORM_FILLING_AND_ANNOTATIONS = 3;
    public static final int CERTIFIED_NO_CHANGES_ALLOWED = 1;
    private static final float MARGIN = 2.0f;
    public static final int NOT_CERTIFIED = 0;
    private static final float TOP_SECTION = 0.3f;
    public static final String questionMark = "% DSUnknown\nq\n1 G\n1 g\n0.1 0 0 0.1 9 0 cm\n0 J 0 j 4 M []0 d\n1 i \n0 g\n313 292 m\n313 404 325 453 432 529 c\n478 561 504 597 504 645 c\n504 736 440 760 391 760 c\n286 760 271 681 265 626 c\n265 625 l\n100 625 l\n100 828 253 898 381 898 c\n451 898 679 878 679 650 c\n679 555 628 499 538 435 c\n488 399 467 376 467 292 c\n313 292 l\nh\n308 214 170 -164 re\nf\n0.44 G\n1.2 w\n1 1 0.4 rg\n287 318 m\n287 430 299 479 406 555 c\n451 587 478 623 478 671 c\n478 762 414 786 365 786 c\n260 786 245 707 239 652 c\n239 651 l\n74 651 l\n74 854 227 924 355 924 c\n425 924 653 904 653 676 c\n653 581 602 525 512 461 c\n462 425 441 402 441 318 c\n287 318 l\nh\n282 240 170 -164 re\nB\nQ\n";
    private boolean acro6Layers = true;
    private PdfTemplate[] app = new PdfTemplate[5];
    private byte[] bout;
    private int boutLen;
    private int certificationLevel = 0;
    private String contact;
    private PdfDictionary cryptoDictionary;
    private HashMap<PdfName, PdfLiteral> exclusionLocations;
    private PdfSigLockDictionary fieldLock;
    private String fieldName;
    private PdfTemplate frm;
    private Image image;
    private float imageScale;
    private Font layer2Font;
    private String layer2Text;
    private String layer4Text;
    private String location;
    private String locationCaption = "Location: ";
    private OutputStream originalout;
    private int page = 1;
    private Rectangle pageRect;
    private boolean preClosed = false;
    private RandomAccessFile raf;
    private long[] range;
    private String reason;
    private String reasonCaption = "Reason: ";
    private Rectangle rect;
    private RenderingMode renderingMode = RenderingMode.DESCRIPTION;
    private boolean reuseAppearance = false;
    private int runDirection = 1;
    private Certificate signCertificate;
    private Calendar signDate;
    private String signatureCreator;
    private SignatureEvent signatureEvent;
    private Image signatureGraphic = null;
    private ByteBuffer sigout;
    private PdfStamper stamper;
    private File tempFile;
    private PdfStamperImp writer;

    PdfSignatureAppearance(PdfStamperImp pdfStamperImp) {
        this.writer = pdfStamperImp;
        this.signDate = new GregorianCalendar();
        this.fieldName = this.getNewSigName();
        this.signatureCreator = Version.getInstance().getVersion();
    }

    private void addDocMDP(PdfDictionary pdfDictionary) {
        PdfDictionary pdfDictionary2 = new PdfDictionary();
        PdfObject pdfObject = new PdfDictionary();
        pdfObject.put(PdfName.P, new PdfNumber(this.certificationLevel));
        pdfObject.put(PdfName.V, new PdfName("1.2"));
        pdfObject.put(PdfName.TYPE, PdfName.TRANSFORMPARAMS);
        pdfDictionary2.put(PdfName.TRANSFORMMETHOD, PdfName.DOCMDP);
        pdfDictionary2.put(PdfName.TYPE, PdfName.SIGREF);
        pdfDictionary2.put(PdfName.TRANSFORMPARAMS, pdfObject);
        if (this.writer.getPdfVersion().getVersion() < '6') {
            pdfDictionary2.put(new PdfName("DigestValue"), new PdfString("aa"));
            pdfObject = new PdfArray();
            pdfObject.add(new PdfNumber(0));
            pdfObject.add(new PdfNumber(0));
            pdfDictionary2.put(new PdfName("DigestLocation"), pdfObject);
            pdfDictionary2.put(new PdfName("DigestMethod"), new PdfName("MD5"));
        }
        pdfDictionary2.put(PdfName.DATA, this.writer.reader.getTrailer().get(PdfName.ROOT));
        pdfObject = new PdfArray();
        pdfObject.add(pdfDictionary2);
        pdfDictionary.put(PdfName.REFERENCE, pdfObject);
    }

    private void addFieldMDP(PdfDictionary pdfDictionary, PdfDictionary pdfObject) {
        PdfDictionary pdfDictionary2 = new PdfDictionary();
        PdfObject pdfObject2 = new PdfDictionary();
        pdfObject2.putAll((PdfDictionary)pdfObject);
        pdfObject2.put(PdfName.TYPE, PdfName.TRANSFORMPARAMS);
        pdfObject2.put(PdfName.V, new PdfName("1.2"));
        pdfDictionary2.put(PdfName.TRANSFORMMETHOD, PdfName.FIELDMDP);
        pdfDictionary2.put(PdfName.TYPE, PdfName.SIGREF);
        pdfDictionary2.put(PdfName.TRANSFORMPARAMS, pdfObject2);
        pdfDictionary2.put(new PdfName("DigestValue"), new PdfString("aa"));
        pdfObject = new PdfArray();
        pdfObject.add(new PdfNumber(0));
        pdfObject.add(new PdfNumber(0));
        pdfDictionary2.put(new PdfName("DigestLocation"), pdfObject);
        pdfDictionary2.put(new PdfName("DigestMethod"), new PdfName("MD5"));
        pdfDictionary2.put(PdfName.DATA, this.writer.reader.getTrailer().get(PdfName.ROOT));
        pdfObject2 = pdfDictionary.getAsArray(PdfName.REFERENCE);
        pdfObject = pdfObject2;
        if (pdfObject2 == null) {
            pdfObject = new PdfArray();
        }
        pdfObject.add(pdfDictionary2);
        pdfDictionary.put(PdfName.REFERENCE, pdfObject);
    }

    private void createBlankN0() {
        PdfTemplate pdfTemplate;
        PdfTemplate[] arrpdfTemplate = this.app;
        arrpdfTemplate[0] = pdfTemplate = new PdfTemplate(this.writer);
        pdfTemplate.setBoundingBox(new Rectangle(100.0f, 100.0f));
        this.writer.addDirectTemplateSimple(pdfTemplate, new PdfName("n0"));
        pdfTemplate.setLiteral("% DSBlank\n");
    }

    private RandomAccessSource getUnderlyingSource() {
        RandomAccessSourceFactory randomAccessSourceFactory = new RandomAccessSourceFactory();
        if (this.raf == null) {
            return randomAccessSourceFactory.createSource(this.bout);
        }
        return randomAccessSourceFactory.createSource(this.raf);
    }

    public void addDeveloperExtension(PdfDeveloperExtension pdfDeveloperExtension) {
        this.writer.addDeveloperExtension(pdfDeveloperExtension);
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    public void close(PdfDictionary var1_1) {
        block25 : {
            if (this.preClosed == false) throw new DocumentException(MessageLocalization.getComposedMessage("preclose.must.be.called.first", new Object[0]));
            var5_6 = new ByteBuffer();
            for (PdfName var7_11 : var1_1.getKeys()) {
                var8_12 = var1_1.get(var7_11);
                var9_13 = this.exclusionLocations.get(var7_11);
                if (var9_13 == null) {
                    throw new IllegalArgumentException(MessageLocalization.getComposedMessage("the.key.1.didn.t.reserve.space.in.preclose", new Object[]{var7_11.toString()}));
                }
                var5_6.reset();
                var8_12.toPdf(null, var5_6);
                if (var5_6.size() > var9_13.getPosLength()) {
                    throw new IllegalArgumentException(MessageLocalization.getComposedMessage("the.key.1.is.too.big.is.2.reserved.3", new Object[]{var7_11.toString(), String.valueOf(var5_6.size()), String.valueOf(var9_13.getPosLength())}));
                }
                if (this.tempFile == null) {
                    System.arraycopy(var5_6.getBuffer(), 0, this.bout, (int)var9_13.getPosition(), var5_6.size());
                    continue;
                }
                this.raf.seek(var9_13.getPosition());
                this.raf.write(var5_6.getBuffer(), 0, var5_6.size());
            }
            if (var1_1.size() != this.exclusionLocations.size()) throw new IllegalArgumentException(MessageLocalization.getComposedMessage("the.update.dictionary.has.less.keys.than.required", new Object[0]));
            if (this.tempFile == null) {
                this.originalout.write(this.bout, 0, this.boutLen);
                break block25;
            }
            if (this.originalout == null) break block25;
            this.raf.seek(0L);
            var1_1 = new byte[8192];
            for (var3_14 = this.raf.length(); var3_14 > 0L; var3_14 -= (long)var2_15) {
                var2_15 = this.raf.read(var1_1, 0, (int)Math.min((long)var1_1.length, var3_14));
                if (var2_15 < 0) throw new EOFException(MessageLocalization.getComposedMessage("unexpected.eof", new Object[0]));
                this.originalout.write(var1_1, 0, var2_15);
            }
        }
        this.writer.reader.close();
        if (this.tempFile == null) ** GOTO lbl50
        this.raf.close();
        ** GOTO lbl45
        {
            catch (Exception var1_3) {}
        }
        catch (Throwable var1_2) {
            block28 : {
                block26 : {
                    this.writer.reader.close();
                    if (this.tempFile != null) {
                        this.raf.close();
                        break block26;
                    }
                    break block28;
lbl45: // 2 sources:
                    if (this.originalout != null) {
                        try {
                            this.tempFile.delete();
                        }
                        catch (Exception var1_4) {}
                    }
                    if (this.originalout == null) return;
                    try {
                        this.originalout.close();
                        return;
                    }
                    catch (Exception var1_5) {
                        return;
                    }
                    catch (Exception var5_7) {}
                }
                if (this.originalout != null) {
                    try {
                        this.tempFile.delete();
                    }
                    catch (Exception var5_8) {}
                }
            }
            if (this.originalout == null) throw var1_2;
            try {
                this.originalout.close();
            }
            catch (Exception var5_9) {
                throw var1_2;
            }
            throw var1_2;
        }
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Lifted jumps to return sites
     */
    public PdfTemplate getAppearance() {
        block45 : {
            block49 : {
                block47 : {
                    block48 : {
                        block46 : {
                            var12_1 = this.isInvisible();
                            var15_2 = null;
                            if (var12_1) {
                                var13_3 = new PdfTemplate(this.writer);
                                var13_3.setBoundingBox(new Rectangle(0.0f, 0.0f));
                                this.writer.addDirectTemplateSimple(var13_3, null);
                                return var13_3;
                            }
                            if (this.app[0] == null && !this.reuseAppearance) {
                                this.createBlankN0();
                            }
                            if (this.app[1] == null && !this.acro6Layers) {
                                var13_4 = this.app;
                                var14_5 = new PdfTemplate(this.writer);
                                var13_4[1] = var14_5;
                                var14_5.setBoundingBox(new Rectangle(100.0f, 100.0f));
                                this.writer.addDirectTemplateSimple((PdfTemplate)var14_5, new PdfName("n1"));
                                var14_5.setLiteral("% DSUnknown\nq\n1 G\n1 g\n0.1 0 0 0.1 9 0 cm\n0 J 0 j 4 M []0 d\n1 i \n0 g\n313 292 m\n313 404 325 453 432 529 c\n478 561 504 597 504 645 c\n504 736 440 760 391 760 c\n286 760 271 681 265 626 c\n265 625 l\n100 625 l\n100 828 253 898 381 898 c\n451 898 679 878 679 650 c\n679 555 628 499 538 435 c\n488 399 467 376 467 292 c\n313 292 l\nh\n308 214 170 -164 re\nf\n0.44 G\n1.2 w\n1 1 0.4 rg\n287 318 m\n287 430 299 479 406 555 c\n451 587 478 623 478 671 c\n478 762 414 786 365 786 c\n260 786 245 707 239 652 c\n239 651 l\n74 651 l\n74 854 227 924 355 924 c\n425 924 653 904 653 676 c\n653 581 602 525 512 461 c\n462 425 441 402 441 318 c\n287 318 l\nh\n282 240 170 -164 re\nB\nQ\n");
                            }
                            if (this.app[2] == null) {
                                if (this.layer2Text == null) {
                                    var16_6 = new StringBuilder();
                                    var16_6.append("Digitally signed by ");
                                    var14_5 = CertificateInfo.getSubjectFields((X509Certificate)this.signCertificate);
                                    if (var14_5 != null) {
                                        var13_4 = var14_5.getField("CN");
                                        if (var13_4 == null) {
                                            var13_4 = var14_5.getField("E");
                                        }
                                    } else {
                                        var13_4 = null;
                                    }
                                    var14_5 = var13_4;
                                    if (var13_4 == null) {
                                        var14_5 = "";
                                    }
                                    var16_6.append((String)var14_5);
                                    var16_6.append('\n');
                                    var13_4 = new SimpleDateFormat("yyyy.MM.dd HH:mm:ss z");
                                    var16_6.append("Date: ");
                                    var16_6.append(var13_4.format(this.signDate.getTime()));
                                    if (this.reason != null) {
                                        var16_6.append('\n');
                                        var16_6.append(this.reasonCaption);
                                        var16_6.append(this.reason);
                                    }
                                    if (this.location != null) {
                                        var16_6.append('\n');
                                        var16_6.append(this.locationCaption);
                                        var16_6.append(this.location);
                                    }
                                    var16_6 = var16_6.toString();
                                } else {
                                    var16_6 = this.layer2Text;
                                }
                                var13_4 = this.app;
                                var13_4[2] = var19_7 = new PdfTemplate(this.writer);
                                var19_7.setBoundingBox(this.rect);
                                this.writer.addDirectTemplateSimple(var19_7, new PdfName("n2"));
                                if (this.image != null) {
                                    if (this.imageScale == 0.0f) {
                                        var13_4 = this.image;
                                        var1_8 = this.rect.getWidth();
                                        var2_9 = this.rect.getHeight();
                                        var3_10 = 0.0f;
                                        var4_11 = 0.0f;
                                    } else {
                                        var1_8 = this.imageScale;
                                        if (this.imageScale < 0.0f) {
                                            var1_8 = Math.min(this.rect.getWidth() / this.image.getWidth(), this.rect.getHeight() / this.image.getHeight());
                                        }
                                        var2_9 = this.image.getWidth() * var1_8;
                                        var5_12 = this.image.getHeight() * var1_8;
                                        var3_10 = (this.rect.getWidth() - var2_9) / 2.0f;
                                        var4_11 = (this.rect.getHeight() - var5_12) / 2.0f;
                                        var13_4 = this.image;
                                        var1_8 = var2_9;
                                        var2_9 = var5_12;
                                    }
                                    var19_7.addImage((Image)var13_4, var1_8, 0.0f, 0.0f, var2_9, var3_10, var4_11);
                                }
                                var17_13 = this.layer2Font == null ? new Font() : new Font(this.layer2Font);
                                var2_9 = var17_13.getSize();
                                if (this.renderingMode != RenderingMode.NAME_AND_DESCRIPTION && (this.renderingMode != RenderingMode.GRAPHIC_AND_DESCRIPTION || this.signatureGraphic == null)) {
                                    if (this.renderingMode == RenderingMode.GRAPHIC) {
                                        if (this.signatureGraphic == null) throw new IllegalStateException(MessageLocalization.getComposedMessage("a.signature.image.should.be.present.when.rendering.mode.is.graphic.only", new Object[0]));
                                        var13_4 = new Rectangle(2.0f, 2.0f, this.rect.getWidth() - 2.0f, this.rect.getHeight() - 2.0f);
                                        var14_5 = null;
                                    } else {
                                        var14_5 = new Rectangle(2.0f, 2.0f, this.rect.getWidth() - 2.0f, this.rect.getHeight() * 0.7f - 2.0f);
                                        var13_4 = var15_2;
                                    }
                                } else {
                                    var13_4 = new Rectangle(2.0f, 2.0f, this.rect.getWidth() / 2.0f - 2.0f, this.rect.getHeight() - 2.0f);
                                    var14_5 = new Rectangle(this.rect.getWidth() / 2.0f + 1.0f, 2.0f, this.rect.getWidth() - 1.0f, this.rect.getHeight() - 2.0f);
                                    if (this.rect.getHeight() > this.rect.getWidth()) {
                                        var13_4 = new Rectangle(2.0f, this.rect.getHeight() / 2.0f, this.rect.getWidth() - 2.0f, this.rect.getHeight());
                                        var14_5 = new Rectangle(2.0f, 2.0f, this.rect.getWidth() - 2.0f, this.rect.getHeight() / 2.0f - 2.0f);
                                    }
                                }
                                switch (.$SwitchMap$com$itextpdf$text$pdf$PdfSignatureAppearance$RenderingMode[this.renderingMode.ordinal()]) {
                                    default: {
                                        ** break;
                                    }
                                    case 3: {
                                        var15_2 = new ColumnText(var19_7);
                                        var15_2.setRunDirection(this.runDirection);
                                        var15_2.setSimpleColumn(var13_4.getLeft(), var13_4.getBottom(), var13_4.getRight(), var13_4.getTop(), 0.0f, 2);
                                        var18_14 = Image.getInstance(this.signatureGraphic);
                                        var18_14.scaleToFit(var13_4.getWidth(), var13_4.getHeight());
                                        var20_15 = new Paragraph(var13_4.getHeight());
                                        var20_15.add(new Chunk((Image)var18_14, (var13_4.getWidth() - var18_14.getScaledWidth()) / 2.0f, (var13_4.getHeight() - var18_14.getScaledHeight()) / 2.0f, false));
                                        var15_2.addElement(var20_15);
                                        var15_2.go();
                                        ** break;
                                    }
                                    case 2: {
                                        if (this.signatureGraphic == null) throw new IllegalStateException(MessageLocalization.getComposedMessage("a.signature.image.should.be.present.when.rendering.mode.is.graphic.and.description", new Object[0]));
                                        var15_2 = new ColumnText(var19_7);
                                        var15_2.setRunDirection(this.runDirection);
                                        var15_2.setSimpleColumn(var13_4.getLeft(), var13_4.getBottom(), var13_4.getRight(), var13_4.getTop(), 0.0f, 2);
                                        var18_14 = Image.getInstance(this.signatureGraphic);
                                        var18_14.scaleToFit(var13_4.getWidth(), var13_4.getHeight());
                                        var20_15 = new Paragraph();
                                        var1_8 = - var18_14.getScaledHeight();
                                        var3_10 = (var13_4.getWidth() - var18_14.getScaledWidth()) / 2.0f;
                                        var4_11 = (var13_4.getHeight() - var18_14.getScaledHeight()) / 2.0f;
                                        var20_15.add(new Chunk((Image)var18_14, var3_10 + 0.0f + (var13_4.getWidth() - var18_14.getScaledWidth()) / 2.0f, var1_8 + 15.0f - var4_11, false));
                                        var15_2.addElement(var20_15);
                                        var15_2.go();
                                        ** break;
                                    }
                                    case 1: 
                                }
                                var15_2 = var18_14 = CertificateInfo.getSubjectFields((X509Certificate)this.signCertificate).getField("CN");
                                if (var18_14 == null) {
                                    var15_2 = CertificateInfo.getSubjectFields((X509Certificate)this.signCertificate).getField("E");
                                }
                                var18_14 = var15_2;
                                if (var15_2 == null) {
                                    var18_14 = "";
                                }
                                var1_8 = ColumnText.fitText(var17_13, (String)var18_14, new Rectangle(var13_4.getWidth() - 2.0f, var13_4.getHeight() - 2.0f), -1.0f, this.runDirection);
                                var15_2 = new ColumnText(var19_7);
                                var15_2.setRunDirection(this.runDirection);
                                var15_2.setSimpleColumn(new Phrase((String)var18_14, var17_13), var13_4.getLeft(), var13_4.getBottom(), var13_4.getRight(), var13_4.getTop(), var1_8, 0);
                                var15_2.go();
lbl127: // 4 sources:
                                if (this.renderingMode != RenderingMode.GRAPHIC) {
                                    var1_8 = var2_9;
                                    if (var2_9 <= 0.0f) {
                                        var1_8 = ColumnText.fitText(var17_13, (String)var16_6, new Rectangle(var14_5.getWidth(), var14_5.getHeight()), 12.0f, this.runDirection);
                                    }
                                    var13_4 = new ColumnText(var19_7);
                                    var13_4.setRunDirection(this.runDirection);
                                    var13_4.setSimpleColumn(new Phrase((String)var16_6, var17_13), var14_5.getLeft(), var14_5.getBottom(), var14_5.getRight(), var14_5.getTop(), var1_8, 0);
                                    var13_4.go();
                                }
                            }
                            if (this.app[3] == null && !this.acro6Layers) {
                                var13_4 = this.app;
                                var13_4[3] = var14_5 = new PdfTemplate(this.writer);
                                var14_5.setBoundingBox(new Rectangle(100.0f, 100.0f));
                                this.writer.addDirectTemplateSimple((PdfTemplate)var14_5, new PdfName("n3"));
                                var14_5.setLiteral("% DSBlank\n");
                            }
                            if (this.app[4] == null && !this.acro6Layers) {
                                var13_4 = this.app;
                                var15_2 = new PdfTemplate(this.writer);
                                var13_4[4] = var15_2;
                                var15_2.setBoundingBox(new Rectangle(0.0f, this.rect.getHeight() * 0.7f, this.rect.getRight(), this.rect.getTop()));
                                this.writer.addDirectTemplateSimple((PdfTemplate)var15_2, new PdfName("n4"));
                                var13_4 = this.layer2Font == null ? new Font() : new Font(this.layer2Font);
                                var14_5 = "Signature Not Verified";
                                if (this.layer4Text != null) {
                                    var14_5 = this.layer4Text;
                                }
                                var1_8 = ColumnText.fitText((Font)var13_4, (String)var14_5, new Rectangle(this.rect.getWidth() - 4.0f, this.rect.getHeight() * 0.3f - 4.0f), 15.0f, this.runDirection);
                                var15_2 = new ColumnText((PdfContentByte)var15_2);
                                var15_2.setRunDirection(this.runDirection);
                                var15_2.setSimpleColumn(new Phrase((String)var14_5, (Font)var13_4), 2.0f, 0.0f, this.rect.getWidth() - 2.0f, this.rect.getHeight() - 2.0f, var1_8, 0);
                                var15_2.go();
                            }
                            var11_16 = this.writer.reader.getPageRotation(this.page);
                            var14_5 = new Rectangle(this.rect);
                            for (var10_17 = var11_16; var10_17 > 0; var14_5 = var14_5.rotate(), var10_17 -= 90) {
                            }
                            if (this.frm != null) break block45;
                            this.frm = new PdfTemplate(this.writer);
                            this.frm.setBoundingBox((Rectangle)var14_5);
                            this.writer.addDirectTemplateSimple(this.frm, new PdfName("FRM"));
                            var1_8 = Math.min(this.rect.getWidth(), this.rect.getHeight()) * 0.9f;
                            var7_18 = (this.rect.getWidth() - var1_8) / 2.0f;
                            var8_19 = (this.rect.getHeight() - var1_8) / 2.0f;
                            var9_20 = var1_8 / 100.0f;
                            if (var11_16 != 90) break block46;
                            var13_4 = this.frm;
                            var1_8 = 0.0f;
                            var2_9 = 1.0f;
                            var3_10 = -1.0f;
                            var4_11 = 0.0f;
                            var5_12 = this.rect.getHeight();
                            var6_21 = 0.0f;
                            break block47;
                        }
                        if (var11_16 != 180) break block48;
                        var13_4 = this.frm;
                        var1_8 = -1.0f;
                        var2_9 = 0.0f;
                        var3_10 = 0.0f;
                        var4_11 = -1.0f;
                        var5_12 = this.rect.getWidth();
                        var6_21 = this.rect.getHeight();
                        break block47;
                    }
                    if (var11_16 != 270) break block49;
                    var13_4 = this.frm;
                    var1_8 = 0.0f;
                    var2_9 = -1.0f;
                    var3_10 = 1.0f;
                    var4_11 = 0.0f;
                    var5_12 = 0.0f;
                    var6_21 = this.rect.getWidth();
                }
                var13_4.concatCTM(var1_8, var2_9, var3_10, var4_11, var5_12, var6_21);
            }
            if (this.reuseAppearance) {
                var13_4 = this.writer.getAcroFields().getNormalAppearance(this.getFieldName());
                if (var13_4 != null) {
                    this.frm.addTemplateReference((PdfIndirectReference)var13_4, new PdfName("n0"), 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f);
                } else {
                    this.reuseAppearance = false;
                    if (this.app[0] == null) {
                        this.createBlankN0();
                    }
                }
            }
            if (!this.reuseAppearance) {
                this.frm.addTemplate(this.app[0], 0.0f, 0.0f);
            }
            if (!this.acro6Layers) {
                this.frm.addTemplate(this.app[1], var9_20, 0.0f, 0.0f, var9_20, var7_18, var8_19);
            }
            this.frm.addTemplate(this.app[2], 0.0f, 0.0f);
            if (!this.acro6Layers) {
                this.frm.addTemplate(this.app[3], var9_20, 0.0f, 0.0f, var9_20, var7_18, var8_19);
                this.frm.addTemplate(this.app[4], 0.0f, 0.0f);
            }
        }
        var13_4 = new PdfTemplate(this.writer);
        var13_4.setBoundingBox((Rectangle)var14_5);
        this.writer.addDirectTemplateSimple((PdfTemplate)var13_4, null);
        var13_4.addTemplate(this.frm, 0.0f, 0.0f);
        return var13_4;
    }

    public Certificate getCertificate() {
        return this.signCertificate;
    }

    public int getCertificationLevel() {
        return this.certificationLevel;
    }

    public String getContact() {
        return this.contact;
    }

    public PdfDictionary getCryptoDictionary() {
        return this.cryptoDictionary;
    }

    public PdfSigLockDictionary getFieldLockDict() {
        return this.fieldLock;
    }

    public String getFieldName() {
        return this.fieldName;
    }

    public Image getImage() {
        return this.image;
    }

    public float getImageScale() {
        return this.imageScale;
    }

    public PdfTemplate getLayer(int n2) {
        if (n2 >= 0 && n2 < this.app.length) {
            Object object;
            Object object2 = object = this.app[n2];
            if (object == null) {
                object = this.app;
                object[n2] = object2 = new PdfTemplate(this.writer);
                object2.setBoundingBox(this.rect);
                object = this.writer;
                StringBuilder stringBuilder = new StringBuilder();
                stringBuilder.append("n");
                stringBuilder.append(n2);
                object.addDirectTemplateSimple((PdfTemplate)object2, new PdfName(stringBuilder.toString()));
            }
            return object2;
        }
        return null;
    }

    public Font getLayer2Font() {
        return this.layer2Font;
    }

    public String getLayer2Text() {
        return this.layer2Text;
    }

    public String getLayer4Text() {
        return this.layer4Text;
    }

    public String getLocation() {
        return this.location;
    }

    public String getNewSigName() {
        Object object = this.writer.getAcroFields();
        boolean bl2 = false;
        int n2 = 0;
        block0 : while (!bl2) {
            CharSequence charSequence = new StringBuilder();
            charSequence.append("Signature");
            charSequence.append(++n2);
            charSequence = charSequence.toString();
            if (object.getFieldItem((String)charSequence) != null) continue;
            Object object2 = new StringBuilder();
            object2.append((String)charSequence);
            object2.append(".");
            charSequence = object2.toString();
            object2 = object.getFields().keySet().iterator();
            while (object2.hasNext()) {
                if (!((String)object2.next()).startsWith((String)charSequence)) continue;
                bl2 = false;
                continue block0;
            }
            bl2 = true;
        }
        object = new StringBuilder();
        object.append("Signature");
        object.append(n2);
        return object.toString();
    }

    OutputStream getOriginalout() {
        return this.originalout;
    }

    public int getPage() {
        return this.page;
    }

    public Rectangle getPageRect() {
        return this.pageRect;
    }

    public InputStream getRangeStream() {
        return new RASInputStream(new RandomAccessSourceFactory().createRanged(this.getUnderlyingSource(), this.range));
    }

    public String getReason() {
        return this.reason;
    }

    public Rectangle getRect() {
        return this.rect;
    }

    public RenderingMode getRenderingMode() {
        return this.renderingMode;
    }

    public int getRunDirection() {
        return this.runDirection;
    }

    public Calendar getSignDate() {
        return this.signDate;
    }

    public String getSignatureCreator() {
        return this.signatureCreator;
    }

    public SignatureEvent getSignatureEvent() {
        return this.signatureEvent;
    }

    public Image getSignatureGraphic() {
        return this.signatureGraphic;
    }

    ByteBuffer getSigout() {
        return this.sigout;
    }

    public PdfStamper getStamper() {
        return this.stamper;
    }

    public File getTempFile() {
        return this.tempFile;
    }

    public PdfTemplate getTopLayer() {
        if (this.frm == null) {
            this.frm = new PdfTemplate(this.writer);
            this.frm.setBoundingBox(this.rect);
            this.writer.addDirectTemplateSimple(this.frm, new PdfName("FRM"));
        }
        return this.frm;
    }

    public boolean isAcro6Layers() {
        return this.acro6Layers;
    }

    public boolean isInvisible() {
        if (this.rect != null && this.rect.getWidth() != 0.0f && this.rect.getHeight() != 0.0f) {
            return false;
        }
        return true;
    }

    public boolean isPreClosed() {
        return this.preClosed;
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public void preClose(HashMap<PdfName, Integer> object) {
        int n2;
        long l2;
        if (this.preClosed) throw new DocumentException(MessageLocalization.getComposedMessage("document.already.pre.closed", new Object[0]));
        this.stamper.mergeVerification();
        this.preClosed = true;
        Object object2 = this.writer.getAcroFields();
        Object object3 = this.getFieldName();
        boolean bl2 = object2.doesSignatureFieldExist((String)object3);
        PdfIndirectReference pdfIndirectReference = this.writer.getPdfIndirectReference();
        PdfStamperImp pdfStamperImp = this.writer;
        int n3 = 3;
        pdfStamperImp.setSigFlags(3);
        if (bl2) {
            PdfDictionary pdfDictionary = object2.getFieldItem((String)object3).getWidget(0);
            this.writer.markUsed(pdfDictionary);
            object2 = pdfDictionary.getAsDict(PdfName.LOCK);
            object3 = object2;
            if (object2 == null) {
                object3 = object2;
                if (this.fieldLock != null) {
                    pdfDictionary.put(PdfName.LOCK, this.writer.addToBody(this.fieldLock).getIndirectReference());
                    object3 = this.fieldLock;
                }
            }
            pdfDictionary.put(PdfName.P, this.writer.getPageReference(this.getPage()));
            pdfDictionary.put(PdfName.V, pdfIndirectReference);
            object2 = PdfReader.getPdfObjectRelease(pdfDictionary.get(PdfName.F));
            n2 = object2 != null && object2.isNumber() ? ((PdfNumber)object2).intValue() : 0;
            pdfDictionary.put(PdfName.F, new PdfNumber(n2 | 128));
            object2 = new PdfDictionary();
            object2.put(PdfName.N, this.getAppearance().getIndirectReference());
            pdfDictionary.put(PdfName.AP, (PdfObject)object2);
        } else {
            PdfFormField pdfFormField = PdfFormField.createSignature(this.writer);
            pdfFormField.setFieldName((String)object3);
            pdfFormField.put(PdfName.V, pdfIndirectReference);
            pdfFormField.setFlags(132);
            if (this.fieldLock != null) {
                pdfFormField.put(PdfName.LOCK, this.writer.addToBody(this.fieldLock).getIndirectReference());
                object3 = this.fieldLock;
            } else {
                object3 = null;
            }
            n2 = this.getPage();
            object2 = !this.isInvisible() ? this.getPageRect() : new Rectangle(0.0f, 0.0f);
            pdfFormField.setWidget((Rectangle)object2, null);
            pdfFormField.setAppearance(PdfAnnotation.APPEARANCE_NORMAL, this.getAppearance());
            pdfFormField.setPage(n2);
            this.writer.addAnnotation((PdfAnnotation)pdfFormField, n2);
        }
        this.exclusionLocations = new HashMap();
        if (this.cryptoDictionary == null) throw new DocumentException("No crypto dictionary defined.");
        object2 = new PdfLiteral(80);
        this.exclusionLocations.put(PdfName.BYTERANGE, (PdfLiteral)object2);
        this.cryptoDictionary.put(PdfName.BYTERANGE, (PdfObject)object2);
        for (Map.Entry entry : object.entrySet()) {
            object2 = (PdfName)entry.getKey();
            PdfLiteral pdfLiteral = new PdfLiteral((Integer)entry.getValue());
            this.exclusionLocations.put((PdfName)object2, pdfLiteral);
            this.cryptoDictionary.put((PdfName)object2, pdfLiteral);
        }
        if (this.certificationLevel > 0) {
            this.addDocMDP(this.cryptoDictionary);
        }
        if (object3 != null) {
            this.addFieldMDP(this.cryptoDictionary, (PdfDictionary)object3);
        }
        if (this.signatureEvent != null) {
            this.signatureEvent.getSignatureDictionary(this.cryptoDictionary);
        }
        this.writer.addToBody((PdfObject)this.cryptoDictionary, pdfIndirectReference, false);
        if (this.certificationLevel > 0) {
            object = new PdfDictionary();
            object.put(new PdfName("DocMDP"), pdfIndirectReference);
            this.writer.reader.getCatalog().put(new PdfName("Perms"), (PdfObject)object);
        }
        this.writer.close(this.stamper.getMoreInfo());
        this.range = new long[this.exclusionLocations.size() * 2];
        long l3 = this.exclusionLocations.get(PdfName.BYTERANGE).getPosition();
        this.exclusionLocations.remove(PdfName.BYTERANGE);
        object = this.exclusionLocations.values().iterator();
        n2 = 1;
        while (object.hasNext()) {
            object3 = (PdfLiteral)object.next();
            l2 = object3.getPosition();
            object2 = this.range;
            int n4 = n2 + 1;
            object2[n2] = l2;
            this.range[n4] = (long)object3.getPosLength() + l2;
            n2 = n4 + 1;
        }
        Arrays.sort(this.range, 1, this.range.length - 1);
        for (n2 = n3; n2 < this.range.length - 2; n2 += 2) {
            object = this.range;
            object[n2] = object[n2] - this.range[n2 - 1];
        }
        if (this.tempFile == null) {
            this.bout = this.sigout.getBuffer();
            this.boutLen = this.sigout.size();
            this.range[this.range.length - 1] = (long)this.boutLen - this.range[this.range.length - 2];
            object = new ByteBuffer();
            object.append('[');
            n2 = 0;
            do {
                if (n2 >= this.range.length) {
                    object.append(']');
                    System.arraycopy(object.getBuffer(), 0, this.bout, (int)l3, object.size());
                    return;
                }
                object.append(this.range[n2]).append(' ');
                ++n2;
            } while (true);
        }
        try {
            this.raf = new RandomAccessFile(this.tempFile, "rw");
            l2 = this.raf.length();
            this.range[this.range.length - 1] = l2 - this.range[this.range.length - 2];
            object = new ByteBuffer();
            object.append('[');
            for (n2 = 0; n2 < this.range.length; ++n2) {
                object.append(this.range[n2]).append(' ');
            }
            object.append(']');
            this.raf.seek(l3);
            this.raf.write(object.getBuffer(), 0, object.size());
            return;
        }
        catch (IOException iOException) {
            try {
                this.raf.close();
            }
            catch (Exception exception) {}
            try {
                this.tempFile.delete();
            }
            catch (Exception exception) {
                throw iOException;
            }
            throw iOException;
        }
    }

    public void setAcro6Layers(boolean bl2) {
        this.acro6Layers = bl2;
    }

    public void setCertificate(Certificate certificate) {
        this.signCertificate = certificate;
    }

    public void setCertificationLevel(int n2) {
        this.certificationLevel = n2;
    }

    public void setContact(String string2) {
        this.contact = string2;
    }

    public void setCryptoDictionary(PdfDictionary pdfDictionary) {
        this.cryptoDictionary = pdfDictionary;
    }

    public void setFieldLockDict(PdfSigLockDictionary pdfSigLockDictionary) {
        this.fieldLock = pdfSigLockDictionary;
    }

    public void setImage(Image image) {
        this.image = image;
    }

    public void setImageScale(float f2) {
        this.imageScale = f2;
    }

    public void setLayer2Font(Font font) {
        this.layer2Font = font;
    }

    public void setLayer2Text(String string2) {
        this.layer2Text = string2;
    }

    public void setLayer4Text(String string2) {
        this.layer4Text = string2;
    }

    public void setLocation(String string2) {
        this.location = string2;
    }

    public void setLocationCaption(String string2) {
        this.locationCaption = string2;
    }

    void setOriginalout(OutputStream outputStream) {
        this.originalout = outputStream;
    }

    public void setReason(String string2) {
        this.reason = string2;
    }

    public void setReasonCaption(String string2) {
        this.reasonCaption = string2;
    }

    public void setRenderingMode(RenderingMode renderingMode) {
        this.renderingMode = renderingMode;
    }

    public void setReuseAppearance(boolean bl2) {
        this.reuseAppearance = bl2;
    }

    public void setRunDirection(int n2) {
        if (n2 >= 0 && n2 <= 3) {
            this.runDirection = n2;
            return;
        }
        throw new RuntimeException(MessageLocalization.getComposedMessage("invalid.run.direction.1", n2));
    }

    public void setSignDate(Calendar calendar) {
        this.signDate = calendar;
    }

    public void setSignatureCreator(String string2) {
        this.signatureCreator = string2;
    }

    public void setSignatureEvent(SignatureEvent signatureEvent) {
        this.signatureEvent = signatureEvent;
    }

    public void setSignatureGraphic(Image image) {
        this.signatureGraphic = image;
    }

    void setSigout(ByteBuffer byteBuffer) {
        this.sigout = byteBuffer;
    }

    void setStamper(PdfStamper pdfStamper) {
        this.stamper = pdfStamper;
    }

    void setTempFile(File file) {
        this.tempFile = file;
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    public void setVisibleSignature(Rectangle rectangle, int n2, String string2) {
        if (string2 != null) {
            if (string2.indexOf(46) >= 0) throw new IllegalArgumentException(MessageLocalization.getComposedMessage("field.names.cannot.contain.a.dot", new Object[0]));
            if (this.writer.getAcroFields().getFieldItem(string2) != null) throw new IllegalArgumentException(MessageLocalization.getComposedMessage("the.field.1.already.exists", string2));
            this.fieldName = string2;
        }
        if (n2 < 1 || n2 > this.writer.reader.getNumberOfPages()) throw new IllegalArgumentException(MessageLocalization.getComposedMessage("invalid.page.number.1", n2));
        this.pageRect = new Rectangle(rectangle);
        this.pageRect.normalize();
        this.rect = new Rectangle(this.pageRect.getWidth(), this.pageRect.getHeight());
        this.page = n2;
    }

    public void setVisibleSignature(String object) {
        block1 : {
            block2 : {
                int n2;
                block5 : {
                    block6 : {
                        block3 : {
                            block4 : {
                                AcroFields.Item item = this.writer.getAcroFields().getFieldItem((String)object);
                                if (item == null) break block1;
                                PdfDictionary pdfDictionary = item.getMerged(0);
                                if (!PdfName.SIG.equals(PdfReader.getPdfObject(pdfDictionary.get(PdfName.FT)))) break block2;
                                this.fieldName = object;
                                object = pdfDictionary.getAsArray(PdfName.RECT);
                                this.pageRect = new Rectangle(object.getAsNumber(0).floatValue(), object.getAsNumber(1).floatValue(), object.getAsNumber(2).floatValue(), object.getAsNumber(3).floatValue());
                                this.pageRect.normalize();
                                this.page = item.getPage(0);
                                n2 = this.writer.reader.getPageRotation(this.page);
                                object = this.writer.reader.getPageSizeWithRotation(this.page);
                                if (n2 == 90) break block3;
                                if (n2 == 180) break block4;
                                if (n2 != 270) break block5;
                                object = new Rectangle(object.getRight() - this.pageRect.getBottom(), this.pageRect.getLeft(), object.getRight() - this.pageRect.getTop(), this.pageRect.getRight());
                                break block6;
                            }
                            object = new Rectangle(object.getRight() - this.pageRect.getLeft(), object.getTop() - this.pageRect.getBottom(), object.getRight() - this.pageRect.getRight(), object.getTop() - this.pageRect.getTop());
                            break block6;
                        }
                        object = new Rectangle(this.pageRect.getBottom(), object.getTop() - this.pageRect.getLeft(), this.pageRect.getTop(), object.getTop() - this.pageRect.getRight());
                    }
                    this.pageRect = object;
                }
                if (n2 != 0) {
                    this.pageRect.normalize();
                }
                this.rect = new Rectangle(this.pageRect.getWidth(), this.pageRect.getHeight());
                return;
            }
            throw new IllegalArgumentException(MessageLocalization.getComposedMessage("the.field.1.is.not.a.signature.field", object));
        }
        throw new IllegalArgumentException(MessageLocalization.getComposedMessage("the.field.1.does.not.exist", object));
    }

    public static enum RenderingMode {
        DESCRIPTION,
        NAME_AND_DESCRIPTION,
        GRAPHIC_AND_DESCRIPTION,
        GRAPHIC;
        

        private RenderingMode() {
        }
    }

    public static interface SignatureEvent {
        public void getSignatureDictionary(PdfDictionary var1);
    }

}

