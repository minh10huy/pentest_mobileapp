/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf.parser;

import com.itextpdf.text.BaseColor;
import com.itextpdf.text.ExceptionConverter;
import com.itextpdf.text.error_messages.MessageLocalization;
import com.itextpdf.text.io.RandomAccessSource;
import com.itextpdf.text.io.RandomAccessSourceFactory;
import com.itextpdf.text.pdf.CMYKColor;
import com.itextpdf.text.pdf.CMapAwareDocumentFont;
import com.itextpdf.text.pdf.GrayColor;
import com.itextpdf.text.pdf.PRIndirectReference;
import com.itextpdf.text.pdf.PRTokeniser;
import com.itextpdf.text.pdf.PdfArray;
import com.itextpdf.text.pdf.PdfContentParser;
import com.itextpdf.text.pdf.PdfDictionary;
import com.itextpdf.text.pdf.PdfIndirectReference;
import com.itextpdf.text.pdf.PdfLiteral;
import com.itextpdf.text.pdf.PdfName;
import com.itextpdf.text.pdf.PdfNumber;
import com.itextpdf.text.pdf.PdfObject;
import com.itextpdf.text.pdf.PdfStream;
import com.itextpdf.text.pdf.PdfString;
import com.itextpdf.text.pdf.RandomAccessFileOrArray;
import com.itextpdf.text.pdf.parser.ContentByteUtils;
import com.itextpdf.text.pdf.parser.ContentOperator;
import com.itextpdf.text.pdf.parser.ExtRenderListener;
import com.itextpdf.text.pdf.parser.GraphicsState;
import com.itextpdf.text.pdf.parser.ImageRenderInfo;
import com.itextpdf.text.pdf.parser.InlineImageInfo;
import com.itextpdf.text.pdf.parser.InlineImageUtils;
import com.itextpdf.text.pdf.parser.LineDashPattern;
import com.itextpdf.text.pdf.parser.MarkedContentInfo;
import com.itextpdf.text.pdf.parser.Matrix;
import com.itextpdf.text.pdf.parser.Path;
import com.itextpdf.text.pdf.parser.PathConstructionRenderInfo;
import com.itextpdf.text.pdf.parser.PathPaintingRenderInfo;
import com.itextpdf.text.pdf.parser.RenderListener;
import com.itextpdf.text.pdf.parser.TextRenderInfo;
import com.itextpdf.text.pdf.parser.XObjectDoHandler;
import java.io.IOException;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.ListIterator;
import java.util.Map;
import java.util.Set;
import java.util.Stack;

public class PdfContentStreamProcessor {
    public static final String DEFAULTOPERATOR = "DefaultOperator";
    private final Map<Integer, CMapAwareDocumentFont> cachedFonts = new HashMap<Integer, CMapAwareDocumentFont>();
    private final Stack<GraphicsState> gsStack = new Stack();
    private final Stack<MarkedContentInfo> markedContentStack = new Stack();
    private final Map<String, ContentOperator> operators;
    private final RenderListener renderListener;
    private ResourceDictionary resources;
    private Matrix textLineMatrix;
    private Matrix textMatrix;
    private final Map<PdfName, XObjectDoHandler> xobjectDoHandlers;

    public PdfContentStreamProcessor(RenderListener renderListener) {
        this.renderListener = renderListener;
        this.operators = new HashMap<String, ContentOperator>();
        this.populateOperators();
        this.xobjectDoHandlers = new HashMap<PdfName, XObjectDoHandler>();
        this.populateXObjectDoHandlers();
        this.reset();
    }

    private void applyTextAdjust(float f2) {
        this.textMatrix = new Matrix((- f2) / 1000.0f * this.gs().fontSize * this.gs().horizontalScaling, 0.0f).multiply(this.textMatrix);
    }

    private void beginMarkedContent(PdfName pdfName, PdfDictionary pdfDictionary) {
        this.markedContentStack.push(new MarkedContentInfo(pdfName, pdfDictionary));
    }

    private void beginText() {
        this.renderListener.beginTextBlock();
    }

    private void clipPath(int n2) {
        ((ExtRenderListener)this.renderListener).clipPath(n2);
    }

    private void displayPdfString(PdfString object) {
        object = new TextRenderInfo((PdfString)object, this.gs(), this.textMatrix, this.markedContentStack);
        this.renderListener.renderText((TextRenderInfo)object);
        this.textMatrix = new Matrix(object.getUnscaledWidth(), 0.0f).multiply(this.textMatrix);
    }

    private void displayXObject(PdfName pdfName) {
        PdfDictionary pdfDictionary = this.resources.getAsDict(PdfName.XOBJECT);
        Object object = pdfDictionary.getDirectObject(pdfName);
        PdfStream pdfStream = (PdfStream)object;
        Object object2 = pdfStream.getAsName(PdfName.SUBTYPE);
        if (object.isStream()) {
            object = object2 = this.xobjectDoHandlers.get(object2);
            if (object2 == null) {
                object = this.xobjectDoHandlers.get(PdfName.DEFAULT);
            }
            object.handleXObject(this, pdfStream, pdfDictionary.getAsIndirectObject(pdfName));
            return;
        }
        throw new IllegalStateException(MessageLocalization.getComposedMessage("XObject.1.is.not.a.stream", pdfName));
    }

    private void endMarkedContent() {
        this.markedContentStack.pop();
    }

    private void endText() {
        this.renderListener.endTextBlock();
    }

    private static BaseColor getColor(int n2, List<PdfObject> list) {
        float[] arrf = new float[n2];
        for (int i2 = 0; i2 < n2; ++i2) {
            arrf[i2] = ((PdfNumber)list.get(i2)).floatValue();
            if (arrf[i2] > 1.0f) {
                arrf[i2] = 1.0f;
                continue;
            }
            if (arrf[i2] >= 0.0f) continue;
            arrf[i2] = 0.0f;
        }
        if (n2 != 1) {
            switch (n2) {
                default: {
                    return null;
                }
                case 4: {
                    return new CMYKColor(arrf[0], arrf[1], arrf[2], arrf[3]);
                }
                case 3: 
            }
            return new BaseColor(arrf[0], arrf[1], arrf[2]);
        }
        return new GrayColor(arrf[0]);
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    private static BaseColor getColor(PdfName pdfName, List<PdfObject> list) {
        int n2;
        if (PdfName.DEVICEGRAY.equals(pdfName)) {
            n2 = 1;
            do {
                return PdfContentStreamProcessor.getColor(n2, list);
                break;
            } while (true);
        }
        if (PdfName.DEVICERGB.equals(pdfName)) {
            n2 = 3;
            return PdfContentStreamProcessor.getColor(n2, list);
        }
        if (!PdfName.DEVICECMYK.equals(pdfName)) return null;
        n2 = 4;
        return PdfContentStreamProcessor.getColor(n2, list);
    }

    private CMapAwareDocumentFont getFont(PRIndirectReference pRIndirectReference) {
        CMapAwareDocumentFont cMapAwareDocumentFont;
        Integer n2 = pRIndirectReference.getNumber();
        CMapAwareDocumentFont cMapAwareDocumentFont2 = cMapAwareDocumentFont = this.cachedFonts.get(n2);
        if (cMapAwareDocumentFont == null) {
            cMapAwareDocumentFont2 = new CMapAwareDocumentFont(pRIndirectReference);
            this.cachedFonts.put(n2, cMapAwareDocumentFont2);
        }
        return cMapAwareDocumentFont2;
    }

    private CMapAwareDocumentFont getFont(PdfDictionary pdfDictionary) {
        return new CMapAwareDocumentFont(pdfDictionary);
    }

    private void invokeOperator(PdfLiteral pdfLiteral, ArrayList<PdfObject> arrayList) {
        ContentOperator contentOperator;
        ContentOperator contentOperator2 = contentOperator = this.operators.get(pdfLiteral.toString());
        if (contentOperator == null) {
            contentOperator2 = this.operators.get(DEFAULTOPERATOR);
        }
        contentOperator2.invoke(this, pdfLiteral, arrayList);
    }

    private void modifyPath(int n2, List<Float> object) {
        object = new PathConstructionRenderInfo(n2, (List<Float>)object, this.gs().getCtm());
        ((ExtRenderListener)this.renderListener).modifyPath((PathConstructionRenderInfo)object);
    }

    private void paintPath(int n2, int n3, boolean bl2) {
        if (bl2) {
            this.modifyPath(6, null);
        }
        PathPaintingRenderInfo pathPaintingRenderInfo = new PathPaintingRenderInfo(n2, n3, this.gs());
        ((ExtRenderListener)this.renderListener).renderPath(pathPaintingRenderInfo);
    }

    private void populateOperators() {
        this.registerContentOperator(DEFAULTOPERATOR, new IgnoreOperatorContentOperator());
        this.registerContentOperator("q", new PushGraphicsState());
        this.registerContentOperator("Q", new PopGraphicsState());
        this.registerContentOperator("g", new SetGrayFill());
        this.registerContentOperator("G", new SetGrayStroke());
        this.registerContentOperator("rg", new SetRGBFill());
        this.registerContentOperator("RG", new SetRGBStroke());
        this.registerContentOperator("k", new SetCMYKFill());
        this.registerContentOperator("K", new SetCMYKStroke());
        this.registerContentOperator("cs", new SetColorSpaceFill());
        this.registerContentOperator("CS", new SetColorSpaceStroke());
        this.registerContentOperator("sc", new SetColorFill());
        this.registerContentOperator("SC", new SetColorStroke());
        this.registerContentOperator("scn", new SetColorFill());
        this.registerContentOperator("SCN", new SetColorStroke());
        this.registerContentOperator("cm", new ModifyCurrentTransformationMatrix());
        this.registerContentOperator("gs", new ProcessGraphicsStateResource());
        SetTextCharacterSpacing setTextCharacterSpacing = new SetTextCharacterSpacing();
        this.registerContentOperator("Tc", setTextCharacterSpacing);
        SetTextWordSpacing setTextWordSpacing = new SetTextWordSpacing();
        this.registerContentOperator("Tw", setTextWordSpacing);
        this.registerContentOperator("Tz", new SetTextHorizontalScaling());
        ContentOperator contentOperator = new SetTextLeading();
        this.registerContentOperator("TL", contentOperator);
        this.registerContentOperator("Tf", new SetTextFont());
        this.registerContentOperator("Tr", new SetTextRenderMode());
        this.registerContentOperator("Ts", new SetTextRise());
        this.registerContentOperator("BT", new BeginText());
        this.registerContentOperator("ET", new EndText());
        this.registerContentOperator("BMC", new BeginMarkedContent());
        this.registerContentOperator("BDC", new BeginMarkedContentDictionary());
        this.registerContentOperator("EMC", new EndMarkedContent());
        ContentOperator contentOperator2 = new TextMoveStartNextLine();
        this.registerContentOperator("Td", contentOperator2);
        this.registerContentOperator("TD", new TextMoveStartNextLineWithLeading((TextMoveStartNextLine)contentOperator2, (SetTextLeading)contentOperator));
        this.registerContentOperator("Tm", new TextSetTextMatrix());
        contentOperator = new TextMoveNextLine((TextMoveStartNextLine)contentOperator2);
        this.registerContentOperator("T*", contentOperator);
        contentOperator2 = new ShowText();
        this.registerContentOperator("Tj", contentOperator2);
        contentOperator = new MoveNextLineAndShowText((TextMoveNextLine)contentOperator, (ShowText)contentOperator2);
        this.registerContentOperator("'", contentOperator);
        this.registerContentOperator("\"", new MoveNextLineAndShowTextWithSpacing(setTextWordSpacing, setTextCharacterSpacing, (MoveNextLineAndShowText)contentOperator));
        this.registerContentOperator("TJ", new ShowTextArray());
        this.registerContentOperator("Do", new Do());
        this.registerContentOperator("w", new SetLineWidth());
        this.registerContentOperator("J", new SetLineCap());
        this.registerContentOperator("j", new SetLineJoin());
        this.registerContentOperator("M", new SetMiterLimit());
        this.registerContentOperator("d", new SetLineDashPattern());
        if (this.renderListener instanceof ExtRenderListener) {
            this.registerContentOperator("m", new MoveTo());
            this.registerContentOperator("l", new LineTo());
            this.registerContentOperator("c", new Curve());
            this.registerContentOperator("v", new CurveFirstPointDuplicated());
            this.registerContentOperator("y", new CurveFourhPointDuplicated());
            this.registerContentOperator("h", new CloseSubpath());
            this.registerContentOperator("re", new Rectangle());
            this.registerContentOperator("S", new PaintPath(1, -1, false));
            this.registerContentOperator("s", new PaintPath(1, -1, true));
            this.registerContentOperator("f", new PaintPath(2, 1, false));
            this.registerContentOperator("F", new PaintPath(2, 1, false));
            this.registerContentOperator("f*", new PaintPath(2, 2, false));
            this.registerContentOperator("B", new PaintPath(3, 1, false));
            this.registerContentOperator("B*", new PaintPath(3, 2, false));
            this.registerContentOperator("b", new PaintPath(3, 1, true));
            this.registerContentOperator("b*", new PaintPath(3, 2, true));
            this.registerContentOperator("n", new PaintPath(0, -1, false));
            this.registerContentOperator("W", new ClipPath(1));
            this.registerContentOperator("W*", new ClipPath(2));
        }
    }

    private void populateXObjectDoHandlers() {
        this.registerXObjectDoHandler(PdfName.DEFAULT, new IgnoreXObjectDoHandler());
        this.registerXObjectDoHandler(PdfName.FORM, new FormXObjectDoHandler());
        this.registerXObjectDoHandler(PdfName.IMAGE, new ImageXObjectDoHandler());
    }

    public Collection<String> getRegisteredOperatorStrings() {
        return new ArrayList<String>(this.operators.keySet());
    }

    public RenderListener getRenderListener() {
        return this.renderListener;
    }

    public GraphicsState gs() {
        return this.gsStack.peek();
    }

    protected void handleInlineImage(InlineImageInfo object, PdfDictionary pdfDictionary) {
        object = ImageRenderInfo.createForEmbeddedImage(this.gs(), (InlineImageInfo)object, pdfDictionary);
        this.renderListener.renderImage((ImageRenderInfo)object);
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public void processContent(byte[] object, PdfDictionary pdfDictionary) {
        this.resources.push(pdfDictionary);
        try {
            PdfContentParser pdfContentParser = new PdfContentParser(new PRTokeniser(new RandomAccessFileOrArray(new RandomAccessSourceFactory().createSource((byte[])object))));
            ArrayList<PdfObject> arrayList = new ArrayList<PdfObject>();
            do {
                if (pdfContentParser.parse(arrayList).size() <= 0) {
                    this.resources.pop();
                    return;
                }
                object = (PdfLiteral)arrayList.get(arrayList.size() - 1);
                if ("BI".equals(object.toString())) {
                    object = pdfDictionary != null ? pdfDictionary.getAsDict(PdfName.COLORSPACE) : null;
                    this.handleInlineImage(InlineImageUtils.parseInlineImage(pdfContentParser, (PdfDictionary)object), (PdfDictionary)object);
                    continue;
                }
                this.invokeOperator((PdfLiteral)object, arrayList);
            } while (true);
        }
        catch (Exception exception) {
            throw new ExceptionConverter(exception);
        }
    }

    public ContentOperator registerContentOperator(String string2, ContentOperator contentOperator) {
        return this.operators.put(string2, contentOperator);
    }

    public XObjectDoHandler registerXObjectDoHandler(PdfName pdfName, XObjectDoHandler xObjectDoHandler) {
        return this.xobjectDoHandlers.put(pdfName, xObjectDoHandler);
    }

    public void reset() {
        this.gsStack.removeAllElements();
        this.gsStack.add(new GraphicsState());
        this.textMatrix = null;
        this.textLineMatrix = null;
        this.resources = new ResourceDictionary();
    }

    private static class BeginMarkedContent
    implements ContentOperator {
        private BeginMarkedContent() {
        }

        @Override
        public void invoke(PdfContentStreamProcessor pdfContentStreamProcessor, PdfLiteral pdfLiteral, ArrayList<PdfObject> arrayList) {
            pdfContentStreamProcessor.beginMarkedContent((PdfName)arrayList.get(0), new PdfDictionary());
        }
    }

    private static class BeginMarkedContentDictionary
    implements ContentOperator {
        private BeginMarkedContentDictionary() {
        }

        private PdfDictionary getPropertiesDictionary(PdfObject pdfObject, ResourceDictionary resourceDictionary) {
            if (pdfObject.isDictionary()) {
                return (PdfDictionary)pdfObject;
            }
            return resourceDictionary.getAsDict((PdfName)pdfObject);
        }

        @Override
        public void invoke(PdfContentStreamProcessor pdfContentStreamProcessor, PdfLiteral pdfObject, ArrayList<PdfObject> arrayList) {
            pdfObject = arrayList.get(1);
            pdfContentStreamProcessor.beginMarkedContent((PdfName)arrayList.get(0), this.getPropertiesDictionary(pdfObject, pdfContentStreamProcessor.resources));
        }
    }

    private static class BeginText
    implements ContentOperator {
        private BeginText() {
        }

        @Override
        public void invoke(PdfContentStreamProcessor pdfContentStreamProcessor, PdfLiteral pdfLiteral, ArrayList<PdfObject> arrayList) {
            pdfContentStreamProcessor.textMatrix = new Matrix();
            pdfContentStreamProcessor.textLineMatrix = pdfContentStreamProcessor.textMatrix;
            pdfContentStreamProcessor.beginText();
        }
    }

    private static class ClipPath
    implements ContentOperator {
        private int rule;

        public ClipPath(int n2) {
            this.rule = n2;
        }

        @Override
        public void invoke(PdfContentStreamProcessor pdfContentStreamProcessor, PdfLiteral pdfLiteral, ArrayList<PdfObject> arrayList) {
            pdfContentStreamProcessor.clipPath(this.rule);
        }
    }

    private static class CloseSubpath
    implements ContentOperator {
        private CloseSubpath() {
        }

        @Override
        public void invoke(PdfContentStreamProcessor pdfContentStreamProcessor, PdfLiteral pdfLiteral, ArrayList<PdfObject> arrayList) {
            pdfContentStreamProcessor.modifyPath(6, null);
        }
    }

    private static class Curve
    implements ContentOperator {
        private Curve() {
        }

        @Override
        public void invoke(PdfContentStreamProcessor pdfContentStreamProcessor, PdfLiteral pdfLiteral, ArrayList<PdfObject> arrayList) {
            pdfContentStreamProcessor.modifyPath(3, Arrays.asList(Float.valueOf(((PdfNumber)arrayList.get(0)).floatValue()), Float.valueOf(((PdfNumber)arrayList.get(1)).floatValue()), Float.valueOf(((PdfNumber)arrayList.get(2)).floatValue()), Float.valueOf(((PdfNumber)arrayList.get(3)).floatValue()), Float.valueOf(((PdfNumber)arrayList.get(4)).floatValue()), Float.valueOf(((PdfNumber)arrayList.get(5)).floatValue())));
        }
    }

    private static class CurveFirstPointDuplicated
    implements ContentOperator {
        private CurveFirstPointDuplicated() {
        }

        @Override
        public void invoke(PdfContentStreamProcessor pdfContentStreamProcessor, PdfLiteral pdfLiteral, ArrayList<PdfObject> arrayList) {
            pdfContentStreamProcessor.modifyPath(4, Arrays.asList(Float.valueOf(((PdfNumber)arrayList.get(0)).floatValue()), Float.valueOf(((PdfNumber)arrayList.get(1)).floatValue()), Float.valueOf(((PdfNumber)arrayList.get(2)).floatValue()), Float.valueOf(((PdfNumber)arrayList.get(3)).floatValue())));
        }
    }

    private static class CurveFourhPointDuplicated
    implements ContentOperator {
        private CurveFourhPointDuplicated() {
        }

        @Override
        public void invoke(PdfContentStreamProcessor pdfContentStreamProcessor, PdfLiteral pdfLiteral, ArrayList<PdfObject> arrayList) {
            pdfContentStreamProcessor.modifyPath(5, Arrays.asList(Float.valueOf(((PdfNumber)arrayList.get(0)).floatValue()), Float.valueOf(((PdfNumber)arrayList.get(1)).floatValue()), Float.valueOf(((PdfNumber)arrayList.get(2)).floatValue()), Float.valueOf(((PdfNumber)arrayList.get(3)).floatValue())));
        }
    }

    private static class Do
    implements ContentOperator {
        private Do() {
        }

        @Override
        public void invoke(PdfContentStreamProcessor pdfContentStreamProcessor, PdfLiteral pdfLiteral, ArrayList<PdfObject> arrayList) {
            pdfContentStreamProcessor.displayXObject((PdfName)arrayList.get(0));
        }
    }

    private static class EndMarkedContent
    implements ContentOperator {
        private EndMarkedContent() {
        }

        @Override
        public void invoke(PdfContentStreamProcessor pdfContentStreamProcessor, PdfLiteral pdfLiteral, ArrayList<PdfObject> arrayList) {
            pdfContentStreamProcessor.endMarkedContent();
        }
    }

    private static class EndPath
    implements ContentOperator {
        private EndPath() {
        }

        @Override
        public void invoke(PdfContentStreamProcessor pdfContentStreamProcessor, PdfLiteral pdfLiteral, ArrayList<PdfObject> arrayList) {
            pdfContentStreamProcessor.paintPath(0, -1, false);
        }
    }

    private static class EndText
    implements ContentOperator {
        private EndText() {
        }

        @Override
        public void invoke(PdfContentStreamProcessor pdfContentStreamProcessor, PdfLiteral pdfLiteral, ArrayList<PdfObject> arrayList) {
            pdfContentStreamProcessor.textMatrix = null;
            pdfContentStreamProcessor.textLineMatrix = null;
            pdfContentStreamProcessor.endText();
        }
    }

    private static class FormXObjectDoHandler
    implements XObjectDoHandler {
        private FormXObjectDoHandler() {
        }

        @Override
        public void handleXObject(PdfContentStreamProcessor pdfContentStreamProcessor, PdfStream object, PdfIndirectReference pdfObject) {
            byte[] arrby;
            pdfObject = object.getAsDict(PdfName.RESOURCES);
            try {
                arrby = ContentByteUtils.getContentBytesFromContentObject((PdfObject)object);
            }
            catch (IOException iOException) {
                throw new ExceptionConverter(iOException);
            }
            object = object.getAsArray(PdfName.MATRIX);
            new PushGraphicsState().invoke(pdfContentStreamProcessor, null, null);
            if (object != null) {
                object = new Matrix(object.getAsNumber(0).floatValue(), object.getAsNumber(1).floatValue(), object.getAsNumber(2).floatValue(), object.getAsNumber(3).floatValue(), object.getAsNumber(4).floatValue(), object.getAsNumber(5).floatValue());
                pdfContentStreamProcessor.gs().ctm = object.multiply(pdfContentStreamProcessor.gs().ctm);
            }
            pdfContentStreamProcessor.processContent(arrby, (PdfDictionary)pdfObject);
            new PopGraphicsState().invoke(pdfContentStreamProcessor, null, null);
        }
    }

    private static class IgnoreOperatorContentOperator
    implements ContentOperator {
        private IgnoreOperatorContentOperator() {
        }

        @Override
        public void invoke(PdfContentStreamProcessor pdfContentStreamProcessor, PdfLiteral pdfLiteral, ArrayList<PdfObject> arrayList) {
        }
    }

    private static class IgnoreXObjectDoHandler
    implements XObjectDoHandler {
        private IgnoreXObjectDoHandler() {
        }

        @Override
        public void handleXObject(PdfContentStreamProcessor pdfContentStreamProcessor, PdfStream pdfStream, PdfIndirectReference pdfIndirectReference) {
        }
    }

    private static class ImageXObjectDoHandler
    implements XObjectDoHandler {
        private ImageXObjectDoHandler() {
        }

        @Override
        public void handleXObject(PdfContentStreamProcessor pdfContentStreamProcessor, PdfStream object, PdfIndirectReference pdfIndirectReference) {
            object = pdfContentStreamProcessor.resources.getAsDict(PdfName.COLORSPACE);
            object = ImageRenderInfo.createForXObject(pdfContentStreamProcessor.gs(), pdfIndirectReference, (PdfDictionary)object);
            pdfContentStreamProcessor.renderListener.renderImage((ImageRenderInfo)object);
        }
    }

    private static class LineTo
    implements ContentOperator {
        private LineTo() {
        }

        @Override
        public void invoke(PdfContentStreamProcessor pdfContentStreamProcessor, PdfLiteral pdfLiteral, ArrayList<PdfObject> arrayList) {
            pdfContentStreamProcessor.modifyPath(2, Arrays.asList(Float.valueOf(((PdfNumber)arrayList.get(0)).floatValue()), Float.valueOf(((PdfNumber)arrayList.get(1)).floatValue())));
        }
    }

    private static class ModifyCurrentTransformationMatrix
    implements ContentOperator {
        private ModifyCurrentTransformationMatrix() {
        }

        @Override
        public void invoke(PdfContentStreamProcessor object, PdfLiteral object2, ArrayList<PdfObject> arrayList) {
            object2 = new Matrix(((PdfNumber)arrayList.get(0)).floatValue(), ((PdfNumber)arrayList.get(1)).floatValue(), ((PdfNumber)arrayList.get(2)).floatValue(), ((PdfNumber)arrayList.get(3)).floatValue(), ((PdfNumber)arrayList.get(4)).floatValue(), ((PdfNumber)arrayList.get(5)).floatValue());
            object = (GraphicsState)((PdfContentStreamProcessor)object).gsStack.peek();
            object.ctm = object2.multiply(object.ctm);
        }
    }

    private static class MoveNextLineAndShowText
    implements ContentOperator {
        private final ShowText showText;
        private final TextMoveNextLine textMoveNextLine;

        public MoveNextLineAndShowText(TextMoveNextLine textMoveNextLine, ShowText showText) {
            this.textMoveNextLine = textMoveNextLine;
            this.showText = showText;
        }

        @Override
        public void invoke(PdfContentStreamProcessor pdfContentStreamProcessor, PdfLiteral pdfLiteral, ArrayList<PdfObject> arrayList) {
            this.textMoveNextLine.invoke(pdfContentStreamProcessor, null, new ArrayList<PdfObject>(0));
            this.showText.invoke(pdfContentStreamProcessor, null, arrayList);
        }
    }

    private static class MoveNextLineAndShowTextWithSpacing
    implements ContentOperator {
        private final MoveNextLineAndShowText moveNextLineAndShowText;
        private final SetTextCharacterSpacing setTextCharacterSpacing;
        private final SetTextWordSpacing setTextWordSpacing;

        public MoveNextLineAndShowTextWithSpacing(SetTextWordSpacing setTextWordSpacing, SetTextCharacterSpacing setTextCharacterSpacing, MoveNextLineAndShowText moveNextLineAndShowText) {
            this.setTextWordSpacing = setTextWordSpacing;
            this.setTextCharacterSpacing = setTextCharacterSpacing;
            this.moveNextLineAndShowText = moveNextLineAndShowText;
        }

        @Override
        public void invoke(PdfContentStreamProcessor pdfContentStreamProcessor, PdfLiteral serializable, ArrayList<PdfObject> serializable2) {
            Serializable serializable3 = (PdfNumber)serializable2.get(0);
            serializable = (PdfNumber)serializable2.get(1);
            serializable2 = (PdfString)serializable2.get(2);
            ArrayList<PdfObject> arrayList = new ArrayList<PdfObject>(1);
            arrayList.add(0, (PdfObject)serializable3);
            this.setTextWordSpacing.invoke(pdfContentStreamProcessor, null, arrayList);
            serializable3 = new ArrayList(1);
            serializable3.add(0, serializable);
            this.setTextCharacterSpacing.invoke(pdfContentStreamProcessor, null, (ArrayList<PdfObject>)serializable3);
            serializable = new ArrayList(1);
            serializable.add(0, serializable2);
            this.moveNextLineAndShowText.invoke(pdfContentStreamProcessor, null, (ArrayList<PdfObject>)serializable);
        }
    }

    private static class MoveTo
    implements ContentOperator {
        private MoveTo() {
        }

        @Override
        public void invoke(PdfContentStreamProcessor pdfContentStreamProcessor, PdfLiteral pdfLiteral, ArrayList<PdfObject> arrayList) {
            pdfContentStreamProcessor.modifyPath(1, Arrays.asList(Float.valueOf(((PdfNumber)arrayList.get(0)).floatValue()), Float.valueOf(((PdfNumber)arrayList.get(1)).floatValue())));
        }
    }

    private static class PaintPath
    implements ContentOperator {
        private boolean close;
        private int operation;
        private int rule;

        public PaintPath(int n2, int n3, boolean bl2) {
            this.operation = n2;
            this.rule = n3;
            this.close = bl2;
        }

        @Override
        public void invoke(PdfContentStreamProcessor pdfContentStreamProcessor, PdfLiteral pdfLiteral, ArrayList<PdfObject> arrayList) {
            pdfContentStreamProcessor.paintPath(this.operation, this.rule, this.close);
        }
    }

    private static class PopGraphicsState
    implements ContentOperator {
        private PopGraphicsState() {
        }

        @Override
        public void invoke(PdfContentStreamProcessor pdfContentStreamProcessor, PdfLiteral pdfLiteral, ArrayList<PdfObject> arrayList) {
            pdfContentStreamProcessor.gsStack.pop();
        }
    }

    private static class ProcessGraphicsStateResource
    implements ContentOperator {
        private ProcessGraphicsStateResource() {
        }

        @Override
        public void invoke(PdfContentStreamProcessor pdfContentStreamProcessor, PdfLiteral pdfObject, ArrayList<PdfObject> object) {
            object = (PdfName)object.get(0);
            PdfDictionary pdfDictionary = pdfContentStreamProcessor.resources.getAsDict(PdfName.EXTGSTATE);
            if (pdfDictionary != null) {
                pdfObject = pdfDictionary.getAsDict((PdfName)object);
                if (pdfObject != null) {
                    if ((pdfObject = pdfObject.getAsArray(PdfName.FONT)) != null) {
                        object = pdfContentStreamProcessor.getFont((PRIndirectReference)pdfObject.getPdfObject(0));
                        float f2 = pdfObject.getAsNumber(1).floatValue();
                        pdfContentStreamProcessor.gs().font = object;
                        pdfContentStreamProcessor.gs().fontSize = f2;
                    }
                    return;
                }
                throw new IllegalArgumentException(MessageLocalization.getComposedMessage("1.is.an.unknown.graphics.state.dictionary", object));
            }
            throw new IllegalArgumentException(MessageLocalization.getComposedMessage("resources.do.not.contain.extgstate.entry.unable.to.process.operator.1", pdfObject));
        }
    }

    private static class PushGraphicsState
    implements ContentOperator {
        private PushGraphicsState() {
        }

        @Override
        public void invoke(PdfContentStreamProcessor pdfContentStreamProcessor, PdfLiteral object, ArrayList<PdfObject> arrayList) {
            object = new GraphicsState((GraphicsState)pdfContentStreamProcessor.gsStack.peek());
            pdfContentStreamProcessor.gsStack.push(object);
        }
    }

    private static class Rectangle
    implements ContentOperator {
        private Rectangle() {
        }

        @Override
        public void invoke(PdfContentStreamProcessor pdfContentStreamProcessor, PdfLiteral pdfLiteral, ArrayList<PdfObject> arrayList) {
            pdfContentStreamProcessor.modifyPath(7, Arrays.asList(Float.valueOf(((PdfNumber)arrayList.get(0)).floatValue()), Float.valueOf(((PdfNumber)arrayList.get(1)).floatValue()), Float.valueOf(((PdfNumber)arrayList.get(2)).floatValue()), Float.valueOf(((PdfNumber)arrayList.get(3)).floatValue())));
        }
    }

    private static class ResourceDictionary
    extends PdfDictionary {
        private final List<PdfDictionary> resourcesStack = new ArrayList<PdfDictionary>();

        @Override
        public PdfObject getDirectObject(PdfName pdfName) {
            for (int i2 = this.resourcesStack.size() - 1; i2 >= 0; --i2) {
                PdfObject pdfObject = this.resourcesStack.get(i2);
                if (pdfObject == null || (pdfObject = pdfObject.getDirectObject(pdfName)) == null) continue;
                return pdfObject;
            }
            return super.getDirectObject(pdfName);
        }

        public void pop() {
            this.resourcesStack.remove(this.resourcesStack.size() - 1);
        }

        public void push(PdfDictionary pdfDictionary) {
            this.resourcesStack.add(pdfDictionary);
        }
    }

    private static class SetCMYKFill
    implements ContentOperator {
        private SetCMYKFill() {
        }

        @Override
        public void invoke(PdfContentStreamProcessor pdfContentStreamProcessor, PdfLiteral pdfLiteral, ArrayList<PdfObject> arrayList) {
            pdfContentStreamProcessor.gs().fillColor = PdfContentStreamProcessor.getColor(4, (List<PdfObject>)arrayList);
        }
    }

    private static class SetCMYKStroke
    implements ContentOperator {
        private SetCMYKStroke() {
        }

        @Override
        public void invoke(PdfContentStreamProcessor pdfContentStreamProcessor, PdfLiteral pdfLiteral, ArrayList<PdfObject> arrayList) {
            pdfContentStreamProcessor.gs().strokeColor = PdfContentStreamProcessor.getColor(4, (List<PdfObject>)arrayList);
        }
    }

    private static class SetColorFill
    implements ContentOperator {
        private SetColorFill() {
        }

        @Override
        public void invoke(PdfContentStreamProcessor pdfContentStreamProcessor, PdfLiteral pdfLiteral, ArrayList<PdfObject> arrayList) {
            pdfContentStreamProcessor.gs().fillColor = PdfContentStreamProcessor.getColor(pdfContentStreamProcessor.gs().colorSpaceFill, (List<PdfObject>)arrayList);
        }
    }

    private static class SetColorSpaceFill
    implements ContentOperator {
        private SetColorSpaceFill() {
        }

        @Override
        public void invoke(PdfContentStreamProcessor pdfContentStreamProcessor, PdfLiteral pdfLiteral, ArrayList<PdfObject> arrayList) {
            pdfContentStreamProcessor.gs().colorSpaceFill = (PdfName)arrayList.get(0);
        }
    }

    private static class SetColorSpaceStroke
    implements ContentOperator {
        private SetColorSpaceStroke() {
        }

        @Override
        public void invoke(PdfContentStreamProcessor pdfContentStreamProcessor, PdfLiteral pdfLiteral, ArrayList<PdfObject> arrayList) {
            pdfContentStreamProcessor.gs().colorSpaceStroke = (PdfName)arrayList.get(0);
        }
    }

    private static class SetColorStroke
    implements ContentOperator {
        private SetColorStroke() {
        }

        @Override
        public void invoke(PdfContentStreamProcessor pdfContentStreamProcessor, PdfLiteral pdfLiteral, ArrayList<PdfObject> arrayList) {
            pdfContentStreamProcessor.gs().strokeColor = PdfContentStreamProcessor.getColor(pdfContentStreamProcessor.gs().colorSpaceStroke, (List<PdfObject>)arrayList);
        }
    }

    private static class SetGrayFill
    implements ContentOperator {
        private SetGrayFill() {
        }

        @Override
        public void invoke(PdfContentStreamProcessor pdfContentStreamProcessor, PdfLiteral pdfLiteral, ArrayList<PdfObject> arrayList) {
            pdfContentStreamProcessor.gs().fillColor = PdfContentStreamProcessor.getColor(1, (List<PdfObject>)arrayList);
        }
    }

    private static class SetGrayStroke
    implements ContentOperator {
        private SetGrayStroke() {
        }

        @Override
        public void invoke(PdfContentStreamProcessor pdfContentStreamProcessor, PdfLiteral pdfLiteral, ArrayList<PdfObject> arrayList) {
            pdfContentStreamProcessor.gs().strokeColor = PdfContentStreamProcessor.getColor(1, (List<PdfObject>)arrayList);
        }
    }

    private class SetLineCap
    implements ContentOperator {
        private SetLineCap() {
        }

        @Override
        public void invoke(PdfContentStreamProcessor pdfContentStreamProcessor, PdfLiteral pdfLiteral, ArrayList<PdfObject> arrayList) {
            int n2 = ((PdfNumber)arrayList.get(0)).intValue();
            pdfContentStreamProcessor.gs().setLineCapStyle(n2);
        }
    }

    private class SetLineDashPattern
    implements ContentOperator {
        private SetLineDashPattern() {
        }

        @Override
        public void invoke(PdfContentStreamProcessor pdfContentStreamProcessor, PdfLiteral object, ArrayList<PdfObject> arrayList) {
            object = new LineDashPattern((PdfArray)arrayList.get(0), ((PdfNumber)arrayList.get(1)).floatValue());
            pdfContentStreamProcessor.gs().setLineDashPattern((LineDashPattern)object);
        }
    }

    private class SetLineJoin
    implements ContentOperator {
        private SetLineJoin() {
        }

        @Override
        public void invoke(PdfContentStreamProcessor pdfContentStreamProcessor, PdfLiteral pdfLiteral, ArrayList<PdfObject> arrayList) {
            int n2 = ((PdfNumber)arrayList.get(0)).intValue();
            pdfContentStreamProcessor.gs().setLineJoinStyle(n2);
        }
    }

    private static class SetLineWidth
    implements ContentOperator {
        private SetLineWidth() {
        }

        @Override
        public void invoke(PdfContentStreamProcessor pdfContentStreamProcessor, PdfLiteral pdfLiteral, ArrayList<PdfObject> arrayList) {
            float f2 = ((PdfNumber)arrayList.get(0)).floatValue();
            pdfContentStreamProcessor.gs().setLineWidth(f2);
        }
    }

    private class SetMiterLimit
    implements ContentOperator {
        private SetMiterLimit() {
        }

        @Override
        public void invoke(PdfContentStreamProcessor pdfContentStreamProcessor, PdfLiteral pdfLiteral, ArrayList<PdfObject> arrayList) {
            float f2 = ((PdfNumber)arrayList.get(0)).floatValue();
            pdfContentStreamProcessor.gs().setMiterLimit(f2);
        }
    }

    private static class SetRGBFill
    implements ContentOperator {
        private SetRGBFill() {
        }

        @Override
        public void invoke(PdfContentStreamProcessor pdfContentStreamProcessor, PdfLiteral pdfLiteral, ArrayList<PdfObject> arrayList) {
            pdfContentStreamProcessor.gs().fillColor = PdfContentStreamProcessor.getColor(3, (List<PdfObject>)arrayList);
        }
    }

    private static class SetRGBStroke
    implements ContentOperator {
        private SetRGBStroke() {
        }

        @Override
        public void invoke(PdfContentStreamProcessor pdfContentStreamProcessor, PdfLiteral pdfLiteral, ArrayList<PdfObject> arrayList) {
            pdfContentStreamProcessor.gs().strokeColor = PdfContentStreamProcessor.getColor(3, (List<PdfObject>)arrayList);
        }
    }

    private static class SetTextCharacterSpacing
    implements ContentOperator {
        private SetTextCharacterSpacing() {
        }

        @Override
        public void invoke(PdfContentStreamProcessor pdfContentStreamProcessor, PdfLiteral pdfObject, ArrayList<PdfObject> arrayList) {
            pdfObject = (PdfNumber)arrayList.get(0);
            pdfContentStreamProcessor.gs().characterSpacing = pdfObject.floatValue();
        }
    }

    private static class SetTextFont
    implements ContentOperator {
        private SetTextFont() {
        }

        @Override
        public void invoke(PdfContentStreamProcessor pdfContentStreamProcessor, PdfLiteral object, ArrayList<PdfObject> arrayList) {
            object = (PdfName)arrayList.get(0);
            float f2 = ((PdfNumber)arrayList.get(1)).floatValue();
            object = pdfContentStreamProcessor.resources.getAsDict(PdfName.FONT).get((PdfName)object);
            object = object instanceof PdfDictionary ? pdfContentStreamProcessor.getFont((PdfDictionary)object) : pdfContentStreamProcessor.getFont((PRIndirectReference)object);
            pdfContentStreamProcessor.gs().font = object;
            pdfContentStreamProcessor.gs().fontSize = f2;
        }
    }

    private static class SetTextHorizontalScaling
    implements ContentOperator {
        private SetTextHorizontalScaling() {
        }

        @Override
        public void invoke(PdfContentStreamProcessor pdfContentStreamProcessor, PdfLiteral pdfObject, ArrayList<PdfObject> arrayList) {
            pdfObject = (PdfNumber)arrayList.get(0);
            pdfContentStreamProcessor.gs().horizontalScaling = pdfObject.floatValue() / 100.0f;
        }
    }

    private static class SetTextLeading
    implements ContentOperator {
        private SetTextLeading() {
        }

        @Override
        public void invoke(PdfContentStreamProcessor pdfContentStreamProcessor, PdfLiteral pdfObject, ArrayList<PdfObject> arrayList) {
            pdfObject = (PdfNumber)arrayList.get(0);
            pdfContentStreamProcessor.gs().leading = pdfObject.floatValue();
        }
    }

    private static class SetTextRenderMode
    implements ContentOperator {
        private SetTextRenderMode() {
        }

        @Override
        public void invoke(PdfContentStreamProcessor pdfContentStreamProcessor, PdfLiteral pdfObject, ArrayList<PdfObject> arrayList) {
            pdfObject = (PdfNumber)arrayList.get(0);
            pdfContentStreamProcessor.gs().renderMode = pdfObject.intValue();
        }
    }

    private static class SetTextRise
    implements ContentOperator {
        private SetTextRise() {
        }

        @Override
        public void invoke(PdfContentStreamProcessor pdfContentStreamProcessor, PdfLiteral pdfObject, ArrayList<PdfObject> arrayList) {
            pdfObject = (PdfNumber)arrayList.get(0);
            pdfContentStreamProcessor.gs().rise = pdfObject.floatValue();
        }
    }

    private static class SetTextWordSpacing
    implements ContentOperator {
        private SetTextWordSpacing() {
        }

        @Override
        public void invoke(PdfContentStreamProcessor pdfContentStreamProcessor, PdfLiteral pdfObject, ArrayList<PdfObject> arrayList) {
            pdfObject = (PdfNumber)arrayList.get(0);
            pdfContentStreamProcessor.gs().wordSpacing = pdfObject.floatValue();
        }
    }

    private static class ShowText
    implements ContentOperator {
        private ShowText() {
        }

        @Override
        public void invoke(PdfContentStreamProcessor pdfContentStreamProcessor, PdfLiteral pdfLiteral, ArrayList<PdfObject> arrayList) {
            pdfContentStreamProcessor.displayPdfString((PdfString)arrayList.get(0));
        }
    }

    private static class ShowTextArray
    implements ContentOperator {
        private ShowTextArray() {
        }

        @Override
        public void invoke(PdfContentStreamProcessor pdfContentStreamProcessor, PdfLiteral object, ArrayList<PdfObject> serializable) {
            object = ((PdfArray)serializable.get(0)).listIterator();
            while (object.hasNext()) {
                serializable = (PdfObject)object.next();
                if (serializable instanceof PdfString) {
                    pdfContentStreamProcessor.displayPdfString((PdfString)serializable);
                    continue;
                }
                pdfContentStreamProcessor.applyTextAdjust(((PdfNumber)serializable).floatValue());
            }
        }
    }

    private static class TextMoveNextLine
    implements ContentOperator {
        private final TextMoveStartNextLine moveStartNextLine;

        public TextMoveNextLine(TextMoveStartNextLine textMoveStartNextLine) {
            this.moveStartNextLine = textMoveStartNextLine;
        }

        @Override
        public void invoke(PdfContentStreamProcessor pdfContentStreamProcessor, PdfLiteral serializable, ArrayList<PdfObject> arrayList) {
            serializable = new ArrayList(2);
            serializable.add(0, new PdfNumber(0));
            serializable.add(1, new PdfNumber(- pdfContentStreamProcessor.gs().leading));
            this.moveStartNextLine.invoke(pdfContentStreamProcessor, null, (ArrayList<PdfObject>)serializable);
        }
    }

    private static class TextMoveStartNextLine
    implements ContentOperator {
        private TextMoveStartNextLine() {
        }

        @Override
        public void invoke(PdfContentStreamProcessor pdfContentStreamProcessor, PdfLiteral pdfLiteral, ArrayList<PdfObject> arrayList) {
            pdfContentStreamProcessor.textMatrix = new Matrix(((PdfNumber)arrayList.get(0)).floatValue(), ((PdfNumber)arrayList.get(1)).floatValue()).multiply(pdfContentStreamProcessor.textLineMatrix);
            pdfContentStreamProcessor.textLineMatrix = pdfContentStreamProcessor.textMatrix;
        }
    }

    private static class TextMoveStartNextLineWithLeading
    implements ContentOperator {
        private final TextMoveStartNextLine moveStartNextLine;
        private final SetTextLeading setTextLeading;

        public TextMoveStartNextLineWithLeading(TextMoveStartNextLine textMoveStartNextLine, SetTextLeading setTextLeading) {
            this.moveStartNextLine = textMoveStartNextLine;
            this.setTextLeading = setTextLeading;
        }

        @Override
        public void invoke(PdfContentStreamProcessor pdfContentStreamProcessor, PdfLiteral serializable, ArrayList<PdfObject> arrayList) {
            float f2 = ((PdfNumber)arrayList.get(1)).floatValue();
            serializable = new ArrayList(1);
            serializable.add(0, new PdfNumber(- f2));
            this.setTextLeading.invoke(pdfContentStreamProcessor, null, (ArrayList<PdfObject>)serializable);
            this.moveStartNextLine.invoke(pdfContentStreamProcessor, null, arrayList);
        }
    }

    private static class TextSetTextMatrix
    implements ContentOperator {
        private TextSetTextMatrix() {
        }

        @Override
        public void invoke(PdfContentStreamProcessor pdfContentStreamProcessor, PdfLiteral pdfLiteral, ArrayList<PdfObject> arrayList) {
            pdfContentStreamProcessor.textLineMatrix = new Matrix(((PdfNumber)arrayList.get(0)).floatValue(), ((PdfNumber)arrayList.get(1)).floatValue(), ((PdfNumber)arrayList.get(2)).floatValue(), ((PdfNumber)arrayList.get(3)).floatValue(), ((PdfNumber)arrayList.get(4)).floatValue(), ((PdfNumber)arrayList.get(5)).floatValue());
            pdfContentStreamProcessor.textMatrix = pdfContentStreamProcessor.textLineMatrix;
        }
    }

}

