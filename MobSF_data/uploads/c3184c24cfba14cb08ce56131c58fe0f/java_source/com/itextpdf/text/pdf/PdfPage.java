/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf;

import com.itextpdf.text.DocumentException;
import com.itextpdf.text.error_messages.MessageLocalization;
import com.itextpdf.text.pdf.PdfDictionary;
import com.itextpdf.text.pdf.PdfIndirectReference;
import com.itextpdf.text.pdf.PdfName;
import com.itextpdf.text.pdf.PdfNumber;
import com.itextpdf.text.pdf.PdfObject;
import com.itextpdf.text.pdf.PdfRectangle;
import java.util.HashMap;

public class PdfPage
extends PdfDictionary {
    public static final PdfNumber INVERTEDPORTRAIT;
    public static final PdfNumber LANDSCAPE;
    public static final PdfNumber PORTRAIT;
    public static final PdfNumber SEASCAPE;
    private static final PdfName[] boxNames;
    private static final String[] boxStrings;
    PdfRectangle mediaBox;

    static {
        boxStrings = new String[]{"crop", "trim", "art", "bleed"};
        boxNames = new PdfName[]{PdfName.CROPBOX, PdfName.TRIMBOX, PdfName.ARTBOX, PdfName.BLEEDBOX};
        PORTRAIT = new PdfNumber(0);
        LANDSCAPE = new PdfNumber(90);
        INVERTEDPORTRAIT = new PdfNumber(180);
        SEASCAPE = new PdfNumber(270);
    }

    PdfPage(PdfRectangle pdfRectangle, HashMap<String, PdfRectangle> hashMap, PdfDictionary pdfDictionary) {
        this(pdfRectangle, hashMap, pdfDictionary, 0);
    }

    PdfPage(PdfRectangle pdfObject, HashMap<String, PdfRectangle> hashMap, PdfDictionary pdfDictionary, int n2) {
        super(PAGE);
        this.mediaBox = pdfObject;
        int n3 = 0;
        if (pdfObject != null && (pdfObject.width() > 14400.0f || pdfObject.height() > 14400.0f)) {
            throw new DocumentException(MessageLocalization.getComposedMessage("the.page.size.must.be.smaller.than.14400.by.14400.its.1.by.2", Float.valueOf(pdfObject.width()), Float.valueOf(pdfObject.height())));
        }
        this.put(PdfName.MEDIABOX, pdfObject);
        this.put(PdfName.RESOURCES, pdfDictionary);
        int n4 = n3;
        if (n2 != 0) {
            this.put(PdfName.ROTATE, new PdfNumber(n2));
            n4 = n3;
        }
        while (n4 < boxStrings.length) {
            pdfObject = hashMap.get(boxStrings[n4]);
            if (pdfObject != null) {
                this.put(boxNames[n4], pdfObject);
            }
            ++n4;
        }
    }

    void add(PdfIndirectReference pdfIndirectReference) {
        this.put(PdfName.CONTENTS, pdfIndirectReference);
    }

    PdfRectangle getMediaBox() {
        return this.mediaBox;
    }

    public boolean isParent() {
        return false;
    }

    PdfRectangle rotateMediaBox() {
        this.mediaBox = this.mediaBox.rotate();
        this.put(PdfName.MEDIABOX, this.mediaBox);
        return this.mediaBox;
    }
}

