/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf.fonts.cmaps;

import com.itextpdf.text.error_messages.MessageLocalization;
import com.itextpdf.text.pdf.PdfNumber;
import com.itextpdf.text.pdf.PdfObject;
import com.itextpdf.text.pdf.PdfString;
import com.itextpdf.text.pdf.fonts.cmaps.AbstractCMap;
import com.itextpdf.text.pdf.fonts.cmaps.CMapSequence;
import java.util.ArrayList;

public class CMapByteCid
extends AbstractCMap {
    private ArrayList<char[]> planes = new ArrayList();

    public CMapByteCid() {
        this.planes.add(new char[256]);
    }

    private void encodeSequence(byte[] arrby, char c2) {
        int n2;
        char[] arrc;
        int n3 = arrby.length - 1;
        int n4 = 0;
        for (n2 = 0; n2 < n3; ++n2) {
            arrc = this.planes.get(n4);
            int n5 = arrby[n2] & 255;
            n4 = arrc[n5];
            if (n4 != 0 && (n4 & 32768) == 0) {
                throw new RuntimeException(MessageLocalization.getComposedMessage("inconsistent.mapping", new Object[0]));
            }
            int n6 = n4;
            if (n4 == 0) {
                char c3;
                this.planes.add(new char[256]);
                arrc[n5] = c3 = (char)(32768 | this.planes.size() - 1);
                n6 = c3;
            }
            n4 = n6 & 32767;
        }
        arrc = this.planes.get(n4);
        if ((arrc[n2 = arrby[n3] & 255] & 32768) == 0) {
            arrc[n2] = c2;
            return;
        }
        throw new RuntimeException(MessageLocalization.getComposedMessage("inconsistent.mapping", new Object[0]));
    }

    @Override
    void addChar(PdfString pdfString, PdfObject pdfObject) {
        if (!(pdfObject instanceof PdfNumber)) {
            return;
        }
        this.encodeSequence(CMapByteCid.decodeStringToByte(pdfString), (char)((PdfNumber)pdfObject).intValue());
    }

    public String decodeSequence(CMapSequence cMapSequence) {
        int n2;
        StringBuilder stringBuilder = new StringBuilder();
        while ((n2 = this.decodeSingle(cMapSequence)) >= 0) {
            stringBuilder.append((char)n2);
        }
        return stringBuilder.toString();
    }

    public int decodeSingle(CMapSequence cMapSequence) {
        int n2 = cMapSequence.off;
        int n3 = cMapSequence.len;
        int n4 = 0;
        while (cMapSequence.off < n2 + n3) {
            byte[] arrby = cMapSequence.seq;
            int n5 = cMapSequence.off;
            cMapSequence.off = n5 + 1;
            n5 = arrby[n5];
            --cMapSequence.len;
            if ((32768 & (n4 = this.planes.get(n4)[n5 & 255])) == 0) {
                return n4;
            }
            n4 &= 32767;
        }
        return -1;
    }
}

