/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf;

import com.itextpdf.text.ExceptionConverter;
import com.itextpdf.text.error_messages.MessageLocalization;
import java.io.FileInputStream;
import java.io.InputStream;
import java.io.UnsupportedEncodingException;
import java.util.HashMap;

public class ICC_Profile {
    private static HashMap<String, Integer> cstags = new HashMap();
    protected byte[] data;
    protected int numComponents;

    static {
        cstags.put("XYZ ", 3);
        cstags.put("Lab ", 3);
        cstags.put("Luv ", 3);
        cstags.put("YCbr", 3);
        cstags.put("Yxy ", 3);
        cstags.put("RGB ", 3);
        cstags.put("GRAY", 1);
        cstags.put("HSV ", 3);
        cstags.put("HLS ", 3);
        cstags.put("CMYK", 4);
        cstags.put("CMY ", 3);
        cstags.put("2CLR", 2);
        cstags.put("3CLR", 3);
        cstags.put("4CLR", 4);
        cstags.put("5CLR", 5);
        cstags.put("6CLR", 6);
        cstags.put("7CLR", 7);
        cstags.put("8CLR", 8);
        cstags.put("9CLR", 9);
        cstags.put("ACLR", 10);
        cstags.put("BCLR", 11);
        cstags.put("CCLR", 12);
        cstags.put("DCLR", 13);
        cstags.put("ECLR", 14);
        cstags.put("FCLR", 15);
    }

    protected ICC_Profile() {
    }

    /*
     * WARNING - Removed back jump from a try to a catch block - possible behaviour change.
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    public static ICC_Profile GetInstance(String object) {
        Object object2;
        block11 : {
            FileInputStream fileInputStream = null;
            object2 = null;
            object = new FileInputStream((String)object);
            object2 = ICC_Profile.getInstance((InputStream)object);
            try {
                object.close();
                return object2;
            }
            catch (Exception exception) {
                return object2;
            }
            catch (Throwable throwable) {
                object2 = object;
                object = throwable;
                break block11;
            }
            catch (Exception exception) {
                object2 = object;
                object = exception;
                throw new ExceptionConverter((Exception)object);
            }
            catch (Throwable throwable) {
                break block11;
            }
            catch (Exception exception) {
                object2 = fileInputStream;
            }
            {
                throw new ExceptionConverter((Exception)object);
            }
        }
        try {
            object2.close();
        }
        catch (Exception exception) {
            throw object;
        }
        throw object;
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    public static ICC_Profile getInstance(InputStream inputStream) {
        block8 : {
            int n2;
            int n3;
            byte[] arrby = new byte[128];
            int n4 = 0;
            for (n2 = arrby.length; n2 > 0; n2 -= n3, n4 += n3) {
                n3 = inputStream.read(arrby, n4, n2);
                if (n3 < 0) throw new IllegalArgumentException(MessageLocalization.getComposedMessage("invalid.icc.profile", new Object[0]));
            }
            if (arrby[36] != 97) throw new IllegalArgumentException(MessageLocalization.getComposedMessage("invalid.icc.profile", new Object[0]));
            if (arrby[37] != 99) throw new IllegalArgumentException(MessageLocalization.getComposedMessage("invalid.icc.profile", new Object[0]));
            if (arrby[38] != 115) throw new IllegalArgumentException(MessageLocalization.getComposedMessage("invalid.icc.profile", new Object[0]));
            if (arrby[39] != 112) throw new IllegalArgumentException(MessageLocalization.getComposedMessage("invalid.icc.profile", new Object[0]));
            n4 = (arrby[0] & 255) << 24 | (arrby[1] & 255) << 16 | (arrby[2] & 255) << 8 | arrby[3] & 255;
            try {
                byte[] arrby2 = new byte[n4];
                System.arraycopy(arrby, 0, arrby2, 0, arrby.length);
                n2 = n4 - arrby.length;
                n4 = arrby.length;
                while (n2 > 0) {
                    n3 = inputStream.read(arrby2, n4, n2);
                    if (n3 >= 0) {
                        n2 -= n3;
                        n4 += n3;
                        continue;
                    }
                    break block8;
                }
                return ICC_Profile.getInstance(arrby2);
            }
            catch (Exception exception) {
                throw new ExceptionConverter(exception);
            }
        }
        throw new IllegalArgumentException(MessageLocalization.getComposedMessage("invalid.icc.profile", new Object[0]));
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    public static ICC_Profile getInstance(byte[] object) {
        int n2;
        Integer n3;
        block3 : {
            try {
                n3 = cstags.get(new String((byte[])object, 16, 4, "US-ASCII"));
                if (n3 != null) break block3;
                n2 = 0;
                return ICC_Profile.getInstance(object, n2);
            }
            catch (UnsupportedEncodingException unsupportedEncodingException) {
                throw new ExceptionConverter(unsupportedEncodingException);
            }
        }
        n2 = n3;
        return ICC_Profile.getInstance(object, n2);
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public static ICC_Profile getInstance(byte[] object, int n2) {
        int n3 = ((Object)object).length;
        int n4 = 0;
        if (n3 >= 128 && object[36] == 97 && object[37] == 99 && object[38] == 115 && object[39] == 112) {
            try {
                ICC_Profile iCC_Profile = new ICC_Profile();
                iCC_Profile.data = object;
                object = cstags.get(new String((byte[])object, 16, 4, "US-ASCII"));
                if (object != null) {
                    n4 = object.intValue();
                }
                iCC_Profile.numComponents = n4;
                if (n4 == n2) {
                    return iCC_Profile;
                }
                object = new StringBuilder();
                object.append("ICC profile contains ");
                object.append(n4);
                object.append(" component(s), the image data contains ");
                object.append(n2);
                object.append(" component(s)");
                throw new IllegalArgumentException(object.toString());
            }
            catch (UnsupportedEncodingException unsupportedEncodingException) {
                throw new ExceptionConverter(unsupportedEncodingException);
            }
        }
        throw new IllegalArgumentException(MessageLocalization.getComposedMessage("invalid.icc.profile", new Object[0]));
    }

    public byte[] getData() {
        return this.data;
    }

    public int getNumComponents() {
        return this.numComponents;
    }
}

