/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf;

import com.itextpdf.text.Chunk;
import com.itextpdf.text.Document;
import com.itextpdf.text.Element;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.WritableDirectElement;
import com.itextpdf.text.api.Spaceable;
import com.itextpdf.text.pdf.ColumnText;
import com.itextpdf.text.pdf.PdfContentByte;
import com.itextpdf.text.pdf.PdfDiv;
import com.itextpdf.text.pdf.PdfDocument;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import java.util.Collection;
import java.util.List;

public class FloatLayout {
    protected final ColumnText compositeColumn = new ColumnText(null);
    protected final List<Element> content;
    protected float filledWidth;
    protected float floatLeftX;
    protected float floatRightX;
    protected float leftX;
    protected float maxY;
    protected float minY;
    protected float rightX;
    protected final boolean useAscender;
    protected float yLine;

    public FloatLayout(List<Element> list, boolean bl2) {
        this.compositeColumn.setUseAscender(bl2);
        this.useAscender = bl2;
        this.content = list;
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Lifted jumps to return sites
     */
    private int floatingLayout(List<Element> var1_1, boolean var2_2) {
        var5_3 = this.yLine;
        var15_4 = this.compositeColumn;
        if (var2_2) {
            var15_4 = ColumnText.duplicate(this.compositeColumn);
        }
        var11_5 = this.maxY == this.yLine ? 1 : 0;
        var13_6 = 1;
        var4_7 = 0.0f;
        var3_8 = 0.0f;
        var12_9 = var11_5;
        var11_5 = var13_6;
        do {
            block47 : {
                block45 : {
                    block46 : {
                        block40 : {
                            block44 : {
                                block39 : {
                                    block42 : {
                                        block43 : {
                                            block41 : {
                                                block37 : {
                                                    block38 : {
                                                        var18_18 = var1_1;
                                                        if (var1_1.isEmpty()) break;
                                                        var16_16 = var18_18.get(0);
                                                        var18_18.remove(0);
                                                        if (!(var16_16 instanceof PdfDiv)) break block37;
                                                        var17_17 = (PdfDiv)var16_16;
                                                        var11_5 = var13_6 = var17_17.layout(this.compositeColumn.getCanvas(), this.useAscender, true, this.floatLeftX, this.minY, this.floatRightX, this.yLine);
                                                        if ((var13_6 & 1) != 0) break block38;
                                                        this.yLine = var5_3;
                                                        this.floatLeftX = this.leftX;
                                                        this.floatRightX = this.rightX;
                                                        var11_5 = var13_6 = var17_17.layout(this.compositeColumn.getCanvas(), this.useAscender, true, this.floatLeftX, this.minY, this.floatRightX, this.yLine);
                                                        if ((var13_6 & 1) != 0) break block38;
                                                        var18_18.add(0, var17_17);
                                                        var6_10 = var4_7;
                                                        var11_5 = var13_6;
                                                        break block39;
                                                    }
                                                    if (var17_17.getFloatType() == PdfDiv.FloatType.LEFT) {
                                                        var19_19 = this.compositeColumn.getCanvas();
                                                        var14_15 = this.useAscender;
                                                        var7_11 = this.floatLeftX;
                                                        var8_12 = this.minY;
                                                        var9_13 = this.floatRightX;
                                                        var10_14 = this.yLine;
                                                        var18_18 = var17_17;
                                                        var6_10 = var4_7;
                                                        var11_5 = var17_17.layout((PdfContentByte)var19_19, var14_15, var2_2, var7_11, var8_12, var9_13, var10_14);
                                                        this.floatLeftX += var18_18.getActualWidth();
                                                        var4_7 = var3_8 + var18_18.getActualWidth();
                                                        var3_8 = var6_10;
                                                    } else {
                                                        var18_18 = var17_17;
                                                        var6_10 = var4_7;
                                                        var4_7 = var7_11 = var3_8;
                                                        var3_8 = var6_10;
                                                        if (var18_18.getFloatType() == PdfDiv.FloatType.RIGHT) {
                                                            var11_5 = var18_18.layout(this.compositeColumn.getCanvas(), this.useAscender, var2_2, this.floatRightX - var18_18.getActualWidth() - 0.01f, this.minY, this.floatRightX, this.yLine);
                                                            this.floatRightX -= var18_18.getActualWidth();
                                                            var3_8 = var6_10 + var18_18.getActualWidth();
                                                            var4_7 = var7_11;
                                                        }
                                                    }
                                                    var5_3 = Math.min(var5_3, this.yLine - var17_17.getActualHeight());
                                                    var6_10 = var4_7;
                                                    break block40;
                                                }
                                                var17_17 = var16_16;
                                                if (this.minY > var5_3) {
                                                    var11_5 = 2;
                                                    var18_18.add(0, (Element)var17_17);
                                                    if (var15_4 == null) break;
                                                    var15_4.setText(null);
                                                    break;
                                                }
                                                if (var17_17 instanceof Spaceable && (var12_9 == 0 || !var15_4.isIgnoreSpacingBefore() || ((Spaceable)var17_17).getPaddingTop() != 0.0f)) {
                                                    this.yLine -= ((Spaceable)var17_17).getSpacingBefore();
                                                }
                                                if ((var14_15 = var2_2) && var17_17 instanceof PdfPTable) {
                                                    var15_4.addElement(new PdfPTable((PdfPTable)var17_17));
                                                } else {
                                                    var15_4.addElement((Element)var17_17);
                                                }
                                                if (this.yLine > var5_3) {
                                                    var15_4.setSimpleColumn(this.floatLeftX, this.yLine, this.floatRightX, var5_3);
                                                } else {
                                                    var15_4.setSimpleColumn(this.floatLeftX, this.yLine, this.floatRightX, this.minY);
                                                }
                                                var15_4.setFilledWidth(0.0f);
                                                var11_5 = var15_4.go(var14_15);
                                                if (this.yLine <= var5_3 || this.floatLeftX <= this.leftX && this.floatRightX >= this.rightX || (var11_5 & 1) != 0) break block41;
                                                this.yLine = var5_3;
                                                this.floatLeftX = this.leftX;
                                                this.floatRightX = this.rightX;
                                                if (var3_8 != 0.0f && var4_7 != 0.0f) {
                                                    this.filledWidth = this.rightX - this.leftX;
                                                } else {
                                                    if (var3_8 > this.filledWidth) {
                                                        this.filledWidth = var3_8;
                                                    }
                                                    if (var4_7 > this.filledWidth) {
                                                        this.filledWidth = var4_7;
                                                    }
                                                }
                                                if (var14_15 && var17_17 instanceof PdfPTable) {
                                                    var15_4.addElement(new PdfPTable((PdfPTable)var17_17));
                                                }
                                                var15_4.setSimpleColumn(this.floatLeftX, this.yLine, this.floatRightX, this.minY);
                                                var11_5 = var15_4.go(var14_15);
                                                this.yLine = var5_3 = var15_4.getYLine() + var15_4.getDescender();
                                                if (var15_4.getFilledWidth() > this.filledWidth) {
                                                    this.filledWidth = var15_4.getFilledWidth();
                                                }
                                                var3_8 = 0.0f;
                                                var4_7 = 0.0f;
                                                break block42;
                                            }
                                            if (var4_7 <= 0.0f) break block43;
                                            var6_10 = var4_7 + var15_4.getFilledWidth();
                                            ** GOTO lbl109
                                        }
                                        if (var3_8 > 0.0f) {
                                            var3_8 += var15_4.getFilledWidth();
                                        } else {
                                            var6_10 = var4_7;
                                            if (var15_4.getFilledWidth() > this.filledWidth) {
                                                this.filledWidth = var15_4.getFilledWidth();
                                                var6_10 = var4_7;
                                            }
lbl109: // 4 sources:
                                            var4_7 = var6_10;
                                        }
                                        var5_3 = Math.min(var15_4.getYLine() + var15_4.getDescender(), var5_3);
                                        this.yLine = var15_4.getYLine() + var15_4.getDescender();
                                        var6_10 = var4_7;
                                        var4_7 = var3_8;
                                        var3_8 = var6_10;
                                    }
                                    if ((var11_5 & 1) != 0) break block44;
                                    if (!var14_15) {
                                        var18_18.addAll(0, var15_4.getCompositeElements());
                                        var15_4.getCompositeElements().clear();
                                        var6_10 = var3_8;
                                        var3_8 = var4_7;
                                    } else {
                                        var18_18.add(0, var17_17);
                                        var15_4.setText(null);
                                        var6_10 = var3_8;
                                        var3_8 = var4_7;
                                    }
                                }
                                var4_7 = var6_10;
                                break;
                            }
                            var15_4.setText(null);
                            var6_10 = var4_7;
                        }
                        var14_15 = var16_16 instanceof Paragraph;
                        if (var14_15) {
                            for (Object var18_18 : (Paragraph)var16_16) {
                                if (!(var18_18 instanceof WritableDirectElement) || (var18_18 = (WritableDirectElement)var18_18).getDirectElementType() != 1 || var2_2) continue;
                                var19_19 = this.compositeColumn.getCanvas().getPdfWriter();
                                var20_20 = this.compositeColumn.getCanvas().getPdfDocument();
                                var4_7 = var20_20.currentHeight;
                                var20_20.currentHeight = var20_20.top() - this.yLine - var20_20.indentation.indentTop;
                                var18_18.write((PdfWriter)var19_19, var20_20);
                                var20_20.currentHeight = var4_7;
                            }
                        }
                        if (var12_9 == 0 || var16_16.getChunks().size() != 0) break block45;
                        if (!var14_15) break block46;
                        if ((var16_16 = (Element)((Paragraph)var16_16).get(0)) instanceof WritableDirectElement && ((WritableDirectElement)var16_16).getDirectElementType() != 1) {
                            var12_9 = 0;
                        }
                        break block47;
                    }
                    if (!(var16_16 instanceof Spaceable)) break block47;
                }
                var12_9 = 0;
            }
            var4_7 = var3_8;
            var3_8 = var6_10;
        } while (true);
        if (var3_8 != 0.0f && var4_7 != 0.0f) {
            this.filledWidth = this.rightX - this.leftX;
        } else {
            if (var3_8 > this.filledWidth) {
                this.filledWidth = var3_8;
            }
            if (var4_7 > this.filledWidth) {
                this.filledWidth = var4_7;
            }
        }
        this.yLine = var5_3;
        this.floatLeftX = this.leftX;
        this.floatRightX = this.rightX;
        return var11_5;
    }

    public float getFilledWidth() {
        return this.filledWidth;
    }

    public int getRunDirection() {
        return this.compositeColumn.getRunDirection();
    }

    public float getYLine() {
        return this.yLine;
    }

    /*
     * Exception decompiling
     */
    public int layout(PdfContentByte var1_1, boolean var2_2) {
        // This method has failed to decompile.  When submitting a bug report, please provide this stack trace, and (if you hold appropriate legal rights) the relevant class file.
        // org.benf.cfr.reader.util.ConfusedCFRException: Started 2 blocks at once
        // org.benf.cfr.reader.bytecode.analysis.opgraph.Op04StructuredStatement.getStartingBlocks(Op04StructuredStatement.java:393)
        // org.benf.cfr.reader.bytecode.analysis.opgraph.Op04StructuredStatement.buildNestedBlocks(Op04StructuredStatement.java:471)
        // org.benf.cfr.reader.bytecode.analysis.opgraph.Op03SimpleStatement.createInitialStructuredBlock(Op03SimpleStatement.java:2960)
        // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisInner(CodeAnalyser.java:818)
        // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisOrWrapFail(CodeAnalyser.java:196)
        // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysis(CodeAnalyser.java:141)
        // org.benf.cfr.reader.entities.attributes.AttributeCode.analyse(AttributeCode.java:95)
        // org.benf.cfr.reader.entities.Method.analyse(Method.java:372)
        // org.benf.cfr.reader.entities.ClassFile.analyseMid(ClassFile.java:867)
        // org.benf.cfr.reader.entities.ClassFile.analyseTop(ClassFile.java:768)
        // org.benf.cfr.reader.Main.doJar(Main.java:141)
        // org.benf.cfr.reader.Main.main(Main.java:242)
        throw new IllegalStateException("Decompilation failed");
    }

    public void setFilledWidth(float f2) {
        this.filledWidth = f2;
    }

    public void setRunDirection(int n2) {
        this.compositeColumn.setRunDirection(n2);
    }

    public void setSimpleColumn(float f2, float f3, float f4, float f5) {
        this.leftX = Math.min(f2, f4);
        this.maxY = Math.max(f3, f5);
        this.minY = Math.min(f3, f5);
        this.rightX = Math.max(f2, f4);
        this.floatLeftX = this.leftX;
        this.floatRightX = this.rightX;
        this.yLine = this.maxY;
        this.filledWidth = 0.0f;
    }

    public void setYLine(float f2) {
        this.yLine = f2;
    }
}

