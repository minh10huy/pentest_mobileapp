/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf;

import com.itextpdf.text.pdf.PdfBoolean;
import com.itextpdf.text.pdf.PdfDictionary;
import com.itextpdf.text.pdf.PdfIndirectReference;
import com.itextpdf.text.pdf.PdfName;
import com.itextpdf.text.pdf.PdfNull;
import com.itextpdf.text.pdf.PdfNumber;
import com.itextpdf.text.pdf.PdfObject;
import com.itextpdf.text.pdf.PdfReader;
import com.itextpdf.text.pdf.PdfStream;
import com.itextpdf.text.pdf.PdfString;
import com.itextpdf.text.pdf.PdfWriter;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;
import java.util.ListIterator;

public class PdfArray
extends PdfObject
implements Iterable<PdfObject> {
    protected ArrayList<PdfObject> arrayList;

    public PdfArray() {
        super(5);
        this.arrayList = new ArrayList();
    }

    public PdfArray(int n2) {
        super(5);
        this.arrayList = new ArrayList(n2);
    }

    public PdfArray(PdfArray pdfArray) {
        super(5);
        this.arrayList = new ArrayList<PdfObject>(pdfArray.arrayList);
    }

    public PdfArray(PdfObject pdfObject) {
        super(5);
        this.arrayList = new ArrayList();
        this.arrayList.add(pdfObject);
    }

    public PdfArray(List<PdfObject> object) {
        this();
        object = object.iterator();
        while (object.hasNext()) {
            this.add((PdfObject)object.next());
        }
    }

    public PdfArray(float[] arrf) {
        super(5);
        this.arrayList = new ArrayList();
        this.add(arrf);
    }

    public PdfArray(int[] arrn) {
        super(5);
        this.arrayList = new ArrayList();
        this.add(arrn);
    }

    public void add(int n2, PdfObject pdfObject) {
        this.arrayList.add(n2, pdfObject);
    }

    public boolean add(PdfObject pdfObject) {
        return this.arrayList.add(pdfObject);
    }

    public boolean add(float[] arrf) {
        for (int i2 = 0; i2 < arrf.length; ++i2) {
            this.arrayList.add(new PdfNumber(arrf[i2]));
        }
        return true;
    }

    public boolean add(int[] arrn) {
        for (int i2 = 0; i2 < arrn.length; ++i2) {
            this.arrayList.add(new PdfNumber(arrn[i2]));
        }
        return true;
    }

    public void addFirst(PdfObject pdfObject) {
        this.arrayList.add(0, pdfObject);
    }

    public double[] asDoubleArray() {
        double[] arrd = new double[this.size()];
        for (int i2 = 0; i2 < arrd.length; ++i2) {
            arrd[i2] = this.getAsNumber(i2).doubleValue();
        }
        return arrd;
    }

    public long[] asLongArray() {
        long[] arrl = new long[this.size()];
        for (int i2 = 0; i2 < arrl.length; ++i2) {
            arrl[i2] = this.getAsNumber(i2).longValue();
        }
        return arrl;
    }

    public boolean contains(PdfObject pdfObject) {
        return this.arrayList.contains(pdfObject);
    }

    @Deprecated
    public ArrayList<PdfObject> getArrayList() {
        return this.arrayList;
    }

    public PdfArray getAsArray(int n2) {
        PdfObject pdfObject = this.getDirectObject(n2);
        if (pdfObject != null && pdfObject.isArray()) {
            return (PdfArray)pdfObject;
        }
        return null;
    }

    public PdfBoolean getAsBoolean(int n2) {
        PdfObject pdfObject = this.getDirectObject(n2);
        if (pdfObject != null && pdfObject.isBoolean()) {
            return (PdfBoolean)pdfObject;
        }
        return null;
    }

    public PdfDictionary getAsDict(int n2) {
        PdfObject pdfObject = this.getDirectObject(n2);
        if (pdfObject != null && pdfObject.isDictionary()) {
            return (PdfDictionary)pdfObject;
        }
        return null;
    }

    public PdfIndirectReference getAsIndirectObject(int n2) {
        PdfObject pdfObject = this.getPdfObject(n2);
        if (pdfObject instanceof PdfIndirectReference) {
            return (PdfIndirectReference)pdfObject;
        }
        return null;
    }

    public PdfName getAsName(int n2) {
        PdfObject pdfObject = this.getDirectObject(n2);
        if (pdfObject != null && pdfObject.isName()) {
            return (PdfName)pdfObject;
        }
        return null;
    }

    public PdfNumber getAsNumber(int n2) {
        PdfObject pdfObject = this.getDirectObject(n2);
        if (pdfObject != null && pdfObject.isNumber()) {
            return (PdfNumber)pdfObject;
        }
        return null;
    }

    public PdfStream getAsStream(int n2) {
        PdfObject pdfObject = this.getDirectObject(n2);
        if (pdfObject != null && pdfObject.isStream()) {
            return (PdfStream)pdfObject;
        }
        return null;
    }

    public PdfString getAsString(int n2) {
        PdfObject pdfObject = this.getDirectObject(n2);
        if (pdfObject != null && pdfObject.isString()) {
            return (PdfString)pdfObject;
        }
        return null;
    }

    public PdfObject getDirectObject(int n2) {
        return PdfReader.getPdfObject(this.getPdfObject(n2));
    }

    public PdfObject getPdfObject(int n2) {
        return this.arrayList.get(n2);
    }

    public boolean isEmpty() {
        return this.arrayList.isEmpty();
    }

    @Override
    public Iterator<PdfObject> iterator() {
        return this.arrayList.iterator();
    }

    public ListIterator<PdfObject> listIterator() {
        return this.arrayList.listIterator();
    }

    public PdfObject remove(int n2) {
        return this.arrayList.remove(n2);
    }

    public PdfObject set(int n2, PdfObject pdfObject) {
        return this.arrayList.set(n2, pdfObject);
    }

    public int size() {
        return this.arrayList.size();
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Lifted jumps to return sites
     */
    @Override
    public void toPdf(PdfWriter var1_1, OutputStream var2_2) {
        PdfWriter.checkPdfIsoConformance(var1_1, 11, this);
        var2_2.write(91);
        var6_3 = this.arrayList.iterator();
        if (!var6_3.hasNext()) ** GOTO lbl10
        var4_5 = var5_4 = var6_3.next();
        if (var5_4 == null) {
            var4_5 = PdfNull.PDFNULL;
        }
        do {
            var4_5.toPdf(var1_1, var2_2);
lbl10: // 2 sources:
            if (!var6_3.hasNext()) {
                var2_2.write(93);
                return;
            }
            var5_4 = var4_5 = var6_3.next();
            if (var4_5 == null) {
                var5_4 = PdfNull.PDFNULL;
            }
            var3_6 = var5_4.type();
            var4_5 = var5_4;
            if (var3_6 == 5) continue;
            var4_5 = var5_4;
            if (var3_6 == 6) continue;
            var4_5 = var5_4;
            if (var3_6 == 4) continue;
            var4_5 = var5_4;
            if (var3_6 == 3) continue;
            var2_2.write(32);
            var4_5 = var5_4;
        } while (true);
    }

    @Override
    public String toString() {
        return this.arrayList.toString();
    }
}

