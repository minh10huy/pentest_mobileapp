/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf.qrcode;

import com.itextpdf.text.pdf.qrcode.GF256Poly;

public final class GF256 {
    public static final GF256 DATA_MATRIX_FIELD;
    public static final GF256 QR_CODE_FIELD;
    private final int[] expTable = new int[256];
    private final int[] logTable = new int[256];
    private final GF256Poly one;
    private final GF256Poly zero;

    static {
        QR_CODE_FIELD = new GF256(285);
        DATA_MATRIX_FIELD = new GF256(301);
    }

    private GF256(int n2) {
        int n3 = 1;
        for (int i2 = 0; i2 < 256; ++i2) {
            int n4;
            this.expTable[i2] = n3;
            n3 = n4 = n3 << 1;
            if (n4 < 256) continue;
            n3 = n4 ^ n2;
        }
        n2 = 0;
        while (n2 < 255) {
            this.logTable[this.expTable[n2]] = n2++;
        }
        this.zero = new GF256Poly(this, new int[]{0});
        this.one = new GF256Poly(this, new int[]{1});
    }

    static int addOrSubtract(int n2, int n3) {
        return n2 ^ n3;
    }

    GF256Poly buildMonomial(int n2, int n3) {
        if (n2 >= 0) {
            if (n3 == 0) {
                return this.zero;
            }
            int[] arrn = new int[n2 + 1];
            arrn[0] = n3;
            return new GF256Poly(this, arrn);
        }
        throw new IllegalArgumentException();
    }

    int exp(int n2) {
        return this.expTable[n2];
    }

    GF256Poly getOne() {
        return this.one;
    }

    GF256Poly getZero() {
        return this.zero;
    }

    int inverse(int n2) {
        if (n2 != 0) {
            return this.expTable[255 - this.logTable[n2]];
        }
        throw new ArithmeticException();
    }

    int log(int n2) {
        if (n2 != 0) {
            return this.logTable[n2];
        }
        throw new IllegalArgumentException();
    }

    int multiply(int n2, int n3) {
        if (n2 != 0 && n3 != 0) {
            if (n2 == 1) {
                return n3;
            }
            if (n3 == 1) {
                return n2;
            }
            return this.expTable[(this.logTable[n2] + this.logTable[n3]) % 255];
        }
        return 0;
    }
}

