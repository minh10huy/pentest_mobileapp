/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf;

import com.itextpdf.text.log.LoggerFactory;
import com.itextpdf.text.pdf.BaseFont;
import com.itextpdf.text.pdf.CFFFontSubset;
import com.itextpdf.text.pdf.PdfDictionary;
import com.itextpdf.text.pdf.PdfIndirectObject;
import com.itextpdf.text.pdf.PdfIndirectReference;
import com.itextpdf.text.pdf.PdfObject;
import com.itextpdf.text.pdf.PdfStream;
import com.itextpdf.text.pdf.PdfWriter;
import com.itextpdf.text.pdf.RandomAccessFileOrArray;
import com.itextpdf.text.pdf.TrueTypeFontSubSet;
import com.itextpdf.text.pdf.TrueTypeFontUnicode;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Set;

public class TtfUnicodeWriter {
    protected PdfWriter writer = null;

    public TtfUnicodeWriter(PdfWriter pdfWriter) {
        this.writer = pdfWriter;
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public void writeFont(TrueTypeFontUnicode object, PdfIndirectReference pdfIndirectReference, Object[] object2, byte[] object3) {
        Serializable serializable;
        Object object4;
        Object object5;
        block15 : {
            block12 : {
                block14 : {
                    block13 : {
                        serializable = (HashMap)object2[0];
                        object.addRangeUni((HashMap<Integer, int[]>)serializable, true, object.subset);
                        object3 = (int[][])serializable.values().toArray((T[])new int[0][]);
                        Arrays.sort(object3, object);
                        if (!object.cff) break block12;
                        object5 = object.readCffFont();
                        if (object.subset) break block13;
                        object2 = object3;
                        object4 = object5;
                        if (object.subsetRanges == null) break block14;
                    }
                    object2 = new CFFFontSubset(new RandomAccessFileOrArray((byte[])object5), (HashMap<Integer, int[]>)serializable);
                    try {
                        object4 = object2.Process(object2.getNames()[0]);
                        object2 = object3;
                    }
                    catch (Exception exception) {
                        LoggerFactory.getLogger(TtfUnicodeWriter.class).error("Issue in CFF font subsetting.Subsetting was disabled", exception);
                        object.setSubset(false);
                        object.addRangeUni((HashMap<Integer, int[]>)serializable, true, object.subset);
                        object2 = (int[][])serializable.values().toArray((T[])new int[0][]);
                        Arrays.sort(object2, object);
                        object4 = object5;
                    }
                }
                object3 = new BaseFont.StreamFont((byte[])object4, "CIDFontType0C", object.compressionLevel);
                object3 = this.writer.addToBody((PdfObject)object3);
                break block15;
            }
            if (!object.subset && object.directoryOffset == 0) {
                object2 = object.getFullFont();
            } else {
                object4 = object.rf;
                synchronized (object4) {
                    object2 = new TrueTypeFontSubSet(object.fileName, new RandomAccessFileOrArray(object.rf), new HashSet<Integer>(serializable.keySet()), object.directoryOffset, true, false).process();
                }
            }
            int n2 = ((Object[])object2).length;
            int n3 = object.compressionLevel;
            object2 = new BaseFont.StreamFont((byte[])object2, new int[]{n2}, n3);
            object4 = this.writer.addToBody((PdfObject)object2);
            object2 = object3;
            object3 = object4;
        }
        object5 = object3.getIndirectReference();
        object3 = "";
        if (object.subset) {
            object3 = TrueTypeFontUnicode.createSubsetPrefix();
        }
        object4 = null;
        object5 = object.getFontDescriptor((PdfIndirectReference)object5, (String)object3, null);
        object5 = object.getCIDFontType2(this.writer.addToBody((PdfObject)object5).getIndirectReference(), (String)object3, (Object[])object2);
        object5 = this.writer.addToBody((PdfObject)object5).getIndirectReference();
        serializable = object.getToUnicode((Object[])object2);
        object2 = object4;
        if (serializable != null) {
            object2 = this.writer.addToBody((PdfObject)serializable).getIndirectReference();
        }
        object = object.getFontBaseType((PdfIndirectReference)object5, (String)object3, (PdfIndirectReference)object2);
        this.writer.addToBody((PdfObject)object, pdfIndirectReference);
    }
}

