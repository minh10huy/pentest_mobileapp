/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf;

import com.itextpdf.text.BaseColor;
import com.itextpdf.text.ExceptionConverter;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.error_messages.MessageLocalization;
import com.itextpdf.text.pdf.Barcode;
import com.itextpdf.text.pdf.BaseFont;
import com.itextpdf.text.pdf.PdfContentByte;
import java.util.Arrays;

public class BarcodeEAN
extends Barcode {
    private static final byte[][] BARS;
    private static final int EVEN = 1;
    private static final int[] GUARD_EAN13;
    private static final int[] GUARD_EAN8;
    private static final int[] GUARD_EMPTY;
    private static final int[] GUARD_UPCA;
    private static final int[] GUARD_UPCE;
    private static final int ODD = 0;
    private static final byte[][] PARITY13;
    private static final byte[][] PARITY2;
    private static final byte[][] PARITY5;
    private static final byte[][] PARITYE;
    private static final float[] TEXTPOS_EAN13;
    private static final float[] TEXTPOS_EAN8;
    private static final int TOTALBARS_EAN13 = 59;
    private static final int TOTALBARS_EAN8 = 43;
    private static final int TOTALBARS_SUPP2 = 13;
    private static final int TOTALBARS_SUPP5 = 31;
    private static final int TOTALBARS_UPCE = 33;

    static {
        GUARD_EMPTY = new int[0];
        GUARD_UPCA = new int[]{0, 2, 4, 6, 28, 30, 52, 54, 56, 58};
        GUARD_EAN13 = new int[]{0, 2, 28, 30, 56, 58};
        GUARD_EAN8 = new int[]{0, 2, 20, 22, 40, 42};
        GUARD_UPCE = new int[]{0, 2, 28, 30, 32};
        TEXTPOS_EAN13 = new float[]{6.5f, 13.5f, 20.5f, 27.5f, 34.5f, 41.5f, 53.5f, 60.5f, 67.5f, 74.5f, 81.5f, 88.5f};
        TEXTPOS_EAN8 = new float[]{6.5f, 13.5f, 20.5f, 27.5f, 39.5f, 46.5f, 53.5f, 60.5f};
        BARS = new byte[][]{{3, 2, 1, 1}, {2, 2, 2, 1}, {2, 1, 2, 2}, {1, 4, 1, 1}, {1, 1, 3, 2}, {1, 2, 3, 1}, {1, 1, 1, 4}, {1, 3, 1, 2}, {1, 2, 1, 3}, {3, 1, 1, 2}};
        byte[] arrby = new byte[]{0, 0, 0, 0, 0, 0};
        byte[] arrby2 = new byte[]{0, 0, 1, 0, 1, 1};
        byte[] arrby3 = new byte[]{0, 0, 1, 1, 0, 1};
        byte[] arrby4 = new byte[]{0, 0, 1, 1, 1, 0};
        byte[] arrby5 = new byte[]{0, 1, 0, 0, 1, 1};
        byte[] arrby6 = new byte[]{0, 1, 1, 1, 0, 0};
        byte[] arrby7 = new byte[]{0, 1, 0, 1, 0, 1};
        byte[] arrby8 = new byte[]{0, 1, 0, 1, 1, 0};
        byte[] arrby9 = new byte[]{0, 1, 1, 0, 1, 0};
        PARITY13 = new byte[][]{arrby, arrby2, arrby3, arrby4, arrby5, {0, 1, 1, 0, 0, 1}, arrby6, arrby7, arrby8, arrby9};
        arrby = new byte[]{0, 1};
        arrby2 = new byte[]{1, 0};
        PARITY2 = new byte[][]{{0, 0}, arrby, arrby2, {1, 1}};
        arrby = new byte[]{1, 0, 1, 0, 0};
        arrby2 = new byte[]{1, 0, 0, 1, 0};
        arrby3 = new byte[]{0, 0, 1, 1, 0};
        arrby4 = new byte[]{0, 0, 0, 1, 1};
        arrby5 = new byte[]{0, 0, 1, 0, 1};
        PARITY5 = new byte[][]{{1, 1, 0, 0, 0}, arrby, arrby2, {1, 0, 0, 0, 1}, {0, 1, 1, 0, 0}, arrby3, arrby4, {0, 1, 0, 1, 0}, {0, 1, 0, 0, 1}, arrby5};
        PARITYE = new byte[][]{{1, 1, 1, 0, 0, 0}, {1, 1, 0, 1, 0, 0}, {1, 1, 0, 0, 1, 0}, {1, 1, 0, 0, 0, 1}, {1, 0, 1, 1, 0, 0}, {1, 0, 0, 1, 1, 0}, {1, 0, 0, 0, 1, 1}, {1, 0, 1, 0, 1, 0}, {1, 0, 1, 0, 0, 1}, {1, 0, 0, 1, 0, 1}};
    }

    public BarcodeEAN() {
        try {
            this.x = 0.8f;
            this.font = BaseFont.createFont("Helvetica", "winansi", false);
            this.baseline = this.size = 8.0f;
            this.barHeight = this.size * 3.0f;
            this.guardBars = true;
            this.codeType = 1;
            this.code = "";
            return;
        }
        catch (Exception exception) {
            throw new ExceptionConverter(exception);
        }
    }

    public static int calculateEANParity(String string2) {
        int n2 = 3;
        int n3 = 0;
        for (int i2 = string2.length() - 1; i2 >= 0; --i2) {
            n3 += (string2.charAt(i2) - 48) * n2;
            n2 ^= 2;
        }
        return (10 - n3 % 10) % 10;
    }

    public static String convertUPCAtoUPCE(String string2) {
        if (string2.length() == 12) {
            if (!string2.startsWith("0") && !string2.startsWith("1")) {
                return null;
            }
            if (!(string2.substring(3, 6).equals("000") || string2.substring(3, 6).equals("100") || string2.substring(3, 6).equals("200"))) {
                if (string2.substring(4, 6).equals("00")) {
                    if (string2.substring(6, 9).equals("000")) {
                        StringBuilder stringBuilder = new StringBuilder();
                        stringBuilder.append(string2.substring(0, 1));
                        stringBuilder.append(string2.substring(1, 4));
                        stringBuilder.append(string2.substring(9, 11));
                        stringBuilder.append("3");
                        stringBuilder.append(string2.substring(11));
                        return stringBuilder.toString();
                    }
                } else if (string2.substring(5, 6).equals("0")) {
                    if (string2.substring(6, 10).equals("0000")) {
                        StringBuilder stringBuilder = new StringBuilder();
                        stringBuilder.append(string2.substring(0, 1));
                        stringBuilder.append(string2.substring(1, 5));
                        stringBuilder.append(string2.substring(10, 11));
                        stringBuilder.append("4");
                        stringBuilder.append(string2.substring(11));
                        return stringBuilder.toString();
                    }
                } else if (string2.charAt(10) >= '5' && string2.substring(6, 10).equals("0000")) {
                    StringBuilder stringBuilder = new StringBuilder();
                    stringBuilder.append(string2.substring(0, 1));
                    stringBuilder.append(string2.substring(1, 6));
                    stringBuilder.append(string2.substring(10, 11));
                    stringBuilder.append(string2.substring(11));
                    return stringBuilder.toString();
                }
            } else if (string2.substring(6, 8).equals("00")) {
                StringBuilder stringBuilder = new StringBuilder();
                stringBuilder.append(string2.substring(0, 1));
                stringBuilder.append(string2.substring(1, 3));
                stringBuilder.append(string2.substring(8, 11));
                stringBuilder.append(string2.substring(3, 4));
                stringBuilder.append(string2.substring(11));
                return stringBuilder.toString();
            }
        }
        return null;
    }

    public static byte[] getBarsEAN13(String arrby) {
        int n2;
        int n3;
        int[] arrn = new int[arrby.length()];
        for (n2 = 0; n2 < arrn.length; ++n2) {
            arrn[n2] = arrby.charAt(n2) - 48;
        }
        arrby = new byte[59];
        arrby[0] = 1;
        arrby[1] = 1;
        arrby[2] = 1;
        byte[] arrby2 = PARITY13[arrn[0]];
        int n4 = 0;
        n2 = 3;
        while (n4 < arrby2.length) {
            n3 = n4 + 1;
            int n5 = arrn[n3];
            byte[] arrby3 = BARS[n5];
            if (arrby2[n4] == 0) {
                n4 = n2 + 1;
                arrby[n2] = arrby3[0];
                n2 = n4 + 1;
                arrby[n4] = arrby3[1];
                n4 = n2 + 1;
                arrby[n2] = arrby3[2];
                n2 = n4 + 1;
                arrby[n4] = arrby3[3];
            } else {
                n4 = n2 + 1;
                arrby[n2] = arrby3[3];
                n2 = n4 + 1;
                arrby[n4] = arrby3[2];
                n4 = n2 + 1;
                arrby[n2] = arrby3[1];
                n2 = n4 + 1;
                arrby[n4] = arrby3[0];
            }
            n4 = n3;
        }
        n4 = n2 + 1;
        arrby[n2] = 1;
        n2 = n4 + 1;
        arrby[n4] = 1;
        n4 = n2 + 1;
        arrby[n2] = 1;
        n2 = n4 + 1;
        arrby[n4] = 1;
        n4 = n2 + 1;
        arrby[n2] = 1;
        for (n2 = 7; n2 < 13; ++n2) {
            n3 = arrn[n2];
            arrby2 = BARS[n3];
            n3 = n4 + 1;
            arrby[n4] = arrby2[0];
            n4 = n3 + 1;
            arrby[n3] = arrby2[1];
            n3 = n4 + 1;
            arrby[n4] = arrby2[2];
            n4 = n3 + 1;
            arrby[n3] = arrby2[3];
        }
        n2 = n4 + 1;
        arrby[n4] = 1;
        arrby[n2] = 1;
        arrby[n2 + 1] = 1;
        return arrby;
    }

    public static byte[] getBarsEAN8(String arrby) {
        int n2;
        byte[] arrby2;
        int n3;
        int[] arrn = new int[arrby.length()];
        for (n2 = 0; n2 < arrn.length; ++n2) {
            arrn[n2] = arrby.charAt(n2) - 48;
        }
        arrby = new byte[43];
        arrby[0] = 1;
        arrby[1] = 1;
        arrby[2] = 1;
        n2 = 0;
        int n4 = 3;
        do {
            n3 = 4;
            if (n2 >= 4) break;
            n3 = arrn[n2];
            arrby2 = BARS[n3];
            n3 = n4 + 1;
            arrby[n4] = arrby2[0];
            n4 = n3 + 1;
            arrby[n3] = arrby2[1];
            n3 = n4 + 1;
            arrby[n4] = arrby2[2];
            n4 = n3 + 1;
            arrby[n3] = arrby2[3];
            ++n2;
        } while (true);
        n2 = n4 + 1;
        arrby[n4] = 1;
        n4 = n2 + 1;
        arrby[n2] = 1;
        n2 = n4 + 1;
        arrby[n4] = 1;
        int n5 = n2 + 1;
        arrby[n2] = 1;
        n4 = n5 + 1;
        arrby[n5] = 1;
        for (n2 = n3; n2 < 8; ++n2) {
            n3 = arrn[n2];
            arrby2 = BARS[n3];
            n3 = n4 + 1;
            arrby[n4] = arrby2[0];
            n4 = n3 + 1;
            arrby[n3] = arrby2[1];
            n3 = n4 + 1;
            arrby[n4] = arrby2[2];
            n4 = n3 + 1;
            arrby[n3] = arrby2[3];
        }
        n2 = n4 + 1;
        arrby[n4] = 1;
        arrby[n2] = 1;
        arrby[n2 + 1] = 1;
        return arrby;
    }

    public static byte[] getBarsSupplemental2(String arrby) {
        int n2;
        int[] arrn = new int[2];
        for (n2 = 0; n2 < arrn.length; ++n2) {
            arrn[n2] = arrby.charAt(n2) - 48;
        }
        arrby = new byte[13];
        n2 = arrn[0];
        int n3 = arrn[1];
        arrby[0] = 1;
        arrby[1] = 1;
        arrby[2] = 2;
        byte[] arrby2 = PARITY2[(n2 * 10 + n3) % 4];
        n2 = 3;
        for (n3 = 0; n3 < arrby2.length; ++n3) {
            int n4;
            int n5 = n2;
            if (n3 == 1) {
                n4 = n2 + 1;
                arrby[n2] = 1;
                n5 = n4 + 1;
                arrby[n4] = 1;
            }
            n2 = arrn[n3];
            byte[] arrby3 = BARS[n2];
            if (arrby2[n3] == 0) {
                n2 = n5 + 1;
                arrby[n5] = arrby3[0];
                n5 = n2 + 1;
                arrby[n2] = arrby3[1];
                n4 = n5 + 1;
                arrby[n5] = arrby3[2];
                n2 = n4 + 1;
                arrby[n4] = arrby3[3];
                continue;
            }
            n2 = n5 + 1;
            arrby[n5] = arrby3[3];
            n5 = n2 + 1;
            arrby[n2] = arrby3[2];
            n4 = n5 + 1;
            arrby[n5] = arrby3[1];
            n2 = n4 + 1;
            arrby[n4] = arrby3[0];
        }
        return arrby;
    }

    public static byte[] getBarsSupplemental5(String arrby) {
        int n2;
        int[] arrn = new int[5];
        for (n2 = 0; n2 < arrn.length; ++n2) {
            arrn[n2] = arrby.charAt(n2) - 48;
        }
        arrby = new byte[31];
        n2 = arrn[0];
        int n3 = arrn[2];
        int n4 = arrn[4];
        int n5 = arrn[1];
        int n6 = arrn[3];
        arrby[0] = 1;
        arrby[1] = 1;
        arrby[2] = 2;
        byte[] arrby2 = PARITY5[((n2 + n3 + n4) * 3 + (n5 + n6) * 9) % 10];
        n2 = 3;
        for (n3 = 0; n3 < arrby2.length; ++n3) {
            n4 = n2;
            if (n3 != 0) {
                n5 = n2 + 1;
                arrby[n2] = 1;
                n4 = n5 + 1;
                arrby[n5] = 1;
            }
            n2 = arrn[n3];
            byte[] arrby3 = BARS[n2];
            if (arrby2[n3] == 0) {
                n2 = n4 + 1;
                arrby[n4] = arrby3[0];
                n4 = n2 + 1;
                arrby[n2] = arrby3[1];
                n5 = n4 + 1;
                arrby[n4] = arrby3[2];
                n2 = n5 + 1;
                arrby[n5] = arrby3[3];
                continue;
            }
            n2 = n4 + 1;
            arrby[n4] = arrby3[3];
            n4 = n2 + 1;
            arrby[n2] = arrby3[2];
            n5 = n4 + 1;
            arrby[n4] = arrby3[1];
            n2 = n5 + 1;
            arrby[n5] = arrby3[0];
        }
        return arrby;
    }

    public static byte[] getBarsUPCE(String arrby) {
        int n2;
        int[] arrn = new int[arrby.length()];
        for (n2 = 0; n2 < arrn.length; ++n2) {
            arrn[n2] = arrby.charAt(n2) - 48;
        }
        arrby = new byte[33];
        int n3 = arrn[0] != 0 ? 1 : 0;
        arrby[0] = 1;
        arrby[1] = 1;
        arrby[2] = 1;
        byte[] arrby2 = PARITYE[arrn[arrn.length - 1]];
        n2 = 3;
        for (int i2 = 1; i2 < arrn.length - 1; ++i2) {
            int n4 = arrn[i2];
            byte[] arrby3 = BARS[n4];
            if (arrby2[i2 - 1] == n3) {
                n4 = n2 + 1;
                arrby[n2] = arrby3[0];
                n2 = n4 + 1;
                arrby[n4] = arrby3[1];
                n4 = n2 + 1;
                arrby[n2] = arrby3[2];
                n2 = n4 + 1;
                arrby[n4] = arrby3[3];
                continue;
            }
            n4 = n2 + 1;
            arrby[n2] = arrby3[3];
            n2 = n4 + 1;
            arrby[n4] = arrby3[2];
            n4 = n2 + 1;
            arrby[n2] = arrby3[1];
            n2 = n4 + 1;
            arrby[n4] = arrby3[0];
        }
        n3 = n2 + 1;
        arrby[n2] = 1;
        n2 = n3 + 1;
        arrby[n3] = 1;
        n3 = n2 + 1;
        arrby[n2] = 1;
        n2 = n3 + 1;
        arrby[n3] = 1;
        arrby[n2] = 1;
        arrby[n2 + 1] = 1;
        return arrby;
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Lifted jumps to return sites
     */
    @Override
    public Rectangle getBarcodeSize() {
        block9 : {
            var3_2 = var2_1 = this.barHeight;
            if (this.font != null) {
                var1_3 = this.baseline <= 0.0f ? - this.baseline + this.size : this.baseline - this.font.getFontDescriptor(3, this.size);
                var3_2 = var2_1 + var1_3;
            }
            switch (this.codeType) {
                default: {
                    throw new RuntimeException(MessageLocalization.getComposedMessage("invalid.code.type", new Object[0]));
                }
                case 6: {
                    var1_3 = this.x;
                    var2_1 = 47.0f;
                    return new Rectangle(var1_3 *= var2_1, var3_2);
                }
                case 5: {
                    var1_3 = this.x;
                    var2_1 = 20.0f;
                    return new Rectangle(var1_3 *= var2_1, var3_2);
                }
                case 4: {
                    var1_3 = var2_1 = this.x * 51.0f;
                    if (this.font == null) return new Rectangle(var1_3, var3_2);
                    var4_4 = this.font.getWidthPoint(this.code.charAt(0), this.size);
                    var6_5 = this.font;
                    var7_6 = this.code;
                    var5_7 = 7;
                    var1_3 = var2_1;
                    ** GOTO lbl33
                }
                case 3: {
                    var1_3 = var2_1 = this.x * 95.0f;
                    if (this.font == null) return new Rectangle(var1_3, var3_2);
                    var4_4 = this.font.getWidthPoint(this.code.charAt(0), this.size);
                    var6_5 = this.font;
                    var7_6 = this.code;
                    var5_7 = 11;
                    var1_3 = var2_1;
lbl33: // 2 sources:
                    var4_4 += var6_5.getWidthPoint(var7_6.charAt(var5_7), this.size);
                    break block9;
                }
                case 2: {
                    var1_3 = this.x;
                    var2_1 = 67.0f;
                    return new Rectangle(var1_3 *= var2_1, var3_2);
                }
                case 1: 
            }
            var1_3 = var2_1 = this.x * 95.0f;
            if (this.font == null) return new Rectangle(var1_3, var3_2);
            var4_4 = this.font.getWidthPoint(this.code.charAt(0), this.size);
            var1_3 = var2_1;
        }
        var1_3 += var4_4;
        return new Rectangle(var1_3, var3_2);
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Lifted jumps to return sites
     */
    @Override
    public Rectangle placeBarcode(PdfContentByte var1_1, BaseColor var2_2, BaseColor var3_3) {
        block34 : {
            block33 : {
                block32 : {
                    block30 : {
                        block31 : {
                            var14_4 = this.getBarcodeSize();
                            if (this.font == null) break block30;
                            if (this.baseline > 0.0f) break block31;
                            var4_5 = this.barHeight - this.baseline;
                            break block32;
                        }
                        var5_6 = - this.font.getFontDescriptor(3, this.size);
                        var6_7 = this.baseline + var5_6;
                        break block33;
                    }
                    var4_5 = 0.0f;
                }
                var6_7 = 0.0f;
                var5_6 = var4_5;
            }
            var10_8 = this.codeType;
            if (var10_8 != 1) {
                switch (var10_8) {
                    default: {
                        ** break;
                    }
                    case 3: 
                    case 4: 
                }
            }
            if (this.font != null) {
                var4_5 = this.font.getWidthPoint(this.code.charAt(0), this.size) + 0.0f;
            } else lbl-1000: // 2 sources:
            {
                var4_5 = 0.0f;
            }
            var12_9 = null;
            var13_10 = BarcodeEAN.GUARD_EMPTY;
            switch (this.codeType) {
                default: {
                    ** break;
                }
                case 6: {
                    var12_9 = BarcodeEAN.getBarsSupplemental5(this.code);
                    ** break;
                }
                case 5: {
                    var12_9 = BarcodeEAN.getBarsSupplemental2(this.code);
                    ** break;
                }
                case 4: {
                    var12_9 = BarcodeEAN.getBarsUPCE(this.code);
                    var13_10 = BarcodeEAN.GUARD_UPCE;
                    ** break;
                }
                case 3: {
                    var12_9 = new StringBuilder();
                    var12_9.append("0");
                    var12_9.append(this.code);
                    var12_9 = BarcodeEAN.getBarsEAN13(var12_9.toString());
                    var13_10 = BarcodeEAN.GUARD_UPCA;
                    ** break;
                }
                case 2: {
                    var12_9 = BarcodeEAN.getBarsEAN8(this.code);
                    var13_10 = BarcodeEAN.GUARD_EAN8;
                    ** break;
                }
                case 1: 
            }
            var12_9 = BarcodeEAN.getBarsEAN13(this.code);
            var13_10 = BarcodeEAN.GUARD_EAN13;
lbl55: // 7 sources:
            var7_11 = this.font != null && this.baseline > 0.0f && this.guardBars != false ? this.baseline / 2.0f : 0.0f;
            if (var2_2 != null) {
                var1_1.setColorFill((BaseColor)var2_2);
            }
            var8_12 = var4_5;
            var11_13 = 1;
            for (var10_8 = 0; var10_8 < ((Object)var12_9).length; var11_13 ^= true, var8_12 += var9_14, ++var10_8) {
                var9_14 = (float)var12_9[var10_8] * this.x;
                if (var11_13 == 0) continue;
                if (Arrays.binarySearch(var13_10, var10_8) >= 0) {
                    var1_1.rectangle(var8_12, var6_7 - var7_11, var9_14 - this.inkSpreading, this.barHeight + var7_11);
                    continue;
                }
                var1_1.rectangle(var8_12, var6_7, var9_14 - this.inkSpreading, this.barHeight);
            }
            var1_1.fill();
            if (this.font == null) return var14_4;
            if (var3_3 != null) {
                var1_1.setColorFill(var3_3);
            }
            var1_1.beginText();
            var1_1.setFontAndSize(this.font, this.size);
            switch (this.codeType) {
                default: {
                    break block34;
                }
                case 5: 
                case 6: {
                    var10_8 = 0;
                    while (var10_8 < this.code.length()) {
                        var2_2 = this.code;
                        var11_13 = var10_8 + 1;
                        var2_2 = var2_2.substring(var10_8, var11_13);
                        var4_5 = this.font.getWidthPoint((String)var2_2, this.size);
                        var1_1.setTextMatrix(((float)(var10_8 * 9) + 7.5f) * this.x - var4_5 / 2.0f, var5_6);
                        var1_1.showText((String)var2_2);
                        var10_8 = var11_13;
                    }
                    break block34;
                }
                case 4: {
                    var1_1.setTextMatrix(0.0f, var5_6);
                    var1_1.showText(this.code.substring(0, 1));
                    var10_8 = 1;
                    while (var10_8 < 7) {
                        var2_2 = this.code;
                        var11_13 = var10_8 + 1;
                        var2_2 = var2_2.substring(var10_8, var11_13);
                        var6_7 = this.font.getWidthPoint((String)var2_2, this.size);
                        var1_1.setTextMatrix(BarcodeEAN.TEXTPOS_EAN13[var10_8 - 1] * this.x + var4_5 - var6_7 / 2.0f, var5_6);
                        var1_1.showText((String)var2_2);
                        var10_8 = var11_13;
                    }
                    var1_1.setTextMatrix(var4_5 + this.x * 51.0f, var5_6);
                    var2_2 = this.code.substring(7, 8);
                    ** GOTO lbl120
                }
                case 3: {
                    var1_1.setTextMatrix(0.0f, var5_6);
                    var1_1.showText(this.code.substring(0, 1));
                    var10_8 = 1;
                    while (var10_8 < 11) {
                        var2_2 = this.code;
                        var11_13 = var10_8 + 1;
                        var2_2 = var2_2.substring(var10_8, var11_13);
                        var6_7 = this.font.getWidthPoint((String)var2_2, this.size);
                        var1_1.setTextMatrix(BarcodeEAN.TEXTPOS_EAN13[var10_8] * this.x + var4_5 - var6_7 / 2.0f, var5_6);
                        var1_1.showText((String)var2_2);
                        var10_8 = var11_13;
                    }
                    var1_1.setTextMatrix(var4_5 + this.x * 95.0f, var5_6);
                    var2_2 = this.code.substring(11, 12);
lbl120: // 2 sources:
                    var1_1.showText((String)var2_2);
                    break block34;
                }
                case 2: {
                    var10_8 = 0;
                    while (var10_8 < 8) {
                        var2_2 = this.code;
                        var11_13 = var10_8 + 1;
                        var2_2 = var2_2.substring(var10_8, var11_13);
                        var4_5 = this.font.getWidthPoint((String)var2_2, this.size);
                        var1_1.setTextMatrix(BarcodeEAN.TEXTPOS_EAN8[var10_8] * this.x - var4_5 / 2.0f, var5_6);
                        var1_1.showText((String)var2_2);
                        var10_8 = var11_13;
                    }
                    break block34;
                }
                case 1: 
            }
            var1_1.setTextMatrix(0.0f, var5_6);
            var2_2 = this.code;
            var10_8 = 1;
            var1_1.showText(var2_2.substring(0, 1));
            while (var10_8 < 13) {
                var2_2 = this.code;
                var11_13 = var10_8 + 1;
                var2_2 = var2_2.substring(var10_8, var11_13);
                var6_7 = this.font.getWidthPoint((String)var2_2, this.size);
                var1_1.setTextMatrix(BarcodeEAN.TEXTPOS_EAN13[var10_8 - 1] * this.x + var4_5 - var6_7 / 2.0f, var5_6);
                var1_1.showText((String)var2_2);
                var10_8 = var11_13;
            }
        }
        var1_1.endText();
        return var14_4;
    }
}

