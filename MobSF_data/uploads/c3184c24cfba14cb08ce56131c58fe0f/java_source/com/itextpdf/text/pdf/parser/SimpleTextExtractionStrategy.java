/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf.parser;

import com.itextpdf.text.pdf.parser.ImageRenderInfo;
import com.itextpdf.text.pdf.parser.LineSegment;
import com.itextpdf.text.pdf.parser.TextExtractionStrategy;
import com.itextpdf.text.pdf.parser.TextRenderInfo;
import com.itextpdf.text.pdf.parser.Vector;

public class SimpleTextExtractionStrategy
implements TextExtractionStrategy {
    private Vector lastEnd;
    private Vector lastStart;
    private final StringBuffer result = new StringBuffer();

    protected final void appendTextChunk(CharSequence charSequence) {
        this.result.append(charSequence);
    }

    @Override
    public void beginTextBlock() {
    }

    @Override
    public void endTextBlock() {
    }

    @Override
    public String getResultantText() {
        return this.result.toString();
    }

    @Override
    public void renderImage(ImageRenderInfo imageRenderInfo) {
    }

    /*
     * Enabled aggressive block sorting
     */
    @Override
    public void renderText(TextRenderInfo textRenderInfo) {
        Vector vector;
        Vector vector2;
        block4 : {
            Object object;
            block3 : {
                boolean bl2;
                block2 : {
                    Vector vector3;
                    bl2 = this.result.length() == 0;
                    object = textRenderInfo.getBaseline();
                    vector2 = object.getStartPoint();
                    vector = object.getEndPoint();
                    boolean bl3 = !bl2 && (vector3 = this.lastEnd).subtract((Vector)(object = this.lastStart)).cross(object.subtract(vector2)).lengthSquared() / vector3.subtract((Vector)object).lengthSquared() > 1.0f;
                    if (!bl3) break block2;
                    object = "\n";
                    break block3;
                }
                if (bl2 || this.result.charAt(this.result.length() - 1) == ' ' || textRenderInfo.getText().length() <= 0 || textRenderInfo.getText().charAt(0) == ' ' || this.lastEnd.subtract(vector2).length() <= textRenderInfo.getSingleSpaceWidth() / 2.0f) break block4;
                object = " ";
            }
            this.appendTextChunk((CharSequence)object);
        }
        this.appendTextChunk(textRenderInfo.getText());
        this.lastStart = vector2;
        this.lastEnd = vector;
    }
}

