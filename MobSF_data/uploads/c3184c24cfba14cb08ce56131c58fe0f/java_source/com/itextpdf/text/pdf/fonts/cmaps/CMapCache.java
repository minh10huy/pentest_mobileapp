/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf.fonts.cmaps;

import com.itextpdf.text.pdf.fonts.cmaps.CMapByteCid;
import com.itextpdf.text.pdf.fonts.cmaps.CMapCidByte;
import com.itextpdf.text.pdf.fonts.cmaps.CMapCidUni;
import com.itextpdf.text.pdf.fonts.cmaps.CMapParserEx;
import com.itextpdf.text.pdf.fonts.cmaps.CMapUniCid;
import com.itextpdf.text.pdf.fonts.cmaps.CidResource;
import java.util.HashMap;

public class CMapCache {
    private static final HashMap<String, CMapByteCid> cacheByteCid;
    private static final HashMap<String, CMapCidByte> cacheCidByte;
    private static final HashMap<String, CMapCidUni> cacheCidUni;
    private static final HashMap<String, CMapUniCid> cacheUniCid;

    static {
        cacheUniCid = new HashMap();
        cacheCidUni = new HashMap();
        cacheCidByte = new HashMap();
        cacheByteCid = new HashMap();
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Converted monitor instructions to comments
     * Lifted jumps to return sites
     */
    public static CMapByteCid getCachedCMapByteCid(String string2) {
        HashMap<String, CMapByteCid> hashMap = cacheByteCid;
        // MONITORENTER : hashMap
        CMapByteCid cMapByteCid = cacheByteCid.get(string2);
        // MONITOREXIT : hashMap
        if (cMapByteCid != null) return cMapByteCid;
        cMapByteCid = new CMapByteCid();
        CMapParserEx.parseCid(string2, cMapByteCid, new CidResource());
        hashMap = cacheByteCid;
        // MONITORENTER : hashMap
        cacheByteCid.put(string2, cMapByteCid);
        // MONITOREXIT : hashMap
        return cMapByteCid;
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Converted monitor instructions to comments
     * Lifted jumps to return sites
     */
    public static CMapCidByte getCachedCMapCidByte(String string2) {
        HashMap<String, CMapCidByte> hashMap = cacheCidByte;
        // MONITORENTER : hashMap
        CMapCidByte cMapCidByte = cacheCidByte.get(string2);
        // MONITOREXIT : hashMap
        if (cMapCidByte != null) return cMapCidByte;
        cMapCidByte = new CMapCidByte();
        CMapParserEx.parseCid(string2, cMapCidByte, new CidResource());
        hashMap = cacheCidByte;
        // MONITORENTER : hashMap
        cacheCidByte.put(string2, cMapCidByte);
        // MONITOREXIT : hashMap
        return cMapCidByte;
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Converted monitor instructions to comments
     * Lifted jumps to return sites
     */
    public static CMapCidUni getCachedCMapCidUni(String string2) {
        HashMap<String, CMapCidUni> hashMap = cacheCidUni;
        // MONITORENTER : hashMap
        CMapCidUni cMapCidUni = cacheCidUni.get(string2);
        // MONITOREXIT : hashMap
        if (cMapCidUni != null) return cMapCidUni;
        cMapCidUni = new CMapCidUni();
        CMapParserEx.parseCid(string2, cMapCidUni, new CidResource());
        hashMap = cacheCidUni;
        // MONITORENTER : hashMap
        cacheCidUni.put(string2, cMapCidUni);
        // MONITOREXIT : hashMap
        return cMapCidUni;
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Converted monitor instructions to comments
     * Lifted jumps to return sites
     */
    public static CMapUniCid getCachedCMapUniCid(String string2) {
        HashMap<String, CMapUniCid> hashMap = cacheUniCid;
        // MONITORENTER : hashMap
        CMapUniCid cMapUniCid = cacheUniCid.get(string2);
        // MONITOREXIT : hashMap
        if (cMapUniCid != null) return cMapUniCid;
        cMapUniCid = new CMapUniCid();
        CMapParserEx.parseCid(string2, cMapUniCid, new CidResource());
        hashMap = cacheUniCid;
        // MONITORENTER : hashMap
        cacheUniCid.put(string2, cMapUniCid);
        // MONITOREXIT : hashMap
        return cMapUniCid;
    }
}

