/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf.qrcode;

import com.itextpdf.text.pdf.qrcode.BitArray;

public final class BitMatrix {
    public final int[] bits;
    public final int height;
    public final int rowSize;
    public final int width;

    public BitMatrix(int n2) {
        this(n2, n2);
    }

    public BitMatrix(int n2, int n3) {
        if (n2 >= 1 && n3 >= 1) {
            int n4;
            this.width = n2;
            this.height = n3;
            int n5 = n4 = n2 >> 5;
            if ((n2 & 31) != 0) {
                n5 = n4 + 1;
            }
            this.rowSize = n5;
            this.bits = new int[n5 * n3];
            return;
        }
        throw new IllegalArgumentException("Both dimensions must be greater than 0");
    }

    public void clear() {
        int n2 = this.bits.length;
        for (int i2 = 0; i2 < n2; ++i2) {
            this.bits[i2] = 0;
        }
    }

    public void flip(int n2, int n3) {
        n3 = n3 * this.rowSize + (n2 >> 5);
        int[] arrn = this.bits;
        arrn[n3] = 1 << (n2 & 31) ^ arrn[n3];
    }

    public boolean get(int n2, int n3) {
        int n4 = this.rowSize;
        if ((this.bits[n3 * n4 + (n2 >> 5)] >>> (n2 & 31) & 1) != 0) {
            return true;
        }
        return false;
    }

    public int getDimension() {
        if (this.width == this.height) {
            return this.width;
        }
        throw new RuntimeException("Can't call getDimension() on a non-square matrix");
    }

    public int getHeight() {
        return this.height;
    }

    public BitArray getRow(int n2, BitArray bitArray) {
        BitArray bitArray2;
        block4 : {
            block3 : {
                if (bitArray == null) break block3;
                bitArray2 = bitArray;
                if (bitArray.getSize() >= this.width) break block4;
            }
            bitArray2 = new BitArray(this.width);
        }
        int n3 = this.rowSize;
        for (int i2 = 0; i2 < this.rowSize; ++i2) {
            bitArray2.setBulk(i2 << 5, this.bits[n2 * n3 + i2]);
        }
        return bitArray2;
    }

    public int getWidth() {
        return this.width;
    }

    public void set(int n2, int n3) {
        n3 = n3 * this.rowSize + (n2 >> 5);
        int[] arrn = this.bits;
        arrn[n3] = 1 << (n2 & 31) | arrn[n3];
    }

    public void setRegion(int n2, int n3, int n4, int n5) {
        if (n3 >= 0 && n2 >= 0) {
            if (n5 >= 1 && n4 >= 1) {
                int n6 = n4 + n2;
                if ((n5 += n3) <= this.height && n6 <= this.width) {
                    while (n3 < n5) {
                        int n7 = this.rowSize;
                        for (n4 = n2; n4 < n6; ++n4) {
                            int[] arrn = this.bits;
                            int n8 = (n4 >> 5) + n7 * n3;
                            arrn[n8] = arrn[n8] | 1 << (n4 & 31);
                        }
                        ++n3;
                    }
                    return;
                }
                throw new IllegalArgumentException("The region must fit inside the matrix");
            }
            throw new IllegalArgumentException("Height and width must be at least 1");
        }
        throw new IllegalArgumentException("Left and top must be nonnegative");
    }

    public String toString() {
        StringBuffer stringBuffer = new StringBuffer(this.height * (this.width + 1));
        for (int i2 = 0; i2 < this.height; ++i2) {
            for (int i3 = 0; i3 < this.width; ++i3) {
                String string2 = this.get(i3, i2) ? "X " : "  ";
                stringBuffer.append(string2);
            }
            stringBuffer.append('\n');
        }
        return stringBuffer.toString();
    }
}

