/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf;

import com.itextpdf.awt.geom.AffineTransform;
import com.itextpdf.text.AccessibleElementId;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chunk;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.ElementListener;
import com.itextpdf.text.Image;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.api.Spaceable;
import com.itextpdf.text.pdf.ColumnText;
import com.itextpdf.text.pdf.FloatLayout;
import com.itextpdf.text.pdf.PdfArtifact;
import com.itextpdf.text.pdf.PdfContentByte;
import com.itextpdf.text.pdf.PdfName;
import com.itextpdf.text.pdf.PdfObject;
import com.itextpdf.text.pdf.interfaces.IAccessibleElement;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;

public class PdfDiv
implements Element,
Spaceable,
IAccessibleElement {
    protected HashMap<PdfName, PdfObject> accessibleAttributes = null;
    private BaseColor backgroundColor = null;
    private Image backgroundImage;
    private Float backgroundImageHeight;
    private Float backgroundImageWidth;
    private BorderTopStyle borderTopStyle;
    private Float bottom = null;
    private ArrayList<Element> content = new ArrayList();
    private float contentHeight = 0.0f;
    private float contentWidth = 0.0f;
    private DisplayType display;
    private FloatLayout floatLayout = null;
    private FloatType floatType = FloatType.NONE;
    private Float height = null;
    protected AccessibleElementId id = new AccessibleElementId();
    private boolean keepTogether = false;
    private Float left = null;
    private float paddingBottom = 0.0f;
    private float paddingLeft = 0.0f;
    private float paddingRight = 0.0f;
    private float paddingTop = 0.0f;
    private Float percentageHeight = null;
    private Float percentageWidth = null;
    private PositionType position = PositionType.STATIC;
    private Float right = null;
    protected PdfName role = PdfName.DIV;
    protected int runDirection = 1;
    protected float spacingAfter;
    protected float spacingBefore;
    private int textAlignment = -1;
    private Float top = null;
    private Float width = null;
    private float yLine;

    public void addElement(Element element) {
        this.content.add(element);
    }

    @Override
    public PdfObject getAccessibleAttribute(PdfName pdfName) {
        if (this.accessibleAttributes != null) {
            return this.accessibleAttributes.get(pdfName);
        }
        return null;
    }

    @Override
    public HashMap<PdfName, PdfObject> getAccessibleAttributes() {
        return this.accessibleAttributes;
    }

    public float getActualHeight() {
        if (this.height != null && this.height.floatValue() >= this.contentHeight) {
            return this.height.floatValue();
        }
        return this.contentHeight;
    }

    public float getActualWidth() {
        if (this.width != null && this.width.floatValue() >= this.contentWidth) {
            return this.width.floatValue();
        }
        return this.contentWidth;
    }

    public BaseColor getBackgroundColor() {
        return this.backgroundColor;
    }

    public BorderTopStyle getBorderTopStyle() {
        return this.borderTopStyle;
    }

    public Float getBottom() {
        return this.bottom;
    }

    @Override
    public List<Chunk> getChunks() {
        return new ArrayList<Chunk>();
    }

    public ArrayList<Element> getContent() {
        return this.content;
    }

    public float getContentHeight() {
        return this.contentHeight;
    }

    public float getContentWidth() {
        return this.contentWidth;
    }

    public DisplayType getDisplay() {
        return this.display;
    }

    public FloatType getFloatType() {
        return this.floatType;
    }

    public Float getHeight() {
        return this.height;
    }

    @Override
    public AccessibleElementId getId() {
        return this.id;
    }

    public boolean getKeepTogether() {
        return this.keepTogether;
    }

    public Float getLeft() {
        return this.left;
    }

    public float getPaddingBottom() {
        return this.paddingBottom;
    }

    public float getPaddingLeft() {
        return this.paddingLeft;
    }

    public float getPaddingRight() {
        return this.paddingRight;
    }

    @Override
    public float getPaddingTop() {
        return this.paddingTop;
    }

    public Float getPercentageHeight() {
        return this.percentageHeight;
    }

    public Float getPercentageWidth() {
        return this.percentageWidth;
    }

    public PositionType getPosition() {
        return this.position;
    }

    public Float getRight() {
        return this.right;
    }

    @Override
    public PdfName getRole() {
        return this.role;
    }

    public int getRunDirection() {
        return this.runDirection;
    }

    @Override
    public float getSpacingAfter() {
        return this.spacingAfter;
    }

    @Override
    public float getSpacingBefore() {
        return this.spacingBefore;
    }

    public int getTextAlignment() {
        return this.textAlignment;
    }

    public Float getTop() {
        return this.top;
    }

    public Float getWidth() {
        return this.width;
    }

    public float getYLine() {
        return this.yLine;
    }

    @Override
    public boolean isContent() {
        return true;
    }

    @Override
    public boolean isInline() {
        return false;
    }

    @Override
    public boolean isNestable() {
        return true;
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Lifted jumps to return sites
     */
    public int layout(PdfContentByte var1_1, boolean var2_2, boolean var3_3, float var4_4, float var5_5, float var6_6, float var7_7) {
        block36 : {
            block34 : {
                block35 : {
                    block31 : {
                        block33 : {
                            block32 : {
                                block30 : {
                                    block28 : {
                                        block29 : {
                                            var8_8 = Math.min(var4_4, var6_6);
                                            var9_9 = Math.max(var5_5, var7_7);
                                            var5_5 = Math.min(var5_5, var7_7);
                                            var4_4 = Math.max(var4_4, var6_6);
                                            this.yLine = var9_9;
                                            if (this.width == null || this.width.floatValue() <= 0.0f) break block28;
                                            var7_7 = this.width.floatValue();
                                            if (var7_7 >= (var6_6 = var4_4 - var8_8)) break block29;
                                            var4_4 = this.width.floatValue();
                                            break block30;
                                        }
                                        var7_7 = var4_4;
                                        if (this.width.floatValue() > var6_6) {
                                            return 2;
                                        }
                                        break block31;
                                    }
                                    if (this.percentageWidth == null) break block32;
                                    var4_4 = this.contentWidth = (var4_4 - var8_8) * this.percentageWidth.floatValue();
                                }
                                var7_7 = var4_4 + var8_8;
                                break block31;
                            }
                            var7_7 = var4_4;
                            if (this.percentageWidth != null) break block31;
                            var7_7 = var4_4;
                            if (this.floatType != FloatType.NONE) break block31;
                            if (this.display == null || this.display == DisplayType.BLOCK || this.display == DisplayType.LIST_ITEM) break block33;
                            var7_7 = var4_4;
                            if (this.display != DisplayType.RUN_IN) break block31;
                        }
                        this.contentWidth = var4_4 - var8_8;
                        var7_7 = var4_4;
                    }
                    if (this.height == null || this.height.floatValue() <= 0.0f) break block34;
                    var4_4 = this.height.floatValue();
                    if (var4_4 >= (var6_6 = var9_9 - var5_5)) break block35;
                    var4_4 = var9_9 - this.height.floatValue();
                    var11_10 = true;
                    break block36;
                }
                if (this.height.floatValue() > var6_6) {
                    return 2;
                }
                ** GOTO lbl-1000
            }
            if (this.percentageHeight != null) {
                var11_10 = (double)this.percentageHeight.floatValue() < 1.0;
                this.contentHeight = (var9_9 - var5_5) * this.percentageHeight.floatValue();
                var4_4 = var9_9 - this.contentHeight;
            } else lbl-1000: // 2 sources:
            {
                var11_10 = false;
                var4_4 = var5_5;
            }
        }
        if (!var3_3 && this.position == PositionType.RELATIVE) {
            var14_11 = this.left != null ? this.left : (this.right != null ? Float.valueOf(- this.right.floatValue()) : Float.valueOf(0.0f));
            var15_12 = this.top != null ? Float.valueOf(- this.top.floatValue()) : (this.bottom != null ? this.bottom : Float.valueOf(0.0f));
            var1_1.saveState();
            var1_1.transform(new AffineTransform(1.0f, 0.0f, 0.0f, 1.0f, var14_11.floatValue(), var15_12.floatValue()));
        }
        if (!(var3_3 || this.backgroundColor == null && this.backgroundImage == null || this.getActualWidth() <= 0.0f || this.getActualHeight() <= 0.0f)) {
            var5_5 = this.getActualWidth();
            var6_6 = this.getActualHeight();
            if (this.width != null) {
                var5_5 = this.width.floatValue() > 0.0f ? this.width.floatValue() : 0.0f;
            }
            if (this.height != null) {
                var6_6 = this.height.floatValue() > 0.0f ? this.height.floatValue() : 0.0f;
            }
            if (var5_5 > 0.0f && var6_6 > 0.0f) {
                var14_11 = new Rectangle(var8_8, var9_9 - var6_6, var5_5 + var8_8, var9_9);
                if (this.backgroundColor != null) {
                    var14_11.setBackgroundColor(this.backgroundColor);
                    var15_12 = new PdfArtifact();
                    var1_1.openMCBlock((IAccessibleElement)var15_12);
                    var1_1.rectangle((Rectangle)var14_11);
                    var1_1.closeMCBlock((IAccessibleElement)var15_12);
                }
                if (this.backgroundImage != null) {
                    if (this.backgroundImageWidth == null) {
                        this.backgroundImage.scaleToFit((Rectangle)var14_11);
                    } else {
                        this.backgroundImage.scaleAbsolute(this.backgroundImageWidth.floatValue(), this.backgroundImageHeight.floatValue());
                    }
                    this.backgroundImage.setAbsolutePosition(var14_11.getLeft(), var14_11.getBottom());
                    var1_1.openMCBlock(this.backgroundImage);
                    var1_1.addImage(this.backgroundImage);
                    var1_1.closeMCBlock(this.backgroundImage);
                }
            }
        }
        if (this.percentageWidth == null) {
            this.contentWidth = 0.0f;
        }
        if (this.percentageHeight == null) {
            this.contentHeight = 0.0f;
        }
        var5_5 = this.paddingBottom;
        var6_6 = this.paddingLeft;
        var10_13 = this.paddingRight;
        this.yLine -= this.paddingTop;
        if (!this.content.isEmpty()) {
            if (this.floatLayout == null) {
                this.floatLayout = new FloatLayout(new ArrayList<Element>(this.content), var2_2);
                this.floatLayout.setRunDirection(this.runDirection);
            }
            this.floatLayout.setSimpleColumn(var8_8 + var6_6, var4_4 + var5_5, var7_7 - var10_13, this.yLine);
            if (this.getBorderTopStyle() != null) {
                this.floatLayout.compositeColumn.setIgnoreSpacingBefore(false);
            }
            var13_14 = this.floatLayout.layout(var1_1, var3_3);
            this.yLine = this.floatLayout.getYLine();
            var12_15 = var13_14;
            if (this.percentageWidth == null) {
                var12_15 = var13_14;
                if (this.contentWidth < this.floatLayout.getFilledWidth()) {
                    this.contentWidth = this.floatLayout.getFilledWidth();
                    var12_15 = var13_14;
                }
            }
        } else {
            var12_15 = 1;
        }
        if (!var3_3 && this.position == PositionType.RELATIVE) {
            var1_1.restoreState();
        }
        this.yLine -= this.paddingBottom;
        if (this.percentageHeight == null) {
            this.contentHeight = var9_9 - this.yLine;
        }
        if (this.percentageWidth == null) {
            this.contentWidth += this.paddingLeft + this.paddingRight;
        }
        if (var11_10 == false) return var12_15;
        return 1;
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    @Override
    public boolean process(ElementListener elementListener) {
        try {
            return elementListener.add(this);
        }
        catch (DocumentException documentException) {
            return false;
        }
    }

    @Override
    public void setAccessibleAttribute(PdfName pdfName, PdfObject pdfObject) {
        if (this.accessibleAttributes == null) {
            this.accessibleAttributes = new HashMap();
        }
        this.accessibleAttributes.put(pdfName, pdfObject);
    }

    public void setBackgroundColor(BaseColor baseColor) {
        this.backgroundColor = baseColor;
    }

    public void setBackgroundImage(Image image) {
        this.backgroundImage = image;
    }

    public void setBackgroundImage(Image image, float f2, float f3) {
        this.backgroundImage = image;
        this.backgroundImageWidth = Float.valueOf(f2);
        this.backgroundImageHeight = Float.valueOf(f3);
    }

    public void setBorderTopStyle(BorderTopStyle borderTopStyle) {
        this.borderTopStyle = borderTopStyle;
    }

    public void setBottom(Float f2) {
        this.bottom = f2;
    }

    public void setContent(ArrayList<Element> arrayList) {
        this.content = arrayList;
    }

    public void setContentHeight(float f2) {
        this.contentHeight = f2;
    }

    public void setContentWidth(float f2) {
        this.contentWidth = f2;
    }

    public void setDisplay(DisplayType displayType) {
        this.display = displayType;
    }

    public void setFloatType(FloatType floatType) {
        this.floatType = floatType;
    }

    public void setHeight(Float f2) {
        this.height = f2;
    }

    @Override
    public void setId(AccessibleElementId accessibleElementId) {
        this.id = accessibleElementId;
    }

    public void setKeepTogether(boolean bl2) {
        this.keepTogether = bl2;
    }

    public void setLeft(Float f2) {
        this.left = f2;
    }

    public void setPaddingBottom(float f2) {
        this.paddingBottom = f2;
    }

    public void setPaddingLeft(float f2) {
        this.paddingLeft = f2;
    }

    public void setPaddingRight(float f2) {
        this.paddingRight = f2;
    }

    @Override
    public void setPaddingTop(float f2) {
        this.paddingTop = f2;
    }

    public void setPercentageHeight(Float f2) {
        this.percentageHeight = f2;
    }

    public void setPercentageWidth(Float f2) {
        this.percentageWidth = f2;
    }

    public void setPosition(PositionType positionType) {
        this.position = positionType;
    }

    public void setRight(Float f2) {
        this.right = f2;
    }

    @Override
    public void setRole(PdfName pdfName) {
        this.role = pdfName;
    }

    public void setRunDirection(int n2) {
        this.runDirection = n2;
    }

    @Override
    public void setSpacingAfter(float f2) {
        this.spacingAfter = f2;
    }

    @Override
    public void setSpacingBefore(float f2) {
        this.spacingBefore = f2;
    }

    public void setTextAlignment(int n2) {
        this.textAlignment = n2;
    }

    public void setTop(Float f2) {
        this.top = f2;
    }

    public void setWidth(Float f2) {
        this.width = f2;
    }

    @Override
    public int type() {
        return 37;
    }

    public static enum BorderTopStyle {
        DOTTED,
        DASHED,
        SOLID,
        DOUBLE,
        GROOVE,
        RIDGE,
        INSET,
        OUTSET;
        

        private BorderTopStyle() {
        }
    }

    public static enum DisplayType {
        NONE,
        BLOCK,
        INLINE,
        INLINE_BLOCK,
        INLINE_TABLE,
        LIST_ITEM,
        RUN_IN,
        TABLE,
        TABLE_CAPTION,
        TABLE_CELL,
        TABLE_COLUMN_GROUP,
        TABLE_COLUMN,
        TABLE_FOOTER_GROUP,
        TABLE_HEADER_GROUP,
        TABLE_ROW,
        TABLE_ROW_GROUP;
        

        private DisplayType() {
        }
    }

    public static enum FloatType {
        NONE,
        LEFT,
        RIGHT;
        

        private FloatType() {
        }
    }

    public static enum PositionType {
        STATIC,
        ABSOLUTE,
        FIXED,
        RELATIVE;
        

        private PositionType() {
        }
    }

}

