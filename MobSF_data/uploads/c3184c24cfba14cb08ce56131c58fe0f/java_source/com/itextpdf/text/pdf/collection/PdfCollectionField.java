/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf.collection;

import com.itextpdf.text.error_messages.MessageLocalization;
import com.itextpdf.text.pdf.PdfBoolean;
import com.itextpdf.text.pdf.PdfDate;
import com.itextpdf.text.pdf.PdfDictionary;
import com.itextpdf.text.pdf.PdfName;
import com.itextpdf.text.pdf.PdfNumber;
import com.itextpdf.text.pdf.PdfObject;
import com.itextpdf.text.pdf.PdfString;
import java.util.Calendar;

public class PdfCollectionField
extends PdfDictionary {
    public static final int CREATIONDATE = 6;
    public static final int DATE = 1;
    public static final int DESC = 4;
    public static final int FILENAME = 3;
    public static final int MODDATE = 5;
    public static final int NUMBER = 2;
    public static final int SIZE = 7;
    public static final int TEXT = 0;
    protected int fieldType;

    /*
     * Enabled aggressive block sorting
     */
    public PdfCollectionField(String object, int n2) {
        PdfName pdfName;
        super(PdfName.COLLECTIONFIELD);
        this.put(PdfName.N, new PdfString((String)object, "UnicodeBig"));
        this.fieldType = n2;
        switch (n2) {
            default: {
                object = PdfName.SUBTYPE;
                pdfName = PdfName.S;
                break;
            }
            case 7: {
                object = PdfName.SUBTYPE;
                pdfName = PdfName.SIZE;
                break;
            }
            case 6: {
                object = PdfName.SUBTYPE;
                pdfName = PdfName.CREATIONDATE;
                break;
            }
            case 5: {
                object = PdfName.SUBTYPE;
                pdfName = PdfName.MODDATE;
                break;
            }
            case 4: {
                object = PdfName.SUBTYPE;
                pdfName = PdfName.DESC;
                break;
            }
            case 3: {
                object = PdfName.SUBTYPE;
                pdfName = PdfName.F;
                break;
            }
            case 2: {
                object = PdfName.SUBTYPE;
                pdfName = PdfName.N;
                break;
            }
            case 1: {
                object = PdfName.SUBTYPE;
                pdfName = PdfName.D;
            }
        }
        this.put((PdfName)object, pdfName);
    }

    public PdfObject getValue(String string2) {
        switch (this.fieldType) {
            default: {
                throw new IllegalArgumentException(MessageLocalization.getComposedMessage("1.is.not.an.acceptable.value.for.the.field.2", string2, this.get(PdfName.N).toString()));
            }
            case 2: {
                return new PdfNumber(string2);
            }
            case 1: {
                return new PdfDate(PdfDate.decode(string2));
            }
            case 0: 
        }
        return new PdfString(string2, "UnicodeBig");
    }

    public boolean isCollectionItem() {
        switch (this.fieldType) {
            default: {
                return false;
            }
            case 0: 
            case 1: 
            case 2: 
        }
        return true;
    }

    public void setEditable(boolean bl2) {
        this.put(PdfName.E, new PdfBoolean(bl2));
    }

    public void setOrder(int n2) {
        this.put(PdfName.O, new PdfNumber(n2));
    }

    public void setVisible(boolean bl2) {
        this.put(PdfName.V, new PdfBoolean(bl2));
    }
}

