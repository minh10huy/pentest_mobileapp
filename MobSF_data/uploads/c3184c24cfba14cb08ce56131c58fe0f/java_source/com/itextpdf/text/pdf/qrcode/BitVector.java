/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf.qrcode;

public final class BitVector {
    private static final int DEFAULT_SIZE_IN_BYTES = 32;
    private byte[] array = new byte[32];
    private int sizeInBits = 0;

    private void appendByte(int n2) {
        if (this.sizeInBits >> 3 == this.array.length) {
            byte[] arrby = new byte[this.array.length << 1];
            System.arraycopy(this.array, 0, arrby, 0, this.array.length);
            this.array = arrby;
        }
        this.array[this.sizeInBits >> 3] = (byte)n2;
        this.sizeInBits += 8;
    }

    public void appendBit(int n2) {
        if (n2 != 0 && n2 != 1) {
            throw new IllegalArgumentException("Bad bit");
        }
        int n3 = this.sizeInBits & 7;
        if (n3 == 0) {
            this.appendByte(0);
            this.sizeInBits -= 8;
        }
        byte[] arrby = this.array;
        int n4 = this.sizeInBits >> 3;
        arrby[n4] = (byte)(n2 << 7 - n3 | arrby[n4]);
        ++this.sizeInBits;
    }

    public void appendBitVector(BitVector bitVector) {
        int n2 = bitVector.size();
        for (int i2 = 0; i2 < n2; ++i2) {
            this.appendBit(bitVector.at(i2));
        }
    }

    public void appendBits(int n2, int n3) {
        if (n3 >= 0 && n3 <= 32) {
            while (n3 > 0) {
                if ((this.sizeInBits & 7) == 0 && n3 >= 8) {
                    this.appendByte(n2 >> n3 - 8 & 255);
                    n3 -= 8;
                    continue;
                }
                this.appendBit(n2 >> n3 - 1 & 1);
                --n3;
            }
            return;
        }
        throw new IllegalArgumentException("Num bits must be between 0 and 32");
    }

    public int at(int n2) {
        if (n2 >= 0 && n2 < this.sizeInBits) {
            return (this.array[n2 >> 3] & 255) >> 7 - (n2 & 7) & 1;
        }
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("Bad index: ");
        stringBuilder.append(n2);
        throw new IllegalArgumentException(stringBuilder.toString());
    }

    public byte[] getArray() {
        return this.array;
    }

    public int size() {
        return this.sizeInBits;
    }

    public int sizeInBytes() {
        return this.sizeInBits + 7 >> 3;
    }

    /*
     * Enabled aggressive block sorting
     */
    public String toString() {
        StringBuffer stringBuffer = new StringBuffer(this.sizeInBits);
        int n2 = 0;
        while (n2 < this.sizeInBits) {
            int n3;
            if (this.at(n2) == 0) {
                n3 = 48;
            } else {
                if (this.at(n2) != 1) {
                    throw new IllegalArgumentException("Byte isn't 0 or 1");
                }
                n3 = 49;
            }
            stringBuffer.append((char)n3);
            ++n2;
        }
        return stringBuffer.toString();
    }

    public void xor(BitVector bitVector) {
        if (this.sizeInBits == bitVector.size()) {
            int n2 = this.sizeInBits;
            for (int i2 = 0; i2 < n2 + 7 >> 3; ++i2) {
                byte[] arrby = this.array;
                arrby[i2] = (byte)(arrby[i2] ^ bitVector.array[i2]);
            }
            return;
        }
        throw new IllegalArgumentException("BitVector sizes don't match");
    }
}

