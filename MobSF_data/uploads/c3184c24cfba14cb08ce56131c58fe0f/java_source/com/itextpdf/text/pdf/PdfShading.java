/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf;

import com.itextpdf.text.BaseColor;
import com.itextpdf.text.error_messages.MessageLocalization;
import com.itextpdf.text.pdf.CMYKColor;
import com.itextpdf.text.pdf.ColorDetails;
import com.itextpdf.text.pdf.DeviceNColor;
import com.itextpdf.text.pdf.ExtendedColor;
import com.itextpdf.text.pdf.GrayColor;
import com.itextpdf.text.pdf.ICachedColorSpace;
import com.itextpdf.text.pdf.PdfArray;
import com.itextpdf.text.pdf.PdfBoolean;
import com.itextpdf.text.pdf.PdfDeviceNColor;
import com.itextpdf.text.pdf.PdfDictionary;
import com.itextpdf.text.pdf.PdfFunction;
import com.itextpdf.text.pdf.PdfIndirectObject;
import com.itextpdf.text.pdf.PdfIndirectReference;
import com.itextpdf.text.pdf.PdfName;
import com.itextpdf.text.pdf.PdfNumber;
import com.itextpdf.text.pdf.PdfObject;
import com.itextpdf.text.pdf.PdfSpotColor;
import com.itextpdf.text.pdf.PdfWriter;
import com.itextpdf.text.pdf.SpotColor;

public class PdfShading {
    protected boolean antiAlias = false;
    protected float[] bBox;
    protected ColorDetails colorDetails;
    private BaseColor cspace;
    protected PdfDictionary shading;
    protected PdfName shadingName;
    protected PdfIndirectReference shadingReference;
    protected int shadingType;
    protected PdfWriter writer;

    protected PdfShading(PdfWriter pdfWriter) {
        this.writer = pdfWriter;
    }

    public static void checkCompatibleColors(BaseColor baseColor, BaseColor baseColor2) {
        int n2 = ExtendedColor.getType(baseColor);
        if (n2 == ExtendedColor.getType(baseColor2)) {
            if (n2 == 3 && ((SpotColor)baseColor).getPdfSpotColor() != ((SpotColor)baseColor2).getPdfSpotColor()) {
                throw new IllegalArgumentException(MessageLocalization.getComposedMessage("the.spot.color.must.be.the.same.only.the.tint.can.vary", new Object[0]));
            }
            if (n2 == 4 || n2 == 5) {
                PdfShading.throwColorSpaceError();
            }
            return;
        }
        throw new IllegalArgumentException(MessageLocalization.getComposedMessage("both.colors.must.be.of.the.same.type", new Object[0]));
    }

    public static float[] getColorArray(BaseColor baseColor) {
        int n2 = ExtendedColor.getType(baseColor);
        if (n2 != 6) {
            switch (n2) {
                default: {
                    PdfShading.throwColorSpaceError();
                    return null;
                }
                case 3: {
                    return new float[]{((SpotColor)baseColor).getTint()};
                }
                case 2: {
                    baseColor = (CMYKColor)baseColor;
                    return new float[]{baseColor.getCyan(), baseColor.getMagenta(), baseColor.getYellow(), baseColor.getBlack()};
                }
                case 1: {
                    return new float[]{((GrayColor)baseColor).getGray()};
                }
                case 0: 
            }
            return new float[]{(float)baseColor.getRed() / 255.0f, (float)baseColor.getGreen() / 255.0f, (float)baseColor.getBlue() / 255.0f};
        }
        return ((DeviceNColor)baseColor).getTints();
    }

    public static PdfShading simpleAxial(PdfWriter pdfWriter, float f2, float f3, float f4, float f5, BaseColor baseColor, BaseColor baseColor2) {
        return PdfShading.simpleAxial(pdfWriter, f2, f3, f4, f5, baseColor, baseColor2, true, true);
    }

    public static PdfShading simpleAxial(PdfWriter pdfWriter, float f2, float f3, float f4, float f5, BaseColor baseColor, BaseColor object, boolean bl2, boolean bl3) {
        PdfShading.checkCompatibleColors(baseColor, (BaseColor)object);
        float[] arrf = PdfShading.getColorArray(baseColor);
        object = PdfShading.getColorArray((BaseColor)object);
        object = PdfFunction.type2(pdfWriter, new float[]{0.0f, 1.0f}, null, arrf, object, 1.0f);
        return PdfShading.type2(pdfWriter, baseColor, new float[]{f2, f3, f4, f5}, null, (PdfFunction)object, new boolean[]{bl2, bl3});
    }

    public static PdfShading simpleRadial(PdfWriter pdfWriter, float f2, float f3, float f4, float f5, float f6, float f7, BaseColor baseColor, BaseColor baseColor2) {
        return PdfShading.simpleRadial(pdfWriter, f2, f3, f4, f5, f6, f7, baseColor, baseColor2, true, true);
    }

    public static PdfShading simpleRadial(PdfWriter pdfWriter, float f2, float f3, float f4, float f5, float f6, float f7, BaseColor baseColor, BaseColor object, boolean bl2, boolean bl3) {
        PdfShading.checkCompatibleColors(baseColor, (BaseColor)object);
        float[] arrf = PdfShading.getColorArray(baseColor);
        object = PdfShading.getColorArray((BaseColor)object);
        object = PdfFunction.type2(pdfWriter, new float[]{0.0f, 1.0f}, null, arrf, object, 1.0f);
        return PdfShading.type3(pdfWriter, baseColor, new float[]{f2, f3, f4, f5, f6, f7}, null, (PdfFunction)object, new boolean[]{bl2, bl3});
    }

    public static void throwColorSpaceError() {
        throw new IllegalArgumentException(MessageLocalization.getComposedMessage("a.tiling.or.shading.pattern.cannot.be.used.as.a.color.space.in.a.shading.pattern", new Object[0]));
    }

    public static PdfShading type1(PdfWriter object, BaseColor baseColor, float[] arrf, float[] arrf2, PdfFunction pdfFunction) {
        object = new PdfShading((PdfWriter)object);
        object.shading = new PdfDictionary();
        object.shadingType = 1;
        object.shading.put(PdfName.SHADINGTYPE, new PdfNumber(object.shadingType));
        object.setColorSpace(baseColor);
        if (arrf != null) {
            object.shading.put(PdfName.DOMAIN, new PdfArray(arrf));
        }
        if (arrf2 != null) {
            object.shading.put(PdfName.MATRIX, new PdfArray(arrf2));
        }
        object.shading.put(PdfName.FUNCTION, pdfFunction.getReference());
        return object;
    }

    public static PdfShading type2(PdfWriter object, BaseColor object2, float[] arrf, float[] arrf2, PdfFunction pdfFunction, boolean[] arrbl) {
        PdfShading pdfShading = new PdfShading((PdfWriter)object);
        pdfShading.shading = new PdfDictionary();
        pdfShading.shadingType = 2;
        pdfShading.shading.put(PdfName.SHADINGTYPE, new PdfNumber(pdfShading.shadingType));
        pdfShading.setColorSpace((BaseColor)object2);
        pdfShading.shading.put(PdfName.COORDS, new PdfArray(arrf));
        if (arrf2 != null) {
            pdfShading.shading.put(PdfName.DOMAIN, new PdfArray(arrf2));
        }
        pdfShading.shading.put(PdfName.FUNCTION, pdfFunction.getReference());
        if (arrbl != null && (arrbl[0] || arrbl[1])) {
            object = arrbl[0] ? PdfBoolean.PDFTRUE : PdfBoolean.PDFFALSE;
            object2 = new PdfArray((PdfObject)object);
            object = arrbl[1] ? PdfBoolean.PDFTRUE : PdfBoolean.PDFFALSE;
            object2.add((PdfObject)object);
            pdfShading.shading.put(PdfName.EXTEND, (PdfObject)object2);
        }
        return pdfShading;
    }

    public static PdfShading type3(PdfWriter object, BaseColor baseColor, float[] arrf, float[] arrf2, PdfFunction pdfFunction, boolean[] arrbl) {
        object = PdfShading.type2((PdfWriter)object, baseColor, arrf, arrf2, pdfFunction, arrbl);
        object.shadingType = 3;
        object.shading.put(PdfName.SHADINGTYPE, new PdfNumber(object.shadingType));
        return object;
    }

    public void addToBody() {
        if (this.bBox != null) {
            this.shading.put(PdfName.BBOX, new PdfArray(this.bBox));
        }
        if (this.antiAlias) {
            this.shading.put(PdfName.ANTIALIAS, PdfBoolean.PDFTRUE);
        }
        this.writer.addToBody((PdfObject)this.shading, this.getShadingReference());
    }

    public float[] getBBox() {
        return this.bBox;
    }

    ColorDetails getColorDetails() {
        return this.colorDetails;
    }

    public BaseColor getColorSpace() {
        return this.cspace;
    }

    PdfName getShadingName() {
        return this.shadingName;
    }

    PdfIndirectReference getShadingReference() {
        if (this.shadingReference == null) {
            this.shadingReference = this.writer.getPdfIndirectReference();
        }
        return this.shadingReference;
    }

    PdfWriter getWriter() {
        return this.writer;
    }

    public boolean isAntiAlias() {
        return this.antiAlias;
    }

    public void setAntiAlias(boolean bl2) {
        this.antiAlias = bl2;
    }

    public void setBBox(float[] arrf) {
        if (arrf.length == 4) {
            this.bBox = arrf;
            return;
        }
        throw new IllegalArgumentException(MessageLocalization.getComposedMessage("bbox.must.be.a.4.element.array", new Object[0]));
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Lifted jumps to return sites
     */
    protected void setColorSpace(BaseColor var1_1) {
        block8 : {
            block7 : {
                this.cspace = var1_1;
                switch (ExtendedColor.getType((BaseColor)var1_1)) {
                    default: {
                        break block7;
                    }
                    case 6: {
                        var2_2 = (DeviceNColor)var1_1;
                        var1_1 = this.writer;
                        var2_2 = var2_2.getPdfDeviceNColor();
                        ** GOTO lbl17
                    }
                    case 4: 
                    case 5: {
                        PdfShading.throwColorSpaceError();
                        break block7;
                    }
                    case 3: {
                        var2_2 = (SpotColor)var1_1;
                        var1_1 = this.writer;
                        var2_2 = var2_2.getPdfSpotColor();
lbl17: // 2 sources:
                        this.colorDetails = var1_1.addSimple((ICachedColorSpace)var2_2);
                        var1_1 = this.colorDetails.getIndirectReference();
                        break block8;
                    }
                    case 2: {
                        var1_1 = PdfName.DEVICECMYK;
                        break block8;
                    }
                    case 1: 
                }
                var1_1 = PdfName.DEVICEGRAY;
                break block8;
            }
            var1_1 = PdfName.DEVICERGB;
        }
        this.shading.put(PdfName.COLORSPACE, (PdfObject)var1_1);
    }

    void setName(int n2) {
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("Sh");
        stringBuilder.append(n2);
        this.shadingName = new PdfName(stringBuilder.toString());
    }
}

