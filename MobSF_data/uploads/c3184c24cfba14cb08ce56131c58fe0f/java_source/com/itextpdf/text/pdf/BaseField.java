/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf;

import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.error_messages.MessageLocalization;
import com.itextpdf.text.pdf.BaseFont;
import com.itextpdf.text.pdf.PdfAppearance;
import com.itextpdf.text.pdf.PdfCopyFieldsImp;
import com.itextpdf.text.pdf.PdfDictionary;
import com.itextpdf.text.pdf.PdfName;
import com.itextpdf.text.pdf.PdfObject;
import com.itextpdf.text.pdf.PdfWriter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;

public abstract class BaseField {
    public static final float BORDER_WIDTH_MEDIUM = 2.0f;
    public static final float BORDER_WIDTH_THICK = 3.0f;
    public static final float BORDER_WIDTH_THIN = 1.0f;
    public static final int COMB = 16777216;
    public static final int DO_NOT_SCROLL = 8388608;
    public static final int DO_NOT_SPELL_CHECK = 4194304;
    public static final int EDIT = 262144;
    public static final int FILE_SELECTION = 1048576;
    public static final int HIDDEN = 1;
    public static final int HIDDEN_BUT_PRINTABLE = 3;
    public static final int MULTILINE = 4096;
    public static final int MULTISELECT = 2097152;
    public static final int PASSWORD = 8192;
    public static final int READ_ONLY = 1;
    public static final int REQUIRED = 2;
    public static final int VISIBLE = 0;
    public static final int VISIBLE_BUT_DOES_NOT_PRINT = 2;
    private static final HashMap<PdfName, Integer> fieldKeys = new HashMap();
    protected int alignment = 0;
    protected BaseColor backgroundColor;
    protected BaseColor borderColor;
    protected int borderStyle = 0;
    protected float borderWidth = 1.0f;
    protected Rectangle box;
    protected String fieldName;
    protected BaseFont font;
    protected float fontSize = 0.0f;
    protected int maxCharacterLength;
    protected int options;
    protected int rotation = 0;
    protected String text;
    protected BaseColor textColor;
    protected int visibility;
    protected PdfWriter writer;

    static {
        fieldKeys.putAll(PdfCopyFieldsImp.fieldKeys);
        fieldKeys.put(PdfName.T, 1);
    }

    public BaseField(PdfWriter pdfWriter, Rectangle rectangle, String string2) {
        this.writer = pdfWriter;
        this.setBox(rectangle);
        this.fieldName = string2;
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Lifted jumps to return sites
     */
    protected static ArrayList<String> breakLines(ArrayList<String> var0, BaseFont var1_1, float var2_2, float var3_3) {
        var17_4 = new ArrayList<String>();
        var18_5 = new StringBuffer();
        var15_6 = 0;
        while (var15_6 < var0.size()) {
            var18_5.setLength(0);
            var19_19 = var0.get(var15_6).toCharArray();
            var16_18 = var19_19.length;
            var7_10 = 0;
            var11_14 = 0;
            var5_8 = 0.0f;
            var8_11 = -1;
            var10_13 = 0;
            while (var7_10 < var16_18) {
                block16 : {
                    block14 : {
                        block11 : {
                            block13 : {
                                block12 : {
                                    block15 : {
                                        var4_7 = var19_19[var7_10];
                                        switch (var11_14) {
                                            default: {
                                                var12_15 = var7_10;
                                                var13_16 = var11_14;
                                                var9_12 = var8_11;
                                                var14_17 = var10_13;
                                                break block11;
                                            }
                                            case 2: {
                                                var12_15 = var7_10;
                                                var13_16 = var11_14;
                                                var9_12 = var8_11;
                                                var14_17 = var10_13;
                                                if (var4_7 == ' ') break block11;
                                                var9_12 = var7_10 - 1;
                                                break block12;
                                            }
                                            case 1: {
                                                var6_9 = var5_8 + var1_1.getWidthPoint(var4_7, var2_2);
                                                var18_5.append(var4_7);
                                                if (var4_7 == ' ') {
                                                    var8_11 = var7_10;
                                                }
                                                var12_15 = var7_10;
                                                var13_16 = var11_14;
                                                var5_8 = var6_9;
                                                var9_12 = var8_11;
                                                var14_17 = var10_13;
                                                if (var6_9 <= var3_3) break block11;
                                                if (var8_11 < 0) ** GOTO lbl52
                                                var18_5.setLength(var8_11 - var10_13);
                                                BaseField.trimRight(var18_5);
                                                var17_4.add(var18_5.toString());
                                                var18_5.setLength(0);
                                                var14_17 = var8_11;
                                                var13_16 = 2;
                                                var5_8 = 0.0f;
                                                var9_12 = -1;
                                                var12_15 = var8_11;
                                                break block11;
lbl52: // 1 sources:
                                                var9_12 = var7_10;
                                                if (var18_5.length() > 1) {
                                                    var9_12 = var7_10 - 1;
                                                    var18_5.setLength(var18_5.length() - 1);
                                                }
                                                var17_4.add(var18_5.toString());
                                                var18_5.setLength(0);
                                                if (var4_7 == ' ') break;
                                                var14_17 = var9_12;
                                                break block13;
                                            }
                                            case 0: {
                                                var6_9 = var5_8 + var1_1.getWidthPoint(var4_7, var2_2);
                                                var18_5.append(var4_7);
                                                if (var6_9 <= var3_3) break block14;
                                                var9_12 = var7_10;
                                                if (var18_5.length() > 1) {
                                                    var9_12 = var7_10 - 1;
                                                    var18_5.setLength(var18_5.length() - 1);
                                                }
                                                var17_4.add(var18_5.toString());
                                                var18_5.setLength(0);
                                                if (var4_7 != ' ') break block15;
                                            }
                                        }
                                        var14_17 = var9_12;
                                        var11_14 = 2;
                                        break block13;
                                    }
                                    var10_13 = var9_12;
                                }
                                var11_14 = 1;
                                var14_17 = var10_13;
                            }
                            var5_8 = 0.0f;
                            var12_15 = var9_12;
                            var13_16 = var11_14;
                            var9_12 = var8_11;
                        }
                        var11_14 = var13_16;
                        break block16;
                    }
                    var12_15 = var7_10;
                    var5_8 = var6_9;
                    var9_12 = var8_11;
                    var14_17 = var10_13;
                    if (var4_7 != ' ') {
                        var11_14 = 1;
                        var14_17 = var10_13;
                        var9_12 = var8_11;
                        var5_8 = var6_9;
                        var12_15 = var7_10;
                    }
                }
                var7_10 = var12_15 + 1;
                var8_11 = var9_12;
                var10_13 = var14_17;
            }
            BaseField.trimRight(var18_5);
            var17_4.add(var18_5.toString());
            ++var15_6;
        }
        return var17_4;
    }

    private void drawBottomFrame(PdfAppearance pdfAppearance) {
        pdfAppearance.moveTo(this.borderWidth, this.borderWidth);
        pdfAppearance.lineTo(this.box.getWidth() - this.borderWidth, this.borderWidth);
        pdfAppearance.lineTo(this.box.getWidth() - this.borderWidth, this.box.getHeight() - this.borderWidth);
        pdfAppearance.lineTo(this.box.getWidth() - this.borderWidth * 2.0f, this.box.getHeight() - this.borderWidth * 2.0f);
        pdfAppearance.lineTo(this.box.getWidth() - this.borderWidth * 2.0f, this.borderWidth * 2.0f);
        pdfAppearance.lineTo(this.borderWidth * 2.0f, this.borderWidth * 2.0f);
        pdfAppearance.lineTo(this.borderWidth, this.borderWidth);
        pdfAppearance.fill();
    }

    private void drawTopFrame(PdfAppearance pdfAppearance) {
        pdfAppearance.moveTo(this.borderWidth, this.borderWidth);
        pdfAppearance.lineTo(this.borderWidth, this.box.getHeight() - this.borderWidth);
        pdfAppearance.lineTo(this.box.getWidth() - this.borderWidth, this.box.getHeight() - this.borderWidth);
        pdfAppearance.lineTo(this.box.getWidth() - this.borderWidth * 2.0f, this.box.getHeight() - this.borderWidth * 2.0f);
        pdfAppearance.lineTo(this.borderWidth * 2.0f, this.box.getHeight() - this.borderWidth * 2.0f);
        pdfAppearance.lineTo(this.borderWidth * 2.0f, this.borderWidth * 2.0f);
        pdfAppearance.lineTo(this.borderWidth, this.borderWidth);
        pdfAppearance.fill();
    }

    protected static ArrayList<String> getHardBreaks(String charSequence) {
        ArrayList<String> arrayList = new ArrayList<String>();
        char[] arrc = charSequence.toCharArray();
        int n2 = arrc.length;
        charSequence = new StringBuffer();
        for (int i2 = 0; i2 < n2; ++i2) {
            char c2 = arrc[i2];
            if (c2 == '\r') {
                int n3 = i2 + 1;
                int n4 = i2;
                if (n3 < n2) {
                    n4 = i2;
                    if (arrc[n3] == '\n') {
                        n4 = n3;
                    }
                }
                arrayList.add(charSequence.toString());
                charSequence = new StringBuffer();
                i2 = n4;
                continue;
            }
            if (c2 == '\n') {
                arrayList.add(charSequence.toString());
                charSequence = new StringBuffer();
                continue;
            }
            charSequence.append(c2);
        }
        arrayList.add(charSequence.toString());
        return arrayList;
    }

    public static void moveFields(PdfDictionary pdfDictionary, PdfDictionary pdfDictionary2) {
        Iterator<PdfName> iterator = pdfDictionary.getKeys().iterator();
        while (iterator.hasNext()) {
            PdfName pdfName = iterator.next();
            if (!fieldKeys.containsKey(pdfName)) continue;
            if (pdfDictionary2 != null) {
                pdfDictionary2.put(pdfName, pdfDictionary.get(pdfName));
            }
            iterator.remove();
        }
    }

    protected static void trimRight(StringBuffer stringBuffer) {
        int n2 = stringBuffer.length();
        while (n2 != 0) {
            if (stringBuffer.charAt(--n2) != ' ') {
                return;
            }
            stringBuffer.setLength(n2);
        }
        return;
    }

    public int getAlignment() {
        return this.alignment;
    }

    public BaseColor getBackgroundColor() {
        return this.backgroundColor;
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Lifted jumps to return sites
     */
    protected PdfAppearance getBorderAppearance() {
        block15 : {
            block16 : {
                block17 : {
                    block14 : {
                        block12 : {
                            block13 : {
                                block10 : {
                                    block11 : {
                                        var11_1 = PdfAppearance.createAppearance(this.writer, this.box.getWidth(), this.box.getHeight());
                                        var7_2 = this.rotation;
                                        if (var7_2 == 90) break block10;
                                        if (var7_2 == 180) break block11;
                                        if (var7_2 != 270) break block12;
                                        var1_3 = 0.0f;
                                        var2_4 = -1.0f;
                                        var3_5 = 1.0f;
                                        var4_6 = 0.0f;
                                        var5_7 = 0.0f;
                                        var6_8 = this.box.getWidth();
                                        break block13;
                                    }
                                    var1_3 = -1.0f;
                                    var2_4 = 0.0f;
                                    var3_5 = 0.0f;
                                    var4_6 = -1.0f;
                                    var5_7 = this.box.getWidth();
                                    var6_8 = this.box.getHeight();
                                    break block13;
                                }
                                var1_3 = 0.0f;
                                var2_4 = 1.0f;
                                var3_5 = -1.0f;
                                var4_6 = 0.0f;
                                var5_7 = this.box.getHeight();
                                var6_8 = 0.0f;
                            }
                            var11_1.setMatrix(var1_3, var2_4, var3_5, var4_6, var5_7, var6_8);
                        }
                        var11_1.saveState();
                        if (this.backgroundColor != null) {
                            var11_1.setColorFill(this.backgroundColor);
                            var11_1.rectangle(0.0f, 0.0f, this.box.getWidth(), this.box.getHeight());
                            var11_1.fill();
                        }
                        if (this.borderStyle != 4) break block14;
                        if (this.borderWidth == 0.0f || this.borderColor == null) break block15;
                        var11_1.setColorStroke(this.borderColor);
                        var11_1.setLineWidth(this.borderWidth);
                        var11_1.moveTo(0.0f, this.borderWidth / 2.0f);
                        var11_1.lineTo(this.box.getWidth(), this.borderWidth / 2.0f);
                        break block16;
                    }
                    if (this.borderStyle != 2) break block17;
                    if (this.borderWidth != 0.0f && this.borderColor != null) {
                        var11_1.setColorStroke(this.borderColor);
                        var11_1.setLineWidth(this.borderWidth);
                        var11_1.rectangle(this.borderWidth / 2.0f, this.borderWidth / 2.0f, this.box.getWidth() - this.borderWidth, this.box.getHeight() - this.borderWidth);
                        var11_1.stroke();
                    }
                    var9_10 = var10_9 = this.backgroundColor;
                    if (var10_9 == null) {
                        var9_10 = BaseColor.WHITE;
                    }
                    var11_1.setGrayFill(1.0f);
                    this.drawTopFrame(var11_1);
                    var11_1.setColorFill(var9_10.darker());
                    ** GOTO lbl67
                }
                if (this.borderStyle == 3) {
                    if (this.borderWidth != 0.0f && this.borderColor != null) {
                        var11_1.setColorStroke(this.borderColor);
                        var11_1.setLineWidth(this.borderWidth);
                        var11_1.rectangle(this.borderWidth / 2.0f, this.borderWidth / 2.0f, this.box.getWidth() - this.borderWidth, this.box.getHeight() - this.borderWidth);
                        var11_1.stroke();
                    }
                    var11_1.setGrayFill(0.5f);
                    this.drawTopFrame(var11_1);
                    var11_1.setGrayFill(0.75f);
lbl67: // 2 sources:
                    this.drawBottomFrame(var11_1);
                } else if (this.borderWidth != 0.0f && this.borderColor != null) {
                    var8_11 = this.borderStyle;
                    var7_2 = 1;
                    if (var8_11 == 1) {
                        var11_1.setLineDash(3.0f, 0.0f);
                    }
                    var11_1.setColorStroke(this.borderColor);
                    var11_1.setLineWidth(this.borderWidth);
                    var11_1.rectangle(this.borderWidth / 2.0f, this.borderWidth / 2.0f, this.box.getWidth() - this.borderWidth, this.box.getHeight() - this.borderWidth);
                    var11_1.stroke();
                    if ((this.options & 16777216) != 0 && this.maxCharacterLength > 1) {
                        var1_3 = this.box.getWidth() / (float)this.maxCharacterLength;
                        var2_4 = this.borderWidth / 2.0f;
                        var3_5 = this.box.getHeight();
                        var4_6 = this.borderWidth / 2.0f;
                        while (var7_2 < this.maxCharacterLength) {
                            var5_7 = (float)var7_2 * var1_3;
                            var11_1.moveTo(var5_7, var2_4);
                            var11_1.lineTo(var5_7, var3_5 - var4_6);
                            ++var7_2;
                        }
                    }
                }
                break block15;
            }
            var11_1.stroke();
        }
        var11_1.restoreState();
        return var11_1;
    }

    public BaseColor getBorderColor() {
        return this.borderColor;
    }

    public int getBorderStyle() {
        return this.borderStyle;
    }

    public float getBorderWidth() {
        return this.borderWidth;
    }

    public Rectangle getBox() {
        return this.box;
    }

    public String getFieldName() {
        return this.fieldName;
    }

    public BaseFont getFont() {
        return this.font;
    }

    public float getFontSize() {
        return this.fontSize;
    }

    public int getMaxCharacterLength() {
        return this.maxCharacterLength;
    }

    public int getOptions() {
        return this.options;
    }

    protected BaseFont getRealFont() {
        if (this.font == null) {
            return BaseFont.createFont("Helvetica", "Cp1252", false);
        }
        return this.font;
    }

    public int getRotation() {
        return this.rotation;
    }

    public String getText() {
        return this.text;
    }

    public BaseColor getTextColor() {
        return this.textColor;
    }

    public int getVisibility() {
        return this.visibility;
    }

    public PdfWriter getWriter() {
        return this.writer;
    }

    public void setAlignment(int n2) {
        this.alignment = n2;
    }

    public void setBackgroundColor(BaseColor baseColor) {
        this.backgroundColor = baseColor;
    }

    public void setBorderColor(BaseColor baseColor) {
        this.borderColor = baseColor;
    }

    public void setBorderStyle(int n2) {
        this.borderStyle = n2;
    }

    public void setBorderWidth(float f2) {
        this.borderWidth = f2;
    }

    public void setBox(Rectangle rectangle) {
        if (rectangle == null) {
            this.box = null;
            return;
        }
        this.box = new Rectangle(rectangle);
        this.box.normalize();
    }

    public void setFieldName(String string2) {
        this.fieldName = string2;
    }

    public void setFont(BaseFont baseFont) {
        this.font = baseFont;
    }

    public void setFontSize(float f2) {
        this.fontSize = f2;
    }

    public void setMaxCharacterLength(int n2) {
        this.maxCharacterLength = n2;
    }

    public void setOptions(int n2) {
        this.options = n2;
    }

    public void setRotation(int n2) {
        if (n2 % 90 == 0) {
            int n3;
            n2 = n3 = n2 % 360;
            if (n3 < 0) {
                n2 = n3 + 360;
            }
            this.rotation = n2;
            return;
        }
        throw new IllegalArgumentException(MessageLocalization.getComposedMessage("rotation.must.be.a.multiple.of.90", new Object[0]));
    }

    public void setRotationFromPage(Rectangle rectangle) {
        this.setRotation(rectangle.getRotation());
    }

    public void setText(String string2) {
        this.text = string2;
    }

    public void setTextColor(BaseColor baseColor) {
        this.textColor = baseColor;
    }

    public void setVisibility(int n2) {
        this.visibility = n2;
    }

    public void setWriter(PdfWriter pdfWriter) {
        this.writer = pdfWriter;
    }
}

