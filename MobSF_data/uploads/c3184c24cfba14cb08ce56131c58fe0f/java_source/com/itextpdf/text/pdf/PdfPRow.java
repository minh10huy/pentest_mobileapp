/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf;

import com.itextpdf.text.AccessibleElementId;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.ExceptionConverter;
import com.itextpdf.text.Image;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.log.Logger;
import com.itextpdf.text.log.LoggerFactory;
import com.itextpdf.text.pdf.ByteBuffer;
import com.itextpdf.text.pdf.ColumnText;
import com.itextpdf.text.pdf.PdfContentByte;
import com.itextpdf.text.pdf.PdfName;
import com.itextpdf.text.pdf.PdfObject;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPCellEvent;
import com.itextpdf.text.pdf.PdfPHeaderCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import com.itextpdf.text.pdf.interfaces.IAccessibleElement;
import java.util.HashMap;
import java.util.Map;

public class PdfPRow
implements IAccessibleElement {
    static final /* synthetic */ boolean $assertionsDisabled = false;
    public static final float BOTTOM_LIMIT = -1.07374182E9f;
    public static final float RIGHT_LIMIT = 20000.0f;
    private final Logger LOGGER = LoggerFactory.getLogger(PdfPRow.class);
    protected HashMap<PdfName, PdfObject> accessibleAttributes = null;
    protected boolean adjusted = false;
    protected boolean calculated = false;
    private int[] canvasesPos;
    protected PdfPCell[] cells;
    protected float[] extraHeights;
    protected AccessibleElementId id = new AccessibleElementId();
    protected float maxHeight = 0.0f;
    public boolean mayNotBreak = false;
    protected PdfName role = PdfName.TR;
    protected float[] widths;

    public PdfPRow(PdfPRow pdfPRow) {
        this.mayNotBreak = pdfPRow.mayNotBreak;
        this.maxHeight = pdfPRow.maxHeight;
        this.calculated = pdfPRow.calculated;
        this.cells = new PdfPCell[pdfPRow.cells.length];
        for (int i2 = 0; i2 < this.cells.length; ++i2) {
            if (pdfPRow.cells[i2] == null) continue;
            this.cells[i2] = pdfPRow.cells[i2] instanceof PdfPHeaderCell ? new PdfPHeaderCell((PdfPHeaderCell)pdfPRow.cells[i2]) : new PdfPCell(pdfPRow.cells[i2]);
        }
        this.widths = new float[this.cells.length];
        System.arraycopy(pdfPRow.widths, 0, this.widths, 0, this.cells.length);
        this.initExtraHeights();
        this.id = pdfPRow.id;
        this.role = pdfPRow.role;
        if (pdfPRow.accessibleAttributes != null) {
            this.accessibleAttributes = new HashMap<PdfName, PdfObject>(pdfPRow.accessibleAttributes);
        }
    }

    public PdfPRow(PdfPCell[] arrpdfPCell) {
        this(arrpdfPCell, null);
    }

    public PdfPRow(PdfPCell[] arrpdfPCell, PdfPRow pdfPRow) {
        this.cells = arrpdfPCell;
        this.widths = new float[arrpdfPCell.length];
        this.initExtraHeights();
        if (pdfPRow != null) {
            this.id = pdfPRow.id;
            this.role = pdfPRow.role;
            if (pdfPRow.accessibleAttributes != null) {
                this.accessibleAttributes = new HashMap<PdfName, PdfObject>(pdfPRow.accessibleAttributes);
            }
        }
    }

    private static boolean isTagged(PdfContentByte pdfContentByte) {
        if (pdfContentByte != null && pdfContentByte.writer != null && pdfContentByte.writer.isTagged()) {
            return true;
        }
        return false;
    }

    public static float setColumn(ColumnText columnText, float f2, float f3, float f4, float f5) {
        float f6 = f4;
        if (f2 > f4) {
            f6 = f2;
        }
        f4 = f5;
        if (f3 > f5) {
            f4 = f3;
        }
        columnText.setSimpleColumn(f2, f3, f6, f4);
        return f4;
    }

    protected void calculateHeights() {
        this.maxHeight = 0.0f;
        this.LOGGER.info("calculateHeights");
        for (int i2 = 0; i2 < this.cells.length; ++i2) {
            float f2;
            PdfPCell pdfPCell = this.cells[i2];
            if (pdfPCell == null || (f2 = pdfPCell.hasCalculatedHeight() ? pdfPCell.getCalculatedHeight() : pdfPCell.getMaxHeight()) <= this.maxHeight || pdfPCell.getRowspan() != 1) continue;
            this.maxHeight = f2;
        }
        this.calculated = true;
    }

    public void copyRowContent(PdfPTable pdfPTable, int n2) {
        if (pdfPTable == null) {
            return;
        }
        for (int i2 = 0; i2 < this.cells.length; ++i2) {
            PdfPCell pdfPCell = pdfPTable.getRow(n2).getCells()[i2];
            int n3 = n2;
            while (pdfPCell == null && n3 > 0) {
                pdfPCell = pdfPTable.getRow(--n3).getCells()[i2];
            }
            if (this.cells[i2] == null || pdfPCell == null) continue;
            this.cells[i2].setColumn(pdfPCell.getColumn());
            this.calculated = false;
        }
    }

    @Override
    public PdfObject getAccessibleAttribute(PdfName pdfName) {
        if (this.accessibleAttributes != null) {
            return this.accessibleAttributes.get(pdfName);
        }
        return null;
    }

    @Override
    public HashMap<PdfName, PdfObject> getAccessibleAttributes() {
        return this.accessibleAttributes;
    }

    public PdfPCell[] getCells() {
        return this.cells;
    }

    float[] getEventWidth(float f2, float[] arrf) {
        int n2;
        int n3;
        int n4 = 1;
        int n5 = 0;
        int n6 = 1;
        block0 : while (n5 < this.cells.length) {
            n2 = n5;
            n3 = n6++;
            if (this.cells[n5] != null) {
                n5 += this.cells[n5].getColspan();
                continue;
            }
            do {
                n5 = n2;
                n6 = n3;
                if (n2 >= this.cells.length) continue block0;
                n5 = n2;
                n6 = n3++;
                if (this.cells[n2] != null) continue block0;
                ++n2;
            } while (true);
        }
        float[] arrf2 = new float[n6];
        arrf2[0] = f2;
        n5 = 0;
        n6 = n4;
        while (n5 < this.cells.length && n6 < arrf2.length) {
            if (this.cells[n5] != null) {
                n3 = this.cells[n5].getColspan();
                arrf2[n6] = arrf2[n6 - 1];
                for (n2 = 0; n2 < n3 && n5 < arrf.length; ++n2, ++n5) {
                    arrf2[n6] = arrf2[n6] + arrf[n5];
                }
                ++n6;
                continue;
            }
            arrf2[n6] = arrf2[n6 - 1];
            while (n5 < this.cells.length && this.cells[n5] == null) {
                arrf2[n6] = arrf2[n6] + arrf[n5];
                ++n5;
            }
            ++n6;
        }
        return arrf2;
    }

    @Override
    public AccessibleElementId getId() {
        return this.id;
    }

    public float getMaxHeights() {
        if (!this.calculated) {
            this.calculateHeights();
        }
        return this.maxHeight;
    }

    public float getMaxRowHeightsWithoutCalculating() {
        return this.maxHeight;
    }

    @Override
    public PdfName getRole() {
        return this.role;
    }

    public boolean hasRowspan() {
        for (int i2 = 0; i2 < this.cells.length; ++i2) {
            if (this.cells[i2] == null || this.cells[i2].getRowspan() <= 1) continue;
            return true;
        }
        return false;
    }

    protected void initExtraHeights() {
        this.extraHeights = new float[this.cells.length];
        for (int i2 = 0; i2 < this.extraHeights.length; ++i2) {
            this.extraHeights[i2] = 0.0f;
        }
    }

    public boolean isAdjusted() {
        return this.adjusted;
    }

    public boolean isCalculated() {
        return this.calculated;
    }

    @Override
    public boolean isInline() {
        return false;
    }

    public boolean isMayNotBreak() {
        return this.mayNotBreak;
    }

    protected void restoreCanvases(PdfContentByte[] arrpdfContentByte) {
        for (int i2 = 0; i2 < 4; ++i2) {
            ByteBuffer byteBuffer = arrpdfContentByte[i2].getInternalBuffer();
            int n2 = byteBuffer.size();
            arrpdfContentByte[i2].restoreState();
            int[] arrn = this.canvasesPos;
            int n3 = i2 * 2;
            if (n2 != arrn[n3 + 1]) continue;
            byteBuffer.setSize(this.canvasesPos[n3]);
        }
    }

    protected void saveAndRotateCanvases(PdfContentByte[] arrpdfContentByte, float f2, float f3, float f4, float f5, float f6, float f7) {
        if (this.canvasesPos == null) {
            this.canvasesPos = new int[8];
        }
        for (int i2 = 0; i2 < 4; ++i2) {
            ByteBuffer byteBuffer = arrpdfContentByte[i2].getInternalBuffer();
            int[] arrn = this.canvasesPos;
            int n2 = i2 * 2;
            arrn[n2] = byteBuffer.size();
            arrpdfContentByte[i2].saveState();
            arrpdfContentByte[i2].concatCTM(f2, f3, f4, f5, f6, f7);
            this.canvasesPos[n2 + 1] = byteBuffer.size();
        }
    }

    @Override
    public void setAccessibleAttribute(PdfName pdfName, PdfObject pdfObject) {
        if (this.accessibleAttributes == null) {
            this.accessibleAttributes = new HashMap();
        }
        this.accessibleAttributes.put(pdfName, pdfObject);
    }

    public void setAdjusted(boolean bl2) {
        this.adjusted = bl2;
    }

    public void setExtraHeight(int n2, float f2) {
        if (n2 >= 0) {
            if (n2 >= this.cells.length) {
                return;
            }
            this.extraHeights[n2] = f2;
        }
    }

    public void setFinalMaxHeights(float f2) {
        this.setMaxHeights(f2);
        this.calculated = true;
    }

    @Override
    public void setId(AccessibleElementId accessibleElementId) {
        this.id = accessibleElementId;
    }

    public void setMaxHeights(float f2) {
        this.maxHeight = f2;
    }

    public void setMayNotBreak(boolean bl2) {
        this.mayNotBreak = bl2;
    }

    @Override
    public void setRole(PdfName pdfName) {
        this.role = pdfName;
    }

    public boolean setWidths(float[] arrf) {
        int n2 = arrf.length;
        int n3 = this.cells.length;
        if (n2 != n3) {
            return false;
        }
        System.arraycopy(arrf, 0, this.widths, 0, this.cells.length);
        this.calculated = false;
        float f2 = 0.0f;
        for (int i2 = 0; i2 < arrf.length; ++i2) {
            PdfPCell pdfPCell = this.cells[i2];
            if (pdfPCell == null) {
                f2 += arrf[i2];
                continue;
            }
            pdfPCell.setLeft(f2);
            n3 = pdfPCell.getColspan();
            for (n2 = i2; n2 < n3 + i2; ++n2) {
                f2 += arrf[n2];
            }
            i2 = n2 - 1;
            pdfPCell.setRight(f2);
            pdfPCell.setTop(0.0f);
        }
        return true;
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    public PdfPRow splitRow(PdfPTable var1_1, int var2_3, float var3_4) {
        block23 : {
            this.LOGGER.info(String.format("Splitting row %s available height: %s", new Object[]{var2_3, Float.valueOf(var3_4)}));
            var17_5 = new PdfPCell[this.cells.length];
            var15_6 = new float[this.cells.length];
            var16_7 = new float[this.cells.length];
            var13_8 = new float[this.cells.length];
            var10_9 = 0;
            var8_10 = 1;
            do lbl-1000: // 2 sources:
            {
                block26 : {
                    block28 : {
                        block27 : {
                            block24 : {
                                var11_16 = var2_3;
                                var14_18 = var1_1;
                                if (var10_9 >= this.cells.length) break block23;
                                var18_19 = this.cells[var10_9];
                                if (var18_19 != null) break block24;
                                var9_15 = var8_10;
                                if (var14_18.rowSpanAbove(var11_16, var10_9)) {
                                    var9_15 = var11_16;
                                    while (var14_18.rowSpanAbove(var12_17 = var9_15 - 1, var10_9)) {
                                        var14_18.getRow(var12_17).getMaxHeights();
                                        var9_15 = var12_17;
                                    }
                                    var14_18 = var14_18.getRow(var12_17);
                                    var9_15 = var8_10;
                                    if (var14_18 != null) {
                                        var9_15 = var8_10;
                                        if (var14_18.getCells()[var10_9] != null) {
                                            var17_5[var10_9] = new PdfPCell(var14_18.getCells()[var10_9]);
                                            var17_5[var10_9].setColumn(null);
                                            var17_5[var10_9].setRowspan(var14_18.getCells()[var10_9].getRowspan() - var11_16 + var12_17);
                                            var9_15 = 0;
                                        }
                                    }
                                }
                                var8_10 = var9_15;
                                break block25;
                            }
                            var15_6[var10_9] = var18_19.getCalculatedHeight();
                            var16_7[var10_9] = var18_19.getFixedHeight();
                            var13_8[var10_9] = var18_19.getMinimumHeight();
                            var19_20 = var18_19.getImage();
                            var14_18 = new PdfPCell(var18_19);
                            if (var19_20 == null) break block26;
                            var4_11 = var18_19.getEffectivePaddingBottom() + var18_19.getEffectivePaddingTop() + 2.0f;
                            if (var19_20.isScaleToFitHeight()) break block27;
                            var9_15 = var8_10;
                            if (var19_20.getScaledHeight() + var4_11 >= var3_4) break block28;
                        }
                        var9_15 = var8_10;
                        if (var3_4 > var4_11) {
                            var14_18.setPhrase(null);
                            var9_15 = 0;
                        }
                    }
                    var8_10 = var9_15;
                    ** break block29
                }
                var19_20 = ColumnText.duplicate(var18_19.getColumn());
                var5_12 = var18_19.getLeft() + var18_19.getEffectivePaddingLeft();
                var6_13 = var18_19.getTop() + var18_19.getEffectivePaddingBottom() - var3_4;
                var4_11 = var18_19.getRight() - var18_19.getEffectivePaddingRight();
                var7_14 = var18_19.getTop() - var18_19.getEffectivePaddingTop();
                var9_15 = var18_19.getRotation();
                if (var9_15 != 90 && var9_15 != 270) {
                    if (var18_19.isNoWrap()) {
                        var4_11 = 20000.0f;
                    }
                    var4_11 = PdfPRow.setColumn((ColumnText)var19_20, var5_12, var6_13 + 1.0E-5f, var4_11, var7_14);
                } else {
                    var4_11 = PdfPRow.setColumn((ColumnText)var19_20, var6_13, var5_12, var7_14, var4_11);
                }
                var11_16 = var19_20.go(true);
                var9_15 = var19_20.getYLine() == var4_11 ? 1 : 0;
                if (var9_15 != 0) {
                    var14_18.setColumn(ColumnText.duplicate(var18_19.getColumn()));
                    var19_20.setFilledWidth(0.0f);
                } else if ((var11_16 & 1) == 0) {
                    var14_18.setColumn((ColumnText)var19_20);
                    var19_20.setFilledWidth(0.0f);
                } else {
                    var14_18.setPhrase(null);
                }
                var8_10 = var8_10 != 0 && var9_15 != 0 ? 1 : 0;
                break;
            } while (true);
            catch (DocumentException var1_2) {
                throw new ExceptionConverter(var1_2);
            }
lbl-1000: // 2 sources:
            {
                block25 : {
                    
                    var17_5[var10_9] = var14_18;
                    var18_19.setCalculatedHeight(var3_4);
                }
                ++var10_9;
                ** while (true)
            }
        }
        if (var8_10 == 0) {
            this.calculateHeights();
            var1_1 = new PdfPRow(var17_5, this);
            var1_1.widths = (float[])this.widths.clone();
            return var1_1;
        }
        var2_3 = 0;
        while (var2_3 < this.cells.length) {
            var1_1 = this.cells[var2_3];
            if (var1_1 != null) {
                var1_1.setCalculatedHeight(var15_6[var2_3]);
                if (var16_7[var2_3] > 0.0f) {
                    var1_1.setFixedHeight(var16_7[var2_3]);
                } else {
                    var1_1.setMinimumHeight(var13_8[var2_3]);
                }
            }
            ++var2_3;
        }
        return null;
    }

    public void splitRowspans(PdfPTable pdfPTable, int n2, PdfPTable pdfPTable2, int n3) {
        if (pdfPTable != null) {
            if (pdfPTable2 == null) {
                return;
            }
            int n4 = 0;
            while (n4 < this.cells.length) {
                if (this.cells[n4] == null) {
                    int n5 = pdfPTable.getCellStartRowIndex(n2, n4);
                    int n6 = pdfPTable2.getCellStartRowIndex(n3, n4);
                    PdfPCell pdfPCell = pdfPTable.getRow(n5).getCells()[n4];
                    PdfPCell pdfPCell2 = pdfPTable2.getRow(n6).getCells()[n4];
                    if (pdfPCell != null) {
                        this.cells[n4] = new PdfPCell(pdfPCell2);
                        n5 = n3 - n6 + 1;
                        this.cells[n4].setRowspan(pdfPCell2.getRowspan() - n5);
                        pdfPCell.setRowspan(n5);
                        this.calculated = false;
                    }
                    ++n4;
                    continue;
                }
                n4 += this.cells[n4].getColspan();
            }
        }
    }

    public void writeBorderAndBackground(float f2, float f3, float f4, PdfPCell pdfPCell, PdfContentByte[] arrpdfContentByte) {
        Object object = pdfPCell.getBackgroundColor();
        if (object != null || pdfPCell.hasBorders()) {
            float f5 = pdfPCell.getRight() + f2;
            f3 = pdfPCell.getTop() + f3;
            f2 = pdfPCell.getLeft() + f2;
            f4 = f3 - f4;
            if (object != null) {
                PdfContentByte pdfContentByte = arrpdfContentByte[1];
                pdfContentByte.setColorFill((BaseColor)object);
                pdfContentByte.rectangle(f2, f4, f5 - f2, f3 - f4);
                pdfContentByte.fill();
            }
            if (pdfPCell.hasBorders()) {
                object = new Rectangle(f2, f4, f5, f3);
                object.cloneNonPositionParameters(pdfPCell);
                object.setBackgroundColor(null);
                arrpdfContentByte[2].rectangle((Rectangle)object);
            }
        }
    }

    /*
     * WARNING - Removed back jump from a try to a catch block - possible behaviour change.
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    public void writeCells(int var1_1, int var2_2, float var3_3, float var4_4, PdfContentByte[] var5_5, boolean var6_8) {
        if (!this.calculated) {
            this.calculateHeights();
        }
        var15_9 = var2_2 < 0 ? this.cells.length : Math.min(var2_2, this.cells.length);
        if (var1_1 < 0) {
            var1_1 = 0;
        }
        if (var1_1 >= var15_9) {
            return;
        }
        while (var1_1 >= 0 && this.cells[var1_1] == null) {
            var7_10 = var3_3;
            if (var1_1 > 0) {
                var7_10 = var3_3 - this.widths[var1_1 - 1];
            }
            --var1_1;
            var3_3 = var7_10;
        }
        var2_2 = var1_1;
        if (var1_1 < 0) {
            var2_2 = 0;
        }
        var9_11 = var3_3;
        if (this.cells[var2_2] != null) {
            var9_11 = var3_3 - this.cells[var2_2].getLeft();
        }
        if (PdfPRow.isTagged(var5_5[3])) {
            var5_5[3].openMCBlock(this);
        }
        var1_1 = var2_2;
        do lbl-1000: // 2 sources:
        {
            block67 : {
                block68 : {
                    block69 : {
                        block64 : {
                            block66 : {
                                block65 : {
                                    if (var1_1 >= var15_9) {
                                        if (PdfPRow.isTagged(var5_5[3]) == false) return;
                                        var5_5[3].closeMCBlock(this);
                                        return;
                                    }
                                    var16_18 = this.cells[var1_1];
                                    if (var16_18 == null) break block63;
                                    if (PdfPRow.isTagged(var5_5[3])) {
                                        var5_5[3].openMCBlock(var16_18);
                                    }
                                    var13_16 = this.maxHeight + this.extraHeights[var1_1];
                                    this.writeBorderAndBackground(var9_11, var4_4, var13_16, var16_18, var5_5);
                                    var18_24 = var16_18.getImage();
                                    var3_3 = var7_10 = var16_18.getTop() + var4_4 - var16_18.getEffectivePaddingTop();
                                    if (var16_18.getHeight() <= var13_16) {
                                        switch (var16_18.getVerticalAlignment()) {
                                            default: {
                                                var3_3 = var7_10;
                                                break;
                                            }
                                            case 6: {
                                                var3_3 = var16_18.getTop() + var4_4 - var13_16;
                                                var7_10 = var16_18.getHeight();
                                                ** break;
                                            }
                                            case 5: {
                                                var3_3 = var16_18.getTop() + var4_4;
                                                var7_10 = (var16_18.getHeight() - var13_16) / 2.0f;
lbl49: // 2 sources:
                                                var3_3 = var3_3 + var7_10 - var16_18.getEffectivePaddingTop();
                                            }
                                        }
                                    }
                                    if (var18_24 == null) break block64;
                                    var17_23 = var18_24;
                                    if (var16_18.getRotation() != 0) {
                                        var17_23 = Image.getInstance((Image)var18_24);
                                        var17_23.setRotation(var17_23.getImageRotation() + (float)((double)var16_18.getRotation() * 3.141592653589793 / 180.0));
                                    }
                                    if (var16_18.getHeight() <= var13_16) break block65;
                                    if (!var17_23.isScaleToFitHeight()) break block63;
                                    var17_23.scalePercent(100.0f);
                                    var17_23.scalePercent((var13_16 - var16_18.getEffectivePaddingTop() - var16_18.getEffectivePaddingBottom()) / var17_23.getScaledHeight() * 100.0f);
                                    var2_2 = 1;
                                    break block66;
                                }
                                var2_2 = 0;
                            }
                            var7_10 = var16_18.getLeft() + var9_11 + var16_18.getEffectivePaddingLeft();
                            var8_12 = var3_3;
                            var3_3 = var7_10;
                            if (var2_2 != 0) {
                                switch (var16_18.getHorizontalAlignment()) {
                                    default: {
                                        var3_3 = var7_10;
                                        ** break;
                                    }
                                    case 2: {
                                        var3_3 = var16_18.getRight() + var9_11 - var16_18.getEffectivePaddingRight() - var17_23.getScaledWidth();
                                        ** break;
                                    }
                                    case 1: 
                                }
                                var3_3 = (var16_18.getLeft() + var16_18.getEffectivePaddingLeft() + var16_18.getRight() - var16_18.getEffectivePaddingRight() - var17_23.getScaledWidth()) / 2.0f + var9_11;
lbl77: // 3 sources:
                                var8_12 = var16_18.getTop() + var4_4 - var16_18.getEffectivePaddingTop();
                            }
                            var17_23.setAbsolutePosition(var3_3, var8_12 - var17_23.getScaledHeight());
                            try {
                                if (PdfPRow.isTagged(var5_5[3])) {
                                    var5_5[3].openMCBlock((IAccessibleElement)var17_23);
                                }
                                var5_5[3].addImage((Image)var17_23);
                                if (!PdfPRow.isTagged(var5_5[3])) ** GOTO lbl202
                                var5_5[3].closeMCBlock((IAccessibleElement)var17_23);
                            }
                            catch (DocumentException var5_6) {
                                throw new ExceptionConverter(var5_6);
                            }
                        }
                        if (var16_18.getRotation() == 90 || var16_18.getRotation() == 270) break block67;
                        var14_17 = var16_18.getFixedHeight();
                        var11_14 = var16_18.getRight() + var9_11 - var16_18.getEffectivePaddingRight();
                        var10_13 = var16_18.getLeft() + var9_11 + var16_18.getEffectivePaddingLeft();
                        var7_10 = var11_14;
                        var8_12 = var10_13;
                        if (!var16_18.isNoWrap()) break block68;
                        switch (var16_18.getHorizontalAlignment()) {
                            default: {
                                if (var16_18.getRotation() != 180) break block69;
                                ** GOTO lbl102
                            }
                            case 2: {
                                if (var16_18.getRotation() == 180) break block69;
lbl102: // 2 sources:
                                var8_12 = var10_13 - 20000.0f;
                                var7_10 = var11_14;
                                break block68;
                            }
                            case 1: 
                        }
                        var7_10 = var11_14 + 10000.0f;
                        var8_12 = var10_13 - 10000.0f;
                        break block68;
                    }
                    var7_10 = var11_14 + 20000.0f;
                    var8_12 = var10_13;
                }
                var17_23 = var6_8 != false ? ColumnText.duplicate(var16_18.getColumn()) : var16_18.getColumn();
                var17_23.setCanvases(var5_5);
                var12_15 = var3_3 - (var13_16 - var16_18.getEffectivePaddingTop() - var16_18.getEffectivePaddingBottom());
                var11_14 = var3_3;
                var10_13 = var12_15;
                if (var14_17 > 0.0f) {
                    var11_14 = var3_3;
                    var10_13 = var12_15;
                    if (var16_18.getHeight() > var13_16) {
                        var11_14 = var16_18.getTop() + var4_4 - var16_18.getEffectivePaddingTop();
                        var10_13 = var16_18.getTop() + var4_4 - var13_16 + var16_18.getEffectivePaddingBottom();
                    }
                }
                if ((var11_14 > var10_13 || var17_23.zeroHeightElement()) && var8_12 < var7_10) {
                    var17_23.setSimpleColumn(var8_12, var10_13 - 0.001f, var7_10, var11_14);
                    if (var16_18.getRotation() == 180) {
                        this.saveAndRotateCanvases(var5_5, -1.0f, 0.0f, 0.0f, -1.0f, var8_12 + var7_10, var4_4 + var4_4 - var13_16 + var16_18.getEffectivePaddingBottom() - var16_18.getEffectivePaddingTop());
                    }
                    var18_24 = var16_18;
                    var17_23.go();
                    if (var18_24.getRotation() != 180) break block60;
                    break block61;
                }
                break block60;
            }
            var18_24 = var16_18;
            var8_12 = var13_16 - var18_24.getEffectivePaddingTop() - var18_24.getEffectivePaddingBottom();
            var7_10 = var18_24.getWidth() - var18_24.getEffectivePaddingLeft() - var18_24.getEffectivePaddingRight();
            var17_23 = ColumnText.duplicate(var18_24.getColumn());
            var17_23.setCanvases(var5_5);
            var17_23.setSimpleColumn(0.0f, 0.0f, 0.001f + var8_12, - var7_10);
            var17_23.go(true);
            break;
        } while (true);
        catch (DocumentException var5_7) {
            throw new ExceptionConverter(var5_7);
        }
        {
            block63 : {
                block60 : {
                    block62 : {
                        block61 : {
                            var3_3 = - var17_23.getYLine();
                            if (var8_12 <= 0.0f || var7_10 <= 0.0f) {
                                var3_3 = 0.0f;
                            }
                            if (var3_3 <= 0.0f) break block60;
                            var7_10 = var3_3;
                            if (var18_24.isUseDescender()) {
                                var7_10 = var3_3 - var17_23.getDescender();
                            }
                            var17_23 = var6_8 != false ? ColumnText.duplicate(var18_24.getColumn()) : var18_24.getColumn();
                            var17_23.setCanvases(var5_5);
                            var17_23.setSimpleColumn(-0.003f, -0.001f, var8_12 + 0.003f, var7_10);
                            if (var18_24.getRotation() == 90) {
                                var10_13 = var18_24.getTop() + var4_4 - var13_16 + var18_24.getEffectivePaddingBottom();
                                switch (var18_24.getVerticalAlignment()) {
                                    default: {
                                        var3_3 = var18_24.getLeft() + var9_11 + var18_24.getEffectivePaddingLeft() + var7_10;
                                        ** break;
                                    }
                                    case 6: {
                                        var3_3 = var18_24.getLeft() + var9_11 + var18_24.getWidth() - var18_24.getEffectivePaddingRight();
                                        ** break;
                                    }
                                    case 5: 
                                }
                                var3_3 = var18_24.getLeft() + var9_11 + (var18_24.getWidth() + var18_24.getEffectivePaddingLeft() - var18_24.getEffectivePaddingRight() + var7_10) / 2.0f;
                                ** break;
lbl167: // 3 sources:
                                var11_14 = 1.0f;
                                var7_10 = -1.0f;
                                var8_12 = var3_3;
                                var3_3 = var11_14;
                            } else {
                                var10_13 = var18_24.getTop() + var4_4 - var18_24.getEffectivePaddingTop();
                                switch (var18_24.getVerticalAlignment()) {
                                    default: {
                                        var3_3 = var18_24.getLeft() + var9_11 + var18_24.getWidth() - var18_24.getEffectivePaddingRight() - var7_10;
                                        break;
                                    }
                                    case 6: {
                                        var3_3 = var18_24.getLeft() + var9_11;
                                        var7_10 = var18_24.getEffectivePaddingLeft();
                                        ** break;
                                    }
                                    case 5: {
                                        var3_3 = var18_24.getLeft() + var9_11;
                                        var7_10 = (var18_24.getWidth() + var18_24.getEffectivePaddingLeft() - var18_24.getEffectivePaddingRight() - var7_10) / 2.0f;
lbl184: // 2 sources:
                                        var3_3 += var7_10;
                                    }
                                }
                                var8_12 = var3_3;
                                var3_3 = -1.0f;
                                var7_10 = 1.0f;
                            }
                            this.saveAndRotateCanvases(var5_5, 0.0f, var3_3, var7_10, 0.0f, var8_12, var10_13);
                            try {
                                var17_23.go();
                            }
                            catch (Throwable var16_21) {
                                break block62;
                            }
                        }
                        this.restoreCanvases(var5_5);
                        break block60;
                        catch (DocumentException var16_22) {
                            throw new ExceptionConverter(var16_22);
                        }
                    }
                    this.restoreCanvases(var5_5);
                    throw var16_21;
                }
                if ((var17_23 = var16_18.getCellEvent()) != null) {
                    var17_23.cellLayout(var16_18, new Rectangle(var16_18.getLeft() + var9_11, var16_18.getTop() + var4_4 - var13_16, var16_18.getRight() + var9_11, var16_18.getTop() + var4_4), var5_5);
                }
                if (PdfPRow.isTagged(var5_5[3])) {
                    var5_5[3].closeMCBlock(var16_18);
                }
            }
            ++var1_1;
            ** while (true)
        }
        {
            catch (Throwable var16_19) {
            }
            catch (DocumentException var16_20) {}
            {
                throw new ExceptionConverter(var16_20);
            }
        }
        if (var18_24.getRotation() != 180) throw var16_19;
        this.restoreCanvases(var5_5);
        throw var16_19;
    }
}

