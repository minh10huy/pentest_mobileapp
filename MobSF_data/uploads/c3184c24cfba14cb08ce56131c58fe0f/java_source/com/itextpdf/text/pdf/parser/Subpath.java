/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf.parser;

import com.itextpdf.awt.geom.Point2D;
import com.itextpdf.text.pdf.parser.BezierCurve;
import com.itextpdf.text.pdf.parser.Shape;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;

public class Subpath {
    private boolean closed;
    private List<Shape> segments = new ArrayList<Shape>();
    private Point2D startPoint;

    public Subpath() {
    }

    public Subpath(float f2, float f3) {
        this.startPoint = new Point2D.Float(f2, f3);
    }

    public Subpath(Point2D point2D) {
        this((float)point2D.getX(), (float)point2D.getY());
    }

    public Subpath(Subpath subpath) {
        this.startPoint = subpath.startPoint;
        this.segments.addAll(subpath.getSegments());
        this.closed = subpath.closed;
    }

    public void addSegment(Shape shape) {
        if (this.closed) {
            return;
        }
        if (this.isSinglePointOpen()) {
            this.startPoint = shape.getBasePoints().get(0);
        }
        this.segments.add(shape);
    }

    public Point2D getLastPoint() {
        Point2D point2D = this.startPoint;
        Object object = point2D;
        if (this.segments.size() > 0) {
            object = point2D;
            if (!this.closed) {
                object = this.segments.get(this.segments.size() - 1);
                object = object.getBasePoints().get(object.getBasePoints().size() - 1);
            }
        }
        return object;
    }

    /*
     * Enabled aggressive block sorting
     */
    public List<Point2D> getPiecewiseLinearApproximation() {
        ArrayList<Point2D> arrayList = new ArrayList<Point2D>();
        if (this.segments.size() == 0) {
            return arrayList;
        }
        List<Point2D> list = this.segments.get(0) instanceof BezierCurve ? ((BezierCurve)this.segments.get(0)).getPiecewiseLinearApproximation() : this.segments.get(0).getBasePoints();
        arrayList.addAll(list);
        int n2 = 1;
        while (n2 < this.segments.size()) {
            list = this.segments.get(n2) instanceof BezierCurve ? ((BezierCurve)this.segments.get(n2)).getPiecewiseLinearApproximation() : this.segments.get(n2).getBasePoints();
            list = list.subList(1, list.size());
            arrayList.addAll(list);
            ++n2;
        }
        return arrayList;
    }

    public List<Shape> getSegments() {
        return this.segments;
    }

    public Point2D getStartPoint() {
        return this.startPoint;
    }

    public boolean isClosed() {
        return this.closed;
    }

    public boolean isDegenerate() {
        int n2 = this.segments.size();
        boolean bl2 = false;
        if (n2 > 0 && this.closed) {
            return false;
        }
        Iterator<Shape> iterator = this.segments.iterator();
        while (iterator.hasNext()) {
            if (new HashSet<Point2D>(iterator.next().getBasePoints()).size() == 1) continue;
            return false;
        }
        if (this.segments.size() > 0 || this.closed) {
            bl2 = true;
        }
        return bl2;
    }

    public boolean isEmpty() {
        if (this.startPoint == null) {
            return true;
        }
        return false;
    }

    public boolean isSinglePointClosed() {
        if (this.segments.size() == 0 && this.closed) {
            return true;
        }
        return false;
    }

    public boolean isSinglePointOpen() {
        if (this.segments.size() == 0 && !this.closed) {
            return true;
        }
        return false;
    }

    public void setClosed(boolean bl2) {
        this.closed = bl2;
    }

    public void setStartPoint(float f2, float f3) {
        this.startPoint = new Point2D.Float(f2, f3);
    }

    public void setStartPoint(Point2D point2D) {
        this.setStartPoint((float)point2D.getX(), (float)point2D.getY());
    }
}

