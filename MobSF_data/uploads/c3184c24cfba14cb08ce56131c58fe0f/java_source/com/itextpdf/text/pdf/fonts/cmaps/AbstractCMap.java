/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf.fonts.cmaps;

import com.itextpdf.text.pdf.PdfArray;
import com.itextpdf.text.pdf.PdfEncodings;
import com.itextpdf.text.pdf.PdfNumber;
import com.itextpdf.text.pdf.PdfObject;
import com.itextpdf.text.pdf.PdfString;

public abstract class AbstractCMap {
    private String cmapName;
    private String ordering;
    private String registry;
    private int supplement;

    private static int byteArrayToInt(byte[] arrby) {
        int n2 = 0;
        for (int i2 = 0; i2 < arrby.length; ++i2) {
            n2 = n2 << 8 | arrby[i2] & 255;
        }
        return n2;
    }

    public static byte[] decodeStringToByte(PdfString arrby) {
        arrby = arrby.getBytes();
        byte[] arrby2 = new byte[arrby.length];
        System.arraycopy(arrby, 0, arrby2, 0, arrby.length);
        return arrby2;
    }

    private static void intToByteArray(int n2, byte[] arrby) {
        int n3 = arrby.length - 1;
        int n4 = n2;
        for (n2 = n3; n2 >= 0; --n2) {
            arrby[n2] = (byte)n4;
            n4 >>>= 8;
        }
    }

    abstract void addChar(PdfString var1, PdfObject var2);

    /*
     * Enabled aggressive block sorting
     */
    void addRange(PdfString arrby, PdfString object, PdfObject pdfObject) {
        boolean bl2;
        byte[] arrby2 = AbstractCMap.decodeStringToByte((PdfString)arrby);
        if (arrby2.length == ((Object)(object = AbstractCMap.decodeStringToByte((PdfString)object))).length && arrby2.length != 0) {
            arrby = null;
            bl2 = pdfObject instanceof PdfString;
            if (bl2) {
                arrby = AbstractCMap.decodeStringToByte((PdfString)pdfObject);
            }
        } else {
            throw new IllegalArgumentException("Invalid map.");
        }
        int n2 = AbstractCMap.byteArrayToInt(arrby2);
        int n3 = AbstractCMap.byteArrayToInt((byte[])object);
        int n4 = n2;
        do {
            block10 : {
                PdfString pdfString;
                block12 : {
                    block11 : {
                        block9 : {
                            if (n4 > n3) {
                                return;
                            }
                            AbstractCMap.intToByteArray(n4, arrby2);
                            pdfString = new PdfString(arrby2);
                            pdfString.setHexWriting(true);
                            if (!(pdfObject instanceof PdfArray)) break block9;
                            this.addChar(pdfString, ((PdfArray)pdfObject).getPdfObject(n4 - n2));
                            break block10;
                        }
                        if (!(pdfObject instanceof PdfNumber)) break block11;
                        object = new PdfNumber(((PdfNumber)pdfObject).intValue() + n4 - n2);
                        break block12;
                    }
                    if (!bl2) break block10;
                    object = new PdfString(arrby);
                    object.setHexWriting(true);
                    int n5 = arrby.length - 1;
                    arrby[n5] = (byte)(arrby[n5] + 1);
                }
                this.addChar(pdfString, (PdfObject)object);
            }
            ++n4;
        } while (true);
    }

    public String decodeStringToUnicode(PdfString pdfString) {
        if (pdfString.isHexWriting()) {
            return PdfEncodings.convertToString(pdfString.getBytes(), "UnicodeBigUnmarked");
        }
        return pdfString.toUnicodeString();
    }

    public String getName() {
        return this.cmapName;
    }

    public String getOrdering() {
        return this.ordering;
    }

    public String getRegistry() {
        return this.registry;
    }

    public int getSupplement() {
        return this.supplement;
    }

    void setName(String string2) {
        this.cmapName = string2;
    }

    void setOrdering(String string2) {
        this.ordering = string2;
    }

    void setRegistry(String string2) {
        this.registry = string2;
    }

    void setSupplement(int n2) {
        this.supplement = n2;
    }
}

