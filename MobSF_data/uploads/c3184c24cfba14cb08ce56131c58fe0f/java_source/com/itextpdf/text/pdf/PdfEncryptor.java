/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  org.spongycastle.cms.Recipient
 *  org.spongycastle.cms.RecipientInformation
 *  org.spongycastle.cms.jcajce.JceKeyTransEnvelopedRecipient
 *  org.spongycastle.cms.jcajce.JceKeyTransRecipient
 */
package com.itextpdf.text.pdf;

import com.itextpdf.text.pdf.PdfReader;
import com.itextpdf.text.pdf.PdfStamper;
import com.itextpdf.text.pdf.interfaces.PdfViewerPreferences;
import java.io.OutputStream;
import java.security.PrivateKey;
import java.util.HashMap;
import java.util.Map;
import org.spongycastle.cms.Recipient;
import org.spongycastle.cms.RecipientInformation;
import org.spongycastle.cms.jcajce.JceKeyTransEnvelopedRecipient;
import org.spongycastle.cms.jcajce.JceKeyTransRecipient;

public final class PdfEncryptor {
    private PdfEncryptor() {
    }

    public static void encrypt(PdfReader pdfViewerPreferences, OutputStream outputStream, int n2, String string2, String string3, int n3) {
        pdfViewerPreferences = new PdfStamper((PdfReader)pdfViewerPreferences, outputStream);
        pdfViewerPreferences.setEncryption(n2, string2, string3, n3);
        pdfViewerPreferences.close();
    }

    public static void encrypt(PdfReader pdfViewerPreferences, OutputStream outputStream, int n2, String string2, String string3, int n3, HashMap<String, String> hashMap) {
        pdfViewerPreferences = new PdfStamper((PdfReader)pdfViewerPreferences, outputStream);
        pdfViewerPreferences.setEncryption(n2, string2, string3, n3);
        pdfViewerPreferences.setMoreInfo(hashMap);
        pdfViewerPreferences.close();
    }

    public static void encrypt(PdfReader pdfViewerPreferences, OutputStream outputStream, boolean bl2, String string2, String string3, int n2) {
        pdfViewerPreferences = new PdfStamper((PdfReader)pdfViewerPreferences, outputStream);
        pdfViewerPreferences.setEncryption(bl2, string2, string3, n2);
        pdfViewerPreferences.close();
    }

    public static void encrypt(PdfReader pdfViewerPreferences, OutputStream outputStream, boolean bl2, String string2, String string3, int n2, HashMap<String, String> hashMap) {
        pdfViewerPreferences = new PdfStamper((PdfReader)pdfViewerPreferences, outputStream);
        pdfViewerPreferences.setEncryption(bl2, string2, string3, n2);
        pdfViewerPreferences.setMoreInfo(hashMap);
        pdfViewerPreferences.close();
    }

    public static void encrypt(PdfReader pdfViewerPreferences, OutputStream outputStream, byte[] arrby, byte[] arrby2, int n2, boolean bl2) {
        pdfViewerPreferences = new PdfStamper((PdfReader)pdfViewerPreferences, outputStream);
        pdfViewerPreferences.setEncryption(arrby, arrby2, n2, bl2);
        pdfViewerPreferences.close();
    }

    public static void encrypt(PdfReader pdfViewerPreferences, OutputStream outputStream, byte[] arrby, byte[] arrby2, int n2, boolean bl2, HashMap<String, String> hashMap) {
        pdfViewerPreferences = new PdfStamper((PdfReader)pdfViewerPreferences, outputStream);
        pdfViewerPreferences.setEncryption(arrby, arrby2, n2, bl2);
        pdfViewerPreferences.setMoreInfo(hashMap);
        pdfViewerPreferences.close();
    }

    public static byte[] getContent(RecipientInformation recipientInformation, PrivateKey privateKey, String string2) {
        return recipientInformation.getContent((Recipient)new JceKeyTransEnvelopedRecipient(privateKey).setProvider(string2));
    }

    public static String getPermissionsVerbose(int n2) {
        StringBuffer stringBuffer = new StringBuffer("Allowed:");
        if ((n2 & 2052) == 2052) {
            stringBuffer.append(" Printing");
        }
        if ((n2 & 8) == 8) {
            stringBuffer.append(" Modify contents");
        }
        if ((n2 & 16) == 16) {
            stringBuffer.append(" Copy");
        }
        if ((n2 & 32) == 32) {
            stringBuffer.append(" Modify annotations");
        }
        if ((n2 & 256) == 256) {
            stringBuffer.append(" Fill in");
        }
        if ((n2 & 512) == 512) {
            stringBuffer.append(" Screen readers");
        }
        if ((n2 & 1024) == 1024) {
            stringBuffer.append(" Assembly");
        }
        if ((n2 & 4) == 4) {
            stringBuffer.append(" Degraded printing");
        }
        return stringBuffer.toString();
    }

    public static boolean isAssemblyAllowed(int n2) {
        if ((n2 & 1024) == 1024) {
            return true;
        }
        return false;
    }

    public static boolean isCopyAllowed(int n2) {
        if ((n2 & 16) == 16) {
            return true;
        }
        return false;
    }

    public static boolean isDegradedPrintingAllowed(int n2) {
        if ((n2 & 4) == 4) {
            return true;
        }
        return false;
    }

    public static boolean isFillInAllowed(int n2) {
        if ((n2 & 256) == 256) {
            return true;
        }
        return false;
    }

    public static boolean isModifyAnnotationsAllowed(int n2) {
        if ((n2 & 32) == 32) {
            return true;
        }
        return false;
    }

    public static boolean isModifyContentsAllowed(int n2) {
        if ((n2 & 8) == 8) {
            return true;
        }
        return false;
    }

    public static boolean isPrintingAllowed(int n2) {
        if ((n2 & 2052) == 2052) {
            return true;
        }
        return false;
    }

    public static boolean isScreenReadersAllowed(int n2) {
        if ((n2 & 512) == 512) {
            return true;
        }
        return false;
    }
}

