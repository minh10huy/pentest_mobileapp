/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf.parser;

import com.itextpdf.text.pdf.PdfDictionary;
import com.itextpdf.text.pdf.PdfName;
import com.itextpdf.text.pdf.PdfNumber;
import com.itextpdf.text.pdf.PdfObject;
import com.itextpdf.text.pdf.PdfReader;
import com.itextpdf.text.pdf.PdfStream;
import com.itextpdf.text.pdf.RandomAccessFileOrArray;
import com.itextpdf.text.pdf.parser.ContentByteUtils;
import com.itextpdf.text.pdf.parser.LocationTextExtractionStrategy;
import com.itextpdf.text.pdf.parser.PdfTextExtractor;
import java.io.ByteArrayInputStream;
import java.io.Closeable;
import java.io.File;
import java.io.FileOutputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.Set;

public class PdfContentReaderTool {
    public static String getDictionaryDetail(PdfDictionary pdfDictionary) {
        return PdfContentReaderTool.getDictionaryDetail(pdfDictionary, 0);
    }

    public static String getDictionaryDetail(PdfDictionary pdfDictionary, int n2) {
        StringBuffer stringBuffer = new StringBuffer();
        stringBuffer.append('(');
        Object object = new ArrayList();
        for (PdfName pdfName : pdfDictionary.getKeys()) {
            PdfObject pdfObject = pdfDictionary.getDirectObject(pdfName);
            if (pdfObject.isDictionary()) {
                object.add(pdfName);
            }
            stringBuffer.append(pdfName);
            stringBuffer.append('=');
            stringBuffer.append(pdfObject);
            stringBuffer.append(", ");
        }
        if (stringBuffer.length() >= 2) {
            stringBuffer.setLength(stringBuffer.length() - 2);
        }
        stringBuffer.append(')');
        object = object.iterator();
        while (object.hasNext()) {
            int n3;
            PdfName pdfName = (PdfName)object.next();
            stringBuffer.append('\n');
            for (int i2 = 0; i2 < (n3 = n2 + 1); ++i2) {
                stringBuffer.append('\t');
            }
            stringBuffer.append("Subdictionary ");
            stringBuffer.append(pdfName);
            stringBuffer.append(" = ");
            stringBuffer.append(PdfContentReaderTool.getDictionaryDetail(pdfDictionary.getAsDict(pdfName), n3));
        }
        return stringBuffer.toString();
    }

    public static String getXObjectDetail(PdfDictionary pdfDictionary) {
        StringBuilder stringBuilder = new StringBuilder();
        if ((pdfDictionary = pdfDictionary.getAsDict(PdfName.XOBJECT)) == null) {
            return "No XObjects";
        }
        for (PdfName pdfName : pdfDictionary.getKeys()) {
            int n2;
            PdfStream pdfStream = pdfDictionary.getAsStream(pdfName);
            Object object = new StringBuilder();
            object.append("------ ");
            object.append(pdfName);
            object.append(" - subtype = ");
            object.append(pdfStream.get(PdfName.SUBTYPE));
            object.append(" = ");
            object.append(pdfStream.getAsNumber(PdfName.LENGTH));
            object.append(" bytes ------\n");
            stringBuilder.append(object.toString());
            if (pdfStream.get(PdfName.SUBTYPE).equals(PdfName.IMAGE)) continue;
            object = new ByteArrayInputStream(ContentByteUtils.getContentBytesFromContentObject(pdfStream));
            while ((n2 = object.read()) != -1) {
                stringBuilder.append((char)n2);
            }
            object = new StringBuilder();
            object.append("------ ");
            object.append(pdfName);
            object.append(" - subtype = ");
            object.append(pdfStream.get(PdfName.SUBTYPE));
            object.append("End of Content");
            object.append("------\n");
            stringBuilder.append(object.toString());
        }
        return stringBuilder.toString();
    }

    public static void listContentStream(File file, int n2, PrintWriter printWriter) {
        PdfContentReaderTool.listContentStreamForPage(new PdfReader(file.getCanonicalPath()), n2, printWriter);
    }

    public static void listContentStream(File object, PrintWriter printWriter) {
        object = new PdfReader(object.getCanonicalPath());
        int n2 = object.getNumberOfPages();
        for (int i2 = 1; i2 <= n2; ++i2) {
            PdfContentReaderTool.listContentStreamForPage((PdfReader)object, i2, printWriter);
        }
    }

    /*
     * Enabled aggressive block sorting
     */
    public static void listContentStreamForPage(PdfReader object, int n2, PrintWriter printWriter) {
        int n3;
        Object object2 = new StringBuilder();
        object2.append("==============Page ");
        object2.append(n2);
        object2.append("====================");
        printWriter.println(object2.toString());
        printWriter.println("- - - - - Dictionary - - - - - -");
        object2 = object.getPageN(n2);
        printWriter.println(PdfContentReaderTool.getDictionaryDetail((PdfDictionary)object2));
        printWriter.println("- - - - - XObject Summary - - - - - -");
        printWriter.println(PdfContentReaderTool.getXObjectDetail(object2.getAsDict(PdfName.RESOURCES)));
        printWriter.println("- - - - - Content Stream - - - - - -");
        object2 = object.getSafeFile();
        byte[] arrby = object.getPageContent(n2, (RandomAccessFileOrArray)object2);
        object2.close();
        printWriter.flush();
        object2 = new ByteArrayInputStream(arrby);
        while ((n3 = object2.read()) != -1) {
            printWriter.print((char)n3);
        }
        printWriter.flush();
        printWriter.println("- - - - - Text Extraction - - - - - -");
        object = PdfTextExtractor.getTextFromPage((PdfReader)object, n2, new LocationTextExtractionStrategy());
        if (object.length() == 0) {
            object = new StringBuilder();
            object.append("No text found on page ");
            object.append(n2);
            object = object.toString();
        }
        printWriter.println((String)object);
        printWriter.println();
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public static void main(String[] arrstring) {
        try {
            if (arrstring.length >= 1 && arrstring.length <= 3) {
                Appendable appendable = new PrintWriter(System.out);
                Closeable closeable = appendable;
                if (arrstring.length >= 2) {
                    closeable = appendable;
                    if (arrstring[1].compareToIgnoreCase("stdout") != 0) {
                        closeable = System.out;
                        appendable = new StringBuilder();
                        appendable.append("Writing PDF content to ");
                        appendable.append(arrstring[1]);
                        closeable.println(appendable.toString());
                        closeable = new PrintWriter(new FileOutputStream(new File(arrstring[1])));
                    }
                }
                int n2 = arrstring.length >= 3 ? Integer.parseInt(arrstring[2]) : -1;
                if (n2 == -1) {
                    PdfContentReaderTool.listContentStream(new File(arrstring[0]), (PrintWriter)closeable);
                } else {
                    PdfContentReaderTool.listContentStream(new File(arrstring[0]), n2, (PrintWriter)closeable);
                }
                closeable.flush();
                if (arrstring.length < 2) return;
                {
                    closeable.close();
                    closeable = System.out;
                    appendable = new StringBuilder();
                    appendable.append("Finished writing content to ");
                    appendable.append(arrstring[1]);
                    closeable.println(appendable.toString());
                    return;
                }
            }
            System.out.println("Usage:  PdfContentReaderTool <pdf file> [<output file>|stdout] [<page num>]");
            return;
        }
        catch (Exception exception) {
            exception.printStackTrace(System.err);
        }
    }
}

