/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf.codec;

import com.itextpdf.text.pdf.ByteBuffer;

public class CCITTG4Encoder {
    private static final int CODE = 1;
    private static final int EOL = 1;
    private static final int G3CODE_EOF = -3;
    private static final int G3CODE_EOL = -1;
    private static final int G3CODE_INCOMP = -4;
    private static final int G3CODE_INVALID = -2;
    private static final int LENGTH = 0;
    private static final int RUNLEN = 2;
    private static byte[] oneruns;
    private static byte[] zeroruns;
    private int[][] TIFFFaxBlackCodes;
    private int[][] TIFFFaxWhiteCodes;
    private int bit = 8;
    private int data;
    private byte[] dataBp;
    private int[] horizcode;
    private int[] msbmask;
    private int offsetData;
    private ByteBuffer outBuf = new ByteBuffer(1024);
    private int[] passcode;
    private byte[] refline;
    private int rowbytes;
    private int rowpixels;
    private int sizeData;
    private int[][] vcodes;

    static {
        zeroruns = new byte[]{8, 7, 6, 6, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
        oneruns = new byte[]{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 7, 8};
    }

    public CCITTG4Encoder(int n2) {
        int[] arrn = new int[]{8, 53, 0};
        int[] arrn2 = new int[]{6, 7, 1};
        int[] arrn3 = new int[]{4, 11, 4};
        int[] arrn4 = new int[]{4, 14, 6};
        int[] arrn5 = new int[]{5, 20, 9};
        int[] arrn6 = new int[]{5, 7, 10};
        int[] arrn7 = new int[]{6, 52, 14};
        int[] arrn8 = new int[]{7, 39, 18};
        int[] arrn9 = new int[]{7, 8, 20};
        int[] arrn10 = new int[]{7, 23, 21};
        int[] arrn11 = new int[]{7, 4, 23};
        int[] arrn12 = new int[]{7, 40, 24};
        int[] arrn13 = new int[]{7, 43, 25};
        int[] arrn14 = new int[]{7, 19, 26};
        int[] arrn15 = new int[]{7, 36, 27};
        int[] arrn16 = new int[]{8, 26, 31};
        int[] arrn17 = new int[]{8, 40, 39};
        int[] arrn18 = new int[]{8, 41, 40};
        int[] arrn19 = new int[]{8, 44, 43};
        int[] arrn20 = new int[]{8, 45, 44};
        int[] arrn21 = new int[]{8, 5, 46};
        int[] arrn22 = new int[]{8, 11, 48};
        int[] arrn23 = new int[]{8, 82, 49};
        int[] arrn24 = new int[]{8, 83, 50};
        int[] arrn25 = new int[]{8, 88, 55};
        int[] arrn26 = new int[]{8, 75, 60};
        int[] arrn27 = new int[]{8, 50, 61};
        int[] arrn28 = new int[]{8, 52, 63};
        int[] arrn29 = new int[]{5, 27, 64};
        int[] arrn30 = new int[]{5, 18, 128};
        int[] arrn31 = new int[]{7, 55, 256};
        int[] arrn32 = new int[]{8, 54, 320};
        int[] arrn33 = new int[]{8, 55, 384};
        int[] arrn34 = new int[]{8, 100, 448};
        int[] arrn35 = new int[]{9, 204, 704};
        int[] arrn36 = new int[]{9, 210, 832};
        int[] arrn37 = new int[]{9, 211, 896};
        int[] arrn38 = new int[]{9, 214, 1088};
        int[] arrn39 = new int[]{9, 219, 1408};
        int[] arrn40 = new int[]{9, 153, 1536};
        int[] arrn41 = new int[]{9, 154, 1600};
        int[] arrn42 = new int[]{6, 24, 1664};
        int[] arrn43 = new int[]{11, 8, 1792};
        int[] arrn44 = new int[]{12, 19, 2048};
        int[] arrn45 = new int[]{12, 28, 2368};
        int[] arrn46 = new int[]{12, 30, 2496};
        int[] arrn47 = new int[]{12, 31, 2560};
        int[] arrn48 = new int[]{10, 1, -2};
        int[] arrn49 = new int[]{11, 1, -2};
        this.TIFFFaxWhiteCodes = new int[][]{arrn, arrn2, {4, 7, 2}, {4, 8, 3}, arrn3, {4, 12, 5}, arrn4, {4, 15, 7}, {5, 19, 8}, arrn5, arrn6, {5, 8, 11}, {6, 8, 12}, {6, 3, 13}, arrn7, {6, 53, 15}, {6, 42, 16}, {6, 43, 17}, arrn8, {7, 12, 19}, arrn9, arrn10, {7, 3, 22}, arrn11, arrn12, arrn13, arrn14, arrn15, {7, 24, 28}, {8, 2, 29}, {8, 3, 30}, arrn16, {8, 27, 32}, {8, 18, 33}, {8, 19, 34}, {8, 20, 35}, {8, 21, 36}, {8, 22, 37}, {8, 23, 38}, arrn17, arrn18, {8, 42, 41}, {8, 43, 42}, arrn19, arrn20, {8, 4, 45}, arrn21, {8, 10, 47}, arrn22, arrn23, arrn24, {8, 84, 51}, {8, 85, 52}, {8, 36, 53}, {8, 37, 54}, arrn25, {8, 89, 56}, {8, 90, 57}, {8, 91, 58}, {8, 74, 59}, arrn26, arrn27, {8, 51, 62}, arrn28, arrn29, arrn30, {6, 23, 192}, arrn31, arrn32, arrn33, arrn34, {8, 101, 512}, {8, 104, 576}, {8, 103, 640}, arrn35, {9, 205, 768}, arrn36, arrn37, {9, 212, 960}, {9, 213, 1024}, arrn38, {9, 215, 1152}, {9, 216, 1216}, {9, 217, 1280}, {9, 218, 1344}, arrn39, {9, 152, 1472}, arrn40, arrn41, arrn42, {9, 155, 1728}, arrn43, {11, 12, 1856}, {11, 13, 1920}, {12, 18, 1984}, arrn44, {12, 20, 2112}, {12, 21, 2176}, {12, 22, 2240}, {12, 23, 2304}, arrn45, {12, 29, 2432}, arrn46, arrn47, {12, 1, -1}, {9, 1, -2}, arrn48, arrn49, {12, 0, -2}};
        arrn = new int[]{10, 55, 0};
        arrn2 = new int[]{3, 2, 1};
        arrn3 = new int[]{2, 3, 2};
        arrn4 = new int[]{2, 2, 3};
        arrn5 = new int[]{4, 3, 5};
        arrn6 = new int[]{4, 2, 6};
        arrn7 = new int[]{5, 3, 7};
        arrn8 = new int[]{6, 5, 8};
        arrn9 = new int[]{6, 4, 9};
        arrn10 = new int[]{7, 4, 10};
        arrn11 = new int[]{7, 5, 11};
        arrn12 = new int[]{8, 4, 13};
        arrn13 = new int[]{9, 24, 15};
        arrn14 = new int[]{10, 24, 17};
        arrn15 = new int[]{10, 8, 18};
        arrn16 = new int[]{11, 104, 20};
        arrn17 = new int[]{11, 108, 21};
        arrn18 = new int[]{11, 55, 22};
        arrn19 = new int[]{11, 40, 23};
        arrn20 = new int[]{11, 23, 24};
        arrn21 = new int[]{12, 202, 26};
        arrn22 = new int[]{12, 105, 31};
        arrn23 = new int[]{12, 106, 32};
        arrn24 = new int[]{12, 107, 33};
        arrn25 = new int[]{12, 212, 36};
        arrn26 = new int[]{12, 214, 38};
        arrn27 = new int[]{12, 215, 39};
        arrn28 = new int[]{12, 108, 40};
        arrn29 = new int[]{12, 109, 41};
        arrn30 = new int[]{12, 218, 42};
        arrn31 = new int[]{12, 219, 43};
        arrn32 = new int[]{12, 85, 45};
        arrn33 = new int[]{12, 86, 46};
        arrn34 = new int[]{12, 101, 49};
        arrn35 = new int[]{12, 83, 51};
        arrn36 = new int[]{12, 55, 53};
        arrn37 = new int[]{12, 56, 54};
        arrn38 = new int[]{12, 39, 55};
        arrn39 = new int[]{12, 40, 56};
        arrn40 = new int[]{12, 89, 58};
        arrn41 = new int[]{12, 102, 62};
        arrn42 = new int[]{10, 15, 64};
        arrn43 = new int[]{12, 91, 256};
        arrn44 = new int[]{12, 51, 320};
        arrn45 = new int[]{12, 52, 384};
        arrn46 = new int[]{12, 53, 448};
        arrn47 = new int[]{13, 108, 512};
        arrn48 = new int[]{13, 74, 640};
        arrn49 = new int[]{13, 75, 704};
        int[] arrn50 = new int[]{13, 76, 768};
        int[] arrn51 = new int[]{13, 77, 832};
        int[] arrn52 = new int[]{13, 114, 896};
        int[] arrn53 = new int[]{13, 116, 1024};
        int[] arrn54 = new int[]{13, 118, 1152};
        int[] arrn55 = new int[]{13, 119, 1216};
        int[] arrn56 = new int[]{13, 82, 1280};
        int[] arrn57 = new int[]{13, 83, 1344};
        int[] arrn58 = new int[]{13, 91, 1600};
        int[] arrn59 = new int[]{13, 101, 1728};
        int[] arrn60 = new int[]{11, 13, 1920};
        int[] arrn61 = new int[]{12, 19, 2048};
        int[] arrn62 = new int[]{12, 20, 2112};
        int[] arrn63 = new int[]{12, 21, 2176};
        int[] arrn64 = new int[]{12, 22, 2240};
        int[] arrn65 = new int[]{12, 28, 2368};
        int[] arrn66 = new int[]{9, 1, -2};
        int[] arrn67 = new int[]{10, 1, -2};
        int[] arrn68 = new int[]{11, 1, -2};
        this.TIFFFaxBlackCodes = new int[][]{arrn, arrn2, arrn3, arrn4, {3, 3, 4}, arrn5, arrn6, arrn7, arrn8, arrn9, arrn10, arrn11, {7, 7, 12}, arrn12, {8, 7, 14}, arrn13, {10, 23, 16}, arrn14, arrn15, {11, 103, 19}, arrn16, arrn17, arrn18, arrn19, arrn20, {11, 24, 25}, arrn21, {12, 203, 27}, {12, 204, 28}, {12, 205, 29}, {12, 104, 30}, arrn22, arrn23, arrn24, {12, 210, 34}, {12, 211, 35}, arrn25, {12, 213, 37}, arrn26, arrn27, arrn28, arrn29, arrn30, arrn31, {12, 84, 44}, arrn32, arrn33, {12, 87, 47}, {12, 100, 48}, arrn34, {12, 82, 50}, arrn35, {12, 36, 52}, arrn36, arrn37, arrn38, arrn39, {12, 88, 57}, arrn40, {12, 43, 59}, {12, 44, 60}, {12, 90, 61}, arrn41, {12, 103, 63}, arrn42, {12, 200, 128}, {12, 201, 192}, arrn43, arrn44, arrn45, arrn46, arrn47, {13, 109, 576}, arrn48, arrn49, arrn50, arrn51, arrn52, {13, 115, 960}, arrn53, {13, 117, 1088}, arrn54, arrn55, arrn56, arrn57, {13, 84, 1408}, {13, 85, 1472}, {13, 90, 1536}, arrn58, {13, 100, 1664}, arrn59, {11, 8, 1792}, {11, 12, 1856}, arrn60, {12, 18, 1984}, arrn61, arrn62, arrn63, arrn64, {12, 23, 2304}, arrn65, {12, 29, 2432}, {12, 30, 2496}, {12, 31, 2560}, {12, 1, -1}, arrn66, arrn67, arrn68, {12, 0, -2}};
        this.horizcode = new int[]{3, 1, 0};
        this.passcode = new int[]{4, 1, 0};
        arrn = new int[]{3, 3, 0};
        arrn2 = new int[]{1, 1, 0};
        this.vcodes = new int[][]{{7, 3, 0}, {6, 3, 0}, arrn, arrn2, {3, 2, 0}, {6, 2, 0}, {7, 2, 0}};
        this.msbmask = new int[]{0, 1, 3, 7, 15, 31, 63, 127, 255};
        this.rowpixels = n2;
        this.rowbytes = (this.rowpixels + 7) / 8;
        this.refline = new byte[this.rowbytes];
    }

    private void Fax3Encode2DRow() {
        int n2 = this.pixel(this.dataBp, this.offsetData, 0) != 0 ? 0 : CCITTG4Encoder.finddiff(this.dataBp, this.offsetData, 0, this.rowpixels, 0);
        int n3 = this.pixel(this.refline, 0, 0) != 0 ? 0 : CCITTG4Encoder.finddiff(this.refline, 0, 0, this.rowpixels, 0);
        int n4 = 0;
        int n5 = n3;
        do {
            if ((n3 = CCITTG4Encoder.finddiff2(this.refline, 0, n5, this.rowpixels, this.pixel(this.refline, 0, n5))) >= n2) {
                n3 = n5 - n2;
                if (-3 <= n3 && n3 <= 3) {
                    this.putcode(this.vcodes[n3 + 3]);
                } else {
                    int[][] arrn;
                    n3 = CCITTG4Encoder.finddiff2(this.dataBp, this.offsetData, n2, this.rowpixels, this.pixel(this.dataBp, this.offsetData, n2));
                    this.putcode(this.horizcode);
                    if (n4 + n2 != 0 && this.pixel(this.dataBp, this.offsetData, n4) != 0) {
                        this.putspan(n2 - n4, this.TIFFFaxBlackCodes);
                        n2 = n3 - n2;
                        arrn = this.TIFFFaxWhiteCodes;
                    } else {
                        this.putspan(n2 - n4, this.TIFFFaxWhiteCodes);
                        n2 = n3 - n2;
                        arrn = this.TIFFFaxBlackCodes;
                    }
                    this.putspan(n2, arrn);
                    n2 = n3;
                }
                n3 = n2;
            } else {
                this.putcode(this.passcode);
            }
            if (n3 >= this.rowpixels) {
                return;
            }
            n2 = CCITTG4Encoder.finddiff(this.dataBp, this.offsetData, n3, this.rowpixels, this.pixel(this.dataBp, this.offsetData, n3));
            n4 = CCITTG4Encoder.finddiff(this.refline, 0, n3, this.rowpixels, this.pixel(this.dataBp, this.offsetData, n3) ^ 1);
            n5 = CCITTG4Encoder.finddiff(this.refline, 0, n4, this.rowpixels, this.pixel(this.dataBp, this.offsetData, n3));
            n4 = n3;
        } while (true);
    }

    private void Fax4PostEncode() {
        this.putBits(1, 12);
        this.putBits(1, 12);
        if (this.bit != 8) {
            this.outBuf.append((byte)this.data);
            this.data = 0;
            this.bit = 8;
        }
    }

    public static byte[] compress(byte[] arrby, int n2, int n3) {
        CCITTG4Encoder cCITTG4Encoder = new CCITTG4Encoder(n2);
        cCITTG4Encoder.fax4Encode(arrby, 0, cCITTG4Encoder.rowbytes * n3);
        return cCITTG4Encoder.close();
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Lifted jumps to return sites
     */
    private static int find0span(byte[] var0, int var1_1, int var2_2, int var3_3) {
        block5 : {
            var4_4 = var3_3 - var2_2;
            var3_3 = var1_1 + (var2_2 >> 3);
            if (var4_4 <= 0 || (var6_5 = var2_2 & 7) == 0) break block5;
            var2_2 = CCITTG4Encoder.zeroruns[var0[var3_3] << var6_5 & 255];
            var5_6 = 8 - var6_5;
            var1_1 = var2_2;
            if (var2_2 > var5_6) {
                var1_1 = var5_6;
            }
            var2_2 = var1_1;
            if (var1_1 > var4_4) {
                var2_2 = var4_4;
            }
            if (var6_5 + var2_2 < 8) {
                return var2_2;
            }
            var1_1 = var2_2;
            var2_2 = var4_4 -= var2_2;
            ** GOTO lbl25
        }
        var1_1 = 0;
        var2_2 = var4_4;
        while (var2_2 >= 8) {
            if (var0[var3_3] != 0) {
                return var1_1 + CCITTG4Encoder.zeroruns[var0[var3_3] & 255];
            }
            var1_1 += 8;
            var2_2 -= 8;
lbl25: // 2 sources:
            ++var3_3;
        }
        var4_4 = var1_1;
        if (var2_2 <= 0) return var4_4;
        var3_3 = var4_4 = CCITTG4Encoder.zeroruns[var0[var3_3] & 255];
        if (var4_4 <= var2_2) return var1_1 + var3_3;
        var3_3 = var2_2;
        return var1_1 + var3_3;
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Lifted jumps to return sites
     */
    private static int find1span(byte[] var0, int var1_1, int var2_2, int var3_3) {
        block5 : {
            var4_4 = var3_3 - var2_2;
            var3_3 = var1_1 + (var2_2 >> 3);
            if (var4_4 <= 0 || (var6_5 = var2_2 & 7) == 0) break block5;
            var2_2 = CCITTG4Encoder.oneruns[var0[var3_3] << var6_5 & 255];
            var5_6 = 8 - var6_5;
            var1_1 = var2_2;
            if (var2_2 > var5_6) {
                var1_1 = var5_6;
            }
            var2_2 = var1_1;
            if (var1_1 > var4_4) {
                var2_2 = var4_4;
            }
            if (var6_5 + var2_2 < 8) {
                return var2_2;
            }
            var1_1 = var2_2;
            var2_2 = var4_4 -= var2_2;
            ** GOTO lbl25
        }
        var1_1 = 0;
        var2_2 = var4_4;
        while (var2_2 >= 8) {
            if (var0[var3_3] != -1) {
                return var1_1 + CCITTG4Encoder.oneruns[var0[var3_3] & 255];
            }
            var1_1 += 8;
            var2_2 -= 8;
lbl25: // 2 sources:
            ++var3_3;
        }
        var4_4 = var1_1;
        if (var2_2 <= 0) return var4_4;
        var3_3 = var4_4 = CCITTG4Encoder.oneruns[var0[var3_3] & 255];
        if (var4_4 <= var2_2) return var1_1 + var3_3;
        var3_3 = var2_2;
        return var1_1 + var3_3;
    }

    private static int finddiff(byte[] arrby, int n2, int n3, int n4, int n5) {
        n2 = n5 != 0 ? CCITTG4Encoder.find1span(arrby, n2, n3, n4) : CCITTG4Encoder.find0span(arrby, n2, n3, n4);
        return n3 + n2;
    }

    private static int finddiff2(byte[] arrby, int n2, int n3, int n4, int n5) {
        int n6 = n4;
        if (n3 < n4) {
            n6 = CCITTG4Encoder.finddiff(arrby, n2, n3, n4, n5);
        }
        return n6;
    }

    private int pixel(byte[] arrby, int n2, int n3) {
        if (n3 >= this.rowpixels) {
            return 0;
        }
        return (arrby[n2 + (n3 >> 3)] & 255) >> 7 - (n3 & 7) & 1;
    }

    private void putBits(int n2, int n3) {
        while (n3 > this.bit) {
            this.data |= n2 >> n3 - this.bit;
            n3 -= this.bit;
            this.outBuf.append((byte)this.data);
            this.data = 0;
            this.bit = 8;
        }
        int n4 = this.data;
        this.data = (n2 & this.msbmask[n3]) << this.bit - n3 | n4;
        this.bit -= n3;
        if (this.bit == 0) {
            this.outBuf.append((byte)this.data);
            this.data = 0;
            this.bit = 8;
        }
    }

    private void putcode(int[] arrn) {
        this.putBits(arrn[1], arrn[0]);
    }

    private void putspan(int n2, int[][] arrn) {
        int[] arrn2;
        while (n2 >= 2624) {
            arrn2 = arrn[103];
            this.putBits(arrn2[1], arrn2[0]);
            n2 -= arrn2[2];
        }
        int n3 = n2;
        if (n2 >= 64) {
            arrn2 = arrn[(n2 >> 6) + 63];
            this.putBits(arrn2[1], arrn2[0]);
            n3 = n2 - arrn2[2];
        }
        this.putBits(arrn[n3][1], arrn[n3][0]);
    }

    public byte[] close() {
        this.Fax4PostEncode();
        return this.outBuf.toByteArray();
    }

    public void fax4Encode(byte[] arrby, int n2) {
        this.fax4Encode(arrby, 0, this.rowbytes * n2);
    }

    public void fax4Encode(byte[] arrby, int n2, int n3) {
        this.dataBp = arrby;
        this.offsetData = n2;
        this.sizeData = n3;
        while (this.sizeData > 0) {
            this.Fax3Encode2DRow();
            System.arraycopy(this.dataBp, this.offsetData, this.refline, 0, this.rowbytes);
            this.offsetData += this.rowbytes;
            this.sizeData -= this.rowbytes;
        }
    }
}

