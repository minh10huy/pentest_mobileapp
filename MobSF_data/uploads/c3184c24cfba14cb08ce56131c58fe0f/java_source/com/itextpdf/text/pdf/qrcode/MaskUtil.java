/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf.qrcode;

import com.itextpdf.text.pdf.qrcode.ByteMatrix;
import com.itextpdf.text.pdf.qrcode.QRCode;

public final class MaskUtil {
    private MaskUtil() {
    }

    public static int applyMaskPenaltyRule1(ByteMatrix byteMatrix) {
        return MaskUtil.applyMaskPenaltyRule1Internal(byteMatrix, true) + MaskUtil.applyMaskPenaltyRule1Internal(byteMatrix, false);
    }

    private static int applyMaskPenaltyRule1Internal(ByteMatrix arrby, boolean bl2) {
        int n2 = bl2 ? arrby.getHeight() : arrby.getWidth();
        int n3 = bl2 ? arrby.getWidth() : arrby.getHeight();
        arrby = arrby.getArray();
        int n4 = 0;
        int n5 = -1;
        for (int i2 = 0; i2 < n2; ++i2) {
            int n6 = 0;
            int n7 = n4;
            n4 = n5;
            n5 = n7;
            for (int i3 = 0; i3 < n3; ++i3) {
                int n8;
                n7 = bl2 ? arrby[i2][i3] : arrby[i3][i2];
                if (n7 == n4) {
                    int n9 = n6 + 1;
                    if (n9 == 5) {
                        n6 = n5 + 3;
                        n8 = n4;
                        n7 = n9;
                    } else {
                        n6 = n5;
                        n8 = n4;
                        n7 = n9;
                        if (n9 > 5) {
                            n6 = n5 + 1;
                            n8 = n4;
                            n7 = n9;
                        }
                    }
                } else {
                    n8 = n7;
                    n7 = 1;
                    n6 = n5;
                }
                n5 = n6;
                n4 = n8;
                n6 = n7;
            }
            n7 = n4;
            n4 = n5;
            n5 = n7;
        }
        return n4;
    }

    public static int applyMaskPenaltyRule2(ByteMatrix arrby) {
        byte[][] arrby2 = arrby.getArray();
        int n2 = arrby.getWidth();
        int n3 = arrby.getHeight();
        int n4 = 0;
        for (int i2 = 0; i2 < n3 - 1; ++i2) {
            int n5 = 0;
            while (n5 < n2 - 1) {
                byte by2 = arrby2[i2][n5];
                arrby = arrby2[i2];
                int n6 = n5 + 1;
                int n7 = n4;
                if (by2 == arrby[n6]) {
                    int n8 = i2 + 1;
                    n7 = n4;
                    if (by2 == arrby2[n8][n5]) {
                        n7 = n4;
                        if (by2 == arrby2[n8][n6]) {
                            n7 = n4 + 3;
                        }
                    }
                }
                n5 = n6;
                n4 = n7;
            }
        }
        return n4;
    }

    public static int applyMaskPenaltyRule3(ByteMatrix byteMatrix) {
        byte[][] arrby = byteMatrix.getArray();
        int n2 = byteMatrix.getWidth();
        int n3 = byteMatrix.getHeight();
        int n4 = 0;
        for (int i2 = 0; i2 < n3; ++i2) {
            for (int i3 = 0; i3 < n2; ++i3) {
                int n5;
                int n6;
                block6 : {
                    block7 : {
                        n6 = i3 + 6;
                        n5 = n4;
                        if (n6 >= n2) break block6;
                        n5 = n4;
                        if (arrby[i2][i3] != 1) break block6;
                        n5 = n4;
                        if (arrby[i2][i3 + 1] != 0) break block6;
                        n5 = n4;
                        if (arrby[i2][i3 + 2] != 1) break block6;
                        n5 = n4;
                        if (arrby[i2][i3 + 3] != 1) break block6;
                        n5 = n4;
                        if (arrby[i2][i3 + 4] != 1) break block6;
                        n5 = n4;
                        if (arrby[i2][i3 + 5] != 0) break block6;
                        n5 = n4;
                        if (arrby[i2][n6] != 1) break block6;
                        n5 = i3 + 10;
                        if (n5 < n2 && arrby[i2][i3 + 7] == 0 && arrby[i2][i3 + 8] == 0 && arrby[i2][i3 + 9] == 0 && arrby[i2][n5] == 0) break block7;
                        n6 = i3 - 4;
                        n5 = n4;
                        if (n6 < 0) break block6;
                        n5 = n4;
                        if (arrby[i2][i3 - 1] != 0) break block6;
                        n5 = n4;
                        if (arrby[i2][i3 - 2] != 0) break block6;
                        n5 = n4;
                        if (arrby[i2][i3 - 3] != 0) break block6;
                        n5 = n4;
                        if (arrby[i2][n6] != 0) break block6;
                    }
                    n5 = n4 + 40;
                }
                n6 = i2 + 6;
                n4 = n5;
                if (n6 >= n3) continue;
                n4 = n5;
                if (arrby[i2][i3] != 1) continue;
                n4 = n5;
                if (arrby[i2 + 1][i3] != 0) continue;
                n4 = n5;
                if (arrby[i2 + 2][i3] != 1) continue;
                n4 = n5;
                if (arrby[i2 + 3][i3] != 1) continue;
                n4 = n5;
                if (arrby[i2 + 4][i3] != 1) continue;
                n4 = n5;
                if (arrby[i2 + 5][i3] != 0) continue;
                n4 = n5;
                if (arrby[n6][i3] != 1) continue;
                n4 = i2 + 10;
                if (n4 >= n3 || arrby[i2 + 7][i3] != 0 || arrby[i2 + 8][i3] != 0 || arrby[i2 + 9][i3] != 0 || arrby[n4][i3] != 0) {
                    n6 = i2 - 4;
                    n4 = n5;
                    if (n6 < 0) continue;
                    n4 = n5;
                    if (arrby[i2 - 1][i3] != 0) continue;
                    n4 = n5;
                    if (arrby[i2 - 2][i3] != 0) continue;
                    n4 = n5;
                    if (arrby[i2 - 3][i3] != 0) continue;
                    n4 = n5;
                    if (arrby[n6][i3] != 0) continue;
                }
                n4 = n5 + 40;
            }
        }
        return n4;
    }

    public static int applyMaskPenaltyRule4(ByteMatrix byteMatrix) {
        int n2;
        int n3;
        byte[][] arrby = byteMatrix.getArray();
        int n4 = byteMatrix.getWidth();
        int n5 = byteMatrix.getHeight();
        int n6 = 0;
        for (n2 = 0; n2 < n5; ++n2) {
            for (n3 = 0; n3 < n4; ++n3) {
                int n7 = n6;
                if (arrby[n2][n3] == 1) {
                    n7 = n6 + 1;
                }
                n6 = n7;
            }
        }
        n2 = byteMatrix.getHeight();
        n3 = byteMatrix.getWidth();
        return Math.abs((int)((double)n6 / (double)(n2 * n3) * 100.0 - 50.0)) / 5 * 10;
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Lifted jumps to return sites
     */
    public static boolean getDataMaskBit(int var0, int var1_1, int var2_2) {
        block10 : {
            if (QRCode.isValidMaskPattern(var0) == false) throw new IllegalArgumentException("Invalid mask pattern");
            var3_3 = var2_2;
            switch (var0) {
                default: {
                    var4_4 = new StringBuilder();
                    var4_4.append("Invalid mask pattern: ");
                    var4_4.append(var0);
                    throw new IllegalArgumentException(var4_4.toString());
                }
                case 7: {
                    var0 = var2_2 * var1_1 % 3;
                    var1_1 = var2_2 + var1_1 & 1;
                    ** GOTO lbl24
                }
                case 6: {
                    var0 = var2_2 * var1_1;
                    var0 = (var0 & 1) + var0 % 3;
                    ** GOTO lbl25
                }
                case 5: {
                    var0 = var2_2 * var1_1;
                    var0 = (var0 & 1) + var0 % 3;
                    break block10;
                }
                case 4: {
                    var0 = var2_2 >>> 1;
                    var1_1 /= 3;
lbl24: // 2 sources:
                    var0 += var1_1;
lbl25: // 2 sources:
                    var0 &= 1;
                    break block10;
                }
                case 3: {
                    var0 = (var2_2 + var1_1) % 3;
                    break block10;
                }
                case 2: {
                    var0 = var1_1 % 3;
                    break block10;
                }
                case 0: {
                    var3_3 = var2_2 + var1_1;
                }
                case 1: 
            }
            var0 = var3_3 & 1;
        }
        if (var0 != 0) return false;
        return true;
    }
}

