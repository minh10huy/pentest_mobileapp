/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf;

import com.itextpdf.text.ExceptionConverter;
import com.itextpdf.text.pdf.PdfArray;
import com.itextpdf.text.pdf.PdfDictionary;
import com.itextpdf.text.pdf.PdfIndirectObject;
import com.itextpdf.text.pdf.PdfIndirectReference;
import com.itextpdf.text.pdf.PdfName;
import com.itextpdf.text.pdf.PdfNumber;
import com.itextpdf.text.pdf.PdfObject;
import com.itextpdf.text.pdf.PdfStream;
import com.itextpdf.text.pdf.PdfWriter;
import java.io.IOException;

public class PdfFunction {
    protected PdfDictionary dictionary;
    protected PdfIndirectReference reference;
    protected PdfWriter writer;

    protected PdfFunction(PdfWriter pdfWriter) {
        this.writer = pdfWriter;
    }

    public static PdfFunction type0(PdfWriter pdfWriter, float[] arrf, float[] arrf2, int[] arrn, int n2, int n3, float[] arrf3, float[] arrf4, byte[] arrby) {
        PdfFunction pdfFunction = new PdfFunction(pdfWriter);
        pdfFunction.dictionary = new PdfStream(arrby);
        ((PdfStream)pdfFunction.dictionary).flateCompress(pdfWriter.getCompressionLevel());
        pdfFunction.dictionary.put(PdfName.FUNCTIONTYPE, new PdfNumber(0));
        pdfFunction.dictionary.put(PdfName.DOMAIN, new PdfArray(arrf));
        pdfFunction.dictionary.put(PdfName.RANGE, new PdfArray(arrf2));
        pdfFunction.dictionary.put(PdfName.SIZE, new PdfArray(arrn));
        pdfFunction.dictionary.put(PdfName.BITSPERSAMPLE, new PdfNumber(n2));
        if (n3 != 1) {
            pdfFunction.dictionary.put(PdfName.ORDER, new PdfNumber(n3));
        }
        if (arrf3 != null) {
            pdfFunction.dictionary.put(PdfName.ENCODE, new PdfArray(arrf3));
        }
        if (arrf4 != null) {
            pdfFunction.dictionary.put(PdfName.DECODE, new PdfArray(arrf4));
        }
        return pdfFunction;
    }

    public static PdfFunction type2(PdfWriter object, float[] arrf, float[] arrf2, float[] arrf3, float[] arrf4, float f2) {
        object = new PdfFunction((PdfWriter)object);
        object.dictionary = new PdfDictionary();
        object.dictionary.put(PdfName.FUNCTIONTYPE, new PdfNumber(2));
        object.dictionary.put(PdfName.DOMAIN, new PdfArray(arrf));
        if (arrf2 != null) {
            object.dictionary.put(PdfName.RANGE, new PdfArray(arrf2));
        }
        if (arrf3 != null) {
            object.dictionary.put(PdfName.C0, new PdfArray(arrf3));
        }
        if (arrf4 != null) {
            object.dictionary.put(PdfName.C1, new PdfArray(arrf4));
        }
        object.dictionary.put(PdfName.N, new PdfNumber(f2));
        return object;
    }

    public static PdfFunction type3(PdfWriter object, float[] object2, float[] arrf, PdfFunction[] arrpdfFunction, float[] arrf2, float[] arrf3) {
        object = new PdfFunction((PdfWriter)object);
        object.dictionary = new PdfDictionary();
        object.dictionary.put(PdfName.FUNCTIONTYPE, new PdfNumber(3));
        object.dictionary.put(PdfName.DOMAIN, new PdfArray((float[])object2));
        if (arrf != null) {
            object.dictionary.put(PdfName.RANGE, new PdfArray(arrf));
        }
        object2 = new PdfArray();
        for (int i2 = 0; i2 < arrpdfFunction.length; ++i2) {
            object2.add(arrpdfFunction[i2].getReference());
        }
        object.dictionary.put(PdfName.FUNCTIONS, (PdfObject)object2);
        object.dictionary.put(PdfName.BOUNDS, new PdfArray(arrf2));
        object.dictionary.put(PdfName.ENCODE, new PdfArray(arrf3));
        return object;
    }

    public static PdfFunction type4(PdfWriter pdfWriter, float[] arrf, float[] arrf2, String object) {
        byte[] arrby = new byte[object.length()];
        for (int i2 = 0; i2 < arrby.length; ++i2) {
            arrby[i2] = (byte)object.charAt(i2);
        }
        object = new PdfFunction(pdfWriter);
        object.dictionary = new PdfStream(arrby);
        ((PdfStream)object.dictionary).flateCompress(pdfWriter.getCompressionLevel());
        object.dictionary.put(PdfName.FUNCTIONTYPE, new PdfNumber(4));
        object.dictionary.put(PdfName.DOMAIN, new PdfArray(arrf));
        object.dictionary.put(PdfName.RANGE, new PdfArray(arrf2));
        return object;
    }

    PdfIndirectReference getReference() {
        try {
            if (this.reference == null) {
                this.reference = this.writer.addToBody(this.dictionary).getIndirectReference();
            }
            return this.reference;
        }
        catch (IOException iOException) {
            throw new ExceptionConverter(iOException);
        }
    }
}

