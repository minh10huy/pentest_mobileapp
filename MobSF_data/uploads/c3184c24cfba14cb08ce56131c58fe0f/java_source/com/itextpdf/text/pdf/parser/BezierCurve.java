/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf.parser;

import com.itextpdf.awt.geom.Point2D;
import com.itextpdf.text.pdf.parser.Shape;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

public class BezierCurve
implements Shape {
    public static double curveCollinearityEpsilon = 1.0E-30;
    public static double distanceToleranceManhattan = 0.4;
    public static double distanceToleranceSquare = 0.025;
    private final List<Point2D> controlPoints;

    public BezierCurve(List<Point2D> list) {
        this.controlPoints = new ArrayList<Point2D>(list);
    }

    private void recursiveApproximation(double d2, double d3, double d4, double d5, double d6, double d7, double d8, double d9, List<Point2D> list) {
        double d10 = (d2 + d4) / 2.0;
        double d11 = (d3 + d5) / 2.0;
        double d12 = (d4 + d6) / 2.0;
        double d13 = (d5 + d7) / 2.0;
        double d14 = (d6 + d8) / 2.0;
        double d15 = (d7 + d9) / 2.0;
        double d16 = (d10 + d12) / 2.0;
        double d17 = (d11 + d13) / 2.0;
        d12 = (d12 + d14) / 2.0;
        double d18 = (d13 + d15) / 2.0;
        d13 = (d16 + d12) / 2.0;
        double d19 = (d17 + d18) / 2.0;
        double d20 = d8 - d2;
        double d21 = d9 - d3;
        double d22 = Math.abs((d4 - d8) * d21 - (d5 - d9) * d20);
        double d23 = Math.abs((d6 - d8) * d21 - (d7 - d9) * d20);
        if (d22 <= curveCollinearityEpsilon && d23 <= curveCollinearityEpsilon) {
            if (Math.abs(d2 + d6 - d4 - d4) + Math.abs(d3 + d7 - d5 - d5) + Math.abs(d4 + d8 - d6 - d6) + Math.abs(d5 + d9 - d7 - d7) <= distanceToleranceManhattan) {
                list.add(new Point2D.Double(d13, d19));
                return;
            }
        } else {
            d4 = d22 + d23;
            if (d4 * d4 <= distanceToleranceSquare * (d20 * d20 + d21 * d21)) {
                list.add(new Point2D.Double(d13, d19));
                return;
            }
        }
        this.recursiveApproximation(d2, d3, d10, d11, d16, d17, d13, d19, list);
        this.recursiveApproximation(d13, d19, d12, d18, d14, d15, d8, d9, list);
    }

    @Override
    public List<Point2D> getBasePoints() {
        return this.controlPoints;
    }

    public List<Point2D> getPiecewiseLinearApproximation() {
        ArrayList<Point2D> arrayList = new ArrayList<Point2D>();
        arrayList.add(this.controlPoints.get(0));
        this.recursiveApproximation(this.controlPoints.get(0).getX(), this.controlPoints.get(0).getY(), this.controlPoints.get(1).getX(), this.controlPoints.get(1).getY(), this.controlPoints.get(2).getX(), this.controlPoints.get(2).getY(), this.controlPoints.get(3).getX(), this.controlPoints.get(3).getY(), arrayList);
        arrayList.add(this.controlPoints.get(this.controlPoints.size() - 1));
        return arrayList;
    }
}

