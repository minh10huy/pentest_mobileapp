/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf;

import com.itextpdf.text.DocumentException;
import com.itextpdf.text.pdf.PRAcroForm;
import com.itextpdf.text.pdf.PdfIndirectObject;
import com.itextpdf.text.pdf.PdfIndirectReference;
import com.itextpdf.text.pdf.PdfName;
import com.itextpdf.text.pdf.PdfObject;
import com.itextpdf.text.pdf.PdfReader;
import com.itextpdf.text.pdf.PdfStamper;
import com.itextpdf.text.pdf.PdfStream;
import com.itextpdf.text.pdf.PdfWriter;
import com.itextpdf.text.pdf.XfaForm;
import com.itextpdf.text.pdf.security.XmlLocator;
import java.io.ByteArrayOutputStream;
import java.io.OutputStream;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Result;
import javax.xml.transform.Source;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.xml.sax.SAXException;

public class XfaXmlLocator
implements XmlLocator {
    private String encoding;
    private PdfStamper stamper;
    private XfaForm xfaForm;

    public XfaXmlLocator(PdfStamper pdfStamper) {
        this.stamper = pdfStamper;
        try {
            this.createXfaForm();
            return;
        }
        catch (SAXException sAXException) {
            throw new DocumentException(sAXException);
        }
        catch (ParserConfigurationException parserConfigurationException) {
            throw new DocumentException(parserConfigurationException);
        }
    }

    protected void createXfaForm() {
        this.xfaForm = new XfaForm(this.stamper.getReader());
    }

    @Override
    public Document getDocument() {
        return this.xfaForm.getDomDocument();
    }

    @Override
    public String getEncoding() {
        return this.encoding;
    }

    @Override
    public void setDocument(Document object) {
        try {
            ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
            TransformerFactory.newInstance().newTransformer().transform(new DOMSource((Node)object), new StreamResult(byteArrayOutputStream));
            object = this.stamper.getWriter().addToBody(new PdfStream(byteArrayOutputStream.toByteArray())).getIndirectReference();
            this.stamper.getReader().getAcroForm().put(PdfName.XFA, (PdfObject)object);
            return;
        }
        catch (TransformerException transformerException) {
            throw new DocumentException(transformerException);
        }
        catch (TransformerConfigurationException transformerConfigurationException) {
            throw new DocumentException(transformerConfigurationException);
        }
    }

    public void setEncoding(String string2) {
        this.encoding = string2;
    }
}

