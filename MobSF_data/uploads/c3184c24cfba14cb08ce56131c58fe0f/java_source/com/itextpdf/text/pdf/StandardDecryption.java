/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf;

import com.itextpdf.text.pdf.crypto.AESCipher;
import com.itextpdf.text.pdf.crypto.ARCFOUREncryption;

public class StandardDecryption {
    private static final int AES_128 = 4;
    private static final int AES_256 = 5;
    private boolean aes;
    protected ARCFOUREncryption arcfour;
    protected AESCipher cipher;
    private boolean initiated;
    private byte[] iv = new byte[16];
    private int ivptr;
    private byte[] key;

    public StandardDecryption(byte[] arrby, int n2, int n3, int n4) {
        boolean bl2 = n4 == 4 || n4 == 5;
        this.aes = bl2;
        if (this.aes) {
            this.key = new byte[n3];
            System.arraycopy(arrby, n2, this.key, 0, n3);
            return;
        }
        this.arcfour = new ARCFOUREncryption();
        this.arcfour.prepareARCFOURKey(arrby, n2, n3);
    }

    public byte[] finish() {
        if (this.cipher != null && this.aes) {
            return this.cipher.doFinal();
        }
        return null;
    }

    /*
     * Enabled aggressive block sorting
     */
    public byte[] update(byte[] arrby, int n2, int n3) {
        if (!this.aes) {
            byte[] arrby2 = new byte[n3];
            this.arcfour.encryptARCFOUR(arrby, n2, n3, arrby2, 0);
            return arrby2;
        }
        if (this.initiated) {
            return this.cipher.update(arrby, n2, n3);
        }
        int n4 = Math.min(this.iv.length - this.ivptr, n3);
        System.arraycopy(arrby, n2, this.iv, this.ivptr, n4);
        this.ivptr += n4;
        if (this.ivptr != this.iv.length) return null;
        this.cipher = new AESCipher(false, this.key, this.iv);
        this.initiated = true;
        if ((n3 -= n4) <= 0) return null;
        return this.cipher.update(arrby, n2 += n4, n3);
    }
}

