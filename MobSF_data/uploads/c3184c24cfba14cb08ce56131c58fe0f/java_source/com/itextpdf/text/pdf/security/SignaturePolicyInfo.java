/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  org.spongycastle.asn1.ASN1Encodable
 *  org.spongycastle.asn1.ASN1ObjectIdentifier
 *  org.spongycastle.asn1.ASN1OctetString
 *  org.spongycastle.asn1.DERIA5String
 *  org.spongycastle.asn1.DERObjectIdentifier
 *  org.spongycastle.asn1.DEROctetString
 *  org.spongycastle.asn1.esf.OtherHashAlgAndValue
 *  org.spongycastle.asn1.esf.SigPolicyQualifierInfo
 *  org.spongycastle.asn1.esf.SigPolicyQualifiers
 *  org.spongycastle.asn1.esf.SignaturePolicyId
 *  org.spongycastle.asn1.esf.SignaturePolicyIdentifier
 *  org.spongycastle.asn1.pkcs.PKCSObjectIdentifiers
 *  org.spongycastle.asn1.x509.AlgorithmIdentifier
 */
package com.itextpdf.text.pdf.security;

import com.itextpdf.text.pdf.codec.Base64;
import com.itextpdf.text.pdf.security.DigestAlgorithms;
import org.spongycastle.asn1.ASN1Encodable;
import org.spongycastle.asn1.ASN1ObjectIdentifier;
import org.spongycastle.asn1.ASN1OctetString;
import org.spongycastle.asn1.DERIA5String;
import org.spongycastle.asn1.DERObjectIdentifier;
import org.spongycastle.asn1.DEROctetString;
import org.spongycastle.asn1.esf.OtherHashAlgAndValue;
import org.spongycastle.asn1.esf.SigPolicyQualifierInfo;
import org.spongycastle.asn1.esf.SigPolicyQualifiers;
import org.spongycastle.asn1.esf.SignaturePolicyId;
import org.spongycastle.asn1.esf.SignaturePolicyIdentifier;
import org.spongycastle.asn1.pkcs.PKCSObjectIdentifiers;
import org.spongycastle.asn1.x509.AlgorithmIdentifier;

public class SignaturePolicyInfo {
    private String policyDigestAlgorithm;
    private byte[] policyHash;
    private String policyIdentifier;
    private String policyUri;

    public SignaturePolicyInfo(String string2, String object, String string3, String string4) {
        object = object != null ? Base64.decode((String)object) : null;
        this(string2, (byte[])object, string3, string4);
    }

    public SignaturePolicyInfo(String string2, byte[] arrby, String string3, String string4) {
        if (string2 != null && string2.length() != 0) {
            if (arrby != null) {
                if (string3 != null && string3.length() != 0) {
                    this.policyIdentifier = string2;
                    this.policyHash = arrby;
                    this.policyDigestAlgorithm = string3;
                    this.policyUri = string4;
                    return;
                }
                throw new IllegalArgumentException("Policy digest algorithm cannot be null");
            }
            throw new IllegalArgumentException("Policy hash cannot be null");
        }
        throw new IllegalArgumentException("Policy identifier cannot be null");
    }

    public String getPolicyDigestAlgorithm() {
        return this.policyDigestAlgorithm;
    }

    public byte[] getPolicyHash() {
        return this.policyHash;
    }

    public String getPolicyIdentifier() {
        return this.policyIdentifier;
    }

    public String getPolicyUri() {
        return this.policyUri;
    }

    SignaturePolicyIdentifier toSignaturePolicyIdentifier() {
        String string2 = DigestAlgorithms.getAllowedDigests(this.policyDigestAlgorithm);
        if (string2 != null && string2.length() != 0) {
            SigPolicyQualifiers sigPolicyQualifiers;
            SigPolicyQualifiers sigPolicyQualifiers2 = sigPolicyQualifiers = null;
            if (this.policyUri != null) {
                sigPolicyQualifiers2 = sigPolicyQualifiers;
                if (this.policyUri.length() > 0) {
                    sigPolicyQualifiers2 = new SigPolicyQualifierInfo(PKCSObjectIdentifiers.id_spq_ets_uri, (ASN1Encodable)new DERIA5String(this.policyUri));
                }
            }
            sigPolicyQualifiers2 = new SigPolicyQualifiers(new SigPolicyQualifierInfo[]{sigPolicyQualifiers2});
            return new SignaturePolicyIdentifier(new SignaturePolicyId(DERObjectIdentifier.getInstance((Object)new DERObjectIdentifier(this.policyIdentifier.replace("urn:oid:", ""))), new OtherHashAlgAndValue(new AlgorithmIdentifier(string2), (ASN1OctetString)new DEROctetString(this.policyHash)), sigPolicyQualifiers2));
        }
        throw new IllegalArgumentException("Invalid policy hash algorithm");
    }
}

