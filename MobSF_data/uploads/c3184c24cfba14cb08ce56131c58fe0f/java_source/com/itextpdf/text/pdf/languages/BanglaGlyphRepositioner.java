/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf.languages;

import com.itextpdf.text.pdf.Glyph;
import com.itextpdf.text.pdf.languages.IndicGlyphRepositioner;
import java.util.Arrays;
import java.util.List;
import java.util.Map;

public class BanglaGlyphRepositioner
extends IndicGlyphRepositioner {
    private static final String[] CHARCTERS_TO_BE_SHIFTED_LEFT_BY_1 = new String[]{"\u09bf", "\u09c7", "\u09c8"};
    private final Map<Integer, int[]> cmap31;
    private final Map<String, Glyph> glyphSubstitutionMap;

    public BanglaGlyphRepositioner(Map<Integer, int[]> map, Map<String, Glyph> map2) {
        this.cmap31 = map;
        this.glyphSubstitutionMap = map2;
    }

    private Glyph getGlyph(char c2) {
        int[] arrn = this.glyphSubstitutionMap.get(String.valueOf(c2));
        if (arrn != null) {
            return arrn;
        }
        arrn = this.cmap31.get(Integer.valueOf(c2));
        return new Glyph(arrn[0], arrn[1], String.valueOf(c2));
    }

    private void handleOKaarAndOUKaar(int n2, List<Glyph> list, char c2, char c3) {
        Glyph glyph = this.getGlyph(c2);
        Glyph glyph2 = this.getGlyph(c3);
        list.set(n2, glyph);
        list.add(n2 + 1, glyph2);
    }

    @Override
    public List<String> getCharactersToBeShiftedLeftByOnePosition() {
        return Arrays.asList(CHARCTERS_TO_BE_SHIFTED_LEFT_BY_1);
    }

    /*
     * Enabled aggressive block sorting
     */
    @Override
    public void repositionGlyphs(List<Glyph> list) {
        int n2 = 0;
        do {
            block7 : {
                char c2;
                block6 : {
                    block5 : {
                        if (n2 >= list.size()) {
                            super.repositionGlyphs(list);
                            return;
                        }
                        Glyph glyph = list.get(n2);
                        if (!glyph.chars.equals("\u09cb")) break block5;
                        c2 = '\u09be';
                        break block6;
                    }
                    if (!glyph.chars.equals("\u09cc")) break block7;
                    c2 = '\u09d7';
                }
                this.handleOKaarAndOUKaar(n2, list, '\u09c7', c2);
            }
            ++n2;
        } while (true);
    }
}

