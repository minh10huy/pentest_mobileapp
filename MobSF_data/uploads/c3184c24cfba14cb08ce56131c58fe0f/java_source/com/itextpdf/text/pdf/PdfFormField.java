/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf;

import com.itextpdf.text.Rectangle;
import com.itextpdf.text.pdf.PdfAction;
import com.itextpdf.text.pdf.PdfAnnotation;
import com.itextpdf.text.pdf.PdfArray;
import com.itextpdf.text.pdf.PdfDictionary;
import com.itextpdf.text.pdf.PdfIndirectReference;
import com.itextpdf.text.pdf.PdfName;
import com.itextpdf.text.pdf.PdfNumber;
import com.itextpdf.text.pdf.PdfObject;
import com.itextpdf.text.pdf.PdfReader;
import com.itextpdf.text.pdf.PdfRectangle;
import com.itextpdf.text.pdf.PdfSignature;
import com.itextpdf.text.pdf.PdfStamperImp;
import com.itextpdf.text.pdf.PdfString;
import com.itextpdf.text.pdf.PdfTemplate;
import com.itextpdf.text.pdf.PdfWriter;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;

public class PdfFormField
extends PdfAnnotation {
    public static final int FF_COMB = 16777216;
    public static final int FF_COMBO = 131072;
    public static final int FF_DONOTSCROLL = 8388608;
    public static final int FF_DONOTSPELLCHECK = 4194304;
    public static final int FF_EDIT = 262144;
    public static final int FF_FILESELECT = 1048576;
    public static final int FF_MULTILINE = 4096;
    public static final int FF_MULTISELECT = 2097152;
    public static final int FF_NO_EXPORT = 4;
    public static final int FF_NO_TOGGLE_TO_OFF = 16384;
    public static final int FF_PASSWORD = 8192;
    public static final int FF_PUSHBUTTON = 65536;
    public static final int FF_RADIO = 32768;
    public static final int FF_RADIOSINUNISON = 33554432;
    public static final int FF_READ_ONLY = 1;
    public static final int FF_REQUIRED = 2;
    public static final int FF_RICHTEXT = 33554432;
    public static final PdfName IF_SCALE_ALWAYS = PdfName.A;
    public static final PdfName IF_SCALE_ANAMORPHIC;
    public static final PdfName IF_SCALE_BIGGER;
    public static final PdfName IF_SCALE_NEVER;
    public static final PdfName IF_SCALE_PROPORTIONAL;
    public static final PdfName IF_SCALE_SMALLER;
    public static final int MK_CAPTION_ABOVE = 3;
    public static final int MK_CAPTION_BELOW = 2;
    public static final int MK_CAPTION_LEFT = 5;
    public static final int MK_CAPTION_OVERLAID = 6;
    public static final int MK_CAPTION_RIGHT = 4;
    public static final int MK_NO_CAPTION = 1;
    public static final int MK_NO_ICON = 0;
    public static final boolean MULTILINE = true;
    public static final boolean PASSWORD = true;
    public static final boolean PLAINTEXT = false;
    public static final int Q_CENTER = 1;
    public static final int Q_LEFT = 0;
    public static final int Q_RIGHT = 2;
    public static final boolean SINGLELINE = false;
    static PdfName[] mergeTarget;
    protected ArrayList<PdfFormField> kids;
    protected PdfFormField parent;

    static {
        IF_SCALE_BIGGER = PdfName.B;
        IF_SCALE_SMALLER = PdfName.S;
        IF_SCALE_NEVER = PdfName.N;
        IF_SCALE_ANAMORPHIC = PdfName.A;
        IF_SCALE_PROPORTIONAL = PdfName.P;
        mergeTarget = new PdfName[]{PdfName.FONT, PdfName.XOBJECT, PdfName.COLORSPACE, PdfName.PATTERN};
    }

    protected PdfFormField(PdfWriter pdfWriter) {
        super(pdfWriter, null);
        this.form = true;
        this.annotation = false;
        this.role = PdfName.FORM;
    }

    public PdfFormField(PdfWriter pdfWriter, float f2, float f3, float f4, float f5, PdfAction pdfAction) {
        super(pdfWriter, f2, f3, f4, f5, pdfAction);
        this.put(PdfName.TYPE, PdfName.ANNOT);
        this.put(PdfName.SUBTYPE, PdfName.WIDGET);
        this.annotation = true;
    }

    protected static PdfFormField createButton(PdfWriter object, int n2) {
        object = new PdfFormField((PdfWriter)object);
        object.setButton(n2);
        return object;
    }

    public static PdfFormField createCheckBox(PdfWriter pdfWriter) {
        return PdfFormField.createButton(pdfWriter, 0);
    }

    protected static PdfFormField createChoice(PdfWriter object, int n2, PdfArray pdfArray, int n3) {
        object = new PdfFormField((PdfWriter)object);
        object.put(PdfName.FT, PdfName.CH);
        object.put(PdfName.FF, new PdfNumber(n2));
        object.put(PdfName.OPT, pdfArray);
        if (n3 > 0) {
            object.put(PdfName.TI, new PdfNumber(n3));
        }
        return object;
    }

    public static PdfFormField createCombo(PdfWriter pdfWriter, boolean bl2, String[] arrstring, int n2) {
        int n3 = bl2 ? 262144 : 0;
        return PdfFormField.createChoice(pdfWriter, n3 + 131072, PdfFormField.processOptions(arrstring), n2);
    }

    public static PdfFormField createCombo(PdfWriter pdfWriter, boolean bl2, String[][] arrstring, int n2) {
        int n3 = bl2 ? 262144 : 0;
        return PdfFormField.createChoice(pdfWriter, n3 + 131072, PdfFormField.processOptions(arrstring), n2);
    }

    public static PdfFormField createEmpty(PdfWriter pdfWriter) {
        return new PdfFormField(pdfWriter);
    }

    public static PdfFormField createList(PdfWriter pdfWriter, String[] arrstring, int n2) {
        return PdfFormField.createChoice(pdfWriter, 0, PdfFormField.processOptions(arrstring), n2);
    }

    public static PdfFormField createList(PdfWriter pdfWriter, String[][] arrstring, int n2) {
        return PdfFormField.createChoice(pdfWriter, 0, PdfFormField.processOptions(arrstring), n2);
    }

    public static PdfFormField createPushButton(PdfWriter pdfWriter) {
        return PdfFormField.createButton(pdfWriter, 65536);
    }

    public static PdfFormField createRadioButton(PdfWriter pdfWriter, boolean bl2) {
        int n2 = bl2 ? 16384 : 0;
        return PdfFormField.createButton(pdfWriter, n2 + 32768);
    }

    public static PdfFormField createSignature(PdfWriter object) {
        object = new PdfFormField((PdfWriter)object);
        object.put(PdfName.FT, PdfName.SIG);
        return object;
    }

    public static PdfFormField createTextField(PdfWriter object, boolean bl2, boolean bl3, int n2) {
        object = new PdfFormField((PdfWriter)object);
        object.put(PdfName.FT, PdfName.TX);
        int n3 = 0;
        int n4 = bl2 ? 4096 : 0;
        if (bl3) {
            n3 = 8192;
        }
        object.put(PdfName.FF, new PdfNumber(n4 + n3));
        if (n2 > 0) {
            object.put(PdfName.MAXLEN, new PdfNumber(n2));
        }
        return object;
    }

    static void mergeResources(PdfDictionary pdfDictionary, PdfDictionary pdfDictionary2) {
        PdfFormField.mergeResources(pdfDictionary, pdfDictionary2, null);
    }

    static void mergeResources(PdfDictionary pdfDictionary, PdfDictionary pdfDictionary2, PdfStamperImp pdfStamperImp) {
        for (int i2 = 0; i2 < mergeTarget.length; ++i2) {
            PdfDictionary pdfDictionary3;
            PdfName pdfName = mergeTarget[i2];
            PdfDictionary pdfDictionary4 = pdfDictionary2.getAsDict(pdfName);
            if (pdfDictionary4 == null) continue;
            PdfDictionary pdfDictionary5 = pdfDictionary3 = (PdfDictionary)PdfReader.getPdfObject(pdfDictionary.get(pdfName), pdfDictionary);
            if (pdfDictionary3 == null) {
                pdfDictionary5 = new PdfDictionary();
            }
            pdfDictionary5.mergeDifferent(pdfDictionary4);
            pdfDictionary.put(pdfName, pdfDictionary5);
            if (pdfStamperImp == null) continue;
            pdfStamperImp.markUsed(pdfDictionary5);
        }
    }

    protected static PdfArray processOptions(String[] arrstring) {
        PdfArray pdfArray = new PdfArray();
        for (int i2 = 0; i2 < arrstring.length; ++i2) {
            pdfArray.add(new PdfString(arrstring[i2], "UnicodeBig"));
        }
        return pdfArray;
    }

    protected static PdfArray processOptions(String[][] arrstring) {
        PdfArray pdfArray = new PdfArray();
        for (int i2 = 0; i2 < arrstring.length; ++i2) {
            String[] arrstring2 = arrstring[i2];
            PdfArray pdfArray2 = new PdfArray(new PdfString(arrstring2[0], "UnicodeBig"));
            pdfArray2.add(new PdfString(arrstring2[1], "UnicodeBig"));
            pdfArray.add(pdfArray2);
        }
        return pdfArray;
    }

    public static PdfAnnotation shallowDuplicate(PdfAnnotation pdfAnnotation) {
        PdfAnnotation pdfAnnotation2;
        if (pdfAnnotation.isForm()) {
            pdfAnnotation2 = new PdfFormField(pdfAnnotation.writer);
            PdfFormField pdfFormField = pdfAnnotation2;
            PdfFormField pdfFormField2 = (PdfFormField)pdfAnnotation;
            pdfFormField.parent = pdfFormField2.parent;
            pdfFormField.kids = pdfFormField2.kids;
        } else {
            pdfAnnotation2 = pdfAnnotation.writer.createAnnotation(null, (PdfName)pdfAnnotation.get(PdfName.SUBTYPE));
        }
        pdfAnnotation2.merge(pdfAnnotation);
        pdfAnnotation2.form = pdfAnnotation.form;
        pdfAnnotation2.annotation = pdfAnnotation.annotation;
        pdfAnnotation2.templates = pdfAnnotation.templates;
        return pdfAnnotation2;
    }

    public void addKid(PdfFormField pdfFormField) {
        pdfFormField.parent = this;
        if (this.kids == null) {
            this.kids = new ArrayList();
        }
        this.kids.add(pdfFormField);
    }

    public ArrayList<PdfFormField> getKids() {
        return this.kids;
    }

    public PdfFormField getParent() {
        return this.parent;
    }

    public void setButton(int n2) {
        this.put(PdfName.FT, PdfName.BTN);
        if (n2 != 0) {
            this.put(PdfName.FF, new PdfNumber(n2));
        }
    }

    public void setDefaultValueAsName(String string2) {
        this.put(PdfName.DV, new PdfName(string2));
    }

    public void setDefaultValueAsString(String string2) {
        this.put(PdfName.DV, new PdfString(string2, "UnicodeBig"));
    }

    public int setFieldFlags(int n2) {
        PdfNumber pdfNumber = (PdfNumber)this.get(PdfName.FF);
        int n3 = pdfNumber == null ? 0 : pdfNumber.intValue();
        this.put(PdfName.FF, new PdfNumber(n2 | n3));
        return n3;
    }

    public void setFieldName(String string2) {
        if (string2 != null) {
            this.put(PdfName.T, new PdfString(string2, "UnicodeBig"));
        }
    }

    public void setMappingName(String string2) {
        this.put(PdfName.TM, new PdfString(string2, "UnicodeBig"));
    }

    public void setQuadding(int n2) {
        this.put(PdfName.Q, new PdfNumber(n2));
    }

    public void setRichValue(String string2) {
        this.put(PdfName.RV, new PdfString(string2));
    }

    @Override
    public void setUsed() {
        PdfObject pdfObject;
        this.used = true;
        if (this.parent != null) {
            this.put(PdfName.PARENT, this.parent.getIndirectReference());
        }
        if (this.kids != null) {
            pdfObject = new PdfArray();
            for (int i2 = 0; i2 < this.kids.size(); ++i2) {
                pdfObject.add(this.kids.get(i2).getIndirectReference());
            }
            this.put(PdfName.KIDS, pdfObject);
        }
        if (this.templates == null) {
            return;
        }
        pdfObject = new PdfDictionary();
        Iterator iterator = this.templates.iterator();
        while (iterator.hasNext()) {
            PdfFormField.mergeResources((PdfDictionary)pdfObject, (PdfDictionary)((PdfTemplate)iterator.next()).getResources());
        }
        this.put(PdfName.DR, pdfObject);
    }

    public void setUserName(String string2) {
        this.put(PdfName.TU, new PdfString(string2, "UnicodeBig"));
    }

    public void setValue(PdfSignature pdfSignature) {
        this.put(PdfName.V, pdfSignature);
    }

    public void setValueAsName(String string2) {
        this.put(PdfName.V, new PdfName(string2));
    }

    public void setValueAsString(String string2) {
        this.put(PdfName.V, new PdfString(string2, "UnicodeBig"));
    }

    public void setWidget(Rectangle rectangle, PdfName pdfName) {
        this.put(PdfName.TYPE, PdfName.ANNOT);
        this.put(PdfName.SUBTYPE, PdfName.WIDGET);
        this.put(PdfName.RECT, new PdfRectangle(rectangle));
        this.annotation = true;
        if (pdfName != null && !pdfName.equals(HIGHLIGHT_INVERT)) {
            this.put(PdfName.H, pdfName);
        }
    }
}

