/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf.parser;

import com.itextpdf.text.pdf.parser.ImageRenderInfo;
import com.itextpdf.text.pdf.parser.RenderFilter;
import com.itextpdf.text.pdf.parser.RenderListener;
import com.itextpdf.text.pdf.parser.TextRenderInfo;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

public class MultiFilteredRenderListener
implements RenderListener {
    private final List<RenderListener> delegates = new ArrayList<RenderListener>();
    private final List<RenderFilter[]> filters = new ArrayList<RenderFilter[]>();

    public /* varargs */ <E extends RenderListener> E attachRenderListener(E e2, RenderFilter ... arrrenderFilter) {
        this.delegates.add((RenderListener)e2);
        this.filters.add(arrrenderFilter);
        return e2;
    }

    @Override
    public void beginTextBlock() {
        Iterator<RenderListener> iterator = this.delegates.iterator();
        while (iterator.hasNext()) {
            iterator.next().beginTextBlock();
        }
    }

    @Override
    public void endTextBlock() {
        Iterator<RenderListener> iterator = this.delegates.iterator();
        while (iterator.hasNext()) {
            iterator.next().endTextBlock();
        }
    }

    @Override
    public void renderImage(ImageRenderInfo imageRenderInfo) {
        for (int i2 = 0; i2 < this.delegates.size(); ++i2) {
            int n2;
            block2 : {
                RenderFilter[] arrrenderFilter = this.filters.get(i2);
                int n3 = arrrenderFilter.length;
                for (n2 = 0; n2 < n3; ++n2) {
                    if (arrrenderFilter[n2].allowImage(imageRenderInfo)) continue;
                    n2 = 0;
                    break block2;
                }
                n2 = 1;
            }
            if (n2 == 0) continue;
            this.delegates.get(i2).renderImage(imageRenderInfo);
        }
    }

    @Override
    public void renderText(TextRenderInfo textRenderInfo) {
        for (int i2 = 0; i2 < this.delegates.size(); ++i2) {
            int n2;
            block2 : {
                RenderFilter[] arrrenderFilter = this.filters.get(i2);
                int n3 = arrrenderFilter.length;
                for (n2 = 0; n2 < n3; ++n2) {
                    if (arrrenderFilter[n2].allowText(textRenderInfo)) continue;
                    n2 = 0;
                    break block2;
                }
                n2 = 1;
            }
            if (n2 == 0) continue;
            this.delegates.get(i2).renderText(textRenderInfo);
        }
    }
}

