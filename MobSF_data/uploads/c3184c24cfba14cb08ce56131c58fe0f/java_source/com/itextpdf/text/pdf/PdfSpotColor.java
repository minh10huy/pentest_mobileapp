/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf;

import com.itextpdf.text.BaseColor;
import com.itextpdf.text.error_messages.MessageLocalization;
import com.itextpdf.text.pdf.CMYKColor;
import com.itextpdf.text.pdf.ColorDetails;
import com.itextpdf.text.pdf.ExtendedColor;
import com.itextpdf.text.pdf.GrayColor;
import com.itextpdf.text.pdf.ICachedColorSpace;
import com.itextpdf.text.pdf.IPdfSpecialColorSpace;
import com.itextpdf.text.pdf.LabColor;
import com.itextpdf.text.pdf.PdfArray;
import com.itextpdf.text.pdf.PdfFunction;
import com.itextpdf.text.pdf.PdfIndirectReference;
import com.itextpdf.text.pdf.PdfLabColor;
import com.itextpdf.text.pdf.PdfName;
import com.itextpdf.text.pdf.PdfObject;
import com.itextpdf.text.pdf.PdfWriter;

public class PdfSpotColor
implements ICachedColorSpace,
IPdfSpecialColorSpace {
    public ColorDetails altColorDetails;
    public BaseColor altcs;
    public PdfName name;

    public PdfSpotColor(String string2, BaseColor baseColor) {
        this.name = new PdfName(string2);
        this.altcs = baseColor;
    }

    @Override
    public boolean equals(Object object) {
        if (this == object) {
            return true;
        }
        if (!(object instanceof PdfSpotColor)) {
            return false;
        }
        object = (PdfSpotColor)object;
        if (!this.altcs.equals(object.altcs)) {
            return false;
        }
        if (!this.name.equals(object.name)) {
            return false;
        }
        return true;
    }

    public BaseColor getAlternativeCS() {
        return this.altcs;
    }

    @Override
    public ColorDetails[] getColorantDetails(PdfWriter pdfWriter) {
        if (this.altColorDetails == null && this.altcs instanceof ExtendedColor && ((ExtendedColor)this.altcs).getType() == 7) {
            this.altColorDetails = pdfWriter.addSimple(((LabColor)this.altcs).getLabColorSpace());
        }
        return new ColorDetails[]{this.altColorDetails};
    }

    public PdfName getName() {
        return this.name;
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Lifted jumps to return sites
     */
    @Override
    public PdfObject getPdfObject(PdfWriter var1_1) {
        block9 : {
            block8 : {
                block6 : {
                    block7 : {
                        var9_2 = new PdfArray(PdfName.SEPARATION);
                        var9_2.add(this.name);
                        if (!(this.altcs instanceof ExtendedColor)) break block6;
                        var5_3 = ((ExtendedColor)this.altcs).type;
                        if (var5_3 == 7) break block7;
                        switch (var5_3) {
                            default: {
                                throw new RuntimeException(MessageLocalization.getComposedMessage("only.rgb.gray.and.cmyk.are.supported.as.alternative.color.spaces", new Object[0]));
                            }
                            case 2: {
                                var9_2.add(PdfName.DEVICECMYK);
                                var10_4 = (CMYKColor)this.altcs;
                                v0 = var6_5 = new float[2];
                                v0[0] = 0.0f;
                                v0[1] = 1.0f;
                                v1 = var7_12 = new float[4];
                                v1[0] = 0.0f;
                                v1[1] = 0.0f;
                                v1[2] = 0.0f;
                                v1[3] = 0.0f;
                                var8_14 = new float[]{var10_4.getCyan(), var10_4.getMagenta(), var10_4.getYellow(), var10_4.getBlack()};
                                ** break;
                            }
                            case 1: 
                        }
                        var9_2.add(PdfName.DEVICEGRAY);
                        v2 = var6_6 = new float[2];
                        v2[0] = 0.0f;
                        v2[1] = 1.0f;
                        var7_12 = new float[]{1.0f};
                        var8_14 = new float[]{((GrayColor)this.altcs).getGray()};
                        ** break;
lbl30: // 2 sources:
                        break block8;
                    }
                    var7_13 = (LabColor)this.altcs;
                    if (this.altColorDetails != null) {
                        var6_7 = this.altColorDetails.getIndirectReference();
                    } else {
                        var6_9 = var7_13.getLabColorSpace().getPdfObject((PdfWriter)var1_1);
                    }
                    var9_2.add((PdfObject)var6_8);
                    var2_15 = var7_13.getL();
                    var3_16 = var7_13.getA();
                    var4_17 = var7_13.getB();
                    var1_1 = PdfFunction.type2((PdfWriter)var1_1, new float[]{0.0f, 1.0f}, null, new float[]{100.0f, 0.0f, 0.0f}, new float[]{var2_15, var3_16, var4_17}, 1.0f);
                    break block9;
                }
                var9_2.add(PdfName.DEVICERGB);
                v3 = var6_10 = new float[2];
                v3[0] = 0.0f;
                v3[1] = 1.0f;
                v4 = var7_12 = new float[3];
                v4[0] = 1.0f;
                v4[1] = 1.0f;
                v4[2] = 1.0f;
                var8_14 = new float[]{(float)this.altcs.getRed() / 255.0f, (float)this.altcs.getGreen() / 255.0f, (float)this.altcs.getBlue() / 255.0f};
            }
            var1_1 = PdfFunction.type2((PdfWriter)var1_1, (float[])var6_11, null, var7_12, var8_14, 1.0f);
        }
        var9_2.add(var1_1.getReference());
        return var9_2;
    }

    @Deprecated
    protected PdfObject getSpotObject(PdfWriter pdfWriter) {
        return this.getPdfObject(pdfWriter);
    }

    @Override
    public int hashCode() {
        return this.name.hashCode() * 31 + this.altcs.hashCode();
    }
}

