/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf.events;

import com.itextpdf.text.Document;
import com.itextpdf.text.ExceptionConverter;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.error_messages.MessageLocalization;
import com.itextpdf.text.pdf.PdfAnnotation;
import com.itextpdf.text.pdf.PdfContentByte;
import com.itextpdf.text.pdf.PdfFormField;
import com.itextpdf.text.pdf.PdfName;
import com.itextpdf.text.pdf.PdfObject;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPCellEvent;
import com.itextpdf.text.pdf.PdfPageEventHelper;
import com.itextpdf.text.pdf.PdfRectangle;
import com.itextpdf.text.pdf.PdfWriter;
import com.itextpdf.text.pdf.TextField;
import java.util.HashMap;

public class FieldPositioningEvents
extends PdfPageEventHelper
implements PdfPCellEvent {
    protected PdfFormField cellField = null;
    protected PdfWriter fieldWriter = null;
    protected HashMap<String, PdfFormField> genericChunkFields = new HashMap();
    public float padding;
    protected PdfFormField parent = null;

    public FieldPositioningEvents() {
    }

    public FieldPositioningEvents(PdfFormField pdfFormField, PdfFormField pdfFormField2) {
        this.cellField = pdfFormField2;
        this.parent = pdfFormField;
    }

    public FieldPositioningEvents(PdfWriter pdfWriter, PdfFormField pdfFormField) {
        this.cellField = pdfFormField;
        this.fieldWriter = pdfWriter;
    }

    public FieldPositioningEvents(PdfWriter object, PdfFormField pdfFormField, String string2) {
        this.parent = pdfFormField;
        object = new TextField((PdfWriter)object, new Rectangle(0.0f, 0.0f), string2);
        object.setFontSize(14.0f);
        this.cellField = object.getTextField();
    }

    public FieldPositioningEvents(PdfWriter object, String string2) {
        this.fieldWriter = object;
        object = new TextField((PdfWriter)object, new Rectangle(0.0f, 0.0f), string2);
        object.setFontSize(14.0f);
        this.cellField = object.getTextField();
    }

    public void addField(String string2, PdfFormField pdfFormField) {
        this.genericChunkFields.put(string2, pdfFormField);
    }

    @Override
    public void cellLayout(PdfPCell pdfPCell, Rectangle rectangle, PdfContentByte[] arrpdfContentByte) {
        if (this.cellField != null && (this.fieldWriter != null || this.parent != null)) {
            this.cellField.put(PdfName.RECT, new PdfRectangle(rectangle.getLeft(this.padding), rectangle.getBottom(this.padding), rectangle.getRight(this.padding), rectangle.getTop(this.padding)));
            if (this.parent == null) {
                this.fieldWriter.addAnnotation(this.cellField);
                return;
            }
            this.parent.addKid(this.cellField);
            return;
        }
        throw new IllegalArgumentException(MessageLocalization.getComposedMessage("you.have.used.the.wrong.constructor.for.this.fieldpositioningevents.class", new Object[0]));
    }

    @Override
    public void onGenericTag(PdfWriter pdfWriter, Document object, Rectangle rectangle, String string2) {
        rectangle.setBottom(rectangle.getBottom() - 3.0f);
        object = this.genericChunkFields.get(string2);
        if (object == null) {
            object = new TextField(pdfWriter, new Rectangle(rectangle.getLeft(this.padding), rectangle.getBottom(this.padding), rectangle.getRight(this.padding), rectangle.getTop(this.padding)), string2);
            object.setFontSize(14.0f);
            try {
                object = object.getTextField();
            }
            catch (Exception exception) {
                throw new ExceptionConverter(exception);
            }
        } else {
            object.put(PdfName.RECT, new PdfRectangle(rectangle.getLeft(this.padding), rectangle.getBottom(this.padding), rectangle.getRight(this.padding), rectangle.getTop(this.padding)));
        }
        if (this.parent == null) {
            pdfWriter.addAnnotation((PdfAnnotation)object);
            return;
        }
        this.parent.addKid((PdfFormField)object);
    }

    public void setPadding(float f2) {
        this.padding = f2;
    }

    public void setParent(PdfFormField pdfFormField) {
        this.parent = pdfFormField;
    }
}

