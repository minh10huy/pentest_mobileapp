/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf.codec;

import java.io.Serializable;

public class TIFFField
implements Serializable,
Comparable<TIFFField> {
    public static final int TIFF_ASCII = 2;
    public static final int TIFF_BYTE = 1;
    public static final int TIFF_DOUBLE = 12;
    public static final int TIFF_FLOAT = 11;
    public static final int TIFF_LONG = 4;
    public static final int TIFF_RATIONAL = 5;
    public static final int TIFF_SBYTE = 6;
    public static final int TIFF_SHORT = 3;
    public static final int TIFF_SLONG = 9;
    public static final int TIFF_SRATIONAL = 10;
    public static final int TIFF_SSHORT = 8;
    public static final int TIFF_UNDEFINED = 7;
    private static final long serialVersionUID = 9088332901412823834L;
    int count;
    Object data;
    int tag;
    int type;

    TIFFField() {
    }

    public TIFFField(int n2, int n3, int n4, Object object) {
        this.tag = n2;
        this.type = n3;
        this.count = n4;
        this.data = object;
    }

    @Override
    public int compareTo(TIFFField tIFFField) {
        if (tIFFField != null) {
            int n2 = tIFFField.getTag();
            if (this.tag < n2) {
                return -1;
            }
            if (this.tag > n2) {
                return 1;
            }
            return 0;
        }
        throw new IllegalArgumentException();
    }

    public byte[] getAsBytes() {
        return (byte[])this.data;
    }

    public char[] getAsChars() {
        return (char[])this.data;
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    public double getAsDouble(int n2) {
        switch (this.type) {
            double d2;
            double d3;
            default: {
                throw new ClassCastException();
            }
            case 12: {
                return ((double[])this.data)[n2];
            }
            case 11: {
                return ((float[])this.data)[n2];
            }
            case 10: {
                int[] arrn = this.getAsSRational(n2);
                d2 = arrn[0];
                d3 = arrn[1];
                do {
                    return d2 / d3;
                    break;
                } while (true);
            }
            case 9: {
                return ((int[])this.data)[n2];
            }
            case 8: {
                return ((short[])this.data)[n2];
            }
            case 6: {
                return ((byte[])this.data)[n2];
            }
            case 5: {
                long[] arrl = this.getAsRational(n2);
                d2 = arrl[0];
                d3 = arrl[1];
                return d2 / d3;
            }
            case 4: {
                return ((long[])this.data)[n2];
            }
            case 3: {
                return ((char[])this.data)[n2] & 65535;
            }
            case 1: 
        }
        return ((byte[])this.data)[n2] & 255;
    }

    public double[] getAsDoubles() {
        return (double[])this.data;
    }

    public float getAsFloat(int n2) {
        switch (this.type) {
            default: {
                throw new ClassCastException();
            }
            case 12: {
                return (float)((double[])this.data)[n2];
            }
            case 11: {
                return ((float[])this.data)[n2];
            }
            case 10: {
                int[] arrn = this.getAsSRational(n2);
                return (float)((double)arrn[0] / (double)arrn[1]);
            }
            case 9: {
                return ((int[])this.data)[n2];
            }
            case 8: {
                return ((short[])this.data)[n2];
            }
            case 6: {
                return ((byte[])this.data)[n2];
            }
            case 5: {
                long[] arrl = this.getAsRational(n2);
                return (float)((double)arrl[0] / (double)arrl[1]);
            }
            case 4: {
                return ((long[])this.data)[n2];
            }
            case 3: {
                return ((char[])this.data)[n2] & 65535;
            }
            case 1: 
        }
        return ((byte[])this.data)[n2] & 255;
    }

    public float[] getAsFloats() {
        return (float[])this.data;
    }

    /*
     * Exception decompiling
     */
    public int getAsInt(int var1_1) {
        // This method has failed to decompile.  When submitting a bug report, please provide this stack trace, and (if you hold appropriate legal rights) the relevant class file.
        // org.benf.cfr.reader.util.ConfusedCFRException: Extractable last case doesn't follow previous
        // org.benf.cfr.reader.bytecode.analysis.opgraph.op3rewriters.SwitchReplacer.examineSwitchContiguity(SwitchReplacer.java:486)
        // org.benf.cfr.reader.bytecode.analysis.opgraph.op3rewriters.SwitchReplacer.replaceRawSwitches(SwitchReplacer.java:65)
        // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisInner(CodeAnalyser.java:416)
        // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisOrWrapFail(CodeAnalyser.java:196)
        // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysis(CodeAnalyser.java:141)
        // org.benf.cfr.reader.entities.attributes.AttributeCode.analyse(AttributeCode.java:95)
        // org.benf.cfr.reader.entities.Method.analyse(Method.java:372)
        // org.benf.cfr.reader.entities.ClassFile.analyseMid(ClassFile.java:867)
        // org.benf.cfr.reader.entities.ClassFile.analyseTop(ClassFile.java:768)
        // org.benf.cfr.reader.Main.doJar(Main.java:141)
        // org.benf.cfr.reader.Main.main(Main.java:242)
        throw new IllegalStateException("Decompilation failed");
    }

    public int[] getAsInts() {
        return (int[])this.data;
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    public long getAsLong(int n2) {
        switch (this.type) {
            default: {
                throw new ClassCastException();
            }
            case 9: {
                n2 = ((int[])this.data)[n2];
                do {
                    return n2;
                    break;
                } while (true);
            }
            case 8: {
                n2 = ((short[])this.data)[n2];
                return n2;
            }
            case 6: {
                n2 = ((byte[])this.data)[n2];
                return n2;
            }
            case 4: {
                return ((long[])this.data)[n2];
            }
            case 3: {
                n2 = ((char[])this.data)[n2] & 65535;
                return n2;
            }
            case 1: 
            case 7: 
        }
        n2 = ((byte[])this.data)[n2] & 255;
        return n2;
    }

    public long[] getAsLongs() {
        return (long[])this.data;
    }

    public long[] getAsRational(int n2) {
        if (this.type == 4) {
            return this.getAsLongs();
        }
        return ((long[][])this.data)[n2];
    }

    public long[][] getAsRationals() {
        return (long[][])this.data;
    }

    public int[] getAsSRational(int n2) {
        return ((int[][])this.data)[n2];
    }

    public int[][] getAsSRationals() {
        return (int[][])this.data;
    }

    public short[] getAsShorts() {
        return (short[])this.data;
    }

    public String getAsString(int n2) {
        return ((String[])this.data)[n2];
    }

    public int getCount() {
        return this.count;
    }

    public int getTag() {
        return this.tag;
    }

    public int getType() {
        return this.type;
    }
}

