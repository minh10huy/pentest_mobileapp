/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf.qrcode;

public final class BitArray {
    public int[] bits;
    public final int size;

    public BitArray(int n2) {
        if (n2 >= 1) {
            this.size = n2;
            this.bits = BitArray.makeArray(n2);
            return;
        }
        throw new IllegalArgumentException("size must be at least 1");
    }

    private static int[] makeArray(int n2) {
        int n3;
        int n4 = n3 = n2 >> 5;
        if ((n2 & 31) != 0) {
            n4 = n3 + 1;
        }
        return new int[n4];
    }

    public void clear() {
        int n2 = this.bits.length;
        for (int i2 = 0; i2 < n2; ++i2) {
            this.bits[i2] = 0;
        }
    }

    public void flip(int n2) {
        int[] arrn = this.bits;
        int n3 = n2 >> 5;
        arrn[n3] = 1 << (n2 & 31) ^ arrn[n3];
    }

    public boolean get(int n2) {
        if ((1 << (n2 & 31) & this.bits[n2 >> 5]) != 0) {
            return true;
        }
        return false;
    }

    public int[] getBitArray() {
        return this.bits;
    }

    public int getSize() {
        return this.size;
    }

    public boolean isRange(int n2, int n3, boolean bl2) {
        if (n3 >= n2) {
            if (n3 == n2) {
                return true;
            }
            int n4 = n3 - 1;
            int n5 = n2 >> 5;
            int n6 = n4 >> 5;
            for (int i2 = n5; i2 <= n6; ++i2) {
                int n7;
                n3 = i2 > n5 ? 0 : n2 & 31;
                int n8 = i2 < n6 ? 31 : n4 & 31;
                if (n3 == 0 && n8 == 31) {
                    n3 = -1;
                } else {
                    n7 = 0;
                    int n9 = n3;
                    do {
                        n3 = n7;
                        if (n9 > n8) break;
                        n7 |= 1 << n9;
                        ++n9;
                    } while (true);
                }
                n8 = this.bits[i2];
                n7 = bl2 ? n3 : 0;
                if ((n8 & n3) == n7) continue;
                return false;
            }
            return true;
        }
        throw new IllegalArgumentException();
    }

    public void reverse() {
        int[] arrn = new int[this.bits.length];
        int n2 = this.size;
        for (int i2 = 0; i2 < n2; ++i2) {
            if (!this.get(n2 - i2 - 1)) continue;
            int n3 = i2 >> 5;
            arrn[n3] = 1 << (i2 & 31) | arrn[n3];
        }
        this.bits = arrn;
    }

    public void set(int n2) {
        int[] arrn = this.bits;
        int n3 = n2 >> 5;
        arrn[n3] = 1 << (n2 & 31) | arrn[n3];
    }

    public void setBulk(int n2, int n3) {
        this.bits[n2 >> 5] = n3;
    }

    public String toString() {
        StringBuffer stringBuffer = new StringBuffer(this.size);
        for (int i2 = 0; i2 < this.size; ++i2) {
            if ((i2 & 7) == 0) {
                stringBuffer.append(' ');
            }
            char c2 = this.get(i2) ? (char)'X' : '.';
            stringBuffer.append(c2);
        }
        return stringBuffer.toString();
    }
}

