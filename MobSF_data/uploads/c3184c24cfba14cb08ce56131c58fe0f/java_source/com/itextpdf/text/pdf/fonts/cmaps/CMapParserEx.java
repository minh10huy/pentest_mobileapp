/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf.fonts.cmaps;

import com.itextpdf.text.error_messages.MessageLocalization;
import com.itextpdf.text.pdf.PRTokeniser;
import com.itextpdf.text.pdf.PdfContentParser;
import com.itextpdf.text.pdf.PdfName;
import com.itextpdf.text.pdf.PdfNumber;
import com.itextpdf.text.pdf.PdfObject;
import com.itextpdf.text.pdf.PdfString;
import com.itextpdf.text.pdf.fonts.cmaps.AbstractCMap;
import com.itextpdf.text.pdf.fonts.cmaps.CidLocation;
import java.util.ArrayList;

public class CMapParserEx {
    private static final PdfName CMAPNAME = new PdfName("CMapName");
    private static final String DEF = "def";
    private static final String ENDBFCHAR = "endbfchar";
    private static final String ENDBFRANGE = "endbfrange";
    private static final String ENDCIDCHAR = "endcidchar";
    private static final String ENDCIDRANGE = "endcidrange";
    private static final int MAXLEVEL = 10;
    private static final String USECMAP = "usecmap";

    private static void encodeSequence(int n2, byte[] arrby, char c2, ArrayList<char[]> arrc) {
        int n3 = n2 - 1;
        int n4 = 0;
        for (n2 = 0; n2 < n3; ++n2) {
            char[] arrc2 = arrc.get(n4);
            int n5 = arrby[n2] & 255;
            n4 = arrc2[n5];
            if (n4 != 0 && (n4 & 32768) == 0) {
                throw new RuntimeException(MessageLocalization.getComposedMessage("inconsistent.mapping", new Object[0]));
            }
            int n6 = n4;
            if (n4 == 0) {
                char c3;
                arrc.add(new char[256]);
                arrc2[n5] = c3 = (char)(32768 | arrc.size() - 1);
                n6 = c3;
            }
            n4 = n6 & 32767;
        }
        if (((arrc = arrc.get(n4))[n2 = arrby[n3] & 255] & 32768) == 0) {
            arrc[n2] = c2;
            return;
        }
        throw new RuntimeException(MessageLocalization.getComposedMessage("inconsistent.mapping", new Object[0]));
    }

    public static void parseCid(String string2, AbstractCMap abstractCMap, CidLocation cidLocation) {
        CMapParserEx.parseCid(string2, abstractCMap, cidLocation, 0);
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive exception aggregation
     */
    private static void parseCid(String var0, AbstractCMap var1_1, CidLocation var2_3, int var3_4) {
        block19 : {
            if (var3_4 >= 10) {
                return;
            }
            var0 = var2_3.getLocation((String)var0);
            var9_5 = new ArrayList<PdfObject>();
            var10_6 = new PdfContentParser((PRTokeniser)var0);
            var4_7 = 50;
            block10 : do lbl-1000: // 7 sources:
            {
                do {
                    var10_6.parse(var9_5);
                    if (var9_5.isEmpty()) ** GOTO lbl57
                    var11_12 = var9_5.get(var9_5.size() - 1).toString();
                    var6_9 = 0;
                    var5_8 = 0;
                    if (var3_4 != 0 || var9_5.size() != 3 || !var11_12.equals("def")) break;
                    var11_12 = var9_5.get(0);
                    if (PdfName.REGISTRY.equals(var11_12)) {
                        var1_1.setRegistry(var9_5.get(1).toString());
                        continue;
                    }
                    if (PdfName.ORDERING.equals(var11_12)) {
                        var1_1.setOrdering(var9_5.get(1).toString());
                        continue;
                    }
                    if (CMapParserEx.CMAPNAME.equals(var11_12)) {
                        var1_1.setName(var9_5.get(1).toString());
                        continue;
                    }
                    var8_11 = PdfName.SUPPLEMENT.equals(var11_12);
                    if (!var8_11) continue;
                    var1_1.setSupplement(((PdfNumber)var9_5.get(1)).intValue());
                    continue;
                    break;
                } while (true);
                if (!var11_12.equals("endcidchar") && !var11_12.equals("endbfchar") || var9_5.size() < 3) ** GOTO lbl40
                var6_9 = var9_5.size();
lbl35: // 2 sources:
                if (var5_8 >= var6_9 - 2) continue;
                if (!(var9_5.get(var5_8) instanceof PdfString)) break;
                var1_1.addChar((PdfString)var9_5.get(var5_8), var9_5.get(var5_8 + 1));
                break;
lbl40: // 1 sources:
                if (!var11_12.equals("endcidrange") && !var11_12.equals("endbfrange") || var9_5.size() < 4) ** GOTO lbl51
                var7_10 = var9_5.size();
                var5_8 = var6_9;
lbl43: // 2 sources:
                if (var5_8 >= var7_10 - 3) continue;
                if (!(var9_5.get(var5_8) instanceof PdfString)) break block19;
                var6_9 = var5_8 + 1;
                try {
                    if (!(var9_5.get(var6_9) instanceof PdfString)) break block19;
                    var1_1.addRange((PdfString)var9_5.get(var5_8), (PdfString)var9_5.get(var6_9), var9_5.get(var5_8 + 2));
                    break block19;
lbl51: // 1 sources:
                    if (!var11_12.equals("usecmap") || var9_5.size() != 2 || !(var9_5.get(0) instanceof PdfName)) ** GOTO lbl-1000
                    CMapParserEx.parseCid(PdfName.decodeName(var9_5.get(0).toString()), var1_1, var2_3, var3_4 + 1);
                }
                catch (Throwable var1_2) {
                    var0.close();
                    throw var1_2;
                }
lbl54: // 1 sources:
                do {
                    var4_7 = var5_8 = var4_7 - 1;
                    if (var5_8 >= 0) continue block10;
lbl57: // 2 sources:
                    var0.close();
                    return;
                    break;
                } while (true);
                {
                    catch (Exception var11_13) {
                        ** continue;
                    }
                    catch (Exception var11_14) {
                        continue;
                    }
                }
                break;
            } while (true);
            var5_8 += 2;
            ** GOTO lbl35
        }
        var5_8 += 3;
        ** GOTO lbl43
    }
}

