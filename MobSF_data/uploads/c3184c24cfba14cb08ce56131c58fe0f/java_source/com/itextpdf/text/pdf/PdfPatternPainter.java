/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf;

import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Image;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.error_messages.MessageLocalization;
import com.itextpdf.text.pdf.PageResources;
import com.itextpdf.text.pdf.PdfArray;
import com.itextpdf.text.pdf.PdfContentByte;
import com.itextpdf.text.pdf.PdfDocument;
import com.itextpdf.text.pdf.PdfIndirectReference;
import com.itextpdf.text.pdf.PdfPattern;
import com.itextpdf.text.pdf.PdfSpotColor;
import com.itextpdf.text.pdf.PdfTemplate;
import com.itextpdf.text.pdf.PdfWriter;

public final class PdfPatternPainter
extends PdfTemplate {
    BaseColor defaultColor;
    boolean stencil = false;
    float xstep;
    float ystep;

    private PdfPatternPainter() {
        this.type = 3;
    }

    PdfPatternPainter(PdfWriter pdfWriter) {
        super(pdfWriter);
        this.type = 3;
    }

    PdfPatternPainter(PdfWriter pdfWriter, BaseColor baseColor) {
        this(pdfWriter);
        this.stencil = true;
        if (baseColor == null) {
            this.defaultColor = BaseColor.GRAY;
            return;
        }
        this.defaultColor = baseColor;
    }

    @Override
    public void addImage(Image image, float f2, float f3, float f4, float f5, float f6, float f7) {
        if (this.stencil && !image.isMask()) {
            this.checkNoColor();
        }
        super.addImage(image, f2, f3, f4, f5, f6, f7);
    }

    void checkNoColor() {
        if (!this.stencil) {
            return;
        }
        throw new RuntimeException(MessageLocalization.getComposedMessage("colors.are.not.allowed.in.uncolored.tile.patterns", new Object[0]));
    }

    public BaseColor getDefaultColor() {
        return this.defaultColor;
    }

    @Override
    public PdfContentByte getDuplicate() {
        PdfPatternPainter pdfPatternPainter = new PdfPatternPainter();
        pdfPatternPainter.writer = this.writer;
        pdfPatternPainter.pdf = this.pdf;
        pdfPatternPainter.thisReference = this.thisReference;
        pdfPatternPainter.pageResources = this.pageResources;
        pdfPatternPainter.bBox = new Rectangle(this.bBox);
        pdfPatternPainter.xstep = this.xstep;
        pdfPatternPainter.ystep = this.ystep;
        pdfPatternPainter.matrix = this.matrix;
        pdfPatternPainter.stencil = this.stencil;
        pdfPatternPainter.defaultColor = this.defaultColor;
        return pdfPatternPainter;
    }

    public PdfPattern getPattern() {
        return new PdfPattern(this);
    }

    public PdfPattern getPattern(int n2) {
        return new PdfPattern(this, n2);
    }

    public float getXStep() {
        return this.xstep;
    }

    public float getYStep() {
        return this.ystep;
    }

    public boolean isStencil() {
        return this.stencil;
    }

    @Override
    public void resetCMYKColorFill() {
        this.checkNoColor();
        super.resetCMYKColorFill();
    }

    @Override
    public void resetCMYKColorStroke() {
        this.checkNoColor();
        super.resetCMYKColorStroke();
    }

    @Override
    public void resetGrayFill() {
        this.checkNoColor();
        super.resetGrayFill();
    }

    @Override
    public void resetGrayStroke() {
        this.checkNoColor();
        super.resetGrayStroke();
    }

    @Override
    public void resetRGBColorFill() {
        this.checkNoColor();
        super.resetRGBColorFill();
    }

    @Override
    public void resetRGBColorStroke() {
        this.checkNoColor();
        super.resetRGBColorStroke();
    }

    @Override
    public void setCMYKColorFill(int n2, int n3, int n4, int n5) {
        this.checkNoColor();
        super.setCMYKColorFill(n2, n3, n4, n5);
    }

    @Override
    public void setCMYKColorFillF(float f2, float f3, float f4, float f5) {
        this.checkNoColor();
        super.setCMYKColorFillF(f2, f3, f4, f5);
    }

    @Override
    public void setCMYKColorStroke(int n2, int n3, int n4, int n5) {
        this.checkNoColor();
        super.setCMYKColorStroke(n2, n3, n4, n5);
    }

    @Override
    public void setCMYKColorStrokeF(float f2, float f3, float f4, float f5) {
        this.checkNoColor();
        super.setCMYKColorStrokeF(f2, f3, f4, f5);
    }

    @Override
    public void setColorFill(BaseColor baseColor) {
        this.checkNoColor();
        super.setColorFill(baseColor);
    }

    @Override
    public void setColorFill(PdfSpotColor pdfSpotColor, float f2) {
        this.checkNoColor();
        super.setColorFill(pdfSpotColor, f2);
    }

    @Override
    public void setColorStroke(BaseColor baseColor) {
        this.checkNoColor();
        super.setColorStroke(baseColor);
    }

    @Override
    public void setColorStroke(PdfSpotColor pdfSpotColor, float f2) {
        this.checkNoColor();
        super.setColorStroke(pdfSpotColor, f2);
    }

    @Override
    public void setGrayFill(float f2) {
        this.checkNoColor();
        super.setGrayFill(f2);
    }

    @Override
    public void setGrayStroke(float f2) {
        this.checkNoColor();
        super.setGrayStroke(f2);
    }

    @Override
    public void setPatternFill(PdfPatternPainter pdfPatternPainter) {
        this.checkNoColor();
        super.setPatternFill(pdfPatternPainter);
    }

    @Override
    public void setPatternFill(PdfPatternPainter pdfPatternPainter, BaseColor baseColor, float f2) {
        this.checkNoColor();
        super.setPatternFill(pdfPatternPainter, baseColor, f2);
    }

    public void setPatternMatrix(float f2, float f3, float f4, float f5, float f6, float f7) {
        this.setMatrix(f2, f3, f4, f5, f6, f7);
    }

    @Override
    public void setPatternStroke(PdfPatternPainter pdfPatternPainter) {
        this.checkNoColor();
        super.setPatternStroke(pdfPatternPainter);
    }

    @Override
    public void setPatternStroke(PdfPatternPainter pdfPatternPainter, BaseColor baseColor, float f2) {
        this.checkNoColor();
        super.setPatternStroke(pdfPatternPainter, baseColor, f2);
    }

    @Override
    public void setRGBColorFill(int n2, int n3, int n4) {
        this.checkNoColor();
        super.setRGBColorFill(n2, n3, n4);
    }

    @Override
    public void setRGBColorFillF(float f2, float f3, float f4) {
        this.checkNoColor();
        super.setRGBColorFillF(f2, f3, f4);
    }

    @Override
    public void setRGBColorStroke(int n2, int n3, int n4) {
        this.checkNoColor();
        super.setRGBColorStroke(n2, n3, n4);
    }

    @Override
    public void setRGBColorStrokeF(float f2, float f3, float f4) {
        this.checkNoColor();
        super.setRGBColorStrokeF(f2, f3, f4);
    }

    public void setXStep(float f2) {
        this.xstep = f2;
    }

    public void setYStep(float f2) {
        this.ystep = f2;
    }
}

