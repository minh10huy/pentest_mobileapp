/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf.qrcode;

import com.itextpdf.text.pdf.qrcode.GF256;
import com.itextpdf.text.pdf.qrcode.GF256Poly;
import java.util.ArrayList;

public final class ReedSolomonEncoder {
    private final ArrayList<GF256Poly> cachedGenerators;
    private final GF256 field;

    public ReedSolomonEncoder(GF256 gF256) {
        if (GF256.QR_CODE_FIELD.equals(gF256)) {
            this.field = gF256;
            this.cachedGenerators = new ArrayList();
            this.cachedGenerators.add(new GF256Poly(gF256, new int[]{1}));
            return;
        }
        throw new IllegalArgumentException("Only QR Code is supported at this time");
    }

    private GF256Poly buildGenerator(int n2) {
        if (n2 >= this.cachedGenerators.size()) {
            GF256Poly gF256Poly = this.cachedGenerators.get(this.cachedGenerators.size() - 1);
            for (int i2 = this.cachedGenerators.size(); i2 <= n2; ++i2) {
                gF256Poly = gF256Poly.multiply(new GF256Poly(this.field, new int[]{1, this.field.exp(i2 - 1)}));
                this.cachedGenerators.add(gF256Poly);
            }
        }
        return this.cachedGenerators.get(n2);
    }

    public void encode(int[] arrn, int n2) {
        if (n2 != 0) {
            int n3 = arrn.length - n2;
            if (n3 > 0) {
                int[] arrn2 = this.buildGenerator(n2);
                int[] arrn3 = new int[n3];
                System.arraycopy(arrn, 0, arrn3, 0, n3);
                arrn2 = new GF256Poly(this.field, arrn3).multiplyByMonomial(n2, 1).divide((GF256Poly)arrn2)[1].getCoefficients();
                int n4 = n2 - arrn2.length;
                for (n2 = 0; n2 < n4; ++n2) {
                    arrn[n3 + n2] = 0;
                }
                System.arraycopy(arrn2, 0, arrn, n3 + n4, arrn2.length);
                return;
            }
            throw new IllegalArgumentException("No data bytes provided");
        }
        throw new IllegalArgumentException("No error correction bytes");
    }
}

