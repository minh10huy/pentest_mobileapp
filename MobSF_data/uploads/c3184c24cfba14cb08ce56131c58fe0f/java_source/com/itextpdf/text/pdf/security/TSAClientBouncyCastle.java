/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  org.spongycastle.asn1.ASN1ObjectIdentifier
 *  org.spongycastle.asn1.cmp.PKIFailureInfo
 *  org.spongycastle.tsp.TimeStampRequest
 *  org.spongycastle.tsp.TimeStampRequestGenerator
 *  org.spongycastle.tsp.TimeStampResponse
 *  org.spongycastle.tsp.TimeStampToken
 *  org.spongycastle.tsp.TimeStampTokenInfo
 */
package com.itextpdf.text.pdf.security;

import com.itextpdf.text.error_messages.MessageLocalization;
import com.itextpdf.text.log.Logger;
import com.itextpdf.text.log.LoggerFactory;
import com.itextpdf.text.pdf.codec.Base64;
import com.itextpdf.text.pdf.security.BouncyCastleDigest;
import com.itextpdf.text.pdf.security.DigestAlgorithms;
import com.itextpdf.text.pdf.security.TSAClient;
import com.itextpdf.text.pdf.security.TSAInfoBouncyCastle;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.math.BigInteger;
import java.net.URL;
import java.net.URLConnection;
import java.security.MessageDigest;
import java.util.Date;
import org.spongycastle.asn1.ASN1ObjectIdentifier;
import org.spongycastle.asn1.cmp.PKIFailureInfo;
import org.spongycastle.tsp.TimeStampRequest;
import org.spongycastle.tsp.TimeStampRequestGenerator;
import org.spongycastle.tsp.TimeStampResponse;
import org.spongycastle.tsp.TimeStampToken;
import org.spongycastle.tsp.TimeStampTokenInfo;

public class TSAClientBouncyCastle
implements TSAClient {
    public static final String DEFAULTHASHALGORITHM = "SHA-256";
    public static final int DEFAULTTOKENSIZE = 4096;
    private static final Logger LOGGER = LoggerFactory.getLogger(TSAClientBouncyCastle.class);
    protected String digestAlgorithm;
    protected int tokenSizeEstimate;
    protected TSAInfoBouncyCastle tsaInfo;
    protected String tsaPassword;
    protected String tsaURL;
    protected String tsaUsername;

    public TSAClientBouncyCastle(String string2) {
        this(string2, null, null, 4096, DEFAULTHASHALGORITHM);
    }

    public TSAClientBouncyCastle(String string2, String string3, String string4) {
        this(string2, string3, string4, 4096, DEFAULTHASHALGORITHM);
    }

    public TSAClientBouncyCastle(String string2, String string3, String string4, int n2, String string5) {
        this.tsaURL = string2;
        this.tsaUsername = string3;
        this.tsaPassword = string4;
        this.tokenSizeEstimate = n2;
        this.digestAlgorithm = string5;
    }

    @Override
    public MessageDigest getMessageDigest() {
        return new BouncyCastleDigest().getMessageDigest(this.digestAlgorithm);
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    protected byte[] getTSAResponse(byte[] object) {
        Object object2;
        int n2;
        byte[] arrby;
        Object object3;
        block4 : {
            arrby = new URL(this.tsaURL);
            try {
                object2 = arrby.openConnection();
                object2.setDoInput(true);
                object2.setDoOutput(true);
                object2.setUseCaches(false);
                object2.setRequestProperty("Content-Type", "application/timestamp-query");
                object2.setRequestProperty("Content-Transfer-Encoding", "binary");
                if (this.tsaUsername == null || this.tsaUsername.equals("")) break block4;
                arrby = new StringBuilder();
                arrby.append(this.tsaUsername);
                arrby.append(":");
                arrby.append(this.tsaPassword);
                arrby = arrby.toString();
                object3 = new StringBuilder();
                object3.append("Basic ");
                object3.append(Base64.encodeBytes(arrby.getBytes(), 8));
                object2.setRequestProperty("Authorization", object3.toString());
            }
            catch (IOException iOException) {
                throw new IOException(MessageLocalization.getComposedMessage("failed.to.get.tsa.response.from.1", this.tsaURL));
            }
        }
        arrby = object2.getOutputStream();
        arrby.write((byte[])object);
        arrby.close();
        object = object2.getInputStream();
        arrby = new ByteArrayOutputStream();
        object3 = new byte[1024];
        while ((n2 = object.read((byte[])object3, 0, ((byte[])object3).length)) >= 0) {
            arrby.write((byte[])object3, 0, n2);
        }
        arrby = arrby.toByteArray();
        object2 = object2.getContentEncoding();
        object = arrby;
        if (object2 == null) return object;
        object = arrby;
        if (!object2.equalsIgnoreCase("base64")) return object;
        return Base64.decode(new String(arrby));
    }

    @Override
    public byte[] getTimeStampToken(byte[] timeStampResponse) {
        TimeStampToken timeStampToken = new TimeStampToken();
        timeStampToken.setCertReq(true);
        Object object = BigInteger.valueOf(System.currentTimeMillis());
        timeStampToken = timeStampToken.generate(new ASN1ObjectIdentifier(DigestAlgorithms.getAllowedDigests(this.digestAlgorithm)), (byte[])timeStampResponse, (BigInteger)object);
        timeStampResponse = new TimeStampResponse(this.getTSAResponse(timeStampToken.getEncoded()));
        timeStampResponse.validate((TimeStampRequest)timeStampToken);
        timeStampToken = timeStampResponse.getFailInfo();
        int n2 = timeStampToken == null ? 0 : timeStampToken.intValue();
        if (n2 == 0) {
            timeStampToken = timeStampResponse.getTimeStampToken();
            if (timeStampToken != null) {
                timeStampResponse = timeStampToken.getTimeStampInfo();
                timeStampToken = timeStampToken.getEncoded();
                object = LOGGER;
                StringBuilder stringBuilder = new StringBuilder();
                stringBuilder.append("Timestamp generated: ");
                stringBuilder.append(timeStampResponse.getGenTime());
                object.info(stringBuilder.toString());
                if (this.tsaInfo != null) {
                    this.tsaInfo.inspectTimeStampTokenInfo((TimeStampTokenInfo)timeStampResponse);
                }
                this.tokenSizeEstimate = ((byte[])timeStampToken).length + 32;
                return timeStampToken;
            }
            throw new IOException(MessageLocalization.getComposedMessage("tsa.1.failed.to.return.time.stamp.token.2", this.tsaURL, timeStampResponse.getStatusString()));
        }
        throw new IOException(MessageLocalization.getComposedMessage("invalid.tsa.1.response.code.2", this.tsaURL, String.valueOf(n2)));
    }

    @Override
    public int getTokenSizeEstimate() {
        return this.tokenSizeEstimate;
    }

    public void setTSAInfo(TSAInfoBouncyCastle tSAInfoBouncyCastle) {
        this.tsaInfo = tSAInfoBouncyCastle;
    }
}

