/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  org.spongycastle.asn1.ASN1Encodable
 *  org.spongycastle.asn1.ASN1InputStream
 *  org.spongycastle.asn1.ASN1ObjectIdentifier
 *  org.spongycastle.asn1.ASN1OctetString
 *  org.spongycastle.asn1.ASN1Primitive
 *  org.spongycastle.asn1.ASN1Sequence
 *  org.spongycastle.asn1.ASN1TaggedObject
 *  org.spongycastle.asn1.DERIA5String
 *  org.spongycastle.asn1.DEROctetString
 *  org.spongycastle.asn1.x509.CRLDistPoint
 *  org.spongycastle.asn1.x509.DistributionPoint
 *  org.spongycastle.asn1.x509.DistributionPointName
 *  org.spongycastle.asn1.x509.Extension
 *  org.spongycastle.asn1.x509.GeneralName
 *  org.spongycastle.asn1.x509.GeneralNames
 */
package com.itextpdf.text.pdf.security;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.security.cert.CRL;
import java.security.cert.CertificateFactory;
import java.security.cert.X509Certificate;
import org.spongycastle.asn1.ASN1Encodable;
import org.spongycastle.asn1.ASN1InputStream;
import org.spongycastle.asn1.ASN1ObjectIdentifier;
import org.spongycastle.asn1.ASN1OctetString;
import org.spongycastle.asn1.ASN1Primitive;
import org.spongycastle.asn1.ASN1Sequence;
import org.spongycastle.asn1.ASN1TaggedObject;
import org.spongycastle.asn1.DERIA5String;
import org.spongycastle.asn1.DEROctetString;
import org.spongycastle.asn1.x509.CRLDistPoint;
import org.spongycastle.asn1.x509.DistributionPoint;
import org.spongycastle.asn1.x509.DistributionPointName;
import org.spongycastle.asn1.x509.Extension;
import org.spongycastle.asn1.x509.GeneralName;
import org.spongycastle.asn1.x509.GeneralNames;

public class CertificateUtil {
    public static CRL getCRL(String object) {
        if (object == null) {
            return null;
        }
        object = new URL((String)object).openStream();
        return CertificateFactory.getInstance("X.509").generateCRL((InputStream)object);
    }

    public static CRL getCRL(X509Certificate x509Certificate) {
        return CertificateUtil.getCRL(CertificateUtil.getCRLURL(x509Certificate));
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    public static String getCRLURL(X509Certificate arrdistributionPoint) {
        try {
            arrdistributionPoint = CertificateUtil.getExtensionValue((X509Certificate)arrdistributionPoint, Extension.cRLDistributionPoints.getId());
        }
        catch (IOException iOException) {
            return null;
        }
        if (arrdistributionPoint == null) {
            return null;
        }
        arrdistributionPoint = CRLDistPoint.getInstance((Object)arrdistributionPoint).getDistributionPoints();
        int n2 = arrdistributionPoint.length;
        int n3 = 0;
        while (n3 < n2) {
            GeneralName[] arrgeneralName = arrdistributionPoint[n3].getDistributionPoint();
            if (arrgeneralName.getType() == 0) {
                for (GeneralName generalName : ((GeneralNames)arrgeneralName.getName()).getNames()) {
                    if (generalName.getTagNo() == 6) return DERIA5String.getInstance((ASN1TaggedObject)((ASN1TaggedObject)generalName.toASN1Primitive()), (boolean)false).getString();
                }
            }
            ++n3;
        }
        return null;
    }

    private static ASN1Primitive getExtensionValue(X509Certificate arrby, String string2) {
        if ((arrby = arrby.getExtensionValue(string2)) == null) {
            return null;
        }
        return new ASN1InputStream((InputStream)new ByteArrayInputStream(((ASN1OctetString)new ASN1InputStream((InputStream)new ByteArrayInputStream(arrby)).readObject()).getOctets())).readObject();
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    public static String getOCSPURL(X509Certificate object) {
        int n2;
        block6 : {
            object = CertificateUtil.getExtensionValue((X509Certificate)object, Extension.authorityInfoAccess.getId());
            if (object != null) break block6;
            return null;
        }
        try {
            object = (ASN1Sequence)object;
            n2 = 0;
        }
        catch (IOException iOException) {
            return null;
        }
        do {
            if (n2 >= object.size()) return null;
            Object object2 = (ASN1Sequence)object.getObjectAt(n2);
            if (object2.size() == 2 && object2.getObjectAt(0) instanceof ASN1ObjectIdentifier && "1.3.6.1.5.5.7.48.1".equals(((ASN1ObjectIdentifier)object2.getObjectAt(0)).getId())) {
                object2 = CertificateUtil.getStringFromGeneralName((ASN1Primitive)object2.getObjectAt(1));
                object = object2;
                if (object2 != null) return object;
                return "";
            }
            ++n2;
            continue;
            break;
        } while (true);
    }

    private static String getStringFromGeneralName(ASN1Primitive aSN1Primitive) {
        return new String(ASN1OctetString.getInstance((ASN1TaggedObject)((ASN1TaggedObject)aSN1Primitive), (boolean)false).getOctets(), "ISO-8859-1");
    }

    public static String getTSAURL(X509Certificate object) {
        if ((object = object.getExtensionValue("1.2.840.113583.1.1.9.1")) == null) {
            return null;
        }
        try {
            object = CertificateUtil.getStringFromGeneralName(ASN1Sequence.getInstance((Object)ASN1Primitive.fromByteArray((byte[])((DEROctetString)ASN1Primitive.fromByteArray((byte[])object)).getOctets())).getObjectAt(1).toASN1Primitive());
            return object;
        }
        catch (IOException iOException) {
            return null;
        }
    }
}

