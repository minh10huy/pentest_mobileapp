/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf.security;

import com.itextpdf.text.Rectangle;
import com.itextpdf.text.pdf.PdfDeveloperExtension;
import com.itextpdf.text.pdf.PdfDictionary;
import com.itextpdf.text.pdf.PdfName;
import com.itextpdf.text.pdf.PdfObject;
import com.itextpdf.text.pdf.PdfSignature;
import com.itextpdf.text.pdf.PdfSignatureAppearance;
import com.itextpdf.text.pdf.PdfString;
import com.itextpdf.text.pdf.security.TSAClient;
import java.io.IOException;
import java.io.InputStream;
import java.security.GeneralSecurityException;
import java.security.MessageDigest;
import java.util.HashMap;

public class LtvTimestamp {
    public static void timestamp(PdfSignatureAppearance pdfSignatureAppearance, TSAClient arrby, String object) {
        int n2;
        int n3 = arrby.getTokenSizeEstimate();
        pdfSignatureAppearance.addDeveloperExtension(PdfDeveloperExtension.ESIC_1_7_EXTENSIONLEVEL5);
        pdfSignatureAppearance.setVisibleSignature(new Rectangle(0.0f, 0.0f, 0.0f, 0.0f), 1, (String)object);
        object = new PdfSignature(PdfName.ADOBE_PPKLITE, PdfName.ETSI_RFC3161);
        object.put(PdfName.TYPE, PdfName.DOCTIMESTAMP);
        pdfSignatureAppearance.setCryptoDictionary((PdfDictionary)object);
        object = new HashMap<PdfName, Integer>();
        object.put(PdfName.CONTENTS, new Integer(n3 * 2 + 2));
        pdfSignatureAppearance.preClose((HashMap<PdfName, Integer>)object);
        object = pdfSignatureAppearance.getRangeStream();
        MessageDigest messageDigest = arrby.getMessageDigest();
        byte[] arrby2 = new byte[4096];
        while ((n2 = object.read(arrby2)) > 0) {
            messageDigest.update(arrby2, 0, n2);
        }
        object = messageDigest.digest();
        try {
            object = arrby.getTimeStampToken((byte[])object);
        }
        catch (Exception exception) {
            throw new GeneralSecurityException(exception);
        }
        if (n3 + 2 >= ((byte[])object).length) {
            arrby = new byte[n3];
            System.arraycopy(object, 0, arrby, 0, ((byte[])object).length);
            object = new PdfDictionary();
            object.put(PdfName.CONTENTS, new PdfString(arrby).setHexWriting(true));
            pdfSignatureAppearance.close((PdfDictionary)object);
            return;
        }
        throw new IOException("Not enough space");
    }
}

