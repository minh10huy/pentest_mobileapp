/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf;

import com.itextpdf.text.Rectangle;
import com.itextpdf.text.error_messages.MessageLocalization;
import com.itextpdf.text.pdf.PRStream;
import com.itextpdf.text.pdf.PdfArray;
import com.itextpdf.text.pdf.PdfDictionary;
import com.itextpdf.text.pdf.PdfImportedPage;
import com.itextpdf.text.pdf.PdfIndirectObject;
import com.itextpdf.text.pdf.PdfIndirectReference;
import com.itextpdf.text.pdf.PdfLiteral;
import com.itextpdf.text.pdf.PdfName;
import com.itextpdf.text.pdf.PdfNumber;
import com.itextpdf.text.pdf.PdfObject;
import com.itextpdf.text.pdf.PdfReader;
import com.itextpdf.text.pdf.PdfRectangle;
import com.itextpdf.text.pdf.PdfStream;
import com.itextpdf.text.pdf.PdfWriter;
import com.itextpdf.text.pdf.RandomAccessFileOrArray;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;

class PdfReaderInstance {
    static final PdfLiteral IDENTITYMATRIX = new PdfLiteral("[1 0 0 1 0 0]");
    static final PdfNumber ONE = new PdfNumber(1);
    RandomAccessFileOrArray file;
    HashMap<Integer, PdfImportedPage> importedPages = new HashMap();
    int[] myXref;
    ArrayList<Integer> nextRound = new ArrayList();
    PdfReader reader;
    HashSet<Integer> visited = new HashSet();
    PdfWriter writer;

    PdfReaderInstance(PdfReader pdfReader, PdfWriter pdfWriter) {
        this.reader = pdfReader;
        this.writer = pdfWriter;
        this.file = pdfReader.getSafeFile();
        this.myXref = new int[pdfReader.getXrefSize()];
    }

    PdfStream getFormXObject(int n2, int n3) {
        Object object;
        Object object2 = this.reader.getPageNRelease(n2);
        PdfObject pdfObject = PdfReader.getPdfObjectRelease(object2.get(PdfName.CONTENTS));
        PdfDictionary pdfDictionary = new PdfDictionary();
        if (pdfObject != null) {
            if (pdfObject.isStream()) {
                pdfDictionary.putAll((PRStream)pdfObject);
                object = null;
            } else {
                object = this.reader.getPageContent(n2, this.file);
            }
        } else {
            object = new byte[]{};
        }
        pdfDictionary.put(PdfName.RESOURCES, PdfReader.getPdfObjectRelease(object2.get(PdfName.RESOURCES)));
        pdfDictionary.put(PdfName.TYPE, PdfName.XOBJECT);
        pdfDictionary.put(PdfName.SUBTYPE, PdfName.FORM);
        object2 = this.importedPages.get(n2);
        pdfDictionary.put(PdfName.BBOX, new PdfRectangle(object2.getBoundingBox()));
        object2 = object2.getMatrix();
        if (object2 == null) {
            pdfDictionary.put(PdfName.MATRIX, IDENTITYMATRIX);
        } else {
            pdfDictionary.put(PdfName.MATRIX, (PdfObject)object2);
        }
        pdfDictionary.put(PdfName.FORMTYPE, ONE);
        if (object == null) {
            return new PRStream((PRStream)pdfObject, pdfDictionary);
        }
        object = new PRStream(this.reader, (byte[])object, n3);
        object.putAll(pdfDictionary);
        return object;
    }

    PdfImportedPage getImportedPage(int n2) {
        if (this.reader.isOpenedWithFullPermissions()) {
            if (n2 >= 1 && n2 <= this.reader.getNumberOfPages()) {
                PdfImportedPage pdfImportedPage;
                Integer n3 = n2;
                PdfImportedPage pdfImportedPage2 = pdfImportedPage = this.importedPages.get(n3);
                if (pdfImportedPage == null) {
                    pdfImportedPage2 = new PdfImportedPage(this, this.writer, n2);
                    this.importedPages.put(n3, pdfImportedPage2);
                }
                return pdfImportedPage2;
            }
            throw new IllegalArgumentException(MessageLocalization.getComposedMessage("invalid.page.number.1", n2));
        }
        throw new IllegalArgumentException(MessageLocalization.getComposedMessage("pdfreader.not.opened.with.owner.password", new Object[0]));
    }

    int getNewObjectNumber(int n2, int n3) {
        if (this.myXref[n2] == 0) {
            this.myXref[n2] = this.writer.getIndirectReferenceNumber();
            this.nextRound.add(n2);
        }
        return this.myXref[n2];
    }

    PdfReader getReader() {
        return this.reader;
    }

    RandomAccessFileOrArray getReaderFile() {
        return this.file;
    }

    PdfObject getResources(int n2) {
        return PdfReader.getPdfObjectRelease(this.reader.getPageNRelease(n2).get(PdfName.RESOURCES));
    }

    public void writeAllPages() {
        try {
            this.file.reOpen();
            for (PdfImportedPage pdfImportedPage : this.importedPages.values()) {
                if (!pdfImportedPage.isToCopy()) continue;
                this.writer.addToBody((PdfObject)pdfImportedPage.getFormXObject(this.writer.getCompressionLevel()), pdfImportedPage.getIndirectReference());
                pdfImportedPage.setCopied();
            }
            this.writeAllVisited();
            return;
        }
        finally {
            this.file.close();
        }
    }

    void writeAllVisited() {
        while (!this.nextRound.isEmpty()) {
            ArrayList<Integer> arrayList = this.nextRound;
            this.nextRound = new ArrayList();
            for (int i2 = 0; i2 < arrayList.size(); ++i2) {
                Integer n2 = arrayList.get(i2);
                if (this.visited.contains(n2)) continue;
                this.visited.add(n2);
                int n3 = n2;
                this.writer.addToBody(this.reader.getPdfObjectRelease(n3), this.myXref[n3]);
            }
        }
    }
}

