/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf.internal;

import com.itextpdf.text.DocWriter;
import com.itextpdf.text.pdf.OutputStreamCounter;
import com.itextpdf.text.pdf.PdfDeveloperExtension;
import com.itextpdf.text.pdf.PdfDictionary;
import com.itextpdf.text.pdf.PdfName;
import com.itextpdf.text.pdf.PdfNumber;
import com.itextpdf.text.pdf.PdfObject;
import com.itextpdf.text.pdf.PdfWriter;
import com.itextpdf.text.pdf.interfaces.PdfVersion;

public class PdfVersionImp
implements PdfVersion {
    public static final byte[][] HEADER = new byte[][]{DocWriter.getISOBytes("\n"), DocWriter.getISOBytes("%PDF-"), DocWriter.getISOBytes("\n%\u00e2\u00e3\u00cf\u00d3\n")};
    protected boolean appendmode = false;
    protected PdfName catalog_version = null;
    protected PdfDictionary extensions = null;
    protected boolean headerWasWritten = false;
    protected char header_version = (char)52;
    protected char version = (char)52;

    @Override
    public void addDeveloperExtension(PdfDeveloperExtension pdfDeveloperExtension) {
        if (this.extensions == null) {
            this.extensions = new PdfDictionary();
        } else {
            PdfDictionary pdfDictionary = this.extensions.getAsDict(pdfDeveloperExtension.getPrefix());
            if (pdfDictionary != null) {
                if (pdfDeveloperExtension.getBaseversion().compareTo(pdfDictionary.getAsName(PdfName.BASEVERSION)) < 0) {
                    return;
                }
                if (pdfDeveloperExtension.getExtensionLevel() - pdfDictionary.getAsNumber(PdfName.EXTENSIONLEVEL).intValue() <= 0) {
                    return;
                }
            }
        }
        this.extensions.put(pdfDeveloperExtension.getPrefix(), pdfDeveloperExtension.getDeveloperExtensions());
    }

    public void addToCatalog(PdfDictionary pdfDictionary) {
        if (this.catalog_version != null) {
            pdfDictionary.put(PdfName.VERSION, this.catalog_version);
        }
        if (this.extensions != null) {
            pdfDictionary.put(PdfName.EXTENSIONS, this.extensions);
        }
    }

    public char getVersion() {
        return this.version;
    }

    public byte[] getVersionAsByteArray(char c2) {
        return DocWriter.getISOBytes(this.getVersionAsName(c2).toString().substring(1));
    }

    public PdfName getVersionAsName(char c2) {
        switch (c2) {
            default: {
                return PdfWriter.PDF_VERSION_1_4;
            }
            case '7': {
                return PdfWriter.PDF_VERSION_1_7;
            }
            case '6': {
                return PdfWriter.PDF_VERSION_1_6;
            }
            case '5': {
                return PdfWriter.PDF_VERSION_1_5;
            }
            case '4': {
                return PdfWriter.PDF_VERSION_1_4;
            }
            case '3': {
                return PdfWriter.PDF_VERSION_1_3;
            }
            case '2': 
        }
        return PdfWriter.PDF_VERSION_1_2;
    }

    public void setAppendmode(boolean bl2) {
        this.appendmode = bl2;
    }

    @Override
    public void setAtLeastPdfVersion(char c2) {
        if (c2 > this.header_version) {
            this.setPdfVersion(c2);
        }
    }

    @Override
    public void setPdfVersion(char c2) {
        this.version = c2;
        if (!this.headerWasWritten && !this.appendmode) {
            this.header_version = c2;
            return;
        }
        this.setPdfVersion(this.getVersionAsName(c2));
    }

    @Override
    public void setPdfVersion(PdfName pdfName) {
        if (this.catalog_version == null || this.catalog_version.compareTo(pdfName) < 0) {
            this.catalog_version = pdfName;
        }
    }

    public void writeHeader(OutputStreamCounter outputStreamCounter) {
        if (this.appendmode) {
            outputStreamCounter.write(HEADER[0]);
            return;
        }
        outputStreamCounter.write(HEADER[1]);
        outputStreamCounter.write(this.getVersionAsByteArray(this.header_version));
        outputStreamCounter.write(HEADER[2]);
        this.headerWasWritten = true;
    }
}

