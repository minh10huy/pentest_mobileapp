/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf;

import com.itextpdf.text.pdf.PdfArray;
import com.itextpdf.text.pdf.PdfIndirectReference;
import com.itextpdf.text.pdf.PdfName;
import com.itextpdf.text.pdf.PdfNull;
import com.itextpdf.text.pdf.PdfNumber;
import com.itextpdf.text.pdf.PdfObject;
import java.util.StringTokenizer;

public class PdfDestination
extends PdfArray {
    public static final int FIT = 1;
    public static final int FITB = 5;
    public static final int FITBH = 6;
    public static final int FITBV = 7;
    public static final int FITH = 2;
    public static final int FITR = 4;
    public static final int FITV = 3;
    public static final int XYZ = 0;
    private boolean status;

    /*
     * Enabled aggressive block sorting
     */
    public PdfDestination(int n2) {
        this.status = false;
        PdfName pdfName = n2 == 5 ? PdfName.FITB : PdfName.FIT;
        this.add(pdfName);
    }

    /*
     * Enabled aggressive block sorting
     */
    public PdfDestination(int n2, float f2) {
        PdfName pdfName;
        block5 : {
            block4 : {
                super(new PdfNumber(f2));
                this.status = false;
                if (n2 == 3) break block4;
                switch (n2) {
                    default: {
                        pdfName = PdfName.FITH;
                        break block5;
                    }
                    case 7: {
                        pdfName = PdfName.FITBV;
                        break block5;
                    }
                    case 6: 
                }
                pdfName = PdfName.FITBH;
                break block5;
            }
            pdfName = PdfName.FITV;
        }
        this.addFirst(pdfName);
    }

    /*
     * Enabled aggressive block sorting
     */
    public PdfDestination(int n2, float f2, float f3, float f4) {
        void var5_6;
        super(PdfName.XYZ);
        this.status = false;
        if (f2 < 0.0f) {
            this.add(PdfNull.PDFNULL);
        } else {
            this.add(new PdfNumber(f2));
        }
        if (f3 < 0.0f) {
            PdfNull pdfNull = PdfNull.PDFNULL;
        } else {
            PdfNumber pdfNumber = new PdfNumber(f3);
        }
        this.add((PdfObject)var5_6);
        this.add(new PdfNumber(f4));
    }

    public PdfDestination(int n2, float f2, float f3, float f4, float f5) {
        super(PdfName.FITR);
        this.status = false;
        this.add(new PdfNumber(f2));
        this.add(new PdfNumber(f3));
        this.add(new PdfNumber(f4));
        this.add(new PdfNumber(f5));
    }

    public PdfDestination(PdfDestination pdfDestination) {
        super(pdfDestination);
        this.status = false;
        this.status = pdfDestination.status;
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    public PdfDestination(String var1_1) {
        super();
        this.status = false;
        var2_3 = new StringTokenizer((String)var1_1);
        if (!var2_3.hasMoreTokens()) ** GOTO lbl8
        var1_1 = new PdfName(var2_3.nextToken());
        block2 : do {
            block5 : {
                this.add((PdfObject)var1_1);
lbl8: // 3 sources:
                while (var2_3.hasMoreTokens() != false) {
                    var1_1 = var2_3.nextToken();
                    if ("null".equals(var1_1)) {
                        var1_1 = new PdfNull();
                        continue block2;
                    }
                    try {
                        this.add(new PdfNumber((String)var1_1));
                        continue;
                    }
                    catch (RuntimeException var1_2) {}
                    break block5;
                }
                return;
            }
            var1_1 = new PdfNull();
        } while (true);
    }

    public boolean addPage(PdfIndirectReference pdfIndirectReference) {
        if (!this.status) {
            this.addFirst(pdfIndirectReference);
            this.status = true;
            return true;
        }
        return false;
    }

    public boolean hasPage() {
        return this.status;
    }
}

