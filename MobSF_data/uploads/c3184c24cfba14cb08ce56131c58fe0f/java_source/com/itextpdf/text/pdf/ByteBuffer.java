/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf;

import com.itextpdf.text.DocWriter;
import com.itextpdf.text.error_messages.MessageLocalization;
import com.itextpdf.text.pdf.PdfEncodings;
import java.io.OutputStream;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.util.Locale;

public class ByteBuffer
extends OutputStream {
    public static boolean HIGH_PRECISION = false;
    public static final byte ZERO = 48;
    private static byte[][] byteCache = new byte[byteCacheSize][];
    private static int byteCacheSize;
    private static final byte[] bytes;
    private static final char[] chars;
    private static final DecimalFormatSymbols dfs;
    protected byte[] buf;
    protected int count;

    static {
        chars = new char[]{'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'};
        bytes = new byte[]{48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 97, 98, 99, 100, 101, 102};
        HIGH_PRECISION = false;
        dfs = new DecimalFormatSymbols(Locale.US);
    }

    public ByteBuffer() {
        this(128);
    }

    public ByteBuffer(int n2) {
        int n3 = n2;
        if (n2 < 1) {
            n3 = 128;
        }
        this.buf = new byte[n3];
    }

    private static byte[] convertToBytes(int n2) {
        double d2 = n2;
        int n3 = (int)Math.floor(Math.log(d2) / Math.log(10.0));
        int n4 = n2 % 100;
        int n5 = n3;
        if (n4 != 0) {
            n5 = n3 + 2;
        }
        int n6 = n2 % 10;
        n3 = n5;
        if (n6 != 0) {
            n3 = n5 + 1;
        }
        n5 = n3++;
        if (n2 < 100) {
            n5 = n3;
            if (n2 < 10) {
                n5 = n3 + 1;
            }
        }
        byte[] arrby = new byte[--n5];
        int n7 = n5 - 1;
        n3 = 0;
        if (n2 < 100) {
            arrby[0] = 48;
        }
        n5 = n7;
        if (n6 != 0) {
            arrby[n7] = bytes[n6];
            n5 = n7 - 1;
        }
        if (n4 != 0) {
            arrby[n5] = bytes[n2 / 10 % 10];
            arrby[n5 - 1] = 46;
        }
        n7 = (int)Math.floor(Math.log(d2) / Math.log(10.0)) - 1;
        for (n5 = n3; n5 < n7; ++n5) {
            arrby[n5] = bytes[n2 / (int)Math.pow(10.0, n7 - n5 + 1) % 10];
        }
        return arrby;
    }

    public static void fillCache(int n2) {
        int n3 = 1;
        switch (n2) {
            default: {
                n2 = 1;
                break;
            }
            case 1: {
                n2 = 10;
                break;
            }
            case 0: {
                n2 = 100;
            }
        }
        while (n3 < byteCacheSize) {
            if (byteCache[n3] == null) {
                ByteBuffer.byteCache[n3] = ByteBuffer.convertToBytes(n3);
            }
            n3 += n2;
        }
    }

    public static String formatDouble(double d2) {
        return ByteBuffer.formatDouble(d2, null);
    }

    public static String formatDouble(double d2, ByteBuffer object) {
        boolean bl2;
        double d3 = d2;
        if (HIGH_PRECISION) {
            String string2 = new DecimalFormat("0.######", dfs).format(d3);
            if (object == null) {
                return string2;
            }
            object.append(string2);
            return null;
        }
        if (Math.abs(d2) < 1.5E-5) {
            if (object != null) {
                object.append((byte)48);
                return null;
            }
            return "0";
        }
        int n2 = 0;
        if (d3 < 0.0) {
            d3 = - d3;
            bl2 = true;
        } else {
            bl2 = false;
        }
        int n3 = 100000;
        if (d3 < 1.0) {
            d2 = d3 + 5.0E-6;
            if (d2 >= 1.0) {
                if (bl2) {
                    if (object != null) {
                        object.append((byte)45);
                        object.append((byte)49);
                        return null;
                    }
                    return "-1";
                }
                if (object != null) {
                    object.append((byte)49);
                    return null;
                }
                return "1";
            }
            if (object != null) {
                n3 = (int)(d2 * 100000.0);
                if (bl2) {
                    object.append((byte)45);
                }
                object.append((byte)48);
                object.append((byte)46);
                object.append((byte)(n3 / 10000 + 48));
                if (n3 % 10000 != 0) {
                    object.append((byte)(n3 / 1000 % 10 + 48));
                    if (n3 % 1000 != 0) {
                        object.append((byte)(n3 / 100 % 10 + 48));
                        if (n3 % 100 != 0) {
                            object.append((byte)(n3 / 10 % 10 + 48));
                            if ((n3 %= 10) != 0) {
                                object.append((byte)(n3 + 48));
                            }
                        }
                    }
                }
                return null;
            }
            int n4 = (int)(d2 * (double)100000);
            object = new StringBuilder();
            if (bl2) {
                object.append('-');
            }
            object.append("0.");
            while (n4 < (n3 /= 10)) {
                object.append('0');
            }
            object.append(n4);
            n3 = object.length() - 1;
            while (object.charAt(n3) == '0') {
                --n3;
            }
            object.setLength(n3 + 1);
            return object.toString();
        }
        if (d3 <= 32767.0) {
            int n5 = (int)((d3 + 0.005) * 100.0);
            if (n5 < byteCacheSize && byteCache[n5] != null) {
                if (object != null) {
                    if (bl2) {
                        object.append((byte)45);
                    }
                    object.append(byteCache[n5]);
                    return null;
                }
                String string3 = PdfEncodings.convertToString(byteCache[n5], null);
                object = string3;
                if (bl2) {
                    object = new StringBuilder();
                    object.append("-");
                    object.append(string3);
                    object = object.toString();
                }
                return object;
            }
            if (object != null) {
                if (n5 < byteCacheSize) {
                    n3 = n5 >= 1000000 ? 5 : (n5 >= 100000 ? 4 : (n5 >= 10000 ? 3 : (n5 >= 1000 ? 2 : (n5 >= 100 ? 1 : 0))));
                    int n6 = n5 % 100;
                    int n7 = n3;
                    if (n6 != 0) {
                        n7 = n3 + 2;
                    }
                    int n8 = n5 % 10;
                    n3 = n7;
                    if (n8 != 0) {
                        n3 = n7 + 1;
                    }
                    byte[] arrby = new byte[n3];
                    n7 = n2;
                    if (n5 >= 1000000) {
                        arrby[0] = bytes[n5 / 1000000];
                        n7 = 1;
                    }
                    n3 = n7;
                    if (n5 >= 100000) {
                        arrby[n7] = bytes[n5 / 100000 % 10];
                        n3 = n7 + 1;
                    }
                    n7 = n3;
                    if (n5 >= 10000) {
                        arrby[n3] = bytes[n5 / 10000 % 10];
                        n7 = n3 + 1;
                    }
                    if (n5 >= 1000) {
                        n3 = n7 + 1;
                        arrby[n7] = bytes[n5 / 1000 % 10];
                    } else {
                        n3 = n7;
                    }
                    n7 = n3;
                    if (n5 >= 100) {
                        arrby[n3] = bytes[n5 / 100 % 10];
                        n7 = n3 + 1;
                    }
                    if (n6 != 0) {
                        n3 = n7 + 1;
                        arrby[n7] = 46;
                        arrby[n3] = bytes[n5 / 10 % 10];
                        if (n8 != 0) {
                            arrby[n3 + 1] = bytes[n8];
                        }
                    }
                    ByteBuffer.byteCache[n5] = arrby;
                }
                if (bl2) {
                    object.append((byte)45);
                }
                if (n5 >= 1000000) {
                    object.append(bytes[n5 / 1000000]);
                }
                if (n5 >= 100000) {
                    object.append(bytes[n5 / 100000 % 10]);
                }
                if (n5 >= 10000) {
                    object.append(bytes[n5 / 10000 % 10]);
                }
                if (n5 >= 1000) {
                    object.append(bytes[n5 / 1000 % 10]);
                }
                if (n5 >= 100) {
                    object.append(bytes[n5 / 100 % 10]);
                }
                if (n5 % 100 != 0) {
                    object.append((byte)46);
                    object.append(bytes[n5 / 10 % 10]);
                    n3 = n5 % 10;
                    if (n3 != 0) {
                        object.append(bytes[n3]);
                    }
                }
                return null;
            }
            object = new StringBuilder();
            if (bl2) {
                object.append('-');
            }
            if (n5 >= 1000000) {
                object.append(chars[n5 / 1000000]);
            }
            if (n5 >= 100000) {
                object.append(chars[n5 / 100000 % 10]);
            }
            if (n5 >= 10000) {
                object.append(chars[n5 / 10000 % 10]);
            }
            if (n5 >= 1000) {
                object.append(chars[n5 / 1000 % 10]);
            }
            if (n5 >= 100) {
                object.append(chars[n5 / 100 % 10]);
            }
            if (n5 % 100 != 0) {
                object.append('.');
                object.append(chars[n5 / 10 % 10]);
                n3 = n5 % 10;
                if (n3 != 0) {
                    object.append(chars[n3]);
                }
            }
            return object.toString();
        }
        long l2 = (long)(d3 + 0.5);
        if (bl2) {
            object = new StringBuilder();
            object.append("-");
            object.append(Long.toString(l2));
            return object.toString();
        }
        return Long.toString(l2);
    }

    public static void setCacheSize(int n2) {
        int n3 = n2;
        if (n2 > 3276700) {
            n3 = 3276700;
        }
        if (n3 <= byteCacheSize) {
            return;
        }
        byte[][] arrarrby = new byte[n3][];
        System.arraycopy(byteCache, 0, arrarrby, 0, byteCacheSize);
        byteCache = arrarrby;
        byteCacheSize = n3;
    }

    public ByteBuffer append(byte by2) {
        return this.append_i(by2);
    }

    public ByteBuffer append(char c2) {
        return this.append_i(c2);
    }

    public ByteBuffer append(double d2) {
        this.append(ByteBuffer.formatDouble(d2, this));
        return this;
    }

    public ByteBuffer append(float f2) {
        return this.append((double)f2);
    }

    public ByteBuffer append(int n2) {
        return this.append((double)n2);
    }

    public ByteBuffer append(long l2) {
        return this.append(Long.toString(l2));
    }

    public ByteBuffer append(ByteBuffer byteBuffer) {
        return this.append(byteBuffer.buf, 0, byteBuffer.count);
    }

    public ByteBuffer append(String string2) {
        if (string2 != null) {
            return this.append(DocWriter.getISOBytes(string2));
        }
        return this;
    }

    public ByteBuffer append(byte[] arrby) {
        return this.append(arrby, 0, arrby.length);
    }

    public ByteBuffer append(byte[] arrby, int n2, int n3) {
        int n4;
        if (n2 >= 0 && n2 <= arrby.length && n3 >= 0 && (n4 = n2 + n3) <= arrby.length && n4 >= 0) {
            if (n3 == 0) {
                return this;
            }
            n4 = this.count + n3;
            if (n4 > this.buf.length) {
                byte[] arrby2 = new byte[Math.max(this.buf.length << 1, n4)];
                System.arraycopy(this.buf, 0, arrby2, 0, this.count);
                this.buf = arrby2;
            }
            System.arraycopy(arrby, n2, this.buf, this.count, n3);
            this.count = n4;
        }
        return this;
    }

    public ByteBuffer appendHex(byte by2) {
        this.append(bytes[by2 >> 4 & 15]);
        return this.append(bytes[by2 & 15]);
    }

    public ByteBuffer append_i(int n2) {
        int n3 = this.count + 1;
        if (n3 > this.buf.length) {
            byte[] arrby = new byte[Math.max(this.buf.length << 1, n3)];
            System.arraycopy(this.buf, 0, arrby, 0, this.count);
            this.buf = arrby;
        }
        this.buf[this.count] = (byte)n2;
        this.count = n3;
        return this;
    }

    public byte[] getBuffer() {
        return this.buf;
    }

    public void reset() {
        this.count = 0;
    }

    public void setSize(int n2) {
        if (n2 <= this.count && n2 >= 0) {
            this.count = n2;
            return;
        }
        throw new IndexOutOfBoundsException(MessageLocalization.getComposedMessage("the.new.size.must.be.positive.and.lt.eq.of.the.current.size", new Object[0]));
    }

    public int size() {
        return this.count;
    }

    public byte[] toByteArray() {
        byte[] arrby = new byte[this.count];
        System.arraycopy(this.buf, 0, arrby, 0, this.count);
        return arrby;
    }

    public String toString() {
        return new String(this.buf, 0, this.count);
    }

    public String toString(String string2) {
        return new String(this.buf, 0, this.count, string2);
    }

    @Override
    public void write(int n2) {
        this.append((byte)n2);
    }

    @Override
    public void write(byte[] arrby, int n2, int n3) {
        this.append(arrby, n2, n3);
    }

    public void writeTo(OutputStream outputStream) {
        outputStream.write(this.buf, 0, this.count);
    }
}

