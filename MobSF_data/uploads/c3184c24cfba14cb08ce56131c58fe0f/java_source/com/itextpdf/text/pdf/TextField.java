/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf;

import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chunk;
import com.itextpdf.text.Font;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.pdf.BaseField;
import com.itextpdf.text.pdf.BaseFont;
import com.itextpdf.text.pdf.ColumnText;
import com.itextpdf.text.pdf.FontSelector;
import com.itextpdf.text.pdf.GrayColor;
import com.itextpdf.text.pdf.PdfAnnotation;
import com.itextpdf.text.pdf.PdfAppearance;
import com.itextpdf.text.pdf.PdfArray;
import com.itextpdf.text.pdf.PdfBorderDictionary;
import com.itextpdf.text.pdf.PdfContentByte;
import com.itextpdf.text.pdf.PdfDashPattern;
import com.itextpdf.text.pdf.PdfFormField;
import com.itextpdf.text.pdf.PdfName;
import com.itextpdf.text.pdf.PdfNumber;
import com.itextpdf.text.pdf.PdfObject;
import com.itextpdf.text.pdf.PdfString;
import com.itextpdf.text.pdf.PdfTemplate;
import com.itextpdf.text.pdf.PdfWriter;
import java.io.Serializable;
import java.lang.reflect.Array;
import java.util.ArrayList;
import java.util.Collection;

public class TextField
extends BaseField {
    private String[] choiceExports;
    private ArrayList<Integer> choiceSelections = new ArrayList();
    private String[] choices;
    private String defaultText;
    private BaseFont extensionFont;
    private float extraMarginLeft;
    private float extraMarginTop;
    private ArrayList<BaseFont> substitutionFonts;
    private int topFirst;
    private int visibleTopChoice = -1;

    public TextField(PdfWriter pdfWriter, Rectangle rectangle, String string2) {
        super(pdfWriter, rectangle, string2);
    }

    private static void changeFontSize(Phrase phrase, float f2) {
        for (int i2 = 0; i2 < phrase.size(); ++i2) {
            ((Chunk)phrase.get(i2)).getFont().setSize(f2);
        }
    }

    private static boolean checkRTL(String arrc) {
        if (arrc != null) {
            if (arrc.length() == 0) {
                return false;
            }
            arrc = arrc.toCharArray();
            for (int i2 = 0; i2 < arrc.length; ++i2) {
                char c2 = arrc[i2];
                if (c2 < '\u0590' || c2 >= '\u0780') continue;
                return true;
            }
        }
        return false;
    }

    private Phrase composePhrase(String string2, BaseFont baseFont, BaseColor baseColor, float f2) {
        if (this.extensionFont == null && (this.substitutionFonts == null || this.substitutionFonts.isEmpty())) {
            return new Phrase(new Chunk(string2, new Font(baseFont, f2, 0, baseColor)));
        }
        FontSelector fontSelector = new FontSelector();
        fontSelector.addFont(new Font(baseFont, f2, 0, baseColor));
        if (this.extensionFont != null) {
            fontSelector.addFont(new Font(this.extensionFont, f2, 0, baseColor));
        }
        if (this.substitutionFonts != null) {
            for (int i2 = 0; i2 < this.substitutionFonts.size(); ++i2) {
                fontSelector.addFont(new Font(this.substitutionFonts.get(i2), f2, 0, baseColor));
            }
        }
        return fontSelector.process(string2);
    }

    private int getTopChoice() {
        int n2;
        Serializable serializable = this.choiceSelections;
        int n3 = n2 = 0;
        if (serializable != null) {
            if (this.choiceSelections.size() == 0) {
                return 0;
            }
            serializable = this.choiceSelections.get(0);
            if (serializable == null) {
                return 0;
            }
            n3 = n2;
            if (this.choices != null) {
                if (this.visibleTopChoice != -1) {
                    return this.visibleTopChoice;
                }
                n3 = Math.max(0, Math.min(serializable.intValue(), this.choices.length));
            }
        }
        return n3;
    }

    public static String obfuscatePassword(String string2) {
        char[] arrc = new char[string2.length()];
        for (int i2 = 0; i2 < string2.length(); ++i2) {
            arrc[i2] = 42;
        }
        return new String(arrc);
    }

    public static String removeCRLF(String arrc) {
        if (arrc.indexOf(10) < 0 && arrc.indexOf(13) < 0) {
            return arrc;
        }
        arrc = arrc.toCharArray();
        StringBuffer stringBuffer = new StringBuffer(arrc.length);
        int n2 = 0;
        while (n2 < arrc.length) {
            int n3;
            char c2 = arrc[n2];
            if (c2 == '\n') {
                stringBuffer.append(' ');
                n3 = n2;
            } else if (c2 == '\r') {
                stringBuffer.append(' ');
                n3 = n2;
                if (n2 < arrc.length - 1) {
                    int n4 = n2 + 1;
                    n3 = n2;
                    if (arrc[n4] == '\n') {
                        n3 = n4;
                    }
                }
            } else {
                stringBuffer.append(c2);
                n3 = n2;
            }
            n2 = n3 + 1;
        }
        return stringBuffer.toString();
    }

    /*
     * Enabled aggressive block sorting
     */
    private void writeMultipleValues(PdfFormField pdfFormField, String[][] arrstring) {
        PdfArray pdfArray = new PdfArray();
        PdfArray pdfArray2 = new PdfArray();
        int n2 = 0;
        do {
            block7 : {
                PdfString pdfString;
                block6 : {
                    int n3;
                    block5 : {
                        if (n2 >= this.choiceSelections.size()) {
                            pdfFormField.put(PdfName.V, pdfArray2);
                            pdfFormField.put(PdfName.I, pdfArray);
                            return;
                        }
                        n3 = this.choiceSelections.get(n2);
                        pdfArray.add(new PdfNumber(n3));
                        if (arrstring == null) break block5;
                        pdfString = new PdfString(arrstring[n3][0]);
                        break block6;
                    }
                    if (this.choices == null) break block7;
                    pdfString = new PdfString(this.choices[n3]);
                }
                pdfArray2.add(pdfString);
            }
            ++n2;
        } while (true);
    }

    public void addChoiceSelection(int n2) {
        if ((this.options & 2097152) != 0) {
            this.choiceSelections.add(n2);
        }
    }

    public PdfAppearance getAppearance() {
        PdfAppearance pdfAppearance = this.getBorderAppearance();
        pdfAppearance.beginVariableText();
        if (this.text != null && this.text.length() != 0) {
            int n2 = this.borderStyle != 2 && this.borderStyle != 3 ? 0 : 1;
            float f2 = this.box.getHeight() - this.borderWidth * 2.0f - this.extraMarginTop;
            float f3 = this.borderWidth;
            float f4 = f2;
            float f5 = f3;
            if (n2 != 0) {
                f4 = f2 - this.borderWidth * 2.0f;
                f5 = f3 * 2.0f;
            }
            float f6 = Math.max(f5, 1.0f);
            f2 = Math.min(f5, f6);
            pdfAppearance.saveState();
            f5 = this.box.getWidth();
            float f7 = f2 * 2.0f;
            pdfAppearance.rectangle(f2, f2, f5 - f7, this.box.getHeight() - f7);
            pdfAppearance.clip();
            pdfAppearance.newPath();
            Object object = (this.options & 8192) != 0 ? TextField.obfuscatePassword(this.text) : ((this.options & 4096) == 0 ? TextField.removeCRLF(this.text) : this.text);
            Object object2 = this.getRealFont();
            Object object3 = this.textColor == null ? GrayColor.GRAYBLACK : this.textColor;
            n2 = TextField.checkRTL((String)object) ? 2 : 1;
            f5 = this.fontSize;
            object3 = this.composePhrase((String)object, (BaseFont)object2, (BaseColor)object3, f5);
            if ((this.options & 4096) != 0) {
                f7 = this.box.getWidth();
                float f8 = this.extraMarginLeft;
                f2 = object2.getFontDescriptor(8, 1.0f) - object2.getFontDescriptor(6, 1.0f);
                object = new ColumnText(null);
                f3 = f5;
                if (f5 == 0.0f) {
                    f5 = f3 = f4 / f2;
                    if (f3 > 4.0f) {
                        f5 = f3;
                        if (f3 > 12.0f) {
                            f5 = 12.0f;
                        }
                        float f9 = Math.max((f5 - 4.0f) / 10.0f, 0.2f);
                        object.setSimpleColumn(0.0f, - f4, f7 - f6 * 4.0f - f8, 0.0f);
                        object.setAlignment(this.alignment);
                        object.setRunDirection(n2);
                        f3 = f5;
                        do {
                            f5 = f3;
                            if (f3 <= 4.0f) break;
                            object.setYLine(0.0f);
                            TextField.changeFontSize((Phrase)object3, f3);
                            object.setText((Phrase)object3);
                            object.setLeading(f2 * f3);
                            if ((object.go(true) & 2) == 0) {
                                f5 = f3;
                                break;
                            }
                            f3 -= f9;
                        } while (true);
                    }
                    f3 = f5;
                    if (f5 < 4.0f) {
                        f3 = 4.0f;
                    }
                }
                TextField.changeFontSize((Phrase)object3, f3);
                object.setCanvas(pdfAppearance);
                f5 = f2 * f3;
                f3 = object2.getFontDescriptor(8, f3);
                f2 = this.extraMarginLeft;
                f7 = f6 * 2.0f;
                object.setSimpleColumn(f2 + f7, -20000.0f, this.box.getWidth() - f7, f4 + f6 - f3 + f5);
                object.setLeading(f5);
                object.setAlignment(this.alignment);
                object.setRunDirection(n2);
                object.setText((Phrase)object3);
                object.go();
            } else {
                if (f5 == 0.0f) {
                    f3 = f4 / (object2.getFontDescriptor(7, 1.0f) - object2.getFontDescriptor(6, 1.0f));
                    TextField.changeFontSize((Phrase)object3, 1.0f);
                    f5 = ColumnText.getWidth((Phrase)object3, n2, 0);
                    if (f5 != 0.0f) {
                        f3 = Math.min(f3, (this.box.getWidth() - this.extraMarginLeft - f6 * 4.0f) / f5);
                    }
                    f5 = f3;
                    if (f3 < 4.0f) {
                        f5 = 4.0f;
                    }
                }
                TextField.changeFontSize((Phrase)object3, f5);
                f3 = f4 = (this.box.getHeight() - f7 - object2.getFontDescriptor(1, f5)) / 2.0f + f2;
                if (f4 < f2) {
                    f3 = f2;
                }
                f4 = f3;
                if (f3 - f2 < - object2.getFontDescriptor(3, f5)) {
                    f4 = Math.min(- object2.getFontDescriptor(3, f5) + f2, Math.max(f3, this.box.getHeight() - f2 - object2.getFontDescriptor(1, f5)));
                }
                if ((this.options & 16777216) != 0 && this.maxCharacterLength > 0) {
                    n2 = Math.min(this.maxCharacterLength, object.length());
                    n2 = this.alignment == 2 ? this.maxCharacterLength - n2 : (this.alignment == 1 ? (this.maxCharacterLength - n2) / 2 : 0);
                    f2 = (this.box.getWidth() - this.extraMarginLeft) / (float)this.maxCharacterLength;
                    f3 = f2 / 2.0f + (float)n2 * f2;
                    if (this.textColor == null) {
                        pdfAppearance.setGrayFill(0.0f);
                    } else {
                        pdfAppearance.setColorFill(this.textColor);
                    }
                    pdfAppearance.beginText();
                    for (n2 = 0; n2 < object3.size(); ++n2) {
                        object2 = (Chunk)object3.get(n2);
                        object = object2.getFont().getBaseFont();
                        pdfAppearance.setFontAndSize((BaseFont)object, f5);
                        object2 = object2.append("");
                        int n3 = 0;
                        while (n3 < object2.length()) {
                            int n4 = n3 + 1;
                            String string2 = object2.substring(n3, n4);
                            f6 = object.getWidthPoint(string2, f5);
                            pdfAppearance.setTextMatrix(this.extraMarginLeft + f3 - f6 / 2.0f, f4 - this.extraMarginTop);
                            pdfAppearance.showText(string2);
                            f3 += f2;
                            n3 = n4;
                        }
                    }
                    pdfAppearance.endText();
                } else {
                    switch (this.alignment) {
                        default: {
                            f5 = this.extraMarginLeft + f6 * 2.0f;
                            break;
                        }
                        case 2: {
                            f5 = this.extraMarginLeft + this.box.getWidth() - f6 * 2.0f;
                            break;
                        }
                        case 1: {
                            f5 = this.extraMarginLeft + this.box.getWidth() / 2.0f;
                            break;
                        }
                    }
                    ColumnText.showTextAligned(pdfAppearance, this.alignment, (Phrase)object3, f5, f4 - this.extraMarginTop, 0.0f, n2, 0);
                }
            }
            pdfAppearance.restoreState();
            pdfAppearance.endVariableText();
            return pdfAppearance;
        }
        pdfAppearance.endVariableText();
        return pdfAppearance;
    }

    public String[] getChoiceExports() {
        return this.choiceExports;
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Lifted jumps to return sites
     */
    protected PdfFormField getChoiceField(boolean var1_1) {
        block30 : {
            block31 : {
                block32 : {
                    block33 : {
                        this.options &= -16781313;
                        var7_3 = var6_2 = this.choices;
                        if (var6_2 == null) {
                            var7_3 = new String[]{};
                        }
                        var3_4 = this.getTopChoice();
                        if (((String[])var7_3).length > 0 && var3_4 >= 0) {
                            this.text = var7_3[var3_4];
                        }
                        if (this.text == null) {
                            this.text = "";
                        }
                        var9_5 = null;
                        if (this.choiceExports == null) {
                            if (var1_1) {
                                var6_2 = PdfFormField.createList(this.writer, (String[])var7_3, var3_4);
                            } else {
                                var6_2 = this.writer;
                                var5_7 = (262144 & this.options) != 0;
                                var6_2 = PdfFormField.createCombo((PdfWriter)var6_2, var5_7, (String[])var7_3, var3_4);
                            }
                            var8_6 = var9_5;
                        } else {
                            var8_6 = (String[][])Array.newInstance(String.class, new int[]{((String[])var7_3).length, 2});
                            for (var2_9 = 0; var2_9 < var8_6.length; ++var2_9) {
                                var6_2 = var8_6[var2_9];
                                var10_10 = var8_6[var2_9];
                                var10_10[1] = var11_11 = var7_3[var2_9];
                                var6_2[0] = var11_11;
                            }
                            var4_12 = Math.min(((String[])var7_3).length, this.choiceExports.length);
                            for (var2_9 = 0; var2_9 < var4_12; ++var2_9) {
                                if (this.choiceExports[var2_9] == null) continue;
                                var8_6[var2_9][0] = this.choiceExports[var2_9];
                            }
                            if (var1_1) {
                                var6_2 = PdfFormField.createList(this.writer, var8_6, var3_4);
                            } else {
                                var6_2 = this.writer;
                                var5_8 = (262144 & this.options) != 0;
                                var6_2 = PdfFormField.createCombo((PdfWriter)var6_2, var5_8, var8_6, var3_4);
                            }
                        }
                        var6_2.setWidget(this.box, PdfAnnotation.HIGHLIGHT_INVERT);
                        if (this.rotation != 0) {
                            var6_2.setMKRotation(this.rotation);
                        }
                        if (this.fieldName == null) break block30;
                        var6_2.setFieldName(this.fieldName);
                        if (((String[])var7_3).length <= 0) break block31;
                        if (var8_6 == null) break block32;
                        if (this.choiceSelections.size() >= 2) break block33;
                        var6_2.setValueAsString(var8_6[var3_4][0]);
                        var7_3 = var8_6[var3_4][0];
                        ** GOTO lbl56
                    }
                    this.writeMultipleValues((PdfFormField)var6_2, var8_6);
                    break block31;
                }
                if (this.choiceSelections.size() < 2) {
                    var6_2.setValueAsString(this.text);
                    var7_3 = this.text;
lbl56: // 2 sources:
                    var6_2.setDefaultValueAsString((String)var7_3);
                } else {
                    this.writeMultipleValues((PdfFormField)var6_2, var9_5);
                }
            }
            if ((this.options & 1) != 0) {
                var6_2.setFieldFlags(1);
            }
            if ((this.options & 2) != 0) {
                var6_2.setFieldFlags(2);
            }
            if ((this.options & 4194304) != 0) {
                var6_2.setFieldFlags(4194304);
            }
            if ((this.options & 2097152) != 0) {
                var6_2.setFieldFlags(2097152);
            }
        }
        var6_2.setBorderStyle(new PdfBorderDictionary(this.borderWidth, this.borderStyle, new PdfDashPattern(3.0f)));
        if (var1_1) {
            var8_6 = this.getListAppearance();
            var7_3 = var8_6;
            if (this.topFirst > 0) {
                var6_2.put(PdfName.TI, new PdfNumber(this.topFirst));
                var7_3 = var8_6;
            }
        } else {
            var7_3 = this.getAppearance();
        }
        var6_2.setAppearance(PdfAnnotation.APPEARANCE_NORMAL, (PdfTemplate)var7_3);
        var7_3 = (PdfAppearance)var7_3.getDuplicate();
        var7_3.setFontAndSize(this.getRealFont(), this.fontSize);
        if (this.textColor == null) {
            var7_3.setGrayFill(0.0f);
        } else {
            var7_3.setColorFill(this.textColor);
        }
        var6_2.setDefaultAppearanceString((PdfContentByte)var7_3);
        if (this.borderColor != null) {
            var6_2.setMKBorderColor(this.borderColor);
        }
        if (this.backgroundColor != null) {
            var6_2.setMKBackgroundColor(this.backgroundColor);
        }
        switch (this.visibility) {
            default: {
                var2_9 = 4;
                ** GOTO lbl99
            }
            case 3: {
                var2_9 = 36;
                ** GOTO lbl99
            }
            case 1: {
                var2_9 = 6;
lbl99: // 3 sources:
                var6_2.setFlags(var2_9);
                return var6_2;
            }
            case 2: 
        }
        return var6_2;
    }

    public int getChoiceSelection() {
        return this.getTopChoice();
    }

    public ArrayList<Integer> getChoiceSelections() {
        return this.choiceSelections;
    }

    public String[] getChoices() {
        return this.choices;
    }

    public PdfFormField getComboField() {
        return this.getChoiceField(false);
    }

    public String getDefaultText() {
        return this.defaultText;
    }

    public BaseFont getExtensionFont() {
        return this.extensionFont;
    }

    PdfAppearance getListAppearance() {
        PdfAppearance pdfAppearance = this.getBorderAppearance();
        if (this.choices != null) {
            int n2;
            if (this.choices.length == 0) {
                return pdfAppearance;
            }
            pdfAppearance.beginVariableText();
            int n3 = this.getTopChoice();
            BaseFont baseFont = this.getRealFont();
            float f2 = this.fontSize;
            if (f2 == 0.0f) {
                f2 = 12.0f;
            }
            int n4 = this.borderStyle != 2 && this.borderStyle != 3 ? 0 : 1;
            float f3 = this.box.getHeight() - this.borderWidth * 2.0f;
            float f4 = this.borderWidth;
            float f5 = f3;
            float f6 = f4;
            if (n4 != 0) {
                f5 = f3 - this.borderWidth * 2.0f;
                f6 = f4 * 2.0f;
            }
            f4 = baseFont.getFontDescriptor(8, f2) - baseFont.getFontDescriptor(6, f2);
            n4 = n2 = (int)(f5 / f4) + 1 + n3;
            if (n2 > this.choices.length) {
                n4 = this.choices.length;
            }
            this.topFirst = n3;
            pdfAppearance.saveState();
            float f7 = this.box.getWidth();
            f3 = f6 * 2.0f;
            pdfAppearance.rectangle(f6, f6, f7 - f3, this.box.getHeight() - f3);
            pdfAppearance.clip();
            pdfAppearance.newPath();
            BaseColor baseColor = this.textColor == null ? GrayColor.GRAYBLACK : this.textColor;
            pdfAppearance.setColorFill(new BaseColor(10, 36, 106));
            for (n2 = 0; n2 < this.choiceSelections.size(); ++n2) {
                int n5 = this.choiceSelections.get(n2);
                if (n5 < n3 || n5 > n4) continue;
                pdfAppearance.rectangle(f6, f6 + f5 - (float)(n5 - n3 + 1) * f4, this.box.getWidth() - f3, f4);
                pdfAppearance.fill();
            }
            f7 = baseFont.getFontDescriptor(8, f2);
            n2 = n3;
            f6 = f6 + f5 - f7;
            while (n2 < n4) {
                Object object = this.choices[n2];
                n3 = TextField.checkRTL((String)object) ? 2 : 1;
                String string2 = TextField.removeCRLF((String)object);
                object = this.choiceSelections.contains(n2) ? GrayColor.GRAYWHITE : baseColor;
                ColumnText.showTextAligned(pdfAppearance, 0, this.composePhrase(string2, baseFont, (BaseColor)object, f2), f3, f6, 0.0f, n3, 0);
                ++n2;
                f6 -= f4;
            }
            pdfAppearance.restoreState();
            pdfAppearance.endVariableText();
        }
        return pdfAppearance;
    }

    public PdfFormField getListField() {
        return this.getChoiceField(true);
    }

    public ArrayList<BaseFont> getSubstitutionFonts() {
        return this.substitutionFonts;
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Lifted jumps to return sites
     */
    public PdfFormField getTextField() {
        if (this.maxCharacterLength <= 0) {
            this.options &= -16777217;
        }
        if ((this.options & 16777216) != 0) {
            this.options &= -4097;
        }
        var2_1 = PdfFormField.createTextField(this.writer, false, false, this.maxCharacterLength);
        var2_1.setWidget(this.box, PdfAnnotation.HIGHLIGHT_INVERT);
        switch (this.alignment) {
            default: {
                ** break;
            }
            case 2: {
                var2_1.setQuadding(2);
                ** break;
            }
            case 1: 
        }
        var2_1.setQuadding(1);
lbl15: // 3 sources:
        if (this.rotation != 0) {
            var2_1.setMKRotation(this.rotation);
        }
        if (this.fieldName != null) {
            var2_1.setFieldName(this.fieldName);
            if (!"".equals(this.text)) {
                var2_1.setValueAsString(this.text);
            }
            if (this.defaultText != null) {
                var2_1.setDefaultValueAsString(this.defaultText);
            }
            if ((this.options & 1) != 0) {
                var2_1.setFieldFlags(1);
            }
            if ((this.options & 2) != 0) {
                var2_1.setFieldFlags(2);
            }
            if ((this.options & 4096) != 0) {
                var2_1.setFieldFlags(4096);
            }
            if ((this.options & 8388608) != 0) {
                var2_1.setFieldFlags(8388608);
            }
            if ((this.options & 8192) != 0) {
                var2_1.setFieldFlags(8192);
            }
            if ((this.options & 1048576) != 0) {
                var2_1.setFieldFlags(1048576);
            }
            if ((this.options & 4194304) != 0) {
                var2_1.setFieldFlags(4194304);
            }
            if ((this.options & 16777216) != 0) {
                var2_1.setFieldFlags(16777216);
            }
        }
        var2_1.setBorderStyle(new PdfBorderDictionary(this.borderWidth, this.borderStyle, new PdfDashPattern(3.0f)));
        var3_2 = this.getAppearance();
        var2_1.setAppearance(PdfAnnotation.APPEARANCE_NORMAL, var3_2);
        var3_2 = (PdfAppearance)var3_2.getDuplicate();
        var3_2.setFontAndSize(this.getRealFont(), this.fontSize);
        if (this.textColor == null) {
            var3_2.setGrayFill(0.0f);
        } else {
            var3_2.setColorFill(this.textColor);
        }
        var2_1.setDefaultAppearanceString(var3_2);
        if (this.borderColor != null) {
            var2_1.setMKBorderColor(this.borderColor);
        }
        if (this.backgroundColor != null) {
            var2_1.setMKBackgroundColor(this.backgroundColor);
        }
        switch (this.visibility) {
            default: {
                var1_3 = 4;
                ** GOTO lbl62
            }
            case 3: {
                var1_3 = 36;
                ** GOTO lbl62
            }
            case 1: {
                var1_3 = 6;
lbl62: // 3 sources:
                var2_1.setFlags(var1_3);
                return var2_1;
            }
            case 2: 
        }
        return var2_1;
    }

    int getTopFirst() {
        return this.topFirst;
    }

    public int getVisibleTopChoice() {
        return this.visibleTopChoice;
    }

    public void setChoiceExports(String[] arrstring) {
        this.choiceExports = arrstring;
    }

    public void setChoiceSelection(int n2) {
        this.choiceSelections = new ArrayList();
        this.choiceSelections.add(n2);
    }

    public void setChoiceSelections(ArrayList<Integer> arrayList) {
        if (arrayList != null) {
            this.choiceSelections = new ArrayList<Integer>(arrayList);
            if (this.choiceSelections.size() > 1 && (this.options & 2097152) == 0) {
                while (this.choiceSelections.size() > 1) {
                    this.choiceSelections.remove(1);
                }
            }
        } else {
            this.choiceSelections.clear();
        }
    }

    public void setChoices(String[] arrstring) {
        this.choices = arrstring;
    }

    public void setDefaultText(String string2) {
        this.defaultText = string2;
    }

    public void setExtensionFont(BaseFont baseFont) {
        this.extensionFont = baseFont;
    }

    public void setExtraMargin(float f2, float f3) {
        this.extraMarginLeft = f2;
        this.extraMarginTop = f3;
    }

    public void setSubstitutionFonts(ArrayList<BaseFont> arrayList) {
        this.substitutionFonts = arrayList;
    }

    public void setVisibleTopChoice(int n2) {
        if (n2 < 0) {
            return;
        }
        if (this.choices != null && n2 < this.choices.length) {
            this.visibleTopChoice = n2;
        }
    }
}

