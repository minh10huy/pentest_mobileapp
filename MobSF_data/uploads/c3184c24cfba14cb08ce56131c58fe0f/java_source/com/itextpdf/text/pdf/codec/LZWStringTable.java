/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf.codec;

import java.io.PrintStream;

public class LZWStringTable {
    private static final short HASHSIZE = 9973;
    private static final short HASHSTEP = 2039;
    private static final short HASH_FREE = -1;
    private static final int MAXBITS = 12;
    private static final int MAXSTR = 4096;
    private static final short NEXT_FIRST = -1;
    private static final int RES_CODES = 2;
    short numStrings_;
    byte[] strChr_ = new byte[4096];
    short[] strHsh_ = new short[9973];
    int[] strLen_ = new int[4096];
    short[] strNxt_ = new short[4096];

    public static int Hash(short s2, byte by2) {
        return ((s2 ^ (short)(by2 << 8)) & 65535) % 9973;
    }

    public int AddCharString(short s2, byte by2) {
        if (this.numStrings_ >= 4096) {
            return 65535;
        }
        int n2 = LZWStringTable.Hash(s2, by2);
        while (this.strHsh_[n2] != -1) {
            n2 = (n2 + 2039) % 9973;
        }
        this.strHsh_[n2] = this.numStrings_;
        this.strChr_[this.numStrings_] = by2;
        if (s2 == -1) {
            this.strNxt_[this.numStrings_] = -1;
            this.strLen_[this.numStrings_] = 1;
        } else {
            this.strNxt_[this.numStrings_] = s2;
            this.strLen_[this.numStrings_] = this.strLen_[s2] + 1;
        }
        n2 = this.numStrings_;
        this.numStrings_ = (short)(n2 + 1);
        return n2;
    }

    public void ClearTable(int n2) {
        int n3;
        int n4 = 0;
        this.numStrings_ = 0;
        for (n3 = 0; n3 < 9973; ++n3) {
            this.strHsh_[n3] = -1;
        }
        for (n3 = n4; n3 < (1 << n2) + 2; ++n3) {
            this.AddCharString((short)-1, (byte)n3);
        }
    }

    public short FindCharString(short s2, byte by2) {
        short s3;
        if (s2 == -1) {
            return (short)(by2 & 255);
        }
        int n2 = LZWStringTable.Hash(s2, by2);
        while ((s3 = this.strHsh_[n2]) != -1) {
            if (this.strNxt_[s3] == s2 && this.strChr_[s3] == by2) {
                return s3;
            }
            n2 = (n2 + 2039) % 9973;
        }
        return -1;
    }

    public void dump(PrintStream printStream) {
        for (int i2 = 258; i2 < this.numStrings_; ++i2) {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append(" strNxt_[");
            stringBuilder.append(i2);
            stringBuilder.append("] = ");
            stringBuilder.append(this.strNxt_[i2]);
            stringBuilder.append(" strChr_ ");
            stringBuilder.append(Integer.toHexString(this.strChr_[i2] & 255));
            stringBuilder.append(" strLen_ ");
            stringBuilder.append(Integer.toHexString(this.strLen_[i2]));
            printStream.println(stringBuilder.toString());
        }
    }

    public int expandCode(byte[] arrby, int n2, short s2, int n3) {
        int n4 = n3;
        if (n2 == -2) {
            n4 = n3;
            if (n3 == 1) {
                n4 = 0;
            }
        }
        if (s2 != -1) {
            if (n4 == this.strLen_[s2]) {
                return 0;
            }
            int n5 = this.strLen_[s2] - n4;
            n3 = n4 = arrby.length - n2;
            if (n4 > n5) {
                n3 = n5;
            }
            int n6 = n5 - n3;
            n4 = n2 + n3;
            while (n4 > n2 && s2 != -1) {
                int n7 = n4;
                if (--n6 < 0) {
                    n7 = n4 - 1;
                    arrby[n7] = this.strChr_[s2];
                }
                s2 = this.strNxt_[s2];
                n4 = n7;
            }
            if (n5 > n3) {
                return - n3;
            }
            return n3;
        }
        return 0;
    }
}

