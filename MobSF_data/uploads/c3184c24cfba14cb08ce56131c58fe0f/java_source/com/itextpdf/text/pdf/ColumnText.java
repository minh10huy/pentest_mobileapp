/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf;

import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chunk;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.ExceptionConverter;
import com.itextpdf.text.Font;
import com.itextpdf.text.Image;
import com.itextpdf.text.List;
import com.itextpdf.text.ListBody;
import com.itextpdf.text.ListItem;
import com.itextpdf.text.ListLabel;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.TabSettings;
import com.itextpdf.text.error_messages.MessageLocalization;
import com.itextpdf.text.log.Logger;
import com.itextpdf.text.log.LoggerFactory;
import com.itextpdf.text.pdf.BidiLine;
import com.itextpdf.text.pdf.FloatLayout;
import com.itextpdf.text.pdf.PdfAction;
import com.itextpdf.text.pdf.PdfChunk;
import com.itextpdf.text.pdf.PdfContentByte;
import com.itextpdf.text.pdf.PdfDocument;
import com.itextpdf.text.pdf.PdfFont;
import com.itextpdf.text.pdf.PdfLine;
import com.itextpdf.text.pdf.PdfName;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPRow;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfPTableBody;
import com.itextpdf.text.pdf.PdfPTableEvent;
import com.itextpdf.text.pdf.PdfPTableEventAfterSplit;
import com.itextpdf.text.pdf.PdfPTableEventSplit;
import com.itextpdf.text.pdf.PdfPTableFooter;
import com.itextpdf.text.pdf.PdfPTableHeader;
import com.itextpdf.text.pdf.PdfWriter;
import com.itextpdf.text.pdf.draw.DrawInterface;
import com.itextpdf.text.pdf.interfaces.IAccessibleElement;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Stack;

public class ColumnText {
    public static final int AR_COMPOSEDTASHKEEL = 4;
    public static final int AR_LIG = 8;
    public static final int AR_NOVOWEL = 1;
    public static final int DIGITS_AN2EN = 64;
    public static final int DIGITS_EN2AN = 32;
    public static final int DIGITS_EN2AN_INIT_AL = 128;
    public static final int DIGITS_EN2AN_INIT_LR = 96;
    public static final int DIGIT_TYPE_AN = 0;
    public static final int DIGIT_TYPE_AN_EXTENDED = 256;
    public static final float GLOBAL_SPACE_CHAR_RATIO = 0.0f;
    protected static final int LINE_STATUS_NOLINE = 2;
    protected static final int LINE_STATUS_OFFLIMITS = 1;
    protected static final int LINE_STATUS_OK = 0;
    public static final int NO_MORE_COLUMN = 2;
    public static final int NO_MORE_TEXT = 1;
    public static final int START_COLUMN = 0;
    private final Logger LOGGER = LoggerFactory.getLogger(ColumnText.class);
    private boolean adjustFirstLine = true;
    protected int alignment = 0;
    private int arabicOptions = 0;
    protected BidiLine bidiLine;
    protected PdfContentByte canvas;
    protected PdfContentByte[] canvases;
    protected boolean composite = false;
    protected ColumnText compositeColumn;
    protected LinkedList<Element> compositeElements;
    protected float currentLeading = 16.0f;
    protected float descender;
    protected float extraParagraphSpace = 0.0f;
    private float filledWidth;
    private float firstLineY;
    private boolean firstLineYDone = false;
    protected float fixedLeading = 16.0f;
    protected float followingIndent = 0.0f;
    private boolean ignoreSpacingBefore = true;
    protected float indent = 0.0f;
    private boolean inheritGraphicState = false;
    protected boolean isWordSplit;
    private boolean lastWasNewline = true;
    protected float lastX;
    protected ArrayList<float[]> leftWall;
    protected float leftX;
    protected int lineStatus;
    private int linesWritten;
    protected int listIdx = 0;
    protected float maxY;
    protected float minY;
    protected float multipliedLeading = 0.0f;
    protected boolean rectangularMode = false;
    protected float rectangularWidth = -1.0f;
    private boolean repeatFirstLineIndent = true;
    protected float rightIndent = 0.0f;
    protected ArrayList<float[]> rightWall;
    protected float rightX;
    protected int rowIdx = 0;
    protected int runDirection = 1;
    private float spaceCharRatio = 0.0f;
    private int splittedRow = -2;
    private boolean useAscender = false;
    protected Phrase waitPhrase;
    protected float yLine;

    public ColumnText(PdfContentByte pdfContentByte) {
        this.canvas = pdfContentByte;
    }

    private void addWaitingPhrase() {
        if (this.bidiLine == null && this.waitPhrase != null) {
            this.bidiLine = new BidiLine();
            for (Chunk chunk : this.waitPhrase.getChunks()) {
                this.bidiLine.addChunk(new PdfChunk(chunk, null, this.waitPhrase.getTabSettings()));
            }
            this.waitPhrase = null;
        }
    }

    public static ColumnText duplicate(ColumnText columnText) {
        ColumnText columnText2 = new ColumnText(null);
        columnText2.setACopy(columnText);
        return columnText2;
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive exception aggregation
     */
    public static float fitText(Font var0, String var1_2, Rectangle var2_3, float var3_4, int var4_5) {
        block12 : {
            block14 : {
                block13 : {
                    block15 : {
                        block11 : {
                            var13_6 = 0;
                            if (var3_4 > 0.0f) ** GOTO lbl17
                            var14_7 = var1_2.toCharArray();
                            var9_8 = 0;
                            var10_9 = 0;
                            var8_10 = 0;
lbl8: // 2 sources:
                            if (var9_8 >= ((char[])var14_7).length) break block11;
                            if (var14_7[var9_8] != '\n') break block13;
                            var12_12 = var8_10 + 1;
                            var11_11 = var10_9;
                            break block14;
                        }
                        var8_10 = Math.max(var10_9, var8_10);
                        var3_4 = Math.abs(var2_3.getHeight()) / (float)(var8_10 + 1) - 0.001f;
lbl17: // 2 sources:
                        var0.setSize(var3_4);
                        var14_7 = new Phrase(var1_2, var0);
                        var15_13 = new ColumnText(null);
                        var15_13.setSimpleColumn((Phrase)var14_7, var2_3.getLeft(), var2_3.getBottom(), var2_3.getRight(), var2_3.getTop(), var3_4, 0);
                        var15_13.setRunDirection(var4_5);
                        if ((var15_13.go(true) & 1) == 0) break block12;
                        return var3_4;
lbl24: // 2 sources:
                        if (var8_10 >= 50) break block15;
                        try {
                            var3_4 = (var6_15 + var5_14) / 2.0f;
                            var14_7 = new ColumnText(null);
                            var0.setSize(var3_4);
                            var14_7.setSimpleColumn(new Phrase(var1_2, var0), var2_3.getLeft(), var2_3.getBottom(), var2_3.getRight(), var2_3.getTop(), var3_4, 0);
                            var14_7.setRunDirection(var4_5);
                            var9_8 = var14_7.go(true);
                        }
                        catch (Exception var0_1) {
                            ** continue;
                        }
                        if ((var9_8 & 1) != 0) {
                            if (var5_14 - var6_15 < var3_4 * 0.1f) {
                                return var3_4;
                            }
                            var6_15 = var3_4;
                        } else {
                            var5_14 = var3_4;
                        }
                        ++var8_10;
                        ** GOTO lbl24
                    }
                    return var3_4;
lbl44: // 1 sources:
                    do {
                        throw new ExceptionConverter(var0_1);
                        break;
                    } while (true);
                }
                var11_11 = var10_9;
                var12_12 = var8_10;
                if (var14_7[var9_8] == '\r') {
                    var11_11 = var10_9 + 1;
                    var12_12 = var8_10;
                }
            }
            ++var9_8;
            var10_9 = var11_11;
            var8_10 = var12_12;
            ** GOTO lbl8
        }
        var6_15 = var3_4;
        var7_16 = 0.0f;
        var5_14 = var3_4;
        var8_10 = var13_6;
        var3_4 = var6_15;
        var6_15 = var7_16;
        ** GOTO lbl24
    }

    public static float getWidth(Phrase phrase) {
        return ColumnText.getWidth(phrase, 1, 0);
    }

    public static float getWidth(Phrase object, int n2, int n3) {
        ColumnText columnText = new ColumnText(null);
        columnText.addText((Phrase)object);
        columnText.addWaitingPhrase();
        object = columnText.bidiLine.processLine(0.0f, 20000.0f, 0, n2, n3, 0.0f, 0.0f, 0.0f);
        if (object == null) {
            return 0.0f;
        }
        return 20000.0f - object.widthLeft();
    }

    public static boolean hasMoreText(int n2) {
        if ((n2 & 1) == 0) {
            return true;
        }
        return false;
    }

    public static boolean isAllowedElement(Element element) {
        int n2 = element.type();
        if (n2 != 10 && n2 != 11 && n2 != 37 && n2 != 12 && n2 != 14 && n2 != 55) {
            if (n2 == 23) {
                return true;
            }
            if (element instanceof Image) {
                return true;
            }
            return false;
        }
        return true;
    }

    private static boolean isTagged(PdfContentByte pdfContentByte) {
        if (pdfContentByte != null && pdfContentByte.pdf != null && pdfContentByte.writer != null && pdfContentByte.writer.isTagged()) {
            return true;
        }
        return false;
    }

    public static void showTextAligned(PdfContentByte pdfContentByte, int n2, Phrase phrase, float f2, float f3, float f4) {
        ColumnText.showTextAligned(pdfContentByte, n2, phrase, f2, f3, f4, 1, 0);
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public static void showTextAligned(PdfContentByte pdfContentByte, int n2, Phrase phrase, float f2, float f3, float f4, int n3, int n4) {
        float f5;
        float f6;
        int n5;
        ColumnText columnText;
        block12 : {
            block11 : {
                block9 : {
                    block10 : {
                        n5 = 0;
                        if (n2 != 0 && n2 != 1 && n2 != 2) {
                            n2 = 0;
                        }
                        pdfContentByte.saveState();
                        columnText = new ColumnText(pdfContentByte);
                        if (n2 == 0) break block9;
                        if (n2 == 2) break block10;
                        f6 = -20000.0f;
                        break block11;
                    }
                    f6 = -20000.0f;
                    f5 = 0.0f;
                    break block12;
                }
                f6 = 0.0f;
            }
            f5 = 20000.0f;
        }
        if (f4 == 0.0f) {
            f6 += f2;
            f4 = f3 - 1.0f;
            f5 += f2;
            f3 += 2.0f;
            f2 = f4;
        } else {
            double d2 = (double)f4 * 3.141592653589793 / 180.0;
            f4 = (float)Math.cos(d2);
            float f7 = (float)Math.sin(d2);
            pdfContentByte.concatCTM(f4, f7, - f7, f4, f2, f3);
            f2 = -1.0f;
            f3 = 2.0f;
        }
        columnText.setSimpleColumn(phrase, f6, f2, f5, f3, 2.0f, n2);
        if (n3 == 3) {
            if (n2 == 0) {
                n2 = 2;
            } else if (n2 == 2) {
                n2 = n5;
            }
        }
        columnText.setAlignment(n2);
        columnText.setArabicOptions(n4);
        columnText.setRunDirection(n3);
        try {
            columnText.go();
            pdfContentByte.restoreState();
            return;
        }
        catch (DocumentException documentException) {
            throw new ExceptionConverter(documentException);
        }
    }

    public void addElement(Element element) {
        if (element == null) {
            return;
        }
        Element element2 = element;
        if (element instanceof Image) {
            element = (Image)element;
            element2 = new PdfPTable(1);
            float f2 = element.getWidthPercentage();
            if (f2 == 0.0f) {
                element2.setTotalWidth(element.getScaledWidth());
                element2.setLockedWidth(true);
            } else {
                element2.setWidthPercentage(f2);
            }
            element2.setSpacingAfter(element.getSpacingAfter());
            element2.setSpacingBefore(element.getSpacingBefore());
            int n2 = element.getAlignment();
            if (n2 != 0) {
                if (n2 != 2) {
                    element2.setHorizontalAlignment(1);
                } else {
                    element2.setHorizontalAlignment(2);
                }
            } else {
                element2.setHorizontalAlignment(0);
            }
            PdfPCell pdfPCell = new PdfPCell((Image)element, true);
            pdfPCell.setPadding(0.0f);
            pdfPCell.setBorder(element.getBorder());
            pdfPCell.setBorderColor(element.getBorderColor());
            pdfPCell.setBorderWidth(element.getBorderWidth());
            pdfPCell.setBackgroundColor(element.getBackgroundColor());
            element2.addCell(pdfPCell);
        }
        if (element2.type() == 10) {
            element = new Paragraph((Chunk)element2);
        } else if (element2.type() == 11) {
            element = new Paragraph((Phrase)element2);
        } else {
            if (element2.type() == 23) {
                ((PdfPTable)element2).init();
            }
            element = element2;
        }
        if (element.type() != 12 && element.type() != 14 && element.type() != 23 && element.type() != 55 && element.type() != 37) {
            throw new IllegalArgumentException(MessageLocalization.getComposedMessage("element.not.allowed", new Object[0]));
        }
        if (!this.composite) {
            this.composite = true;
            this.compositeElements = new LinkedList();
            this.bidiLine = null;
            this.waitPhrase = null;
        }
        if (element.type() == 12) {
            element = (Paragraph)element;
            this.compositeElements.addAll(element.breakUp());
            return;
        }
        this.compositeElements.add(element);
    }

    public void addText(Chunk chunk) {
        if (chunk != null) {
            if (this.composite) {
                return;
            }
            this.addText(new Phrase(chunk));
        }
    }

    public void addText(Phrase phrase) {
        if (phrase != null) {
            if (this.composite) {
                return;
            }
            this.addWaitingPhrase();
            if (this.bidiLine == null) {
                this.waitPhrase = phrase;
                return;
            }
            for (Chunk chunk : phrase.getChunks()) {
                this.bidiLine.addChunk(new PdfChunk(chunk, null, phrase.getTabSettings()));
            }
        }
    }

    public void clearChunks() {
        if (this.bidiLine != null) {
            this.bidiLine.clearChunks();
        }
    }

    protected ArrayList<float[]> convertColumn(float[] arrf) {
        if (arrf.length >= 4) {
            ArrayList<float[]> arrayList = new ArrayList<float[]>();
            int n2 = 0;
            while (n2 < arrf.length - 2) {
                float f2 = arrf[n2];
                float f3 = arrf[n2 + 1];
                int n3 = n2 + 2;
                float f4 = arrf[n3];
                float f5 = arrf[n2 + 3];
                if (f3 != f5) {
                    f4 = (f2 - f4) / (f3 - f5);
                    float[] arrf2 = new float[]{Math.min(f3, f5), Math.max(f3, f5), f4, f2 - f4 * f3};
                    arrayList.add(arrf2);
                    this.maxY = Math.max(this.maxY, arrf2[1]);
                    this.minY = Math.min(this.minY, arrf2[0]);
                }
                n2 = n3;
            }
            if (!arrayList.isEmpty()) {
                return arrayList;
            }
            throw new RuntimeException(MessageLocalization.getComposedMessage("no.valid.column.line.found", new Object[0]));
        }
        throw new RuntimeException(MessageLocalization.getComposedMessage("no.valid.column.line.found", new Object[0]));
    }

    protected float[] findLimitsOneLine() {
        float f2 = this.findLimitsPoint(this.leftWall);
        int n2 = this.lineStatus;
        float[] arrf = null;
        if (n2 != 1) {
            if (this.lineStatus == 2) {
                return null;
            }
            float f3 = this.findLimitsPoint(this.rightWall);
            if (this.lineStatus == 2) {
                return null;
            }
            arrf = new float[]{f2, f3};
        }
        return arrf;
    }

    protected float findLimitsPoint(ArrayList<float[]> arrayList) {
        this.lineStatus = 0;
        if (this.yLine >= this.minY && this.yLine <= this.maxY) {
            for (int i2 = 0; i2 < arrayList.size(); ++i2) {
                float[] arrf = arrayList.get(i2);
                if (this.yLine < arrf[0] || this.yLine > arrf[1]) continue;
                return arrf[2] * this.yLine + arrf[3];
            }
            this.lineStatus = 2;
            return 0.0f;
        }
        this.lineStatus = 1;
        return 0.0f;
    }

    protected float[] findLimitsTwoLines() {
        boolean bl2 = false;
        while (!bl2 || this.currentLeading != 0.0f) {
            float[] arrf = this.findLimitsOneLine();
            if (this.lineStatus == 1) {
                return null;
            }
            this.yLine -= this.currentLeading;
            if (this.lineStatus != 2) {
                float[] arrf2 = this.findLimitsOneLine();
                if (this.lineStatus == 1) {
                    return null;
                }
                if (this.lineStatus == 2) {
                    this.yLine -= this.currentLeading;
                } else if (arrf[0] < arrf2[1] && arrf2[0] < arrf[1]) {
                    return new float[]{arrf[0], arrf[1], arrf2[0], arrf2[1]};
                }
            }
            bl2 = true;
        }
        return null;
    }

    public int getAlignment() {
        return this.alignment;
    }

    public int getArabicOptions() {
        return this.arabicOptions;
    }

    public PdfContentByte getCanvas() {
        return this.canvas;
    }

    public PdfContentByte[] getCanvases() {
        return this.canvases;
    }

    public java.util.List<Element> getCompositeElements() {
        return this.compositeElements;
    }

    public float getCurrentLeading() {
        return this.currentLeading;
    }

    public float getDescender() {
        return this.descender;
    }

    public float getExtraParagraphSpace() {
        return this.extraParagraphSpace;
    }

    public float getFilledWidth() {
        return this.filledWidth;
    }

    public float getFollowingIndent() {
        return this.followingIndent;
    }

    public float getIndent() {
        return this.indent;
    }

    public boolean getInheritGraphicState() {
        return this.inheritGraphicState;
    }

    public float getLastX() {
        return this.lastX;
    }

    public float getLeading() {
        return this.fixedLeading;
    }

    public int getLinesWritten() {
        return this.linesWritten;
    }

    public float getMultipliedLeading() {
        return this.multipliedLeading;
    }

    public float getRightIndent() {
        return this.rightIndent;
    }

    public int getRowsDrawn() {
        return this.rowIdx;
    }

    public int getRunDirection() {
        return this.runDirection;
    }

    public float getSpaceCharRatio() {
        return this.spaceCharRatio;
    }

    public float getYLine() {
        return this.yLine;
    }

    public int go() {
        return this.go(false);
    }

    public int go(boolean bl2) {
        return this.go(bl2, null);
    }

    /*
     * Enabled aggressive block sorting
     */
    public int go(boolean bl2, IAccessibleElement iAccessibleElement) {
        PdfContentByte pdfContentByte;
        PdfContentByte pdfContentByte2;
        PdfDocument pdfDocument;
        Object object;
        this.isWordSplit = false;
        if (this.composite) {
            return this.goComposite(bl2);
        }
        ListBody listBody = ColumnText.isTagged(this.canvas) && iAccessibleElement instanceof ListItem ? ((ListItem)iAccessibleElement).getListBody() : null;
        this.addWaitingPhrase();
        if (this.bidiLine == null) {
            return 1;
        }
        this.descender = 0.0f;
        this.linesWritten = 0;
        this.lastX = 0.0f;
        float f2 = this.spaceCharRatio;
        Object[] arrobject = new Object[2];
        arrobject[1] = new Float(0.0f);
        this.firstLineY = Float.NaN;
        int n2 = this.runDirection;
        if (this.canvas != null) {
            pdfContentByte2 = this.canvas;
            pdfDocument = this.canvas.getPdfDocument();
            object = !ColumnText.isTagged(this.canvas) ? this.canvas.getDuplicate(this.inheritGraphicState) : this.canvas;
            pdfContentByte = object;
        } else {
            if (!bl2) {
                throw new NullPointerException(MessageLocalization.getComposedMessage("columntext.go.with.simulate.eq.eq.false.and.text.eq.eq.null", new Object[0]));
            }
            pdfContentByte = null;
            pdfDocument = null;
            pdfContentByte2 = null;
        }
        float f3 = f2;
        if (!bl2) {
            if (f2 == 0.0f) {
                f3 = pdfContentByte.getPdfWriter().getSpaceCharRatio();
            } else {
                f3 = f2;
                if (f2 < 0.001f) {
                    f3 = 0.001f;
                }
            }
        }
        if (!this.rectangularMode) {
            object = this.bidiLine.chunks.iterator();
            f2 = 0.0f;
            while (object.hasNext()) {
                f2 = Math.max(f2, ((PdfChunk)object.next()).height());
            }
            this.currentLeading = this.fixedLeading + f2 * this.multipliedLeading;
        }
        int n3 = 0;
        int n4 = 0;
        object = null;
        do {
            float f4;
            Object object2;
            Object object3;
            block38 : {
                int n5;
                block34 : {
                    block35 : {
                        float f5;
                        float f6;
                        block40 : {
                            block39 : {
                                block31 : {
                                    block33 : {
                                        block37 : {
                                            int n6;
                                            block36 : {
                                                block32 : {
                                                    f2 = this.lastWasNewline ? this.indent : this.followingIndent;
                                                    if (!this.rectangularMode) break block31;
                                                    if (this.rectangularWidth > this.rightIndent + f2) break block32;
                                                    if (!this.bidiLine.isEmpty()) break block33;
                                                    n2 = 3;
                                                    n5 = n3;
                                                    n3 = n2;
                                                    break block34;
                                                }
                                                if (this.bidiLine.isEmpty()) break block35;
                                                object3 = this.bidiLine;
                                                f4 = this.leftX;
                                                f5 = this.rectangularWidth;
                                                f6 = this.rightIndent;
                                                n6 = this.alignment;
                                                int n7 = this.arabicOptions;
                                                n5 = n4;
                                                object3 = object3.processLine(f4, f5 - f2 - f6, n6, n2, n7, this.minY, this.yLine, this.descender);
                                                this.isWordSplit |= this.bidiLine.isWordSplit();
                                                if (object3 != null) break block36;
                                                n4 = n5;
                                                break block35;
                                            }
                                            object2 = object3.getMaxSize(this.fixedLeading, this.multipliedLeading);
                                            f4 = this.isUseAscender() && Float.isNaN(this.firstLineY) ? object3.getAscender() : Math.max(object2[0], object2[1] - this.descender);
                                            this.currentLeading = f4;
                                            if (this.yLine > this.maxY || this.yLine - this.currentLeading < this.minY) break block37;
                                            this.yLine -= this.currentLeading;
                                            n6 = n3;
                                            n4 = n5;
                                            if (!bl2) {
                                                n6 = n3;
                                                n4 = n5;
                                                if (n3 == 0) {
                                                    if (object3.isRTL && this.canvas.isTagged()) {
                                                        this.canvas.beginMarkedContentSequence(PdfName.REVERSEDCHARS);
                                                        n3 = 1;
                                                    } else {
                                                        n3 = n5;
                                                    }
                                                    pdfContentByte.beginText();
                                                    n6 = 1;
                                                    n4 = n3;
                                                }
                                            }
                                            if (Float.isNaN(this.firstLineY)) {
                                                this.firstLineY = this.yLine;
                                            }
                                            this.updateFilledWidth(this.rectangularWidth - object3.widthLeft());
                                            f4 = this.leftX;
                                            n3 = n6;
                                            break block38;
                                        }
                                        this.bidiLine.restore();
                                    }
                                    n2 = 2;
                                    n5 = n3;
                                    n3 = n2;
                                    break block34;
                                }
                                f5 = this.yLine - this.currentLeading;
                                object3 = this.findLimitsTwoLines();
                                if (object3 != null) break block39;
                                n5 = this.bidiLine.isEmpty() ? 3 : 2;
                                this.yLine = f5;
                                n2 = n5;
                                n5 = n3;
                                n3 = n2;
                                break block34;
                            }
                            if (!this.bidiLine.isEmpty()) break block40;
                            this.yLine = f5;
                            break block35;
                        }
                        f4 = Math.max(object3[0], object3[2]);
                        f6 = Math.min(object3[1], object3[3]) - f4;
                        if (f6 <= this.rightIndent + f2) continue;
                        object3 = this.bidiLine.processLine(f4, f6 - f2 - this.rightIndent, this.alignment, n2, this.arabicOptions, this.minY, this.yLine, this.descender);
                        if (!bl2 && n3 == 0) {
                            n3 = n4;
                            if (object3.isRTL) {
                                n3 = n4;
                                if (this.canvas.isTagged()) {
                                    this.canvas.beginMarkedContentSequence(PdfName.REVERSEDCHARS);
                                    n3 = 1;
                                }
                            }
                            pdfContentByte.beginText();
                            n4 = n3;
                            n3 = 1;
                        }
                        if (object3 != null) break block38;
                        this.yLine = f5;
                    }
                    n2 = 1;
                    n5 = n3;
                    n3 = n2;
                }
                if (n5 != 0) {
                    pdfContentByte.endText();
                    if (this.canvas != pdfContentByte) {
                        this.canvas.add(pdfContentByte);
                    }
                    if (n4 != 0 && this.canvas.isTagged()) {
                        this.canvas.endMarkedContentSequence();
                    }
                }
                return n3;
            }
            if (ColumnText.isTagged(this.canvas) && iAccessibleElement instanceof ListItem && !Float.isNaN(this.firstLineY) && !this.firstLineYDone) {
                if (!bl2) {
                    Element element = (ListItem)iAccessibleElement;
                    object2 = element.getListLabel();
                    this.canvas.openMCBlock((IAccessibleElement)object2);
                    element = new Chunk(element.getListSymbol());
                    element.setRole(null);
                    ColumnText.showTextAligned(this.canvas, 0, new Phrase((Chunk)element), this.leftX + object2.getIndentation(), this.firstLineY, 0.0f);
                    this.canvas.closeMCBlock((IAccessibleElement)object2);
                }
                this.firstLineYDone = true;
            }
            if (!bl2) {
                if (listBody != null) {
                    this.canvas.openMCBlock(listBody);
                    listBody = null;
                }
                arrobject[0] = object;
                if (object3.isRTL()) {
                    f2 = this.rightIndent;
                }
                pdfContentByte.setTextMatrix(f4 + f2 + object3.indentLeft(), this.yLine);
                this.lastX = pdfDocument.writeLineToContent((PdfLine)object3, pdfContentByte, pdfContentByte2, arrobject, f3);
                object = (PdfFont)arrobject[0];
            }
            boolean bl3 = this.repeatFirstLineIndent && object3.isNewlineSplit();
            this.lastWasNewline = bl3;
            f4 = this.yLine;
            f2 = object3.isNewlineSplit() ? this.extraParagraphSpace : 0.0f;
            this.yLine = f4 - f2;
            ++this.linesWritten;
            this.descender = object3.getDescender();
        } while (true);
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Lifted jumps to return sites
     */
    protected int goComposite(boolean var1_1) {
        if (this.canvas != null) {
            var19_2 = this.canvas.pdf;
        }
        if (this.rectangularMode == false) throw new DocumentException(MessageLocalization.getComposedMessage("irregular.columns.are.not.supported.in.composite.mode", new Object[0]));
        this.linesWritten = 0;
        this.descender = 0.0f;
        var8_3 = this.runDirection == 3 ? 1 : 0;
        var10_4 = 1;
        var9_5 = var8_3;
        var8_3 = var10_4;
        block4 : do {
            block139 : {
                block138 : {
                    block120 : {
                        block119 : {
                            block124 : {
                                block118 : {
                                    block122 : {
                                        block130 : {
                                            block125 : {
                                                block137 : {
                                                    block131 : {
                                                        block133 : {
                                                            block135 : {
                                                                block136 : {
                                                                    block134 : {
                                                                        block132 : {
                                                                            block129 : {
                                                                                block128 : {
                                                                                    block127 : {
                                                                                        block126 : {
                                                                                            block123 : {
                                                                                                block121 : {
                                                                                                    if (this.compositeElements.isEmpty()) {
                                                                                                        return 1;
                                                                                                    }
                                                                                                    var20_20 = this.compositeElements.getFirst();
                                                                                                    if (var20_20.type() != 12) break block121;
                                                                                                    var19_2 = (Paragraph)var20_20;
                                                                                                    var10_4 = 0;
                                                                                                    break block122;
                                                                                                }
                                                                                                if (var20_20.type() != 14) break block123;
                                                                                                var19_2 = (List)var20_20;
                                                                                                var20_20 = var19_2.getItems();
                                                                                                var2_6 = var19_2.getIndentationLeft();
                                                                                                var23_41 = new Stack<Object[]>();
                                                                                                var12_13 = 0;
                                                                                                var11_12 = 0;
                                                                                                break block124;
                                                                                            }
                                                                                            if (var20_20.type() != 23) break block125;
                                                                                            var20_20 = (PdfPTable)var20_20;
                                                                                            var16_17 = this.runDirection;
                                                                                            this.runDirection = var20_20.getRunDirection();
                                                                                            var9_5 = this.runDirection == 3 ? 1 : 0;
                                                                                            if (var20_20.size() <= var20_20.getHeaderRows()) {
                                                                                                this.compositeElements.removeFirst();
                                                                                                continue;
                                                                                            }
                                                                                            var3_7 = var2_6 = this.yLine + this.descender;
                                                                                            if (this.rowIdx == 0) {
                                                                                                var3_7 = var2_6;
                                                                                                if (this.adjustFirstLine) {
                                                                                                    var3_7 = var2_6 - var20_20.spacingBefore();
                                                                                                }
                                                                                            }
                                                                                            if (var3_7 < this.minY) return 2;
                                                                                            if (var3_7 > this.maxY) {
                                                                                                return 2;
                                                                                            }
                                                                                            var6_10 = this.leftX;
                                                                                            this.currentLeading = 0.0f;
                                                                                            if (var20_20.isLockedWidth()) {
                                                                                                var5_9 = var20_20.getTotalWidth();
                                                                                                this.updateFilledWidth(var5_9);
                                                                                            } else {
                                                                                                var5_9 = this.rectangularWidth * var20_20.getWidthPercentage() / 100.0f;
                                                                                                var20_20.setTotalWidth(var5_9);
                                                                                            }
                                                                                            var20_20.normalizeHeadersFooters();
                                                                                            var15_16 = var20_20.getHeaderRows();
                                                                                            var14_15 = var20_20.getFooterRows();
                                                                                            var17_18 = var15_16 - var14_15;
                                                                                            var7_11 = var20_20.getFooterHeight();
                                                                                            var2_6 = var20_20.getHeaderHeight();
                                                                                            var12_13 = var20_20.isSkipFirstHeader() != false && this.rowIdx <= var17_18 && (var20_20.isComplete() != false || this.rowIdx != var17_18) ? 1 : 0;
                                                                                            var2_6 = var12_13 == 0 ? var3_7 - (var2_6 - var7_11) : var3_7;
                                                                                            if (this.rowIdx < var15_16) {
                                                                                                this.rowIdx = var15_16;
                                                                                            }
                                                                                            var19_2 = var20_20.isSkipLastFooter() != false ? var20_20.getFittingRows(var2_6 - this.minY, this.rowIdx) : null;
                                                                                            if (!var20_20.isSkipLastFooter()) break block126;
                                                                                            var21_30 = var19_2;
                                                                                            var4_8 = var2_6;
                                                                                            if (var19_2.lastRow >= var20_20.size() - 1) break block127;
                                                                                        }
                                                                                        var4_8 = var2_6 - var7_11;
                                                                                        var21_31 = var20_20.getFittingRows(var4_8 - this.minY, this.rowIdx);
                                                                                    }
                                                                                    if (var4_8 < this.minY) return 2;
                                                                                    if (var4_8 > this.maxY) {
                                                                                        return 2;
                                                                                    }
                                                                                    var13_14 = var21_32.lastRow + 1;
                                                                                    var2_6 = var21_32.height;
                                                                                    var19_2 = this.LOGGER;
                                                                                    var22_40 = new StringBuilder();
                                                                                    var22_40.append("Want to split at row ");
                                                                                    var22_40.append(var13_14);
                                                                                    var19_2.info(var22_40.toString());
                                                                                    for (var10_4 = var13_14; var10_4 > this.rowIdx && var10_4 < var20_20.size() && var20_20.getRow(var10_4).isMayNotBreak(); --var10_4) {
                                                                                    }
                                                                                    var11_12 = var10_4;
                                                                                    if (var10_4 < var20_20.size() - 1) {
                                                                                        var11_12 = var10_4;
                                                                                        if (!var20_20.getRow(var10_4).isMayNotBreak()) {
                                                                                            var11_12 = var10_4 + 1;
                                                                                        }
                                                                                    }
                                                                                    if (var11_12 > this.rowIdx && var11_12 < var13_14 || var11_12 == var15_16 && var20_20.getRow(var15_16).isMayNotBreak() && var20_20.isLoopCheck()) {
                                                                                        var2_6 = this.minY;
                                                                                        var20_20.setLoopCheck(false);
                                                                                    } else {
                                                                                        var11_12 = var13_14;
                                                                                        var2_6 = var4_8 - var2_6;
                                                                                    }
                                                                                    var19_2 = this.LOGGER;
                                                                                    var22_40 = new StringBuilder();
                                                                                    var22_40.append("Will split at row ");
                                                                                    var22_40.append(var11_12);
                                                                                    var19_2.info(var22_40.toString());
                                                                                    if (var20_20.isSplitLate() && var11_12 > 0) {
                                                                                        var21_32.correctLastRowChosen((PdfPTable)var20_20, var11_12 - 1);
                                                                                    }
                                                                                    var4_8 = var2_6;
                                                                                    if (!var20_20.isComplete()) {
                                                                                        var4_8 = var2_6 + var7_11;
                                                                                    }
                                                                                    if (var20_20.isSplitRows()) break block128;
                                                                                    this.splittedRow = -1;
                                                                                    var10_4 = var11_12;
                                                                                    var19_2 = var20_20;
                                                                                    var2_6 = var4_8;
                                                                                    if (var11_12 != this.rowIdx) break block129;
                                                                                    if (var11_12 != var20_20.size()) {
                                                                                        if (!var20_20.isComplete()) {
                                                                                            if (var11_12 == 1) return 2;
                                                                                        }
                                                                                        var20_20.getRows().remove(var11_12);
                                                                                        return 2;
                                                                                    }
                                                                                    break block130;
                                                                                }
                                                                                if (var20_20.isSplitLate() && (this.rowIdx < var11_12 || this.splittedRow == -2 && (var20_20.getHeaderRows() == 0 || var20_20.isSkipFirstHeader()))) {
                                                                                    this.splittedRow = -1;
                                                                                    var10_4 = var11_12;
                                                                                    var19_2 = var20_20;
                                                                                    var2_6 = var4_8;
                                                                                } else {
                                                                                    var10_4 = var11_12;
                                                                                    var19_2 = var20_20;
                                                                                    var2_6 = var4_8;
                                                                                    if (var11_12 < var20_20.size()) {
                                                                                        var2_6 = var4_8 - (var21_32.completedRowsHeight - var21_32.height);
                                                                                        var4_8 = this.minY;
                                                                                        var21_33 = var20_20.getRow(var11_12).splitRow((PdfPTable)var20_20, var11_12, var2_6 - var4_8);
                                                                                        if (var21_33 == null) {
                                                                                            this.LOGGER.info("Didn't split row!");
                                                                                            this.splittedRow = -1;
                                                                                            var10_4 = var11_12;
                                                                                            var19_2 = var20_20;
                                                                                            if (this.rowIdx == var11_12) {
                                                                                                return 2;
                                                                                            }
                                                                                        } else {
                                                                                            var19_2 = var20_20;
                                                                                            if (var11_12 != this.splittedRow) {
                                                                                                this.splittedRow = var11_12 + 1;
                                                                                                var19_2 = new PdfPTable((PdfPTable)var20_20);
                                                                                                this.compositeElements.set(0, (Element)var19_2);
                                                                                                var20_20 = var19_2.getRows();
                                                                                                for (var8_3 = var15_16; var8_3 < this.rowIdx; ++var8_3) {
                                                                                                    var20_20.set(var8_3, null);
                                                                                                }
                                                                                            }
                                                                                            var2_6 = this.minY;
                                                                                            var20_20 = var19_2.getRows();
                                                                                            var10_4 = var11_12 + 1;
                                                                                            var20_20.add(var10_4, (Object)var21_33);
                                                                                            var20_20 = this.LOGGER;
                                                                                            var21_34 = new StringBuilder();
                                                                                            var21_34.append("Inserting row at position ");
                                                                                            var21_34.append(var10_4);
                                                                                            var20_20.info(var21_34.toString());
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                            if (var1_1) break block131;
                                                                            switch (var19_2.getHorizontalAlignment()) {
                                                                                default: {
                                                                                    var4_8 = var6_10;
                                                                                    if (var9_5 == 0) break block132;
                                                                                    ** GOTO lbl166
                                                                                }
                                                                                case 2: {
                                                                                    var4_8 = var6_10;
                                                                                    if (var9_5 != 0) break block132;
lbl166: // 2 sources:
                                                                                    var4_8 = this.rectangularWidth - var5_9;
                                                                                    ** break;
                                                                                }
                                                                                case 1: 
                                                                            }
                                                                            var4_8 = (this.rectangularWidth - var5_9) / 2.0f;
lbl171: // 2 sources:
                                                                            var4_8 = var6_10 + var4_8;
                                                                        }
                                                                        var21_36 = PdfPTable.shallowCopy(var19_2);
                                                                        var20_20 = var21_36.getRows();
                                                                        if (var12_13 == 0 && var17_18 > 0) {
                                                                            var22_40 = var19_2.getRows(0, var17_18);
                                                                            if (ColumnText.isTagged(this.canvas)) {
                                                                                var21_36.getHeader().rows = var22_40;
                                                                            }
                                                                            var20_20.addAll(var22_40);
                                                                        } else {
                                                                            var21_36.setHeaderRows(var14_15);
                                                                        }
                                                                        var22_40 = var19_2.getRows(this.rowIdx, var10_4);
                                                                        if (ColumnText.isTagged(this.canvas)) {
                                                                            var21_36.getBody().rows = var22_40;
                                                                        }
                                                                        var20_20.addAll(var22_40);
                                                                        var8_3 = var19_2.isSkipLastFooter() ^ true;
                                                                        if (var10_4 < var19_2.size()) {
                                                                            var21_36.setComplete(true);
                                                                            var8_3 = 1;
                                                                            var18_19 = true;
                                                                        } else {
                                                                            var18_19 = false;
                                                                        }
                                                                        if (var14_15 > 0 && var21_36.isComplete() && var8_3 != 0) {
                                                                            var22_40 = var19_2.getRows(var17_18, var17_18 + var14_15);
                                                                            if (ColumnText.isTagged(this.canvas)) {
                                                                                var21_36.getFooter().rows = var22_40;
                                                                            }
                                                                            var20_20.addAll((Collection<PdfPRow>)var22_40);
                                                                            var8_3 = var14_15;
                                                                        } else {
                                                                            var8_3 = 0;
                                                                        }
                                                                        if (var20_20.size() <= 0) break block133;
                                                                        var8_3 = var20_20.size() - 1 - var8_3;
                                                                        var22_40 = var20_20.get(var8_3);
                                                                        if (var19_2.isExtendLastRow(var18_19)) {
                                                                            var5_9 = var22_40.getMaxHeights();
                                                                            var22_40.setMaxHeights(var2_6 - this.minY + var5_9);
                                                                            var2_6 = this.minY;
                                                                        } else {
                                                                            var5_9 = 0.0f;
                                                                        }
                                                                        if (var18_19 && (var20_20 = var19_2.getTableEvent()) instanceof PdfPTableEventSplit) {
                                                                            ((PdfPTableEventSplit)var20_20).splitTable((PdfPTable)var19_2);
                                                                        }
                                                                        if (this.canvases == null) break block134;
                                                                        if (ColumnText.isTagged(this.canvases[3])) {
                                                                            this.canvases[3].openMCBlock((IAccessibleElement)var19_2);
                                                                        }
                                                                        var21_36.writeSelectedRows(0, -1, 0, -1, var4_8, var3_7, this.canvases, false);
                                                                        if (!ColumnText.isTagged(this.canvases[3])) break block135;
                                                                        var20_20 = this.canvases[3];
                                                                        break block136;
                                                                    }
                                                                    if (ColumnText.isTagged(this.canvas)) {
                                                                        this.canvas.openMCBlock((IAccessibleElement)var19_2);
                                                                    }
                                                                    var21_36.writeSelectedRows(0, -1, 0, -1, var4_8, var3_7, this.canvas, false);
                                                                    if (!ColumnText.isTagged(this.canvas)) break block135;
                                                                    var20_20 = this.canvas;
                                                                }
                                                                var20_20.closeMCBlock((IAccessibleElement)var19_2);
                                                            }
                                                            if (!var19_2.isComplete()) {
                                                                var19_2.addNumberOfRowsWritten(var10_4);
                                                            }
                                                            if (this.splittedRow == var10_4 && var10_4 < var19_2.size()) {
                                                                var19_2.getRows().get(var10_4).copyRowContent(var21_36, var8_3);
                                                            } else if (var10_4 > 0 && var10_4 < var19_2.size()) {
                                                                var19_2.getRow(var10_4).splitRowspans((PdfPTable)var19_2, var10_4 - 1, var21_36, var8_3);
                                                            }
                                                            if (var19_2.isExtendLastRow(var18_19)) {
                                                                var22_40.setMaxHeights(var5_9);
                                                            }
                                                            var3_7 = var2_6;
                                                            if (var18_19) {
                                                                var20_20 = var19_2.getTableEvent();
                                                                var3_7 = var2_6;
                                                                if (var20_20 instanceof PdfPTableEventAfterSplit) {
                                                                    var21_37 = var19_2.getRow(var10_4);
                                                                    ((PdfPTableEventAfterSplit)var20_20).afterSplitTable((PdfPTable)var19_2, var21_37, var10_4);
                                                                    var3_7 = var2_6;
                                                                }
                                                            }
                                                            break block137;
                                                        }
                                                        var3_7 = var2_6;
                                                        break block137;
                                                    }
                                                    var3_7 = var2_6;
                                                    if (var19_2.isExtendLastRow()) {
                                                        var3_7 = var2_6;
                                                        if (this.minY > -1.07374182E9f) {
                                                            var3_7 = this.minY;
                                                        }
                                                    }
                                                }
                                                this.yLine = var3_7;
                                                this.descender = 0.0f;
                                                this.currentLeading = 0.0f;
                                                var8_3 = var10_4;
                                                if (var12_13 == 0) {
                                                    var8_3 = var10_4;
                                                    if (!var19_2.isComplete()) {
                                                        this.yLine += var7_11;
                                                        var8_3 = var10_4;
                                                    }
                                                }
                                                break block138;
                                            }
                                            var10_4 = var8_3;
                                            if (var20_20.type() == 55) {
                                                if (!var1_1) {
                                                    ((DrawInterface)var20_20).draw(this.canvas, this.leftX, this.minY, this.rightX, this.maxY, this.yLine);
                                                }
                                                this.compositeElements.removeFirst();
                                                var8_3 = var10_4;
                                                continue;
                                            }
                                            if (var20_20.type() == 37) break block139;
                                        }
                                        this.compositeElements.removeFirst();
                                        continue;
                                    }
                                    for (var11_12 = 0; var11_12 < 2; ++var11_12) {
                                        var2_6 = this.yLine;
                                        if (this.compositeColumn == null) {
                                            this.compositeColumn = new ColumnText(this.canvas);
                                            this.compositeColumn.setAlignment(var19_2.getAlignment());
                                            this.compositeColumn.setIndent(var19_2.getIndentationLeft() + var19_2.getFirstLineIndent(), false);
                                            this.compositeColumn.setExtraParagraphSpace(var19_2.getExtraParagraphSpace());
                                            this.compositeColumn.setFollowingIndent(var19_2.getIndentationLeft());
                                            this.compositeColumn.setRightIndent(var19_2.getIndentationRight());
                                            this.compositeColumn.setLeading(var19_2.getLeading(), var19_2.getMultipliedLeading());
                                            this.compositeColumn.setRunDirection(this.runDirection);
                                            this.compositeColumn.setArabicOptions(this.arabicOptions);
                                            this.compositeColumn.setSpaceCharRatio(this.spaceCharRatio);
                                            this.compositeColumn.addText((Phrase)var19_2);
                                            if (var8_3 == 0 || !this.adjustFirstLine) {
                                                this.yLine -= var19_2.getSpacingBefore();
                                            }
                                            var10_4 = 1;
                                        } else {
                                            var10_4 = 0;
                                        }
                                        var20_20 = this.compositeColumn;
                                        var18_19 = (var8_3 != 0 || this.descender == 0.0f) && this.adjustFirstLine != false ? this.useAscender : false;
                                        var20_20.setUseAscender(var18_19);
                                        this.compositeColumn.setInheritGraphicState(this.inheritGraphicState);
                                        this.compositeColumn.leftX = this.leftX;
                                        this.compositeColumn.rightX = this.rightX;
                                        this.compositeColumn.yLine = this.yLine;
                                        this.compositeColumn.rectangularWidth = this.rectangularWidth;
                                        this.compositeColumn.rectangularMode = this.rectangularMode;
                                        this.compositeColumn.minY = this.minY;
                                        this.compositeColumn.maxY = this.maxY;
                                        var12_13 = var19_2.getKeepTogether() != false && var10_4 != 0 && (var8_3 == 0 || this.adjustFirstLine == false) ? 1 : 0;
                                        var18_19 = var1_1 || var12_13 != 0 && var11_12 == 0;
                                        if (ColumnText.isTagged(this.canvas) && !var18_19) {
                                            this.canvas.openMCBlock((IAccessibleElement)var19_2);
                                        }
                                        var10_4 = this.compositeColumn.go(var18_19);
                                        if (ColumnText.isTagged(this.canvas) && !var18_19) {
                                            this.canvas.closeMCBlock((IAccessibleElement)var19_2);
                                        }
                                        this.lastX = this.compositeColumn.getLastX();
                                        this.updateFilledWidth(this.compositeColumn.filledWidth);
                                        if ((var10_4 & 1) == 0 && var12_13 != 0) {
                                            this.compositeColumn = null;
                                            this.yLine = var2_6;
                                            return 2;
                                        }
                                        var13_14 = var10_4;
                                        if (var1_1) break block118;
                                        if (var12_13 == 0) {
                                            var13_14 = var10_4;
                                            break block118;
                                        }
                                        if (var11_12 != 0) continue;
                                        this.compositeColumn = null;
                                        this.yLine = var2_6;
                                    }
                                    var13_14 = var10_4;
                                }
                                if (this.compositeColumn.getLinesWritten() > 0) {
                                    this.yLine = this.compositeColumn.yLine;
                                    this.linesWritten += this.compositeColumn.linesWritten;
                                    this.descender = this.compositeColumn.descender;
                                    this.isWordSplit |= this.compositeColumn.isWordSplit();
                                }
                                this.currentLeading = this.compositeColumn.currentLeading;
                                if (var13_14 & true) {
                                    this.compositeColumn = null;
                                    this.compositeElements.removeFirst();
                                    this.yLine -= var19_2.getSpacingAfter();
                                }
                                if ((var13_14 & 2) != 0) {
                                    return 2;
                                }
lbl346: // 4 sources:
                                do {
                                    var8_3 = 0;
                                    continue block4;
                                    break;
                                } while (true);
                            }
                            while (var11_12 < var20_20.size()) {
                                block140 : {
                                    var21_22 = var20_20.get(var11_12);
                                    if (!(var21_22 instanceof ListItem)) break block140;
                                    if (var12_13 == this.listIdx) {
                                        var20_20 = (ListItem)var21_22;
                                        break block119;
                                    }
                                    var10_4 = var12_13 + 1;
                                    ** GOTO lbl-1000
                                }
                                var10_4 = var12_13;
                                if (var21_22 instanceof List) {
                                    var23_41.push(new Object[]{var19_2, var11_12, new Float(var2_6)});
                                    var22_40 = (List)var21_22;
                                    var21_23 = var22_40.getItems();
                                    var3_7 = var2_6 + var22_40.getIndentationLeft();
                                    var13_14 = -1;
                                } else lbl-1000: // 2 sources:
                                {
                                    do {
                                        var21_25 = var20_20;
                                        var12_13 = var10_4;
                                        var13_14 = var11_12;
                                        var22_40 = var19_2;
                                        var3_7 = var2_6;
                                        if (var11_12 != var20_20.size() - 1) break;
                                        var21_26 = var20_20;
                                        var12_13 = var10_4;
                                        var13_14 = var11_12;
                                        var22_40 = var19_2;
                                        var3_7 = var2_6;
                                        if (var23_41.isEmpty()) break;
                                        var21_27 = (Object[])var23_41.pop();
                                        var19_2 = (List)var21_27[0];
                                        var20_20 = var19_2.getItems();
                                        var11_12 = (Integer)var21_27[1];
                                        var2_6 = ((Float)var21_27[2]).floatValue();
                                    } while (true);
                                }
                                var11_12 = var13_14 + 1;
                                var20_20 = var21_28;
                                var19_2 = var22_40;
                                var2_6 = var3_7;
                            }
                            var20_20 = null;
                        }
                        var12_13 = 0;
                        var10_4 = 0;
                        var11_12 = 0;
                        do {
                            var14_15 = var10_4;
                            var13_14 = var11_12;
                            if (var12_13 >= 2) break block120;
                            var3_7 = this.yLine;
                            if (this.compositeColumn == null) {
                                if (var20_20 == null) {
                                    this.listIdx = 0;
                                    this.compositeElements.removeFirst();
                                    var14_15 = var10_4;
                                    var13_14 = var11_12;
                                    break block120;
                                }
                                var21_29 = this.compositeColumn = new ColumnText(this.canvas);
                                var18_19 = (var8_3 != 0 || this.descender == 0.0f) && this.adjustFirstLine != false ? this.useAscender : false;
                                var21_29.setUseAscender(var18_19);
                                this.compositeColumn.setInheritGraphicState(this.inheritGraphicState);
                                this.compositeColumn.setAlignment(var20_20.getAlignment());
                                this.compositeColumn.setIndent(var20_20.getIndentationLeft() + var2_6 + var20_20.getFirstLineIndent(), false);
                                this.compositeColumn.setExtraParagraphSpace(var20_20.getExtraParagraphSpace());
                                this.compositeColumn.setFollowingIndent(this.compositeColumn.getIndent());
                                this.compositeColumn.setRightIndent(var20_20.getIndentationRight() + var19_2.getIndentationRight());
                                this.compositeColumn.setLeading(var20_20.getLeading(), var20_20.getMultipliedLeading());
                                this.compositeColumn.setRunDirection(this.runDirection);
                                this.compositeColumn.setArabicOptions(this.arabicOptions);
                                this.compositeColumn.setSpaceCharRatio(this.spaceCharRatio);
                                this.compositeColumn.addText((Phrase)var20_20);
                                if (var8_3 == 0 || !this.adjustFirstLine) {
                                    this.yLine -= var20_20.getSpacingBefore();
                                }
                                var11_12 = 1;
                            } else {
                                var11_12 = 0;
                            }
                            this.compositeColumn.leftX = this.leftX;
                            this.compositeColumn.rightX = this.rightX;
                            this.compositeColumn.yLine = this.yLine;
                            this.compositeColumn.rectangularWidth = this.rectangularWidth;
                            this.compositeColumn.rectangularMode = this.rectangularMode;
                            this.compositeColumn.minY = this.minY;
                            this.compositeColumn.maxY = this.maxY;
                            var13_14 = var20_20.getKeepTogether() != false && var11_12 != 0 && (var8_3 == 0 || this.adjustFirstLine == false) ? 1 : 0;
                            var18_19 = var1_1 || var13_14 != 0 && var12_13 == 0;
                            if (ColumnText.isTagged(this.canvas) && !var18_19) {
                                var20_20.getListLabel().setIndentation(var2_6);
                                if (var19_2.getFirstItem() == var20_20 || this.compositeColumn != null && this.compositeColumn.bidiLine != null) {
                                    this.canvas.openMCBlock((IAccessibleElement)var19_2);
                                }
                                this.canvas.openMCBlock((IAccessibleElement)var20_20);
                            }
                            var11_12 = this.compositeColumn.go(var18_19, (IAccessibleElement)var20_20);
                            if (ColumnText.isTagged(this.canvas) && !var18_19) {
                                this.canvas.closeMCBlock(var20_20.getListBody());
                                this.canvas.closeMCBlock((IAccessibleElement)var20_20);
                            }
                            this.lastX = this.compositeColumn.getLastX();
                            this.updateFilledWidth(this.compositeColumn.filledWidth);
                            if ((var11_12 & 1) == 0 && var13_14 != 0) {
                                this.compositeColumn = null;
                                this.yLine = var3_7;
                                var10_4 = 1;
                            }
                            if (var1_1 || var13_14 == 0 || var10_4 != 0) break;
                            if (var12_13 == 0) {
                                this.compositeColumn = null;
                                this.yLine = var3_7;
                            }
                            ++var12_13;
                        } while (true);
                        var13_14 = var11_12;
                        var14_15 = var10_4;
                    }
                    if (ColumnText.isTagged(this.canvas) && !var1_1 && (var20_20 == null || var19_2.getLastItem() == var20_20 && (var13_14 & 1) != 0 || (var13_14 & 2) != 0)) {
                        this.canvas.closeMCBlock((IAccessibleElement)var19_2);
                    }
                    if (var14_15 != 0) {
                        return 2;
                    }
                    if (var20_20 == null) continue;
                    this.yLine = this.compositeColumn.yLine;
                    this.linesWritten += this.compositeColumn.linesWritten;
                    this.descender = this.compositeColumn.descender;
                    this.currentLeading = this.compositeColumn.currentLeading;
                    if (!(ColumnText.isTagged(this.canvas) || Float.isNaN(this.compositeColumn.firstLineY) || this.compositeColumn.firstLineYDone)) {
                        if (!var1_1) {
                            if (var9_5 != 0) {
                                ColumnText.showTextAligned(this.canvas, 2, new Phrase(var20_20.getListSymbol()), this.compositeColumn.lastX + var20_20.getIndentationLeft(), this.compositeColumn.firstLineY, 0.0f, this.runDirection, this.arabicOptions);
                            } else {
                                ColumnText.showTextAligned(this.canvas, 0, new Phrase(var20_20.getListSymbol()), this.compositeColumn.leftX + var2_6, this.compositeColumn.firstLineY, 0.0f);
                            }
                        }
                        this.compositeColumn.firstLineYDone = true;
                    }
                    if ((var13_14 & 1) != 0) {
                        this.compositeColumn = null;
                        ++this.listIdx;
                        this.yLine -= var20_20.getSpacingAfter();
                    }
                    if ((var13_14 & 2) == 0) ** GOTO lbl346
                    return 2;
                }
                while (var8_3 < var19_2.size() && var19_2.getRowHeight(var8_3) <= 0.0f && !var19_2.hasRowspan(var8_3)) {
                    ++var8_3;
                }
                if (var8_3 >= var19_2.size()) {
                    var2_6 = this.yLine - var19_2.spacingAfter() < this.minY ? this.minY : this.yLine - var19_2.spacingAfter();
                    this.yLine = var2_6;
                    this.compositeElements.removeFirst();
                    this.splittedRow = -1;
                    this.rowIdx = 0;
                    this.runDirection = var16_17;
                    var8_3 = this.runDirection == 3 ? 1 : 0;
                    var9_5 = var8_3;
                    ** continue;
                }
                if (this.splittedRow > -1) {
                    var19_2 = var19_2.getRows();
                    for (var9_5 = this.rowIdx; var9_5 < var8_3; ++var9_5) {
                        var19_2.set(var9_5, null);
                    }
                }
                this.rowIdx = var8_3;
                return 2;
            }
            var21_39 = new ArrayList<Element>();
            do {
                var21_39.add((Element)var20_20);
                this.compositeElements.removeFirst();
                var19_2 = this.compositeElements.isEmpty() == false ? this.compositeElements.getFirst() : null;
                if (var19_2 == null) break;
                var20_20 = var19_2;
            } while (var19_2.type() == 37);
            var19_2 = new FloatLayout(var21_39, this.useAscender);
            var19_2.setSimpleColumn(this.leftX, this.minY, this.rightX, this.yLine);
            var19_2.compositeColumn.setIgnoreSpacingBefore(this.isIgnoreSpacingBefore());
            var11_12 = var19_2.layout(this.canvas, var1_1);
            this.yLine = var19_2.getYLine();
            this.descender = 0.0f;
            var8_3 = var10_4;
            if ((var11_12 & 1) == 0) break;
        } while (true);
        this.compositeElements.addAll(var21_39);
        return var11_12;
    }

    public boolean isAdjustFirstLine() {
        return this.adjustFirstLine;
    }

    public boolean isIgnoreSpacingBefore() {
        return this.ignoreSpacingBefore;
    }

    public boolean isUseAscender() {
        return this.useAscender;
    }

    public boolean isWordSplit() {
        return this.isWordSplit;
    }

    public ColumnText setACopy(ColumnText columnText) {
        if (columnText != null) {
            this.setSimpleVars(columnText);
            if (columnText.bidiLine != null) {
                this.bidiLine = new BidiLine(columnText.bidiLine);
            }
        }
        return this;
    }

    public void setAdjustFirstLine(boolean bl2) {
        this.adjustFirstLine = bl2;
    }

    public void setAlignment(int n2) {
        this.alignment = n2;
    }

    public void setArabicOptions(int n2) {
        this.arabicOptions = n2;
    }

    public void setCanvas(PdfContentByte pdfContentByte) {
        this.canvas = pdfContentByte;
        this.canvases = null;
        if (this.compositeColumn != null) {
            this.compositeColumn.setCanvas(pdfContentByte);
        }
    }

    public void setCanvases(PdfContentByte[] arrpdfContentByte) {
        this.canvases = arrpdfContentByte;
        this.canvas = arrpdfContentByte[3];
        if (this.compositeColumn != null) {
            this.compositeColumn.setCanvases(arrpdfContentByte);
        }
    }

    public void setColumns(float[] arrf, float[] arrf2) {
        this.maxY = -1.0E21f;
        this.minY = 1.0E21f;
        this.setYLine(Math.max(arrf[1], arrf[arrf.length - 1]));
        this.rightWall = this.convertColumn(arrf2);
        this.leftWall = this.convertColumn(arrf);
        this.rectangularWidth = -1.0f;
        this.rectangularMode = false;
    }

    public void setExtraParagraphSpace(float f2) {
        this.extraParagraphSpace = f2;
    }

    public void setFilledWidth(float f2) {
        this.filledWidth = f2;
    }

    public void setFollowingIndent(float f2) {
        this.followingIndent = f2;
        this.lastWasNewline = true;
    }

    public void setIgnoreSpacingBefore(boolean bl2) {
        this.ignoreSpacingBefore = bl2;
    }

    public void setIndent(float f2) {
        this.setIndent(f2, true);
    }

    public void setIndent(float f2, boolean bl2) {
        this.indent = f2;
        this.lastWasNewline = true;
        this.repeatFirstLineIndent = bl2;
    }

    public void setInheritGraphicState(boolean bl2) {
        this.inheritGraphicState = bl2;
    }

    public void setLeading(float f2) {
        this.fixedLeading = f2;
        this.multipliedLeading = 0.0f;
    }

    public void setLeading(float f2, float f3) {
        this.fixedLeading = f2;
        this.multipliedLeading = f3;
    }

    public void setRightIndent(float f2) {
        this.rightIndent = f2;
        this.lastWasNewline = true;
    }

    public void setRunDirection(int n2) {
        if (n2 >= 0 && n2 <= 3) {
            this.runDirection = n2;
            return;
        }
        throw new RuntimeException(MessageLocalization.getComposedMessage("invalid.run.direction.1", n2));
    }

    public void setSimpleColumn(float f2, float f3, float f4, float f5) {
        this.leftX = Math.min(f2, f4);
        this.maxY = Math.max(f3, f5);
        this.minY = Math.min(f3, f5);
        this.rightX = Math.max(f2, f4);
        this.yLine = this.maxY;
        this.rectangularWidth = this.rightX - this.leftX;
        if (this.rectangularWidth < 0.0f) {
            this.rectangularWidth = 0.0f;
        }
        this.rectangularMode = true;
    }

    public void setSimpleColumn(float f2, float f3, float f4, float f5, float f6, int n2) {
        this.setLeading(f6);
        this.alignment = n2;
        this.setSimpleColumn(f2, f3, f4, f5);
    }

    public void setSimpleColumn(Phrase phrase, float f2, float f3, float f4, float f5, float f6, int n2) {
        this.addText(phrase);
        this.setSimpleColumn(f2, f3, f4, f5, f6, n2);
    }

    public void setSimpleColumn(Rectangle rectangle) {
        this.setSimpleColumn(rectangle.getLeft(), rectangle.getBottom(), rectangle.getRight(), rectangle.getTop());
    }

    protected void setSimpleVars(ColumnText columnText) {
        this.maxY = columnText.maxY;
        this.minY = columnText.minY;
        this.alignment = columnText.alignment;
        this.leftWall = null;
        if (columnText.leftWall != null) {
            this.leftWall = new ArrayList<float[]>(columnText.leftWall);
        }
        this.rightWall = null;
        if (columnText.rightWall != null) {
            this.rightWall = new ArrayList<float[]>(columnText.rightWall);
        }
        this.yLine = columnText.yLine;
        this.currentLeading = columnText.currentLeading;
        this.fixedLeading = columnText.fixedLeading;
        this.multipliedLeading = columnText.multipliedLeading;
        this.canvas = columnText.canvas;
        this.canvases = columnText.canvases;
        this.lineStatus = columnText.lineStatus;
        this.indent = columnText.indent;
        this.followingIndent = columnText.followingIndent;
        this.rightIndent = columnText.rightIndent;
        this.extraParagraphSpace = columnText.extraParagraphSpace;
        this.rectangularWidth = columnText.rectangularWidth;
        this.rectangularMode = columnText.rectangularMode;
        this.spaceCharRatio = columnText.spaceCharRatio;
        this.lastWasNewline = columnText.lastWasNewline;
        this.repeatFirstLineIndent = columnText.repeatFirstLineIndent;
        this.linesWritten = columnText.linesWritten;
        this.arabicOptions = columnText.arabicOptions;
        this.runDirection = columnText.runDirection;
        this.descender = columnText.descender;
        this.composite = columnText.composite;
        this.splittedRow = columnText.splittedRow;
        if (columnText.composite) {
            this.compositeElements = new LinkedList();
            for (Element element : columnText.compositeElements) {
                if (element instanceof PdfPTable) {
                    this.compositeElements.add(new PdfPTable((PdfPTable)element));
                    continue;
                }
                this.compositeElements.add(element);
            }
            if (columnText.compositeColumn != null) {
                this.compositeColumn = ColumnText.duplicate(columnText.compositeColumn);
            }
        }
        this.listIdx = columnText.listIdx;
        this.rowIdx = columnText.rowIdx;
        this.firstLineY = columnText.firstLineY;
        this.leftX = columnText.leftX;
        this.rightX = columnText.rightX;
        this.firstLineYDone = columnText.firstLineYDone;
        this.waitPhrase = columnText.waitPhrase;
        this.useAscender = columnText.useAscender;
        this.filledWidth = columnText.filledWidth;
        this.adjustFirstLine = columnText.adjustFirstLine;
        this.inheritGraphicState = columnText.inheritGraphicState;
        this.ignoreSpacingBefore = columnText.ignoreSpacingBefore;
    }

    public void setSpaceCharRatio(float f2) {
        this.spaceCharRatio = f2;
    }

    public void setText(Phrase phrase) {
        this.bidiLine = null;
        this.composite = false;
        this.compositeColumn = null;
        this.compositeElements = null;
        this.listIdx = 0;
        this.rowIdx = 0;
        this.splittedRow = -1;
        this.waitPhrase = phrase;
    }

    public void setUseAscender(boolean bl2) {
        this.useAscender = bl2;
    }

    public void setYLine(float f2) {
        this.yLine = f2;
    }

    public void updateFilledWidth(float f2) {
        if (f2 > this.filledWidth) {
            this.filledWidth = f2;
        }
    }

    public boolean zeroHeightElement() {
        if (this.composite && !this.compositeElements.isEmpty() && this.compositeElements.getFirst().type() == 55) {
            return true;
        }
        return false;
    }
}

