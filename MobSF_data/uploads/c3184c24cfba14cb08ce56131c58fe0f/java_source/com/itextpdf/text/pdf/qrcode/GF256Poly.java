/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf.qrcode;

import com.itextpdf.text.pdf.qrcode.GF256;

final class GF256Poly {
    private final int[] coefficients;
    private final GF256 field;

    GF256Poly(GF256 gF256, int[] arrn) {
        if (arrn != null && arrn.length != 0) {
            this.field = gF256;
            int n2 = arrn.length;
            if (n2 > 1 && arrn[0] == 0) {
                int n3;
                for (n3 = 1; n3 < n2 && arrn[n3] == 0; ++n3) {
                }
                if (n3 == n2) {
                    this.coefficients = gF256.getZero().coefficients;
                    return;
                }
                this.coefficients = new int[n2 - n3];
                System.arraycopy(arrn, n3, this.coefficients, 0, this.coefficients.length);
                return;
            }
            this.coefficients = arrn;
            return;
        }
        throw new IllegalArgumentException();
    }

    GF256Poly addOrSubtract(GF256Poly arrn) {
        if (this.field.equals(arrn.field)) {
            if (this.isZero()) {
                return arrn;
            }
            if (arrn.isZero()) {
                return this;
            }
            int[] arrn2 = this.coefficients;
            int[] arrn3 = arrn.coefficients;
            int[] arrn4 = arrn2;
            arrn = arrn3;
            if (arrn2.length > arrn3.length) {
                arrn4 = arrn3;
                arrn = arrn2;
            }
            arrn2 = new int[arrn.length];
            int n2 = arrn.length - arrn4.length;
            System.arraycopy(arrn, 0, arrn2, 0, n2);
            for (int i2 = n2; i2 < arrn.length; ++i2) {
                arrn2[i2] = GF256.addOrSubtract(arrn4[i2 - n2], arrn[i2]);
            }
            return new GF256Poly(this.field, arrn2);
        }
        throw new IllegalArgumentException("GF256Polys do not have same GF256 field");
    }

    GF256Poly[] divide(GF256Poly gF256Poly) {
        if (this.field.equals(gF256Poly.field)) {
            if (!gF256Poly.isZero()) {
                GF256Poly gF256Poly2 = this.field.getZero();
                int n2 = gF256Poly.getCoefficient(gF256Poly.getDegree());
                n2 = this.field.inverse(n2);
                GF256Poly gF256Poly3 = this;
                while (gF256Poly3.getDegree() >= gF256Poly.getDegree() && !gF256Poly3.isZero()) {
                    int n3 = gF256Poly3.getDegree() - gF256Poly.getDegree();
                    int n4 = this.field.multiply(gF256Poly3.getCoefficient(gF256Poly3.getDegree()), n2);
                    GF256Poly gF256Poly4 = gF256Poly.multiplyByMonomial(n3, n4);
                    gF256Poly2 = gF256Poly2.addOrSubtract(this.field.buildMonomial(n3, n4));
                    gF256Poly3 = gF256Poly3.addOrSubtract(gF256Poly4);
                }
                return new GF256Poly[]{gF256Poly2, gF256Poly3};
            }
            throw new IllegalArgumentException("Divide by 0");
        }
        throw new IllegalArgumentException("GF256Polys do not have same GF256 field");
    }

    int evaluateAt(int n2) {
        int n3;
        int n4 = 0;
        if (n2 == 0) {
            return this.getCoefficient(0);
        }
        int n5 = this.coefficients.length;
        if (n2 == 1) {
            n3 = 0;
            for (n2 = n4; n2 < n5; ++n2) {
                n3 = GF256.addOrSubtract(n3, this.coefficients[n2]);
            }
            return n3;
        }
        n4 = this.coefficients[0];
        for (n3 = 1; n3 < n5; ++n3) {
            n4 = GF256.addOrSubtract(this.field.multiply(n2, n4), this.coefficients[n3]);
        }
        return n4;
    }

    int getCoefficient(int n2) {
        return this.coefficients[this.coefficients.length - 1 - n2];
    }

    int[] getCoefficients() {
        return this.coefficients;
    }

    int getDegree() {
        return this.coefficients.length - 1;
    }

    boolean isZero() {
        int[] arrn = this.coefficients;
        boolean bl2 = false;
        if (arrn[0] == 0) {
            bl2 = true;
        }
        return bl2;
    }

    GF256Poly multiply(int n2) {
        if (n2 == 0) {
            return this.field.getZero();
        }
        if (n2 == 1) {
            return this;
        }
        int n3 = this.coefficients.length;
        int[] arrn = new int[n3];
        for (int i2 = 0; i2 < n3; ++i2) {
            arrn[i2] = this.field.multiply(this.coefficients[i2], n2);
        }
        return new GF256Poly(this.field, arrn);
    }

    GF256Poly multiply(GF256Poly arrn) {
        if (this.field.equals(arrn.field)) {
            if (!this.isZero() && !arrn.isZero()) {
                int[] arrn2 = this.coefficients;
                int n2 = arrn2.length;
                arrn = arrn.coefficients;
                int n3 = arrn.length;
                int[] arrn3 = new int[n2 + n3 - 1];
                for (int i2 = 0; i2 < n2; ++i2) {
                    int n4 = arrn2[i2];
                    for (int i3 = 0; i3 < n3; ++i3) {
                        int n5 = i2 + i3;
                        arrn3[n5] = GF256.addOrSubtract(arrn3[n5], this.field.multiply(n4, arrn[i3]));
                    }
                }
                return new GF256Poly(this.field, arrn3);
            }
            return this.field.getZero();
        }
        throw new IllegalArgumentException("GF256Polys do not have same GF256 field");
    }

    GF256Poly multiplyByMonomial(int n2, int n3) {
        if (n2 >= 0) {
            if (n3 == 0) {
                return this.field.getZero();
            }
            int n4 = this.coefficients.length;
            int[] arrn = new int[n2 + n4];
            for (n2 = 0; n2 < n4; ++n2) {
                arrn[n2] = this.field.multiply(this.coefficients[n2], n3);
            }
            return new GF256Poly(this.field, arrn);
        }
        throw new IllegalArgumentException();
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Lifted jumps to return sites
     */
    public String toString() {
        var5_1 = new StringBuffer(this.getDegree() * 8);
        var2_2 = this.getDegree();
        while (var2_2 >= 0) {
            block9 : {
                block10 : {
                    block11 : {
                        var4_5 = this.getCoefficient(var2_2);
                        if (var4_5 == 0) break block9;
                        if (var4_5 < 0) {
                            var5_1.append(" - ");
                            var3_4 = - var4_5;
                        } else {
                            var3_4 = var4_5;
                            if (var5_1.length() > 0) {
                                var5_1.append(" + ");
                                var3_4 = var4_5;
                            }
                        }
                        if (var2_2 != 0 && var3_4 == 1) break block10;
                        if ((var3_4 = this.field.log(var3_4)) != 0) break block11;
                        var1_3 = 49;
                        ** GOTO lbl21
                    }
                    if (var3_4 == 1) {
                        var1_3 = 97;
lbl21: // 2 sources:
                        var5_1.append((char)var1_3);
                    } else {
                        var5_1.append("a^");
                        var5_1.append(var3_4);
                    }
                }
                if (var2_2 != 0) {
                    if (var2_2 == 1) {
                        var5_1.append('x');
                    } else {
                        var5_1.append("x^");
                        var5_1.append(var2_2);
                    }
                }
            }
            --var2_2;
        }
        return var5_1.toString();
    }
}

