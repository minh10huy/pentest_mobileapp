/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf;

import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;

public class SequenceList {
    protected static final int COMMA = 1;
    private static final int DIGIT = 1;
    private static final int DIGIT2 = 3;
    protected static final int END = 6;
    protected static final char EOT = '\uffff';
    private static final int FIRST = 0;
    protected static final int MINUS = 2;
    protected static final int NOT = 3;
    private static final String NOT_OTHER = "-,!0123456789";
    protected static final int NUMBER = 5;
    private static final int OTHER = 2;
    protected static final int TEXT = 4;
    protected boolean even;
    protected int high;
    protected boolean inverse;
    protected int low;
    protected int number;
    protected boolean odd;
    protected String other;
    protected int ptr = 0;
    protected char[] text;

    protected SequenceList(String string2) {
        this.text = string2.toCharArray();
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Lifted jumps to return sites
     */
    public static List<Integer> expand(String var0, int var1_1) {
        var0 = new SequenceList((String)var0);
        var8_2 = new LinkedList<Integer>();
        var6_3 = false;
        block0 : do {
            block22 : {
                block23 : {
                    block25 : {
                        block24 : {
                            block21 : {
                                if (var6_3 != false) return var8_2;
                                var7_8 = var0.getAttributes();
                                var2_4 = var0.low;
                                var4_6 = -1;
                                if (var2_4 == -1 && var0.high == -1 && !var0.even && !var0.odd) {
                                    var6_3 = var7_8;
                                    continue;
                                }
                                var5_7 = var0.low;
                                var2_4 = 1;
                                var3_5 = 1;
                                if (var5_7 < 1) {
                                    var0.low = 1;
                                }
                                if (var0.high < 1 || var0.high > var1_1) {
                                    var0.high = var1_1;
                                }
                                if (var0.low > var1_1) {
                                    var0.low = var1_1;
                                }
                                if (!var0.inverse) break block21;
                                if (var0.low > var0.high) {
                                    var2_4 = var0.low;
                                    var0.low = var0.high;
                                    var0.high = var2_4;
                                }
                                break block22;
                            }
                            if (var0.low <= var0.high) break block23;
                            if (var0.odd) break block24;
                            var2_4 = var4_6;
                            if (!var0.even) break block25;
                        }
                        if (var0.even) {
                            var2_4 = var0.low & -2;
                        } else {
                            var4_6 = var0.low;
                            var2_4 = var3_5;
                            if ((var0.low & 1) == 1) {
                                var2_4 = 0;
                            }
                            var2_4 = var4_6 - var2_4;
                        }
                        var0.low = var2_4;
                        var2_4 = -2;
                    }
                    var3_5 = var0.low;
                    do {
                        var6_3 = var7_8;
                        if (var3_5 < var0.high) continue block0;
                        var8_2.add(var3_5);
                        var3_5 += var2_4;
                    } while (true);
                }
                if (!var0.odd && !var0.even) {
                    var2_4 = 1;
                } else {
                    var3_5 = 2;
                    if (var0.odd) {
                        var2_4 = var0.low | 1;
                    } else {
                        var4_6 = var0.low;
                        if ((var0.low & 1) != 1) {
                            var2_4 = 0;
                        }
                        var2_4 = var4_6 + var2_4;
                    }
                    var0.low = var2_4;
                    var2_4 = var3_5;
                }
                var3_5 = var0.low;
                do {
                    var6_3 = var7_8;
                    if (var3_5 > var0.high) continue block0;
                    var8_2.add(var3_5);
                    var3_5 += var2_4;
                } while (true);
            }
            var9_9 = var8_2.listIterator();
            do {
                var6_3 = var7_8;
                if (!var9_9.hasNext()) ** break;
                var2_4 = var9_9.next();
                if (var0.even && (var2_4 & 1) == 1 || var0.odd && (var2_4 & 1) == 0 || var2_4 < var0.low || var2_4 > var0.high) continue;
                var9_9.remove();
            } while (true);
            break;
        } while (true);
    }

    private void otherProc() {
        if (!this.other.equals("odd") && !this.other.equals("o")) {
            if (this.other.equals("even") || this.other.equals("e")) {
                this.odd = false;
                this.even = true;
                return;
            }
        } else {
            this.odd = true;
            this.even = false;
        }
    }

    /*
     * Exception decompiling
     */
    protected boolean getAttributes() {
        // This method has failed to decompile.  When submitting a bug report, please provide this stack trace, and (if you hold appropriate legal rights) the relevant class file.
        // org.benf.cfr.reader.util.ConfusedCFRException: Tried to end blocks [3[CASE]], but top level block is 9[SWITCH]
        // org.benf.cfr.reader.bytecode.analysis.opgraph.Op04StructuredStatement.processEndingBlocks(Op04StructuredStatement.java:416)
        // org.benf.cfr.reader.bytecode.analysis.opgraph.Op04StructuredStatement.buildNestedBlocks(Op04StructuredStatement.java:468)
        // org.benf.cfr.reader.bytecode.analysis.opgraph.Op03SimpleStatement.createInitialStructuredBlock(Op03SimpleStatement.java:2960)
        // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisInner(CodeAnalyser.java:818)
        // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisOrWrapFail(CodeAnalyser.java:196)
        // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysis(CodeAnalyser.java:141)
        // org.benf.cfr.reader.entities.attributes.AttributeCode.analyse(AttributeCode.java:95)
        // org.benf.cfr.reader.entities.Method.analyse(Method.java:372)
        // org.benf.cfr.reader.entities.ClassFile.analyseMid(ClassFile.java:867)
        // org.benf.cfr.reader.entities.ClassFile.analyseTop(ClassFile.java:768)
        // org.benf.cfr.reader.Main.doJar(Main.java:141)
        // org.benf.cfr.reader.Main.main(Main.java:242)
        throw new IllegalStateException("Decompilation failed");
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Lifted jumps to return sites
     */
    protected int getType() {
        var3_1 = new StringBuffer();
        var2_2 = 0;
        block9 : do {
            block17 : {
                if ((var1_3 = this.nextChar()) != '\uffff') break block17;
                if (var2_2 == 1) ** GOTO lbl23
                if (var2_2 != 2) return 6;
                ** GOTO lbl15
            }
            switch (var2_2) {
                default: {
                    continue block9;
                }
                case 2: {
                    if ("-,!0123456789".indexOf(var1_3) < 0) ** GOTO lbl20
                    this.putBack();
lbl15: // 2 sources:
                    this.other = var3_1.toString().toLowerCase();
                    return 4;
                }
                case 1: {
                    if (var1_3 < '0' || var1_3 > '9') ** GOTO lbl22
lbl20: // 2 sources:
                    var3_1.append(var1_3);
                    continue block9;
lbl22: // 1 sources:
                    this.putBack();
lbl23: // 2 sources:
                    var3_1 = var3_1.toString();
                    this.other = var3_1;
                    this.number = Integer.parseInt((String)var3_1);
                    return 5;
                }
                case 0: 
            }
            if (var1_3 == '!') return 3;
            switch (var1_3) {
                default: {
                    var3_1.append(var1_3);
                    if (var1_3 >= '0' && var1_3 <= '9') {
                        var2_2 = 1;
                        continue block9;
                    }
                    var2_2 = 2;
                    continue block9;
                }
                case '-': {
                    return 2;
                }
                case ',': 
            }
            break;
        } while (true);
        return 1;
    }

    protected char nextChar() {
        char[] arrc;
        int n2;
        char c2;
        do {
            if (this.ptr >= this.text.length) {
                return '\uffff';
            }
            arrc = this.text;
            n2 = this.ptr;
            this.ptr = n2 + 1;
        } while ((c2 = arrc[n2]) <= ' ');
        return c2;
    }

    protected void putBack() {
        --this.ptr;
        if (this.ptr < 0) {
            this.ptr = 0;
        }
    }
}

