/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf.qrcode;

import com.itextpdf.text.pdf.qrcode.BitVector;
import com.itextpdf.text.pdf.qrcode.ByteMatrix;
import com.itextpdf.text.pdf.qrcode.ErrorCorrectionLevel;
import com.itextpdf.text.pdf.qrcode.MaskUtil;
import com.itextpdf.text.pdf.qrcode.QRCode;
import com.itextpdf.text.pdf.qrcode.WriterException;

public final class MatrixUtil {
    private static final int[][] HORIZONTAL_SEPARATION_PATTERN;
    private static final int[][] POSITION_ADJUSTMENT_PATTERN;
    private static final int[][] POSITION_ADJUSTMENT_PATTERN_COORDINATE_TABLE;
    private static final int[][] POSITION_DETECTION_PATTERN;
    private static final int[][] TYPE_INFO_COORDINATES;
    private static final int TYPE_INFO_MASK_PATTERN = 21522;
    private static final int TYPE_INFO_POLY = 1335;
    private static final int VERSION_INFO_POLY = 7973;
    private static final int[][] VERTICAL_SEPARATION_PATTERN;

    static {
        int[] arrn = new int[]{1, 1, 1, 1, 1, 1, 1};
        int[] arrn2 = new int[]{1, 0, 0, 0, 0, 0, 1};
        int[] arrn3 = new int[]{1, 0, 1, 1, 1, 0, 1};
        int[] arrn4 = new int[]{1, 0, 1, 1, 1, 0, 1};
        int[] arrn5 = new int[]{1, 0, 1, 1, 1, 0, 1};
        int[] arrn6 = new int[]{1, 1, 1, 1, 1, 1, 1};
        POSITION_DETECTION_PATTERN = new int[][]{arrn, arrn2, arrn3, arrn4, arrn5, {1, 0, 0, 0, 0, 0, 1}, arrn6};
        HORIZONTAL_SEPARATION_PATTERN = new int[][]{{0, 0, 0, 0, 0, 0, 0, 0}};
        arrn = new int[]{0};
        arrn2 = new int[]{0};
        arrn3 = new int[]{0};
        VERTICAL_SEPARATION_PATTERN = new int[][]{{0}, {0}, arrn, arrn2, arrn3, {0}, {0}};
        arrn = new int[]{1, 0, 0, 0, 1};
        arrn2 = new int[]{1, 0, 1, 0, 1};
        arrn3 = new int[]{1, 1, 1, 1, 1};
        POSITION_ADJUSTMENT_PATTERN = new int[][]{{1, 1, 1, 1, 1}, arrn, arrn2, {1, 0, 0, 0, 1}, arrn3};
        arrn = new int[]{-1, -1, -1, -1, -1, -1, -1};
        arrn2 = new int[]{6, 22, -1, -1, -1, -1, -1};
        arrn3 = new int[]{6, 30, -1, -1, -1, -1, -1};
        arrn4 = new int[]{6, 28, 50, -1, -1, -1, -1};
        arrn5 = new int[]{6, 32, 58, -1, -1, -1, -1};
        arrn6 = new int[]{6, 26, 50, 74, -1, -1, -1};
        int[] arrn7 = new int[]{6, 26, 50, 74, 98, -1, -1};
        int[] arrn8 = new int[]{6, 32, 58, 84, 110, -1, -1};
        int[] arrn9 = new int[]{6, 30, 58, 86, 114, -1, -1};
        int[] arrn10 = new int[]{6, 26, 50, 74, 98, 122, -1};
        int[] arrn11 = new int[]{6, 30, 58, 86, 114, 142, -1};
        int[] arrn12 = new int[]{6, 34, 62, 90, 118, 146, -1};
        int[] arrn13 = new int[]{6, 24, 50, 76, 102, 128, 154};
        int[] arrn14 = new int[]{6, 32, 58, 84, 110, 136, 162};
        int[] arrn15 = new int[]{6, 30, 58, 86, 114, 142, 170};
        POSITION_ADJUSTMENT_PATTERN_COORDINATE_TABLE = new int[][]{arrn, {6, 18, -1, -1, -1, -1, -1}, arrn2, {6, 26, -1, -1, -1, -1, -1}, arrn3, {6, 34, -1, -1, -1, -1, -1}, {6, 22, 38, -1, -1, -1, -1}, {6, 24, 42, -1, -1, -1, -1}, {6, 26, 46, -1, -1, -1, -1}, arrn4, {6, 30, 54, -1, -1, -1, -1}, arrn5, {6, 34, 62, -1, -1, -1, -1}, {6, 26, 46, 66, -1, -1, -1}, {6, 26, 48, 70, -1, -1, -1}, arrn6, {6, 30, 54, 78, -1, -1, -1}, {6, 30, 56, 82, -1, -1, -1}, {6, 30, 58, 86, -1, -1, -1}, {6, 34, 62, 90, -1, -1, -1}, {6, 28, 50, 72, 94, -1, -1}, arrn7, {6, 30, 54, 78, 102, -1, -1}, {6, 28, 54, 80, 106, -1, -1}, arrn8, arrn9, {6, 34, 62, 90, 118, -1, -1}, arrn10, {6, 30, 54, 78, 102, 126, -1}, {6, 26, 52, 78, 104, 130, -1}, {6, 30, 56, 82, 108, 134, -1}, {6, 34, 60, 86, 112, 138, -1}, arrn11, arrn12, {6, 30, 54, 78, 102, 126, 150}, arrn13, {6, 28, 54, 80, 106, 132, 158}, arrn14, {6, 26, 54, 82, 110, 138, 166}, arrn15};
        arrn = new int[]{8, 0};
        arrn2 = new int[]{8, 1};
        arrn3 = new int[]{8, 3};
        arrn4 = new int[]{8, 4};
        arrn5 = new int[]{8, 8};
        arrn6 = new int[]{7, 8};
        arrn7 = new int[]{4, 8};
        arrn8 = new int[]{3, 8};
        arrn9 = new int[]{1, 8};
        arrn10 = new int[]{0, 8};
        TYPE_INFO_COORDINATES = new int[][]{arrn, arrn2, {8, 2}, arrn3, arrn4, {8, 5}, {8, 7}, arrn5, arrn6, {5, 8}, arrn7, arrn8, {2, 8}, arrn9, arrn10};
    }

    private MatrixUtil() {
    }

    public static void buildMatrix(BitVector bitVector, ErrorCorrectionLevel errorCorrectionLevel, int n2, int n3, ByteMatrix byteMatrix) {
        MatrixUtil.clearMatrix(byteMatrix);
        MatrixUtil.embedBasicPatterns(n2, byteMatrix);
        MatrixUtil.embedTypeInfo(errorCorrectionLevel, n3, byteMatrix);
        MatrixUtil.maybeEmbedVersionInfo(n2, byteMatrix);
        MatrixUtil.embedDataBits(bitVector, n3, byteMatrix);
    }

    public static int calculateBCHCode(int n2, int n3) {
        int n4 = MatrixUtil.findMSBSet(n3);
        n2 <<= n4 - 1;
        while (MatrixUtil.findMSBSet(n2) >= n4) {
            n2 ^= n3 << MatrixUtil.findMSBSet(n2) - n4;
        }
        return n2;
    }

    public static void clearMatrix(ByteMatrix byteMatrix) {
        byteMatrix.clear((byte)-1);
    }

    public static void embedBasicPatterns(int n2, ByteMatrix byteMatrix) {
        MatrixUtil.embedPositionDetectionPatternsAndSeparators(byteMatrix);
        MatrixUtil.embedDarkDotAtLeftBottomCorner(byteMatrix);
        MatrixUtil.maybeEmbedPositionAdjustmentPatterns(n2, byteMatrix);
        MatrixUtil.embedTimingPatterns(byteMatrix);
    }

    private static void embedDarkDotAtLeftBottomCorner(ByteMatrix byteMatrix) {
        if (byteMatrix.get(8, byteMatrix.getHeight() - 8) != 0) {
            byteMatrix.set(8, byteMatrix.getHeight() - 8, 1);
            return;
        }
        throw new WriterException();
    }

    public static void embedDataBits(BitVector bitVector, int n2, ByteMatrix object) {
        int n3 = object.getWidth() - 1;
        int n4 = object.getHeight() - 1;
        int n5 = 0;
        int n6 = -1;
        while (n3 > 0) {
            int n7 = n3;
            int n8 = n5;
            int n9 = n4;
            if (n3 == 6) {
                n7 = n3 - 1;
                n9 = n4;
                n8 = n5;
            }
            while (n9 >= 0 && n9 < object.getHeight()) {
                for (n3 = 0; n3 < 2; ++n3) {
                    int n10 = n7 - n3;
                    if (!MatrixUtil.isEmpty(object.get(n10, n9))) continue;
                    if (n8 < bitVector.size()) {
                        n4 = bitVector.at(n8);
                        ++n8;
                    } else {
                        n4 = 0;
                    }
                    n5 = n4;
                    if (n2 != -1) {
                        n5 = n4;
                        if (MaskUtil.getDataMaskBit(n2, n10, n9)) {
                            n5 = n4 ^ 1;
                        }
                    }
                    object.set(n10, n9, n5);
                }
                n9 += n6;
            }
            n6 = - n6;
            n4 = n9 + n6;
            n3 = n7 - 2;
            n5 = n8;
        }
        if (n5 == bitVector.size()) {
            return;
        }
        object = new StringBuilder();
        object.append("Not all bits consumed: ");
        object.append(n5);
        object.append('/');
        object.append(bitVector.size());
        throw new WriterException(object.toString());
    }

    private static void embedHorizontalSeparationPattern(int n2, int n3, ByteMatrix byteMatrix) {
        if (HORIZONTAL_SEPARATION_PATTERN[0].length == 8 && HORIZONTAL_SEPARATION_PATTERN.length == 1) {
            for (int i2 = 0; i2 < 8; ++i2) {
                int n4 = n2 + i2;
                if (MatrixUtil.isEmpty(byteMatrix.get(n4, n3))) {
                    byteMatrix.set(n4, n3, HORIZONTAL_SEPARATION_PATTERN[0][i2]);
                    continue;
                }
                throw new WriterException();
            }
            return;
        }
        throw new WriterException("Bad horizontal separation pattern");
    }

    private static void embedPositionAdjustmentPattern(int n2, int n3, ByteMatrix byteMatrix) {
        if (POSITION_ADJUSTMENT_PATTERN[0].length == 5 && POSITION_ADJUSTMENT_PATTERN.length == 5) {
            for (int i2 = 0; i2 < 5; ++i2) {
                for (int i3 = 0; i3 < 5; ++i3) {
                    int n4 = n2 + i3;
                    int n5 = n3 + i2;
                    if (MatrixUtil.isEmpty(byteMatrix.get(n4, n5))) {
                        byteMatrix.set(n4, n5, POSITION_ADJUSTMENT_PATTERN[i2][i3]);
                        continue;
                    }
                    throw new WriterException();
                }
            }
            return;
        }
        throw new WriterException("Bad position adjustment");
    }

    private static void embedPositionDetectionPattern(int n2, int n3, ByteMatrix byteMatrix) {
        if (POSITION_DETECTION_PATTERN[0].length == 7 && POSITION_DETECTION_PATTERN.length == 7) {
            for (int i2 = 0; i2 < 7; ++i2) {
                for (int i3 = 0; i3 < 7; ++i3) {
                    int n4 = n2 + i3;
                    int n5 = n3 + i2;
                    if (MatrixUtil.isEmpty(byteMatrix.get(n4, n5))) {
                        byteMatrix.set(n4, n5, POSITION_DETECTION_PATTERN[i2][i3]);
                        continue;
                    }
                    throw new WriterException();
                }
            }
            return;
        }
        throw new WriterException("Bad position detection pattern");
    }

    private static void embedPositionDetectionPatternsAndSeparators(ByteMatrix byteMatrix) {
        int n2 = POSITION_DETECTION_PATTERN[0].length;
        MatrixUtil.embedPositionDetectionPattern(0, 0, byteMatrix);
        MatrixUtil.embedPositionDetectionPattern(byteMatrix.getWidth() - n2, 0, byteMatrix);
        MatrixUtil.embedPositionDetectionPattern(0, byteMatrix.getWidth() - n2, byteMatrix);
        n2 = HORIZONTAL_SEPARATION_PATTERN[0].length;
        int n3 = n2 - 1;
        MatrixUtil.embedHorizontalSeparationPattern(0, n3, byteMatrix);
        MatrixUtil.embedHorizontalSeparationPattern(byteMatrix.getWidth() - n2, n3, byteMatrix);
        MatrixUtil.embedHorizontalSeparationPattern(0, byteMatrix.getWidth() - n2, byteMatrix);
        n2 = VERTICAL_SEPARATION_PATTERN.length;
        MatrixUtil.embedVerticalSeparationPattern(n2, 0, byteMatrix);
        MatrixUtil.embedVerticalSeparationPattern(byteMatrix.getHeight() - n2 - 1, 0, byteMatrix);
        MatrixUtil.embedVerticalSeparationPattern(n2, byteMatrix.getHeight() - n2, byteMatrix);
    }

    private static void embedTimingPatterns(ByteMatrix byteMatrix) {
        int n2 = 8;
        while (n2 < byteMatrix.getWidth() - 8) {
            int n3 = n2 + 1;
            int n4 = n3 % 2;
            if (MatrixUtil.isValidValue(byteMatrix.get(n2, 6))) {
                if (MatrixUtil.isEmpty(byteMatrix.get(n2, 6))) {
                    byteMatrix.set(n2, 6, n4);
                }
                if (MatrixUtil.isValidValue(byteMatrix.get(6, n2))) {
                    if (MatrixUtil.isEmpty(byteMatrix.get(6, n2))) {
                        byteMatrix.set(6, n2, n4);
                    }
                    n2 = n3;
                    continue;
                }
                throw new WriterException();
            }
            throw new WriterException();
        }
    }

    public static void embedTypeInfo(ErrorCorrectionLevel errorCorrectionLevel, int n2, ByteMatrix byteMatrix) {
        BitVector bitVector = new BitVector();
        MatrixUtil.makeTypeInfoBits(errorCorrectionLevel, n2, bitVector);
        for (n2 = 0; n2 < bitVector.size(); ++n2) {
            int n3 = bitVector.at(bitVector.size() - 1 - n2);
            byteMatrix.set(TYPE_INFO_COORDINATES[n2][0], TYPE_INFO_COORDINATES[n2][1], n3);
            if (n2 < 8) {
                byteMatrix.set(byteMatrix.getWidth() - n2 - 1, 8, n3);
                continue;
            }
            byteMatrix.set(8, byteMatrix.getHeight() - 7 + (n2 - 8), n3);
        }
    }

    private static void embedVerticalSeparationPattern(int n2, int n3, ByteMatrix byteMatrix) {
        if (VERTICAL_SEPARATION_PATTERN[0].length == 1 && VERTICAL_SEPARATION_PATTERN.length == 7) {
            for (int i2 = 0; i2 < 7; ++i2) {
                int n4 = n3 + i2;
                if (MatrixUtil.isEmpty(byteMatrix.get(n2, n4))) {
                    byteMatrix.set(n2, n4, VERTICAL_SEPARATION_PATTERN[i2][0]);
                    continue;
                }
                throw new WriterException();
            }
            return;
        }
        throw new WriterException("Bad vertical separation pattern");
    }

    public static int findMSBSet(int n2) {
        int n3 = 0;
        int n4 = n2;
        n2 = n3;
        while (n4 != 0) {
            n4 >>>= 1;
            ++n2;
        }
        return n2;
    }

    private static boolean isEmpty(int n2) {
        if (n2 == -1) {
            return true;
        }
        return false;
    }

    private static boolean isValidValue(int n2) {
        boolean bl2;
        boolean bl3 = bl2 = true;
        if (n2 != -1) {
            bl3 = bl2;
            if (n2 != 0) {
                if (n2 == 1) {
                    return true;
                }
                bl3 = false;
            }
        }
        return bl3;
    }

    public static void makeTypeInfoBits(ErrorCorrectionLevel object, int n2, BitVector bitVector) {
        if (QRCode.isValidMaskPattern(n2)) {
            n2 = object.getBits() << 3 | n2;
            bitVector.appendBits(n2, 5);
            bitVector.appendBits(MatrixUtil.calculateBCHCode(n2, 1335), 10);
            object = new BitVector();
            object.appendBits(21522, 15);
            bitVector.xor((BitVector)object);
            if (bitVector.size() == 15) {
                return;
            }
            object = new StringBuilder();
            object.append("should not happen but we got: ");
            object.append(bitVector.size());
            throw new WriterException(object.toString());
        }
        throw new WriterException("Invalid mask pattern");
    }

    public static void makeVersionInfoBits(int n2, BitVector bitVector) {
        bitVector.appendBits(n2, 6);
        bitVector.appendBits(MatrixUtil.calculateBCHCode(n2, 7973), 12);
        if (bitVector.size() == 18) {
            return;
        }
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("should not happen but we got: ");
        stringBuilder.append(bitVector.size());
        throw new WriterException(stringBuilder.toString());
    }

    private static void maybeEmbedPositionAdjustmentPatterns(int n2, ByteMatrix byteMatrix) {
        if (n2 < 2) {
            return;
        }
        int[] arrn = POSITION_ADJUSTMENT_PATTERN_COORDINATE_TABLE[--n2];
        int n3 = POSITION_ADJUSTMENT_PATTERN_COORDINATE_TABLE[n2].length;
        for (n2 = 0; n2 < n3; ++n2) {
            for (int i2 = 0; i2 < n3; ++i2) {
                int n4 = arrn[n2];
                int n5 = arrn[i2];
                if (n5 == -1 || n4 == -1 || !MatrixUtil.isEmpty(byteMatrix.get(n5, n4))) continue;
                MatrixUtil.embedPositionAdjustmentPattern(n5 - 2, n4 - 2, byteMatrix);
            }
        }
    }

    public static void maybeEmbedVersionInfo(int n2, ByteMatrix byteMatrix) {
        if (n2 < 7) {
            return;
        }
        BitVector bitVector = new BitVector();
        MatrixUtil.makeVersionInfoBits(n2, bitVector);
        n2 = 17;
        for (int i2 = 0; i2 < 6; ++i2) {
            for (int i3 = 0; i3 < 3; ++i3) {
                int n3 = bitVector.at(n2);
                --n2;
                byteMatrix.set(i2, byteMatrix.getHeight() - 11 + i3, n3);
                byteMatrix.set(byteMatrix.getHeight() - 11 + i3, i2, n3);
            }
        }
    }
}

