/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf;

import com.itextpdf.text.AccessibleElementId;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chunk;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.ExceptionConverter;
import com.itextpdf.text.Font;
import com.itextpdf.text.Image;
import com.itextpdf.text.List;
import com.itextpdf.text.ListBody;
import com.itextpdf.text.ListItem;
import com.itextpdf.text.ListLabel;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.error_messages.MessageLocalization;
import com.itextpdf.text.pdf.PdfAnnotation;
import com.itextpdf.text.pdf.PdfArray;
import com.itextpdf.text.pdf.PdfDictionary;
import com.itextpdf.text.pdf.PdfDiv;
import com.itextpdf.text.pdf.PdfIndirectReference;
import com.itextpdf.text.pdf.PdfName;
import com.itextpdf.text.pdf.PdfNull;
import com.itextpdf.text.pdf.PdfNumber;
import com.itextpdf.text.pdf.PdfObject;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPHeaderCell;
import com.itextpdf.text.pdf.PdfPRow;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfPTableBody;
import com.itextpdf.text.pdf.PdfPTableFooter;
import com.itextpdf.text.pdf.PdfPTableHeader;
import com.itextpdf.text.pdf.PdfRectangle;
import com.itextpdf.text.pdf.PdfString;
import com.itextpdf.text.pdf.PdfStructureTreeRoot;
import com.itextpdf.text.pdf.PdfTemplate;
import com.itextpdf.text.pdf.PdfWriter;
import com.itextpdf.text.pdf.interfaces.IAccessibleElement;
import com.itextpdf.text.pdf.interfaces.IPdfStructureElement;
import java.io.OutputStream;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Set;

public class PdfStructureElement
extends PdfDictionary
implements IPdfStructureElement {
    private AccessibleElementId elementId;
    private transient PdfStructureElement parent;
    private PdfIndirectReference reference;
    private PdfName structureType;
    private transient PdfStructureTreeRoot top;

    /*
     * Enabled aggressive block sorting
     */
    protected PdfStructureElement(PdfDictionary pdfObject, PdfName pdfObject2, AccessibleElementId serializable) {
        void var1_3;
        void var2_7;
        void var2_5;
        PdfDictionary pdfDictionary;
        this.elementId = pdfDictionary;
        if (pdfObject instanceof PdfStructureElement) {
            pdfDictionary = (PdfStructureElement)pdfObject;
            this.top = pdfDictionary.top;
            this.init((PdfDictionary)pdfObject, (PdfName)var2_5);
            this.parent = pdfDictionary;
            PdfName pdfName = PdfName.P;
            PdfIndirectReference pdfIndirectReference = pdfDictionary.reference;
        } else {
            if (!(pdfObject instanceof PdfStructureTreeRoot)) {
                return;
            }
            pdfDictionary = (PdfStructureTreeRoot)pdfObject;
            this.top = pdfDictionary;
            this.init((PdfDictionary)pdfObject, (PdfName)var2_5);
            PdfName pdfName = PdfName.P;
            PdfIndirectReference pdfIndirectReference = pdfDictionary.getReference();
        }
        this.put((PdfName)var1_3, (PdfObject)var2_7);
        this.put(PdfName.TYPE, PdfName.STRUCTELEM);
    }

    public PdfStructureElement(PdfStructureElement pdfStructureElement, PdfName pdfName) {
        this.top = pdfStructureElement.top;
        this.init(pdfStructureElement, pdfName);
        this.parent = pdfStructureElement;
        this.put(PdfName.P, pdfStructureElement.reference);
        this.put(PdfName.TYPE, PdfName.STRUCTELEM);
    }

    public PdfStructureElement(PdfStructureTreeRoot pdfStructureTreeRoot, PdfName pdfName) {
        this.top = pdfStructureTreeRoot;
        this.init(pdfStructureTreeRoot, pdfName);
        this.put(PdfName.P, pdfStructureTreeRoot.getReference());
        this.put(PdfName.TYPE, PdfName.STRUCTELEM);
    }

    private boolean colorsEqual(PdfArray pdfArray, float[] arrf) {
        if (Float.compare(arrf[0], pdfArray.getAsNumber(0).floatValue()) != 0) {
            return false;
        }
        if (Float.compare(arrf[1], pdfArray.getAsNumber(1).floatValue()) != 0) {
            return false;
        }
        if (Float.compare(arrf[2], pdfArray.getAsNumber(2).floatValue()) != 0) {
            return false;
        }
        return true;
    }

    private PdfObject getParentAttribute(IPdfStructureElement iPdfStructureElement, PdfName pdfName) {
        if (iPdfStructureElement == null) {
            return null;
        }
        return iPdfStructureElement.getAttribute(pdfName);
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    private void init(PdfDictionary pdfObject, PdfName pdfName) {
        PdfObject pdfObject2;
        if (!this.top.getWriter().getStandardStructElems().contains(pdfName)) {
            pdfObject2 = this.top.getAsDict(PdfName.ROLEMAP);
            if (pdfObject2 == null || !pdfObject2.contains(pdfName)) throw new ExceptionConverter(new DocumentException(MessageLocalization.getComposedMessage("unknown.structure.element.role.1", pdfName.toString())));
            this.structureType = pdfObject2.getAsName(pdfName);
        } else {
            this.structureType = pdfName;
        }
        PdfObject pdfObject3 = pdfObject.get(PdfName.K);
        if (pdfObject3 == null) {
            pdfObject2 = new PdfArray();
            pdfObject.put(PdfName.K, pdfObject2);
            pdfObject = pdfObject2;
        } else if (pdfObject3 instanceof PdfArray) {
            pdfObject = (PdfArray)pdfObject3;
        } else {
            pdfObject2 = new PdfArray();
            pdfObject2.add(pdfObject3);
            pdfObject.put(PdfName.K, pdfObject2);
            pdfObject = pdfObject2;
        }
        if (pdfObject.size() > 0) {
            if (pdfObject.getAsNumber(0) != null) {
                pdfObject.remove(0);
            }
            if (pdfObject.size() > 0 && (pdfObject2 = pdfObject.getAsDict(0)) != null && PdfName.MCR.equals(pdfObject2.getAsName(PdfName.TYPE))) {
                pdfObject.remove(0);
            }
        }
        this.put(PdfName.S, pdfName);
        this.reference = this.top.getWriter().getPdfIndirectReference();
        pdfObject.add(this.reference);
    }

    private void setColorAttribute(BaseColor object, PdfObject pdfObject, PdfName pdfName) {
        float[] arrf = new float[]{(float)object.getRed() / 255.0f, (float)object.getGreen() / 255.0f, (float)object.getBlue() / 255.0f};
        object = pdfObject != null && pdfObject instanceof PdfArray ? (this.colorsEqual((PdfArray)pdfObject, arrf) ? new PdfArray(arrf) : new PdfArray(arrf)) : new PdfArray(arrf);
        this.setAttribute(pdfName, (PdfObject)object);
    }

    private void setTextAlignAttribute(int n2) {
        block9 : {
            PdfName pdfName;
            block10 : {
                block8 : {
                    switch (n2) {
                        default: {
                            pdfName = null;
                            break;
                        }
                        case 3: {
                            pdfName = PdfName.JUSTIFY;
                            break;
                        }
                        case 2: {
                            pdfName = PdfName.END;
                            break;
                        }
                        case 1: {
                            pdfName = PdfName.CENTER;
                            break;
                        }
                        case 0: {
                            pdfName = PdfName.START;
                        }
                    }
                    PdfObject pdfObject = this.getParentAttribute(this.parent, PdfName.TEXTALIGN);
                    if (!(pdfObject instanceof PdfName)) break block8;
                    pdfObject = (PdfName)pdfObject;
                    if (pdfName == null || pdfObject.equals(pdfName)) break block9;
                    break block10;
                }
                if (pdfName == null || PdfName.START.equals(pdfName)) break block9;
            }
            this.setAttribute(PdfName.TEXTALIGN, pdfName);
        }
    }

    private void writeAttributes(Chunk object) {
        block5 : {
            Object object2;
            block11 : {
                float f2;
                block10 : {
                    HashMap<String, Object> hashMap;
                    IPdfStructureElement iPdfStructureElement;
                    block6 : {
                        BaseColor baseColor;
                        PdfObject pdfObject;
                        block8 : {
                            block9 : {
                                block7 : {
                                    if (object == null) break block5;
                                    if (object.getImage() != null) {
                                        this.writeAttributes(object.getImage());
                                        return;
                                    }
                                    hashMap = object.getAttributes();
                                    if (hashMap == null) break block5;
                                    this.setAttribute(PdfName.O, PdfName.LAYOUT);
                                    if (hashMap.containsKey("UNDERLINE")) {
                                        this.setAttribute(PdfName.TEXTDECORATIONTYPE, PdfName.UNDERLINE);
                                    }
                                    if (hashMap.containsKey("BACKGROUND")) {
                                        object2 = (BaseColor)((Object[])hashMap.get("BACKGROUND"))[0];
                                        this.setAttribute(PdfName.BACKGROUNDCOLOR, new PdfArray(new float[]{(float)object2.getRed() / 255.0f, (float)object2.getGreen() / 255.0f, (float)object2.getBlue() / 255.0f}));
                                    }
                                    iPdfStructureElement = (IPdfStructureElement)((Object)this.getParent(true));
                                    object2 = this.getParentAttribute(iPdfStructureElement, PdfName.COLOR);
                                    if (object.getFont() != null && object.getFont().getColor() != null) {
                                        this.setColorAttribute(object.getFont().getColor(), (PdfObject)object2, PdfName.COLOR);
                                    }
                                    object = this.getParentAttribute(iPdfStructureElement, PdfName.TEXTDECORATIONTHICKNESS);
                                    pdfObject = this.getParentAttribute(iPdfStructureElement, PdfName.TEXTDECORATIONCOLOR);
                                    if (!hashMap.containsKey("UNDERLINE")) break block6;
                                    object2 = (Object[][])hashMap.get("UNDERLINE");
                                    object2 = object2[((Object[][])object2).length - 1];
                                    baseColor = (BaseColor)object2[0];
                                    f2 = ((float[])object2[1])[0];
                                    if (!(object instanceof PdfNumber)) break block7;
                                    if (Float.compare(f2, ((PdfNumber)object).floatValue()) == 0) break block8;
                                    object2 = PdfName.TEXTDECORATIONTHICKNESS;
                                    object = new PdfNumber(f2);
                                    break block9;
                                }
                                object2 = PdfName.TEXTDECORATIONTHICKNESS;
                                object = new PdfNumber(f2);
                            }
                            this.setAttribute((PdfName)object2, (PdfObject)object);
                        }
                        if (baseColor != null) {
                            this.setColorAttribute(baseColor, pdfObject, PdfName.TEXTDECORATIONCOLOR);
                        }
                    }
                    if (!hashMap.containsKey("LINEHEIGHT")) break block5;
                    f2 = ((Float)hashMap.get("LINEHEIGHT")).floatValue();
                    object = this.getParentAttribute(iPdfStructureElement, PdfName.LINEHEIGHT);
                    if (!(object instanceof PdfNumber)) break block10;
                    if (Float.compare(((PdfNumber)object).floatValue(), f2) == 0) break block5;
                    object = PdfName.LINEHEIGHT;
                    object2 = new PdfNumber(f2);
                    break block11;
                }
                object = PdfName.LINEHEIGHT;
                object2 = new PdfNumber(f2);
            }
            this.setAttribute((PdfName)object, (PdfObject)object2);
        }
    }

    private void writeAttributes(Document document) {
    }

    private void writeAttributes(Image object) {
        if (object != null) {
            this.setAttribute(PdfName.O, PdfName.LAYOUT);
            if (object.getWidth() > 0.0f) {
                this.setAttribute(PdfName.WIDTH, new PdfNumber(object.getWidth()));
            }
            if (object.getHeight() > 0.0f) {
                this.setAttribute(PdfName.HEIGHT, new PdfNumber(object.getHeight()));
            }
            PdfRectangle pdfRectangle = new PdfRectangle((Rectangle)object, object.getRotation());
            this.setAttribute(PdfName.BBOX, pdfRectangle);
            if (object.getBackgroundColor() != null) {
                object = object.getBackgroundColor();
                this.setAttribute(PdfName.BACKGROUNDCOLOR, new PdfArray(new float[]{(float)object.getRed() / 255.0f, (float)object.getGreen() / 255.0f, (float)object.getBlue() / 255.0f}));
            }
        }
    }

    /*
     * Enabled aggressive block sorting
     */
    private void writeAttributes(List object) {
        block15 : {
            PdfObject pdfObject;
            block23 : {
                block22 : {
                    block20 : {
                        void var3_11;
                        block21 : {
                            block19 : {
                                block16 : {
                                    void var3_6;
                                    block18 : {
                                        block17 : {
                                            if (object == null) break block15;
                                            this.setAttribute(PdfName.O, PdfName.LIST);
                                            if (!object.isAutoindent()) break block16;
                                            if (!object.isNumbered()) break block17;
                                            if (object.isLettered()) {
                                                if (object.isLowercase()) {
                                                    pdfObject = PdfName.LISTNUMBERING;
                                                    PdfName pdfName = PdfName.LOWERROMAN;
                                                } else {
                                                    pdfObject = PdfName.LISTNUMBERING;
                                                    PdfName pdfName = PdfName.UPPERROMAN;
                                                }
                                            } else {
                                                pdfObject = PdfName.LISTNUMBERING;
                                                PdfName pdfName = PdfName.DECIMAL;
                                            }
                                            break block18;
                                        }
                                        if (!object.isLettered()) break block16;
                                        if (object.isLowercase()) {
                                            pdfObject = PdfName.LISTNUMBERING;
                                            PdfName pdfName = PdfName.LOWERALPHA;
                                        } else {
                                            pdfObject = PdfName.LISTNUMBERING;
                                            PdfName pdfName = PdfName.UPPERALPHA;
                                        }
                                    }
                                    this.setAttribute((PdfName)pdfObject, (PdfObject)var3_6);
                                }
                                if (!((pdfObject = this.getParentAttribute(this.parent, PdfName.STARTINDENT)) instanceof PdfNumber)) break block19;
                                if (Float.compare(((PdfNumber)pdfObject).floatValue(), object.getIndentationLeft()) == 0) break block20;
                                pdfObject = PdfName.STARTINDENT;
                                PdfNumber pdfNumber = new PdfNumber(object.getIndentationLeft());
                                break block21;
                            }
                            if (Math.abs(object.getIndentationLeft()) <= Float.MIN_VALUE) break block20;
                            pdfObject = PdfName.STARTINDENT;
                            PdfNumber pdfNumber = new PdfNumber(object.getIndentationLeft());
                        }
                        this.setAttribute((PdfName)pdfObject, (PdfObject)var3_11);
                    }
                    if (!((pdfObject = this.getParentAttribute(this.parent, PdfName.ENDINDENT)) instanceof PdfNumber)) break block22;
                    if (Float.compare(((PdfNumber)pdfObject).floatValue(), object.getIndentationRight()) == 0) break block15;
                    pdfObject = PdfName.ENDINDENT;
                    PdfNumber pdfNumber = new PdfNumber(object.getIndentationRight());
                    object = pdfObject;
                    pdfObject = pdfNumber;
                    break block23;
                }
                if (Float.compare(object.getIndentationRight(), 0.0f) == 0) break block15;
                PdfName pdfName = PdfName.ENDINDENT;
                pdfObject = new PdfNumber(object.getIndentationRight());
                object = pdfName;
            }
            this.setAttribute((PdfName)object, pdfObject);
        }
    }

    private void writeAttributes(ListBody listBody) {
    }

    private void writeAttributes(ListItem serializable) {
        block4 : {
            PdfObject pdfObject;
            block9 : {
                PdfObject pdfObject2;
                block8 : {
                    block6 : {
                        block7 : {
                            block5 : {
                                if (serializable == null) break block4;
                                pdfObject = this.getParentAttribute(this.parent, PdfName.STARTINDENT);
                                if (!(pdfObject instanceof PdfNumber)) break block5;
                                if (Float.compare(((PdfNumber)pdfObject).floatValue(), serializable.getIndentationLeft()) == 0) break block6;
                                pdfObject = PdfName.STARTINDENT;
                                pdfObject2 = new PdfNumber(serializable.getIndentationLeft());
                                break block7;
                            }
                            if (Math.abs(serializable.getIndentationLeft()) <= Float.MIN_VALUE) break block6;
                            pdfObject = PdfName.STARTINDENT;
                            pdfObject2 = new PdfNumber(serializable.getIndentationLeft());
                        }
                        this.setAttribute((PdfName)pdfObject, pdfObject2);
                    }
                    if (!((pdfObject = this.getParentAttribute(this.parent, PdfName.ENDINDENT)) instanceof PdfNumber)) break block8;
                    if (Float.compare(((PdfNumber)pdfObject).floatValue(), serializable.getIndentationRight()) == 0) break block4;
                    pdfObject = PdfName.ENDINDENT;
                    pdfObject2 = new PdfNumber(serializable.getIndentationRight());
                    serializable = pdfObject;
                    pdfObject = pdfObject2;
                    break block9;
                }
                if (Float.compare(serializable.getIndentationRight(), 0.0f) == 0) break block4;
                pdfObject2 = PdfName.ENDINDENT;
                pdfObject = new PdfNumber(serializable.getIndentationRight());
                serializable = pdfObject2;
            }
            this.setAttribute((PdfName)serializable, pdfObject);
        }
    }

    private void writeAttributes(ListLabel object) {
        block2 : {
            PdfObject pdfObject;
            block4 : {
                block3 : {
                    if (object == null) break block2;
                    pdfObject = this.getParentAttribute(this.parent, PdfName.STARTINDENT);
                    if (!(pdfObject instanceof PdfNumber)) break block3;
                    if (Float.compare(((PdfNumber)pdfObject).floatValue(), object.getIndentation()) == 0) break block2;
                    pdfObject = PdfName.STARTINDENT;
                    PdfNumber pdfNumber = new PdfNumber(object.getIndentation());
                    object = pdfObject;
                    pdfObject = pdfNumber;
                    break block4;
                }
                if (Math.abs(object.getIndentation()) <= Float.MIN_VALUE) break block2;
                PdfName pdfName = PdfName.STARTINDENT;
                pdfObject = new PdfNumber(object.getIndentation());
                object = pdfName;
            }
            this.setAttribute((PdfName)object, pdfObject);
        }
    }

    private void writeAttributes(Paragraph paragraph) {
        block13 : {
            block18 : {
                PdfNumber pdfNumber;
                PdfObject pdfObject;
                block19 : {
                    block17 : {
                        IPdfStructureElement iPdfStructureElement;
                        block15 : {
                            block16 : {
                                block14 : {
                                    if (paragraph == null) break block13;
                                    this.setAttribute(PdfName.O, PdfName.LAYOUT);
                                    if (Float.compare(paragraph.getSpacingBefore(), 0.0f) != 0) {
                                        this.setAttribute(PdfName.SPACEBEFORE, new PdfNumber(paragraph.getSpacingBefore()));
                                    }
                                    if (Float.compare(paragraph.getSpacingAfter(), 0.0f) != 0) {
                                        this.setAttribute(PdfName.SPACEAFTER, new PdfNumber(paragraph.getSpacingAfter()));
                                    }
                                    boolean bl2 = true;
                                    iPdfStructureElement = (IPdfStructureElement)((Object)this.getParent(true));
                                    pdfObject = this.getParentAttribute(iPdfStructureElement, PdfName.COLOR);
                                    if (paragraph.getFont() != null && paragraph.getFont().getColor() != null) {
                                        this.setColorAttribute(paragraph.getFont().getColor(), pdfObject, PdfName.COLOR);
                                    }
                                    pdfObject = this.getParentAttribute(iPdfStructureElement, PdfName.TEXTINDENT);
                                    if (Float.compare(paragraph.getFirstLineIndent(), 0.0f) != 0) {
                                        boolean bl3 = bl2;
                                        if (pdfObject instanceof PdfNumber) {
                                            bl3 = bl2;
                                            if (Float.compare(((PdfNumber)pdfObject).floatValue(), new Float(paragraph.getFirstLineIndent()).floatValue()) == 0) {
                                                bl3 = false;
                                            }
                                        }
                                        if (bl3) {
                                            this.setAttribute(PdfName.TEXTINDENT, new PdfNumber(paragraph.getFirstLineIndent()));
                                        }
                                    }
                                    if (!((pdfObject = this.getParentAttribute(iPdfStructureElement, PdfName.STARTINDENT)) instanceof PdfNumber)) break block14;
                                    if (Float.compare(((PdfNumber)pdfObject).floatValue(), paragraph.getIndentationLeft()) == 0) break block15;
                                    pdfObject = PdfName.STARTINDENT;
                                    pdfNumber = new PdfNumber(paragraph.getIndentationLeft());
                                    break block16;
                                }
                                if (Math.abs(paragraph.getIndentationLeft()) <= Float.MIN_VALUE) break block15;
                                pdfObject = PdfName.STARTINDENT;
                                pdfNumber = new PdfNumber(paragraph.getIndentationLeft());
                            }
                            this.setAttribute((PdfName)pdfObject, pdfNumber);
                        }
                        if (!((pdfObject = this.getParentAttribute(iPdfStructureElement, PdfName.ENDINDENT)) instanceof PdfNumber)) break block17;
                        if (Float.compare(((PdfNumber)pdfObject).floatValue(), paragraph.getIndentationRight()) == 0) break block18;
                        pdfObject = PdfName.ENDINDENT;
                        pdfNumber = new PdfNumber(paragraph.getIndentationRight());
                        break block19;
                    }
                    if (Float.compare(paragraph.getIndentationRight(), 0.0f) == 0) break block18;
                    pdfObject = PdfName.ENDINDENT;
                    pdfNumber = new PdfNumber(paragraph.getIndentationRight());
                }
                this.setAttribute((PdfName)pdfObject, pdfNumber);
            }
            this.setTextAlignAttribute(paragraph.getAlignment());
        }
    }

    private void writeAttributes(PdfDiv pdfDiv) {
        if (pdfDiv != null) {
            if (pdfDiv.getBackgroundColor() != null) {
                this.setColorAttribute(pdfDiv.getBackgroundColor(), null, PdfName.BACKGROUNDCOLOR);
            }
            this.setTextAlignAttribute(pdfDiv.getTextAlignment());
        }
    }

    private void writeAttributes(PdfPCell object) {
        if (object != null) {
            this.setAttribute(PdfName.O, PdfName.TABLE);
            if (object.getColspan() != 1) {
                this.setAttribute(PdfName.COLSPAN, new PdfNumber(object.getColspan()));
            }
            if (object.getRowspan() != 1) {
                this.setAttribute(PdfName.ROWSPAN, new PdfNumber(object.getRowspan()));
            }
            if (object.getHeaders() != null) {
                PdfArray pdfArray = new PdfArray();
                for (PdfPHeaderCell pdfPHeaderCell : object.getHeaders()) {
                    if (pdfPHeaderCell.getName() == null) continue;
                    pdfArray.add(new PdfString(pdfPHeaderCell.getName()));
                }
                if (!pdfArray.isEmpty()) {
                    this.setAttribute(PdfName.HEADERS, pdfArray);
                }
            }
            if (object.getCalculatedHeight() > 0.0f) {
                this.setAttribute(PdfName.HEIGHT, new PdfNumber(object.getCalculatedHeight()));
            }
            if (object.getWidth() > 0.0f) {
                this.setAttribute(PdfName.WIDTH, new PdfNumber(object.getWidth()));
            }
            if (object.getBackgroundColor() != null) {
                object = object.getBackgroundColor();
                this.setAttribute(PdfName.BACKGROUNDCOLOR, new PdfArray(new float[]{(float)object.getRed() / 255.0f, (float)object.getGreen() / 255.0f, (float)object.getBlue() / 255.0f}));
            }
        }
    }

    private void writeAttributes(PdfPHeaderCell pdfPHeaderCell) {
        if (pdfPHeaderCell != null) {
            block8 : {
                if (pdfPHeaderCell.getScope() != 0) {
                    PdfName pdfName;
                    PdfName pdfName2;
                    switch (pdfPHeaderCell.getScope()) {
                        default: {
                            break block8;
                        }
                        case 3: {
                            pdfName2 = PdfName.SCOPE;
                            pdfName = PdfName.BOTH;
                            break;
                        }
                        case 2: {
                            pdfName2 = PdfName.SCOPE;
                            pdfName = PdfName.COLUMN;
                            break;
                        }
                        case 1: {
                            pdfName2 = PdfName.SCOPE;
                            pdfName = PdfName.ROW;
                        }
                    }
                    this.setAttribute(pdfName2, pdfName);
                }
            }
            if (pdfPHeaderCell.getName() != null) {
                this.setAttribute(PdfName.NAME, new PdfName(pdfPHeaderCell.getName()));
            }
            this.writeAttributes((PdfPCell)pdfPHeaderCell);
        }
    }

    private void writeAttributes(PdfPRow pdfPRow) {
        if (pdfPRow != null) {
            this.setAttribute(PdfName.O, PdfName.TABLE);
        }
    }

    private void writeAttributes(PdfPTable pdfPTable) {
        if (pdfPTable != null) {
            this.setAttribute(PdfName.O, PdfName.TABLE);
            if (Float.compare(pdfPTable.getSpacingBefore(), 0.0f) != 0) {
                this.setAttribute(PdfName.SPACEBEFORE, new PdfNumber(pdfPTable.getSpacingBefore()));
            }
            if (Float.compare(pdfPTable.getSpacingAfter(), 0.0f) != 0) {
                this.setAttribute(PdfName.SPACEAFTER, new PdfNumber(pdfPTable.getSpacingAfter()));
            }
            if (pdfPTable.getTotalHeight() > 0.0f) {
                this.setAttribute(PdfName.HEIGHT, new PdfNumber(pdfPTable.getTotalHeight()));
            }
            if (pdfPTable.getTotalWidth() > 0.0f) {
                this.setAttribute(PdfName.WIDTH, new PdfNumber(pdfPTable.getTotalWidth()));
            }
        }
    }

    private void writeAttributes(PdfPTableBody pdfPTableBody) {
    }

    private void writeAttributes(PdfPTableFooter pdfPTableFooter) {
    }

    private void writeAttributes(PdfPTableHeader pdfPTableHeader) {
        if (pdfPTableHeader != null) {
            this.setAttribute(PdfName.O, PdfName.TABLE);
        }
    }

    private void writeAttributes(PdfTemplate object) {
        if (object != null) {
            this.setAttribute(PdfName.O, PdfName.LAYOUT);
            if (object.getWidth() > 0.0f) {
                this.setAttribute(PdfName.WIDTH, new PdfNumber(object.getWidth()));
            }
            if (object.getHeight() > 0.0f) {
                this.setAttribute(PdfName.HEIGHT, new PdfNumber(object.getHeight()));
            }
            object = new PdfRectangle(object.getBoundingBox());
            this.setAttribute(PdfName.BBOX, (PdfObject)object);
        }
    }

    @Override
    public PdfObject getAttribute(PdfName pdfName) {
        PdfDictionary pdfDictionary = this.getAsDict(PdfName.A);
        if (pdfDictionary != null && pdfDictionary.contains(pdfName)) {
            return pdfDictionary.get(pdfName);
        }
        pdfDictionary = this.getParent();
        if (pdfDictionary instanceof PdfStructureElement) {
            return ((PdfStructureElement)pdfDictionary).getAttribute(pdfName);
        }
        if (pdfDictionary instanceof PdfStructureTreeRoot) {
            return ((PdfStructureTreeRoot)pdfDictionary).getAttribute(pdfName);
        }
        return new PdfNull();
    }

    protected AccessibleElementId getElementId() {
        return this.elementId;
    }

    public PdfDictionary getParent() {
        return this.getParent(false);
    }

    public PdfDictionary getParent(boolean bl2) {
        if (this.parent == null && bl2) {
            return this.top;
        }
        return this.parent;
    }

    public PdfIndirectReference getReference() {
        return this.reference;
    }

    public PdfName getStructureType() {
        return this.structureType;
    }

    void setAnnotation(PdfAnnotation pdfAnnotation, PdfIndirectReference pdfIndirectReference) {
        PdfObject pdfObject = this.getAsArray(PdfName.K);
        PdfArray pdfArray = pdfObject;
        if (pdfObject == null) {
            pdfArray = new PdfArray();
            pdfObject = this.get(PdfName.K);
            if (pdfObject != null) {
                pdfArray.add(pdfObject);
            }
            this.put(PdfName.K, pdfArray);
        }
        pdfObject = new PdfDictionary();
        pdfObject.put(PdfName.TYPE, PdfName.OBJR);
        pdfObject.put(PdfName.OBJ, pdfAnnotation.getIndirectReference());
        if (pdfAnnotation.getRole() == PdfName.FORM) {
            pdfObject.put(PdfName.PG, pdfIndirectReference);
        }
        pdfArray.add(pdfObject);
    }

    @Override
    public void setAttribute(PdfName pdfName, PdfObject pdfObject) {
        PdfDictionary pdfDictionary;
        PdfDictionary pdfDictionary2 = pdfDictionary = this.getAsDict(PdfName.A);
        if (pdfDictionary == null) {
            pdfDictionary2 = new PdfDictionary();
            this.put(PdfName.A, pdfDictionary2);
        }
        pdfDictionary2.put(pdfName, pdfObject);
    }

    void setPageMark(int n2, int n3) {
        if (n3 >= 0) {
            this.put(PdfName.K, new PdfNumber(n3));
        }
        this.top.setPageMark(n2, this.reference);
    }

    protected void setStructureElementParent(PdfStructureElement pdfStructureElement) {
        this.parent = pdfStructureElement;
    }

    protected void setStructureTreeRoot(PdfStructureTreeRoot pdfStructureTreeRoot) {
        this.top = pdfStructureTreeRoot;
    }

    @Override
    public void toPdf(PdfWriter pdfWriter, OutputStream outputStream) {
        PdfWriter.checkPdfIsoConformance(pdfWriter, 16, this);
        super.toPdf(pdfWriter, outputStream);
    }

    public void writeAttributes(IAccessibleElement iAccessibleElement) {
        if (iAccessibleElement instanceof ListItem) {
            this.writeAttributes((ListItem)iAccessibleElement);
        } else if (iAccessibleElement instanceof Paragraph) {
            this.writeAttributes((Paragraph)iAccessibleElement);
        } else if (iAccessibleElement instanceof Chunk) {
            this.writeAttributes((Chunk)iAccessibleElement);
        } else if (iAccessibleElement instanceof Image) {
            this.writeAttributes((Image)iAccessibleElement);
        } else if (iAccessibleElement instanceof List) {
            this.writeAttributes((List)iAccessibleElement);
        } else if (iAccessibleElement instanceof ListLabel) {
            this.writeAttributes((ListLabel)iAccessibleElement);
        } else if (iAccessibleElement instanceof ListBody) {
            this.writeAttributes((ListBody)iAccessibleElement);
        } else if (iAccessibleElement instanceof PdfPTable) {
            this.writeAttributes((PdfPTable)iAccessibleElement);
        } else if (iAccessibleElement instanceof PdfPRow) {
            this.writeAttributes((PdfPRow)iAccessibleElement);
        } else if (iAccessibleElement instanceof PdfPHeaderCell) {
            this.writeAttributes((PdfPHeaderCell)iAccessibleElement);
        } else if (iAccessibleElement instanceof PdfPCell) {
            this.writeAttributes((PdfPCell)iAccessibleElement);
        } else if (iAccessibleElement instanceof PdfPTableHeader) {
            this.writeAttributes((PdfPTableHeader)iAccessibleElement);
        } else if (iAccessibleElement instanceof PdfPTableFooter) {
            this.writeAttributes((PdfPTableFooter)iAccessibleElement);
        } else if (iAccessibleElement instanceof PdfPTableBody) {
            this.writeAttributes((PdfPTableBody)iAccessibleElement);
        } else if (iAccessibleElement instanceof PdfDiv) {
            this.writeAttributes((PdfDiv)iAccessibleElement);
        } else if (iAccessibleElement instanceof PdfTemplate) {
            this.writeAttributes((PdfTemplate)iAccessibleElement);
        } else if (iAccessibleElement instanceof Document) {
            this.writeAttributes((Document)iAccessibleElement);
        }
        if (iAccessibleElement.getAccessibleAttributes() != null) {
            for (PdfName pdfName : iAccessibleElement.getAccessibleAttributes().keySet()) {
                if (pdfName.equals(PdfName.ID)) {
                    PdfObject pdfObject = iAccessibleElement.getAccessibleAttribute(pdfName);
                    this.put(pdfName, pdfObject);
                    this.top.putIDTree(pdfObject.toString(), this.getReference());
                    continue;
                }
                if (!(pdfName.equals(PdfName.LANG) || pdfName.equals(PdfName.ALT) || pdfName.equals(PdfName.ACTUALTEXT) || pdfName.equals(PdfName.E) || pdfName.equals(PdfName.T))) {
                    this.setAttribute(pdfName, iAccessibleElement.getAccessibleAttribute(pdfName));
                    continue;
                }
                this.put(pdfName, iAccessibleElement.getAccessibleAttribute(pdfName));
            }
        }
    }
}

