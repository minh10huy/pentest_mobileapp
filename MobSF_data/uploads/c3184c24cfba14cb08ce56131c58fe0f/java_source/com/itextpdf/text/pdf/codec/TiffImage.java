/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf.codec;

import com.itextpdf.text.ExceptionConverter;
import com.itextpdf.text.Image;
import com.itextpdf.text.error_messages.MessageLocalization;
import com.itextpdf.text.pdf.RandomAccessFileOrArray;
import com.itextpdf.text.pdf.codec.TIFFDirectory;
import com.itextpdf.text.pdf.codec.TIFFField;
import java.io.Serializable;
import java.util.zip.DataFormatException;
import java.util.zip.DeflaterOutputStream;
import java.util.zip.Inflater;

public class TiffImage {
    static Image ProcessExtraSamples(DeflaterOutputStream deflaterOutputStream, DeflaterOutputStream deflaterOutputStream2, byte[] arrby, int n2, int n3, int n4, int n5) {
        if (n3 == 8) {
            int n6 = n4 * n5;
            byte[] arrby2 = new byte[n6];
            n5 = 0;
            n3 = 0;
            n4 = 0;
            while (n5 < n6 * n2) {
                int n7 = 0;
                while (n7 < n2 - 1) {
                    arrby[n3] = arrby[n5 + n7];
                    ++n7;
                    ++n3;
                }
                arrby2[n4] = arrby[(n5 += n2) - 1];
                ++n4;
            }
            deflaterOutputStream.write(arrby, 0, n3);
            deflaterOutputStream2.write(arrby2, 0, n4);
            return null;
        }
        throw new IllegalArgumentException(MessageLocalization.getComposedMessage("extra.samples.are.not.supported", new Object[0]));
    }

    public static void applyPredictor(byte[] arrby, int n2, int n3, int n4, int n5) {
        if (n2 != 2) {
            return;
        }
        for (n2 = 0; n2 < n4; ++n2) {
            int n6 = (n2 * n3 + 1) * n5;
            for (int i2 = n5; i2 < n3 * n5; ++i2) {
                arrby[n6] = (byte)(arrby[n6] + arrby[n6 - n5]);
                ++n6;
            }
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public static void decodePackbits(byte[] arrby, byte[] arrby2) {
        int n2 = 0;
        int n3 = 0;
        block2 : do {
            int n4;
            byte by2;
            block7 : {
                block8 : {
                    block6 : {
                        try {
                            if (n2 >= arrby2.length) break block6;
                        }
                        catch (Exception exception) {
                            return;
                        }
                        n4 = n3 + 1;
                        by2 = arrby[n3];
                        if (by2 < 0 || by2 > 127) break block7;
                        break block8;
                    }
                    return;
                }
                n3 = n4;
                n4 = 0;
                do {
                    if (n4 >= by2 + 1) continue block2;
                    arrby2[n2] = arrby[n3];
                    ++n4;
                    ++n2;
                    ++n3;
                } while (true);
            }
            if (by2 <= -1 && by2 >= -127) {
                byte by3 = arrby[n4];
                for (n3 = 0; n3 < - by2 + 1; ++n3, ++n2) {
                    arrby2[n2] = by3;
                }
                n3 = n4 + 1;
                continue;
            }
            n3 = n4 + 1;
        } while (true);
    }

    static long[] getArrayLongShort(TIFFDirectory serializable, int n2) {
        if ((serializable = serializable.getField(n2)) == null) {
            return null;
        }
        if (serializable.getType() == 4) {
            return serializable.getAsLongs();
        }
        serializable = serializable.getAsChars();
        long[] arrl = new long[((Serializable)serializable).length];
        for (n2 = 0; n2 < ((Serializable)serializable).length; ++n2) {
            arrl[n2] = (long)serializable[n2];
        }
        return arrl;
    }

    static int getDpi(TIFFField arrl, int n2) {
        double d2;
        if (arrl == null) {
            return 0;
        }
        arrl = arrl.getAsRational(0);
        float f2 = (float)arrl[0] / (float)arrl[1];
        switch (n2) {
            default: {
                return 0;
            }
            case 3: {
                d2 = (double)f2 * 2.54;
                break;
            }
            case 1: 
            case 2: {
                d2 = f2;
            }
        }
        return (int)(d2 + 0.5);
    }

    public static int getNumberOfPages(RandomAccessFileOrArray randomAccessFileOrArray) {
        try {
            int n2 = TIFFDirectory.getNumDirectories(randomAccessFileOrArray);
            return n2;
        }
        catch (Exception exception) {
            throw new ExceptionConverter(exception);
        }
    }

    public static Image getTiffImage(RandomAccessFileOrArray randomAccessFileOrArray, int n2) {
        return TiffImage.getTiffImage(randomAccessFileOrArray, n2, false);
    }

    public static Image getTiffImage(RandomAccessFileOrArray randomAccessFileOrArray, int n2, boolean bl2) {
        return TiffImage.getTiffImage(randomAccessFileOrArray, false, n2, bl2);
    }

    public static Image getTiffImage(RandomAccessFileOrArray randomAccessFileOrArray, boolean bl2, int n2) {
        return TiffImage.getTiffImage(randomAccessFileOrArray, bl2, n2, false);
    }

    /*
     * Exception decompiling
     */
    public static Image getTiffImage(RandomAccessFileOrArray var0, boolean var1_3, int var2_4, boolean var3_5) {
        // This method has failed to decompile.  When submitting a bug report, please provide this stack trace, and (if you hold appropriate legal rights) the relevant class file.
        // org.benf.cfr.reader.util.ConfusedCFRException: First case is not immediately after switch.
        // org.benf.cfr.reader.bytecode.analysis.opgraph.op3rewriters.SwitchReplacer.examineSwitchContiguity(SwitchReplacer.java:366)
        // org.benf.cfr.reader.bytecode.analysis.opgraph.op3rewriters.SwitchReplacer.replaceRawSwitches(SwitchReplacer.java:65)
        // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisInner(CodeAnalyser.java:416)
        // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisOrWrapFail(CodeAnalyser.java:196)
        // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysis(CodeAnalyser.java:141)
        // org.benf.cfr.reader.entities.attributes.AttributeCode.analyse(AttributeCode.java:95)
        // org.benf.cfr.reader.entities.Method.analyse(Method.java:372)
        // org.benf.cfr.reader.entities.ClassFile.analyseMid(ClassFile.java:867)
        // org.benf.cfr.reader.entities.ClassFile.analyseTop(ClassFile.java:768)
        // org.benf.cfr.reader.Main.doJar(Main.java:141)
        // org.benf.cfr.reader.Main.main(Main.java:242)
        throw new IllegalStateException("Decompilation failed");
    }

    protected static Image getTiffImageColor(TIFFDirectory tIFFDirectory, RandomAccessFileOrArray randomAccessFileOrArray) {
        RuntimeException runtimeException;
        super("d2j fail translate: java.lang.RuntimeException: can not merge I and Z\n\tat com.googlecode.dex2jar.ir.TypeClass.merge(TypeClass.java:100)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeRef.updateTypeClass(TypeTransformer.java:174)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.copyTypes(TypeTransformer.java:311)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.fixTypes(TypeTransformer.java:226)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.analyze(TypeTransformer.java:207)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer.transform(TypeTransformer.java:44)\n\tat com.googlecode.d2j.dex.Dex2jar$2.optimize(Dex2jar.java:162)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertCode(Dex2Asm.java:414)\n\tat com.googlecode.d2j.dex.ExDex2Asm.convertCode(ExDex2Asm.java:42)\n\tat com.googlecode.d2j.dex.Dex2jar$2.convertCode(Dex2jar.java:128)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertMethod(Dex2Asm.java:509)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertClass(Dex2Asm.java:406)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertDex(Dex2Asm.java:422)\n\tat com.googlecode.d2j.dex.Dex2jar.doTranslate(Dex2jar.java:172)\n\tat com.googlecode.d2j.dex.Dex2jar.to(Dex2jar.java:272)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.doCommandLine(Dex2jarCmd.java:108)\n\tat com.googlecode.dex2jar.tools.BaseCmd.doMain(BaseCmd.java:288)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.main(Dex2jarCmd.java:32)\n");
        throw runtimeException;
    }

    public static void inflate(byte[] arrby, byte[] arrby2) {
        Inflater inflater = new Inflater();
        inflater.setInput(arrby);
        try {
            inflater.inflate(arrby2);
            return;
        }
        catch (DataFormatException dataFormatException) {
            throw new ExceptionConverter(dataFormatException);
        }
    }
}

