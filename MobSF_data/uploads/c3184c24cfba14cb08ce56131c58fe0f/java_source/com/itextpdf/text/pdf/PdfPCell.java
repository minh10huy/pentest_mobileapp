/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf;

import com.itextpdf.text.AccessibleElementId;
import com.itextpdf.text.Chunk;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.ExceptionConverter;
import com.itextpdf.text.Image;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.error_messages.MessageLocalization;
import com.itextpdf.text.pdf.ColumnText;
import com.itextpdf.text.pdf.PdfContentByte;
import com.itextpdf.text.pdf.PdfDiv;
import com.itextpdf.text.pdf.PdfName;
import com.itextpdf.text.pdf.PdfObject;
import com.itextpdf.text.pdf.PdfPCellEvent;
import com.itextpdf.text.pdf.PdfPHeaderCell;
import com.itextpdf.text.pdf.PdfPRow;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.events.PdfPCellEventForwarder;
import com.itextpdf.text.pdf.interfaces.IAccessibleElement;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

public class PdfPCell
extends Rectangle
implements IAccessibleElement {
    protected HashMap<PdfName, PdfObject> accessibleAttributes = null;
    private float cachedMaxHeight;
    private float calculatedHeight = 0.0f;
    private PdfPCellEvent cellEvent;
    private int colspan = 1;
    private ColumnText column = new ColumnText(null);
    private float fixedHeight = 0.0f;
    protected ArrayList<PdfPHeaderCell> headers = null;
    protected AccessibleElementId id = new AccessibleElementId();
    private Image image;
    private float minimumHeight;
    private boolean noWrap = false;
    private float paddingBottom = 2.0f;
    private float paddingLeft = 2.0f;
    private float paddingRight = 2.0f;
    private float paddingTop = 2.0f;
    protected Phrase phrase;
    protected PdfName role = PdfName.TD;
    private int rotation;
    private int rowspan = 1;
    private PdfPTable table;
    private boolean useBorderPadding = false;
    private boolean useDescender = false;
    private int verticalAlignment = 4;

    public PdfPCell() {
        super(0.0f, 0.0f, 0.0f, 0.0f);
        this.borderWidth = 0.5f;
        this.border = 15;
        this.column.setLeading(0.0f, 1.0f);
    }

    public PdfPCell(Image image) {
        this(image, false);
    }

    public PdfPCell(Image element, boolean bl2) {
        super(0.0f, 0.0f, 0.0f, 0.0f);
        this.borderWidth = 0.5f;
        this.border = 15;
        this.column.setLeading(0.0f, 1.0f);
        if (bl2) {
            this.image = element;
            this.setPadding(this.borderWidth / 2.0f);
            return;
        }
        element.setScaleToFitLineWhenOverflow(false);
        ColumnText columnText = this.column;
        element = new Phrase(new Chunk((Image)element, 0.0f, 0.0f, true));
        this.phrase = element;
        columnText.addText((Phrase)element);
        this.setPadding(0.0f);
    }

    public PdfPCell(Phrase phrase) {
        super(0.0f, 0.0f, 0.0f, 0.0f);
        this.borderWidth = 0.5f;
        this.border = 15;
        ColumnText columnText = this.column;
        this.phrase = phrase;
        columnText.addText(phrase);
        this.column.setLeading(0.0f, 1.0f);
    }

    public PdfPCell(PdfPCell pdfPCell) {
        super(pdfPCell.llx, pdfPCell.lly, pdfPCell.urx, pdfPCell.ury);
        this.cloneNonPositionParameters(pdfPCell);
        this.verticalAlignment = pdfPCell.verticalAlignment;
        this.paddingLeft = pdfPCell.paddingLeft;
        this.paddingRight = pdfPCell.paddingRight;
        this.paddingTop = pdfPCell.paddingTop;
        this.paddingBottom = pdfPCell.paddingBottom;
        this.phrase = pdfPCell.phrase;
        this.fixedHeight = pdfPCell.fixedHeight;
        this.minimumHeight = pdfPCell.minimumHeight;
        this.noWrap = pdfPCell.noWrap;
        this.colspan = pdfPCell.colspan;
        this.rowspan = pdfPCell.rowspan;
        if (pdfPCell.table != null) {
            this.table = new PdfPTable(pdfPCell.table);
        }
        this.image = Image.getInstance(pdfPCell.image);
        this.cellEvent = pdfPCell.cellEvent;
        this.useDescender = pdfPCell.useDescender;
        this.column = ColumnText.duplicate(pdfPCell.column);
        this.useBorderPadding = pdfPCell.useBorderPadding;
        this.rotation = pdfPCell.rotation;
        this.id = pdfPCell.id;
        this.role = pdfPCell.role;
        if (pdfPCell.accessibleAttributes != null) {
            this.accessibleAttributes = new HashMap<PdfName, PdfObject>(pdfPCell.accessibleAttributes);
        }
        this.headers = pdfPCell.headers;
    }

    public PdfPCell(PdfPTable pdfPTable) {
        this(pdfPTable, null);
    }

    public PdfPCell(PdfPTable pdfPTable, PdfPCell pdfPCell) {
        super(0.0f, 0.0f, 0.0f, 0.0f);
        this.borderWidth = 0.5f;
        this.border = 15;
        this.column.setLeading(0.0f, 1.0f);
        this.table = pdfPTable;
        pdfPTable.setWidthPercentage(100.0f);
        pdfPTable.setExtendLastRow(true);
        this.column.addElement(pdfPTable);
        if (pdfPCell != null) {
            this.cloneNonPositionParameters(pdfPCell);
            this.verticalAlignment = pdfPCell.verticalAlignment;
            this.paddingLeft = pdfPCell.paddingLeft;
            this.paddingRight = pdfPCell.paddingRight;
            this.paddingTop = pdfPCell.paddingTop;
            this.paddingBottom = pdfPCell.paddingBottom;
            this.colspan = pdfPCell.colspan;
            this.rowspan = pdfPCell.rowspan;
            this.cellEvent = pdfPCell.cellEvent;
            this.useDescender = pdfPCell.useDescender;
            this.useBorderPadding = pdfPCell.useBorderPadding;
            this.rotation = pdfPCell.rotation;
            return;
        }
        this.setPadding(0.0f);
    }

    public void addElement(Element element) {
        if (this.table != null) {
            this.table = null;
            this.column.setText(null);
        }
        if (element instanceof PdfPTable) {
            ((PdfPTable)element).setSplitLate(false);
        } else if (element instanceof PdfDiv) {
            for (Element element2 : ((PdfDiv)element).getContent()) {
                if (!(element2 instanceof PdfPTable)) continue;
                ((PdfPTable)element2).setSplitLate(false);
            }
        }
        this.column.addElement(element);
    }

    public void addHeader(PdfPHeaderCell pdfPHeaderCell) {
        if (this.headers == null) {
            this.headers = new ArrayList();
        }
        this.headers.add(pdfPHeaderCell);
    }

    @Override
    public PdfObject getAccessibleAttribute(PdfName pdfName) {
        if (this.accessibleAttributes != null) {
            return this.accessibleAttributes.get(pdfName);
        }
        return null;
    }

    @Override
    public HashMap<PdfName, PdfObject> getAccessibleAttributes() {
        return this.accessibleAttributes;
    }

    public int getArabicOptions() {
        return this.column.getArabicOptions();
    }

    public float getCachedMaxHeight() {
        return this.cachedMaxHeight;
    }

    public float getCalculatedHeight() {
        return this.calculatedHeight;
    }

    public PdfPCellEvent getCellEvent() {
        return this.cellEvent;
    }

    public int getColspan() {
        return this.colspan;
    }

    public ColumnText getColumn() {
        return this.column;
    }

    public List<Element> getCompositeElements() {
        return this.getColumn().compositeElements;
    }

    public float getEffectivePaddingBottom() {
        if (this.isUseBorderPadding()) {
            float f2 = this.getBorderWidthBottom();
            float f3 = this.isUseVariableBorders() ? 1.0f : 2.0f;
            f3 = f2 / f3;
            return this.paddingBottom + f3;
        }
        return this.paddingBottom;
    }

    public float getEffectivePaddingLeft() {
        if (this.isUseBorderPadding()) {
            float f2 = this.getBorderWidthLeft();
            float f3 = this.isUseVariableBorders() ? 1.0f : 2.0f;
            f3 = f2 / f3;
            return this.paddingLeft + f3;
        }
        return this.paddingLeft;
    }

    public float getEffectivePaddingRight() {
        if (this.isUseBorderPadding()) {
            float f2 = this.getBorderWidthRight();
            float f3 = this.isUseVariableBorders() ? 1.0f : 2.0f;
            f3 = f2 / f3;
            return this.paddingRight + f3;
        }
        return this.paddingRight;
    }

    public float getEffectivePaddingTop() {
        if (this.isUseBorderPadding()) {
            float f2 = this.getBorderWidthTop();
            float f3 = this.isUseVariableBorders() ? 1.0f : 2.0f;
            f3 = f2 / f3;
            return this.paddingTop + f3;
        }
        return this.paddingTop;
    }

    public float getExtraParagraphSpace() {
        return this.column.getExtraParagraphSpace();
    }

    public float getFixedHeight() {
        return this.fixedHeight;
    }

    public float getFollowingIndent() {
        return this.column.getFollowingIndent();
    }

    public ArrayList<PdfPHeaderCell> getHeaders() {
        return this.headers;
    }

    public int getHorizontalAlignment() {
        return this.column.getAlignment();
    }

    @Override
    public AccessibleElementId getId() {
        return this.id;
    }

    public Image getImage() {
        return this.image;
    }

    public float getIndent() {
        return this.column.getIndent();
    }

    public float getLeading() {
        return this.column.getLeading();
    }

    /*
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    public float getMaxHeight() {
        float f3;
        float f2;
        block15 : {
            block16 : {
                Object object;
                block13 : {
                    boolean bl2;
                    block14 : {
                        bl2 = this.getRotation() == 90 || this.getRotation() == 270;
                        object = this.getImage();
                        if (object == null) break block14;
                        object.scalePercent(100.0f);
                        f3 = bl2 ? object.getScaledHeight() : object.getScaledWidth();
                        object.scalePercent((this.getRight() - this.getEffectivePaddingRight() - this.getEffectivePaddingLeft() - this.getLeft()) / f3 * 100.0f);
                        f3 = bl2 ? object.getScaledWidth() : object.getScaledHeight();
                        this.setBottom(this.getTop() - this.getEffectivePaddingTop() - this.getEffectivePaddingBottom() - f3);
                        break block15;
                    }
                    if (bl2 && this.hasFixedHeight() || this.getColumn() == null) {
                        f3 = this.getTop();
                        f2 = this.getFixedHeight();
                    } else {
                        float f5;
                        float f4;
                        object = ColumnText.duplicate(this.getColumn());
                        f3 = 20000.0f;
                        if (bl2) {
                            f5 = this.getRight() - this.getEffectivePaddingRight();
                            f2 = this.getLeft() + this.getEffectivePaddingLeft();
                            f4 = 0.0f;
                        } else {
                            if (!this.isNoWrap()) {
                                f3 = this.getRight() - this.getEffectivePaddingRight();
                            }
                            f5 = this.getTop() - this.getEffectivePaddingTop();
                            f4 = this.getLeft() + this.getEffectivePaddingLeft();
                            f2 = this.hasCalculatedHeight() ? this.getTop() + this.getEffectivePaddingBottom() - this.getCalculatedHeight() : -1.07374182E9f;
                        }
                        PdfPRow.setColumn((ColumnText)object, f4, f2, f3, f5);
                        object.go(true);
                        if (!bl2) break block13;
                        f3 = this.getTop() - this.getEffectivePaddingTop() - this.getEffectivePaddingBottom();
                        f2 = object.getFilledWidth();
                    }
                    break block16;
                }
                f3 = f2 = object.getYLine();
                if (this.isUseDescender()) {
                    f3 = f2 + object.getDescender();
                }
                f2 = this.getEffectivePaddingBottom();
            }
            this.setBottom(f3 - f2);
        }
        f3 = f2 = this.getHeight();
        if (f2 == this.getEffectivePaddingTop() + this.getEffectivePaddingBottom()) {
            f3 = 0.0f;
        }
        if (this.hasFixedHeight()) {
            f2 = this.getFixedHeight();
        } else {
            f2 = f3;
            if (this.hasMinimumHeight()) {
                f2 = f3;
                if (f3 < this.getMinimumHeight()) {
                    f2 = this.getMinimumHeight();
                }
            }
        }
        this.cachedMaxHeight = f2;
        return f2;
        catch (DocumentException documentException) {
            throw new ExceptionConverter(documentException);
        }
    }

    public float getMinimumHeight() {
        return this.minimumHeight;
    }

    public float getMultipliedLeading() {
        return this.column.getMultipliedLeading();
    }

    public float getPaddingBottom() {
        return this.paddingBottom;
    }

    public float getPaddingLeft() {
        return this.paddingLeft;
    }

    public float getPaddingRight() {
        return this.paddingRight;
    }

    public float getPaddingTop() {
        return this.paddingTop;
    }

    public Phrase getPhrase() {
        return this.phrase;
    }

    public float getRightIndent() {
        return this.column.getRightIndent();
    }

    @Override
    public PdfName getRole() {
        return this.role;
    }

    @Override
    public int getRotation() {
        return this.rotation;
    }

    public int getRowspan() {
        return this.rowspan;
    }

    public int getRunDirection() {
        return this.column.getRunDirection();
    }

    public float getSpaceCharRatio() {
        return this.column.getSpaceCharRatio();
    }

    public PdfPTable getTable() {
        return this.table;
    }

    public int getVerticalAlignment() {
        return this.verticalAlignment;
    }

    public boolean hasCachedMaxHeight() {
        if (this.cachedMaxHeight > 0.0f) {
            return true;
        }
        return false;
    }

    public boolean hasCalculatedHeight() {
        if (this.getCalculatedHeight() > 0.0f) {
            return true;
        }
        return false;
    }

    public boolean hasFixedHeight() {
        if (this.getFixedHeight() > 0.0f) {
            return true;
        }
        return false;
    }

    public boolean hasMinimumHeight() {
        if (this.getMinimumHeight() > 0.0f) {
            return true;
        }
        return false;
    }

    @Override
    public boolean isInline() {
        return false;
    }

    public boolean isNoWrap() {
        return this.noWrap;
    }

    public boolean isUseAscender() {
        return this.column.isUseAscender();
    }

    public boolean isUseBorderPadding() {
        return this.useBorderPadding;
    }

    public boolean isUseDescender() {
        return this.useDescender;
    }

    @Override
    public void setAccessibleAttribute(PdfName pdfName, PdfObject pdfObject) {
        if (this.accessibleAttributes == null) {
            this.accessibleAttributes = new HashMap();
        }
        this.accessibleAttributes.put(pdfName, pdfObject);
    }

    public void setArabicOptions(int n2) {
        this.column.setArabicOptions(n2);
    }

    public void setCalculatedHeight(float f2) {
        this.calculatedHeight = f2;
    }

    /*
     * Enabled aggressive block sorting
     */
    public void setCellEvent(PdfPCellEvent pdfPCellEvent) {
        block6 : {
            block5 : {
                block4 : {
                    if (pdfPCellEvent != null) break block4;
                    pdfPCellEvent = null;
                    break block5;
                }
                if (this.cellEvent != null) break block6;
            }
            this.cellEvent = pdfPCellEvent;
            return;
        }
        if (this.cellEvent instanceof PdfPCellEventForwarder) {
            ((PdfPCellEventForwarder)this.cellEvent).addCellEvent(pdfPCellEvent);
            return;
        }
        PdfPCellEventForwarder pdfPCellEventForwarder = new PdfPCellEventForwarder();
        pdfPCellEventForwarder.addCellEvent(this.cellEvent);
        pdfPCellEventForwarder.addCellEvent(pdfPCellEvent);
        this.cellEvent = pdfPCellEventForwarder;
    }

    public void setColspan(int n2) {
        this.colspan = n2;
    }

    public void setColumn(ColumnText columnText) {
        this.column = columnText;
    }

    public void setExtraParagraphSpace(float f2) {
        this.column.setExtraParagraphSpace(f2);
    }

    public void setFixedHeight(float f2) {
        this.fixedHeight = f2;
        this.minimumHeight = 0.0f;
    }

    public void setFollowingIndent(float f2) {
        this.column.setFollowingIndent(f2);
    }

    public void setHorizontalAlignment(int n2) {
        this.column.setAlignment(n2);
    }

    @Override
    public void setId(AccessibleElementId accessibleElementId) {
        this.id = accessibleElementId;
    }

    public void setImage(Image image) {
        this.column.setText(null);
        this.table = null;
        this.image = image;
    }

    public void setIndent(float f2) {
        this.column.setIndent(f2);
    }

    public void setLeading(float f2, float f3) {
        this.column.setLeading(f2, f3);
    }

    public void setMinimumHeight(float f2) {
        this.minimumHeight = f2;
        this.fixedHeight = 0.0f;
    }

    public void setNoWrap(boolean bl2) {
        this.noWrap = bl2;
    }

    public void setPadding(float f2) {
        this.paddingBottom = f2;
        this.paddingTop = f2;
        this.paddingLeft = f2;
        this.paddingRight = f2;
    }

    public void setPaddingBottom(float f2) {
        this.paddingBottom = f2;
    }

    public void setPaddingLeft(float f2) {
        this.paddingLeft = f2;
    }

    public void setPaddingRight(float f2) {
        this.paddingRight = f2;
    }

    public void setPaddingTop(float f2) {
        this.paddingTop = f2;
    }

    public void setPhrase(Phrase phrase) {
        this.table = null;
        this.image = null;
        ColumnText columnText = this.column;
        this.phrase = phrase;
        columnText.setText(phrase);
    }

    public void setRightIndent(float f2) {
        this.column.setRightIndent(f2);
    }

    @Override
    public void setRole(PdfName pdfName) {
        this.role = pdfName;
    }

    @Override
    public void setRotation(int n2) {
        int n3;
        n2 = n3 = n2 % 360;
        if (n3 < 0) {
            n2 = n3 + 360;
        }
        if (n2 % 90 == 0) {
            this.rotation = n2;
            return;
        }
        throw new IllegalArgumentException(MessageLocalization.getComposedMessage("rotation.must.be.a.multiple.of.90", new Object[0]));
    }

    public void setRowspan(int n2) {
        this.rowspan = n2;
    }

    public void setRunDirection(int n2) {
        this.column.setRunDirection(n2);
    }

    public void setSpaceCharRatio(float f2) {
        this.column.setSpaceCharRatio(f2);
    }

    void setTable(PdfPTable pdfPTable) {
        this.table = pdfPTable;
        this.column.setText(null);
        this.image = null;
        if (pdfPTable != null) {
            boolean bl2 = this.verticalAlignment == 4;
            pdfPTable.setExtendLastRow(bl2);
            this.column.addElement(pdfPTable);
            pdfPTable.setWidthPercentage(100.0f);
        }
    }

    public void setUseAscender(boolean bl2) {
        this.column.setUseAscender(bl2);
    }

    public void setUseBorderPadding(boolean bl2) {
        this.useBorderPadding = bl2;
    }

    public void setUseDescender(boolean bl2) {
        this.useDescender = bl2;
    }

    public void setVerticalAlignment(int n2) {
        if (this.table != null) {
            PdfPTable pdfPTable = this.table;
            boolean bl2 = n2 == 4;
            pdfPTable.setExtendLastRow(bl2);
        }
        this.verticalAlignment = n2;
    }
}

