/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf.parser;

import com.itextpdf.text.pdf.parser.Matrix;
import java.util.Arrays;

public class Vector {
    public static final int I1 = 0;
    public static final int I2 = 1;
    public static final int I3 = 2;
    private final float[] vals = new float[]{0.0f, 0.0f, 0.0f};

    public Vector(float f2, float f3, float f4) {
        this.vals[0] = f2;
        this.vals[1] = f3;
        this.vals[2] = f4;
    }

    public Vector cross(Matrix matrix) {
        return new Vector(this.vals[0] * matrix.get(0) + this.vals[1] * matrix.get(3) + this.vals[2] * matrix.get(6), this.vals[0] * matrix.get(1) + this.vals[1] * matrix.get(4) + this.vals[2] * matrix.get(7), this.vals[0] * matrix.get(2) + this.vals[1] * matrix.get(5) + this.vals[2] * matrix.get(8));
    }

    public Vector cross(Vector vector) {
        return new Vector(this.vals[1] * vector.vals[2] - this.vals[2] * vector.vals[1], this.vals[2] * vector.vals[0] - this.vals[0] * vector.vals[2], this.vals[0] * vector.vals[1] - this.vals[1] * vector.vals[0]);
    }

    public float dot(Vector vector) {
        return this.vals[0] * vector.vals[0] + this.vals[1] * vector.vals[1] + this.vals[2] * vector.vals[2];
    }

    public boolean equals(Object object) {
        if (this == object) {
            return true;
        }
        if (object == null) {
            return false;
        }
        if (this.getClass() != object.getClass()) {
            return false;
        }
        object = (Vector)object;
        if (!Arrays.equals(this.vals, object.vals)) {
            return false;
        }
        return true;
    }

    public float get(int n2) {
        return this.vals[n2];
    }

    public int hashCode() {
        return 31 + Arrays.hashCode(this.vals);
    }

    public float length() {
        return (float)Math.sqrt(this.lengthSquared());
    }

    public float lengthSquared() {
        return this.vals[0] * this.vals[0] + this.vals[1] * this.vals[1] + this.vals[2] * this.vals[2];
    }

    public Vector multiply(float f2) {
        return new Vector(this.vals[0] * f2, this.vals[1] * f2, this.vals[2] * f2);
    }

    public Vector normalize() {
        float f2 = this.length();
        return new Vector(this.vals[0] / f2, this.vals[1] / f2, this.vals[2] / f2);
    }

    public Vector subtract(Vector vector) {
        return new Vector(this.vals[0] - vector.vals[0], this.vals[1] - vector.vals[1], this.vals[2] - vector.vals[2]);
    }

    public String toString() {
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append(this.vals[0]);
        stringBuilder.append(",");
        stringBuilder.append(this.vals[1]);
        stringBuilder.append(",");
        stringBuilder.append(this.vals[2]);
        return stringBuilder.toString();
    }
}

