/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf;

import com.itextpdf.text.Image;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.error_messages.MessageLocalization;
import com.itextpdf.text.pdf.BaseFont;
import com.itextpdf.text.pdf.PdfContentByte;
import com.itextpdf.text.pdf.PdfObject;
import com.itextpdf.text.pdf.PdfReader;
import com.itextpdf.text.pdf.PdfReaderInstance;
import com.itextpdf.text.pdf.PdfSpotColor;
import com.itextpdf.text.pdf.PdfStream;
import com.itextpdf.text.pdf.PdfTemplate;
import com.itextpdf.text.pdf.PdfTransparencyGroup;
import com.itextpdf.text.pdf.PdfWriter;

public class PdfImportedPage
extends PdfTemplate {
    int pageNumber;
    PdfReaderInstance readerInstance;
    int rotation;
    protected boolean toCopy = true;

    PdfImportedPage(PdfReaderInstance pdfReaderInstance, PdfWriter pdfWriter, int n2) {
        this.readerInstance = pdfReaderInstance;
        this.pageNumber = n2;
        this.writer = pdfWriter;
        this.rotation = pdfReaderInstance.getReader().getPageRotation(n2);
        this.bBox = pdfReaderInstance.getReader().getPageSize(n2);
        this.setMatrix(1.0f, 0.0f, 0.0f, 1.0f, - this.bBox.getLeft(), - this.bBox.getBottom());
        this.type = 2;
    }

    @Override
    public void addImage(Image image, float f2, float f3, float f4, float f5, float f6, float f7) {
        this.throwError();
    }

    @Override
    public void addTemplate(PdfTemplate pdfTemplate, float f2, float f3, float f4, float f5, float f6, float f7) {
        this.throwError();
    }

    @Override
    public PdfContentByte getDuplicate() {
        this.throwError();
        return null;
    }

    @Override
    public PdfStream getFormXObject(int n2) {
        return this.readerInstance.getFormXObject(this.pageNumber, n2);
    }

    public PdfImportedPage getFromReader() {
        return this;
    }

    public int getPageNumber() {
        return this.pageNumber;
    }

    PdfReaderInstance getPdfReaderInstance() {
        return this.readerInstance;
    }

    @Override
    PdfObject getResources() {
        return this.readerInstance.getResources(this.pageNumber);
    }

    public int getRotation() {
        return this.rotation;
    }

    public boolean isToCopy() {
        return this.toCopy;
    }

    @Override
    public void setColorFill(PdfSpotColor pdfSpotColor, float f2) {
        this.throwError();
    }

    @Override
    public void setColorStroke(PdfSpotColor pdfSpotColor, float f2) {
        this.throwError();
    }

    public void setCopied() {
        this.toCopy = false;
    }

    @Override
    public void setFontAndSize(BaseFont baseFont, float f2) {
        this.throwError();
    }

    @Override
    public void setGroup(PdfTransparencyGroup pdfTransparencyGroup) {
        this.throwError();
    }

    void throwError() {
        throw new RuntimeException(MessageLocalization.getComposedMessage("content.can.not.be.added.to.a.pdfimportedpage", new Object[0]));
    }
}

