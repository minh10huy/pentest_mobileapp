/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf;

import com.itextpdf.text.pdf.PdfBoolean;
import com.itextpdf.text.pdf.PdfDictionary;
import com.itextpdf.text.pdf.PdfName;
import com.itextpdf.text.pdf.PdfNumber;
import com.itextpdf.text.pdf.PdfObject;
import com.itextpdf.text.pdf.PdfWriter;
import java.io.OutputStream;

public class PdfGState
extends PdfDictionary {
    public static final PdfName BM_COLORBURN;
    public static final PdfName BM_COLORDODGE;
    public static final PdfName BM_COMPATIBLE;
    public static final PdfName BM_DARKEN;
    public static final PdfName BM_DIFFERENCE;
    public static final PdfName BM_EXCLUSION;
    public static final PdfName BM_HARDLIGHT;
    public static final PdfName BM_LIGHTEN;
    public static final PdfName BM_MULTIPLY;
    public static final PdfName BM_NORMAL;
    public static final PdfName BM_OVERLAY;
    public static final PdfName BM_SCREEN;
    public static final PdfName BM_SOFTLIGHT;

    static {
        BM_NORMAL = new PdfName("Normal");
        BM_COMPATIBLE = new PdfName("Compatible");
        BM_MULTIPLY = new PdfName("Multiply");
        BM_SCREEN = new PdfName("Screen");
        BM_OVERLAY = new PdfName("Overlay");
        BM_DARKEN = new PdfName("Darken");
        BM_LIGHTEN = new PdfName("Lighten");
        BM_COLORDODGE = new PdfName("ColorDodge");
        BM_COLORBURN = new PdfName("ColorBurn");
        BM_HARDLIGHT = new PdfName("HardLight");
        BM_SOFTLIGHT = new PdfName("SoftLight");
        BM_DIFFERENCE = new PdfName("Difference");
        BM_EXCLUSION = new PdfName("Exclusion");
    }

    public void setAlphaIsShape(boolean bl2) {
        PdfName pdfName = PdfName.AIS;
        PdfBoolean pdfBoolean = bl2 ? PdfBoolean.PDFTRUE : PdfBoolean.PDFFALSE;
        this.put(pdfName, pdfBoolean);
    }

    public void setBlendMode(PdfName pdfName) {
        this.put(PdfName.BM, pdfName);
    }

    public void setFillOpacity(float f2) {
        this.put(PdfName.ca, new PdfNumber(f2));
    }

    public void setOverPrintMode(int n2) {
        PdfName pdfName = PdfName.OPM;
        n2 = n2 == 0 ? 0 : 1;
        this.put(pdfName, new PdfNumber(n2));
    }

    public void setOverPrintNonStroking(boolean bl2) {
        PdfName pdfName = PdfName.op;
        PdfBoolean pdfBoolean = bl2 ? PdfBoolean.PDFTRUE : PdfBoolean.PDFFALSE;
        this.put(pdfName, pdfBoolean);
    }

    public void setOverPrintStroking(boolean bl2) {
        PdfName pdfName = PdfName.OP;
        PdfBoolean pdfBoolean = bl2 ? PdfBoolean.PDFTRUE : PdfBoolean.PDFFALSE;
        this.put(pdfName, pdfBoolean);
    }

    public void setRenderingIntent(PdfName pdfName) {
        this.put(PdfName.RI, pdfName);
    }

    public void setStrokeOpacity(float f2) {
        this.put(PdfName.CA, new PdfNumber(f2));
    }

    public void setTextKnockout(boolean bl2) {
        PdfName pdfName = PdfName.TK;
        PdfBoolean pdfBoolean = bl2 ? PdfBoolean.PDFTRUE : PdfBoolean.PDFFALSE;
        this.put(pdfName, pdfBoolean);
    }

    @Override
    public void toPdf(PdfWriter pdfWriter, OutputStream outputStream) {
        PdfWriter.checkPdfIsoConformance(pdfWriter, 6, this);
        super.toPdf(pdfWriter, outputStream);
    }
}

