/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf;

import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chunk;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Utilities;
import com.itextpdf.text.error_messages.MessageLocalization;
import com.itextpdf.text.pdf.BaseFont;
import java.util.ArrayList;

public class FontSelector {
    protected Font currentFont = null;
    protected ArrayList<Font> fonts = new ArrayList();

    public void addFont(Font font) {
        if (font.getBaseFont() != null) {
            this.fonts.add(font);
            return;
        }
        font = new Font(font.getCalculatedBaseFont(true), font.getSize(), font.getCalculatedStyle(), font.getColor());
        this.fonts.add(font);
    }

    public Phrase process(String object) {
        if (this.fonts.size() != 0) {
            object = object.toCharArray();
            int n2 = ((char[])object).length;
            CharSequence charSequence = new StringBuffer();
            Phrase phrase = new Phrase();
            this.currentFont = null;
            for (int i2 = 0; i2 < n2; ++i2) {
                Chunk chunk = this.processChar((char[])object, i2, (StringBuffer)charSequence);
                if (chunk == null) continue;
                phrase.add(chunk);
            }
            if (charSequence.length() > 0) {
                charSequence = charSequence.toString();
                object = this.currentFont != null ? this.currentFont : this.fonts.get(0);
                phrase.add(new Chunk((String)charSequence, (Font)object));
            }
            return phrase;
        }
        throw new IndexOutOfBoundsException(MessageLocalization.getComposedMessage("no.font.is.defined", new Object[0]));
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    protected Chunk processChar(char[] object, int n2, StringBuffer stringBuffer) {
        Object object2 = object[n2];
        Font font = null;
        Font font2 = null;
        Font font3 = null;
        Font font4 = null;
        Object var8_9 = null;
        Object object3 = font3;
        if (object2 != 10) {
            if (object2 == 13) {
                object3 = font3;
            } else {
                if (Utilities.isSurrogatePair((char[])object, n2)) {
                    int n3 = Utilities.convertToUtf32((char[])object, n2);
                    int n4 = 0;
                    do {
                        object3 = font4;
                        if (n4 >= this.fonts.size()) return object3;
                        font2 = this.fonts.get(n4);
                        if (font2.getBaseFont().charExists(n3) || Character.getType(n3) == 16) break;
                        ++n4;
                    } while (true);
                    object3 = font;
                    if (this.currentFont != font2) {
                        object3 = var8_9;
                        if (stringBuffer.length() > 0) {
                            object3 = var8_9;
                            if (this.currentFont != null) {
                                object3 = new Chunk(stringBuffer.toString(), this.currentFont);
                                stringBuffer.setLength(0);
                            }
                        }
                        this.currentFont = font2;
                    }
                    stringBuffer.append((char)object2);
                    stringBuffer.append((char)object[n2 + 1]);
                    return object3;
                }
                n2 = 0;
                do {
                    object3 = font4;
                    if (n2 >= this.fonts.size()) return object3;
                    object = this.fonts.get(n2);
                    if (object.getBaseFont().charExists((int)object2) || Character.getType((char)object2) == 16) break;
                    ++n2;
                } while (true);
                object3 = font3;
                if (this.currentFont != object) {
                    object3 = font2;
                    if (stringBuffer.length() > 0) {
                        object3 = font2;
                        if (this.currentFont != null) {
                            object3 = new Chunk(stringBuffer.toString(), this.currentFont);
                            stringBuffer.setLength(0);
                        }
                    }
                    this.currentFont = object;
                }
            }
        }
        stringBuffer.append((char)object2);
        return object3;
    }
}

