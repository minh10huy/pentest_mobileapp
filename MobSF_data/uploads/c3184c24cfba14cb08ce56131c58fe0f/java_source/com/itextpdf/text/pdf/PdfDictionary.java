/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf;

import com.itextpdf.text.pdf.PdfArray;
import com.itextpdf.text.pdf.PdfBoolean;
import com.itextpdf.text.pdf.PdfIndirectReference;
import com.itextpdf.text.pdf.PdfName;
import com.itextpdf.text.pdf.PdfNumber;
import com.itextpdf.text.pdf.PdfObject;
import com.itextpdf.text.pdf.PdfReader;
import com.itextpdf.text.pdf.PdfStream;
import com.itextpdf.text.pdf.PdfString;
import com.itextpdf.text.pdf.PdfWriter;
import java.io.OutputStream;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Set;

public class PdfDictionary
extends PdfObject {
    public static final PdfName CATALOG;
    public static final PdfName FONT;
    public static final PdfName OUTLINES;
    public static final PdfName PAGE;
    public static final PdfName PAGES;
    private PdfName dictionaryType = null;
    protected LinkedHashMap<PdfName, PdfObject> hashMap;

    static {
        FONT = PdfName.FONT;
        OUTLINES = PdfName.OUTLINES;
        PAGE = PdfName.PAGE;
        PAGES = PdfName.PAGES;
        CATALOG = PdfName.CATALOG;
    }

    public PdfDictionary() {
        super(6);
        this.hashMap = new LinkedHashMap();
    }

    public PdfDictionary(int n2) {
        super(6);
        this.hashMap = new LinkedHashMap(n2);
    }

    public PdfDictionary(PdfName pdfName) {
        this();
        this.dictionaryType = pdfName;
        this.put(PdfName.TYPE, this.dictionaryType);
    }

    public boolean checkType(PdfName pdfName) {
        if (pdfName == null) {
            return false;
        }
        if (this.dictionaryType == null) {
            this.dictionaryType = this.getAsName(PdfName.TYPE);
        }
        return pdfName.equals(this.dictionaryType);
    }

    public void clear() {
        this.hashMap.clear();
    }

    public boolean contains(PdfName pdfName) {
        return this.hashMap.containsKey(pdfName);
    }

    public PdfObject get(PdfName pdfName) {
        return this.hashMap.get(pdfName);
    }

    public PdfArray getAsArray(PdfName pdfObject) {
        if ((pdfObject = this.getDirectObject((PdfName)pdfObject)) != null && pdfObject.isArray()) {
            return (PdfArray)pdfObject;
        }
        return null;
    }

    public PdfBoolean getAsBoolean(PdfName pdfObject) {
        if ((pdfObject = this.getDirectObject((PdfName)pdfObject)) != null && pdfObject.isBoolean()) {
            return (PdfBoolean)pdfObject;
        }
        return null;
    }

    public PdfDictionary getAsDict(PdfName pdfObject) {
        if ((pdfObject = this.getDirectObject((PdfName)pdfObject)) != null && pdfObject.isDictionary()) {
            return (PdfDictionary)pdfObject;
        }
        return null;
    }

    public PdfIndirectReference getAsIndirectObject(PdfName pdfObject) {
        if ((pdfObject = this.get((PdfName)pdfObject)) != null && pdfObject.isIndirect()) {
            return (PdfIndirectReference)pdfObject;
        }
        return null;
    }

    public PdfName getAsName(PdfName pdfObject) {
        if ((pdfObject = this.getDirectObject((PdfName)pdfObject)) != null && pdfObject.isName()) {
            return (PdfName)pdfObject;
        }
        return null;
    }

    public PdfNumber getAsNumber(PdfName pdfObject) {
        if ((pdfObject = this.getDirectObject((PdfName)pdfObject)) != null && pdfObject.isNumber()) {
            return (PdfNumber)pdfObject;
        }
        return null;
    }

    public PdfStream getAsStream(PdfName pdfObject) {
        if ((pdfObject = this.getDirectObject((PdfName)pdfObject)) != null && pdfObject.isStream()) {
            return (PdfStream)pdfObject;
        }
        return null;
    }

    public PdfString getAsString(PdfName pdfObject) {
        if ((pdfObject = this.getDirectObject((PdfName)pdfObject)) != null && pdfObject.isString()) {
            return (PdfString)pdfObject;
        }
        return null;
    }

    public PdfObject getDirectObject(PdfName pdfName) {
        return PdfReader.getPdfObject(this.get(pdfName));
    }

    public Set<PdfName> getKeys() {
        return this.hashMap.keySet();
    }

    public boolean isCatalog() {
        return this.checkType(CATALOG);
    }

    public boolean isFont() {
        return this.checkType(FONT);
    }

    public boolean isOutlineTree() {
        return this.checkType(OUTLINES);
    }

    public boolean isPage() {
        return this.checkType(PAGE);
    }

    public boolean isPages() {
        return this.checkType(PAGES);
    }

    public void merge(PdfDictionary pdfDictionary) {
        this.hashMap.putAll(pdfDictionary.hashMap);
    }

    public void mergeDifferent(PdfDictionary pdfDictionary) {
        for (PdfName pdfName : pdfDictionary.hashMap.keySet()) {
            if (this.hashMap.containsKey(pdfName)) continue;
            this.hashMap.put(pdfName, pdfDictionary.hashMap.get(pdfName));
        }
    }

    public void put(PdfName pdfName, PdfObject pdfObject) {
        if (pdfObject != null && !pdfObject.isNull()) {
            this.hashMap.put(pdfName, pdfObject);
            return;
        }
        this.hashMap.remove(pdfName);
    }

    public void putAll(PdfDictionary pdfDictionary) {
        this.hashMap.putAll(pdfDictionary.hashMap);
    }

    public void putEx(PdfName pdfName, PdfObject pdfObject) {
        if (pdfObject == null) {
            return;
        }
        this.put(pdfName, pdfObject);
    }

    public void remove(PdfName pdfName) {
        this.hashMap.remove(pdfName);
    }

    public int size() {
        return this.hashMap.size();
    }

    @Override
    public void toPdf(PdfWriter pdfWriter, OutputStream outputStream) {
        PdfWriter.checkPdfIsoConformance(pdfWriter, 11, this);
        outputStream.write(60);
        outputStream.write(60);
        for (Map.Entry<PdfName, PdfObject> entry : this.hashMap.entrySet()) {
            entry.getKey().toPdf(pdfWriter, outputStream);
            PdfObject object = entry.getValue();
            int n2 = object.type();
            if (n2 != 5 && n2 != 6 && n2 != 4 && n2 != 3) {
                outputStream.write(32);
            }
            object.toPdf(pdfWriter, outputStream);
        }
        outputStream.write(62);
        outputStream.write(62);
    }

    @Override
    public String toString() {
        if (this.get(PdfName.TYPE) == null) {
            return "Dictionary";
        }
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("Dictionary of type: ");
        stringBuilder.append(this.get(PdfName.TYPE));
        return stringBuilder.toString();
    }
}

