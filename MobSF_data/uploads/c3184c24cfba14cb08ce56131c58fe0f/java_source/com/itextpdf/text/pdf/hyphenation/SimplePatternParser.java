/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf.hyphenation;

import com.itextpdf.text.ExceptionConverter;
import com.itextpdf.text.pdf.hyphenation.Hyphen;
import com.itextpdf.text.pdf.hyphenation.PatternConsumer;
import com.itextpdf.text.xml.simpleparser.SimpleXMLDocHandler;
import com.itextpdf.text.xml.simpleparser.SimpleXMLParser;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.Map;
import java.util.StringTokenizer;

public class SimplePatternParser
implements PatternConsumer,
SimpleXMLDocHandler {
    static final int ELEM_CLASSES = 1;
    static final int ELEM_EXCEPTIONS = 2;
    static final int ELEM_HYPHEN = 4;
    static final int ELEM_PATTERNS = 3;
    PatternConsumer consumer;
    int currElement;
    ArrayList<Object> exception;
    char hyphenChar = (char)45;
    SimpleXMLParser parser;
    StringBuffer token = new StringBuffer();

    protected static String getInterletterValues(String string2) {
        StringBuffer stringBuffer = new StringBuffer();
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append(string2);
        stringBuilder.append("a");
        string2 = stringBuilder.toString();
        int n2 = string2.length();
        for (int i2 = 0; i2 < n2; ++i2) {
            char c2 = string2.charAt(i2);
            if (Character.isDigit(c2)) {
                stringBuffer.append(c2);
                ++i2;
                continue;
            }
            stringBuffer.append('0');
        }
        return stringBuffer.toString();
    }

    protected static String getPattern(String string2) {
        StringBuffer stringBuffer = new StringBuffer();
        int n2 = string2.length();
        for (int i2 = 0; i2 < n2; ++i2) {
            if (Character.isDigit(string2.charAt(i2))) continue;
            stringBuffer.append(string2.charAt(i2));
        }
        return stringBuffer.toString();
    }

    @Override
    public void addClass(String string2) {
        PrintStream printStream = System.out;
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("class: ");
        stringBuilder.append(string2);
        printStream.println(stringBuilder.toString());
    }

    @Override
    public void addException(String string2, ArrayList<Object> arrayList) {
        PrintStream printStream = System.out;
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("exception: ");
        stringBuilder.append(string2);
        stringBuilder.append(" : ");
        stringBuilder.append(arrayList.toString());
        printStream.println(stringBuilder.toString());
    }

    @Override
    public void addPattern(String string2, String string3) {
        PrintStream printStream = System.out;
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("pattern: ");
        stringBuilder.append(string2);
        stringBuilder.append(" : ");
        stringBuilder.append(string3);
        printStream.println(stringBuilder.toString());
    }

    @Override
    public void endDocument() {
    }

    @Override
    public void endElement(String string2) {
        if (this.token.length() > 0) {
            string2 = this.token.toString();
            switch (this.currElement) {
                default: {
                    break;
                }
                case 3: {
                    this.consumer.addPattern(SimplePatternParser.getPattern(string2), SimplePatternParser.getInterletterValues(string2));
                    break;
                }
                case 2: {
                    this.exception.add(string2);
                    this.exception = this.normalizeException(this.exception);
                    this.consumer.addException(this.getExceptionWord(this.exception), (ArrayList)this.exception.clone());
                    break;
                }
                case 1: {
                    this.consumer.addClass(string2);
                }
            }
            if (this.currElement != 4) {
                this.token.setLength(0);
            }
        }
        if (this.currElement == 4) {
            this.currElement = 2;
            return;
        }
        this.currElement = 0;
    }

    /*
     * Enabled aggressive block sorting
     */
    protected String getExceptionWord(ArrayList<Object> arrayList) {
        StringBuffer stringBuffer = new StringBuffer();
        int n2 = 0;
        while (n2 < arrayList.size()) {
            block5 : {
                Object object;
                block4 : {
                    block3 : {
                        object = arrayList.get(n2);
                        if (!(object instanceof String)) break block3;
                        object = (String)object;
                        break block4;
                    }
                    object = (Hyphen)object;
                    if (object.noBreak == null) break block5;
                    object = object.noBreak;
                }
                stringBuffer.append((String)object);
            }
            ++n2;
        }
        return stringBuffer.toString();
    }

    protected ArrayList<Object> normalizeException(ArrayList<Object> arrayList) {
        ArrayList<Object> arrayList2 = new ArrayList<Object>();
        for (int i2 = 0; i2 < arrayList.size(); ++i2) {
            Object object;
            Object object2 = object = arrayList.get(i2);
            if (object instanceof String) {
                object2 = (String)object;
                object = new StringBuffer();
                for (int i3 = 0; i3 < object2.length(); ++i3) {
                    char c2 = object2.charAt(i3);
                    if (c2 != this.hyphenChar) {
                        object.append(c2);
                        continue;
                    }
                    arrayList2.add(object.toString());
                    object.setLength(0);
                    arrayList2.add(new Hyphen(new String(new char[]{this.hyphenChar}), null, null));
                }
                if (object.length() <= 0) continue;
                object2 = object.toString();
            }
            arrayList2.add(object2);
        }
        return arrayList2;
    }

    /*
     * WARNING - Removed back jump from a try to a catch block - possible behaviour change.
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    public void parse(InputStream inputStream, PatternConsumer patternConsumer) {
        Throwable throwable2222;
        this.consumer = patternConsumer;
        SimpleXMLParser.parse((SimpleXMLDocHandler)this, inputStream);
        try {
            inputStream.close();
            return;
        }
        catch (Exception exception) {
            return;
        }
        {
            catch (Throwable throwable2222) {
            }
            catch (IOException iOException) {}
            {
                throw new ExceptionConverter(iOException);
            }
        }
        try {
            inputStream.close();
        }
        catch (Exception exception) {
            throw throwable2222;
        }
        throw throwable2222;
    }

    @Override
    public void startDocument() {
    }

    /*
     * Enabled aggressive block sorting
     */
    @Override
    public void startElement(String string2, Map<String, String> map) {
        block7 : {
            int n2;
            block10 : {
                block11 : {
                    block9 : {
                        block8 : {
                            block6 : {
                                if (!string2.equals("hyphen-char")) break block6;
                                string2 = map.get("value");
                                if (string2 != null && string2.length() == 1) {
                                    this.hyphenChar = string2.charAt(0);
                                }
                                break block7;
                            }
                            if (!string2.equals("classes")) break block8;
                            this.currElement = 1;
                            break block7;
                        }
                        if (!string2.equals("patterns")) break block9;
                        n2 = 3;
                        break block10;
                    }
                    if (!string2.equals("exceptions")) break block11;
                    this.currElement = 2;
                    this.exception = new ArrayList();
                    break block7;
                }
                if (!string2.equals("hyphen")) break block7;
                if (this.token.length() > 0) {
                    this.exception.add(this.token.toString());
                }
                this.exception.add(new Hyphen(map.get("pre"), map.get("no"), map.get("post")));
                n2 = 4;
            }
            this.currElement = n2;
        }
        this.token.setLength(0);
    }

    @Override
    public void text(String object) {
        object = new StringTokenizer((String)object);
        block5 : while (object.hasMoreTokens()) {
            String string2 = object.nextToken();
            switch (this.currElement) {
                default: {
                    continue block5;
                }
                case 3: {
                    this.consumer.addPattern(SimplePatternParser.getPattern(string2), SimplePatternParser.getInterletterValues(string2));
                    continue block5;
                }
                case 2: {
                    this.exception.add(string2);
                    this.exception = this.normalizeException(this.exception);
                    this.consumer.addException(this.getExceptionWord(this.exception), (ArrayList)this.exception.clone());
                    this.exception.clear();
                    continue block5;
                }
                case 1: 
            }
            this.consumer.addClass(string2);
        }
    }
}

