/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf.parser.clipper;

import java.math.BigInteger;
import java.util.Comparator;

public abstract class Point<T extends Number> {
    private static final NumberComparator NUMBER_COMPARATOR = new NumberComparator();
    protected T x;
    protected T y;
    protected T z;

    protected Point(Point<T> point) {
        this(point.x, point.y, point.z);
    }

    protected Point(T t2, T t3, T t4) {
        this.x = t2;
        this.y = t3;
        this.z = t4;
    }

    static boolean arePointsClose(Point<? extends Number> point, Point<? extends Number> point2, double d2) {
        double d3;
        double d4 = point.x.doubleValue() - point2.x.doubleValue();
        if (d4 * d4 + (d3 = point.y.doubleValue() - point2.y.doubleValue()) * d3 <= d2) {
            return true;
        }
        return false;
    }

    static double distanceFromLineSqrd(Point<? extends Number> point, Point<? extends Number> point2, Point<? extends Number> point3) {
        double d2 = point2.y.doubleValue() - point3.y.doubleValue();
        double d3 = point3.x.doubleValue() - point2.x.doubleValue();
        double d4 = point2.x.doubleValue();
        double d5 = point2.y.doubleValue();
        d4 = point.x.doubleValue() * d2 + point.y.doubleValue() * d3 - (d4 * d2 + d5 * d3);
        return d4 * d4 / (d2 * d2 + d3 * d3);
    }

    static DoublePoint getUnitNormal(LongPoint longPoint, LongPoint longPoint2) {
        double d2 = (Long)longPoint2.x - (Long)longPoint.x;
        double d3 = (Long)longPoint2.y - (Long)longPoint.y;
        if (d2 == 0.0 && d3 == 0.0) {
            return new DoublePoint();
        }
        double d4 = 1.0 / Math.sqrt(d2 * d2 + d3 * d3);
        return new DoublePoint(d3 * d4, - d2 * d4);
    }

    protected static boolean isPt2BetweenPt1AndPt3(LongPoint longPoint, LongPoint longPoint2, LongPoint longPoint3) {
        boolean bl2 = longPoint.equals(longPoint3);
        boolean bl3 = false;
        boolean bl4 = false;
        boolean bl5 = bl3;
        if (!bl2) {
            bl5 = bl3;
            if (!longPoint.equals(longPoint2)) {
                if (longPoint3.equals(longPoint2)) {
                    return false;
                }
                if (longPoint.x != longPoint3.x) {
                    boolean bl6 = (Long)longPoint2.x > (Long)longPoint.x;
                    boolean bl7 = (Long)longPoint2.x < (Long)longPoint3.x;
                    bl5 = bl4;
                    if (bl6 == bl7) {
                        bl5 = true;
                    }
                    return bl5;
                }
                boolean bl8 = (Long)longPoint2.y > (Long)longPoint.y;
                boolean bl9 = (Long)longPoint2.y < (Long)longPoint3.y;
                bl5 = bl3;
                if (bl8 == bl9) {
                    bl5 = true;
                }
            }
        }
        return bl5;
    }

    protected static boolean slopesEqual(LongPoint longPoint, LongPoint longPoint2, LongPoint longPoint3, LongPoint longPoint4, boolean bl2) {
        if (bl2) {
            return BigInteger.valueOf(longPoint.getY() - longPoint2.getY()).multiply(BigInteger.valueOf(longPoint3.getX() - longPoint4.getX())).equals(BigInteger.valueOf(longPoint.getX() - longPoint2.getX()).multiply(BigInteger.valueOf(longPoint3.getY() - longPoint4.getY())));
        }
        if ((longPoint.getY() - longPoint2.getY()) * (longPoint3.getX() - longPoint4.getX()) - (longPoint.getX() - longPoint2.getX()) * (longPoint3.getY() - longPoint4.getY()) == 0L) {
            return true;
        }
        return false;
    }

    protected static boolean slopesEqual(LongPoint longPoint, LongPoint longPoint2, LongPoint longPoint3, boolean bl2) {
        if (bl2) {
            return BigInteger.valueOf(longPoint.getY() - longPoint2.getY()).multiply(BigInteger.valueOf(longPoint2.getX() - longPoint3.getX())).equals(BigInteger.valueOf(longPoint.getX() - longPoint2.getX()).multiply(BigInteger.valueOf(longPoint2.getY() - longPoint3.getY())));
        }
        if ((longPoint.getY() - longPoint2.getY()) * (longPoint2.getX() - longPoint3.getX()) - (longPoint.getX() - longPoint2.getX()) * (longPoint2.getY() - longPoint3.getY()) == 0L) {
            return true;
        }
        return false;
    }

    static boolean slopesNearCollinear(LongPoint longPoint, LongPoint longPoint2, LongPoint longPoint3, double d2) {
        long l2 = Math.abs((Long)longPoint.x - (Long)longPoint2.x);
        long l3 = Math.abs((Long)longPoint.y - (Long)longPoint2.y);
        boolean bl2 = false;
        boolean bl3 = false;
        boolean bl4 = false;
        boolean bl5 = false;
        boolean bl6 = false;
        boolean bl7 = false;
        if (l2 > l3) {
            boolean bl8 = (Long)longPoint.x > (Long)longPoint2.x;
            boolean bl9 = (Long)longPoint.x < (Long)longPoint3.x;
            if (bl8 == bl9) {
                if (Point.distanceFromLineSqrd(longPoint, longPoint2, longPoint3) < d2) {
                    bl7 = true;
                }
                return bl7;
            }
            bl8 = (Long)longPoint2.x > (Long)longPoint.x;
            bl9 = (Long)longPoint2.x < (Long)longPoint3.x;
            if (bl8 == bl9) {
                bl7 = bl2;
                if (Point.distanceFromLineSqrd(longPoint2, longPoint, longPoint3) < d2) {
                    bl7 = true;
                }
                return bl7;
            }
            bl7 = bl3;
            if (Point.distanceFromLineSqrd(longPoint3, longPoint, longPoint2) < d2) {
                bl7 = true;
            }
            return bl7;
        }
        boolean bl10 = (Long)longPoint.y > (Long)longPoint2.y;
        boolean bl11 = (Long)longPoint.y < (Long)longPoint3.y;
        if (bl10 == bl11) {
            bl7 = bl4;
            if (Point.distanceFromLineSqrd(longPoint, longPoint2, longPoint3) < d2) {
                bl7 = true;
            }
            return bl7;
        }
        bl10 = (Long)longPoint2.y > (Long)longPoint.y;
        bl11 = (Long)longPoint2.y < (Long)longPoint3.y;
        if (bl10 == bl11) {
            bl7 = bl5;
            if (Point.distanceFromLineSqrd(longPoint2, longPoint, longPoint3) < d2) {
                bl7 = true;
            }
            return bl7;
        }
        bl7 = bl6;
        if (Point.distanceFromLineSqrd(longPoint3, longPoint, longPoint2) < d2) {
            bl7 = true;
        }
        return bl7;
    }

    public boolean equals(Object object) {
        boolean bl2 = false;
        if (object == null) {
            return false;
        }
        boolean bl3 = bl2;
        if (object instanceof Point) {
            object = (Point)object;
            bl3 = bl2;
            if (NUMBER_COMPARATOR.compare(this.x, object.x) == 0) {
                bl3 = bl2;
                if (NUMBER_COMPARATOR.compare(this.y, object.y) == 0) {
                    bl3 = true;
                }
            }
        }
        return bl3;
    }

    public void set(Point<T> point) {
        this.x = point.x;
        this.y = point.y;
        this.z = point.z;
    }

    public void setX(T t2) {
        this.x = t2;
    }

    public void setY(T t2) {
        this.y = t2;
    }

    public void setZ(T t2) {
        this.z = t2;
    }

    public String toString() {
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("Point [x=");
        stringBuilder.append(this.x);
        stringBuilder.append(", y=");
        stringBuilder.append(this.y);
        stringBuilder.append(", z=");
        stringBuilder.append(this.z);
        stringBuilder.append("]");
        return stringBuilder.toString();
    }

    public static class DoublePoint
    extends Point<Double> {
        public DoublePoint() {
            this(0.0, 0.0);
        }

        public DoublePoint(double d2, double d3) {
            this(d2, d3, 0.0);
        }

        public DoublePoint(double d2, double d3, double d4) {
            super(d2, d3, d4);
        }

        public DoublePoint(DoublePoint doublePoint) {
            super(doublePoint);
        }

        public double getX() {
            return (Double)this.x;
        }

        public double getY() {
            return (Double)this.y;
        }

        public double getZ() {
            return (Double)this.z;
        }
    }

    public static class LongPoint
    extends Point<Long> {
        public LongPoint() {
            this(0L, 0L);
        }

        public LongPoint(double d2, double d3) {
            this((long)d2, (long)d3);
        }

        public LongPoint(long l2, long l3) {
            this(l2, l3, 0L);
        }

        public LongPoint(long l2, long l3, long l4) {
            super(l2, l3, l4);
        }

        public LongPoint(LongPoint longPoint) {
            super(longPoint);
        }

        public static double getDeltaX(LongPoint longPoint, LongPoint longPoint2) {
            if (longPoint.getY() == longPoint2.getY()) {
                return -3.4E38;
            }
            return (double)(longPoint2.getX() - longPoint.getX()) / (double)(longPoint2.getY() - longPoint.getY());
        }

        public long getX() {
            return (Long)this.x;
        }

        public long getY() {
            return (Long)this.y;
        }

        public long getZ() {
            return (Long)this.z;
        }
    }

    private static class NumberComparator<T extends Number>
    implements Comparator<T> {
        private NumberComparator() {
        }

        @Override
        public int compare(T t2, T t3) {
            return ((Comparable)t2).compareTo(t3);
        }
    }

}

