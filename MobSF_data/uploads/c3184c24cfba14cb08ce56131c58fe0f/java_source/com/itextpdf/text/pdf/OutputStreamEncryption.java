/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf;

import com.itextpdf.text.ExceptionConverter;
import com.itextpdf.text.pdf.crypto.AESCipher;
import com.itextpdf.text.pdf.crypto.ARCFOUREncryption;
import com.itextpdf.text.pdf.crypto.IVGenerator;
import java.io.OutputStream;

public class OutputStreamEncryption
extends OutputStream {
    private static final int AES_128 = 4;
    private static final int AES_256 = 5;
    private boolean aes;
    protected ARCFOUREncryption arcfour;
    protected AESCipher cipher;
    private boolean finished;
    protected OutputStream out;
    private byte[] sb;

    public OutputStreamEncryption(OutputStream outputStream, byte[] arrby, int n2) {
        this(outputStream, arrby, 0, arrby.length, n2);
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public OutputStreamEncryption(OutputStream arrby, byte[] arrby2, int n2, int n3, int n4) {
        boolean bl2;
        block5 : {
            block4 : {
                block3 : {
                    this.sb = new byte[1];
                    try {
                        this.out = arrby;
                        if (n4 != 4 && n4 != 5) break block3;
                        break block4;
                    }
                    catch (Exception exception) {
                        throw new ExceptionConverter(exception);
                    }
                }
                bl2 = false;
                break block5;
            }
            bl2 = true;
        }
        this.aes = bl2;
        if (this.aes) {
            arrby = IVGenerator.getIV();
            byte[] arrby3 = new byte[n3];
            System.arraycopy(arrby2, n2, arrby3, 0, n3);
            this.cipher = new AESCipher(true, arrby3, arrby);
            this.write(arrby);
            return;
        }
        this.arcfour = new ARCFOUREncryption();
        this.arcfour.prepareARCFOURKey(arrby2, n2, n3);
    }

    @Override
    public void close() {
        this.finish();
        this.out.close();
    }

    public void finish() {
        if (!this.finished) {
            this.finished = true;
            if (this.aes) {
                byte[] arrby;
                try {
                    arrby = this.cipher.doFinal();
                }
                catch (Exception exception) {
                    throw new ExceptionConverter(exception);
                }
                this.out.write(arrby, 0, arrby.length);
                return;
            }
        }
    }

    @Override
    public void flush() {
        this.out.flush();
    }

    @Override
    public void write(int n2) {
        this.sb[0] = (byte)n2;
        this.write(this.sb, 0, 1);
    }

    @Override
    public void write(byte[] arrby) {
        this.write(arrby, 0, arrby.length);
    }

    @Override
    public void write(byte[] arrby, int n2, int n3) {
        if (this.aes) {
            if ((arrby = this.cipher.update(arrby, n2, n3)) != null) {
                if (arrby.length == 0) {
                    return;
                }
                this.out.write(arrby, 0, arrby.length);
                return;
            }
            return;
        }
        byte[] arrby2 = new byte[Math.min(n3, 4192)];
        while (n3 > 0) {
            int n4 = Math.min(n3, arrby2.length);
            this.arcfour.encryptARCFOUR(arrby, n2, n4, arrby2, 0);
            this.out.write(arrby2, 0, n4);
            n3 -= n4;
            n2 += n4;
        }
    }
}

