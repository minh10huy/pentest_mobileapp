/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf;

import com.itextpdf.text.ExceptionConverter;
import com.itextpdf.text.pdf.BaseFont;

class PdfFont
implements Comparable<PdfFont> {
    private BaseFont font;
    protected float hScale = 1.0f;
    private float size;

    PdfFont(BaseFont baseFont, float f2) {
        this.size = f2;
        this.font = baseFont;
    }

    static PdfFont getDefaultFont() {
        try {
            PdfFont pdfFont = new PdfFont(BaseFont.createFont("Helvetica", "Cp1252", false), 12.0f);
            return pdfFont;
        }
        catch (Exception exception) {
            throw new ExceptionConverter(exception);
        }
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    @Override
    public int compareTo(PdfFont pdfFont) {
        block5 : {
            if (pdfFont == null) {
                return -1;
            }
            try {
                if (this.font == pdfFont.font) break block5;
                return 1;
            }
            catch (ClassCastException classCastException) {
                return -2;
            }
        }
        float f2 = this.size();
        float f3 = pdfFont.size();
        if (f2 == f3) return 0;
        return 2;
    }

    BaseFont getFont() {
        return this.font;
    }

    float getHorizontalScaling() {
        return this.hScale;
    }

    void setHorizontalScaling(float f2) {
        this.hScale = f2;
    }

    float size() {
        return this.size;
    }

    float width() {
        return this.width(32);
    }

    float width(int n2) {
        return this.font.getWidthPoint(n2, this.size) * this.hScale;
    }

    float width(String string2) {
        return this.font.getWidthPoint(string2, this.size) * this.hScale;
    }
}

