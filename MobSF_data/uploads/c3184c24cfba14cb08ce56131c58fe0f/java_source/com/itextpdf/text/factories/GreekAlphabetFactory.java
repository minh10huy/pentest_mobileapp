/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.factories;

import com.itextpdf.text.SpecialSymbol;

public class GreekAlphabetFactory {
    public static final String getLowerCaseString(int n2) {
        return GreekAlphabetFactory.getString(n2);
    }

    public static final String getString(int n2) {
        return GreekAlphabetFactory.getString(n2, true);
    }

    public static final String getString(int n2, boolean bl2) {
        int n3;
        if (n2 < 1) {
            return "";
        }
        int n4 = n2 - 1;
        int n5 = 0;
        int n6 = 24;
        n2 = 1;
        while (n4 >= (n3 = n6 + n5)) {
            ++n2;
            n6 *= 24;
            n5 = n3;
        }
        n5 = n4 - n5;
        char[] arrc = new char[n2];
        while (n2 > 0) {
            n6 = n2 - 1;
            arrc[n6] = (char)(n5 % 24);
            if (arrc[n6] > '\u0010') {
                arrc[n6] = (char)(arrc[n6] + '\u0001');
            }
            n3 = arrc[n6];
            n2 = bl2 ? 945 : 913;
            arrc[n6] = (char)(n3 + n2);
            arrc[n6] = SpecialSymbol.getCorrespondingSymbol(arrc[n6]);
            n5 /= 24;
            n2 = n6;
        }
        return String.valueOf(arrc);
    }

    public static final String getUpperCaseString(int n2) {
        return GreekAlphabetFactory.getString(n2).toUpperCase();
    }
}

