/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.factories;

import com.itextpdf.text.error_messages.MessageLocalization;

public class RomanAlphabetFactory {
    public static final String getLowerCaseString(int n2) {
        return RomanAlphabetFactory.getString(n2);
    }

    public static final String getString(int n2) {
        if (n2 >= 1) {
            int n3;
            int n4 = n2 - 1;
            int n5 = 26;
            int n6 = 0;
            n2 = 1;
            while (n4 >= (n3 = n5 + n6)) {
                ++n2;
                n5 *= 26;
                n6 = n3;
            }
            n5 = n4 - n6;
            char[] arrc = new char[n2];
            while (n2 > 0) {
                arrc[--n2] = (char)(n5 % 26 + 97);
                n5 /= 26;
            }
            return new String(arrc);
        }
        throw new NumberFormatException(MessageLocalization.getComposedMessage("you.can.t.translate.a.negative.number.into.an.alphabetical.value", new Object[0]));
    }

    public static final String getString(int n2, boolean bl2) {
        if (bl2) {
            return RomanAlphabetFactory.getLowerCaseString(n2);
        }
        return RomanAlphabetFactory.getUpperCaseString(n2);
    }

    public static final String getUpperCaseString(int n2) {
        return RomanAlphabetFactory.getString(n2).toUpperCase();
    }
}

