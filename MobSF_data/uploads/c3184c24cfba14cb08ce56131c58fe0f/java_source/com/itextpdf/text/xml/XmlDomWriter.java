/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.xml;

import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.io.Writer;
import org.w3c.dom.Attr;
import org.w3c.dom.Document;
import org.w3c.dom.DocumentType;
import org.w3c.dom.Element;
import org.w3c.dom.NamedNodeMap;
import org.w3c.dom.Node;

public class XmlDomWriter {
    protected boolean fCanonical;
    protected PrintWriter fOut;
    protected boolean fXML11;

    public XmlDomWriter() {
    }

    public XmlDomWriter(boolean bl2) {
        this.fCanonical = bl2;
    }

    /*
     * Enabled aggressive block sorting
     */
    protected void normalizeAndPrint(char c2, boolean bl2) {
        block13 : {
            PrintWriter printWriter;
            String string2;
            block12 : {
                block11 : {
                    block6 : {
                        block7 : {
                            block8 : {
                                block9 : {
                                    block10 : {
                                        if (c2 == '\n') break block6;
                                        if (c2 == '\r') break block7;
                                        if (c2 == '\"') break block8;
                                        if (c2 == '&') break block9;
                                        if (c2 == '<') break block10;
                                        if (c2 != '>') break block11;
                                        printWriter = this.fOut;
                                        string2 = "&gt;";
                                        break block12;
                                    }
                                    printWriter = this.fOut;
                                    string2 = "&lt;";
                                    break block12;
                                }
                                printWriter = this.fOut;
                                string2 = "&amp;";
                                break block12;
                            }
                            if (bl2) {
                                printWriter = this.fOut;
                                string2 = "&quot;";
                            } else {
                                printWriter = this.fOut;
                                string2 = "\"";
                            }
                            break block12;
                        }
                        printWriter = this.fOut;
                        string2 = "&#xD;";
                        break block12;
                    }
                    if (!this.fCanonical) break block11;
                    printWriter = this.fOut;
                    string2 = "&#xA;";
                    break block12;
                }
                if (!(this.fXML11 && (c2 >= '\u0001' && c2 <= '\u001f' && c2 != '\t' && c2 != '\n' || c2 >= '' && c2 <= '\u009f' || c2 == '\u2028')) && (!bl2 || c2 != '\t' && c2 != '\n')) break block13;
                this.fOut.print("&#x");
                this.fOut.print(Integer.toHexString(c2).toUpperCase());
                printWriter = this.fOut;
                string2 = ";";
            }
            printWriter.print(string2);
            return;
        }
        this.fOut.print(c2);
    }

    protected void normalizeAndPrint(String string2, boolean bl2) {
        int n2 = string2 != null ? string2.length() : 0;
        for (int i2 = 0; i2 < n2; ++i2) {
            this.normalizeAndPrint(string2.charAt(i2), bl2);
        }
    }

    public void setCanonical(boolean bl2) {
        this.fCanonical = bl2;
    }

    public void setOutput(OutputStream outputStream, String string2) {
        String string3 = string2;
        if (string2 == null) {
            string3 = "UTF8";
        }
        this.fOut = new PrintWriter(new OutputStreamWriter(outputStream, string3));
    }

    public void setOutput(Writer writer) {
        writer = writer instanceof PrintWriter ? (PrintWriter)writer : new PrintWriter(writer);
        this.fOut = writer;
    }

    protected Attr[] sortAttributes(NamedNodeMap object) {
        int n2;
        int n3 = 0;
        int n4 = object != null ? object.getLength() : 0;
        Attr[] arrattr = new Attr[n4];
        int n5 = 0;
        do {
            n2 = n3;
            if (n5 >= n4) break;
            arrattr[n5] = (Attr)object.item(n5);
            ++n5;
        } while (true);
        while (n2 < n4 - 1) {
            object = arrattr[n2].getNodeName();
            n3 = n2 + 1;
            int n6 = n2;
            for (n5 = n3; n5 < n4; ++n5) {
                String string2 = arrattr[n5].getNodeName();
                Object object2 = object;
                if (string2.compareTo((String)object) < 0) {
                    n6 = n5;
                    object2 = string2;
                }
                object = object2;
            }
            if (n6 != n2) {
                object = arrattr[n2];
                arrattr[n2] = arrattr[n6];
                arrattr[n6] = object;
            }
            n2 = n3;
        }
        return arrattr;
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Lifted jumps to return sites
     */
    public void write(Node var1_1) {
        block23 : {
            if (var1_1 == null) {
                return;
            }
            var3_2 = var1_1.getNodeType();
            switch (var3_2) {
                default: {
                    break block23;
                }
                case 10: {
                    var6_4 = (DocumentType)var1_1;
                    this.fOut.print("<!DOCTYPE ");
                    this.fOut.print(var6_4.getName());
                    var4_6 = var6_4.getPublicId();
                    var7_11 = var6_4.getSystemId();
                    if (var4_6 == null) ** GOTO lbl19
                    this.fOut.print(" PUBLIC '");
                    this.fOut.print((String)var4_6);
                    var4_6 = this.fOut;
                    var5_12 = "' '";
                    ** GOTO lbl22
lbl19: // 1 sources:
                    if (var7_11 == null) ** GOTO lbl25
                    var4_6 = this.fOut;
                    var5_12 = " SYSTEM '";
lbl22: // 2 sources:
                    var4_6.print(var5_12);
                    this.fOut.print(var7_11);
                    this.fOut.print('\'');
lbl25: // 2 sources:
                    if ((var4_6 = var6_4.getInternalSubset()) != null) {
                        this.fOut.println(" [");
                        this.fOut.print((String)var4_6);
                        this.fOut.print(']');
                    }
                    this.fOut.println('>');
                    break block23;
                }
                case 9: {
                    var6_5 = (Document)var1_1;
                    this.fXML11 = false;
                    if (!this.fCanonical) {
                        if (this.fXML11) {
                            var4_7 = this.fOut;
                            var5_13 = "<?xml version=\"1.1\" encoding=\"UTF-8\"?>";
                        } else {
                            var4_7 = this.fOut;
                            var5_13 = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>";
                        }
                        var4_7.println(var5_13);
                        this.fOut.flush();
                        this.write(var6_5.getDoctype());
                    }
                    this.write(var6_5.getDocumentElement());
                    break block23;
                }
                case 8: {
                    if (this.fCanonical) break block23;
                    this.fOut.print("<!--");
                    var4_8 = var1_1.getNodeValue();
                    if (var4_8 != null && var4_8.length() > 0) {
                        this.fOut.print((String)var4_8);
                    }
                    var4_8 = this.fOut;
                    var5_14 = "-->";
                    ** GOTO lbl81
                }
                case 7: {
                    this.fOut.print("<?");
                    this.fOut.print(var1_1.getNodeName());
                    var4_8 = var1_1.getNodeValue();
                    if (var4_8 != null && var4_8.length() > 0) {
                        this.fOut.print(' ');
                        this.fOut.print((String)var4_8);
                    }
                    var4_8 = this.fOut;
                    var5_14 = "?>";
                    ** GOTO lbl81
                }
                case 5: {
                    if (!this.fCanonical) ** GOTO lbl71
                    for (var4_9 = var1_1.getFirstChild(); var4_9 != null; var4_9 = var4_9.getNextSibling()) {
                        this.write(var4_9);
                    }
                    break block23;
lbl71: // 1 sources:
                    this.fOut.print('&');
                    this.fOut.print(var1_1.getNodeName());
                    this.fOut.print(';');
                    ** GOTO lbl85
                }
                case 4: {
                    if (this.fCanonical) ** GOTO lbl83
                    this.fOut.print("<![CDATA[");
                    this.fOut.print(var1_1.getNodeValue());
                    var4_8 = this.fOut;
                    var5_14 = "]]>";
lbl81: // 3 sources:
                    var4_8.print(var5_14);
                    ** GOTO lbl85
                }
lbl83: // 2 sources:
                case 3: {
                    this.normalizeAndPrint(var1_1.getNodeValue(), false);
lbl85: // 3 sources:
                    this.fOut.flush();
                    break block23;
                }
                case 1: 
            }
            this.fOut.print('<');
            this.fOut.print(var1_1.getNodeName());
            var4_10 = this.sortAttributes(var1_1.getAttributes());
            for (var2_3 = 0; var2_3 < ((Attr[])var4_10).length; ++var2_3) {
                var5_15 = var4_10[var2_3];
                this.fOut.print(' ');
                this.fOut.print(var5_15.getNodeName());
                this.fOut.print("=\"");
                this.normalizeAndPrint(var5_15.getNodeValue(), true);
                this.fOut.print('\"');
            }
            this.fOut.print('>');
            this.fOut.flush();
            for (var4_10 = var1_1.getFirstChild(); var4_10 != null; var4_10 = var4_10.getNextSibling()) {
                this.write((Node)var4_10);
            }
        }
        if (var3_2 != 1) return;
        this.fOut.print("</");
        this.fOut.print(var1_1.getNodeName());
        this.fOut.print('>');
        this.fOut.flush();
    }
}

