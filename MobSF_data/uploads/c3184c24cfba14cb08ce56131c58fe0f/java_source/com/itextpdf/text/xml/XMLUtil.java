/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.xml;

public class XMLUtil {
    public static String escapeXML(String string2, boolean bl2) {
        char[] arrc = string2.toCharArray();
        int n2 = arrc.length;
        StringBuffer stringBuffer = new StringBuffer();
        block4 : for (int i2 = 0; i2 < n2; ++i2) {
            char c2 = arrc[i2];
            if (c2 != '\"') {
                if (c2 != '<') {
                    if (c2 != '>') {
                        switch (c2) {
                            default: {
                                int n3;
                                if (!XMLUtil.isValidCharacterValue(c2)) continue block4;
                                if (bl2 && c2 > '') {
                                    stringBuffer.append("&#");
                                    stringBuffer.append((int)c2);
                                    n3 = 59;
                                } else {
                                    n3 = c2;
                                }
                                stringBuffer.append((char)n3);
                                continue block4;
                            }
                            case '\'': {
                                string2 = "&apos;";
                                break;
                            }
                            case '&': {
                                string2 = "&amp;";
                                break;
                            }
                        }
                    } else {
                        string2 = "&gt;";
                    }
                } else {
                    string2 = "&lt;";
                }
            } else {
                string2 = "&quot;";
            }
            stringBuffer.append(string2);
        }
        return stringBuffer.toString();
    }

    public static int findInArray(char c2, char[] arrc, int n2) {
        while (n2 < arrc.length) {
            if (arrc[n2] == ';') {
                return n2;
            }
            ++n2;
        }
        return -1;
    }

    public static String getEncodingName(byte[] arrby) {
        int n2 = arrby[0] & 255;
        int n3 = arrby[1] & 255;
        if (n2 == 254 && n3 == 255) {
            return "UTF-16BE";
        }
        if (n2 == 255 && n3 == 254) {
            return "UTF-16LE";
        }
        int n4 = arrby[2] & 255;
        if (n2 == 239 && n3 == 187 && n4 == 191) {
            return "UTF-8";
        }
        int n5 = arrby[3] & 255;
        if (n2 == 0 && n3 == 0 && n4 == 0 && n5 == 60) {
            return "ISO-10646-UCS-4";
        }
        if (n2 == 60 && n3 == 0 && n4 == 0 && n5 == 0) {
            return "ISO-10646-UCS-4";
        }
        if (n2 == 0 && n3 == 0 && n4 == 60 && n5 == 0) {
            return "ISO-10646-UCS-4";
        }
        if (n2 == 0 && n3 == 60 && n4 == 0 && n5 == 0) {
            return "ISO-10646-UCS-4";
        }
        if (n2 == 0 && n3 == 60 && n4 == 0 && n5 == 63) {
            return "UTF-16BE";
        }
        if (n2 == 60 && n3 == 0 && n4 == 63 && n5 == 0) {
            return "UTF-16LE";
        }
        if (n2 == 76 && n3 == 111 && n4 == 167 && n5 == 148) {
            return "CP037";
        }
        return "UTF-8";
    }

    public static boolean isValidCharacterValue(int n2) {
        if (!(n2 == 9 || n2 == 10 || n2 == 13 || n2 >= 32 && n2 <= 55295 || n2 >= 57344 && n2 <= 65533 || n2 >= 65536 && n2 <= 1114111)) {
            return false;
        }
        return true;
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    public static boolean isValidCharacterValue(String string2) {
        try {
            return XMLUtil.isValidCharacterValue(Integer.parseInt(string2));
        }
        catch (NumberFormatException numberFormatException) {
            return false;
        }
    }

    public static int unescape(String string2) {
        if ("apos".equals(string2)) {
            return 39;
        }
        if ("quot".equals(string2)) {
            return 34;
        }
        if ("lt".equals(string2)) {
            return 60;
        }
        if ("gt".equals(string2)) {
            return 62;
        }
        if ("amp".equals(string2)) {
            return 38;
        }
        return -1;
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Lifted jumps to return sites
     */
    public static String unescapeXML(String var0) {
        var0 = var0.toCharArray();
        var5_1 = var0.length;
        var6_2 = new StringBuffer();
        var1_3 = 0;
        while (var1_3 < var5_1) {
            block4 : {
                block5 : {
                    block3 : {
                        var3_5 = var0[var1_3];
                        if (var3_5 != 38 || (var2_4 = XMLUtil.findInArray(';', var0, var1_3 + 3)) <= -1) ** GOTO lbl-1000
                        var7_7 = new String(var0, var1_3 + 1, var2_4 - var1_3 - 1);
                        if (!var7_7.startsWith("#")) break block3;
                        var7_7 = var7_7.substring(1);
                        var1_3 = var2_4;
                        if (!XMLUtil.isValidCharacterValue(var7_7)) break block4;
                        var1_3 = (char)Integer.parseInt(var7_7);
                        break block5;
                    }
                    var4_6 = XMLUtil.unescape(var7_7);
                    if (var4_6 > 0) {
                        var1_3 = var4_6;
                    } else lbl-1000: // 2 sources:
                    {
                        var2_4 = var1_3;
                        var1_3 = var3_5;
                    }
                }
                var6_2.append((char)var1_3);
                var1_3 = var2_4;
            }
            ++var1_3;
        }
        return var6_2.toString();
    }
}

