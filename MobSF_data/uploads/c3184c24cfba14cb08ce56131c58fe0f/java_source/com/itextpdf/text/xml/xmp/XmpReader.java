/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.xml.xmp;

import com.itextpdf.text.ExceptionConverter;
import com.itextpdf.text.xml.XmlDomWriter;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NamedNodeMap;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.w3c.dom.Text;

@Deprecated
public class XmpReader {
    public static final String EXTRASPACE = "                                                                                                   \n";
    public static final String XPACKET_PI_BEGIN = "<?xpacket begin=\"\ufeff\" id=\"W5M0MpCehiHzreSzNTczkc9d\"?>\n";
    public static final String XPACKET_PI_END_W = "<?xpacket end=\"w\"?>";
    private Document domDocument;

    public XmpReader(byte[] arrby) {
        try {
            DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();
            documentBuilderFactory.setNamespaceAware(true);
            this.domDocument = documentBuilderFactory.newDocumentBuilder().parse(new ByteArrayInputStream(arrby));
            return;
        }
        catch (ParserConfigurationException parserConfigurationException) {
            throw new ExceptionConverter(parserConfigurationException);
        }
    }

    public boolean add(String object, String object2, String string2, String string3) {
        Object object3 = this.domDocument.getElementsByTagName((String)object);
        if (object3.getLength() == 0) {
            return false;
        }
        for (int i2 = 0; i2 < object3.getLength(); ++i2) {
            object = object3.item(i2);
            NamedNodeMap namedNodeMap = object.getAttributes();
            for (int i3 = 0; i3 < namedNodeMap.getLength(); ++i3) {
                Node node = namedNodeMap.item(i3);
                if (!object2.equals(node.getNodeValue())) continue;
                object3 = node.getLocalName();
                object2 = this.domDocument.createElementNS((String)object2, string2);
                object2.setPrefix((String)object3);
                object2.appendChild(this.domDocument.createTextNode(string3));
                object.appendChild((Node)object2);
                return true;
            }
        }
        return false;
    }

    public boolean replaceDescriptionAttribute(String string2, String string3, String string4) {
        NodeList nodeList = this.domDocument.getElementsByTagNameNS("http://www.w3.org/1999/02/22-rdf-syntax-ns#", "Description");
        if (nodeList.getLength() == 0) {
            return false;
        }
        for (int i2 = 0; i2 < nodeList.getLength(); ++i2) {
            Node node = nodeList.item(i2).getAttributes().getNamedItemNS(string2, string3);
            if (node == null) continue;
            node.setNodeValue(string4);
            return true;
        }
        return false;
    }

    public boolean replaceNode(String object, String object2, String string2) {
        object = this.domDocument.getElementsByTagNameNS((String)object, (String)object2);
        int n2 = object.getLength();
        if (n2 == 0) {
            return false;
        }
        for (int i2 = 0; i2 < object.getLength(); ++i2) {
            object2 = object.item(i2);
            this.setNodeText(this.domDocument, (Node)object2, string2);
        }
        return true;
    }

    public byte[] serializeDoc() {
        XmlDomWriter xmlDomWriter = new XmlDomWriter();
        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        xmlDomWriter.setOutput(byteArrayOutputStream, null);
        byteArrayOutputStream.write(XPACKET_PI_BEGIN.getBytes("UTF-8"));
        byteArrayOutputStream.flush();
        NodeList nodeList = this.domDocument.getElementsByTagName("x:xmpmeta");
        xmlDomWriter.write(nodeList.item(0));
        byteArrayOutputStream.flush();
        for (int i2 = 0; i2 < 20; ++i2) {
            byteArrayOutputStream.write(EXTRASPACE.getBytes());
        }
        byteArrayOutputStream.write(XPACKET_PI_END_W.getBytes());
        byteArrayOutputStream.close();
        return byteArrayOutputStream.toByteArray();
    }

    public boolean setNodeText(Document document, Node node, String string2) {
        Node node2;
        if (node == null) {
            return false;
        }
        while ((node2 = node.getFirstChild()) != null) {
            node.removeChild(node2);
        }
        node.appendChild(document.createTextNode(string2));
        return true;
    }
}

