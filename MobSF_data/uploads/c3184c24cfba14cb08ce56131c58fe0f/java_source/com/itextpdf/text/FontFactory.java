/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text;

import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Font;
import com.itextpdf.text.FontFactoryImp;
import com.itextpdf.text.error_messages.MessageLocalization;
import java.util.Set;

public final class FontFactory {
    public static final String COURIER = "Courier";
    public static final String COURIER_BOLD = "Courier-Bold";
    public static final String COURIER_BOLDOBLIQUE = "Courier-BoldOblique";
    public static final String COURIER_OBLIQUE = "Courier-Oblique";
    public static final String HELVETICA = "Helvetica";
    public static final String HELVETICA_BOLD = "Helvetica-Bold";
    public static final String HELVETICA_BOLDOBLIQUE = "Helvetica-BoldOblique";
    public static final String HELVETICA_OBLIQUE = "Helvetica-Oblique";
    public static final String SYMBOL = "Symbol";
    public static final String TIMES = "Times";
    public static final String TIMES_BOLD = "Times-Bold";
    public static final String TIMES_BOLDITALIC = "Times-BoldItalic";
    public static final String TIMES_ITALIC = "Times-Italic";
    public static final String TIMES_ROMAN = "Times-Roman";
    public static final String ZAPFDINGBATS = "ZapfDingbats";
    public static boolean defaultEmbedding;
    public static String defaultEncoding;
    private static FontFactoryImp fontImp;

    static {
        fontImp = new FontFactoryImp();
        defaultEncoding = "Cp1252";
        defaultEmbedding = false;
    }

    private FontFactory() {
    }

    public static boolean contains(String string2) {
        return fontImp.isRegistered(string2);
    }

    public static Font getFont(String string2) {
        return FontFactory.getFont(string2, defaultEncoding, defaultEmbedding, -1.0f, -1, null);
    }

    public static Font getFont(String string2, float f2) {
        return FontFactory.getFont(string2, defaultEncoding, defaultEmbedding, f2, -1, null);
    }

    public static Font getFont(String string2, float f2, int n2) {
        return FontFactory.getFont(string2, defaultEncoding, defaultEmbedding, f2, n2, null);
    }

    public static Font getFont(String string2, float f2, int n2, BaseColor baseColor) {
        return FontFactory.getFont(string2, defaultEncoding, defaultEmbedding, f2, n2, baseColor);
    }

    public static Font getFont(String string2, float f2, BaseColor baseColor) {
        return FontFactory.getFont(string2, defaultEncoding, defaultEmbedding, f2, -1, baseColor);
    }

    public static Font getFont(String string2, String string3) {
        return FontFactory.getFont(string2, string3, defaultEmbedding, -1.0f, -1, null);
    }

    public static Font getFont(String string2, String string3, float f2) {
        return FontFactory.getFont(string2, string3, defaultEmbedding, f2, -1, null);
    }

    public static Font getFont(String string2, String string3, float f2, int n2) {
        return FontFactory.getFont(string2, string3, defaultEmbedding, f2, n2, null);
    }

    public static Font getFont(String string2, String string3, float f2, int n2, BaseColor baseColor) {
        return FontFactory.getFont(string2, string3, defaultEmbedding, f2, n2, baseColor);
    }

    public static Font getFont(String string2, String string3, boolean bl2) {
        return FontFactory.getFont(string2, string3, bl2, -1.0f, -1, null);
    }

    public static Font getFont(String string2, String string3, boolean bl2, float f2) {
        return FontFactory.getFont(string2, string3, bl2, f2, -1, null);
    }

    public static Font getFont(String string2, String string3, boolean bl2, float f2, int n2) {
        return FontFactory.getFont(string2, string3, bl2, f2, n2, null);
    }

    public static Font getFont(String string2, String string3, boolean bl2, float f2, int n2, BaseColor baseColor) {
        return fontImp.getFont(string2, string3, bl2, f2, n2, baseColor);
    }

    public static Font getFont(String string2, String string3, boolean bl2, float f2, int n2, BaseColor baseColor, boolean bl3) {
        return fontImp.getFont(string2, string3, bl2, f2, n2, baseColor, bl3);
    }

    public static FontFactoryImp getFontImp() {
        return fontImp;
    }

    public static Set<String> getRegisteredFamilies() {
        return fontImp.getRegisteredFamilies();
    }

    public static Set<String> getRegisteredFonts() {
        return fontImp.getRegisteredFonts();
    }

    public static boolean isRegistered(String string2) {
        return fontImp.isRegistered(string2);
    }

    public static void register(String string2) {
        FontFactory.register(string2, null);
    }

    public static void register(String string2, String string3) {
        fontImp.register(string2, string3);
    }

    public static int registerDirectories() {
        return fontImp.registerDirectories();
    }

    public static int registerDirectory(String string2) {
        return fontImp.registerDirectory(string2);
    }

    public static int registerDirectory(String string2, boolean bl2) {
        return fontImp.registerDirectory(string2, bl2);
    }

    public static void registerFamily(String string2, String string3, String string4) {
        fontImp.registerFamily(string2, string3, string4);
    }

    public static void setFontImp(FontFactoryImp fontFactoryImp) {
        if (fontFactoryImp != null) {
            fontImp = fontFactoryImp;
            return;
        }
        throw new NullPointerException(MessageLocalization.getComposedMessage("fontfactoryimp.cannot.be.null", new Object[0]));
    }
}

