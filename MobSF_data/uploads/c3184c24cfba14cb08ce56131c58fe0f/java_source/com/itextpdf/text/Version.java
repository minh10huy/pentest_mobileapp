/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text;

import java.lang.reflect.Method;

public final class Version {
    public static String AGPL = " (AGPL-version)";
    private static Version version;
    private String iText = "iText\u00ae";
    private String iTextVersion;
    private String key;
    private String release = "5.5.10";

    public Version() {
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append(this.iText);
        stringBuilder.append(" ");
        stringBuilder.append(this.release);
        stringBuilder.append(" \u00a92000-2015 iText Group NV");
        this.iTextVersion = stringBuilder.toString();
        this.key = null;
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Converted monitor instructions to comments
     * Lifted jumps to return sites
     */
    public static Version getInstance() {
        block18 : {
            block17 : {
                if (Version.version != null) return Version.version;
                var2 = Version.version = new Version();
                // MONITORENTER : var2
                var0_1 = Class.forName("com.itextpdf.license.LicenseKey");
                var3_5 = (String[])var0_1.getMethod("getLicenseeInfo", new Class[0]).invoke(var0_1.newInstance(), new Object[0]);
                if (var3_5[3] == null) ** GOTO lbl-1000
                if (var3_5[3].trim().length() <= 0) ** GOTO lbl-1000
                var1_6 = Version.version;
                var0_1 = var3_5[3];
                ** GOTO lbl21
lbl-1000: // 2 sources:
                {
                    Version.version.key = "Trial version ";
                    if (var3_5[5] != null) ** GOTO lbl24
                    var0_1 = new StringBuilder();
                    var1_6 = Version.version;
                    var0_1.append(var1_6.key);
                    var0_1.append("unauthorised");
                    var0_1 = var0_1.toString();
lbl21: // 2 sources:
                    ** try [egrp 2[TRYBLOCK] [5, 4 : 82->98)] { 
lbl22: // 1 sources:
                    var1_6.key = var0_1;
                    break block17;
lbl24: // 1 sources:
                    var0_1 = new StringBuilder();
                    var1_6 = Version.version;
                    var0_1.append(var1_6.key);
                    var0_1.append(var3_5[5]);
                    var1_6.key = var0_1.toString();
                }
            }
            if (var3_5[4] != null) {
                if (var3_5[4].trim().length() <= 0) break block18;
                Version.version.iTextVersion = var3_5[4];
                return Version.version;
            }
        }
        if (var3_5[2] == null) ** GOTO lbl-1000
        try {
            block19 : {
                if (var3_5[2].trim().length() > 0) {
                    var0_1 = new StringBuilder();
                    var1_6 = Version.version;
                    var0_1.append(var1_6.iTextVersion);
                    var0_1.append(" (");
                    var0_1.append(var3_5[2]);
                    var1_6.iTextVersion = var0_1.toString();
                    if (!Version.version.key.toLowerCase().startsWith("trial")) {
                        var0_1 = new StringBuilder();
                        var1_6 = Version.version;
                        var0_1.append(var1_6.iTextVersion);
                        var0_1.append("; licensed version)");
                        var0_1 = var0_1.toString();
                    } else {
                        var0_1 = new StringBuilder();
                        var1_6 = Version.version;
                        var0_1.append(var1_6.iTextVersion);
                        var0_1.append("; ");
                        var0_1.append(Version.version.key);
                        var0_1.append(")");
                        var0_1 = var0_1.toString();
                    }
                } else lbl-1000: // 2 sources:
                {
                    if (var3_5[0] == null) throw new Exception();
                    if (var3_5[0].trim().length() <= 0) throw new Exception();
                    var0_1 = new StringBuilder();
                    var1_6 = Version.version;
                    var0_1.append(var1_6.iTextVersion);
                    var0_1.append(" (");
                    var0_1.append(var3_5[0]);
                    var1_6.iTextVersion = var0_1.toString();
                    if (!Version.version.key.toLowerCase().startsWith("trial")) {
                        var0_1 = new StringBuilder();
                        var1_6 = Version.version;
                        var0_1.append(var1_6.iTextVersion);
                        var0_1.append("; licensed version)");
                        var0_1 = var0_1.toString();
                        break block19;
                    }
                    var0_1 = new StringBuilder();
                    var1_6 = Version.version;
                    var0_1.append(var1_6.iTextVersion);
                    var0_1.append("; ");
                    var0_1.append(Version.version.key);
                    var0_1.append(")");
                    var0_1 = var0_1.toString();
                }
            }
            var1_6.iTextVersion = var0_1;
            return Version.version;
        }
lbl87: // 7 sources:
        catch (Throwable var0_2) {
            throw var0_2;
        }
lbl89: // 7 sources:
        catch (Exception var0_3) {}
        var0_4 = new StringBuilder();
        var1_6 = Version.version;
        var0_4.append(var1_6.iTextVersion);
        var0_4.append(Version.AGPL);
        var1_6.iTextVersion = var0_4.toString();
        // MONITOREXIT : var2
        return Version.version;
    }

    public static boolean isAGPLVersion() {
        if (Version.getInstance().getVersion().indexOf(AGPL) > 0) {
            return true;
        }
        return false;
    }

    public String getKey() {
        return this.key;
    }

    public String getProduct() {
        return this.iText;
    }

    public String getRelease() {
        return this.release;
    }

    public String getVersion() {
        return this.iTextVersion;
    }
}

