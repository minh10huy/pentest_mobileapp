/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.html.simpleparser;

import com.itextpdf.text.Chunk;
import com.itextpdf.text.DocListener;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.ExceptionConverter;
import com.itextpdf.text.FontProvider;
import com.itextpdf.text.Image;
import com.itextpdf.text.List;
import com.itextpdf.text.ListItem;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.TextElementArray;
import com.itextpdf.text.html.HtmlUtilities;
import com.itextpdf.text.html.simpleparser.CellWrapper;
import com.itextpdf.text.html.simpleparser.ChainedProperties;
import com.itextpdf.text.html.simpleparser.ElementFactory;
import com.itextpdf.text.html.simpleparser.HTMLTagProcessor;
import com.itextpdf.text.html.simpleparser.HTMLTagProcessors;
import com.itextpdf.text.html.simpleparser.ImageProcessor;
import com.itextpdf.text.html.simpleparser.ImageProvider;
import com.itextpdf.text.html.simpleparser.ImageStore;
import com.itextpdf.text.html.simpleparser.LinkProcessor;
import com.itextpdf.text.html.simpleparser.StyleSheet;
import com.itextpdf.text.html.simpleparser.TableWrapper;
import com.itextpdf.text.log.Logger;
import com.itextpdf.text.log.LoggerFactory;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.draw.LineSeparator;
import com.itextpdf.text.xml.simpleparser.SimpleXMLDocHandler;
import com.itextpdf.text.xml.simpleparser.SimpleXMLParser;
import java.io.IOException;
import java.io.Reader;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Stack;

@Deprecated
public class HTMLWorker
implements DocListener,
SimpleXMLDocHandler {
    public static final String FONT_PROVIDER = "font_factory";
    public static final String IMG_BASEURL = "img_baseurl";
    public static final String IMG_PROCESSOR = "img_interface";
    public static final String IMG_PROVIDER = "img_provider";
    public static final String IMG_STORE = "img_static";
    public static final String LINK_PROVIDER = "alink_interface";
    private static Logger LOGGER = LoggerFactory.getLogger(HTMLWorker.class);
    private final ChainedProperties chain = new ChainedProperties();
    protected Paragraph currentParagraph;
    protected DocListener document;
    private final ElementFactory factory = new ElementFactory();
    private boolean insidePRE = false;
    protected java.util.List<Element> objectList;
    private boolean pendingLI = false;
    private boolean pendingTD = false;
    private boolean pendingTR = false;
    private Map<String, Object> providers = new HashMap<String, Object>();
    protected boolean skipText = false;
    protected Stack<Element> stack = new Stack();
    private StyleSheet style = new StyleSheet();
    private final Stack<boolean[]> tableState = new Stack();
    protected Map<String, HTMLTagProcessor> tags;

    public HTMLWorker(DocListener docListener) {
        this(docListener, null, null);
    }

    public HTMLWorker(DocListener docListener, Map<String, HTMLTagProcessor> map, StyleSheet styleSheet) {
        this.document = docListener;
        this.setSupportedTags(map);
        this.setStyleSheet(styleSheet);
    }

    public static java.util.List<Element> parseToList(Reader reader, StyleSheet styleSheet) {
        return HTMLWorker.parseToList(reader, styleSheet, null);
    }

    public static java.util.List<Element> parseToList(Reader reader, StyleSheet styleSheet, HashMap<String, Object> hashMap) {
        return HTMLWorker.parseToList(reader, styleSheet, null, hashMap);
    }

    public static java.util.List<Element> parseToList(Reader reader, StyleSheet object, Map<String, HTMLTagProcessor> map, HashMap<String, Object> hashMap) {
        object.document = object = new HTMLWorker(null, map, (StyleSheet)object);
        object.setProviders(hashMap);
        object.objectList = new ArrayList<Element>();
        object.parse(reader);
        return object.objectList;
    }

    @Override
    public boolean add(Element element) {
        this.objectList.add(element);
        return true;
    }

    public void carriageReturn() {
        if (this.currentParagraph == null) {
            return;
        }
        if (this.stack.empty()) {
            this.document.add(this.currentParagraph);
        } else {
            Element element = this.stack.pop();
            if (element instanceof TextElementArray) {
                ((TextElementArray)element).add(this.currentParagraph);
            }
            this.stack.push(element);
        }
        this.currentParagraph = null;
    }

    @Override
    public void close() {
    }

    public CellWrapper createCell(String string2) {
        return new CellWrapper(string2, this.chain);
    }

    public Chunk createChunk(String string2) {
        return this.factory.createChunk(string2, this.chain);
    }

    public Image createImage(Map<String, String> map) {
        String string2 = map.get("src");
        if (string2 == null) {
            return null;
        }
        return this.factory.createImage(string2, map, this.chain, this.document, (ImageProvider)this.providers.get(IMG_PROVIDER), (ImageStore)this.providers.get(IMG_STORE), (String)this.providers.get(IMG_BASEURL));
    }

    public LineSeparator createLineSeparator(Map<String, String> map) {
        return this.factory.createLineSeparator(map, this.currentParagraph.getLeading() / 2.0f);
    }

    public List createList(String string2) {
        return this.factory.createList(string2, this.chain);
    }

    public ListItem createListItem() {
        return this.factory.createListItem(this.chain);
    }

    public Paragraph createParagraph() {
        return this.factory.createParagraph(this.chain);
    }

    @Override
    public void endDocument() {
        int n2 = 0;
        do {
            if (n2 >= this.stack.size()) break;
            this.document.add(this.stack.elementAt(n2));
            ++n2;
        } while (true);
        try {
            if (this.currentParagraph != null) {
                this.document.add(this.currentParagraph);
            }
            this.currentParagraph = null;
            return;
        }
        catch (Exception exception) {
            throw new ExceptionConverter(exception);
        }
    }

    @Override
    public void endElement(String string2) {
        HTMLTagProcessor hTMLTagProcessor = this.tags.get(string2);
        if (hTMLTagProcessor == null) {
            return;
        }
        try {
            hTMLTagProcessor.endElement(this, string2);
            return;
        }
        catch (DocumentException documentException) {
            throw new ExceptionConverter(documentException);
        }
    }

    public void flushContent() {
        this.pushToStack(this.currentParagraph);
        this.currentParagraph = new Paragraph();
    }

    @Deprecated
    public Map<String, Object> getInterfaceProps() {
        return this.providers;
    }

    public boolean isInsidePRE() {
        return this.insidePRE;
    }

    public boolean isPendingLI() {
        return this.pendingLI;
    }

    public boolean isPendingTD() {
        return this.pendingTD;
    }

    public boolean isPendingTR() {
        return this.pendingTR;
    }

    public boolean isSkipText() {
        return this.skipText;
    }

    public void newLine() {
        if (this.currentParagraph == null) {
            this.currentParagraph = new Paragraph();
        }
        this.currentParagraph.add(this.createChunk("\n"));
    }

    @Override
    public boolean newPage() {
        return true;
    }

    @Override
    public void open() {
    }

    public void parse(Reader reader) {
        LOGGER.info("Please note, there is a more extended version of the HTMLWorker available in the iText XMLWorker");
        SimpleXMLParser.parse(this, null, reader, true);
    }

    public void popTableState() {
        boolean[] arrbl = this.tableState.pop();
        this.pendingTR = arrbl[0];
        this.pendingTD = arrbl[1];
    }

    public void processImage(Image image, Map<String, String> object) {
        ImageProcessor imageProcessor = (ImageProcessor)this.providers.get(IMG_PROCESSOR);
        if (imageProcessor == null || !imageProcessor.process(image, (Map<String, String>)object, this.chain, this.document)) {
            if ((object = object.get("align")) != null) {
                this.carriageReturn();
            }
            if (this.currentParagraph == null) {
                this.currentParagraph = this.createParagraph();
            }
            this.currentParagraph.add(new Chunk(image, 0.0f, 0.0f, true));
            this.currentParagraph.setAlignment(HtmlUtilities.alignmentValue((String)object));
            if (object != null) {
                this.carriageReturn();
            }
        }
    }

    /*
     * Enabled aggressive block sorting
     */
    public void processLink() {
        Object object;
        if (this.currentParagraph == null) {
            this.currentParagraph = new Paragraph();
        }
        if (!((object = (LinkProcessor)this.providers.get(LINK_PROVIDER)) != null && object.process(this.currentParagraph, this.chain) || (object = this.chain.getProperty("href")) == null)) {
            Iterator<Chunk> iterator = this.currentParagraph.getChunks().iterator();
            while (iterator.hasNext()) {
                iterator.next().setAnchor((String)object);
            }
        }
        if (this.stack.isEmpty()) {
            object = new Paragraph(new Phrase(this.currentParagraph));
        } else {
            object = (Paragraph)this.stack.pop();
            object.add(new Phrase(this.currentParagraph));
        }
        this.currentParagraph = object;
    }

    public void processList() {
        if (this.stack.empty()) {
            return;
        }
        Element element = this.stack.pop();
        if (!(element instanceof List)) {
            this.stack.push(element);
            return;
        }
        if (this.stack.empty()) {
            this.document.add(element);
            return;
        }
        ((TextElementArray)this.stack.peek()).add(element);
    }

    public void processListItem() {
        if (this.stack.empty()) {
            return;
        }
        Element element = this.stack.pop();
        if (!(element instanceof ListItem)) {
            this.stack.push(element);
            return;
        }
        if (this.stack.empty()) {
            this.document.add(element);
            return;
        }
        element = (ListItem)element;
        Element element2 = this.stack.pop();
        if (!(element2 instanceof List)) {
            this.stack.push(element2);
            return;
        }
        ((List)element2).add(element);
        element.adjustListSymbolFont();
        this.stack.push(element2);
    }

    public void processRow() {
        boolean bl2;
        int n2;
        float f2;
        Element element;
        float[] arrf = new float[]();
        ArrayList<Float> arrayList = new ArrayList<Float>();
        boolean bl3 = false;
        boolean bl4 = false;
        int n3 = 0;
        float f3 = 0.0f;
        do {
            element = this.stack.pop();
            bl2 = bl4;
            n2 = n3++;
            f2 = f3;
            if (element instanceof CellWrapper) {
                CellWrapper cellWrapper = (CellWrapper)element;
                f2 = cellWrapper.getWidth();
                arrayList.add(new Float(f2));
                bl2 = bl4 | cellWrapper.isPercentage();
                if (f2 != 0.0f) {
                    f3 += f2;
                }
                arrf.add(cellWrapper.getCell());
                f2 = f3;
                n2 = n3;
            }
            bl4 = bl2;
            n3 = n2;
            f3 = f2;
        } while (!(element instanceof TableWrapper));
        element = (TableWrapper)element;
        element.addRow((java.util.List<PdfPCell>)arrf);
        if (arrayList.size() > 0) {
            Collections.reverse(arrayList);
            arrf = new float[arrayList.size()];
            n3 = 0;
            do {
                bl4 = bl3;
                if (n3 >= arrf.length) break;
                arrf[n3] = ((Float)arrayList.get(n3)).floatValue();
                if (arrf[n3] == 0.0f && bl2 && n2 > 0) {
                    arrf[n3] = (100.0f - f2) / (float)n2;
                }
                if (arrf[n3] == 0.0f) {
                    bl4 = true;
                    break;
                }
                ++n3;
            } while (true);
            if (!bl4) {
                element.setColWidths(arrf);
            }
        }
        this.stack.push(element);
    }

    public void processTable() {
        PdfPTable pdfPTable = ((TableWrapper)this.stack.pop()).createTable();
        pdfPTable.setSplitRows(true);
        if (this.stack.empty()) {
            this.document.add(pdfPTable);
            return;
        }
        ((TextElementArray)this.stack.peek()).add(pdfPTable);
    }

    public void pushTableState() {
        this.tableState.push(new boolean[]{this.pendingTR, this.pendingTD});
    }

    public void pushToStack(Element element) {
        if (element != null) {
            this.stack.push(element);
        }
    }

    @Override
    public void resetPageCount() {
    }

    public void setInsidePRE(boolean bl2) {
        this.insidePRE = bl2;
    }

    @Deprecated
    public void setInterfaceProps(HashMap<String, Object> hashMap) {
        this.setProviders(hashMap);
    }

    @Override
    public boolean setMarginMirroring(boolean bl2) {
        return false;
    }

    @Override
    public boolean setMarginMirroringTopBottom(boolean bl2) {
        return false;
    }

    @Override
    public boolean setMargins(float f2, float f3, float f4, float f5) {
        return true;
    }

    @Override
    public void setPageCount(int n2) {
    }

    @Override
    public boolean setPageSize(Rectangle rectangle) {
        return true;
    }

    public void setPendingLI(boolean bl2) {
        this.pendingLI = bl2;
    }

    public void setPendingTD(boolean bl2) {
        this.pendingTD = bl2;
    }

    public void setPendingTR(boolean bl2) {
        this.pendingTR = bl2;
    }

    public void setProviders(Map<String, Object> map) {
        if (map == null) {
            return;
        }
        this.providers = map;
        FontProvider fontProvider = null;
        if (map != null) {
            fontProvider = (FontProvider)map.get(FONT_PROVIDER);
        }
        if (fontProvider != null) {
            this.factory.setFontProvider(fontProvider);
        }
    }

    public void setSkipText(boolean bl2) {
        this.skipText = bl2;
    }

    public void setStyleSheet(StyleSheet styleSheet) {
        StyleSheet styleSheet2 = styleSheet;
        if (styleSheet == null) {
            styleSheet2 = new StyleSheet();
        }
        this.style = styleSheet2;
    }

    public void setSupportedTags(Map<String, HTMLTagProcessor> hTMLTagProcessors) {
        HTMLTagProcessors hTMLTagProcessors2 = hTMLTagProcessors;
        if (hTMLTagProcessors == null) {
            hTMLTagProcessors2 = new HTMLTagProcessors();
        }
        this.tags = hTMLTagProcessors2;
    }

    @Override
    public void startDocument() {
        HashMap<String, String> hashMap = new HashMap<String, String>();
        this.style.applyStyle("body", hashMap);
        this.chain.addToChain("body", hashMap);
    }

    @Override
    public void startElement(String string2, Map<String, String> map) {
        HTMLTagProcessor hTMLTagProcessor = this.tags.get(string2);
        if (hTMLTagProcessor == null) {
            return;
        }
        this.style.applyStyle(string2, map);
        StyleSheet.resolveStyleAttribute(map, this.chain);
        try {
            hTMLTagProcessor.startElement(this, string2, map);
            return;
        }
        catch (IOException iOException) {
            throw new ExceptionConverter(iOException);
        }
        catch (DocumentException documentException) {
            throw new ExceptionConverter(documentException);
        }
    }

    @Override
    public void text(String object) {
        if (this.skipText) {
            return;
        }
        if (this.currentParagraph == null) {
            this.currentParagraph = this.createParagraph();
        }
        String string2 = object;
        if (!this.insidePRE) {
            if (object.trim().length() == 0 && object.indexOf(32) < 0) {
                return;
            }
            string2 = HtmlUtilities.eliminateWhiteSpace((String)object);
        }
        object = this.createChunk(string2);
        this.currentParagraph.add((Element)object);
    }

    public void updateChain(String string2) {
        this.chain.removeChain(string2);
    }

    public void updateChain(String string2, Map<String, String> map) {
        this.chain.addToChain(string2, map);
    }
}

