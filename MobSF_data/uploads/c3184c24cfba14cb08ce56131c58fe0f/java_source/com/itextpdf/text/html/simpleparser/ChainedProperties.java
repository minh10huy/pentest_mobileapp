/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.html.simpleparser;

import com.itextpdf.text.html.HtmlUtilities;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

@Deprecated
public class ChainedProperties {
    public List<TagAttributes> chain = new ArrayList<TagAttributes>();

    public void addToChain(String string2, Map<String, String> map) {
        this.adjustFontSize(map);
        this.chain.add(new TagAttributes(string2, map));
    }

    protected void adjustFontSize(Map<String, String> map) {
        String string2 = map.get("size");
        if (string2 == null) {
            return;
        }
        if (string2.endsWith("pt")) {
            map.put("size", string2.substring(0, string2.length() - 2));
            return;
        }
        map.put("size", Integer.toString(HtmlUtilities.getIndexedFontSize(string2, this.getProperty("size"))));
    }

    public String getProperty(String string2) {
        for (int i2 = this.chain.size() - 1; i2 >= 0; --i2) {
            String string3 = this.chain.get((int)i2).attrs.get(string2);
            if (string3 == null) continue;
            return string3;
        }
        return null;
    }

    public boolean hasProperty(String string2) {
        for (int i2 = this.chain.size() - 1; i2 >= 0; --i2) {
            if (!this.chain.get((int)i2).attrs.containsKey(string2)) continue;
            return true;
        }
        return false;
    }

    public void removeChain(String string2) {
        for (int i2 = this.chain.size() - 1; i2 >= 0; --i2) {
            if (!string2.equals(this.chain.get((int)i2).tag)) continue;
            this.chain.remove(i2);
            return;
        }
    }

    private static final class TagAttributes {
        final Map<String, String> attrs;
        final String tag;

        TagAttributes(String string2, Map<String, String> map) {
            this.tag = string2;
            this.attrs = map;
        }
    }

}

