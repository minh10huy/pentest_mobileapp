/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.html.simpleparser;

import com.itextpdf.text.Chunk;
import com.itextpdf.text.Element;
import com.itextpdf.text.ElementListener;
import com.itextpdf.text.html.HtmlUtilities;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

@Deprecated
public class TableWrapper
implements Element {
    private float[] colWidths;
    private final List<List<PdfPCell>> rows = new ArrayList<List<PdfPCell>>();
    private final Map<String, String> styles = new HashMap<String, String>();

    public TableWrapper(Map<String, String> map) {
        this.styles.putAll(map);
    }

    public void addRow(List<PdfPCell> list) {
        if (list != null) {
            Collections.reverse(list);
            this.rows.add(list);
        }
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    public PdfPTable createTable() {
        block11 : {
            if (this.rows.isEmpty()) {
                return new PdfPTable(1);
            }
            var4_1 = this.rows;
            var3_2 = 0;
            var4_1 = var4_1.get(0).iterator();
            var2_3 = 0;
            while (var4_1.hasNext()) {
                var2_3 += ((PdfPCell)var4_1.next()).getColspan();
            }
            var4_1 = new PdfPTable(var2_3);
            var5_4 = this.styles.get("width");
            if (var5_4 != null) break block11;
            var1_6 = 100.0f;
            ** GOTO lbl18
        }
        if (var5_4.endsWith("%")) {
            var1_6 = Float.parseFloat(var5_4.substring(0, var5_4.length() - 1));
lbl18: // 2 sources:
            var4_1.setWidthPercentage(var1_6);
        } else {
            var4_1.setTotalWidth(Float.parseFloat((String)var5_4));
            var4_1.setLockedWidth(true);
        }
        var5_4 = this.styles.get("align");
        var2_3 = var3_2;
        if (var5_4 != null) {
            var2_3 = HtmlUtilities.alignmentValue((String)var5_4);
        }
        var4_1.setHorizontalAlignment(var2_3);
        try {
            if (this.colWidths != null) {
                var4_1.setWidths(this.colWidths);
            }
        }
        catch (Exception var5_5) {}
        var5_4 = this.rows.iterator();
        block3 : do {
            if (var5_4.hasNext() == false) return var4_1;
            var6_7 = ((List)var5_4.next()).iterator();
            do {
                if (!var6_7.hasNext()) continue block3;
                var4_1.addCell((PdfPCell)var6_7.next());
            } while (true);
            break;
        } while (true);
    }

    @Override
    public List<Chunk> getChunks() {
        return null;
    }

    @Override
    public boolean isContent() {
        return false;
    }

    @Override
    public boolean isNestable() {
        return false;
    }

    @Override
    public boolean process(ElementListener elementListener) {
        return false;
    }

    public void setColWidths(float[] arrf) {
        this.colWidths = arrf;
    }

    @Override
    public int type() {
        return 0;
    }
}

