/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.html.simpleparser;

import com.itextpdf.text.Element;
import com.itextpdf.text.Image;
import com.itextpdf.text.List;
import com.itextpdf.text.ListItem;
import com.itextpdf.text.html.simpleparser.CellWrapper;
import com.itextpdf.text.html.simpleparser.HTMLTagProcessor;
import com.itextpdf.text.html.simpleparser.HTMLWorker;
import com.itextpdf.text.html.simpleparser.TableWrapper;
import com.itextpdf.text.pdf.draw.LineSeparator;
import java.util.HashMap;
import java.util.Map;

@Deprecated
public class HTMLTagProcessors
extends HashMap<String, HTMLTagProcessor> {
    public static final HTMLTagProcessor A;
    public static final HTMLTagProcessor BR;
    public static final HTMLTagProcessor DIV;
    public static final HTMLTagProcessor EM_STRONG_STRIKE_SUP_SUP;
    public static final HTMLTagProcessor H;
    public static final HTMLTagProcessor HR;
    public static final HTMLTagProcessor IMG;
    public static final HTMLTagProcessor LI;
    public static final HTMLTagProcessor PRE;
    public static final HTMLTagProcessor SPAN;
    public static final HTMLTagProcessor TABLE;
    public static final HTMLTagProcessor TD;
    public static final HTMLTagProcessor TR;
    public static final HTMLTagProcessor UL_OL;
    private static final long serialVersionUID = -959260811961222824L;

    static {
        EM_STRONG_STRIKE_SUP_SUP = new HTMLTagProcessor(){

            private String mapTag(String string2) {
                if ("em".equalsIgnoreCase(string2)) {
                    return "i";
                }
                if ("strong".equalsIgnoreCase(string2)) {
                    return "b";
                }
                String string3 = string2;
                if ("strike".equalsIgnoreCase(string2)) {
                    string3 = "s";
                }
                return string3;
            }

            @Override
            public void endElement(HTMLWorker hTMLWorker, String string2) {
                hTMLWorker.updateChain(this.mapTag(string2));
            }

            @Override
            public void startElement(HTMLWorker hTMLWorker, String string2, Map<String, String> map) {
                string2 = this.mapTag(string2);
                map.put(string2, null);
                hTMLWorker.updateChain(string2, map);
            }
        };
        A = new HTMLTagProcessor(){

            @Override
            public void endElement(HTMLWorker hTMLWorker, String string2) {
                hTMLWorker.processLink();
                hTMLWorker.updateChain(string2);
            }

            @Override
            public void startElement(HTMLWorker hTMLWorker, String string2, Map<String, String> map) {
                hTMLWorker.updateChain(string2, map);
                hTMLWorker.flushContent();
            }
        };
        BR = new HTMLTagProcessor(){

            @Override
            public void endElement(HTMLWorker hTMLWorker, String string2) {
            }

            @Override
            public void startElement(HTMLWorker hTMLWorker, String string2, Map<String, String> map) {
                hTMLWorker.newLine();
            }
        };
        UL_OL = new HTMLTagProcessor(){

            @Override
            public void endElement(HTMLWorker hTMLWorker, String string2) {
                hTMLWorker.carriageReturn();
                if (hTMLWorker.isPendingLI()) {
                    hTMLWorker.endElement("li");
                }
                hTMLWorker.setSkipText(false);
                hTMLWorker.updateChain(string2);
                hTMLWorker.processList();
            }

            @Override
            public void startElement(HTMLWorker hTMLWorker, String string2, Map<String, String> map) {
                hTMLWorker.carriageReturn();
                if (hTMLWorker.isPendingLI()) {
                    hTMLWorker.endElement("li");
                }
                hTMLWorker.setSkipText(true);
                hTMLWorker.updateChain(string2, map);
                hTMLWorker.pushToStack(hTMLWorker.createList(string2));
            }
        };
        HR = new HTMLTagProcessor(){

            @Override
            public void endElement(HTMLWorker hTMLWorker, String string2) {
            }

            @Override
            public void startElement(HTMLWorker hTMLWorker, String string2, Map<String, String> map) {
                hTMLWorker.carriageReturn();
                hTMLWorker.pushToStack(hTMLWorker.createLineSeparator(map));
            }
        };
        SPAN = new HTMLTagProcessor(){

            @Override
            public void endElement(HTMLWorker hTMLWorker, String string2) {
                hTMLWorker.updateChain(string2);
            }

            @Override
            public void startElement(HTMLWorker hTMLWorker, String string2, Map<String, String> map) {
                hTMLWorker.updateChain(string2, map);
            }
        };
        H = new HTMLTagProcessor(){

            @Override
            public void endElement(HTMLWorker hTMLWorker, String string2) {
                hTMLWorker.carriageReturn();
                hTMLWorker.updateChain(string2);
            }

            @Override
            public void startElement(HTMLWorker hTMLWorker, String string2, Map<String, String> map) {
                hTMLWorker.carriageReturn();
                if (!map.containsKey("size")) {
                    map.put("size", Integer.toString(7 - Integer.parseInt(string2.substring(1))));
                }
                hTMLWorker.updateChain(string2, map);
            }
        };
        LI = new HTMLTagProcessor(){

            @Override
            public void endElement(HTMLWorker hTMLWorker, String string2) {
                hTMLWorker.carriageReturn();
                hTMLWorker.setPendingLI(false);
                hTMLWorker.setSkipText(true);
                hTMLWorker.updateChain(string2);
                hTMLWorker.processListItem();
            }

            @Override
            public void startElement(HTMLWorker hTMLWorker, String string2, Map<String, String> map) {
                hTMLWorker.carriageReturn();
                if (hTMLWorker.isPendingLI()) {
                    hTMLWorker.endElement(string2);
                }
                hTMLWorker.setSkipText(false);
                hTMLWorker.setPendingLI(true);
                hTMLWorker.updateChain(string2, map);
                hTMLWorker.pushToStack(hTMLWorker.createListItem());
            }
        };
        PRE = new HTMLTagProcessor(){

            @Override
            public void endElement(HTMLWorker hTMLWorker, String string2) {
                hTMLWorker.carriageReturn();
                hTMLWorker.updateChain(string2);
                hTMLWorker.setInsidePRE(false);
            }

            @Override
            public void startElement(HTMLWorker hTMLWorker, String string2, Map<String, String> map) {
                hTMLWorker.carriageReturn();
                if (!map.containsKey("face")) {
                    map.put("face", "Courier");
                }
                hTMLWorker.updateChain(string2, map);
                hTMLWorker.setInsidePRE(true);
            }
        };
        DIV = new HTMLTagProcessor(){

            @Override
            public void endElement(HTMLWorker hTMLWorker, String string2) {
                hTMLWorker.carriageReturn();
                hTMLWorker.updateChain(string2);
            }

            @Override
            public void startElement(HTMLWorker hTMLWorker, String string2, Map<String, String> map) {
                hTMLWorker.carriageReturn();
                hTMLWorker.updateChain(string2, map);
            }
        };
        TABLE = new HTMLTagProcessor(){

            @Override
            public void endElement(HTMLWorker hTMLWorker, String string2) {
                hTMLWorker.carriageReturn();
                if (hTMLWorker.isPendingTR()) {
                    hTMLWorker.endElement("tr");
                }
                hTMLWorker.updateChain(string2);
                hTMLWorker.processTable();
                hTMLWorker.popTableState();
                hTMLWorker.setSkipText(false);
            }

            @Override
            public void startElement(HTMLWorker hTMLWorker, String string2, Map<String, String> map) {
                hTMLWorker.carriageReturn();
                hTMLWorker.pushToStack(new TableWrapper(map));
                hTMLWorker.pushTableState();
                hTMLWorker.setPendingTD(false);
                hTMLWorker.setPendingTR(false);
                hTMLWorker.setSkipText(true);
                map.remove("align");
                map.put("colspan", "1");
                map.put("rowspan", "1");
                hTMLWorker.updateChain(string2, map);
            }
        };
        TR = new HTMLTagProcessor(){

            @Override
            public void endElement(HTMLWorker hTMLWorker, String string2) {
                hTMLWorker.carriageReturn();
                if (hTMLWorker.isPendingTD()) {
                    hTMLWorker.endElement("td");
                }
                hTMLWorker.setPendingTR(false);
                hTMLWorker.updateChain(string2);
                hTMLWorker.processRow();
                hTMLWorker.setSkipText(true);
            }

            @Override
            public void startElement(HTMLWorker hTMLWorker, String string2, Map<String, String> map) {
                hTMLWorker.carriageReturn();
                if (hTMLWorker.isPendingTR()) {
                    hTMLWorker.endElement(string2);
                }
                hTMLWorker.setSkipText(true);
                hTMLWorker.setPendingTR(true);
                hTMLWorker.updateChain(string2, map);
            }
        };
        TD = new HTMLTagProcessor(){

            @Override
            public void endElement(HTMLWorker hTMLWorker, String string2) {
                hTMLWorker.carriageReturn();
                hTMLWorker.setPendingTD(false);
                hTMLWorker.updateChain("td");
                hTMLWorker.setSkipText(true);
            }

            @Override
            public void startElement(HTMLWorker hTMLWorker, String string2, Map<String, String> map) {
                hTMLWorker.carriageReturn();
                if (hTMLWorker.isPendingTD()) {
                    hTMLWorker.endElement(string2);
                }
                hTMLWorker.setSkipText(false);
                hTMLWorker.setPendingTD(true);
                hTMLWorker.updateChain("td", map);
                hTMLWorker.pushToStack(hTMLWorker.createCell(string2));
            }
        };
        IMG = new HTMLTagProcessor(){

            @Override
            public void endElement(HTMLWorker hTMLWorker, String string2) {
            }

            @Override
            public void startElement(HTMLWorker hTMLWorker, String string2, Map<String, String> map) {
                hTMLWorker.updateChain(string2, map);
                hTMLWorker.processImage(hTMLWorker.createImage(map), map);
                hTMLWorker.updateChain(string2);
            }
        };
    }

    public HTMLTagProcessors() {
        this.put("a", A);
        this.put("b", EM_STRONG_STRIKE_SUP_SUP);
        this.put("body", DIV);
        this.put("br", BR);
        this.put("div", DIV);
        this.put("em", EM_STRONG_STRIKE_SUP_SUP);
        this.put("font", SPAN);
        this.put("h1", H);
        this.put("h2", H);
        this.put("h3", H);
        this.put("h4", H);
        this.put("h5", H);
        this.put("h6", H);
        this.put("hr", HR);
        this.put("i", EM_STRONG_STRIKE_SUP_SUP);
        this.put("img", IMG);
        this.put("li", LI);
        this.put("ol", UL_OL);
        this.put("p", DIV);
        this.put("pre", PRE);
        this.put("s", EM_STRONG_STRIKE_SUP_SUP);
        this.put("span", SPAN);
        this.put("strike", EM_STRONG_STRIKE_SUP_SUP);
        this.put("strong", EM_STRONG_STRIKE_SUP_SUP);
        this.put("sub", EM_STRONG_STRIKE_SUP_SUP);
        this.put("sup", EM_STRONG_STRIKE_SUP_SUP);
        this.put("table", TABLE);
        this.put("td", TD);
        this.put("th", TD);
        this.put("tr", TR);
        this.put("u", EM_STRONG_STRIKE_SUP_SUP);
        this.put("ul", UL_OL);
    }

}

