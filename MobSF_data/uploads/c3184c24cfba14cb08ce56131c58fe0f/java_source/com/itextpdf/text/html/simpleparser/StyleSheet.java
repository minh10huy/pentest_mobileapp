/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.html.simpleparser;

import com.itextpdf.text.html.HtmlUtilities;
import com.itextpdf.text.html.simpleparser.ChainedProperties;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Properties;
import java.util.Set;

@Deprecated
public class StyleSheet {
    protected Map<String, Map<String, String>> classMap = new HashMap<String, Map<String, String>>();
    protected Map<String, Map<String, String>> tagMap = new HashMap<String, Map<String, String>>();

    /*
     * Enabled aggressive block sorting
     */
    public static void resolveStyleAttribute(Map<String, String> map, ChainedProperties object) {
        Object object2 = map.get("style");
        if (object2 == null) {
            return;
        }
        Properties properties = HtmlUtilities.parseAttributes((String)object2);
        Iterator iterator = properties.keySet().iterator();
        do {
            CharSequence charSequence;
            block15 : {
                block21 : {
                    float f2;
                    block24 : {
                        block23 : {
                            block22 : {
                                float f3;
                                block20 : {
                                    block19 : {
                                        block17 : {
                                            block18 : {
                                                block16 : {
                                                    block14 : {
                                                        if (!iterator.hasNext()) {
                                                            return;
                                                        }
                                                        object2 = (String)iterator.next();
                                                        if (!object2.equals("font-family")) break block14;
                                                        charSequence = "face";
                                                        object2 = properties.getProperty((String)object2);
                                                        break block15;
                                                    }
                                                    boolean bl2 = object2.equals("font-size");
                                                    f2 = 12.0f;
                                                    if (bl2) {
                                                        f2 = f3 = HtmlUtilities.parseLength(object.getProperty("size"), 12.0f);
                                                        if (f3 <= 0.0f) {
                                                            f2 = 12.0f;
                                                        }
                                                        charSequence = new StringBuilder();
                                                        charSequence.append(Float.toString(HtmlUtilities.parseLength(properties.getProperty((String)object2), f2)));
                                                        charSequence.append("pt");
                                                        map.put("size", charSequence.toString());
                                                        continue;
                                                    }
                                                    if (!object2.equals("font-style")) break block16;
                                                    if (!(object2 = properties.getProperty((String)object2).trim().toLowerCase()).equals("italic") && !object2.equals("oblique")) continue;
                                                    object2 = "i";
                                                    break block17;
                                                }
                                                if (!object2.equals("font-weight")) break block18;
                                                if (!(object2 = properties.getProperty((String)object2).trim().toLowerCase()).equals("bold") && !object2.equals("700") && !object2.equals("800") && !object2.equals("900")) continue;
                                                object2 = "b";
                                                break block17;
                                            }
                                            if (!object2.equals("text-decoration")) break block19;
                                            if (!properties.getProperty((String)object2).trim().toLowerCase().equals("underline")) continue;
                                            object2 = "u";
                                        }
                                        map.put((String)object2, null);
                                        continue;
                                    }
                                    if (!object2.equals("color")) break block20;
                                    if ((object2 = HtmlUtilities.decodeColor(properties.getProperty((String)object2))) == null) continue;
                                    object2 = Integer.toHexString(object2.getRGB());
                                    charSequence = new StringBuilder();
                                    charSequence.append("000000");
                                    charSequence.append((String)object2);
                                    object2 = charSequence.toString();
                                    charSequence = new StringBuilder();
                                    charSequence.append("#");
                                    charSequence.append(object2.substring(object2.length() - 6));
                                    object2 = charSequence.toString();
                                    charSequence = "color";
                                    break block15;
                                }
                                if (!object2.equals("line-height")) break block21;
                                charSequence = properties.getProperty((String)object2).trim();
                                f3 = HtmlUtilities.parseLength(object.getProperty("size"), 12.0f);
                                if (f3 > 0.0f) {
                                    f2 = f3;
                                }
                                f2 = HtmlUtilities.parseLength(properties.getProperty((String)object2), f2);
                                if (!charSequence.endsWith("%")) break block22;
                                object = new StringBuilder();
                                object.append("0,");
                                object.append(f2 / 100.0f);
                                object = object.toString();
                                break block23;
                            }
                            if (!"normal".equalsIgnoreCase((String)charSequence)) break block24;
                            object = "0,1.5";
                        }
                        map.put("leading", (String)object);
                        return;
                    }
                    charSequence = "leading";
                    object2 = new StringBuilder();
                    object2.append(f2);
                    object2.append(",0");
                    object2 = object2.toString();
                    break block15;
                }
                if (object2.equals("text-align")) {
                    object2 = properties.getProperty((String)object2).trim().toLowerCase();
                    charSequence = "align";
                } else {
                    if (!object2.equals("padding-left")) continue;
                    object2 = properties.getProperty((String)object2).trim().toLowerCase();
                    charSequence = "indent";
                    object2 = Float.toString(HtmlUtilities.parseLength((String)object2));
                }
            }
            map.put((String)charSequence, (String)object2);
        } while (true);
    }

    public void applyStyle(String map, Map<String, String> map2) {
        if ((map = this.tagMap.get(map.toLowerCase())) != null) {
            map = new HashMap(map);
            map.putAll(map2);
            map2.putAll(map);
        }
        if ((map = map2.get("class")) == null) {
            return;
        }
        if ((map = this.classMap.get(map.toLowerCase())) == null) {
            return;
        }
        map2.remove("class");
        map = new HashMap<String, String>(map);
        map.putAll(map2);
        map2.putAll(map);
    }

    public void loadStyle(String hashMap, String string2, String string3) {
        String string4 = hashMap.toLowerCase();
        Map<String, String> map = this.classMap.get(string4);
        hashMap = map;
        if (map == null) {
            hashMap = new HashMap<String, String>();
            this.classMap.put(string4, hashMap);
        }
        hashMap.put(string2, string3);
    }

    public void loadStyle(String string2, HashMap<String, String> hashMap) {
        this.classMap.put(string2.toLowerCase(), hashMap);
    }

    public void loadTagStyle(String hashMap, String string2, String string3) {
        String string4 = hashMap.toLowerCase();
        Map<String, String> map = this.tagMap.get(string4);
        hashMap = map;
        if (map == null) {
            hashMap = new HashMap<String, String>();
            this.tagMap.put(string4, hashMap);
        }
        hashMap.put(string2, string3);
    }

    public void loadTagStyle(String string2, Map<String, String> map) {
        this.tagMap.put(string2.toLowerCase(), map);
    }
}

