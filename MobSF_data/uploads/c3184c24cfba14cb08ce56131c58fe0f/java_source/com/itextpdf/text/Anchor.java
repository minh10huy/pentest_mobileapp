/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text;

import com.itextpdf.text.Chunk;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.ElementListener;
import com.itextpdf.text.Font;
import com.itextpdf.text.Phrase;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

public class Anchor
extends Phrase {
    private static final long serialVersionUID = -852278536049236911L;
    protected String name = null;
    protected String reference = null;

    public Anchor() {
        super(16.0f);
    }

    public Anchor(float f2) {
        super(f2);
    }

    public Anchor(float f2, Chunk chunk) {
        super(f2, chunk);
    }

    public Anchor(float f2, String string2) {
        super(f2, string2);
    }

    public Anchor(float f2, String string2, Font font) {
        super(f2, string2, font);
    }

    public Anchor(Chunk chunk) {
        super(chunk);
    }

    public Anchor(Phrase phrase) {
        super(phrase);
        if (phrase instanceof Anchor) {
            phrase = (Anchor)phrase;
            this.setName(phrase.name);
            this.setReference(phrase.reference);
        }
    }

    public Anchor(String string2) {
        super(string2);
    }

    public Anchor(String string2, Font font) {
        super(string2, font);
    }

    protected boolean applyAnchor(Chunk chunk, boolean bl2, boolean bl3) {
        boolean bl4 = bl2;
        if (this.name != null) {
            bl4 = bl2;
            if (bl2) {
                bl4 = bl2;
                if (!chunk.isEmpty()) {
                    chunk.setLocalDestination(this.name);
                    bl4 = false;
                }
            }
        }
        if (bl3) {
            chunk.setLocalGoto(this.reference.substring(1));
            return bl4;
        }
        if (this.reference != null) {
            chunk.setAnchor(this.reference);
        }
        return bl4;
    }

    @Override
    public List<Chunk> getChunks() {
        Object object = this.reference;
        boolean bl2 = true;
        boolean bl3 = object != null && this.reference.startsWith("#");
        object = new ArrayList();
        block0 : for (Object object2 : this) {
            if (object2 instanceof Chunk) {
                object2 = (Chunk)object2;
                bl2 = this.applyAnchor((Chunk)object2, bl2, bl3);
                object.add(object2);
                continue;
            }
            object2 = object2.getChunks().iterator();
            boolean bl4 = bl2;
            do {
                bl2 = bl4;
                if (!object2.hasNext()) continue block0;
                Chunk chunk = (Chunk)object2.next();
                bl4 = this.applyAnchor(chunk, bl4, bl3);
                object.add(chunk);
            } while (true);
        }
        return object;
    }

    public String getName() {
        return this.name;
    }

    public String getReference() {
        return this.reference;
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    public URL getUrl() {
        try {
            return new URL(this.reference);
        }
        catch (MalformedURLException malformedURLException) {
            return null;
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @Override
    public boolean process(ElementListener elementListener) {
        boolean bl2;
        Iterator<Chunk> iterator;
        try {
            iterator = this.getChunks().iterator();
            bl2 = this.reference != null && this.reference.startsWith("#");
        }
        catch (DocumentException documentException) {
            return false;
        }
        boolean bl3 = true;
        while (iterator.hasNext()) {
            Chunk chunk = iterator.next();
            boolean bl4 = bl3;
            if (this.name != null) {
                bl4 = bl3;
                if (bl3) {
                    bl4 = bl3;
                    if (!chunk.isEmpty()) {
                        chunk.setLocalDestination(this.name);
                        bl4 = false;
                    }
                }
            }
            if (bl2) {
                chunk.setLocalGoto(this.reference.substring(1));
            }
            elementListener.add(chunk);
            bl3 = bl4;
        }
        return true;
    }

    public void setName(String string2) {
        this.name = string2;
    }

    public void setReference(String string2) {
        this.reference = string2;
    }

    @Override
    public int type() {
        return 17;
    }
}

