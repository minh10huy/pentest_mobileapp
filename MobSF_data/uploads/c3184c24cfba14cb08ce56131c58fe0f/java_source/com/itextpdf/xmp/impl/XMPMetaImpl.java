/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.xmp.impl;

import com.itextpdf.xmp.XMPConst;
import com.itextpdf.xmp.XMPDateTime;
import com.itextpdf.xmp.XMPException;
import com.itextpdf.xmp.XMPIterator;
import com.itextpdf.xmp.XMPMeta;
import com.itextpdf.xmp.XMPPathFactory;
import com.itextpdf.xmp.XMPUtils;
import com.itextpdf.xmp.impl.ParameterAsserts;
import com.itextpdf.xmp.impl.Utils;
import com.itextpdf.xmp.impl.XMPIteratorImpl;
import com.itextpdf.xmp.impl.XMPNode;
import com.itextpdf.xmp.impl.XMPNodeUtils;
import com.itextpdf.xmp.impl.XMPNormalizer;
import com.itextpdf.xmp.impl.xpath.XMPPath;
import com.itextpdf.xmp.impl.xpath.XMPPathParser;
import com.itextpdf.xmp.options.IteratorOptions;
import com.itextpdf.xmp.options.ParseOptions;
import com.itextpdf.xmp.options.PropertyOptions;
import com.itextpdf.xmp.properties.XMPProperty;
import java.util.Calendar;
import java.util.Iterator;

public class XMPMetaImpl
implements XMPConst,
XMPMeta {
    static final /* synthetic */ boolean $assertionsDisabled = false;
    private static final int VALUE_BASE64 = 7;
    private static final int VALUE_BOOLEAN = 1;
    private static final int VALUE_CALENDAR = 6;
    private static final int VALUE_DATE = 5;
    private static final int VALUE_DOUBLE = 4;
    private static final int VALUE_INTEGER = 2;
    private static final int VALUE_LONG = 3;
    private static final int VALUE_STRING = 0;
    private String packetHeader = null;
    private XMPNode tree;

    public XMPMetaImpl() {
        this.tree = new XMPNode(null, null, null);
    }

    public XMPMetaImpl(XMPNode xMPNode) {
        this.tree = xMPNode;
    }

    private void doSetArrayItem(XMPNode xMPNode, int n2, String string2, PropertyOptions propertyOptions, boolean bl2) {
        XMPNode xMPNode2 = new XMPNode("[]", null);
        propertyOptions = XMPNodeUtils.verifySetOptions(propertyOptions, string2);
        int n3 = bl2 ? xMPNode.getChildrenLength() + 1 : xMPNode.getChildrenLength();
        int n4 = n2;
        if (n2 == -1) {
            n4 = n3;
        }
        if (1 <= n4 && n4 <= n3) {
            if (!bl2) {
                xMPNode.removeChild(n4);
            }
            xMPNode.addChild(n4, xMPNode2);
            this.setNode(xMPNode2, string2, propertyOptions, false);
            return;
        }
        throw new XMPException("Array index out of bounds", 104);
    }

    private Object evaluateNodeValue(int n2, XMPNode xMPNode) {
        String string2;
        String string3 = xMPNode.getValue();
        switch (n2) {
            default: {
                string2 = string3;
                if (string3 != null) break;
                string2 = xMPNode.getOptions().isCompositeProperty() ? string3 : "";
            }
            case 7: {
                return XMPUtils.decodeBase64(string3);
            }
            case 6: {
                return XMPUtils.convertToDate(string3).getCalendar();
            }
            case 5: {
                return XMPUtils.convertToDate(string3);
            }
            case 4: {
                return new Double(XMPUtils.convertToDouble(string3));
            }
            case 3: {
                return new Long(XMPUtils.convertToLong(string3));
            }
            case 2: {
                return new Integer(XMPUtils.convertToInteger(string3));
            }
            case 1: {
                return new Boolean(XMPUtils.convertToBoolean(string3));
            }
        }
        return string2;
    }

    @Override
    public void appendArrayItem(String object, String object2, PropertyOptions propertyOptions, String string2, PropertyOptions propertyOptions2) {
        block6 : {
            block9 : {
                block10 : {
                    block8 : {
                        block7 : {
                            ParameterAsserts.assertSchemaNS((String)object);
                            ParameterAsserts.assertArrayName((String)object2);
                            PropertyOptions propertyOptions3 = propertyOptions;
                            if (propertyOptions == null) {
                                propertyOptions3 = new PropertyOptions();
                            }
                            if (!propertyOptions3.isOnlyArrayOptions()) break block6;
                            propertyOptions = XMPNodeUtils.verifySetOptions(propertyOptions3, null);
                            object2 = XMPPathParser.expandXPath((String)object, (String)object2);
                            object = XMPNodeUtils.findNode(this.tree, (XMPPath)object2, false, null);
                            if (object == null) break block7;
                            if (!object.getOptions().isArray()) {
                                throw new XMPException("The named property is not an array", 102);
                            }
                            break block8;
                        }
                        if (!propertyOptions.isArray()) break block9;
                        object = XMPNodeUtils.findNode(this.tree, (XMPPath)object2, true, propertyOptions);
                        if (object == null) break block10;
                    }
                    this.doSetArrayItem((XMPNode)object, -1, string2, propertyOptions2, true);
                    return;
                }
                throw new XMPException("Failure creating array node", 102);
            }
            throw new XMPException("Explicit arrayOptions required to create new array", 103);
        }
        throw new XMPException("Only array form flags allowed for arrayOptions", 103);
    }

    @Override
    public void appendArrayItem(String string2, String string3, String string4) {
        this.appendArrayItem(string2, string3, null, string4, null);
    }

    @Override
    public Object clone() {
        return new XMPMetaImpl((XMPNode)this.tree.clone());
    }

    @Override
    public int countArrayItems(String object, String string2) {
        ParameterAsserts.assertSchemaNS((String)object);
        ParameterAsserts.assertArrayName(string2);
        object = XMPPathParser.expandXPath((String)object, string2);
        object = XMPNodeUtils.findNode(this.tree, (XMPPath)object, false, null);
        if (object == null) {
            return 0;
        }
        if (object.getOptions().isArray()) {
            return object.getChildrenLength();
        }
        throw new XMPException("The named property is not an array", 102);
    }

    @Override
    public void deleteArrayItem(String string2, String string3, int n2) {
        try {
            ParameterAsserts.assertSchemaNS(string2);
            ParameterAsserts.assertArrayName(string3);
            this.deleteProperty(string2, XMPPathFactory.composeArrayItemPath(string3, n2));
            return;
        }
        catch (XMPException xMPException) {
            return;
        }
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    @Override
    public void deleteProperty(String object, String string2) {
        try {
            ParameterAsserts.assertSchemaNS((String)object);
            ParameterAsserts.assertPropName(string2);
            object = XMPPathParser.expandXPath((String)object, string2);
            object = XMPNodeUtils.findNode(this.tree, (XMPPath)object, false, null);
            if (object == null) return;
        }
        catch (XMPException xMPException) {
            return;
        }
        XMPNodeUtils.deleteNode((XMPNode)object);
    }

    @Override
    public void deleteQualifier(String string2, String string3, String string4, String string5) {
        try {
            ParameterAsserts.assertSchemaNS(string2);
            ParameterAsserts.assertPropName(string3);
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append(string3);
            stringBuilder.append(XMPPathFactory.composeQualifierPath(string4, string5));
            this.deleteProperty(string2, stringBuilder.toString());
            return;
        }
        catch (XMPException xMPException) {
            return;
        }
    }

    @Override
    public void deleteStructField(String string2, String string3, String string4, String string5) {
        try {
            ParameterAsserts.assertSchemaNS(string2);
            ParameterAsserts.assertStructName(string3);
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append(string3);
            stringBuilder.append(XMPPathFactory.composeStructFieldPath(string4, string5));
            this.deleteProperty(string2, stringBuilder.toString());
            return;
        }
        catch (XMPException xMPException) {
            return;
        }
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    @Override
    public boolean doesArrayItemExist(String string2, String string3, int n2) {
        try {
            ParameterAsserts.assertSchemaNS(string2);
            ParameterAsserts.assertArrayName(string3);
            return this.doesPropertyExist(string2, XMPPathFactory.composeArrayItemPath(string3, n2));
        }
        catch (XMPException xMPException) {
            return false;
        }
    }

    @Override
    public boolean doesPropertyExist(String object, String string2) {
        boolean bl2 = false;
        try {
            ParameterAsserts.assertSchemaNS((String)object);
            ParameterAsserts.assertPropName(string2);
            object = XMPPathParser.expandXPath((String)object, string2);
            object = XMPNodeUtils.findNode(this.tree, (XMPPath)object, false, null);
            if (object != null) {
                bl2 = true;
            }
            return bl2;
        }
        catch (XMPException xMPException) {
            return false;
        }
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    @Override
    public boolean doesQualifierExist(String string2, String string3, String string4, String charSequence) {
        try {
            ParameterAsserts.assertSchemaNS(string2);
            ParameterAsserts.assertPropName(string3);
            string4 = XMPPathFactory.composeQualifierPath(string4, (String)charSequence);
            charSequence = new StringBuilder();
            charSequence.append(string3);
            charSequence.append(string4);
            return this.doesPropertyExist(string2, charSequence.toString());
        }
        catch (XMPException xMPException) {
            return false;
        }
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    @Override
    public boolean doesStructFieldExist(String string2, String string3, String string4, String charSequence) {
        try {
            ParameterAsserts.assertSchemaNS(string2);
            ParameterAsserts.assertStructName(string3);
            string4 = XMPPathFactory.composeStructFieldPath(string4, (String)charSequence);
            charSequence = new StringBuilder();
            charSequence.append(string3);
            charSequence.append(string4);
            return this.doesPropertyExist(string2, charSequence.toString());
        }
        catch (XMPException xMPException) {
            return false;
        }
    }

    @Override
    public String dumpObject() {
        return this.getRoot().dumpNode(true);
    }

    @Override
    public XMPProperty getArrayItem(String string2, String string3, int n2) {
        ParameterAsserts.assertSchemaNS(string2);
        ParameterAsserts.assertArrayName(string3);
        return this.getProperty(string2, XMPPathFactory.composeArrayItemPath(string3, n2));
    }

    @Override
    public XMPProperty getLocalizedText(String object, String string2, String string3, String string4) {
        ParameterAsserts.assertSchemaNS((String)object);
        ParameterAsserts.assertArrayName(string2);
        ParameterAsserts.assertSpecificLang(string4);
        string3 = string3 != null ? Utils.normalizeLangValue(string3) : null;
        string4 = Utils.normalizeLangValue(string4);
        object = XMPPathParser.expandXPath((String)object, string2);
        object = XMPNodeUtils.findNode(this.tree, (XMPPath)object, false, null);
        if (object == null) {
            return null;
        }
        object = XMPNodeUtils.chooseLocalizedText((XMPNode)object, string3, string4);
        int n2 = (Integer)object[0];
        object = (XMPNode)object[1];
        if (n2 != 0) {
            return new XMPProperty((XMPNode)object){
                final /* synthetic */ XMPNode val$itemNode;
                {
                    this.val$itemNode = xMPNode;
                }

                @Override
                public String getLanguage() {
                    return this.val$itemNode.getQualifier(1).getValue();
                }

                @Override
                public PropertyOptions getOptions() {
                    return this.val$itemNode.getOptions();
                }

                @Override
                public String getValue() {
                    return this.val$itemNode.getValue();
                }

                public String toString() {
                    return this.val$itemNode.getValue().toString();
                }
            };
        }
        return null;
    }

    @Override
    public String getObjectName() {
        if (this.tree.getName() != null) {
            return this.tree.getName();
        }
        return "";
    }

    @Override
    public String getPacketHeader() {
        return this.packetHeader;
    }

    @Override
    public XMPProperty getProperty(String string2, String string3) {
        return this.getProperty(string2, string3, 0);
    }

    protected XMPProperty getProperty(String object, String string2, int n2) {
        ParameterAsserts.assertSchemaNS((String)object);
        ParameterAsserts.assertPropName(string2);
        object = XMPPathParser.expandXPath((String)object, string2);
        object = XMPNodeUtils.findNode(this.tree, (XMPPath)object, false, null);
        if (object != null) {
            if (n2 != 0 && object.getOptions().isCompositeProperty()) {
                throw new XMPException("Property must be simple when a value type is requested", 102);
            }
            return new XMPProperty(this.evaluateNodeValue(n2, (XMPNode)object), (XMPNode)object){
                final /* synthetic */ XMPNode val$propNode;
                final /* synthetic */ Object val$value;
                {
                    this.val$value = object;
                    this.val$propNode = xMPNode;
                }

                @Override
                public String getLanguage() {
                    return null;
                }

                @Override
                public PropertyOptions getOptions() {
                    return this.val$propNode.getOptions();
                }

                @Override
                public String getValue() {
                    if (this.val$value != null) {
                        return this.val$value.toString();
                    }
                    return null;
                }

                public String toString() {
                    return this.val$value.toString();
                }
            };
        }
        return null;
    }

    @Override
    public byte[] getPropertyBase64(String string2, String string3) {
        return (byte[])this.getPropertyObject(string2, string3, 7);
    }

    @Override
    public Boolean getPropertyBoolean(String string2, String string3) {
        return (Boolean)this.getPropertyObject(string2, string3, 1);
    }

    @Override
    public Calendar getPropertyCalendar(String string2, String string3) {
        return (Calendar)this.getPropertyObject(string2, string3, 6);
    }

    @Override
    public XMPDateTime getPropertyDate(String string2, String string3) {
        return (XMPDateTime)this.getPropertyObject(string2, string3, 5);
    }

    @Override
    public Double getPropertyDouble(String string2, String string3) {
        return (Double)this.getPropertyObject(string2, string3, 4);
    }

    @Override
    public Integer getPropertyInteger(String string2, String string3) {
        return (Integer)this.getPropertyObject(string2, string3, 2);
    }

    @Override
    public Long getPropertyLong(String string2, String string3) {
        return (Long)this.getPropertyObject(string2, string3, 3);
    }

    protected Object getPropertyObject(String object, String string2, int n2) {
        ParameterAsserts.assertSchemaNS((String)object);
        ParameterAsserts.assertPropName(string2);
        object = XMPPathParser.expandXPath((String)object, string2);
        object = XMPNodeUtils.findNode(this.tree, (XMPPath)object, false, null);
        if (object != null) {
            if (n2 != 0 && object.getOptions().isCompositeProperty()) {
                throw new XMPException("Property must be simple when a value type is requested", 102);
            }
            return this.evaluateNodeValue(n2, (XMPNode)object);
        }
        return null;
    }

    @Override
    public String getPropertyString(String string2, String string3) {
        return (String)this.getPropertyObject(string2, string3, 0);
    }

    @Override
    public XMPProperty getQualifier(String string2, String string3, String string4, String string5) {
        ParameterAsserts.assertSchemaNS(string2);
        ParameterAsserts.assertPropName(string3);
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append(string3);
        stringBuilder.append(XMPPathFactory.composeQualifierPath(string4, string5));
        return this.getProperty(string2, stringBuilder.toString());
    }

    public XMPNode getRoot() {
        return this.tree;
    }

    @Override
    public XMPProperty getStructField(String string2, String string3, String string4, String string5) {
        ParameterAsserts.assertSchemaNS(string2);
        ParameterAsserts.assertStructName(string3);
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append(string3);
        stringBuilder.append(XMPPathFactory.composeStructFieldPath(string4, string5));
        return this.getProperty(string2, stringBuilder.toString());
    }

    @Override
    public void insertArrayItem(String string2, String string3, int n2, String string4) {
        this.insertArrayItem(string2, string3, n2, string4, null);
    }

    @Override
    public void insertArrayItem(String object, String string2, int n2, String string3, PropertyOptions propertyOptions) {
        ParameterAsserts.assertSchemaNS((String)object);
        ParameterAsserts.assertArrayName(string2);
        object = XMPPathParser.expandXPath((String)object, string2);
        object = XMPNodeUtils.findNode(this.tree, (XMPPath)object, false, null);
        if (object != null) {
            this.doSetArrayItem((XMPNode)object, n2, string3, propertyOptions, true);
            return;
        }
        throw new XMPException("Specified array does not exist", 102);
    }

    @Override
    public XMPIterator iterator() {
        return this.iterator(null, null, null);
    }

    @Override
    public XMPIterator iterator(IteratorOptions iteratorOptions) {
        return this.iterator(null, null, iteratorOptions);
    }

    @Override
    public XMPIterator iterator(String string2, String string3, IteratorOptions iteratorOptions) {
        return new XMPIteratorImpl(this, string2, string3, iteratorOptions);
    }

    @Override
    public void normalize(ParseOptions parseOptions) {
        ParseOptions parseOptions2 = parseOptions;
        if (parseOptions == null) {
            parseOptions2 = new ParseOptions();
        }
        XMPNormalizer.process(this, parseOptions2);
    }

    @Override
    public void setArrayItem(String string2, String string3, int n2, String string4) {
        this.setArrayItem(string2, string3, n2, string4, null);
    }

    @Override
    public void setArrayItem(String object, String string2, int n2, String string3, PropertyOptions propertyOptions) {
        ParameterAsserts.assertSchemaNS((String)object);
        ParameterAsserts.assertArrayName(string2);
        object = XMPPathParser.expandXPath((String)object, string2);
        object = XMPNodeUtils.findNode(this.tree, (XMPPath)object, false, null);
        if (object != null) {
            this.doSetArrayItem((XMPNode)object, n2, string3, propertyOptions, false);
            return;
        }
        throw new XMPException("Specified array does not exist", 102);
    }

    @Override
    public void setLocalizedText(String string2, String string3, String string4, String string5, String string6) {
        this.setLocalizedText(string2, string3, string4, string5, string6, null);
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Lifted jumps to return sites
     */
    @Override
    public void setLocalizedText(String var1_1, String var2_2, String var3_3, String var4_4, String var5_5, PropertyOptions var6_6) {
        block21 : {
            block20 : {
                ParameterAsserts.assertSchemaNS((String)var1_1);
                ParameterAsserts.assertArrayName((String)var2_2);
                ParameterAsserts.assertSpecificLang((String)var4_4);
                var3_3 = var3_3 != null ? Utils.normalizeLangValue((String)var3_3) : null;
                var6_6 = Utils.normalizeLangValue((String)var4_4);
                var1_1 = XMPPathParser.expandXPath((String)var1_1, (String)var2_2);
                var4_4 = XMPNodeUtils.findNode(this.tree, (XMPPath)var1_1, true, new PropertyOptions(7680));
                if (var4_4 == null) throw new XMPException("Failed to find or create array node", 102);
                if (!var4_4.getOptions().isArrayAltText()) {
                    if (var4_4.hasChildren() != false) throw new XMPException("Specified property is no alt-text array", 102);
                    if (var4_4.getOptions().isArrayAlternate() == false) throw new XMPException("Specified property is no alt-text array", 102);
                    var4_4.getOptions().setArrayAltText(true);
                }
                var2_2 = var4_4.iterateChildren();
                while (var2_2.hasNext()) {
                    var1_1 = (XMPNode)var2_2.next();
                    if (var1_1.hasQualifier() == false) throw new XMPException("Language qualifier must be first", 102);
                    if ("xml:lang".equals(var1_1.getQualifier(1).getName()) == false) throw new XMPException("Language qualifier must be first", 102);
                    if (!"x-default".equals(var1_1.getQualifier(1).getValue())) continue;
                    var7_7 = 1;
                    break block20;
                }
                var1_1 = null;
                var7_7 = 0;
            }
            if (var1_1 != null && var4_4.getChildrenLength() > 1) {
                var4_4.removeChild((XMPNode)var1_1);
                var4_4.addChild(1, (XMPNode)var1_1);
            }
            var2_2 = XMPNodeUtils.chooseLocalizedText((XMPNode)var4_4, (String)var3_3, (String)var6_6);
            var8_8 = (Integer)var2_2[0];
            var2_2 = (XMPNode)var2_2[1];
            var9_9 = "x-default".equals(var6_6);
            switch (var8_8) {
                default: {
                    throw new XMPException("Unexpected result from ChooseLocalizedText", 9);
                }
                case 5: {
                    XMPNodeUtils.appendLangItem((XMPNode)var4_4, (String)var6_6, var5_5);
                    var8_8 = var7_7;
                    if (var9_9) {
                        return;
                    }
                    break block21;
                }
                case 4: {
                    if (var1_1 != null && var4_4.getChildrenLength() == 1) {
                        var1_1.setValue(var5_5);
                    }
                    XMPNodeUtils.appendLangItem((XMPNode)var4_4, (String)var6_6, var5_5);
                    var8_8 = var7_7;
                    break block21;
                }
                case 3: {
                    XMPNodeUtils.appendLangItem((XMPNode)var4_4, (String)var6_6, var5_5);
                    var8_8 = var7_7;
                    if (var9_9) {
                        return;
                    }
                    break block21;
                }
                case 2: {
                    if (var7_7 == 0 || var1_1 == var2_2 || var1_1 == null || !var1_1.getValue().equals(var2_2.getValue())) ** GOTO lbl59
                    ** GOTO lbl58
                }
                case 1: {
                    if (var9_9) ** GOTO lbl62
                    if (var7_7 == 0 || var1_1 == var2_2 || var1_1 == null || !var1_1.getValue().equals(var2_2.getValue())) ** GOTO lbl59
lbl58: // 2 sources:
                    var1_1.setValue(var5_5);
lbl59: // 3 sources:
                    var2_2.setValue(var5_5);
                    var8_8 = var7_7;
                    break block21;
lbl62: // 1 sources:
                    var3_3 = var4_4.iterateChildren();
                    while (var3_3.hasNext()) {
                        var6_6 = (XMPNode)var3_3.next();
                        if (var6_6 == var1_1) continue;
                        var10_10 = var6_6.getValue();
                        var2_2 = var1_1 != null ? var1_1.getValue() : null;
                        if (!var10_10.equals(var2_2)) continue;
                        var6_6.setValue(var5_5);
                    }
                    var8_8 = var7_7;
                    if (var1_1 != null) {
                        var1_1.setValue(var5_5);
                        var8_8 = var7_7;
                    }
                    break block21;
                }
                case 0: 
            }
            XMPNodeUtils.appendLangItem((XMPNode)var4_4, "x-default", var5_5);
            if (var9_9 != false) return;
            XMPNodeUtils.appendLangItem((XMPNode)var4_4, (String)var6_6, var5_5);
            return;
        }
        if (var8_8 != 0) return;
        if (var4_4.getChildrenLength() != 1) return;
        XMPNodeUtils.appendLangItem((XMPNode)var4_4, "x-default", var5_5);
    }

    void setNode(XMPNode xMPNode, Object object, PropertyOptions propertyOptions, boolean bl2) {
        if (bl2) {
            xMPNode.clear();
        }
        xMPNode.getOptions().mergeWith(propertyOptions);
        if (!xMPNode.getOptions().isCompositeProperty()) {
            XMPNodeUtils.setNodeValue(xMPNode, object);
            return;
        }
        if (object != null && object.toString().length() > 0) {
            throw new XMPException("Composite nodes can't have values", 102);
        }
        xMPNode.removeChildren();
    }

    @Override
    public void setObjectName(String string2) {
        this.tree.setName(string2);
    }

    public void setPacketHeader(String string2) {
        this.packetHeader = string2;
    }

    @Override
    public void setProperty(String string2, String string3, Object object) {
        this.setProperty(string2, string3, object, null);
    }

    @Override
    public void setProperty(String object, String string2, Object object2, PropertyOptions propertyOptions) {
        ParameterAsserts.assertSchemaNS((String)object);
        ParameterAsserts.assertPropName(string2);
        propertyOptions = XMPNodeUtils.verifySetOptions(propertyOptions, object2);
        object = XMPPathParser.expandXPath((String)object, string2);
        object = XMPNodeUtils.findNode(this.tree, (XMPPath)object, true, propertyOptions);
        if (object != null) {
            this.setNode((XMPNode)object, object2, propertyOptions, false);
            return;
        }
        throw new XMPException("Specified property does not exist", 102);
    }

    @Override
    public void setPropertyBase64(String string2, String string3, byte[] arrby) {
        this.setProperty(string2, string3, arrby, null);
    }

    @Override
    public void setPropertyBase64(String string2, String string3, byte[] arrby, PropertyOptions propertyOptions) {
        this.setProperty(string2, string3, arrby, propertyOptions);
    }

    @Override
    public void setPropertyBoolean(String string2, String string3, boolean bl2) {
        String string4 = bl2 ? "True" : "False";
        this.setProperty(string2, string3, string4, null);
    }

    @Override
    public void setPropertyBoolean(String string2, String string3, boolean bl2, PropertyOptions propertyOptions) {
        String string4 = bl2 ? "True" : "False";
        this.setProperty(string2, string3, string4, propertyOptions);
    }

    @Override
    public void setPropertyCalendar(String string2, String string3, Calendar calendar) {
        this.setProperty(string2, string3, calendar, null);
    }

    @Override
    public void setPropertyCalendar(String string2, String string3, Calendar calendar, PropertyOptions propertyOptions) {
        this.setProperty(string2, string3, calendar, propertyOptions);
    }

    @Override
    public void setPropertyDate(String string2, String string3, XMPDateTime xMPDateTime) {
        this.setProperty(string2, string3, xMPDateTime, null);
    }

    @Override
    public void setPropertyDate(String string2, String string3, XMPDateTime xMPDateTime, PropertyOptions propertyOptions) {
        this.setProperty(string2, string3, xMPDateTime, propertyOptions);
    }

    @Override
    public void setPropertyDouble(String string2, String string3, double d2) {
        this.setProperty(string2, string3, new Double(d2), null);
    }

    @Override
    public void setPropertyDouble(String string2, String string3, double d2, PropertyOptions propertyOptions) {
        this.setProperty(string2, string3, new Double(d2), propertyOptions);
    }

    @Override
    public void setPropertyInteger(String string2, String string3, int n2) {
        this.setProperty(string2, string3, new Integer(n2), null);
    }

    @Override
    public void setPropertyInteger(String string2, String string3, int n2, PropertyOptions propertyOptions) {
        this.setProperty(string2, string3, new Integer(n2), propertyOptions);
    }

    @Override
    public void setPropertyLong(String string2, String string3, long l2) {
        this.setProperty(string2, string3, new Long(l2), null);
    }

    @Override
    public void setPropertyLong(String string2, String string3, long l2, PropertyOptions propertyOptions) {
        this.setProperty(string2, string3, new Long(l2), propertyOptions);
    }

    @Override
    public void setQualifier(String string2, String string3, String string4, String string5, String string6) {
        this.setQualifier(string2, string3, string4, string5, string6, null);
    }

    @Override
    public void setQualifier(String string2, String string3, String string4, String string5, String string6, PropertyOptions propertyOptions) {
        ParameterAsserts.assertSchemaNS(string2);
        ParameterAsserts.assertPropName(string3);
        if (this.doesPropertyExist(string2, string3)) {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append(string3);
            stringBuilder.append(XMPPathFactory.composeQualifierPath(string4, string5));
            this.setProperty(string2, stringBuilder.toString(), string6, propertyOptions);
            return;
        }
        throw new XMPException("Specified property does not exist!", 102);
    }

    @Override
    public void setStructField(String string2, String string3, String string4, String string5, String string6) {
        this.setStructField(string2, string3, string4, string5, string6, null);
    }

    @Override
    public void setStructField(String string2, String string3, String string4, String string5, String string6, PropertyOptions propertyOptions) {
        ParameterAsserts.assertSchemaNS(string2);
        ParameterAsserts.assertStructName(string3);
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append(string3);
        stringBuilder.append(XMPPathFactory.composeStructFieldPath(string4, string5));
        this.setProperty(string2, stringBuilder.toString(), string6, propertyOptions);
    }

    @Override
    public void sort() {
        this.tree.sort();
    }

}

