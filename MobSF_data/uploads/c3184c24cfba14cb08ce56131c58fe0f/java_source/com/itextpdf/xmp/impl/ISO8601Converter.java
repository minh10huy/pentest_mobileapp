/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.xmp.impl;

import com.itextpdf.xmp.XMPDateTime;
import com.itextpdf.xmp.XMPException;
import com.itextpdf.xmp.impl.ParseState;
import com.itextpdf.xmp.impl.XMPDateTimeImpl;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.util.Calendar;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;

public final class ISO8601Converter {
    private ISO8601Converter() {
    }

    public static XMPDateTime parse(String string2) {
        return ISO8601Converter.parse(string2, new XMPDateTimeImpl());
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Lifted jumps to return sites
     */
    public static XMPDateTime parse(String var0, XMPDateTime var1_1) {
        block27 : {
            if (var0 == null) throw new XMPException("Parameter must not be null", 4);
            if (var0.length() == 0) {
                return var1_1;
            }
            var0 = new ParseState((String)var0);
            var6_2 = 0;
            if (var0.ch(0) == '-') {
                var0.skip();
            }
            var3_3 = var0.gatherInt("Invalid year in date string", 9999);
            if (var0.hasNext()) {
                if (var0.ch() != '-') throw new XMPException("Invalid date string, after year", 5);
            }
            var2_4 = var3_3;
            if (var0.ch(0) == '-') {
                var2_4 = - var3_3;
            }
            var1_1.setYear(var2_4);
            if (!var0.hasNext()) {
                return var1_1;
            }
            var0.skip();
            var2_4 = var0.gatherInt("Invalid month in date string", 12);
            if (var0.hasNext()) {
                if (var0.ch() != '-') throw new XMPException("Invalid date string, after month", 5);
            }
            var1_1.setMonth(var2_4);
            if (!var0.hasNext()) {
                return var1_1;
            }
            var0.skip();
            var2_4 = var0.gatherInt("Invalid day in date string", 31);
            if (var0.hasNext()) {
                if (var0.ch() != 'T') throw new XMPException("Invalid date string, after day", 5);
            }
            var1_1.setDay(var2_4);
            if (!var0.hasNext()) {
                return var1_1;
            }
            var0.skip();
            var1_1.setHour(var0.gatherInt("Invalid hour in date string", 23));
            if (!var0.hasNext()) {
                return var1_1;
            }
            if (var0.ch() == ':') {
                var0.skip();
                var2_4 = var0.gatherInt("Invalid minute in date string", 59);
                if (var0.hasNext() && var0.ch() != ':' && var0.ch() != 'Z' && var0.ch() != '+') {
                    if (var0.ch() != '-') throw new XMPException("Invalid date string, after minute", 5);
                }
                var1_1.setMinute(var2_4);
            }
            if (!var0.hasNext()) {
                return var1_1;
            }
            if (var0.hasNext() && var0.ch() == ':') {
                var0.skip();
                var2_4 = var0.gatherInt("Invalid whole seconds in date string", 59);
                if (var0.hasNext() && var0.ch() != '.' && var0.ch() != 'Z' && var0.ch() != '+') {
                    if (var0.ch() != '-') throw new XMPException("Invalid date string, after whole seconds", 5);
                }
                var1_1.setSecond(var2_4);
                if (var0.ch() == '.') {
                    var0.skip();
                    var2_4 = var0.pos();
                    var3_3 = var0.gatherInt("Invalid fractional seconds in date string", 999999999);
                    if (var0.hasNext() && var0.ch() != 'Z' && var0.ch() != '+') {
                        if (var0.ch() != '-') throw new XMPException("Invalid date string, after fractional second", 5);
                    }
                    var2_4 = var0.pos() - var2_4;
                    do {
                        var4_5 = var3_3;
                        if (var2_4 <= 9) break;
                        var3_3 /= 10;
                        --var2_4;
                    } while (true);
                    for (var5_6 = var2_4; var5_6 < 9; var4_5 *= 10, ++var5_6) {
                    }
                    var1_1.setNanoSecond(var4_5);
                }
            } else if (var0.ch() != 'Z' && var0.ch() != '+') {
                if (var0.ch() != '-') throw new XMPException("Invalid date string, after time", 5);
            }
            if (!var0.hasNext()) {
                return var1_1;
            }
            if (var0.ch() != 'Z') break block27;
            var0.skip();
            ** GOTO lbl-1000
        }
        if (var0.hasNext()) {
            if (var0.ch() == '+') {
                var2_4 = 1;
            } else {
                if (var0.ch() != '-') throw new XMPException("Time zone must begin with 'Z', '+', or '-'", 5);
                var2_4 = -1;
            }
            var0.skip();
            var7_7 = var0.gatherInt("Invalid time zone hour in date string", 23);
            var4_5 = var2_4;
            var3_3 = var7_7;
            var5_6 = var6_2;
            if (var0.hasNext()) {
                if (var0.ch() != ':') throw new XMPException("Invalid date string, after time zone hour", 5);
                var0.skip();
                var5_6 = var0.gatherInt("Invalid time zone minute in date string", 59);
                var4_5 = var2_4;
                var3_3 = var7_7;
            }
        } else lbl-1000: // 2 sources:
        {
            var4_5 = 0;
            var3_3 = 0;
            var5_6 = var6_2;
        }
        var1_1.setTimeZone(new SimpleTimeZone((var3_3 * 3600 * 1000 + var5_6 * 60 * 1000) * var4_5, ""));
        if (var0.hasNext() != false) throw new XMPException("Invalid date string, extra chars at end", 5);
        return var1_1;
    }

    public static String render(XMPDateTime xMPDateTime) {
        StringBuffer stringBuffer = new StringBuffer();
        if (xMPDateTime.hasDate()) {
            DecimalFormat decimalFormat = new DecimalFormat("0000", new DecimalFormatSymbols(Locale.ENGLISH));
            stringBuffer.append(decimalFormat.format(xMPDateTime.getYear()));
            if (xMPDateTime.getMonth() == 0) {
                return stringBuffer.toString();
            }
            decimalFormat.applyPattern("'-'00");
            stringBuffer.append(decimalFormat.format(xMPDateTime.getMonth()));
            if (xMPDateTime.getDay() == 0) {
                return stringBuffer.toString();
            }
            stringBuffer.append(decimalFormat.format(xMPDateTime.getDay()));
            if (xMPDateTime.hasTime()) {
                stringBuffer.append('T');
                decimalFormat.applyPattern("00");
                stringBuffer.append(decimalFormat.format(xMPDateTime.getHour()));
                stringBuffer.append(':');
                stringBuffer.append(decimalFormat.format(xMPDateTime.getMinute()));
                if (xMPDateTime.getSecond() != 0 || xMPDateTime.getNanoSecond() != 0) {
                    double d2 = xMPDateTime.getSecond();
                    double d3 = (double)xMPDateTime.getNanoSecond() / 1.0E9;
                    decimalFormat.applyPattern(":00.#########");
                    stringBuffer.append(decimalFormat.format(d2 + d3));
                }
                if (xMPDateTime.hasTimeZone()) {
                    long l2 = xMPDateTime.getCalendar().getTimeInMillis();
                    int n2 = xMPDateTime.getTimeZone().getOffset(l2);
                    if (n2 == 0) {
                        stringBuffer.append('Z');
                    } else {
                        int n3 = n2 / 3600000;
                        n2 = Math.abs(n2 % 3600000 / 60000);
                        decimalFormat.applyPattern("+00;-00");
                        stringBuffer.append(decimalFormat.format(n3));
                        decimalFormat.applyPattern(":00");
                        stringBuffer.append(decimalFormat.format(n2));
                    }
                }
            }
        }
        return stringBuffer.toString();
    }
}

