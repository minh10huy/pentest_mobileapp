/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.xmp.impl;

import com.itextpdf.xmp.XMPConst;

public class Utils
implements XMPConst {
    public static final int UUID_LENGTH = 36;
    public static final int UUID_SEGMENT_COUNT = 4;
    private static boolean[] xmlNameChars;
    private static boolean[] xmlNameStartChars;

    static {
        Utils.initCharTables();
    }

    private Utils() {
    }

    static boolean checkUUIDFormat(String string2) {
        int n2;
        boolean bl2 = false;
        if (string2 == null) {
            return false;
        }
        boolean bl3 = true;
        int n3 = 0;
        for (n2 = 0; n2 < string2.length(); ++n2) {
            boolean bl4 = bl3;
            int n4 = n3;
            if (string2.charAt(n2) == '-') {
                n4 = n3 + 1;
                bl4 = bl3 && (n2 == 8 || n2 == 13 || n2 == 18 || n2 == 23);
            }
            bl3 = bl4;
            n3 = n4;
        }
        boolean bl5 = bl2;
        if (bl3) {
            bl5 = bl2;
            if (4 == n3) {
                bl5 = bl2;
                if (36 == n2) {
                    bl5 = true;
                }
            }
        }
        return bl5;
    }

    /*
     * Enabled aggressive block sorting
     */
    public static String escapeXML(String string2, boolean bl2, boolean bl3) {
        int n2;
        int n3;
        block5 : {
            n3 = 0;
            n2 = 0;
            while (n2 < string2.length()) {
                char c2 = string2.charAt(n2);
                if (!(c2 == '<' || c2 == '>' || c2 == '&' || bl3 && (c2 == '\t' || c2 == '\n' || c2 == '\r') || bl2 && c2 == '\"')) {
                    ++n2;
                    continue;
                }
                break block5;
            }
            return string2;
        }
        n2 = 1;
        if (n2 == 0) {
            return string2;
        }
        StringBuffer stringBuffer = new StringBuffer(string2.length() * 4 / 3);
        n2 = n3;
        do {
            block12 : {
                String string3;
                block13 : {
                    block8 : {
                        block9 : {
                            block10 : {
                                block11 : {
                                    char c3;
                                    block7 : {
                                        block6 : {
                                            if (n2 >= string2.length()) {
                                                return stringBuffer.toString();
                                            }
                                            c3 = string2.charAt(n2);
                                            if (!bl3 || c3 != '\t' && c3 != '\n' && c3 != '\r') break block6;
                                            stringBuffer.append("&#x");
                                            stringBuffer.append(Integer.toHexString(c3).toUpperCase());
                                            c3 = ';';
                                            break block7;
                                        }
                                        if (c3 == '\"') break block8;
                                        if (c3 == '&') break block9;
                                        if (c3 == '<') break block10;
                                        if (c3 == '>') break block11;
                                    }
                                    stringBuffer.append(c3);
                                    break block12;
                                }
                                string3 = "&gt;";
                                break block13;
                            }
                            string3 = "&lt;";
                            break block13;
                        }
                        string3 = "&amp;";
                        break block13;
                    }
                    string3 = bl2 ? "&quot;" : "\"";
                }
                stringBuffer.append(string3);
            }
            ++n2;
        } while (true);
    }

    private static void initCharTables() {
        xmlNameChars = new boolean[256];
        xmlNameStartChars = new boolean[256];
        for (int n2 = 0; n2 < xmlNameChars.length; n2 = (int)((char)(n2 + 1))) {
            boolean bl2;
            block4 : {
                boolean bl3;
                block5 : {
                    boolean[] arrbl = xmlNameStartChars;
                    bl3 = true;
                    bl2 = n2 == 58 || 65 <= n2 && n2 <= 90 || n2 == 95 || 97 <= n2 && n2 <= 122 || 192 <= n2 && n2 <= 214 || 216 <= n2 && n2 <= 246 || 248 <= n2 && n2 <= 255;
                    arrbl[n2] = bl2;
                    arrbl = xmlNameChars;
                    bl2 = bl3;
                    if (xmlNameStartChars[n2]) break block4;
                    bl2 = bl3;
                    if (n2 == 45) break block4;
                    bl2 = bl3;
                    if (n2 == 46) break block4;
                    if (48 > n2) break block5;
                    bl2 = bl3;
                    if (n2 <= 57) break block4;
                }
                bl2 = n2 == 183 ? bl3 : false;
            }
            arrbl[n2] = bl2;
        }
    }

    static boolean isControlChar(char c2) {
        if ((c2 <= '\u001f' || c2 == '') && c2 != '\t' && c2 != '\n' && c2 != '\r') {
            return true;
        }
        return false;
    }

    static boolean isInternalProperty(String string2, String string3) {
        boolean bl2;
        block14 : {
            block15 : {
                block21 : {
                    boolean bl3;
                    block20 : {
                        block19 : {
                            block18 : {
                                block17 : {
                                    block16 : {
                                        block13 : {
                                            bl2 = "http://purl.org/dc/elements/1.1/".equals(string2);
                                            bl3 = true;
                                            if (!bl2) break block13;
                                            bl2 = bl3;
                                            if ("dc:format".equals(string3)) break block14;
                                            if ("dc:language".equals(string3)) {
                                                return true;
                                            }
                                            break block15;
                                        }
                                        if (!"http://ns.adobe.com/xap/1.0/".equals(string2)) break block16;
                                        bl2 = bl3;
                                        if ("xmp:BaseURL".equals(string3)) break block14;
                                        bl2 = bl3;
                                        if ("xmp:CreatorTool".equals(string3)) break block14;
                                        bl2 = bl3;
                                        if ("xmp:Format".equals(string3)) break block14;
                                        bl2 = bl3;
                                        if ("xmp:Locale".equals(string3)) break block14;
                                        bl2 = bl3;
                                        if ("xmp:MetadataDate".equals(string3)) break block14;
                                        if ("xmp:ModifyDate".equals(string3)) {
                                            return true;
                                        }
                                        break block15;
                                    }
                                    if (!"http://ns.adobe.com/pdf/1.3/".equals(string2)) break block17;
                                    bl2 = bl3;
                                    if ("pdf:BaseURL".equals(string3)) break block14;
                                    bl2 = bl3;
                                    if ("pdf:Creator".equals(string3)) break block14;
                                    bl2 = bl3;
                                    if ("pdf:ModDate".equals(string3)) break block14;
                                    bl2 = bl3;
                                    if ("pdf:PDFVersion".equals(string3)) break block14;
                                    if ("pdf:Producer".equals(string3)) {
                                        return true;
                                    }
                                    break block15;
                                }
                                if (!"http://ns.adobe.com/tiff/1.0/".equals(string2)) break block18;
                                if ("tiff:ImageDescription".equals(string3) || "tiff:Artist".equals(string3)) break block15;
                                bl2 = bl3;
                                if (!"tiff:Copyright".equals(string3)) break block14;
                                break block15;
                            }
                            if (!"http://ns.adobe.com/exif/1.0/".equals(string2)) break block19;
                            bl2 = bl3;
                            if (!"exif:UserComment".equals(string3)) break block14;
                            break block15;
                        }
                        if ("http://ns.adobe.com/exif/1.0/aux/".equals(string2)) {
                            return true;
                        }
                        if (!"http://ns.adobe.com/photoshop/1.0/".equals(string2)) break block20;
                        if ("photoshop:ICCProfile".equals(string3)) {
                            return true;
                        }
                        break block15;
                    }
                    if (!"http://ns.adobe.com/camera-raw-settings/1.0/".equals(string2)) break block21;
                    bl2 = bl3;
                    if ("crs:Version".equals(string3)) break block14;
                    bl2 = bl3;
                    if ("crs:RawFileName".equals(string3)) break block14;
                    if ("crs:ToneCurveName".equals(string3)) {
                        return true;
                    }
                    break block15;
                }
                if ("http://ns.adobe.com/StockPhoto/1.0/".equals(string2)) {
                    return true;
                }
                if ("http://ns.adobe.com/xap/1.0/mm/".equals(string2)) {
                    return true;
                }
                if ("http://ns.adobe.com/xap/1.0/t/".equals(string2)) {
                    return true;
                }
                if ("http://ns.adobe.com/xap/1.0/t/pg/".equals(string2)) {
                    return true;
                }
                if ("http://ns.adobe.com/xap/1.0/g/".equals(string2)) {
                    return true;
                }
                if ("http://ns.adobe.com/xap/1.0/g/img/".equals(string2)) {
                    return true;
                }
                if ("http://ns.adobe.com/xap/1.0/sType/Font#".equals(string2)) {
                    return true;
                }
            }
            bl2 = false;
        }
        return bl2;
    }

    private static boolean isNameChar(char c2) {
        if (!(c2 <= '\u00ff' && xmlNameChars[c2] || Utils.isNameStartChar(c2) || c2 >= '\u0300' && c2 <= '\u036f' || c2 >= '\u203f' && c2 <= '\u2040')) {
            return false;
        }
        return true;
    }

    private static boolean isNameStartChar(char c2) {
        if (c2 <= '\u00ff' && xmlNameStartChars[c2] || c2 >= '\u0100' && c2 <= '\u02ff' || c2 >= '\u0370' && c2 <= '\u037d' || c2 >= '\u037f' && c2 <= '\u1fff' || c2 >= '\u200c' && c2 <= '\u200d' || c2 >= '\u2070' && c2 <= '\u218f' || c2 >= '\u2c00' && c2 <= '\u2fef' || c2 >= '\u3001' && c2 <= '\ud7ff' || c2 >= '\uf900' && c2 <= '\ufdcf' || c2 >= '\ufdf0' && c2 <= '\ufffd' || c2 >= '\u10000' && c2 <= '\ueffff') {
            return true;
        }
        return false;
    }

    public static boolean isXMLName(String string2) {
        if (string2.length() > 0 && !Utils.isNameStartChar(string2.charAt(0))) {
            return false;
        }
        for (int i2 = 1; i2 < string2.length(); ++i2) {
            if (Utils.isNameChar(string2.charAt(i2))) continue;
            return false;
        }
        return true;
    }

    public static boolean isXMLNameNS(String string2) {
        if (!(string2.length() <= 0 || Utils.isNameStartChar(string2.charAt(0)) && string2.charAt(0) != ':')) {
            return false;
        }
        for (int i2 = 1; i2 < string2.length(); ++i2) {
            if (Utils.isNameChar(string2.charAt(i2))) {
                if (string2.charAt(i2) != ':') continue;
                return false;
            }
            return false;
        }
        return true;
    }

    /*
     * Enabled aggressive block sorting
     */
    public static String normalizeLangValue(String string2) {
        if ("x-default".equals(string2)) {
            return string2;
        }
        StringBuffer stringBuffer = new StringBuffer();
        int n2 = 0;
        int n3 = 1;
        while (n2 < string2.length()) {
            char c2 = string2.charAt(n2);
            int n4 = n3;
            if (c2 != ' ') {
                if (c2 != '-' && c2 != '_') {
                    char c3 = n3 != 2 ? Character.toLowerCase(string2.charAt(n2)) : Character.toUpperCase(string2.charAt(n2));
                    stringBuffer.append(c3);
                    n4 = n3;
                } else {
                    stringBuffer.append('-');
                    n4 = n3 + 1;
                }
            }
            ++n2;
            n3 = n4;
        }
        return stringBuffer.toString();
    }

    static String removeControlChars(String charSequence) {
        charSequence = new StringBuffer((String)charSequence);
        for (int i2 = 0; i2 < charSequence.length(); ++i2) {
            if (!Utils.isControlChar(charSequence.charAt(i2))) continue;
            charSequence.setCharAt(i2, ' ');
        }
        return charSequence.toString();
    }

    static String[] splitNameAndValue(String string2) {
        int n2 = string2.indexOf(61);
        int n3 = string2.charAt(1) == '?' ? 2 : 1;
        String string3 = string2.substring(n3, n2);
        n3 = n2 + 1;
        char c2 = string2.charAt(n3);
        ++n3;
        int n4 = string2.length() - 2;
        StringBuffer stringBuffer = new StringBuffer(n4 - n2);
        while (n3 < n4) {
            stringBuffer.append(string2.charAt(n3));
            n3 = n2 = n3 + 1;
            if (string2.charAt(n2) != c2) continue;
            n3 = n2 + 1;
        }
        return new String[]{string3, stringBuffer.toString()};
    }
}

