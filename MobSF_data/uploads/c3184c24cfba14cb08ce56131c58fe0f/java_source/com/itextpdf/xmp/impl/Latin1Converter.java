/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.xmp.impl;

import com.itextpdf.xmp.impl.ByteBuffer;
import java.io.UnsupportedEncodingException;

public class Latin1Converter {
    private static final int STATE_START = 0;
    private static final int STATE_UTF8CHAR = 11;

    private Latin1Converter() {
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    public static ByteBuffer convert(ByteBuffer byteBuffer) {
        if (!"UTF-8".equals(byteBuffer.getEncoding())) return byteBuffer;
        byte[] arrby = new byte[8];
        ByteBuffer byteBuffer2 = new ByteBuffer(byteBuffer.length() * 4 / 3);
        int n2 = 0;
        int n3 = 0;
        int n4 = 0;
        int n5 = 0;
        int n6 = 0;
        while (n3 < byteBuffer.length()) {
            block7 : {
                block10 : {
                    block8 : {
                        int n7;
                        block9 : {
                            int n8;
                            block6 : {
                                n8 = byteBuffer.charAt(n3);
                                if (n4 == 11) break block6;
                                if (n8 < 127) {
                                    byteBuffer2.append((byte)n8);
                                } else if (n8 >= 192) {
                                    n5 = -1;
                                    n4 = n8;
                                    while (n5 < 8 && (n4 & 128) == 128) {
                                        ++n5;
                                        n4 <<= 1;
                                    }
                                    arrby[n6] = (byte)n8;
                                    ++n6;
                                    n4 = 11;
                                } else {
                                    byteBuffer2.append(Latin1Converter.convertToUTF8((byte)n8));
                                }
                                break block7;
                            }
                            if (n5 <= 0 || (n8 & 192) != 128) break block8;
                            n7 = n6 + 1;
                            arrby[n6] = (byte)n8;
                            if (--n5 != 0) break block9;
                            byteBuffer2.append(arrby, 0, n7);
                            break block10;
                        }
                        n6 = n7;
                        break block7;
                    }
                    byteBuffer2.append(Latin1Converter.convertToUTF8(arrby[0]));
                    n3 -= n6;
                }
                n4 = 0;
                n6 = 0;
            }
            ++n3;
        }
        return byteBuffer2;
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    private static byte[] convertToUTF8(byte by2) {
        int n2 = by2 & 255;
        if (n2 < 128) return new byte[]{by2};
        if (n2 == 129 || n2 == 141 || n2 == 143 || n2 == 144 || n2 == 157) return new byte[]{32};
        try {
            return new String(new byte[]{by2}, "cp1252").getBytes("UTF-8");
        }
        catch (UnsupportedEncodingException unsupportedEncodingException) {}
        return new byte[]{by2};
    }
}

