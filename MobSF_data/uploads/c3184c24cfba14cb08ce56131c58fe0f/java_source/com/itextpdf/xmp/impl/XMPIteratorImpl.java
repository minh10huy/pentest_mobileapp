/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.xmp.impl;

import com.itextpdf.xmp.XMPException;
import com.itextpdf.xmp.XMPIterator;
import com.itextpdf.xmp.XMPMetaFactory;
import com.itextpdf.xmp.impl.QName;
import com.itextpdf.xmp.impl.XMPMetaImpl;
import com.itextpdf.xmp.impl.XMPNode;
import com.itextpdf.xmp.impl.XMPNodeUtils;
import com.itextpdf.xmp.impl.xpath.XMPPath;
import com.itextpdf.xmp.impl.xpath.XMPPathParser;
import com.itextpdf.xmp.impl.xpath.XMPPathSegment;
import com.itextpdf.xmp.options.IteratorOptions;
import com.itextpdf.xmp.options.PropertyOptions;
import com.itextpdf.xmp.properties.XMPPropertyInfo;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;
import java.util.NoSuchElementException;

public class XMPIteratorImpl
implements XMPIterator {
    private String baseNS;
    private Iterator nodeIterator;
    private IteratorOptions options;
    protected boolean skipSiblings;
    protected boolean skipSubtree;

    /*
     * Enabled aggressive block sorting
     */
    public XMPIteratorImpl(XMPMetaImpl object, String string2, String object2, IteratorOptions object3) {
        block9 : {
            block7 : {
                int n2;
                Object var7_5;
                boolean bl2;
                block8 : {
                    block6 : {
                        var7_5 = null;
                        this.baseNS = null;
                        this.skipSiblings = false;
                        this.skipSubtree = false;
                        this.nodeIterator = null;
                        if (object3 == null) {
                            object3 = new IteratorOptions();
                        }
                        this.options = object3;
                        n2 = string2 != null && string2.length() > 0 ? 1 : 0;
                        bl2 = object2 != null && object2.length() > 0;
                        if (n2 != 0 || bl2) break block6;
                        object = object.getRoot();
                        string2 = var7_5;
                        break block7;
                    }
                    if (n2 == 0 || !bl2) break block8;
                    object3 = XMPPathParser.expandXPath(string2, (String)object2);
                    object2 = new XMPPath();
                    for (n2 = 0; n2 < object3.size() - 1; ++n2) {
                        object2.add(object3.getSegment(n2));
                    }
                    object = XMPNodeUtils.findNode(object.getRoot(), (XMPPath)object3, false, null);
                    this.baseNS = string2;
                    string2 = object2.toString();
                    break block7;
                }
                if (n2 == 0 || bl2) break block9;
                object = XMPNodeUtils.findSchemaNode(object.getRoot(), string2, false);
                string2 = var7_5;
            }
            if (object == null) {
                this.nodeIterator = Collections.EMPTY_LIST.iterator();
                return;
            }
            object = !this.options.isJustChildren() ? new NodeIterator((XMPNode)object, string2, 1) : new NodeIteratorChildren((XMPNode)object, string2);
            this.nodeIterator = object;
            return;
        }
        throw new XMPException("Schema namespace URI is required", 101);
    }

    protected String getBaseNS() {
        return this.baseNS;
    }

    protected IteratorOptions getOptions() {
        return this.options;
    }

    @Override
    public boolean hasNext() {
        return this.nodeIterator.hasNext();
    }

    public Object next() {
        return this.nodeIterator.next();
    }

    @Override
    public void remove() {
        throw new UnsupportedOperationException("The XMPIterator does not support remove().");
    }

    protected void setBaseNS(String string2) {
        this.baseNS = string2;
    }

    @Override
    public void skipSiblings() {
        this.skipSubtree();
        this.skipSiblings = true;
    }

    @Override
    public void skipSubtree() {
        this.skipSubtree = true;
    }

    private class NodeIterator
    implements Iterator {
        protected static final int ITERATE_CHILDREN = 1;
        protected static final int ITERATE_NODE = 0;
        protected static final int ITERATE_QUALIFIER = 2;
        private Iterator childrenIterator = null;
        private int index = 0;
        private String path;
        private XMPPropertyInfo returnProperty = null;
        private int state = 0;
        private Iterator subIterator = Collections.EMPTY_LIST.iterator();
        private XMPNode visitedNode;

        public NodeIterator() {
        }

        public NodeIterator(XMPNode xMPNode, String string2, int n2) {
            this.visitedNode = xMPNode;
            this.state = 0;
            if (xMPNode.getOptions().isSchemaNode()) {
                XMPIteratorImpl.this.setBaseNS(xMPNode.getName());
            }
            this.path = this.accumulatePath(xMPNode, string2, n2);
        }

        private boolean iterateChildren(Iterator object) {
            if (XMPIteratorImpl.this.skipSiblings) {
                XMPIteratorImpl.this.skipSiblings = false;
                this.subIterator = Collections.EMPTY_LIST.iterator();
            }
            if (!this.subIterator.hasNext() && object.hasNext()) {
                object = (XMPNode)object.next();
                ++this.index;
                this.subIterator = new NodeIterator((XMPNode)object, this.path, this.index);
            }
            if (this.subIterator.hasNext()) {
                this.returnProperty = (XMPPropertyInfo)this.subIterator.next();
                return true;
            }
            return false;
        }

        protected String accumulatePath(XMPNode object, String string2, int n2) {
            if (object.getParent() != null && !object.getOptions().isSchemaNode()) {
                String string3;
                if (object.getParent().getOptions().isArray()) {
                    object = new StringBuilder();
                    object.append("[");
                    object.append(String.valueOf(n2));
                    object.append("]");
                    object = object.toString();
                    string3 = "";
                } else {
                    string3 = "/";
                    object = object.getName();
                }
                Object object2 = object;
                if (string2 != null) {
                    if (string2.length() == 0) {
                        return object;
                    }
                    if (XMPIteratorImpl.this.getOptions().isJustLeafname()) {
                        if (!object.startsWith("?")) {
                            return object;
                        }
                        return object.substring(1);
                    }
                    object2 = new StringBuilder();
                    object2.append(string2);
                    object2.append(string3);
                    object2.append((String)object);
                    object2 = object2.toString();
                }
                return object2;
            }
            return null;
        }

        protected XMPPropertyInfo createPropertyInfo(final XMPNode xMPNode, final String string2, final String string3) {
            String string4;
            string4 = xMPNode.getOptions().isSchemaNode() ? null : xMPNode.getValue();
            return new XMPPropertyInfo(){

                @Override
                public String getLanguage() {
                    return null;
                }

                @Override
                public String getNamespace() {
                    if (!xMPNode.getOptions().isSchemaNode()) {
                        QName qName = new QName(xMPNode.getName());
                        return XMPMetaFactory.getSchemaRegistry().getNamespaceURI(qName.getPrefix());
                    }
                    return string2;
                }

                @Override
                public PropertyOptions getOptions() {
                    return xMPNode.getOptions();
                }

                @Override
                public String getPath() {
                    return string3;
                }

                @Override
                public String getValue() {
                    return string4;
                }
            };
        }

        protected Iterator getChildrenIterator() {
            return this.childrenIterator;
        }

        protected XMPPropertyInfo getReturnProperty() {
            return this.returnProperty;
        }

        @Override
        public boolean hasNext() {
            if (this.returnProperty != null) {
                return true;
            }
            if (this.state == 0) {
                return this.reportNode();
            }
            if (this.state == 1) {
                boolean bl2;
                if (this.childrenIterator == null) {
                    this.childrenIterator = this.visitedNode.iterateChildren();
                }
                boolean bl3 = bl2 = this.iterateChildren(this.childrenIterator);
                if (!bl2) {
                    bl3 = bl2;
                    if (this.visitedNode.hasQualifier()) {
                        bl3 = bl2;
                        if (!XMPIteratorImpl.this.getOptions().isOmitQualifiers()) {
                            this.state = 2;
                            this.childrenIterator = null;
                            bl3 = this.hasNext();
                        }
                    }
                }
                return bl3;
            }
            if (this.childrenIterator == null) {
                this.childrenIterator = this.visitedNode.iterateQualifier();
            }
            return this.iterateChildren(this.childrenIterator);
        }

        public Object next() {
            if (this.hasNext()) {
                XMPPropertyInfo xMPPropertyInfo = this.returnProperty;
                this.returnProperty = null;
                return xMPPropertyInfo;
            }
            throw new NoSuchElementException("There are no more nodes to return");
        }

        @Override
        public void remove() {
            throw new UnsupportedOperationException();
        }

        protected boolean reportNode() {
            this.state = 1;
            if (!(this.visitedNode.getParent() == null || XMPIteratorImpl.this.getOptions().isJustLeafnodes() && this.visitedNode.hasChildren())) {
                this.returnProperty = this.createPropertyInfo(this.visitedNode, XMPIteratorImpl.this.getBaseNS(), this.path);
                return true;
            }
            return this.hasNext();
        }

        protected void setChildrenIterator(Iterator iterator) {
            this.childrenIterator = iterator;
        }

        protected void setReturnProperty(XMPPropertyInfo xMPPropertyInfo) {
            this.returnProperty = xMPPropertyInfo;
        }

    }

    private class NodeIteratorChildren
    extends NodeIterator {
        private Iterator childrenIterator;
        private int index = 0;
        private String parentPath;

        public NodeIteratorChildren(XMPNode xMPNode, String string2) {
            if (xMPNode.getOptions().isSchemaNode()) {
                XMPIteratorImpl.this.setBaseNS(xMPNode.getName());
            }
            this.parentPath = this.accumulatePath(xMPNode, string2, 1);
            this.childrenIterator = xMPNode.iterateChildren();
        }

        @Override
        public boolean hasNext() {
            if (this.getReturnProperty() != null) {
                return true;
            }
            if (XMPIteratorImpl.this.skipSiblings) {
                return false;
            }
            if (this.childrenIterator.hasNext()) {
                XMPNode xMPNode = (XMPNode)this.childrenIterator.next();
                ++this.index;
                String string2 = null;
                if (xMPNode.getOptions().isSchemaNode()) {
                    XMPIteratorImpl.this.setBaseNS(xMPNode.getName());
                } else if (xMPNode.getParent() != null) {
                    string2 = this.accumulatePath(xMPNode, this.parentPath, this.index);
                }
                if (XMPIteratorImpl.this.getOptions().isJustLeafnodes() && xMPNode.hasChildren()) {
                    return this.hasNext();
                }
                this.setReturnProperty(this.createPropertyInfo(xMPNode, XMPIteratorImpl.this.getBaseNS(), string2));
                return true;
            }
            return false;
        }
    }

}

