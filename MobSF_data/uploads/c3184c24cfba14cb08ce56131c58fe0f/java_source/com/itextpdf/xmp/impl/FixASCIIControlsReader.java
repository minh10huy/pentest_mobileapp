/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.xmp.impl;

import com.itextpdf.xmp.impl.Utils;
import java.io.PushbackReader;
import java.io.Reader;

public class FixASCIIControlsReader
extends PushbackReader {
    private static final int BUFFER_SIZE = 8;
    private static final int STATE_AMP = 1;
    private static final int STATE_DIG1 = 4;
    private static final int STATE_ERROR = 5;
    private static final int STATE_HASH = 2;
    private static final int STATE_HEX = 3;
    private static final int STATE_START = 0;
    private int control = 0;
    private int digits = 0;
    private int state = 0;

    public FixASCIIControlsReader(Reader reader) {
        super(reader, 8);
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Lifted jumps to return sites
     */
    private char processChar(char var1_1) {
        switch (this.state) {
            default: {
                return var1_1;
            }
            case 5: {
                this.state = 0;
                return var1_1;
            }
            case 4: {
                if ('0' > var1_1 || var1_1 > '9') ** GOTO lbl15
                this.control = this.control * 10 + Character.digit(var1_1, 10);
                ++this.digits;
                if (this.digits <= 5) {
                    this.state = 4;
                    return var1_1;
                }
                ** GOTO lbl16
lbl15: // 1 sources:
                if (var1_1 == ';' && Utils.isControlChar((char)this.control)) ** GOTO lbl30
lbl16: // 2 sources:
                this.state = 5;
                return var1_1;
            }
            case 3: {
                if (!('0' <= var1_1 && var1_1 <= '9' || 'a' <= var1_1 && var1_1 <= 'f') && ('A' > var1_1 || var1_1 > 'F')) ** GOTO lbl27
                this.control = this.control * 16 + Character.digit(var1_1, 16);
                ++this.digits;
                if (this.digits <= 4) {
                    this.state = 3;
                    return var1_1;
                }
                ** GOTO lbl28
lbl27: // 1 sources:
                if (var1_1 == ';' && Utils.isControlChar((char)this.control)) ** GOTO lbl30
lbl28: // 2 sources:
                this.state = 5;
                return var1_1;
lbl30: // 2 sources:
                this.state = 0;
                return (char)this.control;
            }
            case 2: {
                if (var1_1 == 'x') {
                    this.control = 0;
                    this.digits = 0;
                    this.state = 3;
                    return var1_1;
                }
                if ('0' <= var1_1 && var1_1 <= '9') {
                    this.control = Character.digit(var1_1, 10);
                    this.digits = 1;
                    this.state = 4;
                    return var1_1;
                }
                this.state = 5;
                return var1_1;
            }
            case 1: {
                if (var1_1 == '#') {
                    this.state = 2;
                    return var1_1;
                }
                this.state = 5;
                return var1_1;
            }
            case 0: 
        }
        if (var1_1 != '&') return var1_1;
        this.state = 1;
        return var1_1;
    }

    @Override
    public int read(char[] arrc, int n2, int n3) {
        char[] arrc2 = new char[8];
        int n4 = n2;
        n2 = 1;
        int n5 = 0;
        block0 : do {
            int n6 = 0;
            while (n2 != 0 && n5 < n3) {
                n2 = super.read(arrc2, n6, 1) == 1 ? 1 : 0;
                if (n2 != 0) {
                    int n7 = this.processChar(arrc2[n6]);
                    if (this.state == 0) {
                        int n8 = n7;
                        if (Utils.isControlChar((char)n7)) {
                            n8 = 32;
                        }
                        arrc[n4] = n8;
                        ++n5;
                        ++n4;
                        continue block0;
                    }
                    if (this.state == 5) {
                        this.unread(arrc2, 0, n6 + 1);
                        continue block0;
                    }
                    ++n6;
                    continue;
                }
                if (n6 <= 0) continue;
                this.unread(arrc2, 0, n6);
                this.state = 5;
                n2 = 1;
                continue block0;
            }
            break;
        } while (true);
        n3 = n5;
        if (n5 <= 0) {
            if (n2 != 0) {
                return n5;
            }
            n3 = -1;
        }
        return n3;
    }
}

