/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.xmp.impl;

import java.io.ByteArrayInputStream;
import java.io.InputStream;

public class ByteBuffer {
    private byte[] buffer;
    private String encoding = null;
    private int length;

    public ByteBuffer(int n2) {
        this.buffer = new byte[n2];
        this.length = 0;
    }

    public ByteBuffer(InputStream inputStream) {
        int n2;
        this.length = 0;
        this.buffer = new byte[16384];
        while ((n2 = inputStream.read(this.buffer, this.length, 16384)) > 0) {
            this.length += n2;
            if (n2 != 16384) break;
            this.ensureCapacity(this.length + 16384);
        }
    }

    public ByteBuffer(byte[] arrby) {
        this.buffer = arrby;
        this.length = arrby.length;
    }

    public ByteBuffer(byte[] arrby, int n2) {
        if (n2 <= arrby.length) {
            this.buffer = arrby;
            this.length = n2;
            return;
        }
        throw new ArrayIndexOutOfBoundsException("Valid length exceeds the buffer length.");
    }

    public ByteBuffer(byte[] arrby, int n2, int n3) {
        if (n3 <= arrby.length - n2) {
            this.buffer = new byte[n3];
            System.arraycopy(arrby, n2, this.buffer, 0, n3);
            this.length = n3;
            return;
        }
        throw new ArrayIndexOutOfBoundsException("Valid length exceeds the buffer length.");
    }

    private void ensureCapacity(int n2) {
        if (n2 > this.buffer.length) {
            byte[] arrby = this.buffer;
            this.buffer = new byte[arrby.length * 2];
            System.arraycopy(arrby, 0, this.buffer, 0, arrby.length);
        }
    }

    public void append(byte by2) {
        this.ensureCapacity(this.length + 1);
        byte[] arrby = this.buffer;
        int n2 = this.length;
        this.length = n2 + 1;
        arrby[n2] = by2;
    }

    public void append(ByteBuffer byteBuffer) {
        this.append(byteBuffer.buffer, 0, byteBuffer.length);
    }

    public void append(byte[] arrby) {
        this.append(arrby, 0, arrby.length);
    }

    public void append(byte[] arrby, int n2, int n3) {
        this.ensureCapacity(this.length + n3);
        System.arraycopy(arrby, n2, this.buffer, this.length, n3);
        this.length += n3;
    }

    public byte byteAt(int n2) {
        if (n2 < this.length) {
            return this.buffer[n2];
        }
        throw new IndexOutOfBoundsException("The index exceeds the valid buffer area");
    }

    public int charAt(int n2) {
        if (n2 < this.length) {
            return this.buffer[n2] & 255;
        }
        throw new IndexOutOfBoundsException("The index exceeds the valid buffer area");
    }

    public InputStream getByteStream() {
        return new ByteArrayInputStream(this.buffer, 0, this.length);
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Lifted jumps to return sites
     */
    public String getEncoding() {
        block6 : {
            block7 : {
                block4 : {
                    block5 : {
                        if (this.encoding != null) return this.encoding;
                        if (this.length < 2) ** GOTO lbl-1000
                        if (this.buffer[0] != 0) break block4;
                        if (this.length < 4 || this.buffer[1] != 0) break block5;
                        if ((this.buffer[2] & 255) != 254 || (this.buffer[3] & 255) != 255) ** GOTO lbl-1000
                        var1_1 = "UTF-32BE";
                        break block6;
                    }
                    var1_1 = "UTF-16BE";
                    break block6;
                }
                if ((this.buffer[0] & 255) >= 128) break block7;
                if (this.buffer[1] != 0) ** GOTO lbl-1000
                var1_1 = this.length >= 4 && this.buffer[2] == 0 ? "UTF-32LE" : "UTF-16LE";
                break block6;
            }
            if ((this.buffer[0] & 255) == 239) lbl-1000: // 3 sources:
            {
                var1_1 = "UTF-8";
            } else if ((this.buffer[0] & 255) != 254 && this.length >= 4 && this.buffer[2] == 0) lbl-1000: // 2 sources:
            {
                var1_1 = "UTF-32";
            } else {
                var1_1 = "UTF-16";
            }
        }
        this.encoding = var1_1;
        return this.encoding;
    }

    public int length() {
        return this.length;
    }
}

