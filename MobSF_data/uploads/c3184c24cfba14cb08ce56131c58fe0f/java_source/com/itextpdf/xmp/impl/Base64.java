/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.xmp.impl;

public class Base64 {
    private static final byte EQUAL = -3;
    private static final byte INVALID = -1;
    private static final byte WHITESPACE = -2;
    private static byte[] ascii;
    private static byte[] base64;

    static {
        base64 = new byte[]{65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 43, 47};
        ascii = new byte[255];
        int n2 = 0;
        int n3 = 0;
        do {
            if (n3 >= 255) break;
            Base64.ascii[n3] = -1;
            ++n3;
        } while (true);
        for (int i2 = n2; i2 < base64.length; ++i2) {
            Base64.ascii[Base64.base64[i2]] = (byte)i2;
        }
        Base64.ascii[9] = -2;
        Base64.ascii[10] = -2;
        Base64.ascii[13] = -2;
        Base64.ascii[32] = -2;
        Base64.ascii[61] = -3;
    }

    public static final String decode(String string2) {
        return new String(Base64.decode(string2.getBytes()));
    }

    public static final byte[] decode(byte[] arrby) {
        int n2;
        int n3;
        int n4;
        int n5;
        block7 : {
            n4 = 0;
            n5 = 0;
            n3 = 0;
            do {
                if (n5 >= arrby.length) break block7;
                byte by2 = ascii[arrby[n5]];
                if (by2 >= 0) {
                    arrby[n3] = by2;
                } else if (by2 == -1) break;
                ++n5;
            } while (true);
            throw new IllegalArgumentException("Invalid base 64 string");
        }
        for (n2 = n3++; n2 > 0 && arrby[n2 - 1] == -3; --n2) {
        }
        byte[] arrby2 = new byte[n2 * 3 / 4];
        n3 = 0;
        for (n5 = n4; n5 < arrby2.length - 2; n5 += 3) {
            n2 = arrby[n3];
            n4 = n3 + 1;
            arrby2[n5] = (byte)(n2 << 2 & 255 | arrby[n4] >>> 4 & 3);
            n2 = arrby[n4];
            n4 = n3 + 2;
            arrby2[n5 + 1] = (byte)(n2 << 4 & 255 | arrby[n4] >>> 2 & 15);
            arrby2[n5 + 2] = (byte)(arrby[n4] << 6 & 255 | arrby[n3 + 3] & 63);
            n3 += 4;
        }
        if (n5 < arrby2.length) {
            arrby2[n5] = (byte)(arrby[n3] << 2 & 255 | arrby[n3 + 1] >>> 4 & 3);
        }
        if (++n5 < arrby2.length) {
            n2 = arrby[n3 + 1];
            arrby2[n5] = (byte)(arrby[n3 + 2] >>> 2 & 15 | n2 << 4 & 255);
        }
        return arrby2;
    }

    public static final String encode(String string2) {
        return new String(Base64.encode(string2.getBytes()));
    }

    public static final byte[] encode(byte[] arrby) {
        return Base64.encode(arrby, 0);
    }

    public static final byte[] encode(byte[] arrby, int n2) {
        int n3 = n2 = n2 / 4 * 4;
        if (n2 < 0) {
            n3 = 0;
        }
        int n4 = n2 = (arrby.length + 2) / 3 * 4;
        if (n3 > 0) {
            n4 = n2 + (n2 - 1) / n3;
        }
        byte[] arrby2 = new byte[n4];
        int n5 = 0;
        n2 = 0;
        int n6 = 0;
        while (n5 + 3 <= arrby.length) {
            int n7 = n5 + 1;
            n5 = arrby[n5];
            int n8 = n7 + 1;
            n7 = (n5 & 255) << 16 | (arrby[n7] & 255) << 8 | (arrby[n8] & 255) << 0;
            n5 = n2 + 1;
            arrby2[n2] = base64[(n7 & 16515072) >> 18];
            n2 = n5 + 1;
            arrby2[n5] = base64[(n7 & 258048) >> 12];
            int n9 = n2 + 1;
            arrby2[n2] = base64[(n7 & 4032) >> 6];
            n5 = n9 + 1;
            arrby2[n9] = base64[n7 & 63];
            n6 += 4;
            n2 = n5;
            if (n5 < n4) {
                n2 = n5;
                if (n3 > 0) {
                    n2 = n5;
                    if (n6 % n3 == 0) {
                        arrby2[n5] = 10;
                        n2 = n5 + 1;
                    }
                }
            }
            n5 = n8 + 1;
        }
        if (arrby.length - n5 == 2) {
            n3 = arrby[n5];
            n3 = (arrby[n5 + 1] & 255) << 8 | (n3 & 255) << 16;
            n4 = n2 + 1;
            arrby2[n2] = base64[(n3 & 16515072) >> 18];
            n2 = n4 + 1;
            arrby2[n4] = base64[(n3 & 258048) >> 12];
            arrby2[n2] = base64[(n3 & 4032) >> 6];
            arrby2[n2 + 1] = 61;
            return arrby2;
        }
        if (arrby.length - n5 == 1) {
            n3 = (arrby[n5] & 255) << 16;
            n4 = n2 + 1;
            arrby2[n2] = base64[(n3 & 16515072) >> 18];
            n2 = n4 + 1;
            arrby2[n4] = base64[(n3 & 258048) >> 12];
            arrby2[n2] = 61;
            arrby2[n2 + 1] = 61;
        }
        return arrby2;
    }
}

