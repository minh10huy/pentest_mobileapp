/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.xmp;

import com.itextpdf.xmp.XMPException;
import com.itextpdf.xmp.impl.Utils;
import com.itextpdf.xmp.impl.xpath.XMPPathParser;
import com.itextpdf.xmp.impl.xpath.XMPPathSegment;

public final class XMPPathFactory {
    private XMPPathFactory() {
    }

    private static void assertFieldNS(String string2) {
        if (string2 != null && string2.length() != 0) {
            return;
        }
        throw new XMPException("Empty field namespace URI", 101);
    }

    private static void assertFieldName(String string2) {
        if (string2 != null && string2.length() != 0) {
            return;
        }
        throw new XMPException("Empty f name", 102);
    }

    private static void assertQualNS(String string2) {
        if (string2 != null && string2.length() != 0) {
            return;
        }
        throw new XMPException("Empty qualifier namespace URI", 101);
    }

    private static void assertQualName(String string2) {
        if (string2 != null && string2.length() != 0) {
            return;
        }
        throw new XMPException("Empty qualifier name", 102);
    }

    public static String composeArrayItemPath(String string2, int n2) {
        if (n2 > 0) {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append(string2);
            stringBuilder.append('[');
            stringBuilder.append(n2);
            stringBuilder.append(']');
            return stringBuilder.toString();
        }
        if (n2 == -1) {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append(string2);
            stringBuilder.append("[last()]");
            return stringBuilder.toString();
        }
        throw new XMPException("Array index must be larger than zero", 104);
    }

    public static String composeFieldSelector(String string2, String object, String charSequence, String string3) {
        if ((object = XMPPathParser.expandXPath((String)object, (String)charSequence)).size() == 2) {
            charSequence = new StringBuilder();
            charSequence.append(string2);
            charSequence.append('[');
            charSequence.append(object.getSegment(1).getName());
            charSequence.append("=\"");
            charSequence.append(string3);
            charSequence.append("\"]");
            return charSequence.toString();
        }
        throw new XMPException("The fieldName name must be simple", 102);
    }

    public static String composeLangSelector(String string2, String string3) {
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append(string2);
        stringBuilder.append("[?xml:lang=\"");
        stringBuilder.append(Utils.normalizeLangValue(string3));
        stringBuilder.append("\"]");
        return stringBuilder.toString();
    }

    public static String composeQualifierPath(String object, String charSequence) {
        XMPPathFactory.assertQualNS((String)object);
        XMPPathFactory.assertQualName((String)charSequence);
        object = XMPPathParser.expandXPath((String)object, (String)charSequence);
        if (object.size() == 2) {
            charSequence = new StringBuilder();
            charSequence.append("/?");
            charSequence.append(object.getSegment(1).getName());
            return charSequence.toString();
        }
        throw new XMPException("The qualifier name must be simple", 102);
    }

    public static String composeStructFieldPath(String object, String charSequence) {
        XMPPathFactory.assertFieldNS((String)object);
        XMPPathFactory.assertFieldName((String)charSequence);
        object = XMPPathParser.expandXPath((String)object, (String)charSequence);
        if (object.size() == 2) {
            charSequence = new StringBuilder();
            charSequence.append('/');
            charSequence.append(object.getSegment(1).getName());
            return charSequence.toString();
        }
        throw new XMPException("The field name must be simple", 102);
    }
}

