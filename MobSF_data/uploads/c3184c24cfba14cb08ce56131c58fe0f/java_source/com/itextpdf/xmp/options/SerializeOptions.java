/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.xmp.options;

import com.itextpdf.xmp.XMPException;
import com.itextpdf.xmp.options.Options;

public final class SerializeOptions
extends Options {
    public static final int ENCODE_UTF16BE = 2;
    public static final int ENCODE_UTF16LE = 3;
    public static final int ENCODE_UTF8 = 0;
    private static final int ENCODING_MASK = 3;
    public static final int EXACT_PACKET_LENGTH = 512;
    public static final int INCLUDE_THUMBNAIL_PAD = 256;
    private static final int LITTLEENDIAN_BIT = 1;
    public static final int OMIT_PACKET_WRAPPER = 16;
    public static final int OMIT_XMPMETA_ELEMENT = 4096;
    public static final int READONLY_PACKET = 32;
    public static final int SORT = 8192;
    public static final int USE_CANONICAL_FORMAT = 128;
    public static final int USE_COMPACT_FORMAT = 64;
    private static final int UTF16_BIT = 2;
    private int baseIndent = 0;
    private String indent = "  ";
    private String newline = "\n";
    private boolean omitVersionAttribute = false;
    private int padding = 2048;

    public SerializeOptions() {
    }

    public SerializeOptions(int n2) {
        super(n2);
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    public Object clone() {
        try {
            SerializeOptions serializeOptions = new SerializeOptions(this.getOptions());
            serializeOptions.setBaseIndent(this.baseIndent);
            serializeOptions.setIndent(this.indent);
            serializeOptions.setNewline(this.newline);
            serializeOptions.setPadding(this.padding);
            return serializeOptions;
        }
        catch (XMPException xMPException) {
            return null;
        }
    }

    @Override
    protected String defineOptionName(int n2) {
        if (n2 != 16) {
            if (n2 != 32) {
                if (n2 != 64) {
                    if (n2 != 256) {
                        if (n2 != 512) {
                            if (n2 != 4096) {
                                if (n2 != 8192) {
                                    return null;
                                }
                                return "NORMALIZED";
                            }
                            return "OMIT_XMPMETA_ELEMENT";
                        }
                        return "EXACT_PACKET_LENGTH";
                    }
                    return "INCLUDE_THUMBNAIL_PAD";
                }
                return "USE_COMPACT_FORMAT";
            }
            return "READONLY_PACKET";
        }
        return "OMIT_PACKET_WRAPPER";
    }

    public int getBaseIndent() {
        return this.baseIndent;
    }

    public boolean getEncodeUTF16BE() {
        if ((this.getOptions() & 3) == 2) {
            return true;
        }
        return false;
    }

    public boolean getEncodeUTF16LE() {
        if ((this.getOptions() & 3) == 3) {
            return true;
        }
        return false;
    }

    public String getEncoding() {
        if (this.getEncodeUTF16BE()) {
            return "UTF-16BE";
        }
        if (this.getEncodeUTF16LE()) {
            return "UTF-16LE";
        }
        return "UTF-8";
    }

    public boolean getExactPacketLength() {
        return this.getOption(512);
    }

    public boolean getIncludeThumbnailPad() {
        return this.getOption(256);
    }

    public String getIndent() {
        return this.indent;
    }

    public String getNewline() {
        return this.newline;
    }

    public boolean getOmitPacketWrapper() {
        return this.getOption(16);
    }

    public boolean getOmitVersionAttribute() {
        return this.omitVersionAttribute;
    }

    public boolean getOmitXmpMetaElement() {
        return this.getOption(4096);
    }

    public int getPadding() {
        return this.padding;
    }

    public boolean getReadOnlyPacket() {
        return this.getOption(32);
    }

    public boolean getSort() {
        return this.getOption(8192);
    }

    public boolean getUseCanonicalFormat() {
        return this.getOption(128);
    }

    public boolean getUseCompactFormat() {
        return this.getOption(64);
    }

    @Override
    protected int getValidOptions() {
        return 13168;
    }

    public SerializeOptions setBaseIndent(int n2) {
        this.baseIndent = n2;
        return this;
    }

    public SerializeOptions setEncodeUTF16BE(boolean bl2) {
        this.setOption(3, false);
        this.setOption(2, bl2);
        return this;
    }

    public SerializeOptions setEncodeUTF16LE(boolean bl2) {
        this.setOption(3, false);
        this.setOption(3, bl2);
        return this;
    }

    public SerializeOptions setExactPacketLength(boolean bl2) {
        this.setOption(512, bl2);
        return this;
    }

    public SerializeOptions setIncludeThumbnailPad(boolean bl2) {
        this.setOption(256, bl2);
        return this;
    }

    public SerializeOptions setIndent(String string2) {
        this.indent = string2;
        return this;
    }

    public SerializeOptions setNewline(String string2) {
        this.newline = string2;
        return this;
    }

    public SerializeOptions setOmitPacketWrapper(boolean bl2) {
        this.setOption(16, bl2);
        return this;
    }

    public SerializeOptions setOmitXmpMetaElement(boolean bl2) {
        this.setOption(4096, bl2);
        return this;
    }

    public SerializeOptions setPadding(int n2) {
        this.padding = n2;
        return this;
    }

    public SerializeOptions setReadOnlyPacket(boolean bl2) {
        this.setOption(32, bl2);
        return this;
    }

    public SerializeOptions setSort(boolean bl2) {
        this.setOption(8192, bl2);
        return this;
    }

    public SerializeOptions setUseCanonicalFormat(boolean bl2) {
        this.setOption(128, bl2);
        return this;
    }

    public SerializeOptions setUseCompactFormat(boolean bl2) {
        this.setOption(64, bl2);
        return this;
    }
}

