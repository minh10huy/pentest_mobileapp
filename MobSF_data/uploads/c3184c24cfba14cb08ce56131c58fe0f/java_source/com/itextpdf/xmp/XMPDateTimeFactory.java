/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.xmp;

import com.itextpdf.xmp.XMPDateTime;
import com.itextpdf.xmp.impl.XMPDateTimeImpl;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.TimeZone;

public final class XMPDateTimeFactory {
    private static final TimeZone UTC = TimeZone.getTimeZone("UTC");

    private XMPDateTimeFactory() {
    }

    public static XMPDateTime convertToLocalTime(XMPDateTime comparable) {
        long l2 = comparable.getCalendar().getTimeInMillis();
        comparable = new GregorianCalendar();
        comparable.setTimeInMillis(l2);
        return new XMPDateTimeImpl((Calendar)comparable);
    }

    public static XMPDateTime convertToUTCTime(XMPDateTime comparable) {
        long l2 = comparable.getCalendar().getTimeInMillis();
        comparable = new GregorianCalendar(UTC);
        comparable.setGregorianChange(new Date(Long.MIN_VALUE));
        comparable.setTimeInMillis(l2);
        return new XMPDateTimeImpl((Calendar)comparable);
    }

    public static XMPDateTime create() {
        return new XMPDateTimeImpl();
    }

    public static XMPDateTime create(int n2, int n3, int n4) {
        XMPDateTimeImpl xMPDateTimeImpl = new XMPDateTimeImpl();
        xMPDateTimeImpl.setYear(n2);
        xMPDateTimeImpl.setMonth(n3);
        xMPDateTimeImpl.setDay(n4);
        return xMPDateTimeImpl;
    }

    public static XMPDateTime create(int n2, int n3, int n4, int n5, int n6, int n7, int n8) {
        XMPDateTimeImpl xMPDateTimeImpl = new XMPDateTimeImpl();
        xMPDateTimeImpl.setYear(n2);
        xMPDateTimeImpl.setMonth(n3);
        xMPDateTimeImpl.setDay(n4);
        xMPDateTimeImpl.setHour(n5);
        xMPDateTimeImpl.setMinute(n6);
        xMPDateTimeImpl.setSecond(n7);
        xMPDateTimeImpl.setNanoSecond(n8);
        return xMPDateTimeImpl;
    }

    public static XMPDateTime createFromCalendar(Calendar calendar) {
        return new XMPDateTimeImpl(calendar);
    }

    public static XMPDateTime createFromISO8601(String string2) {
        return new XMPDateTimeImpl(string2);
    }

    public static XMPDateTime getCurrentDateTime() {
        return new XMPDateTimeImpl(new GregorianCalendar());
    }

    public static XMPDateTime setLocalTimeZone(XMPDateTime comparable) {
        comparable = comparable.getCalendar();
        comparable.setTimeZone(TimeZone.getDefault());
        return new XMPDateTimeImpl((Calendar)comparable);
    }
}

