/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.xmp;

import com.itextpdf.xmp.XMPMeta;
import com.itextpdf.xmp.XMPSchemaRegistry;
import com.itextpdf.xmp.XMPVersionInfo;
import com.itextpdf.xmp.impl.XMPMetaImpl;
import com.itextpdf.xmp.impl.XMPMetaParser;
import com.itextpdf.xmp.impl.XMPSchemaRegistryImpl;
import com.itextpdf.xmp.impl.XMPSerializerHelper;
import com.itextpdf.xmp.options.ParseOptions;
import com.itextpdf.xmp.options.SerializeOptions;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PrintStream;

public final class XMPMetaFactory {
    private static XMPSchemaRegistry schema = new XMPSchemaRegistryImpl();
    private static XMPVersionInfo versionInfo = null;

    private XMPMetaFactory() {
    }

    private static void assertImplementation(XMPMeta xMPMeta) {
        if (xMPMeta instanceof XMPMetaImpl) {
            return;
        }
        throw new UnsupportedOperationException("The serializing service works onlywith the XMPMeta implementation of this library");
    }

    public static XMPMeta create() {
        return new XMPMetaImpl();
    }

    public static XMPSchemaRegistry getSchemaRegistry() {
        return schema;
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public static XMPVersionInfo getVersionInfo() {
        synchronized (XMPMetaFactory.class) {
            XMPVersionInfo xMPVersionInfo = versionInfo;
            if (xMPVersionInfo != null) return versionInfo;
            try {
                versionInfo = new XMPVersionInfo(){

                    @Override
                    public int getBuild() {
                        return 3;
                    }

                    @Override
                    public int getMajor() {
                        return 5;
                    }

                    @Override
                    public String getMessage() {
                        return "Adobe XMP Core 5.1.0-jc003";
                    }

                    @Override
                    public int getMicro() {
                        return 0;
                    }

                    @Override
                    public int getMinor() {
                        return 1;
                    }

                    @Override
                    public boolean isDebug() {
                        return false;
                    }

                    public String toString() {
                        return "Adobe XMP Core 5.1.0-jc003";
                    }
                };
                return versionInfo;
            }
            catch (Throwable throwable) {
                System.out.println(throwable);
            }
            return versionInfo;
        }
    }

    public static XMPMeta parse(InputStream inputStream) {
        return XMPMetaFactory.parse(inputStream, null);
    }

    public static XMPMeta parse(InputStream inputStream, ParseOptions parseOptions) {
        return XMPMetaParser.parse(inputStream, parseOptions);
    }

    public static XMPMeta parseFromBuffer(byte[] arrby) {
        return XMPMetaFactory.parseFromBuffer(arrby, null);
    }

    public static XMPMeta parseFromBuffer(byte[] arrby, ParseOptions parseOptions) {
        return XMPMetaParser.parse(arrby, parseOptions);
    }

    public static XMPMeta parseFromString(String string2) {
        return XMPMetaFactory.parseFromString(string2, null);
    }

    public static XMPMeta parseFromString(String string2, ParseOptions parseOptions) {
        return XMPMetaParser.parse(string2, parseOptions);
    }

    public static void reset() {
        schema = new XMPSchemaRegistryImpl();
    }

    public static void serialize(XMPMeta xMPMeta, OutputStream outputStream) {
        XMPMetaFactory.serialize(xMPMeta, outputStream, null);
    }

    public static void serialize(XMPMeta xMPMeta, OutputStream outputStream, SerializeOptions serializeOptions) {
        XMPMetaFactory.assertImplementation(xMPMeta);
        XMPSerializerHelper.serialize((XMPMetaImpl)xMPMeta, outputStream, serializeOptions);
    }

    public static byte[] serializeToBuffer(XMPMeta xMPMeta, SerializeOptions serializeOptions) {
        XMPMetaFactory.assertImplementation(xMPMeta);
        return XMPSerializerHelper.serializeToBuffer((XMPMetaImpl)xMPMeta, serializeOptions);
    }

    public static String serializeToString(XMPMeta xMPMeta, SerializeOptions serializeOptions) {
        XMPMetaFactory.assertImplementation(xMPMeta);
        return XMPSerializerHelper.serializeToString((XMPMetaImpl)xMPMeta, serializeOptions);
    }

}

