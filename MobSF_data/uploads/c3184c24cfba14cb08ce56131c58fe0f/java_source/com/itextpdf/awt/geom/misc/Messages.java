/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.awt.geom.misc;

import java.util.MissingResourceException;
import java.util.ResourceBundle;

public class Messages {
    private static ResourceBundle bundle;

    /*
     * Enabled aggressive block sorting
     */
    public static String format(String string2, Object[] object) {
        int n2;
        int n3;
        StringBuilder stringBuilder = new StringBuilder(string2.length() + ((Object[])object).length * 20);
        String[] arrstring = new String[((Object[])object).length];
        int n4 = 0;
        for (n2 = 0; n2 < ((Object[])object).length; ++n2) {
            arrstring[n2] = object[n2] == null ? "<null>" : object[n2].toString();
        }
        n2 = n4;
        while ((n3 = string2.indexOf(123, n2)) >= 0) {
            if (n3 != 0 && string2.charAt(n4 = n3 - 1) == '\\') {
                if (n3 != 1) {
                    stringBuilder.append(string2.substring(n2, n4));
                }
                stringBuilder.append('{');
                n2 = n3 + 1;
                continue;
            }
            if (n3 > string2.length() - 3) {
                stringBuilder.append(string2.substring(n2, string2.length()));
                n2 = string2.length();
                continue;
            }
            n4 = n3 + 1;
            byte by2 = (byte)Character.digit(string2.charAt(n4), 10);
            if (by2 >= 0 && string2.charAt(n3 + 2) == '}') {
                void var1_4;
                stringBuilder.append(string2.substring(n2, n3));
                if (by2 >= arrstring.length) {
                    String string3 = "<missing argument>";
                } else {
                    String string4 = arrstring[by2];
                }
                stringBuilder.append((String)var1_4);
                n2 = n3 + 3;
                continue;
            }
            stringBuilder.append(string2.substring(n2, n4));
            n2 = n4;
        }
        if (n2 < string2.length()) {
            stringBuilder.append(string2.substring(n2, string2.length()));
        }
        return stringBuilder.toString();
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public static String getString(String string2) {
        if (bundle == null) {
            return string2;
        }
        try {
            return bundle.getString(string2);
        }
        catch (MissingResourceException missingResourceException) {}
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("Missing message: ");
        stringBuilder.append(string2);
        return stringBuilder.toString();
    }

    public static String getString(String string2, char c2) {
        return Messages.getString(string2, new Object[]{String.valueOf(c2)});
    }

    public static String getString(String string2, int n2) {
        return Messages.getString(string2, new Object[]{Integer.toString(n2)});
    }

    public static String getString(String string2, Object object) {
        return Messages.getString(string2, new Object[]{object});
    }

    public static String getString(String string2, Object object, Object object2) {
        return Messages.getString(string2, new Object[]{object, object2});
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public static String getString(String string2, Object[] arrobject) {
        String string3 = string2;
        if (bundle == null) return Messages.format(string3, arrobject);
        try {
            string3 = bundle.getString(string2);
        }
        catch (MissingResourceException missingResourceException) {
            string3 = string2;
            return Messages.format(string3, arrobject);
        }
        return Messages.format(string3, arrobject);
    }
}

