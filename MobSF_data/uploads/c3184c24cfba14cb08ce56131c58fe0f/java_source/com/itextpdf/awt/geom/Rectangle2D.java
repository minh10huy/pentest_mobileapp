/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.awt.geom;

import com.itextpdf.awt.geom.AffineTransform;
import com.itextpdf.awt.geom.Line2D;
import com.itextpdf.awt.geom.PathIterator;
import com.itextpdf.awt.geom.Point2D;
import com.itextpdf.awt.geom.RectangularShape;
import com.itextpdf.awt.geom.misc.HashCode;
import com.itextpdf.awt.geom.misc.Messages;
import java.util.NoSuchElementException;

public abstract class Rectangle2D
extends RectangularShape {
    public static final int OUT_BOTTOM = 8;
    public static final int OUT_LEFT = 1;
    public static final int OUT_RIGHT = 4;
    public static final int OUT_TOP = 2;

    protected Rectangle2D() {
    }

    public static void intersect(Rectangle2D rectangle2D, Rectangle2D rectangle2D2, Rectangle2D rectangle2D3) {
        double d2 = Math.max(rectangle2D.getMinX(), rectangle2D2.getMinX());
        double d3 = Math.max(rectangle2D.getMinY(), rectangle2D2.getMinY());
        rectangle2D3.setFrame(d2, d3, Math.min(rectangle2D.getMaxX(), rectangle2D2.getMaxX()) - d2, Math.min(rectangle2D.getMaxY(), rectangle2D2.getMaxY()) - d3);
    }

    public static void union(Rectangle2D rectangle2D, Rectangle2D rectangle2D2, Rectangle2D rectangle2D3) {
        double d2 = Math.min(rectangle2D.getMinX(), rectangle2D2.getMinX());
        double d3 = Math.min(rectangle2D.getMinY(), rectangle2D2.getMinY());
        rectangle2D3.setFrame(d2, d3, Math.max(rectangle2D.getMaxX(), rectangle2D2.getMaxX()) - d2, Math.max(rectangle2D.getMaxY(), rectangle2D2.getMaxY()) - d3);
    }

    public void add(double d2, double d3) {
        double d4 = Math.min(this.getMinX(), d2);
        double d5 = Math.min(this.getMinY(), d3);
        this.setRect(d4, d5, Math.max(this.getMaxX(), d2) - d4, Math.max(this.getMaxY(), d3) - d5);
    }

    public void add(Point2D point2D) {
        this.add(point2D.getX(), point2D.getY());
    }

    public void add(Rectangle2D rectangle2D) {
        Rectangle2D.union(this, rectangle2D, this);
    }

    @Override
    public boolean contains(double d2, double d3) {
        boolean bl2 = this.isEmpty();
        boolean bl3 = false;
        if (bl2) {
            return false;
        }
        double d4 = this.getX();
        double d5 = this.getY();
        double d6 = this.getWidth();
        double d7 = this.getHeight();
        bl2 = bl3;
        if (d4 <= d2) {
            bl2 = bl3;
            if (d2 < d6 + d4) {
                bl2 = bl3;
                if (d5 <= d3) {
                    bl2 = bl3;
                    if (d3 < d7 + d5) {
                        bl2 = true;
                    }
                }
            }
        }
        return bl2;
    }

    @Override
    public boolean contains(double d2, double d3, double d4, double d5) {
        boolean bl2;
        boolean bl3 = this.isEmpty();
        boolean bl4 = bl2 = false;
        if (!bl3) {
            bl4 = bl2;
            if (d4 > 0.0) {
                if (d5 <= 0.0) {
                    return false;
                }
                double d6 = this.getX();
                double d7 = this.getY();
                double d8 = this.getWidth();
                double d9 = this.getHeight();
                bl4 = bl2;
                if (d6 <= d2) {
                    bl4 = bl2;
                    if (d2 + d4 <= d8 + d6) {
                        bl4 = bl2;
                        if (d7 <= d3) {
                            bl4 = bl2;
                            if (d3 + d5 <= d9 + d7) {
                                bl4 = true;
                            }
                        }
                    }
                }
            }
        }
        return bl4;
    }

    public abstract Rectangle2D createIntersection(Rectangle2D var1);

    public abstract Rectangle2D createUnion(Rectangle2D var1);

    public boolean equals(Object object) {
        if (object == this) {
            return true;
        }
        if (object instanceof Rectangle2D) {
            object = (Rectangle2D)object;
            if (this.getX() == object.getX() && this.getY() == object.getY() && this.getWidth() == object.getWidth() && this.getHeight() == object.getHeight()) {
                return true;
            }
            return false;
        }
        return false;
    }

    @Override
    public Rectangle2D getBounds2D() {
        return (Rectangle2D)this.clone();
    }

    @Override
    public PathIterator getPathIterator(AffineTransform affineTransform) {
        return new Iterator(this, affineTransform);
    }

    @Override
    public PathIterator getPathIterator(AffineTransform affineTransform, double d2) {
        return new Iterator(this, affineTransform);
    }

    public int hashCode() {
        HashCode hashCode = new HashCode();
        hashCode.append(this.getX());
        hashCode.append(this.getY());
        hashCode.append(this.getWidth());
        hashCode.append(this.getHeight());
        return hashCode.hashCode();
    }

    @Override
    public boolean intersects(double d2, double d3, double d4, double d5) {
        boolean bl2;
        boolean bl3 = this.isEmpty();
        boolean bl4 = bl2 = false;
        if (!bl3) {
            bl4 = bl2;
            if (d4 > 0.0) {
                if (d5 <= 0.0) {
                    return false;
                }
                double d6 = this.getX();
                double d7 = this.getY();
                double d8 = this.getWidth();
                double d9 = this.getHeight();
                bl4 = bl2;
                if (d2 + d4 > d6) {
                    bl4 = bl2;
                    if (d2 < d8 + d6) {
                        bl4 = bl2;
                        if (d3 + d5 > d7) {
                            bl4 = bl2;
                            if (d3 < d9 + d7) {
                                bl4 = true;
                            }
                        }
                    }
                }
            }
        }
        return bl4;
    }

    public boolean intersectsLine(double d2, double d3, double d4, double d5) {
        double d6 = this.getX();
        double d7 = this.getY();
        double d8 = d6 + this.getWidth();
        double d9 = d7 + this.getHeight();
        if (!(d6 <= d2 && d2 <= d8 && d7 <= d3 && d3 <= d9 || d6 <= d4 && d4 <= d8 && d7 <= d5 && d5 <= d9 || Line2D.linesIntersect(d6, d7, d8, d9, d2, d3, d4, d5) || Line2D.linesIntersect(d8, d7, d6, d9, d2, d3, d4, d5))) {
            return false;
        }
        return true;
    }

    public boolean intersectsLine(Line2D line2D) {
        return this.intersectsLine(line2D.getX1(), line2D.getY1(), line2D.getX2(), line2D.getY2());
    }

    public abstract int outcode(double var1, double var3);

    public int outcode(Point2D point2D) {
        return this.outcode(point2D.getX(), point2D.getY());
    }

    @Override
    public void setFrame(double d2, double d3, double d4, double d5) {
        this.setRect(d2, d3, d4, d5);
    }

    public abstract void setRect(double var1, double var3, double var5, double var7);

    public void setRect(Rectangle2D rectangle2D) {
        this.setRect(rectangle2D.getX(), rectangle2D.getY(), rectangle2D.getWidth(), rectangle2D.getHeight());
    }

    public static class Double
    extends Rectangle2D {
        public double height;
        public double width;
        public double x;
        public double y;

        public Double() {
        }

        public Double(double d2, double d3, double d4, double d5) {
            this.setRect(d2, d3, d4, d5);
        }

        @Override
        public Rectangle2D createIntersection(Rectangle2D rectangle2D) {
            Double double_ = new Double();
            Rectangle2D.intersect(this, rectangle2D, double_);
            return double_;
        }

        @Override
        public Rectangle2D createUnion(Rectangle2D rectangle2D) {
            Double double_ = new Double();
            Rectangle2D.union(this, rectangle2D, double_);
            return double_;
        }

        @Override
        public Rectangle2D getBounds2D() {
            return new Double(this.x, this.y, this.width, this.height);
        }

        @Override
        public double getHeight() {
            return this.height;
        }

        @Override
        public double getWidth() {
            return this.width;
        }

        @Override
        public double getX() {
            return this.x;
        }

        @Override
        public double getY() {
            return this.y;
        }

        @Override
        public boolean isEmpty() {
            if (this.width > 0.0 && this.height > 0.0) {
                return false;
            }
            return true;
        }

        @Override
        public int outcode(double d2, double d3) {
            int n2 = this.width <= 0.0 ? 5 : (d2 < this.x ? 1 : (d2 > this.x + this.width ? 4 : 0));
            if (this.height <= 0.0) {
                return n2 | 10;
            }
            if (d3 < this.y) {
                return n2 | 2;
            }
            int n3 = n2;
            if (d3 > this.y + this.height) {
                n3 = n2 | 8;
            }
            return n3;
        }

        @Override
        public void setRect(double d2, double d3, double d4, double d5) {
            this.x = d2;
            this.y = d3;
            this.width = d4;
            this.height = d5;
        }

        @Override
        public void setRect(Rectangle2D rectangle2D) {
            this.x = rectangle2D.getX();
            this.y = rectangle2D.getY();
            this.width = rectangle2D.getWidth();
            this.height = rectangle2D.getHeight();
        }

        public String toString() {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append(this.getClass().getName());
            stringBuilder.append("[x=");
            stringBuilder.append(this.x);
            stringBuilder.append(",y=");
            stringBuilder.append(this.y);
            stringBuilder.append(",width=");
            stringBuilder.append(this.width);
            stringBuilder.append(",height=");
            stringBuilder.append(this.height);
            stringBuilder.append("]");
            return stringBuilder.toString();
        }
    }

    public static class Float
    extends Rectangle2D {
        public float height;
        public float width;
        public float x;
        public float y;

        public Float() {
        }

        public Float(float f2, float f3, float f4, float f5) {
            this.setRect(f2, f3, f4, f5);
        }

        @Override
        public Rectangle2D createIntersection(Rectangle2D rectangle2D) {
            Rectangle2D rectangle2D2 = rectangle2D instanceof Double ? new Double() : new Float();
            Rectangle2D.intersect(this, rectangle2D, rectangle2D2);
            return rectangle2D2;
        }

        @Override
        public Rectangle2D createUnion(Rectangle2D rectangle2D) {
            Rectangle2D rectangle2D2 = rectangle2D instanceof Double ? new Double() : new Float();
            Rectangle2D.union(this, rectangle2D, rectangle2D2);
            return rectangle2D2;
        }

        @Override
        public Rectangle2D getBounds2D() {
            return new Float(this.x, this.y, this.width, this.height);
        }

        @Override
        public double getHeight() {
            return this.height;
        }

        @Override
        public double getWidth() {
            return this.width;
        }

        @Override
        public double getX() {
            return this.x;
        }

        @Override
        public double getY() {
            return this.y;
        }

        @Override
        public boolean isEmpty() {
            if (this.width > 0.0f && this.height > 0.0f) {
                return false;
            }
            return true;
        }

        @Override
        public int outcode(double d2, double d3) {
            int n2 = this.width <= 0.0f ? 5 : (d2 < (double)this.x ? 1 : (d2 > (double)(this.x + this.width) ? 4 : 0));
            if (this.height <= 0.0f) {
                return n2 | 10;
            }
            if (d3 < (double)this.y) {
                return n2 | 2;
            }
            int n3 = n2;
            if (d3 > (double)(this.y + this.height)) {
                n3 = n2 | 8;
            }
            return n3;
        }

        @Override
        public void setRect(double d2, double d3, double d4, double d5) {
            this.x = (float)d2;
            this.y = (float)d3;
            this.width = (float)d4;
            this.height = (float)d5;
        }

        public void setRect(float f2, float f3, float f4, float f5) {
            this.x = f2;
            this.y = f3;
            this.width = f4;
            this.height = f5;
        }

        @Override
        public void setRect(Rectangle2D rectangle2D) {
            this.x = (float)rectangle2D.getX();
            this.y = (float)rectangle2D.getY();
            this.width = (float)rectangle2D.getWidth();
            this.height = (float)rectangle2D.getHeight();
        }

        public String toString() {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append(this.getClass().getName());
            stringBuilder.append("[x=");
            stringBuilder.append(this.x);
            stringBuilder.append(",y=");
            stringBuilder.append(this.y);
            stringBuilder.append(",width=");
            stringBuilder.append(this.width);
            stringBuilder.append(",height=");
            stringBuilder.append(this.height);
            stringBuilder.append("]");
            return stringBuilder.toString();
        }
    }

    class Iterator
    implements PathIterator {
        double height;
        int index;
        AffineTransform t;
        double width;
        double x;
        double y;

        Iterator(Rectangle2D rectangle2D2, AffineTransform affineTransform) {
            this.x = rectangle2D2.getX();
            this.y = rectangle2D2.getY();
            this.width = rectangle2D2.getWidth();
            this.height = rectangle2D2.getHeight();
            this.t = affineTransform;
            if (this.width < 0.0 || this.height < 0.0) {
                this.index = 6;
            }
        }

        @Override
        public int currentSegment(double[] arrd) {
            if (!this.isDone()) {
                if (this.index == 5) {
                    return 4;
                }
                int n2 = this.index;
                int n3 = 1;
                if (n2 == 0) {
                    arrd[0] = this.x;
                    arrd[1] = this.y;
                    n3 = 0;
                } else {
                    switch (this.index) {
                        default: {
                            break;
                        }
                        case 4: {
                            arrd[0] = this.x;
                            arrd[1] = this.y;
                            break;
                        }
                        case 3: {
                            arrd[0] = this.x;
                            arrd[1] = this.y + this.height;
                            break;
                        }
                        case 2: {
                            arrd[0] = this.x + this.width;
                            arrd[1] = this.y + this.height;
                            break;
                        }
                        case 1: {
                            arrd[0] = this.x + this.width;
                            arrd[1] = this.y;
                        }
                    }
                }
                if (this.t != null) {
                    this.t.transform(arrd, 0, arrd, 0, 1);
                }
                return n3;
            }
            throw new NoSuchElementException(Messages.getString("awt.4B"));
        }

        @Override
        public int currentSegment(float[] arrf) {
            if (!this.isDone()) {
                if (this.index == 5) {
                    return 4;
                }
                int n2 = this.index;
                int n3 = 1;
                if (n2 == 0) {
                    arrf[0] = (float)this.x;
                    arrf[1] = (float)this.y;
                    n3 = 0;
                } else {
                    switch (this.index) {
                        default: {
                            break;
                        }
                        case 4: {
                            arrf[0] = (float)this.x;
                            arrf[1] = (float)this.y;
                            break;
                        }
                        case 3: {
                            arrf[0] = (float)this.x;
                            arrf[1] = (float)(this.y + this.height);
                            break;
                        }
                        case 2: {
                            arrf[0] = (float)(this.x + this.width);
                            arrf[1] = (float)(this.y + this.height);
                            break;
                        }
                        case 1: {
                            arrf[0] = (float)(this.x + this.width);
                            arrf[1] = (float)this.y;
                        }
                    }
                }
                if (this.t != null) {
                    this.t.transform(arrf, 0, arrf, 0, 1);
                }
                return n3;
            }
            throw new NoSuchElementException(Messages.getString("awt.4B"));
        }

        @Override
        public int getWindingRule() {
            return 1;
        }

        @Override
        public boolean isDone() {
            if (this.index > 5) {
                return true;
            }
            return false;
        }

        @Override
        public void next() {
            ++this.index;
        }
    }

}

