/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.awt.geom;

import com.itextpdf.awt.geom.CubicCurve2D;
import com.itextpdf.awt.geom.PathIterator;
import com.itextpdf.awt.geom.QuadCurve2D;
import com.itextpdf.awt.geom.misc.Messages;
import java.util.NoSuchElementException;

public class FlatteningPathIterator
implements PathIterator {
    private static final int BUFFER_CAPACITY = 16;
    private static final int BUFFER_LIMIT = 16;
    private static final int BUFFER_SIZE = 16;
    double[] buf;
    boolean bufEmpty = true;
    int bufIndex;
    int bufLimit;
    int bufSize;
    int bufSubdiv;
    int bufType;
    double[] coords = new double[6];
    double flatness;
    double flatness2;
    PathIterator p;
    double px;
    double py;

    public FlatteningPathIterator(PathIterator pathIterator, double d2) {
        this(pathIterator, d2, 16);
    }

    public FlatteningPathIterator(PathIterator pathIterator, double d2, int n2) {
        if (d2 >= 0.0) {
            if (n2 >= 0) {
                if (pathIterator != null) {
                    this.p = pathIterator;
                    this.flatness = d2;
                    this.flatness2 = d2 * d2;
                    this.bufLimit = n2;
                    this.bufSize = Math.min(this.bufLimit, 16);
                    this.buf = new double[this.bufSize];
                    this.bufIndex = this.bufSize;
                    return;
                }
                throw new NullPointerException(Messages.getString("awt.208"));
            }
            throw new IllegalArgumentException(Messages.getString("awt.207"));
        }
        throw new IllegalArgumentException(Messages.getString("awt.206"));
    }

    @Override
    public int currentSegment(double[] arrd) {
        if (!this.isDone()) {
            int n2;
            this.evaluate();
            int n3 = n2 = this.bufType;
            if (n2 != 4) {
                arrd[0] = this.px;
                arrd[1] = this.py;
                n3 = n2;
                if (n2 != 0) {
                    n3 = 1;
                }
            }
            return n3;
        }
        throw new NoSuchElementException(Messages.getString("awt.4B"));
    }

    @Override
    public int currentSegment(float[] arrf) {
        if (!this.isDone()) {
            int n2;
            this.evaluate();
            int n3 = n2 = this.bufType;
            if (n2 != 4) {
                arrf[0] = (float)this.px;
                arrf[1] = (float)this.py;
                n3 = n2;
                if (n2 != 0) {
                    n3 = 1;
                }
            }
            return n3;
        }
        throw new NoSuchElementException(Messages.getString("awt.4Bx"));
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Lifted jumps to return sites
     */
    void evaluate() {
        if (this.bufEmpty) {
            this.bufType = this.p.currentSegment(this.coords);
        }
        var1_1 = this.bufType;
        var3_2 = false;
        var2_3 = false;
        switch (var1_1) {
            default: {
                return;
            }
            case 3: {
                if (this.bufEmpty) {
                    this.bufIndex -= 8;
                    this.buf[this.bufIndex + 0] = this.px;
                    this.buf[this.bufIndex + 1] = this.py;
                    System.arraycopy(this.coords, 0, this.buf, this.bufIndex + 2, 6);
                    this.bufSubdiv = 0;
                }
                while (this.bufSubdiv < this.bufLimit && CubicCurve2D.getFlatnessSq(this.buf, this.bufIndex) >= this.flatness2) {
                    if (this.bufIndex <= 6) {
                        var4_4 = new double[this.bufSize + 16];
                        System.arraycopy(this.buf, this.bufIndex, var4_4, this.bufIndex + 16, this.bufSize - this.bufIndex);
                        this.buf = var4_4;
                        this.bufSize += 16;
                        this.bufIndex += 16;
                    }
                    CubicCurve2D.subdivide(this.buf, this.bufIndex, this.buf, this.bufIndex - 6, this.buf, this.bufIndex);
                    this.bufIndex -= 6;
                    ++this.bufSubdiv;
                }
                this.bufIndex += 6;
                this.px = this.buf[this.bufIndex];
                this.py = this.buf[this.bufIndex + 1];
                if (this.bufIndex == this.bufSize - 2) {
                    var2_3 = true;
                }
                this.bufEmpty = var2_3;
                if (this.bufEmpty == false) return;
                ** GOTO lbl61
            }
            case 2: {
                if (this.bufEmpty) {
                    this.bufIndex -= 6;
                    this.buf[this.bufIndex + 0] = this.px;
                    this.buf[this.bufIndex + 1] = this.py;
                    System.arraycopy(this.coords, 0, this.buf, this.bufIndex + 2, 4);
                    this.bufSubdiv = 0;
                }
                while (this.bufSubdiv < this.bufLimit && QuadCurve2D.getFlatnessSq(this.buf, this.bufIndex) >= this.flatness2) {
                    if (this.bufIndex <= 4) {
                        var4_5 = new double[this.bufSize + 16];
                        System.arraycopy(this.buf, this.bufIndex, var4_5, this.bufIndex + 16, this.bufSize - this.bufIndex);
                        this.buf = var4_5;
                        this.bufSize += 16;
                        this.bufIndex += 16;
                    }
                    QuadCurve2D.subdivide(this.buf, this.bufIndex, this.buf, this.bufIndex - 4, this.buf, this.bufIndex);
                    this.bufIndex -= 4;
                    ++this.bufSubdiv;
                }
                this.bufIndex += 4;
                this.px = this.buf[this.bufIndex];
                this.py = this.buf[this.bufIndex + 1];
                var2_3 = var3_2;
                if (this.bufIndex == this.bufSize - 2) {
                    var2_3 = true;
                }
                this.bufEmpty = var2_3;
                if (this.bufEmpty == false) return;
lbl61: // 2 sources:
                this.bufIndex = this.bufSize;
                this.bufType = 1;
                return;
            }
            case 0: 
            case 1: 
        }
        this.px = this.coords[0];
        this.py = this.coords[1];
    }

    public double getFlatness() {
        return this.flatness;
    }

    public int getRecursionLimit() {
        return this.bufLimit;
    }

    @Override
    public int getWindingRule() {
        return this.p.getWindingRule();
    }

    @Override
    public boolean isDone() {
        if (this.bufEmpty && this.p.isDone()) {
            return true;
        }
        return false;
    }

    @Override
    public void next() {
        if (this.bufEmpty) {
            this.p.next();
        }
    }
}

