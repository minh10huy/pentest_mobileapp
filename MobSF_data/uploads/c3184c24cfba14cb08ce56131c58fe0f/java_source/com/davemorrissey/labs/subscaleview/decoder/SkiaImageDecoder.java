/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.content.ContentResolver
 *  android.content.Context
 *  android.content.pm.PackageManager
 *  android.content.res.AssetManager
 *  android.content.res.Resources
 *  android.graphics.Bitmap
 *  android.graphics.Bitmap$Config
 *  android.graphics.BitmapFactory
 *  android.graphics.BitmapFactory$Options
 *  android.net.Uri
 *  android.text.TextUtils
 */
package com.davemorrissey.labs.subscaleview.decoder;

import android.content.ContentResolver;
import android.content.Context;
import android.content.pm.PackageManager;
import android.content.res.AssetManager;
import android.content.res.Resources;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.net.Uri;
import android.support.annotation.Keep;
import android.text.TextUtils;
import com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView;
import com.davemorrissey.labs.subscaleview.decoder.ImageDecoder;
import java.io.InputStream;
import java.util.List;

public class SkiaImageDecoder
implements ImageDecoder {
    private static final String ASSET_PREFIX = "file:///android_asset/";
    private static final String FILE_PREFIX = "file://";
    private static final String RESOURCE_PREFIX = "android.resource://";
    private final Bitmap.Config bitmapConfig;

    @Keep
    public SkiaImageDecoder() {
        this(null);
    }

    /*
     * Enabled aggressive block sorting
     */
    public SkiaImageDecoder(Bitmap.Config config) {
        Bitmap.Config config2 = SubsamplingScaleImageView.getPreferredBitmapConfig();
        if (config == null) {
            if (config2 != null) {
                this.bitmapConfig = config2;
                return;
            }
            config = Bitmap.Config.RGB_565;
        }
        this.bitmapConfig = config;
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    @Override
    public Bitmap decode(Context var1_1, Uri var2_5) {
        block15 : {
            block17 : {
                block20 : {
                    block19 : {
                        block18 : {
                            block16 : {
                                var9_9 = var2_5.toString();
                                var8_10 = new BitmapFactory.Options();
                                var8_10.inPreferredConfig = this.bitmapConfig;
                                if (!var9_9.startsWith("android.resource://")) break block16;
                                var9_9 = var2_5.getAuthority();
                                var7_11 = var1_1.getPackageName().equals(var9_9) != false ? var1_1.getResources() : var1_1.getPackageManager().getResourcesForApplication(var9_9);
                                var2_5 = var2_5.getPathSegments();
                                var5_13 = var2_5.size();
                                var4_14 = 0;
                                if (var5_13 == 2 && ((String)var2_5.get(0)).equals("drawable")) {
                                    var3_15 = var7_11.getIdentifier((String)var2_5.get(1), "drawable", var9_9);
                                } else {
                                    var3_15 = var4_14;
                                    if (var5_13 == 1) {
                                        var3_15 = var4_14;
                                        if (TextUtils.isDigitsOnly((CharSequence)((CharSequence)var2_5.get(0)))) {
                                            var3_15 = Integer.parseInt((String)var2_5.get(0));
                                        }
                                    }
                                }
                                break block17;
                            }
                            var6_16 = var9_9.startsWith("file:///android_asset/");
                            var7_12 = null;
                            if (!var6_16) break block18;
                            var2_5 = var9_9.substring("file:///android_asset/".length());
                            var1_1 = BitmapFactory.decodeStream((InputStream)var1_1.getAssets().open((String)var2_5), null, (BitmapFactory.Options)var8_10);
                            break block15;
                        }
                        if (!var9_9.startsWith("file://")) break block19;
                        var1_1 = BitmapFactory.decodeFile((String)var9_9.substring("file://".length()), (BitmapFactory.Options)var8_10);
                        break block15;
                    }
                    var2_5 = var1_1.getContentResolver().openInputStream((Uri)var2_5);
                    try {
                        var1_1 = BitmapFactory.decodeStream((InputStream)var2_5, null, (BitmapFactory.Options)var8_10);
                        ** if (var2_5 == null) goto lbl-1000
                    }
                    catch (Throwable var1_2) {}
lbl-1000: // 1 sources:
                    {
                        var2_5.close();
                    }
lbl-1000: // 2 sources:
                    {
                        break block15;
                    }
                    break block20;
                    catch (Throwable var1_3) {
                        var2_5 = var7_12;
                    }
                }
                if (var2_5 == null) throw var1_4;
                try {
                    var2_5.close();
                }
                catch (Exception var2_8) {
                    throw var1_4;
                }
                throw var1_4;
                catch (NumberFormatException var2_6) {
                    var3_15 = var4_14;
                }
            }
            var1_1 = BitmapFactory.decodeResource((Resources)var1_1.getResources(), (int)var3_15, (BitmapFactory.Options)var8_10);
            break block15;
            catch (Exception var2_7) {}
        }
        if (var1_1 == null) throw new RuntimeException("Skia image region decoder returned null bitmap - image format may not be supported");
        return var1_1;
    }
}

