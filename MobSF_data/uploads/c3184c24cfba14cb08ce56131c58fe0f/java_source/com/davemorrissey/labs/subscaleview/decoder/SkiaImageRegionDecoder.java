/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.content.ContentResolver
 *  android.content.Context
 *  android.content.pm.PackageManager
 *  android.content.res.AssetManager
 *  android.content.res.Resources
 *  android.graphics.Bitmap
 *  android.graphics.Bitmap$Config
 *  android.graphics.BitmapFactory
 *  android.graphics.BitmapFactory$Options
 *  android.graphics.BitmapRegionDecoder
 *  android.graphics.Point
 *  android.graphics.Rect
 *  android.net.Uri
 *  android.os.Build
 *  android.os.Build$VERSION
 *  android.text.TextUtils
 */
package com.davemorrissey.labs.subscaleview.decoder;

import android.content.ContentResolver;
import android.content.Context;
import android.content.pm.PackageManager;
import android.content.res.AssetManager;
import android.content.res.Resources;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.BitmapRegionDecoder;
import android.graphics.Point;
import android.graphics.Rect;
import android.net.Uri;
import android.os.Build;
import android.support.annotation.Keep;
import android.text.TextUtils;
import com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView;
import com.davemorrissey.labs.subscaleview.decoder.ImageRegionDecoder;
import java.io.InputStream;
import java.util.List;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReadWriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock;

public class SkiaImageRegionDecoder
implements ImageRegionDecoder {
    private static final String ASSET_PREFIX = "file:///android_asset/";
    private static final String FILE_PREFIX = "file://";
    private static final String RESOURCE_PREFIX = "android.resource://";
    private final Bitmap.Config bitmapConfig;
    private BitmapRegionDecoder decoder;
    private final ReadWriteLock decoderLock = new ReentrantReadWriteLock(true);

    @Keep
    public SkiaImageRegionDecoder() {
        this(null);
    }

    /*
     * Enabled aggressive block sorting
     */
    public SkiaImageRegionDecoder(Bitmap.Config config) {
        Bitmap.Config config2 = SubsamplingScaleImageView.getPreferredBitmapConfig();
        if (config == null) {
            if (config2 != null) {
                this.bitmapConfig = config2;
                return;
            }
            config = Bitmap.Config.RGB_565;
        }
        this.bitmapConfig = config;
    }

    private Lock getDecodeLock() {
        if (Build.VERSION.SDK_INT < 21) {
            return this.decoderLock.writeLock();
        }
        return this.decoderLock.readLock();
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    @Override
    public Bitmap decodeRegion(Rect rect, int n2) {
        block3 : {
            this.getDecodeLock().lock();
            try {
                if (this.decoder == null || this.decoder.isRecycled()) throw new IllegalStateException("Cannot decode region after decoder has been recycled");
                BitmapFactory.Options options = new BitmapFactory.Options();
                options.inSampleSize = n2;
                options.inPreferredConfig = this.bitmapConfig;
                if ((rect = this.decoder.decodeRegion(rect, options)) == null) break block3;
                this.getDecodeLock().unlock();
                return rect;
            }
            catch (Throwable throwable) {
                this.getDecodeLock().unlock();
                throw throwable;
            }
        }
        throw new RuntimeException("Skia image decoder returned null bitmap - image format may not be supported");
    }

    /*
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    @Override
    public Point init(Context object, Uri object2) {
        void var1_6;
        block18 : {
            void var1_4;
            block16 : {
                int n2;
                block11 : {
                    block14 : {
                        Object object3;
                        void var1_10;
                        block19 : {
                            block17 : {
                                String string2;
                                block15 : {
                                    block12 : {
                                        block13 : {
                                            string2 = object3.toString();
                                            if (!string2.startsWith(RESOURCE_PREFIX)) break block12;
                                            String string3 = object3.getAuthority();
                                            string2 = object.getPackageName().equals(string3) ? object.getResources() : object.getPackageManager().getResourcesForApplication(string3);
                                            n2 = (object3 = object3.getPathSegments()).size();
                                            if (n2 != 2 || !((String)object3.get(0)).equals("drawable")) break block13;
                                            n2 = string2.getIdentifier((String)object3.get(1), "drawable", string3);
                                            break block11;
                                        }
                                        if (n2 == 1 && TextUtils.isDigitsOnly((CharSequence)((CharSequence)object3.get(0)))) {
                                            n2 = Integer.parseInt((String)object3.get(0));
                                            break block11;
                                        }
                                        break block14;
                                    }
                                    if (!string2.startsWith(ASSET_PREFIX)) break block15;
                                    object3 = string2.substring(ASSET_PREFIX.length());
                                    InputStream inputStream = object.getAssets().open((String)object3, 1);
                                    break block16;
                                }
                                if (!string2.startsWith(FILE_PREFIX)) break block17;
                                BitmapRegionDecoder bitmapRegionDecoder = BitmapRegionDecoder.newInstance((String)string2.substring(FILE_PREFIX.length()), (boolean)false);
                                break block18;
                            }
                            object3 = object.getContentResolver().openInputStream((Uri)object3);
                            try {
                                this.decoder = BitmapRegionDecoder.newInstance((InputStream)object3, (boolean)false);
                                if (object3 == null) return new Point(this.decoder.getWidth(), this.decoder.getHeight());
                            }
                            catch (Throwable throwable) {}
                            try {
                                object3.close();
                            }
                            catch (Exception exception) {
                                return new Point(this.decoder.getWidth(), this.decoder.getHeight());
                            }
                            return new Point(this.decoder.getWidth(), this.decoder.getHeight());
                            break block19;
                            catch (Throwable throwable) {
                                object3 = null;
                            }
                        }
                        if (object3 == null) throw var1_10;
                        try {
                            object3.close();
                        }
                        catch (Exception exception) {
                            throw var1_10;
                        }
                        throw var1_10;
                        catch (NumberFormatException numberFormatException) {}
                    }
                    n2 = 0;
                }
                InputStream inputStream = object.getResources().openRawResource(n2);
            }
            BitmapRegionDecoder bitmapRegionDecoder = BitmapRegionDecoder.newInstance((InputStream)var1_4, (boolean)false);
        }
        this.decoder = var1_6;
        return new Point(this.decoder.getWidth(), this.decoder.getHeight());
    }

    @Override
    public boolean isReady() {
        synchronized (this) {
            boolean bl2;
            bl2 = this.decoder != null && !(bl2 = this.decoder.isRecycled());
            return bl2;
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @Override
    public void recycle() {
        synchronized (this) {
            this.decoderLock.writeLock().lock();
            try {
                this.decoder.recycle();
                this.decoder = null;
                return;
            }
            finally {
                this.decoderLock.writeLock().unlock();
            }
        }
    }
}

