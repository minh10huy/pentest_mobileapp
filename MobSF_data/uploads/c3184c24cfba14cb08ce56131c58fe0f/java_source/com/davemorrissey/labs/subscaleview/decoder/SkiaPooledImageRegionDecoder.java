/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.app.ActivityManager
 *  android.app.ActivityManager$MemoryInfo
 *  android.content.ContentResolver
 *  android.content.Context
 *  android.content.pm.PackageManager
 *  android.content.res.AssetFileDescriptor
 *  android.content.res.AssetManager
 *  android.content.res.Resources
 *  android.graphics.Bitmap
 *  android.graphics.Bitmap$Config
 *  android.graphics.BitmapFactory
 *  android.graphics.BitmapFactory$Options
 *  android.graphics.BitmapRegionDecoder
 *  android.graphics.Point
 *  android.graphics.Rect
 *  android.net.Uri
 *  android.os.Build
 *  android.os.Build$VERSION
 *  android.text.TextUtils
 *  android.util.Log
 */
package com.davemorrissey.labs.subscaleview.decoder;

import android.app.ActivityManager;
import android.content.ContentResolver;
import android.content.Context;
import android.content.pm.PackageManager;
import android.content.res.AssetFileDescriptor;
import android.content.res.AssetManager;
import android.content.res.Resources;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.BitmapRegionDecoder;
import android.graphics.Point;
import android.graphics.Rect;
import android.net.Uri;
import android.os.Build;
import android.support.annotation.Keep;
import android.text.TextUtils;
import android.util.Log;
import com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView;
import com.davemorrissey.labs.subscaleview.decoder.ImageRegionDecoder;
import java.io.File;
import java.io.FileFilter;
import java.io.InputStream;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.Semaphore;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReadWriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.regex.Pattern;

public class SkiaPooledImageRegionDecoder
implements ImageRegionDecoder {
    private static final String ASSET_PREFIX = "file:///android_asset/";
    private static final String FILE_PREFIX = "file://";
    private static final String RESOURCE_PREFIX = "android.resource://";
    private static final String TAG = "SkiaPooledImageRegionDecoder";
    private static boolean debug = false;
    private final Bitmap.Config bitmapConfig;
    private Context context;
    private final ReadWriteLock decoderLock = new ReentrantReadWriteLock(true);
    private DecoderPool decoderPool = new DecoderPool();
    private long fileLength = Long.MAX_VALUE;
    private final Point imageDimensions = new Point(0, 0);
    private final AtomicBoolean lazyInited = new AtomicBoolean(false);
    private Uri uri;

    @Keep
    public SkiaPooledImageRegionDecoder() {
        this(null);
    }

    /*
     * Enabled aggressive block sorting
     */
    public SkiaPooledImageRegionDecoder(Bitmap.Config config) {
        Bitmap.Config config2 = SubsamplingScaleImageView.getPreferredBitmapConfig();
        if (config == null) {
            if (config2 != null) {
                this.bitmapConfig = config2;
                return;
            }
            config = Bitmap.Config.RGB_565;
        }
        this.bitmapConfig = config;
    }

    private void debug(String string2) {
        if (debug) {
            Log.d((String)TAG, (String)string2);
        }
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    private int getNumCoresOldPhones() {
        try {
            return new File("/sys/devices/system/cpu/").listFiles(new 1CpuFilter()).length;
        }
        catch (Exception exception) {
            return 1;
        }
    }

    private int getNumberOfCores() {
        if (Build.VERSION.SDK_INT >= 17) {
            return Runtime.getRuntime().availableProcessors();
        }
        return this.getNumCoresOldPhones();
    }

    /*
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    private void initialiseDecoder() {
        long l2;
        Object object;
        block36 : {
            BitmapRegionDecoder bitmapRegionDecoder;
            long l3;
            Object object2;
            block29 : {
                long l4;
                block35 : {
                    block28 : {
                        int n2;
                        block27 : {
                            block34 : {
                                void var7_11;
                                block30 : {
                                    block32 : {
                                        List list;
                                        block33 : {
                                            object2 = this.uri.toString();
                                            boolean bl2 = object2.startsWith(RESOURCE_PREFIX);
                                            l2 = Long.MAX_VALUE;
                                            if (!bl2) break block32;
                                            object2 = this.uri.getAuthority();
                                            object = this.context.getPackageName().equals(object2) ? this.context.getResources() : this.context.getPackageManager().getResourcesForApplication((String)object2);
                                            list = this.uri.getPathSegments();
                                            n2 = list.size();
                                            if (n2 != 2 || !((String)list.get(0)).equals("drawable")) break block33;
                                            n2 = object.getIdentifier((String)list.get(1), "drawable", (String)object2);
                                            break block27;
                                        }
                                        if (n2 == 1 && TextUtils.isDigitsOnly((CharSequence)((CharSequence)list.get(0)))) {
                                            n2 = Integer.parseInt((String)list.get(0));
                                            break block27;
                                        }
                                        break block34;
                                    }
                                    if (object2.startsWith(ASSET_PREFIX)) {
                                        long l5;
                                        object = object2.substring(ASSET_PREFIX.length());
                                        l2 = l5 = this.context.getAssets().openFd((String)object).getLength();
                                        break block28;
                                    }
                                    if (object2.startsWith(FILE_PREFIX)) {
                                        object = BitmapRegionDecoder.newInstance((String)object2.substring(FILE_PREFIX.length()), (boolean)false);
                                        object2 = new File((String)object2);
                                        l4 = l2;
                                        if (object2.exists()) {
                                            l4 = object2.length();
                                        }
                                    }
                                    object = this.context.getContentResolver();
                                    object2 = object.openInputStream(this.uri);
                                    try {
                                        bitmapRegionDecoder = BitmapRegionDecoder.newInstance((InputStream)object2, (boolean)false);
                                        object = object.openAssetFileDescriptor(this.uri, "r");
                                        l3 = l2;
                                        if (object != null) {
                                            l3 = object.getLength();
                                        }
                                        break block29;
                                    }
                                    catch (Throwable throwable) {
                                        break block30;
                                    }
                                    catch (Throwable throwable) {
                                        object2 = null;
                                    }
                                }
                                if (object2 == null) throw var7_11;
                                try {
                                    object2.close();
                                }
                                catch (Exception exception) {
                                    throw var7_11;
                                }
                                throw var7_11;
                                catch (NumberFormatException numberFormatException) {}
                            }
                            n2 = 0;
                        }
                        try {
                            long l6;
                            l2 = l6 = this.context.getResources().openRawResourceFd(n2).getLength();
                        }
                        catch (Exception exception) {}
                        object = this.context.getResources().openRawResource(n2);
                        break block35;
                        catch (Exception exception) {}
                    }
                    object = this.context.getAssets().open((String)object, 1);
                }
                object = BitmapRegionDecoder.newInstance((InputStream)object, (boolean)false);
                break block36;
                catch (Exception exception) {
                    l4 = l2;
                }
                l2 = l4;
                break block36;
                catch (Exception exception) {
                    l3 = l2;
                }
            }
            object = bitmapRegionDecoder;
            l2 = l3;
            if (object2 != null) {
                try {
                    object2.close();
                    l2 = l3;
                    object = bitmapRegionDecoder;
                }
                catch (Exception exception) {
                    object = bitmapRegionDecoder;
                    l2 = l3;
                }
            }
        }
        this.fileLength = l2;
        this.imageDimensions.set(object.getWidth(), object.getHeight());
        this.decoderLock.writeLock().lock();
        try {
            if (this.decoderPool == null) return;
            this.decoderPool.add((BitmapRegionDecoder)object);
            return;
        }
        finally {
            this.decoderLock.writeLock().unlock();
        }
    }

    private boolean isLowMemory() {
        ActivityManager activityManager = (ActivityManager)this.context.getSystemService("activity");
        if (activityManager != null) {
            ActivityManager.MemoryInfo memoryInfo = new ActivityManager.MemoryInfo();
            activityManager.getMemoryInfo(memoryInfo);
            return memoryInfo.lowMemory;
        }
        return true;
    }

    private void lazyInit() {
        if (this.lazyInited.compareAndSet(false, true) && this.fileLength < Long.MAX_VALUE) {
            this.debug("Starting lazy init of additional decoders");
            new Thread(){

                @Override
                public void run() {
                    while (SkiaPooledImageRegionDecoder.this.decoderPool != null && SkiaPooledImageRegionDecoder.this.allowAdditionalDecoder(SkiaPooledImageRegionDecoder.this.decoderPool.size(), SkiaPooledImageRegionDecoder.this.fileLength)) {
                        Object object;
                        try {
                            if (SkiaPooledImageRegionDecoder.this.decoderPool == null) continue;
                            long l2 = System.currentTimeMillis();
                            SkiaPooledImageRegionDecoder.this.debug("Starting decoder");
                            SkiaPooledImageRegionDecoder.this.initialiseDecoder();
                            long l3 = System.currentTimeMillis();
                            SkiaPooledImageRegionDecoder skiaPooledImageRegionDecoder = SkiaPooledImageRegionDecoder.this;
                            object = new StringBuilder();
                            object.append("Started decoder, took ");
                            object.append(l3 - l2);
                            object.append("ms");
                            skiaPooledImageRegionDecoder.debug(object.toString());
                        }
                        catch (Exception exception) {
                            object = SkiaPooledImageRegionDecoder.this;
                            StringBuilder stringBuilder = new StringBuilder();
                            stringBuilder.append("Failed to start decoder: ");
                            stringBuilder.append(exception.getMessage());
                            ((SkiaPooledImageRegionDecoder)object).debug(stringBuilder.toString());
                        }
                    }
                }
            }.start();
        }
    }

    @Keep
    public static void setDebug(boolean bl2) {
        debug = bl2;
    }

    /*
     * Enabled aggressive block sorting
     */
    protected boolean allowAdditionalDecoder(int n2, long l2) {
        CharSequence charSequence;
        if (n2 >= 4) {
            charSequence = "No additional decoders allowed, reached hard limit (4)";
        } else if ((l2 = (long)n2 * l2) > 20971520L) {
            charSequence = "No additional encoders allowed, reached hard memory limit (20Mb)";
        } else if (n2 >= this.getNumberOfCores()) {
            charSequence = new StringBuilder();
            charSequence.append("No additional encoders allowed, limited by CPU cores (");
            charSequence.append(this.getNumberOfCores());
            charSequence.append(")");
            charSequence = charSequence.toString();
        } else {
            if (!this.isLowMemory()) {
                StringBuilder stringBuilder = new StringBuilder();
                stringBuilder.append("Additional decoder allowed, current count is ");
                stringBuilder.append(n2);
                stringBuilder.append(", estimated native memory ");
                stringBuilder.append(l2 / 0x100000L);
                stringBuilder.append("Mb");
                this.debug(stringBuilder.toString());
                return true;
            }
            charSequence = "No additional encoders allowed, memory is low";
        }
        this.debug((String)charSequence);
        return false;
    }

    /*
     * Loose catch block
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    @Override
    public Bitmap decodeRegion(Rect rect, int n2) {
        StringBuilder stringBuilder;
        block10 : {
            block11 : {
                stringBuilder = new StringBuilder();
                stringBuilder.append("Decode region ");
                stringBuilder.append((Object)rect);
                stringBuilder.append(" on thread ");
                stringBuilder.append(Thread.currentThread().getName());
                this.debug(stringBuilder.toString());
                if (rect.width() < this.imageDimensions.x || rect.height() < this.imageDimensions.y) {
                    this.lazyInit();
                }
                this.decoderLock.readLock().lock();
                if (this.decoderPool == null) throw new IllegalStateException("Cannot decode region after decoder has been recycled");
                stringBuilder = this.decoderPool.acquire();
                if (stringBuilder == null) break block10;
                {
                    catch (Throwable throwable) {
                        throw throwable;
                    }
                }
                if (stringBuilder.isRecycled()) break block10;
                BitmapFactory.Options options = new BitmapFactory.Options();
                options.inSampleSize = n2;
                options.inPreferredConfig = this.bitmapConfig;
                if ((rect = stringBuilder.decodeRegion(rect, options)) == null) break block11;
                if (stringBuilder == null) return rect;
                this.decoderPool.release((BitmapRegionDecoder)stringBuilder);
                return rect;
            }
            try {
                throw new RuntimeException("Skia image decoder returned null bitmap - image format may not be supported");
            }
            catch (Throwable throwable) {
                if (stringBuilder == null) throw throwable;
                this.decoderPool.release((BitmapRegionDecoder)stringBuilder);
                throw throwable;
            }
        }
        if (stringBuilder == null) throw new IllegalStateException("Cannot decode region after decoder has been recycled");
        try {
            this.decoderPool.release((BitmapRegionDecoder)stringBuilder);
            throw new IllegalStateException("Cannot decode region after decoder has been recycled");
        }
        finally {
            this.decoderLock.readLock().unlock();
        }
    }

    @Override
    public Point init(Context context, Uri uri) {
        this.context = context;
        this.uri = uri;
        this.initialiseDecoder();
        return this.imageDimensions;
    }

    @Override
    public boolean isReady() {
        synchronized (this) {
            boolean bl2;
            bl2 = this.decoderPool != null && !(bl2 = this.decoderPool.isEmpty());
            return bl2;
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @Override
    public void recycle() {
        synchronized (this) {
            this.decoderLock.writeLock().lock();
            try {
                if (this.decoderPool != null) {
                    this.decoderPool.recycle();
                    this.decoderPool = null;
                    this.context = null;
                    this.uri = null;
                }
                return;
            }
            finally {
                this.decoderLock.writeLock().unlock();
            }
        }
    }

    class 1CpuFilter
    implements FileFilter {
        1CpuFilter() {
        }

        @Override
        public boolean accept(File file) {
            return Pattern.matches("cpu[0-9]+", file.getName());
        }
    }

    private static class DecoderPool {
        private final Semaphore available = new Semaphore(0, true);
        private final Map<BitmapRegionDecoder, Boolean> decoders = new ConcurrentHashMap<BitmapRegionDecoder, Boolean>();

        private DecoderPool() {
        }

        private BitmapRegionDecoder acquire() {
            this.available.acquireUninterruptibly();
            return this.getNextAvailable();
        }

        private void add(BitmapRegionDecoder bitmapRegionDecoder) {
            synchronized (this) {
                this.decoders.put(bitmapRegionDecoder, false);
                this.available.release();
                return;
            }
        }

        private BitmapRegionDecoder getNextAvailable() {
            synchronized (this) {
                BitmapRegionDecoder bitmapRegionDecoder = this.decoders.entrySet().iterator();
                while (bitmapRegionDecoder.hasNext()) {
                    Map.Entry<BitmapRegionDecoder, Boolean> entry = bitmapRegionDecoder.next();
                    if (entry.getValue().booleanValue()) continue;
                    entry.setValue(true);
                    bitmapRegionDecoder = entry.getKey();
                    return bitmapRegionDecoder;
                }
                return null;
            }
        }

        private boolean isEmpty() {
            synchronized (this) {
                boolean bl2 = this.decoders.isEmpty();
                return bl2;
            }
        }

        private boolean markAsUnused(BitmapRegionDecoder bitmapRegionDecoder) {
            synchronized (this) {
                for (Map.Entry<BitmapRegionDecoder, Boolean> entry : this.decoders.entrySet()) {
                    if (bitmapRegionDecoder != entry.getKey()) continue;
                    if (entry.getValue().booleanValue()) {
                        entry.setValue(false);
                        return true;
                    }
                    return false;
                }
                return false;
            }
        }

        private void recycle() {
            synchronized (this) {
                while (!this.decoders.isEmpty()) {
                    BitmapRegionDecoder bitmapRegionDecoder = this.acquire();
                    bitmapRegionDecoder.recycle();
                    this.decoders.remove((Object)bitmapRegionDecoder);
                }
                return;
            }
        }

        private void release(BitmapRegionDecoder bitmapRegionDecoder) {
            if (this.markAsUnused(bitmapRegionDecoder)) {
                this.available.release();
            }
        }

        private int size() {
            synchronized (this) {
                int n2 = this.decoders.size();
                return n2;
            }
        }
    }

}

