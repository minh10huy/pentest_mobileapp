/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.content.ContentResolver
 *  android.content.Context
 *  android.content.res.Resources
 *  android.content.res.TypedArray
 *  android.database.Cursor
 *  android.graphics.Bitmap
 *  android.graphics.Bitmap$Config
 *  android.graphics.Canvas
 *  android.graphics.Color
 *  android.graphics.Matrix
 *  android.graphics.Paint
 *  android.graphics.Paint$Style
 *  android.graphics.Point
 *  android.graphics.PointF
 *  android.graphics.Rect
 *  android.graphics.RectF
 *  android.net.Uri
 *  android.os.AsyncTask
 *  android.os.Handler
 *  android.os.Handler$Callback
 *  android.os.Message
 *  android.util.AttributeSet
 *  android.util.DisplayMetrics
 *  android.util.Log
 *  android.util.TypedValue
 *  android.view.GestureDetector
 *  android.view.GestureDetector$OnGestureListener
 *  android.view.GestureDetector$SimpleOnGestureListener
 *  android.view.MotionEvent
 *  android.view.View
 *  android.view.View$MeasureSpec
 *  android.view.View$OnLongClickListener
 *  android.view.ViewParent
 */
package com.davemorrissey.labs.subscaleview;

import android.content.ContentResolver;
import android.content.Context;
import android.content.res.Resources;
import android.content.res.TypedArray;
import android.database.Cursor;
import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Matrix;
import android.graphics.Paint;
import android.graphics.Point;
import android.graphics.PointF;
import android.graphics.Rect;
import android.graphics.RectF;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Handler;
import android.os.Message;
import android.support.d.a;
import android.util.AttributeSet;
import android.util.DisplayMetrics;
import android.util.Log;
import android.util.TypedValue;
import android.view.GestureDetector;
import android.view.MotionEvent;
import android.view.View;
import android.view.ViewParent;
import com.davemorrissey.labs.subscaleview.ImageSource;
import com.davemorrissey.labs.subscaleview.ImageViewState;
import com.davemorrissey.labs.subscaleview.R;
import com.davemorrissey.labs.subscaleview.decoder.CompatDecoderFactory;
import com.davemorrissey.labs.subscaleview.decoder.DecoderFactory;
import com.davemorrissey.labs.subscaleview.decoder.ImageDecoder;
import com.davemorrissey.labs.subscaleview.decoder.ImageRegionDecoder;
import com.davemorrissey.labs.subscaleview.decoder.SkiaImageDecoder;
import com.davemorrissey.labs.subscaleview.decoder.SkiaImageRegionDecoder;
import java.io.Serializable;
import java.lang.ref.WeakReference;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.Executor;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReadWriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock;

public class SubsamplingScaleImageView
extends View {
    public static final int EASE_IN_OUT_QUAD = 2;
    public static final int EASE_OUT_QUAD = 1;
    private static final int MESSAGE_LONG_CLICK = 1;
    public static final int ORIENTATION_0 = 0;
    public static final int ORIENTATION_180 = 180;
    public static final int ORIENTATION_270 = 270;
    public static final int ORIENTATION_90 = 90;
    public static final int ORIENTATION_USE_EXIF = -1;
    public static final int ORIGIN_ANIM = 1;
    public static final int ORIGIN_DOUBLE_TAP_ZOOM = 4;
    public static final int ORIGIN_FLING = 3;
    public static final int ORIGIN_TOUCH = 2;
    public static final int PAN_LIMIT_CENTER = 3;
    public static final int PAN_LIMIT_INSIDE = 1;
    public static final int PAN_LIMIT_OUTSIDE = 2;
    public static final int SCALE_TYPE_CENTER_CROP = 2;
    public static final int SCALE_TYPE_CENTER_INSIDE = 1;
    public static final int SCALE_TYPE_CUSTOM = 3;
    public static final int SCALE_TYPE_START = 4;
    private static final String TAG = "SubsamplingScaleImageView";
    public static final int TILE_SIZE_AUTO = Integer.MAX_VALUE;
    private static final List<Integer> VALID_EASING_STYLES;
    private static final List<Integer> VALID_ORIENTATIONS;
    private static final List<Integer> VALID_PAN_LIMITS;
    private static final List<Integer> VALID_SCALE_TYPES;
    private static final List<Integer> VALID_ZOOM_STYLES;
    public static final int ZOOM_FOCUS_CENTER = 2;
    public static final int ZOOM_FOCUS_CENTER_IMMEDIATE = 3;
    public static final int ZOOM_FOCUS_FIXED = 1;
    private static Bitmap.Config preferredBitmapConfig;
    private Anim anim;
    private Bitmap bitmap;
    private DecoderFactory<? extends ImageDecoder> bitmapDecoderFactory = new CompatDecoderFactory<SkiaImageDecoder>(SkiaImageDecoder.class);
    private boolean bitmapIsCached;
    private boolean bitmapIsPreview;
    private Paint bitmapPaint;
    private boolean debug;
    private Paint debugLinePaint;
    private Paint debugTextPaint;
    private ImageRegionDecoder decoder;
    private final ReadWriteLock decoderLock = new ReentrantReadWriteLock(true);
    private final float density;
    private GestureDetector detector;
    private int doubleTapZoomDuration = 500;
    private float doubleTapZoomScale = 1.0f;
    private int doubleTapZoomStyle = 1;
    private final float[] dstArray = new float[8];
    private boolean eagerLoadingEnabled = true;
    private Executor executor = AsyncTask.THREAD_POOL_EXECUTOR;
    private int fullImageSampleSize;
    private final Handler handler;
    private boolean imageLoadedSent;
    private boolean isPanning;
    private boolean isQuickScaling;
    private boolean isZooming;
    private Matrix matrix;
    private float maxScale = 2.0f;
    private int maxTileHeight = Integer.MAX_VALUE;
    private int maxTileWidth = Integer.MAX_VALUE;
    private int maxTouchCount;
    private float minScale = this.minScale();
    private int minimumScaleType = 1;
    private int minimumTileDpi = -1;
    private OnImageEventListener onImageEventListener;
    private View.OnLongClickListener onLongClickListener;
    private OnStateChangedListener onStateChangedListener;
    private int orientation = 0;
    private Rect pRegion;
    private boolean panEnabled = true;
    private int panLimit = 1;
    private Float pendingScale;
    private boolean quickScaleEnabled = true;
    private float quickScaleLastDistance;
    private boolean quickScaleMoved;
    private PointF quickScaleSCenter;
    private final float quickScaleThreshold;
    private PointF quickScaleVLastPoint;
    private PointF quickScaleVStart;
    private boolean readySent;
    private DecoderFactory<? extends ImageRegionDecoder> regionDecoderFactory = new CompatDecoderFactory<SkiaImageRegionDecoder>(SkiaImageRegionDecoder.class);
    private int sHeight;
    private int sOrientation;
    private PointF sPendingCenter;
    private RectF sRect;
    private Rect sRegion;
    private PointF sRequestedCenter;
    private int sWidth;
    private ScaleAndTranslate satTemp;
    private float scale;
    private float scaleStart;
    private GestureDetector singleDetector;
    private final float[] srcArray = new float[8];
    private Paint tileBgPaint;
    private Map<Integer, List<Tile>> tileMap;
    private Uri uri;
    private PointF vCenterStart;
    private float vDistStart;
    private PointF vTranslate;
    private PointF vTranslateBefore;
    private PointF vTranslateStart;
    private boolean zoomEnabled = true;

    static {
        VALID_ORIENTATIONS = Arrays.asList(0, 90, 180, 270, -1);
        VALID_ZOOM_STYLES = Arrays.asList(1, 2, 3);
        VALID_EASING_STYLES = Arrays.asList(2, 1);
        VALID_PAN_LIMITS = Arrays.asList(1, 2, 3);
        VALID_SCALE_TYPES = Arrays.asList(2, 1, 3, 4);
    }

    public SubsamplingScaleImageView(Context context) {
        this(context, null);
    }

    public SubsamplingScaleImageView(Context context, AttributeSet attributeSet) {
        super(context, attributeSet);
        this.density = this.getResources().getDisplayMetrics().density;
        this.setMinimumDpi(160);
        this.setDoubleTapZoomDpi(160);
        this.setMinimumTileDpi(320);
        this.setGestureDetector(context);
        this.handler = new Handler(new Handler.Callback(){

            public boolean handleMessage(Message message) {
                if (message.what == 1 && SubsamplingScaleImageView.this.onLongClickListener != null) {
                    SubsamplingScaleImageView.this.maxTouchCount = 0;
                    SubsamplingScaleImageView.super.setOnLongClickListener(SubsamplingScaleImageView.this.onLongClickListener);
                    SubsamplingScaleImageView.this.performLongClick();
                    SubsamplingScaleImageView.super.setOnLongClickListener(null);
                }
                return true;
            }
        });
        if (attributeSet != null) {
            int n2;
            String string2;
            attributeSet = this.getContext().obtainStyledAttributes(attributeSet, R.styleable.SubsamplingScaleImageView);
            if (attributeSet.hasValue(R.styleable.SubsamplingScaleImageView_assetName) && (string2 = attributeSet.getString(R.styleable.SubsamplingScaleImageView_assetName)) != null && string2.length() > 0) {
                this.setImage(ImageSource.asset(string2).tilingEnabled());
            }
            if (attributeSet.hasValue(R.styleable.SubsamplingScaleImageView_src) && (n2 = attributeSet.getResourceId(R.styleable.SubsamplingScaleImageView_src, 0)) > 0) {
                this.setImage(ImageSource.resource(n2).tilingEnabled());
            }
            if (attributeSet.hasValue(R.styleable.SubsamplingScaleImageView_panEnabled)) {
                this.setPanEnabled(attributeSet.getBoolean(R.styleable.SubsamplingScaleImageView_panEnabled, true));
            }
            if (attributeSet.hasValue(R.styleable.SubsamplingScaleImageView_zoomEnabled)) {
                this.setZoomEnabled(attributeSet.getBoolean(R.styleable.SubsamplingScaleImageView_zoomEnabled, true));
            }
            if (attributeSet.hasValue(R.styleable.SubsamplingScaleImageView_quickScaleEnabled)) {
                this.setQuickScaleEnabled(attributeSet.getBoolean(R.styleable.SubsamplingScaleImageView_quickScaleEnabled, true));
            }
            if (attributeSet.hasValue(R.styleable.SubsamplingScaleImageView_tileBackgroundColor)) {
                this.setTileBackgroundColor(attributeSet.getColor(R.styleable.SubsamplingScaleImageView_tileBackgroundColor, Color.argb((int)0, (int)0, (int)0, (int)0)));
            }
            attributeSet.recycle();
        }
        this.quickScaleThreshold = TypedValue.applyDimension((int)1, (float)20.0f, (DisplayMetrics)context.getResources().getDisplayMetrics());
    }

    static /* synthetic */ PointF access$2200(SubsamplingScaleImageView subsamplingScaleImageView) {
        return subsamplingScaleImageView.quickScaleSCenter;
    }

    static /* synthetic */ ReadWriteLock access$5700(SubsamplingScaleImageView subsamplingScaleImageView) {
        return subsamplingScaleImageView.decoderLock;
    }

    static /* synthetic */ void access$5800(SubsamplingScaleImageView subsamplingScaleImageView, Rect rect, Rect rect2) {
        subsamplingScaleImageView.fileSRect(rect, rect2);
    }

    private int calculateInSampleSize(float f2) {
        float f3 = f2;
        if (this.minimumTileDpi > 0) {
            DisplayMetrics displayMetrics = this.getResources().getDisplayMetrics();
            f3 = (displayMetrics.xdpi + displayMetrics.ydpi) / 2.0f;
            f3 = f2 * ((float)this.minimumTileDpi / f3);
        }
        int n2 = (int)((float)this.sWidth() * f3);
        int n3 = (int)((float)this.sHeight() * f3);
        if (n2 != 0 && n3 != 0) {
            int n4 = this.sHeight();
            int n5 = 1;
            if (n4 <= n3 && this.sWidth() <= n2) {
                n3 = 1;
            } else {
                n3 = Math.round((float)this.sHeight() / (float)n3);
                if (n3 >= (n2 = Math.round((float)this.sWidth() / (float)n2))) {
                    n3 = n2;
                }
            }
            while ((n2 = n5 * 2) < n3) {
                n5 = n2;
            }
            return n5;
        }
        return 32;
    }

    private boolean checkImageLoaded() {
        boolean bl2 = this.isBaseLayerReady();
        if (!this.imageLoadedSent && bl2) {
            this.preDraw();
            this.imageLoadedSent = true;
            this.onImageLoaded();
            if (this.onImageEventListener != null) {
                this.onImageEventListener.onImageLoaded();
            }
        }
        return bl2;
    }

    private boolean checkReady() {
        boolean bl2 = this.getWidth() > 0 && this.getHeight() > 0 && this.sWidth > 0 && this.sHeight > 0 && (this.bitmap != null || this.isBaseLayerReady());
        if (!this.readySent && bl2) {
            this.preDraw();
            this.readySent = true;
            this.onReady();
            if (this.onImageEventListener != null) {
                this.onImageEventListener.onReady();
            }
        }
        return bl2;
    }

    private void createPaints() {
        if (this.bitmapPaint == null) {
            this.bitmapPaint = new Paint();
            this.bitmapPaint.setAntiAlias(true);
            this.bitmapPaint.setFilterBitmap(true);
            this.bitmapPaint.setDither(true);
        }
        if ((this.debugTextPaint == null || this.debugLinePaint == null) && this.debug) {
            this.debugTextPaint = new Paint();
            this.debugTextPaint.setTextSize((float)this.px(12));
            this.debugTextPaint.setColor(-65281);
            this.debugTextPaint.setStyle(Paint.Style.FILL);
            this.debugLinePaint = new Paint();
            this.debugLinePaint.setColor(-65281);
            this.debugLinePaint.setStyle(Paint.Style.STROKE);
            this.debugLinePaint.setStrokeWidth((float)this.px(1));
        }
    }

    private /* varargs */ void debug(String string2, Object ... arrobject) {
        if (this.debug) {
            Log.d((String)TAG, (String)String.format(string2, arrobject));
        }
    }

    private float distance(float f2, float f3, float f4, float f5) {
        f3 = f4 - f5;
        return (float)Math.sqrt(f2 * (f2 -= f3) + f3 * f3);
    }

    /*
     * Enabled aggressive block sorting
     */
    private void doubleTapZoom(PointF object, PointF pointF) {
        block5 : {
            block7 : {
                float f2;
                block6 : {
                    boolean bl2;
                    block4 : {
                        if (!this.panEnabled) {
                            if (this.sRequestedCenter != null) {
                                object.x = this.sRequestedCenter.x;
                                f2 = this.sRequestedCenter.y;
                            } else {
                                object.x = this.sWidth() / 2;
                                f2 = this.sHeight() / 2;
                            }
                            object.y = f2;
                        }
                        bl2 = (double)this.scale <= (double)(f2 = Math.min(this.maxScale, this.doubleTapZoomScale)) * 0.9 || this.scale == this.minScale;
                        if (!bl2) {
                            f2 = this.minScale();
                        }
                        if (this.doubleTapZoomStyle != 3) break block4;
                        this.setScaleAndCenter(f2, (PointF)object);
                        break block5;
                    }
                    if (this.doubleTapZoomStyle == 2 || !bl2 || !this.panEnabled) break block6;
                    if (this.doubleTapZoomStyle != 1) break block5;
                    object = new AnimationBuilder(f2, (PointF)object, pointF).withInterruptible(false);
                    break block7;
                }
                object = new AnimationBuilder(f2, (PointF)object).withInterruptible(false);
            }
            object.withDuration(this.doubleTapZoomDuration).withOrigin(4).start();
        }
        this.invalidate();
    }

    private float ease(int n2, long l2, float f2, float f3, long l3) {
        switch (n2) {
            default: {
                StringBuilder stringBuilder = new StringBuilder();
                stringBuilder.append("Unexpected easing type: ");
                stringBuilder.append(n2);
                throw new IllegalStateException(stringBuilder.toString());
            }
            case 2: {
                return this.easeInOutQuad(l2, f2, f3, l3);
            }
            case 1: 
        }
        return this.easeOutQuad(l2, f2, f3, l3);
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    private float easeInOutQuad(long l2, float f2, float f3, long l3) {
        float f4;
        float f5 = (float)l2 / ((float)l3 / 2.0f);
        if (f5 < 1.0f) {
            f4 = f3 / 2.0f * f5;
            f3 = f5;
            do {
                return f4 * f3 + f2;
                break;
            } while (true);
        }
        f4 = (- f3) / 2.0f;
        f3 = f5 * ((f5 -= 1.0f) - 2.0f) - 1.0f;
        return f4 * f3 + f2;
    }

    private float easeOutQuad(long l2, float f2, float f3, long l3) {
        float f4 = (float)l2 / (float)l3;
        return (- f3) * f4 * (f4 - 2.0f) + f2;
    }

    private void execute(AsyncTask<Void, Void, ?> asyncTask) {
        asyncTask.executeOnExecutor(this.executor, (Object[])new Void[0]);
    }

    /*
     * Enabled aggressive block sorting
     */
    private void fileSRect(Rect rect, Rect rect2) {
        int n2;
        int n3;
        int n4;
        int n5;
        int n6;
        if (this.getRequiredRotation() == 0) {
            rect2.set(rect);
            return;
        }
        if (this.getRequiredRotation() == 90) {
            n5 = rect.top;
            n3 = this.sHeight - rect.right;
            n2 = rect.bottom;
            n6 = this.sHeight;
            n4 = rect.left;
        } else {
            if (this.getRequiredRotation() != 180) {
                rect2.set(this.sWidth - rect.bottom, rect.left, this.sWidth - rect.top, rect.right);
                return;
            }
            n5 = this.sWidth - rect.right;
            n3 = this.sHeight - rect.bottom;
            n2 = this.sWidth - rect.left;
            n6 = this.sHeight;
            n4 = rect.top;
        }
        rect2.set(n5, n3, n2, n6 - n4);
    }

    private void fitToBounds(boolean bl2) {
        boolean bl3;
        if (this.vTranslate == null) {
            bl3 = true;
            this.vTranslate = new PointF(0.0f, 0.0f);
        } else {
            bl3 = false;
        }
        if (this.satTemp == null) {
            this.satTemp = new ScaleAndTranslate(0.0f, new PointF(0.0f, 0.0f));
        }
        this.satTemp.scale = this.scale;
        this.satTemp.vTranslate.set(this.vTranslate);
        this.fitToBounds(bl2, this.satTemp);
        this.scale = this.satTemp.scale;
        this.vTranslate.set(this.satTemp.vTranslate);
        if (bl3 && this.minimumScaleType != 4) {
            this.vTranslate.set(this.vTranslateForSCenter(this.sWidth() / 2, this.sHeight() / 2, this.scale));
        }
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Lifted jumps to return sites
     */
    private void fitToBounds(boolean var1_1, ScaleAndTranslate var2_2) {
        block8 : {
            block7 : {
                var9_3 = var1_1;
                if (this.panLimit == 2) {
                    var9_3 = var1_1;
                    if (this.isReady()) {
                        var9_3 = false;
                    }
                }
                var10_4 = ScaleAndTranslate.access$4800(var2_2);
                var5_5 = this.limitedScale(ScaleAndTranslate.access$4700(var2_2));
                var7_6 = (float)this.sWidth() * var5_5;
                var6_7 = (float)this.sHeight() * var5_5;
                if (this.panLimit != 3 || !this.isReady()) break block7;
                var10_4.x = Math.max(var10_4.x, (float)(this.getWidth() / 2) - var7_6);
                var3_8 = var10_4.y;
                var8_9 = this.getHeight() / 2;
                ** GOTO lbl20
            }
            if (var9_3) {
                var10_4.x = Math.max(var10_4.x, (float)this.getWidth() - var7_6);
                var3_8 = var10_4.y;
                var8_9 = this.getHeight();
lbl20: // 2 sources:
                var4_10 = (float)var8_9 - var6_7;
            } else {
                var10_4.x = Math.max(var10_4.x, - var7_6);
                var3_8 = var10_4.y;
                var4_10 = - var6_7;
            }
            var10_4.y = Math.max(var3_8, var4_10);
            var8_9 = this.getPaddingLeft();
            var4_10 = 0.5f;
            var3_8 = var8_9 <= 0 && this.getPaddingRight() <= 0 ? 0.5f : (float)this.getPaddingLeft() / (float)(this.getPaddingLeft() + this.getPaddingRight());
            if (this.getPaddingTop() > 0 || this.getPaddingBottom() > 0) {
                var4_10 = (float)this.getPaddingTop() / (float)(this.getPaddingTop() + this.getPaddingBottom());
            }
            if (this.panLimit != 3 || !this.isReady()) break block8;
            var3_8 = Math.max(0, this.getWidth() / 2);
            var8_9 = Math.max(0, this.getHeight() / 2);
            ** GOTO lbl42
        }
        if (var9_3) {
            var3_8 = Math.max(0.0f, ((float)this.getWidth() - var7_6) * var3_8);
            var4_10 = Math.max(0.0f, ((float)this.getHeight() - var6_7) * var4_10);
        } else {
            var3_8 = Math.max(0, this.getWidth());
            var8_9 = Math.max(0, this.getHeight());
lbl42: // 2 sources:
            var4_10 = var8_9;
        }
        var10_4.x = Math.min(var10_4.x, var3_8);
        var10_4.y = Math.min(var10_4.y, var4_10);
        ScaleAndTranslate.access$4702(var2_2, var5_5);
    }

    /*
     * WARNING - Removed back jump from a try to a catch block - possible behaviour change.
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    private int getExifOrientation(Context object, String charSequence) {
        Object object2;
        block17 : {
            void var2_8;
            Object var5_9;
            block15 : {
                int n2;
                block16 : {
                    if (charSequence.startsWith("content")) {
                        int n3;
                        block14 : {
                            block13 : {
                                var5_9 = null;
                                object2 = null;
                                object = object.getContentResolver().query(Uri.parse((String)charSequence), new String[]{"orientation"}, null, null, null);
                                if (object == null) break block13;
                                try {
                                    if (!object.moveToFirst()) break block13;
                                    n3 = object.getInt(0);
                                    if (VALID_ORIENTATIONS.contains(n3) && n3 != -1) break block14;
                                    charSequence = TAG;
                                    object2 = new StringBuilder();
                                    object2.append("Unsupported orientation: ");
                                    object2.append(n3);
                                    Log.w((String)charSequence, (String)object2.toString());
                                }
                                catch (Throwable throwable) {
                                    break block15;
                                }
                            }
                            n3 = 0;
                        }
                        if (object == null) return n3;
                        object.close();
                        return n3;
                    }
                    if (!charSequence.startsWith("file:///")) return 0;
                    if (charSequence.startsWith("file:///android_asset/")) return 0;
                    try {
                        n2 = new a(charSequence.substring("file:///".length() - 1)).a("Orientation", 1);
                        if (n2 == 1) return 0;
                        if (n2 == 0) {
                            return 0;
                        }
                        break block16;
                    }
                    catch (Exception exception) {}
                    catch (Exception exception) {
                        break block17;
                    }
                    Log.w((String)TAG, (String)"Could not get EXIF orientation of image");
                    return 0;
                }
                if (n2 == 6) {
                    return 90;
                }
                if (n2 == 3) {
                    return 180;
                }
                if (n2 == 8) return 270;
                object = TAG;
                charSequence = new StringBuilder();
                charSequence.append("Unsupported EXIF orientation: ");
                charSequence.append(n2);
                Log.w((String)object, (String)charSequence.toString());
                return 0;
                catch (Throwable throwable) {
                    object = object2;
                }
            }
            if (object == null) throw var2_8;
            object.close();
            throw var2_8;
            catch (Exception exception) {
                object = var5_9;
            }
        }
        object2 = object;
        {
            Log.w((String)TAG, (String)"Could not get orientation of image from media store");
            if (object == null) return 0;
        }
        object.close();
        return 0;
    }

    private Point getMaxBitmapDimensions(Canvas canvas) {
        return new Point(Math.min(canvas.getMaximumBitmapWidth(), this.maxTileWidth), Math.min(canvas.getMaximumBitmapHeight(), this.maxTileHeight));
    }

    public static Bitmap.Config getPreferredBitmapConfig() {
        return preferredBitmapConfig;
    }

    private int getRequiredRotation() {
        if (this.orientation == -1) {
            return this.sOrientation;
        }
        return this.orientation;
    }

    private void initialiseBaseLayer(Point object) {
        synchronized (this) {
            this.debug("initialiseBaseLayer maxTileDimensions=%dx%d", object.x, object.y);
            this.satTemp = new ScaleAndTranslate(0.0f, new PointF(0.0f, 0.0f));
            this.fitToBounds(true, this.satTemp);
            this.fullImageSampleSize = this.calculateInSampleSize(this.satTemp.scale);
            if (this.fullImageSampleSize > 1) {
                this.fullImageSampleSize /= 2;
            }
            if (this.fullImageSampleSize == 1 && this.sRegion == null && this.sWidth() < object.x && this.sHeight() < object.y) {
                this.decoder.recycle();
                this.decoder = null;
                this.execute(new BitmapLoadTask(this, this.getContext(), this.bitmapDecoderFactory, this.uri, false));
            } else {
                this.initialiseTileMap((Point)object);
                for (Tile tile : this.tileMap.get(this.fullImageSampleSize)) {
                    this.execute(new TileLoadTask(this, this.decoder, tile));
                }
                this.refreshRequiredTiles(true);
            }
            return;
        }
    }

    private void initialiseTileMap(Point point) {
        this.debug("initialiseTileMap maxTileDimensions=%dx%d", point.x, point.y);
        this.tileMap = new LinkedHashMap<Integer, List<Tile>>();
        int n2 = this.fullImageSampleSize;
        int n3 = 1;
        int n4 = 1;
        block0 : do {
            int n5 = this.sWidth() / n3;
            int n6 = this.sHeight() / n4;
            int n7 = n5 / n2;
            int n8 = n6 / n2;
            do {
                block10 : {
                    int n9;
                    int n10;
                    int n11;
                    block11 : {
                        if (n7 + n3 + 1 > point.x) break block10;
                        n10 = n4;
                        n11 = n6;
                        n9 = n8;
                        if ((double)n7 <= (double)this.getWidth() * 1.25) break block11;
                        n10 = n4;
                        n11 = n6;
                        n9 = n8;
                        if (n2 < this.fullImageSampleSize) break block10;
                    }
                    do {
                        if (n9 + n10 + 1 <= point.y && ((double)n9 <= (double)this.getHeight() * 1.25 || n2 >= this.fullImageSampleSize)) {
                            ArrayList<Tile> arrayList = new ArrayList<Tile>(n3 * n10);
                            for (n4 = 0; n4 < n3; ++n4) {
                                for (n7 = 0; n7 < n10; ++n7) {
                                    Tile tile = new Tile();
                                    tile.sampleSize = n2;
                                    boolean bl2 = n2 == this.fullImageSampleSize;
                                    tile.visible = bl2;
                                    n9 = n4 == n3 - 1 ? this.sWidth() : (n4 + 1) * n5;
                                    n6 = n7 == n10 - 1 ? this.sHeight() : (n7 + 1) * n11;
                                    tile.sRect = new Rect(n4 * n5, n7 * n11, n9, n6);
                                    tile.vRect = new Rect(0, 0, 0, 0);
                                    tile.fileSRect = new Rect(tile.sRect);
                                    arrayList.add(tile);
                                }
                            }
                            this.tileMap.put(n2, arrayList);
                            if (n2 == 1) {
                                return;
                            }
                            n2 /= 2;
                            n4 = n10;
                            continue block0;
                        }
                        n11 = this.sHeight() / ++n10;
                        n9 = n11 / n2;
                    } while (true);
                }
                n5 = this.sWidth() / ++n3;
                n7 = n5 / n2;
            } while (true);
            break;
        } while (true);
    }

    private boolean isBaseLayerReady() {
        Bitmap bitmap = this.bitmap;
        boolean bl2 = true;
        if (bitmap != null && !this.bitmapIsPreview) {
            return true;
        }
        if (this.tileMap != null) {
            block0 : for (Map.Entry entry : this.tileMap.entrySet()) {
                if ((Integer)entry.getKey() != this.fullImageSampleSize) continue;
                Iterator iterator = ((List)entry.getValue()).iterator();
                boolean bl3 = bl2;
                do {
                    bl2 = bl3;
                    if (!iterator.hasNext()) continue block0;
                    Tile tile = (Tile)iterator.next();
                    if (!tile.loading && tile.bitmap != null) continue;
                    bl3 = false;
                } while (true);
            }
            return bl2;
        }
        return false;
    }

    private PointF limitedSCenter(float f2, float f3, float f4, PointF pointF) {
        PointF pointF2 = this.vTranslateForSCenter(f2, f3, f4);
        int n2 = this.getPaddingLeft();
        int n3 = (this.getWidth() - this.getPaddingRight() - this.getPaddingLeft()) / 2;
        int n4 = this.getPaddingTop();
        int n5 = (this.getHeight() - this.getPaddingBottom() - this.getPaddingTop()) / 2;
        pointF.set(((float)(n2 + n3) - pointF2.x) / f4, ((float)(n4 + n5) - pointF2.y) / f4);
        return pointF;
    }

    private float limitedScale(float f2) {
        f2 = Math.max(this.minScale(), f2);
        return Math.min(this.maxScale, f2);
    }

    private float minScale() {
        int n2 = this.getPaddingBottom() + this.getPaddingTop();
        int n3 = this.getPaddingLeft() + this.getPaddingRight();
        if (this.minimumScaleType != 2 && this.minimumScaleType != 4) {
            if (this.minimumScaleType == 3 && this.minScale > 0.0f) {
                return this.minScale;
            }
            return Math.min((float)(this.getWidth() - n3) / (float)this.sWidth(), (float)(this.getHeight() - n2) / (float)this.sHeight());
        }
        return Math.max((float)(this.getWidth() - n3) / (float)this.sWidth(), (float)(this.getHeight() - n2) / (float)this.sHeight());
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    private void onImageLoaded(Bitmap bitmap, int n2, boolean bl2) {
        synchronized (this) {
            boolean bl3;
            void var2_2;
            this.debug("onImageLoaded", new Object[0]);
            if (this.sWidth > 0 && this.sHeight > 0 && (this.sWidth != bitmap.getWidth() || this.sHeight != bitmap.getHeight())) {
                this.reset(false);
            }
            if (this.bitmap != null && !this.bitmapIsCached) {
                this.bitmap.recycle();
            }
            if (this.bitmap != null && this.bitmapIsCached && this.onImageEventListener != null) {
                this.onImageEventListener.onPreviewReleased();
            }
            this.bitmapIsPreview = false;
            this.bitmapIsCached = bl3;
            this.bitmap = bitmap;
            this.sWidth = bitmap.getWidth();
            this.sHeight = bitmap.getHeight();
            this.sOrientation = var2_2;
            bl3 = this.checkReady();
            boolean bl4 = this.checkImageLoaded();
            if (bl3 || bl4) {
                this.invalidate();
                this.requestLayout();
            }
            return;
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    private void onPreviewLoaded(Bitmap bitmap) {
        synchronized (this) {
            this.debug("onPreviewLoaded", new Object[0]);
            if (this.bitmap == null && !this.imageLoadedSent) {
                Bitmap bitmap2 = bitmap;
                if (this.pRegion != null) {
                    bitmap2 = Bitmap.createBitmap((Bitmap)bitmap, (int)this.pRegion.left, (int)this.pRegion.top, (int)this.pRegion.width(), (int)this.pRegion.height());
                }
                this.bitmap = bitmap2;
                this.bitmapIsPreview = true;
                if (this.checkReady()) {
                    this.invalidate();
                    this.requestLayout();
                }
                return;
            }
            bitmap.recycle();
            return;
        }
    }

    private void onTileLoaded() {
        synchronized (this) {
            this.debug("onTileLoaded", new Object[0]);
            this.checkReady();
            this.checkImageLoaded();
            if (this.isBaseLayerReady() && this.bitmap != null) {
                if (!this.bitmapIsCached) {
                    this.bitmap.recycle();
                }
                this.bitmap = null;
                if (this.onImageEventListener != null && this.bitmapIsCached) {
                    this.onImageEventListener.onPreviewReleased();
                }
                this.bitmapIsPreview = false;
                this.bitmapIsCached = false;
            }
            this.invalidate();
            return;
        }
    }

    private void onTilesInited(ImageRegionDecoder imageRegionDecoder, int n2, int n3, int n4) {
        synchronized (this) {
            this.debug("onTilesInited sWidth=%d, sHeight=%d, sOrientation=%d", n2, n3, this.orientation);
            if (this.sWidth > 0 && this.sHeight > 0 && (this.sWidth != n2 || this.sHeight != n3)) {
                this.reset(false);
                if (this.bitmap != null) {
                    if (!this.bitmapIsCached) {
                        this.bitmap.recycle();
                    }
                    this.bitmap = null;
                    if (this.onImageEventListener != null && this.bitmapIsCached) {
                        this.onImageEventListener.onPreviewReleased();
                    }
                    this.bitmapIsPreview = false;
                    this.bitmapIsCached = false;
                }
            }
            this.decoder = imageRegionDecoder;
            this.sWidth = n2;
            this.sHeight = n3;
            this.sOrientation = n4;
            this.checkReady();
            if (!this.checkImageLoaded() && this.maxTileWidth > 0 && this.maxTileWidth != Integer.MAX_VALUE && this.maxTileHeight > 0 && this.maxTileHeight != Integer.MAX_VALUE && this.getWidth() > 0 && this.getHeight() > 0) {
                this.initialiseBaseLayer(new Point(this.maxTileWidth, this.maxTileHeight));
            }
            this.invalidate();
            this.requestLayout();
            return;
        }
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Lifted jumps to return sites
     */
    private boolean onTouchEventInternal(MotionEvent var1_1) {
        var13_2 = var1_1.getPointerCount();
        switch (var1_1.getAction()) {
            default: {
                return false;
            }
            case 2: {
                if (this.maxTouchCount <= 0) return false;
                if (var13_2 < 2) ** GOTO lbl54
                var4_3 = this.distance(var1_1.getX(0), var1_1.getX(1), var1_1.getY(0), var1_1.getY(1));
                var5_8 = (var1_1.getX(0) + var1_1.getX(1)) / 2.0f;
                var6_12 = (var1_1.getY(0) + var1_1.getY(1)) / 2.0f;
                if (this.zoomEnabled == false) return false;
                if (this.distance(this.vCenterStart.x, var5_8, this.vCenterStart.y, var6_12) <= 5.0f && Math.abs(var4_3 - this.vDistStart) <= 5.0f) {
                    if (this.isPanning == false) return false;
                }
                this.isZooming = true;
                this.isPanning = true;
                var2_15 = this.scale;
                this.scale = Math.min(this.maxScale, var4_3 / this.vDistStart * this.scaleStart);
                if (this.scale <= this.minScale()) {
                    this.vDistStart = var4_3;
                    this.scaleStart = this.minScale();
                    this.vCenterStart.set(var5_8, var6_12);
                    this.vTranslateStart.set(this.vTranslate);
                } else if (this.panEnabled) {
                    var7_17 = this.vCenterStart.x;
                    var8_20 = this.vTranslateStart.x;
                    var9_23 = this.vCenterStart.y;
                    var10_25 = this.vTranslateStart.y;
                    var11_27 = this.scale / this.scaleStart;
                    var12_28 = this.scale / this.scaleStart;
                    this.vTranslate.x = var5_8 - (var7_17 - var8_20) * var11_27;
                    this.vTranslate.y = var6_12 - (var9_23 - var10_25) * var12_28;
                    if ((double)this.sHeight() * var2_15 < (double)this.getHeight() && this.scale * (float)this.sHeight() >= (float)this.getHeight() || var2_15 * (double)this.sWidth() < (double)this.getWidth() && this.scale * (float)this.sWidth() >= (float)this.getWidth()) {
                        this.fitToBounds(true);
                        this.vCenterStart.set(var5_8, var6_12);
                        this.vTranslateStart.set(this.vTranslate);
                        this.scaleStart = this.scale;
                        this.vDistStart = var4_3;
                    }
                } else {
                    if (this.sRequestedCenter != null) {
                        this.vTranslate.x = (float)(this.getWidth() / 2) - this.scale * this.sRequestedCenter.x;
                        var1_1 = this.vTranslate;
                        var4_3 = this.getHeight() / 2;
                        var5_8 = this.scale;
                        var6_12 = this.sRequestedCenter.y;
                    } else {
                        this.vTranslate.x = (float)(this.getWidth() / 2) - this.scale * (float)(this.sWidth() / 2);
                        var1_1 = this.vTranslate;
                        var4_3 = this.getHeight() / 2;
                        var5_8 = this.scale;
                        var6_12 = this.sHeight() / 2;
                    }
                    var1_1.y = var4_3 - var5_8 * var6_12;
                }
                ** GOTO lbl108
lbl54: // 1 sources:
                if (!this.isQuickScaling) ** GOTO lbl110
                var7_18 = Math.abs(this.quickScaleVStart.y - var1_1.getY()) * 2.0f + this.quickScaleThreshold;
                if (this.quickScaleLastDistance == -1.0f) {
                    this.quickScaleLastDistance = var7_18;
                }
                var13_2 = var1_1.getY() > this.quickScaleVLastPoint.y ? 1 : 0;
                this.quickScaleVLastPoint.set(0.0f, var1_1.getY());
                var4_4 = var7_18 / this.quickScaleLastDistance;
                var5_9 = 1.0f;
                var6_13 = Math.abs(1.0f - var4_4) * 0.5f;
                if (var6_13 > 0.03f) ** GOTO lbl66
                var4_4 = var7_18;
                if (!this.quickScaleMoved) ** GOTO lbl107
lbl66: // 2 sources:
                this.quickScaleMoved = true;
                var4_4 = var5_9;
                if (this.quickScaleLastDistance > 0.0f) {
                    var4_4 = var13_2 != 0 ? var6_13 + 1.0f : 1.0f - var6_13;
                }
                var2_16 = this.scale;
                this.scale = Math.max(this.minScale(), Math.min(this.maxScale, this.scale * var4_4));
                if (!this.panEnabled) ** GOTO lbl93
                var4_4 = this.vCenterStart.x;
                var5_9 = this.vTranslateStart.x;
                var6_13 = this.vCenterStart.y;
                var8_21 = this.vTranslateStart.y;
                var9_24 = this.scale / this.scaleStart;
                var10_26 = this.scale / this.scaleStart;
                this.vTranslate.x = this.vCenterStart.x - (var4_4 - var5_9) * var9_24;
                this.vTranslate.y = this.vCenterStart.y - (var6_13 - var8_21) * var10_26;
                if ((double)this.sHeight() * var2_16 < (double)this.getHeight() && this.scale * (float)this.sHeight() >= (float)this.getHeight()) ** GOTO lbl86
                var4_4 = var7_18;
                if (var2_16 * (double)this.sWidth() >= (double)this.getWidth()) ** GOTO lbl107
                var4_4 = var7_18;
                if (this.scale * (float)this.sWidth() < (float)this.getWidth()) ** GOTO lbl107
lbl86: // 2 sources:
                this.fitToBounds(true);
                this.vCenterStart.set(this.sourceToViewCoord(this.quickScaleSCenter));
                this.vTranslateStart.set(this.vTranslate);
                this.scaleStart = this.scale;
                var4_4 = 0.0f;
                ** GOTO lbl107
lbl93: // 1 sources:
                if (this.sRequestedCenter != null) {
                    this.vTranslate.x = (float)(this.getWidth() / 2) - this.scale * this.sRequestedCenter.x;
                    var1_1 = this.vTranslate;
                    var4_4 = this.getHeight() / 2;
                    var5_9 = this.scale;
                    var6_13 = this.sRequestedCenter.y;
                } else {
                    this.vTranslate.x = (float)(this.getWidth() / 2) - this.scale * (float)(this.sWidth() / 2);
                    var1_1 = this.vTranslate;
                    var4_4 = this.getHeight() / 2;
                    var5_9 = this.scale;
                    var6_13 = this.sHeight() / 2;
                }
                var1_1.y = var4_4 - var5_9 * var6_13;
                var4_4 = var7_18;
lbl107: // 5 sources:
                this.quickScaleLastDistance = var4_4;
lbl108: // 4 sources:
                this.fitToBounds(true);
                ** GOTO lbl138
lbl110: // 1 sources:
                if (this.isZooming != false) return false;
                var4_5 = Math.abs(var1_1.getX() - this.vCenterStart.x);
                var5_10 = Math.abs(var1_1.getY() - this.vCenterStart.y);
                var6_14 = this.density * 5.0f;
                var18_29 = var4_5 FCMPL var6_14;
                if (var18_29 <= 0 && var5_10 <= var6_14) {
                    if (this.isPanning == false) return false;
                }
                this.vTranslate.x = this.vTranslateStart.x + (var1_1.getX() - this.vCenterStart.x);
                this.vTranslate.y = this.vTranslateStart.y + (var1_1.getY() - this.vCenterStart.y);
                var7_19 = this.vTranslate.x;
                var8_22 = this.vTranslate.y;
                this.fitToBounds(true);
                var13_2 = var7_19 != this.vTranslate.x ? 1 : 0;
                var14_30 = var8_22 != this.vTranslate.y;
                var15_31 = var13_2 != 0 && var4_5 > var5_10 && this.isPanning == false;
                var16_32 = var14_30 != false && var5_10 > var4_5 && this.isPanning == false;
                var17_33 = var8_22 == this.vTranslate.y && var5_10 > 3.0f * var6_14;
                if (!(var15_31 || var16_32 || var13_2 != 0 && var14_30 && !var17_33 && !this.isPanning)) {
                    this.isPanning = true;
                } else if (var18_29 > 0 || var5_10 > var6_14) {
                    this.maxTouchCount = 0;
                    this.handler.removeMessages(1);
                    this.requestDisallowInterceptTouchEvent(false);
                }
                if (!this.panEnabled) {
                    this.vTranslate.x = this.vTranslateStart.x;
                    this.vTranslate.y = this.vTranslateStart.y;
                    this.requestDisallowInterceptTouchEvent(false);
                }
lbl138: // 4 sources:
                this.refreshRequiredTiles(this.eagerLoadingEnabled);
                var13_2 = 1;
                if (var13_2 == 0) return false;
                this.handler.removeMessages(1);
                this.invalidate();
                return true;
            }
            case 1: 
            case 6: 
            case 262: {
                this.handler.removeMessages(1);
                if (this.isQuickScaling) {
                    this.isQuickScaling = false;
                    if (!this.quickScaleMoved) {
                        this.doubleTapZoom(this.quickScaleSCenter, this.vCenterStart);
                    }
                }
                if (this.maxTouchCount > 0 && (this.isZooming || this.isPanning)) {
                    if (this.isZooming && var13_2 == 2) {
                        this.isPanning = true;
                        this.vTranslateStart.set(this.vTranslate.x, this.vTranslate.y);
                        if (var1_1.getActionIndex() == 1) {
                            var19_34 = this.vCenterStart;
                            var4_6 = var1_1.getX(0);
                            var5_11 = var1_1.getY(0);
                            var1_1 = var19_34;
                        } else {
                            var19_35 = this.vCenterStart;
                            var4_6 = var1_1.getX(1);
                            var5_11 = var1_1.getY(1);
                            var1_1 = var19_35;
                        }
                        var1_1.set(var4_6, var5_11);
                    }
                    if (var13_2 < 3) {
                        this.isZooming = false;
                    }
                    if (var13_2 < 2) {
                        this.isPanning = false;
                        this.maxTouchCount = 0;
                    }
                    this.refreshRequiredTiles(true);
                    return true;
                }
                if (var13_2 != 1) return true;
                this.isZooming = false;
                this.isPanning = false;
                this.maxTouchCount = 0;
                return true;
            }
            case 0: 
            case 5: 
            case 261: 
        }
        this.anim = null;
        this.requestDisallowInterceptTouchEvent(true);
        this.maxTouchCount = Math.max(this.maxTouchCount, var13_2);
        if (var13_2 < 2) {
            if (this.isQuickScaling != false) return true;
            this.vTranslateStart.set(this.vTranslate.x, this.vTranslate.y);
            this.vCenterStart.set(var1_1.getX(), var1_1.getY());
            this.handler.sendEmptyMessageDelayed(1, 600L);
            return true;
        }
        if (this.zoomEnabled) {
            var4_7 = this.distance(var1_1.getX(0), var1_1.getX(1), var1_1.getY(0), var1_1.getY(1));
            this.scaleStart = this.scale;
            this.vDistStart = var4_7;
            this.vTranslateStart.set(this.vTranslate.x, this.vTranslate.y);
            this.vCenterStart.set((var1_1.getX(0) + var1_1.getX(1)) / 2.0f, (var1_1.getY(0) + var1_1.getY(1)) / 2.0f);
        } else {
            this.maxTouchCount = 0;
        }
        this.handler.removeMessages(1);
        return true;
    }

    private void preDraw() {
        if (this.getWidth() != 0 && this.getHeight() != 0 && this.sWidth > 0) {
            if (this.sHeight <= 0) {
                return;
            }
            if (this.sPendingCenter != null && this.pendingScale != null) {
                this.scale = this.pendingScale.floatValue();
                if (this.vTranslate == null) {
                    this.vTranslate = new PointF();
                }
                this.vTranslate.x = (float)(this.getWidth() / 2) - this.scale * this.sPendingCenter.x;
                this.vTranslate.y = (float)(this.getHeight() / 2) - this.scale * this.sPendingCenter.y;
                this.sPendingCenter = null;
                this.pendingScale = null;
                this.fitToBounds(true);
                this.refreshRequiredTiles(true);
            }
            this.fitToBounds(false);
        }
    }

    private int px(int n2) {
        return (int)(this.density * (float)n2);
    }

    private void refreshRequiredTiles(boolean bl2) {
        if (this.decoder != null) {
            if (this.tileMap == null) {
                return;
            }
            int n2 = Math.min(this.fullImageSampleSize, this.calculateInSampleSize(this.scale));
            Iterator<Map.Entry<Integer, List<Tile>>> iterator = this.tileMap.entrySet().iterator();
            while (iterator.hasNext()) {
                for (Tile tile : iterator.next().getValue()) {
                    if (tile.sampleSize < n2 || tile.sampleSize > n2 && tile.sampleSize != this.fullImageSampleSize) {
                        tile.visible = false;
                        if (tile.bitmap != null) {
                            tile.bitmap.recycle();
                            tile.bitmap = null;
                        }
                    }
                    if (tile.sampleSize == n2) {
                        if (this.tileVisible(tile)) {
                            tile.visible = true;
                            if (tile.loading || tile.bitmap != null || !bl2) continue;
                            this.execute(new TileLoadTask(this, this.decoder, tile));
                            continue;
                        }
                        if (tile.sampleSize == this.fullImageSampleSize) continue;
                        tile.visible = false;
                        if (tile.bitmap == null) continue;
                        tile.bitmap.recycle();
                        tile.bitmap = null;
                        continue;
                    }
                    if (tile.sampleSize != this.fullImageSampleSize) continue;
                    tile.visible = true;
                }
            }
        }
    }

    private void requestDisallowInterceptTouchEvent(boolean bl2) {
        ViewParent viewParent = this.getParent();
        if (viewParent != null) {
            viewParent.requestDisallowInterceptTouchEvent(bl2);
        }
    }

    private void reset(boolean bl2) {
        Object object;
        block10 : {
            object = new StringBuilder();
            object.append("reset newImage=");
            object.append(bl2);
            this.debug(object.toString(), new Object[0]);
            this.scale = 0.0f;
            this.scaleStart = 0.0f;
            this.vTranslate = null;
            this.vTranslateStart = null;
            this.vTranslateBefore = null;
            this.pendingScale = Float.valueOf(0.0f);
            this.sPendingCenter = null;
            this.sRequestedCenter = null;
            this.isZooming = false;
            this.isPanning = false;
            this.isQuickScaling = false;
            this.maxTouchCount = 0;
            this.fullImageSampleSize = 0;
            this.vCenterStart = null;
            this.vDistStart = 0.0f;
            this.quickScaleLastDistance = 0.0f;
            this.quickScaleMoved = false;
            this.quickScaleSCenter = null;
            this.quickScaleVLastPoint = null;
            this.quickScaleVStart = null;
            this.anim = null;
            this.satTemp = null;
            this.matrix = null;
            this.sRect = null;
            if (bl2) {
                block9 : {
                    this.uri = null;
                    this.decoderLock.writeLock().lock();
                    if (this.decoder != null) {
                        this.decoder.recycle();
                        this.decoder = null;
                    }
                    if (this.bitmap == null || this.bitmapIsCached) break block9;
                    this.bitmap.recycle();
                }
                if (this.bitmap != null && this.bitmapIsCached && this.onImageEventListener != null) {
                    this.onImageEventListener.onPreviewReleased();
                }
                this.sWidth = 0;
                this.sHeight = 0;
                this.sOrientation = 0;
                this.sRegion = null;
                this.pRegion = null;
                this.readySent = false;
                this.imageLoadedSent = false;
                this.bitmap = null;
                this.bitmapIsPreview = false;
                this.bitmapIsCached = false;
                break block10;
                finally {
                    this.decoderLock.writeLock().unlock();
                }
            }
        }
        if (this.tileMap != null) {
            object = this.tileMap.entrySet().iterator();
            while (object.hasNext()) {
                for (Tile tile : (List)((Map.Entry)object.next()).getValue()) {
                    tile.visible = false;
                    if (tile.bitmap == null) continue;
                    tile.bitmap.recycle();
                    tile.bitmap = null;
                }
            }
            this.tileMap = null;
        }
        this.setGestureDetector(this.getContext());
    }

    private void restoreState(ImageViewState imageViewState) {
        if (imageViewState != null && VALID_ORIENTATIONS.contains(imageViewState.getOrientation())) {
            this.orientation = imageViewState.getOrientation();
            this.pendingScale = Float.valueOf(imageViewState.getScale());
            this.sPendingCenter = imageViewState.getCenter();
            this.invalidate();
        }
    }

    private int sHeight() {
        int n2 = this.getRequiredRotation();
        if (n2 != 90 && n2 != 270) {
            return this.sHeight;
        }
        return this.sWidth;
    }

    private int sWidth() {
        int n2 = this.getRequiredRotation();
        if (n2 != 90 && n2 != 270) {
            return this.sWidth;
        }
        return this.sHeight;
    }

    private void sendStateChanged(float f2, PointF pointF, int n2) {
        if (this.onStateChangedListener != null && this.scale != f2) {
            this.onStateChangedListener.onScaleChanged(this.scale, n2);
        }
        if (this.onStateChangedListener != null && !this.vTranslate.equals((Object)pointF)) {
            this.onStateChangedListener.onCenterChanged(this.getCenter(), n2);
        }
    }

    private void setGestureDetector(final Context context) {
        this.detector = new GestureDetector(context, (GestureDetector.OnGestureListener)new GestureDetector.SimpleOnGestureListener(){

            public boolean onDoubleTap(MotionEvent motionEvent) {
                if (SubsamplingScaleImageView.this.zoomEnabled && SubsamplingScaleImageView.this.readySent && SubsamplingScaleImageView.this.vTranslate != null) {
                    SubsamplingScaleImageView.this.setGestureDetector(context);
                    if (SubsamplingScaleImageView.this.quickScaleEnabled) {
                        SubsamplingScaleImageView.this.vCenterStart = new PointF(motionEvent.getX(), motionEvent.getY());
                        SubsamplingScaleImageView.this.vTranslateStart = new PointF(SubsamplingScaleImageView.access$800((SubsamplingScaleImageView)SubsamplingScaleImageView.this).x, SubsamplingScaleImageView.access$800((SubsamplingScaleImageView)SubsamplingScaleImageView.this).y);
                        SubsamplingScaleImageView.this.scaleStart = SubsamplingScaleImageView.this.scale;
                        SubsamplingScaleImageView.this.isQuickScaling = true;
                        SubsamplingScaleImageView.this.isZooming = true;
                        SubsamplingScaleImageView.this.quickScaleLastDistance = -1.0f;
                        SubsamplingScaleImageView.this.quickScaleSCenter = SubsamplingScaleImageView.this.viewToSourceCoord(SubsamplingScaleImageView.this.vCenterStart);
                        SubsamplingScaleImageView.this.quickScaleVStart = new PointF(motionEvent.getX(), motionEvent.getY());
                        SubsamplingScaleImageView.this.quickScaleVLastPoint = new PointF(SubsamplingScaleImageView.access$2200((SubsamplingScaleImageView)SubsamplingScaleImageView.this).x, SubsamplingScaleImageView.access$2200((SubsamplingScaleImageView)SubsamplingScaleImageView.this).y);
                        SubsamplingScaleImageView.this.quickScaleMoved = false;
                        return false;
                    }
                    SubsamplingScaleImageView.this.doubleTapZoom(SubsamplingScaleImageView.this.viewToSourceCoord(new PointF(motionEvent.getX(), motionEvent.getY())), new PointF(motionEvent.getX(), motionEvent.getY()));
                    return true;
                }
                return super.onDoubleTapEvent(motionEvent);
            }

            public boolean onFling(MotionEvent motionEvent, MotionEvent motionEvent2, float f2, float f3) {
                if (!(!SubsamplingScaleImageView.this.panEnabled || !SubsamplingScaleImageView.this.readySent || SubsamplingScaleImageView.this.vTranslate == null || motionEvent == null || motionEvent2 == null || Math.abs(motionEvent.getX() - motionEvent2.getX()) <= 50.0f && Math.abs(motionEvent.getY() - motionEvent2.getY()) <= 50.0f || Math.abs(f2) <= 500.0f && Math.abs(f3) <= 500.0f || SubsamplingScaleImageView.this.isZooming)) {
                    motionEvent = new PointF(SubsamplingScaleImageView.access$800((SubsamplingScaleImageView)SubsamplingScaleImageView.this).x + f2 * 0.25f, SubsamplingScaleImageView.access$800((SubsamplingScaleImageView)SubsamplingScaleImageView.this).y + f3 * 0.25f);
                    f2 = ((float)(SubsamplingScaleImageView.this.getWidth() / 2) - motionEvent.x) / SubsamplingScaleImageView.this.scale;
                    f3 = ((float)(SubsamplingScaleImageView.this.getHeight() / 2) - motionEvent.y) / SubsamplingScaleImageView.this.scale;
                    new AnimationBuilder(new PointF(f2, f3)).withEasing(1).withPanLimited(false).withOrigin(3).start();
                    return true;
                }
                return super.onFling(motionEvent, motionEvent2, f2, f3);
            }

            public boolean onSingleTapConfirmed(MotionEvent motionEvent) {
                SubsamplingScaleImageView.this.performClick();
                return true;
            }
        });
        this.singleDetector = new GestureDetector(context, (GestureDetector.OnGestureListener)new GestureDetector.SimpleOnGestureListener(){

            public boolean onSingleTapConfirmed(MotionEvent motionEvent) {
                SubsamplingScaleImageView.this.performClick();
                return true;
            }
        });
    }

    private void setMatrixArray(float[] arrf, float f2, float f3, float f4, float f5, float f6, float f7, float f8, float f9) {
        arrf[0] = f2;
        arrf[1] = f3;
        arrf[2] = f4;
        arrf[3] = f5;
        arrf[4] = f6;
        arrf[5] = f7;
        arrf[6] = f8;
        arrf[7] = f9;
    }

    public static void setPreferredBitmapConfig(Bitmap.Config config) {
        preferredBitmapConfig = config;
    }

    private void sourceToViewRect(Rect rect, Rect rect2) {
        rect2.set((int)this.sourceToViewX(rect.left), (int)this.sourceToViewY(rect.top), (int)this.sourceToViewX(rect.right), (int)this.sourceToViewY(rect.bottom));
    }

    private float sourceToViewX(float f2) {
        if (this.vTranslate == null) {
            return Float.NaN;
        }
        return f2 * this.scale + this.vTranslate.x;
    }

    private float sourceToViewY(float f2) {
        if (this.vTranslate == null) {
            return Float.NaN;
        }
        return f2 * this.scale + this.vTranslate.y;
    }

    private boolean tileVisible(Tile tile) {
        float f2 = this.viewToSourceX(0.0f);
        float f3 = this.viewToSourceX(this.getWidth());
        float f4 = this.viewToSourceY(0.0f);
        float f5 = this.viewToSourceY(this.getHeight());
        if (f2 <= (float)Tile.access$4100((Tile)tile).right && (float)Tile.access$4100((Tile)tile).left <= f3 && f4 <= (float)Tile.access$4100((Tile)tile).bottom && (float)Tile.access$4100((Tile)tile).top <= f5) {
            return true;
        }
        return false;
    }

    private PointF vTranslateForSCenter(float f2, float f3, float f4) {
        int n2 = this.getPaddingLeft();
        int n3 = (this.getWidth() - this.getPaddingRight() - this.getPaddingLeft()) / 2;
        int n4 = this.getPaddingTop();
        int n5 = (this.getHeight() - this.getPaddingBottom() - this.getPaddingTop()) / 2;
        if (this.satTemp == null) {
            this.satTemp = new ScaleAndTranslate(0.0f, new PointF(0.0f, 0.0f));
        }
        this.satTemp.scale = f4;
        this.satTemp.vTranslate.set((float)(n2 + n3) - f2 * f4, (float)(n4 + n5) - f3 * f4);
        this.fitToBounds(true, this.satTemp);
        return this.satTemp.vTranslate;
    }

    private float viewToSourceX(float f2) {
        if (this.vTranslate == null) {
            return Float.NaN;
        }
        return (f2 - this.vTranslate.x) / this.scale;
    }

    private float viewToSourceY(float f2) {
        if (this.vTranslate == null) {
            return Float.NaN;
        }
        return (f2 - this.vTranslate.y) / this.scale;
    }

    public AnimationBuilder animateCenter(PointF pointF) {
        if (!this.isReady()) {
            return null;
        }
        return new AnimationBuilder(pointF);
    }

    public AnimationBuilder animateScale(float f2) {
        if (!this.isReady()) {
            return null;
        }
        return new AnimationBuilder(f2);
    }

    public AnimationBuilder animateScaleAndCenter(float f2, PointF pointF) {
        if (!this.isReady()) {
            return null;
        }
        return new AnimationBuilder(f2, pointF);
    }

    public final int getAppliedOrientation() {
        return this.getRequiredRotation();
    }

    public final PointF getCenter() {
        int n2 = this.getWidth() / 2;
        int n3 = this.getHeight() / 2;
        return this.viewToSourceCoord(n2, n3);
    }

    public float getMaxScale() {
        return this.maxScale;
    }

    public final float getMinScale() {
        return this.minScale();
    }

    public final int getOrientation() {
        return this.orientation;
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Lifted jumps to return sites
     */
    public final void getPanRemaining(RectF var1_1) {
        block3 : {
            if (!this.isReady()) {
                return;
            }
            var2_2 = this.scale * (float)this.sWidth();
            var3_3 = this.scale * (float)this.sHeight();
            if (this.panLimit != 3) break block3;
            var1_1.top = Math.max(0.0f, - this.vTranslate.y - (float)(this.getHeight() / 2));
            var1_1.left = Math.max(0.0f, - this.vTranslate.x - (float)(this.getWidth() / 2));
            var1_1.bottom = Math.max(0.0f, this.vTranslate.y - ((float)(this.getHeight() / 2) - var3_3));
            var2_2 = this.vTranslate.x - ((float)(this.getWidth() / 2) - var2_2);
            ** GOTO lbl17
        }
        if (this.panLimit == 2) {
            var1_1.top = Math.max(0.0f, - this.vTranslate.y - (float)this.getHeight());
            var1_1.left = Math.max(0.0f, - this.vTranslate.x - (float)this.getWidth());
            var1_1.bottom = Math.max(0.0f, this.vTranslate.y + var3_3);
            var2_2 = this.vTranslate.x + var2_2;
lbl17: // 2 sources:
            var2_2 = Math.max(0.0f, var2_2);
        } else {
            var1_1.top = Math.max(0.0f, - this.vTranslate.y);
            var1_1.left = Math.max(0.0f, - this.vTranslate.x);
            var1_1.bottom = Math.max(0.0f, var3_3 + this.vTranslate.y - (float)this.getHeight());
            var2_2 = Math.max(0.0f, var2_2 + this.vTranslate.x - (float)this.getWidth());
        }
        var1_1.right = var2_2;
    }

    public final int getSHeight() {
        return this.sHeight;
    }

    public final int getSWidth() {
        return this.sWidth;
    }

    public final float getScale() {
        return this.scale;
    }

    public final ImageViewState getState() {
        if (this.vTranslate != null && this.sWidth > 0 && this.sHeight > 0) {
            return new ImageViewState(this.getScale(), this.getCenter(), this.getOrientation());
        }
        return null;
    }

    public boolean hasImage() {
        if (this.uri == null && this.bitmap == null) {
            return false;
        }
        return true;
    }

    public final boolean isImageLoaded() {
        return this.imageLoadedSent;
    }

    public final boolean isPanEnabled() {
        return this.panEnabled;
    }

    public final boolean isQuickScaleEnabled() {
        return this.quickScaleEnabled;
    }

    public final boolean isReady() {
        return this.readySent;
    }

    public final boolean isZoomEnabled() {
        return this.zoomEnabled;
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    protected void onDraw(Canvas var1_1) {
        block37 : {
            super.onDraw(var1_1);
            this.createPaints();
            if (this.sWidth == 0) return;
            if (this.sHeight == 0) return;
            if (this.getWidth() == 0) return;
            if (this.getHeight() == 0) {
                return;
            }
            if (this.tileMap == null && this.decoder != null) {
                this.initialiseBaseLayer(this.getMaxBitmapDimensions(var1_1));
            }
            if (!this.checkReady()) {
                return;
            }
            this.preDraw();
            if (this.anim != null && Anim.access$3100(this.anim) != null) {
                var2_2 = this.scale;
                if (this.vTranslateBefore == null) {
                    this.vTranslateBefore = new PointF(0.0f, 0.0f);
                }
                this.vTranslateBefore.set(this.vTranslate);
                var15_3 = System.currentTimeMillis() - Anim.access$3200(this.anim);
                var17_4 = var15_3 > Anim.access$3300(this.anim);
                var15_3 = Math.min(var15_3, Anim.access$3300(this.anim));
                this.scale = this.ease(Anim.access$3400(this.anim), var15_3, Anim.access$3500(this.anim), Anim.access$3600(this.anim) - Anim.access$3500(this.anim), Anim.access$3300(this.anim));
                var3_5 = this.ease(Anim.access$3400(this.anim), var15_3, Anim.access$3100((Anim)this.anim).x, Anim.access$3700((Anim)this.anim).x - Anim.access$3100((Anim)this.anim).x, Anim.access$3300(this.anim));
                var4_6 = this.ease(Anim.access$3400(this.anim), var15_3, Anim.access$3100((Anim)this.anim).y, Anim.access$3700((Anim)this.anim).y - Anim.access$3100((Anim)this.anim).y, Anim.access$3300(this.anim));
                var19_7 = this.vTranslate;
                var19_7.x -= this.sourceToViewX(Anim.access$3800((Anim)this.anim).x) - var3_5;
                var19_8 = this.vTranslate;
                var19_8.y -= this.sourceToViewY(Anim.access$3800((Anim)this.anim).y) - var4_6;
                var18_30 = var17_4 || Anim.access$3500(this.anim) == Anim.access$3600(this.anim);
                this.fitToBounds(var18_30);
                this.sendStateChanged(var2_2, this.vTranslateBefore, Anim.access$3900(this.anim));
                this.refreshRequiredTiles(var17_4);
                if (var17_4) {
                    if (Anim.access$2800(this.anim) != null) {
                        try {
                            Anim.access$2800(this.anim).onComplete();
                        }
                        catch (Exception var19_9) {
                            Log.w((String)SubsamplingScaleImageView.TAG, (String)"Error thrown by animation listener", (Throwable)var19_9);
                        }
                    }
                    this.anim = null;
                }
                this.invalidate();
            }
            if (this.tileMap != null && this.isBaseLayerReady()) break block37;
            if (this.bitmap != null) {
                var2_2 = this.scale;
                var3_5 = this.scale;
                if (this.bitmapIsPreview) {
                    var2_2 = this.scale * ((float)this.sWidth / (float)this.bitmap.getWidth());
                    var3_5 = this.scale * ((float)this.sHeight / (float)this.bitmap.getHeight());
                }
                if (this.matrix == null) {
                    this.matrix = new Matrix();
                }
                this.matrix.reset();
                this.matrix.postScale(var2_2, var3_5);
                this.matrix.postRotate((float)this.getRequiredRotation());
                this.matrix.postTranslate(this.vTranslate.x, this.vTranslate.y);
                if (this.getRequiredRotation() == 180) {
                    this.matrix.postTranslate(this.scale * (float)this.sWidth, this.scale * (float)this.sHeight);
                } else if (this.getRequiredRotation() == 90) {
                    this.matrix.postTranslate(this.scale * (float)this.sHeight, 0.0f);
                } else if (this.getRequiredRotation() == 270) {
                    this.matrix.postTranslate(0.0f, this.scale * (float)this.sWidth);
                }
                if (this.tileBgPaint != null) {
                    if (this.sRect == null) {
                        this.sRect = new RectF();
                    }
                    var19_23 = this.sRect;
                    var12_33 = this.bitmapIsPreview != false ? this.bitmap.getWidth() : this.sWidth;
                    var2_2 = var12_33;
                    var12_33 = this.bitmapIsPreview != false ? this.bitmap.getHeight() : this.sHeight;
                    var3_5 = var12_33;
                    var19_23.set(0.0f, 0.0f, var2_2, var3_5);
                    this.matrix.mapRect(this.sRect);
                    var1_1.drawRect(this.sRect, this.tileBgPaint);
                }
                var1_1.drawBitmap(this.bitmap, this.matrix, this.bitmapPaint);
            }
            ** GOTO lbl97
        }
        var14_31 = Math.min(this.fullImageSampleSize, this.calculateInSampleSize(this.scale));
        var19_11 = this.tileMap.entrySet().iterator();
        var12_32 = 0;
        block2 : while (var19_11.hasNext()) {
            var20_35 = var19_11.next();
            if (var20_35.getKey() != var14_31) continue;
            var20_35 = ((List)var20_35.getValue()).iterator();
            var13_34 = var12_32;
            do {
                var12_32 = var13_34;
                if (!var20_35.hasNext()) continue block2;
                var21_36 = (Tile)var20_35.next();
                if (!Tile.access$400((Tile)var21_36) || !Tile.access$4000((Tile)var21_36) && Tile.access$500((Tile)var21_36) != null) continue;
                var13_34 = 1;
            } while (true);
        }
        var20_35 = this.tileMap.entrySet().iterator();
        block4 : do lbl-1000: // 3 sources:
        {
            block39 : {
                block38 : {
                    if (!var20_35.hasNext()) break block38;
                    var19_13 = (Map.Entry)var20_35.next();
                    if ((Integer)var19_13.getKey() != var14_31 && var12_32 == 0) ** GOTO lbl-1000
                    break block39;
                }
                if (this.debug == false) return;
                var19_26 = new StringBuilder();
                var19_26.append("Scale: ");
                var19_26.append(String.format(Locale.ENGLISH, "%.2f", new Object[]{Float.valueOf(this.scale)}));
                var19_26.append(" (");
                var19_26.append(String.format(Locale.ENGLISH, "%.2f", new Object[]{Float.valueOf(this.minScale())}));
                var19_26.append(" - ");
                var19_26.append(String.format(Locale.ENGLISH, "%.2f", new Object[]{Float.valueOf(this.maxScale)}));
                var19_26.append(")");
                var1_1.drawText(var19_26.toString(), (float)this.px(5), (float)this.px(15), this.debugTextPaint);
                var19_27 = new StringBuilder();
                var19_27.append("Translate: ");
                var19_27.append(String.format(Locale.ENGLISH, "%.2f", new Object[]{Float.valueOf(this.vTranslate.x)}));
                var19_27.append(":");
                var19_27.append(String.format(Locale.ENGLISH, "%.2f", new Object[]{Float.valueOf(this.vTranslate.y)}));
                var1_1.drawText(var19_27.toString(), (float)this.px(5), (float)this.px(30), this.debugTextPaint);
                var19_28 = this.getCenter();
                var20_35 = new StringBuilder();
                var20_35.append("Source center: ");
                var20_35.append(String.format(Locale.ENGLISH, "%.2f", new Object[]{Float.valueOf(var19_28.x)}));
                var20_35.append(":");
                var20_35.append(String.format(Locale.ENGLISH, "%.2f", new Object[]{Float.valueOf(var19_28.y)}));
                var1_1.drawText(var20_35.toString(), (float)this.px(5), (float)this.px(45), this.debugTextPaint);
                if (this.anim != null) {
                    var19_29 = this.sourceToViewCoord(Anim.access$4400(this.anim));
                    var20_35 = this.sourceToViewCoord(Anim.access$4500(this.anim));
                    var21_36 = this.sourceToViewCoord(Anim.access$3800(this.anim));
                    var1_1.drawCircle(var19_29.x, var19_29.y, (float)this.px(10), this.debugLinePaint);
                    this.debugLinePaint.setColor(-65536);
                    var1_1.drawCircle(var20_35.x, var20_35.y, (float)this.px(20), this.debugLinePaint);
                    this.debugLinePaint.setColor(-16776961);
                    var1_1.drawCircle(var21_36.x, var21_36.y, (float)this.px(25), this.debugLinePaint);
                    this.debugLinePaint.setColor(-16711681);
                    var1_1.drawCircle((float)(this.getWidth() / 2), (float)(this.getHeight() / 2), (float)this.px(30), this.debugLinePaint);
                }
                if (this.vCenterStart != null) {
                    this.debugLinePaint.setColor(-65536);
                    var1_1.drawCircle(this.vCenterStart.x, this.vCenterStart.y, (float)this.px(20), this.debugLinePaint);
                }
                if (this.quickScaleSCenter != null) {
                    this.debugLinePaint.setColor(-16776961);
                    var1_1.drawCircle(this.sourceToViewX(this.quickScaleSCenter.x), this.sourceToViewY(this.quickScaleSCenter.y), (float)this.px(35), this.debugLinePaint);
                }
                if (this.quickScaleVStart != null && this.isQuickScaling) {
                    this.debugLinePaint.setColor(-16711681);
                    var1_1.drawCircle(this.quickScaleVStart.x, this.quickScaleVStart.y, (float)this.px(30), this.debugLinePaint);
                }
                this.debugLinePaint.setColor(-65281);
                return;
            }
            var21_36 = ((List)var19_13.getValue()).iterator();
            do {
                block48 : {
                    block40 : {
                        block47 : {
                            block46 : {
                                block42 : {
                                    block45 : {
                                        block44 : {
                                            block43 : {
                                                block41 : {
                                                    if (!var21_36.hasNext()) continue block4;
                                                    var22_44 = (Tile)var21_36.next();
                                                    this.sourceToViewRect(Tile.access$4100(var22_44), Tile.access$4200(var22_44));
                                                    if (Tile.access$4000(var22_44) || Tile.access$500(var22_44) == null) break block40;
                                                    if (this.tileBgPaint != null) {
                                                        var1_1.drawRect(Tile.access$4200(var22_44), this.tileBgPaint);
                                                    }
                                                    if (this.matrix == null) {
                                                        this.matrix = new Matrix();
                                                    }
                                                    this.matrix.reset();
                                                    this.setMatrixArray(this.srcArray, 0.0f, 0.0f, Tile.access$500(var22_44).getWidth(), 0.0f, Tile.access$500(var22_44).getWidth(), Tile.access$500(var22_44).getHeight(), 0.0f, Tile.access$500(var22_44).getHeight());
                                                    if (this.getRequiredRotation() != 0) break block41;
                                                    var19_15 = this.dstArray;
                                                    var2_2 = Tile.access$4200((Tile)var22_44).left;
                                                    var3_5 = Tile.access$4200((Tile)var22_44).top;
                                                    var4_6 = Tile.access$4200((Tile)var22_44).right;
                                                    var5_37 = Tile.access$4200((Tile)var22_44).top;
                                                    var6_38 = Tile.access$4200((Tile)var22_44).right;
                                                    var7_39 = Tile.access$4200((Tile)var22_44).bottom;
                                                    var13_34 = Tile.access$4200((Tile)var22_44).left;
                                                    break block42;
                                                }
                                                if (this.getRequiredRotation() != 90) break block43;
                                                var19_18 = this.dstArray;
                                                var7_39 = Tile.access$4200((Tile)var22_44).right;
                                                var6_38 = Tile.access$4200((Tile)var22_44).top;
                                                var5_37 = Tile.access$4200((Tile)var22_44).right;
                                                var4_6 = Tile.access$4200((Tile)var22_44).bottom;
                                                var3_5 = Tile.access$4200((Tile)var22_44).left;
                                                var2_2 = Tile.access$4200((Tile)var22_44).bottom;
                                                var13_34 = Tile.access$4200((Tile)var22_44).left;
                                                break block44;
                                            }
                                            if (this.getRequiredRotation() != 180) break block45;
                                            var19_20 = this.dstArray;
                                            var7_39 = Tile.access$4200((Tile)var22_44).right;
                                            var6_38 = Tile.access$4200((Tile)var22_44).bottom;
                                            var5_37 = Tile.access$4200((Tile)var22_44).left;
                                            var4_6 = Tile.access$4200((Tile)var22_44).bottom;
                                            var3_5 = Tile.access$4200((Tile)var22_44).left;
                                            var2_2 = Tile.access$4200((Tile)var22_44).top;
                                            var13_34 = Tile.access$4200((Tile)var22_44).right;
                                        }
                                        var11_43 = var13_34;
                                        var13_34 = Tile.access$4200((Tile)var22_44).top;
                                        var8_40 = var4_6;
                                        var9_41 = var3_5;
                                        var10_42 = var2_2;
                                        break block46;
                                    }
                                    if (this.getRequiredRotation() != 270) break block47;
                                    var19_21 = this.dstArray;
                                    var2_2 = Tile.access$4200((Tile)var22_44).left;
                                    var3_5 = Tile.access$4200((Tile)var22_44).bottom;
                                    var4_6 = Tile.access$4200((Tile)var22_44).left;
                                    var5_37 = Tile.access$4200((Tile)var22_44).top;
                                    var6_38 = Tile.access$4200((Tile)var22_44).right;
                                    var7_39 = Tile.access$4200((Tile)var22_44).top;
                                    var13_34 = Tile.access$4200((Tile)var22_44).right;
                                }
                                var11_43 = var13_34;
                                var13_34 = Tile.access$4200((Tile)var22_44).bottom;
                                var10_42 = var7_39;
                                var9_41 = var6_38;
                                var8_40 = var5_37;
                                var5_37 = var4_6;
                                var6_38 = var3_5;
                                var7_39 = var2_2;
                            }
                            this.setMatrixArray((float[])var19_17, var7_39, var6_38, var5_37, var8_40, var9_41, var10_42, var11_43, var13_34);
                        }
                        this.matrix.setPolyToPoly(this.srcArray, 0, this.dstArray, 0, 4);
                        var1_1.drawBitmap(Tile.access$500(var22_44), this.matrix, this.bitmapPaint);
                        if (this.debug) {
                            var1_1.drawRect(Tile.access$4200(var22_44), this.debugLinePaint);
                        }
                        break block48;
                    }
                    if (Tile.access$4000(var22_44) && this.debug) {
                        var1_1.drawText("LOADING", (float)(Tile.access$4200((Tile)var22_44).left + this.px(5)), (float)(Tile.access$4200((Tile)var22_44).top + this.px(35)), this.debugTextPaint);
                    }
                }
                if (!Tile.access$400(var22_44) || !this.debug) continue;
                var19_22 = new StringBuilder();
                var19_22.append("ISS ");
                var19_22.append(Tile.access$4300(var22_44));
                var19_22.append(" RECT ");
                var19_22.append(Tile.access$4100((Tile)var22_44).top);
                var19_22.append(",");
                var19_22.append(Tile.access$4100((Tile)var22_44).left);
                var19_22.append(",");
                var19_22.append(Tile.access$4100((Tile)var22_44).bottom);
                var19_22.append(",");
                var19_22.append(Tile.access$4100((Tile)var22_44).right);
                var1_1.drawText(var19_22.toString(), (float)(Tile.access$4200((Tile)var22_44).left + this.px(5)), (float)(Tile.access$4200((Tile)var22_44).top + this.px(15)), this.debugTextPaint);
            } while (true);
            break;
        } while (true);
    }

    protected void onImageLoaded() {
    }

    protected void onMeasure(int n2, int n3) {
        int n4 = View.MeasureSpec.getMode((int)n2);
        int n5 = View.MeasureSpec.getMode((int)n3);
        int n6 = View.MeasureSpec.getSize((int)n2);
        int n7 = View.MeasureSpec.getSize((int)n3);
        boolean bl2 = false;
        n4 = n4 != 1073741824 ? 1 : 0;
        if (n5 != 1073741824) {
            bl2 = true;
        }
        n2 = n6;
        n3 = n7;
        if (this.sWidth > 0) {
            n2 = n6;
            n3 = n7;
            if (this.sHeight > 0) {
                if (n4 != 0 && bl2) {
                    n2 = this.sWidth();
                    n3 = this.sHeight();
                } else if (bl2) {
                    n3 = (int)((double)this.sHeight() / (double)this.sWidth() * (double)n6);
                    n2 = n6;
                } else {
                    n2 = n6;
                    n3 = n7;
                    if (n4 != 0) {
                        n2 = (int)((double)this.sWidth() / (double)this.sHeight() * (double)n7);
                        n3 = n7;
                    }
                }
            }
        }
        this.setMeasuredDimension(Math.max(n2, this.getSuggestedMinimumWidth()), Math.max(n3, this.getSuggestedMinimumHeight()));
    }

    protected void onReady() {
    }

    protected void onSizeChanged(int n2, int n3, int n4, int n5) {
        this.debug("onSizeChanged %dx%d -> %dx%d", n4, n5, n2, n3);
        PointF pointF = this.getCenter();
        if (this.readySent && pointF != null) {
            this.anim = null;
            this.pendingScale = Float.valueOf(this.scale);
            this.sPendingCenter = pointF;
        }
    }

    public boolean onTouchEvent(MotionEvent motionEvent) {
        Anim anim2 = this.anim;
        boolean bl2 = true;
        if (anim2 != null && !this.anim.interruptible) {
            this.requestDisallowInterceptTouchEvent(true);
            return true;
        }
        if (this.anim != null && this.anim.listener != null) {
            try {
                this.anim.listener.onInterruptedByUser();
            }
            catch (Exception exception) {
                Log.w((String)TAG, (String)"Error thrown by animation listener", (Throwable)exception);
            }
        }
        this.anim = null;
        if (this.vTranslate == null) {
            if (this.singleDetector != null) {
                this.singleDetector.onTouchEvent(motionEvent);
            }
            return true;
        }
        if (!this.isQuickScaling && (this.detector == null || this.detector.onTouchEvent(motionEvent))) {
            this.isZooming = false;
            this.isPanning = false;
            this.maxTouchCount = 0;
            return true;
        }
        if (this.vTranslateStart == null) {
            this.vTranslateStart = new PointF(0.0f, 0.0f);
        }
        if (this.vTranslateBefore == null) {
            this.vTranslateBefore = new PointF(0.0f, 0.0f);
        }
        if (this.vCenterStart == null) {
            this.vCenterStart = new PointF(0.0f, 0.0f);
        }
        float f2 = this.scale;
        this.vTranslateBefore.set(this.vTranslate);
        boolean bl3 = this.onTouchEventInternal(motionEvent);
        this.sendStateChanged(f2, this.vTranslateBefore, 2);
        if (!bl3) {
            if (super.onTouchEvent(motionEvent)) {
                return true;
            }
            bl2 = false;
        }
        return bl2;
    }

    public void recycle() {
        this.reset(true);
        this.bitmapPaint = null;
        this.debugTextPaint = null;
        this.debugLinePaint = null;
        this.tileBgPaint = null;
    }

    public final void resetScaleAndCenter() {
        this.anim = null;
        this.pendingScale = Float.valueOf(this.limitedScale(0.0f));
        this.sPendingCenter = this.isReady() ? new PointF((float)(this.sWidth() / 2), (float)(this.sHeight() / 2)) : new PointF(0.0f, 0.0f);
        this.invalidate();
    }

    public final void setBitmapDecoderClass(Class<? extends ImageDecoder> class_) {
        if (class_ != null) {
            this.bitmapDecoderFactory = new CompatDecoderFactory<ImageDecoder>(class_);
            return;
        }
        throw new IllegalArgumentException("Decoder class cannot be set to null");
    }

    public final void setBitmapDecoderFactory(DecoderFactory<? extends ImageDecoder> decoderFactory) {
        if (decoderFactory != null) {
            this.bitmapDecoderFactory = decoderFactory;
            return;
        }
        throw new IllegalArgumentException("Decoder factory cannot be set to null");
    }

    public final void setDebug(boolean bl2) {
        this.debug = bl2;
    }

    public final void setDoubleTapZoomDpi(int n2) {
        DisplayMetrics displayMetrics = this.getResources().getDisplayMetrics();
        this.setDoubleTapZoomScale((displayMetrics.xdpi + displayMetrics.ydpi) / 2.0f / (float)n2);
    }

    public final void setDoubleTapZoomDuration(int n2) {
        this.doubleTapZoomDuration = Math.max(0, n2);
    }

    public final void setDoubleTapZoomScale(float f2) {
        this.doubleTapZoomScale = f2;
    }

    public final void setDoubleTapZoomStyle(int n2) {
        if (VALID_ZOOM_STYLES.contains(n2)) {
            this.doubleTapZoomStyle = n2;
            return;
        }
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("Invalid zoom style: ");
        stringBuilder.append(n2);
        throw new IllegalArgumentException(stringBuilder.toString());
    }

    public void setEagerLoadingEnabled(boolean bl2) {
        this.eagerLoadingEnabled = bl2;
    }

    public void setExecutor(Executor executor) {
        if (executor != null) {
            this.executor = executor;
            return;
        }
        throw new NullPointerException("Executor must not be null");
    }

    public final void setImage(ImageSource imageSource) {
        this.setImage(imageSource, null, null);
    }

    public final void setImage(ImageSource imageSource, ImageSource imageSource2) {
        this.setImage(imageSource, imageSource2, null);
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    public final void setImage(ImageSource object, ImageSource object2, ImageViewState serializable) {
        if (object == null) throw new NullPointerException("imageSource must not be null");
        this.reset(true);
        if (serializable != null) {
            this.restoreState((ImageViewState)serializable);
        }
        if (object2 != null) {
            if (object.getBitmap() != null) throw new IllegalArgumentException("Preview image cannot be used when a bitmap is provided for the main image");
            if (object.getSWidth() <= 0 || object.getSHeight() <= 0) throw new IllegalArgumentException("Preview image cannot be used unless dimensions are provided for the main image");
            this.sWidth = object.getSWidth();
            this.sHeight = object.getSHeight();
            this.pRegion = object2.getSRegion();
            if (object2.getBitmap() != null) {
                this.bitmapIsCached = object2.isCached();
                this.onPreviewLoaded(object2.getBitmap());
            } else {
                Uri uri = object2.getUri();
                serializable = uri;
                if (uri == null) {
                    serializable = uri;
                    if (object2.getResource() != null) {
                        serializable = new StringBuilder();
                        serializable.append("android.resource://");
                        serializable.append(this.getContext().getPackageName());
                        serializable.append("/");
                        serializable.append(object2.getResource());
                        serializable = Uri.parse((String)serializable.toString());
                    }
                }
                this.execute(new BitmapLoadTask(this, this.getContext(), this.bitmapDecoderFactory, (Uri)serializable, true));
            }
        }
        if (object.getBitmap() != null && object.getSRegion() != null) {
            this.onImageLoaded(Bitmap.createBitmap((Bitmap)object.getBitmap(), (int)object.getSRegion().left, (int)object.getSRegion().top, (int)object.getSRegion().width(), (int)object.getSRegion().height()), 0, false);
            return;
        }
        if (object.getBitmap() != null) {
            this.onImageLoaded(object.getBitmap(), 0, object.isCached());
            return;
        }
        this.sRegion = object.getSRegion();
        this.uri = object.getUri();
        if (this.uri == null && object.getResource() != null) {
            object2 = new StringBuilder();
            object2.append("android.resource://");
            object2.append(this.getContext().getPackageName());
            object2.append("/");
            object2.append(object.getResource());
            this.uri = Uri.parse((String)object2.toString());
        }
        object = !object.getTile() && this.sRegion == null ? new BitmapLoadTask(this, this.getContext(), this.bitmapDecoderFactory, this.uri, false) : new TilesInitTask(this, this.getContext(), this.regionDecoderFactory, this.uri);
        this.execute((AsyncTask<Void, Void, ?>)object);
    }

    public final void setImage(ImageSource imageSource, ImageViewState imageViewState) {
        this.setImage(imageSource, null, imageViewState);
    }

    public final void setMaxScale(float f2) {
        this.maxScale = f2;
    }

    public void setMaxTileSize(int n2) {
        this.maxTileWidth = n2;
        this.maxTileHeight = n2;
    }

    public void setMaxTileSize(int n2, int n3) {
        this.maxTileWidth = n2;
        this.maxTileHeight = n3;
    }

    public final void setMaximumDpi(int n2) {
        DisplayMetrics displayMetrics = this.getResources().getDisplayMetrics();
        this.setMinScale((displayMetrics.xdpi + displayMetrics.ydpi) / 2.0f / (float)n2);
    }

    public final void setMinScale(float f2) {
        this.minScale = f2;
    }

    public final void setMinimumDpi(int n2) {
        DisplayMetrics displayMetrics = this.getResources().getDisplayMetrics();
        this.setMaxScale((displayMetrics.xdpi + displayMetrics.ydpi) / 2.0f / (float)n2);
    }

    public final void setMinimumScaleType(int n2) {
        if (VALID_SCALE_TYPES.contains(n2)) {
            this.minimumScaleType = n2;
            if (this.isReady()) {
                this.fitToBounds(true);
                this.invalidate();
            }
            return;
        }
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("Invalid scale type: ");
        stringBuilder.append(n2);
        throw new IllegalArgumentException(stringBuilder.toString());
    }

    public void setMinimumTileDpi(int n2) {
        DisplayMetrics displayMetrics = this.getResources().getDisplayMetrics();
        this.minimumTileDpi = (int)Math.min((displayMetrics.xdpi + displayMetrics.ydpi) / 2.0f, (float)n2);
        if (this.isReady()) {
            this.reset(false);
            this.invalidate();
        }
    }

    public void setOnImageEventListener(OnImageEventListener onImageEventListener) {
        this.onImageEventListener = onImageEventListener;
    }

    public void setOnLongClickListener(View.OnLongClickListener onLongClickListener) {
        this.onLongClickListener = onLongClickListener;
    }

    public void setOnStateChangedListener(OnStateChangedListener onStateChangedListener) {
        this.onStateChangedListener = onStateChangedListener;
    }

    public final void setOrientation(int n2) {
        if (VALID_ORIENTATIONS.contains(n2)) {
            this.orientation = n2;
            this.reset(false);
            this.invalidate();
            this.requestLayout();
            return;
        }
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("Invalid orientation: ");
        stringBuilder.append(n2);
        throw new IllegalArgumentException(stringBuilder.toString());
    }

    public final void setPanEnabled(boolean bl2) {
        this.panEnabled = bl2;
        if (!bl2 && this.vTranslate != null) {
            this.vTranslate.x = (float)(this.getWidth() / 2) - this.scale * (float)(this.sWidth() / 2);
            this.vTranslate.y = (float)(this.getHeight() / 2) - this.scale * (float)(this.sHeight() / 2);
            if (this.isReady()) {
                this.refreshRequiredTiles(true);
                this.invalidate();
            }
        }
    }

    public final void setPanLimit(int n2) {
        if (VALID_PAN_LIMITS.contains(n2)) {
            this.panLimit = n2;
            if (this.isReady()) {
                this.fitToBounds(true);
                this.invalidate();
            }
            return;
        }
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("Invalid pan limit: ");
        stringBuilder.append(n2);
        throw new IllegalArgumentException(stringBuilder.toString());
    }

    public final void setQuickScaleEnabled(boolean bl2) {
        this.quickScaleEnabled = bl2;
    }

    public final void setRegionDecoderClass(Class<? extends ImageRegionDecoder> class_) {
        if (class_ != null) {
            this.regionDecoderFactory = new CompatDecoderFactory<ImageRegionDecoder>(class_);
            return;
        }
        throw new IllegalArgumentException("Decoder class cannot be set to null");
    }

    public final void setRegionDecoderFactory(DecoderFactory<? extends ImageRegionDecoder> decoderFactory) {
        if (decoderFactory != null) {
            this.regionDecoderFactory = decoderFactory;
            return;
        }
        throw new IllegalArgumentException("Decoder factory cannot be set to null");
    }

    public final void setScaleAndCenter(float f2, PointF pointF) {
        this.anim = null;
        this.pendingScale = Float.valueOf(f2);
        this.sPendingCenter = pointF;
        this.sRequestedCenter = pointF;
        this.invalidate();
    }

    public final void setTileBackgroundColor(int n2) {
        if (Color.alpha((int)n2) == 0) {
            this.tileBgPaint = null;
        } else {
            this.tileBgPaint = new Paint();
            this.tileBgPaint.setStyle(Paint.Style.FILL);
            this.tileBgPaint.setColor(n2);
        }
        this.invalidate();
    }

    public final void setZoomEnabled(boolean bl2) {
        this.zoomEnabled = bl2;
    }

    public final PointF sourceToViewCoord(float f2, float f3) {
        return this.sourceToViewCoord(f2, f3, new PointF());
    }

    public final PointF sourceToViewCoord(float f2, float f3, PointF pointF) {
        if (this.vTranslate == null) {
            return null;
        }
        pointF.set(this.sourceToViewX(f2), this.sourceToViewY(f3));
        return pointF;
    }

    public final PointF sourceToViewCoord(PointF pointF) {
        return this.sourceToViewCoord(pointF.x, pointF.y, new PointF());
    }

    public final PointF sourceToViewCoord(PointF pointF, PointF pointF2) {
        return this.sourceToViewCoord(pointF.x, pointF.y, pointF2);
    }

    public void viewToFileRect(Rect rect, Rect rect2) {
        if (this.vTranslate != null) {
            if (!this.readySent) {
                return;
            }
            rect2.set((int)this.viewToSourceX(rect.left), (int)this.viewToSourceY(rect.top), (int)this.viewToSourceX(rect.right), (int)this.viewToSourceY(rect.bottom));
            this.fileSRect(rect2, rect2);
            rect2.set(Math.max(0, rect2.left), Math.max(0, rect2.top), Math.min(this.sWidth, rect2.right), Math.min(this.sHeight, rect2.bottom));
            if (this.sRegion != null) {
                rect2.offset(this.sRegion.left, this.sRegion.top);
            }
        }
    }

    public final PointF viewToSourceCoord(float f2, float f3) {
        return this.viewToSourceCoord(f2, f3, new PointF());
    }

    public final PointF viewToSourceCoord(float f2, float f3, PointF pointF) {
        if (this.vTranslate == null) {
            return null;
        }
        pointF.set(this.viewToSourceX(f2), this.viewToSourceY(f3));
        return pointF;
    }

    public final PointF viewToSourceCoord(PointF pointF) {
        return this.viewToSourceCoord(pointF.x, pointF.y, new PointF());
    }

    public final PointF viewToSourceCoord(PointF pointF, PointF pointF2) {
        return this.viewToSourceCoord(pointF.x, pointF.y, pointF2);
    }

    public void visibleFileRect(Rect rect) {
        if (this.vTranslate != null) {
            if (!this.readySent) {
                return;
            }
            rect.set(0, 0, this.getWidth(), this.getHeight());
            this.viewToFileRect(rect, rect);
        }
    }

    private static class Anim {
        private long duration = 500L;
        private int easing = 2;
        private boolean interruptible = true;
        private OnAnimationEventListener listener;
        private int origin = 1;
        private PointF sCenterEnd;
        private PointF sCenterEndRequested;
        private PointF sCenterStart;
        private float scaleEnd;
        private float scaleStart;
        private long time = System.currentTimeMillis();
        private PointF vFocusEnd;
        private PointF vFocusStart;

        private Anim() {
        }

        static /* synthetic */ PointF access$3100(Anim anim2) {
            return anim2.vFocusStart;
        }

        static /* synthetic */ long access$3200(Anim anim2) {
            return anim2.time;
        }

        static /* synthetic */ long access$3300(Anim anim2) {
            return anim2.duration;
        }

        static /* synthetic */ int access$3400(Anim anim2) {
            return anim2.easing;
        }

        static /* synthetic */ float access$3500(Anim anim2) {
            return anim2.scaleStart;
        }

        static /* synthetic */ float access$3600(Anim anim2) {
            return anim2.scaleEnd;
        }

        static /* synthetic */ PointF access$3700(Anim anim2) {
            return anim2.vFocusEnd;
        }

        static /* synthetic */ PointF access$3800(Anim anim2) {
            return anim2.sCenterEnd;
        }

        static /* synthetic */ int access$3900(Anim anim2) {
            return anim2.origin;
        }

        static /* synthetic */ PointF access$4400(Anim anim2) {
            return anim2.sCenterStart;
        }

        static /* synthetic */ PointF access$4500(Anim anim2) {
            return anim2.sCenterEndRequested;
        }
    }

    public final class AnimationBuilder {
        private long duration = 500L;
        private int easing = 2;
        private boolean interruptible = true;
        private OnAnimationEventListener listener;
        private int origin = 1;
        private boolean panLimited = true;
        private final PointF targetSCenter;
        private final float targetScale;
        private final PointF vFocus;

        private AnimationBuilder(float f2) {
            this.targetScale = f2;
            this.targetSCenter = SubsamplingScaleImageView.this.getCenter();
            this.vFocus = null;
        }

        private AnimationBuilder(float f2, PointF pointF) {
            this.targetScale = f2;
            this.targetSCenter = pointF;
            this.vFocus = null;
        }

        private AnimationBuilder(float f2, PointF pointF, PointF pointF2) {
            this.targetScale = f2;
            this.targetSCenter = pointF;
            this.vFocus = pointF2;
        }

        private AnimationBuilder(PointF pointF) {
            this.targetScale = SubsamplingScaleImageView.this.scale;
            this.targetSCenter = pointF;
            this.vFocus = null;
        }

        private AnimationBuilder withOrigin(int n2) {
            this.origin = n2;
            return this;
        }

        private AnimationBuilder withPanLimited(boolean bl2) {
            this.panLimited = bl2;
            return this;
        }

        public void start() {
            if (SubsamplingScaleImageView.this.anim != null && SubsamplingScaleImageView.this.anim.listener != null) {
                try {
                    SubsamplingScaleImageView.this.anim.listener.onInterruptedByNewAnim();
                }
                catch (Exception exception) {
                    Log.w((String)TAG, (String)"Error thrown by animation listener", (Throwable)exception);
                }
            }
            int n2 = SubsamplingScaleImageView.this.getPaddingLeft();
            int n3 = (SubsamplingScaleImageView.this.getWidth() - SubsamplingScaleImageView.this.getPaddingRight() - SubsamplingScaleImageView.this.getPaddingLeft()) / 2;
            int n4 = SubsamplingScaleImageView.this.getPaddingTop();
            int n5 = (SubsamplingScaleImageView.this.getHeight() - SubsamplingScaleImageView.this.getPaddingBottom() - SubsamplingScaleImageView.this.getPaddingTop()) / 2;
            float f2 = SubsamplingScaleImageView.this.limitedScale(this.targetScale);
            Object object = this.panLimited ? SubsamplingScaleImageView.this.limitedSCenter(this.targetSCenter.x, this.targetSCenter.y, f2, new PointF()) : this.targetSCenter;
            SubsamplingScaleImageView.this.anim = new Anim();
            SubsamplingScaleImageView.this.anim.scaleStart = SubsamplingScaleImageView.this.scale;
            SubsamplingScaleImageView.this.anim.scaleEnd = f2;
            SubsamplingScaleImageView.this.anim.time = System.currentTimeMillis();
            SubsamplingScaleImageView.this.anim.sCenterEndRequested = object;
            SubsamplingScaleImageView.this.anim.sCenterStart = SubsamplingScaleImageView.this.getCenter();
            SubsamplingScaleImageView.this.anim.sCenterEnd = object;
            SubsamplingScaleImageView.this.anim.vFocusStart = SubsamplingScaleImageView.this.sourceToViewCoord((PointF)object);
            SubsamplingScaleImageView.this.anim.vFocusEnd = new PointF((float)(n2 + n3), (float)(n4 + n5));
            SubsamplingScaleImageView.this.anim.duration = this.duration;
            SubsamplingScaleImageView.this.anim.interruptible = this.interruptible;
            SubsamplingScaleImageView.this.anim.easing = this.easing;
            SubsamplingScaleImageView.this.anim.origin = this.origin;
            SubsamplingScaleImageView.this.anim.time = System.currentTimeMillis();
            SubsamplingScaleImageView.this.anim.listener = this.listener;
            if (this.vFocus != null) {
                float f3 = this.vFocus.x - Anim.access$4400((Anim)SubsamplingScaleImageView.access$6400((SubsamplingScaleImageView)SubsamplingScaleImageView.this)).x * f2;
                float f4 = this.vFocus.y - Anim.access$4400((Anim)SubsamplingScaleImageView.access$6400((SubsamplingScaleImageView)SubsamplingScaleImageView.this)).y * f2;
                object = new ScaleAndTranslate(f2, new PointF(f3, f4));
                SubsamplingScaleImageView.this.fitToBounds(true, (ScaleAndTranslate)object);
                SubsamplingScaleImageView.this.anim.vFocusEnd = new PointF(this.vFocus.x + (ScaleAndTranslate.access$4800((ScaleAndTranslate)object).x - f3), this.vFocus.y + (ScaleAndTranslate.access$4800((ScaleAndTranslate)object).y - f4));
            }
            SubsamplingScaleImageView.this.invalidate();
        }

        public AnimationBuilder withDuration(long l2) {
            this.duration = l2;
            return this;
        }

        public AnimationBuilder withEasing(int n2) {
            if (VALID_EASING_STYLES.contains(n2)) {
                this.easing = n2;
                return this;
            }
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("Unknown easing type: ");
            stringBuilder.append(n2);
            throw new IllegalArgumentException(stringBuilder.toString());
        }

        public AnimationBuilder withInterruptible(boolean bl2) {
            this.interruptible = bl2;
            return this;
        }

        public AnimationBuilder withOnAnimationEventListener(OnAnimationEventListener onAnimationEventListener) {
            this.listener = onAnimationEventListener;
            return this;
        }
    }

    private static class BitmapLoadTask
    extends AsyncTask<Void, Void, Integer> {
        private Bitmap bitmap;
        private final WeakReference<Context> contextRef;
        private final WeakReference<DecoderFactory<? extends ImageDecoder>> decoderFactoryRef;
        private Exception exception;
        private final boolean preview;
        private final Uri source;
        private final WeakReference<SubsamplingScaleImageView> viewRef;

        BitmapLoadTask(SubsamplingScaleImageView subsamplingScaleImageView, Context context, DecoderFactory<? extends ImageDecoder> decoderFactory, Uri uri, boolean bl2) {
            this.viewRef = new WeakReference<SubsamplingScaleImageView>(subsamplingScaleImageView);
            this.contextRef = new WeakReference<Context>(context);
            this.decoderFactoryRef = new WeakReference<DecoderFactory<? extends ImageDecoder>>(decoderFactory);
            this.source = uri;
            this.preview = bl2;
        }

        /*
         * Enabled force condition propagation
         * Lifted jumps to return sites
         */
        protected /* varargs */ Integer doInBackground(Void ... object) {
            int n2;
            String string2 = this.source.toString();
            Context context = this.contextRef.get();
            DecoderFactory<? extends ImageDecoder> decoderFactory = this.decoderFactoryRef.get();
            SubsamplingScaleImageView subsamplingScaleImageView = this.viewRef.get();
            if (context == null || decoderFactory == null || subsamplingScaleImageView == null) return null;
            try {
                subsamplingScaleImageView.debug("BitmapLoadTask.doInBackground", new Object[0]);
                this.bitmap = decoderFactory.make().decode(context, this.source);
                n2 = subsamplingScaleImageView.getExifOrientation(context, string2);
            }
            catch (OutOfMemoryError outOfMemoryError) {
                Log.e((String)TAG, (String)"Failed to load bitmap - OutOfMemoryError", (Throwable)outOfMemoryError);
                this.exception = new RuntimeException(outOfMemoryError);
                return null;
            }
            catch (Exception exception) {
                Log.e((String)TAG, (String)"Failed to load bitmap", (Throwable)exception);
                this.exception = exception;
            }
            return n2;
            return null;
        }

        protected void onPostExecute(Integer n2) {
            SubsamplingScaleImageView subsamplingScaleImageView = this.viewRef.get();
            if (subsamplingScaleImageView != null) {
                if (this.bitmap != null && n2 != null) {
                    if (this.preview) {
                        subsamplingScaleImageView.onPreviewLoaded(this.bitmap);
                        return;
                    }
                    subsamplingScaleImageView.onImageLoaded(this.bitmap, n2, false);
                    return;
                }
                if (this.exception != null && subsamplingScaleImageView.onImageEventListener != null) {
                    if (this.preview) {
                        subsamplingScaleImageView.onImageEventListener.onPreviewLoadError(this.exception);
                        return;
                    }
                    subsamplingScaleImageView.onImageEventListener.onImageLoadError(this.exception);
                }
            }
        }
    }

    public static class DefaultOnAnimationEventListener
    implements OnAnimationEventListener {
        @Override
        public void onComplete() {
        }

        @Override
        public void onInterruptedByNewAnim() {
        }

        @Override
        public void onInterruptedByUser() {
        }
    }

    public static class DefaultOnImageEventListener
    implements OnImageEventListener {
        @Override
        public void onImageLoadError(Exception exception) {
        }

        @Override
        public void onImageLoaded() {
        }

        @Override
        public void onPreviewLoadError(Exception exception) {
        }

        @Override
        public void onPreviewReleased() {
        }

        @Override
        public void onReady() {
        }

        @Override
        public void onTileLoadError(Exception exception) {
        }
    }

    public static class DefaultOnStateChangedListener
    implements OnStateChangedListener {
        @Override
        public void onCenterChanged(PointF pointF, int n2) {
        }

        @Override
        public void onScaleChanged(float f2, int n2) {
        }
    }

    public static interface OnAnimationEventListener {
        public void onComplete();

        public void onInterruptedByNewAnim();

        public void onInterruptedByUser();
    }

    public static interface OnImageEventListener {
        public void onImageLoadError(Exception var1);

        public void onImageLoaded();

        public void onPreviewLoadError(Exception var1);

        public void onPreviewReleased();

        public void onReady();

        public void onTileLoadError(Exception var1);
    }

    public static interface OnStateChangedListener {
        public void onCenterChanged(PointF var1, int var2);

        public void onScaleChanged(float var1, int var2);
    }

    private static class ScaleAndTranslate {
        private float scale;
        private final PointF vTranslate;

        private ScaleAndTranslate(float f2, PointF pointF) {
            this.scale = f2;
            this.vTranslate = pointF;
        }
    }

    private static class Tile {
        private Bitmap bitmap;
        private Rect fileSRect;
        private boolean loading;
        private Rect sRect;
        private int sampleSize;
        private Rect vRect;
        private boolean visible;

        private Tile() {
        }

        static /* synthetic */ boolean access$400(Tile tile) {
            return tile.visible;
        }

        static /* synthetic */ Rect access$4200(Tile tile) {
            return tile.vRect;
        }

        static /* synthetic */ Rect access$5000(Tile tile) {
            return tile.fileSRect;
        }
    }

    private static class TileLoadTask
    extends AsyncTask<Void, Void, Bitmap> {
        private final WeakReference<ImageRegionDecoder> decoderRef;
        private Exception exception;
        private final WeakReference<Tile> tileRef;
        private final WeakReference<SubsamplingScaleImageView> viewRef;

        TileLoadTask(SubsamplingScaleImageView subsamplingScaleImageView, ImageRegionDecoder imageRegionDecoder, Tile tile) {
            this.viewRef = new WeakReference<SubsamplingScaleImageView>(subsamplingScaleImageView);
            this.decoderRef = new WeakReference<ImageRegionDecoder>(imageRegionDecoder);
            this.tileRef = new WeakReference<Tile>(tile);
            tile.loading = true;
        }

        /*
         * Unable to fully structure code
         * Enabled aggressive block sorting
         * Enabled unnecessary exception pruning
         * Enabled aggressive exception aggregation
         * Lifted jumps to return sites
         */
        protected /* varargs */ Bitmap doInBackground(Void ... object) {
            block9 : {
                object /* !! */  = this.viewRef.get();
                imageRegionDecoder = this.decoderRef.get();
                tile = this.tileRef.get();
                if (imageRegionDecoder == null || tile == null || object /* !! */  == null || !imageRegionDecoder.isReady() || !Tile.access$400(tile)) ** GOTO lbl26
                SubsamplingScaleImageView.access$5100((SubsamplingScaleImageView)object /* !! */ , "TileLoadTask.doInBackground, tile.sRect=%s, tile.sampleSize=%d", new Object[]{Tile.access$4100(tile), Tile.access$4300(tile)});
                SubsamplingScaleImageView.access$5700((SubsamplingScaleImageView)object /* !! */ ).readLock().lock();
                if (!imageRegionDecoder.isReady()) break block9;
                SubsamplingScaleImageView.access$5800((SubsamplingScaleImageView)object /* !! */ , Tile.access$4100(tile), Tile.access$5000(tile));
                if (SubsamplingScaleImageView.access$5300((SubsamplingScaleImageView)object /* !! */ ) != null) {
                    Tile.access$5000(tile).offset(SubsamplingScaleImageView.access$5300((SubsamplingScaleImageView)object /* !! */ ).left, SubsamplingScaleImageView.access$5300((SubsamplingScaleImageView)object /* !! */ ).top);
                }
                imageRegionDecoder = imageRegionDecoder.decodeRegion(Tile.access$5000(tile), Tile.access$4300(tile));
                {
                    catch (Throwable throwable) {
                        SubsamplingScaleImageView.access$5700((SubsamplingScaleImageView)object /* !! */ ).readLock().unlock();
                        throw throwable;
                    }
                }
                SubsamplingScaleImageView.access$5700((SubsamplingScaleImageView)object /* !! */ ).readLock().unlock();
                return imageRegionDecoder;
            }
            Tile.access$4002(tile, false);
            try {
                SubsamplingScaleImageView.access$5700((SubsamplingScaleImageView)object /* !! */ ).readLock().unlock();
                return null;
lbl26: // 1 sources:
                if (tile == null) return null;
                Tile.access$4002(tile, false);
                return null;
            }
            catch (OutOfMemoryError outOfMemoryError) {
                Log.e((String)SubsamplingScaleImageView.access$5400(), (String)"Failed to decode tile - OutOfMemoryError", (Throwable)outOfMemoryError);
                this.exception = new RuntimeException(outOfMemoryError);
                return null;
            }
            catch (Exception exception) {
                Log.e((String)SubsamplingScaleImageView.access$5400(), (String)"Failed to decode tile", (Throwable)exception);
                this.exception = exception;
            }
            return null;
        }

        protected void onPostExecute(Bitmap bitmap) {
            SubsamplingScaleImageView subsamplingScaleImageView = this.viewRef.get();
            Tile tile = this.tileRef.get();
            if (subsamplingScaleImageView != null && tile != null) {
                if (bitmap != null) {
                    tile.bitmap = bitmap;
                    tile.loading = false;
                    subsamplingScaleImageView.onTileLoaded();
                    return;
                }
                if (this.exception != null && subsamplingScaleImageView.onImageEventListener != null) {
                    subsamplingScaleImageView.onImageEventListener.onTileLoadError(this.exception);
                }
            }
        }
    }

    private static class TilesInitTask
    extends AsyncTask<Void, Void, int[]> {
        private final WeakReference<Context> contextRef;
        private ImageRegionDecoder decoder;
        private final WeakReference<DecoderFactory<? extends ImageRegionDecoder>> decoderFactoryRef;
        private Exception exception;
        private final Uri source;
        private final WeakReference<SubsamplingScaleImageView> viewRef;

        TilesInitTask(SubsamplingScaleImageView subsamplingScaleImageView, Context context, DecoderFactory<? extends ImageRegionDecoder> decoderFactory, Uri uri) {
            this.viewRef = new WeakReference<SubsamplingScaleImageView>(subsamplingScaleImageView);
            this.contextRef = new WeakReference<Context>(context);
            this.decoderFactoryRef = new WeakReference<DecoderFactory<? extends ImageRegionDecoder>>(decoderFactory);
            this.source = uri;
        }

        protected /* varargs */ int[] doInBackground(Void ... object) {
            block4 : {
                int n2;
                int n3;
                int n4;
                block5 : {
                    object = this.source.toString();
                    Context context = this.contextRef.get();
                    Point point = this.decoderFactoryRef.get();
                    SubsamplingScaleImageView subsamplingScaleImageView = this.viewRef.get();
                    if (context == null || point == null || subsamplingScaleImageView == null) break block4;
                    subsamplingScaleImageView.debug("TilesInitTask.doInBackground", new Object[0]);
                    this.decoder = point.make();
                    point = this.decoder.init(context, this.source);
                    int n5 = point.x;
                    int n6 = point.y;
                    n3 = subsamplingScaleImageView.getExifOrientation(context, (String)object);
                    n2 = n6;
                    n4 = n5;
                    try {
                        if (subsamplingScaleImageView.sRegion == null) break block5;
                        SubsamplingScaleImageView.access$5300((SubsamplingScaleImageView)subsamplingScaleImageView).left = Math.max(0, SubsamplingScaleImageView.access$5300((SubsamplingScaleImageView)subsamplingScaleImageView).left);
                        SubsamplingScaleImageView.access$5300((SubsamplingScaleImageView)subsamplingScaleImageView).top = Math.max(0, SubsamplingScaleImageView.access$5300((SubsamplingScaleImageView)subsamplingScaleImageView).top);
                        SubsamplingScaleImageView.access$5300((SubsamplingScaleImageView)subsamplingScaleImageView).right = Math.min(n5, SubsamplingScaleImageView.access$5300((SubsamplingScaleImageView)subsamplingScaleImageView).right);
                        SubsamplingScaleImageView.access$5300((SubsamplingScaleImageView)subsamplingScaleImageView).bottom = Math.min(n6, SubsamplingScaleImageView.access$5300((SubsamplingScaleImageView)subsamplingScaleImageView).bottom);
                        n4 = subsamplingScaleImageView.sRegion.width();
                        n2 = subsamplingScaleImageView.sRegion.height();
                    }
                    catch (Exception exception) {
                        Log.e((String)TAG, (String)"Failed to initialise bitmap decoder", (Throwable)exception);
                        this.exception = exception;
                    }
                }
                return new int[]{n4, n2, n3};
            }
            return null;
        }

        protected void onPostExecute(int[] arrn) {
            SubsamplingScaleImageView subsamplingScaleImageView = this.viewRef.get();
            if (subsamplingScaleImageView != null) {
                if (this.decoder != null && arrn != null && arrn.length == 3) {
                    subsamplingScaleImageView.onTilesInited(this.decoder, arrn[0], arrn[1], arrn[2]);
                    return;
                }
                if (this.exception != null && subsamplingScaleImageView.onImageEventListener != null) {
                    subsamplingScaleImageView.onImageEventListener.onImageLoadError(this.exception);
                }
            }
        }
    }

}

