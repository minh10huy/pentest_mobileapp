/*
 * Decompiled with CFR 0_132.
 */
package com.google.a.b.a;

import com.google.a.d.c;
import com.google.a.g;
import com.google.a.j;
import com.google.a.l;
import com.google.a.m;
import com.google.a.o;
import java.io.IOException;
import java.io.Writer;
import java.util.ArrayList;
import java.util.List;

public final class f
extends c {
    private static final Writer a = new Writer(){

        @Override
        public void close() {
            throw new AssertionError();
        }

        @Override
        public void flush() {
            throw new AssertionError();
        }

        @Override
        public void write(char[] arrc, int n2, int n3) {
            throw new AssertionError();
        }
    };
    private static final o b = new o("closed");
    private final List<j> c = new ArrayList<j>();
    private String d;
    private j e = l.a;

    public f() {
        super(a);
    }

    private void a(j j2) {
        if (this.d != null) {
            if (!j2.j() || this.i()) {
                ((m)this.j()).a(this.d, j2);
            }
            this.d = null;
            return;
        }
        if (this.c.isEmpty()) {
            this.e = j2;
            return;
        }
        j j3 = this.j();
        if (j3 instanceof g) {
            ((g)j3).a(j2);
            return;
        }
        throw new IllegalStateException();
    }

    private j j() {
        return this.c.get(this.c.size() - 1);
    }

    @Override
    public c a(long l2) {
        this.a(new o(l2));
        return this;
    }

    @Override
    public c a(Boolean bl2) {
        if (bl2 == null) {
            return this.f();
        }
        this.a(new o(bl2));
        return this;
    }

    @Override
    public c a(Number number) {
        double d2;
        if (number == null) {
            return this.f();
        }
        if (!this.g() && (Double.isNaN(d2 = number.doubleValue()) || Double.isInfinite(d2))) {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("JSON forbids NaN and infinities: ");
            stringBuilder.append(number);
            throw new IllegalArgumentException(stringBuilder.toString());
        }
        this.a(new o(number));
        return this;
    }

    @Override
    public c a(String string2) {
        if (!this.c.isEmpty() && this.d == null) {
            if (this.j() instanceof m) {
                this.d = string2;
                return this;
            }
            throw new IllegalStateException();
        }
        throw new IllegalStateException();
    }

    @Override
    public c a(boolean bl2) {
        this.a(new o(bl2));
        return this;
    }

    public j a() {
        if (this.c.isEmpty()) {
            return this.e;
        }
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("Expected one JSON element but was ");
        stringBuilder.append(this.c);
        throw new IllegalStateException(stringBuilder.toString());
    }

    @Override
    public c b() {
        g g2 = new g();
        this.a(g2);
        this.c.add(g2);
        return this;
    }

    @Override
    public c b(String string2) {
        if (string2 == null) {
            return this.f();
        }
        this.a(new o(string2));
        return this;
    }

    @Override
    public c c() {
        if (!this.c.isEmpty() && this.d == null) {
            if (this.j() instanceof g) {
                this.c.remove(this.c.size() - 1);
                return this;
            }
            throw new IllegalStateException();
        }
        throw new IllegalStateException();
    }

    @Override
    public void close() {
        if (this.c.isEmpty()) {
            this.c.add(b);
            return;
        }
        throw new IOException("Incomplete document");
    }

    @Override
    public c d() {
        m m2 = new m();
        this.a(m2);
        this.c.add(m2);
        return this;
    }

    @Override
    public c e() {
        if (!this.c.isEmpty() && this.d == null) {
            if (this.j() instanceof m) {
                this.c.remove(this.c.size() - 1);
                return this;
            }
            throw new IllegalStateException();
        }
        throw new IllegalStateException();
    }

    @Override
    public c f() {
        this.a(l.a);
        return this;
    }

    @Override
    public void flush() {
    }

}

