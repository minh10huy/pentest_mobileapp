/*
 * Decompiled with CFR 0_132.
 */
package com.google.a.b.a;

import com.google.a.d.a;
import com.google.a.d.b;
import com.google.a.g;
import com.google.a.j;
import com.google.a.l;
import com.google.a.m;
import com.google.a.o;
import java.io.Reader;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;

public final class e
extends a {
    private static final Reader b = new Reader(){

        @Override
        public void close() {
            throw new AssertionError();
        }

        @Override
        public int read(char[] arrc, int n2, int n3) {
            throw new AssertionError();
        }
    };
    private static final Object c = new Object();
    private Object[] d;
    private int e;
    private String[] f;
    private int[] g;

    private void a(b b2) {
        if (this.f() == b2) {
            return;
        }
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("Expected ");
        stringBuilder.append((Object)b2);
        stringBuilder.append(" but was ");
        stringBuilder.append((Object)this.f());
        stringBuilder.append(this.v());
        throw new IllegalStateException(stringBuilder.toString());
    }

    private void a(Object object) {
        Object[] arrobject;
        if (this.e == this.d.length) {
            arrobject = new Object[this.e * 2];
            int[] arrn = new int[this.e * 2];
            String[] arrstring = new String[this.e * 2];
            System.arraycopy(this.d, 0, arrobject, 0, this.e);
            System.arraycopy(this.g, 0, arrn, 0, this.e);
            System.arraycopy(this.f, 0, arrstring, 0, this.e);
            this.d = arrobject;
            this.g = arrn;
            this.f = arrstring;
        }
        arrobject = this.d;
        int n2 = this.e;
        this.e = n2 + 1;
        arrobject[n2] = object;
    }

    private Object t() {
        return this.d[this.e - 1];
    }

    private Object u() {
        int n2;
        Object object = this.d;
        this.e = n2 = this.e - 1;
        object = object[n2];
        this.d[this.e] = null;
        return object;
    }

    private String v() {
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append(" at path ");
        stringBuilder.append(this.p());
        return stringBuilder.toString();
    }

    @Override
    public void a() {
        this.a(b.a);
        this.a(((g)this.t()).iterator());
        this.g[this.e - 1] = 0;
    }

    @Override
    public void b() {
        this.a(b.b);
        this.u();
        this.u();
        if (this.e > 0) {
            int[] arrn = this.g;
            int n2 = this.e - 1;
            arrn[n2] = arrn[n2] + 1;
        }
    }

    @Override
    public void c() {
        this.a(b.c);
        this.a(((m)this.t()).o().iterator());
    }

    @Override
    public void close() {
        this.d = new Object[]{c};
        this.e = 1;
    }

    @Override
    public void d() {
        this.a(b.d);
        this.u();
        this.u();
        if (this.e > 0) {
            int[] arrn = this.g;
            int n2 = this.e - 1;
            arrn[n2] = arrn[n2] + 1;
        }
    }

    @Override
    public boolean e() {
        b b2 = this.f();
        if (b2 != b.d && b2 != b.b) {
            return true;
        }
        return false;
    }

    @Override
    public b f() {
        if (this.e == 0) {
            return b.j;
        }
        Object object = this.t();
        if (object instanceof Iterator) {
            boolean bl2 = this.d[this.e - 2] instanceof m;
            if ((object = (Iterator)object).hasNext()) {
                if (bl2) {
                    return b.e;
                }
                this.a(object.next());
                return this.f();
            }
            if (bl2) {
                return b.d;
            }
            return b.b;
        }
        if (object instanceof m) {
            return b.c;
        }
        if (object instanceof g) {
            return b.a;
        }
        if (object instanceof o) {
            if ((object = (o)object).q()) {
                return b.f;
            }
            if (object.o()) {
                return b.h;
            }
            if (object.p()) {
                return b.g;
            }
            throw new AssertionError();
        }
        if (object instanceof l) {
            return b.i;
        }
        if (object == c) {
            throw new IllegalStateException("JsonReader is closed");
        }
        throw new AssertionError();
    }

    @Override
    public String g() {
        String string2;
        this.a(b.e);
        Map.Entry entry = (Map.Entry)((Iterator)this.t()).next();
        this.f[this.e - 1] = string2 = (String)entry.getKey();
        this.a(entry.getValue());
        return string2;
    }

    @Override
    public String h() {
        Object object = this.f();
        if (object != b.f && object != b.g) {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("Expected ");
            stringBuilder.append((Object)b.f);
            stringBuilder.append(" but was ");
            stringBuilder.append(object);
            stringBuilder.append(this.v());
            throw new IllegalStateException(stringBuilder.toString());
        }
        object = ((o)this.u()).b();
        if (this.e > 0) {
            int[] arrn = this.g;
            int n2 = this.e - 1;
            arrn[n2] = arrn[n2] + 1;
        }
        return object;
    }

    @Override
    public boolean i() {
        this.a(b.h);
        boolean bl2 = ((o)this.u()).f();
        if (this.e > 0) {
            int[] arrn = this.g;
            int n2 = this.e - 1;
            arrn[n2] = arrn[n2] + 1;
        }
        return bl2;
    }

    @Override
    public void j() {
        this.a(b.i);
        this.u();
        if (this.e > 0) {
            int[] arrn = this.g;
            int n2 = this.e - 1;
            arrn[n2] = arrn[n2] + 1;
        }
    }

    @Override
    public double k() {
        Object object = this.f();
        if (object != b.g && object != b.f) {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("Expected ");
            stringBuilder.append((Object)b.g);
            stringBuilder.append(" but was ");
            stringBuilder.append(object);
            stringBuilder.append(this.v());
            throw new IllegalStateException(stringBuilder.toString());
        }
        double d2 = ((o)this.t()).c();
        if (!this.q() && (Double.isNaN(d2) || Double.isInfinite(d2))) {
            object = new StringBuilder();
            object.append("JSON forbids NaN and infinities: ");
            object.append(d2);
            throw new NumberFormatException(object.toString());
        }
        this.u();
        if (this.e > 0) {
            object = this.g;
            int n2 = this.e - 1;
            object[n2] = object[n2] + 1;
        }
        return d2;
    }

    @Override
    public long l() {
        int[] arrn = this.f();
        if (arrn != b.g && arrn != b.f) {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("Expected ");
            stringBuilder.append((Object)b.g);
            stringBuilder.append(" but was ");
            stringBuilder.append(arrn);
            stringBuilder.append(this.v());
            throw new IllegalStateException(stringBuilder.toString());
        }
        long l2 = ((o)this.t()).d();
        this.u();
        if (this.e > 0) {
            arrn = this.g;
            int n2 = this.e - 1;
            arrn[n2] = arrn[n2] + 1;
        }
        return l2;
    }

    @Override
    public int m() {
        int[] arrn = this.f();
        if (arrn != b.g && arrn != b.f) {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("Expected ");
            stringBuilder.append((Object)b.g);
            stringBuilder.append(" but was ");
            stringBuilder.append(arrn);
            stringBuilder.append(this.v());
            throw new IllegalStateException(stringBuilder.toString());
        }
        int n2 = ((o)this.t()).e();
        this.u();
        if (this.e > 0) {
            arrn = this.g;
            int n3 = this.e - 1;
            arrn[n3] = arrn[n3] + 1;
        }
        return n2;
    }

    @Override
    public void n() {
        if (this.f() == b.e) {
            this.g();
            this.f[this.e - 2] = "null";
        } else {
            this.u();
            if (this.e > 0) {
                this.f[this.e - 1] = "null";
            }
        }
        if (this.e > 0) {
            int[] arrn = this.g;
            int n2 = this.e - 1;
            arrn[n2] = arrn[n2] + 1;
        }
    }

    public void o() {
        this.a(b.e);
        Map.Entry entry = (Map.Entry)((Iterator)this.t()).next();
        this.a(entry.getValue());
        this.a(new o((String)entry.getKey()));
    }

    @Override
    public String p() {
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append('$');
        int n2 = 0;
        while (n2 < this.e) {
            int n3;
            Object[] arrobject;
            if (this.d[n2] instanceof g) {
                arrobject = this.d;
                n3 = ++n2;
                if (arrobject[n2] instanceof Iterator) {
                    stringBuilder.append('[');
                    stringBuilder.append(this.g[n2]);
                    stringBuilder.append(']');
                    n3 = n2;
                }
            } else {
                n3 = n2;
                if (this.d[n2] instanceof m) {
                    arrobject = this.d;
                    n3 = ++n2;
                    if (arrobject[n2] instanceof Iterator) {
                        stringBuilder.append('.');
                        n3 = n2;
                        if (this.f[n2] != null) {
                            stringBuilder.append(this.f[n2]);
                            n3 = n2;
                        }
                    }
                }
            }
            n2 = n3 + 1;
        }
        return stringBuilder.toString();
    }

    @Override
    public String toString() {
        return this.getClass().getSimpleName();
    }

}

