/*
 * Decompiled with CFR 0_132.
 */
package com.google.a.b;

import java.io.Serializable;
import java.lang.reflect.Array;
import java.lang.reflect.GenericArrayType;
import java.lang.reflect.Modifier;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.lang.reflect.TypeVariable;
import java.lang.reflect.WildcardType;
import java.util.Arrays;
import java.util.Collection;
import java.util.HashSet;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Properties;

public final class b {
    static final Type[] a = new Type[0];

    static int a(Object object) {
        if (object != null) {
            return object.hashCode();
        }
        return 0;
    }

    private static int a(Object[] arrobject, Object object) {
        int n2 = arrobject.length;
        for (int i2 = 0; i2 < n2; ++i2) {
            if (!object.equals(arrobject[i2])) continue;
            return i2;
        }
        throw new NoSuchElementException();
    }

    private static Class<?> a(TypeVariable<?> typeVariable) {
        if ((typeVariable = typeVariable.getGenericDeclaration()) instanceof Class) {
            return (Class)((Object)typeVariable);
        }
        return null;
    }

    public static GenericArrayType a(Type type2) {
        return new a(type2);
    }

    public static /* varargs */ ParameterizedType a(Type type2, Type type3, Type ... arrtype) {
        return new b(type2, type3, arrtype);
    }

    public static Type a(Type type2, Class<?> type3) {
        type2 = type3 = b.b(type2, type3, Collection.class);
        if (type3 instanceof WildcardType) {
            type2 = ((WildcardType)type3).getUpperBounds()[0];
        }
        if (type2 instanceof ParameterizedType) {
            return ((ParameterizedType)type2).getActualTypeArguments()[0];
        }
        return Object.class;
    }

    static Type a(Type object, Class<?> object2, Class<?> class_) {
        if (class_ == object2) {
            return object;
        }
        if (class_.isInterface()) {
            object = object2.getInterfaces();
            int n2 = ((Class<?>[])object).length;
            for (int i2 = 0; i2 < n2; ++i2) {
                if (object[i2] == class_) {
                    return object2.getGenericInterfaces()[i2];
                }
                if (!class_.isAssignableFrom(object[i2])) continue;
                return b.a(object2.getGenericInterfaces()[i2], object[i2], class_);
            }
        }
        if (!object2.isInterface()) {
            while (object2 != Object.class) {
                object = object2.getSuperclass();
                if (object == class_) {
                    return object2.getGenericSuperclass();
                }
                if (class_.isAssignableFrom((Class<?>)object)) {
                    return b.a(object2.getGenericSuperclass(), object, class_);
                }
                object2 = object;
            }
        }
        return class_;
    }

    public static Type a(Type type2, Class<?> class_, Type type3) {
        return b.a(type2, class_, type3, new HashSet<TypeVariable>());
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    private static Type a(Type type2, Class<?> class_, Type type3, Collection<TypeVariable> collection) {
        Object object;
        Type type4;
        while (type3 instanceof TypeVariable) {
            type4 = (TypeVariable)type3;
            if (collection.contains(type4)) {
                return type3;
            }
            collection.add((TypeVariable)type4);
            object = b.a(type2, class_, type4);
            type3 = object;
            if (object != type4) continue;
            return object;
        }
        if (type3 instanceof Class && (object = (Class)type3).isArray()) {
            type3 = object.getComponentType();
            if (type3 != (type2 = b.a(type2, class_, type3, collection))) return b.a(type2);
            return object;
        }
        if (type3 instanceof GenericArrayType) {
            object = (type3 = (GenericArrayType)type3).getGenericComponentType();
            if (object != (type2 = b.a(type2, class_, (Type)object, collection))) return b.a(type2);
            return type3;
        }
        boolean bl2 = type3 instanceof ParameterizedType;
        if (bl2) {
            type4 = (ParameterizedType)type3;
            type3 = type4.getOwnerType();
            Type type5 = b.a(type2, class_, type3, collection);
            boolean bl3 = type5 != type3;
            type3 = type4.getActualTypeArguments();
            int n2 = ((Type)type3).length;
            for (int i2 = 0; i2 < n2; ++i2) {
                Type type6 = b.a(type2, class_, type3[i2], collection);
                boolean bl4 = bl3;
                object = type3;
                if (type6 != type3[i2]) {
                    bl4 = bl3;
                    object = type3;
                    if (!bl3) {
                        object = (Type[])type3.clone();
                        bl4 = true;
                    }
                    object[i2] = type6;
                }
                bl3 = bl4;
                type3 = object;
            }
            type2 = type4;
            if (!bl3) return type2;
            return b.a(type5, type4.getRawType(), (Type[])type3);
        }
        object = type3;
        if (!(type3 instanceof WildcardType)) return object;
        type3 = (WildcardType)type3;
        Type[] arrtype = type3.getLowerBounds();
        type4 = type3.getUpperBounds();
        if (arrtype.length == 1) {
            type2 = b.a(type2, class_, arrtype[0], collection);
            object = type3;
            if (type2 == arrtype[0]) return object;
            return b.c(type2);
        }
        object = type3;
        if (((Type)type4).length != 1) return object;
        object = type4[0];
        type2 = b.a(type2, class_, (Type)object, collection);
        object = type3;
        if (type2 == type4[0]) return object;
        return b.b(type2);
    }

    static Type a(Type type2, Class<?> class_, TypeVariable<?> typeVariable) {
        Class<?> class_2 = b.a(typeVariable);
        if (class_2 == null) {
            return typeVariable;
        }
        if ((type2 = b.a(type2, class_, class_2)) instanceof ParameterizedType) {
            int n2 = b.a(class_2.getTypeParameters(), typeVariable);
            return ((ParameterizedType)type2).getActualTypeArguments()[n2];
        }
        return typeVariable;
    }

    static boolean a(Object object, Object object2) {
        if (!(object == object2 || object != null && object.equals(object2))) {
            return false;
        }
        return true;
    }

    public static boolean a(Type type2, Type type3) {
        if (type2 == type3) {
            return true;
        }
        if (type2 instanceof Class) {
            return type2.equals(type3);
        }
        if (type2 instanceof ParameterizedType) {
            if (!(type3 instanceof ParameterizedType)) {
                return false;
            }
            type2 = (ParameterizedType)type2;
            type3 = (ParameterizedType)type3;
            if (b.a((Object)type2.getOwnerType(), (Object)type3.getOwnerType()) && type2.getRawType().equals(type3.getRawType()) && Arrays.equals(type2.getActualTypeArguments(), type3.getActualTypeArguments())) {
                return true;
            }
            return false;
        }
        if (type2 instanceof GenericArrayType) {
            if (!(type3 instanceof GenericArrayType)) {
                return false;
            }
            type2 = (GenericArrayType)type2;
            type3 = (GenericArrayType)type3;
            return b.a(type2.getGenericComponentType(), type3.getGenericComponentType());
        }
        if (type2 instanceof WildcardType) {
            if (!(type3 instanceof WildcardType)) {
                return false;
            }
            type2 = (WildcardType)type2;
            type3 = (WildcardType)type3;
            if (Arrays.equals(type2.getUpperBounds(), type3.getUpperBounds()) && Arrays.equals(type2.getLowerBounds(), type3.getLowerBounds())) {
                return true;
            }
            return false;
        }
        if (type2 instanceof TypeVariable) {
            if (!(type3 instanceof TypeVariable)) {
                return false;
            }
            type2 = (TypeVariable)type2;
            type3 = (TypeVariable)type3;
            if (type2.getGenericDeclaration() == type3.getGenericDeclaration() && type2.getName().equals(type3.getName())) {
                return true;
            }
            return false;
        }
        return false;
    }

    static Type b(Type type2, Class<?> class_, Class<?> class_2) {
        com.google.a.b.a.a(class_2.isAssignableFrom(class_));
        return b.a(type2, class_, b.a(type2, class_, class_2));
    }

    public static WildcardType b(Type arrtype) {
        arrtype = arrtype instanceof WildcardType ? ((WildcardType)arrtype).getUpperBounds() : new Type[]{arrtype};
        return new c(arrtype, a);
    }

    public static Type[] b(Type type2, Class<?> class_) {
        if (type2 == Properties.class) {
            return new Type[]{String.class, String.class};
        }
        if ((type2 = b.b(type2, class_, Map.class)) instanceof ParameterizedType) {
            return ((ParameterizedType)type2).getActualTypeArguments();
        }
        return new Type[]{Object.class, Object.class};
    }

    public static WildcardType c(Type arrtype) {
        arrtype = arrtype instanceof WildcardType ? ((WildcardType)arrtype).getLowerBounds() : new Type[]{arrtype};
        return new c(new Type[]{Object.class}, arrtype);
    }

    public static Type d(Type type2) {
        if (type2 instanceof Class) {
            Class class_ = (Class)type2;
            type2 = class_;
            if (class_.isArray()) {
                type2 = new a(b.d(class_.getComponentType()));
            }
            return type2;
        }
        if (type2 instanceof ParameterizedType) {
            type2 = (ParameterizedType)type2;
            return new b(type2.getOwnerType(), type2.getRawType(), type2.getActualTypeArguments());
        }
        if (type2 instanceof GenericArrayType) {
            return new a(((GenericArrayType)type2).getGenericComponentType());
        }
        if (type2 instanceof WildcardType) {
            type2 = (WildcardType)type2;
            return new c(type2.getUpperBounds(), type2.getLowerBounds());
        }
        return type2;
    }

    public static Class<?> e(Type type2) {
        if (type2 instanceof Class) {
            return (Class)type2;
        }
        if (type2 instanceof ParameterizedType) {
            type2 = ((ParameterizedType)type2).getRawType();
            com.google.a.b.a.a(type2 instanceof Class);
            return (Class)type2;
        }
        if (type2 instanceof GenericArrayType) {
            return Array.newInstance(b.e(((GenericArrayType)type2).getGenericComponentType()), 0).getClass();
        }
        if (type2 instanceof TypeVariable) {
            return Object.class;
        }
        if (type2 instanceof WildcardType) {
            return b.e(((WildcardType)type2).getUpperBounds()[0]);
        }
        String string2 = type2 == null ? "null" : type2.getClass().getName();
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("Expected a Class, ParameterizedType, or GenericArrayType, but <");
        stringBuilder.append(type2);
        stringBuilder.append("> is of type ");
        stringBuilder.append(string2);
        throw new IllegalArgumentException(stringBuilder.toString());
    }

    public static String f(Type type2) {
        if (type2 instanceof Class) {
            return ((Class)type2).getName();
        }
        return type2.toString();
    }

    public static Type g(Type type2) {
        if (type2 instanceof GenericArrayType) {
            return ((GenericArrayType)type2).getGenericComponentType();
        }
        return ((Class)type2).getComponentType();
    }

    static void h(Type type2) {
        boolean bl2 = !(type2 instanceof Class) || !((Class)type2).isPrimitive();
        com.google.a.b.a.a(bl2);
    }

    private static final class a
    implements Serializable,
    GenericArrayType {
        private final Type a;

        public a(Type type2) {
            this.a = b.d(type2);
        }

        public boolean equals(Object object) {
            if (object instanceof GenericArrayType && b.a((Type)this, (GenericArrayType)object)) {
                return true;
            }
            return false;
        }

        @Override
        public Type getGenericComponentType() {
            return this.a;
        }

        public int hashCode() {
            return this.a.hashCode();
        }

        public String toString() {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append(b.f(this.a));
            stringBuilder.append("[]");
            return stringBuilder.toString();
        }
    }

    private static final class b
    implements Serializable,
    ParameterizedType {
        private final Type a;
        private final Type b;
        private final Type[] c;

        public /* varargs */ b(Type type2, Type type3, Type ... arrtype) {
            int n2;
            boolean bl2 = type3 instanceof Class;
            int n3 = 0;
            if (bl2) {
                Class class_ = (Class)type3;
                bl2 = Modifier.isStatic(class_.getModifiers());
                boolean bl3 = true;
                n2 = !bl2 && class_.getEnclosingClass() != null ? 0 : 1;
                bl2 = bl3;
                if (type2 == null) {
                    bl2 = n2 != 0 ? bl3 : false;
                }
                com.google.a.b.a.a(bl2);
            }
            type2 = type2 == null ? null : b.d(type2);
            this.a = type2;
            this.b = b.d(type3);
            this.c = (Type[])arrtype.clone();
            int n4 = this.c.length;
            for (n2 = n3; n2 < n4; ++n2) {
                com.google.a.b.a.a(this.c[n2]);
                b.h(this.c[n2]);
                this.c[n2] = b.d(this.c[n2]);
            }
        }

        public boolean equals(Object object) {
            if (object instanceof ParameterizedType && b.a((Type)this, (ParameterizedType)object)) {
                return true;
            }
            return false;
        }

        @Override
        public Type[] getActualTypeArguments() {
            return (Type[])this.c.clone();
        }

        @Override
        public Type getOwnerType() {
            return this.a;
        }

        @Override
        public Type getRawType() {
            return this.b;
        }

        public int hashCode() {
            return Arrays.hashCode(this.c) ^ this.b.hashCode() ^ b.a((Object)this.a);
        }

        public String toString() {
            int n2 = this.c.length;
            if (n2 == 0) {
                return b.f(this.b);
            }
            StringBuilder stringBuilder = new StringBuilder((n2 + 1) * 30);
            stringBuilder.append(b.f(this.b));
            stringBuilder.append("<");
            stringBuilder.append(b.f(this.c[0]));
            for (int i2 = 1; i2 < n2; ++i2) {
                stringBuilder.append(", ");
                stringBuilder.append(b.f(this.c[i2]));
            }
            stringBuilder.append(">");
            return stringBuilder.toString();
        }
    }

    private static final class c
    implements Serializable,
    WildcardType {
        private final Type a;
        private final Type b;

        public c(Type[] object, Type[] arrtype) {
            int n2 = arrtype.length;
            boolean bl2 = true;
            boolean bl3 = n2 <= 1;
            com.google.a.b.a.a(bl3);
            bl3 = ((Type[])object).length == 1;
            com.google.a.b.a.a(bl3);
            if (arrtype.length == 1) {
                com.google.a.b.a.a(arrtype[0]);
                b.h(arrtype[0]);
                bl3 = object[0] == Object.class ? bl2 : false;
                com.google.a.b.a.a(bl3);
                this.b = b.d(arrtype[0]);
                object = Object.class;
            } else {
                com.google.a.b.a.a(object[0]);
                b.h(object[0]);
                this.b = null;
                object = b.d(object[0]);
            }
            this.a = object;
        }

        public boolean equals(Object object) {
            if (object instanceof WildcardType && b.a((Type)this, (WildcardType)object)) {
                return true;
            }
            return false;
        }

        @Override
        public Type[] getLowerBounds() {
            if (this.b != null) {
                return new Type[]{this.b};
            }
            return b.a;
        }

        @Override
        public Type[] getUpperBounds() {
            return new Type[]{this.a};
        }

        public int hashCode() {
            int n2 = this.b != null ? this.b.hashCode() + 31 : 1;
            return n2 ^ this.a.hashCode() + 31;
        }

        /*
         * Enabled aggressive block sorting
         */
        public String toString() {
            StringBuilder stringBuilder;
            Type type2;
            if (this.b != null) {
                stringBuilder = new StringBuilder();
                stringBuilder.append("? super ");
                type2 = this.b;
            } else {
                if (this.a == Object.class) {
                    return "?";
                }
                stringBuilder = new StringBuilder();
                stringBuilder.append("? extends ");
                type2 = this.a;
            }
            stringBuilder.append(b.f(type2));
            return stringBuilder.toString();
        }
    }

}

