/*
 * Decompiled with CFR 0_132.
 */
package com.google.a.b;

import com.google.a.b.g;
import com.google.a.b.h;
import com.google.a.b.k;
import com.google.a.c.a;
import com.google.a.f;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.EnumSet;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.Map;
import java.util.Queue;
import java.util.Set;
import java.util.SortedMap;
import java.util.SortedSet;
import java.util.TreeMap;
import java.util.TreeSet;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;
import java.util.concurrent.ConcurrentNavigableMap;
import java.util.concurrent.ConcurrentSkipListMap;

public final class c {
    private final Map<Type, f<?>> a;

    public c(Map<Type, f<?>> map) {
        this.a = map;
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    private <T> h<T> a(Class<? super T> object) {
        try {
            object = object.getDeclaredConstructor(new Class[0]);
            if (object.isAccessible()) return new h<T>((Constructor)object){
                final /* synthetic */ Constructor a;
                {
                    this.a = constructor;
                }

                @Override
                public T a() {
                    Object t2;
                    try {
                        t2 = this.a.newInstance(null);
                    }
                    catch (IllegalAccessException illegalAccessException) {
                        throw new AssertionError(illegalAccessException);
                    }
                    catch (InvocationTargetException invocationTargetException) {
                        StringBuilder stringBuilder = new StringBuilder();
                        stringBuilder.append("Failed to invoke ");
                        stringBuilder.append(this.a);
                        stringBuilder.append(" with no args");
                        throw new RuntimeException(stringBuilder.toString(), invocationTargetException.getTargetException());
                    }
                    catch (InstantiationException instantiationException) {
                        StringBuilder stringBuilder = new StringBuilder();
                        stringBuilder.append("Failed to invoke ");
                        stringBuilder.append(this.a);
                        stringBuilder.append(" with no args");
                        throw new RuntimeException(stringBuilder.toString(), instantiationException);
                    }
                    return t2;
                }
            };
            object.setAccessible(true);
            return new /* invalid duplicate definition of identical inner class */;
        }
        catch (NoSuchMethodException noSuchMethodException) {
            return null;
        }
    }

    private <T> h<T> a(final Type type2, Class<? super T> class_) {
        if (Collection.class.isAssignableFrom(class_)) {
            if (SortedSet.class.isAssignableFrom(class_)) {
                return new h<T>(){

                    @Override
                    public T a() {
                        return (T)new TreeSet();
                    }
                };
            }
            if (EnumSet.class.isAssignableFrom(class_)) {
                return new h<T>(){

                    @Override
                    public T a() {
                        if (type2 instanceof ParameterizedType) {
                            Object object = ((ParameterizedType)type2).getActualTypeArguments()[0];
                            if (object instanceof Class) {
                                return (T)EnumSet.noneOf((Class)object);
                            }
                            object = new StringBuilder();
                            object.append("Invalid EnumSet type: ");
                            object.append(type2.toString());
                            throw new com.google.a.k(object.toString());
                        }
                        StringBuilder stringBuilder = new StringBuilder();
                        stringBuilder.append("Invalid EnumSet type: ");
                        stringBuilder.append(type2.toString());
                        throw new com.google.a.k(stringBuilder.toString());
                    }
                };
            }
            if (Set.class.isAssignableFrom(class_)) {
                return new h<T>(){

                    @Override
                    public T a() {
                        return (T)new LinkedHashSet();
                    }
                };
            }
            if (Queue.class.isAssignableFrom(class_)) {
                return new h<T>(){

                    @Override
                    public T a() {
                        return (T)new ArrayDeque();
                    }
                };
            }
            return new h<T>(){

                @Override
                public T a() {
                    return (T)new ArrayList();
                }
            };
        }
        if (Map.class.isAssignableFrom(class_)) {
            if (ConcurrentNavigableMap.class.isAssignableFrom(class_)) {
                return new h<T>(){

                    @Override
                    public T a() {
                        return (T)new ConcurrentSkipListMap();
                    }
                };
            }
            if (ConcurrentMap.class.isAssignableFrom(class_)) {
                return new h<T>(){

                    @Override
                    public T a() {
                        return (T)new ConcurrentHashMap();
                    }
                };
            }
            if (SortedMap.class.isAssignableFrom(class_)) {
                return new h<T>(){

                    @Override
                    public T a() {
                        return (T)new TreeMap();
                    }
                };
            }
            if (type2 instanceof ParameterizedType && !String.class.isAssignableFrom(a.a(((ParameterizedType)type2).getActualTypeArguments()[0]).a())) {
                return new h<T>(){

                    @Override
                    public T a() {
                        return (T)new LinkedHashMap();
                    }
                };
            }
            return new h<T>(){

                @Override
                public T a() {
                    return (T)new g();
                }
            };
        }
        return null;
    }

    private <T> h<T> b(final Type type2, final Class<? super T> class_) {
        return new h<T>(){
            private final k d = k.a();

            @Override
            public T a() {
                Object t2;
                try {
                    t2 = this.d.a(class_);
                }
                catch (Exception exception) {
                    StringBuilder stringBuilder = new StringBuilder();
                    stringBuilder.append("Unable to invoke no-args constructor for ");
                    stringBuilder.append(type2);
                    stringBuilder.append(". Registering an InstanceCreator with Gson for this type may fix this problem.");
                    throw new RuntimeException(stringBuilder.toString(), exception);
                }
                return t2;
            }
        };
    }

    public <T> h<T> a(a<T> object) {
        Type type2 = object.b();
        object = object.a();
        h<T> h2 = this.a.get(type2);
        if (h2 != null) {
            return new h<T>((f)h2, type2){
                final /* synthetic */ f a;
                final /* synthetic */ Type b;
                {
                    this.a = f2;
                    this.b = type2;
                }

                @Override
                public T a() {
                    return this.a.a(this.b);
                }
            };
        }
        h2 = this.a.get(object);
        if (h2 != null) {
            return new h<T>((f)h2, type2){
                final /* synthetic */ f a;
                final /* synthetic */ Type b;
                {
                    this.a = f2;
                    this.b = type2;
                }

                @Override
                public T a() {
                    return this.a.a(this.b);
                }
            };
        }
        h2 = this.a((Class<? super T>)object);
        if (h2 != null) {
            return h2;
        }
        h2 = this.a(type2, (Class<? super T>)object);
        if (h2 != null) {
            return h2;
        }
        return this.b(type2, (Class<? super T>)object);
    }

    public String toString() {
        return this.a.toString();
    }

}

