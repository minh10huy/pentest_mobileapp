/*
 * Decompiled with CFR 0_132.
 */
package com.google.a.b;

import com.google.a.a;
import com.google.a.b;
import com.google.a.d.c;
import com.google.a.e;
import com.google.a.t;
import com.google.a.u;
import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;

public final class d
implements u,
Cloneable {
    public static final d a = new d();
    private double b = -1.0;
    private int c = 136;
    private boolean d = true;
    private boolean e;
    private List<a> f = Collections.emptyList();
    private List<a> g = Collections.emptyList();

    private boolean a(com.google.a.a.d d2) {
        if (d2 != null && d2.a() > this.b) {
            return false;
        }
        return true;
    }

    private boolean a(com.google.a.a.d d2, com.google.a.a.e e2) {
        if (this.a(d2) && this.a(e2)) {
            return true;
        }
        return false;
    }

    private boolean a(com.google.a.a.e e2) {
        if (e2 != null && e2.a() <= this.b) {
            return false;
        }
        return true;
    }

    private boolean a(Class<?> class_) {
        if (!Enum.class.isAssignableFrom(class_) && (class_.isAnonymousClass() || class_.isLocalClass())) {
            return true;
        }
        return false;
    }

    private boolean b(Class<?> class_) {
        if (class_.isMemberClass() && !this.c(class_)) {
            return true;
        }
        return false;
    }

    private boolean c(Class<?> class_) {
        if ((class_.getModifiers() & 8) != 0) {
            return true;
        }
        return false;
    }

    protected d a() {
        try {
            d d2 = (d)super.clone();
            return d2;
        }
        catch (CloneNotSupportedException cloneNotSupportedException) {
            throw new AssertionError(cloneNotSupportedException);
        }
    }

    @Override
    public <T> t<T> a(final e e2, final com.google.a.c.a<T> a2) {
        Class<T> class_ = a2.a();
        final boolean bl2 = this.a(class_, true);
        final boolean bl3 = this.a(class_, false);
        if (!bl2 && !bl3) {
            return null;
        }
        return new t<T>(){
            private t<T> f;

            private t<T> b() {
                t<T> t2 = this.f;
                if (t2 != null) {
                    return t2;
                }
                this.f = t2 = e2.a(d.this, a2);
                return t2;
            }

            @Override
            public void a(c c2, T t2) {
                if (bl2) {
                    c2.f();
                    return;
                }
                this.b().a(c2, t2);
            }

            @Override
            public T b(com.google.a.d.a a22) {
                if (bl3) {
                    a22.n();
                    return null;
                }
                return this.b().b(a22);
            }
        };
    }

    public boolean a(Class<?> class_, boolean bl2) {
        if (this.b != -1.0 && !this.a(class_.getAnnotation(com.google.a.a.d.class), class_.getAnnotation(com.google.a.a.e.class))) {
            return true;
        }
        if (!this.d && this.b(class_)) {
            return true;
        }
        if (this.a(class_)) {
            return true;
        }
        List<a> list = bl2 ? this.f : this.g;
        list = list.iterator();
        while (list.hasNext()) {
            if (!((a)list.next()).a(class_)) continue;
            return true;
        }
        return false;
    }

    public boolean a(Field object, boolean bl2) {
        Object object2;
        if ((this.c & object.getModifiers()) != 0) {
            return true;
        }
        if (this.b != -1.0 && !this.a(object.getAnnotation(com.google.a.a.d.class), object.getAnnotation(com.google.a.a.e.class))) {
            return true;
        }
        if (object.isSynthetic()) {
            return true;
        }
        if (this.e) {
            object2 = object.getAnnotation(com.google.a.a.a.class);
            if (object2 != null) {
                if (bl2 ? !object2.a() : !object2.b()) {
                    return true;
                }
            } else {
                return true;
            }
        }
        if (!this.d && this.b(object.getType())) {
            return true;
        }
        if (this.a(object.getType())) {
            return true;
        }
        object2 = bl2 ? this.f : this.g;
        if (!object2.isEmpty()) {
            object = new b((Field)object);
            object2 = object2.iterator();
            while (object2.hasNext()) {
                if (!((a)object2.next()).a((b)object)) continue;
                return true;
            }
        }
        return false;
    }

    protected /* synthetic */ Object clone() {
        return this.a();
    }

}

