/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  com.google.a.b.g.c
 */
package com.google.a.b;

import java.io.Serializable;
import java.util.AbstractMap;
import java.util.AbstractSet;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.Iterator;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;

public final class g<K, V>
extends AbstractMap<K, V>
implements Serializable {
    static final /* synthetic */ boolean f;
    private static final Comparator<Comparable> g;
    Comparator<? super K> a;
    d<K, V> b;
    int c = 0;
    int d = 0;
    final d<K, V> e = new d();
    private g<K, V> h;
    private g<K, V> i;

    static {
        f = g.class.desiredAssertionStatus() ^ true;
        g = new Comparator<Comparable>(){

            public int a(Comparable comparable, Comparable comparable2) {
                return comparable.compareTo(comparable2);
            }

            @Override
            public /* synthetic */ int compare(Object object, Object object2) {
                return this.a((Comparable)object, (Comparable)object2);
            }
        };
    }

    public g() {
        this(g);
    }

    public g(Comparator<? super K> comparator) {
        if (comparator == null) {
            comparator = g;
        }
        this.a = comparator;
    }

    private void a(d<K, V> d2) {
        d d3 = d2.b;
        d d4 = d2.c;
        d d5 = d4.b;
        d d6 = d4.c;
        d2.c = d5;
        if (d5 != null) {
            d5.a = d2;
        }
        this.a(d2, d4);
        d4.b = d2;
        d2.a = d4;
        int n2 = 0;
        int n3 = d3 != null ? d3.h : 0;
        int n4 = d5 != null ? d5.h : 0;
        n4 = d2.h = Math.max(n3, n4) + 1;
        n3 = n2;
        if (d6 != null) {
            n3 = d6.h;
        }
        d4.h = Math.max(n4, n3) + 1;
    }

    private void a(d<K, V> d2, d<K, V> d3) {
        d d4 = d2.a;
        d2.a = null;
        if (d3 != null) {
            d3.a = d4;
        }
        if (d4 != null) {
            if (d4.b == d2) {
                d4.b = d3;
                return;
            }
            if (!f && d4.c != d2) {
                throw new AssertionError();
            }
            d4.c = d3;
            return;
        }
        this.b = d3;
    }

    private boolean a(Object object, Object object2) {
        if (!(object == object2 || object != null && object.equals(object2))) {
            return false;
        }
        return true;
    }

    private void b(d<K, V> d2) {
        d d3 = d2.b;
        d d4 = d2.c;
        d d5 = d3.b;
        d d6 = d3.c;
        d2.b = d6;
        if (d6 != null) {
            d6.a = d2;
        }
        this.a(d2, d3);
        d3.c = d2;
        d2.a = d3;
        int n2 = 0;
        int n3 = d4 != null ? d4.h : 0;
        int n4 = d6 != null ? d6.h : 0;
        n4 = d2.h = Math.max(n3, n4) + 1;
        n3 = n2;
        if (d5 != null) {
            n3 = d5.h;
        }
        d3.h = Math.max(n4, n3) + 1;
    }

    private void b(d<K, V> d2, boolean bl2) {
        while (d2 != null) {
            d d3;
            d d4 = d2.b;
            d d5 = d2.c;
            int n2 = 0;
            int n3 = 0;
            int n4 = d4 != null ? d4.h : 0;
            int n5 = d5 != null ? d5.h : 0;
            int n6 = n4 - n5;
            if (n6 == -2) {
                d4 = d5.b;
                d3 = d5.c;
                n4 = d3 != null ? d3.h : 0;
                n5 = n3;
                if (d4 != null) {
                    n5 = d4.h;
                }
                if ((n4 = n5 - n4) != -1 && (n4 != 0 || bl2)) {
                    if (!f && n4 != 1) {
                        throw new AssertionError();
                    }
                    this.b(d5);
                }
                this.a(d2);
                if (bl2) {
                    return;
                }
            } else if (n6 == 2) {
                d5 = d4.b;
                d3 = d4.c;
                n4 = d3 != null ? d3.h : 0;
                n5 = n2;
                if (d5 != null) {
                    n5 = d5.h;
                }
                if ((n4 = n5 - n4) != 1 && (n4 != 0 || bl2)) {
                    if (!f && n4 != -1) {
                        throw new AssertionError();
                    }
                    this.a(d4);
                }
                this.b(d2);
                if (bl2) {
                    return;
                }
            } else if (n6 == 0) {
                d2.h = n4 + 1;
                if (bl2) {
                    return;
                }
            } else {
                if (!f && n6 != -1 && n6 != 1) {
                    throw new AssertionError();
                }
                d2.h = Math.max(n4, n5) + 1;
                if (!bl2) {
                    return;
                }
            }
            d2 = d2.a;
        }
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    d<K, V> a(Object d2) {
        if (d2 == null) return null;
        try {
            return this.a((K)d2, false);
        }
        catch (ClassCastException classCastException) {
            return null;
        }
    }

    d<K, V> a(K object, boolean bl2) {
        int n2;
        d<K, V> d2;
        Comparator<K> comparator = this.a;
        d<K, V> d3 = this.b;
        if (d3 != null) {
            Comparable comparable = comparator == g ? (Comparable)object : null;
            do {
                if ((n2 = comparable != null ? comparable.compareTo(d3.f) : comparator.compare(object, d3.f)) == 0) {
                    return d3;
                }
                d2 = n2 < 0 ? d3.b : d3.c;
                if (d2 != null) {
                    d3 = d2;
                    continue;
                }
                break;
            } while (true);
        } else {
            n2 = 0;
        }
        if (!bl2) {
            return null;
        }
        d2 = this.e;
        if (d3 == null) {
            if (comparator == g && !(object instanceof Comparable)) {
                d3 = new StringBuilder();
                d3.append(object.getClass().getName());
                d3.append(" is not Comparable");
                throw new ClassCastException(d3.toString());
            }
            object = new d<K, V>(d3, object, d2, d2.e);
            this.b = object;
        } else {
            object = new d<K, V>(d3, object, d2, d2.e);
            if (n2 < 0) {
                d3.b = object;
            } else {
                d3.c = object;
            }
            this.b(d3, true);
        }
        ++this.c;
        ++this.d;
        return object;
    }

    d<K, V> a(Map.Entry<?, ?> entry) {
        d<K, V> d2 = this.a(entry.getKey());
        boolean bl2 = d2 != null && this.a(d2.g, entry.getValue());
        if (bl2) {
            return d2;
        }
        return null;
    }

    void a(d<K, V> d2, boolean bl2) {
        if (bl2) {
            d2.e.d = d2.d;
            d2.d.e = d2.e;
        }
        d d3 = d2.b;
        d d4 = d2.c;
        d d5 = d2.a;
        int n2 = 0;
        if (d3 != null && d4 != null) {
            int n3;
            d3 = d3.h > d4.h ? d3.b() : d4.a();
            this.a((d<K, V>)d3, false);
            d4 = d2.b;
            if (d4 != null) {
                n3 = d4.h;
                d3.b = d4;
                d4.a = d3;
                d2.b = null;
            } else {
                n3 = 0;
            }
            d4 = d2.c;
            if (d4 != null) {
                n2 = d4.h;
                d3.c = d4;
                d4.a = d3;
                d2.c = null;
            }
            d3.h = Math.max(n3, n2) + 1;
            this.a(d2, d3);
            return;
        }
        if (d3 != null) {
            this.a(d2, d3);
            d2.b = null;
        } else if (d4 != null) {
            this.a(d2, d4);
            d2.c = null;
        } else {
            this.a(d2, null);
        }
        this.b(d5, false);
        --this.c;
        ++this.d;
    }

    d<K, V> b(Object d2) {
        if ((d2 = this.a((Object)d2)) != null) {
            this.a(d2, true);
        }
        return d2;
    }

    @Override
    public void clear() {
        this.b = null;
        this.c = 0;
        ++this.d;
        d<K, V> d2 = this.e;
        d2.e = d2;
        d2.d = d2;
    }

    @Override
    public boolean containsKey(Object object) {
        if (this.a(object) != null) {
            return true;
        }
        return false;
    }

    @Override
    public Set<Map.Entry<K, V>> entrySet() {
        g<K, V> g2 = this.h;
        if (g2 != null) {
            return g2;
        }
        this.h = g2 = new a();
        return g2;
    }

    @Override
    public V get(Object d2) {
        if ((d2 = this.a((Object)d2)) != null) {
            return d2.g;
        }
        return null;
    }

    @Override
    public Set<K> keySet() {
        g<K, V> g2 = this.i;
        if (g2 != null) {
            return g2;
        }
        this.i = g2 = new b();
        return g2;
    }

    @Override
    public V put(K object, V v2) {
        if (object != null) {
            object = this.a((K)object, true);
            Object v3 = object.g;
            object.g = v2;
            return v3;
        }
        throw new NullPointerException("key == null");
    }

    @Override
    public V remove(Object d2) {
        if ((d2 = this.b((Object)d2)) != null) {
            return d2.g;
        }
        return null;
    }

    @Override
    public int size() {
        return this.c;
    }

    class a
    extends AbstractSet<Map.Entry<K, V>> {
        a() {
        }

        @Override
        public void clear() {
            g.this.clear();
        }

        @Override
        public boolean contains(Object object) {
            if (object instanceof Map.Entry && g.this.a((Map.Entry)object) != null) {
                return true;
            }
            return false;
        }

        @Override
        public Iterator<Map.Entry<K, V>> iterator() {
            return new com.google.a.b.g.c<Map.Entry<K, V>>(){

                public Map.Entry<K, V> a() {
                    return this.b();
                }

                public /* synthetic */ Object next() {
                    return this.a();
                }
            };
        }

        @Override
        public boolean remove(Object d2) {
            if (!(d2 instanceof Map.Entry)) {
                return false;
            }
            if ((d2 = g.this.a(d2)) == null) {
                return false;
            }
            g.this.a(d2, true);
            return true;
        }

        @Override
        public int size() {
            return g.this.c;
        }

    }

    final class b
    extends AbstractSet<K> {
        b() {
        }

        @Override
        public void clear() {
            g.this.clear();
        }

        @Override
        public boolean contains(Object object) {
            return g.this.containsKey(object);
        }

        @Override
        public Iterator<K> iterator() {
            return new g<K, V>(){

                public K next() {
                    return this.b().f;
                }
            };
        }

        @Override
        public boolean remove(Object object) {
            if (g.this.b(object) != null) {
                return true;
            }
            return false;
        }

        @Override
        public int size() {
            return g.this.c;
        }

    }

    private abstract class c<T>
    implements Iterator<T> {
        d<K, V> b;
        d<K, V> c;
        int d;

        c() {
            this.b = g.this.e.d;
            this.c = null;
            this.d = g.this.d;
        }

        final d<K, V> b() {
            d<K, V> d2 = this.b;
            if (d2 != g.this.e) {
                if (g.this.d == this.d) {
                    this.b = d2.d;
                    this.c = d2;
                    return d2;
                }
                throw new ConcurrentModificationException();
            }
            throw new NoSuchElementException();
        }

        @Override
        public final boolean hasNext() {
            if (this.b != g.this.e) {
                return true;
            }
            return false;
        }

        @Override
        public final void remove() {
            if (this.c != null) {
                g.this.a(this.c, true);
                this.c = null;
                this.d = g.this.d;
                return;
            }
            throw new IllegalStateException();
        }
    }

    static final class d<K, V>
    implements Map.Entry<K, V> {
        d<K, V> a;
        d<K, V> b;
        d<K, V> c;
        d<K, V> d;
        d<K, V> e;
        final K f;
        V g;
        int h;

        d() {
            this.f = null;
            this.e = this;
            this.d = this;
        }

        d(d<K, V> d2, K k2, d<K, V> d3, d<K, V> d4) {
            this.a = d2;
            this.f = k2;
            this.h = 1;
            this.d = d3;
            this.e = d4;
            d4.d = this;
            d3.e = this;
        }

        public d<K, V> a() {
            d<K, V> d2 = this.b;
            d<K, V> d3 = this;
            while (d2 != null) {
                d<K, V> d4 = d2.b;
                d3 = d2;
                d2 = d4;
            }
            return d3;
        }

        public d<K, V> b() {
            d<K, V> d2 = this.c;
            d<K, V> d3 = this;
            while (d2 != null) {
                d<K, V> d4 = d2.c;
                d3 = d2;
                d2 = d4;
            }
            return d3;
        }

        @Override
        public boolean equals(Object object) {
            boolean bl2;
            block2 : {
                block6 : {
                    boolean bl3;
                    block5 : {
                        block4 : {
                            block3 : {
                                boolean bl4 = object instanceof Map.Entry;
                                bl2 = bl3 = false;
                                if (!bl4) break block2;
                                object = (Map.Entry)object;
                                if (this.f != null) break block3;
                                bl2 = bl3;
                                if (object.getKey() != null) break block2;
                                break block4;
                            }
                            bl2 = bl3;
                            if (!this.f.equals(object.getKey())) break block2;
                        }
                        if (this.g != null) break block5;
                        bl2 = bl3;
                        if (object.getValue() != null) break block2;
                        break block6;
                    }
                    bl2 = bl3;
                    if (!this.g.equals(object.getValue())) break block2;
                }
                bl2 = true;
            }
            return bl2;
        }

        @Override
        public K getKey() {
            return this.f;
        }

        @Override
        public V getValue() {
            return this.g;
        }

        @Override
        public int hashCode() {
            K k2 = this.f;
            int n2 = 0;
            int n3 = k2 == null ? 0 : this.f.hashCode();
            if (this.g != null) {
                n2 = this.g.hashCode();
            }
            return n3 ^ n2;
        }

        @Override
        public V setValue(V v2) {
            V v3 = this.g;
            this.g = v2;
            return v3;
        }

        public String toString() {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append(this.f);
            stringBuilder.append("=");
            stringBuilder.append(this.g);
            return stringBuilder.toString();
        }
    }

}

