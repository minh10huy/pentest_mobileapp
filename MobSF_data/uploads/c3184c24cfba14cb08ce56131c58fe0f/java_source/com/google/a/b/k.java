/*
 * Decompiled with CFR 0_132.
 */
package com.google.a.b;

import java.io.ObjectInputStream;
import java.io.ObjectStreamClass;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.lang.reflect.Modifier;

public abstract class k {
    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public static k a() {
        try {
            Class<?> class_ = Class.forName("sun.misc.Unsafe");
            Object object = class_.getDeclaredField("theUnsafe");
            object.setAccessible(true);
            object = object.get(null);
            return new k(class_.getMethod("allocateInstance", Class.class), object){
                final /* synthetic */ Method a;
                final /* synthetic */ Object b;
                {
                    this.a = method;
                    this.b = object;
                }

                @Override
                public <T> T a(Class<T> class_) {
                    .b(class_);
                    return (T)this.a.invoke(this.b, class_);
                }
            };
        }
        catch (Exception exception) {}
        try {
            Object object = ObjectStreamClass.class.getDeclaredMethod("getConstructorId", Class.class);
            object.setAccessible(true);
            int n2 = (Integer)object.invoke(null, Object.class);
            object = ObjectStreamClass.class.getDeclaredMethod("newInstance", Class.class, Integer.TYPE);
            object.setAccessible(true);
            return new k((Method)object, n2){
                final /* synthetic */ Method a;
                final /* synthetic */ int b;
                {
                    this.a = method;
                    this.b = n2;
                }

                @Override
                public <T> T a(Class<T> class_) {
                    .b(class_);
                    return (T)this.a.invoke(null, class_, this.b);
                }
            };
        }
        catch (Exception exception) {}
        try {
            final Method method = ObjectInputStream.class.getDeclaredMethod("newInstance", Class.class, Class.class);
            method.setAccessible(true);
            return new k(){

                @Override
                public <T> T a(Class<T> class_) {
                    .b(class_);
                    return (T)method.invoke(null, class_, Object.class);
                }
            };
        }
        catch (Exception exception) {
            return new k(){

                @Override
                public <T> T a(Class<T> class_) {
                    StringBuilder stringBuilder = new StringBuilder();
                    stringBuilder.append("Cannot allocate ");
                    stringBuilder.append(class_);
                    throw new UnsupportedOperationException(stringBuilder.toString());
                }
            };
        }
    }

    static void b(Class<?> class_) {
        int n2 = class_.getModifiers();
        if (!Modifier.isInterface(n2)) {
            if (!Modifier.isAbstract(n2)) {
                return;
            }
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("Abstract class can't be instantiated! Class name: ");
            stringBuilder.append(class_.getName());
            throw new UnsupportedOperationException(stringBuilder.toString());
        }
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("Interface can't be instantiated! Interface name: ");
        stringBuilder.append(class_.getName());
        throw new UnsupportedOperationException(stringBuilder.toString());
    }

    public abstract <T> T a(Class<T> var1);

}

