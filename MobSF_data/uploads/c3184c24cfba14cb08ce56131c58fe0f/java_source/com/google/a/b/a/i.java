/*
 * Decompiled with CFR 0_132.
 */
package com.google.a.b.a;

import com.google.a.b.a.m;
import com.google.a.b.c;
import com.google.a.b.d;
import com.google.a.b.h;
import com.google.a.e;
import com.google.a.r;
import com.google.a.t;
import com.google.a.u;
import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

public final class i
implements u {
    private final c a;
    private final com.google.a.d b;
    private final d c;
    private final com.google.a.b.a.d d;

    public i(c c2, com.google.a.d d2, d d3, com.google.a.b.a.d d4) {
        this.a = c2;
        this.b = d2;
        this.c = d3;
        this.d = d4;
    }

    private b a(e e2, final Field field, String string2, com.google.a.c.a<?> a2, boolean bl2, boolean bl3) {
        boolean bl4 = com.google.a.b.i.a(a2.a());
        Object object = field.getAnnotation(com.google.a.a.b.class);
        object = object != null ? this.d.a(this.a, e2, a2, (com.google.a.a.b)object) : null;
        final boolean bl5 = object != null;
        Object object2 = object;
        if (object == null) {
            object2 = e2.a(a2);
        }
        return new b(string2, bl2, bl3, (t)object2, e2, a2, bl4){
            final /* synthetic */ t c;
            final /* synthetic */ e d;
            final /* synthetic */ com.google.a.c.a e;
            final /* synthetic */ boolean f;
            {
                this.c = t2;
                this.d = e2;
                this.e = a2;
                this.f = bl52;
                super(string2, bl2, bl3);
            }

            @Override
            void a(com.google.a.d.a a2, Object object) {
                if ((a2 = this.c.b(a2)) != null || !this.f) {
                    field.set(object, a2);
                }
            }

            @Override
            void a(com.google.a.d.c c2, Object t2) {
                Object object = field.get(t2);
                t2 = bl5 ? this.c : new m<Object>(this.d, this.c, this.e.b());
                t2.a(c2, object);
            }

            @Override
            public boolean a(Object object) {
                boolean bl2 = this.i;
                boolean bl3 = false;
                if (!bl2) {
                    return false;
                }
                if (field.get(object) != object) {
                    bl3 = true;
                }
                return bl3;
            }
        };
    }

    private List<String> a(Field object) {
        String[] arrstring = object.getAnnotation(com.google.a.a.c.class);
        if (arrstring == null) {
            return Collections.singletonList(this.b.a((Field)object));
        }
        object = arrstring.a();
        if ((arrstring = arrstring.b()).length == 0) {
            return Collections.singletonList(object);
        }
        ArrayList<String> arrayList = new ArrayList<String>(arrstring.length + 1);
        arrayList.add((String)object);
        int n2 = arrstring.length;
        for (int i2 = 0; i2 < n2; ++i2) {
            arrayList.add(arrstring[i2]);
        }
        return arrayList;
    }

    private Map<String, b> a(e object, com.google.a.c.a<?> object2, Class<?> class_) {
        LinkedHashMap<String, b> linkedHashMap = new LinkedHashMap<String, b>();
        if (class_.isInterface()) {
            return linkedHashMap;
        }
        Type type2 = object2.b();
        com.google.a.c.a<?> a2 = object2;
        while (class_ != Object.class) {
            for (Field field : class_.getDeclaredFields()) {
                boolean bl2 = this.a(field, true);
                boolean bl3 = this.a(field, false);
                if (!bl2 && !bl3) continue;
                field.setAccessible(true);
                Type type3 = com.google.a.b.b.a(a2.b(), class_, field.getGenericType());
                List<String> list = this.a(field);
                int n2 = list.size();
                object2 = null;
                for (int i2 = 0; i2 < n2; ++i2) {
                    Object object3 = list.get(i2);
                    if (i2 != 0) {
                        bl2 = false;
                    }
                    object3 = linkedHashMap.put((String)object3, this.a((e)object, field, (String)object3, com.google.a.c.a.a(type3), bl2, bl3));
                    if (object2 != null) continue;
                    object2 = object3;
                }
                if (object2 == null) {
                    continue;
                }
                object = new StringBuilder();
                object.append(type2);
                object.append(" declares multiple JSON fields named ");
                object.append(object2.h);
                throw new IllegalArgumentException(object.toString());
            }
            a2 = com.google.a.c.a.a(com.google.a.b.b.a(a2.b(), class_, class_.getGenericSuperclass()));
            class_ = a2.a();
        }
        return linkedHashMap;
    }

    static boolean a(Field field, boolean bl2, d d2) {
        if (!d2.a(field.getType(), bl2) && !d2.a(field, bl2)) {
            return true;
        }
        return false;
    }

    @Override
    public <T> t<T> a(e e2, com.google.a.c.a<T> a2) {
        Class<T> class_ = a2.a();
        if (!Object.class.isAssignableFrom(class_)) {
            return null;
        }
        return new a<T>(this.a.a(a2), this.a(e2, a2, class_));
    }

    public boolean a(Field field, boolean bl2) {
        return i.a(field, bl2, this.c);
    }

    public static final class a<T>
    extends t<T> {
        private final h<T> a;
        private final Map<String, b> b;

        a(h<T> h2, Map<String, b> map) {
            this.a = h2;
            this.b = map;
        }

        @Override
        public void a(com.google.a.d.c c2, T t2) {
            if (t2 == null) {
                c2.f();
                return;
            }
            c2.d();
            try {
                for (b b2 : this.b.values()) {
                    if (!b2.a(t2)) continue;
                    c2.a(b2.h);
                    b2.a(c2, t2);
                }
                c2.e();
                return;
            }
            catch (IllegalAccessException illegalAccessException) {
                throw new AssertionError(illegalAccessException);
            }
        }

        /*
         * Enabled aggressive block sorting
         * Enabled unnecessary exception pruning
         * Enabled aggressive exception aggregation
         */
        @Override
        public T b(com.google.a.d.a a2) {
            if (a2.f() == com.google.a.d.b.i) {
                a2.j();
                return null;
            }
            T t2 = this.a.a();
            try {
                a2.c();
                while (a2.e()) {
                    Object object = a2.g();
                    if ((object = this.b.get(object)) != null && object.j) {
                        object.a(a2, t2);
                        continue;
                    }
                    a2.n();
                }
            }
            catch (IllegalAccessException illegalAccessException) {
                throw new AssertionError(illegalAccessException);
            }
            catch (IllegalStateException illegalStateException) {
                throw new r(illegalStateException);
            }
            a2.d();
            return t2;
        }
    }

    static abstract class b {
        final String h;
        final boolean i;
        final boolean j;

        protected b(String string2, boolean bl2, boolean bl3) {
            this.h = string2;
            this.i = bl2;
            this.j = bl3;
        }

        abstract void a(com.google.a.d.a var1, Object var2);

        abstract void a(com.google.a.d.c var1, Object var2);

        abstract boolean a(Object var1);
    }

}

