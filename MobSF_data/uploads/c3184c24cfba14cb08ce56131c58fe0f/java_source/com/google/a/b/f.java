/*
 * Decompiled with CFR 0_132.
 */
package com.google.a.b;

import java.math.BigDecimal;

public final class f
extends Number {
    private final String a;

    public f(String string2) {
        this.a = string2;
    }

    @Override
    public double doubleValue() {
        return Double.parseDouble(this.a);
    }

    public boolean equals(Object object) {
        boolean bl2 = true;
        if (this == object) {
            return true;
        }
        if (object instanceof f) {
            object = (f)object;
            if (this.a != object.a) {
                if (this.a.equals(object.a)) {
                    return true;
                }
                bl2 = false;
            }
            return bl2;
        }
        return false;
    }

    @Override
    public float floatValue() {
        return Float.parseFloat(this.a);
    }

    public int hashCode() {
        return this.a.hashCode();
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @Override
    public int intValue() {
        long l2;
        try {
            return Integer.parseInt(this.a);
        }
        catch (NumberFormatException numberFormatException) {}
        try {
            l2 = Long.parseLong(this.a);
        }
        catch (NumberFormatException numberFormatException) {
            return new BigDecimal(this.a).intValue();
        }
        return (int)l2;
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    @Override
    public long longValue() {
        try {
            return Long.parseLong(this.a);
        }
        catch (NumberFormatException numberFormatException) {
            return new BigDecimal(this.a).longValue();
        }
    }

    public String toString() {
        return this.a;
    }
}

