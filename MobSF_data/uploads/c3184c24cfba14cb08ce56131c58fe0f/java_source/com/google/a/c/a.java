/*
 * Decompiled with CFR 0_132.
 */
package com.google.a.c;

import com.google.a.b.b;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;

public class a<T> {
    final Class<? super T> a;
    final Type b;
    final int c;

    protected a() {
        this.b = a.a(this.getClass());
        this.a = b.e(this.b);
        this.c = this.b.hashCode();
    }

    a(Type type2) {
        this.b = b.d(com.google.a.b.a.a(type2));
        this.a = b.e(this.b);
        this.c = this.b.hashCode();
    }

    public static a<?> a(Type type2) {
        return new a<T>(type2);
    }

    static Type a(Class<?> type2) {
        if (!((type2 = type2.getGenericSuperclass()) instanceof Class)) {
            return b.d(((ParameterizedType)type2).getActualTypeArguments()[0]);
        }
        throw new RuntimeException("Missing type parameter.");
    }

    public static <T> a<T> b(Class<T> class_) {
        return new a<T>(class_);
    }

    public final Class<? super T> a() {
        return this.a;
    }

    public final Type b() {
        return this.b;
    }

    public final boolean equals(Object object) {
        if (object instanceof a && b.a(this.b, ((a)object).b)) {
            return true;
        }
        return false;
    }

    public final int hashCode() {
        return this.c;
    }

    public final String toString() {
        return b.f(this.b);
    }
}

