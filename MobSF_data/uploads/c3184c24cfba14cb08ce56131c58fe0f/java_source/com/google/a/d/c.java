/*
 * Decompiled with CFR 0_132.
 */
package com.google.a.d;

import java.io.Closeable;
import java.io.Flushable;
import java.io.IOException;
import java.io.Writer;

public class c
implements Closeable,
Flushable {
    private static final String[] a = new String[128];
    private static final String[] b;
    private final Writer c;
    private int[] d = new int[32];
    private int e = 0;
    private String f;
    private String g;
    private boolean h;
    private boolean i;
    private String j;
    private boolean k;

    static {
        for (int i2 = 0; i2 <= 31; ++i2) {
            c.a[i2] = String.format("\\u%04x", i2);
        }
        c.a[34] = "\\\"";
        c.a[92] = "\\\\";
        c.a[9] = "\\t";
        c.a[8] = "\\b";
        c.a[10] = "\\n";
        c.a[13] = "\\r";
        c.a[12] = "\\f";
        b = (String[])a.clone();
        c.b[60] = "\\u003c";
        c.b[62] = "\\u003e";
        c.b[38] = "\\u0026";
        c.b[61] = "\\u003d";
        c.b[39] = "\\u0027";
    }

    public c(Writer writer) {
        this.a(6);
        this.g = ":";
        this.k = true;
        if (writer != null) {
            this.c = writer;
            return;
        }
        throw new NullPointerException("out == null");
    }

    private int a() {
        if (this.e != 0) {
            return this.d[this.e - 1];
        }
        throw new IllegalStateException("JsonWriter is closed.");
    }

    private c a(int n2, int n3, String charSequence) {
        int n4 = this.a();
        if (n4 != n3 && n4 != n2) {
            throw new IllegalStateException("Nesting problem.");
        }
        if (this.j == null) {
            --this.e;
            if (n4 == n3) {
                this.k();
            }
            this.c.write((String)charSequence);
            return this;
        }
        charSequence = new StringBuilder();
        charSequence.append("Dangling name: ");
        charSequence.append(this.j);
        throw new IllegalStateException(charSequence.toString());
    }

    private c a(int n2, String string2) {
        this.m();
        this.a(n2);
        this.c.write(string2);
        return this;
    }

    private void a(int n2) {
        int[] arrn;
        if (this.e == this.d.length) {
            arrn = new int[this.e * 2];
            System.arraycopy(this.d, 0, arrn, 0, this.e);
            this.d = arrn;
        }
        arrn = this.d;
        int n3 = this.e;
        this.e = n3 + 1;
        arrn[n3] = n2;
    }

    private void b(int n2) {
        this.d[this.e - 1] = n2;
    }

    private void d(String string2) {
        String[] arrstring = this.i ? b : a;
        this.c.write("\"");
        int n2 = string2.length();
        int n3 = 0;
        for (int i2 = 0; i2 < n2; ++i2) {
            int n4;
            block8 : {
                String string3;
                block7 : {
                    char c2;
                    block9 : {
                        block6 : {
                            String string4;
                            c2 = string2.charAt(i2);
                            if (c2 >= '?') break block6;
                            string3 = string4 = arrstring[c2];
                            if (string4 != null) break block7;
                            n4 = n3;
                            break block8;
                        }
                        if (c2 != '\u2028') break block9;
                        string3 = "\\u2028";
                        break block7;
                    }
                    n4 = n3;
                    if (c2 != '\u2029') break block8;
                    string3 = "\\u2029";
                }
                if (n3 < i2) {
                    this.c.write(string2, n3, i2 - n3);
                }
                this.c.write(string3);
                n4 = i2 + 1;
            }
            n3 = n4;
        }
        if (n3 < n2) {
            this.c.write(string2, n3, n2 - n3);
        }
        this.c.write("\"");
    }

    private void j() {
        if (this.j != null) {
            this.l();
            this.d(this.j);
            this.j = null;
        }
    }

    private void k() {
        if (this.f == null) {
            return;
        }
        this.c.write("\n");
        int n2 = this.e;
        for (int i2 = 1; i2 < n2; ++i2) {
            this.c.write(this.f);
        }
    }

    private void l() {
        block4 : {
            block3 : {
                int n2;
                block2 : {
                    n2 = this.a();
                    if (n2 != 5) break block2;
                    this.c.write(44);
                    break block3;
                }
                if (n2 != 3) break block4;
            }
            this.k();
            this.b(4);
            return;
        }
        throw new IllegalStateException("Nesting problem.");
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Lifted jumps to return sites
     */
    private void m() {
        block7 : {
            switch (this.a()) {
                default: {
                    throw new IllegalStateException("Nesting problem.");
                }
                case 7: {
                    if (this.h == false) throw new IllegalStateException("JSON must have only one top-level value.");
                }
                case 6: {
                    var1_1 = 7;
                    ** GOTO lbl12
                }
                case 4: {
                    this.c.append(this.g);
                    var1_1 = 5;
lbl12: // 2 sources:
                    this.b(var1_1);
                    return;
                }
                case 2: {
                    this.c.append(',');
                    break block7;
                }
                case 1: 
            }
            this.b(2);
        }
        this.k();
    }

    public c a(long l2) {
        this.j();
        this.m();
        this.c.write(Long.toString(l2));
        return this;
    }

    public c a(Boolean object) {
        if (object == null) {
            return this.f();
        }
        this.j();
        this.m();
        Writer writer = this.c;
        object = object.booleanValue() ? "true" : "false";
        writer.write((String)object);
        return this;
    }

    public c a(Number number) {
        if (number == null) {
            return this.f();
        }
        this.j();
        CharSequence charSequence = number.toString();
        if (!this.h && (charSequence.equals("-Infinity") || charSequence.equals("Infinity") || charSequence.equals("NaN"))) {
            charSequence = new StringBuilder();
            charSequence.append("Numeric values must be finite, but was ");
            charSequence.append(number);
            throw new IllegalArgumentException(charSequence.toString());
        }
        this.m();
        this.c.append(charSequence);
        return this;
    }

    public c a(String string2) {
        if (string2 != null) {
            if (this.j == null) {
                if (this.e != 0) {
                    this.j = string2;
                    return this;
                }
                throw new IllegalStateException("JsonWriter is closed.");
            }
            throw new IllegalStateException();
        }
        throw new NullPointerException("name == null");
    }

    public c a(boolean bl2) {
        this.j();
        this.m();
        Writer writer = this.c;
        String string2 = bl2 ? "true" : "false";
        writer.write(string2);
        return this;
    }

    public c b() {
        this.j();
        return this.a(1, "[");
    }

    public c b(String string2) {
        if (string2 == null) {
            return this.f();
        }
        this.j();
        this.m();
        this.d(string2);
        return this;
    }

    public final void b(boolean bl2) {
        this.h = bl2;
    }

    public c c() {
        return this.a(1, 2, "]");
    }

    /*
     * Enabled aggressive block sorting
     */
    public final void c(String string2) {
        if (string2.length() == 0) {
            this.f = null;
            string2 = ":";
        } else {
            this.f = string2;
            string2 = ": ";
        }
        this.g = string2;
    }

    public final void c(boolean bl2) {
        this.i = bl2;
    }

    @Override
    public void close() {
        this.c.close();
        int n2 = this.e;
        if (n2 <= 1 && (n2 != 1 || this.d[n2 - 1] == 7)) {
            this.e = 0;
            return;
        }
        throw new IOException("Incomplete document");
    }

    public c d() {
        this.j();
        return this.a(3, "{");
    }

    public final void d(boolean bl2) {
        this.k = bl2;
    }

    public c e() {
        return this.a(3, 5, "}");
    }

    public c f() {
        if (this.j != null) {
            if (this.k) {
                this.j();
            } else {
                this.j = null;
                return this;
            }
        }
        this.m();
        this.c.write("null");
        return this;
    }

    @Override
    public void flush() {
        if (this.e != 0) {
            this.c.flush();
            return;
        }
        throw new IllegalStateException("JsonWriter is closed.");
    }

    public boolean g() {
        return this.h;
    }

    public final boolean h() {
        return this.i;
    }

    public final boolean i() {
        return this.k;
    }
}

