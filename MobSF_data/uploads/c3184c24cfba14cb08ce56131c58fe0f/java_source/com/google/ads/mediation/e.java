/*
 * Decompiled with CFR 0_132.
 */
package com.google.ads.mediation;

import com.google.android.gms.internal.kj;
import java.lang.annotation.Annotation;
import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;
import java.lang.reflect.Field;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;

@Deprecated
public class e {
    /*
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    public void a(Map<String, String> object) {
        Object object3;
        Object object2;
        Object object4 = new HashMap<String, Field>();
        for (Field field : this.getClass().getFields()) {
            object3 = field.getAnnotation(b.class);
            if (object3 == null) continue;
            object4.put(object3.a(), field);
        }
        if (object4.isEmpty()) {
            kj.e("No server options fields detected. To suppress this message either add a field with the @Parameter annotation, or override the load() method.");
        }
        Iterator iterator = object.entrySet().iterator();
        do {
            block11 : {
                if (iterator.hasNext()) {
                    object = iterator.next();
                    object2 = (Field)object4.remove(object.getKey());
                    if (object2 != null) {
                        object2.set(this, object.getValue());
                        continue;
                    }
                    object2 = (String)object.getKey();
                    object = (String)object.getValue();
                    object3 = new StringBuilder(String.valueOf(object2).length() + 31 + String.valueOf(object).length());
                    object3.append("Unexpected server option: ");
                    object3.append((String)object2);
                    object3.append(" = \"");
                    object3.append((String)object);
                    object3.append("\"");
                    kj.b(object3.toString());
                    continue;
                }
                object2 = new StringBuilder();
                object4 = object4.values().iterator();
                break;
                catch (IllegalAccessException illegalAccessException) {}
                object = (String)object.getKey();
                object2 = new StringBuilder(String.valueOf(object).length() + 49);
                object2.append("Server option \"");
                object2.append((String)object);
                object = "\" could not be set: Illegal Access";
                break block11;
                catch (IllegalArgumentException illegalArgumentException) {}
                object = (String)object.getKey();
                object2 = new StringBuilder(String.valueOf(object).length() + 43);
                object2.append("Server option \"");
                object2.append((String)object);
                object = "\" could not be set: Bad Type";
            }
            object2.append((String)object);
            kj.e(object2.toString());
        } while (true);
        while (object4.hasNext()) {
            Field field = (Field)object4.next();
            if (!field.getAnnotation(b.class).b()) continue;
            object = String.valueOf(field.getAnnotation(b.class).a());
            object = object.length() != 0 ? "Required server option missing: ".concat((String)object) : new String("Required server option missing: ");
            kj.e((String)object);
            if (object2.length() > 0) {
                object2.append(", ");
            }
            object2.append(field.getAnnotation(b.class).a());
        }
        if (object2.length() <= 0) return;
        object = String.valueOf(object2.toString());
        if (object.length() != 0) {
            object = "Required server option(s) missing: ".concat((String)object);
            throw new a((String)object);
        }
        object = new String("Required server option(s) missing: ");
        throw new a((String)object);
    }

    public static final class a
    extends Exception {
        public a(String string2) {
            super(string2);
        }
    }

    @Retention(value=RetentionPolicy.RUNTIME)
    @Target(value={ElementType.FIELD})
    public static @interface b {
        public String a();

        public boolean b() default true;
    }

}

