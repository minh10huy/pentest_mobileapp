/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.content.Context
 *  android.content.SharedPreferences
 *  android.content.SharedPreferences$Editor
 *  android.text.TextUtils
 *  android.util.Base64
 *  android.util.Log
 */
package com.google.firebase.iid;

import android.content.Context;
import android.content.SharedPreferences;
import android.text.TextUtils;
import android.util.Base64;
import android.util.Log;
import com.google.android.gms.common.util.t;
import com.google.firebase.iid.FirebaseInstanceId;
import com.google.firebase.iid.a;
import com.google.firebase.iid.c;
import java.io.File;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.security.KeyFactory;
import java.security.KeyPair;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.KeySpec;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;
import java.util.Map;
import java.util.Set;

final class b {
    private SharedPreferences a;
    private Context b;

    public b(Context context) {
        this(context, "com.google.android.gms.appid");
    }

    private b(Context object, String string2) {
        block4 : {
            this.b = object;
            this.a = object.getSharedPreferences(string2, 0);
            object = String.valueOf(string2);
            string2 = String.valueOf("-no-backup");
            object = string2.length() != 0 ? object.concat(string2) : new String((String)object);
            object = new File(t.a(this.b), (String)object);
            if (!object.exists()) {
                try {
                    if (object.createNewFile() && !this.c()) {
                        Log.i((String)"FirebaseInstanceId", (String)"App restored, clearing state");
                        this.b();
                        FirebaseInstanceId.a().h();
                    }
                    return;
                }
                catch (IOException iOException) {
                    if (!Log.isLoggable((String)"FirebaseInstanceId", (int)3)) break block4;
                    String string3 = String.valueOf(iOException.getMessage());
                    string3 = string3.length() != 0 ? "Error creating file in no backup dir: ".concat(string3) : new String("Error creating file in no backup dir: ");
                    Log.d((String)"FirebaseInstanceId", (String)string3);
                }
            }
        }
    }

    private static String a(String string2, String string3) {
        StringBuilder stringBuilder = new StringBuilder(String.valueOf(string2).length() + 3 + String.valueOf(string3).length());
        stringBuilder.append(string2);
        stringBuilder.append("|S|");
        stringBuilder.append(string3);
        return stringBuilder.toString();
    }

    private static String b(String string2, String string3, String string4) {
        StringBuilder stringBuilder = new StringBuilder(String.valueOf(string2).length() + 4 + String.valueOf(string3).length() + String.valueOf(string4).length());
        stringBuilder.append(string2);
        stringBuilder.append("|T|");
        stringBuilder.append(string3);
        stringBuilder.append("|");
        stringBuilder.append(string4);
        return stringBuilder.toString();
    }

    private final boolean c() {
        synchronized (this) {
            boolean bl2 = this.a.getAll().isEmpty();
            return bl2;
        }
    }

    public final c a(String object, String string2, String string3) {
        synchronized (this) {
            object = c.a(this.a.getString(b.b((String)object, string2, string3), null));
            return object;
        }
    }

    public final String a() {
        synchronized (this) {
            block4 : {
                Object object = this.a.getString("topic_operaion_queue", null);
                if (object == null) break block4;
                object = object.split(",");
                if (((String[])object).length <= 1 || TextUtils.isEmpty((CharSequence)object[1])) break block4;
                object = object[1];
                return object;
            }
            return null;
        }
    }

    public final void a(String string2, String string3, String string4, String string5, String string6) {
        synchronized (this) {
            block4 : {
                string5 = c.a(string5, string6, System.currentTimeMillis());
                if (string5 != null) break block4;
                return;
            }
            string6 = this.a.edit();
            string6.putString(b.b(string2, string3, string4), string5);
            string6.commit();
            return;
        }
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    public final boolean a(String string2) {
        synchronized (this) {
            String string3 = this.a.getString("topic_operaion_queue", "");
            String string4 = String.valueOf(",");
            String string5 = String.valueOf(string2);
            string4 = string5.length() != 0 ? string4.concat(string5) : new String(string4);
            if (!string3.startsWith(string4)) return false;
            string4 = String.valueOf(",");
            string2 = (string2 = String.valueOf(string2)).length() != 0 ? string4.concat(string2) : new String(string4);
            string2 = string3.substring(string2.length());
            this.a.edit().putString("topic_operaion_queue", string2).apply();
            return true;
        }
    }

    final KeyPair b(String string2) {
        synchronized (this) {
            KeyPair keyPair = a.a();
            long l2 = System.currentTimeMillis();
            SharedPreferences.Editor editor = this.a.edit();
            editor.putString(b.a(string2, "|P|"), Base64.encodeToString((byte[])keyPair.getPublic().getEncoded(), (int)11));
            editor.putString(b.a(string2, "|K|"), Base64.encodeToString((byte[])keyPair.getPrivate().getEncoded(), (int)11));
            editor.putString(b.a(string2, "cre"), Long.toString(l2));
            editor.commit();
            return keyPair;
        }
    }

    public final void b() {
        synchronized (this) {
            this.a.edit().clear().commit();
            return;
        }
    }

    public final void c(String string2) {
        synchronized (this) {
            string2 = String.valueOf(string2).concat("|T|");
            SharedPreferences.Editor editor = this.a.edit();
            for (String string3 : this.a.getAll().keySet()) {
                if (!string3.startsWith(string2)) continue;
                editor.remove(string3);
            }
            editor.commit();
            return;
        }
    }

    public final KeyPair d(String object) {
        synchronized (this) {
            block7 : {
                Object object2 = this.a.getString(b.a((String)object, "|P|"), null);
                Object object3 = this.a.getString(b.a((String)object, "|K|"), null);
                if (object2 == null || object3 == null) break block7;
                try {
                    object = Base64.decode((String)object2, (int)8);
                    object2 = Base64.decode((String)object3, (int)8);
                    object3 = KeyFactory.getInstance("RSA");
                    object = new KeyPair(object3.generatePublic(new X509EncodedKeySpec((byte[])object)), object3.generatePrivate(new PKCS8EncodedKeySpec((byte[])object2)));
                    return object;
                }
                catch (NoSuchAlgorithmException | InvalidKeySpecException generalSecurityException) {
                    String string2 = String.valueOf(generalSecurityException);
                    object2 = new StringBuilder(String.valueOf(string2).length() + 19);
                    object2.append("Invalid key stored ");
                    object2.append(string2);
                    Log.w((String)"FirebaseInstanceId", (String)object2.toString());
                    FirebaseInstanceId.a().h();
                }
            }
            return null;
            finally {
            }
        }
    }
}

