/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.content.Context
 *  android.util.Log
 *  com.google.android.apps.common.proguard.UsedByReflection
 */
package com.google.firebase.crash;

import android.content.Context;
import android.support.annotation.Keep;
import android.util.Log;
import com.google.android.apps.common.proguard.UsedByReflection;
import com.google.android.gms.internal.bbr;
import com.google.android.gms.internal.bbs;
import com.google.android.gms.internal.bbv;
import com.google.android.gms.internal.bca;
import com.google.firebase.crash.d;
import com.google.firebase.crash.e;
import com.google.firebase.crash.g;
import java.util.List;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.Callable;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

@UsedByReflection(value="FirebaseApp")
public class FirebaseCrash {
    private static volatile FirebaseCrash a;
    private final Context b;
    private final ExecutorService c;
    private final com.google.firebase.b d;
    private final b e;
    private final CountDownLatch f = new CountDownLatch(1);
    private bca g;

    private FirebaseCrash(com.google.firebase.b b2, ExecutorService executorService) {
        this.d = b2;
        this.c = executorService;
        this.b = this.d.a();
        this.e = new b(null);
    }

    public static FirebaseCrash a() {
        if (a != null) {
            return a;
        }
        return FirebaseCrash.getInstance(com.google.firebase.b.d());
    }

    static /* synthetic */ void a(FirebaseCrash firebaseCrash) {
        firebaseCrash.c();
    }

    private final void c() {
        try {
            this.f.await(20000L, TimeUnit.MILLISECONDS);
            return;
        }
        catch (InterruptedException interruptedException) {
            Log.e((String)"FirebaseCrash", (String)"Failed waiting for crash api to load.", (Throwable)interruptedException);
            return;
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @Keep
    @UsedByReflection(value="FirebaseApp")
    public static FirebaseCrash getInstance(com.google.firebase.b object) {
        if (a != null) return a;
        synchronized (FirebaseCrash.class) {
            if (a != null) return a;
            Object object2 = new ThreadPoolExecutor(1, 1, 10000L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue<Runnable>());
            object2.allowCoreThreadTimeOut(true);
            object2 = new FirebaseCrash((com.google.firebase.b)object, (ExecutorService)object2);
            object = new com.google.firebase.crash.c((com.google.firebase.b)object, null);
            Thread.setDefaultUncaughtExceptionHandler(new c((FirebaseCrash)object2, Thread.getDefaultUncaughtExceptionHandler()));
            com.google.firebase.crash.b b2 = new com.google.firebase.crash.b((FirebaseCrash)object2);
            ExecutorService executorService = Executors.newFixedThreadPool(2);
            executorService.submit(new e((com.google.firebase.crash.c)object, executorService.submit(new d((com.google.firebase.crash.c)object)), 10000L, b2));
            executorService.shutdown();
            object2.c.execute(new com.google.firebase.crash.a((FirebaseCrash)object2));
            a = object2;
            return a;
        }
    }

    final Future<?> a(Throwable throwable) {
        if (throwable != null && !this.b()) {
            return this.c.submit(new bbr(this.b, this.e, throwable, this.g));
        }
        return null;
    }

    final void a(bbv bbv2) {
        if (bbv2 == null) {
            this.c.shutdownNow();
        } else {
            this.g = bca.a(this.b);
            this.e.a(bbv2);
            if (this.g != null && !this.b()) {
                this.g.a(this.b, this.c, this.e);
                Log.d((String)"FirebaseCrash", (String)"Firebase Analytics Listener for Firebase Crash is initialized");
            }
        }
        this.f.countDown();
    }

    final void a(boolean bl2) {
        if (this.b()) {
            return;
        }
        this.c.submit(new bbs(this.b, this.e, bl2));
    }

    public final boolean b() {
        return this.c.isShutdown();
    }

    public static interface a {
        public bbv a();
    }

    static final class b
    implements a {
        private final Object a = new Object();
        private bbv b;

        private b() {
        }

        /* synthetic */ b(com.google.firebase.crash.a a2) {
            this();
        }

        /*
         * Enabled aggressive block sorting
         * Enabled unnecessary exception pruning
         * Enabled aggressive exception aggregation
         */
        private final void a(bbv bbv2) {
            Object object = this.a;
            synchronized (object) {
                this.b = bbv2;
                return;
            }
        }

        /*
         * Enabled aggressive block sorting
         * Enabled unnecessary exception pruning
         * Enabled aggressive exception aggregation
         */
        @Override
        public final bbv a() {
            Object object = this.a;
            synchronized (object) {
                return this.b;
            }
        }
    }

    final class c
    implements Thread.UncaughtExceptionHandler {
        private final Thread.UncaughtExceptionHandler a;
        private /* synthetic */ FirebaseCrash b;

        public c(FirebaseCrash firebaseCrash, Thread.UncaughtExceptionHandler uncaughtExceptionHandler) {
            this.b = firebaseCrash;
            this.a = uncaughtExceptionHandler;
        }

        /*
         * Enabled aggressive block sorting
         * Enabled unnecessary exception pruning
         * Enabled aggressive exception aggregation
         */
        @Override
        public final void uncaughtException(Thread thread, Throwable throwable) {
            Log.e((String)"UncaughtException", (String)"", (Throwable)throwable);
            if (!this.b.b()) {
                try {
                    Future<?> future = this.b.a(throwable);
                    if (future != null) {
                        future.get(10000L, TimeUnit.MILLISECONDS);
                    }
                }
                catch (Exception exception) {
                    Log.e((String)"UncaughtException", (String)"Ouch! My own exception handler threw an exception.", (Throwable)exception);
                }
            }
            if (this.a != null) {
                this.a.uncaughtException(thread, throwable);
            }
        }
    }

}

