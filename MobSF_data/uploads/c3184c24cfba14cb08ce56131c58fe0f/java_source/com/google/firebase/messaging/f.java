/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.content.Context
 *  android.os.Bundle
 *  android.text.TextUtils
 *  android.util.Log
 */
package com.google.firebase.messaging;

import android.content.Context;
import android.os.Bundle;
import android.text.TextUtils;
import android.util.Log;
import com.google.android.gms.internal.bjx;
import com.google.android.gms.internal.bkn;
import com.google.android.gms.internal.bko;
import com.google.android.gms.measurement.AppMeasurement;
import com.google.firebase.messaging.e;
import java.io.Serializable;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

public final class f {
    private static Bundle a(String string2, String string3) {
        Bundle bundle = new Bundle();
        bundle.putString(string2, string3);
        return bundle;
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    private static bko a(byte[] object) {
        try {
            return bko.a(object);
        }
        catch (bjx bjx2) {
            return null;
        }
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    private static AppMeasurement a(Context object) {
        try {
            return AppMeasurement.getInstance(object);
        }
        catch (NoClassDefFoundError noClassDefFoundError) {
            return null;
        }
    }

    /*
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    private static Object a(bko object, String object2, e e2) {
        void var1_4;
        block4 : {
            Field field = null;
            Class<?> class_ = Class.forName("com.google.android.gms.measurement.AppMeasurement$ConditionalUserProperty");
            Bundle bundle = f.a(object.a, object.b);
            Object obj = class_.getConstructor(new Class[0]).newInstance(new Object[0]);
            try {
                class_.getField("mOrigin").set(obj, object2);
                class_.getField("mCreationTimestamp").set(obj, object.c);
                class_.getField("mName").set(obj, object.a);
                class_.getField("mValue").set(obj, object.b);
                object2 = TextUtils.isEmpty((CharSequence)object.d) ? field : object.d;
                class_.getField("mTriggerEventName").set(obj, object2);
                field = class_.getField("mTimedOutEventName");
                object2 = !TextUtils.isEmpty((CharSequence)object.j) ? object.j : e2.b();
                field.set(obj, object2);
                class_.getField("mTimedOutEventParams").set(obj, (Object)bundle);
                class_.getField("mTriggerTimeout").set(obj, object.e);
                field = class_.getField("mTriggeredEventName");
                object2 = !TextUtils.isEmpty((CharSequence)object.h) ? object.h : e2.a();
                field.set(obj, object2);
                class_.getField("mTriggeredEventParams").set(obj, (Object)bundle);
                class_.getField("mTimeToLive").set(obj, object.f);
                object2 = class_.getField("mExpiredEventName");
                object = !TextUtils.isEmpty((CharSequence)object.k) ? object.k : e2.c();
                object2.set(obj, object);
                class_.getField("mExpiredEventParams").set(obj, (Object)bundle);
                return obj;
            }
            catch (Exception exception) {
                object = obj;
            }
            break block4;
            catch (Exception exception) {
                object = null;
            }
        }
        Log.e((String)"FirebaseAbtUtil", (String)"Could not complete the operation due to an internal error.", (Throwable)var1_4);
        return object;
    }

    private static String a(bko bko2, e e2) {
        if (bko2 != null && !TextUtils.isEmpty((CharSequence)bko2.i)) {
            return bko2.i;
        }
        return e2.d();
    }

    private static String a(Object object) {
        return (String)Class.forName("com.google.android.gms.measurement.AppMeasurement$ConditionalUserProperty").getField("mName").get(object);
    }

    private static List<Object> a(AppMeasurement object, String string2) {
        Serializable serializable = new ArrayList();
        try {
            Method method = AppMeasurement.class.getDeclaredMethod("getConditionalUserProperties", String.class, String.class);
            method.setAccessible(true);
            object = (List)method.invoke(object, string2, "");
        }
        catch (Exception exception) {
            Log.e((String)"FirebaseAbtUtil", (String)"Could not complete the operation due to an internal error.", (Throwable)exception);
            object = serializable;
        }
        if (Log.isLoggable((String)"FirebaseAbtUtil", (int)2)) {
            int n2 = object.size();
            serializable = new StringBuilder(String.valueOf(string2).length() + 55);
            serializable.append("Number of currently set _Es for origin: ");
            serializable.append(string2);
            serializable.append(" is ");
            serializable.append(n2);
            Log.v((String)"FirebaseAbtUtil", (String)serializable.toString());
        }
        return object;
    }

    private static void a(Context object, String object2, String string2, String string3, String string4) {
        if (Log.isLoggable((String)"FirebaseAbtUtil", (int)2)) {
            object2 = (object2 = String.valueOf(object2)).length() != 0 ? "_CE(experimentId) called by ".concat((String)object2) : new String("_CE(experimentId) called by ");
            Log.v((String)"FirebaseAbtUtil", (String)object2);
        }
        if (!f.b(object)) {
            return;
        }
        object = f.a(object);
        try {
            object2 = AppMeasurement.class.getDeclaredMethod("clearConditionalUserProperty", String.class, String.class, Bundle.class);
            object2.setAccessible(true);
            if (Log.isLoggable((String)"FirebaseAbtUtil", (int)2)) {
                StringBuilder stringBuilder = new StringBuilder(String.valueOf(string2).length() + 17 + String.valueOf(string3).length());
                stringBuilder.append("Clearing _E: [");
                stringBuilder.append(string2);
                stringBuilder.append(", ");
                stringBuilder.append(string3);
                stringBuilder.append("]");
                Log.v((String)"FirebaseAbtUtil", (String)stringBuilder.toString());
            }
            object2.invoke(object, new Object[]{string2, string4, f.a(string2, string3)});
            return;
        }
        catch (Exception exception) {
            Log.e((String)"FirebaseAbtUtil", (String)"Could not complete the operation due to an internal error.", (Throwable)exception);
            return;
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public static void a(Context object, String string2, byte[] object2, e e2, int n2) {
        Iterator<Object> iterator;
        Object object3;
        String string3;
        boolean bl2;
        Object object4;
        if (Log.isLoggable((String)"FirebaseAbtUtil", (int)2)) {
            object3 = String.valueOf(string3);
            object3 = object3.length() != 0 ? "_SE called by ".concat((String)object3) : new String("_SE called by ");
            Log.v((String)"FirebaseAbtUtil", (String)object3);
        }
        if (!f.b(object)) {
            return;
        }
        object3 = f.a(object);
        if ((object4 = f.a((byte[])object4)) == null) {
            if (Log.isLoggable((String)"FirebaseAbtUtil", (int)2)) {
                Log.v((String)"FirebaseAbtUtil", (String)"_SE failed; either _P was not set, or we couldn't deserialize the _P.");
            }
            return;
        }
        try {
            Class.forName("com.google.android.gms.measurement.AppMeasurement$ConditionalUserProperty");
            iterator = f.a((AppMeasurement)object3, string3).iterator();
            bl2 = false;
        }
        catch (Exception exception) {
            Log.e((String)"FirebaseAbtUtil", (String)"Could not complete the operation due to an internal error.", (Throwable)exception);
            return;
        }
        do {
            long l2;
            String string4;
            Object object5;
            String string5;
            int n3;
            void var3_5;
            block15 : {
                int n4;
                if (!iterator.hasNext()) {
                    f.a((AppMeasurement)object3, object, string3, (bko)object4, (e)var3_5, 1);
                    return;
                }
                object5 = iterator.next();
                string5 = f.a(object5);
                string4 = f.b(object5);
                l2 = (Long)Class.forName("com.google.android.gms.measurement.AppMeasurement$ConditionalUserProperty").getField("mCreationTimestamp").get(object5);
                if (!object4.a.equals(string5) || !object4.b.equals(string4)) {
                    object5 = object4.m;
                    n4 = ((bkn[])object5).length;
                } else {
                    if (Log.isLoggable((String)"FirebaseAbtUtil", (int)2)) {
                        object5 = new StringBuilder(String.valueOf(string5).length() + 23 + String.valueOf(string4).length());
                        object5.append("_E is already set. [");
                        object5.append(string5);
                        object5.append(", ");
                        object5.append(string4);
                        object5.append("]");
                        Log.v((String)"FirebaseAbtUtil", (String)object5.toString());
                    }
                    bl2 = true;
                    continue;
                }
                for (n3 = 0; n3 < n4; ++n3) {
                    if (!object5[n3].a.equals(string5)) continue;
                    if (Log.isLoggable((String)"FirebaseAbtUtil", (int)2)) {
                        object5 = new StringBuilder(String.valueOf(string5).length() + 33 + String.valueOf(string4).length());
                        object5.append("_E is found in the _OE list. [");
                        object5.append(string5);
                        object5.append(", ");
                        object5.append(string4);
                        object5.append("]");
                        Log.v((String)"FirebaseAbtUtil", (String)object5.toString());
                    }
                    n3 = 1;
                    break block15;
                }
                n3 = 0;
            }
            if (n3 != 0) continue;
            if (object4.c > l2) {
                if (Log.isLoggable((String)"FirebaseAbtUtil", (int)2)) {
                    object5 = new StringBuilder(String.valueOf(string5).length() + 115 + String.valueOf(string4).length());
                    object5.append("Clearing _E as it was not in the _OE list, andits start time is older than the start time of the _E to be set. [");
                    object5.append(string5);
                    object5.append(", ");
                    object5.append(string4);
                    object5.append("]");
                    Log.v((String)"FirebaseAbtUtil", (String)object5.toString());
                }
                f.a(object, string3, string5, string4, f.a((bko)object4, (e)var3_5));
                continue;
            }
            if (!Log.isLoggable((String)"FirebaseAbtUtil", (int)2)) continue;
            object5 = new StringBuilder(String.valueOf(string5).length() + 109 + String.valueOf(string4).length());
            object5.append("_E was not found in the _OE list, but not clearing it as it has a new start time than the _E to be set.  [");
            object5.append(string5);
            object5.append(", ");
            object5.append(string4);
            object5.append("]");
            Log.v((String)"FirebaseAbtUtil", (String)object5.toString());
        } while (true);
    }

    /*
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    private static void a(AppMeasurement object, Context object2, String object3, bko bko2, e e2, int n2) {
        Object object4;
        Object object5;
        block10 : {
            StringBuilder stringBuilder;
            Iterator iterator;
            void var4_9;
            CharSequence charSequence;
            String string2;
            void var3_8;
            if (Log.isLoggable((String)"FirebaseAbtUtil", (int)2)) {
                iterator = var3_8.a;
                string2 = var3_8.b;
                charSequence = new StringBuilder(String.valueOf(iterator).length() + 7 + String.valueOf(string2).length());
                charSequence.append("_SEI: ");
                charSequence.append((String)((Object)iterator));
                charSequence.append(" ");
                charSequence.append(string2);
                Log.v((String)"FirebaseAbtUtil", (String)charSequence.toString());
            }
            Class.forName("com.google.android.gms.measurement.AppMeasurement$ConditionalUserProperty");
            iterator = f.a((AppMeasurement)object, (String)object4);
            int n3 = f.b((AppMeasurement)object, (String)object4);
            if (f.a((AppMeasurement)object, (String)object4).size() >= n3) {
                n3 = var3_8.l != 0 ? var3_8.l : 1;
                if (n3 != 1) {
                    if (!Log.isLoggable((String)"FirebaseAbtUtil", (int)2)) return;
                    object = var3_8.a;
                    String string3 = var3_8.b;
                    object4 = new StringBuilder(String.valueOf(object).length() + 44 + String.valueOf(string3).length());
                    object4.append("_E won't be set due to overflow policy. [");
                    object4.append((String)object);
                    object4.append(", ");
                    object4.append(string3);
                    object4.append("]");
                    Log.v((String)"FirebaseAbtUtil", (String)object4.toString());
                    return;
                }
                charSequence = iterator.get(0);
                string2 = f.a(charSequence);
                charSequence = f.b(charSequence);
                if (Log.isLoggable((String)"FirebaseAbtUtil", (int)2)) {
                    stringBuilder = new StringBuilder(String.valueOf(string2).length() + 38);
                    stringBuilder.append("Clearing _E due to overflow policy: [");
                    stringBuilder.append(string2);
                    stringBuilder.append("]");
                    Log.v((String)"FirebaseAbtUtil", (String)stringBuilder.toString());
                }
                f.a((Context)object2, (String)object4, string2, (String)charSequence, f.a((bko)var3_8, (e)var4_9));
            }
            iterator = iterator.iterator();
            while (iterator.hasNext()) {
                charSequence = iterator.next();
                string2 = f.a(charSequence);
                charSequence = f.b(charSequence);
                if (!string2.equals(var3_8.a) || charSequence.equals(var3_8.b) || !Log.isLoggable((String)"FirebaseAbtUtil", (int)2)) continue;
                stringBuilder = new StringBuilder(String.valueOf(string2).length() + 77 + String.valueOf(charSequence).length());
                stringBuilder.append("Clearing _E, as only one _V of the same _E can be set atany given time: [");
                stringBuilder.append(string2);
                stringBuilder.append(", ");
                stringBuilder.append((String)charSequence);
                stringBuilder.append("].");
                Log.v((String)"FirebaseAbtUtil", (String)stringBuilder.toString());
                f.a((Context)object2, (String)object4, string2, (String)charSequence, f.a((bko)var3_8, (e)var4_9));
            }
            object5 = f.a((bko)var3_8, (String)object4, (e)var4_9);
            if (object5 != null) break block10;
            if (!Log.isLoggable((String)"FirebaseAbtUtil", (int)2)) return;
            object = var3_8.a;
            String string4 = var3_8.b;
            object4 = new StringBuilder(String.valueOf(object).length() + 42 + String.valueOf(string4).length());
            object4.append("Could not create _CUP for: [");
            object4.append((String)object);
            object4.append(", ");
            object4.append(string4);
            object4.append("]. Skipping.");
            Log.v((String)"FirebaseAbtUtil", (String)object4.toString());
            return;
            {
                catch (Exception exception) {
                    Log.e((String)"FirebaseAbtUtil", (String)"Could not complete the operation due to an internal error.", (Throwable)exception);
                    return;
                }
            }
        }
        try {
            object4 = AppMeasurement.class.getDeclaredMethod("setConditionalUserProperty", Class.forName("com.google.android.gms.measurement.AppMeasurement$ConditionalUserProperty"));
            object4.setAccessible(true);
            object4.invoke(object, object5);
            return;
        }
        catch (Exception exception) {
            Log.e((String)"FirebaseAbtUtil", (String)"Could not complete the operation due to an internal error.", (Throwable)exception);
            return;
        }
    }

    private static int b(AppMeasurement appMeasurement, String string2) {
        try {
            Method method = AppMeasurement.class.getDeclaredMethod("getMaxUserProperties", String.class);
            method.setAccessible(true);
            int n2 = (Integer)method.invoke(appMeasurement, string2);
            return n2;
        }
        catch (Exception exception) {
            Log.e((String)"FirebaseAbtUtil", (String)"Could not complete the operation due to an internal error.", (Throwable)exception);
            return 20;
        }
    }

    private static String b(Object object) {
        return (String)Class.forName("com.google.android.gms.measurement.AppMeasurement$ConditionalUserProperty").getField("mValue").get(object);
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    private static boolean b(Context context) {
        if (f.a(context) == null) {
            if (Log.isLoggable((String)"FirebaseAbtUtil", (int)2)) {
                Log.v((String)"FirebaseAbtUtil", (String)"Firebase Analytics not available");
            }
            return false;
        }
        try {
            Class.forName("com.google.android.gms.measurement.AppMeasurement$ConditionalUserProperty");
            return true;
        }
        catch (ClassNotFoundException classNotFoundException) {}
        if (Log.isLoggable((String)"FirebaseAbtUtil", (int)2)) {
            Log.v((String)"FirebaseAbtUtil", (String)"Firebase Analytics library is missing support for abt. Please update to a more recent version.");
        }
        return false;
    }
}

