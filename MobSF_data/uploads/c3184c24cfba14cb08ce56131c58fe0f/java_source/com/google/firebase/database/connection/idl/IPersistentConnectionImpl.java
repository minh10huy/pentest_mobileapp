/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.content.Context
 *  android.os.IBinder
 *  android.os.RemoteException
 */
package com.google.firebase.database.connection.idl;

import android.content.Context;
import android.os.IBinder;
import android.os.RemoteException;
import com.google.android.gms.a.a;
import com.google.android.gms.a.m;
import com.google.android.gms.common.util.DynamiteApi;
import com.google.android.gms.dynamite.DynamiteModule;
import com.google.android.gms.internal.bcj;
import com.google.android.gms.internal.bcl;
import com.google.android.gms.internal.bcn;
import com.google.android.gms.internal.bco;
import com.google.android.gms.internal.bcp;
import com.google.android.gms.internal.bcq;
import com.google.android.gms.internal.bcr;
import com.google.android.gms.internal.bdi;
import com.google.android.gms.internal.bee;
import com.google.android.gms.internal.bei;
import com.google.android.gms.internal.bej;
import com.google.firebase.database.connection.idl.aa;
import com.google.firebase.database.connection.idl.ac;
import com.google.firebase.database.connection.idl.af;
import com.google.firebase.database.connection.idl.b;
import com.google.firebase.database.connection.idl.c;
import com.google.firebase.database.connection.idl.d;
import com.google.firebase.database.connection.idl.e;
import com.google.firebase.database.connection.idl.g;
import com.google.firebase.database.connection.idl.i;
import com.google.firebase.database.connection.idl.n;
import com.google.firebase.database.connection.idl.p;
import com.google.firebase.database.connection.idl.r;
import com.google.firebase.database.connection.idl.x;
import com.google.firebase.database.connection.idl.z;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ScheduledExecutorService;

@DynamiteApi
public class IPersistentConnectionImpl
extends aa {
    private bcp a;

    static /* synthetic */ long a(Long l2) {
        return IPersistentConnectionImpl.b(l2);
    }

    private static bdi a(i i2) {
        return new b(i2);
    }

    static /* synthetic */ Long a(long l2) {
        return IPersistentConnectionImpl.b(l2);
    }

    private static long b(Long l2) {
        if (l2 != null) {
            if (l2 != -1L) {
                return l2;
            }
            throw new IllegalArgumentException("Tag parameter clashed with NO_TAG value");
        }
        return -1L;
    }

    private static Long b(long l2) {
        if (l2 == -1L) {
            return null;
        }
        return l2;
    }

    public static z loadDynamic(Context object, n n2, bcj bcj2, ScheduledExecutorService scheduledExecutorService, bcq bcq2) {
        try {
            object = aa.asInterface(DynamiteModule.a((Context)object, DynamiteModule.d, "com.google.android.gms.firebase_database").a("com.google.firebase.database.connection.idl.IPersistentConnectionImpl"));
            object.setup(n2, new e(bcj2), m.a(scheduledExecutorService), new c(bcq2));
            return object;
        }
        catch (RemoteException remoteException) {
            throw new RuntimeException((Throwable)remoteException);
        }
        catch (DynamiteModule.c c2) {
            throw new RuntimeException(c2);
        }
    }

    @Override
    public void compareAndPut(List<String> list, a a2, String string2, i i2) {
        this.a.a(list, m.a(a2), string2, IPersistentConnectionImpl.a(i2));
    }

    @Override
    public void initialize() {
        this.a.a();
    }

    @Override
    public void interrupt(String string2) {
        this.a.d(string2);
    }

    @Override
    public boolean isInterrupted(String string2) {
        return this.a.f(string2);
    }

    @Override
    public void listen(List<String> list, a object, x object2, long l2, i i2) {
        Long l3 = IPersistentConnectionImpl.b(l2);
        object = (Map)m.a((a)object);
        object2 = new af(this, (x)object2);
        this.a.a(list, (Map<String, Object>)object, (bco)object2, l3, IPersistentConnectionImpl.a(i2));
    }

    @Override
    public void merge(List<String> list, a a2, i i2) {
        this.a.a(list, (Map)m.a(a2), IPersistentConnectionImpl.a(i2));
    }

    @Override
    public void onDisconnectCancel(List<String> list, i i2) {
        this.a.a(list, IPersistentConnectionImpl.a(i2));
    }

    @Override
    public void onDisconnectMerge(List<String> list, a a2, i i2) {
        this.a.b(list, (Map)m.a(a2), IPersistentConnectionImpl.a(i2));
    }

    @Override
    public void onDisconnectPut(List<String> list, a a2, i i2) {
        this.a.b(list, m.a(a2), IPersistentConnectionImpl.a(i2));
    }

    @Override
    public void purgeOutstandingWrites() {
        this.a.d();
    }

    @Override
    public void put(List<String> list, a a2, i i2) {
        this.a.a(list, m.a(a2), IPersistentConnectionImpl.a(i2));
    }

    @Override
    public void refreshAuthToken() {
        this.a.c();
    }

    @Override
    public void refreshAuthToken2(String string2) {
        this.a.c(string2);
    }

    @Override
    public void resume(String string2) {
        this.a.e(string2);
    }

    @Override
    public void setup(n n2, r r2, a object, ac object2) {
        bcn bcn2 = p.a(n2.a);
        ScheduledExecutorService scheduledExecutorService = (ScheduledExecutorService)m.a(object);
        object2 = new d((ac)object2);
        switch (n2.b) {
            default: {
                object = bej.e;
                break;
            }
            case 4: {
                object = bej.d;
                break;
            }
            case 3: {
                object = bej.c;
                break;
            }
            case 2: {
                object = bej.b;
                break;
            }
            case 1: {
                object = bej.a;
            }
        }
        this.a = new bcr(new bcl(new bee((bej)((Object)object), n2.c), new g(r2), scheduledExecutorService, n2.d, n2.e, n2.f, n2.g), bcn2, (bcq)object2);
    }

    @Override
    public void shutdown() {
        this.a.b();
    }

    @Override
    public void unlisten(List<String> list, a a2) {
        this.a.a(list, (Map)m.a(a2));
    }
}

