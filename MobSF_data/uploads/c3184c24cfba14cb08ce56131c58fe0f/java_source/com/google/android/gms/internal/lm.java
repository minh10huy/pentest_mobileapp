/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.os.SystemClock
 *  android.text.TextUtils
 */
package com.google.android.gms.internal;

import android.os.SystemClock;
import android.text.TextUtils;
import com.google.android.gms.internal.bqh;
import com.google.android.gms.internal.eg;
import com.google.android.gms.internal.mn;
import com.google.android.gms.internal.no;
import com.google.android.gms.internal.op;
import com.google.android.gms.internal.ua;
import com.google.android.gms.internal.yl;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

public final class lm
implements ua {
    private final Map<String, mn> a = new LinkedHashMap<String, mn>(16, 0.75f, true);
    private long b = 0L;
    private final File c;
    private final int d;

    public lm(File file) {
        this(file, 5242880);
    }

    private lm(File file, int n2) {
        this.c = file;
        this.d = 5242880;
    }

    static int a(InputStream inputStream) {
        int n2 = lm.c(inputStream);
        int n3 = lm.c(inputStream);
        int n4 = lm.c(inputStream);
        return lm.c(inputStream) << 24 | (n2 | 0 | n3 << 8 | n4 << 16);
    }

    private static InputStream a(File file) {
        return new FileInputStream(file);
    }

    static String a(no no2) {
        return new String(lm.a(no2, lm.b((InputStream)no2)), "UTF-8");
    }

    static void a(OutputStream outputStream, int n2) {
        outputStream.write(n2 & 255);
        outputStream.write(n2 >> 8 & 255);
        outputStream.write(n2 >> 16 & 255);
        outputStream.write(n2 >>> 24);
    }

    static void a(OutputStream outputStream, long l2) {
        outputStream.write((byte)l2);
        outputStream.write((byte)(l2 >>> 8));
        outputStream.write((byte)(l2 >>> 16));
        outputStream.write((byte)(l2 >>> 24));
        outputStream.write((byte)(l2 >>> 32));
        outputStream.write((byte)(l2 >>> 40));
        outputStream.write((byte)(l2 >>> 48));
        outputStream.write((byte)(l2 >>> 56));
    }

    static void a(OutputStream outputStream, String arrby) {
        arrby = arrby.getBytes("UTF-8");
        lm.a(outputStream, (long)arrby.length);
        outputStream.write(arrby, 0, arrby.length);
    }

    private final void a(String string2, mn mn2) {
        if (!this.a.containsKey(string2)) {
            this.b += mn2.a;
        } else {
            mn mn3 = this.a.get(string2);
            this.b += mn2.a - mn3.a;
        }
        this.a.put(string2, mn2);
    }

    private static byte[] a(no object, long l2) {
        int n2;
        long l3 = object.a();
        if (l2 >= 0L && l2 <= l3 && (long)(n2 = (int)l2) == l2) {
            byte[] arrby = new byte[n2];
            new DataInputStream((InputStream)object).readFully(arrby);
            return arrby;
        }
        object = new StringBuilder(73);
        object.append("streamToBytes length=");
        object.append(l2);
        object.append(", maxLength=");
        object.append(l3);
        throw new IOException(object.toString());
    }

    static long b(InputStream inputStream) {
        return (long)lm.c(inputStream) & 255L | 0L | ((long)lm.c(inputStream) & 255L) << 8 | ((long)lm.c(inputStream) & 255L) << 16 | ((long)lm.c(inputStream) & 255L) << 24 | ((long)lm.c(inputStream) & 255L) << 32 | ((long)lm.c(inputStream) & 255L) << 40 | ((long)lm.c(inputStream) & 255L) << 48 | (255L & (long)lm.c(inputStream)) << 56;
    }

    static List<bqh> b(no no2) {
        int n2 = lm.a((InputStream)no2);
        List<bqh> list = n2 == 0 ? Collections.emptyList() : new ArrayList(n2);
        for (int i2 = 0; i2 < n2; ++i2) {
            list.add(new bqh(lm.a(no2).intern(), lm.a(no2).intern()));
        }
        return list;
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    private final void b(String string2) {
        synchronized (this) {
            boolean bl2 = this.d(string2).delete();
            this.e(string2);
            if (!bl2) {
                eg.b("Could not delete cache entry for key=%s, filename=%s", string2, lm.c(string2));
            }
            return;
        }
    }

    private static int c(InputStream inputStream) {
        int n2 = inputStream.read();
        if (n2 != -1) {
            return n2;
        }
        throw new EOFException();
    }

    private static String c(String string2) {
        int n2 = string2.length() / 2;
        String string3 = String.valueOf(String.valueOf(string2.substring(0, n2).hashCode()));
        if ((string2 = String.valueOf(String.valueOf(string2.substring(n2).hashCode()))).length() != 0) {
            return string3.concat(string2);
        }
        return new String(string3);
    }

    private final File d(String string2) {
        return new File(this.c, lm.c(string2));
    }

    private final void e(String object) {
        if ((object = this.a.remove(object)) != null) {
            this.b -= object.a;
        }
    }

    /*
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Converted monitor instructions to comments
     * Lifted jumps to return sites
     */
    @Override
    public final yl a(String string2) {
        byte[] arrby;
        no no2;
        block12 : {
            // MONITORENTER : this
            mn mn2 = this.a.get(string2);
            if (mn2 == null) {
                // MONITOREXIT : this
                return null;
            }
            File file = this.d(string2);
            try {
                no2 = new no(new BufferedInputStream(lm.a(file)), file.length());
            }
            catch (IOException no22) {
                eg.b("%s: %s", file.getAbsolutePath(), no22.toString());
                this.b(string2);
                // MONITOREXIT : this
                return null;
            }
            arrby = mn.a(no2);
            if (TextUtils.equals((CharSequence)string2, (CharSequence)arrby.b)) break block12;
            eg.b("%s: key=%s, found=%s", file.getAbsolutePath(), string2, arrby.b);
            this.e(string2);
            no2.close();
            // MONITOREXIT : this
            return null;
        }
        arrby = lm.a(no2, no2.a());
        yl yl2 = new yl();
        yl2.a = arrby;
        yl2.b = mn2.c;
        yl2.c = mn2.d;
        yl2.d = mn2.e;
        yl2.e = mn2.f;
        yl2.f = mn2.g;
        yl2.g = op.a(mn2.h);
        yl2.h = Collections.unmodifiableList(mn2.h);
        {
            catch (Throwable mn2) {
                no2.close();
                throw mn2;
            }
        }
        no2.close();
        // MONITOREXIT : this
        return yl2;
    }

    /*
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Converted monitor instructions to comments
     * Lifted jumps to return sites
     */
    @Override
    public final void a() {
        // MONITORENTER : this
        boolean bl2 = this.c.exists();
        int n2 = 0;
        if (!bl2) {
            if (!this.c.mkdirs()) {
                eg.c("Unable to create cache dir %s", this.c.getAbsolutePath());
            }
            // MONITOREXIT : this
            return;
        }
        File[] arrfile = this.c.listFiles();
        if (arrfile == null) {
            // MONITOREXIT : this
            return;
        }
        int n3 = arrfile.length;
        do {
            block14 : {
                no no2;
                long l2;
                if (n2 >= n3) {
                    // MONITOREXIT : this
                    return;
                }
                File file = arrfile[n2];
                try {
                    l2 = file.length();
                    no2 = new no(new BufferedInputStream(lm.a(file)), l2);
                }
                catch (IOException iOException) {}
                mn mn2 = mn.a(no2);
                mn2.a = l2;
                this.a(mn2.b, mn2);
                {
                    catch (Throwable throwable) {
                        no2.close();
                        throw throwable;
                    }
                }
                no2.close();
                break block14;
                file.delete();
            }
            ++n2;
        } while (true);
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @Override
    public final void a(String string2, yl yl2) {
        synchronized (this) {
            Object object;
            Object object2;
            int n2 = var2_3.a.length;
            long l2 = this.b;
            long l3 = n2;
            if (l2 + l3 >= (long)this.d) {
                int n3;
                long l4;
                block13 : {
                    if (eg.a) {
                        eg.a("Pruning old cache entries.", new Object[0]);
                    }
                    l2 = this.b;
                    l4 = SystemClock.elapsedRealtime();
                    object2 = this.a.entrySet().iterator();
                    n2 = 0;
                    do {
                        n3 = n2;
                        if (!object2.hasNext()) break block13;
                        object = (mn)((Map.Entry)object2.next()).getValue();
                        if (this.d(object.b).delete()) {
                            this.b -= object.a;
                        } else {
                            eg.b("Could not delete cache entry for key=%s, filename=%s", object.b, lm.c(object.b));
                        }
                        object2.remove();
                        ++n2;
                    } while ((float)(this.b + l3) >= (float)this.d * 0.9f);
                    n3 = n2;
                }
                if (eg.a) {
                    eg.a("pruned %d files, %d bytes, %d ms", n3, this.b - l2, SystemClock.elapsedRealtime() - l4);
                }
            }
            object2 = this.d(string2);
            try {
                void var2_3;
                object = new BufferedOutputStream(new FileOutputStream((File)object2));
                mn mn2 = new mn(string2, (yl)var2_3);
                if (mn2.a((OutputStream)object)) {
                    object.write(var2_3.a);
                    object.close();
                    this.a(string2, mn2);
                    return;
                }
                object.close();
                eg.b("Failed to write header for %s", object2.getAbsolutePath());
                throw new IOException();
            }
            catch (IOException iOException) {}
            if (!object2.delete()) {
                eg.b("Could not clean up file %s", object2.getAbsolutePath());
            }
            return;
        }
    }
}

