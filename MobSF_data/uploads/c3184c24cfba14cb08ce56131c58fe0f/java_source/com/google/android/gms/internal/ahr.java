/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.os.Bundle
 *  android.os.RemoteException
 */
package com.google.android.gms.internal;

import android.os.Bundle;
import android.os.RemoteException;
import com.google.android.gms.internal.aho;
import com.google.android.gms.internal.ahp;
import com.google.android.gms.internal.ahy;
import com.google.android.gms.internal.aiv;

final class ahr
implements Runnable {
    private /* synthetic */ aho a;

    private ahr(aho aho2) {
        this.a = aho2;
    }

    /* synthetic */ ahr(aho aho2, ahp ahp2) {
        this(aho2);
    }

    @Override
    public final void run() {
        aho.a(this.a, 3);
        String string2 = aho.d(this.a);
        Object object2 = new StringBuilder(String.valueOf(string2).length() + 26);
        object2.append("Container ");
        object2.append(string2);
        object2.append(" loading failed.");
        aiv.b(object2.toString());
        if (aho.i(this.a) != null) {
            for (Object object2 : aho.i(this.a)) {
                StringBuilder stringBuilder;
                if (object2.h()) {
                    try {
                        aho.j(this.a).a("app", object2.d(), object2.e(), object2.a());
                        object2 = object2.d();
                        stringBuilder = new StringBuilder(String.valueOf(object2).length() + 50);
                        stringBuilder.append("Logged event ");
                        stringBuilder.append((String)object2);
                        stringBuilder.append(" to Firebase (marked as passthrough).");
                        aiv.d(stringBuilder.toString());
                    }
                    catch (RemoteException remoteException) {
                        ahy.a("Error logging event with measurement proxy:", (Throwable)remoteException, aho.k(this.a));
                    }
                    continue;
                }
                object2 = object2.d();
                stringBuilder = new StringBuilder(String.valueOf(object2).length() + 45);
                stringBuilder.append("Discarded event ");
                stringBuilder.append((String)object2);
                stringBuilder.append(" (marked as non-passthrough).");
                aiv.d(stringBuilder.toString());
            }
            aho.a(this.a, null);
        }
    }
}

