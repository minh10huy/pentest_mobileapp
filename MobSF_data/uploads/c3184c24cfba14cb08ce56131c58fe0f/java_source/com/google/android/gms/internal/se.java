/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.app.AlarmManager
 *  android.app.PendingIntent
 *  android.app.job.JobInfo
 *  android.app.job.JobInfo$Builder
 *  android.app.job.JobScheduler
 *  android.content.ComponentName
 *  android.content.Context
 *  android.content.Intent
 *  android.content.pm.ActivityInfo
 *  android.content.pm.PackageManager
 *  android.content.pm.PackageManager$NameNotFoundException
 *  android.os.Build
 *  android.os.Build$VERSION
 *  android.os.PersistableBundle
 */
package com.google.android.gms.internal;

import android.app.AlarmManager;
import android.app.PendingIntent;
import android.app.job.JobInfo;
import android.app.job.JobScheduler;
import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.content.pm.ActivityInfo;
import android.content.pm.PackageManager;
import android.os.Build;
import android.os.PersistableBundle;
import com.google.android.gms.common.internal.ah;
import com.google.android.gms.common.util.f;
import com.google.android.gms.internal.qv;
import com.google.android.gms.internal.qx;
import com.google.android.gms.internal.rz;

public final class se
extends qv {
    private boolean a;
    private boolean b;
    private final AlarmManager c = (AlarmManager)this.i().getSystemService("alarm");
    private Integer d;

    protected se(qx qx2) {
        super(qx2);
    }

    private final PendingIntent f() {
        Intent intent = new Intent("com.google.android.gms.analytics.ANALYTICS_DISPATCH");
        intent.setComponent(new ComponentName(this.i(), "com.google.android.gms.analytics.AnalyticsReceiver"));
        return PendingIntent.getBroadcast((Context)this.i(), (int)0, (Intent)intent, (int)0);
    }

    private final int z() {
        if (this.d == null) {
            String string2 = String.valueOf(this.i().getPackageName());
            string2 = string2.length() != 0 ? "analytics".concat(string2) : new String("analytics");
            this.d = string2.hashCode();
        }
        return this.d;
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    @Override
    protected final void a() {
        try {
            ActivityInfo activityInfo;
            this.e();
            if (rz.e() <= 0L || (activityInfo = this.i().getPackageManager().getReceiverInfo(new ComponentName(this.i(), "com.google.android.gms.analytics.AnalyticsReceiver"), 2)) == null) return;
        }
        catch (PackageManager.NameNotFoundException nameNotFoundException) {
            return;
        }
        if (!activityInfo.enabled) return;
        this.b("Receiver registered for local dispatch.");
        this.a = true;
    }

    public final boolean b() {
        return this.a;
    }

    public final boolean c() {
        return this.b;
    }

    public final void d() {
        this.x();
        ah.a(this.a, (Object)"Receiver not registered");
        long l2 = rz.e();
        if (l2 > 0L) {
            this.e();
            long l3 = this.h().b();
            this.b = true;
            if (Build.VERSION.SDK_INT >= 24) {
                this.b("Scheduling upload with JobScheduler");
                ComponentName componentName = new ComponentName(this.i(), "com.google.android.gms.analytics.AnalyticsJobService");
                JobScheduler jobScheduler = (JobScheduler)this.i().getSystemService("jobscheduler");
                componentName = new JobInfo.Builder(this.z(), componentName);
                componentName.setMinimumLatency(l2);
                componentName.setOverrideDeadline(l2 << 1);
                PersistableBundle persistableBundle = new PersistableBundle();
                persistableBundle.putString("action", "com.google.android.gms.analytics.ANALYTICS_DISPATCH");
                componentName.setExtras(persistableBundle);
                componentName = componentName.build();
                this.a("Scheduling job. JobID", this.z());
                jobScheduler.schedule((JobInfo)componentName);
                return;
            }
            this.b("Scheduling upload with AlarmManager");
            this.c.setInexactRepeating(2, l3 + l2, l2, this.f());
        }
    }

    public final void e() {
        this.b = false;
        this.c.cancel(this.f());
        if (Build.VERSION.SDK_INT >= 24) {
            JobScheduler jobScheduler = (JobScheduler)this.i().getSystemService("jobscheduler");
            this.a("Cancelling job. JobID", this.z());
            jobScheduler.cancel(this.z());
        }
    }
}

