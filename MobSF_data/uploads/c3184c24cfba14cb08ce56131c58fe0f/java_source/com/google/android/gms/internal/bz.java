/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.os.Parcel
 *  android.os.ParcelFileDescriptor
 *  android.os.ParcelFileDescriptor$AutoCloseInputStream
 *  android.os.ParcelFileDescriptor$AutoCloseOutputStream
 *  android.os.Parcelable
 *  android.os.Parcelable$Creator
 */
package com.google.android.gms.internal;

import android.os.Parcel;
import android.os.ParcelFileDescriptor;
import android.os.Parcelable;
import com.google.android.gms.ads.internal.av;
import com.google.android.gms.common.util.n;
import com.google.android.gms.internal.ak;
import com.google.android.gms.internal.ca;
import com.google.android.gms.internal.cb;
import com.google.android.gms.internal.he;
import com.google.android.gms.internal.wz;
import com.google.android.gms.internal.xc;
import com.google.android.gms.internal.xd;
import java.io.Closeable;
import java.io.DataInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

@ak
public final class bz
extends wz {
    public static final Parcelable.Creator<bz> CREATOR = new cb();
    private ParcelFileDescriptor a;
    private Parcelable b;
    private boolean c;

    public bz(ParcelFileDescriptor parcelFileDescriptor) {
        this.a = parcelFileDescriptor;
        this.b = null;
        this.c = true;
    }

    public bz(xd xd2) {
        this.a = null;
        this.b = xd2;
        this.c = false;
    }

    private final ParcelFileDescriptor a() {
        if (this.a == null) {
            Parcel parcel = Parcel.obtain();
            try {
                this.b.writeToParcel(parcel, 0);
                byte[] arrby = parcel.marshall();
                this.a = this.a(arrby);
            }
            finally {
                parcel.recycle();
            }
        }
        return this.a;
    }

    /*
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    private final <T> ParcelFileDescriptor a(byte[] autoCloseOutputStream) {
        Object object;
        block4 : {
            ParcelFileDescriptor[] arrparcelFileDescriptor = ParcelFileDescriptor.createPipe();
            object = new ParcelFileDescriptor.AutoCloseOutputStream(arrparcelFileDescriptor[1]);
            try {
                new Thread(new ca(this, (OutputStream)object, (byte[])autoCloseOutputStream)).start();
            }
            catch (IOException iOException) {
                autoCloseOutputStream = object;
                object = iOException;
                break block4;
            }
            return arrparcelFileDescriptor[0];
            catch (IOException iOException) {
                autoCloseOutputStream = null;
            }
        }
        he.b("Error transporting the ad response", (Throwable)object);
        av.i().a((Throwable)object, "LargeParcelTeleporter.pipeData.2");
        n.a((Closeable)autoCloseOutputStream);
        return null;
    }

    /*
     * WARNING - Removed back jump from a try to a catch block - possible behaviour change.
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    public final <T extends xd> T a(Parcelable.Creator<T> creator) {
        Throwable throwable2222;
        if (!this.c) return (T)((xd)this.b);
        if (this.a == null) {
            he.c("File descriptor is empty, returning null.");
            return null;
        }
        DataInputStream dataInputStream = new DataInputStream((InputStream)new ParcelFileDescriptor.AutoCloseInputStream(this.a));
        byte[] arrby = new byte[dataInputStream.readInt()];
        dataInputStream.readFully(arrby, 0, arrby.length);
        n.a(dataInputStream);
        dataInputStream = Parcel.obtain();
        try {
            dataInputStream.unmarshall(arrby, 0, arrby.length);
            dataInputStream.setDataPosition(0);
            this.b = (xd)creator.createFromParcel((Parcel)dataInputStream);
            this.c = false;
            return (T)((xd)this.b);
        }
        finally {
            dataInputStream.recycle();
        }
        {
            catch (Throwable throwable2222) {
            }
            catch (IOException iOException) {}
            {
                he.b("Could not read from parcel file descriptor", iOException);
            }
            n.a(dataInputStream);
            return null;
        }
        n.a(dataInputStream);
        throw throwable2222;
    }

    public final void writeToParcel(Parcel parcel, int n2) {
        this.a();
        int n3 = xc.a(parcel);
        xc.a(parcel, 2, (Parcelable)this.a, n2, false);
        xc.a(parcel, n3);
    }
}

