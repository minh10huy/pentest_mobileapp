/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.annotation.SuppressLint
 *  android.content.Context
 *  android.os.PowerManager
 *  android.os.PowerManager$WakeLock
 *  android.os.WorkSource
 *  android.text.TextUtils
 *  android.util.Log
 */
package com.google.android.gms.internal;

import android.annotation.SuppressLint;
import android.content.Context;
import android.os.PowerManager;
import android.os.WorkSource;
import android.text.TextUtils;
import android.util.Log;
import com.google.android.gms.common.internal.ah;
import com.google.android.gms.common.stats.c;
import com.google.android.gms.common.stats.e;
import com.google.android.gms.common.util.b;
import com.google.android.gms.common.util.s;
import com.google.android.gms.internal.ahi;
import com.google.android.gms.internal.xv;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;

public final class ahg {
    private static String a = "WakeLock";
    private static String b = "*gcore*:";
    private static boolean c = false;
    private static ScheduledExecutorService o;
    private final PowerManager.WakeLock d;
    private WorkSource e;
    private final int f;
    private final String g;
    private final String h;
    private final String i;
    private final Context j;
    private boolean k;
    private final Map<String, Integer[]> l;
    private int m;
    private AtomicInteger n;

    public ahg(Context context, int n2, String string2) {
        String string3 = context == null ? null : context.getPackageName();
        this(context, 1, string2, null, string3);
    }

    @SuppressLint(value={"UnwrappedWakeLock"})
    private ahg(Context context, int n2, String string2, String string3, String string4) {
        this(context, 1, string2, null, string4, null);
    }

    @SuppressLint(value={"UnwrappedWakeLock"})
    private ahg(Context context, int n2, String string2, String string3, String string4, String string5) {
        this.k = true;
        this.l = new HashMap<String, Integer[]>();
        this.n = new AtomicInteger(0);
        ah.a(string2, (Object)"Wake lock name can NOT be empty");
        this.f = n2;
        this.h = null;
        this.i = null;
        this.j = context.getApplicationContext();
        if (!"com.google.android.gms".equals(context.getPackageName())) {
            string3 = String.valueOf(b);
            string5 = String.valueOf(string2);
            string3 = string5.length() != 0 ? string3.concat(string5) : new String(string3);
            this.g = string3;
        } else {
            this.g = string2;
        }
        this.d = ((PowerManager)context.getSystemService("power")).newWakeLock(n2, string2);
        if (b.a(this.j)) {
            string2 = string4;
            if (s.a(string4)) {
                string2 = context.getPackageName();
            }
            this.e = b.a(context, string2);
            context = this.e;
            if (context != null && b.a(this.j)) {
                if (this.e != null) {
                    this.e.add((WorkSource)context);
                } else {
                    this.e = context;
                }
                context = this.e;
                try {
                    this.d.setWorkSource((WorkSource)context);
                }
                catch (IllegalArgumentException illegalArgumentException) {
                    Log.wtf((String)a, (String)illegalArgumentException.toString());
                }
            }
        }
        if (o == null) {
            o = xv.a().a();
        }
    }

    private final String a(String string2) {
        if (this.k) {
            if (!TextUtils.isEmpty((CharSequence)string2)) {
                return string2;
            }
            return this.h;
        }
        return this.h;
    }

    private final void a(int n2) {
        if (this.d.isHeld()) {
            try {
                this.d.release();
                return;
            }
            catch (RuntimeException runtimeException) {
                if (runtimeException.getClass().equals(RuntimeException.class)) {
                    Log.e((String)a, (String)String.valueOf(this.g).concat("was already released!"), (Throwable)new IllegalStateException());
                    return;
                }
                throw runtimeException;
            }
        }
    }

    static /* synthetic */ void a(ahg ahg2, int n2) {
        ahg2.a(0);
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Converted monitor instructions to comments
     * Lifted jumps to return sites
     */
    public final void a() {
        block11 : {
            block10 : {
                block9 : {
                    if (this.n.decrementAndGet() < 0) {
                        Log.e((String)ahg.a, (String)"release without a matched acquire!");
                    }
                    var2_1 = this.a(null);
                    // MONITORENTER : this
                    if (!this.k) break block9;
                    var3_2 = this.l.get(var2_1);
                    if (var3_2 == null) ** GOTO lbl13
                    if (var3_2[0] == 1) {
                        this.l.remove(var2_1);
                        var1_3 = true;
                    } else {
                        var3_2[0] = var3_2[0] - 1;
lbl13: // 2 sources:
                        var1_3 = false;
                    }
                    if (var1_3) break block10;
                }
                if (this.k || this.m != 1) break block11;
            }
            e.a();
            e.a(this.j, c.a(this.d, var2_1), 8, this.g, var2_1, null, this.f, b.a(this.e));
            --this.m;
        }
        // MONITOREXIT : this
        this.a(0);
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public final void a(long l2) {
        block11 : {
            this.n.incrementAndGet();
            String string2 = this.a(null);
            synchronized (this) {
                block10 : {
                    block9 : {
                        boolean bl2 = this.l.isEmpty();
                        boolean bl3 = false;
                        if (!(bl2 && this.m <= 0 || this.d.isHeld())) {
                            this.l.clear();
                            this.m = 0;
                        }
                        if (!this.k) break block9;
                        Integer[] arrinteger = this.l.get(string2);
                        if (arrinteger == null) {
                            this.l.put(string2, new Integer[]{1});
                            bl3 = true;
                        } else {
                            arrinteger[0] = arrinteger[0] + 1;
                        }
                        if (bl3) break block10;
                    }
                    if (this.k || this.m != 0) break block11;
                }
                e.a();
                e.a(this.j, c.a(this.d, string2), 7, this.g, string2, null, this.f, b.a(this.e), 1000L);
                ++this.m;
            }
        }
        this.d.acquire();
        o.schedule(new ahi(this), 1000L, TimeUnit.MILLISECONDS);
    }

    public final void a(boolean bl2) {
        this.d.setReferenceCounted(false);
        this.k = false;
    }

    public final boolean b() {
        return this.d.isHeld();
    }
}

