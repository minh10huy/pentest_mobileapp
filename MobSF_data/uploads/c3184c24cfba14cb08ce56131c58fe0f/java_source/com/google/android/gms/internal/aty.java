/*
 * Decompiled with CFR 0_132.
 */
package com.google.android.gms.internal;

import com.google.android.gms.internal.atj;
import com.google.android.gms.internal.atq;
import com.google.android.gms.internal.atr;
import com.google.android.gms.internal.atw;
import com.google.android.gms.internal.atx;
import com.google.android.gms.internal.awu;
import com.google.android.gms.internal.awx;
import com.google.android.gms.internal.awz;
import com.google.android.gms.internal.axd;
import com.google.android.gms.internal.axq;
import com.google.android.gms.internal.bfx;
import com.google.android.gms.internal.bhu;
import java.security.GeneralSecurityException;
import java.util.Iterator;
import java.util.List;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;
import java.util.logging.Level;
import java.util.logging.Logger;

public final class aty {
    private static final Logger a = Logger.getLogger(aty.class.getName());
    private static final ConcurrentMap<String, atq> b = new ConcurrentHashMap<String, atq>();
    private static final ConcurrentMap<String, Boolean> c = new ConcurrentHashMap<String, Boolean>();
    private static final ConcurrentMap<String, atj> d = new ConcurrentHashMap<String, atj>();

    public static <P> atj<P> a(String string2) {
        block1 : {
            Object object;
            block2 : {
                Object object2;
                block8 : {
                    block9 : {
                        block3 : {
                            block4 : {
                                block5 : {
                                    block6 : {
                                        block7 : {
                                            if (string2 == null) break block1;
                                            object = d.get(string2.toLowerCase());
                                            if (object != null) break block2;
                                            object = object2 = String.format("no catalogue found for %s. ", string2);
                                            if (string2.toLowerCase().startsWith("tinkaead")) {
                                                object = String.valueOf(object2).concat("Maybe call AeadConfig.init().");
                                            }
                                            if (string2.toLowerCase().startsWith("tinkdeterministicaead")) break block3;
                                            if (string2.toLowerCase().startsWith("tinkstreamingaead")) break block4;
                                            if (string2.toLowerCase().startsWith("tinkhybriddecrypt") || string2.toLowerCase().startsWith("tinkhybridencrypt")) break block5;
                                            if (string2.toLowerCase().startsWith("tinkmac")) break block6;
                                            if (string2.toLowerCase().startsWith("tinkpublickeysign") || string2.toLowerCase().startsWith("tinkpublickeyverify")) break block7;
                                            object2 = object;
                                            if (!string2.toLowerCase().startsWith("tink")) break block8;
                                            object = String.valueOf(object);
                                            string2 = "Maybe call TinkConfig.init().";
                                            break block9;
                                        }
                                        object = String.valueOf(object);
                                        string2 = "Maybe call SignatureConfig.init().";
                                        break block9;
                                    }
                                    object = String.valueOf(object);
                                    string2 = "Maybe call MacConfig.init().";
                                    break block9;
                                }
                                object = String.valueOf(object);
                                string2 = "Maybe call HybridConfig.init().";
                                break block9;
                            }
                            object = String.valueOf(object);
                            string2 = "Maybe call StreamingAeadConfig.init().";
                            break block9;
                        }
                        object = String.valueOf(object);
                        string2 = "Maybe call DeterministicAeadConfig.init().";
                    }
                    object2 = object.concat(string2);
                }
                throw new GeneralSecurityException((String)object2);
            }
            return object;
        }
        throw new IllegalArgumentException("catalogueName must be non-null.");
    }

    public static <P> atw<P> a(atr atr2, atq<P> object) {
        object = atr2.a();
        if (object.c() != 0) {
            int n2 = object.a();
            object = object.b().iterator();
            boolean bl2 = false;
            boolean bl3 = true;
            while (object.hasNext()) {
                axd.b b2 = object.next();
                if (b2.a()) {
                    if (b2.f() != axq.a) {
                        if (b2.c() != awx.a) {
                            boolean bl4 = bl2;
                            if (b2.c() == awx.b) {
                                bl4 = bl2;
                                if (b2.e() == n2) {
                                    if (!bl2) {
                                        bl4 = true;
                                    } else {
                                        throw new GeneralSecurityException("keyset contains multiple primary keys");
                                    }
                                }
                            }
                            bl2 = bl4;
                            if (b2.b().c() == awu.b.d) continue;
                            bl3 = false;
                            bl2 = bl4;
                            continue;
                        }
                        throw new GeneralSecurityException(String.format("key %d has unknown status", b2.e()));
                    }
                    throw new GeneralSecurityException(String.format("key %d has unknown prefix", b2.e()));
                }
                throw new GeneralSecurityException(String.format("key %d has no key data", b2.e()));
            }
            if (!bl2 && !bl3) {
                throw new GeneralSecurityException("keyset doesn't contain a valid primary key");
            }
            object = new atw();
            for (axd.b b3 : atr2.a().b()) {
                if (b3.c() != awx.b) continue;
                atx<P> atx2 = object.a(aty.a(b3.b().a(), b3.b().b()), b3);
                if (b3.e() != atr2.a().a()) continue;
                object.a(atx2);
            }
            return object;
        }
        throw new GeneralSecurityException("empty keyset");
    }

    public static <P> awu a(awz object) {
        atq<P> atq2 = aty.b(object.a());
        if (c.get(object.a()).booleanValue()) {
            return atq2.c(object.b());
        }
        object = (object = String.valueOf(object.a())).length() != 0 ? "newKey-operation not permitted for key type ".concat((String)object) : new String("newKey-operation not permitted for key type ");
        throw new GeneralSecurityException((String)object);
    }

    public static <P> bhu a(String string2, bhu bhu2) {
        atq<P> atq2 = aty.b(string2);
        if (c.get(string2).booleanValue()) {
            return atq2.b(bhu2);
        }
        string2 = (string2 = String.valueOf(string2)).length() != 0 ? "newKey-operation not permitted for key type ".concat(string2) : new String("newKey-operation not permitted for key type ");
        throw new GeneralSecurityException(string2);
    }

    private static <P> P a(String string2, bfx bfx2) {
        return aty.b(string2).a(bfx2);
    }

    public static <P> P a(String string2, byte[] arrby) {
        return aty.a(string2, bfx.a(arrby));
    }

    public static <P> void a(String string2, atj<P> object) {
        synchronized (aty.class) {
            if (d.containsKey(string2.toLowerCase())) {
                Object object2 = d.get(string2.toLowerCase());
                if (!object.getClass().equals(object2.getClass())) {
                    object2 = a;
                    Level level = Level.WARNING;
                    object = String.valueOf(string2);
                    object = object.length() != 0 ? "Attempted overwrite of a catalogueName catalogue for name ".concat((String)object) : new String("Attempted overwrite of a catalogueName catalogue for name ");
                    object2.logp(level, "com.google.crypto.tink.Registry", "addCatalogue", (String)object);
                    object = new StringBuilder(String.valueOf(string2).length() + 47);
                    object.append("catalogue for name ");
                    object.append(string2);
                    object.append(" has been already registered");
                    throw new GeneralSecurityException(object.toString());
                }
            }
            d.put(string2.toLowerCase(), (atj)object);
            return;
        }
    }

    public static <P> void a(String string2, atq<P> atq2) {
        aty.a(string2, atq2, true);
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public static <P> void a(String string2, atq<P> atq2, boolean bl2) {
        synchronized (aty.class) {
            void var1_1;
            void var2_2;
            if (var1_1 == null) {
                throw new IllegalArgumentException("key manager must be non-null.");
            }
            if (b.containsKey(string2)) {
                atq<P> atq3 = aty.b(string2);
                boolean bl3 = c.get(string2);
                if (!var1_1.getClass().equals(atq3.getClass()) || !bl3 && var2_2 != false) {
                    Logger logger = a;
                    Level level = Level.WARNING;
                    String string3 = String.valueOf(string2);
                    string3 = string3.length() != 0 ? "Attempted overwrite of a registered key manager for key type ".concat(string3) : new String("Attempted overwrite of a registered key manager for key type ");
                    logger.logp(level, "com.google.crypto.tink.Registry", "registerKeyManager", string3);
                    throw new GeneralSecurityException(String.format("typeUrl (%s) is already registered with %s, cannot be re-registered with %s", string2, atq3.getClass().getName(), var1_1.getClass().getName()));
                }
            }
            b.put(string2, (atq)var1_1);
            c.put(string2, (boolean)var2_2);
            return;
        }
    }

    private static <P> atq<P> b(String string2) {
        Object object = b.get(string2);
        if (object != null) {
            return object;
        }
        object = new StringBuilder(String.valueOf(string2).length() + 78);
        object.append("No key manager found for key type: ");
        object.append(string2);
        object.append(".  Check the configuration of the registry.");
        throw new GeneralSecurityException(object.toString());
    }

    public static <P> bhu b(awz object) {
        atq<P> atq2 = aty.b(object.a());
        if (c.get(object.a()).booleanValue()) {
            return atq2.b(object.b());
        }
        object = (object = String.valueOf(object.a())).length() != 0 ? "newKey-operation not permitted for key type ".concat((String)object) : new String("newKey-operation not permitted for key type ");
        throw new GeneralSecurityException((String)object);
    }

    public static <P> P b(String string2, bhu bhu2) {
        return aty.b(string2).a(bhu2);
    }
}

