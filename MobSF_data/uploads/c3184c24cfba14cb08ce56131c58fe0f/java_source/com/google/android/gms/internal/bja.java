/*
 * Decompiled with CFR 0_132.
 */
package com.google.android.gms.internal;

import com.google.android.gms.internal.bfv;
import com.google.android.gms.internal.bjb;
import java.lang.reflect.AnnotatedElement;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.nio.Buffer;
import java.nio.ByteOrder;
import java.security.AccessController;
import java.util.logging.Level;
import java.util.logging.Logger;
import sun.misc.Unsafe;

final class bja {
    private static final Logger a = Logger.getLogger(bja.class.getName());
    private static final Unsafe b = bja.d();
    private static final Class<?> c = bfv.b();
    private static final boolean d = bja.c(Long.TYPE);
    private static final boolean e = bja.c(Integer.TYPE);
    private static final d f;
    private static final boolean g;
    private static final boolean h;
    private static final long i;
    private static final long j;
    private static final long k;
    private static final long l;
    private static final long m;
    private static final long n;
    private static final long o;
    private static final long p;
    private static final long q;
    private static final long r;
    private static final long s;
    private static final long t;
    private static final long u;
    private static final long v;
    private static final boolean w;

    static {
        Unsafe unsafe = b;
        Object object = null;
        if (unsafe != null) {
            if (bfv.a()) {
                if (d) {
                    object = new b(b);
                } else if (e) {
                    object = new a(b);
                }
            } else {
                object = new c(b);
            }
        }
        f = object;
        g = bja.f();
        h = bja.e();
        i = bja.a(byte[].class);
        j = bja.a(boolean[].class);
        k = bja.b(boolean[].class);
        l = bja.a(int[].class);
        m = bja.b(int[].class);
        n = bja.a(long[].class);
        o = bja.b(long[].class);
        p = bja.a(float[].class);
        q = bja.b(float[].class);
        r = bja.a(double[].class);
        s = bja.b(double[].class);
        t = bja.a(Object[].class);
        u = bja.b(Object[].class);
        if (!bfv.a() || (object = bja.a(Buffer.class, "effectiveDirectAddress")) == null) {
            object = bja.a(Buffer.class, "address");
        }
        long l2 = object != null && f != null ? bja.f.a.objectFieldOffset((Field)object) : -1L;
        v = l2;
        boolean bl2 = ByteOrder.nativeOrder() == ByteOrder.BIG_ENDIAN;
        w = bl2;
    }

    private bja() {
    }

    static byte a(byte[] arrby, long l2) {
        return f.a(arrby, i + l2);
    }

    private static int a(Class<?> class_) {
        if (h) {
            return bja.f.a.arrayBaseOffset(class_);
        }
        return -1;
    }

    static int a(Object object, long l2) {
        return f.b(object, l2);
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    private static Field a(Class<?> annotatedElement, String string2) {
        try {
            annotatedElement = annotatedElement.getDeclaredField(string2);
            annotatedElement.setAccessible(true);
            return annotatedElement;
        }
        catch (Throwable throwable) {
            return null;
        }
    }

    private static void a(Object object, long l2, int n2) {
        bja.f.a.putInt(object, l2, n2);
    }

    static void a(byte[] arrby, long l2, byte by2) {
        f.a(arrby, i + l2, by2);
    }

    static boolean a() {
        return h;
    }

    private static int b(Class<?> class_) {
        if (h) {
            return bja.f.a.arrayIndexScale(class_);
        }
        return -1;
    }

    static boolean b() {
        return g;
    }

    private static void c(Object object, long l2, byte by2) {
        long l3 = -4L & l2;
        int n2 = bja.a(object, l3);
        int n3 = ((int)l2 & 3) << 3;
        bja.a(object, l3, (255 & by2) << n3 | n2 & 255 << n3);
    }

    private static boolean c(Class<?> class_) {
        if (!bfv.a()) {
            return false;
        }
        try {
            Class<?> class_2 = c;
            class_2.getMethod("peekLong", class_, Boolean.TYPE);
            class_2.getMethod("pokeLong", class_, Long.TYPE, Boolean.TYPE);
            class_2.getMethod("pokeInt", class_, Integer.TYPE, Boolean.TYPE);
            class_2.getMethod("peekInt", class_, Boolean.TYPE);
            class_2.getMethod("pokeByte", class_, Byte.TYPE);
            class_2.getMethod("peekByte", class_);
            class_2.getMethod("pokeByteArray", class_, byte[].class, Integer.TYPE, Integer.TYPE);
            class_2.getMethod("peekByteArray", class_, byte[].class, Integer.TYPE, Integer.TYPE);
            return true;
        }
        catch (Throwable throwable) {
            return false;
        }
    }

    private static byte d(Object object, long l2) {
        return (byte)(bja.a(object, -4L & l2) >>> (int)((l2 & 3L) << 3));
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    private static Unsafe d() {
        try {
            return (Unsafe)AccessController.doPrivileged(new bjb());
        }
        catch (Throwable throwable) {
            return null;
        }
    }

    private static void d(Object object, long l2, byte by2) {
        long l3 = -4L & l2;
        int n2 = bja.a(object, l3);
        int n3 = ((int)l2 & 3) << 3;
        bja.a(object, l3, (255 & by2) << n3 | n2 & 255 << n3);
    }

    private static byte e(Object object, long l2) {
        return (byte)(bja.a(object, -4L & l2) >>> (int)((l2 & 3L) << 3));
    }

    private static boolean e() {
        Object object;
        block4 : {
            if (b == null) {
                return false;
            }
            try {
                object = b.getClass();
                object.getMethod("objectFieldOffset", Field.class);
                object.getMethod("arrayBaseOffset", Class.class);
                object.getMethod("arrayIndexScale", Class.class);
                object.getMethod("getInt", Object.class, Long.TYPE);
                object.getMethod("putInt", Object.class, Long.TYPE, Integer.TYPE);
                object.getMethod("getLong", Object.class, Long.TYPE);
                object.getMethod("putLong", Object.class, Long.TYPE, Long.TYPE);
                object.getMethod("getObject", Object.class, Long.TYPE);
                object.getMethod("putObject", Object.class, Long.TYPE, Object.class);
                if (!bfv.a()) break block4;
                return true;
            }
            catch (Throwable throwable) {
                object = a;
                Level level = Level.WARNING;
                String string2 = String.valueOf(throwable);
                StringBuilder stringBuilder = new StringBuilder(String.valueOf(string2).length() + 71);
                stringBuilder.append("platform method missing - proto runtime falling back to safer methods: ");
                stringBuilder.append(string2);
                object.logp(level, "com.google.protobuf.UnsafeUtil", "supportsUnsafeArrayOperations", stringBuilder.toString());
                return false;
            }
        }
        object.getMethod("getByte", Object.class, Long.TYPE);
        object.getMethod("putByte", Object.class, Long.TYPE, Byte.TYPE);
        object.getMethod("getBoolean", Object.class, Long.TYPE);
        object.getMethod("putBoolean", Object.class, Long.TYPE, Boolean.TYPE);
        object.getMethod("getFloat", Object.class, Long.TYPE);
        object.getMethod("putFloat", Object.class, Long.TYPE, Float.TYPE);
        object.getMethod("getDouble", Object.class, Long.TYPE);
        object.getMethod("putDouble", Object.class, Long.TYPE, Double.TYPE);
        return true;
    }

    private static boolean f() {
        Object object;
        block4 : {
            if (b == null) {
                return false;
            }
            try {
                object = b.getClass();
                object.getMethod("objectFieldOffset", Field.class);
                object.getMethod("getLong", Object.class, Long.TYPE);
                if (!bfv.a()) break block4;
                return true;
            }
            catch (Throwable throwable) {
                object = a;
                Level level = Level.WARNING;
                String string2 = String.valueOf(throwable);
                StringBuilder stringBuilder = new StringBuilder(String.valueOf(string2).length() + 71);
                stringBuilder.append("platform method missing - proto runtime falling back to safer methods: ");
                stringBuilder.append(string2);
                object.logp(level, "com.google.protobuf.UnsafeUtil", "supportsUnsafeByteBufferOperations", stringBuilder.toString());
                return false;
            }
        }
        object.getMethod("getByte", Long.TYPE);
        object.getMethod("putByte", Long.TYPE, Byte.TYPE);
        object.getMethod("getInt", Long.TYPE);
        object.getMethod("putInt", Long.TYPE, Integer.TYPE);
        object.getMethod("getLong", Long.TYPE);
        object.getMethod("putLong", Long.TYPE, Long.TYPE);
        object.getMethod("copyMemory", Long.TYPE, Long.TYPE, Long.TYPE);
        object.getMethod("copyMemory", Object.class, Long.TYPE, Object.class, Long.TYPE, Long.TYPE);
        return true;
    }

    static final class a
    extends d {
        a(Unsafe unsafe) {
            super(unsafe);
        }

        @Override
        public final byte a(Object object, long l2) {
            if (w) {
                return bja.d(object, l2);
            }
            return bja.e(object, l2);
        }

        @Override
        public final void a(Object object, long l2, byte by2) {
            if (w) {
                bja.c(object, l2, by2);
                return;
            }
            bja.d(object, l2, by2);
        }
    }

    static final class b
    extends d {
        b(Unsafe unsafe) {
            super(unsafe);
        }

        @Override
        public final byte a(Object object, long l2) {
            if (w) {
                return bja.d(object, l2);
            }
            return bja.e(object, l2);
        }

        @Override
        public final void a(Object object, long l2, byte by2) {
            if (w) {
                bja.c(object, l2, by2);
                return;
            }
            bja.d(object, l2, by2);
        }
    }

    static final class c
    extends d {
        c(Unsafe unsafe) {
            super(unsafe);
        }

        @Override
        public final byte a(Object object, long l2) {
            return this.a.getByte(object, l2);
        }

        @Override
        public final void a(Object object, long l2, byte by2) {
            this.a.putByte(object, l2, by2);
        }
    }

    static abstract class d {
        Unsafe a;

        d(Unsafe unsafe) {
            this.a = unsafe;
        }

        public abstract byte a(Object var1, long var2);

        public abstract void a(Object var1, long var2, byte var4);

        public final int b(Object object, long l2) {
            return this.a.getInt(object, l2);
        }
    }

}

