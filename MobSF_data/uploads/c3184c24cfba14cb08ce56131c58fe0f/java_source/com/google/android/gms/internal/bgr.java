/*
 * Decompiled with CFR 0_132.
 */
package com.google.android.gms.internal;

import com.google.android.gms.internal.bfx;
import com.google.android.gms.internal.bgj;
import com.google.android.gms.internal.bgs;
import com.google.android.gms.internal.bgt;
import com.google.android.gms.internal.bgx;
import com.google.android.gms.internal.bgy;
import com.google.android.gms.internal.bhd;
import com.google.android.gms.internal.bhg;
import com.google.android.gms.internal.bhu;
import com.google.android.gms.internal.bik;
import com.google.android.gms.internal.bji;
import com.google.android.gms.internal.bjn;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

final class bgr<FieldDescriptorType extends bgt<FieldDescriptorType>> {
    private static final bgr d = new bgr<FieldDescriptorType>(true);
    private final bik<FieldDescriptorType, Object> a;
    private boolean b;
    private boolean c = false;

    private bgr() {
        this.a = bik.a(16);
    }

    private bgr(boolean bl2) {
        this.a = bik.a(0);
        if (!this.b) {
            this.a.a();
            this.b = true;
        }
    }

    static int a(bji bji2, int n2, Object object) {
        int n3;
        n2 = n3 = bgj.d(n2);
        if (bji2 == bji.j) {
            bgx.a((bhu)object);
            n2 = n3 << 1;
        }
        return n2 + bgr.b(bji2, object);
    }

    private static int a(Map.Entry<FieldDescriptorType, Object> entry) {
        bgt bgt2 = (bgt)entry.getKey();
        Object object = entry.getValue();
        if (bgt2.c() == bjn.i && !bgt2.d() && !bgt2.e()) {
            if (object instanceof bhd) {
                return bgj.b(((bgt)entry.getKey()).a(), (bhd)object);
            }
            return bgj.d(((bgt)entry.getKey()).a(), (bhu)object);
        }
        return bgr.b(bgt2, object);
    }

    public static <T extends bgt<T>> bgr<T> a() {
        return d;
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    private void a(FieldDescriptorType FieldDescriptorType, Object arrayList) {
        if (FieldDescriptorType.d()) {
            if (!(arrayList instanceof List)) throw new IllegalArgumentException("Wrong object type used with protocol message reflection.");
            ArrayList arrayList2 = new ArrayList();
            arrayList2.addAll(arrayList);
            arrayList = arrayList2;
            int n2 = arrayList.size();
            for (int i2 = 0; i2 < n2; ++i2) {
                Object e2 = arrayList.get(i2);
                bgr.a(FieldDescriptorType.b(), e2);
            }
            arrayList = arrayList2;
        } else {
            bgr.a(FieldDescriptorType.b(), arrayList);
        }
        if (arrayList instanceof bhd) {
            this.c = true;
        }
        this.a.a(FieldDescriptorType, arrayList);
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    private static void a(bji bji2, Object object) {
        boolean bl2;
        block17 : {
            bgx.a(object);
            int n2 = bgs.a[bji2.a().ordinal()];
            bl2 = false;
            switch (n2) {
                default: {
                    break block17;
                }
                case 9: {
                    if (object instanceof bhu || object instanceof bhd) {
                        return;
                    }
                    break block17;
                }
                case 8: {
                    if (object instanceof Integer || object instanceof bgy) {
                        do {
                            return;
                            break;
                        } while (true);
                    }
                    break block17;
                }
                case 7: {
                    if (object instanceof bfx || object instanceof byte[]) {
                        return;
                    }
                    break block17;
                }
                case 6: {
                    bl2 = object instanceof String;
                    break block17;
                }
                case 5: {
                    bl2 = object instanceof Boolean;
                    break block17;
                }
                case 4: {
                    bl2 = object instanceof Double;
                    break block17;
                }
                case 3: {
                    bl2 = object instanceof Float;
                    break block17;
                }
                case 2: {
                    bl2 = object instanceof Long;
                    break block17;
                }
                case 1: 
            }
            bl2 = object instanceof Integer;
        }
        if (!bl2) throw new IllegalArgumentException("Wrong object type used with protocol message reflection.");
    }

    private static int b(bgt<?> iterator, Object object) {
        bji bji2 = iterator.b();
        int n2 = iterator.a();
        if (iterator.d()) {
            boolean bl2 = iterator.e();
            int n3 = 0;
            int n4 = 0;
            if (bl2) {
                iterator = ((List)object).iterator();
                while (iterator.hasNext()) {
                    n4 += bgr.b(bji2, iterator.next());
                }
                return bgj.d(n2) + n4 + bgj.k(n4);
            }
            iterator = ((List)object).iterator();
            n4 = n3;
            while (iterator.hasNext()) {
                n4 += bgr.a(bji2, n2, iterator.next());
            }
            return n4;
        }
        return bgr.a(bji2, n2, object);
    }

    private static int b(bji bji2, Object object) {
        switch (bgs.b[bji2.ordinal()]) {
            default: {
                throw new RuntimeException("There is no way to get here, but the compiler thinks otherwise.");
            }
            case 18: {
                if (object instanceof bgy) {
                    return bgj.j(((bgy)object).a());
                }
                return bgj.j((Integer)object);
            }
            case 17: {
                return bgj.e((Long)object);
            }
            case 16: {
                return bgj.g((Integer)object);
            }
            case 15: {
                return bgj.g((Long)object);
            }
            case 14: {
                return bgj.i((Integer)object);
            }
            case 13: {
                return bgj.f((Integer)object);
            }
            case 12: {
                if (object instanceof bfx) {
                    return bgj.b((bfx)object);
                }
                return bgj.b((byte[])object);
            }
            case 11: {
                if (object instanceof bfx) {
                    return bgj.b((bfx)object);
                }
                return bgj.b((String)object);
            }
            case 10: {
                if (object instanceof bhd) {
                    return bgj.a((bhd)object);
                }
                return bgj.b((bhu)object);
            }
            case 9: {
                return bgj.c((bhu)object);
            }
            case 8: {
                return bgj.a((Boolean)object);
            }
            case 7: {
                return bgj.h((Integer)object);
            }
            case 6: {
                return bgj.f((Long)object);
            }
            case 5: {
                return bgj.e((Integer)object);
            }
            case 4: {
                return bgj.d((Long)object);
            }
            case 3: {
                return bgj.c((Long)object);
            }
            case 2: {
                return bgj.a(((Float)object).floatValue());
            }
            case 1: 
        }
        return bgj.a((Double)object);
    }

    public final Iterator<Map.Entry<FieldDescriptorType, Object>> b() {
        if (this.c) {
            return new bhg(this.a.entrySet().iterator());
        }
        return this.a.entrySet().iterator();
    }

    public final int c() {
        int n2 = 0;
        for (int i2 = 0; i2 < this.a.c(); ++i2) {
            n2 += bgr.a(this.a.b(i2));
        }
        Iterator<Map.Entry<FieldDescriptorType, Object>> iterator = this.a.d().iterator();
        while (iterator.hasNext()) {
            n2 += bgr.a(iterator.next());
        }
        return n2;
    }

    public final /* synthetic */ Object clone() {
        bgr<FieldDescriptorType> bgr2 = new bgr<FieldDescriptorType>();
        for (int i2 = 0; i2 < this.a.c(); ++i2) {
            Map.Entry<FieldDescriptorType, Object> entry = this.a.b(i2);
            bgr.super.a((bgt)entry.getKey(), entry.getValue());
        }
        for (Map.Entry entry : this.a.d()) {
            bgr.super.a((bgt)entry.getKey(), entry.getValue());
        }
        bgr2.c = this.c;
        return bgr2;
    }

    public final boolean equals(Object object) {
        if (this == object) {
            return true;
        }
        if (!(object instanceof bgr)) {
            return false;
        }
        object = (bgr)object;
        return this.a.equals(object.a);
    }

    public final int hashCode() {
        return this.a.hashCode();
    }
}

