/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.content.Context
 *  android.content.pm.ApplicationInfo
 *  android.content.pm.PackageManager
 *  android.content.pm.PackageManager$NameNotFoundException
 *  android.os.WorkSource
 *  android.util.Log
 */
package com.google.android.gms.common.util;

import android.content.Context;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageManager;
import android.os.WorkSource;
import android.util.Log;
import com.google.android.gms.common.util.p;
import com.google.android.gms.common.util.s;
import com.google.android.gms.internal.ye;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public final class b {
    private static final Method a = b.a();
    private static final Method b = b.b();
    private static final Method c = b.c();
    private static final Method d = b.d();
    private static final Method e = b.e();

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    private static WorkSource a(int n2, String string2) {
        WorkSource workSource = new WorkSource();
        if (b != null) {
            String string3 = string2;
            if (string2 == null) {
                string3 = "";
            }
            b.invoke((Object)workSource, n2, string3);
            return workSource;
        }
        if (a == null) return workSource;
        try {
            a.invoke((Object)workSource, n2);
            return workSource;
        }
        catch (Exception exception) {
            Log.wtf((String)"WorkSourceUtil", (String)"Unable to assign blame through WorkSource", (Throwable)exception);
            return workSource;
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public static WorkSource a(Context object, String string2) {
        if (object != null && object.getPackageManager() != null) {
            block4 : {
                if (string2 == null) {
                    return null;
                }
                try {
                    object = ye.a((Context)object).a(string2, 0);
                    if (object != null) break block4;
                }
                catch (PackageManager.NameNotFoundException nameNotFoundException) {}
                object = String.valueOf(string2);
                object = object.length() != 0 ? "Could not get applicationInfo from package: ".concat((String)object) : new String("Could not get applicationInfo from package: ");
                Log.e((String)"WorkSourceUtil", (String)object);
                return null;
            }
            return b.a(object.uid, string2);
            String string3 = String.valueOf(string2);
            string3 = string3.length() != 0 ? "Could not find package: ".concat(string3) : new String("Could not find package: ");
            Log.e((String)"WorkSourceUtil", (String)string3);
        }
        return null;
    }

    private static String a(WorkSource object, int n2) {
        if (e != null) {
            try {
                object = (String)e.invoke(object, n2);
                return object;
            }
            catch (Exception exception) {
                Log.wtf((String)"WorkSourceUtil", (String)"Unable to assign blame through WorkSource", (Throwable)exception);
            }
        }
        return null;
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    private static Method a() {
        try {
            return WorkSource.class.getMethod("add", Integer.TYPE);
        }
        catch (Exception exception) {
            return null;
        }
    }

    public static List<String> a(WorkSource workSource) {
        int n2 = workSource == null ? 0 : b.b(workSource);
        if (n2 == 0) {
            return Collections.emptyList();
        }
        ArrayList<String> arrayList = new ArrayList<String>();
        for (int i2 = 0; i2 < n2; ++i2) {
            String string2 = b.a(workSource, i2);
            if (s.a(string2)) continue;
            arrayList.add(string2);
        }
        return arrayList;
    }

    public static boolean a(Context context) {
        if (context == null) {
            return false;
        }
        if (context.getPackageManager() == null) {
            return false;
        }
        if (ye.a(context).a("android.permission.UPDATE_DEVICE_STATS", context.getPackageName()) == 0) {
            return true;
        }
        return false;
    }

    private static int b(WorkSource workSource) {
        if (c != null) {
            try {
                int n2 = (Integer)c.invoke((Object)workSource, new Object[0]);
                return n2;
            }
            catch (Exception exception) {
                Log.wtf((String)"WorkSourceUtil", (String)"Unable to assign blame through WorkSource", (Throwable)exception);
            }
        }
        return 0;
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    private static Method b() {
        if (!p.d()) return null;
        try {
            return WorkSource.class.getMethod("add", Integer.TYPE, String.class);
        }
        catch (Exception exception) {
            return null;
        }
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    private static Method c() {
        try {
            return WorkSource.class.getMethod("size", new Class[0]);
        }
        catch (Exception exception) {
            return null;
        }
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    private static Method d() {
        try {
            return WorkSource.class.getMethod("get", Integer.TYPE);
        }
        catch (Exception exception) {
            return null;
        }
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    private static Method e() {
        if (!p.d()) return null;
        try {
            return WorkSource.class.getMethod("getName", Integer.TYPE);
        }
        catch (Exception exception) {
            return null;
        }
    }
}

