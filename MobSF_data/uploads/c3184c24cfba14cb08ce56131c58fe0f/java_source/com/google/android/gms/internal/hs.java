/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.annotation.TargetApi
 *  android.app.Activity
 *  android.app.ActivityManager
 *  android.app.ActivityManager$RunningAppProcessInfo
 *  android.app.ActivityManager$RunningTaskInfo
 *  android.app.AlertDialog
 *  android.app.AlertDialog$Builder
 *  android.app.KeyguardManager
 *  android.content.ActivityNotFoundException
 *  android.content.BroadcastReceiver
 *  android.content.ComponentName
 *  android.content.Context
 *  android.content.Intent
 *  android.content.IntentFilter
 *  android.content.pm.ActivityInfo
 *  android.content.pm.ApplicationInfo
 *  android.content.pm.PackageManager
 *  android.content.pm.ResolveInfo
 *  android.content.res.Configuration
 *  android.content.res.Resources
 *  android.graphics.Bitmap
 *  android.graphics.Bitmap$Config
 *  android.graphics.Canvas
 *  android.graphics.Rect
 *  android.net.Uri
 *  android.net.Uri$Builder
 *  android.os.Build
 *  android.os.Build$VERSION
 *  android.os.Bundle
 *  android.os.Debug
 *  android.os.Debug$MemoryInfo
 *  android.os.Handler
 *  android.os.IBinder
 *  android.os.Looper
 *  android.os.Parcelable
 *  android.os.PowerManager
 *  android.os.Process
 *  android.text.TextUtils
 *  android.util.DisplayMetrics
 *  android.view.Display
 *  android.view.View
 *  android.view.ViewGroup
 *  android.view.ViewParent
 *  android.view.Window
 *  android.view.WindowManager
 *  android.view.WindowManager$LayoutParams
 *  android.webkit.WebSettings
 *  android.webkit.WebView
 *  android.widget.AdapterView
 *  android.widget.PopupWindow
 *  org.json.JSONArray
 *  org.json.JSONException
 *  org.json.JSONObject
 */
package com.google.android.gms.internal;

import android.annotation.TargetApi;
import android.app.Activity;
import android.app.ActivityManager;
import android.app.AlertDialog;
import android.app.KeyguardManager;
import android.content.ActivityNotFoundException;
import android.content.BroadcastReceiver;
import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.pm.ActivityInfo;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageManager;
import android.content.pm.ResolveInfo;
import android.content.res.Configuration;
import android.content.res.Resources;
import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.Rect;
import android.net.Uri;
import android.os.Build;
import android.os.Bundle;
import android.os.Debug;
import android.os.Handler;
import android.os.IBinder;
import android.os.Looper;
import android.os.Parcelable;
import android.os.PowerManager;
import android.os.Process;
import android.text.TextUtils;
import android.util.DisplayMetrics;
import android.view.Display;
import android.view.View;
import android.view.ViewGroup;
import android.view.ViewParent;
import android.view.Window;
import android.view.WindowManager;
import android.webkit.WebSettings;
import android.webkit.WebView;
import android.widget.AdapterView;
import android.widget.PopupWindow;
import com.google.android.gms.ads.internal.av;
import com.google.android.gms.common.util.n;
import com.google.android.gms.common.util.p;
import com.google.android.gms.internal.ak;
import com.google.android.gms.internal.bla;
import com.google.android.gms.internal.bmn;
import com.google.android.gms.internal.bmt;
import com.google.android.gms.internal.bpy;
import com.google.android.gms.internal.bqj;
import com.google.android.gms.internal.bsv;
import com.google.android.gms.internal.bsz;
import com.google.android.gms.internal.btk;
import com.google.android.gms.internal.bui;
import com.google.android.gms.internal.buj;
import com.google.android.gms.internal.he;
import com.google.android.gms.internal.hf;
import com.google.android.gms.internal.hg;
import com.google.android.gms.internal.hm;
import com.google.android.gms.internal.ht;
import com.google.android.gms.internal.hu;
import com.google.android.gms.internal.hv;
import com.google.android.gms.internal.hw;
import com.google.android.gms.internal.hx;
import com.google.android.gms.internal.jo;
import com.google.android.gms.internal.jz;
import com.google.android.gms.internal.ye;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.UUID;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

@ak
public final class hs {
    public static final Handler a = new hf(Looper.getMainLooper());
    private final Object b = new Object();
    private boolean c = true;
    private String d;
    private boolean e = false;
    private boolean f = false;
    private Pattern g;
    private Pattern h;

    public static Bitmap a(View view) {
        view.setDrawingCacheEnabled(true);
        Bitmap bitmap = Bitmap.createBitmap((Bitmap)view.getDrawingCache());
        view.setDrawingCacheEnabled(false);
        return bitmap;
    }

    public static Bundle a(bmt object) {
        Object object2;
        String string2;
        String string3;
        if (object == null) {
            return null;
        }
        Object object3 = btk.S;
        if (!bqj.f().a(object3).booleanValue()) {
            object3 = btk.U;
            if (!bqj.f().a(object3).booleanValue()) {
                return null;
            }
        }
        if (av.i().l().b() && av.i().l().d()) {
            return null;
        }
        if (object.d()) {
            object.c();
        }
        if ((object = object.b()) != null) {
            string3 = object.b();
            object2 = object.c();
            String string4 = object.d();
            if (string3 != null) {
                av.i().l().a(string3);
            }
            string2 = string3;
            object = object2;
            object3 = string4;
            if (string4 != null) {
                av.i().l().b(string4);
                string2 = string3;
                object = object2;
                object3 = string4;
            }
        } else {
            string2 = av.i().l().c();
            object3 = av.i().l().e();
            object = null;
        }
        string3 = new Bundle(1);
        if (object3 != null) {
            object2 = btk.U;
            if (((Boolean)bqj.f().a(object2)).booleanValue() && !av.i().l().d()) {
                string3.putString("v_fp_vertical", (String)object3);
            }
        }
        if (string2 != null) {
            object3 = btk.S;
            if (bqj.f().a(object3).booleanValue() && !av.i().l().b()) {
                string3.putString("fingerprint", string2);
                if (!string2.equals(object)) {
                    string3.putString("v_fp", (String)object);
                }
            }
        }
        if (!string3.isEmpty()) {
            return string3;
        }
        return null;
    }

    public static DisplayMetrics a(WindowManager windowManager) {
        DisplayMetrics displayMetrics = new DisplayMetrics();
        windowManager.getDefaultDisplay().getMetrics(displayMetrics);
        return displayMetrics;
    }

    public static PopupWindow a(View view, int n2, int n3, boolean bl2) {
        return new PopupWindow(view, n2, n3, false);
    }

    static /* synthetic */ Object a(hs hs2) {
        return hs2.b;
    }

    public static String a() {
        return UUID.randomUUID().toString();
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public static String a(Context object, View view, bpy bpy2) {
        JSONObject jSONObject = btk.ag;
        if (!bqj.f().a(jSONObject).booleanValue()) {
            return null;
        }
        try {
            jSONObject = new JSONObject();
            JSONObject jSONObject2 = new JSONObject();
            jSONObject2.put("width", bpy2.e);
            jSONObject2.put("height", bpy2.b);
            jSONObject.put("size", (Object)jSONObject2);
            jSONObject.put("activity", (Object)hs.l(object));
            if (bpy2.d) return jSONObject.toString();
            object = new JSONArray();
        }
        catch (JSONException jSONException) {
            he.c("Fail to get view hierarchy json", (Throwable)jSONException);
            return null;
        }
        do {
            if (view != null) {
                bpy2 = view.getParent();
                if (bpy2 != null) {
                    int n2 = -1;
                    if (bpy2 instanceof ViewGroup) {
                        n2 = ((ViewGroup)bpy2).indexOfChild(view);
                    }
                    view = new JSONObject();
                    view.put("type", (Object)bpy2.getClass().getName());
                    view.put("index_of_child", n2);
                    object.put((Object)view);
                }
                if (bpy2 != null && bpy2 instanceof View) {
                    view = (View)bpy2;
                    continue;
                }
            } else {
                if (object.length() <= 0) return jSONObject.toString();
                jSONObject.put("parents", object);
                return jSONObject.toString();
            }
            view = null;
        } while (true);
    }

    static /* synthetic */ String a(hs hs2, String string2) {
        hs2.d = string2;
        return string2;
    }

    public static String a(InputStreamReader inputStreamReader) {
        int n2;
        StringBuilder stringBuilder = new StringBuilder(8192);
        char[] arrc = new char[2048];
        while ((n2 = inputStreamReader.read(arrc)) != -1) {
            stringBuilder.append(arrc, 0, n2);
        }
        return stringBuilder.toString();
    }

    public static String a(String string2) {
        return Uri.parse((String)string2).buildUpon().query(null).build().toString();
    }

    public static Map<String, String> a(Uri uri) {
        if (uri == null) {
            return null;
        }
        HashMap<String, String> hashMap = new HashMap<String, String>();
        for (String string2 : av.g().a(uri)) {
            hashMap.put(string2, uri.getQueryParameter(string2));
        }
        return hashMap;
    }

    private final JSONArray a(Collection<?> object) {
        JSONArray jSONArray = new JSONArray();
        object = object.iterator();
        while (object.hasNext()) {
            this.a(jSONArray, object.next());
        }
        return jSONArray;
    }

    private final JSONObject a(Bundle bundle) {
        JSONObject jSONObject = new JSONObject();
        for (String string2 : bundle.keySet()) {
            this.a(jSONObject, string2, bundle.get(string2));
        }
        return jSONObject;
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public static void a(Context context, Intent intent) {
        try {
            context.startActivity(intent);
            return;
        }
        catch (Throwable throwable) {}
        intent.addFlags(268435456);
        context.startActivity(intent);
    }

    @TargetApi(value=18)
    public static void a(Context object, Uri object2) {
        try {
            Intent intent = new Intent("android.intent.action.VIEW", (Uri)object2);
            Bundle bundle = new Bundle();
            intent.putExtras(bundle);
            bsz<Boolean> bsz2 = btk.cB;
            if (bqj.f().a(bsz2).booleanValue()) {
                hs.b(object, intent);
            }
            bundle.putString("com.android.browser.application_id", object.getPackageName());
            object.startActivity(intent);
            object = object2.toString();
            object2 = new StringBuilder(String.valueOf(object).length() + 26);
            object2.append("Opening ");
            object2.append((String)object);
            object2.append(" in a new browser.");
            he.b(object2.toString());
            return;
        }
        catch (ActivityNotFoundException activityNotFoundException) {
            he.b("No browser is found.", (Throwable)activityNotFoundException);
            return;
        }
    }

    public static void a(Context context, String string2, List<String> object) {
        object = object.iterator();
        while (object.hasNext()) {
            new jo(context, string2, (String)object.next()).d();
        }
    }

    public static void a(Runnable runnable) {
        if (Looper.getMainLooper().getThread() != Thread.currentThread()) {
            runnable.run();
            return;
        }
        hm.a(runnable);
    }

    /*
     * Enabled aggressive block sorting
     */
    private final void a(JSONArray jSONArray, Object arrobject) {
        block9 : {
            block7 : {
                block8 : {
                    block6 : {
                        if (!(arrobject instanceof Bundle)) break block6;
                        arrobject = this.a((Bundle)arrobject);
                        break block7;
                    }
                    if (!(arrobject instanceof Map)) break block8;
                    arrobject = this.a((Map)arrobject);
                    break block7;
                }
                if (!(arrobject instanceof Collection)) break block9;
                arrobject = this.a((Collection)arrobject);
            }
            jSONArray.put((Object)arrobject);
            return;
        }
        if (!(arrobject instanceof Object[])) {
            jSONArray.put((Object)arrobject);
            return;
        }
        arrobject = arrobject;
        JSONArray jSONArray2 = new JSONArray();
        int n2 = arrobject.length;
        int n3 = 0;
        do {
            if (n3 >= n2) {
                jSONArray.put((Object)jSONArray2);
                return;
            }
            this.a(jSONArray2, arrobject[n3]);
            ++n3;
        } while (true);
    }

    /*
     * Enabled aggressive block sorting
     */
    private final void a(JSONObject jSONObject, String string2, Object object) {
        if (object instanceof Bundle) {
            object = this.a((Bundle)object);
        } else if (object instanceof Map) {
            object = this.a((Map)object);
        } else {
            if (object instanceof Collection) {
                if (string2 == null) {
                    string2 = "null";
                }
                object = (Collection)object;
            } else {
                if (!(object instanceof Object[])) {
                    jSONObject.put(string2, object);
                    return;
                }
                object = Arrays.asList((Object[])object);
            }
            object = this.a((Collection<?>)object);
        }
        jSONObject.put(string2, object);
    }

    private static boolean a(int n2, int n3, int n4) {
        if (Math.abs(n2 - n3) <= n4) {
            return true;
        }
        return false;
    }

    @TargetApi(value=24)
    public static boolean a(Activity object, Configuration configuration) {
        bqj.a();
        int n2 = jz.a((Context)object, configuration.screenHeightDp);
        int n3 = jz.a((Context)object, configuration.screenWidthDp);
        configuration = hs.a((WindowManager)object.getApplicationContext().getSystemService("window"));
        int n4 = configuration.heightPixels;
        int n5 = configuration.widthPixels;
        int n6 = object.getResources().getIdentifier("status_bar_height", "dimen", "android");
        n6 = n6 > 0 ? object.getResources().getDimensionPixelSize(n6) : 0;
        int n7 = (int)Math.round((double)object.getResources().getDisplayMetrics().density + 0.5);
        object = btk.cL;
        if (hs.a(n4, n2 + n6, n7 *= ((Integer)bqj.f().a(object)).intValue()) && hs.a(n5, n3, n7)) {
            return true;
        }
        return false;
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    public static boolean a(Context object) {
        void var0_4;
        Intent intent = new Intent();
        intent.setClassName(object, "com.google.android.gms.ads.AdActivity");
        ResolveInfo resolveInfo = object.getPackageManager().resolveActivity(intent, 65536);
        if (resolveInfo != null && resolveInfo.activityInfo != null) {
            boolean bl2;
            if ((resolveInfo.activityInfo.configChanges & 16) == 0) {
                he.e(String.format("com.google.android.gms.ads.AdActivity requires the android:configChanges value to contain \"%s\".", "keyboard"));
                bl2 = false;
            } else {
                bl2 = true;
            }
            if ((resolveInfo.activityInfo.configChanges & 32) == 0) {
                he.e(String.format("com.google.android.gms.ads.AdActivity requires the android:configChanges value to contain \"%s\".", "keyboardHidden"));
                bl2 = false;
            }
            if ((resolveInfo.activityInfo.configChanges & 128) == 0) {
                he.e(String.format("com.google.android.gms.ads.AdActivity requires the android:configChanges value to contain \"%s\".", "orientation"));
                bl2 = false;
            }
            if ((resolveInfo.activityInfo.configChanges & 256) == 0) {
                he.e(String.format("com.google.android.gms.ads.AdActivity requires the android:configChanges value to contain \"%s\".", "screenLayout"));
                bl2 = false;
            }
            if ((resolveInfo.activityInfo.configChanges & 512) == 0) {
                he.e(String.format("com.google.android.gms.ads.AdActivity requires the android:configChanges value to contain \"%s\".", "uiMode"));
                bl2 = false;
            }
            if ((resolveInfo.activityInfo.configChanges & 1024) == 0) {
                he.e(String.format("com.google.android.gms.ads.AdActivity requires the android:configChanges value to contain \"%s\".", "screenSize"));
                bl2 = false;
            }
            if ((resolveInfo.activityInfo.configChanges & 2048) != 0) return bl2;
            String string2 = String.format("com.google.android.gms.ads.AdActivity requires the android:configChanges value to contain \"%s\".", "smallestScreenSize");
        } else {
            String string3 = "Could not find com.google.android.gms.ads.AdActivity, please make sure it is declared in AndroidManifest.xml.";
        }
        he.e((String)var0_4);
        return false;
    }

    public static boolean a(Context context, String string2, String string3) {
        if (ye.a(context).a(string3, string2) == 0) {
            return true;
        }
        return false;
    }

    static /* synthetic */ boolean a(hs hs2, boolean bl2) {
        hs2.c = bl2;
        return bl2;
    }

    public static boolean a(ClassLoader classLoader, Class<?> class_, String string2) {
        try {
            boolean bl2 = class_.isAssignableFrom(Class.forName(string2, false, classLoader));
            return bl2;
        }
        catch (Throwable throwable) {
            return false;
        }
    }

    public static int[] a(Activity activity) {
        if ((activity = activity.getWindow()) != null && (activity = activity.findViewById(16908290)) != null) {
            return new int[]{activity.getWidth(), activity.getHeight()};
        }
        return hs.e();
    }

    public static int b(String string2) {
        try {
            int n2 = Integer.parseInt(string2);
            return n2;
        }
        catch (NumberFormatException numberFormatException) {
            String string3 = String.valueOf(numberFormatException);
            StringBuilder stringBuilder = new StringBuilder(String.valueOf(string3).length() + 22);
            stringBuilder.append("Could not parse value:");
            stringBuilder.append(string3);
            he.e(stringBuilder.toString());
            return 0;
        }
    }

    public static Bitmap b(View view) {
        Bitmap bitmap;
        if (view == null) {
            return null;
        }
        Bitmap bitmap2 = bitmap = hs.f(view);
        if (bitmap == null) {
            bitmap2 = hs.e(view);
        }
        return bitmap2;
    }

    public static String b() {
        String string2 = Build.MODEL;
        String string3 = Build.MANUFACTURER;
        if (string2.startsWith(string3)) {
            return string2;
        }
        StringBuilder stringBuilder = new StringBuilder(String.valueOf(string3).length() + 1 + String.valueOf(string2).length());
        stringBuilder.append(string3);
        stringBuilder.append(" ");
        stringBuilder.append(string2);
        return stringBuilder.toString();
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public static String b(Context object, String string2) {
        try {
            void var1_3;
            return new String(n.a(object.openFileInput((String)var1_3), true), "UTF-8");
        }
        catch (IOException iOException) {}
        he.b("Error reading from internal storage.");
        return "";
    }

    @TargetApi(value=18)
    public static void b(Context context, Intent intent) {
        if (intent == null) {
            return;
        }
        if (p.d()) {
            Bundle bundle = intent.getExtras() != null ? intent.getExtras() : new Bundle();
            bundle.putBinder("android.support.customtabs.extra.SESSION", null);
            bundle.putString("com.android.browser.application_id", context.getPackageName());
            intent.putExtras(bundle);
        }
    }

    public static void b(Context context, String string2, String string3) {
        ArrayList<String> arrayList = new ArrayList<String>();
        arrayList.add(string3);
        hs.a(context, string2, arrayList);
    }

    public static Bundle c() {
        Bundle bundle = new Bundle();
        try {
            Object object = btk.y;
            if (bqj.f().a(object).booleanValue()) {
                object = new Debug.MemoryInfo();
                Debug.getMemoryInfo((Debug.MemoryInfo)object);
                bundle.putParcelable("debug_memory_info", (Parcelable)object);
            }
            object = btk.z;
            if (((Boolean)bqj.f().a(object)).booleanValue()) {
                object = Runtime.getRuntime();
                bundle.putLong("runtime_free_memory", object.freeMemory());
                bundle.putLong("runtime_max_memory", object.maxMemory());
                bundle.putLong("runtime_total_memory", object.totalMemory());
            }
            bundle.putInt("web_view_count", av.i().k());
            return bundle;
        }
        catch (Exception exception) {
            he.c("Unable to gather memory stats", exception);
            return bundle;
        }
    }

    public static void c(Context object, String string2, String string3) {
        try {
            object = object.openFileOutput(string2, 0);
            object.write(string3.getBytes("UTF-8"));
            object.close();
            return;
        }
        catch (Exception exception) {
            he.b("Error writing to file in internal storage.", exception);
            return;
        }
    }

    public static boolean c(View object) {
        object = object.getRootView();
        Object var1_1 = null;
        object = object != null && (object = object.getContext()) instanceof Activity ? (Activity)object : null;
        if (object == null) {
            return false;
        }
        object = (object = object.getWindow()) == null ? var1_1 : object.getAttributes();
        if (object != null && (object.flags & 524288) != 0) {
            return true;
        }
        return false;
    }

    public static boolean c(String string2) {
        if (TextUtils.isEmpty((CharSequence)string2)) {
            return false;
        }
        return string2.matches("([^\\s]+(\\.(?i)(jpg|png|gif|bmp|webp))$)");
    }

    public static int d(View view) {
        ViewParent viewParent;
        if (view == null) {
            return -1;
        }
        for (viewParent = view.getParent(); viewParent != null && !(viewParent instanceof AdapterView); viewParent = viewParent.getParent()) {
        }
        if (viewParent == null) {
            return -1;
        }
        return ((AdapterView)viewParent).getPositionForView(view);
    }

    private static String d() {
        StringBuilder stringBuilder = new StringBuilder(256);
        stringBuilder.append("Mozilla/5.0 (Linux; U; Android");
        if (Build.VERSION.RELEASE != null) {
            stringBuilder.append(" ");
            stringBuilder.append(Build.VERSION.RELEASE);
        }
        stringBuilder.append("; ");
        stringBuilder.append(Locale.getDefault());
        if (Build.DEVICE != null) {
            stringBuilder.append("; ");
            stringBuilder.append(Build.DEVICE);
            if (Build.DISPLAY != null) {
                stringBuilder.append(" Build/");
                stringBuilder.append(Build.DISPLAY);
            }
        }
        stringBuilder.append(") AppleWebKit/533 Version/4.0 Safari/533");
        return stringBuilder.toString();
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    protected static String d(Context object) {
        try {
            return new WebView(object).getSettings().getUserAgentString();
        }
        catch (Throwable throwable) {
            return hs.d();
        }
    }

    public static AlertDialog.Builder e(Context context) {
        return new AlertDialog.Builder(context);
    }

    private static Bitmap e(View view) {
        block4 : {
            int n2;
            int n3;
            try {
                n2 = view.getWidth();
                n3 = view.getHeight();
                if (n2 == 0 || n3 == 0) break block4;
            }
            catch (RuntimeException runtimeException) {
                he.b("Fail to capture the webview", runtimeException);
                return null;
            }
            Bitmap bitmap = Bitmap.createBitmap((int)view.getWidth(), (int)view.getHeight(), (Bitmap.Config)Bitmap.Config.RGB_565);
            Canvas canvas = new Canvas(bitmap);
            view.layout(0, 0, n2, n3);
            view.draw(canvas);
            return bitmap;
        }
        he.e("Width or height of view is zero");
        return null;
    }

    private static int[] e() {
        return new int[]{0, 0};
    }

    private static Bitmap f(View view) {
        boolean bl2;
        Bitmap bitmap;
        Bitmap bitmap2;
        block6 : {
            Bitmap bitmap3 = null;
            bitmap = null;
            bitmap2 = bitmap3;
            try {
                bl2 = view.isDrawingCacheEnabled();
                bitmap2 = bitmap3;
            }
            catch (RuntimeException runtimeException) {
                he.b("Fail to capture the web view", runtimeException);
                return bitmap2;
            }
            view.setDrawingCacheEnabled(true);
            bitmap2 = bitmap3;
            Bitmap bitmap4 = view.getDrawingCache();
            if (bitmap4 == null) break block6;
            bitmap2 = bitmap3;
            bitmap = Bitmap.createBitmap((Bitmap)bitmap4);
        }
        bitmap2 = bitmap;
        view.setDrawingCacheEnabled(bl2);
        return bitmap;
    }

    public static bsv f(Context context) {
        return new bsv(context);
    }

    public static String f(String string2) {
        if (TextUtils.isEmpty((CharSequence)string2)) {
            return "";
        }
        return string2.split(";")[0].trim();
    }

    public static String g(String arrstring) {
        if (TextUtils.isEmpty((CharSequence)arrstring)) {
            return "";
        }
        if ((arrstring = arrstring.split(";")).length == 1) {
            return "";
        }
        for (int i2 = 1; i2 < arrstring.length; ++i2) {
            String[] arrstring2;
            if (!arrstring[i2].trim().startsWith("charset") || (arrstring2 = arrstring[i2].trim().split("=")).length <= 1) continue;
            return arrstring2[1].trim();
        }
        return "";
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public static boolean g(Context context) {
        try {
            Object object = (ActivityManager)context.getSystemService("activity");
            KeyguardManager keyguardManager = (KeyguardManager)context.getSystemService("keyguard");
            if (object != null) {
                if (keyguardManager == null) {
                    return false;
                }
                if ((object = object.getRunningAppProcesses()) == null) {
                    return false;
                }
                object = object.iterator();
                while (object.hasNext()) {
                    ActivityManager.RunningAppProcessInfo runningAppProcessInfo = (ActivityManager.RunningAppProcessInfo)object.next();
                    if (Process.myPid() != runningAppProcessInfo.pid) continue;
                    if (runningAppProcessInfo.importance != 100 || keyguardManager.inKeyguardRestrictedInputMode()) break;
                    if ((context = (PowerManager)context.getSystemService("power")) == null) {
                        return false;
                    }
                    boolean bl2 = context.isScreenOn();
                    if (!bl2) break;
                    return true;
                }
            }
            return false;
        }
        catch (Throwable throwable) {
            return false;
        }
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    public static Bitmap h(Context context) {
        if (!(context instanceof Activity)) {
            return null;
        }
        bsz<Boolean> bsz2 = btk.bL;
        if (bqj.f().a(bsz2) == false) return hs.e(((Activity)context).getWindow().getDecorView());
        if ((context = ((Activity)context).getWindow()) == null) return null;
        try {
            return hs.f(context.getDecorView().getRootView());
        }
        catch (RuntimeException runtimeException) {
            he.b("Fail to capture screen shot", runtimeException);
        }
        return null;
    }

    public static int i(Context context) {
        if ((context = context.getApplicationInfo()) == null) {
            return 0;
        }
        return context.targetSdkVersion;
    }

    @TargetApi(value=16)
    public static boolean j(Context context) {
        if (context != null) {
            if (!p.b()) {
                return false;
            }
            if ((context = hs.m(context)) != null && context.isKeyguardLocked()) {
                return true;
            }
        }
        return false;
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    public static boolean k(Context context) {
        try {
            context.getClassLoader().loadClass("com.google.android.gms.ads.internal.ClientApi");
            return false;
        }
        catch (Throwable throwable) {
            he.b("Error loading class.", throwable);
            av.i().a(throwable, "AdUtil.isLiteSdk");
            return false;
        }
        catch (ClassNotFoundException classNotFoundException) {
            return true;
        }
    }

    private static String l(Context object) {
        block6 : {
            block5 : {
                try {
                    object = (ActivityManager)object.getSystemService("activity");
                    if (object != null) break block5;
                    return null;
                }
                catch (Exception exception) {
                    return null;
                }
            }
            object = object.getRunningTasks(1);
            if (object == null) break block6;
            if (object.isEmpty() || (object = (ActivityManager.RunningTaskInfo)object.get(0)) == null) break block6;
            if (object.topActivity == null) break block6;
            object = object.topActivity.getClassName();
            return object;
        }
        return null;
    }

    private static KeyguardManager m(Context object) {
        if ((object = object.getSystemService("keyguard")) != null && object instanceof KeyguardManager) {
            return (KeyguardManager)object;
        }
        return null;
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public final String a(Context object, String string2) {
        Object object2 = this.b;
        synchronized (object2) {
            String string3;
            if (this.d != null) {
                return this.d;
            }
            if (string2 == null) {
                return hs.d();
            }
            try {
                this.d = av.g().a((Context)object);
            }
            catch (Exception exception) {}
            if (TextUtils.isEmpty((CharSequence)this.d)) {
                bqj.a();
                if (jz.b()) {
                    this.d = hs.d(object);
                } else {
                    this.d = null;
                    a.post((Runnable)new hu(this, (Context)object));
                    while ((string3 = this.d) == null) {
                        try {
                            this.b.wait();
                            continue;
                        }
                        catch (InterruptedException interruptedException) {}
                        this.d = hs.d();
                        string3 = String.valueOf(this.d);
                        string3 = string3.length() != 0 ? "Interrupted, use default user agent: ".concat(string3) : new String("Interrupted, use default user agent: ");
                        he.e(string3);
                    }
                }
            }
            string3 = String.valueOf(this.d);
            StringBuilder stringBuilder = new StringBuilder(String.valueOf(string3).length() + 10 + String.valueOf(string2).length());
            stringBuilder.append(string3);
            stringBuilder.append(" (Mobile; ");
            stringBuilder.append(string2);
            this.d = stringBuilder.toString();
            try {
                if (ye.a(object).a()) {
                    this.d = String.valueOf(this.d).concat(";aia");
                }
            }
            catch (Exception exception) {
                av.i().a(exception, "AdUtil.getUserAgent");
            }
            this.d = String.valueOf(this.d).concat(")");
            return this.d;
        }
    }

    public final JSONObject a(Bundle bundle, JSONObject jSONObject) {
        if (bundle != null) {
            try {
                bundle = this.a(bundle);
                return bundle;
            }
            catch (JSONException jSONException) {
                he.b("Error converting Bundle to JSON", (Throwable)jSONException);
            }
        }
        return null;
    }

    public final JSONObject a(Map<String, ?> map) {
        try {
            JSONObject jSONObject = new JSONObject();
            for (String string2 : map.keySet()) {
                this.a(jSONObject, string2, map.get(string2));
            }
            return jSONObject;
        }
        catch (ClassCastException classCastException) {
            String string3 = String.valueOf(classCastException.getMessage());
            string3 = string3.length() != 0 ? "Could not convert map to JSON: ".concat(string3) : new String("Could not convert map to JSON: ");
            throw new JSONException(string3);
        }
    }

    public final void a(Context context, String string2, WebSettings webSettings) {
        webSettings.setUserAgentString(this.a(context, string2));
    }

    public final void a(Context context, String string2, String string3, Bundle bundle, boolean bl2) {
        if (bl2) {
            av.e();
            bundle.putString("device", hs.b());
            bundle.putString("eids", TextUtils.join((CharSequence)",", btk.a()));
        }
        bqj.a();
        jz.a(context, string2, string3, bundle, bl2, new hv(this, context, string2));
    }

    public final void a(Context context, String string2, boolean bl2, HttpURLConnection httpURLConnection) {
        httpURLConnection.setConnectTimeout(60000);
        httpURLConnection.setInstanceFollowRedirects(false);
        httpURLConnection.setReadTimeout(60000);
        httpURLConnection.setRequestProperty("User-Agent", this.a(context, string2));
        httpURLConnection.setUseCaches(false);
    }

    public final void a(Context context, List<String> list) {
        if (!(context instanceof Activity)) {
            return;
        }
        Activity activity = (Activity)context;
        if (TextUtils.isEmpty((CharSequence)bla.a((Context)activity))) {
            return;
        }
        if (list == null) {
            he.a("Cannot ping urls: empty list.");
            return;
        }
        if (!bui.a(context)) {
            he.a("Cannot ping url because custom tabs is not supported");
            return;
        }
        bui bui2 = new bui();
        bui2.a(new ht(this, list, bui2, context));
        bui2.a(activity);
    }

    public final boolean a(View view, Context context) {
        Object object = context.getApplicationContext();
        object = object != null ? (PowerManager)object.getSystemService("power") : null;
        return this.a(view, (PowerManager)object, hs.m(context));
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Lifted jumps to return sites
     */
    public final boolean a(View var1_1, PowerManager var2_2, KeyguardManager var3_3) {
        if (av.e().c) ** GOTO lbl-1000
        var6_6 = var3_4 == null ? false : var3_4.inKeyguardRestrictedInputMode();
        if (!var6_6) ** GOTO lbl-1000
        var3_5 = btk.bg;
        if (!bqj.f().a(var3_5).booleanValue() || !hs.c(var1_1)) {
            var4_7 = false;
        } else lbl-1000: // 3 sources:
        {
            var4_7 = true;
        }
        if (var1_1.getVisibility() != 0) return false;
        if (var1_1.isShown() == false) return false;
        if (var2_2 /* !! */  != null) {
            if (var2_2 /* !! */ .isScreenOn() == false) return false;
        }
        var5_8 = true;
        if (var5_8 == false) return false;
        if (var4_7 == false) return false;
        var2_3 = btk.be;
        if (bqj.f().a(var2_3) == false) return true;
        if (var1_1.getLocalVisibleRect(new Rect()) != false) return true;
        if (var1_1.getGlobalVisibleRect(new Rect()) == false) return false;
        return true;
    }

    public final void b(Context context, String string2, String string3, Bundle bundle, boolean bl2) {
        bsz<Boolean> bsz2 = btk.bj;
        if (bqj.f().a(bsz2).booleanValue()) {
            this.a(context, string2, string3, bundle, bl2);
        }
    }

    public final boolean b(Context context) {
        if (this.e) {
            return false;
        }
        IntentFilter intentFilter = new IntentFilter();
        intentFilter.addAction("android.intent.action.USER_PRESENT");
        intentFilter.addAction("android.intent.action.SCREEN_OFF");
        context.getApplicationContext().registerReceiver((BroadcastReceiver)new hx(this, null), intentFilter);
        this.e = true;
        return true;
    }

    public final int[] b(Activity activity) {
        int[] arrn = hs.a(activity);
        bqj.a();
        int n2 = jz.b((Context)activity, arrn[0]);
        bqj.a();
        return new int[]{n2, jz.b((Context)activity, arrn[1])};
    }

    public final boolean c(Context context) {
        if (this.f) {
            return false;
        }
        IntentFilter intentFilter = new IntentFilter();
        intentFilter.addAction("com.google.android.ads.intent.DEBUG_LOGGING_ENABLEMENT_CHANGED");
        context.getApplicationContext().registerReceiver((BroadcastReceiver)new hw(this, null), intentFilter);
        this.f = true;
        return true;
    }

    public final int[] c(Activity activity) {
        View view;
        int[] arrn = activity.getWindow();
        arrn = arrn != null && (view = arrn.findViewById(16908290)) != null ? new int[]{view.getTop(), view.getBottom()} : hs.e();
        bqj.a();
        int n2 = jz.b((Context)activity, arrn[0]);
        bqj.a();
        return new int[]{n2, jz.b((Context)activity, arrn[1])};
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Converted monitor instructions to comments
     * Lifted jumps to return sites
     */
    public final boolean d(String string2) {
        block10 : {
            bsz<String> bsz2;
            block9 : {
                if (TextUtils.isEmpty((CharSequence)string2)) {
                    return false;
                }
                if (this.g == null) break block9;
                bsz2 = btk.am;
                if (bqj.f().a(bsz2).equals(this.g.pattern())) break block10;
            }
            bsz2 = btk.am;
            this.g = Pattern.compile(bqj.f().a(bsz2));
        }
        boolean bl2 = this.g.matcher(string2).matches();
        // MONITOREXIT : this
        return bl2;
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Converted monitor instructions to comments
     * Lifted jumps to return sites
     */
    public final boolean e(String string2) {
        block10 : {
            bsz<String> bsz2;
            block9 : {
                if (TextUtils.isEmpty((CharSequence)string2)) {
                    return false;
                }
                if (this.h == null) break block9;
                bsz2 = btk.an;
                if (bqj.f().a(bsz2).equals(this.h.pattern())) break block10;
            }
            bsz2 = btk.an;
            this.h = Pattern.compile(bqj.f().a(bsz2));
        }
        boolean bl2 = this.h.matcher(string2).matches();
        // MONITOREXIT : this
        return bl2;
    }
}

