/*
 * Decompiled with CFR 0_132.
 */
package com.google.android.gms.internal;

import com.google.android.gms.internal.axx;
import com.google.android.gms.internal.ayx;
import com.google.android.gms.internal.ayy;
import com.google.android.gms.internal.azb;
import java.nio.Buffer;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.IntBuffer;
import java.security.GeneralSecurityException;
import java.security.InvalidKeyException;

abstract class azc
implements ayy {
    static final int[] a = azc.a(ByteBuffer.wrap(new byte[]{101, 120, 112, 97, 110, 100, 32, 51, 50, 45, 98, 121, 116, 101, 32, 107}));
    final ayx b;
    private final int c;

    azc(byte[] arrby, int n2) {
        if (arrby.length == 32) {
            this.b = ayx.a(arrby);
            this.c = n2;
            return;
        }
        throw new InvalidKeyException("The key length in bytes must be 32.");
    }

    static int a(int n2, int n3) {
        return n2 >>> - n3 | n2 << n3;
    }

    private final void a(byte[] arrby, ByteBuffer byteBuffer, ByteBuffer byteBuffer2) {
        int n2 = byteBuffer2.remaining();
        int n3 = n2 / 64 + 1;
        for (int i2 = 0; i2 < n3; ++i2) {
            ByteBuffer byteBuffer3 = this.b(arrby, this.c + i2);
            if (i2 == n3 - 1) {
                axx.a(byteBuffer, byteBuffer2, byteBuffer3, n2 % 64);
                continue;
            }
            axx.a(byteBuffer, byteBuffer2, byteBuffer3, 64);
        }
    }

    static int[] a(ByteBuffer buffer) {
        buffer = buffer.order(ByteOrder.LITTLE_ENDIAN).asIntBuffer();
        int[] arrn = new int[buffer.remaining()];
        buffer.get(arrn);
        return arrn;
    }

    abstract int a();

    final void a(ByteBuffer byteBuffer, byte[] arrby) {
        if (byteBuffer.remaining() - this.a() >= arrby.length) {
            byte[] arrby2 = azb.a(this.a());
            byteBuffer.put(arrby2);
            this.a(arrby2, byteBuffer, ByteBuffer.wrap(arrby));
            return;
        }
        throw new IllegalArgumentException("Given ByteBuffer output is too small");
    }

    @Override
    public final byte[] a(byte[] arrby) {
        int n2 = arrby.length;
        this.a();
        if (n2 <= 2147483635) {
            ByteBuffer byteBuffer = ByteBuffer.allocate(this.a() + arrby.length);
            this.a(byteBuffer, arrby);
            return byteBuffer.array();
        }
        throw new GeneralSecurityException("plaintext too long");
    }

    abstract ByteBuffer b(byte[] var1, int var2);
}

