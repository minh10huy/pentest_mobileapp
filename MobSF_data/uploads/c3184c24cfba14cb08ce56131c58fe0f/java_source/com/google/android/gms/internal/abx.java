/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.content.Context
 *  android.os.Looper
 */
package com.google.android.gms.internal;

import android.content.Context;
import android.os.Looper;
import com.google.android.gms.common.internal.ah;
import com.google.android.gms.common.util.f;
import com.google.android.gms.internal.aab;
import com.google.android.gms.internal.aac;
import com.google.android.gms.internal.aai;
import com.google.android.gms.internal.aaw;
import com.google.android.gms.internal.aax;
import com.google.android.gms.internal.aaz;
import com.google.android.gms.internal.abb;
import com.google.android.gms.internal.abd;
import com.google.android.gms.internal.abm;
import com.google.android.gms.internal.abw;
import com.google.android.gms.internal.abz;
import com.google.android.gms.internal.aca;
import com.google.android.gms.internal.acb;
import com.google.android.gms.internal.acc;
import com.google.android.gms.internal.adc;
import com.google.android.gms.internal.ade;
import com.google.android.gms.internal.adv;
import com.google.android.gms.internal.adz;
import com.google.android.gms.internal.aez;
import com.google.android.gms.internal.afk;
import com.google.android.gms.internal.zr;
import com.google.android.gms.internal.zy;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Future;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.PriorityBlockingQueue;
import java.util.concurrent.Semaphore;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicLong;

public final class abx
extends adc {
    private static final AtomicLong k = new AtomicLong(Long.MIN_VALUE);
    private ExecutorService a;
    private acb b;
    private acb c;
    private final PriorityBlockingQueue<aca<?>> d = new PriorityBlockingQueue();
    private final BlockingQueue<aca<?>> e = new LinkedBlockingQueue();
    private final Thread.UncaughtExceptionHandler f = new abz(this, "Thread death: Uncaught exception on worker thread");
    private final Thread.UncaughtExceptionHandler g = new abz(this, "Thread death: Uncaught exception on network thread");
    private final Object h = new Object();
    private final Semaphore i = new Semaphore(2);
    private volatile boolean j;

    abx(acc acc2) {
        super(acc2);
    }

    static /* synthetic */ AtomicLong B() {
        return k;
    }

    static /* synthetic */ acb a(abx abx2, acb acb2) {
        abx2.b = null;
        return null;
    }

    static /* synthetic */ Semaphore a(abx abx2) {
        return abx2.i;
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    private final void a(aca<?> aca2) {
        Object object = this.h;
        synchronized (object) {
            this.d.add(aca2);
            if (this.b == null) {
                this.b = new acb(this, "Measurement Worker", this.d);
                this.b.setUncaughtExceptionHandler(this.f);
                this.b.start();
            } else {
                this.b.a();
            }
            return;
        }
    }

    static /* synthetic */ acb b(abx abx2, acb acb2) {
        abx2.c = null;
        return null;
    }

    static /* synthetic */ boolean b(abx abx2) {
        return abx2.j;
    }

    static /* synthetic */ Object c(abx abx2) {
        return abx2.h;
    }

    static /* synthetic */ acb d(abx abx2) {
        return abx2.b;
    }

    static /* synthetic */ acb e(abx abx2) {
        return abx2.c;
    }

    public static boolean y() {
        if (Looper.myLooper() == Looper.getMainLooper()) {
            return true;
        }
        return false;
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    final ExecutorService A() {
        Object object = this.h;
        synchronized (object) {
            if (this.a != null) return this.a;
            this.a = new ThreadPoolExecutor(0, 1, 30L, TimeUnit.SECONDS, new ArrayBlockingQueue<Runnable>(100));
            return this.a;
        }
    }

    public final <V> Future<V> a(Callable<V> object) {
        this.Q();
        ah.a(object);
        object = new aca(this, object, false, "Task exception on worker thread");
        if (Thread.currentThread() == this.b) {
            if (!this.d.isEmpty()) {
                this.t().A().a("Callable skipped the worker queue.");
            }
            object.run();
            return object;
        }
        this.a((aca<?>)object);
        return object;
    }

    public final void a(Runnable runnable) {
        this.Q();
        ah.a(runnable);
        this.a(new aca(this, runnable, false, "Task exception on worker thread"));
    }

    public final <V> Future<V> b(Callable<V> object) {
        this.Q();
        ah.a(object);
        object = new aca(this, object, true, "Task exception on worker thread");
        if (Thread.currentThread() == this.b) {
            object.run();
            return object;
        }
        this.a((aca<?>)object);
        return object;
    }

    @Override
    public final void b() {
        if (Thread.currentThread() == this.c) {
            return;
        }
        throw new IllegalStateException("Call expected from network thread");
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public final void b(Runnable object) {
        this.Q();
        ah.a(object);
        aca aca2 = new aca(this, (Runnable)object, false, "Task exception on network thread");
        object = this.h;
        synchronized (object) {
            this.e.add(aca2);
            if (this.c == null) {
                this.c = new acb(this, "Measurement Network", this.e);
                this.c.setUncaughtExceptionHandler(this.g);
                this.c.start();
            } else {
                this.c.a();
            }
            return;
        }
    }

    @Override
    public final void c() {
        if (Thread.currentThread() == this.b) {
            return;
        }
        throw new IllegalStateException("Call expected from worker thread");
    }

    @Override
    protected final boolean w() {
        return false;
    }

    public final boolean z() {
        if (Thread.currentThread() == this.b) {
            return true;
        }
        return false;
    }
}

