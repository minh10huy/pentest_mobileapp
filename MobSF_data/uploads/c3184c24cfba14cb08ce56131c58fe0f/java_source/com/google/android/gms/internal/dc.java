/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.net.Uri
 *  android.net.Uri$Builder
 *  android.text.TextUtils
 *  org.json.JSONException
 *  org.json.JSONObject
 */
package com.google.android.gms.internal;

import android.net.Uri;
import android.text.TextUtils;
import com.google.android.gms.ads.internal.av;
import com.google.android.gms.internal.ak;
import com.google.android.gms.internal.bj;
import com.google.android.gms.internal.bn;
import com.google.android.gms.internal.bp;
import com.google.android.gms.internal.bqj;
import com.google.android.gms.internal.bsz;
import com.google.android.gms.internal.btk;
import com.google.android.gms.internal.fk;
import com.google.android.gms.internal.fu;
import com.google.android.gms.internal.he;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import org.json.JSONException;
import org.json.JSONObject;

@ak
public final class dc {
    private bp A;
    private boolean B = false;
    private String C;
    private List<String> D;
    private boolean E;
    private String F;
    private fu G;
    private boolean H;
    private boolean I;
    private final bj J;
    private String a;
    private String b;
    private String c;
    private List<String> d;
    private String e;
    private String f;
    private String g;
    private List<String> h;
    private long i = -1L;
    private boolean j = false;
    private final long k = -1L;
    private List<String> l;
    private long m = -1L;
    private int n = -1;
    private boolean o = false;
    private boolean p = false;
    private boolean q = false;
    private boolean r = true;
    private boolean s = true;
    private String t = "";
    private boolean u = false;
    private boolean v = false;
    private fk w;
    private List<String> x;
    private List<String> y;
    private boolean z = false;

    public dc(bj bj2, String string2) {
        this.b = string2;
        this.J = bj2;
    }

    private static String a(Map<String, List<String>> object, String string2) {
        if ((object = object.get(string2)) != null && !object.isEmpty()) {
            return (String)object.get(0);
        }
        return null;
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    private static long b(Map<String, List<String>> object, String string2) {
        if ((object = (List)object.get(string2)) != null && !object.isEmpty()) {
            float f2;
            object = (String)object.get(0);
            try {
                f2 = Float.parseFloat((String)object);
            }
            catch (NumberFormatException numberFormatException) {}
            return (long)(f2 * 1000.0f);
            StringBuilder stringBuilder = new StringBuilder(String.valueOf(string2).length() + 36 + String.valueOf(object).length());
            stringBuilder.append("Could not parse float from ");
            stringBuilder.append(string2);
            stringBuilder.append(" header: ");
            stringBuilder.append((String)object);
            he.e(stringBuilder.toString());
        }
        return -1L;
    }

    private static List<String> c(Map<String, List<String>> object, String string2) {
        if ((object = object.get(string2)) != null && !object.isEmpty() && (object = (String)object.get(0)) != null) {
            return Arrays.asList(object.trim().split("\\s+"));
        }
        return null;
    }

    private static boolean d(Map<String, List<String>> object, String string2) {
        if ((object = object.get(string2)) != null) {
            if (object.isEmpty()) {
                return false;
            }
            return Boolean.valueOf((String)object.get(0));
        }
        return false;
    }

    public final bn a(long l2, boolean bl2) {
        bj bj2 = this.J;
        String string2 = this.b;
        String string3 = this.c;
        List<String> list = this.d;
        List<String> list2 = this.h;
        long l3 = this.i;
        boolean bl3 = this.j;
        List<String> list3 = this.l;
        long l4 = this.m;
        int n2 = this.n;
        String string4 = this.a;
        String string5 = this.f;
        String string6 = this.g;
        boolean bl4 = this.o;
        boolean bl5 = this.p;
        boolean bl6 = this.q;
        boolean bl7 = this.r;
        String string7 = this.t;
        boolean bl8 = this.u;
        boolean bl9 = this.v;
        fk fk2 = this.w;
        List<String> list4 = this.x;
        List<String> list5 = this.y;
        boolean bl10 = this.z;
        bp bp2 = this.A;
        boolean bl11 = this.B;
        String string8 = this.C;
        List<String> list6 = this.D;
        boolean bl12 = this.E;
        String string9 = this.F;
        fu fu2 = this.G;
        String string10 = this.e;
        boolean bl13 = this.s;
        boolean bl14 = this.H;
        boolean bl15 = this.I;
        int n3 = bl2 ? 2 : 1;
        return new bn(bj2, string2, string3, list, list2, l3, bl3, -1L, list3, l4, n2, string4, l2, string5, string6, bl4, bl5, bl6, bl7, false, string7, bl8, bl9, fk2, list4, list5, bl10, bp2, bl11, string8, list6, bl12, string9, fu2, string10, bl13, bl14, bl15, n3);
    }

    public final void a(String string2, Map<String, List<String>> map, String string3) {
        this.c = string3;
        this.a(map);
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public final void a(Map<String, List<String>> map) {
        Object object;
        block28 : {
            int n2;
            block30 : {
                block29 : {
                    long l2;
                    this.a = dc.a(map, "X-Afma-Ad-Size");
                    this.F = dc.a(map, "X-Afma-Ad-Slot-Size");
                    object = dc.c(map, "X-Afma-Click-Tracking-Urls");
                    if (object != null) {
                        this.d = object;
                    }
                    this.e = dc.a(map, "X-Afma-Debug-Signals");
                    object = map.get("X-Afma-Debug-Dialog");
                    if (object != null && !object.isEmpty()) {
                        this.f = object.get(0);
                    }
                    if ((object = dc.c(map, "X-Afma-Tracking-Urls")) != null) {
                        this.h = object;
                    }
                    if ((l2 = dc.b(map, "X-Afma-Interstitial-Timeout")) != -1L) {
                        this.i = l2;
                    }
                    this.j |= dc.d(map, "X-Afma-Mediation");
                    object = dc.c(map, "X-Afma-Manual-Tracking-Urls");
                    if (object != null) {
                        this.l = object;
                    }
                    if ((l2 = dc.b(map, "X-Afma-Refresh-Rate")) != -1L) {
                        this.m = l2;
                    }
                    if ((object = map.get("X-Afma-Orientation")) == null || object.isEmpty()) break block28;
                    if (!"portrait".equalsIgnoreCase((String)(object = object.get(0)))) break block29;
                    n2 = av.g().b();
                    break block30;
                }
                if (!"landscape".equalsIgnoreCase((String)object)) break block28;
                n2 = av.g().a();
            }
            this.n = n2;
        }
        this.g = dc.a(map, "X-Afma-ActiveView");
        object = map.get("X-Afma-Use-HTTPS");
        if (object != null && !object.isEmpty()) {
            this.q = Boolean.valueOf(object.get(0));
        }
        this.o |= dc.d(map, "X-Afma-Custom-Rendering-Allowed");
        this.p = "native".equals(dc.a(map, "X-Afma-Ad-Format"));
        object = map.get("X-Afma-Content-Url-Opted-Out");
        if (object != null && !object.isEmpty()) {
            this.r = Boolean.valueOf(object.get(0));
        }
        if ((object = map.get("X-Afma-Content-Vertical-Opted-Out")) != null && !object.isEmpty()) {
            this.s = Boolean.valueOf(object.get(0));
        }
        if ((object = map.get("X-Afma-Gws-Query-Id")) != null && !object.isEmpty()) {
            this.t = (String)object.get(0);
        }
        if ((object = dc.a(map, "X-Afma-Fluid")) != null && object.equals("height")) {
            this.u = true;
        }
        this.v = "native_express".equals(dc.a(map, "X-Afma-Ad-Format"));
        this.w = fk.a(dc.a(map, "X-Afma-Rewards"));
        if (this.x == null) {
            this.x = dc.c(map, "X-Afma-Reward-Video-Start-Urls");
        }
        if (this.y == null) {
            this.y = dc.c(map, "X-Afma-Reward-Video-Complete-Urls");
        }
        this.z |= dc.d(map, "X-Afma-Use-Displayed-Impression");
        this.B |= dc.d(map, "X-Afma-Auto-Collect-Location");
        this.C = dc.a(map, "Set-Cookie");
        object = dc.a(map, "X-Afma-Auto-Protection-Configuration");
        if (object != null && !TextUtils.isEmpty((CharSequence)object)) {
            try {
                this.A = bp.a(new JSONObject((String)object));
            }
            catch (JSONException jSONException) {
                he.c("Error parsing configuration JSON", (Throwable)jSONException);
                this.A = new bp();
            }
        } else {
            object = Uri.parse((String)"https://pagead2.googlesyndication.com/pagead/gen_204").buildUpon();
            object.appendQueryParameter("id", "gmob-apps-blocked-navigation");
            if (!TextUtils.isEmpty((CharSequence)this.f)) {
                object.appendQueryParameter("debugDialog", this.f);
            }
            Object object2 = btk.e;
            boolean bl2 = bqj.f().a(object2);
            object = object.toString();
            object2 = new StringBuilder(String.valueOf(object).length() + 31);
            object2.append((String)object);
            object2.append("&navigationURL={NAVIGATION_URL}");
            this.A = new bp(bl2, Arrays.asList(object2.toString()));
        }
        object = dc.c(map, "X-Afma-Remote-Ping-Urls");
        if (object != null) {
            this.D = object;
        }
        if (!TextUtils.isEmpty((CharSequence)(object = dc.a(map, "X-Afma-Safe-Browsing")))) {
            try {
                this.G = fu.a(new JSONObject((String)object));
            }
            catch (JSONException jSONException) {
                he.c("Error parsing safe browsing header", (Throwable)jSONException);
            }
        }
        this.E |= dc.d(map, "X-Afma-Render-In-Browser");
        object = dc.a(map, "X-Afma-Pool");
        if (!TextUtils.isEmpty((CharSequence)object)) {
            try {
                this.H = new JSONObject((String)object).getBoolean("never_pool");
            }
            catch (JSONException jSONException) {
                he.c("Error parsing interstitial pool header", (Throwable)jSONException);
            }
        }
        this.I = dc.d(map, "X-Afma-Custom-Close-Blocked");
    }
}

