/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.content.Context
 *  android.net.ConnectivityManager
 *  android.net.NetworkInfo
 *  android.os.Build
 *  android.os.Build$VERSION
 */
package com.google.android.gms.internal;

import android.content.Context;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.os.Build;
import com.google.android.gms.analytics.p;
import com.google.android.gms.common.internal.ah;
import com.google.android.gms.common.util.f;
import com.google.android.gms.internal.qo;
import com.google.android.gms.internal.qv;
import com.google.android.gms.internal.qw;
import com.google.android.gms.internal.qx;
import com.google.android.gms.internal.rp;
import com.google.android.gms.internal.rv;
import com.google.android.gms.internal.rz;
import com.google.android.gms.internal.sh;
import com.google.android.gms.internal.si;
import com.google.android.gms.internal.sm;
import com.google.android.gms.internal.ss;
import com.google.android.gms.internal.sv;
import com.google.android.gms.internal.te;
import com.google.android.gms.internal.tf;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.UnsupportedEncodingException;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.zip.GZIPOutputStream;

final class su
extends qv {
    private static final byte[] c = "\n".getBytes();
    private final String a = String.format("%s/%s (Linux; U; Android %s; %s; %s Build/%s)", "GoogleAnalytics", qw.a, Build.VERSION.RELEASE, tf.a(Locale.getDefault()), Build.MODEL, Build.ID);
    private final te b;

    su(qx qx2) {
        super(qx2);
        this.b = new te(qx2.c());
    }

    /*
     * WARNING - Removed back jump from a try to a catch block - possible behaviour change.
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    private final int a(URL object) {
        void var3_5;
        block9 : {
            HttpURLConnection httpURLConnection;
            block10 : {
                ah.a(object);
                this.b("GET request", object);
                httpURLConnection = this.b((URL)object);
                object = httpURLConnection;
                httpURLConnection.connect();
                object = httpURLConnection;
                this.a(httpURLConnection);
                object = httpURLConnection;
                int n2 = httpURLConnection.getResponseCode();
                if (n2 == 200) {
                    object = httpURLConnection;
                    this.n().f();
                }
                object = httpURLConnection;
                this.b("GET status", n2);
                if (httpURLConnection == null) return n2;
                httpURLConnection.disconnect();
                return n2;
                catch (Throwable throwable) {
                    object = null;
                    break block9;
                }
                catch (IOException iOException) {
                    httpURLConnection = null;
                    break block10;
                }
                catch (Throwable throwable) {
                    break block9;
                }
                catch (IOException iOException) {}
            }
            object = httpURLConnection;
            {
                void var4_9;
                this.d("Network GET connection error", var4_9);
                if (httpURLConnection == null) return 0;
                httpURLConnection.disconnect();
                return 0;
            }
        }
        if (object == null) throw var3_5;
        object.disconnect();
        throw var3_5;
    }

    /*
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    private final int a(URL object, byte[] object2) {
        void var4_27;
        void var2_12;
        block21 : {
            Object object3;
            block23 : {
                void var2_9;
                Object object4;
                block22 : {
                    Object var7_29;
                    int n2;
                    block20 : {
                        ah.a(object);
                        ah.a(object2);
                        this.b("POST bytes, url", ((Object)object2).length, object);
                        if (su.v()) {
                            this.a("Post payload\n", new String((byte[])object2));
                        }
                        object4 = null;
                        Object var4_17 = null;
                        var7_29 = null;
                        this.i().getPackageName();
                        object = this.b((URL)object);
                        OutputStream outputStream = object4;
                        object3 = object;
                        object.setDoOutput(true);
                        OutputStream outputStream2 = object4;
                        object3 = object;
                        object.setFixedLengthStreamingMode(((Object)object2).length);
                        OutputStream outputStream3 = object4;
                        object3 = object;
                        object.connect();
                        OutputStream outputStream4 = object4;
                        object3 = object;
                        object4 = object.getOutputStream();
                        object4.write((byte[])object2);
                        this.a((HttpURLConnection)object);
                        n2 = object.getResponseCode();
                        if (n2 == 200) {
                            this.n().f();
                        }
                        this.b("POST status", n2);
                        if (object4 == null) break block20;
                        try {
                            object4.close();
                        }
                        catch (IOException iOException) {
                            this.e("Error closing http post connection output stream", iOException);
                        }
                    }
                    if (object == null) return n2;
                    object.disconnect();
                    return n2;
                    catch (Throwable throwable) {
                        OutputStream outputStream = object4;
                        break block21;
                    }
                    catch (IOException iOException) {
                        OutputStream outputStream = object4;
                        object4 = iOException;
                        break block22;
                    }
                    catch (IOException iOException) {
                        Object var2_6 = var7_29;
                        break block22;
                    }
                    catch (Throwable throwable) {
                        object = null;
                        break block21;
                    }
                    catch (IOException iOException) {
                        object = null;
                        Object var2_8 = var7_29;
                    }
                }
                void var4_25 = var2_9;
                object3 = object;
                this.d("Network POST connection error", object4);
                if (var2_9 == null) break block23;
                try {
                    var2_9.close();
                }
                catch (IOException iOException) {
                    this.e("Error closing http post connection output stream", iOException);
                }
            }
            if (object == null) return 0;
            object.disconnect();
            return 0;
            catch (Throwable throwable) {
                object = object3;
            }
        }
        if (var4_27 != null) {
            try {
                var4_27.close();
            }
            catch (IOException iOException) {
                this.e("Error closing http post connection output stream", iOException);
            }
        }
        if (object == null) throw var2_12;
        object.disconnect();
        throw var2_12;
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    private final URL a(sm var1_1) {
        block5 : {
            block4 : {
                if (!var1_1.f()) break block4;
                var2_3 = String.valueOf(rz.h());
                var1_1 = String.valueOf(rz.j());
                if (var1_1.length() != 0) ** GOTO lbl-1000
                var1_1 = new String(var2_3);
                break block5;
            }
            var2_3 = String.valueOf(rz.i());
            var1_1 = String.valueOf(rz.j());
            if (var1_1.length() != 0) lbl-1000: // 2 sources:
            {
                var1_1 = var2_3.concat((String)var1_1);
            } else {
                var1_1 = new String(var2_3);
            }
        }
        try {
            return new URL((String)var1_1);
        }
        catch (MalformedURLException var1_2) {
            this.e("Error trying to parse the hardcoded host url", var1_2);
            return null;
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    private final URL a(sm object, String string2) {
        StringBuilder stringBuilder;
        String string3;
        if (object.f()) {
            string3 = rz.h();
            object = rz.j();
            stringBuilder = new StringBuilder(String.valueOf(string3).length() + 1 + String.valueOf(object).length() + String.valueOf(string2).length());
        } else {
            string3 = rz.i();
            object = rz.j();
            stringBuilder = new StringBuilder(String.valueOf(string3).length() + 1 + String.valueOf(object).length() + String.valueOf(string2).length());
        }
        stringBuilder.append(string3);
        stringBuilder.append((String)object);
        stringBuilder.append("?");
        stringBuilder.append(string2);
        object = stringBuilder.toString();
        try {
            return new URL((String)object);
        }
        catch (MalformedURLException malformedURLException) {
            this.e("Error trying to parse the hardcoded host url", malformedURLException);
            return null;
        }
    }

    private static void a(StringBuilder stringBuilder, String string2, String string3) {
        if (stringBuilder.length() != 0) {
            stringBuilder.append('&');
        }
        stringBuilder.append(URLEncoder.encode(string2, "UTF-8"));
        stringBuilder.append('=');
        stringBuilder.append(URLEncoder.encode(string3, "UTF-8"));
    }

    /*
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    private final void a(HttpURLConnection arrby) {
        void var1_5;
        InputStream inputStream;
        block9 : {
            inputStream = arrby.getInputStream();
            try {
                int n2;
                arrby = new byte[1024];
                while ((n2 = inputStream.read(arrby)) > 0) {
                }
                if (inputStream == null) return;
            }
            catch (Throwable throwable) {}
            try {
                inputStream.close();
                return;
            }
            catch (IOException iOException) {
                this.e("Error closing http connection input stream", iOException);
            }
            return;
            break block9;
            catch (Throwable throwable) {
                inputStream = null;
            }
        }
        if (inputStream == null) throw var1_5;
        try {
            inputStream.close();
            throw var1_5;
        }
        catch (IOException iOException) {
            this.e("Error closing http connection input stream", iOException);
        }
        throw var1_5;
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    private final int b(URL var1_1, byte[] var2_3) {
        block20 : {
            block22 : {
                block21 : {
                    ah.a(var1_1);
                    ah.a(var2_3);
                    var5_7 = null;
                    var4_10 = null;
                    this.i().getPackageName();
                    var6_14 = new byte[]();
                    var7_15 = new GZIPOutputStream((OutputStream)var6_14);
                    var7_15.write((byte[])var2_3);
                    var7_15.close();
                    var6_14.close();
                    var6_14 = var6_14.toByteArray();
                    this.a("POST compressed size, ratio %, url", var6_14.length, (long)var6_14.length * 100L / (long)((Object)var2_3).length, var1_1);
                    if (var6_14.length > ((Object)var2_3).length) {
                        this.c("Compressed payload is larger then uncompressed. compressed, uncompressed", var6_14.length, ((Object)var2_3).length);
                    }
                    if (su.v()) {
                        var2_3 = (var2_3 = String.valueOf(new String((byte[])var2_3))).length() != 0 ? "\n".concat((String)var2_3) : new String("\n");
                        this.a("Post payload", var2_3);
                    }
                    var1_1 = this.b((URL)var1_1);
                    var1_1.setDoOutput(true);
                    var1_1.addRequestProperty("Content-Encoding", "gzip");
                    var1_1.setFixedLengthStreamingMode(var6_14.length);
                    var1_1.connect();
                    var2_3 = var1_1.getOutputStream();
                    var2_3.write(var6_14);
                    var2_3.close();
                    this.a((HttpURLConnection)var1_1);
                    var3_16 = var1_1.getResponseCode();
                    if (var3_16 != 200) ** GOTO lbl35
                    this.n().f();
lbl35: // 2 sources:
                    this.b("POST status", var3_16);
                    if (var1_1 == null) return var3_16;
                    var1_1.disconnect();
                    return var3_16;
                    catch (Throwable var4_11) {
                        var5_7 = var1_1;
                        var1_1 = var4_11;
                        var4_10 = var2_3;
                        var2_3 = var5_7;
                        break block20;
                    }
                    catch (IOException var5_8) {
                        var4_10 = var2_3;
                        var2_3 = var5_8;
                        break block21;
                    }
                    catch (Throwable var4_12) {
                        var2_3 = var1_1;
                        var1_1 = var4_12;
                        var4_10 = var5_7;
                        break block20;
                    }
                    catch (IOException var2_4) {
                        break block21;
                    }
                    catch (Throwable var1_2) {
                        var2_3 = null;
                        var4_10 = var5_7;
                        break block20;
                    }
                    catch (IOException var2_5) {
                        var1_1 = null;
                    }
                }
                this.d("Network compressed POST connection error", var2_3);
                if (var4_10 == null) break block22;
                try {
                    var4_10.close();
                }
                catch (IOException var2_6) {
                    this.e("Error closing http compressed post connection output stream", var2_6);
                }
            }
            if (var1_1 == null) return 0;
            var1_1.disconnect();
            return 0;
            catch (Throwable var5_9) {
                var2_3 = var1_1;
                var1_1 = var5_9;
            }
        }
        if (var4_10 != null) {
            try {
                var4_10.close();
            }
            catch (IOException var4_13) {
                this.e("Error closing http compressed post connection output stream", var4_13);
            }
        }
        if (var2_3 == null) throw var1_1;
        var2_3.disconnect();
        throw var1_1;
    }

    private final HttpURLConnection b(URL object) {
        if ((object = object.openConnection()) instanceof HttpURLConnection) {
            object = (HttpURLConnection)object;
            object.setDefaultUseCaches(false);
            object.setConnectTimeout(sh.w.a());
            object.setReadTimeout(sh.x.a());
            object.setInstanceFollowRedirects(false);
            object.setRequestProperty("User-Agent", this.a);
            object.setDoInput(true);
            return object;
        }
        throw new IOException("Failed to obtain http connection");
    }

    /*
     * Enabled aggressive block sorting
     */
    private final List<Long> b(List<sm> object) {
        ArrayList<Long> arrayList = new ArrayList<Long>(object.size());
        Iterator iterator = object.iterator();
        do {
            sm sm2;
            boolean bl2;
            block8 : {
                byte[] arrby;
                Object object2;
                block11 : {
                    void var1_8;
                    block7 : {
                        block10 : {
                            void var1_5;
                            block4 : {
                                String string2;
                                block9 : {
                                    block5 : {
                                        URL uRL;
                                        block6 : {
                                            String string3;
                                            block3 : {
                                                if (!iterator.hasNext()) return arrayList;
                                                sm2 = (sm)iterator.next();
                                                ah.a(sm2);
                                                boolean bl3 = sm2.f();
                                                bl2 = true;
                                                string3 = this.a(sm2, bl3 ^ true);
                                                if (string3 != null) break block3;
                                                ss ss2 = this.j();
                                                object2 = "Error formatting hit for upload";
                                                break block4;
                                            }
                                            if (string3.length() > sh.o.a()) break block5;
                                            uRL = this.a(sm2, string3);
                                            if (uRL != null) break block6;
                                            String string4 = "Failed to build collect GET endpoint url";
                                            break block7;
                                        }
                                        if (this.a(uRL) != 200) return arrayList;
                                        break block8;
                                    }
                                    string2 = this.a(sm2, false);
                                    if (string2 != null) break block9;
                                    ss ss3 = this.j();
                                    object2 = "Error formatting hit for POST upload";
                                    break block4;
                                }
                                arrby = string2.getBytes();
                                if (arrby.length <= sh.s.a()) break block10;
                                ss ss4 = this.j();
                                object2 = "Hit payload exceeds size limit";
                            }
                            var1_5.a(sm2, (String)object2);
                            break block8;
                        }
                        object2 = this.a(sm2);
                        if (object2 != null) break block11;
                        String string5 = "Failed to build collect POST endpoint url";
                    }
                    this.f((String)var1_8);
                    return arrayList;
                }
                if (this.a((URL)object2, arrby) != 200) return arrayList;
            }
            if (!bl2) return arrayList;
            arrayList.add(sm2.c());
        } while (arrayList.size() < rz.f());
        return arrayList;
    }

    static /* synthetic */ byte[] c() {
        return c;
    }

    private final URL d() {
        Object object = String.valueOf(rz.h());
        String string2 = String.valueOf(sh.n.a());
        object = string2.length() != 0 ? object.concat(string2) : new String((String)object);
        try {
            object = new URL((String)object);
            return object;
        }
        catch (MalformedURLException malformedURLException) {
            this.e("Error trying to parse the hardcoded host url", malformedURLException);
            return null;
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    final String a(sm object, boolean bl2) {
        ah.a(object);
        StringBuilder stringBuilder = new StringBuilder();
        try {
            for (Map.Entry<String, String> entry : object.b().entrySet()) {
                String string2 = entry.getKey();
                if ("ht".equals(string2) || "qt".equals(string2) || "AppUID".equals(string2) || "z".equals(string2) || "_gmsv".equals(string2)) continue;
                su.a(stringBuilder, string2, entry.getValue());
            }
            su.a(stringBuilder, "ht", String.valueOf(object.d()));
            su.a(stringBuilder, "qt", String.valueOf(this.h().a() - object.d()));
            if (!bl2) return stringBuilder.toString();
            long l2 = object.g();
            object = l2 != 0L ? String.valueOf(l2) : String.valueOf(object.c());
            su.a(stringBuilder, "z", (String)object);
            return stringBuilder.toString();
        }
        catch (UnsupportedEncodingException unsupportedEncodingException) {
            this.e("Failed to encode name or value", unsupportedEncodingException);
            return null;
        }
    }

    public final List<Long> a(List<sm> object) {
        int n2;
        int n3;
        p.d();
        this.x();
        ah.a(object);
        boolean bl2 = this.k().k().isEmpty();
        boolean bl3 = false;
        if (!bl2 && this.b.a((long)sh.v.a().intValue() * 1000L)) {
            n2 = rp.a(sh.p.a()) != rp.a ? 1 : 0;
            n3 = n2;
            if (rv.a(sh.q.a()) == rv.a) {
                bl3 = true;
                n3 = n2;
            }
        } else {
            n3 = 0;
        }
        if (n3 != 0) {
            sm sm2;
            ah.b(object.isEmpty() ^ true);
            this.a("Uploading batched hits. compression, count", bl3, object.size());
            sv sv2 = new sv(this);
            ArrayList<Long> arrayList = new ArrayList<Long>();
            object = object.iterator();
            while (object.hasNext() && sv2.a(sm2 = (sm)object.next())) {
                arrayList.add(sm2.c());
            }
            if (sv2.a() == 0) {
                return arrayList;
            }
            object = this.d();
            if (object == null) {
                this.f("Failed to build batching endpoint url");
            } else {
                n2 = bl3 ? this.b((URL)object, sv2.b()) : this.a((URL)object, sv2.b());
                if (200 == n2) {
                    this.a("Batched upload completed. Hits batched", sv2.a());
                    return arrayList;
                }
                this.a("Network error uploading hits. status code", n2);
                if (this.k().k().contains(n2)) {
                    this.e("Server instructed the client to stop batching");
                    this.b.a();
                }
            }
            return Collections.emptyList();
        }
        return this.b((List<sm>)object);
    }

    @Override
    protected final void a() {
        this.a("Network initialized. User agent", this.a);
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public final boolean b() {
        ConnectivityManager connectivityManager;
        block3 : {
            p.d();
            this.x();
            connectivityManager = (ConnectivityManager)this.i().getSystemService("connectivity");
            try {
                connectivityManager = connectivityManager.getActiveNetworkInfo();
                break block3;
            }
            catch (SecurityException securityException) {}
            connectivityManager = null;
        }
        if (connectivityManager != null && connectivityManager.isConnected()) {
            return true;
        }
        this.b("No network connectivity");
        return false;
    }
}

