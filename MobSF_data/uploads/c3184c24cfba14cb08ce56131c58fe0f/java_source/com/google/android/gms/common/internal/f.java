/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.os.Bundle
 *  android.os.Handler
 *  android.os.Handler$Callback
 *  android.os.Looper
 *  android.os.Message
 *  android.util.Log
 */
package com.google.android.gms.common.internal;

import android.os.Bundle;
import android.os.Handler;
import android.os.Looper;
import android.os.Message;
import android.util.Log;
import com.google.android.gms.common.a;
import com.google.android.gms.common.api.f;
import com.google.android.gms.common.internal.ah;
import com.google.android.gms.common.internal.g;
import java.util.ArrayList;
import java.util.Collection;
import java.util.concurrent.atomic.AtomicInteger;

public final class f
implements Handler.Callback {
    private final g a;
    private final ArrayList<f.b> b = new ArrayList();
    private ArrayList<f.b> c = new ArrayList();
    private final ArrayList<f.c> d = new ArrayList();
    private volatile boolean e = false;
    private final AtomicInteger f = new AtomicInteger(0);
    private boolean g = false;
    private final Handler h;
    private final Object i = new Object();

    public f(Looper looper, g g2) {
        this.a = g2;
        this.h = new Handler(looper, (Handler.Callback)this);
    }

    public final void a() {
        this.e = false;
        this.f.incrementAndGet();
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public final void a(int n2) {
        boolean bl2 = Looper.myLooper() == this.h.getLooper();
        ah.a(bl2, (Object)"onUnintentionalDisconnection must only be called on the Handler thread");
        this.h.removeMessages(1);
        Object object = this.i;
        synchronized (object) {
            this.g = true;
            ArrayList<f.b> arrayList = new ArrayList<f.b>(this.b);
            int n3 = this.f.get();
            int n4 = arrayList.size();
            int n5 = 0;
            while (n5 < n4) {
                f.b b2 = arrayList.get(n5);
                int n6 = n5 + 1;
                if (!this.e || this.f.get() != n3) break;
                n5 = n6;
                if (!this.b.contains(b2)) continue;
                b2.a(n2);
                n5 = n6;
            }
            this.c.clear();
            this.g = false;
            return;
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public final void a(Bundle bundle) {
        Object object = Looper.myLooper();
        Object object2 = this.h.getLooper();
        boolean bl2 = true;
        boolean bl3 = object == object2;
        ah.a(bl3, (Object)"onConnectionSuccess must only be called on the Handler thread");
        object = this.i;
        synchronized (object) {
            ah.a(this.g ^ true);
            this.h.removeMessages(1);
            this.g = true;
            bl3 = this.c.size() == 0 ? bl2 : false;
            ah.a(bl3);
            object2 = new ArrayList<f.b>(this.b);
            int n2 = this.f.get();
            object2 = (ArrayList)object2;
            int n3 = object2.size();
            int n4 = 0;
            while (n4 < n3) {
                Object object3 = object2.get(n4);
                int n5 = n4 + 1;
                object3 = (f.b)object3;
                if (!this.e || !this.a.g() || this.f.get() != n2) break;
                n4 = n5;
                if (this.c.contains(object3)) continue;
                object3.a(bundle);
                n4 = n5;
            }
            this.c.clear();
            this.g = false;
            return;
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public final void a(a a2) {
        Object object = Looper.myLooper();
        Object object2 = this.h.getLooper();
        int n2 = 0;
        boolean bl2 = object == object2;
        ah.a(bl2, (Object)"onConnectionFailure must only be called on the Handler thread");
        this.h.removeMessages(1);
        object = this.i;
        synchronized (object) {
            object2 = new ArrayList<f.c>(this.d);
            int n3 = this.f.get();
            object2 = (ArrayList)object2;
            int n4 = object2.size();
            do {
                if (n2 >= n4) {
                    return;
                }
                Object object3 = object2.get(n2);
                int n5 = n2 + 1;
                object3 = (f.c)object3;
                if (!this.e || this.f.get() != n3) break;
                n2 = n5;
                if (!this.d.contains(object3)) continue;
                object3.a(a2);
                n2 = n5;
            } while (true);
            return;
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Converted monitor instructions to comments
     * Lifted jumps to return sites
     */
    public final void a(f.b b2) {
        ah.a(b2);
        Object object = this.i;
        // MONITORENTER : object
        if (this.b.contains(b2)) {
            String string2 = String.valueOf(b2);
            StringBuilder stringBuilder = new StringBuilder(String.valueOf(string2).length() + 62);
            stringBuilder.append("registerConnectionCallbacks(): listener ");
            stringBuilder.append(string2);
            stringBuilder.append(" is already registered");
            Log.w((String)"GmsClientEvents", (String)stringBuilder.toString());
        } else {
            this.b.add(b2);
        }
        // MONITOREXIT : object
        if (!this.a.g()) return;
        this.h.sendMessage(this.h.obtainMessage(1, (Object)b2));
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public final void a(f.c object) {
        ah.a(object);
        Object object2 = this.i;
        synchronized (object2) {
            if (this.d.contains(object)) {
                object = String.valueOf(object);
                StringBuilder stringBuilder = new StringBuilder(String.valueOf(object).length() + 67);
                stringBuilder.append("registerConnectionFailedListener(): listener ");
                stringBuilder.append((String)object);
                stringBuilder.append(" is already registered");
                Log.w((String)"GmsClientEvents", (String)stringBuilder.toString());
            } else {
                this.d.add((f.c)object);
            }
            return;
        }
    }

    public final void b() {
        this.e = true;
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public final void b(f.c object) {
        ah.a(object);
        Object object2 = this.i;
        synchronized (object2) {
            if (!this.d.remove(object)) {
                object = String.valueOf(object);
                StringBuilder stringBuilder = new StringBuilder(String.valueOf(object).length() + 57);
                stringBuilder.append("unregisterConnectionFailedListener(): listener ");
                stringBuilder.append((String)object);
                stringBuilder.append(" not found");
                Log.w((String)"GmsClientEvents", (String)stringBuilder.toString());
            }
            return;
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public final boolean handleMessage(Message object) {
        if (object.what != 1) {
            int n2 = object.what;
            object = new StringBuilder(45);
            object.append("Don't know how to handle message: ");
            object.append(n2);
            Log.wtf((String)"GmsClientEvents", (String)object.toString(), (Throwable)new Exception());
            return false;
        }
        f.b b2 = (f.b)object.obj;
        object = this.i;
        synchronized (object) {
            if (this.e && this.a.g() && this.b.contains(b2)) {
                b2.a(this.a.a());
            }
            return true;
        }
    }
}

