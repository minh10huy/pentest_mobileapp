/*
 * Decompiled with CFR 0_132.
 */
package com.google.android.gms.internal;

import com.google.android.gms.internal.agn;
import com.google.android.gms.internal.yg;
import java.nio.Buffer;
import java.nio.ByteBuffer;
import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;
import java.security.Key;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.security.spec.AlgorithmParameterSpec;
import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;

public final class agm {
    private static Cipher b;
    private static final Object c;
    private static final Object d;
    private final SecureRandom a = null;

    static {
        c = new Object();
        d = new Object();
    }

    public agm(SecureRandom secureRandom) {
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    private static Cipher a() {
        Object object = d;
        synchronized (object) {
            if (b != null) return b;
            b = Cipher.getInstance("AES/CBC/PKCS5Padding");
            return b;
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Converted monitor instructions to comments
     * Lifted jumps to return sites
     */
    public final String a(byte[] object, byte[] arrby) {
        if (((Object)object).length != 16) throw new agn(this);
        byte[] arrby2 = new byte[]((byte[])object, "AES");
        object = c;
        // MONITORENTER : object
        agm.a().init(1, (Key)arrby2, (SecureRandom)null);
        arrby = agm.a().doFinal(arrby);
        arrby2 = agm.a().getIV();
        // MONITOREXIT : object
        try {
            int n2 = arrby.length + arrby2.length;
            object = ByteBuffer.allocate(n2);
            object.put(arrby2).put(arrby);
            object.flip();
            arrby = new byte[n2];
            object.get(arrby);
            return yg.a(arrby, false);
        }
        catch (BadPaddingException badPaddingException) {
            throw new agn(this, badPaddingException);
        }
        catch (NoSuchPaddingException noSuchPaddingException) {
            throw new agn(this, noSuchPaddingException);
        }
        catch (IllegalBlockSizeException illegalBlockSizeException) {
            throw new agn(this, illegalBlockSizeException);
        }
        catch (InvalidKeyException invalidKeyException) {
            throw new agn(this, invalidKeyException);
        }
        catch (NoSuchAlgorithmException noSuchAlgorithmException) {
            throw new agn(this, noSuchAlgorithmException);
        }
    }

    public final byte[] a(String object) {
        byte[] arrby;
        try {
            object = yg.a((String)object, false);
            if (((byte[])object).length != 32) {
                throw new agn(this);
            }
            object = ByteBuffer.wrap((byte[])object, 4, 16);
            arrby = new byte[16];
            object.get(arrby);
        }
        catch (IllegalArgumentException illegalArgumentException) {
            throw new agn(this, illegalArgumentException);
        }
        for (int i2 = 0; i2 < 16; ++i2) {
            arrby[i2] = (byte)(arrby[i2] ^ 68);
        }
        return arrby;
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Converted monitor instructions to comments
     * Lifted jumps to return sites
     */
    public final byte[] a(byte[] object, String arrby) {
        Object object2;
        byte[] arrby2;
        if (((byte[])object).length != 16) throw new agn(this);
        try {
            arrby2 = yg.a((String)arrby, false);
            if (arrby2.length <= 16) throw new agn(this);
            object2 = ByteBuffer.allocate(arrby2.length);
            object2.put(arrby2);
            object2.flip();
            arrby = new byte[16];
            arrby2 = new byte[arrby2.length - 16];
            object2.get(arrby);
            object2.get(arrby2);
            object2 = new SecretKeySpec((byte[])object, "AES");
            object = c;
            // MONITORENTER : object
        }
        catch (IllegalArgumentException illegalArgumentException) {
            throw new agn(this, illegalArgumentException);
        }
        catch (InvalidAlgorithmParameterException invalidAlgorithmParameterException) {
            throw new agn(this, invalidAlgorithmParameterException);
        }
        catch (BadPaddingException badPaddingException) {
            throw new agn(this, badPaddingException);
        }
        catch (NoSuchPaddingException noSuchPaddingException) {
            throw new agn(this, noSuchPaddingException);
        }
        catch (IllegalBlockSizeException illegalBlockSizeException) {
            throw new agn(this, illegalBlockSizeException);
        }
        catch (InvalidKeyException invalidKeyException) {
            throw new agn(this, invalidKeyException);
        }
        catch (NoSuchAlgorithmException noSuchAlgorithmException) {
            throw new agn(this, noSuchAlgorithmException);
        }
        agm.a().init(2, (Key)object2, new IvParameterSpec(arrby));
        arrby = agm.a().doFinal(arrby2);
        // MONITOREXIT : object
        return arrby;
    }
}

