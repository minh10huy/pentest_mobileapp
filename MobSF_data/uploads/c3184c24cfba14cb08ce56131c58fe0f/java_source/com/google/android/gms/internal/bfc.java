/*
 * Decompiled with CFR 0_132.
 */
package com.google.android.gms.internal;

import com.google.android.gms.internal.ber;
import com.google.android.gms.internal.bes;
import com.google.android.gms.internal.bey;
import com.google.android.gms.internal.bfd;
import java.io.IOException;
import java.io.OutputStream;
import java.nio.Buffer;
import java.nio.ByteBuffer;
import java.nio.channels.Channels;
import java.nio.channels.WritableByteChannel;
import java.util.Random;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;

final class bfc {
    private BlockingQueue<ByteBuffer> a;
    private final Random b = new Random();
    private volatile boolean c = false;
    private boolean d = false;
    private bes e;
    private WritableByteChannel f;
    private final Thread g = bes.a().newThread(new bfd(this));

    bfc(bes bes2, String string2, int n2) {
        ber ber2 = bes.b();
        Thread thread = this.g;
        StringBuilder stringBuilder = new StringBuilder(String.valueOf(string2).length() + 18);
        stringBuilder.append(string2);
        stringBuilder.append("Writer-");
        stringBuilder.append(n2);
        ber2.a(thread, stringBuilder.toString());
        this.e = bes2;
        this.a = new LinkedBlockingQueue<ByteBuffer>();
    }

    static /* synthetic */ void a(bfc bfc2) {
        bfc2.d();
    }

    private final void c() {
        ByteBuffer byteBuffer = this.a.take();
        this.f.write(byteBuffer);
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    private final void d() {
        try {
            while (!this.c && !Thread.interrupted()) {
                this.c();
            }
        }
        catch (IOException iOException) {
            bey bey2 = new bey("IO Exception", iOException);
            this.e.a(bey2);
            return;
        }
        catch (InterruptedException interruptedException) {
            return;
        }
        int n2 = 0;
        while (n2 < this.a.size()) {
            this.c();
            ++n2;
        }
    }

    final void a() {
        this.c = true;
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    final void a(byte by2, boolean bl2, byte[] arrby) {
        synchronized (this) {
            int n2 = 6;
            int n3 = arrby.length;
            if (n3 >= 126) {
                n2 = n3 <= 65535 ? 8 : 14;
            }
            ByteBuffer byteBuffer = ByteBuffer.allocate(arrby.length + n2);
            byteBuffer.put((byte)(by2 | -128));
            n2 = 0;
            if (n3 < 126) {
                byteBuffer.put((byte)(n3 | 128));
            } else if (n3 <= 65535) {
                byteBuffer.put((byte)-2);
                byteBuffer.putShort((short)n3);
            } else {
                byteBuffer.put((byte)-1);
                byteBuffer.putInt(0);
                byteBuffer.putInt(n3);
            }
            byte[] arrby2 = new byte[4];
            this.b.nextBytes(arrby2);
            byteBuffer.put(arrby2);
            while (n2 < arrby.length) {
                byteBuffer.put((byte)(arrby[n2] ^ arrby2[n2 % 4]));
                ++n2;
            }
            byteBuffer.flip();
            if (this.c && (this.d || by2 != 8)) {
                throw new bey("Shouldn't be sending");
            }
            if (by2 == 8) {
                this.d = true;
            }
            this.a.add(byteBuffer);
            return;
        }
    }

    final void a(OutputStream outputStream) {
        this.f = Channels.newChannel(outputStream);
    }

    final Thread b() {
        return this.g;
    }
}

