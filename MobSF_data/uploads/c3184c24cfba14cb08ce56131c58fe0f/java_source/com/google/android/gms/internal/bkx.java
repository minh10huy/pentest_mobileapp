/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.app.KeyguardManager
 *  android.content.BroadcastReceiver
 *  android.content.ContentResolver
 *  android.content.Context
 *  android.content.IntentFilter
 *  android.content.res.Resources
 *  android.database.ContentObserver
 *  android.graphics.Point
 *  android.graphics.Rect
 *  android.net.Uri
 *  android.os.Build
 *  android.os.Build$VERSION
 *  android.os.Handler
 *  android.os.PowerManager
 *  android.provider.Settings
 *  android.provider.Settings$System
 *  android.text.TextUtils
 *  android.util.DisplayMetrics
 *  android.view.Display
 *  android.view.View
 *  android.view.ViewTreeObserver
 *  android.view.ViewTreeObserver$OnGlobalLayoutListener
 *  android.view.ViewTreeObserver$OnScrollChangedListener
 *  android.view.WindowManager
 *  org.json.JSONArray
 *  org.json.JSONException
 *  org.json.JSONObject
 */
package com.google.android.gms.internal;

import android.app.KeyguardManager;
import android.content.BroadcastReceiver;
import android.content.ContentResolver;
import android.content.Context;
import android.content.IntentFilter;
import android.content.res.Resources;
import android.database.ContentObserver;
import android.graphics.Point;
import android.graphics.Rect;
import android.net.Uri;
import android.os.Build;
import android.os.Handler;
import android.os.PowerManager;
import android.provider.Settings;
import android.text.TextUtils;
import android.util.DisplayMetrics;
import android.view.Display;
import android.view.View;
import android.view.ViewTreeObserver;
import android.view.WindowManager;
import com.google.android.gms.ads.internal.av;
import com.google.android.gms.internal.ak;
import com.google.android.gms.internal.bku;
import com.google.android.gms.internal.bkv;
import com.google.android.gms.internal.bky;
import com.google.android.gms.internal.bld;
import com.google.android.gms.internal.bli;
import com.google.android.gms.internal.blw;
import com.google.android.gms.internal.bmm;
import com.google.android.gms.internal.bpy;
import com.google.android.gms.internal.gl;
import com.google.android.gms.internal.he;
import com.google.android.gms.internal.ik;
import com.google.android.gms.internal.jp;
import com.google.android.gms.internal.km;
import java.lang.ref.WeakReference;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Map;
import java.util.UUID;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

@ak
public final class bkx
implements ViewTreeObserver.OnGlobalLayoutListener,
ViewTreeObserver.OnScrollChangedListener {
    protected final bkv a;
    private Object b = new Object();
    private final WeakReference<gl> c;
    private WeakReference<ViewTreeObserver> d;
    private final bmm e;
    private final Context f;
    private final WindowManager g;
    private final PowerManager h;
    private final KeyguardManager i;
    private final DisplayMetrics j;
    private bli k;
    private boolean l;
    private boolean m = false;
    private boolean n = false;
    private boolean o;
    private boolean p;
    private boolean q;
    private BroadcastReceiver r;
    private final HashSet<bku> s = new HashSet();
    private jp t;
    private final HashSet<blw> u = new HashSet();
    private final Rect v = new Rect();
    private final bld w;
    private float x;

    public bkx(Context context, bpy bpy2, gl gl2, km km2, bmm bmm2) {
        this.c = new WeakReference<gl>(gl2);
        this.e = bmm2;
        this.d = new WeakReference<Object>(null);
        this.o = true;
        this.q = false;
        this.t = new jp(200L);
        this.a = new bkv(UUID.randomUUID().toString(), km2, bpy2.a, gl2.j, gl2.a(), bpy2.h);
        this.g = (WindowManager)context.getSystemService("window");
        this.h = (PowerManager)context.getApplicationContext().getSystemService("power");
        this.i = (KeyguardManager)context.getSystemService("keyguard");
        this.f = context;
        this.w = new bld(this, new Handler());
        this.f.getContentResolver().registerContentObserver(Settings.System.CONTENT_URI, true, (ContentObserver)this.w);
        this.j = context.getResources().getDisplayMetrics();
        context = this.g.getDefaultDisplay();
        this.v.right = context.getWidth();
        this.v.bottom = context.getHeight();
        this.a();
    }

    private static int a(int n2, DisplayMetrics displayMetrics) {
        float f2 = displayMetrics.density;
        return (int)((float)n2 / f2);
    }

    private final JSONObject a(View view, Boolean bl2) {
        if (view == null) {
            return this.i().put("isAttachedToWindow", false).put("isScreenOn", this.j()).put("isVisible", false);
        }
        boolean bl3 = av.g().a(view);
        JSONObject jSONObject = new int[2];
        Object object = new int[2];
        try {
            view.getLocationOnScreen((int[])jSONObject);
            view.getLocationInWindow((int[])object);
        }
        catch (Exception exception) {
            he.b("Failure getting view location.", exception);
        }
        object = new Rect();
        object.left = jSONObject[0];
        object.top = jSONObject[1];
        object.right = object.left + view.getWidth();
        object.bottom = object.top + view.getHeight();
        Rect rect = new Rect();
        boolean bl4 = view.getGlobalVisibleRect(rect, null);
        Rect rect2 = new Rect();
        boolean bl5 = view.getLocalVisibleRect(rect2);
        Rect rect3 = new Rect();
        view.getHitRect(rect3);
        jSONObject = this.i();
        jSONObject.put("windowVisibility", view.getWindowVisibility()).put("isAttachedToWindow", bl3).put("viewBox", (Object)new JSONObject().put("top", bkx.a(this.v.top, this.j)).put("bottom", bkx.a(this.v.bottom, this.j)).put("left", bkx.a(this.v.left, this.j)).put("right", bkx.a(this.v.right, this.j))).put("adBox", (Object)new JSONObject().put("top", bkx.a(object.top, this.j)).put("bottom", bkx.a(object.bottom, this.j)).put("left", bkx.a(object.left, this.j)).put("right", bkx.a(object.right, this.j))).put("globalVisibleBox", (Object)new JSONObject().put("top", bkx.a(rect.top, this.j)).put("bottom", bkx.a(rect.bottom, this.j)).put("left", bkx.a(rect.left, this.j)).put("right", bkx.a(rect.right, this.j))).put("globalVisibleBoxVisible", bl4).put("localVisibleBox", (Object)new JSONObject().put("top", bkx.a(rect2.top, this.j)).put("bottom", bkx.a(rect2.bottom, this.j)).put("left", bkx.a(rect2.left, this.j)).put("right", bkx.a(rect2.right, this.j))).put("localVisibleBoxVisible", bl5).put("hitBox", (Object)new JSONObject().put("top", bkx.a(rect3.top, this.j)).put("bottom", bkx.a(rect3.bottom, this.j)).put("left", bkx.a(rect3.left, this.j)).put("right", bkx.a(rect3.right, this.j))).put("screenDensity", (double)this.j.density);
        object = bl2;
        if (bl2 == null) {
            object = av.e().a(view, this.h, this.i);
        }
        jSONObject.put("isVisible", object.booleanValue());
        return jSONObject;
    }

    private static JSONObject a(JSONObject jSONObject) {
        JSONArray jSONArray = new JSONArray();
        JSONObject jSONObject2 = new JSONObject();
        jSONArray.put((Object)jSONObject);
        jSONObject2.put("units", (Object)jSONArray);
        return jSONObject2;
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    private final void a(JSONObject jSONObject, boolean bl2) {
        int n2;
        int n3;
        ArrayList<blw> arrayList;
        try {
            jSONObject = bkx.a(jSONObject);
            arrayList = new ArrayList<blw>(this.u);
            n2 = arrayList.size();
            n3 = 0;
        }
        catch (Throwable throwable) {
            he.b("Skipping active view message.", throwable);
            return;
        }
        while (n3 < n2) {
            blw blw2 = arrayList.get(n3);
            ++n3;
            blw2.a(jSONObject, bl2);
        }
        return;
    }

    private final void g() {
        if (this.k != null) {
            this.k.a(this);
        }
    }

    private final void h() {
        ViewTreeObserver viewTreeObserver = this.d.get();
        if (viewTreeObserver != null) {
            if (!viewTreeObserver.isAlive()) {
                return;
            }
            viewTreeObserver.removeOnScrollChangedListener((ViewTreeObserver.OnScrollChangedListener)this);
            viewTreeObserver.removeGlobalOnLayoutListener((ViewTreeObserver.OnGlobalLayoutListener)this);
        }
    }

    private final JSONObject i() {
        JSONObject jSONObject = new JSONObject();
        jSONObject.put("afmaVersion", (Object)this.a.b()).put("activeViewJSON", (Object)this.a.c()).put("timestamp", av.l().b()).put("adFormat", (Object)this.a.a()).put("hashCode", (Object)this.a.d()).put("isMraid", this.a.e()).put("isStopped", this.n).put("isPaused", this.m).put("isNative", this.a.f()).put("isScreenOn", this.j()).put("appMuted", av.C().b()).put("appVolume", (double)av.C().a()).put("deviceVolume", (double)this.x);
        return jSONObject;
    }

    private final boolean j() {
        if (Build.VERSION.SDK_INT >= 20) {
            return this.h.isInteractive();
        }
        return this.h.isScreenOn();
    }

    public final void a() {
        this.x = ik.a(this.f);
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    protected final void a(int n2) {
        Object object = this.b;
        synchronized (object) {
            View view = this.u.iterator();
            do {
                if (view.hasNext()) continue;
                return;
            } while (!view.next().a());
            boolean bl2 = true;
            if (bl2 && this.o) {
                view = this.e.a();
                boolean bl3 = view != null && av.e().a(view, this.h, this.i);
                boolean bl4 = view != null && bl3 && view.getGlobalVisibleRect(new Rect(), null);
                if (this.e.b()) {
                    this.b();
                    return;
                }
                if (n2 == 1 && !this.t.a() && bl4 == this.q) {
                    return;
                }
                if (!bl4 && !this.q && n2 == 1) {
                    return;
                }
                try {
                    this.a(this.a(view, (Boolean)bl3), false);
                    this.q = bl4;
                }
                catch (RuntimeException | JSONException object2) {
                    he.a("Active view update failed.", (Throwable)object2);
                }
                View view2 = this.e.c().a();
                if (view2 != null) {
                    view = this.d.get();
                    if ((view2 = view2.getViewTreeObserver()) != view) {
                        this.h();
                        if (!this.l || view != null && view.isAlive()) {
                            this.l = true;
                            view2.addOnScrollChangedListener((ViewTreeObserver.OnScrollChangedListener)this);
                            view2.addOnGlobalLayoutListener((ViewTreeObserver.OnGlobalLayoutListener)this);
                        }
                        this.d = new WeakReference<View>(view2);
                    }
                }
                this.g();
                return;
            }
            return;
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public final void a(bli bli2) {
        Object object = this.b;
        synchronized (object) {
            this.k = bli2;
            return;
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public final void a(blw blw2) {
        if (this.u.isEmpty()) {
            Object object = this.b;
            synchronized (object) {
                if (this.r == null) {
                    IntentFilter intentFilter = new IntentFilter();
                    intentFilter.addAction("android.intent.action.SCREEN_ON");
                    intentFilter.addAction("android.intent.action.SCREEN_OFF");
                    this.r = new bky(this);
                    av.D().a(this.f, this.r, intentFilter);
                }
            }
            this.a(3);
        }
        this.u.add(blw2);
        try {
            blw2.a(bkx.a(this.a(this.e.a(), null)), false);
            return;
        }
        catch (JSONException jSONException) {
            he.b("Skipping measurement update for new client.", (Throwable)jSONException);
            return;
        }
    }

    final void a(blw blw2, Map<String, String> object) {
        object = String.valueOf(this.a.d());
        object = object.length() != 0 ? "Received request to untrack: ".concat((String)object) : new String("Received request to untrack: ");
        he.b((String)object);
        this.b(blw2);
    }

    final boolean a(Map<String, String> object) {
        if (object == null) {
            return false;
        }
        if (!TextUtils.isEmpty((CharSequence)(object = object.get("hashCode"))) && object.equals(this.a.d())) {
            return true;
        }
        return false;
    }

    /*
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Converted monitor instructions to comments
     * Lifted jumps to return sites
     */
    public final void b() {
        block5 : {
            Object object2;
            Object object = this.b;
            // MONITORENTER : object
            if (!this.o) break block5;
            this.p = true;
            try {
                object2 = this.i();
                object2.put("doneReasonCode", (Object)"u");
                this.a((JSONObject)object2, true);
            }
            catch (RuntimeException runtimeException) {
                String string2;
                block6 : {
                    string2 = "Failure while processing active view data.";
                    break block6;
                    catch (JSONException jSONException) {
                        string2 = "JSON failure while processing active view data.";
                    }
                }
                he.b(string2, (Throwable)object2);
            }
            object2 = String.valueOf(this.a.d());
            object2 = object2.length() != 0 ? "Untracking ad unit: ".concat((String)object2) : new String("Untracking ad unit: ");
            he.b((String)object2);
        }
        // MONITOREXIT : object
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public final void b(blw object) {
        this.u.remove(object);
        object.b();
        if (!this.u.isEmpty()) {
            return;
        }
        object = this.b;
        synchronized (object) {
            Object object2;
            this.h();
            ArrayList<blw> arrayList = this.b;
            synchronized (arrayList) {
                object2 = this.r;
                if (object2 != null) {
                    try {
                        av.D().a(this.f, this.r);
                    }
                    catch (Exception exception) {
                        av.i().a(exception, "ActiveViewUnit.stopScreenStatusMonitoring");
                    }
                    catch (IllegalStateException illegalStateException) {
                        he.b("Failed trying to unregister the receiver", illegalStateException);
                    }
                    this.r = null;
                }
            }
            this.f.getContentResolver().unregisterContentObserver((ContentObserver)this.w);
            int n2 = 0;
            this.o = false;
            this.g();
            arrayList = new ArrayList<blw>(this.u);
            int n3 = arrayList.size();
            while (n2 < n3) {
                object2 = arrayList.get(n2);
                ++n2;
                this.b((blw)object2);
            }
            return;
        }
    }

    final void b(Map<String, String> map) {
        this.a(3);
    }

    final void c(Map<String, String> object) {
        if (!object.containsKey("isVisible")) {
            return;
        }
        boolean bl2 = "1".equals(object.get("isVisible")) || "true".equals(object.get("isVisible"));
        object = this.s.iterator();
        while (object.hasNext()) {
            ((bku)object.next()).a(this, bl2);
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public final boolean c() {
        Object object = this.b;
        synchronized (object) {
            return this.o;
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public final void d() {
        Object object = this.b;
        synchronized (object) {
            this.n = true;
            this.a(3);
            return;
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public final void e() {
        Object object = this.b;
        synchronized (object) {
            this.m = true;
            this.a(3);
            return;
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public final void f() {
        Object object = this.b;
        synchronized (object) {
            this.m = false;
            this.a(3);
            return;
        }
    }

    public final void onGlobalLayout() {
        this.a(2);
    }

    public final void onScrollChanged() {
        this.a(1);
    }
}

