/*
 * Decompiled with CFR 0_132.
 */
package com.google.android.gms.internal;

import com.google.android.gms.common.internal.ah;
import com.google.android.gms.internal.ajm;
import com.google.android.gms.internal.alc;
import com.google.android.gms.internal.ald;
import com.google.android.gms.internal.asj;
import com.google.android.gms.internal.asp;
import com.google.android.gms.internal.asw;
import java.io.UnsupportedEncodingException;
import java.nio.charset.Charset;

public final class aom
extends ald {
    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    static String a(String string2, String string3) {
        StringBuilder stringBuilder = new StringBuilder();
        Charset charset = Charset.forName("UTF-8");
        int n2 = 0;
        while (n2 < string2.length()) {
            int n3 = string2.charAt(n2);
            if (string3.indexOf(n3) != -1) {
                stringBuilder.append((char)n3);
                ++n2;
                continue;
            }
            if (Character.isHighSurrogate((char)n3)) {
                n3 = n2 + 1;
                if (n3 >= string2.length()) throw new UnsupportedEncodingException();
                if (!Character.isLowSurrogate(string2.charAt(n3))) throw new UnsupportedEncodingException();
                n3 = 2;
            } else {
                n3 = 1;
            }
            byte[] arrby = string2.substring(n2, n3 += n2).getBytes(charset);
            for (n2 = 0; n2 < arrby.length; ++n2) {
                stringBuilder.append("%");
                stringBuilder.append(Character.toUpperCase(Character.forDigit(arrby[n2] >> 4 & 15, 16)));
                stringBuilder.append(Character.toUpperCase(Character.forDigit(arrby[n2] & 15, 16)));
            }
            n2 = n3;
        }
        return stringBuilder.toString().replaceAll(" ", "%20");
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    @Override
    protected final /* varargs */ asj<?> a(ajm asj2, asj<?> ... arrasj) {
        void var1_4;
        void var2_8;
        ah.b(true);
        if (((void)var2_8).length > 0) {
            asj asj3 = (asj)ah.a(var2_8[0]);
        } else {
            asp asp2 = asp.e;
        }
        String string2 = alc.d(var1_4);
        try {
            return new asw(aom.a(string2, "#;/?:@&=+$,abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-_.!~*'()0123456789"));
        }
        catch (UnsupportedEncodingException unsupportedEncodingException) {
            return asp.e;
        }
    }
}

