/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.net.Uri
 *  android.net.Uri$Builder
 *  android.text.TextUtils
 */
package com.google.android.gms.analytics;

import android.net.Uri;
import android.text.TextUtils;
import com.google.android.gms.analytics.a.a;
import com.google.android.gms.analytics.a.c;
import com.google.android.gms.analytics.b;
import com.google.android.gms.analytics.i;
import com.google.android.gms.analytics.l;
import com.google.android.gms.analytics.n;
import com.google.android.gms.analytics.t;
import com.google.android.gms.common.internal.ah;
import com.google.android.gms.internal.qa;
import com.google.android.gms.internal.qb;
import com.google.android.gms.internal.qc;
import com.google.android.gms.internal.qd;
import com.google.android.gms.internal.qe;
import com.google.android.gms.internal.qf;
import com.google.android.gms.internal.qg;
import com.google.android.gms.internal.qh;
import com.google.android.gms.internal.qi;
import com.google.android.gms.internal.qj;
import com.google.android.gms.internal.qk;
import com.google.android.gms.internal.ql;
import com.google.android.gms.internal.qm;
import com.google.android.gms.internal.qo;
import com.google.android.gms.internal.qu;
import com.google.android.gms.internal.qw;
import com.google.android.gms.internal.qx;
import com.google.android.gms.internal.ra;
import com.google.android.gms.internal.sm;
import com.google.android.gms.internal.ss;
import com.google.android.gms.internal.tf;
import java.text.DecimalFormat;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

public final class g
extends qu
implements t {
    private static DecimalFormat a;
    private final qx b;
    private final String c;
    private final Uri d;

    public g(qx qx2, String string2) {
        this(qx2, string2, true, false);
    }

    private g(qx qx2, String string2, boolean bl2, boolean bl3) {
        super(qx2);
        ah.a(string2);
        this.b = qx2;
        this.c = string2;
        this.d = g.a(this.c);
    }

    static Uri a(String string2) {
        ah.a(string2);
        Uri.Builder builder = new Uri.Builder();
        builder.scheme("uri");
        builder.authority("google-analytics.com");
        builder.path(string2);
        return builder.build();
    }

    private static String a(double d2) {
        if (a == null) {
            a = new DecimalFormat("0.######");
        }
        return a.format(d2);
    }

    private static void a(Map<String, String> map, String string2, double d2) {
        if (d2 != 0.0) {
            map.put(string2, g.a(d2));
        }
    }

    private static void a(Map<String, String> map, String string2, int n2, int n3) {
        if (n2 > 0 && n3 > 0) {
            StringBuilder stringBuilder = new StringBuilder(23);
            stringBuilder.append(n2);
            stringBuilder.append("x");
            stringBuilder.append(n3);
            map.put(string2, stringBuilder.toString());
        }
    }

    private static void a(Map<String, String> map, String string2, String string3) {
        if (!TextUtils.isEmpty((CharSequence)string3)) {
            map.put(string2, string3);
        }
    }

    private static void a(Map<String, String> map, String string2, boolean bl2) {
        if (bl2) {
            map.put(string2, "1");
        }
    }

    /*
     * Enabled aggressive block sorting
     */
    private static Map<String, String> b(l object) {
        Object object2;
        Map.Entry<Integer, Double> entry;
        HashMap<String, String> hashMap = new HashMap<String, String>();
        Object object3 = object.a(qe.class);
        if (object3 != null) {
            for (Map.Entry<String, Object> entry2 : object3.a().entrySet()) {
                entry = entry2.getValue();
                object3 = null;
                if (entry != null) {
                    if (entry instanceof String) {
                        if (!TextUtils.isEmpty((CharSequence)((Object)(entry = (String)((Object)entry))))) {
                            object3 = entry;
                        }
                    } else if (entry instanceof Double) {
                        if ((entry = (Double)((Object)entry)).doubleValue() != 0.0) {
                            object3 = g.a(entry.doubleValue());
                        }
                    } else if (entry instanceof Boolean) {
                        if (entry != Boolean.FALSE) {
                            object3 = "1";
                        }
                    } else {
                        object3 = String.valueOf(entry);
                    }
                }
                if (object3 == null) continue;
                hashMap.put(entry2.getKey(), (String)object3);
            }
        }
        if ((object3 = object.a(qj.class)) != null) {
            g.a(hashMap, "t", object3.a());
            g.a(hashMap, "cid", object3.b());
            g.a(hashMap, "uid", object3.c());
            g.a(hashMap, "sc", object3.f());
            g.a(hashMap, "sf", object3.h());
            g.a(hashMap, "ni", object3.g());
            g.a(hashMap, "adid", object3.d());
            g.a(hashMap, "ate", object3.e());
        }
        if ((object3 = object.a(qk.class)) != null) {
            g.a(hashMap, "cd", object3.a());
            g.a(hashMap, "a", object3.b());
            g.a(hashMap, "dr", object3.c());
        }
        if ((object3 = object.a(qh.class)) != null) {
            g.a(hashMap, "ec", object3.a());
            g.a(hashMap, "ea", object3.b());
            g.a(hashMap, "el", object3.c());
            g.a(hashMap, "ev", object3.d());
        }
        if ((object3 = object.a(qb.class)) != null) {
            g.a(hashMap, "cn", object3.a());
            g.a(hashMap, "cs", object3.b());
            g.a(hashMap, "cm", object3.c());
            g.a(hashMap, "ck", object3.d());
            g.a(hashMap, "cc", object3.e());
            g.a(hashMap, "ci", object3.f());
            g.a(hashMap, "anid", object3.g());
            g.a(hashMap, "gclid", object3.h());
            g.a(hashMap, "dclid", object3.i());
            g.a(hashMap, "aclid", object3.j());
        }
        if ((object3 = object.a(qi.class)) != null) {
            g.a(hashMap, "exd", object3.a);
            g.a(hashMap, "exf", object3.b);
        }
        if ((object3 = object.a(ql.class)) != null) {
            g.a(hashMap, "sn", object3.a);
            g.a(hashMap, "sa", object3.b);
            g.a(hashMap, "st", object3.c);
        }
        if ((object3 = object.a(qm.class)) != null) {
            g.a(hashMap, "utv", object3.a);
            g.a(hashMap, "utt", object3.b);
            g.a(hashMap, "utc", object3.c);
            g.a(hashMap, "utl", object3.d);
        }
        if ((object3 = object.a(qc.class)) != null) {
            object3 = object3.a().entrySet().iterator();
            while (object3.hasNext()) {
                entry = (Map.Entry)object3.next();
                object2 = i.a((Integer)entry.getKey());
                if (TextUtils.isEmpty((CharSequence)object2)) continue;
                hashMap.put((String)object2, (String)((Object)entry.getValue()));
            }
        }
        if ((object3 = object.a(qd.class)) != null) {
            object3 = object3.a().entrySet().iterator();
            while (object3.hasNext()) {
                entry = object3.next();
                object2 = i.b(entry.getKey());
                if (TextUtils.isEmpty((CharSequence)object2)) continue;
                hashMap.put((String)object2, g.a(entry.getValue()));
            }
        }
        if ((entry = object.a(qg.class)) != null) {
            object3 = entry.a();
            if (object3 != null) {
                for (Map.Entry entry3 : object3.a().entrySet()) {
                    object3 = ((String)entry3.getKey()).startsWith("&") ? ((String)entry3.getKey()).substring(1) : (String)entry3.getKey();
                    hashMap.put((String)object3, (String)entry3.getValue());
                }
            }
            object3 = entry.d().iterator();
            int n2 = 1;
            while (object3.hasNext()) {
                hashMap.putAll(object3.next().e(i.f(n2)));
                ++n2;
            }
            object3 = entry.b().iterator();
            n2 = 1;
            while (object3.hasNext()) {
                hashMap.putAll(((a)object3.next()).g(i.d(n2)));
                ++n2;
            }
            entry = entry.c().entrySet().iterator();
            n2 = 1;
            while (entry.hasNext()) {
                object2 = (Map.Entry)entry.next();
                object3 = (List)object2.getValue();
                String string2 = i.i(n2);
                Iterator iterator = object3.iterator();
                int n3 = 1;
                while (iterator.hasNext()) {
                    a a2 = (a)iterator.next();
                    object3 = String.valueOf(string2);
                    String string3 = String.valueOf(i.g(n3));
                    object3 = string3.length() != 0 ? object3.concat(string3) : new String((String)object3);
                    hashMap.putAll(a2.g((String)object3));
                    ++n3;
                }
                if (!TextUtils.isEmpty((CharSequence)((CharSequence)object2.getKey()))) {
                    object3 = String.valueOf(string2);
                    String string4 = String.valueOf("nm");
                    object3 = string4.length() != 0 ? object3.concat(string4) : new String((String)object3);
                    hashMap.put((String)object3, (String)object2.getKey());
                }
                ++n2;
            }
        }
        if ((object3 = object.a(qf.class)) != null) {
            g.a(hashMap, "ul", object3.a());
            g.a(hashMap, "sd", object3.a);
            g.a(hashMap, "sr", object3.b, object3.c);
            g.a(hashMap, "vp", object3.d, object3.e);
        }
        if ((object = object.a(qa.class)) != null) {
            g.a(hashMap, "an", object.a());
            g.a(hashMap, "aid", object.c());
            g.a(hashMap, "aiid", object.d());
            g.a(hashMap, "av", object.b());
        }
        return hashMap;
    }

    @Override
    public final Uri a() {
        return this.d;
    }

    @Override
    public final void a(l object) {
        ah.a(object);
        ah.b(object.f(), "Can't deliver not submitted measurement");
        ah.c("deliver should be called on worker thread");
        Iterator<Map.Entry<String, String>> iterator = object.a();
        qj object22 = iterator.b(qj.class);
        if (TextUtils.isEmpty((CharSequence)object22.a())) {
            this.j().a(g.b((l)((Object)iterator)), "Ignoring measurement without type");
            return;
        }
        if (TextUtils.isEmpty((CharSequence)object22.b())) {
            this.j().a(g.b((l)((Object)iterator)), "Ignoring measurement without client id");
            return;
        }
        if (this.b.j().e()) {
            return;
        }
        double d2 = object22.h();
        if (tf.a(d2, object22.b())) {
            this.b("Sampling enabled. Hit sampled out. sampling rate", d2);
            return;
        }
        iterator = g.b((l)((Object)iterator));
        iterator.put("v", "1");
        iterator.put("_v", qw.b);
        iterator.put("tid", this.c);
        if (this.b.j().d()) {
            object = new StringBuilder();
            for (Map.Entry entry : iterator.entrySet()) {
                if (object.length() != 0) {
                    object.append(", ");
                }
                object.append((String)entry.getKey());
                object.append("=");
                object.append((String)entry.getValue());
            }
            this.c("Dry run is enabled. GoogleAnalytics would have sent", object.toString());
            return;
        }
        HashMap<String, String> hashMap = new HashMap<String, String>();
        tf.a(hashMap, "uid", object22.c());
        qa qa2 = object.a(qa.class);
        if (qa2 != null) {
            tf.a(hashMap, "an", qa2.a());
            tf.a(hashMap, "aid", qa2.c());
            tf.a(hashMap, "av", qa2.b());
            tf.a(hashMap, "aiid", qa2.d());
        }
        ra ra2 = new ra(0L, object22.b(), this.c, TextUtils.isEmpty((CharSequence)object22.d()) ^ true, 0L, hashMap);
        iterator.put("_s", String.valueOf(this.n().a(ra2)));
        object = new sm(this.j(), (Map<String, String>)((Object)iterator), object.d(), true);
        this.n().a((sm)object);
    }
}

