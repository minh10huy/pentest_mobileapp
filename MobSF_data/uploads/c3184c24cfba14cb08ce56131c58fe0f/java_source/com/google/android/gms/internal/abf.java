/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.content.Context
 *  android.net.ConnectivityManager
 *  android.net.NetworkInfo
 *  android.os.Build
 *  android.os.Build$VERSION
 */
package com.google.android.gms.internal;

import android.content.Context;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.os.Build;
import com.google.android.gms.common.util.f;
import com.google.android.gms.internal.aab;
import com.google.android.gms.internal.aac;
import com.google.android.gms.internal.aai;
import com.google.android.gms.internal.aaw;
import com.google.android.gms.internal.aax;
import com.google.android.gms.internal.aaz;
import com.google.android.gms.internal.abb;
import com.google.android.gms.internal.abm;
import com.google.android.gms.internal.abw;
import com.google.android.gms.internal.abx;
import com.google.android.gms.internal.acc;
import com.google.android.gms.internal.adc;
import com.google.android.gms.internal.ade;
import com.google.android.gms.internal.adv;
import com.google.android.gms.internal.adz;
import com.google.android.gms.internal.aez;
import com.google.android.gms.internal.afk;
import com.google.android.gms.internal.afl;
import com.google.android.gms.internal.zr;
import com.google.android.gms.internal.zy;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLConnection;
import javax.net.ssl.HttpsURLConnection;
import javax.net.ssl.SSLSocketFactory;

public final class abf
extends adc {
    private final SSLSocketFactory a;

    public abf(acc object) {
        super((acc)object);
        object = Build.VERSION.SDK_INT < 19 ? new afl() : null;
        this.a = object;
    }

    static /* synthetic */ byte[] a(abf abf2, HttpURLConnection httpURLConnection) {
        return abf.a(httpURLConnection);
    }

    /*
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    private static byte[] a(HttpURLConnection arrby) {
        InputStream inputStream;
        void var0_3;
        block5 : {
            ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
            inputStream = arrby.getInputStream();
            try {
                int n2;
                arrby = new byte[1024];
                while ((n2 = inputStream.read(arrby)) > 0) {
                    byteArrayOutputStream.write(arrby, 0, n2);
                }
                arrby = byteArrayOutputStream.toByteArray();
                if (inputStream == null) return arrby;
            }
            catch (Throwable throwable) {}
            inputStream.close();
            return arrby;
            break block5;
            catch (Throwable throwable) {
                inputStream = null;
            }
        }
        if (inputStream == null) throw var0_3;
        inputStream.close();
        throw var0_3;
    }

    protected final HttpURLConnection a(URL object) {
        if ((object = object.openConnection()) instanceof HttpURLConnection) {
            if (this.a != null && object instanceof HttpsURLConnection) {
                ((HttpsURLConnection)object).setSSLSocketFactory(this.a);
            }
            object = (HttpURLConnection)object;
            object.setDefaultUseCaches(false);
            object.setConnectTimeout(60000);
            object.setReadTimeout(61000);
            object.setInstanceFollowRedirects(false);
            object.setDoInput(true);
            return object;
        }
        throw new IOException("Failed to obtain HTTP connection");
    }

    @Override
    protected final boolean w() {
        return false;
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    public final boolean y() {
        ConnectivityManager connectivityManager;
        this.Q();
        connectivityManager = (ConnectivityManager)this.l().getSystemService("connectivity");
        try {
            connectivityManager = connectivityManager.getActiveNetworkInfo();
        }
        catch (SecurityException securityException) {
            return false;
        }
        if (connectivityManager == null || !connectivityManager.isConnected()) return false;
        return true;
    }
}

