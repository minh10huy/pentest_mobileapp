/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.annotation.TargetApi
 *  android.content.Context
 *  android.graphics.SurfaceTexture
 *  android.media.MediaPlayer
 *  android.media.MediaPlayer$OnBufferingUpdateListener
 *  android.media.MediaPlayer$OnCompletionListener
 *  android.media.MediaPlayer$OnErrorListener
 *  android.media.MediaPlayer$OnInfoListener
 *  android.media.MediaPlayer$OnPreparedListener
 *  android.media.MediaPlayer$OnVideoSizeChangedListener
 *  android.net.Uri
 *  android.os.Build
 *  android.os.Build$VERSION
 *  android.os.Handler
 *  android.view.Surface
 *  android.view.TextureView
 *  android.view.TextureView$SurfaceTextureListener
 *  android.view.View
 *  android.view.View$MeasureSpec
 */
package com.google.android.gms.internal;

import android.annotation.TargetApi;
import android.content.Context;
import android.graphics.SurfaceTexture;
import android.media.MediaPlayer;
import android.net.Uri;
import android.os.Build;
import android.os.Handler;
import android.view.Surface;
import android.view.TextureView;
import android.view.View;
import com.google.android.gms.ads.internal.av;
import com.google.android.gms.internal.ak;
import com.google.android.gms.internal.bnv;
import com.google.android.gms.internal.he;
import com.google.android.gms.internal.hs;
import com.google.android.gms.internal.md;
import com.google.android.gms.internal.me;
import com.google.android.gms.internal.mf;
import com.google.android.gms.internal.mg;
import com.google.android.gms.internal.mh;
import com.google.android.gms.internal.mi;
import com.google.android.gms.internal.mj;
import com.google.android.gms.internal.mk;
import com.google.android.gms.internal.ml;
import com.google.android.gms.internal.mm;
import com.google.android.gms.internal.mu;
import com.google.android.gms.internal.mz;
import com.google.android.gms.internal.na;
import com.google.android.gms.internal.nc;
import com.google.android.gms.internal.ne;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

@ak
@TargetApi(value=14)
public final class mc
extends mm
implements MediaPlayer.OnBufferingUpdateListener,
MediaPlayer.OnCompletionListener,
MediaPlayer.OnErrorListener,
MediaPlayer.OnInfoListener,
MediaPlayer.OnPreparedListener,
MediaPlayer.OnVideoSizeChangedListener,
TextureView.SurfaceTextureListener {
    private static final Map<Integer, String> c = new HashMap<Integer, String>();
    private final nc d;
    private final boolean e;
    private int f = 0;
    private int g = 0;
    private MediaPlayer h;
    private Uri i;
    private int j;
    private int k;
    private int l;
    private int m;
    private int n;
    private mz o;
    private boolean p;
    private int q;
    private ml r;

    static {
        if (Build.VERSION.SDK_INT >= 17) {
            c.put(-1004, "MEDIA_ERROR_IO");
            c.put(-1007, "MEDIA_ERROR_MALFORMED");
            c.put(-1010, "MEDIA_ERROR_UNSUPPORTED");
            c.put(-110, "MEDIA_ERROR_TIMED_OUT");
            c.put(3, "MEDIA_INFO_VIDEO_RENDERING_START");
        }
        c.put(100, "MEDIA_ERROR_SERVER_DIED");
        c.put(1, "MEDIA_ERROR_UNKNOWN");
        c.put(1, "MEDIA_INFO_UNKNOWN");
        c.put(700, "MEDIA_INFO_VIDEO_TRACK_LAGGING");
        c.put(701, "MEDIA_INFO_BUFFERING_START");
        c.put(702, "MEDIA_INFO_BUFFERING_END");
        c.put(800, "MEDIA_INFO_BAD_INTERLEAVING");
        c.put(801, "MEDIA_INFO_NOT_SEEKABLE");
        c.put(802, "MEDIA_INFO_METADATA_UPDATE");
        if (Build.VERSION.SDK_INT >= 19) {
            c.put(901, "MEDIA_INFO_UNSUPPORTED_SUBTITLE");
            c.put(902, "MEDIA_INFO_SUBTITLE_TIMED_OUT");
        }
    }

    public mc(Context context, boolean bl2, boolean bl3, na na2, nc nc2) {
        super(context);
        this.setSurfaceTextureListener((TextureView.SurfaceTextureListener)this);
        this.d = nc2;
        this.p = bl2;
        this.e = bl3;
        this.d.a(this);
    }

    static /* synthetic */ ml a(mc mc2) {
        return mc2.r;
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    private final void a(float f2) {
        if (this.h == null) {
            he.e("AdMediaPlayerView setMediaPlayerVolume() called before onPrepared().");
            return;
        }
        try {
            this.h.setVolume(f2, f2);
            return;
        }
        catch (IllegalStateException illegalStateException) {
            return;
        }
    }

    private final void a(boolean bl2) {
        he.a("AdMediaPlayerView release");
        if (this.o != null) {
            this.o.b();
            this.o = null;
        }
        if (this.h != null) {
            this.h.reset();
            this.h.release();
            this.h = null;
            this.b(0);
            if (bl2) {
                this.g = 0;
                this.g = 0;
            }
        }
    }

    private final void b(int n2) {
        if (n2 == 3) {
            this.d.c();
            this.b.b();
        } else if (this.f == 3) {
            this.d.d();
            this.b.c();
        }
        this.f = n2;
    }

    private final void f() {
        he.a("AdMediaPlayerView init MediaPlayer");
        Object object = this.getSurfaceTexture();
        if (this.i != null) {
            Object object2;
            block7 : {
                if (object == null) {
                    return;
                }
                this.a(false);
                av.u();
                this.h = new MediaPlayer();
                this.h.setOnBufferingUpdateListener((MediaPlayer.OnBufferingUpdateListener)this);
                this.h.setOnCompletionListener((MediaPlayer.OnCompletionListener)this);
                this.h.setOnErrorListener((MediaPlayer.OnErrorListener)this);
                this.h.setOnInfoListener((MediaPlayer.OnInfoListener)this);
                this.h.setOnPreparedListener((MediaPlayer.OnPreparedListener)this);
                this.h.setOnVideoSizeChangedListener((MediaPlayer.OnVideoSizeChangedListener)this);
                this.l = 0;
                object2 = object;
                if (!this.p) break block7;
                this.o = new mz(this.getContext());
                this.o.a((SurfaceTexture)object, this.getWidth(), this.getHeight());
                this.o.start();
                object2 = this.o.c();
                if (object2 != null) break block7;
                this.o.b();
                this.o = null;
                object2 = object;
            }
            try {
                this.h.setDataSource(this.getContext(), this.i);
                av.v();
                object2 = new Surface(object2);
                this.h.setSurface((Surface)object2);
                this.h.setAudioStreamType(3);
                this.h.setScreenOnWhilePlaying(true);
                this.h.prepareAsync();
                this.b(1);
                return;
            }
            catch (IOException | IllegalArgumentException | IllegalStateException exception) {
                object = String.valueOf((Object)this.i);
                StringBuilder stringBuilder = new StringBuilder(String.valueOf(object).length() + 36);
                stringBuilder.append("Failed to initialize MediaPlayer at ");
                stringBuilder.append((String)object);
                he.c(stringBuilder.toString(), exception);
                this.onError(this.h, 1, 0);
            }
        }
    }

    private final void g() {
        if (!this.e) {
            return;
        }
        if (this.h() && this.h.getCurrentPosition() > 0 && this.g != 3) {
            he.a("AdMediaPlayerView nudging MediaPlayer");
            this.a(0.0f);
            this.h.start();
            int n2 = this.h.getCurrentPosition();
            long l2 = av.l().a();
            while (this.h() && this.h.getCurrentPosition() == n2 && av.l().a() - l2 <= 250L) {
            }
            this.h.pause();
            this.e();
        }
    }

    private final boolean h() {
        if (this.h != null && this.f != -1 && this.f != 0 && this.f != 1) {
            return true;
        }
        return false;
    }

    @Override
    public final String a() {
        String string2 = this.p ? " spherical" : "";
        if ((string2 = String.valueOf(string2)).length() != 0) {
            return "MediaPlayer".concat(string2);
        }
        return new String("MediaPlayer");
    }

    @Override
    public final void a(float f2, float f3) {
        if (this.o != null) {
            this.o.a(f2, f3);
        }
    }

    @Override
    public final void a(int n2) {
        StringBuilder stringBuilder = new StringBuilder(34);
        stringBuilder.append("AdMediaPlayerView seek ");
        stringBuilder.append(n2);
        he.a(stringBuilder.toString());
        if (this.h()) {
            this.h.seekTo(n2);
            this.q = 0;
            return;
        }
        this.q = n2;
    }

    @Override
    public final void a(ml ml2) {
        this.r = ml2;
    }

    @Override
    public final void b() {
        he.a("AdMediaPlayerView stop");
        if (this.h != null) {
            this.h.stop();
            this.h.release();
            this.h = null;
            this.b(0);
            this.g = 0;
        }
        this.d.b();
    }

    @Override
    public final void c() {
        he.a("AdMediaPlayerView play");
        if (this.h()) {
            this.h.start();
            this.b(3);
            this.a.a();
            hs.a.post((Runnable)new mj(this));
        }
        this.g = 3;
    }

    @Override
    public final void d() {
        he.a("AdMediaPlayerView pause");
        if (this.h() && this.h.isPlaying()) {
            this.h.pause();
            this.b(4);
            hs.a.post((Runnable)new mk(this));
        }
        this.g = 4;
    }

    @Override
    public final void e() {
        this.a(this.b.a());
    }

    @Override
    public final int getCurrentPosition() {
        if (this.h()) {
            return this.h.getCurrentPosition();
        }
        return 0;
    }

    @Override
    public final int getDuration() {
        if (this.h()) {
            return this.h.getDuration();
        }
        return -1;
    }

    @Override
    public final int getVideoHeight() {
        if (this.h != null) {
            return this.h.getVideoHeight();
        }
        return 0;
    }

    @Override
    public final int getVideoWidth() {
        if (this.h != null) {
            return this.h.getVideoWidth();
        }
        return 0;
    }

    public final void onBufferingUpdate(MediaPlayer mediaPlayer, int n2) {
        this.l = n2;
    }

    public final void onCompletion(MediaPlayer mediaPlayer) {
        he.a("AdMediaPlayerView completion");
        this.b(5);
        this.g = 5;
        hs.a.post((Runnable)new me(this));
    }

    public final boolean onError(MediaPlayer object, int n2, int n3) {
        object = c.get(n2);
        String string2 = c.get(n3);
        StringBuilder stringBuilder = new StringBuilder(String.valueOf(object).length() + 38 + String.valueOf(string2).length());
        stringBuilder.append("AdMediaPlayerView MediaPlayer error: ");
        stringBuilder.append((String)object);
        stringBuilder.append(":");
        stringBuilder.append(string2);
        he.e(stringBuilder.toString());
        this.b(-1);
        this.g = -1;
        hs.a.post((Runnable)new mf(this, (String)object, string2));
        return true;
    }

    public final boolean onInfo(MediaPlayer object, int n2, int n3) {
        object = c.get(n2);
        String string2 = c.get(n3);
        StringBuilder stringBuilder = new StringBuilder(String.valueOf(object).length() + 37 + String.valueOf(string2).length());
        stringBuilder.append("AdMediaPlayerView MediaPlayer info: ");
        stringBuilder.append((String)object);
        stringBuilder.append(":");
        stringBuilder.append(string2);
        he.a(stringBuilder.toString());
        return true;
    }

    /*
     * Enabled aggressive block sorting
     */
    protected final void onMeasure(int n2, int n3) {
        block14 : {
            int n4;
            int n5;
            block11 : {
                int n6;
                block15 : {
                    int n7;
                    int n8;
                    block17 : {
                        block16 : {
                            block12 : {
                                block13 : {
                                    n4 = mc.getDefaultSize((int)this.j, (int)n2);
                                    n5 = mc.getDefaultSize((int)this.k, (int)n3);
                                    if (this.j <= 0 || this.k <= 0 || this.o != null) break block11;
                                    n8 = View.MeasureSpec.getMode((int)n2);
                                    n6 = View.MeasureSpec.getSize((int)n2);
                                    n7 = View.MeasureSpec.getMode((int)n3);
                                    n5 = View.MeasureSpec.getSize((int)n3);
                                    if (n8 != 1073741824 || n7 != 1073741824) break block12;
                                    if (this.j * n5 >= this.k * n6) break block13;
                                    n2 = this.j * n5 / this.k;
                                    n3 = n5;
                                    break block14;
                                }
                                n2 = n6;
                                n3 = n5;
                                if (this.j * n5 <= this.k * n6) break block14;
                                break block15;
                            }
                            if (n8 != 1073741824) break block16;
                            n3 = this.k * n6 / this.j;
                            if (n7 == Integer.MIN_VALUE && n3 > n5) {
                                n2 = n6;
                                n3 = n5;
                            } else {
                                n2 = n6;
                            }
                            break block14;
                        }
                        if (n7 != 1073741824) break block17;
                        n2 = n4 = this.j * n5 / this.k;
                        n3 = n5;
                        if (n8 == Integer.MIN_VALUE) {
                            n2 = n4;
                            n3 = n5;
                            if (n4 > n6) {
                                n2 = n6;
                                n3 = n5;
                            }
                        }
                        break block14;
                    }
                    n4 = this.j;
                    n2 = this.k;
                    if (n7 == Integer.MIN_VALUE && n2 > n5) {
                        n4 = this.j * n5 / this.k;
                    } else {
                        n5 = n2;
                    }
                    n2 = n4;
                    n3 = n5;
                    if (n8 != Integer.MIN_VALUE) break block14;
                    n2 = n4;
                    n3 = n5;
                    if (n4 <= n6) break block14;
                }
                n3 = this.k * n6 / this.j;
                n2 = n6;
                break block14;
            }
            n2 = n4;
            n3 = n5;
        }
        this.setMeasuredDimension(n2, n3);
        if (this.o != null) {
            this.o.a(n2, n3);
        }
        if (Build.VERSION.SDK_INT == 16) {
            if (this.m > 0 && this.m != n2 || this.n > 0 && this.n != n3) {
                this.g();
            }
            this.m = n2;
            this.n = n3;
        }
    }

    public final void onPrepared(MediaPlayer object) {
        he.a("AdMediaPlayerView prepared");
        this.b(2);
        this.d.a();
        hs.a.post((Runnable)new md(this));
        this.j = object.getVideoWidth();
        this.k = object.getVideoHeight();
        if (this.q != 0) {
            this.a(this.q);
        }
        this.g();
        int n2 = this.j;
        int n3 = this.k;
        object = new StringBuilder(62);
        object.append("AdMediaPlayerView stream dimensions: ");
        object.append(n2);
        object.append(" x ");
        object.append(n3);
        he.d(object.toString());
        if (this.g == 3) {
            this.c();
        }
        this.e();
    }

    public final void onSurfaceTextureAvailable(SurfaceTexture surfaceTexture, int n2, int n3) {
        he.a("AdMediaPlayerView surface created");
        this.f();
        hs.a.post((Runnable)new mg(this));
    }

    public final boolean onSurfaceTextureDestroyed(SurfaceTexture surfaceTexture) {
        he.a("AdMediaPlayerView surface destroyed");
        if (this.h != null && this.q == 0) {
            this.q = this.h.getCurrentPosition();
        }
        if (this.o != null) {
            this.o.b();
        }
        hs.a.post((Runnable)new mi(this));
        this.a(true);
        return true;
    }

    public final void onSurfaceTextureSizeChanged(SurfaceTexture surfaceTexture, int n2, int n3) {
        he.a("AdMediaPlayerView surface changed");
        int n4 = this.g;
        boolean bl2 = false;
        n4 = n4 == 3 ? 1 : 0;
        boolean bl3 = bl2;
        if (this.j == n2) {
            bl3 = bl2;
            if (this.k == n3) {
                bl3 = true;
            }
        }
        if (this.h != null && n4 != 0 && bl3) {
            if (this.q != 0) {
                this.a(this.q);
            }
            this.c();
        }
        if (this.o != null) {
            this.o.a(n2, n3);
        }
        hs.a.post((Runnable)new mh(this, n2, n3));
    }

    public final void onSurfaceTextureUpdated(SurfaceTexture surfaceTexture) {
        this.d.b(this);
        this.a.a(surfaceTexture, this.r);
    }

    public final void onVideoSizeChanged(MediaPlayer mediaPlayer, int n2, int n3) {
        StringBuilder stringBuilder = new StringBuilder(57);
        stringBuilder.append("AdMediaPlayerView size changed: ");
        stringBuilder.append(n2);
        stringBuilder.append(" x ");
        stringBuilder.append(n3);
        he.a(stringBuilder.toString());
        this.j = mediaPlayer.getVideoWidth();
        this.k = mediaPlayer.getVideoHeight();
        if (this.j != 0 && this.k != 0) {
            this.requestLayout();
        }
    }

    @Override
    public final void setVideoPath(String string2) {
        bnv bnv2 = bnv.a((Uri)(string2 = Uri.parse((String)string2)));
        if (bnv2 != null) {
            string2 = Uri.parse((String)bnv2.a);
        }
        this.i = string2;
        this.q = 0;
        this.f();
        this.requestLayout();
        this.invalidate();
    }

    public final String toString() {
        String string2 = this.getClass().getName();
        String string3 = Integer.toHexString(this.hashCode());
        StringBuilder stringBuilder = new StringBuilder(String.valueOf(string2).length() + 1 + String.valueOf(string3).length());
        stringBuilder.append(string2);
        stringBuilder.append("@");
        stringBuilder.append(string3);
        return stringBuilder.toString();
    }
}

