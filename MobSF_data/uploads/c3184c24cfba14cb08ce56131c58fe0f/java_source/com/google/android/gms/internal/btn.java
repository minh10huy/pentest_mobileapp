/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.content.Context
 *  android.net.Uri
 *  android.net.Uri$Builder
 *  android.os.Environment
 *  android.text.TextUtils
 */
package com.google.android.gms.internal;

import android.content.Context;
import android.net.Uri;
import android.os.Environment;
import android.text.TextUtils;
import com.google.android.gms.ads.internal.av;
import com.google.android.gms.internal.ak;
import com.google.android.gms.internal.bqj;
import com.google.android.gms.internal.bsz;
import com.google.android.gms.internal.btk;
import com.google.android.gms.internal.bto;
import com.google.android.gms.internal.btr;
import com.google.android.gms.internal.btx;
import com.google.android.gms.internal.he;
import com.google.android.gms.internal.hs;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.atomic.AtomicBoolean;

@ak
public final class btn {
    private BlockingQueue<btx> a;
    private ExecutorService b;
    private LinkedHashMap<String, String> c = new LinkedHashMap();
    private Map<String, btr> d = new HashMap<String, btr>();
    private String e;
    private Context f;
    private String g;
    private AtomicBoolean h;
    private File i;

    public btn(Context object, String object22, String string2, Map<String, String> map) {
        void var3_6;
        void var4_7;
        this.f = object;
        this.g = object22;
        this.e = var3_6;
        this.h = new AtomicBoolean(false);
        object = this.h;
        bsz<Boolean> bsz2 = btk.L;
        object.set(bqj.f().a(bsz2));
        if (this.h.get() && (object = Environment.getExternalStorageDirectory()) != null) {
            this.i = new File((File)object, "sdk_csi_data.txt");
        }
        for (Map.Entry entry : var4_7.entrySet()) {
            this.c.put((String)entry.getKey(), (String)entry.getValue());
        }
        this.a = new ArrayBlockingQueue<btx>(30);
        this.b = Executors.newSingleThreadExecutor();
        this.b.execute(new bto(this));
        this.d.put("action", btr.b);
        this.d.put("ad_format", btr.b);
        this.d.put("e", btr.c);
    }

    /*
     * WARNING - Removed back jump from a try to a catch block - possible behaviour change.
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    private final void a() {
        do {
            ** try [egrp 0[TRYBLOCK] [0 : 0->18)] { 
lbl3: // 1 sources:
            var2_6 = this.a.take();
            var1_1 = var2_6.b();
            if (TextUtils.isEmpty((CharSequence)var1_1)) continue;
            var3_8 = this.a(this.c, var2_6.c());
            var2_6 = Uri.parse((String)this.e).buildUpon();
            for (Object var4_11 : var3_8.entrySet()) {
                var2_6.appendQueryParameter((String)var4_11.getKey(), (String)var4_11.getValue());
            }
            var2_6 = new StringBuilder(var2_6.build().toString());
            var2_6.append("&it=");
            var2_6.append((String)var1_1);
            var4_11 = var2_6.toString();
            if (!this.h.get()) ** GOTO lbl36
            var2_6 = this.i;
            if (var2_6 != null) {
                var3_8 = null;
                var1_1 = null;
                var2_6 = new FileOutputStream((File)var2_6, true);
                var2_6.write(var4_11.getBytes());
                var2_6.write(10);
                var2_6.close();
                catch (Throwable var3_9) {
                    var1_1 = var2_6;
                    var2_6 = var3_9;
                    break;
                }
                catch (IOException var3_10) {
                }
            } else {
                he.e("CsiReporter: File doesn't exists. Cannot write CSI data to file.");
                continue;
lbl36: // 1 sources:
                av.e();
                hs.b(this.f, this.g, (String)var4_11);
                continue;
lbl39: // 1 sources:
                catch (InterruptedException var1_5) {
                    he.c("CsiReporter:reporter interrupted", var1_5);
                    return;
                }
                catch (Throwable var2_7) {
                    break;
                }
                catch (IOException var1_2) {
                    var2_6 = var3_8;
                    var3_8 = var1_2;
                }
            }
            var1_1 = var2_6;
            {
                he.c("CsiReporter: Cannot write to file: sdk_csi_data.txt.", (Throwable)var3_8);
                if (var2_6 == null) continue;
            }
            try {
                var2_6.close();
            }
            catch (IOException var1_3) {
                he.c("CsiReporter: Cannot close file: sdk_csi_data.txt.", var1_3);
            }
        } while (true);
        if (var1_1 == null) throw var2_6;
        try {
            var1_1.close();
            throw var2_6;
        }
        catch (IOException var1_4) {
            he.c("CsiReporter: Cannot close file: sdk_csi_data.txt.", var1_4);
        }
        throw var2_6;
    }

    static /* synthetic */ void a(btn btn2) {
        btn2.a();
    }

    public final btr a(String object) {
        if ((object = this.d.get(object)) != null) {
            return object;
        }
        return btr.a;
    }

    final Map<String, String> a(Map<String, String> map, Map<String, String> object) {
        map = new LinkedHashMap<String, String>(map);
        if (object == null) {
            return map;
        }
        for (Map.Entry entry : object.entrySet()) {
            String string2 = (String)entry.getKey();
            String object2 = (String)entry.getValue();
            String string3 = map.get(string2);
            map.put(string2, this.a(string2).a(string3, object2));
        }
        return map;
    }

    public final void a(List<String> list) {
        if (list != null && !list.isEmpty()) {
            this.c.put("e", TextUtils.join((CharSequence)",", list));
        }
    }

    public final boolean a(btx btx2) {
        return this.a.offer(btx2);
    }
}

