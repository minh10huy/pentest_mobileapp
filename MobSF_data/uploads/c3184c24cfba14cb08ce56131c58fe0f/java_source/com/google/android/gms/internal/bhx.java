/*
 * Decompiled with CFR 0_132.
 */
package com.google.android.gms.internal;

import com.google.android.gms.internal.bfx;
import com.google.android.gms.internal.bgr;
import com.google.android.gms.internal.bgv;
import com.google.android.gms.internal.bhu;
import com.google.android.gms.internal.bit;
import com.google.android.gms.internal.biy;
import java.lang.reflect.Method;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.TreeSet;

final class bhx {
    static String a(bhu bhu2, String string2) {
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("# ");
        stringBuilder.append(string2);
        bhx.a(bhu2, stringBuilder, 0);
        return stringBuilder.toString();
    }

    private static final String a(String string2) {
        StringBuilder stringBuilder = new StringBuilder();
        for (int i2 = 0; i2 < string2.length(); ++i2) {
            char c2 = string2.charAt(i2);
            if (Character.isUpperCase(c2)) {
                stringBuilder.append("_");
            }
            stringBuilder.append(Character.toLowerCase(c2));
        }
        return stringBuilder.toString();
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Lifted jumps to return sites
     */
    private static void a(bhu var0, StringBuilder var1_1, int var2_2) {
        var8_3 = new HashMap<String, Method>();
        var9_4 = new HashMap<String, Method>();
        var6_5 = new TreeSet<E>();
        for (Method var10_9 : var0.getClass().getDeclaredMethods()) {
            var9_4.put(var10_9.getName(), var10_9);
            if (var10_9.getParameterTypes().length != 0) continue;
            var8_3.put(var10_9.getName(), var10_9);
            if (!var10_9.getName().startsWith("get")) continue;
            var6_5.add(var10_9.getName());
        }
        var10_10 = var6_5.iterator();
        while (var10_10.hasNext()) {
            block16 : {
                block10 : {
                    block15 : {
                        block14 : {
                            block13 : {
                                block12 : {
                                    block11 : {
                                        var11_12 = ((String)var10_10.next()).replaceFirst("get", "");
                                        if (var11_12.endsWith("List") && !var11_12.endsWith("OrBuilderList")) {
                                            var6_5 = String.valueOf(var11_12.substring(0, 1).toLowerCase());
                                            var7_6 = String.valueOf(var11_12.substring(1, var11_12.length() - 4));
                                            var6_5 = var7_6.length() != 0 ? var6_5.concat((String)var7_6) : new String((String)var6_5);
                                            var7_6 = String.valueOf(var11_12);
                                            var7_6 = var7_6.length() != 0 ? "get".concat((String)var7_6) : new String("get");
                                            if ((var7_6 = (Method)var8_3.get(var7_6)) != null && var7_6.getReturnType().equals(List.class)) {
                                                bhx.a(var1_1, var2_2, bhx.a((String)var6_5), bgv.a((Method)var7_6, var0, new Object[0]));
                                                continue;
                                            }
                                        }
                                        var6_5 = (var6_5 = String.valueOf(var11_12)).length() != 0 ? "set".concat((String)var6_5) : new String("set");
                                        if ((Method)var9_4.get(var6_5) == null) continue;
                                        if (var11_12.endsWith("Bytes")) {
                                            var6_5 = String.valueOf(var11_12.substring(0, var11_12.length() - 5));
                                            var6_5 = var6_5.length() != 0 ? "get".concat((String)var6_5) : new String("get");
                                            if (var8_3.containsKey(var6_5)) continue;
                                        }
                                        var6_5 = String.valueOf(var11_12.substring(0, 1).toLowerCase());
                                        var7_6 = String.valueOf(var11_12.substring(1));
                                        var6_5 = var7_6.length() != 0 ? var6_5.concat((String)var7_6) : new String((String)var6_5);
                                        var7_6 = String.valueOf(var11_12);
                                        var7_6 = var7_6.length() != 0 ? "get".concat((String)var7_6) : new String("get");
                                        var12_13 = (Method)var8_3.get(var7_6);
                                        var7_6 = String.valueOf(var11_12);
                                        var7_6 = var7_6.length() != 0 ? "has".concat((String)var7_6) : new String("has");
                                        var7_6 = (Method)var8_3.get(var7_6);
                                        if (var12_13 == null) continue;
                                        var11_12 = bgv.a(var12_13, var0, new Object[0]);
                                        if (var7_6 != null) break block10;
                                        if (!(var11_12 instanceof Boolean)) break block11;
                                        if (((Boolean)var11_12).booleanValue()) ** GOTO lbl-1000
                                        ** GOTO lbl-1000
                                    }
                                    if (!(var11_12 instanceof Integer)) break block12;
                                    if ((Integer)var11_12 != 0) ** GOTO lbl-1000
                                    ** GOTO lbl-1000
                                }
                                if (!(var11_12 instanceof Float)) break block13;
                                if (((Float)var11_12).floatValue() != 0.0f) ** GOTO lbl-1000
                                ** GOTO lbl-1000
                            }
                            if (!(var11_12 instanceof Double)) break block14;
                            if ((Double)var11_12 != 0.0) ** GOTO lbl-1000
                            ** GOTO lbl-1000
                        }
                        if (!(var11_12 instanceof String)) break block15;
                        var7_6 = "";
                        ** GOTO lbl63
                    }
                    if (var11_12 instanceof bfx) {
                        var7_6 = bfx.a;
lbl63: // 2 sources:
                        var5_11 = var11_12.equals(var7_6);
                    } else if (var11_12 instanceof bhu != false ? var11_12 == ((bhu)var11_12).n() : var11_12 instanceof Enum != false && ((Enum)var11_12).ordinal() == 0) lbl-1000: // 5 sources:
                    {
                        var5_11 = true;
                    } else lbl-1000: // 5 sources:
                    {
                        var5_11 = false;
                    }
                    var5_11 = !var5_11;
                    break block16;
                }
                var5_11 = (Boolean)bgv.a((Method)var7_6, var0, new Object[0]);
            }
            if (!var5_11) continue;
            bhx.a(var1_1, var2_2, bhx.a((String)var6_5), var11_12);
        }
        if (var0 instanceof bgv.d && (var6_5 = ((bgv.d)var0).d.b()).hasNext()) {
            ((Map.Entry)var6_5.next()).getKey();
            throw new NoSuchMethodError();
        }
        var0 = (bgv)var0;
        if (var0.b == null) return;
        var0.b.a(var1_1, var2_2);
    }

    static final void a(StringBuilder stringBuilder, int n2, String string2, Object iterator) {
        int n3;
        if (iterator instanceof List) {
            iterator = ((List)((Object)iterator)).iterator();
            while (iterator.hasNext()) {
                bhx.a(stringBuilder, n2, string2, iterator.next());
            }
            return;
        }
        stringBuilder.append('\n');
        int n4 = 0;
        for (n3 = 0; n3 < n2; ++n3) {
            stringBuilder.append(' ');
        }
        stringBuilder.append(string2);
        if (iterator instanceof String) {
            stringBuilder.append(": \"");
            stringBuilder.append(bit.a(bfx.a((String)((Object)iterator))));
            stringBuilder.append('\"');
            return;
        }
        if (iterator instanceof bfx) {
            stringBuilder.append(": \"");
            stringBuilder.append(bit.a((bfx)((Object)iterator)));
            stringBuilder.append('\"');
            return;
        }
        if (iterator instanceof bgv) {
            stringBuilder.append(" {");
            bhx.a((bgv)((Object)iterator), stringBuilder, n2 + 2);
            stringBuilder.append("\n");
            for (n3 = n4; n3 < n2; ++n3) {
                stringBuilder.append(' ');
            }
            stringBuilder.append("}");
            return;
        }
        stringBuilder.append(": ");
        stringBuilder.append(iterator.toString());
    }
}

