/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.app.Activity
 *  android.app.Fragment
 *  android.app.FragmentManager
 *  android.app.FragmentTransaction
 *  android.content.Intent
 *  android.os.Bundle
 *  android.os.Handler
 *  android.os.Looper
 */
package com.google.android.gms.common.api.internal;

import android.app.Activity;
import android.app.Fragment;
import android.app.FragmentManager;
import android.app.FragmentTransaction;
import android.content.Intent;
import android.os.Bundle;
import android.os.Handler;
import android.os.Looper;
import android.support.v4.g.a;
import com.google.android.gms.common.api.internal.LifecycleCallback;
import com.google.android.gms.common.api.internal.be;
import com.google.android.gms.common.api.internal.bg;
import java.io.FileDescriptor;
import java.io.PrintWriter;
import java.lang.ref.WeakReference;
import java.util.Collection;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import java.util.WeakHashMap;

public final class bf
extends Fragment
implements be {
    private static WeakHashMap<Activity, WeakReference<bf>> a = new WeakHashMap();
    private Map<String, LifecycleCallback> b = new a<String, LifecycleCallback>();
    private int c = 0;
    private Bundle d;

    static /* synthetic */ int a(bf bf2) {
        return bf2.c;
    }

    public static bf a(Activity activity) {
        WeakReference<bf> weakReference;
        block7 : {
            block6 : {
                bf bf2;
                weakReference = a.get((Object)activity);
                if (weakReference != null && (weakReference = weakReference.get()) != null) {
                    return weakReference;
                }
                try {
                    bf2 = (bf)activity.getFragmentManager().findFragmentByTag("LifecycleFragmentImpl");
                    if (bf2 == null) break block6;
                    weakReference = bf2;
                }
                catch (ClassCastException classCastException) {
                    throw new IllegalStateException("Fragment with tag LifecycleFragmentImpl is not a LifecycleFragmentImpl", classCastException);
                }
                if (!bf2.isRemoving()) break block7;
            }
            weakReference = new bf();
            activity.getFragmentManager().beginTransaction().add((Fragment)weakReference, "LifecycleFragmentImpl").commitAllowingStateLoss();
        }
        a.put(activity, new WeakReference<Object>(weakReference));
        return weakReference;
    }

    static /* synthetic */ Bundle b(bf bf2) {
        return bf2.d;
    }

    @Override
    public final <T extends LifecycleCallback> T a(String string2, Class<T> class_) {
        return (T)((LifecycleCallback)class_.cast(this.b.get(string2)));
    }

    @Override
    public final void a(String string2, LifecycleCallback object) {
        if (!this.b.containsKey(string2)) {
            this.b.put(string2, (LifecycleCallback)object);
            if (this.c > 0) {
                new Handler(Looper.getMainLooper()).post((Runnable)new bg(this, (LifecycleCallback)object, string2));
            }
            return;
        }
        object = new StringBuilder(String.valueOf(string2).length() + 59);
        object.append("LifecycleCallback with tag ");
        object.append(string2);
        object.append(" already added to this fragment.");
        throw new IllegalArgumentException(object.toString());
    }

    public final void dump(String string2, FileDescriptor fileDescriptor, PrintWriter printWriter, String[] arrstring) {
        super.dump(string2, fileDescriptor, printWriter, arrstring);
        Iterator<LifecycleCallback> iterator = this.b.values().iterator();
        while (iterator.hasNext()) {
            iterator.next().a(string2, fileDescriptor, printWriter, arrstring);
        }
    }

    @Override
    public final Activity l_() {
        return this.getActivity();
    }

    public final void onActivityResult(int n2, int n3, Intent intent) {
        super.onActivityResult(n2, n3, intent);
        Iterator<LifecycleCallback> iterator = this.b.values().iterator();
        while (iterator.hasNext()) {
            iterator.next().a(n2, n3, intent);
        }
    }

    public final void onCreate(Bundle bundle) {
        super.onCreate(bundle);
        this.c = 1;
        this.d = bundle;
        for (Map.Entry<String, LifecycleCallback> entry : this.b.entrySet()) {
            void object;
            LifecycleCallback lifecycleCallback = entry.getValue();
            if (bundle != null) {
                Bundle bundle2 = bundle.getBundle(entry.getKey());
            } else {
                Object var2_6 = null;
            }
            lifecycleCallback.a((Bundle)object);
        }
    }

    public final void onDestroy() {
        super.onDestroy();
        this.c = 5;
        Iterator<LifecycleCallback> iterator = this.b.values().iterator();
        while (iterator.hasNext()) {
            iterator.next().e();
        }
    }

    public final void onResume() {
        super.onResume();
        this.c = 3;
        Iterator<LifecycleCallback> iterator = this.b.values().iterator();
        while (iterator.hasNext()) {
            iterator.next().c();
        }
    }

    public final void onSaveInstanceState(Bundle bundle) {
        super.onSaveInstanceState(bundle);
        if (bundle == null) {
            return;
        }
        for (Map.Entry<String, LifecycleCallback> entry : this.b.entrySet()) {
            Bundle bundle2 = new Bundle();
            entry.getValue().b(bundle2);
            bundle.putBundle(entry.getKey(), bundle2);
        }
    }

    public final void onStart() {
        super.onStart();
        this.c = 2;
        Iterator<LifecycleCallback> iterator = this.b.values().iterator();
        while (iterator.hasNext()) {
            iterator.next().b();
        }
    }

    public final void onStop() {
        super.onStop();
        this.c = 4;
        Iterator<LifecycleCallback> iterator = this.b.values().iterator();
        while (iterator.hasNext()) {
            iterator.next().d();
        }
    }
}

