/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.text.TextUtils
 */
package com.google.android.gms.analytics;

import android.text.TextUtils;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TreeMap;

/*
 * Duplicate member names - consider using --renamedupmembers true
 */
public abstract class n<T extends n> {
    public static String a(Object object) {
        return n.a(object, 0);
    }

    private static String a(Object iterator, int n2) {
        if (n2 > 10) {
            return "ERROR: Recursive toString calls";
        }
        if (iterator == null) {
            return "";
        }
        if (iterator instanceof String) {
            if (TextUtils.isEmpty((CharSequence)((String)((Object)iterator)))) {
                return "";
            }
            return iterator.toString();
        }
        if (iterator instanceof Integer) {
            if ((Integer)((Object)iterator) == 0) {
                return "";
            }
            return iterator.toString();
        }
        if (iterator instanceof Long) {
            if ((Long)((Object)iterator) == 0L) {
                return "";
            }
            return iterator.toString();
        }
        if (iterator instanceof Double) {
            if ((Double)((Object)iterator) == 0.0) {
                return "";
            }
            return iterator.toString();
        }
        if (iterator instanceof Boolean) {
            if (!((Boolean)((Object)iterator)).booleanValue()) {
                return "";
            }
            return iterator.toString();
        }
        if (iterator instanceof List) {
            StringBuilder stringBuilder = new StringBuilder();
            if (n2 > 0) {
                stringBuilder.append("[");
            }
            iterator = (List)((Object)iterator);
            int n3 = stringBuilder.length();
            iterator = iterator.iterator();
            while (iterator.hasNext()) {
                Object object = iterator.next();
                if (stringBuilder.length() > n3) {
                    stringBuilder.append(", ");
                }
                stringBuilder.append(n.a(object, n2 + 1));
            }
            if (n2 > 0) {
                stringBuilder.append("]");
            }
            return stringBuilder.toString();
        }
        if (iterator instanceof Map) {
            StringBuilder stringBuilder = new StringBuilder();
            iterator = new TreeMap((Map)((Object)iterator)).entrySet().iterator();
            boolean bl2 = false;
            int n4 = 0;
            while (iterator.hasNext()) {
                Map.Entry entry = (Map.Entry)iterator.next();
                String string2 = n.a(entry.getValue(), n2 + 1);
                if (TextUtils.isEmpty((CharSequence)string2)) continue;
                boolean bl3 = bl2;
                int n5 = n4;
                if (n2 > 0) {
                    bl3 = bl2;
                    n5 = n4;
                    if (!bl2) {
                        stringBuilder.append("{");
                        n5 = stringBuilder.length();
                        bl3 = true;
                    }
                }
                if (stringBuilder.length() > n5) {
                    stringBuilder.append(", ");
                }
                stringBuilder.append((String)entry.getKey());
                stringBuilder.append('=');
                stringBuilder.append(string2);
                bl2 = bl3;
                n4 = n5;
            }
            if (bl2) {
                stringBuilder.append("}");
            }
            return stringBuilder.toString();
        }
        return iterator.toString();
    }

    public static String a(Map map) {
        return n.a(map, 1);
    }

    public abstract void a(T var1);
}

