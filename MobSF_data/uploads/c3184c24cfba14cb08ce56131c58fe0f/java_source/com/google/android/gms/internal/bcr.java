/*
 * Decompiled with CFR 0_132.
 */
package com.google.android.gms.internal;

import com.google.android.gms.internal.bce;
import com.google.android.gms.internal.bcf;
import com.google.android.gms.internal.bcg;
import com.google.android.gms.internal.bch;
import com.google.android.gms.internal.bcj;
import com.google.android.gms.internal.bcl;
import com.google.android.gms.internal.bcm;
import com.google.android.gms.internal.bcn;
import com.google.android.gms.internal.bco;
import com.google.android.gms.internal.bcp;
import com.google.android.gms.internal.bcq;
import com.google.android.gms.internal.bcs;
import com.google.android.gms.internal.bcv;
import com.google.android.gms.internal.bcw;
import com.google.android.gms.internal.bcx;
import com.google.android.gms.internal.bcy;
import com.google.android.gms.internal.bcz;
import com.google.android.gms.internal.bda;
import com.google.android.gms.internal.bdb;
import com.google.android.gms.internal.bdc;
import com.google.android.gms.internal.bdd;
import com.google.android.gms.internal.bde;
import com.google.android.gms.internal.bdf;
import com.google.android.gms.internal.bdg;
import com.google.android.gms.internal.bdh;
import com.google.android.gms.internal.bdi;
import com.google.android.gms.internal.bdt;
import com.google.android.gms.internal.bdw;
import com.google.android.gms.internal.beh;
import com.google.android.gms.internal.bei;
import com.google.android.gms.internal.bfe;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.TimeUnit;

public final class bcr
implements bcg,
bcp {
    private static long a;
    private long A;
    private boolean B;
    private final bcq b;
    private final bcn c;
    private String d;
    private HashSet<String> e = new HashSet();
    private boolean f = true;
    private long g;
    private bcf h;
    private bdc i = bdc.a;
    private long j = 0L;
    private long k = 0L;
    private Map<Long, bdb> l;
    private List<bde> m;
    private Map<Long, bdg> n;
    private Map<bdd, bdf> o;
    private String p;
    private boolean q;
    private final bcl r;
    private final bcj s;
    private final ScheduledExecutorService t;
    private final beh u;
    private final bdt v;
    private String w;
    private long x = 0L;
    private int y = 0;
    private ScheduledFuture<?> z = null;

    public bcr(bcl object, bcn object2, bcq bcq2) {
        this.b = bcq2;
        this.r = object;
        this.t = object.c();
        this.s = object.b();
        this.c = object2;
        this.o = new HashMap<bdd, bdf>();
        this.l = new HashMap<Long, bdb>();
        this.n = new HashMap<Long, bdg>();
        this.m = new ArrayList<bde>();
        this.v = new bdw(this.t, object.a(), "ConnectionRetryHelper").a(1000L).a(1.3).b(30000L).b(0.7).a();
        long l2 = a;
        a = 1L + l2;
        object = object.a();
        object2 = new StringBuilder(23);
        object2.append("pc_");
        object2.append(l2);
        this.u = new beh((bei)object, "PersistentConnection", object2.toString());
        this.w = null;
        this.k();
    }

    static /* synthetic */ int a(bcr bcr2, int n2) {
        bcr2.y = 0;
        return 0;
    }

    static /* synthetic */ bdc a(bcr bcr2, bdc bdc2) {
        bcr2.i = bdc2;
        return bdc2;
    }

    static /* synthetic */ bdf a(bcr bcr2, bdd bdd2) {
        return bcr2.a(bdd2);
    }

    private final bdf a(bdd object) {
        Object object2;
        CharSequence charSequence;
        if (this.u.a()) {
            object2 = this.u;
            charSequence = String.valueOf(object);
            StringBuilder stringBuilder = new StringBuilder(String.valueOf(charSequence).length() + 15);
            stringBuilder.append("removing query ");
            stringBuilder.append((String)charSequence);
            object2.a(stringBuilder.toString(), null, new Object[0]);
        }
        if (!this.o.containsKey(object)) {
            if (this.u.a()) {
                object2 = this.u;
                object = String.valueOf(object);
                charSequence = new StringBuilder(String.valueOf(object).length() + 64);
                charSequence.append("Trying to remove listener for QuerySpec ");
                charSequence.append((String)object);
                charSequence.append(" but no listener exists.");
                object2.a(charSequence.toString(), null, new Object[0]);
            }
            return null;
        }
        object2 = this.o.get(object);
        this.o.remove(object);
        this.k();
        return object2;
    }

    static /* synthetic */ beh a(bcr bcr2) {
        return bcr2.u;
    }

    static /* synthetic */ String a(bcr bcr2, String string2) {
        bcr2.p = null;
        return null;
    }

    static /* synthetic */ ScheduledFuture a(bcr bcr2, ScheduledFuture scheduledFuture) {
        bcr2.z = null;
        return null;
    }

    private final void a(long l2) {
        bdg bdg2 = this.n.get(l2);
        bdi bdi2 = bdg2.c();
        String string2 = bdg2.a();
        bdg2.d();
        this.a(string2, bdg2.b(), new bcx(this, string2, l2, bdg2, bdi2));
    }

    static /* synthetic */ void a(bcr bcr2, List list, bdd bdd2) {
        bcr2.a((List<String>)list, bdd2);
    }

    private final void a(bdf bdf2) {
        HashMap<String, Object> hashMap = new HashMap<String, Object>();
        hashMap.put("p", bcm.a(bdd.a(bdf2.a())));
        Object object = bdf2.b();
        if (object != null) {
            hashMap.put("q", bdd.b(bdf.a(bdf2)));
            hashMap.put("t", object);
        }
        object = bdf2.c();
        hashMap.put("h", object.a());
        if (object.b()) {
            object = object.c();
            ArrayList<String> arrayList = new ArrayList<String>();
            Object object2 = object.a().iterator();
            while (object2.hasNext()) {
                arrayList.add(bcm.a(object2.next()));
            }
            object2 = new HashMap();
            object2.put("hs", object.b());
            object2.put("ps", arrayList);
            hashMap.put("ch", object2);
        }
        this.a("q", hashMap, new bcy(this, bdf2));
    }

    private final void a(String string2, List<String> list, Object object, bdi bdi2) {
        HashMap<String, Object> hashMap = new HashMap<String, Object>();
        hashMap.put("p", bcm.a(list));
        hashMap.put("d", object);
        this.a(string2, hashMap, new bcv(this, bdi2));
    }

    private final void a(String string2, List<String> list, Object object, String string3, bdi bdi2) {
        HashMap<String, Object> hashMap = new HashMap<String, Object>();
        hashMap.put("p", bcm.a(list));
        hashMap.put("d", object);
        if (string3 != null) {
            hashMap.put("h", string3);
        }
        long l2 = this.j;
        this.j = 1L + l2;
        this.n.put(l2, new bdg(string2, hashMap, bdi2, null));
        if (this.f()) {
            this.a(l2);
        }
        this.A = System.currentTimeMillis();
        this.k();
    }

    private final void a(String string2, Map<String, Object> map, bdb bdb2) {
        this.a(string2, false, map, bdb2);
    }

    private final void a(String string2, boolean bl2, Map<String, Object> map, bdb bdb2) {
        long l2 = this.k;
        this.k = 1L + l2;
        HashMap<String, Object> hashMap = new HashMap<String, Object>();
        hashMap.put("r", l2);
        hashMap.put("a", string2);
        hashMap.put("b", map);
        this.h.a(hashMap, bl2);
        this.l.put(l2, bdb2);
    }

    private final void a(List<String> arrayList) {
        int n2;
        Object object2;
        Object object;
        boolean bl2 = this.u.a();
        int n3 = 0;
        if (bl2) {
            object2 = this.u;
            String string2 = String.valueOf(arrayList);
            object = new StringBuilder(String.valueOf(string2).length() + 29);
            object.append("removing all listens at path ");
            object.append(string2);
            object2.a(object.toString(), null, new Object[0]);
        }
        object2 = new ArrayList();
        for (Map.Entry entry : this.o.entrySet()) {
            object = (bdd)entry.getKey();
            bdf object3 = (bdf)entry.getValue();
            if (!bdd.a((bdd)object).equals(arrayList)) continue;
            object2.add(object3);
        }
        arrayList = (ArrayList)object2;
        int n4 = arrayList.size();
        for (n2 = 0; n2 < n4; ++n2) {
            object2 = arrayList.get(n2);
            object2 = (bdf)object2;
            this.o.remove(object2.a());
        }
        this.k();
        n4 = arrayList.size();
        for (n2 = n3; n2 < n4; ++n2) {
            object2 = arrayList.get(n2);
            bdf.b((bdf)object2).a("permission_denied", null);
        }
    }

    private final void a(List<String> object, bdd object2) {
        if (object.contains("no_index")) {
            object = String.valueOf(bdd.b((bdd)object2).get("i"));
            Object object3 = new StringBuilder(String.valueOf(object).length() + 14);
            object3.append("\".indexOn\": \"");
            object3.append((String)object);
            object3.append('\"');
            object = object3.toString();
            object3 = this.u;
            object2 = bcm.a(bdd.a((bdd)object2));
            StringBuilder stringBuilder = new StringBuilder(String.valueOf(object).length() + 175 + String.valueOf(object2).length());
            stringBuilder.append("Using an unspecified index. Your data will be downloaded and filtered on the client. Consider adding '");
            stringBuilder.append((String)object);
            stringBuilder.append("' at ");
            stringBuilder.append((String)object2);
            stringBuilder.append(" to your security and Firebase Database rules for better performance");
            object3.b(stringBuilder.toString(), null);
        }
    }

    /*
     * Enabled aggressive block sorting
     */
    private final void a(boolean bl2) {
        bcm.a(this.e(), "Must be connected to send auth, but was: %s", new Object[]{this.i});
        boolean bl3 = this.p != null;
        bcm.a(bl3, "Auth token must be set to authenticate!", new Object[0]);
        bcw bcw2 = new bcw(this, bl2);
        HashMap<String, Object> hashMap = new HashMap<String, Object>();
        Object object = bfe.a(this.p);
        if (object != null) {
            hashMap.put("cred", object.a());
            if (object.b() != null) {
                hashMap.put("authvar", object.b());
            }
            object = "gauth";
        } else {
            hashMap.put("cred", this.p);
            object = "auth";
        }
        this.a((String)object, true, hashMap, bcw2);
    }

    static /* synthetic */ boolean a(bcr bcr2, boolean bl2) {
        bcr2.q = true;
        return true;
    }

    static /* synthetic */ bdc b(bcr bcr2) {
        return bcr2.i;
    }

    static /* synthetic */ long c(bcr bcr2) {
        long l2 = bcr2.x;
        bcr2.x = 1L + l2;
        return l2;
    }

    static /* synthetic */ long d(bcr bcr2) {
        return bcr2.x;
    }

    static /* synthetic */ void e(bcr bcr2) {
        bcr2.h();
    }

    private final boolean e() {
        if (this.i != bdc.d && this.i != bdc.e) {
            return false;
        }
        return true;
    }

    static /* synthetic */ bcj f(bcr bcr2) {
        return bcr2.s;
    }

    private final boolean f() {
        if (this.i == bdc.e) {
            return true;
        }
        return false;
    }

    static /* synthetic */ bcq g(bcr bcr2) {
        return bcr2.b;
    }

    private final boolean g() {
        if (this.e.size() == 0) {
            return true;
        }
        return false;
    }

    private final void h() {
        if (this.g()) {
            boolean bl2 = this.i == bdc.a;
            bcm.a(bl2, "Not in disconnected state: %s", new Object[]{this.i});
            bl2 = this.q;
            this.u.a("Scheduling connection attempt", null, new Object[0]);
            this.q = false;
            this.v.a(new bcs(this, bl2));
        }
    }

    static /* synthetic */ void h(bcr bcr2) {
        bcr2.j();
    }

    static /* synthetic */ bcf i(bcr bcr2) {
        return bcr2.h;
    }

    private final void i() {
        ArrayList<bdg> arrayList = new ArrayList<bdg>();
        Iterator<Map.Entry<Long, bdg>> iterator = this.n.entrySet().iterator();
        while (iterator.hasNext()) {
            bdg bdg2 = iterator.next().getValue();
            if (!bdg2.b().containsKey("h") || !bdg2.e()) continue;
            arrayList.add(bdg2);
            iterator.remove();
        }
        int n2 = arrayList.size();
        for (int i2 = 0; i2 < n2; ++i2) {
            iterator = arrayList.get(i2);
            ((bdg)((Object)iterator)).c().a("disconnected", null);
        }
    }

    static /* synthetic */ int j(bcr bcr2) {
        int n2 = bcr2.y;
        bcr2.y = n2 + 1;
        return n2;
    }

    private final void j() {
        Object object = this.i;
        bdc object22 = bdc.e;
        int n2 = 0;
        boolean bl2 = object == object22;
        bcm.a(bl2, "Should be connected if we're restoring state, but we are: %s", new Object[]{this.i});
        if (this.u.a()) {
            this.u.a("Restoring outstanding listens", null, new Object[0]);
        }
        for (bdf bdf2 : this.o.values()) {
            if (this.u.a()) {
                beh beh2 = this.u;
                String string2 = String.valueOf(bdf2.a());
                StringBuilder stringBuilder = new StringBuilder(String.valueOf(string2).length() + 17);
                stringBuilder.append("Restoring listen ");
                stringBuilder.append(string2);
                beh2.a(stringBuilder.toString(), null, new Object[0]);
            }
            this.a(bdf2);
        }
        if (this.u.a()) {
            this.u.a("Restoring writes.", null, new Object[0]);
        }
        object = new ArrayList<Long>(this.n.keySet());
        Collections.sort(object);
        object = (ArrayList)object;
        int n3 = object.size();
        while (n2 < n3) {
            Object e2 = object.get(n2);
            ++n2;
            this.a((Long)e2);
        }
        for (bde bde2 : this.m) {
            this.a(bde2.a(), bde2.b(), bde2.c(), bde2.d());
        }
        this.m.clear();
    }

    static /* synthetic */ int k(bcr bcr2) {
        return bcr2.y;
    }

    private final void k() {
        if (this.l()) {
            if (this.z != null) {
                this.z.cancel(false);
            }
            this.z = this.t.schedule(new bda(this), 60000L, TimeUnit.MILLISECONDS);
            return;
        }
        if (this.f("connection_idle")) {
            bcm.a(this.l() ^ true, "", new Object[0]);
            this.e("connection_idle");
        }
    }

    static /* synthetic */ bdt l(bcr bcr2) {
        return bcr2.v;
    }

    private final boolean l() {
        if (this.o.isEmpty() && this.l.isEmpty() && !this.B && this.n.isEmpty()) {
            return true;
        }
        return false;
    }

    static /* synthetic */ Map m(bcr bcr2) {
        return bcr2.n;
    }

    private final boolean m() {
        long l2 = System.currentTimeMillis();
        if (this.l() && l2 > this.A + 60000L) {
            return true;
        }
        return false;
    }

    static /* synthetic */ void n(bcr bcr2) {
        bcr2.k();
    }

    static /* synthetic */ Map o(bcr bcr2) {
        return bcr2.o;
    }

    static /* synthetic */ boolean p(bcr bcr2) {
        return bcr2.m();
    }

    @Override
    public final void a() {
        this.h();
    }

    @Override
    public final void a(long l2, String string2) {
        if (this.u.a()) {
            this.u.a("onReady", null, new Object[0]);
        }
        this.g = System.currentTimeMillis();
        if (this.u.a()) {
            this.u.a("handling timestamp", null, new Object[0]);
        }
        long l3 = System.currentTimeMillis();
        Object object = new HashMap<String, Object>();
        object.put("serverTimeOffset", l2 - l3);
        this.b.a((Map<String, Object>)object);
        if (this.f) {
            HashMap<Object, Integer> hashMap = new HashMap<Object, Integer>();
            if (this.r.d()) {
                hashMap.put("persistence.android.enabled", 1);
            }
            object = (object = String.valueOf(this.r.e().replace('.', '-'))).length() != 0 ? "sdk.android.".concat((String)object) : new String("sdk.android.");
            hashMap.put(object, 1);
            if (this.u.a()) {
                this.u.a("Sending first connection stats", null, new Object[0]);
            }
            if (!hashMap.isEmpty()) {
                object = new HashMap<String, Object>();
                object.put("c", hashMap);
                this.a("s", (Map<String, Object>)object, new bcz(this));
            } else if (this.u.a()) {
                this.u.a("Not sending stats because stats are empty", null, new Object[0]);
            }
        }
        if (this.u.a()) {
            this.u.a("calling restore state", null, new Object[0]);
        }
        boolean bl2 = this.i == bdc.c;
        bcm.a(bl2, "Wanted to restore auth, but was in wrong state: %s", new Object[]{this.i});
        if (this.p == null) {
            if (this.u.a()) {
                this.u.a("Not restoring auth because token is null.", null, new Object[0]);
            }
            this.i = bdc.e;
            this.j();
        } else {
            if (this.u.a()) {
                this.u.a("Restoring auth.", null, new Object[0]);
            }
            this.i = bdc.d;
            this.a(true);
        }
        this.f = false;
        this.w = string2;
        this.b.a();
    }

    @Override
    public final void a(bch bch2) {
        boolean bl2 = this.u.a();
        boolean bl3 = false;
        if (bl2) {
            beh beh2 = this.u;
            String string2 = String.valueOf(bch2.name());
            string2 = string2.length() != 0 ? "Got on disconnect due to ".concat(string2) : new String("Got on disconnect due to ");
            beh2.a(string2, null, new Object[0]);
        }
        this.i = bdc.a;
        this.h = null;
        this.B = false;
        this.l.clear();
        this.i();
        if (this.g()) {
            long l2 = System.currentTimeMillis();
            long l3 = this.g;
            boolean bl4 = bl3;
            if (this.g > 0L) {
                bl4 = bl3;
                if (l2 - l3 > 30000L) {
                    bl4 = true;
                }
            }
            if (bch2 == bch.a || bl4) {
                this.v.a();
            }
            this.h();
        }
        this.g = 0L;
        this.b.b();
    }

    @Override
    public final void a(String string2) {
        this.d = string2;
    }

    @Override
    public final void a(List<String> list, bdi bdi2) {
        if (this.f()) {
            this.a("oc", list, null, bdi2);
        } else {
            this.m.add(new bde("oc", list, null, bdi2, null));
        }
        this.k();
    }

    @Override
    public final void a(List<String> list, Object object, bdi bdi2) {
        this.a("p", list, object, null, bdi2);
    }

    @Override
    public final void a(List<String> list, Object object, String string2, bdi bdi2) {
        this.a("p", list, object, string2, bdi2);
    }

    @Override
    public final void a(List<String> object, Map<String, Object> hashMap) {
        Object object2;
        object = new bdd((List<String>)object, (Map<String, Object>)hashMap);
        if (this.u.a()) {
            hashMap = this.u;
            object2 = String.valueOf(object);
            StringBuilder stringBuilder = new StringBuilder(String.valueOf(object2).length() + 15);
            stringBuilder.append("unlistening on ");
            stringBuilder.append((String)object2);
            hashMap.a(stringBuilder.toString(), null, new Object[0]);
        }
        if ((object = this.a((bdd)object)) != null && this.e()) {
            hashMap = new HashMap<String, Object>();
            hashMap.put("p", bcm.a(bdd.a(bdf.a((bdf)object))));
            object2 = object.b();
            if (object2 != null) {
                hashMap.put("q", bdd.b(object.a()));
                hashMap.put("t", object2);
            }
            this.a("n", hashMap, null);
        }
        this.k();
    }

    @Override
    public final void a(List<String> object, Map<String, Object> object2, bco bco2, Long l2, bdi bdi2) {
        String string2;
        StringBuilder stringBuilder;
        object = new bdd((List<String>)object, (Map<String, Object>)object2);
        if (this.u.a()) {
            object2 = this.u;
            string2 = String.valueOf(object);
            stringBuilder = new StringBuilder(String.valueOf(string2).length() + 13);
            stringBuilder.append("Listening on ");
            stringBuilder.append(string2);
            object2.a(stringBuilder.toString(), null, new Object[0]);
        }
        bcm.a(this.o.containsKey(object) ^ true, "listen() called twice for same QuerySpec.", new Object[0]);
        if (this.u.a()) {
            object2 = this.u;
            string2 = String.valueOf(object);
            stringBuilder = new StringBuilder(String.valueOf(string2).length() + 21);
            stringBuilder.append("Adding listen query: ");
            stringBuilder.append(string2);
            object2.a(stringBuilder.toString(), null, new Object[0]);
        }
        object2 = new bdf(bdi2, (bdd)object, l2, bco2, null);
        this.o.put((bdd)object, (bdf)object2);
        if (this.e()) {
            this.a((bdf)object2);
        }
        this.k();
    }

    @Override
    public final void a(List<String> list, Map<String, Object> map, bdi bdi2) {
        this.a("m", list, map, null, bdi2);
    }

    @Override
    public final void a(Map<String, Object> object) {
        if (object.containsKey("r")) {
            long l2 = ((Integer)object.get("r")).intValue();
            bdb bdb2 = this.l.remove(l2);
            if (bdb2 != null) {
                bdb2.a((Map)object.get("b"));
            }
            return;
        }
        if (!object.containsKey("error")) {
            if (object.containsKey("a")) {
                Serializable serializable;
                Object object2;
                Object object3;
                List<String> list = (String)object.get("a");
                object = (Map)object.get("b");
                if (this.u.a()) {
                    object3 = this.u;
                    object2 = String.valueOf(object);
                    serializable = new StringBuilder(String.valueOf(list).length() + 22 + String.valueOf(object2).length());
                    serializable.append("handleServerMessage: ");
                    serializable.append((String)((Object)list));
                    serializable.append(" ");
                    serializable.append((String)object2);
                    object3.a(serializable.toString(), null, new Object[0]);
                }
                if (!list.equals((Object)"d") && !list.equals((Object)"m")) {
                    if (list.equals((Object)"rm")) {
                        object3 = (String)object.get("p");
                        object2 = bcm.a((String)object3);
                        list = object.get("d");
                        serializable = bcm.a(object.get("t"));
                        object = list;
                        ArrayList<bdh> arrayList = new ArrayList<bdh>();
                        Iterator iterator = object.iterator();
                        while (iterator.hasNext()) {
                            Map map = (Map)iterator.next();
                            object = (String)map.get("s");
                            list = (String)map.get("e");
                            object = object != null ? bcm.a((String)object) : null;
                            list = list != null ? bcm.a((String)((Object)list)) : null;
                            arrayList.add(new bdh((List<String>)object, list, map.get("m")));
                        }
                        if (arrayList.isEmpty()) {
                            if (this.u.a()) {
                                list = this.u;
                                object = String.valueOf(object3);
                                object = object.length() != 0 ? "Ignoring empty range merge for path ".concat((String)object) : new String("Ignoring empty range merge for path ");
                                list.a((String)object, null, new Object[0]);
                                return;
                            }
                        } else {
                            this.b.a((List<String>)object2, arrayList, (Long)serializable);
                        }
                        return;
                    }
                    if (list.equals((Object)"c")) {
                        this.a(bcm.a((String)object.get("p")));
                        return;
                    }
                    if (list.equals((Object)"ac")) {
                        list = (String)object.get("s");
                        object = (String)object.get("d");
                        object3 = this.u;
                        object2 = new StringBuilder(String.valueOf(list).length() + 23 + String.valueOf(object).length());
                        object2.append("Auth token revoked: ");
                        object2.append((String)((Object)list));
                        object2.append(" (");
                        object2.append((String)object);
                        object2.append(")");
                        object3.a(object2.toString(), null, new Object[0]);
                        this.p = null;
                        this.q = true;
                        this.b.a(false);
                        this.h.b();
                        return;
                    }
                    if (list.equals((Object)"sd")) {
                        this.u.a((String)object.get("msg"));
                        return;
                    }
                    if (this.u.a()) {
                        object3 = this.u;
                        object = String.valueOf(list);
                        object = object.length() != 0 ? "Unrecognized action from server: ".concat((String)object) : new String("Unrecognized action from server: ");
                        object3.a((String)object, null, new Object[0]);
                    }
                    return;
                }
                boolean bl2 = list.equals((Object)"m");
                object3 = (String)object.get("p");
                list = object.get("d");
                object = bcm.a(object.get("t"));
                if (bl2 && list instanceof Map && ((Map)((Object)list)).size() == 0) {
                    if (this.u.a()) {
                        list = this.u;
                        object = String.valueOf(object3);
                        object = object.length() != 0 ? "ignoring empty merge for path ".concat((String)object) : new String("ignoring empty merge for path ");
                        list.a((String)object, null, new Object[0]);
                        return;
                    }
                } else {
                    object3 = bcm.a((String)object3);
                    this.b.a((List<String>)object3, list, bl2, (Long)object);
                }
                return;
            }
            if (this.u.a()) {
                beh beh2 = this.u;
                object = String.valueOf(object);
                StringBuilder stringBuilder = new StringBuilder(String.valueOf(object).length() + 26);
                stringBuilder.append("Ignoring unknown message: ");
                stringBuilder.append((String)object);
                beh2.a(stringBuilder.toString(), null, new Object[0]);
            }
        }
    }

    @Override
    public final void b() {
        this.d("shutdown");
    }

    @Override
    public final void b(String string2) {
        if (this.u.a()) {
            beh beh2 = this.u;
            string2 = (string2 = String.valueOf(string2)).length() != 0 ? "Firebase Database connection was forcefully killed by the server. Will not attempt reconnect. Reason: ".concat(string2) : new String("Firebase Database connection was forcefully killed by the server. Will not attempt reconnect. Reason: ");
            beh2.a(string2, null, new Object[0]);
        }
        this.d("server_kill");
    }

    @Override
    public final void b(List<String> list, Object object, bdi bdi2) {
        this.B = true;
        if (this.f()) {
            this.a("o", list, object, bdi2);
        } else {
            this.m.add(new bde("o", list, object, bdi2, null));
        }
        this.k();
    }

    @Override
    public final void b(List<String> list, Map<String, Object> map, bdi bdi2) {
        this.B = true;
        if (this.f()) {
            this.a("om", list, map, bdi2);
        } else {
            this.m.add(new bde("om", list, map, bdi2, null));
        }
        this.k();
    }

    @Override
    public final void c() {
        this.u.a("Auth token refresh requested", null, new Object[0]);
        this.d("token_refresh");
        this.e("token_refresh");
    }

    @Override
    public final void c(String string2) {
        this.u.a("Auth token refreshed.", null, new Object[0]);
        this.p = string2;
        if (this.e()) {
            if (string2 != null) {
                this.a(false);
                return;
            }
            bcm.a(this.e(), "Must be connected to send unauth.", new Object[0]);
            boolean bl2 = this.p == null;
            bcm.a(bl2, "Auth token must not be set.", new Object[0]);
            this.a("unauth", Collections.<String, Object>emptyMap(), null);
        }
    }

    @Override
    public final void d() {
        for (bdg object : this.n.values()) {
            if (bdg.a(object) == null) continue;
            bdg.a(object).a("write_canceled", null);
        }
        for (bde bde2 : this.m) {
            if (bde.a(bde2) == null) continue;
            bde.a(bde2).a("write_canceled", null);
        }
        this.n.clear();
        this.m.clear();
        if (!this.e()) {
            this.B = false;
        }
        this.k();
    }

    @Override
    public final void d(String string2) {
        if (this.u.a()) {
            beh beh2 = this.u;
            String string3 = String.valueOf(string2);
            string3 = string3.length() != 0 ? "Connection interrupted for: ".concat(string3) : new String("Connection interrupted for: ");
            beh2.a(string3, null, new Object[0]);
        }
        this.e.add(string2);
        if (this.h != null) {
            this.h.b();
            this.h = null;
        } else {
            this.v.c();
            this.i = bdc.a;
        }
        this.v.a();
    }

    @Override
    public final void e(String string2) {
        if (this.u.a()) {
            beh beh2 = this.u;
            String string3 = String.valueOf(string2);
            string3 = string3.length() != 0 ? "Connection no longer interrupted for: ".concat(string3) : new String("Connection no longer interrupted for: ");
            beh2.a(string3, null, new Object[0]);
        }
        this.e.remove(string2);
        if (this.g() && this.i == bdc.a) {
            this.h();
        }
    }

    @Override
    public final boolean f(String string2) {
        return this.e.contains(string2);
    }

    public final void g(String string2) {
        boolean bl2 = this.i == bdc.b;
        bcm.a(bl2, "Trying to open network connection while in the wrong state: %s", new Object[]{this.i});
        if (string2 == null) {
            this.b.a(false);
        }
        this.p = string2;
        this.i = bdc.c;
        this.h = new bcf(this.r, this.c, this.d, this, this.w);
        this.h.a();
    }
}

