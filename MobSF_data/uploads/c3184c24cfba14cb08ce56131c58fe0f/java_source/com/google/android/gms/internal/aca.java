/*
 * Decompiled with CFR 0_132.
 */
package com.google.android.gms.internal;

import com.google.android.gms.common.internal.ah;
import com.google.android.gms.internal.abb;
import com.google.android.gms.internal.abd;
import com.google.android.gms.internal.abx;
import com.google.android.gms.internal.aby;
import java.util.concurrent.Callable;
import java.util.concurrent.FutureTask;

final class aca<V>
extends FutureTask<V>
implements Comparable<aca> {
    final boolean a;
    private final long b;
    private final String c;
    private /* synthetic */ abx d;

    aca(abx abx2, Runnable runnable, boolean bl2, String string2) {
        this.d = abx2;
        super(runnable, null);
        ah.a(string2);
        this.b = abx.B().getAndIncrement();
        this.c = string2;
        this.a = false;
        if (this.b == Long.MAX_VALUE) {
            abx2.t().y().a("Tasks index overflow");
        }
    }

    aca(Callable<V> callable, boolean bl2, String string2) {
        this.d = var1_1;
        super(callable);
        ah.a(string2);
        this.b = abx.B().getAndIncrement();
        this.c = string2;
        this.a = bl2;
        if (this.b == Long.MAX_VALUE) {
            var1_1.t().y().a("Tasks index overflow");
        }
    }

    @Override
    public final /* synthetic */ int compareTo(Object object) {
        object = (aca)object;
        if (this.a != object.a) {
            if (this.a) {
                return -1;
            }
            return 1;
        }
        if (this.b < object.b) {
            return -1;
        }
        if (this.b > object.b) {
            return 1;
        }
        this.d.t().z().a("Two tasks share the same index. index", this.b);
        return 0;
    }

    @Override
    protected final void setException(Throwable throwable) {
        this.d.t().y().a(this.c, throwable);
        if (throwable instanceof aby) {
            Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), throwable);
        }
        super.setException(throwable);
    }
}

