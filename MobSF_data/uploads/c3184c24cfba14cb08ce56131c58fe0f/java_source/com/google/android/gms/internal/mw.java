/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.content.Context
 *  android.hardware.Sensor
 *  android.hardware.SensorEvent
 *  android.hardware.SensorEventListener
 *  android.hardware.SensorManager
 *  android.os.Handler
 *  android.os.HandlerThread
 *  android.os.Looper
 *  android.view.Display
 *  android.view.WindowManager
 */
package com.google.android.gms.internal;

import android.content.Context;
import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;
import android.os.Handler;
import android.os.HandlerThread;
import android.os.Looper;
import android.view.Display;
import android.view.WindowManager;
import com.google.android.gms.internal.ak;
import com.google.android.gms.internal.he;
import com.google.android.gms.internal.mx;
import com.google.android.gms.internal.my;

@ak
final class mw
implements SensorEventListener {
    private final SensorManager a;
    private final Object b;
    private final Display c;
    private final float[] d;
    private final float[] e;
    private float[] f;
    private Handler g;
    private my h;

    mw(Context context) {
        this.a = (SensorManager)context.getSystemService("sensor");
        this.c = ((WindowManager)context.getSystemService("window")).getDefaultDisplay();
        this.d = new float[9];
        this.e = new float[9];
        this.b = new Object();
    }

    private final void a(int n2, int n3) {
        float f2 = this.e[n2];
        this.e[n2] = this.e[n3];
        this.e[n3] = f2;
    }

    final void a() {
        if (this.g != null) {
            return;
        }
        Sensor sensor = this.a.getDefaultSensor(11);
        if (sensor == null) {
            he.c("No Sensor of TYPE_ROTATION_VECTOR");
            return;
        }
        HandlerThread handlerThread = new HandlerThread("OrientationMonitor");
        handlerThread.start();
        this.g = new Handler(handlerThread.getLooper());
        if (!this.a.registerListener((SensorEventListener)this, sensor, 0, this.g)) {
            he.c("SensorManager.registerListener failed.");
            this.b();
        }
    }

    final void a(my my2) {
        this.h = my2;
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    final boolean a(float[] arrf) {
        Object object = this.b;
        synchronized (object) {
            if (this.f == null) {
                return false;
            }
            System.arraycopy(this.f, 0, arrf, 0, this.f.length);
            return true;
        }
    }

    final void b() {
        if (this.g == null) {
            return;
        }
        this.a.unregisterListener((SensorEventListener)this);
        this.g.post((Runnable)new mx(this));
        this.g = null;
    }

    public final void onAccuracyChanged(Sensor sensor, int n2) {
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Converted monitor instructions to comments
     * Lifted jumps to return sites
     */
    public final void onSensorChanged(SensorEvent var1_1) {
        var2_2 = var1_1 /* !! */ .values;
        if (var2_2[0] == 0.0f && var2_2[1] == 0.0f) {
            if (var2_2[2] == 0.0f) return;
        }
        var1_1 /* !! */  = this.b;
        // MONITORENTER : var1_1 /* !! */ 
        if (this.f == null) {
            this.f = new float[9];
        }
        // MONITOREXIT : var1_1 /* !! */ 
        SensorManager.getRotationMatrixFromVector((float[])this.d, (float[])var2_2);
        switch (this.c.getRotation()) {
            default: {
                System.arraycopy(this.d, 0, this.e, 0, 9);
                ** break;
            }
            case 3: {
                SensorManager.remapCoordinateSystem((float[])this.d, (int)130, (int)1, (float[])this.e);
                ** break;
            }
            case 2: {
                SensorManager.remapCoordinateSystem((float[])this.d, (int)129, (int)130, (float[])this.e);
                ** break;
            }
            case 1: 
        }
        SensorManager.remapCoordinateSystem((float[])this.d, (int)2, (int)129, (float[])this.e);
lbl22: // 4 sources:
        this.a(1, 3);
        this.a(2, 6);
        this.a(5, 7);
        var1_1 /* !! */  = this.b;
        // MONITORENTER : var1_1 /* !! */ 
        System.arraycopy(this.e, 0, this.f, 0, 9);
        // MONITOREXIT : var1_1 /* !! */ 
        if (this.h == null) return;
        this.h.a();
    }
}

