/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.content.Context
 *  android.graphics.Point
 *  android.graphics.Rect
 *  android.graphics.drawable.Drawable
 *  android.os.Bundle
 *  android.os.IBinder
 *  android.os.RemoteException
 *  android.view.MotionEvent
 *  android.view.View
 *  android.view.View$OnClickListener
 *  android.view.View$OnTouchListener
 *  android.view.ViewGroup
 *  android.view.ViewGroup$LayoutParams
 *  android.view.ViewParent
 *  android.widget.FrameLayout
 *  android.widget.FrameLayout$LayoutParams
 *  android.widget.ImageView
 *  android.widget.ImageView$ScaleType
 *  android.widget.RelativeLayout
 *  android.widget.RelativeLayout$LayoutParams
 *  android.widget.TextView
 *  org.json.JSONException
 *  org.json.JSONObject
 */
package com.google.android.gms.internal;

import android.content.Context;
import android.graphics.Point;
import android.graphics.Rect;
import android.graphics.drawable.Drawable;
import android.os.Bundle;
import android.os.IBinder;
import android.os.RemoteException;
import android.view.MotionEvent;
import android.view.View;
import android.view.ViewGroup;
import android.view.ViewParent;
import android.widget.FrameLayout;
import android.widget.ImageView;
import android.widget.RelativeLayout;
import android.widget.TextView;
import com.google.android.gms.a.a;
import com.google.android.gms.a.m;
import com.google.android.gms.ads.internal.ao;
import com.google.android.gms.ads.internal.av;
import com.google.android.gms.ads.internal.br;
import com.google.android.gms.common.internal.ah;
import com.google.android.gms.internal.agg;
import com.google.android.gms.internal.agk;
import com.google.android.gms.internal.ak;
import com.google.android.gms.internal.boc;
import com.google.android.gms.internal.bpy;
import com.google.android.gms.internal.bqj;
import com.google.android.gms.internal.bsz;
import com.google.android.gms.internal.btk;
import com.google.android.gms.internal.btx;
import com.google.android.gms.internal.buk;
import com.google.android.gms.internal.bul;
import com.google.android.gms.internal.buw;
import com.google.android.gms.internal.buy;
import com.google.android.gms.internal.buz;
import com.google.android.gms.internal.bva;
import com.google.android.gms.internal.bvb;
import com.google.android.gms.internal.bvf;
import com.google.android.gms.internal.bvx;
import com.google.android.gms.internal.bxd;
import com.google.android.gms.internal.ga;
import com.google.android.gms.internal.he;
import com.google.android.gms.internal.hg;
import com.google.android.gms.internal.hs;
import com.google.android.gms.internal.hy;
import com.google.android.gms.internal.jz;
import com.google.android.gms.internal.km;
import com.google.android.gms.internal.ks;
import com.google.android.gms.internal.lf;
import com.google.android.gms.internal.nu;
import com.google.android.gms.internal.p;
import com.google.android.gms.internal.pr;
import java.lang.ref.WeakReference;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.json.JSONException;
import org.json.JSONObject;

@ak
public class bvc
implements buy {
    boolean a;
    private final Object b = new Object();
    private final buz c;
    private final Context d;
    private final JSONObject e;
    private final p f;
    private final bva g;
    private final agk h;
    private final km i;
    private String j;
    private ga k;
    private WeakReference<View> l = null;

    public bvc(Context context, buz buz2, p p2, agk agk2, JSONObject jSONObject, bva bva2, km km2, String string2) {
        this.d = context;
        this.c = buz2;
        this.f = p2;
        this.h = agk2;
        this.e = jSONObject;
        this.g = bva2;
        this.i = km2;
        this.j = string2;
    }

    private final int a(int n2) {
        bqj.a();
        return jz.b(this.d, n2);
    }

    private final JSONObject a(Rect rect) {
        JSONObject jSONObject = new JSONObject();
        jSONObject.put("width", this.a(rect.right - rect.left));
        jSONObject.put("height", this.a(rect.bottom - rect.top));
        jSONObject.put("x", this.a(rect.left));
        jSONObject.put("y", this.a(rect.top));
        jSONObject.put("relative_to", (Object)"self");
        return jSONObject;
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    private final JSONObject a(Map<String, WeakReference<View>> map, View view) {
        JSONObject jSONObject = new JSONObject();
        if (map == null) {
            return jSONObject;
        }
        if (view == null) {
            return jSONObject;
        }
        int[] arrn = bvc.d(view);
        synchronized (map) {
            Iterator<Map.Entry<String, WeakReference<View>>> iterator = map.entrySet().iterator();
            while (iterator.hasNext()) {
                Map.Entry<String, WeakReference<View>> entry = iterator.next();
                View view2 = entry.getValue().get();
                if (view2 == null) continue;
                int[] arrn2 = bvc.d(view2);
                JSONObject jSONObject2 = new JSONObject();
                view = new JSONObject();
                try {
                    view.put("width", this.a(view2.getMeasuredWidth()));
                    view.put("height", this.a(view2.getMeasuredHeight()));
                    view.put("x", this.a(arrn2[0] - arrn[0]));
                    view.put("y", this.a(arrn2[1] - arrn[1]));
                    view.put("relative_to", (Object)"ad_view");
                    jSONObject2.put("frame", (Object)view);
                    view = new Rect();
                    if (view2.getLocalVisibleRect((Rect)view)) {
                        view = this.a((Rect)view);
                    } else {
                        view = new JSONObject();
                        view.put("width", 0);
                        view.put("height", 0);
                        view.put("x", this.a(arrn2[0] - arrn[0]));
                        view.put("y", this.a(arrn2[1] - arrn[1]));
                        view.put("relative_to", (Object)"ad_view");
                    }
                    jSONObject2.put("visible_bounds", (Object)view);
                    if (view2 instanceof TextView) {
                        view = (TextView)view2;
                        jSONObject2.put("text_color", view.getCurrentTextColor());
                        jSONObject2.put("font_size", (double)view.getTextSize());
                        jSONObject2.put("text", (Object)view.getText());
                    }
                    jSONObject.put(entry.getKey(), (Object)jSONObject2);
                    continue;
                }
                catch (JSONException jSONException) {}
                he.e("Unable to get asset views information");
            }
            return jSONObject;
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    private final void a(View view, JSONObject object, JSONObject jSONObject, JSONObject jSONObject2, JSONObject jSONObject3, String string2, JSONObject jSONObject4, JSONObject jSONObject5) {
        JSONObject jSONObject6;
        boolean bl2;
        boolean bl3;
        ah.b("performClick must be called on the main UI thread.");
        try {
            jSONObject6 = new JSONObject();
            jSONObject6.put("ad", (Object)this.e);
            if (jSONObject != null) {
                jSONObject6.put("asset_view_signal", (Object)jSONObject);
            }
            if (object != null) {
                jSONObject6.put("ad_view_signal", object);
            }
            if (jSONObject4 != null) {
                jSONObject6.put("click_signal", (Object)jSONObject4);
            }
            if (jSONObject2 != null) {
                jSONObject6.put("scroll_view_signal", (Object)jSONObject2);
            }
            if (jSONObject3 != null) {
                jSONObject6.put("lock_screen_signal", (Object)jSONObject3);
            }
            jSONObject2 = new JSONObject();
            jSONObject2.put("asset_id", (Object)string2);
            jSONObject2.put("template", (Object)this.g.k());
            av.g();
            jSONObject2.put("is_privileged_process", hy.e());
            object = this.c.b(this.g.l());
            bl3 = false;
            bl2 = object != null;
        }
        catch (JSONException jSONException) {
            he.b("Unable to create click JSON.", (Throwable)jSONException);
            return;
        }
        jSONObject2.put("has_custom_click_handler", bl2);
        bl2 = bl3;
        if (this.c.b(this.g.l()) != null) {
            bl2 = true;
        }
        jSONObject6.put("has_custom_click_handler", bl2);
        try {
            object = jSONObject = this.e.optJSONObject("tracking_urls_and_actions");
            if (jSONObject == null) {
                object = new JSONObject();
            }
            object = object.optString("click_string");
            jSONObject2.put("click_signals", (Object)this.h.a().a(this.d, (String)object, view));
        }
        catch (Exception exception) {
            he.b("Exception obtaining click signals", exception);
        }
        jSONObject6.put("click", (Object)jSONObject2);
        if (jSONObject5 != null) {
            jSONObject6.put("provided_signals", (Object)jSONObject5);
        }
        jSONObject6.put("ads_id", (Object)this.j);
        ks.a(this.f.b(jSONObject6), "NativeAdEngineImpl.performClick");
    }

    private final boolean a(String string2) {
        JSONObject jSONObject = this.e == null ? null : this.e.optJSONObject("allow_pub_event_reporting");
        if (jSONObject == null) {
            return false;
        }
        return jSONObject.optBoolean(string2, false);
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    private final boolean a(JSONObject jSONObject, JSONObject jSONObject2, JSONObject jSONObject3, JSONObject jSONObject4, JSONObject jSONObject5) {
        ah.b("recordImpression must be called on the main UI thread.");
        if (this.a) {
            return true;
        }
        this.a = true;
        try {
            JSONObject jSONObject6 = new JSONObject();
            jSONObject6.put("ad", (Object)this.e);
            jSONObject6.put("ads_id", (Object)this.j);
            if (jSONObject2 != null) {
                jSONObject6.put("asset_view_signal", (Object)jSONObject2);
            }
            if (jSONObject != null) {
                jSONObject6.put("ad_view_signal", (Object)jSONObject);
            }
            if (jSONObject3 != null) {
                jSONObject6.put("scroll_view_signal", (Object)jSONObject3);
            }
            if (jSONObject4 != null) {
                jSONObject6.put("lock_screen_signal", (Object)jSONObject4);
            }
            if (jSONObject5 != null) {
                jSONObject6.put("provided_signals", (Object)jSONObject5);
            }
            ks.a(this.f.c(jSONObject6), "NativeAdEngineImpl.recordImpression");
        }
        catch (JSONException jSONException) {
            he.b("Unable to create impression JSON.", (Throwable)jSONException);
            return false;
        }
        this.c.a(this);
        this.c.B();
        return true;
    }

    private static boolean c(View view) {
        if (view.isShown() && view.getGlobalVisibleRect(new Rect(), null)) {
            return true;
        }
        return false;
    }

    private static int[] d(View view) {
        int[] arrn = new int[2];
        view.getLocationOnScreen(arrn);
        return arrn;
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    private final JSONObject e(View view) {
        JSONObject jSONObject = new JSONObject();
        if (view == null) {
            return jSONObject;
        }
        try {
            int[] arrn = bvc.d(view);
            JSONObject jSONObject2 = new JSONObject();
            jSONObject2.put("width", this.a(view.getMeasuredWidth()));
            jSONObject2.put("height", this.a(view.getMeasuredHeight()));
            jSONObject2.put("x", this.a(arrn[0]));
            jSONObject2.put("y", this.a(arrn[1]));
            jSONObject2.put("relative_to", (Object)"window");
            jSONObject.put("frame", (Object)jSONObject2);
            jSONObject2 = new Rect();
            if (view.getGlobalVisibleRect((Rect)jSONObject2)) {
                view = this.a((Rect)jSONObject2);
            } else {
                view = new JSONObject();
                view.put("width", 0);
                view.put("height", 0);
                view.put("x", this.a(arrn[0]));
                view.put("y", this.a(arrn[1]));
                view.put("relative_to", (Object)"window");
            }
            jSONObject.put("visible_bounds", (Object)view);
            return jSONObject;
        }
        catch (Exception exception) {}
        he.e("Unable to get native ad view bounding box");
        return jSONObject;
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    private static JSONObject f(View view) {
        JSONObject jSONObject = new JSONObject();
        if (view == null) {
            return jSONObject;
        }
        try {
            av.e();
            boolean bl2 = hs.d(view) != -1;
            jSONObject.put("contained_in_scroll_view", bl2);
            return jSONObject;
        }
        catch (Exception exception) {
            return jSONObject;
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    private final JSONObject g(View view) {
        JSONObject jSONObject = new JSONObject();
        if (view == null) {
            return jSONObject;
        }
        try {
            av.e();
            jSONObject.put("can_show_on_lock_screen", hs.c(view));
            av.e();
            jSONObject.put("is_keyguard_locked", hs.j(this.d));
            return jSONObject;
        }
        catch (JSONException jSONException) {}
        he.e("Unable to get lock screen information");
        return jSONObject;
    }

    /*
     * Enabled aggressive block sorting
     */
    @Override
    public View a(View.OnClickListener object, boolean bl2) {
        RelativeLayout.LayoutParams layoutParams;
        buk buk2;
        block5 : {
            block7 : {
                block6 : {
                    void var2_3;
                    buk2 = this.g.m();
                    if (buk2 == null) {
                        return null;
                    }
                    layoutParams = new RelativeLayout.LayoutParams(-2, -2);
                    if (var2_3 != false) break block5;
                    int n2 = buk2.h();
                    if (n2 == 0) break block6;
                    switch (n2) {
                        default: {
                            layoutParams.addRule(10);
                            break;
                        }
                        case 3: {
                            layoutParams.addRule(12);
                            break block7;
                        }
                        case 2: {
                            layoutParams.addRule(12);
                            break;
                        }
                    }
                    layoutParams.addRule(11);
                    break block5;
                }
                layoutParams.addRule(10);
            }
            layoutParams.addRule(9);
        }
        bul bul2 = new bul(this.d, buk2, layoutParams);
        bul2.setOnClickListener(object);
        bsz<String> bsz2 = btk.bW;
        bul2.setContentDescription((CharSequence)bqj.f().a(bsz2));
        return bul2;
    }

    @Override
    public final void a(MotionEvent motionEvent) {
        this.h.a(motionEvent);
    }

    @Override
    public final void a(View view) {
        Object object = btk.bz;
        if (!bqj.f().a(object).booleanValue()) {
            return;
        }
        if (this.h != null && (object = this.h.a()) != null) {
            object.a(view);
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @Override
    public final void a(View view, buw object) {
        if (this.b(view, (buw)object)) {
            return;
        }
        FrameLayout.LayoutParams layoutParams = new FrameLayout.LayoutParams(-1, -1);
        ((FrameLayout)view).removeAllViews();
        if (!(this.g instanceof bvb)) {
            return;
        }
        object = (bvb)this.g;
        if (object.b() != null && object.b().size() > 0) {
            if (!((object = object.b().get(0)) instanceof IBinder)) {
                return;
            }
            if ((object = bvx.a((IBinder)object)) != null) {
                try {
                    object = object.a();
                    if (object != null) {
                        object = (Drawable)m.a((a)object);
                        ImageView imageView = new ImageView(this.d);
                        imageView.setImageDrawable((Drawable)object);
                        imageView.setScaleType(ImageView.ScaleType.CENTER_INSIDE);
                        ((FrameLayout)view).addView((View)imageView, (ViewGroup.LayoutParams)layoutParams);
                    }
                    return;
                }
                catch (RemoteException remoteException) {}
                he.e("Could not get drawable from image");
            }
        }
    }

    /*
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    @Override
    public final void a(View view, String string2, Bundle object, Map<String, WeakReference<View>> object2, View view2) {
        JSONObject jSONObject2;
        JSONObject jSONObject3;
        JSONObject jSONObject;
        JSONObject jSONObject4;
        block4 : {
            block5 : {
                jSONObject4 = this.a((Map<String, WeakReference<View>>)object2, view2);
                jSONObject = this.e(view2);
                jSONObject3 = bvc.f(view2);
                jSONObject2 = this.g(view2);
                object2 = null;
                view2 = av.e().a((Bundle)object, null);
                object = new JSONObject();
                try {
                    object.put("click_point", (Object)view2);
                    object.put("asset_id", (Object)string2);
                    break block4;
                }
                catch (Exception exception) {
                    break block5;
                }
                catch (Exception exception) {
                    object = object2;
                    object2 = exception;
                }
            }
            he.b("Error occurred while grabbing click signals.", (Throwable)object2);
        }
        this.a(view, jSONObject, jSONObject4, jSONObject3, jSONObject2, string2, (JSONObject)object, null);
    }

    @Override
    public void a(View view, Map<String, WeakReference<View>> map) {
        this.a(this.e(view), this.a(map, view), bvc.f(view), this.g(view), null);
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @Override
    public void a(View view, Map<String, WeakReference<View>> map, Bundle bundle, View view2) {
        block10 : {
            Object object;
            block9 : {
                block8 : {
                    ah.b("performClick must be called on the main UI thread.");
                    if (map != null) {
                        synchronized (map) {
                            for (Map.Entry entry : map.entrySet()) {
                                if (!view.equals((Object)((View)((WeakReference)entry.getValue()).get()))) continue;
                                this.a(view, (String)entry.getKey(), bundle, map, view2);
                                return;
                            }
                        }
                    }
                    if (!"6".equals(this.g.k())) break block8;
                    object = "3099";
                    break block9;
                }
                if (!"2".equals(this.g.k())) break block10;
                object = "2099";
            }
            this.a(view, (String)object, bundle, map, view2);
            return;
        }
        if ("1".equals(this.g.k())) {
            this.a(view, "1099", bundle, map, view2);
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public void a(View object, Map<String, WeakReference<View>> view, Map<String, WeakReference<View>> map, View.OnTouchListener onTouchListener, View.OnClickListener onClickListener) {
        View view2 = btk.bU;
        if (!bqj.f().a(view2).booleanValue()) {
            return;
        }
        object.setOnTouchListener(onTouchListener);
        object.setClickable(true);
        object.setOnClickListener(onClickListener);
        if (view != null) {
            synchronized (view) {
                object = view.entrySet().iterator();
                while (object.hasNext()) {
                    view2 = (View)((WeakReference)((Map.Entry)object.next()).getValue()).get();
                    if (view2 == null) continue;
                    view2.setOnTouchListener(onTouchListener);
                    view2.setClickable(true);
                    view2.setOnClickListener(onClickListener);
                }
            }
        }
        if (map == null) {
            return;
        }
        synchronized (map) {
            object = map.entrySet().iterator();
            while (object.hasNext()) {
                view = (View)((WeakReference)((Map.Entry)object.next()).getValue()).get();
                if (view == null) continue;
                view.setOnTouchListener(onTouchListener);
            }
            return;
        }
    }

    public final void a(Map<String, WeakReference<View>> map) {
        if (this.g.o() != null) {
            if ("2".equals(this.g.k())) {
                av.i().l().a(this.c.C(), this.g.k(), map.containsKey("2011"));
                return;
            }
            if ("1".equals(this.g.k())) {
                av.i().l().a(this.c.C(), this.g.k(), map.containsKey("1009"));
            }
        }
    }

    @Override
    public boolean a() {
        buk buk2 = this.g.m();
        if (buk2 != null && buk2.i()) {
            return true;
        }
        return false;
    }

    @Override
    public final boolean a(Bundle bundle) {
        if (!this.a("impression_reporting")) {
            he.c("The ad slot cannot handle external impression events. You must be whitelisted to whitelisted to be able to report your impression events.");
            return false;
        }
        return this.a(null, null, null, null, av.e().a(bundle, null));
    }

    @Override
    public final void b(Bundle bundle) {
        if (bundle == null) {
            he.b("Click data is null. No click is reported.");
            return;
        }
        if (!this.a("click_reporting")) {
            he.c("The ad slot cannot handle external click events. You must be whitelisted to be able to report your click events.");
            return;
        }
        this.a(null, null, null, null, null, bundle.getBundle("click_signal").getString("asset_id"), null, av.e().a(bundle, null));
    }

    @Override
    public final void b(View view) {
        this.l = new WeakReference<View>(view);
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @Override
    public void b(View object, Map<String, WeakReference<View>> map) {
        View view = btk.bT;
        if (bqj.f().a(view).booleanValue()) {
            return;
        }
        object.setOnTouchListener(null);
        object.setClickable(false);
        object.setOnClickListener(null);
        if (map == null) {
            return;
        }
        synchronized (map) {
            object = map.entrySet().iterator();
            while (object.hasNext()) {
                view = (View)((WeakReference)((Map.Entry)object.next()).getValue()).get();
                if (view == null) continue;
                view.setOnTouchListener(null);
                view.setClickable(false);
                view.setOnClickListener(null);
            }
            return;
        }
    }

    @Override
    public boolean b() {
        if (this.e != null && this.e.optBoolean("allow_pub_owned_ad_view", false)) {
            return true;
        }
        return false;
    }

    public final boolean b(View view, buw buw2) {
        FrameLayout.LayoutParams layoutParams = new FrameLayout.LayoutParams(-2, -2, 17);
        View view2 = this.g.o();
        if (view2 != null) {
            ViewParent viewParent = view2.getParent();
            if (viewParent instanceof ViewGroup) {
                ((ViewGroup)viewParent).removeView(view2);
            }
            view = (FrameLayout)view;
            view.removeAllViews();
            view.addView(view2, (ViewGroup.LayoutParams)layoutParams);
            this.c.a(buw2);
            return true;
        }
        return false;
    }

    @Override
    public final void c(Bundle bundle) {
        if (bundle == null) {
            he.b("Touch event data is null. No touch event is reported.");
            return;
        }
        if (!this.a("touch_reporting")) {
            he.c("The ad slot cannot handle external touch events. You must be whitelisted to be able to report your touch events.");
            return;
        }
        int n2 = (int)bundle.getFloat("x");
        int n3 = (int)bundle.getFloat("y");
        int n4 = bundle.getInt("duration_ms");
        this.h.a().a(n2, n3, n4);
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @Override
    public final void c(View view, Map<String, WeakReference<View>> map) {
        Object object = this.b;
        synchronized (object) {
            if (this.a) {
                return;
            }
            if (bvc.c(view)) {
                this.a(view, map);
                return;
            }
            Object object2 = btk.cb;
            if (bqj.f().a(object2).booleanValue() && map != null) {
                synchronized (map) {
                    object2 = map.entrySet().iterator();
                    while (object2.hasNext()) {
                        View view2 = (View)((WeakReference)((Map.Entry)object2.next()).getValue()).get();
                        if (view2 == null || !bvc.c(view2)) continue;
                        this.a(view, map);
                        return;
                    }
                }
            }
            return;
        }
    }

    public nu e() {
        if (this.e != null && this.e.optJSONObject("overlay") != null) {
            Object object = av.f();
            Context context = this.d;
            bpy bpy2 = bpy.a(this.d);
            agk agk2 = this.h;
            km km2 = this.i;
            if ((object = object.a(context, pr.a(bpy2), bpy2.a, false, false, agk2, km2, null, null, null, boc.a())) != null) {
                object.getView().setVisibility(8);
                new bvf((nu)object).a(this.f);
            }
            return object;
        }
        return null;
    }

    @Override
    public void f() {
        this.f.a();
    }

    @Override
    public void g() {
        this.c.L();
    }

    @Override
    public final View h() {
        if (this.l != null) {
            return this.l.get();
        }
        return null;
    }

    @Override
    public final Context i() {
        return this.d;
    }

    public final ga j() {
        if (av.A().c(this.d)) {
            if (this.k == null) {
                this.k = new ga(this.d, this.c.C());
            }
            return this.k;
        }
        return null;
    }
}

