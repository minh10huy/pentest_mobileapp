/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.os.Parcel
 *  android.os.Parcelable
 *  android.os.Parcelable$Creator
 *  android.text.TextUtils
 */
package com.google.android.gms.auth.api.credentials;

import android.os.Parcel;
import android.os.Parcelable;
import android.text.TextUtils;
import com.google.android.gms.common.internal.ReflectedParcelable;
import com.google.android.gms.internal.wz;
import com.google.android.gms.internal.xc;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import java.util.TreeSet;

public final class PasswordSpecification
extends wz
implements ReflectedParcelable {
    public static final Parcelable.Creator<PasswordSpecification> CREATOR = new com.google.android.gms.auth.api.credentials.b();
    public static final PasswordSpecification a = new a().a(12, 16).a("abcdefghijkmnopqrstxyzABCDEFGHJKLMNPQRSTXY3456789").a("abcdefghijkmnopqrstxyz", 1).a("ABCDEFGHJKLMNPQRSTXY", 1).a("3456789", 1).a();
    private static PasswordSpecification b = new a().a(12, 16).a("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890").a("abcdefghijklmnopqrstuvwxyz", 1).a("ABCDEFGHIJKLMNOPQRSTUVWXYZ", 1).a("1234567890", 1).a();
    private String c;
    private List<String> d;
    private List<Integer> e;
    private int f;
    private int g;
    private final int[] h;
    private final Random i;

    PasswordSpecification(String arrn, List<String> object, List<Integer> arrc, int n2, int n3) {
        this.c = arrn;
        this.d = Collections.unmodifiableList(object);
        this.e = Collections.unmodifiableList(arrc);
        this.f = n2;
        this.g = n3;
        arrn = new int[95];
        Arrays.fill(arrn, -1);
        object = this.d.iterator();
        n2 = 0;
        while (object.hasNext()) {
            arrc = ((String)object.next()).toCharArray();
            int n4 = arrc.length;
            for (n3 = 0; n3 < n4; ++n3) {
                arrn[arrc[n3] - 32] = n2;
            }
            ++n2;
        }
        this.h = arrn;
        this.i = new SecureRandom();
    }

    private static String b(Collection<Character> object) {
        char[] arrc = new char[object.size()];
        object = object.iterator();
        int n2 = 0;
        while (object.hasNext()) {
            arrc[n2] = ((Character)object.next()).charValue();
            ++n2;
        }
        return new String(arrc);
    }

    private static boolean b(int n2, int n3, int n4) {
        if (n2 >= 32 && n2 <= 126) {
            return false;
        }
        return true;
    }

    public final void writeToParcel(Parcel parcel, int n2) {
        n2 = xc.a(parcel);
        xc.a(parcel, 1, this.c, false);
        xc.b(parcel, 2, this.d, false);
        xc.a(parcel, 3, this.e, false);
        xc.a(parcel, 4, this.f);
        xc.a(parcel, 5, this.g);
        xc.a(parcel, n2);
    }

    public static final class a {
        private final TreeSet<Character> a = new TreeSet();
        private final List<String> b = new ArrayList<String>();
        private final List<Integer> c = new ArrayList<Integer>();
        private int d = 12;
        private int e = 16;

        private static TreeSet<Character> a(String arrc, String string2) {
            if (!TextUtils.isEmpty((CharSequence)arrc)) {
                TreeSet<Character> treeSet = new TreeSet<Character>();
                for (char c2 : arrc.toCharArray()) {
                    if (!PasswordSpecification.b(c2, 32, 126)) {
                        treeSet.add(Character.valueOf(c2));
                        continue;
                    }
                    throw new b(String.valueOf(string2).concat(" must only contain ASCII printable characters"));
                }
                return treeSet;
            }
            throw new b(String.valueOf(string2).concat(" cannot be null or empty"));
        }

        public final a a(int n2, int n3) {
            this.d = 12;
            this.e = 16;
            return this;
        }

        public final a a(String string2) {
            this.a.addAll(a.a(string2, "allowedChars"));
            return this;
        }

        public final a a(String object, int n2) {
            object = a.a((String)object, "requiredChars");
            this.b.add(PasswordSpecification.b((Collection)object));
            this.c.add(1);
            return this;
        }

        public final PasswordSpecification a() {
            if (!this.a.isEmpty()) {
                Object object = this.c.iterator();
                int n2 = 0;
                while (object.hasNext()) {
                    n2 += object.next().intValue();
                }
                if (n2 <= this.e) {
                    object = new boolean[95];
                    Iterator<String> iterator = this.b.iterator();
                    while (iterator.hasNext()) {
                        for (char c2 : iterator.next().toCharArray()) {
                            int n3 = c2 - 32;
                            if (!object[n3]) {
                                object[n3] = true;
                                continue;
                            }
                            object = new StringBuilder(58);
                            object.append("character ");
                            object.append(c2);
                            object.append(" occurs in more than one required character set");
                            throw new b(object.toString());
                        }
                    }
                    return new PasswordSpecification(PasswordSpecification.b(this.a), this.b, this.c, this.d, this.e);
                }
                throw new b("required character count cannot be greater than the max password size");
            }
            throw new b("no allowed characters specified");
        }
    }

    public static final class b
    extends Error {
        public b(String string2) {
            super(string2);
        }
    }

}

