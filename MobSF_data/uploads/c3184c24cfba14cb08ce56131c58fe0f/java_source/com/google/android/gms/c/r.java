/*
 * Decompiled with CFR 0_132.
 */
package com.google.android.gms.c;

import com.google.android.gms.c.a;
import com.google.android.gms.c.b;
import com.google.android.gms.c.c;
import com.google.android.gms.c.d;
import com.google.android.gms.c.e;
import com.google.android.gms.c.g;
import com.google.android.gms.c.i;
import com.google.android.gms.c.k;
import com.google.android.gms.c.m;
import com.google.android.gms.c.o;
import com.google.android.gms.c.p;
import com.google.android.gms.common.internal.ah;
import java.util.concurrent.Executor;

final class r<TResult>
extends e<TResult> {
    private final Object a = new Object();
    private final p<TResult> b = new p();
    private boolean c;
    private TResult d;
    private Exception e;

    r() {
    }

    private final void e() {
        ah.a(this.c, (Object)"Task is not yet complete");
    }

    private final void f() {
        ah.a(this.c ^ true, (Object)"Task is already complete");
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    private final void g() {
        Object object = this.a;
        synchronized (object) {
            if (!this.c) {
                return;
            }
        }
        this.b.a(this);
    }

    @Override
    public final e<TResult> a(a<TResult> a2) {
        return this.a(g.a, a2);
    }

    @Override
    public final e<TResult> a(b b2) {
        return this.a(g.a, b2);
    }

    @Override
    public final e<TResult> a(Executor executor, a<TResult> a2) {
        this.b.a(new i<TResult>(executor, a2));
        this.g();
        return this;
    }

    @Override
    public final e<TResult> a(Executor executor, b b2) {
        this.b.a(new k(executor, b2));
        this.g();
        return this;
    }

    @Override
    public final e<TResult> a(Executor executor, c<? super TResult> c2) {
        this.b.a(new m<TResult>(executor, c2));
        this.g();
        return this;
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public final void a(Exception exception) {
        ah.a(exception, (Object)"Exception must not be null");
        Object object = this.a;
        synchronized (object) {
            this.f();
            this.c = true;
            this.e = exception;
        }
        this.b.a(this);
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public final void a(TResult TResult) {
        Object object = this.a;
        synchronized (object) {
            this.f();
            this.c = true;
            this.d = TResult;
        }
        this.b.a(this);
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @Override
    public final boolean a() {
        Object object = this.a;
        synchronized (object) {
            return this.c;
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @Override
    public final boolean b() {
        Object object = this.a;
        synchronized (object) {
            if (!this.c) return false;
            if (this.e != null) return false;
            return true;
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public final boolean b(Exception exception) {
        ah.a(exception, (Object)"Exception must not be null");
        Object object = this.a;
        synchronized (object) {
            if (this.c) {
                return false;
            }
            this.c = true;
            this.e = exception;
        }
        this.b.a(this);
        return true;
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public final boolean b(TResult TResult) {
        Object object = this.a;
        synchronized (object) {
            if (this.c) {
                return false;
            }
            this.c = true;
            this.d = TResult;
        }
        this.b.a(this);
        return true;
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @Override
    public final TResult c() {
        Object object = this.a;
        synchronized (object) {
            this.e();
            if (this.e == null) {
                TResult TResult = this.d;
                return TResult;
            }
            throw new d(this.e);
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @Override
    public final Exception d() {
        Object object = this.a;
        synchronized (object) {
            return this.e;
        }
    }
}

