/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.os.Process
 */
package com.google.android.gms.internal;

import android.os.Process;
import com.google.android.gms.common.internal.ah;
import com.google.android.gms.internal.abb;
import com.google.android.gms.internal.abd;
import com.google.android.gms.internal.abx;
import com.google.android.gms.internal.aca;
import java.util.concurrent.BlockingQueue;

final class acb
extends Thread {
    private final Object a;
    private final BlockingQueue<aca<?>> b;
    private /* synthetic */ abx c;

    public acb(String string2, BlockingQueue<aca<?>> blockingQueue) {
        this.c = var1_1;
        ah.a(string2);
        ah.a(blockingQueue);
        this.a = new Object();
        this.b = blockingQueue;
        this.setName(string2);
    }

    private final void a(InterruptedException interruptedException) {
        this.c.t().A().a(String.valueOf(this.getName()).concat(" was interrupted"), interruptedException);
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public final void a() {
        Object object = this.a;
        synchronized (object) {
            this.a.notifyAll();
            return;
        }
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Converted monitor instructions to comments
     * Lifted jumps to return sites
     */
    @Override
    public final void run() {
        var1_1 = 0;
        while (var1_1 == 0) {
            try {
                abx.a(this.c).acquire();
                var1_1 = 1;
            }
            catch (InterruptedException var4_2) {
                this.a(var4_2);
            }
        }
        try {
            var2_4 = Process.getThreadPriority((int)Process.myTid());
            do lbl-1000: // 3 sources:
            {
                if ((var4_3 = this.b.poll()) != null) {
                    var1_1 = var4_3.a != false ? var2_4 : 10;
                    Process.setThreadPriority((int)var1_1);
                    var4_3.run();
                    continue;
                }
                var4_3 = this.a;
                // MONITORENTER : var4_3
                break;
            } while (true);
        }
        catch (Throwable var5_7) {
            var4_3 = abx.c(this.c);
            // MONITORENTER : var4_3
            abx.a(this.c).release();
            abx.c(this.c).notifyAll();
            if (this == abx.d(this.c)) {
                abx.a(this.c, null);
                // MONITOREXIT : var4_3
                throw var5_7;
            }
            if (this == abx.e(this.c)) {
                abx.b(this.c, null);
                throw var5_7;
            }
            this.c.t().y().a("Current scheduler thread is neither worker nor network");
            throw var5_7;
        }
        {
            if (this.b.peek() == null && !(var3_5 = abx.b(this.c))) {
                try {
                    this.a.wait(30000L);
                }
                catch (InterruptedException var5_6) {
                    this.a(var5_6);
                }
            }
            // MONITOREXIT : var4_3
            var4_3 = abx.c(this.c);
            // MONITORENTER : var4_3
            if (this.b.peek() == null) {
                // MONITOREXIT : var4_3
                var4_3 = abx.c(this.c);
                // MONITORENTER : var4_3
                abx.a(this.c).release();
                abx.c(this.c).notifyAll();
                if (this == abx.d(this.c)) {
                    abx.a(this.c, null);
                    return;
                }
                if (this == abx.e(this.c)) {
                    abx.b(this.c, null);
                    return;
                }
                this.c.t().y().a("Current scheduler thread is neither worker nor network");
                // MONITOREXIT : var4_3
                return;
            }
            // MONITOREXIT : var4_3
            ** while (true)
        }
    }
}

