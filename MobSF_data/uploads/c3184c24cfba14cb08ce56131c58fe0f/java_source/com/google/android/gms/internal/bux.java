/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.content.Context
 *  android.os.Bundle
 *  android.os.RemoteException
 *  android.view.View
 *  android.view.View$OnClickListener
 *  android.view.View$OnTouchListener
 *  org.json.JSONObject
 */
package com.google.android.gms.internal;

import android.content.Context;
import android.os.Bundle;
import android.os.RemoteException;
import android.view.View;
import com.google.android.gms.a.a;
import com.google.android.gms.a.m;
import com.google.android.gms.common.internal.ah;
import com.google.android.gms.internal.agk;
import com.google.android.gms.internal.ak;
import com.google.android.gms.internal.buy;
import com.google.android.gms.internal.buz;
import com.google.android.gms.internal.bva;
import com.google.android.gms.internal.bvc;
import com.google.android.gms.internal.cbz;
import com.google.android.gms.internal.ccc;
import com.google.android.gms.internal.he;
import com.google.android.gms.internal.km;
import com.google.android.gms.internal.nu;
import com.google.android.gms.internal.p;
import java.lang.ref.WeakReference;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import org.json.JSONObject;

@ak
public final class bux
extends bvc {
    private cbz b;
    private ccc c;
    private final buz d;
    private buy e;
    private boolean f = false;
    private Object g = new Object();

    private bux(Context context, buz buz2, agk agk2, bva bva2) {
        super(context, buz2, null, agk2, null, bva2, null, null);
        this.d = buz2;
    }

    public bux(Context context, buz buz2, agk agk2, cbz cbz2, bva bva2) {
        this(context, buz2, agk2, bva2);
        this.b = cbz2;
    }

    public bux(Context context, buz buz2, agk agk2, ccc ccc2, bva bva2) {
        this(context, buz2, agk2, bva2);
        this.c = ccc2;
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    private static HashMap<String, View> b(Map<String, WeakReference<View>> map) {
        HashMap<String, View> hashMap = new HashMap<String, View>();
        if (map == null) {
            return hashMap;
        }
        synchronized (map) {
            Iterator<Map.Entry<String, WeakReference<View>>> iterator = map.entrySet().iterator();
            while (iterator.hasNext()) {
                Map.Entry<String, WeakReference<View>> entry = iterator.next();
                View view = entry.getValue().get();
                if (view == null) continue;
                hashMap.put(entry.getKey(), view);
            }
            return hashMap;
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @Override
    public final View a(View.OnClickListener object, boolean bl2) {
        Object object2 = this.g;
        synchronized (object2) {
            if (this.e != null) {
                return this.e.a((View.OnClickListener)object, bl2);
            }
            try {
                if (this.b != null) {
                    object = this.b.n();
                } else {
                    if (this.c == null) return null;
                    object = this.c.k();
                }
            }
            catch (RemoteException remoteException) {
                he.c("Failed to call getAdChoicesContent", (Throwable)remoteException);
                return null;
            }
            if (object == null) return null;
            return (View)m.a((a)object);
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @Override
    public final void a(View object, Map<String, WeakReference<View>> map) {
        ah.b("recordImpression must be called on the main UI thread.");
        Object object2 = this.g;
        synchronized (object2) {
            block9 : {
                this.a = true;
                if (this.e != null) {
                    this.e.a((View)object, map);
                    this.d.X();
                } else {
                    try {
                        if (this.b != null && !this.b.j()) {
                            this.b.i();
                            object = this.d;
                        } else {
                            if (this.c == null || this.c.h()) break block9;
                            this.c.g();
                            object = this.d;
                        }
                        object.X();
                    }
                    catch (RemoteException remoteException) {
                        he.c("Failed to call recordImpression", (Throwable)remoteException);
                    }
                }
            }
            return;
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @Override
    public final void a(View view, Map<String, WeakReference<View>> map, Bundle bundle, View view2) {
        ah.b("performClick must be called on the main UI thread.");
        Object object = this.g;
        synchronized (object) {
            if (this.e != null) {
                this.e.a(view, map, bundle, view2);
                this.d.e();
            } else {
                try {
                    if (this.b != null && !this.b.k()) {
                        this.b.a(m.a(view));
                        this.d.e();
                    }
                    if (this.c != null && !this.c.i()) {
                        this.c.a(m.a(view));
                        this.d.e();
                    }
                }
                catch (RemoteException remoteException) {
                    he.c("Failed to call performClick", (Throwable)remoteException);
                }
            }
            return;
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @Override
    public final void a(View view, Map<String, WeakReference<View>> map, Map<String, WeakReference<View>> map2, View.OnTouchListener object, View.OnClickListener onClickListener) {
        object = this.g;
        synchronized (object) {
            this.f = true;
            map = bux.b(map);
            map2 = bux.b(map2);
            try {
                if (this.b != null) {
                    this.b.a(m.a(view), m.a(map), m.a(map2));
                    this.b.b(m.a(view));
                } else if (this.c != null) {
                    this.c.a(m.a(view), m.a(map), m.a(map2));
                    this.c.b(m.a(view));
                }
            }
            catch (RemoteException remoteException) {
                he.c("Failed to call prepareAd", (Throwable)remoteException);
            }
            this.f = false;
            return;
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public final void a(buy buy2) {
        Object object = this.g;
        synchronized (object) {
            this.e = buy2;
            return;
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @Override
    public final boolean a() {
        Object object = this.g;
        synchronized (object) {
            if (this.e == null) return this.d.N();
            return this.e.a();
        }
    }

    /*
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Converted monitor instructions to comments
     * Lifted jumps to return sites
     */
    @Override
    public final void b(View view, Map<String, WeakReference<View>> object) {
        object = this.g;
        // MONITORENTER : object
        if (this.b != null) {
            this.b.c(m.a(view));
            return;
        }
        if (this.c == null) return;
        {
            this.c.c(m.a(view));
            return;
        }
        catch (RemoteException remoteException) {
            he.c("Failed to call untrackView", (Throwable)remoteException);
        }
        // MONITOREXIT : object
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @Override
    public final boolean b() {
        Object object = this.g;
        synchronized (object) {
            if (this.e == null) return this.d.O();
            return this.e.b();
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public final boolean c() {
        Object object = this.g;
        synchronized (object) {
            return this.f;
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public final buy d() {
        Object object = this.g;
        synchronized (object) {
            return this.e;
        }
    }

    @Override
    public final nu e() {
        return null;
    }

    @Override
    public final void f() {
    }

    @Override
    public final void g() {
    }
}

