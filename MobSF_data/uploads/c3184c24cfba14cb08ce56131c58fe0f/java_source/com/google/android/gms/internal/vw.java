/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.text.TextUtils
 */
package com.google.android.gms.internal;

import android.text.TextUtils;
import java.util.Locale;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public final class vw {
    private static final Pattern a = Pattern.compile("urn:x-cast:[-A-Za-z0-9_]+(\\.[-A-Za-z0-9_]+)*");

    public static String a(Locale object) {
        StringBuilder stringBuilder = new StringBuilder(20);
        stringBuilder.append(object.getLanguage());
        String string2 = object.getCountry();
        if (!TextUtils.isEmpty((CharSequence)string2)) {
            stringBuilder.append('-');
            stringBuilder.append(string2);
        }
        if (!TextUtils.isEmpty((CharSequence)(object = object.getVariant()))) {
            stringBuilder.append('-');
            stringBuilder.append((String)object);
        }
        return stringBuilder.toString();
    }

    public static void a(String string2) {
        if (!TextUtils.isEmpty((CharSequence)string2)) {
            if (string2.length() <= 128) {
                if (string2.startsWith("urn:x-cast:")) {
                    if (string2.length() != 11) {
                        return;
                    }
                    throw new IllegalArgumentException("Namespace must begin with the prefix \"urn:x-cast:\" and have non-empty suffix");
                }
                throw new IllegalArgumentException("Namespace must begin with the prefix \"urn:x-cast:\"");
            }
            throw new IllegalArgumentException("Invalid namespace length");
        }
        throw new IllegalArgumentException("Namespace cannot be null or empty");
    }

    public static <T> boolean a(T t2, T t3) {
        if (t2 == null && t3 == null || t2 != null && t3 != null && t2.equals(t3)) {
            return true;
        }
        return false;
    }

    public static String b(String string2) {
        String string3 = String.valueOf("urn:x-cast:");
        if ((string2 = String.valueOf(string2)).length() != 0) {
            return string3.concat(string2);
        }
        return new String(string3);
    }

    public static String c(String string2) {
        if (a.matcher(string2).matches()) {
            return string2;
        }
        StringBuilder stringBuilder = new StringBuilder(string2.length());
        for (int i2 = 0; i2 < string2.length(); ++i2) {
            char c2 = string2.charAt(i2);
            boolean bl2 = c2 >= 'A' && c2 <= 'Z' || c2 >= 'a' && c2 <= 'z' || c2 >= '0' && c2 <= '9' || c2 == '_' || c2 == '-';
            if (!bl2 && c2 != '.' && c2 != ':') {
                stringBuilder.append(String.format("%%%04x", c2 & 65535));
                continue;
            }
            stringBuilder.append(c2);
        }
        return stringBuilder.toString();
    }
}

