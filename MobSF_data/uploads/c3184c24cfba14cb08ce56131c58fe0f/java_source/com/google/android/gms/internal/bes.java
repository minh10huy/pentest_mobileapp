/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.net.SSLCertificateSocketFactory
 *  android.net.SSLSessionCache
 */
package com.google.android.gms.internal;

import android.net.SSLCertificateSocketFactory;
import android.net.SSLSessionCache;
import com.google.android.gms.internal.bcl;
import com.google.android.gms.internal.beh;
import com.google.android.gms.internal.bei;
import com.google.android.gms.internal.ber;
import com.google.android.gms.internal.bet;
import com.google.android.gms.internal.beu;
import com.google.android.gms.internal.bev;
import com.google.android.gms.internal.bew;
import com.google.android.gms.internal.bex;
import com.google.android.gms.internal.bey;
import com.google.android.gms.internal.bez;
import com.google.android.gms.internal.bfb;
import com.google.android.gms.internal.bfc;
import java.io.File;
import java.io.IOException;
import java.net.Socket;
import java.net.URI;
import java.net.UnknownHostException;
import java.nio.charset.Charset;
import java.util.Map;
import java.util.concurrent.Executors;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.atomic.AtomicInteger;
import javax.net.ssl.HttpsURLConnection;
import javax.net.ssl.SSLSession;
import javax.net.ssl.SSLSocket;

public final class bes {
    private static final AtomicInteger a = new AtomicInteger(0);
    private static final Charset b = Charset.forName("UTF-8");
    private static ThreadFactory n = Executors.defaultThreadFactory();
    private static ber o = new bet();
    private volatile int c = bew.a;
    private volatile Socket d = null;
    private bex e = null;
    private final URI f;
    private final String g;
    private final bfb h;
    private final bfc i;
    private final bez j;
    private final beh k;
    private final int l = a.incrementAndGet();
    private final Thread m = n.newThread(new beu(this));

    public bes(bcl object, URI uRI, String charSequence, Map<String, String> map) {
        this.f = uRI;
        this.g = object.g();
        object = object.a();
        int n2 = this.l;
        charSequence = new StringBuilder(14);
        charSequence.append("sk_");
        charSequence.append(n2);
        this.k = new beh((bei)object, "WebSocket", charSequence.toString());
        this.j = new bez(uRI, null, map);
        this.h = new bfb(this);
        this.i = new bfc(this, "TubeSock", this.l);
    }

    static ThreadFactory a() {
        return n;
    }

    private final void a(byte by2, byte[] arrby) {
        synchronized (this) {
            if (this.c != bew.c) {
                this.e.a(new bey("error while sending data: not connected"));
                return;
            }
            try {
                this.i.a(by2, true, arrby);
                return;
            }
            catch (IOException iOException) {
                this.e.a(new bey("Failed to send frame", iOException));
                this.e();
                return;
            }
        }
    }

    static /* synthetic */ void a(bes bes2) {
        bes2.j();
    }

    static ber b() {
        return o;
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    private final void h() {
        synchronized (this) {
            int n2 = this.c;
            int n3 = bew.e;
            if (n2 == n3) {
                return;
            }
            this.h.b();
            this.i.a();
            Socket socket = this.d;
            if (socket != null) {
                try {
                    this.d.close();
                }
                catch (IOException iOException) {
                    throw new RuntimeException(iOException);
                }
            }
            this.c = bew.e;
            this.e.d();
            return;
        }
    }

    private final Socket i() {
        Object object = this.f.getScheme();
        CharSequence charSequence = this.f.getHost();
        int n2 = this.f.getPort();
        if (object != null && object.equals("ws")) {
            int n3 = n2;
            if (n2 == -1) {
                n3 = 80;
            }
            try {
                object = new Socket((String)charSequence, n3);
                return object;
            }
            catch (IOException iOException) {
                String string2 = String.valueOf(this.f);
                charSequence = new StringBuilder(String.valueOf(string2).length() + 31);
                charSequence.append("error while creating socket to ");
                charSequence.append(string2);
                throw new bey(charSequence.toString(), iOException);
            }
            catch (UnknownHostException unknownHostException) {
                object = String.valueOf(charSequence);
                object = object.length() != 0 ? "unknown host: ".concat((String)object) : new String("unknown host: ");
                throw new bey((String)object, unknownHostException);
            }
        }
        if (object != null && object.equals("wss")) {
            CharSequence charSequence2;
            block14 : {
                int n4 = n2;
                if (n2 == -1) {
                    n4 = 443;
                }
                charSequence2 = null;
                object = charSequence2;
                try {
                    if (this.g != null) {
                        object = new SSLSessionCache(new File(this.g));
                    }
                }
                catch (IOException iOException) {
                    this.k.a("Failed to initialize SSL session cache", iOException, new Object[0]);
                    object = charSequence2;
                }
                object = (SSLSocket)SSLCertificateSocketFactory.getDefault((int)60000, (SSLSessionCache)object).createSocket((String)charSequence, n4);
                if (!HttpsURLConnection.getDefaultHostnameVerifier().verify((String)charSequence, object.getSession())) break block14;
                return object;
            }
            try {
                object = String.valueOf(this.f);
                charSequence2 = new StringBuilder(String.valueOf(object).length() + 39);
                charSequence2.append("Error while verifying secure socket to ");
                charSequence2.append((String)object);
                throw new bey(charSequence2.toString());
            }
            catch (IOException iOException) {
                charSequence2 = String.valueOf(this.f);
                charSequence = new StringBuilder(String.valueOf(charSequence2).length() + 38);
                charSequence.append("error while creating secure socket to ");
                charSequence.append((String)charSequence2);
                throw new bey(charSequence.toString(), iOException);
            }
            catch (UnknownHostException unknownHostException) {
                object = String.valueOf(charSequence);
                object = object.length() != 0 ? "unknown host: ".concat((String)object) : new String("unknown host: ");
                throw new bey((String)object, unknownHostException);
            }
        }
        object = (object = String.valueOf(object)).length() != 0 ? "unsupported protocol: ".concat((String)object) : new String("unsupported protocol: ");
        throw new bey((String)object);
    }

    /*
     * Exception decompiling
     */
    private final void j() {
        // This method has failed to decompile.  When submitting a bug report, please provide this stack trace, and (if you hold appropriate legal rights) the relevant class file.
        // org.benf.cfr.reader.util.ConfusedCFRException: Tried to end blocks [4[TRYBLOCK]], but top level block is 19[UNCONDITIONALDOLOOP]
        // org.benf.cfr.reader.bytecode.analysis.opgraph.Op04StructuredStatement.processEndingBlocks(Op04StructuredStatement.java:416)
        // org.benf.cfr.reader.bytecode.analysis.opgraph.Op04StructuredStatement.buildNestedBlocks(Op04StructuredStatement.java:468)
        // org.benf.cfr.reader.bytecode.analysis.opgraph.Op03SimpleStatement.createInitialStructuredBlock(Op03SimpleStatement.java:2960)
        // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisInner(CodeAnalyser.java:818)
        // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisOrWrapFail(CodeAnalyser.java:196)
        // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysis(CodeAnalyser.java:141)
        // org.benf.cfr.reader.entities.attributes.AttributeCode.analyse(AttributeCode.java:95)
        // org.benf.cfr.reader.entities.Method.analyse(Method.java:372)
        // org.benf.cfr.reader.entities.ClassFile.analyseMid(ClassFile.java:867)
        // org.benf.cfr.reader.entities.ClassFile.analyseTop(ClassFile.java:768)
        // org.benf.cfr.reader.Main.doJar(Main.java:141)
        // org.benf.cfr.reader.Main.main(Main.java:242)
        throw new IllegalStateException("Decompilation failed");
    }

    public final void a(bex bex2) {
        this.e = bex2;
    }

    final void a(bey bey2) {
        this.e.a(bey2);
        if (this.c == bew.c) {
            this.e();
        }
        this.h();
    }

    public final void a(String string2) {
        synchronized (this) {
            this.a((byte)1, string2.getBytes(b));
            return;
        }
    }

    final void a(byte[] arrby) {
        synchronized (this) {
            this.a((byte)10, arrby);
            return;
        }
    }

    final bex c() {
        return this.e;
    }

    public final void d() {
        synchronized (this) {
            if (this.c != bew.a) {
                this.e.a(new bey("connect() already called"));
                this.e();
                return;
            }
            ber ber2 = o;
            Thread thread = this.m;
            int n2 = this.l;
            StringBuilder stringBuilder = new StringBuilder(26);
            stringBuilder.append("TubeSockReader-");
            stringBuilder.append(n2);
            ber2.a(thread, stringBuilder.toString());
            this.c = bew.b;
            this.m.start();
            return;
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public final void e() {
        synchronized (this) {
            int n2 = bev.a[this.c - 1];
            switch (n2) {
                default: {
                    return;
                }
                case 5: {
                    return;
                }
                case 4: {
                    return;
                }
                case 3: {
                    try {
                        this.c = bew.d;
                        this.i.a();
                        this.i.a((byte)8, true, new byte[0]);
                        return;
                    }
                    catch (IOException iOException) {
                        this.e.a(new bey("Failed to send close frame", iOException));
                        return;
                    }
                }
                case 2: {
                    this.h();
                    return;
                }
                case 1: 
            }
            this.c = bew.e;
            return;
        }
    }

    final void f() {
        this.h();
    }

    public final void g() {
        if (this.i.b().getState() != Thread.State.NEW) {
            this.i.b().join();
        }
        this.m.join();
    }
}

