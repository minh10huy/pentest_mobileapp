/*
 * Decompiled with CFR 0_132.
 */
package com.google.android.gms.internal;

import com.google.android.gms.common.internal.ah;
import com.google.android.gms.internal.qv;
import com.google.android.gms.internal.qw;
import com.google.android.gms.internal.qx;
import com.google.android.gms.internal.rz;
import com.google.android.gms.internal.sm;
import com.google.android.gms.internal.sw;
import com.google.android.gms.internal.sy;
import java.io.Serializable;
import java.util.Map;
import java.util.Set;

public class ss
extends qv {
    private static ss a;

    public ss(qx qx2) {
        super(qx2);
    }

    private static String a(Object object) {
        if (object == null) {
            return null;
        }
        Object object2 = object;
        if (object instanceof Integer) {
            object2 = (long)((Integer)object);
        }
        if (object2 instanceof Long) {
            Serializable serializable = (Long)object2;
            if (Math.abs(serializable.longValue()) < 100L) {
                return String.valueOf(object2);
            }
            object = String.valueOf(object2).charAt(0) == '-' ? "-" : "";
            object2 = String.valueOf(Math.abs(serializable.longValue()));
            serializable = new StringBuilder();
            serializable.append((String)object);
            serializable.append(Math.round(Math.pow(10.0, object2.length() - 1)));
            serializable.append("...");
            serializable.append((String)object);
            serializable.append(Math.round(Math.pow(10.0, object2.length()) - 1.0));
            return serializable.toString();
        }
        if (object2 instanceof Boolean) {
            return String.valueOf(object2);
        }
        if (object2 instanceof Throwable) {
            return object2.getClass().getCanonicalName();
        }
        return "-";
    }

    public static ss b() {
        return a;
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @Override
    protected final void a() {
        synchronized (ss.class) {
            a = this;
            return;
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public final void a(int n2, String object, Object object2, Object object3, Object object4) {
        synchronized (this) {
            void var4_4;
            void var5_5;
            Object object5;
            ah.a(object);
            int n3 = n2;
            if (n2 < 0) {
                n3 = 0;
            }
            n2 = n3;
            if (n3 >= 9) {
                n2 = 8;
            }
            char c2 = this.k().a() ? (char)'C' : 'c';
            char c3 = "01VDIWEA?".charAt(n2);
            String string2 = qw.a;
            object = ss.c((String)object, ss.a(object5), ss.a(var4_4), ss.a(var5_5));
            object5 = new StringBuilder(String.valueOf(string2).length() + 4 + String.valueOf(object).length());
            object5.append("3");
            object5.append(c3);
            object5.append(c2);
            object5.append(string2);
            object5.append(":");
            object5.append((String)object);
            object = object5 = object5.toString();
            if (object5.length() > 1024) {
                object = object5.substring(0, 1024);
            }
            if ((object5 = this.g().m()) != null) {
                object5.z().a((String)object);
            }
            return;
        }
    }

    public final void a(sm object, String string2) {
        object = object != null ? object.toString() : "no hit data";
        string2 = String.valueOf(string2);
        string2 = string2.length() != 0 ? "Discarding hit. ".concat(string2) : new String("Discarding hit. ");
        this.d(string2, object);
    }

    public final void a(Map<String, String> object, String string2) {
        if (object != null) {
            StringBuilder stringBuilder = new StringBuilder();
            for (Map.Entry entry : object.entrySet()) {
                if (stringBuilder.length() > 0) {
                    stringBuilder.append(',');
                }
                stringBuilder.append((String)entry.getKey());
                stringBuilder.append('=');
                stringBuilder.append((String)entry.getValue());
            }
            object = stringBuilder.toString();
        } else {
            object = "no hit data";
        }
        string2 = String.valueOf(string2);
        string2 = string2.length() != 0 ? "Discarding hit. ".concat(string2) : new String("Discarding hit. ");
        this.d(string2, object);
    }
}

