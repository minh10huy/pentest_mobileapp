/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.content.Context
 */
package com.google.android.gms.internal;

import android.content.Context;
import com.google.android.gms.analytics.p;
import com.google.android.gms.common.internal.ah;
import com.google.android.gms.internal.qv;
import com.google.android.gms.internal.qx;
import com.google.android.gms.internal.rr;
import com.google.android.gms.internal.rs;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.UUID;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Future;

public final class rq
extends qv {
    private volatile String a;
    private Future<String> b;

    protected rq(qx qx2) {
        super(qx2);
    }

    /*
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    private final String a(Context context) {
        FileInputStream fileInputStream2;
        void var1_8;
        FileInputStream fileInputStream;
        block26 : {
            void var5_20;
            block25 : {
                int n2;
                byte[] arrby;
                block24 : {
                    ah.c("ClientId should be loaded from worker thread");
                    fileInputStream = fileInputStream2 = context.openFileInput("gaClientId");
                    arrby = new byte[36];
                    fileInputStream = fileInputStream2;
                    n2 = fileInputStream2.read(arrby, 0, 36);
                    fileInputStream = fileInputStream2;
                    if (fileInputStream2.available() <= 0) break block24;
                    fileInputStream = fileInputStream2;
                    this.e("clientId file seems corrupted, deleting it.");
                    fileInputStream = fileInputStream2;
                    fileInputStream2.close();
                    fileInputStream = fileInputStream2;
                    context.deleteFile("gaClientId");
                    if (fileInputStream2 == null) return null;
                    try {
                        fileInputStream2.close();
                        return null;
                    }
                    catch (IOException iOException) {
                        this.e("Failed to close client id reading stream", iOException);
                    }
                    return null;
                }
                if (n2 < 14) {
                    fileInputStream = fileInputStream2;
                    this.e("clientId file is empty, deleting it.");
                    fileInputStream = fileInputStream2;
                    fileInputStream2.close();
                    fileInputStream = fileInputStream2;
                    context.deleteFile("gaClientId");
                    if (fileInputStream2 == null) return null;
                    try {
                        fileInputStream2.close();
                        return null;
                    }
                    catch (IOException iOException) {
                        this.e("Failed to close client id reading stream", iOException);
                    }
                    return null;
                }
                fileInputStream = fileInputStream2;
                fileInputStream2.close();
                fileInputStream = fileInputStream2;
                String string2 = new String(arrby, 0, n2);
                fileInputStream = fileInputStream2;
                this.a("Read client id from disk", string2);
                if (fileInputStream2 == null) return string2;
                try {
                    fileInputStream2.close();
                    return string2;
                }
                catch (IOException iOException) {
                    this.e("Failed to close client id reading stream", iOException);
                }
                return string2;
                catch (IOException iOException) {
                    break block25;
                }
                catch (Throwable throwable) {
                    fileInputStream = null;
                    break block26;
                }
                catch (IOException iOException) {
                    fileInputStream2 = null;
                }
            }
            fileInputStream = fileInputStream2;
            this.e("Error reading client id file, deleting it", var5_20);
            fileInputStream = fileInputStream2;
            context.deleteFile("gaClientId");
            if (fileInputStream2 == null) return null;
            try {
                fileInputStream2.close();
                return null;
            }
            catch (IOException iOException) {
                this.e("Failed to close client id reading stream", iOException);
            }
            return null;
            catch (Throwable throwable) {
                // empty catch block
            }
        }
        if (fileInputStream == null) throw var1_8;
        try {
            fileInputStream.close();
            throw var1_8;
        }
        catch (IOException iOException) {
            this.e("Failed to close client id reading stream", iOException);
        }
        throw var1_8;
        catch (FileNotFoundException fileNotFoundException) {
            return null;
        }
        catch (FileNotFoundException fileNotFoundException) {}
        if (fileInputStream2 == null) return null;
        try {
            fileInputStream2.close();
            return null;
        }
        catch (IOException iOException) {
            this.e("Failed to close client id reading stream", iOException);
        }
        return null;
    }

    static /* synthetic */ String a(rq rq2) {
        return rq2.e();
    }

    /*
     * WARNING - Removed back jump from a try to a catch block - possible behaviour change.
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    private final boolean a(Context object, String string2) {
        Object object2;
        block18 : {
            block20 : {
                Object var5_14;
                block19 : {
                    Object context;
                    ah.a(string2);
                    ah.c("ClientId should be saved from worker thread");
                    Object var4_13 = null;
                    var5_14 = null;
                    object2 = context = null;
                    this.a("Storing clientId", string2);
                    object2 = context;
                    object = object.openFileOutput("gaClientId", 0);
                    object.write(string2.getBytes());
                    if (object == null) return true;
                    try {
                        object.close();
                        return true;
                    }
                    catch (IOException iOException) {
                        this.e("Failed to close clientId writing stream", iOException);
                    }
                    return true;
                    catch (Throwable throwable) {
                        object2 = object;
                        object = throwable;
                        break block18;
                    }
                    catch (IOException iOException) {
                        break block19;
                    }
                    catch (FileNotFoundException fileNotFoundException) {
                        break block20;
                    }
                    catch (Throwable throwable) {
                        break block18;
                    }
                    catch (IOException iOException) {
                        object = var4_13;
                    }
                }
                object2 = object;
                {
                    this.e("Error writing to clientId file", string2);
                    if (object == null) return false;
                }
                try {
                    object.close();
                    return false;
                }
                catch (IOException iOException) {
                    this.e("Failed to close clientId writing stream", iOException);
                }
                return false;
                catch (FileNotFoundException fileNotFoundException) {
                    object = var5_14;
                }
            }
            object2 = object;
            {
                this.e("Error creating clientId file", string2);
                if (object == null) return false;
            }
            try {
                object.close();
                return false;
            }
            catch (IOException iOException) {
                this.e("Failed to close clientId writing stream", iOException);
            }
            return false;
        }
        if (object2 == null) throw object;
        try {
            object2.close();
            throw object;
        }
        catch (IOException iOException) {
            this.e("Failed to close clientId writing stream", iOException);
        }
        throw object;
    }

    private final String e() {
        String string2;
        String string3 = string2 = UUID.randomUUID().toString().toLowerCase();
        try {
            if (!this.a(this.l().c(), string2)) {
                string3 = "0";
            }
            return string3;
        }
        catch (Exception exception) {
            this.e("Error saving clientId file", exception);
            return "0";
        }
    }

    @Override
    protected final void a() {
    }

    /*
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Converted monitor instructions to comments
     * Lifted jumps to return sites
     */
    public final String b() {
        Object object;
        block7 : {
            this.x();
            // MONITORENTER : this
            if (this.a == null) {
                this.b = this.l().a(new rr(this));
            }
            if ((object = this.b) == null) break block7;
            try {
                this.a = this.b.get();
            }
            catch (ExecutionException executionException) {
                block8 : {
                    this.e("Failed to load or generate client id", executionException);
                    break block8;
                    catch (InterruptedException interruptedException) {
                        this.d("ClientId loading or generation was interrupted", interruptedException);
                    }
                }
                this.a = "0";
            }
            if (this.a == null) {
                this.a = "0";
            }
            this.a("Loaded clientId", this.a);
            this.b = null;
        }
        object = this.a;
        // MONITOREXIT : this
        return object;
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    final String c() {
        synchronized (this) {
            this.a = null;
            this.b = this.l().a(new rs(this));
            return this.b();
        }
    }

    final String d() {
        String string2;
        String string3 = string2 = this.a(this.l().c());
        if (string2 == null) {
            string3 = this.e();
        }
        return string3;
    }
}

