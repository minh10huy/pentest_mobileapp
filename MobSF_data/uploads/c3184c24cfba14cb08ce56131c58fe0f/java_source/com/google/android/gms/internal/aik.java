/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.content.Context
 */
package com.google.android.gms.internal;

import android.content.Context;
import com.google.android.gms.common.util.f;
import com.google.android.gms.common.util.i;
import com.google.android.gms.internal.aih;
import com.google.android.gms.internal.ail;
import com.google.android.gms.internal.aim;
import com.google.android.gms.internal.aiv;
import com.google.android.gms.internal.azg;
import java.io.ByteArrayOutputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import java.util.Map;
import java.util.concurrent.LinkedBlockingQueue;

final class aik
extends Thread
implements aih {
    private static aik d;
    private final LinkedBlockingQueue<Runnable> a = new LinkedBlockingQueue();
    private volatile boolean b = false;
    private volatile boolean c = false;
    private volatile aim e;
    private final Context f;
    private final f g = i.d();

    private aik(Context context) {
        super("GAThread");
        Context context2 = context;
        if (context != null) {
            context2 = context.getApplicationContext();
        }
        this.f = context2;
        this.start();
    }

    static aik a(Context context) {
        if (d == null) {
            d = new aik(context);
        }
        return d;
    }

    static /* synthetic */ aim a(aik aik2) {
        return aik2.e;
    }

    static /* synthetic */ aim a(aik aik2, aim aim2) {
        aik2.e = aim2;
        return aim2;
    }

    static /* synthetic */ Context b(aik aik2) {
        return aik2.f;
    }

    @Override
    public final void a(Runnable runnable) {
        this.a.add(runnable);
    }

    @Override
    public final void a(String string2, String string3, String string4, Map<String, String> map, String string5) {
        this.a(new ail(this, this, this.g.a(), string2, string3, string4, map, string5));
    }

    /*
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    @Override
    public final void run() {
        do {
            Object object;
            Throwable throwable22222;
            block5 : {
                boolean bl2 = this.c;
                try {
                    object = this.a.take();
                    if (this.b) continue;
                    object.run();
                }
                catch (Throwable throwable22222) {
                    break block5;
                }
                catch (InterruptedException interruptedException) {
                    aiv.c(interruptedException.toString());
                }
                continue;
            }
            ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
            PrintStream printStream = new PrintStream(byteArrayOutputStream);
            azg.a(throwable22222, printStream);
            printStream.flush();
            object = String.valueOf(new String(byteArrayOutputStream.toByteArray()));
            object = object.length() != 0 ? "Error on Google TagManager Thread: ".concat((String)object) : new String("Error on Google TagManager Thread: ");
            aiv.a((String)object);
            aiv.a("Google TagManager is shutting down.");
            this.b = true;
        } while (true);
    }
}

