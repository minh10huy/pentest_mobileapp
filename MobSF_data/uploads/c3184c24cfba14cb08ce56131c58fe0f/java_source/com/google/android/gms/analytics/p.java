/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.content.Context
 *  android.content.pm.ApplicationInfo
 *  android.content.pm.PackageInfo
 *  android.content.pm.PackageManager
 *  android.content.pm.PackageManager$NameNotFoundException
 *  android.content.res.Resources
 *  android.net.Uri
 *  android.os.Process
 *  android.text.TextUtils
 *  android.util.DisplayMetrics
 *  android.util.Log
 */
package com.google.android.gms.analytics;

import android.content.Context;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.res.Resources;
import android.net.Uri;
import android.os.Process;
import android.text.TextUtils;
import android.util.DisplayMetrics;
import android.util.Log;
import com.google.android.gms.analytics.j;
import com.google.android.gms.analytics.l;
import com.google.android.gms.analytics.q;
import com.google.android.gms.analytics.r;
import com.google.android.gms.analytics.s;
import com.google.android.gms.analytics.t;
import com.google.android.gms.common.internal.ah;
import com.google.android.gms.internal.qa;
import com.google.android.gms.internal.qf;
import com.google.android.gms.internal.tf;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.Callable;
import java.util.concurrent.CopyOnWriteArrayList;
import java.util.concurrent.Future;
import java.util.concurrent.FutureTask;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.RunnableFuture;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;

public final class p {
    private static volatile p a;
    private final Context b;
    private final List<s> c;
    private final j d;
    private final a e;
    private volatile qa f;
    private Thread.UncaughtExceptionHandler g;

    private p(Context context) {
        context = context.getApplicationContext();
        ah.a(context);
        this.b = context;
        this.e = new a();
        this.c = new CopyOnWriteArrayList<s>();
        this.d = new j();
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public static p a(Context context) {
        ah.a(context);
        if (a != null) return a;
        synchronized (p.class) {
            if (a != null) return a;
            a = new p(context);
            return a;
        }
    }

    static /* synthetic */ List a(p p2) {
        return p2.c;
    }

    static /* synthetic */ void a(p p2, l l2) {
        p.b(l2);
    }

    static /* synthetic */ Thread.UncaughtExceptionHandler b(p p2) {
        return p2.g;
    }

    private static void b(l l2) {
        ah.c("deliver should be called from worker thread");
        ah.b(l2.f(), "Measurement must be submitted");
        Object object = l2.c();
        if (object.isEmpty()) {
            return;
        }
        HashSet<Uri> hashSet = new HashSet<Uri>();
        object = object.iterator();
        while (object.hasNext()) {
            t t2 = (t)object.next();
            Uri uri = t2.a();
            if (hashSet.contains((Object)uri)) continue;
            hashSet.add(uri);
            t2.a(l2);
        }
    }

    public static void d() {
        if (Thread.currentThread() instanceof c) {
            return;
        }
        throw new IllegalStateException("Call expected from worker thread");
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public final qa a() {
        if (this.f == null) {
            synchronized (this) {
                if (this.f == null) {
                    String string2;
                    qa qa2;
                    CharSequence charSequence;
                    block8 : {
                        qa2 = new qa();
                        PackageManager packageManager = this.b.getPackageManager();
                        String string3 = this.b.getPackageName();
                        qa2.c(string3);
                        qa2.d(packageManager.getInstallerPackageName(string3));
                        CharSequence charSequence2 = null;
                        String string4 = string3;
                        try {
                            PackageInfo packageInfo = packageManager.getPackageInfo(this.b.getPackageName(), 0);
                            string2 = string3;
                            charSequence = charSequence2;
                            if (packageInfo != null) {
                                string4 = string3;
                                charSequence = packageManager.getApplicationLabel(packageInfo.applicationInfo);
                                string2 = string3;
                                string4 = string3;
                                if (!TextUtils.isEmpty((CharSequence)charSequence)) {
                                    string4 = string3;
                                    string2 = charSequence.toString();
                                }
                                string4 = string2;
                                charSequence = packageInfo.versionName;
                            }
                            break block8;
                        }
                        catch (PackageManager.NameNotFoundException nameNotFoundException) {}
                        string2 = String.valueOf(string4);
                        string2 = string2.length() != 0 ? "Error retrieving package info: appName set to ".concat(string2) : new String("Error retrieving package info: appName set to ");
                        Log.e((String)"GAv4", (String)string2);
                        charSequence = charSequence2;
                        string2 = string4;
                    }
                    qa2.a(string2);
                    qa2.b((String)charSequence);
                    this.f = qa2;
                }
            }
        }
        return this.f;
    }

    public final <V> Future<V> a(Callable<V> object) {
        ah.a(object);
        if (Thread.currentThread() instanceof c) {
            object = new FutureTask<V>((Callable<V>)object);
            object.run();
            return object;
        }
        return this.e.submit(object);
    }

    final void a(l l2) {
        if (!l2.i()) {
            if (!l2.f()) {
                l2 = l2.a();
                l2.g();
                this.e.execute(new q(this, l2));
                return;
            }
            throw new IllegalStateException("Measurement can only be submitted once");
        }
        throw new IllegalStateException("Measurement prototype can't be submitted");
    }

    public final void a(Runnable runnable) {
        ah.a(runnable);
        this.e.submit(runnable);
    }

    public final void a(Thread.UncaughtExceptionHandler uncaughtExceptionHandler) {
        this.g = uncaughtExceptionHandler;
    }

    public final qf b() {
        DisplayMetrics displayMetrics = this.b.getResources().getDisplayMetrics();
        qf qf2 = new qf();
        qf2.a(tf.a(Locale.getDefault()));
        qf2.b = displayMetrics.widthPixels;
        qf2.c = displayMetrics.heightPixels;
        return qf2;
    }

    public final Context c() {
        return this.b;
    }

    final class a
    extends ThreadPoolExecutor {
        public a() {
            super(1, 1, 1L, TimeUnit.MINUTES, new LinkedBlockingQueue<Runnable>());
            this.setThreadFactory(new b(null));
            this.allowCoreThreadTimeOut(true);
        }

        @Override
        protected final <T> RunnableFuture<T> newTaskFor(Runnable runnable, T t2) {
            return new r(this, runnable, t2);
        }
    }

    static final class b
    implements ThreadFactory {
        private static final AtomicInteger a = new AtomicInteger();

        private b() {
        }

        /* synthetic */ b(q q2) {
            this();
        }

        @Override
        public final Thread newThread(Runnable runnable) {
            int n2 = a.incrementAndGet();
            StringBuilder stringBuilder = new StringBuilder(23);
            stringBuilder.append("measurement-");
            stringBuilder.append(n2);
            return new c(runnable, stringBuilder.toString());
        }
    }

    static final class c
    extends Thread {
        c(Runnable runnable, String string2) {
            super(runnable, string2);
        }

        @Override
        public final void run() {
            Process.setThreadPriority((int)10);
            super.run();
        }
    }

}

