/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.content.Context
 *  android.os.StrictMode
 *  android.os.StrictMode$ThreadPolicy
 *  android.os.StrictMode$ThreadPolicy$Builder
 */
package com.google.android.gms.internal;

import android.content.Context;
import android.os.StrictMode;
import com.google.android.gms.internal.ae;
import com.google.android.gms.internal.ak;
import com.google.android.gms.internal.kj;
import java.util.concurrent.Callable;

@ak
public final class jr {
    /*
     * WARNING - Removed back jump from a try to a catch block - possible behaviour change.
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    public static <T> T a(Context context, Callable<T> callable) {
        Throwable throwable2222;
        StrictMode.ThreadPolicy threadPolicy = StrictMode.getThreadPolicy();
        StrictMode.setThreadPolicy((StrictMode.ThreadPolicy)new StrictMode.ThreadPolicy.Builder(threadPolicy).permitDiskReads().permitDiskWrites().build());
        callable = callable.call();
        StrictMode.setThreadPolicy((StrictMode.ThreadPolicy)threadPolicy);
        return (T)callable;
        {
            catch (Throwable throwable2222) {
            }
            catch (Throwable throwable3) {}
            {
                kj.b("Unexpected exception.", throwable3);
                ae.a(context).a(throwable3, "StrictModeUtil.runWithLaxStrictMode");
            }
            StrictMode.setThreadPolicy((StrictMode.ThreadPolicy)threadPolicy);
            return null;
        }
        StrictMode.setThreadPolicy((StrictMode.ThreadPolicy)threadPolicy);
        throw throwable2222;
    }

    public static <T> T b(Context context, Callable<T> callable) {
        context = StrictMode.getThreadPolicy();
        try {
            StrictMode.setThreadPolicy((StrictMode.ThreadPolicy)new StrictMode.ThreadPolicy.Builder((StrictMode.ThreadPolicy)context).permitDiskReads().permitDiskWrites().build());
            callable = callable.call();
            return (T)callable;
        }
        finally {
            StrictMode.setThreadPolicy((StrictMode.ThreadPolicy)context);
        }
    }
}

