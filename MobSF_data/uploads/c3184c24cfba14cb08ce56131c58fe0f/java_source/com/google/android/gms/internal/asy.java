/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.os.Bundle
 */
package com.google.android.gms.internal;

import android.os.Bundle;
import com.google.android.gms.common.internal.ah;
import com.google.android.gms.internal.aiv;
import com.google.android.gms.internal.ajm;
import com.google.android.gms.internal.alb;
import com.google.android.gms.internal.asj;
import com.google.android.gms.internal.asm;
import com.google.android.gms.internal.asn;
import com.google.android.gms.internal.aso;
import com.google.android.gms.internal.asp;
import com.google.android.gms.internal.asq;
import com.google.android.gms.internal.asu;
import com.google.android.gms.internal.asv;
import com.google.android.gms.internal.asw;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

public final class asy {
    public static Bundle a(Map<String, asj<?>> object) {
        if (object == null) {
            return null;
        }
        Bundle bundle = new Bundle(object.size());
        for (Map.Entry entry : object.entrySet()) {
            if (entry.getValue() instanceof asw) {
                bundle.putString((String)entry.getKey(), (String)((asw)entry.getValue()).b());
                continue;
            }
            if (entry.getValue() instanceof asm) {
                bundle.putBoolean((String)entry.getKey(), ((Boolean)((asm)entry.getValue()).b()).booleanValue());
                continue;
            }
            if (entry.getValue() instanceof asn) {
                bundle.putDouble((String)entry.getKey(), ((Double)((asn)entry.getValue()).b()).doubleValue());
                continue;
            }
            if (entry.getValue() instanceof asu) {
                bundle.putBundle((String)entry.getKey(), asy.a((Map)((asu)entry.getValue()).b()));
                continue;
            }
            throw new IllegalArgumentException(String.format("Invalid param type for key '%s'. Only boolean, double and string types and maps of thereof are supported.", entry.getKey()));
        }
        return bundle;
    }

    public static asj a(ajm ajm2, asj asj2) {
        ah.a(asj2);
        asj asj3 = asj2;
        if (!asy.c(asj2)) {
            asj3 = asj2;
            if (!(asj2 instanceof aso)) {
                asj3 = asj2;
                if (!(asj2 instanceof asq)) {
                    if (asj2 instanceof asu) {
                        asj3 = asj2;
                    } else if (asj2 instanceof asv) {
                        asj3 = asy.a(ajm2, (asv)asj2);
                    } else {
                        throw new UnsupportedOperationException("Attempting to evaluate unknown type");
                    }
                }
            }
        }
        if (asj3 != null) {
            if (!(asj3 instanceof asv)) {
                return asj3;
            }
            throw new IllegalArgumentException("AbstractType evaluated to illegal type Statement.");
        }
        throw new IllegalArgumentException("AbstractType evaluated to Java null");
    }

    public static asj a(ajm object, asv object2) {
        String string2 = object2.d();
        object2 = object2.e();
        asj<?> asj2 = object.b(string2);
        if (asj2 != null) {
            if (asj2 instanceof aso) {
                return ((alb)((aso)asj2).b()).b((ajm)object, object2.toArray(new asj[object2.size()]));
            }
            object = new StringBuilder(String.valueOf(string2).length() + 29);
            object.append("Function '");
            object.append(string2);
            object.append("' is not a function");
            throw new UnsupportedOperationException(object.toString());
        }
        object = new StringBuilder(String.valueOf(string2).length() + 28);
        object.append("Function '");
        object.append(string2);
        object.append("' is not supported");
        throw new UnsupportedOperationException(object.toString());
    }

    public static asj<?> a(Object bundle) {
        if (bundle == null) {
            return asp.d;
        }
        if (bundle instanceof asj) {
            return (asj)bundle;
        }
        if (bundle instanceof Boolean) {
            return new asm((Boolean)bundle);
        }
        if (bundle instanceof Short) {
            return new asn(((Short)bundle).doubleValue());
        }
        if (bundle instanceof Integer) {
            return new asn(((Integer)bundle).doubleValue());
        }
        if (bundle instanceof Long) {
            return new asn(((Long)bundle).doubleValue());
        }
        if (bundle instanceof Float) {
            return new asn(((Float)bundle).doubleValue());
        }
        if (bundle instanceof Double) {
            return new asn((Double)bundle);
        }
        if (bundle instanceof Byte) {
            return new asw(bundle.toString());
        }
        if (bundle instanceof Character) {
            return new asw(bundle.toString());
        }
        if (bundle instanceof String) {
            return new asw((String)bundle);
        }
        if (bundle instanceof List) {
            ArrayList arrayList = new ArrayList();
            bundle = ((List)bundle).iterator();
            while (bundle.hasNext()) {
                arrayList.add(asy.a(bundle.next()));
            }
            return new asq(arrayList);
        }
        if (bundle instanceof Map) {
            HashMap hashMap = new HashMap();
            for (Map.Entry entry : ((Map)bundle).entrySet()) {
                ah.b(entry.getKey() instanceof String);
                hashMap.put((String)entry.getKey(), asy.a(entry.getValue()));
            }
            return new asu(hashMap);
        }
        if (bundle instanceof Bundle) {
            HashMap hashMap = new HashMap();
            bundle = (Bundle)bundle;
            for (String string2 : bundle.keySet()) {
                hashMap.put(string2, asy.a(bundle.get(string2)));
            }
            return new asu(hashMap);
        }
        bundle = String.valueOf(bundle.getClass());
        StringBuilder stringBuilder = new StringBuilder(String.valueOf(bundle).length() + 20);
        stringBuilder.append("Type not supported: ");
        stringBuilder.append((String)bundle);
        throw new UnsupportedOperationException(stringBuilder.toString());
    }

    public static asp a(ajm ajm2, List<asj<?>> object) {
        object = object.iterator();
        while (object.hasNext()) {
            asj asj2 = (asj)object.next();
            ah.b(asj2 instanceof asv);
            if (!asy.d(asj2 = asy.a(ajm2, asj2))) continue;
            return (asp)asj2;
        }
        return asp.e;
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Lifted jumps to return sites
     */
    public static Object a(asj<?> var0) {
        block12 : {
            block10 : {
                block11 : {
                    if (var0 == null) {
                        return null;
                    }
                    if (var0 == asp.d) {
                        return null;
                    }
                    if (var0 instanceof asm) {
                        return (Boolean)((asm)var0).b();
                    }
                    if (var0 instanceof asn) {
                        var0_1 = (asn)var0;
                        var1_11 = (Double)var0_1.b();
                        if (Double.isInfinite(var1_11) != false) return ((Double)var0_1.b()).toString();
                        if (var1_11 - Math.floor(var1_11) >= 1.0E-5) return ((Double)var0_1.b()).toString();
                        return (int)var1_11;
                    }
                    if (var0 instanceof asw) {
                        return (String)((asw)var0).b();
                    }
                    if (var0 instanceof asq) break block11;
                    if (var0 instanceof asu) break block12;
                    var0_9 = String.valueOf(var0.getClass());
                    var3_13 = new StringBuilder(String.valueOf(var0_9).length() + 49);
                    var3_13.append("Converting to Object from unknown abstract type: ");
                    var3_13.append(var0_9);
                    var0_10 = var3_13.toString();
                    ** GOTO lbl39
                }
                var3_12 = new ArrayList<E>();
                var0_2 = ((List)((asq)var0).b()).iterator();
                while (var0_2.hasNext() != false) {
                    var4_14 = (asj)var0_2.next();
                    var5_16 = asy.a(var4_14);
                    if (var5_16 == null) {
                        var3_12 = "Failure to convert a list element to object: %s (%s)";
                        var0_3 = new Object[]{var4_14, var4_14.getClass().getCanonicalName()};
                        break block10;
                    }
                    var3_12.add(var5_16);
                }
                return var3_12;
            }
lbl37: // 2 sources:
            do {
                var0_5 = String.format((String)var3_12, (Object[])var0_4);
lbl39: // 2 sources:
                aiv.a((String)var0_6);
                return null;
                break;
            } while (true);
        }
        var3_12 = new HashMap<K, V>();
        var0_7 = ((Map)((asu)var0).b()).entrySet().iterator();
        while (var0_7.hasNext() != false) {
            var4_15 = var0_7.next();
            var5_17 = asy.a((asj)var4_15.getValue());
            if (var5_17 == null) {
                var3_12 = "Failure to convert a map's value to object: %s (%s)";
                var0_8 = new Object[]{var4_15.getValue(), ((asj)var4_15.getValue()).getClass().getCanonicalName()};
                ** continue;
            }
            var3_12.put((String)var4_15.getKey(), var5_17);
        }
        return var3_12;
    }

    /*
     * Enabled aggressive block sorting
     */
    private static List<Object> a(List<Object> object) {
        ArrayList<Object> arrayList = new ArrayList<Object>();
        Iterator iterator = object.iterator();
        while (iterator.hasNext()) {
            Object e2 = iterator.next();
            if (e2 instanceof Bundle) {
                object = asy.a((Bundle)e2);
            } else {
                object = e2;
                if (e2 instanceof List) {
                    object = asy.a((List)e2);
                }
            }
            arrayList.add(object);
        }
        return arrayList;
    }

    /*
     * Enabled aggressive block sorting
     */
    public static Map<String, Object> a(Bundle bundle) {
        HashMap<String, Object> hashMap = new HashMap<String, Object>();
        Iterator iterator = bundle.keySet().iterator();
        while (iterator.hasNext()) {
            Object object;
            String string2 = (String)iterator.next();
            Map<String, Object> map = bundle.get(string2);
            if (map instanceof Bundle) {
                object = asy.a((Bundle)map);
            } else {
                object = map;
                if (map instanceof List) {
                    object = asy.a((List)((Object)map));
                }
            }
            hashMap.put(string2, object);
        }
        return hashMap;
    }

    public static asj b(asj<?> asj2) {
        if (!(asj2 instanceof asu)) {
            return asj2;
        }
        Object object = new HashSet();
        Map map = (Map)((asu)asj2).b();
        for (Map.Entry entry : map.entrySet()) {
            if (entry.getValue() != asp.e) continue;
            object.add((String)entry.getKey());
        }
        object = object.iterator();
        while (object.hasNext()) {
            map.remove((String)object.next());
        }
        return asj2;
    }

    public static boolean c(asj asj2) {
        if (!(asj2 instanceof asm) && !(asj2 instanceof asn)) {
            if (asj2 instanceof asw) {
                return true;
            }
            if (asj2 != asp.d) {
                if (asj2 == asp.e) {
                    return true;
                }
                return false;
            }
        }
        return true;
    }

    public static boolean d(asj asj2) {
        if (!(asj2 == asp.c || asj2 == asp.b || asj2 instanceof asp && ((asp)asj2).d())) {
            return false;
        }
        return true;
    }
}

