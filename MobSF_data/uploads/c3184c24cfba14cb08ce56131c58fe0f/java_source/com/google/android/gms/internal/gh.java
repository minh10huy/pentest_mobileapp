/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  org.apache.http.Header
 *  org.apache.http.HttpEntity
 *  org.apache.http.HttpResponse
 *  org.apache.http.StatusLine
 *  org.apache.http.conn.ConnectTimeoutException
 */
package com.google.android.gms.internal;

import com.google.android.gms.internal.bqh;
import com.google.android.gms.internal.bwe;
import com.google.android.gms.internal.hi;
import com.google.android.gms.internal.pq;
import com.google.android.gms.internal.qp;
import java.io.IOException;
import java.io.InputStream;
import java.net.SocketTimeoutException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import org.apache.http.Header;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.StatusLine;
import org.apache.http.conn.ConnectTimeoutException;

final class gh
extends hi {
    private final qp a;

    gh(qp qp2) {
        this.a = qp2;
    }

    @Override
    public final pq a(bwe<?> object, Map<String, String> arrheader) {
        try {
            object = this.a.b((bwe<?>)object, (Map<String, String>)arrheader);
        }
        catch (ConnectTimeoutException connectTimeoutException) {
            throw new SocketTimeoutException(connectTimeoutException.getMessage());
        }
        int n2 = object.getStatusLine().getStatusCode();
        arrheader = object.getAllHeaders();
        ArrayList<bqh> arrayList = new ArrayList<bqh>(arrheader.length);
        for (Header header : arrheader) {
            arrayList.add(new bqh(header.getName(), header.getValue()));
        }
        if (object.getEntity() == null) {
            return new pq(n2, arrayList);
        }
        long l2 = object.getEntity().getContentLength();
        if ((long)((int)l2) == l2) {
            return new pq(n2, arrayList, (int)object.getEntity().getContentLength(), object.getEntity().getContent());
        }
        object = new StringBuilder(40);
        object.append("Response too large: ");
        object.append(l2);
        throw new IOException(object.toString());
    }
}

