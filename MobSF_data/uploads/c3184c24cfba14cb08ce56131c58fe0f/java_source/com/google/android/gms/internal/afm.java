/*
 * Decompiled with CFR 0_132.
 */
package com.google.android.gms.internal;

import com.google.android.gms.internal.afl;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.InetAddress;
import java.net.SocketAddress;
import java.nio.channels.SocketChannel;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import javax.net.ssl.HandshakeCompletedListener;
import javax.net.ssl.SSLSession;
import javax.net.ssl.SSLSocket;

final class afm
extends SSLSocket {
    private final SSLSocket a;

    afm(afl afl2, SSLSocket sSLSocket) {
        this.a = sSLSocket;
    }

    @Override
    public final void addHandshakeCompletedListener(HandshakeCompletedListener handshakeCompletedListener) {
        this.a.addHandshakeCompletedListener(handshakeCompletedListener);
    }

    @Override
    public final void bind(SocketAddress socketAddress) {
        this.a.bind(socketAddress);
    }

    @Override
    public final void close() {
        synchronized (this) {
            this.a.close();
            return;
        }
    }

    @Override
    public final void connect(SocketAddress socketAddress) {
        this.a.connect(socketAddress);
    }

    @Override
    public final void connect(SocketAddress socketAddress, int n2) {
        this.a.connect(socketAddress, n2);
    }

    public final boolean equals(Object object) {
        return this.a.equals(object);
    }

    @Override
    public final SocketChannel getChannel() {
        return this.a.getChannel();
    }

    @Override
    public final boolean getEnableSessionCreation() {
        return this.a.getEnableSessionCreation();
    }

    @Override
    public final String[] getEnabledCipherSuites() {
        return this.a.getEnabledCipherSuites();
    }

    @Override
    public final String[] getEnabledProtocols() {
        return this.a.getEnabledProtocols();
    }

    @Override
    public final InetAddress getInetAddress() {
        return this.a.getInetAddress();
    }

    @Override
    public final InputStream getInputStream() {
        return this.a.getInputStream();
    }

    @Override
    public final boolean getKeepAlive() {
        return this.a.getKeepAlive();
    }

    @Override
    public final InetAddress getLocalAddress() {
        return this.a.getLocalAddress();
    }

    @Override
    public final int getLocalPort() {
        return this.a.getLocalPort();
    }

    @Override
    public final SocketAddress getLocalSocketAddress() {
        return this.a.getLocalSocketAddress();
    }

    @Override
    public final boolean getNeedClientAuth() {
        return this.a.getNeedClientAuth();
    }

    @Override
    public final boolean getOOBInline() {
        return this.a.getOOBInline();
    }

    @Override
    public final OutputStream getOutputStream() {
        return this.a.getOutputStream();
    }

    @Override
    public final int getPort() {
        return this.a.getPort();
    }

    @Override
    public final int getReceiveBufferSize() {
        synchronized (this) {
            int n2 = this.a.getReceiveBufferSize();
            return n2;
        }
    }

    @Override
    public final SocketAddress getRemoteSocketAddress() {
        return this.a.getRemoteSocketAddress();
    }

    @Override
    public final boolean getReuseAddress() {
        return this.a.getReuseAddress();
    }

    @Override
    public final int getSendBufferSize() {
        synchronized (this) {
            int n2 = this.a.getSendBufferSize();
            return n2;
        }
    }

    @Override
    public final SSLSession getSession() {
        return this.a.getSession();
    }

    @Override
    public final int getSoLinger() {
        return this.a.getSoLinger();
    }

    @Override
    public final int getSoTimeout() {
        synchronized (this) {
            int n2 = this.a.getSoTimeout();
            return n2;
        }
    }

    @Override
    public final String[] getSupportedCipherSuites() {
        return this.a.getSupportedCipherSuites();
    }

    @Override
    public final String[] getSupportedProtocols() {
        return this.a.getSupportedProtocols();
    }

    @Override
    public final boolean getTcpNoDelay() {
        return this.a.getTcpNoDelay();
    }

    @Override
    public final int getTrafficClass() {
        return this.a.getTrafficClass();
    }

    @Override
    public final boolean getUseClientMode() {
        return this.a.getUseClientMode();
    }

    @Override
    public final boolean getWantClientAuth() {
        return this.a.getWantClientAuth();
    }

    @Override
    public final boolean isBound() {
        return this.a.isBound();
    }

    @Override
    public final boolean isClosed() {
        return this.a.isClosed();
    }

    @Override
    public final boolean isConnected() {
        return this.a.isConnected();
    }

    @Override
    public final boolean isInputShutdown() {
        return this.a.isInputShutdown();
    }

    @Override
    public final boolean isOutputShutdown() {
        return this.a.isOutputShutdown();
    }

    @Override
    public final void removeHandshakeCompletedListener(HandshakeCompletedListener handshakeCompletedListener) {
        this.a.removeHandshakeCompletedListener(handshakeCompletedListener);
    }

    @Override
    public final void sendUrgentData(int n2) {
        this.a.sendUrgentData(n2);
    }

    @Override
    public final void setEnableSessionCreation(boolean bl2) {
        this.a.setEnableSessionCreation(bl2);
    }

    @Override
    public final void setEnabledCipherSuites(String[] arrstring) {
        this.a.setEnabledCipherSuites(arrstring);
    }

    @Override
    public final void setEnabledProtocols(String[] object) {
        String[] arrstring = object;
        if (object != null) {
            arrstring = object;
            if (Arrays.asList(object).contains("SSLv3")) {
                object = new ArrayList<String>(Arrays.asList(this.a.getEnabledProtocols()));
                if (object.size() > 1) {
                    object.remove("SSLv3");
                }
                arrstring = object.toArray(new String[object.size()]);
            }
        }
        this.a.setEnabledProtocols(arrstring);
    }

    @Override
    public final void setKeepAlive(boolean bl2) {
        this.a.setKeepAlive(bl2);
    }

    @Override
    public final void setNeedClientAuth(boolean bl2) {
        this.a.setNeedClientAuth(bl2);
    }

    @Override
    public final void setOOBInline(boolean bl2) {
        this.a.setOOBInline(bl2);
    }

    @Override
    public final void setPerformancePreferences(int n2, int n3, int n4) {
        this.a.setPerformancePreferences(n2, n3, n4);
    }

    @Override
    public final void setReceiveBufferSize(int n2) {
        synchronized (this) {
            this.a.setReceiveBufferSize(n2);
            return;
        }
    }

    @Override
    public final void setReuseAddress(boolean bl2) {
        this.a.setReuseAddress(bl2);
    }

    @Override
    public final void setSendBufferSize(int n2) {
        synchronized (this) {
            this.a.setSendBufferSize(n2);
            return;
        }
    }

    @Override
    public final void setSoLinger(boolean bl2, int n2) {
        this.a.setSoLinger(bl2, n2);
    }

    @Override
    public final void setSoTimeout(int n2) {
        synchronized (this) {
            this.a.setSoTimeout(n2);
            return;
        }
    }

    @Override
    public final void setTcpNoDelay(boolean bl2) {
        this.a.setTcpNoDelay(bl2);
    }

    @Override
    public final void setTrafficClass(int n2) {
        this.a.setTrafficClass(n2);
    }

    @Override
    public final void setUseClientMode(boolean bl2) {
        this.a.setUseClientMode(bl2);
    }

    @Override
    public final void setWantClientAuth(boolean bl2) {
        this.a.setWantClientAuth(bl2);
    }

    @Override
    public final void shutdownInput() {
        this.a.shutdownInput();
    }

    @Override
    public final void shutdownOutput() {
        this.a.shutdownOutput();
    }

    @Override
    public final void startHandshake() {
        this.a.startHandshake();
    }

    @Override
    public final String toString() {
        return this.a.toString();
    }
}

