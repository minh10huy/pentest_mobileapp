/*
 * Decompiled with CFR 0_132.
 */
package com.google.android.gms.internal;

import com.google.android.gms.internal.ayi;
import com.google.android.gms.internal.ayj;
import com.google.android.gms.internal.aym;
import com.google.android.gms.internal.ayq;
import com.google.android.gms.internal.ayr;
import com.google.android.gms.internal.ays;
import java.math.BigInteger;
import java.security.GeneralSecurityException;
import java.security.InvalidAlgorithmParameterException;
import java.security.Key;
import java.security.KeyFactory;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.NoSuchAlgorithmException;
import java.security.PublicKey;
import java.security.interfaces.ECPrivateKey;
import java.security.interfaces.ECPublicKey;
import java.security.spec.AlgorithmParameterSpec;
import java.security.spec.ECField;
import java.security.spec.ECFieldFp;
import java.security.spec.ECParameterSpec;
import java.security.spec.ECPoint;
import java.security.spec.ECPublicKeySpec;
import java.security.spec.EllipticCurve;
import java.security.spec.KeySpec;
import javax.crypto.KeyAgreement;

public final class ayh {
    public static int a(EllipticCurve ellipticCurve) {
        return (ayh.b(ellipticCurve).subtract(BigInteger.ONE).bitLength() + 7) / 8;
    }

    private static BigInteger a(BigInteger object, boolean bl2, EllipticCurve object2) {
        BigInteger bigInteger = ayh.b((EllipticCurve)object2);
        Object object3 = object2.getA();
        object2 = object2.getB();
        object = object.multiply((BigInteger)object).add((BigInteger)object3).multiply((BigInteger)object).add((BigInteger)object2).mod(bigInteger);
        if (bigInteger.signum() == 1) {
            block14 : {
                BigInteger bigInteger2 = object.mod(bigInteger);
                object2 = null;
                if (bigInteger2.equals(BigInteger.ZERO)) {
                    object2 = BigInteger.ZERO;
                } else {
                    if (bigInteger.testBit(0) && bigInteger.testBit(1)) {
                        object = bigInteger2.modPow(bigInteger.add(BigInteger.ONE).shiftRight(2), bigInteger);
                    } else {
                        object = object2;
                        if (bigInteger.testBit(0)) {
                            object = object2;
                            if (!bigInteger.testBit(1)) {
                                BigInteger bigInteger3;
                                int n2;
                                block15 : {
                                    block16 : {
                                        object = BigInteger.ONE;
                                        object3 = bigInteger.subtract(BigInteger.ONE).shiftRight(1);
                                        n2 = 0;
                                        do {
                                            int n3;
                                            if ((bigInteger3 = object.multiply((BigInteger)object).subtract(bigInteger2).mod(bigInteger)).equals(BigInteger.ZERO)) {
                                                object2 = object;
                                                break block14;
                                            }
                                            object2 = bigInteger3.modPow((BigInteger)object3, bigInteger);
                                            if (object2.add(BigInteger.ONE).equals(bigInteger)) break block15;
                                            if (!object2.equals(BigInteger.ONE)) break block16;
                                            object2 = object.add(BigInteger.ONE);
                                            n2 = n3 = n2 + 1;
                                            object = object2;
                                            if (n3 != 128) continue;
                                            if (!bigInteger.isProbablePrime(80)) break;
                                            n2 = n3;
                                            object = object2;
                                        } while (true);
                                        throw new InvalidAlgorithmParameterException("p is not prime");
                                    }
                                    throw new InvalidAlgorithmParameterException("p is not prime");
                                }
                                BigInteger bigInteger4 = bigInteger.add(BigInteger.ONE).shiftRight(1);
                                object2 = BigInteger.ONE;
                                object3 = object;
                                for (n2 = bigInteger4.bitLength() - 2; n2 >= 0; --n2) {
                                    BigInteger bigInteger5 = object3.multiply((BigInteger)object2);
                                    BigInteger bigInteger6 = object3.multiply((BigInteger)object3).add(object2.multiply((BigInteger)object2).mod(bigInteger).multiply(bigInteger3)).mod(bigInteger);
                                    bigInteger5 = bigInteger5.add(bigInteger5).mod(bigInteger);
                                    object3 = bigInteger6;
                                    object2 = bigInteger5;
                                    if (!bigInteger4.testBit(n2)) continue;
                                    object3 = bigInteger6.multiply((BigInteger)object).add(bigInteger5.multiply(bigInteger3)).mod(bigInteger);
                                    object2 = object.multiply(bigInteger5).add(bigInteger6).mod(bigInteger);
                                }
                                object = object3;
                            }
                        }
                    }
                    object2 = object;
                    if (object != null) {
                        if (object.multiply((BigInteger)object).mod(bigInteger).compareTo(bigInteger2) == 0) {
                            object2 = object;
                        } else {
                            throw new GeneralSecurityException("Could not find a modular square root");
                        }
                    }
                }
            }
            object = object2;
            if (!object2.testBit(0)) {
                object = bigInteger.subtract((BigInteger)object2).mod(bigInteger);
            }
            return object;
        }
        throw new InvalidAlgorithmParameterException("p must be positive");
    }

    public static KeyPair a(ECParameterSpec eCParameterSpec) {
        KeyPairGenerator keyPairGenerator = aym.d.a("EC");
        keyPairGenerator.initialize(eCParameterSpec);
        return keyPairGenerator.generateKeyPair();
    }

    public static ECPublicKey a(ayj object, byte[] object2, byte[] arrby) {
        object = ayh.a((ayj)((Object)object));
        object2 = new ECPoint(new BigInteger(1, (byte[])object2), new BigInteger(1, arrby));
        ayh.a((ECPoint)object2, object.getCurve());
        object = new ECPublicKeySpec((ECPoint)object2, (ECParameterSpec)object);
        return (ECPublicKey)aym.e.a("EC").generatePublic((KeySpec)object);
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    public static ECParameterSpec a(ayj object) {
        String string2;
        String string3;
        void var0_3;
        String string4;
        String string5;
        switch (ayi.b[object.ordinal()]) {
            default: {
                String string6 = String.valueOf(object);
                StringBuilder stringBuilder = new StringBuilder(String.valueOf(string6).length() + 22);
                stringBuilder.append("curve not implemented:");
                stringBuilder.append(string6);
                throw new NoSuchAlgorithmException(stringBuilder.toString());
            }
            case 3: {
                string3 = "6864797660130609714981900799081393217269435300143305409394463459185543183397656052122559640661454554977296311391480858037121987999716643812574028291115057151";
                String string7 = "6864797660130609714981900799081393217269435300143305409394463459185543183397655394245057746333217197532963996371363321113864768612440380340372808892707005449";
                string2 = "051953eb9618e1c9a1f929a21a0b68540eea2da725b99b315f3b8b489918ef109e156193951ec7e937b1652c0bd3bb1bf073573df883d2c34f1ef451fd46b503f00";
                string4 = "c6858e06b70404e9cd9e3ecb662395b4429c648139053fb521f828af606b4d3dbaa14b5e77efe75928fe1dc127a2ffa8de3348b3c1856a429bf97e7e31c2e5bd66";
                string5 = "11839296a789a3bc0045c8a5fb42c7d1bd998f54449579b446817afbd17273e662c97ee72995ef42640c550b9013fad0761353c7086a272c24088be94769fd16650";
                do {
                    return ayh.a(string3, (String)var0_3, string2, string4, string5);
                    break;
                } while (true);
            }
            case 2: {
                string3 = "39402006196394479212279040100143613805079739270465446667948293404245721771496870329047266088258938001861606973112319";
                String string8 = "39402006196394479212279040100143613805079739270465446667946905279627659399113263569398956308152294913554433653942643";
                string2 = "b3312fa7e23ee7e4988e056be3f82d19181d9c6efe8141120314088f5013875ac656398d8a2ed19d2a85c8edd3ec2aef";
                string4 = "aa87ca22be8b05378eb1c71ef320ad746e1d3b628ba79b9859f741e082542a385502f25dbf55296c3a545e3872760ab7";
                string5 = "3617de4a96262c6f5d9e98bf9292dc29f8f41dbd289a147ce9da3113b5f0b8c00a60b1ce1d7e819d7a431d7c90ea0e5f";
                return ayh.a(string3, (String)var0_3, string2, string4, string5);
            }
            case 1: 
        }
        string3 = "115792089210356248762697446949407573530086143415290314195533631308867097853951";
        String string9 = "115792089210356248762697446949407573529996955224135760342422259061068512044369";
        string2 = "5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b";
        string4 = "6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296";
        string5 = "4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5";
        return ayh.a(string3, (String)var0_3, string2, string4, string5);
    }

    private static ECParameterSpec a(String object, String object2, String object3, String object4, String object5) {
        object = new BigInteger((String)object);
        object2 = new BigInteger((String)object2);
        BigInteger bigInteger = object.subtract(new BigInteger("3"));
        object3 = new BigInteger((String)object3, 16);
        object4 = new BigInteger((String)object4, 16);
        object5 = new BigInteger((String)object5, 16);
        return new ECParameterSpec(new EllipticCurve(new ECFieldFp((BigInteger)object), bigInteger, (BigInteger)object3), new ECPoint((BigInteger)object4, (BigInteger)object5), (BigInteger)object2, 1);
    }

    static void a(ECPoint object, EllipticCurve ellipticCurve) {
        BigInteger bigInteger = ayh.b(ellipticCurve);
        BigInteger bigInteger2 = object.getAffineX();
        object = object.getAffineY();
        if (bigInteger2 != null && object != null) {
            if (bigInteger2.signum() != -1 && bigInteger2.compareTo(bigInteger) == -1) {
                if (object.signum() != -1 && object.compareTo(bigInteger) == -1) {
                    if (object.multiply((BigInteger)object).mod(bigInteger).equals(bigInteger2.multiply(bigInteger2).add(ellipticCurve.getA()).multiply(bigInteger2).add(ellipticCurve.getB()).mod(bigInteger))) {
                        return;
                    }
                    throw new GeneralSecurityException("Point is not on curve");
                }
                throw new GeneralSecurityException("y is out of range");
            }
            throw new GeneralSecurityException("x is out of range");
        }
        throw new GeneralSecurityException("point is at infinity");
    }

    public static byte[] a(ECPrivateKey object, ECPoint arrby) {
        ayh.a((ECPoint)arrby, object.getParams().getCurve());
        Object object2 = object.getParams();
        object2.getCurve();
        arrby = new ECPublicKeySpec((ECPoint)arrby, (ECParameterSpec)object2);
        arrby = KeyFactory.getInstance("EC").generatePublic((KeySpec)arrby);
        object2 = aym.c.a("ECDH");
        object2.init((Key)object);
        object2.doPhase((Key)arrby, true);
        arrby = object2.generateSecret();
        object = object.getParams().getCurve();
        object2 = new BigInteger(1, arrby);
        if (object2.signum() != -1 && object2.compareTo(ayh.b((EllipticCurve)object)) == -1) {
            ayh.a((BigInteger)object2, true, (EllipticCurve)object);
            return arrby;
        }
        throw new GeneralSecurityException("shared secret is out of range");
    }

    private static BigInteger b(EllipticCurve object) {
        if ((object = object.getField()) instanceof ECFieldFp) {
            return ((ECFieldFp)object).getP();
        }
        throw new GeneralSecurityException("Only curves over prime order fields are supported");
    }
}

