/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.content.ComponentName
 *  android.content.Context
 *  android.content.Intent
 *  android.content.ServiceConnection
 *  android.os.IBinder
 *  android.os.Message
 */
package com.google.android.gms.common.internal;

import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.content.ServiceConnection;
import android.os.IBinder;
import android.os.Message;
import com.google.android.gms.common.internal.i;
import com.google.android.gms.common.internal.j;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;

final class k
implements ServiceConnection {
    private final Set<ServiceConnection> a;
    private int b;
    private boolean c;
    private IBinder d;
    private final i e;
    private ComponentName f;
    private /* synthetic */ j g;

    public k(j j2, i i2) {
        this.g = j2;
        this.e = i2;
        this.a = new HashSet<ServiceConnection>();
        this.b = 2;
    }

    public final void a(ServiceConnection serviceConnection, String string2) {
        j.d(this.g);
        j.c(this.g);
        this.e.a(j.c(this.g));
        this.a.add(serviceConnection);
    }

    public final void a(String string2) {
        this.b = 3;
        this.c = j.d(this.g).a(j.c(this.g), string2, this.e.a(j.c(this.g)), this, this.e.c());
        if (this.c) {
            string2 = j.b(this.g).obtainMessage(1, (Object)this.e);
            j.b(this.g).sendMessageDelayed((Message)string2, j.e(this.g));
            return;
        }
        this.b = 2;
        try {
            j.d(this.g);
            j.c(this.g).unbindService((ServiceConnection)this);
            return;
        }
        catch (IllegalArgumentException illegalArgumentException) {
            return;
        }
    }

    public final boolean a() {
        return this.c;
    }

    public final boolean a(ServiceConnection serviceConnection) {
        return this.a.contains((Object)serviceConnection);
    }

    public final int b() {
        return this.b;
    }

    public final void b(ServiceConnection serviceConnection, String string2) {
        j.d(this.g);
        j.c(this.g);
        this.a.remove((Object)serviceConnection);
    }

    public final void b(String string2) {
        j.b(this.g).removeMessages(1, (Object)this.e);
        j.d(this.g);
        j.c(this.g).unbindService((ServiceConnection)this);
        this.c = false;
        this.b = 2;
    }

    public final boolean c() {
        return this.a.isEmpty();
    }

    public final IBinder d() {
        return this.d;
    }

    public final ComponentName e() {
        return this.f;
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public final void onServiceConnected(ComponentName componentName, IBinder iBinder) {
        HashMap hashMap = j.a(this.g);
        synchronized (hashMap) {
            j.b(this.g).removeMessages(1, (Object)this.e);
            this.d = iBinder;
            this.f = componentName;
            Iterator<ServiceConnection> iterator = this.a.iterator();
            do {
                if (!iterator.hasNext()) {
                    this.b = 1;
                    return;
                }
                iterator.next().onServiceConnected(componentName, iBinder);
            } while (true);
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public final void onServiceDisconnected(ComponentName componentName) {
        HashMap hashMap = j.a(this.g);
        synchronized (hashMap) {
            j.b(this.g).removeMessages(1, (Object)this.e);
            this.d = null;
            this.f = componentName;
            Iterator<ServiceConnection> iterator = this.a.iterator();
            do {
                if (!iterator.hasNext()) {
                    this.b = 2;
                    return;
                }
                iterator.next().onServiceDisconnected(componentName);
            } while (true);
        }
    }
}

