/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.os.Environment
 */
package com.google.android.gms.internal;

import android.os.Environment;
import com.google.android.gms.ads.internal.av;
import com.google.android.gms.internal.ak;
import com.google.android.gms.internal.bjy;
import com.google.android.gms.internal.bod;
import com.google.android.gms.internal.boe;
import com.google.android.gms.internal.boh;
import com.google.android.gms.internal.bok;
import com.google.android.gms.internal.bom;
import com.google.android.gms.internal.bop;
import com.google.android.gms.internal.bor;
import com.google.android.gms.internal.bot;
import com.google.android.gms.internal.bqj;
import com.google.android.gms.internal.bsz;
import com.google.android.gms.internal.btk;
import com.google.android.gms.internal.he;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;

@ak
public final class boc {
    private final boh a;
    private final bot b;
    private final boolean c;

    private boc() {
        this.c = false;
        this.a = new boh();
        this.b = new bot();
        this.b();
    }

    public boc(boh object) {
        this.a = object;
        object = btk.cP;
        this.c = (Boolean)bqj.f().a(object);
        this.b = new bot();
        this.b();
    }

    public static boc a() {
        return new boc();
    }

    private final void b() {
        synchronized (this) {
            this.b.d = new bom();
            this.b.d.b = new bop();
            this.b.c = new bor();
            return;
        }
    }

    private final void b(boe.a.b object) {
        synchronized (this) {
            this.b.b = boc.c();
            this.a.a(bjy.a(this.b)).b(object.a()).a();
            object = String.valueOf(Integer.toString(object.a(), 10));
            object = object.length() != 0 ? "Logging Event with event code : ".concat((String)object) : new String("Logging Event with event code : ");
            he.a((String)object);
            return;
        }
    }

    /*
     * WARNING - Removed back jump from a try to a catch block - possible behaviour change.
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Converted monitor instructions to comments
     * Lifted jumps to return sites
     */
    private final void c(boe.a.b var1_1) {
        // MONITORENTER : this
        var2_7 = Environment.getExternalStorageDirectory();
        if (var2_7 == null) {
            // MONITOREXIT : this
            return;
        }
        var2_7 = new File((File)var2_7, "clearcut_events.txt");
        try {
            var2_7 = new FileOutputStream((File)var2_7, true);
        }
lbl9: // 3 sources:
        catch (FileNotFoundException var1_3) {}
        var2_7.write(this.d(var1_1).getBytes());
        var2_7.write(10);
        try {
            var2_7.close();
            // MONITOREXIT : this
            return;
        }
        catch (IOException var1_5) {}
        he.a("Could not close Clearcut output stream.");
        // MONITOREXIT : this
        return;
        catch (Throwable var1_2) {}
        {
            var2_7.close();
            throw var1_2;
            catch (IOException var1_4) {}
            {
                he.a("Could not write Clearcut to file.");
            }
            ** try [egrp 8[TRYBLOCK] [13 : 76->105)] { 
lbl30: // 2 sources:
            var2_7.close();
            // MONITOREXIT : this
            return;
        }
        he.a("Could not find file for Clearcut");
        // MONITOREXIT : this
        return;
        catch (IOException var1_6) {}
        he.a("Could not close Clearcut output stream.");
        // MONITOREXIT : this
        return;
        catch (IOException var2_8) {}
        he.a("Could not close Clearcut output stream.");
        throw var1_2;
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    private static long[] c() {
        long[] arrl = btk.b();
        ArrayList<Long> arrayList = new ArrayList<Long>();
        arrl = arrl.iterator();
        block2 : do {
            boolean bl2 = arrl.hasNext();
            int n2 = 0;
            int n3 = 0;
            if (!bl2) {
                arrl = new long[arrayList.size()];
                int n4 = arrayList.size();
                n3 = 0;
                while (n2 < n4) {
                    Object e2 = arrayList.get(n2);
                    ++n2;
                    arrl[n3] = (Long)e2;
                    ++n3;
                }
                return arrl;
            }
            String[] arrstring = ((String)arrl.next()).split(",");
            n2 = arrstring.length;
            do {
                block6 : {
                    if (n3 >= n2) continue block2;
                    String string2 = arrstring[n3];
                    try {
                        arrayList.add(Long.valueOf(string2));
                        break block6;
                    }
                    catch (NumberFormatException numberFormatException) {}
                    he.a("Experiment ID is not a number");
                }
                ++n3;
            } while (true);
            break;
        } while (true);
    }

    private final String d(boe.a.b object) {
        synchronized (this) {
            object = String.format("id=%s,timestamp=%s,event=%s", this.b.a, av.l().b(), object.a());
            return object;
        }
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    public final void a(bod bod2) {
        synchronized (this) {
            boolean bl2 = this.c;
            if (!bl2) return;
            bod2.a(this.b);
            return;
        }
    }

    public final void a(boe.a.b b2) {
        synchronized (this) {
            block5 : {
                boolean bl2 = this.c;
                if (bl2) break block5;
                return;
            }
            bsz<Boolean> bsz2 = btk.cQ;
            if (bqj.f().a(bsz2).booleanValue()) {
                this.c(b2);
                return;
            }
            this.b(b2);
            return;
        }
    }
}

