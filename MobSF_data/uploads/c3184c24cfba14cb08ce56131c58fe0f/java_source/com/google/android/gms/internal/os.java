/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.annotation.TargetApi
 *  android.app.Activity
 *  android.app.AlertDialog
 *  android.app.AlertDialog$Builder
 *  android.content.Context
 *  android.content.DialogInterface
 *  android.content.DialogInterface$OnCancelListener
 *  android.content.DialogInterface$OnClickListener
 *  android.os.Message
 *  android.view.View
 *  android.view.WindowManager
 *  android.view.WindowManager$BadTokenException
 *  android.webkit.ConsoleMessage
 *  android.webkit.ConsoleMessage$MessageLevel
 *  android.webkit.GeolocationPermissions
 *  android.webkit.GeolocationPermissions$Callback
 *  android.webkit.JsPromptResult
 *  android.webkit.JsResult
 *  android.webkit.WebChromeClient
 *  android.webkit.WebChromeClient$CustomViewCallback
 *  android.webkit.WebStorage
 *  android.webkit.WebStorage$QuotaUpdater
 *  android.webkit.WebView
 *  android.webkit.WebView$WebViewTransport
 *  android.webkit.WebViewClient
 *  android.widget.EditText
 *  android.widget.LinearLayout
 *  android.widget.TextView
 */
package com.google.android.gms.internal;

import android.annotation.TargetApi;
import android.app.Activity;
import android.app.AlertDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.os.Message;
import android.view.View;
import android.view.WindowManager;
import android.webkit.ConsoleMessage;
import android.webkit.GeolocationPermissions;
import android.webkit.JsPromptResult;
import android.webkit.JsResult;
import android.webkit.WebChromeClient;
import android.webkit.WebStorage;
import android.webkit.WebView;
import android.webkit.WebViewClient;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.TextView;
import com.google.android.gms.ads.internal.av;
import com.google.android.gms.ads.internal.bs;
import com.google.android.gms.ads.internal.overlay.d;
import com.google.android.gms.internal.ak;
import com.google.android.gms.internal.he;
import com.google.android.gms.internal.hs;
import com.google.android.gms.internal.nu;
import com.google.android.gms.internal.ot;
import com.google.android.gms.internal.ou;
import com.google.android.gms.internal.ov;
import com.google.android.gms.internal.ow;
import com.google.android.gms.internal.ox;
import com.google.android.gms.internal.oy;
import com.google.android.gms.internal.oz;
import com.google.android.gms.internal.pk;

@ak
@TargetApi(value=11)
public class os
extends WebChromeClient {
    private final nu a;

    public os(nu nu2) {
        this.a = nu2;
    }

    private static Context a(WebView object) {
        if (!(object instanceof nu)) {
            return object.getContext();
        }
        Activity activity = (object = (nu)object).d();
        if (activity != null) {
            return activity;
        }
        return object.getContext();
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    private final boolean a(Context object, String string2, String string3, String string4, String string5, JsResult jsResult, JsPromptResult jsPromptResult, boolean bl2) {
        try {
            bs bs2;
            if (this.a != null && this.a.u() != null && this.a.u().a() != null && (bs2 = this.a.u().a()) != null && !bs2.b()) {
                object = new StringBuilder(String.valueOf(string2).length() + 11 + String.valueOf(string4).length());
                object.append("window.");
                object.append(string2);
                object.append("('");
                object.append(string4);
                object.append("')");
                bs2.a(object.toString());
                return false;
            }
            string2 = new AlertDialog.Builder((Context)object);
            string2.setTitle((CharSequence)string3);
            if (bl2) {
                string3 = new LinearLayout((Context)object);
                string3.setOrientation(1);
                jsResult = new TextView((Context)object);
                jsResult.setText((CharSequence)string4);
                object = new EditText((Context)object);
                object.setText((CharSequence)string5);
                string3.addView((View)jsResult);
                string3.addView((View)object);
                object = string2.setView((View)string3).setPositiveButton(17039370, (DialogInterface.OnClickListener)new oy(jsPromptResult, (EditText)object)).setNegativeButton(17039360, (DialogInterface.OnClickListener)new ox(jsPromptResult)).setOnCancelListener((DialogInterface.OnCancelListener)new ow(jsPromptResult)).create();
            } else {
                object = string2.setMessage((CharSequence)string4).setPositiveButton(17039370, (DialogInterface.OnClickListener)new ov(jsResult)).setNegativeButton(17039360, (DialogInterface.OnClickListener)new ou(jsResult)).setOnCancelListener((DialogInterface.OnCancelListener)new ot(jsResult)).create();
            }
            object.show();
            return true;
        }
        catch (WindowManager.BadTokenException badTokenException) {
            he.c("Fail to display Dialog.", (Throwable)badTokenException);
            return true;
        }
    }

    protected final void a(View view, int n2, WebChromeClient.CustomViewCallback customViewCallback) {
        d d2 = this.a.q();
        if (d2 == null) {
            he.e("Could not get ad overlay when showing custom view.");
            customViewCallback.onCustomViewHidden();
            return;
        }
        d2.a(view, customViewCallback);
        d2.a(n2);
    }

    /*
     * Enabled aggressive block sorting
     */
    public final void onCloseWindow(WebView object) {
        void var1_3;
        if (!(object instanceof nu)) {
            String string2 = "Tried to close a WebView that wasn't an AdWebView.";
        } else {
            d d2 = ((nu)object).q();
            if (d2 != null) {
                d2.a();
                return;
            }
            String string3 = "Tried to close an AdWebView not associated with an overlay.";
        }
        he.e((String)var1_3);
    }

    public final boolean onConsoleMessage(ConsoleMessage consoleMessage) {
        String string2 = consoleMessage.message();
        String string3 = consoleMessage.sourceId();
        int n2 = consoleMessage.lineNumber();
        StringBuilder stringBuilder = new StringBuilder(String.valueOf(string2).length() + 19 + String.valueOf(string3).length());
        stringBuilder.append("JS: ");
        stringBuilder.append(string2);
        stringBuilder.append(" (");
        stringBuilder.append(string3);
        stringBuilder.append(":");
        stringBuilder.append(n2);
        stringBuilder.append(")");
        string2 = stringBuilder.toString();
        if (string2.contains("Application Cache")) {
            return super.onConsoleMessage(consoleMessage);
        }
        switch (oz.a[consoleMessage.messageLevel().ordinal()]) {
            default: {
                he.d(string2);
                break;
            }
            case 5: {
                he.b(string2);
                break;
            }
            case 2: {
                he.e(string2);
                break;
            }
            case 1: {
                he.c(string2);
            }
        }
        return super.onConsoleMessage(consoleMessage);
    }

    public final boolean onCreateWindow(WebView webView, boolean bl2, boolean bl3, Message message) {
        WebView.WebViewTransport webViewTransport = (WebView.WebViewTransport)message.obj;
        webView = new WebView(webView.getContext());
        if (this.a.u() instanceof WebViewClient) {
            webView.setWebViewClient((WebViewClient)this.a.u());
        }
        webViewTransport.setWebView(webView);
        message.sendToTarget();
        return true;
    }

    /*
     * Enabled aggressive block sorting
     */
    public final void onExceededDatabaseQuota(String string2, String string3, long l2, long l3, long l4, WebStorage.QuotaUpdater quotaUpdater) {
        long l5 = 0x500000L - l4;
        if (l5 <= 0L) {
            quotaUpdater.updateQuota(l2);
            return;
        }
        if (l2 == 0L) {
            if (l3 > l5 || l3 > 0x100000L) {
                l3 = 0L;
            }
        } else {
            if (l3 == 0L) {
                l4 = Math.min(l2 + Math.min(131072L, l5), 0x100000L);
            } else {
                l4 = l2;
                if (l3 <= Math.min(0x100000L - l2, l5)) {
                    l4 = l2 + l3;
                }
            }
            l3 = l4;
        }
        quotaUpdater.updateQuota(l3);
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Lifted jumps to return sites
     */
    public final void onGeolocationPermissionsShowPrompt(String var1_1, GeolocationPermissions.Callback var2_2) {
        if (var2_2 == null) return;
        av.e();
        if (hs.a(this.a.getContext(), this.a.getContext().getPackageName(), "android.permission.ACCESS_FINE_LOCATION")) ** GOTO lbl-1000
        av.e();
        if (!hs.a(this.a.getContext(), this.a.getContext().getPackageName(), "android.permission.ACCESS_COARSE_LOCATION")) {
            var3_3 = false;
        } else lbl-1000: // 2 sources:
        {
            var3_3 = true;
        }
        var2_2.invoke(var1_1, var3_3, true);
    }

    public final void onHideCustomView() {
        d d2 = this.a.q();
        if (d2 == null) {
            he.e("Could not get ad overlay when hiding custom view.");
            return;
        }
        d2.b();
    }

    public final boolean onJsAlert(WebView webView, String string2, String string3, JsResult jsResult) {
        return this.a(os.a(webView), "alert", string2, string3, null, jsResult, null, false);
    }

    public final boolean onJsBeforeUnload(WebView webView, String string2, String string3, JsResult jsResult) {
        return this.a(os.a(webView), "onBeforeUnload", string2, string3, null, jsResult, null, false);
    }

    public final boolean onJsConfirm(WebView webView, String string2, String string3, JsResult jsResult) {
        return this.a(os.a(webView), "confirm", string2, string3, null, jsResult, null, false);
    }

    public final boolean onJsPrompt(WebView webView, String string2, String string3, String string4, JsPromptResult jsPromptResult) {
        return this.a(os.a(webView), "prompt", string2, string3, string4, null, jsPromptResult, true);
    }

    public final void onReachedMaxAppCacheSize(long l2, long l3, WebStorage.QuotaUpdater quotaUpdater) {
        if (0x500000L - l3 < (l2 += 131072L)) {
            quotaUpdater.updateQuota(0L);
            return;
        }
        quotaUpdater.updateQuota(l2);
    }

    public final void onShowCustomView(View view, WebChromeClient.CustomViewCallback customViewCallback) {
        this.a(view, -1, customViewCallback);
    }
}

