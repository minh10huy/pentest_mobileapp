/*
 * Decompiled with CFR 0_132.
 */
package com.google.android.gms.internal;

import com.google.android.gms.internal.bqh;
import com.google.android.gms.internal.bwe;
import com.google.android.gms.internal.hi;
import com.google.android.gms.internal.pq;
import com.google.android.gms.internal.so;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLConnection;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import javax.net.ssl.SSLSocketFactory;

public final class rn
extends hi {
    private final so a = null;
    private final SSLSocketFactory b = null;

    public rn() {
        this(null);
    }

    private rn(so so2) {
        this(null, null);
    }

    private rn(so so2, SSLSocketFactory sSLSocketFactory) {
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    private static InputStream a(HttpURLConnection httpURLConnection) {
        try {
            return httpURLConnection.getInputStream();
        }
        catch (IOException iOException) {
            return httpURLConnection.getErrorStream();
        }
    }

    private static List<bqh> a(Map<String, List<String>> object) {
        ArrayList<bqh> arrayList = new ArrayList<bqh>(object.size());
        for (Map.Entry entry : object.entrySet()) {
            if (entry.getKey() == null) continue;
            for (String string2 : (List)entry.getValue()) {
                arrayList.add(new bqh((String)entry.getKey(), string2));
            }
        }
        return arrayList;
    }

    private static void a(HttpURLConnection object, bwe<?> object2) {
        byte[] arrby = object2.a();
        if (arrby != null) {
            object.setDoOutput(true);
            object2 = String.valueOf("UTF-8");
            object2 = object2.length() != 0 ? "application/x-www-form-urlencoded; charset=".concat((String)object2) : new String("application/x-www-form-urlencoded; charset=");
            object.addRequestProperty("Content-Type", (String)object2);
            object = new DataOutputStream(object.getOutputStream());
            object.write(arrby);
            object.close();
        }
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Lifted jumps to return sites
     */
    @Override
    public final pq a(bwe<?> var1_1, Map<String, String> var2_2) {
        block22 : {
            block23 : {
                var6_3 = var1_1.e();
                var8_4 = new HashMap<String, String>();
                var8_4.putAll(var1_1.b());
                var8_4.putAll((Map<String, String>)var2_2);
                if (this.a != null) {
                    var7_5 = this.a.a((String)var6_3);
                    var2_2 = var7_5;
                    if (var7_5 == null) {
                        var1_1 = String.valueOf(var6_3);
                        if (var1_1.length() != 0) {
                            var1_1 = "URL blocked by rewriter: ".concat((String)var1_1);
                            throw new IOException((String)var1_1);
                        }
                        var1_1 = new String("URL blocked by rewriter: ");
                        throw new IOException((String)var1_1);
                    }
                } else {
                    var2_2 = var6_3;
                }
                var2_2 = new URL((String)var2_2);
                var6_3 = (HttpURLConnection)var2_2.openConnection();
                var6_3.setInstanceFollowRedirects(HttpURLConnection.getFollowRedirects());
                var3_6 = var1_1.i();
                var6_3.setConnectTimeout(var3_6);
                var6_3.setReadTimeout(var3_6);
                var4_7 = 0;
                var6_3.setUseCaches(false);
                var6_3.setDoInput(true);
                "https".equals(var2_2.getProtocol());
                for (String var7_5 : var8_4.keySet()) {
                    var6_3.addRequestProperty(var7_5, (String)var8_4.get(var7_5));
                }
                switch (var1_1.c()) {
                    default: {
                        throw new IllegalStateException("Unknown method type.");
                    }
                    case 7: {
                        var2_2 = "PATCH";
                        ** GOTO lbl53
                    }
                    case 6: {
                        var2_2 = "TRACE";
                        ** GOTO lbl58
                    }
                    case 5: {
                        var2_2 = "OPTIONS";
                        ** GOTO lbl58
                    }
                    case 4: {
                        var2_2 = "HEAD";
                        ** GOTO lbl58
                    }
                    case 3: {
                        var2_2 = "DELETE";
                        ** GOTO lbl58
                    }
                    case 2: {
                        var2_2 = "PUT";
                        ** GOTO lbl53
                    }
                    case 1: {
                        var2_2 = "POST";
lbl53: // 3 sources:
                        var6_3.setRequestMethod((String)var2_2);
                        rn.a((HttpURLConnection)var6_3, var1_1);
                        break;
                    }
                    case 0: {
                        var2_2 = "GET";
lbl58: // 5 sources:
                        var6_3.setRequestMethod((String)var2_2);
                    }
                    case -1: 
                }
                var5_8 = var6_3.getResponseCode();
                if (var5_8 == -1) throw new IOException("Could not retrieve response code from HttpUrlConnection.");
                var3_6 = var4_7;
                if (var1_1.c() == 4) break block22;
                if (100 > var5_8) break block23;
                var3_6 = var4_7;
                if (var5_8 < 200) break block22;
            }
            var3_6 = var4_7;
            if (var5_8 != 204) {
                var3_6 = var4_7;
                if (var5_8 != 304) {
                    return new pq(var5_8, rn.a(var6_3.getHeaderFields()), var6_3.getContentLength(), rn.a((HttpURLConnection)var6_3));
                }
            }
        }
        if (var3_6 != 0) return new pq(var5_8, rn.a(var6_3.getHeaderFields()), var6_3.getContentLength(), rn.a((HttpURLConnection)var6_3));
        return new pq(var5_8, rn.a(var6_3.getHeaderFields()));
    }
}

