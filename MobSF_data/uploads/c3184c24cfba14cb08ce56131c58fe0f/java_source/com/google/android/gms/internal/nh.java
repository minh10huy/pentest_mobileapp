/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.content.Context
 *  android.graphics.Color
 *  android.os.Build
 *  android.os.Build$VERSION
 *  android.os.SystemClock
 *  android.text.TextUtils
 *  android.view.MotionEvent
 *  org.json.JSONObject
 */
package com.google.android.gms.internal;

import android.content.Context;
import android.graphics.Color;
import android.os.Build;
import android.os.SystemClock;
import android.text.TextUtils;
import android.view.MotionEvent;
import com.google.android.gms.ads.internal.gmsg.aa;
import com.google.android.gms.internal.ak;
import com.google.android.gms.internal.bqj;
import com.google.android.gms.internal.bsz;
import com.google.android.gms.internal.btk;
import com.google.android.gms.internal.he;
import com.google.android.gms.internal.jx;
import com.google.android.gms.internal.jz;
import com.google.android.gms.internal.mp;
import com.google.android.gms.internal.ms;
import com.google.android.gms.internal.na;
import com.google.android.gms.internal.nb;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.json.JSONObject;

@ak
public final class nh
implements aa<nb> {
    private boolean a;

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    private static int a(Context context, Map<String, String> object, String string2, int n2) {
        if ((object = (String)object.get(string2)) == null) return n2;
        try {
            bqj.a();
            return jz.a(context, Integer.parseInt((String)object));
        }
        catch (NumberFormatException numberFormatException) {}
        StringBuilder stringBuilder = new StringBuilder(String.valueOf(string2).length() + 34 + String.valueOf(object).length());
        stringBuilder.append("Could not parse ");
        stringBuilder.append(string2);
        stringBuilder.append(" in a video GMSG: ");
        stringBuilder.append((String)object);
        he.e(stringBuilder.toString());
        return n2;
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    private static void a(mp var0, Map<String, String> var1_1) {
        var0 = (String)var1_1.get("minBufferMs");
        var2_3 = (String)var1_1.get("maxBufferMs");
        var3_4 = (String)var1_1.get("bufferForPlaybackMs");
        var1_1 = (String)var1_1.get("bufferForPlaybackAfterRebufferMs");
        if (var0 == null) ** GOTO lbl8
        try {
            Integer.parseInt((String)var0);
lbl8: // 2 sources:
            if (var2_3 != null) {
                Integer.parseInt(var2_3);
            }
            if (var3_4 != null) {
                Integer.parseInt(var3_4);
            }
            if (var1_1 == null) return;
            Integer.parseInt((String)var1_1);
            return;
        }
        catch (NumberFormatException var1_2) {}
        he.e(String.format("Could not parse buffer parameters in loadControl video GMSG: (%s, %s)", new Object[]{var0, var2_3}));
    }

    /*
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    @Override
    public final /* synthetic */ void zza(Object object, Map hashMap) {
        int n2;
        int n3;
        int n6;
        boolean bl2;
        boolean bl3;
        Object object2;
        int n5;
        int n4;
        block38 : {
            object = (nb)object;
            String string2 = hashMap.get("action");
            if (string2 == null) {
                he.e("Action missing from video GMSG.");
                return;
            }
            if (he.a(3)) {
                object2 = new JSONObject(hashMap);
                object2.remove("google.afma.Notify_dt");
                object2 = object2.toString();
                StringBuilder stringBuilder = new StringBuilder(String.valueOf(string2).length() + 13 + String.valueOf(object2).length());
                stringBuilder.append("Video GMSG: ");
                stringBuilder.append(string2);
                stringBuilder.append(" ");
                stringBuilder.append((String)object2);
                he.b(stringBuilder.toString());
            }
            if ("background".equals(string2)) {
                if (TextUtils.isEmpty((CharSequence)((Object)(hashMap = hashMap.get("color"))))) {
                    he.e("Color parameter missing from color video GMSG.");
                    return;
                }
                object.setBackgroundColor(Color.parseColor((String)((Object)hashMap)));
                return;
            }
            bl3 = "decoderProps".equals(string2);
            n3 = 0;
            if (bl3) {
                object2 = (String)hashMap.get("mimeTypes");
                if (object2 == null) {
                    he.e("No MIME types specified for decoder properties inspection.");
                    mp.a((nb)object, "missingMimeTypes");
                    return;
                }
                if (Build.VERSION.SDK_INT < 16) {
                    he.e("Video decoder properties available on API versions >= 16.");
                    mp.a((nb)object, "deficientApiVersion");
                    return;
                }
                hashMap = new HashMap<String, String>();
                object2 = object2.split(",");
                int n7 = ((Object)object2).length;
                do {
                    if (n3 >= n7) {
                        mp.a((nb)object, hashMap);
                        return;
                    }
                    Object object3 = object2[n3];
                    hashMap.put((String)object3, (String)((Object)jx.a(object3.trim())));
                    ++n3;
                } while (true);
            }
            object2 = object.a();
            if (object2 == null) {
                he.e("Could not get underlay container for a video GMSG.");
                return;
            }
            bl3 = "new".equals(string2);
            bl2 = "position".equals(string2);
            if (!bl3 && !bl2) {
                if ((object2 = object2.a()) == null) {
                    mp.a((nb)object);
                    return;
                }
                if ("click".equals(string2)) {
                    object = object.getContext();
                    n3 = nh.a((Context)object, hashMap, "x", 0);
                    int n8 = nh.a((Context)object, hashMap, "y", 0);
                    long l2 = SystemClock.uptimeMillis();
                    object = MotionEvent.obtain((long)l2, (long)l2, (int)0, (float)n3, (float)n8, (int)0);
                    object2.a((MotionEvent)object);
                    object.recycle();
                    return;
                }
                if ("currentTime".equals(string2)) {
                    object = hashMap.get("time");
                    if (object == null) {
                        he.e("Time parameter missing from currentTime video GMSG.");
                        return;
                    }
                    object2.a((int)(Float.parseFloat((String)object) * 1000.0f));
                    return;
                }
                if ("hide".equals(string2)) {
                    object2.setVisibility(4);
                    return;
                }
                if ("load".equals(string2)) {
                    object2.h();
                    return;
                }
                if ("loadControl".equals(string2)) {
                    nh.a((mp)object2, hashMap);
                    return;
                }
                if ("muted".equals(string2)) {
                    if (Boolean.parseBoolean(hashMap.get("muted"))) {
                        object2.k();
                        return;
                    }
                    object2.l();
                    return;
                }
                if ("pause".equals(string2)) {
                    object2.i();
                    return;
                }
                if ("play".equals(string2)) {
                    object2.j();
                    return;
                }
                if ("show".equals(string2)) {
                    object2.setVisibility(0);
                    return;
                }
                if ("src".equals(string2)) {
                    object2.a(hashMap.get("src"));
                    return;
                }
                if ("touchMove".equals(string2)) {
                    Context context = object.getContext();
                    n3 = nh.a(context, hashMap, "dx", 0);
                    int n9 = nh.a(context, hashMap, "dy", 0);
                    object2.a((float)n3, (float)n9);
                    if (this.a) return;
                    object.f();
                    this.a = true;
                    return;
                }
                if ("volume".equals(string2)) {
                    object = hashMap.get("volume");
                    if (object == null) {
                        he.e("Level parameter missing from volume video GMSG.");
                        return;
                    }
                    object2.a(Float.parseFloat((String)object));
                    return;
                }
                if ("watermark".equals(string2)) {
                    object2.m();
                    return;
                }
                object = String.valueOf(string2);
                object = object.length() != 0 ? "Unknown video action: ".concat((String)object) : new String("Unknown video action: ");
                he.e((String)object);
                return;
            }
            Context context = object.getContext();
            n2 = nh.a(context, hashMap, "x", 0);
            n6 = nh.a(context, hashMap, "y", 0);
            n3 = nh.a(context, hashMap, "w", -1);
            n5 = nh.a(context, hashMap, "h", -1);
            bsz<Boolean> bsz2 = btk.bX;
            if (bqj.f().a(bsz2).booleanValue()) {
                n3 = Math.min(n3, object.l() - n2);
                n5 = Math.min(n5, object.k() - n6);
            }
            try {
                n4 = Integer.parseInt(hashMap.get("player"));
                break block38;
            }
            catch (NumberFormatException numberFormatException) {}
            catch (IllegalArgumentException illegalArgumentException) {}
            he.e("Invalid color parameter in video GMSG.");
            return;
            catch (NumberFormatException numberFormatException) {}
            object = String.valueOf(object);
            object = object.length() != 0 ? "Could not parse time parameter from currentTime video GMSG: ".concat((String)object) : new String("Could not parse time parameter from currentTime video GMSG: ");
            he.e((String)object);
            return;
            catch (NumberFormatException numberFormatException) {}
            object = String.valueOf(object);
            object = object.length() != 0 ? "Could not parse volume parameter from volume video GMSG: ".concat((String)object) : new String("Could not parse volume parameter from volume video GMSG: ");
            he.e((String)object);
            return;
            n4 = 0;
        }
        bl2 = Boolean.parseBoolean(hashMap.get("spherical"));
        if (bl3 && object2.a() == null) {
            object2.a(n2, n6, n3, n5, n4, bl2, new na(hashMap.get("flags")));
            object = object2.a();
            if (object == null) return;
            nh.a((mp)object, hashMap);
            return;
        }
        object2.a(n2, n6, n3, n5);
    }
}

