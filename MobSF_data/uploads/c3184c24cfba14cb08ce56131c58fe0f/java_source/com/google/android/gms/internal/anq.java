/*
 * Decompiled with CFR 0_132.
 */
package com.google.android.gms.internal;

import com.google.android.gms.common.internal.ah;
import com.google.android.gms.internal.ajm;
import com.google.android.gms.internal.alc;
import com.google.android.gms.internal.ald;
import com.google.android.gms.internal.asj;
import com.google.android.gms.internal.asn;

public final class anq
extends ald {
    @Override
    protected final /* varargs */ asj<?> a(ajm ajm2, asj<?> ... arrasj) {
        boolean bl2 = true;
        ah.b(true);
        boolean bl3 = arrasj.length == 2;
        ah.b(bl3);
        double d2 = alc.b(arrasj[0]);
        double d3 = alc.b(arrasj[1]);
        if (!Double.isNaN(d2) && !Double.isNaN(d3)) {
            if (Double.isInfinite(d2) && Double.isInfinite(d3)) {
                return new asn(Double.NaN);
            }
            boolean bl4 = (double)Double.compare(d2, 0.0) < 0.0;
            if ((double)Double.compare(d3, 0.0) >= 0.0) {
                bl2 = false;
            }
            bl4 ^= bl2;
            bl3 = Double.isInfinite(d2);
            double d4 = Double.POSITIVE_INFINITY;
            if (bl3 && !Double.isInfinite(d3)) {
                if (bl4) {
                    d4 = Double.NEGATIVE_INFINITY;
                }
                return new asn(d4);
            }
            bl3 = Double.isInfinite(d2);
            double d5 = 0.0;
            if (!bl3 && Double.isInfinite(d3)) {
                if (!bl4) {
                    d5 = 0.0;
                }
                return new asn(d5);
            }
            bl2 = d2 DCMPL 0.0;
            if (!bl2) {
                if (d3 == 0.0) {
                    return new asn(Double.NaN);
                }
                if (!bl4) {
                    d5 = 0.0;
                }
                return new asn(d5);
            }
            if (!Double.isInfinite(d2) && bl2 && d3 == 0.0) {
                if (bl4) {
                    d4 = Double.NEGATIVE_INFINITY;
                }
                return new asn(d4);
            }
            return new asn(d2 / d3);
        }
        return new asn(Double.NaN);
    }
}

