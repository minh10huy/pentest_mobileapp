/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.content.Context
 *  android.content.res.Resources
 *  android.content.res.Resources$NotFoundException
 *  android.content.res.XmlResourceParser
 *  android.text.TextUtils
 *  org.xmlpull.v1.XmlPullParserException
 */
package com.google.android.gms.internal;

import android.content.Context;
import android.content.res.Resources;
import android.content.res.XmlResourceParser;
import android.text.TextUtils;
import com.google.android.gms.internal.qu;
import com.google.android.gms.internal.qx;
import com.google.android.gms.internal.rw;
import com.google.android.gms.internal.ry;
import java.io.IOException;
import org.xmlpull.v1.XmlPullParserException;

class rx<T extends rw>
extends qu {
    private ry<T> a;

    public rx(qx qx2, ry<T> ry2) {
        super(qx2);
        this.a = ry2;
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    private final T a(XmlResourceParser var1_1) {
        try {
            var1_1.next();
            var2_3 = var1_1.getEventType();
            while (var2_3 != 1) {
                block9 : {
                    block11 : {
                        block10 : {
                            if (var1_1.getEventType() != 2) break block9;
                            var4_5 = var1_1.getName().toLowerCase();
                            if (!var4_5.equals("screenname")) break block10;
                            var4_5 = var1_1.getAttributeValue(null, "name");
                            var5_8 = var1_1.nextText().trim();
                            if (!TextUtils.isEmpty((CharSequence)var4_5) && !TextUtils.isEmpty((CharSequence)var5_8)) {
                                this.a.a(var4_5, var5_8);
                            }
                            break block9;
                        }
                        if (!var4_5.equals("string")) break block11;
                        var4_5 = var1_1.getAttributeValue(null, "name");
                        var5_8 = var1_1.nextText().trim();
                        if (!TextUtils.isEmpty((CharSequence)var4_5) && var5_8 != null) {
                            this.a.b(var4_5, var5_8);
                        }
                        break block9;
                    }
                    if (!var4_5.equals("bool")) ** GOTO lbl32
                    var4_5 = var1_1.getAttributeValue(null, "name");
                    var5_8 = var1_1.nextText().trim();
                    if (TextUtils.isEmpty((CharSequence)var4_5) || (var3_4 = TextUtils.isEmpty((CharSequence)var5_8))) break block9;
                    try {
                        var3_4 = Boolean.parseBoolean(var5_8);
                        this.a.a(var4_5, var3_4);
                    }
                    catch (NumberFormatException var4_6) {
                        block12 : {
                            var6_9 = "Error parsing bool configuration value";
                            break block12;
lbl32: // 1 sources:
                            if (!var4_5.equals("integer")) break block9;
                            var4_5 = var1_1.getAttributeValue(null, "name");
                            var5_8 = var1_1.nextText().trim();
                            if (TextUtils.isEmpty((CharSequence)var4_5) || (var3_4 = TextUtils.isEmpty((CharSequence)var5_8))) break block9;
                            try {
                                var2_3 = Integer.parseInt(var5_8);
                                this.a.a(var4_5, var2_3);
                            }
                            catch (NumberFormatException var4_7) {
                                var6_9 = "Error parsing int configuration value";
                            }
                        }
                        this.c(var6_9, var5_8, var4_5);
                    }
                }
                var2_3 = var1_1.next();
            }
            return this.a.a();
        }
        catch (IOException | XmlPullParserException var1_2) {
            this.e("Error parsing tracker configuration file", var1_2);
        }
        return this.a.a();
    }

    public final T a(int n2) {
        T t2;
        try {
            t2 = this.a(this.g().b().getResources().getXml(n2));
        }
        catch (Resources.NotFoundException notFoundException) {
            this.d("inflate() called with unknown resourceId", (Object)notFoundException);
            return null;
        }
        return t2;
    }
}

