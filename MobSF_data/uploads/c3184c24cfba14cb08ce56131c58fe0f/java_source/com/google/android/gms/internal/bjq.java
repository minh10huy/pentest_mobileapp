/*
 * Decompiled with CFR 0_132.
 */
package com.google.android.gms.internal;

import com.google.android.gms.internal.bjr;
import com.google.android.gms.internal.bjy;
import java.nio.Buffer;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.ReadOnlyBufferException;

public final class bjq {
    private final ByteBuffer a;

    private bjq(ByteBuffer byteBuffer) {
        this.a = byteBuffer;
        this.a.order(ByteOrder.LITTLE_ENDIAN);
    }

    private bjq(byte[] arrby, int n2, int n3) {
        this(ByteBuffer.wrap(arrby, n2, n3));
    }

    public static int a(int n2) {
        if (n2 >= 0) {
            return bjq.d(n2);
        }
        return 10;
    }

    public static int a(long l2) {
        if ((-128L & l2) == 0L) {
            return 1;
        }
        if ((-16384L & l2) == 0L) {
            return 2;
        }
        if ((-2097152L & l2) == 0L) {
            return 3;
        }
        if ((-268435456L & l2) == 0L) {
            return 4;
        }
        if ((-34359738368L & l2) == 0L) {
            return 5;
        }
        if ((-4398046511104L & l2) == 0L) {
            return 6;
        }
        if ((-562949953421312L & l2) == 0L) {
            return 7;
        }
        if ((-72057594037927936L & l2) == 0L) {
            return 8;
        }
        if ((l2 & Long.MIN_VALUE) == 0L) {
            return 9;
        }
        return 10;
    }

    private static int a(CharSequence charSequence) {
        int n2;
        int n3;
        block10 : {
            int n4;
            n2 = charSequence.length();
            int n5 = 0;
            for (n4 = 0; n4 < n2 && charSequence.charAt(n4) < '?'; ++n4) {
            }
            int n6 = n2;
            do {
                n3 = n6;
                if (n4 >= n2) break block10;
                n3 = charSequence.charAt(n4);
                if (n3 >= 2048) break;
                n6 += 127 - n3 >>> 31;
                ++n4;
            } while (true);
            int n7 = charSequence.length();
            n3 = n5;
            while (n4 < n7) {
                char c2 = charSequence.charAt(n4);
                if (c2 < '\u0800') {
                    n3 += 127 - c2 >>> 31;
                    n5 = n4;
                } else {
                    int n8;
                    n3 = n8 = n3 + 2;
                    n5 = n4;
                    if ('\ud800' <= c2) {
                        n3 = n8;
                        n5 = n4;
                        if (c2 <= '\udfff') {
                            if (Character.codePointAt(charSequence, n4) >= 65536) {
                                n5 = n4 + 1;
                                n3 = n8;
                            } else {
                                charSequence = new StringBuilder(39);
                                charSequence.append("Unpaired surrogate at index ");
                                charSequence.append(n4);
                                throw new IllegalArgumentException(charSequence.toString());
                            }
                        }
                    }
                }
                n4 = n5 + 1;
            }
            n3 = n6 + n3;
        }
        if (n3 >= n2) {
            return n3;
        }
        long l2 = n3;
        charSequence = new StringBuilder(54);
        charSequence.append("UTF-8 length does not fit in int: ");
        charSequence.append(l2 + 0x100000000L);
        throw new IllegalArgumentException(charSequence.toString());
    }

    private static int a(CharSequence charSequence, byte[] arrby, int n2, int n3) {
        int n4;
        int n5;
        int n6 = charSequence.length();
        int n7 = n3 + n2;
        for (n3 = 0; n3 < n6 && (n5 = n3 + n2) < n7 && (n4 = charSequence.charAt(n3)) < 128; ++n3) {
            arrby[n5] = (byte)n4;
        }
        if (n3 == n6) {
            return n2 + n6;
        }
        n5 = n2 + n3;
        for (n2 = n3; n2 < n6; ++n2) {
            char c2;
            block10 : {
                block11 : {
                    block12 : {
                        block7 : {
                            block9 : {
                                block8 : {
                                    block6 : {
                                        c2 = charSequence.charAt(n2);
                                        if (c2 >= '?' || n5 >= n7) break block6;
                                        n3 = n5 + 1;
                                        arrby[n5] = (byte)c2;
                                        break block7;
                                    }
                                    if (c2 >= '\u0800' || n5 > n7 - 2) break block8;
                                    n4 = n5 + 1;
                                    arrby[n5] = (byte)(c2 >>> 6 | 960);
                                    n3 = n4 + 1;
                                    arrby[n4] = (byte)(c2 & 63 | 128);
                                    break block7;
                                }
                                if (c2 >= '\ud800' && '\udfff' >= c2 || n5 > n7 - 3) break block9;
                                n3 = n5 + 1;
                                arrby[n5] = (byte)(c2 >>> 12 | 480);
                                n5 = n3 + 1;
                                arrby[n3] = (byte)(c2 >>> 6 & 63 | 128);
                                n3 = n5 + 1;
                                arrby[n5] = (byte)(c2 & 63 | 128);
                                break block7;
                            }
                            if (n5 > n7 - 4) break block10;
                            n3 = n2 + 1;
                            if (n3 == charSequence.length()) break block11;
                            char c3 = charSequence.charAt(n3);
                            if (!Character.isSurrogatePair(c2, c3)) break block12;
                            n2 = Character.toCodePoint(c2, c3);
                            n4 = n5 + 1;
                            arrby[n5] = (byte)(n2 >>> 18 | 240);
                            n5 = n4 + 1;
                            arrby[n4] = (byte)(n2 >>> 12 & 63 | 128);
                            n4 = n5 + 1;
                            arrby[n5] = (byte)(n2 >>> 6 & 63 | 128);
                            n5 = n4 + 1;
                            arrby[n4] = (byte)(n2 & 63 | 128);
                            n2 = n3;
                            n3 = n5;
                        }
                        n5 = n3;
                        continue;
                    }
                    n2 = n3;
                }
                charSequence = new StringBuilder(39);
                charSequence.append("Unpaired surrogate at index ");
                charSequence.append(n2 - 1);
                throw new IllegalArgumentException(charSequence.toString());
            }
            charSequence = new StringBuilder(37);
            charSequence.append("Failed writing ");
            charSequence.append(c2);
            charSequence.append(" at index ");
            charSequence.append(n5);
            throw new ArrayIndexOutOfBoundsException(charSequence.toString());
        }
        return n5;
    }

    public static int a(String string2) {
        int n2 = bjq.a((CharSequence)string2);
        return bjq.d(n2) + n2;
    }

    public static bjq a(byte[] arrby) {
        return bjq.a(arrby, 0, arrby.length);
    }

    public static bjq a(byte[] arrby, int n2, int n3) {
        return new bjq(arrby, 0, n3);
    }

    private static void a(CharSequence charSequence, ByteBuffer object) {
        if (!object.isReadOnly()) {
            if (object.hasArray()) {
                try {
                    object.position(bjq.a(charSequence, object.array(), object.arrayOffset() + object.position(), object.remaining()) - object.arrayOffset());
                    return;
                }
                catch (ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException) {
                    object = new BufferOverflowException();
                    object.initCause(arrayIndexOutOfBoundsException);
                    throw object;
                }
            }
            bjq.b(charSequence, (ByteBuffer)object);
            return;
        }
        throw new ReadOnlyBufferException();
    }

    public static int b(int n2) {
        return bjq.d(n2 << 3);
    }

    public static int b(int n2, int n3) {
        return bjq.b(n2) + bjq.a(n3);
    }

    public static int b(int n2, bjy bjy2) {
        n2 = bjq.b(n2);
        int n3 = bjy2.f();
        return n2 + (bjq.d(n3) + n3);
    }

    public static int b(int n2, String string2) {
        return bjq.b(n2) + bjq.a(string2);
    }

    public static int b(int n2, byte[] arrby) {
        return bjq.b(n2) + bjq.b(arrby);
    }

    public static int b(byte[] arrby) {
        return bjq.d(arrby.length) + arrby.length;
    }

    private final void b(long l2) {
        do {
            if ((-128L & l2) == 0L) {
                this.e((int)l2);
                return;
            }
            this.e((int)l2 & 127 | 128);
            l2 >>>= 7;
        } while (true);
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Lifted jumps to return sites
     */
    private static void b(CharSequence var0, ByteBuffer var1_1) {
        var6_2 = var0.length();
        var4_3 = 0;
        while (var4_3 < var6_2) {
            block4 : {
                block3 : {
                    var2_4 = var0.charAt(var4_3);
                    if (var2_4 >= 128) break block3;
                    var5_6 = var2_4;
                    ** GOTO lbl34
                }
                if (var2_4 >= 2048) break block4;
                var5_6 = var2_4 >>> 6 | 960;
                ** GOTO lbl32
            }
            if (var2_4 < 55296 || 57343 < var2_4) ** GOTO lbl30
            var5_6 = var4_3 + 1;
            if (var5_6 == var0.length()) ** GOTO lbl26
            var3_5 = var0.charAt(var5_6);
            if (Character.isSurrogatePair((char)var2_4, var3_5)) {
                var4_3 = Character.toCodePoint((char)var2_4, var3_5);
                var1_1.put((byte)(var4_3 >>> 18 | 240));
                var1_1.put((byte)(var4_3 >>> 12 & 63 | 128));
                var1_1.put((byte)(var4_3 >>> 6 & 63 | 128));
                var1_1.put((byte)(var4_3 & 63 | 128));
                var4_3 = var5_6;
            } else {
                var4_3 = var5_6;
lbl26: // 2 sources:
                var0 = new StringBuilder(39);
                var0.append("Unpaired surrogate at index ");
                var0.append(var4_3 - 1);
                throw new IllegalArgumentException(var0.toString());
lbl30: // 1 sources:
                var1_1.put((byte)(var2_4 >>> 12 | 480));
                var5_6 = var2_4 >>> 6 & 63 | 128;
lbl32: // 2 sources:
                var1_1.put((byte)var5_6);
                var5_6 = var2_4 & 63 | 128;
lbl34: // 2 sources:
                var1_1.put((byte)var5_6);
            }
            ++var4_3;
        }
    }

    public static int c(int n2, long l2) {
        return bjq.b(n2) + bjq.a(l2);
    }

    private final void c(long l2) {
        if (this.a.remaining() >= 8) {
            this.a.putLong(l2);
            return;
        }
        throw new bjr(this.a.position(), this.a.limit());
    }

    public static int d(int n2) {
        if ((n2 & -128) == 0) {
            return 1;
        }
        if ((n2 & -16384) == 0) {
            return 2;
        }
        if ((-2097152 & n2) == 0) {
            return 3;
        }
        if ((n2 & -268435456) == 0) {
            return 4;
        }
        return 5;
    }

    private final void e(int n2) {
        byte by2 = (byte)n2;
        if (this.a.hasRemaining()) {
            this.a.put(by2);
            return;
        }
        throw new bjr(this.a.position(), this.a.limit());
    }

    public final void a() {
        if (this.a.remaining() == 0) {
            return;
        }
        throw new IllegalStateException(String.format("Did not write as much data as expected, %s bytes remaining.", this.a.remaining()));
    }

    public final void a(int n2, double d2) {
        this.c(n2, 1);
        this.c(Double.doubleToLongBits(d2));
    }

    public final void a(int n2, float f2) {
        this.c(n2, 5);
        n2 = Float.floatToIntBits(f2);
        if (this.a.remaining() >= 4) {
            this.a.putInt(n2);
            return;
        }
        throw new bjr(this.a.position(), this.a.limit());
    }

    public final void a(int n2, int n3) {
        this.c(n2, 0);
        if (n3 >= 0) {
            this.c(n3);
            return;
        }
        this.b(n3);
    }

    public final void a(int n2, long l2) {
        this.c(n2, 0);
        this.b(l2);
    }

    public final void a(int n2, bjy bjy2) {
        this.c(n2, 2);
        this.a(bjy2);
    }

    public final void a(int n2, String string2) {
        this.c(n2, 2);
        try {
            n2 = bjq.d(string2.length());
            if (n2 == bjq.d(string2.length() * 3)) {
                int n3 = this.a.position();
                if (this.a.remaining() >= n2) {
                    this.a.position(n3 + n2);
                    bjq.a(string2, this.a);
                    int n4 = this.a.position();
                    this.a.position(n3);
                    this.c(n4 - n3 - n2);
                    this.a.position(n4);
                    return;
                }
                throw new bjr(n3 + n2, this.a.limit());
            }
            this.c(bjq.a((CharSequence)string2));
            bjq.a(string2, this.a);
            return;
        }
        catch (BufferOverflowException bufferOverflowException) {
            bjr bjr2 = new bjr(this.a.position(), this.a.limit());
            bjr2.initCause(bufferOverflowException);
            throw bjr2;
        }
    }

    public final void a(int n2, boolean bl2) {
        this.c(n2, 0);
        byte by2 = (byte)(bl2 ? 1 : 0);
        if (this.a.hasRemaining()) {
            this.a.put(by2);
            return;
        }
        throw new bjr(this.a.position(), this.a.limit());
    }

    public final void a(int n2, byte[] arrby) {
        this.c(n2, 2);
        this.c(arrby.length);
        this.c(arrby);
    }

    public final void a(bjy bjy2) {
        this.c(bjy2.e());
        bjy2.a(this);
    }

    public final void b(int n2, long l2) {
        this.c(n2, 0);
        this.b(l2);
    }

    public final void c(int n2) {
        do {
            if ((n2 & -128) == 0) {
                this.e(n2);
                return;
            }
            this.e(n2 & 127 | 128);
            n2 >>>= 7;
        } while (true);
    }

    public final void c(int n2, int n3) {
        this.c(n2 << 3 | n3);
    }

    public final void c(byte[] arrby) {
        int n2 = arrby.length;
        if (this.a.remaining() >= n2) {
            this.a.put(arrby, 0, n2);
            return;
        }
        throw new bjr(this.a.position(), this.a.limit());
    }
}

