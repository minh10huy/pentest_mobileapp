/*
 * Decompiled with CFR 0_132.
 */
package com.google.android.gms.internal;

import com.google.android.gms.common.internal.ah;
import com.google.android.gms.internal.alb;
import com.google.android.gms.internal.ald;
import com.google.android.gms.internal.ale;
import com.google.android.gms.internal.alf;
import com.google.android.gms.internal.alg;
import com.google.android.gms.internal.alh;
import com.google.android.gms.internal.ali;
import com.google.android.gms.internal.alj;
import com.google.android.gms.internal.alk;
import com.google.android.gms.internal.all;
import com.google.android.gms.internal.aln;
import com.google.android.gms.internal.alo;
import com.google.android.gms.internal.alp;
import com.google.android.gms.internal.alq;
import com.google.android.gms.internal.alr;
import com.google.android.gms.internal.als;
import com.google.android.gms.internal.alt;
import com.google.android.gms.internal.alu;
import com.google.android.gms.internal.alv;
import com.google.android.gms.internal.alz;
import com.google.android.gms.internal.ama;
import com.google.android.gms.internal.ane;
import com.google.android.gms.internal.aoh;
import com.google.android.gms.internal.asj;
import com.google.android.gms.internal.asp;
import com.google.android.gms.internal.asr;
import com.google.android.gms.internal.ass;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

public final class asq
extends asj<List<asj<?>>> {
    private static final Map<String, alb> c;
    private final ArrayList<asj<?>> b;

    static {
        HashMap<String, ald> hashMap = new HashMap<String, ald>();
        hashMap.put("concat", new ale());
        hashMap.put("every", new alf());
        hashMap.put("filter", new alg());
        hashMap.put("forEach", new alh());
        hashMap.put("indexOf", new ali());
        hashMap.put("hasOwnProperty", ane.a);
        hashMap.put("join", new alj());
        hashMap.put("lastIndexOf", new alk());
        hashMap.put("map", new all());
        hashMap.put("pop", new aln());
        hashMap.put("push", new alo());
        hashMap.put("reduce", new alp());
        hashMap.put("reduceRight", new alq());
        hashMap.put("reverse", new alr());
        hashMap.put("shift", new als());
        hashMap.put("slice", new alt());
        hashMap.put("some", new alu());
        hashMap.put("sort", new alv());
        hashMap.put("splice", new alz());
        hashMap.put("toString", new aoh());
        hashMap.put("unshift", new ama());
        c = Collections.unmodifiableMap(hashMap);
    }

    public asq(List<asj<?>> list) {
        ah.a(list);
        this.b = new ArrayList(list);
    }

    static /* synthetic */ ArrayList a(asq asq2) {
        return asq2.b;
    }

    @Override
    public final Iterator<asj<?>> a() {
        return new ass(this, new asr(this), super.c());
    }

    public final void a(int n2) {
        boolean bl2 = n2 >= 0;
        ah.b(bl2, "Invalid array length");
        if (this.b.size() == n2) {
            return;
        }
        if (this.b.size() < n2) {
            this.b.ensureCapacity(n2);
            for (int i2 = this.b.size(); i2 < n2; ++i2) {
                this.b.add(null);
            }
            return;
        }
        this.b.subList(n2, this.b.size()).clear();
    }

    public final void a(int n2, asj<?> asj2) {
        if (n2 >= 0) {
            if (n2 >= this.b.size()) {
                this.a(n2 + 1);
            }
            this.b.set(n2, asj2);
            return;
        }
        throw new IndexOutOfBoundsException();
    }

    public final asj<?> b(int n2) {
        if (n2 >= 0 && n2 < this.b.size()) {
            asp asp2;
            asp asp3 = asp2 = this.b.get(n2);
            if (asp2 == null) {
                asp3 = asp.e;
            }
            return asp3;
        }
        return asp.e;
    }

    @Override
    public final /* synthetic */ Object b() {
        return this.b;
    }

    public final boolean c(int n2) {
        if (n2 >= 0 && n2 < this.b.size() && this.b.get(n2) != null) {
            return true;
        }
        return false;
    }

    @Override
    public final boolean c(String string2) {
        return c.containsKey(string2);
    }

    @Override
    public final alb d(String string2) {
        if (this.c(string2)) {
            return c.get(string2);
        }
        StringBuilder stringBuilder = new StringBuilder(String.valueOf(string2).length() + 51);
        stringBuilder.append("Native Method ");
        stringBuilder.append(string2);
        stringBuilder.append(" is not defined for type ListWrapper.");
        throw new IllegalStateException(stringBuilder.toString());
    }

    public final boolean equals(Object object) {
        boolean bl2 = false;
        if (this == object) {
            return true;
        }
        boolean bl3 = bl2;
        if (object instanceof asq) {
            object = (List)((asq)object).b();
            bl3 = bl2;
            if (this.b.size() == object.size()) {
                int n2 = 0;
                bl3 = true;
                do {
                    bl2 = bl3;
                    if (n2 >= this.b.size()) break;
                    bl3 = this.b.get(n2) == null ? object.get(n2) == null : this.b.get(n2).equals(object.get(n2));
                    bl2 = bl3;
                    if (!bl3) break;
                    ++n2;
                } while (true);
                bl3 = bl2;
            }
        }
        return bl3;
    }

    @Override
    public final String toString() {
        return this.b.toString();
    }
}

