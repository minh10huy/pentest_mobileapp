/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.content.Context
 *  android.text.TextUtils
 */
package com.google.android.gms.internal;

import android.content.Context;
import android.text.TextUtils;
import com.google.android.gms.ads.c.a;
import com.google.android.gms.common.util.f;
import com.google.android.gms.internal.qv;
import com.google.android.gms.internal.qx;
import com.google.android.gms.internal.rq;
import com.google.android.gms.internal.te;
import com.google.android.gms.internal.tf;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.math.BigInteger;
import java.security.MessageDigest;
import java.util.Locale;

public final class qn
extends qv {
    private static boolean a;
    private a.a b;
    private final te c;
    private String d;
    private boolean e = false;
    private final Object f = new Object();

    qn(qx qx2) {
        super(qx2);
        this.c = new te(qx2.c());
    }

    private static String a(String string2) {
        MessageDigest messageDigest = tf.b("MD5");
        if (messageDigest == null) {
            return null;
        }
        return String.format(Locale.US, "%032X", new BigInteger(1, messageDigest.digest(string2.getBytes())));
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    private final boolean a(a.a object, a.a object2) {
        String string2 = null;
        object2 = object2 == null ? null : object2.a();
        if (TextUtils.isEmpty((CharSequence)object2)) {
            return true;
        }
        String string3 = this.r().b();
        Object object3 = this.f;
        synchronized (object3) {
            if (!this.e) {
                this.d = this.f();
                this.e = true;
            } else if (TextUtils.isEmpty((CharSequence)this.d)) {
                object = object == null ? string2 : object.a();
                if (object == null) {
                    object = String.valueOf(object2);
                    object2 = String.valueOf(string3);
                    object = object2.length() != 0 ? object.concat((String)object2) : new String((String)object);
                    return this.g((String)object);
                }
                object = String.valueOf(object);
                string2 = String.valueOf(string3);
                object = string2.length() != 0 ? object.concat(string2) : new String((String)object);
                this.d = qn.a((String)object);
            }
            object = String.valueOf(object2);
            string2 = String.valueOf(string3);
            object = string2.length() != 0 ? object.concat(string2) : new String((String)object);
            object = qn.a((String)object);
            if (TextUtils.isEmpty((CharSequence)object)) {
                return false;
            }
            if (object.equals(this.d)) {
                return true;
            }
            object = string3;
            if (!TextUtils.isEmpty((CharSequence)this.d)) {
                this.b("Resetting the client id because Advertising Id changed.");
                object = this.r().c();
                this.a("New client Id", object);
            }
            object2 = String.valueOf(object2);
            object = (object = String.valueOf(object)).length() != 0 ? object2.concat((String)object) : new String((String)object2);
            return this.g((String)object);
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    private final a.a d() {
        synchronized (this) {
            if (!this.c.a(1000L)) return this.b;
            this.c.a();
            a.a a2 = this.e();
            if (!this.a(this.b, a2)) {
                this.f("Failed to reset client id on adid change. Not using adid");
                a2 = new a.a("", false);
            }
            this.b = a2;
            return this.b;
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    private final a.a e() {
        try {
            return a.a(this.i());
        }
        catch (Throwable throwable) {
            if (a) return null;
            a = true;
            this.d("Error getting advertiser id", throwable);
            return null;
        }
        catch (IllegalStateException illegalStateException) {}
        this.e("IllegalStateException getting Ad Id Info. If you would like to see Audience reports, please ensure that you have added '<meta-data android:name=\"com.google.android.gms.version\" android:value=\"@integer/google_play_services_version\" />' to your application manifest file. See http://goo.gl/naFqQk for details.");
        return null;
    }

    /*
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    private final String f() {
        String string2;
        void var2_3;
        void var3_12;
        block8 : {
            Object var2_1 = null;
            FileInputStream fileInputStream = this.i().openFileInput("gaClientIdData");
            byte[] arrby = new byte[128];
            int n2 = fileInputStream.read(arrby, 0, 128);
            if (fileInputStream.available() > 0) {
                this.e("Hash file seems corrupted, deleting it.");
                fileInputStream.close();
                this.i().deleteFile("gaClientIdData");
                return null;
            }
            if (n2 <= 0) {
                this.b("Hash file is empty.");
                fileInputStream.close();
                return null;
            }
            string2 = new String(arrby, 0, n2);
            try {
                fileInputStream.close();
                return string2;
            }
            catch (IOException iOException) {
                String string3 = string2;
                IOException iOException2 = iOException;
                break block8;
            }
            catch (IOException iOException) {
                // empty catch block
            }
        }
        this.d("Error reading Hash file, deleting it", var3_12);
        this.i().deleteFile("gaClientIdData");
        return var2_3;
        catch (FileNotFoundException fileNotFoundException) {
            return null;
        }
        catch (FileNotFoundException fileNotFoundException) {
            return string2;
        }
    }

    private final boolean g(String string2) {
        try {
            string2 = qn.a(string2);
            this.b("Storing hashed adid.");
            FileOutputStream fileOutputStream = this.i().openFileOutput("gaClientIdData", 0);
            fileOutputStream.write(string2.getBytes());
            fileOutputStream.close();
            this.d = string2;
            return true;
        }
        catch (IOException iOException) {
            this.e("Error creating hash file", iOException);
            return false;
        }
    }

    @Override
    protected final void a() {
    }

    public final boolean b() {
        this.x();
        a.a a2 = this.d();
        if (a2 != null && !a2.b()) {
            return true;
        }
        return false;
    }

    public final String c() {
        this.x();
        Object object = this.d();
        object = object != null ? object.a() : null;
        if (TextUtils.isEmpty((CharSequence)object)) {
            return null;
        }
        return object;
    }
}

