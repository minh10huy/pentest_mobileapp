/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.content.ContentValues
 *  android.content.Context
 *  android.database.Cursor
 *  android.database.sqlite.SQLiteConstraintException
 *  android.database.sqlite.SQLiteDatabase
 *  android.database.sqlite.SQLiteException
 *  android.text.TextUtils
 *  org.json.JSONObject
 */
package com.google.android.gms.internal;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteConstraintException;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteException;
import android.text.TextUtils;
import com.google.android.gms.common.util.f;
import com.google.android.gms.common.util.h;
import com.google.android.gms.common.util.i;
import com.google.android.gms.internal.aib;
import com.google.android.gms.internal.aif;
import com.google.android.gms.internal.aim;
import com.google.android.gms.internal.ain;
import com.google.android.gms.internal.aiv;
import com.google.android.gms.internal.aiz;
import com.google.android.gms.internal.aja;
import com.google.android.gms.internal.ajd;
import com.google.android.gms.internal.ajp;
import com.google.android.gms.internal.ajv;
import com.google.android.gms.internal.ajx;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import org.json.JSONObject;

final class aiy
implements aim {
    private static final String a = String.format("CREATE TABLE IF NOT EXISTS %s ('%s' TEXT UNIQUE);", "gtm_hit_unique_ids", "hit_unique_id");
    private static final String b = String.format("CREATE TABLE IF NOT EXISTS %s ( '%s' INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, '%s' INTEGER NOT NULL, '%s' TEXT NOT NULL, '%s' INTEGER NOT NULL, '%s' TEXT NOT NULL, '%s' TEXT UNIQUE, '%s' TEXT, '%s' TEXT);", "gtm_hits", "hit_id", "hit_time", "hit_url", "hit_first_send_time", "hit_method", "hit_unique_id", "hit_headers", "hit_body");
    private static final String c = String.format("CREATE TRIGGER IF NOT EXISTS %s DELETE ON %s FOR EACH ROW WHEN OLD.%s NOTNULL BEGIN     INSERT OR IGNORE INTO %s (%s) VALUES (OLD.%s); END;", "save_unique_on_delete", "gtm_hits", "hit_unique_id", "gtm_hit_unique_ids", "hit_unique_id", "hit_unique_id");
    private static final String d = String.format("CREATE TRIGGER IF NOT EXISTS %s BEFORE INSERT ON %s FOR EACH ROW WHEN NEW.%s NOT NULL BEGIN     SELECT RAISE(ABORT, 'Duplicate unique ID.')     WHERE EXISTS (SELECT 1 FROM %s WHERE %s = NEW.%s); END;", "check_unique_on_insert", "gtm_hits", "hit_unique_id", "gtm_hit_unique_ids", "hit_unique_id", "hit_unique_id");
    private final aja e;
    private volatile aib f;
    private final ain g;
    private final Context h;
    private final String i;
    private long j;
    private f k;
    private final int l;

    aiy(ain ain2, Context context) {
        this(ain2, context, "gtm_urls.db", 2000);
    }

    private aiy(ain ain2, Context context, String string2, int n2) {
        this.h = context.getApplicationContext();
        this.i = string2;
        this.g = ain2;
        this.k = i.d();
        this.e = new aja(this, this.h, this.i);
        this.f = new ajv(this.h, new aiz(this));
        this.j = 0L;
        this.l = 2000;
    }

    /*
     * WARNING - Removed back jump from a try to a catch block - possible behaviour change.
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    private final int a(String string2) {
        void var8_11;
        String string3;
        block13 : {
            int n3;
            int n2;
            String string4;
            block14 : {
                int n4;
                Object var9_5;
                block12 : {
                    long l2;
                    SQLiteDatabase sQLiteDatabase = this.b("Error opening database for getNumRecords.");
                    n2 = 0;
                    n4 = 0;
                    if (sQLiteDatabase == null) {
                        return 0;
                    }
                    var9_5 = null;
                    string3 = string4 = null;
                    string2 = String.valueOf(string2);
                    string3 = string4;
                    if (string2.length() != 0) {
                        string3 = string4;
                        string2 = "SELECT COUNT(*) from ".concat(string2);
                    } else {
                        string3 = string4;
                        string2 = new String("SELECT COUNT(*) from ");
                    }
                    string3 = string4;
                    string2 = sQLiteDatabase.rawQuery(string2, null);
                    try {
                        if (!string2.moveToFirst()) break block12;
                        l2 = string2.getLong(0);
                    }
                    catch (Throwable throwable) {
                        string3 = string2;
                        break block13;
                    }
                    catch (SQLiteException sQLiteException) {
                        break block14;
                    }
                    n4 = (int)l2;
                }
                n3 = n4;
                if (string2 == null) return n3;
                string2.close();
                return n4;
                catch (Throwable throwable) {
                    break block13;
                }
                catch (SQLiteException sQLiteException) {
                    string2 = var9_5;
                }
            }
            string3 = string2;
            {
                string4 = String.valueOf(string4.getMessage());
                string3 = string2;
                if (string4.length() != 0) {
                    string3 = string2;
                    string4 = "Error getting numStoredRecords: ".concat(string4);
                } else {
                    string3 = string2;
                    string4 = new String("Error getting numStoredRecords: ");
                }
                string3 = string2;
                aiv.b(string4);
                n3 = n2;
                if (string2 == null) return n3;
            }
            string2.close();
            return n2;
        }
        if (string3 == null) throw var8_11;
        string3.close();
        throw var8_11;
    }

    static /* synthetic */ f a(aiy aiy2) {
        return aiy2.k;
    }

    /*
     * WARNING - Removed back jump from a try to a catch block - possible behaviour change.
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    private final List<String> a(int n2) {
        Object object;
        Cursor cursor;
        block13 : {
            ArrayList<String> arrayList;
            block14 : {
                arrayList = new ArrayList<String>();
                if (n2 <= 0) {
                    aiv.b("Invalid maxHits specified. Skipping");
                    return arrayList;
                }
                SQLiteDatabase sQLiteDatabase = this.b("Error opening database for peekHitIds.");
                if (sQLiteDatabase == null) {
                    return arrayList;
                }
                Cursor cursor2 = null;
                cursor = object = null;
                String string2 = String.format("%s ASC", "hit_id");
                cursor = object;
                String string3 = Integer.toString(n2);
                cursor = object;
                object = sQLiteDatabase.query("gtm_hits", new String[]{"hit_id"}, null, null, null, null, string2, string3);
                try {
                    if (object.moveToFirst()) {
                        boolean bl2;
                        do {
                            arrayList.add(String.valueOf(object.getLong(0)));
                        } while (bl2 = object.moveToNext());
                    }
                    if (object == null) return arrayList;
                }
                catch (Throwable throwable) {
                    cursor = object;
                    object = throwable;
                    break block13;
                }
                catch (SQLiteException sQLiteException) {
                    break block14;
                }
                object.close();
                return arrayList;
                catch (Throwable throwable) {
                    break block13;
                }
                catch (SQLiteException sQLiteException) {
                    object = cursor2;
                }
            }
            cursor = object;
            {
                String string4;
                string4 = String.valueOf(string4.getMessage());
                cursor = object;
                if (string4.length() != 0) {
                    cursor = object;
                    string4 = "Error in peekHits fetching hitIds: ".concat(string4);
                } else {
                    cursor = object;
                    string4 = new String("Error in peekHits fetching hitIds: ");
                }
                cursor = object;
                aiv.b(string4);
                if (object == null) return arrayList;
            }
            object.close();
            return arrayList;
        }
        if (cursor == null) throw object;
        cursor.close();
        throw object;
    }

    private final void a(long l2) {
        this.a(new String[]{String.valueOf(l2)});
    }

    private final void a(long l2, long l3) {
        SQLiteDatabase sQLiteDatabase = this.b("Error opening database for getNumStoredHits.");
        if (sQLiteDatabase == null) {
            return;
        }
        Object object = new ContentValues();
        object.put("hit_first_send_time", Long.valueOf(l3));
        try {
            sQLiteDatabase.update("gtm_hits", (ContentValues)object, "hit_id=?", new String[]{String.valueOf(l2)});
            return;
        }
        catch (SQLiteException sQLiteException) {
            String string2 = sQLiteException.getMessage();
            object = new StringBuilder(String.valueOf(string2).length() + 70);
            object.append("Error setting HIT_FIRST_DISPATCH_TIME for hitId ");
            object.append(l2);
            object.append(": ");
            object.append(string2);
            aiv.b(object.toString());
            this.a(l2);
            return;
        }
    }

    static /* synthetic */ void a(aiy aiy2, long l2) {
        aiy2.a(l2);
    }

    static /* synthetic */ void a(aiy aiy2, long l2, long l3) {
        aiy2.a(l2, l3);
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    private final void a(String[] object) {
        boolean bl2;
        block5 : {
            block6 : {
                if (object != null) {
                    if (((Object)object).length == 0) {
                        return;
                    }
                    SQLiteDatabase sQLiteDatabase = this.b("Error opening database for deleteHits.");
                    if (sQLiteDatabase == null) {
                        return;
                    }
                    bl2 = true;
                    String string2 = String.format("HIT_ID in (%s)", TextUtils.join((CharSequence)",", Collections.nCopies(((Object)object).length, "?")));
                    try {
                        sQLiteDatabase.delete("gtm_hits", string2, (String[])object);
                        object = this.g;
                        if (this.a("gtm_hits") == 0) break block5;
                        break block6;
                    }
                    catch (SQLiteException sQLiteException) {
                        String string3 = String.valueOf(sQLiteException.getMessage());
                        string3 = string3.length() != 0 ? "Error deleting hits: ".concat(string3) : new String("Error deleting hits: ");
                        aiv.b(string3);
                    }
                }
                return;
            }
            bl2 = false;
        }
        object.a(bl2);
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    private final SQLiteDatabase b(String string2) {
        try {
            return this.e.getWritableDatabase();
        }
        catch (SQLiteException sQLiteException) {
            Context context = this.h;
            aiv.b(string2, (Throwable)sQLiteException);
            string2 = h.a(context, (Throwable)sQLiteException) ? "Crash reported successfully." : "Failed to report crash";
            aiv.d(string2);
            return null;
        }
    }

    static /* synthetic */ String b() {
        return a;
    }

    static /* synthetic */ String b(aiy aiy2) {
        return aiy2.i;
    }

    /*
     * Exception decompiling
     */
    private final List<aif> b(int var1_1) {
        // This method has failed to decompile.  When submitting a bug report, please provide this stack trace, and (if you hold appropriate legal rights) the relevant class file.
        // org.benf.cfr.reader.util.ConfusedCFRException: Tried to end blocks [10[TRYBLOCK]], but top level block is 31[WHILELOOP]
        // org.benf.cfr.reader.bytecode.analysis.opgraph.Op04StructuredStatement.processEndingBlocks(Op04StructuredStatement.java:416)
        // org.benf.cfr.reader.bytecode.analysis.opgraph.Op04StructuredStatement.buildNestedBlocks(Op04StructuredStatement.java:468)
        // org.benf.cfr.reader.bytecode.analysis.opgraph.Op03SimpleStatement.createInitialStructuredBlock(Op03SimpleStatement.java:2960)
        // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisInner(CodeAnalyser.java:818)
        // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisOrWrapFail(CodeAnalyser.java:196)
        // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysis(CodeAnalyser.java:141)
        // org.benf.cfr.reader.entities.attributes.AttributeCode.analyse(AttributeCode.java:95)
        // org.benf.cfr.reader.entities.Method.analyse(Method.java:372)
        // org.benf.cfr.reader.entities.ClassFile.analyseMid(ClassFile.java:867)
        // org.benf.cfr.reader.entities.ClassFile.analyseTop(ClassFile.java:768)
        // org.benf.cfr.reader.Main.doJar(Main.java:141)
        // org.benf.cfr.reader.Main.main(Main.java:242)
        throw new IllegalStateException("Decompilation failed");
    }

    static /* synthetic */ Context c(aiy aiy2) {
        return aiy2.h;
    }

    static /* synthetic */ String c() {
        return b;
    }

    static /* synthetic */ String d() {
        return c;
    }

    static /* synthetic */ String e() {
        return d;
    }

    /*
     * WARNING - Removed back jump from a try to a catch block - possible behaviour change.
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    private final int f() {
        SQLiteDatabase sQLiteDatabase;
        Object object;
        block10 : {
            Object object2;
            block11 : {
                int n2;
                object = this.b("Error opening database for getNumStoredHits.");
                if (object == null) {
                    return 0;
                }
                object2 = null;
                sQLiteDatabase = null;
                object = object.query("gtm_hits", new String[]{"hit_id", "hit_first_send_time"}, "hit_first_send_time=0", null, null, null, null);
                try {
                    n2 = object.getCount();
                    if (object == null) return n2;
                }
                catch (Throwable throwable) {
                    sQLiteDatabase = object;
                    object = throwable;
                    break block10;
                }
                catch (SQLiteException sQLiteException) {
                    break block11;
                }
                object.close();
                return n2;
                catch (Throwable throwable) {
                    break block10;
                }
                catch (SQLiteException sQLiteException) {
                    object = object2;
                    object2 = sQLiteException;
                }
            }
            sQLiteDatabase = object;
            {
                object2 = String.valueOf(object2.getMessage());
                sQLiteDatabase = object;
                if (object2.length() != 0) {
                    sQLiteDatabase = object;
                    object2 = "Error getting num untried hits: ".concat((String)object2);
                } else {
                    sQLiteDatabase = object;
                    object2 = new String("Error getting num untried hits: ");
                }
                sQLiteDatabase = object;
                aiv.b((String)object2);
                if (object == null) return 0;
            }
            object.close();
            return 0;
        }
        if (sQLiteDatabase == null) throw object;
        sQLiteDatabase.close();
        throw object;
    }

    @Override
    public final void a() {
        aiv.d("GTM Dispatch running...");
        if (!this.f.a()) {
            return;
        }
        List<aif> list = this.b(40);
        if (list.isEmpty()) {
            aiv.d("...nothing to dispatch");
            this.g.a(true);
            return;
        }
        this.f.a(list);
        if (this.f() > 0) {
            ajp.b().d();
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @Override
    public final void a(long l2, String string2, String charSequence, String string3, Map<String, String> map, String string4) {
        block11 : {
            Object object;
            Object object2;
            int n2;
            long l3 = this.k.a();
            if (l3 > this.j + 86400000L) {
                this.j = l3;
                object2 = this.b("Error opening database for deleteStaleHits.");
                if (object2 != null) {
                    n2 = object2.delete("gtm_hits", "HIT_TIME < ?", new String[]{Long.toString(this.k.a() - 2592000000L)});
                    object2 = new StringBuilder(31);
                    object2.append("Removed ");
                    object2.append(n2);
                    object2.append(" stale hits.");
                    aiv.d(object2.toString());
                    object2 = this.g;
                    boolean bl2 = this.a("gtm_hits") == 0;
                    object2.a(bl2);
                }
            }
            if ((n2 = this.a("gtm_hits") - this.l + 1) > 0) {
                object2 = this.a(n2);
                n2 = object2.size();
                object = new StringBuilder(51);
                object.append("Store full, deleting ");
                object.append(n2);
                object.append(" hits to make room.");
                aiv.d(object.toString());
                this.a(object2.toArray(new String[0]));
            }
            if ((object = this.b("Error opening database for putHit")) != null) {
                void var5_11;
                void var7_13;
                void var4_8;
                void var6_12;
                ContentValues contentValues = new ContentValues();
                contentValues.put("hit_time", Long.valueOf(l2));
                contentValues.put("hit_url", string2);
                contentValues.put("hit_first_send_time", Integer.valueOf(0));
                object2 = charSequence;
                if (charSequence == null) {
                    object2 = "GET";
                }
                contentValues.put("hit_method", (String)object2);
                contentValues.put("hit_unique_id", (String)var5_11);
                if (var6_12 == null) {
                    Object var4_6 = null;
                } else {
                    String string5 = new JSONObject((Map)var6_12).toString();
                }
                contentValues.put("hit_headers", (String)var4_8);
                contentValues.put("hit_body", (String)var7_13);
                try {
                    object.insertOrThrow("gtm_hits", null, contentValues);
                    StringBuilder stringBuilder = new StringBuilder(String.valueOf(string2).length() + 19);
                    stringBuilder.append("Hit stored (url = ");
                    stringBuilder.append(string2);
                    stringBuilder.append(")");
                    aiv.d(stringBuilder.toString());
                    this.g.a(false);
                    break block11;
                }
                catch (SQLiteException sQLiteException) {
                    String string6 = String.valueOf(sQLiteException.getMessage());
                    string6 = string6.length() != 0 ? "Error storing hit: ".concat(string6) : new String("Error storing hit: ");
                    aiv.b(string6);
                    break block11;
                }
                catch (SQLiteConstraintException sQLiteConstraintException) {}
                string2 = String.valueOf(string2);
                string2 = string2.length() != 0 ? "Hit has already been sent: ".concat(string2) : new String("Hit has already been sent: ");
                aiv.d(string2);
            }
        }
        if (ajd.a().b()) {
            aiv.d("Sending hits immediately under preview.");
            this.a();
        }
    }
}

