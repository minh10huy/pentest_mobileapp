/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.util.Base64
 */
package com.google.android.gms.internal;

import android.util.Base64;
import com.google.android.gms.common.internal.ah;
import com.google.android.gms.internal.ahn;
import com.google.android.gms.internal.ajm;
import com.google.android.gms.internal.alc;
import com.google.android.gms.internal.ald;
import com.google.android.gms.internal.asj;
import com.google.android.gms.internal.asw;

public final class apk
extends ald {
    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @Override
    protected final /* varargs */ asj<?> a(ajm object, asj<?> ... object2) {
        block17 : {
            String string2;
            int n2;
            block16 : {
                boolean bl2 = true;
                ah.b(true);
                boolean bl3 = ((Object)object2).length > 0;
                ah.b(bl3);
                String string3 = alc.d(object2[0]);
                object = "text";
                if (((Object)object2).length > 1) {
                    object = alc.d(object2[1]);
                }
                string2 = "base16";
                int n3 = ((Object)object2).length;
                n2 = 2;
                if (n3 > 2) {
                    string2 = alc.d(object2[2]);
                }
                if (((Object)object2).length <= 3 || !alc.a(object2[3])) {
                    bl2 = false;
                }
                if (bl2) {
                    n2 = 3;
                }
                try {
                    if ("text".equals(object)) {
                        object = object2 = string3.getBytes();
                        break block16;
                    }
                    if ("base16".equals(object)) {
                        object = object2 = ahn.a(string3);
                        break block16;
                    }
                    if ("base64".equals(object)) {
                        object = object2 = Base64.decode((String)string3, (int)n2);
                        break block16;
                    }
                    if (!"base64url".equals(object)) break block17;
                    object = object2 = Base64.decode((String)string3, (int)(n2 | 8));
                }
                catch (IllegalArgumentException illegalArgumentException) {}
            }
            if ("base16".equals(string2)) {
                object = ahn.a((byte[])object);
                return new asw((String)object);
            }
            if ("base64".equals(string2)) {
                object = Base64.encodeToString((byte[])object, (int)n2);
                return new asw((String)object);
            }
            if ("base64url".equals(string2)) {
                object = Base64.encodeToString((byte[])object, (int)(n2 | 8));
                return new asw((String)object);
            }
            object = String.valueOf(string2);
            if (object.length() != 0) {
                object = "Encode: unknown output format: ".concat((String)object);
                throw new RuntimeException((String)object);
            }
            object = new String("Encode: unknown output format: ");
            throw new RuntimeException((String)object);
        }
        object2 = String.valueOf(object);
        if (object2.length() != 0) {
            object2 = "Encode: unknown input format: ".concat((String)object2);
            throw new UnsupportedOperationException((String)object2);
        }
        object2 = new String("Encode: unknown input format: ");
        throw new UnsupportedOperationException((String)object2);
        object = String.valueOf(object);
        if (object.length() != 0) {
            object = "Encode: invalid input:".concat((String)object);
            throw new RuntimeException((String)object);
        }
        object = new String("Encode: invalid input:");
        throw new RuntimeException((String)object);
    }
}

