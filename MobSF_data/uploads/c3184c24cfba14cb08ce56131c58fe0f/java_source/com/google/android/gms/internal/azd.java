/*
 * Decompiled with CFR 0_132.
 */
package com.google.android.gms.internal;

import com.google.android.gms.internal.ati;
import com.google.android.gms.internal.aza;
import com.google.android.gms.internal.azc;
import java.nio.Buffer;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.security.GeneralSecurityException;

abstract class azd
implements ati {
    private final byte[] a;
    private final azc b;
    private final azc c;

    azd(byte[] arrby) {
        this.a = (byte[])arrby.clone();
        this.b = this.a(arrby, 1);
        this.c = this.a(arrby, 0);
    }

    abstract azc a(byte[] var1, int var2);

    @Override
    public byte[] a(byte[] arrby, byte[] arrby2) {
        int n2 = arrby.length;
        this.b.a();
        if (n2 <= 2147483619) {
            ByteBuffer byteBuffer = ByteBuffer.allocate(arrby.length + this.b.a() + 16);
            if (byteBuffer.remaining() >= arrby.length + this.b.a() + 16) {
                n2 = byteBuffer.position();
                this.b.a(byteBuffer, arrby);
                byteBuffer.position(n2);
                arrby = new byte[this.b.a()];
                byteBuffer.get(arrby);
                byteBuffer.limit(byteBuffer.limit() - 16);
                ByteBuffer byteBuffer2 = this.c.b(arrby, 0);
                arrby = new byte[32];
                byteBuffer2.get(arrby);
                n2 = arrby2.length % 16 == 0 ? arrby2.length : arrby2.length + 16 - arrby2.length % 16;
                int n3 = byteBuffer.remaining();
                int n4 = n3 % 16;
                n4 = n4 == 0 ? n3 : n3 + 16 - n4;
                byteBuffer2 = ByteBuffer.allocate((n4 += n2) + 16).order(ByteOrder.LITTLE_ENDIAN);
                byteBuffer2.put(arrby2);
                byteBuffer2.position(n2);
                byteBuffer2.put(byteBuffer);
                byteBuffer2.position(n4);
                byteBuffer2.putLong(arrby2.length);
                byteBuffer2.putLong(n3);
                arrby = aza.a(arrby, byteBuffer2.array());
                byteBuffer.limit(byteBuffer.limit() + 16);
                byteBuffer.put(arrby);
                return byteBuffer.array();
            }
            throw new IllegalArgumentException("Given ByteBuffer output is too small");
        }
        throw new GeneralSecurityException("plaintext too long");
    }
}

