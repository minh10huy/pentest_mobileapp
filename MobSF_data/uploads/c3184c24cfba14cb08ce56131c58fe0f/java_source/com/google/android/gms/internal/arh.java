/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.content.Context
 */
package com.google.android.gms.internal;

import android.content.Context;
import com.google.android.gms.common.util.n;
import com.google.android.gms.internal.aiv;
import com.google.android.gms.internal.aqv;
import com.google.android.gms.internal.ari;
import com.google.android.gms.internal.arj;
import com.google.android.gms.internal.ark;
import com.google.android.gms.internal.arl;
import com.google.android.gms.internal.arm;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public final class arh {
    private final Context a;
    private final arm b;
    private final ExecutorService c;

    public arh(Context context) {
        this(context, Executors.newSingleThreadExecutor(), new ari(context));
    }

    private arh(Context context, ExecutorService executorService, arm arm2) {
        this.a = context;
        this.c = executorService;
        this.b = arm2;
    }

    /*
     * WARNING - Removed back jump from a try to a catch block - possible behaviour change.
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    private static byte[] a(InputStream var0) {
        var1_2 = new ByteArrayOutputStream();
        try {
            n.a(var0, var1_2, false);
        }
        catch (Throwable var1_3) {}
lbl4: // 2 sources:
        do {
            var0.close();
            return var1_2.toByteArray();
            break;
        } while (true);
        try {
            var0.close();
        }
        catch (IOException var0_1) {}
        throw var1_3;
        catch (IOException var2_4) {}
        {
            aiv.b("Failed to read the resource from disk");
            ** continue;
        }
        aiv.b("Error closing stream for reading resource from disk");
        return null;
    }

    private final File b(String string2) {
        return new File(this.a.getDir("google_tagmanager", 0), arh.c(string2));
    }

    private static String c(String string2) {
        String string3 = String.valueOf("resource_");
        if ((string2 = String.valueOf(string2)).length() != 0) {
            return string3.concat(string2);
        }
        return new String(string3);
    }

    public final long a(String object) {
        if ((object = this.b((String)object)).exists()) {
            return object.lastModified();
        }
        return 0L;
    }

    public final void a(String string2, aqv aqv2) {
        this.c.execute(new arj(this, string2, aqv2));
    }

    public final void a(String string2, String string3, aqv aqv2) {
        this.c.execute(new ark(this, string2, string3, aqv2));
    }

    public final void a(String string2, byte[] arrby) {
        this.c.execute(new arl(this, string2, arrby));
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    final void b(String string2, aqv aqv2) {
        aiv.d("Starting to load a saved resource file from Disk.");
        try {
            aqv2.a(arh.a(new FileInputStream(this.b(string2))));
            return;
        }
        catch (FileNotFoundException fileNotFoundException) {}
        string2 = String.valueOf(arh.c(string2));
        string2 = string2.length() != 0 ? "Saved resource not found: ".concat(string2) : new String("Saved resource not found: ");
        aiv.a(string2);
        aqv2.a(0, 1);
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    final void b(String string2, String string3, aqv aqv2) {
        aiv.d("Starting to load a default asset file from Disk.");
        if (string3 == null) {
            aiv.d("Default asset file is not specified. Not proceeding with the loading");
        } else {
            try {
                InputStream inputStream = this.b.a(string3);
                if (inputStream != null) {
                    aqv2.a(arh.a(inputStream));
                    return;
                }
                aqv2.a(0, 2);
                return;
            }
            catch (IOException iOException) {}
            StringBuilder stringBuilder = new StringBuilder(String.valueOf(string2).length() + 42 + String.valueOf(string3).length());
            stringBuilder.append("Default asset file not found. ");
            stringBuilder.append(string2);
            stringBuilder.append(". Filename: ");
            stringBuilder.append(string3);
            aiv.a(stringBuilder.toString());
        }
        aqv2.a(0, 2);
    }

    /*
     * WARNING - Removed back jump from a try to a catch block - possible behaviour change.
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    final void b(String var1_1, byte[] var2_6) {
        var4_10 = this.b(var1_1);
        var3_11 = new FileOutputStream(var4_10);
        var3_11.write((byte[])var2_6);
        try {
            var3_11.close();
            var2_6 = new StringBuilder(String.valueOf(var1_1).length() + 24);
            var2_6.append("Resource ");
            var2_6.append(var1_1);
            var2_6.append(" saved on Disk.");
            aiv.d(var2_6.toString());
            return;
        }
        catch (IOException var1_2) {
            ** continue;
        }
        catch (FileNotFoundException var1_4) {}
        var1_3 = "Error opening resource file for writing";
        ** GOTO lbl21
lbl19: // 1 sources:
        do {
            var1_3 = "Error closing stream for writing resource to disk";
lbl21: // 2 sources:
            aiv.a(var1_3);
            return;
            break;
        } while (true);
        catch (Throwable var2_7) {}
        try {
            var3_11.close();
            var3_11 = new StringBuilder(String.valueOf(var1_1).length() + 24);
            var3_11.append("Resource ");
            var3_11.append(var1_1);
            var3_11.append(" saved on Disk.");
            aiv.d(var3_11.toString());
            throw var2_7;
        }
        catch (IOException var1_5) {}
        catch (IOException var2_8) {}
        {
            aiv.a("Error writing resource to disk. Removing resource from disk");
            var4_10.delete();
        }
        var3_11.close();
        var2_9 = new StringBuilder(String.valueOf(var1_1).length() + 24);
        var2_9.append("Resource ");
        var2_9.append(var1_1);
        var2_9.append(" saved on Disk.");
        aiv.d(var2_9.toString());
        return;
        aiv.a("Error closing stream for writing resource to disk");
        throw var2_7;
    }
}

