/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.os.Handler
 *  android.os.Looper
 *  android.os.Message
 *  android.os.RemoteException
 *  android.util.Log
 *  android.util.Pair
 */
package com.google.android.gms.common.api.internal;

import android.os.Handler;
import android.os.Looper;
import android.os.Message;
import android.os.RemoteException;
import android.util.Log;
import android.util.Pair;
import com.google.android.gms.common.annotation.KeepName;
import com.google.android.gms.common.api.Status;
import com.google.android.gms.common.api.f;
import com.google.android.gms.common.api.g;
import com.google.android.gms.common.api.i;
import com.google.android.gms.common.api.internal.bz;
import com.google.android.gms.common.api.internal.cf;
import com.google.android.gms.common.api.internal.cv;
import com.google.android.gms.common.api.k;
import com.google.android.gms.common.api.l;
import com.google.android.gms.common.internal.ah;
import com.google.android.gms.common.internal.r;
import java.lang.ref.WeakReference;
import java.util.ArrayList;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.atomic.AtomicReference;

@KeepName
public abstract class BasePendingResult<R extends k>
extends g<R> {
    static final ThreadLocal<Boolean> b = new cv();
    private final Object a = new Object();
    private a<R> c;
    private WeakReference<f> d;
    private final CountDownLatch e = new CountDownLatch(1);
    private final ArrayList<g.a> f = new ArrayList();
    private l<? super R> g;
    private final AtomicReference<cf> h = new AtomicReference();
    private R i;
    private Status j;
    private volatile boolean k;
    private boolean l;
    private boolean m;
    @KeepName
    private b mResultGuardian;
    private r n;
    private volatile bz<R> o;
    private boolean p = false;

    @Deprecated
    BasePendingResult() {
        this.c = new a(Looper.getMainLooper());
        this.d = new WeakReference<Object>(null);
    }

    protected BasePendingResult(f f2) {
        Looper looper = f2 != null ? f2.c() : Looper.getMainLooper();
        this.c = new a(looper);
        this.d = new WeakReference<f>(f2);
    }

    public static void b(k object) {
        if (object instanceof i) {
            try {
                ((i)object).a();
                return;
            }
            catch (RuntimeException runtimeException) {
                object = String.valueOf(object);
                StringBuilder stringBuilder = new StringBuilder(String.valueOf(object).length() + 18);
                stringBuilder.append("Unable to release ");
                stringBuilder.append((String)object);
                Log.w((String)"BasePendingResult", (String)stringBuilder.toString(), (Throwable)runtimeException);
            }
        }
    }

    private final void c(R object) {
        this.i = object;
        this.n = null;
        this.e.countDown();
        this.j = this.i.k_();
        if (this.l) {
            this.g = null;
        } else if (this.g == null) {
            if (this.i instanceof i) {
                this.mResultGuardian = new b(this, null);
            }
        } else {
            this.c.removeMessages(2);
            this.c.a(this.g, (R)this.g());
        }
        object = this.f;
        int n2 = object.size();
        for (int i2 = 0; i2 < n2; ++i2) {
            Object e2 = object.get(i2);
            ((g.a)e2).a(this.j);
        }
        this.f.clear();
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    private final R g() {
        R r2;
        Object object = this.a;
        synchronized (object) {
            ah.a(this.k ^ true, (Object)"Result has already been consumed.");
            ah.a(this.d(), (Object)"Result is not ready.");
            r2 = this.i;
            this.i = null;
            this.g = null;
            this.k = true;
        }
        object = this.h.getAndSet(null);
        if (object != null) {
            object.a(this);
        }
        return r2;
    }

    protected abstract R a(Status var1);

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Converted monitor instructions to comments
     * Lifted jumps to return sites
     */
    @Override
    public void a() {
        Object object = this.a;
        // MONITORENTER : object
        if (this.l) {
            // MONITOREXIT : object
            return;
        }
        if (this.k) {
            return;
        }
        r r2 = this.n;
        if (r2 != null) {
            try {
                this.n.a();
            }
            catch (RemoteException remoteException) {}
        }
        BasePendingResult.b(this.i);
        this.l = true;
        this.c(this.a(Status.e));
        // MONITOREXIT : object
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @Override
    public final void a(g.a a2) {
        boolean bl2 = a2 != null;
        ah.b(bl2, "Callback cannot be null.");
        Object object = this.a;
        synchronized (object) {
            if (this.d()) {
                a2.a(this.j);
            } else {
                this.f.add(a2);
            }
            return;
        }
    }

    public final void a(cf cf2) {
        this.h.set(cf2);
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public final void a(R r2) {
        Object object = this.a;
        synchronized (object) {
            if (!this.m && !this.l) {
                this.d();
                ah.a(this.d() ^ true, (Object)"Results have already been set");
                ah.a(this.k ^ true, (Object)"Result has already been consumed");
                this.c(r2);
                return;
            }
            BasePendingResult.b(r2);
            return;
        }
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Converted monitor instructions to comments
     * Lifted jumps to return sites
     */
    @Override
    public final void a(l<? super R> var1_1) {
        block5 : {
            var4_3 = this.a;
            // MONITORENTER : var4_3
            if (var1_1 != null) ** GOTO lbl8
            this.g = null;
            // MONITOREXIT : var4_3
            return;
lbl8: // 1 sources:
            var3_4 = this.k;
            var2_5 = true;
            ah.a(var3_4 ^ true, (Object)"Result has already been consumed.");
            if (this.o == null) break block5;
            var2_5 = false;
        }
        ah.a(var2_5, (Object)"Cannot set callbacks if then() has been called.");
        if (this.b()) {
            // MONITOREXIT : var4_3
            return;
        }
        if (this.d()) {
            this.c.a(var1_1, (R)this.g());
            return;
        }
        this.g = var1_1;
        // MONITOREXIT : var4_3
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @Override
    public boolean b() {
        Object object = this.a;
        synchronized (object) {
            return this.l;
        }
    }

    @Override
    public final Integer c() {
        return null;
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public final void c(Status status) {
        Object object = this.a;
        synchronized (object) {
            if (!this.d()) {
                this.a(this.a(status));
                this.m = true;
            }
            return;
        }
    }

    public final boolean d() {
        if (this.e.getCount() == 0L) {
            return true;
        }
        return false;
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public final boolean e() {
        Object object = this.a;
        synchronized (object) {
            if (this.d.get() != null) {
                if (this.p) return this.b();
            }
            this.a();
            return this.b();
        }
    }

    public final void f() {
        boolean bl2 = this.p || b.get().booleanValue();
        this.p = bl2;
    }

    public static final class a<R extends k>
    extends Handler {
        public a() {
            this(Looper.getMainLooper());
        }

        public a(Looper looper) {
            super(looper);
        }

        public final void a(l<? super R> l2, R r2) {
            this.sendMessage(this.obtainMessage(1, (Object)new Pair(l2, r2)));
        }

        public final void handleMessage(Message object) {
            switch (object.what) {
                default: {
                    int n2 = object.what;
                    object = new StringBuilder(45);
                    object.append("Don't know how to handle message: ");
                    object.append(n2);
                    Log.wtf((String)"BasePendingResult", (String)object.toString(), (Throwable)new Exception());
                    return;
                }
                case 2: {
                    ((BasePendingResult)object.obj).c(Status.d);
                    return;
                }
                case 1: 
            }
            Object object2 = (Pair)object.obj;
            object = (l)object2.first;
            object2 = (k)object2.second;
            try {
                object.a(object2);
                return;
            }
            catch (RuntimeException runtimeException) {
                BasePendingResult.b((k)object2);
                throw runtimeException;
            }
        }
    }

    final class b {
        private /* synthetic */ BasePendingResult a;

        private b(BasePendingResult basePendingResult) {
            this.a = basePendingResult;
        }

        /* synthetic */ b(BasePendingResult basePendingResult, cv cv2) {
            this(basePendingResult);
        }

        protected final void finalize() {
            BasePendingResult.b(this.a.i);
            super.finalize();
        }
    }

}

