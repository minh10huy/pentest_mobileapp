/*
 * Decompiled with CFR 0_132.
 */
package com.google.android.gms.internal;

import com.google.android.gms.common.internal.ah;
import com.google.android.gms.internal.aiv;
import com.google.android.gms.internal.ajm;
import com.google.android.gms.internal.alc;
import com.google.android.gms.internal.ald;
import com.google.android.gms.internal.asj;
import com.google.android.gms.internal.asp;
import com.google.android.gms.internal.asw;

public final class aot
extends ald {
    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Lifted jumps to return sites
     */
    @Override
    protected final /* varargs */ asj<?> a(ajm var1_1, asj<?> ... var2_2) {
        block16 : {
            block14 : {
                block15 : {
                    var3_3 = 1;
                    ah.b(true);
                    var5_4 = var2_2.length == 2;
                    ah.b(var5_4);
                    ah.b(var2_2[0] instanceof asw);
                    var1_1 = alc.d(var2_2[1]);
                    var6_5 = (String)((asw)var2_2[0]).b();
                    var4_6 = var6_5.hashCode();
                    if (var4_6 == 101) break block14;
                    if (var4_6 == 105) break block15;
                    switch (var4_6) {
                        default: {
                            ** GOTO lbl-1000
                        }
                        case 119: {
                            if (var6_5.equals("w")) {
                                var3_3 = 3;
                                ** break;
                            }
                            ** GOTO lbl-1000
                        }
                        case 118: {
                            if (var6_5.equals("v")) {
                                var3_3 = 2;
                                ** break;
                            }
                            ** GOTO lbl-1000
lbl24: // 2 sources:
                            break;
                        }
                    }
                    break block16;
                }
                if (!var6_5.equals("i")) ** GOTO lbl-1000
                break block16;
            }
            if (var6_5.equals("e")) {
                var3_3 = 0;
            } else lbl-1000: // 5 sources:
            {
                var3_3 = -1;
            }
        }
        switch (var3_3) {
            default: {
                var1_1 = String.valueOf((String)((asw)var2_2[0]).b());
                if (var1_1.length() == 0) break;
                var1_1 = "Invalid logging level: ".concat((String)var1_1);
                throw new IllegalArgumentException((String)var1_1);
            }
            case 3: {
                aiv.b((String)var1_1);
                return asp.e;
            }
            case 2: {
                aiv.d((String)var1_1);
                return asp.e;
            }
            case 1: {
                aiv.c((String)var1_1);
                return asp.e;
            }
            case 0: {
                aiv.a((String)var1_1);
                return asp.e;
            }
        }
        var1_1 = new String("Invalid logging level: ");
        throw new IllegalArgumentException((String)var1_1);
    }
}

