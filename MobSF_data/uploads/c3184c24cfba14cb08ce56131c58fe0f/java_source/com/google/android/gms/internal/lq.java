/*
 * Decompiled with CFR 0_132.
 */
package com.google.android.gms.internal;

import com.google.android.gms.ads.internal.av;
import com.google.android.gms.internal.ak;
import com.google.android.gms.internal.lf;
import com.google.android.gms.internal.lg;
import java.util.concurrent.CancellationException;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Executor;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;

@ak
public class lq<T>
implements lf<T> {
    private final Object a = new Object();
    private T b;
    private Throwable c;
    private boolean d;
    private boolean e;
    private final lg f = new lg();

    private final boolean a() {
        if (this.c == null && !this.d) {
            return false;
        }
        return true;
    }

    @Override
    public final void a(Runnable runnable, Executor executor) {
        this.f.a(runnable, executor);
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public final void a(Throwable throwable) {
        Object object = this.a;
        synchronized (object) {
            if (this.e) {
                return;
            }
            if (this.a()) {
                av.i().a(new IllegalStateException("Provided SettableFuture with multiple values."), "SettableFuture.setException");
                return;
            }
            this.c = throwable;
            this.a.notifyAll();
            this.f.a();
            return;
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public final void b(T t2) {
        Object object = this.a;
        synchronized (object) {
            if (this.e) {
                return;
            }
            if (this.a()) {
                av.i().a(new IllegalStateException("Provided SettableFuture with multiple values."), "SettableFuture.set");
                return;
            }
            this.d = true;
            this.b = t2;
            this.a.notifyAll();
            this.f.a();
            return;
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @Override
    public boolean cancel(boolean bl2) {
        if (!bl2) {
            return false;
        }
        Object object = this.a;
        synchronized (object) {
            if (this.a()) {
                return false;
            }
            this.e = true;
            this.d = true;
            this.a.notifyAll();
            this.f.a();
            return true;
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @Override
    public T get() {
        Object object = this.a;
        synchronized (object) {
            boolean bl2 = this.a();
            if (!bl2) {
                this.a.wait();
            }
            if (this.c != null) {
                throw new ExecutionException(this.c);
            }
            if (!this.e) {
                T t2 = this.b;
                return t2;
            }
            throw new CancellationException("SettableFuture was cancelled.");
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @Override
    public T get(long l2, TimeUnit timeUnit) {
        Object object = this.a;
        synchronized (object) {
            boolean bl2 = this.a();
            if (!bl2) {
                l2 = timeUnit.toMillis(l2);
                if (l2 != 0L) {
                    this.a.wait(l2);
                }
            }
            if (this.c != null) {
                throw new ExecutionException(this.c);
            }
            if (!this.d) {
                throw new TimeoutException("SettableFuture timed out.");
            }
            if (!this.e) {
                timeUnit = this.b;
                return (T)((Object)timeUnit);
            }
            throw new CancellationException("SettableFuture was cancelled.");
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @Override
    public boolean isCancelled() {
        Object object = this.a;
        synchronized (object) {
            return this.e;
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @Override
    public boolean isDone() {
        Object object = this.a;
        synchronized (object) {
            return this.a();
        }
    }
}

