/*
 * Decompiled with CFR 0_132.
 */
package com.google.android.gms.internal;

import com.google.android.gms.internal.bdv;
import com.google.android.gms.internal.beh;
import java.util.Random;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.TimeUnit;

public final class bdt {
    private final ScheduledExecutorService a;
    private final beh b;
    private final long c;
    private final long d;
    private final double e;
    private final double f;
    private final Random g = new Random();
    private ScheduledFuture<?> h;
    private long i;
    private boolean j = true;

    private bdt(ScheduledExecutorService scheduledExecutorService, beh beh2, long l2, long l3, double d2, double d3) {
        this.a = scheduledExecutorService;
        this.b = beh2;
        this.c = l2;
        this.d = l3;
        this.f = d2;
        this.e = d3;
    }

    /* synthetic */ bdt(ScheduledExecutorService scheduledExecutorService, beh beh2, long l2, long l3, double d2, double d3, bdv bdv2) {
        this(scheduledExecutorService, beh2, l2, l3, d2, d3);
    }

    static /* synthetic */ ScheduledFuture a(bdt bdt2, ScheduledFuture scheduledFuture) {
        bdt2.h = null;
        return null;
    }

    public final void a() {
        this.j = true;
        this.i = 0L;
    }

    /*
     * Enabled aggressive block sorting
     */
    public final void a(Runnable runnable) {
        runnable = new bdv(this, runnable);
        if (this.h != null) {
            this.b.a("Cancelling previous scheduled retry", null, new Object[0]);
            this.h.cancel(false);
            this.h = null;
        }
        boolean bl2 = this.j;
        long l2 = 0L;
        if (!bl2) {
            l2 = this.i == 0L ? this.c : Math.min((long)((double)this.i * this.f), this.d);
            this.i = l2;
            l2 = (long)((1.0 - this.e) * (double)this.i + this.e * (double)this.i * this.g.nextDouble());
        }
        this.j = false;
        this.b.a("Scheduling retry in %dms", null, l2);
        this.h = this.a.schedule(runnable, l2, TimeUnit.MILLISECONDS);
    }

    public final void b() {
        this.i = this.d;
    }

    public final void c() {
        if (this.h != null) {
            this.b.a("Cancelling existing retry attempt", null, new Object[0]);
            this.h.cancel(false);
            this.h = null;
        } else {
            this.b.a("No existing retry attempt to cancel", null, new Object[0]);
        }
        this.i = 0L;
    }
}

