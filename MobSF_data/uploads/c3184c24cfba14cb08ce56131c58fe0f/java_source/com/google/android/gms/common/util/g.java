/*
 * Decompiled with CFR 0_132.
 */
package com.google.android.gms.common.util;

import android.support.v4.g.a;
import android.support.v4.g.b;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

public final class g {
    private static <K, V> Map<K, V> a(int n2, boolean bl2, K[] arrK, V[] arrV) {
        int n3 = 0;
        Map<K, V> map = g.b(n2, false);
        for (n2 = n3; n2 < arrK.length; ++n2) {
            map.put(arrK[n2], arrV[n2]);
        }
        return map;
    }

    public static <K, V> Map<K, V> a(K k2, V v2, K k3, V v3, K k4, V v4) {
        Map<K, V> map = g.b(3, false);
        map.put(k2, v2);
        map.put(k3, v3);
        map.put(k4, v4);
        return Collections.unmodifiableMap(map);
    }

    public static <K, V> Map<K, V> a(K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5, K k6, V v6, K k7, V v7) {
        Map<K, V> map = g.b(6, false);
        map.put(k2, v2);
        map.put(k3, v3);
        map.put(k4, v4);
        map.put(k5, v5);
        map.put(k6, v6);
        map.put(k7, v7);
        return Collections.unmodifiableMap(map);
    }

    public static <K, V> Map<K, V> a(K[] object, V[] arrV) {
        if (((K[])object).length == arrV.length) {
            switch (((K[])object).length) {
                default: {
                    return Collections.unmodifiableMap(g.a(((K[])object).length, false, object, arrV));
                }
                case 1: {
                    return Collections.singletonMap(object[0], arrV[0]);
                }
                case 0: 
            }
            return Collections.emptyMap();
        }
        int n2 = ((K[])object).length;
        int n3 = arrV.length;
        object = new StringBuilder(66);
        object.append("Key and values array lengths not equal: ");
        object.append(n2);
        object.append(" != ");
        object.append(n3);
        throw new IllegalArgumentException(object.toString());
    }

    private static <T> Set<T> a(int n2, boolean bl2) {
        if (n2 <= 256) {
            return new b(n2);
        }
        return new HashSet(n2, 1.0f);
    }

    public static <T> Set<T> a(T t2, T t3, T t4) {
        Set<T> set = g.a(3, false);
        set.add(t2);
        set.add(t3);
        set.add(t4);
        return Collections.unmodifiableSet(set);
    }

    public static /* varargs */ <T> Set<T> a(T ... object) {
        switch (((T[])object).length) {
            default: {
                Set<T> set = g.a(((T[])object).length, false);
                Collections.addAll(set, object);
                return Collections.unmodifiableSet(set);
            }
            case 4: {
                T t2 = object[0];
                T t3 = object[1];
                T t4 = object[2];
                object = object[3];
                Set<T> set = g.a(4, false);
                set.add(t2);
                set.add(t3);
                set.add(t4);
                set.add(object);
                return Collections.unmodifiableSet(set);
            }
            case 3: {
                return g.a(object[0], object[1], object[2]);
            }
            case 2: {
                T t5 = object[0];
                object = object[1];
                Set<T> set = g.a(2, false);
                set.add(t5);
                set.add(object);
                return Collections.unmodifiableSet(set);
            }
            case 1: {
                return Collections.singleton(object[0]);
            }
            case 0: 
        }
        return Collections.emptySet();
    }

    private static <K, V> Map<K, V> b(int n2, boolean bl2) {
        if (n2 <= 256) {
            return new a(n2);
        }
        return new HashMap(n2, 1.0f);
    }
}

