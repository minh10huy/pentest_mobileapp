/*
 * Decompiled with CFR 0_132.
 */
package com.google.android.gms.internal;

import com.google.android.gms.internal.ak;
import com.google.android.gms.internal.he;
import com.google.android.gms.internal.hn;
import com.google.android.gms.internal.ho;
import com.google.android.gms.internal.hp;
import com.google.android.gms.internal.hq;
import com.google.android.gms.internal.hr;
import com.google.android.gms.internal.lf;
import com.google.android.gms.internal.lk;
import com.google.android.gms.internal.lq;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.Callable;
import java.util.concurrent.Executor;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Future;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.RejectedExecutionException;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

@ak
public final class hm {
    public static final ThreadPoolExecutor a = new ThreadPoolExecutor(20, 20, 1L, TimeUnit.MINUTES, new LinkedBlockingQueue<Runnable>(), hm.a("Default"));
    private static final ThreadPoolExecutor b = new ThreadPoolExecutor(5, 5, 1L, TimeUnit.MINUTES, new LinkedBlockingQueue<Runnable>(), hm.a("Loader"));

    static {
        a.allowCoreThreadTimeOut(true);
        b.allowCoreThreadTimeOut(true);
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    public static lf<Void> a(int n2, Runnable object) {
        ThreadPoolExecutor threadPoolExecutor;
        if (n2 == 1) {
            threadPoolExecutor = b;
            object = new hn((Runnable)object);
            do {
                return hm.a(threadPoolExecutor, object);
                break;
            } while (true);
        }
        threadPoolExecutor = a;
        object = new ho((Runnable)object);
        return hm.a(threadPoolExecutor, object);
    }

    public static lf<Void> a(Runnable runnable) {
        return hm.a(0, runnable);
    }

    public static <T> lf<T> a(ExecutorService executorService, Callable<T> callable) {
        lq lq2 = new lq();
        try {
            lq2.a(new hq(lq2, executorService.submit(new hp(lq2, callable))), lk.a);
            return lq2;
        }
        catch (RejectedExecutionException rejectedExecutionException) {
            he.c("Thread execution is rejected.", rejectedExecutionException);
            lq2.a(rejectedExecutionException);
            return lq2;
        }
    }

    private static ThreadFactory a(String string2) {
        return new hr(string2);
    }
}

