/*
 * Decompiled with CFR 0_132.
 */
package com.google.android.gms.internal;

import com.google.android.gms.internal.bja;
import com.google.android.gms.internal.bjd;
import com.google.android.gms.internal.bje;
import com.google.android.gms.internal.bjf;
import com.google.android.gms.internal.bjg;

final class bjc {
    private static final bjd a;

    static {
        boolean bl2 = bja.a() && bja.b();
        bjd bjd2 = bl2 ? new bjg() : new bje();
        a = bjd2;
    }

    static /* synthetic */ int a(int n2) {
        return bjc.b(n2);
    }

    static /* synthetic */ int a(int n2, int n3) {
        return bjc.b(n2, n3);
    }

    static /* synthetic */ int a(int n2, int n3, int n4) {
        return bjc.b(n2, n3, n4);
    }

    static int a(CharSequence charSequence) {
        int n2;
        int n3;
        block10 : {
            int n4;
            n2 = charSequence.length();
            int n5 = 0;
            for (n4 = 0; n4 < n2 && charSequence.charAt(n4) < '?'; ++n4) {
            }
            int n6 = n2;
            do {
                n3 = n6;
                if (n4 >= n2) break block10;
                n3 = charSequence.charAt(n4);
                if (n3 >= 2048) break;
                n6 += 127 - n3 >>> 31;
                ++n4;
            } while (true);
            int n7 = charSequence.length();
            n3 = n5;
            while (n4 < n7) {
                char c2 = charSequence.charAt(n4);
                if (c2 < '\u0800') {
                    n3 += 127 - c2 >>> 31;
                    n5 = n4;
                } else {
                    int n8;
                    n3 = n8 = n3 + 2;
                    n5 = n4;
                    if ('\ud800' <= c2) {
                        n3 = n8;
                        n5 = n4;
                        if (c2 <= '\udfff') {
                            if (Character.codePointAt(charSequence, n4) >= 65536) {
                                n5 = n4 + 1;
                                n3 = n8;
                            } else {
                                throw new bjf(n4, n7);
                            }
                        }
                    }
                }
                n4 = n5 + 1;
            }
            n3 = n6 + n3;
        }
        if (n3 >= n2) {
            return n3;
        }
        long l2 = n3;
        charSequence = new StringBuilder(54);
        charSequence.append("UTF-8 length does not fit in int: ");
        charSequence.append(l2 + 0x100000000L);
        throw new IllegalArgumentException(charSequence.toString());
    }

    static int a(CharSequence charSequence, byte[] arrby, int n2, int n3) {
        return a.a(charSequence, arrby, n2, n3);
    }

    public static boolean a(byte[] arrby, int n2, int n3) {
        if (a.a(0, arrby, n2, n3) == 0) {
            return true;
        }
        return false;
    }

    private static int b(int n2) {
        int n3 = n2;
        if (n2 > -12) {
            n3 = -1;
        }
        return n3;
    }

    private static int b(int n2, int n3) {
        if (n2 <= -12 && n3 <= -65) {
            return n2 ^ n3 << 8;
        }
        return -1;
    }

    private static int b(int n2, int n3, int n4) {
        if (n2 <= -12 && n3 <= -65 && n4 <= -65) {
            return n2 ^ n3 << 8 ^ n4 << 16;
        }
        return -1;
    }

    static /* synthetic */ int b(byte[] arrby, int n2, int n3) {
        return bjc.c(arrby, n2, n3);
    }

    private static int c(byte[] arrby, int n2, int n3) {
        byte by2 = arrby[n2 - 1];
        switch (n3 - n2) {
            default: {
                throw new AssertionError();
            }
            case 2: {
                return bjc.b(by2, (int)arrby[n2], (int)arrby[n2 + 1]);
            }
            case 1: {
                return bjc.b(by2, arrby[n2]);
            }
            case 0: 
        }
        return bjc.b(by2);
    }
}

