/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.text.TextUtils
 *  org.json.JSONArray
 *  org.json.JSONException
 *  org.json.JSONObject
 */
package com.google.android.gms.internal;

import android.text.TextUtils;
import com.google.android.gms.common.a.a;
import com.google.android.gms.internal.wi;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

public final class wp {
    private static final wi a = new wi("MetadataUtils");
    private static final String[] b = new String[]{"Z", "+hh", "+hhmm", "+hh:mm"};
    private static final String c;

    static {
        String string2 = String.valueOf("yyyyMMdd'T'HHmmss");
        String string3 = String.valueOf(b[0]);
        string2 = string3.length() != 0 ? string2.concat(string3) : new String(string2);
        c = string2;
    }

    public static Calendar a(String object) {
        if (TextUtils.isEmpty((CharSequence)object)) {
            a.a("Input string is empty or null", new Object[0]);
            return null;
        }
        Object object2 = wp.b((String)object);
        if (TextUtils.isEmpty((CharSequence)object2)) {
            a.a("Invalid date format", new Object[0]);
            return null;
        }
        String string2 = wp.c((String)object);
        object = "yyyyMMdd";
        CharSequence charSequence = object2;
        if (!TextUtils.isEmpty((CharSequence)string2)) {
            object = String.valueOf(object2);
            charSequence = new StringBuilder(String.valueOf(object).length() + 1 + String.valueOf(string2).length());
            charSequence.append((String)object);
            charSequence.append("T");
            charSequence.append(string2);
            charSequence = charSequence.toString();
            object = string2.length() == 6 ? "yyyyMMdd'T'HHmmss" : c;
        }
        object2 = GregorianCalendar.getInstance();
        try {
            object = new SimpleDateFormat((String)object).parse((String)charSequence);
            object2.setTime((Date)object);
            return object2;
        }
        catch (ParseException parseException) {
            a.a("Error parsing string: %s", parseException.getMessage());
            return null;
        }
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    public static void a(List<a> var0, JSONObject var1_2) {
        block5 : {
            try {
                var0.clear();
                var1_2 = var1_2.getJSONArray("images");
                var3_3 = var1_2.length();
                var2_4 = 0;
lbl6: // 2 sources:
                if (var2_4 >= var3_3) return;
                var4_5 = var1_2.getJSONObject(var2_4);
                var0.add(new a(var4_5));
                break block5;
            }
            catch (JSONException var0_1) {
                return;
            }
            catch (IllegalArgumentException var4_6) {}
        }
        ++var2_4;
        ** GOTO lbl6
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    public static void a(JSONObject jSONObject, List<a> iterator) {
        if (iterator == null || iterator.isEmpty()) return;
        JSONArray jSONArray = new JSONArray();
        iterator = iterator.iterator();
        while (iterator.hasNext()) {
            jSONArray.put((Object)((a)iterator.next()).d());
        }
        try {
            jSONObject.put("images", (Object)jSONArray);
            return;
        }
        catch (JSONException jSONException) {
            return;
        }
    }

    private static String b(String string2) {
        if (TextUtils.isEmpty((CharSequence)string2)) {
            a.a("Input string is empty or null", new Object[0]);
            return null;
        }
        try {
            string2 = string2.substring(0, 8);
            return string2;
        }
        catch (IndexOutOfBoundsException indexOutOfBoundsException) {
            a.b("Error extracting the date: %s", indexOutOfBoundsException.getMessage());
            return null;
        }
    }

    private static String c(String string2) {
        if (TextUtils.isEmpty((CharSequence)string2)) {
            a.a("string is empty or null", new Object[0]);
            return null;
        }
        int n2 = string2.indexOf(84);
        if (n2 != 8) {
            a.a("T delimeter is not found", new Object[0]);
            return null;
        }
        int n3 = 1;
        try {
            string2 = string2.substring(n2 + 1);
        }
        catch (IndexOutOfBoundsException indexOutOfBoundsException) {
            a.a("Error extracting the time substring: %s", indexOutOfBoundsException.getMessage());
            return null;
        }
        if (string2.length() == 6) {
            return string2;
        }
        n2 = string2.charAt(6);
        if (n2 != 43 && n2 != 45) {
            if (n2 != 90) {
                return null;
            }
            if (string2.length() == b[0].length() + 6) {
                string2 = String.valueOf(string2.substring(0, string2.length() - 1));
                String string3 = String.valueOf("+0000");
                if (string3.length() != 0) {
                    return string2.concat(string3);
                }
                return new String(string2);
            }
            return null;
        }
        int n4 = string2.length();
        n2 = n3;
        if (n4 != b[1].length() + 6) {
            n2 = n3;
            if (n4 != b[2].length() + 6) {
                n2 = n4 == b[3].length() + 6 ? n3 : 0;
            }
        }
        if (n2 != 0) {
            return string2.replaceAll("([\\+\\-]\\d\\d):(\\d\\d)", "$1$2");
        }
        return null;
    }
}

