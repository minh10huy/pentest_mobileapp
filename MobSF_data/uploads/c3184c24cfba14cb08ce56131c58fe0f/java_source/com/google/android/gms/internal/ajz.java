/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.app.Service
 *  android.content.ComponentCallbacks
 *  android.content.ComponentName
 *  android.content.Context
 *  android.content.pm.PackageManager
 *  android.content.pm.PackageManager$NameNotFoundException
 *  android.content.pm.ServiceInfo
 *  android.content.res.AssetManager
 *  android.net.Uri
 *  android.os.RemoteException
 *  android.util.Pair
 */
package com.google.android.gms.internal;

import android.app.Service;
import android.content.ComponentCallbacks;
import android.content.ComponentName;
import android.content.Context;
import android.content.pm.PackageManager;
import android.content.pm.ServiceInfo;
import android.content.res.AssetManager;
import android.net.Uri;
import android.os.RemoteException;
import android.util.Pair;
import com.google.android.gms.common.internal.ah;
import com.google.android.gms.internal.ahy;
import com.google.android.gms.internal.aip;
import com.google.android.gms.internal.aiv;
import com.google.android.gms.internal.ajd;
import com.google.android.gms.internal.aka;
import com.google.android.gms.internal.akb;
import com.google.android.gms.internal.akd;
import com.google.android.gms.internal.akf;
import com.google.android.gms.internal.akg;
import com.google.android.gms.internal.aki;
import com.google.android.gms.internal.akk;
import com.google.android.gms.internal.akm;
import com.google.android.gms.internal.akv;
import com.google.android.gms.tagmanager.TagManagerService;
import com.google.android.gms.tagmanager.h;
import com.google.android.gms.tagmanager.k;
import com.google.android.gms.tagmanager.n;
import com.google.android.gms.tagmanager.q;
import java.io.File;
import java.io.IOException;
import java.util.LinkedList;
import java.util.Queue;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.TimeUnit;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public final class ajz {
    private static final Pattern a = Pattern.compile("(gtm-[a-z0-9]{1,10})\\.json", 2);
    private static volatile ajz b;
    private static c r;
    private final Context c;
    private final q d;
    private final h e;
    private final akv f;
    private final ExecutorService g;
    private final ScheduledExecutorService h;
    private final ajd i;
    private final a j;
    private final Object k = new Object();
    private String l;
    private String m;
    private int n = 1;
    private final Queue<Runnable> o = new LinkedList<Runnable>();
    private volatile boolean p = false;
    private volatile boolean q = false;

    static {
        r = new aka();
    }

    ajz(Context context, q q2, h h2, akv akv2, ExecutorService executorService, ScheduledExecutorService scheduledExecutorService, ajd ajd2, a a2) {
        ah.a(context);
        ah.a(q2);
        this.c = context;
        this.d = q2;
        this.e = h2;
        this.f = akv2;
        this.g = executorService;
        this.h = scheduledExecutorService;
        this.i = ajd2;
        this.j = a2;
    }

    static /* synthetic */ int a(ajz ajz2) {
        return ajz2.n;
    }

    static /* synthetic */ int a(ajz ajz2, int n2) {
        ajz2.n = n2;
        return n2;
    }

    static /* synthetic */ Pair a(ajz ajz2, String[] arrstring) {
        return ajz2.b(null);
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public static ajz a(Context context, q q2, h h2) {
        ah.a(context);
        ah.a(context);
        ajz ajz2 = b;
        if (ajz2 != null) {
            return ajz2;
        }
        synchronized (ajz.class) {
            ajz ajz3;
            ajz2 = ajz3 = b;
            if (ajz3 == null) {
                b = ajz2 = r.a(context, q2, h2);
            }
            return ajz2;
        }
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    private static boolean a(Context context, Class<? extends Service> class_) {
        block4 : {
            try {
                context = context.getPackageManager().getServiceInfo(new ComponentName(context, class_), 4);
                if (context == null) break block4;
            }
            catch (PackageManager.NameNotFoundException nameNotFoundException) {
                return false;
            }
            boolean bl2 = context.enabled;
            if (!bl2) break block4;
            return true;
        }
        do {
            return false;
            break;
        } while (true);
    }

    static /* synthetic */ boolean a(ajz ajz2, boolean bl2) {
        ajz2.p = false;
        return false;
    }

    private final Pair<String, String> b(String[] object) {
        int n2;
        int n3;
        String[] arrstring;
        aiv.d("Looking up container asset.");
        if (this.l != null && this.m != null) {
            return Pair.create((Object)this.l, (Object)this.m);
        }
        int n4 = 0;
        try {
            arrstring = this.j.a("containers");
            n2 = 0;
        }
        catch (IOException iOException) {
            aiv.a(String.format("Failed to enumerate assets in folder %s", "containers"), iOException);
            return Pair.create(null, null);
        }
        for (n3 = 0; n3 < arrstring.length; ++n3) {
            object = a.matcher(arrstring[n3]);
            if (object.matches()) {
                if (n2 == 0) {
                    this.l = object.group(1);
                    object = File.separator;
                    String string2 = arrstring[n3];
                    StringBuilder stringBuilder = new StringBuilder(String.valueOf(object).length() + 10 + String.valueOf(string2).length());
                    stringBuilder.append("containers");
                    stringBuilder.append((String)object);
                    stringBuilder.append(string2);
                    this.m = stringBuilder.toString();
                    object = String.valueOf(this.l);
                    object = object.length() != 0 ? "Asset found for container ".concat((String)object) : new String("Asset found for container ");
                    aiv.d((String)object);
                    n2 = 1;
                    continue;
                }
                object = String.valueOf(arrstring[n3]);
                object = object.length() != 0 ? "Extra container asset found, will not be loaded: ".concat((String)object) : new String("Extra container asset found, will not be loaded: ");
            } else {
                object = String.format("Ignoring container asset %s (does not match %s)", arrstring[n3], a.pattern());
            }
            aiv.b((String)object);
        }
        if (n2 == 0) {
            aiv.b("No container asset found in /assets/containers. Checking top level /assets directory for container assets.");
            try {
                arrstring = this.j.a();
                n3 = n2;
            }
            catch (IOException iOException) {
                aiv.a("Failed to enumerate assets.", iOException);
                return Pair.create(null, null);
            }
            for (n2 = n4; n2 < arrstring.length; ++n2) {
                object = a.matcher(arrstring[n2]);
                n4 = n3;
                if (object.matches()) {
                    if (n3 == 0) {
                        this.l = object.group(1);
                        this.m = arrstring[n2];
                        object = String.valueOf(this.l);
                        object = object.length() != 0 ? "Asset found for container ".concat((String)object) : new String("Asset found for container ");
                        aiv.d((String)object);
                        aiv.b("Loading container assets from top level /assets directory. Please move the container asset to /assets/containers");
                        n4 = 1;
                    } else {
                        object = String.valueOf(arrstring[n2]);
                        object = object.length() != 0 ? "Extra container asset found, will not be loaded: ".concat((String)object) : new String("Extra container asset found, will not be loaded: ");
                        aiv.b((String)object);
                        n4 = n3;
                    }
                }
                n3 = n4;
            }
        }
        return Pair.create((Object)this.l, (Object)this.m);
    }

    static /* synthetic */ akv b(ajz ajz2) {
        return ajz2.f;
    }

    static /* synthetic */ q c(ajz ajz2) {
        return ajz2.d;
    }

    static /* synthetic */ Context d(ajz ajz2) {
        return ajz2.c;
    }

    static /* synthetic */ Queue e(ajz ajz2) {
        return ajz2.o;
    }

    static /* synthetic */ Object g(ajz ajz2) {
        return ajz2.k;
    }

    static /* synthetic */ ajd h(ajz ajz2) {
        return ajz2.i;
    }

    static /* synthetic */ boolean i(ajz ajz2) {
        return ajz2.p;
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public final void a() {
        Object object;
        aiv.d("Initializing Tag Manager.");
        long l2 = System.currentTimeMillis();
        Object object2 = this.k;
        synchronized (object2) {
            if (this.p) {
                return;
            }
            if (!ajz.a(this.c, TagManagerService.class)) {
                aiv.b("Tag Manager fails to initialize (TagManagerService not enabled in the manifest)");
                return;
            }
            object = this.b(null);
            String string2 = (String)object.first;
            String string3 = (String)object.second;
            if (string2 != null && string3 != null) {
                object = String.valueOf(string2);
                object = object.length() != 0 ? "Loading container ".concat((String)object) : new String("Loading container ");
                aiv.c((String)object);
                this.g.execute(new akf(this, string2, string3, null));
                this.h.schedule(new akg(this), 5000L, TimeUnit.MILLISECONDS);
                if (!this.q) {
                    aiv.c("Installing Tag Manager event handler.");
                    this.q = true;
                    try {
                        this.d.a(new akb(this));
                    }
                    catch (RemoteException remoteException) {
                        ahy.a("Error communicating with measurement proxy: ", (Throwable)remoteException, this.c);
                    }
                    try {
                        this.d.a(new akd(this));
                    }
                    catch (RemoteException remoteException) {
                        ahy.a("Error communicating with measurement proxy: ", (Throwable)remoteException, this.c);
                    }
                    this.c.registerComponentCallbacks((ComponentCallbacks)new aki(this));
                    aiv.c("Tag Manager event handler installed.");
                }
            } else {
                aiv.b("Tag Manager's event handler WILL NOT be installed (no container loaded)");
            }
        }
        long l3 = System.currentTimeMillis();
        object = new StringBuilder(53);
        object.append("Tag Manager initilization took ");
        object.append(l3 - l2);
        object.append("ms");
        aiv.c(object.toString());
        return;
        {
            finally {
                this.p = true;
            }
        }
    }

    final void a(Uri uri) {
        this.g.execute(new akk(this, uri));
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public final void a(String[] object) {
        aiv.d("Initializing Tag Manager.");
        long l2 = System.currentTimeMillis();
        Object object2 = this.k;
        synchronized (object2) {
            if (this.p) {
                return;
            }
            if (!ajz.a(this.c, TagManagerService.class)) {
                aiv.b("Tag Manager fails to initialize (TagManagerService not enabled in the manifest)");
                return;
            }
            object = this.b(null);
            String string2 = (String)object.first;
            String string3 = (String)object.second;
            if (string2 != null && string3 != null) {
                object = String.valueOf(string2);
                object = object.length() != 0 ? "Loading container ".concat((String)object) : new String("Loading container ");
                aiv.c((String)object);
                this.g.execute(new akf(this, string2, string3, null));
                this.h.schedule(new akg(this), 5000L, TimeUnit.MILLISECONDS);
                if (!this.q) {
                    aiv.c("Installing Tag Manager event handler.");
                    this.q = true;
                    try {
                        this.d.a(new akb(this));
                    }
                    catch (RemoteException remoteException) {
                        ahy.a("Error communicating with measurement proxy: ", (Throwable)remoteException, this.c);
                    }
                    try {
                        this.d.a(new akd(this));
                    }
                    catch (RemoteException remoteException) {
                        ahy.a("Error communicating with measurement proxy: ", (Throwable)remoteException, this.c);
                    }
                    this.c.registerComponentCallbacks((ComponentCallbacks)new aki(this));
                    aiv.c("Tag Manager event handler installed.");
                }
            } else {
                aiv.b("Tag Manager's event handler WILL NOT be installed (no container loaded)");
            }
        }
        long l3 = System.currentTimeMillis();
        object = new StringBuilder(53);
        object.append("Tag Manager initilization took ");
        object.append(l3 - l2);
        object.append("ms");
        aiv.c(object.toString());
        return;
        {
            finally {
                this.p = true;
            }
        }
    }

    public static final class a {
        private final Context a;

        public a(Context context) {
            this.a = context;
        }

        public final String[] a() {
            return this.a.getAssets().list("");
        }

        public final String[] a(String string2) {
            return this.a.getAssets().list(string2);
        }
    }

    final class b
    extends aip {
        private b() {
        }

        /* synthetic */ b(aka aka2) {
            this();
        }

        @Override
        public final void a(boolean bl2, String string2) {
            ajz.this.g.execute(new akm(this, bl2, string2));
        }
    }

    public static interface c {
        public ajz a(Context var1, q var2, h var3);
    }

}

