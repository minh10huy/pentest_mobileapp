/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.content.ContentResolver
 *  android.content.Context
 *  android.os.Build
 *  android.os.Build$VERSION
 *  android.provider.Settings
 *  android.provider.Settings$Global
 *  android.util.JsonWriter
 */
package com.google.android.gms.internal;

import android.content.ContentResolver;
import android.content.Context;
import android.os.Build;
import android.provider.Settings;
import android.util.JsonWriter;
import com.google.android.gms.common.util.d;
import com.google.android.gms.common.util.f;
import com.google.android.gms.common.util.i;
import com.google.android.gms.internal.ak;
import com.google.android.gms.internal.bqj;
import com.google.android.gms.internal.bsz;
import com.google.android.gms.internal.btk;
import com.google.android.gms.internal.jz;
import com.google.android.gms.internal.ke;
import com.google.android.gms.internal.kf;
import com.google.android.gms.internal.kg;
import com.google.android.gms.internal.kh;
import com.google.android.gms.internal.ki;
import com.google.android.gms.internal.kj;
import java.io.IOException;
import java.io.StringWriter;
import java.io.Writer;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.UUID;

@ak
public final class kd {
    private static Object a = new Object();
    private static boolean b = false;
    private static boolean c = false;
    private static f d = i.d();
    private static final Set<String> e = new HashSet<String>(Arrays.asList(new String[0]));
    private final List<String> f;

    public kd() {
        this(null);
    }

    public kd(String object) {
        if (!kd.c()) {
            object = new ArrayList();
        } else {
            String string2 = UUID.randomUUID().toString();
            if (object == null) {
                object = String.valueOf(string2);
                object = object.length() != 0 ? "network_request_".concat((String)object) : new String("network_request_");
                object = Arrays.asList(object);
            } else {
                object = (object = String.valueOf(object)).length() != 0 ? "ad_request_".concat((String)object) : new String("ad_request_");
                string2 = String.valueOf(string2);
                string2 = string2.length() != 0 ? "network_request_".concat(string2) : new String("network_request_");
                object = Arrays.asList(object, string2);
            }
        }
        this.f = object;
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public static void a() {
        Object object = a;
        synchronized (object) {
            b = false;
            c = false;
            kj.e("Ad debug logging enablement is out of date.");
            return;
        }
    }

    static final /* synthetic */ void a(int n2, Map map, JsonWriter jsonWriter) {
        jsonWriter.name("params").beginObject();
        jsonWriter.name("firstline").beginObject();
        jsonWriter.name("code").value((long)n2);
        jsonWriter.endObject();
        kd.a(jsonWriter, map);
        jsonWriter.endObject();
    }

    private static void a(JsonWriter jsonWriter, Map<String, ?> object) {
        if (object == null) {
            return;
        }
        jsonWriter.name("headers").beginArray();
        for (Map.Entry entry : object.entrySet()) {
            String string2 = (String)entry.getKey();
            if (e.contains(string2)) continue;
            if (entry.getValue() instanceof List) {
                for (String string3 : (List)entry.getValue()) {
                    jsonWriter.beginObject();
                    jsonWriter.name("name").value(string2);
                    jsonWriter.name("value").value(string3);
                    jsonWriter.endObject();
                }
                continue;
            }
            if (entry.getValue() instanceof String) {
                jsonWriter.beginObject();
                jsonWriter.name("name").value(string2);
                jsonWriter.name("value").value((String)entry.getValue());
                jsonWriter.endObject();
                continue;
            }
            kj.c("Connection headers should be either Map<String, String> or Map<String, List<String>>");
            break;
        }
        jsonWriter.endArray();
    }

    static final /* synthetic */ void a(String string2, JsonWriter jsonWriter) {
        jsonWriter.name("params").beginObject();
        if (string2 != null) {
            jsonWriter.name("error_description").value(string2);
        }
        jsonWriter.endObject();
    }

    private final void a(String object, ki ki2) {
        StringWriter stringWriter = new StringWriter();
        JsonWriter jsonWriter = new JsonWriter((Writer)stringWriter);
        try {
            jsonWriter.beginObject();
            jsonWriter.name("timestamp").value(d.a());
            jsonWriter.name("event").value((String)object);
            jsonWriter.name("components").beginArray();
            object = this.f.iterator();
            while (object.hasNext()) {
                jsonWriter.value((String)object.next());
            }
            jsonWriter.endArray();
            ki2.a(jsonWriter);
            jsonWriter.endObject();
            jsonWriter.flush();
            jsonWriter.close();
        }
        catch (IOException iOException) {
            kj.b("unable to log", iOException);
        }
        kd.c(stringWriter.toString());
    }

    static final /* synthetic */ void a(String string2, String string3, Map map, byte[] arrby, JsonWriter jsonWriter) {
        jsonWriter.name("params").beginObject();
        jsonWriter.name("firstline").beginObject();
        jsonWriter.name("uri").value(string2);
        jsonWriter.name("verb").value(string3);
        jsonWriter.endObject();
        kd.a(jsonWriter, map);
        if (arrby != null) {
            jsonWriter.name("body").value(d.a(arrby));
        }
        jsonWriter.endObject();
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public static void a(boolean bl2) {
        Object object = a;
        synchronized (object) {
            b = true;
            c = bl2;
            return;
        }
    }

    /*
     * Enabled aggressive block sorting
     */
    static final /* synthetic */ void a(byte[] object, JsonWriter jsonWriter) {
        int n2;
        void var1_4;
        block4 : {
            String string2;
            void var0_2;
            block3 : {
                block2 : {
                    var1_4.name("params").beginObject();
                    n2 = ((byte[])object).length;
                    string2 = d.a(object);
                    if (n2 >= 10000) break block2;
                    String string3 = "body";
                    break block3;
                }
                if ((string2 = jz.a(string2)) == null) break block4;
                String string4 = "bodydigest";
            }
            var1_4.name((String)var0_2).value(string2);
        }
        var1_4.name("bodylength").value((long)n2);
        var1_4.endObject();
    }

    public static boolean a(Context context) {
        if (Build.VERSION.SDK_INT < 17) {
            return false;
        }
        bsz<Boolean> bsz2 = btk.aZ;
        if (bqj.f().a(bsz2).booleanValue() && Settings.Global.getInt((ContentResolver)context.getContentResolver(), (String)"development_settings_enabled", (int)0) != 0) {
            return true;
        }
        return false;
    }

    private final void b(String string2) {
        this.a("onNetworkRequestError", new kh(string2));
    }

    private final void b(String string2, String string3, Map<String, ?> map, byte[] arrby) {
        this.a("onNetworkRequest", new ke(string2, string3, map, arrby));
    }

    private final void b(Map<String, ?> map, int n2) {
        this.a("onNetworkResponse", new kf(n2, map));
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public static boolean b() {
        Object object = a;
        synchronized (object) {
            return b;
        }
    }

    private static void c(String string2) {
        synchronized (kd.class) {
            kj.d("GMA Debug BEGIN");
            int n2 = 0;
            do {
                if (n2 >= string2.length()) break;
                int n3 = n2 + 4000;
                String string3 = String.valueOf(string2.substring(n2, Math.min(n3, string2.length())));
                string3 = string3.length() != 0 ? "GMA Debug CONTENT ".concat(string3) : new String("GMA Debug CONTENT ");
                kj.d(string3);
                n2 = n3;
                continue;
                break;
            } while (true);
            try {
                kj.d("GMA Debug FINISH");
                return;
            }
            catch (Throwable throwable) {
                throw throwable;
            }
            finally {
            }
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public static boolean c() {
        Object object = a;
        synchronized (object) {
            if (!b) return false;
            if (!c) return false;
            return true;
        }
    }

    public final void a(String string2) {
        if (!kd.c()) {
            return;
        }
        if (string2 == null) {
            return;
        }
        this.a(string2.getBytes());
    }

    public final void a(String string2, String string3, Map<String, ?> map, byte[] arrby) {
        if (!kd.c()) {
            return;
        }
        this.b(string2, string3, map, arrby);
    }

    public final void a(HttpURLConnection object, int n2) {
        if (!kd.c()) {
            return;
        }
        HashMap<String, List<String>> hashMap = object.getHeaderFields() == null ? null : new HashMap<String, List<String>>(object.getHeaderFields());
        this.b(hashMap, n2);
        if (n2 < 200 || n2 >= 300) {
            try {
                object = object.getResponseMessage();
            }
            catch (IOException iOException) {
                object = String.valueOf(iOException.getMessage());
                object = object.length() != 0 ? "Can not get error message from error HttpURLConnection\n".concat((String)object) : new String("Can not get error message from error HttpURLConnection\n");
                kj.e((String)object);
                object = null;
            }
            this.b((String)object);
        }
    }

    public final void a(HttpURLConnection httpURLConnection, byte[] arrby) {
        if (!kd.c()) {
            return;
        }
        HashMap<String, List<String>> hashMap = httpURLConnection.getRequestProperties() == null ? null : new HashMap<String, List<String>>(httpURLConnection.getRequestProperties());
        this.b(new String(httpURLConnection.getURL().toString()), new String(httpURLConnection.getRequestMethod()), hashMap, arrby);
    }

    public final void a(Map<String, ?> map, int n2) {
        if (!kd.c()) {
            return;
        }
        this.b(map, n2);
        if (n2 < 200 || n2 >= 300) {
            this.b(null);
        }
    }

    public final void a(byte[] arrby) {
        this.a("onNetworkResponseBody", new kg(arrby));
    }
}

