/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.graphics.Bitmap
 *  android.graphics.Bitmap$CompressFormat
 *  android.graphics.drawable.BitmapDrawable
 *  android.graphics.drawable.Drawable
 *  android.net.Uri
 *  android.os.Bundle
 *  android.os.IBinder
 *  android.os.RemoteException
 *  android.text.TextUtils
 *  android.util.Base64
 *  android.view.View
 *  android.view.View$OnClickListener
 *  org.json.JSONArray
 *  org.json.JSONException
 *  org.json.JSONObject
 */
package com.google.android.gms.ads.internal;

import android.graphics.Bitmap;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.Drawable;
import android.net.Uri;
import android.os.Bundle;
import android.os.IBinder;
import android.os.RemoteException;
import android.text.TextUtils;
import android.util.Base64;
import android.view.View;
import com.google.android.gms.a.a;
import com.google.android.gms.a.m;
import com.google.android.gms.ads.internal.c;
import com.google.android.gms.ads.internal.gmsg.aa;
import com.google.android.gms.ads.internal.t;
import com.google.android.gms.ads.internal.u;
import com.google.android.gms.ads.internal.v;
import com.google.android.gms.ads.internal.w;
import com.google.android.gms.ads.internal.x;
import com.google.android.gms.internal.ak;
import com.google.android.gms.internal.bru;
import com.google.android.gms.internal.buk;
import com.google.android.gms.internal.bum;
import com.google.android.gms.internal.bun;
import com.google.android.gms.internal.bup;
import com.google.android.gms.internal.bvw;
import com.google.android.gms.internal.bvx;
import com.google.android.gms.internal.caw;
import com.google.android.gms.internal.cbd;
import com.google.android.gms.internal.cbq;
import com.google.android.gms.internal.cbz;
import com.google.android.gms.internal.ccc;
import com.google.android.gms.internal.gl;
import com.google.android.gms.internal.he;
import com.google.android.gms.internal.nu;
import com.google.android.gms.internal.pk;
import com.google.android.gms.internal.pl;
import java.io.ByteArrayOutputStream;
import java.io.OutputStream;
import java.util.Iterator;
import java.util.List;
import java.util.concurrent.CountDownLatch;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

@ak
public final class s {
    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public static View a(gl object) {
        if (object == null) {
            he.c("AdState is null");
            return null;
        }
        if (s.b((gl)object) && object.b != null) {
            return object.b.getView();
        }
        try {
            object = object.o != null ? object.o.a() : null;
            if (object != null) return (View)m.a((a)object);
            he.e("View in mediation adapter is null.");
            return null;
        }
        catch (RemoteException remoteException) {
            he.c("Could not get View from mediation adapter.", (Throwable)remoteException);
            return null;
        }
    }

    static aa<nu> a(cbz cbz2, ccc ccc2, c c2) {
        return new x(cbz2, c2, ccc2);
    }

    private static bvw a(Object object) {
        if (object instanceof IBinder) {
            return bvx.a((IBinder)object);
        }
        return null;
    }

    private static String a(Bitmap object) {
        Object object2 = new ByteArrayOutputStream();
        if (object == null) {
            he.e("Bitmap is null. Returning empty string");
            return "";
        }
        object.compress(Bitmap.CompressFormat.PNG, 100, (OutputStream)object2);
        object2 = Base64.encodeToString((byte[])object2.toByteArray(), (int)0);
        object = String.valueOf("data:image/png;base64,");
        object2 = String.valueOf(object2);
        if (object2.length() != 0) {
            return object.concat((String)object2);
        }
        return new String((String)object);
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    private static String a(bvw bvw2) {
        if (bvw2 == null) {
            he.e("Image is null. Returning empty string");
            return "";
        }
        try {
            Uri uri = bvw2.b();
            if (uri == null) return s.b(bvw2);
            return uri.toString();
        }
        catch (RemoteException remoteException) {}
        he.e("Unable to get image uri. Trying data uri next");
        return s.b(bvw2);
    }

    /*
     * Enabled aggressive block sorting
     */
    private static JSONObject a(Bundle bundle, String object) {
        JSONObject jSONObject;
        block5 : {
            jSONObject = new JSONObject();
            if (bundle == null) break block5;
            if (TextUtils.isEmpty((CharSequence)object)) {
                return jSONObject;
            }
            JSONObject jSONObject2 = new JSONObject((String)object);
            Iterator iterator = jSONObject2.keys();
            while (iterator.hasNext()) {
                String string2;
                block8 : {
                    block10 : {
                        block9 : {
                            block6 : {
                                block7 : {
                                    string2 = (String)iterator.next();
                                    if (!bundle.containsKey(string2)) continue;
                                    if (!"image".equals(jSONObject2.getString(string2))) break block6;
                                    object = bundle.get(string2);
                                    if (!(object instanceof Bitmap)) break block7;
                                    object = s.a((Bitmap)object);
                                    break block8;
                                }
                                object = "Invalid type. An image type extra should return a bitmap";
                                break block9;
                            }
                            if (!(bundle.get(string2) instanceof Bitmap)) break block10;
                            object = "Invalid asset type. Bitmap should be returned only for image type";
                        }
                        he.e((String)object);
                        continue;
                    }
                    object = String.valueOf(bundle.get(string2));
                }
                jSONObject.put(string2, object);
            }
        }
        return jSONObject;
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    static final /* synthetic */ void a(bun bun2, String string2, nu nu2, nu nu3, boolean bl2) {
        try {
            nu3 = new JSONObject();
            nu3.put("headline", (Object)bun2.a());
            nu3.put("body", (Object)bun2.c());
            nu3.put("call_to_action", (Object)bun2.e());
            nu3.put("price", (Object)bun2.h());
            nu3.put("star_rating", (Object)String.valueOf(bun2.f()));
            nu3.put("store", (Object)bun2.g());
            nu3.put("icon", (Object)s.a(bun2.d()));
            JSONArray jSONArray = new JSONArray();
            Object object = bun2.b();
            if (object != null) {
                object = object.iterator();
                while (object.hasNext()) {
                    jSONArray.put((Object)s.a(s.a(object.next())));
                }
            }
            nu3.put("images", (Object)jSONArray);
            nu3.put("extras", (Object)s.a(bun2.n(), string2));
            bun2 = new JSONObject();
            bun2.put("assets", (Object)nu3);
            bun2.put("template_id", (Object)"2");
            nu2.b("google.afma.nativeExpressAds.loadAssets", (JSONObject)bun2);
            return;
        }
        catch (JSONException jSONException) {
            he.c("Exception occurred when loading assets", (Throwable)jSONException);
            return;
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    static final /* synthetic */ void a(bup bup2, String string2, nu nu2, nu nu3, boolean bl2) {
        try {
            nu3 = new JSONObject();
            nu3.put("headline", (Object)bup2.a());
            nu3.put("body", (Object)bup2.e());
            nu3.put("call_to_action", (Object)bup2.g());
            nu3.put("advertiser", (Object)bup2.h());
            nu3.put("logo", (Object)s.a(bup2.f()));
            JSONArray jSONArray = new JSONArray();
            Object object = bup2.b();
            if (object != null) {
                object = object.iterator();
                while (object.hasNext()) {
                    jSONArray.put((Object)s.a(s.a(object.next())));
                }
            }
            nu3.put("images", (Object)jSONArray);
            nu3.put("extras", (Object)s.a(bup2.n(), string2));
            bup2 = new JSONObject();
            bup2.put("assets", (Object)nu3);
            bup2.put("template_id", (Object)"1");
            nu2.b("google.afma.nativeExpressAds.loadAssets", (JSONObject)bup2);
            return;
        }
        catch (JSONException jSONException) {
            he.c("Exception occurred when loading assets", (Throwable)jSONException);
            return;
        }
    }

    static /* synthetic */ void a(nu nu2) {
        s.b(nu2);
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public static boolean a(nu object, cbd object2, CountDownLatch countDownLatch) {
        boolean bl2;
        block13 : {
            block11 : {
                block12 : {
                    bl2 = false;
                    try {
                        Object object3 = object.getView();
                        if (object3 == null) {
                            object = "AdWebView is null";
                            break block11;
                        }
                        object3.setVisibility(4);
                        Object object4 = object2.b.q;
                        if (object4 != null && !object4.isEmpty()) {
                            object.u().a("/nativeExpressAssetsLoaded", new v(countDownLatch));
                            object.u().a("/nativeExpressAssetsLoadingFailed", new w(countDownLatch));
                            Object object5 = object2.c.h();
                            Object object6 = object2.c.i();
                            boolean bl3 = object4.contains("2");
                            Object object7 = null;
                            object3 = null;
                            if (bl3 && object5 != null) {
                                object7 = object5.a();
                                object6 = object5.b();
                                object4 = object5.c();
                                bvw bvw2 = object5.d();
                                String string2 = object5.e();
                                double d2 = object5.f();
                                String string3 = object5.g();
                                String string4 = object5.h();
                                Bundle bundle = object5.l();
                                if (object5.p() != null) {
                                    object3 = (View)m.a(object5.p());
                                }
                                object7 = new bun((String)object7, (List<bum>)object6, (String)object4, bvw2, string2, d2, string3, string4, null, bundle, null, (View)object3, object5.q(), null);
                                object5 = object2.b.p;
                                object3 = object.u();
                                object7 = new t((bun)object7, (String)object5, (nu)object);
                            } else {
                                if (!object4.contains("1") || object6 == null) break block12;
                                object5 = object6.a();
                                object4 = object6.b();
                                String string5 = object6.c();
                                bvw bvw3 = object6.d();
                                String string6 = object6.e();
                                String string7 = object6.f();
                                Bundle bundle = object6.j();
                                object3 = object7;
                                if (object6.n() != null) {
                                    object3 = (View)m.a(object6.n());
                                }
                                object7 = new bup((String)object5, (List<bum>)object4, string5, bvw3, string6, string7, null, bundle, null, (View)object3, object6.o(), null);
                                object5 = object2.b.p;
                                object3 = object.u();
                                object7 = new u((bup)object7, (String)object5, (nu)object);
                            }
                            object3.a((pl)object7);
                            object3 = object2.b.n;
                            object2 = object2.b.o;
                            if (object2 != null) {
                                object.loadDataWithBaseURL((String)object2, (String)object3, "text/html", "UTF-8", null);
                                return true;
                            } else {
                                object.loadData((String)object3, "text/html", "UTF-8");
                            }
                            return true;
                        }
                        object = "No template ids present in mediation response";
                        break block11;
                    }
                    catch (RuntimeException runtimeException) {
                        countDownLatch.countDown();
                        throw runtimeException;
                    }
                    catch (RemoteException remoteException) {
                        he.c("Unable to invoke load assets", (Throwable)remoteException);
                        break block13;
                    }
                }
                object = "No matching template id and mapper";
            }
            he.e((String)object);
        }
        if (bl2) return bl2;
        countDownLatch.countDown();
        return bl2;
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    private static String b(bvw object) {
        a a2;
        block3 : {
            try {
                a2 = object.a();
                if (a2 != null) break block3;
                he.e("Drawable is null. Returning empty string");
                return "";
            }
            catch (RemoteException remoteException) {}
        }
        Drawable drawable2 = (Drawable)m.a(a2);
        if (!(drawable2 instanceof BitmapDrawable)) {
            he.e("Drawable is not an instance of BitmapDrawable. Returning empty string");
            return "";
        }
        return s.a(((BitmapDrawable)drawable2).getBitmap());
        he.e("Unable to get drawable. Returning empty string");
        return "";
    }

    private static void b(nu nu2) {
        View.OnClickListener onClickListener = nu2.getOnClickListener();
        if (onClickListener != null) {
            onClickListener.onClick(nu2.getView());
        }
    }

    public static boolean b(gl gl2) {
        if (gl2 != null && gl2.m && gl2.n != null && gl2.n.n != null) {
            return true;
        }
        return false;
    }
}

