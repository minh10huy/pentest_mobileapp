/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.content.Context
 *  android.content.Intent
 *  android.os.IBinder
 *  android.os.RemoteException
 *  android.util.Log
 */
package com.google.android.gms.tagmanager;

import android.content.Context;
import android.content.Intent;
import android.os.IBinder;
import android.os.RemoteException;
import android.util.Log;
import com.google.android.gms.a.m;
import com.google.android.gms.dynamite.DynamiteModule;
import com.google.android.gms.internal.air;
import com.google.android.gms.measurement.AppMeasurement;
import com.google.android.gms.tagmanager.a;
import com.google.android.gms.tagmanager.b;
import com.google.android.gms.tagmanager.d;
import com.google.android.gms.tagmanager.g;
import com.google.android.gms.tagmanager.h;
import com.google.android.gms.tagmanager.q;
import com.google.android.gms.tagmanager.t;
import com.google.android.gms.tagmanager.u;
import com.google.android.gms.tagmanager.w;
import com.google.android.gms.tagmanager.x;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.util.HashMap;
import java.util.Map;

final class c {
    private static volatile DynamiteModule a;
    private static volatile t b;
    private static final Map<String, a> c;
    private static final Map<String, b> d;

    static {
        c = new HashMap<String, a>();
        d = new HashMap<String, b>();
    }

    private c() {
    }

    static IBinder a(Context context) {
        w w2 = x.asInterface(c.d(context).a("com.google.android.gms.tagmanager.TagManagerServiceProviderImpl"));
        try {
            context = w2.getService(m.a(context), c.e(context), new g()).asBinder();
            return context;
        }
        catch (RemoteException remoteException) {
            try {
                throw new IllegalStateException((Throwable)remoteException);
            }
            catch (DynamiteModule.c c2) {
                throw new RuntimeException(c2);
            }
        }
    }

    static /* synthetic */ Object a(String string2, Class class_) {
        return c.b(string2, class_);
    }

    static /* synthetic */ Map a() {
        return c;
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    static void a(Intent intent, Context context) {
        t t2 = c.c(context);
        synchronized (c.class) {
            try {
                try {
                    t2.previewIntent(intent, m.a(context), m.a(a.a()), c.e(context), new g());
                }
                catch (RemoteException remoteException) {
                    throw new IllegalStateException((Throwable)remoteException);
                }
                return;
            }
            catch (Throwable throwable) {}
            throw throwable;
        }
    }

    /*
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    private static Object b(String string2, Class<?> object) {
        String string3;
        Object object2;
        block12 : {
            int n2;
            block11 : {
                int n3;
                Class<?>[] arrclass;
                block10 : {
                    try {
                        object2 = Class.forName(string2);
                        arrclass = object2.getInterfaces();
                        n3 = arrclass.length;
                        break block10;
                    }
                    catch (ClassNotFoundException classNotFoundException) {}
                    Log.e((String)"GoogleTagManagerAPI", (String)String.valueOf(string2).concat(" can't be found in the application."));
                    return null;
                }
                for (n2 = 0; n2 < n3; ++n2) {
                    if (!arrclass[n2].equals(object)) continue;
                    n2 = 1;
                    break block11;
                }
                n2 = 0;
            }
            if (n2 == 0) {
                object = object.getCanonicalName();
                object2 = new StringBuilder(String.valueOf(string2).length() + 30 + String.valueOf(object).length());
                object2.append(string2);
                object2.append(" doesn't implement ");
                object2.append((String)object);
                object2.append(" interface.");
                Log.e((String)"GoogleTagManagerAPI", (String)object2.toString());
                return null;
            }
            try {
                return object2.getConstructor(new Class[0]).newInstance(new Object[0]);
            }
            catch (NoSuchMethodException noSuchMethodException) {}
            string3 = String.valueOf(string2);
            object2 = " doesn't have a valid no-arg constructor";
            break block12;
            catch (SecurityException securityException) {}
            string3 = String.valueOf(string2);
            object2 = " doesn't have an accessible no-arg constructor";
            break block12;
            catch (InvocationTargetException invocationTargetException) {}
            string3 = String.valueOf(string2);
            object2 = " construction threw an exception.";
            break block12;
            catch (InstantiationException instantiationException) {}
            string3 = String.valueOf(string2);
            object2 = " is an abstract class.";
            break block12;
            catch (IllegalAccessException illegalAccessException) {}
            string3 = String.valueOf(string2);
            object2 = " doesn't have an accessible no-arg constructor";
        }
        Log.e((String)"GoogleTagManagerAPI", (String)string3.concat((String)object2));
        return null;
    }

    static /* synthetic */ Map b() {
        return d;
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    static void b(Context context) {
        t t2 = c.c(context);
        synchronized (c.class) {
            try {
                try {
                    t2.initialize(m.a(context), c.e(context), new g());
                }
                catch (RemoteException remoteException) {
                    throw new IllegalStateException((Throwable)remoteException);
                }
                return;
            }
            catch (Throwable throwable) {}
            throw throwable;
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    private static t c(Context context) {
        t t2 = b;
        if (t2 != null) {
            return t2;
        }
        synchronized (c.class) {
            t t3;
            t2 = t3 = b;
            if (t3 == null) {
                try {
                    b = t2 = u.asInterface(c.d(context).a("com.google.android.gms.tagmanager.TagManagerApiImpl"));
                }
                catch (DynamiteModule.c c2) {
                    throw new RuntimeException(c2);
                }
            }
            return t2;
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    private static DynamiteModule d(Context context) {
        DynamiteModule dynamiteModule = a;
        if (dynamiteModule != null) {
            return dynamiteModule;
        }
        synchronized (c.class) {
            dynamiteModule = a;
            if (a == null) {
                a = dynamiteModule = DynamiteModule.a(context, DynamiteModule.d, "com.google.android.gms.tagmanager");
            }
            return dynamiteModule;
        }
    }

    private static q e(Context context) {
        return new d(AppMeasurement.getInstance(context));
    }
}

