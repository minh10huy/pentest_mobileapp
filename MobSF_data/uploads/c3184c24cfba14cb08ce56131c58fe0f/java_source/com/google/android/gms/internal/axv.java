/*
 * Decompiled with CFR 0_132.
 */
package com.google.android.gms.internal;

import com.google.android.gms.internal.ati;
import com.google.android.gms.internal.azb;
import java.security.GeneralSecurityException;
import java.security.Key;
import java.security.spec.AlgorithmParameterSpec;
import java.util.Arrays;
import javax.crypto.Cipher;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;

public final class axv
implements ati {
    private final byte[] a;
    private final byte[] b;
    private final SecretKeySpec c;
    private final int d;

    public axv(byte[] object, int n2) {
        if (n2 != 12 && n2 != 16) {
            throw new IllegalArgumentException("IV size should be either 12 or 16 bytes");
        }
        this.d = n2;
        this.c = new SecretKeySpec((byte[])object, "AES");
        object = Cipher.getInstance("AES/ECB/NOPADDING");
        object.init(1, this.c);
        this.a = axv.a(object.doFinal(new byte[16]));
        this.b = axv.a(this.a);
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    private final byte[] a(Cipher cipher, int n2, byte[] arrby, int n3, int n4) {
        byte[] arrby2 = new byte[16];
        arrby2[15] = (byte)n2;
        if (n4 == 0) {
            arrby = axv.b(arrby2, this.a);
            do {
                return cipher.doFinal(arrby);
                break;
            } while (true);
        }
        arrby2 = cipher.doFinal(arrby2);
        int n5 = 0;
        n2 = 0;
        while (n4 - n2 > 16) {
            for (int i2 = 0; i2 < 16; ++i2) {
                arrby2[i2] = (byte)(arrby2[i2] ^ arrby[n3 + n2 + i2]);
            }
            arrby2 = cipher.doFinal(arrby2);
            n2 += 16;
        }
        byte[] arrby3 = Arrays.copyOfRange(arrby, n2 + n3, n3 + n4);
        if (arrby3.length == 16) {
            arrby = axv.b(arrby3, this.a);
        } else {
            arrby = Arrays.copyOf(this.b, 16);
            for (n2 = n5; n2 < arrby3.length; ++n2) {
                arrby[n2] = (byte)(arrby[n2] ^ arrby3[n2]);
            }
            arrby[arrby3.length] = (byte)(arrby[arrby3.length] ^ 128);
        }
        arrby = axv.b(arrby2, arrby);
        return cipher.doFinal(arrby);
    }

    private static byte[] a(byte[] arrby) {
        int n2;
        byte[] arrby2 = new byte[16];
        int n3 = 0;
        int n4 = 0;
        while (n4 < 15) {
            byte by2 = arrby[n4];
            n2 = n4 + 1;
            arrby2[n4] = (byte)(by2 << 1 ^ (arrby[n2] & 255) >>> 7);
            n4 = n2;
        }
        n2 = arrby[15];
        n4 = (arrby[0] & 128) == 0 ? n3 : 135;
        arrby2[15] = (byte)(n2 << 1 ^ n4);
        return arrby2;
    }

    private static byte[] b(byte[] arrby, byte[] arrby2) {
        int n2 = arrby.length;
        byte[] arrby3 = new byte[n2];
        for (int i2 = 0; i2 < n2; ++i2) {
            arrby3[i2] = (byte)(arrby[i2] ^ arrby2[i2]);
        }
        return arrby3;
    }

    @Override
    public final byte[] a(byte[] arrby, byte[] arrby2) {
        if (arrby.length <= Integer.MAX_VALUE - this.d - 16) {
            byte[] arrby3 = new byte[this.d + arrby.length + 16];
            byte[] arrby4 = azb.a(this.d);
            int n2 = this.d;
            System.arraycopy(arrby4, 0, arrby3, 0, n2);
            byte[] arrby5 = Cipher.getInstance("AES/ECB/NOPADDING");
            arrby5.init(1, this.c);
            arrby4 = this.a((Cipher)arrby5, 0, arrby4, 0, arrby4.length);
            arrby2 = this.a((Cipher)arrby5, 1, arrby2, 0, arrby2.length);
            Cipher cipher = Cipher.getInstance("AES/CTR/NOPADDING");
            cipher.init(1, (Key)this.c, new IvParameterSpec(arrby4));
            cipher.doFinal(arrby, 0, arrby.length, arrby3, this.d);
            arrby5 = this.a((Cipher)arrby5, 2, arrby3, this.d, arrby.length);
            n2 = arrby.length;
            int n3 = this.d;
            for (int i2 = 0; i2 < 16; ++i2) {
                arrby3[n2 + n3 + i2] = (byte)(arrby2[i2] ^ arrby4[i2] ^ arrby5[i2]);
            }
            return arrby3;
        }
        throw new GeneralSecurityException("plaintext too long");
    }
}

