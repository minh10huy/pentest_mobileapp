/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.annotation.TargetApi
 *  android.app.DownloadManager
 *  android.app.DownloadManager$Request
 *  android.content.Context
 *  android.content.res.Resources
 *  android.graphics.Bitmap
 *  android.graphics.drawable.BitmapDrawable
 *  android.graphics.drawable.Drawable
 *  android.net.Uri
 *  android.net.http.SslError
 *  android.os.IBinder
 *  android.os.Process
 *  android.view.View
 *  android.view.ViewGroup
 *  android.view.ViewGroup$LayoutParams
 *  android.view.ViewTreeObserver
 *  android.view.ViewTreeObserver$OnGlobalLayoutListener
 *  android.view.Window
 *  android.webkit.CookieManager
 *  android.webkit.CookieSyncManager
 *  android.webkit.WebChromeClient
 *  android.webkit.WebSettings
 */
package com.google.android.gms.internal;

import android.annotation.TargetApi;
import android.app.DownloadManager;
import android.content.Context;
import android.content.res.Resources;
import android.graphics.Bitmap;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.Drawable;
import android.net.Uri;
import android.net.http.SslError;
import android.os.IBinder;
import android.os.Process;
import android.view.View;
import android.view.ViewGroup;
import android.view.ViewTreeObserver;
import android.view.Window;
import android.webkit.CookieManager;
import android.webkit.CookieSyncManager;
import android.webkit.WebChromeClient;
import android.webkit.WebSettings;
import com.google.android.gms.ads.internal.av;
import com.google.android.gms.internal.ak;
import com.google.android.gms.internal.he;
import com.google.android.gms.internal.hz;
import com.google.android.gms.internal.nu;
import com.google.android.gms.internal.nv;
import java.util.Collections;
import java.util.LinkedHashSet;
import java.util.Set;

@ak
@TargetApi(value=8)
public class hy {
    private hy() {
    }

    /* synthetic */ hy(hz hz2) {
        this();
    }

    public static boolean a(nu nu2) {
        if (nu2 == null) {
            return false;
        }
        nu2.onPause();
        return true;
    }

    public static boolean b(nu nu2) {
        if (nu2 == null) {
            return false;
        }
        nu2.onResume();
        return true;
    }

    public static boolean e() {
        int n2 = Process.myUid();
        if (n2 != 0 && n2 != 1000) {
            return false;
        }
        return true;
    }

    public int a() {
        return 0;
    }

    public Drawable a(Context context, Bitmap bitmap, boolean bl2, float f2) {
        return new BitmapDrawable(context.getResources(), bitmap);
    }

    public nv a(nu nu2, boolean bl2) {
        return new nv(nu2, bl2);
    }

    public String a(Context context) {
        return "";
    }

    public String a(SslError sslError) {
        return "";
    }

    public Set<String> a(Uri object) {
        int n2;
        if (object.isOpaque()) {
            return Collections.emptySet();
        }
        if ((object = object.getEncodedQuery()) == null) {
            return Collections.emptySet();
        }
        LinkedHashSet<String> linkedHashSet = new LinkedHashSet<String>();
        int n3 = 0;
        do {
            int n4;
            block8 : {
                block7 : {
                    int n5;
                    n2 = n4 = object.indexOf(38, n3);
                    if (n4 == -1) {
                        n2 = object.length();
                    }
                    if ((n5 = object.indexOf(61, n3)) > n2) break block7;
                    n4 = n5;
                    if (n5 != -1) break block8;
                }
                n4 = n2;
            }
            linkedHashSet.add(Uri.decode((String)object.substring(n3, n4)));
            n3 = ++n2;
        } while (n2 < object.length());
        return Collections.unmodifiableSet(linkedHashSet);
    }

    public void a(View view, Drawable drawable2) {
        view.setBackgroundDrawable(drawable2);
    }

    public void a(ViewTreeObserver viewTreeObserver, ViewTreeObserver.OnGlobalLayoutListener onGlobalLayoutListener) {
        viewTreeObserver.removeGlobalOnLayoutListener(onGlobalLayoutListener);
    }

    public boolean a(DownloadManager.Request request) {
        return false;
    }

    public boolean a(Context context, WebSettings webSettings) {
        return false;
    }

    public boolean a(View view) {
        if (view.getWindowToken() == null && view.getWindowVisibility() == 8) {
            return false;
        }
        return true;
    }

    public boolean a(Window window) {
        return false;
    }

    public int b() {
        return 1;
    }

    public void b(Context context) {
        av.i().i();
    }

    public boolean b(View view) {
        return false;
    }

    public int c() {
        return 5;
    }

    public CookieManager c(Context context) {
        if (hy.e()) {
            return null;
        }
        try {
            CookieSyncManager.createInstance((Context)context);
            context = CookieManager.getInstance();
            return context;
        }
        catch (Throwable throwable) {
            he.b("Failed to obtain CookieManager.", throwable);
            av.i().a(throwable, "ApiLevelUtil.getCookieManager");
            return null;
        }
    }

    public WebChromeClient c(nu nu2) {
        return null;
    }

    public boolean c(View view) {
        return false;
    }

    public ViewGroup.LayoutParams d() {
        return new ViewGroup.LayoutParams(-2, -2);
    }

    public int f() {
        return 0;
    }
}

