/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.app.PendingIntent
 *  android.os.Parcel
 *  android.os.Parcelable
 *  android.os.Parcelable$Creator
 */
package com.google.android.gms.common;

import android.app.PendingIntent;
import android.os.Parcel;
import android.os.Parcelable;
import com.google.android.gms.common.internal.ae;
import com.google.android.gms.common.internal.ag;
import com.google.android.gms.common.j;
import com.google.android.gms.internal.wz;
import com.google.android.gms.internal.xc;
import java.util.Arrays;

public final class a
extends wz {
    public static final Parcelable.Creator<a> CREATOR;
    public static final a a;
    private int b;
    private final int c;
    private final PendingIntent d;
    private final String e;

    static {
        a = new a(0);
        CREATOR = new j();
    }

    public a(int n2) {
        this(n2, null, null);
    }

    a(int n2, int n3, PendingIntent pendingIntent, String string2) {
        this.b = n2;
        this.c = n3;
        this.d = pendingIntent;
        this.e = string2;
    }

    public a(int n2, PendingIntent pendingIntent) {
        this(n2, pendingIntent, null);
    }

    public a(int n2, PendingIntent pendingIntent, String string2) {
        this(1, n2, pendingIntent, string2);
    }

    static String a(int n2) {
        if (n2 != 99) {
            if (n2 != 1500) {
                switch (n2) {
                    default: {
                        switch (n2) {
                            default: {
                                StringBuilder stringBuilder = new StringBuilder(31);
                                stringBuilder.append("UNKNOWN_ERROR_CODE(");
                                stringBuilder.append(n2);
                                stringBuilder.append(")");
                                return stringBuilder.toString();
                            }
                            case 21: {
                                return "API_VERSION_UPDATE_REQUIRED";
                            }
                            case 20: {
                                return "RESTRICTED_PROFILE";
                            }
                            case 19: {
                                return "SERVICE_MISSING_PERMISSION";
                            }
                            case 18: {
                                return "SERVICE_UPDATING";
                            }
                            case 17: {
                                return "SIGN_IN_FAILED";
                            }
                            case 16: {
                                return "API_UNAVAILABLE";
                            }
                            case 15: {
                                return "INTERRUPTED";
                            }
                            case 14: {
                                return "TIMEOUT";
                            }
                            case 13: 
                        }
                        return "CANCELED";
                    }
                    case 11: {
                        return "LICENSE_CHECK_FAILED";
                    }
                    case 10: {
                        return "DEVELOPER_ERROR";
                    }
                    case 9: {
                        return "SERVICE_INVALID";
                    }
                    case 8: {
                        return "INTERNAL_ERROR";
                    }
                    case 7: {
                        return "NETWORK_ERROR";
                    }
                    case 6: {
                        return "RESOLUTION_REQUIRED";
                    }
                    case 5: {
                        return "INVALID_ACCOUNT";
                    }
                    case 4: {
                        return "SIGN_IN_REQUIRED";
                    }
                    case 3: {
                        return "SERVICE_DISABLED";
                    }
                    case 2: {
                        return "SERVICE_VERSION_UPDATE_REQUIRED";
                    }
                    case 1: {
                        return "SERVICE_MISSING";
                    }
                    case 0: {
                        return "SUCCESS";
                    }
                    case -1: 
                }
                return "UNKNOWN";
            }
            return "DRIVE_EXTERNAL_STORAGE_REQUIRED";
        }
        return "UNFINISHED";
    }

    public final boolean a() {
        if (this.c != 0 && this.d != null) {
            return true;
        }
        return false;
    }

    public final boolean b() {
        if (this.c == 0) {
            return true;
        }
        return false;
    }

    public final int c() {
        return this.c;
    }

    public final PendingIntent d() {
        return this.d;
    }

    public final String e() {
        return this.e;
    }

    public final boolean equals(Object object) {
        if (object == this) {
            return true;
        }
        if (!(object instanceof a)) {
            return false;
        }
        object = (a)object;
        if (this.c == object.c && ae.a((Object)this.d, (Object)object.d) && ae.a(this.e, object.e)) {
            return true;
        }
        return false;
    }

    public final int hashCode() {
        return Arrays.hashCode(new Object[]{this.c, this.d, this.e});
    }

    public final String toString() {
        return ae.a(this).a("statusCode", a.a(this.c)).a("resolution", (Object)this.d).a("message", this.e).toString();
    }

    public final void writeToParcel(Parcel parcel, int n2) {
        int n3 = xc.a(parcel);
        xc.a(parcel, 1, this.b);
        xc.a(parcel, 2, this.c());
        xc.a(parcel, 3, (Parcelable)this.d(), n2, false);
        xc.a(parcel, 4, this.e(), false);
        xc.a(parcel, n3);
    }
}

