/*
 * Decompiled with CFR 0_132.
 */
package com.google.android.gms.internal;

import java.io.IOException;
import java.io.Reader;
import java.nio.CharBuffer;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

public final class bdx
extends Reader {
    private List<String> a = new ArrayList<String>();
    private boolean b = false;
    private int c;
    private int d;
    private int e = this.c;
    private int f = this.d;
    private boolean g = false;

    private final long a(long l2) {
        long l3 = 0L;
        while (this.d < this.a.size() && l3 < l2) {
            long l4 = l2 - l3;
            int n2 = this.c();
            long l5 = n2;
            if (l4 < l5) {
                this.c = (int)((long)this.c + l4);
                l3 += l4;
                continue;
            }
            l3 += l5;
            this.c = 0;
            ++this.d;
        }
        return l3;
    }

    private final String b() {
        if (this.d < this.a.size()) {
            return this.a.get(this.d);
        }
        return null;
    }

    private final int c() {
        String string2 = this.b();
        if (string2 == null) {
            return 0;
        }
        return string2.length() - this.c;
    }

    private final void d() {
        if (!this.b) {
            if (this.g) {
                return;
            }
            throw new IOException("Reader needs to be frozen before read operations can be called");
        }
        throw new IOException("Stream already closed");
    }

    public final void a() {
        if (!this.g) {
            this.g = true;
            return;
        }
        throw new IllegalStateException("Trying to freeze frozen StringListReader");
    }

    public final void a(String string2) {
        if (!this.g) {
            if (string2.length() > 0) {
                this.a.add(string2);
            }
            return;
        }
        throw new IllegalStateException("Trying to add string after reading");
    }

    @Override
    public final void close() {
        this.d();
        this.b = true;
    }

    @Override
    public final void mark(int n2) {
        this.d();
        this.e = this.c;
        this.f = this.d;
    }

    @Override
    public final boolean markSupported() {
        return true;
    }

    @Override
    public final int read() {
        this.d();
        String string2 = this.b();
        if (string2 == null) {
            return -1;
        }
        char c2 = string2.charAt(this.c);
        this.a(1L);
        return c2;
    }

    @Override
    public final int read(CharBuffer charBuffer) {
        this.d();
        int n2 = charBuffer.remaining();
        String string2 = this.b();
        int n3 = 0;
        while (n2 > 0 && string2 != null) {
            int n4 = Math.min(string2.length() - this.c, n2);
            charBuffer.put(this.a.get(this.d), this.c, this.c + n4);
            n2 -= n4;
            n3 += n4;
            this.a(n4);
            string2 = this.b();
        }
        if (n3 <= 0) {
            if (string2 != null) {
                return n3;
            }
            return -1;
        }
        return n3;
    }

    @Override
    public final int read(char[] arrc, int n2, int n3) {
        int n4;
        int n5;
        this.d();
        String string2 = this.b();
        for (n5 = 0; string2 != null && n5 < n3; n5 += n4) {
            n4 = Math.min(this.c(), n3 - n5);
            string2.getChars(this.c, this.c + n4, arrc, n2 + n5);
            this.a(n4);
            string2 = this.b();
        }
        if (n5 <= 0) {
            if (string2 != null) {
                return n5;
            }
            return -1;
        }
        return n5;
    }

    @Override
    public final boolean ready() {
        this.d();
        return true;
    }

    @Override
    public final void reset() {
        this.c = this.e;
        this.d = this.f;
    }

    @Override
    public final long skip(long l2) {
        this.d();
        return this.a(l2);
    }

    public final String toString() {
        StringBuilder stringBuilder = new StringBuilder();
        Iterator<String> iterator = this.a.iterator();
        while (iterator.hasNext()) {
            stringBuilder.append(iterator.next());
        }
        return stringBuilder.toString();
    }
}

