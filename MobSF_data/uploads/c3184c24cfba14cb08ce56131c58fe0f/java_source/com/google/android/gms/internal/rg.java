/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.content.ContentValues
 *  android.content.Context
 *  android.database.Cursor
 *  android.database.sqlite.SQLiteDatabase
 *  android.database.sqlite.SQLiteException
 *  android.net.Uri
 *  android.net.Uri$Builder
 *  android.text.TextUtils
 */
package com.google.android.gms.internal;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteException;
import android.net.Uri;
import android.text.TextUtils;
import com.google.android.gms.analytics.p;
import com.google.android.gms.common.internal.ah;
import com.google.android.gms.common.util.f;
import com.google.android.gms.common.util.m;
import com.google.android.gms.internal.qu;
import com.google.android.gms.internal.qv;
import com.google.android.gms.internal.qx;
import com.google.android.gms.internal.ra;
import com.google.android.gms.internal.rh;
import com.google.android.gms.internal.rz;
import com.google.android.gms.internal.sh;
import com.google.android.gms.internal.si;
import com.google.android.gms.internal.sm;
import com.google.android.gms.internal.ss;
import com.google.android.gms.internal.te;
import com.google.android.gms.internal.tf;
import java.io.Closeable;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

final class rg
extends qv
implements Closeable {
    private static final String a = String.format("CREATE TABLE IF NOT EXISTS %s ( '%s' INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, '%s' INTEGER NOT NULL, '%s' TEXT NOT NULL, '%s' TEXT NOT NULL, '%s' INTEGER);", "hits2", "hit_id", "hit_time", "hit_url", "hit_string", "hit_app_id");
    private static final String b = String.format("SELECT MAX(%s) FROM %s WHERE 1;", "hit_time", "hits2");
    private final rh c;
    private final te d = new te(this.h());
    private final te e = new te(this.h());

    rg(qx qx2) {
        super(qx2);
        this.c = new rh(this, qx2.a(), "google_analytics_v4.db");
    }

    static /* synthetic */ String B() {
        return a;
    }

    private final long C() {
        p.d();
        this.x();
        return this.a("SELECT COUNT(*) FROM hits2", null);
    }

    private static String D() {
        return "google_analytics_v4.db";
    }

    /*
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    private final long a(String string2, String[] sQLiteDatabase) {
        void var1_4;
        block9 : {
            Cursor cursor;
            void var6_10;
            block10 : {
                block8 : {
                    sQLiteDatabase = this.A();
                    cursor = sQLiteDatabase.rawQuery(string2, null);
                    sQLiteDatabase = cursor;
                    if (!cursor.moveToFirst()) break block8;
                    sQLiteDatabase = cursor;
                    long l2 = cursor.getLong(0);
                    if (cursor == null) return l2;
                    cursor.close();
                    return l2;
                }
                sQLiteDatabase = cursor;
                try {
                    throw new SQLiteException("Database returned empty set");
                }
                catch (Throwable throwable) {
                    break block9;
                }
                catch (SQLiteException sQLiteException) {
                    break block10;
                }
                catch (Throwable throwable) {
                    sQLiteDatabase = null;
                    break block9;
                }
                catch (SQLiteException sQLiteException) {
                    cursor = null;
                }
            }
            sQLiteDatabase = cursor;
            this.d("Database error", string2, var6_10);
            sQLiteDatabase = cursor;
            throw var6_10;
        }
        if (sQLiteDatabase == null) throw var1_4;
        sQLiteDatabase.close();
        throw var1_4;
    }

    /*
     * WARNING - Removed back jump from a try to a catch block - possible behaviour change.
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    private final long a(String string2, String[] cursor, long l2) {
        void var1_4;
        block8 : {
            SQLiteException sQLiteException;
            Cursor cursor2;
            block9 : {
                block7 : {
                    SQLiteDatabase sQLiteDatabase = this.A();
                    sQLiteException = null;
                    cursor2 = null;
                    cursor = sQLiteDatabase.rawQuery(string2, (String[])cursor);
                    try {
                        if (!cursor.moveToFirst()) break block7;
                        l2 = cursor.getLong(0);
                        if (cursor == null) return l2;
                    }
                    catch (Throwable throwable) {
                        break block8;
                    }
                    catch (SQLiteException sQLiteException2) {
                        break block9;
                    }
                    cursor.close();
                    return l2;
                }
                if (cursor == null) return 0L;
                cursor.close();
                return 0L;
                catch (Throwable throwable) {
                    cursor = cursor2;
                    break block8;
                }
                catch (SQLiteException sQLiteException3) {
                    cursor = sQLiteException;
                    sQLiteException = sQLiteException3;
                }
            }
            cursor2 = cursor;
            {
                this.d("Database error", string2, (Object)sQLiteException);
                cursor2 = cursor;
                throw sQLiteException;
            }
        }
        if (cursor == null) throw var1_4;
        cursor.close();
        throw var1_4;
    }

    static /* synthetic */ te a(rg rg2) {
        return rg2.e;
    }

    private final Map<String, String> a(String object) {
        if (TextUtils.isEmpty((CharSequence)object)) {
            return new HashMap<String, String>(0);
        }
        try {
            if (!object.startsWith("?")) {
                object = (object = String.valueOf(object)).length() != 0 ? "?".concat((String)object) : new String("?");
            }
            object = m.a(new URI((String)object), "UTF-8");
            return object;
        }
        catch (URISyntaxException uRISyntaxException) {
            this.e("Error parsing hit parameters", uRISyntaxException);
            return new HashMap<String, String>(0);
        }
    }

    static /* synthetic */ String b(rg rg2) {
        return rg.D();
    }

    /*
     * WARNING - Removed back jump from a try to a catch block - possible behaviour change.
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    private final List<Long> d(long l2) {
        Cursor cursor;
        Object object;
        block10 : {
            ArrayList<Long> arrayList;
            block11 : {
                p.d();
                this.x();
                if (l2 <= 0L) {
                    return Collections.emptyList();
                }
                SQLiteDatabase sQLiteDatabase = this.A();
                arrayList = new ArrayList<Long>();
                Cursor cursor2 = null;
                cursor = object = null;
                String string2 = String.format("%s ASC", "hit_id");
                cursor = object;
                String string3 = Long.toString(l2);
                cursor = object;
                object = sQLiteDatabase.query("hits2", new String[]{"hit_id"}, null, null, null, null, string2, string3);
                try {
                    if (object.moveToFirst()) {
                        boolean bl2;
                        do {
                            arrayList.add(object.getLong(0));
                        } while (bl2 = object.moveToNext());
                    }
                    if (object == null) return arrayList;
                }
                catch (Throwable throwable) {
                    cursor = object;
                    object = throwable;
                    break block10;
                }
                catch (SQLiteException sQLiteException) {
                    break block11;
                }
                object.close();
                return arrayList;
                catch (Throwable throwable) {
                    break block10;
                }
                catch (SQLiteException sQLiteException) {
                    object = cursor2;
                }
            }
            cursor = object;
            {
                void var6_6;
                this.d("Error selecting hit ids", var6_6);
                if (object == null) return arrayList;
            }
            object.close();
            return arrayList;
        }
        if (cursor == null) throw object;
        cursor.close();
        throw object;
    }

    private final Map<String, String> g(String object) {
        if (TextUtils.isEmpty((CharSequence)object)) {
            return new HashMap<String, String>(0);
        }
        try {
            object = String.valueOf(object);
            object = object.length() != 0 ? "?".concat((String)object) : new String("?");
            object = m.a(new URI((String)object), "UTF-8");
            return object;
        }
        catch (URISyntaxException uRISyntaxException) {
            this.e("Error parsing property parameters", uRISyntaxException);
            return new HashMap<String, String>(0);
        }
    }

    final SQLiteDatabase A() {
        try {
            SQLiteDatabase sQLiteDatabase = this.c.getWritableDatabase();
            return sQLiteDatabase;
        }
        catch (SQLiteException sQLiteException) {
            this.d("Error opening database", (Object)sQLiteException);
            throw sQLiteException;
        }
    }

    public final long a(long l2, String string2, String string3) {
        ah.a(string2);
        ah.a(string3);
        this.x();
        p.d();
        return this.a("SELECT hits_count FROM properties WHERE app_uid=? AND cid=? AND tid=?", new String[]{String.valueOf(l2), string2, string3}, 0L);
    }

    /*
     * WARNING - Removed back jump from a try to a catch block - possible behaviour change.
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    public final List<sm> a(long l2) {
        Object object2;
        Object object;
        block9 : {
            block10 : {
                boolean bl2 = l2 >= 0L;
                ah.b(bl2);
                p.d();
                this.x();
                Object object4 = this.A();
                Object object3 = null;
                object = null;
                object2 = object;
                String string2 = String.format("%s ASC", "hit_id");
                object2 = object;
                String string3 = Long.toString(l2);
                object2 = object;
                object = object4.query("hits2", new String[]{"hit_id", "hit_time", "hit_string", "hit_url", "hit_app_id"}, null, null, null, null, string2, string3);
                try {
                    object2 = new ArrayList();
                    if (object.moveToFirst()) {
                        do {
                            l2 = object.getLong(0);
                            long l3 = object.getLong(1);
                            object4 = object.getString(2);
                            object3 = object.getString(3);
                            int n2 = object.getInt(4);
                            object2.add(new sm(this, this.a((String)object4), l3, tf.c((String)object3), l2, n2));
                        } while (bl2 = object.moveToNext());
                    }
                    if (object == null) return object2;
                }
                catch (Throwable throwable) {
                    object2 = object;
                    object = throwable;
                    break block9;
                }
                catch (SQLiteException sQLiteException) {
                    break block10;
                }
                object.close();
                return object2;
                catch (Throwable throwable) {
                    break block9;
                }
                catch (SQLiteException sQLiteException) {
                    object = object3;
                }
            }
            object2 = object;
            {
                void var9_7;
                this.e("Error loading hits from the database", var9_7);
                object2 = object;
                throw var9_7;
            }
        }
        if (object2 == null) throw object;
        object2.close();
        throw object;
    }

    @Override
    protected final void a() {
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public final void a(sm sm2) {
        void var5_9;
        void var5_6;
        ah.a(sm2);
        p.d();
        this.x();
        ah.a(sm2);
        Uri.Builder builder = new Uri.Builder();
        List<Long> list = sm2.b().entrySet().iterator();
        while (list.hasNext()) {
            Map.Entry<String, String> entry = list.next();
            String string2 = entry.getKey();
            if ("ht".equals(string2) || "qt".equals(string2) || "AppUID".equals(string2)) continue;
            builder.appendQueryParameter(string2, entry.getValue());
        }
        List<Long> list2 = list = builder.build().getEncodedQuery();
        if (list == null) {
            String string3 = "";
        }
        if (var5_6.length() > 8192) {
            this.j().a(sm2, "Hit length exceeds the maximum allowed size");
            return;
        }
        int n2 = sh.c.a();
        long l2 = this.C();
        if (l2 > (long)(n2 - 1)) {
            list = this.d(l2 - (long)n2 + 1L);
            this.d("Store full, deleting hits to make room, count", list.size());
            this.a(list);
        }
        list = this.A();
        ContentValues contentValues = new ContentValues();
        contentValues.put("hit_string", (String)var5_6);
        contentValues.put("hit_time", Long.valueOf(sm2.d()));
        contentValues.put("hit_app_id", Integer.valueOf(sm2.a()));
        if (sm2.f()) {
            String string4 = rz.h();
        } else {
            String string5 = rz.i();
        }
        contentValues.put("hit_url", (String)var5_9);
        try {
            l2 = list.insert("hits2", null, contentValues);
            if (l2 == -1L) {
                this.f("Failed to insert a hit (got -1)");
                return;
            }
            this.b("Hit saved to database. db-id, hit", l2, sm2);
            return;
        }
        catch (SQLiteException sQLiteException) {
            this.e("Error storing a hit", (Object)sQLiteException);
            return;
        }
    }

    public final void a(List<Long> list) {
        int n2;
        Long l2;
        ah.a(list);
        p.d();
        this.x();
        if (list.isEmpty()) {
            return;
        }
        CharSequence charSequence = new StringBuilder("hit_id");
        charSequence.append(" in (");
        for (n2 = 0; n2 < list.size(); ++n2) {
            l2 = list.get(n2);
            if (l2 != null && l2 != 0L) {
                if (n2 > 0) {
                    charSequence.append(",");
                }
                charSequence.append(l2);
                continue;
            }
            throw new SQLiteException("Invalid hit id");
        }
        charSequence.append(")");
        charSequence = charSequence.toString();
        try {
            l2 = this.A();
            this.a("Deleting dispatched hits. count", list.size());
            n2 = l2.delete("hits2", (String)charSequence, null);
            if (n2 != list.size()) {
                this.b("Deleted fewer hits then expected", list.size(), n2, charSequence);
            }
            return;
        }
        catch (SQLiteException sQLiteException) {
            this.e("Error deleting hits", (Object)sQLiteException);
            throw sQLiteException;
        }
    }

    public final void b() {
        this.x();
        this.A().beginTransaction();
    }

    public final void b(long l2) {
        p.d();
        this.x();
        ArrayList<Long> arrayList = new ArrayList<Long>(1);
        arrayList.add(l2);
        this.a("Deleting hit, id", l2);
        this.a(arrayList);
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    public final List<ra> c(long var1_1) {
        block12 : {
            block11 : {
                this.x();
                p.d();
                var5_2 = this.A();
                var3_4 = sh.d.a();
                var5_2 = var6_5 = var5_2.query("properties", new String[]{"cid", "tid", "adid", "hits_count", "params"}, "app_uid=?", new String[]{"0"}, null, null, null, String.valueOf(var3_4));
                try {
                    block13 : {
                        var7_6 = new ArrayList<ra>();
                        var5_2 = var6_5;
                        if (!var6_5.moveToFirst()) break block13;
                        do {
                            var5_2 = var6_5;
                            var8_13 = var6_5.getString(0);
                            var5_2 = var6_5;
                            var9_14 = var6_5.getString(1);
                            var5_2 = var6_5;
                            var4_12 = var6_5.getInt(2) != 0;
                            var5_2 = var6_5;
                            var1_1 = var6_5.getInt(3);
                            var5_2 = var6_5;
                            var10_15 = this.g(var6_5.getString(4));
                            var5_2 = var6_5;
                            if (TextUtils.isEmpty((CharSequence)var8_13)) ** GOTO lbl-1000
                            var5_2 = var6_5;
                            if (!TextUtils.isEmpty((CharSequence)var9_14)) {
                                var5_2 = var6_5;
                                var7_6.add(new ra(0L, var8_13, var9_14, var4_12, var1_1, var10_15));
                            } else lbl-1000: // 2 sources:
                            {
                                var5_2 = var6_5;
                                this.c("Read property with empty client id or tracker id", var8_13, var9_14);
                            }
                            var5_2 = var6_5;
                        } while (var6_5.moveToNext());
                    }
                    var5_2 = var6_5;
                    if (var7_6.size() >= var3_4) {
                        var5_2 = var6_5;
                        this.e("Sending hits to too many properties. Campaign report might be incorrect");
                    }
                    if (var6_5 == null) return var7_6;
                }
                catch (SQLiteException var7_7) {
                    break block11;
                }
                var6_5.close();
                return var7_6;
                catch (Throwable var5_3) {
                    var6_5 = null;
                    var7_8 = var5_3;
                    break block12;
                }
                catch (SQLiteException var7_9) {
                    var6_5 = null;
                }
            }
            var5_2 = var6_5;
            try {
                this.e("Error loading hits from the database", var7_10);
                var5_2 = var6_5;
                throw var7_10;
            }
            catch (Throwable var7_11) {
                var6_5 = var5_2;
            }
        }
        if (var6_5 == null) throw var7_8;
        var6_5.close();
        throw var7_8;
    }

    public final void c() {
        this.x();
        this.A().setTransactionSuccessful();
    }

    /*
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    @Override
    public final void close() {
        try {
            this.c.close();
            return;
        }
        catch (IllegalStateException illegalStateException) {
            String string2;
            void var1_2;
            block3 : {
                string2 = "Error closing database";
                break block3;
                catch (SQLiteException sQLiteException) {
                    string2 = "Sql error closing database";
                }
            }
            this.e(string2, var1_2);
            return;
        }
    }

    public final void d() {
        this.x();
        this.A().endTransaction();
    }

    final boolean e() {
        if (this.C() == 0L) {
            return true;
        }
        return false;
    }

    public final int f() {
        p.d();
        this.x();
        if (!this.d.a(86400000L)) {
            return 0;
        }
        this.d.a();
        this.b("Deleting stale hits (if any)");
        int n2 = this.A().delete("hits2", "hit_time < ?", new String[]{Long.toString(this.h().a() - 2592000000L)});
        this.a("Deleted stale hits, count", n2);
        return n2;
    }

    public final long z() {
        p.d();
        this.x();
        return this.a(b, null, 0L);
    }
}

