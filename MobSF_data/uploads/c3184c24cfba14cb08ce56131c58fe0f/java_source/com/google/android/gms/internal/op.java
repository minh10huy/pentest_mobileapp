/*
 * Decompiled with CFR 0_132.
 */
package com.google.android.gms.internal;

import com.google.android.gms.internal.bqh;
import com.google.android.gms.internal.buc;
import com.google.android.gms.internal.eg;
import com.google.android.gms.internal.yl;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.TimeZone;
import java.util.TreeMap;

public final class op {
    private static long a(String string2) {
        try {
            long l2 = op.a().parse(string2).getTime();
            return l2;
        }
        catch (ParseException parseException) {
            eg.a(parseException, "Unable to parse dateStr: %s, falling back to 0", string2);
            return 0L;
        }
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    public static yl a(buc var0) {
        block11 : {
            var13_1 = System.currentTimeMillis();
            var15_2 = var0.c;
            var16_3 = var15_2.get("Date");
            var7_10 = var16_3 != null ? op.a(var16_3) : 0L;
            var16_4 = var15_2.get("Cache-Control");
            var1_11 = false;
            var2_12 = 0;
            if (var16_4 != null) break block11;
            var5_13 = 0L;
            var3_14 = 0L;
            var2_12 = 0;
            ** GOTO lbl46
        }
        var16_5 = var16_4.split(",");
        var5_13 = 0L;
        var1_11 = false;
        var3_14 = 0L;
        do {
            block14 : {
                block17 : {
                    block15 : {
                        block16 : {
                            block12 : {
                                block13 : {
                                    if (var2_12 >= var16_5.length) break block12;
                                    var17_15 = var16_5[var2_12].trim();
                                    if (var17_15.equals("no-cache") != false) return null;
                                    if (var17_15.equals("no-store")) {
                                        return null;
                                    }
                                    if (var17_15.startsWith("max-age=")) {
                                        var9_17 = Long.parseLong(var17_15.substring(8));
                                        var11_18 = var3_14;
                                    }
                                    if (var17_15.startsWith("stale-while-revalidate=")) {
                                        var11_18 = Long.parseLong(var17_15.substring(23));
                                        var9_17 = var5_13;
                                    }
                                    if (var17_15.equals("must-revalidate")) break block13;
                                    var9_17 = var5_13;
                                    var11_18 = var3_14;
                                    if (!var17_15.equals("proxy-revalidate")) break block14;
                                }
                                var1_11 = true;
                                var11_18 = var3_14;
                                var9_17 = var5_13;
                                break block14;
                            }
                            var2_12 = 1;
lbl46: // 2 sources:
                            var16_7 = var15_2.get("Expires");
                            var11_18 = var16_7 != null ? op.a(var16_7) : 0L;
                            var16_8 = var15_2.get("Last-Modified");
                            var9_17 = var16_8 != null ? op.a(var16_8) : 0L;
                            var16_9 = var15_2.get("ETag");
                            if (var2_12 == 0) break block15;
                            var5_13 = var13_1 + var5_13 * 1000L;
                            if (!var1_11) break block16;
                            var3_14 = var5_13;
                            ** GOTO lbl66
                        }
                        var11_18 = var3_14 * 1000L + var5_13;
                        var3_14 = var5_13;
                        var5_13 = var11_18;
                        break block17;
                    }
                    if (var7_10 > 0L && var11_18 >= var7_10) {
                        var3_14 = var5_13 = var11_18 - var7_10 + var13_1;
                    } else {
                        var3_14 = 0L;
lbl66: // 2 sources:
                        var5_13 = var3_14;
                    }
                }
                var17_15 = new yl();
                var17_15.a = var0.b;
                var17_15.b = var16_9;
                var17_15.f = var3_14;
                var17_15.e = var5_13;
                var17_15.c = var7_10;
                var17_15.d = var9_17;
                var17_15.g = var15_2;
                var17_15.h = var0.d;
                return var17_15;
                catch (Exception var17_16) {
                    var9_17 = var5_13;
                    var11_18 = var3_14;
                }
            }
            ++var2_12;
            var5_13 = var9_17;
            var3_14 = var11_18;
        } while (true);
    }

    static String a(long l2) {
        return op.a().format(new Date(l2));
    }

    public static String a(Map<String, String> arrstring) {
        if ((arrstring = arrstring.get("Content-Type")) != null) {
            arrstring = arrstring.split(";");
            for (int i2 = 1; i2 < arrstring.length; ++i2) {
                String[] arrstring2 = arrstring[i2].trim().split("=");
                if (arrstring2.length != 2 || !arrstring2[0].equals("charset")) continue;
                return arrstring2[1];
            }
        }
        return "ISO-8859-1";
    }

    private static SimpleDateFormat a() {
        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("EEE, dd MMM yyyy HH:mm:ss zzz", Locale.US);
        simpleDateFormat.setTimeZone(TimeZone.getTimeZone("GMT"));
        return simpleDateFormat;
    }

    static Map<String, String> a(List<bqh> object) {
        TreeMap<String, String> treeMap = new TreeMap<String, String>(String.CASE_INSENSITIVE_ORDER);
        object = object.iterator();
        while (object.hasNext()) {
            bqh bqh2 = (bqh)object.next();
            treeMap.put(bqh2.a(), bqh2.b());
        }
        return treeMap;
    }

    static List<bqh> b(Map<String, String> object) {
        ArrayList<bqh> arrayList = new ArrayList<bqh>(object.size());
        for (Map.Entry entry : object.entrySet()) {
            arrayList.add(new bqh((String)entry.getKey(), (String)entry.getValue()));
        }
        return arrayList;
    }
}

