/*
 * Decompiled with CFR 0_132.
 */
package com.google.android.gms.internal;

import com.google.android.gms.internal.bjc;
import com.google.android.gms.internal.bjd;
import com.google.android.gms.internal.bjf;

final class bje
extends bjd {
    bje() {
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Lifted jumps to return sites
     */
    @Override
    final int a(int var1_1, byte[] var2_2, int var3_3, int var4_4) {
        while (var3_3 < var4_4 && var2_2[var3_3] >= 0) {
            ++var3_3;
        }
        var1_1 = var3_3;
        if (var3_3 >= var4_4) {
            return 0;
        }
        do lbl-1000: // 5 sources:
        {
            block10 : {
                block9 : {
                    if (var1_1 >= var4_4) {
                        return 0;
                    }
                    var3_3 = var1_1 + 1;
                    var5_5 = var2_2[var1_1];
                    var1_1 = var3_3;
                    if (var5_5 >= 0) ** GOTO lbl-1000
                    if (var5_5 >= -32) break block9;
                    if (var3_3 >= var4_4) {
                        return var5_5;
                    }
                    if (var5_5 < -62) return -1;
                    var1_1 = var3_3 + 1;
                    if (var2_2[var3_3] <= -65) ** GOTO lbl-1000
                    return -1;
                }
                if (var5_5 >= -16) break block10;
                if (var3_3 >= var4_4 - 1) {
                    return bjc.b(var2_2, var3_3, var4_4);
                }
                var6_6 = var3_3 + 1;
                var1_1 = var2_2[var3_3];
                if (var1_1 > -65) return -1;
                if (var5_5 == -32) {
                    if (var1_1 < -96) return -1;
                }
                if (var5_5 == -19) {
                    if (var1_1 >= -96) return -1;
                }
                var1_1 = var6_6 + 1;
                if (var2_2[var6_6] <= -65) ** GOTO lbl-1000
                return -1;
            }
            if (var3_3 >= var4_4 - 2) {
                return bjc.b(var2_2, var3_3, var4_4);
            }
            var1_1 = var3_3 + 1;
            if ((var3_3 = var2_2[var3_3]) > -65) return -1;
            if ((var5_5 << 28) + (var3_3 + 112) >> 30 != 0) return -1;
            var3_3 = var1_1 + 1;
            if (var2_2[var1_1] > -65) return -1;
            var1_1 = var3_3 + 1;
        } while (var2_2[var3_3] <= -65);
        return -1;
    }

    @Override
    final int a(CharSequence charSequence, byte[] arrby, int n2, int n3) {
        int n4;
        int n5;
        int n6 = charSequence.length();
        int n7 = n3 + n2;
        for (n3 = 0; n3 < n6 && (n5 = n3 + n2) < n7 && (n4 = charSequence.charAt(n3)) < 128; ++n3) {
            arrby[n5] = (byte)n4;
        }
        if (n3 == n6) {
            return n2 + n6;
        }
        n5 = n2 + n3;
        for (n2 = n3; n2 < n6; ++n2) {
            char c2;
            block11 : {
                block12 : {
                    block13 : {
                        block8 : {
                            block10 : {
                                block9 : {
                                    block7 : {
                                        c2 = charSequence.charAt(n2);
                                        if (c2 >= '?' || n5 >= n7) break block7;
                                        n3 = n5 + 1;
                                        arrby[n5] = (byte)c2;
                                        break block8;
                                    }
                                    if (c2 >= '\u0800' || n5 > n7 - 2) break block9;
                                    n4 = n5 + 1;
                                    arrby[n5] = (byte)(c2 >>> 6 | 960);
                                    n3 = n4 + 1;
                                    arrby[n4] = (byte)(c2 & 63 | 128);
                                    break block8;
                                }
                                if (c2 >= '\ud800' && '\udfff' >= c2 || n5 > n7 - 3) break block10;
                                n3 = n5 + 1;
                                arrby[n5] = (byte)(c2 >>> 12 | 480);
                                n5 = n3 + 1;
                                arrby[n3] = (byte)(c2 >>> 6 & 63 | 128);
                                n3 = n5 + 1;
                                arrby[n5] = (byte)(c2 & 63 | 128);
                                break block8;
                            }
                            if (n5 > n7 - 4) break block11;
                            n3 = n2 + 1;
                            if (n3 == charSequence.length()) break block12;
                            char c3 = charSequence.charAt(n3);
                            if (!Character.isSurrogatePair(c2, c3)) break block13;
                            n2 = Character.toCodePoint(c2, c3);
                            n4 = n5 + 1;
                            arrby[n5] = (byte)(n2 >>> 18 | 240);
                            n5 = n4 + 1;
                            arrby[n4] = (byte)(n2 >>> 12 & 63 | 128);
                            n4 = n5 + 1;
                            arrby[n5] = (byte)(n2 >>> 6 & 63 | 128);
                            n5 = n4 + 1;
                            arrby[n4] = (byte)(n2 & 63 | 128);
                            n2 = n3;
                            n3 = n5;
                        }
                        n5 = n3;
                        continue;
                    }
                    n2 = n3;
                }
                throw new bjf(n2 - 1, n6);
            }
            if (!('\ud800' > c2 || c2 > '\udfff' || (n3 = n2 + 1) != charSequence.length() && Character.isSurrogatePair(c2, charSequence.charAt(n3)))) {
                throw new bjf(n2, n6);
            }
            charSequence = new StringBuilder(37);
            charSequence.append("Failed writing ");
            charSequence.append(c2);
            charSequence.append(" at index ");
            charSequence.append(n5);
            throw new ArrayIndexOutOfBoundsException(charSequence.toString());
        }
        return n5;
    }
}

