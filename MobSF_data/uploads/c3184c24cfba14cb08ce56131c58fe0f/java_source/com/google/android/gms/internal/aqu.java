/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  org.json.JSONArray
 *  org.json.JSONObject
 */
package com.google.android.gms.internal;

import com.google.android.gms.common.internal.ah;
import com.google.android.gms.internal.aiv;
import com.google.android.gms.internal.ajm;
import com.google.android.gms.internal.ala;
import com.google.android.gms.internal.aqt;
import com.google.android.gms.internal.arv;
import com.google.android.gms.internal.arw;
import com.google.android.gms.internal.arx;
import com.google.android.gms.internal.arz;
import com.google.android.gms.internal.asa;
import com.google.android.gms.internal.asc;
import com.google.android.gms.internal.asd;
import com.google.android.gms.internal.asf;
import com.google.android.gms.internal.asg;
import com.google.android.gms.internal.asi;
import com.google.android.gms.internal.asj;
import com.google.android.gms.internal.asp;
import com.google.android.gms.internal.asv;
import com.google.android.gms.internal.asy;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import org.json.JSONArray;
import org.json.JSONObject;

public final class aqu {
    public static ala a(Object object) {
        block7 : {
            Object object2;
            Object object3;
            int n2;
            JSONObject jSONObject;
            block6 : {
                boolean bl2;
                block5 : {
                    bl2 = object instanceof JSONObject;
                    int n3 = 0;
                    if (!bl2) break block5;
                    jSONObject = (JSONObject)object;
                    object = jSONObject.getString("name");
                    object2 = jSONObject.getJSONArray("params");
                    jSONObject = jSONObject.getJSONArray("instructions");
                    break block6;
                }
                if (object instanceof JSONArray) {
                    object3 = (JSONArray)object;
                    int n4 = object3.length();
                    int n5 = 3;
                    bl2 = n4 >= 3;
                    ah.b(bl2);
                    object = object3.getString(1);
                    jSONObject = object3.getJSONArray(2);
                    object2 = new JSONArray();
                    for (n2 = 1; n2 < jSONObject.length(); ++n2) {
                        ah.b(jSONObject.get(n2) instanceof String);
                        object2.put(jSONObject.get(n2));
                    }
                    jSONObject = new JSONArray();
                    for (n2 = n5; n2 < object3.length(); ++n2) {
                        jSONObject.put(object3.get(n2));
                    }
                }
                break block7;
            }
            object3 = new ArrayList();
            for (n2 = 0; n2 < object2.length(); ++n2) {
                object3.add(object2.getString(n2));
            }
            object2 = new ArrayList();
            for (n2 = n3; n2 < jSONObject.length(); ++n2) {
                JSONArray jSONArray = jSONObject.getJSONArray(n2);
                if (jSONArray.length() == 0) continue;
                object2.add(aqu.b(jSONArray));
            }
            return new ala(null, (String)object, (List<String>)object3, (List<asv>)object2);
        }
        throw new IllegalArgumentException("invalid JSON in runtime section");
    }

    static arv a(String object) {
        if ((object = new JSONObject((String)object).get("resource")) instanceof JSONObject) {
            JSONObject jSONObject = (JSONObject)object;
            object = new arw();
            object.a(jSONObject.optString("version"));
            Object object2 = aqu.a(jSONObject.getJSONArray("macros"));
            List<arx> list = aqu.a(jSONObject.getJSONArray("tags"), object2);
            List<arx> list2 = aqu.a(jSONObject.getJSONArray("predicates"), object2);
            object2 = aqu.a(jSONObject.getJSONArray("macros"), object2).iterator();
            while (object2.hasNext()) {
                object.a((arx)object2.next());
            }
            jSONObject = jSONObject.getJSONArray("rules");
            for (int i2 = 0; i2 < jSONObject.length(); ++i2) {
                object.a(aqu.a(jSONObject.getJSONArray(i2), list, list2));
            }
            return object.a();
        }
        throw new aqt("Resource map not found");
    }

    private static arx a(JSONObject jSONObject, List<String> list) {
        arz arz2 = new arz();
        Iterator iterator = jSONObject.keys();
        while (iterator.hasNext()) {
            String string2 = (String)iterator.next();
            asg asg2 = aqu.a(jSONObject.get(string2), list).a();
            if ("push_after_evaluate".equals(string2)) {
                arz2.a(asg2);
                continue;
            }
            arz2.a(string2, asg2);
        }
        return arz2.a();
    }

    private static asa a(JSONArray jSONArray, List<arx> list, List<arx> list2) {
        asc asc2 = new asc();
        for (int i2 = 0; i2 < jSONArray.length(); ++i2) {
            int n2;
            Object object = jSONArray.getJSONArray(i2);
            boolean bl2 = object.getString(0).equals("if");
            int n3 = 1;
            int n4 = 1;
            int n5 = 1;
            if (bl2) {
                for (n2 = 1; n2 < object.length(); ++n2) {
                    asc2.a(list2.get(object.getInt(n2)));
                }
                continue;
            }
            if (object.getString(0).equals("unless")) {
                for (n2 = n3; n2 < object.length(); ++n2) {
                    asc2.b(list2.get(object.getInt(n2)));
                }
                continue;
            }
            if (object.getString(0).equals("add")) {
                for (n2 = n4; n2 < object.length(); ++n2) {
                    asc2.c(list.get(object.getInt(n2)));
                }
                continue;
            }
            if (object.getString(0).equals("block")) {
                for (n2 = n5; n2 < object.length(); ++n2) {
                    asc2.d(list.get(object.getInt(n2)));
                }
                continue;
            }
            object = (object = String.valueOf(object.getString(0))).length() != 0 ? "Unknown Rule property: ".concat((String)object) : new String("Unknown Rule property: ");
            aqu.c((String)object);
        }
        return asc2.a();
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    private static asi a(Object var0, List<String> var1_2) {
        block17 : {
            block14 : {
                block18 : {
                    block12 : {
                        block16 : {
                            block15 : {
                                block13 : {
                                    if (!(var0 instanceof JSONArray)) break block12;
                                    var4_3 = (JSONArray)var0;
                                    var5_4 = var4_3.getString(0);
                                    var3_5 = var5_4.equals("escape");
                                    var2_6 = 2;
                                    if (var3_5) {
                                        var1_2 = aqu.a(var4_3.get(1), (List<String>)var1_2);
                                        do {
                                            var0 = var1_2;
                                            if (var2_6 >= var4_3.length()) return var0;
                                            var1_2.a(var4_3.getInt(var2_6));
                                            ++var2_6;
                                        } while (true);
                                    }
                                    if (!var5_4.equals("list")) break block13;
                                    var0 = new ArrayList<E>();
                                    for (var2_6 = 1; var2_6 < var4_3.length(); ++var2_6) {
                                        var0.add(aqu.a(var4_3.get(var2_6), (List<String>)var1_2).a());
                                    }
                                    var0 = new asi(2, var0);
                                    break block14;
                                }
                                if (!var5_4.equals("map")) break block15;
                                var0 = new HashMap<K, V>();
                                for (var2_6 = 1; var2_6 < var4_3.length(); var2_6 += 2) {
                                    var0.put(aqu.a(var4_3.get(var2_6), (List<String>)var1_2).a(), aqu.a(var4_3.get(var2_6 + 1), (List<String>)var1_2).a());
                                }
                                var0 = new asi(3, var0);
                                break block14;
                            }
                            if (var5_4.equals("macro")) {
                                var0 = new asi(4, var1_2.get(var4_3.getInt(1)));
                                var0.a(true);
                                return var0;
                            }
                            if (!var5_4.equals("template")) break block16;
                            var0 = new ArrayList<E>();
                            break block17;
                        }
                        var1_2 = String.valueOf(var0);
                        var0 = new StringBuilder(String.valueOf(var1_2).length() + 20);
                        break block18;
                    }
                    if (var0 instanceof Boolean) {
                        return new asi(8, var0);
                    }
                    if (var0 instanceof Integer) {
                        return new asi(6, var0);
                    }
                    if (var0 instanceof String) {
                        return new asi(1, var0);
                    }
                    var1_2 = String.valueOf(var0);
                    var0 = new StringBuilder(String.valueOf(var1_2).length() + 20);
                }
                var0.append("Invalid value type: ");
                var0.append((String)var1_2);
                aqu.c(var0.toString());
                return null;
            }
lbl56: // 2 sources:
            do {
                var0.a(true);
                return var0;
                break;
            } while (true);
        }
        for (var2_6 = 1; var2_6 < var4_3.length(); ++var2_6) {
            var5_4 = var4_3.get(var2_6);
            var5_4 = aqu.a(var5_4, (List<String>)var1_2);
            var0.add(var5_4.a());
            continue;
        }
        var0 = new asi(7, var0);
        ** while (true)
        catch (Throwable var0_1) {
            throw var0_1;
        }
    }

    private static List<String> a(JSONArray jSONArray) {
        ArrayList<String> arrayList = new ArrayList<String>();
        for (int i2 = 0; i2 < jSONArray.length(); ++i2) {
            arrayList.add(jSONArray.getJSONObject(i2).getString("instance_name"));
        }
        return arrayList;
    }

    private static List<arx> a(JSONArray jSONArray, List<String> list) {
        ArrayList<arx> arrayList = new ArrayList<arx>();
        for (int i2 = 0; i2 < jSONArray.length(); ++i2) {
            arrayList.add(aqu.a(jSONArray.getJSONObject(i2), list));
        }
        return arrayList;
    }

    static asd b(String string2) {
        Object object = new JSONObject(string2);
        string2 = object.optJSONArray("runtime");
        if (string2 == null) {
            return null;
        }
        asf asf2 = new asf();
        if ((object = object.get("resource")) instanceof JSONObject) {
            asf2.a(object.optString("version"));
            for (int i2 = 0; i2 < string2.length(); ++i2) {
                object = string2.get(i2);
                if (object instanceof JSONArray && ((JSONArray)object).length() == 0) continue;
                asf2.a(aqu.a(object));
            }
            return asf2.a();
        }
        throw new aqt("Resource map not found");
    }

    /*
     * Enabled aggressive block sorting
     */
    private static asv b(JSONArray jSONArray) {
        int n2 = jSONArray.length();
        int n3 = 1;
        boolean bl2 = n2 > 0;
        ah.b(bl2);
        String string2 = jSONArray.getString(0);
        ArrayList arrayList = new ArrayList();
        do {
            block3 : {
                asj asj2;
                block4 : {
                    block2 : {
                        if (n3 >= jSONArray.length()) {
                            return new asv(string2, arrayList);
                        }
                        asj2 = jSONArray.get(n3);
                        if (!(asj2 instanceof JSONArray)) break block2;
                        if ((asj2 = (JSONArray)asj2).length() == 0) break block3;
                        asj2 = aqu.b(asj2);
                        break block4;
                    }
                    asj2 = asj2 == JSONObject.NULL ? asp.d : asy.a((Object)asj2);
                }
                arrayList.add(asj2);
            }
            ++n3;
        } while (true);
    }

    private static void c(String string2) {
        aiv.a(string2);
        throw new aqt(string2);
    }
}

