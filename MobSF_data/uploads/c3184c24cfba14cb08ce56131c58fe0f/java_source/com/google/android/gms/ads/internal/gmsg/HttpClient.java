/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.content.Context
 *  android.text.TextUtils
 *  org.json.JSONArray
 *  org.json.JSONException
 *  org.json.JSONObject
 */
package com.google.android.gms.ads.internal.gmsg;

import android.content.Context;
import android.support.annotation.Keep;
import android.text.TextUtils;
import com.google.android.gms.ads.internal.av;
import com.google.android.gms.ads.internal.gmsg.aa;
import com.google.android.gms.ads.internal.gmsg.ab;
import com.google.android.gms.common.annotation.KeepName;
import com.google.android.gms.internal.ak;
import com.google.android.gms.internal.he;
import com.google.android.gms.internal.hm;
import com.google.android.gms.internal.hs;
import com.google.android.gms.internal.kd;
import com.google.android.gms.internal.km;
import java.io.BufferedOutputStream;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

@ak
@Keep
@KeepName
public class HttpClient
implements aa<com.google.android.gms.ads.internal.js.a> {
    private final Context mContext;
    private final km zzapq;

    public HttpClient(Context context, km km2) {
        this.mContext = context;
        this.zzapq = km2;
    }

    /*
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    private final c zza(b object) {
        void var1_4;
        Object object2;
        block14 : {
            Object object3;
            block15 : {
                object2 = object3 = (HttpURLConnection)object.b().openConnection();
                try {
                    int n3;
                    int n2;
                    Object object4;
                    Object object5;
                    block16 : {
                        av.e().a(this.mContext, this.zzapq.a, false, (HttpURLConnection)object3);
                        object2 = object3;
                        object5 = object.c();
                        object2 = object3;
                        n2 = object5.size();
                        break block16;
                        catch (Throwable throwable) {
                            object2 = null;
                            break block14;
                        }
                        catch (Exception exception) {
                            object = null;
                            break block15;
                        }
                    }
                    for (n3 = 0; n3 < n2; ++n3) {
                        object2 = object3;
                        object4 = object5.get(n3);
                        object2 = object3;
                        object2 = object3;
                        object3.addRequestProperty(object4.a(), object4.b());
                    }
                    object2 = object3;
                    if (!TextUtils.isEmpty((CharSequence)object.d())) {
                        object2 = object3;
                        object3.setDoOutput(true);
                        object2 = object3;
                        object5 = object.d().getBytes();
                        object2 = object3;
                        object3.setFixedLengthStreamingMode(((byte[])object5).length);
                        object2 = object3;
                        object4 = new BufferedOutputStream(object3.getOutputStream());
                        object2 = object3;
                        object4.write((byte[])object5);
                        object2 = object3;
                        object4.close();
                    } else {
                        object5 = null;
                    }
                    object2 = object3;
                    object4 = new kd();
                    object2 = object3;
                    object4.a((HttpURLConnection)object3, (byte[])object5);
                    object2 = object3;
                    object5 = new ArrayList();
                    object2 = object3;
                    if (object3.getHeaderFields() != null) {
                        object2 = object3;
                        Iterator<Map.Entry<String, List<String>>> iterator = object3.getHeaderFields().entrySet().iterator();
                        block9 : do {
                            object2 = object3;
                            if (!iterator.hasNext()) break;
                            object2 = object3;
                            Map.Entry<String, List<String>> entry = iterator.next();
                            object2 = object3;
                            Iterator<String> iterator2 = entry.getValue().iterator();
                            do {
                                object2 = object3;
                                if (!iterator2.hasNext()) continue block9;
                                object2 = object3;
                                String string2 = iterator2.next();
                                object2 = object3;
                                object5.add(new a(entry.getKey(), string2));
                            } while (true);
                            break;
                        } while (true);
                    }
                    object2 = object3;
                    object = object.a();
                    object2 = object3;
                    n3 = object3.getResponseCode();
                    object2 = object3;
                    av.e();
                    object2 = object3;
                    object = new d((String)object, n3, (List<a>)object5, hs.a(new InputStreamReader(object3.getInputStream())));
                    object2 = object3;
                    object4.a((HttpURLConnection)object3, object.b());
                    object2 = object3;
                    object4.a(object.d());
                    object2 = object3;
                    object = new c(this, true, (d)object, null);
                    if (object3 == null) return object;
                    object3.disconnect();
                    return object;
                }
                catch (Exception exception) {
                    object = object3;
                    object3 = exception;
                }
            }
            object2 = object;
            try {
                object3 = new c(this, false, null, object3.toString());
                if (object == null) return object3;
                object.disconnect();
                return object3;
            }
            catch (Throwable throwable) {
                // empty catch block
            }
        }
        if (object2 == null) throw var1_4;
        object2.disconnect();
        throw var1_4;
    }

    private static JSONObject zza(d d2) {
        JSONObject jSONObject = new JSONObject();
        try {
            jSONObject.put("http_request_id", (Object)d2.a());
            if (d2.d() != null) {
                jSONObject.put("body", (Object)d2.d());
            }
            JSONArray jSONArray = new JSONArray();
            for (a a2 : d2.c()) {
                jSONArray.put((Object)new JSONObject().put("key", (Object)a2.a()).put("value", (Object)a2.b()));
            }
            jSONObject.put("headers", (Object)jSONArray);
            jSONObject.put("response_code", d2.b());
            return jSONObject;
        }
        catch (JSONException jSONException) {
            he.b("Error constructing JSON for http response.", (Throwable)jSONException);
            return jSONObject;
        }
    }

    private static b zzc(JSONObject object) {
        String string2 = object.optString("http_request_id");
        Object object2 = object.optString("url");
        Object object3 = null;
        String string3 = object.optString("post_body", null);
        try {
            object3 = object2 = new URL((String)object2);
        }
        catch (MalformedURLException malformedURLException) {
            he.b("Error constructing http request.", malformedURLException);
        }
        ArrayList<a> arrayList = new ArrayList<a>();
        object2 = object.optJSONArray("headers");
        object = object2;
        if (object2 == null) {
            object = new JSONArray();
        }
        for (int i2 = 0; i2 < object.length(); ++i2) {
            object2 = object.optJSONObject(i2);
            if (object2 == null) continue;
            arrayList.add(new a(object2.optString("key"), object2.optString("value")));
        }
        return new b(string2, (URL)object3, arrayList, string3);
    }

    /*
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    @Keep
    @KeepName
    public JSONObject send(JSONObject object) {
        JSONObject jSONObject;
        Object object2;
        block7 : {
            jSONObject = new JSONObject();
            object2 = object.optString("http_request_id");
            try {
                object = this.zza(HttpClient.zzc((JSONObject)object));
                if (object.c()) {
                    jSONObject.put("response", (Object)HttpClient.zza(object.b()));
                    jSONObject.put("success", true);
                    return jSONObject;
                }
                jSONObject.put("response", (Object)new JSONObject().put("http_request_id", object2));
                jSONObject.put("success", false);
                jSONObject.put("reason", (Object)object.a());
                return jSONObject;
            }
            catch (Exception exception) {
                object = object2;
                object2 = exception;
            }
            break block7;
            catch (Exception exception) {
                object = "";
            }
        }
        he.b("Error executing http request.", (Throwable)object2);
        try {
            jSONObject.put("response", (Object)new JSONObject().put("http_request_id", object));
            jSONObject.put("success", false);
            jSONObject.put("reason", (Object)object2.toString());
            return jSONObject;
        }
        catch (JSONException jSONException) {
            he.b("Error executing http request.", (Throwable)jSONException);
            return jSONObject;
        }
    }

    @Override
    public final /* synthetic */ void zza(Object object, Map map) {
        hm.a(new ab(this, map, (com.google.android.gms.ads.internal.js.a)object));
    }

    @ak
    static final class a {
        private final String a;
        private final String b;

        public a(String string2, String string3) {
            this.a = string2;
            this.b = string3;
        }

        public final String a() {
            return this.a;
        }

        public final String b() {
            return this.b;
        }
    }

    @ak
    static final class b {
        private final String a;
        private final URL b;
        private final ArrayList<a> c;
        private final String d;

        b(String string2, URL uRL, ArrayList<a> arrayList, String string3) {
            this.a = string2;
            this.b = uRL;
            this.c = arrayList;
            this.d = string3;
        }

        public final String a() {
            return this.a;
        }

        public final URL b() {
            return this.b;
        }

        public final ArrayList<a> c() {
            return this.c;
        }

        public final String d() {
            return this.d;
        }
    }

    @ak
    final class c {
        private final d a;
        private final boolean b;
        private final String c;

        public c(HttpClient httpClient, boolean bl2, d d2, String string2) {
            this.b = bl2;
            this.a = d2;
            this.c = string2;
        }

        public final String a() {
            return this.c;
        }

        public final d b() {
            return this.a;
        }

        public final boolean c() {
            return this.b;
        }
    }

    @ak
    static final class d {
        private final String a;
        private final int b;
        private final List<a> c;
        private final String d;

        d(String string2, int n2, List<a> list, String string3) {
            this.a = string2;
            this.b = n2;
            this.c = list;
            this.d = string3;
        }

        public final String a() {
            return this.a;
        }

        public final int b() {
            return this.b;
        }

        public final Iterable<a> c() {
            return this.c;
        }

        public final String d() {
            return this.d;
        }
    }

}

