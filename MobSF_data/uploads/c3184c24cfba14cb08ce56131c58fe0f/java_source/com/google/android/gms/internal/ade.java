/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.content.Context
 *  android.os.Bundle
 *  android.os.Parcelable
 *  android.text.TextUtils
 */
package com.google.android.gms.internal;

import android.content.Context;
import android.os.Bundle;
import android.os.Parcelable;
import android.support.v4.g.a;
import android.text.TextUtils;
import com.google.android.gms.c.e;
import com.google.android.gms.c.h;
import com.google.android.gms.common.internal.ah;
import com.google.android.gms.common.util.f;
import com.google.android.gms.internal.aab;
import com.google.android.gms.internal.aac;
import com.google.android.gms.internal.aai;
import com.google.android.gms.internal.aal;
import com.google.android.gms.internal.aao;
import com.google.android.gms.internal.aaw;
import com.google.android.gms.internal.aax;
import com.google.android.gms.internal.aaz;
import com.google.android.gms.internal.abb;
import com.google.android.gms.internal.abd;
import com.google.android.gms.internal.abm;
import com.google.android.gms.internal.abw;
import com.google.android.gms.internal.abx;
import com.google.android.gms.internal.acc;
import com.google.android.gms.internal.adc;
import com.google.android.gms.internal.adf;
import com.google.android.gms.internal.adg;
import com.google.android.gms.internal.adh;
import com.google.android.gms.internal.adi;
import com.google.android.gms.internal.adj;
import com.google.android.gms.internal.adk;
import com.google.android.gms.internal.adl;
import com.google.android.gms.internal.adm;
import com.google.android.gms.internal.adn;
import com.google.android.gms.internal.ado;
import com.google.android.gms.internal.adp;
import com.google.android.gms.internal.adq;
import com.google.android.gms.internal.adr;
import com.google.android.gms.internal.ads;
import com.google.android.gms.internal.adt;
import com.google.android.gms.internal.adv;
import com.google.android.gms.internal.ady;
import com.google.android.gms.internal.adz;
import com.google.android.gms.internal.aez;
import com.google.android.gms.internal.afh;
import com.google.android.gms.internal.afk;
import com.google.android.gms.internal.zr;
import com.google.android.gms.internal.zy;
import com.google.android.gms.internal.zz;
import com.google.android.gms.measurement.AppMeasurement;
import java.lang.reflect.Method;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.CopyOnWriteArraySet;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.atomic.AtomicReference;

public final class ade
extends adc {
    protected ads a;
    private AppMeasurement.b b;
    private final Set<AppMeasurement.c> c = new CopyOnWriteArraySet<AppMeasurement.c>();
    private boolean d;
    private final AtomicReference<String> e = new AtomicReference();

    protected ade(acc acc2) {
        super(acc2);
    }

    static /* synthetic */ void a(ade ade2, AppMeasurement.ConditionalUserProperty conditionalUserProperty) {
        ade2.d(conditionalUserProperty);
    }

    static /* synthetic */ void a(ade ade2, String string2, String string3, long l2, Bundle bundle, boolean bl2, boolean bl3, boolean bl4, String string4) {
        ade2.b(string2, string3, l2, bundle, bl2, bl3, bl4, string4);
    }

    static /* synthetic */ void a(ade ade2, String string2, String string3, Object object, long l2) {
        ade2.a(string2, string3, object, l2);
    }

    static /* synthetic */ void a(ade ade2, boolean bl2) {
        ade2.c(bl2);
    }

    private final void a(String string2, String string3, long l2, Bundle bundle, boolean bl2, boolean bl3, boolean bl4, String string4) {
        if (bundle == null) {
            bundle = new Bundle();
        } else {
            bundle = new Bundle(bundle);
            for (Object object : bundle.keySet()) {
                int n2;
                Object object2 = bundle.get((String)object);
                if (object2 instanceof Bundle) {
                    bundle.putBundle((String)object, new Bundle((Bundle)object2));
                    continue;
                }
                boolean bl5 = object2 instanceof Parcelable[];
                int n3 = 0;
                if (bl5) {
                    object = (Parcelable[])object2;
                    for (n2 = 0; n2 < ((Parcelable[])object).length; ++n2) {
                        if (!(object[n2] instanceof Bundle)) continue;
                        object[n2] = new Bundle((Bundle)object[n2]);
                    }
                    continue;
                }
                if (!(object2 instanceof ArrayList)) continue;
                object = (ArrayList)object2;
                for (n2 = n3; n2 < object.size(); ++n2) {
                    object2 = object.get(n2);
                    if (!(object2 instanceof Bundle)) continue;
                    object.set(n2, new Bundle((Bundle)object2));
                }
            }
        }
        this.s().a(new adm(this, string2, string3, l2, bundle, bl2, bl3, bl4, string4));
    }

    private final void a(String string2, String string3, long l2, Object object) {
        this.s().a(new adn(this, string2, string3, object, l2));
    }

    private final void a(String string2, String string3, Bundle bundle, boolean bl2, boolean bl3, boolean bl4, String string4) {
        this.a(string2, string3, this.k().a(), bundle, true, bl3, bl4, null);
    }

    private final void a(String object, String string2, Object object2, long l2) {
        ah.a((String)object);
        ah.a(string2);
        this.c();
        this.Q();
        if (!this.p.B()) {
            this.t().D().a("User property not set since app measurement is disabled");
            return;
        }
        if (!this.p.b()) {
            return;
        }
        this.t().D().a("Setting user property (FE)", this.o().a(string2), object2);
        object = new afh(string2, l2, object2, (String)object);
        this.i().a((afh)object);
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    private final List<AppMeasurement.ConditionalUserProperty> b(String object, String string2, String object2) {
        block18 : {
            block17 : {
                block16 : {
                    if (!this.s().z()) break block16;
                    object = this.t().y();
                    string2 = "Cannot get conditional user properties from analytics worker thread";
                    break block17;
                }
                this.s();
                if (!abx.y()) break block18;
                object = this.t().y();
                string2 = "Cannot get conditional user properties from main thread";
            }
            object.a(string2);
            return Collections.emptyList();
        }
        Iterator iterator = new AtomicReference();
        synchronized (iterator) {
            this.p.h().a(new adi(this, (AtomicReference)((Object)iterator), (String)object, string2, (String)object2));
            try {
                iterator.wait(5000L);
            }
            catch (InterruptedException interruptedException) {
                this.t().A().a("Interrupted waiting for get conditional user properties", object, interruptedException);
            }
        }
        iterator = (List)iterator.get();
        if (iterator == null) {
            this.t().A().a("Timed out waiting for get conditional user properties", object);
            return Collections.emptyList();
        }
        object2 = new ArrayList(iterator.size());
        iterator = iterator.iterator();
        while (iterator.hasNext()) {
            zz zz2 = (zz)iterator.next();
            AppMeasurement.ConditionalUserProperty conditionalUserProperty = new AppMeasurement.ConditionalUserProperty();
            conditionalUserProperty.mAppId = object;
            conditionalUserProperty.mOrigin = string2;
            conditionalUserProperty.mCreationTimestamp = zz2.d;
            conditionalUserProperty.mName = zz2.c.a;
            conditionalUserProperty.mValue = zz2.c.a();
            conditionalUserProperty.mActive = zz2.e;
            conditionalUserProperty.mTriggerEventName = zz2.f;
            if (zz2.g != null) {
                conditionalUserProperty.mTimedOutEventName = zz2.g.a;
                if (zz2.g.b != null) {
                    conditionalUserProperty.mTimedOutEventParams = zz2.g.b.b();
                }
            }
            conditionalUserProperty.mTriggerTimeout = zz2.h;
            if (zz2.i != null) {
                conditionalUserProperty.mTriggeredEventName = zz2.i.a;
                if (zz2.i.b != null) {
                    conditionalUserProperty.mTriggeredEventParams = zz2.i.b.b();
                }
            }
            conditionalUserProperty.mTriggeredTimestamp = zz2.c.b;
            conditionalUserProperty.mTimeToLive = zz2.j;
            if (zz2.k != null) {
                conditionalUserProperty.mExpiredEventName = zz2.k.a;
                if (zz2.k.b != null) {
                    conditionalUserProperty.mExpiredEventParams = zz2.k.b.b();
                }
            }
            object2.add(conditionalUserProperty);
        }
        return object2;
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    private final Map<String, Object> b(String a2, String iterator, String object, boolean bl2) {
        block13 : {
            block11 : {
                block12 : {
                    block10 : {
                        if (!this.s().z()) break block10;
                        a2 = this.t().y();
                        iterator = "Cannot get user properties from analytics worker thread";
                        break block11;
                    }
                    this.s();
                    if (!abx.y()) break block12;
                    a2 = this.t().y();
                    iterator = "Cannot get user properties from main thread";
                    break block11;
                }
                AtomicReference atomicReference = new AtomicReference();
                synchronized (atomicReference) {
                    this.p.h().a(new adj(this, atomicReference, (String)((Object)a2), (String)((Object)iterator), (String)object, bl2));
                    try {
                        atomicReference.wait(5000L);
                    }
                    catch (InterruptedException interruptedException) {
                        this.t().A().a("Interrupted waiting for get user properties", interruptedException);
                    }
                }
                iterator = (List)atomicReference.get();
                if (iterator != null) break block13;
                a2 = this.t().A();
                iterator = "Timed out waiting for get user properties";
            }
            a2.a((String)((Object)iterator));
            return Collections.emptyMap();
        }
        a2 = new a<String, Object>(iterator.size());
        iterator = iterator.iterator();
        while (iterator.hasNext()) {
            object = (afh)iterator.next();
            a2.put(object.a, object.a());
        }
        return a2;
    }

    static /* synthetic */ void b(ade ade2, AppMeasurement.ConditionalUserProperty conditionalUserProperty) {
        ade2.e(conditionalUserProperty);
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    private final void b(String string2, String string3, long l2, Bundle object, boolean bl2, boolean bl3, boolean bl4, String string4) {
        Iterator<AppMeasurement.c> iterator;
        int n2;
        Object object2;
        Object object3;
        boolean bl5;
        int n3;
        int n4;
        block28 : {
            ah.a(string2);
            ah.a(string3);
            ah.a(object);
            this.c();
            this.Q();
            if (!this.p.B()) {
                this.t().D().a("Event not sent since app measurement is disabled");
                return;
            }
            bl5 = this.d;
            iterator = null;
            n2 = 0;
            n4 = 0;
            if (!bl5) {
                this.d = true;
                try {
                    object3 = Class.forName("com.google.android.gms.tagmanager.TagManagerService");
                    try {
                        object3.getDeclaredMethod("initialize", Context.class).invoke(null, new Object[]{this.l()});
                    }
                    catch (Exception exception) {
                        this.t().A().a("Failed to invoke Tag Manager's initialize() method", exception);
                    }
                    break block28;
                }
                catch (ClassNotFoundException classNotFoundException) {}
                this.t().C().a("Tag Manager is not found and thus will not be used");
            }
        }
        if (bl4 && !"_iap".equals(string3)) {
            object3 = this.p.o();
            bl5 = object3.a("event", string3);
            n3 = 2;
            if (bl5) {
                if (!object3.a("event", AppMeasurement.a.a, string3)) {
                    n3 = 13;
                } else if (object3.a("event", 40, string3)) {
                    n3 = 0;
                }
            }
            if (n3 != 0) {
                this.p.o();
                string2 = afk.a(string3, 40, true);
                n2 = n4;
                if (string3 != null) {
                    n2 = string3.length();
                }
                this.p.o().a(n3, "_ev", string2, n2);
                return;
            }
        }
        if ((object2 = this.j().y()) != null && !object.containsKey("_sc")) {
            object2.d = true;
        }
        bl5 = bl2 && bl4;
        adv.a((adt)object2, object, bl5);
        bl5 = "am".equals(string2);
        boolean bl6 = afk.h(string3);
        if (bl2 && this.b != null && !bl6 && !bl5) {
            this.t().D().a("Passing event to registered event handler (FE)", this.o().a(string3), this.o().a((Bundle)object));
            this.b.a(string2, string3, (Bundle)object, l2);
            return;
        }
        if (!this.p.b()) {
            return;
        }
        n4 = this.p().b(string3);
        if (n4 != 0) {
            this.p();
            string2 = afk.a(string3, 40, true);
            n3 = n2;
            if (string3 != null) {
                n3 = string3.length();
            }
            this.p.o().a(string4, n4, "_ev", string2, n3);
            return;
        }
        Bundle[] arrbundle = Collections.unmodifiableList(Arrays.asList("_o", "_sn", "_sc", "_si"));
        Object object4 = this.p().a(string3, (Bundle)object, (List<String>)arrbundle, bl4, true);
        object3 = iterator;
        if (object4 != null) {
            object3 = iterator;
            if (object4.containsKey("_sc")) {
                object3 = !object4.containsKey("_si") ? iterator : new ady(object4.getString("_sn"), object4.getString("_sc"), object4.getLong("_si"));
            }
        }
        iterator = object3;
        if (object3 == null) {
            iterator = object2;
        }
        object2 = new ArrayList();
        object2.add(object4);
        long l3 = this.p().z().nextLong();
        Object[] arrobject = object4.keySet().toArray(new String[object.size()]);
        Arrays.sort(arrobject);
        n3 = arrobject.length;
        n4 = 0;
        object3 = object4;
        object = arrbundle;
        for (n2 = 0; n2 < n3; ++n2) {
            object4 = arrobject[n2];
            arrbundle = object3.get((String)object4);
            this.p();
            arrbundle = afk.a(arrbundle);
            if (arrbundle == null) continue;
            object3.putInt((String)object4, arrbundle.length);
            for (int i2 = 0; i2 < arrbundle.length; ++i2) {
                Bundle bundle = arrbundle[i2];
                adv.a((adt)((Object)iterator), bundle, true);
                bundle = this.p().a("_ep", bundle, (List<String>)object, bl4, false);
                bundle.putString("_en", string3);
                bundle.putLong("_eid", l3);
                bundle.putString("_gn", (String)object4);
                bundle.putInt("_ll", arrbundle.length);
                bundle.putInt("_i", i2);
                object2.add(bundle);
            }
            n4 = arrbundle.length + n4;
        }
        if (n4 != 0) {
            object3.putLong("_eid", l3);
            object3.putInt("_epc", n4);
        }
        for (n3 = 0; n3 < object2.size(); ++n3) {
            iterator = (Bundle)object2.get(n3);
            n2 = n3 != 0 ? 1 : 0;
            object3 = n2 != 0 ? "_ep" : string3;
            iterator.putString("_o", string2);
            object = iterator;
            if (bl3) {
                object = this.p().a((Bundle)iterator);
            }
            this.t().D().a("Logging event (FE)", this.o().a(string3), this.o().a((Bundle)object));
            object3 = new aao((String)object3, new aal((Bundle)object), string2, l2);
            this.i().a((aao)object3, string4);
            if (bl5) continue;
            object3 = this.c.iterator();
            while (object3.hasNext()) {
                object3.next().a(string2, string3, new Bundle(object), l2);
            }
        }
        if (this.j().y() != null && "_ae".equals(string3)) {
            this.r().a(true);
        }
    }

    private final void b(String string2, String string3, String string4, Bundle bundle) {
        long l2 = this.k().a();
        ah.a(string3);
        AppMeasurement.ConditionalUserProperty conditionalUserProperty = new AppMeasurement.ConditionalUserProperty();
        conditionalUserProperty.mAppId = string2;
        conditionalUserProperty.mName = string3;
        conditionalUserProperty.mCreationTimestamp = l2;
        if (string4 != null) {
            conditionalUserProperty.mExpiredEventName = string4;
            conditionalUserProperty.mExpiredEventParams = bundle;
        }
        this.s().a(new adh(this, conditionalUserProperty));
    }

    private final void c(AppMeasurement.ConditionalUserProperty conditionalUserProperty) {
        long l2 = this.k().a();
        ah.a(conditionalUserProperty);
        ah.a(conditionalUserProperty.mName);
        ah.a(conditionalUserProperty.mOrigin);
        ah.a(conditionalUserProperty.mValue);
        conditionalUserProperty.mCreationTimestamp = l2;
        String string2 = conditionalUserProperty.mName;
        Object object = conditionalUserProperty.mValue;
        if (this.p().d(string2) != 0) {
            this.t().y().a("Invalid conditional user property name", this.o().c(string2));
            return;
        }
        if (this.p().b(string2, object) != 0) {
            this.t().y().a("Invalid conditional user property value", this.o().c(string2), object);
            return;
        }
        Object object2 = this.p().c(string2, object);
        if (object2 == null) {
            this.t().y().a("Unable to normalize conditional user property value", this.o().c(string2), object);
            return;
        }
        conditionalUserProperty.mValue = object2;
        l2 = conditionalUserProperty.mTriggerTimeout;
        if (!(TextUtils.isEmpty((CharSequence)conditionalUserProperty.mTriggerEventName) || l2 <= 15552000000L && l2 >= 1L)) {
            this.t().y().a("Invalid conditional user property timeout", this.o().c(string2), l2);
            return;
        }
        l2 = conditionalUserProperty.mTimeToLive;
        if (l2 <= 15552000000L && l2 >= 1L) {
            this.s().a(new adg(this, conditionalUserProperty));
            return;
        }
        this.t().y().a("Invalid conditional user property time to live", this.o().c(string2), l2);
    }

    private final void c(boolean bl2) {
        this.c();
        this.Q();
        this.t().D().a("Setting app measurement enabled (FE)", bl2);
        this.u().b(bl2);
        this.i().z();
    }

    private final void d(AppMeasurement.ConditionalUserProperty object) {
        aao aao2;
        aao aao3;
        aao aao4;
        this.c();
        this.Q();
        ah.a(object);
        ah.a(object.mName);
        ah.a(object.mOrigin);
        ah.a(object.mValue);
        if (!this.p.B()) {
            this.t().D().a("Conditional property not sent since Firebase Analytics is disabled");
            return;
        }
        afh afh2 = new afh(object.mName, object.mTriggeredTimestamp, object.mValue, object.mOrigin);
        try {
            aao4 = this.p().a(object.mTriggeredEventName, object.mTriggeredEventParams, object.mOrigin, 0L, true, false);
            aao2 = this.p().a(object.mTimedOutEventName, object.mTimedOutEventParams, object.mOrigin, 0L, true, false);
            aao3 = this.p().a(object.mExpiredEventName, object.mExpiredEventParams, object.mOrigin, 0L, true, false);
        }
        catch (IllegalArgumentException illegalArgumentException) {
            return;
        }
        object = new zz(object.mAppId, object.mOrigin, afh2, object.mCreationTimestamp, false, object.mTriggerEventName, aao2, object.mTriggerTimeout, aao4, object.mTimeToLive, aao3);
        this.i().a((zz)object);
    }

    private final void e(AppMeasurement.ConditionalUserProperty object) {
        aao aao2;
        this.c();
        this.Q();
        ah.a(object);
        ah.a(object.mName);
        if (!this.p.B()) {
            this.t().D().a("Conditional property not cleared since Firebase Analytics is disabled");
            return;
        }
        afh afh2 = new afh(object.mName, 0L, null, null);
        try {
            aao2 = this.p().a(object.mExpiredEventName, object.mExpiredEventParams, object.mOrigin, object.mCreationTimestamp, true, false);
        }
        catch (IllegalArgumentException illegalArgumentException) {
            return;
        }
        object = new zz(object.mAppId, object.mOrigin, afh2, object.mCreationTimestamp, object.mActive, object.mTriggerEventName, null, object.mTriggerTimeout, null, object.mTimeToLive, aao2);
        this.i().a((zz)object);
    }

    public final void A() {
        this.s().a(new adr(this));
    }

    public final List<AppMeasurement.ConditionalUserProperty> a(String string2, String string3) {
        return this.b(null, string2, string3);
    }

    public final List<AppMeasurement.ConditionalUserProperty> a(String string2, String string3, String string4) {
        ah.a(string2);
        this.a();
        return this.b(string2, string3, string4);
    }

    public final Map<String, Object> a(String string2, String string3, String string4, boolean bl2) {
        ah.a(string2);
        this.a();
        return this.b(string2, string3, string4, bl2);
    }

    public final Map<String, Object> a(String string2, String string3, boolean bl2) {
        return this.b(null, string2, string3, bl2);
    }

    public final void a(long l2) {
        this.s().a(new adk(this, l2));
    }

    public final void a(AppMeasurement.ConditionalUserProperty conditionalUserProperty) {
        ah.a(conditionalUserProperty);
        conditionalUserProperty = new AppMeasurement.ConditionalUserProperty(conditionalUserProperty);
        if (!TextUtils.isEmpty((CharSequence)conditionalUserProperty.mAppId)) {
            this.t().A().a("Package name should be null when calling setConditionalUserProperty");
        }
        conditionalUserProperty.mAppId = null;
        this.c(conditionalUserProperty);
    }

    public final void a(AppMeasurement.b b2) {
        this.c();
        this.Q();
        if (b2 != null && b2 != this.b) {
            boolean bl2 = this.b == null;
            ah.a(bl2, (Object)"EventInterceptor already set.");
        }
        this.b = b2;
    }

    public final void a(AppMeasurement.c c2) {
        this.Q();
        ah.a(c2);
        if (!this.c.add(c2)) {
            this.t().A().a("OnEventListener already registered");
        }
    }

    final void a(String string2) {
        this.e.set(string2);
    }

    public final void a(String string2, String string3, Bundle bundle) {
        boolean bl2 = this.b == null || afk.h(string3);
        this.a(string2, string3, bundle, true, bl2, false, null);
    }

    public final void a(String string2, String string3, Bundle bundle, long l2) {
        this.a(string2, string3, l2, bundle, false, true, true, null);
    }

    public final void a(String string2, String string3, Bundle bundle, boolean bl2) {
        bl2 = this.b == null || afk.h(string3);
        this.a(string2, string3, bundle, true, bl2, true, null);
    }

    public final void a(String string2, String string3, Object object) {
        ah.a(string2);
        long l2 = this.k().a();
        int n2 = this.p().d(string3);
        int n3 = 0;
        int n4 = 0;
        if (n2 != 0) {
            this.p();
            string2 = afk.a(string3, 24, true);
            n3 = n4;
            if (string3 != null) {
                n3 = string3.length();
            }
            this.p.o().a(n2, "_ev", string2, n3);
            return;
        }
        if (object != null) {
            n4 = this.p().b(string3, object);
            if (n4 != 0) {
                this.p();
                string2 = afk.a(string3, 24, true);
                if (object instanceof String || object instanceof CharSequence) {
                    n3 = String.valueOf(object).length();
                }
                this.p.o().a(n4, "_ev", string2, n3);
                return;
            }
            object = this.p().c(string3, object);
            if (object != null) {
                this.a(string2, string3, l2, object);
            }
            return;
        }
        this.a(string2, string3, l2, null);
    }

    public final void a(String string2, String string3, String string4, Bundle bundle) {
        ah.a(string2);
        this.a();
        this.b(string2, string3, string4, bundle);
    }

    public final void a(boolean bl2) {
        this.Q();
        this.s().a(new adf(this, bl2));
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public final List<afh> b(boolean bl2) {
        abd abd2;
        Object object;
        this.Q();
        this.t().D().a("Fetching user attributes (FE)");
        if (this.s().z()) {
            abd2 = this.t().y();
            object = "Cannot get all user properties from analytics worker thread";
        } else {
            this.s();
            if (abx.y()) {
                abd2 = this.t().y();
                object = "Cannot get all user properties from main thread";
            } else {
                object = new AtomicReference();
                synchronized (object) {
                    this.p.h().a(new ado(this, (AtomicReference)object, bl2));
                    try {
                        object.wait(5000L);
                    }
                    catch (InterruptedException interruptedException) {
                        this.t().A().a("Interrupted waiting for get user properties", interruptedException);
                    }
                }
                object = (List)object.get();
                if (object != null) {
                    return object;
                }
                abd2 = this.t().A();
                object = "Timed out waiting for get user properties";
            }
        }
        abd2.a((String)object);
        return Collections.emptyList();
    }

    public final void b(long l2) {
        this.s().a(new adl(this, l2));
    }

    public final void b(AppMeasurement.ConditionalUserProperty conditionalUserProperty) {
        ah.a(conditionalUserProperty);
        ah.a(conditionalUserProperty.mAppId);
        this.a();
        this.c(new AppMeasurement.ConditionalUserProperty(conditionalUserProperty));
    }

    public final void b(AppMeasurement.c c2) {
        this.Q();
        ah.a(c2);
        if (!this.c.remove(c2)) {
            this.t().A().a("OnEventListener had not been registered");
        }
    }

    public final void b(String string2, String string3, Bundle bundle) {
        this.b(null, string2, string3, bundle);
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    final String c(long l2) {
        AtomicReference atomicReference = new AtomicReference();
        synchronized (atomicReference) {
            this.s().a(new adq(this, atomicReference));
            try {
                atomicReference.wait(l2);
            }
            catch (InterruptedException interruptedException) {}
            return (String)atomicReference.get();
            this.t().A().a("Interrupted waiting for app instance id");
            return null;
        }
    }

    @Override
    protected final boolean w() {
        return false;
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    public final e<String> y() {
        String string2;
        try {
            string2 = this.u().z();
            if (string2 == null) return h.a(this.s().A(), new adp(this));
        }
        catch (Exception exception) {
            this.t().A().a("Failed to schedule task for getAppInstanceId");
            return h.a(exception);
        }
        return h.a(string2);
    }

    public final String z() {
        return this.e.get();
    }
}

