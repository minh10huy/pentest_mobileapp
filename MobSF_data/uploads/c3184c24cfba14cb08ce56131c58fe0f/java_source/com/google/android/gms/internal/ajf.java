/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.content.Context
 *  android.os.Bundle
 *  android.os.RemoteException
 */
package com.google.android.gms.internal;

import android.content.Context;
import android.os.Bundle;
import android.os.RemoteException;
import com.google.android.gms.common.internal.ah;
import com.google.android.gms.common.util.f;
import com.google.android.gms.internal.ahy;
import com.google.android.gms.internal.aia;
import com.google.android.gms.internal.aic;
import com.google.android.gms.internal.aig;
import com.google.android.gms.internal.aiv;
import com.google.android.gms.internal.ajg;
import com.google.android.gms.internal.ajh;
import com.google.android.gms.internal.aji;
import com.google.android.gms.internal.ajj;
import com.google.android.gms.internal.ajm;
import com.google.android.gms.internal.aky;
import com.google.android.gms.internal.ala;
import com.google.android.gms.internal.alb;
import com.google.android.gms.internal.alc;
import com.google.android.gms.internal.amb;
import com.google.android.gms.internal.amc;
import com.google.android.gms.internal.amd;
import com.google.android.gms.internal.ame;
import com.google.android.gms.internal.amf;
import com.google.android.gms.internal.amg;
import com.google.android.gms.internal.amh;
import com.google.android.gms.internal.ami;
import com.google.android.gms.internal.amj;
import com.google.android.gms.internal.amk;
import com.google.android.gms.internal.aml;
import com.google.android.gms.internal.amm;
import com.google.android.gms.internal.amo;
import com.google.android.gms.internal.amp;
import com.google.android.gms.internal.amq;
import com.google.android.gms.internal.amr;
import com.google.android.gms.internal.ams;
import com.google.android.gms.internal.amt;
import com.google.android.gms.internal.amu;
import com.google.android.gms.internal.amv;
import com.google.android.gms.internal.amw;
import com.google.android.gms.internal.amx;
import com.google.android.gms.internal.amy;
import com.google.android.gms.internal.amz;
import com.google.android.gms.internal.ana;
import com.google.android.gms.internal.anb;
import com.google.android.gms.internal.anc;
import com.google.android.gms.internal.and;
import com.google.android.gms.internal.anf;
import com.google.android.gms.internal.ang;
import com.google.android.gms.internal.anh;
import com.google.android.gms.internal.ani;
import com.google.android.gms.internal.anj;
import com.google.android.gms.internal.ank;
import com.google.android.gms.internal.anl;
import com.google.android.gms.internal.anm;
import com.google.android.gms.internal.ann;
import com.google.android.gms.internal.anp;
import com.google.android.gms.internal.anq;
import com.google.android.gms.internal.anr;
import com.google.android.gms.internal.ans;
import com.google.android.gms.internal.ant;
import com.google.android.gms.internal.aok;
import com.google.android.gms.internal.aol;
import com.google.android.gms.internal.aom;
import com.google.android.gms.internal.aon;
import com.google.android.gms.internal.aoo;
import com.google.android.gms.internal.aoq;
import com.google.android.gms.internal.aor;
import com.google.android.gms.internal.aos;
import com.google.android.gms.internal.aot;
import com.google.android.gms.internal.aou;
import com.google.android.gms.internal.aov;
import com.google.android.gms.internal.aow;
import com.google.android.gms.internal.aox;
import com.google.android.gms.internal.aoy;
import com.google.android.gms.internal.aoz;
import com.google.android.gms.internal.apa;
import com.google.android.gms.internal.apb;
import com.google.android.gms.internal.apc;
import com.google.android.gms.internal.apd;
import com.google.android.gms.internal.ape;
import com.google.android.gms.internal.apf;
import com.google.android.gms.internal.apg;
import com.google.android.gms.internal.aph;
import com.google.android.gms.internal.api;
import com.google.android.gms.internal.apj;
import com.google.android.gms.internal.apk;
import com.google.android.gms.internal.apl;
import com.google.android.gms.internal.apm;
import com.google.android.gms.internal.apn;
import com.google.android.gms.internal.apo;
import com.google.android.gms.internal.app;
import com.google.android.gms.internal.apr;
import com.google.android.gms.internal.aps;
import com.google.android.gms.internal.apt;
import com.google.android.gms.internal.apu;
import com.google.android.gms.internal.apv;
import com.google.android.gms.internal.apw;
import com.google.android.gms.internal.apx;
import com.google.android.gms.internal.apy;
import com.google.android.gms.internal.apz;
import com.google.android.gms.internal.aqa;
import com.google.android.gms.internal.aqb;
import com.google.android.gms.internal.aqc;
import com.google.android.gms.internal.aqd;
import com.google.android.gms.internal.aqe;
import com.google.android.gms.internal.aqf;
import com.google.android.gms.internal.aqg;
import com.google.android.gms.internal.aqh;
import com.google.android.gms.internal.aqi;
import com.google.android.gms.internal.aqj;
import com.google.android.gms.internal.aql;
import com.google.android.gms.internal.aqm;
import com.google.android.gms.internal.aqn;
import com.google.android.gms.internal.aqo;
import com.google.android.gms.internal.aqp;
import com.google.android.gms.internal.aqq;
import com.google.android.gms.internal.arv;
import com.google.android.gms.internal.arx;
import com.google.android.gms.internal.asa;
import com.google.android.gms.internal.asd;
import com.google.android.gms.internal.asg;
import com.google.android.gms.internal.asj;
import com.google.android.gms.internal.asm;
import com.google.android.gms.internal.asn;
import com.google.android.gms.internal.aso;
import com.google.android.gms.internal.asp;
import com.google.android.gms.internal.asq;
import com.google.android.gms.internal.asu;
import com.google.android.gms.internal.asv;
import com.google.android.gms.internal.asw;
import com.google.android.gms.internal.asy;
import com.google.android.gms.internal.xo;
import com.google.android.gms.internal.xy;
import com.google.android.gms.tagmanager.h;
import com.google.android.gms.tagmanager.q;
import java.io.Serializable;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

public final class ajf {
    private final Context a;
    private final String b;
    private final arv c;
    private final q d;
    private final h e;
    private final ajm f = new ajm();
    private final asu g = new asu(new HashMap(50));
    private final asu h = new asu(new HashMap(10));
    private final Set<String> i = new HashSet<String>();
    private int j;
    private apf k;
    private aic l;
    private final ajj m = new ajg(this);

    public ajf(Context object, String object2, arv object3, asd object4, q q2, h h2) {
        ah.a(object3, (Object)"Internal Error: Container resource cannot be null");
        ah.a(object4, (Object)"Internal Error: Runtime resource cannot be null");
        ah.a((String)object2, (Object)"Internal Error: ContainerId cannot be empty");
        ah.a(q2);
        ah.a(h2);
        this.a = object;
        this.b = object2;
        this.c = object3;
        this.d = q2;
        this.e = h2;
        this.f.a("1", new aso(new amb()));
        this.f.a("12", new aso(new amc()));
        this.f.a("18", new aso(new amd()));
        this.f.a("19", new aso(new ame()));
        this.f.a("20", new aso(new amf()));
        this.f.a("21", new aso(new amg()));
        this.f.a("23", new aso(new amh()));
        this.f.a("24", new aso(new ami()));
        this.f.a("27", new aso(new amj()));
        this.f.a("28", new aso(new amk()));
        this.f.a("29", new aso(new aml()));
        this.f.a("30", new aso(new amm()));
        this.f.a("32", new aso(new amo()));
        this.f.a("33", new aso(new amo()));
        this.f.a("34", new aso(new amp()));
        this.f.a("35", new aso(new amp()));
        this.f.a("39", new aso(new amq()));
        this.f.a("40", new aso(new amr()));
        this.f.a("0", new aso(new anp()));
        this.f.a("10", new aso(new anq()));
        this.f.a("25", new aso(new anr()));
        this.f.a("26", new aso(new ans()));
        this.f.a("37", new aso(new ant()));
        this.f.a("2", new aso(new ams()));
        this.f.a("3", new aso(new amt()));
        this.f.a("4", new aso(new amu()));
        this.f.a("5", new aso(new amv()));
        this.f.a("6", new aso(new amw()));
        this.f.a("7", new aso(new amx()));
        this.f.a("8", new aso(new amy()));
        this.f.a("9", new aso(new amv()));
        this.f.a("13", new aso(new amz()));
        this.f.a("47", new aso(new ana()));
        this.f.a("15", new aso(new anb()));
        this.f.a("48", new aso(new anc(this)));
        object = new and();
        this.f.a("16", new aso((alb)object));
        this.f.a("17", new aso((alb)object));
        this.f.a("22", new aso(new anf()));
        this.f.a("45", new aso(new ang()));
        this.f.a("46", new aso(new anh()));
        this.f.a("36", new aso(new ani()));
        this.f.a("43", new aso(new anj()));
        this.f.a("38", new aso(new ank()));
        this.f.a("44", new aso(new anl()));
        this.f.a("41", new aso(new anm()));
        this.f.a("42", new aso(new ann()));
        this.a(xo.I, new aqd());
        this.a(xo.H, new aqe());
        this.a(xo.J, new aqf());
        this.a(xo.N, new aqg());
        this.a(xo.M, new aqh());
        this.a(xo.L, new aqi());
        this.a(xo.K, new aqj());
        this.a(xo.F, new aql());
        this.a(xo.G, new aqm());
        this.g.a("advertiserId", new aso(new aov(this.a)));
        this.g.a("advertiserTrackingEnabled", new aso(new aow(this.a)));
        this.g.a("adwordsClickReferrer", new aso(new aox(this.a, this.m)));
        this.g.a("applicationId", new aso(new aoy(this.a)));
        this.g.a("applicationName", new aso(new aoz(this.a)));
        this.g.a("applicationVersion", new aso(new apa(this.a)));
        this.g.a("applicationVersionName", new aso(new apb(this.a)));
        this.g.a("arbitraryPixieMacro", new aso(new aos(1, this.f)));
        this.g.a("carrier", new aso(new apc(this.a)));
        this.g.a("constant", new aso(new ani()));
        this.g.a("containerId", new aso(new apd(new asw(this.b))));
        this.g.a("containerVersion", new aso(new apd(new asw(this.c.b()))));
        this.g.a("customMacro", new aso(new aoq(new aji(this, null))));
        this.g.a("deviceBrand", new aso(new apg()));
        this.g.a("deviceId", new aso(new aph(this.a)));
        this.g.a("deviceModel", new aso(new api()));
        this.g.a("deviceName", new aso(new apj()));
        this.g.a("encode", new aso(new apk()));
        this.g.a("encrypt", new aso(new apl()));
        this.g.a("event", new aso(new ape()));
        this.g.a("eventParameters", new aso(new apm(this.m)));
        this.g.a("version", new aso(new apn()));
        this.g.a("hashcode", new aso(new apo()));
        this.g.a("installReferrer", new aso(new app(this.a)));
        this.g.a("join", new aso(new apr()));
        this.g.a("language", new aso(new aps()));
        this.g.a("locale", new aso(new apt()));
        this.g.a("adWordsUniqueId", new aso(new apv(this.a)));
        this.g.a("osVersion", new aso(new apw()));
        this.g.a("platform", new aso(new apx()));
        this.g.a("random", new aso(new apy()));
        this.g.a("regexGroup", new aso(new apz()));
        this.g.a("resolution", new aso(new aqb(this.a)));
        this.g.a("runtimeVersion", new aso(new aqa()));
        this.g.a("sdkVersion", new aso(new aqc()));
        this.k = new apf();
        this.g.a("currentTime", new aso(this.k));
        this.g.a("userProperty", new aso(new apu(this.a, this.m)));
        this.g.a("arbitraryPixel", new aso(new aqp(aia.a(this.a))));
        this.g.a("customTag", new aso(new aoq(new ajh(this, null))));
        this.g.a("universalAnalytics", new aso(new aqq(this.a, this.m)));
        this.g.a("queueRequest", new aso(new aqn(aia.a(this.a))));
        this.g.a("sendMeasurement", new aso(new aqo(this.d, this.m)));
        this.g.a("arbitraryPixieTag", new aso(new aos(0, this.f)));
        this.g.a("suppressPassthrough", new aso(new aou(this.a, this.m)));
        this.h.a("decodeURI", new aso(new aok()));
        this.h.a("decodeURIComponent", new aso(new aol()));
        this.h.a("encodeURI", new aso(new aom()));
        this.h.a("encodeURIComponent", new aso(new aon()));
        this.h.a("log", new aso(new aot()));
        this.h.a("isArray", new aso(new aoo()));
        this.a((asd)object4);
        object = new asu(new HashMap(1));
        object.a("mobile", this.g);
        object.a("common", this.h);
        this.f.a("gtmUtils", (asj<?>)object);
        object2 = new asu(new HashMap((Map)this.g.b()));
        object2.d();
        object3 = new asu(new HashMap((Map)this.h.b()));
        object3.d();
        if (this.f.a("main") && this.f.b("main") instanceof aso) {
            object4 = new ArrayList();
            object4.add(object);
            asy.a(this.f, new asv("main", (List<asj<?>>)object4));
        }
        this.g.a("base", (asj<?>)object2);
        this.h.a("base", (asj<?>)object3);
        object.d();
        this.g.d();
        this.h.d();
    }

    static /* synthetic */ aic a(ajf ajf2) {
        return ajf2.l;
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    private final asj<?> a(arx object) {
        this.i.clear();
        try {
            asj asj2 = this.b(this.a(object.a()));
            object = asj2;
            if (asj2 instanceof asm) return object;
            ahy.a("Predicate must return a boolean value", this.a);
            return new asm(false);
        }
        catch (IllegalStateException illegalStateException) {}
        aiv.a("Error evaluating predicate.");
        return asp.d;
    }

    private final asj<?> a(asa asj2, Map<arx, asj<?>> map) {
        asj<?> asj3 = String.valueOf(asj2);
        asj<?> asj4 = new StringBuilder(String.valueOf(asj3).length() + 19);
        asj4.append("Evaluating trigger ");
        asj4.append((String)((Object)asj3));
        aiv.d(asj4.toString());
        for (arx arx2 : asj2.b()) {
            asj4 = map.get(arx2);
            asj3 = asj4;
            if (asj4 == null) {
                asj3 = this.a(arx2);
                map.put(arx2, asj3);
            }
            if (asj3 == asp.d) {
                return asp.d;
            }
            if (!((Boolean)((asm)asj3).b()).booleanValue()) continue;
            return new asm(false);
        }
        for (arx arx3 : asj2.a()) {
            asj3 = map.get(arx3);
            asj2 = asj3;
            if (asj3 == null) {
                asj2 = this.a(arx3);
                map.put(arx3, asj2);
            }
            if (asj2 == asp.d) {
                return asp.d;
            }
            if (((Boolean)((asm)asj2).b()).booleanValue()) continue;
            return new asm(false);
        }
        return new asm(true);
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    private final asj<?> a(asg cloneable) {
        switch (cloneable.a()) {
            default: {
                int n2 = cloneable.a();
                cloneable = new StringBuilder(52);
                cloneable.append("Attempting to expand unknown Value type ");
                cloneable.append(n2);
                cloneable.append(".");
                throw new IllegalStateException(cloneable.toString());
            }
            case 8: {
                return new asm((Boolean)cloneable.b());
            }
            case 7: {
                StringBuilder stringBuilder = new StringBuilder();
                cloneable = ((List)cloneable.b()).iterator();
                while (cloneable.hasNext()) {
                    stringBuilder.append(alc.d(this.a((asg)cloneable.next())));
                }
                return new asw(stringBuilder.toString());
            }
            case 6: {
                return new asn(((Integer)cloneable.b()).doubleValue());
            }
            case 5: {
                return new asw((String)cloneable.b());
            }
            case 4: {
                asw asw2;
                asw asw3 = asw2 = this.b((String)cloneable.b());
                if (!(asw2 instanceof asw)) return asw3;
                asw3 = asw2;
                if (cloneable.c().isEmpty()) return asw3;
                return new asw(this.a((String)((asw)asw2).b(), cloneable.c()));
            }
            case 3: {
                Object object = (Map)cloneable.b();
                cloneable = new HashMap(object.size());
                object = object.entrySet().iterator();
                while (object.hasNext()) {
                    Map.Entry entry = (Map.Entry)object.next();
                    asj<?> asj2 = this.a((asg)entry.getKey());
                    asj<?> asj3 = this.a((asg)entry.getValue());
                    cloneable.put(alc.d(asj2), asj3);
                }
                return new asu((Map<String, asj<?>>)((Object)cloneable));
            }
            case 2: {
                Object object = (List)cloneable.b();
                cloneable = new ArrayList(object.size());
                object = object.iterator();
                while (object.hasNext()) {
                    cloneable.add(this.a((asg)object.next()));
                }
                return new asq((List<asj<?>>)((Object)cloneable));
            }
            case 1: 
        }
        try {
            return new asn(Double.parseDouble((String)cloneable.b()));
        }
        catch (NumberFormatException numberFormatException) {
            return new asw((String)cloneable.b());
        }
    }

    private final asv a(String string2, Map<String, asj<?>> object) {
        try {
            object = aky.a(string2, object, this.f);
            return object;
        }
        catch (RuntimeException runtimeException) {
            String string3 = runtimeException.getMessage();
            StringBuilder stringBuilder = new StringBuilder(String.valueOf(string2).length() + 30 + String.valueOf(string3).length());
            stringBuilder.append("Incorrect keys for function ");
            stringBuilder.append(string2);
            stringBuilder.append(". ");
            stringBuilder.append(string3);
            aiv.a(stringBuilder.toString());
            return null;
        }
    }

    private final String a(String string2, List<Integer> object) {
        object = object.iterator();
        while (object.hasNext()) {
            int n2 = (Integer)object.next();
            if (n2 != 12) {
                StringBuilder stringBuilder = new StringBuilder(39);
                stringBuilder.append("Unsupported Value Escaping: ");
                stringBuilder.append(n2);
                aiv.a(stringBuilder.toString());
                continue;
            }
            string2 = ajf.c(string2);
        }
        return string2;
    }

    private final Map<String, asj<?>> a(Map<String, asg> object) {
        HashMap hashMap = new HashMap();
        for (Map.Entry entry : object.entrySet()) {
            hashMap.put((String)entry.getKey(), this.a((asg)entry.getValue()));
        }
        return hashMap;
    }

    private final void a(asd object) {
        for (ala ala2 : object.a()) {
            ala2.a(this.f);
            this.f.a(ala2.a(), new aso(ala2));
        }
    }

    private final void a(xo object, alb alb2) {
        object = aky.a(object);
        this.g.a((String)object, new aso(alb2));
    }

    private final asj<?> b(String string2) {
        ++this.j;
        Object object = this.b();
        CharSequence charSequence = new StringBuilder(String.valueOf(object).length() + 31 + String.valueOf(string2).length());
        charSequence.append((String)object);
        charSequence.append("Beginning to evaluate variable ");
        charSequence.append(string2);
        aiv.d(charSequence.toString());
        if (!this.i.contains(string2)) {
            this.i.add(string2);
            object = this.c.a(string2);
            if (object != null) {
                object = this.b(this.a(object.a()));
                charSequence = this.b();
                StringBuilder stringBuilder = new StringBuilder(String.valueOf(charSequence).length() + 25 + String.valueOf(string2).length());
                stringBuilder.append((String)charSequence);
                stringBuilder.append("Done evaluating variable ");
                stringBuilder.append(string2);
                aiv.d(stringBuilder.toString());
                --this.j;
                this.i.remove(string2);
                return object;
            }
            --this.j;
            this.i.remove(string2);
            object = this.b();
            charSequence = new StringBuilder(String.valueOf(object).length() + 36 + String.valueOf(string2).length());
            charSequence.append((String)object);
            charSequence.append("Attempting to resolve unknown macro ");
            charSequence.append(string2);
            throw new IllegalStateException(charSequence.toString());
        }
        --this.j;
        object = this.i.toString();
        charSequence = new StringBuilder(String.valueOf(string2).length() + 77 + String.valueOf(object).length());
        charSequence.append("Macro cycle detected.  Current macro reference: ");
        charSequence.append(string2);
        charSequence.append(". Previous macro references: ");
        charSequence.append((String)object);
        throw new IllegalStateException(charSequence.toString());
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Lifted jumps to return sites
     */
    private final asj b(Map<String, asj<?>> var1_1) {
        block4 : {
            block7 : {
                block6 : {
                    block5 : {
                        block3 : {
                            if (var1_1 != null) break block3;
                            var1_1 = "executeFunctionCall: cannot access the function parameters.";
                            break block4;
                        }
                        var3_2 = (asj)var1_1.get(xy.q.toString());
                        if (var3_2 instanceof asw) break block5;
                        var1_1 = "No function id in properties";
                        break block4;
                    }
                    if (!this.f.a((String)(var3_2 = (String)((asw)var3_2).b()))) break block6;
                    var4_3 = new HashMap<K, V>();
                    for (Map.Entry<K, V> var5_4 : var1_1.entrySet()) {
                        if (!((String)var5_4.getKey()).startsWith("vtp_")) continue;
                        var4_3.put(((String)var5_4.getKey()).substring(4), (asj)var5_4.getValue());
                    }
                    var1_1 = new ArrayList<asu>();
                    var1_1.add(new asu((Map<String, asj<?>>)var4_3));
                    var1_1 = new asv((String)var3_2, (List<asj<?>>)var1_1);
                    break block7;
                }
                var4_3 = aky.a((String)var3_2);
                var2_5 = var4_3 != null && this.g.a((String)var4_3) != false;
                if (!var2_5) ** GOTO lbl38
                var1_1 = this.a((String)var3_2, (Map<String, asj<?>>)var1_1);
            }
            if (var1_1 == null) {
                var1_1 = "Internal error: failed to convert function to a valid statement";
            } else {
                var3_2 = String.valueOf(var1_1.d());
                var3_2 = var3_2.length() != 0 ? "Executing: ".concat((String)var3_2) : new String("Executing: ");
                aiv.d((String)var3_2);
                var1_1 = var3_2 = asy.a(this.f, (asv)var1_1);
                if (var3_2 instanceof asp == false) return var1_1;
                var4_3 = (asp)var3_2;
                var1_1 = var3_2;
                if (var4_3.d() == false) return var1_1;
                return (asj)var4_3.b();
lbl38: // 1 sources:
                var1_1 = new StringBuilder(String.valueOf(var3_2).length() + 30);
                var1_1.append("functionId '");
                var1_1.append((String)var3_2);
                var1_1.append("' is not supported");
                var1_1 = var1_1.toString();
            }
        }
        ahy.a((String)var1_1, this.a);
        return asp.e;
    }

    static /* synthetic */ h b(ajf ajf2) {
        return ajf2.e;
    }

    private final String b() {
        if (this.j <= 1) {
            return "";
        }
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append(Integer.toString(this.j));
        for (int i2 = 2; i2 < this.j; ++i2) {
            stringBuilder.append(' ');
        }
        stringBuilder.append(": ");
        return stringBuilder.toString();
    }

    private static String c(String string2) {
        try {
            String string3 = URLEncoder.encode(string2, "UTF-8").replaceAll("\\+", "%20");
            return string3;
        }
        catch (UnsupportedEncodingException unsupportedEncodingException) {
            aiv.a("Escape URI: unsupported encoding", unsupportedEncodingException);
            return string2;
        }
    }

    public final asj<?> a(String string2) {
        if (!this.i.contains(string2)) {
            this.j = 0;
            return this.b(string2);
        }
        String string3 = this.i.toString();
        StringBuilder stringBuilder = new StringBuilder(String.valueOf(string2).length() + 77 + String.valueOf(string3).length());
        stringBuilder.append("Macro cycle detected.  Current macro reference: ");
        stringBuilder.append(string2);
        stringBuilder.append(". Previous macro references: ");
        stringBuilder.append(string3);
        throw new IllegalStateException(stringBuilder.toString());
    }

    public final void a() {
        aia.a(this.a).a();
    }

    /*
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    public final void a(aic object) {
        Object object4;
        Object object3;
        Object object2;
        this.f.a("gtm.globals.eventName", new asw(object.d()));
        this.k.a((f)object);
        this.l = object;
        Serializable serializable = new HashSet();
        HashSet<arx> hashSet = new HashSet<arx>();
        HashMap hashMap = new HashMap();
        for (asa asa2 : this.c.a()) {
            if (asa2.c().isEmpty() && asa2.d().isEmpty()) {
                object2 = String.valueOf(asa2);
                object4 = new StringBuilder(String.valueOf(object2).length() + 64);
                object4.append("Trigger is not being evaluated since it has no associated tags: ");
                object4.append((String)object2);
                aiv.d(object4.toString());
                continue;
            }
            object2 = this.a(asa2, hashMap);
            if (object2 == asp.d) {
                object2 = String.valueOf(asa2);
                object4 = new StringBuilder(String.valueOf(object2).length() + 41);
                object4.append("Error encounted while evaluating trigger ");
                object4.append((String)object2);
                ahy.b(object4.toString(), this.a);
                if (asa2.d().isEmpty()) continue;
                object2 = String.valueOf(asa2.d());
                object3 = new StringBuilder(String.valueOf(object2).length() + 15);
                object4 = "Blocking tags: ";
            } else {
                if (!((Boolean)((asm)object2).b()).booleanValue()) continue;
                object2 = String.valueOf(asa2);
                object4 = new StringBuilder(String.valueOf(object2).length() + 19);
                object4.append("Trigger is firing: ");
                object4.append((String)object2);
                aiv.d(object4.toString());
                if (!asa2.c().isEmpty()) {
                    object2 = String.valueOf(asa2.c());
                    object4 = new StringBuilder(String.valueOf(object2).length() + 34);
                    object4.append("Adding tags to firing candidates: ");
                    object4.append((String)object2);
                    aiv.d(object4.toString());
                    serializable.addAll(asa2.c());
                }
                if (asa2.d().isEmpty()) continue;
                object2 = String.valueOf(asa2.d());
                object3 = new StringBuilder(String.valueOf(object2).length() + 24);
                object4 = "Blocking disabled tags: ";
            }
            object3.append((String)object4);
            object3.append((String)object2);
            aiv.d(object3.toString());
            hashSet.addAll(asa2.d());
        }
        serializable.removeAll(hashSet);
        object4 = serializable.iterator();
        boolean bl2 = false;
        while (object4.hasNext()) {
            block14 : {
                boolean bl3;
                object3 = (arx)object4.next();
                this.i.clear();
                object2 = String.valueOf(object3);
                serializable = new StringBuilder(String.valueOf(object2).length() + 21);
                serializable.append("Executing firing tag ");
                serializable.append((String)object2);
                aiv.d(serializable.toString());
                this.b(this.a(object3.a()));
                object2 = object3.a().get(xy.l.toString());
                boolean bl4 = object2 != null && object2.a() == 8 && (bl3 = ((Boolean)object2.b()).booleanValue());
                if (!bl4) continue;
                try {
                    object2 = String.valueOf(object3);
                    serializable = new StringBuilder(String.valueOf(object2).length() + 36);
                    serializable.append("Tag configured to dispatch on fire: ");
                    serializable.append((String)object2);
                    aiv.d(serializable.toString());
                    bl2 = true;
                    continue;
                }
                catch (IllegalStateException illegalStateException) {
                    bl2 = true;
                    break block14;
                }
                catch (IllegalStateException illegalStateException) {
                    // empty catch block
                }
            }
            object3 = String.valueOf(object3);
            serializable = new StringBuilder(String.valueOf(object3).length() + 19);
            serializable.append("Error firing tag ");
            serializable.append((String)object3);
            serializable.append(": ");
            ahy.a(serializable.toString(), (Throwable)object2, this.a);
        }
        this.f.c("gtm.globals.eventName");
        if (object.h()) {
            object2 = object.d();
            object4 = new StringBuilder(String.valueOf(object2).length() + 35);
            object4.append("Log passthrough event ");
            object4.append((String)object2);
            object4.append(" to Firebase.");
            aiv.d(object4.toString());
            try {
                this.d.a(object.f(), object.d(), object.e(), object.a());
            }
            catch (RemoteException remoteException) {
                ahy.a("Error calling measurement proxy: ", (Throwable)remoteException, this.a);
            }
        } else {
            object = object.d();
            object2 = new StringBuilder(String.valueOf(object).length() + 63);
            object2.append("Non-passthrough event ");
            object2.append((String)object);
            object2.append(" doesn't get logged to Firebase directly.");
            aiv.d(object2.toString());
        }
        if (!bl2) return;
        aiv.d("Dispatch called for dispatchOnFire tags.");
        this.a();
    }
}

