/*
 * Decompiled with CFR 0_132.
 */
package com.google.android.gms.internal;

import com.google.android.gms.internal.bja;
import com.google.android.gms.internal.bjc;
import com.google.android.gms.internal.bjd;
import com.google.android.gms.internal.bjf;

final class bjg
extends bjd {
    bjg() {
    }

    private static int a(byte[] arrby, int n2, long l2, int n3) {
        switch (n3) {
            default: {
                throw new AssertionError();
            }
            case 2: {
                return bjc.a(n2, (int)bja.a(arrby, l2), (int)bja.a(arrby, l2 + 1L));
            }
            case 1: {
                return bjc.a(n2, bja.a(arrby, l2));
            }
            case 0: 
        }
        return bjc.a(n2);
    }

    private static int a(byte[] arrby, long l2, int n2) {
        int n3;
        long l3;
        block16 : {
            if (n2 < 16) {
                n3 = 0;
            } else {
                l3 = l2;
                n3 = 0;
                while (n3 < n2) {
                    if (bja.a(arrby, l3) >= 0) {
                        ++n3;
                        ++l3;
                        continue;
                    }
                    break block16;
                }
                n3 = n2;
            }
        }
        n2 -= n3;
        l2 += (long)n3;
        do {
            int n4;
            long l4;
            block17 : {
                n4 = 0;
                n3 = n2;
                n2 = n4;
                while (n3 > 0) {
                    l4 = l2 + 1L;
                    n4 = bja.a(arrby, l2);
                    l3 = l4;
                    n2 = n4;
                    if (n4 >= 0) {
                        --n3;
                        n2 = n4;
                        l2 = l4;
                        continue;
                    }
                    break block17;
                }
                l3 = l2;
            }
            if (n3 == 0) {
                return 0;
            }
            --n3;
            if (n2 < -32) {
                if (n3 == 0) {
                    return n2;
                }
                --n3;
                if (n2 >= -62) {
                    l2 = l3 + 1L;
                    n2 = n3;
                    if (bja.a(arrby, l3) <= -65) continue;
                }
                return -1;
            }
            if (n2 < -16) {
                if (n3 < 2) {
                    return bjg.a(arrby, n2, l3, n3);
                }
                n3 -= 2;
                l4 = l3 + 1L;
                n4 = bja.a(arrby, l3);
                if (!(n4 > -65 || n2 == -32 && n4 < -96 || n2 == -19 && n4 >= -96)) {
                    l2 = l4 + 1L;
                    n2 = n3;
                    if (bja.a(arrby, l4) <= -65) continue;
                }
                return -1;
            }
            if (n3 < 3) {
                return bjg.a(arrby, n2, l3, n3);
            }
            n3 -= 3;
            l2 = l3 + 1L;
            n4 = bja.a(arrby, l3);
            if (n4 > -65 || (n2 << 28) + (n4 + 112) >> 30 != 0) break;
            l3 = l2 + 1L;
            if (bja.a(arrby, l2) > -65) break;
            if (bja.a(arrby, l3) > -65) {
                return -1;
            }
            l2 = l3 + 1L;
            n2 = n3;
        } while (true);
        return -1;
    }

    @Override
    final int a(int n2, byte[] arrby, int n3, int n4) {
        if ((n3 | n4 | arrby.length - n4) >= 0) {
            long l2 = n3;
            return bjg.a(arrby, l2, (int)((long)n4 - l2));
        }
        throw new ArrayIndexOutOfBoundsException(String.format("Array length=%d, index=%d, limit=%d", arrby.length, n3, n4));
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Lifted jumps to return sites
     */
    @Override
    final int a(CharSequence var1_1, byte[] var2_2, int var3_3, int var4_4) {
        block13 : {
            var10_5 = var3_3;
            var12_6 = (long)var4_4 + var10_5;
            var7_7 = var1_1.length();
            if (var7_7 <= var4_4 && var2_2.length - var4_4 >= var3_3) {
                for (var4_4 = 0; var4_4 < var7_7 && (var3_3 = (int)var1_1.charAt(var4_4)) < 128; ++var4_4, var10_5 = 1L + var10_5) {
                    bja.a(var2_2, var10_5, (byte)var3_3);
                }
                var3_3 = var4_4;
                var8_8 = var10_5;
                if (var4_4 == var7_7) {
                    return (int)var10_5;
                }
            } else {
                var5_10 = var1_1.charAt(var7_7 - 1);
                var1_1 = new StringBuilder(37);
                var1_1.append("Failed writing ");
                var1_1.append(var5_10);
                var1_1.append(" at index ");
                var1_1.append(var3_3 + var4_4);
                throw new ArrayIndexOutOfBoundsException(var1_1.toString());
            }
            while (var3_3 < var7_7) {
                block14 : {
                    var5_9 = var1_1.charAt(var3_3);
                    if (var5_9 >= '?' || var8_8 >= var12_6) break block14;
                    var10_5 = var8_8 + 1L;
                    var4_4 = var5_9;
                    ** GOTO lbl40
                }
                if (var5_9 < '\u0800' && var8_8 <= var12_6 - 2L) {
                    var10_5 = var8_8 + 1L;
                    bja.a(var2_2, var8_8, (byte)(var5_9 >>> 6 | 960));
                    var8_8 = var10_5 + 1L;
                    bja.a(var2_2, var10_5, (byte)(var5_9 & 63 | 128));
                } else if ((var5_9 < '\ud800' || '\udfff' < var5_9) && var8_8 <= var12_6 - 3L) {
                    var10_5 = var8_8 + 1L;
                    bja.a(var2_2, var8_8, (byte)(var5_9 >>> 12 | 480));
                    var8_8 = var10_5 + 1L;
                    bja.a(var2_2, var10_5, (byte)(var5_9 >>> 6 & 63 | 128));
                    var10_5 = var8_8 + 1L;
                    var4_4 = var5_9 & 63 | 128;
lbl40: // 2 sources:
                    bja.a(var2_2, var8_8, (byte)var4_4);
                    var8_8 = var10_5;
                } else {
                    if (var8_8 > var12_6 - 4L) break block13;
                    var4_4 = var3_3 + 1;
                    if (var4_4 == var7_7) throw new bjf(var3_3 - 1, var7_7);
                    var6_11 = var1_1.charAt(var4_4);
                    var3_3 = var4_4;
                    if (Character.isSurrogatePair(var5_9, var6_11) == false) throw new bjf(var3_3 - 1, var7_7);
                    var3_3 = Character.toCodePoint(var5_9, var6_11);
                    var10_5 = var8_8 + 1L;
                    bja.a(var2_2, var8_8, (byte)(var3_3 >>> 18 | 240));
                    var8_8 = var10_5 + 1L;
                    bja.a(var2_2, var10_5, (byte)(var3_3 >>> 12 & 63 | 128));
                    var10_5 = var8_8 + 1L;
                    bja.a(var2_2, var8_8, (byte)(var3_3 >>> 6 & 63 | 128));
                    var8_8 = var10_5 + 1L;
                    bja.a(var2_2, var10_5, (byte)(var3_3 & 63 | 128));
                    var3_3 = var4_4;
                }
                ++var3_3;
            }
            return (int)var8_8;
        }
        if ('\ud800' <= var5_9 && var5_9 <= '\udfff') {
            var4_4 = var3_3 + 1;
            if (var4_4 == var7_7) throw new bjf(var3_3, var7_7);
            if (!Character.isSurrogatePair(var5_9, var1_1.charAt(var4_4))) {
                throw new bjf(var3_3, var7_7);
            }
        }
        var1_1 = new StringBuilder(46);
        var1_1.append("Failed writing ");
        var1_1.append(var5_9);
        var1_1.append(" at index ");
        var1_1.append(var8_8);
        throw new ArrayIndexOutOfBoundsException(var1_1.toString());
    }
}

