/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.content.Context
 *  android.database.Cursor
 *  android.database.sqlite.SQLiteDatabase
 *  android.database.sqlite.SQLiteDatabase$CursorFactory
 *  android.database.sqlite.SQLiteException
 *  android.database.sqlite.SQLiteOpenHelper
 *  android.os.Build
 *  android.os.Build$VERSION
 */
package com.google.android.gms.internal;

import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteException;
import android.database.sqlite.SQLiteOpenHelper;
import android.os.Build;
import com.google.android.gms.internal.aie;
import com.google.android.gms.internal.aiy;
import java.io.File;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;

final class aja
extends SQLiteOpenHelper {
    private boolean a;
    private long b;
    private /* synthetic */ aiy c;

    aja(aiy aiy2, Context context, String string2) {
        this.c = aiy2;
        super(context, string2, null, 1);
        this.b = 0L;
    }

    private static void a(SQLiteDatabase object, String string2, List<String> object2) {
        int n2;
        String[] arrstring;
        CharSequence charSequence = new StringBuilder(String.valueOf(string2).length() + 22);
        charSequence.append("SELECT * FROM ");
        charSequence.append(string2);
        charSequence.append(" WHERE 0");
        charSequence = object.rawQuery(charSequence.toString(), null);
        object = new HashSet();
        try {
            arrstring = charSequence.getColumnNames();
            n2 = 0;
        }
        catch (Throwable throwable) {
            charSequence.close();
            throw throwable;
        }
        do {
            if (n2 >= arrstring.length) break;
            object.add(arrstring[n2]);
            ++n2;
        } while (true);
        charSequence.close();
        object2 = object2.iterator();
        while (object2.hasNext()) {
            charSequence = (String)object2.next();
            if (object.remove(charSequence)) continue;
            throw new SQLiteException(String.format("Database column %s missing in table %s.", charSequence, string2));
        }
        if (object.isEmpty()) {
            return;
        }
        throw new SQLiteException(String.format("Database has extra columns in table %s.", string2));
    }

    /*
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    private static boolean a(String string2, SQLiteDatabase sQLiteDatabase) {
        void var1_5;
        block6 : {
            boolean bl2;
            Object var3_7 = null;
            string2 = sQLiteDatabase.query("SQLITE_MASTER", new String[]{"name"}, "name=?", new String[]{string2}, null, null, null);
            try {
                bl2 = string2.moveToFirst();
                if (string2 == null) return bl2;
            }
            catch (Throwable throwable) {
                break block6;
            }
            string2.close();
            return bl2;
            catch (Throwable throwable) {
                string2 = var3_7;
            }
        }
        if (string2 == null) throw var1_5;
        string2.close();
        throw var1_5;
        catch (SQLiteException sQLiteException) {
            return false;
        }
        catch (SQLiteException sQLiteException) {}
        if (string2 == null) return false;
        string2.close();
        return false;
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public final SQLiteDatabase getWritableDatabase() {
        SQLiteDatabase sQLiteDatabase;
        SQLiteDatabase sQLiteDatabase2;
        block4 : {
            if (this.a && this.b + 3600000L > aiy.a(this.c).a()) {
                throw new SQLiteException("Database creation failed");
            }
            sQLiteDatabase = null;
            this.a = true;
            this.b = aiy.a(this.c).a();
            try {
                sQLiteDatabase = sQLiteDatabase2 = super.getWritableDatabase();
                break block4;
            }
            catch (SQLiteException sQLiteException) {}
            aiy.c(this.c).getDatabasePath(aiy.b(this.c)).delete();
        }
        sQLiteDatabase2 = sQLiteDatabase;
        if (sQLiteDatabase == null) {
            sQLiteDatabase2 = super.getWritableDatabase();
        }
        this.a = false;
        return sQLiteDatabase2;
    }

    public final void onCreate(SQLiteDatabase object) {
        object = object.getPath();
        if (aie.a() >= 9) {
            object = new File((String)object);
            object.setReadable(false, false);
            object.setWritable(false, false);
            object.setReadable(true, true);
            object.setWritable(true, true);
        }
    }

    public final void onDowngrade(SQLiteDatabase sQLiteDatabase, int n2, int n3) {
    }

    public final void onOpen(SQLiteDatabase sQLiteDatabase) {
        if (Build.VERSION.SDK_INT < 15) {
            Cursor cursor = sQLiteDatabase.rawQuery("PRAGMA journal_mode=memory", null);
            try {
                cursor.moveToFirst();
            }
            finally {
                cursor.close();
            }
        }
        if (!aja.a("gtm_hit_unique_ids", sQLiteDatabase)) {
            sQLiteDatabase.execSQL(aiy.b());
        } else {
            aja.a(sQLiteDatabase, "gtm_hit_unique_ids", Arrays.asList("hit_unique_id"));
        }
        if (!aja.a("gtm_hits", sQLiteDatabase)) {
            sQLiteDatabase.execSQL(aiy.c());
        } else {
            aja.a(sQLiteDatabase, "gtm_hits", Arrays.asList("hit_id", "hit_url", "hit_time", "hit_first_send_time", "hit_method", "hit_unique_id", "hit_headers", "hit_body"));
        }
        sQLiteDatabase.execSQL(aiy.d());
        sQLiteDatabase.execSQL(aiy.e());
    }

    public final void onUpgrade(SQLiteDatabase sQLiteDatabase, int n2, int n3) {
    }
}

