/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.annotation.TargetApi
 *  android.app.Activity
 *  android.app.Application
 *  android.app.Application$ActivityLifecycleCallbacks
 *  android.app.KeyguardManager
 *  android.content.BroadcastReceiver
 *  android.content.Context
 *  android.content.IntentFilter
 *  android.content.res.Resources
 *  android.graphics.Rect
 *  android.os.Bundle
 *  android.os.Handler
 *  android.os.PowerManager
 *  android.util.DisplayMetrics
 *  android.view.Display
 *  android.view.View
 *  android.view.View$OnAttachStateChangeListener
 *  android.view.ViewTreeObserver
 *  android.view.ViewTreeObserver$OnGlobalLayoutListener
 *  android.view.ViewTreeObserver$OnScrollChangedListener
 *  android.view.Window
 *  android.view.WindowManager
 */
package com.google.android.gms.internal;

import android.annotation.TargetApi;
import android.app.Activity;
import android.app.Application;
import android.app.KeyguardManager;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.IntentFilter;
import android.content.res.Resources;
import android.graphics.Rect;
import android.os.Bundle;
import android.os.Handler;
import android.os.PowerManager;
import android.util.DisplayMetrics;
import android.view.Display;
import android.view.View;
import android.view.ViewTreeObserver;
import android.view.Window;
import android.view.WindowManager;
import com.google.android.gms.ads.internal.av;
import com.google.android.gms.internal.ak;
import com.google.android.gms.internal.bly;
import com.google.android.gms.internal.blz;
import com.google.android.gms.internal.bma;
import com.google.android.gms.internal.bmb;
import com.google.android.gms.internal.bmc;
import com.google.android.gms.internal.bqj;
import com.google.android.gms.internal.bsz;
import com.google.android.gms.internal.btk;
import com.google.android.gms.internal.he;
import com.google.android.gms.internal.hs;
import com.google.android.gms.internal.jp;
import java.lang.ref.WeakReference;
import java.util.HashSet;
import java.util.Iterator;

@ak
@TargetApi(value=14)
public final class blx
implements Application.ActivityLifecycleCallbacks,
View.OnAttachStateChangeListener,
ViewTreeObserver.OnGlobalLayoutListener,
ViewTreeObserver.OnScrollChangedListener {
    private static final long a;
    private final Context b;
    private Application c;
    private final WindowManager d;
    private final PowerManager e;
    private final KeyguardManager f;
    private BroadcastReceiver g;
    private WeakReference<ViewTreeObserver> h;
    private WeakReference<View> i;
    private bmc j;
    private jp k = new jp(a);
    private boolean l = false;
    private int m = -1;
    private final HashSet<bmb> n = new HashSet();
    private final DisplayMetrics o;
    private final Rect p;

    static {
        bsz<Long> bsz2 = btk.bf;
        a = bqj.f().a(bsz2);
    }

    public blx(Context object, View view) {
        this.b = object.getApplicationContext();
        this.d = (WindowManager)object.getSystemService("window");
        this.e = (PowerManager)this.b.getSystemService("power");
        this.f = (KeyguardManager)object.getSystemService("keyguard");
        if (this.b instanceof Application) {
            this.c = (Application)this.b;
            this.j = new bmc((Application)this.b, this);
        }
        this.o = object.getResources().getDisplayMetrics();
        this.p = new Rect();
        this.p.right = this.d.getDefaultDisplay().getWidth();
        this.p.bottom = this.d.getDefaultDisplay().getHeight();
        object = this.i != null ? this.i.get() : null;
        if (object != null) {
            object.removeOnAttachStateChangeListener((View.OnAttachStateChangeListener)this);
            this.b((View)object);
        }
        this.i = new WeakReference<View>(view);
        if (view != null) {
            if (av.g().a(view)) {
                this.a(view);
            }
            view.addOnAttachStateChangeListener((View.OnAttachStateChangeListener)this);
        }
    }

    private final Rect a(Rect rect) {
        return new Rect(this.b(rect.left), this.b(rect.top), this.b(rect.right), this.b(rect.bottom));
    }

    private final void a(int n2) {
        boolean bl2;
        boolean bl3;
        if (this.n.size() == 0) {
            return;
        }
        if (this.i == null) {
            return;
        }
        Object object = this.i.get();
        boolean bl4 = n2 == 1;
        boolean bl5 = object == null;
        Object object2 = new Rect();
        Rect rect = new Rect();
        Rect rect2 = new Rect();
        Rect rect3 = new Rect();
        int[] arrn = new int[2];
        int[] arrn2 = new int[2];
        if (object != null) {
            bl3 = object.getGlobalVisibleRect(rect);
            bl2 = object.getLocalVisibleRect(rect2);
            object.getHitRect(rect3);
            try {
                object.getLocationOnScreen(arrn);
                object.getLocationInWindow(arrn2);
            }
            catch (Exception exception) {
                he.b("Failure getting view location.", exception);
            }
            object2.left = arrn[0];
            object2.top = arrn[1];
            object2.right = object2.left + object.getWidth();
            object2.bottom = object2.top + object.getHeight();
        } else {
            bl3 = false;
            bl2 = false;
        }
        int n3 = object != null ? object.getWindowVisibility() : 8;
        if (this.m != -1) {
            n3 = this.m;
        }
        boolean bl6 = !bl5 && av.e().a((View)object, this.e, this.f) && bl3 && bl2 && n3 == 0;
        if (bl4 && !this.k.a() && bl6 == this.l) {
            return;
        }
        if (!bl6 && !this.l && n2 == 1) {
            return;
        }
        long l2 = av.l().b();
        boolean bl7 = this.e.isScreenOn();
        boolean bl8 = object != null ? av.g().a((View)object) : false;
        n2 = object != null ? object.getWindowVisibility() : 8;
        object = new bma(l2, bl7, bl8, n2, this.a(this.p), this.a((Rect)object2), this.a(rect), bl3, this.a(rect2), bl2, this.a(rect3), this.o.density, bl6);
        object2 = this.n.iterator();
        while (object2.hasNext()) {
            ((bmb)object2.next()).a((bma)object);
        }
        this.l = bl6;
    }

    private final void a(Activity activity, int n2) {
        if (this.i == null) {
            return;
        }
        if ((activity = activity.getWindow()) == null) {
            return;
        }
        activity = activity.peekDecorView();
        View view = this.i.get();
        if (view != null && activity != null && view.getRootView() == activity.getRootView()) {
            this.m = n2;
        }
    }

    private final void a(View view) {
        if ((view = view.getViewTreeObserver()).isAlive()) {
            this.h = new WeakReference<View>(view);
            view.addOnScrollChangedListener((ViewTreeObserver.OnScrollChangedListener)this);
            view.addOnGlobalLayoutListener((ViewTreeObserver.OnGlobalLayoutListener)this);
        }
        if (this.g == null) {
            view = new IntentFilter();
            view.addAction("android.intent.action.SCREEN_ON");
            view.addAction("android.intent.action.SCREEN_OFF");
            view.addAction("android.intent.action.USER_PRESENT");
            this.g = new blz(this);
            av.D().a(this.b, this.g, (IntentFilter)view);
        }
        if (this.c != null) {
            try {
                this.c.registerActivityLifecycleCallbacks((Application.ActivityLifecycleCallbacks)this.j);
                return;
            }
            catch (Exception exception) {
                he.b("Error registering activity lifecycle callbacks.", exception);
            }
        }
    }

    static /* synthetic */ void a(blx blx2, int n2) {
        blx2.a(3);
    }

    private final int b(int n2) {
        float f2 = this.o.density;
        return (int)((float)n2 / f2);
    }

    private final void b() {
        av.e();
        hs.a.post((Runnable)new bly(this));
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    private final void b(View view) {
        try {
            if (this.h != null) {
                ViewTreeObserver viewTreeObserver = this.h.get();
                if (viewTreeObserver != null && viewTreeObserver.isAlive()) {
                    viewTreeObserver.removeOnScrollChangedListener((ViewTreeObserver.OnScrollChangedListener)this);
                    viewTreeObserver.removeGlobalOnLayoutListener((ViewTreeObserver.OnGlobalLayoutListener)this);
                }
                this.h = null;
            }
        }
        catch (Exception exception) {
            he.b("Error while unregistering listeners from the last ViewTreeObserver.", exception);
        }
        try {
            view = view.getViewTreeObserver();
            if (view.isAlive()) {
                view.removeOnScrollChangedListener((ViewTreeObserver.OnScrollChangedListener)this);
                view.removeGlobalOnLayoutListener((ViewTreeObserver.OnGlobalLayoutListener)this);
            }
        }
        catch (Exception exception) {
            he.b("Error while unregistering listeners from the ViewTreeObserver.", exception);
        }
        if (this.g != null) {
            try {
                av.D().a(this.b, this.g);
            }
            catch (Exception exception) {
                av.i().a(exception, "ActiveViewUnit.stopScreenStatusMonitoring");
            }
            catch (IllegalStateException illegalStateException) {
                he.b("Failed trying to unregister the receiver", illegalStateException);
            }
            this.g = null;
        }
        if (this.c != null) {
            try {
                this.c.unregisterActivityLifecycleCallbacks((Application.ActivityLifecycleCallbacks)this.j);
                return;
            }
            catch (Exception exception) {
                he.b("Error registering activity lifecycle callbacks.", exception);
            }
        }
    }

    public final void a() {
        this.a(4);
    }

    public final void a(bmb bmb2) {
        this.n.add(bmb2);
        this.a(3);
    }

    public final void b(bmb bmb2) {
        this.n.remove(bmb2);
    }

    public final void onActivityCreated(Activity activity, Bundle bundle) {
        this.a(activity, 0);
        this.a(3);
        this.b();
    }

    public final void onActivityDestroyed(Activity activity) {
        this.a(3);
        this.b();
    }

    public final void onActivityPaused(Activity activity) {
        this.a(activity, 4);
        this.a(3);
        this.b();
    }

    public final void onActivityResumed(Activity activity) {
        this.a(activity, 0);
        this.a(3);
        this.b();
    }

    public final void onActivitySaveInstanceState(Activity activity, Bundle bundle) {
        this.a(3);
        this.b();
    }

    public final void onActivityStarted(Activity activity) {
        this.a(activity, 0);
        this.a(3);
        this.b();
    }

    public final void onActivityStopped(Activity activity) {
        this.a(3);
        this.b();
    }

    public final void onGlobalLayout() {
        this.a(2);
        this.b();
    }

    public final void onScrollChanged() {
        this.a(1);
    }

    public final void onViewAttachedToWindow(View view) {
        this.m = -1;
        this.a(view);
        this.a(3);
    }

    public final void onViewDetachedFromWindow(View view) {
        this.m = -1;
        this.a(3);
        this.b();
        this.b(view);
    }
}

