/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.net.Uri
 *  android.os.Parcel
 *  android.os.Parcelable
 *  android.os.Parcelable$Creator
 *  org.json.JSONException
 *  org.json.JSONObject
 */
package com.google.android.gms.common.a;

import android.net.Uri;
import android.os.Parcel;
import android.os.Parcelable;
import com.google.android.gms.common.a.b;
import com.google.android.gms.common.internal.ae;
import com.google.android.gms.internal.wz;
import com.google.android.gms.internal.xc;
import java.util.Arrays;
import java.util.Locale;
import org.json.JSONException;
import org.json.JSONObject;

public final class a
extends wz {
    public static final Parcelable.Creator<a> CREATOR = new b();
    private int a;
    private final Uri b;
    private final int c;
    private final int d;

    a(int n2, Uri uri, int n3, int n4) {
        this.a = n2;
        this.b = uri;
        this.c = n3;
        this.d = n4;
    }

    public a(Uri uri, int n2, int n3) {
        this(1, uri, n2, n3);
        if (uri != null) {
            if (n2 >= 0 && n3 >= 0) {
                return;
            }
            throw new IllegalArgumentException("width and height must not be negative");
        }
        throw new IllegalArgumentException("url cannot be null");
    }

    public a(JSONObject jSONObject) {
        this(a.a(jSONObject), jSONObject.optInt("width", 0), jSONObject.optInt("height", 0));
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    private static Uri a(JSONObject jSONObject) {
        if (!jSONObject.has("url")) return null;
        try {
            return Uri.parse((String)jSONObject.getString("url"));
        }
        catch (JSONException jSONException) {
            return null;
        }
    }

    public final Uri a() {
        return this.b;
    }

    public final int b() {
        return this.c;
    }

    public final int c() {
        return this.d;
    }

    public final JSONObject d() {
        JSONObject jSONObject = new JSONObject();
        try {
            jSONObject.put("url", (Object)this.b.toString());
            jSONObject.put("width", this.c);
            jSONObject.put("height", this.d);
            return jSONObject;
        }
        catch (JSONException jSONException) {
            return jSONObject;
        }
    }

    public final boolean equals(Object object) {
        if (this == object) {
            return true;
        }
        if (object != null) {
            if (!(object instanceof a)) {
                return false;
            }
            object = (a)object;
            if (ae.a((Object)this.b, (Object)object.b) && this.c == object.c && this.d == object.d) {
                return true;
            }
        }
        return false;
    }

    public final int hashCode() {
        return Arrays.hashCode(new Object[]{this.b, this.c, this.d});
    }

    public final String toString() {
        return String.format(Locale.US, "Image %dx%d %s", this.c, this.d, this.b.toString());
    }

    public final void writeToParcel(Parcel parcel, int n2) {
        int n3 = xc.a(parcel);
        xc.a(parcel, 1, this.a);
        xc.a(parcel, 2, (Parcelable)this.a(), n2, false);
        xc.a(parcel, 3, this.b());
        xc.a(parcel, 4, this.c());
        xc.a(parcel, n3);
    }
}

