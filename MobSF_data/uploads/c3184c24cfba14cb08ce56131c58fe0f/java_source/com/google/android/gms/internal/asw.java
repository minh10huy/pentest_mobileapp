/*
 * Decompiled with CFR 0_132.
 */
package com.google.android.gms.internal;

import com.google.android.gms.common.internal.ah;
import com.google.android.gms.internal.alb;
import com.google.android.gms.internal.ald;
import com.google.android.gms.internal.ane;
import com.google.android.gms.internal.anu;
import com.google.android.gms.internal.anv;
import com.google.android.gms.internal.anw;
import com.google.android.gms.internal.anx;
import com.google.android.gms.internal.any;
import com.google.android.gms.internal.anz;
import com.google.android.gms.internal.aoa;
import com.google.android.gms.internal.aob;
import com.google.android.gms.internal.aoc;
import com.google.android.gms.internal.aod;
import com.google.android.gms.internal.aoe;
import com.google.android.gms.internal.aof;
import com.google.android.gms.internal.aog;
import com.google.android.gms.internal.aoh;
import com.google.android.gms.internal.aoi;
import com.google.android.gms.internal.aoj;
import com.google.android.gms.internal.asj;
import com.google.android.gms.internal.asp;
import com.google.android.gms.internal.asx;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

public final class asw
extends asj<String> {
    private static final Map<String, alb> c;
    private final String b;

    static {
        HashMap<String, ald> hashMap = new HashMap<String, ald>();
        hashMap.put("charAt", new anu());
        hashMap.put("concat", new anv());
        hashMap.put("hasOwnProperty", ane.a);
        hashMap.put("indexOf", new anw());
        hashMap.put("lastIndexOf", new anx());
        hashMap.put("match", new any());
        hashMap.put("replace", new anz());
        hashMap.put("search", new aoa());
        hashMap.put("slice", new aob());
        hashMap.put("split", new aoc());
        hashMap.put("substring", new aod());
        hashMap.put("toLocaleLowerCase", new aoe());
        hashMap.put("toLocaleUpperCase", new aof());
        hashMap.put("toLowerCase", new aog());
        hashMap.put("toUpperCase", new aoi());
        hashMap.put("toString", new aoh());
        hashMap.put("trim", new aoj());
        c = Collections.unmodifiableMap(hashMap);
    }

    public asw(String string2) {
        ah.a(string2);
        this.b = string2;
    }

    static /* synthetic */ String a(asw asw2) {
        return asw2.b;
    }

    public final asj<?> a(int n2) {
        if (n2 >= 0 && n2 < this.b.length()) {
            return new asw(String.valueOf(this.b.charAt(n2)));
        }
        return asp.e;
    }

    @Override
    public final Iterator<asj<?>> a() {
        return new asx(this);
    }

    @Override
    public final /* synthetic */ Object b() {
        return this.b;
    }

    @Override
    public final boolean c(String string2) {
        return c.containsKey(string2);
    }

    @Override
    public final alb d(String string2) {
        if (this.c(string2)) {
            return c.get(string2);
        }
        StringBuilder stringBuilder = new StringBuilder(String.valueOf(string2).length() + 51);
        stringBuilder.append("Native Method ");
        stringBuilder.append(string2);
        stringBuilder.append(" is not defined for type ListWrapper.");
        throw new IllegalStateException(stringBuilder.toString());
    }

    public final boolean equals(Object object) {
        if (this == object) {
            return true;
        }
        if (object instanceof asw) {
            return this.b.equals((String)((asw)object).b());
        }
        return false;
    }

    @Override
    public final String toString() {
        return this.b.toString();
    }
}

