/*
 * Decompiled with CFR 0_132.
 */
package com.google.android.gms.internal;

import com.google.android.gms.internal.bgt;
import com.google.android.gms.internal.bil;
import com.google.android.gms.internal.bim;
import com.google.android.gms.internal.bip;
import com.google.android.gms.internal.bir;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.NavigableMap;
import java.util.Set;
import java.util.SortedMap;
import java.util.TreeMap;

class bik<K extends Comparable<K>, V>
extends AbstractMap<K, V> {
    private final int a;
    private List<bip> b;
    private Map<K, V> c;
    private boolean d;
    private volatile bir e;
    private Map<K, V> f;

    private bik(int n2) {
        this.a = n2;
        this.b = Collections.emptyList();
        this.c = Collections.emptyMap();
        this.f = Collections.emptyMap();
    }

    /* synthetic */ bik(int n2, bil bil2) {
        this(n2);
    }

    private final int a(K k2) {
        int n2;
        int n3 = this.b.size() - 1;
        if (n3 >= 0) {
            n2 = k2.compareTo((Comparable)((Comparable)this.b.get(n3).getKey()));
            if (n2 > 0) {
                return - n3 + 2;
            }
            if (n2 == 0) {
                return n3;
            }
        }
        n2 = 0;
        while (n2 <= n3) {
            int n4 = (n2 + n3) / 2;
            int n5 = k2.compareTo((Comparable)((Comparable)this.b.get(n4).getKey()));
            if (n5 < 0) {
                n3 = n4 - 1;
                continue;
            }
            if (n5 > 0) {
                n2 = n4 + 1;
                continue;
            }
            return n4;
        }
        return - n2 + 1;
    }

    static <FieldDescriptorType extends bgt<FieldDescriptorType>> bik<FieldDescriptorType, Object> a(int n2) {
        return new bil(n2);
    }

    static /* synthetic */ Object a(bik bik2, int n2) {
        return bik2.c(n2);
    }

    static /* synthetic */ void a(bik bik2) {
        bik2.e();
    }

    static /* synthetic */ List b(bik bik2) {
        return bik2.b;
    }

    private final V c(int n2) {
        this.e();
        Object v2 = this.b.remove(n2).getValue();
        if (!this.c.isEmpty()) {
            Iterator<Map.Entry<K, V>> iterator = this.f().entrySet().iterator();
            this.b.add(new bip(this, iterator.next()));
            iterator.remove();
        }
        return v2;
    }

    static /* synthetic */ Map c(bik bik2) {
        return bik2.c;
    }

    private final void e() {
        if (!this.d) {
            return;
        }
        throw new UnsupportedOperationException();
    }

    private final SortedMap<K, V> f() {
        this.e();
        if (this.c.isEmpty() && !(this.c instanceof TreeMap)) {
            this.c = new TreeMap();
            this.f = ((TreeMap)this.c).descendingMap();
        }
        return (SortedMap)this.c;
    }

    public final V a(K k2, V v2) {
        this.e();
        int n2 = this.a(k2);
        if (n2 >= 0) {
            return this.b.get(n2).setValue(v2);
        }
        this.e();
        if (this.b.isEmpty() && !(this.b instanceof ArrayList)) {
            this.b = new ArrayList<bip>(this.a);
        }
        if ((n2 = - n2 + 1) >= this.a) {
            return this.f().put(k2, v2);
        }
        if (this.b.size() == this.a) {
            bip bip2 = this.b.remove(this.a - 1);
            this.f().put((Comparable)bip2.getKey(), bip2.getValue());
        }
        this.b.add(n2, new bip(this, k2, v2));
        return null;
    }

    public void a() {
        if (!this.d) {
            Map map = this.c.isEmpty() ? Collections.emptyMap() : Collections.unmodifiableMap(this.c);
            this.c = map;
            map = this.f.isEmpty() ? Collections.emptyMap() : Collections.unmodifiableMap(this.f);
            this.f = map;
            this.d = true;
        }
    }

    public final Map.Entry<K, V> b(int n2) {
        return this.b.get(n2);
    }

    public final boolean b() {
        return this.d;
    }

    public final int c() {
        return this.b.size();
    }

    @Override
    public void clear() {
        this.e();
        if (!this.b.isEmpty()) {
            this.b.clear();
        }
        if (!this.c.isEmpty()) {
            this.c.clear();
        }
    }

    @Override
    public boolean containsKey(Object object) {
        if (this.a(object = (Comparable)object) < 0 && !this.c.containsKey(object)) {
            return false;
        }
        return true;
    }

    public final Iterable<Map.Entry<K, V>> d() {
        if (this.c.isEmpty()) {
            return bim.a();
        }
        return this.c.entrySet();
    }

    @Override
    public Set<Map.Entry<K, V>> entrySet() {
        if (this.e == null) {
            this.e = new bir(this, null);
        }
        return this.e;
    }

    @Override
    public boolean equals(Object object) {
        if (this == object) {
            return true;
        }
        if (!(object instanceof bik)) {
            return super.equals(object);
        }
        object = (bik)object;
        int n2 = this.size();
        if (n2 != object.size()) {
            return false;
        }
        int n3 = this.c();
        if (n3 != object.c()) {
            return this.entrySet().equals(object.entrySet());
        }
        for (int i2 = 0; i2 < n3; ++i2) {
            if (this.b(i2).equals(object.b(i2))) continue;
            return false;
        }
        if (n3 != n2) {
            return this.c.equals(object.c);
        }
        return true;
    }

    @Override
    public V get(Object object) {
        int n2 = this.a(object = (Comparable)object);
        if (n2 >= 0) {
            return this.b.get(n2).getValue();
        }
        return this.c.get(object);
    }

    @Override
    public int hashCode() {
        int n2;
        int n3 = this.c();
        int n4 = 0;
        for (n2 = 0; n2 < n3; ++n2) {
            n4 += this.b.get(n2).hashCode();
        }
        n2 = n4;
        if (this.c.size() > 0) {
            n2 = n4 + this.c.hashCode();
        }
        return n2;
    }

    @Override
    public /* synthetic */ Object put(Object object, Object object2) {
        return this.a((Comparable)object, object2);
    }

    @Override
    public V remove(Object object) {
        this.e();
        object = (Comparable)object;
        int n2 = this.a(object);
        if (n2 >= 0) {
            return this.c(n2);
        }
        if (this.c.isEmpty()) {
            return null;
        }
        return this.c.remove(object);
    }

    @Override
    public int size() {
        return this.b.size() + this.c.size();
    }
}

