/*
 * Decompiled with CFR 0_132.
 */
package com.google.android.gms.internal;

import com.google.android.gms.internal.ayn;
import com.google.android.gms.internal.ayo;
import com.google.android.gms.internal.ayq;
import com.google.android.gms.internal.ayr;
import com.google.android.gms.internal.ays;
import com.google.android.gms.internal.ayt;
import com.google.android.gms.internal.ayu;
import com.google.android.gms.internal.ayv;
import com.google.android.gms.internal.aze;
import java.security.GeneralSecurityException;
import java.security.KeyFactory;
import java.security.KeyPairGenerator;
import java.security.MessageDigest;
import java.security.Provider;
import java.security.Security;
import java.security.Signature;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.crypto.Cipher;
import javax.crypto.KeyAgreement;
import javax.crypto.Mac;

public final class aym<T_WRAPPER extends ayn<T_ENGINE>, T_ENGINE> {
    public static final aym<ayo, Cipher> a;
    public static final aym<ayt, Mac> b;
    public static final aym<ayq, KeyAgreement> c;
    public static final aym<ays, KeyPairGenerator> d;
    public static final aym<ayr, KeyFactory> e;
    private static final Logger f;
    private static final List<Provider> g;
    private static aym<ayv, Signature> h;
    private static aym<ayu, MessageDigest> i;
    private T_WRAPPER j;
    private List<Provider> k;
    private boolean l;

    static {
        f = Logger.getLogger(aym.class.getName());
        if (aze.a()) {
            ArrayList<Provider> arrayList = new ArrayList<Provider>();
            for (int i2 = 0; i2 < 2; ++i2) {
                String string2 = new String[]{"GmsCore_OpenSSL", "AndroidOpenSSL"}[i2];
                Provider provider = Security.getProvider(string2);
                if (provider != null) {
                    arrayList.add(provider);
                    continue;
                }
                f.logp(Level.INFO, "com.google.crypto.tink.subtle.EngineFactory", "toProviderList", String.format("Provider %s not available", string2));
            }
            g = arrayList;
        } else {
            g = new ArrayList<Provider>();
        }
        a = new aym<ayo, T_ENGINE>(new ayo());
        b = new aym<ayt, T_ENGINE>(new ayt());
        h = new aym<ayv, T_ENGINE>(new ayv());
        i = new aym<ayu, T_ENGINE>(new ayu());
        c = new aym<ayq, T_ENGINE>(new ayq());
        d = new aym<ays, T_ENGINE>(new ays());
        e = new aym<ayr, T_ENGINE>(new ayr());
    }

    private aym(T_WRAPPER T_WRAPPER) {
        this.j = T_WRAPPER;
        this.k = g;
        this.l = true;
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    private final boolean a(String string2, Provider provider) {
        try {
            this.j.a(string2, provider);
            return true;
        }
        catch (Exception exception) {
            return false;
        }
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    public final T_ENGINE a(String string2) {
        void var2_4;
        Provider provider2;
        for (Provider provider2 : this.k) {
            if (!this.a(string2, provider2)) continue;
            T_WRAPPER T_WRAPPER = this.j;
            do {
                return (T_ENGINE)var2_4.a(string2, provider2);
                break;
            } while (true);
        }
        if (!this.l) throw new GeneralSecurityException("No good Provider found.");
        T_WRAPPER T_WRAPPER = this.j;
        provider2 = null;
        return (T_ENGINE)var2_4.a(string2, provider2);
    }
}

