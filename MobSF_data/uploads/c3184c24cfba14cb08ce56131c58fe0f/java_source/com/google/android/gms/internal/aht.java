/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.os.Bundle
 *  android.os.RemoteException
 */
package com.google.android.gms.internal;

import android.os.Bundle;
import android.os.RemoteException;
import com.google.android.gms.internal.aho;
import com.google.android.gms.internal.ahy;
import com.google.android.gms.internal.aic;
import com.google.android.gms.internal.aiv;

final class aht
implements Runnable {
    private final aic a;
    private /* synthetic */ aho b;

    public aht(aho aho2, aic aic2) {
        this.b = aho2;
        this.a = aic2;
    }

    @Override
    public final void run() {
        if (aho.a(this.b) == 2) {
            String string2 = String.valueOf(this.a.d());
            string2 = string2.length() != 0 ? "Evaluating tags for event ".concat(string2) : new String("Evaluating tags for event ");
            aiv.d(string2);
            aho.b(this.b).a(this.a);
            return;
        }
        if (aho.a(this.b) == 1) {
            aho.i(this.b).add(this.a);
            String string3 = this.a.d();
            StringBuilder stringBuilder = new StringBuilder(String.valueOf(string3).length() + 30);
            stringBuilder.append("Added event ");
            stringBuilder.append(string3);
            stringBuilder.append(" to pending queue.");
            aiv.d(stringBuilder.toString());
            return;
        }
        if (aho.a(this.b) == 3) {
            String string4 = this.a.d();
            StringBuilder stringBuilder = new StringBuilder(String.valueOf(string4).length() + 61);
            stringBuilder.append("Failed to evaluate tags for event ");
            stringBuilder.append(string4);
            stringBuilder.append(" (container failed to load)");
            aiv.d(stringBuilder.toString());
            if (this.a.h()) {
                try {
                    aho.j(this.b).a("app", this.a.d(), this.a.e(), this.a.a());
                    string4 = this.a.d();
                    stringBuilder = new StringBuilder(String.valueOf(string4).length() + 38);
                    stringBuilder.append("Logged passthrough event ");
                    stringBuilder.append(string4);
                    stringBuilder.append(" to Firebase.");
                    aiv.d(stringBuilder.toString());
                    return;
                }
                catch (RemoteException remoteException) {
                    ahy.a("Error logging event with measurement proxy:", (Throwable)remoteException, aho.k(this.b));
                    return;
                }
            }
            string4 = String.valueOf(this.a.d());
            string4 = string4.length() != 0 ? "Discarded non-passthrough event ".concat(string4) : new String("Discarded non-passthrough event ");
            aiv.d(string4);
        }
    }
}

