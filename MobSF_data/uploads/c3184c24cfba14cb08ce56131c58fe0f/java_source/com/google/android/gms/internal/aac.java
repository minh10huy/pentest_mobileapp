/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.content.ContentValues
 *  android.content.Context
 *  android.database.Cursor
 *  android.database.sqlite.SQLiteDatabase
 *  android.database.sqlite.SQLiteException
 *  android.os.Parcelable
 *  android.os.Parcelable$Creator
 *  android.text.TextUtils
 *  android.util.Pair
 */
package com.google.android.gms.internal;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteException;
import android.os.Parcelable;
import android.support.v4.g.a;
import android.text.TextUtils;
import android.util.Pair;
import com.google.android.gms.common.internal.ah;
import com.google.android.gms.common.util.f;
import com.google.android.gms.internal.aab;
import com.google.android.gms.internal.aad;
import com.google.android.gms.internal.aaf;
import com.google.android.gms.internal.aaj;
import com.google.android.gms.internal.aak;
import com.google.android.gms.internal.aao;
import com.google.android.gms.internal.aaq;
import com.google.android.gms.internal.aas;
import com.google.android.gms.internal.aaz;
import com.google.android.gms.internal.abb;
import com.google.android.gms.internal.abd;
import com.google.android.gms.internal.abm;
import com.google.android.gms.internal.abp;
import com.google.android.gms.internal.acc;
import com.google.android.gms.internal.adc;
import com.google.android.gms.internal.afe;
import com.google.android.gms.internal.afh;
import com.google.android.gms.internal.afj;
import com.google.android.gms.internal.afk;
import com.google.android.gms.internal.afn;
import com.google.android.gms.internal.afo;
import com.google.android.gms.internal.afr;
import com.google.android.gms.internal.afy;
import com.google.android.gms.internal.agb;
import com.google.android.gms.internal.agc;
import com.google.android.gms.internal.bjp;
import com.google.android.gms.internal.bjq;
import com.google.android.gms.internal.bjs;
import com.google.android.gms.internal.bjy;
import com.google.android.gms.internal.zv;
import com.google.android.gms.internal.zz;
import java.io.File;
import java.io.IOException;
import java.io.Serializable;
import java.security.MessageDigest;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

final class aac
extends adc {
    private static final String[] a = new String[]{"last_bundled_timestamp", "ALTER TABLE events ADD COLUMN last_bundled_timestamp INTEGER;", "last_sampled_complex_event_id", "ALTER TABLE events ADD COLUMN last_sampled_complex_event_id INTEGER;", "last_sampling_rate", "ALTER TABLE events ADD COLUMN last_sampling_rate INTEGER;", "last_exempt_from_sampling", "ALTER TABLE events ADD COLUMN last_exempt_from_sampling INTEGER;"};
    private static final String[] b = new String[]{"origin", "ALTER TABLE user_attributes ADD COLUMN origin TEXT;"};
    private static final String[] c = new String[]{"app_version", "ALTER TABLE apps ADD COLUMN app_version TEXT;", "app_store", "ALTER TABLE apps ADD COLUMN app_store TEXT;", "gmp_version", "ALTER TABLE apps ADD COLUMN gmp_version INTEGER;", "dev_cert_hash", "ALTER TABLE apps ADD COLUMN dev_cert_hash INTEGER;", "measurement_enabled", "ALTER TABLE apps ADD COLUMN measurement_enabled INTEGER;", "last_bundle_start_timestamp", "ALTER TABLE apps ADD COLUMN last_bundle_start_timestamp INTEGER;", "day", "ALTER TABLE apps ADD COLUMN day INTEGER;", "daily_public_events_count", "ALTER TABLE apps ADD COLUMN daily_public_events_count INTEGER;", "daily_events_count", "ALTER TABLE apps ADD COLUMN daily_events_count INTEGER;", "daily_conversions_count", "ALTER TABLE apps ADD COLUMN daily_conversions_count INTEGER;", "remote_config", "ALTER TABLE apps ADD COLUMN remote_config BLOB;", "config_fetched_time", "ALTER TABLE apps ADD COLUMN config_fetched_time INTEGER;", "failed_config_fetch_time", "ALTER TABLE apps ADD COLUMN failed_config_fetch_time INTEGER;", "app_version_int", "ALTER TABLE apps ADD COLUMN app_version_int INTEGER;", "firebase_instance_id", "ALTER TABLE apps ADD COLUMN firebase_instance_id TEXT;", "daily_error_events_count", "ALTER TABLE apps ADD COLUMN daily_error_events_count INTEGER;", "daily_realtime_events_count", "ALTER TABLE apps ADD COLUMN daily_realtime_events_count INTEGER;", "health_monitor_sample", "ALTER TABLE apps ADD COLUMN health_monitor_sample TEXT;", "android_id", "ALTER TABLE apps ADD COLUMN android_id INTEGER;", "adid_reporting_enabled", "ALTER TABLE apps ADD COLUMN adid_reporting_enabled INTEGER;"};
    private static final String[] d = new String[]{"realtime", "ALTER TABLE raw_events ADD COLUMN realtime INTEGER;"};
    private static final String[] e = new String[]{"has_realtime", "ALTER TABLE queue ADD COLUMN has_realtime INTEGER;"};
    private static final String[] f = new String[]{"previous_install_count", "ALTER TABLE app2 ADD COLUMN previous_install_count INTEGER;"};
    private final aaf g = new aaf(this, this.l(), "google_app_measurement.db");
    private final afe h = new afe(this.k());

    aac(acc acc2) {
        super(acc2);
    }

    static /* synthetic */ String[] J() {
        return a;
    }

    static /* synthetic */ String[] K() {
        return b;
    }

    static /* synthetic */ String[] L() {
        return c;
    }

    static /* synthetic */ String[] M() {
        return e;
    }

    static /* synthetic */ String[] N() {
        return d;
    }

    static /* synthetic */ String[] O() {
        return f;
    }

    private final boolean T() {
        return this.l().getDatabasePath("google_app_measurement.db").exists();
    }

    /*
     * WARNING - Removed back jump from a try to a catch block - possible behaviour change.
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    private final long a(String string2, String[] cursor, long l2) {
        void var1_4;
        Cursor cursor2;
        block8 : {
            block9 : {
                Object var7_11;
                block7 : {
                    SQLiteDatabase sQLiteDatabase = this.A();
                    var7_11 = null;
                    cursor2 = null;
                    cursor = sQLiteDatabase.rawQuery(string2, (String[])cursor);
                    try {
                        if (!cursor.moveToFirst()) break block7;
                        l2 = cursor.getLong(0);
                        if (cursor == null) return l2;
                    }
                    catch (Throwable throwable) {
                        cursor2 = cursor;
                        break block8;
                    }
                    catch (SQLiteException sQLiteException) {
                        break block9;
                    }
                    cursor.close();
                    return l2;
                }
                if (cursor == null) return l2;
                cursor.close();
                return l2;
                catch (Throwable throwable) {
                    break block8;
                }
                catch (SQLiteException sQLiteException) {
                    cursor = var7_11;
                }
            }
            cursor2 = cursor;
            {
                void var6_10;
                this.t().y().a("Database error", string2, var6_10);
                cursor2 = cursor;
                throw var6_10;
            }
        }
        if (cursor2 == null) throw var1_4;
        cursor2.close();
        throw var1_4;
    }

    static /* synthetic */ afe a(aac aac2) {
        return aac2.h;
    }

    private final Object a(Cursor cursor, int n2) {
        int n3 = cursor.getType(n2);
        switch (n3) {
            default: {
                this.t().y().a("Loaded invalid unknown value type, ignoring it", n3);
                return null;
            }
            case 4: {
                this.t().y().a("Loaded invalid blob type value, ignoring it");
                return null;
            }
            case 3: {
                return cursor.getString(n2);
            }
            case 2: {
                return cursor.getDouble(n2);
            }
            case 1: {
                return cursor.getLong(n2);
            }
            case 0: 
        }
        this.t().y().a("Loaded invalid null value from database");
        return null;
    }

    private static Set<String> a(SQLiteDatabase sQLiteDatabase, String string2) {
        HashSet<String> hashSet = new HashSet<String>();
        StringBuilder stringBuilder = new StringBuilder(String.valueOf(string2).length() + 22);
        stringBuilder.append("SELECT * FROM ");
        stringBuilder.append(string2);
        stringBuilder.append(" LIMIT 0");
        sQLiteDatabase = sQLiteDatabase.rawQuery(stringBuilder.toString(), null);
        try {
            Collections.addAll(hashSet, sQLiteDatabase.getColumnNames());
            return hashSet;
        }
        finally {
            sQLiteDatabase.close();
        }
    }

    private static void a(ContentValues contentValues, String string2, Object object) {
        ah.a(string2);
        ah.a(object);
        if (object instanceof String) {
            contentValues.put(string2, (String)object);
            return;
        }
        if (object instanceof Long) {
            contentValues.put(string2, (Long)object);
            return;
        }
        if (object instanceof Double) {
            contentValues.put(string2, (Double)object);
            return;
        }
        throw new IllegalArgumentException("Invalid value type");
    }

    static void a(abb abb2, SQLiteDatabase object) {
        if (abb2 != null) {
            if (!(object = new File(object.getPath())).setReadable(false, false)) {
                abb2.A().a("Failed to turn off database read permission");
            }
            if (!object.setWritable(false, false)) {
                abb2.A().a("Failed to turn off database write permission");
            }
            if (!object.setReadable(true, true)) {
                abb2.A().a("Failed to turn on database read permission for owner");
            }
            if (!object.setWritable(true, true)) {
                abb2.A().a("Failed to turn on database write permission for owner");
            }
            return;
        }
        throw new IllegalArgumentException("Monitor must not be null");
    }

    static void a(abb abb2, SQLiteDatabase sQLiteDatabase, String string2, String string3, String string4, String[] arrstring) {
        if (abb2 != null) {
            if (!aac.a(abb2, sQLiteDatabase, string2)) {
                sQLiteDatabase.execSQL(string3);
            }
            try {
                aac.a(abb2, sQLiteDatabase, string2, string4, arrstring);
                return;
            }
            catch (SQLiteException sQLiteException) {
                abb2.y().a("Failed to verify columns on table that was just created", string2);
                throw sQLiteException;
            }
        }
        throw new IllegalArgumentException("Monitor must not be null");
    }

    private static void a(abb object, SQLiteDatabase sQLiteDatabase, String string2, String string3, String[] arrstring) {
        if (object != null) {
            int n2;
            Set<String> set = aac.a(sQLiteDatabase, string2);
            String[] arrstring2 = string3.split(",");
            int n3 = arrstring2.length;
            int n4 = 0;
            for (n2 = 0; n2 < n3; ++n2) {
                string3 = arrstring2[n2];
                if (set.remove(string3)) {
                    continue;
                }
                object = new StringBuilder(String.valueOf(string2).length() + 35 + String.valueOf(string3).length());
                object.append("Table ");
                object.append(string2);
                object.append(" is missing required column: ");
                object.append(string3);
                throw new SQLiteException(object.toString());
            }
            if (arrstring != null) {
                for (n2 = n4; n2 < arrstring.length; n2 += 2) {
                    if (set.remove(arrstring[n2])) continue;
                    sQLiteDatabase.execSQL(arrstring[n2 + 1]);
                }
            }
            if (!set.isEmpty()) {
                object.A().a("Table has extra columns. table, columns", string2, TextUtils.join((CharSequence)", ", set));
            }
            return;
        }
        throw new IllegalArgumentException("Monitor must not be null");
    }

    /*
     * WARNING - Removed back jump from a try to a catch block - possible behaviour change.
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    private static boolean a(abb abb2, SQLiteDatabase sQLiteDatabase, String string2) {
        void var0_3;
        SQLiteDatabase sQLiteDatabase2;
        block7 : {
            block8 : {
                boolean bl2;
                if (abb2 == null) throw new IllegalArgumentException("Monitor must not be null");
                Object var6_6 = null;
                sQLiteDatabase2 = null;
                sQLiteDatabase = sQLiteDatabase.query("SQLITE_MASTER", new String[]{"name"}, "name=?", new String[]{string2}, null, null, null);
                try {
                    bl2 = sQLiteDatabase.moveToFirst();
                    if (sQLiteDatabase == null) return bl2;
                }
                catch (Throwable throwable) {
                    sQLiteDatabase2 = sQLiteDatabase;
                    break block7;
                }
                catch (SQLiteException sQLiteException) {
                    break block8;
                }
                sQLiteDatabase.close();
                return bl2;
                catch (Throwable throwable) {
                    break block7;
                }
                catch (SQLiteException sQLiteException) {
                    sQLiteDatabase = var6_6;
                }
            }
            sQLiteDatabase2 = sQLiteDatabase;
            {
                void var5_11;
                abb2.A().a("Error querying for table", string2, var5_11);
                if (sQLiteDatabase == null) return false;
            }
            sQLiteDatabase.close();
            return false;
        }
        if (sQLiteDatabase2 == null) throw var0_3;
        sQLiteDatabase2.close();
        throw var0_3;
    }

    private final boolean a(String string2, int n2, afo afo2) {
        bjq bjq2;
        byte[] arrby;
        this.Q();
        this.c();
        ah.a(string2);
        ah.a(afo2);
        if (TextUtils.isEmpty((CharSequence)afo2.b)) {
            this.t().A().a("Event filter had no event name. Audience definition ignored. appId, audienceId, filterId", abb.a(string2), n2, String.valueOf(afo2.a));
            return false;
        }
        try {
            arrby = new byte[afo2.f()];
            bjq2 = bjq.a(arrby, 0, arrby.length);
            afo2.a(bjq2);
            bjq2.a();
        }
        catch (IOException iOException) {
            this.t().y().a("Configuration loss. Failed to serialize event filter. appId", abb.a(string2), iOException);
            return false;
        }
        bjq2 = new ContentValues();
        bjq2.put("app_id", string2);
        bjq2.put("audience_id", Integer.valueOf(n2));
        bjq2.put("filter_id", afo2.a);
        bjq2.put("event_name", afo2.b);
        bjq2.put("data", arrby);
        try {
            if (this.A().insertWithOnConflict("event_filters", null, (ContentValues)bjq2, 5) == -1L) {
                this.t().y().a("Failed to insert event filter (got -1). appId", abb.a(string2));
            }
            return true;
        }
        catch (SQLiteException sQLiteException) {
            this.t().y().a("Error storing event filter. appId", abb.a(string2), (Object)sQLiteException);
            return false;
        }
    }

    private final boolean a(String string2, int n2, afr afr2) {
        bjq bjq2;
        byte[] arrby;
        this.Q();
        this.c();
        ah.a(string2);
        ah.a(afr2);
        if (TextUtils.isEmpty((CharSequence)afr2.b)) {
            this.t().A().a("Property filter had no property name. Audience definition ignored. appId, audienceId, filterId", abb.a(string2), n2, String.valueOf(afr2.a));
            return false;
        }
        try {
            arrby = new byte[afr2.f()];
            bjq2 = bjq.a(arrby, 0, arrby.length);
            afr2.a(bjq2);
            bjq2.a();
        }
        catch (IOException iOException) {
            this.t().y().a("Configuration loss. Failed to serialize property filter. appId", abb.a(string2), iOException);
            return false;
        }
        bjq2 = new ContentValues();
        bjq2.put("app_id", string2);
        bjq2.put("audience_id", Integer.valueOf(n2));
        bjq2.put("filter_id", afr2.a);
        bjq2.put("property_name", afr2.b);
        bjq2.put("data", arrby);
        try {
            if (this.A().insertWithOnConflict("property_filters", null, (ContentValues)bjq2, 5) == -1L) {
                this.t().y().a("Failed to insert property filter (got -1). appId", abb.a(string2));
                return false;
            }
            return true;
        }
        catch (SQLiteException sQLiteException) {
            this.t().y().a("Error storing property filter. appId", abb.a(string2), (Object)sQLiteException);
            return false;
        }
    }

    private final boolean a(String string2, List<Integer> object) {
        long l2;
        ah.a(string2);
        this.Q();
        this.c();
        SQLiteDatabase sQLiteDatabase = this.A();
        try {
            l2 = this.b("select count(1) from audience_filter_values where app_id=?", new String[]{string2});
        }
        catch (SQLiteException sQLiteException) {
            this.t().y().a("Database error querying filters. appId", abb.a(string2), (Object)sQLiteException);
            return false;
        }
        int n2 = Math.max(0, Math.min(2000, this.v().b(string2, aaq.L)));
        if (l2 <= (long)n2) {
            return false;
        }
        Serializable serializable = new ArrayList<String>();
        for (int i2 = 0; i2 < object.size(); ++i2) {
            Integer n3 = object.get(i2);
            if (n3 != null) {
                if (!(n3 instanceof Integer)) {
                    return false;
                }
                serializable.add(Integer.toString(n3));
                continue;
            }
            return false;
        }
        object = TextUtils.join((CharSequence)",", serializable);
        serializable = new StringBuilder(String.valueOf(object).length() + 2);
        serializable.append("(");
        serializable.append((String)object);
        serializable.append(")");
        object = serializable.toString();
        serializable = new StringBuilder(String.valueOf(object).length() + 140);
        serializable.append("audience_id in (select audience_id from audience_filter_values where app_id=? and audience_id not in ");
        serializable.append((String)object);
        serializable.append(" order by rowid desc limit -1 offset ?)");
        if (sQLiteDatabase.delete("audience_filter_values", serializable.toString(), new String[]{string2, Integer.toString(n2)}) > 0) {
            return true;
        }
        return false;
    }

    /*
     * WARNING - Removed back jump from a try to a catch block - possible behaviour change.
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    private final long b(String string2, String[] cursor) {
        void var1_4;
        block10 : {
            SQLiteException sQLiteException;
            Cursor cursor2;
            block9 : {
                SQLiteDatabase sQLiteDatabase = this.A();
                sQLiteException = null;
                cursor2 = null;
                cursor = sQLiteDatabase.rawQuery(string2, (String[])cursor);
                if (!cursor.moveToFirst()) break block9;
                long l2 = cursor.getLong(0);
                if (cursor == null) return l2;
                cursor.close();
                return l2;
            }
            try {
                throw new SQLiteException("Database returned empty set");
            }
            catch (Throwable throwable) {}
            catch (SQLiteException sQLiteException2) {}
            finally {
                break block10;
            }
            catch (Throwable throwable) {
                cursor = cursor2;
                break block10;
            }
            catch (SQLiteException sQLiteException3) {
                cursor = sQLiteException;
                sQLiteException = sQLiteException3;
            }
            cursor2 = cursor;
            {
                this.t().y().a("Database error", string2, (Object)sQLiteException);
                cursor2 = cursor;
                throw sQLiteException;
            }
        }
        if (cursor == null) throw var1_4;
        cursor.close();
        throw var1_4;
    }

    final SQLiteDatabase A() {
        this.c();
        try {
            SQLiteDatabase sQLiteDatabase = this.g.getWritableDatabase();
            return sQLiteDatabase;
        }
        catch (SQLiteException sQLiteException) {
            this.t().A().a("Error opening database", (Object)sQLiteException);
            throw sQLiteException;
        }
    }

    /*
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    public final String B() {
        Cursor cursor;
        Throwable throwable;
        block9 : {
            SQLiteDatabase sQLiteDatabase;
            block8 : {
                block7 : {
                    String string2;
                    sQLiteDatabase = this.A();
                    cursor = sQLiteDatabase.rawQuery("select app_id from queue order by has_realtime desc, rowid asc limit 1;", null);
                    sQLiteDatabase = cursor;
                    try {
                        if (!cursor.moveToFirst()) break block7;
                        sQLiteDatabase = cursor;
                        string2 = cursor.getString(0);
                        if (cursor == null) return string2;
                    }
                    catch (SQLiteException sQLiteException) {
                        break block8;
                    }
                    cursor.close();
                    return string2;
                }
                if (cursor == null) return null;
                cursor.close();
                return null;
                catch (Throwable throwable2) {
                    cursor = null;
                    throwable = throwable2;
                    break block9;
                }
                catch (SQLiteException sQLiteException) {
                    cursor = null;
                }
            }
            sQLiteDatabase = cursor;
            try {
                void var3_8;
                this.t().y().a("Database error getting next bundle app id", var3_8);
                if (cursor == null) return null;
            }
            catch (Throwable throwable3) {
                cursor = sQLiteDatabase;
            }
            cursor.close();
            return null;
        }
        if (cursor == null) throw throwable;
        cursor.close();
        throw throwable;
    }

    public final boolean C() {
        if (this.b("select count(1) > 0 from queue where has_realtime = 1", (String[])null) != 0L) {
            return true;
        }
        return false;
    }

    final void D() {
        this.c();
        this.Q();
        if (!this.T()) {
            return;
        }
        long l2 = this.u().f.a();
        long l3 = this.k().b();
        if (Math.abs(l3 - l2) > aaq.E.b()) {
            int n2;
            this.u().f.a(l3);
            this.c();
            this.Q();
            if (this.T() && (n2 = this.A().delete("queue", "abs(bundle_end_timestamp - ?) > cast(? as integer)", new String[]{String.valueOf(this.k().a()), String.valueOf(aab.y())})) > 0) {
                this.t().E().a("Deleted stale rows. rowsDeleted", n2);
            }
        }
    }

    public final long E() {
        return this.a("select max(bundle_end_timestamp) from queue", null, 0L);
    }

    public final long F() {
        return this.a("select max(timestamp) from raw_events", null, 0L);
    }

    public final boolean G() {
        if (this.b("select count(1) > 0 from raw_events", (String[])null) != 0L) {
            return true;
        }
        return false;
    }

    public final boolean H() {
        if (this.b("select count(1) > 0 from raw_events where realtime = 1", (String[])null) != 0L) {
            return true;
        }
        return false;
    }

    /*
     * WARNING - Removed back jump from a try to a catch block - possible behaviour change.
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    public final long I() {
        Object object;
        Cursor cursor;
        block9 : {
            SQLiteException sQLiteException;
            block10 : {
                long l2;
                Cursor cursor2;
                block8 : {
                    cursor2 = null;
                    cursor = null;
                    object = this.A().rawQuery("select rowid from raw_events order by rowid desc limit 1;", null);
                    boolean bl2 = object.moveToFirst();
                    if (bl2) break block8;
                    if (object == null) return -1L;
                    object.close();
                    return -1L;
                }
                try {
                    l2 = object.getLong(0);
                    if (object == null) return l2;
                }
                catch (Throwable throwable) {
                    cursor = object;
                    object = throwable;
                    break block9;
                }
                catch (SQLiteException sQLiteException2) {
                    sQLiteException = sQLiteException2;
                    break block10;
                }
                object.close();
                return l2;
                catch (Throwable throwable) {
                    break block9;
                }
                catch (SQLiteException sQLiteException3) {
                    object = cursor2;
                }
            }
            cursor = object;
            {
                this.t().y().a("Error querying raw events", (Object)sQLiteException);
                if (object == null) return -1L;
            }
            object.close();
            return -1L;
        }
        if (cursor == null) throw object;
        cursor.close();
        throw object;
    }

    public final long a(agb agb2) {
        byte[] arrby;
        long l2;
        Object object;
        this.c();
        this.Q();
        ah.a(agb2);
        ah.a(agb2.o);
        try {
            arrby = new byte[agb2.f()];
            object = bjq.a(arrby, 0, arrby.length);
            agb2.a((bjq)object);
            object.a();
            object = this.p();
        }
        catch (IOException iOException) {
            this.t().y().a("Data loss. Failed to serialize event metadata. appId", abb.a(agb2.o), iOException);
            throw iOException;
        }
        ah.a(arrby);
        object.c();
        MessageDigest messageDigest = afk.f("MD5");
        if (messageDigest == null) {
            object.t().y().a("Failed to get MD5");
            l2 = 0L;
        } else {
            l2 = afk.c(messageDigest.digest(arrby));
        }
        object = new ContentValues();
        object.put("app_id", agb2.o);
        object.put("metadata_fingerprint", Long.valueOf(l2));
        object.put("metadata", arrby);
        try {
            this.A().insertWithOnConflict("raw_events_metadata", null, (ContentValues)object, 4);
            return l2;
        }
        catch (SQLiteException sQLiteException) {
            this.t().y().a("Error storing raw event metadata. appId", abb.a(agb2.o), (Object)sQLiteException);
            throw sQLiteException;
        }
    }

    /*
     * Loose catch block
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    public final Pair<afy, Long> a(String string2, Long l2) {
        void var1_4;
        String string3;
        block18 : {
            void var2_8;
            block17 : {
                Cursor cursor;
                block16 : {
                    this.c();
                    this.Q();
                    cursor = this.A().rawQuery("select main_event, children_to_process from main_event_params where app_id=? and event_id=?", new String[]{string2, String.valueOf(l2)});
                    string3 = cursor;
                    if (cursor.moveToFirst()) break block16;
                    string3 = cursor;
                    this.t().E().a("Main event not found");
                    if (cursor == null) return null;
                    cursor.close();
                    return null;
                }
                string3 = cursor;
                Object object = cursor.getBlob(0);
                string3 = cursor;
                long l3 = cursor.getLong(1);
                string3 = cursor;
                object = bjp.a(object, 0, ((byte[])object).length);
                string3 = cursor;
                afy afy2 = new afy();
                string3 = cursor;
                afy2.a((bjp)object);
                string3 = cursor;
                string2 = Pair.create((Object)afy2, (Object)l3);
                if (cursor == null) return string2;
                cursor.close();
                return string2;
                catch (IOException iOException) {
                    string3 = cursor;
                    try {
                        this.t().y().a("Failed to merge main event. appId, eventId", abb.a(string2), l2, iOException);
                        if (cursor == null) return null;
                    }
                    catch (SQLiteException sQLiteException) {
                        string2 = cursor;
                        break block17;
                    }
                    cursor.close();
                    return null;
                }
                catch (Throwable throwable) {
                    string3 = null;
                    break block18;
                }
                catch (SQLiteException sQLiteException) {
                    string2 = null;
                }
            }
            string3 = string2;
            this.t().y().a("Error selecting main event", var2_8);
            if (string2 == null) return null;
            string2.close();
            return null;
            {
                catch (Throwable throwable) {
                    // empty catch block
                }
            }
        }
        if (string3 == null) throw var1_4;
        string3.close();
        throw var1_4;
    }

    /*
     * WARNING - Removed back jump from a try to a catch block - possible behaviour change.
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    public final aad a(long l2, String string2, boolean bl2, boolean bl3, boolean bl4, boolean bl5, boolean bl6) {
        SQLiteException sQLiteException;
        void var3_5;
        block15 : {
            aad aad2;
            SQLiteException sQLiteException3;
            SQLiteException sQLiteException2;
            block16 : {
                SQLiteDatabase sQLiteDatabase;
                block14 : {
                    ah.a(string2);
                    this.c();
                    this.Q();
                    aad2 = new aad();
                    sQLiteException2 = null;
                    sQLiteException = sQLiteException3 = null;
                    sQLiteDatabase = this.A();
                    sQLiteException = sQLiteException3;
                    sQLiteException3 = sQLiteDatabase.query("apps", new String[]{"day", "daily_events_count", "daily_public_events_count", "daily_conversions_count", "daily_error_events_count", "daily_realtime_events_count"}, "app_id=?", new String[]{string2}, null, null, null);
                    if (sQLiteException3.moveToFirst()) break block14;
                    this.t().A().a("Not updating daily counts, app is not known. appId", abb.a(string2));
                    if (sQLiteException3 == null) return aad2;
                    sQLiteException3.close();
                    return aad2;
                }
                try {
                    if (sQLiteException3.getLong(0) == l2) {
                        aad2.b = sQLiteException3.getLong(1);
                        aad2.a = sQLiteException3.getLong(2);
                        aad2.c = sQLiteException3.getLong(3);
                        aad2.d = sQLiteException3.getLong(4);
                        aad2.e = sQLiteException3.getLong(5);
                    }
                    if (bl2) {
                        ++aad2.b;
                    }
                    if (bl3) {
                        ++aad2.a;
                    }
                    if (bl4) {
                        ++aad2.c;
                    }
                    if (bl5) {
                        ++aad2.d;
                    }
                    if (bl6) {
                        ++aad2.e;
                    }
                    sQLiteException = new ContentValues();
                    sQLiteException.put("day", Long.valueOf(l2));
                    sQLiteException.put("daily_public_events_count", Long.valueOf(aad2.a));
                    sQLiteException.put("daily_events_count", Long.valueOf(aad2.b));
                    sQLiteException.put("daily_conversions_count", Long.valueOf(aad2.c));
                    sQLiteException.put("daily_error_events_count", Long.valueOf(aad2.d));
                    sQLiteException.put("daily_realtime_events_count", Long.valueOf(aad2.e));
                    sQLiteDatabase.update("apps", (ContentValues)sQLiteException, "app_id=?", new String[]{string2});
                    if (sQLiteException3 == null) return aad2;
                }
                catch (Throwable throwable) {
                    sQLiteException = sQLiteException3;
                    break block15;
                }
                catch (SQLiteException sQLiteException4) {
                    break block16;
                }
                sQLiteException3.close();
                return aad2;
                catch (Throwable throwable) {
                    break block15;
                }
                catch (SQLiteException sQLiteException5) {
                    sQLiteException3 = sQLiteException2;
                    sQLiteException2 = sQLiteException5;
                }
            }
            sQLiteException = sQLiteException3;
            {
                this.t().y().a("Error updating daily counts. appId", abb.a(string2), (Object)sQLiteException2);
                if (sQLiteException3 == null) return aad2;
            }
            sQLiteException3.close();
            return aad2;
        }
        if (sQLiteException == null) throw var3_5;
        sQLiteException.close();
        throw var3_5;
    }

    /*
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    public final aak a(String string2, String string3) {
        void var1_5;
        SQLiteDatabase sQLiteDatabase;
        block16 : {
            SQLiteDatabase sQLiteDatabase2;
            block17 : {
                Object object;
                long l5;
                Long l4;
                long l6;
                long l3;
                long l2;
                Boolean bl2;
                block15 : {
                    block14 : {
                        boolean bl3;
                        block13 : {
                            ah.a(string2);
                            ah.a(string3);
                            this.c();
                            this.Q();
                            sQLiteDatabase2 = this.A();
                            bl3 = false;
                            sQLiteDatabase2 = sQLiteDatabase2.query("events", new String[]{"lifetime_count", "current_bundle_count", "last_fire_timestamp", "last_bundled_timestamp", "last_sampled_complex_event_id", "last_sampling_rate", "last_exempt_from_sampling"}, "app_id=? and name=?", new String[]{string2, string3}, null, null, null);
                            boolean bl4 = sQLiteDatabase2.moveToFirst();
                            if (bl4) break block13;
                            if (sQLiteDatabase2 == null) return null;
                            sQLiteDatabase2.close();
                            return null;
                        }
                        try {
                            l3 = sQLiteDatabase2.getLong(0);
                            l6 = sQLiteDatabase2.getLong(1);
                            l2 = sQLiteDatabase2.getLong(2);
                            l5 = sQLiteDatabase2.isNull(3) ? 0L : sQLiteDatabase2.getLong(3);
                            object = sQLiteDatabase2.isNull(4) ? null : Long.valueOf(sQLiteDatabase2.getLong(4));
                            l4 = sQLiteDatabase2.isNull(5) ? null : Long.valueOf(sQLiteDatabase2.getLong(5));
                            if (sQLiteDatabase2.isNull(6)) break block14;
                            if (sQLiteDatabase2.getLong(6) == 1L) {
                                bl3 = true;
                            }
                            bl2 = bl3;
                            break block15;
                        }
                        catch (Throwable throwable) {
                            sQLiteDatabase = sQLiteDatabase2;
                            break block16;
                        }
                        catch (SQLiteException sQLiteException) {
                            break block17;
                        }
                        catch (Throwable throwable) {
                            sQLiteDatabase = null;
                            break block16;
                        }
                        catch (SQLiteException sQLiteException) {
                            sQLiteDatabase2 = null;
                            break block17;
                        }
                    }
                    bl2 = null;
                }
                sQLiteDatabase = sQLiteDatabase2;
                try {
                    object = new aak(string2, string3, l3, l6, l2, l5, (Long)object, l4, bl2);
                    sQLiteDatabase = sQLiteDatabase2;
                    if (sQLiteDatabase2.moveToNext()) {
                        sQLiteDatabase = sQLiteDatabase2;
                        this.t().y().a("Got multiple records for event aggregates, expected one. appId", abb.a(string2));
                    }
                    if (sQLiteDatabase2 == null) return object;
                }
                catch (SQLiteException sQLiteException) {}
                sQLiteDatabase2.close();
                return object;
            }
            sQLiteDatabase = sQLiteDatabase2;
            try {
                void var15_18;
                this.t().y().a("Error querying events. appId", abb.a(string2), this.o().a(string3), var15_18);
                if (sQLiteDatabase2 == null) return null;
            }
            catch (Throwable throwable) {
                // empty catch block
            }
            sQLiteDatabase2.close();
            return null;
        }
        if (sQLiteDatabase == null) throw var1_5;
        sQLiteDatabase.close();
        throw var1_5;
    }

    /*
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    public final String a(long l2) {
        void var4_5;
        Cursor cursor;
        block10 : {
            Cursor cursor2;
            block9 : {
                String string2;
                block8 : {
                    this.c();
                    this.Q();
                    cursor = cursor2 = this.A().rawQuery("select app_id from apps where app_id in (select distinct app_id from raw_events) and config_fetched_time < ? order by failed_config_fetch_time limit 1;", new String[]{String.valueOf(l2)});
                    if (cursor2.moveToFirst()) break block8;
                    cursor = cursor2;
                    this.t().E().a("No expired configs for apps with pending events");
                    if (cursor2 == null) return null;
                    cursor2.close();
                    return null;
                }
                cursor = cursor2;
                try {
                    string2 = cursor2.getString(0);
                    if (cursor2 == null) return string2;
                }
                catch (SQLiteException sQLiteException) {
                    break block9;
                }
                cursor2.close();
                return string2;
                catch (Throwable throwable) {
                    cursor = null;
                    break block10;
                }
                catch (SQLiteException sQLiteException) {
                    cursor2 = null;
                }
            }
            cursor = cursor2;
            try {
                void var5_10;
                this.t().y().a("Error selecting expired configs", var5_10);
                if (cursor2 == null) return null;
            }
            catch (Throwable throwable) {
                // empty catch block
            }
            cursor2.close();
            return null;
        }
        if (cursor == null) throw var4_5;
        cursor.close();
        throw var4_5;
    }

    /*
     * Exception decompiling
     */
    public final List<afj> a(String var1_1) {
        // This method has failed to decompile.  When submitting a bug report, please provide this stack trace, and (if you hold appropriate legal rights) the relevant class file.
        // org.benf.cfr.reader.util.ConfusedCFRException: Tried to end blocks [1[TRYBLOCK]], but top level block is 12[SIMPLE_IF_TAKEN]
        // org.benf.cfr.reader.bytecode.analysis.opgraph.Op04StructuredStatement.processEndingBlocks(Op04StructuredStatement.java:416)
        // org.benf.cfr.reader.bytecode.analysis.opgraph.Op04StructuredStatement.buildNestedBlocks(Op04StructuredStatement.java:468)
        // org.benf.cfr.reader.bytecode.analysis.opgraph.Op03SimpleStatement.createInitialStructuredBlock(Op03SimpleStatement.java:2960)
        // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisInner(CodeAnalyser.java:818)
        // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisOrWrapFail(CodeAnalyser.java:196)
        // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysis(CodeAnalyser.java:141)
        // org.benf.cfr.reader.entities.attributes.AttributeCode.analyse(AttributeCode.java:95)
        // org.benf.cfr.reader.entities.Method.analyse(Method.java:372)
        // org.benf.cfr.reader.entities.ClassFile.analyseMid(ClassFile.java:867)
        // org.benf.cfr.reader.entities.ClassFile.analyseTop(ClassFile.java:768)
        // org.benf.cfr.reader.Main.doJar(Main.java:141)
        // org.benf.cfr.reader.Main.main(Main.java:242)
        throw new IllegalStateException("Decompilation failed");
    }

    /*
     * WARNING - Removed back jump from a try to a catch block - possible behaviour change.
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    public final List<Pair<agb, Long>> a(String object, int n2, int n3) {
        void var1_4;
        byte[] arrby;
        block14 : {
            Cursor cursor;
            block15 : {
                ArrayList<Pair<agb, Long>> arrayList;
                boolean bl2;
                Object object2;
                block13 : {
                    this.c();
                    this.Q();
                    bl2 = n2 > 0;
                    ah.b(bl2);
                    bl2 = n3 > 0;
                    ah.b(bl2);
                    ah.a(object);
                    object2 = null;
                    arrby = null;
                    cursor = this.A().query("queue", new String[]{"rowid", "data"}, "app_id=?", new String[]{object}, null, null, "rowid", String.valueOf(n2));
                    if (cursor.moveToFirst()) break block13;
                    arrby = Collections.emptyList();
                    if (cursor == null) return arrby;
                    cursor.close();
                    return arrby;
                }
                try {
                    int n4;
                    arrayList = new ArrayList<Pair<agb, Long>>();
                    n2 = 0;
                    do {
                        long l2 = cursor.getLong(0);
                        arrby = cursor.getBlob(1);
                        arrby = this.p().b(arrby);
                        if (!arrayList.isEmpty() && arrby.length + n2 > n3) break;
                        Object object3 = bjp.a(arrby, 0, arrby.length);
                        object2 = new agb();
                        try {
                            object2.a((bjp)object3);
                        }
                        catch (IOException iOException) {
                            Object object4;
                            block17 : {
                                object3 = this.t().y();
                                object2 = "Failed to merge queued bundle. appId";
                                object4 = abb.a(object);
                                break block17;
                                catch (IOException iOException2) {
                                    object3 = this.t().y();
                                    object2 = "Failed to unzip queued bundle. appId";
                                    object4 = abb.a(object);
                                }
                            }
                            object3.a((String)object2, object4, arrby);
                            n4 = n2;
                        }
                        n4 = n2 + arrby.length;
                        arrayList.add((Pair<agb, Long>)Pair.create((Object)object2, (Object)l2));
                        bl2 = cursor.moveToNext();
                        if (!bl2) break;
                        n2 = n4;
                    } while (n4 <= n3);
                    if (cursor == null) return arrayList;
                }
                catch (Throwable throwable) {
                    arrby = cursor;
                    break block14;
                }
                catch (SQLiteException sQLiteException) {
                    break block15;
                }
                cursor.close();
                return arrayList;
                catch (Throwable throwable) {
                    break block14;
                }
                catch (SQLiteException sQLiteException) {
                    cursor = object2;
                }
            }
            arrby = cursor;
            {
                void var10_19;
                this.t().y().a("Error querying bundles. appId", abb.a(object), var10_19);
                arrby = cursor;
                object = Collections.emptyList();
                if (cursor == null) return object;
            }
            cursor.close();
            return object;
        }
        if (arrby == null) throw var1_4;
        arrby.close();
        throw var1_4;
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive exception aggregation
     */
    public final List<afj> a(String var1_1, String var2_6, String var3_7) {
        block30 : {
            block26 : {
                block27 : {
                    ah.a(var1_1);
                    this.c();
                    this.Q();
                    var10_25 = new ArrayList<afj>();
                    var9_26 = null;
                    var11_35 = new ArrayList<String>(3);
                    var11_35.add(var1_1);
                    var7_39 = new StringBuilder("app_id=?");
                    var4_46 = TextUtils.isEmpty((CharSequence)var2_6 /* !! */ );
                    if (var4_46) ** GOTO lbl17
                    var11_35.add(var2_6 /* !! */ );
                    var7_39.append(" and origin=?");
lbl17: // 2 sources:
                    var8_47 /* !! */  = var2_6 /* !! */ ;
                    if (!TextUtils.isEmpty((CharSequence)var3_17)) {
                        var11_35.add(String.valueOf(var3_17).concat("*"));
                        var7_39.append(" and name glob ?");
                    }
                    var11_36 = var11_35.toArray(new String[var11_35.size()]);
                    var12_58 = this.A();
                    var7_40 = var7_39.toString();
                    var7_41 = var12_58.query("user_attributes", new String[]{"name", "set_timestamp", "value", "origin"}, var7_40, var11_36, null, null, "rowid", "1001");
                    var9_27 /* !! */  = var8_47 /* !! */ ;
                    try {
                        var4_46 = var7_41.moveToFirst();
                        var2_7 /* !! */  = var8_47 /* !! */ ;
                        if (var4_46) break block26;
                        if (var7_41 == null) break block27;
                    }
                    catch (Throwable var1_2) {
                        ** GOTO lbl97
                    }
                    catch (SQLiteException var3_19) {
                        var2_11 = var9_34;
                        ** GOTO lbl87
                    }
                    var7_41.close();
                }
                return var10_25;
            }
            do {
                block29 : {
                    block28 : {
                        block32 : {
                            var9_29 = var2_8;
                            if (var10_25.size() >= 1000) {
                                var9_30 = var2_8;
                                this.t().y().a("Read more than the max allowed user properties, ignoring excess", 1000);
                                break block28;
                            }
                            var9_31 = var2_8;
                            var11_38 = var7_41.getString(0);
                            var9_32 = var2_8;
                            var5_61 = var7_41.getLong(1);
                            var8_49 = var7_41;
                            var12_60 = this.a(var7_41, 2);
                            var8_50 = var7_41;
                            var9_33 = var7_41.getString(3);
                            if (var12_60 != null) ** GOTO lbl57
                            var8_51 = var7_41;
                            this.t().y().a("(2)Read invalid user property value, ignoring it", abb.a(var1_1), var9_33, var3_17);
                            break block32;
lbl57: // 1 sources:
                            var8_52 = var7_41;
                            var10_25.add(new afj(var1_1, var9_33, var11_38, var5_61, var12_60));
                        }
                        var8_54 = var7_41;
                        var4_46 = var7_41.moveToNext();
                        if (var4_46) break block29;
                    }
                    if (var7_41 != null) {
                        var7_41.close();
                    }
                    return var10_25;
                }
                var2_9 = var9_33;
            } while (true);
            {
                catch (SQLiteException var3_18) {
                    ** GOTO lbl87
                }
            }
            {
                catch (SQLiteException var3_20) {
                    break block30;
                }
            }
            catch (Throwable var1_3) {
                var2_12 = var9_26;
                ** GOTO lbl98
            }
            {
                catch (SQLiteException var3_21) {
                    // empty catch block
                }
            }
        }
lbl85: // 2 sources:
        do {
            var7_42 = null;
lbl87: // 4 sources:
            do {
                block31 : {
                    var8_56 = var7_43;
                    try {
                        this.t().y().a("(2)Error querying user properties", abb.a(var1_1), var2_13, var3_22);
                        if (var7_43 == null) break block31;
                    }
                    catch (Throwable var1_4) {
                        var7_44 = var8_57;
                    }
                    var7_43.close();
                }
                return null;
lbl97: // 2 sources:
                var2_14 = var7_45;
lbl98: // 2 sources:
                if (var2_15 != null) {
                    var2_15.close();
                }
                throw var1_5;
                break;
            } while (true);
            break;
        } while (true);
        {
            catch (SQLiteException var3_23) {
                ** continue;
            }
        }
        {
            catch (SQLiteException var3_24) {
                var2_16 = var9_33;
                ** continue;
            }
        }
    }

    /*
     * WARNING - Removed back jump from a try to a catch block - possible behaviour change.
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    public final List<zz> a(String string2, String[] object) {
        void var2_7;
        block12 : {
            String string3;
            block13 : {
                String string4;
                boolean bl2;
                ArrayList<zz> arrayList;
                block11 : {
                    this.c();
                    this.Q();
                    arrayList = new ArrayList<zz>();
                    string4 = null;
                    string3 = null;
                    string2 = this.A().query("conditional_properties", new String[]{"app_id", "origin", "name", "value", "active", "trigger_event_name", "trigger_timeout", "timed_out_event", "creation_timestamp", "triggered_event", "triggered_timestamp", "time_to_live", "expired_event"}, string2, (String[])object, null, null, "rowid", "1001");
                    bl2 = string2.moveToFirst();
                    if (bl2) break block11;
                    if (string2 == null) return arrayList;
                    string2.close();
                    return arrayList;
                }
                try {
                    do {
                        if (arrayList.size() >= 1000) {
                            this.t().y().a("Read more than the max allowed conditional properties, ignoring extra", 1000);
                            break;
                        }
                        bl2 = false;
                        object = string2.getString(0);
                        string3 = string2.getString(1);
                        string4 = string2.getString(2);
                        Object object2 = this.a((Cursor)string2, 3);
                        if (string2.getInt(4) != 0) {
                            bl2 = true;
                        }
                        String string5 = string2.getString(5);
                        long l2 = string2.getLong(6);
                        aao aao2 = this.p().a(string2.getBlob(7), aao.CREATOR);
                        long l3 = string2.getLong(8);
                        aao aao3 = this.p().a(string2.getBlob(9), aao.CREATOR);
                        long l4 = string2.getLong(10);
                        long l5 = string2.getLong(11);
                        aao aao4 = this.p().a(string2.getBlob(12), aao.CREATOR);
                        arrayList.add(new zz((String)object, string3, new afh(string4, l4, object2, string3), l3, bl2, string5, aao2, l2, aao3, l5, aao4));
                    } while (bl2 = string2.moveToNext());
                    if (string2 == null) return arrayList;
                }
                catch (Throwable throwable) {
                    break block12;
                }
                catch (SQLiteException sQLiteException) {
                    break block13;
                }
                string2.close();
                return arrayList;
                catch (Throwable throwable) {
                    string2 = string3;
                    break block12;
                }
                catch (SQLiteException sQLiteException) {
                    string2 = string4;
                }
            }
            string3 = string2;
            {
                this.t().y().a("Error querying conditional user property value", object);
                string3 = string2;
                object = Collections.emptyList();
                if (string2 == null) return object;
            }
            string2.close();
            return object;
        }
        if (string2 == null) throw var2_7;
        string2.close();
        throw var2_7;
    }

    public final void a(aak aak2) {
        ah.a(aak2);
        this.c();
        this.Q();
        ContentValues contentValues = new ContentValues();
        contentValues.put("app_id", aak2.a);
        contentValues.put("name", aak2.b);
        contentValues.put("lifetime_count", Long.valueOf(aak2.c));
        contentValues.put("current_bundle_count", Long.valueOf(aak2.d));
        contentValues.put("last_fire_timestamp", Long.valueOf(aak2.e));
        contentValues.put("last_bundled_timestamp", Long.valueOf(aak2.f));
        contentValues.put("last_sampled_complex_event_id", aak2.g);
        contentValues.put("last_sampling_rate", aak2.h);
        Long l2 = aak2.i != null && aak2.i != false ? Long.valueOf(1L) : null;
        contentValues.put("last_exempt_from_sampling", l2);
        try {
            if (this.A().insertWithOnConflict("events", null, contentValues, 5) == -1L) {
                this.t().y().a("Failed to insert/update event aggregates (got -1). appId", abb.a(aak2.a));
            }
            return;
        }
        catch (SQLiteException sQLiteException) {
            this.t().y().a("Error storing event aggregates. appId", abb.a(aak2.a), (Object)sQLiteException);
            return;
        }
    }

    public final void a(zv zv2) {
        ah.a(zv2);
        this.c();
        this.Q();
        ContentValues contentValues = new ContentValues();
        contentValues.put("app_id", zv2.b());
        contentValues.put("app_instance_id", zv2.c());
        contentValues.put("gmp_app_id", zv2.d());
        contentValues.put("resettable_device_id_hash", zv2.e());
        contentValues.put("last_bundle_index", Long.valueOf(zv2.o()));
        contentValues.put("last_bundle_start_timestamp", Long.valueOf(zv2.g()));
        contentValues.put("last_bundle_end_timestamp", Long.valueOf(zv2.h()));
        contentValues.put("app_version", zv2.i());
        contentValues.put("app_store", zv2.k());
        contentValues.put("gmp_version", Long.valueOf(zv2.l()));
        contentValues.put("dev_cert_hash", Long.valueOf(zv2.m()));
        contentValues.put("measurement_enabled", Boolean.valueOf(zv2.n()));
        contentValues.put("day", Long.valueOf(zv2.s()));
        contentValues.put("daily_public_events_count", Long.valueOf(zv2.t()));
        contentValues.put("daily_events_count", Long.valueOf(zv2.u()));
        contentValues.put("daily_conversions_count", Long.valueOf(zv2.v()));
        contentValues.put("config_fetched_time", Long.valueOf(zv2.p()));
        contentValues.put("failed_config_fetch_time", Long.valueOf(zv2.q()));
        contentValues.put("app_version_int", Long.valueOf(zv2.j()));
        contentValues.put("firebase_instance_id", zv2.f());
        contentValues.put("daily_error_events_count", Long.valueOf(zv2.x()));
        contentValues.put("daily_realtime_events_count", Long.valueOf(zv2.w()));
        contentValues.put("health_monitor_sample", zv2.y());
        contentValues.put("android_id", Long.valueOf(zv2.A()));
        contentValues.put("adid_reporting_enabled", Boolean.valueOf(zv2.B()));
        try {
            SQLiteDatabase sQLiteDatabase = this.A();
            if ((long)sQLiteDatabase.update("apps", contentValues, "app_id = ?", new String[]{zv2.b()}) == 0L && sQLiteDatabase.insertWithOnConflict("apps", null, contentValues, 5) == -1L) {
                this.t().y().a("Failed to insert/update app (got -1). appId", abb.a(zv2.b()));
            }
            return;
        }
        catch (SQLiteException sQLiteException) {
            this.t().y().a("Error storing app. appId", abb.a(zv2.b()), (Object)sQLiteException);
            return;
        }
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    final void a(String var1_1, afn[] var2_3) {
        this.Q();
        this.c();
        ah.a(var1_1);
        ah.a(var2_3);
        var15_4 = this.A();
        var15_4.beginTransaction();
        this.Q();
        this.c();
        ah.a(var1_1);
        var11_5 = this.A();
        var7_6 = 0;
        var11_5.delete("property_filters", "app_id=?", new String[]{var1_1});
        var11_5.delete("event_filters", "app_id=?", new String[]{var1_1});
        var8_7 = var2_3.length;
        var4_8 = 0;
        do {
            block22 : {
                block25 : {
                    block24 : {
                        block23 : {
                            if (var4_8 >= var8_7) ** GOTO lbl35
                            var11_5 = var2_3[var4_8];
                            try {
                                this.Q();
                                this.c();
                                ah.a(var1_1);
                                ah.a(var11_5);
                                ah.a(var11_5.c);
                                ah.a(var11_5.b);
                                if (var11_5.a == null) {
                                    this.t().A().a("Audience with no ID. appId", abb.a(var1_1));
                                    break block22;
                                }
                                var9_12 = var11_5.a;
                                var12_14 /* !! */  = var11_5.c;
                                var5_10 = var12_14 /* !! */ .length;
                                var3_9 = 0;
                                break block23;
lbl35: // 1 sources:
                                var11_5 = new ArrayList<E>();
                                var4_8 = var2_3.length;
                                break;
                            }
                            catch (Throwable var1_2) {}
                            throw var1_2;
                        }
                        do {
                            if (var3_9 >= var5_10) break block24;
                            if (var12_14 /* !! */ [var3_9].a == null) {
                                var12_14 /* !! */  = this.t().A();
                                var13_15 = "Event filter with no ID. Audience definition ignored. appId, audienceId";
                                var14_16 = abb.a(var1_1);
                                var11_5 = var11_5.a;
                                break;
                            }
                            ++var3_9;
                        } while (true);
lbl51: // 2 sources:
                        do {
                            var12_14 /* !! */ .a(var13_15, var14_16, var11_5);
                            break block22;
                            break;
                        } while (true);
                    }
                    var12_14 /* !! */  = var11_5.b;
                    var5_10 = var12_14 /* !! */ .length;
                    var3_9 = 0;
                    do {
                        if (var3_9 < var5_10) {
                            if (var12_14 /* !! */ [var3_9].a == null) {
                                var12_14 /* !! */  = this.t().A();
                                var13_15 = "Property filter with no ID. Audience definition ignored. appId, audienceId";
                                var14_16 = abb.a(var1_1);
                                var11_5 = var11_5.a;
                                ** continue;
                            }
                        } else {
                            var12_14 /* !! */  = var11_5.c;
                            var5_10 = var12_14 /* !! */ .length;
                            break;
                        }
                        ++var3_9;
                    } while (true);
                    for (var3_9 = 0; var3_9 < var5_10; ++var3_9) {
                        if (this.a(var1_1, var9_12, (afo)var12_14 /* !! */ [var3_9])) continue;
                        var3_9 = 0;
                        break block25;
                    }
                    var3_9 = 1;
                }
                var6_11 = var3_9;
                if (var3_9 == 0) ** GOTO lbl88
                var11_5 = var11_5.b;
                var10_13 = ((Object)var11_5).length;
                var5_10 = 0;
                do {
                    block27 : {
                        block26 : {
                            var6_11 = var3_9;
                            if (var5_10 >= var10_13) break block26;
                            if (this.a(var1_1, var9_12, (afr)var11_5[var5_10])) break block27;
                            var6_11 = 0;
                        }
                        if (var6_11 != 0) break;
                        this.Q();
                        this.c();
                        ah.a(var1_1);
                        var11_5 = this.A();
                        var11_5.delete("property_filters", "app_id=? and audience_id=?", new String[]{var1_1, String.valueOf(var9_12)});
                        var11_5.delete("event_filters", "app_id=? and audience_id=?", new String[]{var1_1, String.valueOf(var9_12)});
                        break;
                    }
                    ++var5_10;
                } while (true);
            }
            ++var4_8;
        } while (true);
        for (var3_9 = var7_6; var3_9 < var4_8; ++var3_9) {
            var11_5.add(var2_3[var3_9].a);
        }
        ** try [egrp 2[TRYBLOCK] [17 : 535->548)] { 
lbl107: // 1 sources:
        this.a(var1_1, (List<Integer>)var11_5);
        var15_4.setTransactionSuccessful();
        return;
lbl110: // 1 sources:
        finally {
            var15_4.endTransaction();
        }
    }

    public final void a(List<Long> list) {
        int n2;
        ah.a(list);
        this.c();
        this.Q();
        StringBuilder stringBuilder = new StringBuilder("rowid in (");
        for (n2 = 0; n2 < list.size(); ++n2) {
            if (n2 != 0) {
                stringBuilder.append(",");
            }
            stringBuilder.append(list.get(n2));
        }
        stringBuilder.append(")");
        n2 = this.A().delete("raw_events", stringBuilder.toString(), null);
        if (n2 != list.size()) {
            this.t().y().a("Deleted fewer rows from raw events table than expected", n2, list.size());
        }
    }

    public final boolean a(aaj aaj2, long l2, boolean bl2) {
        RuntimeException runtimeException;
        super("d2j fail translate: java.lang.RuntimeException: can not merge I and Z\n\tat com.googlecode.dex2jar.ir.TypeClass.merge(TypeClass.java:100)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeRef.updateTypeClass(TypeTransformer.java:174)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.copyTypes(TypeTransformer.java:311)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.fixTypes(TypeTransformer.java:226)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.analyze(TypeTransformer.java:207)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer.transform(TypeTransformer.java:44)\n\tat com.googlecode.d2j.dex.Dex2jar$2.optimize(Dex2jar.java:162)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertCode(Dex2Asm.java:414)\n\tat com.googlecode.d2j.dex.ExDex2Asm.convertCode(ExDex2Asm.java:42)\n\tat com.googlecode.d2j.dex.Dex2jar$2.convertCode(Dex2jar.java:128)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertMethod(Dex2Asm.java:509)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertClass(Dex2Asm.java:406)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertDex(Dex2Asm.java:422)\n\tat com.googlecode.d2j.dex.Dex2jar.doTranslate(Dex2jar.java:172)\n\tat com.googlecode.d2j.dex.Dex2jar.to(Dex2jar.java:272)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.doCommandLine(Dex2jarCmd.java:108)\n\tat com.googlecode.dex2jar.tools.BaseCmd.doMain(BaseCmd.java:288)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.main(Dex2jarCmd.java:32)\n");
        throw runtimeException;
    }

    public final boolean a(afj afj2) {
        ah.a(afj2);
        this.c();
        this.Q();
        if (this.c(afj2.a, afj2.c) == null && (afk.a(afj2.c) ? this.b("select count(1) from user_attributes where app_id=? and name not like '!_%' escape '!'", new String[]{afj2.a}) >= 25L : this.b("select count(1) from user_attributes where app_id=? and origin=? AND name like '!_%' escape '!'", new String[]{afj2.a, afj2.b}) >= 25L)) {
            return false;
        }
        ContentValues contentValues = new ContentValues();
        contentValues.put("app_id", afj2.a);
        contentValues.put("origin", afj2.b);
        contentValues.put("name", afj2.c);
        contentValues.put("set_timestamp", Long.valueOf(afj2.d));
        aac.a(contentValues, "value", afj2.e);
        try {
            if (this.A().insertWithOnConflict("user_attributes", null, contentValues, 5) == -1L) {
                this.t().y().a("Failed to insert/update user property (got -1). appId", abb.a(afj2.a));
                return true;
            }
        }
        catch (SQLiteException sQLiteException) {
            this.t().y().a("Error storing user property. appId", abb.a(afj2.a), (Object)sQLiteException);
        }
        return true;
    }

    public final boolean a(agb agb2, boolean bl2) {
        RuntimeException runtimeException;
        super("d2j fail translate: java.lang.RuntimeException: can not merge I and Z\n\tat com.googlecode.dex2jar.ir.TypeClass.merge(TypeClass.java:100)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeRef.updateTypeClass(TypeTransformer.java:174)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.copyTypes(TypeTransformer.java:311)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.fixTypes(TypeTransformer.java:226)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.analyze(TypeTransformer.java:207)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer.transform(TypeTransformer.java:44)\n\tat com.googlecode.d2j.dex.Dex2jar$2.optimize(Dex2jar.java:162)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertCode(Dex2Asm.java:414)\n\tat com.googlecode.d2j.dex.ExDex2Asm.convertCode(ExDex2Asm.java:42)\n\tat com.googlecode.d2j.dex.Dex2jar$2.convertCode(Dex2jar.java:128)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertMethod(Dex2Asm.java:509)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertClass(Dex2Asm.java:406)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertDex(Dex2Asm.java:422)\n\tat com.googlecode.d2j.dex.Dex2jar.doTranslate(Dex2jar.java:172)\n\tat com.googlecode.d2j.dex.Dex2jar.to(Dex2jar.java:272)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.doCommandLine(Dex2jarCmd.java:108)\n\tat com.googlecode.dex2jar.tools.BaseCmd.doMain(BaseCmd.java:288)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.main(Dex2jarCmd.java:32)\n");
        throw runtimeException;
    }

    public final boolean a(zz zz2) {
        ah.a(zz2);
        this.c();
        this.Q();
        if (this.c(zz2.a, zz2.c.a) == null && this.b("SELECT COUNT(1) FROM conditional_properties WHERE app_id=?", new String[]{zz2.a}) >= 1000L) {
            return false;
        }
        ContentValues contentValues = new ContentValues();
        contentValues.put("app_id", zz2.a);
        contentValues.put("origin", zz2.b);
        contentValues.put("name", zz2.c.a);
        aac.a(contentValues, "value", zz2.c.a());
        contentValues.put("active", Boolean.valueOf(zz2.e));
        contentValues.put("trigger_event_name", zz2.f);
        contentValues.put("trigger_timeout", Long.valueOf(zz2.h));
        this.p();
        contentValues.put("timed_out_event", afk.a(zz2.g));
        contentValues.put("creation_timestamp", Long.valueOf(zz2.d));
        this.p();
        contentValues.put("triggered_event", afk.a(zz2.i));
        contentValues.put("triggered_timestamp", Long.valueOf(zz2.c.b));
        contentValues.put("time_to_live", Long.valueOf(zz2.j));
        this.p();
        contentValues.put("expired_event", afk.a(zz2.k));
        try {
            if (this.A().insertWithOnConflict("conditional_properties", null, contentValues, 5) == -1L) {
                this.t().y().a("Failed to insert/update conditional user property (got -1)", abb.a(zz2.a));
                return true;
            }
        }
        catch (SQLiteException sQLiteException) {
            this.t().y().a("Error storing conditional user property", abb.a(zz2.a), (Object)sQLiteException);
        }
        return true;
    }

    public final boolean a(String string2, Long l2, long l3, afy afy2) {
        byte[] arrby;
        this.c();
        this.Q();
        ah.a(afy2);
        ah.a(string2);
        ah.a(l2);
        try {
            arrby = new byte[afy2.f()];
            bjq bjq2 = bjq.a(arrby, 0, arrby.length);
            afy2.a(bjq2);
            bjq2.a();
            this.t().E().a("Saving complex main event, appId, data size", this.o().a(string2), arrby.length);
        }
        catch (IOException iOException) {
            this.t().y().a("Data loss. Failed to serialize event params/data. appId, eventId", abb.a(string2), l2, iOException);
            return false;
        }
        afy2 = new ContentValues();
        afy2.put("app_id", string2);
        afy2.put("event_id", l2);
        afy2.put("children_to_process", Long.valueOf(l3));
        afy2.put("main_event", arrby);
        try {
            if (this.A().insertWithOnConflict("main_event_params", null, (ContentValues)afy2, 5) == -1L) {
                this.t().y().a("Failed to insert complex main event (got -1). appId", abb.a(string2));
                return false;
            }
            return true;
        }
        catch (SQLiteException sQLiteException) {
            this.t().y().a("Error storing complex main event. appId", abb.a(string2), (Object)sQLiteException);
            return false;
        }
    }

    /*
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    public final zv b(String string2) {
        long l2;
        zv zv2;
        boolean bl3;
        boolean bl2;
        SQLiteDatabase sQLiteDatabase;
        SQLiteDatabase sQLiteDatabase2;
        block21 : {
            block17 : {
                block18 : {
                    void var1_5;
                    block20 : {
                        block19 : {
                            block16 : {
                                ah.a(string2);
                                this.c();
                                this.Q();
                                sQLiteDatabase2 = this.A();
                                bl3 = true;
                                sQLiteDatabase2 = sQLiteDatabase2.query("apps", new String[]{"app_instance_id", "gmp_app_id", "resettable_device_id_hash", "last_bundle_index", "last_bundle_start_timestamp", "last_bundle_end_timestamp", "app_version", "app_store", "gmp_version", "dev_cert_hash", "measurement_enabled", "day", "daily_public_events_count", "daily_events_count", "daily_conversions_count", "config_fetched_time", "failed_config_fetch_time", "app_version_int", "firebase_instance_id", "daily_error_events_count", "daily_realtime_events_count", "health_monitor_sample", "android_id", "adid_reporting_enabled"}, "app_id=?", new String[]{string2}, null, null, null);
                                bl2 = sQLiteDatabase2.moveToFirst();
                                if (bl2) break block16;
                                if (sQLiteDatabase2 == null) return null;
                                sQLiteDatabase2.close();
                                return null;
                            }
                            sQLiteDatabase = sQLiteDatabase2;
                            try {
                                zv2 = new zv(this.p, string2);
                                sQLiteDatabase = sQLiteDatabase2;
                                zv2.a(sQLiteDatabase2.getString(0));
                                sQLiteDatabase = sQLiteDatabase2;
                                zv2.b(sQLiteDatabase2.getString(1));
                                sQLiteDatabase = sQLiteDatabase2;
                                zv2.c(sQLiteDatabase2.getString(2));
                                sQLiteDatabase = sQLiteDatabase2;
                                zv2.f(sQLiteDatabase2.getLong(3));
                                sQLiteDatabase = sQLiteDatabase2;
                                zv2.a(sQLiteDatabase2.getLong(4));
                                sQLiteDatabase = sQLiteDatabase2;
                                zv2.b(sQLiteDatabase2.getLong(5));
                                sQLiteDatabase = sQLiteDatabase2;
                                zv2.e(sQLiteDatabase2.getString(6));
                                sQLiteDatabase = sQLiteDatabase2;
                                zv2.f(sQLiteDatabase2.getString(7));
                                sQLiteDatabase = sQLiteDatabase2;
                                zv2.d(sQLiteDatabase2.getLong(8));
                                sQLiteDatabase = sQLiteDatabase2;
                                zv2.e(sQLiteDatabase2.getLong(9));
                                sQLiteDatabase = sQLiteDatabase2;
                                if (sQLiteDatabase2.isNull(10)) break block17;
                                sQLiteDatabase = sQLiteDatabase2;
                                if (sQLiteDatabase2.getInt(10) == 0) break block18;
                                break block17;
                            }
                            catch (SQLiteException sQLiteException) {
                                break block19;
                            }
                            catch (Throwable throwable) {
                                break block20;
                            }
                            catch (SQLiteException sQLiteException) {
                                break block19;
                            }
                            catch (Throwable throwable) {
                                sQLiteDatabase2 = null;
                                break block20;
                            }
                            catch (SQLiteException sQLiteException) {
                                sQLiteDatabase2 = null;
                            }
                        }
                        sQLiteDatabase = sQLiteDatabase2;
                        try {
                            void var8_14;
                            this.t().y().a("Error querying app. appId", abb.a(string2), var8_14);
                            if (sQLiteDatabase2 == null) return null;
                        }
                        catch (Throwable throwable) {
                            sQLiteDatabase2 = sQLiteDatabase;
                        }
                        sQLiteDatabase2.close();
                        return null;
                    }
                    if (sQLiteDatabase2 == null) throw var1_5;
                    sQLiteDatabase2.close();
                    throw var1_5;
                }
                bl2 = false;
                break block21;
            }
            bl2 = true;
        }
        sQLiteDatabase = sQLiteDatabase2;
        zv2.a(bl2);
        sQLiteDatabase = sQLiteDatabase2;
        zv2.i(sQLiteDatabase2.getLong(11));
        sQLiteDatabase = sQLiteDatabase2;
        zv2.j(sQLiteDatabase2.getLong(12));
        sQLiteDatabase = sQLiteDatabase2;
        zv2.k(sQLiteDatabase2.getLong(13));
        sQLiteDatabase = sQLiteDatabase2;
        zv2.l(sQLiteDatabase2.getLong(14));
        sQLiteDatabase = sQLiteDatabase2;
        zv2.g(sQLiteDatabase2.getLong(15));
        sQLiteDatabase = sQLiteDatabase2;
        zv2.h(sQLiteDatabase2.getLong(16));
        sQLiteDatabase = sQLiteDatabase2;
        if (sQLiteDatabase2.isNull(17)) {
            l2 = Integer.MIN_VALUE;
        } else {
            sQLiteDatabase = sQLiteDatabase2;
            l2 = sQLiteDatabase2.getInt(17);
        }
        sQLiteDatabase = sQLiteDatabase2;
        zv2.c(l2);
        sQLiteDatabase = sQLiteDatabase2;
        zv2.d(sQLiteDatabase2.getString(18));
        sQLiteDatabase = sQLiteDatabase2;
        zv2.n(sQLiteDatabase2.getLong(19));
        sQLiteDatabase = sQLiteDatabase2;
        zv2.m(sQLiteDatabase2.getLong(20));
        sQLiteDatabase = sQLiteDatabase2;
        zv2.g(sQLiteDatabase2.getString(21));
        sQLiteDatabase = sQLiteDatabase2;
        if (sQLiteDatabase2.isNull(22)) {
            l2 = 0L;
        } else {
            sQLiteDatabase = sQLiteDatabase2;
            l2 = sQLiteDatabase2.getLong(22);
        }
        sQLiteDatabase = sQLiteDatabase2;
        zv2.o(l2);
        bl2 = bl3;
        sQLiteDatabase = sQLiteDatabase2;
        if (!sQLiteDatabase2.isNull(23)) {
            sQLiteDatabase = sQLiteDatabase2;
            bl2 = sQLiteDatabase2.getInt(23) != 0 ? bl3 : false;
        }
        sQLiteDatabase = sQLiteDatabase2;
        zv2.b(bl2);
        sQLiteDatabase = sQLiteDatabase2;
        zv2.a();
        sQLiteDatabase = sQLiteDatabase2;
        if (sQLiteDatabase2.moveToNext()) {
            sQLiteDatabase = sQLiteDatabase2;
            this.t().y().a("Got multiple records for app, expected one. appId", abb.a(string2));
        }
        if (sQLiteDatabase2 == null) return zv2;
        sQLiteDatabase2.close();
        return zv2;
    }

    public final List<zz> b(String charSequence, String arrstring, String string2) {
        ah.a((String)charSequence);
        this.c();
        this.Q();
        ArrayList<String> arrayList = new ArrayList<String>(3);
        arrayList.add((String)charSequence);
        charSequence = new StringBuilder("app_id=?");
        if (!TextUtils.isEmpty((CharSequence)arrstring)) {
            arrayList.add((String)arrstring);
            charSequence.append(" and origin=?");
        }
        if (!TextUtils.isEmpty((CharSequence)string2)) {
            arrayList.add(String.valueOf(string2).concat("*"));
            charSequence.append(" and name glob ?");
        }
        arrstring = arrayList.toArray(new String[arrayList.size()]);
        return this.a(charSequence.toString(), arrstring);
    }

    public final void b(String string2, String string3) {
        ah.a(string2);
        ah.a(string3);
        this.c();
        this.Q();
        try {
            int n2 = this.A().delete("user_attributes", "app_id=? and name=?", new String[]{string2, string3});
            this.t().E().a("Deleted user attribute rows", n2);
            return;
        }
        catch (SQLiteException sQLiteException) {
            this.t().y().a("Error deleting user attribute. appId", abb.a(string2), this.o().c(string3), (Object)sQLiteException);
            return;
        }
    }

    public final long c(String string2) {
        int n2;
        ah.a(string2);
        this.c();
        this.Q();
        try {
            n2 = this.A().delete("raw_events", "rowid in (select rowid from raw_events where app_id=? order by rowid desc limit -1 offset ?)", new String[]{string2, String.valueOf(Math.max(0, Math.min(1000000, this.v().b(string2, aaq.v))))});
        }
        catch (SQLiteException sQLiteException) {
            this.t().y().a("Error deleting over the limit events. appId", abb.a(string2), (Object)sQLiteException);
            return 0L;
        }
        return n2;
    }

    /*
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    public final afj c(String string2, String string3) {
        void var1_5;
        Cursor cursor;
        block14 : {
            Cursor cursor2;
            block13 : {
                Object object;
                block12 : {
                    ah.a(string2);
                    ah.a(string3);
                    this.c();
                    this.Q();
                    cursor = this.A().query("user_attributes", new String[]{"set_timestamp", "value", "origin"}, "app_id=? and name=?", new String[]{string2, string3}, null, null, null);
                    boolean bl2 = cursor.moveToFirst();
                    if (bl2) break block12;
                    if (cursor == null) return null;
                    cursor.close();
                    return null;
                }
                long l2 = cursor.getLong(0);
                cursor2 = cursor;
                try {
                    object = this.a(cursor, 1);
                    cursor2 = cursor;
                    object = new afj(string2, cursor.getString(2), string3, l2, object);
                    cursor2 = cursor;
                    if (cursor.moveToNext()) {
                        cursor2 = cursor;
                        this.t().y().a("Got multiple records for user property, expected one. appId", abb.a(string2));
                    }
                    if (cursor == null) return object;
                }
                catch (SQLiteException sQLiteException) {
                    break block13;
                }
                cursor.close();
                return object;
                catch (Throwable throwable) {
                    break block14;
                }
                catch (SQLiteException sQLiteException) {
                    break block13;
                }
                catch (Throwable throwable) {
                    cursor = null;
                    break block14;
                }
                catch (SQLiteException sQLiteException) {
                    cursor = null;
                }
            }
            cursor2 = cursor;
            try {
                void var8_15;
                this.t().y().a("Error querying user property. appId", abb.a(string2), this.o().c(string3), var8_15);
                if (cursor == null) return null;
            }
            catch (Throwable throwable) {
                cursor = cursor2;
            }
            cursor.close();
            return null;
        }
        if (cursor == null) throw var1_5;
        cursor.close();
        throw var1_5;
    }

    /*
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    public final zz d(String string2, String string3) {
        void var1_5;
        Cursor cursor;
        block14 : {
            Cursor cursor2;
            block13 : {
                boolean bl2;
                block12 : {
                    ah.a(string2);
                    ah.a(string3);
                    this.c();
                    this.Q();
                    cursor = this.A().query("conditional_properties", new String[]{"origin", "value", "active", "trigger_event_name", "trigger_timeout", "timed_out_event", "creation_timestamp", "triggered_event", "triggered_timestamp", "time_to_live", "expired_event"}, "app_id=? and name=?", new String[]{string2, string3}, null, null, null);
                    bl2 = cursor.moveToFirst();
                    if (bl2) break block12;
                    if (cursor == null) return null;
                    cursor.close();
                    return null;
                }
                Object object = cursor.getString(0);
                cursor2 = cursor;
                try {
                    Object object2 = this.a(cursor, 1);
                    cursor2 = cursor;
                    bl2 = cursor.getInt(2) != 0;
                    cursor2 = cursor;
                    String string4 = cursor.getString(3);
                    cursor2 = cursor;
                    long l2 = cursor.getLong(4);
                    cursor2 = cursor;
                    aao aao2 = this.p().a(cursor.getBlob(5), aao.CREATOR);
                    cursor2 = cursor;
                    long l3 = cursor.getLong(6);
                    cursor2 = cursor;
                    aao aao3 = this.p().a(cursor.getBlob(7), aao.CREATOR);
                    cursor2 = cursor;
                    long l4 = cursor.getLong(8);
                    cursor2 = cursor;
                    long l5 = cursor.getLong(9);
                    cursor2 = cursor;
                    aao aao4 = this.p().a(cursor.getBlob(10), aao.CREATOR);
                    cursor2 = cursor;
                    object = new zz(string2, (String)object, new afh(string3, l4, object2, (String)object), l3, bl2, string4, aao2, l2, aao3, l5, aao4);
                    cursor2 = cursor;
                    if (cursor.moveToNext()) {
                        cursor2 = cursor;
                        this.t().y().a("Got multiple records for conditional property, expected one", abb.a(string2), this.o().c(string3));
                    }
                    if (cursor == null) return object;
                }
                catch (SQLiteException sQLiteException) {
                    break block13;
                }
                cursor.close();
                return object;
                catch (Throwable throwable) {
                    break block14;
                }
                catch (SQLiteException sQLiteException) {
                    break block13;
                }
                catch (Throwable throwable) {
                    cursor = null;
                    break block14;
                }
                catch (SQLiteException sQLiteException) {
                    cursor = null;
                }
            }
            cursor2 = cursor;
            try {
                void var14_13;
                this.t().y().a("Error querying conditional property", abb.a(string2), this.o().c(string3), var14_13);
                if (cursor == null) return null;
            }
            catch (Throwable throwable) {
                cursor = cursor2;
            }
            cursor.close();
            return null;
        }
        if (cursor == null) throw var1_5;
        cursor.close();
        throw var1_5;
    }

    /*
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    public final byte[] d(String string2) {
        void var1_4;
        Cursor cursor;
        block11 : {
            Cursor cursor2;
            block10 : {
                byte[] arrby;
                block9 : {
                    ah.a(string2);
                    this.c();
                    this.Q();
                    cursor = cursor2 = this.A().query("apps", new String[]{"remote_config"}, "app_id=?", new String[]{string2}, null, null, null);
                    boolean bl2 = cursor2.moveToFirst();
                    if (bl2) break block9;
                    if (cursor2 == null) return null;
                    cursor2.close();
                    return null;
                }
                cursor = cursor2;
                try {
                    arrby = cursor2.getBlob(0);
                    cursor = cursor2;
                    if (cursor2.moveToNext()) {
                        cursor = cursor2;
                        this.t().y().a("Got multiple records for app config, expected one. appId", abb.a(string2));
                    }
                    if (cursor2 == null) return arrby;
                }
                catch (SQLiteException sQLiteException) {
                    break block10;
                }
                cursor2.close();
                return arrby;
                catch (Throwable throwable) {
                    cursor = null;
                    break block11;
                }
                catch (SQLiteException sQLiteException) {
                    cursor2 = null;
                }
            }
            cursor = cursor2;
            try {
                void var5_11;
                this.t().y().a("Error querying remote config. appId", abb.a(string2), var5_11);
                if (cursor2 == null) return null;
            }
            catch (Throwable throwable) {
                // empty catch block
            }
            cursor2.close();
            return null;
        }
        if (cursor == null) throw var1_4;
        cursor.close();
        throw var1_4;
    }

    public final int e(String string2, String string3) {
        ah.a(string2);
        ah.a(string3);
        this.c();
        this.Q();
        try {
            int n2 = this.A().delete("conditional_properties", "app_id=? and name=?", new String[]{string2, string3});
            return n2;
        }
        catch (SQLiteException sQLiteException) {
            this.t().y().a("Error deleting conditional property", abb.a(string2), this.o().c(string3), (Object)sQLiteException);
            return 0;
        }
    }

    /*
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    final Map<Integer, agc> e(String string2) {
        void var1_4;
        SQLiteDatabase sQLiteDatabase;
        block13 : {
            Cursor cursor;
            block12 : {
                boolean bl2;
                a<Integer, agc> a2;
                block11 : {
                    this.Q();
                    this.c();
                    ah.a(string2);
                    sQLiteDatabase = this.A();
                    cursor = sQLiteDatabase.query("audience_filter_values", new String[]{"audience_id", "current_results"}, "app_id=?", new String[]{string2}, null, null, null);
                    sQLiteDatabase = cursor;
                    bl2 = cursor.moveToFirst();
                    if (bl2) break block11;
                    if (cursor == null) return null;
                    cursor.close();
                    return null;
                }
                sQLiteDatabase = cursor;
                try {
                    a2 = new a<Integer, agc>();
                    do {
                        sQLiteDatabase = cursor;
                        int n2 = cursor.getInt(0);
                        sQLiteDatabase = cursor;
                        Object object = cursor.getBlob(1);
                        sQLiteDatabase = cursor;
                        object = bjp.a(object, 0, ((byte[])object).length);
                        sQLiteDatabase = cursor;
                        agc agc2 = new agc();
                        sQLiteDatabase = cursor;
                        try {
                            agc2.a((bjp)object);
                            sQLiteDatabase = cursor;
                            a2.put(n2, agc2);
                        }
                        catch (IOException iOException) {
                            sQLiteDatabase = cursor;
                            this.t().y().a("Failed to merge filter results. appId, audienceId, error", abb.a(string2), n2, iOException);
                        }
                        sQLiteDatabase = cursor;
                    } while (bl2 = cursor.moveToNext());
                    if (cursor == null) return a2;
                }
                catch (SQLiteException sQLiteException) {
                    break block12;
                }
                cursor.close();
                return a2;
                catch (Throwable throwable) {
                    sQLiteDatabase = null;
                    break block13;
                }
                catch (SQLiteException sQLiteException) {
                    cursor = null;
                }
            }
            sQLiteDatabase = cursor;
            try {
                void var6_11;
                this.t().y().a("Database error querying filter results. appId", abb.a(string2), var6_11);
                if (cursor == null) return null;
            }
            catch (Throwable throwable) {
                // empty catch block
            }
            cursor.close();
            return null;
        }
        if (sQLiteDatabase == null) throw var1_4;
        sQLiteDatabase.close();
        throw var1_4;
    }

    public final long f(String string2) {
        ah.a(string2);
        return this.a("select count(1) from events where app_id=? and name not like '!_%' escape '!'", new String[]{string2}, 0L);
    }

    /*
     * Exception decompiling
     */
    final Map<Integer, List<afo>> f(String var1_1, String var2_5) {
        // This method has failed to decompile.  When submitting a bug report, please provide this stack trace, and (if you hold appropriate legal rights) the relevant class file.
        // org.benf.cfr.reader.util.ConfusedCFRException: Tried to end blocks [1[TRYBLOCK]], but top level block is 12[SIMPLE_IF_TAKEN]
        // org.benf.cfr.reader.bytecode.analysis.opgraph.Op04StructuredStatement.processEndingBlocks(Op04StructuredStatement.java:416)
        // org.benf.cfr.reader.bytecode.analysis.opgraph.Op04StructuredStatement.buildNestedBlocks(Op04StructuredStatement.java:468)
        // org.benf.cfr.reader.bytecode.analysis.opgraph.Op03SimpleStatement.createInitialStructuredBlock(Op03SimpleStatement.java:2960)
        // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisInner(CodeAnalyser.java:818)
        // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisOrWrapFail(CodeAnalyser.java:196)
        // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysis(CodeAnalyser.java:141)
        // org.benf.cfr.reader.entities.attributes.AttributeCode.analyse(AttributeCode.java:95)
        // org.benf.cfr.reader.entities.Method.analyse(Method.java:372)
        // org.benf.cfr.reader.entities.ClassFile.analyseMid(ClassFile.java:867)
        // org.benf.cfr.reader.entities.ClassFile.analyseTop(ClassFile.java:768)
        // org.benf.cfr.reader.Main.doJar(Main.java:141)
        // org.benf.cfr.reader.Main.main(Main.java:242)
        throw new IllegalStateException("Decompilation failed");
    }

    /*
     * Exception decompiling
     */
    final Map<Integer, List<afr>> g(String var1_1, String var2_5) {
        // This method has failed to decompile.  When submitting a bug report, please provide this stack trace, and (if you hold appropriate legal rights) the relevant class file.
        // org.benf.cfr.reader.util.ConfusedCFRException: Tried to end blocks [1[TRYBLOCK]], but top level block is 12[SIMPLE_IF_TAKEN]
        // org.benf.cfr.reader.bytecode.analysis.opgraph.Op04StructuredStatement.processEndingBlocks(Op04StructuredStatement.java:416)
        // org.benf.cfr.reader.bytecode.analysis.opgraph.Op04StructuredStatement.buildNestedBlocks(Op04StructuredStatement.java:468)
        // org.benf.cfr.reader.bytecode.analysis.opgraph.Op03SimpleStatement.createInitialStructuredBlock(Op03SimpleStatement.java:2960)
        // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisInner(CodeAnalyser.java:818)
        // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisOrWrapFail(CodeAnalyser.java:196)
        // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysis(CodeAnalyser.java:141)
        // org.benf.cfr.reader.entities.attributes.AttributeCode.analyse(AttributeCode.java:95)
        // org.benf.cfr.reader.entities.Method.analyse(Method.java:372)
        // org.benf.cfr.reader.entities.ClassFile.analyseMid(ClassFile.java:867)
        // org.benf.cfr.reader.entities.ClassFile.analyseTop(ClassFile.java:768)
        // org.benf.cfr.reader.Main.doJar(Main.java:141)
        // org.benf.cfr.reader.Main.main(Main.java:242)
        throw new IllegalStateException("Decompilation failed");
    }

    /*
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    protected final long h(String string2, String string3) {
        SQLiteDatabase sQLiteDatabase;
        Throwable throwable22222;
        block12 : {
            long l2;
            block10 : {
                void var7_8;
                block11 : {
                    block9 : {
                        StringBuilder stringBuilder;
                        block7 : {
                            block8 : {
                                long l3;
                                ah.a(string2);
                                ah.a(string3);
                                this.c();
                                this.Q();
                                sQLiteDatabase = this.A();
                                sQLiteDatabase.beginTransaction();
                                stringBuilder = new StringBuilder(String.valueOf(string3).length() + 32);
                                stringBuilder.append("select ");
                                stringBuilder.append(string3);
                                stringBuilder.append(" from app2 where app_id=?");
                                l2 = l3 = this.a(stringBuilder.toString(), new String[]{string2}, -1L);
                                if (l3 != -1L) break block7;
                                stringBuilder = new ContentValues();
                                stringBuilder.put("app_id", string2);
                                stringBuilder.put("first_open_count", Integer.valueOf(0));
                                stringBuilder.put("previous_install_count", Integer.valueOf(0));
                                if (sQLiteDatabase.insertWithOnConflict("app2", null, (ContentValues)stringBuilder, 5) != -1L) break block8;
                                this.t().y().a("Failed to insert column (got -1). appId", abb.a(string2), string3);
                                sQLiteDatabase.endTransaction();
                                return -1L;
                            }
                            l2 = 0L;
                        }
                        stringBuilder = new ContentValues();
                        stringBuilder.put("app_id", string2);
                        stringBuilder.put(string3, Long.valueOf(1L + l2));
                        if ((long)sQLiteDatabase.update("app2", (ContentValues)stringBuilder, "app_id = ?", new String[]{string2}) != 0L) break block9;
                        this.t().y().a("Failed to update column (got 0). appId", abb.a(string2), string3);
                        sQLiteDatabase.endTransaction();
                        return -1L;
                    }
                    try {
                        try {
                            sQLiteDatabase.setTransactionSuccessful();
                            break block10;
                        }
                        catch (SQLiteException sQLiteException) {
                            break block11;
                        }
                    }
                    catch (Throwable throwable22222) {
                        break block12;
                    }
                    catch (SQLiteException sQLiteException) {
                        l2 = 0L;
                    }
                }
                this.t().y().a("Error inserting column. appId", abb.a(string2), string3, var7_8);
            }
            sQLiteDatabase.endTransaction();
            return l2;
        }
        sQLiteDatabase.endTransaction();
        throw throwable22222;
    }

    @Override
    protected final boolean w() {
        return false;
    }

    public final void x() {
        this.Q();
        this.A().beginTransaction();
    }

    public final void y() {
        this.Q();
        this.A().setTransactionSuccessful();
    }

    public final void z() {
        this.Q();
        this.A().endTransaction();
    }
}

