/*
 * Decompiled with CFR 0_132.
 */
package com.google.android.gms.internal;

import com.google.android.gms.common.internal.ah;
import com.google.android.gms.internal.asj;
import com.google.android.gms.internal.asm;
import com.google.android.gms.internal.asn;
import com.google.android.gms.internal.aso;
import com.google.android.gms.internal.asp;
import com.google.android.gms.internal.asq;
import com.google.android.gms.internal.asu;
import com.google.android.gms.internal.asv;
import com.google.android.gms.internal.asw;
import java.util.List;

public final class alc {
    public static double a(asj<?> asj2, asj<?> asj3) {
        boolean bl2 = false;
        boolean bl3 = asj2 != null;
        ah.b(bl3);
        bl3 = bl2;
        if (asj3 != null) {
            bl3 = true;
        }
        ah.b(bl3);
        double d2 = alc.b(asj2);
        double d3 = alc.b(asj3);
        if (!Double.isNaN(d2)) {
            if (Double.isNaN(d3)) {
                return Double.NaN;
            }
            if (d2 == Double.POSITIVE_INFINITY && d3 == Double.NEGATIVE_INFINITY || d2 == Double.NEGATIVE_INFINITY && d3 == Double.POSITIVE_INFINITY) {
                return Double.NaN;
            }
            if (Double.isInfinite(d2) && !Double.isInfinite(d3)) {
                return d2;
            }
            if (!Double.isInfinite(d2) && Double.isInfinite(d3)) {
                return d3;
            }
            return d2 + d3;
        }
        return Double.NaN;
    }

    public static boolean a(asj<?> object) {
        block8 : {
            block12 : {
                block10 : {
                    block11 : {
                        block9 : {
                            boolean bl2 = object != null;
                            ah.b(bl2);
                            if (object == asp.e) break block8;
                            if (object == asp.d) {
                                return false;
                            }
                            if (object instanceof asm) {
                                return (Boolean)((asm)object).b();
                            }
                            if (!(object instanceof asn)) break block9;
                            if ((Double)(object = (asn)object).b() == 0.0 || (Double)object.b() == 0.0 || Double.isNaN((Double)object.b())) {
                                return false;
                            }
                            break block10;
                        }
                        if (!(object instanceof asw)) break block11;
                        if (((String)((asw)object).b()).isEmpty()) {
                            return false;
                        }
                        break block10;
                    }
                    if (alc.f(object)) break block12;
                }
                return true;
            }
            object = object.toString();
            StringBuilder stringBuilder = new StringBuilder(String.valueOf(object).length() + 33);
            stringBuilder.append("Illegal type given to isTruthy: ");
            stringBuilder.append((String)object);
            stringBuilder.append(".");
            throw new IllegalArgumentException(stringBuilder.toString());
        }
        return false;
    }

    /*
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    public static double b(asj<?> object) {
        Object object2;
        block12 : {
            do {
                boolean bl2 = object != null;
                ah.b(bl2);
                if (object == asp.e) {
                    return Double.NaN;
                }
                if (object == asp.d) {
                    return 0.0;
                }
                if (object instanceof asm) {
                    if ((Boolean)((asm)object).b() == false) return 0.0;
                    return 1.0;
                }
                if (object instanceof asn) {
                    return (Double)((asn)object).b();
                }
                if (!(object instanceof asq)) break;
                object2 = (asq)object;
                if (((List)object2.b()).isEmpty()) {
                    return 0.0;
                }
                if (((List)object2.b()).size() == 1) {
                    object = new asw(alc.d(object2.b(0)));
                    continue;
                }
                break block12;
                break;
            } while (true);
            if (object instanceof asw) {
                if (((String)(object = (asw)object).b()).isEmpty()) {
                    return 0.0;
                }
                return Double.parseDouble((String)object.b());
            }
        }
        if (!alc.f(object)) {
            return Double.NaN;
        }
        object = object.toString();
        object2 = new StringBuilder(String.valueOf(object).length() + 41);
        object2.append("Illegal type given to numberEquivalent: ");
        object2.append((String)object);
        object2.append(".");
        throw new IllegalArgumentException(object2.toString());
        catch (NumberFormatException numberFormatException) {
            return Double.NaN;
        }
    }

    public static boolean b(asj<?> object, asj<?> object2) {
        block16 : {
            block17 : {
                Object object3;
                block21 : {
                    block20 : {
                        block19 : {
                            block18 : {
                                boolean bl2 = object != null;
                                ah.b(bl2);
                                bl2 = object2 != null;
                                ah.b(bl2);
                                if (alc.f(object)) break block16;
                                if (alc.f(object2)) break block17;
                                if (object instanceof asu || object instanceof asq) break block18;
                                object3 = object;
                                if (!(object instanceof aso)) break block19;
                            }
                            object3 = new asw(alc.d(object));
                        }
                        if (object2 instanceof asu || object2 instanceof asq) break block20;
                        object = object2;
                        if (!(object2 instanceof aso)) break block21;
                    }
                    object = new asw(alc.d(object2));
                }
                if (object3 instanceof asw && object instanceof asw) {
                    if (((String)((asw)object3).b()).compareTo((String)((asw)object).b()) < 0) {
                        return true;
                    }
                    return false;
                }
                double d2 = alc.b(object3);
                double d3 = alc.b(object);
                if (!Double.isNaN(d2)) {
                    if (Double.isNaN(d3)) {
                        return false;
                    }
                    if (d2 == 0.0 && d3 == 0.0 || d2 == 0.0 && d3 == 0.0) {
                        return false;
                    }
                    if (d2 == Double.POSITIVE_INFINITY) {
                        return false;
                    }
                    if (d3 == Double.POSITIVE_INFINITY) {
                        return true;
                    }
                    if (d3 == Double.NEGATIVE_INFINITY) {
                        return false;
                    }
                    if (d2 == Double.NEGATIVE_INFINITY) {
                        return true;
                    }
                    if (Double.compare(d2, d3) < 0) {
                        return true;
                    }
                }
                return false;
            }
            object = object2.toString();
            object2 = new StringBuilder(String.valueOf(object).length() + 50);
            object2.append("Illegal type given to abstractRelationalCompare: ");
            object2.append((String)object);
            object2.append(".");
            throw new IllegalArgumentException(object2.toString());
        }
        object = object.toString();
        object2 = new StringBuilder(String.valueOf(object).length() + 50);
        object2.append("Illegal type given to abstractRelationalCompare: ");
        object2.append((String)object);
        object2.append(".");
        throw new IllegalArgumentException(object2.toString());
    }

    public static double c(asj<?> asj2) {
        double d2 = alc.b(asj2);
        if (Double.isNaN(d2)) {
            return 0.0;
        }
        if (d2 != 0.0 && d2 != 0.0) {
            if (Double.isInfinite(d2)) {
                return d2;
            }
            return Math.signum(d2) * Math.floor(Math.abs(d2));
        }
        return d2;
    }

    /*
     * Enabled aggressive block sorting
     */
    public static boolean c(asj<?> object, asj<?> object2) {
        Object object3 = object;
        do {
            block34 : {
                String string2;
                block37 : {
                    block32 : {
                        block36 : {
                            block35 : {
                                block33 : {
                                    block31 : {
                                        block29 : {
                                            int n2;
                                            block30 : {
                                                boolean bl2 = object3 != null;
                                                ah.b(bl2);
                                                bl2 = object2 != null;
                                                ah.b(bl2);
                                                if (alc.f(object3)) {
                                                    object = object3.toString();
                                                    object2 = new StringBuilder(String.valueOf(object).length() + 48);
                                                    object2.append("Illegal type given to abstractEqualityCompare: ");
                                                    object2.append((String)object);
                                                    object2.append(".");
                                                    throw new IllegalArgumentException(object2.toString());
                                                }
                                                if (alc.f(object2)) {
                                                    object = object2.toString();
                                                    object2 = new StringBuilder(String.valueOf(object).length() + 48);
                                                    object2.append("Illegal type given to abstractEqualityCompare: ");
                                                    object2.append((String)object);
                                                    object2.append(".");
                                                    throw new IllegalArgumentException(object2.toString());
                                                }
                                                object = alc.e(object3);
                                                if (!object.equals(string2 = alc.e(object2))) break block29;
                                                switch (object.hashCode()) {
                                                    default: {
                                                        break;
                                                    }
                                                    case 1729365000: {
                                                        if (!object.equals("Boolean")) break;
                                                        n2 = 4;
                                                        break block30;
                                                    }
                                                    case 965837104: {
                                                        if (!object.equals("Undefined")) break;
                                                        n2 = 0;
                                                        break block30;
                                                    }
                                                    case 2439591: {
                                                        if (!object.equals("Null")) break;
                                                        n2 = 1;
                                                        break block30;
                                                    }
                                                    case -1808118735: {
                                                        if (!object.equals("String")) break;
                                                        n2 = 3;
                                                        break block30;
                                                    }
                                                    case -1939501217: {
                                                        if (!object.equals("Object")) break;
                                                        n2 = 5;
                                                        break block30;
                                                    }
                                                    case -1950496919: {
                                                        if (!object.equals("Number")) break;
                                                        n2 = 2;
                                                        break block30;
                                                    }
                                                }
                                                n2 = -1;
                                            }
                                            switch (n2) {
                                                default: {
                                                    return false;
                                                }
                                                case 5: {
                                                    if (object3 == object2) {
                                                        return true;
                                                    }
                                                    return false;
                                                }
                                                case 4: {
                                                    if ((Boolean)((asm)object3).b() == (Boolean)((asm)object2).b()) {
                                                        return true;
                                                    }
                                                    return false;
                                                }
                                                case 3: {
                                                    return ((String)((asw)object3).b()).equals((String)((asw)object2).b());
                                                }
                                                case 2: {
                                                    double d2 = (Double)((asn)object3).b();
                                                    double d3 = (Double)((asn)object2).b();
                                                    if (!Double.isNaN(d2)) {
                                                        if (Double.isNaN(d3)) {
                                                            return false;
                                                        }
                                                        if (d2 == d3) {
                                                            return true;
                                                        }
                                                    }
                                                    return false;
                                                }
                                                case 0: 
                                                case 1: 
                                            }
                                            return true;
                                        }
                                        if (object3 == asp.e || object3 == asp.d) {
                                            if (object2 == asp.e) {
                                                return true;
                                            }
                                            if (object2 == asp.d) {
                                                return true;
                                            }
                                        }
                                        if (!object.equals("Number") || !string2.equals("String")) break block31;
                                        object = new asn(alc.b(object2));
                                        break block32;
                                    }
                                    if (!object.equals("String") || !string2.equals("Number")) break block33;
                                    object = new asn(alc.b(object3));
                                    break block34;
                                }
                                if (!object.equals("Boolean")) break block35;
                                object = new asn(alc.b(object3));
                                break block34;
                            }
                            if (!string2.equals("Boolean")) break block36;
                            object = new asn(alc.b(object2));
                            break block32;
                        }
                        if (!object.equals("String") && !object.equals("Number") || !string2.equals("Object")) break block37;
                        object = new asw(alc.d(object2));
                    }
                    object2 = object;
                    continue;
                }
                if (!object.equals("Object") || !string2.equals("String") && !string2.equals("Number")) break;
                object = new asw(alc.d(object3));
            }
            object3 = object;
        } while (true);
        return false;
    }

    public static String d(asj<?> asj2) {
        RuntimeException runtimeException;
        super("d2j fail translate: java.lang.RuntimeException: can not merge I and Z\n\tat com.googlecode.dex2jar.ir.TypeClass.merge(TypeClass.java:100)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeRef.updateTypeClass(TypeTransformer.java:174)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.provideAs(TypeTransformer.java:780)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.enexpr(TypeTransformer.java:659)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.exExpr(TypeTransformer.java:719)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.exExpr(TypeTransformer.java:703)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.e2expr(TypeTransformer.java:632)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.exExpr(TypeTransformer.java:716)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.exExpr(TypeTransformer.java:703)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.e2expr(TypeTransformer.java:632)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.exExpr(TypeTransformer.java:716)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.exExpr(TypeTransformer.java:703)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.s2stmt(TypeTransformer.java:820)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.sxStmt(TypeTransformer.java:843)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.analyze(TypeTransformer.java:206)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer.transform(TypeTransformer.java:44)\n\tat com.googlecode.d2j.dex.Dex2jar$2.optimize(Dex2jar.java:162)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertCode(Dex2Asm.java:414)\n\tat com.googlecode.d2j.dex.ExDex2Asm.convertCode(ExDex2Asm.java:42)\n\tat com.googlecode.d2j.dex.Dex2jar$2.convertCode(Dex2jar.java:128)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertMethod(Dex2Asm.java:509)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertClass(Dex2Asm.java:406)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertDex(Dex2Asm.java:422)\n\tat com.googlecode.d2j.dex.Dex2jar.doTranslate(Dex2jar.java:172)\n\tat com.googlecode.d2j.dex.Dex2jar.to(Dex2jar.java:272)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.doCommandLine(Dex2jarCmd.java:108)\n\tat com.googlecode.dex2jar.tools.BaseCmd.doMain(BaseCmd.java:288)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.main(Dex2jarCmd.java:32)\n");
        throw runtimeException;
    }

    public static boolean d(asj<?> object, asj<?> object2) {
        block19 : {
            block20 : {
                int n2;
                block21 : {
                    boolean bl2 = object != null;
                    ah.b(bl2);
                    bl2 = object2 != null;
                    ah.b(bl2);
                    if (alc.f(object)) break block19;
                    if (alc.f(object2)) break block20;
                    String string2 = alc.e(object);
                    if (!string2.equals(alc.e(object2))) {
                        return false;
                    }
                    switch (string2.hashCode()) {
                        default: {
                            break;
                        }
                        case 1729365000: {
                            if (!string2.equals("Boolean")) break;
                            n2 = 4;
                            break block21;
                        }
                        case 965837104: {
                            if (!string2.equals("Undefined")) break;
                            n2 = 0;
                            break block21;
                        }
                        case 2439591: {
                            if (!string2.equals("Null")) break;
                            n2 = 1;
                            break block21;
                        }
                        case -1808118735: {
                            if (!string2.equals("String")) break;
                            n2 = 3;
                            break block21;
                        }
                        case -1950496919: {
                            if (!string2.equals("Number")) break;
                            n2 = 2;
                            break block21;
                        }
                    }
                    n2 = -1;
                }
                switch (n2) {
                    default: {
                        if (object != object2) break;
                        return true;
                    }
                    case 4: {
                        if ((Boolean)((asm)object).b() == (Boolean)((asm)object2).b()) {
                            return true;
                        }
                        return false;
                    }
                    case 3: {
                        if (((String)((asw)object).b()).equals((String)((asw)object2).b())) {
                            return true;
                        }
                        return false;
                    }
                    case 2: {
                        double d2 = (Double)((asn)object).b();
                        double d3 = (Double)((asn)object2).b();
                        if (!Double.isNaN(d2)) {
                            if (Double.isNaN(d3)) {
                                return false;
                            }
                            if (d2 == d3) {
                                return true;
                            }
                        }
                        return false;
                    }
                    case 0: 
                    case 1: {
                        return true;
                    }
                }
                return false;
            }
            object = object2.toString();
            object2 = new StringBuilder(String.valueOf(object).length() + 46);
            object2.append("Illegal type given to strictEqualityCompare: ");
            object2.append((String)object);
            object2.append(".");
            throw new IllegalArgumentException(object2.toString());
        }
        object = object.toString();
        object2 = new StringBuilder(String.valueOf(object).length() + 46);
        object2.append("Illegal type given to strictEqualityCompare: ");
        object2.append((String)object);
        object2.append(".");
        throw new IllegalArgumentException(object2.toString());
    }

    private static String e(asj<?> asj2) {
        if (asj2 == asp.e) {
            return "Undefined";
        }
        if (asj2 == asp.d) {
            return "Null";
        }
        if (asj2 instanceof asm) {
            return "Boolean";
        }
        if (asj2 instanceof asn) {
            return "Number";
        }
        if (asj2 instanceof asw) {
            return "String";
        }
        return "Object";
    }

    private static boolean f(asj<?> asj2) {
        if (!(asj2 instanceof asv || asj2 instanceof asp && asj2 != asp.e && asj2 != asp.d)) {
            return false;
        }
        return true;
    }
}

