/*
 * Decompiled with CFR 0_132.
 */
package com.google.android.gms.internal;

import com.google.android.gms.internal.ak;
import com.google.android.gms.internal.bmy;
import com.google.android.gms.internal.bmz;
import com.google.android.gms.internal.bnc;
import com.google.android.gms.internal.bnd;
import com.google.android.gms.internal.bnj;
import com.google.android.gms.internal.bnl;
import com.google.android.gms.internal.he;
import java.io.IOException;
import java.text.Normalizer;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Locale;

@ak
public final class bnk {
    private final bmz a;
    private final int b;
    private String c;
    private String d;
    private final boolean e;
    private final int f;
    private final int g;

    public bnk(int n2, int n3, int n4) {
        this.b = n2;
        this.e = false;
        this.f = n3 <= 64 && n3 >= 0 ? n3 : 64;
        this.g = n4 <= 0 ? 1 : n4;
        this.a = new bnj(this.f);
    }

    private final boolean a(String charSequence, HashSet<String> hashSet) {
        String[] arrstring = charSequence.split("\n");
        if (arrstring.length == 0) {
            return true;
        }
        for (int i2 = 0; i2 < arrstring.length; ++i2) {
            int n2;
            int n3;
            int n4;
            String[] arrstring2 = arrstring[i2];
            Object object = arrstring2;
            if (arrstring2.indexOf("'") != -1) {
                int n5;
                charSequence = new StringBuilder((String)arrstring2);
                n3 = 1;
                n2 = 0;
                while ((n5 = n3 + 2) <= charSequence.length()) {
                    n4 = n3;
                    if (charSequence.charAt(n3) == '\'') {
                        if (!(charSequence.charAt(n3 - 1) == ' ' || charSequence.charAt(n2 = n3 + 1) != 's' && charSequence.charAt(n2) != 'S' || n5 != charSequence.length() && charSequence.charAt(n5) != ' ')) {
                            charSequence.insert(n3, ' ');
                            n3 = n5;
                        } else {
                            charSequence.setCharAt(n3, ' ');
                        }
                        n2 = 1;
                        n4 = n3;
                    }
                    n3 = n4 + 1;
                }
                charSequence = n2 != 0 ? charSequence.toString() : null;
                object = arrstring2;
                if (charSequence != null) {
                    this.d = charSequence;
                    object = charSequence;
                }
            }
            if ((arrstring2 = bnd.a((String)object, true)).length < this.g) continue;
            for (n3 = 0; n3 < arrstring2.length; ++n3) {
                block12 : {
                    charSequence = "";
                    for (n2 = 0; n2 < this.g; ++n2) {
                        n4 = n3 + n2;
                        if (n4 >= arrstring2.length) {
                            n2 = 0;
                            break block12;
                        }
                        object = charSequence;
                        if (n2 > 0) {
                            object = String.valueOf(charSequence).concat(" ");
                        }
                        charSequence = String.valueOf(object);
                        object = String.valueOf(arrstring2[n4]);
                        charSequence = object.length() != 0 ? charSequence.concat((String)object) : new String((String)charSequence);
                    }
                    n2 = 1;
                }
                if (n2 == 0) break;
                hashSet.add((String)charSequence);
                if (hashSet.size() < this.b) continue;
                return false;
            }
            if (hashSet.size() < this.b) continue;
            return false;
        }
        return true;
    }

    public final String a(ArrayList<String> object, ArrayList<bmy> object2) {
        Collections.sort(object2, new bnl(this));
        Object object3 = new HashSet<String>();
        for (int i2 = 0; i2 < object2.size() && this.a(Normalizer.normalize(object.get(object2.get(i2).e()), Normalizer.Form.NFKC).toLowerCase(Locale.US), (HashSet<String>)object3); ++i2) {
        }
        object = new bnc();
        this.c = "";
        object2 = object3.iterator();
        while (object2.hasNext()) {
            object3 = (String)object2.next();
            try {
                object.a(this.a.a((String)object3));
            }
            catch (IOException iOException) {
                he.b("Error while writing hash to byteStream", iOException);
                break;
            }
        }
        return object.toString();
    }
}

