/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.os.Parcel
 *  android.os.Parcelable
 *  android.os.Parcelable$Creator
 *  android.util.Base64
 */
package com.google.android.gms.internal;

import android.os.Parcel;
import android.os.Parcelable;
import android.util.Base64;
import com.google.android.gms.ads.internal.av;
import com.google.android.gms.internal.ak;
import com.google.android.gms.internal.bpu;
import com.google.android.gms.internal.bzw;
import com.google.android.gms.internal.he;
import com.google.android.gms.internal.xb;
import java.io.IOException;
import java.io.UnsupportedEncodingException;

@ak
final class caa {
    final bpu a;
    final String b;
    final int c;

    private caa(bpu bpu2, String string2, int n2) {
        this.a = bpu2;
        this.b = string2;
        this.c = n2;
    }

    caa(bzw bzw2) {
        this(bzw2.a(), bzw2.c(), bzw2.b());
    }

    /*
     * WARNING - Removed back jump from a try to a catch block - possible behaviour change.
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    static caa a(String string2) {
        Throwable throwable2222;
        String[] arrstring = string2.split("\u0000");
        if (arrstring.length != 3) throw new IOException("Incorrect field count for QueueSeed.");
        string2 = Parcel.obtain();
        Object object = new String(Base64.decode((String)arrstring[0], (int)0), "UTF-8");
        int n2 = Integer.parseInt(arrstring[1]);
        arrstring = Base64.decode((String)arrstring[2], (int)0);
        string2.unmarshall((byte[])arrstring, 0, arrstring.length);
        string2.setDataPosition(0);
        object = new caa((bpu)bpu.CREATOR.createFromParcel((Parcel)string2), (String)object, n2);
        string2.recycle();
        return object;
        {
            catch (Throwable throwable2222) {
            }
            catch (xb | IllegalArgumentException | IllegalStateException runtimeException) {}
            {
                av.i().a(runtimeException, "QueueSeed.decode");
                throw new IOException("Malformed QueueSeed encoding.", runtimeException);
            }
        }
        string2.recycle();
        throw throwable2222;
    }

    /*
     * WARNING - Removed back jump from a try to a catch block - possible behaviour change.
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    final String a() {
        String string2;
        Parcel parcel = Parcel.obtain();
        try {
            string2 = Base64.encodeToString((byte[])this.b.getBytes("UTF-8"), (int)0);
            String string3 = Integer.toString(this.c);
            this.a.writeToParcel(parcel, 0);
            String string4 = Base64.encodeToString((byte[])parcel.marshall(), (int)0);
            StringBuilder stringBuilder = new StringBuilder(String.valueOf(string2).length() + 2 + String.valueOf(string3).length() + String.valueOf(string4).length());
            stringBuilder.append(string2);
            stringBuilder.append("\u0000");
            stringBuilder.append(string3);
            stringBuilder.append("\u0000");
            stringBuilder.append(string4);
            string2 = stringBuilder.toString();
        }
        catch (Throwable throwable) {}
        parcel.recycle();
        return string2;
        parcel.recycle();
        throw throwable;
        catch (UnsupportedEncodingException unsupportedEncodingException) {}
        {
            he.c("QueueSeed encode failed because UTF-8 is not available.");
        }
        parcel.recycle();
        return "";
    }
}

