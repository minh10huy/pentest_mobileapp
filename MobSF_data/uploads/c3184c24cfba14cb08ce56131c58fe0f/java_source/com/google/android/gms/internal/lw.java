/*
 * Decompiled with CFR 0_132.
 */
package com.google.android.gms.internal;

import com.google.android.gms.internal.ak;
import com.google.android.gms.internal.ls;
import com.google.android.gms.internal.lt;
import com.google.android.gms.internal.lv;
import com.google.android.gms.internal.lx;
import java.util.Iterator;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;

@ak
public class lw<T>
implements ls<T> {
    private final Object a = new Object();
    private int b = 0;
    private BlockingQueue<lx> c = new LinkedBlockingQueue<lx>();
    private T d;

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @Override
    public final void a(lv<T> lv2, lt lt2) {
        Object object = this.a;
        synchronized (object) {
            if (this.b == 1) {
                lv2.a(this.d);
            } else if (this.b == -1) {
                lt2.a();
            } else if (this.b == 0) {
                this.c.add(new lx(this, lv2, lt2));
            }
            return;
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @Override
    public final void a(T t2) {
        Object object = this.a;
        synchronized (object) {
            if (this.b != 0) {
                throw new UnsupportedOperationException();
            }
            this.d = t2;
            this.b = 1;
            Iterator<lx> iterator = this.c.iterator();
            do {
                if (!iterator.hasNext()) {
                    this.c.clear();
                    return;
                }
                iterator.next().a.a(t2);
            } while (true);
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public final void d() {
        Object object = this.a;
        synchronized (object) {
            if (this.b != 0) {
                throw new UnsupportedOperationException();
            }
            this.b = -1;
            Iterator<lx> iterator = this.c.iterator();
            do {
                if (!iterator.hasNext()) {
                    this.c.clear();
                    return;
                }
                iterator.next().b.a();
            } while (true);
        }
    }

    public final int e() {
        return this.b;
    }
}

