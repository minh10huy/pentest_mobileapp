/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.text.TextUtils
 */
package com.google.android.gms.internal;

import android.text.TextUtils;
import com.google.android.gms.ads.internal.av;
import com.google.android.gms.internal.ak;
import com.google.android.gms.internal.btn;
import com.google.android.gms.internal.btr;
import com.google.android.gms.internal.btv;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

@ak
public final class btx {
    private boolean a;
    private final List<btv> b = new LinkedList<btv>();
    private final Map<String, String> c = new LinkedHashMap<String, String>();
    private final Object d = new Object();
    private String e;
    private btx f;

    public btx(boolean bl2, String string2, String string3) {
        this.a = bl2;
        this.c.put("action", string2);
        this.c.put("ad_format", string3);
    }

    public final btv a() {
        return this.a(av.l().b());
    }

    public final btv a(long l2) {
        if (!this.a) {
            return null;
        }
        return new btv(l2, null, null);
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public final void a(btx btx2) {
        Object object = this.d;
        synchronized (object) {
            this.f = btx2;
            return;
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public final void a(String string2) {
        if (!this.a) {
            return;
        }
        Object object = this.d;
        synchronized (object) {
            this.e = string2;
            return;
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public final void a(String string2, String string3) {
        if (!this.a) {
            return;
        }
        if (TextUtils.isEmpty((CharSequence)string3)) {
            return;
        }
        Object object = av.i().b();
        if (object == null) {
            return;
        }
        Object object2 = this.d;
        synchronized (object2) {
            object = object.a(string2);
            Map<String, String> map = this.c;
            map.put(string2, object.a(map.get(string2), string3));
            return;
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public final /* varargs */ boolean a(btv btv2, long l2, String ... arrstring) {
        Object object = this.d;
        synchronized (object) {
            int n2 = arrstring.length;
            int n3 = 0;
            while (n3 < n2) {
                btv btv3 = new btv(l2, arrstring[n3], btv2);
                this.b.add(btv3);
                ++n3;
            }
            return true;
        }
    }

    public final /* varargs */ boolean a(btv btv2, String ... arrstring) {
        if (this.a && btv2 != null) {
            return this.a(btv2, av.l().b(), arrstring);
        }
        return false;
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public final String b() {
        CharSequence charSequence = new StringBuilder();
        Object object = this.d;
        synchronized (object) {
            for (btv btv2 : this.b) {
                long l2 = btv2.a();
                String string2 = btv2.b();
                if ((btv2 = btv2.c()) == null || l2 <= 0L) continue;
                long l3 = btv2.a();
                charSequence.append(string2);
                charSequence.append('.');
                charSequence.append(l2 - l3);
                charSequence.append(',');
            }
            this.b.clear();
            if (!TextUtils.isEmpty((CharSequence)this.e)) {
                charSequence.append(this.e);
                return charSequence.toString();
            } else {
                if (charSequence.length() <= 0) return charSequence.toString();
                charSequence.setLength(charSequence.length() - 1);
            }
            return charSequence.toString();
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    final Map<String, String> c() {
        Object object = this.d;
        synchronized (object) {
            Map<String, String> map = av.i().b();
            if (map == null) return this.c;
            if (this.f == null) return this.c;
            return map.a(this.c, this.f.c());
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Converted monitor instructions to comments
     * Lifted jumps to return sites
     */
    public final btv d() {
        Object object = this.d;
        // MONITORENTER : object
        // MONITOREXIT : object
        return null;
    }
}

