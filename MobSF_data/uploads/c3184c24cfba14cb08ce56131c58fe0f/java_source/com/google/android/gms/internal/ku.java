/*
 * Decompiled with CFR 0_132.
 */
package com.google.android.gms.internal;

import com.google.android.gms.ads.internal.av;
import com.google.android.gms.internal.ak;
import com.google.android.gms.internal.bqj;
import com.google.android.gms.internal.bsz;
import com.google.android.gms.internal.btk;
import com.google.android.gms.internal.he;
import com.google.android.gms.internal.kp;
import com.google.android.gms.internal.kq;
import com.google.android.gms.internal.kr;
import com.google.android.gms.internal.kv;
import com.google.android.gms.internal.kw;
import com.google.android.gms.internal.kx;
import com.google.android.gms.internal.ky;
import com.google.android.gms.internal.kz;
import com.google.android.gms.internal.la;
import com.google.android.gms.internal.lb;
import com.google.android.gms.internal.lc;
import com.google.android.gms.internal.ld;
import com.google.android.gms.internal.le;
import com.google.android.gms.internal.lf;
import com.google.android.gms.internal.lk;
import com.google.android.gms.internal.lq;
import java.util.concurrent.CancellationException;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Executor;
import java.util.concurrent.Future;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.TimeUnit;

@ak
public final class ku {
    public static <T> ld<T> a(Throwable throwable) {
        return new ld(throwable);
    }

    public static <T> le<T> a(T t2) {
        return new le<T>(t2);
    }

    public static <V> lf<V> a(lf<V> lf2, long l2, TimeUnit object, ScheduledExecutorService scheduledExecutorService) {
        lq lq2 = new lq();
        ku.a(lq2, lf2);
        object = scheduledExecutorService.schedule(new ky(lq2), l2, (TimeUnit)((Object)object));
        ku.a(lf2, lq2);
        lq2.a(new kz((Future)object), lk.b);
        return lq2;
    }

    public static <A, B> lf<B> a(lf<A> lf2, kp<? super A, ? extends B> kp2, Executor executor) {
        lq lq2 = new lq();
        lf2.a(new kx(lq2, kp2, lf2), executor);
        ku.a(lq2, lf2);
        return lq2;
    }

    public static <A, B> lf<B> a(lf<A> lf2, kq<A, B> kq2, Executor executor) {
        lq lq2 = new lq();
        lf2.a(new kw(lq2, kq2, lf2), executor);
        ku.a(lq2, lf2);
        return lq2;
    }

    public static <V, X extends Throwable> lf<V> a(lf<? extends V> lf2, Class<X> class_, kp<? super X, ? extends V> kp2, Executor executor) {
        lq lq2 = new lq();
        ku.a(lq2, lf2);
        lf2.a(new la(lq2, lf2, class_, kp2, executor), lk.b);
        return lq2;
    }

    /*
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    public static <T> T a(Future<T> object, T t2) {
        Object v2;
        try {
            bsz<Long> bsz2 = btk.br;
            v2 = object.get(bqj.f().a(bsz2), TimeUnit.MILLISECONDS);
        }
        catch (Exception exception) {
            block3 : {
                object.cancel(true);
                he.b("Error waiting for future.", exception);
                object = exception;
                break block3;
                catch (InterruptedException interruptedException) {
                    object.cancel(true);
                    he.c("InterruptedException caught while resolving future.", interruptedException);
                    Thread.currentThread().interrupt();
                    object = interruptedException;
                }
            }
            av.i().a((Throwable)object, "Futures.resolveFuture");
            return t2;
        }
        return (T)v2;
    }

    /*
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    public static <T> T a(Future<T> object, T t2, long l2, TimeUnit timeUnit) {
        Object v2;
        try {
            v2 = object.get(l2, timeUnit);
        }
        catch (Exception exception) {
            block3 : {
                object.cancel(true);
                he.b("Error waiting for future.", exception);
                object = exception;
                break block3;
                catch (InterruptedException interruptedException) {
                    object.cancel(true);
                    he.c("InterruptedException caught while resolving future.", interruptedException);
                    Thread.currentThread().interrupt();
                    object = interruptedException;
                }
            }
            av.i().a((Throwable)object, "Futures.resolveFuture");
            return t2;
        }
        return (T)v2;
    }

    public static <V> void a(lf<V> lf2, kr<V> kr2, Executor executor) {
        lf2.a(new kv(kr2, lf2), executor);
    }

    private static <V> void a(lf<? extends V> lf2, lq<V> lq2) {
        ku.a(lq2, lf2);
        lf2.a(new lb(lq2, lf2), lk.b);
    }

    private static <A, B> void a(lf<A> lf2, Future<B> future) {
        lf2.a(new lc(lf2, future), lk.b);
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    static final /* synthetic */ void a(lq lq2, kp kp2, lf lf2) {
        if (lq2.isCancelled()) {
            return;
        }
        try {
            ku.a(kp2.a(lf2.get()), lq2);
            return;
        }
        catch (Exception exception) {
            lq2.a(exception);
            return;
        }
        catch (InterruptedException interruptedException) {
            Thread.currentThread().interrupt();
            lq2.a(interruptedException);
            return;
        }
        catch (ExecutionException executionException) {
            lq2.a(executionException.getCause());
            return;
        }
        catch (CancellationException cancellationException) {}
        lq2.cancel(true);
    }

    static final /* synthetic */ void a(lq lq2, lf lf2, Class class_, kp kp2, Executor executor) {
        Throwable throwable;
        try {
            lq2.b(lf2.get());
            return;
        }
        catch (Exception exception) {
        }
        catch (InterruptedException interruptedException) {
            Thread.currentThread().interrupt();
        }
        catch (ExecutionException executionException) {
            throwable = executionException.getCause();
        }
        if (class_.isInstance(throwable)) {
            ku.a(ku.a(ku.a(throwable), kp2, executor), lq2);
            return;
        }
        lq2.a(throwable);
    }
}

