/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.content.Context
 *  android.content.res.TypedArray
 *  android.graphics.Bitmap
 *  android.graphics.Bitmap$CompressFormat
 *  android.graphics.Matrix
 *  android.graphics.RectF
 *  android.graphics.drawable.Drawable
 *  android.os.AsyncTask
 *  android.util.AttributeSet
 */
package com.yalantis.ucrop.view;

import android.content.Context;
import android.content.res.TypedArray;
import android.graphics.Bitmap;
import android.graphics.Matrix;
import android.graphics.RectF;
import android.graphics.drawable.Drawable;
import android.os.AsyncTask;
import android.util.AttributeSet;
import com.yalantis.ucrop.a;
import com.yalantis.ucrop.a.c;
import com.yalantis.ucrop.b.d;
import com.yalantis.ucrop.d.g;
import com.yalantis.ucrop.view.b;
import java.lang.ref.WeakReference;
import java.util.Arrays;

public class a
extends com.yalantis.ucrop.view.b {
    private final RectF i = new RectF();
    private final Matrix j = new Matrix();
    private float k;
    private float l = 10.0f;
    private c m;
    private Runnable n;
    private Runnable o = null;
    private float p;
    private float q;
    private int r = 0;
    private int s = 0;
    private long t = 500L;

    public a(Context context) {
        this(context, null);
    }

    public a(Context context, AttributeSet attributeSet) {
        this(context, attributeSet, 0);
    }

    public a(Context context, AttributeSet attributeSet, int n2) {
        super(context, attributeSet, n2);
    }

    private void b(float f2, float f3) {
        this.q = Math.min(Math.min(this.i.width() / f2, this.i.width() / f3), Math.min(this.i.height() / f3, this.i.height() / f2));
        this.p = this.q * this.l;
    }

    private void c(float f2, float f3) {
        float f4 = this.i.width();
        float f5 = this.i.height();
        float f6 = Math.max(this.i.width() / f2, this.i.height() / f3);
        f2 = (f4 - f2 * f6) / 2.0f;
        f4 = this.i.left;
        f3 = (f5 - f3 * f6) / 2.0f;
        f5 = this.i.top;
        this.c.reset();
        this.c.postScale(f6, f6);
        this.c.postTranslate(f2 + f4, f3 + f5);
        this.setImageMatrix(this.c);
    }

    private float[] f() {
        this.j.reset();
        this.j.setRotate(- this.getCurrentAngle());
        RectF rectF = Arrays.copyOf(this.a, this.a.length);
        float[] arrf = g.a(this.i);
        this.j.mapPoints((float[])rectF);
        this.j.mapPoints(arrf);
        rectF = g.b((float[])rectF);
        arrf = g.b(arrf);
        float f2 = rectF.left - arrf.left;
        float f3 = rectF.top - arrf.top;
        float f4 = rectF.right - arrf.right;
        float f5 = rectF.bottom - arrf.bottom;
        arrf = new float[4];
        if (f2 <= 0.0f) {
            f2 = 0.0f;
        }
        arrf[0] = f2;
        f2 = f3 > 0.0f ? f3 : 0.0f;
        arrf[1] = f2;
        f2 = f4 < 0.0f ? f4 : 0.0f;
        arrf[2] = f2;
        f2 = f5 < 0.0f ? f5 : 0.0f;
        arrf[3] = f2;
        this.j.reset();
        this.j.setRotate(this.getCurrentAngle());
        this.j.mapPoints(arrf);
        return arrf;
    }

    private void g() {
        Drawable drawable2 = this.getDrawable();
        if (drawable2 == null) {
            return;
        }
        this.b(drawable2.getIntrinsicWidth(), drawable2.getIntrinsicHeight());
    }

    public void a() {
        this.removeCallbacks(this.n);
        this.removeCallbacks(this.o);
    }

    public void a(float f2) {
        this.a(f2, this.i.centerX(), this.i.centerY());
    }

    public void a(float f2, float f3, float f4) {
        if (f2 >= this.getMinScale()) {
            this.c(f2 / this.getCurrentScale(), f3, f4);
        }
    }

    protected void a(float f2, float f3, float f4, long l2) {
        float f5 = f2;
        if (f2 > this.getMaxScale()) {
            f5 = this.getMaxScale();
        }
        f2 = this.getCurrentScale();
        b b2 = new b(this, l2, f2, f5 - f2, f3, f4);
        this.o = b2;
        this.post((Runnable)b2);
    }

    protected void a(TypedArray typedArray) {
        float f2 = Math.abs(typedArray.getFloat(a.h.ucrop_UCropView_ucrop_aspect_ratio_x, 0.0f));
        float f3 = Math.abs(typedArray.getFloat(a.h.ucrop_UCropView_ucrop_aspect_ratio_y, 0.0f));
        if (f2 != 0.0f && f3 != 0.0f) {
            this.k = f2 / f3;
            return;
        }
        this.k = 0.0f;
    }

    public void a(Bitmap.CompressFormat object, int n2, com.yalantis.ucrop.a.a a2) {
        this.a();
        this.setImageToWrapCropBounds(false);
        d d2 = new d(this.i, g.b(this.a), this.getCurrentScale(), this.getCurrentAngle());
        object = new com.yalantis.ucrop.b.b(this.r, this.s, (Bitmap.CompressFormat)object, n2, this.getImageInputPath(), this.getImageOutputPath(), this.getExifInfo());
        new com.yalantis.ucrop.c.a(this.getContext(), this.getViewBitmap(), d2, (com.yalantis.ucrop.b.b)object, a2).execute((Object[])new Void[0]);
    }

    protected boolean a(float[] arrf) {
        this.j.reset();
        this.j.setRotate(- this.getCurrentAngle());
        arrf = Arrays.copyOf(arrf, arrf.length);
        this.j.mapPoints(arrf);
        float[] arrf2 = g.a(this.i);
        this.j.mapPoints(arrf2);
        return g.b(arrf).contains(g.b(arrf2));
    }

    public void b() {
        this.setImageToWrapCropBounds(true);
    }

    public void b(float f2) {
        this.b(f2, this.i.centerX(), this.i.centerY());
    }

    public void b(float f2, float f3, float f4) {
        if (f2 <= this.getMaxScale()) {
            this.c(f2 / this.getCurrentScale(), f3, f4);
        }
    }

    @Override
    protected void c() {
        int n2;
        super.c();
        Drawable drawable2 = this.getDrawable();
        if (drawable2 == null) {
            return;
        }
        float f2 = drawable2.getIntrinsicWidth();
        float f3 = drawable2.getIntrinsicHeight();
        if (this.k == 0.0f) {
            this.k = f2 / f3;
        }
        if ((n2 = (int)((float)this.d / this.k)) > this.e) {
            n2 = (int)((float)this.e * this.k);
            int n3 = (this.d - n2) / 2;
            this.i.set((float)n3, 0.0f, (float)(n2 + n3), (float)this.e);
        } else {
            int n4 = (this.e - n2) / 2;
            this.i.set(0.0f, (float)n4, (float)this.d, (float)(n2 + n4));
        }
        this.b(f2, f3);
        this.c(f2, f3);
        if (this.m != null) {
            this.m.a(this.k);
        }
        if (this.f != null) {
            this.f.b(this.getCurrentScale());
            this.f.a(this.getCurrentAngle());
        }
    }

    public void c(float f2) {
        this.d(f2, this.i.centerX(), this.i.centerY());
    }

    /*
     * Enabled aggressive block sorting
     */
    @Override
    public void c(float f2, float f3, float f4) {
        if (f2 > 1.0f && this.getCurrentScale() * f2 <= this.getMaxScale() || f2 < 1.0f && this.getCurrentScale() * f2 >= this.getMinScale()) {
            super.c(f2, f3, f4);
            return;
        }
    }

    protected boolean d() {
        return this.a(this.a);
    }

    public c getCropBoundsChangeListener() {
        return this.m;
    }

    public float getMaxScale() {
        return this.p;
    }

    public float getMinScale() {
        return this.q;
    }

    public float getTargetAspectRatio() {
        return this.k;
    }

    public void setCropBoundsChangeListener(c c2) {
        this.m = c2;
    }

    public void setCropRect(RectF rectF) {
        this.k = rectF.width() / rectF.height();
        this.i.set(rectF.left - (float)this.getPaddingLeft(), rectF.top - (float)this.getPaddingTop(), rectF.right - (float)this.getPaddingRight(), rectF.bottom - (float)this.getPaddingBottom());
        this.g();
        this.b();
    }

    public void setImageToWrapCropBounds(boolean bl2) {
        if (this.h && !this.d()) {
            float f2;
            float f3 = this.b[0];
            float f4 = this.b[1];
            float f5 = this.getCurrentScale();
            float f6 = this.i.centerX() - f3;
            Object object = this.i.centerY() - f4;
            this.j.reset();
            this.j.setTranslate(f6, object);
            Object object2 = Arrays.copyOf(this.a, this.a.length);
            this.j.mapPoints((float[])object2);
            boolean bl3 = this.a((float[])object2);
            if (bl3) {
                object2 = this.f();
                f6 = - object2[0] + object2[2];
                object = - object2[1] + object2[3];
                f2 = 0.0f;
            } else {
                object2 = new RectF(this.i);
                this.j.reset();
                this.j.setRotate(this.getCurrentAngle());
                this.j.mapRect(object2);
                float[] arrf = g.a(this.a);
                f2 = Math.max(object2.width() / arrf[0], object2.height() / arrf[1]);
                f2 = f2 * f5 - f5;
            }
            if (bl2) {
                object2 = new a(this, this.t, f3, f4, f6, (float)object, f5, f2, bl3);
                this.n = object2;
                this.post((Runnable)object2);
                return;
            }
            this.a(f6, (float)object);
            if (!bl3) {
                this.b(f5 + f2, this.i.centerX(), this.i.centerY());
            }
        }
    }

    public void setImageToWrapCropBoundsAnimDuration(long l2) {
        if (l2 > 0L) {
            this.t = l2;
            return;
        }
        throw new IllegalArgumentException("Animation duration cannot be negative value.");
    }

    public void setMaxResultImageSizeX(int n2) {
        this.r = n2;
    }

    public void setMaxResultImageSizeY(int n2) {
        this.s = n2;
    }

    public void setMaxScaleMultiplier(float f2) {
        this.l = f2;
    }

    public void setTargetAspectRatio(float f2) {
        Drawable drawable2 = this.getDrawable();
        if (drawable2 == null) {
            this.k = f2;
            return;
        }
        float f3 = f2;
        if (f2 == 0.0f) {
            f3 = (float)drawable2.getIntrinsicWidth() / (float)drawable2.getIntrinsicHeight();
        }
        this.k = f3;
        if (this.m != null) {
            this.m.a(this.k);
        }
    }

    private static class a
    implements Runnable {
        private final WeakReference<a> a;
        private final long b;
        private final long c;
        private final float d;
        private final float e;
        private final float f;
        private final float g;
        private final float h;
        private final float i;
        private final boolean j;

        public a(a a2, long l2, float f2, float f3, float f4, float f5, float f6, float f7, boolean bl2) {
            this.a = new WeakReference<a>(a2);
            this.b = l2;
            this.c = System.currentTimeMillis();
            this.d = f2;
            this.e = f3;
            this.f = f4;
            this.g = f5;
            this.h = f6;
            this.i = f7;
            this.j = bl2;
        }

        @Override
        public void run() {
            a a2 = this.a.get();
            if (a2 == null) {
                return;
            }
            long l2 = System.currentTimeMillis();
            float f2 = Math.min(this.b, l2 - this.c);
            float f3 = com.yalantis.ucrop.d.b.a(f2, 0.0f, this.f, this.b);
            float f4 = com.yalantis.ucrop.d.b.a(f2, 0.0f, this.g, this.b);
            float f5 = com.yalantis.ucrop.d.b.b(f2, 0.0f, this.i, this.b);
            if (f2 < (float)this.b) {
                a2.a(f3 - (a2.b[0] - this.d), f4 - (a2.b[1] - this.e));
                if (!this.j) {
                    a2.b(this.h + f5, a2.i.centerX(), a2.i.centerY());
                }
                if (!a2.d()) {
                    a2.post((Runnable)this);
                }
            }
        }
    }

    private static class b
    implements Runnable {
        private final WeakReference<a> a;
        private final long b;
        private final long c;
        private final float d;
        private final float e;
        private final float f;
        private final float g;

        public b(a a2, long l2, float f2, float f3, float f4, float f5) {
            this.a = new WeakReference<a>(a2);
            this.c = System.currentTimeMillis();
            this.b = l2;
            this.d = f2;
            this.e = f3;
            this.f = f4;
            this.g = f5;
        }

        @Override
        public void run() {
            a a2 = this.a.get();
            if (a2 == null) {
                return;
            }
            long l2 = System.currentTimeMillis();
            float f2 = Math.min(this.b, l2 - this.c);
            float f3 = com.yalantis.ucrop.d.b.b(f2, 0.0f, this.e, this.b);
            if (f2 < (float)this.b) {
                a2.b(this.d + f3, this.f, this.g);
                a2.post((Runnable)this);
                return;
            }
            a2.b();
        }
    }

}

