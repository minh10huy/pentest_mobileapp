/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.content.Context
 *  android.content.res.Resources
 *  android.content.res.TypedArray
 *  android.graphics.Canvas
 *  android.graphics.Paint
 *  android.graphics.Paint$Style
 *  android.graphics.Path
 *  android.graphics.Path$Direction
 *  android.graphics.RectF
 *  android.graphics.Region
 *  android.graphics.Region$Op
 *  android.os.Build
 *  android.os.Build$VERSION
 *  android.util.AttributeSet
 *  android.view.MotionEvent
 *  android.view.View
 */
package com.yalantis.ucrop.view;

import android.content.Context;
import android.content.res.Resources;
import android.content.res.TypedArray;
import android.graphics.Canvas;
import android.graphics.Paint;
import android.graphics.Path;
import android.graphics.RectF;
import android.graphics.Region;
import android.os.Build;
import android.util.AttributeSet;
import android.view.MotionEvent;
import android.view.View;
import com.yalantis.ucrop.a;
import com.yalantis.ucrop.a.d;
import com.yalantis.ucrop.d.g;

public class OverlayView
extends View {
    private d A;
    private boolean B;
    protected int a;
    protected int b;
    protected float[] c;
    protected float[] d;
    private final RectF e = new RectF();
    private final RectF f = new RectF();
    private int g;
    private int h;
    private float i;
    private float[] j = null;
    private boolean k;
    private boolean l;
    private boolean m;
    private int n;
    private Path o = new Path();
    private Paint p = new Paint(1);
    private Paint q = new Paint(1);
    private Paint r = new Paint(1);
    private Paint s = new Paint(1);
    private int t = 0;
    private float u = -1.0f;
    private float v = -1.0f;
    private int w = -1;
    private int x = this.getResources().getDimensionPixelSize(a.b.ucrop_default_crop_rect_corner_touch_threshold);
    private int y = this.getResources().getDimensionPixelSize(a.b.ucrop_default_crop_rect_min_size);
    private int z = this.getResources().getDimensionPixelSize(a.b.ucrop_default_crop_rect_corner_touch_area_line_length);

    public OverlayView(Context context) {
        this(context, null);
    }

    public OverlayView(Context context, AttributeSet attributeSet) {
        this(context, attributeSet, 0);
    }

    public OverlayView(Context context, AttributeSet attributeSet, int n2) {
        super(context, attributeSet, n2);
        this.b();
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Lifted jumps to return sites
     */
    private void a(float var1_1, float var2_2) {
        this.f.set(this.e);
        switch (this.w) {
            default: {
                ** break;
            }
            case 4: {
                this.f.offset(var1_1 - this.u, var2_2 - this.v);
                if (this.f.left <= (float)this.getLeft()) return;
                if (this.f.top <= (float)this.getTop()) return;
                if (this.f.right >= (float)this.getRight()) return;
                if (this.f.bottom >= (float)this.getBottom()) return;
                this.e.set(this.f);
                this.c();
                this.postInvalidate();
                return;
            }
            case 3: {
                this.f.set(var1_1, this.e.top, this.e.right, var2_2);
                ** break;
            }
            case 2: {
                this.f.set(this.e.left, this.e.top, var1_1, var2_2);
                ** break;
            }
            case 1: {
                this.f.set(this.e.left, var2_2, var1_1, this.e.bottom);
                ** break;
            }
            case 0: 
        }
        this.f.set(var1_1, var2_2, this.e.right, this.e.bottom);
lbl26: // 5 sources:
        var1_1 = this.f.height();
        var2_2 = this.y;
        var6_3 = false;
        var5_4 = var1_1 >= var2_2;
        if (this.f.width() >= (float)this.y) {
            var6_3 = true;
        }
        var8_5 = this.e;
        var7_6 = var6_3 != false ? this.f : this.e;
        var1_1 = var7_6.left;
        var7_6 = var5_4 != false ? this.f : this.e;
        var2_2 = var7_6.top;
        var7_6 = var6_3 != false ? this.f : this.e;
        var3_7 = var7_6.right;
        var7_6 = var5_4 != false ? this.f : this.e;
        var4_8 = var7_6.bottom;
        var8_5.set(var1_1, var2_2, var3_7, var4_8);
        if (!var5_4) {
            if (var6_3 == false) return;
        }
        this.c();
        this.postInvalidate();
    }

    private int b(float f2, float f3) {
        double d2 = this.x;
        int n2 = -1;
        for (int i2 = 0; i2 < 8; i2 += 2) {
            double d3 = Math.sqrt(Math.pow(f2 - this.c[i2], 2.0) + Math.pow(f3 - this.c[i2 + 1], 2.0));
            double d4 = d2;
            if (d3 < d2) {
                n2 = i2 / 2;
                d4 = d3;
            }
            d2 = d4;
        }
        if (this.t == 1 && n2 < 0 && this.e.contains(f2, f3)) {
            return 4;
        }
        return n2;
    }

    private void b(TypedArray typedArray) {
        int n2 = typedArray.getDimensionPixelSize(a.h.ucrop_UCropView_ucrop_frame_stroke_size, this.getResources().getDimensionPixelSize(a.b.ucrop_default_crop_frame_stoke_width));
        int n3 = typedArray.getColor(a.h.ucrop_UCropView_ucrop_frame_color, this.getResources().getColor(a.a.ucrop_color_default_crop_frame));
        this.r.setStrokeWidth((float)n2);
        this.r.setColor(n3);
        this.r.setStyle(Paint.Style.STROKE);
        this.s.setStrokeWidth((float)(n2 * 3));
        this.s.setColor(n3);
        this.s.setStyle(Paint.Style.STROKE);
    }

    private void c() {
        this.c = g.a(this.e);
        this.d = g.b(this.e);
        this.j = null;
        this.o.reset();
        this.o.addCircle(this.e.centerX(), this.e.centerY(), Math.min(this.e.width(), this.e.height()) / 2.0f, Path.Direction.CW);
    }

    private void c(TypedArray typedArray) {
        int n2 = typedArray.getDimensionPixelSize(a.h.ucrop_UCropView_ucrop_grid_stroke_size, this.getResources().getDimensionPixelSize(a.b.ucrop_default_crop_grid_stoke_width));
        int n3 = typedArray.getColor(a.h.ucrop_UCropView_ucrop_grid_color, this.getResources().getColor(a.a.ucrop_color_default_crop_grid));
        this.q.setStrokeWidth((float)n2);
        this.q.setColor(n3);
        this.g = typedArray.getInt(a.h.ucrop_UCropView_ucrop_grid_row_count, 2);
        this.h = typedArray.getInt(a.h.ucrop_UCropView_ucrop_grid_column_count, 2);
    }

    public void a() {
        int n2 = (int)((float)this.a / this.i);
        if (n2 > this.b) {
            n2 = (int)((float)this.b * this.i);
            int n3 = (this.a - n2) / 2;
            this.e.set((float)(this.getPaddingLeft() + n3), (float)this.getPaddingTop(), (float)(this.getPaddingLeft() + n2 + n3), (float)(this.getPaddingTop() + this.b));
        } else {
            int n4 = (this.b - n2) / 2;
            this.e.set((float)this.getPaddingLeft(), (float)(this.getPaddingTop() + n4), (float)(this.getPaddingLeft() + this.a), (float)(this.getPaddingTop() + n2 + n4));
        }
        if (this.A != null) {
            this.A.a(this.e);
        }
        this.c();
    }

    protected void a(TypedArray typedArray) {
        this.m = typedArray.getBoolean(a.h.ucrop_UCropView_ucrop_circle_dimmed_layer, false);
        this.n = typedArray.getColor(a.h.ucrop_UCropView_ucrop_dimmed_color, this.getResources().getColor(a.a.ucrop_color_default_dimmed));
        this.p.setColor(this.n);
        this.p.setStyle(Paint.Style.STROKE);
        this.p.setStrokeWidth(1.0f);
        this.b(typedArray);
        this.k = typedArray.getBoolean(a.h.ucrop_UCropView_ucrop_show_frame, true);
        this.c(typedArray);
        this.l = typedArray.getBoolean(a.h.ucrop_UCropView_ucrop_show_grid, true);
    }

    protected void a(Canvas canvas) {
        canvas.save();
        if (this.m) {
            canvas.clipPath(this.o, Region.Op.DIFFERENCE);
        } else {
            canvas.clipRect(this.e, Region.Op.DIFFERENCE);
        }
        canvas.drawColor(this.n);
        canvas.restore();
        if (this.m) {
            canvas.drawCircle(this.e.centerX(), this.e.centerY(), Math.min(this.e.width(), this.e.height()) / 2.0f, this.p);
        }
    }

    protected void b() {
        if (Build.VERSION.SDK_INT < 18) {
            this.setLayerType(1, null);
        }
    }

    protected void b(Canvas canvas) {
        if (this.l) {
            if (this.j == null && !this.e.isEmpty()) {
                float f2;
                int n2;
                int n3;
                float f3;
                float[] arrf;
                this.j = new float[this.g * 4 + this.h * 4];
                int n4 = 0;
                int n5 = 0;
                int n6 = 0;
                do {
                    n2 = n6;
                    if (n5 >= this.g) break;
                    arrf = this.j;
                    n3 = n6 + 1;
                    arrf[n6] = this.e.left;
                    arrf = this.j;
                    n6 = n3 + 1;
                    f2 = this.e.height();
                    f3 = (float)n5 + 1.0f;
                    arrf[n3] = f2 * (f3 / (float)(this.g + 1)) + this.e.top;
                    arrf = this.j;
                    n3 = n6 + 1;
                    arrf[n6] = this.e.right;
                    this.j[n3] = this.e.height() * (f3 / (float)(this.g + 1)) + this.e.top;
                    ++n5;
                    n6 = n3 + 1;
                } while (true);
                for (n3 = n4; n3 < this.h; ++n3) {
                    arrf = this.j;
                    n6 = n2 + 1;
                    f2 = this.e.width();
                    f3 = (float)n3 + 1.0f;
                    arrf[n2] = f2 * (f3 / (float)(this.h + 1)) + this.e.left;
                    arrf = this.j;
                    n5 = n6 + 1;
                    arrf[n6] = this.e.top;
                    arrf = this.j;
                    n6 = n5 + 1;
                    arrf[n5] = this.e.width() * (f3 / (float)(this.h + 1)) + this.e.left;
                    arrf = this.j;
                    n2 = n6 + 1;
                    arrf[n6] = this.e.bottom;
                }
            }
            if (this.j != null) {
                canvas.drawLines(this.j, this.q);
            }
        }
        if (this.k) {
            canvas.drawRect(this.e, this.r);
        }
        if (this.t != 0) {
            canvas.save();
            this.f.set(this.e);
            this.f.inset((float)this.z, (float)(- this.z));
            canvas.clipRect(this.f, Region.Op.DIFFERENCE);
            this.f.set(this.e);
            this.f.inset((float)(- this.z), (float)this.z);
            canvas.clipRect(this.f, Region.Op.DIFFERENCE);
            canvas.drawRect(this.e, this.s);
            canvas.restore();
        }
    }

    public RectF getCropViewRect() {
        return this.e;
    }

    public int getFreestyleCropMode() {
        return this.t;
    }

    public d getOverlayViewChangeListener() {
        return this.A;
    }

    protected void onDraw(Canvas canvas) {
        super.onDraw(canvas);
        this.a(canvas);
        this.b(canvas);
    }

    protected void onLayout(boolean bl2, int n2, int n3, int n4, int n5) {
        super.onLayout(bl2, n2, n3, n4, n5);
        if (bl2) {
            n2 = this.getPaddingLeft();
            n3 = this.getPaddingTop();
            n4 = this.getWidth();
            n5 = this.getPaddingRight();
            int n6 = this.getHeight();
            int n7 = this.getPaddingBottom();
            this.a = n4 - n5 - n2;
            this.b = n6 - n7 - n3;
            if (this.B) {
                this.B = false;
                this.setTargetAspectRatio(this.i);
            }
        }
    }

    public boolean onTouchEvent(MotionEvent motionEvent) {
        boolean bl2 = this.e.isEmpty();
        boolean bl3 = false;
        if (!bl2) {
            if (this.t == 0) {
                return false;
            }
            float f2 = motionEvent.getX();
            float f3 = motionEvent.getY();
            if ((motionEvent.getAction() & 255) == 0) {
                this.w = this.b(f2, f3);
                if (this.w != -1) {
                    bl3 = true;
                }
                if (!bl3) {
                    this.u = -1.0f;
                    this.v = -1.0f;
                    return bl3;
                }
                if (this.u < 0.0f) {
                    this.u = f2;
                    this.v = f3;
                }
                return bl3;
            }
            if ((motionEvent.getAction() & 255) == 2 && motionEvent.getPointerCount() == 1 && this.w != -1) {
                f2 = Math.min(Math.max(f2, (float)this.getPaddingLeft()), (float)(this.getWidth() - this.getPaddingRight()));
                f3 = Math.min(Math.max(f3, (float)this.getPaddingTop()), (float)(this.getHeight() - this.getPaddingBottom()));
                this.a(f2, f3);
                this.u = f2;
                this.v = f3;
                return true;
            }
            if ((motionEvent.getAction() & 255) == 1) {
                this.u = -1.0f;
                this.v = -1.0f;
                this.w = -1;
                if (this.A != null) {
                    this.A.a(this.e);
                }
            }
        }
        return false;
    }

    public void setCircleDimmedLayer(boolean bl2) {
        this.m = bl2;
    }

    public void setCropFrameColor(int n2) {
        this.r.setColor(n2);
    }

    public void setCropFrameStrokeWidth(int n2) {
        this.r.setStrokeWidth((float)n2);
    }

    public void setCropGridColor(int n2) {
        this.q.setColor(n2);
    }

    public void setCropGridColumnCount(int n2) {
        this.h = n2;
        this.j = null;
    }

    public void setCropGridRowCount(int n2) {
        this.g = n2;
        this.j = null;
    }

    public void setCropGridStrokeWidth(int n2) {
        this.q.setStrokeWidth((float)n2);
    }

    public void setDimmedColor(int n2) {
        this.n = n2;
    }

    @Deprecated
    public void setFreestyleCropEnabled(boolean bl2) {
        RuntimeException runtimeException;
        super("d2j fail translate: java.lang.RuntimeException: can not merge I and Z\n\tat com.googlecode.dex2jar.ir.TypeClass.merge(TypeClass.java:100)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeRef.updateTypeClass(TypeTransformer.java:174)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.copyTypes(TypeTransformer.java:311)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.fixTypes(TypeTransformer.java:226)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.analyze(TypeTransformer.java:207)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer.transform(TypeTransformer.java:44)\n\tat com.googlecode.d2j.dex.Dex2jar$2.optimize(Dex2jar.java:162)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertCode(Dex2Asm.java:414)\n\tat com.googlecode.d2j.dex.ExDex2Asm.convertCode(ExDex2Asm.java:42)\n\tat com.googlecode.d2j.dex.Dex2jar$2.convertCode(Dex2jar.java:128)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertMethod(Dex2Asm.java:509)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertClass(Dex2Asm.java:406)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertDex(Dex2Asm.java:422)\n\tat com.googlecode.d2j.dex.Dex2jar.doTranslate(Dex2jar.java:172)\n\tat com.googlecode.d2j.dex.Dex2jar.to(Dex2jar.java:272)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.doCommandLine(Dex2jarCmd.java:108)\n\tat com.googlecode.dex2jar.tools.BaseCmd.doMain(BaseCmd.java:288)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.main(Dex2jarCmd.java:32)\n");
        throw runtimeException;
    }

    public void setFreestyleCropMode(int n2) {
        this.t = n2;
        this.postInvalidate();
    }

    public void setOverlayViewChangeListener(d d2) {
        this.A = d2;
    }

    public void setShowCropFrame(boolean bl2) {
        this.k = bl2;
    }

    public void setShowCropGrid(boolean bl2) {
        this.l = bl2;
    }

    public void setTargetAspectRatio(float f2) {
        this.i = f2;
        if (this.a > 0) {
            this.a();
            this.postInvalidate();
            return;
        }
        this.B = true;
    }
}

