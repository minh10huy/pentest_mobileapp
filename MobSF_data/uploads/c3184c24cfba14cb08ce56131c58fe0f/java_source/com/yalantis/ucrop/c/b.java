/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.content.ContentResolver
 *  android.content.Context
 *  android.graphics.Bitmap
 *  android.graphics.BitmapFactory
 *  android.graphics.BitmapFactory$Options
 *  android.net.Uri
 *  android.os.AsyncTask
 *  android.os.ParcelFileDescriptor
 *  android.text.TextUtils
 *  android.util.Log
 */
package com.yalantis.ucrop.c;

import android.content.ContentResolver;
import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.ParcelFileDescriptor;
import android.text.TextUtils;
import android.util.Log;
import com.yalantis.ucrop.b.c;
import com.yalantis.ucrop.d.e;
import d.aa;
import d.ac;
import d.ad;
import d.n;
import d.x;
import e.l;
import e.r;
import java.io.Closeable;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

public class b
extends AsyncTask<Void, Void, a> {
    private final Context a;
    private Uri b;
    private Uri c;
    private final int d;
    private final int e;
    private final com.yalantis.ucrop.a.b f;

    public b(Context context, Uri uri, Uri uri2, int n2, int n3, com.yalantis.ucrop.a.b b2) {
        this.a = context;
        this.b = uri;
        this.c = uri2;
        this.d = n2;
        this.e = n3;
        this.f = b2;
    }

    private void a() {
        String string2 = this.b.getScheme();
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("Uri scheme: ");
        stringBuilder.append(string2);
        Log.d((String)"BitmapWorkerTask", (String)stringBuilder.toString());
        if (!"http".equals(string2) && !"https".equals(string2)) {
            if ("content".equals(string2)) {
                string2 = this.b();
                if (!TextUtils.isEmpty((CharSequence)string2) && new File(string2).exists()) {
                    this.b = Uri.fromFile((File)new File(string2));
                    return;
                }
                try {
                    this.a(this.b, this.c);
                    return;
                }
                catch (IOException | NullPointerException exception) {
                    Log.e((String)"BitmapWorkerTask", (String)"Copying failed", (Throwable)exception);
                    throw exception;
                }
            }
            if ("file".equals(string2)) {
                return;
            }
            stringBuilder = new StringBuilder();
            stringBuilder.append("Invalid Uri scheme ");
            stringBuilder.append(string2);
            Log.e((String)"BitmapWorkerTask", (String)stringBuilder.toString());
            stringBuilder = new StringBuilder();
            stringBuilder.append("Invalid Uri scheme");
            stringBuilder.append(string2);
            throw new IllegalArgumentException(stringBuilder.toString());
        }
        try {
            this.b(this.b, this.c);
            return;
        }
        catch (IOException | NullPointerException exception) {
            Log.e((String)"BitmapWorkerTask", (String)"Downloading failed", (Throwable)exception);
            throw exception;
        }
    }

    /*
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    private void a(Uri arrby, Uri object) {
        void var1_5;
        InputStream inputStream;
        block9 : {
            Object var5_7;
            block8 : {
                Log.d((String)"BitmapWorkerTask", (String)"copyFile");
                if (object == null) throw new NullPointerException("Output Uri is null - cannot copy image");
                var5_7 = null;
                inputStream = this.a.getContentResolver().openInputStream((Uri)arrby);
                object = new FileOutputStream(new File(object.getPath()));
                if (inputStream == null) break block8;
                try {
                    int n2;
                    arrby = new byte[1024];
                    while ((n2 = inputStream.read(arrby)) > 0) {
                        object.write(arrby, 0, n2);
                    }
                }
                catch (Throwable throwable) {
                    break block9;
                }
                com.yalantis.ucrop.d.a.a((Closeable)object);
                com.yalantis.ucrop.d.a.a(inputStream);
                this.b = this.c;
                return;
            }
            throw new NullPointerException("InputStream for given input Uri is null");
            catch (Throwable throwable) {
                object = var5_7;
            }
            break block9;
            catch (Throwable throwable) {
                inputStream = null;
                object = var5_7;
            }
        }
        com.yalantis.ucrop.d.a.a((Closeable)object);
        com.yalantis.ucrop.d.a.a(inputStream);
        this.b = this.c;
        throw var1_5;
    }

    private String b() {
        if (android.support.v4.content.b.b(this.a, "android.permission.READ_EXTERNAL_STORAGE") == 0) {
            return e.a(this.a, this.b);
        }
        return null;
    }

    /*
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    private void b(Uri object, Uri object2) {
        void var1_4;
        e.e e2;
        Object object3;
        x x2;
        block13 : {
            e.e e3;
            block12 : {
                block11 : {
                    Log.d((String)"BitmapWorkerTask", (String)"downloadFile");
                    if (object2 == null) throw new NullPointerException("Output Uri is null - cannot download image");
                    x2 = new x();
                    e2 = null;
                    object3 = x2.a(new aa.a().a(object.toString()).a()).a();
                    try {
                        e3 = object3.h().c();
                    }
                    catch (Throwable throwable) {
                        object2 = null;
                        break block13;
                    }
                    object = this.a.getContentResolver().openOutputStream((Uri)object2);
                    if (object == null) break block11;
                    object2 = l.a((OutputStream)object);
                    try {
                        e3.a((r)object2);
                    }
                    catch (Throwable throwable) {
                        break block12;
                    }
                    com.yalantis.ucrop.d.a.a(e3);
                    com.yalantis.ucrop.d.a.a((Closeable)object2);
                    if (object3 != null) {
                        com.yalantis.ucrop.d.a.a(object3.h());
                    }
                    x2.u().b();
                    this.b = this.c;
                    return;
                }
                try {
                    throw new NullPointerException("OutputStream for given output Uri is null");
                }
                catch (Throwable throwable) {
                    object2 = null;
                }
            }
            e2 = e3;
            break block13;
            catch (Throwable throwable) {
                object3 = object2 = null;
            }
        }
        com.yalantis.ucrop.d.a.a(e2);
        com.yalantis.ucrop.d.a.a((Closeable)object2);
        if (object3 != null) {
            com.yalantis.ucrop.d.a.a(object3.h());
        }
        x2.u().b();
        this.b = this.c;
        throw var1_4;
    }

    /*
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    protected /* varargs */ a a(Void ... object) {
        FileDescriptor fileDescriptor;
        BitmapFactory.Options options;
        block11 : {
            block10 : {
                ParcelFileDescriptor parcelFileDescriptor;
                if (this.b == null) {
                    return new a(new NullPointerException("Input Uri cannot be null"));
                }
                this.a();
                try {
                    parcelFileDescriptor = this.a.getContentResolver().openFileDescriptor(this.b, "r");
                    if (parcelFileDescriptor == null) break block10;
                }
                catch (FileNotFoundException fileNotFoundException) {
                    return new a(fileNotFoundException);
                }
                fileDescriptor = parcelFileDescriptor.getFileDescriptor();
                options = new BitmapFactory.Options();
                options.inJustDecodeBounds = true;
                BitmapFactory.decodeFileDescriptor((FileDescriptor)fileDescriptor, null, (BitmapFactory.Options)options);
                if (options.outWidth == -1 || options.outHeight == -1) {
                    object = new StringBuilder();
                    object.append("Bounds for bitmap could not be retrieved from the Uri: [");
                    object.append((Object)this.b);
                    object.append("]");
                    return new a(new IllegalArgumentException(object.toString()));
                }
                break block11;
            }
            object = new StringBuilder();
            object.append("ParcelFileDescriptor was null for given Uri: [");
            object.append((Object)this.b);
            object.append("]");
            return new a(new NullPointerException(object.toString()));
            catch (IOException | NullPointerException exception) {
                return new a(exception);
            }
        }
        options.inSampleSize = com.yalantis.ucrop.d.a.a(options, this.d, this.e);
        int n2 = 0;
        options.inJustDecodeBounds = false;
        object = null;
        do {
            if (n2 != 0) {
                object = new StringBuilder();
                object.append("Bitmap could not be decoded from the Uri: [");
                object.append((Object)this.b);
                object.append("]");
                return new a(new IllegalArgumentException(object.toString()));
            }
            try {
                Object object2 = BitmapFactory.decodeFileDescriptor((FileDescriptor)fileDescriptor, null, (BitmapFactory.Options)options);
                object = object2;
                n2 = 1;
            }
            catch (OutOfMemoryError outOfMemoryError) {
                Log.e((String)"BitmapWorkerTask", (String)"doInBackground: BitmapFactory.decodeFileDescriptor: ", (Throwable)outOfMemoryError);
                options.inSampleSize *= 2;
                continue;
            }
            break;
        } while (true);
    }

    protected void a(a object) {
        if (object.c == null) {
            com.yalantis.ucrop.a.b b2 = this.f;
            Bitmap bitmap = object.a;
            c c2 = object.b;
            String string2 = this.b.getPath();
            object = this.c == null ? null : this.c.getPath();
            b2.a(bitmap, c2, string2, (String)object);
            return;
        }
        this.f.a(object.c);
    }

    protected /* synthetic */ Object doInBackground(Object[] arrobject) {
        return this.a((Void[])arrobject);
    }

    protected /* synthetic */ void onPostExecute(Object object) {
        this.a((a)object);
    }

    public static class a {
        Bitmap a;
        c b;
        Exception c;

        public a(Bitmap bitmap, c c2) {
            this.a = bitmap;
            this.b = c2;
        }

        public a(Exception exception) {
            this.c = exception;
        }
    }

}

