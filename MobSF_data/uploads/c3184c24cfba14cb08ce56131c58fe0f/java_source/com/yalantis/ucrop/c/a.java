/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.content.ContentResolver
 *  android.content.Context
 *  android.graphics.Bitmap
 *  android.graphics.Bitmap$CompressFormat
 *  android.graphics.Matrix
 *  android.graphics.RectF
 *  android.media.ExifInterface
 *  android.net.Uri
 *  android.os.AsyncTask
 *  android.util.Log
 */
package com.yalantis.ucrop.c;

import android.content.ContentResolver;
import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.Matrix;
import android.graphics.RectF;
import android.media.ExifInterface;
import android.net.Uri;
import android.os.AsyncTask;
import android.util.Log;
import com.yalantis.ucrop.b.b;
import com.yalantis.ucrop.b.c;
import com.yalantis.ucrop.b.d;
import com.yalantis.ucrop.d.e;
import com.yalantis.ucrop.d.f;
import java.io.Closeable;
import java.io.File;
import java.io.OutputStream;
import java.lang.ref.WeakReference;

public class a
extends AsyncTask<Void, Void, Throwable> {
    private final WeakReference<Context> a;
    private Bitmap b;
    private final RectF c;
    private final RectF d;
    private float e;
    private float f;
    private final int g;
    private final int h;
    private final Bitmap.CompressFormat i;
    private final int j;
    private final String k;
    private final String l;
    private final c m;
    private final com.yalantis.ucrop.a.a n;
    private int o;
    private int p;
    private int q;
    private int r;

    public a(Context context, Bitmap bitmap, d d2, b b2, com.yalantis.ucrop.a.a a2) {
        this.a = new WeakReference<Context>(context);
        this.b = bitmap;
        this.c = d2.a();
        this.d = d2.b();
        this.e = d2.c();
        this.f = d2.d();
        this.g = b2.a();
        this.h = b2.b();
        this.i = b2.c();
        this.j = b2.d();
        this.k = b2.e();
        this.l = b2.f();
        this.m = b2.g();
        this.n = a2;
    }

    /*
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    private void a(Bitmap bitmap) {
        Object object;
        block5 : {
            object = this.a.get();
            if (object == null) {
                return;
            }
            Object var3_4 = null;
            object = object.getContentResolver().openOutputStream(Uri.fromFile((File)new File(this.l)));
            try {
                bitmap.compress(this.i, this.j, (OutputStream)object);
                bitmap.recycle();
            }
            catch (Throwable throwable) {
                bitmap = object;
                object = throwable;
            }
            com.yalantis.ucrop.d.a.a((Closeable)object);
            return;
            break block5;
            catch (Throwable throwable) {
                bitmap = var3_4;
            }
        }
        com.yalantis.ucrop.d.a.a((Closeable)bitmap);
        throw object;
    }

    private boolean a() {
        Object object;
        if (this.g > 0 && this.h > 0) {
            float f2 = this.c.width() / this.e;
            float f3 = this.c.height() / this.e;
            if (f2 > (float)this.g || f3 > (float)this.h) {
                f2 = Math.min((float)this.g / f2, (float)this.h / f3);
                object = Bitmap.createScaledBitmap((Bitmap)this.b, (int)Math.round((float)this.b.getWidth() * f2), (int)Math.round((float)this.b.getHeight() * f2), (boolean)false);
                if (this.b != object) {
                    this.b.recycle();
                }
                this.b = object;
                this.e /= f2;
            }
        }
        if (this.f != 0.0f) {
            object = new Matrix();
            object.setRotate(this.f, (float)(this.b.getWidth() / 2), (float)(this.b.getHeight() / 2));
            object = Bitmap.createBitmap((Bitmap)this.b, (int)0, (int)0, (int)this.b.getWidth(), (int)this.b.getHeight(), (Matrix)object, (boolean)true);
            if (this.b != object) {
                this.b.recycle();
            }
            this.b = object;
        }
        this.q = Math.round((this.c.left - this.d.left) / this.e);
        this.r = Math.round((this.c.top - this.d.top) / this.e);
        this.o = Math.round(this.c.width() / this.e);
        this.p = Math.round(this.c.height() / this.e);
        boolean bl2 = this.a(this.o, this.p);
        object = new StringBuilder();
        object.append("Should crop: ");
        object.append(bl2);
        Log.i((String)"BitmapCropTask", (String)object.toString());
        if (bl2) {
            object = new ExifInterface(this.k);
            this.a(Bitmap.createBitmap((Bitmap)this.b, (int)this.q, (int)this.r, (int)this.o, (int)this.p));
            if (this.i.equals((Object)Bitmap.CompressFormat.JPEG)) {
                f.a((ExifInterface)object, this.o, this.p, this.l);
            }
            return true;
        }
        e.a(this.k, this.l);
        return false;
    }

    private boolean a(int n2, int n3) {
        boolean bl2;
        block8 : {
            boolean bl3;
            block7 : {
                n2 = Math.round((float)Math.max(n2, n3) / 1000.0f);
                bl3 = true;
                if (this.g <= 0) break block7;
                bl2 = bl3;
                if (this.h > 0) break block8;
            }
            float f2 = Math.abs(this.c.left - this.d.left);
            float f3 = n2 + 1;
            bl2 = bl3;
            if (f2 <= f3) {
                bl2 = bl3;
                if (Math.abs(this.c.top - this.d.top) <= f3) {
                    bl2 = bl3;
                    if (Math.abs(this.c.bottom - this.d.bottom) <= f3) {
                        if (Math.abs(this.c.right - this.d.right) > f3) {
                            return true;
                        }
                        bl2 = false;
                    }
                }
            }
        }
        return bl2;
    }

    protected /* varargs */ Throwable a(Void ... arrvoid) {
        if (this.b == null) {
            return new NullPointerException("ViewBitmap is null");
        }
        if (this.b.isRecycled()) {
            return new NullPointerException("ViewBitmap is recycled");
        }
        if (this.d.isEmpty()) {
            return new NullPointerException("CurrentImageRect is empty");
        }
        try {
            this.a();
            this.b = null;
            return null;
        }
        catch (Throwable throwable) {
            return throwable;
        }
    }

    protected void a(Throwable throwable) {
        if (this.n != null) {
            if (throwable == null) {
                throwable = Uri.fromFile((File)new File(this.l));
                this.n.a((Uri)throwable, this.q, this.r, this.o, this.p);
                return;
            }
            this.n.a(throwable);
        }
    }

    protected /* synthetic */ Object doInBackground(Object[] arrobject) {
        return this.a((Void[])arrobject);
    }

    protected /* synthetic */ void onPostExecute(Object object) {
        this.a((Throwable)object);
    }
}

