/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.media.ExifInterface
 *  android.text.TextUtils
 *  android.util.Log
 */
package com.yalantis.ucrop.d;

import android.media.ExifInterface;
import android.text.TextUtils;
import android.util.Log;
import java.io.IOException;
import java.io.InputStream;
import java.nio.Buffer;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.charset.Charset;

public class f {
    private static final byte[] a = "Exif\u0000\u0000".getBytes(Charset.forName("UTF-8"));
    private static final int[] b = new int[]{0, 1, 1, 2, 4, 8, 1, 1, 2, 4, 8, 4, 8};
    private final b c;

    public f(InputStream inputStream) {
        this.c = new c(inputStream);
    }

    private static int a(int n2, int n3) {
        return n2 + 2 + n3 * 12;
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Lifted jumps to return sites
     */
    private static int a(a var0) {
        var1_1 = "Exif\u0000\u0000".length();
        var2_2 = var0.b(var1_1);
        if (var2_2 == 19789) ** GOTO lbl12
        if (var2_2 == 18761) {
            var8_3 = ByteOrder.LITTLE_ENDIAN;
        } else {
            if (Log.isLoggable((String)"ImageHeaderParser", (int)3)) {
                var8_3 = new StringBuilder();
                var8_3.append("Unknown endianness = ");
                var8_3.append(var2_2);
                Log.d((String)"ImageHeaderParser", (String)var8_3.toString());
            }
lbl12: // 4 sources:
            var8_3 = ByteOrder.BIG_ENDIAN;
        }
        var0.a((ByteOrder)var8_3);
        var2_2 = var0.a(var1_1 + 4) + var1_1;
        var3_4 = var0.b(var2_2);
        var1_1 = 0;
        while (var1_1 < var3_4) {
            block11 : {
                block14 : {
                    block16 : {
                        block12 : {
                            block17 : {
                                block15 : {
                                    block13 : {
                                        var5_6 = f.a(var2_2, var1_1);
                                        var4_5 = var0.b(var5_6);
                                        if (var4_5 != 274) break block11;
                                        var6_7 = var0.b(var5_6 + 2);
                                        if (var6_7 < 1 || var6_7 > 12) break block12;
                                        var7_8 = var0.a(var5_6 + 4);
                                        if (var7_8 >= 0) break block13;
                                        if (!Log.isLoggable((String)"ImageHeaderParser", (int)3)) break block11;
                                        var8_3 = "Negative tiff component count";
                                        break block14;
                                    }
                                    if (Log.isLoggable((String)"ImageHeaderParser", (int)3)) {
                                        var8_3 = new StringBuilder();
                                        var8_3.append("Got tagIndex=");
                                        var8_3.append(var1_1);
                                        var8_3.append(" tagType=");
                                        var8_3.append(var4_5);
                                        var8_3.append(" formatCode=");
                                        var8_3.append(var6_7);
                                        var8_3.append(" componentCount=");
                                        var8_3.append(var7_8);
                                        Log.d((String)"ImageHeaderParser", (String)var8_3.toString());
                                    }
                                    if ((var7_8 += f.b[var6_7]) <= 4) break block15;
                                    if (!Log.isLoggable((String)"ImageHeaderParser", (int)3)) break block11;
                                    var8_3 = new StringBuilder();
                                    var9_9 = "Got byte count > 4, not orientation, continuing, formatCode=";
                                    break block16;
                                }
                                if ((var5_6 += 8) < 0 || var5_6 > var0.a()) break block17;
                                if (var7_8 >= 0) {
                                    if (var7_8 + var5_6 <= var0.a()) return var0.b(var5_6);
                                }
                                if (!Log.isLoggable((String)"ImageHeaderParser", (int)3)) break block11;
                                var8_3 = new StringBuilder();
                                var8_3.append("Illegal number of bytes for TI tag data tagType=");
                                var8_3.append(var4_5);
                                var8_3 = var8_3.toString();
                                break block14;
                            }
                            if (Log.isLoggable((String)"ImageHeaderParser", (int)3)) {
                                var8_3 = new StringBuilder();
                                var8_3.append("Illegal tagValueOffset=");
                                var8_3.append(var5_6);
                                var8_3.append(" tagType=");
                                var8_3.append(var4_5);
                                Log.d((String)"ImageHeaderParser", (String)var8_3.toString());
                            }
                            break block11;
                        }
                        if (!Log.isLoggable((String)"ImageHeaderParser", (int)3)) break block11;
                        var8_3 = new StringBuilder();
                        var9_9 = "Got invalid format code = ";
                    }
                    var8_3.append(var9_9);
                    var8_3.append(var6_7);
                    var8_3 = var8_3.toString();
                }
                Log.d((String)"ImageHeaderParser", (String)var8_3);
            }
            ++var1_1;
        }
        return -1;
    }

    private int a(byte[] object, int n2) {
        int n3 = this.c.a((byte[])object, n2);
        if (n3 != n2) {
            if (Log.isLoggable((String)"ImageHeaderParser", (int)3)) {
                object = new StringBuilder();
                object.append("Unable to read exif segment data, length: ");
                object.append(n2);
                object.append(", actually read: ");
                object.append(n3);
                Log.d((String)"ImageHeaderParser", (String)object.toString());
            }
            return -1;
        }
        if (this.b((byte[])object, n2)) {
            return f.a(new a((byte[])object, n2));
        }
        if (Log.isLoggable((String)"ImageHeaderParser", (int)3)) {
            Log.d((String)"ImageHeaderParser", (String)"Missing jpeg exif preamble");
        }
        return -1;
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public static void a(ExifInterface exifInterface, int n2, int n3, String string2) {
        String[] arrstring = new String[]{"FNumber", "DateTime", "DateTimeDigitized", "ExposureTime", "Flash", "FocalLength", "GPSAltitude", "GPSAltitudeRef", "GPSDateStamp", "GPSLatitude", "GPSLatitudeRef", "GPSLongitude", "GPSLongitudeRef", "GPSProcessingMethod", "GPSTimeStamp", "ISOSpeedRatings", "Make", "Model", "SubSecTime", "SubSecTimeDigitized", "SubSecTimeOriginal", "WhiteBalance"};
        string2 = new ExifInterface(string2);
        for (String string3 : arrstring) {
            try {
                String string4 = exifInterface.getAttribute(string3);
                if (TextUtils.isEmpty((CharSequence)string4)) continue;
                string2.setAttribute(string3, string4);
            }
            catch (IOException iOException) {
                Log.d((String)"ImageHeaderParser", (String)iOException.getMessage());
                return;
            }
        }
        string2.setAttribute("ImageWidth", String.valueOf(n2));
        string2.setAttribute("ImageLength", String.valueOf(n3));
        string2.setAttribute("Orientation", "0");
        string2.saveAttributes();
    }

    private static boolean a(int n2) {
        if ((n2 & 65496) != 65496 && n2 != 19789 && n2 != 18761) {
            return false;
        }
        return true;
    }

    private int b() {
        int n2;
        block7 : {
            Object object;
            long l2;
            short s2;
            long l3;
            do {
                if ((s2 = this.c.b()) != 255) {
                    if (Log.isLoggable((String)"ImageHeaderParser", (int)3)) {
                        object = new StringBuilder();
                        object.append("Unknown segmentId=");
                        object.append(s2);
                        Log.d((String)"ImageHeaderParser", (String)object.toString());
                    }
                    return -1;
                }
                s2 = this.c.b();
                if (s2 == 218) {
                    return -1;
                }
                if (s2 == 217) {
                    if (Log.isLoggable((String)"ImageHeaderParser", (int)3)) {
                        Log.d((String)"ImageHeaderParser", (String)"Found MARKER_EOI in exif segment");
                    }
                    return -1;
                }
                n2 = this.c.a() - 2;
                if (s2 == 225) break block7;
            } while ((l2 = (object = this.c).a(l3 = (long)n2)) == l3);
            if (Log.isLoggable((String)"ImageHeaderParser", (int)3)) {
                object = new StringBuilder();
                object.append("Unable to skip enough data, type: ");
                object.append(s2);
                object.append(", wanted to skip: ");
                object.append(n2);
                object.append(", but actually skipped: ");
                object.append(l2);
                Log.d((String)"ImageHeaderParser", (String)object.toString());
            }
            return -1;
        }
        return n2;
    }

    private boolean b(byte[] arrby, int n2) {
        boolean bl2 = arrby != null && n2 > a.length;
        if (bl2) {
            for (n2 = 0; n2 < a.length; ++n2) {
                if (arrby[n2] == a[n2]) continue;
                return false;
            }
        }
        return bl2;
    }

    public int a() {
        int n2 = this.c.a();
        if (!f.a(n2)) {
            if (Log.isLoggable((String)"ImageHeaderParser", (int)3)) {
                StringBuilder stringBuilder = new StringBuilder();
                stringBuilder.append("Parser doesn't handle magic number: ");
                stringBuilder.append(n2);
                Log.d((String)"ImageHeaderParser", (String)stringBuilder.toString());
            }
            return -1;
        }
        n2 = this.b();
        if (n2 == -1) {
            if (Log.isLoggable((String)"ImageHeaderParser", (int)3)) {
                Log.d((String)"ImageHeaderParser", (String)"Failed to parse exif segment length, or exif segment not found");
            }
            return -1;
        }
        return this.a(new byte[n2], n2);
    }

    private static class a {
        private final ByteBuffer a;

        public a(byte[] arrby, int n2) {
            this.a = (ByteBuffer)ByteBuffer.wrap(arrby).order(ByteOrder.BIG_ENDIAN).limit(n2);
        }

        public int a() {
            return this.a.remaining();
        }

        public int a(int n2) {
            return this.a.getInt(n2);
        }

        public void a(ByteOrder byteOrder) {
            this.a.order(byteOrder);
        }

        public short b(int n2) {
            return this.a.getShort(n2);
        }
    }

    private static interface b {
        public int a();

        public int a(byte[] var1, int var2);

        public long a(long var1);

        public short b();
    }

    private static class c
    implements b {
        private final InputStream a;

        public c(InputStream inputStream) {
            this.a = inputStream;
        }

        @Override
        public int a() {
            return this.a.read() << 8 & 65280 | this.a.read() & 255;
        }

        @Override
        public int a(byte[] arrby, int n2) {
            int n3;
            int n4;
            for (n4 = n2; n4 > 0 && (n3 = this.a.read(arrby, n2 - n4, n4)) != -1; n4 -= n3) {
            }
            return n2 - n4;
        }

        /*
         * Enabled aggressive block sorting
         */
        @Override
        public long a(long l2) {
            if (l2 < 0L) {
                return 0L;
            }
            long l3 = l2;
            while (l3 > 0L) {
                long l4 = this.a.skip(l3);
                if (l4 <= 0L) {
                    if (this.a.read() == -1) {
                        return l2 - l3;
                    }
                    l4 = 1L;
                }
                l3 -= l4;
            }
            return l2 - l3;
        }

        @Override
        public short b() {
            return (short)(this.a.read() & 255);
        }
    }

}

