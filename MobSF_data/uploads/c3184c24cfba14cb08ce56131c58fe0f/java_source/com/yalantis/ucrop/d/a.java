/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.content.ContentResolver
 *  android.content.Context
 *  android.graphics.Bitmap
 *  android.graphics.BitmapFactory
 *  android.graphics.BitmapFactory$Options
 *  android.graphics.Canvas
 *  android.graphics.Matrix
 *  android.graphics.Point
 *  android.net.Uri
 *  android.os.AsyncTask
 *  android.util.Log
 *  android.view.Display
 *  android.view.WindowManager
 */
package com.yalantis.ucrop.d;

import android.content.ContentResolver;
import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Canvas;
import android.graphics.Matrix;
import android.graphics.Point;
import android.net.Uri;
import android.os.AsyncTask;
import android.util.Log;
import android.view.Display;
import android.view.WindowManager;
import com.yalantis.ucrop.a.b;
import com.yalantis.ucrop.d.c;
import com.yalantis.ucrop.d.f;
import java.io.Closeable;
import java.io.IOException;
import java.io.InputStream;

public class a {
    public static int a(int n2) {
        switch (n2) {
            default: {
                return 0;
            }
            case 7: 
            case 8: {
                return 270;
            }
            case 5: 
            case 6: {
                return 90;
            }
            case 3: 
            case 4: 
        }
        return 180;
    }

    public static int a(Context object) {
        object = (WindowManager)object.getSystemService("window");
        Point point = new Point();
        if (object != null) {
            object.getDefaultDisplay().getSize(point);
        }
        int n2 = point.x;
        int n3 = point.y;
        n3 = (int)Math.sqrt(Math.pow(n2, 2.0) + Math.pow(n3, 2.0));
        object = new Canvas();
        int n4 = Math.min(object.getMaximumBitmapWidth(), object.getMaximumBitmapHeight());
        n2 = n3;
        if (n4 > 0) {
            n2 = Math.min(n3, n4);
        }
        n4 = c.a();
        n3 = n2;
        if (n4 > 0) {
            n3 = Math.min(n2, n4);
        }
        object = new StringBuilder();
        object.append("maxBitmapSize: ");
        object.append(n3);
        Log.d((String)"BitmapLoadUtils", (String)object.toString());
        return n3;
    }

    /*
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    public static int a(Context object, Uri uri) {
        void var0_3;
        int n2;
        block5 : {
            object = object.getContentResolver().openInputStream(uri);
            if (object == null) {
                return 0;
            }
            n2 = new f((InputStream)object).a();
            try {
                a.a((Closeable)object);
                return n2;
            }
            catch (IOException iOException) {}
            break block5;
            catch (IOException iOException) {
                n2 = 0;
            }
        }
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("getExifOrientation: ");
        stringBuilder.append(uri.toString());
        Log.e((String)"BitmapLoadUtils", (String)stringBuilder.toString(), (Throwable)var0_3);
        return n2;
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    public static int a(BitmapFactory.Options options, int n2, int n3) {
        int n4;
        int n5 = options.outHeight;
        int n6 = options.outWidth;
        int n7 = 1;
        int n8 = n4 = 1;
        if (n5 <= n3) {
            if (n6 <= n2) return n7;
            n8 = n4;
        }
        do {
            if (n5 / n8 <= n3) {
                n7 = n8;
                if (n6 / n8 <= n2) {
                    return n7;
                }
            }
            n8 *= 2;
        } while (true);
    }

    public static Bitmap a(Bitmap bitmap, Matrix matrix) {
        try {
            matrix = Bitmap.createBitmap((Bitmap)bitmap, (int)0, (int)0, (int)bitmap.getWidth(), (int)bitmap.getHeight(), (Matrix)matrix, (boolean)true);
            boolean bl2 = bitmap.sameAs((Bitmap)matrix);
            if (!bl2) {
                return matrix;
            }
        }
        catch (OutOfMemoryError outOfMemoryError) {
            Log.e((String)"BitmapLoadUtils", (String)"transformBitmap: ", (Throwable)outOfMemoryError);
        }
        return bitmap;
    }

    public static void a(Context context, Uri uri, Uri uri2, int n2, int n3, b b2) {
        new com.yalantis.ucrop.c.b(context, uri, uri2, n2, n3, b2).execute((Object[])new Void[0]);
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    public static void a(Closeable closeable) {
        if (closeable == null || !(closeable instanceof Closeable)) return;
        try {
            closeable.close();
            return;
        }
        catch (IOException iOException) {
            return;
        }
    }

    public static int b(int n2) {
        if (n2 != 2 && n2 != 7) {
            switch (n2) {
                default: {
                    return 1;
                }
                case 4: 
                case 5: 
            }
        }
        return -1;
    }
}

