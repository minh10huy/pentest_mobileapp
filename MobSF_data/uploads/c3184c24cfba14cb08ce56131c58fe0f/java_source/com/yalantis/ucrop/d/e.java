/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.annotation.SuppressLint
 *  android.content.ContentResolver
 *  android.content.ContentUris
 *  android.content.Context
 *  android.database.Cursor
 *  android.net.Uri
 *  android.os.Build
 *  android.os.Build$VERSION
 *  android.os.Environment
 *  android.provider.DocumentsContract
 *  android.provider.MediaStore
 *  android.provider.MediaStore$Audio
 *  android.provider.MediaStore$Audio$Media
 *  android.provider.MediaStore$Images
 *  android.provider.MediaStore$Images$Media
 *  android.provider.MediaStore$Video
 *  android.provider.MediaStore$Video$Media
 *  android.text.TextUtils
 *  android.util.Log
 */
package com.yalantis.ucrop.d;

import android.annotation.SuppressLint;
import android.content.ContentResolver;
import android.content.ContentUris;
import android.content.Context;
import android.database.Cursor;
import android.net.Uri;
import android.os.Build;
import android.os.Environment;
import android.provider.DocumentsContract;
import android.provider.MediaStore;
import android.text.TextUtils;
import android.util.Log;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.nio.channels.FileChannel;
import java.nio.channels.WritableByteChannel;
import java.nio.channels.spi.AbstractInterruptibleChannel;
import java.util.Locale;

public class e {
    @SuppressLint(value={"NewApi"})
    public static String a(Context object, Uri object2) {
        boolean bl2 = Build.VERSION.SDK_INT >= 19;
        Object var3_4 = null;
        if (bl2 && DocumentsContract.isDocumentUri((Context)object, (Uri)object2)) {
            if (e.a((Uri)object2)) {
                object = DocumentsContract.getDocumentId((Uri)object2).split(":");
                if ("primary".equalsIgnoreCase(object[0])) {
                    object2 = new StringBuilder();
                    object2.append(Environment.getExternalStorageDirectory());
                    object2.append("/");
                    object2.append(object[1]);
                    return object2.toString();
                }
            } else if (e.b((Uri)object2)) {
                if (!TextUtils.isEmpty((CharSequence)(object2 = DocumentsContract.getDocumentId((Uri)object2)))) {
                    try {
                        object = e.a((Context)object, ContentUris.withAppendedId((Uri)Uri.parse((String)"content://downloads/public_downloads"), (long)Long.valueOf((String)object2)), null, null);
                        return object;
                    }
                    catch (NumberFormatException numberFormatException) {
                        Log.i((String)"FileUtils", (String)numberFormatException.getMessage());
                        return null;
                    }
                }
            } else if (e.c((Uri)object2)) {
                String[] arrstring = DocumentsContract.getDocumentId((Uri)object2).split(":");
                String string2 = arrstring[0];
                if ("image".equals(string2)) {
                    object2 = MediaStore.Images.Media.EXTERNAL_CONTENT_URI;
                } else if ("video".equals(string2)) {
                    object2 = MediaStore.Video.Media.EXTERNAL_CONTENT_URI;
                } else {
                    object2 = var3_4;
                    if ("audio".equals(string2)) {
                        object2 = MediaStore.Audio.Media.EXTERNAL_CONTENT_URI;
                    }
                }
                return e.a((Context)object, (Uri)object2, "_id=?", new String[]{arrstring[1]});
            }
        } else {
            if ("content".equalsIgnoreCase(object2.getScheme())) {
                if (e.d((Uri)object2)) {
                    return object2.getLastPathSegment();
                }
                return e.a((Context)object, (Uri)object2, null, null);
            }
            if ("file".equalsIgnoreCase(object2.getScheme())) {
                return object2.getPath();
            }
        }
        return null;
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive exception aggregation
     */
    public static String a(Context context, Uri uri, String string2, String[] arrstring) {
        block13 : {
            block14 : {
                block12 : {
                    block10 : {
                        block11 : {
                            context = context.getContentResolver().query(uri, new String[]{"_data"}, string2, arrstring, null);
                            if (context == null) break block10;
                            uri = context;
                            try {
                                if (!context.moveToFirst()) break block10;
                                uri = context;
                                string2 = context.getString(context.getColumnIndexOrThrow("_data"));
                                if (context == null) break block11;
                            }
                            catch (IllegalArgumentException illegalArgumentException) {
                                break block12;
                            }
                            context.close();
                        }
                        return string2;
                    }
                    if (context != null) {
                        do {
                            context.close();
                            return null;
                            break;
                        } while (true);
                    }
                    break block14;
                    catch (Throwable throwable) {
                        uri = null;
                        break block13;
                    }
                    catch (IllegalArgumentException illegalArgumentException) {
                        context = null;
                    }
                }
                uri = context;
                try {
                    Log.i((String)"FileUtils", (String)String.format(Locale.getDefault(), "getDataColumn: _data - [%s]", new Object[]{var2_8.getMessage()}));
                    if (context != null) ** continue;
                }
                catch (Throwable throwable) {
                    // empty catch block
                }
            }
            return null;
        }
        if (uri != null) {
            uri.close();
        }
        throw var0_3;
    }

    /*
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    public static void a(String object, String string2) {
        void var1_5;
        AbstractInterruptibleChannel abstractInterruptibleChannel;
        block9 : {
            Object var3_6;
            block8 : {
                if (object.equalsIgnoreCase(string2)) {
                    return;
                }
                var3_6 = null;
                object = new FileInputStream(new File((String)object)).getChannel();
                try {
                    abstractInterruptibleChannel = new FileOutputStream(new File(string2)).getChannel();
                }
                catch (Throwable throwable) {
                    abstractInterruptibleChannel = null;
                    break block9;
                }
                try {
                    object.transferTo(0L, object.size(), (WritableByteChannel)((Object)abstractInterruptibleChannel));
                    object.close();
                    if (object == null) break block8;
                }
                catch (Throwable throwable) {}
                object.close();
            }
            if (abstractInterruptibleChannel == null) return;
            abstractInterruptibleChannel.close();
            return;
            break block9;
            catch (Throwable throwable) {
                abstractInterruptibleChannel = null;
                object = var3_6;
            }
        }
        if (object != null) {
            object.close();
        }
        if (abstractInterruptibleChannel == null) throw var1_5;
        abstractInterruptibleChannel.close();
        throw var1_5;
    }

    public static boolean a(Uri uri) {
        return "com.android.externalstorage.documents".equals(uri.getAuthority());
    }

    public static boolean b(Uri uri) {
        return "com.android.providers.downloads.documents".equals(uri.getAuthority());
    }

    public static boolean c(Uri uri) {
        return "com.android.providers.media.documents".equals(uri.getAuthority());
    }

    public static boolean d(Uri uri) {
        return "com.google.android.apps.photos.content".equals(uri.getAuthority());
    }
}

