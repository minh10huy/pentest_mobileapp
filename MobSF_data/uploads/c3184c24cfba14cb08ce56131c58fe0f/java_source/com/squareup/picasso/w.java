/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.graphics.Bitmap
 *  android.graphics.Bitmap$Config
 *  android.net.Uri
 */
package com.squareup.picasso;

import android.graphics.Bitmap;
import android.net.Uri;
import com.squareup.picasso.ac;
import com.squareup.picasso.t;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.TimeUnit;

public final class w {
    private static final long u = TimeUnit.SECONDS.toNanos(5L);
    int a;
    long b;
    int c;
    public final Uri d;
    public final int e;
    public final String f;
    public final List<ac> g;
    public final int h;
    public final int i;
    public final boolean j;
    public final int k;
    public final boolean l;
    public final boolean m;
    public final float n;
    public final float o;
    public final float p;
    public final boolean q;
    public final boolean r;
    public final Bitmap.Config s;
    public final t.e t;

    /*
     * Enabled aggressive block sorting
     */
    private w(Uri object, int n2, String string2, List<ac> list, int n3, int n4, boolean bl2, boolean bl3, int n5, boolean bl4, float f2, float f3, float f4, boolean bl5, boolean bl6, Bitmap.Config config, t.e e2) {
        void var14_17;
        void var1_3;
        void var9_12;
        void var17_20;
        void var8_11;
        void var11_14;
        void var15_18;
        void var16_19;
        void var10_13;
        void var4_7;
        void var12_15;
        void var7_10;
        void var5_8;
        void var3_6;
        void var2_5;
        void var6_9;
        void var13_16;
        this.d = object;
        this.e = var2_5;
        this.f = var3_6;
        if (var4_7 == null) {
            Object var1_2 = null;
        } else {
            List list2 = Collections.unmodifiableList(var4_7);
        }
        this.g = var1_3;
        this.h = var5_8;
        this.i = var6_9;
        this.j = var7_10;
        this.l = var8_11;
        this.k = var9_12;
        this.m = var10_13;
        this.n = var11_14;
        this.o = var12_15;
        this.p = var13_16;
        this.q = var14_17;
        this.r = var15_18;
        this.s = var16_19;
        this.t = var17_20;
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    String a() {
        StringBuilder stringBuilder;
        long l2 = System.nanoTime() - this.b;
        if (l2 > u) {
            stringBuilder = new StringBuilder();
            stringBuilder.append(this.b());
            stringBuilder.append('+');
            stringBuilder.append(TimeUnit.NANOSECONDS.toSeconds(l2));
            stringBuilder.append('s');
            do {
                return stringBuilder.toString();
                break;
            } while (true);
        }
        stringBuilder = new StringBuilder();
        stringBuilder.append(this.b());
        stringBuilder.append('+');
        stringBuilder.append(TimeUnit.NANOSECONDS.toMillis(l2));
        stringBuilder.append("ms");
        return stringBuilder.toString();
    }

    String b() {
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("[R");
        stringBuilder.append(this.a);
        stringBuilder.append(']');
        return stringBuilder.toString();
    }

    String c() {
        if (this.d != null) {
            return String.valueOf(this.d.getPath());
        }
        return Integer.toHexString(this.e);
    }

    public boolean d() {
        if (this.h == 0 && this.i == 0) {
            return false;
        }
        return true;
    }

    boolean e() {
        if (!this.f() && !this.g()) {
            return false;
        }
        return true;
    }

    boolean f() {
        if (!this.d() && this.n == 0.0f) {
            return false;
        }
        return true;
    }

    boolean g() {
        if (this.g != null) {
            return true;
        }
        return false;
    }

    public String toString() {
        StringBuilder stringBuilder = new StringBuilder("Request{");
        if (this.e > 0) {
            stringBuilder.append(this.e);
        } else {
            stringBuilder.append((Object)this.d);
        }
        if (this.g != null && !this.g.isEmpty()) {
            for (ac ac2 : this.g) {
                stringBuilder.append(' ');
                stringBuilder.append(ac2.a());
            }
        }
        if (this.f != null) {
            stringBuilder.append(" stableKey(");
            stringBuilder.append(this.f);
            stringBuilder.append(')');
        }
        if (this.h > 0) {
            stringBuilder.append(" resize(");
            stringBuilder.append(this.h);
            stringBuilder.append(',');
            stringBuilder.append(this.i);
            stringBuilder.append(')');
        }
        if (this.j) {
            stringBuilder.append(" centerCrop");
        }
        if (this.l) {
            stringBuilder.append(" centerInside");
        }
        if (this.n != 0.0f) {
            stringBuilder.append(" rotation(");
            stringBuilder.append(this.n);
            if (this.q) {
                stringBuilder.append(" @ ");
                stringBuilder.append(this.o);
                stringBuilder.append(',');
                stringBuilder.append(this.p);
            }
            stringBuilder.append(')');
        }
        if (this.r) {
            stringBuilder.append(" purgeable");
        }
        if (this.s != null) {
            stringBuilder.append(' ');
            stringBuilder.append((Object)this.s);
        }
        stringBuilder.append('}');
        return stringBuilder.toString();
    }

    public static final class a {
        private Uri a;
        private int b;
        private String c;
        private int d;
        private int e;
        private boolean f;
        private int g;
        private boolean h;
        private boolean i;
        private float j;
        private float k;
        private float l;
        private boolean m;
        private boolean n;
        private List<ac> o;
        private Bitmap.Config p;
        private t.e q;

        a(Uri uri, int n2, Bitmap.Config config) {
            this.a = uri;
            this.b = n2;
            this.p = config;
        }

        public a a(int n2, int n3) {
            if (n2 >= 0) {
                if (n3 >= 0) {
                    if (n3 == 0 && n2 == 0) {
                        throw new IllegalArgumentException("At least one dimension has to be positive number.");
                    }
                    this.d = n2;
                    this.e = n3;
                    return this;
                }
                throw new IllegalArgumentException("Height must be positive number or 0.");
            }
            throw new IllegalArgumentException("Width must be positive number or 0.");
        }

        boolean a() {
            if (this.a == null && this.b == 0) {
                return false;
            }
            return true;
        }

        boolean b() {
            if (this.d == 0 && this.e == 0) {
                return false;
            }
            return true;
        }

        public w c() {
            if (this.h && this.f) {
                throw new IllegalStateException("Center crop and center inside can not be used together.");
            }
            if (this.f && this.d == 0 && this.e == 0) {
                throw new IllegalStateException("Center crop requires calling resize with positive width and height.");
            }
            if (this.h && this.d == 0 && this.e == 0) {
                throw new IllegalStateException("Center inside requires calling resize with positive width and height.");
            }
            if (this.q == null) {
                this.q = t.e.b;
            }
            return new w(this.a, this.b, this.c, this.o, this.d, this.e, this.f, this.h, this.g, this.i, this.j, this.k, this.l, this.m, this.n, this.p, this.q);
        }
    }

}

