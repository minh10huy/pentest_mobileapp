/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.content.ContentResolver
 *  android.content.Context
 *  android.content.UriMatcher
 *  android.net.Uri
 *  android.provider.ContactsContract
 *  android.provider.ContactsContract$Contacts
 */
package com.squareup.picasso;

import android.content.ContentResolver;
import android.content.Context;
import android.content.UriMatcher;
import android.net.Uri;
import android.provider.ContactsContract;
import com.squareup.picasso.t;
import com.squareup.picasso.w;
import com.squareup.picasso.y;
import e.l;
import e.s;
import java.io.InputStream;

class f
extends y {
    private static final UriMatcher a = new UriMatcher(-1);
    private final Context b;

    static {
        a.addURI("com.android.contacts", "contacts/lookup/*/#", 1);
        a.addURI("com.android.contacts", "contacts/lookup/*", 1);
        a.addURI("com.android.contacts", "contacts/#/photo", 2);
        a.addURI("com.android.contacts", "contacts/#", 3);
        a.addURI("com.android.contacts", "display_photo/#", 4);
    }

    f(Context context) {
        this.b = context;
    }

    private InputStream b(w object) {
        ContentResolver contentResolver = this.b.getContentResolver();
        Uri uri = object.d;
        object = uri;
        switch (a.match(uri)) {
            default: {
                object = new StringBuilder();
                object.append("Invalid uri: ");
                object.append((Object)uri);
                throw new IllegalStateException(object.toString());
            }
            case 2: 
            case 4: {
                return contentResolver.openInputStream(uri);
            }
            case 1: {
                uri = ContactsContract.Contacts.lookupContact((ContentResolver)contentResolver, (Uri)uri);
                object = uri;
                if (uri != null) break;
                return null;
            }
            case 3: 
        }
        return ContactsContract.Contacts.openContactPhotoInputStream((ContentResolver)contentResolver, (Uri)object, (boolean)true);
    }

    @Override
    public y.a a(w object, int n2) {
        if ((object = this.b((w)object)) == null) {
            return null;
        }
        return new y.a(l.a((InputStream)object), t.d.b);
    }

    @Override
    public boolean a(w w2) {
        Uri uri = w2.d;
        if ("content".equals(uri.getScheme()) && ContactsContract.Contacts.CONTENT_URI.getHost().equals(uri.getHost()) && a.match(w2.d) != -1) {
            return true;
        }
        return false;
    }
}

