/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.annotation.SuppressLint
 *  android.content.BroadcastReceiver
 *  android.content.Context
 *  android.content.Intent
 *  android.content.IntentFilter
 *  android.graphics.Bitmap
 *  android.net.ConnectivityManager
 *  android.net.NetworkInfo
 *  android.os.Handler
 *  android.os.HandlerThread
 *  android.os.Looper
 *  android.os.Message
 */
package com.squareup.picasso;

import android.annotation.SuppressLint;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.graphics.Bitmap;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.os.Handler;
import android.os.HandlerThread;
import android.os.Looper;
import android.os.Message;
import com.squareup.picasso.aa;
import com.squareup.picasso.ad;
import com.squareup.picasso.d;
import com.squareup.picasso.j;
import com.squareup.picasso.p;
import com.squareup.picasso.q;
import com.squareup.picasso.r;
import com.squareup.picasso.t;
import com.squareup.picasso.v;
import com.squareup.picasso.w;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.WeakHashMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Future;

class i {
    final b a = new b();
    final Context b;
    final ExecutorService c;
    final j d;
    final Map<String, com.squareup.picasso.c> e;
    final Map<Object, com.squareup.picasso.a> f;
    final Map<Object, com.squareup.picasso.a> g;
    final Set<Object> h;
    final Handler i;
    final Handler j;
    final d k;
    final aa l;
    final List<com.squareup.picasso.c> m;
    final c n;
    final boolean o;
    boolean p;

    i(Context context, ExecutorService executorService, Handler handler, j j2, d d2, aa aa2) {
        this.a.start();
        ad.a(this.a.getLooper());
        this.b = context;
        this.c = executorService;
        this.e = new LinkedHashMap<String, com.squareup.picasso.c>();
        this.f = new WeakHashMap<Object, com.squareup.picasso.a>();
        this.g = new WeakHashMap<Object, com.squareup.picasso.a>();
        this.h = new LinkedHashSet<Object>();
        this.i = new a(this.a.getLooper(), this);
        this.d = j2;
        this.j = handler;
        this.k = d2;
        this.l = aa2;
        this.m = new ArrayList<com.squareup.picasso.c>(4);
        this.p = ad.c(this.b);
        this.o = ad.b(context, "android.permission.ACCESS_NETWORK_STATE");
        this.n = new c(this);
        this.n.a();
    }

    private void a(List<com.squareup.picasso.c> object) {
        if (object != null) {
            if (object.isEmpty()) {
                return;
            }
            if (object.get((int)0).j().l) {
                StringBuilder stringBuilder = new StringBuilder();
                object = object.iterator();
                while (object.hasNext()) {
                    com.squareup.picasso.c c2 = (com.squareup.picasso.c)object.next();
                    if (stringBuilder.length() > 0) {
                        stringBuilder.append(", ");
                    }
                    stringBuilder.append(ad.a(c2));
                }
                ad.a("Dispatcher", "delivered", stringBuilder.toString());
            }
        }
    }

    private void b() {
        if (!this.f.isEmpty()) {
            Iterator<com.squareup.picasso.a> iterator = this.f.values().iterator();
            while (iterator.hasNext()) {
                com.squareup.picasso.a a2 = iterator.next();
                iterator.remove();
                if (a2.i().l) {
                    ad.a("Dispatcher", "replaying", a2.b().a());
                }
                this.a(a2, false);
            }
        }
    }

    private void e(com.squareup.picasso.a a2) {
        Object t2 = a2.c();
        if (t2 != null) {
            a2.k = true;
            this.f.put(t2, a2);
        }
    }

    private void f(com.squareup.picasso.c object) {
        com.squareup.picasso.a a2 = object.i();
        if (a2 != null) {
            this.e(a2);
        }
        if ((object = object.k()) != null) {
            int n2 = object.size();
            for (int i2 = 0; i2 < n2; ++i2) {
                this.e((com.squareup.picasso.a)object.get(i2));
            }
        }
    }

    private void g(com.squareup.picasso.c c2) {
        if (c2.c()) {
            return;
        }
        if (c2.m != null) {
            c2.m.prepareToDraw();
        }
        this.m.add(c2);
        if (!this.i.hasMessages(7)) {
            this.i.sendEmptyMessageDelayed(7, 200L);
        }
    }

    void a() {
        ArrayList<com.squareup.picasso.c> arrayList = new ArrayList<com.squareup.picasso.c>(this.m);
        this.m.clear();
        this.j.sendMessage(this.j.obtainMessage(8, arrayList));
        this.a(arrayList);
    }

    void a(NetworkInfo networkInfo) {
        this.i.sendMessage(this.i.obtainMessage(9, (Object)networkInfo));
    }

    void a(com.squareup.picasso.a a2) {
        this.i.sendMessage(this.i.obtainMessage(1, (Object)a2));
    }

    void a(com.squareup.picasso.a a2, boolean bl2) {
        if (this.h.contains(a2.k())) {
            this.g.put(a2.c(), a2);
            if (a2.i().l) {
                String string2 = a2.b.a();
                StringBuilder stringBuilder = new StringBuilder();
                stringBuilder.append("because tag '");
                stringBuilder.append(a2.k());
                stringBuilder.append("' is paused");
                ad.a("Dispatcher", "paused", string2, stringBuilder.toString());
            }
            return;
        }
        com.squareup.picasso.c c2 = this.e.get(a2.d());
        if (c2 != null) {
            c2.a(a2);
            return;
        }
        if (this.c.isShutdown()) {
            if (a2.i().l) {
                ad.a("Dispatcher", "ignored", a2.b.a(), "because shut down");
            }
            return;
        }
        c2 = com.squareup.picasso.c.a(a2.i(), this, this.k, this.l, a2);
        c2.n = this.c.submit(c2);
        this.e.put(a2.d(), c2);
        if (bl2) {
            this.f.remove(a2.c());
        }
        if (a2.i().l) {
            ad.a("Dispatcher", "enqueued", a2.b.a());
        }
    }

    void a(com.squareup.picasso.c c2) {
        this.i.sendMessage(this.i.obtainMessage(4, (Object)c2));
    }

    void a(com.squareup.picasso.c c2, boolean bl2) {
        if (c2.j().l) {
            String string2 = ad.a(c2);
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("for error");
            String string3 = bl2 ? " (will replay)" : "";
            stringBuilder.append(string3);
            ad.a("Dispatcher", "batched", string2, stringBuilder.toString());
        }
        this.e.remove(c2.f());
        this.g(c2);
    }

    void a(Object object) {
        if (!this.h.add(object)) {
            return;
        }
        Iterator<com.squareup.picasso.c> iterator = this.e.values().iterator();
        while (iterator.hasNext()) {
            StringBuilder stringBuilder;
            com.squareup.picasso.c c2 = iterator.next();
            boolean bl2 = c2.j().l;
            Object object2 = c2.i();
            List<com.squareup.picasso.a> list = c2.k();
            int n2 = list != null && !list.isEmpty() ? 1 : 0;
            if (object2 == null && n2 == 0) continue;
            if (object2 != null && object2.k().equals(object)) {
                c2.b((com.squareup.picasso.a)object2);
                this.g.put(object2.c(), (com.squareup.picasso.a)object2);
                if (bl2) {
                    object2 = object2.b.a();
                    stringBuilder = new StringBuilder();
                    stringBuilder.append("because tag '");
                    stringBuilder.append(object);
                    stringBuilder.append("' was paused");
                    ad.a("Dispatcher", "paused", (String)object2, stringBuilder.toString());
                }
            }
            if (n2 != 0) {
                for (n2 = list.size() - 1; n2 >= 0; --n2) {
                    object2 = list.get(n2);
                    if (!object2.k().equals(object)) continue;
                    c2.b((com.squareup.picasso.a)object2);
                    this.g.put(object2.c(), (com.squareup.picasso.a)object2);
                    if (!bl2) continue;
                    object2 = object2.b.a();
                    stringBuilder = new StringBuilder();
                    stringBuilder.append("because tag '");
                    stringBuilder.append(object);
                    stringBuilder.append("' was paused");
                    ad.a("Dispatcher", "paused", (String)object2, stringBuilder.toString());
                }
            }
            if (!c2.b()) continue;
            iterator.remove();
            if (!bl2) continue;
            ad.a("Dispatcher", "canceled", ad.a(c2), "all actions paused");
        }
    }

    void a(boolean bl2) {
        RuntimeException runtimeException;
        super("d2j fail translate: java.lang.RuntimeException: can not merge I and Z\n\tat com.googlecode.dex2jar.ir.TypeClass.merge(TypeClass.java:100)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeRef.updateTypeClass(TypeTransformer.java:174)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.copyTypes(TypeTransformer.java:311)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.fixTypes(TypeTransformer.java:226)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.analyze(TypeTransformer.java:207)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer.transform(TypeTransformer.java:44)\n\tat com.googlecode.d2j.dex.Dex2jar$2.optimize(Dex2jar.java:162)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertCode(Dex2Asm.java:414)\n\tat com.googlecode.d2j.dex.ExDex2Asm.convertCode(ExDex2Asm.java:42)\n\tat com.googlecode.d2j.dex.Dex2jar$2.convertCode(Dex2jar.java:128)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertMethod(Dex2Asm.java:509)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertClass(Dex2Asm.java:406)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertDex(Dex2Asm.java:422)\n\tat com.googlecode.d2j.dex.Dex2jar.doTranslate(Dex2jar.java:172)\n\tat com.googlecode.d2j.dex.Dex2jar.to(Dex2jar.java:272)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.doCommandLine(Dex2jarCmd.java:108)\n\tat com.googlecode.dex2jar.tools.BaseCmd.doMain(BaseCmd.java:288)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.main(Dex2jarCmd.java:32)\n");
        throw runtimeException;
    }

    void b(NetworkInfo networkInfo) {
        if (this.c instanceof v) {
            ((v)this.c).a(networkInfo);
        }
        if (networkInfo != null && networkInfo.isConnected()) {
            this.b();
        }
    }

    void b(com.squareup.picasso.a a2) {
        this.i.sendMessage(this.i.obtainMessage(2, (Object)a2));
    }

    void b(com.squareup.picasso.c c2) {
        this.i.sendMessageDelayed(this.i.obtainMessage(5, (Object)c2), 500L);
    }

    void b(Object object) {
        if (!this.h.remove(object)) {
            return;
        }
        ArrayList<com.squareup.picasso.a> arrayList = null;
        Iterator<com.squareup.picasso.a> iterator = this.g.values().iterator();
        while (iterator.hasNext()) {
            com.squareup.picasso.a a2 = iterator.next();
            if (!a2.k().equals(object)) continue;
            ArrayList<com.squareup.picasso.a> arrayList2 = arrayList;
            if (arrayList == null) {
                arrayList2 = new ArrayList<com.squareup.picasso.a>();
            }
            arrayList2.add(a2);
            iterator.remove();
            arrayList = arrayList2;
        }
        if (arrayList != null) {
            this.j.sendMessage(this.j.obtainMessage(13, arrayList));
        }
    }

    void b(boolean bl2) {
        this.p = bl2;
    }

    void c(com.squareup.picasso.a a2) {
        this.a(a2, true);
    }

    void c(com.squareup.picasso.c c2) {
        this.i.sendMessage(this.i.obtainMessage(6, (Object)c2));
    }

    void d(com.squareup.picasso.a a2) {
        String string2 = a2.d();
        com.squareup.picasso.c c2 = this.e.get(string2);
        if (c2 != null) {
            c2.b(a2);
            if (c2.b()) {
                this.e.remove(string2);
                if (a2.i().l) {
                    ad.a("Dispatcher", "canceled", a2.b().a());
                }
            }
        }
        if (this.h.contains(a2.k())) {
            this.g.remove(a2.c());
            if (a2.i().l) {
                ad.a("Dispatcher", "canceled", a2.b().a(), "because paused request got canceled");
            }
        }
        if ((a2 = this.f.remove(a2.c())) != null && a2.i().l) {
            ad.a("Dispatcher", "canceled", a2.b().a(), "from replaying");
        }
    }

    @SuppressLint(value={"MissingPermission"})
    void d(com.squareup.picasso.c c2) {
        if (c2.c()) {
            return;
        }
        boolean bl2 = this.c.isShutdown();
        boolean bl3 = false;
        if (bl2) {
            this.a(c2, false);
            return;
        }
        NetworkInfo networkInfo = null;
        if (this.o) {
            networkInfo = ((ConnectivityManager)ad.a(this.b, "connectivity")).getActiveNetworkInfo();
        }
        if (c2.a(this.p, networkInfo)) {
            if (c2.j().l) {
                ad.a("Dispatcher", "retrying", ad.a(c2));
            }
            if (c2.l() instanceof r.a) {
                c2.i |= q.a.d;
            }
            c2.n = this.c.submit(c2);
            return;
        }
        bl2 = bl3;
        if (this.o) {
            bl2 = bl3;
            if (c2.d()) {
                bl2 = true;
            }
        }
        this.a(c2, bl2);
        if (bl2) {
            this.f(c2);
        }
    }

    void e(com.squareup.picasso.c c2) {
        if (p.b(c2.g())) {
            this.k.a(c2.f(), c2.e());
        }
        this.e.remove(c2.f());
        this.g(c2);
        if (c2.j().l) {
            ad.a("Dispatcher", "batched", ad.a(c2), "for completion");
        }
    }

    private static class a
    extends Handler {
        private final i a;

        a(Looper looper, i i2) {
            super(looper);
            this.a = i2;
        }

        public void handleMessage(Message object) {
            int n2 = object.what;
            boolean bl2 = false;
            switch (n2) {
                default: {
                    t.a.post(new Runnable((Message)object){
                        final /* synthetic */ Message a;
                        {
                            this.a = message;
                        }

                        @Override
                        public void run() {
                            StringBuilder stringBuilder = new StringBuilder();
                            stringBuilder.append("Unknown handler message received: ");
                            stringBuilder.append(this.a.what);
                            throw new AssertionError((Object)stringBuilder.toString());
                        }
                    });
                    return;
                }
                case 12: {
                    object = object.obj;
                    this.a.b(object);
                    return;
                }
                case 11: {
                    object = object.obj;
                    this.a.a(object);
                    return;
                }
                case 10: {
                    i i2 = this.a;
                    if (object.arg1 == 1) {
                        bl2 = true;
                    }
                    i2.b(bl2);
                    return;
                }
                case 9: {
                    object = (NetworkInfo)object.obj;
                    this.a.b((NetworkInfo)object);
                    return;
                }
                case 7: {
                    this.a.a();
                    return;
                }
                case 6: {
                    object = (com.squareup.picasso.c)object.obj;
                    this.a.a((com.squareup.picasso.c)object, false);
                    return;
                }
                case 5: {
                    object = (com.squareup.picasso.c)object.obj;
                    this.a.d((com.squareup.picasso.c)object);
                    return;
                }
                case 4: {
                    object = (com.squareup.picasso.c)object.obj;
                    this.a.e((com.squareup.picasso.c)object);
                    return;
                }
                case 2: {
                    object = (com.squareup.picasso.a)object.obj;
                    this.a.d((com.squareup.picasso.a)object);
                    return;
                }
                case 1: 
            }
            object = (com.squareup.picasso.a)object.obj;
            this.a.c((com.squareup.picasso.a)object);
        }

    }

    static class b
    extends HandlerThread {
        b() {
            super("Picasso-Dispatcher", 10);
        }
    }

    static class c
    extends BroadcastReceiver {
        private final i a;

        c(i i2) {
            this.a = i2;
        }

        void a() {
            IntentFilter intentFilter = new IntentFilter();
            intentFilter.addAction("android.intent.action.AIRPLANE_MODE");
            if (this.a.o) {
                intentFilter.addAction("android.net.conn.CONNECTIVITY_CHANGE");
            }
            this.a.b.registerReceiver((BroadcastReceiver)this, intentFilter);
        }

        @SuppressLint(value={"MissingPermission"})
        public void onReceive(Context context, Intent intent) {
            if (intent == null) {
                return;
            }
            String string2 = intent.getAction();
            if ("android.intent.action.AIRPLANE_MODE".equals(string2)) {
                if (!intent.hasExtra("state")) {
                    return;
                }
                this.a.a(intent.getBooleanExtra("state", false));
                return;
            }
            if ("android.net.conn.CONNECTIVITY_CHANGE".equals(string2)) {
                context = (ConnectivityManager)ad.a(context, "connectivity");
                this.a.a(context.getActiveNetworkInfo());
            }
        }
    }

}

