/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.annotation.TargetApi
 *  android.app.ActivityManager
 *  android.content.ContentResolver
 *  android.content.Context
 *  android.content.pm.ApplicationInfo
 *  android.content.pm.PackageManager
 *  android.content.pm.PackageManager$NameNotFoundException
 *  android.content.res.Resources
 *  android.graphics.Bitmap
 *  android.net.Uri
 *  android.os.Build
 *  android.os.Build$VERSION
 *  android.os.Handler
 *  android.os.Looper
 *  android.os.Message
 *  android.os.Process
 *  android.os.StatFs
 *  android.provider.Settings
 *  android.provider.Settings$Global
 *  android.provider.Settings$System
 *  android.util.Log
 */
package com.squareup.picasso;

import android.annotation.TargetApi;
import android.app.ActivityManager;
import android.content.ContentResolver;
import android.content.Context;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageManager;
import android.content.res.Resources;
import android.graphics.Bitmap;
import android.net.Uri;
import android.os.Build;
import android.os.Handler;
import android.os.Looper;
import android.os.Message;
import android.os.Process;
import android.os.StatFs;
import android.provider.Settings;
import android.util.Log;
import com.squareup.picasso.ac;
import com.squareup.picasso.c;
import com.squareup.picasso.w;
import e.e;
import e.f;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.List;
import java.util.concurrent.ThreadFactory;

final class ad {
    static final StringBuilder a = new StringBuilder();
    private static final f b = f.a("RIFF");
    private static final f c = f.a("WEBP");

    /*
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    static int a(Resources object, w object2) {
        if (object2.e != 0) return object2.e;
        if (object2.d == null) {
            return object2.e;
        }
        String string2 = object2.d.getAuthority();
        if (string2 == null) {
            object = new StringBuilder();
            object.append("No package provided: ");
            object.append((Object)object2.d);
            throw new FileNotFoundException(object.toString());
        }
        List list = object2.d.getPathSegments();
        if (list != null && !list.isEmpty()) {
            if (list.size() == 1) {
                return Integer.parseInt((String)list.get(0));
            }
            if (list.size() == 2) {
                object2 = (String)list.get(0);
                return object.getIdentifier((String)list.get(1), (String)object2, string2);
            }
            object = new StringBuilder();
            object.append("More than two path segments: ");
            object.append((Object)object2.d);
            throw new FileNotFoundException(object.toString());
        }
        object = new StringBuilder();
        object.append("No path segments: ");
        object.append((Object)object2.d);
        throw new FileNotFoundException(object.toString());
        catch (NumberFormatException numberFormatException) {}
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("Last path segment is not a resource ID: ");
        stringBuilder.append((Object)object2.d);
        throw new FileNotFoundException(stringBuilder.toString());
    }

    static int a(Bitmap bitmap) {
        int n2 = Build.VERSION.SDK_INT >= 19 ? bitmap.getAllocationByteCount() : bitmap.getByteCount();
        if (n2 >= 0) {
            return n2;
        }
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("Negative size: ");
        stringBuilder.append((Object)bitmap);
        throw new IllegalStateException(stringBuilder.toString());
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @TargetApi(value=18)
    static long a(File file) {
        long l2;
        try {
            file = new StatFs(file.getAbsolutePath());
            l2 = Build.VERSION.SDK_INT < 18 ? (long)file.getBlockCount() : file.getBlockCountLong();
            long l3 = Build.VERSION.SDK_INT < 18 ? (long)file.getBlockSize() : file.getBlockSizeLong();
            l2 = l2 * l3 / 50L;
            return Math.max(Math.min(l2, 52428800L), 0x500000L);
        }
        catch (IllegalArgumentException illegalArgumentException) {}
        l2 = 0x500000L;
        return Math.max(Math.min(l2, 52428800L), 0x500000L);
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    static Resources a(Context object, w w2) {
        if (w2.e != 0) return object.getResources();
        if (w2.d == null) {
            return object.getResources();
        }
        String string2 = w2.d.getAuthority();
        if (string2 == null) {
            object = new StringBuilder();
            object.append("No package provided: ");
            object.append((Object)w2.d);
            throw new FileNotFoundException(object.toString());
        }
        try {
            return object.getPackageManager().getResourcesForApplication(string2);
        }
        catch (PackageManager.NameNotFoundException nameNotFoundException) {}
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("Unable to obtain resources for package: ");
        stringBuilder.append((Object)w2.d);
        throw new FileNotFoundException(stringBuilder.toString());
    }

    static File a(Context object) {
        if (!(object = new File(object.getApplicationContext().getCacheDir(), "picasso-cache")).exists()) {
            object.mkdirs();
        }
        return object;
    }

    static <T> T a(Context context, String string2) {
        return (T)context.getSystemService(string2);
    }

    static <T> T a(T t2, String string2) {
        if (t2 != null) {
            return t2;
        }
        throw new NullPointerException(string2);
    }

    static String a(c c2) {
        return ad.a(c2, "");
    }

    static String a(c object, String charSequence) {
        charSequence = new StringBuilder((String)charSequence);
        com.squareup.picasso.a a2 = object.i();
        if (a2 != null) {
            charSequence.append(a2.b.a());
        }
        if ((object = object.k()) != null) {
            int n2 = object.size();
            for (int i2 = 0; i2 < n2; ++i2) {
                if (i2 > 0 || a2 != null) {
                    charSequence.append(", ");
                }
                charSequence.append(((com.squareup.picasso.a)object.get((int)i2)).b.a());
            }
        }
        return charSequence.toString();
    }

    static String a(w object) {
        object = ad.a((w)object, a);
        a.setLength(0);
        return object;
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Lifted jumps to return sites
     */
    static String a(w var0, StringBuilder var1_1) {
        block12 : {
            block11 : {
                block10 : {
                    block9 : {
                        if (var0.f == null) break block9;
                        var1_1.ensureCapacity(var0.f.length() + 50);
                        var4_2 = var0.f;
                        ** GOTO lbl9
                    }
                    if (var0.d != null) {
                        var4_2 = var0.d.toString();
                        var1_1.ensureCapacity(var4_2.length() + 50);
lbl9: // 2 sources:
                        var1_1.append(var4_2);
                    } else {
                        var1_1.ensureCapacity(50);
                        var1_1.append(var0.e);
                    }
                    var1_1.append('\n');
                    if (var0.n != 0.0f) {
                        var1_1.append("rotation:");
                        var1_1.append(var0.n);
                        if (var0.q) {
                            var1_1.append('@');
                            var1_1.append(var0.o);
                            var1_1.append('x');
                            var1_1.append(var0.p);
                        }
                        var1_1.append('\n');
                    }
                    if (var0.d()) {
                        var1_1.append("resize:");
                        var1_1.append(var0.h);
                        var1_1.append('x');
                        var1_1.append(var0.i);
                        var1_1.append('\n');
                    }
                    if (!var0.j) break block10;
                    var1_1.append("centerCrop:");
                    var1_1.append(var0.k);
                    break block11;
                }
                if (!var0.l) break block12;
                var1_1.append("centerInside");
            }
            var1_1.append('\n');
        }
        if (var0.g == null) return var1_1.toString();
        var2_3 = 0;
        var3_4 = var0.g.size();
        while (var2_3 < var3_4) {
            var1_1.append(var0.g.get(var2_3).a());
            var1_1.append('\n');
            ++var2_3;
        }
        return var1_1.toString();
    }

    static void a() {
        if (ad.b()) {
            return;
        }
        throw new IllegalStateException("Method call should happen from the main thread.");
    }

    static void a(Looper object) {
        object = new Handler((Looper)object){

            public void handleMessage(Message message) {
                this.sendMessageDelayed(this.obtainMessage(), 1000L);
            }
        };
        object.sendMessageDelayed(object.obtainMessage(), 1000L);
    }

    static void a(String string2, String string3, String string4) {
        ad.a(string2, string3, string4, "");
    }

    static void a(String string2, String string3, String string4, String string5) {
        Log.d((String)"Picasso", (String)String.format("%1$-11s %2$-12s %3$s %4$s", string2, string3, string4, string5));
    }

    static boolean a(e e2) {
        if (e2.a(0L, b) && e2.a(8L, c)) {
            return true;
        }
        return false;
    }

    static int b(Context context) {
        ActivityManager activityManager = (ActivityManager)ad.a(context, "activity");
        int n2 = (context.getApplicationInfo().flags & 1048576) != 0 ? 1 : 0;
        n2 = n2 != 0 ? activityManager.getLargeMemoryClass() : activityManager.getMemoryClass();
        return (int)((long)n2 * 0x100000L / 7L);
    }

    static boolean b() {
        if (Looper.getMainLooper().getThread() == Thread.currentThread()) {
            return true;
        }
        return false;
    }

    static boolean b(Context context, String string2) {
        if (context.checkCallingOrSelfPermission(string2) == 0) {
            return true;
        }
        return false;
    }

    static boolean c(Context context) {
        boolean bl2;
        block5 : {
            context = context.getContentResolver();
            bl2 = false;
            if (Build.VERSION.SDK_INT >= 17) break block5;
            if (Settings.System.getInt((ContentResolver)context, (String)"airplane_mode_on", (int)0) != 0) {
                return true;
            }
        }
        try {
            int n2 = Settings.Global.getInt((ContentResolver)context, (String)"airplane_mode_on", (int)0);
            if (n2 != 0) {
                bl2 = true;
            }
            return bl2;
        }
        catch (NullPointerException | SecurityException runtimeException) {
            return false;
        }
        return false;
    }

    private static class a
    extends Thread {
        a(Runnable runnable) {
            super(runnable);
        }

        @Override
        public void run() {
            Process.setThreadPriority((int)10);
            super.run();
        }
    }

    static class b
    implements ThreadFactory {
        b() {
        }

        @Override
        public Thread newThread(Runnable runnable) {
            return new a(runnable);
        }
    }

}

