/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  javax.annotation.Nullable
 */
package d.a.a;

import d.a.a.e;
import d.a.g.f;
import e.l;
import e.r;
import e.s;
import java.io.Closeable;
import java.io.EOFException;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.Flushable;
import java.io.IOException;
import java.util.Arrays;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.Executor;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.annotation.Nullable;

public final class d
implements Closeable,
Flushable {
    static final Pattern a;
    static final /* synthetic */ boolean m;
    final d.a.f.a b;
    final File c;
    final int d;
    e.d e;
    final LinkedHashMap<String, b> f = new LinkedHashMap(0, 0.75f, true);
    int g;
    boolean h;
    boolean i;
    boolean j;
    boolean k;
    boolean l;
    private final File n;
    private final File o;
    private final File p;
    private final int q;
    private long r;
    private long s = 0L;
    private long t = 0L;
    private final Executor u;
    private final Runnable v = new Runnable(){

        /*
         * Enabled aggressive block sorting
         * Enabled unnecessary exception pruning
         * Enabled aggressive exception aggregation
         */
        @Override
        public void run() {
            d d2 = d.this;
            synchronized (d2) {
                block9 : {
                    block8 : {
                        if (d.this.i ^ true | d.this.j) {
                            return;
                        }
                        try {
                            d.this.e();
                            break block8;
                        }
                        catch (IOException iOException) {}
                        d.this.k = true;
                    }
                    try {
                        if (d.this.c()) {
                            d.this.b();
                            d.this.g = 0;
                        }
                        break block9;
                    }
                    catch (IOException iOException) {}
                    d.this.l = true;
                    d.this.e = l.a(l.a());
                }
                return;
            }
        }
    };

    static {
        m = d.class.desiredAssertionStatus() ^ true;
        a = Pattern.compile("[a-z0-9_-]{1,120}");
    }

    d(d.a.f.a a2, File file, int n2, int n3, long l2, Executor executor) {
        this.b = a2;
        this.c = file;
        this.q = n2;
        this.n = new File(file, "journal");
        this.o = new File(file, "journal.tmp");
        this.p = new File(file, "journal.bkp");
        this.d = n3;
        this.r = l2;
        this.u = executor;
    }

    public static d a(d.a.f.a a2, File file, int n2, int n3, long l2) {
        if (l2 > 0L) {
            if (n3 > 0) {
                return new d(a2, file, n2, n3, l2, new ThreadPoolExecutor(0, 1, 60L, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>(), d.a.c.a("OkHttp DiskLruCache", true)));
            }
            throw new IllegalArgumentException("valueCount <= 0");
        }
        throw new IllegalArgumentException("maxSize <= 0");
    }

    private void d(String arrstring) {
        int n2 = arrstring.indexOf(32);
        if (n2 != -1) {
            CharSequence charSequence;
            Object object;
            int n3 = n2 + 1;
            int n4 = arrstring.indexOf(32, n3);
            if (n4 == -1) {
                object = arrstring.substring(n3);
                charSequence = object;
                if (n2 == "REMOVE".length()) {
                    charSequence = object;
                    if (arrstring.startsWith("REMOVE")) {
                        this.f.remove(object);
                        return;
                    }
                }
            } else {
                charSequence = arrstring.substring(n3, n4);
            }
            b b2 = this.f.get(charSequence);
            object = b2;
            if (b2 == null) {
                object = new b((String)charSequence);
                this.f.put((String)charSequence, (b)object);
            }
            if (n4 != -1 && n2 == "CLEAN".length() && arrstring.startsWith("CLEAN")) {
                arrstring = arrstring.substring(n4 + 1).split(" ");
                object.e = true;
                object.f = null;
                object.a(arrstring);
                return;
            }
            if (n4 == -1 && n2 == "DIRTY".length() && arrstring.startsWith("DIRTY")) {
                object.f = new a((b)object);
                return;
            }
            if (n4 == -1 && n2 == "READ".length() && arrstring.startsWith("READ")) {
                return;
            }
            charSequence = new StringBuilder();
            charSequence.append("unexpected journal line: ");
            charSequence.append((String)arrstring);
            throw new IOException(charSequence.toString());
        }
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("unexpected journal line: ");
        stringBuilder.append((String)arrstring);
        throw new IOException(stringBuilder.toString());
    }

    private void e(String string2) {
        if (a.matcher(string2).matches()) {
            return;
        }
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("keys must match regex [a-z0-9_-]{1,120}: \"");
        stringBuilder.append(string2);
        stringBuilder.append("\"");
        throw new IllegalArgumentException(stringBuilder.toString());
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    private void g() {
        e.e e2;
        int n2;
        block10 : {
            e2 = l.a(this.b.a(this.n));
            try {
                boolean bl2;
                String string2 = e2.r();
                String string3 = e2.r();
                CharSequence charSequence = e2.r();
                String string4 = e2.r();
                String string5 = e2.r();
                if (!("libcore.io.DiskLruCache".equals(string2) && "1".equals(string3) && Integer.toString(this.q).equals(charSequence) && Integer.toString(this.d).equals(string4) && (bl2 = "".equals(string5)))) {
                    charSequence = new StringBuilder();
                    charSequence.append("unexpected journal header: [");
                    charSequence.append(string2);
                    charSequence.append(", ");
                    charSequence.append(string3);
                    charSequence.append(", ");
                    charSequence.append(string4);
                    charSequence.append(", ");
                    charSequence.append(string5);
                    charSequence.append("]");
                    throw new IOException(charSequence.toString());
                }
                n2 = 0;
                break block10;
            }
            catch (Throwable throwable) {}
            throw throwable;
        }
        try {
            do {
                this.d(e2.r());
                ++n2;
            } while (true);
        }
        catch (EOFException eOFException) {}
        this.g = n2 - this.f.size();
        if (!e2.f()) {
            this.b();
            return;
        }
        this.e = this.h();
    }

    private e.d h() {
        return l.a(new e(this.b.c(this.n)){
            static final /* synthetic */ boolean a;

            static {
                a = d.class.desiredAssertionStatus() ^ true;
            }

            @Override
            protected void a(IOException iOException) {
                if (!a && !Thread.holdsLock(d.this)) {
                    throw new AssertionError();
                }
                d.this.h = true;
            }
        });
    }

    private void i() {
        this.b.d(this.o);
        Iterator<b> iterator = this.f.values().iterator();
        while (iterator.hasNext()) {
            int n2;
            b b2 = iterator.next();
            a a2 = b2.f;
            int n3 = 0;
            if (a2 == null) {
                for (n2 = 0; n2 < this.d; ++n2) {
                    this.s += b2.b[n2];
                }
                continue;
            }
            b2.f = null;
            for (n2 = n3; n2 < this.d; ++n2) {
                this.b.d(b2.c[n2]);
                this.b.d(b2.d[n2]);
            }
            iterator.remove();
        }
    }

    private void j() {
        synchronized (this) {
            block4 : {
                boolean bl2 = this.d();
                if (bl2) break block4;
                return;
            }
            throw new IllegalStateException("cache is closed");
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    a a(String object, long l2) {
        synchronized (this) {
            Object object2;
            long l3;
            void var2_2;
            this.a();
            this.j();
            this.e((String)object);
            b b2 = this.f.get(object);
            if (var2_2 != -1L && (b2 == null || (l3 = b2.g) != var2_2)) {
                return null;
            }
            if (b2 != null && (object2 = b2.f) != null) {
                return null;
            }
            if (!this.k && !this.l) {
                this.e.b("DIRTY").i(32).b((String)object).i(10);
                this.e.flush();
                boolean bl2 = this.h;
                if (bl2) {
                    return null;
                }
                object2 = b2;
                if (b2 == null) {
                    object2 = new b((String)object);
                    this.f.put((String)object, (b)object2);
                }
                object2.f = object = new a((b)object2);
                return object;
            }
            this.u.execute(this.v);
            return null;
        }
    }

    public c a(String string2) {
        synchronized (this) {
            block6 : {
                Object object;
                block7 : {
                    this.a();
                    this.j();
                    this.e(string2);
                    object = this.f.get(string2);
                    if (object == null) break block6;
                    if (!object.e) break block6;
                    if ((object = object.a()) != null) break block7;
                    return null;
                }
                ++this.g;
                this.e.b("READ").i(32).b(string2).i(10);
                if (this.c()) {
                    this.u.execute(this.v);
                }
                return object;
            }
            return null;
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public void a() {
        synchronized (this) {
            if (!m && !Thread.holdsLock(this)) {
                throw new AssertionError();
            }
            boolean bl2 = this.i;
            if (bl2) {
                return;
            }
            if (this.b.e(this.p)) {
                if (this.b.e(this.n)) {
                    this.b.d(this.p);
                } else {
                    this.b.a(this.p, this.n);
                }
            }
            if (bl2 = this.b.e(this.n)) {
                try {
                    this.g();
                    this.i();
                    this.i = true;
                    return;
                }
                catch (IOException iOException) {
                    f f2 = f.c();
                    StringBuilder stringBuilder = new StringBuilder();
                    stringBuilder.append("DiskLruCache ");
                    stringBuilder.append(this.c);
                    stringBuilder.append(" is corrupt: ");
                    stringBuilder.append(iOException.getMessage());
                    stringBuilder.append(", removing");
                    f2.a(5, stringBuilder.toString(), iOException);
                    try {
                        this.f();
                    }
                    finally {
                        this.j = false;
                    }
                }
            }
            this.b();
            this.i = true;
            return;
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    void a(a object, boolean bl2) {
        synchronized (this) {
            int n2;
            void var2_2;
            b b2 = object.a;
            if (b2.f != object) {
                throw new IllegalStateException();
            }
            int n3 = n2 = 0;
            if (var2_2 != false) {
                n3 = n2;
                if (!b2.e) {
                    int n4 = 0;
                    do {
                        n3 = n2;
                        if (n4 >= this.d) break;
                        if (!object.b[n4]) {
                            object.c();
                            object = new StringBuilder();
                            object.append("Newly created entry didn't create value for index ");
                            object.append(n4);
                            throw new IllegalStateException(object.toString());
                        }
                        if (!this.b.e(b2.d[n4])) {
                            object.c();
                            return;
                        }
                        ++n4;
                    } while (true);
                }
            }
            do {
                long l2;
                if (n3 < this.d) {
                    object = b2.d[n3];
                    if (var2_2 != false) {
                        if (this.b.e((File)object)) {
                            long l3;
                            File file = b2.c[n3];
                            this.b.a((File)object, file);
                            l2 = b2.b[n3];
                            b2.b[n3] = l3 = this.b.f(file);
                            this.s = this.s - l2 + l3;
                        }
                    } else {
                        this.b.d((File)object);
                    }
                } else {
                    ++this.g;
                    b2.f = null;
                    if ((b2.e | var2_2) != 0) {
                        b2.e = true;
                        this.e.b("CLEAN").i(32);
                        this.e.b(b2.a);
                        b2.a(this.e);
                        this.e.i(10);
                        if (var2_2 != false) {
                            l2 = this.t;
                            this.t = 1L + l2;
                            b2.g = l2;
                        }
                    } else {
                        this.f.remove(b2.a);
                        this.e.b("REMOVE").i(32);
                        this.e.b(b2.a);
                        this.e.i(10);
                    }
                    this.e.flush();
                    if (this.s > this.r || this.c()) {
                        this.u.execute(this.v);
                    }
                    return;
                }
                ++n3;
            } while (true);
        }
    }

    boolean a(b b2) {
        if (b2.f != null) {
            b2.f.a();
        }
        for (int i2 = 0; i2 < this.d; ++i2) {
            this.b.d(b2.c[i2]);
            this.s -= b2.b[i2];
            b2.b[i2] = 0L;
        }
        ++this.g;
        this.e.b("REMOVE").i(32).b(b2.a).i(10);
        this.f.remove(b2.a);
        if (this.c()) {
            this.u.execute(this.v);
        }
        return true;
    }

    @Nullable
    public a b(String string2) {
        return this.a(string2, -1L);
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    void b() {
        synchronized (this) {
            if (this.e != null) {
                this.e.close();
            }
            e.d d2 = l.a(this.b.b(this.o));
            d2.b("libcore.io.DiskLruCache").i(10);
            d2.b("1").i(10);
            d2.l(this.q).i(10);
            d2.l(this.d).i(10);
            d2.i(10);
            for (b b2 : this.f.values()) {
                if (b2.f != null) {
                    d2.b("DIRTY").i(32);
                    d2.b(b2.a);
                } else {
                    d2.b("CLEAN").i(32);
                    d2.b(b2.a);
                    b2.a(d2);
                }
                d2.i(10);
            }
            if (this.b.e(this.n)) {
                this.b.a(this.n, this.p);
            }
            this.b.a(this.o, this.n);
            this.b.d(this.p);
            this.e = this.h();
            this.h = false;
            this.l = false;
            return;
            finally {
                d2.close();
            }
        }
    }

    boolean c() {
        if (this.g >= 2000 && this.g >= this.f.size()) {
            return true;
        }
        return false;
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public boolean c(String object) {
        synchronized (this) {
            this.a();
            this.j();
            this.e((String)object);
            object = this.f.get(object);
            if (object == null) {
                return false;
            }
            boolean bl2 = this.a((b)object);
            if (bl2 && this.s <= this.r) {
                this.k = false;
            }
            return bl2;
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @Override
    public void close() {
        synchronized (this) {
            if (!this.i || this.j) {
                this.j = true;
                return;
            }
            b[] arrb = this.f.values().toArray(new b[this.f.size()]);
            int n2 = arrb.length;
            int n3 = 0;
            do {
                if (n3 >= n2) {
                    this.e();
                    this.e.close();
                    this.e = null;
                    this.j = true;
                    return;
                }
                b b2 = arrb[n3];
                if (b2.f != null) {
                    b2.f.c();
                }
                ++n3;
            } while (true);
        }
    }

    public boolean d() {
        synchronized (this) {
            boolean bl2 = this.j;
            return bl2;
        }
    }

    void e() {
        while (this.s > this.r) {
            this.a(this.f.values().iterator().next());
        }
        this.k = false;
    }

    public void f() {
        this.close();
        this.b.g(this.c);
    }

    @Override
    public void flush() {
        synchronized (this) {
            block4 : {
                boolean bl2 = this.i;
                if (bl2) break block4;
                return;
            }
            this.j();
            this.e();
            this.e.flush();
            return;
        }
    }

    public final class a {
        final b a;
        final boolean[] b;
        private boolean d;

        a(b b2) {
            this.a = b2;
            d.this = b2.e ? null : new boolean[d.this.d];
            this.b = d.this;
        }

        /*
         * Enabled aggressive block sorting
         * Enabled unnecessary exception pruning
         * Enabled aggressive exception aggregation
         */
        public r a(int n2) {
            d d2 = d.this;
            synchronized (d2) {
                if (this.d) {
                    throw new IllegalStateException();
                }
                if (this.a.f != this) {
                    return l.a();
                }
                if (!this.a.e) {
                    this.b[n2] = true;
                }
                Object object = this.a.d[n2];
                try {
                    object = d.this.b.b((File)object);
                }
                catch (FileNotFoundException fileNotFoundException) {}
                return new e((r)object){

                    /*
                     * Enabled aggressive block sorting
                     * Enabled unnecessary exception pruning
                     * Enabled aggressive exception aggregation
                     */
                    @Override
                    protected void a(IOException object) {
                        object = d.this;
                        synchronized (object) {
                            a.this.a();
                            return;
                        }
                    }
                };
                return l.a();
            }
        }

        /*
         * Enabled aggressive block sorting
         * Enabled unnecessary exception pruning
         * Enabled aggressive exception aggregation
         * Lifted jumps to return sites
         */
        void a() {
            if (this.a.f != this) return;
            int n2 = 0;
            do {
                if (n2 >= d.this.d) {
                    this.a.f = null;
                    return;
                }
                try {
                    d.this.b.d(this.a.d[n2]);
                }
                catch (IOException iOException) {}
                ++n2;
            } while (true);
        }

        /*
         * Enabled aggressive block sorting
         * Enabled unnecessary exception pruning
         * Enabled aggressive exception aggregation
         */
        public void b() {
            d d2 = d.this;
            synchronized (d2) {
                if (this.d) {
                    throw new IllegalStateException();
                }
                if (this.a.f == this) {
                    d.this.a(this, true);
                }
                this.d = true;
                return;
            }
        }

        /*
         * Enabled aggressive block sorting
         * Enabled unnecessary exception pruning
         * Enabled aggressive exception aggregation
         */
        public void c() {
            d d2 = d.this;
            synchronized (d2) {
                if (this.d) {
                    throw new IllegalStateException();
                }
                if (this.a.f == this) {
                    d.this.a(this, false);
                }
                this.d = true;
                return;
            }
        }

    }

    private final class b {
        final String a;
        final long[] b;
        final File[] c;
        final File[] d;
        boolean e;
        a f;
        long g;

        b(String charSequence) {
            this.a = charSequence;
            this.b = new long[d.this.d];
            this.c = new File[d.this.d];
            this.d = new File[d.this.d];
            charSequence = new StringBuilder((String)charSequence);
            charSequence.append('.');
            int n2 = charSequence.length();
            for (int i2 = 0; i2 < d.this.d; ++i2) {
                charSequence.append(i2);
                this.c[i2] = new File(d.this.c, charSequence.toString());
                charSequence.append(".tmp");
                this.d[i2] = new File(d.this.c, charSequence.toString());
                charSequence.setLength(n2);
            }
        }

        private IOException b(String[] arrstring) {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("unexpected journal line: ");
            stringBuilder.append(Arrays.toString(arrstring));
            throw new IOException(stringBuilder.toString());
        }

        /*
         * Enabled aggressive block sorting
         * Enabled unnecessary exception pruning
         * Enabled aggressive exception aggregation
         */
        c a() {
            if (!Thread.holdsLock(d.this)) throw new AssertionError();
            s[] arrs = new s[d.this.d];
            long[] arrl = (long[])this.b.clone();
            int n2 = 0;
            int n3 = 0;
            try {
                while (n3 < d.this.d) {
                    arrs[n3] = d.this.b.a(this.c[n3]);
                    ++n3;
                }
                return new c(this.a, this.g, arrs, arrl);
            }
            catch (FileNotFoundException fileNotFoundException) {}
            for (n3 = n2; n3 < d.this.d && arrs[n3] != null; ++n3) {
                d.a.c.a(arrs[n3]);
            }
            try {
                d.this.a(this);
                return null;
            }
            catch (IOException iOException) {
                return null;
            }
        }

        void a(e.d d2) {
            for (long l2 : this.b) {
                d2.i(32).l(l2);
            }
        }

        /*
         * Enabled aggressive block sorting
         * Enabled unnecessary exception pruning
         * Enabled aggressive exception aggregation
         */
        void a(String[] arrstring) {
            if (arrstring.length != d.this.d) throw this.b(arrstring);
            int n2 = 0;
            try {
                while (n2 < arrstring.length) {
                    this.b[n2] = Long.parseLong(arrstring[n2]);
                    ++n2;
                }
                return;
            }
            catch (NumberFormatException numberFormatException) {
                throw this.b(arrstring);
            }
        }
    }

    public final class c
    implements Closeable {
        private final String b;
        private final long c;
        private final s[] d;
        private final long[] e;

        c(String string2, long l2, s[] arrs, long[] arrl) {
            this.b = string2;
            this.c = l2;
            this.d = arrs;
            this.e = arrl;
        }

        @Nullable
        public a a() {
            return d.this.a(this.b, this.c);
        }

        public s a(int n2) {
            return this.d[n2];
        }

        @Override
        public void close() {
            s[] arrs = this.d;
            int n2 = arrs.length;
            for (int i2 = 0; i2 < n2; ++i2) {
                d.a.c.a(arrs[i2]);
            }
        }
    }

}

