/*
 * Decompiled with CFR 0_132.
 */
package d.a.f;

import e.l;
import e.r;
import e.s;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;

public interface a {
    public static final a a = new a(){

        @Override
        public s a(File file) {
            return l.a(file);
        }

        @Override
        public void a(File file, File file2) {
            this.d(file2);
            if (file.renameTo(file2)) {
                return;
            }
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("failed to rename ");
            stringBuilder.append(file);
            stringBuilder.append(" to ");
            stringBuilder.append(file2);
            throw new IOException(stringBuilder.toString());
        }

        /*
         * Enabled aggressive block sorting
         * Enabled unnecessary exception pruning
         * Enabled aggressive exception aggregation
         */
        @Override
        public r b(File file) {
            try {
                return l.b(file);
            }
            catch (FileNotFoundException fileNotFoundException) {}
            file.getParentFile().mkdirs();
            return l.b(file);
        }

        /*
         * Enabled aggressive block sorting
         * Enabled unnecessary exception pruning
         * Enabled aggressive exception aggregation
         */
        @Override
        public r c(File file) {
            try {
                return l.c(file);
            }
            catch (FileNotFoundException fileNotFoundException) {}
            file.getParentFile().mkdirs();
            return l.c(file);
        }

        @Override
        public void d(File file) {
            if (!file.delete()) {
                if (!file.exists()) {
                    return;
                }
                StringBuilder stringBuilder = new StringBuilder();
                stringBuilder.append("failed to delete ");
                stringBuilder.append(file);
                throw new IOException(stringBuilder.toString());
            }
        }

        @Override
        public boolean e(File file) {
            return file.exists();
        }

        @Override
        public long f(File file) {
            return file.length();
        }

        @Override
        public void g(File object) {
            Object object2 = object.listFiles();
            if (object2 != null) {
                int n2 = ((File[])object2).length;
                for (int i2 = 0; i2 < n2; ++i2) {
                    object = object2[i2];
                    if (object.isDirectory()) {
                        this.g((File)object);
                    }
                    if (object.delete()) {
                        continue;
                    }
                    object2 = new StringBuilder();
                    object2.append("failed to delete ");
                    object2.append(object);
                    throw new IOException(object2.toString());
                }
                return;
            }
            object2 = new StringBuilder();
            object2.append("not a readable directory: ");
            object2.append(object);
            throw new IOException(object2.toString());
        }
    };

    public s a(File var1);

    public void a(File var1, File var2);

    public r b(File var1);

    public r c(File var1);

    public void d(File var1);

    public boolean e(File var1);

    public long f(File var1);

    public void g(File var1);

}

