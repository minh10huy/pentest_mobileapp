/*
 * Decompiled with CFR 0_132.
 */
package d.a.c;

import d.a.c;
import d.aa;
import d.ac;
import d.l;
import d.m;
import d.s;
import d.t;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;
import java.util.regex.Pattern;

public final class e {
    private static final Pattern a = Pattern.compile(" +([^ \"=]*)=(:?\"([^\"]*)\"|([^ \"=]*)) *(:?,|$)");

    public static int a(String string2, int n2) {
        while (n2 < string2.length()) {
            char c2 = string2.charAt(n2);
            if (c2 != ' ' && c2 != '\t') {
                return n2;
            }
            ++n2;
        }
        return n2;
    }

    public static int a(String string2, int n2, String string3) {
        while (n2 < string2.length()) {
            if (string3.indexOf(string2.charAt(n2)) != -1) {
                return n2;
            }
            ++n2;
        }
        return n2;
    }

    public static long a(ac ac2) {
        return e.a(ac2.g());
    }

    public static long a(s s2) {
        return e.a(s2.a("Content-Length"));
    }

    private static long a(String string2) {
        if (string2 == null) {
            return -1L;
        }
        try {
            long l2 = Long.parseLong(string2);
            return l2;
        }
        catch (NumberFormatException numberFormatException) {
            return -1L;
        }
    }

    public static s a(s s2, s object) {
        if ((object = e.c((s)object)).isEmpty()) {
            return new s.a().a();
        }
        s.a a2 = new s.a();
        int n2 = s2.a();
        for (int i2 = 0; i2 < n2; ++i2) {
            String string2 = s2.a(i2);
            if (!object.contains(string2)) continue;
            a2.a(string2, s2.b(i2));
        }
        return a2.a();
    }

    public static void a(m m2, t t2, s object) {
        if (m2 == m.a) {
            return;
        }
        if ((object = l.a(t2, (s)object)).isEmpty()) {
            return;
        }
        m2.a(t2, (List<l>)object);
    }

    public static boolean a(ac object, s s2, aa aa2) {
        for (String string2 : e.e((ac)object)) {
            if (c.a(s2.b(string2), aa2.b(string2))) continue;
            return false;
        }
        return true;
    }

    public static int b(String string2, int n2) {
        long l2;
        block3 : {
            try {
                l2 = Long.parseLong(string2);
                if (l2 > Integer.MAX_VALUE) {
                    return Integer.MAX_VALUE;
                }
                if (l2 >= 0L) break block3;
                return 0;
            }
            catch (NumberFormatException numberFormatException) {
                return n2;
            }
        }
        return (int)l2;
    }

    public static boolean b(ac ac2) {
        return e.b(ac2.g());
    }

    public static boolean b(s s2) {
        return e.c(s2).contains("*");
    }

    public static s c(ac ac2) {
        return e.a(ac2.j().a().c(), ac2.g());
    }

    public static Set<String> c(s s2) {
        Set<String> set = Collections.emptySet();
        int n2 = s2.a();
        block0 : for (int i2 = 0; i2 < n2; ++i2) {
            if (!"Vary".equalsIgnoreCase(s2.a(i2))) continue;
            String[] arrstring = s2.b(i2);
            Set<String> set2 = set;
            if (set.isEmpty()) {
                set2 = new TreeSet<String>(String.CASE_INSENSITIVE_ORDER);
            }
            arrstring = arrstring.split(",");
            int n3 = arrstring.length;
            int n4 = 0;
            do {
                set = set2;
                if (n4 >= n3) continue block0;
                set2.add(arrstring[n4].trim());
                ++n4;
            } while (true);
        }
        return set;
    }

    public static boolean d(ac ac2) {
        if (ac2.a().b().equals("HEAD")) {
            return false;
        }
        int n2 = ac2.c();
        if ((n2 < 100 || n2 >= 200) && n2 != 204 && n2 != 304) {
            return true;
        }
        if (e.a(ac2) == -1L) {
            if ("chunked".equalsIgnoreCase(ac2.a("Transfer-Encoding"))) {
                return true;
            }
            return false;
        }
        return true;
    }

    private static Set<String> e(ac ac2) {
        return e.c(ac2.g());
    }
}

