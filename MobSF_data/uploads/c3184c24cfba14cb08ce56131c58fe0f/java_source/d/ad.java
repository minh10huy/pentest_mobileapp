/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  javax.annotation.Nullable
 */
package d;

import d.a.c;
import d.v;
import e.e;
import java.io.Closeable;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.Reader;
import java.nio.charset.Charset;
import javax.annotation.Nullable;

public abstract class ad
implements Closeable {
    private Reader a;

    public static ad a(@Nullable v v2, final long l2, final e e2) {
        if (e2 != null) {
            return new ad(){

                @Nullable
                @Override
                public v a() {
                    return v.this;
                }

                @Override
                public long b() {
                    return l2;
                }

                @Override
                public e c() {
                    return e2;
                }
            };
        }
        throw new NullPointerException("source == null");
    }

    public static ad a(@Nullable v v2, byte[] arrby) {
        e.c c2 = new e.c().b(arrby);
        return ad.a(v2, arrby.length, c2);
    }

    private Charset e() {
        v v2 = this.a();
        if (v2 != null) {
            return v2.a(c.e);
        }
        return c.e;
    }

    @Nullable
    public abstract v a();

    public abstract long b();

    public abstract e c();

    @Override
    public void close() {
        c.a(this.c());
    }

    public final Reader d() {
        Reader reader = this.a;
        if (reader != null) {
            return reader;
        }
        this.a = reader = new a(this.c(), this.e());
        return reader;
    }

    static final class a
    extends Reader {
        private final e a;
        private final Charset b;
        private boolean c;
        private Reader d;

        a(e e2, Charset charset) {
            this.a = e2;
            this.b = charset;
        }

        @Override
        public void close() {
            this.c = true;
            if (this.d != null) {
                this.d.close();
                return;
            }
            this.a.close();
        }

        @Override
        public int read(char[] arrc, int n2, int n3) {
            if (!this.c) {
                Reader reader = this.d;
                Object object = reader;
                if (reader == null) {
                    object = c.a(this.a, this.b);
                    this.d = object = new InputStreamReader(this.a.g(), (Charset)object);
                }
                return object.read(arrc, n2, n3);
            }
            throw new IOException("Stream closed");
        }
    }

}

