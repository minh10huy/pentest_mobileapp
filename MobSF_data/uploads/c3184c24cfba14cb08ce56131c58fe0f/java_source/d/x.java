/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  javax.annotation.Nullable
 */
package d;

import d.a.a.f;
import d.a.b.c;
import d.a.b.d;
import d.a.b.g;
import d.aa;
import d.ac;
import d.ae;
import d.b;
import d.e;
import d.j;
import d.k;
import d.m;
import d.n;
import d.o;
import d.p;
import d.s;
import d.u;
import d.y;
import d.z;
import java.net.Proxy;
import java.net.ProxySelector;
import java.net.Socket;
import java.security.GeneralSecurityException;
import java.security.KeyStore;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Iterator;
import java.util.List;
import java.util.concurrent.TimeUnit;
import javax.annotation.Nullable;
import javax.net.SocketFactory;
import javax.net.ssl.HostnameVerifier;
import javax.net.ssl.KeyManager;
import javax.net.ssl.SSLContext;
import javax.net.ssl.SSLSocket;
import javax.net.ssl.SSLSocketFactory;
import javax.net.ssl.TrustManager;
import javax.net.ssl.TrustManagerFactory;
import javax.net.ssl.X509TrustManager;

public class x
implements e.a,
Cloneable {
    static final List<y> a = d.a.c.a(new y[]{y.d, y.b});
    static final List<k> b = d.a.c.a(new k[]{k.a, k.c});
    final int A;
    final int B;
    final int C;
    final n c;
    @Nullable
    final Proxy d;
    final List<y> e;
    final List<k> f;
    final List<u> g;
    final List<u> h;
    final p.a i;
    final ProxySelector j;
    final m k;
    @Nullable
    final d.c l;
    @Nullable
    final f m;
    final SocketFactory n;
    @Nullable
    final SSLSocketFactory o;
    @Nullable
    final d.a.i.c p;
    final HostnameVerifier q;
    final d.g r;
    final b s;
    final b t;
    final j u;
    final o v;
    final boolean w;
    final boolean x;
    final boolean y;
    final int z;

    static {
        d.a.a.a = new d.a.a(){

            @Override
            public int a(ac.a a2) {
                return a2.c;
            }

            @Override
            public c a(j j2, d.a a2, g g2, ae ae2) {
                return j2.a(a2, g2, ae2);
            }

            @Override
            public d a(j j2) {
                return j2.a;
            }

            @Override
            public Socket a(j j2, d.a a2, g g2) {
                return j2.a(a2, g2);
            }

            @Override
            public void a(k k2, SSLSocket sSLSocket, boolean bl2) {
                k2.a(sSLSocket, bl2);
            }

            @Override
            public void a(s.a a2, String string2) {
                a2.a(string2);
            }

            @Override
            public void a(s.a a2, String string2, String string3) {
                a2.b(string2, string3);
            }

            @Override
            public boolean a(d.a a2, d.a a3) {
                return a2.a(a3);
            }

            @Override
            public boolean a(j j2, c c2) {
                return j2.b(c2);
            }

            @Override
            public void b(j j2, c c2) {
                j2.a(c2);
            }
        };
    }

    public x() {
        this(new a());
    }

    x(a object) {
        boolean bl2;
        this.c = object.a;
        this.d = object.b;
        this.e = object.c;
        this.f = object.d;
        this.g = d.a.c.a(object.e);
        this.h = d.a.c.a(object.f);
        this.i = object.g;
        this.j = object.h;
        this.k = object.i;
        this.l = object.j;
        this.m = object.k;
        this.n = object.l;
        Object object2 = this.f.iterator();
        block0 : do {
            bl2 = false;
            while (object2.hasNext()) {
                k k2 = object2.next();
                if (!bl2 && !k2.a()) continue block0;
                bl2 = true;
            }
            break;
        } while (true);
        if (object.m == null && bl2) {
            object2 = this.A();
            this.o = this.a((X509TrustManager)object2);
            object2 = d.a.i.c.a((X509TrustManager)object2);
        } else {
            this.o = object.m;
            object2 = object.n;
        }
        this.p = object2;
        this.q = object.o;
        this.r = object.p.a(this.p);
        this.s = object.q;
        this.t = object.r;
        this.u = object.s;
        this.v = object.t;
        this.w = object.u;
        this.x = object.v;
        this.y = object.w;
        this.z = object.x;
        this.A = object.y;
        this.B = object.z;
        this.C = object.A;
        if (!this.g.contains(null)) {
            if (!this.h.contains(null)) {
                return;
            }
            object = new StringBuilder();
            object.append("Null network interceptor: ");
            object.append(this.h);
            throw new IllegalStateException(object.toString());
        }
        object = new StringBuilder();
        object.append("Null interceptor: ");
        object.append(this.g);
        throw new IllegalStateException(object.toString());
    }

    private X509TrustManager A() {
        try {
            Object[] arrobject = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
            arrobject.init((KeyStore)null);
            arrobject = arrobject.getTrustManagers();
            if (arrobject.length == 1 && arrobject[0] instanceof X509TrustManager) {
                return (X509TrustManager)arrobject[0];
            }
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("Unexpected default trust managers:");
            stringBuilder.append(Arrays.toString(arrobject));
            throw new IllegalStateException(stringBuilder.toString());
        }
        catch (GeneralSecurityException generalSecurityException) {
            throw d.a.c.a("No System TLS", generalSecurityException);
        }
    }

    private SSLSocketFactory a(X509TrustManager object) {
        try {
            SSLContext sSLContext = d.a.g.f.c().z_();
            sSLContext.init(null, new TrustManager[]{object}, null);
            object = sSLContext.getSocketFactory();
            return object;
        }
        catch (GeneralSecurityException generalSecurityException) {
            throw d.a.c.a("No System TLS", generalSecurityException);
        }
    }

    public int a() {
        return this.z;
    }

    @Override
    public e a(aa aa2) {
        return z.a(this, aa2, false);
    }

    public int b() {
        return this.A;
    }

    public int c() {
        return this.B;
    }

    public int d() {
        return this.C;
    }

    public Proxy e() {
        return this.d;
    }

    public ProxySelector f() {
        return this.j;
    }

    public m g() {
        return this.k;
    }

    public d.c h() {
        return this.l;
    }

    f i() {
        if (this.l != null) {
            return this.l.a;
        }
        return this.m;
    }

    public o j() {
        return this.v;
    }

    public SocketFactory k() {
        return this.n;
    }

    public SSLSocketFactory l() {
        return this.o;
    }

    public HostnameVerifier m() {
        return this.q;
    }

    public d.g n() {
        return this.r;
    }

    public b o() {
        return this.t;
    }

    public b p() {
        return this.s;
    }

    public j q() {
        return this.u;
    }

    public boolean r() {
        return this.w;
    }

    public boolean s() {
        return this.x;
    }

    public boolean t() {
        return this.y;
    }

    public n u() {
        return this.c;
    }

    public List<y> v() {
        return this.e;
    }

    public List<k> w() {
        return this.f;
    }

    public List<u> x() {
        return this.g;
    }

    public List<u> y() {
        return this.h;
    }

    public p.a z() {
        return this.i;
    }

    public static final class a {
        int A = 0;
        n a = new n();
        @Nullable
        Proxy b;
        List<y> c = x.a;
        List<k> d = x.b;
        final List<u> e = new ArrayList<u>();
        final List<u> f = new ArrayList<u>();
        p.a g = p.a(p.a);
        ProxySelector h = ProxySelector.getDefault();
        m i = m.a;
        @Nullable
        d.c j;
        @Nullable
        f k;
        SocketFactory l = SocketFactory.getDefault();
        @Nullable
        SSLSocketFactory m;
        @Nullable
        d.a.i.c n;
        HostnameVerifier o = d.a.i.d.a;
        d.g p = d.g.a;
        b q = b.a;
        b r = b.a;
        j s = new j();
        o t = o.a;
        boolean u = true;
        boolean v = true;
        boolean w = true;
        int x = 10000;
        int y = 10000;
        int z = 10000;

        public a a(long l2, TimeUnit timeUnit) {
            this.x = d.a.c.a("timeout", l2, timeUnit);
            return this;
        }

        public a a(@Nullable d.c c2) {
            this.j = c2;
            this.k = null;
            return this;
        }

        public x a() {
            return new x(this);
        }

        public a b(long l2, TimeUnit timeUnit) {
            this.y = d.a.c.a("timeout", l2, timeUnit);
            return this;
        }

        public a c(long l2, TimeUnit timeUnit) {
            this.z = d.a.c.a("timeout", l2, timeUnit);
            return this;
        }
    }

}

