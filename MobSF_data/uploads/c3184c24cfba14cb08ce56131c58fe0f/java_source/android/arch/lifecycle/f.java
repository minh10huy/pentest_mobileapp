/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.util.Log
 */
package android.arch.lifecycle;

import android.arch.a.b.b;
import android.arch.lifecycle.GenericLifecycleObserver;
import android.arch.lifecycle.c;
import android.arch.lifecycle.d;
import android.arch.lifecycle.e;
import android.arch.lifecycle.h;
import android.util.Log;
import java.lang.ref.WeakReference;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.Map;

public class f
extends c {
    private android.arch.a.b.a<d, a> a = new android.arch.a.b.a();
    private c.b b;
    private final WeakReference<e> c;
    private int d = 0;
    private boolean e = false;
    private boolean f = false;
    private ArrayList<c.b> g = new ArrayList();

    public f(e e2) {
        this.c = new WeakReference<e>(e2);
        this.b = c.b.b;
    }

    static c.b a(c.b b2, c.b b3) {
        c.b b4 = b2;
        if (b3 != null) {
            b4 = b2;
            if (b3.compareTo(b2) < 0) {
                b4 = b3;
            }
        }
        return b4;
    }

    private void a(e e2) {
        b.d d2 = this.a.c();
        while (d2.hasNext() && !this.f) {
            Map.Entry entry = (Map.Entry)d2.next();
            a a2 = (a)entry.getValue();
            while (a2.a.compareTo(this.b) < 0 && !this.f && this.a.c((d)entry.getKey())) {
                this.c(a2.a);
                a2.a(e2, f.e(a2.a));
                this.c();
            }
        }
    }

    static c.b b(c.a a2) {
        switch (.a[a2.ordinal()]) {
            default: {
                StringBuilder stringBuilder = new StringBuilder();
                stringBuilder.append("Unexpected event value ");
                stringBuilder.append((Object)a2);
                throw new IllegalArgumentException(stringBuilder.toString());
            }
            case 6: {
                return c.b.a;
            }
            case 5: {
                return c.b.e;
            }
            case 3: 
            case 4: {
                return c.b.d;
            }
            case 1: 
            case 2: 
        }
        return c.b.c;
    }

    private void b(c.b b2) {
        if (this.b == b2) {
            return;
        }
        this.b = b2;
        if (!this.e && this.d == 0) {
            this.e = true;
            this.d();
            this.e = false;
            return;
        }
        this.f = true;
    }

    private void b(e e2) {
        Iterator<Map.Entry<d, a>> iterator = this.a.b();
        while (iterator.hasNext() && !this.f) {
            Map.Entry<d, a> entry = iterator.next();
            a a2 = entry.getValue();
            while (a2.a.compareTo(this.b) > 0 && !this.f && this.a.c(entry.getKey())) {
                c.a a3 = f.d(a2.a);
                this.c(f.b(a3));
                a2.a(e2, a3);
                this.c();
            }
        }
    }

    private boolean b() {
        if (this.a.a() == 0) {
            return true;
        }
        c.b b2 = this.a.d().getValue().a;
        c.b b3 = this.a.e().getValue().a;
        if (b2 == b3 && this.b == b3) {
            return true;
        }
        return false;
    }

    private c.b c(d object) {
        object = this.a.d((d)object);
        c.b b2 = null;
        object = object != null ? ((a)object.getValue()).a : null;
        if (!this.g.isEmpty()) {
            b2 = this.g.get(this.g.size() - 1);
        }
        return f.a(f.a(this.b, (c.b)((Object)object)), b2);
    }

    private void c() {
        this.g.remove(this.g.size() - 1);
    }

    private void c(c.b b2) {
        this.g.add(b2);
    }

    private static c.a d(c.b b2) {
        switch (.b[b2.ordinal()]) {
            default: {
                StringBuilder stringBuilder = new StringBuilder();
                stringBuilder.append("Unexpected state value ");
                stringBuilder.append((Object)b2);
                throw new IllegalArgumentException(stringBuilder.toString());
            }
            case 5: {
                throw new IllegalArgumentException();
            }
            case 4: {
                return c.a.ON_PAUSE;
            }
            case 3: {
                return c.a.ON_STOP;
            }
            case 2: {
                return c.a.ON_DESTROY;
            }
            case 1: 
        }
        throw new IllegalArgumentException();
    }

    private void d() {
        e e2 = this.c.get();
        if (e2 == null) {
            Log.w((String)"LifecycleRegistry", (String)"LifecycleOwner is garbage collected, you shouldn't try dispatch new events from it.");
            return;
        }
        while (!this.b()) {
            this.f = false;
            if (this.b.compareTo(this.a.d().getValue().a) < 0) {
                this.b(e2);
            }
            Map.Entry<d, a> entry = this.a.e();
            if (this.f || entry == null || this.b.compareTo(entry.getValue().a) <= 0) continue;
            this.a(e2);
        }
        this.f = false;
    }

    private static c.a e(c.b b2) {
        switch (.b[b2.ordinal()]) {
            default: {
                StringBuilder stringBuilder = new StringBuilder();
                stringBuilder.append("Unexpected state value ");
                stringBuilder.append((Object)b2);
                throw new IllegalArgumentException(stringBuilder.toString());
            }
            case 4: {
                throw new IllegalArgumentException();
            }
            case 3: {
                return c.a.ON_RESUME;
            }
            case 2: {
                return c.a.ON_START;
            }
            case 1: 
            case 5: 
        }
        return c.a.ON_CREATE;
    }

    @Override
    public c.b a() {
        return this.b;
    }

    public void a(c.a a2) {
        this.b(f.b(a2));
    }

    public void a(c.b b2) {
        this.b(b2);
    }

    @Override
    public void a(d d2) {
        c.b b2 = this.b == c.b.a ? c.b.a : c.b.b;
        a a2 = new a(d2, b2);
        if (this.a.a(d2, a2) != null) {
            return;
        }
        e e2 = this.c.get();
        if (e2 == null) {
            return;
        }
        boolean bl2 = this.d != 0 || this.e;
        b2 = this.c(d2);
        ++this.d;
        while (a2.a.compareTo(b2) < 0 && this.a.c(d2)) {
            this.c(a2.a);
            a2.a(e2, f.e(a2.a));
            this.c();
            b2 = this.c(d2);
        }
        if (!bl2) {
            this.d();
        }
        --this.d;
    }

    @Override
    public void b(d d2) {
        this.a.b(d2);
    }

    static class a {
        c.b a;
        GenericLifecycleObserver b;

        a(d d2, c.b b2) {
            this.b = h.a(d2);
            this.a = b2;
        }

        void a(e e2, c.a a2) {
            c.b b2 = f.b(a2);
            this.a = f.a(this.a, b2);
            this.b.a(e2, a2);
            this.a = b2;
        }
    }

}

