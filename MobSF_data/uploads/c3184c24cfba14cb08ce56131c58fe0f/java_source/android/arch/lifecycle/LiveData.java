/*
 * Decompiled with CFR 0_132.
 */
package android.arch.lifecycle;

import android.arch.a.b.b;
import android.arch.lifecycle.GenericLifecycleObserver;
import android.arch.lifecycle.c;
import android.arch.lifecycle.d;
import android.arch.lifecycle.e;
import android.arch.lifecycle.k;
import java.util.Map;

public abstract class LiveData<T> {
    private static final Object b = new Object();
    private final Object a = new Object();
    private b<k<T>, LiveData<T>> c = new b();
    private int d = 0;
    private volatile Object e = b;
    private volatile Object f = b;
    private int g = -1;
    private boolean h;
    private boolean i;
    private final Runnable j = new Runnable(){

        /*
         * Enabled aggressive block sorting
         * Enabled unnecessary exception pruning
         * Enabled aggressive exception aggregation
         */
        @Override
        public void run() {
            Object object;
            Object object2 = LiveData.this.a;
            synchronized (object2) {
                object = LiveData.this.f;
                LiveData.this.f = b;
            }
            LiveData.this.b(object);
        }
    };

    private void a(LiveData<T> liveData) {
        if (!liveData.d) {
            return;
        }
        if (!liveData.a()) {
            liveData.a(false);
            return;
        }
        if (liveData.e >= this.g) {
            return;
        }
        liveData.e = this.g;
        liveData.c.a(this.e);
    }

    private static void a(String string2) {
        if (android.arch.a.a.a.a().b()) {
            return;
        }
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("Cannot invoke ");
        stringBuilder.append(string2);
        stringBuilder.append(" on a background");
        stringBuilder.append(" thread");
        throw new IllegalStateException(stringBuilder.toString());
    }

    private void b(LiveData<T> liveData) {
        if (this.h) {
            this.i = true;
            return;
        }
        this.h = true;
        do {
            LiveData<T> liveData2;
            block5 : {
                this.i = false;
                if (liveData != null) {
                    this.a((T)liveData);
                    liveData2 = null;
                } else {
                    b.d d2 = this.c.c();
                    do {
                        liveData2 = liveData;
                        if (!d2.hasNext()) break block5;
                        this.a((a)((Map.Entry)d2.next()).getValue());
                    } while (!this.i);
                    liveData2 = liveData;
                }
            }
            liveData = liveData2;
        } while (this.i);
        this.h = false;
    }

    public T a() {
        Object object = this.e;
        if (object != b) {
            return (T)object;
        }
        return null;
    }

    public void a(e e2, k<T> object) {
        if (e2.a().a() == c.b.a) {
            return;
        }
        LifecycleBoundObserver lifecycleBoundObserver = new LifecycleBoundObserver(e2, object);
        if ((object = (a)((Object)this.c.a((k<T>)object, lifecycleBoundObserver))) != null && !object.a(e2)) {
            throw new IllegalArgumentException("Cannot add the same observer with different lifecycles");
        }
        if (object != null) {
            return;
        }
        e2.a().a(lifecycleBoundObserver);
    }

    public void a(k<T> object) {
        LiveData.a("removeObserver");
        object = (a)((Object)this.c.b((k<T>)object));
        if (object == null) {
            return;
        }
        object.b();
        object.a(false);
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Converted monitor instructions to comments
     * Lifted jumps to return sites
     */
    protected void a(T t2) {
        Object object = this.a;
        // MONITORENTER : object
        boolean bl2 = this.f == b;
        this.f = t2;
        // MONITOREXIT : object
        if (!bl2) {
            return;
        }
        android.arch.a.a.a.a().b(this.j);
    }

    protected void b() {
    }

    protected void b(T t2) {
        LiveData.a("setValue");
        ++this.g;
        this.e = t2;
        this.b((T)null);
    }

    protected void c() {
    }

    public boolean d() {
        if (this.d > 0) {
            return true;
        }
        return false;
    }

    class LifecycleBoundObserver
    extends LiveData<T>
    implements GenericLifecycleObserver {
        final e a;

        LifecycleBoundObserver(e e2, k<T> k2) {
            super(k2);
            this.a = e2;
        }

        @Override
        public void a(e e2, c.a a2) {
            if (this.a.a().a() == c.b.a) {
                LiveData.this.a(this.c);
                return;
            }
            this.a(this.a());
        }

        @Override
        boolean a() {
            return this.a.a().a().a(c.b.d);
        }

        boolean a(e e2) {
            if (this.a == e2) {
                return true;
            }
            return false;
        }

        @Override
        void b() {
            this.a.a().b(this);
        }
    }

    private abstract class a {
        final k<T> c;
        boolean d;
        int e = -1;

        a(k<T> k2) {
            this.c = k2;
        }

        void a(boolean bl2) {
            if (bl2 == this.d) {
                return;
            }
            this.d = bl2;
            int n2 = LiveData.this.d;
            int n3 = 1;
            n2 = n2 == 0 ? 1 : 0;
            LiveData liveData = LiveData.this;
            int n4 = liveData.d;
            if (!this.d) {
                n3 = -1;
            }
            liveData.d = n4 + n3;
            if (n2 != 0 && this.d) {
                LiveData.this.b();
            }
            if (LiveData.this.d == 0 && !this.d) {
                LiveData.this.c();
            }
            if (this.d) {
                LiveData.this.b(this);
            }
        }

        abstract boolean a();

        boolean a(e e2) {
            return false;
        }

        void b() {
        }
    }

}

