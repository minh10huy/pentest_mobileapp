/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.content.res.AssetManager
 *  android.content.res.AssetManager$AssetInputStream
 *  android.util.Log
 */
package android.support.d;

import android.content.res.AssetManager;
import android.util.Log;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.Closeable;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.charset.Charset;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.TimeZone;
import java.util.regex.Pattern;

public class a {
    private static final c A;
    private static final HashMap<Integer, c>[] B;
    private static final HashMap<String, c>[] C;
    private static final HashSet<String> D;
    private static final HashMap<Integer, Integer> E;
    private static final Charset F;
    private static final Pattern W;
    private static final Pattern X;
    public static final int[] a;
    public static final int[] b;
    public static final int[] c;
    static final byte[] d;
    static final String[] e;
    static final int[] f;
    static final c[][] g;
    static final byte[] h;
    private static final List<Integer> i;
    private static final List<Integer> j;
    private static final byte[] k;
    private static final byte[] l;
    private static SimpleDateFormat m;
    private static final byte[] n;
    private static final c[] o;
    private static final c[] p;
    private static final c[] q;
    private static final c[] r;
    private static final c[] s;
    private static final c t;
    private static final c[] u;
    private static final c[] v;
    private static final c[] w;
    private static final c[] x;
    private static final c[] y;
    private static final c z;
    private final String G;
    private final AssetManager.AssetInputStream H;
    private int I;
    private final HashMap<String, b>[] J;
    private ByteOrder K;
    private boolean L;
    private int M;
    private int N;
    private byte[] O;
    private int P;
    private int Q;
    private int R;
    private int S;
    private int T;
    private int U;
    private boolean V;

    static {
        i = Arrays.asList(1, 6, 3, 8);
        j = Arrays.asList(2, 7, 4, 5);
        a = new int[]{8, 8, 8};
        b = new int[]{4};
        c = new int[]{8};
        d = new byte[]{-1, -40, -1};
        k = new byte[]{79, 76, 89, 77, 80, 0};
        l = new byte[]{79, 76, 89, 77, 80, 85, 83, 0, 73, 73};
        e = new String[]{"", "BYTE", "STRING", "USHORT", "ULONG", "URATIONAL", "SBYTE", "UNDEFINED", "SSHORT", "SLONG", "SRATIONAL", "SINGLE", "DOUBLE"};
        f = new int[]{0, 1, 1, 2, 4, 8, 1, 1, 2, 4, 8, 4, 8, 1};
        n = new byte[]{65, 83, 67, 73, 73, 0, 0, 0};
        o = new c[]{new c("NewSubfileType", 254, 4), new c("SubfileType", 255, 4), new c("ImageWidth", 256, 3, 4), new c("ImageLength", 257, 3, 4), new c("BitsPerSample", 258, 3), new c("Compression", 259, 3), new c("PhotometricInterpretation", 262, 3), new c("ImageDescription", 270, 2), new c("Make", 271, 2), new c("Model", 272, 2), new c("StripOffsets", 273, 3, 4), new c("Orientation", 274, 3), new c("SamplesPerPixel", 277, 3), new c("RowsPerStrip", 278, 3, 4), new c("StripByteCounts", 279, 3, 4), new c("XResolution", 282, 5), new c("YResolution", 283, 5), new c("PlanarConfiguration", 284, 3), new c("ResolutionUnit", 296, 3), new c("TransferFunction", 301, 3), new c("Software", 305, 2), new c("DateTime", 306, 2), new c("Artist", 315, 2), new c("WhitePoint", 318, 5), new c("PrimaryChromaticities", 319, 5), new c("SubIFDPointer", 330, 4), new c("JPEGInterchangeFormat", 513, 4), new c("JPEGInterchangeFormatLength", 514, 4), new c("YCbCrCoefficients", 529, 5), new c("YCbCrSubSampling", 530, 3), new c("YCbCrPositioning", 531, 3), new c("ReferenceBlackWhite", 532, 5), new c("Copyright", 33432, 2), new c("ExifIFDPointer", 34665, 4), new c("GPSInfoIFDPointer", 34853, 4), new c("SensorTopBorder", 4, 4), new c("SensorLeftBorder", 5, 4), new c("SensorBottomBorder", 6, 4), new c("SensorRightBorder", 7, 4), new c("ISO", 23, 3), new c("JpgFromRaw", 46, 7)};
        p = new c[]{new c("ExposureTime", 33434, 5), new c("FNumber", 33437, 5), new c("ExposureProgram", 34850, 3), new c("SpectralSensitivity", 34852, 2), new c("PhotographicSensitivity", 34855, 3), new c("OECF", 34856, 7), new c("ExifVersion", 36864, 2), new c("DateTimeOriginal", 36867, 2), new c("DateTimeDigitized", 36868, 2), new c("ComponentsConfiguration", 37121, 7), new c("CompressedBitsPerPixel", 37122, 5), new c("ShutterSpeedValue", 37377, 10), new c("ApertureValue", 37378, 5), new c("BrightnessValue", 37379, 10), new c("ExposureBiasValue", 37380, 10), new c("MaxApertureValue", 37381, 5), new c("SubjectDistance", 37382, 5), new c("MeteringMode", 37383, 3), new c("LightSource", 37384, 3), new c("Flash", 37385, 3), new c("FocalLength", 37386, 5), new c("SubjectArea", 37396, 3), new c("MakerNote", 37500, 7), new c("UserComment", 37510, 7), new c("SubSecTime", 37520, 2), new c("SubSecTimeOriginal", 37521, 2), new c("SubSecTimeDigitized", 37522, 2), new c("FlashpixVersion", 40960, 7), new c("ColorSpace", 40961, 3), new c("PixelXDimension", 40962, 3, 4), new c("PixelYDimension", 40963, 3, 4), new c("RelatedSoundFile", 40964, 2), new c("InteroperabilityIFDPointer", 40965, 4), new c("FlashEnergy", 41483, 5), new c("SpatialFrequencyResponse", 41484, 7), new c("FocalPlaneXResolution", 41486, 5), new c("FocalPlaneYResolution", 41487, 5), new c("FocalPlaneResolutionUnit", 41488, 3), new c("SubjectLocation", 41492, 3), new c("ExposureIndex", 41493, 5), new c("SensingMethod", 41495, 3), new c("FileSource", 41728, 7), new c("SceneType", 41729, 7), new c("CFAPattern", 41730, 7), new c("CustomRendered", 41985, 3), new c("ExposureMode", 41986, 3), new c("WhiteBalance", 41987, 3), new c("DigitalZoomRatio", 41988, 5), new c("FocalLengthIn35mmFilm", 41989, 3), new c("SceneCaptureType", 41990, 3), new c("GainControl", 41991, 3), new c("Contrast", 41992, 3), new c("Saturation", 41993, 3), new c("Sharpness", 41994, 3), new c("DeviceSettingDescription", 41995, 7), new c("SubjectDistanceRange", 41996, 3), new c("ImageUniqueID", 42016, 2), new c("DNGVersion", 50706, 1), new c("DefaultCropSize", 50720, 3, 4)};
        q = new c[]{new c("GPSVersionID", 0, 1), new c("GPSLatitudeRef", 1, 2), new c("GPSLatitude", 2, 5), new c("GPSLongitudeRef", 3, 2), new c("GPSLongitude", 4, 5), new c("GPSAltitudeRef", 5, 1), new c("GPSAltitude", 6, 5), new c("GPSTimeStamp", 7, 5), new c("GPSSatellites", 8, 2), new c("GPSStatus", 9, 2), new c("GPSMeasureMode", 10, 2), new c("GPSDOP", 11, 5), new c("GPSSpeedRef", 12, 2), new c("GPSSpeed", 13, 5), new c("GPSTrackRef", 14, 2), new c("GPSTrack", 15, 5), new c("GPSImgDirectionRef", 16, 2), new c("GPSImgDirection", 17, 5), new c("GPSMapDatum", 18, 2), new c("GPSDestLatitudeRef", 19, 2), new c("GPSDestLatitude", 20, 5), new c("GPSDestLongitudeRef", 21, 2), new c("GPSDestLongitude", 22, 5), new c("GPSDestBearingRef", 23, 2), new c("GPSDestBearing", 24, 5), new c("GPSDestDistanceRef", 25, 2), new c("GPSDestDistance", 26, 5), new c("GPSProcessingMethod", 27, 7), new c("GPSAreaInformation", 28, 7), new c("GPSDateStamp", 29, 2), new c("GPSDifferential", 30, 3)};
        r = new c[]{new c("InteroperabilityIndex", 1, 2)};
        s = new c[]{new c("NewSubfileType", 254, 4), new c("SubfileType", 255, 4), new c("ThumbnailImageWidth", 256, 3, 4), new c("ThumbnailImageLength", 257, 3, 4), new c("BitsPerSample", 258, 3), new c("Compression", 259, 3), new c("PhotometricInterpretation", 262, 3), new c("ImageDescription", 270, 2), new c("Make", 271, 2), new c("Model", 272, 2), new c("StripOffsets", 273, 3, 4), new c("Orientation", 274, 3), new c("SamplesPerPixel", 277, 3), new c("RowsPerStrip", 278, 3, 4), new c("StripByteCounts", 279, 3, 4), new c("XResolution", 282, 5), new c("YResolution", 283, 5), new c("PlanarConfiguration", 284, 3), new c("ResolutionUnit", 296, 3), new c("TransferFunction", 301, 3), new c("Software", 305, 2), new c("DateTime", 306, 2), new c("Artist", 315, 2), new c("WhitePoint", 318, 5), new c("PrimaryChromaticities", 319, 5), new c("SubIFDPointer", 330, 4), new c("JPEGInterchangeFormat", 513, 4), new c("JPEGInterchangeFormatLength", 514, 4), new c("YCbCrCoefficients", 529, 5), new c("YCbCrSubSampling", 530, 3), new c("YCbCrPositioning", 531, 3), new c("ReferenceBlackWhite", 532, 5), new c("Copyright", 33432, 2), new c("ExifIFDPointer", 34665, 4), new c("GPSInfoIFDPointer", 34853, 4), new c("DNGVersion", 50706, 1), new c("DefaultCropSize", 50720, 3, 4)};
        t = new c("StripOffsets", 273, 3);
        u = new c[]{new c("ThumbnailImage", 256, 7), new c("CameraSettingsIFDPointer", 8224, 4), new c("ImageProcessingIFDPointer", 8256, 4)};
        v = new c[]{new c("PreviewImageStart", 257, 4), new c("PreviewImageLength", 258, 4)};
        w = new c[]{new c("AspectFrame", 4371, 3)};
        x = new c[]{new c("ColorSpace", 55, 3)};
        g = new c[][]{o, p, q, r, s, o, u, v, w, x};
        y = new c[]{new c("SubIFDPointer", 330, 4), new c("ExifIFDPointer", 34665, 4), new c("GPSInfoIFDPointer", 34853, 4), new c("InteroperabilityIFDPointer", 40965, 4), new c("CameraSettingsIFDPointer", 8224, 1), new c("ImageProcessingIFDPointer", 8256, 1)};
        z = new c("JPEGInterchangeFormat", 513, 4);
        A = new c("JPEGInterchangeFormatLength", 514, 4);
        B = new HashMap[g.length];
        C = new HashMap[g.length];
        D = new HashSet<String>(Arrays.asList("FNumber", "DigitalZoomRatio", "ExposureTime", "SubjectDistance", "GPSTimeStamp"));
        E = new HashMap();
        F = Charset.forName("US-ASCII");
        h = "Exif\u0000\u0000".getBytes(F);
        m = new SimpleDateFormat("yyyy:MM:dd HH:mm:ss");
        m.setTimeZone(TimeZone.getTimeZone("UTC"));
        for (int i2 = 0; i2 < g.length; ++i2) {
            a.B[i2] = new HashMap();
            a.C[i2] = new HashMap();
            for (c c2 : g[i2]) {
                B[i2].put(c2.a, c2);
                C[i2].put(c2.b, c2);
            }
        }
        E.put(a.y[0].a, 5);
        E.put(a.y[1].a, 1);
        E.put(a.y[2].a, 2);
        E.put(a.y[3].a, 3);
        E.put(a.y[4].a, 7);
        E.put(a.y[5].a, 8);
        W = Pattern.compile(".*[1-9].*");
        X = Pattern.compile("^([0-9][0-9]):([0-9][0-9]):([0-9][0-9])$");
    }

    /*
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    public a(String object) {
        void var2_5;
        block4 : {
            this.J = new HashMap[g.length];
            this.K = ByteOrder.BIG_ENDIAN;
            if (object == null) throw new IllegalArgumentException("filename cannot be null");
            Object var3_2 = null;
            this.H = null;
            this.G = object;
            object = new FileInputStream((String)object);
            try {
                this.a((InputStream)object);
            }
            catch (Throwable throwable) {
                break block4;
            }
            a.a((Closeable)object);
            return;
            catch (Throwable throwable) {
                object = var3_2;
            }
        }
        a.a((Closeable)object);
        throw var2_5;
    }

    private int a(BufferedInputStream bufferedInputStream) {
        bufferedInputStream.mark(5000);
        byte[] arrby = new byte[5000];
        bufferedInputStream.read(arrby);
        bufferedInputStream.reset();
        if (a.a(arrby)) {
            return 4;
        }
        if (this.b(arrby)) {
            return 9;
        }
        if (this.c(arrby)) {
            return 7;
        }
        if (this.d(arrby)) {
            return 10;
        }
        return 0;
    }

    private void a(int n2, int n3) {
        if (!this.J[n2].isEmpty()) {
            if (this.J[n3].isEmpty()) {
                return;
            }
            Object object = this.J[n2].get("ImageLength");
            b b2 = this.J[n2].get("ImageWidth");
            b b3 = this.J[n3].get("ImageLength");
            b b4 = this.J[n3].get("ImageWidth");
            if (object != null) {
                if (b2 == null) {
                    return;
                }
                if (b3 != null) {
                    if (b4 == null) {
                        return;
                    }
                    int n4 = object.b(this.K);
                    int n5 = b2.b(this.K);
                    int n6 = b3.b(this.K);
                    int n7 = b4.b(this.K);
                    if (n4 < n6 && n5 < n7) {
                        object = this.J[n2];
                        this.J[n2] = this.J[n3];
                        this.J[n3] = object;
                    }
                }
            }
        }
    }

    private void a(a object) {
        this.a((a)object, object.available());
        this.b((a)object, 0);
        this.d((a)object, 0);
        this.d((a)object, 5);
        this.d((a)object, 4);
        this.b((InputStream)object);
        if (this.I == 8 && (object = this.J[1].get("MakerNote")) != null) {
            object = new a(object.c);
            object.a(this.K);
            object.a(6L);
            this.b((a)object, 9);
            object = this.J[9].get("ColorSpace");
            if (object != null) {
                this.J[1].put("ColorSpace", (b)object);
            }
        }
    }

    private void a(a object, int n2) {
        this.K = this.e((a)object);
        object.a(this.K);
        int n3 = object.readUnsignedShort();
        if (this.I != 7 && this.I != 10 && n3 != 42) {
            object = new StringBuilder();
            object.append("Invalid start code: ");
            object.append(Integer.toHexString(n3));
            throw new IOException(object.toString());
        }
        n3 = object.readInt();
        if (n3 >= 8 && n3 < n2) {
            n2 = n3 - 8;
            if (n2 > 0) {
                if (object.skipBytes(n2) == n2) {
                    return;
                }
                object = new StringBuilder();
                object.append("Couldn't jump to first Ifd: ");
                object.append(n2);
                throw new IOException(object.toString());
            }
            return;
        }
        object = new StringBuilder();
        object.append("Invalid first Ifd offset: ");
        object.append(n3);
        throw new IOException(object.toString());
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Lifted jumps to return sites
     */
    private void a(a var1_1, int var2_2, int var3_3) {
        var1_1.a(ByteOrder.BIG_ENDIAN);
        var1_1.a(var2_2);
        var4_4 = var1_1.readByte();
        if (var4_4 != -1) {
            var1_1 = new StringBuilder();
            var1_1.append("Invalid marker: ");
            var1_1.append(Integer.toHexString(var4_4 & 255));
            throw new IOException(var1_1.toString());
        }
        if (var1_1.readByte() != -40) {
            var1_1 = new StringBuilder();
            var1_1.append("Invalid marker: ");
            var1_1.append(Integer.toHexString(var4_4 & 255));
            throw new IOException(var1_1.toString());
        }
        var2_2 = var2_2 + 1 + 1;
        do {
            block23 : {
                block21 : {
                    block22 : {
                        if ((var4_4 = var1_1.readByte()) != -1) {
                            var1_1 = new StringBuilder();
                            var1_1.append("Invalid marker:");
                            var1_1.append(Integer.toHexString(var4_4 & 255));
                            throw new IOException(var1_1.toString());
                        }
                        var6_6 = var1_1.readByte();
                        if (var6_6 == -39 || var6_6 == -38) break;
                        var4_4 = var1_1.readUnsignedShort() - 2;
                        var5_5 = var2_2 + 1 + 1 + 2;
                        if (var4_4 < 0) throw new IOException("Invalid length");
                        if (var6_6 == -31) break block21;
                        if (var6_6 == -2) break block22;
                        switch (var6_6) {
                            default: {
                                switch (var6_6) {
                                    default: {
                                        switch (var6_6) {
                                            default: {
                                                switch (var6_6) {
                                                    default: {
                                                        var2_2 = var4_4;
                                                        var4_4 = var5_5;
                                                        break block23;
                                                    }
                                                    case -51: 
                                                    case -50: 
                                                    case -49: 
                                                }
                                            }
                                            case -55: 
                                            case -54: 
                                            case -53: 
                                        }
                                    }
                                    case -59: 
                                    case -58: 
                                    case -57: 
                                }
                            }
                            case -64: 
                            case -63: 
                            case -62: 
                            case -61: 
                        }
                        if (var1_1.skipBytes(1) != 1) throw new IOException("Invalid SOFx");
                        this.J[var3_3].put("ImageLength", b.a((long)var1_1.readUnsignedShort(), this.K));
                        this.J[var3_3].put("ImageWidth", b.a((long)var1_1.readUnsignedShort(), this.K));
                        var2_2 = var4_4 - 5;
                        var4_4 = var5_5;
                        break block23;
                    }
                    var7_7 = new byte[var4_4];
                    if (var1_1.read(var7_7) != var4_4) throw new IOException("Invalid exif");
                    var4_4 = var5_5;
                    if (this.a("UserComment") == null) {
                        this.J[1].put("UserComment", b.a(new String(var7_7, a.F)));
                        var4_4 = var5_5;
                    }
                    ** GOTO lbl75
                }
                if (var4_4 < 6) {
                    var2_2 = var4_4;
                    var4_4 = var5_5;
                } else {
                    var7_7 = new byte[6];
                    if (var1_1.read(var7_7) != 6) throw new IOException("Invalid exif");
                    var5_5 += 6;
                    var2_2 = var4_4 - 6;
                    if (!Arrays.equals(var7_7, a.h)) {
                        var4_4 = var5_5;
                    } else {
                        if (var2_2 <= 0) throw new IOException("Invalid exif");
                        this.Q = var5_5;
                        var7_7 = new byte[var2_2];
                        if (var1_1.read(var7_7) != var2_2) throw new IOException("Invalid exif");
                        var4_4 = var5_5 + var2_2;
                        this.a(var7_7, var3_3);
lbl75: // 2 sources:
                        var2_2 = 0;
                    }
                }
            }
            if (var2_2 < 0) throw new IOException("Invalid length");
            if (var1_1.skipBytes(var2_2) != var2_2) throw new IOException("Invalid JPEG segment");
            var2_2 = var4_4 + var2_2;
        } while (true);
        var1_1.a(this.K);
    }

    private void a(a a2, HashMap arrby) {
        block2 : {
            int n2;
            int n3;
            block4 : {
                int n4;
                block5 : {
                    block3 : {
                        b b2 = (b)arrby.get("JPEGInterchangeFormat");
                        arrby = (b)arrby.get("JPEGInterchangeFormatLength");
                        if (b2 == null || arrby == null) break block2;
                        n4 = b2.b(this.K);
                        n2 = Math.min(arrby.b(this.K), a2.available() - n4);
                        if (this.I == 4 || this.I == 9 || this.I == 10) break block3;
                        n3 = n4;
                        if (this.I != 7) break block4;
                        n3 = this.R;
                        break block5;
                    }
                    n3 = this.Q;
                }
                n3 = n4 + n3;
            }
            if (n3 > 0 && n2 > 0) {
                this.L = true;
                this.M = n3;
                this.N = n2;
                if (this.G == null && this.H == null) {
                    arrby = new byte[n2];
                    a2.a(n3);
                    a2.readFully(arrby);
                    this.O = arrby;
                }
            }
        }
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    private static void a(Closeable closeable) {
        if (closeable == null) return;
        try {
            closeable.close();
            return;
        }
        catch (RuntimeException runtimeException) {
            throw runtimeException;
        }
        catch (Exception exception) {
            return;
        }
    }

    /*
     * Exception decompiling
     */
    private void a(InputStream var1_1) {
        // This method has failed to decompile.  When submitting a bug report, please provide this stack trace, and (if you hold appropriate legal rights) the relevant class file.
        // org.benf.cfr.reader.util.CannotPerformDecode: reachable test BLOCK was exited and re-entered.
        // org.benf.cfr.reader.bytecode.analysis.opgraph.op3rewriters.Misc.getFarthestReachableInRange(Misc.java:143)
        // org.benf.cfr.reader.bytecode.analysis.opgraph.op3rewriters.SwitchReplacer.examineSwitchContiguity(SwitchReplacer.java:385)
        // org.benf.cfr.reader.bytecode.analysis.opgraph.op3rewriters.SwitchReplacer.replaceRawSwitches(SwitchReplacer.java:65)
        // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisInner(CodeAnalyser.java:416)
        // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisOrWrapFail(CodeAnalyser.java:196)
        // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysis(CodeAnalyser.java:141)
        // org.benf.cfr.reader.entities.attributes.AttributeCode.analyse(AttributeCode.java:95)
        // org.benf.cfr.reader.entities.Method.analyse(Method.java:372)
        // org.benf.cfr.reader.entities.ClassFile.analyseMid(ClassFile.java:867)
        // org.benf.cfr.reader.entities.ClassFile.analyseTop(ClassFile.java:768)
        // org.benf.cfr.reader.Main.doJar(Main.java:141)
        // org.benf.cfr.reader.Main.main(Main.java:242)
        throw new IllegalStateException("Decompilation failed");
    }

    private void a(byte[] arrby, int n2) {
        a a2 = new a(arrby);
        this.a(a2, arrby.length);
        this.b(a2, n2);
    }

    private boolean a(HashMap object) {
        int[] arrn = (int[])object.get("BitsPerSample");
        if (arrn != null) {
            int n2;
            if (Arrays.equals(a, arrn = (int[])((b)arrn).d(this.K))) {
                return true;
            }
            if (this.I == 3 && (object = (b)object.get("PhotometricInterpretation")) != null && ((n2 = object.b(this.K)) == 1 && Arrays.equals(arrn, c) || n2 == 6 && Arrays.equals(arrn, a))) {
                return true;
            }
        }
        return false;
    }

    private static boolean a(byte[] arrby) {
        for (int i2 = 0; i2 < d.length; ++i2) {
            if (arrby[i2] == d[i2]) continue;
            return false;
        }
        return true;
    }

    private static long[] a(Object arrn) {
        if (arrn instanceof int[]) {
            arrn = arrn;
            long[] arrl = new long[arrn.length];
            for (int i2 = 0; i2 < arrn.length; ++i2) {
                arrl[i2] = arrn[i2];
            }
            return arrl;
        }
        if (arrn instanceof long[]) {
            return arrn;
        }
        return null;
    }

    private b b(String object) {
        String string2 = object;
        if ("ISOSpeedRatings".equals(object)) {
            string2 = "PhotographicSensitivity";
        }
        for (int i2 = 0; i2 < g.length; ++i2) {
            object = this.J[i2].get(string2);
            if (object == null) continue;
            return object;
        }
        return null;
    }

    private void b(a object) {
        object.skipBytes(84);
        Object object2 = new byte[4];
        byte[] arrby = new byte[4];
        object.read((byte[])object2);
        object.skipBytes(4);
        object.read(arrby);
        int n2 = ByteBuffer.wrap(object2).getInt();
        int n3 = ByteBuffer.wrap(arrby).getInt();
        this.a((a)object, n2, 5);
        object.a(n3);
        object.a(ByteOrder.BIG_ENDIAN);
        n3 = object.readInt();
        for (n2 = 0; n2 < n3; ++n2) {
            int n4 = object.readUnsignedShort();
            int n5 = object.readUnsignedShort();
            if (n4 == a.t.a) {
                n2 = object.readShort();
                n3 = object.readShort();
                object = b.a(n2, this.K);
                object2 = b.a(n3, this.K);
                this.J[0].put("ImageLength", (b)object);
                this.J[0].put("ImageWidth", (b)object2);
                return;
            }
            object.skipBytes(n5);
        }
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Lifted jumps to return sites
     */
    private void b(a var1_1, int var2_2) {
        var4_3 = var2_2;
        if (a.a(var1_1) + 2 > a.b(var1_1)) {
            return;
        }
        var5_4 = var1_1.readShort();
        if (a.a(var1_1) + var5_4 * 12 > a.b(var1_1)) {
            return;
        }
        for (var6_5 = 0; var6_5 < var5_4; var6_5 = (short)(var6_5 + 1)) {
            block32 : {
                block33 : {
                    block34 : {
                        block31 : {
                            block29 : {
                                block30 : {
                                    block25 : {
                                        block26 : {
                                            block28 : {
                                                block27 : {
                                                    block24 : {
                                                        var8_8 = var1_1.readUnsignedShort();
                                                        var7_7 = var1_1.readUnsignedShort();
                                                        var9_9 = var1_1.readInt();
                                                        var12_11 = (long)var1_1.a() + 4L;
                                                        var17_14 = a.B[var4_3].get(var8_8);
                                                        if (var17_14 != null) break block24;
                                                        var16_13 = new HashMap<String, b>[]();
                                                        var16_13.append("Skip the tag entry since tag number is not defined: ");
                                                        var16_13.append(var8_8);
                                                        break block25;
                                                    }
                                                    if (var7_7 <= 0 || var7_7 >= a.f.length) break block26;
                                                    if (c.a(var17_14, var7_7)) break block27;
                                                    var16_13 = new StringBuilder();
                                                    var16_13.append("Skip the tag entry since data format (");
                                                    var16_13.append(a.e[var7_7]);
                                                    var16_13.append(") is unexpected for tag: ");
                                                    var16_13.append(var17_14.b);
                                                    break block25;
                                                }
                                                var3_6 = var7_7;
                                                if (var7_7 == 7) {
                                                    var3_6 = var17_14.c;
                                                }
                                                if ((var10_10 = (long)var9_9 * (long)a.f[var3_6]) < 0L || var10_10 > Integer.MAX_VALUE) break block28;
                                                var7_7 = 1;
                                                break block29;
                                            }
                                            var16_13 = new StringBuilder();
                                            var16_13.append("Skip the tag entry since the number of components is invalid: ");
                                            var16_13.append(var9_9);
                                            Log.w((String)"ExifInterface", (String)var16_13.toString());
                                            break block30;
                                        }
                                        var16_13 = new StringBuilder();
                                        var16_13.append("Skip the tag entry since data format is invalid: ");
                                        var16_13.append(var7_7);
                                    }
                                    Log.w((String)"ExifInterface", (String)var16_13.toString());
                                    var10_10 = 0L;
                                    var3_6 = var7_7;
                                }
                                var7_7 = 0;
                            }
                            if (var7_7 != 0) break block31;
                            var1_1.a(var12_11);
                            var3_6 = var4_3;
                            break block32;
                        }
                        if (var10_10 <= 4L) break block33;
                        var7_7 = var1_1.readInt();
                        if (this.I == 7) {
                            if ("MakerNote".equals(var17_14.b)) {
                                this.R = var7_7;
                            } else if (var4_3 == 6 && "ThumbnailImage".equals(var17_14.b)) {
                                this.S = var7_7;
                                this.T = var9_9;
                                var16_13 = b.a(6, this.K);
                                var18_16 = b.a((long)this.S, this.K);
                                var19_18 = b.a((long)this.T, this.K);
                                this.J[4].put("Compression", (b)var16_13);
                                this.J[4].put("JPEGInterchangeFormat", var18_16);
                                this.J[4].put("JPEGInterchangeFormatLength", var19_18);
                            }
                        } else if (this.I == 10 && "JpgFromRaw".equals(var17_14.b)) {
                            this.U = var7_7;
                        }
                        var14_12 = var7_7;
                        if (var14_12 + var10_10 <= (long)a.b(var1_1)) break block34;
                        var16_13 = new StringBuilder();
                        var16_13.append("Skip the tag entry since data offset is invalid: ");
                        var16_13.append(var7_7);
                        var16_13 = var16_13.toString();
                        ** GOTO lbl109
                    }
                    var1_1.a(var14_12);
                }
                if ((var16_13 = a.E.get(var8_8)) != null) {
                    var10_10 = -1L;
                    switch (var3_6) {
                        default: {
                            break;
                        }
                        case 9: 
                        case 13: {
                            var3_6 = var1_1.readInt();
                            ** break;
                        }
                        case 8: {
                            var3_6 = var1_1.readShort();
                            ** break;
                        }
                        case 4: {
                            var10_10 = var1_1.b();
                            break;
                        }
                        case 3: {
                            var3_6 = var1_1.readUnsignedShort();
lbl100: // 3 sources:
                            var10_10 = var3_6;
                        }
                    }
                    if (var10_10 > 0L && var10_10 < (long)a.b(var1_1)) {
                        var1_1.a(var10_10);
                        this.b(var1_1, var16_13.intValue());
                    } else {
                        var16_13 = new StringBuilder();
                        var16_13.append("Skip jump into the IFD since its offset is invalid: ");
                        var16_13.append(var10_10);
                        var16_13 = var16_13.toString();
lbl109: // 2 sources:
                        Log.w((String)"ExifInterface", (String)var16_13);
                    }
                    var1_1.a(var12_11);
                    var3_6 = var2_2;
                } else {
                    var16_13 = new byte[(int)var10_10];
                    var1_1.readFully((byte[])var16_13);
                    var16_13 = new b(var3_6, var9_9, (byte[])var16_13);
                    var18_17 = this.J;
                    var4_3 = var2_2;
                    var18_17[var4_3].put(var17_14.b, (b)var16_13);
                    if ("DNGVersion".equals(var17_14.b)) {
                        this.I = 3;
                    }
                    if (("Make".equals(var17_14.b) || "Model".equals(var17_14.b)) && var16_13.c(this.K).contains("PENTAX") || "Compression".equals(var17_14.b) && var16_13.b(this.K) == 65535) {
                        this.I = 8;
                    }
                    var3_6 = var4_3;
                    if ((long)var1_1.a() != var12_11) {
                        var1_1.a(var12_11);
                        var3_6 = var4_3;
                    }
                }
            }
            var4_3 = var3_6;
        }
        var3_6 = var1_1.a();
        var2_2 = 4;
        if (var3_6 + 4 > a.b(var1_1)) return;
        var3_6 = var1_1.readInt();
        if (var3_6 <= 8) return;
        if (var3_6 >= a.b(var1_1)) return;
        var1_1.a(var3_6);
        if (!this.J[4].isEmpty()) {
            var16_13 = this.J;
            var2_2 = 5;
            if (var16_13[5].isEmpty() == false) return;
        }
        this.b(var1_1, var2_2);
    }

    /*
     * Enabled aggressive block sorting
     */
    private void b(a object, HashMap arrl) {
        block6 : {
            byte[] arrby;
            long[] arrl2;
            int n2;
            byte[] arrby2;
            block9 : {
                block8 : {
                    block7 : {
                        arrl2 = (long[])arrl.get("StripOffsets");
                        arrby = (byte[])arrl.get("StripByteCounts");
                        if (arrl2 == null || arrby == null) break block6;
                        arrl = a.a(((b)arrl2).d(this.K));
                        arrl2 = a.a(((b)arrby).d(this.K));
                        if (arrl != null) break block7;
                        object = "stripOffsets should not be null.";
                        break block8;
                    }
                    if (arrl2 != null) break block9;
                    object = "stripByteCounts should not be null.";
                }
                Log.w((String)"ExifInterface", (String)object);
                return;
            }
            int n3 = arrl2.length;
            long l2 = 0L;
            for (n2 = 0; n2 < n3; l2 += arrl2[n2], ++n2) {
            }
            arrby = new byte[(int)l2];
            int n4 = 0;
            n2 = 0;
            for (n3 = 0; n3 < arrl.length; n2 += arrby2.length, ++n3) {
                int n5 = (int)arrl[n3];
                int n6 = (int)arrl2[n3];
                if ((n5 -= n4) < 0) {
                    Log.d((String)"ExifInterface", (String)"Invalid strip offset value");
                }
                object.a(n5);
                arrby2 = new byte[n6];
                object.read(arrby2);
                n4 = n4 + n5 + n6;
                System.arraycopy(arrby2, 0, arrby, n2, arrby2.length);
            }
            this.L = true;
            this.O = arrby;
            this.N = arrby.length;
        }
    }

    private void b(InputStream object) {
        this.a(0, 5);
        this.a(0, 4);
        this.a(5, 4);
        object = this.J[1].get("PixelXDimension");
        b b2 = this.J[1].get("PixelYDimension");
        if (object != null && b2 != null) {
            this.J[0].put("ImageWidth", (b)object);
            this.J[0].put("ImageLength", b2);
        }
        if (this.J[4].isEmpty() && this.b(this.J[5])) {
            this.J[4] = this.J[5];
            this.J[5] = new HashMap();
        }
        if (!this.b(this.J[4])) {
            Log.d((String)"ExifInterface", (String)"No image meets the size requirements of a thumbnail image.");
        }
    }

    private boolean b(HashMap object) {
        b b2 = (b)object.get("ImageLength");
        object = (b)object.get("ImageWidth");
        if (b2 != null && object != null) {
            int n2 = b2.b(this.K);
            int n3 = object.b(this.K);
            if (n2 <= 512 && n3 <= 512) {
                return true;
            }
        }
        return false;
    }

    private boolean b(byte[] arrby) {
        byte[] arrby2 = "FUJIFILMCCD-RAW".getBytes(Charset.defaultCharset());
        for (int i2 = 0; i2 < arrby2.length; ++i2) {
            if (arrby[i2] == arrby2[i2]) continue;
            return false;
        }
        return true;
    }

    static /* synthetic */ byte[] b() {
        return n;
    }

    private void c() {
        String string2 = this.a("DateTimeOriginal");
        if (string2 != null && this.a("DateTime") == null) {
            this.J[0].put("DateTime", b.a(string2));
        }
        if (this.a("ImageWidth") == null) {
            this.J[0].put("ImageWidth", b.a(0L, this.K));
        }
        if (this.a("ImageLength") == null) {
            this.J[0].put("ImageLength", b.a(0L, this.K));
        }
        if (this.a("Orientation") == null) {
            this.J[0].put("Orientation", b.a(0L, this.K));
        }
        if (this.a("LightSource") == null) {
            this.J[1].put("LightSource", b.a(0L, this.K));
        }
    }

    /*
     * Enabled aggressive block sorting
     */
    private void c(a object) {
        a a2;
        b b2;
        Object object2;
        block12 : {
            long l2;
            block11 : {
                byte[] arrby;
                block10 : {
                    this.a((a)object);
                    b b3 = this.J[1].get("MakerNote");
                    if (b3 == null) return;
                    a2 = new a(b3.c);
                    a2.a(this.K);
                    object2 = new byte[k.length];
                    a2.readFully((byte[])object2);
                    a2.a(0L);
                    arrby = new byte[l.length];
                    a2.readFully(arrby);
                    if (!Arrays.equals((byte[])object2, k)) break block10;
                    l2 = 8L;
                    break block11;
                }
                if (!Arrays.equals(arrby, l)) break block12;
                l2 = 12L;
            }
            a2.a(l2);
        }
        this.b(a2, 6);
        b b4 = this.J[7].get("PreviewImageStart");
        object2 = this.J[7].get("PreviewImageLength");
        if (b4 != null && object2 != null) {
            this.J[5].put("JPEGInterchangeFormat", b4);
            this.J[5].put("JPEGInterchangeFormatLength", (b)object2);
        }
        if ((b2 = this.J[8].get("AspectFrame")) == null) return;
        {
            int[] arrn = (int[])b2.d(this.K);
            if (arrn != null && arrn.length == 4) {
                if (arrn[2] <= arrn[0] || arrn[3] <= arrn[1]) return;
                {
                    int n2 = arrn[2] - arrn[0] + 1;
                    int n3 = arrn[3] - arrn[1] + 1;
                    int n4 = n2;
                    int n5 = n3;
                    if (n2 < n3) {
                        n4 = n2 + n3;
                        n5 = n4 - n3;
                        n4 -= n5;
                    }
                    b b5 = b.a(n4, this.K);
                    object2 = b.a(n5, this.K);
                    this.J[0].put("ImageWidth", b5);
                    this.J[0].put("ImageLength", (b)object2);
                    return;
                }
            } else {
                object2 = new StringBuilder();
                object2.append("Invalid aspect frame values. frame=");
                object2.append(Arrays.toString(arrn));
                Log.w((String)"ExifInterface", (String)object2.toString());
            }
        }
    }

    private void c(a a2, int n2) {
        b b2 = this.J[n2].get("ImageLength");
        b b3 = this.J[n2].get("ImageWidth");
        if ((b2 == null || b3 == null) && (b2 = this.J[n2].get("JPEGInterchangeFormat")) != null) {
            this.a(a2, b2.b(this.K), n2);
        }
    }

    private boolean c(byte[] object) {
        object = new a((byte[])object);
        this.K = this.e((a)object);
        object.a(this.K);
        short s2 = object.readShort();
        object.close();
        if (s2 != 20306 && s2 != 21330) {
            return false;
        }
        return true;
    }

    private void d(a object) {
        this.a((a)object);
        if (this.J[0].get("JpgFromRaw") != null) {
            this.a((a)object, this.U, 5);
        }
        object = this.J[0].get("ISO");
        b b2 = this.J[1].get("PhotographicSensitivity");
        if (object != null && b2 == null) {
            this.J[1].put("PhotographicSensitivity", (b)object);
        }
    }

    /*
     * Enabled aggressive block sorting
     */
    private void d(a object, int n2) {
        b b2;
        b b3;
        b b4;
        b b5;
        block7 : {
            void var7_7;
            block11 : {
                int[] arrn;
                block12 : {
                    void var7_10;
                    block10 : {
                        b b6;
                        block8 : {
                            Object[] arrobject;
                            block9 : {
                                b6 = this.J[n2].get("DefaultCropSize");
                                b4 = this.J[n2].get("SensorTopBorder");
                                b3 = this.J[n2].get("SensorLeftBorder");
                                b2 = this.J[n2].get("SensorBottomBorder");
                                b5 = this.J[n2].get("SensorRightBorder");
                                if (b6 == null) break block7;
                                if (b6.a != 5) break block8;
                                arrobject = (d[])b6.d(this.K);
                                if (arrobject == null || arrobject.length != 2) break block9;
                                object = b.a(arrobject[0], this.K);
                                b b7 = b.a((d)arrobject[1], this.K);
                                break block10;
                            }
                            object = new StringBuilder();
                            object.append("Invalid crop size values. cropSize=");
                            String string2 = Arrays.toString(arrobject);
                            break block11;
                        }
                        arrn = (int[])b6.d(this.K);
                        if (arrn == null || arrn.length != 2) break block12;
                        object = b.a(arrn[0], this.K);
                        b b8 = b.a(arrn[1], this.K);
                    }
                    this.J[n2].put("ImageWidth", (b)object);
                    this.J[n2].put("ImageLength", (b)var7_10);
                    return;
                }
                object = new StringBuilder();
                object.append("Invalid crop size values. cropSize=");
                String string3 = Arrays.toString(arrn);
            }
            object.append((String)var7_7);
            Log.w((String)"ExifInterface", (String)object.toString());
            return;
        }
        if (b4 != null && b3 != null && b2 != null && b5 != null) {
            int n3 = b4.b(this.K);
            int n4 = b2.b(this.K);
            int n5 = b5.b(this.K);
            int n6 = b3.b(this.K);
            if (n4 <= n3 || n5 <= n6) return;
            {
                object = b.a(n4 - n3, this.K);
                b b9 = b.a(n5 - n6, this.K);
                this.J[n2].put("ImageLength", (b)object);
                this.J[n2].put("ImageWidth", b9);
                return;
            }
        } else {
            this.c((a)object, n2);
        }
    }

    private boolean d(byte[] object) {
        object = new a((byte[])object);
        this.K = this.e((a)object);
        object.a(this.K);
        short s2 = object.readShort();
        object.close();
        if (s2 == 85) {
            return true;
        }
        return false;
    }

    private ByteOrder e(a object) {
        short s2 = object.readShort();
        if (s2 != 18761) {
            if (s2 == 19789) {
                return ByteOrder.BIG_ENDIAN;
            }
            object = new StringBuilder();
            object.append("Invalid byte order: ");
            object.append(Integer.toHexString(s2));
            throw new IOException(object.toString());
        }
        return ByteOrder.LITTLE_ENDIAN;
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     */
    private void f(a var1_1) {
        var3_2 = this.J[4];
        var4_3 = var3_2.get("Compression");
        if (var4_3 == null) ** GOTO lbl14
        this.P = var4_3.b(this.K);
        var2_4 = this.P;
        if (var2_4 == 1) ** GOTO lbl-1000
        switch (var2_4) {
            default: {
                return;
            }
            case 7: lbl-1000: // 2 sources:
            {
                if (!this.a(var3_2)) break;
                this.b(var1_1, var3_2);
                return;
            }
lbl14: // 1 sources:
            this.P = 6;
            case 6: {
                this.a(var1_1, var3_2);
            }
        }
    }

    public int a(String object, int n2) {
        if ((object = this.b((String)object)) == null) {
            return n2;
        }
        try {
            int n3 = object.b(this.K);
            return n3;
        }
        catch (NumberFormatException numberFormatException) {
            return n2;
        }
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    public String a(String object) {
        Object object2 = this.b((String)object);
        if (object2 == null) return null;
        if (!D.contains(object)) {
            return object2.c(this.K);
        }
        if (object.equals("GPSTimeStamp")) {
            if (object2.a != 5 && object2.a != 10) {
                object = new StringBuilder();
                object.append("GPS Timestamp format is not rational. format=");
                object.append(object2.a);
                Log.w((String)"ExifInterface", (String)object.toString());
                return null;
            }
            object = (d[])((b)object2).d(this.K);
            if (object != null && ((Object)object).length == 3) {
                return String.format("%02d:%02d:%02d", (int)((float)object[0].a / (float)object[0].b), (int)((float)object[1].a / (float)object[1].b), (int)((float)object[2].a / (float)object[2].b));
            }
            object2 = new StringBuilder();
            object2.append("Invalid GPS Timestamp array. array=");
            object2.append(Arrays.toString((Object[])object));
            Log.w((String)"ExifInterface", (String)object2.toString());
            return null;
        }
        try {
            return Double.toString(object2.a(this.K));
        }
        catch (NumberFormatException numberFormatException) {
            return null;
        }
    }

    private static class a
    extends InputStream
    implements DataInput {
        private static final ByteOrder a = ByteOrder.LITTLE_ENDIAN;
        private static final ByteOrder b = ByteOrder.BIG_ENDIAN;
        private DataInputStream c;
        private ByteOrder d = ByteOrder.BIG_ENDIAN;
        private final int e;
        private int f;

        public a(InputStream inputStream) {
            this.c = new DataInputStream(inputStream);
            this.e = this.c.available();
            this.f = 0;
            this.c.mark(this.e);
        }

        public a(byte[] arrby) {
            this(new ByteArrayInputStream(arrby));
        }

        static /* synthetic */ int a(a a2) {
            return a2.f;
        }

        static /* synthetic */ int b(a a2) {
            return a2.e;
        }

        public int a() {
            return this.f;
        }

        public void a(long l2) {
            if ((long)this.f > l2) {
                this.f = 0;
                this.c.reset();
                this.c.mark(this.e);
            } else {
                l2 -= (long)this.f;
            }
            int n2 = (int)l2;
            if (this.skipBytes(n2) == n2) {
                return;
            }
            throw new IOException("Couldn't seek up to the byteCount");
        }

        public void a(ByteOrder byteOrder) {
            this.d = byteOrder;
        }

        @Override
        public int available() {
            return this.c.available();
        }

        public long b() {
            return (long)this.readInt() & 0xFFFFFFFFL;
        }

        @Override
        public int read() {
            ++this.f;
            return this.c.read();
        }

        @Override
        public int read(byte[] arrby, int n2, int n3) {
            n2 = this.c.read(arrby, n2, n3);
            this.f += n2;
            return n2;
        }

        @Override
        public boolean readBoolean() {
            ++this.f;
            return this.c.readBoolean();
        }

        @Override
        public byte readByte() {
            ++this.f;
            if (this.f <= this.e) {
                int n2 = this.c.read();
                if (n2 >= 0) {
                    return (byte)n2;
                }
                throw new EOFException();
            }
            throw new EOFException();
        }

        @Override
        public char readChar() {
            this.f += 2;
            return this.c.readChar();
        }

        @Override
        public double readDouble() {
            return Double.longBitsToDouble(this.readLong());
        }

        @Override
        public float readFloat() {
            return Float.intBitsToFloat(this.readInt());
        }

        @Override
        public void readFully(byte[] arrby) {
            this.f += arrby.length;
            if (this.f <= this.e) {
                if (this.c.read(arrby, 0, arrby.length) == arrby.length) {
                    return;
                }
                throw new IOException("Couldn't read up to the length of buffer");
            }
            throw new EOFException();
        }

        @Override
        public void readFully(byte[] arrby, int n2, int n3) {
            this.f += n3;
            if (this.f <= this.e) {
                if (this.c.read(arrby, n2, n3) == n3) {
                    return;
                }
                throw new IOException("Couldn't read up to the length of buffer");
            }
            throw new EOFException();
        }

        @Override
        public int readInt() {
            this.f += 4;
            if (this.f <= this.e) {
                int n2;
                int n3;
                int n4;
                int n5 = this.c.read();
                if ((n5 | (n3 = this.c.read()) | (n4 = this.c.read()) | (n2 = this.c.read())) >= 0) {
                    if (this.d == a) {
                        return (n2 << 24) + (n4 << 16) + (n3 << 8) + n5;
                    }
                    if (this.d == b) {
                        return (n5 << 24) + (n3 << 16) + (n4 << 8) + n2;
                    }
                    StringBuilder stringBuilder = new StringBuilder();
                    stringBuilder.append("Invalid byte order: ");
                    stringBuilder.append(this.d);
                    throw new IOException(stringBuilder.toString());
                }
                throw new EOFException();
            }
            throw new EOFException();
        }

        @Override
        public String readLine() {
            Log.d((String)"ExifInterface", (String)"Currently unsupported");
            return null;
        }

        @Override
        public long readLong() {
            this.f += 8;
            if (this.f <= this.e) {
                int n2;
                int n3;
                int n4;
                int n5;
                int n6;
                int n7;
                int n8;
                int n9 = this.c.read();
                if ((n9 | (n6 = this.c.read()) | (n7 = this.c.read()) | (n4 = this.c.read()) | (n3 = this.c.read()) | (n8 = this.c.read()) | (n5 = this.c.read()) | (n2 = this.c.read())) >= 0) {
                    if (this.d == a) {
                        return ((long)n2 << 56) + ((long)n5 << 48) + ((long)n8 << 40) + ((long)n3 << 32) + ((long)n4 << 24) + ((long)n7 << 16) + ((long)n6 << 8) + (long)n9;
                    }
                    if (this.d == b) {
                        return ((long)n9 << 56) + ((long)n6 << 48) + ((long)n7 << 40) + ((long)n4 << 32) + ((long)n3 << 24) + ((long)n8 << 16) + ((long)n5 << 8) + (long)n2;
                    }
                    StringBuilder stringBuilder = new StringBuilder();
                    stringBuilder.append("Invalid byte order: ");
                    stringBuilder.append(this.d);
                    throw new IOException(stringBuilder.toString());
                }
                throw new EOFException();
            }
            throw new EOFException();
        }

        @Override
        public short readShort() {
            this.f += 2;
            if (this.f <= this.e) {
                int n2;
                int n3 = this.c.read();
                if ((n3 | (n2 = this.c.read())) >= 0) {
                    if (this.d == a) {
                        return (short)((n2 << 8) + n3);
                    }
                    if (this.d == b) {
                        return (short)((n3 << 8) + n2);
                    }
                    StringBuilder stringBuilder = new StringBuilder();
                    stringBuilder.append("Invalid byte order: ");
                    stringBuilder.append(this.d);
                    throw new IOException(stringBuilder.toString());
                }
                throw new EOFException();
            }
            throw new EOFException();
        }

        @Override
        public String readUTF() {
            this.f += 2;
            return this.c.readUTF();
        }

        @Override
        public int readUnsignedByte() {
            ++this.f;
            return this.c.readUnsignedByte();
        }

        @Override
        public int readUnsignedShort() {
            this.f += 2;
            if (this.f <= this.e) {
                int n2;
                int n3 = this.c.read();
                if ((n3 | (n2 = this.c.read())) >= 0) {
                    if (this.d == a) {
                        return (n2 << 8) + n3;
                    }
                    if (this.d == b) {
                        return (n3 << 8) + n2;
                    }
                    StringBuilder stringBuilder = new StringBuilder();
                    stringBuilder.append("Invalid byte order: ");
                    stringBuilder.append(this.d);
                    throw new IOException(stringBuilder.toString());
                }
                throw new EOFException();
            }
            throw new EOFException();
        }

        @Override
        public int skipBytes(int n2) {
            int n3 = Math.min(n2, this.e - this.f);
            for (n2 = 0; n2 < n3; n2 += this.c.skipBytes((int)(n3 - n2))) {
            }
            this.f += n2;
            return n2;
        }
    }

    private static class b {
        public final int a;
        public final int b;
        public final byte[] c;

        private b(int n2, int n3, byte[] arrby) {
            this.a = n2;
            this.b = n3;
            this.c = arrby;
        }

        public static b a(int n2, ByteOrder byteOrder) {
            return b.a(new int[]{n2}, byteOrder);
        }

        public static b a(long l2, ByteOrder byteOrder) {
            return b.a(new long[]{l2}, byteOrder);
        }

        public static b a(d d2, ByteOrder byteOrder) {
            return b.a(new d[]{d2}, byteOrder);
        }

        public static b a(String arrby) {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append((String)arrby);
            stringBuilder.append('\u0000');
            arrby = stringBuilder.toString().getBytes(F);
            return new b(2, arrby.length, arrby);
        }

        public static b a(int[] arrn, ByteOrder byteOrder) {
            ByteBuffer byteBuffer = ByteBuffer.wrap(new byte[a.f[3] * arrn.length]);
            byteBuffer.order(byteOrder);
            int n2 = arrn.length;
            for (int i2 = 0; i2 < n2; ++i2) {
                byteBuffer.putShort((short)arrn[i2]);
            }
            return new b(3, arrn.length, byteBuffer.array());
        }

        public static b a(long[] arrl, ByteOrder byteOrder) {
            ByteBuffer byteBuffer = ByteBuffer.wrap(new byte[a.f[4] * arrl.length]);
            byteBuffer.order(byteOrder);
            int n2 = arrl.length;
            for (int i2 = 0; i2 < n2; ++i2) {
                byteBuffer.putInt((int)arrl[i2]);
            }
            return new b(4, arrl.length, byteBuffer.array());
        }

        public static b a(d[] arrd, ByteOrder object) {
            ByteBuffer byteBuffer = ByteBuffer.wrap(new byte[a.f[5] * arrd.length]);
            byteBuffer.order((ByteOrder)object);
            int n2 = arrd.length;
            for (int i2 = 0; i2 < n2; ++i2) {
                object = arrd[i2];
                byteBuffer.putInt((int)object.a);
                byteBuffer.putInt((int)object.b);
            }
            return new b(5, arrd.length, byteBuffer.array());
        }

        /*
         * Exception decompiling
         */
        private Object d(ByteOrder var1_1) {
            // This method has failed to decompile.  When submitting a bug report, please provide this stack trace, and (if you hold appropriate legal rights) the relevant class file.
            // org.benf.cfr.reader.util.CannotPerformDecode: reachable test BLOCK was exited and re-entered.
            // org.benf.cfr.reader.bytecode.analysis.opgraph.op3rewriters.Misc.getFarthestReachableInRange(Misc.java:143)
            // org.benf.cfr.reader.bytecode.analysis.opgraph.op3rewriters.SwitchReplacer.examineSwitchContiguity(SwitchReplacer.java:385)
            // org.benf.cfr.reader.bytecode.analysis.opgraph.op3rewriters.SwitchReplacer.replaceRawSwitches(SwitchReplacer.java:65)
            // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisInner(CodeAnalyser.java:416)
            // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisOrWrapFail(CodeAnalyser.java:196)
            // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysis(CodeAnalyser.java:141)
            // org.benf.cfr.reader.entities.attributes.AttributeCode.analyse(AttributeCode.java:95)
            // org.benf.cfr.reader.entities.Method.analyse(Method.java:372)
            // org.benf.cfr.reader.entities.ClassFile.analyseMid(ClassFile.java:867)
            // org.benf.cfr.reader.entities.ClassFile.analyseInnerClassesPass1(ClassFile.java:749)
            // org.benf.cfr.reader.entities.ClassFile.analyseMid(ClassFile.java:847)
            // org.benf.cfr.reader.entities.ClassFile.analyseTop(ClassFile.java:768)
            // org.benf.cfr.reader.Main.doJar(Main.java:141)
            // org.benf.cfr.reader.Main.main(Main.java:242)
            throw new IllegalStateException("Decompilation failed");
        }

        public double a(ByteOrder arrobject) {
            if ((arrobject = this.d((ByteOrder)arrobject)) != null) {
                if (arrobject instanceof String) {
                    return Double.parseDouble((String)arrobject);
                }
                if (arrobject instanceof long[]) {
                    if ((arrobject = (long[])arrobject).length == 1) {
                        return arrobject[0];
                    }
                    throw new NumberFormatException("There are more than one component");
                }
                if (arrobject instanceof int[]) {
                    if ((arrobject = (int[])arrobject).length == 1) {
                        return arrobject[0];
                    }
                    throw new NumberFormatException("There are more than one component");
                }
                if (arrobject instanceof double[]) {
                    if ((arrobject = (double[])arrobject).length == 1) {
                        return arrobject[0];
                    }
                    throw new NumberFormatException("There are more than one component");
                }
                if (arrobject instanceof d[]) {
                    if ((arrobject = (d[])arrobject).length == 1) {
                        return arrobject[0].a();
                    }
                    throw new NumberFormatException("There are more than one component");
                }
                throw new NumberFormatException("Couldn't find a double value");
            }
            throw new NumberFormatException("NULL can't be converted to a double value");
        }

        public int b(ByteOrder arrl) {
            if ((arrl = this.d((ByteOrder)arrl)) != null) {
                if (arrl instanceof String) {
                    return Integer.parseInt((String)arrl);
                }
                if (arrl instanceof long[]) {
                    if ((arrl = (long[])arrl).length == 1) {
                        return (int)arrl[0];
                    }
                    throw new NumberFormatException("There are more than one component");
                }
                if (arrl instanceof int[]) {
                    if ((arrl = (int[])arrl).length == 1) {
                        return (int)arrl[0];
                    }
                    throw new NumberFormatException("There are more than one component");
                }
                throw new NumberFormatException("Couldn't find a integer value");
            }
            throw new NumberFormatException("NULL can't be converted to a integer value");
        }

        public String c(ByteOrder object) {
            Object[] arrobject = this.d((ByteOrder)object);
            if (arrobject == null) {
                return null;
            }
            if (arrobject instanceof String) {
                return (String)arrobject;
            }
            object = new StringBuilder();
            boolean bl2 = arrobject instanceof long[];
            int n2 = 0;
            int n3 = 0;
            int n4 = 0;
            int n5 = 0;
            if (bl2) {
                arrobject = arrobject;
                while (n5 < arrobject.length) {
                    object.append(arrobject[n5]);
                    n5 = n2 = n5 + 1;
                    if (n2 == arrobject.length) continue;
                    object.append(",");
                    n5 = n2;
                }
                return object.toString();
            }
            if (arrobject instanceof int[]) {
                arrobject = (int[])arrobject;
                n5 = n2;
                while (n5 < arrobject.length) {
                    object.append((int)arrobject[n5]);
                    n5 = n2 = n5 + 1;
                    if (n2 == arrobject.length) continue;
                    object.append(",");
                    n5 = n2;
                }
                return object.toString();
            }
            if (arrobject instanceof double[]) {
                arrobject = arrobject;
                n5 = n3;
                while (n5 < arrobject.length) {
                    object.append((double)arrobject[n5]);
                    n5 = n2 = n5 + 1;
                    if (n2 == arrobject.length) continue;
                    object.append(",");
                    n5 = n2;
                }
                return object.toString();
            }
            if (arrobject instanceof d[]) {
                arrobject = (d[])arrobject;
                n5 = n4;
                while (n5 < arrobject.length) {
                    object.append(arrobject[n5].a);
                    object.append('/');
                    object.append(arrobject[n5].b);
                    n5 = n2 = n5 + 1;
                    if (n2 == arrobject.length) continue;
                    object.append(",");
                    n5 = n2;
                }
                return object.toString();
            }
            return null;
        }

        public String toString() {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("(");
            stringBuilder.append(a.e[this.a]);
            stringBuilder.append(", data length:");
            stringBuilder.append(this.c.length);
            stringBuilder.append(")");
            return stringBuilder.toString();
        }
    }

    static class c {
        public final int a;
        public final String b;
        public final int c;
        public final int d;

        private c(String string2, int n2, int n3) {
            this.b = string2;
            this.a = n2;
            this.c = n3;
            this.d = -1;
        }

        private c(String string2, int n2, int n3, int n4) {
            this.b = string2;
            this.a = n2;
            this.c = n3;
            this.d = n4;
        }

        private boolean a(int n2) {
            if (this.c != 7) {
                if (n2 == 7) {
                    return true;
                }
                if (this.c != n2) {
                    if (this.d == n2) {
                        return true;
                    }
                    if ((this.c == 4 || this.d == 4) && n2 == 3) {
                        return true;
                    }
                    if ((this.c == 9 || this.d == 9) && n2 == 8) {
                        return true;
                    }
                    if ((this.c == 12 || this.d == 12) && n2 == 11) {
                        return true;
                    }
                    return false;
                }
            }
            return true;
        }

        static /* synthetic */ boolean a(c c2, int n2) {
            return c2.a(n2);
        }
    }

    private static class d {
        public final long a;
        public final long b;

        private d(long l2, long l3) {
            if (l3 == 0L) {
                this.a = 0L;
                this.b = 1L;
                return;
            }
            this.a = l2;
            this.b = l3;
        }

        public double a() {
            return (double)this.a / (double)this.b;
        }

        public String toString() {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append(this.a);
            stringBuilder.append("/");
            stringBuilder.append(this.b);
            return stringBuilder.toString();
        }
    }

}

