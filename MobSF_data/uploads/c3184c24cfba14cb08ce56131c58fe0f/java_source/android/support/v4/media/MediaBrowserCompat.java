/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.content.ComponentName
 *  android.content.Context
 *  android.content.Intent
 *  android.content.ServiceConnection
 *  android.os.Binder
 *  android.os.Build
 *  android.os.Build$VERSION
 *  android.os.Bundle
 *  android.os.Handler
 *  android.os.IBinder
 *  android.os.Looper
 *  android.os.Message
 *  android.os.Messenger
 *  android.os.Parcel
 *  android.os.Parcelable
 *  android.os.Parcelable$Creator
 *  android.os.RemoteException
 *  android.text.TextUtils
 *  android.util.Log
 */
package android.support.v4.media;

import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.content.ServiceConnection;
import android.os.Binder;
import android.os.Build;
import android.os.Bundle;
import android.os.Handler;
import android.os.IBinder;
import android.os.Looper;
import android.os.Message;
import android.os.Messenger;
import android.os.Parcel;
import android.os.Parcelable;
import android.os.RemoteException;
import android.support.v4.media.MediaDescriptionCompat;
import android.support.v4.media.a;
import android.support.v4.media.b;
import android.support.v4.media.session.MediaSessionCompat;
import android.support.v4.media.session.b;
import android.text.TextUtils;
import android.util.Log;
import java.lang.ref.WeakReference;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

public final class MediaBrowserCompat {
    static final boolean a = Log.isLoggable((String)"MediaBrowserCompat", (int)3);
    private final e b;

    /*
     * Enabled aggressive block sorting
     */
    public MediaBrowserCompat(Context object, ComponentName componentName, b b2, Bundle bundle) {
        void var4_9;
        void var1_3;
        void var2_7;
        void var3_8;
        if (Build.VERSION.SDK_INT >= 26) {
            h h2 = new h((Context)object, (ComponentName)var2_7, (b)var3_8, (Bundle)var4_9);
        } else if (Build.VERSION.SDK_INT >= 23) {
            g g2 = new g((Context)object, (ComponentName)var2_7, (b)var3_8, (Bundle)var4_9);
        } else if (Build.VERSION.SDK_INT >= 21) {
            f f2 = new f((Context)object, (ComponentName)var2_7, (b)var3_8, (Bundle)var4_9);
        } else {
            i i2 = new i((Context)object, (ComponentName)var2_7, (b)var3_8, (Bundle)var4_9);
        }
        this.b = var1_3;
    }

    public void a() {
        this.b.d();
    }

    public void b() {
        this.b.e();
    }

    public MediaSessionCompat.Token c() {
        return this.b.f();
    }

    private static class CustomActionResultReceiver
    extends android.support.v4.e.d {
        private final String d;
        private final Bundle e;
        private final c f;

        @Override
        protected void a(int n2, Bundle bundle) {
            if (this.f == null) {
                return;
            }
            switch (n2) {
                default: {
                    StringBuilder stringBuilder = new StringBuilder();
                    stringBuilder.append("Unknown result code: ");
                    stringBuilder.append(n2);
                    stringBuilder.append(" (extras=");
                    stringBuilder.append((Object)this.e);
                    stringBuilder.append(", resultData=");
                    stringBuilder.append((Object)bundle);
                    stringBuilder.append(")");
                    Log.w((String)"MediaBrowserCompat", (String)stringBuilder.toString());
                    return;
                }
                case 1: {
                    this.f.a(this.d, this.e, bundle);
                    return;
                }
                case 0: {
                    this.f.b(this.d, this.e, bundle);
                    return;
                }
                case -1: 
            }
            this.f.c(this.d, this.e, bundle);
        }
    }

    private static class ItemReceiver
    extends android.support.v4.e.d {
        private final String d;
        private final d e;

        @Override
        protected void a(int n2, Bundle bundle) {
            if (bundle != null) {
                bundle.setClassLoader(MediaBrowserCompat.class.getClassLoader());
            }
            if (n2 == 0 && bundle != null && bundle.containsKey("media_item")) {
                if ((bundle = bundle.getParcelable("media_item")) != null && !(bundle instanceof MediaItem)) {
                    this.e.a(this.d);
                    return;
                }
                this.e.a((MediaItem)bundle);
                return;
            }
            this.e.a(this.d);
        }
    }

    public static class MediaItem
    implements Parcelable {
        public static final Parcelable.Creator<MediaItem> CREATOR = new Parcelable.Creator<MediaItem>(){

            public MediaItem a(Parcel parcel) {
                return new MediaItem(parcel);
            }

            public MediaItem[] a(int n2) {
                return new MediaItem[n2];
            }

            public /* synthetic */ Object createFromParcel(Parcel parcel) {
                return this.a(parcel);
            }

            public /* synthetic */ Object[] newArray(int n2) {
                return this.a(n2);
            }
        };
        private final int a;
        private final MediaDescriptionCompat b;

        MediaItem(Parcel parcel) {
            this.a = parcel.readInt();
            this.b = (MediaDescriptionCompat)MediaDescriptionCompat.CREATOR.createFromParcel(parcel);
        }

        public MediaItem(MediaDescriptionCompat mediaDescriptionCompat, int n2) {
            if (mediaDescriptionCompat != null) {
                if (!TextUtils.isEmpty((CharSequence)mediaDescriptionCompat.a())) {
                    this.a = n2;
                    this.b = mediaDescriptionCompat;
                    return;
                }
                throw new IllegalArgumentException("description must have a non-empty media id");
            }
            throw new IllegalArgumentException("description cannot be null");
        }

        public static MediaItem a(Object object) {
            if (object != null && Build.VERSION.SDK_INT >= 21) {
                int n2 = a.c.a(object);
                return new MediaItem(MediaDescriptionCompat.a(a.c.b(object)), n2);
            }
            return null;
        }

        public static List<MediaItem> a(List<?> object) {
            if (object != null && Build.VERSION.SDK_INT >= 21) {
                ArrayList<MediaItem> arrayList = new ArrayList<MediaItem>(object.size());
                object = object.iterator();
                while (object.hasNext()) {
                    arrayList.add(MediaItem.a(object.next()));
                }
                return arrayList;
            }
            return null;
        }

        public int describeContents() {
            return 0;
        }

        public String toString() {
            StringBuilder stringBuilder = new StringBuilder("MediaItem{");
            stringBuilder.append("mFlags=");
            stringBuilder.append(this.a);
            stringBuilder.append(", mDescription=");
            stringBuilder.append(this.b);
            stringBuilder.append('}');
            return stringBuilder.toString();
        }

        public void writeToParcel(Parcel parcel, int n2) {
            parcel.writeInt(this.a);
            this.b.writeToParcel(parcel, n2);
        }

    }

    private static class SearchResultReceiver
    extends android.support.v4.e.d {
        private final String d;
        private final Bundle e;
        private final k f;

        @Override
        protected void a(int n2, Bundle object) {
            if (object != null) {
                object.setClassLoader(MediaBrowserCompat.class.getClassLoader());
            }
            if (n2 == 0 && object != null && object.containsKey("search_results")) {
                Parcelable[] arrparcelable = object.getParcelableArray("search_results");
                object = null;
                if (arrparcelable != null) {
                    ArrayList<MediaItem> arrayList = new ArrayList<MediaItem>();
                    int n3 = arrparcelable.length;
                    n2 = 0;
                    do {
                        object = arrayList;
                        if (n2 >= n3) break;
                        arrayList.add((MediaItem)arrparcelable[n2]);
                        ++n2;
                    } while (true);
                }
                this.f.a(this.d, this.e, (List<MediaItem>)object);
                return;
            }
            this.f.a(this.d, this.e);
        }
    }

    private static class a
    extends Handler {
        private final WeakReference<j> a;
        private WeakReference<Messenger> b;

        a(j j2) {
            this.a = new WeakReference<j>(j2);
        }

        void a(Messenger messenger) {
            this.b = new WeakReference<Messenger>(messenger);
        }

        /*
         * Exception decompiling
         */
        public void handleMessage(Message var1_1) {
            // This method has failed to decompile.  When submitting a bug report, please provide this stack trace, and (if you hold appropriate legal rights) the relevant class file.
            // org.benf.cfr.reader.util.ConfusedCFRException: Extractable last case doesn't follow previous
            // org.benf.cfr.reader.bytecode.analysis.opgraph.op3rewriters.SwitchReplacer.examineSwitchContiguity(SwitchReplacer.java:486)
            // org.benf.cfr.reader.bytecode.analysis.opgraph.op3rewriters.SwitchReplacer.replaceRawSwitches(SwitchReplacer.java:65)
            // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisInner(CodeAnalyser.java:416)
            // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisOrWrapFail(CodeAnalyser.java:196)
            // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysis(CodeAnalyser.java:141)
            // org.benf.cfr.reader.entities.attributes.AttributeCode.analyse(AttributeCode.java:95)
            // org.benf.cfr.reader.entities.Method.analyse(Method.java:372)
            // org.benf.cfr.reader.entities.ClassFile.analyseMid(ClassFile.java:867)
            // org.benf.cfr.reader.entities.ClassFile.analyseInnerClassesPass1(ClassFile.java:749)
            // org.benf.cfr.reader.entities.ClassFile.analyseMid(ClassFile.java:847)
            // org.benf.cfr.reader.entities.ClassFile.analyseTop(ClassFile.java:768)
            // org.benf.cfr.reader.Main.doJar(Main.java:141)
            // org.benf.cfr.reader.Main.main(Main.java:242)
            throw new IllegalStateException("Decompilation failed");
        }
    }

    public static class android.support.v4.media.MediaBrowserCompat$b {
        final Object a;
        a b;

        /*
         * Enabled aggressive block sorting
         */
        public android.support.v4.media.MediaBrowserCompat$b() {
            Object object = Build.VERSION.SDK_INT >= 21 ? android.support.v4.media.a.a(new b()) : null;
            this.a = object;
        }

        public void a() {
        }

        void a(a a2) {
            this.b = a2;
        }

        public void b() {
        }

        public void c() {
        }

        static interface a {
            public void a();

            public void b();

            public void c();
        }

        private class b
        implements a.a {
            b() {
            }

            @Override
            public void a() {
                if (b.this.b != null) {
                    b.this.b.a();
                }
                b.this.a();
            }

            @Override
            public void b() {
                if (b.this.b != null) {
                    b.this.b.b();
                }
                b.this.b();
            }

            @Override
            public void c() {
                if (b.this.b != null) {
                    b.this.b.c();
                }
                b.this.c();
            }
        }

    }

    public static abstract class c {
        public void a(String string2, Bundle bundle, Bundle bundle2) {
        }

        public void b(String string2, Bundle bundle, Bundle bundle2) {
        }

        public void c(String string2, Bundle bundle, Bundle bundle2) {
        }
    }

    public static abstract class d {
        public void a(MediaItem mediaItem) {
        }

        public void a(String string2) {
        }
    }

    static interface e {
        public void d();

        public void e();

        public MediaSessionCompat.Token f();
    }

    static class f
    implements b.a,
    e,
    j {
        final Context a;
        protected final Object b;
        protected final Bundle c;
        protected final a d = new a(this);
        protected int e;
        protected l f;
        protected Messenger g;
        private final android.support.v4.g.a<String, m> h = new android.support.v4.g.a();
        private MediaSessionCompat.Token i;

        f(Context context, ComponentName componentName, b b2, Bundle bundle) {
            this.a = context;
            Bundle bundle2 = bundle;
            if (bundle == null) {
                bundle2 = new Bundle();
            }
            bundle2.putInt("extra_client_version", 1);
            this.c = new Bundle(bundle2);
            b2.a(this);
            this.b = android.support.v4.media.a.a(context, componentName, b2.a, this.c);
        }

        /*
         * Enabled aggressive block sorting
         * Enabled unnecessary exception pruning
         * Enabled aggressive exception aggregation
         */
        @Override
        public void a() {
            android.support.v4.media.session.b b2;
            Bundle bundle;
            block5 : {
                bundle = android.support.v4.media.a.c(this.b);
                if (bundle == null) {
                    return;
                }
                this.e = bundle.getInt("extra_service_version", 0);
                IBinder iBinder = android.support.v4.app.h.a(bundle, "extra_messenger");
                if (iBinder != null) {
                    this.f = new l(iBinder, this.c);
                    this.g = new Messenger((Handler)this.d);
                    this.d.a(this.g);
                    try {
                        this.f.b(this.g);
                        break block5;
                    }
                    catch (RemoteException remoteException) {}
                    Log.i((String)"MediaBrowserCompat", (String)"Remote error registering client messenger.");
                }
            }
            if ((b2 = b.a.a(android.support.v4.app.h.a(bundle, "extra_session_binder"))) != null) {
                this.i = MediaSessionCompat.Token.a(android.support.v4.media.a.d(this.b), b2);
            }
        }

        @Override
        public void a(Messenger messenger) {
        }

        @Override
        public void a(Messenger messenger, String string2, MediaSessionCompat.Token token, Bundle bundle) {
        }

        @Override
        public void a(Messenger object, String string2, List list, Bundle bundle) {
            if (this.g != object) {
                return;
            }
            object = this.h.get(string2);
            if (object == null) {
                if (MediaBrowserCompat.a) {
                    object = new StringBuilder();
                    object.append("onLoadChildren for id that isn't subscribed id=");
                    object.append(string2);
                    Log.d((String)"MediaBrowserCompat", (String)object.toString());
                }
                return;
            }
            if ((object = object.a(this.a, bundle)) != null) {
                if (bundle == null) {
                    if (list == null) {
                        object.a(string2);
                        return;
                    }
                    object.a(string2, list);
                    return;
                }
                if (list == null) {
                    object.a(string2, bundle);
                    return;
                }
                object.a(string2, list, bundle);
            }
        }

        @Override
        public void b() {
            this.f = null;
            this.g = null;
            this.i = null;
            this.d.a(null);
        }

        @Override
        public void c() {
        }

        @Override
        public void d() {
            android.support.v4.media.a.a(this.b);
        }

        /*
         * Enabled aggressive block sorting
         * Enabled unnecessary exception pruning
         * Enabled aggressive exception aggregation
         */
        @Override
        public void e() {
            block3 : {
                if (this.f != null && this.g != null) {
                    try {
                        this.f.c(this.g);
                        break block3;
                    }
                    catch (RemoteException remoteException) {}
                    Log.i((String)"MediaBrowserCompat", (String)"Remote error unregistering client messenger.");
                }
            }
            android.support.v4.media.a.b(this.b);
        }

        @Override
        public MediaSessionCompat.Token f() {
            if (this.i == null) {
                this.i = MediaSessionCompat.Token.a(android.support.v4.media.a.d(this.b));
            }
            return this.i;
        }
    }

    static class g
    extends f {
        g(Context context, ComponentName componentName, b b2, Bundle bundle) {
            super(context, componentName, b2, bundle);
        }
    }

    static class h
    extends g {
        h(Context context, ComponentName componentName, b b2, Bundle bundle) {
            super(context, componentName, b2, bundle);
        }
    }

    static class i
    implements e,
    j {
        final Context a;
        final ComponentName b;
        final b c;
        final Bundle d;
        final android.support.v4.media.MediaBrowserCompat$a e = new android.support.v4.media.MediaBrowserCompat$a(this);
        int f = 1;
        a g;
        l h;
        Messenger i;
        private final android.support.v4.g.a<String, m> j = new android.support.v4.g.a();
        private String k;
        private MediaSessionCompat.Token l;
        private Bundle m;

        public i(Context object, ComponentName componentName, b b2, Bundle bundle) {
            if (object != null) {
                if (componentName != null) {
                    if (b2 != null) {
                        this.a = object;
                        this.b = componentName;
                        this.c = b2;
                        object = bundle == null ? null : new Bundle(bundle);
                        this.d = object;
                        return;
                    }
                    throw new IllegalArgumentException("connection callback must not be null");
                }
                throw new IllegalArgumentException("service component must not be null");
            }
            throw new IllegalArgumentException("context must not be null");
        }

        private static String a(int n2) {
            switch (n2) {
                default: {
                    StringBuilder stringBuilder = new StringBuilder();
                    stringBuilder.append("UNKNOWN/");
                    stringBuilder.append(n2);
                    return stringBuilder.toString();
                }
                case 4: {
                    return "CONNECT_STATE_SUSPENDED";
                }
                case 3: {
                    return "CONNECT_STATE_CONNECTED";
                }
                case 2: {
                    return "CONNECT_STATE_CONNECTING";
                }
                case 1: {
                    return "CONNECT_STATE_DISCONNECTED";
                }
                case 0: 
            }
            return "CONNECT_STATE_DISCONNECTING";
        }

        private boolean a(Messenger object, String string2) {
            if (this.i == object && this.f != 0 && this.f != 1) {
                return true;
            }
            if (this.f != 0 && this.f != 1) {
                object = new StringBuilder();
                object.append(string2);
                object.append(" for ");
                object.append((Object)this.b);
                object.append(" with mCallbacksMessenger=");
                object.append((Object)this.i);
                object.append(" this=");
                object.append(this);
                Log.i((String)"MediaBrowserCompat", (String)object.toString());
            }
            return false;
        }

        void a() {
            if (this.g != null) {
                this.a.unbindService((ServiceConnection)this.g);
            }
            this.f = 1;
            this.g = null;
            this.h = null;
            this.i = null;
            this.e.a(null);
            this.k = null;
            this.l = null;
        }

        @Override
        public void a(Messenger object) {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("onConnectFailed for ");
            stringBuilder.append((Object)this.b);
            Log.e((String)"MediaBrowserCompat", (String)stringBuilder.toString());
            if (!this.a((Messenger)object, "onConnectFailed")) {
                return;
            }
            if (this.f != 2) {
                object = new StringBuilder();
                object.append("onConnect from service while mState=");
                object.append(i.a(this.f));
                object.append("... ignoring");
                Log.w((String)"MediaBrowserCompat", (String)object.toString());
                return;
            }
            this.a();
            this.c.c();
        }

        /*
         * Enabled aggressive block sorting
         * Enabled unnecessary exception pruning
         * Enabled aggressive exception aggregation
         */
        @Override
        public void a(Messenger object, String string2, MediaSessionCompat.Token list, Bundle object2) {
            Object object3;
            if (!this.a((Messenger)object, "onConnect")) {
                return;
            }
            if (this.f != 2) {
                object = new StringBuilder();
                object.append("onConnect from service while mState=");
                object.append(i.a(this.f));
                object.append("... ignoring");
                Log.w((String)"MediaBrowserCompat", (String)object.toString());
                return;
            }
            this.k = string2;
            this.l = list;
            this.m = object3;
            this.f = 3;
            if (MediaBrowserCompat.a) {
                Log.d((String)"MediaBrowserCompat", (String)"ServiceCallbacks.onConnect...");
                this.c();
            }
            this.c.a();
            try {
                for (Map.Entry entry : this.j.entrySet()) {
                    string2 = (String)entry.getKey();
                    object3 = (m)entry.getValue();
                    List<n> list2 = object3.b();
                    object3 = object3.a();
                    for (int i2 = 0; i2 < list2.size(); ++i2) {
                        this.h.a(string2, list2.get(i2).c, (Bundle)object3.get(i2), this.i);
                    }
                }
                return;
            }
            catch (RemoteException remoteException) {}
            Log.d((String)"MediaBrowserCompat", (String)"addSubscription failed with RemoteException.");
        }

        @Override
        public void a(Messenger object, String string2, List list, Bundle bundle) {
            if (!this.a((Messenger)object, "onLoadChildren")) {
                return;
            }
            if (MediaBrowserCompat.a) {
                object = new StringBuilder();
                object.append("onLoadChildren for ");
                object.append((Object)this.b);
                object.append(" id=");
                object.append(string2);
                Log.d((String)"MediaBrowserCompat", (String)object.toString());
            }
            if ((object = this.j.get(string2)) == null) {
                if (MediaBrowserCompat.a) {
                    object = new StringBuilder();
                    object.append("onLoadChildren for id that isn't subscribed id=");
                    object.append(string2);
                    Log.d((String)"MediaBrowserCompat", (String)object.toString());
                }
                return;
            }
            if ((object = object.a(this.a, bundle)) != null) {
                if (bundle == null) {
                    if (list == null) {
                        object.a(string2);
                        return;
                    }
                    object.a(string2, list);
                    return;
                }
                if (list == null) {
                    object.a(string2, bundle);
                    return;
                }
                object.a(string2, list, bundle);
            }
        }

        public boolean b() {
            if (this.f == 3) {
                return true;
            }
            return false;
        }

        void c() {
            Log.d((String)"MediaBrowserCompat", (String)"MediaBrowserCompat...");
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("  mServiceComponent=");
            stringBuilder.append((Object)this.b);
            Log.d((String)"MediaBrowserCompat", (String)stringBuilder.toString());
            stringBuilder = new StringBuilder();
            stringBuilder.append("  mCallback=");
            stringBuilder.append(this.c);
            Log.d((String)"MediaBrowserCompat", (String)stringBuilder.toString());
            stringBuilder = new StringBuilder();
            stringBuilder.append("  mRootHints=");
            stringBuilder.append((Object)this.d);
            Log.d((String)"MediaBrowserCompat", (String)stringBuilder.toString());
            stringBuilder = new StringBuilder();
            stringBuilder.append("  mState=");
            stringBuilder.append(i.a(this.f));
            Log.d((String)"MediaBrowserCompat", (String)stringBuilder.toString());
            stringBuilder = new StringBuilder();
            stringBuilder.append("  mServiceConnection=");
            stringBuilder.append(this.g);
            Log.d((String)"MediaBrowserCompat", (String)stringBuilder.toString());
            stringBuilder = new StringBuilder();
            stringBuilder.append("  mServiceBinderWrapper=");
            stringBuilder.append(this.h);
            Log.d((String)"MediaBrowserCompat", (String)stringBuilder.toString());
            stringBuilder = new StringBuilder();
            stringBuilder.append("  mCallbacksMessenger=");
            stringBuilder.append((Object)this.i);
            Log.d((String)"MediaBrowserCompat", (String)stringBuilder.toString());
            stringBuilder = new StringBuilder();
            stringBuilder.append("  mRootId=");
            stringBuilder.append(this.k);
            Log.d((String)"MediaBrowserCompat", (String)stringBuilder.toString());
            stringBuilder = new StringBuilder();
            stringBuilder.append("  mMediaSessionToken=");
            stringBuilder.append(this.l);
            Log.d((String)"MediaBrowserCompat", (String)stringBuilder.toString());
        }

        @Override
        public void d() {
            if (this.f != 0 && this.f != 1) {
                StringBuilder stringBuilder = new StringBuilder();
                stringBuilder.append("connect() called while neigther disconnecting nor disconnected (state=");
                stringBuilder.append(i.a(this.f));
                stringBuilder.append(")");
                throw new IllegalStateException(stringBuilder.toString());
            }
            this.f = 2;
            this.e.post(new Runnable(){

                /*
                 * Enabled aggressive block sorting
                 * Enabled unnecessary exception pruning
                 * Enabled aggressive exception aggregation
                 */
                @Override
                public void run() {
                    boolean bl2;
                    block8 : {
                        if (i.this.f == 0) {
                            return;
                        }
                        i.this.f = 2;
                        if (MediaBrowserCompat.a && i.this.g != null) {
                            StringBuilder stringBuilder = new StringBuilder();
                            stringBuilder.append("mServiceConnection should be null. Instead it is ");
                            stringBuilder.append(i.this.g);
                            throw new RuntimeException(stringBuilder.toString());
                        }
                        if (i.this.h != null) {
                            StringBuilder stringBuilder = new StringBuilder();
                            stringBuilder.append("mServiceBinderWrapper should be null. Instead it is ");
                            stringBuilder.append(i.this.h);
                            throw new RuntimeException(stringBuilder.toString());
                        }
                        if (i.this.i != null) {
                            StringBuilder stringBuilder = new StringBuilder();
                            stringBuilder.append("mCallbacksMessenger should be null. Instead it is ");
                            stringBuilder.append((Object)i.this.i);
                            throw new RuntimeException(stringBuilder.toString());
                        }
                        Intent intent = new Intent("android.media.browse.MediaBrowserService");
                        intent.setComponent(i.this.b);
                        i.this.g = new a();
                        try {
                            bl2 = i.this.a.bindService(intent, (ServiceConnection)i.this.g, 1);
                            break block8;
                        }
                        catch (Exception exception) {}
                        StringBuilder stringBuilder = new StringBuilder();
                        stringBuilder.append("Failed binding to service ");
                        stringBuilder.append((Object)i.this.b);
                        Log.e((String)"MediaBrowserCompat", (String)stringBuilder.toString());
                        bl2 = false;
                    }
                    if (!bl2) {
                        i.this.a();
                        i.this.c.c();
                    }
                    if (MediaBrowserCompat.a) {
                        Log.d((String)"MediaBrowserCompat", (String)"connect...");
                        i.this.c();
                    }
                }
            });
        }

        @Override
        public void e() {
            this.f = 0;
            this.e.post(new Runnable(){

                /*
                 * Enabled aggressive block sorting
                 * Enabled unnecessary exception pruning
                 * Enabled aggressive exception aggregation
                 */
                @Override
                public void run() {
                    block5 : {
                        if (i.this.i != null) {
                            try {
                                i.this.h.a(i.this.i);
                                break block5;
                            }
                            catch (RemoteException remoteException) {}
                            StringBuilder stringBuilder = new StringBuilder();
                            stringBuilder.append("RemoteException during connect for ");
                            stringBuilder.append((Object)i.this.b);
                            Log.w((String)"MediaBrowserCompat", (String)stringBuilder.toString());
                        }
                    }
                    int n2 = i.this.f;
                    i.this.a();
                    if (n2 != 0) {
                        i.this.f = n2;
                    }
                    if (MediaBrowserCompat.a) {
                        Log.d((String)"MediaBrowserCompat", (String)"disconnect...");
                        i.this.c();
                    }
                }
            });
        }

        @Override
        public MediaSessionCompat.Token f() {
            if (this.b()) {
                return this.l;
            }
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("getSessionToken() called while not connected(state=");
            stringBuilder.append(this.f);
            stringBuilder.append(")");
            throw new IllegalStateException(stringBuilder.toString());
        }

        private class a
        implements ServiceConnection {
            a() {
            }

            private void a(Runnable runnable) {
                if (Thread.currentThread() == i.this.e.getLooper().getThread()) {
                    runnable.run();
                    return;
                }
                i.this.e.post(runnable);
            }

            boolean a(String string2) {
                if (i.this.g == this && i.this.f != 0 && i.this.f != 1) {
                    return true;
                }
                if (i.this.f != 0 && i.this.f != 1) {
                    StringBuilder stringBuilder = new StringBuilder();
                    stringBuilder.append(string2);
                    stringBuilder.append(" for ");
                    stringBuilder.append((Object)i.this.b);
                    stringBuilder.append(" with mServiceConnection=");
                    stringBuilder.append(i.this.g);
                    stringBuilder.append(" this=");
                    stringBuilder.append(this);
                    Log.i((String)"MediaBrowserCompat", (String)stringBuilder.toString());
                }
                return false;
            }

            public void onServiceConnected(final ComponentName componentName, final IBinder iBinder) {
                this.a(new Runnable(){

                    /*
                     * Enabled aggressive block sorting
                     * Enabled unnecessary exception pruning
                     * Enabled aggressive exception aggregation
                     */
                    @Override
                    public void run() {
                        if (MediaBrowserCompat.a) {
                            StringBuilder stringBuilder = new StringBuilder();
                            stringBuilder.append("MediaServiceConnection.onServiceConnected name=");
                            stringBuilder.append((Object)componentName);
                            stringBuilder.append(" binder=");
                            stringBuilder.append((Object)iBinder);
                            Log.d((String)"MediaBrowserCompat", (String)stringBuilder.toString());
                            i.this.c();
                        }
                        if (!a.this.a("onServiceConnected")) {
                            return;
                        }
                        i.this.h = new l(iBinder, i.this.d);
                        i.this.i = new Messenger((Handler)i.this.e);
                        i.this.e.a(i.this.i);
                        i.this.f = 2;
                        try {
                            if (MediaBrowserCompat.a) {
                                Log.d((String)"MediaBrowserCompat", (String)"ServiceCallbacks.onConnect...");
                                i.this.c();
                            }
                            i.this.h.a(i.this.a, i.this.i);
                            return;
                        }
                        catch (RemoteException remoteException) {}
                        StringBuilder stringBuilder = new StringBuilder();
                        stringBuilder.append("RemoteException during connect for ");
                        stringBuilder.append((Object)i.this.b);
                        Log.w((String)"MediaBrowserCompat", (String)stringBuilder.toString());
                        if (MediaBrowserCompat.a) {
                            Log.d((String)"MediaBrowserCompat", (String)"ServiceCallbacks.onConnect...");
                            i.this.c();
                        }
                    }
                });
            }

            public void onServiceDisconnected(final ComponentName componentName) {
                this.a(new Runnable(){

                    @Override
                    public void run() {
                        if (MediaBrowserCompat.a) {
                            StringBuilder stringBuilder = new StringBuilder();
                            stringBuilder.append("MediaServiceConnection.onServiceDisconnected name=");
                            stringBuilder.append((Object)componentName);
                            stringBuilder.append(" this=");
                            stringBuilder.append(this);
                            stringBuilder.append(" mServiceConnection=");
                            stringBuilder.append(i.this.g);
                            Log.d((String)"MediaBrowserCompat", (String)stringBuilder.toString());
                            i.this.c();
                        }
                        if (!a.this.a("onServiceDisconnected")) {
                            return;
                        }
                        i.this.h = null;
                        i.this.i = null;
                        i.this.e.a(null);
                        i.this.f = 4;
                        i.this.c.b();
                    }
                });
            }

        }

    }

    static interface j {
        public void a(Messenger var1);

        public void a(Messenger var1, String var2, MediaSessionCompat.Token var3, Bundle var4);

        public void a(Messenger var1, String var2, List var3, Bundle var4);
    }

    public static abstract class k {
        public void a(String string2, Bundle bundle) {
        }

        public void a(String string2, Bundle bundle, List<MediaItem> list) {
        }
    }

    private static class l {
        private Messenger a;
        private Bundle b;

        public l(IBinder iBinder, Bundle bundle) {
            this.a = new Messenger(iBinder);
            this.b = bundle;
        }

        private void a(int n2, Bundle bundle, Messenger messenger) {
            Message message = Message.obtain();
            message.what = n2;
            message.arg1 = 1;
            message.setData(bundle);
            message.replyTo = messenger;
            this.a.send(message);
        }

        void a(Context context, Messenger messenger) {
            Bundle bundle = new Bundle();
            bundle.putString("data_package_name", context.getPackageName());
            bundle.putBundle("data_root_hints", this.b);
            this.a(1, bundle, messenger);
        }

        void a(Messenger messenger) {
            this.a(2, null, messenger);
        }

        void a(String string2, IBinder iBinder, Bundle bundle, Messenger messenger) {
            Bundle bundle2 = new Bundle();
            bundle2.putString("data_media_item_id", string2);
            android.support.v4.app.h.a(bundle2, "data_callback_token", iBinder);
            bundle2.putBundle("data_options", bundle);
            this.a(3, bundle2, messenger);
        }

        void b(Messenger messenger) {
            Bundle bundle = new Bundle();
            bundle.putBundle("data_root_hints", this.b);
            this.a(6, bundle, messenger);
        }

        void c(Messenger messenger) {
            this.a(7, null, messenger);
        }
    }

    private static class m {
        private final List<n> a = new ArrayList<n>();
        private final List<Bundle> b = new ArrayList<Bundle>();

        public n a(Context context, Bundle bundle) {
            if (bundle != null) {
                bundle.setClassLoader(context.getClassLoader());
            }
            for (int i2 = 0; i2 < this.b.size(); ++i2) {
                if (!android.support.v4.media.c.a(this.b.get(i2), bundle)) continue;
                return this.a.get(i2);
            }
            return null;
        }

        public List<Bundle> a() {
            return this.b;
        }

        public List<n> b() {
            return this.a;
        }
    }

    public static abstract class n {
        WeakReference<m> a;
        private final Object b;
        private final IBinder c = new Binder();

        /*
         * Enabled aggressive block sorting
         */
        public n() {
            Object object = Build.VERSION.SDK_INT >= 26 ? android.support.v4.media.b.a(new b()) : (Build.VERSION.SDK_INT >= 21 ? android.support.v4.media.a.a(new a()) : null);
            this.b = object;
        }

        public void a(String string2) {
        }

        public void a(String string2, Bundle bundle) {
        }

        public void a(String string2, List<MediaItem> list) {
        }

        public void a(String string2, List<MediaItem> list, Bundle bundle) {
        }

        private class a
        implements a.d {
            a() {
            }

            List<MediaItem> a(List<MediaItem> list, Bundle bundle) {
                if (list == null) {
                    return null;
                }
                int n2 = bundle.getInt("android.media.browse.extra.PAGE", -1);
                int n3 = bundle.getInt("android.media.browse.extra.PAGE_SIZE", -1);
                if (n2 == -1 && n3 == -1) {
                    return list;
                }
                int n4 = n3 * n2;
                int n5 = n4 + n3;
                if (n2 >= 0 && n3 >= 1 && n4 < list.size()) {
                    n2 = n5;
                    if (n5 > list.size()) {
                        n2 = list.size();
                    }
                    return list.subList(n4, n2);
                }
                return Collections.EMPTY_LIST;
            }

            @Override
            public void a(String string2) {
                n.this.a(string2);
            }

            @Override
            public void a(String string2, List<?> list) {
                Object object = n.this.a == null ? null : n.this.a.get();
                if (object == null) {
                    n.this.a(string2, MediaItem.a(list));
                    return;
                }
                list = MediaItem.a(list);
                List<n> list2 = object.b();
                object = object.a();
                for (int i2 = 0; i2 < list2.size(); ++i2) {
                    Bundle bundle = (Bundle)object.get(i2);
                    if (bundle == null) {
                        n.this.a(string2, list);
                        continue;
                    }
                    n.this.a(string2, this.a(list, bundle), bundle);
                }
            }
        }

        private class b
        extends a
        implements b.a {
            b() {
            }

            @Override
            public void a(String string2, Bundle bundle) {
                n.this.a(string2, bundle);
            }

            @Override
            public void a(String string2, List<?> list, Bundle bundle) {
                n.this.a(string2, MediaItem.a(list), bundle);
            }
        }

    }

}

