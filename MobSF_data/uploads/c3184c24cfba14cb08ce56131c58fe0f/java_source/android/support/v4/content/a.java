/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.content.Context
 *  android.os.Handler
 *  android.os.SystemClock
 */
package android.support.v4.content;

import android.content.Context;
import android.os.Handler;
import android.os.SystemClock;
import android.support.v4.content.c;
import android.support.v4.content.d;
import android.support.v4.g.o;
import java.io.FileDescriptor;
import java.io.PrintWriter;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.Executor;

public abstract class a<D>
extends c<D> {
    volatile a<D> a;
    volatile a<D> b;
    long c;
    long d = -10000L;
    Handler e;
    private final Executor o;

    public a(Context context) {
        this(context, d.c);
    }

    private a(Context context, Executor executor) {
        super(context);
        this.o = executor;
    }

    @Override
    protected void a() {
        super.a();
        this.k();
        this.a = new a();
        this.c();
    }

    void a(a<D> a2, D d2) {
        this.a(d2);
        if (this.b == a2) {
            this.t();
            this.d = SystemClock.uptimeMillis();
            this.b = null;
            this.g();
            this.c();
        }
    }

    public void a(D d2) {
    }

    @Override
    public void a(String string2, FileDescriptor fileDescriptor, PrintWriter printWriter, String[] arrstring) {
        super.a(string2, fileDescriptor, printWriter, arrstring);
        if (this.a != null) {
            printWriter.print(string2);
            printWriter.print("mTask=");
            printWriter.print(this.a);
            printWriter.print(" waiting=");
            printWriter.println(this.a.a);
        }
        if (this.b != null) {
            printWriter.print(string2);
            printWriter.print("mCancellingTask=");
            printWriter.print(this.b);
            printWriter.print(" waiting=");
            printWriter.println(this.b.a);
        }
        if (this.c != 0L) {
            printWriter.print(string2);
            printWriter.print("mUpdateThrottle=");
            o.a(this.c, printWriter);
            printWriter.print(" mLastLoadCompleteTime=");
            o.a(this.d, SystemClock.uptimeMillis(), printWriter);
            printWriter.println();
        }
    }

    void b(a<D> a2, D d2) {
        if (this.a != a2) {
            this.a(a2, d2);
            return;
        }
        if (this.h()) {
            this.a(d2);
            return;
        }
        this.s();
        this.d = SystemClock.uptimeMillis();
        this.a = null;
        this.b(d2);
    }

    @Override
    protected boolean b() {
        if (this.a != null) {
            if (!this.j) {
                this.m = true;
            }
            if (this.b != null) {
                if (this.a.a) {
                    this.a.a = false;
                    this.e.removeCallbacks(this.a);
                }
                this.a = null;
                return false;
            }
            if (this.a.a) {
                this.a.a = false;
                this.e.removeCallbacks(this.a);
                this.a = null;
                return false;
            }
            boolean bl2 = this.a.a(false);
            if (bl2) {
                this.b = this.a;
                this.f();
            }
            this.a = null;
            return bl2;
        }
        return false;
    }

    void c() {
        if (this.b == null && this.a != null) {
            if (this.a.a) {
                this.a.a = false;
                this.e.removeCallbacks(this.a);
            }
            if (this.c > 0L && SystemClock.uptimeMillis() < this.d + this.c) {
                this.a.a = true;
                this.e.postAtTime(this.a, this.d + this.c);
                return;
            }
            this.a.a(this.o, (Params[])null);
        }
    }

    public abstract D d();

    protected D e() {
        return this.d();
    }

    public void f() {
    }

    final class a
    extends d<Void, Void, D>
    implements Runnable {
        boolean a;
        private final CountDownLatch d = new CountDownLatch(1);

        a() {
        }

        protected /* varargs */ D a(Void ... object) {
            try {
                object = a.this.e();
            }
            catch (android.support.v4.e.c c2) {
                if (this.c()) {
                    return null;
                }
                throw c2;
            }
            return (D)object;
        }

        @Override
        protected void a(D d2) {
            try {
                a.this.b(this, d2);
                return;
            }
            finally {
                this.d.countDown();
            }
        }

        @Override
        protected void b(D d2) {
            try {
                a.this.a(this, d2);
                return;
            }
            finally {
                this.d.countDown();
            }
        }

        @Override
        public void run() {
            this.a = false;
            a.this.c();
        }
    }

}

