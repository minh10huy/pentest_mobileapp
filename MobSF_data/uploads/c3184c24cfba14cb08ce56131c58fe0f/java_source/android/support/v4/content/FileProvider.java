/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.content.ContentProvider
 *  android.content.ContentValues
 *  android.content.Context
 *  android.content.pm.PackageManager
 *  android.content.pm.ProviderInfo
 *  android.content.res.XmlResourceParser
 *  android.database.Cursor
 *  android.database.MatrixCursor
 *  android.net.Uri
 *  android.net.Uri$Builder
 *  android.os.Build
 *  android.os.Build$VERSION
 *  android.os.Environment
 *  android.os.ParcelFileDescriptor
 *  android.text.TextUtils
 *  android.webkit.MimeTypeMap
 *  org.xmlpull.v1.XmlPullParserException
 */
package android.support.v4.content;

import android.content.ContentProvider;
import android.content.ContentValues;
import android.content.Context;
import android.content.pm.PackageManager;
import android.content.pm.ProviderInfo;
import android.content.res.XmlResourceParser;
import android.database.Cursor;
import android.database.MatrixCursor;
import android.net.Uri;
import android.os.Build;
import android.os.Environment;
import android.os.ParcelFileDescriptor;
import android.text.TextUtils;
import android.webkit.MimeTypeMap;
import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import org.xmlpull.v1.XmlPullParserException;

public class FileProvider
extends ContentProvider {
    private static final String[] a = new String[]{"_display_name", "_size"};
    private static final File b = new File("/");
    private static HashMap<String, a> c = new HashMap();
    private a d;

    private static int a(String string2) {
        if ("r".equals(string2)) {
            return 268435456;
        }
        if (!"w".equals(string2) && !"wt".equals(string2)) {
            if ("wa".equals(string2)) {
                return 704643072;
            }
            if ("rw".equals(string2)) {
                return 939524096;
            }
            if ("rwt".equals(string2)) {
                return 1006632960;
            }
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("Invalid mode: ");
            stringBuilder.append(string2);
            throw new IllegalArgumentException(stringBuilder.toString());
        }
        return 738197504;
    }

    public static Uri a(Context context, String string2, File file) {
        return FileProvider.a(context, string2).a(file);
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    private static a a(Context context, String string2) {
        HashMap<String, a> hashMap = c;
        synchronized (hashMap) {
            a a2;
            a a3;
            a2 = a3 = c.get(string2);
            if (a3 == null) {
                try {
                    a2 = FileProvider.b(context, string2);
                }
                catch (XmlPullParserException xmlPullParserException) {
                    throw new IllegalArgumentException("Failed to parse android.support.FILE_PROVIDER_PATHS meta-data", (Throwable)xmlPullParserException);
                }
                catch (IOException iOException) {
                    throw new IllegalArgumentException("Failed to parse android.support.FILE_PROVIDER_PATHS meta-data", iOException);
                }
                c.put(string2, a2);
            }
            return a2;
        }
    }

    private static /* varargs */ File a(File file, String ... arrstring) {
        for (String string2 : arrstring) {
            File file2 = file;
            if (string2 != null) {
                file2 = new File(file, string2);
            }
            file = file2;
        }
        return file;
    }

    private static Object[] a(Object[] arrobject, int n2) {
        Object[] arrobject2 = new Object[n2];
        System.arraycopy(arrobject, 0, arrobject2, 0, n2);
        return arrobject2;
    }

    private static String[] a(String[] arrstring, int n2) {
        String[] arrstring2 = new String[n2];
        System.arraycopy(arrstring, 0, arrstring2, 0, n2);
        return arrstring2;
    }

    private static a b(Context context, String object) {
        b b2 = new b((String)object);
        XmlResourceParser xmlResourceParser = context.getPackageManager().resolveContentProvider((String)object, 128).loadXmlMetaData(context.getPackageManager(), "android.support.FILE_PROVIDER_PATHS");
        if (xmlResourceParser != null) {
            int n2;
            while ((n2 = xmlResourceParser.next()) != 1) {
                if (n2 != 2) continue;
                File[] arrfile = xmlResourceParser.getName();
                Object var3_5 = null;
                String string2 = xmlResourceParser.getAttributeValue(null, "name");
                String string3 = xmlResourceParser.getAttributeValue(null, "path");
                if ("root-path".equals(arrfile)) {
                    object = b;
                } else if ("files-path".equals(arrfile)) {
                    object = context.getFilesDir();
                } else if ("cache-path".equals(arrfile)) {
                    object = context.getCacheDir();
                } else if ("external-path".equals(arrfile)) {
                    object = Environment.getExternalStorageDirectory();
                } else if ("external-files-path".equals(arrfile)) {
                    arrfile = android.support.v4.content.b.a(context, null);
                    object = var3_5;
                    if (arrfile.length > 0) {
                        object = arrfile[0];
                    }
                } else if ("external-cache-path".equals(arrfile)) {
                    arrfile = android.support.v4.content.b.a(context);
                    object = var3_5;
                    if (arrfile.length > 0) {
                        object = arrfile[0];
                    }
                } else {
                    object = var3_5;
                    if (Build.VERSION.SDK_INT >= 21) {
                        object = var3_5;
                        if ("external-media-path".equals(arrfile)) {
                            arrfile = context.getExternalMediaDirs();
                            object = var3_5;
                            if (arrfile.length > 0) {
                                object = arrfile[0];
                            }
                        }
                    }
                }
                if (object == null) continue;
                b2.a(string2, FileProvider.a((File)object, string3));
            }
            return b2;
        }
        throw new IllegalArgumentException("Missing android.support.FILE_PROVIDER_PATHS meta-data");
    }

    public void attachInfo(Context context, ProviderInfo providerInfo) {
        super.attachInfo(context, providerInfo);
        if (!providerInfo.exported) {
            if (providerInfo.grantUriPermissions) {
                this.d = FileProvider.a(context, providerInfo.authority);
                return;
            }
            throw new SecurityException("Provider must grant uri permissions");
        }
        throw new SecurityException("Provider must not be exported");
    }

    public int delete(Uri uri, String string2, String[] arrstring) {
        RuntimeException runtimeException;
        super("d2j fail translate: java.lang.RuntimeException: can not merge I and Z\n\tat com.googlecode.dex2jar.ir.TypeClass.merge(TypeClass.java:100)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeRef.updateTypeClass(TypeTransformer.java:174)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.provideAs(TypeTransformer.java:780)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.enexpr(TypeTransformer.java:659)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.exExpr(TypeTransformer.java:719)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.exExpr(TypeTransformer.java:703)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.s1stmt(TypeTransformer.java:810)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.sxStmt(TypeTransformer.java:840)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.analyze(TypeTransformer.java:206)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer.transform(TypeTransformer.java:44)\n\tat com.googlecode.d2j.dex.Dex2jar$2.optimize(Dex2jar.java:162)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertCode(Dex2Asm.java:414)\n\tat com.googlecode.d2j.dex.ExDex2Asm.convertCode(ExDex2Asm.java:42)\n\tat com.googlecode.d2j.dex.Dex2jar$2.convertCode(Dex2jar.java:128)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertMethod(Dex2Asm.java:509)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertClass(Dex2Asm.java:406)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertDex(Dex2Asm.java:422)\n\tat com.googlecode.d2j.dex.Dex2jar.doTranslate(Dex2jar.java:172)\n\tat com.googlecode.d2j.dex.Dex2jar.to(Dex2jar.java:272)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.doCommandLine(Dex2jarCmd.java:108)\n\tat com.googlecode.dex2jar.tools.BaseCmd.doMain(BaseCmd.java:288)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.main(Dex2jarCmd.java:32)\n");
        throw runtimeException;
    }

    public String getType(Uri object) {
        int n2 = (object = this.d.a((Uri)object)).getName().lastIndexOf(46);
        if (n2 >= 0) {
            object = object.getName().substring(n2 + 1);
            object = MimeTypeMap.getSingleton().getMimeTypeFromExtension((String)object);
            if (object != null) {
                return object;
            }
        }
        return "application/octet-stream";
    }

    public Uri insert(Uri uri, ContentValues contentValues) {
        throw new UnsupportedOperationException("No external inserts");
    }

    public boolean onCreate() {
        return true;
    }

    public ParcelFileDescriptor openFile(Uri uri, String string2) {
        return ParcelFileDescriptor.open((File)this.d.a(uri), (int)FileProvider.a(string2));
    }

    /*
     * Enabled aggressive block sorting
     */
    public Cursor query(Uri matrixCursor, String[] matrixCursor2, String object, String[] arrstring, String object2) {
        object = this.d.a((Uri)matrixCursor);
        matrixCursor = matrixCursor2;
        if (matrixCursor2 == null) {
            matrixCursor = a;
        }
        arrstring = new String[((Object[])matrixCursor).length];
        matrixCursor2 = new Object[((Object[])matrixCursor).length];
        int n2 = ((Object[])matrixCursor).length;
        int n3 = 0;
        int n4 = 0;
        do {
            int n5;
            block8 : {
                block7 : {
                    block6 : {
                        if (n3 >= n2) {
                            matrixCursor = FileProvider.a(arrstring, n4);
                            matrixCursor2 = FileProvider.a((Object[])matrixCursor2, n4);
                            matrixCursor = new MatrixCursor((String[])matrixCursor, 1);
                            matrixCursor.addRow((Object[])matrixCursor2);
                            return matrixCursor;
                        }
                        object2 = matrixCursor[n3];
                        if (!"_display_name".equals(object2)) break block6;
                        arrstring[n4] = "_display_name";
                        n5 = n4 + 1;
                        matrixCursor2[n4] = object.getName();
                        n4 = n5;
                        break block7;
                    }
                    n5 = n4;
                    if (!"_size".equals(object2)) break block8;
                    arrstring[n4] = "_size";
                    n5 = n4 + 1;
                    matrixCursor2[n4] = Long.valueOf(object.length());
                    n4 = n5;
                }
                n5 = n4;
            }
            ++n3;
            n4 = n5;
        } while (true);
    }

    public int update(Uri uri, ContentValues contentValues, String string2, String[] arrstring) {
        throw new UnsupportedOperationException("No external updates");
    }

    static interface a {
        public Uri a(File var1);

        public File a(Uri var1);
    }

    static class b
    implements a {
        private final String a;
        private final HashMap<String, File> b = new HashMap();

        b(String string2) {
            this.a = string2;
        }

        /*
         * Enabled aggressive block sorting
         * Enabled unnecessary exception pruning
         * Enabled aggressive exception aggregation
         */
        @Override
        public Uri a(File object) {
            CharSequence charSequence;
            try {
                charSequence = object.getCanonicalPath();
                object = null;
            }
            catch (IOException iOException) {}
            for (Map.Entry<String, File> entry : this.b.entrySet()) {
                String string2 = entry.getValue().getPath();
                if (!charSequence.startsWith(string2) || object != null && string2.length() <= object.getValue().getPath().length()) continue;
                object = entry;
            }
            if (object == null) {
                object = new StringBuilder();
                object.append("Failed to find configured root that contains ");
                object.append((String)charSequence);
                throw new IllegalArgumentException(object.toString());
            }
            String string3 = ((File)object.getValue()).getPath();
            int n2 = string3.endsWith("/") ? string3.length() : string3.length() + 1;
            String string4 = charSequence.substring(n2);
            charSequence = new StringBuilder();
            charSequence.append(Uri.encode((String)object.getKey()));
            charSequence.append('/');
            charSequence.append(Uri.encode((String)string4, (String)"/"));
            object = charSequence.toString();
            return new Uri.Builder().scheme("content").authority(this.a).encodedPath((String)object).build();
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("Failed to resolve canonical path for ");
            stringBuilder.append(object);
            throw new IllegalArgumentException(stringBuilder.toString());
        }

        /*
         * Enabled aggressive block sorting
         * Enabled unnecessary exception pruning
         * Enabled aggressive exception aggregation
         */
        @Override
        public File a(Uri object) {
            Object object2 = object.getEncodedPath();
            int n2 = object2.indexOf(47, 1);
            Object object3 = Uri.decode((String)object2.substring(1, n2));
            object2 = Uri.decode((String)object2.substring(n2 + 1));
            if ((object3 = this.b.get(object3)) == null) {
                object3 = new StringBuilder();
                object3.append("Unable to find configured root for ");
                object3.append(object);
                throw new IllegalArgumentException(object3.toString());
            }
            object = new File((File)object3, (String)object2);
            try {
                object2 = object.getCanonicalFile();
                if (object2.getPath().startsWith(object3.getPath())) {
                    return object2;
                }
                throw new SecurityException("Resolved path jumped beyond configured root");
            }
            catch (IOException iOException) {}
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("Failed to resolve canonical path for ");
            stringBuilder.append(object);
            throw new IllegalArgumentException(stringBuilder.toString());
        }

        void a(String string2, File file) {
            if (!TextUtils.isEmpty((CharSequence)string2)) {
                try {
                    File file2 = file.getCanonicalFile();
                    this.b.put(string2, file2);
                    return;
                }
                catch (IOException iOException) {
                    StringBuilder stringBuilder = new StringBuilder();
                    stringBuilder.append("Failed to resolve canonical path for ");
                    stringBuilder.append(file);
                    throw new IllegalArgumentException(stringBuilder.toString(), iOException);
                }
            }
            throw new IllegalArgumentException("Name must not be empty");
        }
    }

}

