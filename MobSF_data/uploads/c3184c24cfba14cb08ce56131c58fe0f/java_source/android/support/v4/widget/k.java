/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.os.Build
 *  android.os.Build$VERSION
 *  android.util.Log
 *  android.view.View
 *  android.widget.PopupWindow
 */
package android.support.v4.widget;

import android.os.Build;
import android.support.v4.view.s;
import android.util.Log;
import android.view.View;
import android.widget.PopupWindow;
import java.lang.reflect.Field;
import java.lang.reflect.Method;

public final class k {
    static final d a;

    /*
     * Enabled aggressive block sorting
     */
    static {
        void var0_1;
        if (Build.VERSION.SDK_INT >= 23) {
            c c2 = new c();
        } else if (Build.VERSION.SDK_INT >= 21) {
            b b2 = new b();
        } else if (Build.VERSION.SDK_INT >= 19) {
            a a2 = new a();
        } else {
            d d2 = new d();
        }
        a = var0_1;
    }

    public static void a(PopupWindow popupWindow, int n2) {
        a.a(popupWindow, n2);
    }

    public static void a(PopupWindow popupWindow, View view, int n2, int n3, int n4) {
        a.a(popupWindow, view, n2, n3, n4);
    }

    public static void a(PopupWindow popupWindow, boolean bl2) {
        a.a(popupWindow, bl2);
    }

    static class a
    extends d {
        a() {
        }

        @Override
        public void a(PopupWindow popupWindow, View view, int n2, int n3, int n4) {
            popupWindow.showAsDropDown(view, n2, n3, n4);
        }
    }

    static class b
    extends a {
        private static Field a;

        static {
            try {
                a = PopupWindow.class.getDeclaredField("mOverlapAnchor");
                a.setAccessible(true);
            }
            catch (NoSuchFieldException noSuchFieldException) {
                Log.i((String)"PopupWindowCompatApi21", (String)"Could not fetch mOverlapAnchor field from PopupWindow", (Throwable)noSuchFieldException);
            }
        }

        b() {
        }

        @Override
        public void a(PopupWindow popupWindow, boolean bl2) {
            if (a != null) {
                try {
                    a.set((Object)popupWindow, bl2);
                    return;
                }
                catch (IllegalAccessException illegalAccessException) {
                    Log.i((String)"PopupWindowCompatApi21", (String)"Could not set overlap anchor field in PopupWindow", (Throwable)illegalAccessException);
                }
            }
        }
    }

    static class c
    extends b {
        c() {
        }

        @Override
        public void a(PopupWindow popupWindow, int n2) {
            popupWindow.setWindowLayoutType(n2);
        }

        @Override
        public void a(PopupWindow popupWindow, boolean bl2) {
            popupWindow.setOverlapAnchor(bl2);
        }
    }

    static class d {
        private static Method a;
        private static boolean b;

        d() {
        }

        /*
         * Enabled aggressive block sorting
         * Enabled unnecessary exception pruning
         * Enabled aggressive exception aggregation
         * Lifted jumps to return sites
         */
        public void a(PopupWindow popupWindow, int n2) {
            if (!b) {
                try {
                    a = PopupWindow.class.getDeclaredMethod("setWindowLayoutType", Integer.TYPE);
                    a.setAccessible(true);
                }
                catch (Exception exception) {}
                b = true;
            }
            if (a == null) return;
            try {
                a.invoke((Object)popupWindow, n2);
                return;
            }
            catch (Exception exception) {
                return;
            }
        }

        public void a(PopupWindow popupWindow, View view, int n2, int n3, int n4) {
            int n5 = n2;
            if ((android.support.v4.view.d.a(n4, s.e(view)) & 7) == 5) {
                n5 = n2 - (popupWindow.getWidth() - view.getWidth());
            }
            popupWindow.showAsDropDown(view, n5, n3);
        }

        public void a(PopupWindow popupWindow, boolean bl2) {
        }
    }

}

