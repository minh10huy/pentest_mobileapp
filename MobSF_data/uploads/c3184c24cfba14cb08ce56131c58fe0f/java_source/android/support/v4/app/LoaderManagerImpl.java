/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.os.Bundle
 *  android.os.Looper
 *  android.util.Log
 */
package android.support.v4.app;

import android.arch.lifecycle.e;
import android.arch.lifecycle.j;
import android.arch.lifecycle.k;
import android.arch.lifecycle.n;
import android.arch.lifecycle.o;
import android.arch.lifecycle.p;
import android.os.Bundle;
import android.os.Looper;
import android.support.v4.app.y;
import android.support.v4.content.c;
import android.support.v4.g.d;
import android.util.Log;
import java.io.FileDescriptor;
import java.io.PrintWriter;
import java.lang.reflect.Modifier;

class LoaderManagerImpl
extends y {
    static boolean a = false;
    private final e b;
    private final LoaderViewModel c;
    private boolean d;

    LoaderManagerImpl(e e2, p p2) {
        this.b = e2;
        this.c = LoaderViewModel.a(p2);
    }

    private <D> c<D> a(int n2, Bundle object, y.a<D> a2, c<D> object2) {
        try {
            this.d = true;
            c<D> c2 = a2.a(n2, (Bundle)object);
            if (c2.getClass().isMemberClass() && !Modifier.isStatic(c2.getClass().getModifiers())) {
                object = new StringBuilder();
                object.append("Object returned from onCreateLoader must not be a non-static inner member class: ");
                object.append(c2);
                throw new IllegalArgumentException(object.toString());
            }
            object = new a<D>(n2, (Bundle)object, c2, (c<D>)object2);
            if (a) {
                object2 = new StringBuilder();
                object2.append("  Created new loader ");
                object2.append(object);
                Log.v((String)"LoaderManager", (String)object2.toString());
            }
            this.c.a(n2, (a)object);
            return object.a(this.b, a2);
        }
        finally {
            this.d = false;
        }
    }

    @Override
    public <D> c<D> a(int n2, Bundle object, y.a<D> a2) {
        if (!this.d) {
            if (Looper.getMainLooper() == Looper.myLooper()) {
                a<D> a3 = this.c.a(n2);
                if (a) {
                    StringBuilder stringBuilder = new StringBuilder();
                    stringBuilder.append("initLoader in ");
                    stringBuilder.append(this);
                    stringBuilder.append(": args=");
                    stringBuilder.append(object);
                    Log.v((String)"LoaderManager", (String)stringBuilder.toString());
                }
                if (a3 == null) {
                    return this.a(n2, (Bundle)object, a2, null);
                }
                if (a) {
                    object = new StringBuilder();
                    object.append("  Re-using existing loader ");
                    object.append(a3);
                    Log.v((String)"LoaderManager", (String)object.toString());
                }
                return a3.a(this.b, a2);
            }
            throw new IllegalStateException("initLoader must be called on the main thread");
        }
        throw new IllegalStateException("Called while creating a loader");
    }

    void a() {
        this.c.b();
    }

    @Override
    public void a(String string2, FileDescriptor fileDescriptor, PrintWriter printWriter, String[] arrstring) {
        this.c.a(string2, fileDescriptor, printWriter, arrstring);
    }

    public String toString() {
        StringBuilder stringBuilder = new StringBuilder(128);
        stringBuilder.append("LoaderManager{");
        stringBuilder.append(Integer.toHexString(System.identityHashCode(this)));
        stringBuilder.append(" in ");
        d.a(this.b, stringBuilder);
        stringBuilder.append("}}");
        return stringBuilder.toString();
    }

    static class LoaderViewModel
    extends n {
        private static final o.a a = new o.a(){

            @Override
            public <T extends n> T a(Class<T> class_) {
                return (T)new LoaderViewModel();
            }
        };
        private android.support.v4.g.n<a> b = new android.support.v4.g.n();

        LoaderViewModel() {
        }

        static LoaderViewModel a(p p2) {
            return new o(p2, a).a(LoaderViewModel.class);
        }

        <D> a<D> a(int n2) {
            return this.b.a(n2);
        }

        @Override
        protected void a() {
            super.a();
            int n2 = this.b.b();
            for (int i2 = 0; i2 < n2; ++i2) {
                this.b.e(i2).a(true);
            }
            this.b.c();
        }

        void a(int n2, a a2) {
            this.b.b(n2, a2);
        }

        public void a(String string2, FileDescriptor fileDescriptor, PrintWriter printWriter, String[] arrstring) {
            if (this.b.b() > 0) {
                printWriter.print(string2);
                printWriter.println("Loaders:");
                CharSequence charSequence = new StringBuilder();
                charSequence.append(string2);
                charSequence.append("    ");
                charSequence = charSequence.toString();
                for (int i2 = 0; i2 < this.b.b(); ++i2) {
                    a a2 = this.b.e(i2);
                    printWriter.print(string2);
                    printWriter.print("  #");
                    printWriter.print(this.b.d(i2));
                    printWriter.print(": ");
                    printWriter.println(a2.toString());
                    a2.a((String)charSequence, fileDescriptor, printWriter, arrstring);
                }
            }
        }

        void b() {
            int n2 = this.b.b();
            for (int i2 = 0; i2 < n2; ++i2) {
                this.b.e(i2).g();
            }
        }

    }

    public static class a<D>
    extends j<D>
    implements c.b<D> {
        private final int a;
        private final Bundle b;
        private final c<D> c;
        private e d;
        private b<D> e;
        private c<D> f;

        a(int n2, Bundle bundle, c<D> c2, c<D> c3) {
            this.a = n2;
            this.b = bundle;
            this.c = c2;
            this.f = c3;
            this.c.a(n2, this);
        }

        c<D> a(e e2, y.a<D> object) {
            object = new b<D>(this.c, (y.a<D>)object);
            this.a(e2, object);
            if (this.e != null) {
                this.a(this.e);
            }
            this.d = e2;
            this.e = object;
            return this.c;
        }

        c<D> a(boolean bl2) {
            Object object;
            if (LoaderManagerImpl.a) {
                object = new StringBuilder();
                object.append("  Destroying: ");
                object.append(this);
                Log.v((String)"LoaderManager", (String)object.toString());
            }
            this.c.k();
            this.c.o();
            object = this.e;
            if (object != null) {
                this.a((k<D>)object);
                if (bl2) {
                    object.b();
                }
            }
            this.c.a(this);
            if (object != null && !object.a() || bl2) {
                this.c.q();
                return this.f;
            }
            return this.c;
        }

        @Override
        public void a(k<D> k2) {
            super.a(k2);
            this.d = null;
            this.e = null;
        }

        @Override
        public void a(c<D> object, D d2) {
            if (LoaderManagerImpl.a) {
                object = new StringBuilder();
                object.append("onLoadComplete: ");
                object.append(this);
                Log.v((String)"LoaderManager", (String)object.toString());
            }
            if (Looper.myLooper() == Looper.getMainLooper()) {
                this.b(d2);
                return;
            }
            if (LoaderManagerImpl.a) {
                Log.w((String)"LoaderManager", (String)"onLoadComplete was incorrectly called on a background thread");
            }
            this.a(d2);
        }

        public void a(String string2, FileDescriptor object, PrintWriter printWriter, String[] object2) {
            printWriter.print(string2);
            printWriter.print("mId=");
            printWriter.print(this.a);
            printWriter.print(" mArgs=");
            printWriter.println((Object)this.b);
            printWriter.print(string2);
            printWriter.print("mLoader=");
            printWriter.println(this.c);
            c<D> c2 = this.c;
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append(string2);
            stringBuilder.append("  ");
            c2.a(stringBuilder.toString(), (FileDescriptor)object, printWriter, (String[])object2);
            if (this.e != null) {
                printWriter.print(string2);
                printWriter.print("mCallbacks=");
                printWriter.println(this.e);
                object = this.e;
                object2 = new StringBuilder();
                object2.append(string2);
                object2.append("  ");
                object.a(object2.toString(), printWriter);
            }
            printWriter.print(string2);
            printWriter.print("mData=");
            printWriter.println(this.f().c(this.a()));
            printWriter.print(string2);
            printWriter.print("mStarted=");
            printWriter.println(this.d());
        }

        @Override
        protected void b() {
            if (LoaderManagerImpl.a) {
                StringBuilder stringBuilder = new StringBuilder();
                stringBuilder.append("  Starting: ");
                stringBuilder.append(this);
                Log.v((String)"LoaderManager", (String)stringBuilder.toString());
            }
            this.c.i();
        }

        @Override
        public void b(D d2) {
            super.b(d2);
            if (this.f != null) {
                this.f.q();
                this.f = null;
            }
        }

        @Override
        protected void c() {
            if (LoaderManagerImpl.a) {
                StringBuilder stringBuilder = new StringBuilder();
                stringBuilder.append("  Stopping: ");
                stringBuilder.append(this);
                Log.v((String)"LoaderManager", (String)stringBuilder.toString());
            }
            this.c.m();
        }

        c<D> f() {
            return this.c;
        }

        void g() {
            e e2 = this.d;
            b<D> b2 = this.e;
            if (e2 != null && b2 != null) {
                super.a(b2);
                this.a(e2, b2);
            }
        }

        public String toString() {
            StringBuilder stringBuilder = new StringBuilder(64);
            stringBuilder.append("LoaderInfo{");
            stringBuilder.append(Integer.toHexString(System.identityHashCode(this)));
            stringBuilder.append(" #");
            stringBuilder.append(this.a);
            stringBuilder.append(" : ");
            d.a(this.c, stringBuilder);
            stringBuilder.append("}}");
            return stringBuilder.toString();
        }
    }

    static class b<D>
    implements k<D> {
        private final c<D> a;
        private final y.a<D> b;
        private boolean c = false;

        b(c<D> c2, y.a<D> a2) {
            this.a = c2;
            this.b = a2;
        }

        @Override
        public void a(D d2) {
            if (LoaderManagerImpl.a) {
                StringBuilder stringBuilder = new StringBuilder();
                stringBuilder.append("  onLoadFinished in ");
                stringBuilder.append(this.a);
                stringBuilder.append(": ");
                stringBuilder.append(this.a.c(d2));
                Log.v((String)"LoaderManager", (String)stringBuilder.toString());
            }
            this.b.a(this.a, d2);
            this.c = true;
        }

        public void a(String string2, PrintWriter printWriter) {
            printWriter.print(string2);
            printWriter.print("mDeliveredData=");
            printWriter.println(this.c);
        }

        boolean a() {
            return this.c;
        }

        void b() {
            if (this.c) {
                if (LoaderManagerImpl.a) {
                    StringBuilder stringBuilder = new StringBuilder();
                    stringBuilder.append("  Resetting: ");
                    stringBuilder.append(this.a);
                    Log.v((String)"LoaderManager", (String)stringBuilder.toString());
                }
                this.b.a(this.a);
            }
        }

        public String toString() {
            return this.b.toString();
        }
    }

}

