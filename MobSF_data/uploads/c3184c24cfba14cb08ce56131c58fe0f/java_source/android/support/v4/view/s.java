/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.animation.ValueAnimator
 *  android.content.Context
 *  android.content.res.ColorStateList
 *  android.graphics.PorterDuff
 *  android.graphics.PorterDuff$Mode
 *  android.graphics.Rect
 *  android.graphics.drawable.Drawable
 *  android.os.Build
 *  android.os.Build$VERSION
 *  android.os.IBinder
 *  android.view.Display
 *  android.view.PointerIcon
 *  android.view.View
 *  android.view.View$AccessibilityDelegate
 *  android.view.View$OnApplyWindowInsetsListener
 *  android.view.ViewParent
 *  android.view.WindowInsets
 *  android.view.WindowManager
 */
package android.support.v4.view;

import android.animation.ValueAnimator;
import android.content.Context;
import android.content.res.ColorStateList;
import android.graphics.PorterDuff;
import android.graphics.Rect;
import android.graphics.drawable.Drawable;
import android.os.Build;
import android.os.IBinder;
import android.support.v4.view.aa;
import android.support.v4.view.o;
import android.support.v4.view.q;
import android.support.v4.view.r;
import android.support.v4.view.w;
import android.view.Display;
import android.view.PointerIcon;
import android.view.View;
import android.view.ViewParent;
import android.view.WindowInsets;
import android.view.WindowManager;
import java.lang.reflect.Field;
import java.util.WeakHashMap;
import java.util.concurrent.atomic.AtomicInteger;

public class s {
    static final j a;

    /*
     * Enabled aggressive block sorting
     */
    static {
        void var0_1;
        if (Build.VERSION.SDK_INT >= 26) {
            i i2 = new i();
        } else if (Build.VERSION.SDK_INT >= 24) {
            h h2 = new h();
        } else if (Build.VERSION.SDK_INT >= 23) {
            g g2 = new g();
        } else if (Build.VERSION.SDK_INT >= 21) {
            f f2 = new f();
        } else if (Build.VERSION.SDK_INT >= 19) {
            e e2 = new e();
        } else if (Build.VERSION.SDK_INT >= 18) {
            d d2 = new d();
        } else if (Build.VERSION.SDK_INT >= 17) {
            c c2 = new c();
        } else if (Build.VERSION.SDK_INT >= 16) {
            b b2 = new b();
        } else if (Build.VERSION.SDK_INT >= 15) {
            a a2 = new a();
        } else {
            j j2 = new j();
        }
        a = var0_1;
    }

    public static aa a(View view, aa aa2) {
        return a.a(view, aa2);
    }

    public static void a(View view, float f2) {
        a.a(view, f2);
    }

    public static void a(View view, int n2) {
        a.a(view, n2);
    }

    public static void a(View view, int n2, int n3) {
        a.a(view, n2, n3);
    }

    public static void a(View view, int n2, int n3, int n4, int n5) {
        a.a(view, n2, n3, n4, n5);
    }

    public static void a(View view, ColorStateList colorStateList) {
        a.a(view, colorStateList);
    }

    public static void a(View view, PorterDuff.Mode mode) {
        a.a(view, mode);
    }

    public static void a(View view, Rect rect) {
        a.a(view, rect);
    }

    public static void a(View view, Drawable drawable2) {
        a.a(view, drawable2);
    }

    public static void a(View view, android.support.v4.view.b b2) {
        a.a(view, b2);
    }

    public static void a(View view, o o2) {
        a.a(view, o2);
    }

    public static void a(View view, q q2) {
        a.a(view, q2);
    }

    public static void a(View view, Runnable runnable) {
        a.a(view, runnable);
    }

    public static void a(View view, Runnable runnable, long l2) {
        a.a(view, runnable, l2);
    }

    public static void a(View view, String string2) {
        a.a(view, string2);
    }

    public static void a(View view, boolean bl2) {
        a.a(view, bl2);
    }

    public static boolean a(View view) {
        return a.A(view);
    }

    public static aa b(View view, aa aa2) {
        return a.b(view, aa2);
    }

    public static void b(View view, int n2) {
        a.c(view, n2);
    }

    @Deprecated
    public static void b(View view, boolean bl2) {
        view.setFitsSystemWindows(bl2);
    }

    public static boolean b(View view) {
        return a.b(view);
    }

    public static void c(View view) {
        a.c(view);
    }

    public static void c(View view, int n2) {
        a.b(view, n2);
    }

    public static int d(View view) {
        return a.d(view);
    }

    public static int e(View view) {
        return a.j(view);
    }

    public static int f(View view) {
        return a.k(view);
    }

    public static int g(View view) {
        return a.l(view);
    }

    public static int h(View view) {
        return a.e(view);
    }

    public static int i(View view) {
        return a.f(view);
    }

    public static w j(View view) {
        return a.B(view);
    }

    public static String k(View view) {
        return a.s(view);
    }

    public static int l(View view) {
        return a.m(view);
    }

    public static void m(View view) {
        a.g(view);
    }

    public static boolean n(View view) {
        return a.h(view);
    }

    public static boolean o(View view) {
        return a.i(view);
    }

    public static boolean p(View view) {
        return a.n(view);
    }

    public static ColorStateList q(View view) {
        return a.x(view);
    }

    public static PorterDuff.Mode r(View view) {
        return a.y(view);
    }

    public static boolean s(View view) {
        return a.v(view);
    }

    public static void t(View view) {
        a.w(view);
    }

    public static boolean u(View view) {
        return a.q(view);
    }

    public static float v(View view) {
        return a.z(view);
    }

    public static Rect w(View view) {
        return a.p(view);
    }

    public static boolean x(View view) {
        return a.r(view);
    }

    public static boolean y(View view) {
        return a.a(view);
    }

    public static Display z(View view) {
        return a.o(view);
    }

    static class a
    extends j {
        a() {
        }

        @Override
        public boolean a(View view) {
            return view.hasOnClickListeners();
        }
    }

    static class b
    extends a {
        b() {
        }

        @Override
        public void a(View view, int n2) {
            int n3 = n2;
            if (n2 == 4) {
                n3 = 2;
            }
            view.setImportantForAccessibility(n3);
        }

        @Override
        public void a(View view, Drawable drawable2) {
            view.setBackground(drawable2);
        }

        @Override
        public void a(View view, Runnable runnable) {
            view.postOnAnimation(runnable);
        }

        @Override
        public void a(View view, Runnable runnable, long l2) {
            view.postOnAnimationDelayed(runnable, l2);
        }

        @Override
        public void a(View view, boolean bl2) {
            view.setHasTransientState(bl2);
        }

        @Override
        public boolean b(View view) {
            return view.hasTransientState();
        }

        @Override
        public void c(View view) {
            view.postInvalidateOnAnimation();
        }

        @Override
        public int d(View view) {
            return view.getImportantForAccessibility();
        }

        @Override
        public int e(View view) {
            return view.getMinimumWidth();
        }

        @Override
        public int f(View view) {
            return view.getMinimumHeight();
        }

        @Override
        public void g(View view) {
            view.requestFitSystemWindows();
        }

        @Override
        public boolean h(View view) {
            return view.getFitsSystemWindows();
        }

        @Override
        public boolean i(View view) {
            return view.hasOverlappingRendering();
        }
    }

    static class c
    extends b {
        c() {
        }

        @Override
        public void a(View view, int n2, int n3, int n4, int n5) {
            view.setPaddingRelative(n2, n3, n4, n5);
        }

        @Override
        public int j(View view) {
            return view.getLayoutDirection();
        }

        @Override
        public int k(View view) {
            return view.getPaddingStart();
        }

        @Override
        public int l(View view) {
            return view.getPaddingEnd();
        }

        @Override
        public int m(View view) {
            return view.getWindowSystemUiVisibility();
        }

        @Override
        public boolean n(View view) {
            return view.isPaddingRelative();
        }

        @Override
        public Display o(View view) {
            return view.getDisplay();
        }
    }

    static class d
    extends c {
        d() {
        }

        @Override
        public void a(View view, Rect rect) {
            view.setClipBounds(rect);
        }

        @Override
        public Rect p(View view) {
            return view.getClipBounds();
        }
    }

    static class e
    extends d {
        e() {
        }

        @Override
        public void a(View view, int n2) {
            view.setImportantForAccessibility(n2);
        }

        @Override
        public boolean q(View view) {
            return view.isLaidOut();
        }

        @Override
        public boolean r(View view) {
            return view.isAttachedToWindow();
        }
    }

    static class f
    extends e {
        private static ThreadLocal<Rect> d;

        f() {
        }

        private static Rect b() {
            Rect rect;
            if (d == null) {
                d = new ThreadLocal();
            }
            Rect rect2 = rect = d.get();
            if (rect == null) {
                rect2 = new Rect();
                d.set(rect2);
            }
            rect2.setEmpty();
            return rect2;
        }

        @Override
        public aa a(View object, aa aa2) {
            aa2 = (WindowInsets)aa.a(aa2);
            WindowInsets windowInsets = object.onApplyWindowInsets((WindowInsets)aa2);
            object = aa2;
            if (windowInsets != aa2) {
                object = new WindowInsets(windowInsets);
            }
            return aa.a(object);
        }

        @Override
        public void a(View view, float f2) {
            view.setElevation(f2);
        }

        @Override
        public void a(View view, ColorStateList colorStateList) {
            view.setBackgroundTintList(colorStateList);
            if (Build.VERSION.SDK_INT == 21) {
                colorStateList = view.getBackground();
                boolean bl2 = view.getBackgroundTintList() != null || view.getBackgroundTintMode() != null;
                if (colorStateList != null && bl2) {
                    if (colorStateList.isStateful()) {
                        colorStateList.setState(view.getDrawableState());
                    }
                    view.setBackground((Drawable)colorStateList);
                }
            }
        }

        @Override
        public void a(View view, PorterDuff.Mode mode) {
            view.setBackgroundTintMode(mode);
            if (Build.VERSION.SDK_INT == 21) {
                mode = view.getBackground();
                boolean bl2 = view.getBackgroundTintList() != null || view.getBackgroundTintMode() != null;
                if (mode != null && bl2) {
                    if (mode.isStateful()) {
                        mode.setState(view.getDrawableState());
                    }
                    view.setBackground((Drawable)mode);
                }
            }
        }

        @Override
        public void a(View view, final o o2) {
            if (o2 == null) {
                view.setOnApplyWindowInsetsListener(null);
                return;
            }
            view.setOnApplyWindowInsetsListener(new View.OnApplyWindowInsetsListener(){

                public WindowInsets onApplyWindowInsets(View view, WindowInsets object) {
                    object = aa.a(object);
                    return (WindowInsets)aa.a(o2.a(view, (aa)object));
                }
            });
        }

        @Override
        public void a(View view, String string2) {
            view.setTransitionName(string2);
        }

        @Override
        public aa b(View object, aa aa2) {
            aa2 = (WindowInsets)aa.a(aa2);
            WindowInsets windowInsets = object.dispatchApplyWindowInsets((WindowInsets)aa2);
            object = aa2;
            if (windowInsets != aa2) {
                object = new WindowInsets(windowInsets);
            }
            return aa.a(object);
        }

        @Override
        public void b(View view, int n2) {
            boolean bl2;
            Rect rect = f.b();
            ViewParent viewParent = view.getParent();
            if (viewParent instanceof View) {
                View view2 = (View)viewParent;
                rect.set(view2.getLeft(), view2.getTop(), view2.getRight(), view2.getBottom());
                bl2 = rect.intersects(view.getLeft(), view.getTop(), view.getRight(), view.getBottom()) ^ true;
            } else {
                bl2 = false;
            }
            super.b(view, n2);
            if (bl2 && rect.intersect(view.getLeft(), view.getTop(), view.getRight(), view.getBottom())) {
                ((View)viewParent).invalidate(rect);
            }
        }

        @Override
        public void c(View view, int n2) {
            boolean bl2;
            Rect rect = f.b();
            ViewParent viewParent = view.getParent();
            if (viewParent instanceof View) {
                View view2 = (View)viewParent;
                rect.set(view2.getLeft(), view2.getTop(), view2.getRight(), view2.getBottom());
                bl2 = rect.intersects(view.getLeft(), view.getTop(), view.getRight(), view.getBottom()) ^ true;
            } else {
                bl2 = false;
            }
            super.c(view, n2);
            if (bl2 && rect.intersect(view.getLeft(), view.getTop(), view.getRight(), view.getBottom())) {
                ((View)viewParent).invalidate(rect);
            }
        }

        @Override
        public void g(View view) {
            view.requestApplyInsets();
        }

        @Override
        public String s(View view) {
            return view.getTransitionName();
        }

        @Override
        public float t(View view) {
            return view.getElevation();
        }

        @Override
        public float u(View view) {
            return view.getTranslationZ();
        }

        @Override
        public boolean v(View view) {
            return view.isNestedScrollingEnabled();
        }

        @Override
        public void w(View view) {
            view.stopNestedScroll();
        }

        @Override
        public ColorStateList x(View view) {
            return view.getBackgroundTintList();
        }

        @Override
        public PorterDuff.Mode y(View view) {
            return view.getBackgroundTintMode();
        }

        @Override
        public float z(View view) {
            return view.getZ();
        }

    }

    static class g
    extends f {
        g() {
        }

        @Override
        public void a(View view, int n2, int n3) {
            view.setScrollIndicators(n2, n3);
        }

        @Override
        public void b(View view, int n2) {
            view.offsetLeftAndRight(n2);
        }

        @Override
        public void c(View view, int n2) {
            view.offsetTopAndBottom(n2);
        }
    }

    static class h
    extends g {
        h() {
        }

        @Override
        public void a(View view, q object) {
            object = object != null ? object.a() : null;
            view.setPointerIcon((PointerIcon)object);
        }
    }

    static class i
    extends h {
        i() {
        }
    }

    static class j {
        static Field b;
        static boolean c;
        private static Field d;
        private static boolean e;
        private static Field f;
        private static boolean g;
        private static WeakHashMap<View, String> h;
        private static final AtomicInteger i;
        WeakHashMap<View, w> a = null;

        static {
            i = new AtomicInteger(1);
            c = false;
        }

        j() {
        }

        private static void C(View view) {
            float f2 = view.getTranslationY();
            view.setTranslationY(1.0f + f2);
            view.setTranslationY(f2);
        }

        /*
         * Loose catch block
         * Enabled aggressive block sorting
         * Enabled unnecessary exception pruning
         * Enabled aggressive exception aggregation
         * Lifted jumps to return sites
         */
        public boolean A(View object) {
            boolean bl2 = c;
            boolean bl3 = false;
            if (bl2) {
                return false;
            }
            if (b == null) {
                b = View.class.getDeclaredField("mAccessibilityDelegate");
                b.setAccessible(true);
            }
            try {
                Object object2 = b.get(object);
                if (object2 == null) return bl3;
                return true;
            }
            catch (Throwable throwable) {}
            catch (Throwable throwable) {}
            c = true;
            return false;
            c = true;
            return false;
        }

        public w B(View view) {
            w w2;
            if (this.a == null) {
                this.a = new WeakHashMap();
            }
            w w3 = w2 = this.a.get((Object)view);
            if (w2 == null) {
                w3 = new w(view);
                this.a.put(view, w3);
            }
            return w3;
        }

        long a() {
            return ValueAnimator.getFrameDelay();
        }

        public aa a(View view, aa aa2) {
            return aa2;
        }

        public void a(View view, float f2) {
        }

        public void a(View view, int n2) {
        }

        public void a(View view, int n2, int n3) {
        }

        public void a(View view, int n2, int n3, int n4, int n5) {
            view.setPadding(n2, n3, n4, n5);
        }

        public void a(View view, ColorStateList colorStateList) {
            if (view instanceof r) {
                ((r)view).setSupportBackgroundTintList(colorStateList);
            }
        }

        public void a(View view, PorterDuff.Mode mode) {
            if (view instanceof r) {
                ((r)view).setSupportBackgroundTintMode(mode);
            }
        }

        public void a(View view, Rect rect) {
        }

        public void a(View view, Drawable drawable2) {
            view.setBackgroundDrawable(drawable2);
        }

        public void a(View view, android.support.v4.view.b b2) {
            b2 = b2 == null ? null : b2.a();
            view.setAccessibilityDelegate((View.AccessibilityDelegate)b2);
        }

        public void a(View view, o o2) {
        }

        public void a(View view, q q2) {
        }

        public void a(View view, Runnable runnable) {
            view.postDelayed(runnable, this.a());
        }

        public void a(View view, Runnable runnable, long l2) {
            view.postDelayed(runnable, this.a() + l2);
        }

        public void a(View view, String string2) {
            if (h == null) {
                h = new WeakHashMap();
            }
            h.put(view, string2);
        }

        public void a(View view, boolean bl2) {
        }

        public boolean a(View view) {
            return false;
        }

        public aa b(View view, aa aa2) {
            return aa2;
        }

        public void b(View view, int n2) {
            view.offsetLeftAndRight(n2);
            if (view.getVisibility() == 0) {
                j.C(view);
                view = view.getParent();
                if (view instanceof View) {
                    j.C(view);
                }
            }
        }

        public boolean b(View view) {
            return false;
        }

        public void c(View view) {
            view.postInvalidate();
        }

        public void c(View view, int n2) {
            view.offsetTopAndBottom(n2);
            if (view.getVisibility() == 0) {
                j.C(view);
                view = view.getParent();
                if (view instanceof View) {
                    j.C(view);
                }
            }
        }

        public int d(View view) {
            return 0;
        }

        /*
         * Enabled aggressive block sorting
         * Enabled unnecessary exception pruning
         * Enabled aggressive exception aggregation
         */
        public int e(View view) {
            if (!e) {
                try {
                    d = View.class.getDeclaredField("mMinWidth");
                    d.setAccessible(true);
                }
                catch (NoSuchFieldException noSuchFieldException) {}
                e = true;
            }
            if (d == null) return 0;
            try {
                return (Integer)d.get((Object)view);
            }
            catch (Exception exception) {
                return 0;
            }
        }

        /*
         * Enabled aggressive block sorting
         * Enabled unnecessary exception pruning
         * Enabled aggressive exception aggregation
         */
        public int f(View view) {
            if (!g) {
                try {
                    f = View.class.getDeclaredField("mMinHeight");
                    f.setAccessible(true);
                }
                catch (NoSuchFieldException noSuchFieldException) {}
                g = true;
            }
            if (f == null) return 0;
            try {
                return (Integer)f.get((Object)view);
            }
            catch (Exception exception) {
                return 0;
            }
        }

        public void g(View view) {
        }

        public boolean h(View view) {
            return false;
        }

        public boolean i(View view) {
            return true;
        }

        public int j(View view) {
            return 0;
        }

        public int k(View view) {
            return view.getPaddingLeft();
        }

        public int l(View view) {
            return view.getPaddingRight();
        }

        public int m(View view) {
            return 0;
        }

        public boolean n(View view) {
            return false;
        }

        public Display o(View view) {
            if (this.r(view)) {
                return ((WindowManager)view.getContext().getSystemService("window")).getDefaultDisplay();
            }
            return null;
        }

        public Rect p(View view) {
            return null;
        }

        public boolean q(View view) {
            if (view.getWidth() > 0 && view.getHeight() > 0) {
                return true;
            }
            return false;
        }

        public boolean r(View view) {
            if (view.getWindowToken() != null) {
                return true;
            }
            return false;
        }

        public String s(View view) {
            if (h == null) {
                return null;
            }
            return h.get((Object)view);
        }

        public float t(View view) {
            return 0.0f;
        }

        public float u(View view) {
            return 0.0f;
        }

        public boolean v(View view) {
            if (view instanceof android.support.v4.view.i) {
                return ((android.support.v4.view.i)view).isNestedScrollingEnabled();
            }
            return false;
        }

        public void w(View view) {
            if (view instanceof android.support.v4.view.i) {
                ((android.support.v4.view.i)view).stopNestedScroll();
            }
        }

        public ColorStateList x(View view) {
            if (view instanceof r) {
                return ((r)view).getSupportBackgroundTintList();
            }
            return null;
        }

        public PorterDuff.Mode y(View view) {
            if (view instanceof r) {
                return ((r)view).getSupportBackgroundTintMode();
            }
            return null;
        }

        public float z(View view) {
            return this.u(view) + this.t(view);
        }
    }

}

