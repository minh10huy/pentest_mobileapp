/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.content.Context
 *  android.content.res.Resources
 *  android.graphics.Rect
 *  android.util.AttributeSet
 *  android.util.DisplayMetrics
 *  android.view.KeyEvent
 *  android.view.LayoutInflater
 *  android.view.View
 *  android.view.View$OnAttachStateChangeListener
 *  android.view.View$OnKeyListener
 *  android.view.ViewGroup
 *  android.view.ViewTreeObserver
 *  android.view.ViewTreeObserver$OnGlobalLayoutListener
 *  android.widget.AdapterView
 *  android.widget.AdapterView$OnItemClickListener
 *  android.widget.FrameLayout
 *  android.widget.ListAdapter
 *  android.widget.ListView
 *  android.widget.PopupWindow
 *  android.widget.PopupWindow$OnDismissListener
 *  android.widget.TextView
 */
package android.support.v7.view.menu;

import android.content.Context;
import android.content.res.Resources;
import android.graphics.Rect;
import android.support.v7.a.a;
import android.support.v7.view.menu.g;
import android.support.v7.view.menu.h;
import android.support.v7.view.menu.m;
import android.support.v7.view.menu.n;
import android.support.v7.view.menu.o;
import android.support.v7.view.menu.u;
import android.support.v7.widget.ar;
import android.util.AttributeSet;
import android.util.DisplayMetrics;
import android.view.KeyEvent;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.view.ViewTreeObserver;
import android.widget.AdapterView;
import android.widget.FrameLayout;
import android.widget.ListAdapter;
import android.widget.ListView;
import android.widget.PopupWindow;
import android.widget.TextView;

final class t
extends m
implements o,
View.OnKeyListener,
AdapterView.OnItemClickListener,
PopupWindow.OnDismissListener {
    final ar a;
    View b;
    private final Context c;
    private final h d;
    private final g e;
    private final boolean f;
    private final int g;
    private final int h;
    private final int i;
    private final ViewTreeObserver.OnGlobalLayoutListener j = new ViewTreeObserver.OnGlobalLayoutListener(){

        public void onGlobalLayout() {
            if (t.this.d() && !t.this.a.g()) {
                View view = t.this.b;
                if (view != null && view.isShown()) {
                    t.this.a.a();
                    return;
                }
                t.this.c();
            }
        }
    };
    private final View.OnAttachStateChangeListener k = new View.OnAttachStateChangeListener(){

        public void onViewAttachedToWindow(View view) {
        }

        public void onViewDetachedFromWindow(View view) {
            if (t.this.o != null) {
                if (!t.this.o.isAlive()) {
                    t.this.o = view.getViewTreeObserver();
                }
                t.this.o.removeGlobalOnLayoutListener(t.this.j);
            }
            view.removeOnAttachStateChangeListener((View.OnAttachStateChangeListener)this);
        }
    };
    private PopupWindow.OnDismissListener l;
    private View m;
    private o.a n;
    private ViewTreeObserver o;
    private boolean p;
    private boolean q;
    private int r;
    private int s = 0;
    private boolean t;

    public t(Context context, h h2, View view, int n2, int n3, boolean bl2) {
        this.c = context;
        this.d = h2;
        this.f = bl2;
        this.e = new g(h2, LayoutInflater.from((Context)context), this.f);
        this.h = n2;
        this.i = n3;
        Resources resources = context.getResources();
        this.g = Math.max(resources.getDisplayMetrics().widthPixels / 2, resources.getDimensionPixelSize(a.d.abc_config_prefDialogWidth));
        this.m = view;
        this.a = new ar(this.c, null, this.h, this.i);
        h2.a(this, context);
    }

    private boolean h() {
        if (this.d()) {
            return true;
        }
        if (!this.p) {
            if (this.m == null) {
                return false;
            }
            this.b = this.m;
            this.a.a(this);
            this.a.a(this);
            this.a.a(true);
            View view = this.b;
            boolean bl2 = this.o == null;
            this.o = view.getViewTreeObserver();
            if (bl2) {
                this.o.addOnGlobalLayoutListener(this.j);
            }
            view.addOnAttachStateChangeListener(this.k);
            this.a.b(view);
            this.a.e(this.s);
            if (!this.q) {
                this.r = t.a((ListAdapter)this.e, null, this.c, this.g);
                this.q = true;
            }
            this.a.g(this.r);
            this.a.h(2);
            this.a.a(this.g());
            this.a.a();
            view = this.a.e();
            view.setOnKeyListener((View.OnKeyListener)this);
            if (this.t && this.d.m() != null) {
                FrameLayout frameLayout = (FrameLayout)LayoutInflater.from((Context)this.c).inflate(a.g.abc_popup_menu_header_item_layout, (ViewGroup)view, false);
                TextView textView = (TextView)frameLayout.findViewById(16908310);
                if (textView != null) {
                    textView.setText(this.d.m());
                }
                frameLayout.setEnabled(false);
                view.addHeaderView((View)frameLayout, null, false);
            }
            this.a.a((ListAdapter)this.e);
            this.a.a();
            return true;
        }
        return false;
    }

    @Override
    public void a() {
        if (this.h()) {
            return;
        }
        throw new IllegalStateException("StandardMenuPopup cannot be used without an anchor");
    }

    @Override
    public void a(int n2) {
        this.s = n2;
    }

    @Override
    public void a(h h2) {
    }

    @Override
    public void a(h h2, boolean bl2) {
        if (h2 != this.d) {
            return;
        }
        this.c();
        if (this.n != null) {
            this.n.a(h2, bl2);
        }
    }

    @Override
    public void a(o.a a2) {
        this.n = a2;
    }

    @Override
    public void a(View view) {
        this.m = view;
    }

    @Override
    public void a(PopupWindow.OnDismissListener onDismissListener) {
        this.l = onDismissListener;
    }

    @Override
    public void a(boolean bl2) {
        this.e.a(bl2);
    }

    @Override
    public boolean a(u u2) {
        if (u2.hasVisibleItems()) {
            n n2 = new n(this.c, u2, this.b, this.f, this.h, this.i);
            n2.a(this.n);
            n2.a(m.b(u2));
            n2.a(this.s);
            n2.a(this.l);
            this.l = null;
            this.d.a(false);
            if (n2.a(this.a.j(), this.a.k())) {
                if (this.n != null) {
                    this.n.a(u2);
                }
                return true;
            }
        }
        return false;
    }

    @Override
    public void b(int n2) {
        this.a.c(n2);
    }

    @Override
    public void b(boolean bl2) {
        this.q = false;
        if (this.e != null) {
            this.e.notifyDataSetChanged();
        }
    }

    @Override
    public boolean b() {
        return false;
    }

    @Override
    public void c() {
        if (this.d()) {
            this.a.c();
        }
    }

    @Override
    public void c(int n2) {
        this.a.d(n2);
    }

    @Override
    public void c(boolean bl2) {
        this.t = bl2;
    }

    @Override
    public boolean d() {
        if (!this.p && this.a.d()) {
            return true;
        }
        return false;
    }

    @Override
    public ListView e() {
        return this.a.e();
    }

    public void onDismiss() {
        this.p = true;
        this.d.close();
        if (this.o != null) {
            if (!this.o.isAlive()) {
                this.o = this.b.getViewTreeObserver();
            }
            this.o.removeGlobalOnLayoutListener(this.j);
            this.o = null;
        }
        this.b.removeOnAttachStateChangeListener(this.k);
        if (this.l != null) {
            this.l.onDismiss();
        }
    }

    public boolean onKey(View view, int n2, KeyEvent keyEvent) {
        if (keyEvent.getAction() == 1 && n2 == 82) {
            this.c();
            return true;
        }
        return false;
    }

}

