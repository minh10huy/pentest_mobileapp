/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.content.Context
 *  android.media.MediaRouter
 *  android.media.MediaRouter$Callback
 *  android.media.MediaRouter$RouteCategory
 *  android.media.MediaRouter$RouteGroup
 *  android.media.MediaRouter$RouteInfo
 *  android.media.MediaRouter$UserRouteInfo
 *  android.media.MediaRouter$VolumeCallback
 *  android.media.RemoteControlClient
 *  android.os.Build
 *  android.os.Build$VERSION
 *  android.util.Log
 */
package android.support.v7.d;

import android.content.Context;
import android.media.MediaRouter;
import android.media.RemoteControlClient;
import android.os.Build;
import android.util.Log;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.List;

final class i {
    public static Object a(Context context) {
        return context.getSystemService("media_router");
    }

    public static Object a(a a2) {
        return new b<a>(a2);
    }

    public static Object a(g g2) {
        return new h<g>(g2);
    }

    public static Object a(Object object, int n2) {
        return ((MediaRouter)object).getSelectedRoute(n2);
    }

    public static Object a(Object object, String string2, boolean bl2) {
        return ((MediaRouter)object).createRouteCategory((CharSequence)string2, bl2);
    }

    public static List a(Object object) {
        object = (MediaRouter)object;
        int n2 = object.getRouteCount();
        ArrayList<MediaRouter.RouteInfo> arrayList = new ArrayList<MediaRouter.RouteInfo>(n2);
        for (int i2 = 0; i2 < n2; ++i2) {
            arrayList.add(object.getRouteAt(i2));
        }
        return arrayList;
    }

    public static void a(Object object, int n2, Object object2) {
        ((MediaRouter)object).selectRoute(n2, (MediaRouter.RouteInfo)object2);
    }

    public static void a(Object object, Object object2) {
        ((MediaRouter)object).removeCallback((MediaRouter.Callback)object2);
    }

    public static Object b(Object object, Object object2) {
        return ((MediaRouter)object).createUserRoute((MediaRouter.RouteCategory)object2);
    }

    public static void b(Object object, int n2, Object object2) {
        ((MediaRouter)object).addCallback(n2, (MediaRouter.Callback)object2);
    }

    public static void c(Object object, Object object2) {
        ((MediaRouter)object).addUserRoute((MediaRouter.UserRouteInfo)object2);
    }

    public static void d(Object object, Object object2) {
        ((MediaRouter)object).removeUserRoute((MediaRouter.UserRouteInfo)object2);
    }

    public static interface a {
        public void a(int var1, Object var2);

        public void a(Object var1);

        public void a(Object var1, Object var2);

        public void a(Object var1, Object var2, int var3);

        public void b(int var1, Object var2);

        public void b(Object var1);

        public void c(Object var1);

        public void d(Object var1);
    }

    static class b<T extends a>
    extends MediaRouter.Callback {
        protected final T a;

        public b(T t2) {
            this.a = t2;
        }

        public void onRouteAdded(MediaRouter mediaRouter, MediaRouter.RouteInfo routeInfo) {
            this.a.a((Object)routeInfo);
        }

        public void onRouteChanged(MediaRouter mediaRouter, MediaRouter.RouteInfo routeInfo) {
            this.a.c((Object)routeInfo);
        }

        public void onRouteGrouped(MediaRouter mediaRouter, MediaRouter.RouteInfo routeInfo, MediaRouter.RouteGroup routeGroup, int n2) {
            this.a.a((Object)routeInfo, (Object)routeGroup, n2);
        }

        public void onRouteRemoved(MediaRouter mediaRouter, MediaRouter.RouteInfo routeInfo) {
            this.a.b((Object)routeInfo);
        }

        public void onRouteSelected(MediaRouter mediaRouter, int n2, MediaRouter.RouteInfo routeInfo) {
            this.a.a(n2, (Object)routeInfo);
        }

        public void onRouteUngrouped(MediaRouter mediaRouter, MediaRouter.RouteInfo routeInfo, MediaRouter.RouteGroup routeGroup) {
            this.a.a((Object)routeInfo, (Object)routeGroup);
        }

        public void onRouteUnselected(MediaRouter mediaRouter, int n2, MediaRouter.RouteInfo routeInfo) {
            this.a.b(n2, (Object)routeInfo);
        }

        public void onRouteVolumeChanged(MediaRouter mediaRouter, MediaRouter.RouteInfo routeInfo) {
            this.a.d((Object)routeInfo);
        }
    }

    public static final class c {
        private Method a;

        /*
         * Enabled force condition propagation
         * Lifted jumps to return sites
         */
        public c() {
            if (Build.VERSION.SDK_INT < 16 || Build.VERSION.SDK_INT > 17) throw new UnsupportedOperationException();
            try {
                this.a = MediaRouter.class.getMethod("getSystemAudioRoute", new Class[0]);
                return;
            }
            catch (NoSuchMethodException noSuchMethodException) {
                return;
            }
        }

        /*
         * Enabled force condition propagation
         * Lifted jumps to return sites
         */
        public Object a(Object object) {
            object = (MediaRouter)object;
            if (this.a == null) return object.getRouteAt(0);
            try {
                return this.a.invoke(object, new Object[0]);
            }
            catch (IllegalAccessException | InvocationTargetException reflectiveOperationException) {
                return object.getRouteAt(0);
            }
        }
    }

    public static final class d {
        public static int a(Object object) {
            return ((MediaRouter.RouteInfo)object).getSupportedTypes();
        }

        public static CharSequence a(Object object, Context context) {
            return ((MediaRouter.RouteInfo)object).getName(context);
        }

        public static void a(Object object, int n2) {
            ((MediaRouter.RouteInfo)object).requestSetVolume(n2);
        }

        public static void a(Object object, Object object2) {
            ((MediaRouter.RouteInfo)object).setTag(object2);
        }

        public static int b(Object object) {
            return ((MediaRouter.RouteInfo)object).getPlaybackType();
        }

        public static void b(Object object, int n2) {
            ((MediaRouter.RouteInfo)object).requestUpdateVolume(n2);
        }

        public static int c(Object object) {
            return ((MediaRouter.RouteInfo)object).getPlaybackStream();
        }

        public static int d(Object object) {
            return ((MediaRouter.RouteInfo)object).getVolume();
        }

        public static int e(Object object) {
            return ((MediaRouter.RouteInfo)object).getVolumeMax();
        }

        public static int f(Object object) {
            return ((MediaRouter.RouteInfo)object).getVolumeHandling();
        }

        public static Object g(Object object) {
            return ((MediaRouter.RouteInfo)object).getTag();
        }
    }

    public static final class e {
        private Method a;

        /*
         * Enabled force condition propagation
         * Lifted jumps to return sites
         */
        public e() {
            if (Build.VERSION.SDK_INT < 16 || Build.VERSION.SDK_INT > 17) throw new UnsupportedOperationException();
            try {
                this.a = MediaRouter.class.getMethod("selectRouteInt", Integer.TYPE, MediaRouter.RouteInfo.class);
                return;
            }
            catch (NoSuchMethodException noSuchMethodException) {
                return;
            }
        }

        public void a(Object object, int n2, Object object2) {
            object = (MediaRouter)object;
            if (((object2 = (MediaRouter.RouteInfo)object2).getSupportedTypes() & 8388608) == 0) {
                if (this.a != null) {
                    try {
                        this.a.invoke(object, n2, object2);
                        return;
                    }
                    catch (IllegalAccessException | InvocationTargetException reflectiveOperationException) {
                        Log.w((String)"MediaRouterJellybean", (String)"Cannot programmatically select non-user route.  Media routing may not work.", (Throwable)reflectiveOperationException);
                    }
                } else {
                    Log.w((String)"MediaRouterJellybean", (String)"Cannot programmatically select non-user route because the platform is missing the selectRouteInt() method.  Media routing may not work.");
                }
            }
            object.selectRoute(n2, (MediaRouter.RouteInfo)object2);
        }
    }

    public static final class f {
        public static void a(Object object, int n2) {
            ((MediaRouter.UserRouteInfo)object).setPlaybackType(n2);
        }

        public static void a(Object object, CharSequence charSequence) {
            ((MediaRouter.UserRouteInfo)object).setName(charSequence);
        }

        public static void a(Object object, Object object2) {
            ((MediaRouter.UserRouteInfo)object).setVolumeCallback((MediaRouter.VolumeCallback)object2);
        }

        public static void b(Object object, int n2) {
            ((MediaRouter.UserRouteInfo)object).setPlaybackStream(n2);
        }

        public static void b(Object object, Object object2) {
            ((MediaRouter.UserRouteInfo)object).setRemoteControlClient((RemoteControlClient)object2);
        }

        public static void c(Object object, int n2) {
            ((MediaRouter.UserRouteInfo)object).setVolume(n2);
        }

        public static void d(Object object, int n2) {
            ((MediaRouter.UserRouteInfo)object).setVolumeMax(n2);
        }

        public static void e(Object object, int n2) {
            ((MediaRouter.UserRouteInfo)object).setVolumeHandling(n2);
        }
    }

    public static interface g {
        public void a(Object var1, int var2);

        public void b(Object var1, int var2);
    }

    static class h<T extends g>
    extends MediaRouter.VolumeCallback {
        protected final T a;

        public h(T t2) {
            this.a = t2;
        }

        public void onVolumeSetRequest(MediaRouter.RouteInfo routeInfo, int n2) {
            this.a.a((Object)routeInfo, n2);
        }

        public void onVolumeUpdateRequest(MediaRouter.RouteInfo routeInfo, int n2) {
            this.a.b((Object)routeInfo, n2);
        }
    }

}

