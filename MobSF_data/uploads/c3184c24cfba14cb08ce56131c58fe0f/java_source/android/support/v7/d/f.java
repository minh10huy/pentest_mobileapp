/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.content.IntentFilter
 *  android.os.Bundle
 */
package android.support.v7.d;

import android.content.IntentFilter;
import android.os.Bundle;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;

public final class f {
    public static final f b = new f(new Bundle(), null);
    List<String> a;
    private final Bundle c;

    f(Bundle bundle, List<String> list) {
        this.c = bundle;
        this.a = list;
    }

    public static f a(Bundle bundle) {
        f f2 = null;
        if (bundle != null) {
            f2 = new f(bundle, null);
        }
        return f2;
    }

    public List<String> a() {
        this.b();
        return this.a;
    }

    public boolean a(f f2) {
        if (f2 != null) {
            this.b();
            f2.b();
            return this.a.containsAll(f2.a);
        }
        return false;
    }

    public boolean a(List<IntentFilter> list) {
        if (list != null) {
            this.b();
            int n2 = this.a.size();
            if (n2 != 0) {
                int n3 = list.size();
                for (int i2 = 0; i2 < n3; ++i2) {
                    IntentFilter intentFilter = list.get(i2);
                    if (intentFilter == null) continue;
                    for (int i3 = 0; i3 < n2; ++i3) {
                        if (!intentFilter.hasCategory(this.a.get(i3))) continue;
                        return true;
                    }
                }
            }
        }
        return false;
    }

    void b() {
        if (this.a == null) {
            this.a = this.c.getStringArrayList("controlCategories");
            if (this.a == null || this.a.isEmpty()) {
                this.a = Collections.emptyList();
            }
        }
    }

    public boolean c() {
        this.b();
        return this.a.isEmpty();
    }

    public boolean d() {
        this.b();
        if (this.a.contains(null)) {
            return false;
        }
        return true;
    }

    public Bundle e() {
        return this.c;
    }

    public boolean equals(Object object) {
        if (object instanceof f) {
            object = (f)object;
            this.b();
            object.b();
            return this.a.equals(object.a);
        }
        return false;
    }

    public int hashCode() {
        this.b();
        return this.a.hashCode();
    }

    public String toString() {
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("MediaRouteSelector{ ");
        stringBuilder.append("controlCategories=");
        stringBuilder.append(Arrays.toString(this.a().toArray()));
        stringBuilder.append(" }");
        return stringBuilder.toString();
    }

    public static final class a {
        private ArrayList<String> a;

        public a() {
        }

        public a(f f2) {
            if (f2 != null) {
                f2.b();
                if (!f2.a.isEmpty()) {
                    this.a = new ArrayList<String>(f2.a);
                }
                return;
            }
            throw new IllegalArgumentException("selector must not be null");
        }

        public a a(f f2) {
            if (f2 != null) {
                this.a(f2.a());
                return this;
            }
            throw new IllegalArgumentException("selector must not be null");
        }

        public a a(String string2) {
            if (string2 != null) {
                if (this.a == null) {
                    this.a = new ArrayList();
                }
                if (!this.a.contains(string2)) {
                    this.a.add(string2);
                }
                return this;
            }
            throw new IllegalArgumentException("category must not be null");
        }

        public a a(Collection<String> object) {
            if (object != null) {
                if (!object.isEmpty()) {
                    object = object.iterator();
                    while (object.hasNext()) {
                        this.a((String)object.next());
                    }
                }
                return this;
            }
            throw new IllegalArgumentException("categories must not be null");
        }

        public f a() {
            if (this.a == null) {
                return f.b;
            }
            Bundle bundle = new Bundle();
            bundle.putStringArrayList("controlCategories", this.a);
            return new f(bundle, this.a);
        }
    }

}

