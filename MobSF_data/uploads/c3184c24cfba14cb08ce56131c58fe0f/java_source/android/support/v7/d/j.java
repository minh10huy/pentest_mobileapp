/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.content.Context
 *  android.hardware.display.DisplayManager
 *  android.media.MediaRouter
 *  android.media.MediaRouter$RouteInfo
 *  android.os.Build
 *  android.os.Build$VERSION
 *  android.os.Handler
 *  android.util.Log
 *  android.view.Display
 */
package android.support.v7.d;

import android.content.Context;
import android.hardware.display.DisplayManager;
import android.media.MediaRouter;
import android.os.Build;
import android.os.Handler;
import android.support.v7.d.i;
import android.util.Log;
import android.view.Display;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

final class j {
    public static Object a(b b2) {
        return new c<b>(b2);
    }

    public static final class a
    implements Runnable {
        private final DisplayManager a;
        private final Handler b;
        private Method c;
        private boolean d;

        /*
         * Enabled force condition propagation
         * Lifted jumps to return sites
         */
        public a(Context context, Handler handler) {
            if (Build.VERSION.SDK_INT != 17) throw new UnsupportedOperationException();
            this.a = (DisplayManager)context.getSystemService("display");
            this.b = handler;
            try {
                this.c = DisplayManager.class.getMethod("scanWifiDisplays", new Class[0]);
                return;
            }
            catch (NoSuchMethodException noSuchMethodException) {
                return;
            }
        }

        public void a(int n2) {
            if ((n2 & 2) != 0) {
                if (!this.d) {
                    if (this.c != null) {
                        this.d = true;
                        this.b.post((Runnable)this);
                        return;
                    }
                    Log.w((String)"MediaRouterJellybeanMr1", (String)"Cannot scan for wifi displays because the DisplayManager.scanWifiDisplays() method is not available on this device.");
                    return;
                }
            } else if (this.d) {
                this.d = false;
                this.b.removeCallbacks((Runnable)this);
            }
        }

        @Override
        public void run() {
            if (this.d) {
                try {
                    this.c.invoke((Object)this.a, new Object[0]);
                }
                catch (IllegalAccessException | InvocationTargetException reflectiveOperationException) {
                    Log.w((String)"MediaRouterJellybeanMr1", (String)"Cannot scan for wifi displays.", (Throwable)reflectiveOperationException);
                }
                this.b.postDelayed((Runnable)this, 15000L);
            }
        }
    }

    public static interface b
    extends i.a {
        public void e(Object var1);
    }

    static class c<T extends b>
    extends i.b<T> {
        public c(T t2) {
            super(t2);
        }

        public void onRoutePresentationDisplayChanged(MediaRouter mediaRouter, MediaRouter.RouteInfo routeInfo) {
            ((b)this.a).e((Object)routeInfo);
        }
    }

    public static final class d {
        private Method a;
        private int b;

        /*
         * Enabled force condition propagation
         * Lifted jumps to return sites
         */
        public d() {
            if (Build.VERSION.SDK_INT != 17) throw new UnsupportedOperationException();
            try {
                this.b = MediaRouter.RouteInfo.class.getField("STATUS_CONNECTING").getInt(null);
                this.a = MediaRouter.RouteInfo.class.getMethod("getStatusCode", new Class[0]);
                return;
            }
            catch (IllegalAccessException | NoSuchFieldException | NoSuchMethodException reflectiveOperationException) {
                return;
            }
        }

        /*
         * Enabled force condition propagation
         * Lifted jumps to return sites
         */
        public boolean a(Object object) {
            boolean bl3;
            object = (MediaRouter.RouteInfo)object;
            Method method = this.a;
            boolean bl2 = bl3 = false;
            if (method == null) return bl2;
            try {
                int n2 = (Integer)this.a.invoke(object, new Object[0]);
                int n3 = this.b;
                bl2 = bl3;
                if (n2 != n3) return bl2;
                return true;
            }
            catch (IllegalAccessException | InvocationTargetException reflectiveOperationException) {
                return false;
            }
        }
    }

    public static final class e {
        public static boolean a(Object object) {
            return ((MediaRouter.RouteInfo)object).isEnabled();
        }

        public static Display b(Object object) {
            try {
                object = ((MediaRouter.RouteInfo)object).getPresentationDisplay();
                return object;
            }
            catch (NoSuchMethodError noSuchMethodError) {
                Log.w((String)"MediaRouterJellybeanMr1", (String)"Cannot get presentation display for the route.", (Throwable)noSuchMethodError);
                return null;
            }
        }
    }

}

