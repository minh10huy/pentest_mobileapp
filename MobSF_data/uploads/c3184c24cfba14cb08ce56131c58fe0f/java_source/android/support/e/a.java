/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.content.Context
 *  android.content.pm.ApplicationInfo
 *  android.os.Build
 *  android.os.Build$VERSION
 *  android.util.Log
 *  dalvik.system.DexFile
 */
package android.support.e;

import android.content.Context;
import android.content.pm.ApplicationInfo;
import android.os.Build;
import android.util.Log;
import dalvik.system.DexFile;
import java.io.File;
import java.io.IOException;
import java.io.Serializable;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.ListIterator;
import java.util.Set;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.zip.ZipFile;

public final class a {
    private static final Set<File> a = new HashSet<File>();
    private static final boolean b = a.a(System.getProperty("java.vm.version"));

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    private static File a(Context object, File file, String string2) {
        void var0_3;
        void var2_7;
        block2 : {
            File file2;
            file2 = new File(file2, "code_cache");
            try {
                a.a(file2);
                File file3 = file2;
                break block2;
            }
            catch (IOException iOException) {}
            File file4 = new File(object.getFilesDir(), "code_cache");
            a.a(file4);
        }
        File file5 = new File((File)var0_3, (String)var2_7);
        a.a(file5);
        return file5;
    }

    /*
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    public static void a(Context object) {
        Log.i((String)"MultiDex", (String)"Installing application");
        if (b) {
            object = "VM has multidex support, MultiDex support library is disabled.";
        } else {
            if (Build.VERSION.SDK_INT < 4) {
                object = new StringBuilder();
                object.append("MultiDex installation failed. SDK ");
                object.append(Build.VERSION.SDK_INT);
                object.append(" is unsupported. Min SDK version is ");
                object.append(4);
                object.append(".");
                throw new RuntimeException(object.toString());
            }
            ApplicationInfo applicationInfo = a.b((Context)object);
            if (applicationInfo == null) {
                Log.i((String)"MultiDex", (String)"No ApplicationInfo available, i.e. running on a test Context: MultiDex support library is disabled.");
                return;
            }
            a.a((Context)object, new File(applicationInfo.sourceDir), new File(applicationInfo.dataDir), "secondary-dexes", "", true);
            object = "install done";
        }
        Log.i((String)"MultiDex", (String)object);
        return;
        catch (Exception exception) {
            Log.e((String)"MultiDex", (String)"MultiDex installation failure", (Throwable)exception);
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("MultiDex installation failed (");
            stringBuilder.append(exception.getMessage());
            stringBuilder.append(").");
            throw new RuntimeException(stringBuilder.toString());
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    private static void a(Context object, File file, File file2, String object2, String string2, boolean bl2) {
        Set<File> set = a;
        synchronized (set) {
            Object object3;
            block21 : {
                if (a.contains(file)) {
                    return;
                }
                a.add(file);
                if (Build.VERSION.SDK_INT > 20) {
                    object3 = new StringBuilder();
                    object3.append("MultiDex is not guaranteed to work in SDK version ");
                    object3.append(Build.VERSION.SDK_INT);
                    object3.append(": SDK version higher than ");
                    object3.append(20);
                    object3.append(" should be backed by ");
                    object3.append("runtime with built-in multidex capabilty but it's not the ");
                    object3.append("case here: java.vm.version=\"");
                    object3.append(System.getProperty("java.vm.version"));
                    object3.append("\"");
                    Log.w((String)"MultiDex", (String)object3.toString());
                }
                try {
                    object3 = object.getClassLoader();
                    if (object3 != null) break block21;
                }
                catch (RuntimeException runtimeException) {
                    Log.w((String)"MultiDex", (String)"Failure while trying to obtain Context class loader. Must be running in test mode. Skip patching.", (Throwable)runtimeException);
                    return;
                }
                Log.e((String)"MultiDex", (String)"Context class loader is null. Must be running in test mode. Skip patching.");
                return;
            }
            try {
                a.c(object);
            }
            catch (Throwable throwable) {
                Log.w((String)"MultiDex", (String)"Something went wrong when trying to clear old MultiDex extraction, continuing without cleaning.", (Throwable)throwable);
            }
            file2 = a.a(object, file2, (String)object2);
            object2 = new android.support.e.b(file, file2);
            file = null;
            try {
                IOException iOException2;
                block22 : {
                    List<? extends File> list = object2.a((Context)object, string2, false);
                    try {
                        a.a((ClassLoader)object3, file2, list);
                    }
                    catch (IOException iOException2) {
                        if (!bl2) break block22;
                        Log.w((String)"MultiDex", (String)"Failed to install extracted secondary dex files, retrying with forced extraction", (Throwable)iOException2);
                        a.a((ClassLoader)object3, file2, object2.a((Context)object, string2, true));
                    }
                    object = file;
                    if (object == null) {
                        return;
                    }
                    throw object;
                }
                throw iOException2;
            }
            finally {
                object2.close();
            }
        }
    }

    /*
     * Enabled aggressive block sorting
     */
    private static void a(File file) {
        file.mkdir();
        if (file.isDirectory()) {
            return;
        }
        Object object = file.getParentFile();
        if (object == null) {
            object = new StringBuilder();
            object.append("Failed to create dir ");
            object.append(file.getPath());
            object.append(". Parent file is null.");
            object = object.toString();
        } else {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("Failed to create dir ");
            stringBuilder.append(file.getPath());
            stringBuilder.append(". parent file is a dir ");
            stringBuilder.append(object.isDirectory());
            stringBuilder.append(", a file ");
            stringBuilder.append(object.isFile());
            stringBuilder.append(", exists ");
            stringBuilder.append(object.exists());
            stringBuilder.append(", readable ");
            stringBuilder.append(object.canRead());
            stringBuilder.append(", writable ");
            stringBuilder.append(object.canWrite());
            object = stringBuilder.toString();
        }
        Log.e((String)"MultiDex", (String)object);
        object = new StringBuilder();
        object.append("Failed to create directory ");
        object.append(file.getPath());
        throw new IOException(object.toString());
    }

    private static void a(ClassLoader classLoader, File file, List<? extends File> list) {
        if (!list.isEmpty()) {
            if (Build.VERSION.SDK_INT >= 19) {
                b.a(classLoader, list, file);
                return;
            }
            if (Build.VERSION.SDK_INT >= 14) {
                a.a(classLoader, list);
                return;
            }
            c.a(classLoader, list);
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    static boolean a(String string2) {
        boolean bl2;
        Object object;
        block6 : {
            boolean bl3;
            bl2 = bl3 = false;
            if (string2 != null) {
                object = Pattern.compile("(\\d+)\\.(\\d+)(\\.\\d+)?").matcher(string2);
                bl2 = bl3;
                if (object.matches()) {
                    try {
                        int n2 = Integer.parseInt(object.group(1));
                        int n3 = Integer.parseInt(object.group(2));
                        if (n2 <= 2) {
                            bl2 = bl3;
                            if (n2 != 2) break block6;
                            bl2 = bl3;
                            if (n3 < 1) break block6;
                        }
                        bl2 = true;
                    }
                    catch (NumberFormatException numberFormatException) {
                        bl2 = bl3;
                    }
                }
            }
        }
        object = new StringBuilder();
        object.append("VM with version ");
        object.append(string2);
        string2 = bl2 ? " has multidex support" : " does not have multidex support";
        object.append(string2);
        Log.i((String)"MultiDex", (String)object.toString());
        return bl2;
    }

    private static ApplicationInfo b(Context context) {
        try {
            context = context.getApplicationInfo();
            return context;
        }
        catch (RuntimeException runtimeException) {
            Log.w((String)"MultiDex", (String)"Failure while trying to obtain ApplicationInfo from Context. Must be running in test mode. Skip patching.", (Throwable)runtimeException);
            return null;
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    private static Field b(Object object, String string2) {
        Serializable serializable = object.getClass();
        do {
            if (serializable == null) {
                serializable = new StringBuilder();
                serializable.append("Field ");
                serializable.append(string2);
                serializable.append(" not found in ");
                serializable.append(object.getClass());
                throw new NoSuchFieldException(serializable.toString());
            }
            try {
                Field field = serializable.getDeclaredField(string2);
                if (!field.isAccessible()) {
                    field.setAccessible(true);
                }
                return field;
            }
            catch (NoSuchFieldException noSuchFieldException) {}
            serializable = serializable.getSuperclass();
        } while (true);
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    private static /* varargs */ Method b(Object object, String string2, Class<?> ... arrclass) {
        Serializable serializable = object.getClass();
        do {
            if (serializable == null) {
                serializable = new StringBuilder();
                serializable.append("Method ");
                serializable.append(string2);
                serializable.append(" with parameters ");
                serializable.append(Arrays.asList(arrclass));
                serializable.append(" not found in ");
                serializable.append(object.getClass());
                throw new NoSuchMethodException(serializable.toString());
            }
            try {
                Method method = serializable.getDeclaredMethod(string2, arrclass);
                if (!method.isAccessible()) {
                    method.setAccessible(true);
                }
                return method;
            }
            catch (NoSuchMethodException noSuchMethodException) {}
            serializable = serializable.getSuperclass();
        } while (true);
    }

    private static void b(Object object, String object2, Object[] arrobject) {
        object2 = a.b(object, (String)object2);
        Object[] arrobject2 = (Object[])object2.get(object);
        Object[] arrobject3 = (Object[])Array.newInstance(arrobject2.getClass().getComponentType(), arrobject2.length + arrobject.length);
        System.arraycopy(arrobject2, 0, arrobject3, 0, arrobject2.length);
        System.arraycopy(arrobject, 0, arrobject3, arrobject2.length, arrobject.length);
        object2.set(object, arrobject3);
    }

    private static void c(Context object) {
        if ((object = new File(object.getFilesDir(), "secondary-dexes")).isDirectory()) {
            Object object2 = new File[]();
            object2.append("Clearing old secondary dex dir (");
            object2.append(object.getPath());
            object2.append(").");
            Log.i((String)"MultiDex", (String)object2.toString());
            object2 = object.listFiles();
            if (object2 == null) {
                object2 = new StringBuilder();
                object2.append("Failed to list secondary dex dir content (");
                object2.append(object.getPath());
                object2.append(").");
                Log.w((String)"MultiDex", (String)object2.toString());
                return;
            }
            for (Object object3 : object2) {
                StringBuilder stringBuilder = new StringBuilder();
                stringBuilder.append("Trying to delete old file ");
                stringBuilder.append(object3.getPath());
                stringBuilder.append(" of size ");
                stringBuilder.append(object3.length());
                Log.i((String)"MultiDex", (String)stringBuilder.toString());
                if (!object3.delete()) {
                    stringBuilder = new StringBuilder();
                    stringBuilder.append("Failed to delete old file ");
                    stringBuilder.append(object3.getPath());
                    Log.w((String)"MultiDex", (String)stringBuilder.toString());
                    continue;
                }
                stringBuilder = new StringBuilder();
                stringBuilder.append("Deleted old file ");
                stringBuilder.append(object3.getPath());
                Log.i((String)"MultiDex", (String)stringBuilder.toString());
            }
            if (!object.delete()) {
                object2 = new StringBuilder();
                object2.append("Failed to delete secondary dex dir ");
                object2.append(object.getPath());
                Log.w((String)"MultiDex", (String)object2.toString());
                return;
            }
            object2 = new StringBuilder();
            object2.append("Deleted old secondary dex dir ");
            object2.append(object.getPath());
            Log.i((String)"MultiDex", (String)object2.toString());
        }
    }

    private static final class android.support.e.a$a {
        private static final int a = ".zip".length();
        private final a b;

        /*
         * Enabled aggressive block sorting
         * Enabled unnecessary exception pruning
         * Enabled aggressive exception aggregation
         */
        private android.support.e.a$a() {
            void var1_7;
            block4 : {
                Class<?> class_ = Class.forName("dalvik.system.DexPathList$Element");
                try {
                    b b2 = new b(class_);
                    break block4;
                }
                catch (NoSuchMethodException noSuchMethodException) {}
                try {
                    c c2 = new c(class_);
                    break block4;
                }
                catch (NoSuchMethodException noSuchMethodException) {}
                d d2 = new d(class_);
            }
            this.b = var1_7;
        }

        private static String a(File object) {
            File file = object.getParentFile();
            object = object.getName();
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append(object.substring(0, object.length() - a));
            stringBuilder.append(".dex");
            return new File(file, stringBuilder.toString()).getPath();
        }

        static void a(ClassLoader object, List<? extends File> arrobject) {
            object = android.support.e.a.b(object, "pathList").get(object);
            arrobject = new android.support.e.a$a().a((List<? extends File>)arrobject);
            try {
                android.support.e.a.b(object, "dexElements", arrobject);
                return;
            }
            catch (NoSuchFieldException noSuchFieldException) {
                Log.w((String)"MultiDex", (String)"Failed find field 'dexElements' attempting 'pathElements'", (Throwable)noSuchFieldException);
                android.support.e.a.b(object, "pathElements", arrobject);
                return;
            }
        }

        private Object[] a(List<? extends File> list) {
            Object[] arrobject = new Object[list.size()];
            for (int i2 = 0; i2 < arrobject.length; ++i2) {
                File file = list.get(i2);
                arrobject[i2] = this.b.a(file, DexFile.loadDex((String)file.getPath(), (String)android.support.e.a$a.a(file), (int)0));
            }
            return arrobject;
        }

        private static interface a {
            public Object a(File var1, DexFile var2);
        }

        private static class b
        implements a {
            private final Constructor<?> a;

            b(Class<?> class_) {
                this.a = class_.getConstructor(File.class, ZipFile.class, DexFile.class);
                this.a.setAccessible(true);
            }

            @Override
            public Object a(File file, DexFile dexFile) {
                return this.a.newInstance(new Object[]{file, new ZipFile(file), dexFile});
            }
        }

        private static class c
        implements a {
            private final Constructor<?> a;

            c(Class<?> class_) {
                this.a = class_.getConstructor(File.class, File.class, DexFile.class);
                this.a.setAccessible(true);
            }

            @Override
            public Object a(File file, DexFile dexFile) {
                return this.a.newInstance(new Object[]{file, file, dexFile});
            }
        }

        private static class d
        implements a {
            private final Constructor<?> a;

            d(Class<?> class_) {
                this.a = class_.getConstructor(File.class, Boolean.TYPE, File.class, DexFile.class);
                this.a.setAccessible(true);
            }

            @Override
            public Object a(File file, DexFile dexFile) {
                return this.a.newInstance(new Object[]{file, Boolean.FALSE, file, dexFile});
            }
        }

    }

    private static final class b {
        static void a(ClassLoader object, List<? extends File> object2, File arriOException) {
            Object object3 = a.b(object, "pathList").get(object);
            ArrayList<IOException> arrayList = new ArrayList<IOException>();
            a.b(object3, "dexElements", b.a(object3, new ArrayList<File>((Collection<File>)object2), (File)arriOException, arrayList));
            if (arrayList.size() > 0) {
                object = arrayList.iterator();
                while (object.hasNext()) {
                    Log.w((String)"MultiDex", (String)"Exception in makeDexElement", (Throwable)((IOException)object.next()));
                }
                object2 = a.b(object3, "dexElementsSuppressedExceptions");
                arriOException = (IOException[])object2.get(object3);
                if (arriOException == null) {
                    object = arrayList.toArray(new IOException[arrayList.size()]);
                } else {
                    object = new IOException[arrayList.size() + arriOException.length];
                    arrayList.toArray((T[])object);
                    System.arraycopy(arriOException, 0, object, arrayList.size(), arriOException.length);
                }
                object2.set(object3, object);
                object = new IOException("I/O exception during makeDexElement");
                object.initCause(arrayList.get(0));
                throw object;
            }
        }

        private static Object[] a(Object object, ArrayList<File> arrayList, File file, ArrayList<IOException> arrayList2) {
            return (Object[])a.b(object, "makeDexElements", new Class[]{ArrayList.class, File.class, ArrayList.class}).invoke(object, arrayList, file, arrayList2);
        }
    }

    private static final class c {
        static void a(ClassLoader classLoader, List<? extends File> object) {
            int n2 = object.size();
            Field field = a.b(classLoader, "path");
            StringBuilder stringBuilder = new StringBuilder((String)field.get(classLoader));
            Object[] arrobject = new String[n2];
            Object[] arrobject2 = new File[n2];
            Object[] arrobject3 = new ZipFile[n2];
            Object[] arrobject4 = new DexFile[n2];
            object = object.listIterator();
            while (object.hasNext()) {
                Serializable serializable = (File)object.next();
                String string2 = serializable.getAbsolutePath();
                stringBuilder.append(':');
                stringBuilder.append(string2);
                n2 = object.previousIndex();
                arrobject[n2] = string2;
                arrobject2[n2] = serializable;
                arrobject3[n2] = new ZipFile((File)serializable);
                serializable = new StringBuilder();
                serializable.append(string2);
                serializable.append(".dex");
                arrobject4[n2] = DexFile.loadDex((String)string2, (String)serializable.toString(), (int)0);
            }
            field.set(classLoader, stringBuilder.toString());
            a.b((Object)classLoader, "mPaths", arrobject);
            a.b((Object)classLoader, "mFiles", arrobject2);
            a.b((Object)classLoader, "mZips", arrobject3);
            a.b((Object)classLoader, "mDexs", arrobject4);
        }
    }

}

