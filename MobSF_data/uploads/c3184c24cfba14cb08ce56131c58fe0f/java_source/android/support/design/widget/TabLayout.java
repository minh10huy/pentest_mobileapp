/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.animation.Animator
 *  android.animation.Animator$AnimatorListener
 *  android.animation.AnimatorListenerAdapter
 *  android.animation.TimeInterpolator
 *  android.animation.ValueAnimator
 *  android.animation.ValueAnimator$AnimatorUpdateListener
 *  android.content.Context
 *  android.content.res.ColorStateList
 *  android.content.res.Resources
 *  android.content.res.TypedArray
 *  android.database.DataSetObserver
 *  android.graphics.Canvas
 *  android.graphics.Paint
 *  android.graphics.drawable.Drawable
 *  android.os.Build
 *  android.os.Build$VERSION
 *  android.os.IBinder
 *  android.text.Layout
 *  android.text.TextPaint
 *  android.text.TextUtils
 *  android.util.AttributeSet
 *  android.util.DisplayMetrics
 *  android.view.LayoutInflater
 *  android.view.View
 *  android.view.View$MeasureSpec
 *  android.view.ViewGroup
 *  android.view.ViewGroup$LayoutParams
 *  android.view.ViewGroup$MarginLayoutParams
 *  android.view.ViewParent
 *  android.view.accessibility.AccessibilityEvent
 *  android.view.accessibility.AccessibilityNodeInfo
 *  android.view.animation.Interpolator
 *  android.widget.FrameLayout
 *  android.widget.FrameLayout$LayoutParams
 *  android.widget.HorizontalScrollView
 *  android.widget.ImageView
 *  android.widget.LinearLayout
 *  android.widget.LinearLayout$LayoutParams
 *  android.widget.TextView
 */
package android.support.design.widget;

import android.animation.Animator;
import android.animation.AnimatorListenerAdapter;
import android.animation.TimeInterpolator;
import android.animation.ValueAnimator;
import android.content.Context;
import android.content.res.ColorStateList;
import android.content.res.Resources;
import android.content.res.TypedArray;
import android.database.DataSetObserver;
import android.graphics.Canvas;
import android.graphics.Paint;
import android.graphics.drawable.Drawable;
import android.os.Build;
import android.os.IBinder;
import android.support.design.a;
import android.support.design.widget.l;
import android.support.design.widget.m;
import android.support.v4.g.k;
import android.support.v4.view.ViewPager;
import android.support.v4.view.p;
import android.support.v4.view.q;
import android.support.v4.view.s;
import android.support.v7.a.a;
import android.support.v7.app.a;
import android.support.v7.widget.bi;
import android.text.Layout;
import android.text.TextPaint;
import android.text.TextUtils;
import android.util.AttributeSet;
import android.util.DisplayMetrics;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.view.ViewParent;
import android.view.accessibility.AccessibilityEvent;
import android.view.accessibility.AccessibilityNodeInfo;
import android.view.animation.Interpolator;
import android.widget.FrameLayout;
import android.widget.HorizontalScrollView;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import java.lang.ref.WeakReference;
import java.util.ArrayList;
import java.util.Iterator;

@ViewPager.a
public class TabLayout
extends HorizontalScrollView {
    private static final k.a<e> n = new k.c<e>(16);
    private DataSetObserver A;
    private f B;
    private a C;
    private boolean D;
    private final k.a<g> E;
    int a;
    int b;
    int c;
    int d;
    int e;
    ColorStateList f;
    float g;
    float h;
    final int i;
    int j;
    int k;
    int l;
    ViewPager m;
    private final ArrayList<e> o;
    private e p;
    private final d q;
    private final int r;
    private final int s;
    private final int t;
    private int u;
    private b v;
    private final ArrayList<b> w;
    private b x;
    private ValueAnimator y;
    private p z;

    public TabLayout(Context context) {
        this(context, null);
    }

    public TabLayout(Context context, AttributeSet attributeSet) {
        this(context, attributeSet, 0);
    }

    public TabLayout(Context context, AttributeSet attributeSet, int n2) {
        block4 : {
            super(context, attributeSet, n2);
            this.o = new ArrayList();
            this.j = Integer.MAX_VALUE;
            this.w = new ArrayList();
            this.E = new k.b<g>(12);
            m.a(context);
            this.setHorizontalScrollBarEnabled(false);
            this.q = new d(context);
            super.addView((View)this.q, 0, (ViewGroup.LayoutParams)new FrameLayout.LayoutParams(-2, -1));
            attributeSet = context.obtainStyledAttributes(attributeSet, a.i.TabLayout, n2, a.h.Widget_Design_TabLayout);
            this.q.b(attributeSet.getDimensionPixelSize(a.i.TabLayout_tabIndicatorHeight, 0));
            this.q.a(attributeSet.getColor(a.i.TabLayout_tabIndicatorColor, 0));
            this.d = n2 = attributeSet.getDimensionPixelSize(a.i.TabLayout_tabPadding, 0);
            this.c = n2;
            this.b = n2;
            this.a = n2;
            this.a = attributeSet.getDimensionPixelSize(a.i.TabLayout_tabPaddingStart, this.a);
            this.b = attributeSet.getDimensionPixelSize(a.i.TabLayout_tabPaddingTop, this.b);
            this.c = attributeSet.getDimensionPixelSize(a.i.TabLayout_tabPaddingEnd, this.c);
            this.d = attributeSet.getDimensionPixelSize(a.i.TabLayout_tabPaddingBottom, this.d);
            this.e = attributeSet.getResourceId(a.i.TabLayout_tabTextAppearance, a.h.TextAppearance_Design_Tab);
            context = context.obtainStyledAttributes(this.e, a.j.TextAppearance);
            this.g = context.getDimensionPixelSize(a.j.TextAppearance_android_textSize, 0);
            this.f = context.getColorStateList(a.j.TextAppearance_android_textColor);
            if (!attributeSet.hasValue(a.i.TabLayout_tabTextColor)) break block4;
            this.f = attributeSet.getColorStateList(a.i.TabLayout_tabTextColor);
        }
        if (attributeSet.hasValue(a.i.TabLayout_tabSelectedTextColor)) {
            n2 = attributeSet.getColor(a.i.TabLayout_tabSelectedTextColor, 0);
            this.f = TabLayout.a(this.f.getDefaultColor(), n2);
        }
        this.r = attributeSet.getDimensionPixelSize(a.i.TabLayout_tabMinWidth, -1);
        this.s = attributeSet.getDimensionPixelSize(a.i.TabLayout_tabMaxWidth, -1);
        this.i = attributeSet.getResourceId(a.i.TabLayout_tabBackground, 0);
        this.u = attributeSet.getDimensionPixelSize(a.i.TabLayout_tabContentStart, 0);
        this.l = attributeSet.getInt(a.i.TabLayout_tabMode, 1);
        this.k = attributeSet.getInt(a.i.TabLayout_tabGravity, 0);
        attributeSet.recycle();
        context = this.getResources();
        this.h = context.getDimensionPixelSize(a.c.design_tab_text_size_2line);
        this.t = context.getDimensionPixelSize(a.c.design_tab_scrollable_min_width);
        this.g();
        return;
        finally {
            context.recycle();
        }
    }

    private int a(int n2, float f2) {
        int n3 = this.l;
        int n4 = 0;
        if (n3 == 0) {
            View view = this.q.getChildAt(n2);
            View view2 = ++n2 < this.q.getChildCount() ? this.q.getChildAt(n2) : null;
            n2 = view != null ? view.getWidth() : 0;
            if (view2 != null) {
                n4 = view2.getWidth();
            }
            n3 = view.getLeft() + n2 / 2 - this.getWidth() / 2;
            n2 = (int)((float)(n2 + n4) * 0.5f * f2);
            if (s.e((View)this) == 0) {
                return n3 + n2;
            }
            return n3 - n2;
        }
        return 0;
    }

    private static ColorStateList a(int n2, int n3) {
        return new ColorStateList((int[][])new int[][]{SELECTED_STATE_SET, EMPTY_STATE_SET}, new int[]{n3, n2});
    }

    private void a(e e2, int n2) {
        e2.b(n2);
        this.o.add(n2, e2);
        int n3 = this.o.size();
        while (++n2 < n3) {
            this.o.get(n2).b(n2);
        }
    }

    private void a(l l2) {
        e e2 = this.a();
        if (l2.a != null) {
            e2.a(l2.a);
        }
        if (l2.b != null) {
            e2.a(l2.b);
        }
        if (l2.c != 0) {
            e2.a(l2.c);
        }
        if (!TextUtils.isEmpty((CharSequence)l2.getContentDescription())) {
            e2.b(l2.getContentDescription());
        }
        this.a(e2);
    }

    private void a(ViewPager viewPager, boolean bl2, boolean bl3) {
        if (this.m != null) {
            if (this.B != null) {
                this.m.b(this.B);
            }
            if (this.C != null) {
                this.m.b(this.C);
            }
        }
        if (this.x != null) {
            this.b(this.x);
            this.x = null;
        }
        if (viewPager != null) {
            this.m = viewPager;
            if (this.B == null) {
                this.B = new f(this);
            }
            this.B.a();
            viewPager.a(this.B);
            this.x = new h(viewPager);
            this.a(this.x);
            p p2 = viewPager.getAdapter();
            if (p2 != null) {
                this.a(p2, bl2);
            }
            if (this.C == null) {
                this.C = new a();
            }
            this.C.a(bl2);
            viewPager.a(this.C);
            this.a(viewPager.getCurrentItem(), 0.0f, true);
        } else {
            this.m = null;
            this.a((p)null, false);
        }
        this.D = bl3;
    }

    private void a(View view) {
        if (view instanceof l) {
            this.a((l)view);
            return;
        }
        throw new IllegalArgumentException("Only TabItem instances can be added to TabLayout");
    }

    private void a(LinearLayout.LayoutParams layoutParams) {
        float f2;
        if (this.l == 1 && this.k == 0) {
            layoutParams.width = 0;
            f2 = 1.0f;
        } else {
            layoutParams.width = -2;
            f2 = 0.0f;
        }
        layoutParams.weight = f2;
    }

    private g c(e e2) {
        g g2 = this.E != null ? this.E.a() : null;
        g g3 = g2;
        if (g2 == null) {
            g3 = new g(this.getContext());
        }
        g3.a(e2);
        g3.setFocusable(true);
        g3.setMinimumWidth(this.getTabMinWidth());
        return g3;
    }

    private void c(int n2) {
        g g2 = (g)this.q.getChildAt(n2);
        this.q.removeViewAt(n2);
        if (g2 != null) {
            g2.a();
            this.E.a(g2);
        }
        this.requestLayout();
    }

    private void d() {
        int n2 = this.o.size();
        for (int i2 = 0; i2 < n2; ++i2) {
            this.o.get(i2).h();
        }
    }

    private void d(int n2) {
        if (n2 == -1) {
            return;
        }
        if (this.getWindowToken() != null && s.u((View)this) && !this.q.a()) {
            int n3;
            int n4 = this.getScrollX();
            if (n4 != (n3 = this.a(n2, 0.0f))) {
                this.f();
                this.y.setIntValues(new int[]{n4, n3});
                this.y.start();
            }
            this.q.b(n2, 300);
            return;
        }
        this.a(n2, 0.0f, true);
    }

    private void d(e e2) {
        g g2 = e2.b;
        this.q.addView((View)g2, e2.c(), (ViewGroup.LayoutParams)this.e());
    }

    private LinearLayout.LayoutParams e() {
        LinearLayout.LayoutParams layoutParams = new LinearLayout.LayoutParams(-2, -1);
        this.a(layoutParams);
        return layoutParams;
    }

    private void e(e e2) {
        for (int i2 = this.w.size() - 1; i2 >= 0; --i2) {
            this.w.get(i2).a(e2);
        }
    }

    private void f() {
        if (this.y == null) {
            this.y = new ValueAnimator();
            this.y.setInterpolator((TimeInterpolator)android.support.design.widget.a.b);
            this.y.setDuration(300L);
            this.y.addUpdateListener(new ValueAnimator.AnimatorUpdateListener(){

                public void onAnimationUpdate(ValueAnimator valueAnimator) {
                    TabLayout.this.scrollTo(((Integer)valueAnimator.getAnimatedValue()).intValue(), 0);
                }
            });
        }
    }

    private void f(e e2) {
        for (int i2 = this.w.size() - 1; i2 >= 0; --i2) {
            this.w.get(i2).b(e2);
        }
    }

    private void g() {
        int n2 = this.l == 0 ? Math.max(0, this.u - this.a) : 0;
        s.a((View)this.q, n2, 0, 0, 0);
        switch (this.l) {
            default: {
                break;
            }
            case 1: {
                this.q.setGravity(1);
                break;
            }
            case 0: {
                this.q.setGravity(8388611);
            }
        }
        this.a(true);
    }

    private void g(e e2) {
        for (int i2 = this.w.size() - 1; i2 >= 0; --i2) {
            this.w.get(i2).c(e2);
        }
    }

    private int getDefaultHeight() {
        boolean bl2;
        int n2 = this.o.size();
        boolean bl3 = false;
        int n3 = 0;
        do {
            bl2 = bl3;
            if (n3 >= n2) break;
            e e2 = this.o.get(n3);
            if (e2 != null && e2.b() != null && !TextUtils.isEmpty((CharSequence)e2.d())) {
                bl2 = true;
                break;
            }
            ++n3;
        } while (true);
        if (bl2) {
            return 72;
        }
        return 48;
    }

    private float getScrollPosition() {
        return this.q.b();
    }

    private int getTabMinWidth() {
        if (this.r != -1) {
            return this.r;
        }
        if (this.l == 0) {
            return this.t;
        }
        return 0;
    }

    private int getTabScrollRange() {
        return Math.max(0, this.q.getWidth() - this.getWidth() - this.getPaddingLeft() - this.getPaddingRight());
    }

    private void setSelectedTabView(int n2) {
        int n3 = this.q.getChildCount();
        if (n2 < n3) {
            for (int i2 = 0; i2 < n3; ++i2) {
                View view = this.q.getChildAt(i2);
                boolean bl2 = i2 == n2;
                view.setSelected(bl2);
            }
        }
    }

    public e a() {
        e e2;
        e e3 = e2 = n.a();
        if (e2 == null) {
            e3 = new e();
        }
        e3.a = this;
        e3.b = this.c(e3);
        return e3;
    }

    public e a(int n2) {
        if (n2 >= 0 && n2 < this.getTabCount()) {
            return this.o.get(n2);
        }
        return null;
    }

    public void a(int n2, float f2, boolean bl2) {
        this.a(n2, f2, bl2, true);
    }

    void a(int n2, float f2, boolean bl2, boolean bl3) {
        int n3 = Math.round((float)n2 + f2);
        if (n3 >= 0) {
            if (n3 >= this.q.getChildCount()) {
                return;
            }
            if (bl3) {
                this.q.a(n2, f2);
            }
            if (this.y != null && this.y.isRunning()) {
                this.y.cancel();
            }
            this.scrollTo(this.a(n2, f2), 0);
            if (bl2) {
                this.setSelectedTabView(n3);
            }
        }
    }

    public void a(b b2) {
        if (!this.w.contains(b2)) {
            this.w.add(b2);
        }
    }

    public void a(e e2) {
        this.a(e2, this.o.isEmpty());
    }

    public void a(e e2, int n2, boolean bl2) {
        if (e2.a == this) {
            this.a(e2, n2);
            this.d(e2);
            if (bl2) {
                e2.e();
            }
            return;
        }
        throw new IllegalArgumentException("Tab belongs to a different TabLayout.");
    }

    public void a(e e2, boolean bl2) {
        this.a(e2, this.o.size(), bl2);
    }

    public void a(ViewPager viewPager, boolean bl2) {
        this.a(viewPager, bl2, false);
    }

    void a(p p2, boolean bl2) {
        if (this.z != null && this.A != null) {
            this.z.b(this.A);
        }
        this.z = p2;
        if (bl2 && p2 != null) {
            if (this.A == null) {
                this.A = new c();
            }
            p2.a(this.A);
        }
        this.c();
    }

    void a(boolean bl2) {
        for (int i2 = 0; i2 < this.q.getChildCount(); ++i2) {
            View view = this.q.getChildAt(i2);
            view.setMinimumWidth(this.getTabMinWidth());
            this.a((LinearLayout.LayoutParams)view.getLayoutParams());
            if (!bl2) continue;
            view.requestLayout();
        }
    }

    public void addView(View view) {
        this.a(view);
    }

    public void addView(View view, int n2) {
        this.a(view);
    }

    public void addView(View view, int n2, ViewGroup.LayoutParams layoutParams) {
        this.a(view);
    }

    public void addView(View view, ViewGroup.LayoutParams layoutParams) {
        this.a(view);
    }

    int b(int n2) {
        return Math.round(this.getResources().getDisplayMetrics().density * (float)n2);
    }

    public void b() {
        for (int i2 = this.q.getChildCount() - 1; i2 >= 0; --i2) {
            this.c(i2);
        }
        Iterator<e> iterator = this.o.iterator();
        while (iterator.hasNext()) {
            e e2 = iterator.next();
            iterator.remove();
            e2.i();
            n.a(e2);
        }
        this.p = null;
    }

    public void b(b b2) {
        this.w.remove(b2);
    }

    void b(e e2) {
        this.b(e2, true);
    }

    void b(e e2, boolean bl2) {
        e e3 = this.p;
        if (e3 == e2) {
            if (e3 != null) {
                this.g(e2);
                this.d(e2.c());
                return;
            }
        } else {
            int n2 = e2 != null ? e2.c() : -1;
            if (bl2) {
                if ((e3 == null || e3.c() == -1) && n2 != -1) {
                    this.a(n2, 0.0f, true);
                } else {
                    this.d(n2);
                }
                if (n2 != -1) {
                    this.setSelectedTabView(n2);
                }
            }
            if (e3 != null) {
                this.f(e3);
            }
            this.p = e2;
            if (e2 != null) {
                this.e(e2);
            }
        }
    }

    void c() {
        this.b();
        if (this.z != null) {
            int n2;
            int n3 = this.z.b();
            for (n2 = 0; n2 < n3; ++n2) {
                this.a(this.a().a(this.z.b(n2)), false);
            }
            if (this.m != null && n3 > 0 && (n2 = this.m.getCurrentItem()) != this.getSelectedTabPosition() && n2 < this.getTabCount()) {
                this.b(this.a(n2));
            }
        }
    }

    public FrameLayout.LayoutParams generateLayoutParams(AttributeSet attributeSet) {
        return this.generateDefaultLayoutParams();
    }

    public int getSelectedTabPosition() {
        if (this.p != null) {
            return this.p.c();
        }
        return -1;
    }

    public int getTabCount() {
        return this.o.size();
    }

    public int getTabGravity() {
        return this.k;
    }

    int getTabMaxWidth() {
        return this.j;
    }

    public int getTabMode() {
        return this.l;
    }

    public ColorStateList getTabTextColors() {
        return this.f;
    }

    protected void onAttachedToWindow() {
        ViewParent viewParent;
        super.onAttachedToWindow();
        if (this.m == null && (viewParent = this.getParent()) instanceof ViewPager) {
            this.a((ViewPager)viewParent, true, true);
        }
    }

    protected void onDetachedFromWindow() {
        super.onDetachedFromWindow();
        if (this.D) {
            this.setupWithViewPager(null);
            this.D = false;
        }
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Lifted jumps to return sites
     */
    protected void onMeasure(int var1_1, int var2_2) {
        block9 : {
            var3_3 = this.b(this.getDefaultHeight()) + this.getPaddingTop() + this.getPaddingBottom();
            var4_4 = View.MeasureSpec.getMode((int)var2_2);
            if (var4_4 != Integer.MIN_VALUE) {
                if (var4_4 == 0) {
                    var2_2 = View.MeasureSpec.makeMeasureSpec((int)var3_3, (int)1073741824);
                }
            } else {
                var2_2 = View.MeasureSpec.makeMeasureSpec((int)Math.min(var3_3, View.MeasureSpec.getSize((int)var2_2)), (int)1073741824);
            }
            var3_3 = View.MeasureSpec.getSize((int)var1_1);
            if (View.MeasureSpec.getMode((int)var1_1) != 0) {
                var3_3 = this.s > 0 ? this.s : (var3_3 -= this.b(56));
                this.j = var3_3;
            }
            super.onMeasure(var1_1, var2_2);
            if (this.getChildCount() != 1) return;
            var1_1 = 0;
            var5_5 = this.getChildAt(0);
            switch (this.l) {
                default: {
                    ** break;
                }
                case 1: {
                    if (var5_5.getMeasuredWidth() != this.getMeasuredWidth()) {
                        break;
                    }
                    break block9;
                }
                case 0: {
                    if (var5_5.getMeasuredWidth() >= this.getMeasuredWidth()) break block9;
                }
            }
            var1_1 = 1;
            ** break;
        }
        if (var1_1 == 0) return;
        var1_1 = TabLayout.getChildMeasureSpec((int)var2_2, (int)(this.getPaddingTop() + this.getPaddingBottom()), (int)var5_5.getLayoutParams().height);
        var5_5.measure(View.MeasureSpec.makeMeasureSpec((int)this.getMeasuredWidth(), (int)1073741824), var1_1);
    }

    @Deprecated
    public void setOnTabSelectedListener(b b2) {
        if (this.v != null) {
            this.b(this.v);
        }
        this.v = b2;
        if (b2 != null) {
            this.a(b2);
        }
    }

    void setScrollAnimatorListener(Animator.AnimatorListener animatorListener) {
        this.f();
        this.y.addListener(animatorListener);
    }

    public void setSelectedTabIndicatorColor(int n2) {
        this.q.a(n2);
    }

    public void setSelectedTabIndicatorHeight(int n2) {
        this.q.b(n2);
    }

    public void setTabGravity(int n2) {
        if (this.k != n2) {
            this.k = n2;
            this.g();
        }
    }

    public void setTabMode(int n2) {
        if (n2 != this.l) {
            this.l = n2;
            this.g();
        }
    }

    public void setTabTextColors(ColorStateList colorStateList) {
        if (this.f != colorStateList) {
            this.f = colorStateList;
            this.d();
        }
    }

    @Deprecated
    public void setTabsFromPagerAdapter(p p2) {
        this.a(p2, false);
    }

    public void setupWithViewPager(ViewPager viewPager) {
        this.a(viewPager, true);
    }

    public boolean shouldDelayChildPressedState() {
        if (this.getTabScrollRange() > 0) {
            return true;
        }
        return false;
    }

    private class a
    implements ViewPager.e {
        private boolean b;

        a() {
        }

        @Override
        public void a(ViewPager viewPager, p p2, p p3) {
            if (TabLayout.this.m == viewPager) {
                TabLayout.this.a(p3, this.b);
            }
        }

        void a(boolean bl2) {
            this.b = bl2;
        }
    }

    public static interface b {
        public void a(e var1);

        public void b(e var1);

        public void c(e var1);
    }

    private class c
    extends DataSetObserver {
        c() {
        }

        public void onChanged() {
            TabLayout.this.c();
        }

        public void onInvalidated() {
            TabLayout.this.c();
        }
    }

    private class d
    extends LinearLayout {
        int a;
        float b;
        private int d;
        private final Paint e;
        private int f;
        private int g;
        private int h;
        private ValueAnimator i;

        d(Context context) {
            super(context);
            this.a = -1;
            this.f = -1;
            this.g = -1;
            this.h = -1;
            this.setWillNotDraw(false);
            this.e = new Paint();
        }

        private void c() {
            int n2;
            int n3;
            View view = this.getChildAt(this.a);
            if (view != null && view.getWidth() > 0) {
                int n4;
                int n5 = view.getLeft();
                n3 = n4 = view.getRight();
                n2 = n5;
                if (this.b > 0.0f) {
                    n3 = n4;
                    n2 = n5;
                    if (this.a < this.getChildCount() - 1) {
                        view = this.getChildAt(this.a + 1);
                        n2 = (int)(this.b * (float)view.getLeft() + (1.0f - this.b) * (float)n5);
                        n3 = (int)(this.b * (float)view.getRight() + (1.0f - this.b) * (float)n4);
                    }
                }
            } else {
                n2 = -1;
                n3 = -1;
            }
            this.a(n2, n3);
        }

        void a(int n2) {
            if (this.e.getColor() != n2) {
                this.e.setColor(n2);
                s.c((View)this);
            }
        }

        void a(int n2, float f2) {
            if (this.i != null && this.i.isRunning()) {
                this.i.cancel();
            }
            this.a = n2;
            this.b = f2;
            this.c();
        }

        void a(int n2, int n3) {
            if (n2 != this.g || n3 != this.h) {
                this.g = n2;
                this.h = n3;
                s.c((View)this);
            }
        }

        boolean a() {
            int n2 = this.getChildCount();
            for (int i2 = 0; i2 < n2; ++i2) {
                if (this.getChildAt(i2).getWidth() > 0) continue;
                return true;
            }
            return false;
        }

        float b() {
            return (float)this.a + this.b;
        }

        void b(int n2) {
            if (this.d != n2) {
                this.d = n2;
                s.c((View)this);
            }
        }

        /*
         * Unable to fully structure code
         * Enabled aggressive block sorting
         * Lifted jumps to return sites
         */
        void b(final int var1_1, int var2_2) {
            block6 : {
                block7 : {
                    block5 : {
                        if (this.i != null && this.i.isRunning()) {
                            this.i.cancel();
                        }
                        var3_3 = s.e((View)this) == 1 ? 1 : 0;
                        var7_4 = this.getChildAt(var1_1);
                        if (var7_4 == null) {
                            this.c();
                            return;
                        }
                        var5_5 = var7_4.getLeft();
                        var6_6 = var7_4.getRight();
                        if (Math.abs(var1_1 - this.a) > 1) break block5;
                        var3_3 = this.g;
                        var4_7 = this.h;
                        break block6;
                    }
                    var4_7 = TabLayout.this.b(24);
                    if (var1_1 >= this.a) break block7;
                    if (var3_3 == 0) ** GOTO lbl-1000
                    ** GOTO lbl-1000
                }
                if (var3_3 == 0) lbl-1000: // 2 sources:
                {
                    var3_3 = var5_5 - var4_7;
                } else lbl-1000: // 2 sources:
                {
                    var3_3 = var4_7 + var6_6;
                }
                var4_7 = var3_3;
            }
            if (var3_3 == var5_5) {
                if (var4_7 == var6_6) return;
            }
            var7_4 = new ValueAnimator();
            this.i = var7_4;
            var7_4.setInterpolator((TimeInterpolator)android.support.design.widget.a.b);
            var7_4.setDuration((long)var2_2);
            var7_4.setFloatValues(new float[]{0.0f, 1.0f});
            var7_4.addUpdateListener(new ValueAnimator.AnimatorUpdateListener(){

                public void onAnimationUpdate(ValueAnimator valueAnimator) {
                    float f2 = valueAnimator.getAnimatedFraction();
                    d.this.a(android.support.design.widget.a.a(var3_3, var5_5, f2), android.support.design.widget.a.a(var4_7, var6_6, f2));
                }
            });
            var7_4.addListener((Animator.AnimatorListener)new AnimatorListenerAdapter(){

                public void onAnimationEnd(Animator animator2) {
                    d.this.a = var1_1;
                    d.this.b = 0.0f;
                }
            });
            var7_4.start();
        }

        public void draw(Canvas canvas) {
            super.draw(canvas);
            if (this.g >= 0 && this.h > this.g) {
                canvas.drawRect((float)this.g, (float)(this.getHeight() - this.d), (float)this.h, (float)this.getHeight(), this.e);
            }
        }

        protected void onLayout(boolean bl2, int n2, int n3, int n4, int n5) {
            super.onLayout(bl2, n2, n3, n4, n5);
            if (this.i != null && this.i.isRunning()) {
                this.i.cancel();
                long l2 = this.i.getDuration();
                this.b(this.a, Math.round((1.0f - this.i.getAnimatedFraction()) * (float)l2));
                return;
            }
            this.c();
        }

        protected void onMeasure(int n2, int n3) {
            super.onMeasure(n2, n3);
            if (View.MeasureSpec.getMode((int)n2) != 1073741824) {
                return;
            }
            int n4 = TabLayout.this.l;
            int n5 = 1;
            if (n4 == 1 && TabLayout.this.k == 1) {
                View view;
                int n6;
                int n7 = this.getChildCount();
                int n8 = 0;
                int n9 = 0;
                for (n4 = 0; n4 < n7; ++n4) {
                    view = this.getChildAt(n4);
                    n6 = n9;
                    if (view.getVisibility() == 0) {
                        n6 = Math.max(n9, view.getMeasuredWidth());
                    }
                    n9 = n6;
                }
                if (n9 <= 0) {
                    return;
                }
                n4 = TabLayout.this.b(16);
                if (n9 * n7 <= this.getMeasuredWidth() - n4 * 2) {
                    n4 = 0;
                    for (n6 = n8; n6 < n7; ++n6) {
                        view = (LinearLayout.LayoutParams)this.getChildAt(n6).getLayoutParams();
                        if (view.width == n9 && view.weight == 0.0f) continue;
                        view.width = n9;
                        view.weight = 0.0f;
                        n4 = 1;
                    }
                } else {
                    TabLayout.this.k = 0;
                    TabLayout.this.a(false);
                    n4 = n5;
                }
                if (n4 != 0) {
                    super.onMeasure(n2, n3);
                }
            }
        }

        public void onRtlPropertiesChanged(int n2) {
            super.onRtlPropertiesChanged(n2);
            if (Build.VERSION.SDK_INT < 23 && this.f != n2) {
                this.requestLayout();
                this.f = n2;
            }
        }

    }

    public static final class e {
        TabLayout a;
        g b;
        private Object c;
        private Drawable d;
        private CharSequence e;
        private CharSequence f;
        private int g = -1;
        private View h;

        e() {
        }

        public e a(int n2) {
            return this.a(LayoutInflater.from((Context)this.b.getContext()).inflate(n2, (ViewGroup)this.b, false));
        }

        public e a(Drawable drawable2) {
            this.d = drawable2;
            this.h();
            return this;
        }

        public e a(View view) {
            this.h = view;
            this.h();
            return this;
        }

        public e a(CharSequence charSequence) {
            this.e = charSequence;
            this.h();
            return this;
        }

        public View a() {
            return this.h;
        }

        public Drawable b() {
            return this.d;
        }

        public e b(CharSequence charSequence) {
            this.f = charSequence;
            this.h();
            return this;
        }

        void b(int n2) {
            this.g = n2;
        }

        public int c() {
            return this.g;
        }

        public CharSequence d() {
            return this.e;
        }

        public void e() {
            if (this.a != null) {
                this.a.b(this);
                return;
            }
            throw new IllegalArgumentException("Tab not attached to a TabLayout");
        }

        public boolean f() {
            if (this.a != null) {
                if (this.a.getSelectedTabPosition() == this.g) {
                    return true;
                }
                return false;
            }
            throw new IllegalArgumentException("Tab not attached to a TabLayout");
        }

        public CharSequence g() {
            return this.f;
        }

        void h() {
            if (this.b != null) {
                this.b.b();
            }
        }

        void i() {
            this.a = null;
            this.b = null;
            this.c = null;
            this.d = null;
            this.e = null;
            this.f = null;
            this.g = -1;
            this.h = null;
        }
    }

    public static class f
    implements ViewPager.f {
        private final WeakReference<TabLayout> a;
        private int b;
        private int c;

        public f(TabLayout tabLayout) {
            this.a = new WeakReference<TabLayout>(tabLayout);
        }

        void a() {
            this.c = 0;
            this.b = 0;
        }

        @Override
        public void a(int n2) {
            this.b = this.c;
            this.c = n2;
        }

        @Override
        public void a(int n2, float f2, int n3) {
            TabLayout tabLayout = this.a.get();
            if (tabLayout != null) {
                n3 = this.c;
                boolean bl2 = false;
                boolean bl3 = n3 != 2 || this.b == 1;
                if (this.c != 2 || this.b != 0) {
                    bl2 = true;
                }
                tabLayout.a(n2, f2, bl3, bl2);
            }
        }

        @Override
        public void b(int n2) {
            TabLayout tabLayout = this.a.get();
            if (tabLayout != null && tabLayout.getSelectedTabPosition() != n2 && n2 < tabLayout.getTabCount()) {
                boolean bl2 = this.c == 0 || this.c == 2 && this.b == 0;
                tabLayout.b(tabLayout.a(n2), bl2);
            }
        }
    }

    class g
    extends LinearLayout {
        private e b;
        private TextView c;
        private ImageView d;
        private View e;
        private TextView f;
        private ImageView g;
        private int h;

        public g(Context context) {
            super(context);
            this.h = 2;
            if (TabLayout.this.i != 0) {
                s.a((View)this, android.support.v7.b.a.b.b(context, TabLayout.this.i));
            }
            s.a((View)this, TabLayout.this.a, TabLayout.this.b, TabLayout.this.c, TabLayout.this.d);
            this.setGravity(17);
            this.setOrientation(1);
            this.setClickable(true);
            s.a((View)this, q.a(this.getContext(), 1002));
        }

        private float a(Layout layout2, int n2, float f2) {
            return layout2.getLineWidth(n2) * (f2 / layout2.getPaint().getTextSize());
        }

        private void a(TextView textView, ImageView imageView) {
            Object object = this.b;
            Object var9_4 = null;
            Drawable drawable2 = object != null ? this.b.b() : null;
            CharSequence charSequence = this.b != null ? this.b.d() : null;
            object = this.b != null ? this.b.g() : null;
            int n2 = 0;
            if (imageView != null) {
                if (drawable2 != null) {
                    imageView.setImageDrawable(drawable2);
                    imageView.setVisibility(0);
                    this.setVisibility(0);
                } else {
                    imageView.setVisibility(8);
                    imageView.setImageDrawable(null);
                }
                imageView.setContentDescription((CharSequence)object);
            }
            boolean bl2 = TextUtils.isEmpty((CharSequence)charSequence) ^ true;
            if (textView != null) {
                if (bl2) {
                    textView.setText(charSequence);
                    textView.setVisibility(0);
                    this.setVisibility(0);
                } else {
                    textView.setVisibility(8);
                    textView.setText(null);
                }
                textView.setContentDescription((CharSequence)object);
            }
            if (imageView != null) {
                textView = (ViewGroup.MarginLayoutParams)imageView.getLayoutParams();
                int n3 = n2;
                if (bl2) {
                    n3 = n2;
                    if (imageView.getVisibility() == 0) {
                        n3 = TabLayout.this.b(8);
                    }
                }
                if (n3 != textView.bottomMargin) {
                    textView.bottomMargin = n3;
                    imageView.requestLayout();
                }
            }
            if (bl2) {
                object = var9_4;
            }
            bi.a((View)this, (CharSequence)object);
        }

        void a() {
            this.a(null);
            this.setSelected(false);
        }

        void a(e e2) {
            if (e2 != this.b) {
                this.b = e2;
                this.b();
            }
        }

        final void b() {
            e e2;
            boolean bl2;
            block18 : {
                View view;
                ViewParent viewParent;
                block17 : {
                    block16 : {
                        e2 = this.b;
                        viewParent = null;
                        view = e2 != null ? e2.a() : null;
                        if (view != null) {
                            viewParent = view.getParent();
                            if (viewParent != this) {
                                if (viewParent != null) {
                                    ((ViewGroup)viewParent).removeView(view);
                                }
                                this.addView(view);
                            }
                            this.e = view;
                            if (this.c != null) {
                                this.c.setVisibility(8);
                            }
                            if (this.d != null) {
                                this.d.setVisibility(8);
                                this.d.setImageDrawable(null);
                            }
                            this.f = (TextView)view.findViewById(16908308);
                            if (this.f != null) {
                                this.h = android.support.v4.widget.m.a(this.f);
                            }
                            view = (ImageView)view.findViewById(16908294);
                        } else {
                            if (this.e != null) {
                                this.removeView(this.e);
                                this.e = null;
                            }
                            this.f = null;
                            view = viewParent;
                        }
                        this.g = view;
                        view = this.e;
                        bl2 = false;
                        if (view != null) break block16;
                        if (this.d == null) {
                            view = (ImageView)LayoutInflater.from((Context)this.getContext()).inflate(a.g.design_layout_tab_icon, (ViewGroup)this, false);
                            this.addView(view, 0);
                            this.d = view;
                        }
                        if (this.c == null) {
                            view = (TextView)LayoutInflater.from((Context)this.getContext()).inflate(a.g.design_layout_tab_text, (ViewGroup)this, false);
                            this.addView(view);
                            this.c = view;
                            this.h = android.support.v4.widget.m.a(this.c);
                        }
                        android.support.v4.widget.m.a(this.c, TabLayout.this.e);
                        if (TabLayout.this.f != null) {
                            this.c.setTextColor(TabLayout.this.f);
                        }
                        view = this.c;
                        viewParent = this.d;
                        break block17;
                    }
                    if (this.f == null && this.g == null) break block18;
                    view = this.f;
                    viewParent = this.g;
                }
                this.a((TextView)view, (ImageView)viewParent);
            }
            boolean bl3 = bl2;
            if (e2 != null) {
                bl3 = bl2;
                if (e2.f()) {
                    bl3 = true;
                }
            }
            this.setSelected(bl3);
        }

        public void onInitializeAccessibilityEvent(AccessibilityEvent accessibilityEvent) {
            super.onInitializeAccessibilityEvent(accessibilityEvent);
            accessibilityEvent.setClassName((CharSequence)a.c.class.getName());
        }

        public void onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo accessibilityNodeInfo) {
            super.onInitializeAccessibilityNodeInfo(accessibilityNodeInfo);
            accessibilityNodeInfo.setClassName((CharSequence)a.c.class.getName());
        }

        public void onMeasure(int n2, int n3) {
            block13 : {
                int n4;
                int n5;
                float f2;
                block14 : {
                    block15 : {
                        int n6;
                        int n7;
                        block11 : {
                            block12 : {
                                n5 = View.MeasureSpec.getSize((int)n2);
                                n7 = View.MeasureSpec.getMode((int)n2);
                                n6 = TabLayout.this.getTabMaxWidth();
                                n4 = n2;
                                if (n6 <= 0) break block11;
                                if (n7 == 0) break block12;
                                n4 = n2;
                                if (n5 <= n6) break block11;
                            }
                            n4 = View.MeasureSpec.makeMeasureSpec((int)TabLayout.this.j, (int)Integer.MIN_VALUE);
                        }
                        super.onMeasure(n4, n3);
                        if (this.c == null) break block13;
                        this.getResources();
                        float f3 = TabLayout.this.g;
                        n5 = this.h;
                        ImageView imageView = this.d;
                        n7 = 1;
                        if (imageView != null && this.d.getVisibility() == 0) {
                            n2 = 1;
                            f2 = f3;
                        } else {
                            f2 = f3;
                            n2 = n5;
                            if (this.c != null) {
                                f2 = f3;
                                n2 = n5;
                                if (this.c.getLineCount() > 1) {
                                    f2 = TabLayout.this.h;
                                    n2 = n5;
                                }
                            }
                        }
                        f3 = this.c.getTextSize();
                        n6 = this.c.getLineCount();
                        n5 = android.support.v4.widget.m.a(this.c);
                        float f4 = f2 FCMPL f3;
                        if (f4 == false && (n5 < 0 || n2 == n5)) break block13;
                        n5 = n7;
                        if (TabLayout.this.l != 1) break block14;
                        n5 = n7;
                        if (f4 <= 0) break block14;
                        n5 = n7;
                        if (n6 != 1) break block14;
                        imageView = this.c.getLayout();
                        if (imageView == null) break block15;
                        n5 = n7;
                        if (this.a((Layout)imageView, 0, f2) <= (float)(this.getMeasuredWidth() - this.getPaddingLeft() - this.getPaddingRight())) break block14;
                    }
                    n5 = 0;
                }
                if (n5 != 0) {
                    this.c.setTextSize(0, f2);
                    this.c.setMaxLines(n2);
                    super.onMeasure(n4, n3);
                }
            }
        }

        public boolean performClick() {
            boolean bl2;
            boolean bl3 = bl2 = super.performClick();
            if (this.b != null) {
                if (!bl2) {
                    this.playSoundEffect(0);
                }
                this.b.e();
                bl3 = true;
            }
            return bl3;
        }

        public void setSelected(boolean bl2) {
            boolean bl3 = this.isSelected() != bl2;
            super.setSelected(bl2);
            if (bl3 && bl2 && Build.VERSION.SDK_INT < 16) {
                this.sendAccessibilityEvent(4);
            }
            if (this.c != null) {
                this.c.setSelected(bl2);
            }
            if (this.d != null) {
                this.d.setSelected(bl2);
            }
            if (this.e != null) {
                this.e.setSelected(bl2);
            }
        }
    }

    public static class h
    implements b {
        private final ViewPager a;

        public h(ViewPager viewPager) {
            this.a = viewPager;
        }

        @Override
        public void a(e e2) {
            this.a.setCurrentItem(e2.c());
        }

        @Override
        public void b(e e2) {
        }

        @Override
        public void c(e e2) {
        }
    }

}

