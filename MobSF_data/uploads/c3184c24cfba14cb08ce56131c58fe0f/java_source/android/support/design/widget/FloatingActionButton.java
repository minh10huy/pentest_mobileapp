/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.content.Context
 *  android.content.res.ColorStateList
 *  android.content.res.Configuration
 *  android.content.res.Resources
 *  android.content.res.TypedArray
 *  android.graphics.PorterDuff
 *  android.graphics.PorterDuff$Mode
 *  android.graphics.Rect
 *  android.graphics.drawable.Drawable
 *  android.os.Build
 *  android.os.Build$VERSION
 *  android.util.AttributeSet
 *  android.util.Log
 *  android.view.MotionEvent
 *  android.view.View
 *  android.view.View$MeasureSpec
 *  android.view.ViewGroup
 *  android.view.ViewGroup$LayoutParams
 */
package android.support.design.widget;

import android.content.Context;
import android.content.res.ColorStateList;
import android.content.res.Configuration;
import android.content.res.Resources;
import android.content.res.TypedArray;
import android.graphics.PorterDuff;
import android.graphics.Rect;
import android.graphics.drawable.Drawable;
import android.os.Build;
import android.support.design.a;
import android.support.design.widget.AppBarLayout;
import android.support.design.widget.BottomSheetBehavior;
import android.support.design.widget.CoordinatorLayout;
import android.support.design.widget.d;
import android.support.design.widget.e;
import android.support.design.widget.i;
import android.support.design.widget.q;
import android.support.v4.view.s;
import android.util.AttributeSet;
import android.util.Log;
import android.view.MotionEvent;
import android.view.View;
import android.view.ViewGroup;
import java.util.List;

@CoordinatorLayout.c(a=Behavior.class)
public class FloatingActionButton
extends q {
    int a;
    boolean b;
    final Rect c;
    private ColorStateList d;
    private PorterDuff.Mode e;
    private int f;
    private int g;
    private int h;
    private int i;
    private final Rect j;
    private android.support.v7.widget.q k;
    private d l;

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    private int a(int n2) {
        Resources resources = this.getResources();
        if (this.h != 0) {
            return this.h;
        }
        if (n2 != -1) {
            if (n2 != 1) {
                n2 = a.c.design_fab_size_normal;
                do {
                    return resources.getDimensionPixelSize(n2);
                    break;
                } while (true);
            }
            n2 = a.c.design_fab_size_mini;
            return resources.getDimensionPixelSize(n2);
        }
        if (Math.max(resources.getConfiguration().screenWidthDp, resources.getConfiguration().screenHeightDp) >= 470) return this.a(0);
        return this.a(1);
    }

    private static int a(int n2, int n3) {
        int n4 = View.MeasureSpec.getMode((int)n3);
        int n5 = View.MeasureSpec.getSize((int)n3);
        if (n4 != Integer.MIN_VALUE) {
            n3 = n2;
            if (n4 != 0) {
                if (n4 != 1073741824) {
                    return n2;
                }
                return n5;
            }
        } else {
            n3 = Math.min(n2, n5);
        }
        return n3;
    }

    private d.c a(final a a2) {
        if (a2 == null) {
            return null;
        }
        return new d.c(){

            @Override
            public void a() {
                a2.a(FloatingActionButton.this);
            }

            @Override
            public void b() {
                a2.b(FloatingActionButton.this);
            }
        };
    }

    private d a() {
        if (Build.VERSION.SDK_INT >= 21) {
            return new e(this, new b());
        }
        return new d(this, new b());
    }

    private d getImpl() {
        if (this.l == null) {
            this.l = this.a();
        }
        return this.l;
    }

    void a(a a2, boolean bl2) {
        this.getImpl().b(this.a(a2), bl2);
    }

    public boolean a(Rect rect) {
        if (s.u((View)this)) {
            rect.set(0, 0, this.getWidth(), this.getHeight());
            rect.left += this.c.left;
            rect.top += this.c.top;
            rect.right -= this.c.right;
            rect.bottom -= this.c.bottom;
            return true;
        }
        return false;
    }

    void b(a a2, boolean bl2) {
        this.getImpl().a(this.a(a2), bl2);
    }

    protected void drawableStateChanged() {
        super.drawableStateChanged();
        this.getImpl().a(this.getDrawableState());
    }

    public ColorStateList getBackgroundTintList() {
        return this.d;
    }

    public PorterDuff.Mode getBackgroundTintMode() {
        return this.e;
    }

    public float getCompatElevation() {
        return this.getImpl().a();
    }

    public Drawable getContentBackground() {
        return this.getImpl().c();
    }

    public int getCustomSize() {
        return this.h;
    }

    public int getRippleColor() {
        return this.f;
    }

    public int getSize() {
        return this.g;
    }

    int getSizeDimension() {
        return this.a(this.g);
    }

    public boolean getUseCompatPadding() {
        return this.b;
    }

    public void jumpDrawablesToCurrentState() {
        super.jumpDrawablesToCurrentState();
        this.getImpl().b();
    }

    protected void onAttachedToWindow() {
        super.onAttachedToWindow();
        this.getImpl().f();
    }

    protected void onDetachedFromWindow() {
        super.onDetachedFromWindow();
        this.getImpl().g();
    }

    protected void onMeasure(int n2, int n3) {
        int n4 = this.getSizeDimension();
        this.a = (n4 - this.i) / 2;
        this.getImpl().e();
        n2 = Math.min(FloatingActionButton.a(n4, n2), FloatingActionButton.a(n4, n3));
        this.setMeasuredDimension(this.c.left + n2 + this.c.right, n2 + this.c.top + this.c.bottom);
    }

    public boolean onTouchEvent(MotionEvent motionEvent) {
        if (motionEvent.getAction() == 0 && this.a(this.j) && !this.j.contains((int)motionEvent.getX(), (int)motionEvent.getY())) {
            return false;
        }
        return super.onTouchEvent(motionEvent);
    }

    public void setBackgroundColor(int n2) {
        Log.i((String)"FloatingActionButton", (String)"Setting a custom background is not supported.");
    }

    public void setBackgroundDrawable(Drawable drawable2) {
        Log.i((String)"FloatingActionButton", (String)"Setting a custom background is not supported.");
    }

    public void setBackgroundResource(int n2) {
        Log.i((String)"FloatingActionButton", (String)"Setting a custom background is not supported.");
    }

    public void setBackgroundTintList(ColorStateList colorStateList) {
        if (this.d != colorStateList) {
            this.d = colorStateList;
            this.getImpl().a(colorStateList);
        }
    }

    public void setBackgroundTintMode(PorterDuff.Mode mode) {
        if (this.e != mode) {
            this.e = mode;
            this.getImpl().a(mode);
        }
    }

    public void setCompatElevation(float f2) {
        this.getImpl().a(f2);
    }

    public void setCustomSize(int n2) {
        if (n2 >= 0) {
            this.h = n2;
            return;
        }
        throw new IllegalArgumentException("Custom size should be non-negative.");
    }

    public void setImageResource(int n2) {
        this.k.a(n2);
    }

    public void setRippleColor(int n2) {
        if (this.f != n2) {
            this.f = n2;
            this.getImpl().a(n2);
        }
    }

    public void setSize(int n2) {
        if (n2 != this.g) {
            this.g = n2;
            this.requestLayout();
        }
    }

    public void setUseCompatPadding(boolean bl2) {
        if (this.b != bl2) {
            this.b = bl2;
            this.getImpl().d();
        }
    }

    public static class Behavior
    extends CoordinatorLayout.b<FloatingActionButton> {
        private Rect a;
        private a b;
        private boolean c;

        public Behavior() {
            this.c = true;
        }

        public Behavior(Context context, AttributeSet attributeSet) {
            super(context, attributeSet);
            context = context.obtainStyledAttributes(attributeSet, a.i.FloatingActionButton_Behavior_Layout);
            this.c = context.getBoolean(a.i.FloatingActionButton_Behavior_Layout_behavior_autoHide, true);
            context.recycle();
        }

        private void a(CoordinatorLayout coordinatorLayout, FloatingActionButton floatingActionButton) {
            Rect rect = floatingActionButton.c;
            if (rect != null && rect.centerX() > 0 && rect.centerY() > 0) {
                CoordinatorLayout.e e2 = (CoordinatorLayout.e)floatingActionButton.getLayoutParams();
                int n2 = floatingActionButton.getRight();
                int n3 = coordinatorLayout.getWidth();
                int n4 = e2.rightMargin;
                int n5 = 0;
                n2 = n2 >= n3 - n4 ? rect.right : (floatingActionButton.getLeft() <= e2.leftMargin ? - rect.left : 0);
                if (floatingActionButton.getBottom() >= coordinatorLayout.getHeight() - e2.bottomMargin) {
                    n5 = rect.bottom;
                } else if (floatingActionButton.getTop() <= e2.topMargin) {
                    n5 = - rect.top;
                }
                if (n5 != 0) {
                    s.b((View)floatingActionButton, n5);
                }
                if (n2 != 0) {
                    s.c((View)floatingActionButton, n2);
                }
            }
        }

        private boolean a(CoordinatorLayout coordinatorLayout, AppBarLayout appBarLayout, FloatingActionButton floatingActionButton) {
            if (!this.a((View)appBarLayout, floatingActionButton)) {
                return false;
            }
            if (this.a == null) {
                this.a = new Rect();
            }
            Rect rect = this.a;
            android.support.v4.widget.q.b(coordinatorLayout, (View)appBarLayout, rect);
            if (rect.bottom <= appBarLayout.getMinimumHeightForVisibleOverlappingContent()) {
                floatingActionButton.b(this.b, false);
            } else {
                floatingActionButton.a(this.b, false);
            }
            return true;
        }

        private static boolean a(View view) {
            if ((view = view.getLayoutParams()) instanceof CoordinatorLayout.e) {
                return ((CoordinatorLayout.e)view).b() instanceof BottomSheetBehavior;
            }
            return false;
        }

        private boolean a(View view, FloatingActionButton floatingActionButton) {
            CoordinatorLayout.e e2 = (CoordinatorLayout.e)floatingActionButton.getLayoutParams();
            if (!this.c) {
                return false;
            }
            if (e2.a() != view.getId()) {
                return false;
            }
            if (floatingActionButton.getUserSetVisibility() != 0) {
                return false;
            }
            return true;
        }

        private boolean b(View view, FloatingActionButton floatingActionButton) {
            if (!this.a(view, floatingActionButton)) {
                return false;
            }
            CoordinatorLayout.e e2 = (CoordinatorLayout.e)floatingActionButton.getLayoutParams();
            if (view.getTop() < floatingActionButton.getHeight() / 2 + e2.topMargin) {
                floatingActionButton.b(this.b, false);
            } else {
                floatingActionButton.a(this.b, false);
            }
            return true;
        }

        @Override
        public void a(CoordinatorLayout.e e2) {
            if (e2.h == 0) {
                e2.h = 80;
            }
        }

        @Override
        public boolean a(CoordinatorLayout coordinatorLayout, FloatingActionButton floatingActionButton, int n2) {
            View view;
            List<View> list = coordinatorLayout.c((View)floatingActionButton);
            int n3 = list.size();
            for (int i2 = 0; i2 < n3 && !((view = list.get(i2)) instanceof AppBarLayout ? this.a(coordinatorLayout, (AppBarLayout)view, floatingActionButton) : Behavior.a(view) && this.b(view, floatingActionButton)); ++i2) {
            }
            coordinatorLayout.a((View)floatingActionButton, n2);
            this.a(coordinatorLayout, floatingActionButton);
            return true;
        }

        @Override
        public boolean a(CoordinatorLayout coordinatorLayout, FloatingActionButton floatingActionButton, Rect rect) {
            coordinatorLayout = floatingActionButton.c;
            rect.set(floatingActionButton.getLeft() + coordinatorLayout.left, floatingActionButton.getTop() + coordinatorLayout.top, floatingActionButton.getRight() - coordinatorLayout.right, floatingActionButton.getBottom() - coordinatorLayout.bottom);
            return true;
        }

        @Override
        public boolean a(CoordinatorLayout coordinatorLayout, FloatingActionButton floatingActionButton, View view) {
            if (view instanceof AppBarLayout) {
                this.a(coordinatorLayout, (AppBarLayout)view, floatingActionButton);
            } else if (Behavior.a(view)) {
                this.b(view, floatingActionButton);
            }
            return false;
        }

        @Override
        public /* synthetic */ boolean b(CoordinatorLayout coordinatorLayout, View view, View view2) {
            return this.a(coordinatorLayout, (FloatingActionButton)view, view2);
        }
    }

    public static abstract class a {
        public void a(FloatingActionButton floatingActionButton) {
        }

        public void b(FloatingActionButton floatingActionButton) {
        }
    }

    private class b
    implements i {
        b() {
        }

        @Override
        public float a() {
            return (float)FloatingActionButton.this.getSizeDimension() / 2.0f;
        }

        @Override
        public void a(int n2, int n3, int n4, int n5) {
            FloatingActionButton.this.c.set(n2, n3, n4, n5);
            FloatingActionButton.this.setPadding(n2 + FloatingActionButton.this.a, n3 + FloatingActionButton.this.a, n4 + FloatingActionButton.this.a, n5 + FloatingActionButton.this.a);
        }

        @Override
        public void a(Drawable drawable2) {
            FloatingActionButton.super.setBackgroundDrawable(drawable2);
        }

        @Override
        public boolean b() {
            return FloatingActionButton.this.b;
        }
    }

}

