/*
 * Decompiled with CFR 0_132.
 */
package c.a.a.g;

import c.a.a.c.a;
import c.a.a.e.b;
import c.a.a.e.f;
import c.a.a.e.k;
import c.a.a.g.c;
import java.io.File;
import java.io.UnsupportedEncodingException;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Collection;
import java.util.List;
import java.util.TimeZone;

public class e {
    public static int a(k cloneable, f object) {
        if (cloneable != null && object != null) {
            if (cloneable.b() != null) {
                if (cloneable.b().a() != null) {
                    if (cloneable.b().a().size() <= 0) {
                        return -1;
                    }
                    if (e.a((String)(object = object.o()))) {
                        cloneable = cloneable.b().a();
                        int n2 = 0;
                        do {
                            if (n2 >= cloneable.size()) {
                                return -1;
                            }
                            String string2 = ((f)cloneable.get(n2)).o();
                            if (e.a(string2) && object.equalsIgnoreCase(string2)) {
                                return n2;
                            }
                            ++n2;
                        } while (true);
                    }
                    throw new a("file name in file header is empty or null, cannot determine index of file header");
                }
                throw new a("file Headers are null, cannot determine index of file header");
            }
            throw new a("central directory is null, ccannot determine index of file header");
        }
        throw new a("input parameters is null, cannot determine index of file header");
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public static int a(String object, String object2) {
        void var1_5;
        void var0_4;
        if (!e.a((String)object)) throw new a("input string is null, cannot calculate encoded String length");
        if (!e.a((String)var1_5)) throw new a("encoding is not defined, cannot calculate string length");
        try {
            void var1_7;
            ByteBuffer byteBuffer;
            if (var1_5.equals("Cp850")) {
                byte[] arrby = object.getBytes("Cp850");
            } else if (var1_5.equals("UTF8")) {
                byte[] arrby = object.getBytes("UTF8");
            } else {
                byte[] arrby = object.getBytes((String)var1_5);
            }
            ByteBuffer byteBuffer2 = byteBuffer = ByteBuffer.wrap((byte[])var1_7);
            return var0_4.limit();
        }
        catch (Exception exception) {
            throw new a(exception);
        }
        catch (UnsupportedEncodingException unsupportedEncodingException) {}
        ByteBuffer byteBuffer = ByteBuffer.wrap(object.getBytes());
        return var0_4.limit();
    }

    public static long a(long l2) {
        Calendar calendar = Calendar.getInstance();
        calendar.setTimeInMillis(l2);
        int n2 = calendar.get(1);
        if (n2 < 1980) {
            return 2162688L;
        }
        int n3 = calendar.get(2);
        int n4 = calendar.get(5);
        int n5 = calendar.get(11);
        int n6 = calendar.get(12);
        return calendar.get(13) >> 1 | (n2 - 1980 << 25 | n3 + 1 << 21 | n4 << 16 | n5 << 11 | n6 << 5);
    }

    public static long a(File file, TimeZone timeZone) {
        if (file != null) {
            if (file.exists()) {
                return file.lastModified();
            }
            throw new a("input file does not exist, cannot read last modified file time");
        }
        throw new a("input file is null, cannot read last modified file time");
    }

    public static f a(k object, String object2) {
        if (object != null) {
            if (e.a((String)object2)) {
                Object object3;
                Object object4 = object3 = e.b((k)object, (String)object2);
                if (object3 == null) {
                    object3 = object2.replaceAll("\\\\", "/");
                    object4 = object2 = e.b((k)object, (String)object3);
                    if (object2 == null) {
                        object4 = e.b((k)object, object3.replaceAll("/", "\\\\"));
                    }
                }
                return object4;
            }
            object = new StringBuffer("file name is null, cannot determine file header for fileName: ");
            object.append((String)object2);
            throw new a(object.toString());
        }
        object = new StringBuffer("zip model is null, cannot determine file header for fileName: ");
        object.append((String)object2);
        throw new a(object.toString());
    }

    /*
     * Enabled aggressive block sorting
     */
    public static String a(String object, String charSequence, String object2) {
        if (!e.a((String)object)) {
            throw new a("input file path/name is empty, cannot calculate relative file name");
        }
        if (e.a((String)object2)) {
            String string2 = new File((String)object2).getPath();
            object2 = string2;
            if (!string2.endsWith(c.b)) {
                object2 = new StringBuffer(String.valueOf(string2));
                object2.append(c.b);
                object2 = object2.toString();
            }
            string2 = object.substring(object2.length());
            object2 = string2;
            if (string2.startsWith(System.getProperty("file.separator"))) {
                object2 = string2.substring(1);
            }
            if ((object = new File((String)object)).isDirectory()) {
                object2 = new StringBuffer(String.valueOf(object2.replaceAll("\\\\", "/")));
                object = "/";
            } else {
                object2 = new StringBuffer(String.valueOf(object2.substring(0, object2.lastIndexOf(object.getName())).replaceAll("\\\\", "/")));
                object = object.getName();
            }
            object2.append((String)object);
            object = object2.toString();
        } else {
            object2 = new File((String)object);
            if (object2.isDirectory()) {
                object = new StringBuffer(String.valueOf(object2.getName()));
                object.append("/");
                object = object.toString();
            } else {
                object = e.b(new File((String)object));
            }
        }
        object2 = object;
        if (e.a((String)charSequence)) {
            charSequence = new StringBuffer(String.valueOf(charSequence));
            charSequence.append((String)object);
            object2 = charSequence.toString();
        }
        if (e.a((String)object2)) {
            return object2;
        }
        throw new a("Error determining file name");
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    public static String a(byte[] arrby) {
        try {
            return new String(arrby, "Cp850");
        }
        catch (UnsupportedEncodingException unsupportedEncodingException) {
            return new String(arrby);
        }
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    public static String a(byte[] arrby, boolean bl2) {
        if (!bl2) return e.a(arrby);
        try {
            return new String(arrby, "UTF8");
        }
        catch (UnsupportedEncodingException unsupportedEncodingException) {
            return new String(arrby);
        }
    }

    public static ArrayList a(File file, boolean bl2) {
        if (file != null) {
            ArrayList<File> arrayList = new ArrayList<File>();
            List<File> list = Arrays.asList(file.listFiles());
            if (!file.canRead()) {
                return arrayList;
            }
            int n2 = 0;
            do {
                if (n2 >= list.size()) {
                    return arrayList;
                }
                file = list.get(n2);
                if (file.isHidden() && !bl2) {
                    return arrayList;
                }
                arrayList.add(file);
                if (file.isDirectory()) {
                    arrayList.addAll(e.a(file, bl2));
                }
                ++n2;
            } while (true);
        }
        throw new a("input path is null, cannot read files in the directory");
    }

    public static boolean a(File file) {
        if (file != null) {
            return file.exists();
        }
        throw new a("cannot check if file exists: input file is null");
    }

    public static boolean a(String string2) {
        if (string2 != null && string2.trim().length() > 0) {
            return true;
        }
        return false;
    }

    public static long[] a() {
        return new long[]{67324752L, 134695760L, 33639248L, 101010256L, 84233040L, 134630224L, 134695760L, 117853008L, 101075792L, 1L, 39169L};
    }

    public static f b(k object, String string2) {
        if (object != null) {
            if (e.a(string2)) {
                if (object.b() != null) {
                    if (object.b().a() != null) {
                        if (object.b().a().size() <= 0) {
                            return null;
                        }
                        object = object.b().a();
                        int n2 = 0;
                        do {
                            if (n2 >= object.size()) {
                                return null;
                            }
                            f f2 = (f)object.get(n2);
                            String string3 = f2.o();
                            if (e.a(string3) && string2.equalsIgnoreCase(string3)) {
                                return f2;
                            }
                            ++n2;
                        } while (true);
                    }
                    object = new StringBuffer("file Headers are null, cannot determine file header with exact match for fileName: ");
                    object.append(string2);
                    throw new a(object.toString());
                }
                object = new StringBuffer("central directory is null, cannot determine file header with exact match for fileName: ");
                object.append(string2);
                throw new a(object.toString());
            }
            object = new StringBuffer("file name is null, cannot determine file header with exact match for fileName: ");
            object.append(string2);
            throw new a(object.toString());
        }
        object = new StringBuffer("zip model is null, cannot determine file header with exact match for fileName: ");
        object.append(string2);
        throw new a(object.toString());
    }

    public static String b(File file) {
        if (file != null) {
            if (file.isDirectory()) {
                return null;
            }
            return file.getName();
        }
        throw new a("input file is null, cannot get file name");
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public static boolean b(String string2) {
        if (!e.a(string2)) throw new a("path is null");
        if (!e.c(string2)) {
            StringBuffer stringBuffer = new StringBuffer("file does not exist: ");
            stringBuffer.append(string2);
            throw new a(stringBuffer.toString());
        }
        try {
            return new File(string2).canRead();
        }
        catch (Exception exception) {
            throw new a("cannot read zip file");
        }
    }

    public static long c(File file) {
        if (file != null) {
            if (file.isDirectory()) {
                return -1L;
            }
            return file.length();
        }
        throw new a("input file is null, cannot calculate file length");
    }

    public static boolean c(String string2) {
        if (e.a(string2)) {
            return e.a(new File(string2));
        }
        throw new a("path is null");
    }

    public static String d(String string2) {
        if (e.a(string2)) {
            String string3 = string2;
            if (string2.indexOf(System.getProperty("file.separator")) >= 0) {
                string3 = string2.substring(string2.lastIndexOf(System.getProperty("file.separator")));
            }
            string2 = string3;
            if (string3.indexOf(".") > 0) {
                string2 = string3.substring(0, string3.lastIndexOf("."));
            }
            return string2;
        }
        throw new a("zip file name is empty or null, cannot determine zip file name");
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public static byte[] e(String string2) {
        try {
            Object object = null;
            object = e.f(string2);
            if (object.equals("Cp850")) {
                object = "Cp850";
                return string2.getBytes((String)object);
            }
            if (!object.equals("UTF8")) return string2.getBytes();
            object = "UTF8";
            return string2.getBytes((String)object);
        }
        catch (Exception exception) {
            throw new a(exception);
        }
        catch (UnsupportedEncodingException unsupportedEncodingException) {
            return string2.getBytes();
        }
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    public static String f(String string2) {
        block8 : {
            boolean bl2;
            block7 : {
                if (string2 == null) throw new a("input string is null, cannot detect charset");
                bl2 = string2.equals(new String(string2.getBytes("Cp850"), "Cp850"));
                if (!bl2) break block7;
                return "Cp850";
            }
            bl2 = string2.equals(new String(string2.getBytes("UTF8"), "UTF8"));
            if (!bl2) break block8;
            return "UTF8";
        }
        try {
            return c.a;
        }
        catch (UnsupportedEncodingException unsupportedEncodingException) {
            return c.a;
        }
        catch (Exception exception) {
            return c.a;
        }
    }

    public static int g(String string2) {
        if (e.a(string2)) {
            return e.a(string2, e.f(string2));
        }
        throw new a("input string is null, cannot calculate encoded String length");
    }
}

