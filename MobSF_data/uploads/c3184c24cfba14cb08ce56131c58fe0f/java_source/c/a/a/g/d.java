/*
 * Decompiled with CFR 0_132.
 */
package c.a.a.g;

import c.a.a.c.a;
import java.io.DataInput;
import java.io.IOException;

public class d {
    public static byte a(int[] arrn) {
        if (arrn != null) {
            if (arrn.length == 8) {
                if (d.b(arrn)) {
                    int n2 = 0;
                    int n3 = 0;
                    do {
                        if (n2 >= arrn.length) {
                            return (byte)n3;
                        }
                        n3 = (int)((double)n3 + Math.pow(2.0, n2) * (double)arrn[n2]);
                        ++n2;
                    } while (true);
                }
                throw new a("invalid bits provided, bits contain other values than 0 or 1");
            }
            throw new a("invalid bit array length, cannot calculate byte");
        }
        throw new a("bit array is null, cannot calculate byte from bits");
    }

    public static int a(DataInput dataInput, byte[] arrby) {
        try {
            dataInput.readFully(arrby, 0, 4);
        }
        catch (IOException iOException) {
            throw new a(iOException);
        }
        byte by2 = arrby[0];
        byte by3 = arrby[1];
        byte by4 = arrby[2];
        return by2 & 255 | (by3 & 255) << 8 | ((arrby[3] & 255) << 8 | by4 & 255) << 16;
    }

    public static long a(byte[] arrby, int n2) {
        long l2 = arrby[n2 + 7] & 255;
        long l3 = arrby[n2 + 6] & 255;
        long l4 = arrby[n2 + 5] & 255;
        long l5 = arrby[n2 + 4] & 255;
        long l6 = arrby[n2 + 3] & 255;
        long l7 = arrby[n2 + 2] & 255;
        long l8 = arrby[n2 + 1] & 255;
        return (long)(arrby[n2] & 255) | (((((((l2 | 0L) << 8 | l3) << 8 | l4) << 8 | l5) << 8 | l6) << 8 | l7) << 8 | l8) << 8;
    }

    public static final void a(byte[] arrby, int n2, int n3) {
        arrby[n2 + 3] = (byte)(n3 >>> 24);
        arrby[n2 + 2] = (byte)(n3 >>> 16);
        arrby[n2 + 1] = (byte)(n3 >>> 8);
        arrby[n2] = (byte)(n3 & 255);
    }

    public static void a(byte[] arrby, int n2, long l2) {
        arrby[n2 + 7] = (byte)(l2 >>> 56);
        arrby[n2 + 6] = (byte)(l2 >>> 48);
        arrby[n2 + 5] = (byte)(l2 >>> 40);
        arrby[n2 + 4] = (byte)(l2 >>> 32);
        arrby[n2 + 3] = (byte)(l2 >>> 24);
        arrby[n2 + 2] = (byte)(l2 >>> 16);
        arrby[n2 + 1] = (byte)(l2 >>> 8);
        arrby[n2] = (byte)(l2 & 255L);
    }

    public static final void a(byte[] arrby, int n2, short s2) {
        arrby[n2 + 1] = (byte)(s2 >>> 8);
        arrby[n2] = (byte)(s2 & 255);
    }

    public static byte[] a(char[] arrc) {
        if (arrc != null) {
            byte[] arrby = new byte[arrc.length];
            int n2 = 0;
            do {
                if (n2 >= arrc.length) {
                    return arrby;
                }
                arrby[n2] = (byte)arrc[n2];
                ++n2;
            } while (true);
        }
        throw new NullPointerException();
    }

    public static int b(byte[] arrby, int n2) {
        byte by2 = arrby[n2];
        return (arrby[n2 + 1] & 255) << 8 | by2 & 255;
    }

    public static void b(byte[] arrby, int n2, int n3) {
        arrby[0] = (byte)n2;
        arrby[1] = (byte)(n2 >> 8);
        arrby[2] = (byte)(n2 >> 16);
        arrby[3] = (byte)(n2 >> 24);
        arrby[4] = 0;
        arrby[5] = 0;
        arrby[6] = 0;
        arrby[7] = 0;
        arrby[8] = 0;
        arrby[9] = 0;
        arrby[10] = 0;
        arrby[11] = 0;
        arrby[12] = 0;
        arrby[13] = 0;
        arrby[14] = 0;
        arrby[15] = 0;
    }

    private static boolean b(int[] arrn) {
        int n2 = 0;
        while (n2 < arrn.length) {
            if (arrn[n2] != 0 && arrn[n2] != 1) {
                return false;
            }
            ++n2;
        }
        return true;
    }

    public static final short c(byte[] arrby, int n2) {
        short s2 = (short)((short)(arrby[n2] & 255 | 0) << 8);
        return (short)(arrby[n2 + 1] & 255 | s2);
    }

    public static int d(byte[] arrby, int n2) {
        byte by2 = arrby[n2];
        byte by3 = arrby[n2 + 1];
        byte by4 = arrby[n2 + 2];
        return ((arrby[n2 + 3] & 255) << 8 | by4 & 255) << 16 | (by2 & 255 | (by3 & 255) << 8);
    }
}

