/*
 * Decompiled with CFR 0_132.
 */
package c.a.a.b;

import c.a.a.b.b;
import c.a.a.c.a;
import java.util.Random;

public class c
implements b {
    private c.a.a.b.b.b a;
    private byte[] b;

    public c(char[] arrc, int n2) {
        if (arrc != null && arrc.length > 0) {
            this.a = new c.a.a.b.b.b();
            this.b = new byte[12];
            this.a(arrc, n2);
            return;
        }
        throw new a("input password is null or empty in standard encrpyter constructor");
    }

    private void a(char[] arrc, int n2) {
        if (arrc != null && arrc.length > 0) {
            this.a.a(arrc);
            this.b = this.a(12);
            this.a.a(arrc);
            this.b[11] = (byte)(n2 >>> 24);
            this.b[10] = (byte)(n2 >>> 16);
            if (this.b.length >= 12) {
                this.a(this.b);
                return;
            }
            throw new a("invalid header bytes generated, cannot perform standard encryption");
        }
        throw new a("input password is null or empty, cannot initialize standard encrypter");
    }

    protected byte a(byte by2) {
        byte by3 = (byte)(this.a.a() & 255 ^ by2);
        this.a.a(by2);
        return by3;
    }

    public int a(byte[] arrby) {
        if (arrby != null) {
            return this.a(arrby, 0, arrby.length);
        }
        throw new NullPointerException();
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @Override
    public int a(byte[] arrby, int n2, int n3) {
        if (n3 < 0) {
            throw new a("invalid length specified to decrpyt data");
        }
        int n4 = n2;
        while (n4 < n2 + n3) {
            try {
                arrby[n4] = this.a(arrby[n4]);
                ++n4;
                continue;
            }
            catch (Exception exception) {}
            throw new a(exception);
        }
        return n3;
    }

    public byte[] a() {
        return this.b;
    }

    protected byte[] a(int n2) {
        if (n2 > 0) {
            byte[] arrby = new byte[n2];
            Random random = new Random();
            n2 = 0;
            do {
                if (n2 >= arrby.length) {
                    return arrby;
                }
                arrby[n2] = this.a((byte)random.nextInt(256));
                ++n2;
            } while (true);
        }
        throw new a("size is either 0 or less than 0, cannot generate header for standard encryptor");
    }
}

