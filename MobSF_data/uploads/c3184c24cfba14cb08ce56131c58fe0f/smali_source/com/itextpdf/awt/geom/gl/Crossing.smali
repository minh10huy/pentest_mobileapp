.class public Lcom/itextpdf/awt/geom/gl/Crossing;
.super Ljava/lang/Object;


# annotations
.annotation system Ldalvik/annotation/MemberClasses;
    value = {
        Lcom/itextpdf/awt/geom/gl/Crossing$CubicCurve;,
        Lcom/itextpdf/awt/geom/gl/Crossing$QuadCurve;
    }
.end annotation


# static fields
.field public static final CROSSING:I = 0xff

.field static final DELTA:D = 1.0E-5

.field static final ROOT_DELTA:D = 1.0E-10

.field static final UNKNOWN:I = 0xfe


# direct methods
.method public constructor <init>()V
    .registers 1

    invoke-direct {p0}, Ljava/lang/Object;-><init>()V

    return-void
.end method

.method static crossBound([DIDD)I
    .registers 14

    const/4 v0, 0x0

    if-nez p1, :cond_4

    return v0

    :cond_4
    const/4 v1, 0x2

    const/4 v2, 0x2

    const/4 v3, 0x0

    const/4 v4, 0x0

    :goto_8
    const/16 v5, 0xff

    if-ge v2, p1, :cond_21

    aget-wide v6, p0, v2

    cmpg-double v6, v6, p2

    if-gez v6, :cond_15

    add-int/lit8 v4, v4, 0x1

    goto :goto_1d

    :cond_15
    aget-wide v6, p0, v2

    cmpl-double v6, v6, p4

    if-lez v6, :cond_20

    add-int/lit8 v3, v3, 0x1

    :goto_1d
    add-int/lit8 v2, v2, 0x4

    goto :goto_8

    :cond_20
    return v5

    :cond_21
    if-nez v3, :cond_24

    return v0

    :cond_24
    if-eqz v4, :cond_52

    invoke-static {p0, p1}, Lcom/itextpdf/awt/geom/gl/Crossing;->sortBound([DI)V

    aget-wide p2, p0, v1

    cmpl-double p2, p2, p4

    const/4 p3, 0x1

    if-lez p2, :cond_32

    const/4 p2, 0x1

    goto :goto_33

    :cond_32
    const/4 p2, 0x0

    :goto_33
    const/4 v1, 0x6

    :goto_34
    if-ge v1, p1, :cond_52

    aget-wide v2, p0, v1

    cmpl-double v2, v2, p4

    if-lez v2, :cond_3e

    const/4 v2, 0x1

    goto :goto_3f

    :cond_3e
    const/4 v2, 0x0

    :goto_3f
    if-eq p2, v2, :cond_4e

    add-int/lit8 p2, v1, 0x1

    aget-wide v3, p0, p2

    add-int/lit8 p2, v1, -0x3

    aget-wide v6, p0, p2

    cmpl-double p2, v3, v6

    if-eqz p2, :cond_4e

    return v5

    :cond_4e
    add-int/lit8 v1, v1, 0x4

    move p2, v2

    goto :goto_34

    :cond_52
    const/16 p0, 0xfe

    return p0
.end method

.method public static crossCubic(DDDDDDDDDD)I
    .registers 38

    cmpg-double v0, p16, p0

    const/4 v1, 0x0

    if-gez v0, :cond_11

    cmpg-double v2, p16, p4

    if-gez v2, :cond_11

    cmpg-double v2, p16, p8

    if-gez v2, :cond_11

    cmpg-double v2, p16, p12

    if-ltz v2, :cond_3d

    :cond_11
    cmpl-double v2, p16, p0

    if-lez v2, :cond_21

    cmpl-double v3, p16, p4

    if-lez v3, :cond_21

    cmpl-double v3, p16, p8

    if-lez v3, :cond_21

    cmpl-double v3, p16, p12

    if-gtz v3, :cond_3d

    :cond_21
    cmpl-double v3, p18, p2

    if-lez v3, :cond_31

    cmpl-double v3, p18, p6

    if-lez v3, :cond_31

    cmpl-double v3, p18, p10

    if-lez v3, :cond_31

    cmpl-double v3, p18, p14

    if-gtz v3, :cond_3d

    :cond_31
    cmpl-double v3, p0, p4

    if-nez v3, :cond_3e

    cmpl-double v3, p4, p8

    if-nez v3, :cond_3e

    cmpl-double v3, p8, p12

    if-nez v3, :cond_3e

    :cond_3d
    return v1

    :cond_3e
    cmpg-double v3, p18, p2

    if-gez v3, :cond_6a

    cmpg-double v3, p18, p6

    if-gez v3, :cond_6a

    cmpg-double v3, p18, p10

    if-gez v3, :cond_6a

    cmpg-double v3, p18, p14

    if-gez v3, :cond_6a

    if-eqz v2, :cond_6a

    cmpl-double v2, p16, p12

    if-eqz v2, :cond_6a

    cmpg-double v2, p0, p12

    if-gez v2, :cond_62

    cmpg-double v0, p0, p16

    if-gez v0, :cond_61

    cmpg-double v0, p16, p12

    if-gez v0, :cond_61

    const/4 v1, 0x1

    :cond_61
    return v1

    :cond_62
    cmpg-double v2, p12, p16

    if-gez v2, :cond_69

    if-gez v0, :cond_69

    const/4 v1, -0x1

    :cond_69
    return v1

    :cond_6a
    new-instance v3, Lcom/itextpdf/awt/geom/gl/Crossing$CubicCurve;

    move-object v0, v3

    move-wide/from16 v1, p0

    move-object/from16 v17, v3

    move-wide/from16 v3, p2

    move-wide/from16 v5, p4

    move-wide/from16 v7, p6

    move-wide/from16 v9, p8

    move-wide/from16 v11, p10

    move-wide/from16 v13, p12

    move-wide/from16 v15, p14

    invoke-direct/range {v0 .. v16}, Lcom/itextpdf/awt/geom/gl/Crossing$CubicCurve;-><init>(DDDDDDDD)V

    sub-double v0, p16, p0

    sub-double v2, p18, p2

    const/4 v4, 0x3

    new-array v4, v4, [D

    move-object/from16 v5, v17

    invoke-virtual {v5, v4, v0, v1}, Lcom/itextpdf/awt/geom/gl/Crossing$CubicCurve;->solvePoint([DD)I

    move-result v0

    move-object/from16 p0, v5

    move-object/from16 p1, v4

    move/from16 p2, v0

    move-wide/from16 p3, v2

    move-wide/from16 p5, v2

    invoke-virtual/range {p0 .. p6}, Lcom/itextpdf/awt/geom/gl/Crossing$CubicCurve;->cross([DIDD)I

    move-result v0

    return v0
.end method

.method public static crossLine(DDDDDD)I
    .registers 16

    cmpg-double v0, p8, p0

    const/4 v1, 0x0

    if-gez v0, :cond_9

    cmpg-double v0, p8, p4

    if-ltz v0, :cond_1d

    :cond_9
    cmpl-double v0, p8, p0

    if-lez v0, :cond_11

    cmpl-double v2, p8, p4

    if-gtz v2, :cond_1d

    :cond_11
    cmpl-double v2, p10, p2

    if-lez v2, :cond_19

    cmpl-double v2, p10, p6

    if-gtz v2, :cond_1d

    :cond_19
    cmpl-double v2, p0, p4

    if-nez v2, :cond_1e

    :cond_1d
    return v1

    :cond_1e
    cmpg-double v2, p10, p2

    if-gez v2, :cond_27

    cmpg-double v2, p10, p6

    if-gez v2, :cond_27

    goto :goto_36

    :cond_27
    const/4 v2, 0x0

    sub-double/2addr p6, p2

    sub-double v2, p8, p0

    mul-double p6, p6, v2

    sub-double v2, p4, p0

    div-double/2addr p6, v2

    sub-double/2addr p10, p2

    cmpg-double p2, p6, p10

    if-gtz p2, :cond_36

    return v1

    :cond_36
    :goto_36
    const/4 p2, -0x1

    if-nez v0, :cond_3f

    cmpg-double p0, p0, p4

    if-gez p0, :cond_3e

    const/4 p2, 0x0

    :cond_3e
    return p2

    :cond_3f
    cmpl-double p3, p8, p4

    const/4 p6, 0x1

    if-nez p3, :cond_4b

    cmpg-double p0, p0, p4

    if-gez p0, :cond_49

    goto :goto_4a

    :cond_49
    const/4 p6, 0x0

    :goto_4a
    return p6

    :cond_4b
    cmpg-double p0, p0, p4

    if-gez p0, :cond_50

    const/4 p2, 0x1

    :cond_50
    return p2
.end method

.method public static crossPath(Lcom/itextpdf/awt/geom/PathIterator;DD)I
    .registers 36

    const/4 v0, 0x6

    new-array v0, v0, [D

    const/4 v1, 0x0

    const-wide/16 v2, 0x0

    move-wide v4, v2

    move-wide v6, v4

    move-wide/from16 v25, v6

    const/16 v24, 0x0

    :goto_c
    invoke-interface/range {p0 .. p0}, Lcom/itextpdf/awt/geom/PathIterator;->isDone()Z

    move-result v8

    if-nez v8, :cond_c0

    move-object/from16 v14, p0

    invoke-interface {v14, v0}, Lcom/itextpdf/awt/geom/PathIterator;->currentSegment([D)I

    move-result v8

    const/4 v15, 0x3

    const/4 v12, 0x2

    const/16 v16, 0x1

    packed-switch v8, :pswitch_data_d6

    goto/16 :goto_ad

    :pswitch_21
    cmpl-double v8, v6, v25

    if-nez v8, :cond_29

    cmpl-double v8, v4, v2

    if-eqz v8, :cond_ad

    :cond_29
    move-wide v8, v2

    move-wide/from16 v10, v25

    move-wide/from16 v12, p1

    move-wide/from16 v14, p3

    invoke-static/range {v4 .. v15}, Lcom/itextpdf/awt/geom/gl/Crossing;->crossLine(DDDDDD)I

    move-result v4

    add-int v24, v24, v4

    move-wide v4, v2

    move-wide/from16 v6, v25

    goto/16 :goto_ad

    :pswitch_3b
    aget-wide v8, v0, v1

    aget-wide v10, v0, v16

    aget-wide v12, v0, v12

    aget-wide v14, v0, v15

    const/16 v16, 0x4

    aget-wide v27, v0, v16

    move-wide/from16 v16, v27

    const/16 v18, 0x5

    aget-wide v29, v0, v18

    move-wide/from16 v18, v29

    move-wide/from16 v20, p1

    move-wide/from16 v22, p3

    invoke-static/range {v4 .. v23}, Lcom/itextpdf/awt/geom/gl/Crossing;->crossCubic(DDDDDDDDDD)I

    move-result v4

    add-int v24, v24, v4

    move-wide/from16 v4, v27

    move-wide/from16 v6, v29

    goto :goto_ad

    :pswitch_5e
    aget-wide v8, v0, v1

    aget-wide v10, v0, v16

    aget-wide v20, v0, v12

    aget-wide v22, v0, v15

    move-wide/from16 v12, v20

    move-wide/from16 v14, v22

    move-wide/from16 v16, p1

    move-wide/from16 v18, p3

    invoke-static/range {v4 .. v19}, Lcom/itextpdf/awt/geom/gl/Crossing;->crossQuad(DDDDDDDD)I

    move-result v4

    add-int v24, v24, v4

    move-wide/from16 v4, v20

    move-wide/from16 v6, v22

    goto :goto_ad

    :pswitch_79
    aget-wide v17, v0, v1

    aget-wide v19, v0, v16

    move-wide/from16 v8, v17

    move-wide/from16 v10, v19

    move-wide/from16 v12, p1

    move-wide/from16 v14, p3

    invoke-static/range {v4 .. v15}, Lcom/itextpdf/awt/geom/gl/Crossing;->crossLine(DDDDDD)I

    move-result v4

    add-int v24, v24, v4

    move-wide/from16 v4, v17

    move-wide/from16 v6, v19

    goto :goto_ad

    :pswitch_90
    cmpl-double v8, v4, v2

    if-nez v8, :cond_98

    cmpl-double v8, v6, v25

    if-eqz v8, :cond_a5

    :cond_98
    move-wide v8, v2

    move-wide/from16 v10, v25

    move-wide/from16 v12, p1

    move-wide/from16 v14, p3

    invoke-static/range {v4 .. v15}, Lcom/itextpdf/awt/geom/gl/Crossing;->crossLine(DDDDDD)I

    move-result v2

    add-int v24, v24, v2

    :cond_a5
    aget-wide v2, v0, v1

    aget-wide v4, v0, v16

    move-wide v6, v4

    move-wide/from16 v25, v6

    move-wide v4, v2

    :cond_ad
    :goto_ad
    cmpl-double v8, p1, v4

    if-nez v8, :cond_bb

    cmpl-double v8, p3, v6

    if-nez v8, :cond_bb

    move-wide v10, v2

    move-wide v6, v4

    move-wide/from16 v8, v25

    move-wide v12, v8

    goto :goto_c7

    :cond_bb
    invoke-interface/range {p0 .. p0}, Lcom/itextpdf/awt/geom/PathIterator;->next()V

    goto/16 :goto_c

    :cond_c0
    move-wide v10, v2

    move-wide v8, v6

    move/from16 v1, v24

    move-wide/from16 v12, v25

    move-wide v6, v4

    :goto_c7
    cmpl-double v0, v8, v12

    if-eqz v0, :cond_d4

    move-wide/from16 v14, p1

    move-wide/from16 v16, p3

    invoke-static/range {v6 .. v17}, Lcom/itextpdf/awt/geom/gl/Crossing;->crossLine(DDDDDD)I

    move-result v0

    add-int/2addr v1, v0

    :cond_d4
    return v1

    nop

    :pswitch_data_d6
    .packed-switch 0x0
        :pswitch_90
        :pswitch_79
        :pswitch_5e
        :pswitch_3b
        :pswitch_21
    .end packed-switch
.end method

.method public static crossQuad(DDDDDDDD)I
    .registers 30

    cmpg-double v0, p12, p0

    const/4 v1, 0x0

    if-gez v0, :cond_d

    cmpg-double v2, p12, p4

    if-gez v2, :cond_d

    cmpg-double v2, p12, p8

    if-ltz v2, :cond_2d

    :cond_d
    cmpl-double v2, p12, p0

    if-lez v2, :cond_19

    cmpl-double v3, p12, p4

    if-lez v3, :cond_19

    cmpl-double v3, p12, p8

    if-gtz v3, :cond_2d

    :cond_19
    cmpl-double v3, p14, p2

    if-lez v3, :cond_25

    cmpl-double v3, p14, p6

    if-lez v3, :cond_25

    cmpl-double v3, p14, p10

    if-gtz v3, :cond_2d

    :cond_25
    cmpl-double v3, p0, p4

    if-nez v3, :cond_2e

    cmpl-double v3, p4, p8

    if-nez v3, :cond_2e

    :cond_2d
    return v1

    :cond_2e
    cmpg-double v3, p14, p2

    if-gez v3, :cond_56

    cmpg-double v3, p14, p6

    if-gez v3, :cond_56

    cmpg-double v3, p14, p10

    if-gez v3, :cond_56

    if-eqz v2, :cond_56

    cmpl-double v2, p12, p8

    if-eqz v2, :cond_56

    cmpg-double v2, p0, p8

    if-gez v2, :cond_4e

    cmpg-double v0, p0, p12

    if-gez v0, :cond_4d

    cmpg-double v0, p12, p8

    if-gez v0, :cond_4d

    const/4 v1, 0x1

    :cond_4d
    return v1

    :cond_4e
    cmpg-double v2, p8, p12

    if-gez v2, :cond_55

    if-gez v0, :cond_55

    const/4 v1, -0x1

    :cond_55
    return v1

    :cond_56
    new-instance v3, Lcom/itextpdf/awt/geom/gl/Crossing$QuadCurve;

    move-object v0, v3

    move-wide v1, p0

    move-object v13, v3

    move-wide/from16 v3, p2

    move-wide/from16 v5, p4

    move-wide/from16 v7, p6

    move-wide/from16 v9, p8

    move-wide/from16 v11, p10

    invoke-direct/range {v0 .. v12}, Lcom/itextpdf/awt/geom/gl/Crossing$QuadCurve;-><init>(DDDDDD)V

    sub-double v0, p12, p0

    sub-double v2, p14, p2

    const/4 v4, 0x3

    new-array v4, v4, [D

    move-object v5, v13

    invoke-virtual {v5, v4, v0, v1}, Lcom/itextpdf/awt/geom/gl/Crossing$QuadCurve;->solvePoint([DD)I

    move-result v0

    move-object p0, v5

    move-object p1, v4

    move/from16 p2, v0

    move-wide/from16 p3, v2

    move-wide/from16 p5, v2

    invoke-virtual/range {p0 .. p6}, Lcom/itextpdf/awt/geom/gl/Crossing$QuadCurve;->cross([DIDD)I

    move-result v0

    return v0
.end method

.method public static crossShape(Lcom/itextpdf/awt/geom/Shape;DD)I
    .registers 6

    invoke-interface {p0}, Lcom/itextpdf/awt/geom/Shape;->getBounds2D()Lcom/itextpdf/awt/geom/Rectangle2D;

    move-result-object v0

    invoke-virtual {v0, p1, p2, p3, p4}, Lcom/itextpdf/awt/geom/Rectangle2D;->contains(DD)Z

    move-result v0

    if-nez v0, :cond_c

    const/4 p0, 0x0

    return p0

    :cond_c
    const/4 v0, 0x0

    invoke-interface {p0, v0}, Lcom/itextpdf/awt/geom/Shape;->getPathIterator(Lcom/itextpdf/awt/geom/AffineTransform;)Lcom/itextpdf/awt/geom/PathIterator;

    move-result-object p0

    invoke-static {p0, p1, p2, p3, p4}, Lcom/itextpdf/awt/geom/gl/Crossing;->crossPath(Lcom/itextpdf/awt/geom/PathIterator;DD)I

    move-result p0

    return p0
.end method

.method static fixRoots([DI)I
    .registers 10

    const/4 v0, 0x0

    const/4 v1, 0x0

    :goto_2
    if-ge v0, p1, :cond_21

    add-int/lit8 v2, v0, 0x1

    move v3, v2

    :goto_7
    if-ge v3, p1, :cond_18

    aget-wide v4, p0, v0

    aget-wide v6, p0, v3

    sub-double/2addr v4, v6

    invoke-static {v4, v5}, Lcom/itextpdf/awt/geom/gl/Crossing;->isZero(D)Z

    move-result v4

    if-eqz v4, :cond_15

    goto :goto_1f

    :cond_15
    add-int/lit8 v3, v3, 0x1

    goto :goto_7

    :cond_18
    add-int/lit8 v3, v1, 0x1

    aget-wide v4, p0, v0

    aput-wide v4, p0, v1

    move v1, v3

    :goto_1f
    move v0, v2

    goto :goto_2

    :cond_21
    return v1
.end method

.method public static intersectCubic(DDDDDDDDDDDD)I
    .registers 54

    cmpg-double v0, p20, p0

    const/16 v23, 0x0

    if-gez v0, :cond_12

    cmpg-double v0, p20, p4

    if-gez v0, :cond_12

    cmpg-double v0, p20, p8

    if-gez v0, :cond_12

    cmpg-double v0, p20, p12

    if-ltz v0, :cond_32

    :cond_12
    cmpl-double v0, p16, p0

    if-lez v0, :cond_22

    cmpl-double v1, p16, p4

    if-lez v1, :cond_22

    cmpl-double v1, p16, p8

    if-lez v1, :cond_22

    cmpl-double v1, p16, p12

    if-gtz v1, :cond_32

    :cond_22
    cmpl-double v1, p18, p2

    if-lez v1, :cond_33

    cmpl-double v1, p18, p6

    if-lez v1, :cond_33

    cmpl-double v1, p18, p10

    if-lez v1, :cond_33

    cmpl-double v1, p18, p14

    if-lez v1, :cond_33

    :cond_32
    return v23

    :cond_33
    cmpg-double v1, p22, p2

    if-gez v1, :cond_63

    cmpg-double v1, p22, p6

    if-gez v1, :cond_63

    cmpg-double v1, p22, p10

    if-gez v1, :cond_63

    cmpg-double v1, p22, p14

    if-gez v1, :cond_63

    if-eqz v0, :cond_63

    cmpl-double v0, p16, p12

    if-eqz v0, :cond_63

    cmpg-double v0, p0, p12

    if-gez v0, :cond_58

    cmpg-double v0, p0, p16

    if-gez v0, :cond_57

    cmpg-double v0, p16, p12

    if-gez v0, :cond_57

    const/16 v23, 0x1

    :cond_57
    return v23

    :cond_58
    cmpg-double v0, p12, p16

    if-gez v0, :cond_62

    cmpg-double v0, p16, p0

    if-gez v0, :cond_62

    const/16 v23, -0x1

    :cond_62
    return v23

    :cond_63
    new-instance v13, Lcom/itextpdf/awt/geom/gl/Crossing$CubicCurve;

    move-object v0, v13

    move-wide/from16 v1, p0

    move-wide/from16 v3, p2

    move-wide/from16 v5, p4

    move-wide/from16 v7, p6

    move-wide/from16 v9, p8

    move-wide/from16 v11, p10

    move-object/from16 v24, v13

    move-wide/from16 v13, p12

    move-wide/from16 v15, p14

    invoke-direct/range {v0 .. v16}, Lcom/itextpdf/awt/geom/gl/Crossing$CubicCurve;-><init>(DDDDDDDD)V

    sub-double v0, p16, p0

    sub-double v11, p18, p2

    sub-double v2, p20, p0

    sub-double v13, p22, p2

    const/4 v4, 0x3

    new-array v15, v4, [D

    new-array v10, v4, [D

    move-object/from16 v9, v24

    invoke-virtual {v9, v15, v0, v1}, Lcom/itextpdf/awt/geom/gl/Crossing$CubicCurve;->solvePoint([DD)I

    move-result v16

    invoke-virtual {v9, v10, v2, v3}, Lcom/itextpdf/awt/geom/gl/Crossing$CubicCurve;->solvePoint([DD)I

    move-result v17

    if-nez v16, :cond_97

    if-nez v17, :cond_97

    return v23

    :cond_97
    const-wide v4, 0x3ee4f8b588e368f1L

    sub-double v19, v0, v4

    add-double v21, v2, v4

    const/16 v0, 0x28

    new-array v7, v0, [D

    const/4 v2, 0x0

    const/16 v18, 0x0

    const/16 v23, 0x0

    move-object v0, v9

    move-object v1, v7

    move-object v3, v15

    move/from16 v4, v16

    move-wide/from16 v5, v19

    move-object/from16 v24, v7

    move-wide/from16 v7, v21

    move-object/from16 v25, v9

    move/from16 v9, v18

    move-object/from16 v26, v10

    move/from16 v10, v23

    invoke-virtual/range {v0 .. v10}, Lcom/itextpdf/awt/geom/gl/Crossing$CubicCurve;->addBound([DI[DIDDZI)I

    move-result v2

    const/4 v9, 0x0

    const/4 v10, 0x1

    move-object/from16 v0, v25

    move-object/from16 v1, v24

    move-object/from16 v3, v26

    move/from16 v4, v17

    invoke-virtual/range {v0 .. v10}, Lcom/itextpdf/awt/geom/gl/Crossing$CubicCurve;->addBound([DI[DIDDZI)I

    move-result v2

    move-object/from16 v10, v25

    move-object/from16 v9, v26

    invoke-virtual {v10, v9}, Lcom/itextpdf/awt/geom/gl/Crossing$CubicCurve;->solveExtremX([D)I

    move-result v4

    const/16 v17, 0x1

    const/16 v18, 0x2

    move-object v0, v10

    move-object v3, v9

    move-object/from16 v27, v15

    move-object v15, v9

    move/from16 v9, v17

    move-wide/from16 v28, v13

    move-object v13, v10

    move/from16 v10, v18

    invoke-virtual/range {v0 .. v10}, Lcom/itextpdf/awt/geom/gl/Crossing$CubicCurve;->addBound([DI[DIDDZI)I

    move-result v2

    invoke-virtual {v13, v15}, Lcom/itextpdf/awt/geom/gl/Crossing$CubicCurve;->solveExtremY([D)I

    move-result v4

    const/4 v9, 0x1

    const/4 v10, 0x4

    move-object v0, v13

    move-object v3, v15

    invoke-virtual/range {v0 .. v10}, Lcom/itextpdf/awt/geom/gl/Crossing$CubicCurve;->addBound([DI[DIDDZI)I

    move-result v0

    cmpg-double v1, p16, p0

    if-gez v1, :cond_112

    cmpg-double v1, p0, p20

    if-gez v1, :cond_112

    add-int/lit8 v1, v0, 0x1

    const-wide/16 v2, 0x0

    aput-wide v2, v24, v0

    add-int/lit8 v0, v1, 0x1

    aput-wide v2, v24, v1

    add-int/lit8 v1, v0, 0x1

    aput-wide v2, v24, v0

    add-int/lit8 v0, v1, 0x1

    const-wide/high16 v2, 0x4018000000000000L

    aput-wide v2, v24, v1

    :cond_112
    cmpg-double v1, p16, p12

    if-gez v1, :cond_132

    cmpg-double v1, p12, p20

    if-gez v1, :cond_132

    add-int/lit8 v1, v0, 0x1

    const-wide/high16 v2, 0x3ff0000000000000L

    aput-wide v2, v24, v0

    add-int/lit8 v0, v1, 0x1

    iget-wide v2, v13, Lcom/itextpdf/awt/geom/gl/Crossing$CubicCurve;->ax:D

    aput-wide v2, v24, v1

    add-int/lit8 v1, v0, 0x1

    iget-wide v2, v13, Lcom/itextpdf/awt/geom/gl/Crossing$CubicCurve;->ay:D

    aput-wide v2, v24, v0

    add-int/lit8 v0, v1, 0x1

    const-wide/high16 v2, 0x401c000000000000L

    aput-wide v2, v24, v1

    :cond_132
    move-object/from16 p0, v24

    move/from16 p1, v0

    move-wide/from16 p2, v11

    move-wide/from16 p4, v28

    invoke-static/range {p0 .. p5}, Lcom/itextpdf/awt/geom/gl/Crossing;->crossBound([DIDD)I

    move-result v0

    const/16 v1, 0xfe

    if-eq v0, v1, :cond_143

    return v0

    :cond_143
    move-object/from16 p0, v13

    move-object/from16 p1, v27

    move/from16 p2, v16

    move-wide/from16 p3, v11

    move-wide/from16 p5, v28

    invoke-virtual/range {p0 .. p6}, Lcom/itextpdf/awt/geom/gl/Crossing$CubicCurve;->cross([DIDD)I

    move-result v0

    return v0
.end method

.method public static intersectLine(DDDDDDDD)I
    .registers 31

    cmpg-double v7, p12, p0

    const/4 v8, 0x0

    if-gez v7, :cond_9

    cmpg-double v7, p12, p4

    if-ltz v7, :cond_19

    :cond_9
    cmpl-double v7, p8, p0

    if-lez v7, :cond_11

    cmpl-double v9, p8, p4

    if-gtz v9, :cond_19

    :cond_11
    cmpl-double v9, p10, p2

    if-lez v9, :cond_1a

    cmpl-double v9, p10, p6

    if-lez v9, :cond_1a

    :cond_19
    return v8

    :cond_1a
    cmpg-double v9, p14, p2

    if-gez v9, :cond_23

    cmpg-double v9, p14, p6

    if-gez v9, :cond_23

    goto :goto_6f

    :cond_23
    cmpl-double v9, p0, p4

    const/16 v10, 0xff

    if-nez v9, :cond_2a

    return v10

    :cond_2a
    cmpg-double v9, p0, p4

    if-gez v9, :cond_40

    cmpg-double v9, p0, p8

    if-gez v9, :cond_35

    move-wide/from16 v11, p8

    goto :goto_36

    :cond_35
    move-wide v11, p0

    :goto_36
    cmpg-double v9, p4, p12

    if-gez v9, :cond_3d

    move-wide/from16 v5, p4

    goto :goto_4e

    :cond_3d
    move-wide/from16 v5, p12

    goto :goto_4e

    :cond_40
    cmpg-double v9, p4, p8

    if-gez v9, :cond_47

    move-wide/from16 v11, p8

    goto :goto_49

    :cond_47
    move-wide/from16 v11, p4

    :goto_49
    cmpg-double v9, p0, p12

    if-gez v9, :cond_3d

    move-wide v5, p0

    :goto_4e
    const/4 v9, 0x0

    sub-double v3, p6, p2

    sub-double v13, p4, p0

    div-double/2addr v3, v13

    sub-double/2addr v11, p0

    mul-double v11, v11, v3

    add-double v11, v11, p2

    sub-double/2addr v5, p0

    mul-double v3, v3, v5

    add-double v3, v3, p2

    cmpg-double v1, v11, p10

    if-gez v1, :cond_67

    cmpg-double v1, v3, p10

    if-gez v1, :cond_67

    return v8

    :cond_67
    cmpl-double v1, v11, p14

    if-lez v1, :cond_a1

    cmpl-double v1, v3, p14

    if-lez v1, :cond_a1

    :goto_6f
    cmpl-double v1, p0, p4

    if-nez v1, :cond_74

    return v8

    :cond_74
    const/4 v1, -0x1

    if-nez v7, :cond_7e

    cmpg-double v0, p0, p4

    if-gez v0, :cond_7c

    goto :goto_7d

    :cond_7c
    const/4 v8, -0x1

    :goto_7d
    return v8

    :cond_7e
    cmpl-double v2, p8, p4

    const/4 v3, 0x1

    if-nez v2, :cond_89

    cmpg-double v0, p0, p4

    if-gez v0, :cond_88

    const/4 v8, 0x1

    :cond_88
    return v8

    :cond_89
    cmpg-double v2, p0, p4

    if-gez v2, :cond_97

    cmpg-double v0, p0, p8

    if-gez v0, :cond_96

    cmpg-double v0, p8, p4

    if-gez v0, :cond_96

    const/4 v8, 0x1

    :cond_96
    return v8

    :cond_97
    cmpg-double v2, p4, p8

    if-gez v2, :cond_a0

    cmpg-double v0, p8, p0

    if-gez v0, :cond_a0

    const/4 v8, -0x1

    :cond_a0
    return v8

    :cond_a1
    return v10
.end method

.method public static intersectPath(Lcom/itextpdf/awt/geom/PathIterator;DDDD)I
    .registers 48

    const/4 v0, 0x6

    new-array v0, v0, [D

    add-double v25, p1, p5

    add-double v27, p3, p7

    const/16 v29, 0x0

    const-wide/16 v1, 0x0

    move-wide v3, v1

    move-wide/from16 v30, v3

    move-wide/from16 v32, v30

    const/16 v34, 0x0

    :goto_12
    invoke-interface/range {p0 .. p0}, Lcom/itextpdf/awt/geom/PathIterator;->isDone()Z

    move-result v5

    const/16 v15, 0xff

    if-nez v5, :cond_da

    move-object/from16 v13, p0

    invoke-interface {v13, v0}, Lcom/itextpdf/awt/geom/PathIterator;->currentSegment([D)I

    move-result v5

    const/4 v11, 0x3

    const/4 v9, 0x2

    const/16 v17, 0x1

    packed-switch v5, :pswitch_data_f6

    move-wide/from16 v35, v1

    const/4 v1, 0x0

    goto/16 :goto_ce

    :pswitch_2c
    cmpl-double v5, v3, v30

    if-nez v5, :cond_37

    cmpl-double v5, v1, v32

    if-eqz v5, :cond_35

    goto :goto_37

    :cond_35
    const/4 v1, 0x0

    goto :goto_47

    :cond_37
    :goto_37
    move-wide/from16 v5, v32

    move-wide/from16 v7, v30

    move-wide/from16 v9, p1

    move-wide/from16 v11, p3

    move-wide/from16 v13, v25

    move-wide/from16 v15, v27

    invoke-static/range {v1 .. v16}, Lcom/itextpdf/awt/geom/gl/Crossing;->intersectLine(DDDDDDDD)I

    move-result v1

    :goto_47
    move-wide/from16 v3, v30

    move-wide/from16 v35, v32

    goto :goto_a2

    :pswitch_4c
    aget-wide v5, v0, v29

    aget-wide v7, v0, v17

    aget-wide v9, v0, v9

    aget-wide v11, v0, v11

    const/4 v13, 0x4

    aget-wide v35, v0, v13

    move-wide/from16 v13, v35

    const/4 v15, 0x5

    aget-wide v37, v0, v15

    move-wide/from16 v15, v37

    move-wide/from16 v17, p1

    move-wide/from16 v19, p3

    move-wide/from16 v21, v25

    move-wide/from16 v23, v27

    invoke-static/range {v1 .. v24}, Lcom/itextpdf/awt/geom/gl/Crossing;->intersectCubic(DDDDDDDDDDDD)I

    move-result v1

    move-wide/from16 v3, v37

    goto :goto_a2

    :pswitch_6d
    aget-wide v5, v0, v29

    aget-wide v7, v0, v17

    aget-wide v21, v0, v9

    move-wide/from16 v9, v21

    aget-wide v23, v0, v11

    move-wide/from16 v11, v23

    move-wide/from16 v13, p1

    move-wide/from16 v15, p3

    move-wide/from16 v17, v25

    move-wide/from16 v19, v27

    invoke-static/range {v1 .. v20}, Lcom/itextpdf/awt/geom/gl/Crossing;->intersectQuad(DDDDDDDDDD)I

    move-result v1

    move-wide/from16 v35, v21

    move-wide/from16 v3, v23

    goto :goto_a2

    :pswitch_8a
    aget-wide v18, v0, v29

    aget-wide v20, v0, v17

    move-wide/from16 v5, v18

    move-wide/from16 v7, v20

    move-wide/from16 v9, p1

    move-wide/from16 v11, p3

    move-wide/from16 v13, v25

    move-wide/from16 v15, v27

    invoke-static/range {v1 .. v16}, Lcom/itextpdf/awt/geom/gl/Crossing;->intersectLine(DDDDDDDD)I

    move-result v1

    move-wide/from16 v35, v18

    move-wide/from16 v3, v20

    :goto_a2
    const/16 v15, 0xff

    goto :goto_ce

    :pswitch_a5
    cmpl-double v5, v1, v32

    if-nez v5, :cond_b0

    cmpl-double v5, v3, v30

    if-eqz v5, :cond_ae

    goto :goto_b0

    :cond_ae
    const/4 v1, 0x0

    goto :goto_c0

    :cond_b0
    :goto_b0
    move-wide/from16 v5, v32

    move-wide/from16 v7, v30

    move-wide/from16 v9, p1

    move-wide/from16 v11, p3

    move-wide/from16 v13, v25

    move-wide/from16 v15, v27

    invoke-static/range {v1 .. v16}, Lcom/itextpdf/awt/geom/gl/Crossing;->intersectLine(DDDDDDDD)I

    move-result v1

    :goto_c0
    aget-wide v2, v0, v29

    aget-wide v4, v0, v17

    move-wide/from16 v32, v2

    move-wide/from16 v35, v32

    move-wide/from16 v30, v4

    const/16 v15, 0xff

    move-wide/from16 v3, v30

    :goto_ce
    if-ne v1, v15, :cond_d1

    return v15

    :cond_d1
    add-int v34, v34, v1

    invoke-interface/range {p0 .. p0}, Lcom/itextpdf/awt/geom/PathIterator;->next()V

    move-wide/from16 v1, v35

    goto/16 :goto_12

    :cond_da
    cmpl-double v0, v3, v30

    if-eqz v0, :cond_f5

    move-wide/from16 v5, v32

    move-wide/from16 v7, v30

    move-wide/from16 v9, p1

    move-wide/from16 v11, p3

    move-wide/from16 v13, v25

    const/16 v0, 0xff

    move-wide/from16 v15, v27

    invoke-static/range {v1 .. v16}, Lcom/itextpdf/awt/geom/gl/Crossing;->intersectLine(DDDDDDDD)I

    move-result v1

    if-ne v1, v0, :cond_f3

    return v0

    :cond_f3
    add-int v34, v34, v1

    :cond_f5
    return v34

    :pswitch_data_f6
    .packed-switch 0x0
        :pswitch_a5
        :pswitch_8a
        :pswitch_6d
        :pswitch_4c
        :pswitch_2c
    .end packed-switch
.end method

.method public static intersectQuad(DDDDDDDDDD)I
    .registers 48

    cmpg-double v0, p16, p0

    const/16 v19, 0x0

    if-gez v0, :cond_e

    cmpg-double v0, p16, p4

    if-gez v0, :cond_e

    cmpg-double v0, p16, p8

    if-ltz v0, :cond_26

    :cond_e
    cmpl-double v0, p12, p0

    if-lez v0, :cond_1a

    cmpl-double v1, p12, p4

    if-lez v1, :cond_1a

    cmpl-double v1, p12, p8

    if-gtz v1, :cond_26

    :cond_1a
    cmpl-double v1, p14, p2

    if-lez v1, :cond_27

    cmpl-double v1, p14, p6

    if-lez v1, :cond_27

    cmpl-double v1, p14, p10

    if-lez v1, :cond_27

    :cond_26
    return v19

    :cond_27
    cmpg-double v1, p18, p2

    if-gez v1, :cond_53

    cmpg-double v1, p18, p6

    if-gez v1, :cond_53

    cmpg-double v1, p18, p10

    if-gez v1, :cond_53

    if-eqz v0, :cond_53

    cmpl-double v0, p12, p8

    if-eqz v0, :cond_53

    cmpg-double v0, p0, p8

    if-gez v0, :cond_48

    cmpg-double v0, p0, p12

    if-gez v0, :cond_47

    cmpg-double v0, p12, p8

    if-gez v0, :cond_47

    const/16 v19, 0x1

    :cond_47
    return v19

    :cond_48
    cmpg-double v0, p8, p12

    if-gez v0, :cond_52

    cmpg-double v0, p12, p0

    if-gez v0, :cond_52

    const/16 v19, -0x1

    :cond_52
    return v19

    :cond_53
    new-instance v9, Lcom/itextpdf/awt/geom/gl/Crossing$QuadCurve;

    move-object v0, v9

    move-wide/from16 v1, p0

    move-wide/from16 v3, p2

    move-wide/from16 v5, p4

    move-wide/from16 v7, p6

    move-object/from16 v20, v9

    move-wide/from16 v9, p8

    move-wide/from16 v11, p10

    invoke-direct/range {v0 .. v12}, Lcom/itextpdf/awt/geom/gl/Crossing$QuadCurve;-><init>(DDDDDD)V

    sub-double v0, p12, p0

    sub-double v11, p14, p2

    sub-double v2, p16, p0

    sub-double v13, p18, p2

    const/4 v4, 0x3

    new-array v10, v4, [D

    new-array v9, v4, [D

    move-object/from16 v7, v20

    invoke-virtual {v7, v10, v0, v1}, Lcom/itextpdf/awt/geom/gl/Crossing$QuadCurve;->solvePoint([DD)I

    move-result v15

    invoke-virtual {v7, v9, v2, v3}, Lcom/itextpdf/awt/geom/gl/Crossing$QuadCurve;->solvePoint([DD)I

    move-result v16

    if-nez v15, :cond_83

    if-nez v16, :cond_83

    return v19

    :cond_83
    const-wide v4, 0x3ee4f8b588e368f1L

    sub-double v17, v0, v4

    add-double v19, v2, v4

    const/16 v0, 0x1c

    new-array v8, v0, [D

    const/4 v2, 0x0

    const/16 v21, 0x0

    const/16 v22, 0x0

    move-object v0, v7

    move-object v1, v8

    move-object v3, v10

    move v4, v15

    move-wide/from16 v5, v17

    move-object/from16 v23, v7

    move-object/from16 v24, v8

    move-wide/from16 v7, v19

    move-object/from16 v25, v9

    move/from16 v9, v21

    move-object/from16 v21, v10

    move/from16 v10, v22

    invoke-virtual/range {v0 .. v10}, Lcom/itextpdf/awt/geom/gl/Crossing$QuadCurve;->addBound([DI[DIDDZI)I

    move-result v2

    const/4 v9, 0x0

    const/4 v10, 0x1

    move-object/from16 v0, v23

    move-object/from16 v1, v24

    move-object/from16 v3, v25

    move/from16 v4, v16

    invoke-virtual/range {v0 .. v10}, Lcom/itextpdf/awt/geom/gl/Crossing$QuadCurve;->addBound([DI[DIDDZI)I

    move-result v2

    move-object/from16 v10, v23

    invoke-virtual {v10, v3}, Lcom/itextpdf/awt/geom/gl/Crossing$QuadCurve;->solveExtrem([D)I

    move-result v4

    const/4 v9, 0x1

    const/16 v16, 0x2

    move-object v0, v10

    move-wide/from16 v26, v13

    move-object v13, v10

    move/from16 v10, v16

    invoke-virtual/range {v0 .. v10}, Lcom/itextpdf/awt/geom/gl/Crossing$QuadCurve;->addBound([DI[DIDDZI)I

    move-result v0

    cmpg-double v1, p12, p0

    if-gez v1, :cond_ea

    cmpg-double v1, p0, p16

    if-gez v1, :cond_ea

    add-int/lit8 v1, v0, 0x1

    const-wide/16 v2, 0x0

    aput-wide v2, v24, v0

    add-int/lit8 v0, v1, 0x1

    aput-wide v2, v24, v1

    add-int/lit8 v1, v0, 0x1

    aput-wide v2, v24, v0

    add-int/lit8 v0, v1, 0x1

    const-wide/high16 v2, 0x4010000000000000L

    aput-wide v2, v24, v1

    :cond_ea
    cmpg-double v1, p12, p8

    if-gez v1, :cond_10a

    cmpg-double v1, p8, p16

    if-gez v1, :cond_10a

    add-int/lit8 v1, v0, 0x1

    const-wide/high16 v2, 0x3ff0000000000000L

    aput-wide v2, v24, v0

    add-int/lit8 v0, v1, 0x1

    iget-wide v2, v13, Lcom/itextpdf/awt/geom/gl/Crossing$QuadCurve;->ax:D

    aput-wide v2, v24, v1

    add-int/lit8 v1, v0, 0x1

    iget-wide v2, v13, Lcom/itextpdf/awt/geom/gl/Crossing$QuadCurve;->ay:D

    aput-wide v2, v24, v0

    add-int/lit8 v0, v1, 0x1

    const-wide/high16 v2, 0x4014000000000000L

    aput-wide v2, v24, v1

    :cond_10a
    move-object/from16 p0, v24

    move/from16 p1, v0

    move-wide/from16 p2, v11

    move-wide/from16 p4, v26

    invoke-static/range {p0 .. p5}, Lcom/itextpdf/awt/geom/gl/Crossing;->crossBound([DIDD)I

    move-result v0

    const/16 v1, 0xfe

    if-eq v0, v1, :cond_11b

    return v0

    :cond_11b
    move-object/from16 p0, v13

    move-object/from16 p1, v21

    move/from16 p2, v15

    move-wide/from16 p3, v11

    move-wide/from16 p5, v26

    invoke-virtual/range {p0 .. p6}, Lcom/itextpdf/awt/geom/gl/Crossing$QuadCurve;->cross([DIDD)I

    move-result v0

    return v0
.end method

.method public static intersectShape(Lcom/itextpdf/awt/geom/Shape;DDDD)I
    .registers 19

    invoke-interface {p0}, Lcom/itextpdf/awt/geom/Shape;->getBounds2D()Lcom/itextpdf/awt/geom/Rectangle2D;

    move-result-object v0

    move-wide v1, p1

    move-wide v3, p3

    move-wide v5, p5

    move-wide/from16 v7, p7

    invoke-virtual/range {v0 .. v8}, Lcom/itextpdf/awt/geom/Rectangle2D;->intersects(DDDD)Z

    move-result v0

    if-nez v0, :cond_11

    const/4 v0, 0x0

    return v0

    :cond_11
    const/4 v0, 0x0

    move-object v1, p0

    invoke-interface {p0, v0}, Lcom/itextpdf/awt/geom/Shape;->getPathIterator(Lcom/itextpdf/awt/geom/AffineTransform;)Lcom/itextpdf/awt/geom/PathIterator;

    move-result-object v1

    move-wide v2, p1

    move-wide v4, p3

    move-wide v6, p5

    move-wide/from16 v8, p7

    invoke-static/range {v1 .. v9}, Lcom/itextpdf/awt/geom/gl/Crossing;->intersectPath(Lcom/itextpdf/awt/geom/PathIterator;DDDD)I

    move-result v0

    return v0
.end method

.method public static isInsideEvenOdd(I)Z
    .registers 2

    const/4 v0, 0x1

    and-int/2addr p0, v0

    if-eqz p0, :cond_5

    goto :goto_6

    :cond_5
    const/4 v0, 0x0

    :goto_6
    return v0
.end method

.method public static isInsideNonZero(I)Z
    .registers 1

    if-eqz p0, :cond_4

    const/4 p0, 0x1

    goto :goto_5

    :cond_4
    const/4 p0, 0x0

    :goto_5
    return p0
.end method

.method public static isZero(D)Z
    .registers 4

    const-wide v0, -0x411b074a771c970fL

    cmpg-double v0, v0, p0

    if-gez v0, :cond_14

    const-wide v0, 0x3ee4f8b588e368f1L

    cmpg-double p0, p0, v0

    if-gez p0, :cond_14

    const/4 p0, 0x1

    goto :goto_15

    :cond_14
    const/4 p0, 0x0

    :goto_15
    return p0
.end method

.method public static solveCubic([D[D)I
    .registers 28

    move-object/from16 v1, p1

    const/4 v2, 0x3

    aget-wide v3, p0, v2

    const-wide/16 v5, 0x0

    cmpl-double v7, v3, v5

    if-nez v7, :cond_10

    invoke-static/range {p0 .. p1}, Lcom/itextpdf/awt/geom/gl/Crossing;->solveQuad([D[D)I

    move-result v0

    return v0

    :cond_10
    const/4 v7, 0x2

    aget-wide v8, p0, v7

    div-double/2addr v8, v3

    const/4 v10, 0x1

    aget-wide v11, p0, v10

    div-double/2addr v11, v3

    const/4 v13, 0x0

    aget-wide v14, p0, v13

    div-double/2addr v14, v3

    mul-double v3, v8, v8

    const-wide/high16 v16, 0x4008000000000000L

    mul-double v18, v11, v16

    sub-double v3, v3, v18

    const-wide/high16 v18, 0x4022000000000000L

    div-double v3, v3, v18

    const-wide/high16 v20, 0x4000000000000000L

    mul-double v22, v8, v20

    mul-double v22, v22, v8

    mul-double v22, v22, v8

    mul-double v18, v18, v8

    mul-double v18, v18, v11

    sub-double v22, v22, v18

    const-wide/high16 v11, 0x403b000000000000L

    mul-double v14, v14, v11

    add-double v22, v22, v14

    const-wide/high16 v11, 0x404b000000000000L

    div-double v22, v22, v11

    mul-double v11, v3, v3

    mul-double v11, v11, v3

    mul-double v14, v22, v22

    neg-double v8, v8

    div-double v8, v8, v16

    cmpg-double v0, v14, v11

    if-gez v0, :cond_86

    invoke-static {v11, v12}, Ljava/lang/Math;->sqrt(D)D

    move-result-wide v5

    div-double v22, v22, v5

    invoke-static/range {v22 .. v23}, Ljava/lang/Math;->acos(D)D

    move-result-wide v5

    div-double v5, v5, v16

    const-wide v11, 0x4000c152382d7365L

    const-wide/high16 v14, -0x4000000000000000L

    invoke-static {v3, v4}, Ljava/lang/Math;->sqrt(D)D

    move-result-wide v3

    mul-double v3, v3, v14

    invoke-static {v5, v6}, Ljava/lang/Math;->cos(D)D

    move-result-wide v14

    mul-double v14, v14, v3

    add-double/2addr v14, v8

    aput-wide v14, v1, v13

    add-double v13, v5, v11

    invoke-static {v13, v14}, Ljava/lang/Math;->cos(D)D

    move-result-wide v13

    mul-double v13, v13, v3

    add-double/2addr v13, v8

    aput-wide v13, v1, v10

    sub-double/2addr v5, v11

    invoke-static {v5, v6}, Ljava/lang/Math;->cos(D)D

    move-result-wide v5

    mul-double v3, v3, v5

    add-double/2addr v3, v8

    aput-wide v3, v1, v7

    const/4 v10, 0x3

    goto :goto_cd

    :cond_86
    invoke-static/range {v22 .. v23}, Ljava/lang/Math;->abs(D)D

    move-result-wide v16

    sub-double/2addr v14, v11

    invoke-static {v14, v15}, Ljava/lang/Math;->sqrt(D)D

    move-result-wide v11

    add-double v11, v16, v11

    move-wide/from16 v24, v8

    const-wide v7, 0x3fd5555555555555L

    invoke-static {v11, v12, v7, v8}, Ljava/lang/Math;->pow(DD)D

    move-result-wide v7

    cmpl-double v0, v22, v5

    if-lez v0, :cond_a1

    neg-double v7, v7

    :cond_a1
    const-wide v5, -0x4224832026284245L

    cmpg-double v0, v5, v7

    const-wide v11, 0x3ddb7cdfd9d7bdbbL

    if-gez v0, :cond_b6

    cmpg-double v0, v7, v11

    if-gez v0, :cond_b6

    aput-wide v24, v1, v13

    goto :goto_cd

    :cond_b6
    div-double/2addr v3, v7

    const/4 v0, 0x0

    add-double/2addr v7, v3

    add-double v2, v7, v24

    aput-wide v2, v1, v13

    cmpg-double v0, v5, v14

    if-gez v0, :cond_cd

    cmpg-double v0, v14, v11

    if-gez v0, :cond_cd

    neg-double v2, v7

    div-double v2, v2, v20

    add-double v2, v2, v24

    aput-wide v2, v1, v10

    const/4 v10, 0x2

    :cond_cd
    :goto_cd
    invoke-static {v1, v10}, Lcom/itextpdf/awt/geom/gl/Crossing;->fixRoots([DI)I

    move-result v0

    return v0
.end method

.method public static solveQuad([D[D)I
    .registers 19

    move-object/from16 v1, p1

    const/4 v2, 0x2

    aget-wide v3, p0, v2

    const/4 v5, 0x1

    aget-wide v6, p0, v5

    const/4 v8, 0x0

    aget-wide v9, p0, v8

    const-wide/16 v11, 0x0

    cmpl-double v0, v3, v11

    if-nez v0, :cond_1c

    cmpl-double v0, v6, v11

    if-nez v0, :cond_17

    const/4 v0, -0x1

    return v0

    :cond_17
    neg-double v2, v9

    div-double/2addr v2, v6

    aput-wide v2, v1, v8

    goto :goto_41

    :cond_1c
    mul-double v13, v6, v6

    const-wide/high16 v15, 0x4010000000000000L

    mul-double v15, v15, v3

    mul-double v15, v15, v9

    sub-double/2addr v13, v15

    cmpg-double v0, v13, v11

    if-gez v0, :cond_2a

    return v8

    :cond_2a
    invoke-static {v13, v14}, Ljava/lang/Math;->sqrt(D)D

    move-result-wide v9

    neg-double v6, v6

    add-double v13, v6, v9

    const-wide/high16 v15, 0x4000000000000000L

    mul-double v3, v3, v15

    div-double/2addr v13, v3

    aput-wide v13, v1, v8

    cmpl-double v0, v9, v11

    if-eqz v0, :cond_41

    sub-double/2addr v6, v9

    div-double/2addr v6, v3

    aput-wide v6, v1, v5

    const/4 v5, 0x2

    :cond_41
    :goto_41
    invoke-static {v1, v5}, Lcom/itextpdf/awt/geom/gl/Crossing;->fixRoots([DI)I

    move-result v0

    return v0
.end method

.method static sortBound([DI)V
    .registers 11

    const/4 v0, 0x0

    :goto_1
    add-int/lit8 v1, p1, -0x4

    if-ge v0, v1, :cond_47

    add-int/lit8 v1, v0, 0x4

    move v3, v0

    move v2, v1

    :goto_9
    if-ge v2, p1, :cond_17

    aget-wide v4, p0, v3

    aget-wide v6, p0, v2

    cmpl-double v4, v4, v6

    if-lez v4, :cond_14

    move v3, v2

    :cond_14
    add-int/lit8 v2, v2, 0x4

    goto :goto_9

    :cond_17
    if-eq v3, v0, :cond_45

    aget-wide v4, p0, v0

    aget-wide v6, p0, v3

    aput-wide v6, p0, v0

    aput-wide v4, p0, v3

    add-int/lit8 v2, v0, 0x1

    aget-wide v4, p0, v2

    add-int/lit8 v6, v3, 0x1

    aget-wide v7, p0, v6

    aput-wide v7, p0, v2

    aput-wide v4, p0, v6

    add-int/lit8 v2, v0, 0x2

    aget-wide v4, p0, v2

    add-int/lit8 v6, v3, 0x2

    aget-wide v7, p0, v6

    aput-wide v7, p0, v2

    aput-wide v4, p0, v6

    add-int/lit8 v0, v0, 0x3

    aget-wide v4, p0, v0

    add-int/lit8 v3, v3, 0x3

    aget-wide v6, p0, v3

    aput-wide v6, p0, v0

    aput-wide v4, p0, v3

    :cond_45
    move v0, v1

    goto :goto_1

    :cond_47
    return-void
.end method
