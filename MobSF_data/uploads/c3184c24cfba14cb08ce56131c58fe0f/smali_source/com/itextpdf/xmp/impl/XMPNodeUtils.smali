.class public Lcom/itextpdf/xmp/impl/XMPNodeUtils;
.super Ljava/lang/Object;

# interfaces
.implements Lcom/itextpdf/xmp/XMPConst;


# static fields
.field static final synthetic $assertionsDisabled:Z = false

.field static final CLT_FIRST_ITEM:I = 0x5

.field static final CLT_MULTIPLE_GENERIC:I = 0x3

.field static final CLT_NO_VALUES:I = 0x0

.field static final CLT_SINGLE_GENERIC:I = 0x2

.field static final CLT_SPECIFIC_MATCH:I = 0x1

.field static final CLT_XDEFAULT:I = 0x4


# direct methods
.method static constructor <clinit>()V
    .registers 0

    return-void
.end method

.method private constructor <init>()V
    .registers 1

    invoke-direct {p0}, Ljava/lang/Object;-><init>()V

    return-void
.end method

.method static appendLangItem(Lcom/itextpdf/xmp/impl/XMPNode;Ljava/lang/String;Ljava/lang/String;)V
    .registers 6

    new-instance v0, Lcom/itextpdf/xmp/impl/XMPNode;

    const-string v1, "[]"

    const/4 v2, 0x0

    invoke-direct {v0, v1, p2, v2}, Lcom/itextpdf/xmp/impl/XMPNode;-><init>(Ljava/lang/String;Ljava/lang/String;Lcom/itextpdf/xmp/options/PropertyOptions;)V

    new-instance p2, Lcom/itextpdf/xmp/impl/XMPNode;

    const-string v1, "xml:lang"

    invoke-direct {p2, v1, p1, v2}, Lcom/itextpdf/xmp/impl/XMPNode;-><init>(Ljava/lang/String;Ljava/lang/String;Lcom/itextpdf/xmp/options/PropertyOptions;)V

    invoke-virtual {v0, p2}, Lcom/itextpdf/xmp/impl/XMPNode;->addQualifier(Lcom/itextpdf/xmp/impl/XMPNode;)V

    const-string p1, "x-default"

    invoke-virtual {p2}, Lcom/itextpdf/xmp/impl/XMPNode;->getValue()Ljava/lang/String;

    move-result-object p2

    invoke-virtual {p1, p2}, Ljava/lang/String;->equals(Ljava/lang/Object;)Z

    move-result p1

    if-nez p1, :cond_22

    invoke-virtual {p0, v0}, Lcom/itextpdf/xmp/impl/XMPNode;->addChild(Lcom/itextpdf/xmp/impl/XMPNode;)V

    goto :goto_26

    :cond_22
    const/4 p1, 0x1

    invoke-virtual {p0, p1, v0}, Lcom/itextpdf/xmp/impl/XMPNode;->addChild(ILcom/itextpdf/xmp/impl/XMPNode;)V

    :goto_26
    return-void
.end method

.method static chooseLocalizedText(Lcom/itextpdf/xmp/impl/XMPNode;Ljava/lang/String;Ljava/lang/String;)[Ljava/lang/Object;
    .registers 14

    invoke-virtual {p0}, Lcom/itextpdf/xmp/impl/XMPNode;->getOptions()Lcom/itextpdf/xmp/options/PropertyOptions;

    move-result-object v0

    invoke-virtual {v0}, Lcom/itextpdf/xmp/options/PropertyOptions;->isArrayAltText()Z

    move-result v0

    const/16 v1, 0x66

    if-eqz v0, :cond_d4

    invoke-virtual {p0}, Lcom/itextpdf/xmp/impl/XMPNode;->hasChildren()Z

    move-result v0

    const/4 v2, 0x0

    const/4 v3, 0x2

    const/4 v4, 0x0

    const/4 v5, 0x1

    if-nez v0, :cond_22

    new-array p0, v3, [Ljava/lang/Object;

    new-instance p1, Ljava/lang/Integer;

    invoke-direct {p1, v4}, Ljava/lang/Integer;-><init>(I)V

    aput-object p1, p0, v4

    aput-object v2, p0, v5

    return-object p0

    :cond_22
    invoke-virtual {p0}, Lcom/itextpdf/xmp/impl/XMPNode;->iterateChildren()Ljava/util/Iterator;

    move-result-object v0

    move-object v6, v2

    move-object v7, v6

    const/4 v2, 0x0

    :cond_29
    :goto_29
    invoke-interface {v0}, Ljava/util/Iterator;->hasNext()Z

    move-result v8

    if-eqz v8, :cond_97

    invoke-interface {v0}, Ljava/util/Iterator;->next()Ljava/lang/Object;

    move-result-object v8

    check-cast v8, Lcom/itextpdf/xmp/impl/XMPNode;

    invoke-virtual {v8}, Lcom/itextpdf/xmp/impl/XMPNode;->getOptions()Lcom/itextpdf/xmp/options/PropertyOptions;

    move-result-object v9

    invoke-virtual {v9}, Lcom/itextpdf/xmp/options/PropertyOptions;->isCompositeProperty()Z

    move-result v9

    if-nez v9, :cond_8f

    invoke-virtual {v8}, Lcom/itextpdf/xmp/impl/XMPNode;->hasQualifier()Z

    move-result v9

    if-eqz v9, :cond_87

    const-string v9, "xml:lang"

    invoke-virtual {v8, v5}, Lcom/itextpdf/xmp/impl/XMPNode;->getQualifier(I)Lcom/itextpdf/xmp/impl/XMPNode;

    move-result-object v10

    invoke-virtual {v10}, Lcom/itextpdf/xmp/impl/XMPNode;->getName()Ljava/lang/String;

    move-result-object v10

    invoke-virtual {v9, v10}, Ljava/lang/String;->equals(Ljava/lang/Object;)Z

    move-result v9

    if-eqz v9, :cond_87

    invoke-virtual {v8, v5}, Lcom/itextpdf/xmp/impl/XMPNode;->getQualifier(I)Lcom/itextpdf/xmp/impl/XMPNode;

    move-result-object v9

    invoke-virtual {v9}, Lcom/itextpdf/xmp/impl/XMPNode;->getValue()Ljava/lang/String;

    move-result-object v9

    invoke-virtual {p2, v9}, Ljava/lang/String;->equals(Ljava/lang/Object;)Z

    move-result v10

    if-eqz v10, :cond_6f

    new-array p0, v3, [Ljava/lang/Object;

    new-instance p1, Ljava/lang/Integer;

    invoke-direct {p1, v5}, Ljava/lang/Integer;-><init>(I)V

    aput-object p1, p0, v4

    aput-object v8, p0, v5

    return-object p0

    :cond_6f
    if-eqz p1, :cond_7d

    invoke-virtual {v9, p1}, Ljava/lang/String;->startsWith(Ljava/lang/String;)Z

    move-result v10

    if-eqz v10, :cond_7d

    if-nez v6, :cond_7a

    move-object v6, v8

    :cond_7a
    add-int/lit8 v2, v2, 0x1

    goto :goto_29

    :cond_7d
    const-string v10, "x-default"

    invoke-virtual {v10, v9}, Ljava/lang/String;->equals(Ljava/lang/Object;)Z

    move-result v9

    if-eqz v9, :cond_29

    move-object v7, v8

    goto :goto_29

    :cond_87
    new-instance p0, Lcom/itextpdf/xmp/XMPException;

    const-string p1, "Alt-text array item has no language qualifier"

    invoke-direct {p0, p1, v1}, Lcom/itextpdf/xmp/XMPException;-><init>(Ljava/lang/String;I)V

    throw p0

    :cond_8f
    new-instance p0, Lcom/itextpdf/xmp/XMPException;

    const-string p1, "Alt-text array item is not simple"

    invoke-direct {p0, p1, v1}, Lcom/itextpdf/xmp/XMPException;-><init>(Ljava/lang/String;I)V

    throw p0

    :cond_97
    if-ne v2, v5, :cond_a5

    new-array p0, v3, [Ljava/lang/Object;

    new-instance p1, Ljava/lang/Integer;

    invoke-direct {p1, v3}, Ljava/lang/Integer;-><init>(I)V

    aput-object p1, p0, v4

    aput-object v6, p0, v5

    return-object p0

    :cond_a5
    if-le v2, v5, :cond_b4

    new-array p0, v3, [Ljava/lang/Object;

    new-instance p1, Ljava/lang/Integer;

    const/4 p2, 0x3

    invoke-direct {p1, p2}, Ljava/lang/Integer;-><init>(I)V

    aput-object p1, p0, v4

    aput-object v6, p0, v5

    return-object p0

    :cond_b4
    if-eqz v7, :cond_c3

    new-array p0, v3, [Ljava/lang/Object;

    new-instance p1, Ljava/lang/Integer;

    const/4 p2, 0x4

    invoke-direct {p1, p2}, Ljava/lang/Integer;-><init>(I)V

    aput-object p1, p0, v4

    aput-object v7, p0, v5

    return-object p0

    :cond_c3
    new-array p1, v3, [Ljava/lang/Object;

    new-instance p2, Ljava/lang/Integer;

    const/4 v0, 0x5

    invoke-direct {p2, v0}, Ljava/lang/Integer;-><init>(I)V

    aput-object p2, p1, v4

    invoke-virtual {p0, v5}, Lcom/itextpdf/xmp/impl/XMPNode;->getChild(I)Lcom/itextpdf/xmp/impl/XMPNode;

    move-result-object p0

    aput-object p0, p1, v5

    return-object p1

    :cond_d4
    new-instance p0, Lcom/itextpdf/xmp/XMPException;

    const-string p1, "Localized text array is not alt-text"

    invoke-direct {p0, p1, v1}, Lcom/itextpdf/xmp/XMPException;-><init>(Ljava/lang/String;I)V

    throw p0
.end method

.method static deleteNode(Lcom/itextpdf/xmp/impl/XMPNode;)V
    .registers 3

    invoke-virtual {p0}, Lcom/itextpdf/xmp/impl/XMPNode;->getParent()Lcom/itextpdf/xmp/impl/XMPNode;

    move-result-object v0

    invoke-virtual {p0}, Lcom/itextpdf/xmp/impl/XMPNode;->getOptions()Lcom/itextpdf/xmp/options/PropertyOptions;

    move-result-object v1

    invoke-virtual {v1}, Lcom/itextpdf/xmp/options/PropertyOptions;->isQualifier()Z

    move-result v1

    if-eqz v1, :cond_12

    invoke-virtual {v0, p0}, Lcom/itextpdf/xmp/impl/XMPNode;->removeQualifier(Lcom/itextpdf/xmp/impl/XMPNode;)V

    goto :goto_15

    :cond_12
    invoke-virtual {v0, p0}, Lcom/itextpdf/xmp/impl/XMPNode;->removeChild(Lcom/itextpdf/xmp/impl/XMPNode;)V

    :goto_15
    invoke-virtual {v0}, Lcom/itextpdf/xmp/impl/XMPNode;->hasChildren()Z

    move-result p0

    if-nez p0, :cond_2c

    invoke-virtual {v0}, Lcom/itextpdf/xmp/impl/XMPNode;->getOptions()Lcom/itextpdf/xmp/options/PropertyOptions;

    move-result-object p0

    invoke-virtual {p0}, Lcom/itextpdf/xmp/options/PropertyOptions;->isSchemaNode()Z

    move-result p0

    if-eqz p0, :cond_2c

    invoke-virtual {v0}, Lcom/itextpdf/xmp/impl/XMPNode;->getParent()Lcom/itextpdf/xmp/impl/XMPNode;

    move-result-object p0

    invoke-virtual {p0, v0}, Lcom/itextpdf/xmp/impl/XMPNode;->removeChild(Lcom/itextpdf/xmp/impl/XMPNode;)V

    :cond_2c
    return-void
.end method

.method static detectAltText(Lcom/itextpdf/xmp/impl/XMPNode;)V
    .registers 5

    invoke-virtual {p0}, Lcom/itextpdf/xmp/impl/XMPNode;->getOptions()Lcom/itextpdf/xmp/options/PropertyOptions;

    move-result-object v0

    invoke-virtual {v0}, Lcom/itextpdf/xmp/options/PropertyOptions;->isArrayAlternate()Z

    move-result v0

    if-eqz v0, :cond_39

    invoke-virtual {p0}, Lcom/itextpdf/xmp/impl/XMPNode;->hasChildren()Z

    move-result v0

    if-eqz v0, :cond_39

    const/4 v0, 0x0

    invoke-virtual {p0}, Lcom/itextpdf/xmp/impl/XMPNode;->iterateChildren()Ljava/util/Iterator;

    move-result-object v1

    :cond_15
    invoke-interface {v1}, Ljava/util/Iterator;->hasNext()Z

    move-result v2

    const/4 v3, 0x1

    if-eqz v2, :cond_2d

    invoke-interface {v1}, Ljava/util/Iterator;->next()Ljava/lang/Object;

    move-result-object v2

    check-cast v2, Lcom/itextpdf/xmp/impl/XMPNode;

    invoke-virtual {v2}, Lcom/itextpdf/xmp/impl/XMPNode;->getOptions()Lcom/itextpdf/xmp/options/PropertyOptions;

    move-result-object v2

    invoke-virtual {v2}, Lcom/itextpdf/xmp/options/PropertyOptions;->getHasLanguage()Z

    move-result v2

    if-eqz v2, :cond_15

    const/4 v0, 0x1

    :cond_2d
    if-eqz v0, :cond_39

    invoke-virtual {p0}, Lcom/itextpdf/xmp/impl/XMPNode;->getOptions()Lcom/itextpdf/xmp/options/PropertyOptions;

    move-result-object v0

    invoke-virtual {v0, v3}, Lcom/itextpdf/xmp/options/PropertyOptions;->setArrayAltText(Z)Lcom/itextpdf/xmp/options/PropertyOptions;

    invoke-static {p0}, Lcom/itextpdf/xmp/impl/XMPNodeUtils;->normalizeLangArray(Lcom/itextpdf/xmp/impl/XMPNode;)V

    :cond_39
    return-void
.end method

.method static findChildNode(Lcom/itextpdf/xmp/impl/XMPNode;Ljava/lang/String;Z)Lcom/itextpdf/xmp/impl/XMPNode;
    .registers 6

    invoke-virtual {p0}, Lcom/itextpdf/xmp/impl/XMPNode;->getOptions()Lcom/itextpdf/xmp/options/PropertyOptions;

    move-result-object v0

    invoke-virtual {v0}, Lcom/itextpdf/xmp/options/PropertyOptions;->isSchemaNode()Z

    move-result v0

    const/4 v1, 0x1

    if-nez v0, :cond_41

    invoke-virtual {p0}, Lcom/itextpdf/xmp/impl/XMPNode;->getOptions()Lcom/itextpdf/xmp/options/PropertyOptions;

    move-result-object v0

    invoke-virtual {v0}, Lcom/itextpdf/xmp/options/PropertyOptions;->isStruct()Z

    move-result v0

    if-nez v0, :cond_41

    invoke-virtual {p0}, Lcom/itextpdf/xmp/impl/XMPNode;->isImplicit()Z

    move-result v0

    const/16 v2, 0x66

    if-eqz v0, :cond_39

    invoke-virtual {p0}, Lcom/itextpdf/xmp/impl/XMPNode;->getOptions()Lcom/itextpdf/xmp/options/PropertyOptions;

    move-result-object v0

    invoke-virtual {v0}, Lcom/itextpdf/xmp/options/PropertyOptions;->isArray()Z

    move-result v0

    if-nez v0, :cond_31

    if-eqz p2, :cond_41

    invoke-virtual {p0}, Lcom/itextpdf/xmp/impl/XMPNode;->getOptions()Lcom/itextpdf/xmp/options/PropertyOptions;

    move-result-object v0

    invoke-virtual {v0, v1}, Lcom/itextpdf/xmp/options/PropertyOptions;->setStruct(Z)Lcom/itextpdf/xmp/options/PropertyOptions;

    goto :goto_41

    :cond_31
    new-instance p0, Lcom/itextpdf/xmp/XMPException;

    const-string p1, "Named children not allowed for arrays"

    invoke-direct {p0, p1, v2}, Lcom/itextpdf/xmp/XMPException;-><init>(Ljava/lang/String;I)V

    throw p0

    :cond_39
    new-instance p0, Lcom/itextpdf/xmp/XMPException;

    const-string p1, "Named children only allowed for schemas and structs"

    invoke-direct {p0, p1, v2}, Lcom/itextpdf/xmp/XMPException;-><init>(Ljava/lang/String;I)V

    throw p0

    :cond_41
    :goto_41
    invoke-virtual {p0, p1}, Lcom/itextpdf/xmp/impl/XMPNode;->findChildByName(Ljava/lang/String;)Lcom/itextpdf/xmp/impl/XMPNode;

    move-result-object v0

    if-nez v0, :cond_59

    if-eqz p2, :cond_59

    new-instance p2, Lcom/itextpdf/xmp/options/PropertyOptions;

    invoke-direct {p2}, Lcom/itextpdf/xmp/options/PropertyOptions;-><init>()V

    new-instance v0, Lcom/itextpdf/xmp/impl/XMPNode;

    invoke-direct {v0, p1, p2}, Lcom/itextpdf/xmp/impl/XMPNode;-><init>(Ljava/lang/String;Lcom/itextpdf/xmp/options/PropertyOptions;)V

    invoke-virtual {v0, v1}, Lcom/itextpdf/xmp/impl/XMPNode;->setImplicit(Z)V

    invoke-virtual {p0, v0}, Lcom/itextpdf/xmp/impl/XMPNode;->addChild(Lcom/itextpdf/xmp/impl/XMPNode;)V

    :cond_59
    return-object v0
.end method

.method private static findIndexedItem(Lcom/itextpdf/xmp/impl/XMPNode;Ljava/lang/String;Z)I
    .registers 6

    const/16 v0, 0x66

    :try_start_2
    invoke-virtual {p1}, Ljava/lang/String;->length()I

    move-result v1

    const/4 v2, 0x1

    sub-int/2addr v1, v2

    invoke-virtual {p1, v2, v1}, Ljava/lang/String;->substring(II)Ljava/lang/String;

    move-result-object p1

    invoke-static {p1}, Ljava/lang/Integer;->parseInt(Ljava/lang/String;)I

    move-result p1
    :try_end_10
    .catch Ljava/lang/NumberFormatException; {:try_start_2 .. :try_end_10} :catch_32

    if-lt p1, v2, :cond_2a

    if-eqz p2, :cond_29

    invoke-virtual {p0}, Lcom/itextpdf/xmp/impl/XMPNode;->getChildrenLength()I

    move-result p2

    add-int/2addr p2, v2

    if-ne p1, p2, :cond_29

    new-instance p2, Lcom/itextpdf/xmp/impl/XMPNode;

    const-string v0, "[]"

    const/4 v1, 0x0

    invoke-direct {p2, v0, v1}, Lcom/itextpdf/xmp/impl/XMPNode;-><init>(Ljava/lang/String;Lcom/itextpdf/xmp/options/PropertyOptions;)V

    invoke-virtual {p2, v2}, Lcom/itextpdf/xmp/impl/XMPNode;->setImplicit(Z)V

    invoke-virtual {p0, p2}, Lcom/itextpdf/xmp/impl/XMPNode;->addChild(Lcom/itextpdf/xmp/impl/XMPNode;)V

    :cond_29
    return p1

    :cond_2a
    :try_start_2a
    new-instance p0, Lcom/itextpdf/xmp/XMPException;

    const-string p1, "Array index must be larger than zero"

    invoke-direct {p0, p1, v0}, Lcom/itextpdf/xmp/XMPException;-><init>(Ljava/lang/String;I)V

    throw p0
    :try_end_32
    .catch Ljava/lang/NumberFormatException; {:try_start_2a .. :try_end_32} :catch_32

    :catch_32
    new-instance p0, Lcom/itextpdf/xmp/XMPException;

    const-string p1, "Array index not digits."

    invoke-direct {p0, p1, v0}, Lcom/itextpdf/xmp/XMPException;-><init>(Ljava/lang/String;I)V

    throw p0
.end method

.method static findNode(Lcom/itextpdf/xmp/impl/XMPNode;Lcom/itextpdf/xmp/impl/xpath/XMPPath;ZLcom/itextpdf/xmp/options/PropertyOptions;)Lcom/itextpdf/xmp/impl/XMPNode;
    .registers 11

    if-eqz p1, :cond_ae

    invoke-virtual {p1}, Lcom/itextpdf/xmp/impl/xpath/XMPPath;->size()I

    move-result v0

    if-eqz v0, :cond_ae

    const/4 v0, 0x0

    invoke-virtual {p1, v0}, Lcom/itextpdf/xmp/impl/xpath/XMPPath;->getSegment(I)Lcom/itextpdf/xmp/impl/xpath/XMPPathSegment;

    move-result-object v1

    invoke-virtual {v1}, Lcom/itextpdf/xmp/impl/xpath/XMPPathSegment;->getName()Ljava/lang/String;

    move-result-object v1

    invoke-static {p0, v1, p2}, Lcom/itextpdf/xmp/impl/XMPNodeUtils;->findSchemaNode(Lcom/itextpdf/xmp/impl/XMPNode;Ljava/lang/String;Z)Lcom/itextpdf/xmp/impl/XMPNode;

    move-result-object p0

    const/4 v1, 0x0

    if-nez p0, :cond_19

    return-object v1

    :cond_19
    invoke-virtual {p0}, Lcom/itextpdf/xmp/impl/XMPNode;->isImplicit()Z

    move-result v2

    if-eqz v2, :cond_24

    invoke-virtual {p0, v0}, Lcom/itextpdf/xmp/impl/XMPNode;->setImplicit(Z)V

    move-object v2, p0

    goto :goto_25

    :cond_24
    move-object v2, v1

    :goto_25
    const/4 v3, 0x1

    move-object v4, v2

    move-object v2, p0

    const/4 p0, 0x1

    :goto_29
    :try_start_29
    invoke-virtual {p1}, Lcom/itextpdf/xmp/impl/xpath/XMPPath;->size()I

    move-result v5

    if-ge p0, v5, :cond_96

    invoke-virtual {p1, p0}, Lcom/itextpdf/xmp/impl/xpath/XMPPath;->getSegment(I)Lcom/itextpdf/xmp/impl/xpath/XMPPathSegment;

    move-result-object v5

    invoke-static {v2, v5, p2}, Lcom/itextpdf/xmp/impl/XMPNodeUtils;->followXPathStep(Lcom/itextpdf/xmp/impl/XMPNode;Lcom/itextpdf/xmp/impl/xpath/XMPPathSegment;Z)Lcom/itextpdf/xmp/impl/XMPNode;

    move-result-object v2

    if-nez v2, :cond_3f

    if-eqz p2, :cond_3e

    invoke-static {v4}, Lcom/itextpdf/xmp/impl/XMPNodeUtils;->deleteNode(Lcom/itextpdf/xmp/impl/XMPNode;)V

    :cond_3e
    return-object v1

    :cond_3f
    invoke-virtual {v2}, Lcom/itextpdf/xmp/impl/XMPNode;->isImplicit()Z

    move-result v5

    if-eqz v5, :cond_93

    invoke-virtual {v2, v0}, Lcom/itextpdf/xmp/impl/XMPNode;->setImplicit(Z)V

    if-ne p0, v3, :cond_6e

    invoke-virtual {p1, p0}, Lcom/itextpdf/xmp/impl/xpath/XMPPath;->getSegment(I)Lcom/itextpdf/xmp/impl/xpath/XMPPathSegment;

    move-result-object v5

    invoke-virtual {v5}, Lcom/itextpdf/xmp/impl/xpath/XMPPathSegment;->isAlias()Z

    move-result v5

    if-eqz v5, :cond_6e

    invoke-virtual {p1, p0}, Lcom/itextpdf/xmp/impl/xpath/XMPPath;->getSegment(I)Lcom/itextpdf/xmp/impl/xpath/XMPPathSegment;

    move-result-object v5

    invoke-virtual {v5}, Lcom/itextpdf/xmp/impl/xpath/XMPPathSegment;->getAliasForm()I

    move-result v5

    if-eqz v5, :cond_6e

    invoke-virtual {v2}, Lcom/itextpdf/xmp/impl/XMPNode;->getOptions()Lcom/itextpdf/xmp/options/PropertyOptions;

    move-result-object v5

    invoke-virtual {p1, p0}, Lcom/itextpdf/xmp/impl/xpath/XMPPath;->getSegment(I)Lcom/itextpdf/xmp/impl/xpath/XMPPathSegment;

    move-result-object v6

    invoke-virtual {v6}, Lcom/itextpdf/xmp/impl/xpath/XMPPathSegment;->getAliasForm()I

    move-result v6

    invoke-virtual {v5, v6, v3}, Lcom/itextpdf/xmp/options/PropertyOptions;->setOption(IZ)V

    goto :goto_90

    :cond_6e
    invoke-virtual {p1}, Lcom/itextpdf/xmp/impl/xpath/XMPPath;->size()I

    move-result v5

    sub-int/2addr v5, v3

    if-ge p0, v5, :cond_90

    invoke-virtual {p1, p0}, Lcom/itextpdf/xmp/impl/xpath/XMPPath;->getSegment(I)Lcom/itextpdf/xmp/impl/xpath/XMPPathSegment;

    move-result-object v5

    invoke-virtual {v5}, Lcom/itextpdf/xmp/impl/xpath/XMPPathSegment;->getKind()I

    move-result v5

    if-ne v5, v3, :cond_90

    invoke-virtual {v2}, Lcom/itextpdf/xmp/impl/XMPNode;->getOptions()Lcom/itextpdf/xmp/options/PropertyOptions;

    move-result-object v5

    invoke-virtual {v5}, Lcom/itextpdf/xmp/options/PropertyOptions;->isCompositeProperty()Z

    move-result v5

    if-nez v5, :cond_90

    invoke-virtual {v2}, Lcom/itextpdf/xmp/impl/XMPNode;->getOptions()Lcom/itextpdf/xmp/options/PropertyOptions;

    move-result-object v5

    invoke-virtual {v5, v3}, Lcom/itextpdf/xmp/options/PropertyOptions;->setStruct(Z)Lcom/itextpdf/xmp/options/PropertyOptions;
    :try_end_90
    .catch Lcom/itextpdf/xmp/XMPException; {:try_start_29 .. :try_end_90} :catch_a7

    :cond_90
    :goto_90
    if-nez v4, :cond_93

    move-object v4, v2

    :cond_93
    add-int/lit8 p0, p0, 0x1

    goto :goto_29

    :cond_96
    if-eqz v4, :cond_a6

    invoke-virtual {v2}, Lcom/itextpdf/xmp/impl/XMPNode;->getOptions()Lcom/itextpdf/xmp/options/PropertyOptions;

    move-result-object p0

    invoke-virtual {p0, p3}, Lcom/itextpdf/xmp/options/PropertyOptions;->mergeWith(Lcom/itextpdf/xmp/options/PropertyOptions;)V

    invoke-virtual {v2}, Lcom/itextpdf/xmp/impl/XMPNode;->getOptions()Lcom/itextpdf/xmp/options/PropertyOptions;

    move-result-object p0

    invoke-virtual {v2, p0}, Lcom/itextpdf/xmp/impl/XMPNode;->setOptions(Lcom/itextpdf/xmp/options/PropertyOptions;)V

    :cond_a6
    return-object v2

    :catch_a7
    move-exception p0

    if-eqz v4, :cond_ad

    invoke-static {v4}, Lcom/itextpdf/xmp/impl/XMPNodeUtils;->deleteNode(Lcom/itextpdf/xmp/impl/XMPNode;)V

    :cond_ad
    throw p0

    :cond_ae
    new-instance p0, Lcom/itextpdf/xmp/XMPException;

    const/16 p1, 0x66

    const-string p2, "Empty XMPPath"

    invoke-direct {p0, p2, p1}, Lcom/itextpdf/xmp/XMPException;-><init>(Ljava/lang/String;I)V

    throw p0
.end method

.method private static findQualifierNode(Lcom/itextpdf/xmp/impl/XMPNode;Ljava/lang/String;Z)Lcom/itextpdf/xmp/impl/XMPNode;
    .registers 4

    invoke-virtual {p0, p1}, Lcom/itextpdf/xmp/impl/XMPNode;->findQualifierByName(Ljava/lang/String;)Lcom/itextpdf/xmp/impl/XMPNode;

    move-result-object v0

    if-nez v0, :cond_15

    if-eqz p2, :cond_15

    new-instance v0, Lcom/itextpdf/xmp/impl/XMPNode;

    const/4 p2, 0x0

    invoke-direct {v0, p1, p2}, Lcom/itextpdf/xmp/impl/XMPNode;-><init>(Ljava/lang/String;Lcom/itextpdf/xmp/options/PropertyOptions;)V

    const/4 p1, 0x1

    invoke-virtual {v0, p1}, Lcom/itextpdf/xmp/impl/XMPNode;->setImplicit(Z)V

    invoke-virtual {p0, v0}, Lcom/itextpdf/xmp/impl/XMPNode;->addQualifier(Lcom/itextpdf/xmp/impl/XMPNode;)V

    :cond_15
    return-object v0
.end method

.method static findSchemaNode(Lcom/itextpdf/xmp/impl/XMPNode;Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/xmp/impl/XMPNode;
    .registers 6

    invoke-virtual {p0, p1}, Lcom/itextpdf/xmp/impl/XMPNode;->findChildByName(Ljava/lang/String;)Lcom/itextpdf/xmp/impl/XMPNode;

    move-result-object v0

    if-nez v0, :cond_45

    if-eqz p3, :cond_45

    new-instance v0, Lcom/itextpdf/xmp/impl/XMPNode;

    new-instance p3, Lcom/itextpdf/xmp/options/PropertyOptions;

    invoke-direct {p3}, Lcom/itextpdf/xmp/options/PropertyOptions;-><init>()V

    const/4 v1, 0x1

    invoke-virtual {p3, v1}, Lcom/itextpdf/xmp/options/PropertyOptions;->setSchemaNode(Z)Lcom/itextpdf/xmp/options/PropertyOptions;

    move-result-object p3

    invoke-direct {v0, p1, p3}, Lcom/itextpdf/xmp/impl/XMPNode;-><init>(Ljava/lang/String;Lcom/itextpdf/xmp/options/PropertyOptions;)V

    invoke-virtual {v0, v1}, Lcom/itextpdf/xmp/impl/XMPNode;->setImplicit(Z)V

    invoke-static {}, Lcom/itextpdf/xmp/XMPMetaFactory;->getSchemaRegistry()Lcom/itextpdf/xmp/XMPSchemaRegistry;

    move-result-object p3

    invoke-interface {p3, p1}, Lcom/itextpdf/xmp/XMPSchemaRegistry;->getNamespacePrefix(Ljava/lang/String;)Ljava/lang/String;

    move-result-object p3

    if-nez p3, :cond_3f

    if-eqz p2, :cond_35

    invoke-virtual {p2}, Ljava/lang/String;->length()I

    move-result p3

    if-eqz p3, :cond_35

    invoke-static {}, Lcom/itextpdf/xmp/XMPMetaFactory;->getSchemaRegistry()Lcom/itextpdf/xmp/XMPSchemaRegistry;

    move-result-object p3

    invoke-interface {p3, p1, p2}, Lcom/itextpdf/xmp/XMPSchemaRegistry;->registerNamespace(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;

    move-result-object p3

    goto :goto_3f

    :cond_35
    new-instance p0, Lcom/itextpdf/xmp/XMPException;

    const/16 p1, 0x65

    const-string p2, "Unregistered schema namespace URI"

    invoke-direct {p0, p2, p1}, Lcom/itextpdf/xmp/XMPException;-><init>(Ljava/lang/String;I)V

    throw p0

    :cond_3f
    :goto_3f
    invoke-virtual {v0, p3}, Lcom/itextpdf/xmp/impl/XMPNode;->setValue(Ljava/lang/String;)V

    invoke-virtual {p0, v0}, Lcom/itextpdf/xmp/impl/XMPNode;->addChild(Lcom/itextpdf/xmp/impl/XMPNode;)V

    :cond_45
    return-object v0
.end method

.method static findSchemaNode(Lcom/itextpdf/xmp/impl/XMPNode;Ljava/lang/String;Z)Lcom/itextpdf/xmp/impl/XMPNode;
    .registers 4

    const/4 v0, 0x0

    invoke-static {p0, p1, v0, p2}, Lcom/itextpdf/xmp/impl/XMPNodeUtils;->findSchemaNode(Lcom/itextpdf/xmp/impl/XMPNode;Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/xmp/impl/XMPNode;

    move-result-object p0

    return-object p0
.end method

.method private static followXPathStep(Lcom/itextpdf/xmp/impl/XMPNode;Lcom/itextpdf/xmp/impl/xpath/XMPPathSegment;Z)Lcom/itextpdf/xmp/impl/XMPNode;
    .registers 6

    invoke-virtual {p1}, Lcom/itextpdf/xmp/impl/xpath/XMPPathSegment;->getKind()I

    move-result v0

    const/4 v1, 0x1

    if-ne v0, v1, :cond_10

    invoke-virtual {p1}, Lcom/itextpdf/xmp/impl/xpath/XMPPathSegment;->getName()Ljava/lang/String;

    move-result-object p1

    invoke-static {p0, p1, p2}, Lcom/itextpdf/xmp/impl/XMPNodeUtils;->findChildNode(Lcom/itextpdf/xmp/impl/XMPNode;Ljava/lang/String;Z)Lcom/itextpdf/xmp/impl/XMPNode;

    move-result-object p0

    goto :goto_78

    :cond_10
    const/4 v2, 0x2

    if-ne v0, v2, :cond_20

    invoke-virtual {p1}, Lcom/itextpdf/xmp/impl/xpath/XMPPathSegment;->getName()Ljava/lang/String;

    move-result-object p1

    invoke-virtual {p1, v1}, Ljava/lang/String;->substring(I)Ljava/lang/String;

    move-result-object p1

    invoke-static {p0, p1, p2}, Lcom/itextpdf/xmp/impl/XMPNodeUtils;->findQualifierNode(Lcom/itextpdf/xmp/impl/XMPNode;Ljava/lang/String;Z)Lcom/itextpdf/xmp/impl/XMPNode;

    move-result-object p0

    goto :goto_78

    :cond_20
    invoke-virtual {p0}, Lcom/itextpdf/xmp/impl/XMPNode;->getOptions()Lcom/itextpdf/xmp/options/PropertyOptions;

    move-result-object v2

    invoke-virtual {v2}, Lcom/itextpdf/xmp/options/PropertyOptions;->isArray()Z

    move-result v2

    if-eqz v2, :cond_83

    const/4 v2, 0x3

    if-ne v0, v2, :cond_36

    invoke-virtual {p1}, Lcom/itextpdf/xmp/impl/xpath/XMPPathSegment;->getName()Ljava/lang/String;

    move-result-object p1

    invoke-static {p0, p1, p2}, Lcom/itextpdf/xmp/impl/XMPNodeUtils;->findIndexedItem(Lcom/itextpdf/xmp/impl/XMPNode;Ljava/lang/String;Z)I

    move-result p1

    goto :goto_6a

    :cond_36
    const/4 p2, 0x4

    if-ne v0, p2, :cond_3e

    invoke-virtual {p0}, Lcom/itextpdf/xmp/impl/XMPNode;->getChildrenLength()I

    move-result p1

    goto :goto_6a

    :cond_3e
    const/4 p2, 0x6

    const/4 v2, 0x0

    if-ne v0, p2, :cond_53

    invoke-virtual {p1}, Lcom/itextpdf/xmp/impl/xpath/XMPPathSegment;->getName()Ljava/lang/String;

    move-result-object p1

    invoke-static {p1}, Lcom/itextpdf/xmp/impl/Utils;->splitNameAndValue(Ljava/lang/String;)[Ljava/lang/String;

    move-result-object p1

    aget-object p2, p1, v2

    aget-object p1, p1, v1

    invoke-static {p0, p2, p1}, Lcom/itextpdf/xmp/impl/XMPNodeUtils;->lookupFieldSelector(Lcom/itextpdf/xmp/impl/XMPNode;Ljava/lang/String;Ljava/lang/String;)I

    move-result p1

    goto :goto_6a

    :cond_53
    const/4 p2, 0x5

    if-ne v0, p2, :cond_79

    invoke-virtual {p1}, Lcom/itextpdf/xmp/impl/xpath/XMPPathSegment;->getName()Ljava/lang/String;

    move-result-object p2

    invoke-static {p2}, Lcom/itextpdf/xmp/impl/Utils;->splitNameAndValue(Ljava/lang/String;)[Ljava/lang/String;

    move-result-object p2

    aget-object v0, p2, v2

    aget-object p2, p2, v1

    invoke-virtual {p1}, Lcom/itextpdf/xmp/impl/xpath/XMPPathSegment;->getAliasForm()I

    move-result p1

    invoke-static {p0, v0, p2, p1}, Lcom/itextpdf/xmp/impl/XMPNodeUtils;->lookupQualSelector(Lcom/itextpdf/xmp/impl/XMPNode;Ljava/lang/String;Ljava/lang/String;I)I

    move-result p1

    :goto_6a
    if-gt v1, p1, :cond_77

    invoke-virtual {p0}, Lcom/itextpdf/xmp/impl/XMPNode;->getChildrenLength()I

    move-result p2

    if-gt p1, p2, :cond_77

    invoke-virtual {p0, p1}, Lcom/itextpdf/xmp/impl/XMPNode;->getChild(I)Lcom/itextpdf/xmp/impl/XMPNode;

    move-result-object p0

    goto :goto_78

    :cond_77
    const/4 p0, 0x0

    :goto_78
    return-object p0

    :cond_79
    new-instance p0, Lcom/itextpdf/xmp/XMPException;

    const/16 p1, 0x9

    const-string p2, "Unknown array indexing step in FollowXPathStep"

    invoke-direct {p0, p2, p1}, Lcom/itextpdf/xmp/XMPException;-><init>(Ljava/lang/String;I)V

    throw p0

    :cond_83
    new-instance p0, Lcom/itextpdf/xmp/XMPException;

    const/16 p1, 0x66

    const-string p2, "Indexing applied to non-array"

    invoke-direct {p0, p2, p1}, Lcom/itextpdf/xmp/XMPException;-><init>(Ljava/lang/String;I)V

    throw p0
.end method

.method private static lookupFieldSelector(Lcom/itextpdf/xmp/impl/XMPNode;Ljava/lang/String;Ljava/lang/String;)I
    .registers 10

    const/4 v0, 0x1

    const/4 v1, -0x1

    const/4 v1, 0x1

    const/4 v2, -0x1

    :goto_4
    invoke-virtual {p0}, Lcom/itextpdf/xmp/impl/XMPNode;->getChildrenLength()I

    move-result v3

    if-gt v1, v3, :cond_4c

    if-gez v2, :cond_4c

    invoke-virtual {p0, v1}, Lcom/itextpdf/xmp/impl/XMPNode;->getChild(I)Lcom/itextpdf/xmp/impl/XMPNode;

    move-result-object v3

    invoke-virtual {v3}, Lcom/itextpdf/xmp/impl/XMPNode;->getOptions()Lcom/itextpdf/xmp/options/PropertyOptions;

    move-result-object v4

    invoke-virtual {v4}, Lcom/itextpdf/xmp/options/PropertyOptions;->isStruct()Z

    move-result v4

    if-eqz v4, :cond_42

    const/4 v4, 0x1

    :goto_1b
    invoke-virtual {v3}, Lcom/itextpdf/xmp/impl/XMPNode;->getChildrenLength()I

    move-result v5

    if-gt v4, v5, :cond_3f

    invoke-virtual {v3, v4}, Lcom/itextpdf/xmp/impl/XMPNode;->getChild(I)Lcom/itextpdf/xmp/impl/XMPNode;

    move-result-object v5

    invoke-virtual {v5}, Lcom/itextpdf/xmp/impl/XMPNode;->getName()Ljava/lang/String;

    move-result-object v6

    invoke-virtual {p1, v6}, Ljava/lang/String;->equals(Ljava/lang/Object;)Z

    move-result v6

    if-nez v6, :cond_30

    goto :goto_3c

    :cond_30
    invoke-virtual {v5}, Lcom/itextpdf/xmp/impl/XMPNode;->getValue()Ljava/lang/String;

    move-result-object v5

    invoke-virtual {p2, v5}, Ljava/lang/String;->equals(Ljava/lang/Object;)Z

    move-result v5

    if-eqz v5, :cond_3c

    move v2, v1

    goto :goto_3f

    :cond_3c
    :goto_3c
    add-int/lit8 v4, v4, 0x1

    goto :goto_1b

    :cond_3f
    :goto_3f
    add-int/lit8 v1, v1, 0x1

    goto :goto_4

    :cond_42
    new-instance p0, Lcom/itextpdf/xmp/XMPException;

    const/16 p1, 0x66

    const-string p2, "Field selector must be used on array of struct"

    invoke-direct {p0, p2, p1}, Lcom/itextpdf/xmp/XMPException;-><init>(Ljava/lang/String;I)V

    throw p0

    :cond_4c
    return v2
.end method

.method static lookupLanguageItem(Lcom/itextpdf/xmp/impl/XMPNode;Ljava/lang/String;)I
    .registers 7

    invoke-virtual {p0}, Lcom/itextpdf/xmp/impl/XMPNode;->getOptions()Lcom/itextpdf/xmp/options/PropertyOptions;

    move-result-object v0

    invoke-virtual {v0}, Lcom/itextpdf/xmp/options/PropertyOptions;->isArray()Z

    move-result v0

    if-eqz v0, :cond_41

    const/4 v0, 0x1

    const/4 v1, 0x1

    :goto_c
    invoke-virtual {p0}, Lcom/itextpdf/xmp/impl/XMPNode;->getChildrenLength()I

    move-result v2

    if-gt v1, v2, :cond_3f

    invoke-virtual {p0, v1}, Lcom/itextpdf/xmp/impl/XMPNode;->getChild(I)Lcom/itextpdf/xmp/impl/XMPNode;

    move-result-object v2

    invoke-virtual {v2}, Lcom/itextpdf/xmp/impl/XMPNode;->hasQualifier()Z

    move-result v3

    if-eqz v3, :cond_3c

    const-string v3, "xml:lang"

    invoke-virtual {v2, v0}, Lcom/itextpdf/xmp/impl/XMPNode;->getQualifier(I)Lcom/itextpdf/xmp/impl/XMPNode;

    move-result-object v4

    invoke-virtual {v4}, Lcom/itextpdf/xmp/impl/XMPNode;->getName()Ljava/lang/String;

    move-result-object v4

    invoke-virtual {v3, v4}, Ljava/lang/String;->equals(Ljava/lang/Object;)Z

    move-result v3

    if-nez v3, :cond_2d

    goto :goto_3c

    :cond_2d
    invoke-virtual {v2, v0}, Lcom/itextpdf/xmp/impl/XMPNode;->getQualifier(I)Lcom/itextpdf/xmp/impl/XMPNode;

    move-result-object v2

    invoke-virtual {v2}, Lcom/itextpdf/xmp/impl/XMPNode;->getValue()Ljava/lang/String;

    move-result-object v2

    invoke-virtual {p1, v2}, Ljava/lang/String;->equals(Ljava/lang/Object;)Z

    move-result v2

    if-eqz v2, :cond_3c

    return v1

    :cond_3c
    :goto_3c
    add-int/lit8 v1, v1, 0x1

    goto :goto_c

    :cond_3f
    const/4 p0, -0x1

    return p0

    :cond_41
    new-instance p0, Lcom/itextpdf/xmp/XMPException;

    const/16 p1, 0x66

    const-string v0, "Language item must be used on array"

    invoke-direct {p0, v0, p1}, Lcom/itextpdf/xmp/XMPException;-><init>(Ljava/lang/String;I)V

    throw p0
.end method

.method private static lookupQualSelector(Lcom/itextpdf/xmp/impl/XMPNode;Ljava/lang/String;Ljava/lang/String;I)I
    .registers 7

    const-string v0, "xml:lang"

    invoke-virtual {v0, p1}, Ljava/lang/String;->equals(Ljava/lang/Object;)Z

    move-result v0

    const/4 v1, 0x1

    if-eqz v0, :cond_30

    invoke-static {p2}, Lcom/itextpdf/xmp/impl/Utils;->normalizeLangValue(Ljava/lang/String;)Ljava/lang/String;

    move-result-object p1

    invoke-static {p0, p1}, Lcom/itextpdf/xmp/impl/XMPNodeUtils;->lookupLanguageItem(Lcom/itextpdf/xmp/impl/XMPNode;Ljava/lang/String;)I

    move-result p1

    if-gez p1, :cond_2f

    and-int/lit16 p2, p3, 0x1000

    if-lez p2, :cond_2f

    new-instance p1, Lcom/itextpdf/xmp/impl/XMPNode;

    const-string p2, "[]"

    const/4 p3, 0x0

    invoke-direct {p1, p2, p3}, Lcom/itextpdf/xmp/impl/XMPNode;-><init>(Ljava/lang/String;Lcom/itextpdf/xmp/options/PropertyOptions;)V

    new-instance p2, Lcom/itextpdf/xmp/impl/XMPNode;

    const-string v0, "xml:lang"

    const-string v2, "x-default"

    invoke-direct {p2, v0, v2, p3}, Lcom/itextpdf/xmp/impl/XMPNode;-><init>(Ljava/lang/String;Ljava/lang/String;Lcom/itextpdf/xmp/options/PropertyOptions;)V

    invoke-virtual {p1, p2}, Lcom/itextpdf/xmp/impl/XMPNode;->addQualifier(Lcom/itextpdf/xmp/impl/XMPNode;)V

    invoke-virtual {p0, v1, p1}, Lcom/itextpdf/xmp/impl/XMPNode;->addChild(ILcom/itextpdf/xmp/impl/XMPNode;)V

    return v1

    :cond_2f
    return p1

    :cond_30
    :goto_30
    invoke-virtual {p0}, Lcom/itextpdf/xmp/impl/XMPNode;->getChildrenLength()I

    move-result p3

    if-ge v1, p3, :cond_62

    invoke-virtual {p0, v1}, Lcom/itextpdf/xmp/impl/XMPNode;->getChild(I)Lcom/itextpdf/xmp/impl/XMPNode;

    move-result-object p3

    invoke-virtual {p3}, Lcom/itextpdf/xmp/impl/XMPNode;->iterateQualifier()Ljava/util/Iterator;

    move-result-object p3

    :cond_3e
    invoke-interface {p3}, Ljava/util/Iterator;->hasNext()Z

    move-result v0

    if-eqz v0, :cond_5f

    invoke-interface {p3}, Ljava/util/Iterator;->next()Ljava/lang/Object;

    move-result-object v0

    check-cast v0, Lcom/itextpdf/xmp/impl/XMPNode;

    invoke-virtual {v0}, Lcom/itextpdf/xmp/impl/XMPNode;->getName()Ljava/lang/String;

    move-result-object v2

    invoke-virtual {p1, v2}, Ljava/lang/String;->equals(Ljava/lang/Object;)Z

    move-result v2

    if-eqz v2, :cond_3e

    invoke-virtual {v0}, Lcom/itextpdf/xmp/impl/XMPNode;->getValue()Ljava/lang/String;

    move-result-object v0

    invoke-virtual {p2, v0}, Ljava/lang/String;->equals(Ljava/lang/Object;)Z

    move-result v0

    if-eqz v0, :cond_3e

    return v1

    :cond_5f
    add-int/lit8 v1, v1, 0x1

    goto :goto_30

    :cond_62
    const/4 p0, -0x1

    return p0
.end method

.method static normalizeLangArray(Lcom/itextpdf/xmp/impl/XMPNode;)V
    .registers 7

    invoke-virtual {p0}, Lcom/itextpdf/xmp/impl/XMPNode;->getOptions()Lcom/itextpdf/xmp/options/PropertyOptions;

    move-result-object v0

    invoke-virtual {v0}, Lcom/itextpdf/xmp/options/PropertyOptions;->isArrayAltText()Z

    move-result v0

    if-nez v0, :cond_b

    return-void

    :cond_b
    const/4 v0, 0x2

    const/4 v1, 0x2

    :goto_d
    invoke-virtual {p0}, Lcom/itextpdf/xmp/impl/XMPNode;->getChildrenLength()I

    move-result v2

    if-gt v1, v2, :cond_45

    invoke-virtual {p0, v1}, Lcom/itextpdf/xmp/impl/XMPNode;->getChild(I)Lcom/itextpdf/xmp/impl/XMPNode;

    move-result-object v2

    invoke-virtual {v2}, Lcom/itextpdf/xmp/impl/XMPNode;->hasQualifier()Z

    move-result v3

    if-eqz v3, :cond_42

    const-string v3, "x-default"

    const/4 v4, 0x1

    invoke-virtual {v2, v4}, Lcom/itextpdf/xmp/impl/XMPNode;->getQualifier(I)Lcom/itextpdf/xmp/impl/XMPNode;

    move-result-object v5

    invoke-virtual {v5}, Lcom/itextpdf/xmp/impl/XMPNode;->getValue()Ljava/lang/String;

    move-result-object v5

    invoke-virtual {v3, v5}, Ljava/lang/String;->equals(Ljava/lang/Object;)Z

    move-result v3

    if-eqz v3, :cond_42

    :try_start_2e
    invoke-virtual {p0, v1}, Lcom/itextpdf/xmp/impl/XMPNode;->removeChild(I)V

    invoke-virtual {p0, v4, v2}, Lcom/itextpdf/xmp/impl/XMPNode;->addChild(ILcom/itextpdf/xmp/impl/XMPNode;)V
    :try_end_34
    .catch Lcom/itextpdf/xmp/XMPException; {:try_start_2e .. :try_end_34} :catch_34

    :catch_34
    if-ne v1, v0, :cond_45

    invoke-virtual {p0, v0}, Lcom/itextpdf/xmp/impl/XMPNode;->getChild(I)Lcom/itextpdf/xmp/impl/XMPNode;

    move-result-object p0

    invoke-virtual {v2}, Lcom/itextpdf/xmp/impl/XMPNode;->getValue()Ljava/lang/String;

    move-result-object v0

    invoke-virtual {p0, v0}, Lcom/itextpdf/xmp/impl/XMPNode;->setValue(Ljava/lang/String;)V

    goto :goto_45

    :cond_42
    add-int/lit8 v1, v1, 0x1

    goto :goto_d

    :cond_45
    :goto_45
    return-void
.end method

.method static serializeNodeValue(Ljava/lang/Object;)Ljava/lang/String;
    .registers 4

    const/4 v0, 0x0

    if-nez p0, :cond_5

    move-object p0, v0

    goto :goto_66

    :cond_5
    instance-of v1, p0, Ljava/lang/Boolean;

    if-eqz v1, :cond_14

    check-cast p0, Ljava/lang/Boolean;

    invoke-virtual {p0}, Ljava/lang/Boolean;->booleanValue()Z

    move-result p0

    invoke-static {p0}, Lcom/itextpdf/xmp/XMPUtils;->convertFromBoolean(Z)Ljava/lang/String;

    move-result-object p0

    goto :goto_66

    :cond_14
    instance-of v1, p0, Ljava/lang/Integer;

    if-eqz v1, :cond_23

    check-cast p0, Ljava/lang/Integer;

    invoke-virtual {p0}, Ljava/lang/Integer;->intValue()I

    move-result p0

    invoke-static {p0}, Lcom/itextpdf/xmp/XMPUtils;->convertFromInteger(I)Ljava/lang/String;

    move-result-object p0

    goto :goto_66

    :cond_23
    instance-of v1, p0, Ljava/lang/Long;

    if-eqz v1, :cond_32

    check-cast p0, Ljava/lang/Long;

    invoke-virtual {p0}, Ljava/lang/Long;->longValue()J

    move-result-wide v1

    invoke-static {v1, v2}, Lcom/itextpdf/xmp/XMPUtils;->convertFromLong(J)Ljava/lang/String;

    move-result-object p0

    goto :goto_66

    :cond_32
    instance-of v1, p0, Ljava/lang/Double;

    if-eqz v1, :cond_41

    check-cast p0, Ljava/lang/Double;

    invoke-virtual {p0}, Ljava/lang/Double;->doubleValue()D

    move-result-wide v1

    invoke-static {v1, v2}, Lcom/itextpdf/xmp/XMPUtils;->convertFromDouble(D)Ljava/lang/String;

    move-result-object p0

    goto :goto_66

    :cond_41
    instance-of v1, p0, Lcom/itextpdf/xmp/XMPDateTime;

    if-eqz v1, :cond_4c

    check-cast p0, Lcom/itextpdf/xmp/XMPDateTime;

    :goto_47
    invoke-static {p0}, Lcom/itextpdf/xmp/XMPUtils;->convertFromDate(Lcom/itextpdf/xmp/XMPDateTime;)Ljava/lang/String;

    move-result-object p0

    goto :goto_66

    :cond_4c
    instance-of v1, p0, Ljava/util/GregorianCalendar;

    if-eqz v1, :cond_57

    check-cast p0, Ljava/util/GregorianCalendar;

    invoke-static {p0}, Lcom/itextpdf/xmp/XMPDateTimeFactory;->createFromCalendar(Ljava/util/Calendar;)Lcom/itextpdf/xmp/XMPDateTime;

    move-result-object p0

    goto :goto_47

    :cond_57
    instance-of v1, p0, [B

    if-eqz v1, :cond_62

    check-cast p0, [B

    invoke-static {p0}, Lcom/itextpdf/xmp/XMPUtils;->encodeBase64([B)Ljava/lang/String;

    move-result-object p0

    goto :goto_66

    :cond_62
    invoke-virtual {p0}, Ljava/lang/Object;->toString()Ljava/lang/String;

    move-result-object p0

    :goto_66
    if-eqz p0, :cond_6c

    invoke-static {p0}, Lcom/itextpdf/xmp/impl/Utils;->removeControlChars(Ljava/lang/String;)Ljava/lang/String;

    move-result-object v0

    :cond_6c
    return-object v0
.end method

.method static setNodeValue(Lcom/itextpdf/xmp/impl/XMPNode;Ljava/lang/Object;)V
    .registers 4

    invoke-static {p1}, Lcom/itextpdf/xmp/impl/XMPNodeUtils;->serializeNodeValue(Ljava/lang/Object;)Ljava/lang/String;

    move-result-object p1

    invoke-virtual {p0}, Lcom/itextpdf/xmp/impl/XMPNode;->getOptions()Lcom/itextpdf/xmp/options/PropertyOptions;

    move-result-object v0

    invoke-virtual {v0}, Lcom/itextpdf/xmp/options/PropertyOptions;->isQualifier()Z

    move-result v0

    if-eqz v0, :cond_1f

    const-string v0, "xml:lang"

    invoke-virtual {p0}, Lcom/itextpdf/xmp/impl/XMPNode;->getName()Ljava/lang/String;

    move-result-object v1

    invoke-virtual {v0, v1}, Ljava/lang/String;->equals(Ljava/lang/Object;)Z

    move-result v0

    if-nez v0, :cond_1b

    goto :goto_1f

    :cond_1b
    invoke-static {p1}, Lcom/itextpdf/xmp/impl/Utils;->normalizeLangValue(Ljava/lang/String;)Ljava/lang/String;

    move-result-object p1

    :cond_1f
    :goto_1f
    invoke-virtual {p0, p1}, Lcom/itextpdf/xmp/impl/XMPNode;->setValue(Ljava/lang/String;)V

    return-void
.end method

.method static verifySetOptions(Lcom/itextpdf/xmp/options/PropertyOptions;Ljava/lang/Object;)Lcom/itextpdf/xmp/options/PropertyOptions;
    .registers 4

    if-nez p0, :cond_7

    new-instance p0, Lcom/itextpdf/xmp/options/PropertyOptions;

    invoke-direct {p0}, Lcom/itextpdf/xmp/options/PropertyOptions;-><init>()V

    :cond_7
    invoke-virtual {p0}, Lcom/itextpdf/xmp/options/PropertyOptions;->isArrayAltText()Z

    move-result v0

    const/4 v1, 0x1

    if-eqz v0, :cond_11

    invoke-virtual {p0, v1}, Lcom/itextpdf/xmp/options/PropertyOptions;->setArrayAlternate(Z)Lcom/itextpdf/xmp/options/PropertyOptions;

    :cond_11
    invoke-virtual {p0}, Lcom/itextpdf/xmp/options/PropertyOptions;->isArrayAlternate()Z

    move-result v0

    if-eqz v0, :cond_1a

    invoke-virtual {p0, v1}, Lcom/itextpdf/xmp/options/PropertyOptions;->setArrayOrdered(Z)Lcom/itextpdf/xmp/options/PropertyOptions;

    :cond_1a
    invoke-virtual {p0}, Lcom/itextpdf/xmp/options/PropertyOptions;->isArrayOrdered()Z

    move-result v0

    if-eqz v0, :cond_23

    invoke-virtual {p0, v1}, Lcom/itextpdf/xmp/options/PropertyOptions;->setArray(Z)Lcom/itextpdf/xmp/options/PropertyOptions;

    :cond_23
    invoke-virtual {p0}, Lcom/itextpdf/xmp/options/PropertyOptions;->isCompositeProperty()Z

    move-result v0

    if-eqz v0, :cond_40

    if-eqz p1, :cond_40

    invoke-virtual {p1}, Ljava/lang/Object;->toString()Ljava/lang/String;

    move-result-object p1

    invoke-virtual {p1}, Ljava/lang/String;->length()I

    move-result p1

    if-gtz p1, :cond_36

    goto :goto_40

    :cond_36
    new-instance p0, Lcom/itextpdf/xmp/XMPException;

    const/16 p1, 0x67

    const-string v0, "Structs and arrays can\'t have values"

    invoke-direct {p0, v0, p1}, Lcom/itextpdf/xmp/XMPException;-><init>(Ljava/lang/String;I)V

    throw p0

    :cond_40
    :goto_40
    invoke-virtual {p0}, Lcom/itextpdf/xmp/options/PropertyOptions;->getOptions()I

    move-result p1

    invoke-virtual {p0, p1}, Lcom/itextpdf/xmp/options/PropertyOptions;->assertConsistency(I)V

    return-object p0
.end method
