.class public Lcom/itextpdf/text/pdf/IntHashtable;
.super Ljava/lang/Object;

# interfaces
.implements Ljava/lang/Cloneable;


# annotations
.annotation system Ldalvik/annotation/MemberClasses;
    value = {
        Lcom/itextpdf/text/pdf/IntHashtable$IntHashtableIterator;,
        Lcom/itextpdf/text/pdf/IntHashtable$Entry;
    }
.end annotation


# instance fields
.field private transient count:I

.field private loadFactor:F

.field private transient table:[Lcom/itextpdf/text/pdf/IntHashtable$Entry;

.field private threshold:I


# direct methods
.method public constructor <init>()V
    .registers 3

    const/16 v0, 0x96

    const/high16 v1, 0x3f400000

    invoke-direct {p0, v0, v1}, Lcom/itextpdf/text/pdf/IntHashtable;-><init>(IF)V

    return-void
.end method

.method public constructor <init>(I)V
    .registers 3

    const/high16 v0, 0x3f400000

    invoke-direct {p0, p1, v0}, Lcom/itextpdf/text/pdf/IntHashtable;-><init>(IF)V

    return-void
.end method

.method public constructor <init>(IF)V
    .registers 5

    invoke-direct {p0}, Ljava/lang/Object;-><init>()V

    if-ltz p1, :cond_30

    const/4 v0, 0x0

    cmpg-float v0, p2, v0

    const/4 v1, 0x1

    if-lez v0, :cond_1b

    if-nez p1, :cond_e

    const/4 p1, 0x1

    :cond_e
    iput p2, p0, Lcom/itextpdf/text/pdf/IntHashtable;->loadFactor:F

    new-array v0, p1, [Lcom/itextpdf/text/pdf/IntHashtable$Entry;

    iput-object v0, p0, Lcom/itextpdf/text/pdf/IntHashtable;->table:[Lcom/itextpdf/text/pdf/IntHashtable$Entry;

    int-to-float p1, p1

    mul-float p1, p1, p2

    float-to-int p1, p1

    iput p1, p0, Lcom/itextpdf/text/pdf/IntHashtable;->threshold:I

    return-void

    :cond_1b
    new-instance p1, Ljava/lang/IllegalArgumentException;

    new-array v0, v1, [Ljava/lang/Object;

    const/4 v1, 0x0

    invoke-static {p2}, Ljava/lang/String;->valueOf(F)Ljava/lang/String;

    move-result-object p2

    aput-object p2, v0, v1

    const-string p2, "illegal.load.1"

    invoke-static {p2, v0}, Lcom/itextpdf/text/error_messages/MessageLocalization;->getComposedMessage(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;

    move-result-object p2

    invoke-direct {p1, p2}, Ljava/lang/IllegalArgumentException;-><init>(Ljava/lang/String;)V

    throw p1

    :cond_30
    new-instance p2, Ljava/lang/IllegalArgumentException;

    const-string v0, "illegal.capacity.1"

    invoke-static {v0, p1}, Lcom/itextpdf/text/error_messages/MessageLocalization;->getComposedMessage(Ljava/lang/String;I)Ljava/lang/String;

    move-result-object p1

    invoke-direct {p2, p1}, Ljava/lang/IllegalArgumentException;-><init>(Ljava/lang/String;)V

    throw p2
.end method


# virtual methods
.method public clear()V
    .registers 4

    iget-object v0, p0, Lcom/itextpdf/text/pdf/IntHashtable;->table:[Lcom/itextpdf/text/pdf/IntHashtable$Entry;

    array-length v1, v0

    :goto_3
    add-int/lit8 v1, v1, -0x1

    if-ltz v1, :cond_b

    const/4 v2, 0x0

    aput-object v2, v0, v1

    goto :goto_3

    :cond_b
    const/4 v0, 0x0

    iput v0, p0, Lcom/itextpdf/text/pdf/IntHashtable;->count:I

    return-void
.end method

.method public clone()Ljava/lang/Object;
    .registers 5

    :try_start_0
    invoke-super {p0}, Ljava/lang/Object;->clone()Ljava/lang/Object;

    move-result-object v0

    check-cast v0, Lcom/itextpdf/text/pdf/IntHashtable;

    iget-object v1, p0, Lcom/itextpdf/text/pdf/IntHashtable;->table:[Lcom/itextpdf/text/pdf/IntHashtable$Entry;

    array-length v1, v1

    new-array v1, v1, [Lcom/itextpdf/text/pdf/IntHashtable$Entry;

    iput-object v1, v0, Lcom/itextpdf/text/pdf/IntHashtable;->table:[Lcom/itextpdf/text/pdf/IntHashtable$Entry;

    iget-object v1, p0, Lcom/itextpdf/text/pdf/IntHashtable;->table:[Lcom/itextpdf/text/pdf/IntHashtable$Entry;

    array-length v1, v1

    :goto_10
    add-int/lit8 v2, v1, -0x1

    if-lez v1, :cond_2c

    iget-object v1, v0, Lcom/itextpdf/text/pdf/IntHashtable;->table:[Lcom/itextpdf/text/pdf/IntHashtable$Entry;

    iget-object v3, p0, Lcom/itextpdf/text/pdf/IntHashtable;->table:[Lcom/itextpdf/text/pdf/IntHashtable$Entry;

    aget-object v3, v3, v2

    if-eqz v3, :cond_27

    iget-object v3, p0, Lcom/itextpdf/text/pdf/IntHashtable;->table:[Lcom/itextpdf/text/pdf/IntHashtable$Entry;

    aget-object v3, v3, v2

    invoke-virtual {v3}, Lcom/itextpdf/text/pdf/IntHashtable$Entry;->clone()Ljava/lang/Object;

    move-result-object v3

    check-cast v3, Lcom/itextpdf/text/pdf/IntHashtable$Entry;

    goto :goto_28

    :cond_27
    const/4 v3, 0x0

    :goto_28
    aput-object v3, v1, v2
    :try_end_2a
    .catch Ljava/lang/CloneNotSupportedException; {:try_start_0 .. :try_end_2a} :catch_2d

    move v1, v2

    goto :goto_10

    :cond_2c
    return-object v0

    :catch_2d
    new-instance v0, Ljava/lang/InternalError;

    invoke-direct {v0}, Ljava/lang/InternalError;-><init>()V

    throw v0
.end method

.method public contains(I)Z
    .registers 6

    iget-object v0, p0, Lcom/itextpdf/text/pdf/IntHashtable;->table:[Lcom/itextpdf/text/pdf/IntHashtable$Entry;

    array-length v1, v0

    :goto_3
    add-int/lit8 v2, v1, -0x1

    if-lez v1, :cond_16

    aget-object v1, v0, v2

    :goto_9
    if-eqz v1, :cond_14

    iget v3, v1, Lcom/itextpdf/text/pdf/IntHashtable$Entry;->value:I

    if-ne v3, p1, :cond_11

    const/4 p1, 0x1

    return p1

    :cond_11
    iget-object v1, v1, Lcom/itextpdf/text/pdf/IntHashtable$Entry;->next:Lcom/itextpdf/text/pdf/IntHashtable$Entry;

    goto :goto_9

    :cond_14
    move v1, v2

    goto :goto_3

    :cond_16
    const/4 p1, 0x0

    return p1
.end method

.method public containsKey(I)Z
    .registers 5

    iget-object v0, p0, Lcom/itextpdf/text/pdf/IntHashtable;->table:[Lcom/itextpdf/text/pdf/IntHashtable$Entry;

    const v1, 0x7fffffff

    and-int/2addr v1, p1

    array-length v2, v0

    rem-int/2addr v1, v2

    aget-object v0, v0, v1

    :goto_a
    if-eqz v0, :cond_19

    iget v1, v0, Lcom/itextpdf/text/pdf/IntHashtable$Entry;->hash:I

    if-ne v1, p1, :cond_16

    iget v1, v0, Lcom/itextpdf/text/pdf/IntHashtable$Entry;->key:I

    if-ne v1, p1, :cond_16

    const/4 p1, 0x1

    return p1

    :cond_16
    iget-object v0, v0, Lcom/itextpdf/text/pdf/IntHashtable$Entry;->next:Lcom/itextpdf/text/pdf/IntHashtable$Entry;

    goto :goto_a

    :cond_19
    const/4 p1, 0x0

    return p1
.end method

.method public containsValue(I)Z
    .registers 2

    invoke-virtual {p0, p1}, Lcom/itextpdf/text/pdf/IntHashtable;->contains(I)Z

    move-result p1

    return p1
.end method

.method public get(I)I
    .registers 5

    iget-object v0, p0, Lcom/itextpdf/text/pdf/IntHashtable;->table:[Lcom/itextpdf/text/pdf/IntHashtable$Entry;

    const v1, 0x7fffffff

    and-int/2addr v1, p1

    array-length v2, v0

    rem-int/2addr v1, v2

    aget-object v0, v0, v1

    :goto_a
    if-eqz v0, :cond_1a

    iget v1, v0, Lcom/itextpdf/text/pdf/IntHashtable$Entry;->hash:I

    if-ne v1, p1, :cond_17

    iget v1, v0, Lcom/itextpdf/text/pdf/IntHashtable$Entry;->key:I

    if-ne v1, p1, :cond_17

    iget p1, v0, Lcom/itextpdf/text/pdf/IntHashtable$Entry;->value:I

    return p1

    :cond_17
    iget-object v0, v0, Lcom/itextpdf/text/pdf/IntHashtable$Entry;->next:Lcom/itextpdf/text/pdf/IntHashtable$Entry;

    goto :goto_a

    :cond_1a
    const/4 p1, 0x0

    return p1
.end method

.method public getEntryIterator()Ljava/util/Iterator;
    .registers 3
    .annotation system Ldalvik/annotation/Signature;
        value = {
            "()",
            "Ljava/util/Iterator<",
            "Lcom/itextpdf/text/pdf/IntHashtable$Entry;",
            ">;"
        }
    .end annotation

    new-instance v0, Lcom/itextpdf/text/pdf/IntHashtable$IntHashtableIterator;

    iget-object v1, p0, Lcom/itextpdf/text/pdf/IntHashtable;->table:[Lcom/itextpdf/text/pdf/IntHashtable$Entry;

    invoke-direct {v0, v1}, Lcom/itextpdf/text/pdf/IntHashtable$IntHashtableIterator;-><init>([Lcom/itextpdf/text/pdf/IntHashtable$Entry;)V

    return-object v0
.end method

.method public getKeys()[I
    .registers 7

    iget v0, p0, Lcom/itextpdf/text/pdf/IntHashtable;->count:I

    new-array v0, v0, [I

    iget-object v1, p0, Lcom/itextpdf/text/pdf/IntHashtable;->table:[Lcom/itextpdf/text/pdf/IntHashtable$Entry;

    array-length v1, v1

    const/4 v2, 0x0

    const/4 v3, 0x0

    :goto_9
    if-nez v3, :cond_18

    :goto_b
    add-int/lit8 v4, v1, -0x1

    if-lez v1, :cond_17

    iget-object v1, p0, Lcom/itextpdf/text/pdf/IntHashtable;->table:[Lcom/itextpdf/text/pdf/IntHashtable$Entry;

    aget-object v3, v1, v4

    if-nez v3, :cond_17

    move v1, v4

    goto :goto_b

    :cond_17
    move v1, v4

    :cond_18
    if-nez v3, :cond_1b

    return-object v0

    :cond_1b
    iget-object v4, v3, Lcom/itextpdf/text/pdf/IntHashtable$Entry;->next:Lcom/itextpdf/text/pdf/IntHashtable$Entry;

    add-int/lit8 v5, v2, 0x1

    iget v3, v3, Lcom/itextpdf/text/pdf/IntHashtable$Entry;->key:I

    aput v3, v0, v2

    move-object v3, v4

    move v2, v5

    goto :goto_9
.end method

.method public getOneKey()I
    .registers 5

    iget v0, p0, Lcom/itextpdf/text/pdf/IntHashtable;->count:I

    const/4 v1, 0x0

    if-nez v0, :cond_6

    return v1

    :cond_6
    iget-object v0, p0, Lcom/itextpdf/text/pdf/IntHashtable;->table:[Lcom/itextpdf/text/pdf/IntHashtable$Entry;

    array-length v0, v0

    const/4 v2, 0x0

    :goto_a
    add-int/lit8 v3, v0, -0x1

    if-lez v0, :cond_16

    iget-object v0, p0, Lcom/itextpdf/text/pdf/IntHashtable;->table:[Lcom/itextpdf/text/pdf/IntHashtable$Entry;

    aget-object v2, v0, v3

    if-nez v2, :cond_16

    move v0, v3

    goto :goto_a

    :cond_16
    if-nez v2, :cond_19

    return v1

    :cond_19
    iget v0, v2, Lcom/itextpdf/text/pdf/IntHashtable$Entry;->key:I

    return v0
.end method

.method public isEmpty()Z
    .registers 2

    iget v0, p0, Lcom/itextpdf/text/pdf/IntHashtable;->count:I

    if-nez v0, :cond_6

    const/4 v0, 0x1

    goto :goto_7

    :cond_6
    const/4 v0, 0x0

    :goto_7
    return v0
.end method

.method public put(II)I
    .registers 8

    iget-object v0, p0, Lcom/itextpdf/text/pdf/IntHashtable;->table:[Lcom/itextpdf/text/pdf/IntHashtable$Entry;

    const v1, 0x7fffffff

    and-int/2addr v1, p1

    array-length v2, v0

    rem-int v2, v1, v2

    aget-object v3, v0, v2

    :goto_b
    if-eqz v3, :cond_1d

    iget v4, v3, Lcom/itextpdf/text/pdf/IntHashtable$Entry;->hash:I

    if-ne v4, p1, :cond_1a

    iget v4, v3, Lcom/itextpdf/text/pdf/IntHashtable$Entry;->key:I

    if-ne v4, p1, :cond_1a

    iget p1, v3, Lcom/itextpdf/text/pdf/IntHashtable$Entry;->value:I

    iput p2, v3, Lcom/itextpdf/text/pdf/IntHashtable$Entry;->value:I

    return p1

    :cond_1a
    iget-object v3, v3, Lcom/itextpdf/text/pdf/IntHashtable$Entry;->next:Lcom/itextpdf/text/pdf/IntHashtable$Entry;

    goto :goto_b

    :cond_1d
    iget v3, p0, Lcom/itextpdf/text/pdf/IntHashtable;->count:I

    iget v4, p0, Lcom/itextpdf/text/pdf/IntHashtable;->threshold:I

    if-lt v3, v4, :cond_2b

    invoke-virtual {p0}, Lcom/itextpdf/text/pdf/IntHashtable;->rehash()V

    iget-object v0, p0, Lcom/itextpdf/text/pdf/IntHashtable;->table:[Lcom/itextpdf/text/pdf/IntHashtable$Entry;

    array-length v2, v0

    rem-int v2, v1, v2

    :cond_2b
    new-instance v1, Lcom/itextpdf/text/pdf/IntHashtable$Entry;

    aget-object v3, v0, v2

    invoke-direct {v1, p1, p1, p2, v3}, Lcom/itextpdf/text/pdf/IntHashtable$Entry;-><init>(IIILcom/itextpdf/text/pdf/IntHashtable$Entry;)V

    aput-object v1, v0, v2

    iget p1, p0, Lcom/itextpdf/text/pdf/IntHashtable;->count:I

    add-int/lit8 p1, p1, 0x1

    iput p1, p0, Lcom/itextpdf/text/pdf/IntHashtable;->count:I

    const/4 p1, 0x0

    return p1
.end method

.method protected rehash()V
    .registers 9

    iget-object v0, p0, Lcom/itextpdf/text/pdf/IntHashtable;->table:[Lcom/itextpdf/text/pdf/IntHashtable$Entry;

    array-length v0, v0

    iget-object v1, p0, Lcom/itextpdf/text/pdf/IntHashtable;->table:[Lcom/itextpdf/text/pdf/IntHashtable$Entry;

    mul-int/lit8 v2, v0, 0x2

    add-int/lit8 v2, v2, 0x1

    new-array v3, v2, [Lcom/itextpdf/text/pdf/IntHashtable$Entry;

    int-to-float v4, v2

    iget v5, p0, Lcom/itextpdf/text/pdf/IntHashtable;->loadFactor:F

    mul-float v4, v4, v5

    float-to-int v4, v4

    iput v4, p0, Lcom/itextpdf/text/pdf/IntHashtable;->threshold:I

    iput-object v3, p0, Lcom/itextpdf/text/pdf/IntHashtable;->table:[Lcom/itextpdf/text/pdf/IntHashtable$Entry;

    :goto_15
    add-int/lit8 v4, v0, -0x1

    if-lez v0, :cond_30

    aget-object v0, v1, v4

    :goto_1b
    if-eqz v0, :cond_2e

    iget-object v5, v0, Lcom/itextpdf/text/pdf/IntHashtable$Entry;->next:Lcom/itextpdf/text/pdf/IntHashtable$Entry;

    iget v6, v0, Lcom/itextpdf/text/pdf/IntHashtable$Entry;->hash:I

    const v7, 0x7fffffff

    and-int/2addr v6, v7

    rem-int/2addr v6, v2

    aget-object v7, v3, v6

    iput-object v7, v0, Lcom/itextpdf/text/pdf/IntHashtable$Entry;->next:Lcom/itextpdf/text/pdf/IntHashtable$Entry;

    aput-object v0, v3, v6

    move-object v0, v5

    goto :goto_1b

    :cond_2e
    move v0, v4

    goto :goto_15

    :cond_30
    return-void
.end method

.method public remove(I)I
    .registers 9

    iget-object v0, p0, Lcom/itextpdf/text/pdf/IntHashtable;->table:[Lcom/itextpdf/text/pdf/IntHashtable$Entry;

    const v1, 0x7fffffff

    and-int/2addr v1, p1

    array-length v2, v0

    rem-int/2addr v1, v2

    aget-object v2, v0, v1

    const/4 v3, 0x0

    :goto_b
    move-object v6, v3

    move-object v3, v2

    move-object v2, v6

    const/4 v4, 0x0

    if-eqz v3, :cond_32

    iget v5, v3, Lcom/itextpdf/text/pdf/IntHashtable$Entry;->hash:I

    if-ne v5, p1, :cond_2f

    iget v5, v3, Lcom/itextpdf/text/pdf/IntHashtable$Entry;->key:I

    if-ne v5, p1, :cond_2f

    if-eqz v2, :cond_20

    iget-object p1, v3, Lcom/itextpdf/text/pdf/IntHashtable$Entry;->next:Lcom/itextpdf/text/pdf/IntHashtable$Entry;

    iput-object p1, v2, Lcom/itextpdf/text/pdf/IntHashtable$Entry;->next:Lcom/itextpdf/text/pdf/IntHashtable$Entry;

    goto :goto_24

    :cond_20
    iget-object p1, v3, Lcom/itextpdf/text/pdf/IntHashtable$Entry;->next:Lcom/itextpdf/text/pdf/IntHashtable$Entry;

    aput-object p1, v0, v1

    :goto_24
    iget p1, p0, Lcom/itextpdf/text/pdf/IntHashtable;->count:I

    add-int/lit8 p1, p1, -0x1

    iput p1, p0, Lcom/itextpdf/text/pdf/IntHashtable;->count:I

    iget p1, v3, Lcom/itextpdf/text/pdf/IntHashtable$Entry;->value:I

    iput v4, v3, Lcom/itextpdf/text/pdf/IntHashtable$Entry;->value:I

    return p1

    :cond_2f
    iget-object v2, v3, Lcom/itextpdf/text/pdf/IntHashtable$Entry;->next:Lcom/itextpdf/text/pdf/IntHashtable$Entry;

    goto :goto_b

    :cond_32
    return v4
.end method

.method public size()I
    .registers 2

    iget v0, p0, Lcom/itextpdf/text/pdf/IntHashtable;->count:I

    return v0
.end method

.method public toOrderedKeys()[I
    .registers 2

    invoke-virtual {p0}, Lcom/itextpdf/text/pdf/IntHashtable;->getKeys()[I

    move-result-object v0

    invoke-static {v0}, Ljava/util/Arrays;->sort([I)V

    return-object v0
.end method
