.class Lcom/bumptech/glide/gifencoder/NeuQuant;
.super Ljava/lang/Object;
.source "NeuQuant.java"


# static fields
.field protected static final alphabiasshift:I = 0xa

.field protected static final alpharadbias:I = 0x40000

.field protected static final alpharadbshift:I = 0x12

.field protected static final beta:I = 0x40

.field protected static final betagamma:I = 0x10000

.field protected static final betashift:I = 0xa

.field protected static final gamma:I = 0x400

.field protected static final gammashift:I = 0xa

.field protected static final initalpha:I = 0x400

.field protected static final initrad:I = 0x20

.field protected static final initradius:I = 0x800

.field protected static final intbias:I = 0x10000

.field protected static final intbiasshift:I = 0x10

.field protected static final maxnetpos:I = 0xff

.field protected static final minpicturebytes:I = 0x5e5

.field protected static final ncycles:I = 0x64

.field protected static final netbiasshift:I = 0x4

.field protected static final netsize:I = 0x100

.field protected static final prime1:I = 0x1f3

.field protected static final prime2:I = 0x1eb

.field protected static final prime3:I = 0x1e7

.field protected static final prime4:I = 0x1f7

.field protected static final radbias:I = 0x100

.field protected static final radbiasshift:I = 0x8

.field protected static final radiusbias:I = 0x40

.field protected static final radiusbiasshift:I = 0x6

.field protected static final radiusdec:I = 0x1e


# instance fields
.field protected alphadec:I

.field protected bias:[I

.field protected freq:[I

.field protected lengthcount:I

.field protected netindex:[I

.field protected network:[[I

.field protected radpower:[I

.field protected samplefac:I

.field protected thepicture:[B


# direct methods
.method public constructor <init>([BII)V
    .registers 7

    .line 0
    invoke-direct {p0}, Ljava/lang/Object;-><init>()V

    const/16 v0, 0x100

    .line 123
    new-array v1, v0, [I

    iput-object v1, p0, Lcom/bumptech/glide/gifencoder/NeuQuant;->netindex:[I

    .line 127
    new-array v1, v0, [I

    iput-object v1, p0, Lcom/bumptech/glide/gifencoder/NeuQuant;->bias:[I

    .line 130
    new-array v1, v0, [I

    iput-object v1, p0, Lcom/bumptech/glide/gifencoder/NeuQuant;->freq:[I

    const/16 v1, 0x20

    .line 132
    new-array v1, v1, [I

    iput-object v1, p0, Lcom/bumptech/glide/gifencoder/NeuQuant;->radpower:[I

    .line 145
    iput-object p1, p0, Lcom/bumptech/glide/gifencoder/NeuQuant;->thepicture:[B

    .line 146
    iput p2, p0, Lcom/bumptech/glide/gifencoder/NeuQuant;->lengthcount:I

    .line 147
    iput p3, p0, Lcom/bumptech/glide/gifencoder/NeuQuant;->samplefac:I

    .line 149
    new-array p1, v0, [[I

    iput-object p1, p0, Lcom/bumptech/glide/gifencoder/NeuQuant;->network:[[I

    const/4 p1, 0x0

    const/4 p2, 0x0

    :goto_23
    if-ge p2, v0, :cond_46

    .line 151
    iget-object p3, p0, Lcom/bumptech/glide/gifencoder/NeuQuant;->network:[[I

    const/4 v1, 0x4

    new-array v1, v1, [I

    aput-object v1, p3, p2

    .line 152
    iget-object p3, p0, Lcom/bumptech/glide/gifencoder/NeuQuant;->network:[[I

    aget-object p3, p3, p2

    const/4 v1, 0x2

    shl-int/lit8 v2, p2, 0xc

    .line 153
    div-int/2addr v2, v0

    aput v2, p3, v1

    const/4 v1, 0x1

    aput v2, p3, v1

    aput v2, p3, p1

    .line 154
    iget-object p3, p0, Lcom/bumptech/glide/gifencoder/NeuQuant;->freq:[I

    aput v0, p3, p2

    .line 155
    iget-object p3, p0, Lcom/bumptech/glide/gifencoder/NeuQuant;->bias:[I

    aput p1, p3, p2

    add-int/lit8 p2, p2, 0x1

    goto :goto_23

    :cond_46
    return-void
.end method


# virtual methods
.method protected alterneigh(IIIII)V
    .registers 20

    move-object v0, p0

    sub-int v3, p2, p1

    const/4 v4, -0x1

    if-ge v3, v4, :cond_7

    const/4 v3, -0x1

    :cond_7
    add-int v1, p2, p1

    const/16 v4, 0x100

    if-le v1, v4, :cond_f

    .line 424
    const/16 v1, 0x100

    :cond_f
    add-int/lit8 v4, p2, 0x1

    const/4 v5, 0x1

    .line 426
    add-int/lit8 v2, p2, -0x1

    const/4 v6, 0x1

    :goto_15
    if-lt v4, v1, :cond_1b

    if-le v2, v3, :cond_1a

    goto :goto_1b

    :cond_1a
    return-void

    .line 0
    :cond_1b
    :goto_1b
    iget-object v7, v0, Lcom/bumptech/glide/gifencoder/NeuQuant;->radpower:[I

    add-int/lit8 v8, v6, 0x1

    .line 427
    aget v6, v7, v6

    const/4 v7, 0x2

    const/4 v9, 0x0

    const/high16 v10, 0x40000

    if-ge v4, v1, :cond_52

    iget-object v11, v0, Lcom/bumptech/glide/gifencoder/NeuQuant;->network:[[I

    add-int/lit8 v12, v4, 0x1

    .line 428
    aget-object v4, v11, v4

    :try_start_2d
    aget v11, v4, v9

    aget v13, v4, v9

    sub-int v13, v13, p3

    mul-int v13, v13, v6

    div-int/2addr v13, v10

    sub-int/2addr v11, v13

    aput v11, v4, v9

    .line 433
    aget v11, v4, v5

    aget v13, v4, v5

    sub-int v13, v13, p4

    .line 435
    mul-int v13, v13, v6

    div-int/2addr v13, v10

    sub-int/2addr v11, v13

    aput v11, v4, v5

    aget v11, v4, v7

    aget v13, v4, v7

    sub-int v13, v13, p5

    .line 436
    mul-int v13, v13, v6

    div-int/2addr v13, v10

    sub-int/2addr v11, v13

    aput v11, v4, v7
    :try_end_51
    .catch Ljava/lang/Exception; {:try_start_2d .. :try_end_51} :catch_51

    :catch_51
    move v4, v12

    :cond_52
    if-le v2, v3, :cond_81

    iget-object v11, v0, Lcom/bumptech/glide/gifencoder/NeuQuant;->network:[[I

    add-int/lit8 v12, v2, -0x1

    .line 437
    aget-object v2, v11, v2

    :try_start_5a
    aget v11, v2, v9

    aget v13, v2, v9

    sub-int v13, v13, p3

    mul-int v13, v13, v6

    div-int/2addr v13, v10

    sub-int/2addr v11, v13

    aput v11, v2, v9

    aget v9, v2, v5

    aget v11, v2, v5

    sub-int v11, v11, p4

    mul-int v11, v11, v6

    div-int/2addr v11, v10

    sub-int/2addr v9, v11

    aput v9, v2, v5

    aget v9, v2, v7

    aget v11, v2, v7

    sub-int v11, v11, p5

    mul-int v6, v6, v11

    div-int/2addr v6, v10

    sub-int/2addr v9, v6

    aput v9, v2, v7
    :try_end_7e
    .catch Ljava/lang/Exception; {:try_start_5a .. :try_end_7e} :catch_7e

    :catch_7e
    move v6, v8

    move v2, v12

    goto :goto_15

    :cond_81
    move v6, v8

    goto :goto_15
.end method

.method protected altersingle(IIIII)V
    .registers 9

    .line 0
    iget-object v0, p0, Lcom/bumptech/glide/gifencoder/NeuQuant;->network:[[I

    aget-object p2, v0, p2

    const/4 v0, 0x0

    .line 452
    aget v1, p2, v0

    aget v2, p2, v0

    sub-int/2addr v2, p3

    mul-int v2, v2, p1

    div-int/lit16 v2, v2, 0x400

    sub-int/2addr v1, v2

    aput v1, p2, v0

    const/4 p3, 0x1

    .line 453
    aget v0, p2, p3

    aget v1, p2, p3

    sub-int/2addr v1, p4

    mul-int v1, v1, p1

    div-int/lit16 v1, v1, 0x400

    sub-int/2addr v0, v1

    aput v0, p2, p3

    const/4 p3, 0x2

    .line 454
    aget p4, p2, p3

    aget v0, p2, p3

    sub-int/2addr v0, p5

    mul-int p1, p1, v0

    div-int/lit16 p1, p1, 0x400

    sub-int/2addr p4, p1

    aput p4, p2, p3

    return-void
.end method

.method public colorMap()[B
    .registers 11

    const/16 v0, 0x300

    .line 0
    new-array v0, v0, [B

    .line 161
    const/16 v1, 0x100

    new-array v2, v1, [I

    const/4 v3, 0x0

    const/4 v4, 0x0

    .line 163
    :goto_a
    if-ge v4, v1, :cond_18

    iget-object v5, p0, Lcom/bumptech/glide/gifencoder/NeuQuant;->network:[[I

    aget-object v5, v5, v4

    const/4 v6, 0x3

    aget v5, v5, v6

    aput v4, v2, v5

    add-int/lit8 v4, v4, 0x1

    goto :goto_a

    :cond_18
    const/4 v4, 0x0

    const/4 v5, 0x0

    .line 166
    :goto_1a
    if-ge v4, v1, :cond_45

    aget v6, v2, v4

    .line 167
    add-int/lit8 v7, v5, 0x1

    iget-object v8, p0, Lcom/bumptech/glide/gifencoder/NeuQuant;->network:[[I

    aget-object v8, v8, v6

    aget v8, v8, v3

    int-to-byte v8, v8

    aput-byte v8, v0, v5

    .line 168
    add-int/lit8 v5, v7, 0x1

    iget-object v8, p0, Lcom/bumptech/glide/gifencoder/NeuQuant;->network:[[I

    aget-object v8, v8, v6

    const/4 v9, 0x1

    aget v8, v8, v9

    int-to-byte v8, v8

    aput-byte v8, v0, v7

    .line 169
    add-int/lit8 v7, v5, 0x1

    iget-object v8, p0, Lcom/bumptech/glide/gifencoder/NeuQuant;->network:[[I

    aget-object v6, v8, v6

    const/4 v8, 0x2

    aget v6, v6, v8

    int-to-byte v6, v6

    aput-byte v6, v0, v5

    add-int/lit8 v4, v4, 0x1

    move v5, v7

    goto :goto_1a

    :cond_45
    return-object v0
.end method

.method protected contest(III)I
    .registers 13

    const/4 v0, 0x0

    const v1, 0x7fffffff

    .line 478
    const/4 v2, -0x1

    const/4 v1, 0x0

    const/4 v3, -0x1

    const v4, 0x7fffffff

    const v5, 0x7fffffff

    .line 481
    :goto_d
    const/16 v6, 0x100

    if-ge v1, v6, :cond_53

    .line 0
    iget-object v6, p0, Lcom/bumptech/glide/gifencoder/NeuQuant;->network:[[I

    .line 485
    aget-object v6, v6, v1

    aget v7, v6, v0

    sub-int/2addr v7, p1

    if-gez v7, :cond_1b

    neg-int v7, v7

    :cond_1b
    const/4 v8, 0x1

    aget v8, v6, v8

    .line 493
    sub-int/2addr v8, p2

    if-gez v8, :cond_22

    neg-int v8, v8

    :cond_22
    add-int/2addr v7, v8

    const/4 v8, 0x2

    aget v6, v6, v8

    sub-int/2addr v6, p3

    if-gez v6, :cond_2a

    .line 498
    neg-int v6, v6

    :cond_2a
    add-int/2addr v7, v6

    if-ge v7, v4, :cond_2f

    move v2, v1

    move v4, v7

    .line 499
    :cond_2f
    iget-object v6, p0, Lcom/bumptech/glide/gifencoder/NeuQuant;->bias:[I

    aget v6, v6, v1

    shr-int/lit8 v6, v6, 0xc

    sub-int/2addr v7, v6

    .line 500
    if-ge v7, v5, :cond_3a

    move v3, v1

    move v5, v7

    :cond_3a
    iget-object v6, p0, Lcom/bumptech/glide/gifencoder/NeuQuant;->freq:[I

    aget v6, v6, v1

    shr-int/lit8 v6, v6, 0xa

    iget-object v7, p0, Lcom/bumptech/glide/gifencoder/NeuQuant;->freq:[I

    .line 502
    aget v8, v7, v1

    sub-int/2addr v8, v6

    aput v8, v7, v1

    iget-object v7, p0, Lcom/bumptech/glide/gifencoder/NeuQuant;->bias:[I

    aget v8, v7, v1

    .line 503
    shl-int/lit8 v6, v6, 0xa

    add-int/2addr v8, v6

    aput v8, v7, v1

    add-int/lit8 v1, v1, 0x1

    goto :goto_d

    :cond_53
    iget-object p1, p0, Lcom/bumptech/glide/gifencoder/NeuQuant;->freq:[I

    aget p2, p1, v2

    add-int/lit8 p2, p2, 0x40

    aput p2, p1, v2

    iget-object p1, p0, Lcom/bumptech/glide/gifencoder/NeuQuant;->bias:[I

    aget p2, p1, v2

    const/high16 p3, 0x10000

    sub-int/2addr p2, p3

    aput p2, p1, v2

    return v3
.end method

.method public inxbuild()V
    .registers 14

    const/4 v0, 0x0

    const/4 v1, 0x0

    const/4 v2, 0x0

    const/4 v3, 0x0

    .line 191
    :goto_4
    const/16 v4, 0x100

    const/4 v5, 0x1

    if-ge v1, v4, :cond_61

    .line 0
    iget-object v6, p0, Lcom/bumptech/glide/gifencoder/NeuQuant;->network:[[I

    aget-object v6, v6, v1

    .line 194
    aget v7, v6, v5

    add-int/lit8 v8, v1, 0x1

    .line 195
    move v10, v1

    move v9, v7

    move v7, v8

    :goto_14
    if-ge v7, v4, :cond_24

    .line 197
    iget-object v11, p0, Lcom/bumptech/glide/gifencoder/NeuQuant;->network:[[I

    aget-object v11, v11, v7

    aget v12, v11, v5

    .line 200
    if-ge v12, v9, :cond_21

    aget v9, v11, v5

    move v10, v7

    .line 203
    :cond_21
    add-int/lit8 v7, v7, 0x1

    .line 204
    goto :goto_14

    :cond_24
    iget-object v4, p0, Lcom/bumptech/glide/gifencoder/NeuQuant;->network:[[I

    aget-object v4, v4, v10

    .line 205
    if-eq v1, v10, :cond_4c

    .line 206
    aget v7, v4, v0

    .line 207
    aget v10, v6, v0

    aput v10, v4, v0

    .line 208
    aput v7, v6, v0

    .line 209
    aget v7, v4, v5

    .line 210
    aget v10, v6, v5

    aput v10, v4, v5

    .line 211
    aput v7, v6, v5

    const/4 v7, 0x2

    .line 212
    aget v10, v4, v7

    .line 213
    aget v11, v6, v7

    aput v11, v4, v7

    .line 214
    aput v10, v6, v7

    const/4 v7, 0x3

    aget v10, v4, v7

    .line 218
    aget v11, v6, v7

    aput v11, v4, v7

    aput v10, v6, v7

    :cond_4c
    if-eq v9, v2, :cond_5f

    iget-object v4, p0, Lcom/bumptech/glide/gifencoder/NeuQuant;->netindex:[I

    .line 220
    add-int/2addr v3, v1

    shr-int/2addr v3, v5

    aput v3, v4, v2

    :goto_54
    add-int/lit8 v2, v2, 0x1

    if-ge v2, v9, :cond_5d

    .line 225
    iget-object v3, p0, Lcom/bumptech/glide/gifencoder/NeuQuant;->netindex:[I

    aput v1, v3, v2

    goto :goto_54

    :cond_5d
    move v3, v1

    move v2, v9

    :cond_5f
    move v1, v8

    goto :goto_4

    :cond_61
    iget-object v0, p0, Lcom/bumptech/glide/gifencoder/NeuQuant;->netindex:[I

    .line 227
    const/16 v1, 0xff

    add-int/2addr v3, v1

    shr-int/2addr v3, v5

    aput v3, v0, v2

    add-int/2addr v2, v5

    :goto_6a
    if-ge v2, v4, :cond_73

    iget-object v0, p0, Lcom/bumptech/glide/gifencoder/NeuQuant;->netindex:[I

    aput v1, v0, v2

    add-int/lit8 v2, v2, 0x1

    goto :goto_6a

    :cond_73
    return-void
.end method

.method public learn()V
    .registers 24

    move-object/from16 v6, p0

    .line 0
    iget v0, v6, Lcom/bumptech/glide/gifencoder/NeuQuant;->lengthcount:I

    const/16 v1, 0x5e5

    const/4 v7, 0x1

    .line 241
    if-ge v0, v1, :cond_b

    .line 242
    iput v7, v6, Lcom/bumptech/glide/gifencoder/NeuQuant;->samplefac:I

    :cond_b
    iget v0, v6, Lcom/bumptech/glide/gifencoder/NeuQuant;->samplefac:I

    sub-int/2addr v0, v7

    const/4 v2, 0x3

    div-int/2addr v0, v2

    add-int/lit8 v0, v0, 0x1e

    .line 243
    iput v0, v6, Lcom/bumptech/glide/gifencoder/NeuQuant;->alphadec:I

    .line 245
    iget-object v8, v6, Lcom/bumptech/glide/gifencoder/NeuQuant;->thepicture:[B

    .line 246
    iget v9, v6, Lcom/bumptech/glide/gifencoder/NeuQuant;->lengthcount:I

    iget v0, v6, Lcom/bumptech/glide/gifencoder/NeuQuant;->lengthcount:I

    iget v3, v6, Lcom/bumptech/glide/gifencoder/NeuQuant;->samplefac:I

    mul-int/lit8 v3, v3, 0x3

    .line 247
    div-int v10, v0, v3

    div-int/lit8 v0, v10, 0x64

    const/16 v3, 0x800

    const/16 v4, 0x20

    const/4 v11, 0x0

    const/4 v5, 0x0

    :goto_28
    const/16 v12, 0x400

    .line 255
    if-ge v5, v4, :cond_3c

    iget-object v13, v6, Lcom/bumptech/glide/gifencoder/NeuQuant;->radpower:[I

    mul-int v14, v5, v5

    rsub-int v14, v14, 0x400

    mul-int/lit16 v14, v14, 0x100

    div-int/2addr v14, v12

    mul-int v12, v12, v14

    aput v12, v13, v5

    add-int/lit8 v5, v5, 0x1

    .line 259
    goto :goto_28

    :cond_3c
    iget v5, v6, Lcom/bumptech/glide/gifencoder/NeuQuant;->lengthcount:I

    if-ge v5, v1, :cond_42

    .line 261
    const/4 v13, 0x3

    goto :goto_65

    :cond_42
    iget v2, v6, Lcom/bumptech/glide/gifencoder/NeuQuant;->lengthcount:I

    rem-int/lit16 v2, v2, 0x1f3

    if-eqz v2, :cond_4d

    const/16 v1, 0x5d9

    const/16 v13, 0x5d9

    .line 264
    goto :goto_65

    :cond_4d
    iget v2, v6, Lcom/bumptech/glide/gifencoder/NeuQuant;->lengthcount:I

    rem-int/lit16 v2, v2, 0x1eb

    if-eqz v2, :cond_58

    const/16 v1, 0x5c1

    const/16 v13, 0x5c1

    .line 267
    goto :goto_65

    :cond_58
    iget v2, v6, Lcom/bumptech/glide/gifencoder/NeuQuant;->lengthcount:I

    rem-int/lit16 v2, v2, 0x1e7

    if-eqz v2, :cond_63

    const/16 v1, 0x5b5

    const/16 v13, 0x5b5

    goto :goto_65

    :cond_63
    const/16 v13, 0x5e5

    :goto_65
    move/from16 v17, v0

    const/4 v12, 0x0

    const/4 v14, 0x0

    const/16 v15, 0x400

    const/16 v16, 0x20

    const/16 v18, 0x800

    :cond_6f
    :goto_6f
    if-ge v12, v10, :cond_e3

    .line 276
    add-int/lit8 v0, v14, 0x0

    aget-byte v0, v8, v0

    and-int/lit16 v0, v0, 0xff

    shl-int/lit8 v5, v0, 0x4

    .line 277
    add-int/lit8 v0, v14, 0x1

    aget-byte v0, v8, v0

    and-int/lit16 v0, v0, 0xff

    shl-int/lit8 v4, v0, 0x4

    .line 278
    add-int/lit8 v0, v14, 0x2

    aget-byte v0, v8, v0

    and-int/lit16 v0, v0, 0xff

    .line 279
    shl-int/lit8 v3, v0, 0x4

    invoke-virtual {v6, v5, v4, v3}, Lcom/bumptech/glide/gifencoder/NeuQuant;->contest(III)I

    move-result v19

    move-object v0, v6

    move v1, v15

    move/from16 v2, v19

    move/from16 v20, v3

    move v3, v5

    move/from16 v21, v4

    move/from16 v22, v5

    .line 281
    move/from16 v5, v20

    invoke-virtual/range {v0 .. v5}, Lcom/bumptech/glide/gifencoder/NeuQuant;->altersingle(IIIII)V

    if-eqz v16, :cond_ad

    move-object v0, v6

    move/from16 v1, v16

    move/from16 v2, v19

    move/from16 v3, v22

    move/from16 v4, v21

    .line 283
    move/from16 v5, v20

    invoke-virtual/range {v0 .. v5}, Lcom/bumptech/glide/gifencoder/NeuQuant;->alterneigh(IIIII)V

    :cond_ad
    add-int/2addr v14, v13

    .line 287
    if-lt v14, v9, :cond_b3

    iget v0, v6, Lcom/bumptech/glide/gifencoder/NeuQuant;->lengthcount:I

    sub-int/2addr v14, v0

    :cond_b3
    add-int/lit8 v12, v12, 0x1

    if-nez v17, :cond_b9

    .line 292
    const/16 v17, 0x1

    :cond_b9
    rem-int v0, v12, v17

    .line 293
    if-nez v0, :cond_6f

    iget v0, v6, Lcom/bumptech/glide/gifencoder/NeuQuant;->alphadec:I

    div-int v0, v15, v0

    .line 294
    sub-int/2addr v15, v0

    div-int/lit8 v0, v18, 0x1e

    sub-int v18, v18, v0

    shr-int/lit8 v0, v18, 0x6

    if-gt v0, v7, :cond_cb

    const/4 v0, 0x0

    :cond_cb
    const/4 v1, 0x0

    .line 299
    :goto_cc
    if-ge v1, v0, :cond_e0

    iget-object v2, v6, Lcom/bumptech/glide/gifencoder/NeuQuant;->radpower:[I

    mul-int v3, v0, v0

    mul-int v4, v1, v1

    sub-int v4, v3, v4

    mul-int/lit16 v4, v4, 0x100

    div-int/2addr v4, v3

    mul-int v4, v4, v15

    aput v4, v2, v1

    add-int/lit8 v1, v1, 0x1

    goto :goto_cc

    :cond_e0
    move/from16 v16, v0

    goto :goto_6f

    :cond_e3
    return-void
.end method

.method public map(III)I
    .registers 16

    .line 0
    iget-object v0, p0, Lcom/bumptech/glide/gifencoder/NeuQuant;->netindex:[I

    aget v0, v0, p2

    add-int/lit8 v1, v0, -0x1

    const/4 v2, -0x1

    const/16 v3, 0x3e8

    const/4 v3, -0x1

    const/16 v4, 0x3e8

    :cond_c
    :goto_c
    const/16 v5, 0x100

    if-lt v0, v5, :cond_14

    if-ltz v1, :cond_13

    goto :goto_14

    :cond_13
    return v3

    :cond_14
    :goto_14
    const/4 v6, 0x3

    const/4 v7, 0x2

    const/4 v8, 0x0

    const/4 v9, 0x1

    if-ge v0, v5, :cond_40

    .line 324
    iget-object v10, p0, Lcom/bumptech/glide/gifencoder/NeuQuant;->network:[[I

    aget-object v10, v10, v0

    .line 325
    aget v11, v10, v9

    sub-int/2addr v11, p2

    if-lt v11, v4, :cond_26

    const/16 v0, 0x100

    goto :goto_40

    :cond_26
    add-int/lit8 v0, v0, 0x1

    if-gez v11, :cond_2b

    neg-int v11, v11

    .line 332
    :cond_2b
    aget v5, v10, v8

    sub-int/2addr v5, p1

    if-gez v5, :cond_31

    neg-int v5, v5

    :cond_31
    add-int/2addr v11, v5

    if-ge v11, v4, :cond_40

    .line 337
    aget v5, v10, v7

    sub-int/2addr v5, p3

    if-gez v5, :cond_3a

    neg-int v5, v5

    :cond_3a
    add-int/2addr v11, v5

    if-ge v11, v4, :cond_40

    .line 343
    aget v3, v10, v6

    move v4, v11

    :cond_40
    :goto_40
    if-ltz v1, :cond_c

    .line 349
    iget-object v5, p0, Lcom/bumptech/glide/gifencoder/NeuQuant;->network:[[I

    aget-object v5, v5, v1

    .line 350
    aget v9, v5, v9

    sub-int v9, p2, v9

    if-lt v9, v4, :cond_4e

    const/4 v1, -0x1

    goto :goto_c

    :cond_4e
    add-int/lit8 v1, v1, -0x1

    if-gez v9, :cond_53

    neg-int v9, v9

    .line 357
    :cond_53
    aget v8, v5, v8

    sub-int/2addr v8, p1

    if-gez v8, :cond_59

    neg-int v8, v8

    :cond_59
    add-int/2addr v9, v8

    if-ge v9, v4, :cond_c

    .line 362
    aget v7, v5, v7

    sub-int/2addr v7, p3

    if-gez v7, :cond_62

    neg-int v7, v7

    :cond_62
    add-int/2addr v7, v9

    if-ge v7, v4, :cond_c

    .line 368
    aget v3, v5, v6

    move v4, v7

    goto :goto_c
.end method

.method public process()[B
    .registers 2

    .line 0
    invoke-virtual {p0}, Lcom/bumptech/glide/gifencoder/NeuQuant;->learn()V

    .line 379
    invoke-virtual {p0}, Lcom/bumptech/glide/gifencoder/NeuQuant;->unbiasnet()V

    .line 380
    invoke-virtual {p0}, Lcom/bumptech/glide/gifencoder/NeuQuant;->inxbuild()V

    .line 381
    invoke-virtual {p0}, Lcom/bumptech/glide/gifencoder/NeuQuant;->colorMap()[B

    move-result-object v0

    return-object v0
.end method

.method public unbiasnet()V
    .registers 6

    const/4 v0, 0x0

    const/4 v1, 0x0

    :goto_2
    const/16 v2, 0x100

    if-ge v1, v2, :cond_30

    .line 0
    iget-object v2, p0, Lcom/bumptech/glide/gifencoder/NeuQuant;->network:[[I

    aget-object v2, v2, v1

    .line 395
    aget v3, v2, v0

    shr-int/lit8 v3, v3, 0x4

    aput v3, v2, v0

    iget-object v2, p0, Lcom/bumptech/glide/gifencoder/NeuQuant;->network:[[I

    aget-object v2, v2, v1

    const/4 v3, 0x1

    .line 396
    aget v4, v2, v3

    shr-int/lit8 v4, v4, 0x4

    aput v4, v2, v3

    iget-object v2, p0, Lcom/bumptech/glide/gifencoder/NeuQuant;->network:[[I

    aget-object v2, v2, v1

    const/4 v3, 0x2

    .line 397
    aget v4, v2, v3

    shr-int/lit8 v4, v4, 0x4

    aput v4, v2, v3

    iget-object v2, p0, Lcom/bumptech/glide/gifencoder/NeuQuant;->network:[[I

    aget-object v2, v2, v1

    const/4 v3, 0x3

    aput v1, v2, v3

    add-int/lit8 v1, v1, 0x1

    goto :goto_2

    :cond_30
    return-void
.end method
