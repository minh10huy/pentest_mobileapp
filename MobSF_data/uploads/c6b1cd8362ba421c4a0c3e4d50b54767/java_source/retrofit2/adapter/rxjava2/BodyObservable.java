/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  io.reactivex.Observable
 *  io.reactivex.Observer
 *  io.reactivex.disposables.Disposable
 *  io.reactivex.exceptions.CompositeException
 *  io.reactivex.exceptions.Exceptions
 *  io.reactivex.plugins.RxJavaPlugins
 *  retrofit2.Response
 */
package retrofit2.adapter.rxjava2;

import io.reactivex.Observable;
import io.reactivex.Observer;
import io.reactivex.disposables.Disposable;
import io.reactivex.exceptions.CompositeException;
import io.reactivex.exceptions.Exceptions;
import io.reactivex.plugins.RxJavaPlugins;
import retrofit2.Response;
import retrofit2.adapter.rxjava2.HttpException;

final class BodyObservable<T>
extends Observable<T> {
    private final Observable<Response<T>> upstream;

    BodyObservable(Observable<Response<T>> observable2) {
        this.upstream = observable2;
    }

    protected void subscribeActual(Observer<? super T> observer) {
        this.upstream.subscribe(new BodyObserver<T>(observer));
    }

    private static class BodyObserver<R>
    implements Observer<Response<R>> {
        private final Observer<? super R> observer;
        private boolean terminated;

        BodyObserver(Observer<? super R> observer) {
            this.observer = observer;
        }

        public void onComplete() {
            if (!this.terminated) {
                this.observer.onComplete();
            }
        }

        public void onError(Throwable throwable) {
            if (!this.terminated) {
                this.observer.onError(throwable);
                return;
            }
            AssertionError assertionError = new AssertionError((Object)"This should never happen! Report as a bug with the full stacktrace.");
            assertionError.initCause(throwable);
            RxJavaPlugins.onError((Throwable)((Object)assertionError));
        }

        public void onNext(Response<R> object) {
            if (object.isSuccessful()) {
                this.observer.onNext(object.body());
                return;
            }
            this.terminated = true;
            object = new HttpException((Response<?>)object);
            try {
                this.observer.onError(object);
                return;
            }
            catch (Throwable throwable) {
                Exceptions.throwIfFatal((Throwable)throwable);
                RxJavaPlugins.onError((Throwable)new CompositeException(new Throwable[]{object, throwable}));
                return;
            }
        }

        public void onSubscribe(Disposable disposable) {
            this.observer.onSubscribe(disposable);
        }
    }

}

