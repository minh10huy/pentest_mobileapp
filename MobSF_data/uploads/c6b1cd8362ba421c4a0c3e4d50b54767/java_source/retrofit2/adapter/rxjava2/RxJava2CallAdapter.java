/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  io.reactivex.BackpressureStrategy
 *  io.reactivex.Completable
 *  io.reactivex.Flowable
 *  io.reactivex.Maybe
 *  io.reactivex.Observable
 *  io.reactivex.Scheduler
 *  io.reactivex.Single
 *  retrofit2.Call
 *  retrofit2.Response
 */
package retrofit2.adapter.rxjava2;

import io.reactivex.BackpressureStrategy;
import io.reactivex.Completable;
import io.reactivex.Flowable;
import io.reactivex.Maybe;
import io.reactivex.Observable;
import io.reactivex.Scheduler;
import io.reactivex.Single;
import java.lang.reflect.Type;
import retrofit2.Call;
import retrofit2.CallAdapter;
import retrofit2.Response;
import retrofit2.adapter.rxjava2.BodyObservable;
import retrofit2.adapter.rxjava2.CallEnqueueObservable;
import retrofit2.adapter.rxjava2.CallExecuteObservable;
import retrofit2.adapter.rxjava2.ResultObservable;

final class RxJava2CallAdapter<R>
implements CallAdapter<R, Object> {
    private final boolean isAsync;
    private final boolean isBody;
    private final boolean isCompletable;
    private final boolean isFlowable;
    private final boolean isMaybe;
    private final boolean isResult;
    private final boolean isSingle;
    private final Type responseType;
    private final Scheduler scheduler;

    RxJava2CallAdapter(Type type, Scheduler scheduler, boolean bl, boolean bl2, boolean bl3, boolean bl4, boolean bl5, boolean bl6, boolean bl7) {
        this.responseType = type;
        this.scheduler = scheduler;
        this.isAsync = bl;
        this.isResult = bl2;
        this.isBody = bl3;
        this.isFlowable = bl4;
        this.isSingle = bl5;
        this.isMaybe = bl6;
        this.isCompletable = bl7;
    }

    @Override
    public Object adapt(Call<R> object) {
        object = this.isAsync ? new CallEnqueueObservable<R>((Call<R>)object) : new CallExecuteObservable<R>((Call<R>)object);
        if (this.isResult) {
            object = new ResultObservable(object);
        } else if (this.isBody) {
            object = new BodyObservable(object);
        }
        Observable observable2 = object;
        if (this.scheduler != null) {
            observable2 = object.subscribeOn(this.scheduler);
        }
        if (this.isFlowable) {
            return observable2.toFlowable(BackpressureStrategy.LATEST);
        }
        if (this.isSingle) {
            return observable2.singleOrError();
        }
        if (this.isMaybe) {
            return observable2.singleElement();
        }
        if (this.isCompletable) {
            return observable2.ignoreElements();
        }
        return observable2;
    }

    @Override
    public Type responseType() {
        return this.responseType;
    }
}

