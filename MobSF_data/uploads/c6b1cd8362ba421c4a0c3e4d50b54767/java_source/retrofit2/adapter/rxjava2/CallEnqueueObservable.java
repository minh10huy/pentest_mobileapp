/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  io.reactivex.Observable
 *  io.reactivex.Observer
 *  io.reactivex.disposables.Disposable
 *  io.reactivex.exceptions.CompositeException
 *  io.reactivex.exceptions.Exceptions
 *  io.reactivex.plugins.RxJavaPlugins
 *  retrofit2.Call
 *  retrofit2.Response
 */
package retrofit2.adapter.rxjava2;

import io.reactivex.Observable;
import io.reactivex.Observer;
import io.reactivex.disposables.Disposable;
import io.reactivex.exceptions.CompositeException;
import io.reactivex.exceptions.Exceptions;
import io.reactivex.plugins.RxJavaPlugins;
import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.Response;

final class CallEnqueueObservable<T>
extends Observable<Response<T>> {
    private final Call<T> originalCall;

    CallEnqueueObservable(Call<T> call) {
        this.originalCall = call;
    }

    protected void subscribeActual(Observer<? super Response<T>> observer) {
        Call call = this.originalCall.clone();
        CallCallback callCallback = new CallCallback(call, observer);
        observer.onSubscribe(callCallback);
        call.enqueue(callCallback);
    }

    private static final class CallCallback<T>
    implements Disposable,
    Callback<T> {
        private final Call<?> call;
        private final Observer<? super Response<T>> observer;
        boolean terminated = false;

        CallCallback(Call<?> call, Observer<? super Response<T>> observer) {
            this.call = call;
            this.observer = observer;
        }

        public void dispose() {
            this.call.cancel();
        }

        public boolean isDisposed() {
            return this.call.isCanceled();
        }

        @Override
        public void onFailure(Call<T> call, Throwable throwable) {
            if (call.isCanceled()) {
                return;
            }
            try {
                this.observer.onError(throwable);
                return;
            }
            catch (Throwable throwable2) {
                Exceptions.throwIfFatal((Throwable)throwable2);
                RxJavaPlugins.onError((Throwable)new CompositeException(new Throwable[]{throwable, throwable2}));
                return;
            }
        }

        @Override
        public void onResponse(Call<T> call, Response<T> response) {
            block7 : {
                if (call.isCanceled()) {
                    return;
                }
                try {
                    this.observer.onNext(response);
                    if (!call.isCanceled()) {
                        this.terminated = true;
                        this.observer.onComplete();
                        return;
                    }
                }
                catch (Throwable throwable) {
                    if (this.terminated) {
                        RxJavaPlugins.onError((Throwable)throwable);
                        return;
                    }
                    if (call.isCanceled()) break block7;
                    try {
                        this.observer.onError(throwable);
                        return;
                    }
                    catch (Throwable throwable2) {
                        Exceptions.throwIfFatal((Throwable)throwable2);
                        RxJavaPlugins.onError((Throwable)new CompositeException(new Throwable[]{throwable, throwable2}));
                    }
                }
            }
        }
    }

}

