/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  io.reactivex.Observable
 *  io.reactivex.Observer
 *  io.reactivex.disposables.Disposable
 *  io.reactivex.exceptions.CompositeException
 *  io.reactivex.exceptions.Exceptions
 *  io.reactivex.plugins.RxJavaPlugins
 *  retrofit2.Call
 *  retrofit2.Response
 */
package retrofit2.adapter.rxjava2;

import io.reactivex.Observable;
import io.reactivex.Observer;
import io.reactivex.disposables.Disposable;
import io.reactivex.exceptions.CompositeException;
import io.reactivex.exceptions.Exceptions;
import io.reactivex.plugins.RxJavaPlugins;
import retrofit2.Call;
import retrofit2.Response;

final class CallExecuteObservable<T>
extends Observable<Response<T>> {
    private final Call<T> originalCall;

    CallExecuteObservable(Call<T> call) {
        this.originalCall = call;
    }

    /*
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    protected void subscribeActual(Observer<? super Response<T>> observer) {
        Call call;
        boolean bl;
        void var4_7;
        block8 : {
            boolean bl2;
            call = this.originalCall.clone();
            observer.onSubscribe((Disposable)new CallDisposable(call));
            Response response = call.execute();
            if (!call.isCanceled()) {
                observer.onNext((Object)response);
            }
            if (bl2 = call.isCanceled()) return;
            try {
                observer.onComplete();
                return;
            }
            catch (Throwable throwable) {
                bl = true;
            }
            break block8;
            catch (Throwable throwable) {
                bl = false;
            }
        }
        Exceptions.throwIfFatal((Throwable)var4_7);
        if (bl) {
            RxJavaPlugins.onError((Throwable)var4_7);
            return;
        }
        if (call.isCanceled()) return;
        try {
            observer.onError((Throwable)var4_7);
            return;
        }
        catch (Throwable throwable) {
            Exceptions.throwIfFatal((Throwable)throwable);
            RxJavaPlugins.onError((Throwable)new CompositeException(new Throwable[]{var4_7, throwable}));
        }
    }

    private static final class CallDisposable
    implements Disposable {
        private final Call<?> call;

        CallDisposable(Call<?> call) {
            this.call = call;
        }

        public void dispose() {
            this.call.cancel();
        }

        public boolean isDisposed() {
            return this.call.isCanceled();
        }
    }

}

