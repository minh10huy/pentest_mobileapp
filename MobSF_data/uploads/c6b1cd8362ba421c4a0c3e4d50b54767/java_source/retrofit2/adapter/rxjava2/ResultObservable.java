/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  io.reactivex.Observable
 *  io.reactivex.Observer
 *  io.reactivex.disposables.Disposable
 *  io.reactivex.exceptions.CompositeException
 *  io.reactivex.exceptions.Exceptions
 *  io.reactivex.plugins.RxJavaPlugins
 *  retrofit2.Response
 */
package retrofit2.adapter.rxjava2;

import io.reactivex.Observable;
import io.reactivex.Observer;
import io.reactivex.disposables.Disposable;
import io.reactivex.exceptions.CompositeException;
import io.reactivex.exceptions.Exceptions;
import io.reactivex.plugins.RxJavaPlugins;
import retrofit2.Response;
import retrofit2.adapter.rxjava2.Result;

final class ResultObservable<T>
extends Observable<Result<T>> {
    private final Observable<Response<T>> upstream;

    ResultObservable(Observable<Response<T>> observable2) {
        this.upstream = observable2;
    }

    protected void subscribeActual(Observer<? super Result<T>> observer) {
        this.upstream.subscribe(new ResultObserver(observer));
    }

    private static class ResultObserver<R>
    implements Observer<Response<R>> {
        private final Observer<? super Result<R>> observer;

        ResultObserver(Observer<? super Result<R>> observer) {
            this.observer = observer;
        }

        public void onComplete() {
            this.observer.onComplete();
        }

        public void onError(Throwable throwable) {
            try {
                this.observer.onNext(Result.error(throwable));
            }
            catch (Throwable throwable2) {
                try {
                    this.observer.onError(throwable2);
                    return;
                }
                catch (Throwable throwable3) {
                    Exceptions.throwIfFatal((Throwable)throwable3);
                    RxJavaPlugins.onError((Throwable)new CompositeException(new Throwable[]{throwable2, throwable3}));
                    return;
                }
            }
            this.observer.onComplete();
        }

        public void onNext(Response<R> response) {
            this.observer.onNext(Result.response(response));
        }

        public void onSubscribe(Disposable disposable) {
            this.observer.onSubscribe(disposable);
        }
    }

}

