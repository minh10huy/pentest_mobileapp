/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  okhttp3.Request
 *  retrofit2.Call
 *  retrofit2.CallAdapter$Factory
 *  retrofit2.Response
 *  retrofit2.Retrofit
 *  retrofit2.Utils
 */
package retrofit2;

import java.io.IOException;
import java.lang.annotation.Annotation;
import java.lang.reflect.Type;
import java.util.concurrent.Executor;
import okhttp3.Request;
import retrofit2.Call;
import retrofit2.CallAdapter;
import retrofit2.Callback;
import retrofit2.Response;
import retrofit2.Retrofit;
import retrofit2.Utils;

final class ExecutorCallAdapterFactory
extends CallAdapter {
    final Executor callbackExecutor;

    ExecutorCallAdapterFactory(Executor executor) {
        this.callbackExecutor = executor;
    }

    public CallAdapter<?, ?> get(Type type, Annotation[] arrannotation, Retrofit retrofit) {
        if (ExecutorCallAdapterFactory.getRawType((Type)type) != Call.class) {
            return null;
        }
        return new CallAdapter<Object, Call<?>>(Utils.getCallResponseType((Type)type)){
            final /* synthetic */ Type val$responseType;
            {
                this.val$responseType = type;
            }

            @Override
            public Call<Object> adapt(Call<Object> call) {
                return new ExecutorCallbackCall<Object>(ExecutorCallAdapterFactory.this.callbackExecutor, call);
            }

            @Override
            public Type responseType() {
                return this.val$responseType;
            }
        };
    }

    static final class ExecutorCallbackCall<T>
    implements Call<T> {
        final Executor callbackExecutor;
        final Call<T> delegate;

        ExecutorCallbackCall(Executor executor, Call<T> call) {
            this.callbackExecutor = executor;
            this.delegate = call;
        }

        public void cancel() {
            this.delegate.cancel();
        }

        public Call<T> clone() {
            return new ExecutorCallbackCall<T>(this.callbackExecutor, this.delegate.clone());
        }

        public void enqueue(final Callback<T> callback) {
            Utils.checkNotNull(callback, (String)"callback == null");
            this.delegate.enqueue(new Callback<T>(){

                @Override
                public void onFailure(Call<T> call, final Throwable throwable) {
                    ExecutorCallbackCall.this.callbackExecutor.execute(new Runnable(){

                        @Override
                        public void run() {
                            callback.onFailure(ExecutorCallbackCall.this, throwable);
                        }
                    });
                }

                @Override
                public void onResponse(Call<T> call, final Response<T> response) {
                    ExecutorCallbackCall.this.callbackExecutor.execute(new Runnable(){

                        @Override
                        public void run() {
                            if (ExecutorCallbackCall.this.delegate.isCanceled()) {
                                callback.onFailure(ExecutorCallbackCall.this, new IOException("Canceled"));
                                return;
                            }
                            callback.onResponse(ExecutorCallbackCall.this, response);
                        }
                    });
                }

            });
        }

        public Response<T> execute() throws IOException {
            return this.delegate.execute();
        }

        public boolean isCanceled() {
            return this.delegate.isCanceled();
        }

        public boolean isExecuted() {
            return this.delegate.isExecuted();
        }

        public Request request() {
            return this.delegate.request();
        }

    }

}

