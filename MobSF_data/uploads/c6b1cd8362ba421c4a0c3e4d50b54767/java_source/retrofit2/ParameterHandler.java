/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  javax.annotation.Nullable
 *  retrofit2.Converter
 */
package retrofit2;

import java.io.IOException;
import java.lang.reflect.Array;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import javax.annotation.Nullable;
import okhttp3.Headers;
import okhttp3.MultipartBody;
import okhttp3.RequestBody;
import retrofit2.Converter;
import retrofit2.RequestBuilder;
import retrofit2.Utils;

abstract class ParameterHandler<T> {
    ParameterHandler() {
    }

    abstract void apply(RequestBuilder var1, @Nullable T var2) throws IOException;

    final ParameterHandler<Object> array() {
        return new ParameterHandler<Object>(){

            @Override
            void apply(RequestBuilder requestBuilder, @Nullable Object object) throws IOException {
                if (object == null) {
                    return;
                }
                int n = Array.getLength(object);
                for (int i = 0; i < n; ++i) {
                    ParameterHandler.this.apply(requestBuilder, Array.get(object, i));
                }
            }
        };
    }

    final ParameterHandler<Iterable<T>> iterable() {
        return new ParameterHandler<Iterable<T>>(){

            @Override
            void apply(RequestBuilder requestBuilder, @Nullable Iterable<T> object) throws IOException {
                if (object == null) {
                    return;
                }
                object = object.iterator();
                while (object.hasNext()) {
                    Object e = object.next();
                    ParameterHandler.this.apply(requestBuilder, e);
                }
            }
        };
    }

    static final class Body<T>
    extends ParameterHandler<T> {
        private final Converter<T, RequestBody> converter;

        Body(Converter<T, RequestBody> converter) {
            this.converter = converter;
        }

        @Override
        void apply(RequestBuilder requestBuilder, @Nullable T t) {
            if (t == null) {
                throw new IllegalArgumentException("Body parameter value must not be null.");
            }
            try {
                RequestBody requestBody = (RequestBody)this.converter.convert(t);
                requestBuilder.setBody(requestBody);
                return;
            }
            catch (IOException iOException) {
                StringBuilder stringBuilder = new StringBuilder();
                stringBuilder.append("Unable to convert ");
                stringBuilder.append(t);
                stringBuilder.append(" to RequestBody");
                throw new RuntimeException(stringBuilder.toString(), iOException);
            }
        }
    }

    static final class Field<T>
    extends ParameterHandler<T> {
        private final boolean encoded;
        private final String name;
        private final Converter<T, String> valueConverter;

        Field(String string2, Converter<T, String> converter, boolean bl) {
            this.name = Utils.checkNotNull(string2, "name == null");
            this.valueConverter = converter;
            this.encoded = bl;
        }

        @Override
        void apply(RequestBuilder requestBuilder, @Nullable T object) throws IOException {
            if (object == null) {
                return;
            }
            if ((object = (String)this.valueConverter.convert(object)) == null) {
                return;
            }
            requestBuilder.addFormField(this.name, (String)object, this.encoded);
        }
    }

    static final class FieldMap<T>
    extends ParameterHandler<Map<String, T>> {
        private final boolean encoded;
        private final Converter<T, String> valueConverter;

        FieldMap(Converter<T, String> converter, boolean bl) {
            this.valueConverter = converter;
            this.encoded = bl;
        }

        @Override
        void apply(RequestBuilder object, @Nullable Map<String, T> object2) throws IOException {
            if (object2 == null) {
                throw new IllegalArgumentException("Field map was null.");
            }
            for (Map.Entry<String, Object> entry : object2.entrySet()) {
                object2 = entry.getKey();
                if (object2 == null) {
                    throw new IllegalArgumentException("Field map contained null key.");
                }
                if ((entry = entry.getValue()) == null) {
                    object = new StringBuilder();
                    object.append("Field map contained null value for key '");
                    object.append((String)object2);
                    object.append("'.");
                    throw new IllegalArgumentException(object.toString());
                }
                String string2 = (String)this.valueConverter.convert(entry);
                if (string2 == null) {
                    object = new StringBuilder();
                    object.append("Field map value '");
                    object.append(entry);
                    object.append("' converted to null by ");
                    object.append(this.valueConverter.getClass().getName());
                    object.append(" for key '");
                    object.append((String)object2);
                    object.append("'.");
                    throw new IllegalArgumentException(object.toString());
                }
                object.addFormField((String)object2, string2, this.encoded);
            }
        }
    }

    static final class Header<T>
    extends ParameterHandler<T> {
        private final String name;
        private final Converter<T, String> valueConverter;

        Header(String string2, Converter<T, String> converter) {
            this.name = Utils.checkNotNull(string2, "name == null");
            this.valueConverter = converter;
        }

        @Override
        void apply(RequestBuilder requestBuilder, @Nullable T object) throws IOException {
            if (object == null) {
                return;
            }
            if ((object = (String)this.valueConverter.convert(object)) == null) {
                return;
            }
            requestBuilder.addHeader(this.name, (String)object);
        }
    }

    static final class HeaderMap<T>
    extends ParameterHandler<Map<String, T>> {
        private final Converter<T, String> valueConverter;

        HeaderMap(Converter<T, String> converter) {
            this.valueConverter = converter;
        }

        @Override
        void apply(RequestBuilder object, @Nullable Map<String, T> object2) throws IOException {
            if (object2 == null) {
                throw new IllegalArgumentException("Header map was null.");
            }
            for (Map.Entry<String, Object> entry : object2.entrySet()) {
                object2 = entry.getKey();
                if (object2 == null) {
                    throw new IllegalArgumentException("Header map contained null key.");
                }
                if ((entry = entry.getValue()) == null) {
                    object = new StringBuilder();
                    object.append("Header map contained null value for key '");
                    object.append((String)object2);
                    object.append("'.");
                    throw new IllegalArgumentException(object.toString());
                }
                object.addHeader((String)object2, (String)this.valueConverter.convert(entry));
            }
        }
    }

    static final class Part<T>
    extends ParameterHandler<T> {
        private final Converter<T, RequestBody> converter;
        private final Headers headers;

        Part(Headers headers, Converter<T, RequestBody> converter) {
            this.headers = headers;
            this.converter = converter;
        }

        @Override
        void apply(RequestBuilder requestBuilder, @Nullable T t) {
            if (t == null) {
                return;
            }
            try {
                RequestBody requestBody = (RequestBody)this.converter.convert(t);
                requestBuilder.addPart(this.headers, requestBody);
                return;
            }
            catch (IOException iOException) {
                StringBuilder stringBuilder = new StringBuilder();
                stringBuilder.append("Unable to convert ");
                stringBuilder.append(t);
                stringBuilder.append(" to RequestBody");
                throw new RuntimeException(stringBuilder.toString(), iOException);
            }
        }
    }

    static final class PartMap<T>
    extends ParameterHandler<Map<String, T>> {
        private final String transferEncoding;
        private final Converter<T, RequestBody> valueConverter;

        PartMap(Converter<T, RequestBody> converter, String string2) {
            this.valueConverter = converter;
            this.transferEncoding = string2;
        }

        @Override
        void apply(RequestBuilder object, @Nullable Map<String, T> object2) throws IOException {
            if (object2 == null) {
                throw new IllegalArgumentException("Part map was null.");
            }
            for (Map.Entry<String, Object> entry : object2.entrySet()) {
                object2 = entry.getKey();
                if (object2 == null) {
                    throw new IllegalArgumentException("Part map contained null key.");
                }
                if ((entry = entry.getValue()) == null) {
                    object = new StringBuilder();
                    object.append("Part map contained null value for key '");
                    object.append((String)object2);
                    object.append("'.");
                    throw new IllegalArgumentException(object.toString());
                }
                StringBuilder stringBuilder = new StringBuilder();
                stringBuilder.append("form-data; name=\"");
                stringBuilder.append((String)object2);
                stringBuilder.append("\"");
                object.addPart(Headers.of("Content-Disposition", stringBuilder.toString(), "Content-Transfer-Encoding", this.transferEncoding), (RequestBody)this.valueConverter.convert(entry));
            }
        }
    }

    static final class Path<T>
    extends ParameterHandler<T> {
        private final boolean encoded;
        private final String name;
        private final Converter<T, String> valueConverter;

        Path(String string2, Converter<T, String> converter, boolean bl) {
            this.name = Utils.checkNotNull(string2, "name == null");
            this.valueConverter = converter;
            this.encoded = bl;
        }

        @Override
        void apply(RequestBuilder object, @Nullable T t) throws IOException {
            if (t == null) {
                object = new StringBuilder();
                object.append("Path parameter \"");
                object.append(this.name);
                object.append("\" value must not be null.");
                throw new IllegalArgumentException(object.toString());
            }
            object.addPathParam(this.name, (String)this.valueConverter.convert(t), this.encoded);
        }
    }

    static final class Query<T>
    extends ParameterHandler<T> {
        private final boolean encoded;
        private final String name;
        private final Converter<T, String> valueConverter;

        Query(String string2, Converter<T, String> converter, boolean bl) {
            this.name = Utils.checkNotNull(string2, "name == null");
            this.valueConverter = converter;
            this.encoded = bl;
        }

        @Override
        void apply(RequestBuilder requestBuilder, @Nullable T object) throws IOException {
            if (object == null) {
                return;
            }
            if ((object = (String)this.valueConverter.convert(object)) == null) {
                return;
            }
            requestBuilder.addQueryParam(this.name, (String)object, this.encoded);
        }
    }

    static final class QueryMap<T>
    extends ParameterHandler<Map<String, T>> {
        private final boolean encoded;
        private final Converter<T, String> valueConverter;

        QueryMap(Converter<T, String> converter, boolean bl) {
            this.valueConverter = converter;
            this.encoded = bl;
        }

        @Override
        void apply(RequestBuilder object, @Nullable Map<String, T> object2) throws IOException {
            if (object2 == null) {
                throw new IllegalArgumentException("Query map was null.");
            }
            for (Map.Entry<String, Object> entry : object2.entrySet()) {
                object2 = entry.getKey();
                if (object2 == null) {
                    throw new IllegalArgumentException("Query map contained null key.");
                }
                if ((entry = entry.getValue()) == null) {
                    object = new StringBuilder();
                    object.append("Query map contained null value for key '");
                    object.append((String)object2);
                    object.append("'.");
                    throw new IllegalArgumentException(object.toString());
                }
                String string2 = (String)this.valueConverter.convert(entry);
                if (string2 == null) {
                    object = new StringBuilder();
                    object.append("Query map value '");
                    object.append(entry);
                    object.append("' converted to null by ");
                    object.append(this.valueConverter.getClass().getName());
                    object.append(" for key '");
                    object.append((String)object2);
                    object.append("'.");
                    throw new IllegalArgumentException(object.toString());
                }
                object.addQueryParam((String)object2, string2, this.encoded);
            }
        }
    }

    static final class QueryName<T>
    extends ParameterHandler<T> {
        private final boolean encoded;
        private final Converter<T, String> nameConverter;

        QueryName(Converter<T, String> converter, boolean bl) {
            this.nameConverter = converter;
            this.encoded = bl;
        }

        @Override
        void apply(RequestBuilder requestBuilder, @Nullable T t) throws IOException {
            if (t == null) {
                return;
            }
            requestBuilder.addQueryParam((String)this.nameConverter.convert(t), null, this.encoded);
        }
    }

    static final class RawPart
    extends ParameterHandler<MultipartBody.Part> {
        static final RawPart INSTANCE = new RawPart();

        private RawPart() {
        }

        @Override
        void apply(RequestBuilder requestBuilder, @Nullable MultipartBody.Part part) {
            if (part != null) {
                requestBuilder.addPart(part);
            }
        }
    }

    static final class RelativeUrl
    extends ParameterHandler<Object> {
        RelativeUrl() {
        }

        @Override
        void apply(RequestBuilder requestBuilder, @Nullable Object object) {
            Utils.checkNotNull(object, "@Url parameter is null.");
            requestBuilder.setRelativeUrl(object);
        }
    }

}

