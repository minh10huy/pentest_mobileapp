/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  javax.annotation.Nullable
 *  javax.annotation.concurrent.GuardedBy
 *  okhttp3.Call
 *  okhttp3.Callback
 *  retrofit2.Callback
 *  retrofit2.OkHttpCall$1
 *  retrofit2.OkHttpCall$ExceptionCatchingRequestBody
 *  retrofit2.OkHttpCall$NoContentResponseBody
 */
package retrofit2;

import java.io.IOException;
import javax.annotation.Nullable;
import javax.annotation.concurrent.GuardedBy;
import okhttp3.MediaType;
import okhttp3.Request;
import okhttp3.Response;
import okhttp3.ResponseBody;
import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.OkHttpCall;
import retrofit2.Response;
import retrofit2.ServiceMethod;
import retrofit2.Utils;

final class OkHttpCall<T>
implements Call<T> {
    @Nullable
    private final Object[] args;
    private volatile boolean canceled;
    @Nullable
    @GuardedBy(value="this")
    private Throwable creationFailure;
    @GuardedBy(value="this")
    private boolean executed;
    @Nullable
    @GuardedBy(value="this")
    private okhttp3.Call rawCall;
    private final ServiceMethod<T, ?> serviceMethod;

    OkHttpCall(ServiceMethod<T, ?> serviceMethod, @Nullable Object[] arrobject) {
        this.serviceMethod = serviceMethod;
        this.args = arrobject;
    }

    private okhttp3.Call createRawCall() throws IOException {
        okhttp3.Call call = this.serviceMethod.toCall(this.args);
        if (call == null) {
            throw new NullPointerException("Call.Factory returned null.");
        }
        return call;
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Converted monitor instructions to comments
     * Lifted jumps to return sites
     */
    @Override
    public void cancel() {
        this.canceled = true;
        // MONITORENTER : this
        okhttp3.Call call = this.rawCall;
        // MONITOREXIT : this
        if (call == null) return;
        call.cancel();
    }

    @Override
    public OkHttpCall<T> clone() {
        return new OkHttpCall<T>(this.serviceMethod, this.args);
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Converted monitor instructions to comments
     * Lifted jumps to return sites
     */
    @Override
    public void enqueue(Callback<T> callback) {
        Utils.checkNotNull(callback, "callback == null");
        // MONITORENTER : this
        if (this.executed) {
            throw new IllegalStateException("Already executed.");
        }
        this.executed = true;
        okhttp3.Call call = this.rawCall;
        Throwable throwable = this.creationFailure;
        okhttp3.Call call2 = call;
        Throwable throwable2 = throwable;
        if (call == null) {
            call2 = call;
            throwable2 = throwable;
            if (throwable == null) {
                try {
                    this.rawCall = call2 = this.createRawCall();
                    throwable2 = throwable;
                }
                catch (Throwable throwable3) {
                    Utils.throwIfFatal(throwable3);
                    this.creationFailure = throwable3;
                    call2 = call;
                }
            }
        }
        // MONITOREXIT : this
        if (throwable2 != null) {
            callback.onFailure((Call)this, throwable2);
            return;
        }
        if (this.canceled) {
            call2.cancel();
        }
        call2.enqueue((okhttp3.Callback)new 1(this, callback));
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Converted monitor instructions to comments
     * Lifted jumps to return sites
     */
    @Override
    public Response<T> execute() throws IOException {
        okhttp3.Call call;
        // MONITORENTER : this
        if (this.executed) {
            throw new IllegalStateException("Already executed.");
        }
        this.executed = true;
        if (this.creationFailure != null) {
            if (this.creationFailure instanceof IOException) {
                throw (IOException)this.creationFailure;
            }
            if (!(this.creationFailure instanceof RuntimeException)) throw (Error)this.creationFailure;
            throw (RuntimeException)this.creationFailure;
        }
        okhttp3.Call call2 = call = this.rawCall;
        if (call == null) {
            try {
                this.rawCall = call2 = this.createRawCall();
            }
            catch (IOException | Error | RuntimeException throwable) {
                Utils.throwIfFatal(throwable);
                this.creationFailure = throwable;
                throw throwable;
            }
        }
        // MONITOREXIT : this
        if (!this.canceled) return this.parseResponse(call2.execute());
        call2.cancel();
        return this.parseResponse(call2.execute());
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @Override
    public boolean isCanceled() {
        boolean bl = this.canceled;
        boolean bl2 = true;
        if (bl) {
            return true;
        }
        synchronized (this) {
            if (this.rawCall == null) return false;
            if (this.rawCall.isCanceled()) return bl2;
            return false;
        }
    }

    @Override
    public boolean isExecuted() {
        synchronized (this) {
            boolean bl = this.executed;
            return bl;
        }
    }

    Response<T> parseResponse(okhttp3.Response object) throws IOException {
        Object object2 = object.body();
        okhttp3.Response response = object.newBuilder().body((ResponseBody)new /* Unavailable Anonymous Inner Class!! */).build();
        int n = response.code();
        if (n >= 200 && n < 300) {
            if (n != 204 && n != 205) {
                object = new /* Unavailable Anonymous Inner Class!! */;
                try {
                    object2 = Response.success(this.serviceMethod.toResponse((ResponseBody)object), response);
                    return object2;
                }
                catch (RuntimeException runtimeException) {
                    object.throwIfCaught();
                    throw runtimeException;
                }
            }
            object2.close();
            return Response.success(null, response);
        }
        try {
            object = Response.error(Utils.buffer((ResponseBody)object2), response);
            return object;
        }
        finally {
            object2.close();
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @Override
    public Request request() {
        synchronized (this) {
            Object object = this.rawCall;
            if (object != null) {
                return object.request();
            }
            if (this.creationFailure != null) {
                if (this.creationFailure instanceof IOException) {
                    throw new RuntimeException("Unable to create request.", this.creationFailure);
                }
                if (!(this.creationFailure instanceof RuntimeException)) throw (Error)this.creationFailure;
                throw (RuntimeException)this.creationFailure;
            }
            try {
                this.rawCall = object = this.createRawCall();
                return object.request();
            }
            catch (IOException iOException) {
                this.creationFailure = iOException;
                throw new RuntimeException("Unable to create request.", iOException);
            }
            catch (Error | RuntimeException throwable) {
                Utils.throwIfFatal(throwable);
                this.creationFailure = throwable;
                throw throwable;
            }
        }
    }
}

