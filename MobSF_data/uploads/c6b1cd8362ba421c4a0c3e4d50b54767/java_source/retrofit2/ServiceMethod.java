/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  javax.annotation.Nullable
 *  okhttp3.Call
 *  retrofit2.CallAdapter
 *  retrofit2.Converter
 *  retrofit2.ServiceMethod$Builder
 */
package retrofit2;

import java.io.IOException;
import java.util.LinkedHashSet;
import java.util.Set;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.annotation.Nullable;
import okhttp3.Call;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.MediaType;
import okhttp3.Request;
import okhttp3.ResponseBody;
import retrofit2.Call;
import retrofit2.CallAdapter;
import retrofit2.Converter;
import retrofit2.ParameterHandler;
import retrofit2.RequestBuilder;
import retrofit2.Retrofit;
import retrofit2.ServiceMethod;

final class ServiceMethod<R, T> {
    static final String PARAM = "[a-zA-Z][a-zA-Z0-9_-]*";
    static final Pattern PARAM_NAME_REGEX;
    static final Pattern PARAM_URL_REGEX;
    private final HttpUrl baseUrl;
    private final CallAdapter<R, T> callAdapter;
    private final Call.Factory callFactory;
    private final MediaType contentType;
    private final boolean hasBody;
    private final Headers headers;
    private final String httpMethod;
    private final boolean isFormEncoded;
    private final boolean isMultipart;
    private final ParameterHandler<?>[] parameterHandlers;
    private final String relativeUrl;
    private final Converter<ResponseBody, R> responseConverter;

    static {
        PARAM_URL_REGEX = Pattern.compile("\\{([a-zA-Z][a-zA-Z0-9_-]*)\\}");
        PARAM_NAME_REGEX = Pattern.compile(PARAM);
    }

    ServiceMethod(<R, T> builder) {
        this.callFactory = builder.retrofit.callFactory();
        this.callAdapter = builder.callAdapter;
        this.baseUrl = builder.retrofit.baseUrl();
        this.responseConverter = builder.responseConverter;
        this.httpMethod = builder.httpMethod;
        this.relativeUrl = builder.relativeUrl;
        this.headers = builder.headers;
        this.contentType = builder.contentType;
        this.hasBody = builder.hasBody;
        this.isFormEncoded = builder.isFormEncoded;
        this.isMultipart = builder.isMultipart;
        this.parameterHandlers = builder.parameterHandlers;
    }

    static Class<?> boxIfPrimitive(Class<?> class_) {
        if (Boolean.TYPE == class_) {
            return Boolean.class;
        }
        if (Byte.TYPE == class_) {
            return Byte.class;
        }
        if (Character.TYPE == class_) {
            return Character.class;
        }
        if (Double.TYPE == class_) {
            return Double.class;
        }
        if (Float.TYPE == class_) {
            return Float.class;
        }
        if (Integer.TYPE == class_) {
            return Integer.class;
        }
        if (Long.TYPE == class_) {
            return Long.class;
        }
        if (Short.TYPE == class_) {
            return Short.class;
        }
        return class_;
    }

    static Set<String> parsePathParameters(String object) {
        object = PARAM_URL_REGEX.matcher((CharSequence)object);
        LinkedHashSet<String> linkedHashSet = new LinkedHashSet<String>();
        while (object.find()) {
            linkedHashSet.add(object.group(1));
        }
        return linkedHashSet;
    }

    T adapt(Call<R> call) {
        return (T)this.callAdapter.adapt(call);
    }

    /* varargs */ okhttp3.Call toCall(@Nullable Object ... object) throws IOException {
        RequestBuilder requestBuilder = new RequestBuilder(this.httpMethod, this.baseUrl, this.relativeUrl, this.headers, this.contentType, this.hasBody, this.isFormEncoded, this.isMultipart);
        ParameterHandler<?>[] arrparameterHandler = this.parameterHandlers;
        int n = object != null ? ((Object[])object).length : 0;
        if (n != arrparameterHandler.length) {
            object = new StringBuilder();
            object.append("Argument count (");
            object.append(n);
            object.append(") doesn't match expected count (");
            object.append(arrparameterHandler.length);
            object.append(")");
            throw new IllegalArgumentException(object.toString());
        }
        for (int i = 0; i < n; ++i) {
            arrparameterHandler[i].apply(requestBuilder, object[i]);
        }
        return this.callFactory.newCall(requestBuilder.build());
    }

    R toResponse(ResponseBody responseBody) throws IOException {
        return (R)this.responseConverter.convert((Object)responseBody);
    }
}

