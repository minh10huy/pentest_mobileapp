/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  javax.annotation.Nullable
 *  retrofit2.Utils$GenericArrayTypeImpl
 *  retrofit2.Utils$WildcardTypeImpl
 */
package retrofit2;

import java.io.IOException;
import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import java.lang.reflect.GenericArrayType;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.lang.reflect.TypeVariable;
import java.lang.reflect.WildcardType;
import java.util.Arrays;
import java.util.NoSuchElementException;
import javax.annotation.Nullable;
import okhttp3.MediaType;
import okhttp3.ResponseBody;
import okio.Buffer;
import okio.BufferedSource;
import okio.Sink;
import retrofit2.Utils;

final class Utils {
    static final Type[] EMPTY_TYPE_ARRAY = new Type[0];

    private Utils() {
    }

    static ResponseBody buffer(ResponseBody responseBody) throws IOException {
        Buffer buffer = new Buffer();
        responseBody.source().readAll(buffer);
        return ResponseBody.create(responseBody.contentType(), responseBody.contentLength(), buffer);
    }

    static <T> T checkNotNull(@Nullable T t, String string2) {
        if (t == null) {
            throw new NullPointerException(string2);
        }
        return t;
    }

    static void checkNotPrimitive(Type type) {
        if (type instanceof Class && ((Class)type).isPrimitive()) {
            throw new IllegalArgumentException();
        }
    }

    private static Class<?> declaringClassOf(TypeVariable<?> typeVariable) {
        if ((typeVariable = typeVariable.getGenericDeclaration()) instanceof Class) {
            return (Class)((Object)typeVariable);
        }
        return null;
    }

    static boolean equals(Type type, Type type2) {
        if (type == type2) {
            return true;
        }
        if (type instanceof Class) {
            return type.equals(type2);
        }
        if (type instanceof ParameterizedType) {
            Type type3;
            if (!(type2 instanceof ParameterizedType)) {
                return false;
            }
            type = (ParameterizedType)type;
            type2 = (ParameterizedType)type2;
            Type type4 = type.getOwnerType();
            if ((type4 == (type3 = type2.getOwnerType()) || type4 != null && type4.equals(type3)) && type.getRawType().equals(type2.getRawType()) && Arrays.equals(type.getActualTypeArguments(), type2.getActualTypeArguments())) {
                return true;
            }
            return false;
        }
        if (type instanceof GenericArrayType) {
            if (!(type2 instanceof GenericArrayType)) {
                return false;
            }
            type = (GenericArrayType)type;
            type2 = (GenericArrayType)type2;
            return Utils.equals(type.getGenericComponentType(), type2.getGenericComponentType());
        }
        if (type instanceof WildcardType) {
            if (!(type2 instanceof WildcardType)) {
                return false;
            }
            type = (WildcardType)type;
            type2 = (WildcardType)type2;
            if (Arrays.equals(type.getUpperBounds(), type2.getUpperBounds()) && Arrays.equals(type.getLowerBounds(), type2.getLowerBounds())) {
                return true;
            }
            return false;
        }
        if (type instanceof TypeVariable) {
            if (!(type2 instanceof TypeVariable)) {
                return false;
            }
            type = (TypeVariable)type;
            type2 = (TypeVariable)type2;
            if (type.getGenericDeclaration() == type2.getGenericDeclaration() && type.getName().equals(type2.getName())) {
                return true;
            }
            return false;
        }
        return false;
    }

    static Type getCallResponseType(Type type) {
        if (!(type instanceof ParameterizedType)) {
            throw new IllegalArgumentException("Call return type must be parameterized as Call<Foo> or Call<? extends Foo>");
        }
        return Utils.getParameterUpperBound(0, (ParameterizedType)type);
    }

    static Type getGenericSupertype(Type object, Class<?> object2, Class<?> class_) {
        if (class_ == object2) {
            return object;
        }
        if (class_.isInterface()) {
            object = object2.getInterfaces();
            int n = ((Class<?>[])object).length;
            for (int i = 0; i < n; ++i) {
                if (object[i] == class_) {
                    return object2.getGenericInterfaces()[i];
                }
                if (!class_.isAssignableFrom(object[i])) continue;
                return Utils.getGenericSupertype(object2.getGenericInterfaces()[i], object[i], class_);
            }
        }
        if (!object2.isInterface()) {
            while (object2 != Object.class) {
                object = object2.getSuperclass();
                if (object == class_) {
                    return object2.getGenericSuperclass();
                }
                if (class_.isAssignableFrom((Class<?>)object)) {
                    return Utils.getGenericSupertype(object2.getGenericSuperclass(), object, class_);
                }
                object2 = object;
            }
        }
        return class_;
    }

    static Type getParameterUpperBound(int n, ParameterizedType type) {
        Type[] arrtype = type.getActualTypeArguments();
        if (n >= 0 && n < arrtype.length) {
            type = arrtype[n];
            if (type instanceof WildcardType) {
                return ((WildcardType)type).getUpperBounds()[0];
            }
            return type;
        }
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("Index ");
        stringBuilder.append(n);
        stringBuilder.append(" not in range [0,");
        stringBuilder.append(arrtype.length);
        stringBuilder.append(") for ");
        stringBuilder.append(type);
        throw new IllegalArgumentException(stringBuilder.toString());
    }

    static Class<?> getRawType(Type type) {
        Utils.checkNotNull(type, "type == null");
        if (type instanceof Class) {
            return (Class)type;
        }
        if (type instanceof ParameterizedType) {
            if (!((type = ((ParameterizedType)type).getRawType()) instanceof Class)) {
                throw new IllegalArgumentException();
            }
            return (Class)type;
        }
        if (type instanceof GenericArrayType) {
            return Array.newInstance(Utils.getRawType(((GenericArrayType)type).getGenericComponentType()), 0).getClass();
        }
        if (type instanceof TypeVariable) {
            return Object.class;
        }
        if (type instanceof WildcardType) {
            return Utils.getRawType(((WildcardType)type).getUpperBounds()[0]);
        }
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("Expected a Class, ParameterizedType, or GenericArrayType, but <");
        stringBuilder.append(type);
        stringBuilder.append("> is of type ");
        stringBuilder.append(type.getClass().getName());
        throw new IllegalArgumentException(stringBuilder.toString());
    }

    static Type getSupertype(Type type, Class<?> class_, Class<?> class_2) {
        if (!class_2.isAssignableFrom(class_)) {
            throw new IllegalArgumentException();
        }
        return Utils.resolve(type, class_, Utils.getGenericSupertype(type, class_, class_2));
    }

    static boolean hasUnresolvableType(@Nullable Type arrtype) {
        if (arrtype instanceof Class) {
            return false;
        }
        if (arrtype instanceof ParameterizedType) {
            arrtype = ((ParameterizedType)arrtype).getActualTypeArguments();
            int n = arrtype.length;
            for (int i = 0; i < n; ++i) {
                if (!Utils.hasUnresolvableType(arrtype[i])) continue;
                return true;
            }
            return false;
        }
        if (arrtype instanceof GenericArrayType) {
            return Utils.hasUnresolvableType(((GenericArrayType)arrtype).getGenericComponentType());
        }
        if (arrtype instanceof TypeVariable) {
            return true;
        }
        if (arrtype instanceof WildcardType) {
            return true;
        }
        String string2 = arrtype == null ? "null" : arrtype.getClass().getName();
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("Expected a Class, ParameterizedType, or GenericArrayType, but <");
        stringBuilder.append(arrtype);
        stringBuilder.append("> is of type ");
        stringBuilder.append(string2);
        throw new IllegalArgumentException(stringBuilder.toString());
    }

    private static int indexOf(Object[] arrobject, Object object) {
        for (int i = 0; i < arrobject.length; ++i) {
            if (!object.equals(arrobject[i])) continue;
            return i;
        }
        throw new NoSuchElementException();
    }

    static boolean isAnnotationPresent(Annotation[] arrannotation, Class<? extends Annotation> class_) {
        int n = arrannotation.length;
        for (int i = 0; i < n; ++i) {
            if (!class_.isInstance(arrannotation[i])) continue;
            return true;
        }
        return false;
    }

    static Type resolve(Type type, Class<?> arrtype, Type type2) {
        Type type3;
        while (type2 instanceof TypeVariable) {
            type3 = (TypeVariable)type2;
            type2 = Utils.resolveTypeVariable(type, arrtype, type3);
            if (type2 != type3) continue;
            return type2;
        }
        if (type2 instanceof Class && (type3 = (Class)type2).isArray()) {
            type2 = type3.getComponentType();
            if (type2 == (type = Utils.resolve(type, arrtype, type2))) {
                return type3;
            }
            return new /* Unavailable Anonymous Inner Class!! */;
        }
        if (type2 instanceof GenericArrayType) {
            type3 = (type2 = (GenericArrayType)type2).getGenericComponentType();
            if (type3 == (type = Utils.resolve(type, arrtype, type3))) {
                return type2;
            }
            return new /* Unavailable Anonymous Inner Class!! */;
        }
        boolean bl = type2 instanceof ParameterizedType;
        if (bl) {
            ParameterizedType parameterizedType = (ParameterizedType)type2;
            type2 = parameterizedType.getOwnerType();
            Type type4 = Utils.resolve(type, arrtype, type2);
            boolean bl2 = type4 != type2;
            type2 = parameterizedType.getActualTypeArguments();
            int n = ((Type)type2).length;
            for (int i = 0; i < n; ++i) {
                Type type5 = Utils.resolve(type, arrtype, type2[i]);
                boolean bl3 = bl2;
                type3 = type2;
                if (type5 != type2[i]) {
                    bl3 = bl2;
                    type3 = type2;
                    if (!bl2) {
                        type3 = (Type[])type2.clone();
                        bl3 = true;
                    }
                    type3[i] = type5;
                }
                bl2 = bl3;
                type2 = type3;
            }
            if (bl2) {
                return new ParameterizedTypeImpl(type4, parameterizedType.getRawType(), (Type[])type2);
            }
            return parameterizedType;
        }
        if (type2 instanceof WildcardType) {
            type2 = (WildcardType)type2;
            type3 = type2.getLowerBounds();
            Type[] arrtype2 = type2.getUpperBounds();
            if (((Type)type3).length == 1) {
                if ((type = Utils.resolve(type, arrtype, type3[0])) != type3[0]) {
                    return new /* Unavailable Anonymous Inner Class!! */;
                }
            } else if (arrtype2.length == 1 && (type = Utils.resolve(type, arrtype, arrtype2[0])) != arrtype2[0]) {
                arrtype = EMPTY_TYPE_ARRAY;
                return new /* Unavailable Anonymous Inner Class!! */;
            }
            return type2;
        }
        return type2;
    }

    private static Type resolveTypeVariable(Type type, Class<?> class_, TypeVariable<?> typeVariable) {
        Class<?> class_2 = Utils.declaringClassOf(typeVariable);
        if (class_2 == null) {
            return typeVariable;
        }
        if ((type = Utils.getGenericSupertype(type, class_, class_2)) instanceof ParameterizedType) {
            int n = Utils.indexOf(class_2.getTypeParameters(), typeVariable);
            return ((ParameterizedType)type).getActualTypeArguments()[n];
        }
        return typeVariable;
    }

    static void throwIfFatal(Throwable throwable) {
        if (throwable instanceof VirtualMachineError) {
            throw (VirtualMachineError)throwable;
        }
        if (throwable instanceof ThreadDeath) {
            throw (ThreadDeath)throwable;
        }
        if (throwable instanceof LinkageError) {
            throw (LinkageError)throwable;
        }
    }

    static String typeToString(Type type) {
        if (type instanceof Class) {
            return ((Class)type).getName();
        }
        return type.toString();
    }

    static <T> void validateServiceInterface(Class<T> class_) {
        if (!class_.isInterface()) {
            throw new IllegalArgumentException("API declarations must be interfaces.");
        }
        if (class_.getInterfaces().length > 0) {
            throw new IllegalArgumentException("API interfaces must not extend other interfaces.");
        }
    }

    private static final class ParameterizedTypeImpl
    implements ParameterizedType {
        private final Type ownerType;
        private final Type rawType;
        private final Type[] typeArguments;

        /* varargs */ ParameterizedTypeImpl(@Nullable Type type, Type type2, Type ... arrtype) {
            int n;
            int n2;
            boolean bl = type2 instanceof Class;
            int n3 = 0;
            if (bl) {
                n2 = 1;
                n = type == null ? 1 : 0;
                if (((Class)type2).getEnclosingClass() != null) {
                    n2 = 0;
                }
                if (n != n2) {
                    throw new IllegalArgumentException();
                }
            }
            n2 = arrtype.length;
            for (n = n3; n < n2; ++n) {
                Type type3 = arrtype[n];
                Utils.checkNotNull(type3, "typeArgument == null");
                Utils.checkNotPrimitive(type3);
            }
            this.ownerType = type;
            this.rawType = type2;
            this.typeArguments = (Type[])arrtype.clone();
        }

        public boolean equals(Object object) {
            if (object instanceof ParameterizedType && Utils.equals(this, (ParameterizedType)object)) {
                return true;
            }
            return false;
        }

        @Override
        public Type[] getActualTypeArguments() {
            return (Type[])this.typeArguments.clone();
        }

        @Override
        public Type getOwnerType() {
            return this.ownerType;
        }

        @Override
        public Type getRawType() {
            return this.rawType;
        }

        public int hashCode() {
            int n = Arrays.hashCode(this.typeArguments);
            int n2 = this.rawType.hashCode();
            int n3 = this.ownerType != null ? this.ownerType.hashCode() : 0;
            return n ^ n2 ^ n3;
        }

        public String toString() {
            if (this.typeArguments.length == 0) {
                return Utils.typeToString(this.rawType);
            }
            int n = this.typeArguments.length;
            StringBuilder stringBuilder = new StringBuilder((n + 1) * 30);
            stringBuilder.append(Utils.typeToString(this.rawType));
            stringBuilder.append("<");
            stringBuilder.append(Utils.typeToString(this.typeArguments[0]));
            for (int i = 1; i < this.typeArguments.length; ++i) {
                stringBuilder.append(", ");
                stringBuilder.append(Utils.typeToString(this.typeArguments[i]));
            }
            stringBuilder.append(">");
            return stringBuilder.toString();
        }
    }

}

