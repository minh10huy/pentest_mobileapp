/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  javax.annotation.Nullable
 *  okhttp3.FormBody$Builder
 *  retrofit2.RequestBuilder$ContentTypeOverridingRequestBody
 */
package retrofit2;

import javax.annotation.Nullable;
import okhttp3.FormBody;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.MediaType;
import okhttp3.MultipartBody;
import okhttp3.Request;
import okhttp3.RequestBody;
import okio.Buffer;
import retrofit2.RequestBuilder;

final class RequestBuilder {
    private static final char[] HEX_DIGITS = new char[]{'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'};
    private static final String PATH_SEGMENT_ALWAYS_ENCODE_SET = " \"<>^`{}|\\?#";
    private final HttpUrl baseUrl;
    @Nullable
    private RequestBody body;
    @Nullable
    private MediaType contentType;
    @Nullable
    private FormBody formBuilder;
    private final boolean hasBody;
    private final String method;
    @Nullable
    private MultipartBody.Builder multipartBuilder;
    @Nullable
    private String relativeUrl;
    private final Request.Builder requestBuilder;
    @Nullable
    private HttpUrl.Builder urlBuilder;

    RequestBuilder(String string2, HttpUrl httpUrl, @Nullable String string3, @Nullable Headers headers, @Nullable MediaType mediaType, boolean bl, boolean bl2, boolean bl3) {
        this.method = string2;
        this.baseUrl = httpUrl;
        this.relativeUrl = string3;
        this.requestBuilder = new Request.Builder();
        this.contentType = mediaType;
        this.hasBody = bl;
        if (headers != null) {
            this.requestBuilder.headers(headers);
        }
        if (bl2) {
            this.formBuilder = new FormBody();
            return;
        }
        if (bl3) {
            this.multipartBuilder = new MultipartBody.Builder();
            this.multipartBuilder.setType(MultipartBody.FORM);
        }
    }

    private static String canonicalizeForPath(String string2, boolean bl) {
        int n;
        int n2 = string2.length();
        for (int i = 0; i < n2; i += Character.charCount((int)n)) {
            n = string2.codePointAt(i);
            if (n >= 32 && n < 127 && PATH_SEGMENT_ALWAYS_ENCODE_SET.indexOf(n) == -1 && (bl || n != 47 && n != 37)) {
                continue;
            }
            Buffer buffer = new Buffer();
            buffer.writeUtf8(string2, 0, i);
            RequestBuilder.canonicalizeForPath(buffer, string2, i, n2, bl);
            return buffer.readUtf8();
        }
        return string2;
    }

    /*
     * Exception decompiling
     */
    private static void canonicalizeForPath(Buffer var0, String var1_1, int var2_2, int var3_3, boolean var4_4) {
        // This method has failed to decompile.  When submitting a bug report, please provide this stack trace, and (if you hold appropriate legal rights) the relevant class file.
        // org.benf.cfr.reader.util.ConfusedCFRException: Statement already marked as first in another block
        // org.benf.cfr.reader.bytecode.analysis.opgraph.Op03SimpleStatement.markFirstStatementInBlock(Op03SimpleStatement.java:424)
        // org.benf.cfr.reader.bytecode.analysis.opgraph.op3rewriters.Misc.markWholeBlock(Misc.java:219)
        // org.benf.cfr.reader.bytecode.analysis.opgraph.op3rewriters.ConditionalRewriter.considerAsSimpleIf(ConditionalRewriter.java:619)
        // org.benf.cfr.reader.bytecode.analysis.opgraph.op3rewriters.ConditionalRewriter.identifyNonjumpingConditionals(ConditionalRewriter.java:45)
        // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisInner(CodeAnalyser.java:659)
        // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisOrWrapFail(CodeAnalyser.java:196)
        // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysis(CodeAnalyser.java:141)
        // org.benf.cfr.reader.entities.attributes.AttributeCode.analyse(AttributeCode.java:95)
        // org.benf.cfr.reader.entities.Method.analyse(Method.java:372)
        // org.benf.cfr.reader.entities.ClassFile.analyseMid(ClassFile.java:867)
        // org.benf.cfr.reader.entities.ClassFile.analyseTop(ClassFile.java:768)
        // org.benf.cfr.reader.Main.doJar(Main.java:141)
        // org.benf.cfr.reader.Main.main(Main.java:242)
        throw new IllegalStateException("Decompilation failed");
    }

    void addFormField(String string2, String string3, boolean bl) {
        if (bl) {
            this.formBuilder.addEncoded(string2, string3);
            return;
        }
        this.formBuilder.add(string2, string3);
    }

    void addHeader(String object, String string2) {
        if ("Content-Type".equalsIgnoreCase((String)object)) {
            object = MediaType.parse(string2);
            if (object == null) {
                object = new StringBuilder();
                object.append("Malformed content type: ");
                object.append(string2);
                throw new IllegalArgumentException(object.toString());
            }
            this.contentType = object;
            return;
        }
        this.requestBuilder.addHeader((String)object, string2);
    }

    void addPart(Headers headers, RequestBody requestBody) {
        this.multipartBuilder.addPart(headers, requestBody);
    }

    void addPart(MultipartBody.Part part) {
        this.multipartBuilder.addPart(part);
    }

    void addPathParam(String string2, String string3, boolean bl) {
        if (this.relativeUrl == null) {
            throw new AssertionError();
        }
        String string4 = this.relativeUrl;
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("{");
        stringBuilder.append(string2);
        stringBuilder.append("}");
        this.relativeUrl = string4.replace(stringBuilder.toString(), RequestBuilder.canonicalizeForPath(string3, bl));
    }

    void addQueryParam(String charSequence, @Nullable String string2, boolean bl) {
        if (this.relativeUrl != null) {
            this.urlBuilder = this.baseUrl.newBuilder(this.relativeUrl);
            if (this.urlBuilder == null) {
                charSequence = new StringBuilder();
                charSequence.append("Malformed URL. Base: ");
                charSequence.append(this.baseUrl);
                charSequence.append(", Relative: ");
                charSequence.append(this.relativeUrl);
                throw new IllegalArgumentException(charSequence.toString());
            }
            this.relativeUrl = null;
        }
        if (bl) {
            this.urlBuilder.addEncodedQueryParameter((String)charSequence, string2);
            return;
        }
        this.urlBuilder.addQueryParameter((String)charSequence, string2);
    }

    Request build() {
        Object object;
        Object object2;
        Object object3 = this.urlBuilder;
        if (object3 != null) {
            object = object3.build();
        } else {
            object = object3 = this.baseUrl.resolve(this.relativeUrl);
            if (object3 == null) {
                object3 = new StringBuilder();
                object3.append("Malformed URL. Base: ");
                object3.append(this.baseUrl);
                object3.append(", Relative: ");
                object3.append(this.relativeUrl);
                throw new IllegalArgumentException(object3.toString());
            }
        }
        object3 = object2 = this.body;
        if (object2 == null) {
            if (this.formBuilder != null) {
                object3 = this.formBuilder.build();
            } else if (this.multipartBuilder != null) {
                object3 = this.multipartBuilder.build();
            } else {
                object3 = object2;
                if (this.hasBody) {
                    object3 = RequestBody.create(null, new byte[0]);
                }
            }
        }
        MediaType mediaType = this.contentType;
        object2 = object3;
        if (mediaType != null) {
            if (object3 != null) {
                object2 = new /* Unavailable Anonymous Inner Class!! */;
            } else {
                this.requestBuilder.addHeader("Content-Type", mediaType.toString());
                object2 = object3;
            }
        }
        return this.requestBuilder.url((HttpUrl)object).method(this.method, (RequestBody)object2).build();
    }

    void setBody(RequestBody requestBody) {
        this.body = requestBody;
    }

    void setRelativeUrl(Object object) {
        this.relativeUrl = object.toString();
    }
}

