/*
 * Decompiled with CFR 0_132.
 */
package okio;

public final class Utf8 {
    private Utf8() {
    }

    public static long size(String string2) {
        return Utf8.size(string2, 0, string2.length());
    }

    public static long size(String charSequence, int n, int n2) {
        if (charSequence == null) {
            throw new IllegalArgumentException("string == null");
        }
        if (n < 0) {
            charSequence = new StringBuilder();
            charSequence.append("beginIndex < 0: ");
            charSequence.append(n);
            throw new IllegalArgumentException(charSequence.toString());
        }
        if (n2 < n) {
            charSequence = new StringBuilder();
            charSequence.append("endIndex < beginIndex: ");
            charSequence.append(n2);
            charSequence.append(" < ");
            charSequence.append(n);
            throw new IllegalArgumentException(charSequence.toString());
        }
        if (n2 > charSequence.length()) {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("endIndex > string.length: ");
            stringBuilder.append(n2);
            stringBuilder.append(" > ");
            stringBuilder.append(charSequence.length());
            throw new IllegalArgumentException(stringBuilder.toString());
        }
        long l = 0L;
        while (n < n2) {
            char c = charSequence.charAt(n);
            if (c < '?') {
                ++n;
                ++l;
                continue;
            }
            if (c < '\u0800') {
                l += 2L;
                ++n;
                continue;
            }
            if (c >= '\ud800' && c <= '\udfff') {
                int n3 = n + 1;
                char c2 = n3 < n2 ? charSequence.charAt(n3) : (char)'\u0000';
                if (c <= '\udbff' && c2 >= '\udc00' && c2 <= '\udfff') {
                    l += 4L;
                    n += 2;
                    continue;
                }
                ++l;
                n = n3;
                continue;
            }
            l += 3L;
            ++n;
        }
        return l;
    }
}

