/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  okio.Timeout$1
 */
package okio;

import java.io.IOException;
import java.io.InterruptedIOException;
import java.util.concurrent.TimeUnit;
import okio.Timeout;

public class Timeout {
    public static final Timeout NONE = new 1();
    private long deadlineNanoTime;
    private boolean hasDeadline;
    private long timeoutNanos;

    public Timeout clearDeadline() {
        this.hasDeadline = false;
        return this;
    }

    public Timeout clearTimeout() {
        this.timeoutNanos = 0L;
        return this;
    }

    public final Timeout deadline(long l, TimeUnit object) {
        if (l <= 0L) {
            object = new StringBuilder();
            object.append("duration <= 0: ");
            object.append(l);
            throw new IllegalArgumentException(object.toString());
        }
        if (object == null) {
            throw new IllegalArgumentException("unit == null");
        }
        return this.deadlineNanoTime(System.nanoTime() + object.toNanos(l));
    }

    public long deadlineNanoTime() {
        if (!this.hasDeadline) {
            throw new IllegalStateException("No deadline");
        }
        return this.deadlineNanoTime;
    }

    public Timeout deadlineNanoTime(long l) {
        this.hasDeadline = true;
        this.deadlineNanoTime = l;
        return this;
    }

    public boolean hasDeadline() {
        return this.hasDeadline;
    }

    public void throwIfReached() throws IOException {
        if (Thread.interrupted()) {
            throw new InterruptedIOException("thread interrupted");
        }
        if (this.hasDeadline && this.deadlineNanoTime - System.nanoTime() <= 0L) {
            throw new InterruptedIOException("deadline reached");
        }
    }

    public Timeout timeout(long l, TimeUnit object) {
        if (l < 0L) {
            object = new StringBuilder();
            object.append("timeout < 0: ");
            object.append(l);
            throw new IllegalArgumentException(object.toString());
        }
        if (object == null) {
            throw new IllegalArgumentException("unit == null");
        }
        this.timeoutNanos = object.toNanos(l);
        return this;
    }

    public long timeoutNanos() {
        return this.timeoutNanos;
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public final void waitUntilNotified(Object object) throws InterruptedIOException {
        try {
            boolean bl = this.hasDeadline();
            long l = this.timeoutNanos();
            long l2 = 0L;
            if (!bl && l == 0L) {
                object.wait();
                return;
            }
            long l3 = System.nanoTime();
            if (bl && l != 0L) {
                l = Math.min(l, this.deadlineNanoTime() - l3);
            } else if (bl) {
                l = this.deadlineNanoTime() - l3;
            }
            if (l > 0L) {
                l2 = l / 1000000L;
                object.wait(l2, (int)(l - 1000000L * l2));
                l2 = System.nanoTime() - l3;
            }
            if (l2 < l) return;
            throw new InterruptedIOException("timeout");
        }
        catch (InterruptedException interruptedException) {
            throw new InterruptedIOException("interrupted");
        }
    }
}

