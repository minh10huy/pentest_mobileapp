/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  okio.Buffer
 *  okio.BufferedSource
 *  okio.Segment
 *  okio.Source
 *  okio.Timeout
 */
package okio;

import java.io.EOFException;
import java.io.IOException;
import java.util.zip.CRC32;
import java.util.zip.Inflater;
import okio.Buffer;
import okio.BufferedSource;
import okio.InflaterSource;
import okio.Okio;
import okio.Segment;
import okio.Source;
import okio.Timeout;

public final class GzipSource
implements Source {
    private static final byte FCOMMENT = 4;
    private static final byte FEXTRA = 2;
    private static final byte FHCRC = 1;
    private static final byte FNAME = 3;
    private static final byte SECTION_BODY = 1;
    private static final byte SECTION_DONE = 3;
    private static final byte SECTION_HEADER = 0;
    private static final byte SECTION_TRAILER = 2;
    private final CRC32 crc = new CRC32();
    private final Inflater inflater;
    private final InflaterSource inflaterSource;
    private int section = 0;
    private final BufferedSource source;

    public GzipSource(Source source) {
        if (source == null) {
            throw new IllegalArgumentException("source == null");
        }
        this.inflater = new Inflater(true);
        this.source = Okio.buffer(source);
        this.inflaterSource = new InflaterSource(this.source, this.inflater);
    }

    private void checkEqual(String string2, int n, int n2) throws IOException {
        if (n2 != n) {
            throw new IOException(String.format("%s: actual 0x%08x != expected 0x%08x", string2, n2, n));
        }
    }

    private void consumeHeader() throws IOException {
        long l;
        this.source.require(10L);
        byte by = this.source.buffer().getByte(3L);
        boolean bl = (by >> 1 & 1) == 1;
        if (bl) {
            this.updateCrc(this.source.buffer(), 0L, 10L);
        }
        this.checkEqual("ID1ID2", 8075, this.source.readShort());
        this.source.skip(8L);
        if ((by >> 2 & 1) == 1) {
            this.source.require(2L);
            if (bl) {
                this.updateCrc(this.source.buffer(), 0L, 2L);
            }
            short s = this.source.buffer().readShortLe();
            BufferedSource bufferedSource = this.source;
            l = s;
            bufferedSource.require(l);
            if (bl) {
                this.updateCrc(this.source.buffer(), 0L, l);
            }
            this.source.skip(l);
        }
        if ((by >> 3 & 1) == 1) {
            l = this.source.indexOf((byte)0);
            if (l == -1L) {
                throw new EOFException();
            }
            if (bl) {
                this.updateCrc(this.source.buffer(), 0L, l + 1L);
            }
            this.source.skip(l + 1L);
        }
        if ((by >> 4 & 1) == 1) {
            l = this.source.indexOf((byte)0);
            if (l == -1L) {
                throw new EOFException();
            }
            if (bl) {
                this.updateCrc(this.source.buffer(), 0L, l + 1L);
            }
            this.source.skip(l + 1L);
        }
        if (bl) {
            this.checkEqual("FHCRC", this.source.readShortLe(), (short)this.crc.getValue());
            this.crc.reset();
        }
    }

    private void consumeTrailer() throws IOException {
        this.checkEqual("CRC", this.source.readIntLe(), (int)this.crc.getValue());
        this.checkEqual("ISIZE", this.source.readIntLe(), (int)this.inflater.getBytesWritten());
    }

    private void updateCrc(Buffer buffer, long l, long l2) {
        long l3;
        buffer = buffer.head;
        while (l >= (long)(buffer.limit - buffer.pos)) {
            l3 = buffer.limit - buffer.pos;
            buffer = buffer.next;
            l -= l3;
        }
        while (l2 > 0L) {
            int n = (int)((long)buffer.pos + l);
            int n2 = (int)Math.min((long)(buffer.limit - n), l2);
            this.crc.update(buffer.data, n, n2);
            l3 = n2;
            buffer = buffer.next;
            l = 0L;
            l2 -= l3;
        }
    }

    public void close() throws IOException {
        this.inflaterSource.close();
    }

    public long read(Buffer object, long l) throws IOException {
        if (l < 0L) {
            object = new StringBuilder();
            object.append("byteCount < 0: ");
            object.append(l);
            throw new IllegalArgumentException(object.toString());
        }
        if (l == 0L) {
            return 0L;
        }
        if (this.section == 0) {
            this.consumeHeader();
            this.section = 1;
        }
        if (this.section == 1) {
            long l2 = object.size;
            if ((l = this.inflaterSource.read((Buffer)object, l)) != -1L) {
                this.updateCrc((Buffer)object, l2, l);
                return l;
            }
            this.section = 2;
        }
        if (this.section == 2) {
            this.consumeTrailer();
            this.section = 3;
            if (!this.source.exhausted()) {
                throw new IOException("gzip finished without exhausting source");
            }
        }
        return -1L;
    }

    public Timeout timeout() {
        return this.source.timeout();
    }
}

