/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  javax.annotation.Nullable
 *  okio.Options
 *  okio.RealBufferedSource$1
 *  okio.Util
 */
package okio;

import java.io.EOFException;
import java.io.IOException;
import java.io.InputStream;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import javax.annotation.Nullable;
import okio.Buffer;
import okio.BufferedSource;
import okio.ByteString;
import okio.Options;
import okio.RealBufferedSource;
import okio.Sink;
import okio.Source;
import okio.Timeout;
import okio.Util;

final class RealBufferedSource
implements BufferedSource {
    public final Buffer buffer = new Buffer();
    boolean closed;
    public final Source source;

    RealBufferedSource(Source source) {
        if (source == null) {
            throw new NullPointerException("source == null");
        }
        this.source = source;
    }

    @Override
    public Buffer buffer() {
        return this.buffer;
    }

    @Override
    public void close() throws IOException {
        if (this.closed) {
            return;
        }
        this.closed = true;
        this.source.close();
        this.buffer.clear();
    }

    @Override
    public boolean exhausted() throws IOException {
        if (this.closed) {
            throw new IllegalStateException("closed");
        }
        if (this.buffer.exhausted() && this.source.read(this.buffer, 8192L) == -1L) {
            return true;
        }
        return false;
    }

    @Override
    public long indexOf(byte by) throws IOException {
        return this.indexOf(by, 0L, Long.MAX_VALUE);
    }

    @Override
    public long indexOf(byte by, long l) throws IOException {
        return this.indexOf(by, l, Long.MAX_VALUE);
    }

    @Override
    public long indexOf(byte by, long l, long l2) throws IOException {
        if (this.closed) {
            throw new IllegalStateException("closed");
        }
        if (l >= 0L) {
            long l3 = l;
            if (l2 >= l) {
                while (l3 < l2) {
                    l = this.buffer.indexOf(by, l3, l2);
                    if (l != -1L) {
                        return l;
                    }
                    l = this.buffer.size;
                    if (l < l2) {
                        if (this.source.read(this.buffer, 8192L) == -1L) {
                            return -1L;
                        }
                        l3 = Math.max(l3, l);
                        continue;
                    }
                    return -1L;
                }
                return -1L;
            }
        }
        throw new IllegalArgumentException(String.format("fromIndex=%s toIndex=%s", l, l2));
    }

    @Override
    public long indexOf(ByteString byteString) throws IOException {
        return this.indexOf(byteString, 0L);
    }

    @Override
    public long indexOf(ByteString byteString, long l) throws IOException {
        if (this.closed) {
            throw new IllegalStateException("closed");
        }
        long l2;
        while ((l2 = this.buffer.indexOf(byteString, l)) == -1L) {
            l2 = this.buffer.size;
            if (this.source.read(this.buffer, 8192L) == -1L) {
                return -1L;
            }
            l = Math.max(l, l2 - (long)byteString.size() + 1L);
        }
        return l2;
    }

    @Override
    public long indexOfElement(ByteString byteString) throws IOException {
        return this.indexOfElement(byteString, 0L);
    }

    @Override
    public long indexOfElement(ByteString byteString, long l) throws IOException {
        if (this.closed) {
            throw new IllegalStateException("closed");
        }
        long l2;
        while ((l2 = this.buffer.indexOfElement(byteString, l)) == -1L) {
            l2 = this.buffer.size;
            if (this.source.read(this.buffer, 8192L) == -1L) {
                return -1L;
            }
            l = Math.max(l, l2);
        }
        return l2;
    }

    @Override
    public InputStream inputStream() {
        return new 1(this);
    }

    @Override
    public boolean isOpen() {
        return this.closed ^ true;
    }

    @Override
    public boolean rangeEquals(long l, ByteString byteString) throws IOException {
        return this.rangeEquals(l, byteString, 0, byteString.size());
    }

    @Override
    public boolean rangeEquals(long l, ByteString byteString, int n, int n2) throws IOException {
        if (this.closed) {
            throw new IllegalStateException("closed");
        }
        if (l >= 0L && n >= 0 && n2 >= 0) {
            if (byteString.size() - n < n2) {
                return false;
            }
            for (int i = 0; i < n2; ++i) {
                long l2 = l + (long)i;
                if (!this.request(l2 + 1L)) {
                    return false;
                }
                if (this.buffer.getByte(l2) == byteString.getByte(n + i)) continue;
                return false;
            }
            return true;
        }
        return false;
    }

    @Override
    public int read(ByteBuffer byteBuffer) throws IOException {
        if (this.buffer.size == 0L && this.source.read(this.buffer, 8192L) == -1L) {
            return -1;
        }
        return this.buffer.read(byteBuffer);
    }

    @Override
    public int read(byte[] arrby) throws IOException {
        return this.read(arrby, 0, arrby.length);
    }

    @Override
    public int read(byte[] arrby, int n, int n2) throws IOException {
        long l = arrby.length;
        long l2 = n;
        long l3 = n2;
        Util.checkOffsetAndCount((long)l, (long)l2, (long)l3);
        if (this.buffer.size == 0L && this.source.read(this.buffer, 8192L) == -1L) {
            return -1;
        }
        n2 = (int)Math.min(l3, this.buffer.size);
        return this.buffer.read(arrby, n, n2);
    }

    @Override
    public long read(Buffer object, long l) throws IOException {
        if (object == null) {
            throw new IllegalArgumentException("sink == null");
        }
        if (l < 0L) {
            object = new StringBuilder();
            object.append("byteCount < 0: ");
            object.append(l);
            throw new IllegalArgumentException(object.toString());
        }
        if (this.closed) {
            throw new IllegalStateException("closed");
        }
        if (this.buffer.size == 0L && this.source.read(this.buffer, 8192L) == -1L) {
            return -1L;
        }
        l = Math.min(l, this.buffer.size);
        return this.buffer.read((Buffer)object, l);
    }

    @Override
    public long readAll(Sink sink) throws IOException {
        long l;
        if (sink == null) {
            throw new IllegalArgumentException("sink == null");
        }
        long l2 = 0L;
        while (this.source.read(this.buffer, 8192L) != -1L) {
            l = this.buffer.completeSegmentByteCount();
            if (l <= 0L) continue;
            sink.write(this.buffer, l);
            l2 += l;
        }
        l = l2;
        if (this.buffer.size() > 0L) {
            l = this.buffer.size();
            sink.write(this.buffer, this.buffer.size());
            l = l2 + l;
        }
        return l;
    }

    @Override
    public byte readByte() throws IOException {
        this.require(1L);
        return this.buffer.readByte();
    }

    @Override
    public byte[] readByteArray() throws IOException {
        this.buffer.writeAll(this.source);
        return this.buffer.readByteArray();
    }

    @Override
    public byte[] readByteArray(long l) throws IOException {
        this.require(l);
        return this.buffer.readByteArray(l);
    }

    @Override
    public ByteString readByteString() throws IOException {
        this.buffer.writeAll(this.source);
        return this.buffer.readByteString();
    }

    @Override
    public ByteString readByteString(long l) throws IOException {
        this.require(l);
        return this.buffer.readByteString(l);
    }

    @Override
    public long readDecimalLong() throws IOException {
        int n;
        this.require(1L);
        int n2 = 0;
        while (this.request(n = n2 + 1)) {
            byte by = this.buffer.getByte(n2);
            if (by >= 48 && by <= 57 || n2 == 0 && by == 45) {
                n2 = n;
                continue;
            }
            if (n2 != 0) break;
            throw new NumberFormatException(String.format("Expected leading [0-9] or '-' character but was %#x", by));
        }
        return this.buffer.readDecimalLong();
    }

    @Override
    public void readFully(Buffer buffer, long l) throws IOException {
        try {
            this.require(l);
        }
        catch (EOFException eOFException) {
            buffer.writeAll(this.buffer);
            throw eOFException;
        }
        this.buffer.readFully(buffer, l);
    }

    @Override
    public void readFully(byte[] arrby) throws IOException {
        try {
            this.require(arrby.length);
        }
        catch (EOFException eOFException) {
            int n = 0;
            while (this.buffer.size > 0L) {
                int n2 = this.buffer.read(arrby, n, (int)this.buffer.size);
                if (n2 == -1) {
                    throw new AssertionError();
                }
                n += n2;
            }
            throw eOFException;
        }
        this.buffer.readFully(arrby);
    }

    @Override
    public long readHexadecimalUnsignedLong() throws IOException {
        int n;
        this.require(1L);
        int n2 = 0;
        while (this.request(n = n2 + 1)) {
            byte by = this.buffer.getByte(n2);
            if (by >= 48 && by <= 57 || by >= 97 && by <= 102 || by >= 65 && by <= 70) {
                n2 = n;
                continue;
            }
            if (n2 != 0) break;
            throw new NumberFormatException(String.format("Expected leading [0-9a-fA-F] character but was %#x", by));
        }
        return this.buffer.readHexadecimalUnsignedLong();
    }

    @Override
    public int readInt() throws IOException {
        this.require(4L);
        return this.buffer.readInt();
    }

    @Override
    public int readIntLe() throws IOException {
        this.require(4L);
        return this.buffer.readIntLe();
    }

    @Override
    public long readLong() throws IOException {
        this.require(8L);
        return this.buffer.readLong();
    }

    @Override
    public long readLongLe() throws IOException {
        this.require(8L);
        return this.buffer.readLongLe();
    }

    @Override
    public short readShort() throws IOException {
        this.require(2L);
        return this.buffer.readShort();
    }

    @Override
    public short readShortLe() throws IOException {
        this.require(2L);
        return this.buffer.readShortLe();
    }

    @Override
    public String readString(long l, Charset charset) throws IOException {
        this.require(l);
        if (charset == null) {
            throw new IllegalArgumentException("charset == null");
        }
        return this.buffer.readString(l, charset);
    }

    @Override
    public String readString(Charset charset) throws IOException {
        if (charset == null) {
            throw new IllegalArgumentException("charset == null");
        }
        this.buffer.writeAll(this.source);
        return this.buffer.readString(charset);
    }

    @Override
    public String readUtf8() throws IOException {
        this.buffer.writeAll(this.source);
        return this.buffer.readUtf8();
    }

    @Override
    public String readUtf8(long l) throws IOException {
        this.require(l);
        return this.buffer.readUtf8(l);
    }

    @Override
    public int readUtf8CodePoint() throws IOException {
        this.require(1L);
        byte by = this.buffer.getByte(0L);
        if ((by & 224) == 192) {
            this.require(2L);
        } else if ((by & 240) == 224) {
            this.require(3L);
        } else if ((by & 248) == 240) {
            this.require(4L);
        }
        return this.buffer.readUtf8CodePoint();
    }

    @Nullable
    @Override
    public String readUtf8Line() throws IOException {
        long l = this.indexOf((byte)10);
        if (l == -1L) {
            if (this.buffer.size != 0L) {
                return this.readUtf8(this.buffer.size);
            }
            return null;
        }
        return this.buffer.readUtf8Line(l);
    }

    @Override
    public String readUtf8LineStrict() throws IOException {
        return this.readUtf8LineStrict(Long.MAX_VALUE);
    }

    @Override
    public String readUtf8LineStrict(long l) throws IOException {
        if (l < 0L) {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("limit < 0: ");
            stringBuilder.append(l);
            throw new IllegalArgumentException(stringBuilder.toString());
        }
        long l2 = l == Long.MAX_VALUE ? Long.MAX_VALUE : l + 1L;
        long l3 = this.indexOf((byte)10, 0L, l2);
        if (l3 != -1L) {
            return this.buffer.readUtf8Line(l3);
        }
        if (l2 < Long.MAX_VALUE && this.request(l2) && this.buffer.getByte(l2 - 1L) == 13 && this.request(l2 + 1L) && this.buffer.getByte(l2) == 10) {
            return this.buffer.readUtf8Line(l2);
        }
        Buffer buffer = new Buffer();
        this.buffer.copyTo(buffer, 0L, Math.min(32L, this.buffer.size()));
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("\\n not found: limit=");
        stringBuilder.append(Math.min(this.buffer.size(), l));
        stringBuilder.append(" content=");
        stringBuilder.append(buffer.readByteString().hex());
        stringBuilder.append('\u2026');
        throw new EOFException(stringBuilder.toString());
    }

    @Override
    public boolean request(long l) throws IOException {
        if (l < 0L) {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("byteCount < 0: ");
            stringBuilder.append(l);
            throw new IllegalArgumentException(stringBuilder.toString());
        }
        if (this.closed) {
            throw new IllegalStateException("closed");
        }
        while (this.buffer.size < l) {
            if (this.source.read(this.buffer, 8192L) != -1L) continue;
            return false;
        }
        return true;
    }

    @Override
    public void require(long l) throws IOException {
        if (!this.request(l)) {
            throw new EOFException();
        }
    }

    @Override
    public int select(Options options) throws IOException {
        if (this.closed) {
            throw new IllegalStateException("closed");
        }
        do {
            int n;
            if ((n = this.buffer.selectPrefix(options)) == -1) {
                return -1;
            }
            long l = options.byteStrings[n].size();
            if (l > this.buffer.size) continue;
            this.buffer.skip(l);
            return n;
        } while (this.source.read(this.buffer, 8192L) != -1L);
        return -1;
    }

    @Override
    public void skip(long l) throws IOException {
        if (this.closed) {
            throw new IllegalStateException("closed");
        }
        while (l > 0L) {
            if (this.buffer.size == 0L && this.source.read(this.buffer, 8192L) == -1L) {
                throw new EOFException();
            }
            long l2 = Math.min(l, this.buffer.size());
            this.buffer.skip(l2);
            l -= l2;
        }
    }

    @Override
    public Timeout timeout() {
        return this.source.timeout();
    }

    public String toString() {
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("buffer(");
        stringBuilder.append(this.source);
        stringBuilder.append(")");
        return stringBuilder.toString();
    }
}

