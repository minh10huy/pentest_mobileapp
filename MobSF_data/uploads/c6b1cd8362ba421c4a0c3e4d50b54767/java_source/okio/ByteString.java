/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  javax.annotation.Nullable
 *  okio.Base64
 *  okio.Util
 */
package okio;

import java.io.EOFException;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.Serializable;
import java.lang.reflect.Field;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.security.InvalidKeyException;
import java.security.Key;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Arrays;
import javax.annotation.Nullable;
import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;
import okio.Base64;
import okio.Buffer;
import okio.Util;

public class ByteString
implements Serializable,
Comparable<ByteString> {
    public static final ByteString EMPTY;
    static final char[] HEX_DIGITS;
    private static final long serialVersionUID = 1L;
    final byte[] data;
    transient int hashCode;
    transient String utf8;

    static {
        HEX_DIGITS = new char[]{'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
        EMPTY = ByteString.of(new byte[0]);
    }

    ByteString(byte[] arrby) {
        this.data = arrby;
    }

    static int codePointIndexToCharIndex(String string2, int n) {
        int n2;
        int n3 = string2.length();
        int n4 = 0;
        for (int i = 0; i < n3; i += Character.charCount((int)n2)) {
            if (n4 == n) {
                return i;
            }
            n2 = string2.codePointAt(i);
            if (Character.isISOControl(n2) && n2 != 10 && n2 != 13 || n2 == 65533) {
                return -1;
            }
            ++n4;
        }
        return string2.length();
    }

    @Nullable
    public static ByteString decodeBase64(String arrby) {
        if (arrby == null) {
            throw new IllegalArgumentException("base64 == null");
        }
        if ((arrby = Base64.decode((String)arrby)) != null) {
            return new ByteString(arrby);
        }
        return null;
    }

    public static ByteString decodeHex(String string2) {
        if (string2 == null) {
            throw new IllegalArgumentException("hex == null");
        }
        if (string2.length() % 2 != 0) {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("Unexpected hex string: ");
            stringBuilder.append(string2);
            throw new IllegalArgumentException(stringBuilder.toString());
        }
        byte[] arrby = new byte[string2.length() / 2];
        for (int i = 0; i < arrby.length; ++i) {
            int n = i * 2;
            arrby[i] = (byte)((ByteString.decodeHexDigit(string2.charAt(n)) << 4) + ByteString.decodeHexDigit(string2.charAt(n + 1)));
        }
        return ByteString.of(arrby);
    }

    private static int decodeHexDigit(char c) {
        if (c >= '0' && c <= '9') {
            return c - 48;
        }
        if (c >= 'a' && c <= 'f') {
            return c - 97 + 10;
        }
        if (c >= 'A' && c <= 'F') {
            return c - 65 + 10;
        }
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("Unexpected hex digit: ");
        stringBuilder.append(c);
        throw new IllegalArgumentException(stringBuilder.toString());
    }

    private ByteString digest(String object) {
        try {
            object = ByteString.of(MessageDigest.getInstance((String)object).digest(this.data));
            return object;
        }
        catch (NoSuchAlgorithmException noSuchAlgorithmException) {
            throw new AssertionError(noSuchAlgorithmException);
        }
    }

    public static ByteString encodeString(String string2, Charset charset) {
        if (string2 == null) {
            throw new IllegalArgumentException("s == null");
        }
        if (charset == null) {
            throw new IllegalArgumentException("charset == null");
        }
        return new ByteString(string2.getBytes(charset));
    }

    public static ByteString encodeUtf8(String string2) {
        if (string2 == null) {
            throw new IllegalArgumentException("s == null");
        }
        ByteString byteString = new ByteString(string2.getBytes(Util.UTF_8));
        byteString.utf8 = string2;
        return byteString;
    }

    private ByteString hmac(String object, ByteString byteString) {
        try {
            Mac mac = Mac.getInstance((String)object);
            mac.init(new SecretKeySpec(byteString.toByteArray(), (String)object));
            object = ByteString.of(mac.doFinal(this.data));
            return object;
        }
        catch (InvalidKeyException invalidKeyException) {
            throw new IllegalArgumentException(invalidKeyException);
        }
        catch (NoSuchAlgorithmException noSuchAlgorithmException) {
            throw new AssertionError(noSuchAlgorithmException);
        }
    }

    public static ByteString of(ByteBuffer byteBuffer) {
        if (byteBuffer == null) {
            throw new IllegalArgumentException("data == null");
        }
        byte[] arrby = new byte[byteBuffer.remaining()];
        byteBuffer.get(arrby);
        return new ByteString(arrby);
    }

    public static /* varargs */ ByteString of(byte ... arrby) {
        if (arrby == null) {
            throw new IllegalArgumentException("data == null");
        }
        return new ByteString((byte[])arrby.clone());
    }

    public static ByteString of(byte[] arrby, int n, int n2) {
        if (arrby == null) {
            throw new IllegalArgumentException("data == null");
        }
        Util.checkOffsetAndCount((long)arrby.length, (long)n, (long)n2);
        byte[] arrby2 = new byte[n2];
        System.arraycopy(arrby, n, arrby2, 0, n2);
        return new ByteString(arrby2);
    }

    public static ByteString read(InputStream object, int n) throws IOException {
        int n2;
        if (object == null) {
            throw new IllegalArgumentException("in == null");
        }
        if (n < 0) {
            object = new StringBuilder();
            object.append("byteCount < 0: ");
            object.append(n);
            throw new IllegalArgumentException(object.toString());
        }
        byte[] arrby = new byte[n];
        for (int i = 0; i < n; i += n2) {
            n2 = object.read(arrby, i, n - i);
            if (n2 != -1) continue;
            throw new EOFException();
        }
        return new ByteString(arrby);
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    private void readObject(ObjectInputStream object) throws IOException {
        object = ByteString.read((InputStream)object, object.readInt());
        try {
            Field field = ByteString.class.getDeclaredField("data");
            field.setAccessible(true);
            field.set(this, object.data);
            return;
        }
        catch (NoSuchFieldException noSuchFieldException) {
            throw new AssertionError();
        }
        catch (IllegalAccessException illegalAccessException) {
            throw new AssertionError();
        }
    }

    private void writeObject(ObjectOutputStream objectOutputStream) throws IOException {
        objectOutputStream.writeInt(this.data.length);
        objectOutputStream.write(this.data);
    }

    public ByteBuffer asByteBuffer() {
        return ByteBuffer.wrap(this.data).asReadOnlyBuffer();
    }

    public String base64() {
        return Base64.encode((byte[])this.data);
    }

    public String base64Url() {
        return Base64.encodeUrl((byte[])this.data);
    }

    @Override
    public int compareTo(ByteString byteString) {
        int n = this.size();
        int n2 = byteString.size();
        int n3 = Math.min(n, n2);
        for (int i = 0; i < n3; ++i) {
            int n4;
            int n5 = this.getByte(i) & 255;
            if (n5 == (n4 = byteString.getByte(i) & 255)) {
                continue;
            }
            if (n5 < n4) {
                return -1;
            }
            return 1;
        }
        if (n == n2) {
            return 0;
        }
        if (n < n2) {
            return -1;
        }
        return 1;
    }

    public final boolean endsWith(ByteString byteString) {
        return this.rangeEquals(this.size() - byteString.size(), byteString, 0, byteString.size());
    }

    public final boolean endsWith(byte[] arrby) {
        return this.rangeEquals(this.size() - arrby.length, arrby, 0, arrby.length);
    }

    public boolean equals(Object object) {
        if (object == this) {
            return true;
        }
        if (object instanceof ByteString && (object = (ByteString)object).size() == this.data.length && object.rangeEquals(0, this.data, 0, this.data.length)) {
            return true;
        }
        return false;
    }

    public byte getByte(int n) {
        return this.data[n];
    }

    public int hashCode() {
        int n = this.hashCode;
        if (n != 0) {
            return n;
        }
        this.hashCode = n = Arrays.hashCode(this.data);
        return n;
    }

    public String hex() {
        char[] arrc = new char[this.data.length * 2];
        byte[] arrby = this.data;
        int n = arrby.length;
        int n2 = 0;
        for (int i = 0; i < n; ++i) {
            byte by = arrby[i];
            int n3 = n2 + 1;
            arrc[n2] = HEX_DIGITS[by >> 4 & 15];
            n2 = n3 + 1;
            arrc[n3] = HEX_DIGITS[by & 15];
        }
        return new String(arrc);
    }

    public ByteString hmacSha1(ByteString byteString) {
        return this.hmac("HmacSHA1", byteString);
    }

    public ByteString hmacSha256(ByteString byteString) {
        return this.hmac("HmacSHA256", byteString);
    }

    public ByteString hmacSha512(ByteString byteString) {
        return this.hmac("HmacSHA512", byteString);
    }

    public final int indexOf(ByteString byteString) {
        return this.indexOf(byteString.internalArray(), 0);
    }

    public final int indexOf(ByteString byteString, int n) {
        return this.indexOf(byteString.internalArray(), n);
    }

    public final int indexOf(byte[] arrby) {
        return this.indexOf(arrby, 0);
    }

    public int indexOf(byte[] arrby, int n) {
        int n2 = this.data.length;
        int n3 = arrby.length;
        for (n = Math.max((int)n, (int)0); n <= n2 - n3; ++n) {
            if (!Util.arrayRangeEquals((byte[])this.data, (int)n, (byte[])arrby, (int)0, (int)arrby.length)) continue;
            return n;
        }
        return -1;
    }

    byte[] internalArray() {
        return this.data;
    }

    public final int lastIndexOf(ByteString byteString) {
        return this.lastIndexOf(byteString.internalArray(), this.size());
    }

    public final int lastIndexOf(ByteString byteString, int n) {
        return this.lastIndexOf(byteString.internalArray(), n);
    }

    public final int lastIndexOf(byte[] arrby) {
        return this.lastIndexOf(arrby, this.size());
    }

    public int lastIndexOf(byte[] arrby, int n) {
        for (n = Math.min((int)n, (int)(this.data.length - arrby.length)); n >= 0; --n) {
            if (!Util.arrayRangeEquals((byte[])this.data, (int)n, (byte[])arrby, (int)0, (int)arrby.length)) continue;
            return n;
        }
        return -1;
    }

    public ByteString md5() {
        return this.digest("MD5");
    }

    public boolean rangeEquals(int n, ByteString byteString, int n2, int n3) {
        return byteString.rangeEquals(n2, this.data, n, n3);
    }

    public boolean rangeEquals(int n, byte[] arrby, int n2, int n3) {
        if (n >= 0 && n <= this.data.length - n3 && n2 >= 0 && n2 <= arrby.length - n3 && Util.arrayRangeEquals((byte[])this.data, (int)n, (byte[])arrby, (int)n2, (int)n3)) {
            return true;
        }
        return false;
    }

    public ByteString sha1() {
        return this.digest("SHA-1");
    }

    public ByteString sha256() {
        return this.digest("SHA-256");
    }

    public ByteString sha512() {
        return this.digest("SHA-512");
    }

    public int size() {
        return this.data.length;
    }

    public final boolean startsWith(ByteString byteString) {
        return this.rangeEquals(0, byteString, 0, byteString.size());
    }

    public final boolean startsWith(byte[] arrby) {
        return this.rangeEquals(0, arrby, 0, arrby.length);
    }

    public String string(Charset charset) {
        if (charset == null) {
            throw new IllegalArgumentException("charset == null");
        }
        return new String(this.data, charset);
    }

    public ByteString substring(int n) {
        return this.substring(n, this.data.length);
    }

    public ByteString substring(int n, int n2) {
        if (n < 0) {
            throw new IllegalArgumentException("beginIndex < 0");
        }
        if (n2 > this.data.length) {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("endIndex > length(");
            stringBuilder.append(this.data.length);
            stringBuilder.append(")");
            throw new IllegalArgumentException(stringBuilder.toString());
        }
        int n3 = n2 - n;
        if (n3 < 0) {
            throw new IllegalArgumentException("endIndex < beginIndex");
        }
        if (n == 0 && n2 == this.data.length) {
            return this;
        }
        byte[] arrby = new byte[n3];
        System.arraycopy(this.data, n, arrby, 0, n3);
        return new ByteString(arrby);
    }

    public ByteString toAsciiLowercase() {
        for (int i = 0; i < this.data.length; ++i) {
            byte by = this.data[i];
            if (by < 65 || by > 90) continue;
            byte[] arrby = (byte[])this.data.clone();
            int n = i + 1;
            arrby[i] = (byte)(by + 32);
            for (i = n; i < arrby.length; ++i) {
                n = arrby[i];
                if (n < 65 || n > 90) continue;
                arrby[i] = (byte)(n + 32);
            }
            return new ByteString(arrby);
        }
        return this;
    }

    public ByteString toAsciiUppercase() {
        for (int i = 0; i < this.data.length; ++i) {
            byte by = this.data[i];
            if (by < 97 || by > 122) continue;
            byte[] arrby = (byte[])this.data.clone();
            int n = i + 1;
            arrby[i] = (byte)(by - 32);
            for (i = n; i < arrby.length; ++i) {
                n = arrby[i];
                if (n < 97 || n > 122) continue;
                arrby[i] = (byte)(n - 32);
            }
            return new ByteString(arrby);
        }
        return this;
    }

    public byte[] toByteArray() {
        return (byte[])this.data.clone();
    }

    public String toString() {
        if (this.data.length == 0) {
            return "[size=0]";
        }
        CharSequence charSequence = this.utf8();
        int n = ByteString.codePointIndexToCharIndex((String)charSequence, 64);
        if (n == -1) {
            if (this.data.length <= 64) {
                StringBuilder stringBuilder = new StringBuilder();
                stringBuilder.append("[hex=");
                stringBuilder.append(this.hex());
                stringBuilder.append("]");
                return stringBuilder.toString();
            }
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("[size=");
            stringBuilder.append(this.data.length);
            stringBuilder.append(" hex=");
            stringBuilder.append(this.substring(0, 64).hex());
            stringBuilder.append("\u2026]");
            return stringBuilder.toString();
        }
        String string2 = charSequence.substring(0, n).replace("\\", "\\\\").replace("\n", "\\n").replace("\r", "\\r");
        if (n < charSequence.length()) {
            charSequence = new StringBuilder();
            charSequence.append("[size=");
            charSequence.append(this.data.length);
            charSequence.append(" text=");
            charSequence.append(string2);
            charSequence.append("\u2026]");
            return charSequence.toString();
        }
        charSequence = new StringBuilder();
        charSequence.append("[text=");
        charSequence.append(string2);
        charSequence.append("]");
        return charSequence.toString();
    }

    public String utf8() {
        String string2 = this.utf8;
        if (string2 != null) {
            return string2;
        }
        this.utf8 = string2 = new String(this.data, Util.UTF_8);
        return string2;
    }

    public void write(OutputStream outputStream) throws IOException {
        if (outputStream == null) {
            throw new IllegalArgumentException("out == null");
        }
        outputStream.write(this.data);
    }

    void write(Buffer buffer) {
        buffer.write(this.data, 0, this.data.length);
    }
}

