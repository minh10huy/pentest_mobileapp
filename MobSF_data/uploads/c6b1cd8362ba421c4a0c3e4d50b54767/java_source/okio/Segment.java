/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  javax.annotation.Nullable
 */
package okio;

import javax.annotation.Nullable;
import okio.SegmentPool;

final class Segment {
    static final int SHARE_MINIMUM = 1024;
    static final int SIZE = 8192;
    final byte[] data;
    int limit;
    Segment next;
    boolean owner;
    int pos;
    Segment prev;
    boolean shared;

    Segment() {
        this.data = new byte[8192];
        this.owner = true;
        this.shared = false;
    }

    Segment(byte[] arrby, int n, int n2, boolean bl, boolean bl2) {
        this.data = arrby;
        this.pos = n;
        this.limit = n2;
        this.shared = bl;
        this.owner = bl2;
    }

    public void compact() {
        if (this.prev == this) {
            throw new IllegalStateException();
        }
        if (!this.prev.owner) {
            return;
        }
        int n = this.limit - this.pos;
        int n2 = this.prev.limit;
        int n3 = this.prev.shared ? 0 : this.prev.pos;
        if (n > 8192 - n2 + n3) {
            return;
        }
        this.writeTo(this.prev, n);
        this.pop();
        SegmentPool.recycle(this);
    }

    @Nullable
    public Segment pop() {
        Segment segment = this.next != this ? this.next : null;
        this.prev.next = this.next;
        this.next.prev = this.prev;
        this.next = null;
        this.prev = null;
        return segment;
    }

    public Segment push(Segment segment) {
        segment.prev = this;
        segment.next = this.next;
        this.next.prev = segment;
        this.next = segment;
        return segment;
    }

    Segment sharedCopy() {
        this.shared = true;
        return new Segment(this.data, this.pos, this.limit, true, false);
    }

    public Segment split(int n) {
        if (n > 0 && n <= this.limit - this.pos) {
            Segment segment;
            if (n >= 1024) {
                segment = this.sharedCopy();
            } else {
                segment = SegmentPool.take();
                System.arraycopy(this.data, this.pos, segment.data, 0, n);
            }
            segment.limit = segment.pos + n;
            this.pos += n;
            this.prev.push(segment);
            return segment;
        }
        throw new IllegalArgumentException();
    }

    Segment unsharedCopy() {
        return new Segment((byte[])this.data.clone(), this.pos, this.limit, false, true);
    }

    public void writeTo(Segment segment, int n) {
        if (!segment.owner) {
            throw new IllegalArgumentException();
        }
        if (segment.limit + n > 8192) {
            if (segment.shared) {
                throw new IllegalArgumentException();
            }
            if (segment.limit + n - segment.pos > 8192) {
                throw new IllegalArgumentException();
            }
            System.arraycopy(segment.data, segment.pos, segment.data, 0, segment.limit - segment.pos);
            segment.limit -= segment.pos;
            segment.pos = 0;
        }
        System.arraycopy(this.data, this.pos, segment.data, segment.limit, n);
        segment.limit += n;
        this.pos += n;
    }
}

