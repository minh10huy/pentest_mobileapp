/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  okio.AsyncTimeout
 *  okio.Buffer
 *  okio.BufferedSink
 *  okio.BufferedSource
 *  okio.Okio$4
 *  okio.RealBufferedSource
 *  okio.Segment
 *  okio.SegmentPool
 *  okio.Sink
 *  okio.Source
 *  okio.Timeout
 *  org.codehaus.mojo.animal_sniffer.IgnoreJRERequirement
 */
package okio;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.Socket;
import java.nio.file.Files;
import java.nio.file.OpenOption;
import java.nio.file.Path;
import java.util.logging.Logger;
import okio.AsyncTimeout;
import okio.Buffer;
import okio.BufferedSink;
import okio.BufferedSource;
import okio.Okio;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.Segment;
import okio.SegmentPool;
import okio.Sink;
import okio.Source;
import okio.Timeout;
import okio.Util;
import org.codehaus.mojo.animal_sniffer.IgnoreJRERequirement;

public final class Okio {
    static final Logger logger = Logger.getLogger(Okio.class.getName());

    private Okio() {
    }

    public static Sink appendingSink(File file) throws FileNotFoundException {
        if (file == null) {
            throw new IllegalArgumentException("file == null");
        }
        return Okio.sink(new FileOutputStream(file, true));
    }

    public static Sink blackhole() {
        return new Sink(){

            public void close() throws IOException {
            }

            public void flush() throws IOException {
            }

            public Timeout timeout() {
                return Timeout.NONE;
            }

            public void write(Buffer buffer, long l) throws IOException {
                buffer.skip(l);
            }
        };
    }

    public static BufferedSink buffer(Sink sink) {
        return new RealBufferedSink(sink);
    }

    public static BufferedSource buffer(Source source) {
        return new RealBufferedSource(source);
    }

    static boolean isAndroidGetsocknameError(AssertionError assertionError) {
        if (assertionError.getCause() != null && assertionError.getMessage() != null && assertionError.getMessage().contains("getsockname failed")) {
            return true;
        }
        return false;
    }

    public static Sink sink(File file) throws FileNotFoundException {
        if (file == null) {
            throw new IllegalArgumentException("file == null");
        }
        return Okio.sink(new FileOutputStream(file));
    }

    public static Sink sink(OutputStream outputStream) {
        return Okio.sink(outputStream, new Timeout());
    }

    private static Sink sink(final OutputStream outputStream, Timeout timeout) {
        if (outputStream == null) {
            throw new IllegalArgumentException("out == null");
        }
        if (timeout == null) {
            throw new IllegalArgumentException("timeout == null");
        }
        return new Sink(){

            public void close() throws IOException {
                outputStream.close();
            }

            public void flush() throws IOException {
                outputStream.flush();
            }

            public Timeout timeout() {
                return Timeout.this;
            }

            public String toString() {
                StringBuilder stringBuilder = new StringBuilder();
                stringBuilder.append("sink(");
                stringBuilder.append(outputStream);
                stringBuilder.append(")");
                return stringBuilder.toString();
            }

            public void write(Buffer buffer, long l) throws IOException {
                Util.checkOffsetAndCount(buffer.size, 0L, l);
                while (l > 0L) {
                    Timeout.this.throwIfReached();
                    Segment segment = buffer.head;
                    int n = (int)Math.min(l, (long)(segment.limit - segment.pos));
                    outputStream.write(segment.data, segment.pos, n);
                    segment.pos += n;
                    long l2 = n;
                    buffer.size -= l2;
                    if (segment.pos == segment.limit) {
                        buffer.head = segment.pop();
                        SegmentPool.recycle((Segment)segment);
                    }
                    l -= l2;
                }
            }
        };
    }

    public static Sink sink(Socket socket) throws IOException {
        if (socket == null) {
            throw new IllegalArgumentException("socket == null");
        }
        if (socket.getOutputStream() == null) {
            throw new IOException("socket's output stream == null");
        }
        AsyncTimeout asyncTimeout = Okio.timeout(socket);
        return asyncTimeout.sink(Okio.sink(socket.getOutputStream(), (Timeout)asyncTimeout));
    }

    @IgnoreJRERequirement
    public static /* varargs */ Sink sink(Path path, OpenOption ... arropenOption) throws IOException {
        if (path == null) {
            throw new IllegalArgumentException("path == null");
        }
        return Okio.sink(Files.newOutputStream(path, arropenOption));
    }

    public static Source source(File file) throws FileNotFoundException {
        if (file == null) {
            throw new IllegalArgumentException("file == null");
        }
        return Okio.source(new FileInputStream(file));
    }

    public static Source source(InputStream inputStream) {
        return Okio.source(inputStream, new Timeout());
    }

    private static Source source(final InputStream inputStream, Timeout timeout) {
        if (inputStream == null) {
            throw new IllegalArgumentException("in == null");
        }
        if (timeout == null) {
            throw new IllegalArgumentException("timeout == null");
        }
        return new Source(){

            public void close() throws IOException {
                inputStream.close();
            }

            public long read(Buffer object, long l) throws IOException {
                int n;
                block7 : {
                    if (l < 0L) {
                        object = new StringBuilder();
                        object.append("byteCount < 0: ");
                        object.append(l);
                        throw new IllegalArgumentException(object.toString());
                    }
                    if (l == 0L) {
                        return 0L;
                    }
                    try {
                        Timeout.this.throwIfReached();
                        Segment segment = object.writableSegment(1);
                        n = (int)Math.min(l, (long)(8192 - segment.limit));
                        n = inputStream.read(segment.data, segment.limit, n);
                        if (n != -1) break block7;
                        return -1L;
                    }
                    catch (AssertionError assertionError) {
                        if (Okio.isAndroidGetsocknameError(assertionError)) {
                            throw new IOException((Throwable)((Object)assertionError));
                        }
                        throw assertionError;
                    }
                }
                segment.limit += n;
                l = object.size;
                long l2 = n;
                object.size = l + l2;
                return l2;
            }

            public Timeout timeout() {
                return Timeout.this;
            }

            public String toString() {
                StringBuilder stringBuilder = new StringBuilder();
                stringBuilder.append("source(");
                stringBuilder.append(inputStream);
                stringBuilder.append(")");
                return stringBuilder.toString();
            }
        };
    }

    public static Source source(Socket socket) throws IOException {
        if (socket == null) {
            throw new IllegalArgumentException("socket == null");
        }
        if (socket.getInputStream() == null) {
            throw new IOException("socket's input stream == null");
        }
        AsyncTimeout asyncTimeout = Okio.timeout(socket);
        return asyncTimeout.source(Okio.source(socket.getInputStream(), (Timeout)asyncTimeout));
    }

    @IgnoreJRERequirement
    public static /* varargs */ Source source(Path path, OpenOption ... arropenOption) throws IOException {
        if (path == null) {
            throw new IllegalArgumentException("path == null");
        }
        return Okio.source(Files.newInputStream(path, arropenOption));
    }

    private static AsyncTimeout timeout(Socket socket) {
        return new 4(socket);
    }

}

