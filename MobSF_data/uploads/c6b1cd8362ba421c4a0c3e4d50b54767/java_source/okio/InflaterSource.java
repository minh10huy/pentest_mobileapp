/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  okio.Buffer
 *  okio.BufferedSource
 *  okio.Segment
 *  okio.SegmentPool
 *  okio.Source
 *  okio.Timeout
 */
package okio;

import java.io.EOFException;
import java.io.IOException;
import java.util.zip.DataFormatException;
import java.util.zip.Inflater;
import okio.Buffer;
import okio.BufferedSource;
import okio.Okio;
import okio.Segment;
import okio.SegmentPool;
import okio.Source;
import okio.Timeout;

public final class InflaterSource
implements Source {
    private int bufferBytesHeldByInflater;
    private boolean closed;
    private final Inflater inflater;
    private final BufferedSource source;

    InflaterSource(BufferedSource bufferedSource, Inflater inflater) {
        if (bufferedSource == null) {
            throw new IllegalArgumentException("source == null");
        }
        if (inflater == null) {
            throw new IllegalArgumentException("inflater == null");
        }
        this.source = bufferedSource;
        this.inflater = inflater;
    }

    public InflaterSource(Source source, Inflater inflater) {
        this(Okio.buffer(source), inflater);
    }

    private void releaseInflatedBytes() throws IOException {
        if (this.bufferBytesHeldByInflater == 0) {
            return;
        }
        int n = this.bufferBytesHeldByInflater - this.inflater.getRemaining();
        this.bufferBytesHeldByInflater -= n;
        this.source.skip((long)n);
    }

    public void close() throws IOException {
        if (this.closed) {
            return;
        }
        this.inflater.end();
        this.closed = true;
        this.source.close();
    }

    /*
     * Unable to fully structure code
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    public long read(Buffer var1_1, long var2_3) throws IOException {
        if (var2_3 < 0L) {
            var1_1 = new StringBuilder();
            var1_1.append("byteCount < 0: ");
            var1_1.append(var2_3);
            throw new IllegalArgumentException(var1_1.toString());
        }
        if (this.closed) {
            throw new IllegalStateException("closed");
        }
        if (var2_3 == 0L) {
            return 0L;
        }
        do {
            block10 : {
                var7_5 = this.refill();
                var8_6 = var1_1.writableSegment(1);
                var4_4 = (int)Math.min(var2_3, (long)(8192 - var8_6.limit));
                var4_4 = this.inflater.inflate(var8_6.data, var8_6.limit, var4_4);
                if (var4_4 <= 0) break block10;
                var8_6.limit += var4_4;
                var2_3 = var1_1.size;
                var5_7 = var4_4;
                var1_1.size = var2_3 + var5_7;
                return var5_7;
            }
            if (this.inflater.finished() || this.inflater.needsDictionary()) ** GOTO lbl30
            if (!var7_5) continue;
            break;
        } while (true);
        try {
            throw new EOFException("source exhausted prematurely");
lbl30: // 1 sources:
            this.releaseInflatedBytes();
            if (var8_6.pos != var8_6.limit) return -1L;
            var1_1.head = var8_6.pop();
            SegmentPool.recycle((Segment)var8_6);
            return -1L;
        }
        catch (DataFormatException var1_2) {
            throw new IOException(var1_2);
        }
    }

    public boolean refill() throws IOException {
        if (!this.inflater.needsInput()) {
            return false;
        }
        this.releaseInflatedBytes();
        if (this.inflater.getRemaining() != 0) {
            throw new IllegalStateException("?");
        }
        if (this.source.exhausted()) {
            return true;
        }
        Segment segment = this.source.buffer().head;
        this.bufferBytesHeldByInflater = segment.limit - segment.pos;
        this.inflater.setInput(segment.data, segment.pos, this.bufferBytesHeldByInflater);
        return false;
    }

    public Timeout timeout() {
        return this.source.timeout();
    }
}

