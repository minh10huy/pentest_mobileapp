/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  okio.Buffer
 *  okio.BufferedSink
 *  okio.ByteString
 *  okio.Sink
 *  okio.Source
 *  okio.Timeout
 */
package okio;

import java.io.EOFException;
import java.io.IOException;
import java.io.OutputStream;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import okio.Buffer;
import okio.BufferedSink;
import okio.ByteString;
import okio.Sink;
import okio.Source;
import okio.Timeout;
import okio.Util;

final class RealBufferedSink
implements BufferedSink {
    public final Buffer buffer = new Buffer();
    boolean closed;
    public final Sink sink;

    RealBufferedSink(Sink sink) {
        if (sink == null) {
            throw new NullPointerException("sink == null");
        }
        this.sink = sink;
    }

    public Buffer buffer() {
        return this.buffer;
    }

    public void close() throws IOException {
        Throwable throwable;
        block7 : {
            if (this.closed) {
                return;
            }
            Throwable throwable2 = throwable = null;
            try {
                if (this.buffer.size > 0L) {
                    this.sink.write(this.buffer, this.buffer.size);
                    throwable2 = throwable;
                }
            }
            catch (Throwable throwable3) {
                // empty catch block
            }
            try {
                this.sink.close();
                throwable = throwable2;
            }
            catch (Throwable throwable4) {
                throwable = throwable2;
                if (throwable2 != null) break block7;
                throwable = throwable4;
            }
        }
        this.closed = true;
        if (throwable != null) {
            Util.sneakyRethrow(throwable);
        }
    }

    public BufferedSink emit() throws IOException {
        if (this.closed) {
            throw new IllegalStateException("closed");
        }
        long l = this.buffer.size();
        if (l > 0L) {
            this.sink.write(this.buffer, l);
        }
        return this;
    }

    public BufferedSink emitCompleteSegments() throws IOException {
        if (this.closed) {
            throw new IllegalStateException("closed");
        }
        long l = this.buffer.completeSegmentByteCount();
        if (l > 0L) {
            this.sink.write(this.buffer, l);
        }
        return this;
    }

    public void flush() throws IOException {
        if (this.closed) {
            throw new IllegalStateException("closed");
        }
        if (this.buffer.size > 0L) {
            this.sink.write(this.buffer, this.buffer.size);
        }
        this.sink.flush();
    }

    public boolean isOpen() {
        return this.closed ^ true;
    }

    public OutputStream outputStream() {
        return new OutputStream(){

            @Override
            public void close() throws IOException {
                RealBufferedSink.this.close();
            }

            @Override
            public void flush() throws IOException {
                if (!RealBufferedSink.this.closed) {
                    RealBufferedSink.this.flush();
                }
            }

            public String toString() {
                StringBuilder stringBuilder = new StringBuilder();
                stringBuilder.append(RealBufferedSink.this);
                stringBuilder.append(".outputStream()");
                return stringBuilder.toString();
            }

            @Override
            public void write(int n) throws IOException {
                if (RealBufferedSink.this.closed) {
                    throw new IOException("closed");
                }
                RealBufferedSink.this.buffer.writeByte((int)((byte)n));
                RealBufferedSink.this.emitCompleteSegments();
            }

            @Override
            public void write(byte[] arrby, int n, int n2) throws IOException {
                if (RealBufferedSink.this.closed) {
                    throw new IOException("closed");
                }
                RealBufferedSink.this.buffer.write(arrby, n, n2);
                RealBufferedSink.this.emitCompleteSegments();
            }
        };
    }

    public Timeout timeout() {
        return this.sink.timeout();
    }

    public String toString() {
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("buffer(");
        stringBuilder.append((Object)this.sink);
        stringBuilder.append(")");
        return stringBuilder.toString();
    }

    public int write(ByteBuffer byteBuffer) throws IOException {
        if (this.closed) {
            throw new IllegalStateException("closed");
        }
        int n = this.buffer.write(byteBuffer);
        this.emitCompleteSegments();
        return n;
    }

    public BufferedSink write(ByteString byteString) throws IOException {
        if (this.closed) {
            throw new IllegalStateException("closed");
        }
        this.buffer.write(byteString);
        return this.emitCompleteSegments();
    }

    public BufferedSink write(Source source, long l) throws IOException {
        while (l > 0L) {
            long l2 = source.read(this.buffer, l);
            if (l2 == -1L) {
                throw new EOFException();
            }
            this.emitCompleteSegments();
            l -= l2;
        }
        return this;
    }

    public BufferedSink write(byte[] arrby) throws IOException {
        if (this.closed) {
            throw new IllegalStateException("closed");
        }
        this.buffer.write(arrby);
        return this.emitCompleteSegments();
    }

    public BufferedSink write(byte[] arrby, int n, int n2) throws IOException {
        if (this.closed) {
            throw new IllegalStateException("closed");
        }
        this.buffer.write(arrby, n, n2);
        return this.emitCompleteSegments();
    }

    public void write(Buffer buffer, long l) throws IOException {
        if (this.closed) {
            throw new IllegalStateException("closed");
        }
        this.buffer.write(buffer, l);
        this.emitCompleteSegments();
    }

    public long writeAll(Source source) throws IOException {
        long l;
        if (source == null) {
            throw new IllegalArgumentException("source == null");
        }
        long l2 = 0L;
        while ((l = source.read(this.buffer, 8192L)) != -1L) {
            this.emitCompleteSegments();
            l2 += l;
        }
        return l2;
    }

    public BufferedSink writeByte(int n) throws IOException {
        if (this.closed) {
            throw new IllegalStateException("closed");
        }
        this.buffer.writeByte(n);
        return this.emitCompleteSegments();
    }

    public BufferedSink writeDecimalLong(long l) throws IOException {
        if (this.closed) {
            throw new IllegalStateException("closed");
        }
        this.buffer.writeDecimalLong(l);
        return this.emitCompleteSegments();
    }

    public BufferedSink writeHexadecimalUnsignedLong(long l) throws IOException {
        if (this.closed) {
            throw new IllegalStateException("closed");
        }
        this.buffer.writeHexadecimalUnsignedLong(l);
        return this.emitCompleteSegments();
    }

    public BufferedSink writeInt(int n) throws IOException {
        if (this.closed) {
            throw new IllegalStateException("closed");
        }
        this.buffer.writeInt(n);
        return this.emitCompleteSegments();
    }

    public BufferedSink writeIntLe(int n) throws IOException {
        if (this.closed) {
            throw new IllegalStateException("closed");
        }
        this.buffer.writeIntLe(n);
        return this.emitCompleteSegments();
    }

    public BufferedSink writeLong(long l) throws IOException {
        if (this.closed) {
            throw new IllegalStateException("closed");
        }
        this.buffer.writeLong(l);
        return this.emitCompleteSegments();
    }

    public BufferedSink writeLongLe(long l) throws IOException {
        if (this.closed) {
            throw new IllegalStateException("closed");
        }
        this.buffer.writeLongLe(l);
        return this.emitCompleteSegments();
    }

    public BufferedSink writeShort(int n) throws IOException {
        if (this.closed) {
            throw new IllegalStateException("closed");
        }
        this.buffer.writeShort(n);
        return this.emitCompleteSegments();
    }

    public BufferedSink writeShortLe(int n) throws IOException {
        if (this.closed) {
            throw new IllegalStateException("closed");
        }
        this.buffer.writeShortLe(n);
        return this.emitCompleteSegments();
    }

    public BufferedSink writeString(String string2, int n, int n2, Charset charset) throws IOException {
        if (this.closed) {
            throw new IllegalStateException("closed");
        }
        this.buffer.writeString(string2, n, n2, charset);
        return this.emitCompleteSegments();
    }

    public BufferedSink writeString(String string2, Charset charset) throws IOException {
        if (this.closed) {
            throw new IllegalStateException("closed");
        }
        this.buffer.writeString(string2, charset);
        return this.emitCompleteSegments();
    }

    public BufferedSink writeUtf8(String string2) throws IOException {
        if (this.closed) {
            throw new IllegalStateException("closed");
        }
        this.buffer.writeUtf8(string2);
        return this.emitCompleteSegments();
    }

    public BufferedSink writeUtf8(String string2, int n, int n2) throws IOException {
        if (this.closed) {
            throw new IllegalStateException("closed");
        }
        this.buffer.writeUtf8(string2, n, n2);
        return this.emitCompleteSegments();
    }

    public BufferedSink writeUtf8CodePoint(int n) throws IOException {
        if (this.closed) {
            throw new IllegalStateException("closed");
        }
        this.buffer.writeUtf8CodePoint(n);
        return this.emitCompleteSegments();
    }

}

