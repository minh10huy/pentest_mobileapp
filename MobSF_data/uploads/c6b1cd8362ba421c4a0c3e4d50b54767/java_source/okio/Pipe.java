/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  okio.Buffer
 *  okio.Sink
 *  okio.Source
 *  okio.Timeout
 */
package okio;

import java.io.IOException;
import okio.Buffer;
import okio.Sink;
import okio.Source;
import okio.Timeout;

public final class Pipe {
    final Buffer buffer = new Buffer();
    final long maxBufferSize;
    private final Sink sink = new PipeSink();
    boolean sinkClosed;
    private final Source source = new PipeSource();
    boolean sourceClosed;

    public Pipe(long l) {
        if (l < 1L) {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("maxBufferSize < 1: ");
            stringBuilder.append(l);
            throw new IllegalArgumentException(stringBuilder.toString());
        }
        this.maxBufferSize = l;
    }

    public Sink sink() {
        return this.sink;
    }

    public Source source() {
        return this.source;
    }

    final class PipeSink
    implements Sink {
        final Timeout timeout = new Timeout();

        PipeSink() {
        }

        /*
         * Enabled aggressive block sorting
         * Enabled unnecessary exception pruning
         * Enabled aggressive exception aggregation
         */
        public void close() throws IOException {
            Buffer buffer = Pipe.this.buffer;
            synchronized (buffer) {
                if (Pipe.this.sinkClosed) {
                    return;
                }
                if (Pipe.this.sourceClosed && Pipe.this.buffer.size() > 0L) {
                    throw new IOException("source is closed");
                }
                Pipe.this.sinkClosed = true;
                Pipe.this.buffer.notifyAll();
                return;
            }
        }

        /*
         * Enabled aggressive block sorting
         * Enabled unnecessary exception pruning
         * Enabled aggressive exception aggregation
         */
        public void flush() throws IOException {
            Buffer buffer = Pipe.this.buffer;
            synchronized (buffer) {
                if (Pipe.this.sinkClosed) {
                    throw new IllegalStateException("closed");
                }
                if (Pipe.this.sourceClosed && Pipe.this.buffer.size() > 0L) {
                    throw new IOException("source is closed");
                }
                return;
            }
        }

        public Timeout timeout() {
            return this.timeout;
        }

        /*
         * Enabled aggressive block sorting
         * Enabled unnecessary exception pruning
         * Enabled aggressive exception aggregation
         */
        public void write(Buffer buffer, long l) throws IOException {
            Buffer buffer2 = Pipe.this.buffer;
            synchronized (buffer2) {
                if (Pipe.this.sinkClosed) {
                    throw new IllegalStateException("closed");
                }
                while (l > 0L) {
                    if (Pipe.this.sourceClosed) {
                        throw new IOException("source is closed");
                    }
                    long l2 = Pipe.this.maxBufferSize - Pipe.this.buffer.size();
                    if (l2 == 0L) {
                        this.timeout.waitUntilNotified((Object)Pipe.this.buffer);
                        continue;
                    }
                    l2 = Math.min(l2, l);
                    Pipe.this.buffer.write(buffer, l2);
                    Pipe.this.buffer.notifyAll();
                    l -= l2;
                }
                return;
            }
        }
    }

    final class PipeSource
    implements Source {
        final Timeout timeout = new Timeout();

        PipeSource() {
        }

        /*
         * Enabled aggressive block sorting
         * Enabled unnecessary exception pruning
         * Enabled aggressive exception aggregation
         */
        public void close() throws IOException {
            Buffer buffer = Pipe.this.buffer;
            synchronized (buffer) {
                Pipe.this.sourceClosed = true;
                Pipe.this.buffer.notifyAll();
                return;
            }
        }

        /*
         * Enabled aggressive block sorting
         * Enabled unnecessary exception pruning
         * Enabled aggressive exception aggregation
         */
        public long read(Buffer buffer, long l) throws IOException {
            Buffer buffer2 = Pipe.this.buffer;
            synchronized (buffer2) {
                if (Pipe.this.sourceClosed) {
                    throw new IllegalStateException("closed");
                }
                do {
                    if (Pipe.this.buffer.size() != 0L) {
                        l = Pipe.this.buffer.read(buffer, l);
                        Pipe.this.buffer.notifyAll();
                        return l;
                    }
                    if (Pipe.this.sinkClosed) {
                        return -1L;
                    }
                    this.timeout.waitUntilNotified((Object)Pipe.this.buffer);
                } while (true);
            }
        }

        public Timeout timeout() {
            return this.timeout;
        }
    }

}

