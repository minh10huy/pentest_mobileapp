/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  javax.annotation.Nullable
 *  okio.AsyncTimeout$1
 *  okio.AsyncTimeout$2
 *  okio.AsyncTimeout$Watchdog
 */
package okio;

import java.io.IOException;
import java.io.InterruptedIOException;
import java.util.concurrent.TimeUnit;
import javax.annotation.Nullable;
import okio.AsyncTimeout;
import okio.Sink;
import okio.Source;
import okio.Timeout;

public class AsyncTimeout
extends Timeout {
    private static final long IDLE_TIMEOUT_MILLIS = TimeUnit.SECONDS.toMillis(60L);
    private static final long IDLE_TIMEOUT_NANOS = TimeUnit.MILLISECONDS.toNanos(IDLE_TIMEOUT_MILLIS);
    private static final int TIMEOUT_WRITE_SIZE = 65536;
    @Nullable
    static AsyncTimeout head;
    private boolean inQueue;
    @Nullable
    private AsyncTimeout next;
    private long timeoutAt;

    @Nullable
    static AsyncTimeout awaitTimeout() throws InterruptedException {
        AsyncTimeout asyncTimeout = AsyncTimeout.head.next;
        java.lang.Object var5_1 = null;
        if (asyncTimeout == null) {
            long l = System.nanoTime();
            AsyncTimeout.class.wait(IDLE_TIMEOUT_MILLIS);
            asyncTimeout = var5_1;
            if (AsyncTimeout.head.next == null) {
                asyncTimeout = var5_1;
                if (System.nanoTime() - l >= IDLE_TIMEOUT_NANOS) {
                    asyncTimeout = head;
                }
            }
            return asyncTimeout;
        }
        long l = asyncTimeout.remainingNanos(System.nanoTime());
        if (l > 0L) {
            long l2 = l / 1000000L;
            AsyncTimeout.class.wait(l2, (int)(l - 1000000L * l2));
            return null;
        }
        AsyncTimeout.head.next = asyncTimeout.next;
        asyncTimeout.next = null;
        return asyncTimeout;
    }

    private static boolean cancelScheduledTimeout(AsyncTimeout asyncTimeout) {
        synchronized (AsyncTimeout.class) {
            AsyncTimeout asyncTimeout2 = head;
            while (asyncTimeout2 != null) {
                block6 : {
                    if (asyncTimeout2.next != asyncTimeout) break block6;
                    asyncTimeout2.next = asyncTimeout.next;
                    asyncTimeout.next = null;
                    return false;
                }
                asyncTimeout2 = asyncTimeout2.next;
            }
            return true;
        }
    }

    private long remainingNanos(long l) {
        return this.timeoutAt - l;
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    private static void scheduleTimeout(AsyncTimeout asyncTimeout, long l, boolean bl) {
        synchronized (AsyncTimeout.class) {
            void var3_2;
            long l2;
            if (head == null) {
                head = new AsyncTimeout();
                new /* Unavailable Anonymous Inner Class!! */.start();
            }
            long l3 = System.nanoTime();
            if (l2 != 0L && var3_2 != false) {
                asyncTimeout.timeoutAt = l3 + Math.min(l2, asyncTimeout.deadlineNanoTime() - l3);
            } else if (l2 != 0L) {
                asyncTimeout.timeoutAt = l3 + l2;
            } else {
                if (var3_2 == false) {
                    throw new AssertionError();
                }
                asyncTimeout.timeoutAt = asyncTimeout.deadlineNanoTime();
            }
            l2 = asyncTimeout.remainingNanos(l3);
            AsyncTimeout asyncTimeout2 = head;
            while (asyncTimeout2.next != null && l2 >= asyncTimeout2.next.remainingNanos(l3)) {
                asyncTimeout2 = asyncTimeout2.next;
            }
            asyncTimeout.next = asyncTimeout2.next;
            asyncTimeout2.next = asyncTimeout;
            if (asyncTimeout2 == head) {
                AsyncTimeout.class.notify();
            }
            return;
        }
    }

    public final void enter() {
        if (this.inQueue) {
            throw new IllegalStateException("Unbalanced enter/exit");
        }
        long l = this.timeoutNanos();
        boolean bl = this.hasDeadline();
        if (l == 0L && !bl) {
            return;
        }
        this.inQueue = true;
        AsyncTimeout.scheduleTimeout(this, l, bl);
    }

    final IOException exit(IOException iOException) throws IOException {
        if (!this.exit()) {
            return iOException;
        }
        return this.newTimeoutException(iOException);
    }

    final void exit(boolean bl) throws IOException {
        if (this.exit() && bl) {
            throw this.newTimeoutException(null);
        }
    }

    public final boolean exit() {
        if (!this.inQueue) {
            return false;
        }
        this.inQueue = false;
        return AsyncTimeout.cancelScheduledTimeout(this);
    }

    protected IOException newTimeoutException(@Nullable IOException iOException) {
        InterruptedIOException interruptedIOException = new InterruptedIOException("timeout");
        if (iOException != null) {
            interruptedIOException.initCause(iOException);
        }
        return interruptedIOException;
    }

    public final Sink sink(Sink sink) {
        return new 1(this, sink);
    }

    public final Source source(Source source) {
        return new 2(this, source);
    }

    protected void timedOut() {
    }
}

