/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  okio.Buffer
 *  okio.ByteString
 *  okio.Segment
 *  okio.Source
 */
package okio;

import java.io.IOException;
import java.security.InvalidKeyException;
import java.security.Key;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;
import okio.Buffer;
import okio.ByteString;
import okio.ForwardingSource;
import okio.Segment;
import okio.Source;

public final class HashingSource
extends ForwardingSource {
    private final Mac mac;
    private final MessageDigest messageDigest;

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    private HashingSource(Source source, String string2) {
        super(source);
        try {
            this.messageDigest = MessageDigest.getInstance(string2);
            this.mac = null;
            return;
        }
        catch (NoSuchAlgorithmException noSuchAlgorithmException) {
            throw new AssertionError();
        }
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    private HashingSource(Source source, ByteString byteString, String string2) {
        super(source);
        try {
            this.mac = Mac.getInstance(string2);
            this.mac.init(new SecretKeySpec(byteString.toByteArray(), string2));
            this.messageDigest = null;
            return;
        }
        catch (InvalidKeyException invalidKeyException) {
            throw new IllegalArgumentException(invalidKeyException);
        }
        catch (NoSuchAlgorithmException noSuchAlgorithmException) {
            throw new AssertionError();
        }
    }

    public static HashingSource hmacSha1(Source source, ByteString byteString) {
        return new HashingSource(source, byteString, "HmacSHA1");
    }

    public static HashingSource hmacSha256(Source source, ByteString byteString) {
        return new HashingSource(source, byteString, "HmacSHA256");
    }

    public static HashingSource md5(Source source) {
        return new HashingSource(source, "MD5");
    }

    public static HashingSource sha1(Source source) {
        return new HashingSource(source, "SHA-1");
    }

    public static HashingSource sha256(Source source) {
        return new HashingSource(source, "SHA-256");
    }

    public ByteString hash() {
        byte[] arrby = this.messageDigest != null ? this.messageDigest.digest() : this.mac.doFinal();
        return ByteString.of((byte[])arrby);
    }

    @Override
    public long read(Buffer buffer, long l) throws IOException {
        long l2 = super.read(buffer, l);
        if (l2 != -1L) {
            long l3;
            Segment segment;
            long l4;
            long l5 = buffer.size - l2;
            l = buffer.size;
            Segment segment2 = buffer.head;
            do {
                l4 = l;
                l3 = l5;
                segment = segment2;
                if (l <= l5) break;
                segment2 = segment2.prev;
                l -= (long)(segment2.limit - segment2.pos);
            } while (true);
            while (l4 < buffer.size) {
                int n = (int)((long)segment.pos + l3 - l4);
                if (this.messageDigest != null) {
                    this.messageDigest.update(segment.data, n, segment.limit - n);
                } else {
                    this.mac.update(segment.data, n, segment.limit - n);
                }
                l = segment.limit - segment.pos;
                segment = segment.next;
                l3 = l4 += l;
            }
        }
        return l2;
    }
}

