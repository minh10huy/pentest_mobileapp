/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.content.ContentResolver
 *  android.content.Context
 *  android.graphics.Bitmap
 *  android.graphics.Bitmap$CompressFormat
 *  android.graphics.Bitmap$Config
 *  android.graphics.BitmapFactory
 *  android.graphics.BitmapFactory$Options
 *  android.graphics.BitmapRegionDecoder
 *  android.graphics.Matrix
 *  android.graphics.Rect
 *  android.graphics.RectF
 *  android.net.Uri
 *  android.util.Log
 *  android.util.Pair
 *  javax.microedition.khronos.egl.EGL10
 *  javax.microedition.khronos.egl.EGLConfig
 *  javax.microedition.khronos.egl.EGLContext
 *  javax.microedition.khronos.egl.EGLDisplay
 */
package com.theartofdev.edmodo.cropper;

import android.content.ContentResolver;
import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.BitmapRegionDecoder;
import android.graphics.Matrix;
import android.graphics.Rect;
import android.graphics.RectF;
import android.net.Uri;
import android.support.media.ExifInterface;
import android.util.Log;
import android.util.Pair;
import com.theartofdev.edmodo.cropper.CropImageView;
import java.io.Closeable;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.lang.ref.WeakReference;
import javax.microedition.khronos.egl.EGL10;
import javax.microedition.khronos.egl.EGLConfig;
import javax.microedition.khronos.egl.EGLContext;
import javax.microedition.khronos.egl.EGLDisplay;

final class BitmapUtils {
    static final Rect EMPTY_RECT = new Rect();
    static final RectF EMPTY_RECT_F = new RectF();
    static final float[] POINTS;
    static final float[] POINTS2;
    static final RectF RECT;
    private static int mMaxTextureSize;
    static Pair<String, WeakReference<Bitmap>> mStateBitmap;

    static {
        RECT = new RectF();
        POINTS = new float[6];
        POINTS2 = new float[6];
    }

    BitmapUtils() {
    }

    private static int calculateInSampleSizeByMaxTextureSize(int n, int n2) {
        if (mMaxTextureSize == 0) {
            mMaxTextureSize = BitmapUtils.getMaxTextureSize();
        }
        int n3 = mMaxTextureSize;
        int n4 = 1;
        int n5 = 1;
        if (n3 > 0) {
            do {
                if (n2 / n5 <= mMaxTextureSize) {
                    n4 = n5;
                    if (n / n5 <= mMaxTextureSize) break;
                }
                n5 *= 2;
            } while (true);
        }
        return n4;
    }

    private static int calculateInSampleSizeByReqestedSize(int n, int n2, int n3, int n4) {
        int n5;
        block4 : {
            int n6;
            block3 : {
                int n7;
                n5 = 1;
                n6 = n7 = 1;
                if (n2 > n4) break block3;
                if (n <= n3) break block4;
                n6 = n7;
            }
            do {
                n5 = n6;
                if (n2 / 2 / n6 <= n4) break;
                n5 = n6;
                if (n / 2 / n6 <= n3) break;
                n6 *= 2;
            } while (true);
        }
        return n5;
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    private static void closeSafe(Closeable closeable) {
        if (closeable == null) return;
        try {
            closeable.close();
            return;
        }
        catch (IOException iOException) {
            return;
        }
    }

    static BitmapSampled cropBitmap(Context object, Uri uri, float[] arrf, int n, int n2, int n3, boolean bl, int n4, int n5, int n6, int n7, boolean bl2, boolean bl3) {
        int n8 = 1;
        do {
            try {
                BitmapSampled bitmapSampled = BitmapUtils.cropBitmap((Context)object, uri, arrf, n, n2, n3, bl, n4, n5, n6, n7, bl2, bl3, n8);
                return bitmapSampled;
            }
            catch (OutOfMemoryError outOfMemoryError) {
                if ((n8 *= 2) <= 16) continue;
                object = new StringBuilder();
                object.append("Failed to handle OOM by sampling (");
                object.append(n8);
                object.append("): ");
                object.append((Object)uri);
                object.append("\r\n");
                object.append(outOfMemoryError.getMessage());
                throw new RuntimeException(object.toString(), outOfMemoryError);
            }
            break;
        } while (true);
    }

    /*
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    private static BitmapSampled cropBitmap(Context context, Uri object, float[] bitmap, int n, int n2, int n3, boolean bl, int n4, int n5, int n6, int n7, boolean bl2, boolean bl3, int n8) {
        void var1_6;
        Bitmap bitmap2;
        block9 : {
            Bitmap bitmap3;
            Rect rect;
            int n10;
            void var12_17;
            void var3_8;
            int n9;
            void var11_16;
            void var13_18;
            void var8_13;
            void var7_12;
            int n11;
            void var6_11;
            block8 : {
                int n12;
                rect = BitmapUtils.getRectFromPoints((float[])bitmap2, n10, n9, (boolean)var6_11, (int)var7_12, (int)var8_13);
                n10 = n11 > 0 ? n11 : rect.width();
                n9 = n12 > 0 ? n12 : rect.height();
                try {
                    BitmapSampled bitmapSampled = BitmapUtils.decodeSampledBitmapRegion(context, (Uri)object, rect, n10, n9, (int)var13_18);
                    bitmap3 = bitmapSampled.bitmap;
                }
                catch (Exception exception) {
                    return BitmapUtils.cropBitmap(context, (Uri)object, (float[])bitmap2, (int)var3_8, (boolean)var6_11, (int)var7_12, (int)var8_13, (int)var13_18, rect, n10, n9, (boolean)var11_16, (boolean)var12_17);
                }
                try {
                    n11 = bitmapSampled.sampleSize;
                    break block8;
                }
                catch (Exception exception) {}
                n11 = 1;
            }
            if (bitmap3 == null) return BitmapUtils.cropBitmap(context, (Uri)object, (float[])bitmap2, (int)var3_8, (boolean)var6_11, (int)var7_12, (int)var8_13, (int)var13_18, rect, n10, n9, (boolean)var11_16, (boolean)var12_17);
            context = BitmapUtils.rotateAndFlipBitmapInt(bitmap3, (int)var3_8, (boolean)var11_16, (boolean)var12_17);
            if (var3_8 % 90 == false) return new BitmapSampled((Bitmap)context, n11);
            try {
                Bitmap bitmap4 = BitmapUtils.cropForRotatedImage((Bitmap)context, (float[])bitmap2, rect, (int)var3_8, (boolean)var6_11, (int)var7_12, (int)var8_13);
                context = bitmap4;
                return new BitmapSampled((Bitmap)context, n11);
            }
            catch (OutOfMemoryError outOfMemoryError) {
                bitmap2 = context;
            }
            break block9;
            catch (OutOfMemoryError outOfMemoryError) {
                bitmap2 = bitmap3;
                OutOfMemoryError outOfMemoryError2 = outOfMemoryError;
            }
        }
        if (bitmap2 == null) throw var1_6;
        bitmap2.recycle();
        throw var1_6;
    }

    /*
     * Exception decompiling
     */
    private static BitmapSampled cropBitmap(Context var0, Uri var1_4, float[] var2_6, int var3_7, boolean var4_8, int var5_9, int var6_10, int var7_11, Rect var8_12, int var9_13, int var10_14, boolean var11_15, boolean var12_16) {
        // This method has failed to decompile.  When submitting a bug report, please provide this stack trace, and (if you hold appropriate legal rights) the relevant class file.
        // org.benf.cfr.reader.util.ConfusedCFRException: Tried to end blocks [3[TRYBLOCK]], but top level block is 7[CATCHBLOCK]
        // org.benf.cfr.reader.bytecode.analysis.opgraph.Op04StructuredStatement.processEndingBlocks(Op04StructuredStatement.java:416)
        // org.benf.cfr.reader.bytecode.analysis.opgraph.Op04StructuredStatement.buildNestedBlocks(Op04StructuredStatement.java:468)
        // org.benf.cfr.reader.bytecode.analysis.opgraph.Op03SimpleStatement.createInitialStructuredBlock(Op03SimpleStatement.java:2960)
        // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisInner(CodeAnalyser.java:818)
        // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisOrWrapFail(CodeAnalyser.java:196)
        // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysis(CodeAnalyser.java:141)
        // org.benf.cfr.reader.entities.attributes.AttributeCode.analyse(AttributeCode.java:95)
        // org.benf.cfr.reader.entities.Method.analyse(Method.java:372)
        // org.benf.cfr.reader.entities.ClassFile.analyseMid(ClassFile.java:867)
        // org.benf.cfr.reader.entities.ClassFile.analyseTop(ClassFile.java:768)
        // org.benf.cfr.reader.Main.doJar(Main.java:141)
        // org.benf.cfr.reader.Main.main(Main.java:242)
        throw new IllegalStateException("Decompilation failed");
    }

    static BitmapSampled cropBitmapObjectHandleOOM(Bitmap bitmap, float[] arrf, int n, boolean bl, int n2, int n3, boolean bl2, boolean bl3) {
        int n4 = 1;
        do {
            float f = 1.0f / (float)n4;
            try {
                BitmapSampled bitmapSampled = new BitmapSampled(BitmapUtils.cropBitmapObjectWithScale(bitmap, arrf, n, bl, n2, n3, f, bl2, bl3), n4);
                return bitmapSampled;
            }
            catch (OutOfMemoryError outOfMemoryError) {
                int n5;
                n4 = n5 = n4 * 2;
                if (n5 <= 8) continue;
                throw outOfMemoryError;
            }
            break;
        } while (true);
    }

    private static Bitmap cropBitmapObjectWithScale(Bitmap bitmap, float[] arrf, int n, boolean bl, int n2, int n3, float f, boolean bl2, boolean bl3) {
        Rect rect = BitmapUtils.getRectFromPoints(arrf, bitmap.getWidth(), bitmap.getHeight(), bl, n2, n3);
        Matrix matrix = new Matrix();
        matrix.setRotate((float)n, (float)(bitmap.getWidth() / 2), (float)(bitmap.getHeight() / 2));
        float f2 = bl2 ? - f : f;
        float f3 = f;
        if (bl3) {
            f3 = - f;
        }
        matrix.postScale(f2, f3);
        Bitmap bitmap2 = Bitmap.createBitmap((Bitmap)bitmap, (int)rect.left, (int)rect.top, (int)rect.width(), (int)rect.height(), (Matrix)matrix, (boolean)true);
        matrix = bitmap2;
        if (bitmap2 == bitmap) {
            matrix = bitmap.copy(bitmap.getConfig(), false);
        }
        bitmap = matrix;
        if (n % 90 != 0) {
            bitmap = BitmapUtils.cropForRotatedImage((Bitmap)matrix, arrf, rect, n, bl, n2, n3);
        }
        return bitmap;
    }

    private static Bitmap cropForRotatedImage(Bitmap bitmap, float[] arrf, Rect rect, int n, boolean bl, int n2, int n3) {
        Bitmap bitmap2 = bitmap;
        if (n % 90 != 0) {
            int n4;
            int n5;
            int n6;
            block4 : {
                double d = Math.toRadians(n);
                n = n >= 90 && (n <= 180 || n >= 270) ? rect.right : rect.left;
                int n7 = 0;
                for (n4 = 0; n4 < arrf.length; n4 += 2) {
                    if (arrf[n4] < (float)(n - 1) || arrf[n4] > (float)(n + 1)) continue;
                    double d2 = Math.sin(d);
                    float f = rect.bottom;
                    n5 = n4 + 1;
                    n = (int)Math.abs(d2 * (double)(f - arrf[n5]));
                    n6 = (int)Math.abs(Math.cos(d) * (double)(arrf[n5] - (float)rect.top));
                    n4 = (int)Math.abs((double)(arrf[n5] - (float)rect.top) / Math.sin(d));
                    n5 = (int)Math.abs((double)((float)rect.bottom - arrf[n5]) / Math.cos(d));
                    break block4;
                }
                n5 = 0;
                n6 = 0;
                n4 = 0;
                n = n7;
            }
            rect.set(n, n6, n4 + n, n5 + n6);
            if (bl) {
                BitmapUtils.fixRectForAspectRatio(rect, n2, n3);
            }
            if (bitmap != (bitmap2 = Bitmap.createBitmap((Bitmap)bitmap, (int)rect.left, (int)rect.top, (int)rect.width(), (int)rect.height()))) {
                bitmap.recycle();
            }
        }
        return bitmap2;
    }

    /*
     * WARNING - Removed back jump from a try to a catch block - possible behaviour change.
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    private static Bitmap decodeImage(ContentResolver object, Uri uri, BitmapFactory.Options options) throws FileNotFoundException {
        do {
            InputStream inputStream2;
            InputStream inputStream;
            block9 : {
                Object var5_10;
                void var0_3;
                block8 : {
                    var5_10 = null;
                    inputStream = null;
                    inputStream2 = object.openInputStream(uri);
                    try {
                        inputStream = BitmapFactory.decodeStream((InputStream)inputStream2, (Rect)EMPTY_RECT, (BitmapFactory.Options)options);
                    }
                    catch (Throwable throwable) {
                        inputStream = inputStream2;
                        break block8;
                    }
                    catch (OutOfMemoryError outOfMemoryError) {
                        break block9;
                    }
                    BitmapUtils.closeSafe(inputStream2);
                    return inputStream;
                    catch (Throwable throwable) {}
                }
                BitmapUtils.closeSafe(inputStream);
                throw var0_3;
                catch (OutOfMemoryError outOfMemoryError) {
                    inputStream2 = var5_10;
                }
            }
            inputStream = inputStream2;
            {
                options.inSampleSize *= 2;
            }
            BitmapUtils.closeSafe(inputStream2);
        } while (options.inSampleSize <= 512);
        object = new StringBuilder();
        object.append("Failed to decode image: ");
        object.append((Object)uri);
        throw new RuntimeException(object.toString());
    }

    /*
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    private static BitmapFactory.Options decodeImageForOption(ContentResolver object, Uri uri) throws FileNotFoundException {
        void var1_4;
        block4 : {
            object = object.openInputStream(uri);
            try {
                uri = new BitmapFactory.Options();
                uri.inJustDecodeBounds = true;
                BitmapFactory.decodeStream((InputStream)object, (Rect)EMPTY_RECT, (BitmapFactory.Options)uri);
                uri.inJustDecodeBounds = false;
            }
            catch (Throwable throwable) {}
            BitmapUtils.closeSafe((Closeable)object);
            return uri;
            break block4;
            catch (Throwable throwable) {
                object = null;
            }
        }
        BitmapUtils.closeSafe((Closeable)object);
        throw var1_4;
    }

    static BitmapSampled decodeSampledBitmap(Context object, Uri uri, int n, int n2) {
        try {
            object = object.getContentResolver();
            BitmapFactory.Options options = BitmapUtils.decodeImageForOption((ContentResolver)object, uri);
            options.inSampleSize = Math.max(BitmapUtils.calculateInSampleSizeByReqestedSize(options.outWidth, options.outHeight, n, n2), BitmapUtils.calculateInSampleSizeByMaxTextureSize(options.outWidth, options.outHeight));
            object = new BitmapSampled(BitmapUtils.decodeImage((ContentResolver)object, uri, options), options.inSampleSize);
            return object;
        }
        catch (Exception exception) {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("Failed to load sampled bitmap: ");
            stringBuilder.append((Object)uri);
            stringBuilder.append("\r\n");
            stringBuilder.append(exception.getMessage());
            throw new RuntimeException(stringBuilder.toString(), exception);
        }
    }

    /*
     * WARNING - Removed back jump from a try to a catch block - possible behaviour change.
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    private static BitmapSampled decodeSampledBitmapRegion(Context var0, Uri var1_1, Rect var2_3, int var3_7, int var4_8, int var5_9) {
        block14 : {
            var6_10 = null;
            var8_15 = null;
            var9_16 = new BitmapFactory.Options();
            var9_16.inSampleSize = var5_9 * BitmapUtils.calculateInSampleSizeByReqestedSize(var2_3 /* !! */ .width(), var2_3 /* !! */ .height(), var3_7, var4_8);
            var7_17 = var0.getContentResolver().openInputStream(var1_1 /* !! */ );
            try {
                var0 = BitmapRegionDecoder.newInstance((InputStream)var7_17, (boolean)false);
                break block14;
            }
            catch (Throwable var2_5) {
                var0 = null;
                ** GOTO lbl34
            }
            catch (Exception var6_13) {
                var2_3 /* !! */  = null;
                ** GOTO lbl39
            }
            catch (Throwable var2_6) {
                var0 = null;
                var1_1 /* !! */  = var6_10;
                var6_10 = var0;
                ** GOTO lbl51
            }
            catch (Exception var6_14) {
                var2_3 /* !! */  = null;
                var0 = var8_15;
                ** GOTO lbl40
            }
        }
        do {
            block15 : {
                try {
                    var6_10 = new BitmapSampled(var0.decodeRegion(var2_3 /* !! */ , var9_16), var9_16.inSampleSize);
                }
                catch (Throwable var2_4) {}
                BitmapUtils.closeSafe((Closeable)var7_17);
                if (var0 == null) return var6_10;
                var0.recycle();
                return var6_10;
lbl34: // 2 sources:
                var1_1 /* !! */  = var7_17;
                var6_10 = var0;
                break block15;
                catch (Exception var6_11) {
                    var2_3 /* !! */  = var0;
                }
lbl39: // 2 sources:
                var0 = var7_17;
lbl40: // 2 sources:
                try {
                    var7_17 = new StringBuilder();
                    var7_17.append("Failed to load sampled bitmap: ");
                    var7_17.append((Object)var1_1 /* !! */ );
                    var7_17.append("\r\n");
                    var7_17.append(var6_10.getMessage());
                    throw new RuntimeException(var7_17.toString(), (Throwable)var6_10);
                }
                catch (Throwable var1_2) {
                    var6_10 = var2_3 /* !! */ ;
                    var2_3 /* !! */  = var1_2;
                    var1_1 /* !! */  = var0;
                }
            }
            BitmapUtils.closeSafe((Closeable)var1_1 /* !! */ );
            if (var6_10 == null) throw var2_3 /* !! */ ;
            var6_10.recycle();
            throw var2_3 /* !! */ ;
            catch (OutOfMemoryError var6_12) {}
            {
                var9_16.inSampleSize *= 2;
                if ((var3_7 = var9_16.inSampleSize) <= 512) continue;
            }
            break;
        } while (true);
        BitmapUtils.closeSafe((Closeable)var7_17);
        if (var0 == null) return new BitmapSampled(null, 1);
        var0.recycle();
        return new BitmapSampled(null, 1);
    }

    private static void fixRectForAspectRatio(Rect rect, int n, int n2) {
        if (n == n2 && rect.width() != rect.height()) {
            if (rect.height() > rect.width()) {
                rect.bottom -= rect.height() - rect.width();
                return;
            }
            rect.right -= rect.width() - rect.height();
        }
    }

    private static int getMaxTextureSize() {
        EGL10 eGL10 = (EGL10)EGLContext.getEGL();
        EGLDisplay eGLDisplay = eGL10.eglGetDisplay(EGL10.EGL_DEFAULT_DISPLAY);
        eGL10.eglInitialize(eGLDisplay, new int[2]);
        int[] arrn = new int[1];
        eGL10.eglGetConfigs(eGLDisplay, null, 0, arrn);
        EGLConfig[] arreGLConfig = new EGLConfig[arrn[0]];
        eGL10.eglGetConfigs(eGLDisplay, arreGLConfig, arrn[0], arrn);
        int[] arrn2 = new int[1];
        int n = 0;
        int n2 = 0;
        do {
            int n3;
            if (n < arrn[0]) {
                eGL10.eglGetConfigAttrib(eGLDisplay, arreGLConfig[n], 12332, arrn2);
                n3 = n2;
                if (n2 < arrn2[0]) {
                    n3 = arrn2[0];
                }
            } else {
                try {
                    eGL10.eglTerminate(eGLDisplay);
                    n = Math.max(n2, 2048);
                    return n;
                }
                catch (Exception exception) {
                    return 2048;
                }
            }
            ++n;
            n2 = n3;
        } while (true);
    }

    static float getRectBottom(float[] arrf) {
        return Math.max(Math.max(Math.max(arrf[1], arrf[3]), arrf[5]), arrf[7]);
    }

    static float getRectCenterX(float[] arrf) {
        return (BitmapUtils.getRectRight(arrf) + BitmapUtils.getRectLeft(arrf)) / 2.0f;
    }

    static float getRectCenterY(float[] arrf) {
        return (BitmapUtils.getRectBottom(arrf) + BitmapUtils.getRectTop(arrf)) / 2.0f;
    }

    static Rect getRectFromPoints(float[] rect, int n, int n2, boolean bl, int n3, int n4) {
        rect = new Rect(Math.round(Math.max(0.0f, BitmapUtils.getRectLeft((float[])rect))), Math.round(Math.max(0.0f, BitmapUtils.getRectTop((float[])rect))), Math.round(Math.min((float)n, BitmapUtils.getRectRight((float[])rect))), Math.round(Math.min((float)n2, BitmapUtils.getRectBottom((float[])rect))));
        if (bl) {
            BitmapUtils.fixRectForAspectRatio(rect, n3, n4);
        }
        return rect;
    }

    static float getRectHeight(float[] arrf) {
        return BitmapUtils.getRectBottom(arrf) - BitmapUtils.getRectTop(arrf);
    }

    static float getRectLeft(float[] arrf) {
        return Math.min(Math.min(Math.min(arrf[0], arrf[2]), arrf[4]), arrf[6]);
    }

    static float getRectRight(float[] arrf) {
        return Math.max(Math.max(Math.max(arrf[0], arrf[2]), arrf[4]), arrf[6]);
    }

    static float getRectTop(float[] arrf) {
        return Math.min(Math.min(Math.min(arrf[1], arrf[3]), arrf[5]), arrf[7]);
    }

    static float getRectWidth(float[] arrf) {
        return BitmapUtils.getRectRight(arrf) - BitmapUtils.getRectLeft(arrf);
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    static Bitmap resizeBitmap(Bitmap var0, int var1_1, int var2_2, CropImageView.RequestSizeOptions var3_3) {
        block8 : {
            if (var1_1 <= 0) return var0;
            if (var2_2 <= 0) return var0;
            if (var3_3 != CropImageView.RequestSizeOptions.RESIZE_FIT && var3_3 != CropImageView.RequestSizeOptions.RESIZE_INSIDE) {
                if (var3_3 != CropImageView.RequestSizeOptions.RESIZE_EXACT) return var0;
            }
            var9_5 = null;
            if (var3_3 == CropImageView.RequestSizeOptions.RESIZE_EXACT) {
                var9_5 = Bitmap.createScaledBitmap((Bitmap)var0, (int)var1_1, (int)var2_2, (boolean)false);
                break block8;
            }
            var7_6 = var0.getWidth();
            var8_7 = var0.getHeight();
            var4_8 = var7_6;
            var6_9 = var4_8 / (float)var1_1;
            var5_10 = var8_7;
            var6_9 = Math.max(var6_9, var5_10 / (float)var2_2);
            if (var6_9 > 1.0f) ** GOTO lbl21
            if (var3_3 != CropImageView.RequestSizeOptions.RESIZE_FIT) break block8;
lbl21: // 2 sources:
            var9_5 = Bitmap.createScaledBitmap((Bitmap)var0, (int)((int)(var4_8 / var6_9)), (int)((int)(var5_10 / var6_9)), (boolean)false);
        }
        if (var9_5 == null) return var0;
        if (var9_5 == var0) return var9_5;
        try {
            var0.recycle();
            return var9_5;
        }
        catch (Exception var3_4) {
            Log.w((String)"AIC", (String)"Failed to resize cropped image, return bitmap before resize", (Throwable)var3_4);
        }
        return var0;
    }

    private static Bitmap rotateAndFlipBitmapInt(Bitmap bitmap, int n, boolean bl, boolean bl2) {
        if (n <= 0 && !bl && !bl2) {
            return bitmap;
        }
        Matrix matrix = new Matrix();
        matrix.setRotate((float)n);
        float f = 1.0f;
        float f2 = bl ? -1.0f : 1.0f;
        if (bl2) {
            f = -1.0f;
        }
        matrix.postScale(f2, f);
        matrix = Bitmap.createBitmap((Bitmap)bitmap, (int)0, (int)0, (int)bitmap.getWidth(), (int)bitmap.getHeight(), (Matrix)matrix, (boolean)false);
        if (matrix != bitmap) {
            bitmap.recycle();
        }
        return matrix;
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive exception aggregation
     */
    static RotateBitmapResult rotateBitmapByExif(Bitmap var0, Context var1_1, Uri var2_3) {
        block7 : {
            var2_7 = var1_1 /* !! */ .getContentResolver().openInputStream((Uri)var2_7);
            if (var2_7 == null) break block7;
            var1_2 = new ExifInterface(var2_7);
            try {
                var2_7.close();
            }
            catch (Exception var2_8) {
            }
        }
lbl9: // 2 sources:
        do {
            var1_4 = null;
lbl11: // 2 sources:
            do {
                if (var1_5 != null) {
                    return BitmapUtils.rotateBitmapByExif(var0, (ExifInterface)var1_5);
                }
                return new RotateBitmapResult(var0, 0);
                break;
            } while (true);
            break;
        } while (true);
        catch (Exception var1_6) {
            ** continue;
        }
        ** while (true)
    }

    static RotateBitmapResult rotateBitmapByExif(Bitmap bitmap, ExifInterface exifInterface) {
        int n = exifInterface.getAttributeInt("Orientation", 1);
        n = n != 3 ? (n != 6 ? (n != 8 ? 0 : 270) : 90) : 180;
        return new RotateBitmapResult(bitmap, n);
    }

    /*
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    static void writeBitmapToUri(Context object, Bitmap bitmap, Uri uri, Bitmap.CompressFormat compressFormat, int n) throws FileNotFoundException {
        void var1_4;
        block4 : {
            Object var5_8 = null;
            object = object.getContentResolver().openOutputStream(uri);
            try {
                bitmap.compress(compressFormat, n, (OutputStream)object);
            }
            catch (Throwable throwable) {
                break block4;
            }
            BitmapUtils.closeSafe((Closeable)object);
            return;
            catch (Throwable throwable) {
                object = var5_8;
            }
        }
        BitmapUtils.closeSafe((Closeable)object);
        throw var1_4;
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    static Uri writeTempStateStoreBitmap(Context var0, Bitmap var1_2, Uri var2_3) {
        var3_4 = true;
        if (var2_3 != null) ** GOTO lbl6
        try {
            block3 : {
                var4_5 = Uri.fromFile((File)File.createTempFile("aic_state_store_temp", ".jpg", var0.getCacheDir()));
                break block3;
lbl6: // 1 sources:
                var4_5 = var2_3;
                if (new File(var2_3.getPath()).exists()) {
                    var3_4 = false;
                    var4_5 = var2_3;
                }
            }
            if (var3_4 == false) return var4_5;
            BitmapUtils.writeBitmapToUri(var0, var1_2, var4_5, Bitmap.CompressFormat.JPEG, 95);
            return var4_5;
        }
        catch (Exception var0_1) {}
        Log.w((String)"AIC", (String)"Failed to write bitmap to temp file for image-cropper save instance state", (Throwable)var0_1);
        return null;
    }

    static final class BitmapSampled {
        public final Bitmap bitmap;
        final int sampleSize;

        BitmapSampled(Bitmap bitmap, int n) {
            this.bitmap = bitmap;
            this.sampleSize = n;
        }
    }

    static final class RotateBitmapResult {
        public final Bitmap bitmap;
        final int degrees;

        RotateBitmapResult(Bitmap bitmap, int n) {
            this.bitmap = bitmap;
            this.degrees = n;
        }
    }

}

