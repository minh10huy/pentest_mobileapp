/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.graphics.Matrix
 *  android.graphics.PointF
 *  android.graphics.RectF
 */
package com.theartofdev.edmodo.cropper;

import android.graphics.Matrix;
import android.graphics.PointF;
import android.graphics.RectF;
import com.theartofdev.edmodo.cropper.CropWindowHandler;

final class CropWindowMoveHandler {
    private static final Matrix MATRIX = new Matrix();
    private final float mMaxCropHeight;
    private final float mMaxCropWidth;
    private final float mMinCropHeight;
    private final float mMinCropWidth;
    private final PointF mTouchOffset = new PointF();
    private final Type mType;

    public CropWindowMoveHandler(Type type, CropWindowHandler cropWindowHandler, float f, float f2) {
        this.mType = type;
        this.mMinCropWidth = cropWindowHandler.getMinCropWidth();
        this.mMinCropHeight = cropWindowHandler.getMinCropHeight();
        this.mMaxCropWidth = cropWindowHandler.getMaxCropWidth();
        this.mMaxCropHeight = cropWindowHandler.getMaxCropHeight();
        this.calculateTouchOffset(cropWindowHandler.getRect(), f, f2);
    }

    private void adjustBottom(RectF rectF, float f, RectF rectF2, int n, float f2, float f3, boolean bl, boolean bl2) {
        PointF pointF;
        float f4 = n;
        float f5 = f;
        if (f > f4) {
            f5 = (f - f4) / 1.05f + f4;
            pointF = this.mTouchOffset;
            pointF.y -= (f5 - f4) / 1.1f;
        }
        if (f5 > rectF2.bottom) {
            pointF = this.mTouchOffset;
            pointF.y -= (f5 - rectF2.bottom) / 2.0f;
        }
        f = f5;
        if (rectF2.bottom - f5 < f2) {
            f = rectF2.bottom;
        }
        f5 = f;
        if (f - rectF.top < this.mMinCropHeight) {
            f5 = rectF.top + this.mMinCropHeight;
        }
        f4 = f5;
        if (f5 - rectF.top > this.mMaxCropHeight) {
            f4 = rectF.top + this.mMaxCropHeight;
        }
        f = f4;
        if (rectF2.bottom - f4 < f2) {
            f = rectF2.bottom;
        }
        f2 = f;
        if (f3 > 0.0f) {
            f2 = (f - rectF.top) * f3;
            f5 = f;
            f = f2;
            if (f2 < this.mMinCropWidth) {
                f5 = Math.min(rectF2.bottom, rectF.top + this.mMinCropWidth / f3);
                f = (f5 - rectF.top) * f3;
            }
            f2 = f;
            if (f > this.mMaxCropWidth) {
                f5 = Math.min(rectF2.bottom, rectF.top + this.mMaxCropWidth / f3);
                f2 = (f5 - rectF.top) * f3;
            }
            if (bl && bl2) {
                f2 = Math.min(f5, Math.min(rectF2.bottom, rectF.top + rectF2.width() / f3));
            } else {
                f = f5;
                f4 = f2;
                if (bl) {
                    f = f5;
                    f4 = f2;
                    if (rectF.right - f2 < rectF2.left) {
                        f = Math.min(rectF2.bottom, rectF.top + (rectF.right - rectF2.left) / f3);
                        f4 = (f - rectF.top) * f3;
                    }
                }
                f2 = f;
                if (bl2) {
                    f2 = f;
                    if (rectF.left + f4 > rectF2.right) {
                        f2 = Math.min(f, Math.min(rectF2.bottom, rectF.top + (rectF2.right - rectF.left) / f3));
                    }
                }
            }
        }
        rectF.bottom = f2;
    }

    private void adjustBottomByAspectRatio(RectF rectF, float f) {
        rectF.bottom = rectF.top + rectF.width() / f;
    }

    private void adjustLeft(RectF rectF, float f, RectF rectF2, float f2, float f3, boolean bl, boolean bl2) {
        PointF pointF;
        float f4 = f;
        if (f < 0.0f) {
            f4 = f / 1.05f;
            pointF = this.mTouchOffset;
            pointF.x -= f4 / 1.1f;
        }
        if (f4 < rectF2.left) {
            pointF = this.mTouchOffset;
            pointF.x -= (f4 - rectF2.left) / 2.0f;
        }
        f = f4;
        if (f4 - rectF2.left < f2) {
            f = rectF2.left;
        }
        f4 = f;
        if (rectF.right - f < this.mMinCropWidth) {
            f4 = rectF.right - this.mMinCropWidth;
        }
        float f5 = f4;
        if (rectF.right - f4 > this.mMaxCropWidth) {
            f5 = rectF.right - this.mMaxCropWidth;
        }
        f = f5;
        if (f5 - rectF2.left < f2) {
            f = rectF2.left;
        }
        f2 = f;
        if (f3 > 0.0f) {
            f2 = (rectF.right - f) / f3;
            f4 = f;
            f = f2;
            if (f2 < this.mMinCropHeight) {
                f4 = Math.max(rectF2.left, rectF.right - this.mMinCropHeight * f3);
                f = (rectF.right - f4) / f3;
            }
            f2 = f;
            if (f > this.mMaxCropHeight) {
                f4 = Math.max(rectF2.left, rectF.right - this.mMaxCropHeight * f3);
                f2 = (rectF.right - f4) / f3;
            }
            if (bl && bl2) {
                f2 = Math.max(f4, Math.max(rectF2.left, rectF.right - rectF2.height() * f3));
            } else {
                f = f4;
                f5 = f2;
                if (bl) {
                    f = f4;
                    f5 = f2;
                    if (rectF.bottom - f2 < rectF2.top) {
                        f = Math.max(rectF2.left, rectF.right - (rectF.bottom - rectF2.top) * f3);
                        f5 = (rectF.right - f) / f3;
                    }
                }
                f2 = f;
                if (bl2) {
                    f2 = f;
                    if (rectF.top + f5 > rectF2.bottom) {
                        f2 = Math.max(f, Math.max(rectF2.left, rectF.right - (rectF2.bottom - rectF.top) * f3));
                    }
                }
            }
        }
        rectF.left = f2;
    }

    private void adjustLeftByAspectRatio(RectF rectF, float f) {
        rectF.left = rectF.right - rectF.height() * f;
    }

    private void adjustLeftRightByAspectRatio(RectF rectF, RectF rectF2, float f) {
        rectF.inset((rectF.width() - rectF.height() * f) / 2.0f, 0.0f);
        if (rectF.left < rectF2.left) {
            rectF.offset(rectF2.left - rectF.left, 0.0f);
        }
        if (rectF.right > rectF2.right) {
            rectF.offset(rectF2.right - rectF.right, 0.0f);
        }
    }

    private void adjustRight(RectF rectF, float f, RectF rectF2, int n, float f2, float f3, boolean bl, boolean bl2) {
        PointF pointF;
        float f4 = n;
        float f5 = f;
        if (f > f4) {
            f5 = (f - f4) / 1.05f + f4;
            pointF = this.mTouchOffset;
            pointF.x -= (f5 - f4) / 1.1f;
        }
        if (f5 > rectF2.right) {
            pointF = this.mTouchOffset;
            pointF.x -= (f5 - rectF2.right) / 2.0f;
        }
        f = f5;
        if (rectF2.right - f5 < f2) {
            f = rectF2.right;
        }
        f5 = f;
        if (f - rectF.left < this.mMinCropWidth) {
            f5 = rectF.left + this.mMinCropWidth;
        }
        f4 = f5;
        if (f5 - rectF.left > this.mMaxCropWidth) {
            f4 = rectF.left + this.mMaxCropWidth;
        }
        f = f4;
        if (rectF2.right - f4 < f2) {
            f = rectF2.right;
        }
        f2 = f;
        if (f3 > 0.0f) {
            f2 = (f - rectF.left) / f3;
            f5 = f;
            f = f2;
            if (f2 < this.mMinCropHeight) {
                f5 = Math.min(rectF2.right, rectF.left + this.mMinCropHeight * f3);
                f = (f5 - rectF.left) / f3;
            }
            f2 = f;
            if (f > this.mMaxCropHeight) {
                f5 = Math.min(rectF2.right, rectF.left + this.mMaxCropHeight * f3);
                f2 = (f5 - rectF.left) / f3;
            }
            if (bl && bl2) {
                f2 = Math.min(f5, Math.min(rectF2.right, rectF.left + rectF2.height() * f3));
            } else {
                f = f5;
                f4 = f2;
                if (bl) {
                    f = f5;
                    f4 = f2;
                    if (rectF.bottom - f2 < rectF2.top) {
                        f = Math.min(rectF2.right, rectF.left + (rectF.bottom - rectF2.top) * f3);
                        f4 = (f - rectF.left) / f3;
                    }
                }
                f2 = f;
                if (bl2) {
                    f2 = f;
                    if (rectF.top + f4 > rectF2.bottom) {
                        f2 = Math.min(f, Math.min(rectF2.right, rectF.left + (rectF2.bottom - rectF.top) * f3));
                    }
                }
            }
        }
        rectF.right = f2;
    }

    private void adjustRightByAspectRatio(RectF rectF, float f) {
        rectF.right = rectF.left + rectF.height() * f;
    }

    private void adjustTop(RectF rectF, float f, RectF rectF2, float f2, float f3, boolean bl, boolean bl2) {
        PointF pointF;
        float f4 = f;
        if (f < 0.0f) {
            f4 = f / 1.05f;
            pointF = this.mTouchOffset;
            pointF.y -= f4 / 1.1f;
        }
        if (f4 < rectF2.top) {
            pointF = this.mTouchOffset;
            pointF.y -= (f4 - rectF2.top) / 2.0f;
        }
        f = f4;
        if (f4 - rectF2.top < f2) {
            f = rectF2.top;
        }
        f4 = f;
        if (rectF.bottom - f < this.mMinCropHeight) {
            f4 = rectF.bottom - this.mMinCropHeight;
        }
        float f5 = f4;
        if (rectF.bottom - f4 > this.mMaxCropHeight) {
            f5 = rectF.bottom - this.mMaxCropHeight;
        }
        f = f5;
        if (f5 - rectF2.top < f2) {
            f = rectF2.top;
        }
        f2 = f;
        if (f3 > 0.0f) {
            f2 = (rectF.bottom - f) * f3;
            f4 = f;
            f = f2;
            if (f2 < this.mMinCropWidth) {
                f4 = Math.max(rectF2.top, rectF.bottom - this.mMinCropWidth / f3);
                f = (rectF.bottom - f4) * f3;
            }
            f2 = f;
            if (f > this.mMaxCropWidth) {
                f4 = Math.max(rectF2.top, rectF.bottom - this.mMaxCropWidth / f3);
                f2 = (rectF.bottom - f4) * f3;
            }
            if (bl && bl2) {
                f2 = Math.max(f4, Math.max(rectF2.top, rectF.bottom - rectF2.width() / f3));
            } else {
                f = f4;
                f5 = f2;
                if (bl) {
                    f = f4;
                    f5 = f2;
                    if (rectF.right - f2 < rectF2.left) {
                        f = Math.max(rectF2.top, rectF.bottom - (rectF.right - rectF2.left) / f3);
                        f5 = (rectF.bottom - f) * f3;
                    }
                }
                f2 = f;
                if (bl2) {
                    f2 = f;
                    if (rectF.left + f5 > rectF2.right) {
                        f2 = Math.max(f, Math.max(rectF2.top, rectF.bottom - (rectF2.right - rectF.left) / f3));
                    }
                }
            }
        }
        rectF.top = f2;
    }

    private void adjustTopBottomByAspectRatio(RectF rectF, RectF rectF2, float f) {
        rectF.inset(0.0f, (rectF.height() - rectF.width() / f) / 2.0f);
        if (rectF.top < rectF2.top) {
            rectF.offset(0.0f, rectF2.top - rectF.top);
        }
        if (rectF.bottom > rectF2.bottom) {
            rectF.offset(0.0f, rectF2.bottom - rectF.bottom);
        }
    }

    private void adjustTopByAspectRatio(RectF rectF, float f) {
        rectF.top = rectF.bottom - rectF.width() / f;
    }

    private static float calculateAspectRatio(float f, float f2, float f3, float f4) {
        return (f3 - f) / (f4 - f2);
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Lifted jumps to return sites
     */
    private void calculateTouchOffset(RectF var1_1, float var2_2, float var3_3) {
        block11 : {
            var6_4 = .$SwitchMap$com$theartofdev$edmodo$cropper$CropWindowMoveHandler$Type[this.mType.ordinal()];
            var4_5 = 0.0f;
            var5_6 = 0.0f;
            switch (var6_4) {
                default: {
                    var3_3 = var5_6;
                    ** GOTO lbl28
                }
                case 9: {
                    var2_2 = var1_1.centerX() - var2_2;
                    var4_5 = var1_1.centerY() - var3_3;
                    var3_3 = var2_2;
                    var2_2 = var4_5;
                    break block11;
                }
                case 8: {
                    var2_2 = var1_1.bottom - var3_3;
                    var3_3 = var4_5;
                    break block11;
                }
                case 7: {
                    var2_2 = var1_1.right - var2_2;
                    ** GOTO lbl27
                }
                case 6: {
                    var2_2 = var1_1.top - var3_3;
                    var3_3 = var4_5;
                    break block11;
                }
                case 5: {
                    var2_2 = var1_1.left - var2_2;
lbl27: // 2 sources:
                    var3_3 = var2_2;
lbl28: // 2 sources:
                    var2_2 = 0.0f;
                    break block11;
                }
                case 4: {
                    var2_2 = var1_1.right - var2_2;
                    var4_5 = var1_1.bottom - var3_3;
                    var3_3 = var2_2;
                    var2_2 = var4_5;
                    break block11;
                }
                case 3: {
                    var2_2 = var1_1.left - var2_2;
                    var4_5 = var1_1.bottom - var3_3;
                    var3_3 = var2_2;
                    var2_2 = var4_5;
                    break block11;
                }
                case 2: {
                    var2_2 = var1_1.right - var2_2;
                    var4_5 = var1_1.top - var3_3;
                    var3_3 = var2_2;
                    var2_2 = var4_5;
                    break block11;
                }
                case 1: 
            }
            var4_5 = var1_1.left - var2_2;
            var2_2 = var1_1.top - var3_3;
            var3_3 = var4_5;
        }
        this.mTouchOffset.x = var3_3;
        this.mTouchOffset.y = var2_2;
    }

    private void moveCenter(RectF rectF, float f, float f2, RectF rectF2, int n, int n2, float f3) {
        block7 : {
            float f4;
            PointF pointF;
            block6 : {
                block5 : {
                    float f5;
                    block4 : {
                        f5 = f - rectF.centerX();
                        f4 = f2 - rectF.centerY();
                        if (rectF.left + f5 < 0.0f || rectF.right + f5 > (float)n || rectF.left + f5 < rectF2.left) break block4;
                        f = f5;
                        if (rectF.right + f5 <= rectF2.right) break block5;
                    }
                    f = f5 / 1.05f;
                    pointF = this.mTouchOffset;
                    pointF.x -= f / 2.0f;
                }
                if (rectF.top + f4 < 0.0f || rectF.bottom + f4 > (float)n2 || rectF.top + f4 < rectF2.top) break block6;
                f2 = f4;
                if (rectF.bottom + f4 <= rectF2.bottom) break block7;
            }
            f2 = f4 / 1.05f;
            pointF = this.mTouchOffset;
            pointF.y -= f2 / 2.0f;
        }
        rectF.offset(f, f2);
        this.snapEdgesToBounds(rectF, rectF2, f3);
    }

    private void moveSizeWithFixedAspectRatio(RectF rectF, float f, float f2, RectF rectF2, int n, int n2, float f3, float f4) {
        switch (.$SwitchMap$com$theartofdev$edmodo$cropper$CropWindowMoveHandler$Type[this.mType.ordinal()]) {
            default: {
                return;
            }
            case 8: {
                this.adjustBottom(rectF, f2, rectF2, n2, f3, f4, true, true);
                this.adjustLeftRightByAspectRatio(rectF, rectF2, f4);
                return;
            }
            case 7: {
                this.adjustRight(rectF, f, rectF2, n, f3, f4, true, true);
                this.adjustTopBottomByAspectRatio(rectF, rectF2, f4);
                return;
            }
            case 6: {
                this.adjustTop(rectF, f2, rectF2, f3, f4, true, true);
                this.adjustLeftRightByAspectRatio(rectF, rectF2, f4);
                return;
            }
            case 5: {
                this.adjustLeft(rectF, f, rectF2, f3, f4, true, true);
                this.adjustTopBottomByAspectRatio(rectF, rectF2, f4);
                return;
            }
            case 4: {
                if (CropWindowMoveHandler.calculateAspectRatio(rectF.left, rectF.top, f, f2) < f4) {
                    this.adjustBottom(rectF, f2, rectF2, n2, f3, f4, false, true);
                    this.adjustRightByAspectRatio(rectF, f4);
                    return;
                }
                this.adjustRight(rectF, f, rectF2, n, f3, f4, false, true);
                this.adjustBottomByAspectRatio(rectF, f4);
                return;
            }
            case 3: {
                if (CropWindowMoveHandler.calculateAspectRatio(f, rectF.top, rectF.right, f2) < f4) {
                    this.adjustBottom(rectF, f2, rectF2, n2, f3, f4, true, false);
                    this.adjustLeftByAspectRatio(rectF, f4);
                    return;
                }
                this.adjustLeft(rectF, f, rectF2, f3, f4, false, true);
                this.adjustBottomByAspectRatio(rectF, f4);
                return;
            }
            case 2: {
                if (CropWindowMoveHandler.calculateAspectRatio(rectF.left, f2, f, rectF.bottom) < f4) {
                    this.adjustTop(rectF, f2, rectF2, f3, f4, false, true);
                    this.adjustRightByAspectRatio(rectF, f4);
                    return;
                }
                this.adjustRight(rectF, f, rectF2, n, f3, f4, true, false);
                this.adjustTopByAspectRatio(rectF, f4);
                return;
            }
            case 1: 
        }
        if (CropWindowMoveHandler.calculateAspectRatio(f, f2, rectF.right, rectF.bottom) < f4) {
            this.adjustTop(rectF, f2, rectF2, f3, f4, true, false);
            this.adjustLeftByAspectRatio(rectF, f4);
            return;
        }
        this.adjustLeft(rectF, f, rectF2, f3, f4, true, false);
        this.adjustTopByAspectRatio(rectF, f4);
    }

    private void moveSizeWithFreeAspectRatio(RectF rectF, float f, float f2, RectF rectF2, int n, int n2, float f3) {
        switch (.$SwitchMap$com$theartofdev$edmodo$cropper$CropWindowMoveHandler$Type[this.mType.ordinal()]) {
            default: {
                return;
            }
            case 8: {
                this.adjustBottom(rectF, f2, rectF2, n2, f3, 0.0f, false, false);
                return;
            }
            case 7: {
                this.adjustRight(rectF, f, rectF2, n, f3, 0.0f, false, false);
                return;
            }
            case 6: {
                this.adjustTop(rectF, f2, rectF2, f3, 0.0f, false, false);
                return;
            }
            case 5: {
                this.adjustLeft(rectF, f, rectF2, f3, 0.0f, false, false);
                return;
            }
            case 4: {
                this.adjustBottom(rectF, f2, rectF2, n2, f3, 0.0f, false, false);
                this.adjustRight(rectF, f, rectF2, n, f3, 0.0f, false, false);
                return;
            }
            case 3: {
                this.adjustBottom(rectF, f2, rectF2, n2, f3, 0.0f, false, false);
                this.adjustLeft(rectF, f, rectF2, f3, 0.0f, false, false);
                return;
            }
            case 2: {
                this.adjustTop(rectF, f2, rectF2, f3, 0.0f, false, false);
                this.adjustRight(rectF, f, rectF2, n, f3, 0.0f, false, false);
                return;
            }
            case 1: 
        }
        this.adjustTop(rectF, f2, rectF2, f3, 0.0f, false, false);
        this.adjustLeft(rectF, f, rectF2, f3, 0.0f, false, false);
    }

    private void snapEdgesToBounds(RectF rectF, RectF rectF2, float f) {
        if (rectF.left < rectF2.left + f) {
            rectF.offset(rectF2.left - rectF.left, 0.0f);
        }
        if (rectF.top < rectF2.top + f) {
            rectF.offset(0.0f, rectF2.top - rectF.top);
        }
        if (rectF.right > rectF2.right - f) {
            rectF.offset(rectF2.right - rectF.right, 0.0f);
        }
        if (rectF.bottom > rectF2.bottom - f) {
            rectF.offset(0.0f, rectF2.bottom - rectF.bottom);
        }
    }

    public void move(RectF rectF, float f, float f2, RectF rectF2, int n, int n2, float f3, boolean bl, float f4) {
        f += this.mTouchOffset.x;
        f2 += this.mTouchOffset.y;
        if (this.mType == Type.CENTER) {
            this.moveCenter(rectF, f, f2, rectF2, n, n2, f3);
            return;
        }
        if (bl) {
            this.moveSizeWithFixedAspectRatio(rectF, f, f2, rectF2, n, n2, f3, f4);
            return;
        }
        this.moveSizeWithFreeAspectRatio(rectF, f, f2, rectF2, n, n2, f3);
    }

    public static enum Type {
        TOP_LEFT,
        TOP_RIGHT,
        BOTTOM_LEFT,
        BOTTOM_RIGHT,
        LEFT,
        TOP,
        RIGHT,
        BOTTOM,
        CENTER;
        

        private Type() {
        }
    }

}

