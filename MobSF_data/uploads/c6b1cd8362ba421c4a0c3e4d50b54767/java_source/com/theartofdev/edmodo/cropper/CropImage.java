/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.app.Activity
 *  android.app.Fragment
 *  android.content.ComponentName
 *  android.content.ContentResolver
 *  android.content.Context
 *  android.content.Intent
 *  android.content.pm.ActivityInfo
 *  android.content.pm.PackageInfo
 *  android.content.pm.PackageManager
 *  android.content.pm.PackageManager$NameNotFoundException
 *  android.content.pm.ResolveInfo
 *  android.graphics.Bitmap
 *  android.graphics.Bitmap$CompressFormat
 *  android.graphics.Bitmap$Config
 *  android.graphics.Canvas
 *  android.graphics.Paint
 *  android.graphics.PorterDuff
 *  android.graphics.PorterDuff$Mode
 *  android.graphics.PorterDuffXfermode
 *  android.graphics.Rect
 *  android.graphics.RectF
 *  android.graphics.Xfermode
 *  android.net.Uri
 *  android.os.Build
 *  android.os.Build$VERSION
 *  android.os.Bundle
 *  android.os.Parcel
 *  android.os.Parcelable
 *  android.os.Parcelable$Creator
 *  android.provider.MediaStore
 *  android.provider.MediaStore$Images
 *  android.provider.MediaStore$Images$Media
 */
package com.theartofdev.edmodo.cropper;

import android.app.Activity;
import android.app.Fragment;
import android.content.ComponentName;
import android.content.ContentResolver;
import android.content.Context;
import android.content.Intent;
import android.content.pm.ActivityInfo;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.pm.ResolveInfo;
import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.Paint;
import android.graphics.PorterDuff;
import android.graphics.PorterDuffXfermode;
import android.graphics.Rect;
import android.graphics.RectF;
import android.graphics.Xfermode;
import android.net.Uri;
import android.os.Build;
import android.os.Bundle;
import android.os.Parcel;
import android.os.Parcelable;
import android.provider.MediaStore;
import android.support.annotation.DrawableRes;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.annotation.RequiresApi;
import com.theartofdev.edmodo.cropper.CropImageActivity;
import com.theartofdev.edmodo.cropper.CropImageOptions;
import com.theartofdev.edmodo.cropper.CropImageView;
import com.theartofdev.edmodo.cropper.R;
import java.io.File;
import java.io.InputStream;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

public final class CropImage {
    public static final int CAMERA_CAPTURE_PERMISSIONS_REQUEST_CODE = 2011;
    public static final int CROP_IMAGE_ACTIVITY_REQUEST_CODE = 203;
    public static final int CROP_IMAGE_ACTIVITY_RESULT_ERROR_CODE = 204;
    public static final String CROP_IMAGE_EXTRA_BUNDLE = "CROP_IMAGE_EXTRA_BUNDLE";
    public static final String CROP_IMAGE_EXTRA_OPTIONS = "CROP_IMAGE_EXTRA_OPTIONS";
    public static final String CROP_IMAGE_EXTRA_RESULT = "CROP_IMAGE_EXTRA_RESULT";
    public static final String CROP_IMAGE_EXTRA_SOURCE = "CROP_IMAGE_EXTRA_SOURCE";
    public static final int PICK_IMAGE_CHOOSER_REQUEST_CODE = 200;
    public static final int PICK_IMAGE_PERMISSIONS_REQUEST_CODE = 201;

    private CropImage() {
    }

    public static ActivityBuilder activity() {
        return new ActivityBuilder(null);
    }

    public static ActivityBuilder activity(@Nullable Uri uri) {
        return new ActivityBuilder(uri);
    }

    public static ActivityResult getActivityResult(@Nullable Intent intent) {
        if (intent != null) {
            return (ActivityResult)intent.getParcelableExtra(CROP_IMAGE_EXTRA_RESULT);
        }
        return null;
    }

    public static Intent getCameraIntent(@NonNull Context context, Uri uri) {
        Intent intent = new Intent("android.media.action.IMAGE_CAPTURE");
        Uri uri2 = uri;
        if (uri == null) {
            uri2 = CropImage.getCaptureImageOutputUri(context);
        }
        intent.putExtra("output", (Parcelable)uri2);
        return intent;
    }

    public static List<Intent> getCameraIntents(@NonNull Context context, @NonNull PackageManager object) {
        ArrayList<Intent> arrayList = new ArrayList<Intent>();
        context = CropImage.getCaptureImageOutputUri(context);
        Intent intent = new Intent("android.media.action.IMAGE_CAPTURE");
        for (ResolveInfo resolveInfo : object.queryIntentActivities(intent, 0)) {
            Intent intent2 = new Intent(intent);
            intent2.setComponent(new ComponentName(resolveInfo.activityInfo.packageName, resolveInfo.activityInfo.name));
            intent2.setPackage(resolveInfo.activityInfo.packageName);
            if (context != null) {
                intent2.putExtra("output", (Parcelable)context);
            }
            arrayList.add(intent2);
        }
        return arrayList;
    }

    public static Uri getCaptureImageOutputUri(@NonNull Context object) {
        if ((object = object.getExternalCacheDir()) != null) {
            return Uri.fromFile((File)new File(object.getPath(), "pickImageResult.jpeg"));
        }
        return null;
    }

    public static List<Intent> getGalleryIntents(@NonNull PackageManager object, String string22, boolean bl) {
        void var1_4;
        void var2_7;
        ArrayList<Intent> arrayList = new ArrayList<Intent>();
        if (string22 == "android.intent.action.GET_CONTENT") {
            Intent intent = new Intent(string22);
        } else {
            Intent intent = new Intent(string22, MediaStore.Images.Media.EXTERNAL_CONTENT_URI);
        }
        var1_4.setType("image/*");
        for (ResolveInfo resolveInfo : object.queryIntentActivities((Intent)var1_4, 0)) {
            Intent intent = new Intent((Intent)var1_4);
            intent.setComponent(new ComponentName(resolveInfo.activityInfo.packageName, resolveInfo.activityInfo.name));
            intent.setPackage(resolveInfo.activityInfo.packageName);
            arrayList.add(intent);
        }
        if (var2_7 == false) {
            for (Intent intent : arrayList) {
                if (!intent.getComponent().getClassName().equals("com.android.documentsui.DocumentsActivity")) continue;
                arrayList.remove((Object)intent);
                break;
            }
        }
        return arrayList;
    }

    public static Intent getPickImageChooserIntent(@NonNull Context context) {
        return CropImage.getPickImageChooserIntent(context, context.getString(R.string.pick_image_intent_chooser_title), false, true);
    }

    public static Intent getPickImageChooserIntent(@NonNull Context object, CharSequence charSequence, boolean bl, boolean bl2) {
        ArrayList<Intent> arrayList = new ArrayList<Intent>();
        PackageManager packageManager = object.getPackageManager();
        if (!CropImage.isExplicitCameraPermissionRequired(object) && bl2) {
            arrayList.addAll(CropImage.getCameraIntents(object, packageManager));
        }
        List<Intent> list = CropImage.getGalleryIntents(packageManager, "android.intent.action.GET_CONTENT", bl);
        object = list;
        if (list.size() == 0) {
            object = CropImage.getGalleryIntents(packageManager, "android.intent.action.PICK", bl);
        }
        arrayList.addAll((Collection<Intent>)object);
        if (arrayList.isEmpty()) {
            object = new Intent();
        } else {
            object = (Intent)arrayList.get(arrayList.size() - 1);
            arrayList.remove(arrayList.size() - 1);
        }
        object = Intent.createChooser((Intent)object, (CharSequence)charSequence);
        object.putExtra("android.intent.extra.INITIAL_INTENTS", arrayList.toArray((T[])new Parcelable[arrayList.size()]));
        return object;
    }

    public static Uri getPickImageResultUri(@NonNull Context context, @Nullable Intent intent) {
        boolean bl;
        boolean bl2 = bl = true;
        if (intent != null) {
            bl2 = bl;
            if (intent.getData() != null) {
                String string2 = intent.getAction();
                bl2 = string2 != null && string2.equals("android.media.action.IMAGE_CAPTURE") ? bl : false;
            }
        }
        if (!bl2 && intent.getData() != null) {
            return intent.getData();
        }
        return CropImage.getCaptureImageOutputUri(context);
    }

    public static boolean hasPermissionInManifest(@NonNull Context arrstring, @NonNull String string2) {
        block5 : {
            int n;
            String string3 = arrstring.getPackageName();
            arrstring = arrstring.getPackageManager().getPackageInfo((String)string3, (int)4096).requestedPermissions;
            if (arrstring == null) break block5;
            try {
                if (arrstring.length <= 0) break block5;
                n = arrstring.length;
            }
            catch (PackageManager.NameNotFoundException nameNotFoundException) {
                return false;
            }
            for (int i = 0; i < n; ++i) {
                boolean bl = arrstring[i].equalsIgnoreCase(string2);
                if (!bl) continue;
                return true;
            }
        }
        return false;
    }

    public static boolean isExplicitCameraPermissionRequired(@NonNull Context context) {
        if (Build.VERSION.SDK_INT >= 23 && CropImage.hasPermissionInManifest(context, "android.permission.CAMERA") && context.checkSelfPermission("android.permission.CAMERA") != 0) {
            return true;
        }
        return false;
    }

    public static boolean isReadExternalStoragePermissionsRequired(@NonNull Context context, @NonNull Uri uri) {
        if (Build.VERSION.SDK_INT >= 23 && context.checkSelfPermission("android.permission.READ_EXTERNAL_STORAGE") != 0 && CropImage.isUriRequiresPermissions(context, uri)) {
            return true;
        }
        return false;
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    public static boolean isUriRequiresPermissions(@NonNull Context object, @NonNull Uri uri) {
        try {
            object = object.getContentResolver().openInputStream(uri);
            if (object == null) return false;
        }
        catch (Exception exception) {
            return true;
        }
        object.close();
        return false;
    }

    public static void startPickImageActivity(@NonNull Activity activity) {
        activity.startActivityForResult(CropImage.getPickImageChooserIntent((Context)activity), 200);
    }

    public static void startPickImageActivity(@NonNull Context context, @NonNull android.support.v4.app.Fragment fragment) {
        fragment.startActivityForResult(CropImage.getPickImageChooserIntent(context), 200);
    }

    public static Bitmap toOvalBitmap(@NonNull Bitmap bitmap) {
        int n = bitmap.getWidth();
        int n2 = bitmap.getHeight();
        Bitmap bitmap2 = Bitmap.createBitmap((int)n, (int)n2, (Bitmap.Config)Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(bitmap2);
        Paint paint = new Paint();
        paint.setAntiAlias(true);
        canvas.drawARGB(0, 0, 0, 0);
        paint.setColor(-12434878);
        canvas.drawOval(new RectF(0.0f, 0.0f, (float)n, (float)n2), paint);
        paint.setXfermode((Xfermode)new PorterDuffXfermode(PorterDuff.Mode.SRC_IN));
        canvas.drawBitmap(bitmap, 0.0f, 0.0f, paint);
        bitmap.recycle();
        return bitmap2;
    }

    public static final class ActivityBuilder {
        private final CropImageOptions mOptions;
        @Nullable
        private final Uri mSource;

        private ActivityBuilder(@Nullable Uri uri) {
            this.mSource = uri;
            this.mOptions = new CropImageOptions();
        }

        public Intent getIntent(@NonNull Context context) {
            return this.getIntent(context, CropImageActivity.class);
        }

        public Intent getIntent(@NonNull Context context, @Nullable Class<?> class_) {
            this.mOptions.validate();
            Intent intent = new Intent();
            intent.setClass(context, class_);
            context = new Bundle();
            context.putParcelable(CropImage.CROP_IMAGE_EXTRA_SOURCE, (Parcelable)this.mSource);
            context.putParcelable(CropImage.CROP_IMAGE_EXTRA_OPTIONS, (Parcelable)this.mOptions);
            intent.putExtra(CropImage.CROP_IMAGE_EXTRA_BUNDLE, (Bundle)context);
            return intent;
        }

        public ActivityBuilder setActivityMenuIconColor(int n) {
            this.mOptions.activityMenuIconColor = n;
            return this;
        }

        public ActivityBuilder setActivityTitle(CharSequence charSequence) {
            this.mOptions.activityTitle = charSequence;
            return this;
        }

        public ActivityBuilder setAllowCounterRotation(boolean bl) {
            this.mOptions.allowCounterRotation = bl;
            return this;
        }

        public ActivityBuilder setAllowFlipping(boolean bl) {
            this.mOptions.allowFlipping = bl;
            return this;
        }

        public ActivityBuilder setAllowRotation(boolean bl) {
            this.mOptions.allowRotation = bl;
            return this;
        }

        public ActivityBuilder setAspectRatio(int n, int n2) {
            this.mOptions.aspectRatioX = n;
            this.mOptions.aspectRatioY = n2;
            this.mOptions.fixAspectRatio = true;
            return this;
        }

        public ActivityBuilder setAutoZoomEnabled(boolean bl) {
            this.mOptions.autoZoomEnabled = bl;
            return this;
        }

        public ActivityBuilder setBackgroundColor(int n) {
            this.mOptions.backgroundColor = n;
            return this;
        }

        public ActivityBuilder setBorderCornerColor(int n) {
            this.mOptions.borderCornerColor = n;
            return this;
        }

        public ActivityBuilder setBorderCornerLength(float f) {
            this.mOptions.borderCornerLength = f;
            return this;
        }

        public ActivityBuilder setBorderCornerOffset(float f) {
            this.mOptions.borderCornerOffset = f;
            return this;
        }

        public ActivityBuilder setBorderCornerThickness(float f) {
            this.mOptions.borderCornerThickness = f;
            return this;
        }

        public ActivityBuilder setBorderLineColor(int n) {
            this.mOptions.borderLineColor = n;
            return this;
        }

        public ActivityBuilder setBorderLineThickness(float f) {
            this.mOptions.borderLineThickness = f;
            return this;
        }

        public ActivityBuilder setCropMenuCropButtonIcon(@DrawableRes int n) {
            this.mOptions.cropMenuCropButtonIcon = n;
            return this;
        }

        public ActivityBuilder setCropMenuCropButtonTitle(CharSequence charSequence) {
            this.mOptions.cropMenuCropButtonTitle = charSequence;
            return this;
        }

        public ActivityBuilder setCropShape(@NonNull CropImageView.CropShape cropShape) {
            this.mOptions.cropShape = cropShape;
            return this;
        }

        public ActivityBuilder setFixAspectRatio(boolean bl) {
            this.mOptions.fixAspectRatio = bl;
            return this;
        }

        public ActivityBuilder setFlipHorizontally(boolean bl) {
            this.mOptions.flipHorizontally = bl;
            return this;
        }

        public ActivityBuilder setFlipVertically(boolean bl) {
            this.mOptions.flipVertically = bl;
            return this;
        }

        public ActivityBuilder setGuidelines(@NonNull CropImageView.Guidelines guidelines) {
            this.mOptions.guidelines = guidelines;
            return this;
        }

        public ActivityBuilder setGuidelinesColor(int n) {
            this.mOptions.guidelinesColor = n;
            return this;
        }

        public ActivityBuilder setGuidelinesThickness(float f) {
            this.mOptions.guidelinesThickness = f;
            return this;
        }

        public ActivityBuilder setInitialCropWindowPaddingRatio(float f) {
            this.mOptions.initialCropWindowPaddingRatio = f;
            return this;
        }

        public ActivityBuilder setInitialCropWindowRectangle(Rect rect) {
            this.mOptions.initialCropWindowRectangle = rect;
            return this;
        }

        public ActivityBuilder setInitialRotation(int n) {
            this.mOptions.initialRotation = (n + 360) % 360;
            return this;
        }

        public ActivityBuilder setMaxCropResultSize(int n, int n2) {
            this.mOptions.maxCropResultWidth = n;
            this.mOptions.maxCropResultHeight = n2;
            return this;
        }

        public ActivityBuilder setMaxZoom(int n) {
            this.mOptions.maxZoom = n;
            return this;
        }

        public ActivityBuilder setMinCropResultSize(int n, int n2) {
            this.mOptions.minCropResultWidth = n;
            this.mOptions.minCropResultHeight = n2;
            return this;
        }

        public ActivityBuilder setMinCropWindowSize(int n, int n2) {
            this.mOptions.minCropWindowWidth = n;
            this.mOptions.minCropWindowHeight = n2;
            return this;
        }

        public ActivityBuilder setMultiTouchEnabled(boolean bl) {
            this.mOptions.multiTouchEnabled = bl;
            return this;
        }

        public ActivityBuilder setNoOutputImage(boolean bl) {
            this.mOptions.noOutputImage = bl;
            return this;
        }

        public ActivityBuilder setOutputCompressFormat(Bitmap.CompressFormat compressFormat) {
            this.mOptions.outputCompressFormat = compressFormat;
            return this;
        }

        public ActivityBuilder setOutputCompressQuality(int n) {
            this.mOptions.outputCompressQuality = n;
            return this;
        }

        public ActivityBuilder setOutputUri(Uri uri) {
            this.mOptions.outputUri = uri;
            return this;
        }

        public ActivityBuilder setRequestedSize(int n, int n2) {
            return this.setRequestedSize(n, n2, CropImageView.RequestSizeOptions.RESIZE_INSIDE);
        }

        public ActivityBuilder setRequestedSize(int n, int n2, CropImageView.RequestSizeOptions requestSizeOptions) {
            this.mOptions.outputRequestWidth = n;
            this.mOptions.outputRequestHeight = n2;
            this.mOptions.outputRequestSizeOptions = requestSizeOptions;
            return this;
        }

        public ActivityBuilder setRotationDegrees(int n) {
            this.mOptions.rotationDegrees = (n + 360) % 360;
            return this;
        }

        public ActivityBuilder setScaleType(@NonNull CropImageView.ScaleType scaleType) {
            this.mOptions.scaleType = scaleType;
            return this;
        }

        public ActivityBuilder setShowCropOverlay(boolean bl) {
            this.mOptions.showCropOverlay = bl;
            return this;
        }

        public ActivityBuilder setSnapRadius(float f) {
            this.mOptions.snapRadius = f;
            return this;
        }

        public ActivityBuilder setTouchRadius(float f) {
            this.mOptions.touchRadius = f;
            return this;
        }

        public void start(@NonNull Activity activity) {
            this.mOptions.validate();
            activity.startActivityForResult(this.getIntent((Context)activity), 203);
        }

        public void start(@NonNull Activity activity, @Nullable Class<?> class_) {
            this.mOptions.validate();
            activity.startActivityForResult(this.getIntent((Context)activity, class_), 203);
        }

        @RequiresApi(api=11)
        public void start(@NonNull Context context, @NonNull Fragment fragment) {
            fragment.startActivityForResult(this.getIntent(context), 203);
        }

        @RequiresApi(api=11)
        public void start(@NonNull Context context, @NonNull Fragment fragment, @Nullable Class<?> class_) {
            fragment.startActivityForResult(this.getIntent(context, class_), 203);
        }

        public void start(@NonNull Context context, @NonNull android.support.v4.app.Fragment fragment) {
            fragment.startActivityForResult(this.getIntent(context), 203);
        }

        public void start(@NonNull Context context, @NonNull android.support.v4.app.Fragment fragment, @Nullable Class<?> class_) {
            fragment.startActivityForResult(this.getIntent(context, class_), 203);
        }
    }

    public static final class ActivityResult
    extends CropImageView.CropResult
    implements Parcelable {
        public static final Parcelable.Creator<ActivityResult> CREATOR = new Parcelable.Creator<ActivityResult>(){

            public ActivityResult createFromParcel(Parcel parcel) {
                return new ActivityResult(parcel);
            }

            public ActivityResult[] newArray(int n) {
                return new ActivityResult[n];
            }
        };

        public ActivityResult(Uri uri, Uri uri2, Exception exception, float[] arrf, Rect rect, int n, Rect rect2, int n2) {
            super(null, uri, null, uri2, exception, arrf, rect, rect2, n, n2);
        }

        protected ActivityResult(Parcel parcel) {
            super(null, (Uri)parcel.readParcelable(Uri.class.getClassLoader()), null, (Uri)parcel.readParcelable(Uri.class.getClassLoader()), (Exception)parcel.readSerializable(), parcel.createFloatArray(), (Rect)parcel.readParcelable(Rect.class.getClassLoader()), (Rect)parcel.readParcelable(Rect.class.getClassLoader()), parcel.readInt(), parcel.readInt());
        }

        public int describeContents() {
            return 0;
        }

        public void writeToParcel(Parcel parcel, int n) {
            parcel.writeParcelable((Parcelable)this.getOriginalUri(), n);
            parcel.writeParcelable((Parcelable)this.getUri(), n);
            parcel.writeSerializable((Serializable)this.getError());
            parcel.writeFloatArray(this.getCropPoints());
            parcel.writeParcelable((Parcelable)this.getCropRect(), n);
            parcel.writeParcelable((Parcelable)this.getWholeImageRect(), n);
            parcel.writeInt(this.getRotation());
            parcel.writeInt(this.getSampleSize());
        }

    }

}

