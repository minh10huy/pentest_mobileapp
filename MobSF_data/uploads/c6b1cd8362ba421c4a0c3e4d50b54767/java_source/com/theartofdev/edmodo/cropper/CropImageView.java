/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.app.Activity
 *  android.content.Context
 *  android.content.Intent
 *  android.content.res.Resources
 *  android.content.res.TypedArray
 *  android.graphics.Bitmap
 *  android.graphics.Bitmap$CompressFormat
 *  android.graphics.BitmapFactory
 *  android.graphics.Matrix
 *  android.graphics.Rect
 *  android.graphics.RectF
 *  android.net.Uri
 *  android.os.AsyncTask
 *  android.os.Bundle
 *  android.os.Parcelable
 *  android.util.AttributeSet
 *  android.util.Pair
 *  android.view.LayoutInflater
 *  android.view.View
 *  android.view.View$MeasureSpec
 *  android.view.ViewGroup
 *  android.view.ViewGroup$LayoutParams
 *  android.view.animation.Animation
 *  android.widget.FrameLayout
 *  android.widget.ImageView
 *  android.widget.ImageView$ScaleType
 *  android.widget.ProgressBar
 */
package com.theartofdev.edmodo.cropper;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.content.res.Resources;
import android.content.res.TypedArray;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Matrix;
import android.graphics.Rect;
import android.graphics.RectF;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Parcelable;
import android.support.media.ExifInterface;
import android.util.AttributeSet;
import android.util.Pair;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.view.animation.Animation;
import android.widget.FrameLayout;
import android.widget.ImageView;
import android.widget.ProgressBar;
import com.theartofdev.edmodo.cropper.BitmapCroppingWorkerTask;
import com.theartofdev.edmodo.cropper.BitmapLoadingWorkerTask;
import com.theartofdev.edmodo.cropper.BitmapUtils;
import com.theartofdev.edmodo.cropper.CropImageAnimation;
import com.theartofdev.edmodo.cropper.CropImageOptions;
import com.theartofdev.edmodo.cropper.CropOverlayView;
import com.theartofdev.edmodo.cropper.R;
import java.lang.ref.WeakReference;
import java.util.UUID;
import java.util.concurrent.Executor;

public class CropImageView
extends FrameLayout {
    private CropImageAnimation mAnimation;
    private boolean mAutoZoomEnabled;
    private Bitmap mBitmap;
    private WeakReference<BitmapCroppingWorkerTask> mBitmapCroppingWorkerTask;
    private WeakReference<BitmapLoadingWorkerTask> mBitmapLoadingWorkerTask;
    private final CropOverlayView mCropOverlayView;
    private int mDegreesRotated;
    private boolean mFlipHorizontally;
    private boolean mFlipVertically;
    private final Matrix mImageInverseMatrix;
    private final Matrix mImageMatrix;
    private final float[] mImagePoints;
    private int mImageResource;
    private final ImageView mImageView;
    private int mInitialDegreesRotated;
    private int mLayoutHeight;
    private int mLayoutWidth;
    private Uri mLoadedImageUri;
    private int mLoadedSampleSize;
    private int mMaxZoom;
    private OnCropImageCompleteListener mOnCropImageCompleteListener;
    private OnSetCropOverlayReleasedListener mOnCropOverlayReleasedListener;
    private OnSetCropOverlayMovedListener mOnSetCropOverlayMovedListener;
    private OnSetCropWindowChangeListener mOnSetCropWindowChangeListener;
    private OnSetImageUriCompleteListener mOnSetImageUriCompleteListener;
    private final ProgressBar mProgressBar;
    private RectF mRestoreCropWindowRect;
    private int mRestoreDegreesRotated;
    private boolean mSaveBitmapToInstanceState;
    private Uri mSaveInstanceStateBitmapUri;
    private final float[] mScaleImagePoints;
    private ScaleType mScaleType;
    private boolean mShowCropOverlay;
    private boolean mShowProgressBar;
    private boolean mSizeChanged;
    private float mZoom;
    private float mZoomOffsetX;
    private float mZoomOffsetY;

    public CropImageView(Context context) {
        this(context, null);
    }

    public CropImageView(Context context, AttributeSet attributeSet) {
        Object object;
        super(context, attributeSet);
        this.mImageMatrix = new Matrix();
        this.mImageInverseMatrix = new Matrix();
        this.mImagePoints = new float[8];
        this.mScaleImagePoints = new float[8];
        this.mSaveBitmapToInstanceState = false;
        this.mShowCropOverlay = true;
        this.mShowProgressBar = true;
        this.mAutoZoomEnabled = true;
        this.mLoadedSampleSize = 1;
        this.mZoom = 1.0f;
        boolean bl = context instanceof Activity;
        CropImageOptions cropImageOptions = null;
        object = bl ? ((Activity)context).getIntent() : null;
        CropImageOptions cropImageOptions2 = cropImageOptions;
        if (object != null) {
            object = object.getBundleExtra("CROP_IMAGE_EXTRA_BUNDLE");
            cropImageOptions2 = cropImageOptions;
            if (object != null) {
                cropImageOptions2 = (CropImageOptions)object.getParcelable("CROP_IMAGE_EXTRA_OPTIONS");
            }
        }
        object = cropImageOptions2;
        if (cropImageOptions2 == null) {
            cropImageOptions2 = new CropImageOptions();
            object = cropImageOptions2;
            if (attributeSet != null) {
                attributeSet = context.obtainStyledAttributes(attributeSet, R.styleable.CropImageView, 0, 0);
                try {
                    cropImageOptions2.fixAspectRatio = attributeSet.getBoolean(R.styleable.CropImageView_cropFixAspectRatio, cropImageOptions2.fixAspectRatio);
                    cropImageOptions2.aspectRatioX = attributeSet.getInteger(R.styleable.CropImageView_cropAspectRatioX, cropImageOptions2.aspectRatioX);
                    cropImageOptions2.aspectRatioY = attributeSet.getInteger(R.styleable.CropImageView_cropAspectRatioY, cropImageOptions2.aspectRatioY);
                    cropImageOptions2.scaleType = ScaleType.values()[attributeSet.getInt(R.styleable.CropImageView_cropScaleType, cropImageOptions2.scaleType.ordinal())];
                    cropImageOptions2.autoZoomEnabled = attributeSet.getBoolean(R.styleable.CropImageView_cropAutoZoomEnabled, cropImageOptions2.autoZoomEnabled);
                    cropImageOptions2.multiTouchEnabled = attributeSet.getBoolean(R.styleable.CropImageView_cropMultiTouchEnabled, cropImageOptions2.multiTouchEnabled);
                    cropImageOptions2.maxZoom = attributeSet.getInteger(R.styleable.CropImageView_cropMaxZoom, cropImageOptions2.maxZoom);
                    cropImageOptions2.cropShape = CropShape.values()[attributeSet.getInt(R.styleable.CropImageView_cropShape, cropImageOptions2.cropShape.ordinal())];
                    cropImageOptions2.guidelines = Guidelines.values()[attributeSet.getInt(R.styleable.CropImageView_cropGuidelines, cropImageOptions2.guidelines.ordinal())];
                    cropImageOptions2.snapRadius = attributeSet.getDimension(R.styleable.CropImageView_cropSnapRadius, cropImageOptions2.snapRadius);
                    cropImageOptions2.touchRadius = attributeSet.getDimension(R.styleable.CropImageView_cropTouchRadius, cropImageOptions2.touchRadius);
                    cropImageOptions2.initialCropWindowPaddingRatio = attributeSet.getFloat(R.styleable.CropImageView_cropInitialCropWindowPaddingRatio, cropImageOptions2.initialCropWindowPaddingRatio);
                    cropImageOptions2.borderLineThickness = attributeSet.getDimension(R.styleable.CropImageView_cropBorderLineThickness, cropImageOptions2.borderLineThickness);
                    cropImageOptions2.borderLineColor = attributeSet.getInteger(R.styleable.CropImageView_cropBorderLineColor, cropImageOptions2.borderLineColor);
                    cropImageOptions2.borderCornerThickness = attributeSet.getDimension(R.styleable.CropImageView_cropBorderCornerThickness, cropImageOptions2.borderCornerThickness);
                    cropImageOptions2.borderCornerOffset = attributeSet.getDimension(R.styleable.CropImageView_cropBorderCornerOffset, cropImageOptions2.borderCornerOffset);
                    cropImageOptions2.borderCornerLength = attributeSet.getDimension(R.styleable.CropImageView_cropBorderCornerLength, cropImageOptions2.borderCornerLength);
                    cropImageOptions2.borderCornerColor = attributeSet.getInteger(R.styleable.CropImageView_cropBorderCornerColor, cropImageOptions2.borderCornerColor);
                    cropImageOptions2.guidelinesThickness = attributeSet.getDimension(R.styleable.CropImageView_cropGuidelinesThickness, cropImageOptions2.guidelinesThickness);
                    cropImageOptions2.guidelinesColor = attributeSet.getInteger(R.styleable.CropImageView_cropGuidelinesColor, cropImageOptions2.guidelinesColor);
                    cropImageOptions2.backgroundColor = attributeSet.getInteger(R.styleable.CropImageView_cropBackgroundColor, cropImageOptions2.backgroundColor);
                    cropImageOptions2.showCropOverlay = attributeSet.getBoolean(R.styleable.CropImageView_cropShowCropOverlay, this.mShowCropOverlay);
                    cropImageOptions2.showProgressBar = attributeSet.getBoolean(R.styleable.CropImageView_cropShowProgressBar, this.mShowProgressBar);
                    cropImageOptions2.borderCornerThickness = attributeSet.getDimension(R.styleable.CropImageView_cropBorderCornerThickness, cropImageOptions2.borderCornerThickness);
                    cropImageOptions2.minCropWindowWidth = (int)attributeSet.getDimension(R.styleable.CropImageView_cropMinCropWindowWidth, (float)cropImageOptions2.minCropWindowWidth);
                    cropImageOptions2.minCropWindowHeight = (int)attributeSet.getDimension(R.styleable.CropImageView_cropMinCropWindowHeight, (float)cropImageOptions2.minCropWindowHeight);
                    cropImageOptions2.minCropResultWidth = (int)attributeSet.getFloat(R.styleable.CropImageView_cropMinCropResultWidthPX, (float)cropImageOptions2.minCropResultWidth);
                    cropImageOptions2.minCropResultHeight = (int)attributeSet.getFloat(R.styleable.CropImageView_cropMinCropResultHeightPX, (float)cropImageOptions2.minCropResultHeight);
                    cropImageOptions2.maxCropResultWidth = (int)attributeSet.getFloat(R.styleable.CropImageView_cropMaxCropResultWidthPX, (float)cropImageOptions2.maxCropResultWidth);
                    cropImageOptions2.maxCropResultHeight = (int)attributeSet.getFloat(R.styleable.CropImageView_cropMaxCropResultHeightPX, (float)cropImageOptions2.maxCropResultHeight);
                    cropImageOptions2.flipHorizontally = attributeSet.getBoolean(R.styleable.CropImageView_cropFlipHorizontally, cropImageOptions2.flipHorizontally);
                    cropImageOptions2.flipVertically = attributeSet.getBoolean(R.styleable.CropImageView_cropFlipHorizontally, cropImageOptions2.flipVertically);
                    this.mSaveBitmapToInstanceState = attributeSet.getBoolean(R.styleable.CropImageView_cropSaveBitmapToInstanceState, this.mSaveBitmapToInstanceState);
                    if (attributeSet.hasValue(R.styleable.CropImageView_cropAspectRatioX) && attributeSet.hasValue(R.styleable.CropImageView_cropAspectRatioX) && !attributeSet.hasValue(R.styleable.CropImageView_cropFixAspectRatio)) {
                        cropImageOptions2.fixAspectRatio = true;
                    }
                    object = cropImageOptions2;
                }
                finally {
                    attributeSet.recycle();
                }
            }
        }
        object.validate();
        this.mScaleType = object.scaleType;
        this.mAutoZoomEnabled = object.autoZoomEnabled;
        this.mMaxZoom = object.maxZoom;
        this.mShowCropOverlay = object.showCropOverlay;
        this.mShowProgressBar = object.showProgressBar;
        this.mFlipHorizontally = object.flipHorizontally;
        this.mFlipVertically = object.flipVertically;
        context = LayoutInflater.from((Context)context).inflate(R.layout.crop_image_view, (ViewGroup)this, true);
        this.mImageView = (ImageView)context.findViewById(R.id.ImageView_image);
        this.mImageView.setScaleType(ImageView.ScaleType.MATRIX);
        this.mCropOverlayView = (CropOverlayView)context.findViewById(R.id.CropOverlayView);
        this.mCropOverlayView.setCropWindowChangeListener(new CropOverlayView.CropWindowChangeListener(){

            @Override
            public void onCropWindowChanged(boolean bl) {
                CropImageView.this.handleCropWindowChanged(bl, true);
                Object object = CropImageView.this.mOnCropOverlayReleasedListener;
                if (object != null && !bl) {
                    object.onCropOverlayReleased(CropImageView.this.getCropRect());
                }
                if ((object = CropImageView.this.mOnSetCropOverlayMovedListener) != null && bl) {
                    object.onCropOverlayMoved(CropImageView.this.getCropRect());
                }
            }
        });
        this.mCropOverlayView.setInitialAttributeValues((CropImageOptions)object);
        this.mProgressBar = (ProgressBar)context.findViewById(R.id.CropProgressBar);
        this.setProgressBarVisibility();
    }

    private void applyImageMatrix(float f, float f2, boolean bl, boolean bl2) {
        if (this.mBitmap != null) {
            float f3 = 0.0f;
            if (f > 0.0f && f2 > 0.0f) {
                this.mImageMatrix.invert(this.mImageInverseMatrix);
                RectF rectF = this.mCropOverlayView.getCropWindowRect();
                this.mImageInverseMatrix.mapRect(rectF);
                this.mImageMatrix.reset();
                this.mImageMatrix.postTranslate((f - (float)this.mBitmap.getWidth()) / 2.0f, (f2 - (float)this.mBitmap.getHeight()) / 2.0f);
                this.mapImagePointsByImageMatrix();
                if (this.mDegreesRotated > 0) {
                    this.mImageMatrix.postRotate((float)this.mDegreesRotated, BitmapUtils.getRectCenterX(this.mImagePoints), BitmapUtils.getRectCenterY(this.mImagePoints));
                    this.mapImagePointsByImageMatrix();
                }
                float f4 = Math.min(f / BitmapUtils.getRectWidth(this.mImagePoints), f2 / BitmapUtils.getRectHeight(this.mImagePoints));
                if (this.mScaleType == ScaleType.FIT_CENTER || this.mScaleType == ScaleType.CENTER_INSIDE && f4 < 1.0f || f4 > 1.0f && this.mAutoZoomEnabled) {
                    this.mImageMatrix.postScale(f4, f4, BitmapUtils.getRectCenterX(this.mImagePoints), BitmapUtils.getRectCenterY(this.mImagePoints));
                    this.mapImagePointsByImageMatrix();
                }
                f4 = this.mFlipHorizontally ? - this.mZoom : this.mZoom;
                float f5 = this.mFlipVertically ? - this.mZoom : this.mZoom;
                this.mImageMatrix.postScale(f4, f5, BitmapUtils.getRectCenterX(this.mImagePoints), BitmapUtils.getRectCenterY(this.mImagePoints));
                this.mapImagePointsByImageMatrix();
                this.mImageMatrix.mapRect(rectF);
                if (bl) {
                    f = f > BitmapUtils.getRectWidth(this.mImagePoints) ? 0.0f : Math.max(Math.min(f / 2.0f - rectF.centerX(), - BitmapUtils.getRectLeft(this.mImagePoints)), (float)this.getWidth() - BitmapUtils.getRectRight(this.mImagePoints)) / f4;
                    this.mZoomOffsetX = f;
                    f = f2 > BitmapUtils.getRectHeight(this.mImagePoints) ? f3 : Math.max(Math.min(f2 / 2.0f - rectF.centerY(), - BitmapUtils.getRectTop(this.mImagePoints)), (float)this.getHeight() - BitmapUtils.getRectBottom(this.mImagePoints)) / f5;
                    this.mZoomOffsetY = f;
                } else {
                    this.mZoomOffsetX = Math.min(Math.max(this.mZoomOffsetX * f4, - rectF.left), - rectF.right + f) / f4;
                    this.mZoomOffsetY = Math.min(Math.max(this.mZoomOffsetY * f5, - rectF.top), - rectF.bottom + f2) / f5;
                }
                this.mImageMatrix.postTranslate(this.mZoomOffsetX * f4, this.mZoomOffsetY * f5);
                rectF.offset(this.mZoomOffsetX * f4, this.mZoomOffsetY * f5);
                this.mCropOverlayView.setCropWindowRect(rectF);
                this.mapImagePointsByImageMatrix();
                this.mCropOverlayView.invalidate();
                if (bl2) {
                    this.mAnimation.setEndState(this.mImagePoints, this.mImageMatrix);
                    this.mImageView.startAnimation((Animation)this.mAnimation);
                } else {
                    this.mImageView.setImageMatrix(this.mImageMatrix);
                }
                this.updateImageBounds(false);
            }
        }
    }

    private void clearImageInt() {
        if (this.mBitmap != null && (this.mImageResource > 0 || this.mLoadedImageUri != null)) {
            this.mBitmap.recycle();
        }
        this.mBitmap = null;
        this.mImageResource = 0;
        this.mLoadedImageUri = null;
        this.mLoadedSampleSize = 1;
        this.mDegreesRotated = 0;
        this.mZoom = 1.0f;
        this.mZoomOffsetX = 0.0f;
        this.mZoomOffsetY = 0.0f;
        this.mImageMatrix.reset();
        this.mSaveInstanceStateBitmapUri = null;
        this.mImageView.setImageBitmap(null);
        this.setCropOverlayVisibility();
    }

    private static int getOnMeasureSpec(int n, int n2, int n3) {
        if (n == 1073741824) {
            return n2;
        }
        if (n == Integer.MIN_VALUE) {
            return Math.min(n3, n2);
        }
        return n3;
    }

    private void handleCropWindowChanged(boolean bl, boolean bl2) {
        int n = this.getWidth();
        int n2 = this.getHeight();
        if (this.mBitmap != null && n > 0 && n2 > 0) {
            RectF rectF = this.mCropOverlayView.getCropWindowRect();
            if (bl) {
                if (rectF.left < 0.0f || rectF.top < 0.0f || rectF.right > (float)n || rectF.bottom > (float)n2) {
                    this.applyImageMatrix(n, n2, false, false);
                }
            } else if (this.mAutoZoomEnabled || this.mZoom > 1.0f) {
                float f;
                float f2;
                float f3;
                f = this.mZoom < (float)this.mMaxZoom && (f3 = rectF.width()) < (f = (float)n) * 0.5f && (f3 = rectF.height()) < 0.5f * (f2 = (float)n2) ? Math.min((float)this.mMaxZoom, Math.min(f / (rectF.width() / this.mZoom / 0.64f), f2 / (rectF.height() / this.mZoom / 0.64f))) : 0.0f;
                if (this.mZoom > 1.0f && ((f3 = rectF.width()) > (f2 = (float)n) * 0.65f || rectF.height() > (float)n2 * 0.65f)) {
                    f = Math.max(1.0f, Math.min(f2 / (rectF.width() / this.mZoom / 0.51f), (float)n2 / (rectF.height() / this.mZoom / 0.51f)));
                }
                if (!this.mAutoZoomEnabled) {
                    f = 1.0f;
                }
                if (f > 0.0f && f != this.mZoom) {
                    if (bl2) {
                        if (this.mAnimation == null) {
                            this.mAnimation = new CropImageAnimation(this.mImageView, this.mCropOverlayView);
                        }
                        this.mAnimation.setStartState(this.mImagePoints, this.mImageMatrix);
                    }
                    this.mZoom = f;
                    this.applyImageMatrix(n, n2, true, bl2);
                }
            }
            if (this.mOnSetCropWindowChangeListener != null && !bl) {
                this.mOnSetCropWindowChangeListener.onCropWindowChanged();
            }
        }
    }

    private void mapImagePointsByImageMatrix() {
        this.mImagePoints[0] = 0.0f;
        this.mImagePoints[1] = 0.0f;
        this.mImagePoints[2] = this.mBitmap.getWidth();
        this.mImagePoints[3] = 0.0f;
        this.mImagePoints[4] = this.mBitmap.getWidth();
        this.mImagePoints[5] = this.mBitmap.getHeight();
        this.mImagePoints[6] = 0.0f;
        this.mImagePoints[7] = this.mBitmap.getHeight();
        this.mImageMatrix.mapPoints(this.mImagePoints);
        this.mScaleImagePoints[0] = 0.0f;
        this.mScaleImagePoints[1] = 0.0f;
        this.mScaleImagePoints[2] = 100.0f;
        this.mScaleImagePoints[3] = 0.0f;
        this.mScaleImagePoints[4] = 100.0f;
        this.mScaleImagePoints[5] = 100.0f;
        this.mScaleImagePoints[6] = 0.0f;
        this.mScaleImagePoints[7] = 100.0f;
        this.mImageMatrix.mapPoints(this.mScaleImagePoints);
    }

    private void setBitmap(Bitmap bitmap, int n, Uri uri, int n2, int n3) {
        if (this.mBitmap == null || !this.mBitmap.equals((Object)bitmap)) {
            this.mImageView.clearAnimation();
            this.clearImageInt();
            this.mBitmap = bitmap;
            this.mImageView.setImageBitmap(this.mBitmap);
            this.mLoadedImageUri = uri;
            this.mImageResource = n;
            this.mLoadedSampleSize = n2;
            this.mDegreesRotated = n3;
            this.applyImageMatrix(this.getWidth(), this.getHeight(), true, false);
            if (this.mCropOverlayView != null) {
                this.mCropOverlayView.resetCropOverlayView();
                this.setCropOverlayVisibility();
            }
        }
    }

    private void setCropOverlayVisibility() {
        if (this.mCropOverlayView != null) {
            CropOverlayView cropOverlayView = this.mCropOverlayView;
            int n = this.mShowCropOverlay && this.mBitmap != null ? 0 : 4;
            cropOverlayView.setVisibility(n);
        }
    }

    private void setProgressBarVisibility() {
        boolean bl = this.mShowProgressBar;
        int n = 0;
        int n2 = bl && (this.mBitmap == null && this.mBitmapLoadingWorkerTask != null || this.mBitmapCroppingWorkerTask != null) ? 1 : 0;
        ProgressBar progressBar = this.mProgressBar;
        n2 = n2 != 0 ? n : 4;
        progressBar.setVisibility(n2);
    }

    private void updateImageBounds(boolean bl) {
        if (this.mBitmap != null && !bl) {
            float f = (float)this.mLoadedSampleSize * 100.0f / BitmapUtils.getRectWidth(this.mScaleImagePoints);
            float f2 = (float)this.mLoadedSampleSize * 100.0f / BitmapUtils.getRectHeight(this.mScaleImagePoints);
            this.mCropOverlayView.setCropWindowLimits(this.getWidth(), this.getHeight(), f, f2);
        }
        CropOverlayView cropOverlayView = this.mCropOverlayView;
        float[] arrf = bl ? null : this.mImagePoints;
        cropOverlayView.setBounds(arrf, this.getWidth(), this.getHeight());
    }

    public void clearAspectRatio() {
        this.mCropOverlayView.setAspectRatioX(1);
        this.mCropOverlayView.setAspectRatioY(1);
        this.setFixedAspectRatio(false);
    }

    public void clearImage() {
        this.clearImageInt();
        this.mCropOverlayView.setInitialCropWindowRect(null);
    }

    public void flipImageHorizontally() {
        this.mFlipHorizontally ^= true;
        this.applyImageMatrix(this.getWidth(), this.getHeight(), true, false);
    }

    public void flipImageVertically() {
        this.mFlipVertically ^= true;
        this.applyImageMatrix(this.getWidth(), this.getHeight(), true, false);
    }

    public Pair<Integer, Integer> getAspectRatio() {
        return new Pair((Object)this.mCropOverlayView.getAspectRatioX(), (Object)this.mCropOverlayView.getAspectRatioY());
    }

    public float[] getCropPoints() {
        RectF rectF = this.mCropOverlayView.getCropWindowRect();
        float[] arrf = new float[8];
        float f = rectF.left;
        arrf[0] = f;
        arrf[1] = rectF.top;
        arrf[2] = rectF.right;
        arrf[3] = rectF.top;
        arrf[4] = rectF.right;
        arrf[5] = rectF.bottom;
        arrf[6] = rectF.left;
        arrf[7] = rectF.bottom;
        this.mImageMatrix.invert(this.mImageInverseMatrix);
        this.mImageInverseMatrix.mapPoints(arrf);
        for (int i = 0; i < arrf.length; ++i) {
            arrf[i] = arrf[i] * (float)this.mLoadedSampleSize;
        }
        return arrf;
    }

    public Rect getCropRect() {
        int n = this.mLoadedSampleSize;
        Bitmap bitmap = this.mBitmap;
        if (bitmap == null) {
            return null;
        }
        return BitmapUtils.getRectFromPoints(this.getCropPoints(), bitmap.getWidth() * n, n * bitmap.getHeight(), this.mCropOverlayView.isFixAspectRatio(), this.mCropOverlayView.getAspectRatioX(), this.mCropOverlayView.getAspectRatioY());
    }

    public CropShape getCropShape() {
        return this.mCropOverlayView.getCropShape();
    }

    public RectF getCropWindowRect() {
        if (this.mCropOverlayView == null) {
            return null;
        }
        return this.mCropOverlayView.getCropWindowRect();
    }

    public Bitmap getCroppedImage() {
        return this.getCroppedImage(0, 0, RequestSizeOptions.NONE);
    }

    public Bitmap getCroppedImage(int n, int n2) {
        return this.getCroppedImage(n, n2, RequestSizeOptions.RESIZE_INSIDE);
    }

    public Bitmap getCroppedImage(int n, int n2, RequestSizeOptions requestSizeOptions) {
        if (this.mBitmap != null) {
            this.mImageView.clearAnimation();
            RequestSizeOptions requestSizeOptions2 = RequestSizeOptions.NONE;
            int n3 = 0;
            if (requestSizeOptions == requestSizeOptions2) {
                n = 0;
            }
            if (requestSizeOptions != RequestSizeOptions.NONE) {
                n3 = n2;
            }
            if (this.mLoadedImageUri != null && (this.mLoadedSampleSize > 1 || requestSizeOptions == RequestSizeOptions.SAMPLING)) {
                n2 = this.mBitmap.getWidth();
                int n4 = this.mLoadedSampleSize;
                int n5 = this.mBitmap.getHeight();
                int n6 = this.mLoadedSampleSize;
                requestSizeOptions2 = BitmapUtils.cropBitmap((Context)this.getContext(), (Uri)this.mLoadedImageUri, (float[])this.getCropPoints(), (int)this.mDegreesRotated, (int)(n2 * n4), (int)(n5 * n6), (boolean)this.mCropOverlayView.isFixAspectRatio(), (int)this.mCropOverlayView.getAspectRatioX(), (int)this.mCropOverlayView.getAspectRatioY(), (int)n, (int)n3, (boolean)this.mFlipHorizontally, (boolean)this.mFlipVertically).bitmap;
            } else {
                requestSizeOptions2 = BitmapUtils.cropBitmapObjectHandleOOM((Bitmap)this.mBitmap, (float[])this.getCropPoints(), (int)this.mDegreesRotated, (boolean)this.mCropOverlayView.isFixAspectRatio(), (int)this.mCropOverlayView.getAspectRatioX(), (int)this.mCropOverlayView.getAspectRatioY(), (boolean)this.mFlipHorizontally, (boolean)this.mFlipVertically).bitmap;
            }
            return BitmapUtils.resizeBitmap((Bitmap)requestSizeOptions2, n, n3, requestSizeOptions);
        }
        return null;
    }

    public void getCroppedImageAsync() {
        this.getCroppedImageAsync(0, 0, RequestSizeOptions.NONE);
    }

    public void getCroppedImageAsync(int n, int n2) {
        this.getCroppedImageAsync(n, n2, RequestSizeOptions.RESIZE_INSIDE);
    }

    public void getCroppedImageAsync(int n, int n2, RequestSizeOptions requestSizeOptions) {
        if (this.mOnCropImageCompleteListener == null) {
            throw new IllegalArgumentException("mOnCropImageCompleteListener is not set");
        }
        this.startCropWorkerTask(n, n2, requestSizeOptions, null, null, 0);
    }

    public Guidelines getGuidelines() {
        return this.mCropOverlayView.getGuidelines();
    }

    public int getImageResource() {
        return this.mImageResource;
    }

    public Uri getImageUri() {
        return this.mLoadedImageUri;
    }

    public int getMaxZoom() {
        return this.mMaxZoom;
    }

    public int getRotatedDegrees() {
        return this.mDegreesRotated;
    }

    public ScaleType getScaleType() {
        return this.mScaleType;
    }

    public Rect getWholeImageRect() {
        int n = this.mLoadedSampleSize;
        Bitmap bitmap = this.mBitmap;
        if (bitmap == null) {
            return null;
        }
        return new Rect(0, 0, bitmap.getWidth() * n, bitmap.getHeight() * n);
    }

    public boolean isAutoZoomEnabled() {
        return this.mAutoZoomEnabled;
    }

    public boolean isFixAspectRatio() {
        return this.mCropOverlayView.isFixAspectRatio();
    }

    public boolean isFlippedHorizontally() {
        return this.mFlipHorizontally;
    }

    public boolean isFlippedVertically() {
        return this.mFlipVertically;
    }

    public boolean isSaveBitmapToInstanceState() {
        return this.mSaveBitmapToInstanceState;
    }

    public boolean isShowCropOverlay() {
        return this.mShowCropOverlay;
    }

    public boolean isShowProgressBar() {
        return this.mShowProgressBar;
    }

    void onImageCroppingAsyncComplete(BitmapCroppingWorkerTask.Result result) {
        this.mBitmapCroppingWorkerTask = null;
        this.setProgressBarVisibility();
        OnCropImageCompleteListener onCropImageCompleteListener = this.mOnCropImageCompleteListener;
        if (onCropImageCompleteListener != null) {
            onCropImageCompleteListener.onCropImageComplete(this, new CropResult(this.mBitmap, this.mLoadedImageUri, result.bitmap, result.uri, result.error, this.getCropPoints(), this.getCropRect(), this.getWholeImageRect(), this.getRotatedDegrees(), result.sampleSize));
        }
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    protected void onLayout(boolean bl, int n, int n2, int n3, int n4) {
        super.onLayout(bl, n, n2, n3, n4);
        if (this.mLayoutWidth > 0 && this.mLayoutHeight > 0) {
            ViewGroup.LayoutParams layoutParams = this.getLayoutParams();
            layoutParams.width = this.mLayoutWidth;
            layoutParams.height = this.mLayoutHeight;
            this.setLayoutParams(layoutParams);
            if (this.mBitmap != null) {
                float f = n3 - n;
                float f2 = n4 - n2;
                this.applyImageMatrix(f, f2, true, false);
                if (this.mRestoreCropWindowRect != null) {
                    if (this.mRestoreDegreesRotated != this.mInitialDegreesRotated) {
                        this.mDegreesRotated = this.mRestoreDegreesRotated;
                        this.applyImageMatrix(f, f2, true, false);
                    }
                    this.mImageMatrix.mapRect(this.mRestoreCropWindowRect);
                    this.mCropOverlayView.setCropWindowRect(this.mRestoreCropWindowRect);
                    this.handleCropWindowChanged(false, false);
                    this.mCropOverlayView.fixCurrentCropWindowRect();
                    this.mRestoreCropWindowRect = null;
                    return;
                }
                if (!this.mSizeChanged) return;
                this.mSizeChanged = false;
                this.handleCropWindowChanged(false, false);
                return;
            }
            this.updateImageBounds(true);
            return;
        }
        this.updateImageBounds(true);
    }

    protected void onMeasure(int n, int n2) {
        super.onMeasure(n, n2);
        int n3 = View.MeasureSpec.getMode((int)n);
        int n4 = View.MeasureSpec.getSize((int)n);
        int n5 = View.MeasureSpec.getMode((int)n2);
        n2 = View.MeasureSpec.getSize((int)n2);
        if (this.mBitmap != null) {
            int n6;
            n = n2;
            if (n2 == 0) {
                n = this.mBitmap.getHeight();
            }
            double d = n4 < this.mBitmap.getWidth() ? (double)n4 / (double)this.mBitmap.getWidth() : Double.POSITIVE_INFINITY;
            double d2 = n < this.mBitmap.getHeight() ? (double)n / (double)this.mBitmap.getHeight() : Double.POSITIVE_INFINITY;
            if (d == Double.POSITIVE_INFINITY && d2 == Double.POSITIVE_INFINITY) {
                n2 = this.mBitmap.getWidth();
                n6 = this.mBitmap.getHeight();
            } else if (d <= d2) {
                n6 = (int)((double)this.mBitmap.getHeight() * d);
                n2 = n4;
            } else {
                n2 = (int)((double)this.mBitmap.getWidth() * d2);
                n6 = n;
            }
            n2 = CropImageView.getOnMeasureSpec(n3, n4, n2);
            n = CropImageView.getOnMeasureSpec(n5, n, n6);
            this.mLayoutWidth = n2;
            this.mLayoutHeight = n;
            this.setMeasuredDimension(this.mLayoutWidth, this.mLayoutHeight);
            return;
        }
        this.setMeasuredDimension(n4, n2);
    }

    public void onRestoreInstanceState(Parcelable object) {
        if (object instanceof Bundle) {
            Bundle bundle = (Bundle)object;
            if (this.mBitmapLoadingWorkerTask == null && this.mLoadedImageUri == null && this.mBitmap == null && this.mImageResource == 0) {
                int n;
                Uri uri = (Uri)bundle.getParcelable("LOADED_IMAGE_URI");
                if (uri != null) {
                    object = bundle.getString("LOADED_IMAGE_STATE_BITMAP_KEY");
                    if (object != null) {
                        object = BitmapUtils.mStateBitmap != null && ((String)BitmapUtils.mStateBitmap.first).equals(object) ? (Bitmap)((WeakReference)BitmapUtils.mStateBitmap.second).get() : null;
                        BitmapUtils.mStateBitmap = null;
                        if (object != null && !object.isRecycled()) {
                            this.setBitmap((Bitmap)object, 0, uri, bundle.getInt("LOADED_SAMPLE_SIZE"), 0);
                        }
                    }
                    if (this.mLoadedImageUri == null) {
                        this.setImageUriAsync(uri);
                    }
                } else {
                    n = bundle.getInt("LOADED_IMAGE_RESOURCE");
                    if (n > 0) {
                        this.setImageResource(n);
                    } else {
                        object = (Uri)bundle.getParcelable("LOADING_IMAGE_URI");
                        if (object != null) {
                            this.setImageUriAsync((Uri)object);
                        }
                    }
                }
                this.mRestoreDegreesRotated = n = bundle.getInt("DEGREES_ROTATED");
                this.mDegreesRotated = n;
                object = (Rect)bundle.getParcelable("INITIAL_CROP_RECT");
                if (object != null && (object.width() > 0 || object.height() > 0)) {
                    this.mCropOverlayView.setInitialCropWindowRect((Rect)object);
                }
                if ((object = (RectF)bundle.getParcelable("CROP_WINDOW_RECT")) != null && (object.width() > 0.0f || object.height() > 0.0f)) {
                    this.mRestoreCropWindowRect = object;
                }
                this.mCropOverlayView.setCropShape(CropShape.valueOf(bundle.getString("CROP_SHAPE")));
                this.mAutoZoomEnabled = bundle.getBoolean("CROP_AUTO_ZOOM_ENABLED");
                this.mMaxZoom = bundle.getInt("CROP_MAX_ZOOM");
                this.mFlipHorizontally = bundle.getBoolean("CROP_FLIP_HORIZONTALLY");
                this.mFlipVertically = bundle.getBoolean("CROP_FLIP_VERTICALLY");
            }
            super.onRestoreInstanceState(bundle.getParcelable("instanceState"));
            return;
        }
        super.onRestoreInstanceState(object);
    }

    public Parcelable onSaveInstanceState() {
        if (this.mLoadedImageUri == null && this.mBitmap == null && this.mImageResource < 1) {
            return super.onSaveInstanceState();
        }
        Bundle bundle = new Bundle();
        Object object = this.mLoadedImageUri;
        Uri uri = object;
        if (this.mSaveBitmapToInstanceState) {
            uri = object;
            if (object == null) {
                uri = object;
                if (this.mImageResource < 1) {
                    this.mSaveInstanceStateBitmapUri = uri = BitmapUtils.writeTempStateStoreBitmap(this.getContext(), this.mBitmap, this.mSaveInstanceStateBitmapUri);
                }
            }
        }
        if (uri != null && this.mBitmap != null) {
            object = UUID.randomUUID().toString();
            BitmapUtils.mStateBitmap = new Pair(object, new WeakReference<Bitmap>(this.mBitmap));
            bundle.putString("LOADED_IMAGE_STATE_BITMAP_KEY", (String)object);
        }
        if (this.mBitmapLoadingWorkerTask != null && (object = this.mBitmapLoadingWorkerTask.get()) != null) {
            bundle.putParcelable("LOADING_IMAGE_URI", (Parcelable)object.getUri());
        }
        bundle.putParcelable("instanceState", super.onSaveInstanceState());
        bundle.putParcelable("LOADED_IMAGE_URI", (Parcelable)uri);
        bundle.putInt("LOADED_IMAGE_RESOURCE", this.mImageResource);
        bundle.putInt("LOADED_SAMPLE_SIZE", this.mLoadedSampleSize);
        bundle.putInt("DEGREES_ROTATED", this.mDegreesRotated);
        bundle.putParcelable("INITIAL_CROP_RECT", (Parcelable)this.mCropOverlayView.getInitialCropWindowRect());
        BitmapUtils.RECT.set(this.mCropOverlayView.getCropWindowRect());
        this.mImageMatrix.invert(this.mImageInverseMatrix);
        this.mImageInverseMatrix.mapRect(BitmapUtils.RECT);
        bundle.putParcelable("CROP_WINDOW_RECT", (Parcelable)BitmapUtils.RECT);
        bundle.putString("CROP_SHAPE", this.mCropOverlayView.getCropShape().name());
        bundle.putBoolean("CROP_AUTO_ZOOM_ENABLED", this.mAutoZoomEnabled);
        bundle.putInt("CROP_MAX_ZOOM", this.mMaxZoom);
        bundle.putBoolean("CROP_FLIP_HORIZONTALLY", this.mFlipHorizontally);
        bundle.putBoolean("CROP_FLIP_VERTICALLY", this.mFlipVertically);
        return bundle;
    }

    void onSetImageUriAsyncComplete(BitmapLoadingWorkerTask.Result result) {
        OnSetImageUriCompleteListener onSetImageUriCompleteListener;
        this.mBitmapLoadingWorkerTask = null;
        this.setProgressBarVisibility();
        if (result.error == null) {
            this.mInitialDegreesRotated = result.degreesRotated;
            this.setBitmap(result.bitmap, 0, result.uri, result.loadSampleSize, result.degreesRotated);
        }
        if ((onSetImageUriCompleteListener = this.mOnSetImageUriCompleteListener) != null) {
            onSetImageUriCompleteListener.onSetImageUriComplete(this, result.uri, result.error);
        }
    }

    protected void onSizeChanged(int n, int n2, int n3, int n4) {
        super.onSizeChanged(n, n2, n3, n4);
        boolean bl = n3 > 0 && n4 > 0;
        this.mSizeChanged = bl;
    }

    public void resetCropRect() {
        this.mZoom = 1.0f;
        this.mZoomOffsetX = 0.0f;
        this.mZoomOffsetY = 0.0f;
        this.mDegreesRotated = this.mInitialDegreesRotated;
        this.mFlipHorizontally = false;
        this.mFlipVertically = false;
        this.applyImageMatrix(this.getWidth(), this.getHeight(), false, false);
        this.mCropOverlayView.resetCropWindowRect();
    }

    public void rotateImage(int n) {
        if (this.mBitmap != null) {
            n = n < 0 ? n % 360 + 360 : (n %= 360);
            boolean bl = !this.mCropOverlayView.isFixAspectRatio() && (n > 45 && n < 135 || n > 215 && n < 305);
            BitmapUtils.RECT.set(this.mCropOverlayView.getCropWindowRect());
            float f = bl ? BitmapUtils.RECT.height() : BitmapUtils.RECT.width();
            float f2 = f / 2.0f;
            f = bl ? BitmapUtils.RECT.width() : BitmapUtils.RECT.height();
            f /= 2.0f;
            if (bl) {
                boolean bl2 = this.mFlipHorizontally;
                this.mFlipHorizontally = this.mFlipVertically;
                this.mFlipVertically = bl2;
            }
            this.mImageMatrix.invert(this.mImageInverseMatrix);
            BitmapUtils.POINTS[0] = BitmapUtils.RECT.centerX();
            BitmapUtils.POINTS[1] = BitmapUtils.RECT.centerY();
            BitmapUtils.POINTS[2] = 0.0f;
            BitmapUtils.POINTS[3] = 0.0f;
            BitmapUtils.POINTS[4] = 1.0f;
            BitmapUtils.POINTS[5] = 0.0f;
            this.mImageInverseMatrix.mapPoints(BitmapUtils.POINTS);
            this.mDegreesRotated = (this.mDegreesRotated + n) % 360;
            this.applyImageMatrix(this.getWidth(), this.getHeight(), true, false);
            this.mImageMatrix.mapPoints(BitmapUtils.POINTS2, BitmapUtils.POINTS);
            this.mZoom = (float)((double)this.mZoom / Math.sqrt(Math.pow(BitmapUtils.POINTS2[4] - BitmapUtils.POINTS2[2], 2.0) + Math.pow(BitmapUtils.POINTS2[5] - BitmapUtils.POINTS2[3], 2.0)));
            this.mZoom = Math.max(this.mZoom, 1.0f);
            this.applyImageMatrix(this.getWidth(), this.getHeight(), true, false);
            this.mImageMatrix.mapPoints(BitmapUtils.POINTS2, BitmapUtils.POINTS);
            double d = Math.sqrt(Math.pow(BitmapUtils.POINTS2[4] - BitmapUtils.POINTS2[2], 2.0) + Math.pow(BitmapUtils.POINTS2[5] - BitmapUtils.POINTS2[3], 2.0));
            f2 = (float)((double)f2 * d);
            f = (float)((double)f * d);
            BitmapUtils.RECT.set(BitmapUtils.POINTS2[0] - f2, BitmapUtils.POINTS2[1] - f, BitmapUtils.POINTS2[0] + f2, BitmapUtils.POINTS2[1] + f);
            this.mCropOverlayView.resetCropOverlayView();
            this.mCropOverlayView.setCropWindowRect(BitmapUtils.RECT);
            this.applyImageMatrix(this.getWidth(), this.getHeight(), true, false);
            this.handleCropWindowChanged(false, false);
            this.mCropOverlayView.fixCurrentCropWindowRect();
        }
    }

    public void saveCroppedImageAsync(Uri uri) {
        this.saveCroppedImageAsync(uri, Bitmap.CompressFormat.JPEG, 90, 0, 0, RequestSizeOptions.NONE);
    }

    public void saveCroppedImageAsync(Uri uri, Bitmap.CompressFormat compressFormat, int n) {
        this.saveCroppedImageAsync(uri, compressFormat, n, 0, 0, RequestSizeOptions.NONE);
    }

    public void saveCroppedImageAsync(Uri uri, Bitmap.CompressFormat compressFormat, int n, int n2, int n3) {
        this.saveCroppedImageAsync(uri, compressFormat, n, n2, n3, RequestSizeOptions.RESIZE_INSIDE);
    }

    public void saveCroppedImageAsync(Uri uri, Bitmap.CompressFormat compressFormat, int n, int n2, int n3, RequestSizeOptions requestSizeOptions) {
        if (this.mOnCropImageCompleteListener == null) {
            throw new IllegalArgumentException("mOnCropImageCompleteListener is not set");
        }
        this.startCropWorkerTask(n2, n3, requestSizeOptions, uri, compressFormat, n);
    }

    public void setAspectRatio(int n, int n2) {
        this.mCropOverlayView.setAspectRatioX(n);
        this.mCropOverlayView.setAspectRatioY(n2);
        this.setFixedAspectRatio(true);
    }

    public void setAutoZoomEnabled(boolean bl) {
        if (this.mAutoZoomEnabled != bl) {
            this.mAutoZoomEnabled = bl;
            this.handleCropWindowChanged(false, false);
            this.mCropOverlayView.invalidate();
        }
    }

    public void setCropRect(Rect rect) {
        this.mCropOverlayView.setInitialCropWindowRect(rect);
    }

    public void setCropShape(CropShape cropShape) {
        this.mCropOverlayView.setCropShape(cropShape);
    }

    public void setFixedAspectRatio(boolean bl) {
        this.mCropOverlayView.setFixedAspectRatio(bl);
    }

    public void setFlippedHorizontally(boolean bl) {
        if (this.mFlipHorizontally != bl) {
            this.mFlipHorizontally = bl;
            this.applyImageMatrix(this.getWidth(), this.getHeight(), true, false);
        }
    }

    public void setFlippedVertically(boolean bl) {
        if (this.mFlipVertically != bl) {
            this.mFlipVertically = bl;
            this.applyImageMatrix(this.getWidth(), this.getHeight(), true, false);
        }
    }

    public void setGuidelines(Guidelines guidelines) {
        this.mCropOverlayView.setGuidelines(guidelines);
    }

    public void setImageBitmap(Bitmap bitmap) {
        this.mCropOverlayView.setInitialCropWindowRect(null);
        this.setBitmap(bitmap, 0, null, 1, 0);
    }

    public void setImageBitmap(Bitmap bitmap, ExifInterface object) {
        int n;
        if (bitmap != null && object != null) {
            object = BitmapUtils.rotateBitmapByExif(bitmap, (ExifInterface)object);
            bitmap = object.bitmap;
            n = object.degrees;
            this.mInitialDegreesRotated = object.degrees;
        } else {
            n = 0;
        }
        this.mCropOverlayView.setInitialCropWindowRect(null);
        this.setBitmap(bitmap, 0, null, 1, n);
    }

    public void setImageResource(int n) {
        if (n != 0) {
            this.mCropOverlayView.setInitialCropWindowRect(null);
            this.setBitmap(BitmapFactory.decodeResource((Resources)this.getResources(), (int)n), n, null, 1, 0);
        }
    }

    public void setImageUriAsync(Uri uri) {
        if (uri != null) {
            BitmapLoadingWorkerTask bitmapLoadingWorkerTask = this.mBitmapLoadingWorkerTask != null ? this.mBitmapLoadingWorkerTask.get() : null;
            if (bitmapLoadingWorkerTask != null) {
                bitmapLoadingWorkerTask.cancel(true);
            }
            this.clearImageInt();
            this.mRestoreCropWindowRect = null;
            this.mRestoreDegreesRotated = 0;
            this.mCropOverlayView.setInitialCropWindowRect(null);
            this.mBitmapLoadingWorkerTask = new WeakReference<BitmapLoadingWorkerTask>(new BitmapLoadingWorkerTask(this, uri));
            this.mBitmapLoadingWorkerTask.get().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, (Object[])new Void[0]);
            this.setProgressBarVisibility();
        }
    }

    public void setMaxCropResultSize(int n, int n2) {
        this.mCropOverlayView.setMaxCropResultSize(n, n2);
    }

    public void setMaxZoom(int n) {
        if (this.mMaxZoom != n && n > 0) {
            this.mMaxZoom = n;
            this.handleCropWindowChanged(false, false);
            this.mCropOverlayView.invalidate();
        }
    }

    public void setMinCropResultSize(int n, int n2) {
        this.mCropOverlayView.setMinCropResultSize(n, n2);
    }

    public void setMultiTouchEnabled(boolean bl) {
        if (this.mCropOverlayView.setMultiTouchEnabled(bl)) {
            this.handleCropWindowChanged(false, false);
            this.mCropOverlayView.invalidate();
        }
    }

    public void setOnCropImageCompleteListener(OnCropImageCompleteListener onCropImageCompleteListener) {
        this.mOnCropImageCompleteListener = onCropImageCompleteListener;
    }

    public void setOnCropWindowChangedListener(OnSetCropWindowChangeListener onSetCropWindowChangeListener) {
        this.mOnSetCropWindowChangeListener = onSetCropWindowChangeListener;
    }

    public void setOnSetCropOverlayMovedListener(OnSetCropOverlayMovedListener onSetCropOverlayMovedListener) {
        this.mOnSetCropOverlayMovedListener = onSetCropOverlayMovedListener;
    }

    public void setOnSetCropOverlayReleasedListener(OnSetCropOverlayReleasedListener onSetCropOverlayReleasedListener) {
        this.mOnCropOverlayReleasedListener = onSetCropOverlayReleasedListener;
    }

    public void setOnSetImageUriCompleteListener(OnSetImageUriCompleteListener onSetImageUriCompleteListener) {
        this.mOnSetImageUriCompleteListener = onSetImageUriCompleteListener;
    }

    public void setRotatedDegrees(int n) {
        if (this.mDegreesRotated != n) {
            this.rotateImage(n - this.mDegreesRotated);
        }
    }

    public void setSaveBitmapToInstanceState(boolean bl) {
        this.mSaveBitmapToInstanceState = bl;
    }

    public void setScaleType(ScaleType scaleType) {
        if (scaleType != this.mScaleType) {
            this.mScaleType = scaleType;
            this.mZoom = 1.0f;
            this.mZoomOffsetY = 0.0f;
            this.mZoomOffsetX = 0.0f;
            this.mCropOverlayView.resetCropOverlayView();
            this.requestLayout();
        }
    }

    public void setShowCropOverlay(boolean bl) {
        if (this.mShowCropOverlay != bl) {
            this.mShowCropOverlay = bl;
            this.setCropOverlayVisibility();
        }
    }

    public void setShowProgressBar(boolean bl) {
        if (this.mShowProgressBar != bl) {
            this.mShowProgressBar = bl;
            this.setProgressBarVisibility();
        }
    }

    public void setSnapRadius(float f) {
        if (f >= 0.0f) {
            this.mCropOverlayView.setSnapRadius(f);
        }
    }

    public void startCropWorkerTask(int n, int n2, RequestSizeOptions requestSizeOptions, Uri uri, Bitmap.CompressFormat compressFormat, int n3) {
        Bitmap bitmap = this.mBitmap;
        if (bitmap != null) {
            this.mImageView.clearAnimation();
            BitmapCroppingWorkerTask bitmapCroppingWorkerTask = this.mBitmapCroppingWorkerTask != null ? this.mBitmapCroppingWorkerTask.get() : null;
            if (bitmapCroppingWorkerTask != null) {
                bitmapCroppingWorkerTask.cancel(true);
            }
            if (requestSizeOptions == RequestSizeOptions.NONE) {
                n = 0;
            }
            if (requestSizeOptions == RequestSizeOptions.NONE) {
                n2 = 0;
            }
            int n4 = bitmap.getWidth();
            int n5 = this.mLoadedSampleSize;
            int n6 = bitmap.getHeight();
            int n7 = this.mLoadedSampleSize;
            this.mBitmapCroppingWorkerTask = this.mLoadedImageUri != null && (this.mLoadedSampleSize > 1 || requestSizeOptions == RequestSizeOptions.SAMPLING) ? new WeakReference<BitmapCroppingWorkerTask>(new BitmapCroppingWorkerTask(this, this.mLoadedImageUri, this.getCropPoints(), this.mDegreesRotated, n4 * n5, n6 * n7, this.mCropOverlayView.isFixAspectRatio(), this.mCropOverlayView.getAspectRatioX(), this.mCropOverlayView.getAspectRatioY(), n, n2, this.mFlipHorizontally, this.mFlipVertically, requestSizeOptions, uri, compressFormat, n3)) : new WeakReference<BitmapCroppingWorkerTask>(new BitmapCroppingWorkerTask(this, bitmap, this.getCropPoints(), this.mDegreesRotated, this.mCropOverlayView.isFixAspectRatio(), this.mCropOverlayView.getAspectRatioX(), this.mCropOverlayView.getAspectRatioY(), n, n2, this.mFlipHorizontally, this.mFlipVertically, requestSizeOptions, uri, compressFormat, n3));
            this.mBitmapCroppingWorkerTask.get().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, (Object[])new Void[0]);
            this.setProgressBarVisibility();
            return;
        }
    }

    public static class CropResult {
        private final Bitmap mBitmap;
        private final float[] mCropPoints;
        private final Rect mCropRect;
        private final Exception mError;
        private final Bitmap mOriginalBitmap;
        private final Uri mOriginalUri;
        private final int mRotation;
        private final int mSampleSize;
        private final Uri mUri;
        private final Rect mWholeImageRect;

        CropResult(Bitmap bitmap, Uri uri, Bitmap bitmap2, Uri uri2, Exception exception, float[] arrf, Rect rect, Rect rect2, int n, int n2) {
            this.mOriginalBitmap = bitmap;
            this.mOriginalUri = uri;
            this.mBitmap = bitmap2;
            this.mUri = uri2;
            this.mError = exception;
            this.mCropPoints = arrf;
            this.mCropRect = rect;
            this.mWholeImageRect = rect2;
            this.mRotation = n;
            this.mSampleSize = n2;
        }

        public Bitmap getBitmap() {
            return this.mBitmap;
        }

        public float[] getCropPoints() {
            return this.mCropPoints;
        }

        public Rect getCropRect() {
            return this.mCropRect;
        }

        public Exception getError() {
            return this.mError;
        }

        public Bitmap getOriginalBitmap() {
            return this.mOriginalBitmap;
        }

        public Uri getOriginalUri() {
            return this.mOriginalUri;
        }

        public int getRotation() {
            return this.mRotation;
        }

        public int getSampleSize() {
            return this.mSampleSize;
        }

        public Uri getUri() {
            return this.mUri;
        }

        public Rect getWholeImageRect() {
            return this.mWholeImageRect;
        }

        public boolean isSuccessful() {
            if (this.mError == null) {
                return true;
            }
            return false;
        }
    }

    public static enum CropShape {
        RECTANGLE,
        OVAL;
        

        private CropShape() {
        }
    }

    public static enum Guidelines {
        OFF,
        ON_TOUCH,
        ON;
        

        private Guidelines() {
        }
    }

    public static interface OnCropImageCompleteListener {
        public void onCropImageComplete(CropImageView var1, CropResult var2);
    }

    public static interface OnSetCropOverlayMovedListener {
        public void onCropOverlayMoved(Rect var1);
    }

    public static interface OnSetCropOverlayReleasedListener {
        public void onCropOverlayReleased(Rect var1);
    }

    public static interface OnSetCropWindowChangeListener {
        public void onCropWindowChanged();
    }

    public static interface OnSetImageUriCompleteListener {
        public void onSetImageUriComplete(CropImageView var1, Uri var2, Exception var3);
    }

    public static enum RequestSizeOptions {
        NONE,
        SAMPLING,
        RESIZE_INSIDE,
        RESIZE_FIT,
        RESIZE_EXACT;
        

        private RequestSizeOptions() {
        }
    }

    public static enum ScaleType {
        FIT_CENTER,
        CENTER,
        CENTER_CROP,
        CENTER_INSIDE;
        

        private ScaleType() {
        }
    }

}

