/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.annotation.SuppressLint
 *  android.annotation.TargetApi
 *  android.app.Activity
 *  android.content.Context
 *  android.content.ContextWrapper
 *  android.content.pm.PackageInfo
 *  android.content.pm.PackageManager
 *  android.content.pm.PackageManager$NameNotFoundException
 *  android.content.res.Resources
 *  android.content.res.Resources$Theme
 *  android.content.res.TypedArray
 *  android.graphics.PointF
 *  android.graphics.Rect
 *  android.graphics.YuvImage
 *  android.location.Location
 *  android.media.MediaActionSound
 *  android.os.Build
 *  android.os.Build$VERSION
 *  android.os.Handler
 *  android.os.Looper
 *  android.util.AttributeSet
 *  android.view.MotionEvent
 *  android.view.View
 *  android.view.View$MeasureSpec
 *  android.view.ViewGroup
 *  android.view.ViewGroup$LayoutParams
 *  android.widget.FrameLayout
 */
package com.otaliastudios.cameraview;

import android.annotation.SuppressLint;
import android.annotation.TargetApi;
import android.app.Activity;
import android.content.Context;
import android.content.ContextWrapper;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.res.Resources;
import android.content.res.TypedArray;
import android.graphics.PointF;
import android.graphics.Rect;
import android.graphics.YuvImage;
import android.location.Location;
import android.media.MediaActionSound;
import android.os.Build;
import android.os.Handler;
import android.os.Looper;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.util.AttributeSet;
import android.view.MotionEvent;
import android.view.View;
import android.view.ViewGroup;
import android.widget.FrameLayout;
import com.otaliastudios.cameraview.AspectRatio;
import com.otaliastudios.cameraview.Audio;
import com.otaliastudios.cameraview.Camera1;
import com.otaliastudios.cameraview.CameraController;
import com.otaliastudios.cameraview.CameraException;
import com.otaliastudios.cameraview.CameraListener;
import com.otaliastudios.cameraview.CameraLogger;
import com.otaliastudios.cameraview.CameraOptions;
import com.otaliastudios.cameraview.CameraPreview;
import com.otaliastudios.cameraview.Control;
import com.otaliastudios.cameraview.CropHelper;
import com.otaliastudios.cameraview.ExtraProperties;
import com.otaliastudios.cameraview.Facing;
import com.otaliastudios.cameraview.Flash;
import com.otaliastudios.cameraview.Frame;
import com.otaliastudios.cameraview.FrameProcessor;
import com.otaliastudios.cameraview.Gesture;
import com.otaliastudios.cameraview.GestureAction;
import com.otaliastudios.cameraview.GestureLayout;
import com.otaliastudios.cameraview.Grid;
import com.otaliastudios.cameraview.GridLinesLayout;
import com.otaliastudios.cameraview.Hdr;
import com.otaliastudios.cameraview.OrientationHelper;
import com.otaliastudios.cameraview.PinchGestureLayout;
import com.otaliastudios.cameraview.R;
import com.otaliastudios.cameraview.ScrollGestureLayout;
import com.otaliastudios.cameraview.SessionType;
import com.otaliastudios.cameraview.Size;
import com.otaliastudios.cameraview.SizeSelector;
import com.otaliastudios.cameraview.SizeSelectors;
import com.otaliastudios.cameraview.SurfaceCameraPreview;
import com.otaliastudios.cameraview.TapGestureLayout;
import com.otaliastudios.cameraview.TextureCameraPreview;
import com.otaliastudios.cameraview.VideoCodec;
import com.otaliastudios.cameraview.VideoQuality;
import com.otaliastudios.cameraview.WhiteBalance;
import com.otaliastudios.cameraview.WorkerHandler;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.concurrent.CopyOnWriteArrayList;

public class CameraView
extends FrameLayout {
    static final boolean DEFAULT_CROP_OUTPUT = false;
    static final int DEFAULT_JPEG_QUALITY = 100;
    static final boolean DEFAULT_PLAY_SOUNDS = true;
    private static final CameraLogger LOG = CameraLogger.create(TAG);
    public static final int PERMISSION_REQUEST_CODE = 16;
    private static final String TAG = "CameraView";
    CameraCallbacks mCameraCallbacks;
    private CameraController mCameraController;
    private CameraPreview mCameraPreview;
    private boolean mCropOutput;
    List<FrameProcessor> mFrameProcessors = new CopyOnWriteArrayList<FrameProcessor>();
    private WorkerHandler mFrameProcessorsHandler;
    private HashMap<Gesture, GestureAction> mGestureMap = new HashMap(4);
    GridLinesLayout mGridLinesLayout;
    private int mJpegQuality;
    private boolean mKeepScreenOn;
    List<CameraListener> mListeners = new CopyOnWriteArrayList<CameraListener>();
    private OrientationHelper mOrientationHelper;
    PinchGestureLayout mPinchGestureLayout;
    private boolean mPlaySounds;
    ScrollGestureLayout mScrollGestureLayout;
    private MediaActionSound mSound;
    TapGestureLayout mTapGestureLayout;
    private Handler mUiHandler;
    private WorkerHandler mWorkerHandler;

    public CameraView(@NonNull Context context) {
        super(context, null);
        this.init(context, null);
    }

    public CameraView(@NonNull Context context, @Nullable AttributeSet attributeSet) {
        super(context, attributeSet);
        this.init(context, attributeSet);
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    private void checkPermissionsManifestOrThrow(SessionType arrstring, Audio audio) {
        int n;
        int n2;
        if (arrstring != SessionType.VIDEO) return;
        if (audio != Audio.ON) return;
        try {
            arrstring = this.getContext().getPackageManager().getPackageInfo((String)this.getContext().getPackageName(), (int)4096).requestedPermissions;
            n2 = arrstring.length;
            n = 0;
        }
        catch (PackageManager.NameNotFoundException nameNotFoundException) {
            return;
        }
        do {
            if (n >= n2) {
                LOG.e("Permission error:", "When the session type is set to video,", "the RECORD_AUDIO permission should be added to the app manifest file.");
                throw new IllegalStateException(CameraLogger.lastMessage);
            }
            if (arrstring[n].equals("android.permission.RECORD_AUDIO")) {
                return;
            }
            ++n;
        } while (true);
    }

    private void init(@NonNull Context context, @Nullable AttributeSet object) {
        this.setWillNotDraw(false);
        TypedArray typedArray = context.getTheme().obtainStyledAttributes((AttributeSet)object, R.styleable.CameraView, 0, 0);
        int n = typedArray.getInteger(R.styleable.CameraView_cameraJpegQuality, 100);
        boolean bl = typedArray.getBoolean(R.styleable.CameraView_cameraCropOutput, false);
        boolean bl2 = typedArray.getBoolean(R.styleable.CameraView_cameraPlaySounds, true);
        Facing facing = Facing.fromValue(typedArray.getInteger(R.styleable.CameraView_cameraFacing, Facing.DEFAULT.value()));
        Flash flash = Flash.fromValue(typedArray.getInteger(R.styleable.CameraView_cameraFlash, Flash.DEFAULT.value()));
        Grid grid = Grid.fromValue(typedArray.getInteger(R.styleable.CameraView_cameraGrid, Grid.DEFAULT.value()));
        WhiteBalance whiteBalance = WhiteBalance.fromValue(typedArray.getInteger(R.styleable.CameraView_cameraWhiteBalance, WhiteBalance.DEFAULT.value()));
        VideoQuality videoQuality = VideoQuality.fromValue(typedArray.getInteger(R.styleable.CameraView_cameraVideoQuality, VideoQuality.DEFAULT.value()));
        SessionType sessionType = SessionType.fromValue(typedArray.getInteger(R.styleable.CameraView_cameraSessionType, SessionType.DEFAULT.value()));
        Hdr hdr = Hdr.fromValue(typedArray.getInteger(R.styleable.CameraView_cameraHdr, Hdr.DEFAULT.value()));
        Audio audio = Audio.fromValue(typedArray.getInteger(R.styleable.CameraView_cameraAudio, Audio.DEFAULT.value()));
        VideoCodec videoCodec = VideoCodec.fromValue(typedArray.getInteger(R.styleable.CameraView_cameraVideoCodec, VideoCodec.DEFAULT.value()));
        long l = (long)typedArray.getFloat(R.styleable.CameraView_cameraVideoMaxSize, 0.0f);
        int n2 = typedArray.getInteger(R.styleable.CameraView_cameraVideoMaxDuration, 0);
        object = new ArrayList(3);
        if (typedArray.hasValue(R.styleable.CameraView_cameraPictureSizeMinWidth)) {
            object.add(SizeSelectors.minWidth(typedArray.getInteger(R.styleable.CameraView_cameraPictureSizeMinWidth, 0)));
        }
        if (typedArray.hasValue(R.styleable.CameraView_cameraPictureSizeMaxWidth)) {
            object.add(SizeSelectors.maxWidth(typedArray.getInteger(R.styleable.CameraView_cameraPictureSizeMaxWidth, 0)));
        }
        if (typedArray.hasValue(R.styleable.CameraView_cameraPictureSizeMinHeight)) {
            object.add(SizeSelectors.minHeight(typedArray.getInteger(R.styleable.CameraView_cameraPictureSizeMinHeight, 0)));
        }
        if (typedArray.hasValue(R.styleable.CameraView_cameraPictureSizeMaxHeight)) {
            object.add(SizeSelectors.maxHeight(typedArray.getInteger(R.styleable.CameraView_cameraPictureSizeMaxHeight, 0)));
        }
        if (typedArray.hasValue(R.styleable.CameraView_cameraPictureSizeMinArea)) {
            object.add(SizeSelectors.minArea(typedArray.getInteger(R.styleable.CameraView_cameraPictureSizeMinArea, 0)));
        }
        if (typedArray.hasValue(R.styleable.CameraView_cameraPictureSizeMaxArea)) {
            object.add(SizeSelectors.maxArea(typedArray.getInteger(R.styleable.CameraView_cameraPictureSizeMaxArea, 0)));
        }
        if (typedArray.hasValue(R.styleable.CameraView_cameraPictureSizeAspectRatio)) {
            object.add(SizeSelectors.aspectRatio(AspectRatio.parse(typedArray.getString(R.styleable.CameraView_cameraPictureSizeAspectRatio)), 0.0f));
        }
        if (typedArray.getBoolean(R.styleable.CameraView_cameraPictureSizeSmallest, false)) {
            object.add(SizeSelectors.smallest());
        }
        if (typedArray.getBoolean(R.styleable.CameraView_cameraPictureSizeBiggest, false)) {
            object.add(SizeSelectors.biggest());
        }
        object = !object.isEmpty() ? SizeSelectors.and(object.toArray(new SizeSelector[object.size()])) : SizeSelectors.biggest();
        GestureAction gestureAction = GestureAction.fromValue(typedArray.getInteger(R.styleable.CameraView_cameraGestureTap, GestureAction.DEFAULT_TAP.value()));
        GestureAction gestureAction2 = GestureAction.fromValue(typedArray.getInteger(R.styleable.CameraView_cameraGestureLongTap, GestureAction.DEFAULT_LONG_TAP.value()));
        GestureAction gestureAction3 = GestureAction.fromValue(typedArray.getInteger(R.styleable.CameraView_cameraGesturePinch, GestureAction.DEFAULT_PINCH.value()));
        GestureAction gestureAction4 = GestureAction.fromValue(typedArray.getInteger(R.styleable.CameraView_cameraGestureScrollHorizontal, GestureAction.DEFAULT_SCROLL_HORIZONTAL.value()));
        GestureAction gestureAction5 = GestureAction.fromValue(typedArray.getInteger(R.styleable.CameraView_cameraGestureScrollVertical, GestureAction.DEFAULT_SCROLL_VERTICAL.value()));
        typedArray.recycle();
        this.mCameraCallbacks = new Callbacks();
        this.mCameraController = this.instantiateCameraController(this.mCameraCallbacks);
        this.mUiHandler = new Handler(Looper.getMainLooper());
        this.mWorkerHandler = WorkerHandler.get("CameraViewWorker");
        this.mFrameProcessorsHandler = WorkerHandler.get("FrameProcessorsWorker");
        this.mGridLinesLayout = new GridLinesLayout(context);
        this.mPinchGestureLayout = new PinchGestureLayout(context);
        this.mTapGestureLayout = new TapGestureLayout(context);
        this.mScrollGestureLayout = new ScrollGestureLayout(context);
        this.addView((View)this.mGridLinesLayout);
        this.addView((View)this.mPinchGestureLayout);
        this.addView((View)this.mTapGestureLayout);
        this.addView((View)this.mScrollGestureLayout);
        this.setCropOutput(bl);
        this.setJpegQuality(n);
        this.setPlaySounds(bl2);
        this.setFacing(facing);
        this.setFlash(flash);
        this.setSessionType(sessionType);
        this.setVideoQuality(videoQuality);
        this.setWhiteBalance(whiteBalance);
        this.setGrid(grid);
        this.setHdr(hdr);
        this.setAudio(audio);
        this.setPictureSize((SizeSelector)object);
        this.setVideoCodec(videoCodec);
        this.setVideoMaxSize(l);
        this.setVideoMaxDuration(n2);
        this.mapGesture(Gesture.TAP, gestureAction);
        this.mapGesture(Gesture.LONG_TAP, gestureAction2);
        this.mapGesture(Gesture.PINCH, gestureAction3);
        this.mapGesture(Gesture.SCROLL_HORIZONTAL, gestureAction4);
        this.mapGesture(Gesture.SCROLL_VERTICAL, gestureAction5);
        if (!this.isInEditMode()) {
            this.mOrientationHelper = new OrientationHelper(context, this.mCameraCallbacks);
        }
    }

    private boolean isStopped() {
        if (this.mCameraController.getState() == 0) {
            return true;
        }
        return false;
    }

    private String ms(int n) {
        if (n != Integer.MIN_VALUE) {
            if (n != 0) {
                if (n != 1073741824) {
                    return null;
                }
                return "EXACTLY";
            }
            return "UNSPECIFIED";
        }
        return "AT_MOST";
    }

    private void onGesture(GestureLayout gestureLayout, @NonNull CameraOptions cameraOptions) {
        Gesture gesture = gestureLayout.getGestureType();
        GestureAction gestureAction = this.mGestureMap.get((Object)gesture);
        PointF[] arrpointF = gestureLayout.getPoints();
        switch (.$SwitchMap$com$otaliastudios$cameraview$GestureAction[gestureAction.ordinal()]) {
            default: {
                return;
            }
            case 5: {
                float f = this.mCameraController.getExposureCorrectionValue();
                float f2 = cameraOptions.getExposureCorrectionMinValue();
                float f3 = cameraOptions.getExposureCorrectionMaxValue();
                float f4 = gestureLayout.scaleValue(f, f2, f3);
                if (f4 == f) break;
                this.mCameraController.setExposureCorrection(f4, new float[]{f2, f3}, arrpointF, true);
                return;
            }
            case 4: {
                float f = this.mCameraController.getZoomValue();
                float f5 = gestureLayout.scaleValue(f, 0.0f, 1.0f);
                if (f5 == f) break;
                this.mCameraController.setZoom(f5, arrpointF, true);
                return;
            }
            case 2: 
            case 3: {
                this.mCameraController.startAutoFocus(gesture, arrpointF[0]);
                return;
            }
            case 1: {
                this.mCameraController.capturePicture();
            }
        }
    }

    @SuppressLint(value={"NewApi"})
    private void playSound(int n) {
        if (this.mPlaySounds) {
            if (this.mSound == null) {
                this.mSound = new MediaActionSound();
            }
            this.mSound.play(n);
        }
    }

    @TargetApi(value=23)
    private void requestPermissions(boolean bl, boolean bl2) {
        Object object = this.getContext();
        Activity activity = null;
        while (object instanceof ContextWrapper) {
            if (object instanceof Activity) {
                activity = (Activity)object;
            }
            object = ((ContextWrapper)object).getBaseContext();
        }
        object = new ArrayList();
        if (bl) {
            object.add("android.permission.CAMERA");
        }
        if (bl2) {
            object.add("android.permission.RECORD_AUDIO");
        }
        if (activity != null) {
            activity.requestPermissions(object.toArray(new String[object.size()]), 16);
        }
    }

    public void addCameraListener(CameraListener cameraListener) {
        if (cameraListener != null) {
            this.mListeners.add(cameraListener);
        }
    }

    public void addFrameProcessor(FrameProcessor frameProcessor) {
        if (frameProcessor != null) {
            this.mFrameProcessors.add(frameProcessor);
        }
    }

    public void capturePicture() {
        this.mCameraController.capturePicture();
    }

    public void captureSnapshot() {
        this.mCameraController.captureSnapshot();
    }

    @SuppressLint(value={"NewApi"})
    protected boolean checkPermissions(SessionType sessionType, Audio audio) {
        this.checkPermissionsManifestOrThrow(sessionType, audio);
        if (Build.VERSION.SDK_INT < 23) {
            return true;
        }
        Context context = this.getContext();
        boolean bl = sessionType == SessionType.VIDEO && audio == Audio.ON;
        boolean bl2 = context.checkSelfPermission("android.permission.CAMERA") != 0;
        boolean bl3 = bl && context.checkSelfPermission("android.permission.RECORD_AUDIO") != 0;
        if (!bl2 && !bl3) {
            return true;
        }
        this.requestPermissions(bl2, bl3);
        return false;
    }

    public void clearCameraListeners() {
        this.mListeners.clear();
    }

    public void clearFrameProcessors() {
        this.mFrameProcessors.clear();
    }

    public void clearGesture(@NonNull Gesture gesture) {
        this.mapGesture(gesture, GestureAction.NONE);
    }

    public void destroy() {
        this.clearCameraListeners();
        this.clearFrameProcessors();
        this.mCameraController.destroy();
    }

    public Audio getAudio() {
        return this.mCameraController.getAudio();
    }

    int getCameraId() {
        return this.mCameraController.mCameraId;
    }

    @Nullable
    public CameraOptions getCameraOptions() {
        return this.mCameraController.getCameraOptions();
    }

    @Deprecated
    @Nullable
    public Size getCaptureSize() {
        return this.getPictureSize();
    }

    public boolean getCropOutput() {
        return this.mCropOutput;
    }

    public float getExposureCorrection() {
        return this.mCameraController.getExposureCorrectionValue();
    }

    @Nullable
    public ExtraProperties getExtraProperties() {
        return this.mCameraController.getExtraProperties();
    }

    public Facing getFacing() {
        return this.mCameraController.getFacing();
    }

    public Flash getFlash() {
        return this.mCameraController.getFlash();
    }

    public GestureAction getGestureAction(@NonNull Gesture gesture) {
        return this.mGestureMap.get((Object)gesture);
    }

    public Grid getGrid() {
        return this.mGridLinesLayout.getGridMode();
    }

    public Hdr getHdr() {
        return this.mCameraController.getHdr();
    }

    public int getJpegQuality() {
        return this.mJpegQuality;
    }

    @Nullable
    public Location getLocation() {
        return this.mCameraController.getLocation();
    }

    @Nullable
    public Size getPictureSize() {
        if (this.mCameraController != null) {
            return this.mCameraController.getPictureSize();
        }
        return null;
    }

    public boolean getPlaySounds() {
        return this.mPlaySounds;
    }

    @Nullable
    public Size getPreviewSize() {
        if (this.mCameraController != null) {
            return this.mCameraController.getPreviewSize();
        }
        return null;
    }

    public SessionType getSessionType() {
        return this.mCameraController.getSessionType();
    }

    @Nullable
    public Size getSnapshotSize() {
        return this.getPreviewSize();
    }

    public VideoCodec getVideoCodec() {
        return this.mCameraController.getVideoCodec();
    }

    public int getVideoMaxDuration() {
        return this.mCameraController.getVideoMaxDuration();
    }

    public long getVideoMaxSize() {
        return this.mCameraController.getVideoMaxSize();
    }

    public VideoQuality getVideoQuality() {
        return this.mCameraController.getVideoQuality();
    }

    public WhiteBalance getWhiteBalance() {
        return this.mCameraController.getWhiteBalance();
    }

    public float getZoom() {
        return this.mCameraController.getZoomValue();
    }

    protected CameraController instantiateCameraController(CameraCallbacks cameraCallbacks) {
        return new Camera1(cameraCallbacks);
    }

    protected CameraPreview instantiatePreview(Context context, ViewGroup viewGroup) {
        LOG.w("preview:", "isHardwareAccelerated:", this.isHardwareAccelerated());
        if (this.isHardwareAccelerated()) {
            return new TextureCameraPreview(context, viewGroup, null);
        }
        return new SurfaceCameraPreview(context, viewGroup, null);
    }

    void instantiatePreview() {
        this.mCameraPreview = this.instantiatePreview(this.getContext(), (ViewGroup)this);
        this.mCameraController.setPreview(this.mCameraPreview);
    }

    public boolean isCapturingVideo() {
        return this.mCameraController.isCapturingVideo();
    }

    public boolean isStarted() {
        if (this.mCameraController.getState() >= 2) {
            return true;
        }
        return false;
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Lifted jumps to return sites
     */
    public boolean mapGesture(@NonNull Gesture var1_1, GestureAction var2_2) {
        var7_3 = GestureAction.NONE;
        var6_4 = var1_1.isAssignableTo(var2_2);
        var4_5 = false;
        var5_6 = false;
        var3_7 = false;
        if (!var6_4) {
            this.mapGesture((Gesture)var1_1, var7_3);
            return false;
        }
        this.mGestureMap.put((Gesture)var1_1, var2_2);
        switch (.$SwitchMap$com$otaliastudios$cameraview$Gesture[var1_1.ordinal()]) {
            default: {
                return true;
            }
            case 4: 
            case 5: {
                var1_1 = this.mScrollGestureLayout;
                if (this.mGestureMap.get((Object)Gesture.SCROLL_HORIZONTAL) != var7_3 || this.mGestureMap.get((Object)Gesture.SCROLL_VERTICAL) != var7_3) {
                    var3_7 = true;
                }
                var1_1.enable(var3_7);
                return true;
            }
            case 2: 
            case 3: {
                var1_1 = this.mTapGestureLayout;
                if (this.mGestureMap.get((Object)Gesture.TAP) != var7_3) ** GOTO lbl24
                var3_7 = var4_5;
                if (this.mGestureMap.get((Object)Gesture.LONG_TAP) == var7_3) ** GOTO lbl25
lbl24: // 2 sources:
                var3_7 = true;
lbl25: // 2 sources:
                var1_1.enable(var3_7);
                return true;
            }
            case 1: 
        }
        var1_1 = this.mPinchGestureLayout;
        var3_7 = var5_6;
        if (this.mGestureMap.get((Object)Gesture.PINCH) != var7_3) {
            var3_7 = true;
        }
        var1_1.enable(var3_7);
        return true;
    }

    protected void onAttachedToWindow() {
        super.onAttachedToWindow();
        if (this.mCameraPreview == null) {
            this.instantiatePreview();
        }
        if (!this.isInEditMode()) {
            this.mOrientationHelper.enable(this.getContext());
        }
    }

    protected void onDetachedFromWindow() {
        if (!this.isInEditMode()) {
            this.mOrientationHelper.disable();
        }
        super.onDetachedFromWindow();
    }

    public boolean onInterceptTouchEvent(MotionEvent motionEvent) {
        return true;
    }

    /*
     * Enabled aggressive block sorting
     */
    protected void onMeasure(int n, int n2) {
        int n3;
        Object object = this.getPreviewSize();
        if (object == null) {
            LOG.w("onMeasure:", "surface is not ready. Calling default behavior.");
            super.onMeasure(n, n2);
            return;
        }
        int n4 = View.MeasureSpec.getMode((int)n);
        int n5 = View.MeasureSpec.getMode((int)n2);
        int n6 = View.MeasureSpec.getSize((int)n);
        int n7 = View.MeasureSpec.getSize((int)n2);
        boolean bl = this.mCameraController.shouldFlipSizes();
        int n8 = bl ? object.getHeight() : object.getWidth();
        float f = n8;
        n8 = bl ? object.getWidth() : object.getHeight();
        float f2 = n8;
        object = this.getLayoutParams();
        if (!this.mCameraPreview.supportsCropping()) {
            n8 = n4;
            if (n4 == 1073741824) {
                n8 = Integer.MIN_VALUE;
            }
            n3 = n8;
            n4 = n5;
            if (n5 == 1073741824) {
                n4 = Integer.MIN_VALUE;
                n3 = n8;
            }
        } else {
            n8 = n4;
            if (n4 == Integer.MIN_VALUE) {
                n8 = n4;
                if (object.width == -1) {
                    n8 = 1073741824;
                }
            }
            n3 = n8;
            n4 = n5;
            if (n5 == Integer.MIN_VALUE) {
                n3 = n8;
                n4 = n5;
                if (object.height == -1) {
                    n4 = 1073741824;
                    n3 = n8;
                }
            }
        }
        object = LOG;
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("(");
        stringBuilder.append(n6);
        stringBuilder.append("[");
        stringBuilder.append(this.ms(n3));
        stringBuilder.append("]x");
        stringBuilder.append(n7);
        stringBuilder.append("[");
        stringBuilder.append(this.ms(n4));
        stringBuilder.append("])");
        object.i("onMeasure:", "requested dimensions are", stringBuilder.toString());
        object = LOG;
        stringBuilder = new StringBuilder();
        stringBuilder.append("(");
        stringBuilder.append(f);
        stringBuilder.append("x");
        stringBuilder.append(f2);
        stringBuilder.append(")");
        object.i("onMeasure:", "previewSize is", stringBuilder.toString());
        if (n3 == 1073741824 && n4 == 1073741824) {
            object = LOG;
            stringBuilder = new StringBuilder();
            stringBuilder.append("(");
            stringBuilder.append(n6);
            stringBuilder.append("x");
            stringBuilder.append(n7);
            stringBuilder.append(")");
            object.w("onMeasure:", "both are MATCH_PARENT or fixed value. We adapt.", "This means CROP_CENTER.", stringBuilder.toString());
            super.onMeasure(n, n2);
            return;
        }
        if (n3 == 0 && n4 == 0) {
            object = LOG;
            stringBuilder = new StringBuilder();
            stringBuilder.append("(");
            stringBuilder.append(f);
            stringBuilder.append("x");
            stringBuilder.append(f2);
            stringBuilder.append(")");
            object.i("onMeasure:", "both are completely free.", "We respect that and extend to the whole preview size.", stringBuilder.toString());
            super.onMeasure(View.MeasureSpec.makeMeasureSpec((int)((int)f), (int)1073741824), View.MeasureSpec.makeMeasureSpec((int)((int)f2), (int)1073741824));
            return;
        }
        f = f2 / f;
        if (n3 != 0 && n4 != 0) {
            if (n3 != 1073741824 && n4 != 1073741824) {
                f2 = n7;
                float f3 = n6;
                if (f2 / f3 >= f) {
                    n7 = (int)(f3 * f);
                } else {
                    n6 = (int)(f2 / f);
                }
                object = LOG;
                stringBuilder = new StringBuilder();
                stringBuilder.append("(");
                stringBuilder.append(n6);
                stringBuilder.append("x");
                stringBuilder.append(n7);
                stringBuilder.append(")");
                object.i("onMeasure:", "both dimension were AT_MOST.", "We fit the preview aspect ratio.", stringBuilder.toString());
                super.onMeasure(View.MeasureSpec.makeMeasureSpec((int)n6, (int)1073741824), View.MeasureSpec.makeMeasureSpec((int)n7, (int)1073741824));
                return;
            }
            n = n3 == Integer.MIN_VALUE ? 1 : 0;
            if (n != 0) {
                n6 = Math.min((int)((float)n7 / f), n6);
            } else {
                n7 = Math.min((int)((float)n6 * f), n7);
            }
            object = LOG;
            stringBuilder = new StringBuilder();
            stringBuilder.append("(");
            stringBuilder.append(n6);
            stringBuilder.append("x");
            stringBuilder.append(n7);
            stringBuilder.append(")");
            object.i("onMeasure:", "one dimension was EXACTLY, another AT_MOST.", "We have TRIED to fit the aspect ratio, but it's not guaranteed.", stringBuilder.toString());
            super.onMeasure(View.MeasureSpec.makeMeasureSpec((int)n6, (int)1073741824), View.MeasureSpec.makeMeasureSpec((int)n7, (int)1073741824));
            return;
        }
        n = n3 == 0 ? 1 : 0;
        if (n != 0) {
            n6 = (int)((float)n7 / f);
        } else {
            n7 = (int)((float)n6 * f);
        }
        object = LOG;
        stringBuilder = new StringBuilder();
        stringBuilder.append("(");
        stringBuilder.append(n6);
        stringBuilder.append("x");
        stringBuilder.append(n7);
        stringBuilder.append(")");
        object.i("onMeasure:", "one dimension was free, we adapted it to fit the aspect ratio.", stringBuilder.toString());
        super.onMeasure(View.MeasureSpec.makeMeasureSpec((int)n6, (int)1073741824), View.MeasureSpec.makeMeasureSpec((int)n7, (int)1073741824));
    }

    public boolean onTouchEvent(MotionEvent motionEvent) {
        if (!this.isStarted()) {
            return true;
        }
        CameraOptions cameraOptions = this.mCameraController.getCameraOptions();
        if (this.mPinchGestureLayout.onTouchEvent(motionEvent)) {
            LOG.i("onTouchEvent", "pinch!");
            this.onGesture(this.mPinchGestureLayout, cameraOptions);
            return true;
        }
        if (this.mScrollGestureLayout.onTouchEvent(motionEvent)) {
            LOG.i("onTouchEvent", "scroll!");
            this.onGesture(this.mScrollGestureLayout, cameraOptions);
            return true;
        }
        if (this.mTapGestureLayout.onTouchEvent(motionEvent)) {
            LOG.i("onTouchEvent", "tap!");
            this.onGesture(this.mTapGestureLayout, cameraOptions);
        }
        return true;
    }

    public void removeCameraListener(CameraListener cameraListener) {
        if (cameraListener != null) {
            this.mListeners.remove(cameraListener);
        }
    }

    public void removeFrameProcessor(FrameProcessor frameProcessor) {
        if (frameProcessor != null) {
            this.mFrameProcessors.remove(frameProcessor);
        }
    }

    public void set(Control control) {
        if (control instanceof Audio) {
            this.setAudio((Audio)control);
            return;
        }
        if (control instanceof Facing) {
            this.setFacing((Facing)control);
            return;
        }
        if (control instanceof Flash) {
            this.setFlash((Flash)control);
            return;
        }
        if (control instanceof Grid) {
            this.setGrid((Grid)control);
            return;
        }
        if (control instanceof Hdr) {
            this.setHdr((Hdr)control);
            return;
        }
        if (control instanceof SessionType) {
            this.setSessionType((SessionType)control);
            return;
        }
        if (control instanceof VideoQuality) {
            this.setVideoQuality((VideoQuality)control);
            return;
        }
        if (control instanceof WhiteBalance) {
            this.setWhiteBalance((WhiteBalance)control);
            return;
        }
        if (control instanceof VideoCodec) {
            this.setVideoCodec((VideoCodec)control);
        }
    }

    public void setAudio(Audio audio) {
        if (audio != this.getAudio() && !this.isStopped()) {
            if (this.checkPermissions(this.getSessionType(), audio)) {
                this.mCameraController.setAudio(audio);
                return;
            }
            this.stop();
            return;
        }
        this.mCameraController.setAudio(audio);
    }

    @Deprecated
    public void setCameraListener(CameraListener cameraListener) {
        this.mListeners.clear();
        this.addCameraListener(cameraListener);
    }

    public void setCropOutput(boolean bl) {
        this.mCropOutput = bl;
    }

    public void setExposureCorrection(float f) {
        CameraOptions cameraOptions = this.getCameraOptions();
        if (cameraOptions != null) {
            float f2 = cameraOptions.getExposureCorrectionMinValue();
            float f3 = cameraOptions.getExposureCorrectionMaxValue();
            float f4 = f;
            if (f < f2) {
                f4 = f2;
            }
            f = f4;
            if (f4 > f3) {
                f = f3;
            }
            this.mCameraController.setExposureCorrection(f, null, null, false);
        }
    }

    public void setFacing(Facing facing) {
        this.mCameraController.setFacing(facing);
    }

    public void setFlash(Flash flash) {
        this.mCameraController.setFlash(flash);
    }

    public void setGrid(Grid grid) {
        this.mGridLinesLayout.setGridMode(grid);
    }

    public void setHdr(Hdr hdr) {
        this.mCameraController.setHdr(hdr);
    }

    public void setJpegQuality(int n) {
        if (n > 0 && n <= 100) {
            this.mJpegQuality = n;
            return;
        }
        throw new IllegalArgumentException("JPEG quality should be > 0 and <= 100");
    }

    public void setLocation(double d, double d2) {
        Location location = new Location("Unknown");
        location.setTime(System.currentTimeMillis());
        location.setAltitude(0.0);
        location.setLatitude(d);
        location.setLongitude(d2);
        this.mCameraController.setLocation(location);
    }

    public void setLocation(Location location) {
        this.mCameraController.setLocation(location);
    }

    public void setPictureSize(@NonNull SizeSelector sizeSelector) {
        this.mCameraController.setPictureSizeSelector(sizeSelector);
    }

    public void setPlaySounds(boolean bl) {
        boolean bl2 = bl && Build.VERSION.SDK_INT >= 16;
        this.mPlaySounds = bl2;
        this.mCameraController.setPlaySounds(bl);
    }

    public void setSessionType(SessionType sessionType) {
        if (sessionType != this.getSessionType() && !this.isStopped()) {
            if (this.checkPermissions(sessionType, this.getAudio())) {
                this.mCameraController.setSessionType(sessionType);
                return;
            }
            this.stop();
            return;
        }
        this.mCameraController.setSessionType(sessionType);
    }

    public void setVideoCodec(VideoCodec videoCodec) {
        this.mCameraController.setVideoCodec(videoCodec);
    }

    public void setVideoMaxDuration(int n) {
        this.mCameraController.setVideoMaxDuration(n);
    }

    public void setVideoMaxSize(long l) {
        this.mCameraController.setVideoMaxSize(l);
    }

    public void setVideoQuality(VideoQuality videoQuality) {
        this.mCameraController.setVideoQuality(videoQuality);
    }

    public void setWhiteBalance(WhiteBalance whiteBalance) {
        this.mCameraController.setWhiteBalance(whiteBalance);
    }

    public void setZoom(float f) {
        float f2 = f;
        if (f < 0.0f) {
            f2 = 0.0f;
        }
        f = f2;
        if (f2 > 1.0f) {
            f = 1.0f;
        }
        this.mCameraController.setZoom(f, null, false);
    }

    public void start() {
        if (!this.isEnabled()) {
            return;
        }
        if (this.checkPermissions(this.getSessionType(), this.getAudio())) {
            this.mOrientationHelper.enable(this.getContext());
            this.mCameraController.setDisplayOffset(this.mOrientationHelper.getDisplayOffset());
            this.mCameraController.start();
        }
    }

    public void startAutoFocus(float f, float f2) {
        if (f >= 0.0f && f <= (float)this.getWidth()) {
            if (f2 >= 0.0f && f2 <= (float)this.getHeight()) {
                this.mCameraController.startAutoFocus(null, new PointF(f, f2));
                return;
            }
            throw new IllegalArgumentException("y should be >= 0 and <= getHeight()");
        }
        throw new IllegalArgumentException("x should be >= 0 and <= getWidth()");
    }

    @Deprecated
    public void startCapturingVideo() {
        this.startCapturingVideo(null);
    }

    public void startCapturingVideo(File file) {
        File file2 = file;
        if (file == null) {
            file2 = new File(this.getContext().getFilesDir(), "video.mp4");
        }
        this.mCameraController.startVideo(file2);
        this.mUiHandler.post(new Runnable(){

            @Override
            public void run() {
                CameraView.this.mKeepScreenOn = CameraView.this.getKeepScreenOn();
                if (!CameraView.this.mKeepScreenOn) {
                    CameraView.this.setKeepScreenOn(true);
                }
            }
        });
    }

    @Deprecated
    public void startCapturingVideo(File file, long l) {
        this.addCameraListener(new CameraListener(this.getVideoMaxDuration()){
            final /* synthetic */ int val$old;
            {
                this.val$old = n;
            }

            @Override
            public void onVideoTaken(File file) {
                CameraView.this.setVideoMaxDuration(this.val$old);
                CameraView.this.removeCameraListener(this);
            }
        });
        this.setVideoMaxDuration((int)l);
        this.startCapturingVideo(file);
    }

    public void stop() {
        this.mCameraController.stop();
    }

    public void stopCapturingVideo() {
        this.mCameraController.endVideo();
        this.mUiHandler.post(new Runnable(){

            @Override
            public void run() {
                if (CameraView.this.getKeepScreenOn() != CameraView.this.mKeepScreenOn) {
                    CameraView.this.setKeepScreenOn(CameraView.this.mKeepScreenOn);
                }
            }
        });
    }

    public Facing toggleFacing() {
        Facing facing = this.mCameraController.getFacing();
        switch (.$SwitchMap$com$otaliastudios$cameraview$Facing[facing.ordinal()]) {
            default: {
                break;
            }
            case 2: {
                this.setFacing(Facing.BACK);
                break;
            }
            case 1: {
                this.setFacing(Facing.FRONT);
            }
        }
        return this.mCameraController.getFacing();
    }

    @Deprecated
    public Flash toggleFlash() {
        Flash flash = this.mCameraController.getFlash();
        switch (.$SwitchMap$com$otaliastudios$cameraview$Flash[flash.ordinal()]) {
            default: {
                break;
            }
            case 3: 
            case 4: {
                this.setFlash(Flash.OFF);
                break;
            }
            case 2: {
                this.setFlash(Flash.AUTO);
                break;
            }
            case 1: {
                this.setFlash(Flash.ON);
            }
        }
        return this.mCameraController.getFlash();
    }

    private class Callbacks
    implements CameraCallbacks {
        private CameraLogger mLogger = CameraLogger.create(CameraCallbacks.class.getSimpleName());

        Callbacks() {
        }

        private void dispatchOnPictureTaken(final byte[] arrby) {
            this.mLogger.i("dispatchOnPictureTaken");
            CameraView.this.mUiHandler.post(new Runnable(){

                @Override
                public void run() {
                    Iterator<CameraListener> iterator = CameraView.this.mListeners.iterator();
                    while (iterator.hasNext()) {
                        iterator.next().onPictureTaken(arrby);
                    }
                }
            });
        }

        @Override
        public void dispatchError(final CameraException cameraException) {
            this.mLogger.i("dispatchError", cameraException);
            CameraView.this.mUiHandler.post(new Runnable(){

                @Override
                public void run() {
                    Iterator<CameraListener> iterator = CameraView.this.mListeners.iterator();
                    while (iterator.hasNext()) {
                        iterator.next().onCameraError(cameraException);
                    }
                }
            });
        }

        @Override
        public void dispatchFrame(final Frame frame) {
            if (CameraView.this.mFrameProcessors.isEmpty()) {
                frame.release();
                return;
            }
            this.mLogger.v("dispatchFrame:", frame.getTime(), "processors:", CameraView.this.mFrameProcessors.size());
            CameraView.this.mFrameProcessorsHandler.post(new Runnable(){

                @Override
                public void run() {
                    Iterator<FrameProcessor> iterator = CameraView.this.mFrameProcessors.iterator();
                    while (iterator.hasNext()) {
                        iterator.next().process(frame);
                    }
                    frame.release();
                }
            });
        }

        @Override
        public void dispatchOnCameraClosed() {
            this.mLogger.i("dispatchOnCameraClosed");
            CameraView.this.mUiHandler.post(new Runnable(){

                @Override
                public void run() {
                    Iterator<CameraListener> iterator = CameraView.this.mListeners.iterator();
                    while (iterator.hasNext()) {
                        iterator.next().onCameraClosed();
                    }
                }
            });
        }

        @Override
        public void dispatchOnCameraOpened(final CameraOptions cameraOptions) {
            this.mLogger.i("dispatchOnCameraOpened", cameraOptions);
            CameraView.this.mUiHandler.post(new Runnable(){

                @Override
                public void run() {
                    Iterator<CameraListener> iterator = CameraView.this.mListeners.iterator();
                    while (iterator.hasNext()) {
                        iterator.next().onCameraOpened(cameraOptions);
                    }
                }
            });
        }

        @Override
        public void dispatchOnExposureCorrectionChanged(final float f, final float[] arrf, final PointF[] arrpointF) {
            this.mLogger.i("dispatchOnExposureCorrectionChanged", Float.valueOf(f));
            CameraView.this.mUiHandler.post(new Runnable(){

                @Override
                public void run() {
                    Iterator<CameraListener> iterator = CameraView.this.mListeners.iterator();
                    while (iterator.hasNext()) {
                        iterator.next().onExposureCorrectionChanged(f, arrf, arrpointF);
                    }
                }
            });
        }

        @Override
        public void dispatchOnFocusEnd(final @Nullable Gesture gesture, final boolean bl, final PointF pointF) {
            this.mLogger.i(new Object[]{"dispatchOnFocusEnd", gesture, bl, pointF});
            CameraView.this.mUiHandler.post(new Runnable(){

                @Override
                public void run() {
                    if (bl && CameraView.this.mPlaySounds) {
                        CameraView.this.playSound(1);
                    }
                    if (gesture != null && CameraView.this.mGestureMap.get((Object)gesture) == GestureAction.FOCUS_WITH_MARKER) {
                        CameraView.this.mTapGestureLayout.onFocusEnd(bl);
                    }
                    Iterator<CameraListener> iterator = CameraView.this.mListeners.iterator();
                    while (iterator.hasNext()) {
                        iterator.next().onFocusEnd(bl, pointF);
                    }
                }
            });
        }

        @Override
        public void dispatchOnFocusStart(final @Nullable Gesture gesture, final PointF pointF) {
            this.mLogger.i(new Object[]{"dispatchOnFocusStart", gesture, pointF});
            CameraView.this.mUiHandler.post(new Runnable(){

                @Override
                public void run() {
                    if (gesture != null && CameraView.this.mGestureMap.get((Object)gesture) == GestureAction.FOCUS_WITH_MARKER) {
                        CameraView.this.mTapGestureLayout.onFocusStart(pointF);
                    }
                    Iterator<CameraListener> iterator = CameraView.this.mListeners.iterator();
                    while (iterator.hasNext()) {
                        iterator.next().onFocusStart(pointF);
                    }
                }
            });
        }

        @Override
        public void dispatchOnVideoTaken(final File file) {
            this.mLogger.i("dispatchOnVideoTaken", file);
            CameraView.this.mUiHandler.post(new Runnable(){

                @Override
                public void run() {
                    Iterator<CameraListener> iterator = CameraView.this.mListeners.iterator();
                    while (iterator.hasNext()) {
                        iterator.next().onVideoTaken(file);
                    }
                }
            });
        }

        @Override
        public void dispatchOnZoomChanged(final float f, final PointF[] arrpointF) {
            this.mLogger.i("dispatchOnZoomChanged", Float.valueOf(f));
            CameraView.this.mUiHandler.post(new Runnable(){

                @Override
                public void run() {
                    for (CameraListener cameraListener : CameraView.this.mListeners) {
                        float f2 = f;
                        PointF[] arrpointF2 = arrpointF;
                        cameraListener.onZoomChanged(f2, new float[]{0.0f, 1.0f}, arrpointF2);
                    }
                }
            });
        }

        @Override
        public void onCameraPreviewSizeChanged() {
            this.mLogger.i("onCameraPreviewSizeChanged");
            CameraView.this.mUiHandler.post(new Runnable(){

                @Override
                public void run() {
                    CameraView.this.requestLayout();
                }
            });
        }

        @Override
        public void onDeviceOrientationChanged(int n) {
            this.mLogger.i("onDeviceOrientationChanged", n);
            CameraView.this.mCameraController.setDeviceOrientation(n);
            int n2 = CameraView.this.mOrientationHelper.getDisplayOffset();
            CameraView.this.mUiHandler.post(new Runnable((n + n2) % 360){
                final /* synthetic */ int val$value;
                {
                    this.val$value = n;
                }

                @Override
                public void run() {
                    Iterator<CameraListener> iterator = CameraView.this.mListeners.iterator();
                    while (iterator.hasNext()) {
                        iterator.next().onOrientationChanged(this.val$value);
                    }
                }
            });
        }

        @Override
        public void onShutter(boolean bl) {
            if (bl && CameraView.this.mPlaySounds) {
                CameraView.this.playSound(0);
            }
        }

        @Override
        public void processImage(final byte[] arrby, final boolean bl, boolean bl2) {
            this.mLogger.i("processImage");
            CameraView.this.mWorkerHandler.post(new Runnable(){

                @Override
                public void run() {
                    byte[] arrby2;
                    Object object = arrby2 = arrby;
                    if (CameraView.this.mCropOutput) {
                        object = arrby2;
                        if (CameraView.this.mCameraPreview.isCropping()) {
                            int n = bl ? CameraView.this.getWidth() : CameraView.this.getHeight();
                            int n2 = bl ? CameraView.this.getHeight() : CameraView.this.getWidth();
                            object = AspectRatio.of(n, n2);
                            Callbacks.this.mLogger.i("processImage", "is consistent?", bl);
                            Callbacks.this.mLogger.i("processImage", "viewWidth?", CameraView.this.getWidth(), "viewHeight?", CameraView.this.getHeight());
                            object = CropHelper.cropToJpeg(arrby, (AspectRatio)object, CameraView.this.mJpegQuality);
                        }
                    }
                    Callbacks.this.dispatchOnPictureTaken(object);
                }
            });
        }

        @Override
        public void processSnapshot(final YuvImage yuvImage, final boolean bl, boolean bl2) {
            this.mLogger.i("processSnapshot");
            CameraView.this.mWorkerHandler.post(new Runnable(){

                @Override
                public void run() {
                    byte[] arrby;
                    if (CameraView.this.mCropOutput && CameraView.this.mCameraPreview.isCropping()) {
                        int n = bl ? CameraView.this.getWidth() : CameraView.this.getHeight();
                        int n2 = bl ? CameraView.this.getHeight() : CameraView.this.getWidth();
                        arrby = AspectRatio.of(n, n2);
                        Callbacks.this.mLogger.i("processSnapshot", "is consistent?", bl);
                        Callbacks.this.mLogger.i("processSnapshot", "viewWidth?", CameraView.this.getWidth(), "viewHeight?", CameraView.this.getHeight());
                        arrby = CropHelper.cropToJpeg(yuvImage, (AspectRatio)arrby, CameraView.this.mJpegQuality);
                    } else {
                        arrby = new ByteArrayOutputStream();
                        yuvImage.compressToJpeg(new Rect(0, 0, yuvImage.getWidth(), yuvImage.getHeight()), CameraView.this.mJpegQuality, (OutputStream)arrby);
                        arrby = arrby.toByteArray();
                    }
                    Callbacks.this.dispatchOnPictureTaken(arrby);
                }
            });
        }

    }

    static interface CameraCallbacks
    extends OrientationHelper.Callback {
        public void dispatchError(CameraException var1);

        public void dispatchFrame(Frame var1);

        public void dispatchOnCameraClosed();

        public void dispatchOnCameraOpened(CameraOptions var1);

        public void dispatchOnExposureCorrectionChanged(float var1, float[] var2, PointF[] var3);

        public void dispatchOnFocusEnd(@Nullable Gesture var1, boolean var2, PointF var3);

        public void dispatchOnFocusStart(@Nullable Gesture var1, PointF var2);

        public void dispatchOnVideoTaken(File var1);

        public void dispatchOnZoomChanged(float var1, PointF[] var2);

        public void onCameraPreviewSizeChanged();

        public void onShutter(boolean var1);

        public void processImage(byte[] var1, boolean var2, boolean var3);

        public void processSnapshot(YuvImage var1, boolean var2, boolean var3);
    }

}

