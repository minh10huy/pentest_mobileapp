/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.content.Context
 *  android.content.pm.PackageManager
 *  android.graphics.Bitmap
 *  android.hardware.Camera
 *  android.hardware.Camera$CameraInfo
 *  android.os.Handler
 */
package com.otaliastudios.cameraview;

import android.content.Context;
import android.content.pm.PackageManager;
import android.graphics.Bitmap;
import android.hardware.Camera;
import android.os.Handler;
import android.support.annotation.UiThread;
import com.otaliastudios.cameraview.Facing;
import com.otaliastudios.cameraview.Mapper;
import com.otaliastudios.cameraview.WorkerHandler;

public class CameraUtils {
    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    private static int computeSampleSize(int n, int n2, int n3, int n4) {
        int n5;
        int n6 = 1;
        int n7 = n5 = 1;
        if (n2 <= n4) {
            if (n <= n3) return n6;
            n7 = n5;
        }
        do {
            if (n2 / n7 < n4) {
                n6 = n7;
                if (n / n7 < n3) {
                    return n6;
                }
            }
            n7 *= 2;
        } while (true);
    }

    /*
     * Exception decompiling
     */
    static Bitmap decodeBitmap(byte[] var0, int var1_4, int var2_5) {
        // This method has failed to decompile.  When submitting a bug report, please provide this stack trace, and (if you hold appropriate legal rights) the relevant class file.
        // org.benf.cfr.reader.util.ConfusedCFRException: First case is not immediately after switch.
        // org.benf.cfr.reader.bytecode.analysis.opgraph.op3rewriters.SwitchReplacer.examineSwitchContiguity(SwitchReplacer.java:366)
        // org.benf.cfr.reader.bytecode.analysis.opgraph.op3rewriters.SwitchReplacer.replaceRawSwitches(SwitchReplacer.java:65)
        // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisInner(CodeAnalyser.java:416)
        // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisOrWrapFail(CodeAnalyser.java:196)
        // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysis(CodeAnalyser.java:141)
        // org.benf.cfr.reader.entities.attributes.AttributeCode.analyse(AttributeCode.java:95)
        // org.benf.cfr.reader.entities.Method.analyse(Method.java:372)
        // org.benf.cfr.reader.entities.ClassFile.analyseMid(ClassFile.java:867)
        // org.benf.cfr.reader.entities.ClassFile.analyseTop(ClassFile.java:768)
        // org.benf.cfr.reader.Main.doJar(Main.java:141)
        // org.benf.cfr.reader.Main.main(Main.java:242)
        throw new IllegalStateException("Decompilation failed");
    }

    public static void decodeBitmap(final byte[] arrby, final int n, final int n2, BitmapCallback bitmapCallback) {
        WorkerHandler.run(new Runnable(new Handler(), bitmapCallback){
            final /* synthetic */ BitmapCallback val$callback;
            final /* synthetic */ Handler val$ui;
            {
                this.val$ui = handler;
                this.val$callback = bitmapCallback;
            }

            @Override
            public void run() {
                final Bitmap bitmap = CameraUtils.decodeBitmap(arrby, n, n2);
                this.val$ui.post(new Runnable(){

                    @Override
                    public void run() {
                        1.this.val$callback.onBitmapReady(bitmap);
                    }
                });
            }

        });
    }

    public static void decodeBitmap(byte[] arrby, BitmapCallback bitmapCallback) {
        CameraUtils.decodeBitmap(arrby, Integer.MAX_VALUE, Integer.MAX_VALUE, bitmapCallback);
    }

    public static boolean hasCameraFacing(Context context, Facing facing) {
        int n = (Integer)new Mapper.Mapper1().map(facing);
        context = new Camera.CameraInfo();
        int n2 = Camera.getNumberOfCameras();
        for (int i = 0; i < n2; ++i) {
            Camera.getCameraInfo((int)i, (Camera.CameraInfo)context);
            if (context.facing != n) continue;
            return true;
        }
        return false;
    }

    public static boolean hasCameras(Context context) {
        if (!(context = context.getPackageManager()).hasSystemFeature("android.hardware.camera") && !context.hasSystemFeature("android.hardware.camera.front")) {
            return false;
        }
        return true;
    }

    public static interface BitmapCallback {
        @UiThread
        public void onBitmapReady(Bitmap var1);
    }

}

