/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.os.Build
 *  android.os.Build$VERSION
 */
package com.otaliastudios.cameraview;

import android.os.Build;
import com.otaliastudios.cameraview.Facing;
import com.otaliastudios.cameraview.Flash;
import com.otaliastudios.cameraview.Hdr;
import com.otaliastudios.cameraview.VideoCodec;
import com.otaliastudios.cameraview.WhiteBalance;
import java.util.HashMap;
import java.util.Set;

abstract class Mapper {
    Mapper() {
    }

    int map(VideoCodec videoCodec) {
        switch (.$SwitchMap$com$otaliastudios$cameraview$VideoCodec[videoCodec.ordinal()]) {
            default: {
                return 0;
            }
            case 3: {
                return 2;
            }
            case 2: {
                return 1;
            }
            case 1: 
        }
        return 0;
    }

    abstract <T> T map(Facing var1);

    abstract <T> T map(Flash var1);

    abstract <T> T map(Hdr var1);

    abstract <T> T map(WhiteBalance var1);

    abstract <T> Facing unmapFacing(T var1);

    abstract <T> Flash unmapFlash(T var1);

    abstract <T> Hdr unmapHdr(T var1);

    abstract <T> WhiteBalance unmapWhiteBalance(T var1);

    static class Mapper1
    extends Mapper {
        private static final HashMap<Facing, Integer> FACING;
        private static final HashMap<Flash, String> FLASH;
        private static final HashMap<Hdr, String> HDR;
        private static final HashMap<WhiteBalance, String> WB;

        static {
            FLASH = new HashMap();
            WB = new HashMap();
            FACING = new HashMap();
            HDR = new HashMap();
            FLASH.put(Flash.OFF, "off");
            FLASH.put(Flash.ON, "on");
            FLASH.put(Flash.AUTO, "auto");
            FLASH.put(Flash.TORCH, "torch");
            FACING.put(Facing.BACK, 0);
            FACING.put(Facing.FRONT, 1);
            WB.put(WhiteBalance.AUTO, "auto");
            WB.put(WhiteBalance.INCANDESCENT, "incandescent");
            WB.put(WhiteBalance.FLUORESCENT, "fluorescent");
            WB.put(WhiteBalance.DAYLIGHT, "daylight");
            WB.put(WhiteBalance.CLOUDY, "cloudy-daylight");
            HDR.put(Hdr.OFF, "auto");
            if (Build.VERSION.SDK_INT >= 17) {
                HDR.put(Hdr.ON, "hdr");
            } else {
                HDR.put(Hdr.ON, "hdr");
            }
        }

        Mapper1() {
        }

        private <T> T reverseLookup(HashMap<T, ?> hashMap, Object object) {
            for (T t : hashMap.keySet()) {
                if (!hashMap.get(t).equals(object)) continue;
                return t;
            }
            return null;
        }

        @Override
        <T> T map(Facing facing) {
            return (T)FACING.get(facing);
        }

        @Override
        <T> T map(Flash flash) {
            return (T)FLASH.get(flash);
        }

        @Override
        <T> T map(Hdr hdr) {
            return (T)HDR.get(hdr);
        }

        @Override
        <T> T map(WhiteBalance whiteBalance) {
            return (T)WB.get(whiteBalance);
        }

        @Override
        <T> Facing unmapFacing(T t) {
            return this.reverseLookup(FACING, t);
        }

        @Override
        <T> Flash unmapFlash(T t) {
            return this.reverseLookup(FLASH, t);
        }

        @Override
        <T> Hdr unmapHdr(T t) {
            return this.reverseLookup(HDR, t);
        }

        @Override
        <T> WhiteBalance unmapWhiteBalance(T t) {
            return this.reverseLookup(WB, t);
        }
    }

    static class Mapper2
    extends Mapper {
        Mapper2() {
        }

        @Override
        <T> T map(Facing facing) {
            return null;
        }

        @Override
        <T> T map(Flash flash) {
            return null;
        }

        @Override
        <T> T map(Hdr hdr) {
            return null;
        }

        @Override
        <T> T map(WhiteBalance whiteBalance) {
            return null;
        }

        @Override
        <T> Facing unmapFacing(T t) {
            return null;
        }

        @Override
        <T> Flash unmapFlash(T t) {
            return null;
        }

        @Override
        <T> Hdr unmapHdr(T t) {
            return null;
        }

        @Override
        <T> WhiteBalance unmapWhiteBalance(T t) {
            return null;
        }
    }

}

