/*
 * Decompiled with CFR 0_132.
 */
package com.otaliastudios.cameraview;

import android.support.annotation.NonNull;
import com.otaliastudios.cameraview.AspectRatio;
import com.otaliastudios.cameraview.Size;
import com.otaliastudios.cameraview.SizeSelector;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;

public class SizeSelectors {
    public static /* varargs */ SizeSelector and(SizeSelector ... arrsizeSelector) {
        return new AndSelector(arrsizeSelector);
    }

    public static SizeSelector aspectRatio(AspectRatio aspectRatio, float f) {
        return SizeSelectors.withFilter(new Filter(aspectRatio.toFloat(), f){
            final /* synthetic */ float val$delta;
            final /* synthetic */ float val$desired;
            {
                this.val$desired = f;
                this.val$delta = f2;
            }

            @Override
            public boolean accepts(Size size) {
                float f = AspectRatio.of(size.getWidth(), size.getHeight()).toFloat();
                if (f >= this.val$desired - this.val$delta && f <= this.val$desired + this.val$delta) {
                    return true;
                }
                return false;
            }
        });
    }

    public static SizeSelector biggest() {
        return new SizeSelector(){

            @NonNull
            @Override
            public List<Size> select(@NonNull List<Size> list) {
                Collections.sort(list);
                Collections.reverse(list);
                return list;
            }
        };
    }

    public static SizeSelector maxArea(final int n) {
        return SizeSelectors.withFilter(new Filter(){

            @Override
            public boolean accepts(Size size) {
                if (size.getHeight() * size.getWidth() <= n) {
                    return true;
                }
                return false;
            }
        });
    }

    public static SizeSelector maxHeight(final int n) {
        return SizeSelectors.withFilter(new Filter(){

            @Override
            public boolean accepts(Size size) {
                if (size.getHeight() <= n) {
                    return true;
                }
                return false;
            }
        });
    }

    public static SizeSelector maxWidth(final int n) {
        return SizeSelectors.withFilter(new Filter(){

            @Override
            public boolean accepts(Size size) {
                if (size.getWidth() <= n) {
                    return true;
                }
                return false;
            }
        });
    }

    public static SizeSelector minArea(final int n) {
        return SizeSelectors.withFilter(new Filter(){

            @Override
            public boolean accepts(Size size) {
                if (size.getHeight() * size.getWidth() >= n) {
                    return true;
                }
                return false;
            }
        });
    }

    public static SizeSelector minHeight(final int n) {
        return SizeSelectors.withFilter(new Filter(){

            @Override
            public boolean accepts(Size size) {
                if (size.getHeight() >= n) {
                    return true;
                }
                return false;
            }
        });
    }

    public static SizeSelector minWidth(final int n) {
        return SizeSelectors.withFilter(new Filter(){

            @Override
            public boolean accepts(Size size) {
                if (size.getWidth() >= n) {
                    return true;
                }
                return false;
            }
        });
    }

    public static /* varargs */ SizeSelector or(SizeSelector ... arrsizeSelector) {
        return new OrSelector(arrsizeSelector);
    }

    public static SizeSelector smallest() {
        return new SizeSelector(){

            @NonNull
            @Override
            public List<Size> select(@NonNull List<Size> list) {
                Collections.sort(list);
                return list;
            }
        };
    }

    public static SizeSelector withFilter(@NonNull Filter filter) {
        return new FilterSelector(filter);
    }

    private static class AndSelector
    implements SizeSelector {
        private SizeSelector[] values;

        private /* varargs */ AndSelector(@NonNull SizeSelector ... arrsizeSelector) {
            this.values = arrsizeSelector;
        }

        @NonNull
        @Override
        public List<Size> select(@NonNull List<Size> list) {
            SizeSelector[] arrsizeSelector = this.values;
            int n = arrsizeSelector.length;
            for (int i = 0; i < n; ++i) {
                list = arrsizeSelector[i].select(list);
            }
            return list;
        }
    }

    public static interface Filter {
        public boolean accepts(Size var1);
    }

    private static class FilterSelector
    implements SizeSelector {
        private Filter constraint;

        private FilterSelector(@NonNull Filter filter) {
            this.constraint = filter;
        }

        @NonNull
        @Override
        public List<Size> select(@NonNull List<Size> object) {
            ArrayList<Size> arrayList = new ArrayList<Size>();
            object = object.iterator();
            while (object.hasNext()) {
                Size size = (Size)object.next();
                if (!this.constraint.accepts(size)) continue;
                arrayList.add(size);
            }
            return arrayList;
        }
    }

    private static class OrSelector
    implements SizeSelector {
        private SizeSelector[] values;

        private /* varargs */ OrSelector(@NonNull SizeSelector ... arrsizeSelector) {
            this.values = arrsizeSelector;
        }

        @NonNull
        @Override
        public List<Size> select(@NonNull List<Size> list) {
            SizeSelector[] arrsizeSelector = this.values;
            int n = arrsizeSelector.length;
            List<Size> list2 = null;
            for (int i = 0; i < n && (list2 = arrsizeSelector[i].select(list)).isEmpty(); ++i) {
            }
            list = list2;
            if (list2 == null) {
                list = new ArrayList<Size>();
            }
            return list;
        }
    }

}

