/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.os.Handler
 *  android.os.HandlerThread
 *  android.os.Looper
 */
package com.otaliastudios.cameraview;

import android.os.Handler;
import android.os.HandlerThread;
import android.os.Looper;
import com.otaliastudios.cameraview.CameraLogger;
import java.lang.ref.WeakReference;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;

class WorkerHandler {
    private static final CameraLogger LOG = CameraLogger.create(WorkerHandler.class.getSimpleName());
    private static final ConcurrentHashMap<String, WeakReference<WorkerHandler>> sCache = new ConcurrentHashMap(4);
    private Handler mHandler;
    private HandlerThread mThread;

    private WorkerHandler(String string2) {
        this.mThread = new HandlerThread(string2);
        this.mThread.setDaemon(true);
        this.mThread.start();
        this.mHandler = new Handler(this.mThread.getLooper());
    }

    public static void destroy() {
        for (Object object : sCache.keySet()) {
            WorkerHandler workerHandler = (WorkerHandler)(object = sCache.get(object)).get();
            if (workerHandler != null && workerHandler.getThread().isAlive()) {
                workerHandler.getThread().interrupt();
            }
            object.clear();
        }
        sCache.clear();
    }

    public static WorkerHandler get(String string2) {
        WorkerHandler workerHandler;
        if (sCache.containsKey(string2)) {
            HandlerThread handlerThread;
            workerHandler = sCache.get(string2).get();
            if (workerHandler != null && (handlerThread = workerHandler.mThread).isAlive() && !handlerThread.isInterrupted()) {
                LOG.w("get:", "Reusing cached worker handler.", string2);
                return workerHandler;
            }
            LOG.w("get:", "Thread reference died, removing.", string2);
            sCache.remove(string2);
        }
        LOG.i("get:", "Creating new handler.", string2);
        workerHandler = new WorkerHandler(string2);
        sCache.put(string2, new WeakReference<WorkerHandler>(workerHandler));
        return workerHandler;
    }

    public static void run(Runnable runnable) {
        WorkerHandler.get("FallbackCameraThread").post(runnable);
    }

    public Handler get() {
        return this.mHandler;
    }

    public Thread getThread() {
        return this.mThread;
    }

    public void post(Runnable runnable) {
        this.mHandler.post(runnable);
    }
}

