/*
 * Decompiled with CFR 0_132.
 */
package com.otaliastudios.cameraview;

import android.support.annotation.NonNull;
import com.otaliastudios.cameraview.Size;
import java.util.HashMap;

public class AspectRatio
implements Comparable<AspectRatio> {
    static final HashMap<String, AspectRatio> sCache = new HashMap(16);
    private final int mX;
    private final int mY;

    private AspectRatio(int n, int n2) {
        this.mX = n;
        this.mY = n2;
    }

    private static int gcd(int n, int n2) {
        int n3;
        do {
            n3 = n;
            n = n2;
            if (n == 0) break;
            n2 = n3 % n;
        } while (true);
        return n3;
    }

    public static AspectRatio of(int n, int n2) {
        int n3 = AspectRatio.gcd(n, n2);
        Object object = new StringBuilder();
        object.append(n /= n3);
        object.append(":");
        object.append(n2 /= n3);
        String string2 = object.toString();
        AspectRatio aspectRatio = sCache.get(string2);
        object = aspectRatio;
        if (aspectRatio == null) {
            object = new AspectRatio(n, n2);
            sCache.put(string2, (AspectRatio)object);
        }
        return object;
    }

    public static AspectRatio parse(@NonNull String arrstring) {
        if ((arrstring = arrstring.split(":")).length != 2) {
            throw new NumberFormatException("Illegal AspectRatio string. Must be x:y");
        }
        return AspectRatio.of(Integer.valueOf(arrstring[0]), Integer.valueOf(arrstring[1]));
    }

    @Override
    public int compareTo(@NonNull AspectRatio aspectRatio) {
        if (this.equals(aspectRatio)) {
            return 0;
        }
        if (this.toFloat() - aspectRatio.toFloat() > 0.0f) {
            return 1;
        }
        return -1;
    }

    public boolean equals(Object object) {
        boolean bl = false;
        if (object == null) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (object instanceof AspectRatio) {
            object = (AspectRatio)object;
            boolean bl2 = bl;
            if (this.mX == object.mX) {
                bl2 = bl;
                if (this.mY == object.mY) {
                    bl2 = true;
                }
            }
            return bl2;
        }
        return false;
    }

    public int getX() {
        return this.mX;
    }

    public int getY() {
        return this.mY;
    }

    public int hashCode() {
        return this.mY ^ (this.mX << 16 | this.mX >>> 16);
    }

    public AspectRatio inverse() {
        return AspectRatio.of(this.mY, this.mX);
    }

    public boolean matches(Size size) {
        int n = AspectRatio.gcd(size.getWidth(), size.getHeight());
        int n2 = size.getWidth() / n;
        n = size.getHeight() / n;
        if (this.mX == n2 && this.mY == n) {
            return true;
        }
        return false;
    }

    public float toFloat() {
        return (float)this.mX / (float)this.mY;
    }

    public String toString() {
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append(this.mX);
        stringBuilder.append(":");
        stringBuilder.append(this.mY);
        return stringBuilder.toString();
    }
}

