/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.annotation.TargetApi
 *  android.hardware.Camera
 *  android.hardware.Camera$CameraInfo
 *  android.hardware.Camera$Parameters
 *  android.hardware.Camera$Size
 *  android.hardware.camera2.CameraCharacteristics
 */
package com.otaliastudios.cameraview;

import android.annotation.TargetApi;
import android.hardware.Camera;
import android.hardware.camera2.CameraCharacteristics;
import android.support.annotation.NonNull;
import com.otaliastudios.cameraview.AspectRatio;
import com.otaliastudios.cameraview.Audio;
import com.otaliastudios.cameraview.Control;
import com.otaliastudios.cameraview.Facing;
import com.otaliastudios.cameraview.Flash;
import com.otaliastudios.cameraview.GestureAction;
import com.otaliastudios.cameraview.Grid;
import com.otaliastudios.cameraview.Hdr;
import com.otaliastudios.cameraview.Mapper;
import com.otaliastudios.cameraview.SessionType;
import com.otaliastudios.cameraview.Size;
import com.otaliastudios.cameraview.VideoQuality;
import com.otaliastudios.cameraview.WhiteBalance;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;

public class CameraOptions {
    private boolean autoFocusSupported;
    private float exposureCorrectionMaxValue;
    private float exposureCorrectionMinValue;
    private boolean exposureCorrectionSupported;
    private Set<Facing> supportedFacing = new HashSet<Facing>(2);
    private Set<Flash> supportedFlash = new HashSet<Flash>(4);
    private Set<Hdr> supportedHdr = new HashSet<Hdr>(2);
    private Set<AspectRatio> supportedPictureAspectRatio = new HashSet<AspectRatio>(4);
    private Set<Size> supportedPictureSizes = new HashSet<Size>(15);
    private Set<WhiteBalance> supportedWhiteBalance = new HashSet<WhiteBalance>(5);
    private boolean videoSnapshotSupported;
    private boolean zoomSupported;

    CameraOptions(Camera.Parameters object, boolean bl) {
        int n;
        Enum enum_;
        Mapper.Mapper1 mapper12 = new Mapper.Mapper1();
        Object object2 = new Camera.CameraInfo();
        int n2 = Camera.getNumberOfCameras();
        boolean bl2 = false;
        for (n = 0; n < n2; ++n) {
            Camera.getCameraInfo((int)n, (Camera.CameraInfo)object2);
            enum_ = mapper12.unmapFacing(object2.facing);
            if (enum_ == null) continue;
            this.supportedFacing.add((Facing)enum_);
        }
        object2 = object.getSupportedWhiteBalance();
        if (object2 != null) {
            object2 = object2.iterator();
            while (object2.hasNext()) {
                enum_ = mapper12.unmapWhiteBalance((String)object2.next());
                if (enum_ == null) continue;
                this.supportedWhiteBalance.add((WhiteBalance)enum_);
            }
        }
        if ((object2 = object.getSupportedFlashModes()) != null) {
            object2 = object2.iterator();
            while (object2.hasNext()) {
                enum_ = mapper12.unmapFlash((String)object2.next());
                if (enum_ == null) continue;
                this.supportedFlash.add((Flash)enum_);
            }
        }
        if ((object2 = object.getSupportedSceneModes()) != null) {
            object2 = object2.iterator();
            while (object2.hasNext()) {
                enum_ = mapper12.unmapHdr((String)object2.next());
                if (enum_ == null) continue;
                this.supportedHdr.add((Hdr)enum_);
            }
        }
        this.zoomSupported = object.isZoomSupported();
        this.videoSnapshotSupported = object.isVideoSnapshotSupported();
        this.autoFocusSupported = object.getSupportedFocusModes().contains("auto");
        float f = object.getExposureCompensationStep();
        this.exposureCorrectionMinValue = (float)object.getMinExposureCompensation() * f;
        this.exposureCorrectionMaxValue = (float)object.getMaxExposureCompensation() * f;
        if (object.getMinExposureCompensation() != 0 || object.getMaxExposureCompensation() != 0) {
            bl2 = true;
        }
        this.exposureCorrectionSupported = bl2;
        for (Mapper.Mapper1 mapper12 : object.getSupportedPictureSizes()) {
            n = bl ? mapper12.height : mapper12.width;
            n2 = bl ? mapper12.width : mapper12.height;
            this.supportedPictureSizes.add(new Size(n, n2));
            this.supportedPictureAspectRatio.add(AspectRatio.of(n, n2));
        }
    }

    @TargetApi(value=21)
    CameraOptions(CameraCharacteristics cameraCharacteristics) {
    }

    public float getExposureCorrectionMaxValue() {
        return this.exposureCorrectionMaxValue;
    }

    public float getExposureCorrectionMinValue() {
        return this.exposureCorrectionMinValue;
    }

    public <T extends Control> Collection<T> getSupportedControls(@NonNull Class<T> class_) {
        if (class_.equals(Audio.class)) {
            return Arrays.asList(Audio.values());
        }
        if (class_.equals(Facing.class)) {
            return this.getSupportedFacing();
        }
        if (class_.equals(Flash.class)) {
            return this.getSupportedFlash();
        }
        if (class_.equals(Grid.class)) {
            return Arrays.asList(Grid.values());
        }
        if (class_.equals(Hdr.class)) {
            return this.getSupportedHdr();
        }
        if (class_.equals(SessionType.class)) {
            return Arrays.asList(SessionType.values());
        }
        if (class_.equals(VideoQuality.class)) {
            return Arrays.asList(VideoQuality.values());
        }
        if (class_.equals(WhiteBalance.class)) {
            return this.getSupportedWhiteBalance();
        }
        return Collections.emptyList();
    }

    @NonNull
    public Set<Facing> getSupportedFacing() {
        return Collections.unmodifiableSet(this.supportedFacing);
    }

    @NonNull
    public Set<Flash> getSupportedFlash() {
        return Collections.unmodifiableSet(this.supportedFlash);
    }

    @NonNull
    public Set<Hdr> getSupportedHdr() {
        return Collections.unmodifiableSet(this.supportedHdr);
    }

    @NonNull
    public Set<AspectRatio> getSupportedPictureAspectRatios() {
        return Collections.unmodifiableSet(this.supportedPictureAspectRatio);
    }

    @NonNull
    public Set<Size> getSupportedPictureSizes() {
        return Collections.unmodifiableSet(this.supportedPictureSizes);
    }

    @NonNull
    public Set<WhiteBalance> getSupportedWhiteBalance() {
        return Collections.unmodifiableSet(this.supportedWhiteBalance);
    }

    public boolean isAutoFocusSupported() {
        return this.autoFocusSupported;
    }

    public boolean isExposureCorrectionSupported() {
        return this.exposureCorrectionSupported;
    }

    public boolean isVideoSnapshotSupported() {
        return this.videoSnapshotSupported;
    }

    public boolean isZoomSupported() {
        return this.zoomSupported;
    }

    public boolean supports(Control control) {
        return this.getSupportedControls(control.getClass()).contains(control);
    }

    public boolean supports(GestureAction gestureAction) {
        switch (.$SwitchMap$com$otaliastudios$cameraview$GestureAction[gestureAction.ordinal()]) {
            default: {
                return false;
            }
            case 6: {
                return this.isExposureCorrectionSupported();
            }
            case 5: {
                return this.isZoomSupported();
            }
            case 3: 
            case 4: {
                return true;
            }
            case 1: 
            case 2: 
        }
        return this.isAutoFocusSupported();
    }

}

