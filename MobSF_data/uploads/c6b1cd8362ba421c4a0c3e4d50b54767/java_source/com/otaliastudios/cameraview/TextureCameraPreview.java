/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.annotation.TargetApi
 *  android.content.Context
 *  android.graphics.SurfaceTexture
 *  android.view.LayoutInflater
 *  android.view.Surface
 *  android.view.TextureView
 *  android.view.TextureView$SurfaceTextureListener
 *  android.view.View
 *  android.view.ViewGroup
 */
package com.otaliastudios.cameraview;

import android.annotation.TargetApi;
import android.content.Context;
import android.graphics.SurfaceTexture;
import android.support.annotation.NonNull;
import android.view.LayoutInflater;
import android.view.Surface;
import android.view.TextureView;
import android.view.View;
import android.view.ViewGroup;
import com.otaliastudios.cameraview.CameraPreview;
import com.otaliastudios.cameraview.R;

class TextureCameraPreview
extends CameraPreview<TextureView, SurfaceTexture> {
    private Surface mSurface;

    TextureCameraPreview(Context context, ViewGroup viewGroup, CameraPreview.SurfaceCallback surfaceCallback) {
        super(context, viewGroup, surfaceCallback);
    }

    @Override
    SurfaceTexture getOutput() {
        return ((TextureView)this.getView()).getSurfaceTexture();
    }

    @Override
    Class<SurfaceTexture> getOutputClass() {
        return SurfaceTexture.class;
    }

    @Override
    Surface getSurface() {
        if (this.mSurface == null) {
            this.mSurface = new Surface(this.getOutput());
        }
        return this.mSurface;
    }

    @NonNull
    @Override
    protected TextureView onCreateView(Context context, ViewGroup viewGroup) {
        context = LayoutInflater.from((Context)context).inflate(R.layout.cameraview_texture_view, viewGroup, false);
        viewGroup.addView((View)context, 0);
        context = (TextureView)context.findViewById(R.id.texture_view);
        context.setSurfaceTextureListener(new TextureView.SurfaceTextureListener(){

            public void onSurfaceTextureAvailable(SurfaceTexture surfaceTexture, int n, int n2) {
                TextureCameraPreview.this.onSurfaceAvailable(n, n2);
            }

            public boolean onSurfaceTextureDestroyed(SurfaceTexture surfaceTexture) {
                TextureCameraPreview.this.onSurfaceDestroyed();
                return true;
            }

            public void onSurfaceTextureSizeChanged(SurfaceTexture surfaceTexture, int n, int n2) {
                TextureCameraPreview.this.onSurfaceSizeChanged(n, n2);
            }

            public void onSurfaceTextureUpdated(SurfaceTexture surfaceTexture) {
            }
        });
        return context;
    }

    @TargetApi(value=15)
    @Override
    void setDesiredSize(int n, int n2) {
        super.setDesiredSize(n, n2);
        if (((TextureView)this.getView()).getSurfaceTexture() != null) {
            ((TextureView)this.getView()).getSurfaceTexture().setDefaultBufferSize(n, n2);
        }
    }

}

