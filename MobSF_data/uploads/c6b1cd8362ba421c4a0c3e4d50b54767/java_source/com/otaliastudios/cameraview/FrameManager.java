/*
 * Decompiled with CFR 0_132.
 */
package com.otaliastudios.cameraview;

import com.otaliastudios.cameraview.Frame;
import com.otaliastudios.cameraview.Size;
import java.util.concurrent.LinkedBlockingQueue;

class FrameManager {
    private int mBufferSize;
    private BufferCallback mCallback;
    private int mPoolSize;
    private LinkedBlockingQueue<Frame> mQueue;

    FrameManager(int n, BufferCallback bufferCallback) {
        this.mPoolSize = n;
        this.mCallback = bufferCallback;
        this.mQueue = new LinkedBlockingQueue(this.mPoolSize);
        this.mBufferSize = -1;
    }

    private int getBufferSize(int n, Size size) {
        return (int)Math.ceil((double)(size.getHeight() * size.getWidth() * n) / 8.0);
    }

    int allocate(int n, Size size) {
        this.mBufferSize = this.getBufferSize(n, size);
        for (n = 0; n < this.mPoolSize; ++n) {
            this.mCallback.onBufferAvailable(new byte[this.mBufferSize]);
        }
        return this.mBufferSize;
    }

    Frame getFrame(byte[] arrby, long l, int n, Size size, int n2) {
        Frame frame;
        Frame frame2 = frame = this.mQueue.poll();
        if (frame == null) {
            frame2 = new Frame(this);
        }
        frame2.set(arrby, l, n, size, n2);
        return frame2;
    }

    void onFrameReleased(Frame frame) {
        byte[] arrby = frame.getData();
        if (!this.mQueue.offer(frame)) {
            frame.releaseManager();
        }
        if (arrby != null && this.mCallback != null && arrby.length == this.mBufferSize) {
            this.mCallback.onBufferAvailable(arrby);
        }
    }

    void release() {
        for (Frame frame : this.mQueue) {
            frame.releaseManager();
            frame.release();
        }
        this.mQueue.clear();
        this.mBufferSize = -1;
    }

    static interface BufferCallback {
        public void onBufferAvailable(byte[] var1);
    }

}

