/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.content.Context
 *  android.view.Surface
 *  android.view.View
 *  android.view.ViewGroup
 */
package com.otaliastudios.cameraview;

import android.content.Context;
import android.support.annotation.NonNull;
import android.view.Surface;
import android.view.View;
import android.view.ViewGroup;
import com.otaliastudios.cameraview.AspectRatio;
import com.otaliastudios.cameraview.CameraLogger;
import com.otaliastudios.cameraview.Size;
import com.otaliastudios.cameraview.Task;

abstract class CameraPreview<T extends View, Output> {
    private static final CameraLogger LOG = CameraLogger.create(CameraPreview.class.getSimpleName());
    Task<Void> mCropTask = new Task();
    private boolean mCropping;
    private int mDesiredHeight;
    private int mDesiredWidth;
    private SurfaceCallback mSurfaceCallback;
    private int mSurfaceHeight;
    private int mSurfaceWidth;
    private T mView;

    CameraPreview(Context context, ViewGroup viewGroup, SurfaceCallback surfaceCallback) {
        this.mView = this.onCreateView(context, viewGroup);
        this.mSurfaceCallback = surfaceCallback;
    }

    private final void crop() {
        this.mCropTask.start();
        if (!this.supportsCropping()) {
            this.mCropTask.end(null);
            return;
        }
        this.getView().post(new Runnable(){

            @Override
            public void run() {
                if (CameraPreview.this.mDesiredHeight != 0 && CameraPreview.this.mDesiredWidth != 0 && CameraPreview.this.mSurfaceHeight != 0 && CameraPreview.this.mSurfaceWidth != 0) {
                    Object object = AspectRatio.of(CameraPreview.this.mSurfaceWidth, CameraPreview.this.mSurfaceHeight);
                    AspectRatio aspectRatio = AspectRatio.of(CameraPreview.this.mDesiredWidth, CameraPreview.this.mDesiredHeight);
                    float f = object.toFloat();
                    float f2 = aspectRatio.toFloat();
                    float f3 = 1.0f;
                    if (f >= f2) {
                        f3 = object.toFloat() / aspectRatio.toFloat();
                        f = 1.0f;
                    } else {
                        f = aspectRatio.toFloat() / object.toFloat();
                    }
                    CameraPreview.this.applyCrop(f, f3);
                    object = CameraPreview.this;
                    boolean bl = f > 1.02f || f3 > 1.02f;
                    ((CameraPreview)object).mCropping = bl;
                    LOG.i("crop:", "applied scaleX=", Float.valueOf(f));
                    LOG.i("crop:", "applied scaleY=", Float.valueOf(f3));
                    CameraPreview.this.mCropTask.end(null);
                    return;
                }
                CameraPreview.this.mCropTask.end(null);
            }
        });
    }

    protected void applyCrop(float f, float f2) {
        this.getView().setScaleX(f);
        this.getView().setScaleY(f2);
    }

    final Size getDesiredSize() {
        return new Size(this.mDesiredWidth, this.mDesiredHeight);
    }

    abstract Output getOutput();

    abstract Class<Output> getOutputClass();

    abstract Surface getSurface();

    final Size getSurfaceSize() {
        return new Size(this.mSurfaceWidth, this.mSurfaceHeight);
    }

    @NonNull
    final T getView() {
        return this.mView;
    }

    boolean isCropping() {
        return this.mCropping;
    }

    final boolean isReady() {
        if (this.mSurfaceWidth > 0 && this.mSurfaceHeight > 0) {
            return true;
        }
        return false;
    }

    @NonNull
    protected abstract T onCreateView(Context var1, ViewGroup var2);

    protected final void onSurfaceAvailable(int n, int n2) {
        LOG.i("onSurfaceAvailable:", "w=", n, "h=", n2);
        this.mSurfaceWidth = n;
        this.mSurfaceHeight = n2;
        this.crop();
        this.mSurfaceCallback.onSurfaceAvailable();
    }

    protected final void onSurfaceDestroyed() {
        this.mSurfaceWidth = 0;
        this.mSurfaceHeight = 0;
    }

    protected final void onSurfaceSizeChanged(int n, int n2) {
        LOG.i("onSurfaceSizeChanged:", "w=", n, "h=", n2);
        if (n != this.mSurfaceWidth || n2 != this.mSurfaceHeight) {
            this.mSurfaceWidth = n;
            this.mSurfaceHeight = n2;
            this.crop();
            this.mSurfaceCallback.onSurfaceChanged();
        }
    }

    void setDesiredSize(int n, int n2) {
        LOG.i("setDesiredSize:", "desiredW=", n, "desiredH=", n2);
        this.mDesiredWidth = n;
        this.mDesiredHeight = n2;
        this.crop();
    }

    final void setSurfaceCallback(SurfaceCallback surfaceCallback) {
        this.mSurfaceCallback = surfaceCallback;
        if (this.mSurfaceWidth != 0 || this.mSurfaceHeight != 0) {
            this.mSurfaceCallback.onSurfaceAvailable();
        }
    }

    boolean supportsCropping() {
        return true;
    }

    static interface SurfaceCallback {
        public void onSurfaceAvailable();

        public void onSurfaceChanged();
    }

}

