/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.content.Context
 *  android.content.res.Resources
 *  android.graphics.Canvas
 *  android.graphics.drawable.ColorDrawable
 *  android.graphics.drawable.Drawable
 *  android.util.AttributeSet
 *  android.util.DisplayMetrics
 *  android.util.TypedValue
 *  android.view.View
 */
package com.otaliastudios.cameraview;

import android.content.Context;
import android.content.res.Resources;
import android.graphics.Canvas;
import android.graphics.drawable.ColorDrawable;
import android.graphics.drawable.Drawable;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.util.AttributeSet;
import android.util.DisplayMetrics;
import android.util.TypedValue;
import android.view.View;
import com.otaliastudios.cameraview.Grid;
import com.otaliastudios.cameraview.Task;

class GridLinesLayout
extends View {
    private static final float GOLDEN_RATIO_INV = 0.618034f;
    Task<Integer> drawTask = new Task();
    private Grid gridMode;
    private Drawable horiz = new ColorDrawable(-1);
    private Drawable vert;
    private final float width;

    public GridLinesLayout(@NonNull Context context) {
        this(context, null);
    }

    public GridLinesLayout(@NonNull Context context, @Nullable AttributeSet attributeSet) {
        super(context, attributeSet);
        this.horiz.setAlpha(160);
        this.vert = new ColorDrawable(-1);
        this.vert.setAlpha(160);
        this.width = TypedValue.applyDimension((int)1, (float)0.9f, (DisplayMetrics)context.getResources().getDisplayMetrics());
    }

    private int getLineCount() {
        switch (.$SwitchMap$com$otaliastudios$cameraview$Grid[this.gridMode.ordinal()]) {
            default: {
                return 0;
            }
            case 4: {
                return 3;
            }
            case 3: {
                return 2;
            }
            case 2: {
                return 2;
            }
            case 1: 
        }
        return 0;
    }

    private float getLinePosition(int n) {
        int n2 = this.getLineCount();
        if (this.gridMode == Grid.DRAW_PHI) {
            if (n == 1) {
                return 0.38196602f;
            }
            return 0.618034f;
        }
        return 1.0f / (float)(n2 + 1) * ((float)n + 1.0f);
    }

    public Grid getGridMode() {
        return this.gridMode;
    }

    protected void onDraw(Canvas canvas) {
        super.onDraw(canvas);
        this.drawTask.start();
        int n = this.getLineCount();
        for (int i = 0; i < n; ++i) {
            float f = this.getLinePosition(i);
            canvas.translate(0.0f, (float)this.getHeight() * f);
            this.horiz.draw(canvas);
            float f2 = - f;
            canvas.translate(0.0f, (float)this.getHeight() * f2);
            canvas.translate(f * (float)this.getWidth(), 0.0f);
            this.vert.draw(canvas);
            canvas.translate(f2 * (float)this.getWidth(), 0.0f);
        }
        this.drawTask.end(n);
    }

    protected void onLayout(boolean bl, int n, int n2, int n3, int n4) {
        super.onLayout(bl, n, n2, n3, n4);
        this.horiz.setBounds(n, 0, n3, (int)this.width);
        this.vert.setBounds(0, n2, (int)this.width, n4);
    }

    public void setGridMode(Grid grid) {
        this.gridMode = grid;
        this.postInvalidate();
    }

}

