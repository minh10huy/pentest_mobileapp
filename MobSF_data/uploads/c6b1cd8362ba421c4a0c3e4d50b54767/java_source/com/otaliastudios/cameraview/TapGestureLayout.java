/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.animation.Animator
 *  android.animation.Animator$AnimatorListener
 *  android.animation.AnimatorListenerAdapter
 *  android.content.Context
 *  android.graphics.PointF
 *  android.view.GestureDetector
 *  android.view.GestureDetector$OnGestureListener
 *  android.view.GestureDetector$SimpleOnGestureListener
 *  android.view.LayoutInflater
 *  android.view.MotionEvent
 *  android.view.View
 *  android.view.ViewGroup
 *  android.view.ViewPropertyAnimator
 *  android.widget.FrameLayout
 *  android.widget.ImageView
 */
package com.otaliastudios.cameraview;

import android.animation.Animator;
import android.animation.AnimatorListenerAdapter;
import android.content.Context;
import android.graphics.PointF;
import android.view.GestureDetector;
import android.view.LayoutInflater;
import android.view.MotionEvent;
import android.view.View;
import android.view.ViewGroup;
import android.view.ViewPropertyAnimator;
import android.widget.FrameLayout;
import android.widget.ImageView;
import com.otaliastudios.cameraview.Gesture;
import com.otaliastudios.cameraview.GestureLayout;
import com.otaliastudios.cameraview.R;

class TapGestureLayout
extends GestureLayout {
    private GestureDetector mDetector;
    private FrameLayout mFocusMarkerContainer;
    private ImageView mFocusMarkerFill;
    private final Runnable mFocusMarkerHideRunnable = new Runnable(){

        @Override
        public void run() {
            TapGestureLayout.this.onFocusEnd(false);
        }
    };
    private boolean mNotify;

    public TapGestureLayout(Context context) {
        super(context);
    }

    private static void animate(View view, float f, float f2, long l, long l2, Animator.AnimatorListener animatorListener) {
        view.animate().scaleX(f).scaleY(f).alpha(f2).setDuration(l).setStartDelay(l2).setListener(animatorListener).start();
    }

    public void onFocusEnd(boolean bl) {
        if (bl) {
            TapGestureLayout.animate((View)this.mFocusMarkerContainer, 1.0f, 0.0f, 500L, 0L, null);
            TapGestureLayout.animate((View)this.mFocusMarkerFill, 1.0f, 0.0f, 500L, 0L, null);
            return;
        }
        TapGestureLayout.animate((View)this.mFocusMarkerFill, 0.0f, 0.0f, 500L, 0L, null);
        TapGestureLayout.animate((View)this.mFocusMarkerContainer, 1.36f, 1.0f, 500L, 0L, (Animator.AnimatorListener)new AnimatorListenerAdapter(){

            public void onAnimationEnd(Animator animator2) {
                super.onAnimationEnd(animator2);
                TapGestureLayout.animate((View)TapGestureLayout.this.mFocusMarkerContainer, 1.36f, 0.0f, 200L, 1000L, null);
            }
        });
    }

    public void onFocusStart(PointF pointF) {
        this.removeCallbacks(this.mFocusMarkerHideRunnable);
        this.mFocusMarkerContainer.clearAnimation();
        this.mFocusMarkerFill.clearAnimation();
        float f = (int)(pointF.x - (float)(this.mFocusMarkerContainer.getWidth() / 2));
        float f2 = (int)(pointF.y - (float)(this.mFocusMarkerContainer.getWidth() / 2));
        this.mFocusMarkerContainer.setTranslationX(f);
        this.mFocusMarkerContainer.setTranslationY(f2);
        this.mFocusMarkerContainer.setScaleX(1.36f);
        this.mFocusMarkerContainer.setScaleY(1.36f);
        this.mFocusMarkerContainer.setAlpha(1.0f);
        this.mFocusMarkerFill.setScaleX(0.0f);
        this.mFocusMarkerFill.setScaleY(0.0f);
        this.mFocusMarkerFill.setAlpha(1.0f);
        TapGestureLayout.animate((View)this.mFocusMarkerContainer, 1.0f, 1.0f, 300L, 0L, null);
        TapGestureLayout.animate((View)this.mFocusMarkerFill, 1.0f, 1.0f, 300L, 0L, (Animator.AnimatorListener)new AnimatorListenerAdapter(){

            public void onAnimationEnd(Animator animator2) {
                super.onAnimationEnd(animator2);
                TapGestureLayout.this.postDelayed(TapGestureLayout.this.mFocusMarkerHideRunnable, 2000L);
            }
        });
    }

    @Override
    protected void onInitialize(Context context) {
        super.onInitialize(context);
        this.mPoints = new PointF[]{new PointF(0.0f, 0.0f)};
        this.mDetector = new GestureDetector(context, (GestureDetector.OnGestureListener)new GestureDetector.SimpleOnGestureListener(){

            public void onLongPress(MotionEvent motionEvent) {
                TapGestureLayout.this.mNotify = true;
                TapGestureLayout.this.mType = Gesture.LONG_TAP;
            }

            public boolean onSingleTapUp(MotionEvent motionEvent) {
                TapGestureLayout.this.mNotify = true;
                TapGestureLayout.this.mType = Gesture.TAP;
                return true;
            }
        });
        this.mDetector.setIsLongpressEnabled(true);
        LayoutInflater.from((Context)this.getContext()).inflate(R.layout.cameraview_layout_focus_marker, (ViewGroup)this);
        this.mFocusMarkerContainer = (FrameLayout)this.findViewById(R.id.focusMarkerContainer);
        this.mFocusMarkerFill = (ImageView)this.findViewById(R.id.fill);
    }

    @Override
    public boolean onTouchEvent(MotionEvent motionEvent) {
        if (!this.mEnabled) {
            return false;
        }
        if (motionEvent.getAction() == 0) {
            this.mNotify = false;
        }
        this.mDetector.onTouchEvent(motionEvent);
        if (this.mNotify) {
            this.mPoints[0].x = motionEvent.getX();
            this.mPoints[0].y = motionEvent.getY();
            return true;
        }
        return false;
    }

    @Override
    public float scaleValue(float f, float f2, float f3) {
        return 0.0f;
    }

}

