/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.util.Log
 */
package com.otaliastudios.cameraview;

import android.support.annotation.Nullable;
import android.util.Log;
import java.lang.annotation.Annotation;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

public final class CameraLogger {
    public static final int LEVEL_ERROR = 3;
    public static final int LEVEL_INFO = 1;
    public static final int LEVEL_VERBOSE = 0;
    public static final int LEVEL_WARNING = 2;
    static String lastMessage;
    static String lastTag;
    private static int sLevel;
    private static List<Logger> sLoggers;
    private String mTag;

    static {
        CameraLogger.setLogLevel(3);
        sLoggers = new ArrayList<Logger>();
        sLoggers.add(new Logger(){

            @Override
            public void log(int n, String string2, String string3, @Nullable Throwable throwable) {
                switch (n) {
                    default: {
                        return;
                    }
                    case 3: {
                        Log.e((String)string2, (String)string3, (Throwable)throwable);
                        return;
                    }
                    case 2: {
                        Log.w((String)string2, (String)string3, (Throwable)throwable);
                        return;
                    }
                    case 1: {
                        Log.i((String)string2, (String)string3, (Throwable)throwable);
                        return;
                    }
                    case 0: 
                }
                Log.v((String)string2, (String)string3, (Throwable)throwable);
            }
        });
    }

    private CameraLogger(String string2) {
        this.mTag = string2;
    }

    static CameraLogger create(String string2) {
        return new CameraLogger(string2);
    }

    private /* varargs */ void log(int n, Object ... object) {
        if (!this.should(n)) {
            return;
        }
        Object object2 = "";
        Throwable throwable = null;
        int n2 = ((Object[])object).length;
        for (Object object3 : object) {
            if (object3 instanceof Throwable) {
                throwable = (Throwable)object3;
            }
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append((String)object2);
            stringBuilder.append(String.valueOf(object3));
            object2 = stringBuilder.toString();
            object3 = new StringBuilder();
            object3.append((String)object2);
            object3.append(" ");
            object2 = object3.toString();
        }
        object = object2.trim();
        object2 = sLoggers.iterator();
        while (object2.hasNext()) {
            ((Logger)object2.next()).log(n, this.mTag, (String)object, throwable);
        }
        lastMessage = object;
        lastTag = this.mTag;
    }

    public static void registerLogger(Logger logger) {
        sLoggers.add(logger);
    }

    public static void setLogLevel(int n) {
        sLevel = n;
    }

    private boolean should(int n) {
        if (sLevel <= n && sLoggers.size() > 0) {
            return true;
        }
        return false;
    }

    public static void unregisterLogger(Logger logger) {
        sLoggers.remove(logger);
    }

    /* varargs */ void e(Object ... arrobject) {
        this.log(3, arrobject);
    }

    /* varargs */ void i(Object ... arrobject) {
        this.log(1, arrobject);
    }

    /* varargs */ void v(Object ... arrobject) {
        this.log(0, arrobject);
    }

    /* varargs */ void w(Object ... arrobject) {
        this.log(2, arrobject);
    }

    @Retention(value=RetentionPolicy.SOURCE)
    public static @interface LogLevel {
    }

    public static interface Logger {
        public void log(int var1, String var2, String var3, @Nullable Throwable var4);
    }

}

