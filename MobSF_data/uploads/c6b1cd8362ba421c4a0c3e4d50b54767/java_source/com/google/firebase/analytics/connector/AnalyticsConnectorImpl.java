/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.content.Context
 *  android.os.Bundle
 */
package com.google.firebase.analytics.connector;

import android.content.Context;
import android.os.Bundle;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.annotation.RequiresPermission;
import android.support.annotation.Size;
import android.support.annotation.WorkerThread;
import com.google.android.gms.common.annotation.KeepForSdk;
import com.google.android.gms.common.internal.Preconditions;
import com.google.android.gms.common.util.VisibleForTesting;
import com.google.android.gms.measurement.AppMeasurement;
import com.google.firebase.FirebaseApp;
import com.google.firebase.analytics.connector.AnalyticsConnector;
import com.google.firebase.analytics.connector.internal.zza;
import com.google.firebase.analytics.connector.internal.zzc;
import com.google.firebase.analytics.connector.internal.zzd;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;

public class AnalyticsConnectorImpl
implements AnalyticsConnector {
    private static volatile AnalyticsConnector zzbqi;
    private final AppMeasurement zzbqh;
    @VisibleForTesting
    final Map<String, zza> zzbqj;

    private AnalyticsConnectorImpl(AppMeasurement appMeasurement) {
        Preconditions.checkNotNull(appMeasurement);
        this.zzbqh = appMeasurement;
        this.zzbqj = new ConcurrentHashMap<String, zza>();
    }

    @KeepForSdk
    public static AnalyticsConnector getInstance() {
        return AnalyticsConnectorImpl.getInstance(FirebaseApp.getInstance());
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @RequiresPermission(allOf={"android.permission.INTERNET", "android.permission.ACCESS_NETWORK_STATE", "android.permission.WAKE_LOCK"})
    @KeepForSdk
    public static AnalyticsConnector getInstance(Context context) {
        Preconditions.checkNotNull(context);
        Preconditions.checkNotNull(context.getApplicationContext());
        if (zzbqi != null) return zzbqi;
        synchronized (AnalyticsConnector.class) {
            if (zzbqi != null) return zzbqi;
            zzbqi = new AnalyticsConnectorImpl(AppMeasurement.getInstance(context));
            return zzbqi;
        }
    }

    @KeepForSdk
    public static AnalyticsConnector getInstance(FirebaseApp firebaseApp) {
        return firebaseApp.get(AnalyticsConnector.class);
    }

    private final boolean zzfe(@NonNull String string2) {
        if (!string2.isEmpty() && this.zzbqj.containsKey(string2) && this.zzbqj.get(string2) != null) {
            return true;
        }
        return false;
    }

    @KeepForSdk
    @Override
    public void clearConditionalUserProperty(@NonNull @Size(max=24L, min=1L) String string2, @Nullable String string3, @Nullable Bundle bundle) {
        if (string3 != null && !zzc.zza(string3, bundle)) {
            return;
        }
        this.zzbqh.clearConditionalUserProperty(string2, string3, bundle);
    }

    @WorkerThread
    @KeepForSdk
    @Override
    public List<AnalyticsConnector.ConditionalUserProperty> getConditionalUserProperties(@NonNull String object, @Nullable @Size(max=23L, min=1L) String string2) {
        ArrayList<AnalyticsConnector.ConditionalUserProperty> arrayList = new ArrayList<AnalyticsConnector.ConditionalUserProperty>();
        object = this.zzbqh.getConditionalUserProperties((String)object, string2).iterator();
        while (object.hasNext()) {
            arrayList.add(zzc.zzd((AppMeasurement.ConditionalUserProperty)object.next()));
        }
        return arrayList;
    }

    @WorkerThread
    @KeepForSdk
    @Override
    public int getMaxUserProperties(@NonNull @Size(min=1L) String string2) {
        return this.zzbqh.getMaxUserProperties(string2);
    }

    @WorkerThread
    @KeepForSdk
    @Override
    public Map<String, Object> getUserProperties(boolean bl) {
        return this.zzbqh.getUserProperties(bl);
    }

    @KeepForSdk
    @Override
    public void logEvent(@NonNull String string2, @NonNull String string3, Bundle bundle) {
        Bundle bundle2 = bundle;
        if (bundle == null) {
            bundle2 = new Bundle();
        }
        if (!zzc.zzff(string2)) {
            return;
        }
        if (!zzc.zza(string3, bundle2)) {
            return;
        }
        if (!zzc.zzb(string2, string3, bundle2)) {
            return;
        }
        this.zzbqh.logEventInternal(string2, string3, bundle2);
    }

    @WorkerThread
    @KeepForSdk
    @Override
    public AnalyticsConnector.AnalyticsConnectorHandle registerAnalyticsConnectorListener(final @NonNull String string2, AnalyticsConnector.AnalyticsConnectorListener object) {
        Preconditions.checkNotNull(object);
        if (!zzc.zzff(string2)) {
            return null;
        }
        if (this.zzfe(string2)) {
            return null;
        }
        AppMeasurement appMeasurement = this.zzbqh;
        object = "fiam".equals(string2) ? new zzd(appMeasurement, (AnalyticsConnector.AnalyticsConnectorListener)object) : null;
        if (object != null) {
            this.zzbqj.put(string2, (zza)object);
            return new AnalyticsConnector.AnalyticsConnectorHandle(){

                @KeepForSdk
                public void registerEventNames(Set<String> set) {
                    if (AnalyticsConnectorImpl.this.zzfe(string2) && string2.equals("fiam") && set != null) {
                        if (set.isEmpty()) {
                            return;
                        }
                        AnalyticsConnectorImpl.this.zzbqj.get(string2).registerEventNames(set);
                    }
                }

                @Override
                public void unregister() {
                    if (!AnalyticsConnectorImpl.this.zzfe(string2)) {
                        return;
                    }
                    AnalyticsConnector.AnalyticsConnectorListener analyticsConnectorListener = AnalyticsConnectorImpl.this.zzbqj.get(string2).zzss();
                    if (analyticsConnectorListener != null) {
                        analyticsConnectorListener.onMessageTriggered(0, null);
                    }
                    AnalyticsConnectorImpl.this.zzbqj.remove(string2);
                }

                @KeepForSdk
                public void unregisterEventNames() {
                    if (AnalyticsConnectorImpl.this.zzfe(string2)) {
                        if (!string2.equals("fiam")) {
                            return;
                        }
                        AnalyticsConnectorImpl.this.zzbqj.get(string2).unregisterEventNames();
                    }
                }
            };
        }
        return null;
    }

    @KeepForSdk
    @Override
    public void setConditionalUserProperty(@NonNull AnalyticsConnector.ConditionalUserProperty conditionalUserProperty) {
        if (!zzc.zza(conditionalUserProperty)) {
            return;
        }
        this.zzbqh.setConditionalUserProperty(zzc.zzb(conditionalUserProperty));
    }

    @KeepForSdk
    @Override
    public void setUserProperty(@NonNull String string2, @NonNull String string3, Object object) {
        if (!zzc.zzff(string2)) {
            return;
        }
        if (!zzc.zzw(string2, string3)) {
            return;
        }
        this.zzbqh.setUserPropertyInternal(string2, string3, object);
    }

}

