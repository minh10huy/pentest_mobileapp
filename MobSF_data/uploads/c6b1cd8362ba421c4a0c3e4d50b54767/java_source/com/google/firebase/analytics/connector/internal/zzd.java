/*
 * Decompiled with CFR 0_132.
 */
package com.google.firebase.analytics.connector.internal;

import com.google.android.gms.measurement.AppMeasurement;
import com.google.firebase.analytics.connector.AnalyticsConnector;
import com.google.firebase.analytics.connector.internal.zza;
import com.google.firebase.analytics.connector.internal.zzc;
import com.google.firebase.analytics.connector.internal.zze;
import java.util.Collection;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;

public final class zzd
implements zza {
    private AppMeasurement zzbqh;
    Set<String> zzbqr;
    private AnalyticsConnector.AnalyticsConnectorListener zzbqs;
    private zze zzbqt;

    public zzd(AppMeasurement appMeasurement, AnalyticsConnector.AnalyticsConnectorListener analyticsConnectorListener) {
        this.zzbqs = analyticsConnectorListener;
        this.zzbqh = appMeasurement;
        this.zzbqt = new zze(this);
        this.zzbqh.registerOnMeasurementEventListener(this.zzbqt);
        this.zzbqr = new HashSet<String>();
    }

    static /* synthetic */ AnalyticsConnector.AnalyticsConnectorListener zza(zzd zzd2) {
        return zzd2.zzbqs;
    }

    @Override
    public final void registerEventNames(Set<String> object) {
        this.zzbqr.clear();
        Set<String> set = this.zzbqr;
        HashSet<String> hashSet = new HashSet<String>();
        object = object.iterator();
        while (object.hasNext()) {
            String string2 = (String)object.next();
            if (hashSet.size() >= 50) break;
            if (!zzc.zzfh(string2) || !zzc.zzfg(string2)) continue;
            hashSet.add(zzc.zzfj(string2));
        }
        set.addAll(hashSet);
    }

    @Override
    public final void unregisterEventNames() {
        this.zzbqr.clear();
    }

    @Override
    public final AnalyticsConnector.AnalyticsConnectorListener zzss() {
        return this.zzbqs;
    }
}

