/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.content.Context
 *  android.content.SharedPreferences
 *  android.content.SharedPreferences$Editor
 *  android.util.Log
 */
package com.google.firebase.iid;

import android.content.Context;
import android.content.SharedPreferences;
import android.support.annotation.GuardedBy;
import android.support.v4.content.ContextCompat;
import android.support.v4.util.ArrayMap;
import android.util.Log;
import com.google.firebase.iid.FirebaseInstanceId;
import com.google.firebase.iid.zzav;
import com.google.firebase.iid.zzw;
import com.google.firebase.iid.zzx;
import com.google.firebase.iid.zzy;
import java.io.File;
import java.io.IOException;
import java.util.Map;
import java.util.Set;

final class zzau {
    private final SharedPreferences zzct;
    private final zzw zzcu;
    @GuardedBy(value="this")
    private final Map<String, zzx> zzcv;
    private final Context zzv;

    public zzau(Context context) {
        this(context, new zzw());
    }

    private zzau(Context object, zzw zzw2) {
        block4 : {
            this.zzcv = new ArrayMap<String, zzx>();
            this.zzv = object;
            this.zzct = object.getSharedPreferences("com.google.android.gms.appid", 0);
            this.zzcu = zzw2;
            object = new File(ContextCompat.getNoBackupFilesDir(this.zzv), "com.google.android.gms.appid-no-backup");
            if (!object.exists()) {
                try {
                    if (object.createNewFile() && !this.isEmpty()) {
                        Log.i((String)"FirebaseInstanceId", (String)"App restored, clearing state");
                        this.zzak();
                        FirebaseInstanceId.getInstance().zzl();
                    }
                    return;
                }
                catch (IOException iOException) {
                    if (!Log.isLoggable((String)"FirebaseInstanceId", (int)3)) break block4;
                    String string2 = String.valueOf(iOException.getMessage());
                    string2 = string2.length() != 0 ? "Error creating file in no backup dir: ".concat(string2) : new String("Error creating file in no backup dir: ");
                    Log.d((String)"FirebaseInstanceId", (String)string2);
                }
            }
        }
    }

    private final boolean isEmpty() {
        synchronized (this) {
            boolean bl = this.zzct.getAll().isEmpty();
            return bl;
        }
    }

    private static String zzb(String string2, String string3, String string4) {
        StringBuilder stringBuilder = new StringBuilder(String.valueOf(string2).length() + 4 + String.valueOf(string3).length() + String.valueOf(string4).length());
        stringBuilder.append(string2);
        stringBuilder.append("|T|");
        stringBuilder.append(string3);
        stringBuilder.append("|");
        stringBuilder.append(string4);
        return stringBuilder.toString();
    }

    static String zzc(String string2, String string3) {
        StringBuilder stringBuilder = new StringBuilder(String.valueOf(string2).length() + 3 + String.valueOf(string3).length());
        stringBuilder.append(string2);
        stringBuilder.append("|S|");
        stringBuilder.append(string3);
        return stringBuilder.toString();
    }

    public final void zza(String string2, String string3, String string4, String string5, String string6) {
        synchronized (this) {
            block4 : {
                string5 = zzav.zza(string5, string6, System.currentTimeMillis());
                if (string5 != null) break block4;
                return;
            }
            string6 = this.zzct.edit();
            string6.putString(zzau.zzb(string2, string3, string4), string5);
            string6.commit();
            return;
        }
    }

    public final String zzaj() {
        synchronized (this) {
            String string2 = this.zzct.getString("topic_operaion_queue", "");
            return string2;
        }
    }

    public final void zzak() {
        synchronized (this) {
            this.zzcv.clear();
            zzw.zza(this.zzv);
            this.zzct.edit().clear().commit();
            return;
        }
    }

    public final zzav zzc(String object, String string2, String string3) {
        synchronized (this) {
            object = zzav.zzi(this.zzct.getString(zzau.zzb((String)object, string2, string3), null));
            return object;
        }
    }

    public final void zzd(String string2, String string3, String string4) {
        synchronized (this) {
            string2 = zzau.zzb(string2, string3, string4);
            string3 = this.zzct.edit();
            string3.remove(string2);
            string3.commit();
            return;
        }
    }

    public final void zzf(String string2) {
        synchronized (this) {
            this.zzct.edit().putString("topic_operaion_queue", string2).apply();
            return;
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public final zzx zzg(String string2) {
        synchronized (this) {
            zzx zzx2;
            block6 : {
                zzx2 = this.zzcv.get(string2);
                if (zzx2 != null) {
                    return zzx2;
                }
                try {
                    zzx2 = this.zzcu.zzb(this.zzv, string2);
                    break block6;
                }
                catch (zzy zzy2) {}
                Log.w((String)"FirebaseInstanceId", (String)"Stored data is corrupt, generating new identity");
                FirebaseInstanceId.getInstance().zzl();
                zzx2 = this.zzcu.zzc(this.zzv, string2);
            }
            this.zzcv.put(string2, zzx2);
            return zzx2;
        }
    }

    public final void zzh(String string2) {
        synchronized (this) {
            string2 = String.valueOf(string2).concat("|T|");
            SharedPreferences.Editor editor = this.zzct.edit();
            for (String string3 : this.zzct.getAll().keySet()) {
                if (!string3.startsWith(string2)) continue;
                editor.remove(string3);
            }
            editor.commit();
            return;
        }
    }
}

