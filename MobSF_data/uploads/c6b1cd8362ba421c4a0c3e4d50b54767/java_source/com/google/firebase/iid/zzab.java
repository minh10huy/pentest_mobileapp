/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.content.ComponentName
 *  android.content.Context
 *  android.content.ServiceConnection
 *  android.os.Bundle
 *  android.os.Handler
 *  android.os.Handler$Callback
 *  android.os.IBinder
 *  android.os.Looper
 *  android.os.Message
 *  android.os.Messenger
 *  android.os.RemoteException
 *  android.util.Log
 *  android.util.SparseArray
 *  javax.annotation.concurrent.GuardedBy
 */
package com.google.firebase.iid;

import android.content.ComponentName;
import android.content.Context;
import android.content.ServiceConnection;
import android.os.Bundle;
import android.os.Handler;
import android.os.IBinder;
import android.os.Looper;
import android.os.Message;
import android.os.Messenger;
import android.os.RemoteException;
import android.util.Log;
import android.util.SparseArray;
import com.google.android.gms.common.stats.ConnectionTracker;
import com.google.firebase.iid.zzaa;
import com.google.firebase.iid.zzac;
import com.google.firebase.iid.zzae;
import com.google.firebase.iid.zzag;
import com.google.firebase.iid.zzai;
import com.google.firebase.iid.zzaj;
import com.google.firebase.iid.zzz;
import java.util.ArrayDeque;
import java.util.Queue;
import javax.annotation.concurrent.GuardedBy;

final class zzab
implements ServiceConnection {
    @GuardedBy(value="this")
    int state = 0;
    final Messenger zzbo = new Messenger(new Handler(Looper.getMainLooper(), (Handler.Callback)new zzac(this)));
    zzag zzbp;
    @GuardedBy(value="this")
    final Queue<zzai<?>> zzbq = new ArrayDeque();
    @GuardedBy(value="this")
    final SparseArray<zzai<?>> zzbr = new SparseArray();
    final /* synthetic */ zzz zzbs;

    private zzab(zzz zzz2) {
        this.zzbs = zzz2;
    }

    /* synthetic */ zzab(zzz zzz2, zzaa zzaa2) {
        this(zzz2);
    }

    private final void zzx() {
        zzz.zzb(this.zzbs).execute(new zzae(this));
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public final void onServiceConnected(ComponentName componentName, IBinder iBinder) {
        synchronized (this) {
            void var2_3;
            if (Log.isLoggable((String)"MessengerIpcClient", (int)2)) {
                Log.v((String)"MessengerIpcClient", (String)"Service connected");
            }
            if (var2_3 == null) {
                this.zza(0, "Null service connection");
                return;
            }
            try {
                this.zzbp = new zzag((IBinder)var2_3);
            }
            catch (RemoteException remoteException) {
                this.zza(0, remoteException.getMessage());
                return;
            }
            this.state = 2;
            this.zzx();
            return;
        }
    }

    public final void onServiceDisconnected(ComponentName componentName) {
        synchronized (this) {
            if (Log.isLoggable((String)"MessengerIpcClient", (int)2)) {
                Log.v((String)"MessengerIpcClient", (String)"Service disconnected");
            }
            this.zza(2, "Service disconnected");
            return;
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    final void zza(int n) {
        synchronized (this) {
            zzai zzai2 = (zzai)this.zzbr.get(n);
            if (zzai2 != null) {
                StringBuilder stringBuilder = new StringBuilder(31);
                stringBuilder.append("Timing out request: ");
                stringBuilder.append(n);
                Log.w((String)"MessengerIpcClient", (String)stringBuilder.toString());
                this.zzbr.remove(n);
                zzai2.zza(new zzaj(3, "Timed out waiting for response"));
                this.zzy();
            }
            return;
        }
    }

    /*
     * Exception decompiling
     */
    final void zza(int var1_1, String var2_2) {
        // This method has failed to decompile.  When submitting a bug report, please provide this stack trace, and (if you hold appropriate legal rights) the relevant class file.
        // org.benf.cfr.reader.util.ConfusedCFRException: First case is not immediately after switch.
        // org.benf.cfr.reader.bytecode.analysis.opgraph.op3rewriters.SwitchReplacer.examineSwitchContiguity(SwitchReplacer.java:366)
        // org.benf.cfr.reader.bytecode.analysis.opgraph.op3rewriters.SwitchReplacer.replaceRawSwitches(SwitchReplacer.java:65)
        // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisInner(CodeAnalyser.java:416)
        // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisOrWrapFail(CodeAnalyser.java:196)
        // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysis(CodeAnalyser.java:141)
        // org.benf.cfr.reader.entities.attributes.AttributeCode.analyse(AttributeCode.java:95)
        // org.benf.cfr.reader.entities.Method.analyse(Method.java:372)
        // org.benf.cfr.reader.entities.ClassFile.analyseMid(ClassFile.java:867)
        // org.benf.cfr.reader.entities.ClassFile.analyseTop(ClassFile.java:768)
        // org.benf.cfr.reader.Main.doJar(Main.java:141)
        // org.benf.cfr.reader.Main.main(Main.java:242)
        throw new IllegalStateException("Decompilation failed");
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    final boolean zza(Message object) {
        Object object2;
        int n = object.arg1;
        if (Log.isLoggable((String)"MessengerIpcClient", (int)3)) {
            object2 = new StringBuilder(41);
            object2.append("Received response to request: ");
            object2.append(n);
            Log.d((String)"MessengerIpcClient", (String)object2.toString());
        }
        synchronized (this) {
            object2 = (zzai)this.zzbr.get(n);
            if (object2 == null) {
                object = new StringBuilder(50);
                object.append("Received response for unknown request: ");
                object.append(n);
                Log.w((String)"MessengerIpcClient", (String)object.toString());
                return true;
            }
            this.zzbr.remove(n);
            this.zzy();
        }
        object = object.getData();
        if (object.getBoolean("unsupported", false)) {
            object2.zza(new zzaj(4, "Not supported by GmsCore"));
            return true;
        }
        object2.zzb((Bundle)object);
        return true;
    }

    /*
     * Exception decompiling
     */
    final boolean zzb(zzai var1_1) {
        // This method has failed to decompile.  When submitting a bug report, please provide this stack trace, and (if you hold appropriate legal rights) the relevant class file.
        // org.benf.cfr.reader.util.ConfusedCFRException: First case is not immediately after switch.
        // org.benf.cfr.reader.bytecode.analysis.opgraph.op3rewriters.SwitchReplacer.examineSwitchContiguity(SwitchReplacer.java:366)
        // org.benf.cfr.reader.bytecode.analysis.opgraph.op3rewriters.SwitchReplacer.replaceRawSwitches(SwitchReplacer.java:65)
        // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisInner(CodeAnalyser.java:416)
        // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisOrWrapFail(CodeAnalyser.java:196)
        // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysis(CodeAnalyser.java:141)
        // org.benf.cfr.reader.entities.attributes.AttributeCode.analyse(AttributeCode.java:95)
        // org.benf.cfr.reader.entities.Method.analyse(Method.java:372)
        // org.benf.cfr.reader.entities.ClassFile.analyseMid(ClassFile.java:867)
        // org.benf.cfr.reader.entities.ClassFile.analyseTop(ClassFile.java:768)
        // org.benf.cfr.reader.Main.doJar(Main.java:141)
        // org.benf.cfr.reader.Main.main(Main.java:242)
        throw new IllegalStateException("Decompilation failed");
    }

    final void zzy() {
        synchronized (this) {
            if (this.state == 2 && this.zzbq.isEmpty() && this.zzbr.size() == 0) {
                if (Log.isLoggable((String)"MessengerIpcClient", (int)2)) {
                    Log.v((String)"MessengerIpcClient", (String)"Finished handling requests, unbinding");
                }
                this.state = 3;
                ConnectionTracker.getInstance().unbindService(zzz.zza(this.zzbs), this);
            }
            return;
        }
    }

    final void zzz() {
        synchronized (this) {
            if (this.state == 1) {
                this.zza(1, "Timed out while binding");
            }
            return;
        }
    }
}

