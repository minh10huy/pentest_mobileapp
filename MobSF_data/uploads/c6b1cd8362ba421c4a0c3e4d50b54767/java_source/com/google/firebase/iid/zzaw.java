/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.content.Context
 *  android.content.Intent
 *  android.net.ConnectivityManager
 *  android.net.NetworkInfo
 *  android.os.PowerManager
 *  android.os.PowerManager$WakeLock
 *  android.util.Log
 */
package com.google.firebase.iid;

import android.content.Context;
import android.content.Intent;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.os.PowerManager;
import android.util.Log;
import com.google.android.gms.common.util.VisibleForTesting;
import com.google.firebase.FirebaseApp;
import com.google.firebase.iid.FirebaseInstanceId;
import com.google.firebase.iid.zzal;
import com.google.firebase.iid.zzat;
import com.google.firebase.iid.zzav;
import com.google.firebase.iid.zzax;
import com.google.firebase.iid.zzay;
import java.io.IOException;

final class zzaw
implements Runnable {
    private final zzal zzak;
    private final zzay zzan;
    private final long zzcy;
    private final PowerManager.WakeLock zzcz;
    private final FirebaseInstanceId zzda;

    @VisibleForTesting
    zzaw(FirebaseInstanceId firebaseInstanceId, zzal zzal2, zzay zzay2, long l) {
        this.zzda = firebaseInstanceId;
        this.zzak = zzal2;
        this.zzan = zzay2;
        this.zzcy = l;
        this.zzcz = ((PowerManager)this.getContext().getSystemService("power")).newWakeLock(1, "fiid-sync");
        this.zzcz.setReferenceCounted(false);
    }

    @VisibleForTesting
    private final boolean zzal() {
        try {
            if (!this.zzda.zzn()) {
                this.zzda.zzo();
            }
            return true;
        }
        catch (IOException iOException) {
            String string2 = String.valueOf(iOException.getMessage());
            string2 = string2.length() != 0 ? "Build channel failed: ".concat(string2) : new String("Build channel failed: ");
            Log.e((String)"FirebaseInstanceId", (String)string2);
            return false;
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @VisibleForTesting
    private final boolean zzam() {
        zzav zzav2 = this.zzda.zzi();
        if (zzav2 != null && !zzav2.zzj(this.zzak.zzac())) {
            return true;
        }
        try {
            String string2 = this.zzda.zzj();
            if (string2 == null) {
                Log.e((String)"FirebaseInstanceId", (String)"Token retrieval failed: null");
                return false;
            }
            if (Log.isLoggable((String)"FirebaseInstanceId", (int)3)) {
                Log.d((String)"FirebaseInstanceId", (String)"Token successfully retrieved");
            }
            if (zzav2 == null || zzav2 != null && !string2.equals(zzav2.zzbh)) {
                zzav2 = this.getContext();
                Intent intent = new Intent("com.google.firebase.messaging.NEW_TOKEN");
                intent.putExtra("token", string2);
                zzat.zzc((Context)zzav2, intent);
                zzat.zzb((Context)zzav2, new Intent("com.google.firebase.iid.TOKEN_REFRESH"));
            }
            return true;
        }
        catch (IOException | SecurityException exception) {
            String string3 = String.valueOf(exception.getMessage());
            string3 = string3.length() != 0 ? "Token retrieval failed: ".concat(string3) : new String("Token retrieval failed: ");
            Log.e((String)"FirebaseInstanceId", (String)string3);
            return false;
        }
    }

    final Context getContext() {
        return this.zzda.zzg().getApplicationContext();
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @Override
    public final void run() {
        this.zzcz.acquire();
        try {
            block10 : {
                FirebaseInstanceId firebaseInstanceId;
                block9 : {
                    block8 : {
                        this.zzda.zza(true);
                        if (this.zzda.zzm()) break block8;
                        firebaseInstanceId = this.zzda;
                        break block9;
                    }
                    if (!this.zzan()) {
                        new zzax(this).zzao();
                        return;
                    }
                    if (!this.zzal() || !this.zzam() || !this.zzan.zza(this.zzda)) break block10;
                    firebaseInstanceId = this.zzda;
                }
                firebaseInstanceId.zza(false);
                return;
            }
            this.zzda.zza(this.zzcy);
            return;
        }
        finally {
            this.zzcz.release();
        }
    }

    final boolean zzan() {
        Object object = (ConnectivityManager)this.getContext().getSystemService("connectivity");
        object = object != null ? object.getActiveNetworkInfo() : null;
        if (object != null && object.isConnected()) {
            return true;
        }
        return false;
    }
}

