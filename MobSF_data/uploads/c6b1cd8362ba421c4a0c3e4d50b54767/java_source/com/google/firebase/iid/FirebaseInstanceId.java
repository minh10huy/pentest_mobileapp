/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.content.Context
 *  android.content.Intent
 *  android.content.SharedPreferences
 *  android.content.SharedPreferences$Editor
 *  android.content.pm.ApplicationInfo
 *  android.content.pm.PackageManager
 *  android.content.pm.PackageManager$NameNotFoundException
 *  android.content.pm.ResolveInfo
 *  android.content.pm.ServiceInfo
 *  android.os.Build
 *  android.os.Build$VERSION
 *  android.os.Bundle
 *  android.os.Looper
 *  android.util.Log
 *  javax.annotation.concurrent.GuardedBy
 */
package com.google.firebase.iid;

import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageManager;
import android.content.pm.ResolveInfo;
import android.content.pm.ServiceInfo;
import android.os.Build;
import android.os.Bundle;
import android.os.Looper;
import android.support.annotation.Keep;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.annotation.WorkerThread;
import android.util.Log;
import com.google.android.gms.common.util.VisibleForTesting;
import com.google.android.gms.tasks.OnCompleteListener;
import com.google.android.gms.tasks.Task;
import com.google.android.gms.tasks.TaskCompletionSource;
import com.google.android.gms.tasks.Tasks;
import com.google.firebase.FirebaseApp;
import com.google.firebase.iid.InstanceIdResult;
import com.google.firebase.iid.MessagingChannel;
import com.google.firebase.iid.zzal;
import com.google.firebase.iid.zzao;
import com.google.firebase.iid.zzaq;
import com.google.firebase.iid.zzau;
import com.google.firebase.iid.zzav;
import com.google.firebase.iid.zzaw;
import com.google.firebase.iid.zzay;
import com.google.firebase.iid.zzi;
import com.google.firebase.iid.zzm;
import com.google.firebase.iid.zzn;
import com.google.firebase.iid.zzo;
import com.google.firebase.iid.zzp;
import com.google.firebase.iid.zzv;
import com.google.firebase.iid.zzx;
import java.io.IOException;
import java.security.KeyPair;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Executor;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;
import javax.annotation.concurrent.GuardedBy;

public class FirebaseInstanceId {
    private static final long zzaf = TimeUnit.HOURS.toSeconds(8L);
    private static zzau zzag;
    @VisibleForTesting
    @GuardedBy(value="FirebaseInstanceId.class")
    private static ScheduledThreadPoolExecutor zzah;
    private final Executor zzai;
    private final FirebaseApp zzaj;
    private final zzal zzak;
    private MessagingChannel zzal;
    private final zzao zzam = new zzao();
    private final zzay zzan;
    @GuardedBy(value="this")
    private boolean zzao = false;
    @GuardedBy(value="this")
    private boolean zzap;

    FirebaseInstanceId(FirebaseApp firebaseApp) {
        this(firebaseApp, new zzal(firebaseApp.getApplicationContext()), zzi.zze(), zzi.zze());
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    private FirebaseInstanceId(FirebaseApp object, zzal zzal2, Executor executor, Executor executor2) {
        if (zzal.zza((FirebaseApp)object) == null) {
            throw new IllegalStateException("FirebaseInstanceId failed to initialize, FirebaseApp is missing project ID");
        }
        synchronized (FirebaseInstanceId.class) {
            if (zzag == null) {
                zzag = new zzau(object.getApplicationContext());
            }
        }
        this.zzaj = object;
        this.zzak = zzal2;
        if (this.zzal == null) {
            MessagingChannel messagingChannel = object.get(MessagingChannel.class);
            object = messagingChannel != null && messagingChannel.isAvailable() ? messagingChannel : new zzp((FirebaseApp)object, zzal2, executor);
            this.zzal = object;
        }
        this.zzal = this.zzal;
        this.zzai = executor2;
        this.zzan = new zzay(zzag);
        this.zzap = this.zzq();
        if (this.zzs()) {
            this.zzf();
        }
    }

    public static FirebaseInstanceId getInstance() {
        return FirebaseInstanceId.getInstance(FirebaseApp.getInstance());
    }

    @Keep
    public static FirebaseInstanceId getInstance(@NonNull FirebaseApp object) {
        synchronized (FirebaseInstanceId.class) {
            object = object.get(FirebaseInstanceId.class);
            return object;
        }
    }

    private final void startSync() {
        synchronized (this) {
            if (!this.zzao) {
                this.zza(0L);
            }
            return;
        }
    }

    private final Task<InstanceIdResult> zza(String string2, String string3) {
        String string4 = FirebaseInstanceId.zzd(string3);
        TaskCompletionSource taskCompletionSource = new TaskCompletionSource();
        this.zzai.execute(new zzm(this, string2, string3, taskCompletionSource, string4));
        return taskCompletionSource.getTask();
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    private final <T> T zza(Task<T> task) throws IOException {
        T t;
        try {
            t = Tasks.await(task, 30000L, TimeUnit.MILLISECONDS);
        }
        catch (ExecutionException executionException) {
            Throwable throwable = executionException.getCause();
            if (throwable instanceof IOException) {
                if (!"INSTANCE_ID_RESET".equals(throwable.getMessage())) throw (IOException)throwable;
                this.zzl();
                throw (IOException)throwable;
            }
            if (!(throwable instanceof RuntimeException)) throw new IOException(executionException);
            throw (RuntimeException)throwable;
        }
        catch (InterruptedException | TimeoutException exception) {
            throw new IOException("SERVICE_NOT_AVAILABLE");
        }
        return t;
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    static void zza(Runnable runnable, long l) {
        synchronized (FirebaseInstanceId.class) {
            if (zzah == null) {
                zzah = new ScheduledThreadPoolExecutor(1);
            }
            zzah.schedule(runnable, l, TimeUnit.SECONDS);
            return;
        }
    }

    private static String zzd(String string2) {
        if (!(string2.isEmpty() || string2.equalsIgnoreCase("fcm") || string2.equalsIgnoreCase("gcm"))) {
            return string2;
        }
        return "*";
    }

    private final void zzf() {
        zzav zzav2 = this.zzi();
        if (!this.zzn() || zzav2 == null || zzav2.zzj(this.zzak.zzac()) || this.zzan.zzap()) {
            this.startSync();
        }
    }

    private static String zzh() {
        return zzal.zza(zzag.zzg("").getKeyPair());
    }

    static boolean zzk() {
        if (!(Log.isLoggable((String)"FirebaseInstanceId", (int)3) || Build.VERSION.SDK_INT == 23 && Log.isLoggable((String)"FirebaseInstanceId", (int)3))) {
            return false;
        }
        return true;
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    private final boolean zzq() {
        Context context = this.zzaj.getApplicationContext();
        SharedPreferences sharedPreferences = context.getSharedPreferences("com.google.firebase.messaging", 0);
        if (sharedPreferences.contains("auto_init")) {
            return sharedPreferences.getBoolean("auto_init", true);
        }
        try {
            sharedPreferences = context.getPackageManager();
            if (sharedPreferences == null) return this.zzr();
        }
        catch (PackageManager.NameNotFoundException nameNotFoundException) {
            return this.zzr();
        }
        context = sharedPreferences.getApplicationInfo(context.getPackageName(), 128);
        if (context == null) return this.zzr();
        if (context.metaData == null) return this.zzr();
        if (!context.metaData.containsKey("firebase_messaging_auto_init_enabled")) return this.zzr();
        return context.metaData.getBoolean("firebase_messaging_auto_init_enabled");
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    private final boolean zzr() {
        try {
            Class.forName("com.google.firebase.messaging.FirebaseMessaging");
            return true;
        }
        catch (ClassNotFoundException classNotFoundException) {}
        Context context = this.zzaj.getApplicationContext();
        Intent intent = new Intent("com.google.firebase.MESSAGING_EVENT");
        intent.setPackage(context.getPackageName());
        context = context.getPackageManager().resolveService(intent, 0);
        if (context != null && context.serviceInfo != null) {
            return true;
        }
        return false;
    }

    @WorkerThread
    public void deleteInstanceId() throws IOException {
        if (Looper.getMainLooper() == Looper.myLooper()) {
            throw new IOException("MAIN_THREAD");
        }
        String string2 = FirebaseInstanceId.zzh();
        this.zza(this.zzal.deleteInstanceId(string2));
        this.zzl();
    }

    @WorkerThread
    public void deleteToken(String string2, String string3) throws IOException {
        if (Looper.getMainLooper() == Looper.myLooper()) {
            throw new IOException("MAIN_THREAD");
        }
        string3 = FirebaseInstanceId.zzd(string3);
        String string4 = FirebaseInstanceId.zzh();
        this.zza(this.zzal.deleteToken(string4, string2, string3));
        zzag.zzd("", string2, string3);
    }

    public long getCreationTime() {
        return zzag.zzg("").getCreationTime();
    }

    @WorkerThread
    public String getId() {
        this.zzf();
        return FirebaseInstanceId.zzh();
    }

    @NonNull
    public Task<InstanceIdResult> getInstanceId() {
        return this.zza(zzal.zza(this.zzaj), "*");
    }

    @Deprecated
    @Nullable
    public String getToken() {
        zzav zzav2 = this.zzi();
        if (zzav2 == null || zzav2.zzj(this.zzak.zzac())) {
            this.startSync();
        }
        if (zzav2 != null) {
            return zzav2.zzbh;
        }
        return null;
    }

    @WorkerThread
    public String getToken(String string2, String string3) throws IOException {
        if (Looper.getMainLooper() == Looper.myLooper()) {
            throw new IOException("MAIN_THREAD");
        }
        return this.zza(this.zza(string2, string3)).getToken();
    }

    public final Task<Void> zza(String object) {
        synchronized (this) {
            object = this.zzan.zza((String)object);
            this.startSync();
            return object;
        }
    }

    final /* synthetic */ Task zza(String string2, String string3, String string4) {
        return this.zzal.getToken(string2, string3, string4);
    }

    final void zza(long l) {
        synchronized (this) {
            long l2 = Math.min(Math.max(30L, l << 1), zzaf);
            FirebaseInstanceId.zza(new zzaw(this, this.zzak, this.zzan, l2), l);
            this.zzao = true;
            return;
        }
    }

    final /* synthetic */ void zza(String string2, String object, TaskCompletionSource taskCompletionSource, String string3) {
        String string4 = FirebaseInstanceId.zzh();
        if ((object = zzag.zzc("", string2, (String)object)) != null && !object.zzj(this.zzak.zzac())) {
            taskCompletionSource.setResult(new zzv(string4, object.zzbh));
            return;
        }
        this.zzam.zza(string2, string3, new zzn(this, string4, string2, string3)).addOnCompleteListener(this.zzai, (OnCompleteListener<String>)new zzo(this, string2, string3, taskCompletionSource, string4));
    }

    final /* synthetic */ void zza(String string2, String string3, TaskCompletionSource taskCompletionSource, String string4, Task object) {
        if (object.isSuccessful()) {
            object = (String)object.getResult();
            zzag.zza("", string2, string3, (String)object, this.zzak.zzac());
            taskCompletionSource.setResult(new zzv(string4, (String)object));
            return;
        }
        taskCompletionSource.setException(object.getException());
    }

    final void zza(boolean bl) {
        synchronized (this) {
            this.zzao = bl;
            return;
        }
    }

    final void zzb(String string2) throws IOException {
        Object object = this.zzi();
        if (object != null && !object.zzj(this.zzak.zzac())) {
            String string3 = FirebaseInstanceId.zzh();
            object = object.zzbh;
            this.zza(this.zzal.subscribeToTopic(string3, (String)object, string2));
            return;
        }
        throw new IOException("token not available");
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @VisibleForTesting
    public final void zzb(boolean bl) {
        synchronized (this) {
            SharedPreferences.Editor editor = this.zzaj.getApplicationContext().getSharedPreferences("com.google.firebase.messaging", 0).edit();
            editor.putBoolean("auto_init", bl);
            editor.apply();
            if (!this.zzap && bl) {
                this.zzf();
            }
            this.zzap = bl;
            return;
        }
    }

    final void zzc(String string2) throws IOException {
        zzav zzav2 = this.zzi();
        if (zzav2 != null && !zzav2.zzj(this.zzak.zzac())) {
            String string3 = FirebaseInstanceId.zzh();
            this.zza(this.zzal.unsubscribeFromTopic(string3, zzav2.zzbh, string2));
            return;
        }
        throw new IOException("token not available");
    }

    final FirebaseApp zzg() {
        return this.zzaj;
    }

    @Nullable
    final zzav zzi() {
        return zzag.zzc("", zzal.zza(this.zzaj), "*");
    }

    final String zzj() throws IOException {
        return this.getToken(zzal.zza(this.zzaj), "*");
    }

    final void zzl() {
        synchronized (this) {
            zzag.zzak();
            if (this.zzs()) {
                this.startSync();
            }
            return;
        }
    }

    final boolean zzm() {
        return this.zzal.isAvailable();
    }

    final boolean zzn() {
        return this.zzal.isChannelBuilt();
    }

    final void zzo() throws IOException {
        String string2 = FirebaseInstanceId.zzh();
        Object object = this.zzi();
        object = object == null ? null : object.zzbh;
        this.zza(this.zzal.buildChannel(string2, (String)object));
    }

    final void zzp() {
        zzag.zzh("");
        this.startSync();
    }

    @VisibleForTesting
    public final boolean zzs() {
        synchronized (this) {
            boolean bl = this.zzap;
            return bl;
        }
    }
}

