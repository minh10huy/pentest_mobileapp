/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.content.Context
 *  android.os.Build
 *  android.os.Build$VERSION
 *  android.os.Bundle
 *  android.util.Log
 */
package com.google.firebase.iid;

import android.content.Context;
import android.os.Build;
import android.os.Bundle;
import android.support.annotation.VisibleForTesting;
import android.util.Log;
import com.google.android.gms.tasks.Continuation;
import com.google.android.gms.tasks.Task;
import com.google.android.gms.tasks.TaskCompletionSource;
import com.google.android.gms.tasks.Tasks;
import com.google.firebase.FirebaseApp;
import com.google.firebase.FirebaseOptions;
import com.google.firebase.iid.MessagingChannel;
import com.google.firebase.iid.zzal;
import com.google.firebase.iid.zzar;
import com.google.firebase.iid.zzi;
import com.google.firebase.iid.zzq;
import com.google.firebase.iid.zzr;
import com.google.firebase.iid.zzs;
import java.io.IOException;
import java.util.concurrent.Executor;

final class zzp
implements MessagingChannel {
    private final FirebaseApp zzaj;
    private final zzal zzak;
    @VisibleForTesting
    private final zzar zzaz;
    private final Executor zzba;

    zzp(FirebaseApp firebaseApp, zzal zzal2, Executor executor) {
        this(firebaseApp, zzal2, executor, new zzar(firebaseApp.getApplicationContext(), zzal2));
    }

    @VisibleForTesting
    private zzp(FirebaseApp firebaseApp, zzal zzal2, Executor executor, zzar zzar2) {
        this.zzaj = firebaseApp;
        this.zzak = zzal2;
        this.zzaz = zzar2;
        this.zzba = executor;
    }

    private final Task<Bundle> zza(String object, String string2, String string3, Bundle bundle) {
        bundle.putString("scope", string3);
        bundle.putString("sender", string2);
        bundle.putString("subtype", string2);
        bundle.putString("appid", (String)object);
        bundle.putString("gmp_app_id", this.zzaj.getOptions().getApplicationId());
        bundle.putString("gmsv", Integer.toString(this.zzak.zzae()));
        bundle.putString("osv", Integer.toString(Build.VERSION.SDK_INT));
        bundle.putString("app_ver", this.zzak.zzac());
        bundle.putString("app_ver_name", this.zzak.zzad());
        bundle.putString("cliv", "fiid-12451000");
        object = new TaskCompletionSource();
        this.zzba.execute(new zzq(this, bundle, (TaskCompletionSource)object));
        return object.getTask();
    }

    private static String zza(Bundle object) throws IOException {
        if (object == null) {
            throw new IOException("SERVICE_NOT_AVAILABLE");
        }
        CharSequence charSequence = object.getString("registration_id");
        if (charSequence != null) {
            return charSequence;
        }
        charSequence = object.getString("unregistered");
        if (charSequence != null) {
            return charSequence;
        }
        charSequence = object.getString("error");
        if ("RST".equals(charSequence)) {
            throw new IOException("INSTANCE_ID_RESET");
        }
        if (charSequence != null) {
            throw new IOException((String)charSequence);
        }
        object = String.valueOf(object);
        charSequence = new StringBuilder(String.valueOf(object).length() + 21);
        charSequence.append("Unexpected response: ");
        charSequence.append((String)object);
        Log.w((String)"FirebaseInstanceId", (String)charSequence.toString(), (Throwable)new Throwable());
        throw new IOException("SERVICE_NOT_AVAILABLE");
    }

    static /* synthetic */ String zza(zzp zzp2, Bundle bundle) throws IOException {
        return zzp.zza(bundle);
    }

    private final <T> Task<Void> zzb(Task<T> task) {
        return task.continueWith(zzi.zzd(), new zzr(this));
    }

    private final Task<String> zzc(Task<Bundle> task) {
        return task.continueWith(this.zzba, new zzs(this));
    }

    @Override
    public final Task<Void> ackMessage(String string2) {
        return null;
    }

    @Override
    public final Task<Void> buildChannel(String string2, String string3) {
        return Tasks.forResult(null);
    }

    @Override
    public final Task<Void> deleteInstanceId(String string2) {
        Bundle bundle = new Bundle();
        bundle.putString("iid-operation", "delete");
        bundle.putString("delete", "1");
        return this.zzb(this.zzc(this.zza(string2, "*", "*", bundle)));
    }

    @Override
    public final Task<Void> deleteToken(String string2, String string3, String string4) {
        Bundle bundle = new Bundle();
        bundle.putString("delete", "1");
        return this.zzb(this.zzc(this.zza(string2, string3, string4, bundle)));
    }

    @Override
    public final Task<String> getToken(String string2, String string3, String string4) {
        return this.zzc(this.zza(string2, string3, string4, new Bundle()));
    }

    @Override
    public final boolean isAvailable() {
        if (this.zzak.zzab() != 0) {
            return true;
        }
        return false;
    }

    @Override
    public final boolean isChannelBuilt() {
        return true;
    }

    @Override
    public final Task<Void> subscribeToTopic(String string2, String string3, String string4) {
        Bundle bundle = new Bundle();
        String string5 = String.valueOf("/topics/");
        String string6 = String.valueOf(string4);
        string5 = string6.length() != 0 ? string5.concat(string6) : new String(string5);
        bundle.putString("gcm.topic", string5);
        string5 = String.valueOf("/topics/");
        string4 = String.valueOf(string4);
        string4 = string4.length() != 0 ? string5.concat(string4) : new String(string5);
        return this.zzb(this.zzc(this.zza(string2, string3, string4, bundle)));
    }

    @Override
    public final Task<Void> unsubscribeFromTopic(String string2, String string3, String string4) {
        Bundle bundle = new Bundle();
        String string5 = String.valueOf("/topics/");
        String string6 = String.valueOf(string4);
        string5 = string6.length() != 0 ? string5.concat(string6) : new String(string5);
        bundle.putString("gcm.topic", string5);
        bundle.putString("delete", "1");
        string5 = String.valueOf("/topics/");
        string4 = String.valueOf(string4);
        string4 = string4.length() != 0 ? string5.concat(string4) : new String(string5);
        return this.zzb(this.zzc(this.zza(string2, string3, string4, bundle)));
    }

    final /* synthetic */ void zza(Bundle bundle, TaskCompletionSource taskCompletionSource) {
        try {
            taskCompletionSource.setResult(this.zzaz.zzc(bundle));
            return;
        }
        catch (IOException iOException) {
            taskCompletionSource.setException(iOException);
            return;
        }
    }
}

