/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.annotation.TargetApi
 *  android.app.ActivityManager
 *  android.app.ActivityManager$RunningAppProcessInfo
 *  android.app.KeyguardManager
 *  android.app.Notification
 *  android.app.Notification$BigTextStyle
 *  android.app.Notification$Builder
 *  android.app.Notification$Style
 *  android.app.NotificationManager
 *  android.app.PendingIntent
 *  android.content.Context
 *  android.content.Intent
 *  android.content.pm.ApplicationInfo
 *  android.content.pm.PackageManager
 *  android.content.pm.PackageManager$NameNotFoundException
 *  android.content.res.Resources
 *  android.content.res.Resources$NotFoundException
 *  android.content.res.Resources$Theme
 *  android.graphics.Color
 *  android.graphics.drawable.AdaptiveIconDrawable
 *  android.graphics.drawable.Drawable
 *  android.media.RingtoneManager
 *  android.net.Uri
 *  android.os.Build
 *  android.os.Build$VERSION
 *  android.os.Bundle
 *  android.os.Parcelable
 *  android.os.Process
 *  android.os.SystemClock
 *  android.text.TextUtils
 *  android.util.Log
 *  org.json.JSONArray
 *  org.json.JSONException
 */
package com.google.firebase.messaging;

import android.annotation.TargetApi;
import android.app.ActivityManager;
import android.app.KeyguardManager;
import android.app.Notification;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.content.Context;
import android.content.Intent;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageManager;
import android.content.res.Resources;
import android.graphics.Color;
import android.graphics.drawable.AdaptiveIconDrawable;
import android.graphics.drawable.Drawable;
import android.media.RingtoneManager;
import android.net.Uri;
import android.os.Build;
import android.os.Bundle;
import android.os.Parcelable;
import android.os.Process;
import android.os.SystemClock;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.v4.app.NotificationCompat;
import android.support.v4.content.ContextCompat;
import android.text.TextUtils;
import android.util.Log;
import com.google.android.gms.common.util.PlatformVersion;
import com.google.firebase.iid.zzat;
import com.google.firebase.messaging.FirebaseMessagingService;
import com.google.firebase.messaging.R;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.Arrays;
import java.util.Iterator;
import java.util.List;
import java.util.MissingFormatArgumentException;
import java.util.Set;
import java.util.concurrent.atomic.AtomicInteger;
import org.json.JSONArray;
import org.json.JSONException;

final class zza {
    private static zza zzde;
    private Bundle zzdf;
    private Method zzdg;
    private Method zzdh;
    private final AtomicInteger zzdi = new AtomicInteger((int)SystemClock.elapsedRealtime());
    private final Context zzv;

    private zza(Context context) {
        this.zzv = context.getApplicationContext();
    }

    @TargetApi(value=26)
    private final Notification zza(CharSequence charSequence, String string2, int n, Integer n2, Uri uri, PendingIntent pendingIntent, PendingIntent pendingIntent2, String string3) {
        Notification.Builder builder = new Notification.Builder(this.zzv).setAutoCancel(true).setSmallIcon(n);
        if (!TextUtils.isEmpty((CharSequence)charSequence)) {
            builder.setContentTitle(charSequence);
        }
        if (!TextUtils.isEmpty((CharSequence)string2)) {
            builder.setContentText((CharSequence)string2);
            builder.setStyle((Notification.Style)new Notification.BigTextStyle().bigText((CharSequence)string2));
        }
        if (n2 != null) {
            builder.setColor(n2.intValue());
        }
        if (uri != null) {
            builder.setSound(uri);
        }
        if (pendingIntent != null) {
            builder.setContentIntent(pendingIntent);
        }
        if (pendingIntent2 != null) {
            builder.setDeleteIntent(pendingIntent2);
        }
        if (string3 != null) {
            if (this.zzdg == null) {
                this.zzdg = zza.zzl("setChannelId");
            }
            if (this.zzdg == null) {
                this.zzdg = zza.zzl("setChannel");
            }
            if (this.zzdg == null) {
                Log.e((String)"FirebaseMessaging", (String)"Error while setting the notification channel");
            } else {
                try {
                    this.zzdg.invoke((Object)builder, string3);
                }
                catch (IllegalAccessException | IllegalArgumentException | SecurityException | InvocationTargetException exception) {
                    Log.e((String)"FirebaseMessaging", (String)"Error while setting the notification channel", (Throwable)exception);
                }
            }
        }
        return builder.build();
    }

    static String zza(Bundle bundle, String string2) {
        String string3;
        String string4 = string3 = bundle.getString(string2);
        if (string3 == null) {
            string4 = bundle.getString(string2.replace("gcm.n.", "gcm.notification."));
        }
        return string4;
    }

    private static void zza(Intent intent, Bundle bundle) {
        for (String string2 : bundle.keySet()) {
            if (!string2.startsWith("google.c.a.") && !string2.equals("from")) continue;
            intent.putExtra(string2, bundle.getString(string2));
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    private final Bundle zzar() {
        ApplicationInfo applicationInfo;
        if (this.zzdf != null) {
            return this.zzdf;
        }
        applicationInfo = null;
        try {
            ApplicationInfo applicationInfo2;
            applicationInfo = applicationInfo2 = this.zzv.getPackageManager().getApplicationInfo(this.zzv.getPackageName(), 128);
        }
        catch (PackageManager.NameNotFoundException nameNotFoundException) {}
        if (applicationInfo != null && applicationInfo.metaData != null) {
            this.zzdf = applicationInfo.metaData;
            return this.zzdf;
        }
        return Bundle.EMPTY;
    }

    static String zzb(Bundle bundle, String string2) {
        string2 = String.valueOf(string2);
        String string3 = String.valueOf("_loc_key");
        string2 = string3.length() != 0 ? string2.concat(string3) : new String(string2);
        return zza.zza(bundle, string2);
    }

    @TargetApi(value=26)
    private final boolean zzb(int n) {
        if (Build.VERSION.SDK_INT != 26) {
            return true;
        }
        try {
            if (this.zzv.getResources().getDrawable(n, null) instanceof AdaptiveIconDrawable) {
                StringBuilder stringBuilder = new StringBuilder(77);
                stringBuilder.append("Adaptive icons cannot be used in notifications. Ignoring icon id: ");
                stringBuilder.append(n);
                Log.e((String)"FirebaseMessaging", (String)stringBuilder.toString());
                return false;
            }
            return true;
        }
        catch (Resources.NotFoundException notFoundException) {
            return false;
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    static Object[] zzc(Bundle bundle, String charSequence) {
        String string2 = String.valueOf(charSequence);
        Object[] arrobject = String.valueOf("_loc_args");
        string2 = arrobject.length() != 0 ? string2.concat((String)arrobject) : new String(string2);
        if (TextUtils.isEmpty((CharSequence)(string2 = zza.zza(bundle, string2)))) {
            return null;
        }
        try {
            bundle = new JSONArray(string2);
            arrobject = new String[bundle.length()];
            int n = 0;
            while (n < arrobject.length) {
                arrobject[n] = bundle.opt(n);
                ++n;
            }
            return arrobject;
        }
        catch (JSONException jSONException) {}
        String string3 = String.valueOf(charSequence);
        charSequence = String.valueOf("_loc_args");
        string3 = charSequence.length() != 0 ? string3.concat((String)charSequence) : new String(string3);
        string3 = string3.substring(6);
        charSequence = new StringBuilder(String.valueOf(string3).length() + 41 + String.valueOf(string2).length());
        charSequence.append("Malformed ");
        charSequence.append(string3);
        charSequence.append(": ");
        charSequence.append(string2);
        charSequence.append("  Default value will be used.");
        Log.w((String)"FirebaseMessaging", (String)charSequence.toString());
        return null;
    }

    static zza zzd(Context object) {
        synchronized (zza.class) {
            if (zzde == null) {
                zzde = new zza((Context)object);
            }
            object = zzde;
            return object;
        }
    }

    private final String zzd(Bundle object, String charSequence) {
        String string2 = zza.zza((Bundle)object, (String)charSequence);
        if (!TextUtils.isEmpty((CharSequence)string2)) {
            return string2;
        }
        string2 = zza.zzb((Bundle)object, (String)charSequence);
        if (TextUtils.isEmpty((CharSequence)string2)) {
            return null;
        }
        Object object2 = this.zzv.getResources();
        int n = object2.getIdentifier(string2, "string", this.zzv.getPackageName());
        if (n == 0) {
            object = String.valueOf(charSequence);
            charSequence = String.valueOf("_loc_key");
            object = charSequence.length() != 0 ? object.concat((String)charSequence) : new String((String)object);
            object = object.substring(6);
            charSequence = new StringBuilder(String.valueOf(object).length() + 49 + String.valueOf(string2).length());
            charSequence.append((String)object);
            charSequence.append(" resource not found: ");
            charSequence.append(string2);
            charSequence.append(" Default value will be used.");
            Log.w((String)"FirebaseMessaging", (String)charSequence.toString());
            return null;
        }
        if ((object = zza.zzc((Bundle)object, (String)charSequence)) == null) {
            return object2.getString(n);
        }
        try {
            charSequence = object2.getString(n, (Object[])object);
            return charSequence;
        }
        catch (MissingFormatArgumentException missingFormatArgumentException) {
            object = Arrays.toString((Object[])object);
            object2 = new StringBuilder(String.valueOf(string2).length() + 58 + String.valueOf(object).length());
            object2.append("Missing format argument for ");
            object2.append(string2);
            object2.append(": ");
            object2.append((String)object);
            object2.append(" Default value will be used.");
            Log.w((String)"FirebaseMessaging", (String)object2.toString(), (Throwable)missingFormatArgumentException);
            return null;
        }
    }

    static boolean zzf(Bundle bundle) {
        if (!"1".equals(zza.zza(bundle, "gcm.n.e")) && zza.zza(bundle, "gcm.n.icon") == null) {
            return false;
        }
        return true;
    }

    @Nullable
    static Uri zzg(@NonNull Bundle bundle) {
        String string2;
        String string3 = string2 = zza.zza(bundle, "gcm.n.link_android");
        if (TextUtils.isEmpty((CharSequence)string2)) {
            string3 = zza.zza(bundle, "gcm.n.link");
        }
        if (!TextUtils.isEmpty((CharSequence)string3)) {
            return Uri.parse((String)string3);
        }
        return null;
    }

    static String zzi(Bundle bundle) {
        String string2;
        String string3 = string2 = zza.zza(bundle, "gcm.n.sound2");
        if (TextUtils.isEmpty((CharSequence)string2)) {
            string3 = zza.zza(bundle, "gcm.n.sound");
        }
        return string3;
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    @TargetApi(value=26)
    private static Method zzl(String object) {
        try {
            return Notification.Builder.class.getMethod((String)object, String.class);
        }
        catch (NoSuchMethodException | SecurityException exception) {
            return null;
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    private final Integer zzm(String string2) {
        int n;
        if (Build.VERSION.SDK_INT < 21) {
            return null;
        }
        if (!TextUtils.isEmpty((CharSequence)string2)) {
            int n2;
            try {
                n2 = Color.parseColor((String)string2);
            }
            catch (IllegalArgumentException illegalArgumentException) {}
            return n2;
            StringBuilder stringBuilder = new StringBuilder(String.valueOf(string2).length() + 54);
            stringBuilder.append("Color ");
            stringBuilder.append(string2);
            stringBuilder.append(" not valid. Notification will use default color.");
            Log.w((String)"FirebaseMessaging", (String)stringBuilder.toString());
        }
        if ((n = this.zzar().getInt("com.google.firebase.messaging.default_notification_color", 0)) != 0) {
            try {
                n = ContextCompat.getColor(this.zzv, n);
            }
            catch (Resources.NotFoundException notFoundException) {}
            return n;
            Log.w((String)"FirebaseMessaging", (String)"Cannot find the color resource referenced in AndroidManifest.");
        }
        return null;
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @TargetApi(value=26)
    private final String zzn(String class_) {
        StringBuilder stringBuilder;
        NotificationManager notificationManager;
        block9 : {
            block8 : {
                if (!PlatformVersion.isAtLeastO()) {
                    return null;
                }
                notificationManager = (NotificationManager)this.zzv.getSystemService(NotificationManager.class);
                try {
                    if (this.zzdh == null) {
                        this.zzdh = notificationManager.getClass().getMethod("getNotificationChannel", String.class);
                    }
                    if (!TextUtils.isEmpty(class_)) {
                        if (this.zzdh.invoke((Object)notificationManager, class_) != null) {
                            return class_;
                        }
                        stringBuilder = new StringBuilder(String.valueOf(class_).length() + 122);
                        stringBuilder.append("Notification Channel requested (");
                        stringBuilder.append((String)((Object)class_));
                        stringBuilder.append(") has not been created by the app. Manifest configuration, or default, value will be used.");
                        Log.w((String)"FirebaseMessaging", (String)stringBuilder.toString());
                    }
                    if (TextUtils.isEmpty((CharSequence)((Object)(class_ = this.zzar().getString("com.google.firebase.messaging.default_notification_channel_id"))))) break block8;
                    if (this.zzdh.invoke((Object)notificationManager, class_) != null) {
                        return class_;
                    }
                }
                catch (ClassNotFoundException | IllegalAccessException | IllegalArgumentException | InstantiationException | LinkageError | NoSuchMethodException | SecurityException | InvocationTargetException throwable) {
                    Log.e((String)"FirebaseMessaging", (String)"Error while setting the notification channel", (Throwable)throwable);
                    return null;
                }
                class_ = "Notification Channel set in AndroidManifest.xml has not been created by the app. Default value will be used.";
                break block9;
            }
            class_ = "Missing Default Notification Channel metadata in AndroidManifest. Default value will be used.";
        }
        Log.w((String)"FirebaseMessaging", (String)((Object)class_));
        if (this.zzdh.invoke((Object)notificationManager, "fcm_fallback_notification_channel") == null) {
            class_ = Class.forName("android.app.NotificationChannel");
            stringBuilder = class_.getConstructor(String.class, CharSequence.class, Integer.TYPE).newInstance("fcm_fallback_notification_channel", this.zzv.getString(R.string.fcm_fallback_notification_channel_label), 3);
            notificationManager.getClass().getMethod("createNotificationChannel", class_).invoke((Object)notificationManager, stringBuilder);
        }
        return "fcm_fallback_notification_channel";
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    final boolean zzh(Bundle object) {
        Object object2;
        String string2;
        Object object3;
        void var8_7;
        Object object4;
        int n;
        block38 : {
            int n2;
            block42 : {
                block41 : {
                    block40 : {
                        block39 : {
                            block37 : {
                                if ("1".equals(zza.zza((Bundle)object, "gcm.n.noui"))) {
                                    return true;
                                }
                                if (!((KeyguardManager)this.zzv.getSystemService("keyguard")).inKeyguardRestrictedInputMode()) {
                                    if (!PlatformVersion.isAtLeastLollipop()) {
                                        SystemClock.sleep((long)10L);
                                    }
                                    n = Process.myPid();
                                    object2 = ((ActivityManager)this.zzv.getSystemService("activity")).getRunningAppProcesses();
                                    if (object2 != null) {
                                        object2 = object2.iterator();
                                        while (object2.hasNext()) {
                                            object3 = (ActivityManager.RunningAppProcessInfo)object2.next();
                                            if (object3.pid != n) continue;
                                            if (object3.importance != 100) break;
                                            return false;
                                        }
                                    }
                                }
                                if ((n = 0) != 0) {
                                    return false;
                                }
                                object2 = this.zzd((Bundle)object, "gcm.n.title");
                                String string3 = object2;
                                if (TextUtils.isEmpty((CharSequence)object2)) {
                                    CharSequence charSequence = this.zzv.getApplicationInfo().loadLabel(this.zzv.getPackageManager());
                                }
                                string2 = this.zzd((Bundle)object, "gcm.n.body");
                                object2 = zza.zza((Bundle)object, "gcm.n.icon");
                                if (TextUtils.isEmpty((CharSequence)object2)) break block37;
                                object3 = this.zzv.getResources();
                                n = object3.getIdentifier((String)object2, "drawable", this.zzv.getPackageName());
                                if (n != 0 && this.zzb(n) || (n = object3.getIdentifier((String)object2, "mipmap", this.zzv.getPackageName())) != 0 && this.zzb(n)) break block38;
                                object3 = new StringBuilder(String.valueOf(object2).length() + 61);
                                object3.append("Icon resource ");
                                object3.append((String)object2);
                                object3.append(" not found. Notification will use default icon.");
                                Log.w((String)"FirebaseMessaging", (String)object3.toString());
                            }
                            if ((n2 = this.zzar().getInt("com.google.firebase.messaging.default_notification_icon", 0)) == 0) break block39;
                            n = n2;
                            if (this.zzb(n2)) break block40;
                        }
                        n = this.zzv.getApplicationInfo().icon;
                    }
                    if (n == 0) break block41;
                    n2 = n;
                    if (this.zzb(n)) break block42;
                }
                n2 = 17301651;
            }
            n = n2;
        }
        Integer n3 = this.zzm(zza.zza((Bundle)object, "gcm.n.color"));
        object2 = zza.zzi((Bundle)object);
        if (TextUtils.isEmpty((CharSequence)object2)) {
            object2 = null;
        } else if (!"default".equals(object2) && this.zzv.getResources().getIdentifier((String)object2, "raw", this.zzv.getPackageName()) != 0) {
            object3 = this.zzv.getPackageName();
            object4 = new StringBuilder(String.valueOf(object3).length() + 24 + String.valueOf(object2).length());
            object4.append("android.resource://");
            object4.append((String)object3);
            object4.append("/raw/");
            object4.append((String)object2);
            object2 = Uri.parse((String)object4.toString());
        } else {
            object2 = RingtoneManager.getDefaultUri((int)2);
        }
        object3 = zza.zza((Bundle)object, "gcm.n.click_action");
        if (!TextUtils.isEmpty((CharSequence)object3)) {
            object3 = new Intent((String)object3);
            object3.setPackage(this.zzv.getPackageName());
            object3.setFlags(268435456);
        } else {
            object4 = zza.zzg((Bundle)object);
            if (object4 != null) {
                object3 = new Intent("android.intent.action.VIEW");
                object3.setPackage(this.zzv.getPackageName());
                object3.setData((Uri)object4);
            } else {
                object3 = object4 = this.zzv.getPackageManager().getLaunchIntentForPackage(this.zzv.getPackageName());
                if (object4 == null) {
                    Log.w((String)"FirebaseMessaging", (String)"No activity found to launch app");
                    object3 = object4;
                }
            }
        }
        if (object3 == null) {
            object3 = null;
        } else {
            object3.addFlags(67108864);
            object4 = new Bundle((Bundle)object);
            FirebaseMessagingService.zzj((Bundle)object4);
            object3.putExtras((Bundle)object4);
            for (Object object5 : object4.keySet()) {
                if (!object5.startsWith("gcm.n.") && !object5.startsWith("gcm.notification.")) continue;
                object3.removeExtra((String)object5);
            }
            object3 = PendingIntent.getActivity((Context)this.zzv, (int)this.zzdi.incrementAndGet(), (Intent)object3, (int)1073741824);
        }
        if (FirebaseMessagingService.zzk((Bundle)object)) {
            object4 = new Intent("com.google.firebase.messaging.NOTIFICATION_OPEN");
            zza.zza((Intent)object4, (Bundle)object);
            object4.putExtra("pending_intent", (Parcelable)object3);
            object3 = zzat.zza(this.zzv, this.zzdi.incrementAndGet(), (Intent)object4, 1073741824);
            object4 = new Intent("com.google.firebase.messaging.NOTIFICATION_DISMISS");
            zza.zza((Intent)object4, (Bundle)object);
            object4 = zzat.zza(this.zzv, this.zzdi.incrementAndGet(), (Intent)object4, 1073741824);
        } else {
            object4 = null;
        }
        if (PlatformVersion.isAtLeastO() && this.zzv.getApplicationInfo().targetSdkVersion > 25) {
            object2 = this.zza((CharSequence)var8_7, string2, n, n3, (Uri)object2, (PendingIntent)object3, (PendingIntent)object4, this.zzn(zza.zza((Bundle)object, "gcm.n.android_channel_id")));
        } else {
            Object object5;
            object5 = new NotificationCompat.Builder(this.zzv).setAutoCancel(true).setSmallIcon(n);
            if (!TextUtils.isEmpty((CharSequence)var8_7)) {
                object5.setContentTitle((CharSequence)var8_7);
            }
            if (!TextUtils.isEmpty((CharSequence)string2)) {
                object5.setContentText(string2);
                object5.setStyle(new NotificationCompat.BigTextStyle().bigText(string2));
            }
            if (n3 != null) {
                object5.setColor(n3);
            }
            if (object2 != null) {
                object5.setSound((Uri)object2);
            }
            if (object3 != null) {
                object5.setContentIntent((PendingIntent)object3);
            }
            if (object4 != null) {
                object5.setDeleteIntent((PendingIntent)object4);
            }
            object2 = object5.build();
        }
        object3 = zza.zza((Bundle)object, "gcm.n.tag");
        if (Log.isLoggable((String)"FirebaseMessaging", (int)3)) {
            Log.d((String)"FirebaseMessaging", (String)"Showing notification");
        }
        NotificationManager notificationManager = (NotificationManager)this.zzv.getSystemService("notification");
        object = object3;
        if (TextUtils.isEmpty((CharSequence)object3)) {
            long l = SystemClock.uptimeMillis();
            object = new StringBuilder(37);
            object.append("FCM-Notification:");
            object.append(l);
            object = object.toString();
        }
        notificationManager.notify((String)object, 0, (Notification)object2);
        return true;
    }
}

