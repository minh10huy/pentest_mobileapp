/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.annotation.TargetApi
 *  android.app.Application
 *  android.content.BroadcastReceiver
 *  android.content.Context
 *  android.content.Intent
 *  android.content.IntentFilter
 *  android.content.SharedPreferences
 *  android.content.SharedPreferences$Editor
 *  android.content.pm.ApplicationInfo
 *  android.content.pm.PackageManager
 *  android.content.pm.PackageManager$NameNotFoundException
 *  android.os.Bundle
 *  android.os.Handler
 *  android.os.Looper
 *  android.text.TextUtils
 *  android.util.Log
 *  javax.annotation.concurrent.GuardedBy
 */
package com.google.firebase;

import android.annotation.TargetApi;
import android.app.Application;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.SharedPreferences;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageManager;
import android.os.Bundle;
import android.os.Handler;
import android.os.Looper;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.annotation.UiThread;
import android.support.annotation.VisibleForTesting;
import android.support.v4.content.ContextCompat;
import android.support.v4.util.ArrayMap;
import android.text.TextUtils;
import android.util.Log;
import com.google.android.gms.common.annotation.KeepForSdk;
import com.google.android.gms.common.api.internal.BackgroundDetector;
import com.google.android.gms.common.internal.Objects;
import com.google.android.gms.common.internal.Preconditions;
import com.google.android.gms.common.util.Base64Utils;
import com.google.android.gms.common.util.PlatformVersion;
import com.google.android.gms.common.util.ProcessUtils;
import com.google.android.gms.tasks.Task;
import com.google.android.gms.tasks.Tasks;
import com.google.firebase.AutomaticDataCollectionChange;
import com.google.firebase.FirebaseApiNotAvailableException;
import com.google.firebase.FirebaseOptions;
import com.google.firebase.auth.GetTokenResult;
import com.google.firebase.components.Component;
import com.google.firebase.components.ComponentRegistrar;
import com.google.firebase.components.zzc;
import com.google.firebase.components.zzd;
import com.google.firebase.events.Event;
import com.google.firebase.events.Publisher;
import com.google.firebase.internal.InternalTokenProvider;
import com.google.firebase.internal.InternalTokenResult;
import java.io.Serializable;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.lang.reflect.Modifier;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.CopyOnWriteArrayList;
import java.util.concurrent.Executor;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicReference;
import javax.annotation.concurrent.GuardedBy;

public class FirebaseApp {
    public static final String DEFAULT_APP_NAME = "[DEFAULT]";
    @GuardedBy(value="LOCK")
    static final Map<String, FirebaseApp> zza;
    private static final List<String> zzb;
    private static final List<String> zzc;
    private static final List<String> zzd;
    private static final List<String> zze;
    private static final Set<String> zzf;
    private static final Object zzg;
    private static final Executor zzh;
    private final Context zzi;
    private final String zzj;
    private final FirebaseOptions zzk;
    private final zzd zzl;
    private final SharedPreferences zzm;
    private final Publisher zzn;
    private final AtomicBoolean zzo = new AtomicBoolean(false);
    private final AtomicBoolean zzp = new AtomicBoolean();
    private final AtomicBoolean zzq;
    private final List<IdTokenListener> zzr = new CopyOnWriteArrayList<IdTokenListener>();
    private final List<BackgroundStateChangeListener> zzs = new CopyOnWriteArrayList<BackgroundStateChangeListener>();
    private final List<com.google.firebase.zza> zzt = new CopyOnWriteArrayList<com.google.firebase.zza>();
    private InternalTokenProvider zzu;
    private IdTokenListenersCountChangedListener zzv;

    static {
        zzb = Arrays.asList("com.google.firebase.auth.FirebaseAuth", "com.google.firebase.iid.FirebaseInstanceId");
        zzc = Collections.singletonList("com.google.firebase.crash.FirebaseCrash");
        zzd = Arrays.asList("com.google.android.gms.measurement.AppMeasurement");
        zze = Arrays.asList(new String[0]);
        zzf = Collections.emptySet();
        zzg = new Object();
        zzh = new zza(0);
        zza = new ArrayMap<String, FirebaseApp>();
    }

    protected FirebaseApp(Context context, String object, FirebaseOptions firebaseOptions) {
        this.zzi = Preconditions.checkNotNull(context);
        this.zzj = Preconditions.checkNotEmpty((String)object);
        this.zzk = Preconditions.checkNotNull(firebaseOptions);
        this.zzv = new com.google.firebase.internal.zza();
        this.zzm = context.getSharedPreferences("com.google.firebase.common.prefs", 0);
        this.zzq = new AtomicBoolean(this.zzb());
        object = new zzc(context).zza();
        this.zzl = new zzd(zzh, (Iterable<ComponentRegistrar>)object, Component.of(context, Context.class, new Class[0]), Component.of(this, FirebaseApp.class, new Class[0]), Component.of(firebaseOptions, FirebaseOptions.class, new Class[0]));
        this.zzn = (Publisher)this.zzl.get(Publisher.class);
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @VisibleForTesting
    public static void clearInstancesForTest() {
        Object object = zzg;
        synchronized (object) {
            zza.clear();
            return;
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public static List<FirebaseApp> getApps(Context object) {
        object = zzg;
        synchronized (object) {
            return new ArrayList<FirebaseApp>(zza.values());
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @Nullable
    public static FirebaseApp getInstance() {
        Object object = zzg;
        synchronized (object) {
            Object object2 = zza.get(DEFAULT_APP_NAME);
            if (object2 == null) {
                object2 = new StringBuilder("Default FirebaseApp is not initialized in this process ");
                object2.append(ProcessUtils.getMyProcessName());
                object2.append(". Make sure to call FirebaseApp.initializeApp(Context) first.");
                throw new IllegalStateException(object2.toString());
            }
            return object2;
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public static FirebaseApp getInstance(@NonNull String string2) {
        Object object = zzg;
        synchronized (object) {
            List<String> list = zza.get(string2.trim());
            if (list != null) {
                return list;
            }
            list = FirebaseApp.zzd();
            if (list.isEmpty()) {
                list = "";
                throw new IllegalStateException(String.format("FirebaseApp with name %s doesn't exist. %s", string2, list));
            } else {
                StringBuilder stringBuilder = new StringBuilder("Available app names: ");
                stringBuilder.append(TextUtils.join((CharSequence)", ", (Iterable)list));
                list = stringBuilder.toString();
            }
            throw new IllegalStateException(String.format("FirebaseApp with name %s doesn't exist. %s", string2, list));
        }
    }

    public static String getPersistenceKey(String string2, FirebaseOptions firebaseOptions) {
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append(Base64Utils.encodeUrlSafeNoPadding(string2.getBytes()));
        stringBuilder.append("+");
        stringBuilder.append(Base64Utils.encodeUrlSafeNoPadding(firebaseOptions.getApplicationId().getBytes()));
        return stringBuilder.toString();
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @Nullable
    public static FirebaseApp initializeApp(Context object) {
        Object object2 = zzg;
        synchronized (object2) {
            if (zza.containsKey(DEFAULT_APP_NAME)) {
                return FirebaseApp.getInstance();
            }
            FirebaseOptions firebaseOptions = FirebaseOptions.fromResource(object);
            if (firebaseOptions != null) return FirebaseApp.initializeApp(object, firebaseOptions);
            return null;
        }
    }

    public static FirebaseApp initializeApp(Context context, FirebaseOptions firebaseOptions) {
        return FirebaseApp.initializeApp(context, firebaseOptions, DEFAULT_APP_NAME);
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public static FirebaseApp initializeApp(Context object, FirebaseOptions firebaseOptions, String string2) {
        if (PlatformVersion.isAtLeastIceCreamSandwich() && object.getApplicationContext() instanceof Application) {
            BackgroundDetector.initialize((Application)object.getApplicationContext());
            BackgroundDetector.getInstance().addListener(new BackgroundDetector.BackgroundStateChangeListener(){

                @Override
                public final void onBackgroundStateChanged(boolean bl) {
                    FirebaseApp.onBackgroundStateChanged(bl);
                }
            });
        }
        string2 = string2.trim();
        if (object.getApplicationContext() != null) {
            object = object.getApplicationContext();
        }
        Object object2 = zzg;
        synchronized (object2) {
            boolean bl = zza.containsKey(string2);
            StringBuilder stringBuilder = new StringBuilder("FirebaseApp name ");
            stringBuilder.append(string2);
            stringBuilder.append(" already exists!");
            Preconditions.checkState(bl ^ true, stringBuilder.toString());
            Preconditions.checkNotNull(object, "Application context cannot be null.");
            object = new FirebaseApp((Context)object, string2, firebaseOptions);
            zza.put(string2, (FirebaseApp)object);
        }
        FirebaseApp.super.zze();
        return object;
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public static void onBackgroundStateChanged(boolean bl) {
        Object object = zzg;
        synchronized (object) {
            Iterator<FirebaseApp> iterator = new ArrayList<FirebaseApp>(zza.values()).iterator();
            while (iterator.hasNext()) {
                FirebaseApp firebaseApp = iterator.next();
                if (!firebaseApp.zzo.get()) continue;
                firebaseApp.zza(bl);
            }
            return;
        }
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    private static <T> void zza(Class<T> var0, T var1_3, Iterable<String> var2_4, boolean var3_6) {
        var5_7 = var2_4.iterator();
        while (var5_7.hasNext() != false) {
            var2_4 = (String)var5_7.next();
            if (!var3_6) ** GOTO lbl7
            try {
                if (!FirebaseApp.zze.contains(var2_4)) continue;
lbl7: // 2 sources:
                if (!Modifier.isPublic(var4_8 = (var6_9 = Class.forName((String)var2_4).getMethod("getInstance", new Class[]{var0})).getModifiers()) || !Modifier.isStatic(var4_8)) continue;
                var6_9.invoke(null, new Object[]{var1_3});
                continue;
            }
            catch (ClassNotFoundException var6_10) {}
            if (FirebaseApp.zzf.contains(var2_4)) {
                var0 = new StringBuilder();
                var0.append((String)var2_4);
                var0.append(" is missing, but is required. Check if it has been removed by Proguard.");
                throw new IllegalStateException(var0.toString());
            }
            var6_9 = new StringBuilder();
            var6_9.append((String)var2_4);
            var6_9.append(" is not linked. Skipping initialization.");
            Log.d((String)"FirebaseApp", (String)var6_9.toString());
            continue;
            catch (NoSuchMethodException var0_1) {}
            var0_2 = new StringBuilder();
            var0_2.append((String)var2_4);
            var0_2.append("#getInstance has been removed by Proguard. Add keep rule to prevent it.");
            throw new IllegalStateException(var0_2.toString());
            catch (IllegalAccessException var7_11) {}
            var6_9 = new StringBuilder("Failed to initialize ");
            var6_9.append((String)var2_4);
            Log.wtf((String)"FirebaseApp", (String)var6_9.toString(), (Throwable)var7_11);
            continue;
            catch (InvocationTargetException var2_5) {}
            Log.wtf((String)"FirebaseApp", (String)"Firebase API initialization failure.", (Throwable)var2_5);
        }
    }

    private void zza(boolean bl) {
        Log.d((String)"FirebaseApp", (String)"Notifying background state change listeners.");
        Iterator<BackgroundStateChangeListener> iterator = this.zzs.iterator();
        while (iterator.hasNext()) {
            iterator.next().onBackgroundStateChanged(bl);
        }
    }

    private boolean zzb() {
        block5 : {
            PackageManager packageManager;
            if (this.zzm.contains("firebase_automatic_data_collection_enabled")) {
                return this.zzm.getBoolean("firebase_automatic_data_collection_enabled", true);
            }
            try {
                packageManager = this.zzi.getPackageManager();
                if (packageManager == null) break block5;
            }
            catch (PackageManager.NameNotFoundException nameNotFoundException) {
                return true;
            }
            packageManager = packageManager.getApplicationInfo(this.zzi.getPackageName(), 128);
            if (packageManager == null) break block5;
            if (packageManager.metaData == null || !packageManager.metaData.containsKey("firebase_automatic_data_collection_enabled")) break block5;
            boolean bl = packageManager.metaData.getBoolean("firebase_automatic_data_collection_enabled");
            return bl;
        }
        return true;
    }

    private void zzc() {
        Preconditions.checkState(this.zzp.get() ^ true, "FirebaseApp was deleted");
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    private static List<String> zzd() {
        ArrayList<String> arrayList = new ArrayList<String>();
        Object object = zzg;
        synchronized (object) {
            Iterator<FirebaseApp> iterator = zza.values().iterator();
            do {
                if (!iterator.hasNext()) {
                    // MONITOREXIT [2, 3, 4] lbl7 : MonitorExitStatement: MONITOREXIT : var0_1
                    Collections.sort(arrayList);
                    return arrayList;
                }
                arrayList.add(iterator.next().getName());
            } while (true);
        }
    }

    private void zze() {
        boolean bl = ContextCompat.isDeviceProtectedStorage(this.zzi);
        if (bl) {
            zzb.zza(this.zzi);
        } else {
            this.zzl.zza(this.isDefaultApp());
        }
        FirebaseApp.zza(FirebaseApp.class, this, zzb, bl);
        if (this.isDefaultApp()) {
            FirebaseApp.zza(FirebaseApp.class, this, zzc, bl);
            FirebaseApp.zza(Context.class, this.zzi, zzd, bl);
        }
    }

    public void addBackgroundStateChangeListener(BackgroundStateChangeListener backgroundStateChangeListener) {
        this.zzc();
        if (this.zzo.get() && BackgroundDetector.getInstance().isInBackground()) {
            backgroundStateChangeListener.onBackgroundStateChanged(true);
        }
        this.zzs.add(backgroundStateChangeListener);
    }

    public void addIdTokenListener(@NonNull IdTokenListener idTokenListener) {
        this.zzc();
        Preconditions.checkNotNull(idTokenListener);
        this.zzr.add(idTokenListener);
        this.zzv.onListenerCountChanged(this.zzr.size());
    }

    public void addLifecycleEventListener(@NonNull com.google.firebase.zza zza2) {
        this.zzc();
        Preconditions.checkNotNull(zza2);
        this.zzt.add(zza2);
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public void delete() {
        if (!this.zzp.compareAndSet(false, true)) {
            return;
        }
        Iterator<com.google.firebase.zza> iterator = zzg;
        synchronized (iterator) {
            zza.remove(this.zzj);
        }
        iterator = this.zzt.iterator();
        while (iterator.hasNext()) {
            iterator.next();
        }
        return;
    }

    public boolean equals(Object object) {
        if (!(object instanceof FirebaseApp)) {
            return false;
        }
        return this.zzj.equals(((FirebaseApp)object).getName());
    }

    public <T> T get(Class<T> class_) {
        this.zzc();
        return (T)this.zzl.get(class_);
    }

    @NonNull
    public Context getApplicationContext() {
        this.zzc();
        return this.zzi;
    }

    public List<IdTokenListener> getListeners() {
        this.zzc();
        return this.zzr;
    }

    @NonNull
    public String getName() {
        this.zzc();
        return this.zzj;
    }

    @NonNull
    public FirebaseOptions getOptions() {
        this.zzc();
        return this.zzk;
    }

    public String getPersistenceKey() {
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append(Base64Utils.encodeUrlSafeNoPadding(this.getName().getBytes()));
        stringBuilder.append("+");
        stringBuilder.append(Base64Utils.encodeUrlSafeNoPadding(this.getOptions().getApplicationId().getBytes()));
        return stringBuilder.toString();
    }

    public Task<GetTokenResult> getToken(boolean bl) {
        this.zzc();
        if (this.zzu == null) {
            return Tasks.forException(new FirebaseApiNotAvailableException("firebase-auth is not linked, please fall back to unauthenticated mode."));
        }
        return this.zzu.getAccessToken(bl);
    }

    @Nullable
    public String getUid() throws FirebaseApiNotAvailableException {
        this.zzc();
        if (this.zzu == null) {
            throw new FirebaseApiNotAvailableException("firebase-auth is not linked, please fall back to unauthenticated mode.");
        }
        return this.zzu.getUid();
    }

    public int hashCode() {
        return this.zzj.hashCode();
    }

    public boolean isAutomaticDataCollectionEnabled() {
        this.zzc();
        return this.zzq.get();
    }

    @VisibleForTesting
    public boolean isDefaultApp() {
        return DEFAULT_APP_NAME.equals(this.getName());
    }

    @UiThread
    public void notifyIdTokenListeners(@NonNull InternalTokenResult internalTokenResult) {
        Log.d((String)"FirebaseApp", (String)"Notifying auth state listeners.");
        Iterator<IdTokenListener> iterator = this.zzr.iterator();
        int n = 0;
        while (iterator.hasNext()) {
            iterator.next().onIdTokenChanged(internalTokenResult);
            ++n;
        }
        Log.d((String)"FirebaseApp", (String)String.format("Notified %d auth state listeners.", n));
    }

    public void removeBackgroundStateChangeListener(BackgroundStateChangeListener backgroundStateChangeListener) {
        this.zzc();
        this.zzs.remove(backgroundStateChangeListener);
    }

    public void removeIdTokenListener(@NonNull IdTokenListener idTokenListener) {
        this.zzc();
        Preconditions.checkNotNull(idTokenListener);
        this.zzr.remove(idTokenListener);
        this.zzv.onListenerCountChanged(this.zzr.size());
    }

    public void removeLifecycleEventListener(@NonNull com.google.firebase.zza zza2) {
        this.zzc();
        Preconditions.checkNotNull(zza2);
        this.zzt.remove(zza2);
    }

    public void setAutomaticDataCollectionEnabled(boolean bl) {
        this.zzc();
        if (this.zzq.compareAndSet(bl ^ true, bl)) {
            this.zzm.edit().putBoolean("firebase_automatic_data_collection_enabled", bl).commit();
            this.zzn.publish(new Event<AutomaticDataCollectionChange>(AutomaticDataCollectionChange.class, new AutomaticDataCollectionChange(bl)));
        }
    }

    public void setAutomaticResourceManagementEnabled(boolean bl) {
        this.zzc();
        if (this.zzo.compareAndSet(bl ^ true, bl)) {
            boolean bl2 = BackgroundDetector.getInstance().isInBackground();
            if (bl && bl2) {
                this.zza(true);
                return;
            }
            if (!bl && bl2) {
                this.zza(false);
            }
        }
    }

    public void setIdTokenListenersCountChangedListener(@NonNull IdTokenListenersCountChangedListener idTokenListenersCountChangedListener) {
        this.zzv = Preconditions.checkNotNull(idTokenListenersCountChangedListener);
        this.zzv.onListenerCountChanged(this.zzr.size());
    }

    public void setTokenProvider(@NonNull InternalTokenProvider internalTokenProvider) {
        this.zzu = Preconditions.checkNotNull(internalTokenProvider);
    }

    public String toString() {
        return Objects.toStringHelper(this).add("name", this.zzj).add("options", this.zzk).toString();
    }

    @KeepForSdk
    public static interface BackgroundStateChangeListener {
        public void onBackgroundStateChanged(boolean var1);
    }

    @KeepForSdk
    public static interface IdTokenListener {
        public void onIdTokenChanged(@NonNull InternalTokenResult var1);
    }

    @KeepForSdk
    public static interface IdTokenListenersCountChangedListener {
        public void onListenerCountChanged(int var1);
    }

    static final class zza
    implements Executor {
        private static final Handler zza = new Handler(Looper.getMainLooper());

        private zza() {
        }

        /* synthetic */ zza(byte by) {
            this();
        }

        @Override
        public final void execute(@NonNull Runnable runnable) {
            zza.post(runnable);
        }
    }

    @TargetApi(value=24)
    static final class zzb
    extends BroadcastReceiver {
        private static AtomicReference<zzb> zza = new AtomicReference();
        private final Context zzb;

        private zzb(Context context) {
            this.zzb = context;
        }

        static /* synthetic */ void zza(Context context) {
            zzb zzb2;
            if (zza.get() == null && zza.compareAndSet(null, zzb2 = new zzb(context))) {
                context.registerReceiver((BroadcastReceiver)zzb2, new IntentFilter("android.intent.action.USER_UNLOCKED"));
            }
        }

        /*
         * Enabled aggressive block sorting
         * Enabled unnecessary exception pruning
         * Enabled aggressive exception aggregation
         */
        public final void onReceive(Context object, Intent object2) {
            object = zzg;
            synchronized (object) {
                object2 = FirebaseApp.zza.values().iterator();
                do {
                    if (!object2.hasNext()) {
                        // MONITOREXIT [2, 3, 4] lbl6 : MonitorExitStatement: MONITOREXIT : var1_1 /* !! */ 
                        this.zzb.unregisterReceiver((BroadcastReceiver)this);
                        return;
                    }
                    ((FirebaseApp)object2.next()).zze();
                } while (true);
            }
        }
    }

}

