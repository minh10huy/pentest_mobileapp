/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.content.ComponentName
 *  android.content.Context
 *  android.content.pm.PackageManager
 *  android.content.pm.PackageManager$NameNotFoundException
 *  android.content.pm.ServiceInfo
 *  android.os.Bundle
 *  android.util.Log
 */
package com.google.firebase.components;

import android.content.ComponentName;
import android.content.Context;
import android.content.pm.PackageManager;
import android.content.pm.ServiceInfo;
import android.os.Bundle;
import android.support.annotation.VisibleForTesting;
import android.util.Log;
import com.google.firebase.components.ComponentDiscoveryService;
import com.google.firebase.components.ComponentRegistrar;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;
import java.util.Set;

public final class zzc {
    private final Context zza;
    private final zzb zzb;

    public zzc(Context context) {
        this(context, new zza(0));
    }

    @VisibleForTesting
    private zzc(Context context, zzb zzb2) {
        this.zza = context;
        this.zzb = zzb2;
    }

    private static List<ComponentRegistrar> zza(List<String> object) {
        ArrayList<ComponentRegistrar> arrayList = new ArrayList<ComponentRegistrar>();
        object = object.iterator();
        while (object.hasNext()) {
            String string2 = (String)object.next();
            try {
                Class<?> class_ = Class.forName(string2);
                if (!ComponentRegistrar.class.isAssignableFrom(class_)) {
                    Log.w((String)"ComponentDiscovery", (String)String.format("Class %s is not an instance of %s", string2, "com.google.firebase.components.ComponentRegistrar"));
                    continue;
                }
                arrayList.add((ComponentRegistrar)class_.newInstance());
            }
            catch (InstantiationException instantiationException) {
                Log.w((String)"ComponentDiscovery", (String)String.format("Could not instantiate %s.", string2), (Throwable)instantiationException);
            }
            catch (IllegalAccessException illegalAccessException) {
                Log.w((String)"ComponentDiscovery", (String)String.format("Could not instantiate %s.", string2), (Throwable)illegalAccessException);
            }
            catch (ClassNotFoundException classNotFoundException) {
                Log.w((String)"ComponentDiscovery", (String)String.format("Class %s is not an found.", string2), (Throwable)classNotFoundException);
            }
        }
        return arrayList;
    }

    public final List<ComponentRegistrar> zza() {
        return zzc.zza(this.zzb.zza(this.zza));
    }

    static final class zza
    implements zzb {
        private zza() {
        }

        /* synthetic */ zza(byte by) {
            this();
        }

        /*
         * Enabled aggressive block sorting
         * Enabled unnecessary exception pruning
         * Enabled aggressive exception aggregation
         */
        private static Bundle zzb(Context context) {
            try {
                PackageManager packageManager = context.getPackageManager();
                if (packageManager == null) {
                    Log.w((String)"ComponentDiscovery", (String)"Context has no PackageManager.");
                    return null;
                }
                if ((context = packageManager.getServiceInfo(new ComponentName(context, ComponentDiscoveryService.class), 128)) != null) return context.metaData;
                Log.w((String)"ComponentDiscovery", (String)"ComponentDiscoveryService has no service info.");
                return null;
            }
            catch (PackageManager.NameNotFoundException nameNotFoundException) {}
            Log.w((String)"ComponentDiscovery", (String)"Application info not found.");
            return null;
        }

        @Override
        public final List<String> zza(Context context) {
            if ((context = zza.zzb(context)) == null) {
                Log.w((String)"ComponentDiscovery", (String)"Could not retrieve metadata, returning empty list of registrars.");
                return Collections.emptyList();
            }
            ArrayList<String> arrayList = new ArrayList<String>();
            for (String string2 : context.keySet()) {
                if (!"com.google.firebase.components.ComponentRegistrar".equals(context.get(string2)) || !string2.startsWith("com.google.firebase.components:")) continue;
                arrayList.add(string2.substring(31));
            }
            return arrayList;
        }
    }

    @VisibleForTesting
    static interface zzb {
        public List<String> zza(Context var1);
    }

}

