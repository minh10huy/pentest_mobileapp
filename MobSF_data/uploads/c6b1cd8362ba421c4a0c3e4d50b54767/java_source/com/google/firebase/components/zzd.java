/*
 * Decompiled with CFR 0_132.
 */
package com.google.firebase.components;

import com.google.android.gms.common.internal.Preconditions;
import com.google.firebase.components.Component;
import com.google.firebase.components.ComponentContainer;
import com.google.firebase.components.ComponentContainer$$CC;
import com.google.firebase.components.ComponentFactory;
import com.google.firebase.components.ComponentRegistrar;
import com.google.firebase.components.Dependency;
import com.google.firebase.components.MissingDependencyException;
import com.google.firebase.components.zze;
import com.google.firebase.components.zzf;
import com.google.firebase.components.zzh;
import com.google.firebase.components.zzj;
import com.google.firebase.events.Publisher;
import com.google.firebase.events.Subscriber;
import com.google.firebase.inject.Provider;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.Executor;

public final class zzd
implements ComponentContainer {
    private final List<Component<?>> zza;
    private final Map<Class<?>, zzh<?>> zzb = new HashMap();
    private final zzf zzc;

    public /* varargs */ zzd(Executor iterator, Iterable<ComponentRegistrar> object, Component<?> ... arrcomponent) {
        this.zzc = new zzf((Executor)((Object)iterator));
        iterator = new ArrayList();
        iterator.add(Component.of(this.zzc, zzf.class, Subscriber.class, Publisher.class));
        object = object.iterator();
        while (object.hasNext()) {
            iterator.addAll(((ComponentRegistrar)object.next()).getComponents());
        }
        Collections.addAll(iterator, arrcomponent);
        this.zza = Collections.unmodifiableList(zze.zza(iterator));
        iterator = this.zza.iterator();
        while (iterator.hasNext()) {
            this.zza(iterator.next());
        }
        this.zza();
    }

    private void zza() {
        for (Component<?> component : this.zza) {
            for (Dependency dependency : component.zzb()) {
                if (!dependency.zzb() || this.zzb.containsKey(dependency.zza())) continue;
                throw new MissingDependencyException(String.format("Unsatisfied dependency for component %s: %s", component, dependency.zza()));
            }
        }
    }

    private <T> void zza(Component<T> object) {
        zzh zzh2 = new zzh(object.zzc(), new zzj((Component<?>)((Object)object), this));
        for (Class class_ : object.zza()) {
            this.zzb.put(class_, zzh2);
        }
    }

    public final Object get(Class class_) {
        return ComponentContainer$$CC.get(this, class_);
    }

    @Override
    public final <T> Provider<T> getProvider(Class<T> class_) {
        Preconditions.checkNotNull(class_, "Null interface requested.");
        return this.zzb.get(class_);
    }

    public final void zza(boolean bl) {
        for (Component<?> component : this.zza) {
            if (!component.zze() && (!component.zzf() || !bl)) continue;
            this.get(component.zza().iterator().next());
        }
        this.zzc.zza();
    }
}

