/*
 * Decompiled with CFR 0_132.
 */
package com.google.firebase.components;

import com.google.firebase.components.ComponentContainer;
import com.google.firebase.components.ComponentFactory;
import com.google.firebase.components.zzi;
import com.google.firebase.inject.Provider;

final class zzh<T>
implements Provider<T> {
    private static final Object zza = new Object();
    private volatile Object zzb = zza;
    private volatile Provider<T> zzc;

    zzh(ComponentFactory<T> componentFactory, ComponentContainer componentContainer) {
        this.zzc = new zzi(componentFactory, componentContainer);
    }

    static final /* synthetic */ Object zza(ComponentFactory componentFactory, ComponentContainer componentContainer) {
        return componentFactory.create(componentContainer);
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @Override
    public final T get() {
        Object object = this.zzb;
        if (object != zza) {
            return (T)object;
        }
        synchronized (this) {
            Object object2;
            object = object2 = this.zzb;
            if (object2 == zza) {
                this.zzb = object = this.zzc.get();
                this.zzc = null;
            }
            return (T)object;
        }
    }
}

