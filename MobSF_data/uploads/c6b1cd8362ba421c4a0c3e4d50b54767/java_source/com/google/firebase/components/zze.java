/*
 * Decompiled with CFR 0_132.
 */
package com.google.firebase.components;

import com.google.firebase.components.Component;
import com.google.firebase.components.Dependency;
import com.google.firebase.components.DependencyCycleException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;

final class zze {
    static List<Component<?>> zza(List<Component<?>> list) {
        Object object52;
        Object object2 = new HashMap(list.size());
        for (Component<?> component : list) {
            object52 = new zza(component);
            for (Class<?> class_ : component.zza()) {
                if (object2.put(class_, object52) == null) continue;
                throw new IllegalArgumentException(String.format("Multiple components provide %s.", class_));
            }
        }
        for (Object object52 : object2.values()) {
            for (Dependency dependency : object52.zzb().zzb()) {
                zza zza2;
                if (!dependency.zzc() || (zza2 = (zza)object2.get(dependency.zza())) == null) continue;
                object52.zza(zza2);
                zza2.zzb((zza)object52);
            }
        }
        object2 = new HashSet(object2.values());
        Object object6 = zze.zza(object2);
        object52 = new ArrayList();
        while (!object6.isEmpty()) {
            zza zza3 = (zza)object6.iterator().next();
            object6.remove(zza3);
            object52.add(zza3.zzb());
            for (zza zza4 : zza3.zza()) {
                zza4.zzc(zza3);
                if (!zza4.zzc()) continue;
                object6.add(zza4);
            }
        }
        if (object52.size() == list.size()) {
            Collections.reverse(object52);
            return object52;
        }
        list = new ArrayList();
        object2 = object2.iterator();
        while (object2.hasNext()) {
            object6 = (zza)object2.next();
            if (object6.zzc() || object6.zzd()) continue;
            list.add(object6.zzb());
        }
        throw new DependencyCycleException(list);
    }

    private static Set<zza> zza(Set<zza> object) {
        HashSet<zza> hashSet = new HashSet<zza>();
        object = object.iterator();
        while (object.hasNext()) {
            zza zza2 = (zza)object.next();
            if (!zza2.zzc()) continue;
            hashSet.add(zza2);
        }
        return hashSet;
    }

    static final class zza {
        private final Component<?> zza;
        private final Set<zza> zzb = new HashSet<zza>();
        private final Set<zza> zzc = new HashSet<zza>();

        zza(Component<?> component) {
            this.zza = component;
        }

        final Set<zza> zza() {
            return this.zzb;
        }

        final void zza(zza zza2) {
            this.zzb.add(zza2);
        }

        final Component<?> zzb() {
            return this.zza;
        }

        final void zzb(zza zza2) {
            this.zzc.add(zza2);
        }

        final void zzc(zza zza2) {
            this.zzc.remove(zza2);
        }

        final boolean zzc() {
            return this.zzc.isEmpty();
        }

        final boolean zzd() {
            return this.zzb.isEmpty();
        }
    }

}

