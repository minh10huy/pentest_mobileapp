/*
 * Decompiled with CFR 0_132.
 */
package com.google.firebase.components;

import android.support.annotation.GuardedBy;
import com.google.android.gms.common.internal.Preconditions;
import com.google.firebase.components.zzg;
import com.google.firebase.events.Event;
import com.google.firebase.events.EventHandler;
import com.google.firebase.events.Publisher;
import com.google.firebase.events.Subscriber;
import java.util.ArrayDeque;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Queue;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.Executor;

class zzf
implements Publisher,
Subscriber {
    @GuardedBy(value="this")
    private final Map<Class<?>, ConcurrentHashMap<EventHandler<Object>, Executor>> zza = new HashMap();
    @GuardedBy(value="this")
    private Queue<Event<?>> zzb = new ArrayDeque();
    private final Executor zzc;

    zzf(Executor executor) {
        this.zzc = executor;
    }

    private Set<Map.Entry<EventHandler<Object>, Executor>> zza(Event<?> set) {
        synchronized (this) {
            block5 : {
                set = this.zza.get(set.getType());
                if (set != null) break block5;
                set = Collections.emptySet();
                return set;
            }
            set = set.entrySet();
            return set;
        }
    }

    static final /* synthetic */ void zza(Map.Entry entry, Event event) {
        ((EventHandler)entry.getKey()).handle(event);
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @Override
    public void publish(Event<?> event) {
        Preconditions.checkNotNull(event);
        synchronized (this) {
            if (this.zzb != null) {
                this.zzb.add(event);
                return;
            }
        }
        Iterator<Map.Entry<EventHandler<Object>, Executor>> iterator = this.zza(event).iterator();
        while (iterator.hasNext()) {
            Map.Entry<EventHandler<Object>, Executor> entry = iterator.next();
            entry.getValue().execute(new zzg(entry, event));
        }
        return;
    }

    @Override
    public <T> void subscribe(Class<T> class_, EventHandler<? super T> eventHandler) {
        this.subscribe(class_, eventHandler, this.zzc);
    }

    @Override
    public <T> void subscribe(Class<T> class_, EventHandler<? super T> eventHandler, Executor executor) {
        synchronized (this) {
            Preconditions.checkNotNull(class_);
            Preconditions.checkNotNull(eventHandler);
            Preconditions.checkNotNull(executor);
            if (!this.zza.containsKey(class_)) {
                this.zza.put(class_, new ConcurrentHashMap());
            }
            this.zza.get(class_).put(eventHandler, executor);
            return;
        }
    }

    @Override
    public <T> void unsubscribe(Class<T> class_, EventHandler<? super T> eventHandler) {
        synchronized (this) {
            block5 : {
                Preconditions.checkNotNull(class_);
                Preconditions.checkNotNull(eventHandler);
                boolean bl = this.zza.containsKey(class_);
                if (bl) break block5;
                return;
            }
            ConcurrentHashMap<EventHandler<Object>, Executor> concurrentHashMap = this.zza.get(class_);
            concurrentHashMap.remove(eventHandler);
            if (concurrentHashMap.isEmpty()) {
                this.zza.remove(class_);
            }
            return;
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Converted monitor instructions to comments
     * Lifted jumps to return sites
     */
    final void zza() {
        Object object;
        // MONITORENTER : this
        if (this.zzb != null) {
            object = this.zzb;
            this.zzb = null;
        } else {
            object = null;
        }
        // MONITOREXIT : this
        if (object == null) return;
        object = object.iterator();
        while (object.hasNext()) {
            this.publish((Event)object.next());
        }
    }
}

