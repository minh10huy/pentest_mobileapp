/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.content.ComponentName
 *  android.content.Context
 *  android.content.Intent
 *  android.content.ServiceConnection
 *  android.content.pm.PackageInfo
 *  android.content.pm.PackageManager
 *  android.content.pm.ResolveInfo
 *  android.content.pm.ServiceInfo
 *  android.net.Uri
 *  android.os.Bundle
 */
package com.google.android.gms.internal.measurement;

import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.content.ServiceConnection;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.pm.ResolveInfo;
import android.content.pm.ServiceInfo;
import android.net.Uri;
import android.os.Bundle;
import android.support.annotation.Nullable;
import android.support.annotation.WorkerThread;
import com.google.android.gms.common.stats.ConnectionTracker;
import com.google.android.gms.common.util.VisibleForTesting;
import com.google.android.gms.common.wrappers.PackageManagerWrapper;
import com.google.android.gms.common.wrappers.Wrappers;
import com.google.android.gms.internal.measurement.zzee;
import com.google.android.gms.internal.measurement.zzfi;
import com.google.android.gms.internal.measurement.zzfk;
import com.google.android.gms.internal.measurement.zzft;
import com.google.android.gms.internal.measurement.zzfw;
import com.google.android.gms.internal.measurement.zzga;
import com.google.android.gms.internal.measurement.zzgb;
import com.google.android.gms.internal.measurement.zzgi;
import com.google.android.gms.internal.measurement.zzgn;
import com.google.android.gms.internal.measurement.zzhm;
import com.google.android.gms.internal.measurement.zzkd;
import com.google.android.gms.internal.measurement.zzr;
import java.util.List;

public final class zzfz {
    private final zzgn zzacv;
    @VisibleForTesting
    volatile zzr zzamv;
    @VisibleForTesting
    private ServiceConnection zzamw;

    zzfz(zzgn zzgn2) {
        this.zzacv = zzgn2;
    }

    static /* synthetic */ zzgn zza(zzfz zzfz2) {
        return zzfz2.zzacv;
    }

    @VisibleForTesting
    private final boolean zzjs() {
        boolean bl;
        block5 : {
            bl = false;
            try {
                PackageManagerWrapper packageManagerWrapper = Wrappers.packageManager(this.zzacv.getContext());
                if (packageManagerWrapper != null) break block5;
            }
            catch (Exception exception) {
                this.zzacv.zzgi().zzja().zzg("Failed to retrieve Play Store version", exception);
                return false;
            }
            this.zzacv.zzgi().zzja().log("Failed to retrieve Package Manager to check Play Store compatibility");
            return false;
        }
        int n = packageManagerWrapper.getPackageInfo((String)"com.android.vending", (int)128).versionCode;
        if (n >= 80837300) {
            bl = true;
        }
        return bl;
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Lifted jumps to return sites
     */
    @WorkerThread
    @VisibleForTesting
    final void zzc(Bundle var1_1) {
        block5 : {
            block6 : {
                block7 : {
                    block4 : {
                        this.zzacv.zzgh().zzab();
                        if (var1_1 /* !! */  == null) {
                            return;
                        }
                        var3_8 = var1_1 /* !! */ .getLong("install_begin_timestamp_seconds", 0L) * 1000L;
                        if (var3_8 != 0L) break block4;
                        var7_9 = this.zzacv.zzgi().zziv();
                        var1_2 = "Service response is missing Install Referrer install timestamp";
                        break block5;
                    }
                    var7_9 = var1_1 /* !! */ .getString("install_referrer");
                    if (var7_9 == null || var7_9.isEmpty()) break block6;
                    this.zzacv.zzgi().zzjc().zzg("InstallReferrer API result", var7_9);
                    var8_10 = this.zzacv.zzgg();
                    var7_9 = String.valueOf(var7_9);
                    var7_9 = var7_9.length() != 0 ? "?".concat((String)var7_9) : new String("?");
                    var7_9 = var8_10.zza(Uri.parse((String)var7_9));
                    if (var7_9 != null) break block7;
                    var7_9 = this.zzacv.zzgi().zziv();
                    var1_4 = "No campaign params defined in install referrer result";
                    break block5;
                }
                var8_10 = var7_9.getString("medium");
                var2_11 = var8_10 != null && "(not set)".equalsIgnoreCase((String)var8_10) == false && "organic".equalsIgnoreCase((String)var8_10) == false;
                if (!var2_11) ** GOTO lbl31
                var5_12 = var1_1 /* !! */ .getLong("referrer_click_timestamp_seconds", 0L) * 1000L;
                if (var5_12 == 0L) {
                    var7_9 = this.zzacv.zzgi().zziv();
                    var1_5 = "Install Referrer is missing click timestamp for ad campaign";
                } else {
                    var7_9.putLong("click_timestamp", var5_12);
lbl31: // 2 sources:
                    if (var3_8 != this.zzacv.zzgj().zzalz.get()) {
                        var7_9.putString("_cis", "referrer API");
                        this.zzacv.zzgj().zzalz.set(var3_8);
                        this.zzacv.zzfy().logEvent("auto", "_cmp", (Bundle)var7_9);
                        if (this.zzamw == null) return;
                        ConnectionTracker.getInstance().unbindService(this.zzacv.getContext(), this.zzamw);
                        return;
                    }
                    var7_9 = this.zzacv.zzgi().zzjc();
                    var1_6 = "Campaign has already been logged";
                }
                break block5;
            }
            var7_9 = this.zzacv.zzgi().zziv();
            var1_7 = "No referrer defined in install referrer response";
        }
        var7_9.log((String)var1_3);
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @WorkerThread
    protected final void zzjr() {
        this.zzacv.zzgl();
        this.zzacv.zzgh().zzab();
        if (!this.zzjs()) {
            this.zzacv.zzgi().zzja().log("Install Referrer Reporter is not available");
            this.zzamw = null;
            return;
        }
        this.zzamw = new zzgb(this, null);
        this.zzacv.zzgi().zzja().log("Install Referrer Reporter is initializing");
        this.zzacv.zzgh().zzab();
        Object object = new Intent("com.google.android.finsky.BIND_GET_INSTALL_REFERRER_SERVICE");
        object.setComponent(new ComponentName("com.android.vending", "com.google.android.finsky.externalreferrer.GetInstallReferrerService"));
        Object object2 = this.zzacv.getContext().getPackageManager();
        if (object2 == null) {
            this.zzacv.zzgi().zziy().log("Failed to obtain Package Manager to verify binding conditions");
            return;
        }
        if ((object2 = object2.queryIntentServices(object, 0)) != null && !object2.isEmpty()) {
            object2 = (ResolveInfo)object2.get(0);
            if (object2.serviceInfo != null) {
                String string2 = object2.serviceInfo.packageName;
                if (object2.serviceInfo.name != null && this.zzamw != null && "com.android.vending".equals(string2) && this.zzjs()) {
                    object = new Intent(object);
                    try {
                        boolean bl = ConnectionTracker.getInstance().bindService(this.zzacv.getContext(), (Intent)object, this.zzamw, 1);
                        object2 = this.zzacv.zzgi().zzja();
                        object = bl ? "available" : "not available";
                    }
                    catch (Exception exception) {
                        this.zzacv.zzgi().zziv().zzg("Exception occurred while binding to Install Referrer Service", exception.getMessage());
                        return;
                    }
                }
                this.zzacv.zzgi().zzja().log("Play Store missing or incompatible. Version 8.3.73 or later required");
            }
            return;
        }
        this.zzacv.zzgi().zzja().log("Play Service for fetching Install Referrer is unavailable on device");
        return;
        object2.zzg("Install Referrer Service is", object);
    }

    @Nullable
    @WorkerThread
    @VisibleForTesting
    final Bundle zzjt() {
        Bundle bundle;
        block4 : {
            this.zzacv.zzgh().zzab();
            if (this.zzamv == null) {
                this.zzacv.zzgi().zziy().log("Attempting to use Install Referrer Service while it is not initialized");
                return null;
            }
            bundle = new Bundle();
            bundle.putString("package_name", this.zzacv.getContext().getPackageName());
            try {
                bundle = this.zzamv.zza(bundle);
                if (bundle != null) break block4;
            }
            catch (Exception exception) {
                this.zzacv.zzgi().zziv().zzg("Exception occurred while retrieving the Install Referrer", exception.getMessage());
                return null;
            }
            this.zzacv.zzgi().zziv().log("Install Referrer Service returned a null response");
            return null;
        }
        return bundle;
    }
}

