/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.content.ContentValues
 *  android.content.Context
 *  android.database.sqlite.SQLiteDatabase
 *  android.database.sqlite.SQLiteException
 *  android.text.TextUtils
 */
package com.google.android.gms.internal.measurement;

import android.content.ContentValues;
import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteException;
import android.support.annotation.WorkerThread;
import android.support.v4.util.ArrayMap;
import android.text.TextUtils;
import com.google.android.gms.common.internal.Preconditions;
import com.google.android.gms.common.util.Clock;
import com.google.android.gms.common.util.VisibleForTesting;
import com.google.android.gms.internal.measurement.zzaca;
import com.google.android.gms.internal.measurement.zzacb;
import com.google.android.gms.internal.measurement.zzacj;
import com.google.android.gms.internal.measurement.zzed;
import com.google.android.gms.internal.measurement.zzee;
import com.google.android.gms.internal.measurement.zzeh;
import com.google.android.gms.internal.measurement.zzej;
import com.google.android.gms.internal.measurement.zzek;
import com.google.android.gms.internal.measurement.zzer;
import com.google.android.gms.internal.measurement.zzfg;
import com.google.android.gms.internal.measurement.zzfi;
import com.google.android.gms.internal.measurement.zzfk;
import com.google.android.gms.internal.measurement.zzft;
import com.google.android.gms.internal.measurement.zzgi;
import com.google.android.gms.internal.measurement.zzjs;
import com.google.android.gms.internal.measurement.zzjt;
import com.google.android.gms.internal.measurement.zzjz;
import com.google.android.gms.internal.measurement.zzkd;
import com.google.android.gms.internal.measurement.zzkg;
import com.google.android.gms.internal.measurement.zzkm;
import com.google.android.gms.internal.measurement.zzkn;
import com.google.android.gms.internal.measurement.zzko;
import com.google.android.gms.measurement.AppMeasurement;
import java.io.IOException;
import java.util.Map;

public final class zzgh
extends zzjs
implements zzej {
    @VisibleForTesting
    private static int zzane = 65535;
    @VisibleForTesting
    private static int zzanf = 2;
    private final Map<String, Map<String, String>> zzang = new ArrayMap<String, Map<String, String>>();
    private final Map<String, Map<String, Boolean>> zzanh = new ArrayMap<String, Map<String, Boolean>>();
    private final Map<String, Map<String, Boolean>> zzani = new ArrayMap<String, Map<String, Boolean>>();
    private final Map<String, zzkn> zzanj = new ArrayMap<String, zzkn>();
    private final Map<String, Map<String, Integer>> zzank = new ArrayMap<String, Map<String, Integer>>();
    private final Map<String, String> zzanl = new ArrayMap<String, String>();

    zzgh(zzjt zzjt2) {
        super(zzjt2);
    }

    @WorkerThread
    private final zzkn zza(String string2, byte[] object) {
        if (object == null) {
            return new zzkn();
        }
        object = zzaca.zza(object, 0, ((byte[])object).length);
        zzkn zzkn2 = new zzkn();
        try {
            zzkn2.zzb((zzaca)object);
            this.zzgi().zzjc().zze("Parsed config. version, gmp_app_id", zzkn2.zzaum, zzkn2.zzafa);
            return zzkn2;
        }
        catch (IOException iOException) {
            this.zzgi().zziy().zze("Unable to merge remote config. appId", zzfi.zzbp(string2), iOException);
            return new zzkn();
        }
    }

    private static Map<String, String> zza(zzkn arrzzko) {
        ArrayMap<String, String> arrayMap = new ArrayMap<String, String>();
        if (arrzzko != null && arrzzko.zzauo != null) {
            for (zzko zzko2 : arrzzko.zzauo) {
                if (zzko2 == null) continue;
                arrayMap.put(zzko2.zzny, zzko2.value);
            }
        }
        return arrayMap;
    }

    private final void zza(String string2, zzkn arrzzkm) {
        ArrayMap<String, Boolean> arrayMap = new ArrayMap<String, Boolean>();
        ArrayMap<String, Boolean> arrayMap2 = new ArrayMap<String, Boolean>();
        ArrayMap<String, Integer> arrayMap3 = new ArrayMap<String, Integer>();
        if (arrzzkm != null && arrzzkm.zzaup != null) {
            for (zzkm zzkm2 : arrzzkm.zzaup) {
                if (TextUtils.isEmpty((CharSequence)zzkm2.name)) {
                    this.zzgi().zziy().log("EventConfig contained null event name");
                    continue;
                }
                String string3 = AppMeasurement.Event.zzal(zzkm2.name);
                if (!TextUtils.isEmpty((CharSequence)string3)) {
                    zzkm2.name = string3;
                }
                arrayMap.put(zzkm2.name, zzkm2.zzauj);
                arrayMap2.put(zzkm2.name, zzkm2.zzauk);
                if (zzkm2.zzaul == null) continue;
                if (zzkm2.zzaul >= zzanf && zzkm2.zzaul <= zzane) {
                    arrayMap3.put(zzkm2.name, zzkm2.zzaul);
                    continue;
                }
                this.zzgi().zziy().zze("Invalid sampling rate. Event name, sample rate", zzkm2.name, zzkm2.zzaul);
            }
        }
        this.zzanh.put(string2, arrayMap);
        this.zzani.put(string2, arrayMap2);
        this.zzank.put(string2, arrayMap3);
    }

    @WorkerThread
    private final void zzbw(String string2) {
        this.zzch();
        this.zzab();
        Preconditions.checkNotEmpty(string2);
        if (this.zzanj.get(string2) == null) {
            Object object = this.zzjh().zzbh(string2);
            if (object == null) {
                this.zzang.put(string2, null);
                this.zzanh.put(string2, null);
                this.zzani.put(string2, null);
                this.zzanj.put(string2, null);
                this.zzanl.put(string2, null);
                this.zzank.put(string2, null);
                return;
            }
            object = this.zza(string2, (byte[])object);
            this.zzang.put(string2, zzgh.zza((zzkn)object));
            this.zza(string2, (zzkn)object);
            this.zzanj.put(string2, (zzkn)object);
            this.zzanl.put(string2, null);
        }
    }

    @WorkerThread
    protected final boolean zza(String string2, byte[] arrby, String object) {
        this.zzch();
        this.zzab();
        Preconditions.checkNotEmpty(string2);
        zzkn zzkn2 = this.zza(string2, arrby);
        if (zzkn2 == null) {
            return false;
        }
        this.zza(string2, zzkn2);
        this.zzanj.put(string2, zzkn2);
        this.zzanl.put(string2, (String)object);
        this.zzang.put(string2, zzgh.zza(zzkn2));
        this.zzjg().zza(string2, zzkn2.zzauq);
        try {
            zzkn2.zzauq = null;
            object = new byte[zzkn2.zzwb()];
            zzkn2.zza(zzacb.zzb((byte[])object, 0, ((byte[])object).length));
            arrby = object;
        }
        catch (IOException iOException) {
            this.zzgi().zziy().zze("Unable to serialize reduced-size config. Storing full config instead. appId", zzfi.zzbp(string2), iOException);
        }
        object = this.zzjh();
        Preconditions.checkNotEmpty(string2);
        object.zzab();
        object.zzch();
        zzkn2 = new ContentValues();
        zzkn2.put("remote_config", arrby);
        try {
            if ((long)object.getWritableDatabase().update("apps", (ContentValues)zzkn2, "app_id = ?", new String[]{string2}) == 0L) {
                object.zzgi().zziv().zzg("Failed to update remote config (got 0). appId", zzfi.zzbp(string2));
                return true;
            }
        }
        catch (SQLiteException sQLiteException) {
            object.zzgi().zziv().zze("Error storing remote config. appId", zzfi.zzbp(string2), (Object)sQLiteException);
        }
        return true;
    }

    @WorkerThread
    protected final zzkn zzbx(String string2) {
        this.zzch();
        this.zzab();
        Preconditions.checkNotEmpty(string2);
        this.zzbw(string2);
        return this.zzanj.get(string2);
    }

    @WorkerThread
    protected final String zzby(String string2) {
        this.zzab();
        return this.zzanl.get(string2);
    }

    @WorkerThread
    protected final void zzbz(String string2) {
        this.zzab();
        this.zzanl.put(string2, null);
    }

    @WorkerThread
    final void zzca(String string2) {
        this.zzab();
        this.zzanj.remove(string2);
    }

    final boolean zzcb(String string2) {
        return "1".equals(this.zze(string2, "measurement.upload.blacklist_internal"));
    }

    final boolean zzcc(String string2) {
        return "1".equals(this.zze(string2, "measurement.upload.blacklist_public"));
    }

    @WorkerThread
    @Override
    public final String zze(String object, String string2) {
        this.zzab();
        this.zzbw((String)object);
        object = this.zzang.get(object);
        if (object != null) {
            return (String)object.get(string2);
        }
        return null;
    }

    @Override
    protected final boolean zzgn() {
        return false;
    }

    @WorkerThread
    final boolean zzn(String object, String string2) {
        this.zzab();
        this.zzbw((String)object);
        if (this.zzcb((String)object) && zzkd.zzcm(string2)) {
            return true;
        }
        if (this.zzcc((String)object) && zzkd.zzcg(string2)) {
            return true;
        }
        if ((object = this.zzanh.get(object)) != null) {
            if ((object = (Boolean)object.get(string2)) == null) {
                return false;
            }
            return object.booleanValue();
        }
        return false;
    }

    @WorkerThread
    final boolean zzo(String object, String string2) {
        this.zzab();
        this.zzbw((String)object);
        if ("ecommerce_purchase".equals(string2)) {
            return true;
        }
        if ((object = this.zzani.get(object)) != null) {
            if ((object = (Boolean)object.get(string2)) == null) {
                return false;
            }
            return object.booleanValue();
        }
        return false;
    }

    @WorkerThread
    final int zzp(String object, String string2) {
        this.zzab();
        this.zzbw((String)object);
        object = this.zzank.get(object);
        if (object != null) {
            if ((object = (Integer)object.get(string2)) == null) {
                return 1;
            }
            return object.intValue();
        }
        return 1;
    }
}

