/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.app.Activity
 *  android.app.PendingIntent
 *  android.content.Context
 *  android.os.Bundle
 *  android.os.Handler
 *  android.os.Looper
 *  android.os.Message
 *  android.util.Log
 *  javax.annotation.concurrent.GuardedBy
 */
package com.google.android.gms.common.api.internal;

import android.app.Activity;
import android.app.PendingIntent;
import android.content.Context;
import android.os.Bundle;
import android.os.Handler;
import android.os.Looper;
import android.os.Message;
import android.support.annotation.NonNull;
import android.support.v4.app.FragmentActivity;
import android.util.Log;
import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.GoogleApiAvailability;
import com.google.android.gms.common.GoogleApiAvailabilityLight;
import com.google.android.gms.common.api.Api;
import com.google.android.gms.common.api.GoogleApiClient;
import com.google.android.gms.common.api.PendingResult;
import com.google.android.gms.common.api.Result;
import com.google.android.gms.common.api.ResultCallback;
import com.google.android.gms.common.api.Scope;
import com.google.android.gms.common.api.Status;
import com.google.android.gms.common.api.internal.BaseImplementation;
import com.google.android.gms.common.api.internal.BasePendingResult;
import com.google.android.gms.common.api.internal.GooglePlayServicesUpdatedReceiver;
import com.google.android.gms.common.api.internal.LifecycleActivity;
import com.google.android.gms.common.api.internal.ListenerHolder;
import com.google.android.gms.common.api.internal.ListenerHolders;
import com.google.android.gms.common.api.internal.SignInConnectionListener;
import com.google.android.gms.common.api.internal.StatusPendingResult;
import com.google.android.gms.common.api.internal.zzaw;
import com.google.android.gms.common.api.internal.zzax;
import com.google.android.gms.common.api.internal.zzay;
import com.google.android.gms.common.api.internal.zzaz;
import com.google.android.gms.common.api.internal.zzba;
import com.google.android.gms.common.api.internal.zzbb;
import com.google.android.gms.common.api.internal.zzbd;
import com.google.android.gms.common.api.internal.zzbp;
import com.google.android.gms.common.api.internal.zzbq;
import com.google.android.gms.common.api.internal.zzch;
import com.google.android.gms.common.api.internal.zzck;
import com.google.android.gms.common.api.internal.zzcn;
import com.google.android.gms.common.api.internal.zzi;
import com.google.android.gms.common.api.internal.zzp;
import com.google.android.gms.common.api.internal.zzr;
import com.google.android.gms.common.api.internal.zzw;
import com.google.android.gms.common.internal.ClientSettings;
import com.google.android.gms.common.internal.GmsClientEventManager;
import com.google.android.gms.common.internal.Preconditions;
import com.google.android.gms.common.internal.service.Common;
import com.google.android.gms.common.internal.service.CommonApi;
import com.google.android.gms.common.internal.service.CommonClient;
import com.google.android.gms.common.util.VisibleForTesting;
import com.google.android.gms.signin.SignInClient;
import com.google.android.gms.signin.SignInOptions;
import java.io.FileDescriptor;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.Writer;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Queue;
import java.util.Set;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicReference;
import java.util.concurrent.locks.Lock;
import javax.annotation.concurrent.GuardedBy;

public final class zzav
extends GoogleApiClient
implements zzbq {
    private final Context mContext;
    private final Looper zzcn;
    private final int zzde;
    private final GoogleApiAvailability zzdg;
    private final Api.AbstractClientBuilder<? extends SignInClient, SignInOptions> zzdh;
    private boolean zzdk;
    private final Lock zzga;
    private final ClientSettings zzgf;
    private final Map<Api<?>, Boolean> zzgi;
    @VisibleForTesting
    final Queue<BaseImplementation.ApiMethodImpl<?, ?>> zzgo = new LinkedList();
    private final GmsClientEventManager zzie;
    private zzbp zzif = null;
    private volatile boolean zzig;
    private long zzih = 120000L;
    private long zzii = 5000L;
    private final zzba zzij;
    @VisibleForTesting
    private GooglePlayServicesUpdatedReceiver zzik;
    final Map<Api.AnyClientKey<?>, Api.Client> zzil;
    Set<Scope> zzim = new HashSet<Scope>();
    private final ListenerHolders zzin = new ListenerHolders();
    private final ArrayList<zzp> zzio;
    private Integer zzip = null;
    Set<zzch> zziq = null;
    final zzck zzir;
    private final GmsClientEventManager.GmsClientEventState zzis = new zzaw(this);

    public zzav(Context object, Lock object22, Looper looper, ClientSettings clientSettings, GoogleApiAvailability googleApiAvailability, Api.AbstractClientBuilder<? extends SignInClient, SignInOptions> abstractClientBuilder, Map<Api<?>, Boolean> map, List<GoogleApiClient.ConnectionCallbacks> list, List<GoogleApiClient.OnConnectionFailedListener> list2, Map<Api.AnyClientKey<?>, Api.Client> map2, int n, int n2, ArrayList<zzp> arrayList, boolean bl) {
        void var11_15;
        void var4_8;
        void var10_14;
        void var3_7;
        void var9_13;
        void var5_9;
        void var8_12;
        void var7_11;
        void var13_17;
        void var6_10;
        this.mContext = object;
        this.zzga = object22;
        this.zzdk = false;
        this.zzie = new GmsClientEventManager((Looper)var3_7, this.zzis);
        this.zzcn = var3_7;
        this.zzij = new zzba(this, (Looper)var3_7);
        this.zzdg = var5_9;
        this.zzde = var11_15;
        if (this.zzde >= 0) {
            void var12_16;
            this.zzip = (int)var12_16;
        }
        this.zzgi = var7_11;
        this.zzil = var10_14;
        this.zzio = var13_17;
        this.zzir = new zzck(this.zzil);
        for (GoogleApiClient.ConnectionCallbacks connectionCallbacks : var8_12) {
            this.zzie.registerConnectionCallbacks(connectionCallbacks);
        }
        for (GoogleApiClient.OnConnectionFailedListener onConnectionFailedListener : var9_13) {
            this.zzie.registerConnectionFailedListener(onConnectionFailedListener);
        }
        this.zzgf = var4_8;
        this.zzdh = var6_10;
    }

    private final void resume() {
        this.zzga.lock();
        try {
            if (this.zzig) {
                this.zzax();
            }
            return;
        }
        finally {
            this.zzga.unlock();
        }
    }

    public static int zza(Iterable<Api.Client> object, boolean bl) {
        object = object.iterator();
        boolean bl2 = false;
        boolean bl3 = false;
        while (object.hasNext()) {
            Api.Client client = (Api.Client)object.next();
            boolean bl4 = bl2;
            if (client.requiresSignIn()) {
                bl4 = true;
            }
            bl2 = bl4;
            if (!client.providesSignIn()) continue;
            bl3 = true;
            bl2 = bl4;
        }
        if (bl2) {
            if (bl3 && bl) {
                return 2;
            }
            return 1;
        }
        return 3;
    }

    private final void zza(GoogleApiClient googleApiClient, StatusPendingResult statusPendingResult, boolean bl) {
        Common.CommonApi.clearDefaultAccount(googleApiClient).setResultCallback(new zzaz(this, statusPendingResult, bl, googleApiClient));
    }

    static /* synthetic */ void zza(zzav zzav2) {
        zzav2.resume();
    }

    static /* synthetic */ void zza(zzav zzav2, GoogleApiClient googleApiClient, StatusPendingResult statusPendingResult, boolean bl) {
        zzav2.zza(googleApiClient, statusPendingResult, true);
    }

    @GuardedBy(value="mLock")
    private final void zzax() {
        this.zzie.enableCallbacks();
        this.zzif.connect();
    }

    private final void zzay() {
        this.zzga.lock();
        try {
            if (this.zzaz()) {
                this.zzax();
            }
            return;
        }
        finally {
            this.zzga.unlock();
        }
    }

    static /* synthetic */ void zzb(zzav zzav2) {
        zzav2.zzay();
    }

    static /* synthetic */ Context zzc(zzav zzav2) {
        return zzav2.mContext;
    }

    private final void zzg(int n) {
        if (this.zzip == null) {
            this.zzip = n;
        } else if (this.zzip != n) {
            String string2 = zzav.zzh(n);
            String string3 = zzav.zzh(this.zzip);
            StringBuilder stringBuilder = new StringBuilder(String.valueOf(string2).length() + 51 + String.valueOf(string3).length());
            stringBuilder.append("Cannot use sign-in mode: ");
            stringBuilder.append(string2);
            stringBuilder.append(". Mode was already set to ");
            stringBuilder.append(string3);
            throw new IllegalStateException(stringBuilder.toString());
        }
        if (this.zzif != null) {
            return;
        }
        Iterator<Api.Client> iterator = this.zzil.values().iterator();
        boolean bl = false;
        n = 0;
        while (iterator.hasNext()) {
            Api.Client client = iterator.next();
            boolean bl2 = bl;
            if (client.requiresSignIn()) {
                bl2 = true;
            }
            bl = bl2;
            if (!client.providesSignIn()) continue;
            n = 1;
            bl = bl2;
        }
        switch (this.zzip) {
            default: {
                break;
            }
            case 2: {
                if (!bl) break;
                if (this.zzdk) {
                    this.zzif = new zzw(this.mContext, this.zzga, this.zzcn, this.zzdg, this.zzil, this.zzgf, this.zzgi, this.zzdh, this.zzio, this, true);
                    return;
                }
                this.zzif = zzr.zza(this.mContext, this, this.zzga, this.zzcn, this.zzdg, this.zzil, this.zzgf, this.zzgi, this.zzdh, this.zzio);
                return;
            }
            case 1: {
                if (!bl) {
                    throw new IllegalStateException("SIGN_IN_MODE_REQUIRED cannot be used on a GoogleApiClient that does not contain any authenticated APIs. Use connect() instead.");
                }
                if (n == 0) break;
                throw new IllegalStateException("Cannot use SIGN_IN_MODE_REQUIRED with GOOGLE_SIGN_IN_API. Use connect(SIGN_IN_MODE_OPTIONAL) instead.");
            }
            case 3: 
        }
        if (this.zzdk && n == 0) {
            this.zzif = new zzw(this.mContext, this.zzga, this.zzcn, this.zzdg, this.zzil, this.zzgf, this.zzgi, this.zzdh, this.zzio, this, false);
            return;
        }
        this.zzif = new zzbd(this.mContext, this, this.zzga, this.zzcn, this.zzdg, this.zzil, this.zzgf, this.zzgi, this.zzdh, this.zzio, this);
    }

    private static String zzh(int n) {
        switch (n) {
            default: {
                return "UNKNOWN";
            }
            case 3: {
                return "SIGN_IN_MODE_NONE";
            }
            case 2: {
                return "SIGN_IN_MODE_OPTIONAL";
            }
            case 1: 
        }
        return "SIGN_IN_MODE_REQUIRED";
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @Override
    public final ConnectionResult blockingConnect() {
        Looper looper = Looper.myLooper();
        Looper looper2 = Looper.getMainLooper();
        boolean bl = true;
        boolean bl2 = looper != looper2;
        Preconditions.checkState(bl2, "blockingConnect must not be called on the UI thread");
        this.zzga.lock();
        try {
            if (this.zzde >= 0) {
                bl2 = this.zzip != null ? bl : false;
                Preconditions.checkState(bl2, "Sign-in mode should have been set explicitly by auto-manage.");
            } else if (this.zzip == null) {
                this.zzip = zzav.zza(this.zzil.values(), false);
            } else if (this.zzip == 2) {
                throw new IllegalStateException("Cannot call blockingConnect() when sign-in mode is set to SIGN_IN_MODE_OPTIONAL. Call connect(SIGN_IN_MODE_OPTIONAL) instead.");
            }
            this.zzg(this.zzip);
            this.zzie.enableCallbacks();
            ConnectionResult connectionResult = this.zzif.blockingConnect();
            this.zzga.unlock();
            return connectionResult;
        }
        catch (Throwable throwable) {
            this.zzga.unlock();
            throw throwable;
        }
    }

    @Override
    public final ConnectionResult blockingConnect(long l, @NonNull TimeUnit object) {
        boolean bl = Looper.myLooper() != Looper.getMainLooper();
        Preconditions.checkState(bl, "blockingConnect must not be called on the UI thread");
        Preconditions.checkNotNull(object, "TimeUnit must not be null");
        this.zzga.lock();
        try {
            if (this.zzip == null) {
                this.zzip = zzav.zza(this.zzil.values(), false);
            } else if (this.zzip == 2) {
                throw new IllegalStateException("Cannot call blockingConnect() when sign-in mode is set to SIGN_IN_MODE_OPTIONAL. Call connect(SIGN_IN_MODE_OPTIONAL) instead.");
            }
            this.zzg(this.zzip);
            this.zzie.enableCallbacks();
            object = this.zzif.blockingConnect(l, (TimeUnit)((Object)object));
            return object;
        }
        finally {
            this.zzga.unlock();
        }
    }

    @Override
    public final PendingResult<Status> clearDefaultAccountAndReconnect() {
        Preconditions.checkState(this.isConnected(), "GoogleApiClient is not connected yet.");
        boolean bl = this.zzip != 2;
        Preconditions.checkState(bl, "Cannot use clearDefaultAccountAndReconnect with GOOGLE_SIGN_IN_API");
        StatusPendingResult statusPendingResult = new StatusPendingResult(this);
        if (this.zzil.containsKey(Common.CLIENT_KEY)) {
            this.zza(this, statusPendingResult, false);
            return statusPendingResult;
        }
        AtomicReference<Object> atomicReference = new AtomicReference<Object>();
        Object object = new zzax(this, atomicReference, statusPendingResult);
        zzay zzay2 = new zzay(this, statusPendingResult);
        object = new GoogleApiClient.Builder(this.mContext).addApi(Common.API).addConnectionCallbacks((GoogleApiClient.ConnectionCallbacks)object).addOnConnectionFailedListener(zzay2).setHandler(this.zzij).build();
        atomicReference.set(object);
        object.connect();
        return statusPendingResult;
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @Override
    public final void connect() {
        this.zzga.lock();
        try {
            int n = this.zzde;
            boolean bl = false;
            if (n >= 0) {
                if (this.zzip != null) {
                    bl = true;
                }
                Preconditions.checkState(bl, "Sign-in mode should have been set explicitly by auto-manage.");
            } else if (this.zzip == null) {
                this.zzip = zzav.zza(this.zzil.values(), false);
            } else if (this.zzip == 2) {
                throw new IllegalStateException("Cannot call connect() when SignInMode is set to SIGN_IN_MODE_OPTIONAL. Call connect(SIGN_IN_MODE_OPTIONAL) instead.");
            }
            this.connect(this.zzip);
            return;
        }
        finally {
            this.zzga.unlock();
        }
    }

    @Override
    public final void connect(int n) {
        boolean bl;
        this.zzga.lock();
        boolean bl2 = bl = true;
        if (n != 3) {
            bl2 = bl;
            if (n != 1) {
                bl2 = n == 2 ? bl : false;
            }
        }
        try {
            StringBuilder stringBuilder = new StringBuilder(33);
            stringBuilder.append("Illegal sign-in mode: ");
            stringBuilder.append(n);
            Preconditions.checkArgument(bl2, stringBuilder.toString());
            this.zzg(n);
            this.zzax();
            return;
        }
        finally {
            this.zzga.unlock();
        }
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    @Override
    public final void disconnect() {
        block7 : {
            this.zzga.lock();
            this.zzir.release();
            if (this.zzif != null) {
                this.zzif.disconnect();
            }
            this.zzin.release();
            for (BaseImplementation.ApiMethodImpl<?, ?> apiMethodImpl : this.zzgo) {
                apiMethodImpl.zza(null);
                apiMethodImpl.cancel();
            }
            this.zzgo.clear();
            zzbp zzbp2 = this.zzif;
            if (zzbp2 != null) break block7;
            do {
                return;
                break;
            } while (true);
        }
        try {
            this.zzaz();
            this.zzie.disableCallbacks();
            return;
        }
        finally {
            this.zzga.unlock();
        }
    }

    @Override
    public final void dump(String string2, FileDescriptor fileDescriptor, PrintWriter printWriter, String[] arrstring) {
        printWriter.append(string2).append("mContext=").println((Object)this.mContext);
        printWriter.append(string2).append("mResuming=").print(this.zzig);
        printWriter.append(" mWorkQueue.size()=").print(this.zzgo.size());
        zzck zzck2 = this.zzir;
        printWriter.append(" mUnconsumedApiCalls.size()=").println(zzck2.zzmo.size());
        if (this.zzif != null) {
            this.zzif.dump(string2, fileDescriptor, printWriter, arrstring);
        }
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    @Override
    public final <A extends Api.AnyClient, R extends Result, T extends BaseImplementation.ApiMethodImpl<R, A>> T enqueue(@NonNull T t) {
        boolean bl = t.getClientKey() != null;
        Preconditions.checkArgument(bl, "This task can not be enqueued (it's probably a Batch or malformed)");
        bl = this.zzil.containsKey(t.getClientKey());
        String string2 = t.getApi() != null ? t.getApi().getName() : "the API";
        StringBuilder stringBuilder = new StringBuilder(String.valueOf(string2).length() + 65);
        stringBuilder.append("GoogleApiClient is not configured to use ");
        stringBuilder.append(string2);
        stringBuilder.append(" required for this call.");
        Preconditions.checkArgument(bl, stringBuilder.toString());
        this.zzga.lock();
        try {
            if (this.zzif == null) {
                this.zzgo.add((BaseImplementation.ApiMethodImpl<?, ?>)t);
                do {
                    return t;
                    break;
                } while (true);
            }
            t = this.zzif.enqueue(t);
            return t;
        }
        finally {
            this.zzga.unlock();
        }
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    @Override
    public final <A extends Api.AnyClient, T extends BaseImplementation.ApiMethodImpl<? extends Result, A>> T execute(@NonNull T t) {
        boolean bl = t.getClientKey() != null;
        Preconditions.checkArgument(bl, "This task can not be executed (it's probably a Batch or malformed)");
        bl = this.zzil.containsKey(t.getClientKey());
        Object object = t.getApi() != null ? t.getApi().getName() : "the API";
        StringBuilder stringBuilder = new StringBuilder(String.valueOf(object).length() + 65);
        stringBuilder.append("GoogleApiClient is not configured to use ");
        stringBuilder.append((String)object);
        stringBuilder.append(" required for this call.");
        Preconditions.checkArgument(bl, stringBuilder.toString());
        this.zzga.lock();
        try {
            if (this.zzif == null) {
                throw new IllegalStateException("GoogleApiClient is not connected yet.");
            }
            if (this.zzig) {
                this.zzgo.add((BaseImplementation.ApiMethodImpl<?, ?>)t);
                do {
                    object = t;
                    if (this.zzgo.isEmpty()) break;
                    object = this.zzgo.remove();
                    this.zzir.zzb((BasePendingResult<? extends Result>)object);
                    object.setFailedResult(Status.RESULT_INTERNAL_ERROR);
                } while (true);
                do {
                    return (T)object;
                    break;
                } while (true);
            }
            object = this.zzif.execute(t);
            return (T)object;
        }
        finally {
            this.zzga.unlock();
        }
    }

    @NonNull
    @Override
    public final <C extends Api.Client> C getClient(@NonNull Api.AnyClientKey<C> object) {
        object = this.zzil.get(object);
        Preconditions.checkNotNull(object, "Appropriate Api was not requested.");
        return (C)object;
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    @NonNull
    @Override
    public final ConnectionResult getConnectionResult(@NonNull Api<?> object) {
        block9 : {
            ConnectionResult connectionResult;
            block10 : {
                this.zzga.lock();
                if (!this.isConnected() && !this.zzig) {
                    throw new IllegalStateException("Cannot invoke getConnectionResult unless GoogleApiClient is connected");
                }
                if (!this.zzil.containsKey(object.getClientKey())) break block9;
                connectionResult = this.zzif.getConnectionResult((Api<?>)object);
                if (connectionResult != null) break block10;
                if (this.zzig) {
                    object = ConnectionResult.RESULT_SUCCESS;
                    do {
                        return object;
                        break;
                    } while (true);
                }
                Log.w((String)"GoogleApiClientImpl", (String)this.zzbb());
                Log.wtf((String)"GoogleApiClientImpl", (String)String.valueOf(object.getName()).concat(" requested in getConnectionResult is not connected but is not present in the failed  connections map"), (Throwable)new Exception());
                object = new ConnectionResult(8, null);
                return object;
            }
            this.zzga.unlock();
            return connectionResult;
        }
        try {
            throw new IllegalArgumentException(String.valueOf(object.getName()).concat(" was never registered with GoogleApiClient"));
        }
        finally {
            this.zzga.unlock();
        }
    }

    @Override
    public final Context getContext() {
        return this.mContext;
    }

    @Override
    public final Looper getLooper() {
        return this.zzcn;
    }

    @Override
    public final boolean hasApi(@NonNull Api<?> api) {
        return this.zzil.containsKey(api.getClientKey());
    }

    @Override
    public final boolean hasConnectedApi(@NonNull Api<?> object) {
        if (!this.isConnected()) {
            return false;
        }
        if ((object = this.zzil.get(object.getClientKey())) != null && object.isConnected()) {
            return true;
        }
        return false;
    }

    @Override
    public final boolean isConnected() {
        if (this.zzif != null && this.zzif.isConnected()) {
            return true;
        }
        return false;
    }

    @Override
    public final boolean isConnecting() {
        if (this.zzif != null && this.zzif.isConnecting()) {
            return true;
        }
        return false;
    }

    @Override
    public final boolean isConnectionCallbacksRegistered(@NonNull GoogleApiClient.ConnectionCallbacks connectionCallbacks) {
        return this.zzie.isConnectionCallbacksRegistered(connectionCallbacks);
    }

    @Override
    public final boolean isConnectionFailedListenerRegistered(@NonNull GoogleApiClient.OnConnectionFailedListener onConnectionFailedListener) {
        return this.zzie.isConnectionFailedListenerRegistered(onConnectionFailedListener);
    }

    @Override
    public final boolean maybeSignIn(SignInConnectionListener signInConnectionListener) {
        if (this.zzif != null && this.zzif.maybeSignIn(signInConnectionListener)) {
            return true;
        }
        return false;
    }

    @Override
    public final void maybeSignOut() {
        if (this.zzif != null) {
            this.zzif.maybeSignOut();
        }
    }

    @Override
    public final void reconnect() {
        this.disconnect();
        this.connect();
    }

    @Override
    public final void registerConnectionCallbacks(@NonNull GoogleApiClient.ConnectionCallbacks connectionCallbacks) {
        this.zzie.registerConnectionCallbacks(connectionCallbacks);
    }

    @Override
    public final void registerConnectionFailedListener(@NonNull GoogleApiClient.OnConnectionFailedListener onConnectionFailedListener) {
        this.zzie.registerConnectionFailedListener(onConnectionFailedListener);
    }

    @Override
    public final <L> ListenerHolder<L> registerListener(@NonNull L object) {
        this.zzga.lock();
        try {
            object = this.zzin.zza(object, this.zzcn, "NO_TYPE");
            return object;
        }
        finally {
            this.zzga.unlock();
        }
    }

    @Override
    public final void stopAutoManage(@NonNull FragmentActivity object) {
        object = new LifecycleActivity((Activity)object);
        if (this.zzde >= 0) {
            zzi.zza((LifecycleActivity)object).zzc(this.zzde);
            return;
        }
        throw new IllegalStateException("Called stopAutoManage but automatic lifecycle management is not enabled.");
    }

    @Override
    public final void unregisterConnectionCallbacks(@NonNull GoogleApiClient.ConnectionCallbacks connectionCallbacks) {
        this.zzie.unregisterConnectionCallbacks(connectionCallbacks);
    }

    @Override
    public final void unregisterConnectionFailedListener(@NonNull GoogleApiClient.OnConnectionFailedListener onConnectionFailedListener) {
        this.zzie.unregisterConnectionFailedListener(onConnectionFailedListener);
    }

    @Override
    public final void zza(zzch zzch2) {
        this.zzga.lock();
        try {
            if (this.zziq == null) {
                this.zziq = new HashSet<zzch>();
            }
            this.zziq.add(zzch2);
            return;
        }
        finally {
            this.zzga.unlock();
        }
    }

    @GuardedBy(value="mLock")
    final boolean zzaz() {
        if (!this.zzig) {
            return false;
        }
        this.zzig = false;
        this.zzij.removeMessages(2);
        this.zzij.removeMessages(1);
        if (this.zzik != null) {
            this.zzik.unregister();
            this.zzik = null;
        }
        return true;
    }

    @GuardedBy(value="mLock")
    @Override
    public final void zzb(int n, boolean bl) {
        if (n == 1 && !bl && !this.zzig) {
            this.zzig = true;
            if (this.zzik == null) {
                this.zzik = this.zzdg.registerCallbackOnUpdate(this.mContext.getApplicationContext(), new zzbb(this));
            }
            this.zzij.sendMessageDelayed(this.zzij.obtainMessage(1), this.zzih);
            this.zzij.sendMessageDelayed(this.zzij.obtainMessage(2), this.zzii);
        }
        this.zzir.zzce();
        this.zzie.onUnintentionalDisconnection(n);
        this.zzie.disableCallbacks();
        if (n == 2) {
            this.zzax();
        }
    }

    @GuardedBy(value="mLock")
    @Override
    public final void zzb(Bundle bundle) {
        while (!this.zzgo.isEmpty()) {
            this.execute(this.zzgo.remove());
        }
        this.zzie.onConnectionSuccess(bundle);
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @Override
    public final void zzb(zzch object) {
        this.zzga.lock();
        try {
            block7 : {
                Exception exception;
                block6 : {
                    block5 : {
                        if (this.zziq != null) break block5;
                        object = "Attempted to remove pending transform when no transforms are registered.";
                        exception = new Exception();
                        break block6;
                    }
                    if (this.zziq.remove(object)) break block7;
                    object = "Failed to remove pending transform - this may lead to memory leaks!";
                    exception = new Exception();
                }
                Log.wtf((String)"GoogleApiClientImpl", (String)object, (Throwable)exception);
                return;
            }
            if (this.zzba()) return;
            this.zzif.zzz();
            return;
        }
        finally {
            this.zzga.unlock();
        }
    }

    final boolean zzba() {
        block4 : {
            this.zzga.lock();
            Set<zzch> set = this.zziq;
            if (set != null) break block4;
            this.zzga.unlock();
            return false;
        }
        try {
            boolean bl = this.zziq.isEmpty();
            return bl ^ true;
        }
        finally {
            this.zzga.unlock();
        }
    }

    final String zzbb() {
        StringWriter stringWriter = new StringWriter();
        this.dump("", null, new PrintWriter(stringWriter), null);
        return stringWriter.toString();
    }

    @GuardedBy(value="mLock")
    @Override
    public final void zzc(ConnectionResult connectionResult) {
        if (!this.zzdg.isPlayServicesPossiblyUpdating(this.mContext, connectionResult.getErrorCode())) {
            this.zzaz();
        }
        if (!this.zzig) {
            this.zzie.onConnectionFailure(connectionResult);
            this.zzie.disableCallbacks();
        }
    }
}

