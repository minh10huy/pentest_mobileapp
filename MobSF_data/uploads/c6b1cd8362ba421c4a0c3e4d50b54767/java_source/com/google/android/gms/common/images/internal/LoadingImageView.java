/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.content.Context
 *  android.content.res.Resources
 *  android.content.res.TypedArray
 *  android.graphics.Canvas
 *  android.graphics.ColorFilter
 *  android.graphics.Paint
 *  android.graphics.Path
 *  android.graphics.drawable.Drawable
 *  android.net.Uri
 *  android.util.AttributeSet
 *  android.widget.ImageView
 */
package com.google.android.gms.common.images.internal;

import android.content.Context;
import android.content.res.Resources;
import android.content.res.TypedArray;
import android.graphics.Canvas;
import android.graphics.ColorFilter;
import android.graphics.Paint;
import android.graphics.Path;
import android.graphics.drawable.Drawable;
import android.net.Uri;
import android.util.AttributeSet;
import android.widget.ImageView;
import com.google.android.gms.base.R;
import com.google.android.gms.common.images.ImageManager;
import com.google.android.gms.common.images.ImageRequest;
import com.google.android.gms.common.images.internal.ColorFilters;
import com.google.android.gms.common.internal.Asserts;
import com.google.android.gms.common.util.PlatformVersion;

public final class LoadingImageView
extends ImageView {
    public static final int ASPECT_RATIO_ADJUST_HEIGHT = 2;
    public static final int ASPECT_RATIO_ADJUST_NONE = 0;
    public static final int ASPECT_RATIO_ADJUST_WIDTH = 1;
    private static ImageManager zzqm;
    private ImageManager.OnImageLoadedListener mOnImageLoadedListener;
    private int mPostProcessingFlags = 0;
    private boolean zzpl = true;
    private boolean zzpm = false;
    private Uri zzqn;
    private int zzqo = 0;
    private boolean zzqp = false;
    private int zzqq = 0;
    private ClipPathProvider zzqr;
    private int zzqs = 0;
    private float zzqt = 1.0f;

    public LoadingImageView(Context context) {
        this(context, null, 0);
    }

    public LoadingImageView(Context context, AttributeSet attributeSet) {
        this(context, attributeSet, 0);
    }

    public LoadingImageView(Context context, AttributeSet attributeSet, int n) {
        super(context, attributeSet, n);
        context = context.obtainStyledAttributes(attributeSet, R.styleable.LoadingImageView);
        this.zzqs = context.getInt(R.styleable.LoadingImageView_imageAspectRatioAdjust, 0);
        this.zzqt = context.getFloat(R.styleable.LoadingImageView_imageAspectRatio, 1.0f);
        this.setCircleCropEnabled(context.getBoolean(R.styleable.LoadingImageView_circleCrop, false));
        context.recycle();
    }

    private final void zzc(boolean bl) {
        if (this.mOnImageLoadedListener != null) {
            this.mOnImageLoadedListener.onImageLoaded(this.zzqn, null, bl);
        }
    }

    public final void clearAspectRatioAdjust() {
        if (this.zzqs != 0) {
            this.zzqs = 0;
            this.requestLayout();
        }
    }

    public final void clearImage() {
        this.loadUri(null);
        this.zzqp = true;
    }

    public final int getLoadedNoDataPlaceholderResId() {
        return this.zzqo;
    }

    public final Uri getLoadedUri() {
        return this.zzqn;
    }

    public final void loadUri(Uri uri) {
        this.loadUri(uri, 0, true, false);
    }

    public final void loadUri(Uri uri, int n) {
        this.loadUri(uri, n, true, false);
    }

    public final void loadUri(Uri uri, int n, boolean bl) {
        this.loadUri(uri, n, bl, false);
    }

    public final void loadUri(Uri object, int n, boolean bl, boolean bl2) {
        boolean bl3 = true;
        boolean bl4 = object != null ? object.equals((Object)this.zzqn) : this.zzqn == null;
        if (bl4) {
            if (this.zzqn != null) {
                this.zzc(true);
                return;
            }
            if (this.zzqo == n) {
                this.zzc(false);
                return;
            }
        }
        if (zzqm == null) {
            bl4 = this.getContext().getApplicationContext().getPackageName().equals("com.google.android.play.games");
            zzqm = ImageManager.create(this.getContext(), bl4);
        }
        bl4 = bl3;
        if (!this.zzpm) {
            bl4 = this.zzqp ? bl3 : false;
        }
        this.zzqp = false;
        object = new ImageRequest.ImageViewImageRequest((ImageView)this, (Uri)object);
        object.setNoDataPlaceholder(n);
        object.setCrossFadeEnabled(this.zzpl);
        object.setCrossFadeAlwaysEnabled(bl4);
        object.setLoadingPlaceholderEnabled(bl);
        object.setPostProcessingFlags(this.mPostProcessingFlags);
        object.setOnImageLoadedListener(this.mOnImageLoadedListener);
        object.setUseNewDrawable(bl2);
        zzqm.loadImage((ImageRequest)object);
    }

    protected final void onDraw(Canvas canvas) {
        if (this.zzqr != null) {
            canvas.clipPath(this.zzqr.getClipPath(this.getWidth(), this.getHeight()));
        }
        super.onDraw(canvas);
        if (this.zzqq != 0) {
            canvas.drawColor(this.zzqq);
        }
    }

    protected final void onMeasure(int n, int n2) {
        super.onMeasure(n, n2);
        switch (this.zzqs) {
            default: {
                return;
            }
            case 2: {
                n = this.getMeasuredWidth();
                n2 = (int)((float)n / this.zzqt);
                break;
            }
            case 1: {
                n2 = this.getMeasuredHeight();
                n = (int)((float)n2 * this.zzqt);
            }
        }
        this.setMeasuredDimension(n, n2);
    }

    /*
     * Enabled aggressive block sorting
     */
    public final void setCircleCropEnabled(boolean bl) {
        int n = bl ? this.mPostProcessingFlags | 1 : this.mPostProcessingFlags & -2;
        this.mPostProcessingFlags = n;
    }

    public final void setClipPathProvider(ClipPathProvider clipPathProvider) {
        this.zzqr = clipPathProvider;
        if (!PlatformVersion.isAtLeastJellyBean()) {
            this.setLayerType(1, null);
        }
    }

    public final void setCrossFadeAlwaysEnabled(boolean bl) {
        this.zzpm = bl;
    }

    public final void setCrossFadeEnabled(boolean bl) {
        this.zzpl = bl;
    }

    public final void setImageAspectRatioAdjust(int n, float f) {
        boolean bl = false;
        boolean bl2 = n == 0 || n == 1 || n == 2;
        Asserts.checkState(bl2);
        bl2 = bl;
        if (f > 0.0f) {
            bl2 = true;
        }
        Asserts.checkState(bl2);
        this.zzqs = n;
        this.zzqt = f;
        this.requestLayout();
    }

    public final void setLoadedNoDataPlaceholderResId(int n) {
        this.zzqo = n;
    }

    public final void setLoadedUri(Uri uri) {
        this.zzqn = uri;
    }

    public final void setOnImageLoadedListener(ImageManager.OnImageLoadedListener onImageLoadedListener) {
        this.mOnImageLoadedListener = onImageLoadedListener;
    }

    /*
     * Enabled aggressive block sorting
     */
    public final void setTintColor(int n) {
        this.zzqq = n;
        Object object = this.zzqq != 0 ? ColorFilters.COLOR_FILTER_BW : null;
        this.setColorFilter(object);
        this.invalidate();
    }

    public final void setTintColorId(int n) {
        Resources resources;
        n = n > 0 && (resources = this.getResources()) != null ? resources.getColor(n) : 0;
        this.setTintColor(n);
    }

    public static interface ClipPathProvider {
        public Path getClipPath(int var1, int var2);
    }

}

