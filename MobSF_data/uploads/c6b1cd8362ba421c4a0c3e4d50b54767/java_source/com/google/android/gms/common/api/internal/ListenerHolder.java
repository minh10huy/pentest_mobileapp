/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.os.Handler
 *  android.os.Looper
 *  android.os.Message
 */
package com.google.android.gms.common.api.internal;

import android.os.Handler;
import android.os.Looper;
import android.os.Message;
import android.support.annotation.NonNull;
import com.google.android.gms.common.annotation.KeepForSdk;
import com.google.android.gms.common.internal.Preconditions;

@KeepForSdk
public final class ListenerHolder<L> {
    private final zza zzlh;
    private volatile L zzli;
    private final ListenerKey<L> zzlj;

    @KeepForSdk
    ListenerHolder(@NonNull Looper looper, @NonNull L l, @NonNull String string2) {
        this.zzlh = new zza(looper);
        this.zzli = Preconditions.checkNotNull(l, "Listener must not be null");
        this.zzlj = new ListenerKey<L>(l, Preconditions.checkNotEmpty(string2));
    }

    @KeepForSdk
    public final void clear() {
        this.zzli = null;
    }

    @NonNull
    @KeepForSdk
    public final ListenerKey<L> getListenerKey() {
        return this.zzlj;
    }

    @KeepForSdk
    public final boolean hasListener() {
        if (this.zzli != null) {
            return true;
        }
        return false;
    }

    @KeepForSdk
    public final void notifyListener(Notifier<? super L> message) {
        Preconditions.checkNotNull(message, "Notifier must not be null");
        message = this.zzlh.obtainMessage(1, message);
        this.zzlh.sendMessage(message);
    }

    @KeepForSdk
    final void notifyListenerInternal(Notifier<? super L> notifier) {
        L l = this.zzli;
        if (l == null) {
            notifier.onNotifyListenerFailed();
            return;
        }
        try {
            notifier.notifyListener(l);
            return;
        }
        catch (RuntimeException runtimeException) {
            notifier.onNotifyListenerFailed();
            throw runtimeException;
        }
    }

    @KeepForSdk
    public static final class ListenerKey<L> {
        private final L zzli;
        private final String zzll;

        @KeepForSdk
        ListenerKey(L l, String string2) {
            this.zzli = l;
            this.zzll = string2;
        }

        public final boolean equals(Object object) {
            if (this == object) {
                return true;
            }
            if (!(object instanceof ListenerKey)) {
                return false;
            }
            object = (ListenerKey)object;
            if (this.zzli == object.zzli && this.zzll.equals(object.zzll)) {
                return true;
            }
            return false;
        }

        public final int hashCode() {
            return System.identityHashCode(this.zzli) * 31 + this.zzll.hashCode();
        }
    }

    @KeepForSdk
    public static interface Notifier<L> {
        @KeepForSdk
        public void notifyListener(L var1);

        @KeepForSdk
        public void onNotifyListenerFailed();
    }

    private final class zza
    extends Handler {
        public zza(Looper looper) {
            super(looper);
        }

        public final void handleMessage(Message message) {
            int n = message.what;
            boolean bl = true;
            if (n != 1) {
                bl = false;
            }
            Preconditions.checkArgument(bl);
            ListenerHolder.this.notifyListenerInternal((Notifier)message.obj);
        }
    }

}

