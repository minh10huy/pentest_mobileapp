/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.accounts.Account
 *  android.app.Activity
 *  android.content.Context
 *  android.os.Bundle
 *  android.os.Handler
 *  android.os.Looper
 *  android.view.View
 *  javax.annotation.concurrent.GuardedBy
 */
package com.google.android.gms.common.api;

import android.accounts.Account;
import android.app.Activity;
import android.content.Context;
import android.os.Bundle;
import android.os.Handler;
import android.os.Looper;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.v4.app.FragmentActivity;
import android.support.v4.util.ArrayMap;
import android.view.View;
import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.GoogleApiAvailability;
import com.google.android.gms.common.annotation.KeepForSdk;
import com.google.android.gms.common.api.Api;
import com.google.android.gms.common.api.PendingResult;
import com.google.android.gms.common.api.Result;
import com.google.android.gms.common.api.Scope;
import com.google.android.gms.common.api.Status;
import com.google.android.gms.common.api.internal.BaseImplementation;
import com.google.android.gms.common.api.internal.LifecycleActivity;
import com.google.android.gms.common.api.internal.ListenerHolder;
import com.google.android.gms.common.api.internal.SignInConnectionListener;
import com.google.android.gms.common.api.internal.zzav;
import com.google.android.gms.common.api.internal.zzch;
import com.google.android.gms.common.api.internal.zzi;
import com.google.android.gms.common.api.internal.zzp;
import com.google.android.gms.common.internal.ClientSettings;
import com.google.android.gms.common.internal.Preconditions;
import com.google.android.gms.common.util.VisibleForTesting;
import com.google.android.gms.signin.SignIn;
import com.google.android.gms.signin.SignInClient;
import com.google.android.gms.signin.SignInOptions;
import com.google.android.gms.signin.internal.SignInClientImpl;
import java.io.FileDescriptor;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.WeakHashMap;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import javax.annotation.concurrent.GuardedBy;

@KeepForSdk
public abstract class GoogleApiClient {
    @KeepForSdk
    public static final String DEFAULT_ACCOUNT = "<<default account>>";
    public static final int SIGN_IN_MODE_OPTIONAL = 2;
    public static final int SIGN_IN_MODE_REQUIRED = 1;
    @GuardedBy(value="sAllClients")
    private static final Set<GoogleApiClient> zzcu = Collections.newSetFromMap(new WeakHashMap());

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public static void dumpAll(String string2, FileDescriptor fileDescriptor, PrintWriter printWriter, String[] arrstring) {
        Set<GoogleApiClient> set = zzcu;
        synchronized (set) {
            int n = 0;
            String string3 = String.valueOf(string2).concat("  ");
            Iterator<GoogleApiClient> iterator = zzcu.iterator();
            while (iterator.hasNext()) {
                GoogleApiClient googleApiClient = iterator.next();
                printWriter.append(string2).append("GoogleApiClient#").println(n);
                googleApiClient.dump(string3, fileDescriptor, printWriter, arrstring);
                ++n;
            }
            return;
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @KeepForSdk
    public static Set<GoogleApiClient> getAllClients() {
        Set<GoogleApiClient> set = zzcu;
        synchronized (set) {
            return zzcu;
        }
    }

    public abstract ConnectionResult blockingConnect();

    public abstract ConnectionResult blockingConnect(long var1, @NonNull TimeUnit var3);

    public abstract PendingResult<Status> clearDefaultAccountAndReconnect();

    public abstract void connect();

    public void connect(int n) {
        throw new UnsupportedOperationException();
    }

    public abstract void disconnect();

    public abstract void dump(String var1, FileDescriptor var2, PrintWriter var3, String[] var4);

    @KeepForSdk
    public <A extends Api.AnyClient, R extends Result, T extends BaseImplementation.ApiMethodImpl<R, A>> T enqueue(@NonNull T t) {
        throw new UnsupportedOperationException();
    }

    @KeepForSdk
    public <A extends Api.AnyClient, T extends BaseImplementation.ApiMethodImpl<? extends Result, A>> T execute(@NonNull T t) {
        throw new UnsupportedOperationException();
    }

    @NonNull
    @KeepForSdk
    public <C extends Api.Client> C getClient(@NonNull Api.AnyClientKey<C> anyClientKey) {
        throw new UnsupportedOperationException();
    }

    @NonNull
    public abstract ConnectionResult getConnectionResult(@NonNull Api<?> var1);

    @KeepForSdk
    public Context getContext() {
        throw new UnsupportedOperationException();
    }

    @KeepForSdk
    public Looper getLooper() {
        throw new UnsupportedOperationException();
    }

    @KeepForSdk
    public boolean hasApi(@NonNull Api<?> api) {
        throw new UnsupportedOperationException();
    }

    public abstract boolean hasConnectedApi(@NonNull Api<?> var1);

    public abstract boolean isConnected();

    public abstract boolean isConnecting();

    public abstract boolean isConnectionCallbacksRegistered(@NonNull ConnectionCallbacks var1);

    public abstract boolean isConnectionFailedListenerRegistered(@NonNull OnConnectionFailedListener var1);

    @KeepForSdk
    public boolean maybeSignIn(SignInConnectionListener signInConnectionListener) {
        throw new UnsupportedOperationException();
    }

    @KeepForSdk
    public void maybeSignOut() {
        throw new UnsupportedOperationException();
    }

    public abstract void reconnect();

    public abstract void registerConnectionCallbacks(@NonNull ConnectionCallbacks var1);

    public abstract void registerConnectionFailedListener(@NonNull OnConnectionFailedListener var1);

    @KeepForSdk
    public <L> ListenerHolder<L> registerListener(@NonNull L l) {
        throw new UnsupportedOperationException();
    }

    public abstract void stopAutoManage(@NonNull FragmentActivity var1);

    public abstract void unregisterConnectionCallbacks(@NonNull ConnectionCallbacks var1);

    public abstract void unregisterConnectionFailedListener(@NonNull OnConnectionFailedListener var1);

    public void zza(zzch zzch2) {
        throw new UnsupportedOperationException();
    }

    public void zzb(zzch zzch2) {
        throw new UnsupportedOperationException();
    }

    @KeepForSdk
    public static final class Builder {
        private final Context mContext;
        private Looper zzcn;
        private final Set<Scope> zzcv = new HashSet<Scope>();
        private final Set<Scope> zzcw = new HashSet<Scope>();
        private int zzcx;
        private View zzcy;
        private String zzcz;
        private String zzda;
        private final Map<Api<?>, ClientSettings.OptionalApiSettings> zzdb = new ArrayMap();
        private final Map<Api<?>, Api.ApiOptions> zzdc = new ArrayMap();
        private LifecycleActivity zzdd;
        private int zzde = -1;
        private OnConnectionFailedListener zzdf;
        private GoogleApiAvailability zzdg = GoogleApiAvailability.getInstance();
        private Api.AbstractClientBuilder<? extends SignInClient, SignInOptions> zzdh = SignIn.CLIENT_BUILDER;
        private final ArrayList<ConnectionCallbacks> zzdi = new ArrayList();
        private final ArrayList<OnConnectionFailedListener> zzdj = new ArrayList();
        private boolean zzdk = false;
        private Account zzs;

        @KeepForSdk
        public Builder(@NonNull Context context) {
            this.mContext = context;
            this.zzcn = context.getMainLooper();
            this.zzcz = context.getPackageName();
            this.zzda = context.getClass().getName();
        }

        @KeepForSdk
        public Builder(@NonNull Context context, @NonNull ConnectionCallbacks connectionCallbacks, @NonNull OnConnectionFailedListener onConnectionFailedListener) {
            this(context);
            Preconditions.checkNotNull(connectionCallbacks, "Must provide a connected listener");
            this.zzdi.add(connectionCallbacks);
            Preconditions.checkNotNull(onConnectionFailedListener, "Must provide a connection failed listener");
            this.zzdj.add(onConnectionFailedListener);
        }

        private final /* varargs */ <O extends Api.ApiOptions> void zza(Api<O> api, O object, Scope ... arrscope) {
            object = new HashSet<Scope>(api.zzj().getImpliedScopes(object));
            int n = arrscope.length;
            for (int i = 0; i < n; ++i) {
                object.add((Scope)arrscope[i]);
            }
            this.zzdb.put(api, new ClientSettings.OptionalApiSettings((Set<Scope>)object));
        }

        public final Builder addApi(@NonNull Api<? extends Api.ApiOptions.NotRequiredOptions> object) {
            Preconditions.checkNotNull(object, "Api must not be null");
            this.zzdc.put((Api<?>)object, (Api.ApiOptions)null);
            object = object.zzj().getImpliedScopes(null);
            this.zzcw.addAll((Collection<Scope>)object);
            this.zzcv.addAll((Collection<Scope>)object);
            return this;
        }

        public final <O extends Api.ApiOptions.HasOptions> Builder addApi(@NonNull Api<O> object, @NonNull O o) {
            Preconditions.checkNotNull(object, "Api must not be null");
            Preconditions.checkNotNull(o, "Null options are not permitted for this Api");
            this.zzdc.put((Api<?>)object, (Api.ApiOptions)o);
            object = object.zzj().getImpliedScopes(o);
            this.zzcw.addAll((Collection<Scope>)object);
            this.zzcv.addAll((Collection<Scope>)object);
            return this;
        }

        public final /* varargs */ <O extends Api.ApiOptions.HasOptions> Builder addApiIfAvailable(@NonNull Api<O> api, @NonNull O o, Scope ... arrscope) {
            Preconditions.checkNotNull(api, "Api must not be null");
            Preconditions.checkNotNull(o, "Null options are not permitted for this Api");
            this.zzdc.put(api, (Api.ApiOptions)o);
            this.zza(api, o, arrscope);
            return this;
        }

        public final /* varargs */ Builder addApiIfAvailable(@NonNull Api<? extends Api.ApiOptions.NotRequiredOptions> api, Scope ... arrscope) {
            Preconditions.checkNotNull(api, "Api must not be null");
            this.zzdc.put(api, null);
            this.zza(api, null, arrscope);
            return this;
        }

        public final Builder addConnectionCallbacks(@NonNull ConnectionCallbacks connectionCallbacks) {
            Preconditions.checkNotNull(connectionCallbacks, "Listener must not be null");
            this.zzdi.add(connectionCallbacks);
            return this;
        }

        public final Builder addOnConnectionFailedListener(@NonNull OnConnectionFailedListener onConnectionFailedListener) {
            Preconditions.checkNotNull(onConnectionFailedListener, "Listener must not be null");
            this.zzdj.add(onConnectionFailedListener);
            return this;
        }

        public final Builder addScope(@NonNull Scope scope) {
            Preconditions.checkNotNull(scope, "Scope must not be null");
            this.zzcv.add(scope);
            return this;
        }

        @KeepForSdk
        public final Builder addScopeNames(String[] arrstring) {
            for (int i = 0; i < arrstring.length; ++i) {
                this.zzcv.add(new Scope(arrstring[i]));
            }
            return this;
        }

        /*
         * Enabled aggressive block sorting
         * Enabled unnecessary exception pruning
         * Enabled aggressive exception aggregation
         * Converted monitor instructions to comments
         * Lifted jumps to return sites
         */
        public final GoogleApiClient build() {
            boolean bl;
            Preconditions.checkArgument(this.zzdc.isEmpty() ^ true, "must call addApi() to add at least one API");
            ClientSettings clientSettings = this.buildClientSettings();
            Object object = null;
            Object object2 = clientSettings.getOptionalApiSettings();
            ArrayMap arrayMap = new ArrayMap();
            ArrayMap arrayMap2 = new ArrayMap();
            ArrayList<zzp> arrayList = new ArrayList<zzp>();
            Object object3 = this.zzdc.keySet().iterator();
            int n = 0;
            while (object3.hasNext()) {
                Api<?> api = object3.next();
                Api<?> api2 = this.zzdc.get(api);
                bl = object2.get(api) != null;
                arrayMap.put(api, bl);
                zzp zzp2 = new zzp(api, bl);
                arrayList.add(zzp2);
                Api.AbstractClientBuilder<?, ?> abstractClientBuilder = api.zzk();
                zzp2 = abstractClientBuilder.buildClient(this.mContext, this.zzcn, clientSettings, api2, zzp2, zzp2);
                arrayMap2.put(api.getClientKey(), (Api.Client)((Object)zzp2));
                if (abstractClientBuilder.getPriority() == 1) {
                    n = api2 != null ? 1 : 0;
                }
                api2 = object;
                if (zzp2.providesSignIn()) {
                    if (object != null) {
                        object3 = api.getName();
                        object = object.getName();
                        object2 = new StringBuilder(String.valueOf(object3).length() + 21 + String.valueOf(object).length());
                        object2.append((String)object3);
                        object2.append(" cannot be used with ");
                        object2.append((String)object);
                        throw new IllegalStateException(object2.toString());
                    }
                    api2 = api;
                }
                object = api2;
            }
            if (object != null) {
                if (n != 0) {
                    object = object.getName();
                    object3 = new StringBuilder(String.valueOf(object).length() + 82);
                    object3.append("With using ");
                    object3.append((String)object);
                    object3.append(", GamesOptions can only be specified within GoogleSignInOptions.Builder");
                    throw new IllegalStateException(object3.toString());
                }
                bl = this.zzs == null;
                Preconditions.checkState(bl, "Must not set an account in GoogleApiClient.Builder when using %s. Set account in GoogleSignInOptions.Builder instead", object.getName());
                Preconditions.checkState(this.zzcv.equals(this.zzcw), "Must not set scopes in GoogleApiClient.Builder when using %s. Set account in GoogleSignInOptions.Builder instead.", object.getName());
            }
            n = zzav.zza(arrayMap2.values(), true);
            object3 = new zzav(this.mContext, new ReentrantLock(), this.zzcn, clientSettings, this.zzdg, this.zzdh, arrayMap, this.zzdi, this.zzdj, arrayMap2, this.zzde, n, arrayList, false);
            object = zzcu;
            // MONITORENTER : object
            zzcu.add(object3);
            // MONITOREXIT : object
            if (this.zzde < 0) return object3;
            zzi.zza(this.zzdd).zza(this.zzde, (GoogleApiClient)object3, this.zzdf);
            return object3;
        }

        @KeepForSdk
        @VisibleForTesting
        public final ClientSettings buildClientSettings() {
            SignInOptions signInOptions = SignInOptions.DEFAULT;
            if (this.zzdc.containsKey(SignIn.API)) {
                signInOptions = (SignInOptions)this.zzdc.get(SignIn.API);
            }
            return new ClientSettings(this.zzs, this.zzcv, this.zzdb, this.zzcx, this.zzcy, this.zzcz, this.zzda, signInOptions);
        }

        public final Builder enableAutoManage(@NonNull FragmentActivity object, int n, @Nullable OnConnectionFailedListener onConnectionFailedListener) {
            object = new LifecycleActivity((Activity)object);
            boolean bl = n >= 0;
            Preconditions.checkArgument(bl, "clientId must be non-negative");
            this.zzde = n;
            this.zzdf = onConnectionFailedListener;
            this.zzdd = object;
            return this;
        }

        public final Builder enableAutoManage(@NonNull FragmentActivity fragmentActivity, @Nullable OnConnectionFailedListener onConnectionFailedListener) {
            return this.enableAutoManage(fragmentActivity, 0, onConnectionFailedListener);
        }

        public final Builder setAccountName(String string2) {
            string2 = string2 == null ? null : new Account(string2, "com.google");
            this.zzs = string2;
            return this;
        }

        public final Builder setGravityForPopups(int n) {
            this.zzcx = n;
            return this;
        }

        public final Builder setHandler(@NonNull Handler handler) {
            Preconditions.checkNotNull(handler, "Handler must not be null");
            this.zzcn = handler.getLooper();
            return this;
        }

        public final Builder setViewForPopups(@NonNull View view) {
            Preconditions.checkNotNull(view, "View must not be null");
            this.zzcy = view;
            return this;
        }

        public final Builder useDefaultAccount() {
            return this.setAccountName(GoogleApiClient.DEFAULT_ACCOUNT);
        }
    }

    public static interface ConnectionCallbacks {
        public static final int CAUSE_NETWORK_LOST = 2;
        public static final int CAUSE_SERVICE_DISCONNECTED = 1;

        public void onConnected(@Nullable Bundle var1);

        public void onConnectionSuspended(int var1);
    }

    public static interface OnConnectionFailedListener {
        public void onConnectionFailed(@NonNull ConnectionResult var1);
    }

}

