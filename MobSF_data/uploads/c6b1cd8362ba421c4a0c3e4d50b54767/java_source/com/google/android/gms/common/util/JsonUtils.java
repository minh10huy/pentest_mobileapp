/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.text.TextUtils
 *  org.json.JSONArray
 *  org.json.JSONException
 *  org.json.JSONObject
 */
package com.google.android.gms.common.util;

import android.text.TextUtils;
import com.google.android.gms.common.util.UnicodeUtils;
import com.google.android.gms.common.util.VisibleForTesting;
import java.util.Iterator;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

@VisibleForTesting
public final class JsonUtils {
    private static final Pattern zzaae = Pattern.compile("\\\\.");
    private static final Pattern zzaaf = Pattern.compile("[\\\\\"/\b\f\n\r\t]");

    private JsonUtils() {
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public static boolean areJsonStringsEquivalent(String string2, String string3) {
        if (string2 == null && string3 == null) {
            return true;
        }
        if (string2 == null) {
            return false;
        }
        if (string3 == null) {
            return false;
        }
        try {
            return JsonUtils.areJsonValuesEquivalent((Object)new JSONObject(string2), (Object)new JSONObject(string3));
        }
        catch (JSONException jSONException) {}
        try {
            return JsonUtils.areJsonValuesEquivalent((Object)new JSONArray(string2), (Object)new JSONArray(string3));
        }
        catch (JSONException jSONException) {
            return false;
        }
    }

    /*
     * Loose catch block
     * Enabled aggressive exception aggregation
     */
    public static boolean areJsonValuesEquivalent(Object object, Object object2) {
        if (object == null && object2 == null) {
            return true;
        }
        if (object != null) {
            if (object2 == null) {
                return false;
            }
            if (object instanceof JSONObject && object2 instanceof JSONObject) {
                object = (JSONObject)object;
                object2 = (JSONObject)object2;
                if (object.length() != object2.length()) {
                    return false;
                }
                Iterator iterator = object.keys();
                while (iterator.hasNext()) {
                    String string2 = (String)iterator.next();
                    if (!object2.has(string2)) {
                        return false;
                    }
                    boolean bl = JsonUtils.areJsonValuesEquivalent(object.get(string2), object2.get(string2));
                    if (bl) continue;
                    return false;
                }
                return true;
            }
            if (object instanceof JSONArray && object2 instanceof JSONArray) {
                object = (JSONArray)object;
                object2 = (JSONArray)object2;
                if (object.length() != object2.length()) {
                    return false;
                }
                for (int i = 0; i < object.length(); ++i) {
                    boolean bl = JsonUtils.areJsonValuesEquivalent(object.get(i), object2.get(i));
                    if (bl) continue;
                    return false;
                }
                return true;
            }
            return object.equals(object2);
        }
        return false;
        catch (JSONException jSONException) {
            return false;
        }
        catch (JSONException jSONException) {
            return false;
        }
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Lifted jumps to return sites
     */
    public static String escapeString(String var0) {
        var2_1 = var0;
        if (TextUtils.isEmpty((CharSequence)var0) != false) return var2_1;
        var4_2 = JsonUtils.zzaaf.matcher(var0);
        var2_1 = null;
        block9 : while (var4_2.find() != false) {
            block14 : {
                block11 : {
                    block12 : {
                        block13 : {
                            var3_5 = var2_1;
                            if (var2_1 == null) {
                                var3_6 = new StringBuffer();
                            }
                            if ((var1_3 = var4_2.group().charAt(0)) == '\"') break block11;
                            if (var1_3 == '/') break block12;
                            if (var1_3 == '\\') break block13;
                            switch (var1_3) {
                                default: {
                                    switch (var1_3) {
                                        default: {
                                            var2_1 = var3_4;
                                            continue block9;
                                        }
                                        case '\r': {
                                            var2_1 = "\\\\r";
                                            ** break;
                                        }
                                        case '\f': 
                                    }
                                    var2_1 = "\\\\f";
                                    ** break;
lbl24: // 2 sources:
                                    break block14;
                                }
                                case '\n': {
                                    var2_1 = "\\\\n";
                                    break block14;
                                }
                                case '\t': {
                                    var2_1 = "\\\\t";
                                    break block14;
                                }
                                case '\b': 
                            }
                            var2_1 = "\\\\b";
                            break block14;
                        }
                        var2_1 = "\\\\\\\\";
                        break block14;
                    }
                    var2_1 = "\\\\/";
                    break block14;
                }
                var2_1 = "\\\\\\\"";
            }
            var4_2.appendReplacement((StringBuffer)var3_4, var2_1);
            var2_1 = var3_4;
        }
        return var0;
    }

    public static String unescapeString(String string2) {
        CharSequence charSequence = string2;
        if (!TextUtils.isEmpty((CharSequence)string2)) {
            String string3 = UnicodeUtils.unescape(string2);
            Matcher matcher = zzaae.matcher(string3);
            string2 = null;
            while (matcher.find()) {
                char c;
                charSequence = string2;
                if (string2 == null) {
                    charSequence = new StringBuffer();
                }
                if ((c = matcher.group().charAt(1)) != '\"') {
                    if (c != '/') {
                        if (c != '\\') {
                            if (c != 'b') {
                                if (c != 'f') {
                                    if (c != 'n') {
                                        if (c != 'r') {
                                            if (c != 't') {
                                                throw new IllegalStateException("Found an escaped character that should never be.");
                                            }
                                            string2 = "\t";
                                        } else {
                                            string2 = "\r";
                                        }
                                    } else {
                                        string2 = "\n";
                                    }
                                } else {
                                    string2 = "\f";
                                }
                            } else {
                                string2 = "\b";
                            }
                        } else {
                            string2 = "\\\\";
                        }
                    } else {
                        string2 = "/";
                    }
                } else {
                    string2 = "\"";
                }
                matcher.appendReplacement((StringBuffer)charSequence, string2);
                string2 = charSequence;
            }
            if (string2 == null) {
                return string3;
            }
            matcher.appendTail((StringBuffer)((Object)string2));
            charSequence = string2.toString();
        }
        return charSequence;
    }
}

