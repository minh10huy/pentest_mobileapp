/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.app.PendingIntent
 *  android.content.Context
 *  android.os.Bundle
 *  android.os.Looper
 *  javax.annotation.concurrent.GuardedBy
 */
package com.google.android.gms.common.api.internal;

import android.app.PendingIntent;
import android.content.Context;
import android.os.Bundle;
import android.os.Looper;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.v4.util.ArrayMap;
import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.GoogleApiAvailabilityLight;
import com.google.android.gms.common.api.Api;
import com.google.android.gms.common.api.GoogleApi;
import com.google.android.gms.common.api.Result;
import com.google.android.gms.common.api.Scope;
import com.google.android.gms.common.api.Status;
import com.google.android.gms.common.api.internal.BaseImplementation;
import com.google.android.gms.common.api.internal.BasePendingResult;
import com.google.android.gms.common.api.internal.GoogleApiManager;
import com.google.android.gms.common.api.internal.SignInConnectionListener;
import com.google.android.gms.common.api.internal.zzav;
import com.google.android.gms.common.api.internal.zzbp;
import com.google.android.gms.common.api.internal.zzck;
import com.google.android.gms.common.api.internal.zzcn;
import com.google.android.gms.common.api.internal.zzh;
import com.google.android.gms.common.api.internal.zzp;
import com.google.android.gms.common.api.internal.zzv;
import com.google.android.gms.common.api.internal.zzx;
import com.google.android.gms.common.api.internal.zzy;
import com.google.android.gms.common.api.internal.zzz;
import com.google.android.gms.common.internal.ClientSettings;
import com.google.android.gms.common.util.concurrent.HandlerExecutor;
import com.google.android.gms.signin.SignInClient;
import com.google.android.gms.signin.SignInOptions;
import com.google.android.gms.tasks.OnCompleteListener;
import com.google.android.gms.tasks.Task;
import java.io.FileDescriptor;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Queue;
import java.util.Set;
import java.util.concurrent.Executor;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.Lock;
import javax.annotation.concurrent.GuardedBy;

public final class zzw
implements zzbp {
    private final Looper zzcn;
    private final GoogleApiManager zzcq;
    private final Lock zzga;
    private final ClientSettings zzgf;
    private final Map<Api.AnyClientKey<?>, zzv<?>> zzgg = new HashMap();
    private final Map<Api.AnyClientKey<?>, zzv<?>> zzgh = new HashMap();
    private final Map<Api<?>, Boolean> zzgi;
    private final zzav zzgj;
    private final GoogleApiAvailabilityLight zzgk;
    private final Condition zzgl;
    private final boolean zzgm;
    private final boolean zzgn;
    private final Queue<BaseImplementation.ApiMethodImpl<?, ?>> zzgo = new LinkedList();
    @GuardedBy(value="mLock")
    private boolean zzgp;
    @GuardedBy(value="mLock")
    private Map<zzh<?>, ConnectionResult> zzgq;
    @GuardedBy(value="mLock")
    private Map<zzh<?>, ConnectionResult> zzgr;
    @GuardedBy(value="mLock")
    private zzz zzgs;
    @GuardedBy(value="mLock")
    private ConnectionResult zzgt;

    public zzw(Context context, Lock object, Looper looper, GoogleApiAvailabilityLight hashMap, Map<Api.AnyClientKey<?>, Api.Client> object2, ClientSettings clientSettings, Map<Api<?>, Boolean> object32, Api.AbstractClientBuilder<? extends SignInClient, SignInOptions> abstractClientBuilder, ArrayList<zzp> object4, zzav zzv2, boolean bl) {
        int n;
        Object object3;
        boolean bl2;
        Object object5;
        this.zzga = object;
        this.zzcn = looper;
        this.zzgl = object.newCondition();
        this.zzgk = hashMap;
        this.zzgj = object5;
        this.zzgi = object32;
        this.zzgf = clientSettings;
        this.zzgm = bl2;
        object = new HashMap();
        for (Api api : object32.keySet()) {
            object.put(api.getClientKey(), api);
        }
        hashMap = new HashMap();
        ArrayList arrayList = (ArrayList)object3;
        int n2 = arrayList.size();
        for (n = 0; n < n2; ++n) {
            object3 = arrayList.get(n);
            object3 = (zzp)object3;
            hashMap.put(object3.mApi, object3);
        }
        object2 = object2.entrySet().iterator();
        int n3 = 0;
        n2 = 1;
        n = 0;
        while (object2.hasNext()) {
            void var8_13;
            int n4;
            Map.Entry entry = object2.next();
            object5 = (Api)object.get(entry.getKey());
            object3 = (Api.Client)entry.getValue();
            if (object3.requiresGooglePlayServices()) {
                n3 = this.zzgi.get(object5) == false ? 1 : n;
                n = 1;
            } else {
                n2 = n3;
                n3 = n;
                n4 = 0;
                n = n2;
                n2 = n4;
            }
            object5 = new zzv(context, object5, looper, (Api.Client)object3, (zzp)hashMap.get(object5), clientSettings, (Api.AbstractClientBuilder<? extends SignInClient, SignInOptions>)((Api.AbstractClientBuilder<SignInClient, SignInOptions>)((Api.AbstractClientBuilder<? extends SignInClient, SignInOptions>)var8_13)));
            this.zzgg.put((Api.AnyClientKey)entry.getKey(), (zzv<?>)object5);
            if (object3.requiresSignIn()) {
                this.zzgh.put((Api.AnyClientKey)entry.getKey(), (zzv<?>)object5);
            }
            n4 = n3;
            n3 = n;
            n = n4;
        }
        bl2 = n3 != 0 && n2 == 0 && n == 0;
        this.zzgn = bl2;
        this.zzcq = GoogleApiManager.zzbf();
    }

    @Nullable
    private final ConnectionResult zza(@NonNull Api.AnyClientKey<?> object) {
        block4 : {
            this.zzga.lock();
            object = this.zzgg.get(object);
            if (this.zzgq == null || object == null) break block4;
            object = this.zzgq.get(object.zzm());
            return object;
        }
        this.zzga.unlock();
        return null;
        finally {
            this.zzga.unlock();
        }
    }

    static /* synthetic */ ConnectionResult zza(zzw zzw2, ConnectionResult connectionResult) {
        zzw2.zzgt = connectionResult;
        return connectionResult;
    }

    static /* synthetic */ Map zza(zzw zzw2, Map map) {
        zzw2.zzgq = map;
        return map;
    }

    static /* synthetic */ Lock zza(zzw zzw2) {
        return zzw2.zzga;
    }

    private final boolean zza(zzv<?> zzv2, ConnectionResult connectionResult) {
        if (!connectionResult.isSuccess() && !connectionResult.hasResolution() && this.zzgi.get(zzv2.getApi()).booleanValue() && zzv2.zzae().requiresGooglePlayServices() && this.zzgk.isUserResolvableError(connectionResult.getErrorCode())) {
            return true;
        }
        return false;
    }

    static /* synthetic */ boolean zza(zzw zzw2, zzv zzv2, ConnectionResult connectionResult) {
        return zzw2.zza(zzv2, connectionResult);
    }

    static /* synthetic */ boolean zza(zzw zzw2, boolean bl) {
        zzw2.zzgp = false;
        return false;
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    private final boolean zzaf() {
        this.zzga.lock();
        try {
            if (this.zzgp && this.zzgm) {
                boolean bl;
                ConnectionResult connectionResult;
                Iterator<Api.AnyClientKey<?>> iterator = this.zzgh.keySet().iterator();
                do {
                    if (iterator.hasNext()) continue;
                    this.zzga.unlock();
                    return true;
                } while ((connectionResult = this.zza(iterator.next())) != null && (bl = connectionResult.isSuccess()));
            }
            this.zzga.unlock();
            return false;
        }
        catch (Throwable throwable) {
            this.zzga.unlock();
            throw throwable;
        }
    }

    @GuardedBy(value="mLock")
    private final void zzag() {
        if (this.zzgf == null) {
            this.zzgj.zzim = Collections.emptySet();
            return;
        }
        HashSet<Scope> hashSet = new HashSet<Scope>(this.zzgf.getRequiredScopes());
        Map<Api<?>, ClientSettings.OptionalApiSettings> map = this.zzgf.getOptionalApiSettings();
        for (Api<?> api : map.keySet()) {
            ConnectionResult connectionResult = this.getConnectionResult(api);
            if (connectionResult == null || !connectionResult.isSuccess()) continue;
            hashSet.addAll(map.get(api).mScopes);
        }
        this.zzgj.zzim = hashSet;
    }

    @GuardedBy(value="mLock")
    private final void zzah() {
        while (!this.zzgo.isEmpty()) {
            this.execute(this.zzgo.remove());
        }
        this.zzgj.zzb((Bundle)null);
    }

    @Nullable
    @GuardedBy(value="mLock")
    private final ConnectionResult zzai() {
        Iterator<zzv<?>> iterator = this.zzgg.values().iterator();
        Object object = null;
        Object object2 = null;
        int n = 0;
        int n2 = 0;
        while (iterator.hasNext()) {
            int n3;
            Object object3 = iterator.next();
            Api<?> api = object3.getApi();
            object3 = object3.zzm();
            if ((object3 = this.zzgq.get(object3)).isSuccess() || this.zzgi.get(api).booleanValue() && !object3.hasResolution() && !this.zzgk.isUserResolvableError(object3.getErrorCode())) continue;
            if (object3.getErrorCode() == 4 && this.zzgm) {
                n3 = api.zzj().getPriority();
                if (object2 != null && n2 <= n3) continue;
                object2 = object3;
                n2 = n3;
                continue;
            }
            n3 = api.zzj().getPriority();
            if (object != null && n <= n3) continue;
            object = object3;
            n = n3;
        }
        if (object != null && object2 != null && n > n2) {
            return object2;
        }
        return object;
    }

    static /* synthetic */ Map zzb(zzw zzw2, Map map) {
        zzw2.zzgr = map;
        return map;
    }

    private final <T extends BaseImplementation.ApiMethodImpl<? extends Result, ? extends Api.AnyClient>> boolean zzb(@NonNull T t) {
        Api.AnyClientKey anyClientKey = t.getClientKey();
        ConnectionResult connectionResult = this.zza(anyClientKey);
        if (connectionResult != null && connectionResult.getErrorCode() == 4) {
            t.setFailedResult(new Status(4, null, this.zzcq.zza(this.zzgg.get(anyClientKey).zzm(), System.identityHashCode(this.zzgj))));
            return true;
        }
        return false;
    }

    static /* synthetic */ boolean zzb(zzw zzw2) {
        return zzw2.zzgp;
    }

    static /* synthetic */ Map zzc(zzw zzw2) {
        return zzw2.zzgg;
    }

    static /* synthetic */ Map zzd(zzw zzw2) {
        return zzw2.zzgq;
    }

    static /* synthetic */ boolean zze(zzw zzw2) {
        return zzw2.zzgn;
    }

    static /* synthetic */ ConnectionResult zzf(zzw zzw2) {
        return zzw2.zzai();
    }

    static /* synthetic */ Map zzg(zzw zzw2) {
        return zzw2.zzgr;
    }

    static /* synthetic */ ConnectionResult zzh(zzw zzw2) {
        return zzw2.zzgt;
    }

    static /* synthetic */ void zzi(zzw zzw2) {
        zzw2.zzag();
    }

    static /* synthetic */ void zzj(zzw zzw2) {
        zzw2.zzah();
    }

    static /* synthetic */ zzav zzk(zzw zzw2) {
        return zzw2.zzgj;
    }

    static /* synthetic */ Condition zzl(zzw zzw2) {
        return zzw2.zzgl;
    }

    static /* synthetic */ Map zzm(zzw zzw2) {
        return zzw2.zzgh;
    }

    /*
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    @GuardedBy(value="mLock")
    @Override
    public final ConnectionResult blockingConnect() {
        this.connect();
        while (this.isConnecting()) {
            this.zzgl.await();
        }
        if (this.isConnected()) {
            return ConnectionResult.RESULT_SUCCESS;
        }
        if (this.zzgt == null) return new ConnectionResult(13, null);
        return this.zzgt;
        catch (InterruptedException interruptedException) {}
        Thread.currentThread().interrupt();
        return new ConnectionResult(15, null);
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    @GuardedBy(value="mLock")
    @Override
    public final ConnectionResult blockingConnect(long var1_1, TimeUnit var3_2) {
        this.connect();
        var1_1 = var3_2.toNanos(var1_1);
        while (this.isConnecting()) {
            if (var1_1 > 0L) ** GOTO lbl8
            this.disconnect();
            return new ConnectionResult(14, null);
lbl8: // 1 sources:
            var1_1 = this.zzgl.awaitNanos(var1_1);
        }
        if (this.isConnected()) {
            return ConnectionResult.RESULT_SUCCESS;
        }
        if (this.zzgt == null) return new ConnectionResult(13, null);
        return this.zzgt;
        catch (InterruptedException var3_3) {}
        Thread.currentThread().interrupt();
        return new ConnectionResult(15, null);
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    @Override
    public final void connect() {
        block5 : {
            this.zzga.lock();
            boolean bl = this.zzgp;
            if (!bl) break block5;
            do {
                return;
                break;
            } while (true);
        }
        try {
            this.zzgp = true;
            this.zzgq = null;
            this.zzgr = null;
            this.zzgs = null;
            this.zzgt = null;
            this.zzcq.zzr();
            this.zzcq.zza(this.zzgg.values()).addOnCompleteListener(new HandlerExecutor(this.zzcn), new zzy(this, null));
            return;
        }
        finally {
            this.zzga.unlock();
        }
    }

    @Override
    public final void disconnect() {
        this.zzga.lock();
        try {
            this.zzgp = false;
            this.zzgq = null;
            this.zzgr = null;
            if (this.zzgs != null) {
                this.zzgs.cancel();
                this.zzgs = null;
            }
            this.zzgt = null;
            while (!this.zzgo.isEmpty()) {
                BaseImplementation.ApiMethodImpl<?, ?> apiMethodImpl = this.zzgo.remove();
                apiMethodImpl.zza(null);
                apiMethodImpl.cancel();
            }
            this.zzgl.signalAll();
            return;
        }
        finally {
            this.zzga.unlock();
        }
    }

    @Override
    public final void dump(String string2, FileDescriptor fileDescriptor, PrintWriter printWriter, String[] arrstring) {
    }

    @Override
    public final <A extends Api.AnyClient, R extends Result, T extends BaseImplementation.ApiMethodImpl<R, A>> T enqueue(@NonNull T t) {
        if (this.zzgm && this.zzb(t)) {
            return t;
        }
        if (!this.isConnected()) {
            this.zzgo.add((BaseImplementation.ApiMethodImpl<?, ?>)t);
            return t;
        }
        this.zzgj.zzir.zzb((BasePendingResult<? extends Result>)t);
        return this.zzgg.get(t.getClientKey()).doRead(t);
    }

    @Override
    public final <A extends Api.AnyClient, T extends BaseImplementation.ApiMethodImpl<? extends Result, A>> T execute(@NonNull T t) {
        Api.AnyClientKey anyClientKey = t.getClientKey();
        if (this.zzgm && this.zzb(t)) {
            return t;
        }
        this.zzgj.zzir.zzb((BasePendingResult<? extends Result>)t);
        return this.zzgg.get(anyClientKey).doWrite(t);
    }

    @Nullable
    @Override
    public final ConnectionResult getConnectionResult(@NonNull Api<?> api) {
        return this.zza(api.getClientKey());
    }

    @Override
    public final boolean isConnected() {
        this.zzga.lock();
        try {
            ConnectionResult connectionResult;
            boolean bl = this.zzgq != null && (connectionResult = this.zzgt) == null;
            this.zzga.unlock();
            return bl;
        }
        catch (Throwable throwable) {
            this.zzga.unlock();
            throw throwable;
        }
    }

    @Override
    public final boolean isConnecting() {
        this.zzga.lock();
        try {
            boolean bl;
            bl = this.zzgq == null && (bl = this.zzgp);
            this.zzga.unlock();
            return bl;
        }
        catch (Throwable throwable) {
            this.zzga.unlock();
            throw throwable;
        }
    }

    @Override
    public final boolean maybeSignIn(SignInConnectionListener signInConnectionListener) {
        this.zzga.lock();
        try {
            if (this.zzgp && !this.zzaf()) {
                this.zzcq.zzr();
                this.zzgs = new zzz(this, signInConnectionListener);
                this.zzcq.zza(this.zzgh.values()).addOnCompleteListener(new HandlerExecutor(this.zzcn), this.zzgs);
                return true;
            }
            return false;
        }
        finally {
            this.zzga.unlock();
        }
    }

    @Override
    public final void maybeSignOut() {
        this.zzga.lock();
        try {
            this.zzcq.maybeSignOut();
            if (this.zzgs != null) {
                this.zzgs.cancel();
                this.zzgs = null;
            }
            if (this.zzgr == null) {
                this.zzgr = new ArrayMap(this.zzgh.size());
            }
            ConnectionResult connectionResult = new ConnectionResult(4);
            for (zzv<?> zzv2 : this.zzgh.values()) {
                this.zzgr.put(zzv2.zzm(), connectionResult);
            }
            if (this.zzgq != null) {
                this.zzgq.putAll(this.zzgr);
            }
            return;
        }
        finally {
            this.zzga.unlock();
        }
    }

    @Override
    public final void zzz() {
    }
}

