/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.app.ActivityManager
 *  android.content.ComponentCallbacks
 *  android.content.ComponentCallbacks2
 *  android.content.Context
 *  android.content.Intent
 *  android.content.pm.ApplicationInfo
 *  android.content.res.Configuration
 *  android.graphics.Bitmap
 *  android.graphics.BitmapFactory
 *  android.graphics.drawable.Drawable
 *  android.net.Uri
 *  android.os.Bundle
 *  android.os.Handler
 *  android.os.Looper
 *  android.os.ParcelFileDescriptor
 *  android.os.Parcelable
 *  android.os.ResultReceiver
 *  android.os.SystemClock
 *  android.util.Log
 *  android.widget.ImageView
 */
package com.google.android.gms.common.images;

import android.app.ActivityManager;
import android.content.ComponentCallbacks;
import android.content.ComponentCallbacks2;
import android.content.Context;
import android.content.Intent;
import android.content.pm.ApplicationInfo;
import android.content.res.Configuration;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.drawable.Drawable;
import android.net.Uri;
import android.os.Bundle;
import android.os.Handler;
import android.os.Looper;
import android.os.ParcelFileDescriptor;
import android.os.Parcelable;
import android.os.ResultReceiver;
import android.os.SystemClock;
import android.support.v4.util.LruCache;
import android.util.Log;
import android.widget.ImageView;
import com.google.android.gms.common.annotation.KeepName;
import com.google.android.gms.common.images.ImageRequest;
import com.google.android.gms.common.images.internal.PostProcessedResourceCache;
import com.google.android.gms.common.internal.Asserts;
import java.io.FileDescriptor;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public final class ImageManager {
    public static final int PRIORITY_HIGH = 3;
    public static final int PRIORITY_LOW = 1;
    public static final int PRIORITY_MEDIUM = 2;
    private static final Object zzov = new Object();
    private static HashSet<Uri> zzow = new HashSet();
    private static ImageManager zzox;
    private static ImageManager zzoy;
    private final Context mContext;
    private final Handler mHandler;
    private final ExecutorService zzoz;
    private final zza zzpa;
    private final PostProcessedResourceCache zzpb;
    private final Map<ImageRequest, ImageReceiver> zzpc;
    private final Map<Uri, ImageReceiver> zzpd;
    private final Map<Uri, Long> zzpe;

    private ImageManager(Context context, boolean bl) {
        this.mContext = context.getApplicationContext();
        this.mHandler = new Handler(Looper.getMainLooper());
        this.zzoz = Executors.newFixedThreadPool(4);
        if (bl) {
            this.zzpa = new zza(this.mContext);
            this.mContext.registerComponentCallbacks((ComponentCallbacks)new zzd(this.zzpa));
        } else {
            this.zzpa = null;
        }
        this.zzpb = new PostProcessedResourceCache();
        this.zzpc = new HashMap<ImageRequest, ImageReceiver>();
        this.zzpd = new HashMap<Uri, ImageReceiver>();
        this.zzpe = new HashMap<Uri, Long>();
    }

    public static ImageManager create(Context context) {
        return ImageManager.create(context, false);
    }

    public static ImageManager create(Context context, boolean bl) {
        if (bl) {
            if (zzoy == null) {
                zzoy = new ImageManager(context, true);
            }
            return zzoy;
        }
        if (zzox == null) {
            zzox = new ImageManager(context, false);
        }
        return zzox;
    }

    private final Bitmap zza(ImageRequest.zza zza2) {
        if (this.zzpa == null) {
            return null;
        }
        return (Bitmap)this.zzpa.get(zza2);
    }

    public final void loadImage(ImageView imageView, int n) {
        this.loadImage(new ImageRequest.ImageViewImageRequest(imageView, n));
    }

    public final void loadImage(ImageView imageView, Uri uri) {
        this.loadImage(new ImageRequest.ImageViewImageRequest(imageView, uri));
    }

    public final void loadImage(ImageView object, Uri uri, int n) {
        object = new ImageRequest.ImageViewImageRequest((ImageView)object, uri);
        object.setNoDataPlaceholder(n);
        this.loadImage((ImageRequest)object);
    }

    public final void loadImage(OnImageLoadedListener onImageLoadedListener, Uri uri) {
        this.loadImage(new ImageRequest.ListenerImageRequest(onImageLoadedListener, uri));
    }

    public final void loadImage(OnImageLoadedListener object, Uri uri, int n) {
        object = new ImageRequest.ListenerImageRequest((OnImageLoadedListener)object, uri);
        object.setNoDataPlaceholder(n);
        this.loadImage((ImageRequest)object);
    }

    public final void loadImage(ImageRequest imageRequest) {
        Asserts.checkMainThread("ImageManager.loadImage() must be called in the main thread");
        new zzc(imageRequest).run();
    }

    @KeepName
    private final class ImageReceiver
    extends ResultReceiver {
        private final Uri mUri;
        private final ArrayList<ImageRequest> zzpf;

        ImageReceiver(Uri uri) {
            super(new Handler(Looper.getMainLooper()));
            this.mUri = uri;
            this.zzpf = new ArrayList();
        }

        public final void onReceiveResult(int n, Bundle bundle) {
            bundle = (ParcelFileDescriptor)bundle.getParcelable("com.google.android.gms.extra.fileDescriptor");
            ImageManager.this.zzoz.execute(new zzb(this.mUri, (ParcelFileDescriptor)bundle));
        }

        public final void zza(ImageRequest imageRequest) {
            Asserts.checkMainThread("ImageReceiver.addImageRequest() must be called in the main thread");
            this.zzpf.add(imageRequest);
        }

        public final void zzb(ImageRequest imageRequest) {
            Asserts.checkMainThread("ImageReceiver.removeImageRequest() must be called in the main thread");
            this.zzpf.remove(imageRequest);
        }

        public final void zzco() {
            Intent intent = new Intent("com.google.android.gms.common.images.LOAD_IMAGE");
            intent.putExtra("com.google.android.gms.extras.uri", (Parcelable)this.mUri);
            intent.putExtra("com.google.android.gms.extras.resultReceiver", (Parcelable)this);
            intent.putExtra("com.google.android.gms.extras.priority", 3);
            ImageManager.this.mContext.sendBroadcast(intent);
        }
    }

    public static interface OnImageLoadedListener {
        public void onImageLoaded(Uri var1, Drawable var2, boolean var3);
    }

    private static final class zza
    extends LruCache<ImageRequest.zza, Bitmap> {
        public zza(Context context) {
            ActivityManager activityManager = (ActivityManager)context.getSystemService("activity");
            int n = (context.getApplicationInfo().flags & 1048576) != 0 ? 1 : 0;
            n = n != 0 ? activityManager.getLargeMemoryClass() : activityManager.getMemoryClass();
            super((int)((float)(n * 1048576) * 0.33f));
        }

        @Override
        protected final /* synthetic */ void entryRemoved(boolean bl, Object object, Object object2, Object object3) {
            super.entryRemoved(bl, (ImageRequest.zza)object, (Bitmap)object2, (Bitmap)object3);
        }

        @Override
        protected final /* synthetic */ int sizeOf(Object object, Object object2) {
            object = (Bitmap)object2;
            return object.getHeight() * object.getRowBytes();
        }
    }

    private final class zzb
    implements Runnable {
        private final Uri mUri;
        private final ParcelFileDescriptor zzph;

        public zzb(Uri uri, ParcelFileDescriptor parcelFileDescriptor) {
            this.mUri = uri;
            this.zzph = parcelFileDescriptor;
        }

        /*
         * Enabled aggressive block sorting
         * Enabled unnecessary exception pruning
         * Enabled aggressive exception aggregation
         */
        @Override
        public final void run() {
            Asserts.checkNotMainThread("LoadBitmapFromDiskRunnable can't be executed in the main thread");
            Object object = this.zzph;
            boolean bl = false;
            ParcelFileDescriptor parcelFileDescriptor = null;
            if (object != null) {
                try {
                    object = BitmapFactory.decodeFileDescriptor((FileDescriptor)this.zzph.getFileDescriptor());
                    parcelFileDescriptor = object;
                }
                catch (OutOfMemoryError outOfMemoryError) {
                    String string2 = String.valueOf((Object)this.mUri);
                    StringBuilder stringBuilder = new StringBuilder(String.valueOf(string2).length() + 34);
                    stringBuilder.append("OOM while loading bitmap for uri: ");
                    stringBuilder.append(string2);
                    Log.e((String)"ImageManager", (String)stringBuilder.toString(), (Throwable)outOfMemoryError);
                    bl = true;
                }
                try {
                    this.zzph.close();
                }
                catch (IOException iOException) {
                    Log.e((String)"ImageManager", (String)"closed failed", (Throwable)iOException);
                }
            } else {
                parcelFileDescriptor = null;
                bl = false;
            }
            object = new CountDownLatch(1);
            ImageManager.this.mHandler.post((Runnable)new zze(this.mUri, (Bitmap)parcelFileDescriptor, bl, (CountDownLatch)object));
            try {
                object.await();
                return;
            }
            catch (InterruptedException interruptedException) {}
            String string3 = String.valueOf((Object)this.mUri);
            object = new StringBuilder(String.valueOf(string3).length() + 32);
            object.append("Latch interrupted while posting ");
            object.append(string3);
            Log.w((String)"ImageManager", (String)object.toString());
        }
    }

    private final class zzc
    implements Runnable {
        private final ImageRequest zzpi;

        public zzc(ImageRequest imageRequest) {
            this.zzpi = imageRequest;
        }

        /*
         * Enabled aggressive block sorting
         * Enabled unnecessary exception pruning
         * Enabled aggressive exception aggregation
         */
        @Override
        public final void run() {
            Asserts.checkMainThread("LoadImageRunnable must be executed on the main thread");
            Object object = (ImageReceiver)((Object)ImageManager.this.zzpc.get(this.zzpi));
            if (object != null) {
                ImageManager.this.zzpc.remove(this.zzpi);
                object.zzb(this.zzpi);
            }
            ImageRequest.zza zza2 = this.zzpi.zzpk;
            if (zza2.uri == null) {
                this.zzpi.zza(ImageManager.this.mContext, ImageManager.this.zzpb, true);
                return;
            }
            object = ImageManager.this.zza(zza2);
            if (object != null) {
                this.zzpi.zza(ImageManager.this.mContext, (Bitmap)object, true);
                return;
            }
            object = (Long)ImageManager.this.zzpe.get((Object)zza2.uri);
            if (object != null) {
                if (SystemClock.elapsedRealtime() - object.longValue() < 3600000L) {
                    this.zzpi.zza(ImageManager.this.mContext, ImageManager.this.zzpb, true);
                    return;
                }
                ImageManager.this.zzpe.remove((Object)zza2.uri);
            }
            this.zzpi.zza(ImageManager.this.mContext, ImageManager.this.zzpb);
            Object object2 = (ImageReceiver)((Object)ImageManager.this.zzpd.get((Object)zza2.uri));
            object = object2;
            if (object2 == null) {
                object = new ImageReceiver(zza2.uri);
                ImageManager.this.zzpd.put(zza2.uri, object);
            }
            object.zza(this.zzpi);
            if (!(this.zzpi instanceof ImageRequest.ListenerImageRequest)) {
                ImageManager.this.zzpc.put(this.zzpi, object);
            }
            object2 = zzov;
            synchronized (object2) {
                if (!zzow.contains((Object)zza2.uri)) {
                    zzow.add(zza2.uri);
                    object.zzco();
                }
                return;
            }
        }
    }

    private static final class zzd
    implements ComponentCallbacks2 {
        private final zza zzpa;

        public zzd(zza zza2) {
            this.zzpa = zza2;
        }

        public final void onConfigurationChanged(Configuration configuration) {
        }

        public final void onLowMemory() {
            this.zzpa.evictAll();
        }

        public final void onTrimMemory(int n) {
            if (n >= 60) {
                this.zzpa.evictAll();
                return;
            }
            if (n >= 20) {
                this.zzpa.trimToSize(this.zzpa.size() / 2);
            }
        }
    }

    private final class zze
    implements Runnable {
        private final Bitmap mBitmap;
        private final Uri mUri;
        private final CountDownLatch zzfd;
        private boolean zzpj;

        public zze(Uri uri, Bitmap bitmap, boolean bl, CountDownLatch countDownLatch) {
            this.mUri = uri;
            this.mBitmap = bitmap;
            this.zzpj = bl;
            this.zzfd = countDownLatch;
        }

        /*
         * Enabled aggressive block sorting
         * Enabled unnecessary exception pruning
         * Enabled aggressive exception aggregation
         */
        @Override
        public final void run() {
            Object object;
            Asserts.checkMainThread("OnBitmapLoadedRunnable must be executed in the main thread");
            boolean bl = this.mBitmap != null;
            if (ImageManager.this.zzpa != null) {
                if (this.zzpj) {
                    ImageManager.this.zzpa.evictAll();
                    System.gc();
                    this.zzpj = false;
                    ImageManager.this.mHandler.post((Runnable)this);
                    return;
                }
                if (bl) {
                    ImageManager.this.zzpa.put(new ImageRequest.zza(this.mUri), this.mBitmap);
                }
            }
            if ((object = (ImageReceiver)((Object)ImageManager.this.zzpd.remove((Object)this.mUri))) != null) {
                object = ((ImageReceiver)((Object)object)).zzpf;
                int n = object.size();
                for (int i = 0; i < n; ++i) {
                    ImageRequest imageRequest = (ImageRequest)object.get(i);
                    if (bl) {
                        imageRequest.zza(ImageManager.this.mContext, this.mBitmap, false);
                    } else {
                        ImageManager.this.zzpe.put(this.mUri, SystemClock.elapsedRealtime());
                        imageRequest.zza(ImageManager.this.mContext, ImageManager.this.zzpb, false);
                    }
                    if (imageRequest instanceof ImageRequest.ListenerImageRequest) continue;
                    ImageManager.this.zzpc.remove(imageRequest);
                }
            }
            this.zzfd.countDown();
            object = zzov;
            synchronized (object) {
                zzow.remove((Object)this.mUri);
                return;
            }
        }
    }

}

