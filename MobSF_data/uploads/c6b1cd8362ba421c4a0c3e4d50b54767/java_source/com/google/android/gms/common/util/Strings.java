/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.os.Bundle
 *  android.text.TextUtils
 */
package com.google.android.gms.common.util;

import android.os.Bundle;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.text.TextUtils;
import com.google.android.gms.common.internal.Preconditions;
import com.google.android.gms.common.util.VisibleForTesting;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

@VisibleForTesting
public class Strings {
    private static final Pattern zzaak = Pattern.compile("\\$\\{(.*?)\\}");

    private Strings() {
    }

    public static String capitalize(@NonNull String string2) {
        char c;
        if (string2.length() == 0) {
            return string2;
        }
        char c2 = string2.charAt(0);
        if (c2 == (c = Character.toUpperCase(c2))) {
            return string2;
        }
        string2 = string2.substring(1);
        StringBuilder stringBuilder = new StringBuilder(String.valueOf(string2).length() + 1);
        stringBuilder.append(c);
        stringBuilder.append(string2);
        return stringBuilder.toString();
    }

    @Nullable
    public static String emptyToNull(@Nullable String string2) {
        String string3 = string2;
        if (TextUtils.isEmpty((CharSequence)string2)) {
            string3 = null;
        }
        return string3;
    }

    /*
     * Enabled aggressive block sorting
     */
    public static String format(@NonNull String string2, @NonNull Bundle bundle) {
        Matcher matcher = zzaak.matcher(string2);
        if (!matcher.find()) return string2;
        StringBuffer stringBuffer = new StringBuffer();
        do {
            Object object;
            string2 = (object = bundle.get(string2 = matcher.group(1))) != null ? object.toString() : (bundle.containsKey(string2) ? "null" : "");
            matcher.appendReplacement(stringBuffer, string2);
        } while (matcher.find());
        matcher.appendTail(stringBuffer);
        return stringBuffer.toString();
    }

    public static boolean isEmptyOrWhitespace(@Nullable String string2) {
        if (string2 != null && !string2.trim().isEmpty()) {
            return false;
        }
        return true;
    }

    public static String nullToEmpty(@Nullable String string2) {
        String string3 = string2;
        if (string2 == null) {
            string3 = "";
        }
        return string3;
    }

    public static String padEnd(@NonNull String string2, int n, char c) {
        Preconditions.checkNotNull(string2);
        if (string2.length() >= n) {
            return string2;
        }
        StringBuilder stringBuilder = new StringBuilder(n);
        stringBuilder.append(string2);
        for (int i = string2.length(); i < n; ++i) {
            stringBuilder.append(c);
        }
        return stringBuilder.toString();
    }
}

