/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.net.Uri
 */
package com.google.android.gms.internal.measurement;

import android.net.Uri;
import android.support.annotation.WorkerThread;
import com.google.android.gms.common.util.VisibleForTesting;
import com.google.android.gms.internal.measurement.zzee;
import com.google.android.gms.internal.measurement.zzwx;
import com.google.android.gms.internal.measurement.zzxh;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

@VisibleForTesting
public final class zzez {
    static zzee zzahs;
    static List<zza<Integer>> zzaht;
    static List<zza<Long>> zzahu;
    static List<zza<Boolean>> zzahv;
    static List<zza<String>> zzahw;
    static List<zza<Double>> zzahx;
    private static final zzxh zzahy;
    private static zza<Boolean> zzahz;
    private static zza<Boolean> zzaia;
    private static zza<Boolean> zzaib;
    public static zza<Boolean> zzaic;
    public static zza<Boolean> zzaid;
    public static zza<String> zzaie;
    public static zza<Long> zzaif;
    public static zza<Long> zzaig;
    public static zza<Long> zzaih;
    public static zza<String> zzaii;
    public static zza<String> zzaij;
    public static zza<Integer> zzaik;
    public static zza<Integer> zzail;
    public static zza<Integer> zzaim;
    public static zza<Integer> zzain;
    public static zza<Integer> zzaio;
    public static zza<Integer> zzaip;
    public static zza<Integer> zzaiq;
    public static zza<Integer> zzair;
    public static zza<Integer> zzais;
    public static zza<Integer> zzait;
    public static zza<String> zzaiu;
    public static zza<Long> zzaiv;
    public static zza<Long> zzaiw;
    public static zza<Long> zzaix;
    public static zza<Long> zzaiy;
    public static zza<Long> zzaiz;
    public static zza<Long> zzaja;
    public static zza<Long> zzajb;
    public static zza<Long> zzajc;
    public static zza<Long> zzajd;
    public static zza<Long> zzaje;
    public static zza<Long> zzajf;
    public static zza<Integer> zzajg;
    public static zza<Long> zzajh;
    public static zza<Integer> zzaji;
    public static zza<Integer> zzajj;
    public static zza<Long> zzajk;
    public static zza<Boolean> zzajl;
    public static zza<String> zzajm;
    public static zza<Long> zzajn;
    public static zza<Integer> zzajo;
    public static zza<Double> zzajp;
    public static zza<Boolean> zzajq;
    public static zza<Boolean> zzajr;
    public static zza<Boolean> zzajs;
    public static zza<Boolean> zzajt;
    public static zza<Boolean> zzaju;
    public static zza<Boolean> zzajv;
    public static zza<Boolean> zzajw;
    public static zza<Boolean> zzajx;
    public static zza<Boolean> zzajy;
    private static zza<Boolean> zzajz;

    static {
        zzaht = new ArrayList<zza<Integer>>();
        zzahu = new ArrayList<zza<Long>>();
        zzahv = new ArrayList<zza<Boolean>>();
        zzahw = new ArrayList<zza<String>>();
        zzahx = new ArrayList<zza<Double>>();
        String string2 = String.valueOf(Uri.encode((String)"com.google.android.gms.measurement"));
        string2 = string2.length() != 0 ? "content://com.google.android.gms.phenotype/".concat(string2) : new String("content://com.google.android.gms.phenotype/");
        zzahy = new zzxh(Uri.parse((String)string2));
        zzahz = zza.zzb("measurement.log_third_party_store_events_enabled", false, false);
        zzaia = zza.zzb("measurement.log_installs_enabled", false, false);
        zzaib = zza.zzb("measurement.log_upgrades_enabled", false, false);
        zzaic = zza.zzb("measurement.log_androidId_enabled", false, false);
        zzaid = zza.zzb("measurement.upload_dsid_enabled", false, false);
        zzaie = zza.zzd("measurement.log_tag", "FA", "FA-SVC");
        zzaif = zza.zzb("measurement.ad_id_cache_time", 10000L, 10000L);
        zzaig = zza.zzb("measurement.monitoring.sample_period_millis", 86400000L, 86400000L);
        zzaih = zza.zzb("measurement.config.cache_time", 86400000L, 3600000L);
        zzaii = zza.zzd("measurement.config.url_scheme", "https", "https");
        zzaij = zza.zzd("measurement.config.url_authority", "app-measurement.com", "app-measurement.com");
        zzaik = zza.zzc("measurement.upload.max_bundles", 100, 100);
        zzail = zza.zzc("measurement.upload.max_batch_size", 65536, 65536);
        zzaim = zza.zzc("measurement.upload.max_bundle_size", 65536, 65536);
        zzain = zza.zzc("measurement.upload.max_events_per_bundle", 1000, 1000);
        zzaio = zza.zzc("measurement.upload.max_events_per_day", 100000, 100000);
        zzaip = zza.zzc("measurement.upload.max_error_events_per_day", 1000, 1000);
        zzaiq = zza.zzc("measurement.upload.max_public_events_per_day", 50000, 50000);
        zzair = zza.zzc("measurement.upload.max_conversions_per_day", 500, 500);
        zzais = zza.zzc("measurement.upload.max_realtime_events_per_day", 10, 10);
        zzait = zza.zzc("measurement.store.max_stored_events_per_app", 100000, 100000);
        zzaiu = zza.zzd("measurement.upload.url", "https://app-measurement.com/a", "https://app-measurement.com/a");
        zzaiv = zza.zzb("measurement.upload.backoff_period", 43200000L, 43200000L);
        zzaiw = zza.zzb("measurement.upload.window_interval", 3600000L, 3600000L);
        zzaix = zza.zzb("measurement.upload.interval", 3600000L, 3600000L);
        zzaiy = zza.zzb("measurement.upload.realtime_upload_interval", 10000L, 10000L);
        zzaiz = zza.zzb("measurement.upload.debug_upload_interval", 1000L, 1000L);
        zzaja = zza.zzb("measurement.upload.minimum_delay", 500L, 500L);
        zzajb = zza.zzb("measurement.alarm_manager.minimum_interval", 60000L, 60000L);
        zzajc = zza.zzb("measurement.upload.stale_data_deletion_interval", 86400000L, 86400000L);
        zzajd = zza.zzb("measurement.upload.refresh_blacklisted_config_interval", 604800000L, 604800000L);
        zzaje = zza.zzb("measurement.upload.initial_upload_delay_time", 15000L, 15000L);
        zzajf = zza.zzb("measurement.upload.retry_time", 1800000L, 1800000L);
        zzajg = zza.zzc("measurement.upload.retry_count", 6, 6);
        zzajh = zza.zzb("measurement.upload.max_queue_time", 2419200000L, 2419200000L);
        zzaji = zza.zzc("measurement.lifetimevalue.max_currency_tracked", 4, 4);
        zzajj = zza.zzc("measurement.audience.filter_result_max_count", 200, 200);
        zzajk = zza.zzb("measurement.service_client.idle_disconnect_millis", 5000L, 5000L);
        zzajl = zza.zzb("measurement.test.boolean_flag", false, false);
        zzajm = zza.zzd("measurement.test.string_flag", "---", "---");
        zzajn = zza.zzb("measurement.test.long_flag", -1L, -1L);
        zzajo = zza.zzc("measurement.test.int_flag", -2, -2);
        zzajp = zza.zza("measurement.test.double_flag", -3.0, -3.0);
        zzajq = zza.zzb("measurement.lifetimevalue.user_engagement_tracking_enabled", false, false);
        zzajr = zza.zzb("measurement.audience.complex_param_evaluation", false, false);
        zzajs = zza.zzb("measurement.validation.internal_limits_internal_event_params", false, false);
        zzajt = zza.zzb("measurement.quality.unsuccessful_update_retry_counter", false, false);
        zzaju = zza.zzb("measurement.iid.disable_on_collection_disabled", true, true);
        zzajv = zza.zzb("measurement.app_launch.call_only_when_enabled", true, true);
        zzajw = zza.zzb("measurement.run_on_worker_inline", true, false);
        zzajx = zza.zzb("measurement.audience.dynamic_filters", false, false);
        zzajy = zza.zzb("measurement.reset_analytics.persist_time", false, false);
        zzajz = zza.zzb("measurement.validation.value_and_currency_params", false, false);
    }

    static void zza(zzee zzee2) {
        zzahs = zzee2;
        zza.zzm();
    }

    @VisibleForTesting
    public static final class zza<V> {
        private final V zzaaa;
        private zzwx<V> zzaka;
        private final V zzakb;
        private volatile V zzakc;
        private final String zzny;

        private zza(String string2, V v, V v2) {
            this.zzny = string2;
            this.zzaaa = v;
            this.zzakb = v2;
        }

        static zza<Double> zza(String object, double d, double d2) {
            object = new zza<Double>((String)object, -3.0, -3.0);
            zzez.zzahx.add((zza<Double>)object);
            return object;
        }

        static zza<Long> zzb(String object, long l, long l2) {
            object = new zza<Long>((String)object, l, l2);
            zzez.zzahu.add((zza<Long>)object);
            return object;
        }

        static zza<Boolean> zzb(String object, boolean bl, boolean bl2) {
            object = new zza<Boolean>((String)object, bl, bl2);
            zzez.zzahv.add((zza<Boolean>)object);
            return object;
        }

        static zza<Integer> zzc(String object, int n, int n2) {
            object = new zza<Integer>((String)object, n, n2);
            zzez.zzaht.add((zza<Integer>)object);
            return object;
        }

        static zza<String> zzd(String object, String string2, String string3) {
            object = new zza<String>((String)object, string2, string3);
            zzez.zzahw.add((zza<String>)object);
            return object;
        }

        /*
         * Enabled aggressive block sorting
         * Enabled unnecessary exception pruning
         * Enabled aggressive exception aggregation
         */
        @WorkerThread
        private static void zzip() {
            synchronized (zza.class) {
                if (zzee.isMainThread()) {
                    throw new IllegalStateException("Tried to refresh flag cache on main thread or on package side.");
                }
                Iterator<zza<Object>> iterator = zzez.zzahs;
                for (zza<Object> zza2 : zzez.zzahv) {
                    zza2.zzakc = zza2.zzaka.get();
                }
                for (zza<Object> zza2 : zzez.zzahw) {
                    zza2.zzakc = zza2.zzaka.get();
                }
                for (zza<Object> zza2 : zzez.zzahu) {
                    zza2.zzakc = zza2.zzaka.get();
                }
                for (zza<Object> zza2 : zzez.zzaht) {
                    zza2.zzakc = zza2.zzaka.get();
                }
                iterator = zzez.zzahx.iterator();
                while (iterator.hasNext()) {
                    zza<Object> zza2;
                    zza2 = iterator.next();
                    zza2.zzakc = zza2.zzaka.get();
                }
                return;
            }
        }

        /*
         * Enabled aggressive block sorting
         * Enabled unnecessary exception pruning
         * Enabled aggressive exception aggregation
         */
        private static void zzm() {
            synchronized (zza.class) {
                String string2;
                zzee zzee2;
                zzxh zzxh2;
                for (zza<Object> zza2 : zzez.zzahv) {
                    zzxh2 = zzahy;
                    string2 = zza2.zzny;
                    zzee2 = zzez.zzahs;
                    zza2.zzaka = zzxh2.zzf(string2, (Boolean)zza2.zzaaa);
                }
                for (zza<Object> zza2 : zzez.zzahw) {
                    zzxh2 = zzahy;
                    string2 = zza2.zzny;
                    zzee2 = zzez.zzahs;
                    zza2.zzaka = zzxh2.zzv(string2, (String)zza2.zzaaa);
                }
                for (zza<Object> zza2 : zzez.zzahu) {
                    zzxh2 = zzahy;
                    string2 = zza2.zzny;
                    zzee2 = zzez.zzahs;
                    zza2.zzaka = zzxh2.zze(string2, (Long)zza2.zzaaa);
                }
                for (zza<Object> zza2 : zzez.zzaht) {
                    zzxh2 = zzahy;
                    string2 = zza2.zzny;
                    zzee2 = zzez.zzahs;
                    zza2.zzaka = zzxh2.zzd(string2, (Integer)zza2.zzaaa);
                }
                Iterator<zza<Object>> iterator = zzez.zzahx.iterator();
                while (iterator.hasNext()) {
                    zza<Object> zza2;
                    zza2 = iterator.next();
                    zzxh2 = zzahy;
                    string2 = zza2.zzny;
                    zzee2 = zzez.zzahs;
                    zza2.zzaka = zzxh2.zzb(string2, (Double)zza2.zzaaa);
                }
                return;
            }
        }

        public final V get() {
            if (zzez.zzahs == null) {
                return this.zzaaa;
            }
            zzee zzee2 = zzez.zzahs;
            if (zzee.isMainThread()) {
                if (this.zzakc == null) {
                    return this.zzaaa;
                }
                return this.zzakc;
            }
            zza.zzip();
            return this.zzaka.get();
        }

        public final V get(V object) {
            if (object != null) {
                return object;
            }
            if (zzez.zzahs == null) {
                return this.zzaaa;
            }
            object = zzez.zzahs;
            if (zzee.isMainThread()) {
                if (this.zzakc == null) {
                    return this.zzaaa;
                }
                return this.zzakc;
            }
            zza.zzip();
            return this.zzaka.get();
        }

        public final String getKey() {
            return this.zzny;
        }
    }

}

