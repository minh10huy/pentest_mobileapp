/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.os.Bundle
 *  android.os.Handler
 *  android.os.Handler$Callback
 *  android.os.Looper
 *  android.os.Message
 *  android.util.Log
 */
package com.google.android.gms.common.internal;

import android.os.Bundle;
import android.os.Handler;
import android.os.Looper;
import android.os.Message;
import android.util.Log;
import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.api.GoogleApiClient;
import com.google.android.gms.common.internal.Preconditions;
import com.google.android.gms.common.util.VisibleForTesting;
import java.util.ArrayList;
import java.util.Collection;
import java.util.concurrent.atomic.AtomicInteger;

public final class GmsClientEventManager
implements Handler.Callback {
    private final Handler mHandler;
    private final Object mLock = new Object();
    private final GmsClientEventState zztf;
    private final ArrayList<GoogleApiClient.ConnectionCallbacks> zztg = new ArrayList();
    @VisibleForTesting
    private final ArrayList<GoogleApiClient.ConnectionCallbacks> zzth = new ArrayList();
    private final ArrayList<GoogleApiClient.OnConnectionFailedListener> zzti = new ArrayList();
    private volatile boolean zztj = false;
    private final AtomicInteger zztk = new AtomicInteger(0);
    private boolean zztl = false;

    public GmsClientEventManager(Looper looper, GmsClientEventState gmsClientEventState) {
        this.zztf = gmsClientEventState;
        this.mHandler = new Handler(looper, (Handler.Callback)this);
    }

    public final boolean areCallbacksEnabled() {
        return this.zztj;
    }

    public final void disableCallbacks() {
        this.zztj = false;
        this.zztk.incrementAndGet();
    }

    public final void enableCallbacks() {
        this.zztj = true;
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public final boolean handleMessage(Message object) {
        if (object.what != 1) {
            int n = object.what;
            object = new StringBuilder(45);
            object.append("Don't know how to handle message: ");
            object.append(n);
            Log.wtf((String)"GmsClientEvents", (String)object.toString(), (Throwable)new Exception());
            return false;
        }
        GoogleApiClient.ConnectionCallbacks connectionCallbacks = (GoogleApiClient.ConnectionCallbacks)object.obj;
        object = this.mLock;
        synchronized (object) {
            if (this.zztj && this.zztf.isConnected() && this.zztg.contains(connectionCallbacks)) {
                connectionCallbacks.onConnected(this.zztf.getConnectionHint());
            }
            return true;
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public final boolean isConnectionCallbacksRegistered(GoogleApiClient.ConnectionCallbacks connectionCallbacks) {
        Preconditions.checkNotNull(connectionCallbacks);
        Object object = this.mLock;
        synchronized (object) {
            return this.zztg.contains(connectionCallbacks);
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public final boolean isConnectionFailedListenerRegistered(GoogleApiClient.OnConnectionFailedListener onConnectionFailedListener) {
        Preconditions.checkNotNull(onConnectionFailedListener);
        Object object = this.mLock;
        synchronized (object) {
            return this.zzti.contains(onConnectionFailedListener);
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @VisibleForTesting
    public final void onConnectionFailure(ConnectionResult connectionResult) {
        Object object = Looper.myLooper();
        Object object2 = this.mHandler.getLooper();
        int n = 0;
        boolean bl = object == object2;
        Preconditions.checkState(bl, "onConnectionFailure must only be called on the Handler thread");
        this.mHandler.removeMessages(1);
        object = this.mLock;
        synchronized (object) {
            object2 = new ArrayList<GoogleApiClient.OnConnectionFailedListener>(this.zzti);
            int n2 = this.zztk.get();
            object2 = (ArrayList)object2;
            int n3 = object2.size();
            do {
                if (n >= n3) {
                    return;
                }
                Object object3 = object2.get(n);
                int n4 = n + 1;
                object3 = (GoogleApiClient.OnConnectionFailedListener)object3;
                if (!this.zztj || this.zztk.get() != n2) break;
                n = n4;
                if (!this.zzti.contains(object3)) continue;
                object3.onConnectionFailed(connectionResult);
                n = n4;
            } while (true);
            return;
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @VisibleForTesting
    protected final void onConnectionSuccess() {
        Object object = this.mLock;
        synchronized (object) {
            this.onConnectionSuccess(this.zztf.getConnectionHint());
            return;
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @VisibleForTesting
    public final void onConnectionSuccess(Bundle bundle) {
        Object object = Looper.myLooper();
        Object object2 = this.mHandler.getLooper();
        boolean bl = true;
        boolean bl2 = object == object2;
        Preconditions.checkState(bl2, "onConnectionSuccess must only be called on the Handler thread");
        object = this.mLock;
        synchronized (object) {
            Preconditions.checkState(this.zztl ^ true);
            this.mHandler.removeMessages(1);
            this.zztl = true;
            bl2 = this.zzth.size() == 0 ? bl : false;
            Preconditions.checkState(bl2);
            object2 = new ArrayList<GoogleApiClient.ConnectionCallbacks>(this.zztg);
            int n = this.zztk.get();
            object2 = (ArrayList)object2;
            int n2 = object2.size();
            int n3 = 0;
            while (n3 < n2) {
                Object object3 = object2.get(n3);
                int n4 = n3 + 1;
                object3 = (GoogleApiClient.ConnectionCallbacks)object3;
                if (!this.zztj || !this.zztf.isConnected() || this.zztk.get() != n) break;
                n3 = n4;
                if (this.zzth.contains(object3)) continue;
                object3.onConnected(bundle);
                n3 = n4;
            }
            this.zzth.clear();
            this.zztl = false;
            return;
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @VisibleForTesting
    public final void onUnintentionalDisconnection(int n) {
        boolean bl = Looper.myLooper() == this.mHandler.getLooper();
        Preconditions.checkState(bl, "onUnintentionalDisconnection must only be called on the Handler thread");
        this.mHandler.removeMessages(1);
        Object object = this.mLock;
        synchronized (object) {
            this.zztl = true;
            ArrayList<GoogleApiClient.ConnectionCallbacks> arrayList = new ArrayList<GoogleApiClient.ConnectionCallbacks>(this.zztg);
            int n2 = this.zztk.get();
            int n3 = arrayList.size();
            int n4 = 0;
            while (n4 < n3) {
                GoogleApiClient.ConnectionCallbacks connectionCallbacks = arrayList.get(n4);
                int n5 = n4 + 1;
                if (!this.zztj || this.zztk.get() != n2) break;
                n4 = n5;
                if (!this.zztg.contains(connectionCallbacks)) continue;
                connectionCallbacks.onConnectionSuspended(n);
                n4 = n5;
            }
            this.zzth.clear();
            this.zztl = false;
            return;
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Converted monitor instructions to comments
     * Lifted jumps to return sites
     */
    public final void registerConnectionCallbacks(GoogleApiClient.ConnectionCallbacks connectionCallbacks) {
        Preconditions.checkNotNull(connectionCallbacks);
        Object object = this.mLock;
        // MONITORENTER : object
        if (this.zztg.contains(connectionCallbacks)) {
            String string2 = String.valueOf(connectionCallbacks);
            StringBuilder stringBuilder = new StringBuilder(String.valueOf(string2).length() + 62);
            stringBuilder.append("registerConnectionCallbacks(): listener ");
            stringBuilder.append(string2);
            stringBuilder.append(" is already registered");
            Log.w((String)"GmsClientEvents", (String)stringBuilder.toString());
        } else {
            this.zztg.add(connectionCallbacks);
        }
        // MONITOREXIT : object
        if (!this.zztf.isConnected()) return;
        this.mHandler.sendMessage(this.mHandler.obtainMessage(1, (Object)connectionCallbacks));
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public final void registerConnectionFailedListener(GoogleApiClient.OnConnectionFailedListener object) {
        Preconditions.checkNotNull(object);
        Object object2 = this.mLock;
        synchronized (object2) {
            if (this.zzti.contains(object)) {
                object = String.valueOf(object);
                StringBuilder stringBuilder = new StringBuilder(String.valueOf(object).length() + 67);
                stringBuilder.append("registerConnectionFailedListener(): listener ");
                stringBuilder.append((String)object);
                stringBuilder.append(" is already registered");
                Log.w((String)"GmsClientEvents", (String)stringBuilder.toString());
            } else {
                this.zzti.add((GoogleApiClient.OnConnectionFailedListener)object);
            }
            return;
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public final void unregisterConnectionCallbacks(GoogleApiClient.ConnectionCallbacks object) {
        Preconditions.checkNotNull(object);
        Object object2 = this.mLock;
        synchronized (object2) {
            if (!this.zztg.remove(object)) {
                object = String.valueOf(object);
                StringBuilder stringBuilder = new StringBuilder(String.valueOf(object).length() + 52);
                stringBuilder.append("unregisterConnectionCallbacks(): listener ");
                stringBuilder.append((String)object);
                stringBuilder.append(" not found");
                Log.w((String)"GmsClientEvents", (String)stringBuilder.toString());
            } else if (this.zztl) {
                this.zzth.add((GoogleApiClient.ConnectionCallbacks)object);
            }
            return;
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public final void unregisterConnectionFailedListener(GoogleApiClient.OnConnectionFailedListener object) {
        Preconditions.checkNotNull(object);
        Object object2 = this.mLock;
        synchronized (object2) {
            if (!this.zzti.remove(object)) {
                object = String.valueOf(object);
                StringBuilder stringBuilder = new StringBuilder(String.valueOf(object).length() + 57);
                stringBuilder.append("unregisterConnectionFailedListener(): listener ");
                stringBuilder.append((String)object);
                stringBuilder.append(" not found");
                Log.w((String)"GmsClientEvents", (String)stringBuilder.toString());
            }
            return;
        }
    }

    @VisibleForTesting
    public static interface GmsClientEventState {
        public Bundle getConnectionHint();

        public boolean isConnected();
    }

}

