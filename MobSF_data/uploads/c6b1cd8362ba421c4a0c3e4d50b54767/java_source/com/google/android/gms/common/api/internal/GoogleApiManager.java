/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.app.Application
 *  android.app.PendingIntent
 *  android.content.Context
 *  android.content.Intent
 *  android.os.Bundle
 *  android.os.DeadObjectException
 *  android.os.Handler
 *  android.os.Handler$Callback
 *  android.os.HandlerThread
 *  android.os.Looper
 *  android.os.Message
 *  android.os.RemoteException
 *  android.util.Log
 *  javax.annotation.concurrent.GuardedBy
 */
package com.google.android.gms.common.api.internal;

import android.app.Application;
import android.app.PendingIntent;
import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.os.DeadObjectException;
import android.os.Handler;
import android.os.HandlerThread;
import android.os.Looper;
import android.os.Message;
import android.os.RemoteException;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.annotation.WorkerThread;
import android.support.v4.util.ArrayMap;
import android.support.v4.util.ArraySet;
import android.util.Log;
import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.Feature;
import com.google.android.gms.common.GoogleApiAvailability;
import com.google.android.gms.common.GoogleApiAvailabilityLight;
import com.google.android.gms.common.annotation.KeepForSdk;
import com.google.android.gms.common.api.Api;
import com.google.android.gms.common.api.GoogleApi;
import com.google.android.gms.common.api.GoogleApiClient;
import com.google.android.gms.common.api.Result;
import com.google.android.gms.common.api.Scope;
import com.google.android.gms.common.api.Status;
import com.google.android.gms.common.api.UnsupportedApiCallException;
import com.google.android.gms.common.api.internal.BackgroundDetector;
import com.google.android.gms.common.api.internal.BaseImplementation;
import com.google.android.gms.common.api.internal.ListenerHolder;
import com.google.android.gms.common.api.internal.RegisterListenerMethod;
import com.google.android.gms.common.api.internal.StatusExceptionMapper;
import com.google.android.gms.common.api.internal.TaskApiCall;
import com.google.android.gms.common.api.internal.UnregisterListenerMethod;
import com.google.android.gms.common.api.internal.zzaa;
import com.google.android.gms.common.api.internal.zzad;
import com.google.android.gms.common.api.internal.zzae;
import com.google.android.gms.common.api.internal.zzbh;
import com.google.android.gms.common.api.internal.zzbi;
import com.google.android.gms.common.api.internal.zzbj;
import com.google.android.gms.common.api.internal.zzbk;
import com.google.android.gms.common.api.internal.zzbl;
import com.google.android.gms.common.api.internal.zzbn;
import com.google.android.gms.common.api.internal.zzbu;
import com.google.android.gms.common.api.internal.zzbv;
import com.google.android.gms.common.api.internal.zzby;
import com.google.android.gms.common.api.internal.zzcb;
import com.google.android.gms.common.api.internal.zzd;
import com.google.android.gms.common.api.internal.zze;
import com.google.android.gms.common.api.internal.zzf;
import com.google.android.gms.common.api.internal.zzg;
import com.google.android.gms.common.api.internal.zzh;
import com.google.android.gms.common.api.internal.zzj;
import com.google.android.gms.common.api.internal.zzq;
import com.google.android.gms.common.internal.BaseGmsClient;
import com.google.android.gms.common.internal.GoogleApiAvailabilityCache;
import com.google.android.gms.common.internal.IAccountAccessor;
import com.google.android.gms.common.internal.Objects;
import com.google.android.gms.common.internal.Preconditions;
import com.google.android.gms.common.internal.SimpleClientAdapter;
import com.google.android.gms.common.util.ArrayUtils;
import com.google.android.gms.common.util.PlatformVersion;
import com.google.android.gms.signin.SignInClient;
import com.google.android.gms.tasks.Task;
import com.google.android.gms.tasks.TaskCompletionSource;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Queue;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.atomic.AtomicInteger;
import javax.annotation.concurrent.GuardedBy;

@KeepForSdk
public class GoogleApiManager
implements Handler.Callback {
    private static final Object lock;
    public static final Status zzjj;
    private static final Status zzjk;
    @GuardedBy(value="lock")
    private static GoogleApiManager zzjo;
    private final Handler handler;
    private long zzjl = 5000L;
    private long zzjm = 120000L;
    private long zzjn = 10000L;
    private final Context zzjp;
    private final GoogleApiAvailability zzjq;
    private final GoogleApiAvailabilityCache zzjr;
    private final AtomicInteger zzjs = new AtomicInteger(1);
    private final AtomicInteger zzjt = new AtomicInteger(0);
    private final Map<zzh<?>, zza<?>> zzju = new ConcurrentHashMap(5, 0.75f, 1);
    @GuardedBy(value="lock")
    private zzad zzjv = null;
    @GuardedBy(value="lock")
    private final Set<zzh<?>> zzjw = new ArraySet();
    private final Set<zzh<?>> zzjx = new ArraySet();

    static {
        zzjj = new Status(4, "Sign-out occurred while this API call was in progress.");
        zzjk = new Status(4, "The user must be signed in to make this API call.");
        lock = new Object();
    }

    @KeepForSdk
    private GoogleApiManager(Context context, Looper looper, GoogleApiAvailability googleApiAvailability) {
        this.zzjp = context;
        this.handler = new Handler(looper, (Handler.Callback)this);
        this.zzjq = googleApiAvailability;
        this.zzjr = new GoogleApiAvailabilityCache(googleApiAvailability);
        this.handler.sendMessage(this.handler.obtainMessage(6));
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @KeepForSdk
    public static void reportSignOut() {
        Object object = lock;
        synchronized (object) {
            if (zzjo != null) {
                GoogleApiManager googleApiManager = zzjo;
                googleApiManager.zzjt.incrementAndGet();
                googleApiManager.handler.sendMessageAtFrontOfQueue(googleApiManager.handler.obtainMessage(10));
            }
            return;
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public static GoogleApiManager zzb(Context object) {
        Object object2 = lock;
        synchronized (object2) {
            if (zzjo != null) return zzjo;
            HandlerThread handlerThread = new HandlerThread("GoogleApiHandler", 9);
            handlerThread.start();
            handlerThread = handlerThread.getLooper();
            zzjo = new GoogleApiManager(object.getApplicationContext(), (Looper)handlerThread, GoogleApiAvailability.getInstance());
            return zzjo;
        }
    }

    @WorkerThread
    private final void zzb(GoogleApi<?> googleApi) {
        zza<?> zza2;
        zzh<?> zzh2 = googleApi.zzm();
        zza<?> zza3 = zza2 = this.zzju.get(zzh2);
        if (zza2 == null) {
            zza3 = new zza(googleApi);
            this.zzju.put(zzh2, zza3);
        }
        if (zza3.requiresSignIn()) {
            this.zzjx.add(zzh2);
        }
        zza3.connect();
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public static GoogleApiManager zzbf() {
        Object object = lock;
        synchronized (object) {
            Preconditions.checkNotNull(zzjo, "Must guarantee manager is non-null before using getInstance");
            return zzjo;
        }
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Lifted jumps to return sites
     */
    @WorkerThread
    public boolean handleMessage(Message var1_1) {
        var2_21 = var1_1.what;
        var3_22 = 300000L;
        switch (var2_21) {
            default: {
                var2_21 = var1_1.what;
                var1_2 = new StringBuilder(31);
                var1_2.append("Unknown message id: ");
                var1_2.append(var2_21);
                Log.w((String)"GoogleApiManager", (String)var1_2.toString());
                return false;
            }
            case 16: {
                var1_3 = (zzb)var1_1.obj;
                if (this.zzju.containsKey(zzb.zzc(var1_3)) == false) return true;
                zza.zzb(this.zzju.get(zzb.zzc(var1_3)), var1_3);
                return true;
            }
            case 15: {
                var1_4 = (zzb)var1_1.obj;
                if (this.zzju.containsKey(zzb.zzc(var1_4)) == false) return true;
                zza.zza(this.zzju.get(zzb.zzc(var1_4)), var1_4);
                return true;
            }
            case 14: {
                var1_5 = (zzae)var1_1.obj;
                var6_23 = var1_5.zzm();
                if (!this.zzju.containsKey(var6_23)) {
                    var6_24 = var1_5.zzao();
                    var1_6 = false;
                } else {
                    var5_34 = zza.zza(this.zzju.get(var6_23), false);
                    var6_26 = var1_5.zzao();
                    var1_8 = var5_34;
                }
                var6_25.setResult(var1_7);
                return true;
            }
            case 12: {
                if (this.zzju.containsKey(var1_1.obj) == false) return true;
                this.zzju.get(var1_1.obj).zzbs();
                return true;
            }
            case 11: {
                if (this.zzju.containsKey(var1_1.obj) == false) return true;
                this.zzju.get(var1_1.obj).zzay();
                return true;
            }
            case 10: {
                var1_9 = this.zzjx.iterator();
                do {
                    if (!var1_9.hasNext()) {
                        this.zzjx.clear();
                        return true;
                    }
                    var6_27 = var1_9.next();
                    this.zzju.remove(var6_27).zzbm();
                } while (true);
            }
            case 9: {
                if (this.zzju.containsKey(var1_1.obj) == false) return true;
                this.zzju.get(var1_1.obj).resume();
                return true;
            }
            case 7: {
                this.zzb((GoogleApi)var1_1.obj);
                return true;
            }
            case 6: {
                if (PlatformVersion.isAtLeastIceCreamSandwich() == false) return true;
                if (this.zzjp.getApplicationContext() instanceof Application == false) return true;
                BackgroundDetector.initialize((Application)this.zzjp.getApplicationContext());
                BackgroundDetector.getInstance().addListener(new zzbh(this));
                if (BackgroundDetector.getInstance().readCurrentStateIfPossible(true) != false) return true;
                this.zzjn = 300000L;
                return true;
            }
            case 5: {
                var2_21 = var1_1.arg1;
                var6_28 = (ConnectionResult)var1_1.obj;
                for (zza<?> var1_11 : this.zzju.values()) {
                    if (var1_11.getInstanceId() != var2_21) continue;
                    ** GOTO lbl72
                }
                var1_12 = null;
lbl72: // 2 sources:
                if (var1_13 != null) {
                    var7_35 = this.zzjq.getErrorString(var6_28.getErrorCode());
                    var6_29 = var6_28.getErrorMessage();
                    var8_38 = new StringBuilder(String.valueOf(var7_35).length() + 69 + String.valueOf(var6_29).length());
                    var8_38.append("Error resolution was canceled by the user, original error message: ");
                    var8_38.append(var7_35);
                    var8_38.append(": ");
                    var8_38.append(var6_29);
                    var1_13.zzc(new Status(17, var8_38.toString()));
                    return true;
                }
                var1_14 = new StringBuilder(76);
                var1_14.append("Could not find API instance ");
                var1_14.append(var2_21);
                var1_14.append(" while trying to fail enqueued calls.");
                Log.wtf((String)"GoogleApiManager", (String)var1_14.toString(), (Throwable)new Exception());
                return true;
            }
            case 4: 
            case 8: 
            case 13: {
                var7_36 = (zzbu)var1_1.obj;
                var1_15 = var6_30 = this.zzju.get(var7_36.zzlr.zzm());
                if (var6_30 == null) {
                    this.zzb(var7_36.zzlr);
                    var1_16 = this.zzju.get(var7_36.zzlr.zzm());
                }
                if (var1_17.requiresSignIn() && this.zzjt.get() != var7_36.zzlq) {
                    var7_36.zzlp.zza(GoogleApiManager.zzjj);
                    var1_17.zzbm();
                    return true;
                }
                var1_17.zza(var7_36.zzlp);
                return true;
            }
            case 3: {
                var1_18 = this.zzju.values().iterator();
                while (var1_18.hasNext() != false) {
                    var6_31 = var1_18.next();
                    var6_31.zzbo();
                    var6_31.connect();
                }
                return true;
            }
            case 2: {
                var1_19 = (zzj)var1_1.obj;
                var6_32 = var1_19.zzs().iterator();
                while (var6_32.hasNext() != false) {
                    var7_37 = var6_32.next();
                    var8_39 = this.zzju.get(var7_37);
                    if (var8_39 == null) {
                        var1_19.zza(var7_37, new ConnectionResult(13), null);
                        return true;
                    }
                    if (var8_39.isConnected()) {
                        var1_19.zza(var7_37, ConnectionResult.RESULT_SUCCESS, var8_39.zzae().getEndpointPackageName());
                        continue;
                    }
                    if (var8_39.zzbp() != null) {
                        var1_19.zza(var7_37, var8_39.zzbp(), null);
                        continue;
                    }
                    var8_39.zza(var1_19);
                }
                return true;
            }
            case 1: 
        }
        if (((Boolean)var1_1.obj).booleanValue()) {
            var3_22 = 10000L;
        }
        this.zzjn = var3_22;
        this.handler.removeMessages(12);
        var1_20 = this.zzju.keySet().iterator();
        while (var1_20.hasNext() != false) {
            var6_33 = var1_20.next();
            this.handler.sendMessageDelayed(this.handler.obtainMessage(12, var6_33), this.zzjn);
        }
        return true;
    }

    final void maybeSignOut() {
        this.zzjt.incrementAndGet();
        this.handler.sendMessage(this.handler.obtainMessage(10));
    }

    final PendingIntent zza(zzh<?> object, int n) {
        if ((object = this.zzju.get(object)) == null) {
            return null;
        }
        if ((object = object.zzbt()) == null) {
            return null;
        }
        return PendingIntent.getActivity((Context)this.zzjp, (int)n, (Intent)object.getSignInIntent(), (int)134217728);
    }

    public final <O extends Api.ApiOptions> Task<Boolean> zza(@NonNull GoogleApi<O> googleApi, @NonNull ListenerHolder.ListenerKey<?> object) {
        TaskCompletionSource<Boolean> taskCompletionSource = new TaskCompletionSource<Boolean>();
        object = new zzg((ListenerHolder.ListenerKey<?>)object, taskCompletionSource);
        this.handler.sendMessage(this.handler.obtainMessage(13, (Object)new zzbu((com.google.android.gms.common.api.internal.zzb)object, this.zzjt.get(), googleApi)));
        return taskCompletionSource.getTask();
    }

    public final <O extends Api.ApiOptions> Task<Void> zza(@NonNull GoogleApi<O> googleApi, @NonNull RegisterListenerMethod<Api.AnyClient, ?> object, @NonNull UnregisterListenerMethod<Api.AnyClient, ?> unregisterListenerMethod) {
        TaskCompletionSource<Void> taskCompletionSource = new TaskCompletionSource<Void>();
        object = new zze(new zzbv((RegisterListenerMethod<Api.AnyClient, ?>)object, unregisterListenerMethod), taskCompletionSource);
        this.handler.sendMessage(this.handler.obtainMessage(8, (Object)new zzbu((com.google.android.gms.common.api.internal.zzb)object, this.zzjt.get(), googleApi)));
        return taskCompletionSource.getTask();
    }

    public final Task<Map<zzh<?>, String>> zza(Iterable<? extends GoogleApi<?>> object) {
        object = new zzj((Iterable<? extends GoogleApi<?>>)object);
        this.handler.sendMessage(this.handler.obtainMessage(2, object));
        return object.getTask();
    }

    public final void zza(ConnectionResult connectionResult, int n) {
        if (!this.zzc(connectionResult, n)) {
            this.handler.sendMessage(this.handler.obtainMessage(5, n, 0, (Object)connectionResult));
        }
    }

    public final void zza(GoogleApi<?> googleApi) {
        this.handler.sendMessage(this.handler.obtainMessage(7, googleApi));
    }

    public final <O extends Api.ApiOptions> void zza(GoogleApi<O> googleApi, int n, BaseImplementation.ApiMethodImpl<? extends Result, Api.AnyClient> object) {
        object = new zzd<BaseImplementation.ApiMethodImpl<? extends Result, Api.AnyClient>>(n, (BaseImplementation.ApiMethodImpl<? extends Result, Api.AnyClient>)object);
        this.handler.sendMessage(this.handler.obtainMessage(4, (Object)new zzbu((com.google.android.gms.common.api.internal.zzb)object, this.zzjt.get(), googleApi)));
    }

    public final <O extends Api.ApiOptions, ResultT> void zza(GoogleApi<O> googleApi, int n, TaskApiCall<Api.AnyClient, ResultT> object, TaskCompletionSource<ResultT> taskCompletionSource, StatusExceptionMapper statusExceptionMapper) {
        object = new zzf<ResultT>(n, (TaskApiCall<Api.AnyClient, ResultT>)object, taskCompletionSource, statusExceptionMapper);
        this.handler.sendMessage(this.handler.obtainMessage(4, (Object)new zzbu((com.google.android.gms.common.api.internal.zzb)object, this.zzjt.get(), googleApi)));
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public final void zza(@NonNull zzad zzad2) {
        Object object = lock;
        synchronized (object) {
            if (this.zzjv != zzad2) {
                this.zzjv = zzad2;
                this.zzjw.clear();
            }
            this.zzjw.addAll(zzad2.zzam());
            return;
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    final void zzb(@NonNull zzad zzad2) {
        Object object = lock;
        synchronized (object) {
            if (this.zzjv == zzad2) {
                this.zzjv = null;
                this.zzjw.clear();
            }
            return;
        }
    }

    public final int zzbg() {
        return this.zzjs.getAndIncrement();
    }

    public final Task<Boolean> zzc(GoogleApi<?> object) {
        object = new zzae(object.zzm());
        this.handler.sendMessage(this.handler.obtainMessage(14, object));
        return object.zzao().getTask();
    }

    final boolean zzc(ConnectionResult connectionResult, int n) {
        return this.zzjq.showWrappedErrorNotification(this.zzjp, connectionResult, n);
    }

    public final void zzr() {
        this.handler.sendMessage(this.handler.obtainMessage(3));
    }

    public final class zza<O extends Api.ApiOptions>
    implements GoogleApiClient.ConnectionCallbacks,
    GoogleApiClient.OnConnectionFailedListener,
    zzq {
        private final zzh<O> zzhc;
        private final Queue<com.google.android.gms.common.api.internal.zzb> zzjz = new LinkedList<com.google.android.gms.common.api.internal.zzb>();
        private final Api.Client zzka;
        private final Api.AnyClient zzkb;
        private final zzaa zzkc;
        private final Set<zzj> zzkd = new HashSet<zzj>();
        private final Map<ListenerHolder.ListenerKey<?>, zzbv> zzke = new HashMap();
        private final int zzkf;
        private final zzby zzkg;
        private boolean zzkh;
        private final List<zzb> zzki = new ArrayList<zzb>();
        private ConnectionResult zzkj = null;

        /*
         * Enabled aggressive block sorting
         */
        @WorkerThread
        public zza(GoogleApi<O> googleApi) {
            void var3_4;
            this.zzka = googleApi.zza(GoogleApiManager.this.handler.getLooper(), this);
            if (this.zzka instanceof SimpleClientAdapter) {
                Api.SimpleClient simpleClient = ((SimpleClientAdapter)this.zzka).getClient();
            } else {
                Api.Client client = this.zzka;
            }
            this.zzkb = var3_4;
            this.zzhc = googleApi.zzm();
            this.zzkc = new zzaa();
            this.zzkf = googleApi.getInstanceId();
            if (!this.zzka.requiresSignIn()) {
                this.zzkg = null;
                return;
            }
            this.zzkg = googleApi.zza(GoogleApiManager.this.zzjp, GoogleApiManager.this.handler);
        }

        static /* synthetic */ void zza(zza zza2, zzb zzb2) {
            zza2.zza(zzb2);
        }

        @WorkerThread
        private final void zza(zzb zzb2) {
            if (!this.zzki.contains(zzb2)) {
                return;
            }
            if (!this.zzkh) {
                if (!this.zzka.isConnected()) {
                    this.connect();
                    return;
                }
                this.zzbl();
            }
        }

        static /* synthetic */ boolean zza(zza zza2, boolean bl) {
            return zza2.zzb(false);
        }

        static /* synthetic */ void zzb(zza zza2, zzb zzb2) {
            zza2.zzb(zzb2);
        }

        @WorkerThread
        private final void zzb(zzb object) {
            if (this.zzki.remove(object)) {
                GoogleApiManager.this.handler.removeMessages(15, object);
                GoogleApiManager.this.handler.removeMessages(16, object);
                object = ((zzb)object).zzdr;
                ArrayList<com.google.android.gms.common.api.internal.zzb> arrayList = new ArrayList<com.google.android.gms.common.api.internal.zzb>(this.zzjz.size());
                for (com.google.android.gms.common.api.internal.zzb zzb2 : this.zzjz) {
                    Feature[] arrfeature;
                    if (!(zzb2 instanceof zzf) || (arrfeature = ((zzf)zzb2).getRequiredFeatures()) == null || !ArrayUtils.contains(arrfeature, object)) continue;
                    arrayList.add(zzb2);
                }
                int n = arrayList.size();
                for (int i = 0; i < n; ++i) {
                    Object object2 = arrayList.get(i);
                    object2 = (com.google.android.gms.common.api.internal.zzb)object2;
                    this.zzjz.remove(object2);
                    object2.zza(new UnsupportedApiCallException((Feature)object));
                }
            }
        }

        @WorkerThread
        private final boolean zzb(com.google.android.gms.common.api.internal.zzb object) {
            if (!(object instanceof zzf)) {
                this.zzc((com.google.android.gms.common.api.internal.zzb)object);
                return true;
            }
            zzf zzf2 = (zzf)object;
            Feature[] arrfeature = zzf2.getRequiredFeatures();
            if (arrfeature != null && arrfeature.length != 0) {
                Object object2;
                Object object3 = object2 = this.zzka.getAvailableFeatures();
                if (object2 == null) {
                    object3 = new Feature[]{};
                }
                object2 = new ArrayMap(((Feature[])object3).length);
                for (Feature feature : object3) {
                    object2.put(feature.getName(), feature.getVersion());
                }
                int n = arrfeature.length;
                for (int i = 0; i < n; ++i) {
                    object3 = arrfeature[i];
                    if (object2.containsKey(object3.getName()) && (Long)object2.get(object3.getName()) >= object3.getVersion()) {
                        this.zzki.remove(new zzb(this.zzhc, (Feature)object3, null));
                        continue;
                    }
                    if (zzf2.shouldAutoResolveMissingFeatures()) {
                        object = new zzb(this.zzhc, (Feature)object3, null);
                        i = this.zzki.indexOf(object);
                        if (i >= 0) {
                            object = this.zzki.get(i);
                            GoogleApiManager.this.handler.removeMessages(15, object);
                            GoogleApiManager.this.handler.sendMessageDelayed(Message.obtain((Handler)GoogleApiManager.this.handler, (int)15, (Object)object), GoogleApiManager.this.zzjl);
                            return false;
                        }
                        this.zzki.add((zzb)object);
                        GoogleApiManager.this.handler.sendMessageDelayed(Message.obtain((Handler)GoogleApiManager.this.handler, (int)15, (Object)object), GoogleApiManager.this.zzjl);
                        GoogleApiManager.this.handler.sendMessageDelayed(Message.obtain((Handler)GoogleApiManager.this.handler, (int)16, (Object)object), GoogleApiManager.this.zzjm);
                        object = new ConnectionResult(2, null);
                        if (!this.zzh((ConnectionResult)object)) {
                            GoogleApiManager.this.zzc((ConnectionResult)object, this.zzkf);
                            return false;
                        }
                    } else {
                        zzf2.zza(new UnsupportedApiCallException((Feature)object3));
                    }
                    return false;
                }
                this.zzc((com.google.android.gms.common.api.internal.zzb)object);
                return true;
            }
            this.zzc((com.google.android.gms.common.api.internal.zzb)object);
            return true;
        }

        @WorkerThread
        private final boolean zzb(boolean bl) {
            Preconditions.checkHandlerThread(GoogleApiManager.this.handler);
            if (this.zzka.isConnected() && this.zzke.size() == 0) {
                if (this.zzkc.zzaj()) {
                    if (bl) {
                        this.zzbr();
                    }
                    return false;
                }
                this.zzka.disconnect();
                return true;
            }
            return false;
        }

        /*
         * Loose catch block
         * Enabled aggressive block sorting
         * Enabled unnecessary exception pruning
         * Enabled aggressive exception aggregation
         * Lifted jumps to return sites
         */
        @WorkerThread
        private final void zzbj() {
            this.zzbo();
            this.zzi(ConnectionResult.RESULT_SUCCESS);
            this.zzbq();
            for (zzbv zzbv2 : this.zzke.values()) {
                try {
                    zzbv2.zzlt.registerListener(this.zzkb, new TaskCompletionSource<Void>());
                    continue;
                }
                catch (DeadObjectException deadObjectException) {}
                this.onConnectionSuspended(1);
                this.zzka.disconnect();
                break;
                catch (RemoteException remoteException) {
                }
            }
            this.zzbl();
            this.zzbr();
        }

        @WorkerThread
        private final void zzbk() {
            this.zzbo();
            this.zzkh = true;
            this.zzkc.zzal();
            GoogleApiManager.this.handler.sendMessageDelayed(Message.obtain((Handler)GoogleApiManager.this.handler, (int)9, this.zzhc), GoogleApiManager.this.zzjl);
            GoogleApiManager.this.handler.sendMessageDelayed(Message.obtain((Handler)GoogleApiManager.this.handler, (int)11, this.zzhc), GoogleApiManager.this.zzjm);
            GoogleApiManager.this.zzjr.flush();
        }

        @WorkerThread
        private final void zzbl() {
            ArrayList<com.google.android.gms.common.api.internal.zzb> arrayList = new ArrayList<com.google.android.gms.common.api.internal.zzb>(this.zzjz);
            int n = arrayList.size();
            int n2 = 0;
            while (n2 < n) {
                com.google.android.gms.common.api.internal.zzb zzb2 = arrayList.get(n2);
                int n3 = n2 + 1;
                if (!this.zzka.isConnected()) break;
                n2 = n3;
                if (!this.zzb(zzb2)) continue;
                this.zzjz.remove(zzb2);
                n2 = n3;
            }
        }

        @WorkerThread
        private final void zzbq() {
            if (this.zzkh) {
                GoogleApiManager.this.handler.removeMessages(11, this.zzhc);
                GoogleApiManager.this.handler.removeMessages(9, this.zzhc);
                this.zzkh = false;
            }
        }

        private final void zzbr() {
            GoogleApiManager.this.handler.removeMessages(12, this.zzhc);
            GoogleApiManager.this.handler.sendMessageDelayed(GoogleApiManager.this.handler.obtainMessage(12, this.zzhc), GoogleApiManager.this.zzjn);
        }

        static /* synthetic */ void zzc(zza zza2) {
            zza2.zzbj();
        }

        /*
         * Enabled aggressive block sorting
         * Enabled unnecessary exception pruning
         * Enabled aggressive exception aggregation
         */
        @WorkerThread
        private final void zzc(com.google.android.gms.common.api.internal.zzb zzb2) {
            zzb2.zza(this.zzkc, this.requiresSignIn());
            try {
                zzb2.zza(this);
                return;
            }
            catch (DeadObjectException deadObjectException) {}
            this.onConnectionSuspended(1);
            this.zzka.disconnect();
        }

        static /* synthetic */ void zzd(zza zza2) {
            zza2.zzbk();
        }

        static /* synthetic */ Api.Client zze(zza zza2) {
            return zza2.zzka;
        }

        /*
         * Enabled aggressive block sorting
         * Enabled unnecessary exception pruning
         * Enabled aggressive exception aggregation
         */
        @WorkerThread
        private final boolean zzh(@NonNull ConnectionResult connectionResult) {
            Object object = lock;
            synchronized (object) {
                if (GoogleApiManager.this.zzjv != null && GoogleApiManager.this.zzjw.contains(this.zzhc)) {
                    GoogleApiManager.this.zzjv.zzb(connectionResult, this.zzkf);
                    return true;
                }
                return false;
            }
        }

        @WorkerThread
        private final void zzi(ConnectionResult connectionResult) {
            for (zzj zzj2 : this.zzkd) {
                String string2 = null;
                if (Objects.equal(connectionResult, ConnectionResult.RESULT_SUCCESS)) {
                    string2 = this.zzka.getEndpointPackageName();
                }
                zzj2.zza(this.zzhc, connectionResult, string2);
            }
            this.zzkd.clear();
        }

        @WorkerThread
        public final void connect() {
            Preconditions.checkHandlerThread(GoogleApiManager.this.handler);
            if (!this.zzka.isConnected()) {
                if (this.zzka.isConnecting()) {
                    return;
                }
                int n = GoogleApiManager.this.zzjr.getClientAvailability(GoogleApiManager.this.zzjp, this.zzka);
                if (n != 0) {
                    this.onConnectionFailed(new ConnectionResult(n, null));
                    return;
                }
                zzc zzc2 = new zzc(this.zzka, this.zzhc);
                if (this.zzka.requiresSignIn()) {
                    this.zzkg.zza(zzc2);
                }
                this.zzka.connect(zzc2);
            }
        }

        public final int getInstanceId() {
            return this.zzkf;
        }

        final boolean isConnected() {
            return this.zzka.isConnected();
        }

        @Override
        public final void onConnected(@Nullable Bundle bundle) {
            if (Looper.myLooper() == GoogleApiManager.this.handler.getLooper()) {
                this.zzbj();
                return;
            }
            GoogleApiManager.this.handler.post((Runnable)new zzbi(this));
        }

        @WorkerThread
        @Override
        public final void onConnectionFailed(@NonNull ConnectionResult object) {
            Preconditions.checkHandlerThread(GoogleApiManager.this.handler);
            if (this.zzkg != null) {
                this.zzkg.zzbz();
            }
            this.zzbo();
            GoogleApiManager.this.zzjr.flush();
            this.zzi((ConnectionResult)object);
            if (object.getErrorCode() == 4) {
                this.zzc(zzjk);
                return;
            }
            if (this.zzjz.isEmpty()) {
                this.zzkj = object;
                return;
            }
            if (this.zzh((ConnectionResult)object)) {
                return;
            }
            if (!GoogleApiManager.this.zzc((ConnectionResult)object, this.zzkf)) {
                if (object.getErrorCode() == 18) {
                    this.zzkh = true;
                }
                if (this.zzkh) {
                    GoogleApiManager.this.handler.sendMessageDelayed(Message.obtain((Handler)GoogleApiManager.this.handler, (int)9, this.zzhc), GoogleApiManager.this.zzjl);
                    return;
                }
                object = this.zzhc.zzq();
                StringBuilder stringBuilder = new StringBuilder(String.valueOf(object).length() + 38);
                stringBuilder.append("API: ");
                stringBuilder.append((String)object);
                stringBuilder.append(" is not available on this device.");
                this.zzc(new Status(17, stringBuilder.toString()));
            }
        }

        @Override
        public final void onConnectionSuspended(int n) {
            if (Looper.myLooper() == GoogleApiManager.this.handler.getLooper()) {
                this.zzbk();
                return;
            }
            GoogleApiManager.this.handler.post((Runnable)new zzbj(this));
        }

        public final boolean requiresSignIn() {
            return this.zzka.requiresSignIn();
        }

        @WorkerThread
        public final void resume() {
            Preconditions.checkHandlerThread(GoogleApiManager.this.handler);
            if (this.zzkh) {
                this.connect();
            }
        }

        @Override
        public final void zza(ConnectionResult connectionResult, Api<?> api, boolean bl) {
            if (Looper.myLooper() == GoogleApiManager.this.handler.getLooper()) {
                this.onConnectionFailed(connectionResult);
                return;
            }
            GoogleApiManager.this.handler.post((Runnable)new zzbk(this, connectionResult));
        }

        @WorkerThread
        public final void zza(com.google.android.gms.common.api.internal.zzb zzb2) {
            Preconditions.checkHandlerThread(GoogleApiManager.this.handler);
            if (this.zzka.isConnected()) {
                if (this.zzb(zzb2)) {
                    this.zzbr();
                    return;
                }
                this.zzjz.add(zzb2);
                return;
            }
            this.zzjz.add(zzb2);
            if (this.zzkj != null && this.zzkj.hasResolution()) {
                this.onConnectionFailed(this.zzkj);
                return;
            }
            this.connect();
        }

        @WorkerThread
        public final void zza(zzj zzj2) {
            Preconditions.checkHandlerThread(GoogleApiManager.this.handler);
            this.zzkd.add(zzj2);
        }

        public final Api.Client zzae() {
            return this.zzka;
        }

        @WorkerThread
        public final void zzay() {
            Preconditions.checkHandlerThread(GoogleApiManager.this.handler);
            if (this.zzkh) {
                this.zzbq();
                Status status = GoogleApiManager.this.zzjq.isGooglePlayServicesAvailable(GoogleApiManager.this.zzjp) == 18 ? new Status(8, "Connection timed out while waiting for Google Play services update to complete.") : new Status(8, "API failed to connect while resuming due to an unknown error.");
                this.zzc(status);
                this.zzka.disconnect();
            }
        }

        @WorkerThread
        public final void zzbm() {
            Preconditions.checkHandlerThread(GoogleApiManager.this.handler);
            this.zzc(GoogleApiManager.zzjj);
            this.zzkc.zzak();
            ListenerHolder.ListenerKey[] arrlistenerKey = this.zzke.keySet().toArray(new ListenerHolder.ListenerKey[this.zzke.size()]);
            int n = arrlistenerKey.length;
            for (int i = 0; i < n; ++i) {
                this.zza(new zzg(arrlistenerKey[i], new TaskCompletionSource<Boolean>()));
            }
            this.zzi(new ConnectionResult(4));
            if (this.zzka.isConnected()) {
                this.zzka.onUserSignOut(new zzbl(this));
            }
        }

        public final Map<ListenerHolder.ListenerKey<?>, zzbv> zzbn() {
            return this.zzke;
        }

        @WorkerThread
        public final void zzbo() {
            Preconditions.checkHandlerThread(GoogleApiManager.this.handler);
            this.zzkj = null;
        }

        @WorkerThread
        public final ConnectionResult zzbp() {
            Preconditions.checkHandlerThread(GoogleApiManager.this.handler);
            return this.zzkj;
        }

        @WorkerThread
        public final boolean zzbs() {
            return this.zzb(true);
        }

        final SignInClient zzbt() {
            if (this.zzkg == null) {
                return null;
            }
            return this.zzkg.zzbt();
        }

        @WorkerThread
        public final void zzc(Status status) {
            Preconditions.checkHandlerThread(GoogleApiManager.this.handler);
            Iterator<com.google.android.gms.common.api.internal.zzb> iterator = this.zzjz.iterator();
            while (iterator.hasNext()) {
                iterator.next().zza(status);
            }
            this.zzjz.clear();
        }

        @WorkerThread
        public final void zzg(@NonNull ConnectionResult connectionResult) {
            Preconditions.checkHandlerThread(GoogleApiManager.this.handler);
            this.zzka.disconnect();
            this.onConnectionFailed(connectionResult);
        }
    }

    private static final class zzb {
        private final Feature zzdr;
        private final zzh<?> zzkn;

        private zzb(zzh<?> zzh2, Feature feature) {
            this.zzkn = zzh2;
            this.zzdr = feature;
        }

        /* synthetic */ zzb(zzh zzh2, Feature feature, zzbh zzbh2) {
            this(zzh2, feature);
        }

        static /* synthetic */ zzh zzc(zzb zzb2) {
            return zzb2.zzkn;
        }

        public final boolean equals(Object object) {
            if (object != null && object instanceof zzb) {
                object = (zzb)object;
                if (Objects.equal(this.zzkn, object.zzkn) && Objects.equal(this.zzdr, object.zzdr)) {
                    return true;
                }
            }
            return false;
        }

        public final int hashCode() {
            return Objects.hashCode(this.zzkn, this.zzdr);
        }

        public final String toString() {
            return Objects.toStringHelper(this).add("key", this.zzkn).add("feature", this.zzdr).toString();
        }
    }

    private final class zzc
    implements zzcb,
    BaseGmsClient.ConnectionProgressReportCallbacks {
        private final zzh<?> zzhc;
        private final Api.Client zzka;
        private IAccountAccessor zzko = null;
        private Set<Scope> zzkp = null;
        private boolean zzkq = false;

        public zzc(Api.Client client, zzh<?> zzh2) {
            this.zzka = client;
            this.zzhc = zzh2;
        }

        static /* synthetic */ Api.Client zza(zzc zzc2) {
            return zzc2.zzka;
        }

        static /* synthetic */ boolean zza(zzc zzc2, boolean bl) {
            zzc2.zzkq = true;
            return true;
        }

        static /* synthetic */ void zzb(zzc zzc2) {
            zzc2.zzbu();
        }

        @WorkerThread
        private final void zzbu() {
            if (this.zzkq && this.zzko != null) {
                this.zzka.getRemoteService(this.zzko, this.zzkp);
            }
        }

        static /* synthetic */ zzh zzc(zzc zzc2) {
            return zzc2.zzhc;
        }

        @Override
        public final void onReportServiceBinding(@NonNull ConnectionResult connectionResult) {
            GoogleApiManager.this.handler.post((Runnable)new zzbn(this, connectionResult));
        }

        @WorkerThread
        @Override
        public final void zza(IAccountAccessor iAccountAccessor, Set<Scope> set) {
            if (iAccountAccessor != null && set != null) {
                this.zzko = iAccountAccessor;
                this.zzkp = set;
                this.zzbu();
                return;
            }
            Log.wtf((String)"GoogleApiManager", (String)"Received null response from onSignInSuccess", (Throwable)new Exception());
            this.zzg(new ConnectionResult(4));
        }

        @WorkerThread
        @Override
        public final void zzg(ConnectionResult connectionResult) {
            ((zza)GoogleApiManager.this.zzju.get(this.zzhc)).zzg(connectionResult);
        }
    }

}

