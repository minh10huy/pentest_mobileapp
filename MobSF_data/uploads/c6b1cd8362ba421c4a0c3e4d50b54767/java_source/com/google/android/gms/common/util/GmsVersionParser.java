/*
 * Decompiled with CFR 0_132.
 */
package com.google.android.gms.common.util;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

public final class GmsVersionParser {
    public static final int UNKNOWN = -1;
    private static Pattern zzzy;

    private GmsVersionParser() {
    }

    public static int parseBuildMajorVersion(int n) {
        if (n == -1) {
            return -1;
        }
        return n / 100000;
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    public static long parseBuildNumber(String object) {
        if (object == null) {
            return -1L;
        }
        object = GmsVersionParser.zzdc().matcher((CharSequence)object);
        if (!object.find()) return -1L;
        object = object.group(2);
        try {
            return Long.parseLong((String)object);
        }
        catch (NumberFormatException numberFormatException) {
            return -1L;
        }
    }

    public static int parseBuildType(String string2) {
        long l = GmsVersionParser.parseVariantCode(string2);
        if (l == -1L) {
            return -1;
        }
        return (int)(l / 10000L);
    }

    public static int parseBuildVersion(int n) {
        if (n == -1) {
            return -1;
        }
        return n / 1000;
    }

    public static int parseScreenDensity(String string2) {
        long l = GmsVersionParser.parseVariantCode(string2);
        if (l == -1L) {
            return -1;
        }
        return (int)(l % 100L);
    }

    public static int parseTargetArchitecture(String string2) {
        long l = GmsVersionParser.parseVariantCode(string2);
        if (l == -1L) {
            return -1;
        }
        return (int)(l / 100L % 100L);
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    public static long parseVariantCode(String object) {
        if (object == null) {
            return -1L;
        }
        object = GmsVersionParser.zzdc().matcher((CharSequence)object);
        if (!object.find()) return -1L;
        object = object.group(1);
        try {
            return Long.parseLong((String)object);
        }
        catch (NumberFormatException numberFormatException) {
            return -1L;
        }
    }

    private static Pattern zzdc() {
        if (zzzy == null) {
            zzzy = Pattern.compile("\\((?:eng-)?(\\d+)-(.+?)[-)$]");
        }
        return zzzy;
    }
}

