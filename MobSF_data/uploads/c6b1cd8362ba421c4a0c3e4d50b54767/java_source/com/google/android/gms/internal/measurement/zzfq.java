/*
 * Decompiled with CFR 0_132.
 */
package com.google.android.gms.internal.measurement;

import android.support.annotation.WorkerThread;
import com.google.android.gms.common.internal.Preconditions;
import com.google.android.gms.internal.measurement.zzfi;
import com.google.android.gms.internal.measurement.zzfk;
import com.google.android.gms.internal.measurement.zzfm;
import com.google.android.gms.internal.measurement.zzfn;
import com.google.android.gms.internal.measurement.zzfo;
import com.google.android.gms.internal.measurement.zzfp;
import com.google.android.gms.internal.measurement.zzgi;
import com.google.android.gms.internal.measurement.zzjz;
import java.io.IOException;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

@WorkerThread
final class zzfq
implements Runnable {
    private final String packageName;
    private final URL url;
    private final byte[] zzalk;
    private final zzfo zzall;
    private final Map<String, String> zzalm;
    private final /* synthetic */ zzfm zzaln;

    public zzfq(String string2, URL uRL, byte[] arrby, Map<String, String> map, zzfo zzfo2) {
        this.zzaln = var1_1;
        Preconditions.checkNotEmpty(string2);
        Preconditions.checkNotNull(uRL);
        Preconditions.checkNotNull(zzfo2);
        this.url = uRL;
        this.zzalk = arrby;
        this.zzall = zzfo2;
        this.packageName = string2;
        this.zzalm = map;
    }

    /*
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    @Override
    public final void run() {
        Object object;
        Object object2;
        block30 : {
            Object object3;
            int n;
            Object object4;
            void var5_17;
            block34 : {
                block29 : {
                    Iterator<Map.Entry<String, String>> iterator;
                    block33 : {
                        void var5_15;
                        block31 : {
                            block28 : {
                                Iterator<Map.Entry<String, String>> iterator2;
                                block32 : {
                                    block27 : {
                                        Object object5;
                                        this.zzaln.zzfw();
                                        object4 = null;
                                        iterator = null;
                                        object3 = null;
                                        iterator2 = null;
                                        object = this.zzaln.zzb(this.url);
                                        if (this.zzalm != null) {
                                            object2 = this.zzalm.entrySet().iterator();
                                            while (object2.hasNext()) {
                                                object5 = object2.next();
                                                object.addRequestProperty((String)object5.getKey(), (String)object5.getValue());
                                            }
                                        }
                                        if (this.zzalk == null) break block27;
                                        object5 = this.zzaln.zzjf().zzb(this.zzalk);
                                        this.zzaln.zzgi().zzjc().zzg("Uploading data. size", ((Object)object5).length);
                                        object.setDoOutput(true);
                                        object.addRequestProperty("Content-Encoding", "gzip");
                                        object.setFixedLengthStreamingMode(((Object)object5).length);
                                        object.connect();
                                        object2 = object.getOutputStream();
                                        try {
                                            object2.write((byte[])object5);
                                            object2.close();
                                        }
                                        catch (Throwable throwable) {
                                            object4 = object;
                                            object = throwable;
                                            break block28;
                                        }
                                        catch (IOException iOException) {
                                            break block29;
                                        }
                                    }
                                    n = object.getResponseCode();
                                    object2 = object.getHeaderFields();
                                    try {
                                        byte[] arrby = zzfm.zza(this.zzaln, (HttpURLConnection)object);
                                        if (object != null) {
                                            object.disconnect();
                                        }
                                        object = this.zzaln.zzgh();
                                        object2 = new zzfp(this.packageName, this.zzall, n, null, arrby, (Map)object2, null);
                                        break block30;
                                    }
                                    catch (Throwable throwable) {
                                        object3 = object4;
                                        object4 = object;
                                        object = throwable;
                                        Object object6 = object2;
                                        break block31;
                                    }
                                    catch (IOException iOException) {
                                        break block32;
                                    }
                                    catch (Throwable throwable) {
                                        Object var5_10 = null;
                                        object3 = object4;
                                        object4 = object;
                                        object = throwable;
                                        break block31;
                                    }
                                    catch (IOException iOException) {
                                        object2 = null;
                                    }
                                }
                                Object object7 = object2;
                                break block34;
                                catch (Throwable throwable) {
                                    object2 = iterator2;
                                    object4 = object;
                                    object = throwable;
                                    break block28;
                                }
                                catch (IOException iOException) {
                                    break block33;
                                }
                                catch (Throwable throwable) {
                                    object4 = null;
                                    object2 = iterator2;
                                }
                            }
                            Object var5_14 = null;
                            n = 0;
                            object3 = object2;
                        }
                        if (object3 != null) {
                            try {
                                object3.close();
                            }
                            catch (IOException iOException) {
                                this.zzaln.zzgi().zziv().zze("Error closing HTTP compressed POST connection output stream. appId", zzfi.zzbp(this.packageName), iOException);
                            }
                        }
                        if (object4 != null) {
                            object4.disconnect();
                        }
                        this.zzaln.zzgh().zzc(new zzfp(this.packageName, this.zzall, n, null, null, (Map)var5_15, null));
                        throw object;
                        catch (IOException iOException) {
                            object = null;
                        }
                    }
                    object4 = object2;
                    object2 = iterator;
                }
                Object var5_16 = null;
                n = 0;
                object3 = object2;
            }
            if (object3 != null) {
                try {
                    object3.close();
                }
                catch (IOException iOException) {
                    this.zzaln.zzgi().zziv().zze("Error closing HTTP compressed POST connection output stream. appId", zzfi.zzbp(this.packageName), iOException);
                }
            }
            if (object != null) {
                object.disconnect();
            }
            object = this.zzaln.zzgh();
            object2 = new zzfp(this.packageName, this.zzall, n, (Throwable)object4, null, (Map)var5_17, null);
        }
        object.zzc((Runnable)object2);
    }
}

