/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.app.Application
 *  android.app.Application$ActivityLifecycleCallbacks
 *  android.content.Context
 *  android.text.TextUtils
 */
package com.google.android.gms.internal.measurement;

import android.app.Application;
import android.content.Context;
import android.support.annotation.WorkerThread;
import android.text.TextUtils;
import com.google.android.gms.common.api.internal.GoogleServices;
import com.google.android.gms.common.internal.Preconditions;
import com.google.android.gms.common.util.Clock;
import com.google.android.gms.common.util.DefaultClock;
import com.google.android.gms.common.wrappers.Wrappers;
import com.google.android.gms.internal.measurement.zzdu;
import com.google.android.gms.internal.measurement.zzdz;
import com.google.android.gms.internal.measurement.zzee;
import com.google.android.gms.internal.measurement.zzeh;
import com.google.android.gms.internal.measurement.zzer;
import com.google.android.gms.internal.measurement.zzez;
import com.google.android.gms.internal.measurement.zzfd;
import com.google.android.gms.internal.measurement.zzfe;
import com.google.android.gms.internal.measurement.zzfg;
import com.google.android.gms.internal.measurement.zzfi;
import com.google.android.gms.internal.measurement.zzfk;
import com.google.android.gms.internal.measurement.zzft;
import com.google.android.gms.internal.measurement.zzfw;
import com.google.android.gms.internal.measurement.zzfy;
import com.google.android.gms.internal.measurement.zzfz;
import com.google.android.gms.internal.measurement.zzgd;
import com.google.android.gms.internal.measurement.zzgi;
import com.google.android.gms.internal.measurement.zzgo;
import com.google.android.gms.internal.measurement.zzhi;
import com.google.android.gms.internal.measurement.zzhj;
import com.google.android.gms.internal.measurement.zzhk;
import com.google.android.gms.internal.measurement.zzhl;
import com.google.android.gms.internal.measurement.zzhm;
import com.google.android.gms.internal.measurement.zzhn;
import com.google.android.gms.internal.measurement.zzif;
import com.google.android.gms.internal.measurement.zzih;
import com.google.android.gms.internal.measurement.zzik;
import com.google.android.gms.internal.measurement.zzjj;
import com.google.android.gms.internal.measurement.zzkd;
import com.google.android.gms.internal.measurement.zzwx;
import com.google.android.gms.measurement.AppMeasurement;
import com.google.firebase.analytics.FirebaseAnalytics;
import java.util.concurrent.atomic.AtomicReference;

public class zzgn
implements zzhk {
    private static volatile zzgn zzaoc;
    private final Clock clock;
    private final long zzaga;
    private final zzee zzahs;
    private final String zzaod;
    private final zzeh zzaoe;
    private final zzft zzaof;
    private final zzfi zzaog;
    private final zzgi zzaoh;
    private final zzjj zzaoi;
    private final AppMeasurement zzaoj;
    private final FirebaseAnalytics zzaok;
    private final zzkd zzaol;
    private final zzfg zzaom;
    private final zzih zzaon;
    private final zzhm zzaoo;
    private final zzdu zzaop;
    private zzfe zzaoq;
    private zzik zzaor;
    private zzer zzaos;
    private zzfd zzaot;
    private zzfz zzaou;
    private Boolean zzaov;
    private long zzaow;
    private int zzaox;
    private int zzaoy;
    private final Context zzqx;
    private boolean zzvn;

    private zzgn(zzhl zzhl2) {
        block2 : {
            String string2;
            Object object;
            block3 : {
                block1 : {
                    this.zzvn = false;
                    Preconditions.checkNotNull(zzhl2);
                    this.zzahs = new zzee(zzhl2.zzqx);
                    zzez.zza(this.zzahs);
                    this.zzqx = zzhl2.zzqx;
                    this.zzaod = zzhl2.zzaod;
                    zzwx.init(this.zzqx);
                    this.clock = DefaultClock.getInstance();
                    this.zzaga = this.clock.currentTimeMillis();
                    this.zzaoe = new zzeh(this);
                    object = new zzft(this);
                    object.zzm();
                    this.zzaof = object;
                    object = new zzfi(this);
                    object.zzm();
                    this.zzaog = object;
                    object = new zzkd(this);
                    object.zzm();
                    this.zzaol = object;
                    object = new zzfg(this);
                    object.zzm();
                    this.zzaom = object;
                    this.zzaop = new zzdu(this);
                    object = new zzih(this);
                    object.zzm();
                    this.zzaon = object;
                    object = new zzhm(this);
                    object.zzm();
                    this.zzaoo = object;
                    this.zzaoj = new AppMeasurement(this);
                    this.zzaok = new FirebaseAnalytics(this);
                    object = new zzjj(this);
                    object.zzm();
                    this.zzaoi = object;
                    object = new zzgi(this);
                    object.zzm();
                    this.zzaoh = object;
                    object = this.zzahs;
                    if (!(this.zzqx.getApplicationContext() instanceof Application)) break block1;
                    object = this.zzfy();
                    if (!(object.getContext().getApplicationContext() instanceof Application)) break block2;
                    string2 = (Application)object.getContext().getApplicationContext();
                    if (object.zzapl == null) {
                        object.zzapl = new zzif((zzhm)object, null);
                    }
                    string2.unregisterActivityLifecycleCallbacks((Application.ActivityLifecycleCallbacks)object.zzapl);
                    string2.registerActivityLifecycleCallbacks((Application.ActivityLifecycleCallbacks)object.zzapl);
                    object = object.zzgi().zzjc();
                    string2 = "Registered activity lifecycle callback";
                    break block3;
                }
                object = this.zzgi().zziy();
                string2 = "Application context is not an Application";
            }
            object.log(string2);
        }
        this.zzaoh.zzc(new zzgo(this, zzhl2));
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public static zzgn zza(Context context, String string2, String string3) {
        Preconditions.checkNotNull(context);
        Preconditions.checkNotNull(context.getApplicationContext());
        if (zzaoc != null) return zzaoc;
        synchronized (zzgn.class) {
            if (zzaoc != null) return zzaoc;
            zzaoc = new zzgn(new zzhl(context, null));
            return zzaoc;
        }
    }

    private static void zza(zzdz object) {
        if (object == null) {
            throw new IllegalStateException("Component not created");
        }
        if (!object.isInitialized()) {
            object = String.valueOf(object.getClass());
            StringBuilder stringBuilder = new StringBuilder(String.valueOf(object).length() + 27);
            stringBuilder.append("Component not initialized: ");
            stringBuilder.append((String)object);
            throw new IllegalStateException(stringBuilder.toString());
        }
    }

    static /* synthetic */ void zza(zzgn zzgn2, zzhl zzhl2) {
        zzgn2.zza(zzhl2);
    }

    private static void zza(zzhi zzhi2) {
        if (zzhi2 == null) {
            throw new IllegalStateException("Component not created");
        }
    }

    private static void zza(zzhj object) {
        if (object == null) {
            throw new IllegalStateException("Component not created");
        }
        if (!object.isInitialized()) {
            object = String.valueOf(object.getClass());
            StringBuilder stringBuilder = new StringBuilder(String.valueOf(object).length() + 27);
            stringBuilder.append("Component not initialized: ");
            stringBuilder.append((String)object);
            throw new IllegalStateException(stringBuilder.toString());
        }
    }

    @WorkerThread
    private final void zza(zzhl object) {
        this.zzgh().zzab();
        zzeh.zzhn();
        object = new zzer(this);
        object.zzm();
        this.zzaos = object;
        object = new zzfd(this);
        object.zzm();
        this.zzaot = object;
        Object object2 = new zzfe(this);
        object2.zzm();
        this.zzaoq = object2;
        object2 = new zzik(this);
        object2.zzm();
        this.zzaor = object2;
        this.zzaol.zzgm();
        this.zzaof.zzgm();
        this.zzaou = new zzfz(this);
        this.zzaot.zzgm();
        this.zzgi().zzja().zzg("App measurement is starting up, version", this.zzaoe.zzgw());
        object2 = this.zzahs;
        this.zzgi().zzja().log("To enable debug logging run: adb shell setprop log.tag.FA VERBOSE");
        object2 = this.zzahs;
        object = object.zzah();
        if (this.zzgg().zzcn((String)object)) {
            object2 = this.zzgi().zzja();
            object = "Faster debug mode event logging enabled. To disable, run:\n  adb shell setprop debug.firebase.analytics.app .none.";
        } else {
            object2 = this.zzgi().zzja();
            object = (object = String.valueOf(object)).length() != 0 ? "To enable faster debug mode event logging run:\n  adb shell setprop debug.firebase.analytics.app ".concat((String)object) : new String("To enable faster debug mode event logging run:\n  adb shell setprop debug.firebase.analytics.app ");
        }
        object2.log((String)object);
        this.zzgi().zzjb().log("Debug-level message logging enabled");
        if (this.zzaox != this.zzaoy) {
            this.zzgi().zziv().zze("Not all components initialized", this.zzaox, this.zzaoy);
        }
        this.zzvn = true;
    }

    private final void zzch() {
        if (!this.zzvn) {
            throw new IllegalStateException("AppMeasurement is not initialized");
        }
    }

    @Override
    public final Context getContext() {
        return this.zzqx;
    }

    @WorkerThread
    public final boolean isEnabled() {
        this.zzgh().zzab();
        this.zzch();
        boolean bl = this.zzaoe.zzho();
        boolean bl2 = false;
        if (bl) {
            return false;
        }
        Boolean bl3 = this.zzaoe.zzhp();
        if (bl3 != null) {
            bl2 = bl3;
        } else if (!GoogleServices.isMeasurementExplicitlyDisabled()) {
            bl2 = true;
        }
        return this.zzgj().zzg(bl2);
    }

    @WorkerThread
    protected final void start() {
        this.zzgh().zzab();
        if (this.zzgj().zzalt.get() == 0L) {
            this.zzgj().zzalt.set(this.clock.currentTimeMillis());
        }
        if (Long.valueOf(this.zzgj().zzaly.get()) == 0L) {
            this.zzgi().zzjc().zzg("Persisting first open", this.zzaga);
            this.zzgj().zzaly.set(this.zzaga);
        }
        if (!this.zzkg()) {
            if (this.isEnabled()) {
                if (!this.zzgg().zzx("android.permission.INTERNET")) {
                    this.zzgi().zziv().log("App is missing INTERNET permission");
                }
                if (!this.zzgg().zzx("android.permission.ACCESS_NETWORK_STATE")) {
                    this.zzgi().zziv().log("App is missing ACCESS_NETWORK_STATE permission");
                }
                zzee zzee2 = this.zzahs;
                if (!Wrappers.packageManager(this.zzqx).isCallerInstantApp() && !this.zzaoe.zzhu()) {
                    if (!zzgd.zza(this.zzqx)) {
                        this.zzgi().zziv().log("AppMeasurementReceiver not registered/enabled");
                    }
                    if (!zzkd.zza(this.zzqx, false)) {
                        this.zzgi().zziv().log("AppMeasurementService not registered/enabled");
                    }
                }
                this.zzgi().zziv().log("Uploading is not possible. App measurement disabled");
                return;
            }
        } else {
            Object object = this.zzahs;
            if (!TextUtils.isEmpty((CharSequence)this.zzfz().getGmpAppId())) {
                object = this.zzgj().zzjj();
                if (object == null) {
                    this.zzgj().zzbt(this.zzfz().getGmpAppId());
                } else if (!object.equals(this.zzfz().getGmpAppId())) {
                    this.zzgi().zzja().log("Rechecking which service to use due to a GMP App Id change");
                    this.zzgj().zzjm();
                    this.zzaor.disconnect();
                    this.zzaor.zzdf();
                    this.zzgj().zzbt(this.zzfz().getGmpAppId());
                    this.zzgj().zzaly.set(this.zzaga);
                    this.zzgj().zzama.zzbv(null);
                }
            }
            this.zzfy().zzbu(this.zzgj().zzama.zzjq());
            object = this.zzahs;
            if (!TextUtils.isEmpty((CharSequence)this.zzfz().getGmpAppId())) {
                boolean bl = this.isEnabled();
                if (!this.zzgj().zzjp() && !this.zzaoe.zzho()) {
                    this.zzgj().zzh(bl ^ true);
                }
                if (!this.zzaoe.zzbc(this.zzfz().zzah()) || bl) {
                    this.zzfy().zzkm();
                }
                this.zzga().zza(new AtomicReference<String>());
            }
        }
    }

    final void zzb(zzdz zzdz2) {
        ++this.zzaox;
    }

    final void zzb(zzhj zzhj2) {
        ++this.zzaox;
    }

    @Override
    public final Clock zzbt() {
        return this.clock;
    }

    final void zzfu() {
        zzee zzee2 = this.zzahs;
        throw new IllegalStateException("Unexpected call on client side");
    }

    final void zzfv() {
        zzee zzee2 = this.zzahs;
    }

    public final zzdu zzfx() {
        if (this.zzaop == null) {
            throw new IllegalStateException("Component not created");
        }
        return this.zzaop;
    }

    public final zzhm zzfy() {
        zzgn.zza(this.zzaoo);
        return this.zzaoo;
    }

    public final zzfd zzfz() {
        zzgn.zza(this.zzaot);
        return this.zzaot;
    }

    public final zzik zzga() {
        zzgn.zza(this.zzaor);
        return this.zzaor;
    }

    public final zzih zzgb() {
        zzgn.zza(this.zzaon);
        return this.zzaon;
    }

    public final zzfe zzgc() {
        zzgn.zza(this.zzaoq);
        return this.zzaoq;
    }

    public final zzjj zzgd() {
        zzgn.zza(this.zzaoi);
        return this.zzaoi;
    }

    public final zzer zzge() {
        zzgn.zza(this.zzaos);
        return this.zzaos;
    }

    public final zzfg zzgf() {
        zzgn.zza((zzhi)this.zzaom);
        return this.zzaom;
    }

    public final zzkd zzgg() {
        zzgn.zza((zzhi)this.zzaol);
        return this.zzaol;
    }

    @Override
    public final zzgi zzgh() {
        zzgn.zza(this.zzaoh);
        return this.zzaoh;
    }

    @Override
    public final zzfi zzgi() {
        zzgn.zza(this.zzaog);
        return this.zzaog;
    }

    public final zzft zzgj() {
        zzgn.zza((zzhi)this.zzaof);
        return this.zzaof;
    }

    public final zzeh zzgk() {
        return this.zzaoe;
    }

    @Override
    public final zzee zzgl() {
        return this.zzahs;
    }

    public final zzfi zzjy() {
        if (this.zzaog != null && this.zzaog.isInitialized()) {
            return this.zzaog;
        }
        return null;
    }

    public final zzfz zzjz() {
        return this.zzaou;
    }

    final zzgi zzka() {
        return this.zzaoh;
    }

    public final AppMeasurement zzkb() {
        return this.zzaoj;
    }

    public final FirebaseAnalytics zzkc() {
        return this.zzaok;
    }

    public final String zzkd() {
        return this.zzaod;
    }

    final long zzke() {
        Long l = this.zzgj().zzaly.get();
        if (l == 0L) {
            return this.zzaga;
        }
        return Math.min(this.zzaga, l);
    }

    final void zzkf() {
        ++this.zzaoy;
    }

    @WorkerThread
    protected final boolean zzkg() {
        block4 : {
            boolean bl;
            block5 : {
                block6 : {
                    boolean bl2;
                    this.zzch();
                    this.zzgh().zzab();
                    if (this.zzaov != null && this.zzaow != 0L && (this.zzaov == null || this.zzaov.booleanValue() || Math.abs(this.clock.elapsedRealtime() - this.zzaow) <= 1000L)) break block4;
                    this.zzaow = this.clock.elapsedRealtime();
                    zzee zzee2 = this.zzahs;
                    boolean bl3 = this.zzgg().zzx("android.permission.INTERNET");
                    bl = bl2 = false;
                    if (!bl3) break block5;
                    bl = bl2;
                    if (!this.zzgg().zzx("android.permission.ACCESS_NETWORK_STATE")) break block5;
                    if (Wrappers.packageManager(this.zzqx).isCallerInstantApp() || this.zzaoe.zzhu()) break block6;
                    bl = bl2;
                    if (!zzgd.zza(this.zzqx)) break block5;
                    bl = bl2;
                    if (!zzkd.zza(this.zzqx, false)) break block5;
                }
                bl = true;
            }
            this.zzaov = bl;
            if (this.zzaov.booleanValue()) {
                this.zzaov = this.zzgg().zzck(this.zzfz().getGmpAppId());
            }
        }
        return this.zzaov;
    }
}

