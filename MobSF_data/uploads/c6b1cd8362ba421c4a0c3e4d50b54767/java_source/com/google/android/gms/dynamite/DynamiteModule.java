/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.content.ContentResolver
 *  android.content.Context
 *  android.database.Cursor
 *  android.net.Uri
 *  android.os.IBinder
 *  android.os.RemoteException
 *  android.util.Log
 *  javax.annotation.concurrent.GuardedBy
 */
package com.google.android.gms.dynamite;

import android.content.ContentResolver;
import android.content.Context;
import android.database.Cursor;
import android.net.Uri;
import android.os.IBinder;
import android.os.RemoteException;
import android.util.Log;
import com.google.android.gms.common.GoogleApiAvailabilityLight;
import com.google.android.gms.common.internal.Preconditions;
import com.google.android.gms.common.util.DynamiteApi;
import com.google.android.gms.common.util.VisibleForTesting;
import com.google.android.gms.dynamic.IObjectWrapper;
import com.google.android.gms.dynamic.ObjectWrapper;
import com.google.android.gms.dynamite.IDynamiteLoader;
import com.google.android.gms.dynamite.IDynamiteLoaderV2;
import com.google.android.gms.dynamite.zzc;
import com.google.android.gms.dynamite.zzd;
import com.google.android.gms.dynamite.zze;
import com.google.android.gms.dynamite.zzf;
import com.google.android.gms.dynamite.zzg;
import com.google.android.gms.dynamite.zzh;
import java.io.Serializable;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import javax.annotation.concurrent.GuardedBy;

public final class DynamiteModule {
    public static final VersionPolicy PREFER_HIGHEST_OR_LOCAL_VERSION;
    public static final VersionPolicy PREFER_HIGHEST_OR_LOCAL_VERSION_NO_FORCE_STAGING;
    public static final VersionPolicy PREFER_HIGHEST_OR_REMOTE_VERSION;
    public static final VersionPolicy PREFER_HIGHEST_OR_REMOTE_VERSION_NO_FORCE_STAGING;
    public static final VersionPolicy PREFER_LOCAL;
    public static final VersionPolicy PREFER_REMOTE;
    @GuardedBy(value="DynamiteModule.class")
    private static Boolean zzabr;
    @GuardedBy(value="DynamiteModule.class")
    private static IDynamiteLoader zzabs;
    @GuardedBy(value="DynamiteModule.class")
    private static IDynamiteLoaderV2 zzabt;
    @GuardedBy(value="DynamiteModule.class")
    private static String zzabu;
    private static final ThreadLocal<zza> zzabv;
    private static final VersionPolicy.IVersions zzabw;
    private final Context zzabx;

    static {
        zzabv = new ThreadLocal();
        zzabw = new com.google.android.gms.dynamite.zza();
        PREFER_REMOTE = new com.google.android.gms.dynamite.zzb();
        PREFER_LOCAL = new zzc();
        PREFER_HIGHEST_OR_LOCAL_VERSION = new zzd();
        PREFER_HIGHEST_OR_LOCAL_VERSION_NO_FORCE_STAGING = new zze();
        PREFER_HIGHEST_OR_REMOTE_VERSION = new zzf();
        PREFER_HIGHEST_OR_REMOTE_VERSION_NO_FORCE_STAGING = new zzg();
    }

    private DynamiteModule(Context context) {
        this.zzabx = Preconditions.checkNotNull(context);
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public static int getLocalVersion(Context object, String string2) {
        try {
            object = object.getApplicationContext().getClassLoader();
            Object object2 = new StringBuilder(String.valueOf(string2).length() + 61);
            object2.append("com.google.android.gms.dynamite.descriptors.");
            object2.append(string2);
            object2.append(".ModuleDescriptor");
            object2 = object.loadClass(object2.toString());
            object = object2.getDeclaredField("MODULE_ID");
            object2 = object2.getDeclaredField("MODULE_VERSION");
            if (object.get(null).equals(string2)) return object2.getInt(null);
            object = String.valueOf(object.get(null));
            object2 = new StringBuilder(String.valueOf(object).length() + 51 + String.valueOf(string2).length());
            object2.append("Module descriptor id '");
            object2.append((String)object);
            object2.append("' didn't match expected id '");
            object2.append(string2);
            object2.append("'");
            Log.e((String)"DynamiteModule", (String)object2.toString());
            return 0;
        }
        catch (Exception exception) {
            String string3 = String.valueOf(exception.getMessage());
            string3 = string3.length() != 0 ? "Failed to load module descriptor class: ".concat(string3) : new String("Failed to load module descriptor class: ");
            Log.e((String)"DynamiteModule", (String)string3);
            return 0;
        }
        catch (ClassNotFoundException classNotFoundException) {}
        StringBuilder stringBuilder = new StringBuilder(String.valueOf(string2).length() + 45);
        stringBuilder.append("Local module descriptor class for ");
        stringBuilder.append(string2);
        stringBuilder.append(" not found.");
        Log.w((String)"DynamiteModule", (String)stringBuilder.toString());
        return 0;
    }

    public static Uri getQueryUri(String string2, boolean bl) {
        String string3 = bl ? "api_force_staging" : "api";
        StringBuilder stringBuilder = new StringBuilder(String.valueOf(string3).length() + 42 + String.valueOf(string2).length());
        stringBuilder.append("content://com.google.android.gms.chimera/");
        stringBuilder.append(string3);
        stringBuilder.append("/");
        stringBuilder.append(string2);
        return Uri.parse((String)stringBuilder.toString());
    }

    public static int getRemoteVersion(Context context, String string2) {
        return DynamiteModule.getRemoteVersion(context, string2, false);
    }

    /*
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Converted monitor instructions to comments
     * Lifted jumps to return sites
     */
    public static int getRemoteVersion(Context context, String string2, boolean bl) {
        Object object;
        block23 : {
            block27 : {
                block28 : {
                    block25 : {
                        block21 : {
                            int n;
                            Serializable serializable;
                            block22 : {
                                Object object2;
                                block26 : {
                                    block24 : {
                                        // MONITORENTER : com.google.android.gms.dynamite.DynamiteModule.class
                                        serializable = zzabr;
                                        object = serializable;
                                        if (serializable != null) break block23;
                                        serializable = context.getApplicationContext().getClassLoader().loadClass(DynamiteLoaderClassLoader.class.getName());
                                        object = serializable.getDeclaredField("sClassLoader");
                                        // MONITORENTER : serializable
                                        object2 = (ClassLoader)object.get(null);
                                        if (object2 == null) break block24;
                                        if (object2 != ClassLoader.getSystemClassLoader()) {
                                            DynamiteModule.zza(object2);
                                            break block21;
                                        }
                                        break block25;
                                    }
                                    if (!"com.google.android.gms".equals(context.getApplicationContext().getPackageName())) break block26;
                                    object.set(null, ClassLoader.getSystemClassLoader());
                                    break block25;
                                }
                                try {
                                    n = DynamiteModule.zzb(context, string2, bl);
                                    if (zzabu == null) break block22;
                                    if (zzabu.isEmpty()) {
                                        return n;
                                    }
                                    object2 = new zzh(zzabu, ClassLoader.getSystemClassLoader());
                                    DynamiteModule.zza(object2);
                                    object.set(null, object2);
                                    zzabr = Boolean.TRUE;
                                    // MONITOREXIT : serializable
                                }
                                catch (LoadingException loadingException) {}
                                return n;
                            }
                            // MONITOREXIT : serializable
                            // MONITOREXIT : com.google.android.gms.dynamite.DynamiteModule.class
                            return n;
                            catch (ClassNotFoundException | IllegalAccessException | NoSuchFieldException reflectiveOperationException) {
                                object = String.valueOf(reflectiveOperationException);
                                serializable = new StringBuilder(String.valueOf(object).length() + 30);
                                serializable.append("Failed to load module via V2: ");
                                serializable.append((String)object);
                                Log.w((String)"DynamiteModule", (String)serializable.toString());
                                object = Boolean.FALSE;
                            }
                            break block27;
                            catch (LoadingException loadingException) {}
                        }
                        object = Boolean.TRUE;
                        break block28;
                        object.set(null, ClassLoader.getSystemClassLoader());
                    }
                    object = Boolean.FALSE;
                }
                // MONITOREXIT : serializable
            }
            zzabr = object;
        }
        // MONITOREXIT : com.google.android.gms.dynamite.DynamiteModule.class
        if (!object.booleanValue()) return DynamiteModule.zza(context, string2, bl);
        return DynamiteModule.zzb(context, string2, bl);
        catch (LoadingException loadingException) {
            String string3 = String.valueOf(loadingException.getMessage());
            string3 = string3.length() != 0 ? "Failed to retrieve remote module version: ".concat(string3) : new String("Failed to retrieve remote module version: ");
            Log.w((String)"DynamiteModule", (String)string3);
            return 0;
        }
    }

    @VisibleForTesting
    public static Boolean getUseV2ForTesting() {
        synchronized (DynamiteModule.class) {
            Boolean bl = zzabr;
            return bl;
        }
    }

    /*
     * Exception decompiling
     */
    public static DynamiteModule load(Context var0, VersionPolicy var1_2, String var2_3) throws LoadingException {
        // This method has failed to decompile.  When submitting a bug report, please provide this stack trace, and (if you hold appropriate legal rights) the relevant class file.
        // org.benf.cfr.reader.util.ConfusedCFRException: Tried to end blocks [0[TRYBLOCK]], but top level block is 5[CATCHBLOCK]
        // org.benf.cfr.reader.bytecode.analysis.opgraph.Op04StructuredStatement.processEndingBlocks(Op04StructuredStatement.java:416)
        // org.benf.cfr.reader.bytecode.analysis.opgraph.Op04StructuredStatement.buildNestedBlocks(Op04StructuredStatement.java:468)
        // org.benf.cfr.reader.bytecode.analysis.opgraph.Op03SimpleStatement.createInitialStructuredBlock(Op03SimpleStatement.java:2960)
        // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisInner(CodeAnalyser.java:818)
        // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisOrWrapFail(CodeAnalyser.java:196)
        // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysis(CodeAnalyser.java:141)
        // org.benf.cfr.reader.entities.attributes.AttributeCode.analyse(AttributeCode.java:95)
        // org.benf.cfr.reader.entities.Method.analyse(Method.java:372)
        // org.benf.cfr.reader.entities.ClassFile.analyseMid(ClassFile.java:867)
        // org.benf.cfr.reader.entities.ClassFile.analyseTop(ClassFile.java:768)
        // org.benf.cfr.reader.Main.doJar(Main.java:141)
        // org.benf.cfr.reader.Main.main(Main.java:242)
        throw new IllegalStateException("Decompilation failed");
    }

    public static Cursor queryForDynamiteModule(Context context, String string2, boolean bl) {
        return context.getContentResolver().query(DynamiteModule.getQueryUri(string2, bl), null, null, null, null);
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @VisibleForTesting
    public static void resetInternalStateForTesting() {
        synchronized (DynamiteModule.class) {
            zzabs = null;
            zzabt = null;
            zzabu = null;
            zzabr = null;
            synchronized (DynamiteLoaderClassLoader.class) {
                DynamiteLoaderClassLoader.sClassLoader = null;
                return;
            }
        }
    }

    @VisibleForTesting
    public static void setUseV2ForTesting(Boolean bl) {
        synchronized (DynamiteModule.class) {
            zzabr = bl;
            return;
        }
    }

    private static int zza(Context context, String string2, boolean bl) {
        IDynamiteLoader iDynamiteLoader = DynamiteModule.zzg(context);
        if (iDynamiteLoader == null) {
            return 0;
        }
        try {
            int n = iDynamiteLoader.getModuleVersion2(ObjectWrapper.wrap(context), string2, bl);
            return n;
        }
        catch (RemoteException remoteException) {
            String string3 = String.valueOf(remoteException.getMessage());
            string3 = string3.length() != 0 ? "Failed to retrieve remote module version: ".concat(string3) : new String("Failed to retrieve remote module version: ");
            Log.w((String)"DynamiteModule", (String)string3);
            return 0;
        }
    }

    private static Context zza(Context context, String string2, int n, Cursor cursor, IDynamiteLoaderV2 iDynamiteLoaderV2) {
        try {
            context = (Context)ObjectWrapper.unwrap(iDynamiteLoaderV2.loadModule2(ObjectWrapper.wrap(context), string2, n, ObjectWrapper.wrap(cursor)));
            return context;
        }
        catch (Exception exception) {
            String string3 = String.valueOf(exception.toString());
            string3 = string3.length() != 0 ? "Failed to load DynamiteLoader: ".concat(string3) : new String("Failed to load DynamiteLoader: ");
            Log.e((String)"DynamiteModule", (String)string3);
            return null;
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Converted monitor instructions to comments
     * Lifted jumps to return sites
     */
    private static DynamiteModule zza(Context context, String string2, int n) throws LoadingException {
        // MONITORENTER : com.google.android.gms.dynamite.DynamiteModule.class
        Boolean bl = zzabr;
        // MONITOREXIT : com.google.android.gms.dynamite.DynamiteModule.class
        if (bl == null) {
            throw new LoadingException("Failed to determine which loading route to use.", null);
        }
        if (bl == false) return DynamiteModule.zzb(context, string2, n);
        return DynamiteModule.zzc(context, string2, n);
    }

    @GuardedBy(value="DynamiteModule.class")
    private static void zza(ClassLoader classLoader) throws LoadingException {
        try {
            zzabt = IDynamiteLoaderV2.Stub.asInterface((IBinder)classLoader.loadClass("com.google.android.gms.dynamiteloader.DynamiteLoaderV2").getConstructor(new Class[0]).newInstance(new Object[0]));
            return;
        }
        catch (ClassNotFoundException | IllegalAccessException | InstantiationException | NoSuchMethodException | InvocationTargetException reflectiveOperationException) {
            throw new LoadingException("Failed to instantiate dynamite loader", reflectiveOperationException, null);
        }
    }

    /*
     * Exception decompiling
     */
    private static int zzb(Context var0, String var1_1, boolean var2_5) throws LoadingException {
        // This method has failed to decompile.  When submitting a bug report, please provide this stack trace, and (if you hold appropriate legal rights) the relevant class file.
        // java.lang.IllegalStateException: Backjump on non jumping statement [6] lbl40 : TryStatement: try { 7[TRYBLOCK]

        // org.benf.cfr.reader.bytecode.analysis.opgraph.op3rewriters.Cleaner$1.call(Cleaner.java:44)
        // org.benf.cfr.reader.bytecode.analysis.opgraph.op3rewriters.Cleaner$1.call(Cleaner.java:22)
        // org.benf.cfr.reader.util.graph.GraphVisitorDFS.process(GraphVisitorDFS.java:67)
        // org.benf.cfr.reader.bytecode.analysis.opgraph.op3rewriters.Cleaner.removeUnreachableCode(Cleaner.java:54)
        // org.benf.cfr.reader.bytecode.analysis.opgraph.op3rewriters.RemoveDeterministicJumps.apply(RemoveDeterministicJumps.java:35)
        // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisInner(CodeAnalyser.java:497)
        // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisOrWrapFail(CodeAnalyser.java:196)
        // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysis(CodeAnalyser.java:141)
        // org.benf.cfr.reader.entities.attributes.AttributeCode.analyse(AttributeCode.java:95)
        // org.benf.cfr.reader.entities.Method.analyse(Method.java:372)
        // org.benf.cfr.reader.entities.ClassFile.analyseMid(ClassFile.java:867)
        // org.benf.cfr.reader.entities.ClassFile.analyseTop(ClassFile.java:768)
        // org.benf.cfr.reader.Main.doJar(Main.java:141)
        // org.benf.cfr.reader.Main.main(Main.java:242)
        throw new IllegalStateException("Decompilation failed");
    }

    private static DynamiteModule zzb(Context object, String string2, int n) throws LoadingException {
        Object object2 = new StringBuilder(String.valueOf(string2).length() + 51);
        object2.append("Selected remote version of ");
        object2.append(string2);
        object2.append(", version >= ");
        object2.append(n);
        Log.i((String)"DynamiteModule", (String)object2.toString());
        object2 = DynamiteModule.zzg(object);
        if (object2 == null) {
            throw new LoadingException("Failed to create IDynamiteLoader.", null);
        }
        try {
            object = object2.createModuleContext(ObjectWrapper.wrap(object), string2, n);
        }
        catch (RemoteException remoteException) {
            throw new LoadingException("Failed to load remote module.", (Throwable)remoteException, null);
        }
        if (ObjectWrapper.unwrap((IObjectWrapper)object) == null) {
            throw new LoadingException("Failed to load remote module.", null);
        }
        return new DynamiteModule((Context)ObjectWrapper.unwrap((IObjectWrapper)object));
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Converted monitor instructions to comments
     * Lifted jumps to return sites
     */
    private static DynamiteModule zzc(Context context, String string2, int n) throws LoadingException {
        Object object = new StringBuilder(String.valueOf(string2).length() + 51);
        object.append("Selected remote version of ");
        object.append(string2);
        object.append(", version >= ");
        object.append(n);
        Log.i((String)"DynamiteModule", (String)object.toString());
        // MONITORENTER : com.google.android.gms.dynamite.DynamiteModule.class
        object = zzabt;
        // MONITOREXIT : com.google.android.gms.dynamite.DynamiteModule.class
        if (object == null) {
            throw new LoadingException("DynamiteLoaderV2 was not cached.", null);
        }
        zza zza2 = zzabv.get();
        if (zza2 == null) throw new LoadingException("No result cursor", null);
        if (zza2.zzaby == null) {
            throw new LoadingException("No result cursor", null);
        }
        if ((context = DynamiteModule.zza(context.getApplicationContext(), string2, n, zza2.zzaby, (IDynamiteLoaderV2)object)) != null) return new DynamiteModule(context);
        throw new LoadingException("Failed to get module context", null);
    }

    private static DynamiteModule zzd(Context context, String string2) {
        string2 = (string2 = String.valueOf(string2)).length() != 0 ? "Selected local version of ".concat(string2) : new String("Selected local version of ");
        Log.i((String)"DynamiteModule", (String)string2);
        return new DynamiteModule(context.getApplicationContext());
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    private static IDynamiteLoader zzg(Context object) {
        synchronized (DynamiteModule.class) {
            if (zzabs != null) {
                return zzabs;
            }
            if (GoogleApiAvailabilityLight.getInstance().isGooglePlayServicesAvailable((Context)object) != 0) {
                return null;
            }
            try {
                object = IDynamiteLoader.Stub.asInterface((IBinder)object.createPackageContext("com.google.android.gms", 3).getClassLoader().loadClass("com.google.android.gms.chimera.container.DynamiteLoaderImpl").newInstance());
                if (object == null) return null;
                zzabs = object;
            }
            catch (Exception exception) {
                String string2 = String.valueOf(exception.getMessage());
                string2 = string2.length() != 0 ? "Failed to load IDynamiteLoader from GmsCore: ".concat(string2) : new String("Failed to load IDynamiteLoader from GmsCore: ");
                Log.e((String)"DynamiteModule", (String)string2);
            }
            return object;
            return null;
        }
    }

    public final Context getModuleContext() {
        return this.zzabx;
    }

    public final IBinder instantiate(String string2) throws LoadingException {
        try {
            IBinder iBinder = (IBinder)this.zzabx.getClassLoader().loadClass(string2).newInstance();
            return iBinder;
        }
        catch (ClassNotFoundException | IllegalAccessException | InstantiationException reflectiveOperationException) {
            string2 = String.valueOf(string2);
            string2 = string2.length() != 0 ? "Failed to instantiate module class: ".concat(string2) : new String("Failed to instantiate module class: ");
            throw new LoadingException(string2, reflectiveOperationException, null);
        }
    }

    @DynamiteApi
    public static class DynamiteLoaderClassLoader {
        @GuardedBy(value="DynamiteLoaderClassLoader.class")
        public static ClassLoader sClassLoader;
    }

    public static class LoadingException
    extends Exception {
        private LoadingException(String string2) {
            super(string2);
        }

        /* synthetic */ LoadingException(String string2, com.google.android.gms.dynamite.zza zza2) {
            this(string2);
        }

        private LoadingException(String string2, Throwable throwable) {
            super(string2, throwable);
        }

        /* synthetic */ LoadingException(String string2, Throwable throwable, com.google.android.gms.dynamite.zza zza2) {
            this(string2, throwable);
        }
    }

    public static interface VersionPolicy {
        public SelectionResult selectModule(Context var1, String var2, IVersions var3) throws LoadingException;

        public static interface IVersions {
            public int getLocalVersion(Context var1, String var2);

            public int getRemoteVersion(Context var1, String var2, boolean var3) throws LoadingException;
        }

        public static class SelectionResult {
            public int localVersion = 0;
            public int remoteVersion = 0;
            public int selection = 0;
        }

    }

    private static final class zza {
        public Cursor zzaby;

        private zza() {
        }

        /* synthetic */ zza(com.google.android.gms.dynamite.zza zza2) {
            this();
        }
    }

    private static final class zzb
    implements VersionPolicy.IVersions {
        private final int zzabz;
        private final int zzaca;

        public zzb(int n, int n2) {
            this.zzabz = n;
            this.zzaca = 0;
        }

        @Override
        public final int getLocalVersion(Context context, String string2) {
            return this.zzabz;
        }

        @Override
        public final int getRemoteVersion(Context context, String string2, boolean bl) {
            return 0;
        }
    }

}

