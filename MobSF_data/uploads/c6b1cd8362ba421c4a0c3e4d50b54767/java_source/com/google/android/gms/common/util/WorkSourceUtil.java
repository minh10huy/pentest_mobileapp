/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.annotation.SuppressLint
 *  android.content.Context
 *  android.content.pm.ApplicationInfo
 *  android.content.pm.PackageManager
 *  android.content.pm.PackageManager$NameNotFoundException
 *  android.os.Process
 *  android.os.WorkSource
 *  android.util.Log
 */
package com.google.android.gms.common.util;

import android.annotation.SuppressLint;
import android.content.Context;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageManager;
import android.os.Process;
import android.os.WorkSource;
import android.support.annotation.Nullable;
import android.util.Log;
import com.google.android.gms.common.util.PlatformVersion;
import com.google.android.gms.common.util.Strings;
import com.google.android.gms.common.wrappers.Wrappers;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class WorkSourceUtil {
    public static final String TAG = "WorkSourceUtil";
    private static final int zzaam = Process.myUid();
    private static final Method zzaan = WorkSourceUtil.zzdf();
    private static final Method zzaao = WorkSourceUtil.zzdg();
    private static final Method zzaap = WorkSourceUtil.zzdh();
    private static final Method zzaaq = WorkSourceUtil.zzdi();
    private static final Method zzaar = WorkSourceUtil.zzdj();
    private static final Method zzaas = WorkSourceUtil.zzdk();
    private static final Method zzaat = WorkSourceUtil.zzdl();

    private WorkSourceUtil() {
    }

    public static void add(WorkSource workSource, int n, @Nullable String string2) {
        if (zzaao != null) {
            String string3 = string2;
            if (string2 == null) {
                string3 = "";
            }
            try {
                zzaao.invoke((Object)workSource, n, string3);
                return;
            }
            catch (Exception exception) {
                Log.wtf((String)TAG, (String)"Unable to assign blame through WorkSource", (Throwable)exception);
                return;
            }
        }
        if (zzaan != null) {
            try {
                zzaan.invoke((Object)workSource, n);
                return;
            }
            catch (Exception exception) {
                Log.wtf((String)TAG, (String)"Unable to assign blame through WorkSource", (Throwable)exception);
            }
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @Nullable
    public static WorkSource fromPackage(Context object, @Nullable String string2) {
        if (object != null && object.getPackageManager() != null) {
            block4 : {
                if (string2 == null) {
                    return null;
                }
                try {
                    object = Wrappers.packageManager((Context)object).getApplicationInfo(string2, 0);
                    if (object != null) break block4;
                }
                catch (PackageManager.NameNotFoundException nameNotFoundException) {}
                object = String.valueOf(string2);
                object = object.length() != 0 ? "Could not get applicationInfo from package: ".concat((String)object) : new String("Could not get applicationInfo from package: ");
                Log.e((String)TAG, (String)object);
                return null;
            }
            return WorkSourceUtil.fromUidAndPackage(object.uid, string2);
            String string3 = String.valueOf(string2);
            string3 = string3.length() != 0 ? "Could not find package: ".concat(string3) : new String("Could not find package: ");
            Log.e((String)TAG, (String)string3);
        }
        return null;
    }

    public static WorkSource fromPackageAndModuleExperimentalPi(Context context, String string2, String string3) {
        if (context != null && context.getPackageManager() != null && string3 != null && string2 != null) {
            int n = WorkSourceUtil.zzc(context, string2);
            if (n < 0) {
                return null;
            }
            context = new WorkSource();
            if (zzaas != null && zzaat != null) {
                try {
                    Object object = zzaas.invoke((Object)context, new Object[0]);
                    if (n != zzaam) {
                        zzaat.invoke(object, n, string2);
                    }
                    zzaat.invoke(object, zzaam, string3);
                    return context;
                }
                catch (Exception exception) {
                    Log.w((String)TAG, (String)"Unable to assign chained blame through WorkSource", (Throwable)exception);
                    return context;
                }
            }
            WorkSourceUtil.add((WorkSource)context, n, string2);
            return context;
        }
        Log.w((String)TAG, (String)"Unexpected null arguments");
        return null;
    }

    public static WorkSource fromUidAndPackage(int n, String string2) {
        WorkSource workSource = new WorkSource();
        WorkSourceUtil.add(workSource, n, string2);
        return workSource;
    }

    public static int get(WorkSource workSource, int n) {
        if (zzaaq != null) {
            try {
                n = (Integer)zzaaq.invoke((Object)workSource, n);
                return n;
            }
            catch (Exception exception) {
                Log.wtf((String)TAG, (String)"Unable to assign blame through WorkSource", (Throwable)exception);
            }
        }
        return 0;
    }

    @Nullable
    public static String getName(WorkSource object, int n) {
        if (zzaar != null) {
            try {
                object = (String)zzaar.invoke(object, n);
                return object;
            }
            catch (Exception exception) {
                Log.wtf((String)TAG, (String)"Unable to assign blame through WorkSource", (Throwable)exception);
            }
        }
        return null;
    }

    public static List<String> getNames(@Nullable WorkSource workSource) {
        int n = workSource == null ? 0 : WorkSourceUtil.size(workSource);
        if (n == 0) {
            return Collections.emptyList();
        }
        ArrayList<String> arrayList = new ArrayList<String>();
        for (int i = 0; i < n; ++i) {
            String string2 = WorkSourceUtil.getName(workSource, i);
            if (Strings.isEmptyOrWhitespace(string2)) continue;
            arrayList.add(string2);
        }
        return arrayList;
    }

    public static boolean hasWorkSourcePermission(Context context) {
        if (context == null) {
            return false;
        }
        if (context.getPackageManager() == null) {
            return false;
        }
        if (Wrappers.packageManager(context).checkPermission("android.permission.UPDATE_DEVICE_STATS", context.getPackageName()) == 0) {
            return true;
        }
        return false;
    }

    public static int size(WorkSource workSource) {
        if (zzaap != null) {
            try {
                int n = (Integer)zzaap.invoke((Object)workSource, new Object[0]);
                return n;
            }
            catch (Exception exception) {
                Log.wtf((String)TAG, (String)"Unable to assign blame through WorkSource", (Throwable)exception);
            }
        }
        return 0;
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    private static int zzc(Context object, String string2) {
        block2 : {
            try {
                object = Wrappers.packageManager((Context)object).getApplicationInfo(string2, 0);
                if (object != null) break block2;
            }
            catch (PackageManager.NameNotFoundException nameNotFoundException) {}
            object = String.valueOf(string2);
            object = object.length() != 0 ? "Could not get applicationInfo from package: ".concat((String)object) : new String("Could not get applicationInfo from package: ");
            Log.e((String)TAG, (String)object);
            return -1;
        }
        return object.uid;
        String string3 = String.valueOf(string2);
        string3 = string3.length() != 0 ? "Could not find package: ".concat(string3) : new String("Could not find package: ");
        Log.e((String)TAG, (String)string3);
        return -1;
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    private static Method zzdf() {
        try {
            return WorkSource.class.getMethod("add", Integer.TYPE);
        }
        catch (Exception exception) {
            return null;
        }
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    private static Method zzdg() {
        if (!PlatformVersion.isAtLeastJellyBeanMR2()) return null;
        try {
            return WorkSource.class.getMethod("add", Integer.TYPE, String.class);
        }
        catch (Exception exception) {
            return null;
        }
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    private static Method zzdh() {
        try {
            return WorkSource.class.getMethod("size", new Class[0]);
        }
        catch (Exception exception) {
            return null;
        }
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    private static Method zzdi() {
        try {
            return WorkSource.class.getMethod("get", Integer.TYPE);
        }
        catch (Exception exception) {
            return null;
        }
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    private static Method zzdj() {
        if (!PlatformVersion.isAtLeastJellyBeanMR2()) return null;
        try {
            return WorkSource.class.getMethod("getName", Integer.TYPE);
        }
        catch (Exception exception) {
            return null;
        }
    }

    private static final Method zzdk() {
        if (PlatformVersion.isAtLeastP()) {
            try {
                Method method = WorkSource.class.getMethod("createWorkChain", new Class[0]);
                return method;
            }
            catch (Exception exception) {
                Log.w((String)TAG, (String)"Missing WorkChain API createWorkChain", (Throwable)exception);
            }
        }
        return null;
    }

    @SuppressLint(value={"PrivateApi"})
    private static final Method zzdl() {
        if (PlatformVersion.isAtLeastP()) {
            try {
                Method method = Class.forName("android.os.WorkSource$WorkChain").getMethod("addNode", Integer.TYPE, String.class);
                return method;
            }
            catch (Exception exception) {
                Log.w((String)TAG, (String)"Missing WorkChain class", (Throwable)exception);
            }
        }
        return null;
    }
}

