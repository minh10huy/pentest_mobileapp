/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.content.ContentValues
 *  android.content.Context
 *  android.database.Cursor
 *  android.database.sqlite.SQLiteDatabase
 *  android.util.Log
 *  javax.annotation.Nullable
 */
package com.google.android.gms.common.util;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.util.Log;
import com.google.android.gms.common.internal.Preconditions;
import com.google.android.gms.common.util.CollectionUtils;
import com.google.android.gms.internal.stable.zzk;
import java.io.File;
import java.nio.charset.Charset;
import javax.annotation.Nullable;

public final class DbUtils {
    private DbUtils() {
    }

    public static void clearDatabase(SQLiteDatabase sQLiteDatabase) {
        DbUtils.zza(sQLiteDatabase, "table", "sqlite_sequence", "android_metadata");
        DbUtils.zza(sQLiteDatabase, "trigger", new String[0]);
        DbUtils.zza(sQLiteDatabase, "view", new String[0]);
    }

    public static long countCurrentRowBytes(Cursor cursor) {
        return DbUtils.countCurrentRowBytes(cursor, Charset.forName("UTF-8"));
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Lifted jumps to return sites
     */
    public static long countCurrentRowBytes(Cursor var0, Charset var1_1) {
        var4_2 = 0L;
        var2_3 = 0;
        while (var2_3 < var0.getColumnCount()) {
            block6 : {
                block7 : {
                    switch (var0.getType(var2_3)) {
                        default: {
                            break block6;
                        }
                        case 4: {
                            var3_4 = var0.getBlob(var2_3).length;
                            ** GOTO lbl12
                        }
                        case 3: {
                            var3_4 = var0.getString(var2_3).getBytes(var1_1).length;
lbl12: // 2 sources:
                            var6_5 = var3_4;
                            break block7;
                        }
                        case 0: 
                        case 1: 
                        case 2: 
                    }
                    var6_5 = 4L;
                }
                var4_2 += var6_5;
            }
            ++var2_3;
        }
        return var4_2;
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public static long getDatabaseSize(Context object, String string2) {
        try {
            object = object.getDatabasePath(string2);
            if (object == null) return 0L;
            return object.length();
        }
        catch (SecurityException securityException) {}
        String string3 = String.valueOf(string2);
        string3 = string3.length() != 0 ? "Failed to get db size for ".concat(string3) : new String("Failed to get db size for ");
        Log.w((String)"DbUtils", (String)string3);
        return 0L;
    }

    @Nullable
    public static Integer getIntegerFromCursor(Cursor cursor, int n) {
        return DbUtils.getIntegerFromCursor(cursor, n, null);
    }

    @Nullable
    public static Integer getIntegerFromCursor(Cursor cursor, int n, @Nullable Integer n2) {
        if (n >= 0) {
            if (cursor.isNull(n)) {
                return n2;
            }
            return cursor.getInt(n);
        }
        return n2;
    }

    @Nullable
    public static Long getLongFromCursor(Cursor cursor, int n) {
        return DbUtils.getLongFromCursor(cursor, n, null);
    }

    @Nullable
    public static Long getLongFromCursor(Cursor cursor, int n, @Nullable Long l) {
        if (n >= 0) {
            if (cursor.isNull(n)) {
                return l;
            }
            return cursor.getLong(n);
        }
        return l;
    }

    @Nullable
    public static String getStringFromCursor(Cursor cursor, int n) {
        return DbUtils.getStringFromCursor(cursor, n, null);
    }

    @Nullable
    public static String getStringFromCursor(Cursor cursor, int n, @Nullable String string2) {
        if (n >= 0) {
            if (cursor.isNull(n)) {
                return string2;
            }
            return cursor.getString(n);
        }
        return string2;
    }

    public static void putIntegerIntoContentValues(ContentValues contentValues, String string2, @Nullable Integer n) {
        if (n != null) {
            contentValues.put(string2, n);
            return;
        }
        contentValues.putNull(string2);
    }

    public static void putLongIntoContentValues(ContentValues contentValues, String string2, @Nullable Long l) {
        if (l != null) {
            contentValues.put(string2, l);
            return;
        }
        contentValues.putNull(string2);
    }

    public static void putStringIntoContentValues(ContentValues contentValues, String string2, @Nullable String string3) {
        if (string3 != null) {
            contentValues.put(string2, string3);
            return;
        }
        contentValues.putNull(string2);
    }

    /*
     * WARNING - Removed back jump from a try to a catch block - possible behaviour change.
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    private static /* varargs */ void zza(SQLiteDatabase sQLiteDatabase, String string2, String ... object) {
        Throwable throwable4222;
        Throwable throwable2;
        boolean bl = "table".equals(string2) || "view".equals(string2) || "trigger".equals(string2);
        Preconditions.checkArgument(bl);
        Cursor cursor = sQLiteDatabase.query("SQLITE_MASTER", new String[]{"name"}, "type == ?", new String[]{string2}, null, null, null);
        Throwable throwable3 = throwable2 = null;
        object = CollectionUtils.setOf(object);
        do {
            throwable3 = throwable2;
            if (!cursor.moveToNext()) break;
            throwable3 = throwable2;
            String string3 = cursor.getString(0);
            throwable3 = throwable2;
            if (object.contains(string3)) continue;
            throwable3 = throwable2;
            StringBuilder stringBuilder = new StringBuilder(String.valueOf(string2).length() + 8 + String.valueOf(string3).length());
            throwable3 = throwable2;
            stringBuilder.append("DROP ");
            throwable3 = throwable2;
            stringBuilder.append(string2);
            throwable3 = throwable2;
            stringBuilder.append(" '");
            throwable3 = throwable2;
            stringBuilder.append(string3);
            throwable3 = throwable2;
            stringBuilder.append("'");
            throwable3 = throwable2;
            sQLiteDatabase.execSQL(stringBuilder.toString());
        } while (true);
        if (cursor == null) return;
        cursor.close();
        return;
        {
            catch (Throwable throwable4222) {
            }
            catch (Throwable throwable5) {}
            throwable3 = throwable5;
            {
                throw throwable5;
            }
        }
        if (cursor == null) throw throwable4222;
        if (throwable3 == null) {
            cursor.close();
            throw throwable4222;
        }
        try {
            cursor.close();
            throw throwable4222;
        }
        catch (Throwable throwable6) {
            zzk.zza(throwable3, throwable6);
            throw throwable4222;
        }
    }
}

