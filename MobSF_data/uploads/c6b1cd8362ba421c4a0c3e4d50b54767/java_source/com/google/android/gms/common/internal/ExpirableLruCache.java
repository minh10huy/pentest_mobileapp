/*
 * Decompiled with CFR 0_132.
 */
package com.google.android.gms.common.internal;

import android.support.v4.util.LruCache;
import com.google.android.gms.common.internal.Preconditions;
import com.google.android.gms.common.internal.zze;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.TimeUnit;

public class ExpirableLruCache<K, V> {
    public static int TIME_UNSET = -1;
    private final Object mLock = new Object();
    private final LruCache<K, V> zzsn;
    private final long zzso;
    private final long zzsp;
    private HashMap<K, Long> zzsq;
    private HashMap<K, Long> zzsr;

    public ExpirableLruCache(int n, long l, long l2, TimeUnit timeUnit) {
        this.zzso = TimeUnit.NANOSECONDS.convert(l, timeUnit);
        this.zzsp = TimeUnit.NANOSECONDS.convert(l2, timeUnit);
        boolean bl = this.zzct() || this.zzcu();
        Preconditions.checkArgument(bl, "ExpirableLruCache has both access and write expiration negative");
        this.zzsn = new zze(this, n);
        if (this.zzct()) {
            this.zzsq = new HashMap();
        }
        if (this.zzcu()) {
            this.zzsr = new HashMap();
        }
    }

    static /* synthetic */ Object zza(ExpirableLruCache expirableLruCache) {
        return expirableLruCache.mLock;
    }

    private final boolean zza(K k) {
        long l = System.nanoTime();
        if (this.zzct() && this.zzsq.containsKey(k) && l - this.zzsq.get(k) > this.zzso) {
            return true;
        }
        if (this.zzcu() && this.zzsr.containsKey(k) && l - this.zzsr.get(k) > this.zzsp) {
            return true;
        }
        return false;
    }

    static /* synthetic */ boolean zzb(ExpirableLruCache expirableLruCache) {
        return expirableLruCache.zzct();
    }

    static /* synthetic */ HashMap zzc(ExpirableLruCache expirableLruCache) {
        return expirableLruCache.zzsq;
    }

    private final boolean zzct() {
        if (this.zzso >= 0L) {
            return true;
        }
        return false;
    }

    private final boolean zzcu() {
        if (this.zzsp >= 0L) {
            return true;
        }
        return false;
    }

    static /* synthetic */ boolean zzd(ExpirableLruCache expirableLruCache) {
        return expirableLruCache.zzcu();
    }

    static /* synthetic */ HashMap zze(ExpirableLruCache expirableLruCache) {
        return expirableLruCache.zzsr;
    }

    protected V create(K k) {
        return null;
    }

    protected void entryRemoved(boolean bl, K k, V v, V v2) {
    }

    public void evictAll() {
        this.zzsn.evictAll();
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public V get(K k) {
        Object object = this.mLock;
        synchronized (object) {
            V v;
            if (this.zza(k)) {
                this.zzsn.remove(k);
            }
            if ((v = this.zzsn.get(k)) != null && this.zzso > 0L) {
                long l = System.nanoTime();
                this.zzsq.put(k, l);
            }
            return v;
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public V put(K k, V v) {
        if (!this.zzcu()) return this.zzsn.put(k, v);
        long l = System.nanoTime();
        Object object = this.mLock;
        synchronized (object) {
            this.zzsr.put(k, l);
            return this.zzsn.put(k, v);
        }
    }

    public V remove(K k) {
        return this.zzsn.remove(k);
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public void removeExpired() {
        Iterator<K> iterator = this.zzsn.snapshot().keySet().iterator();
        while (iterator.hasNext()) {
            K k = iterator.next();
            Object object = this.mLock;
            synchronized (object) {
                if (this.zza(k)) {
                    this.zzsn.remove(k);
                }
            }
        }
        return;
    }

    protected int sizeOf(K k, V v) {
        return 1;
    }

    public Map<K, V> snapshot() {
        this.removeExpired();
        return this.zzsn.snapshot();
    }
}

