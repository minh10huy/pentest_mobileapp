/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.content.ContentValues
 *  android.content.Context
 *  android.database.Cursor
 *  android.database.sqlite.SQLiteDatabase
 *  android.database.sqlite.SQLiteException
 *  android.os.Parcelable
 *  android.os.Parcelable$Creator
 *  android.text.TextUtils
 *  android.util.Pair
 */
package com.google.android.gms.internal.measurement;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteException;
import android.os.Parcelable;
import android.support.annotation.WorkerThread;
import android.support.v4.util.ArrayMap;
import android.text.TextUtils;
import android.util.Pair;
import com.google.android.gms.common.internal.Preconditions;
import com.google.android.gms.common.util.Clock;
import com.google.android.gms.common.util.VisibleForTesting;
import com.google.android.gms.internal.measurement.zzaca;
import com.google.android.gms.internal.measurement.zzacb;
import com.google.android.gms.internal.measurement.zzacd;
import com.google.android.gms.internal.measurement.zzacj;
import com.google.android.gms.internal.measurement.zzea;
import com.google.android.gms.internal.measurement.zzef;
import com.google.android.gms.internal.measurement.zzeh;
import com.google.android.gms.internal.measurement.zzel;
import com.google.android.gms.internal.measurement.zzen;
import com.google.android.gms.internal.measurement.zzes;
import com.google.android.gms.internal.measurement.zzet;
import com.google.android.gms.internal.measurement.zzex;
import com.google.android.gms.internal.measurement.zzez;
import com.google.android.gms.internal.measurement.zzfg;
import com.google.android.gms.internal.measurement.zzfi;
import com.google.android.gms.internal.measurement.zzfk;
import com.google.android.gms.internal.measurement.zzft;
import com.google.android.gms.internal.measurement.zzfw;
import com.google.android.gms.internal.measurement.zzgn;
import com.google.android.gms.internal.measurement.zzjo;
import com.google.android.gms.internal.measurement.zzjs;
import com.google.android.gms.internal.measurement.zzjt;
import com.google.android.gms.internal.measurement.zzjz;
import com.google.android.gms.internal.measurement.zzka;
import com.google.android.gms.internal.measurement.zzkc;
import com.google.android.gms.internal.measurement.zzkd;
import com.google.android.gms.internal.measurement.zzkg;
import com.google.android.gms.internal.measurement.zzkh;
import com.google.android.gms.internal.measurement.zzkk;
import com.google.android.gms.internal.measurement.zzkr;
import com.google.android.gms.internal.measurement.zzku;
import com.google.android.gms.internal.measurement.zzkv;
import java.io.File;
import java.io.IOException;
import java.io.Serializable;
import java.security.MessageDigest;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Map;

final class zzek
extends zzjs {
    private static final String[] zzagl = new String[]{"last_bundled_timestamp", "ALTER TABLE events ADD COLUMN last_bundled_timestamp INTEGER;", "last_sampled_complex_event_id", "ALTER TABLE events ADD COLUMN last_sampled_complex_event_id INTEGER;", "last_sampling_rate", "ALTER TABLE events ADD COLUMN last_sampling_rate INTEGER;", "last_exempt_from_sampling", "ALTER TABLE events ADD COLUMN last_exempt_from_sampling INTEGER;"};
    private static final String[] zzagm = new String[]{"origin", "ALTER TABLE user_attributes ADD COLUMN origin TEXT;"};
    private static final String[] zzagn = new String[]{"app_version", "ALTER TABLE apps ADD COLUMN app_version TEXT;", "app_store", "ALTER TABLE apps ADD COLUMN app_store TEXT;", "gmp_version", "ALTER TABLE apps ADD COLUMN gmp_version INTEGER;", "dev_cert_hash", "ALTER TABLE apps ADD COLUMN dev_cert_hash INTEGER;", "measurement_enabled", "ALTER TABLE apps ADD COLUMN measurement_enabled INTEGER;", "last_bundle_start_timestamp", "ALTER TABLE apps ADD COLUMN last_bundle_start_timestamp INTEGER;", "day", "ALTER TABLE apps ADD COLUMN day INTEGER;", "daily_public_events_count", "ALTER TABLE apps ADD COLUMN daily_public_events_count INTEGER;", "daily_events_count", "ALTER TABLE apps ADD COLUMN daily_events_count INTEGER;", "daily_conversions_count", "ALTER TABLE apps ADD COLUMN daily_conversions_count INTEGER;", "remote_config", "ALTER TABLE apps ADD COLUMN remote_config BLOB;", "config_fetched_time", "ALTER TABLE apps ADD COLUMN config_fetched_time INTEGER;", "failed_config_fetch_time", "ALTER TABLE apps ADD COLUMN failed_config_fetch_time INTEGER;", "app_version_int", "ALTER TABLE apps ADD COLUMN app_version_int INTEGER;", "firebase_instance_id", "ALTER TABLE apps ADD COLUMN firebase_instance_id TEXT;", "daily_error_events_count", "ALTER TABLE apps ADD COLUMN daily_error_events_count INTEGER;", "daily_realtime_events_count", "ALTER TABLE apps ADD COLUMN daily_realtime_events_count INTEGER;", "health_monitor_sample", "ALTER TABLE apps ADD COLUMN health_monitor_sample TEXT;", "android_id", "ALTER TABLE apps ADD COLUMN android_id INTEGER;", "adid_reporting_enabled", "ALTER TABLE apps ADD COLUMN adid_reporting_enabled INTEGER;", "ssaid_reporting_enabled", "ALTER TABLE apps ADD COLUMN ssaid_reporting_enabled INTEGER;"};
    private static final String[] zzago = new String[]{"realtime", "ALTER TABLE raw_events ADD COLUMN realtime INTEGER;"};
    private static final String[] zzagp = new String[]{"has_realtime", "ALTER TABLE queue ADD COLUMN has_realtime INTEGER;", "retry_count", "ALTER TABLE queue ADD COLUMN retry_count INTEGER;"};
    private static final String[] zzagq = new String[]{"previous_install_count", "ALTER TABLE app2 ADD COLUMN previous_install_count INTEGER;"};
    private final zzen zzagr = new zzen(this, this.getContext(), "google_app_measurement.db");
    private final zzjo zzags = new zzjo(this.zzbt());

    zzek(zzjt zzjt2) {
        super(zzjt2);
    }

    /*
     * WARNING - Removed back jump from a try to a catch block - possible behaviour change.
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    @WorkerThread
    private final long zza(String string2, String[] cursor) {
        void var1_4;
        block10 : {
            SQLiteException sQLiteException;
            Cursor cursor2;
            block9 : {
                SQLiteDatabase sQLiteDatabase = this.getWritableDatabase();
                sQLiteException = null;
                cursor2 = null;
                cursor = sQLiteDatabase.rawQuery(string2, (String[])cursor);
                if (!cursor.moveToFirst()) break block9;
                long l = cursor.getLong(0);
                if (cursor == null) return l;
                cursor.close();
                return l;
            }
            try {
                throw new SQLiteException("Database returned empty set");
            }
            catch (Throwable throwable) {}
            catch (SQLiteException sQLiteException2) {}
            finally {
                break block10;
            }
            catch (Throwable throwable) {
                cursor = cursor2;
                break block10;
            }
            catch (SQLiteException sQLiteException3) {
                cursor = sQLiteException;
                sQLiteException = sQLiteException3;
            }
            cursor2 = cursor;
            {
                this.zzgi().zziv().zze("Database error", string2, (Object)sQLiteException);
                cursor2 = cursor;
                throw sQLiteException;
            }
        }
        if (cursor == null) throw var1_4;
        cursor.close();
        throw var1_4;
    }

    /*
     * WARNING - Removed back jump from a try to a catch block - possible behaviour change.
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    @WorkerThread
    private final long zza(String string2, String[] cursor, long l) {
        void var1_4;
        Cursor cursor2;
        block8 : {
            block9 : {
                Object var7_11;
                block7 : {
                    SQLiteDatabase sQLiteDatabase = this.getWritableDatabase();
                    var7_11 = null;
                    cursor2 = null;
                    cursor = sQLiteDatabase.rawQuery(string2, (String[])cursor);
                    try {
                        if (!cursor.moveToFirst()) break block7;
                        l = cursor.getLong(0);
                        if (cursor == null) return l;
                    }
                    catch (Throwable throwable) {
                        cursor2 = cursor;
                        break block8;
                    }
                    catch (SQLiteException sQLiteException) {
                        break block9;
                    }
                    cursor.close();
                    return l;
                }
                if (cursor == null) return l;
                cursor.close();
                return l;
                catch (Throwable throwable) {
                    break block8;
                }
                catch (SQLiteException sQLiteException) {
                    cursor = var7_11;
                }
            }
            cursor2 = cursor;
            {
                void var6_10;
                this.zzgi().zziv().zze("Database error", string2, var6_10);
                cursor2 = cursor;
                throw var6_10;
            }
        }
        if (cursor2 == null) throw var1_4;
        cursor2.close();
        throw var1_4;
    }

    static /* synthetic */ zzjo zza(zzek zzek2) {
        return zzek2.zzags;
    }

    @WorkerThread
    @VisibleForTesting
    private final Object zza(Cursor cursor, int n) {
        int n2 = cursor.getType(n);
        switch (n2) {
            default: {
                this.zzgi().zziv().zzg("Loaded invalid unknown value type, ignoring it", n2);
                return null;
            }
            case 4: {
                this.zzgi().zziv().log("Loaded invalid blob type value, ignoring it");
                return null;
            }
            case 3: {
                return cursor.getString(n);
            }
            case 2: {
                return cursor.getDouble(n);
            }
            case 1: {
                return cursor.getLong(n);
            }
            case 0: 
        }
        this.zzgi().zziv().log("Loaded invalid null value from database");
        return null;
    }

    @WorkerThread
    private static void zza(ContentValues contentValues, String string2, Object object) {
        Preconditions.checkNotEmpty(string2);
        Preconditions.checkNotNull(object);
        if (object instanceof String) {
            contentValues.put(string2, (String)object);
            return;
        }
        if (object instanceof Long) {
            contentValues.put(string2, (Long)object);
            return;
        }
        if (object instanceof Double) {
            contentValues.put(string2, (Double)object);
            return;
        }
        throw new IllegalArgumentException("Invalid value type");
    }

    @WorkerThread
    private final boolean zza(String string2, int n, zzkh zzkh2) {
        byte[] arrby;
        zzacb zzacb2;
        this.zzch();
        this.zzab();
        Preconditions.checkNotEmpty(string2);
        Preconditions.checkNotNull(zzkh2);
        if (TextUtils.isEmpty((CharSequence)zzkh2.zzatl)) {
            this.zzgi().zziy().zzd("Event filter had no event name. Audience definition ignored. appId, audienceId, filterId", zzfi.zzbp(string2), n, String.valueOf(zzkh2.zzatk));
            return false;
        }
        try {
            arrby = new byte[zzkh2.zzwb()];
            zzacb2 = zzacb.zzb(arrby, 0, arrby.length);
            zzkh2.zza(zzacb2);
            zzacb2.zzvt();
        }
        catch (IOException iOException) {
            this.zzgi().zziv().zze("Configuration loss. Failed to serialize event filter. appId", zzfi.zzbp(string2), iOException);
            return false;
        }
        zzacb2 = new ContentValues();
        zzacb2.put("app_id", string2);
        zzacb2.put("audience_id", Integer.valueOf(n));
        zzacb2.put("filter_id", zzkh2.zzatk);
        zzacb2.put("event_name", zzkh2.zzatl);
        zzacb2.put("data", arrby);
        try {
            if (this.getWritableDatabase().insertWithOnConflict("event_filters", null, (ContentValues)zzacb2, 5) == -1L) {
                this.zzgi().zziv().zzg("Failed to insert event filter (got -1). appId", zzfi.zzbp(string2));
            }
            return true;
        }
        catch (SQLiteException sQLiteException) {
            this.zzgi().zziv().zze("Error storing event filter. appId", zzfi.zzbp(string2), (Object)sQLiteException);
            return false;
        }
    }

    @WorkerThread
    private final boolean zza(String string2, int n, zzkk zzkk2) {
        byte[] arrby;
        zzacb zzacb2;
        this.zzch();
        this.zzab();
        Preconditions.checkNotEmpty(string2);
        Preconditions.checkNotNull(zzkk2);
        if (TextUtils.isEmpty((CharSequence)zzkk2.zzauc)) {
            this.zzgi().zziy().zzd("Property filter had no property name. Audience definition ignored. appId, audienceId, filterId", zzfi.zzbp(string2), n, String.valueOf(zzkk2.zzatk));
            return false;
        }
        try {
            arrby = new byte[zzkk2.zzwb()];
            zzacb2 = zzacb.zzb(arrby, 0, arrby.length);
            zzkk2.zza(zzacb2);
            zzacb2.zzvt();
        }
        catch (IOException iOException) {
            this.zzgi().zziv().zze("Configuration loss. Failed to serialize property filter. appId", zzfi.zzbp(string2), iOException);
            return false;
        }
        zzacb2 = new ContentValues();
        zzacb2.put("app_id", string2);
        zzacb2.put("audience_id", Integer.valueOf(n));
        zzacb2.put("filter_id", zzkk2.zzatk);
        zzacb2.put("property_name", zzkk2.zzauc);
        zzacb2.put("data", arrby);
        try {
            if (this.getWritableDatabase().insertWithOnConflict("property_filters", null, (ContentValues)zzacb2, 5) == -1L) {
                this.zzgi().zziv().zzg("Failed to insert property filter (got -1). appId", zzfi.zzbp(string2));
                return false;
            }
            return true;
        }
        catch (SQLiteException sQLiteException) {
            this.zzgi().zziv().zze("Error storing property filter. appId", zzfi.zzbp(string2), (Object)sQLiteException);
            return false;
        }
    }

    private final boolean zza(String string2, List<Integer> object) {
        long l;
        Preconditions.checkNotEmpty(string2);
        this.zzch();
        this.zzab();
        SQLiteDatabase sQLiteDatabase = this.getWritableDatabase();
        try {
            l = this.zza("select count(1) from audience_filter_values where app_id=?", new String[]{string2});
        }
        catch (SQLiteException sQLiteException) {
            this.zzgi().zziv().zze("Database error querying filters. appId", zzfi.zzbp(string2), (Object)sQLiteException);
            return false;
        }
        int n = Math.max(0, Math.min(2000, this.zzgk().zzb(string2, zzez.zzajj)));
        if (l <= (long)n) {
            return false;
        }
        Serializable serializable = new ArrayList<String>();
        for (int i = 0; i < object.size(); ++i) {
            Integer n2 = object.get(i);
            if (n2 != null) {
                if (!(n2 instanceof Integer)) {
                    return false;
                }
                serializable.add(Integer.toString(n2));
                continue;
            }
            return false;
        }
        object = TextUtils.join((CharSequence)",", serializable);
        serializable = new StringBuilder(String.valueOf(object).length() + 2);
        serializable.append("(");
        serializable.append((String)object);
        serializable.append(")");
        object = serializable.toString();
        serializable = new StringBuilder(String.valueOf(object).length() + 140);
        serializable.append("audience_id in (select audience_id from audience_filter_values where app_id=? and audience_id not in ");
        serializable.append((String)object);
        serializable.append(" order by rowid desc limit -1 offset ?)");
        if (sQLiteDatabase.delete("audience_filter_values", serializable.toString(), new String[]{string2, Integer.toString(n)}) > 0) {
            return true;
        }
        return false;
    }

    private final boolean zzid() {
        return this.getContext().getDatabasePath("google_app_measurement.db").exists();
    }

    static /* synthetic */ String[] zzie() {
        return zzagl;
    }

    static /* synthetic */ String[] zzif() {
        return zzagm;
    }

    static /* synthetic */ String[] zzig() {
        return zzagn;
    }

    static /* synthetic */ String[] zzih() {
        return zzagp;
    }

    static /* synthetic */ String[] zzii() {
        return zzago;
    }

    static /* synthetic */ String[] zzij() {
        return zzagq;
    }

    @WorkerThread
    public final void beginTransaction() {
        this.zzch();
        this.getWritableDatabase().beginTransaction();
    }

    @WorkerThread
    public final void endTransaction() {
        this.zzch();
        this.getWritableDatabase().endTransaction();
    }

    @WorkerThread
    @VisibleForTesting
    final SQLiteDatabase getWritableDatabase() {
        this.zzab();
        try {
            SQLiteDatabase sQLiteDatabase = this.zzagr.getWritableDatabase();
            return sQLiteDatabase;
        }
        catch (SQLiteException sQLiteException) {
            this.zzgi().zziy().zzg("Error opening database", (Object)sQLiteException);
            throw sQLiteException;
        }
    }

    @WorkerThread
    public final void setTransactionSuccessful() {
        this.zzch();
        this.getWritableDatabase().setTransactionSuccessful();
    }

    public final long zza(zzku zzku2) throws IOException {
        long l;
        byte[] arrby;
        Object object;
        this.zzab();
        this.zzch();
        Preconditions.checkNotNull(zzku2);
        Preconditions.checkNotEmpty(zzku2.zzth);
        try {
            arrby = new byte[zzku2.zzwb()];
            object = zzacb.zzb(arrby, 0, arrby.length);
            zzku2.zza((zzacb)object);
            object.zzvt();
            object = this.zzjf();
        }
        catch (IOException iOException) {
            this.zzgi().zziv().zze("Data loss. Failed to serialize event metadata. appId", zzfi.zzbp(zzku2.zzth), iOException);
            throw iOException;
        }
        Preconditions.checkNotNull(arrby);
        object.zzgg().zzab();
        MessageDigest messageDigest = zzkd.getMessageDigest();
        if (messageDigest == null) {
            object.zzgi().zziv().log("Failed to get MD5");
            l = 0L;
        } else {
            l = zzkd.zzc(messageDigest.digest(arrby));
        }
        object = new ContentValues();
        object.put("app_id", zzku2.zzth);
        object.put("metadata_fingerprint", Long.valueOf(l));
        object.put("metadata", arrby);
        try {
            this.getWritableDatabase().insertWithOnConflict("raw_events_metadata", null, (ContentValues)object, 4);
            return l;
        }
        catch (SQLiteException sQLiteException) {
            this.zzgi().zziv().zze("Error storing raw event metadata. appId", zzfi.zzbp(zzku2.zzth), (Object)sQLiteException);
            throw sQLiteException;
        }
    }

    /*
     * Loose catch block
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    public final Pair<zzkr, Long> zza(String string2, Long l) {
        void var1_4;
        String string3;
        block18 : {
            void var2_8;
            block17 : {
                Cursor cursor;
                block16 : {
                    this.zzab();
                    this.zzch();
                    cursor = this.getWritableDatabase().rawQuery("select main_event, children_to_process from main_event_params where app_id=? and event_id=?", new String[]{string2, String.valueOf(l)});
                    string3 = cursor;
                    if (cursor.moveToFirst()) break block16;
                    string3 = cursor;
                    this.zzgi().zzjc().log("Main event not found");
                    if (cursor == null) return null;
                    cursor.close();
                    return null;
                }
                string3 = cursor;
                Object object = cursor.getBlob(0);
                string3 = cursor;
                long l2 = cursor.getLong(1);
                string3 = cursor;
                object = zzaca.zza(object, 0, ((byte[])object).length);
                string3 = cursor;
                zzkr zzkr2 = new zzkr();
                string3 = cursor;
                zzkr2.zzb((zzaca)object);
                string3 = cursor;
                string2 = Pair.create((Object)zzkr2, (Object)l2);
                if (cursor == null) return string2;
                cursor.close();
                return string2;
                catch (IOException iOException) {
                    string3 = cursor;
                    try {
                        this.zzgi().zziv().zzd("Failed to merge main event. appId, eventId", zzfi.zzbp(string2), l, iOException);
                        if (cursor == null) return null;
                    }
                    catch (SQLiteException sQLiteException) {
                        string2 = cursor;
                        break block17;
                    }
                    cursor.close();
                    return null;
                }
                catch (Throwable throwable) {
                    string3 = null;
                    break block18;
                }
                catch (SQLiteException sQLiteException) {
                    string2 = null;
                }
            }
            string3 = string2;
            this.zzgi().zziv().zzg("Error selecting main event", var2_8);
            if (string2 == null) return null;
            string2.close();
            return null;
            {
                catch (Throwable throwable) {
                    // empty catch block
                }
            }
        }
        if (string3 == null) throw var1_4;
        string3.close();
        throw var1_4;
    }

    /*
     * WARNING - Removed back jump from a try to a catch block - possible behaviour change.
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    @WorkerThread
    public final zzel zza(long l, String string2, boolean bl, boolean bl2, boolean bl3, boolean bl4, boolean bl5) {
        Cursor cursor;
        void var3_5;
        block15 : {
            zzel zzel2;
            Cursor cursor2;
            block16 : {
                SQLiteDatabase sQLiteDatabase;
                Cursor cursor3;
                block14 : {
                    Preconditions.checkNotEmpty(string2);
                    this.zzab();
                    this.zzch();
                    zzel2 = new zzel();
                    cursor3 = null;
                    cursor = cursor2 = null;
                    sQLiteDatabase = this.getWritableDatabase();
                    cursor = cursor2;
                    cursor2 = sQLiteDatabase.query("apps", new String[]{"day", "daily_events_count", "daily_public_events_count", "daily_conversions_count", "daily_error_events_count", "daily_realtime_events_count"}, "app_id=?", new String[]{string2}, null, null, null);
                    if (cursor2.moveToFirst()) break block14;
                    this.zzgi().zziy().zzg("Not updating daily counts, app is not known. appId", zzfi.zzbp(string2));
                    if (cursor2 == null) return zzel2;
                    cursor2.close();
                    return zzel2;
                }
                try {
                    if (cursor2.getLong(0) == l) {
                        zzel2.zzagu = cursor2.getLong(1);
                        zzel2.zzagt = cursor2.getLong(2);
                        zzel2.zzagv = cursor2.getLong(3);
                        zzel2.zzagw = cursor2.getLong(4);
                        zzel2.zzagx = cursor2.getLong(5);
                    }
                    if (bl) {
                        ++zzel2.zzagu;
                    }
                    if (bl2) {
                        ++zzel2.zzagt;
                    }
                    if (bl3) {
                        ++zzel2.zzagv;
                    }
                    if (bl4) {
                        ++zzel2.zzagw;
                    }
                    if (bl5) {
                        ++zzel2.zzagx;
                    }
                    cursor = new ContentValues();
                    cursor.put("day", Long.valueOf(l));
                    cursor.put("daily_public_events_count", Long.valueOf(zzel2.zzagt));
                    cursor.put("daily_events_count", Long.valueOf(zzel2.zzagu));
                    cursor.put("daily_conversions_count", Long.valueOf(zzel2.zzagv));
                    cursor.put("daily_error_events_count", Long.valueOf(zzel2.zzagw));
                    cursor.put("daily_realtime_events_count", Long.valueOf(zzel2.zzagx));
                    sQLiteDatabase.update("apps", (ContentValues)cursor, "app_id=?", new String[]{string2});
                    if (cursor2 == null) return zzel2;
                }
                catch (Throwable throwable) {
                    cursor = cursor2;
                    break block15;
                }
                catch (SQLiteException sQLiteException) {
                    break block16;
                }
                cursor2.close();
                return zzel2;
                catch (Throwable throwable) {
                    break block15;
                }
                catch (SQLiteException sQLiteException) {
                    cursor2 = cursor3;
                }
            }
            cursor = cursor2;
            {
                void var11_18;
                this.zzgi().zziv().zze("Error updating daily counts. appId", zzfi.zzbp(string2), var11_18);
                if (cursor2 == null) return zzel2;
            }
            cursor2.close();
            return zzel2;
        }
        if (cursor == null) throw var3_5;
        cursor.close();
        throw var3_5;
    }

    @WorkerThread
    public final void zza(zzea zzea2) {
        Preconditions.checkNotNull(zzea2);
        this.zzab();
        this.zzch();
        ContentValues contentValues = new ContentValues();
        contentValues.put("app_id", zzea2.zzah());
        contentValues.put("app_instance_id", zzea2.getAppInstanceId());
        contentValues.put("gmp_app_id", zzea2.getGmpAppId());
        contentValues.put("resettable_device_id_hash", zzea2.zzgq());
        contentValues.put("last_bundle_index", Long.valueOf(zzea2.zzgy()));
        contentValues.put("last_bundle_start_timestamp", Long.valueOf(zzea2.zzgs()));
        contentValues.put("last_bundle_end_timestamp", Long.valueOf(zzea2.zzgt()));
        contentValues.put("app_version", zzea2.zzag());
        contentValues.put("app_store", zzea2.zzgv());
        contentValues.put("gmp_version", Long.valueOf(zzea2.zzgw()));
        contentValues.put("dev_cert_hash", Long.valueOf(zzea2.zzgx()));
        contentValues.put("measurement_enabled", Boolean.valueOf(zzea2.isMeasurementEnabled()));
        contentValues.put("day", Long.valueOf(zzea2.zzhc()));
        contentValues.put("daily_public_events_count", Long.valueOf(zzea2.zzhd()));
        contentValues.put("daily_events_count", Long.valueOf(zzea2.zzhe()));
        contentValues.put("daily_conversions_count", Long.valueOf(zzea2.zzhf()));
        contentValues.put("config_fetched_time", Long.valueOf(zzea2.zzgz()));
        contentValues.put("failed_config_fetch_time", Long.valueOf(zzea2.zzha()));
        contentValues.put("app_version_int", Long.valueOf(zzea2.zzgu()));
        contentValues.put("firebase_instance_id", zzea2.zzgr());
        contentValues.put("daily_error_events_count", Long.valueOf(zzea2.zzhh()));
        contentValues.put("daily_realtime_events_count", Long.valueOf(zzea2.zzhg()));
        contentValues.put("health_monitor_sample", zzea2.zzhi());
        contentValues.put("android_id", Long.valueOf(zzea2.zzhk()));
        contentValues.put("adid_reporting_enabled", Boolean.valueOf(zzea2.zzhl()));
        contentValues.put("ssaid_reporting_enabled", Boolean.valueOf(zzea2.zzhm()));
        try {
            SQLiteDatabase sQLiteDatabase = this.getWritableDatabase();
            if ((long)sQLiteDatabase.update("apps", contentValues, "app_id = ?", new String[]{zzea2.zzah()}) == 0L && sQLiteDatabase.insertWithOnConflict("apps", null, contentValues, 5) == -1L) {
                this.zzgi().zziv().zzg("Failed to insert/update app (got -1). appId", zzfi.zzbp(zzea2.zzah()));
            }
            return;
        }
        catch (SQLiteException sQLiteException) {
            this.zzgi().zziv().zze("Error storing app. appId", zzfi.zzbp(zzea2.zzah()), (Object)sQLiteException);
            return;
        }
    }

    @WorkerThread
    public final void zza(zzet zzet2) {
        Preconditions.checkNotNull(zzet2);
        this.zzab();
        this.zzch();
        ContentValues contentValues = new ContentValues();
        contentValues.put("app_id", zzet2.zzth);
        contentValues.put("name", zzet2.name);
        contentValues.put("lifetime_count", Long.valueOf(zzet2.zzahh));
        contentValues.put("current_bundle_count", Long.valueOf(zzet2.zzahi));
        contentValues.put("last_fire_timestamp", Long.valueOf(zzet2.zzahj));
        contentValues.put("last_bundled_timestamp", Long.valueOf(zzet2.zzahk));
        contentValues.put("last_sampled_complex_event_id", zzet2.zzahl);
        contentValues.put("last_sampling_rate", zzet2.zzahm);
        Long l = zzet2.zzahn != null && zzet2.zzahn != false ? Long.valueOf(1L) : null;
        contentValues.put("last_exempt_from_sampling", l);
        try {
            if (this.getWritableDatabase().insertWithOnConflict("events", null, contentValues, 5) == -1L) {
                this.zzgi().zziv().zzg("Failed to insert/update event aggregates (got -1). appId", zzfi.zzbp(zzet2.zzth));
            }
            return;
        }
        catch (SQLiteException sQLiteException) {
            this.zzgi().zziv().zze("Error storing event aggregates. appId", zzfi.zzbp(zzet2.zzth), (Object)sQLiteException);
            return;
        }
    }

    @WorkerThread
    public final boolean zza(zzef zzef2) {
        Preconditions.checkNotNull(zzef2);
        this.zzab();
        this.zzch();
        if (this.zzh(zzef2.packageName, zzef2.zzage.name) == null && this.zza("SELECT COUNT(1) FROM conditional_properties WHERE app_id=?", new String[]{zzef2.packageName}) >= 1000L) {
            return false;
        }
        ContentValues contentValues = new ContentValues();
        contentValues.put("app_id", zzef2.packageName);
        contentValues.put("origin", zzef2.origin);
        contentValues.put("name", zzef2.zzage.name);
        zzek.zza(contentValues, "value", zzef2.zzage.getValue());
        contentValues.put("active", Boolean.valueOf(zzef2.active));
        contentValues.put("trigger_event_name", zzef2.triggerEventName);
        contentValues.put("trigger_timeout", Long.valueOf(zzef2.triggerTimeout));
        this.zzgg();
        contentValues.put("timed_out_event", zzkd.zza(zzef2.zzagf));
        contentValues.put("creation_timestamp", Long.valueOf(zzef2.creationTimestamp));
        this.zzgg();
        contentValues.put("triggered_event", zzkd.zza(zzef2.zzagg));
        contentValues.put("triggered_timestamp", Long.valueOf(zzef2.zzage.zzast));
        contentValues.put("time_to_live", Long.valueOf(zzef2.timeToLive));
        this.zzgg();
        contentValues.put("expired_event", zzkd.zza(zzef2.zzagh));
        try {
            if (this.getWritableDatabase().insertWithOnConflict("conditional_properties", null, contentValues, 5) == -1L) {
                this.zzgi().zziv().zzg("Failed to insert/update conditional user property (got -1)", zzfi.zzbp(zzef2.packageName));
                return true;
            }
        }
        catch (SQLiteException sQLiteException) {
            this.zzgi().zziv().zze("Error storing conditional user property", zzfi.zzbp(zzef2.packageName), (Object)sQLiteException);
        }
        return true;
    }

    public final boolean zza(zzes zzes2, long l, boolean bl) {
        RuntimeException runtimeException;
        super("d2j fail translate: java.lang.RuntimeException: can not merge I and Z\n\tat com.googlecode.dex2jar.ir.TypeClass.merge(TypeClass.java:100)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeRef.updateTypeClass(TypeTransformer.java:174)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.copyTypes(TypeTransformer.java:311)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.fixTypes(TypeTransformer.java:226)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.analyze(TypeTransformer.java:207)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer.transform(TypeTransformer.java:44)\n\tat com.googlecode.d2j.dex.Dex2jar$2.optimize(Dex2jar.java:162)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertCode(Dex2Asm.java:414)\n\tat com.googlecode.d2j.dex.ExDex2Asm.convertCode(ExDex2Asm.java:42)\n\tat com.googlecode.d2j.dex.Dex2jar$2.convertCode(Dex2jar.java:128)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertMethod(Dex2Asm.java:509)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertClass(Dex2Asm.java:406)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertDex(Dex2Asm.java:422)\n\tat com.googlecode.d2j.dex.Dex2jar.doTranslate(Dex2jar.java:172)\n\tat com.googlecode.d2j.dex.Dex2jar.to(Dex2jar.java:272)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.doCommandLine(Dex2jarCmd.java:108)\n\tat com.googlecode.dex2jar.tools.BaseCmd.doMain(BaseCmd.java:288)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.main(Dex2jarCmd.java:32)\n");
        throw runtimeException;
    }

    @WorkerThread
    public final boolean zza(zzkc zzkc2) {
        Preconditions.checkNotNull(zzkc2);
        this.zzab();
        this.zzch();
        if (this.zzh(zzkc2.zzth, zzkc2.name) == null && (zzkd.zzcg(zzkc2.name) ? this.zza("select count(1) from user_attributes where app_id=? and name not like '!_%' escape '!'", new String[]{zzkc2.zzth}) >= 25L : this.zza("select count(1) from user_attributes where app_id=? and origin=? AND name like '!_%' escape '!'", new String[]{zzkc2.zzth, zzkc2.origin}) >= 25L)) {
            return false;
        }
        ContentValues contentValues = new ContentValues();
        contentValues.put("app_id", zzkc2.zzth);
        contentValues.put("origin", zzkc2.origin);
        contentValues.put("name", zzkc2.name);
        contentValues.put("set_timestamp", Long.valueOf(zzkc2.zzast));
        zzek.zza(contentValues, "value", zzkc2.value);
        try {
            if (this.getWritableDatabase().insertWithOnConflict("user_attributes", null, contentValues, 5) == -1L) {
                this.zzgi().zziv().zzg("Failed to insert/update user property (got -1). appId", zzfi.zzbp(zzkc2.zzth));
                return true;
            }
        }
        catch (SQLiteException sQLiteException) {
            this.zzgi().zziv().zze("Error storing user property. appId", zzfi.zzbp(zzkc2.zzth), (Object)sQLiteException);
        }
        return true;
    }

    @WorkerThread
    public final boolean zza(zzku zzku2, boolean bl) {
        RuntimeException runtimeException;
        super("d2j fail translate: java.lang.RuntimeException: can not merge I and Z\n\tat com.googlecode.dex2jar.ir.TypeClass.merge(TypeClass.java:100)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeRef.updateTypeClass(TypeTransformer.java:174)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.copyTypes(TypeTransformer.java:311)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.fixTypes(TypeTransformer.java:226)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.analyze(TypeTransformer.java:207)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer.transform(TypeTransformer.java:44)\n\tat com.googlecode.d2j.dex.Dex2jar$2.optimize(Dex2jar.java:162)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertCode(Dex2Asm.java:414)\n\tat com.googlecode.d2j.dex.ExDex2Asm.convertCode(ExDex2Asm.java:42)\n\tat com.googlecode.d2j.dex.Dex2jar$2.convertCode(Dex2jar.java:128)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertMethod(Dex2Asm.java:509)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertClass(Dex2Asm.java:406)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertDex(Dex2Asm.java:422)\n\tat com.googlecode.d2j.dex.Dex2jar.doTranslate(Dex2jar.java:172)\n\tat com.googlecode.d2j.dex.Dex2jar.to(Dex2jar.java:272)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.doCommandLine(Dex2jarCmd.java:108)\n\tat com.googlecode.dex2jar.tools.BaseCmd.doMain(BaseCmd.java:288)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.main(Dex2jarCmd.java:32)\n");
        throw runtimeException;
    }

    public final boolean zza(String string2, Long l, long l2, zzkr zzkr2) {
        byte[] arrby;
        this.zzab();
        this.zzch();
        Preconditions.checkNotNull(zzkr2);
        Preconditions.checkNotEmpty(string2);
        Preconditions.checkNotNull(l);
        try {
            arrby = new byte[zzkr2.zzwb()];
            zzacb zzacb2 = zzacb.zzb(arrby, 0, arrby.length);
            zzkr2.zza(zzacb2);
            zzacb2.zzvt();
            this.zzgi().zzjc().zze("Saving complex main event, appId, data size", this.zzgf().zzbm(string2), arrby.length);
        }
        catch (IOException iOException) {
            this.zzgi().zziv().zzd("Data loss. Failed to serialize event params/data. appId, eventId", zzfi.zzbp(string2), l, iOException);
            return false;
        }
        zzkr2 = new ContentValues();
        zzkr2.put("app_id", string2);
        zzkr2.put("event_id", l);
        zzkr2.put("children_to_process", Long.valueOf(l2));
        zzkr2.put("main_event", arrby);
        try {
            if (this.getWritableDatabase().insertWithOnConflict("main_event_params", null, (ContentValues)zzkr2, 5) == -1L) {
                this.zzgi().zziv().zzg("Failed to insert complex main event (got -1). appId", zzfi.zzbp(string2));
                return false;
            }
            return true;
        }
        catch (SQLiteException sQLiteException) {
            this.zzgi().zziv().zze("Error storing complex main event. appId", zzfi.zzbp(string2), (Object)sQLiteException);
            return false;
        }
    }

    /*
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    public final String zzag(long l) {
        void var4_5;
        Cursor cursor;
        block10 : {
            Cursor cursor2;
            block9 : {
                String string2;
                block8 : {
                    this.zzab();
                    this.zzch();
                    cursor = cursor2 = this.getWritableDatabase().rawQuery("select app_id from apps where app_id in (select distinct app_id from raw_events) and config_fetched_time < ? order by failed_config_fetch_time limit 1;", new String[]{String.valueOf(l)});
                    if (cursor2.moveToFirst()) break block8;
                    cursor = cursor2;
                    this.zzgi().zzjc().log("No expired configs for apps with pending events");
                    if (cursor2 == null) return null;
                    cursor2.close();
                    return null;
                }
                cursor = cursor2;
                try {
                    string2 = cursor2.getString(0);
                    if (cursor2 == null) return string2;
                }
                catch (SQLiteException sQLiteException) {
                    break block9;
                }
                cursor2.close();
                return string2;
                catch (Throwable throwable) {
                    cursor = null;
                    break block10;
                }
                catch (SQLiteException sQLiteException) {
                    cursor2 = null;
                }
            }
            cursor = cursor2;
            try {
                void var5_10;
                this.zzgi().zziv().zzg("Error selecting expired configs", var5_10);
                if (cursor2 == null) return null;
            }
            catch (Throwable throwable) {
                // empty catch block
            }
            cursor2.close();
            return null;
        }
        if (cursor == null) throw var4_5;
        cursor.close();
        throw var4_5;
    }

    /*
     * WARNING - Removed back jump from a try to a catch block - possible behaviour change.
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    @WorkerThread
    public final List<Pair<zzku, Long>> zzb(String object, int n, int n2) {
        void var1_4;
        byte[] arrby;
        block15 : {
            Cursor cursor;
            block16 : {
                boolean bl;
                ArrayList<Pair<zzku, Long>> arrayList;
                Object object2;
                block14 : {
                    this.zzab();
                    this.zzch();
                    bl = n > 0;
                    Preconditions.checkArgument(bl);
                    bl = n2 > 0;
                    Preconditions.checkArgument(bl);
                    Preconditions.checkNotEmpty(object);
                    object2 = null;
                    arrby = null;
                    cursor = this.getWritableDatabase().query("queue", new String[]{"rowid", "data", "retry_count"}, "app_id=?", new String[]{object}, null, null, "rowid", String.valueOf(n));
                    if (cursor.moveToFirst()) break block14;
                    arrby = Collections.emptyList();
                    if (cursor == null) return arrby;
                    cursor.close();
                    return arrby;
                }
                try {
                    int n3;
                    arrayList = new ArrayList<Pair<zzku, Long>>();
                    n = 0;
                    do {
                        long l = cursor.getLong(0);
                        arrby = cursor.getBlob(1);
                        arrby = this.zzjf().zza(arrby);
                        if (!arrayList.isEmpty() && arrby.length + n > n2) break;
                        Object object3 = zzaca.zza(arrby, 0, arrby.length);
                        object2 = new zzku();
                        try {
                            object2.zzb((zzaca)object3);
                        }
                        catch (IOException iOException) {
                            Object object4;
                            block18 : {
                                object3 = this.zzgi().zziv();
                                object2 = "Failed to merge queued bundle. appId";
                                object4 = zzfi.zzbp(object);
                                break block18;
                                catch (IOException iOException2) {
                                    object3 = this.zzgi().zziv();
                                    object2 = "Failed to unzip queued bundle. appId";
                                    object4 = zzfi.zzbp(object);
                                }
                            }
                            object3.zze((String)object2, object4, arrby);
                            n3 = n;
                        }
                        if (!cursor.isNull(2)) {
                            object2.zzawj = cursor.getInt(2);
                        }
                        n3 = n + arrby.length;
                        arrayList.add((Pair<zzku, Long>)Pair.create((Object)object2, (Object)l));
                        bl = cursor.moveToNext();
                        if (!bl) break;
                        n = n3;
                    } while (n3 <= n2);
                    if (cursor == null) return arrayList;
                }
                catch (Throwable throwable) {
                    arrby = cursor;
                    break block15;
                }
                catch (SQLiteException sQLiteException) {
                    break block16;
                }
                cursor.close();
                return arrayList;
                catch (Throwable throwable) {
                    break block15;
                }
                catch (SQLiteException sQLiteException) {
                    cursor = object2;
                }
            }
            arrby = cursor;
            {
                void var10_19;
                this.zzgi().zziv().zze("Error querying bundles. appId", zzfi.zzbp(object), var10_19);
                arrby = cursor;
                object = Collections.emptyList();
                if (cursor == null) return object;
            }
            cursor.close();
            return object;
        }
        if (arrby == null) throw var1_4;
        arrby.close();
        throw var1_4;
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive exception aggregation
     */
    @WorkerThread
    public final List<zzkc> zzb(String var1_1, String var2_6, String var3_7) {
        block30 : {
            block26 : {
                block27 : {
                    Preconditions.checkNotEmpty(var1_1);
                    this.zzab();
                    this.zzch();
                    var10_26 = new ArrayList<zzkc>();
                    var9_27 = null;
                    var11_36 = new ArrayList<String>(3);
                    var11_36.add(var1_1);
                    var7_40 = new StringBuilder("app_id=?");
                    var4_47 = TextUtils.isEmpty((CharSequence)var2_6 /* !! */ );
                    if (var4_47) ** GOTO lbl17
                    var11_36.add(var2_6 /* !! */ );
                    var7_40.append(" and origin=?");
lbl17: // 2 sources:
                    var8_48 /* !! */  = var2_6 /* !! */ ;
                    if (!TextUtils.isEmpty((CharSequence)var3_18)) {
                        var11_36.add(String.valueOf(var3_18).concat("*"));
                        var7_40.append(" and name glob ?");
                    }
                    var11_37 = var11_36.toArray(new String[var11_36.size()]);
                    var12_60 = this.getWritableDatabase();
                    var7_41 = var7_40.toString();
                    var7_42 = var12_60.query("user_attributes", new String[]{"name", "set_timestamp", "value", "origin"}, var7_41, var11_37, null, null, "rowid", "1001");
                    var9_28 /* !! */  = var8_48 /* !! */ ;
                    try {
                        var4_47 = var7_42.moveToFirst();
                        var2_7 /* !! */  = var8_48 /* !! */ ;
                        if (var4_47) break block26;
                        if (var7_42 == null) break block27;
                    }
                    catch (Throwable var1_2) {
                        ** GOTO lbl97
                    }
                    catch (SQLiteException var3_20) {
                        var2_11 = var9_35;
                        ** GOTO lbl87
                    }
                    var7_42.close();
                }
                return var10_26;
            }
            do {
                block29 : {
                    block28 : {
                        block32 : {
                            var9_30 = var2_8;
                            if (var10_26.size() >= 1000) {
                                var9_31 = var2_8;
                                this.zzgi().zziv().zzg("Read more than the max allowed user properties, ignoring excess", 1000);
                                break block28;
                            }
                            var9_32 = var2_8;
                            var11_39 = var7_42.getString(0);
                            var9_33 = var2_8;
                            var5_63 = var7_42.getLong(1);
                            var8_50 = var7_42;
                            var12_62 = this.zza(var7_42, 2);
                            var8_51 = var7_42;
                            var9_34 = var7_42.getString(3);
                            if (var12_62 != null) ** GOTO lbl57
                            var8_52 = var7_42;
                            this.zzgi().zziv().zzd("(2)Read invalid user property value, ignoring it", zzfi.zzbp(var1_1), var9_34, var3_18);
                            break block32;
lbl57: // 1 sources:
                            var8_53 = var7_42;
                            var10_26.add(new zzkc(var1_1, var9_34, var11_39, var5_63, var12_62));
                        }
                        var8_55 = var7_42;
                        var4_47 = var7_42.moveToNext();
                        if (var4_47) break block29;
                    }
                    if (var7_42 != null) {
                        var7_42.close();
                    }
                    return var10_26;
                }
                var2_9 = var9_34;
            } while (true);
            {
                catch (SQLiteException var3_19) {
                    ** GOTO lbl87
                }
            }
            {
                catch (SQLiteException var3_22) {
                    break block30;
                }
            }
            catch (Throwable var1_3) {
                var2_13 = var9_27;
                ** GOTO lbl98
            }
            {
                catch (SQLiteException var3_23) {
                    // empty catch block
                }
            }
        }
lbl85: // 2 sources:
        do {
            var7_43 = null;
lbl87: // 4 sources:
            do {
                block31 : {
                    var8_58 = var7_44;
                    try {
                        this.zzgi().zziv().zzd("(2)Error querying user properties", zzfi.zzbp(var1_1), var2_14, var3_21);
                        if (var7_44 == null) break block31;
                    }
                    catch (Throwable var1_4) {
                        var7_45 = var8_59;
                    }
                    var7_44.close();
                }
                return null;
lbl97: // 2 sources:
                var2_15 = var7_46;
lbl98: // 2 sources:
                if (var2_16 != null) {
                    var2_16.close();
                }
                throw var1_5;
                break;
            } while (true);
            break;
        } while (true);
        {
            catch (SQLiteException var3_24) {
                ** continue;
            }
        }
        {
            catch (SQLiteException var3_25) {
                var2_17 = var9_34;
                ** continue;
            }
        }
    }

    /*
     * WARNING - Removed back jump from a try to a catch block - possible behaviour change.
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    public final List<zzef> zzb(String string2, String[] object) {
        void var2_7;
        block12 : {
            String string3;
            block13 : {
                String string4;
                boolean bl;
                ArrayList<zzef> arrayList;
                block11 : {
                    this.zzab();
                    this.zzch();
                    arrayList = new ArrayList<zzef>();
                    string4 = null;
                    string3 = null;
                    string2 = this.getWritableDatabase().query("conditional_properties", new String[]{"app_id", "origin", "name", "value", "active", "trigger_event_name", "trigger_timeout", "timed_out_event", "creation_timestamp", "triggered_event", "triggered_timestamp", "time_to_live", "expired_event"}, string2, (String[])object, null, null, "rowid", "1001");
                    bl = string2.moveToFirst();
                    if (bl) break block11;
                    if (string2 == null) return arrayList;
                    string2.close();
                    return arrayList;
                }
                try {
                    do {
                        if (arrayList.size() >= 1000) {
                            this.zzgi().zziv().zzg("Read more than the max allowed conditional properties, ignoring extra", 1000);
                            break;
                        }
                        bl = false;
                        object = string2.getString(0);
                        string3 = string2.getString(1);
                        string4 = string2.getString(2);
                        Object object2 = this.zza((Cursor)string2, 3);
                        if (string2.getInt(4) != 0) {
                            bl = true;
                        }
                        String string5 = string2.getString(5);
                        long l = string2.getLong(6);
                        zzex zzex2 = this.zzjf().zza(string2.getBlob(7), zzex.CREATOR);
                        long l2 = string2.getLong(8);
                        zzex zzex3 = this.zzjf().zza(string2.getBlob(9), zzex.CREATOR);
                        long l3 = string2.getLong(10);
                        long l4 = string2.getLong(11);
                        zzex zzex4 = this.zzjf().zza(string2.getBlob(12), zzex.CREATOR);
                        arrayList.add(new zzef((String)object, string3, new zzka(string4, l3, object2, string3), l2, bl, string5, zzex2, l, zzex3, l4, zzex4));
                    } while (bl = string2.moveToNext());
                    if (string2 == null) return arrayList;
                }
                catch (Throwable throwable) {
                    break block12;
                }
                catch (SQLiteException sQLiteException) {
                    break block13;
                }
                string2.close();
                return arrayList;
                catch (Throwable throwable) {
                    string2 = string3;
                    break block12;
                }
                catch (SQLiteException sQLiteException) {
                    string2 = string4;
                }
            }
            string3 = string2;
            {
                this.zzgi().zziv().zzg("Error querying conditional user property value", object);
                string3 = string2;
                object = Collections.emptyList();
                if (string2 == null) return object;
            }
            string2.close();
            return object;
        }
        if (string2 == null) throw var2_7;
        string2.close();
        throw var2_7;
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    @WorkerThread
    final void zzb(String var1_1, zzkg[] var2_3) {
        this.zzch();
        this.zzab();
        Preconditions.checkNotEmpty(var1_1);
        Preconditions.checkNotNull(var2_3);
        var15_4 = this.getWritableDatabase();
        var15_4.beginTransaction();
        this.zzch();
        this.zzab();
        Preconditions.checkNotEmpty(var1_1);
        var11_5 = this.getWritableDatabase();
        var7_6 = 0;
        var11_5.delete("property_filters", "app_id=?", new String[]{var1_1});
        var11_5.delete("event_filters", "app_id=?", new String[]{var1_1});
        var8_7 = var2_3.length;
        var4_8 = 0;
        do {
            block22 : {
                block25 : {
                    block24 : {
                        block23 : {
                            if (var4_8 >= var8_7) ** GOTO lbl35
                            var11_5 = var2_3[var4_8];
                            try {
                                this.zzch();
                                this.zzab();
                                Preconditions.checkNotEmpty(var1_1);
                                Preconditions.checkNotNull(var11_5);
                                Preconditions.checkNotNull(var11_5.zzatg);
                                Preconditions.checkNotNull(var11_5.zzatf);
                                if (var11_5.zzate == null) {
                                    this.zzgi().zziy().zzg("Audience with no ID. appId", zzfi.zzbp(var1_1));
                                    break block22;
                                }
                                var9_12 = var11_5.zzate;
                                var12_14 /* !! */  = var11_5.zzatg;
                                var5_10 = var12_14 /* !! */ .length;
                                var3_9 = 0;
                                break block23;
lbl35: // 1 sources:
                                var11_5 = new ArrayList<E>();
                                var4_8 = var2_3.length;
                                break;
                            }
                            catch (Throwable var1_2) {}
                            throw var1_2;
                        }
                        do {
                            if (var3_9 >= var5_10) break block24;
                            if (var12_14 /* !! */ [var3_9].zzatk == null) {
                                var12_14 /* !! */  = this.zzgi().zziy();
                                var13_15 = "Event filter with no ID. Audience definition ignored. appId, audienceId";
                                var14_16 = zzfi.zzbp(var1_1);
                                var11_5 = var11_5.zzate;
                                break;
                            }
                            ++var3_9;
                        } while (true);
lbl51: // 2 sources:
                        do {
                            var12_14 /* !! */ .zze(var13_15, var14_16, var11_5);
                            break block22;
                            break;
                        } while (true);
                    }
                    var12_14 /* !! */  = var11_5.zzatf;
                    var5_10 = var12_14 /* !! */ .length;
                    var3_9 = 0;
                    do {
                        if (var3_9 < var5_10) {
                            if (var12_14 /* !! */ [var3_9].zzatk == null) {
                                var12_14 /* !! */  = this.zzgi().zziy();
                                var13_15 = "Property filter with no ID. Audience definition ignored. appId, audienceId";
                                var14_16 = zzfi.zzbp(var1_1);
                                var11_5 = var11_5.zzate;
                                ** continue;
                            }
                        } else {
                            var12_14 /* !! */  = var11_5.zzatg;
                            var5_10 = var12_14 /* !! */ .length;
                            break;
                        }
                        ++var3_9;
                    } while (true);
                    for (var3_9 = 0; var3_9 < var5_10; ++var3_9) {
                        if (this.zza(var1_1, var9_12, (zzkh)var12_14 /* !! */ [var3_9])) continue;
                        var3_9 = 0;
                        break block25;
                    }
                    var3_9 = 1;
                }
                var6_11 = var3_9;
                if (var3_9 == 0) ** GOTO lbl88
                var11_5 = var11_5.zzatf;
                var10_13 = ((Object)var11_5).length;
                var5_10 = 0;
                do {
                    block27 : {
                        block26 : {
                            var6_11 = var3_9;
                            if (var5_10 >= var10_13) break block26;
                            if (this.zza(var1_1, var9_12, (zzkk)var11_5[var5_10])) break block27;
                            var6_11 = 0;
                        }
                        if (var6_11 != 0) break;
                        this.zzch();
                        this.zzab();
                        Preconditions.checkNotEmpty(var1_1);
                        var11_5 = this.getWritableDatabase();
                        var11_5.delete("property_filters", "app_id=? and audience_id=?", new String[]{var1_1, String.valueOf(var9_12)});
                        var11_5.delete("event_filters", "app_id=? and audience_id=?", new String[]{var1_1, String.valueOf(var9_12)});
                        break;
                    }
                    ++var5_10;
                } while (true);
            }
            ++var4_8;
        } while (true);
        for (var3_9 = var7_6; var3_9 < var4_8; ++var3_9) {
            var11_5.add(var2_3[var3_9].zzate);
        }
        ** try [egrp 2[TRYBLOCK] [17 : 535->548)] { 
lbl107: // 1 sources:
        this.zza(var1_1, (List<Integer>)var11_5);
        var15_4.setTransactionSuccessful();
        return;
lbl110: // 1 sources:
        finally {
            var15_4.endTransaction();
        }
    }

    /*
     * Exception decompiling
     */
    @WorkerThread
    public final List<zzkc> zzbe(String var1_1) {
        // This method has failed to decompile.  When submitting a bug report, please provide this stack trace, and (if you hold appropriate legal rights) the relevant class file.
        // org.benf.cfr.reader.util.ConfusedCFRException: Tried to end blocks [1[TRYBLOCK]], but top level block is 12[SIMPLE_IF_TAKEN]
        // org.benf.cfr.reader.bytecode.analysis.opgraph.Op04StructuredStatement.processEndingBlocks(Op04StructuredStatement.java:416)
        // org.benf.cfr.reader.bytecode.analysis.opgraph.Op04StructuredStatement.buildNestedBlocks(Op04StructuredStatement.java:468)
        // org.benf.cfr.reader.bytecode.analysis.opgraph.Op03SimpleStatement.createInitialStructuredBlock(Op03SimpleStatement.java:2960)
        // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisInner(CodeAnalyser.java:818)
        // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisOrWrapFail(CodeAnalyser.java:196)
        // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysis(CodeAnalyser.java:141)
        // org.benf.cfr.reader.entities.attributes.AttributeCode.analyse(AttributeCode.java:95)
        // org.benf.cfr.reader.entities.Method.analyse(Method.java:372)
        // org.benf.cfr.reader.entities.ClassFile.analyseMid(ClassFile.java:867)
        // org.benf.cfr.reader.entities.ClassFile.analyseTop(ClassFile.java:768)
        // org.benf.cfr.reader.Main.doJar(Main.java:141)
        // org.benf.cfr.reader.Main.main(Main.java:242)
        throw new IllegalStateException("Decompilation failed");
    }

    /*
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    @WorkerThread
    public final zzea zzbf(String string2) {
        Cursor cursor;
        boolean bl;
        Object object;
        block24 : {
            block23 : {
                boolean bl2;
                block22 : {
                    block17 : {
                        block16 : {
                            void var1_4;
                            block20 : {
                                SQLiteException sQLiteException;
                                block21 : {
                                    block19 : {
                                        block18 : {
                                            block15 : {
                                                Preconditions.checkNotEmpty(string2);
                                                this.zzab();
                                                this.zzch();
                                                object = this.getWritableDatabase();
                                                bl2 = false;
                                                cursor = object.query("apps", new String[]{"app_instance_id", "gmp_app_id", "resettable_device_id_hash", "last_bundle_index", "last_bundle_start_timestamp", "last_bundle_end_timestamp", "app_version", "app_store", "gmp_version", "dev_cert_hash", "measurement_enabled", "day", "daily_public_events_count", "daily_events_count", "daily_conversions_count", "config_fetched_time", "failed_config_fetch_time", "app_version_int", "firebase_instance_id", "daily_error_events_count", "daily_realtime_events_count", "health_monitor_sample", "android_id", "adid_reporting_enabled", "ssaid_reporting_enabled"}, "app_id=?", new String[]{string2}, null, null, null);
                                                bl = cursor.moveToFirst();
                                                if (bl) break block15;
                                                if (cursor == null) return null;
                                                cursor.close();
                                                return null;
                                            }
                                            try {
                                                object = new zzea(this.zzalo.zzlm(), string2);
                                                object.zzam(cursor.getString(0));
                                                object.zzan(cursor.getString(1));
                                                object.zzao(cursor.getString(2));
                                                object.zzw(cursor.getLong(3));
                                                object.zzr(cursor.getLong(4));
                                                object.zzs(cursor.getLong(5));
                                                object.setAppVersion(cursor.getString(6));
                                                object.zzaq(cursor.getString(7));
                                                object.zzu(cursor.getLong(8));
                                                object.zzv(cursor.getLong(9));
                                                if (!cursor.isNull(10) && cursor.getInt(10) == 0) break block16;
                                                break block17;
                                            }
                                            catch (Throwable throwable) {
                                                break block18;
                                            }
                                            catch (SQLiteException sQLiteException2) {
                                                break block19;
                                            }
                                            catch (Throwable throwable) {
                                                // empty catch block
                                            }
                                        }
                                        object = cursor;
                                        break block20;
                                        catch (SQLiteException sQLiteException3) {
                                            // empty catch block
                                        }
                                    }
                                    sQLiteException = object;
                                    object = cursor;
                                    break block21;
                                    catch (Throwable throwable) {
                                        object = null;
                                        break block20;
                                    }
                                    catch (SQLiteException sQLiteException4) {
                                        object = null;
                                        sQLiteException = sQLiteException4;
                                    }
                                }
                                try {
                                    this.zzgi().zziv().zze("Error querying app. appId", zzfi.zzbp(string2), (Object)sQLiteException);
                                    if (object == null) return null;
                                }
                                catch (Throwable throwable) {
                                    // empty catch block
                                }
                                object.close();
                                return null;
                            }
                            if (object == null) throw var1_4;
                            object.close();
                            throw var1_4;
                        }
                        bl = false;
                        break block22;
                    }
                    bl = true;
                }
                object.setMeasurementEnabled(bl);
                object.zzz(cursor.getLong(11));
                object.zzaa(cursor.getLong(12));
                object.zzab(cursor.getLong(13));
                object.zzac(cursor.getLong(14));
                object.zzx(cursor.getLong(15));
                object.zzy(cursor.getLong(16));
                long l = cursor.isNull(17) ? Integer.MIN_VALUE : (long)cursor.getInt(17);
                object.zzt(l);
                object.zzap(cursor.getString(18));
                object.zzae(cursor.getLong(19));
                object.zzad(cursor.getLong(20));
                object.zzar(cursor.getString(21));
                l = cursor.isNull(22) ? 0L : cursor.getLong(22);
                object.zzaf(l);
                bl = cursor.isNull(23) || cursor.getInt(23) != 0;
                object.zzd(bl);
                if (cursor.isNull(24)) break block23;
                bl = bl2;
                if (cursor.getInt(24) == 0) break block24;
            }
            bl = true;
        }
        object.zze(bl);
        object.zzgp();
        if (cursor.moveToNext()) {
            this.zzgi().zziv().zzg("Got multiple records for app, expected one. appId", zzfi.zzbp(string2));
        }
        if (cursor == null) return object;
        cursor.close();
        return object;
    }

    public final long zzbg(String string2) {
        int n;
        Preconditions.checkNotEmpty(string2);
        this.zzab();
        this.zzch();
        try {
            n = this.getWritableDatabase().delete("raw_events", "rowid in (select rowid from raw_events where app_id=? order by rowid desc limit -1 offset ?)", new String[]{string2, String.valueOf(Math.max(0, Math.min(1000000, this.zzgk().zzb(string2, zzez.zzait))))});
        }
        catch (SQLiteException sQLiteException) {
            this.zzgi().zziv().zze("Error deleting over the limit events. appId", zzfi.zzbp(string2), (Object)sQLiteException);
            return 0L;
        }
        return n;
    }

    /*
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    @WorkerThread
    public final byte[] zzbh(String string2) {
        void var1_4;
        Cursor cursor;
        block11 : {
            Cursor cursor2;
            block10 : {
                byte[] arrby;
                block9 : {
                    Preconditions.checkNotEmpty(string2);
                    this.zzab();
                    this.zzch();
                    cursor = cursor2 = this.getWritableDatabase().query("apps", new String[]{"remote_config"}, "app_id=?", new String[]{string2}, null, null, null);
                    boolean bl = cursor2.moveToFirst();
                    if (bl) break block9;
                    if (cursor2 == null) return null;
                    cursor2.close();
                    return null;
                }
                cursor = cursor2;
                try {
                    arrby = cursor2.getBlob(0);
                    cursor = cursor2;
                    if (cursor2.moveToNext()) {
                        cursor = cursor2;
                        this.zzgi().zziv().zzg("Got multiple records for app config, expected one. appId", zzfi.zzbp(string2));
                    }
                    if (cursor2 == null) return arrby;
                }
                catch (SQLiteException sQLiteException) {
                    break block10;
                }
                cursor2.close();
                return arrby;
                catch (Throwable throwable) {
                    cursor = null;
                    break block11;
                }
                catch (SQLiteException sQLiteException) {
                    cursor2 = null;
                }
            }
            cursor = cursor2;
            try {
                void var5_11;
                this.zzgi().zziv().zze("Error querying remote config. appId", zzfi.zzbp(string2), var5_11);
                if (cursor2 == null) return null;
            }
            catch (Throwable throwable) {
                // empty catch block
            }
            cursor2.close();
            return null;
        }
        if (cursor == null) throw var1_4;
        cursor.close();
        throw var1_4;
    }

    /*
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    final Map<Integer, zzkv> zzbi(String string2) {
        void var1_4;
        SQLiteDatabase sQLiteDatabase;
        block13 : {
            Cursor cursor;
            block12 : {
                ArrayMap<Integer, zzkv> arrayMap;
                boolean bl;
                block11 : {
                    this.zzch();
                    this.zzab();
                    Preconditions.checkNotEmpty(string2);
                    sQLiteDatabase = this.getWritableDatabase();
                    cursor = sQLiteDatabase.query("audience_filter_values", new String[]{"audience_id", "current_results"}, "app_id=?", new String[]{string2}, null, null, null);
                    sQLiteDatabase = cursor;
                    bl = cursor.moveToFirst();
                    if (bl) break block11;
                    if (cursor == null) return null;
                    cursor.close();
                    return null;
                }
                sQLiteDatabase = cursor;
                try {
                    arrayMap = new ArrayMap<Integer, zzkv>();
                    do {
                        sQLiteDatabase = cursor;
                        int n = cursor.getInt(0);
                        sQLiteDatabase = cursor;
                        Object object = cursor.getBlob(1);
                        sQLiteDatabase = cursor;
                        object = zzaca.zza(object, 0, ((byte[])object).length);
                        sQLiteDatabase = cursor;
                        zzkv zzkv2 = new zzkv();
                        sQLiteDatabase = cursor;
                        try {
                            zzkv2.zzb((zzaca)object);
                            sQLiteDatabase = cursor;
                            arrayMap.put(n, zzkv2);
                        }
                        catch (IOException iOException) {
                            sQLiteDatabase = cursor;
                            this.zzgi().zziv().zzd("Failed to merge filter results. appId, audienceId, error", zzfi.zzbp(string2), n, iOException);
                        }
                        sQLiteDatabase = cursor;
                    } while (bl = cursor.moveToNext());
                    if (cursor == null) return arrayMap;
                }
                catch (SQLiteException sQLiteException) {
                    break block12;
                }
                cursor.close();
                return arrayMap;
                catch (Throwable throwable) {
                    sQLiteDatabase = null;
                    break block13;
                }
                catch (SQLiteException sQLiteException) {
                    cursor = null;
                }
            }
            sQLiteDatabase = cursor;
            try {
                void var6_11;
                this.zzgi().zziv().zze("Database error querying filter results. appId", zzfi.zzbp(string2), var6_11);
                if (cursor == null) return null;
            }
            catch (Throwable throwable) {
                // empty catch block
            }
            cursor.close();
            return null;
        }
        if (sQLiteDatabase == null) throw var1_4;
        sQLiteDatabase.close();
        throw var1_4;
    }

    public final long zzbj(String string2) {
        Preconditions.checkNotEmpty(string2);
        return this.zza("select count(1) from events where app_id=? and name not like '!_%' escape '!'", new String[]{string2}, 0L);
    }

    @WorkerThread
    public final List<zzef> zzc(String charSequence, String arrstring, String string2) {
        Preconditions.checkNotEmpty((String)charSequence);
        this.zzab();
        this.zzch();
        ArrayList<String> arrayList = new ArrayList<String>(3);
        arrayList.add((String)charSequence);
        charSequence = new StringBuilder("app_id=?");
        if (!TextUtils.isEmpty((CharSequence)arrstring)) {
            arrayList.add((String)arrstring);
            charSequence.append(" and origin=?");
        }
        if (!TextUtils.isEmpty((CharSequence)string2)) {
            arrayList.add(String.valueOf(string2).concat("*"));
            charSequence.append(" and name glob ?");
        }
        arrstring = arrayList.toArray(new String[arrayList.size()]);
        return this.zzb(charSequence.toString(), arrstring);
    }

    @WorkerThread
    @VisibleForTesting
    final void zzc(List<Long> object) {
        this.zzab();
        this.zzch();
        Preconditions.checkNotNull(object);
        Preconditions.checkNotZero(object.size());
        if (!this.zzid()) {
            return;
        }
        object = TextUtils.join((CharSequence)",", object);
        StringBuilder stringBuilder = new StringBuilder(String.valueOf(object).length() + 2);
        stringBuilder.append("(");
        stringBuilder.append((String)object);
        stringBuilder.append(")");
        object = stringBuilder.toString();
        stringBuilder = new StringBuilder(String.valueOf(object).length() + 80);
        stringBuilder.append("SELECT COUNT(1) FROM queue WHERE rowid IN ");
        stringBuilder.append((String)object);
        stringBuilder.append(" AND retry_count =  2147483647 LIMIT 1");
        if (this.zza(stringBuilder.toString(), (String[])null) > 0L) {
            this.zzgi().zziy().log("The number of upload retries exceeds the limit. Will remain unchanged.");
        }
        try {
            stringBuilder = this.getWritableDatabase();
            StringBuilder stringBuilder2 = new StringBuilder(String.valueOf(object).length() + 127);
            stringBuilder2.append("UPDATE queue SET retry_count = IFNULL(retry_count, 0) + 1 WHERE rowid IN ");
            stringBuilder2.append((String)object);
            stringBuilder2.append(" AND (retry_count IS NULL OR retry_count < 2147483647)");
            stringBuilder.execSQL(stringBuilder2.toString());
            return;
        }
        catch (SQLiteException sQLiteException) {
            this.zzgi().zziv().zzg("Error incrementing retry count. error", (Object)sQLiteException);
            return;
        }
    }

    /*
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    @WorkerThread
    public final zzet zzf(String string2, String string3) {
        void var1_6;
        SQLiteDatabase sQLiteDatabase;
        block21 : {
            SQLiteDatabase sQLiteDatabase2;
            block22 : {
                block23 : {
                    long l3;
                    long l;
                    zzet zzet2;
                    long l5;
                    SQLiteDatabase sQLiteDatabase3;
                    Long l4;
                    Boolean bl;
                    long l2;
                    block24 : {
                        boolean bl2;
                        block20 : {
                            block19 : {
                                block18 : {
                                    boolean bl3;
                                    block17 : {
                                        Preconditions.checkNotEmpty(string2);
                                        Preconditions.checkNotEmpty(string3);
                                        this.zzab();
                                        this.zzch();
                                        sQLiteDatabase2 = this.getWritableDatabase();
                                        bl2 = true;
                                        sQLiteDatabase2 = sQLiteDatabase2.query("events", new String[]{"lifetime_count", "current_bundle_count", "last_fire_timestamp", "last_bundled_timestamp", "last_sampled_complex_event_id", "last_sampling_rate", "last_exempt_from_sampling"}, "app_id=? and name=?", new String[]{string2, string3}, null, null, null);
                                        bl3 = sQLiteDatabase2.moveToFirst();
                                        if (bl3) break block17;
                                        if (sQLiteDatabase2 == null) return null;
                                        sQLiteDatabase2.close();
                                        return null;
                                    }
                                    l = sQLiteDatabase2.getLong(0);
                                    l3 = sQLiteDatabase2.getLong(1);
                                    l2 = sQLiteDatabase2.getLong(2);
                                    l5 = sQLiteDatabase2.isNull(3) ? 0L : sQLiteDatabase2.getLong(3);
                                    if (sQLiteDatabase2.isNull(4)) {
                                        Object var15_15 = null;
                                    } else {
                                        Long l6 = sQLiteDatabase2.getLong(4);
                                    }
                                    l4 = sQLiteDatabase2.isNull(5) ? null : Long.valueOf(sQLiteDatabase2.getLong(5));
                                    bl3 = sQLiteDatabase2.isNull(6);
                                    if (bl3) break block18;
                                    try {
                                        if (sQLiteDatabase2.getLong(6) != 1L) break block19;
                                        break block20;
                                    }
                                    catch (Throwable throwable) {
                                        sQLiteDatabase = sQLiteDatabase2;
                                        break block21;
                                    }
                                    catch (SQLiteException sQLiteException) {
                                        break block22;
                                    }
                                }
                                bl = null;
                                break block24;
                                catch (Throwable throwable) {
                                    sQLiteDatabase = sQLiteDatabase2;
                                    break block21;
                                }
                                catch (SQLiteException sQLiteException) {
                                    // empty catch block
                                    break block23;
                                }
                                catch (Throwable throwable) {
                                    sQLiteDatabase = null;
                                    break block21;
                                }
                                catch (SQLiteException sQLiteException) {
                                    sQLiteDatabase2 = null;
                                    break block22;
                                }
                            }
                            bl2 = false;
                        }
                        bl = bl2;
                    }
                    sQLiteDatabase = sQLiteDatabase3 = sQLiteDatabase2;
                    try {
                        void var15_17;
                        zzet2 = new zzet(string2, string3, l, l3, l2, l5, (Long)var15_17, l4, bl);
                        sQLiteDatabase = sQLiteDatabase3;
                        if (sQLiteDatabase3.moveToNext()) {
                            sQLiteDatabase = sQLiteDatabase3;
                            this.zzgi().zziv().zzg("Got multiple records for event aggregates, expected one. appId", zzfi.zzbp(string2));
                        }
                        if (sQLiteDatabase3 == null) return zzet2;
                    }
                    catch (SQLiteException sQLiteException) {}
                    sQLiteDatabase3.close();
                    return zzet2;
                }
                SQLiteDatabase sQLiteDatabase4 = sQLiteDatabase;
            }
            sQLiteDatabase = sQLiteDatabase2;
            try {
                void var15_22;
                this.zzgi().zziv().zzd("Error querying events. appId", zzfi.zzbp(string2), this.zzgf().zzbm(string3), var15_22);
                if (sQLiteDatabase2 == null) return null;
            }
            catch (Throwable throwable) {
                // empty catch block
            }
            sQLiteDatabase2.close();
            return null;
        }
        if (sQLiteDatabase == null) throw var1_6;
        sQLiteDatabase.close();
        throw var1_6;
    }

    @WorkerThread
    public final void zzg(String string2, String string3) {
        Preconditions.checkNotEmpty(string2);
        Preconditions.checkNotEmpty(string3);
        this.zzab();
        this.zzch();
        try {
            int n = this.getWritableDatabase().delete("user_attributes", "app_id=? and name=?", new String[]{string2, string3});
            this.zzgi().zzjc().zzg("Deleted user attribute rows", n);
            return;
        }
        catch (SQLiteException sQLiteException) {
            this.zzgi().zziv().zzd("Error deleting user attribute. appId", zzfi.zzbp(string2), this.zzgf().zzbo(string3), (Object)sQLiteException);
            return;
        }
    }

    @Override
    protected final boolean zzgn() {
        return false;
    }

    /*
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    @WorkerThread
    public final zzkc zzh(String string2, String string3) {
        void var1_5;
        Cursor cursor;
        block14 : {
            Cursor cursor2;
            Cursor sQLiteException;
            block15 : {
                block13 : {
                    Object object;
                    block12 : {
                        Preconditions.checkNotEmpty(string2);
                        Preconditions.checkNotEmpty(string3);
                        this.zzab();
                        this.zzch();
                        cursor = this.getWritableDatabase().query("user_attributes", new String[]{"set_timestamp", "value", "origin"}, "app_id=? and name=?", new String[]{string2, string3}, null, null, null);
                        boolean bl = cursor.moveToFirst();
                        if (bl) break block12;
                        if (cursor == null) return null;
                        cursor.close();
                        return null;
                    }
                    long l = cursor.getLong(0);
                    cursor2 = cursor;
                    try {
                        object = this.zza(cursor, 1);
                        cursor2 = cursor;
                        object = new zzkc(string2, cursor.getString(2), string3, l, object);
                        cursor2 = cursor;
                        if (cursor.moveToNext()) {
                            cursor2 = cursor;
                            this.zzgi().zziv().zzg("Got multiple records for user property, expected one. appId", zzfi.zzbp(string2));
                        }
                        if (cursor == null) return object;
                    }
                    catch (SQLiteException sQLiteException2) {
                        break block13;
                    }
                    cursor.close();
                    return object;
                    catch (Throwable throwable) {
                        break block14;
                    }
                    catch (SQLiteException sQLiteException3) {
                        // empty catch block
                    }
                }
                sQLiteException = cursor2;
                break block15;
                catch (Throwable throwable) {
                    cursor = null;
                    break block14;
                }
                catch (SQLiteException sQLiteException4) {
                    cursor = null;
                }
            }
            cursor2 = cursor;
            try {
                this.zzgi().zziv().zzd("Error querying user property. appId", zzfi.zzbp(string2), this.zzgf().zzbo(string3), (Object)sQLiteException);
                if (cursor == null) return null;
            }
            catch (Throwable throwable) {
                cursor = cursor2;
            }
            cursor.close();
            return null;
        }
        if (cursor == null) throw var1_5;
        cursor.close();
        throw var1_5;
    }

    /*
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    @WorkerThread
    public final String zzhv() {
        Cursor cursor;
        Throwable throwable;
        block9 : {
            SQLiteDatabase sQLiteDatabase;
            block8 : {
                block7 : {
                    String string2;
                    sQLiteDatabase = this.getWritableDatabase();
                    cursor = sQLiteDatabase.rawQuery("select app_id from queue order by has_realtime desc, rowid asc limit 1;", null);
                    sQLiteDatabase = cursor;
                    try {
                        if (!cursor.moveToFirst()) break block7;
                        sQLiteDatabase = cursor;
                        string2 = cursor.getString(0);
                        if (cursor == null) return string2;
                    }
                    catch (SQLiteException sQLiteException) {
                        break block8;
                    }
                    cursor.close();
                    return string2;
                }
                if (cursor == null) return null;
                cursor.close();
                return null;
                catch (Throwable throwable2) {
                    cursor = null;
                    throwable = throwable2;
                    break block9;
                }
                catch (SQLiteException sQLiteException) {
                    cursor = null;
                }
            }
            sQLiteDatabase = cursor;
            try {
                void var3_8;
                this.zzgi().zziv().zzg("Database error getting next bundle app id", var3_8);
                if (cursor == null) return null;
            }
            catch (Throwable throwable3) {
                cursor = sQLiteDatabase;
            }
            cursor.close();
            return null;
        }
        if (cursor == null) throw throwable;
        cursor.close();
        throw throwable;
    }

    public final boolean zzhw() {
        if (this.zza("select count(1) > 0 from queue where has_realtime = 1", (String[])null) != 0L) {
            return true;
        }
        return false;
    }

    @WorkerThread
    final void zzhx() {
        this.zzab();
        this.zzch();
        if (!this.zzid()) {
            return;
        }
        long l = this.zzgj().zzalw.get();
        long l2 = this.zzbt().elapsedRealtime();
        if (Math.abs(l2 - l) > zzez.zzajc.get()) {
            int n;
            this.zzgj().zzalw.set(l2);
            this.zzab();
            this.zzch();
            if (this.zzid() && (n = this.getWritableDatabase().delete("queue", "abs(bundle_end_timestamp - ?) > cast(? as integer)", new String[]{String.valueOf(this.zzbt().currentTimeMillis()), String.valueOf(zzeh.zzhq())})) > 0) {
                this.zzgi().zzjc().zzg("Deleted stale rows. rowsDeleted", n);
            }
        }
    }

    @WorkerThread
    public final long zzhy() {
        return this.zza("select max(bundle_end_timestamp) from queue", null, 0L);
    }

    @WorkerThread
    public final long zzhz() {
        return this.zza("select max(timestamp) from raw_events", null, 0L);
    }

    /*
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    @WorkerThread
    public final zzef zzi(String string2, String string3) {
        void var1_5;
        Cursor cursor;
        block14 : {
            Cursor cursor2;
            block15 : {
                block13 : {
                    zzef zzef2;
                    boolean bl;
                    block12 : {
                        Preconditions.checkNotEmpty(string2);
                        Preconditions.checkNotEmpty(string3);
                        this.zzab();
                        this.zzch();
                        cursor = this.getWritableDatabase().query("conditional_properties", new String[]{"origin", "value", "active", "trigger_event_name", "trigger_timeout", "timed_out_event", "creation_timestamp", "triggered_event", "triggered_timestamp", "time_to_live", "expired_event"}, "app_id=? and name=?", new String[]{string2, string3}, null, null, null);
                        bl = cursor.moveToFirst();
                        if (bl) break block12;
                        if (cursor == null) return null;
                        cursor.close();
                        return null;
                    }
                    String string4 = cursor.getString(0);
                    cursor2 = cursor;
                    try {
                        Object object = this.zza(cursor, 1);
                        cursor2 = cursor;
                        bl = cursor.getInt(2) != 0;
                        cursor2 = cursor;
                        String string5 = cursor.getString(3);
                        cursor2 = cursor;
                        long l = cursor.getLong(4);
                        cursor2 = cursor;
                        zzex zzex2 = this.zzjf().zza(cursor.getBlob(5), zzex.CREATOR);
                        cursor2 = cursor;
                        long l2 = cursor.getLong(6);
                        cursor2 = cursor;
                        zzex zzex3 = this.zzjf().zza(cursor.getBlob(7), zzex.CREATOR);
                        cursor2 = cursor;
                        long l3 = cursor.getLong(8);
                        cursor2 = cursor;
                        long l4 = cursor.getLong(9);
                        cursor2 = cursor;
                        zzex zzex4 = this.zzjf().zza(cursor.getBlob(10), zzex.CREATOR);
                        cursor2 = cursor;
                        zzef2 = new zzef(string2, string4, new zzka(string3, l3, object, string4), l2, bl, string5, zzex2, l, zzex3, l4, zzex4);
                        cursor2 = cursor;
                        if (cursor.moveToNext()) {
                            cursor2 = cursor;
                            this.zzgi().zziv().zze("Got multiple records for conditional property, expected one", zzfi.zzbp(string2), this.zzgf().zzbo(string3));
                        }
                        if (cursor == null) return zzef2;
                    }
                    catch (SQLiteException sQLiteException) {
                        break block13;
                    }
                    cursor.close();
                    return zzef2;
                    catch (Throwable throwable) {
                        break block14;
                    }
                    catch (SQLiteException sQLiteException) {
                        // empty catch block
                    }
                }
                Cursor cursor3 = cursor2;
                break block15;
                catch (Throwable throwable) {
                    cursor = null;
                    break block14;
                }
                catch (SQLiteException sQLiteException) {
                    cursor = null;
                }
            }
            cursor2 = cursor;
            try {
                void var14_13;
                this.zzgi().zziv().zzd("Error querying conditional property", zzfi.zzbp(string2), this.zzgf().zzbo(string3), var14_13);
                if (cursor == null) return null;
            }
            catch (Throwable throwable) {
                cursor = cursor2;
            }
            cursor.close();
            return null;
        }
        if (cursor == null) throw var1_5;
        cursor.close();
        throw var1_5;
    }

    public final boolean zzia() {
        if (this.zza("select count(1) > 0 from raw_events", (String[])null) != 0L) {
            return true;
        }
        return false;
    }

    public final boolean zzib() {
        if (this.zza("select count(1) > 0 from raw_events where realtime = 1", (String[])null) != 0L) {
            return true;
        }
        return false;
    }

    /*
     * WARNING - Removed back jump from a try to a catch block - possible behaviour change.
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    public final long zzic() {
        Object object;
        Cursor cursor;
        block9 : {
            SQLiteException sQLiteException;
            block10 : {
                long l;
                Cursor cursor2;
                block8 : {
                    cursor2 = null;
                    cursor = null;
                    object = this.getWritableDatabase().rawQuery("select rowid from raw_events order by rowid desc limit 1;", null);
                    boolean bl = object.moveToFirst();
                    if (bl) break block8;
                    if (object == null) return -1L;
                    object.close();
                    return -1L;
                }
                try {
                    l = object.getLong(0);
                    if (object == null) return l;
                }
                catch (Throwable throwable) {
                    cursor = object;
                    object = throwable;
                    break block9;
                }
                catch (SQLiteException sQLiteException2) {
                    sQLiteException = sQLiteException2;
                    break block10;
                }
                object.close();
                return l;
                catch (Throwable throwable) {
                    break block9;
                }
                catch (SQLiteException sQLiteException3) {
                    object = cursor2;
                }
            }
            cursor = object;
            {
                this.zzgi().zziv().zzg("Error querying raw events", (Object)sQLiteException);
                if (object == null) return -1L;
            }
            object.close();
            return -1L;
        }
        if (cursor == null) throw object;
        cursor.close();
        throw object;
    }

    @WorkerThread
    public final int zzj(String string2, String string3) {
        Preconditions.checkNotEmpty(string2);
        Preconditions.checkNotEmpty(string3);
        this.zzab();
        this.zzch();
        try {
            int n = this.getWritableDatabase().delete("conditional_properties", "app_id=? and name=?", new String[]{string2, string3});
            return n;
        }
        catch (SQLiteException sQLiteException) {
            this.zzgi().zziv().zzd("Error deleting conditional property", zzfi.zzbp(string2), this.zzgf().zzbo(string3), (Object)sQLiteException);
            return 0;
        }
    }

    /*
     * Exception decompiling
     */
    final Map<Integer, List<zzkh>> zzk(String var1_1, String var2_5) {
        // This method has failed to decompile.  When submitting a bug report, please provide this stack trace, and (if you hold appropriate legal rights) the relevant class file.
        // org.benf.cfr.reader.util.ConfusedCFRException: Tried to end blocks [1[TRYBLOCK]], but top level block is 12[SIMPLE_IF_TAKEN]
        // org.benf.cfr.reader.bytecode.analysis.opgraph.Op04StructuredStatement.processEndingBlocks(Op04StructuredStatement.java:416)
        // org.benf.cfr.reader.bytecode.analysis.opgraph.Op04StructuredStatement.buildNestedBlocks(Op04StructuredStatement.java:468)
        // org.benf.cfr.reader.bytecode.analysis.opgraph.Op03SimpleStatement.createInitialStructuredBlock(Op03SimpleStatement.java:2960)
        // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisInner(CodeAnalyser.java:818)
        // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisOrWrapFail(CodeAnalyser.java:196)
        // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysis(CodeAnalyser.java:141)
        // org.benf.cfr.reader.entities.attributes.AttributeCode.analyse(AttributeCode.java:95)
        // org.benf.cfr.reader.entities.Method.analyse(Method.java:372)
        // org.benf.cfr.reader.entities.ClassFile.analyseMid(ClassFile.java:867)
        // org.benf.cfr.reader.entities.ClassFile.analyseTop(ClassFile.java:768)
        // org.benf.cfr.reader.Main.doJar(Main.java:141)
        // org.benf.cfr.reader.Main.main(Main.java:242)
        throw new IllegalStateException("Decompilation failed");
    }

    /*
     * Exception decompiling
     */
    final Map<Integer, List<zzkk>> zzl(String var1_1, String var2_5) {
        // This method has failed to decompile.  When submitting a bug report, please provide this stack trace, and (if you hold appropriate legal rights) the relevant class file.
        // org.benf.cfr.reader.util.ConfusedCFRException: Tried to end blocks [1[TRYBLOCK]], but top level block is 12[SIMPLE_IF_TAKEN]
        // org.benf.cfr.reader.bytecode.analysis.opgraph.Op04StructuredStatement.processEndingBlocks(Op04StructuredStatement.java:416)
        // org.benf.cfr.reader.bytecode.analysis.opgraph.Op04StructuredStatement.buildNestedBlocks(Op04StructuredStatement.java:468)
        // org.benf.cfr.reader.bytecode.analysis.opgraph.Op03SimpleStatement.createInitialStructuredBlock(Op03SimpleStatement.java:2960)
        // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisInner(CodeAnalyser.java:818)
        // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisOrWrapFail(CodeAnalyser.java:196)
        // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysis(CodeAnalyser.java:141)
        // org.benf.cfr.reader.entities.attributes.AttributeCode.analyse(AttributeCode.java:95)
        // org.benf.cfr.reader.entities.Method.analyse(Method.java:372)
        // org.benf.cfr.reader.entities.ClassFile.analyseMid(ClassFile.java:867)
        // org.benf.cfr.reader.entities.ClassFile.analyseTop(ClassFile.java:768)
        // org.benf.cfr.reader.Main.doJar(Main.java:141)
        // org.benf.cfr.reader.Main.main(Main.java:242)
        throw new IllegalStateException("Decompilation failed");
    }

    /*
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    @WorkerThread
    @VisibleForTesting
    protected final long zzm(String string2, String string3) {
        SQLiteDatabase sQLiteDatabase;
        void var1_3;
        block16 : {
            long l;
            block13 : {
                block12 : {
                    CharSequence charSequence;
                    block10 : {
                        block11 : {
                            long l2;
                            Preconditions.checkNotEmpty(string2);
                            Preconditions.checkNotEmpty(string3);
                            this.zzab();
                            this.zzch();
                            sQLiteDatabase = this.getWritableDatabase();
                            sQLiteDatabase.beginTransaction();
                            charSequence = new StringBuilder(String.valueOf(string3).length() + 32);
                            charSequence.append("select ");
                            charSequence.append(string3);
                            charSequence.append(" from app2 where app_id=?");
                            charSequence = charSequence.toString();
                            l = l2 = this.zza((String)charSequence, new String[]{string2}, -1L);
                            if (l2 != -1L) break block10;
                            charSequence = new ContentValues();
                            charSequence.put("app_id", string2);
                            charSequence.put("first_open_count", Integer.valueOf(0));
                            charSequence.put("previous_install_count", Integer.valueOf(0));
                            if (sQLiteDatabase.insertWithOnConflict("app2", null, (ContentValues)charSequence, 5) != -1L) break block11;
                            this.zzgi().zziv().zze("Failed to insert column (got -1). appId", zzfi.zzbp(string2), string3);
                            sQLiteDatabase.endTransaction();
                            return -1L;
                        }
                        l = 0L;
                    }
                    charSequence = new ContentValues();
                    charSequence.put("app_id", string2);
                    charSequence.put(string3, Long.valueOf(l + 1L));
                    if ((long)sQLiteDatabase.update("app2", (ContentValues)charSequence, "app_id = ?", new String[]{string2}) != 0L) break block12;
                    this.zzgi().zziv().zze("Failed to update column (got 0). appId", zzfi.zzbp(string2), string3);
                    sQLiteDatabase.endTransaction();
                    return -1L;
                }
                try {
                    void var7_11;
                    block14 : {
                        block15 : {
                            try {
                                sQLiteDatabase.setTransactionSuccessful();
                                break block13;
                            }
                            catch (SQLiteException sQLiteException) {
                                break block14;
                            }
                            catch (SQLiteException sQLiteException) {
                                break block15;
                            }
                            catch (Throwable throwable) {
                                break block16;
                            }
                            catch (SQLiteException sQLiteException) {
                                // empty catch block
                            }
                        }
                        l = 0L;
                    }
                    this.zzgi().zziv().zzd("Error inserting column. appId", zzfi.zzbp(string2), string3, var7_11);
                }
                catch (Throwable throwable) {}
            }
            sQLiteDatabase.endTransaction();
            return l;
        }
        sQLiteDatabase.endTransaction();
        throw var1_3;
    }
}

