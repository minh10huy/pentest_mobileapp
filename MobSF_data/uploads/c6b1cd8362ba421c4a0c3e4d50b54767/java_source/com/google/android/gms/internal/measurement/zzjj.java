/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.content.Context
 *  android.os.Bundle
 *  android.os.Handler
 *  android.os.Looper
 */
package com.google.android.gms.internal.measurement;

import android.content.Context;
import android.os.Bundle;
import android.os.Handler;
import android.os.Looper;
import android.support.annotation.WorkerThread;
import com.google.android.gms.common.util.Clock;
import com.google.android.gms.common.util.VisibleForTesting;
import com.google.android.gms.internal.measurement.zzdu;
import com.google.android.gms.internal.measurement.zzdz;
import com.google.android.gms.internal.measurement.zzee;
import com.google.android.gms.internal.measurement.zzeh;
import com.google.android.gms.internal.measurement.zzep;
import com.google.android.gms.internal.measurement.zzer;
import com.google.android.gms.internal.measurement.zzfd;
import com.google.android.gms.internal.measurement.zzfe;
import com.google.android.gms.internal.measurement.zzfg;
import com.google.android.gms.internal.measurement.zzfi;
import com.google.android.gms.internal.measurement.zzfk;
import com.google.android.gms.internal.measurement.zzft;
import com.google.android.gms.internal.measurement.zzfv;
import com.google.android.gms.internal.measurement.zzfw;
import com.google.android.gms.internal.measurement.zzgi;
import com.google.android.gms.internal.measurement.zzgn;
import com.google.android.gms.internal.measurement.zzhk;
import com.google.android.gms.internal.measurement.zzhm;
import com.google.android.gms.internal.measurement.zzig;
import com.google.android.gms.internal.measurement.zzih;
import com.google.android.gms.internal.measurement.zzik;
import com.google.android.gms.internal.measurement.zzjk;
import com.google.android.gms.internal.measurement.zzjl;
import com.google.android.gms.internal.measurement.zzkd;

public final class zzjj
extends zzdz {
    private Handler handler;
    @VisibleForTesting
    private long zzarl;
    private final zzep zzarm;
    private final zzep zzarn;

    zzjj(zzgn zzgn2) {
        super(zzgn2);
        this.zzarm = new zzjk(this, this.zzacv);
        this.zzarn = new zzjl(this, this.zzacv);
        this.zzarl = this.zzbt().elapsedRealtime();
    }

    static /* synthetic */ void zza(zzjj zzjj2) {
        zzjj2.zzkw();
    }

    static /* synthetic */ void zza(zzjj zzjj2, long l) {
        zzjj2.zzak(l);
    }

    /*
     * Enabled aggressive block sorting
     */
    @WorkerThread
    private final void zzak(long l) {
        zzep zzep2;
        this.zzab();
        this.zzku();
        this.zzarm.cancel();
        this.zzarn.cancel();
        this.zzgi().zzjc().zzg("Activity resumed, time", l);
        this.zzarl = l;
        if (this.zzbt().currentTimeMillis() - this.zzgj().zzami.get() > this.zzgj().zzamk.get()) {
            this.zzgj().zzamj.set(true);
            this.zzgj().zzaml.set(0L);
        }
        if (this.zzgj().zzamj.get()) {
            zzep2 = this.zzarm;
            l = this.zzgj().zzamh.get();
        } else {
            zzep2 = this.zzarn;
            l = 3600000L;
        }
        zzep2.zzh(Math.max(0L, l - this.zzgj().zzaml.get()));
    }

    @WorkerThread
    private final void zzal(long l) {
        this.zzab();
        this.zzku();
        this.zzarm.cancel();
        this.zzarn.cancel();
        this.zzgi().zzjc().zzg("Activity paused, time", l);
        if (this.zzarl != 0L) {
            this.zzgj().zzaml.set(this.zzgj().zzaml.get() + (l - this.zzarl));
        }
    }

    static /* synthetic */ void zzb(zzjj zzjj2, long l) {
        zzjj2.zzal(l);
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    private final void zzku() {
        synchronized (this) {
            if (this.handler == null) {
                this.handler = new Handler(Looper.getMainLooper());
            }
            return;
        }
    }

    @WorkerThread
    private final void zzkw() {
        this.zzab();
        this.zzl(false);
        this.zzfx().zzp(this.zzbt().elapsedRealtime());
    }

    @Override
    protected final boolean zzgn() {
        return false;
    }

    final void zzkv() {
        this.zzarm.cancel();
        this.zzarn.cancel();
        this.zzarl = 0L;
    }

    @WorkerThread
    public final boolean zzl(boolean bl) {
        this.zzab();
        this.zzch();
        long l = this.zzbt().elapsedRealtime();
        this.zzgj().zzamk.set(this.zzbt().currentTimeMillis());
        long l2 = l - this.zzarl;
        if (!bl && l2 < 1000L) {
            this.zzgi().zzjc().zzg("Screen exposed for less than 1000 ms. Event not sent. time", l2);
            return false;
        }
        this.zzgj().zzaml.set(l2);
        this.zzgi().zzjc().zzg("Recording user engagement, ms", l2);
        Bundle bundle = new Bundle();
        bundle.putLong("_et", l2);
        zzih.zza(this.zzgb().zzkn(), bundle, true);
        this.zzfy().logEvent("auto", "_e", bundle);
        this.zzarl = l;
        this.zzarn.cancel();
        this.zzarn.zzh(Math.max(0L, 3600000L - this.zzgj().zzaml.get()));
        return true;
    }
}

