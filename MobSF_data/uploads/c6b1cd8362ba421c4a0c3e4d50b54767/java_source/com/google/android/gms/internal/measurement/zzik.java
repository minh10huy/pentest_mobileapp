/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.content.ComponentName
 *  android.content.Context
 *  android.content.Intent
 *  android.content.ServiceConnection
 *  android.content.pm.PackageManager
 *  android.os.RemoteException
 */
package com.google.android.gms.internal.measurement;

import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.content.ServiceConnection;
import android.content.pm.PackageManager;
import android.os.RemoteException;
import android.support.annotation.Nullable;
import android.support.annotation.WorkerThread;
import com.google.android.gms.common.GoogleApiAvailabilityLight;
import com.google.android.gms.common.internal.Preconditions;
import com.google.android.gms.common.internal.safeparcel.AbstractSafeParcelable;
import com.google.android.gms.common.stats.ConnectionTracker;
import com.google.android.gms.common.util.Clock;
import com.google.android.gms.common.util.VisibleForTesting;
import com.google.android.gms.internal.measurement.zzdu;
import com.google.android.gms.internal.measurement.zzdz;
import com.google.android.gms.internal.measurement.zzeb;
import com.google.android.gms.internal.measurement.zzee;
import com.google.android.gms.internal.measurement.zzef;
import com.google.android.gms.internal.measurement.zzeh;
import com.google.android.gms.internal.measurement.zzep;
import com.google.android.gms.internal.measurement.zzer;
import com.google.android.gms.internal.measurement.zzex;
import com.google.android.gms.internal.measurement.zzez;
import com.google.android.gms.internal.measurement.zzfa;
import com.google.android.gms.internal.measurement.zzfd;
import com.google.android.gms.internal.measurement.zzfe;
import com.google.android.gms.internal.measurement.zzfg;
import com.google.android.gms.internal.measurement.zzfi;
import com.google.android.gms.internal.measurement.zzfk;
import com.google.android.gms.internal.measurement.zzft;
import com.google.android.gms.internal.measurement.zzgi;
import com.google.android.gms.internal.measurement.zzgn;
import com.google.android.gms.internal.measurement.zzhk;
import com.google.android.gms.internal.measurement.zzhm;
import com.google.android.gms.internal.measurement.zzig;
import com.google.android.gms.internal.measurement.zzih;
import com.google.android.gms.internal.measurement.zzil;
import com.google.android.gms.internal.measurement.zzim;
import com.google.android.gms.internal.measurement.zzin;
import com.google.android.gms.internal.measurement.zzio;
import com.google.android.gms.internal.measurement.zzip;
import com.google.android.gms.internal.measurement.zziq;
import com.google.android.gms.internal.measurement.zzir;
import com.google.android.gms.internal.measurement.zzis;
import com.google.android.gms.internal.measurement.zzit;
import com.google.android.gms.internal.measurement.zziu;
import com.google.android.gms.internal.measurement.zziv;
import com.google.android.gms.internal.measurement.zziw;
import com.google.android.gms.internal.measurement.zzix;
import com.google.android.gms.internal.measurement.zziy;
import com.google.android.gms.internal.measurement.zzjj;
import com.google.android.gms.internal.measurement.zzjo;
import com.google.android.gms.internal.measurement.zzka;
import com.google.android.gms.internal.measurement.zzkd;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.concurrent.atomic.AtomicReference;

@VisibleForTesting
public final class zzik
extends zzdz {
    private final zziy zzaqo;
    private zzfa zzaqp;
    private volatile Boolean zzaqq;
    private final zzep zzaqr;
    private final zzjo zzaqs;
    private final List<Runnable> zzaqt = new ArrayList<Runnable>();
    private final zzep zzaqu;

    protected zzik(zzgn zzgn2) {
        super(zzgn2);
        this.zzaqs = new zzjo(zzgn2.zzbt());
        this.zzaqo = new zziy(this);
        this.zzaqr = new zzil(this, zzgn2);
        this.zzaqu = new zziq(this, zzgn2);
    }

    @WorkerThread
    private final void onServiceDisconnected(ComponentName componentName) {
        this.zzab();
        if (this.zzaqp != null) {
            this.zzaqp = null;
            this.zzgi().zzjc().zzg("Disconnected from device MeasurementService", (Object)componentName);
            this.zzab();
            this.zzdf();
        }
    }

    static /* synthetic */ zzfa zza(zzik zzik2, zzfa zzfa2) {
        zzik2.zzaqp = null;
        return null;
    }

    static /* synthetic */ zziy zza(zzik zzik2) {
        return zzik2.zzaqo;
    }

    static /* synthetic */ void zza(zzik zzik2, ComponentName componentName) {
        zzik2.onServiceDisconnected(componentName);
    }

    static /* synthetic */ void zzb(zzik zzik2) {
        zzik2.zzks();
    }

    static /* synthetic */ void zzc(zzik zzik2) {
        zzik2.zzcv();
    }

    @WorkerThread
    private final void zzcu() {
        this.zzab();
        this.zzaqs.start();
        this.zzaqr.zzh(zzez.zzajk.get());
    }

    @WorkerThread
    private final void zzcv() {
        this.zzab();
        if (!this.isConnected()) {
            return;
        }
        this.zzgi().zzjc().log("Inactivity, disconnecting from the service");
        this.disconnect();
    }

    static /* synthetic */ zzfa zzd(zzik zzik2) {
        return zzik2.zzaqp;
    }

    static /* synthetic */ void zze(zzik zzik2) {
        zzik2.zzcu();
    }

    @WorkerThread
    private final void zzf(Runnable runnable) throws IllegalStateException {
        this.zzab();
        if (this.isConnected()) {
            runnable.run();
            return;
        }
        if ((long)this.zzaqt.size() >= 1000L) {
            this.zzgi().zziv().log("Discarding data. Max runnable queue size reached");
            return;
        }
        this.zzaqt.add(runnable);
        this.zzaqu.zzh(60000L);
        this.zzdf();
    }

    @Nullable
    @WorkerThread
    private final zzeb zzk(boolean bl) {
        this.zzgl();
        zzfd zzfd2 = this.zzfz();
        String string2 = bl ? this.zzgi().zzje() : null;
        return zzfd2.zzbl(string2);
    }

    private final boolean zzkq() {
        this.zzgl();
        return true;
    }

    @WorkerThread
    private final void zzks() {
        this.zzab();
        this.zzgi().zzjc().zzg("Processing queued up service tasks", this.zzaqt.size());
        for (Runnable runnable : this.zzaqt) {
            try {
                runnable.run();
            }
            catch (Exception exception) {
                this.zzgi().zziv().zzg("Task exception while flushing queue", exception);
            }
        }
        this.zzaqt.clear();
        this.zzaqu.cancel();
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @WorkerThread
    public final void disconnect() {
        this.zzab();
        this.zzch();
        try {
            ConnectionTracker.getInstance().unbindService(this.getContext(), this.zzaqo);
        }
        catch (IllegalArgumentException | IllegalStateException runtimeException) {}
        this.zzaqp = null;
    }

    @WorkerThread
    public final boolean isConnected() {
        this.zzab();
        this.zzch();
        if (this.zzaqp != null) {
            return true;
        }
        return false;
    }

    @WorkerThread
    protected final void resetAnalyticsData() {
        this.zzab();
        this.zzfv();
        this.zzch();
        zzeb zzeb2 = this.zzk(false);
        if (this.zzkq()) {
            this.zzgc().resetAnalyticsData();
        }
        this.zzf(new zzim(this, zzeb2));
    }

    @WorkerThread
    @VisibleForTesting
    protected final void zza(zzfa zzfa2) {
        this.zzab();
        Preconditions.checkNotNull(zzfa2);
        this.zzaqp = zzfa2;
        this.zzcu();
        this.zzks();
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    @WorkerThread
    @VisibleForTesting
    final void zza(zzfa var1_1, AbstractSafeParcelable var2_2, zzeb var3_3) {
        this.zzab();
        this.zzfv();
        this.zzch();
        var8_4 = this.zzkq();
        var5_5 = 0;
        var4_6 = 100;
        while (var5_5 < 1001) {
            if (var4_6 != 100) return;
            var9_9 = new ArrayList<AbstractSafeParcelable>();
            if (var8_4 && (var10_13 = this.zzgc().zzp(100)) != null) {
                var9_9.addAll(var10_13);
                var4_6 = var10_13.size();
            } else {
                var4_6 = 0;
            }
            if (var2_2 != null && var4_6 < 100) {
                var9_9.add(var2_2);
            }
            var12_15 = var9_9;
            var7_8 = var12_15.size();
            var6_7 = 0;
            while (var6_7 < var7_8) {
                block13 : {
                    var9_9 = var12_15.get(var6_7);
                    ++var6_7;
                    if (!((var9_9 = (AbstractSafeParcelable)var9_9) instanceof zzex)) ** GOTO lbl31
                    try {
                        var1_1.zza((zzex)var9_9, var3_3);
                    }
                    catch (RemoteException var9_10) {
                        block12 : {
                            var10_13 = this.zzgi().zziv();
                            var11_14 = "Failed to send event to the service";
                            break block12;
lbl31: // 1 sources:
                            if (var9_9 instanceof zzka) {
                                try {
                                    var1_1.zza((zzka)var9_9, var3_3);
                                    continue;
                                }
                                catch (RemoteException var9_11) {
                                    var10_13 = this.zzgi().zziv();
                                    var11_14 = "Failed to send attribute to the service";
                                    break block12;
                                }
                            }
                            if (!(var9_9 instanceof zzef)) break block13;
                            try {
                                var1_1.zza((zzef)var9_9, var3_3);
                                continue;
                            }
                            catch (RemoteException var9_12) {
                                var10_13 = this.zzgi().zziv();
                                var11_14 = "Failed to send conditional property to the service";
                            }
                        }
                        var10_13.zzg(var11_14, var9_9);
                    }
                    continue;
                }
                this.zzgi().zziv().log("Discarding data. Unrecognized parcel type.");
            }
            ++var5_5;
        }
    }

    @WorkerThread
    public final void zza(AtomicReference<String> atomicReference) {
        this.zzab();
        this.zzch();
        this.zzf(new zzin(this, atomicReference, this.zzk(false)));
    }

    @WorkerThread
    protected final void zza(AtomicReference<List<zzef>> atomicReference, String string2, String string3, String string4) {
        this.zzab();
        this.zzch();
        this.zzf(new zziu(this, atomicReference, string2, string3, string4, this.zzk(false)));
    }

    @WorkerThread
    protected final void zza(AtomicReference<List<zzka>> atomicReference, String string2, String string3, String string4, boolean bl) {
        this.zzab();
        this.zzch();
        this.zzf(new zziv(this, atomicReference, string2, string3, string4, bl, this.zzk(false)));
    }

    @WorkerThread
    protected final void zza(AtomicReference<List<zzka>> atomicReference, boolean bl) {
        this.zzab();
        this.zzch();
        this.zzf(new zzix(this, atomicReference, this.zzk(false), bl));
    }

    @WorkerThread
    protected final void zzb(zzex zzex2, String string2) {
        Preconditions.checkNotNull(zzex2);
        this.zzab();
        this.zzch();
        boolean bl = this.zzkq();
        boolean bl2 = bl && this.zzgc().zza(zzex2);
        this.zzf(new zzis(this, bl, bl2, zzex2, this.zzk(true), string2));
    }

    @WorkerThread
    protected final void zzb(zzig zzig2) {
        this.zzab();
        this.zzch();
        this.zzf(new zzip(this, zzig2));
    }

    @WorkerThread
    protected final void zzb(zzka zzka2) {
        this.zzab();
        this.zzch();
        boolean bl = this.zzkq() && this.zzgc().zza(zzka2);
        this.zzf(new zziw(this, bl, zzka2, this.zzk(true)));
    }

    @WorkerThread
    protected final void zzd(zzef zzef2) {
        Preconditions.checkNotNull(zzef2);
        this.zzab();
        this.zzch();
        this.zzgl();
        boolean bl = this.zzgc().zzc(zzef2);
        this.zzf(new zzit(this, true, bl, new zzef(zzef2), this.zzk(true), zzef2));
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Lifted jumps to return sites
     */
    @WorkerThread
    final void zzdf() {
        block14 : {
            block16 : {
                block25 : {
                    block22 : {
                        block20 : {
                            block21 : {
                                block18 : {
                                    block23 : {
                                        block17 : {
                                            block24 : {
                                                block19 : {
                                                    block15 : {
                                                        this.zzab();
                                                        this.zzch();
                                                        if (this.isConnected()) {
                                                            return;
                                                        }
                                                        var6_1 = this.zzaqq;
                                                        var3_2 = 0;
                                                        if (var6_1 != null) break block14;
                                                        this.zzab();
                                                        this.zzch();
                                                        var6_1 = this.zzgj().zzjl();
                                                        if (var6_1 == null || !var6_1.booleanValue()) break block15;
                                                        var5_3 = true;
                                                        break block16;
                                                    }
                                                    this.zzgl();
                                                    if (this.zzfz().zzit() == 1) break block17;
                                                    this.zzgi().zzjc().log("Checking service availability");
                                                    var6_1 = this.zzgg();
                                                    var1_4 = GoogleApiAvailabilityLight.getInstance().isGooglePlayServicesAvailable(var6_1.getContext(), 12451000);
                                                    if (var1_4 == 9) break block18;
                                                    if (var1_4 == 18) break block19;
                                                    switch (var1_4) {
                                                        default: {
                                                            this.zzgi().zziy().zzg("Unexpected service status", var1_4);
                                                            break block20;
                                                        }
                                                        case 3: {
                                                            var6_1 = this.zzgi().zziy();
                                                            var7_7 = "Service disabled";
                                                            break block21;
                                                        }
                                                        case 2: {
                                                            this.zzgi().zzjb().log("Service container out of date");
                                                            if (this.zzgg().zzlp() < 12600) ** GOTO lbl39
                                                            var6_1 = this.zzgj().zzjl();
                                                            if (var6_1 != null && !var6_1.booleanValue()) break block20;
                                                            var4_13 = true;
                                                            break block22;
                                                        }
                                                        case 1: {
                                                            this.zzgi().zzjc().log("Service missing");
lbl39: // 2 sources:
                                                            var4_13 = false;
                                                            break block23;
                                                        }
                                                        case 0: 
                                                    }
                                                    var6_1 = this.zzgi().zzjc();
                                                    var7_8 = "Service available";
                                                    break block24;
                                                }
                                                var6_1 = this.zzgi().zziy();
                                                var7_9 = "Service updating";
                                            }
                                            var6_1.log((String)var7_5);
                                        }
                                        var4_13 = true;
                                    }
                                    var1_4 = 1;
                                    break block25;
                                }
                                var6_1 = this.zzgi().zziy();
                                var7_10 = "Service invalid";
                            }
                            var6_1.log((String)var7_6);
                        }
                        var4_13 = false;
                    }
                    var1_4 = 0;
                }
                var2_14 = var1_4;
                if (!var4_13) {
                    var2_14 = var1_4;
                    if (this.zzgk().zzhu()) {
                        this.zzgi().zziv().log("No way to upload. Consider using the full version of Analytics");
                        var2_14 = 0;
                    }
                }
                var5_3 = var4_13;
                if (var2_14 != 0) {
                    this.zzgj().zzf(var4_13);
                    var5_3 = var4_13;
                }
            }
            this.zzaqq = var5_3;
        }
        if (this.zzaqq.booleanValue()) {
            this.zzaqo.zzkt();
            return;
        }
        if (this.zzgk().zzhu() != false) return;
        this.zzgl();
        var6_1 = this.getContext().getPackageManager().queryIntentServices(new Intent().setClassName(this.getContext(), "com.google.android.gms.measurement.AppMeasurementService"), 65536);
        var1_4 = var3_2;
        if (var6_1 != null) {
            var1_4 = var3_2;
            if (var6_1.size() > 0) {
                var1_4 = 1;
            }
        }
        if (var1_4 != 0) {
            var6_1 = new Intent("com.google.android.gms.measurement.START");
            var7_12 = this.getContext();
            this.zzgl();
            var6_1.setComponent(new ComponentName(var7_12, "com.google.android.gms.measurement.AppMeasurementService"));
            this.zzaqo.zzc((Intent)var6_1);
            return;
        }
        this.zzgi().zziv().log("Unable to use remote or local measurement implementation. Please register the AppMeasurementService service in the app manifest");
    }

    @Override
    protected final boolean zzgn() {
        return false;
    }

    @WorkerThread
    protected final void zzkm() {
        this.zzab();
        this.zzch();
        this.zzf(new zzio(this, this.zzk(true)));
    }

    @WorkerThread
    protected final void zzkp() {
        this.zzab();
        this.zzch();
        this.zzf(new zzir(this, this.zzk(true)));
    }

    final Boolean zzkr() {
        return this.zzaqq;
    }
}

