/*
 * Decompiled with CFR 0_132.
 */
package com.google.android.gms.common.api;

import com.google.android.gms.common.api.BatchResult;
import com.google.android.gms.common.api.BatchResultToken;
import com.google.android.gms.common.api.GoogleApiClient;
import com.google.android.gms.common.api.PendingResult;
import com.google.android.gms.common.api.Result;
import com.google.android.gms.common.api.Status;
import com.google.android.gms.common.api.internal.BasePendingResult;
import com.google.android.gms.common.api.zza;
import java.util.ArrayList;
import java.util.List;

public final class Batch
extends BasePendingResult<BatchResult> {
    private final Object mLock = new Object();
    private int zzcd;
    private boolean zzce;
    private boolean zzcf;
    private final PendingResult<?>[] zzcg;

    private Batch(List<PendingResult<?>> list, GoogleApiClient object) {
        super((GoogleApiClient)object);
        this.zzcd = list.size();
        this.zzcg = new PendingResult[this.zzcd];
        if (list.isEmpty()) {
            this.setResult(new BatchResult(Status.RESULT_SUCCESS, this.zzcg));
            return;
        }
        for (int i = 0; i < list.size(); ++i) {
            this.zzcg[i] = object = list.get(i);
            object.addStatusListener(new zza(this));
        }
    }

    /* synthetic */ Batch(List list, GoogleApiClient googleApiClient, zza zza2) {
        this(list, googleApiClient);
    }

    static /* synthetic */ Object zza(Batch batch) {
        return batch.mLock;
    }

    static /* synthetic */ boolean zza(Batch batch, boolean bl) {
        batch.zzcf = true;
        return true;
    }

    static /* synthetic */ int zzb(Batch batch) {
        int n = batch.zzcd;
        batch.zzcd = n - 1;
        return n;
    }

    static /* synthetic */ boolean zzb(Batch batch, boolean bl) {
        batch.zzce = true;
        return true;
    }

    static /* synthetic */ int zzc(Batch batch) {
        return batch.zzcd;
    }

    static /* synthetic */ boolean zzd(Batch batch) {
        return batch.zzcf;
    }

    static /* synthetic */ void zze(Batch batch) {
        super.cancel();
    }

    static /* synthetic */ boolean zzf(Batch batch) {
        return batch.zzce;
    }

    static /* synthetic */ PendingResult[] zzg(Batch batch) {
        return batch.zzcg;
    }

    @Override
    public final void cancel() {
        super.cancel();
        PendingResult<?>[] arrpendingResult = this.zzcg;
        int n = arrpendingResult.length;
        for (int i = 0; i < n; ++i) {
            arrpendingResult[i].cancel();
        }
    }

    @Override
    public final BatchResult createFailedResult(Status status) {
        return new BatchResult(status, this.zzcg);
    }

    public static final class Builder {
        private List<PendingResult<?>> zzci = new ArrayList();
        private GoogleApiClient zzcj;

        public Builder(GoogleApiClient googleApiClient) {
            this.zzcj = googleApiClient;
        }

        public final <R extends Result> BatchResultToken<R> add(PendingResult<R> pendingResult) {
            BatchResultToken batchResultToken = new BatchResultToken(this.zzci.size());
            this.zzci.add(pendingResult);
            return batchResultToken;
        }

        public final Batch build() {
            return new Batch(this.zzci, this.zzcj, null);
        }
    }

}

