/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.content.Context
 *  android.content.Intent
 *  android.content.ServiceConnection
 *  android.content.pm.PackageInfo
 *  android.content.pm.PackageManager
 *  android.content.pm.PackageManager$NameNotFoundException
 *  android.os.IBinder
 *  android.os.RemoteException
 *  android.os.SystemClock
 *  android.util.Log
 *  javax.annotation.ParametersAreNonnullByDefault
 *  javax.annotation.concurrent.GuardedBy
 */
package com.google.android.gms.ads.identifier;

import android.content.Context;
import android.content.Intent;
import android.content.ServiceConnection;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.os.IBinder;
import android.os.RemoteException;
import android.os.SystemClock;
import android.support.annotation.Nullable;
import android.util.Log;
import com.google.android.gms.ads.identifier.zzb;
import com.google.android.gms.common.BlockingServiceConnection;
import com.google.android.gms.common.GoogleApiAvailabilityLight;
import com.google.android.gms.common.GooglePlayServicesNotAvailableException;
import com.google.android.gms.common.GooglePlayServicesRepairableException;
import com.google.android.gms.common.annotation.KeepForSdk;
import com.google.android.gms.common.annotation.KeepForSdkWithMembers;
import com.google.android.gms.common.internal.Preconditions;
import com.google.android.gms.common.stats.ConnectionTracker;
import com.google.android.gms.common.util.VisibleForTesting;
import com.google.android.gms.internal.ads_identifier.zze;
import com.google.android.gms.internal.ads_identifier.zzf;
import java.io.IOException;
import java.lang.ref.WeakReference;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.TimeUnit;
import javax.annotation.ParametersAreNonnullByDefault;
import javax.annotation.concurrent.GuardedBy;

@ParametersAreNonnullByDefault
@KeepForSdk
public class AdvertisingIdClient {
    @GuardedBy(value="this")
    private final Context mContext;
    @Nullable
    @GuardedBy(value="this")
    private BlockingServiceConnection zze;
    @Nullable
    @GuardedBy(value="this")
    private zze zzf;
    @GuardedBy(value="this")
    private boolean zzg;
    private final Object zzh = new Object();
    @Nullable
    @GuardedBy(value="mAutoDisconnectTaskLock")
    private zza zzi;
    private final boolean zzj;
    private final long zzk;

    @KeepForSdk
    public AdvertisingIdClient(Context context) {
        this(context, 30000L, false, false);
    }

    @VisibleForTesting
    private AdvertisingIdClient(Context context, long l, boolean bl, boolean bl2) {
        Preconditions.checkNotNull(context);
        Context context2 = context;
        if (bl && (context2 = context.getApplicationContext()) == null) {
            context2 = context;
        }
        this.mContext = context2;
        this.zzg = false;
        this.zzk = l;
        this.zzj = bl2;
    }

    /*
     * WARNING - Removed back jump from a try to a catch block - possible behaviour change.
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    @KeepForSdk
    public static Info getAdvertisingIdInfo(Context object) throws IOException, IllegalStateException, GooglePlayServicesNotAvailableException, GooglePlayServicesRepairableException {
        Throwable throwable2222;
        Object object2 = new zzb((Context)object);
        boolean bl = object2.getBoolean("gads:ad_id_app_context:enabled", false);
        float f = object2.getFloat("gads:ad_id_app_context:ping_ratio", 0.0f);
        String string2 = object2.getString("gads:ad_id_use_shared_preference:experiment_id", "");
        object = new AdvertisingIdClient((Context)object, -1L, bl, object2.getBoolean("gads:ad_id_use_persistent_service:enabled", false));
        long l = SystemClock.elapsedRealtime();
        AdvertisingIdClient.super.zza(false);
        object2 = object.getInfo();
        AdvertisingIdClient.super.zza((Info)object2, bl, f, SystemClock.elapsedRealtime() - l, string2, null);
        object.finish();
        return object2;
        {
            catch (Throwable throwable2222) {
            }
            catch (Throwable throwable3) {}
            {
                AdvertisingIdClient.super.zza(null, bl, f, -1L, string2, throwable3);
                throw throwable3;
            }
        }
        object.finish();
        throw throwable2222;
    }

    @KeepForSdk
    public static boolean getIsAdIdFakeForDebugLogging(Context object) throws IOException, GooglePlayServicesNotAvailableException, GooglePlayServicesRepairableException {
        zzb zzb2 = new zzb((Context)object);
        object = new AdvertisingIdClient((Context)object, -1L, zzb2.getBoolean("gads:ad_id_app_context:enabled", false), zzb2.getBoolean("com.google.android.gms.ads.identifier.service.PERSISTENT_START", false));
        try {
            AdvertisingIdClient.super.zza(false);
            boolean bl = AdvertisingIdClient.super.zzb();
            return bl;
        }
        finally {
            object.finish();
        }
    }

    @KeepForSdk
    public static void setShouldSkipGmsCoreVersionCheck(boolean bl) {
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    private static BlockingServiceConnection zza(Context context, boolean bl) throws IOException, GooglePlayServicesNotAvailableException, GooglePlayServicesRepairableException {
        try {
            context.getPackageManager().getPackageInfo("com.android.vending", 0);
        }
        catch (PackageManager.NameNotFoundException nameNotFoundException) {
            throw new GooglePlayServicesNotAvailableException(9);
        }
        int n = GoogleApiAvailabilityLight.getInstance().isGooglePlayServicesAvailable(context, 12451000);
        if (n != 0 && n != 2) {
            throw new IOException("Google Play services not available");
        }
        String string2 = bl ? "com.google.android.gms.ads.identifier.service.PERSISTENT_START" : "com.google.android.gms.ads.identifier.service.START";
        BlockingServiceConnection blockingServiceConnection = new BlockingServiceConnection();
        string2 = new Intent(string2);
        string2.setPackage("com.google.android.gms");
        try {
            bl = ConnectionTracker.getInstance().bindService(context, (Intent)string2, blockingServiceConnection, 1);
            if (!bl) throw new IOException("Connection failure");
            return blockingServiceConnection;
        }
        catch (Throwable throwable) {
            throw new IOException(throwable);
        }
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    @VisibleForTesting
    private static zze zza(Context object, BlockingServiceConnection blockingServiceConnection) throws IOException {
        try {
            void var1_4;
            return zzf.zza(var1_4.getServiceWithTimeout(10000L, TimeUnit.MILLISECONDS));
        }
        catch (Throwable throwable) {
            throw new IOException(throwable);
        }
        catch (InterruptedException interruptedException) {
            throw new IOException("Interrupted exception");
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    private final void zza() {
        Object object = this.zzh;
        synchronized (object) {
            if (this.zzi != null) {
                this.zzi.zzo.countDown();
                try {
                    this.zzi.join();
                }
                catch (InterruptedException interruptedException) {}
            }
            if (this.zzk > 0L) {
                this.zzi = new zza(this, this.zzk);
            }
            return;
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @VisibleForTesting
    private final void zza(boolean bl) throws IOException, IllegalStateException, GooglePlayServicesNotAvailableException, GooglePlayServicesRepairableException {
        Preconditions.checkNotMainThread("Calling this from your main thread can lead to deadlock");
        synchronized (this) {
            if (this.zzg) {
                this.finish();
            }
            this.zze = AdvertisingIdClient.zza(this.mContext, this.zzj);
            this.zzf = AdvertisingIdClient.zza(this.mContext, this.zze);
            this.zzg = true;
            if (bl) {
                this.zza();
            }
            return;
        }
    }

    @VisibleForTesting
    private final boolean zza(Info info, boolean bl, float f, long l, String string2, Throwable throwable) {
        if (Math.random() > (double)f) {
            return false;
        }
        HashMap<String, String> hashMap = new HashMap<String, String>();
        String string3 = bl ? "1" : "0";
        hashMap.put("app_context", string3);
        if (info != null) {
            string3 = info.isLimitAdTrackingEnabled() ? "1" : "0";
            hashMap.put("limit_ad_tracking", string3);
        }
        if (info != null && info.getId() != null) {
            hashMap.put("ad_id_size", Integer.toString(info.getId().length()));
        }
        if (throwable != null) {
            hashMap.put("error", throwable.getClass().getName());
        }
        if (string2 != null && !string2.isEmpty()) {
            hashMap.put("experiment_id", string2);
        }
        hashMap.put("tag", "AdvertisingIdClient");
        hashMap.put("time_spent", Long.toString(l));
        new com.google.android.gms.ads.identifier.zza(this, hashMap).start();
        return true;
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Converted monitor instructions to comments
     * Lifted jumps to return sites
     */
    private final boolean zzb() throws IOException {
        Preconditions.checkNotMainThread("Calling this from your main thread can lead to deadlock");
        // MONITORENTER : this
        if (!this.zzg) {
            var2_1 = this.zzh;
            // MONITORENTER : var2_1
            if (this.zzi == null) throw new IOException("AdvertisingIdClient is not connected.");
            if (!this.zzi.zzp) {
                throw new IOException("AdvertisingIdClient is not connected.");
            }
            // MONITOREXIT : var2_1
            try {
                this.zza(false);
                ** if (this.zzg) goto lbl-1000
            }
            catch (Exception var2_2) {
                throw new IOException("AdvertisingIdClient cannot reconnect.", var2_2);
            }
lbl-1000: // 1 sources:
            {
                throw new IOException("AdvertisingIdClient cannot reconnect.");
            }
lbl-1000: // 1 sources:
            {
            }
        }
        Preconditions.checkNotNull(this.zze);
        Preconditions.checkNotNull(this.zzf);
        try {
            var1_4 = this.zzf.zzc();
            // MONITOREXIT : this
        }
        catch (RemoteException var2_3) {
            Log.i((String)"AdvertisingIdClient", (String)"GMS remote exception ", (Throwable)var2_3);
            throw new IOException("Remote exception");
        }
        this.zza();
        return var1_4;
    }

    protected void finalize() throws Throwable {
        this.finish();
        super.finalize();
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public final void finish() {
        Preconditions.checkNotMainThread("Calling this from your main thread can lead to deadlock");
        synchronized (this) {
            BlockingServiceConnection blockingServiceConnection;
            if (this.mContext != null && (blockingServiceConnection = this.zze) != null) {
                try {
                    if (this.zzg) {
                        ConnectionTracker.getInstance().unbindService(this.mContext, this.zze);
                    }
                }
                catch (Throwable throwable) {
                    Log.i((String)"AdvertisingIdClient", (String)"AdvertisingIdClient unbindService failed.", (Throwable)throwable);
                }
                this.zzg = false;
                this.zzf = null;
                this.zze = null;
                return;
            }
            return;
        }
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Converted monitor instructions to comments
     * Lifted jumps to return sites
     */
    @KeepForSdk
    public Info getInfo() throws IOException {
        Preconditions.checkNotMainThread("Calling this from your main thread can lead to deadlock");
        // MONITORENTER : this
        if (!this.zzg) {
            var1_1 = this.zzh;
            // MONITORENTER : var1_1
            if (this.zzi == null) throw new IOException("AdvertisingIdClient is not connected.");
            if (!this.zzi.zzp) {
                throw new IOException("AdvertisingIdClient is not connected.");
            }
            // MONITOREXIT : var1_1
            try {
                this.zza(false);
                ** if (this.zzg) goto lbl-1000
            }
            catch (Exception var1_2) {
                throw new IOException("AdvertisingIdClient cannot reconnect.", var1_2);
            }
lbl-1000: // 1 sources:
            {
                throw new IOException("AdvertisingIdClient cannot reconnect.");
            }
lbl-1000: // 1 sources:
            {
            }
        }
        Preconditions.checkNotNull(this.zze);
        Preconditions.checkNotNull(this.zzf);
        try {
            var1_1 = new Info(this.zzf.getId(), this.zzf.zzb(true));
            // MONITOREXIT : this
        }
        catch (RemoteException var1_3) {
            Log.i((String)"AdvertisingIdClient", (String)"GMS remote exception ", (Throwable)var1_3);
            throw new IOException("Remote exception");
        }
        this.zza();
        return var1_1;
    }

    @KeepForSdk
    public void start() throws IOException, IllegalStateException, GooglePlayServicesNotAvailableException, GooglePlayServicesRepairableException {
        this.zza(true);
    }

    @KeepForSdkWithMembers
    public static final class Info {
        private final String zzq;
        private final boolean zzr;

        public Info(String string2, boolean bl) {
            this.zzq = string2;
            this.zzr = bl;
        }

        public final String getId() {
            return this.zzq;
        }

        public final boolean isLimitAdTrackingEnabled() {
            return this.zzr;
        }

        public final String toString() {
            String string2 = this.zzq;
            boolean bl = this.zzr;
            StringBuilder stringBuilder = new StringBuilder(String.valueOf(string2).length() + 7);
            stringBuilder.append("{");
            stringBuilder.append(string2);
            stringBuilder.append("}");
            stringBuilder.append(bl);
            return stringBuilder.toString();
        }
    }

    @VisibleForTesting
    static final class zza
    extends Thread {
        private WeakReference<AdvertisingIdClient> zzm;
        private long zzn;
        CountDownLatch zzo;
        boolean zzp;

        public zza(AdvertisingIdClient advertisingIdClient, long l) {
            this.zzm = new WeakReference<AdvertisingIdClient>(advertisingIdClient);
            this.zzn = l;
            this.zzo = new CountDownLatch(1);
            this.zzp = false;
            this.start();
        }

        private final void disconnect() {
            AdvertisingIdClient advertisingIdClient = this.zzm.get();
            if (advertisingIdClient != null) {
                advertisingIdClient.finish();
                this.zzp = true;
            }
        }

        /*
         * Enabled aggressive block sorting
         * Enabled unnecessary exception pruning
         * Enabled aggressive exception aggregation
         */
        @Override
        public final void run() {
            try {
                if (!this.zzo.await(this.zzn, TimeUnit.MILLISECONDS)) {
                    this.disconnect();
                }
                return;
            }
            catch (InterruptedException interruptedException) {}
            this.disconnect();
        }
    }

}

