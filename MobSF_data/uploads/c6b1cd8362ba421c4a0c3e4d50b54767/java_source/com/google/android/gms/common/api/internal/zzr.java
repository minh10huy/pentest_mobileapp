/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.app.PendingIntent
 *  android.content.Context
 *  android.content.Intent
 *  android.os.Bundle
 *  android.os.Handler
 *  android.os.Looper
 *  android.util.Log
 *  javax.annotation.concurrent.GuardedBy
 */
package com.google.android.gms.common.api.internal;

import android.app.PendingIntent;
import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.os.Handler;
import android.os.Looper;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.v4.util.ArrayMap;
import android.util.Log;
import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.GoogleApiAvailabilityLight;
import com.google.android.gms.common.api.Api;
import com.google.android.gms.common.api.Result;
import com.google.android.gms.common.api.Status;
import com.google.android.gms.common.api.internal.BaseImplementation;
import com.google.android.gms.common.api.internal.SignInConnectionListener;
import com.google.android.gms.common.api.internal.zzav;
import com.google.android.gms.common.api.internal.zzbd;
import com.google.android.gms.common.api.internal.zzbp;
import com.google.android.gms.common.api.internal.zzbq;
import com.google.android.gms.common.api.internal.zzp;
import com.google.android.gms.common.api.internal.zzs;
import com.google.android.gms.common.api.internal.zzt;
import com.google.android.gms.common.api.internal.zzu;
import com.google.android.gms.common.internal.ClientSettings;
import com.google.android.gms.common.internal.Preconditions;
import com.google.android.gms.signin.SignInClient;
import com.google.android.gms.signin.SignInOptions;
import java.io.FileDescriptor;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import java.util.WeakHashMap;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.locks.Lock;
import javax.annotation.concurrent.GuardedBy;

final class zzr
implements zzbp {
    private final Context mContext;
    private final Looper zzcn;
    private final zzav zzfq;
    private final zzbd zzfr;
    private final zzbd zzfs;
    private final Map<Api.AnyClientKey<?>, zzbd> zzft;
    private final Set<SignInConnectionListener> zzfu = Collections.newSetFromMap(new WeakHashMap());
    private final Api.Client zzfv;
    private Bundle zzfw;
    private ConnectionResult zzfx = null;
    private ConnectionResult zzfy = null;
    private boolean zzfz = false;
    private final Lock zzga;
    @GuardedBy(value="mLock")
    private int zzgb = 0;

    private zzr(Context object, zzav iterator, Lock lock, Looper looper, GoogleApiAvailabilityLight googleApiAvailabilityLight, Map<Api.AnyClientKey<?>, Api.Client> map, Map<Api.AnyClientKey<?>, Api.Client> map2, ClientSettings clientSettings, Api.AbstractClientBuilder<? extends SignInClient, SignInOptions> abstractClientBuilder, Api.Client client, ArrayList<zzp> arrayList, ArrayList<zzp> arrayList2, Map<Api<?>, Boolean> map3, Map<Api<?>, Boolean> map4) {
        this.mContext = object;
        this.zzfq = iterator;
        this.zzga = lock;
        this.zzcn = looper;
        this.zzfv = client;
        this.zzfr = new zzbd((Context)object, this.zzfq, lock, looper, googleApiAvailabilityLight, map2, null, map4, null, arrayList2, new zzt(this, null));
        this.zzfs = new zzbd((Context)object, this.zzfq, lock, looper, googleApiAvailabilityLight, map, clientSettings, map3, abstractClientBuilder, arrayList, new zzu(this, null));
        object = new ArrayMap();
        iterator = map2.keySet().iterator();
        while (iterator.hasNext()) {
            object.put((Api.AnyClientKey)iterator.next(), this.zzfr);
        }
        iterator = map.keySet().iterator();
        while (iterator.hasNext()) {
            object.put(iterator.next(), this.zzfs);
        }
        this.zzft = Collections.unmodifiableMap(object);
    }

    static /* synthetic */ ConnectionResult zza(zzr zzr2, ConnectionResult connectionResult) {
        zzr2.zzfx = connectionResult;
        return connectionResult;
    }

    public static zzr zza(Context context, zzav zzav2, Lock lock, Looper looper, GoogleApiAvailabilityLight googleApiAvailabilityLight, Map<Api.AnyClientKey<?>, Api.Client> object, ClientSettings clientSettings, Map<Api<?>, Boolean> object2, Api.AbstractClientBuilder<? extends SignInClient, SignInOptions> abstractClientBuilder, ArrayList<zzp> arrayList) {
        Object object4;
        Object object3;
        ArrayMap arrayMap = new ArrayMap();
        ArrayMap arrayMap2 = new ArrayMap();
        Object object5 = object.entrySet().iterator();
        object = null;
        while (object5.hasNext()) {
            object4 = object5.next();
            object3 = (Api.Client)object4.getValue();
            if (object3.providesSignIn()) {
                object = object3;
            }
            if (object3.requiresSignIn()) {
                arrayMap.put((Api.AnyClientKey)object4.getKey(), (Api.Client)object3);
                continue;
            }
            arrayMap2.put((Api.AnyClientKey)object4.getKey(), (Api.Client)object3);
        }
        Preconditions.checkState(arrayMap.isEmpty() ^ true, "CompositeGoogleApiClient should not be used without any APIs that require sign-in.");
        object3 = new ArrayMap();
        object5 = new ArrayMap();
        for (Api object6 : object2.keySet()) {
            Api.AnyClientKey<?> anyClientKey = object6.getClientKey();
            if (arrayMap.containsKey(anyClientKey)) {
                object3.put(object6, (Boolean)object2.get(object6));
                continue;
            }
            if (arrayMap2.containsKey(anyClientKey)) {
                object5.put(object6, (Boolean)object2.get(object6));
                continue;
            }
            throw new IllegalStateException("Each API in the isOptionalMap must have a corresponding client in the clients map.");
        }
        object2 = new ArrayList<zzp>();
        object4 = new ArrayList<zzp>();
        int n = arrayList.size();
        for (int i = 0; i < n; ++i) {
            zzp zzp2 = arrayList.get(i);
            zzp zzp3 = zzp2;
            if (object3.containsKey(zzp3.mApi)) {
                object2.add(zzp3);
                continue;
            }
            if (object5.containsKey(zzp3.mApi)) {
                object4.add((zzp)zzp3);
                continue;
            }
            throw new IllegalStateException("Each ClientCallbacks must have a corresponding API in the isOptionalMap");
        }
        return new zzr(context, zzav2, lock, looper, googleApiAvailabilityLight, arrayMap, arrayMap2, clientSettings, abstractClientBuilder, (Api.Client)object, object2, (ArrayList<zzp>)object4, (Map<Api<?>, Boolean>)object3, (Map<Api<?>, Boolean>)object5);
    }

    static /* synthetic */ Lock zza(zzr zzr2) {
        return zzr2.zzga;
    }

    @GuardedBy(value="mLock")
    private final void zza(int n, boolean bl) {
        this.zzfq.zzb(n, bl);
        this.zzfy = null;
        this.zzfx = null;
    }

    private final void zza(Bundle bundle) {
        if (this.zzfw == null) {
            this.zzfw = bundle;
            return;
        }
        if (bundle != null) {
            this.zzfw.putAll(bundle);
        }
    }

    @GuardedBy(value="mLock")
    private final void zza(ConnectionResult connectionResult) {
        switch (this.zzgb) {
            default: {
                Log.wtf((String)"CompositeGAC", (String)"Attempted to call failure callbacks in CONNECTION_MODE_NONE. Callbacks should be disabled via GmsClientSupervisor", (Throwable)new Exception());
                break;
            }
            case 2: {
                this.zzfq.zzc(connectionResult);
            }
            case 1: {
                this.zzab();
            }
        }
        this.zzgb = 0;
    }

    static /* synthetic */ void zza(zzr zzr2, int n, boolean bl) {
        zzr2.zza(n, bl);
    }

    static /* synthetic */ void zza(zzr zzr2, Bundle bundle) {
        zzr2.zza(bundle);
    }

    private final boolean zza(BaseImplementation.ApiMethodImpl<? extends Result, ? extends Api.AnyClient> object) {
        object = object.getClientKey();
        Preconditions.checkArgument(this.zzft.containsKey(object), "GoogleApiClient is not configured to use the API required for this call.");
        return this.zzft.get(object).equals(this.zzfs);
    }

    static /* synthetic */ boolean zza(zzr zzr2, boolean bl) {
        zzr2.zzfz = bl;
        return bl;
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    @GuardedBy(value="mLock")
    private final void zzaa() {
        if (zzr.zzb(this.zzfx)) {
            if (!zzr.zzb(this.zzfy) && !this.zzac()) {
                if (this.zzfy == null) return;
                if (this.zzgb == 1) {
                    this.zzab();
                    return;
                }
                this.zza(this.zzfy);
                this.zzfr.disconnect();
                return;
            }
            switch (this.zzgb) {
                default: {
                    Log.wtf((String)"CompositeGAC", (String)"Attempted to call success callbacks in CONNECTION_MODE_NONE. Callbacks should be disabled via GmsClientSupervisor", (Throwable)((Object)new AssertionError()));
                    break;
                }
                case 2: {
                    this.zzfq.zzb(this.zzfw);
                }
                case 1: {
                    this.zzab();
                }
            }
            this.zzgb = 0;
            return;
        }
        if (this.zzfx != null && zzr.zzb(this.zzfy)) {
            this.zzfs.disconnect();
            this.zza(this.zzfx);
            return;
        }
        if (this.zzfx == null || this.zzfy == null) return;
        ConnectionResult connectionResult = this.zzfx;
        if (this.zzfs.zzje < this.zzfr.zzje) {
            connectionResult = this.zzfy;
        }
        this.zza(connectionResult);
    }

    @GuardedBy(value="mLock")
    private final void zzab() {
        Iterator<SignInConnectionListener> iterator = this.zzfu.iterator();
        while (iterator.hasNext()) {
            iterator.next().onComplete();
        }
        this.zzfu.clear();
    }

    @GuardedBy(value="mLock")
    private final boolean zzac() {
        if (this.zzfy != null && this.zzfy.getErrorCode() == 4) {
            return true;
        }
        return false;
    }

    @Nullable
    private final PendingIntent zzad() {
        if (this.zzfv == null) {
            return null;
        }
        return PendingIntent.getActivity((Context)this.mContext, (int)System.identityHashCode(this.zzfq), (Intent)this.zzfv.getSignInIntent(), (int)134217728);
    }

    static /* synthetic */ ConnectionResult zzb(zzr zzr2, ConnectionResult connectionResult) {
        zzr2.zzfy = connectionResult;
        return connectionResult;
    }

    static /* synthetic */ void zzb(zzr zzr2) {
        zzr2.zzaa();
    }

    private static boolean zzb(ConnectionResult connectionResult) {
        if (connectionResult != null && connectionResult.isSuccess()) {
            return true;
        }
        return false;
    }

    static /* synthetic */ boolean zzc(zzr zzr2) {
        return zzr2.zzfz;
    }

    static /* synthetic */ ConnectionResult zzd(zzr zzr2) {
        return zzr2.zzfy;
    }

    static /* synthetic */ zzbd zze(zzr zzr2) {
        return zzr2.zzfs;
    }

    static /* synthetic */ zzbd zzf(zzr zzr2) {
        return zzr2.zzfr;
    }

    @GuardedBy(value="mLock")
    @Override
    public final ConnectionResult blockingConnect() {
        throw new UnsupportedOperationException();
    }

    @GuardedBy(value="mLock")
    @Override
    public final ConnectionResult blockingConnect(long l, @NonNull TimeUnit timeUnit) {
        throw new UnsupportedOperationException();
    }

    @GuardedBy(value="mLock")
    @Override
    public final void connect() {
        this.zzgb = 2;
        this.zzfz = false;
        this.zzfy = null;
        this.zzfx = null;
        this.zzfr.connect();
        this.zzfs.connect();
    }

    @GuardedBy(value="mLock")
    @Override
    public final void disconnect() {
        this.zzfy = null;
        this.zzfx = null;
        this.zzgb = 0;
        this.zzfr.disconnect();
        this.zzfs.disconnect();
        this.zzab();
    }

    @Override
    public final void dump(String string2, FileDescriptor fileDescriptor, PrintWriter printWriter, String[] arrstring) {
        printWriter.append(string2).append("authClient").println(":");
        this.zzfs.dump(String.valueOf(string2).concat("  "), fileDescriptor, printWriter, arrstring);
        printWriter.append(string2).append("anonClient").println(":");
        this.zzfr.dump(String.valueOf(string2).concat("  "), fileDescriptor, printWriter, arrstring);
    }

    @GuardedBy(value="mLock")
    @Override
    public final <A extends Api.AnyClient, R extends Result, T extends BaseImplementation.ApiMethodImpl<R, A>> T enqueue(@NonNull T t) {
        if (this.zza((BaseImplementation.ApiMethodImpl<? extends Result, ? extends Api.AnyClient>)t)) {
            if (this.zzac()) {
                t.setFailedResult(new Status(4, null, this.zzad()));
                return t;
            }
            return this.zzfs.enqueue(t);
        }
        return this.zzfr.enqueue(t);
    }

    @GuardedBy(value="mLock")
    @Override
    public final <A extends Api.AnyClient, T extends BaseImplementation.ApiMethodImpl<? extends Result, A>> T execute(@NonNull T t) {
        if (this.zza((BaseImplementation.ApiMethodImpl<? extends Result, ? extends Api.AnyClient>)t)) {
            if (this.zzac()) {
                t.setFailedResult(new Status(4, null, this.zzad()));
                return t;
            }
            return this.zzfs.execute(t);
        }
        return this.zzfr.execute(t);
    }

    @Nullable
    @GuardedBy(value="mLock")
    @Override
    public final ConnectionResult getConnectionResult(@NonNull Api<?> api) {
        if (this.zzft.get(api.getClientKey()).equals(this.zzfs)) {
            if (this.zzac()) {
                return new ConnectionResult(4, this.zzad());
            }
            return this.zzfs.getConnectionResult(api);
        }
        return this.zzfr.getConnectionResult(api);
    }

    @Override
    public final boolean isConnected() {
        boolean bl;
        block5 : {
            block4 : {
                boolean bl2;
                this.zzga.lock();
                try {
                    bl = this.zzfr.isConnected();
                    bl2 = true;
                    if (!bl) break block4;
                    bl = bl2;
                }
                catch (Throwable throwable) {
                    this.zzga.unlock();
                    throw throwable;
                }
                if (this.zzfs.isConnected()) break block5;
                bl = bl2;
                if (this.zzac()) break block5;
                int n = this.zzgb;
                if (n != 1) break block4;
                bl = bl2;
                break block5;
            }
            bl = false;
        }
        this.zzga.unlock();
        return bl;
    }

    @Override
    public final boolean isConnecting() {
        this.zzga.lock();
        try {
            int n = this.zzgb;
            boolean bl = n == 2;
            this.zzga.unlock();
            return bl;
        }
        catch (Throwable throwable) {
            this.zzga.unlock();
            throw throwable;
        }
    }

    @Override
    public final boolean maybeSignIn(SignInConnectionListener signInConnectionListener) {
        this.zzga.lock();
        try {
            if ((this.isConnecting() || this.isConnected()) && !this.zzfs.isConnected()) {
                this.zzfu.add(signInConnectionListener);
                if (this.zzgb == 0) {
                    this.zzgb = 1;
                }
                this.zzfy = null;
                this.zzfs.connect();
                return true;
            }
            return false;
        }
        finally {
            this.zzga.unlock();
        }
    }

    @Override
    public final void maybeSignOut() {
        this.zzga.lock();
        try {
            boolean bl = this.isConnecting();
            this.zzfs.disconnect();
            this.zzfy = new ConnectionResult(4);
            if (bl) {
                new Handler(this.zzcn).post((Runnable)new zzs(this));
            } else {
                this.zzab();
            }
            return;
        }
        finally {
            this.zzga.unlock();
        }
    }

    @GuardedBy(value="mLock")
    @Override
    public final void zzz() {
        this.zzfr.zzz();
        this.zzfs.zzz();
    }
}

