/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.util.Log
 */
package com.google.android.gms.common.server.response;

import android.util.Log;
import com.google.android.gms.common.server.response.FastJsonResponse;
import com.google.android.gms.common.server.response.PostProcessor;
import com.google.android.gms.common.server.response.zzb;
import com.google.android.gms.common.server.response.zzc;
import com.google.android.gms.common.server.response.zzd;
import com.google.android.gms.common.server.response.zze;
import com.google.android.gms.common.server.response.zzf;
import com.google.android.gms.common.server.response.zzg;
import com.google.android.gms.common.server.response.zzh;
import com.google.android.gms.common.util.Base64Utils;
import com.google.android.gms.common.util.JsonUtils;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.Closeable;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.Reader;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import java.util.Stack;

public class FastParser<T extends FastJsonResponse> {
    private static final char[] zzwv = new char[]{'u', 'l', 'l'};
    private static final char[] zzww = new char[]{'r', 'u', 'e'};
    private static final char[] zzwx = new char[]{'r', 'u', 'e', '\"'};
    private static final char[] zzwy = new char[]{'a', 'l', 's', 'e'};
    private static final char[] zzwz = new char[]{'a', 'l', 's', 'e', '\"'};
    private static final char[] zzxa = new char[]{'\n'};
    private static final zza<Integer> zzxc = new com.google.android.gms.common.server.response.zza();
    private static final zza<Long> zzxd = new zzb();
    private static final zza<Float> zzxe = new zzc();
    private static final zza<Double> zzxf = new zzd();
    private static final zza<Boolean> zzxg = new zze();
    private static final zza<String> zzxh = new zzf();
    private static final zza<BigInteger> zzxi = new zzg();
    private static final zza<BigDecimal> zzxj = new zzh();
    private final char[] zzwq = new char[1];
    private final char[] zzwr = new char[32];
    private final char[] zzws = new char[1024];
    private final StringBuilder zzwt = new StringBuilder(32);
    private final StringBuilder zzwu = new StringBuilder(1024);
    private final Stack<Integer> zzxb = new Stack();

    static /* synthetic */ int zza(FastParser fastParser, BufferedReader bufferedReader) throws ParseException, IOException {
        return fastParser.zzd(bufferedReader);
    }

    private final int zza(BufferedReader bufferedReader, char[] arrc) throws ParseException, IOException {
        int n;
        block11 : {
            char c = this.zzj(bufferedReader);
            if (c == '\u0000') {
                throw new ParseException("Unexpected EOF");
            }
            if (c == ',') {
                throw new ParseException("Missing value");
            }
            if (c == 'n') {
                this.zzb(bufferedReader, zzwv);
                return 0;
            }
            bufferedReader.mark(1024);
            if (c == '\"') {
                int n2 = 0;
                boolean bl = false;
                do {
                    n = n2;
                    if (n2 < arrc.length) {
                        n = n2;
                        if (bufferedReader.read(arrc, n2, 1) != -1) {
                            c = arrc[n2];
                            if (Character.isISOControl(c)) {
                                throw new ParseException("Unexpected control character while reading string");
                            }
                            if (c == '\"' && !bl) {
                                bufferedReader.reset();
                                bufferedReader.skip(n2 + 1);
                                return n2;
                            }
                            bl = c == '\\' ? (bl ^= true) : false;
                            ++n2;
                            continue;
                        }
                    }
                    break block11;
                    break;
                } while (true);
            }
            arrc[0] = c;
            int n3 = 1;
            do {
                n = n3;
                if (n3 >= arrc.length) break block11;
                n = n3;
                if (bufferedReader.read(arrc, n3, 1) == -1) break block11;
                if (arrc[n3] == '}' || arrc[n3] == ',' || Character.isWhitespace(arrc[n3]) || arrc[n3] == ']') break;
                ++n3;
            } while (true);
            bufferedReader.reset();
            bufferedReader.skip(n3 - 1);
            arrc[n3] = '\u0000';
            return n3;
        }
        if (n == arrc.length) {
            throw new ParseException("Absurdly long value");
        }
        throw new ParseException("Unexpected EOF");
    }

    private final String zza(BufferedReader object) throws ParseException, IOException {
        this.zzxb.push(2);
        char c = this.zzj((BufferedReader)object);
        if (c != '\"') {
            if (c != ']') {
                if (c != '}') {
                    object = new StringBuilder(19);
                    object.append("Unexpected token: ");
                    object.append(c);
                    throw new ParseException(object.toString());
                }
                this.zzk(2);
                return null;
            }
            this.zzk(2);
            this.zzk(1);
            this.zzk(5);
            return null;
        }
        this.zzxb.push(3);
        String string2 = FastParser.zzb((BufferedReader)object, this.zzwr, this.zzwt, null);
        this.zzk(3);
        if (this.zzj((BufferedReader)object) != ':') {
            throw new ParseException("Expected key/value separator");
        }
        return string2;
    }

    private final String zza(BufferedReader bufferedReader, char[] arrc, StringBuilder stringBuilder, char[] arrc2) throws ParseException, IOException {
        char c = this.zzj(bufferedReader);
        if (c != '\"') {
            if (c != 'n') {
                throw new ParseException("Expected string");
            }
            this.zzb(bufferedReader, zzwv);
            return null;
        }
        return FastParser.zzb(bufferedReader, arrc, stringBuilder, arrc2);
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    private final <T extends FastJsonResponse> ArrayList<T> zza(BufferedReader object, FastJsonResponse.Field<?, ?> field) throws ParseException, IOException {
        ArrayList<Stack<Integer>> arrayList = new ArrayList<Stack<Integer>>();
        char c = this.zzj((BufferedReader)object);
        if (c == ']') {
            this.zzk(5);
            return arrayList;
        }
        if (c == 'n') {
            this.zzb((BufferedReader)object, zzwv);
            this.zzk(5);
            return null;
        }
        if (c != '{') {
            object = new StringBuilder(19);
            object.append("Unexpected token: ");
            object.append(c);
            throw new ParseException(object.toString());
        }
        Stack<Integer> stack = this.zzxb;
        do {
            stack.push(1);
            try {
                stack = field.newConcreteTypeInstance();
                if (!this.zza((BufferedReader)object, (FastJsonResponse)((Object)stack))) {
                    return arrayList;
                }
                arrayList.add(stack);
                c = this.zzj((BufferedReader)object);
                if (c != ',') {
                    if (c != ']') {
                        object = new StringBuilder(19);
                        object.append("Unexpected token: ");
                        object.append(c);
                        throw new ParseException(object.toString());
                    }
                    this.zzk(5);
                    return arrayList;
                }
                if (this.zzj((BufferedReader)object) != '{') {
                    throw new ParseException("Expected start of next object in array");
                }
                stack = this.zzxb;
                continue;
            }
            catch (IllegalAccessException illegalAccessException) {
                throw new ParseException("Error instantiating inner object", illegalAccessException);
            }
            catch (InstantiationException instantiationException) {}
            throw new ParseException("Error instantiating inner object", instantiationException);
            {
                continue;
            }
            break;
        } while (true);
    }

    private final <O> ArrayList<O> zza(BufferedReader bufferedReader, zza<O> zza2) throws ParseException, IOException {
        block3 : {
            char c = this.zzj(bufferedReader);
            if (c == 'n') {
                this.zzb(bufferedReader, zzwv);
                return null;
            }
            if (c != '[') {
                throw new ParseException("Expected start of array");
            }
            this.zzxb.push(5);
            ArrayList<O> arrayList = new ArrayList<O>();
            do {
                bufferedReader.mark(1024);
                c = this.zzj(bufferedReader);
                if (c == '\u0000') break block3;
                if (c == ',') continue;
                if (c == ']') break;
                bufferedReader.reset();
                arrayList.add(zza2.zzh(this, bufferedReader));
            } while (true);
            this.zzk(5);
            return arrayList;
        }
        throw new ParseException("Unexpected EOF");
    }

    static /* synthetic */ boolean zza(FastParser fastParser, BufferedReader bufferedReader, boolean bl) throws ParseException, IOException {
        return fastParser.zza(bufferedReader, false);
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    private final boolean zza(BufferedReader var1_1, FastJsonResponse var2_4) throws ParseException, IOException {
        var6_5 = var2_4.getFieldMappings();
        var5_6 = this.zza((BufferedReader)var1_1);
        if (var5_6 == null) {
            this.zzk(1);
            return false;
        }
        while (var5_6 != null) {
            block52 : {
                var7_9 = var6_5.get(var5_6);
                if (var7_9 == null) {
                    var5_6 = this.zzb((BufferedReader)var1_1);
                    continue;
                }
                this.zzxb.push(4);
                switch (var7_9.getTypeIn()) {
                    default: {
                        var4_8 = var7_9.getTypeIn();
                        var1_1 = new StringBuilder(30);
                        var1_1.append("Invalid field type ");
                        var1_1.append(var4_8);
                        throw new ParseException(var1_1.toString());
                    }
                    case 11: {
                        if (!var7_9.isTypeInArray()) ** GOTO lbl31
                        var4_8 = this.zzj((BufferedReader)var1_1);
                        if (var4_8 == 110) {
                            this.zzb((BufferedReader)var1_1, FastParser.zzwv);
                            var2_4.addConcreteTypeArrayInternal(var7_9, var7_9.getOutputFieldName(), null);
                        } else {
                            this.zzxb.push(5);
                            if (var4_8 != 91) {
                                throw new ParseException("Expected array start");
                            }
                            var2_4.addConcreteTypeArrayInternal(var7_9, var7_9.getOutputFieldName(), this.zza((BufferedReader)var1_1, var7_9));
                        }
                        break block52;
lbl31: // 1 sources:
                        var4_8 = this.zzj((BufferedReader)var1_1);
                        if (var4_8 != 110) ** GOTO lbl36
                        this.zzb((BufferedReader)var1_1, FastParser.zzwv);
                        var2_4.addConcreteTypeInternal(var7_9, var7_9.getOutputFieldName(), null);
                        break block52;
lbl36: // 1 sources:
                        this.zzxb.push(1);
                        if (var4_8 != 123) {
                            throw new ParseException("Expected start of object");
                        }
                        try {
                            var5_6 = var7_9.newConcreteTypeInstance();
                            this.zza((BufferedReader)var1_1, (FastJsonResponse)var5_6);
                            var2_4.addConcreteTypeInternal(var7_9, var7_9.getOutputFieldName(), var5_6);
                            break block52;
                        }
                        catch (IllegalAccessException var1_2) {
                            throw new ParseException("Error instantiating inner object", var1_2);
                        }
                        catch (InstantiationException var1_3) {
                            throw new ParseException("Error instantiating inner object", var1_3);
                        }
                    }
                    case 10: {
                        var4_8 = this.zzj((BufferedReader)var1_1);
                        if (var4_8 != 110) ** GOTO lbl54
                        this.zzb((BufferedReader)var1_1, FastParser.zzwv);
                        var5_6 = null;
                        ** GOTO lbl90
lbl54: // 1 sources:
                        if (var4_8 != 123) {
                            throw new ParseException("Expected start of a map object");
                        }
                        this.zzxb.push(1);
                        var5_6 = new HashMap<K, V>();
                        while ((var4_8 = (int)this.zzj((BufferedReader)var1_1)) != 0) {
                            if (var4_8 == 34) ** GOTO lbl63
                            if (var4_8 != 125) {
                                continue;
                            }
                            ** GOTO lbl89
lbl63: // 1 sources:
                            var8_10 = FastParser.zzb((BufferedReader)var1_1, this.zzwr, this.zzwt, null);
                            if (this.zzj((BufferedReader)var1_1) != ':') {
                                var1_1 = String.valueOf(var8_10);
                                if (var1_1.length() != 0) {
                                    var1_1 = "No map value found for key ".concat((String)var1_1);
                                    throw new ParseException((String)var1_1);
                                }
                                var1_1 = new String("No map value found for key ");
                                throw new ParseException((String)var1_1);
                            }
                            if (this.zzj((BufferedReader)var1_1) != '\"') {
                                var1_1 = String.valueOf(var8_10);
                                if (var1_1.length() != 0) {
                                    var1_1 = "Expected String value for key ".concat((String)var1_1);
                                    throw new ParseException((String)var1_1);
                                }
                                var1_1 = new String("Expected String value for key ");
                                throw new ParseException((String)var1_1);
                            }
                            var5_6.put(var8_10, FastParser.zzb((BufferedReader)var1_1, this.zzwr, this.zzwt, null));
                            var3_7 = this.zzj((BufferedReader)var1_1);
                            if (var3_7 == ',') {
                                continue;
                            }
                            ** GOTO lbl84
                        }
                        throw new ParseException("Unexpected EOF");
lbl84: // 1 sources:
                        if (var3_7 != '}') {
                            var1_1 = new StringBuilder(48);
                            var1_1.append("Unexpected character while parsing string map: ");
                            var1_1.append(var3_7);
                            throw new ParseException(var1_1.toString());
                        }
lbl89: // 3 sources:
                        this.zzk(1);
lbl90: // 2 sources:
                        var2_4.setStringMap(var7_9, (Map<String, String>)var5_6);
                        break block52;
                    }
                    case 9: {
                        var5_6 = Base64Utils.decodeUrlSafe(this.zza((BufferedReader)var1_1, this.zzws, this.zzwu, FastParser.zzxa));
                        ** GOTO lbl97
                    }
                    case 8: {
                        var5_6 = Base64Utils.decode(this.zza((BufferedReader)var1_1, this.zzws, this.zzwu, FastParser.zzxa));
lbl97: // 2 sources:
                        var2_4.setDecodedBytes(var7_9, (byte[])var5_6);
                        break block52;
                    }
                    case 7: {
                        if (var7_9.isTypeInArray()) {
                            var2_4.setStrings(var7_9, this.zza((BufferedReader)var1_1, FastParser.zzxh));
                        } else {
                            var2_4.setString(var7_9, this.zzc((BufferedReader)var1_1));
                        }
                        break block52;
                    }
                    case 6: {
                        if (var7_9.isTypeInArray()) {
                            var2_4.setBooleans(var7_9, this.zza((BufferedReader)var1_1, FastParser.zzxg));
                        } else {
                            var2_4.setBoolean(var7_9, this.zza((BufferedReader)var1_1, false));
                        }
                        break block52;
                    }
                    case 5: {
                        if (var7_9.isTypeInArray()) {
                            var2_4.setBigDecimals(var7_9, this.zza((BufferedReader)var1_1, FastParser.zzxj));
                        } else {
                            var2_4.setBigDecimal(var7_9, this.zzi((BufferedReader)var1_1));
                        }
                        break block52;
                    }
                    case 4: {
                        if (var7_9.isTypeInArray()) {
                            var2_4.setDoubles(var7_9, this.zza((BufferedReader)var1_1, FastParser.zzxf));
                        } else {
                            var2_4.setDouble(var7_9, this.zzh((BufferedReader)var1_1));
                        }
                        break block52;
                    }
                    case 3: {
                        if (var7_9.isTypeInArray()) {
                            var2_4.setFloats(var7_9, this.zza((BufferedReader)var1_1, FastParser.zzxe));
                        } else {
                            var2_4.setFloat(var7_9, this.zzg((BufferedReader)var1_1));
                        }
                        break block52;
                    }
                    case 2: {
                        if (var7_9.isTypeInArray()) {
                            var2_4.setLongs(var7_9, this.zza((BufferedReader)var1_1, FastParser.zzxd));
                        } else {
                            var2_4.setLong(var7_9, this.zze((BufferedReader)var1_1));
                        }
                        break block52;
                    }
                    case 1: {
                        if (var7_9.isTypeInArray()) {
                            var2_4.setBigIntegers(var7_9, this.zza((BufferedReader)var1_1, FastParser.zzxi));
                        } else {
                            var2_4.setBigInteger(var7_9, this.zzf((BufferedReader)var1_1));
                        }
                        break block52;
                    }
                    case 0: 
                }
                if (var7_9.isTypeInArray()) {
                    var2_4.setIntegers(var7_9, this.zza((BufferedReader)var1_1, FastParser.zzxc));
                } else {
                    var2_4.setInteger(var7_9, this.zzd((BufferedReader)var1_1));
                }
            }
            this.zzk(4);
            this.zzk(2);
            var3_7 = this.zzj((BufferedReader)var1_1);
            if (var3_7 != ',') {
                if (var3_7 != '}') {
                    var1_1 = new StringBuilder(55);
                    var1_1.append("Expected end of object or field separator, but found: ");
                    var1_1.append(var3_7);
                    throw new ParseException(var1_1.toString());
                }
                var5_6 = null;
                continue;
            }
            var5_6 = this.zza((BufferedReader)var1_1);
        }
        var1_1 = var2_4.getPostProcessor();
        if (var1_1 != null) {
            var1_1.postProcess(var2_4);
        }
        this.zzk(1);
        return true;
    }

    private final boolean zza(BufferedReader object, boolean bl) throws ParseException, IOException {
        do {
            char c;
            if ((c = this.zzj((BufferedReader)object)) != '\"') {
                if (c != 'f') {
                    if (c != 'n') {
                        if (c != 't') {
                            object = new StringBuilder(19);
                            object.append("Unexpected token: ");
                            object.append(c);
                            throw new ParseException(object.toString());
                        }
                        char[] arrc = bl ? zzwx : zzww;
                        this.zzb((BufferedReader)object, arrc);
                        return true;
                    }
                    this.zzb((BufferedReader)object, zzwv);
                    return false;
                }
                char[] arrc = bl ? zzwz : zzwy;
                this.zzb((BufferedReader)object, arrc);
                return false;
            }
            if (bl) {
                throw new ParseException("No boolean value found in string");
            }
            bl = true;
        } while (true);
    }

    static /* synthetic */ long zzb(FastParser fastParser, BufferedReader bufferedReader) throws ParseException, IOException {
        return fastParser.zze(bufferedReader);
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Lifted jumps to return sites
     */
    private final String zzb(BufferedReader var1_1) throws ParseException, IOException {
        block29 : {
            block28 : {
                block27 : {
                    block25 : {
                        block26 : {
                            var1_1.mark(1024);
                            var3_2 = this.zzj((BufferedReader)var1_1);
                            if (var3_2 == 34) break block25;
                            if (var3_2 == 44) throw new ParseException("Missing value");
                            var4_3 = 1;
                            if (var3_2 == 91) break block26;
                            if (var3_2 != 123) {
                                var1_1.reset();
                                this.zza((BufferedReader)var1_1, this.zzws);
                            } else {
                                this.zzxb.push(1);
                                var1_1.mark(32);
                                var2_5 = this.zzj((BufferedReader)var1_1);
                                if (var2_5 != '}') {
                                    if (var2_5 != '\"') {
                                        var1_1 = new StringBuilder(18);
                                        var1_1.append("Unexpected token ");
                                        var1_1.append(var2_5);
                                        throw new ParseException(var1_1.toString());
                                    }
                                    var1_1.reset();
                                    this.zza((BufferedReader)var1_1);
                                    while (this.zzb((BufferedReader)var1_1) != null) {
                                    }
                                }
                                this.zzk(1);
                            }
                            ** GOTO lbl77
                        }
                        this.zzxb.push(5);
                        var1_1.mark(32);
                        if (this.zzj((BufferedReader)var1_1) == ']') break block27;
                        var1_1.reset();
                        var3_2 = 0;
                        var5_6 = 0;
                        break block28;
                    }
                    if (var1_1.read(this.zzwq) == -1) {
                        throw new ParseException("Unexpected EOF while parsing string");
                    }
                    break block29;
                }
                do {
                    this.zzk(5);
                    ** GOTO lbl77
                    break;
                } while (true);
            }
            do lbl-1000: // 3 sources:
            {
                if (var4_3 <= 0) ** continue;
                var2_5 = this.zzj((BufferedReader)var1_1);
                if (var2_5 == '\u0000') {
                    throw new ParseException("Unexpected EOF while parsing array");
                }
                if (Character.isISOControl(var2_5)) {
                    throw new ParseException("Unexpected control character while reading array");
                }
                var6_7 = var5_6;
                if (var2_5 == '\"') {
                    var6_7 = var5_6;
                    if (var3_2 == 0) {
                        var6_7 = var5_6 ^ 1;
                    }
                }
                var5_6 = var4_3;
                if (var2_5 == '[') {
                    var5_6 = var4_3;
                    if (var6_7 == 0) {
                        var5_6 = var4_3 + 1;
                    }
                }
                var4_3 = var5_6;
                if (var2_5 == ']') {
                    var4_3 = var5_6;
                    if (var6_7 == 0) {
                        var4_3 = var5_6 - 1;
                    }
                }
                if (var2_5 == '\\' && var6_7 != 0) {
                    var3_2 ^= 1;
                    var5_6 = var6_7;
                    ** continue;
                }
                var3_2 = 0;
                var5_6 = var6_7;
            } while (true);
        }
        var4_4 = this.zzwq[0];
        var3_2 = 0;
        do {
            block30 : {
                if (var4_4 != '\"' || var3_2 != 0) break block30;
lbl77: // 4 sources:
                var2_5 = this.zzj((BufferedReader)var1_1);
                if (var2_5 == ',') {
                    this.zzk(2);
                    return this.zza((BufferedReader)var1_1);
                }
                if (var2_5 != '}') {
                    var1_1 = new StringBuilder(18);
                    var1_1.append("Unexpected token ");
                    var1_1.append(var2_5);
                    throw new ParseException(var1_1.toString());
                }
                this.zzk(2);
                return null;
            }
            var3_2 = var4_4 == '\\' ? (var3_2 ^= '\u0001') : 0;
            if (var1_1.read(this.zzwq) == -1) {
                throw new ParseException("Unexpected EOF while parsing string");
            }
            var4_4 = var2_5 = this.zzwq[0];
        } while (!Character.isISOControl(var2_5));
        throw new ParseException("Unexpected control character while reading string");
    }

    private static String zzb(BufferedReader bufferedReader, char[] arrc, StringBuilder stringBuilder, char[] arrc2) throws ParseException, IOException {
        int n;
        stringBuilder.setLength(0);
        bufferedReader.mark(arrc.length);
        int n2 = 0;
        int n3 = 0;
        while ((n = bufferedReader.read(arrc)) != -1) {
            int n4 = n2;
            int n5 = 0;
            n2 = n3;
            n3 = n4;
            for (n4 = n5; n4 < n; ++n4) {
                char c = arrc[n4];
                if (Character.isISOControl(c)) {
                    if (arrc2 != null) {
                        for (n5 = 0; n5 < arrc2.length; ++n5) {
                            if (arrc2[n5] != c) continue;
                            n5 = 1;
                            break;
                        }
                    } else {
                        n5 = 0;
                    }
                    if (n5 == 0) {
                        throw new ParseException("Unexpected control character while reading string");
                    }
                }
                if (c == '\"' && n3 == 0) {
                    stringBuilder.append(arrc, 0, n4);
                    bufferedReader.reset();
                    bufferedReader.skip(n4 + 1);
                    if (n2 != 0) {
                        return JsonUtils.unescapeString(stringBuilder.toString());
                    }
                    return stringBuilder.toString();
                }
                if (c == '\\') {
                    n3 ^= 1;
                    n2 = 1;
                    continue;
                }
                n3 = 0;
            }
            stringBuilder.append(arrc, 0, n);
            bufferedReader.mark(arrc.length);
            n4 = n2;
            n2 = n3;
            n3 = n4;
        }
        throw new ParseException("Unexpected EOF while parsing string");
    }

    private final void zzb(BufferedReader bufferedReader, char[] arrc) throws ParseException, IOException {
        int n;
        for (int i = 0; i < arrc.length; i += n) {
            n = bufferedReader.read(this.zzwr, 0, arrc.length - i);
            if (n == -1) {
                throw new ParseException("Unexpected EOF");
            }
            for (int j = 0; j < n; ++j) {
                if (arrc[j + i] == this.zzwr[j]) continue;
                throw new ParseException("Unexpected character");
            }
        }
    }

    static /* synthetic */ float zzc(FastParser fastParser, BufferedReader bufferedReader) throws ParseException, IOException {
        return fastParser.zzg(bufferedReader);
    }

    private final String zzc(BufferedReader bufferedReader) throws ParseException, IOException {
        return this.zza(bufferedReader, this.zzwr, this.zzwt, null);
    }

    static /* synthetic */ double zzd(FastParser fastParser, BufferedReader bufferedReader) throws ParseException, IOException {
        return fastParser.zzh(bufferedReader);
    }

    private final int zzd(BufferedReader arrc) throws ParseException, IOException {
        int n = this.zza((BufferedReader)arrc, this.zzws);
        if (n == 0) {
            return 0;
        }
        arrc = this.zzws;
        if (n > 0) {
            int n2;
            boolean bl;
            int n3;
            int n4;
            int n5;
            if (arrc[0] == '-') {
                n5 = 1;
                bl = true;
                n3 = Integer.MIN_VALUE;
            } else {
                n5 = 0;
                bl = false;
                n3 = -2147483647;
            }
            if (n5 < n) {
                n4 = n5 + 1;
                if ((n5 = Character.digit(arrc[n5], 10)) < 0) {
                    throw new ParseException("Unexpected non-digit character");
                }
                n2 = - n5;
                n5 = n4;
                n4 = n2;
            } else {
                n4 = 0;
            }
            while (n5 < n) {
                n2 = Character.digit(arrc[n5], 10);
                if (n2 < 0) {
                    throw new ParseException("Unexpected non-digit character");
                }
                if (n4 < -214748364) {
                    throw new ParseException("Number too large");
                }
                if ((n4 *= 10) < n3 + n2) {
                    throw new ParseException("Number too large");
                }
                n4 -= n2;
                ++n5;
            }
            if (bl) {
                if (n5 > 1) {
                    return n4;
                }
                throw new ParseException("No digits to parse");
            }
            return - n4;
        }
        throw new ParseException("No number to parse");
    }

    private final long zze(BufferedReader arrc) throws ParseException, IOException {
        int n = this.zza((BufferedReader)arrc, this.zzws);
        if (n == 0) {
            return 0L;
        }
        arrc = this.zzws;
        if (n > 0) {
            boolean bl;
            long l;
            long l2;
            int n2;
            int n3 = 0;
            if (arrc[0] == '-') {
                l2 = Long.MIN_VALUE;
                n3 = 1;
                bl = true;
            } else {
                l2 = -9223372036854775807L;
                bl = false;
            }
            if (n3 < n) {
                n2 = n3 + 1;
                if ((n3 = Character.digit(arrc[n3], 10)) < 0) {
                    throw new ParseException("Unexpected non-digit character");
                }
                l = - n3;
                n3 = n2;
            } else {
                l = 0L;
            }
            while (n3 < n) {
                n2 = Character.digit(arrc[n3], 10);
                if (n2 < 0) {
                    throw new ParseException("Unexpected non-digit character");
                }
                if (l < -922337203685477580L) {
                    throw new ParseException("Number too large");
                }
                long l3 = n2;
                if ((l *= 10L) < l2 + l3) {
                    throw new ParseException("Number too large");
                }
                ++n3;
                l -= l3;
            }
            if (bl) {
                if (n3 > 1) {
                    return l;
                }
                throw new ParseException("No digits to parse");
            }
            return - l;
        }
        throw new ParseException("No number to parse");
    }

    static /* synthetic */ String zze(FastParser fastParser, BufferedReader bufferedReader) throws ParseException, IOException {
        return fastParser.zzc(bufferedReader);
    }

    static /* synthetic */ BigInteger zzf(FastParser fastParser, BufferedReader bufferedReader) throws ParseException, IOException {
        return fastParser.zzf(bufferedReader);
    }

    private final BigInteger zzf(BufferedReader bufferedReader) throws ParseException, IOException {
        int n = this.zza(bufferedReader, this.zzws);
        if (n == 0) {
            return null;
        }
        return new BigInteger(new String(this.zzws, 0, n));
    }

    private final float zzg(BufferedReader bufferedReader) throws ParseException, IOException {
        int n = this.zza(bufferedReader, this.zzws);
        if (n == 0) {
            return 0.0f;
        }
        return Float.parseFloat(new String(this.zzws, 0, n));
    }

    static /* synthetic */ BigDecimal zzg(FastParser fastParser, BufferedReader bufferedReader) throws ParseException, IOException {
        return fastParser.zzi(bufferedReader);
    }

    private final double zzh(BufferedReader bufferedReader) throws ParseException, IOException {
        int n = this.zza(bufferedReader, this.zzws);
        if (n == 0) {
            return 0.0;
        }
        return Double.parseDouble(new String(this.zzws, 0, n));
    }

    private final BigDecimal zzi(BufferedReader bufferedReader) throws ParseException, IOException {
        int n = this.zza(bufferedReader, this.zzws);
        if (n == 0) {
            return null;
        }
        return new BigDecimal(new String(this.zzws, 0, n));
    }

    private final char zzj(BufferedReader bufferedReader) throws ParseException, IOException {
        if (bufferedReader.read(this.zzwq) == -1) {
            return '\u0000';
        }
        while (Character.isWhitespace(this.zzwq[0])) {
            if (bufferedReader.read(this.zzwq) != -1) continue;
            return '\u0000';
        }
        return this.zzwq[0];
    }

    private final void zzk(int n) throws ParseException {
        if (this.zzxb.isEmpty()) {
            StringBuilder stringBuilder = new StringBuilder(46);
            stringBuilder.append("Expected state ");
            stringBuilder.append(n);
            stringBuilder.append(" but had empty stack");
            throw new ParseException(stringBuilder.toString());
        }
        int n2 = this.zzxb.pop();
        if (n2 != n) {
            StringBuilder stringBuilder = new StringBuilder(46);
            stringBuilder.append("Expected state ");
            stringBuilder.append(n);
            stringBuilder.append(" but had ");
            stringBuilder.append(n2);
            throw new ParseException(stringBuilder.toString());
        }
    }

    /*
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    public void parse(InputStream closeable, T object) throws ParseException {
        Throwable throwable2222;
        block15 : {
            block14 : {
                closeable = new BufferedReader(new InputStreamReader((InputStream)closeable), 1024);
                this.zzxb.push(0);
                char c = this.zzj((BufferedReader)closeable);
                if (c == '\u0000') break block14;
                if (c != '[') {
                    if (c != '{') {
                        object = new StringBuilder(19);
                        object.append("Unexpected token: ");
                        object.append(c);
                        throw new ParseException(object.toString());
                    }
                    this.zzxb.push(1);
                    this.zza((BufferedReader)closeable, (FastJsonResponse)object);
                } else {
                    this.zzxb.push(5);
                    Object object2 = object.getFieldMappings();
                    if (object2.size() != 1) {
                        throw new ParseException("Object array response class must have a single Field");
                    }
                    object2 = object2.entrySet().iterator().next().getValue();
                    ArrayList<T> arrayList = this.zza((BufferedReader)closeable, (FastJsonResponse.Field<?, ?>)object2);
                    object.addConcreteTypeArrayInternal((FastJsonResponse.Field<?, ?>)object2, object2.getOutputFieldName(), arrayList);
                }
                this.zzk(0);
                try {
                    closeable.close();
                    return;
                }
                catch (IOException iOException) {}
            }
            try {
                throw new ParseException("No data to parse");
            }
            catch (Throwable throwable2222) {
                break block15;
            }
            catch (IOException iOException) {
                throw new ParseException(iOException);
            }
        }
        try {
            closeable.close();
            throw throwable2222;
        }
        catch (IOException iOException) {}
        Log.w((String)"FastParser", (String)"Failed to close reader while parsing.");
        return;
        Log.w((String)"FastParser", (String)"Failed to close reader while parsing.");
        throw throwable2222;
    }

    /*
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    public void parse(String object, T t) throws ParseException {
        object = new ByteArrayInputStream(object.getBytes());
        this.parse((InputStream)object, t);
        object.close();
        return;
        {
            catch (IOException iOException) {}
        }
        catch (Throwable throwable) {
            try {
                object.close();
                throw throwable;
            }
            catch (IOException iOException) {}
            Log.w((String)"FastParser", (String)"Failed to close the input stream while parsing.");
            return;
            Log.w((String)"FastParser", (String)"Failed to close the input stream while parsing.");
            throw throwable;
        }
    }

    public static class ParseException
    extends Exception {
        public ParseException(String string2) {
            super(string2);
        }

        public ParseException(String string2, Throwable throwable) {
            super(string2, throwable);
        }

        public ParseException(Throwable throwable) {
            super(throwable);
        }
    }

    private static interface zza<O> {
        public O zzh(FastParser var1, BufferedReader var2) throws ParseException, IOException;
    }

}

