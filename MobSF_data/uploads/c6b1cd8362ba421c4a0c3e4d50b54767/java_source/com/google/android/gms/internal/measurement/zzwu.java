/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.content.ContentResolver
 *  android.database.ContentObserver
 *  android.database.Cursor
 *  android.database.sqlite.SQLiteException
 *  android.net.Uri
 *  android.os.Handler
 *  android.util.Log
 */
package com.google.android.gms.internal.measurement;

import android.content.ContentResolver;
import android.database.ContentObserver;
import android.database.Cursor;
import android.database.sqlite.SQLiteException;
import android.net.Uri;
import android.os.Handler;
import android.support.annotation.GuardedBy;
import android.util.Log;
import com.google.android.gms.internal.measurement.zzwv;
import com.google.android.gms.internal.measurement.zzww;
import com.google.android.gms.internal.measurement.zzwx;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

public final class zzwu {
    private static final ConcurrentHashMap<Uri, zzwu> zzbox = new ConcurrentHashMap();
    private static final String[] zzbpe = new String[]{"key", "value"};
    private final Uri uri;
    private final ContentResolver zzboy;
    private final ContentObserver zzboz;
    private final Object zzbpa = new Object();
    private volatile Map<String, String> zzbpb;
    private final Object zzbpc = new Object();
    @GuardedBy(value="listenersLock")
    private final List<zzww> zzbpd = new ArrayList<zzww>();

    private zzwu(ContentResolver contentResolver, Uri uri) {
        this.zzboy = contentResolver;
        this.uri = uri;
        this.zzboz = new zzwv(this, null);
    }

    public static zzwu zza(ContentResolver object, Uri uri) {
        zzwu zzwu2;
        zzwu zzwu3 = zzwu2 = zzbox.get((Object)uri);
        if (zzwu2 == null && (zzwu3 = zzbox.putIfAbsent(uri, (zzwu)(object = new zzwu((ContentResolver)object, uri)))) == null) {
            object.zzboy.registerContentObserver(object.uri, false, object.zzboz);
            return object;
        }
        return zzwu3;
    }

    static /* synthetic */ void zza(zzwu zzwu2) {
        zzwu2.zzsk();
    }

    /*
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    private final Map<String, String> zzsj() {
        HashMap<String, String> hashMap = new HashMap<String, String>();
        Cursor cursor = this.zzboy.query(this.uri, zzbpe, null, null, null);
        if (cursor == null) return hashMap;
        while (cursor.moveToNext()) {
            hashMap.put(cursor.getString(0), cursor.getString(1));
        }
        {
            catch (Throwable throwable) {
                cursor.close();
                throw throwable;
            }
        }
        try {
            cursor.close();
            return hashMap;
        }
        catch (SQLiteException | SecurityException securityException) {}
        Log.e((String)"ConfigurationContentLoader", (String)"PhenotypeFlag unable to load ContentProvider, using default values");
        return null;
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    private final void zzsk() {
        Object object = this.zzbpc;
        synchronized (object) {
            Iterator<zzww> iterator = this.zzbpd.iterator();
            while (iterator.hasNext()) {
                iterator.next().zzsl();
            }
            return;
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public final Map<String, String> zzsh() {
        Map<String, String> map = zzwx.zzd("gms:phenotype:phenotype_flag:debug_disable_caching", false) ? this.zzsj() : this.zzbpb;
        Map<String, String> map2 = map;
        if (map == null) {
            Object object = this.zzbpa;
            synchronized (object) {
                map = map2 = this.zzbpb;
                if (map2 == null) {
                    map = this.zzsj();
                    this.zzbpb = map;
                }
            }
            map2 = map;
        }
        if (map2 != null) {
            return map2;
        }
        return Collections.emptyMap();
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public final void zzsi() {
        Object object = this.zzbpa;
        synchronized (object) {
            this.zzbpb = null;
            return;
        }
    }
}

