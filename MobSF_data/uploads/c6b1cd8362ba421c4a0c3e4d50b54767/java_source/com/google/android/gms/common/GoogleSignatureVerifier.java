/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.content.Context
 *  android.content.pm.ApplicationInfo
 *  android.content.pm.PackageInfo
 *  android.content.pm.PackageManager
 *  android.content.pm.PackageManager$NameNotFoundException
 *  android.content.pm.Signature
 *  android.os.RemoteException
 *  android.util.Log
 *  javax.annotation.CheckReturnValue
 */
package com.google.android.gms.common;

import android.content.Context;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.pm.Signature;
import android.os.RemoteException;
import android.util.Log;
import com.google.android.gms.common.GoogleCertificates;
import com.google.android.gms.common.GooglePlayServicesUtilLight;
import com.google.android.gms.common.internal.ICertData;
import com.google.android.gms.common.internal.Preconditions;
import com.google.android.gms.common.util.VisibleForTesting;
import com.google.android.gms.common.wrappers.Wrappers;
import com.google.android.gms.common.zzb;
import com.google.android.gms.common.zzd;
import com.google.android.gms.common.zzg;
import com.google.android.gms.dynamic.IObjectWrapper;
import com.google.android.gms.dynamic.ObjectWrapper;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;
import javax.annotation.CheckReturnValue;

@CheckReturnValue
public class GoogleSignatureVerifier {
    private static GoogleSignatureVerifier zzbv;
    private final Context mContext;

    private GoogleSignatureVerifier(Context context) {
        this.mContext = context.getApplicationContext();
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public static GoogleSignatureVerifier getInstance(Context context) {
        Preconditions.checkNotNull(context);
        synchronized (GoogleSignatureVerifier.class) {
            if (zzbv == null) {
                GoogleCertificates.init(context);
                zzbv = new GoogleSignatureVerifier(context);
            }
            return zzbv;
        }
    }

    @VisibleForTesting
    public static void resetForTests() {
        synchronized (GoogleSignatureVerifier.class) {
            zzbv = null;
            return;
        }
    }

    private static /* varargs */ GoogleCertificates.CertData zza(PackageInfo object, GoogleCertificates.CertData ... arrcertData) {
        if (object.signatures == null) {
            return null;
        }
        if (object.signatures.length != 1) {
            Log.w((String)"GoogleSignatureVerifier", (String)"Package has more than one signature.");
            return null;
        }
        object = object.signatures;
        object = new zzb(object[0].toByteArray());
        for (int i = 0; i < arrcertData.length; ++i) {
            if (!arrcertData[i].equals(object)) continue;
            return arrcertData[i];
        }
        return null;
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    private final zzg zza(PackageInfo object) {
        void var1_3;
        boolean bl = GooglePlayServicesUtilLight.honorsDebugCertificates(this.mContext);
        if (object == null) {
            return zzg.zze((String)var1_3);
        }
        if (object.signatures.length != 1) {
            return zzg.zze((String)var1_3);
        }
        zzb zzb2 = new zzb(object.signatures[0].toByteArray());
        String string2 = object.packageName;
        zzg zzg2 = GoogleCertificates.zza(string2, zzb2, bl);
        if (!zzg2.zzbl || object.applicationInfo == null || (object.applicationInfo.flags & 2) == 0 || bl && !GoogleCertificates.zza((String)string2, (GoogleCertificates.CertData)zzb2, (boolean)false).zzbl) return zzg2;
        return zzg.zze((String)var1_3);
    }

    private final zzg zzb(int n) {
        String[] arrstring = Wrappers.packageManager(this.mContext).getPackagesForUid(n);
        if (arrstring != null && arrstring.length != 0) {
            zzg zzg2 = null;
            int n2 = arrstring.length;
            for (n = 0; n < n2; ++n) {
                zzg2 = this.zzf(arrstring[n]);
                if (!zzg2.zzbl) continue;
                return zzg2;
            }
            return zzg2;
        }
        return zzg.zze("no pkgs");
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    private final zzg zzf(String string2) {
        PackageInfo packageInfo;
        try {
            packageInfo = Wrappers.packageManager(this.mContext).getPackageInfo(string2, 64);
        }
        catch (PackageManager.NameNotFoundException nameNotFoundException) {}
        return this.zza(packageInfo);
        string2 = String.valueOf(string2);
        if (string2.length() != 0) {
            string2 = "no pkg ".concat(string2);
            return zzg.zze(string2);
        }
        string2 = new String("no pkg ");
        return zzg.zze(string2);
    }

    @Deprecated
    public Set<byte[]> getAllGoogleSignatures(boolean bl) {
        Set<ICertData> set = bl ? GoogleCertificates.zzd() : GoogleCertificates.zze();
        HashSet<byte[]> hashSet = new HashSet<byte[]>(set.size());
        try {
            set = set.iterator();
            while (set.hasNext()) {
                hashSet.add((byte[])ObjectWrapper.unwrap(((ICertData)set.next()).getBytesWrapped()));
            }
        }
        catch (RemoteException remoteException) {
            Log.e((String)"GoogleSignatureVerifier", (String)"Failed to get Google certificates from remote", (Throwable)remoteException);
        }
        return hashSet;
    }

    public boolean isChimeraSigned(PackageManager object, PackageInfo packageInfo) {
        object = packageInfo.packageName;
        packageInfo.packageName = "com.google.android.gms.chimera";
        boolean bl = this.isPackageGoogleSigned(packageInfo);
        packageInfo.packageName = object;
        return bl;
    }

    public boolean isGooglePublicSignedPackage(PackageInfo packageInfo) {
        if (packageInfo == null) {
            return false;
        }
        if (this.isGooglePublicSignedPackage(packageInfo, false)) {
            return true;
        }
        if (this.isGooglePublicSignedPackage(packageInfo, true)) {
            if (GooglePlayServicesUtilLight.honorsDebugCertificates(this.mContext)) {
                return true;
            }
            Log.w((String)"GoogleSignatureVerifier", (String)"Test-keys aren't accepted on this build.");
        }
        return false;
    }

    /*
     * Enabled aggressive block sorting
     */
    public boolean isGooglePublicSignedPackage(PackageInfo object, boolean bl) {
        if (object != null && object.signatures != null) {
            void var2_3;
            GoogleCertificates.CertData[] arrcertData = var2_3 != false ? zzd.zzbg : new GoogleCertificates.CertData[]{zzd.zzbg[0]};
            GoogleCertificates.CertData certData = GoogleSignatureVerifier.zza(object, arrcertData);
            if (certData != null) {
                return true;
            }
        }
        return false;
    }

    @Deprecated
    public boolean isGooglePublicSignedPackage(PackageManager packageManager, PackageInfo packageInfo) {
        return this.isGooglePublicSignedPackage(packageInfo);
    }

    public boolean isPackageGoogleSigned(PackageInfo object) {
        object = this.zza((PackageInfo)object);
        object.zzi();
        return object.zzbl;
    }

    @Deprecated
    public boolean isPackageGoogleSigned(PackageManager packageManager, PackageInfo packageInfo) {
        return this.isPackageGoogleSigned(packageInfo);
    }

    @Deprecated
    public boolean isPackageGoogleSigned(PackageManager packageManager, String string2) {
        return this.isPackageGoogleSigned(string2);
    }

    public boolean isPackageGoogleSigned(String object) {
        object = this.zzf((String)object);
        object.zzi();
        return object.zzbl;
    }

    public boolean isUidGoogleSigned(int n) {
        zzg zzg2 = this.zzb(n);
        zzg2.zzi();
        return zzg2.zzbl;
    }

    @Deprecated
    public boolean isUidGoogleSigned(PackageManager packageManager, int n) {
        return this.isUidGoogleSigned(n);
    }

    @Deprecated
    public void verifyPackageIsGoogleSigned(PackageManager packageManager, String string2) throws SecurityException {
        this.verifyPackageIsGoogleSigned(string2);
    }

    public void verifyPackageIsGoogleSigned(String string2) throws SecurityException {
        this.zzf(string2).zzh();
    }

    public void verifyUidIsGoogleSigned(int n) throws SecurityException {
        this.zzb(n).zzh();
    }

    @Deprecated
    public void verifyUidIsGoogleSigned(PackageManager packageManager, int n) throws SecurityException {
        this.verifyUidIsGoogleSigned(n);
    }
}

