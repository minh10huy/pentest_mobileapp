/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.app.Activity
 *  javax.annotation.concurrent.GuardedBy
 */
package com.google.android.gms.tasks;

import android.app.Activity;
import android.support.annotation.MainThread;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import com.google.android.gms.common.api.internal.LifecycleCallback;
import com.google.android.gms.common.api.internal.LifecycleFragment;
import com.google.android.gms.common.internal.Preconditions;
import com.google.android.gms.tasks.Continuation;
import com.google.android.gms.tasks.OnCanceledListener;
import com.google.android.gms.tasks.OnCompleteListener;
import com.google.android.gms.tasks.OnFailureListener;
import com.google.android.gms.tasks.OnSuccessListener;
import com.google.android.gms.tasks.RuntimeExecutionException;
import com.google.android.gms.tasks.SuccessContinuation;
import com.google.android.gms.tasks.Task;
import com.google.android.gms.tasks.TaskExecutors;
import com.google.android.gms.tasks.zzc;
import com.google.android.gms.tasks.zze;
import com.google.android.gms.tasks.zzg;
import com.google.android.gms.tasks.zzi;
import com.google.android.gms.tasks.zzk;
import com.google.android.gms.tasks.zzm;
import com.google.android.gms.tasks.zzo;
import com.google.android.gms.tasks.zzq;
import com.google.android.gms.tasks.zzr;
import java.lang.ref.WeakReference;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.concurrent.CancellationException;
import java.util.concurrent.Executor;
import javax.annotation.concurrent.GuardedBy;

final class zzu<TResult>
extends Task<TResult> {
    private final Object mLock = new Object();
    private final zzr<TResult> zzage = new zzr();
    @GuardedBy(value="mLock")
    private boolean zzagf;
    @GuardedBy(value="mLock")
    private TResult zzagg;
    @GuardedBy(value="mLock")
    private Exception zzagh;
    private volatile boolean zzfi;

    zzu() {
    }

    @GuardedBy(value="mLock")
    private final void zzdq() {
        Preconditions.checkState(this.zzagf, "Task is not yet complete");
    }

    @GuardedBy(value="mLock")
    private final void zzdr() {
        Preconditions.checkState(this.zzagf ^ true, "Task is already complete");
    }

    @GuardedBy(value="mLock")
    private final void zzds() {
        if (this.zzfi) {
            throw new CancellationException("Task is already canceled.");
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    private final void zzdt() {
        Object object = this.mLock;
        synchronized (object) {
            if (!this.zzagf) {
                return;
            }
        }
        this.zzage.zza(this);
    }

    @NonNull
    @Override
    public final Task<TResult> addOnCanceledListener(@NonNull Activity activity, @NonNull OnCanceledListener object) {
        object = new zzg(TaskExecutors.MAIN_THREAD, (OnCanceledListener)object);
        this.zzage.zza((zzq<TResult>)object);
        zza.zze(activity).zzb(object);
        this.zzdt();
        return this;
    }

    @NonNull
    @Override
    public final Task<TResult> addOnCanceledListener(@NonNull OnCanceledListener onCanceledListener) {
        return this.addOnCanceledListener(TaskExecutors.MAIN_THREAD, onCanceledListener);
    }

    @NonNull
    @Override
    public final Task<TResult> addOnCanceledListener(@NonNull Executor executor, @NonNull OnCanceledListener onCanceledListener) {
        this.zzage.zza(new zzg(executor, onCanceledListener));
        this.zzdt();
        return this;
    }

    @NonNull
    @Override
    public final Task<TResult> addOnCompleteListener(@NonNull Activity activity, @NonNull OnCompleteListener<TResult> object) {
        object = new zzi<TResult>(TaskExecutors.MAIN_THREAD, (OnCompleteListener<TResult>)object);
        this.zzage.zza((zzq<TResult>)object);
        zza.zze(activity).zzb(object);
        this.zzdt();
        return this;
    }

    @NonNull
    @Override
    public final Task<TResult> addOnCompleteListener(@NonNull OnCompleteListener<TResult> onCompleteListener) {
        return this.addOnCompleteListener(TaskExecutors.MAIN_THREAD, onCompleteListener);
    }

    @NonNull
    @Override
    public final Task<TResult> addOnCompleteListener(@NonNull Executor executor, @NonNull OnCompleteListener<TResult> onCompleteListener) {
        this.zzage.zza(new zzi<TResult>(executor, onCompleteListener));
        this.zzdt();
        return this;
    }

    @NonNull
    @Override
    public final Task<TResult> addOnFailureListener(@NonNull Activity activity, @NonNull OnFailureListener object) {
        object = new zzk(TaskExecutors.MAIN_THREAD, (OnFailureListener)object);
        this.zzage.zza((zzq<TResult>)object);
        zza.zze(activity).zzb(object);
        this.zzdt();
        return this;
    }

    @NonNull
    @Override
    public final Task<TResult> addOnFailureListener(@NonNull OnFailureListener onFailureListener) {
        return this.addOnFailureListener(TaskExecutors.MAIN_THREAD, onFailureListener);
    }

    @NonNull
    @Override
    public final Task<TResult> addOnFailureListener(@NonNull Executor executor, @NonNull OnFailureListener onFailureListener) {
        this.zzage.zza(new zzk(executor, onFailureListener));
        this.zzdt();
        return this;
    }

    @NonNull
    @Override
    public final Task<TResult> addOnSuccessListener(@NonNull Activity activity, @NonNull OnSuccessListener<? super TResult> object) {
        object = new zzm<TResult>(TaskExecutors.MAIN_THREAD, (OnSuccessListener<? super TResult>)object);
        this.zzage.zza((zzq<TResult>)object);
        zza.zze(activity).zzb(object);
        this.zzdt();
        return this;
    }

    @NonNull
    @Override
    public final Task<TResult> addOnSuccessListener(@NonNull OnSuccessListener<? super TResult> onSuccessListener) {
        return this.addOnSuccessListener(TaskExecutors.MAIN_THREAD, onSuccessListener);
    }

    @NonNull
    @Override
    public final Task<TResult> addOnSuccessListener(@NonNull Executor executor, @NonNull OnSuccessListener<? super TResult> onSuccessListener) {
        this.zzage.zza(new zzm<TResult>(executor, onSuccessListener));
        this.zzdt();
        return this;
    }

    @NonNull
    @Override
    public final <TContinuationResult> Task<TContinuationResult> continueWith(@NonNull Continuation<TResult, TContinuationResult> continuation) {
        return this.continueWith(TaskExecutors.MAIN_THREAD, continuation);
    }

    @NonNull
    @Override
    public final <TContinuationResult> Task<TContinuationResult> continueWith(@NonNull Executor executor, @NonNull Continuation<TResult, TContinuationResult> continuation) {
        zzu<TResult> zzu2 = new zzu<TResult>();
        this.zzage.zza(new zzc<TResult, TContinuationResult>(executor, continuation, zzu2));
        this.zzdt();
        return zzu2;
    }

    @NonNull
    @Override
    public final <TContinuationResult> Task<TContinuationResult> continueWithTask(@NonNull Continuation<TResult, Task<TContinuationResult>> continuation) {
        return this.continueWithTask(TaskExecutors.MAIN_THREAD, continuation);
    }

    @NonNull
    @Override
    public final <TContinuationResult> Task<TContinuationResult> continueWithTask(@NonNull Executor executor, @NonNull Continuation<TResult, Task<TContinuationResult>> continuation) {
        zzu<TResult> zzu2 = new zzu<TResult>();
        this.zzage.zza(new zze<TResult, TContinuationResult>(executor, continuation, zzu2));
        this.zzdt();
        return zzu2;
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @Nullable
    @Override
    public final Exception getException() {
        Object object = this.mLock;
        synchronized (object) {
            return this.zzagh;
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @Override
    public final TResult getResult() {
        Object object = this.mLock;
        synchronized (object) {
            this.zzdq();
            this.zzds();
            if (this.zzagh != null) {
                throw new RuntimeExecutionException(this.zzagh);
            }
            TResult TResult = this.zzagg;
            return TResult;
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @Override
    public final <X extends Throwable> TResult getResult(@NonNull Class<X> class_) throws Throwable {
        Object object = this.mLock;
        synchronized (object) {
            this.zzdq();
            this.zzds();
            if (class_.isInstance(this.zzagh)) {
                throw (Throwable)class_.cast(this.zzagh);
            }
            if (this.zzagh != null) {
                throw new RuntimeExecutionException(this.zzagh);
            }
            class_ = this.zzagg;
            return (TResult)class_;
        }
    }

    @Override
    public final boolean isCanceled() {
        return this.zzfi;
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @Override
    public final boolean isComplete() {
        Object object = this.mLock;
        synchronized (object) {
            return this.zzagf;
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @Override
    public final boolean isSuccessful() {
        Object object = this.mLock;
        synchronized (object) {
            if (!this.zzagf) return false;
            if (this.zzfi) return false;
            if (this.zzagh != null) return false;
            return true;
        }
    }

    @NonNull
    @Override
    public final <TContinuationResult> Task<TContinuationResult> onSuccessTask(@NonNull SuccessContinuation<TResult, TContinuationResult> successContinuation) {
        return this.onSuccessTask(TaskExecutors.MAIN_THREAD, successContinuation);
    }

    @NonNull
    @Override
    public final <TContinuationResult> Task<TContinuationResult> onSuccessTask(Executor executor, SuccessContinuation<TResult, TContinuationResult> successContinuation) {
        zzu<TResult> zzu2 = new zzu<TResult>();
        this.zzage.zza(new zzo<TResult, TContinuationResult>(executor, successContinuation, zzu2));
        this.zzdt();
        return zzu2;
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public final void setException(@NonNull Exception exception) {
        Preconditions.checkNotNull(exception, "Exception must not be null");
        Object object = this.mLock;
        synchronized (object) {
            this.zzdr();
            this.zzagf = true;
            this.zzagh = exception;
        }
        this.zzage.zza(this);
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public final void setResult(TResult TResult) {
        Object object = this.mLock;
        synchronized (object) {
            this.zzdr();
            this.zzagf = true;
            this.zzagg = TResult;
        }
        this.zzage.zza(this);
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public final boolean trySetException(@NonNull Exception exception) {
        Preconditions.checkNotNull(exception, "Exception must not be null");
        Object object = this.mLock;
        synchronized (object) {
            if (this.zzagf) {
                return false;
            }
            this.zzagf = true;
            this.zzagh = exception;
        }
        this.zzage.zza(this);
        return true;
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public final boolean trySetResult(TResult TResult) {
        Object object = this.mLock;
        synchronized (object) {
            if (this.zzagf) {
                return false;
            }
            this.zzagf = true;
            this.zzagg = TResult;
        }
        this.zzage.zza(this);
        return true;
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public final boolean zzdp() {
        Object object = this.mLock;
        synchronized (object) {
            if (this.zzagf) {
                return false;
            }
            this.zzagf = true;
            this.zzfi = true;
        }
        this.zzage.zza(this);
        return true;
    }

    private static class zza
    extends LifecycleCallback {
        private final List<WeakReference<zzq<?>>> zzagi = new ArrayList();

        private zza(LifecycleFragment lifecycleFragment) {
            super(lifecycleFragment);
            this.mLifecycleFragment.addCallback("TaskOnStopCallback", this);
        }

        public static zza zze(Activity object) {
            LifecycleFragment lifecycleFragment = zza.getFragment(object);
            zza zza2 = lifecycleFragment.getCallbackOrNull("TaskOnStopCallback", zza.class);
            object = zza2;
            if (zza2 == null) {
                object = new zza(lifecycleFragment);
            }
            return object;
        }

        /*
         * Enabled aggressive block sorting
         * Enabled unnecessary exception pruning
         * Enabled aggressive exception aggregation
         */
        @MainThread
        @Override
        public void onStop() {
            List<WeakReference<zzq<?>>> list = this.zzagi;
            synchronized (list) {
                Iterator<WeakReference<zzq<?>>> iterator = this.zzagi.iterator();
                do {
                    if (!iterator.hasNext()) {
                        this.zzagi.clear();
                        return;
                    }
                    zzq<?> zzq2 = iterator.next().get();
                    if (zzq2 == null) continue;
                    zzq2.cancel();
                } while (true);
            }
        }

        /*
         * Enabled aggressive block sorting
         * Enabled unnecessary exception pruning
         * Enabled aggressive exception aggregation
         */
        public final <T> void zzb(zzq<T> zzq2) {
            List<WeakReference<zzq<?>>> list = this.zzagi;
            synchronized (list) {
                this.zzagi.add(new WeakReference<zzq<T>>(zzq2));
                return;
            }
        }
    }

}

