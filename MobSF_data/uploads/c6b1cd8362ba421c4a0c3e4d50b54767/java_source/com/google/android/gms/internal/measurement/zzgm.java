/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.os.Process
 */
package com.google.android.gms.internal.measurement;

import android.os.Process;
import com.google.android.gms.common.internal.Preconditions;
import com.google.android.gms.internal.measurement.zzfi;
import com.google.android.gms.internal.measurement.zzfk;
import com.google.android.gms.internal.measurement.zzgi;
import com.google.android.gms.internal.measurement.zzgl;
import java.util.concurrent.BlockingQueue;

final class zzgm
extends Thread {
    private final /* synthetic */ zzgi zzanx;
    private final Object zzaoa;
    private final BlockingQueue<zzgl<?>> zzaob;

    public zzgm(String string2, BlockingQueue<zzgl<?>> blockingQueue) {
        this.zzanx = var1_1;
        Preconditions.checkNotNull(string2);
        Preconditions.checkNotNull(blockingQueue);
        this.zzaoa = new Object();
        this.zzaob = blockingQueue;
        this.setName(string2);
    }

    private final void zza(InterruptedException interruptedException) {
        this.zzanx.zzgi().zziy().zzg(String.valueOf(this.getName()).concat(" was interrupted"), interruptedException);
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Converted monitor instructions to comments
     * Lifted jumps to return sites
     */
    @Override
    public final void run() {
        var1_1 = 0;
        while (var1_1 == 0) {
            try {
                zzgi.zza(this.zzanx).acquire();
                var1_1 = 1;
            }
            catch (InterruptedException var4_2) {
                this.zza(var4_2);
            }
        }
        try {
            var2_4 = Process.getThreadPriority((int)Process.myTid());
            do lbl-1000: // 3 sources:
            {
                if ((var4_3 = this.zzaob.poll()) != null) {
                    var1_1 = var4_3.zzanz != false ? var2_4 : 10;
                    Process.setThreadPriority((int)var1_1);
                    var4_3.run();
                    continue;
                }
                var4_3 = this.zzaoa;
                // MONITORENTER : var4_3
                break;
            } while (true);
        }
        catch (Throwable var5_7) {
            var4_3 = zzgi.zzc(this.zzanx);
            // MONITORENTER : var4_3
            zzgi.zza(this.zzanx).release();
            zzgi.zzc(this.zzanx).notifyAll();
            if (this == zzgi.zzd(this.zzanx)) {
                zzgi.zza(this.zzanx, null);
                throw var5_7;
            }
            if (this == zzgi.zze(this.zzanx)) {
                zzgi.zzb(this.zzanx, null);
                throw var5_7;
            }
            this.zzanx.zzgi().zziv().log("Current scheduler thread is neither worker nor network");
            // MONITOREXIT : var4_3
            throw var5_7;
        }
        {
            if (this.zzaob.peek() == null && !(var3_5 = zzgi.zzb(this.zzanx))) {
                try {
                    this.zzaoa.wait(30000L);
                }
                catch (InterruptedException var5_6) {
                    this.zza(var5_6);
                }
            }
            // MONITOREXIT : var4_3
            var4_3 = zzgi.zzc(this.zzanx);
            // MONITORENTER : var4_3
            if (this.zzaob.peek() == null) {
                // MONITOREXIT : var4_3
                var4_3 = zzgi.zzc(this.zzanx);
                // MONITORENTER : var4_3
                zzgi.zza(this.zzanx).release();
                zzgi.zzc(this.zzanx).notifyAll();
                if (this == zzgi.zzd(this.zzanx)) {
                    zzgi.zza(this.zzanx, null);
                    return;
                }
                if (this == zzgi.zze(this.zzanx)) {
                    zzgi.zzb(this.zzanx, null);
                    return;
                }
                this.zzanx.zzgi().zziv().log("Current scheduler thread is neither worker nor network");
                // MONITOREXIT : var4_3
                return;
            }
            // MONITOREXIT : var4_3
            ** while (true)
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public final void zzjx() {
        Object object = this.zzaoa;
        synchronized (object) {
            this.zzaoa.notifyAll();
            return;
        }
    }
}

