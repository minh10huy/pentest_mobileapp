/*
 * Decompiled with CFR 0_132.
 */
package com.google.android.gms.internal.measurement;

import com.google.android.gms.internal.measurement.zzke;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.InetAddress;
import java.net.SocketAddress;
import java.net.SocketException;
import java.nio.channels.SocketChannel;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import javax.net.ssl.HandshakeCompletedListener;
import javax.net.ssl.SSLSession;
import javax.net.ssl.SSLSocket;

final class zzkf
extends SSLSocket {
    private final SSLSocket zzatc;

    zzkf(zzke zzke2, SSLSocket sSLSocket) {
        this.zzatc = sSLSocket;
    }

    @Override
    public final void addHandshakeCompletedListener(HandshakeCompletedListener handshakeCompletedListener) {
        this.zzatc.addHandshakeCompletedListener(handshakeCompletedListener);
    }

    @Override
    public final void bind(SocketAddress socketAddress) throws IOException {
        this.zzatc.bind(socketAddress);
    }

    @Override
    public final void close() throws IOException {
        synchronized (this) {
            this.zzatc.close();
            return;
        }
    }

    @Override
    public final void connect(SocketAddress socketAddress) throws IOException {
        this.zzatc.connect(socketAddress);
    }

    @Override
    public final void connect(SocketAddress socketAddress, int n) throws IOException {
        this.zzatc.connect(socketAddress, n);
    }

    public final boolean equals(Object object) {
        return this.zzatc.equals(object);
    }

    @Override
    public final SocketChannel getChannel() {
        return this.zzatc.getChannel();
    }

    @Override
    public final boolean getEnableSessionCreation() {
        return this.zzatc.getEnableSessionCreation();
    }

    @Override
    public final String[] getEnabledCipherSuites() {
        return this.zzatc.getEnabledCipherSuites();
    }

    @Override
    public final String[] getEnabledProtocols() {
        return this.zzatc.getEnabledProtocols();
    }

    @Override
    public final InetAddress getInetAddress() {
        return this.zzatc.getInetAddress();
    }

    @Override
    public final InputStream getInputStream() throws IOException {
        return this.zzatc.getInputStream();
    }

    @Override
    public final boolean getKeepAlive() throws SocketException {
        return this.zzatc.getKeepAlive();
    }

    @Override
    public final InetAddress getLocalAddress() {
        return this.zzatc.getLocalAddress();
    }

    @Override
    public final int getLocalPort() {
        return this.zzatc.getLocalPort();
    }

    @Override
    public final SocketAddress getLocalSocketAddress() {
        return this.zzatc.getLocalSocketAddress();
    }

    @Override
    public final boolean getNeedClientAuth() {
        return this.zzatc.getNeedClientAuth();
    }

    @Override
    public final boolean getOOBInline() throws SocketException {
        return this.zzatc.getOOBInline();
    }

    @Override
    public final OutputStream getOutputStream() throws IOException {
        return this.zzatc.getOutputStream();
    }

    @Override
    public final int getPort() {
        return this.zzatc.getPort();
    }

    @Override
    public final int getReceiveBufferSize() throws SocketException {
        synchronized (this) {
            int n = this.zzatc.getReceiveBufferSize();
            return n;
        }
    }

    @Override
    public final SocketAddress getRemoteSocketAddress() {
        return this.zzatc.getRemoteSocketAddress();
    }

    @Override
    public final boolean getReuseAddress() throws SocketException {
        return this.zzatc.getReuseAddress();
    }

    @Override
    public final int getSendBufferSize() throws SocketException {
        synchronized (this) {
            int n = this.zzatc.getSendBufferSize();
            return n;
        }
    }

    @Override
    public final SSLSession getSession() {
        return this.zzatc.getSession();
    }

    @Override
    public final int getSoLinger() throws SocketException {
        return this.zzatc.getSoLinger();
    }

    @Override
    public final int getSoTimeout() throws SocketException {
        synchronized (this) {
            int n = this.zzatc.getSoTimeout();
            return n;
        }
    }

    @Override
    public final String[] getSupportedCipherSuites() {
        return this.zzatc.getSupportedCipherSuites();
    }

    @Override
    public final String[] getSupportedProtocols() {
        return this.zzatc.getSupportedProtocols();
    }

    @Override
    public final boolean getTcpNoDelay() throws SocketException {
        return this.zzatc.getTcpNoDelay();
    }

    @Override
    public final int getTrafficClass() throws SocketException {
        return this.zzatc.getTrafficClass();
    }

    @Override
    public final boolean getUseClientMode() {
        return this.zzatc.getUseClientMode();
    }

    @Override
    public final boolean getWantClientAuth() {
        return this.zzatc.getWantClientAuth();
    }

    @Override
    public final boolean isBound() {
        return this.zzatc.isBound();
    }

    @Override
    public final boolean isClosed() {
        return this.zzatc.isClosed();
    }

    @Override
    public final boolean isConnected() {
        return this.zzatc.isConnected();
    }

    @Override
    public final boolean isInputShutdown() {
        return this.zzatc.isInputShutdown();
    }

    @Override
    public final boolean isOutputShutdown() {
        return this.zzatc.isOutputShutdown();
    }

    @Override
    public final void removeHandshakeCompletedListener(HandshakeCompletedListener handshakeCompletedListener) {
        this.zzatc.removeHandshakeCompletedListener(handshakeCompletedListener);
    }

    @Override
    public final void sendUrgentData(int n) throws IOException {
        this.zzatc.sendUrgentData(n);
    }

    @Override
    public final void setEnableSessionCreation(boolean bl) {
        this.zzatc.setEnableSessionCreation(bl);
    }

    @Override
    public final void setEnabledCipherSuites(String[] arrstring) {
        this.zzatc.setEnabledCipherSuites(arrstring);
    }

    @Override
    public final void setEnabledProtocols(String[] object) {
        String[] arrstring = object;
        if (object != null) {
            arrstring = object;
            if (Arrays.asList(object).contains("SSLv3")) {
                object = new ArrayList<String>(Arrays.asList(this.zzatc.getEnabledProtocols()));
                if (object.size() > 1) {
                    object.remove("SSLv3");
                }
                arrstring = object.toArray(new String[object.size()]);
            }
        }
        this.zzatc.setEnabledProtocols(arrstring);
    }

    @Override
    public final void setKeepAlive(boolean bl) throws SocketException {
        this.zzatc.setKeepAlive(bl);
    }

    @Override
    public final void setNeedClientAuth(boolean bl) {
        this.zzatc.setNeedClientAuth(bl);
    }

    @Override
    public final void setOOBInline(boolean bl) throws SocketException {
        this.zzatc.setOOBInline(bl);
    }

    @Override
    public final void setPerformancePreferences(int n, int n2, int n3) {
        this.zzatc.setPerformancePreferences(n, n2, n3);
    }

    @Override
    public final void setReceiveBufferSize(int n) throws SocketException {
        synchronized (this) {
            this.zzatc.setReceiveBufferSize(n);
            return;
        }
    }

    @Override
    public final void setReuseAddress(boolean bl) throws SocketException {
        this.zzatc.setReuseAddress(bl);
    }

    @Override
    public final void setSendBufferSize(int n) throws SocketException {
        synchronized (this) {
            this.zzatc.setSendBufferSize(n);
            return;
        }
    }

    @Override
    public final void setSoLinger(boolean bl, int n) throws SocketException {
        this.zzatc.setSoLinger(bl, n);
    }

    @Override
    public final void setSoTimeout(int n) throws SocketException {
        synchronized (this) {
            this.zzatc.setSoTimeout(n);
            return;
        }
    }

    @Override
    public final void setTcpNoDelay(boolean bl) throws SocketException {
        this.zzatc.setTcpNoDelay(bl);
    }

    @Override
    public final void setTrafficClass(int n) throws SocketException {
        this.zzatc.setTrafficClass(n);
    }

    @Override
    public final void setUseClientMode(boolean bl) {
        this.zzatc.setUseClientMode(bl);
    }

    @Override
    public final void setWantClientAuth(boolean bl) {
        this.zzatc.setWantClientAuth(bl);
    }

    @Override
    public final void shutdownInput() throws IOException {
        this.zzatc.shutdownInput();
    }

    @Override
    public final void shutdownOutput() throws IOException {
        this.zzatc.shutdownOutput();
    }

    @Override
    public final void startHandshake() throws IOException {
        this.zzatc.startHandshake();
    }

    @Override
    public final String toString() {
        return this.zzatc.toString();
    }
}

