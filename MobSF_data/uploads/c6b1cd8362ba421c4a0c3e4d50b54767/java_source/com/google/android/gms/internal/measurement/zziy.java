/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.content.ComponentName
 *  android.content.Context
 *  android.content.Intent
 *  android.content.ServiceConnection
 *  android.os.Bundle
 *  android.os.DeadObjectException
 *  android.os.IBinder
 *  android.os.IInterface
 *  android.os.Looper
 *  android.os.RemoteException
 */
package com.google.android.gms.internal.measurement;

import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.content.ServiceConnection;
import android.os.Bundle;
import android.os.DeadObjectException;
import android.os.IBinder;
import android.os.IInterface;
import android.os.Looper;
import android.os.RemoteException;
import android.support.annotation.MainThread;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.annotation.WorkerThread;
import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.internal.BaseGmsClient;
import com.google.android.gms.common.internal.Preconditions;
import com.google.android.gms.common.stats.ConnectionTracker;
import com.google.android.gms.common.util.VisibleForTesting;
import com.google.android.gms.internal.measurement.zzfa;
import com.google.android.gms.internal.measurement.zzfc;
import com.google.android.gms.internal.measurement.zzfh;
import com.google.android.gms.internal.measurement.zzfi;
import com.google.android.gms.internal.measurement.zzfk;
import com.google.android.gms.internal.measurement.zzgi;
import com.google.android.gms.internal.measurement.zzgn;
import com.google.android.gms.internal.measurement.zzik;
import com.google.android.gms.internal.measurement.zziz;
import com.google.android.gms.internal.measurement.zzja;
import com.google.android.gms.internal.measurement.zzjb;
import com.google.android.gms.internal.measurement.zzjc;
import com.google.android.gms.internal.measurement.zzjd;

@VisibleForTesting
public final class zziy
implements ServiceConnection,
BaseGmsClient.BaseConnectionCallbacks,
BaseGmsClient.BaseOnConnectionFailedListener {
    final /* synthetic */ zzik zzaqv;
    private volatile boolean zzarb;
    private volatile zzfh zzarc;

    protected zziy(zzik zzik2) {
        this.zzaqv = zzik2;
    }

    static /* synthetic */ boolean zza(zziy zziy2, boolean bl) {
        zziy2.zzarb = false;
        return false;
    }

    /*
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Converted monitor instructions to comments
     * Lifted jumps to return sites
     */
    @MainThread
    @Override
    public final void onConnected(@Nullable Bundle object) {
        Preconditions.checkMainThread("MeasurementServiceConnection.onConnected");
        // MONITORENTER : this
        object = (zzfa)this.zzarc.getService();
        this.zzarc = null;
        this.zzaqv.zzgh().zzc(new zzjb(this, (zzfa)object));
        return;
        catch (DeadObjectException | IllegalStateException illegalStateException) {}
        this.zzarc = null;
        this.zzarb = false;
        // MONITOREXIT : this
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @MainThread
    @Override
    public final void onConnectionFailed(@NonNull ConnectionResult connectionResult) {
        Preconditions.checkMainThread("MeasurementServiceConnection.onConnectionFailed");
        zzfi zzfi2 = this.zzaqv.zzacv.zzjy();
        if (zzfi2 != null) {
            zzfi2.zziy().zzg("Service connection failed", connectionResult);
        }
        synchronized (this) {
            this.zzarb = false;
            this.zzarc = null;
        }
        this.zzaqv.zzgh().zzc(new zzjd(this));
    }

    @MainThread
    @Override
    public final void onConnectionSuspended(int n) {
        Preconditions.checkMainThread("MeasurementServiceConnection.onConnectionSuspended");
        this.zzaqv.zzgi().zzjb().log("Service connection suspended");
        this.zzaqv.zzgh().zzc(new zzjc(this));
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Converted monitor instructions to comments
     * Lifted jumps to return sites
     */
    @MainThread
    public final void onServiceConnected(ComponentName object, IBinder iBinder) {
        block15 : {
            Preconditions.checkMainThread("MeasurementServiceConnection.onServiceConnected");
            // MONITORENTER : this
            if (iBinder == null) {
                this.zzarb = false;
                this.zzaqv.zzgi().zziv().log("Service connected with null binder");
                // MONITOREXIT : this
                return;
            }
            Object var5_6 = null;
            object = null;
            IInterface iInterface = null;
            Object componentName = object;
            try {
                String string2 = iBinder.getInterfaceDescriptor();
                componentName = object;
                if ("com.google.android.gms.measurement.internal.IMeasurementService".equals(string2)) {
                    if (iBinder == null) {
                        object = iInterface;
                    } else {
                        componentName = object;
                        iInterface = iBinder.queryLocalInterface("com.google.android.gms.measurement.internal.IMeasurementService");
                        componentName = object;
                        if (iInterface instanceof zzfa) {
                            componentName = object;
                            object = (zzfa)iInterface;
                        } else {
                            componentName = object;
                            object = new zzfc(iBinder);
                        }
                    }
                    componentName = object;
                    this.zzaqv.zzgi().zzjc().log("Bound to IMeasurementService interface");
                } else {
                    componentName = object;
                    this.zzaqv.zzgi().zziv().zzg("Got binder with a wrong descriptor", string2);
                    object = var5_6;
                }
                break block15;
            }
            catch (RemoteException remoteException) {}
            this.zzaqv.zzgi().zziv().log("Service connect failed to get IMeasurementService");
            object = componentName;
        }
        if (object != null) {
            this.zzaqv.zzgh().zzc(new zziz(this, (zzfa)object));
            // MONITOREXIT : this
            return;
        }
        this.zzarb = false;
        try {
            ConnectionTracker.getInstance().unbindService(this.zzaqv.getContext(), zzik.zza(this.zzaqv));
            return;
        }
        catch (IllegalArgumentException illegalArgumentException) {
            return;
        }
    }

    @MainThread
    public final void onServiceDisconnected(ComponentName componentName) {
        Preconditions.checkMainThread("MeasurementServiceConnection.onServiceDisconnected");
        this.zzaqv.zzgi().zzjb().log("Service disconnected");
        this.zzaqv.zzgh().zzc(new zzja(this, componentName));
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @WorkerThread
    public final void zzc(Intent intent) {
        this.zzaqv.zzab();
        Context context = this.zzaqv.getContext();
        ConnectionTracker connectionTracker = ConnectionTracker.getInstance();
        synchronized (this) {
            if (this.zzarb) {
                this.zzaqv.zzgi().zzjc().log("Connection attempt already in progress");
                return;
            }
            this.zzaqv.zzgi().zzjc().log("Using local app measurement service");
            this.zzarb = true;
            connectionTracker.bindService(context, intent, zzik.zza(this.zzaqv), 129);
            return;
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @WorkerThread
    public final void zzkt() {
        this.zzaqv.zzab();
        Context context = this.zzaqv.getContext();
        synchronized (this) {
            if (this.zzarb) {
                this.zzaqv.zzgi().zzjc().log("Connection attempt already in progress");
                return;
            }
            if (this.zzarc != null) {
                this.zzaqv.zzgi().zzjc().log("Already awaiting connection attempt");
                return;
            }
            this.zzarc = new zzfh(context, Looper.getMainLooper(), this, this);
            this.zzaqv.zzgi().zzjc().log("Connecting to remote service");
            this.zzarb = true;
            this.zzarc.checkAvailabilityAndConnect();
            return;
        }
    }
}

