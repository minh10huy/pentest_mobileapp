/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.annotation.SuppressLint
 *  android.annotation.TargetApi
 *  android.app.Activity
 *  android.app.AlertDialog
 *  android.app.AlertDialog$Builder
 *  android.app.Dialog
 *  android.app.FragmentManager
 *  android.app.Notification
 *  android.app.Notification$BigTextStyle
 *  android.app.Notification$Builder
 *  android.app.Notification$Style
 *  android.app.NotificationChannel
 *  android.app.NotificationManager
 *  android.app.PendingIntent
 *  android.content.BroadcastReceiver
 *  android.content.Context
 *  android.content.DialogInterface
 *  android.content.DialogInterface$OnCancelListener
 *  android.content.DialogInterface$OnClickListener
 *  android.content.Intent
 *  android.content.IntentFilter
 *  android.content.pm.ApplicationInfo
 *  android.content.res.Resources
 *  android.content.res.Resources$Theme
 *  android.os.Handler
 *  android.os.Looper
 *  android.os.Message
 *  android.util.AttributeSet
 *  android.util.Log
 *  android.util.TypedValue
 *  android.view.View
 *  android.widget.ProgressBar
 */
package com.google.android.gms.common;

import android.annotation.SuppressLint;
import android.annotation.TargetApi;
import android.app.Activity;
import android.app.AlertDialog;
import android.app.Dialog;
import android.app.Notification;
import android.app.NotificationChannel;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.pm.ApplicationInfo;
import android.content.res.Resources;
import android.os.Handler;
import android.os.Looper;
import android.os.Message;
import android.support.annotation.GuardedBy;
import android.support.annotation.MainThread;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.annotation.VisibleForTesting;
import android.support.v4.app.FragmentActivity;
import android.support.v4.app.FragmentManager;
import android.support.v4.app.NotificationCompat;
import android.util.AttributeSet;
import android.util.Log;
import android.util.TypedValue;
import android.view.View;
import android.widget.ProgressBar;
import com.google.android.gms.base.R;
import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.ErrorDialogFragment;
import com.google.android.gms.common.GoogleApiAvailabilityLight;
import com.google.android.gms.common.GooglePlayServicesUtilLight;
import com.google.android.gms.common.SupportErrorDialogFragment;
import com.google.android.gms.common.api.GoogleApi;
import com.google.android.gms.common.api.GoogleApiActivity;
import com.google.android.gms.common.api.internal.GoogleApiManager;
import com.google.android.gms.common.api.internal.GooglePlayServicesUpdatedReceiver;
import com.google.android.gms.common.api.internal.LifecycleFragment;
import com.google.android.gms.common.api.internal.zzbt;
import com.google.android.gms.common.api.internal.zzh;
import com.google.android.gms.common.internal.ConnectionErrorMessages;
import com.google.android.gms.common.internal.DialogRedirect;
import com.google.android.gms.common.internal.Preconditions;
import com.google.android.gms.common.util.DeviceProperties;
import com.google.android.gms.common.util.PlatformVersion;
import com.google.android.gms.tasks.Continuation;
import com.google.android.gms.tasks.Task;
import com.google.android.gms.tasks.Tasks;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Map;
import java.util.concurrent.atomic.AtomicBoolean;

public class GoogleApiAvailability
extends GoogleApiAvailabilityLight {
    public static final String GOOGLE_PLAY_SERVICES_PACKAGE = "com.google.android.gms";
    public static final int GOOGLE_PLAY_SERVICES_VERSION_CODE;
    private static final Object mLock;
    private static final GoogleApiAvailability zzas;
    @GuardedBy(value="mLock")
    private String zzat;

    static {
        mLock = new Object();
        zzas = new GoogleApiAvailability();
        GOOGLE_PLAY_SERVICES_VERSION_CODE = GoogleApiAvailabilityLight.GOOGLE_PLAY_SERVICES_VERSION_CODE;
    }

    GoogleApiAvailability() {
    }

    public static GoogleApiAvailability getInstance() {
        return zzas;
    }

    static Dialog zza(Context object, int n, DialogRedirect dialogRedirect, DialogInterface.OnCancelListener object2) {
        AlertDialog.Builder builder = null;
        if (n == 0) {
            return null;
        }
        TypedValue typedValue = new TypedValue();
        object.getTheme().resolveAttribute(16843529, typedValue, true);
        if ("Theme.Dialog.Alert".equals(object.getResources().getResourceEntryName(typedValue.resourceId))) {
            builder = new AlertDialog.Builder(object, 5);
        }
        typedValue = builder;
        if (builder == null) {
            typedValue = new AlertDialog.Builder(object);
        }
        typedValue.setMessage((CharSequence)ConnectionErrorMessages.getErrorMessage(object, n));
        if (object2 != null) {
            typedValue.setOnCancelListener(object2);
        }
        if ((object2 = ConnectionErrorMessages.getErrorDialogButtonMessage(object, n)) != null) {
            typedValue.setPositiveButton((CharSequence)object2, (DialogInterface.OnClickListener)dialogRedirect);
        }
        if ((object = ConnectionErrorMessages.getErrorTitle(object, n)) != null) {
            typedValue.setTitle((CharSequence)object);
        }
        return typedValue.create();
    }

    /*
     * Enabled aggressive block sorting
     */
    @TargetApi(value=26)
    private final String zza(Context object, NotificationManager notificationManager) {
        String string2;
        block2 : {
            block4 : {
                String string3;
                block3 : {
                    Preconditions.checkState(PlatformVersion.isAtLeastO());
                    string2 = string3 = this.zzb();
                    if (string3 != null) break block2;
                    string2 = "com.google.android.gms.availability";
                    string3 = notificationManager.getNotificationChannel("com.google.android.gms.availability");
                    object = ConnectionErrorMessages.getDefaultNotificationChannelName((Context)object);
                    if (string3 != null) break block3;
                    object = new NotificationChannel("com.google.android.gms.availability", (CharSequence)object, 4);
                    break block4;
                }
                if (object.equals(string3.getName())) break block2;
                string3.setName((CharSequence)object);
                object = string3;
            }
            notificationManager.createNotificationChannel((NotificationChannel)object);
            return "com.google.android.gms.availability";
        }
        return string2;
    }

    static void zza(Activity object, Dialog dialog, String string2, DialogInterface.OnCancelListener onCancelListener) {
        if (object instanceof FragmentActivity) {
            object = ((FragmentActivity)object).getSupportFragmentManager();
            SupportErrorDialogFragment.newInstance(dialog, onCancelListener).show((FragmentManager)object, string2);
            return;
        }
        object = object.getFragmentManager();
        ErrorDialogFragment.newInstance(dialog, onCancelListener).show((android.app.FragmentManager)object, string2);
    }

    @TargetApi(value=20)
    private final void zza(Context context, int n, String string2, PendingIntent object) {
        if (n == 18) {
            this.zza(context);
            return;
        }
        if (object == null) {
            if (n == 6) {
                Log.w((String)"GoogleApiAvailability", (String)"Missing resolution for ConnectionResult.RESOLUTION_REQUIRED. Call GoogleApiAvailability#showErrorNotification(Context, ConnectionResult) instead.");
            }
            return;
        }
        String string3 = ConnectionErrorMessages.getErrorNotificationTitle(context, n);
        String string4 = ConnectionErrorMessages.getErrorNotificationMessage(context, n);
        Resources resources = context.getResources();
        NotificationManager notificationManager = (NotificationManager)context.getSystemService("notification");
        if (DeviceProperties.isWearable(context)) {
            Preconditions.checkState(PlatformVersion.isAtLeastKitKatWatch());
            string3 = new Notification.Builder(context).setSmallIcon(context.getApplicationInfo().icon).setPriority(2).setAutoCancel(true).setContentTitle((CharSequence)string3).setStyle((Notification.Style)new Notification.BigTextStyle().bigText((CharSequence)string4));
            if (DeviceProperties.isWearableWithoutPlayStore(context)) {
                string3.addAction(R.drawable.common_full_open_on_phone, (CharSequence)resources.getString(R.string.common_open_on_phone), (PendingIntent)object);
            } else {
                string3.setContentIntent((PendingIntent)object);
            }
            if (PlatformVersion.isAtLeastO() && PlatformVersion.isAtLeastO()) {
                string3.setChannelId(this.zza(context, notificationManager));
            }
            context = string3.build();
        } else {
            object = new NotificationCompat.Builder(context).setSmallIcon(17301642).setTicker(resources.getString(R.string.common_google_play_services_notification_ticker)).setWhen(System.currentTimeMillis()).setAutoCancel(true).setContentIntent((PendingIntent)object).setContentTitle(string3).setContentText(string4).setLocalOnly(true).setStyle(new NotificationCompat.BigTextStyle().bigText(string4));
            if (PlatformVersion.isAtLeastO() && PlatformVersion.isAtLeastO()) {
                object.setChannelId(this.zza(context, notificationManager));
            }
            context = object.build();
        }
        switch (n) {
            default: {
                n = 39789;
                break;
            }
            case 1: 
            case 2: 
            case 3: {
                n = 10436;
                GooglePlayServicesUtilLight.zzbt.set(false);
            }
        }
        if (string2 == null) {
            notificationManager.notify(n, (Notification)context);
            return;
        }
        notificationManager.notify(string2, n, (Notification)context);
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @VisibleForTesting(otherwise=2)
    private final String zzb() {
        Object object = mLock;
        synchronized (object) {
            return this.zzat;
        }
    }

    public /* varargs */ Task<Void> checkApiAvailability(GoogleApi<?> googleApi, GoogleApi<?> ... arrgoogleApi) {
        return this.checkApiAvailabilityAndPackages(googleApi, arrgoogleApi).continueWith(new com.google.android.gms.common.zza(this));
    }

    public /* varargs */ Task<Map<zzh<?>, String>> checkApiAvailabilityAndPackages(GoogleApi<?> googleApi, GoogleApi<?> ... arrgoogleApi) {
        Preconditions.checkNotNull(googleApi, "Requested API must not be null.");
        int n = arrgoogleApi.length;
        for (int i = 0; i < n; ++i) {
            Preconditions.checkNotNull(arrgoogleApi[i], "Requested API must not be null.");
        }
        ArrayList arrayList = new ArrayList(arrgoogleApi.length + 1);
        arrayList.add(googleApi);
        arrayList.addAll(Arrays.asList(arrgoogleApi));
        return GoogleApiManager.zzbf().zza(arrayList);
    }

    @Override
    public int getApkVersion(Context context) {
        return super.getApkVersion(context);
    }

    @Override
    public int getClientVersion(Context context) {
        return super.getClientVersion(context);
    }

    public Dialog getErrorDialog(Activity activity, int n, int n2) {
        return this.getErrorDialog(activity, n, n2, null);
    }

    public Dialog getErrorDialog(Activity activity, int n, int n2, DialogInterface.OnCancelListener onCancelListener) {
        return GoogleApiAvailability.zza((Context)activity, n, DialogRedirect.getInstance(activity, this.getErrorResolutionIntent((Context)activity, n, "d"), n2), onCancelListener);
    }

    @Deprecated
    @Nullable
    @Override
    public Intent getErrorResolutionIntent(int n) {
        return super.getErrorResolutionIntent(n);
    }

    @Nullable
    @Override
    public Intent getErrorResolutionIntent(Context context, int n, @Nullable String string2) {
        return super.getErrorResolutionIntent(context, n, string2);
    }

    @Nullable
    @Override
    public PendingIntent getErrorResolutionPendingIntent(Context context, int n, int n2) {
        return super.getErrorResolutionPendingIntent(context, n, n2);
    }

    @Nullable
    @Override
    public PendingIntent getErrorResolutionPendingIntent(Context context, int n, int n2, @Nullable String string2) {
        return super.getErrorResolutionPendingIntent(context, n, n2, string2);
    }

    @Nullable
    public PendingIntent getErrorResolutionPendingIntent(Context context, ConnectionResult connectionResult) {
        if (connectionResult.hasResolution()) {
            return connectionResult.getResolution();
        }
        return this.getErrorResolutionPendingIntent(context, connectionResult.getErrorCode(), 0);
    }

    @Override
    public final String getErrorString(int n) {
        return super.getErrorString(n);
    }

    @Override
    public int isGooglePlayServicesAvailable(Context context) {
        return super.isGooglePlayServicesAvailable(context);
    }

    @Override
    public int isGooglePlayServicesAvailable(Context context, int n) {
        return super.isGooglePlayServicesAvailable(context, n);
    }

    @Override
    public boolean isPlayServicesPossiblyUpdating(Context context, int n) {
        return super.isPlayServicesPossiblyUpdating(context, n);
    }

    @Override
    public boolean isPlayStorePossiblyUpdating(Context context, int n) {
        return super.isPlayStorePossiblyUpdating(context, n);
    }

    @Override
    public final boolean isUserResolvableError(int n) {
        return super.isUserResolvableError(n);
    }

    @MainThread
    public Task<Void> makeGooglePlayServicesAvailable(Activity object) {
        Preconditions.checkMainThread("makeGooglePlayServicesAvailable must be called from the main thread");
        int n = this.isGooglePlayServicesAvailable((Context)object);
        if (n == 0) {
            return Tasks.forResult(null);
        }
        object = zzbt.zzd((Activity)object);
        object.zzb(new ConnectionResult(n, null), 0);
        return object.getTask();
    }

    @Nullable
    public GooglePlayServicesUpdatedReceiver registerCallbackOnUpdate(Context context, GooglePlayServicesUpdatedReceiver.Callback callback) {
        IntentFilter intentFilter = new IntentFilter("android.intent.action.PACKAGE_ADDED");
        intentFilter.addDataScheme("package");
        GooglePlayServicesUpdatedReceiver googlePlayServicesUpdatedReceiver = new GooglePlayServicesUpdatedReceiver(callback);
        context.registerReceiver((BroadcastReceiver)googlePlayServicesUpdatedReceiver, intentFilter);
        googlePlayServicesUpdatedReceiver.zzc(context);
        if (!this.isUninstalledAppPossiblyUpdating(context, GOOGLE_PLAY_SERVICES_PACKAGE)) {
            callback.zzv();
            googlePlayServicesUpdatedReceiver.unregister();
            return null;
        }
        return googlePlayServicesUpdatedReceiver;
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @TargetApi(value=26)
    public void setDefaultNotificationChannelId(@NonNull Context object, @NonNull String string2) {
        if (PlatformVersion.isAtLeastO()) {
            Preconditions.checkNotNull(((NotificationManager)object.getSystemService("notification")).getNotificationChannel(string2));
        }
        object = mLock;
        synchronized (object) {
            this.zzat = string2;
            return;
        }
    }

    public boolean showErrorDialogFragment(Activity activity, int n, int n2) {
        return this.showErrorDialogFragment(activity, n, n2, null);
    }

    public boolean showErrorDialogFragment(Activity activity, int n, int n2, DialogInterface.OnCancelListener onCancelListener) {
        Dialog dialog = this.getErrorDialog(activity, n, n2, onCancelListener);
        if (dialog == null) {
            return false;
        }
        GoogleApiAvailability.zza(activity, dialog, "GooglePlayServicesErrorDialog", onCancelListener);
        return true;
    }

    public boolean showErrorDialogFragment(Activity activity, @NonNull LifecycleFragment lifecycleFragment, int n, int n2, DialogInterface.OnCancelListener onCancelListener) {
        if ((lifecycleFragment = GoogleApiAvailability.zza((Context)activity, n, DialogRedirect.getInstance(lifecycleFragment, this.getErrorResolutionIntent((Context)activity, n, "d"), n2), onCancelListener)) == null) {
            return false;
        }
        GoogleApiAvailability.zza(activity, (Dialog)lifecycleFragment, "GooglePlayServicesErrorDialog", onCancelListener);
        return true;
    }

    public void showErrorNotification(Context context, int n) {
        this.showErrorNotification(context, n, null);
    }

    public void showErrorNotification(Context context, int n, String string2) {
        this.zza(context, n, string2, this.getErrorResolutionPendingIntent(context, n, 0, "n"));
    }

    public void showErrorNotification(Context context, ConnectionResult connectionResult) {
        PendingIntent pendingIntent = this.getErrorResolutionPendingIntent(context, connectionResult);
        this.zza(context, connectionResult.getErrorCode(), null, pendingIntent);
    }

    public Dialog showUpdatingDialog(Activity activity, DialogInterface.OnCancelListener onCancelListener) {
        ProgressBar progressBar = new ProgressBar((Context)activity, null, 16842874);
        progressBar.setIndeterminate(true);
        progressBar.setVisibility(0);
        AlertDialog.Builder builder = new AlertDialog.Builder((Context)activity);
        builder.setView((View)progressBar);
        builder.setMessage((CharSequence)ConnectionErrorMessages.getErrorMessage((Context)activity, 18));
        builder.setPositiveButton((CharSequence)"", null);
        progressBar = builder.create();
        GoogleApiAvailability.zza(activity, (Dialog)progressBar, "GooglePlayServicesUpdatingDialog", onCancelListener);
        return progressBar;
    }

    public boolean showWrappedErrorNotification(Context context, ConnectionResult connectionResult, int n) {
        PendingIntent pendingIntent = this.getErrorResolutionPendingIntent(context, connectionResult);
        if (pendingIntent != null) {
            this.zza(context, connectionResult.getErrorCode(), null, GoogleApiActivity.zza(context, pendingIntent, n));
            return true;
        }
        return false;
    }

    final void zza(Context context) {
        new zza(context).sendEmptyMessageDelayed(1, 120000L);
    }

    @SuppressLint(value={"HandlerLeak"})
    private final class zza
    extends Handler {
        private final Context zzau;

        public zza(Context context) {
            GoogleApiAvailability.this = Looper.myLooper() == null ? Looper.getMainLooper() : Looper.myLooper();
            super((Looper)GoogleApiAvailability.this);
            this.zzau = context.getApplicationContext();
        }

        public final void handleMessage(Message object) {
            if (object.what != 1) {
                int n = object.what;
                object = new StringBuilder(50);
                object.append("Don't know how to handle this message: ");
                object.append(n);
                Log.w((String)"GoogleApiAvailability", (String)object.toString());
                return;
            }
            int n = GoogleApiAvailability.this.isGooglePlayServicesAvailable(this.zzau);
            if (GoogleApiAvailability.this.isUserResolvableError(n)) {
                GoogleApiAvailability.this.showErrorNotification(this.zzau, n);
            }
        }
    }

}

