/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.os.ParcelFileDescriptor
 *  android.util.Log
 *  javax.annotation.Nullable
 */
package com.google.android.gms.common.util;

import android.os.ParcelFileDescriptor;
import android.support.annotation.WorkerThread;
import android.util.Log;
import com.google.android.gms.common.internal.Preconditions;
import java.io.ByteArrayOutputStream;
import java.io.Closeable;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.RandomAccessFile;
import java.net.ServerSocket;
import java.net.Socket;
import java.nio.channels.FileChannel;
import java.nio.channels.FileLock;
import java.nio.channels.OverlappingFileLockException;
import java.util.Arrays;
import javax.annotation.Nullable;

public final class IOUtils {
    private IOUtils() {
    }

    public static void close(@Nullable Closeable closeable, String string2, String string3) {
        if (closeable != null) {
            try {
                closeable.close();
                return;
            }
            catch (IOException iOException) {
                Log.d((String)string2, (String)string3, (Throwable)iOException);
            }
        }
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    public static void closeQuietly(@Nullable ParcelFileDescriptor parcelFileDescriptor) {
        if (parcelFileDescriptor == null) return;
        try {
            parcelFileDescriptor.close();
            return;
        }
        catch (IOException iOException) {
            return;
        }
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    public static void closeQuietly(@Nullable Closeable closeable) {
        if (closeable == null) return;
        try {
            closeable.close();
            return;
        }
        catch (IOException iOException) {
            return;
        }
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    public static void closeQuietly(@Nullable ServerSocket serverSocket) {
        if (serverSocket == null) return;
        try {
            serverSocket.close();
            return;
        }
        catch (IOException iOException) {
            return;
        }
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    public static void closeQuietly(@Nullable Socket socket) {
        if (socket == null) return;
        try {
            socket.close();
            return;
        }
        catch (IOException iOException) {
            return;
        }
    }

    public static long copyStream(InputStream inputStream, OutputStream outputStream) throws IOException {
        return IOUtils.copyStream(inputStream, outputStream, false);
    }

    public static long copyStream(InputStream inputStream, OutputStream outputStream, boolean bl) throws IOException {
        return IOUtils.copyStream(inputStream, outputStream, bl, 1024);
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public static long copyStream(InputStream inputStream, OutputStream outputStream, boolean bl, int n) throws IOException {
        long l;
        block4 : {
            byte[] arrby = new byte[n];
            l = 0L;
            try {
                int n2;
                while ((n2 = inputStream.read(arrby, 0, n)) != -1) {
                    long l2 = n2;
                    outputStream.write(arrby, 0, n2);
                    l += l2;
                }
                if (!bl) break block4;
            }
            catch (Throwable throwable) {
                if (bl) {
                    IOUtils.closeQuietly(inputStream);
                    IOUtils.closeQuietly(outputStream);
                }
                throw throwable;
            }
            IOUtils.closeQuietly(inputStream);
            IOUtils.closeQuietly(outputStream);
        }
        return l;
    }

    public static boolean isGzipByteBuffer(byte[] arrby) {
        byte by;
        if (arrby.length > 1 && ((arrby[1] & 255) << 8 | (by = arrby[0]) & 255) == 35615) {
            return true;
        }
        return false;
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    @WorkerThread
    public static void lockAndTruncateFile(File var0) throws IOException, OverlappingFileLockException {
        block15 : {
            block13 : {
                block14 : {
                    if (!var0.exists()) {
                        throw new FileNotFoundException();
                    }
                    var2_6 = null;
                    var1_8 = new RandomAccessFile((File)var0, "rw");
                    try {
                        var0 = var1_8.getChannel();
                        var3_9 = var0.lock();
                    }
                    catch (Throwable var0_2) {}
                    try {
                        var0.truncate(0L);
                        ** if (var3_9 == null || !var3_9.isValid()) goto lbl-1000
                    }
                    catch (Throwable var0_1) {
                        var2_6 = var3_9;
                    }
lbl-1000: // 1 sources:
                    {
                        var3_9.release();
                    }
lbl-1000: // 2 sources:
                    {
                        break block13;
                    }
                    break block14;
                    catch (Throwable var0_3) {
                        var1_8 = null;
                    }
                }
                if (var2_6 != null && var2_6.isValid()) {
                    var2_6.release();
                }
                break block15;
                catch (IOException var0_5) {}
            }
            IOUtils.closeQuietly(var1_8);
            return;
            catch (IOException var2_7) {}
        }
        if (var1_8 == null) throw var0_4;
        IOUtils.closeQuietly(var1_8);
        throw var0_4;
    }

    public static byte[] readInputStreamFully(InputStream inputStream) throws IOException {
        return IOUtils.readInputStreamFully(inputStream, true);
    }

    public static byte[] readInputStreamFully(InputStream inputStream, boolean bl) throws IOException {
        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        IOUtils.copyStream(inputStream, byteArrayOutputStream, bl);
        return byteArrayOutputStream.toByteArray();
    }

    public static byte[] toByteArray(File file) throws IOException {
        return new zzb(file, null).zzdd();
    }

    public static byte[] toByteArray(InputStream inputStream) throws IOException {
        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        IOUtils.zza(inputStream, byteArrayOutputStream);
        return byteArrayOutputStream.toByteArray();
    }

    private static long zza(InputStream inputStream, OutputStream outputStream) throws IOException {
        int n;
        Preconditions.checkNotNull(inputStream);
        Preconditions.checkNotNull(outputStream);
        byte[] arrby = new byte[4096];
        long l = 0L;
        while ((n = inputStream.read(arrby)) != -1) {
            outputStream.write(arrby, 0, n);
            l += (long)n;
        }
        return l;
    }

    private static byte[] zza(InputStream arrby, long l) throws IOException {
        int n;
        int n2;
        if (l > Integer.MAX_VALUE) {
            arrby = new StringBuilder(68);
            arrby.append("file is too large to fit in a byte array: ");
            arrby.append(l);
            arrby.append(" bytes");
            throw new OutOfMemoryError(arrby.toString());
        }
        if (l == 0L) {
            return IOUtils.toByteArray((InputStream)arrby);
        }
        int n3 = (int)l;
        byte[] arrby2 = new byte[n3];
        for (n2 = n3; n2 > 0; n2 -= n) {
            int n4 = n3 - n2;
            n = arrby.read(arrby2, n4, n2);
            if (n != -1) continue;
            return Arrays.copyOf(arrby2, n4);
        }
        n2 = arrby.read();
        if (n2 == -1) {
            return arrby2;
        }
        zza zza2 = new zza(null);
        zza2.write(n2);
        IOUtils.zza((InputStream)arrby, zza2);
        arrby = Arrays.copyOf(arrby2, arrby2.length + zza2.size());
        zza2.zza(arrby, arrby2.length);
        return arrby;
    }

    private static final class zza
    extends ByteArrayOutputStream {
        private zza() {
        }

        /* synthetic */ zza(com.google.android.gms.common.util.zzb zzb2) {
            this();
        }

        final void zza(byte[] arrby, int n) {
            System.arraycopy(this.buf, 0, arrby, n, this.count);
        }
    }

    private static final class zzb {
        private final File file;

        private zzb(File file) {
            this.file = Preconditions.checkNotNull(file);
        }

        /* synthetic */ zzb(File file, com.google.android.gms.common.util.zzb zzb2) {
            this(file);
        }

        /*
         * Loose catch block
         * Enabled aggressive block sorting
         * Enabled unnecessary exception pruning
         * Enabled aggressive exception aggregation
         * Lifted jumps to return sites
         */
        public final byte[] zzdd() throws IOException {
            void var1_5;
            FileInputStream fileInputStream;
            block4 : {
                byte[] arrby;
                fileInputStream = new FileInputStream(this.file);
                try {
                    arrby = IOUtils.zza(fileInputStream, fileInputStream.getChannel().size());
                }
                catch (Throwable throwable) {
                    break block4;
                }
                IOUtils.closeQuietly(fileInputStream);
                return arrby;
                catch (Throwable throwable) {
                    fileInputStream = null;
                }
            }
            IOUtils.closeQuietly(fileInputStream);
            throw var1_5;
        }
    }

}

