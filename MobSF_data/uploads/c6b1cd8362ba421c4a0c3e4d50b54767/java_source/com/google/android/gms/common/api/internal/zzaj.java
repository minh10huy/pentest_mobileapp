/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.app.PendingIntent
 *  android.content.Context
 *  android.content.Intent
 *  android.os.Bundle
 *  android.os.Looper
 *  android.util.Log
 *  javax.annotation.concurrent.GuardedBy
 */
package com.google.android.gms.common.api.internal;

import android.app.PendingIntent;
import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.os.Looper;
import android.util.Log;
import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.GoogleApiAvailabilityLight;
import com.google.android.gms.common.api.Api;
import com.google.android.gms.common.api.GoogleApiClient;
import com.google.android.gms.common.api.Result;
import com.google.android.gms.common.api.Scope;
import com.google.android.gms.common.api.internal.BaseImplementation;
import com.google.android.gms.common.api.internal.zzak;
import com.google.android.gms.common.api.internal.zzal;
import com.google.android.gms.common.api.internal.zzam;
import com.google.android.gms.common.api.internal.zzap;
import com.google.android.gms.common.api.internal.zzas;
import com.google.android.gms.common.api.internal.zzav;
import com.google.android.gms.common.api.internal.zzbc;
import com.google.android.gms.common.api.internal.zzbd;
import com.google.android.gms.common.api.internal.zzbg;
import com.google.android.gms.common.api.internal.zzbq;
import com.google.android.gms.common.internal.ClientSettings;
import com.google.android.gms.common.internal.IAccountAccessor;
import com.google.android.gms.common.internal.ResolveAccountResponse;
import com.google.android.gms.common.internal.safeparcel.AbstractSafeParcelable;
import com.google.android.gms.signin.SignInClient;
import com.google.android.gms.signin.SignInOptions;
import com.google.android.gms.signin.internal.SignInResponse;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Map;
import java.util.Queue;
import java.util.Set;
import java.util.concurrent.Future;
import java.util.concurrent.locks.Lock;
import javax.annotation.concurrent.GuardedBy;

public final class zzaj
implements zzbc {
    private final Context mContext;
    private final Api.AbstractClientBuilder<? extends SignInClient, SignInOptions> zzdh;
    private final Lock zzga;
    private final ClientSettings zzgf;
    private final Map<Api<?>, Boolean> zzgi;
    private final GoogleApiAvailabilityLight zzgk;
    private ConnectionResult zzgt;
    private final zzbd zzhf;
    private int zzhi;
    private int zzhj = 0;
    private int zzhk;
    private final Bundle zzhl = new Bundle();
    private final Set<Api.AnyClientKey> zzhm = new HashSet<Api.AnyClientKey>();
    private SignInClient zzhn;
    private boolean zzho;
    private boolean zzhp;
    private boolean zzhq;
    private IAccountAccessor zzhr;
    private boolean zzhs;
    private boolean zzht;
    private ArrayList<Future<?>> zzhu = new ArrayList();

    public zzaj(zzbd zzbd2, ClientSettings clientSettings, Map<Api<?>, Boolean> map, GoogleApiAvailabilityLight googleApiAvailabilityLight, Api.AbstractClientBuilder<? extends SignInClient, SignInOptions> abstractClientBuilder, Lock lock, Context context) {
        this.zzhf = zzbd2;
        this.zzgf = clientSettings;
        this.zzgi = map;
        this.zzgk = googleApiAvailabilityLight;
        this.zzdh = abstractClientBuilder;
        this.zzga = lock;
        this.mContext = context;
    }

    static /* synthetic */ Context zza(zzaj zzaj2) {
        return zzaj2.mContext;
    }

    static /* synthetic */ void zza(zzaj zzaj2, ConnectionResult connectionResult) {
        zzaj2.zze(connectionResult);
    }

    static /* synthetic */ void zza(zzaj zzaj2, ConnectionResult connectionResult, Api api, boolean bl) {
        zzaj2.zzb(connectionResult, api, bl);
    }

    static /* synthetic */ void zza(zzaj zzaj2, SignInResponse signInResponse) {
        zzaj2.zza(signInResponse);
    }

    @GuardedBy(value="mLock")
    private final void zza(SignInResponse abstractSafeParcelable) {
        if (!this.zze(0)) {
            return;
        }
        Object object = abstractSafeParcelable.getConnectionResult();
        if (object.isSuccess()) {
            object = abstractSafeParcelable.getResolveAccountResponse();
            abstractSafeParcelable = object.getConnectionResult();
            if (!abstractSafeParcelable.isSuccess()) {
                object = String.valueOf(abstractSafeParcelable);
                StringBuilder stringBuilder = new StringBuilder(String.valueOf(object).length() + 48);
                stringBuilder.append("Sign-in succeeded with resolve account failure: ");
                stringBuilder.append((String)object);
                Log.wtf((String)"GoogleApiClientConnecting", (String)stringBuilder.toString(), (Throwable)new Exception());
                this.zze((ConnectionResult)abstractSafeParcelable);
                return;
            }
            this.zzhq = true;
            this.zzhr = object.getAccountAccessor();
            this.zzhs = object.getSaveDefaultAccount();
            this.zzht = object.isFromCrossClientAuth();
            this.zzas();
            return;
        }
        if (this.zzd((ConnectionResult)object)) {
            this.zzau();
            this.zzas();
            return;
        }
        this.zze((ConnectionResult)object);
    }

    private final void zza(boolean bl) {
        if (this.zzhn != null) {
            if (this.zzhn.isConnected() && bl) {
                this.zzhn.clearAccountFromSessionStore();
            }
            this.zzhn.disconnect();
            this.zzhr = null;
        }
    }

    static /* synthetic */ boolean zza(zzaj zzaj2, int n) {
        return zzaj2.zze(0);
    }

    /*
     * Enabled aggressive block sorting
     */
    @GuardedBy(value="mLock")
    private final boolean zzar() {
        ConnectionResult connectionResult;
        --this.zzhk;
        if (this.zzhk > 0) {
            return false;
        }
        if (this.zzhk < 0) {
            Log.w((String)"GoogleApiClientConnecting", (String)this.zzhf.zzfq.zzbb());
            Log.wtf((String)"GoogleApiClientConnecting", (String)"GoogleApiClient received too many callbacks for the given step. Clients may be in an unexpected state; GoogleApiClient will now disconnect.", (Throwable)new Exception());
            connectionResult = new ConnectionResult(8, null);
        } else {
            if (this.zzgt == null) {
                return true;
            }
            this.zzhf.zzje = this.zzhi;
            connectionResult = this.zzgt;
        }
        this.zze(connectionResult);
        return false;
    }

    @GuardedBy(value="mLock")
    private final void zzas() {
        if (this.zzhk != 0) {
            return;
        }
        if (!this.zzhp || this.zzhq) {
            ArrayList<Api.Client> arrayList = new ArrayList<Api.Client>();
            this.zzhj = 1;
            this.zzhk = this.zzhf.zzil.size();
            for (Api.AnyClientKey<?> anyClientKey : this.zzhf.zzil.keySet()) {
                if (this.zzhf.zzjb.containsKey(anyClientKey)) {
                    if (!this.zzar()) continue;
                    this.zzat();
                    continue;
                }
                arrayList.add(this.zzhf.zzil.get(anyClientKey));
            }
            if (!arrayList.isEmpty()) {
                this.zzhu.add(zzbg.zzbe().submit(new zzap(this, arrayList)));
            }
        }
    }

    @GuardedBy(value="mLock")
    private final void zzat() {
        this.zzhf.zzbd();
        zzbg.zzbe().execute(new zzak(this));
        if (this.zzhn != null) {
            if (this.zzhs) {
                this.zzhn.saveDefaultAccount(this.zzhr, this.zzht);
            }
            this.zza(false);
        }
        for (Api.AnyClientKey<?> anyClientKey : this.zzhf.zzjb.keySet()) {
            this.zzhf.zzil.get(anyClientKey).disconnect();
        }
        Object object = this.zzhl.isEmpty() ? null : this.zzhl;
        this.zzhf.zzjf.zzb((Bundle)object);
    }

    @GuardedBy(value="mLock")
    private final void zzau() {
        this.zzhp = false;
        this.zzhf.zzfq.zzim = Collections.emptySet();
        for (Api.AnyClientKey anyClientKey : this.zzhm) {
            if (this.zzhf.zzjb.containsKey(anyClientKey)) continue;
            this.zzhf.zzjb.put(anyClientKey, new ConnectionResult(17, null));
        }
    }

    private final void zzav() {
        ArrayList<Future<?>> arrayList = this.zzhu;
        int n = arrayList.size();
        for (int i = 0; i < n; ++i) {
            Future<?> future = arrayList.get(i);
            future.cancel(true);
        }
        this.zzhu.clear();
    }

    private final Set<Scope> zzaw() {
        if (this.zzgf == null) {
            return Collections.emptySet();
        }
        HashSet<Scope> hashSet = new HashSet<Scope>(this.zzgf.getRequiredScopes());
        Map<Api<?>, ClientSettings.OptionalApiSettings> map = this.zzgf.getOptionalApiSettings();
        for (Api<?> api : map.keySet()) {
            if (this.zzhf.zzjb.containsKey(api.getClientKey())) continue;
            hashSet.addAll(map.get(api).mScopes);
        }
        return hashSet;
    }

    static /* synthetic */ GoogleApiAvailabilityLight zzb(zzaj zzaj2) {
        return zzaj2.zzgk;
    }

    /*
     * Enabled aggressive block sorting
     */
    @GuardedBy(value="mLock")
    private final void zzb(ConnectionResult connectionResult, Api<?> api, boolean bl) {
        int n;
        boolean bl2;
        block5 : {
            block6 : {
                boolean bl3;
                block4 : {
                    n = api.zzj().getPriority();
                    bl3 = false;
                    if (!bl) break block4;
                    boolean bl4 = connectionResult.hasResolution() || this.zzgk.getErrorResolutionIntent(connectionResult.getErrorCode()) != null;
                    bl2 = bl3;
                    if (!bl4) break block5;
                }
                if (this.zzgt == null) break block6;
                bl2 = bl3;
                if (n >= this.zzhi) break block5;
            }
            bl2 = true;
        }
        if (bl2) {
            this.zzgt = connectionResult;
            this.zzhi = n;
        }
        this.zzhf.zzjb.put(api.getClientKey(), connectionResult);
    }

    static /* synthetic */ boolean zzb(zzaj zzaj2, ConnectionResult connectionResult) {
        return zzaj2.zzd(connectionResult);
    }

    static /* synthetic */ Lock zzc(zzaj zzaj2) {
        return zzaj2.zzga;
    }

    static /* synthetic */ zzbd zzd(zzaj zzaj2) {
        return zzaj2.zzhf;
    }

    @GuardedBy(value="mLock")
    private final boolean zzd(ConnectionResult connectionResult) {
        if (this.zzho && !connectionResult.hasResolution()) {
            return true;
        }
        return false;
    }

    @GuardedBy(value="mLock")
    private final void zze(ConnectionResult connectionResult) {
        this.zzav();
        this.zza(connectionResult.hasResolution() ^ true);
        this.zzhf.zzf(connectionResult);
        this.zzhf.zzjf.zzc(connectionResult);
    }

    @GuardedBy(value="mLock")
    private final boolean zze(int n) {
        if (this.zzhj != n) {
            Log.w((String)"GoogleApiClientConnecting", (String)this.zzhf.zzfq.zzbb());
            CharSequence charSequence = String.valueOf(this);
            CharSequence charSequence2 = new StringBuilder(String.valueOf(charSequence).length() + 23);
            charSequence2.append("Unexpected callback in ");
            charSequence2.append((String)charSequence);
            Log.w((String)"GoogleApiClientConnecting", (String)charSequence2.toString());
            int n2 = this.zzhk;
            charSequence = new StringBuilder(33);
            charSequence.append("mRemainingConnections=");
            charSequence.append(n2);
            Log.w((String)"GoogleApiClientConnecting", (String)charSequence.toString());
            charSequence = zzaj.zzf(this.zzhj);
            charSequence2 = zzaj.zzf(n);
            StringBuilder stringBuilder = new StringBuilder(String.valueOf(charSequence).length() + 70 + String.valueOf(charSequence2).length());
            stringBuilder.append("GoogleApiClient connecting is in step ");
            stringBuilder.append((String)charSequence);
            stringBuilder.append(" but received callback for step ");
            stringBuilder.append((String)charSequence2);
            Log.wtf((String)"GoogleApiClientConnecting", (String)stringBuilder.toString(), (Throwable)new Exception());
            this.zze(new ConnectionResult(8, null));
            return false;
        }
        return true;
    }

    static /* synthetic */ boolean zze(zzaj zzaj2) {
        return zzaj2.zzhp;
    }

    static /* synthetic */ SignInClient zzf(zzaj zzaj2) {
        return zzaj2.zzhn;
    }

    private static String zzf(int n) {
        switch (n) {
            default: {
                return "UNKNOWN";
            }
            case 1: {
                return "STEP_GETTING_REMOTE_SERVICE";
            }
            case 0: 
        }
        return "STEP_SERVICE_BINDINGS_AND_SIGN_IN";
    }

    static /* synthetic */ Set zzg(zzaj zzaj2) {
        return zzaj2.zzaw();
    }

    static /* synthetic */ IAccountAccessor zzh(zzaj zzaj2) {
        return zzaj2.zzhr;
    }

    static /* synthetic */ void zzi(zzaj zzaj2) {
        zzaj2.zzau();
    }

    static /* synthetic */ void zzj(zzaj zzaj2) {
        zzaj2.zzas();
    }

    static /* synthetic */ boolean zzk(zzaj zzaj2) {
        return zzaj2.zzar();
    }

    @Override
    public final void begin() {
        this.zzhf.zzjb.clear();
        this.zzhp = false;
        this.zzgt = null;
        this.zzhj = 0;
        this.zzho = true;
        this.zzhq = false;
        this.zzhs = false;
        HashMap<Api.Client, zzal> hashMap = new HashMap<Api.Client, zzal>();
        Object object = this.zzgi.keySet().iterator();
        boolean bl = false;
        while (object.hasNext()) {
            Api<?> api = object.next();
            Api.Client client = this.zzhf.zzil.get(api.getClientKey());
            boolean bl2 = api.zzj().getPriority() == 1;
            bl |= bl2;
            boolean bl3 = this.zzgi.get(api);
            if (client.requiresSignIn()) {
                this.zzhp = true;
                if (bl3) {
                    this.zzhm.add(api.getClientKey());
                } else {
                    this.zzho = false;
                }
            }
            hashMap.put(client, new zzal(this, api, bl3));
        }
        if (bl) {
            this.zzhp = false;
        }
        if (this.zzhp) {
            this.zzgf.setClientSessionId(System.identityHashCode(this.zzhf.zzfq));
            object = new zzas(this, null);
            this.zzhn = this.zzdh.buildClient(this.mContext, this.zzhf.zzfq.getLooper(), this.zzgf, this.zzgf.getSignInOptions(), (GoogleApiClient.ConnectionCallbacks)object, (GoogleApiClient.OnConnectionFailedListener)object);
        }
        this.zzhk = this.zzhf.zzil.size();
        this.zzhu.add(zzbg.zzbe().submit(new zzam(this, hashMap)));
    }

    @Override
    public final void connect() {
    }

    @Override
    public final boolean disconnect() {
        this.zzav();
        this.zza(true);
        this.zzhf.zzf(null);
        return true;
    }

    @Override
    public final <A extends Api.AnyClient, R extends Result, T extends BaseImplementation.ApiMethodImpl<R, A>> T enqueue(T t) {
        this.zzhf.zzfq.zzgo.add((BaseImplementation.ApiMethodImpl<?, ?>)t);
        return t;
    }

    @Override
    public final <A extends Api.AnyClient, T extends BaseImplementation.ApiMethodImpl<? extends Result, A>> T execute(T t) {
        throw new IllegalStateException("GoogleApiClient is not connected yet.");
    }

    @GuardedBy(value="mLock")
    @Override
    public final void onConnected(Bundle bundle) {
        if (!this.zze(1)) {
            return;
        }
        if (bundle != null) {
            this.zzhl.putAll(bundle);
        }
        if (this.zzar()) {
            this.zzat();
        }
    }

    @GuardedBy(value="mLock")
    @Override
    public final void onConnectionSuspended(int n) {
        this.zze(new ConnectionResult(8, null));
    }

    @GuardedBy(value="mLock")
    @Override
    public final void zza(ConnectionResult connectionResult, Api<?> api, boolean bl) {
        if (!this.zze(1)) {
            return;
        }
        this.zzb(connectionResult, api, bl);
        if (this.zzar()) {
            this.zzat();
        }
    }
}

