/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.os.Looper
 *  android.util.Log
 *  javax.annotation.concurrent.GuardedBy
 */
package com.google.android.gms.common.api.internal;

import android.os.Looper;
import android.support.annotation.NonNull;
import android.util.Log;
import com.google.android.gms.common.api.GoogleApiClient;
import com.google.android.gms.common.api.PendingResult;
import com.google.android.gms.common.api.Releasable;
import com.google.android.gms.common.api.Result;
import com.google.android.gms.common.api.ResultCallback;
import com.google.android.gms.common.api.ResultCallbacks;
import com.google.android.gms.common.api.ResultTransform;
import com.google.android.gms.common.api.Status;
import com.google.android.gms.common.api.TransformedResult;
import com.google.android.gms.common.api.internal.zzbw;
import com.google.android.gms.common.api.internal.zzci;
import com.google.android.gms.common.api.internal.zzcj;
import com.google.android.gms.common.internal.Preconditions;
import java.lang.ref.WeakReference;
import java.util.concurrent.Future;
import javax.annotation.concurrent.GuardedBy;

public final class zzch<R extends Result>
extends TransformedResult<R>
implements ResultCallback<R> {
    private final Object zzfa = new Object();
    private final WeakReference<GoogleApiClient> zzfc;
    private ResultTransform<? super R, ? extends Result> zzmd = null;
    private zzch<? extends Result> zzme = null;
    private volatile ResultCallbacks<? super R> zzmf = null;
    private PendingResult<R> zzmg = null;
    private Status zzmh = null;
    private final zzcj zzmi;
    private boolean zzmj = false;

    public zzch(WeakReference<GoogleApiClient> object) {
        Preconditions.checkNotNull(object, "GoogleApiClient reference must not be null");
        this.zzfc = object;
        object = this.zzfc.get();
        object = object != null ? object.getLooper() : Looper.getMainLooper();
        this.zzmi = new zzcj(this, (Looper)object);
    }

    static /* synthetic */ void zza(zzch zzch2, Result result) {
        zzch.zzb(result);
    }

    static /* synthetic */ void zza(zzch zzch2, Status status) {
        zzch2.zzd(status);
    }

    private static void zzb(Result object) {
        if (object instanceof Releasable) {
            try {
                ((Releasable)object).release();
                return;
            }
            catch (RuntimeException runtimeException) {
                object = String.valueOf(object);
                StringBuilder stringBuilder = new StringBuilder(String.valueOf(object).length() + 18);
                stringBuilder.append("Unable to release ");
                stringBuilder.append((String)object);
                Log.w((String)"TransformedResultImpl", (String)stringBuilder.toString(), (Throwable)runtimeException);
            }
        }
    }

    static /* synthetic */ ResultTransform zzc(zzch zzch2) {
        return zzch2.zzmd;
    }

    @GuardedBy(value="mSyncToken")
    private final void zzcb() {
        if (this.zzmd == null && this.zzmf == null) {
            return;
        }
        GoogleApiClient googleApiClient = this.zzfc.get();
        if (!this.zzmj && this.zzmd != null && googleApiClient != null) {
            googleApiClient.zza(this);
            this.zzmj = true;
        }
        if (this.zzmh != null) {
            this.zze(this.zzmh);
            return;
        }
        if (this.zzmg != null) {
            this.zzmg.setResultCallback(this);
        }
    }

    @GuardedBy(value="mSyncToken")
    private final boolean zzcd() {
        GoogleApiClient googleApiClient = this.zzfc.get();
        if (this.zzmf != null && googleApiClient != null) {
            return true;
        }
        return false;
    }

    static /* synthetic */ zzcj zzd(zzch zzch2) {
        return zzch2.zzmi;
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    private final void zzd(Status status) {
        Object object = this.zzfa;
        synchronized (object) {
            this.zzmh = status;
            this.zze(this.zzmh);
            return;
        }
    }

    static /* synthetic */ WeakReference zze(zzch zzch2) {
        return zzch2.zzfc;
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    private final void zze(Status status) {
        Object object = this.zzfa;
        synchronized (object) {
            if (this.zzmd != null) {
                status = this.zzmd.onFailure(status);
                Preconditions.checkNotNull(status, "onFailure must not return null");
                zzch.super.zzd(status);
            } else if (this.zzcd()) {
                this.zzmf.onFailure(status);
            }
            return;
        }
    }

    static /* synthetic */ Object zzf(zzch zzch2) {
        return zzch2.zzfa;
    }

    static /* synthetic */ zzch zzg(zzch zzch2) {
        return zzch2.zzme;
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @Override
    public final void andFinally(@NonNull ResultCallbacks<? super R> resultCallbacks) {
        Object object = this.zzfa;
        synchronized (object) {
            ResultCallbacks<? super R> resultCallbacks2 = this.zzmf;
            boolean bl = false;
            boolean bl2 = resultCallbacks2 == null;
            Preconditions.checkState(bl2, "Cannot call andFinally() twice.");
            bl2 = bl;
            if (this.zzmd == null) {
                bl2 = true;
            }
            Preconditions.checkState(bl2, "Cannot call then() and andFinally() on the same TransformedResult.");
            this.zzmf = resultCallbacks;
            this.zzcb();
            return;
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @Override
    public final void onResult(R r) {
        Object object = this.zzfa;
        synchronized (object) {
            if (r.getStatus().isSuccess()) {
                if (this.zzmd != null) {
                    zzbw.zzbe().submit(new zzci(this, (Result)r));
                } else if (this.zzcd()) {
                    this.zzmf.onSuccess(r);
                }
            } else {
                this.zzd(r.getStatus());
                zzch.zzb(r);
            }
            return;
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @NonNull
    @Override
    public final <S extends Result> TransformedResult<S> then(@NonNull ResultTransform<? super R, ? extends S> object) {
        Object object2 = this.zzfa;
        synchronized (object2) {
            ResultTransform<? super R, ? extends Result> resultTransform = this.zzmd;
            boolean bl = false;
            boolean bl2 = resultTransform == null;
            Preconditions.checkState(bl2, "Cannot call then() twice.");
            bl2 = bl;
            if (this.zzmf == null) {
                bl2 = true;
            }
            Preconditions.checkState(bl2, "Cannot call then() and andFinally() on the same TransformedResult.");
            this.zzmd = object;
            this.zzme = object = new zzch<R>(this.zzfc);
            this.zzcb();
            return object;
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public final void zza(PendingResult<?> pendingResult) {
        Object object = this.zzfa;
        synchronized (object) {
            this.zzmg = pendingResult;
            this.zzcb();
            return;
        }
    }

    final void zzcc() {
        this.zzmf = null;
    }
}

