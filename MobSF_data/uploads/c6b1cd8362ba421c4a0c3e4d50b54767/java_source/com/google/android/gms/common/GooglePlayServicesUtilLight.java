/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.annotation.TargetApi
 *  android.app.NotificationManager
 *  android.app.PendingIntent
 *  android.content.ContentResolver
 *  android.content.Context
 *  android.content.Intent
 *  android.content.pm.ApplicationInfo
 *  android.content.pm.PackageInfo
 *  android.content.pm.PackageInstaller
 *  android.content.pm.PackageInstaller$SessionInfo
 *  android.content.pm.PackageManager
 *  android.content.pm.PackageManager$NameNotFoundException
 *  android.content.pm.Signature
 *  android.content.res.Resources
 *  android.net.Uri
 *  android.net.Uri$Builder
 *  android.os.Bundle
 *  android.os.UserManager
 *  android.util.Log
 */
package com.google.android.gms.common;

import android.annotation.TargetApi;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.content.ContentResolver;
import android.content.Context;
import android.content.Intent;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageInfo;
import android.content.pm.PackageInstaller;
import android.content.pm.PackageManager;
import android.content.pm.Signature;
import android.content.res.Resources;
import android.net.Uri;
import android.os.Bundle;
import android.os.UserManager;
import android.util.Log;
import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.GoogleApiAvailabilityLight;
import com.google.android.gms.common.GooglePlayServicesNotAvailableException;
import com.google.android.gms.common.GooglePlayServicesRepairableException;
import com.google.android.gms.common.GoogleSignatureVerifier;
import com.google.android.gms.common.R;
import com.google.android.gms.common.internal.MetadataValueReader;
import com.google.android.gms.common.internal.Preconditions;
import com.google.android.gms.common.util.ClientLibraryUtils;
import com.google.android.gms.common.util.DeviceProperties;
import com.google.android.gms.common.util.GmsVersionParser;
import com.google.android.gms.common.util.PlatformVersion;
import com.google.android.gms.common.util.UidVerifier;
import com.google.android.gms.common.util.VisibleForTesting;
import com.google.android.gms.common.wrappers.Wrappers;
import java.io.InputStream;
import java.util.Iterator;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.Scanner;
import java.util.concurrent.atomic.AtomicBoolean;

public class GooglePlayServicesUtilLight {
    public static final String FEATURE_SIDEWINDER = "cn.google";
    public static final String GOOGLE_PLAY_GAMES_PACKAGE = "com.google.android.play.games";
    @Deprecated
    public static final String GOOGLE_PLAY_SERVICES_PACKAGE = "com.google.android.gms";
    @Deprecated
    public static final int GOOGLE_PLAY_SERVICES_VERSION_CODE = 12451000;
    public static final String GOOGLE_PLAY_STORE_GAMES_URI_STRING = "http://play.google.com/store/apps/category/GAME";
    public static final String GOOGLE_PLAY_STORE_PACKAGE = "com.android.vending";
    public static final String GOOGLE_PLAY_STORE_URI_STRING = "http://play.google.com/store/apps/";
    public static final boolean HONOR_DEBUG_CERTIFICATES = false;
    public static final String KEY_METADATA_GOOGLE_PLAY_SERVICES_VERSION = "com.google.android.gms.version";
    public static final int MAX_ATTEMPTS_NO_SUCH_ALGORITHM = 2;
    @VisibleForTesting
    public static boolean sIsTestMode = false;
    @VisibleForTesting
    public static boolean sTestIsUserBuild = false;
    private static boolean zzbr = false;
    @VisibleForTesting
    private static boolean zzbs = false;
    @VisibleForTesting
    static final AtomicBoolean zzbt = new AtomicBoolean();
    private static final AtomicBoolean zzbu = new AtomicBoolean();

    GooglePlayServicesUtilLight() {
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    @Deprecated
    public static void cancelAvailabilityErrorNotifications(Context context) {
        if (zzbt.getAndSet(true)) {
            return;
        }
        try {
            context = (NotificationManager)context.getSystemService("notification");
            if (context == null) return;
        }
        catch (SecurityException securityException) {
            return;
        }
        context.cancel(10436);
    }

    public static void enableUsingApkIndependentContext() {
        zzbu.set(true);
    }

    @Deprecated
    public static void ensurePlayServicesAvailable(Context context) throws GooglePlayServicesRepairableException, GooglePlayServicesNotAvailableException {
        GooglePlayServicesUtilLight.ensurePlayServicesAvailable(context, GOOGLE_PLAY_SERVICES_VERSION_CODE);
    }

    @Deprecated
    public static void ensurePlayServicesAvailable(Context context, int n) throws GooglePlayServicesRepairableException, GooglePlayServicesNotAvailableException {
        n = GoogleApiAvailabilityLight.getInstance().isGooglePlayServicesAvailable(context, n);
        if (n != 0) {
            context = GoogleApiAvailabilityLight.getInstance().getErrorResolutionIntent(context, n, "e");
            StringBuilder stringBuilder = new StringBuilder(57);
            stringBuilder.append("GooglePlayServices not available due to error ");
            stringBuilder.append(n);
            Log.e((String)"GooglePlayServicesUtil", (String)stringBuilder.toString());
            if (context == null) {
                throw new GooglePlayServicesNotAvailableException(n);
            }
            throw new GooglePlayServicesRepairableException(n, "Google Play Services not available", (Intent)context);
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @Deprecated
    public static int getApkVersion(Context context) {
        try {
            context = context.getPackageManager().getPackageInfo(GOOGLE_PLAY_SERVICES_PACKAGE, 0);
            return context.versionCode;
        }
        catch (PackageManager.NameNotFoundException nameNotFoundException) {}
        Log.w((String)"GooglePlayServicesUtil", (String)"Google Play services is missing.");
        return 0;
    }

    @Deprecated
    public static int getClientVersion(Context context) {
        Preconditions.checkState(true);
        return ClientLibraryUtils.getClientVersion(context, context.getPackageName());
    }

    @Deprecated
    public static PendingIntent getErrorPendingIntent(int n, Context context, int n2) {
        return GoogleApiAvailabilityLight.getInstance().getErrorResolutionPendingIntent(context, n, n2);
    }

    @Deprecated
    @VisibleForTesting
    public static String getErrorString(int n) {
        return ConnectionResult.zza(n);
    }

    @Deprecated
    public static Intent getGooglePlayServicesAvailabilityRecoveryIntent(int n) {
        return GoogleApiAvailabilityLight.getInstance().getErrorResolutionIntent(null, n, null);
    }

    /*
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    @Deprecated
    public static String getOpenSourceSoftwareLicenseInfo(Context object) {
        Uri uri = new Uri.Builder().scheme("android.resource").authority(GOOGLE_PLAY_SERVICES_PACKAGE).appendPath("raw").appendPath("oss_notice").build();
        try {
            object = object.getContentResolver().openInputStream(uri);
        }
        catch (Exception exception) {
            return null;
        }
        String string2 = new Scanner((InputStream)object).useDelimiter("\\A").next();
        if (object == null) return string2;
        object.close();
        return string2;
        catch (Throwable throwable) {
            if (object == null) throw throwable;
            object.close();
            throw throwable;
        }
        catch (NoSuchElementException noSuchElementException) {}
        if (object == null) return null;
        object.close();
        return null;
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    public static Context getRemoteContext(Context context) {
        try {
            return context.createPackageContext(GOOGLE_PLAY_SERVICES_PACKAGE, 3);
        }
        catch (PackageManager.NameNotFoundException nameNotFoundException) {
            return null;
        }
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    public static Resources getRemoteResource(Context context) {
        try {
            return context.getPackageManager().getResourcesForApplication(GOOGLE_PLAY_SERVICES_PACKAGE);
        }
        catch (PackageManager.NameNotFoundException nameNotFoundException) {
            return null;
        }
    }

    public static boolean honorsDebugCertificates(Context context) {
        if (!GooglePlayServicesUtilLight.isTestKeysBuild(context) && GooglePlayServicesUtilLight.isUserBuildDevice()) {
            return false;
        }
        return true;
    }

    @Deprecated
    public static int isGooglePlayServicesAvailable(Context context) {
        return GooglePlayServicesUtilLight.isGooglePlayServicesAvailable(context, GOOGLE_PLAY_SERVICES_VERSION_CODE);
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @Deprecated
    public static int isGooglePlayServicesAvailable(Context object, int n) {
        boolean bl;
        block6 : {
            try {
                object.getResources().getString(R.string.common_google_play_services_unknown_issue);
                break block6;
            }
            catch (Throwable throwable) {}
            Log.e((String)"GooglePlayServicesUtil", (String)"The Google Play services resources were not found. Check your project configuration to ensure that the resources are included.");
        }
        if (!GOOGLE_PLAY_SERVICES_PACKAGE.equals(object.getPackageName()) && !zzbu.get()) {
            int n2 = MetadataValueReader.getGooglePlayServicesVersion((Context)object);
            if (n2 == 0) {
                throw new IllegalStateException("A required meta-data tag in your app's AndroidManifest.xml does not exist.  You must have the following declaration within the <application> element:     <meta-data android:name=\"com.google.android.gms.version\" android:value=\"@integer/google_play_services_version\" />");
            }
            if (n2 != GOOGLE_PLAY_SERVICES_VERSION_CODE) {
                n = GOOGLE_PLAY_SERVICES_VERSION_CODE;
                object = new StringBuilder(320);
                object.append("The meta-data tag in your app's AndroidManifest.xml does not have the right value.  Expected ");
                object.append(n);
                object.append(" but found ");
                object.append(n2);
                object.append(".  You must have the following declaration within the <application> element:     <meta-data android:name=\"com.google.android.gms.version\" android:value=\"@integer/google_play_services_version\" />");
                throw new IllegalStateException(object.toString());
            }
        }
        if (!DeviceProperties.isWearableWithoutPlayStore((Context)object) && !DeviceProperties.isIoT((Context)object)) {
            bl = true;
            return GooglePlayServicesUtilLight.zza((Context)object, bl, n);
        }
        bl = false;
        return GooglePlayServicesUtilLight.zza((Context)object, bl, n);
    }

    @Deprecated
    public static boolean isGooglePlayServicesUid(Context context, int n) {
        return UidVerifier.isGooglePlayServicesUid(context, n);
    }

    @Deprecated
    public static boolean isPlayServicesPossiblyUpdating(Context context, int n) {
        if (n == 18) {
            return true;
        }
        if (n == 1) {
            return GooglePlayServicesUtilLight.isUninstalledAppPossiblyUpdating(context, GOOGLE_PLAY_SERVICES_PACKAGE);
        }
        return false;
    }

    @Deprecated
    public static boolean isPlayStorePossiblyUpdating(Context context, int n) {
        if (n == 9) {
            return GooglePlayServicesUtilLight.isUninstalledAppPossiblyUpdating(context, GOOGLE_PLAY_STORE_PACKAGE);
        }
        return false;
    }

    @TargetApi(value=18)
    public static boolean isRestrictedUserProfile(Context context) {
        if (PlatformVersion.isAtLeastJellyBeanMR2() && (context = ((UserManager)context.getSystemService("user")).getApplicationRestrictions(context.getPackageName())) != null && "true".equals(context.getString("restricted_profile"))) {
            return true;
        }
        return false;
    }

    @Deprecated
    @VisibleForTesting
    public static boolean isSidewinderDevice(Context context) {
        return DeviceProperties.isSidewinder(context);
    }

    /*
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    public static boolean isTestKeysBuild(Context object) {
        Throwable throwable22222;
        block5 : {
            block4 : {
                if (zzbs) return zzbr;
                try {
                    PackageInfo packageInfo = Wrappers.packageManager((Context)object).getPackageInfo(GOOGLE_PLAY_SERVICES_PACKAGE, 64);
                    object = GoogleSignatureVerifier.getInstance((Context)object);
                    zzbr = packageInfo != null && !object.isGooglePublicSignedPackage(packageInfo, false) && object.isGooglePublicSignedPackage(packageInfo, true);
                    break block4;
                }
                catch (Throwable throwable22222) {
                    break block5;
                }
                catch (PackageManager.NameNotFoundException nameNotFoundException) {
                    Log.w((String)"GooglePlayServicesUtil", (String)"Cannot find Google Play services package name.", (Throwable)nameNotFoundException);
                }
            }
            zzbs = true;
            return zzbr;
        }
        zzbs = true;
        throw throwable22222;
    }

    /*
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    @TargetApi(value=21)
    static boolean isUninstalledAppPossiblyUpdating(Context context, String string2) {
        Object object;
        boolean bl = string2.equals(GOOGLE_PLAY_SERVICES_PACKAGE);
        if (PlatformVersion.isAtLeastLollipop()) {
            object = context.getPackageManager().getPackageInstaller().getAllSessions();
            object = object.iterator();
            while (object.hasNext()) {
                if (!string2.equals(((PackageInstaller.SessionInfo)object.next()).getAppPackageName())) continue;
                return true;
            }
        }
        object = context.getPackageManager();
        try {
            string2 = object.getApplicationInfo(string2, 8192);
            if (bl) {
                return string2.enabled;
            }
            if (!string2.enabled) return false;
            bl = GooglePlayServicesUtilLight.isRestrictedUserProfile(context);
            if (bl) return false;
            return true;
        }
        catch (PackageManager.NameNotFoundException nameNotFoundException) {
            return false;
        }
        catch (Exception exception) {
            return false;
        }
    }

    @Deprecated
    public static boolean isUserBuildDevice() {
        return DeviceProperties.isUserBuild();
    }

    @Deprecated
    public static boolean isUserRecoverableError(int n) {
        if (n != 9) {
            switch (n) {
                default: {
                    return false;
                }
                case 1: 
                case 2: 
                case 3: 
            }
        }
        return true;
    }

    @Deprecated
    @TargetApi(value=19)
    public static boolean uidHasPackageName(Context context, int n, String string2) {
        return UidVerifier.uidHasPackageName(context, n, string2);
    }

    /*
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    @VisibleForTesting
    private static int zza(Context object, boolean bl, int n) {
        PackageInfo packageInfo;
        boolean bl2 = n >= 0;
        Preconditions.checkArgument(bl2);
        PackageManager packageManager = object.getPackageManager();
        PackageInfo packageInfo2 = null;
        if (bl) {
            packageInfo2 = packageManager.getPackageInfo(GOOGLE_PLAY_STORE_PACKAGE, 8256);
        }
        try {
            packageInfo = packageManager.getPackageInfo(GOOGLE_PLAY_SERVICES_PACKAGE, 64);
        }
        catch (PackageManager.NameNotFoundException nameNotFoundException) {}
        object = GoogleSignatureVerifier.getInstance((Context)object);
        if (!object.isGooglePublicSignedPackage(packageInfo, true)) {
            object = "Google Play services signature invalid.";
        } else if (!(!bl || object.isGooglePublicSignedPackage(packageInfo2, true) && packageInfo2.signatures[0].equals((Object)packageInfo.signatures[0]))) {
            object = "Google Play Store signature invalid.";
        } else {
            if (GmsVersionParser.parseBuildVersion(packageInfo.versionCode) < GmsVersionParser.parseBuildVersion(n)) {
                int n2 = packageInfo.versionCode;
                object = new StringBuilder(77);
                object.append("Google Play services out of date.  Requires ");
                object.append(n);
                object.append(" but found ");
                object.append(n2);
                Log.w((String)"GooglePlayServicesUtil", (String)object.toString());
                return 2;
            }
            packageInfo2 = packageInfo.applicationInfo;
            object = packageInfo2;
            if (packageInfo2 == null) {
                try {
                    object = packageManager.getApplicationInfo(GOOGLE_PLAY_SERVICES_PACKAGE, 0);
                }
                catch (PackageManager.NameNotFoundException nameNotFoundException) {
                    Log.wtf((String)"GooglePlayServicesUtil", (String)"Google Play services missing when getting application info.", (Throwable)nameNotFoundException);
                    return 1;
                }
            }
            if (object.enabled) return 0;
            return 3;
            catch (PackageManager.NameNotFoundException nameNotFoundException) {}
            object = "Google Play Store is missing.";
        }
        Log.w((String)"GooglePlayServicesUtil", (String)object);
        return 9;
        Log.w((String)"GooglePlayServicesUtil", (String)"Google Play services is missing.");
        return 1;
    }
}

