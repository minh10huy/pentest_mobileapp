/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.accounts.Account
 *  android.os.IBinder
 *  android.os.IInterface
 *  android.os.Parcel
 *  android.os.Parcelable
 *  android.os.Parcelable$Creator
 *  android.os.RemoteException
 */
package com.google.android.gms.signin.internal;

import android.accounts.Account;
import android.os.IBinder;
import android.os.IInterface;
import android.os.Parcel;
import android.os.Parcelable;
import android.os.RemoteException;
import com.google.android.gms.common.internal.AuthAccountRequest;
import com.google.android.gms.common.internal.IAccountAccessor;
import com.google.android.gms.common.internal.IResolveAccountCallbacks;
import com.google.android.gms.common.internal.ResolveAccountRequest;
import com.google.android.gms.internal.stable.zza;
import com.google.android.gms.internal.stable.zzb;
import com.google.android.gms.internal.stable.zzc;
import com.google.android.gms.signin.internal.CheckServerAuthResult;
import com.google.android.gms.signin.internal.ISignInCallbacks;
import com.google.android.gms.signin.internal.RecordConsentRequest;
import com.google.android.gms.signin.internal.SignInRequest;

public interface ISignInService
extends IInterface {
    public void authAccount(AuthAccountRequest var1, ISignInCallbacks var2) throws RemoteException;

    public void clearAccountFromSessionStore(int var1) throws RemoteException;

    public void getCurrentAccount(ISignInCallbacks var1) throws RemoteException;

    public void onCheckServerAuthorization(CheckServerAuthResult var1) throws RemoteException;

    public void onUploadServerAuthCode(boolean var1) throws RemoteException;

    public void recordConsent(RecordConsentRequest var1, ISignInCallbacks var2) throws RemoteException;

    public void resolveAccount(ResolveAccountRequest var1, IResolveAccountCallbacks var2) throws RemoteException;

    public void saveAccountToSessionStore(int var1, Account var2, ISignInCallbacks var3) throws RemoteException;

    public void saveDefaultAccountToSharedPref(IAccountAccessor var1, int var2, boolean var3) throws RemoteException;

    public void setGamesHasBeenGreeted(boolean var1) throws RemoteException;

    public void signIn(SignInRequest var1, ISignInCallbacks var2) throws RemoteException;

    public static abstract class Stub
    extends zzb
    implements ISignInService {
        public Stub() {
            super("com.google.android.gms.signin.internal.ISignInService");
        }

        public static ISignInService asInterface(IBinder iBinder) {
            if (iBinder == null) {
                return null;
            }
            IInterface iInterface = iBinder.queryLocalInterface("com.google.android.gms.signin.internal.ISignInService");
            if (iInterface instanceof ISignInService) {
                return (ISignInService)iInterface;
            }
            return new Proxy(iBinder);
        }

        @Override
        protected boolean dispatchTransaction(int n, Parcel parcel, Parcel parcel2, int n2) throws RemoteException {
            switch (n) {
                default: {
                    return false;
                }
                case 13: {
                    this.setGamesHasBeenGreeted(zzc.zza(parcel));
                    break;
                }
                case 12: {
                    this.signIn(zzc.zza(parcel, SignInRequest.CREATOR), ISignInCallbacks.Stub.asInterface(parcel.readStrongBinder()));
                    break;
                }
                case 11: {
                    this.getCurrentAccount(ISignInCallbacks.Stub.asInterface(parcel.readStrongBinder()));
                    break;
                }
                case 10: {
                    this.recordConsent(zzc.zza(parcel, RecordConsentRequest.CREATOR), ISignInCallbacks.Stub.asInterface(parcel.readStrongBinder()));
                    break;
                }
                case 9: {
                    this.saveDefaultAccountToSharedPref(IAccountAccessor.Stub.asInterface(parcel.readStrongBinder()), parcel.readInt(), zzc.zza(parcel));
                    break;
                }
                case 8: {
                    this.saveAccountToSessionStore(parcel.readInt(), (Account)zzc.zza(parcel, Account.CREATOR), ISignInCallbacks.Stub.asInterface(parcel.readStrongBinder()));
                    break;
                }
                case 7: {
                    this.clearAccountFromSessionStore(parcel.readInt());
                    break;
                }
                case 5: {
                    this.resolveAccount(zzc.zza(parcel, ResolveAccountRequest.CREATOR), IResolveAccountCallbacks.Stub.asInterface(parcel.readStrongBinder()));
                    break;
                }
                case 4: {
                    this.onUploadServerAuthCode(zzc.zza(parcel));
                    break;
                }
                case 3: {
                    this.onCheckServerAuthorization(zzc.zza(parcel, CheckServerAuthResult.CREATOR));
                    break;
                }
                case 2: {
                    this.authAccount(zzc.zza(parcel, AuthAccountRequest.CREATOR), ISignInCallbacks.Stub.asInterface(parcel.readStrongBinder()));
                }
            }
            parcel2.writeNoException();
            return true;
        }

        public static class Proxy
        extends zza
        implements ISignInService {
            Proxy(IBinder iBinder) {
                super(iBinder, "com.google.android.gms.signin.internal.ISignInService");
            }

            @Override
            public void authAccount(AuthAccountRequest authAccountRequest, ISignInCallbacks iSignInCallbacks) throws RemoteException {
                Parcel parcel = this.obtainAndWriteInterfaceToken();
                zzc.zza(parcel, authAccountRequest);
                zzc.zza(parcel, iSignInCallbacks);
                this.transactAndReadExceptionReturnVoid(2, parcel);
            }

            @Override
            public void clearAccountFromSessionStore(int n) throws RemoteException {
                Parcel parcel = this.obtainAndWriteInterfaceToken();
                parcel.writeInt(n);
                this.transactAndReadExceptionReturnVoid(7, parcel);
            }

            @Override
            public void getCurrentAccount(ISignInCallbacks iSignInCallbacks) throws RemoteException {
                Parcel parcel = this.obtainAndWriteInterfaceToken();
                zzc.zza(parcel, iSignInCallbacks);
                this.transactAndReadExceptionReturnVoid(11, parcel);
            }

            @Override
            public void onCheckServerAuthorization(CheckServerAuthResult checkServerAuthResult) throws RemoteException {
                Parcel parcel = this.obtainAndWriteInterfaceToken();
                zzc.zza(parcel, checkServerAuthResult);
                this.transactAndReadExceptionReturnVoid(3, parcel);
            }

            @Override
            public void onUploadServerAuthCode(boolean bl) throws RemoteException {
                Parcel parcel = this.obtainAndWriteInterfaceToken();
                zzc.zza(parcel, bl);
                this.transactAndReadExceptionReturnVoid(4, parcel);
            }

            @Override
            public void recordConsent(RecordConsentRequest recordConsentRequest, ISignInCallbacks iSignInCallbacks) throws RemoteException {
                Parcel parcel = this.obtainAndWriteInterfaceToken();
                zzc.zza(parcel, recordConsentRequest);
                zzc.zza(parcel, iSignInCallbacks);
                this.transactAndReadExceptionReturnVoid(10, parcel);
            }

            @Override
            public void resolveAccount(ResolveAccountRequest resolveAccountRequest, IResolveAccountCallbacks iResolveAccountCallbacks) throws RemoteException {
                Parcel parcel = this.obtainAndWriteInterfaceToken();
                zzc.zza(parcel, resolveAccountRequest);
                zzc.zza(parcel, iResolveAccountCallbacks);
                this.transactAndReadExceptionReturnVoid(5, parcel);
            }

            @Override
            public void saveAccountToSessionStore(int n, Account account, ISignInCallbacks iSignInCallbacks) throws RemoteException {
                Parcel parcel = this.obtainAndWriteInterfaceToken();
                parcel.writeInt(n);
                zzc.zza(parcel, (Parcelable)account);
                zzc.zza(parcel, iSignInCallbacks);
                this.transactAndReadExceptionReturnVoid(8, parcel);
            }

            @Override
            public void saveDefaultAccountToSharedPref(IAccountAccessor iAccountAccessor, int n, boolean bl) throws RemoteException {
                Parcel parcel = this.obtainAndWriteInterfaceToken();
                zzc.zza(parcel, iAccountAccessor);
                parcel.writeInt(n);
                zzc.zza(parcel, bl);
                this.transactAndReadExceptionReturnVoid(9, parcel);
            }

            @Override
            public void setGamesHasBeenGreeted(boolean bl) throws RemoteException {
                Parcel parcel = this.obtainAndWriteInterfaceToken();
                zzc.zza(parcel, bl);
                this.transactAndReadExceptionReturnVoid(13, parcel);
            }

            @Override
            public void signIn(SignInRequest signInRequest, ISignInCallbacks iSignInCallbacks) throws RemoteException {
                Parcel parcel = this.obtainAndWriteInterfaceToken();
                zzc.zza(parcel, signInRequest);
                zzc.zza(parcel, iSignInCallbacks);
                this.transactAndReadExceptionReturnVoid(12, parcel);
            }
        }

    }

}

