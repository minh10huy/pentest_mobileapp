/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.os.Parcel
 *  android.os.Parcelable
 *  android.os.Parcelable$Creator
 */
package com.google.android.gms.common.server.response;

import android.os.Parcel;
import android.os.Parcelable;
import com.google.android.gms.common.internal.Preconditions;
import com.google.android.gms.common.internal.safeparcel.AbstractSafeParcelable;
import com.google.android.gms.common.internal.safeparcel.SafeParcelWriter;
import com.google.android.gms.common.internal.safeparcel.SafeParcelable;
import com.google.android.gms.common.server.response.FastJsonResponse;
import com.google.android.gms.common.server.response.FieldMapPairCreator;
import com.google.android.gms.common.server.response.FieldMappingDictionaryCreator;
import com.google.android.gms.common.server.response.FieldMappingDictionaryEntryCreator;
import com.google.android.gms.common.util.VisibleForTesting;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;

@SafeParcelable.Class(creator="FieldMappingDictionaryCreator")
public class FieldMappingDictionary
extends AbstractSafeParcelable {
    public static final Parcelable.Creator<FieldMappingDictionary> CREATOR = new FieldMappingDictionaryCreator();
    @SafeParcelable.VersionField(id=1)
    private final int zzal;
    private final HashMap<String, Map<String, FastJsonResponse.Field<?, ?>>> zzxk;
    @SafeParcelable.Field(getter="getSerializedDictionary", id=2)
    private final ArrayList<Entry> zzxl;
    @SafeParcelable.Field(getter="getRootClassName", id=3)
    private final String zzxm;

    @SafeParcelable.Constructor
    FieldMappingDictionary(@SafeParcelable.Param(id=1) int n, @SafeParcelable.Param(id=2) ArrayList<Entry> arrayList, @SafeParcelable.Param(id=3) String string2) {
        this.zzal = n;
        this.zzxl = null;
        HashMap hashMap = new HashMap();
        int n2 = arrayList.size();
        for (n = 0; n < n2; ++n) {
            Entry entry = arrayList.get(n);
            String string3 = entry.className;
            HashMap hashMap2 = new HashMap();
            int n3 = entry.zzxn.size();
            for (int i = 0; i < n3; ++i) {
                FieldMapPair fieldMapPair = entry.zzxn.get(i);
                hashMap2.put(fieldMapPair.zzxo, fieldMapPair.zzxp);
            }
            hashMap.put(string3, hashMap2);
        }
        this.zzxk = hashMap;
        this.zzxm = Preconditions.checkNotNull(string2);
        this.linkFields();
    }

    public FieldMappingDictionary(Class<? extends FastJsonResponse> class_) {
        this.zzal = 1;
        this.zzxl = null;
        this.zzxk = new HashMap();
        this.zzxm = class_.getCanonicalName();
    }

    public void copyInternalFieldMappings() {
        for (String string2 : this.zzxk.keySet()) {
            Map<String, FastJsonResponse.Field<?, ?>> map = this.zzxk.get(string2);
            HashMap hashMap = new HashMap();
            for (String string3 : map.keySet()) {
                hashMap.put(string3, map.get(string3).copyForDictionary());
            }
            this.zzxk.put(string2, hashMap);
        }
    }

    @VisibleForTesting
    public Map<String, FastJsonResponse.Field<?, ?>> getFieldMapping(Class<? extends FastJsonResponse> class_) {
        return this.zzxk.get(class_.getCanonicalName());
    }

    public Map<String, FastJsonResponse.Field<?, ?>> getFieldMapping(String string2) {
        return this.zzxk.get(string2);
    }

    public String getRootClassName() {
        return this.zzxm;
    }

    public boolean hasFieldMappingForClass(Class<? extends FastJsonResponse> class_) {
        return this.zzxk.containsKey(class_.getCanonicalName());
    }

    public void linkFields() {
        for (String string2 : this.zzxk.keySet()) {
            Map<String, FastJsonResponse.Field<?, ?>> object = this.zzxk.get(string2);
            Iterator<String> iterator = object.keySet().iterator();
            while (iterator.hasNext()) {
                object.get(iterator.next()).setFieldMappingDictionary(this);
            }
        }
    }

    public void put(Class<? extends FastJsonResponse> class_, Map<String, FastJsonResponse.Field<?, ?>> map) {
        this.zzxk.put(class_.getCanonicalName(), map);
    }

    public String toString() {
        StringBuilder stringBuilder = new StringBuilder();
        for (String string2 : this.zzxk.keySet()) {
            stringBuilder.append(string2);
            stringBuilder.append(":\n");
            Map<String, FastJsonResponse.Field<?, ?>> object = this.zzxk.get(string2);
            for (String string3 : object.keySet()) {
                stringBuilder.append("  ");
                stringBuilder.append(string3);
                stringBuilder.append(": ");
                stringBuilder.append(object.get(string3));
            }
        }
        return stringBuilder.toString();
    }

    public void writeToParcel(Parcel parcel, int n) {
        n = SafeParcelWriter.beginObjectHeader(parcel);
        SafeParcelWriter.writeInt(parcel, 1, this.zzal);
        ArrayList<Entry> arrayList = new ArrayList<Entry>();
        for (String string2 : this.zzxk.keySet()) {
            arrayList.add(new Entry(string2, this.zzxk.get(string2)));
        }
        SafeParcelWriter.writeTypedList(parcel, 2, arrayList, false);
        SafeParcelWriter.writeString(parcel, 3, this.getRootClassName(), false);
        SafeParcelWriter.finishObjectHeader(parcel, n);
    }

    @SafeParcelable.Class(creator="FieldMappingDictionaryEntryCreator")
    public static class Entry
    extends AbstractSafeParcelable {
        public static final Parcelable.Creator<Entry> CREATOR = new FieldMappingDictionaryEntryCreator();
        @SafeParcelable.Field(id=2)
        final String className;
        @SafeParcelable.VersionField(id=1)
        private final int versionCode;
        @SafeParcelable.Field(id=3)
        final ArrayList<FieldMapPair> zzxn;

        @SafeParcelable.Constructor
        Entry(@SafeParcelable.Param(id=1) int n, @SafeParcelable.Param(id=2) String string2, @SafeParcelable.Param(id=3) ArrayList<FieldMapPair> arrayList) {
            this.versionCode = n;
            this.className = string2;
            this.zzxn = arrayList;
        }

        Entry(String object, Map<String, FastJsonResponse.Field<?, ?>> map) {
            this.versionCode = 1;
            this.className = object;
            if (map == null) {
                object = null;
            } else {
                ArrayList<FieldMapPair> arrayList = new ArrayList<FieldMapPair>();
                Iterator<String> iterator = map.keySet().iterator();
                do {
                    object = arrayList;
                    if (!iterator.hasNext()) break;
                    object = iterator.next();
                    arrayList.add(new FieldMapPair((String)object, map.get(object)));
                } while (true);
            }
            this.zzxn = object;
        }

        public void writeToParcel(Parcel parcel, int n) {
            n = SafeParcelWriter.beginObjectHeader(parcel);
            SafeParcelWriter.writeInt(parcel, 1, this.versionCode);
            SafeParcelWriter.writeString(parcel, 2, this.className, false);
            SafeParcelWriter.writeTypedList(parcel, 3, this.zzxn, false);
            SafeParcelWriter.finishObjectHeader(parcel, n);
        }
    }

    @SafeParcelable.Class(creator="FieldMapPairCreator")
    public static class FieldMapPair
    extends AbstractSafeParcelable {
        public static final Parcelable.Creator<FieldMapPair> CREATOR = new FieldMapPairCreator();
        @SafeParcelable.VersionField(id=1)
        private final int versionCode;
        @SafeParcelable.Field(id=2)
        final String zzxo;
        @SafeParcelable.Field(id=3)
        final FastJsonResponse.Field<?, ?> zzxp;

        @SafeParcelable.Constructor
        FieldMapPair(@SafeParcelable.Param(id=1) int n, @SafeParcelable.Param(id=2) String string2, @SafeParcelable.Param(id=3) FastJsonResponse.Field<?, ?> field) {
            this.versionCode = n;
            this.zzxo = string2;
            this.zzxp = field;
        }

        FieldMapPair(String string2, FastJsonResponse.Field<?, ?> field) {
            this.versionCode = 1;
            this.zzxo = string2;
            this.zzxp = field;
        }

        public void writeToParcel(Parcel parcel, int n) {
            int n2 = SafeParcelWriter.beginObjectHeader(parcel);
            SafeParcelWriter.writeInt(parcel, 1, this.versionCode);
            SafeParcelWriter.writeString(parcel, 2, this.zzxo, false);
            SafeParcelWriter.writeParcelable(parcel, 3, this.zzxp, n, false);
            SafeParcelWriter.finishObjectHeader(parcel, n2);
        }
    }

}

