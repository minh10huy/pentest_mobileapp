/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.annotation.SuppressLint
 *  android.content.Context
 *  android.os.Build
 *  android.os.Build$VERSION
 *  android.os.PowerManager
 *  android.os.PowerManager$WakeLock
 *  android.os.WorkSource
 *  android.text.TextUtils
 *  android.util.Log
 *  javax.annotation.Nonnull
 *  javax.annotation.Nullable
 *  javax.annotation.concurrent.ThreadSafe
 */
package com.google.android.gms.stats;

import android.annotation.SuppressLint;
import android.content.Context;
import android.os.Build;
import android.os.PowerManager;
import android.os.WorkSource;
import android.text.TextUtils;
import android.util.Log;
import com.google.android.gms.common.internal.Preconditions;
import com.google.android.gms.common.providers.PooledExecutorsProvider;
import com.google.android.gms.common.stats.StatsUtils;
import com.google.android.gms.common.stats.WakeLockTracker;
import com.google.android.gms.common.util.PlatformVersion;
import com.google.android.gms.common.util.Strings;
import com.google.android.gms.common.util.WorkSourceUtil;
import com.google.android.gms.stats.zza;
import com.google.android.gms.stats.zzb;
import com.google.android.gms.stats.zzc;
import java.lang.ref.WeakReference;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.Future;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import javax.annotation.concurrent.ThreadSafe;

@ThreadSafe
public class WakeLock {
    private static ScheduledExecutorService zzaeg;
    private static Configuration zzaeh;
    private final PowerManager.WakeLock zzadv;
    private WorkSource zzadw;
    private String zzadx;
    private final int zzady;
    private final String zzadz;
    private final String zzaea;
    private final String zzaeb;
    private boolean zzaec;
    private final Map<String, Integer[]> zzaed;
    private int zzaee;
    private AtomicInteger zzaef;
    private final Context zzjp;

    static {
        zzaeh = new zza();
    }

    public WakeLock(Context context, int n, @Nonnull String string2) {
        String string3 = context == null ? null : context.getPackageName();
        this(context, n, string2, null, string3);
    }

    public WakeLock(Context context, int n, @Nonnull String string2, @Nullable String string3) {
        String string4 = context == null ? null : context.getPackageName();
        this(context, n, string2, string3, string4);
    }

    @SuppressLint(value={"UnwrappedWakeLock"})
    public WakeLock(Context context, int n, @Nonnull String string2, @Nullable String string3, @Nonnull String string4) {
        this(context, n, string2, string3, string4, null);
    }

    @SuppressLint(value={"UnwrappedWakeLock"})
    public WakeLock(Context context, int n, @Nonnull String string2, @Nullable String charSequence, @Nonnull String string3, @Nullable String string4) {
        this.zzaec = true;
        this.zzaed = new HashMap<String, Integer[]>();
        this.zzaef = new AtomicInteger(0);
        Preconditions.checkNotEmpty(string2, "Wake lock name can NOT be empty");
        this.zzady = n;
        this.zzaea = charSequence;
        this.zzaeb = string4;
        this.zzjp = context.getApplicationContext();
        if (!"com.google.android.gms".equals(context.getPackageName())) {
            charSequence = String.valueOf("*gcore*:");
            String string5 = String.valueOf(string2);
            charSequence = string5.length() != 0 ? charSequence.concat(string5) : new String((String)charSequence);
            this.zzadz = charSequence;
        } else {
            this.zzadz = string2;
        }
        this.zzadv = ((PowerManager)context.getSystemService("power")).newWakeLock(n, string2);
        if (WorkSourceUtil.hasWorkSourcePermission(context)) {
            string2 = string3;
            if (Strings.isEmptyOrWhitespace(string3)) {
                string2 = context.getPackageName();
            }
            if (zzaeh.isWorkChainsEnabled() && string2 != null && string4 != null) {
                charSequence = new StringBuilder(String.valueOf(string2).length() + 42 + String.valueOf(string4).length());
                charSequence.append("Using experimental Pi WorkSource chains: ");
                charSequence.append(string2);
                charSequence.append(",");
                charSequence.append(string4);
                Log.d((String)"WakeLock", (String)charSequence.toString());
                this.zzadx = string2;
                context = WorkSourceUtil.fromPackageAndModuleExperimentalPi(context, string2, string4);
            } else {
                context = WorkSourceUtil.fromPackage(context, string2);
            }
            this.zzadw = context;
            this.addWorkSource(this.zzadw);
        }
        if (zzaeg == null) {
            zzaeg = PooledExecutorsProvider.getInstance().newSingleThreadScheduledExecutor();
        }
    }

    public static void setConfiguration(Configuration configuration) {
        zzaeh = configuration;
    }

    private final void zza(WorkSource workSource) {
        try {
            this.zzadv.setWorkSource(workSource);
            return;
        }
        catch (ArrayIndexOutOfBoundsException | IllegalArgumentException runtimeException) {
            Log.wtf((String)"WakeLock", (String)runtimeException.toString());
            return;
        }
    }

    static /* synthetic */ void zza(WakeLock wakeLock, int n) {
        wakeLock.zzn(0);
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @SuppressLint(value={"WakelockTimeout"})
    private final void zza(String string2, long l) {
        block13 : {
            string2 = this.zzn(string2);
            synchronized (this) {
                block12 : {
                    block11 : {
                        boolean bl = this.zzaed.isEmpty();
                        boolean bl2 = false;
                        if (!(bl && this.zzaee <= 0 || this.zzadv.isHeld())) {
                            this.zzaed.clear();
                            this.zzaee = 0;
                        }
                        if (!this.zzaec) break block11;
                        Integer[] arrinteger = this.zzaed.get(string2);
                        if (arrinteger == null) {
                            this.zzaed.put(string2, new Integer[]{1});
                            bl2 = true;
                        } else {
                            arrinteger[0] = arrinteger[0] + 1;
                        }
                        if (bl2) break block12;
                    }
                    if (this.zzaec || this.zzaee != 0) break block13;
                }
                WakeLockTracker.getInstance().registerEvent(this.zzjp, StatsUtils.getEventKey(this.zzadv, string2), 7, this.zzadz, string2, this.zzaeb, this.zzady, this.zzdo(), l);
                ++this.zzaee;
            }
        }
        this.zzadv.acquire();
        if (l > 0L) {
            zzaeg.schedule(new zzb(this), l, TimeUnit.MILLISECONDS);
            if (!PlatformVersion.isAtLeastIceCreamSandwich() && this.zzaec) {
                string2 = String.valueOf(this.zzadz);
                string2 = string2.length() != 0 ? "Do not acquire with timeout on reference counted wakeLocks before ICS. wakelock: ".concat(string2) : new String("Do not acquire with timeout on reference counted wakeLocks before ICS. wakelock: ");
                Log.wtf((String)"WakeLock", (String)string2);
            }
        }
    }

    private final void zzb(String string2, int n) {
        if (this.zzaef.decrementAndGet() < 0) {
            Log.e((String)"WakeLock", (String)"release without a matched acquire!");
        }
        this.zzc(string2, n);
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    private final void zzc(String string2, int n) {
        block11 : {
            string2 = this.zzn(string2);
            synchronized (this) {
                block10 : {
                    block9 : {
                        if (!this.zzaec) break block9;
                        Integer[] arrinteger = this.zzaed.get(string2);
                        boolean bl = false;
                        if (arrinteger != null) {
                            if (arrinteger[0] == 1) {
                                this.zzaed.remove(string2);
                                bl = true;
                            } else {
                                arrinteger[0] = arrinteger[0] - 1;
                            }
                        }
                        if (bl) break block10;
                    }
                    if (this.zzaec || this.zzaee != 1) break block11;
                }
                WakeLockTracker.getInstance().registerEvent(this.zzjp, StatsUtils.getEventKey(this.zzadv, string2), 8, this.zzadz, string2, this.zzaeb, this.zzady, this.zzdo());
                --this.zzaee;
            }
        }
        this.zzn(n);
    }

    private final List<String> zzdo() {
        List<String> list = WorkSourceUtil.getNames(this.zzadw);
        if (this.zzadx == null) {
            return list;
        }
        list = new ArrayList<String>(list);
        list.add(this.zzadx);
        return list;
    }

    private final String zzn(String string2) {
        if (this.zzaec) {
            if (!TextUtils.isEmpty((CharSequence)string2)) {
                return string2;
            }
            return this.zzaea;
        }
        return this.zzaea;
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    private final void zzn(int n) {
        if (!this.zzadv.isHeld()) {
            return;
        }
        try {
            if (Build.VERSION.SDK_INT >= 21 && n > 0) {
                this.zzadv.release(n);
                return;
            }
            this.zzadv.release();
            return;
        }
        catch (RuntimeException runtimeException) {
            if (runtimeException.getClass().equals(RuntimeException.class)) {
                Log.e((String)"WakeLock", (String)String.valueOf(this.zzadz).concat(" was already released!"), (Throwable)runtimeException);
                return;
            }
            throw runtimeException;
        }
    }

    public void acquire() {
        this.zzaef.incrementAndGet();
        this.zza(null, 0L);
    }

    public void acquire(long l) {
        this.zzaef.incrementAndGet();
        this.zza(null, l);
    }

    public void acquire(String string2) {
        this.zzaef.incrementAndGet();
        this.zza(string2, 0L);
    }

    public void acquire(String string2, long l) {
        this.zzaef.incrementAndGet();
        this.zza(string2, l);
    }

    public HeldLock acquireLock(long l, String object) {
        l = Math.min(l, zzaeh.getMaximumTimeout(this.zzadz, (String)object));
        HeldLock heldLock = new HeldLock((String)object, null);
        this.zza((String)object, 0L);
        object = new WeakReference<HeldLock>(heldLock);
        heldLock.zzael = zzaeg.schedule(new zzc((WeakReference)object), l, TimeUnit.MILLISECONDS);
        return heldLock;
    }

    public void addWorkSource(WorkSource workSource) {
        if (workSource != null && WorkSourceUtil.hasWorkSourcePermission(this.zzjp)) {
            if (this.zzadw != null) {
                this.zzadw.add(workSource);
            } else {
                this.zzadw = workSource;
            }
            this.zza(this.zzadw);
        }
    }

    public PowerManager.WakeLock getWakeLock() {
        return this.zzadv;
    }

    public boolean isHeld() {
        return this.zzadv.isHeld();
    }

    public void release() {
        this.zzb(null, 0);
    }

    public void release(int n) {
        this.zzb(null, n);
    }

    public void release(String string2) {
        this.zzb(string2, 0);
    }

    public void release(String string2, int n) {
        this.zzb(string2, n);
    }

    public void removeWorkSource(WorkSource workSource) {
        if (workSource != null && WorkSourceUtil.hasWorkSourcePermission(this.zzjp)) {
            try {
                if (this.zzadw != null) {
                    this.zzadw.remove(workSource);
                }
                this.zza(this.zzadw);
                return;
            }
            catch (ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException) {
                Log.e((String)"WakeLock", (String)arrayIndexOutOfBoundsException.toString());
            }
        }
    }

    public void setReferenceCounted(boolean bl) {
        this.zzadv.setReferenceCounted(bl);
        this.zzaec = bl;
    }

    public void setWorkSource(WorkSource workSource) {
        if (WorkSourceUtil.hasWorkSourcePermission(this.zzjp)) {
            this.zza(workSource);
            this.zzadw = workSource;
            this.zzadx = null;
        }
    }

    public static interface Configuration {
        public long getMaximumTimeout(String var1, String var2);

        public boolean isWorkChainsEnabled();
    }

    public class HeldLock {
        private boolean zzaek = true;
        private Future zzael;
        private final String zzaem;

        private HeldLock(String string2) {
            this.zzaem = string2;
        }

        /* synthetic */ HeldLock(String string2, zza zza2) {
            this(string2);
        }

        public void finalize() {
            if (this.zzaek) {
                String string2 = String.valueOf(this.zzaem);
                string2 = string2.length() != 0 ? "HeldLock finalized while still holding the WakeLock! Reason: ".concat(string2) : new String("HeldLock finalized while still holding the WakeLock! Reason: ");
                Log.e((String)"WakeLock", (String)string2);
                this.release(0);
            }
        }

        public void release() {
            this.release(0);
        }

        public void release(int n) {
            synchronized (this) {
                block5 : {
                    boolean bl = this.zzaek;
                    if (bl) break block5;
                    return;
                }
                this.zzaek = false;
                if (this.zzael != null) {
                    this.zzael.cancel(false);
                    this.zzael = null;
                }
                WakeLock.this.zzc(this.zzaem, n);
                return;
            }
        }
    }

}

