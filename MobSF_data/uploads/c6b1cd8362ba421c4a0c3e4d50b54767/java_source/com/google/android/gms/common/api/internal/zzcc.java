/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.app.Activity
 *  android.content.Intent
 *  android.os.Bundle
 *  android.os.Handler
 *  android.os.Looper
 */
package com.google.android.gms.common.api.internal;

import android.app.Activity;
import android.content.Intent;
import android.os.Bundle;
import android.os.Handler;
import android.os.Looper;
import android.support.annotation.NonNull;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentActivity;
import android.support.v4.app.FragmentManager;
import android.support.v4.app.FragmentTransaction;
import android.support.v4.util.ArrayMap;
import com.google.android.gms.common.api.internal.LifecycleCallback;
import com.google.android.gms.common.api.internal.LifecycleFragment;
import com.google.android.gms.common.api.internal.zzcd;
import java.io.FileDescriptor;
import java.io.PrintWriter;
import java.lang.ref.WeakReference;
import java.util.Collection;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import java.util.WeakHashMap;

public final class zzcc
extends Fragment
implements LifecycleFragment {
    private static WeakHashMap<FragmentActivity, WeakReference<zzcc>> zzla = new WeakHashMap();
    private Map<String, LifecycleCallback> zzlb = new ArrayMap<String, LifecycleCallback>();
    private int zzlc = 0;
    private Bundle zzld;

    static /* synthetic */ int zza(zzcc zzcc2) {
        return zzcc2.zzlc;
    }

    public static zzcc zza(FragmentActivity fragmentActivity) {
        WeakReference<zzcc> weakReference;
        block7 : {
            block6 : {
                zzcc zzcc2;
                weakReference = zzla.get(fragmentActivity);
                if (weakReference != null && (weakReference = weakReference.get()) != null) {
                    return weakReference;
                }
                try {
                    zzcc2 = (zzcc)fragmentActivity.getSupportFragmentManager().findFragmentByTag("SupportLifecycleFragmentImpl");
                    if (zzcc2 == null) break block6;
                    weakReference = zzcc2;
                }
                catch (ClassCastException classCastException) {
                    throw new IllegalStateException("Fragment with tag SupportLifecycleFragmentImpl is not a SupportLifecycleFragmentImpl", classCastException);
                }
                if (!zzcc2.isRemoving()) break block7;
            }
            weakReference = new zzcc();
            fragmentActivity.getSupportFragmentManager().beginTransaction().add((Fragment)((Object)weakReference), "SupportLifecycleFragmentImpl").commitAllowingStateLoss();
        }
        zzla.put(fragmentActivity, new WeakReference<Object>(weakReference));
        return weakReference;
    }

    static /* synthetic */ Bundle zzb(zzcc zzcc2) {
        return zzcc2.zzld;
    }

    @Override
    public final void addCallback(String string2, @NonNull LifecycleCallback object) {
        if (!this.zzlb.containsKey(string2)) {
            this.zzlb.put(string2, (LifecycleCallback)object);
            if (this.zzlc > 0) {
                new Handler(Looper.getMainLooper()).post((Runnable)new zzcd(this, (LifecycleCallback)object, string2));
            }
            return;
        }
        object = new StringBuilder(String.valueOf(string2).length() + 59);
        object.append("LifecycleCallback with tag ");
        object.append(string2);
        object.append(" already added to this fragment.");
        throw new IllegalArgumentException(object.toString());
    }

    @Override
    public final void dump(String string2, FileDescriptor fileDescriptor, PrintWriter printWriter, String[] arrstring) {
        super.dump(string2, fileDescriptor, printWriter, arrstring);
        Iterator<LifecycleCallback> iterator = this.zzlb.values().iterator();
        while (iterator.hasNext()) {
            iterator.next().dump(string2, fileDescriptor, printWriter, arrstring);
        }
    }

    @Override
    public final <T extends LifecycleCallback> T getCallbackOrNull(String string2, Class<T> class_) {
        return (T)((LifecycleCallback)class_.cast(this.zzlb.get(string2)));
    }

    @Override
    public final /* synthetic */ Activity getLifecycleActivity() {
        return this.getActivity();
    }

    @Override
    public final boolean isCreated() {
        if (this.zzlc > 0) {
            return true;
        }
        return false;
    }

    @Override
    public final boolean isStarted() {
        if (this.zzlc >= 2) {
            return true;
        }
        return false;
    }

    @Override
    public final void onActivityResult(int n, int n2, Intent intent) {
        super.onActivityResult(n, n2, intent);
        Iterator<LifecycleCallback> iterator = this.zzlb.values().iterator();
        while (iterator.hasNext()) {
            iterator.next().onActivityResult(n, n2, intent);
        }
    }

    @Override
    public final void onCreate(Bundle bundle) {
        super.onCreate(bundle);
        this.zzlc = 1;
        this.zzld = bundle;
        for (Map.Entry<String, LifecycleCallback> entry : this.zzlb.entrySet()) {
            void object;
            LifecycleCallback lifecycleCallback = entry.getValue();
            if (bundle != null) {
                Bundle bundle2 = bundle.getBundle(entry.getKey());
            } else {
                Object var2_6 = null;
            }
            lifecycleCallback.onCreate((Bundle)object);
        }
    }

    @Override
    public final void onDestroy() {
        super.onDestroy();
        this.zzlc = 5;
        Iterator<LifecycleCallback> iterator = this.zzlb.values().iterator();
        while (iterator.hasNext()) {
            iterator.next().onDestroy();
        }
    }

    @Override
    public final void onResume() {
        super.onResume();
        this.zzlc = 3;
        Iterator<LifecycleCallback> iterator = this.zzlb.values().iterator();
        while (iterator.hasNext()) {
            iterator.next().onResume();
        }
    }

    @Override
    public final void onSaveInstanceState(Bundle bundle) {
        super.onSaveInstanceState(bundle);
        if (bundle == null) {
            return;
        }
        for (Map.Entry<String, LifecycleCallback> entry : this.zzlb.entrySet()) {
            Bundle bundle2 = new Bundle();
            entry.getValue().onSaveInstanceState(bundle2);
            bundle.putBundle(entry.getKey(), bundle2);
        }
    }

    @Override
    public final void onStart() {
        super.onStart();
        this.zzlc = 2;
        Iterator<LifecycleCallback> iterator = this.zzlb.values().iterator();
        while (iterator.hasNext()) {
            iterator.next().onStart();
        }
    }

    @Override
    public final void onStop() {
        super.onStop();
        this.zzlc = 4;
        Iterator<LifecycleCallback> iterator = this.zzlb.values().iterator();
        while (iterator.hasNext()) {
            iterator.next().onStop();
        }
    }
}

