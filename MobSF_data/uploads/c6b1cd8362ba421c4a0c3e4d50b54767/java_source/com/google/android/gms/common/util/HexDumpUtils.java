/*
 * Decompiled with CFR 0_132.
 */
package com.google.android.gms.common.util;

import java.io.ByteArrayOutputStream;
import java.util.StringTokenizer;

public final class HexDumpUtils {
    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public static byte[] bytesFromString(String object) {
        object = new StringTokenizer((String)object, " \t\n");
        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        while (object.hasMoreTokens()) {
            try {
                byteArrayOutputStream.write(Integer.parseInt(object.nextToken(), 16) & 255);
                continue;
            }
            catch (NumberFormatException numberFormatException) {}
            return null;
        }
        return byteArrayOutputStream.toByteArray();
    }

    /*
     * Unable to fully structure code
     */
    public static String dump(byte[] var0, int var1_1, int var2_2, boolean var3_3) {
        block16 : {
            if (var0 == null || var0.length == 0 || var1_1 < 0 || var2_2 <= 0 || var1_1 + var2_2 > var0.length) break block16;
            var5_4 = 57;
            if (var3_3) {
                var5_4 = 75;
            }
            var12_5 = new StringBuilder(var5_4 * ((var2_2 + 16 - 1) / 16));
            var5_4 = var2_2;
            var7_6 = 0;
            var8_7 = 0;
            while (var5_4 > 0) {
                block18 : {
                    block17 : {
                        if (var7_6 == 0) {
                            if (var2_2 < 65536) {
                                var10_11 = "%04X:";
                                var11_12 = new Object[]{var1_1};
lbl14: // 2 sources:
                                do {
                                    continue;
                                    break;
                                } while (true);
                            }
                            var10_11 = "%08X:";
                            var11_12 = new Object[]{var1_1};
                            ** continue;
                            var12_5.append(String.format(var10_11, var11_12));
                            var6_9 = var1_1;
                        } else {
                            var6_9 = var8_7;
                            if (var7_6 == 8) {
                                var12_5.append(" -");
                                var6_9 = var8_7;
                            }
                        }
                        var12_5.append(String.format(" %02X", new Object[]{var0[var1_1] & 255}));
                        var9_10 = var5_4 - 1;
                        if (var3_3 && (++var7_6 == 16 || var9_10 == 0)) {
                            var8_7 = 16 - var7_6;
                            if (var8_7 > 0) {
                                for (var5_4 = 0; var5_4 < var8_7; ++var5_4) {
                                    var12_5.append("   ");
                                }
                            }
                            if (var8_7 >= 8) {
                                var12_5.append("  ");
                            }
                            var12_5.append("  ");
                            for (var5_4 = 0; var5_4 < var7_6; ++var5_4) {
                                var4_8 = (char)var0[var6_9 + var5_4];
                                if (var4_8 < ' ' || var4_8 > '~') {
                                    var4_8 = '.';
                                }
                                var12_5.append(var4_8);
                            }
                        }
                        if (var7_6 == 16) break block17;
                        var5_4 = var7_6;
                        if (var9_10 != 0) break block18;
                    }
                    var12_5.append('\n');
                    var5_4 = 0;
                }
                ++var1_1;
                var7_6 = var5_4;
                var8_7 = var6_9;
                var5_4 = var9_10;
            }
            return var12_5.toString();
        }
        return null;
    }
}

