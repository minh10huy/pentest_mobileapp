/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.os.Binder
 *  android.os.Process
 *  android.os.StrictMode
 *  android.os.StrictMode$ThreadPolicy
 *  javax.annotation.Nullable
 */
package com.google.android.gms.common.util;

import android.os.Binder;
import android.os.Process;
import android.os.StrictMode;
import com.google.android.gms.common.util.IOUtils;
import java.io.BufferedReader;
import java.io.Closeable;
import java.io.FileReader;
import java.io.IOException;
import java.io.Reader;
import javax.annotation.Nullable;

public class ProcessUtils {
    private static String zzaai;
    private static int zzaaj;

    private ProcessUtils() {
    }

    @Nullable
    public static String getCallingProcessName() {
        int n = Binder.getCallingPid();
        if (n == ProcessUtils.zzde()) {
            return ProcessUtils.getMyProcessName();
        }
        return ProcessUtils.zzl(n);
    }

    @Nullable
    public static String getMyProcessName() {
        if (zzaai == null) {
            zzaai = ProcessUtils.zzl(ProcessUtils.zzde());
        }
        return zzaai;
    }

    /*
     * WARNING - Removed back jump from a try to a catch block - possible behaviour change.
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    public static boolean hasSystemGroups() throws SystemGroupsNotAvailableException {
        Object object2;
        Object object;
        block7 : {
            boolean bl;
            void var4_9;
            Throwable throwable = null;
            object2 = object = null;
            int n = ProcessUtils.zzde();
            object2 = object;
            StringBuilder stringBuilder = new StringBuilder(24);
            object2 = object;
            stringBuilder.append("/proc/");
            object2 = object;
            stringBuilder.append(n);
            object2 = object;
            stringBuilder.append("/status");
            object2 = object;
            object = ProcessUtils.zzm(stringBuilder.toString());
            try {
                bl = ProcessUtils.zzk((BufferedReader)object);
            }
            catch (Throwable throwable2) {
                break block7;
            }
            catch (IOException iOException) {
                object2 = object;
                throw new SystemGroupsNotAvailableException("Unable to access /proc/pid/status.", (Throwable)var4_9);
            }
            IOUtils.closeQuietly((Closeable)object);
            return bl;
            catch (Throwable throwable3) {
                object = object2;
                object2 = throwable3;
                break block7;
            }
            catch (IOException iOException) {
                object2 = throwable;
            }
            {
                throw new SystemGroupsNotAvailableException("Unable to access /proc/pid/status.", (Throwable)var4_9);
            }
        }
        IOUtils.closeQuietly((Closeable)object);
        throw object2;
    }

    private static int zzde() {
        if (zzaaj == 0) {
            zzaaj = Process.myPid();
        }
        return zzaaj;
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    private static boolean zzk(BufferedReader arrstring) throws IOException, SystemGroupsNotAvailableException {
        String string2;
        do {
            if ((string2 = arrstring.readLine()) != null) continue;
            throw new SystemGroupsNotAvailableException("Missing Groups entry from proc/pid/status.");
        } while (!(string2 = string2.trim()).startsWith("Groups:"));
        arrstring = string2.substring(7).trim().split("\\s", -1);
        int n = arrstring.length;
        int n2 = 0;
        while (n2 < n) {
            string2 = arrstring[n2];
            try {
                long l = Long.parseLong(string2);
                if (l >= 1000L && l < 2000L) {
                    return true;
                }
            }
            catch (NumberFormatException numberFormatException) {}
            ++n2;
        }
        return false;
    }

    /*
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    @Nullable
    private static String zzl(int n) {
        Object object;
        block8 : {
            void var2_7;
            block7 : {
                String string2;
                StringBuilder stringBuilder = null;
                if (n <= 0) {
                    return null;
                }
                object = new StringBuilder(25);
                object.append("/proc/");
                object.append(n);
                object.append("/cmdline");
                object = ProcessUtils.zzm(object.toString());
                try {
                    string2 = object.readLine().trim();
                }
                catch (Throwable throwable) {
                    break block7;
                }
                IOUtils.closeQuietly((Closeable)object);
                return string2;
                catch (Throwable throwable) {
                    object = stringBuilder;
                }
            }
            IOUtils.closeQuietly((Closeable)object);
            throw var2_7;
            catch (IOException iOException) {}
            object = null;
            break block8;
            catch (IOException iOException) {}
        }
        IOUtils.closeQuietly((Closeable)object);
        return null;
    }

    private static BufferedReader zzm(String object) throws IOException {
        StrictMode.ThreadPolicy threadPolicy = StrictMode.allowThreadDiskReads();
        try {
            object = new BufferedReader(new FileReader((String)object));
            return object;
        }
        finally {
            StrictMode.setThreadPolicy((StrictMode.ThreadPolicy)threadPolicy);
        }
    }

    public static class SystemGroupsNotAvailableException
    extends Exception {
        SystemGroupsNotAvailableException(String string2) {
            super(string2);
        }

        SystemGroupsNotAvailableException(String string2, Throwable throwable) {
            super(string2, throwable);
        }
    }

}

