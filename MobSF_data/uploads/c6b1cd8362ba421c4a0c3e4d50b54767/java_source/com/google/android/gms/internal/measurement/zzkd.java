/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.content.ComponentName
 *  android.content.Context
 *  android.content.Intent
 *  android.content.pm.PackageInfo
 *  android.content.pm.PackageManager
 *  android.content.pm.PackageManager$NameNotFoundException
 *  android.content.pm.ServiceInfo
 *  android.content.pm.Signature
 *  android.net.Uri
 *  android.os.Build
 *  android.os.Build$VERSION
 *  android.os.Bundle
 *  android.os.Parcel
 *  android.os.Parcelable
 *  android.text.TextUtils
 */
package com.google.android.gms.internal.measurement;

import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.pm.ServiceInfo;
import android.content.pm.Signature;
import android.net.Uri;
import android.os.Build;
import android.os.Bundle;
import android.os.Parcel;
import android.os.Parcelable;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.annotation.WorkerThread;
import android.text.TextUtils;
import com.google.android.gms.common.GoogleApiAvailabilityLight;
import com.google.android.gms.common.internal.Preconditions;
import com.google.android.gms.common.util.Clock;
import com.google.android.gms.common.util.CollectionUtils;
import com.google.android.gms.common.util.VisibleForTesting;
import com.google.android.gms.common.wrappers.Wrappers;
import com.google.android.gms.internal.measurement.zzee;
import com.google.android.gms.internal.measurement.zzeh;
import com.google.android.gms.internal.measurement.zzer;
import com.google.android.gms.internal.measurement.zzeu;
import com.google.android.gms.internal.measurement.zzex;
import com.google.android.gms.internal.measurement.zzfg;
import com.google.android.gms.internal.measurement.zzfi;
import com.google.android.gms.internal.measurement.zzfk;
import com.google.android.gms.internal.measurement.zzft;
import com.google.android.gms.internal.measurement.zzgi;
import com.google.android.gms.internal.measurement.zzgn;
import com.google.android.gms.internal.measurement.zzhj;
import com.google.android.gms.internal.measurement.zzhm;
import com.google.android.gms.measurement.AppMeasurement;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.Closeable;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.security.cert.Certificate;
import java.security.cert.CertificateException;
import java.security.cert.CertificateFactory;
import java.security.cert.X509Certificate;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import java.util.Set;
import java.util.concurrent.atomic.AtomicLong;
import javax.security.auth.x500.X500Principal;

public final class zzkd
extends zzhj {
    private static final String[] zzasx = new String[]{"firebase_", "google_", "ga_"};
    private int zzadj;
    private SecureRandom zzasy;
    private final AtomicLong zzasz = new AtomicLong(0L);
    private Integer zzata = null;

    zzkd(zzgn zzgn2) {
        super(zzgn2);
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    static MessageDigest getMessageDigest() {
        int n = 0;
        while (n < 2) {
            try {
                MessageDigest messageDigest = MessageDigest.getInstance("MD5");
                if (messageDigest != null) {
                    return messageDigest;
                }
            }
            catch (NoSuchAlgorithmException noSuchAlgorithmException) {}
            ++n;
        }
        return null;
    }

    private static Object zza(int n, Object object, boolean bl) {
        if (object == null) {
            return null;
        }
        if (!(object instanceof Long)) {
            if (object instanceof Double) {
                return object;
            }
            if (object instanceof Integer) {
                return (long)((Integer)object);
            }
            if (object instanceof Byte) {
                return (long)((Byte)object);
            }
            if (object instanceof Short) {
                return (long)((Short)object);
            }
            if (object instanceof Boolean) {
                long l = (Boolean)object != false ? 1L : 0L;
                return l;
            }
            if (object instanceof Float) {
                return ((Float)object).doubleValue();
            }
            if (!(object instanceof String || object instanceof Character || object instanceof CharSequence)) {
                return null;
            }
            return zzkd.zza(String.valueOf(object), n, bl);
        }
        return object;
    }

    public static String zza(String string2, int n, boolean bl) {
        String string3 = string2;
        if (string2.codePointCount(0, string2.length()) > n) {
            if (bl) {
                return String.valueOf(string2.substring(0, string2.offsetByCodePoints(0, n))).concat("...");
            }
            string3 = null;
        }
        return string3;
    }

    @Nullable
    public static String zza(String string2, String[] arrstring, String[] arrstring2) {
        Preconditions.checkNotNull(arrstring);
        Preconditions.checkNotNull(arrstring2);
        int n = Math.min(arrstring.length, arrstring2.length);
        for (int i = 0; i < n; ++i) {
            if (!zzkd.zzs(string2, arrstring[i])) continue;
            return arrstring2[i];
        }
        return null;
    }

    private static void zza(Bundle bundle, Object object) {
        Preconditions.checkNotNull(bundle);
        if (object != null && (object instanceof String || object instanceof CharSequence)) {
            bundle.putLong("_el", (long)String.valueOf(object).length());
        }
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    static boolean zza(Context context, boolean bl) {
        String string2;
        Preconditions.checkNotNull(context);
        if (Build.VERSION.SDK_INT >= 24) {
            string2 = "com.google.android.gms.measurement.AppMeasurementJobService";
            do {
                return zzkd.zzc(context, string2);
                break;
            } while (true);
        }
        string2 = "com.google.android.gms.measurement.AppMeasurementService";
        return zzkd.zzc(context, string2);
    }

    private static boolean zza(Bundle bundle, int n) {
        if (bundle.getLong("_err") == 0L) {
            bundle.putLong("_err", (long)n);
            return true;
        }
        return false;
    }

    private final boolean zza(String object, String string2, int n, Object object22, boolean bl) {
        if (object22 == null) {
            return true;
        }
        if (!(object22 instanceof Long || object22 instanceof Float || object22 instanceof Integer || object22 instanceof Byte || object22 instanceof Short || object22 instanceof Boolean)) {
            if (object22 instanceof Double) {
                return true;
            }
            if (!(object22 instanceof String || object22 instanceof Character || object22 instanceof CharSequence)) {
                void var5_10;
                if (object22 instanceof Bundle && var5_10 != false) {
                    return true;
                }
                if (object22 instanceof Parcelable[] && var5_10 != false) {
                    for (Parcelable parcelable : (Parcelable[])object22) {
                        if (parcelable instanceof Bundle) continue;
                        this.zzgi().zziy().zze("All Parcelable[] elements must be of type Bundle. Value type, name", parcelable.getClass(), string2);
                        return false;
                    }
                    return true;
                }
                if (object22 instanceof ArrayList && var5_10 != false) {
                    object = (ArrayList)object22;
                    int n2 = object.size();
                    for (n = 0; n < n2; ++n) {
                        Object e = object.get(n);
                        if (e instanceof Bundle) continue;
                        this.zzgi().zziy().zze("All ArrayList elements must be of type Bundle. Value type, name", e.getClass(), string2);
                        return false;
                    }
                    return true;
                }
                return false;
            }
            String string3 = String.valueOf(object22);
            if (string3.codePointCount(0, string3.length()) > n) {
                this.zzgi().zziy().zzd("Value is too long; discarded. Value kind, name, value length", object, string2, string3.length());
                return false;
            }
        }
        return true;
    }

    static byte[] zza(Parcelable arrby) {
        if (arrby == null) {
            return null;
        }
        Parcel parcel = Parcel.obtain();
        try {
            arrby.writeToParcel(parcel, 0);
            arrby = parcel.marshall();
            return arrby;
        }
        finally {
            parcel.recycle();
        }
    }

    @VisibleForTesting
    static long zzc(byte[] arrby) {
        Preconditions.checkNotNull(arrby);
        int n = arrby.length;
        int n2 = 0;
        boolean bl = n > 0;
        Preconditions.checkState(bl);
        long l = 0L;
        n = arrby.length - 1;
        while (n >= 0 && n >= arrby.length - 8) {
            long l2 = arrby[n];
            int n3 = n2 + 8;
            --n;
            l += (l2 & 255L) << n2;
            n2 = n3;
        }
        return l;
    }

    private static boolean zzc(Context context, String string2) {
        block5 : {
            PackageManager packageManager;
            block4 : {
                try {
                    packageManager = context.getPackageManager();
                    if (packageManager != null) break block4;
                    return false;
                }
                catch (PackageManager.NameNotFoundException nameNotFoundException) {
                    return false;
                }
            }
            context = packageManager.getServiceInfo(new ComponentName(context, string2), 0);
            if (context == null) break block5;
            boolean bl = context.enabled;
            if (!bl) break block5;
            return true;
        }
        return false;
    }

    static boolean zzcg(String string2) {
        Preconditions.checkNotEmpty(string2);
        if (string2.charAt(0) == '_' && !string2.equals("_ep")) {
            return false;
        }
        return true;
    }

    private static int zzcl(String string2) {
        if ("_ldl".equals(string2)) {
            return 2048;
        }
        if ("_id".equals(string2)) {
            return 256;
        }
        return 36;
    }

    static boolean zzcm(String string2) {
        if (!TextUtils.isEmpty((CharSequence)string2) && string2.startsWith("_")) {
            return true;
        }
        return false;
    }

    static boolean zzd(Intent object) {
        if (!("android-app://com.google.android.googlequicksearchbox/https/www.google.com".equals(object = object.getStringExtra("android.intent.extra.REFERRER_NAME")) || "https://www.google.com".equals(object) || "android-app://com.google.appcrawler".equals(object))) {
            return false;
        }
        return true;
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    @VisibleForTesting
    private final boolean zze(Context object, String string2) {
        void var2_11;
        void var1_7;
        Object object2;
        void var2_8;
        object2 = new X500Principal("CN=Android Debug,O=Android,C=US");
        PackageInfo packageInfo = Wrappers.packageManager(object).getPackageInfo((String)var2_8, 64);
        if (packageInfo == null) return true;
        try {
            if (packageInfo.signatures == null) return true;
            if (packageInfo.signatures.length <= 0) return true;
            Signature signature = packageInfo.signatures[0];
            return ((X509Certificate)CertificateFactory.getInstance("X.509").generateCertificate(new ByteArrayInputStream(signature.toByteArray()))).getSubjectX500Principal().equals(object2);
        }
        catch (PackageManager.NameNotFoundException nameNotFoundException) {
            object2 = this.zzgi().zziv();
            String string3 = "Package name not found";
        }
        catch (CertificateException certificateException) {
            object2 = this.zzgi().zziv();
            String string4 = "Error obtaining certificate";
        }
        object2.zzg((String)var1_7, var2_11);
        return true;
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    static Bundle[] zze(Object object) {
        void var0_3;
        if (object instanceof Bundle) {
            return new Bundle[]{(Bundle)object};
        }
        if (object instanceof Parcelable[]) {
            Object object2 = object;
            T[] arrT = Arrays.copyOf(object2, ((Parcelable[])object2).length, Bundle[].class);
            do {
                return (Bundle[])var0_3;
                break;
            } while (true);
        }
        if (!(object instanceof ArrayList)) return null;
        ArrayList arrayList = (ArrayList)object;
        Bundle[] arrbundle = arrayList.toArray((T[])new Bundle[arrayList.size()]);
        return (Bundle[])var0_3;
    }

    /*
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    public static Object zzf(Object object) {
        Closeable closeable;
        OutputStream outputStream;
        void var0_1;
        block10 : {
            if (object == null) {
                return null;
            }
            closeable = new ByteArrayOutputStream();
            outputStream = new ObjectOutputStream((OutputStream)closeable);
            outputStream.writeObject(object);
            outputStream.flush();
            closeable = new ObjectInputStream(new ByteArrayInputStream(closeable.toByteArray()));
            try {
                object = closeable.readObject();
            }
            catch (Throwable throwable) {
                break block10;
            }
            try {
                outputStream.close();
                closeable.close();
                return object;
            }
            catch (IOException | ClassNotFoundException exception) {
                return null;
            }
            catch (Throwable throwable) {
                closeable = null;
            }
            break block10;
            catch (Throwable throwable) {
                closeable = null;
                outputStream = closeable;
            }
        }
        if (outputStream != null) {
            outputStream.close();
        }
        if (closeable == null) throw var0_1;
        closeable.close();
        throw var0_1;
    }

    private final boolean zzr(String string2, String string3) {
        int n;
        if (string3 == null) {
            this.zzgi().zziv().zzg("Name is required and can't be null. Type", string2);
            return false;
        }
        if (string3.length() == 0) {
            this.zzgi().zziv().zzg("Name is required and can't be empty. Type", string2);
            return false;
        }
        int n2 = string3.codePointAt(0);
        if (!Character.isLetter(n2) && n2 != 95) {
            this.zzgi().zziv().zze("Name must start with a letter or _ (underscore). Type, name", string2, string3);
            return false;
        }
        int n3 = string3.length();
        for (n2 = Character.charCount((int)n2); n2 < n3; n2 += Character.charCount((int)n)) {
            n = string3.codePointAt(n2);
            if (n == 95 || Character.isLetterOrDigit(n)) continue;
            this.zzgi().zziv().zze("Name must consist of letters, digits or _ (underscores). Type, name", string2, string3);
            return false;
        }
        return true;
    }

    static boolean zzs(String string2, String string3) {
        if (string2 == null && string3 == null) {
            return true;
        }
        if (string2 == null) {
            return false;
        }
        return string2.equals(string3);
    }

    final Bundle zza(@NonNull Uri object) {
        String string2;
        String string3;
        String string4;
        Bundle bundle;
        String string5;
        block14 : {
            if (object == null) {
                return null;
            }
            try {
                if (object.isHierarchical()) {
                    string5 = object.getQueryParameter("utm_campaign");
                    string2 = object.getQueryParameter("utm_source");
                    string4 = object.getQueryParameter("utm_medium");
                    string3 = object.getQueryParameter("gclid");
                    break block14;
                }
                bundle = null;
                string3 = string2 = (string5 = bundle);
                string4 = string2;
                string2 = string5;
                string5 = bundle;
            }
            catch (UnsupportedOperationException unsupportedOperationException) {
                this.zzgi().zziy().zzg("Install referrer url isn't a hierarchical URI", unsupportedOperationException);
                return null;
            }
        }
        if (TextUtils.isEmpty((CharSequence)string5) && TextUtils.isEmpty((CharSequence)string2) && TextUtils.isEmpty((CharSequence)string4) && TextUtils.isEmpty((CharSequence)string3)) {
            return null;
        }
        bundle = new Bundle();
        if (!TextUtils.isEmpty((CharSequence)string5)) {
            bundle.putString("campaign", string5);
        }
        if (!TextUtils.isEmpty((CharSequence)string2)) {
            bundle.putString("source", string2);
        }
        if (!TextUtils.isEmpty((CharSequence)string4)) {
            bundle.putString("medium", string4);
        }
        if (!TextUtils.isEmpty((CharSequence)string3)) {
            bundle.putString("gclid", string3);
        }
        if (!TextUtils.isEmpty((CharSequence)(string5 = object.getQueryParameter("utm_term")))) {
            bundle.putString("term", string5);
        }
        if (!TextUtils.isEmpty((CharSequence)(string5 = object.getQueryParameter("utm_content")))) {
            bundle.putString("content", string5);
        }
        if (!TextUtils.isEmpty((CharSequence)(string5 = object.getQueryParameter("aclid")))) {
            bundle.putString("aclid", string5);
        }
        if (!TextUtils.isEmpty((CharSequence)(string5 = object.getQueryParameter("cp1")))) {
            bundle.putString("cp1", string5);
        }
        if (!TextUtils.isEmpty((CharSequence)(object = object.getQueryParameter("anid")))) {
            bundle.putString("anid", (String)object);
        }
        return bundle;
    }

    /*
     * Unable to fully structure code
     */
    final Bundle zza(String var1_1, String var2_2, Bundle var3_3, @Nullable List<String> var4_4, boolean var5_5, boolean var6_6) {
        block28 : {
            block30 : {
                if (var3_3 == null) break block30;
                var12_7 = new Bundle(var3_3);
                var13_8 = var3_3.keySet().iterator();
                var7_9 = 0;
                do {
                    block36 : {
                        block32 : {
                            block35 : {
                                block34 : {
                                    block33 : {
                                        block31 : {
                                            block29 : {
                                                var11_14 = var12_7;
                                                if (!var13_8.hasNext()) break block28;
                                                var11_13 = (String)var13_8.next();
                                                if (var4_4 != null && var4_4.contains(var11_13)) {
                                                    do {
                                                        var8_10 = 0;
                                                        break block29;
                                                        break;
                                                    } while (true);
                                                }
                                                var9_11 = 14;
                                                if (!var5_5) ** GOTO lbl23
                                                if (!this.zzq("event param", var11_13)) {
                                                    do {
                                                        var8_10 = 3;
                                                        break;
                                                    } while (true);
                                                } else if (!this.zza("event param", null, var11_13)) {
                                                    var8_10 = 14;
                                                } else {
                                                    if (!this.zza("event param", 40, var11_13)) ** continue;
lbl23: // 2 sources:
                                                    var8_10 = 0;
                                                }
                                                if (var8_10 == 0) {
                                                    if (!this.zzr("event param", var11_13)) lbl-1000: // 2 sources:
                                                    {
                                                        do {
                                                            var8_10 = 3;
                                                            break;
                                                        } while (true);
                                                    } else if (!this.zza("event param", null, var11_13)) {
                                                        var8_10 = var9_11;
                                                    } else {
                                                        if (this.zza("event param", 40, var11_13)) ** continue;
                                                        ** continue;
                                                    }
                                                }
                                            }
                                            if (var8_10 == 0) break block31;
                                            var9_11 = var7_9;
                                            if (zzkd.zza(var12_7, var8_10)) {
                                                var12_7.putString("_ev", zzkd.zza(var11_13, 40, true));
                                                var9_11 = var7_9;
                                                if (var8_10 == 3) {
                                                    zzkd.zza(var12_7, var11_13);
                                                    var9_11 = var7_9;
                                                }
                                            }
                                            break block32;
                                        }
                                        var14_17 = var3_3.get(var11_13);
                                        this.zzab();
                                        if (!var6_6) ** GOTO lbl-1000
                                        if (!(var14_17 instanceof Parcelable[])) break block33;
                                        var8_10 = ((Parcelable[])var14_17).length;
                                        break block34;
                                    }
                                    if (!(var14_17 instanceof ArrayList)) ** GOTO lbl-1000
                                    var8_10 = ((ArrayList)var14_17).size();
                                }
                                if (var8_10 > 1000) {
                                    this.zzgi().zziy().zzd("Parameter array is too long; discarded. Value kind, name, array length", "param", var11_13, var8_10);
                                    var8_10 = 0;
                                } else lbl-1000: // 2 sources:
                                {
                                    var8_10 = 1;
                                }
                                if (var8_10 == 0) {
                                    var8_10 = 17;
                                } else lbl-1000: // 2 sources:
                                {
                                    if (this.zzgk().zzax(var1_1) && zzkd.zzcm(var2_2) || zzkd.zzcm(var11_13)) {
                                        var8_10 = 256;
lbl65: // 2 sources:
                                        do {
                                            continue;
                                            break;
                                        } while (true);
                                    }
                                    var8_10 = 100;
                                    ** continue;
                                    var10_12 = this.zza("param", var11_13, var8_10, var14_17, var6_6);
                                    var8_10 = var10_12 != false ? 0 : 4;
                                }
                                if (var8_10 == 0 || "_ev".equals(var11_13)) break block35;
                                var9_11 = var7_9;
                                if (zzkd.zza(var12_7, var8_10)) {
                                    var12_7.putString("_ev", zzkd.zza(var11_13, 40, true));
                                    zzkd.zza(var12_7, var3_3.get(var11_13));
                                    var9_11 = var7_9;
                                }
                                break block32;
                            }
                            var8_10 = var7_9;
                            if (!zzkd.zzcg(var11_13)) break block36;
                            var8_10 = var9_11 = var7_9 + 1;
                            if (var9_11 <= 25) break block36;
                            var14_17 = new StringBuilder(48);
                            var14_17.append("Event can't contain more than 25 params");
                            var14_17 = var14_17.toString();
                            this.zzgi().zziv().zze((String)var14_17, this.zzgf().zzbm(var2_2), this.zzgf().zzb(var3_3));
                            zzkd.zza(var12_7, 5);
                        }
                        var12_7.remove(var11_13);
                        var7_9 = var9_11;
                        continue;
                    }
                    var7_9 = var8_10;
                } while (true);
            }
            var11_15 = null;
        }
        return var11_16;
    }

    final zzex zza(String string2, String string3, Bundle bundle, String string4, long l, boolean bl, boolean bl2) {
        if (TextUtils.isEmpty((CharSequence)string3)) {
            return null;
        }
        if (this.zzch(string3) != 0) {
            this.zzgi().zziv().zzg("Invalid conditional property event name", this.zzgf().zzbo(string3));
            throw new IllegalArgumentException();
        }
        bundle = bundle != null ? new Bundle(bundle) : new Bundle();
        bundle.putString("_o", string4);
        return new zzex(string3, new zzeu(this.zzd(this.zza(string2, string3, bundle, CollectionUtils.listOf("_o"), false, false))), string4, l);
    }

    public final void zza(int n, String string2, String string3, int n2) {
        this.zza(null, n, string2, string3, n2);
    }

    final void zza(Bundle object, String string2, Object object2) {
        if (object == null) {
            return;
        }
        if (object2 instanceof Long) {
            object.putLong(string2, ((Long)object2).longValue());
            return;
        }
        if (object2 instanceof String) {
            object.putString(string2, String.valueOf(object2));
            return;
        }
        if (object2 instanceof Double) {
            object.putDouble(string2, ((Double)object2).doubleValue());
            return;
        }
        if (string2 != null) {
            object = object2 != null ? object2.getClass().getSimpleName() : null;
            this.zzgi().zziz().zze("Not putting event parameter. Invalid value type. name, type", this.zzgf().zzbn(string2), object);
        }
    }

    final void zza(String string2, int n, String string3, String string4, int n2) {
        string2 = new Bundle();
        zzkd.zza((Bundle)string2, n);
        if (!TextUtils.isEmpty((CharSequence)string3)) {
            string2.putString(string3, string4);
        }
        if (n == 6 || n == 7 || n == 2) {
            string2.putLong("_el", (long)n2);
        }
        this.zzacv.zzgl();
        this.zzacv.zzfy().logEvent("auto", "_err", (Bundle)string2);
    }

    final boolean zza(String string2, int n, String string3) {
        if (string3 == null) {
            this.zzgi().zziv().zzg("Name is required and can't be null. Type", string2);
            return false;
        }
        if (string3.codePointCount(0, string3.length()) > n) {
            this.zzgi().zziv().zzd("Name is too long. Type, maximum supported length, name", string2, n, string3);
            return false;
        }
        return true;
    }

    final boolean zza(String string2, String[] arrstring, String string3) {
        int n;
        int n2;
        block6 : {
            if (string3 == null) {
                this.zzgi().zziv().zzg("Name is required and can't be null. Type", string2);
                return false;
            }
            Preconditions.checkNotNull(string3);
            String[] arrstring2 = zzasx;
            n = arrstring2.length;
            for (n2 = 0; n2 < n; ++n2) {
                if (!string3.startsWith(arrstring2[n2])) continue;
                n2 = 1;
                break block6;
            }
            n2 = 0;
        }
        if (n2 != 0) {
            this.zzgi().zziv().zze("Name starts with reserved prefix. Type, name", string2, string3);
            return false;
        }
        if (arrstring != null) {
            block7 : {
                Preconditions.checkNotNull(arrstring);
                n = arrstring.length;
                for (n2 = 0; n2 < n; ++n2) {
                    if (!zzkd.zzs(string3, arrstring[n2])) continue;
                    n2 = 1;
                    break block7;
                }
                n2 = 0;
            }
            if (n2 != 0) {
                this.zzgi().zziv().zze("Name is reserved. Type, name", string2, string3);
                return false;
            }
        }
        return true;
    }

    final int zzch(String string2) {
        if (!this.zzr("event", string2)) {
            return 2;
        }
        if (!this.zza("event", AppMeasurement.Event.zzacw, string2)) {
            return 13;
        }
        if (!this.zza("event", 40, string2)) {
            return 2;
        }
        return 0;
    }

    public final int zzci(String string2) {
        if (!this.zzq("user property", string2)) {
            return 6;
        }
        if (!this.zza("user property", AppMeasurement.UserProperty.zzada, string2)) {
            return 15;
        }
        if (!this.zza("user property", 24, string2)) {
            return 6;
        }
        return 0;
    }

    final int zzcj(String string2) {
        if (!this.zzr("user property", string2)) {
            return 6;
        }
        if (!this.zza("user property", AppMeasurement.UserProperty.zzada, string2)) {
            return 15;
        }
        if (!this.zza("user property", 24, string2)) {
            return 6;
        }
        return 0;
    }

    final boolean zzck(String string2) {
        if (TextUtils.isEmpty((CharSequence)string2)) {
            this.zzgi().zziv().log("Missing google_app_id. Firebase Analytics disabled. See https://goo.gl/NAOOOI");
            return false;
        }
        Preconditions.checkNotNull(string2);
        if (!string2.matches("^(1:\\d+:android:[a-f0-9]+|ca-app-pub-.*)$")) {
            this.zzgi().zziv().zzg("Invalid google_app_id. Firebase Analytics disabled. See https://goo.gl/NAOOOI. provided id", string2);
            return false;
        }
        return true;
    }

    final boolean zzcn(String string2) {
        if (TextUtils.isEmpty((CharSequence)string2)) {
            return false;
        }
        String string3 = this.zzgk().zzhs();
        this.zzgl();
        return string3.equals(string2);
    }

    @WorkerThread
    final long zzd(Context context, String string2) {
        this.zzab();
        Preconditions.checkNotNull(context);
        Preconditions.checkNotEmpty(string2);
        PackageManager packageManager = context.getPackageManager();
        MessageDigest messageDigest = zzkd.getMessageDigest();
        if (messageDigest == null) {
            this.zzgi().zziv().log("Could not get MD5 instance");
            return -1L;
        }
        if (packageManager != null) {
            try {
                if (!this.zze(context, string2)) {
                    context = Wrappers.packageManager(context).getPackageInfo(this.getContext().getPackageName(), 64);
                    if (context.signatures != null && context.signatures.length > 0) {
                        return zzkd.zzc(messageDigest.digest(context.signatures[0].toByteArray()));
                    }
                    this.zzgi().zziy().log("Could not get signatures");
                    return -1L;
                }
            }
            catch (PackageManager.NameNotFoundException nameNotFoundException) {
                this.zzgi().zziv().zzg("Package name not found", (Object)nameNotFoundException);
            }
        }
        return 0L;
    }

    final Bundle zzd(Bundle bundle) {
        Bundle bundle2 = new Bundle();
        if (bundle != null) {
            for (String string2 : bundle.keySet()) {
                Object object = this.zzh(string2, bundle.get(string2));
                if (object == null) {
                    this.zzgi().zziy().zzg("Param value can't be null", this.zzgf().zzbn(string2));
                    continue;
                }
                this.zza(bundle2, string2, object);
            }
        }
        return bundle2;
    }

    @Override
    protected final boolean zzgn() {
        return true;
    }

    @WorkerThread
    @Override
    protected final void zzgo() {
        long l;
        this.zzab();
        SecureRandom secureRandom = new SecureRandom();
        long l2 = l = secureRandom.nextLong();
        if (l == 0L) {
            l2 = l = secureRandom.nextLong();
            if (l == 0L) {
                this.zzgi().zziy().log("Utils falling back to Random for random id");
                l2 = l;
            }
        }
        this.zzasz.set(l2);
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    final Object zzh(String string2, Object object) {
        boolean bl = "_ev".equals(string2);
        int n = 256;
        if (bl) {
            bl = true;
            do {
                return zzkd.zza(n, object, bl);
                break;
            } while (true);
        }
        if (!zzkd.zzcm(string2)) {
            n = 100;
        }
        bl = false;
        return zzkd.zza(n, object, bl);
    }

    final int zzi(String string2, Object object) {
        boolean bl = "_ldl".equals(string2) ? this.zza("user property referrer", string2, zzkd.zzcl(string2), object, false) : this.zza("user property", string2, zzkd.zzcl(string2), object, false);
        if (bl) {
            return 0;
        }
        return 7;
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    final Object zzj(String string2, Object object) {
        int n;
        boolean bl;
        if ("_ldl".equals(string2)) {
            n = zzkd.zzcl(string2);
            bl = true;
            do {
                return zzkd.zza(n, object, bl);
                break;
            } while (true);
        }
        n = zzkd.zzcl(string2);
        bl = false;
        return zzkd.zza(n, object, bl);
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public final long zzln() {
        if (this.zzasz.get() == 0L) {
            AtomicLong atomicLong = this.zzasz;
            synchronized (atomicLong) {
                int n;
                long l = new Random(System.nanoTime() ^ this.zzbt().currentTimeMillis()).nextLong();
                this.zzadj = n = this.zzadj + 1;
                long l2 = n;
                return l + l2;
            }
        }
        AtomicLong atomicLong = this.zzasz;
        synchronized (atomicLong) {
            this.zzasz.compareAndSet(-1L, 1L);
            return this.zzasz.getAndIncrement();
        }
    }

    @WorkerThread
    final SecureRandom zzlo() {
        this.zzab();
        if (this.zzasy == null) {
            this.zzasy = new SecureRandom();
        }
        return this.zzasy;
    }

    public final int zzlp() {
        if (this.zzata == null) {
            this.zzata = GoogleApiAvailabilityLight.getInstance().getApkVersion(this.getContext()) / 1000;
        }
        return this.zzata;
    }

    final boolean zzq(String string2, String string3) {
        int n;
        if (string3 == null) {
            this.zzgi().zziv().zzg("Name is required and can't be null. Type", string2);
            return false;
        }
        if (string3.length() == 0) {
            this.zzgi().zziv().zzg("Name is required and can't be empty. Type", string2);
            return false;
        }
        int n2 = string3.codePointAt(0);
        if (!Character.isLetter(n2)) {
            this.zzgi().zziv().zze("Name must start with a letter. Type, name", string2, string3);
            return false;
        }
        int n3 = string3.length();
        for (n2 = Character.charCount((int)n2); n2 < n3; n2 += Character.charCount((int)n)) {
            n = string3.codePointAt(n2);
            if (n == 95 || Character.isLetterOrDigit(n)) continue;
            this.zzgi().zziv().zze("Name must consist of letters, digits or _ (underscores). Type, name", string2, string3);
            return false;
        }
        return true;
    }

    @WorkerThread
    final boolean zzx(String string2) {
        this.zzab();
        if (Wrappers.packageManager(this.getContext()).checkCallingOrSelfPermission(string2) == 0) {
            return true;
        }
        this.zzgi().zzjb().zzg("Permission not granted", string2);
        return false;
    }
}

