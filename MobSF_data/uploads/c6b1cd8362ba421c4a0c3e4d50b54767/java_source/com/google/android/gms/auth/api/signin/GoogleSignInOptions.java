/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.accounts.Account
 *  android.os.Parcel
 *  android.os.Parcelable
 *  android.os.Parcelable$Creator
 *  android.text.TextUtils
 *  org.json.JSONArray
 *  org.json.JSONException
 *  org.json.JSONObject
 */
package com.google.android.gms.auth.api.signin;

import android.accounts.Account;
import android.os.Parcel;
import android.os.Parcelable;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.text.TextUtils;
import com.google.android.gms.auth.api.signin.GoogleSignInOptionsCreator;
import com.google.android.gms.auth.api.signin.GoogleSignInOptionsExtension;
import com.google.android.gms.auth.api.signin.internal.GoogleSignInOptionsExtensionParcelable;
import com.google.android.gms.auth.api.signin.internal.HashAccumulator;
import com.google.android.gms.auth.api.signin.zzb;
import com.google.android.gms.common.api.Api;
import com.google.android.gms.common.api.Scope;
import com.google.android.gms.common.internal.Preconditions;
import com.google.android.gms.common.internal.ReflectedParcelable;
import com.google.android.gms.common.internal.safeparcel.AbstractSafeParcelable;
import com.google.android.gms.common.internal.safeparcel.SafeParcelWriter;
import com.google.android.gms.common.internal.safeparcel.SafeParcelable;
import com.google.android.gms.common.util.VisibleForTesting;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

@SafeParcelable.Class(creator="GoogleSignInOptionsCreator")
public class GoogleSignInOptions
extends AbstractSafeParcelable
implements Api.ApiOptions.Optional,
ReflectedParcelable {
    public static final Parcelable.Creator<GoogleSignInOptions> CREATOR;
    public static final GoogleSignInOptions DEFAULT_GAMES_SIGN_IN;
    public static final GoogleSignInOptions DEFAULT_SIGN_IN;
    @VisibleForTesting
    public static final Scope SCOPE_EMAIL;
    @VisibleForTesting
    public static final Scope SCOPE_GAMES;
    @VisibleForTesting
    public static final Scope SCOPE_GAMES_LITE;
    @VisibleForTesting
    public static final Scope SCOPE_OPEN_ID;
    @VisibleForTesting
    public static final Scope SCOPE_PROFILE;
    private static Comparator<Scope> zzaa;
    @SafeParcelable.VersionField(id=1)
    private final int versionCode;
    @SafeParcelable.Field(getter="getScopes", id=2)
    private final ArrayList<Scope> zzr;
    @SafeParcelable.Field(getter="getAccount", id=3)
    private Account zzs;
    @SafeParcelable.Field(getter="isIdTokenRequested", id=4)
    private boolean zzt;
    @SafeParcelable.Field(getter="isServerAuthCodeRequested", id=5)
    private final boolean zzu;
    @SafeParcelable.Field(getter="isForceCodeForRefreshToken", id=6)
    private final boolean zzv;
    @SafeParcelable.Field(getter="getServerClientId", id=7)
    private String zzw;
    @SafeParcelable.Field(getter="getHostedDomain", id=8)
    private String zzx;
    @SafeParcelable.Field(getter="getExtensions", id=9)
    private ArrayList<GoogleSignInOptionsExtensionParcelable> zzy;
    private Map<Integer, GoogleSignInOptionsExtensionParcelable> zzz;

    static {
        SCOPE_PROFILE = new Scope("profile");
        SCOPE_EMAIL = new Scope("email");
        SCOPE_OPEN_ID = new Scope("openid");
        SCOPE_GAMES_LITE = new Scope("https://www.googleapis.com/auth/games_lite");
        SCOPE_GAMES = new Scope("https://www.googleapis.com/auth/games");
        DEFAULT_SIGN_IN = new Builder().requestId().requestProfile().build();
        DEFAULT_GAMES_SIGN_IN = new Builder().requestScopes(SCOPE_GAMES_LITE, new Scope[0]).build();
        CREATOR = new GoogleSignInOptionsCreator();
        zzaa = new zzb();
    }

    @SafeParcelable.Constructor
    GoogleSignInOptions(@SafeParcelable.Param(id=1) int n, @SafeParcelable.Param(id=2) ArrayList<Scope> arrayList, @SafeParcelable.Param(id=3) Account account, @SafeParcelable.Param(id=4) boolean bl, @SafeParcelable.Param(id=5) boolean bl2, @SafeParcelable.Param(id=6) boolean bl3, @SafeParcelable.Param(id=7) String string2, @SafeParcelable.Param(id=8) String string3, @SafeParcelable.Param(id=9) ArrayList<GoogleSignInOptionsExtensionParcelable> arrayList2) {
        this(n, arrayList, account, bl, bl2, bl3, string2, string3, GoogleSignInOptions.zza(arrayList2));
    }

    private GoogleSignInOptions(int n, ArrayList<Scope> arrayList, Account account, boolean bl, boolean bl2, boolean bl3, String string2, String string3, Map<Integer, GoogleSignInOptionsExtensionParcelable> map) {
        this.versionCode = n;
        this.zzr = arrayList;
        this.zzs = account;
        this.zzt = bl;
        this.zzu = bl2;
        this.zzv = bl3;
        this.zzw = string2;
        this.zzx = string3;
        this.zzy = new ArrayList<GoogleSignInOptionsExtensionParcelable>(map.values());
        this.zzz = map;
    }

    /* synthetic */ GoogleSignInOptions(int n, ArrayList arrayList, Account account, boolean bl, boolean bl2, boolean bl3, String string2, String string3, Map map, zzb zzb2) {
        this(3, (ArrayList<Scope>)arrayList, account, bl, bl2, bl3, string2, string3, map);
    }

    @Nullable
    public static GoogleSignInOptions fromJsonString(@Nullable String string2) throws JSONException {
        if (TextUtils.isEmpty((CharSequence)string2)) {
            return null;
        }
        JSONObject jSONObject = new JSONObject(string2);
        HashSet<Scope> hashSet = new HashSet<Scope>();
        string2 = jSONObject.getJSONArray("scopes");
        int n = string2.length();
        for (int i = 0; i < n; ++i) {
            hashSet.add(new Scope(string2.getString(i)));
        }
        string2 = jSONObject.optString("accountName", null);
        string2 = !TextUtils.isEmpty((CharSequence)string2) ? new Account(string2, "com.google") : null;
        return new GoogleSignInOptions(3, new ArrayList<Scope>(hashSet), (Account)string2, jSONObject.getBoolean("idTokenRequested"), jSONObject.getBoolean("serverAuthRequested"), jSONObject.getBoolean("forceCodeForRefreshToken"), jSONObject.optString("serverClientId", null), jSONObject.optString("hostedDomain", null), new HashMap<Integer, GoogleSignInOptionsExtensionParcelable>());
    }

    private static Map<Integer, GoogleSignInOptionsExtensionParcelable> zza(@Nullable List<GoogleSignInOptionsExtensionParcelable> object) {
        HashMap<Integer, GoogleSignInOptionsExtensionParcelable> hashMap = new HashMap<Integer, GoogleSignInOptionsExtensionParcelable>();
        if (object == null) {
            return hashMap;
        }
        object = object.iterator();
        while (object.hasNext()) {
            GoogleSignInOptionsExtensionParcelable googleSignInOptionsExtensionParcelable = (GoogleSignInOptionsExtensionParcelable)object.next();
            hashMap.put(googleSignInOptionsExtensionParcelable.getType(), googleSignInOptionsExtensionParcelable);
        }
        return hashMap;
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    private final JSONObject zza() {
        JSONObject jSONObject = new JSONObject();
        try {
            JSONArray jSONArray = new JSONArray();
            Collections.sort(this.zzr, zzaa);
            ArrayList<Scope> arrayList = this.zzr;
            int n = arrayList.size();
            for (int i = 0; i < n; ++i) {
                Scope scope = arrayList.get(i);
                jSONArray.put((Object)scope.getScopeUri());
            }
            jSONObject.put("scopes", (Object)jSONArray);
            if (this.zzs != null) {
                jSONObject.put("accountName", (Object)this.zzs.name);
            }
            jSONObject.put("idTokenRequested", this.zzt);
            jSONObject.put("forceCodeForRefreshToken", this.zzv);
            jSONObject.put("serverAuthRequested", this.zzu);
            if (!TextUtils.isEmpty((CharSequence)this.zzw)) {
                jSONObject.put("serverClientId", (Object)this.zzw);
            }
            if (!TextUtils.isEmpty((CharSequence)this.zzx)) {
                jSONObject.put("hostedDomain", (Object)this.zzx);
            }
            return jSONObject;
        }
        catch (JSONException jSONException) {
            throw new RuntimeException((Throwable)jSONException);
        }
    }

    public boolean equals(Object object) {
        block5 : {
            boolean bl;
            boolean bl2;
            block7 : {
                block6 : {
                    if (object == null) {
                        return false;
                    }
                    try {
                        object = (GoogleSignInOptions)object;
                        if (this.zzy.size() > 0) break block5;
                        if (object.zzy.size() <= 0) break block6;
                        return false;
                    }
                    catch (ClassCastException classCastException) {
                        return false;
                    }
                }
                if (this.zzr.size() != object.getScopes().size()) break block5;
                if (this.zzr.containsAll(object.getScopes())) break block7;
                return false;
            }
            if (!(this.zzs == null ? object.getAccount() == null : this.zzs.equals((Object)object.getAccount())) || !(TextUtils.isEmpty((CharSequence)this.zzw) ? TextUtils.isEmpty((CharSequence)object.getServerClientId()) : this.zzw.equals(object.getServerClientId())) || this.zzv != object.isForceCodeForRefreshToken() || this.zzt != object.isIdTokenRequested() || (bl2 = this.zzu) != (bl = object.isServerAuthCodeRequested())) break block5;
            return true;
        }
        return false;
    }

    public Account getAccount() {
        return this.zzs;
    }

    public GoogleSignInOptionsExtensionParcelable getExtension(@GoogleSignInOptionsExtension.TypeId int n) {
        return this.zzz.get(n);
    }

    public ArrayList<GoogleSignInOptionsExtensionParcelable> getExtensions() {
        return this.zzy;
    }

    public String getHostedDomain() {
        return this.zzx;
    }

    public Scope[] getScopeArray() {
        return this.zzr.toArray(new Scope[this.zzr.size()]);
    }

    public ArrayList<Scope> getScopes() {
        return new ArrayList<Scope>(this.zzr);
    }

    public String getServerClientId() {
        return this.zzw;
    }

    public boolean hasExtension(@GoogleSignInOptionsExtension.TypeId int n) {
        return this.zzz.containsKey(n);
    }

    public int hashCode() {
        ArrayList<String> arrayList = new ArrayList<String>();
        ArrayList<Scope> arrayList2 = this.zzr;
        int n = arrayList2.size();
        for (int i = 0; i < n; ++i) {
            Scope scope = arrayList2.get(i);
            arrayList.add(scope.getScopeUri());
        }
        Collections.sort(arrayList);
        return new HashAccumulator().addObject(arrayList).addObject((Object)this.zzs).addObject(this.zzw).addBoolean(this.zzv).addBoolean(this.zzt).addBoolean(this.zzu).hash();
    }

    public boolean isForceCodeForRefreshToken() {
        return this.zzv;
    }

    public boolean isIdTokenRequested() {
        return this.zzt;
    }

    public boolean isServerAuthCodeRequested() {
        return this.zzu;
    }

    public String toJson() {
        return this.zza().toString();
    }

    public void writeToParcel(Parcel parcel, int n) {
        int n2 = SafeParcelWriter.beginObjectHeader(parcel);
        SafeParcelWriter.writeInt(parcel, 1, this.versionCode);
        SafeParcelWriter.writeTypedList(parcel, 2, this.getScopes(), false);
        SafeParcelWriter.writeParcelable(parcel, 3, (Parcelable)this.getAccount(), n, false);
        SafeParcelWriter.writeBoolean(parcel, 4, this.isIdTokenRequested());
        SafeParcelWriter.writeBoolean(parcel, 5, this.isServerAuthCodeRequested());
        SafeParcelWriter.writeBoolean(parcel, 6, this.isForceCodeForRefreshToken());
        SafeParcelWriter.writeString(parcel, 7, this.getServerClientId(), false);
        SafeParcelWriter.writeString(parcel, 8, this.getHostedDomain(), false);
        SafeParcelWriter.writeTypedList(parcel, 9, this.getExtensions(), false);
        SafeParcelWriter.finishObjectHeader(parcel, n2);
    }

    public static final class Builder {
        private Set<Scope> mScopes = new HashSet<Scope>();
        private Map<Integer, GoogleSignInOptionsExtensionParcelable> zzab = new HashMap<Integer, GoogleSignInOptionsExtensionParcelable>();
        private Account zzs;
        private boolean zzt;
        private boolean zzu;
        private boolean zzv;
        private String zzw;
        private String zzx;

        public Builder() {
        }

        public Builder(@NonNull GoogleSignInOptions googleSignInOptions) {
            Preconditions.checkNotNull(googleSignInOptions);
            this.mScopes = new HashSet<Scope>(googleSignInOptions.zzr);
            this.zzu = googleSignInOptions.zzu;
            this.zzv = googleSignInOptions.zzv;
            this.zzt = googleSignInOptions.zzt;
            this.zzw = googleSignInOptions.zzw;
            this.zzs = googleSignInOptions.zzs;
            this.zzx = googleSignInOptions.zzx;
            this.zzab = GoogleSignInOptions.zza(googleSignInOptions.zzy);
        }

        private final String zza(String string2) {
            Preconditions.checkNotEmpty(string2);
            boolean bl = this.zzw == null || this.zzw.equals(string2);
            Preconditions.checkArgument(bl, "two different server client ids provided");
            return string2;
        }

        public final Builder addExtension(GoogleSignInOptionsExtension googleSignInOptionsExtension) {
            if (this.zzab.containsKey(googleSignInOptionsExtension.getExtensionType())) {
                throw new IllegalStateException("Only one extension per type may be added");
            }
            if (googleSignInOptionsExtension.getImpliedScopes() != null) {
                this.mScopes.addAll(googleSignInOptionsExtension.getImpliedScopes());
            }
            this.zzab.put(googleSignInOptionsExtension.getExtensionType(), new GoogleSignInOptionsExtensionParcelable(googleSignInOptionsExtension));
            return this;
        }

        public final GoogleSignInOptions build() {
            if (this.mScopes.contains(GoogleSignInOptions.SCOPE_GAMES) && this.mScopes.contains(GoogleSignInOptions.SCOPE_GAMES_LITE)) {
                this.mScopes.remove(GoogleSignInOptions.SCOPE_GAMES_LITE);
            }
            if (this.zzt && (this.zzs == null || !this.mScopes.isEmpty())) {
                this.requestId();
            }
            return new GoogleSignInOptions(3, new ArrayList<Scope>(this.mScopes), this.zzs, this.zzt, this.zzu, this.zzv, this.zzw, this.zzx, this.zzab, null);
        }

        public final Builder requestEmail() {
            this.mScopes.add(GoogleSignInOptions.SCOPE_EMAIL);
            return this;
        }

        public final Builder requestId() {
            this.mScopes.add(GoogleSignInOptions.SCOPE_OPEN_ID);
            return this;
        }

        public final Builder requestIdToken(String string2) {
            this.zzt = true;
            this.zzw = this.zza(string2);
            return this;
        }

        public final Builder requestPhatIdToken(String string2) {
            return this.requestIdToken(string2).requestProfile().requestEmail();
        }

        public final Builder requestProfile() {
            this.mScopes.add(GoogleSignInOptions.SCOPE_PROFILE);
            return this;
        }

        public final /* varargs */ Builder requestScopes(Scope scope, Scope ... arrscope) {
            this.mScopes.add(scope);
            this.mScopes.addAll(Arrays.asList(arrscope));
            return this;
        }

        public final Builder requestServerAuthCode(String string2) {
            return this.requestServerAuthCode(string2, false);
        }

        public final Builder requestServerAuthCode(String string2, boolean bl) {
            this.zzu = true;
            this.zzw = this.zza(string2);
            this.zzv = bl;
            return this;
        }

        public final Builder setAccount(Account account) {
            this.zzs = Preconditions.checkNotNull(account);
            return this;
        }

        public final Builder setAccountName(String string2) {
            this.zzs = new Account(Preconditions.checkNotEmpty(string2), "com.google");
            return this;
        }

        public final Builder setHostedDomain(String string2) {
            this.zzx = Preconditions.checkNotEmpty(string2);
            return this;
        }
    }

}

