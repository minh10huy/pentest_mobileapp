/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.accounts.Account
 *  android.app.PendingIntent
 *  android.content.ComponentName
 *  android.content.Context
 *  android.content.Intent
 *  android.content.ServiceConnection
 *  android.os.Bundle
 *  android.os.DeadObjectException
 *  android.os.Handler
 *  android.os.IBinder
 *  android.os.IInterface
 *  android.os.Looper
 *  android.os.Message
 *  android.os.Parcelable
 *  android.os.RemoteException
 *  android.text.TextUtils
 *  android.util.Log
 *  javax.annotation.concurrent.GuardedBy
 */
package com.google.android.gms.common.internal;

import android.accounts.Account;
import android.app.PendingIntent;
import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.content.ServiceConnection;
import android.os.Bundle;
import android.os.DeadObjectException;
import android.os.Handler;
import android.os.IBinder;
import android.os.IInterface;
import android.os.Looper;
import android.os.Message;
import android.os.Parcelable;
import android.os.RemoteException;
import android.support.annotation.BinderThread;
import android.support.annotation.CallSuper;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.annotation.WorkerThread;
import android.text.TextUtils;
import android.util.Log;
import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.Feature;
import com.google.android.gms.common.GoogleApiAvailabilityLight;
import com.google.android.gms.common.api.CommonStatusCodes;
import com.google.android.gms.common.api.Scope;
import com.google.android.gms.common.internal.ConnectionInfo;
import com.google.android.gms.common.internal.GetServiceRequest;
import com.google.android.gms.common.internal.GmsClientSupervisor;
import com.google.android.gms.common.internal.GmsServiceEndpoint;
import com.google.android.gms.common.internal.IAccountAccessor;
import com.google.android.gms.common.internal.IGmsCallbacks;
import com.google.android.gms.common.internal.IGmsServiceBroker;
import com.google.android.gms.common.internal.Preconditions;
import com.google.android.gms.common.util.VisibleForTesting;
import java.io.FileDescriptor;
import java.io.PrintWriter;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.Date;
import java.util.Locale;
import java.util.Set;
import java.util.concurrent.atomic.AtomicInteger;
import javax.annotation.concurrent.GuardedBy;

public abstract class BaseGmsClient<T extends IInterface> {
    public static final int CONNECT_STATE_CONNECTED = 4;
    public static final int CONNECT_STATE_DISCONNECTED = 1;
    public static final int CONNECT_STATE_DISCONNECTING = 5;
    public static final int CONNECT_STATE_LOCAL_CONNECTING = 3;
    public static final int CONNECT_STATE_REMOTE_CONNECTING = 2;
    public static final String DEFAULT_ACCOUNT = "<<default account>>";
    public static final String FEATURE_GOOGLE_ME = "service_googleme";
    public static final String[] GOOGLE_PLUS_REQUIRED_FEATURES;
    public static final String KEY_PENDING_INTENT = "pendingIntent";
    private static final Feature[] zzqz;
    @VisibleForTesting
    protected ConnectionProgressReportCallbacks mConnectionProgressReportCallbacks;
    private final Context mContext;
    @VisibleForTesting
    protected AtomicInteger mDisconnectCount = new AtomicInteger(0);
    final Handler mHandler;
    private final Object mLock = new Object();
    private final Looper zzcn;
    private final GoogleApiAvailabilityLight zzgk;
    private int zzra;
    private long zzrb;
    private long zzrc;
    private int zzrd;
    private long zzre;
    @VisibleForTesting
    private GmsServiceEndpoint zzrf;
    private final GmsClientSupervisor zzrg;
    private final Object zzrh = new Object();
    @GuardedBy(value="mServiceBrokerLock")
    private IGmsServiceBroker zzri;
    @GuardedBy(value="mLock")
    private T zzrj;
    private final ArrayList<BaseGmsClient<T>> zzrk = new ArrayList();
    @GuardedBy(value="mLock")
    private BaseGmsClient<T> zzrl;
    @GuardedBy(value="mLock")
    private int zzrm = 1;
    private final BaseConnectionCallbacks zzrn;
    private final BaseOnConnectionFailedListener zzro;
    private final int zzrp;
    private final String zzrq;
    private ConnectionResult zzrr = null;
    private boolean zzrs = false;
    private volatile ConnectionInfo zzrt = null;

    static {
        zzqz = new Feature[0];
        GOOGLE_PLUS_REQUIRED_FEATURES = new String[]{"service_esmobile", FEATURE_GOOGLE_ME};
    }

    @VisibleForTesting
    protected BaseGmsClient(Context context, Handler handler, GmsClientSupervisor gmsClientSupervisor, GoogleApiAvailabilityLight googleApiAvailabilityLight, int n, BaseConnectionCallbacks baseConnectionCallbacks, BaseOnConnectionFailedListener baseOnConnectionFailedListener) {
        this.mContext = Preconditions.checkNotNull(context, "Context must not be null");
        this.mHandler = Preconditions.checkNotNull(handler, "Handler must not be null");
        this.zzcn = handler.getLooper();
        this.zzrg = Preconditions.checkNotNull(gmsClientSupervisor, "Supervisor must not be null");
        this.zzgk = Preconditions.checkNotNull(googleApiAvailabilityLight, "API availability must not be null");
        this.zzrp = n;
        this.zzrn = baseConnectionCallbacks;
        this.zzro = baseOnConnectionFailedListener;
        this.zzrq = null;
    }

    protected BaseGmsClient(Context context, Looper looper, int n, BaseConnectionCallbacks baseConnectionCallbacks, BaseOnConnectionFailedListener baseOnConnectionFailedListener, String string2) {
        this(context, looper, GmsClientSupervisor.getInstance(context), GoogleApiAvailabilityLight.getInstance(), n, Preconditions.checkNotNull(baseConnectionCallbacks), Preconditions.checkNotNull(baseOnConnectionFailedListener), string2);
    }

    @VisibleForTesting
    protected BaseGmsClient(Context context, Looper looper, GmsClientSupervisor gmsClientSupervisor, GoogleApiAvailabilityLight googleApiAvailabilityLight, int n, BaseConnectionCallbacks baseConnectionCallbacks, BaseOnConnectionFailedListener baseOnConnectionFailedListener, String string2) {
        this.mContext = Preconditions.checkNotNull(context, "Context must not be null");
        this.zzcn = Preconditions.checkNotNull(looper, "Looper must not be null");
        this.zzrg = Preconditions.checkNotNull(gmsClientSupervisor, "Supervisor must not be null");
        this.zzgk = Preconditions.checkNotNull(googleApiAvailabilityLight, "API availability must not be null");
        this.mHandler = new zzb(looper);
        this.zzrp = n;
        this.zzrn = baseConnectionCallbacks;
        this.zzro = baseOnConnectionFailedListener;
        this.zzrq = string2;
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    private final void zza(int n, T object) {
        boolean bl = n == 4;
        boolean bl2 = object != null;
        boolean bl3 = bl == bl2;
        Preconditions.checkArgument(bl3);
        Object object2 = this.mLock;
        synchronized (object2) {
            this.zzrm = n;
            this.zzrj = object;
            this.onSetConnectState(n, object);
            switch (n) {
                case 4: {
                    this.onConnectedLocked(object);
                    break;
                }
                case 2: 
                case 3: {
                    String string2;
                    StringBuilder stringBuilder;
                    if (this.zzrl != null && this.zzrf != null) {
                        object = this.zzrf.zzcw();
                        string2 = this.zzrf.getPackageName();
                        stringBuilder = new StringBuilder(String.valueOf(object).length() + 70 + String.valueOf(string2).length());
                        stringBuilder.append("Calling connect() while still connected, missing disconnect() for ");
                        stringBuilder.append((String)object);
                        stringBuilder.append(" on ");
                        stringBuilder.append(string2);
                        Log.e((String)"GmsClient", (String)stringBuilder.toString());
                        this.zzrg.unbindService(this.zzrf.zzcw(), this.zzrf.getPackageName(), this.zzrf.getBindFlags(), (ServiceConnection)this.zzrl, this.getRealClientName());
                        this.mDisconnectCount.incrementAndGet();
                    }
                    this.zzrl = new GmsServiceConnection(this.mDisconnectCount.get());
                    object = this.zzrm == 3 && this.getLocalStartServiceAction() != null ? new GmsServiceEndpoint(this.getContext().getPackageName(), this.getLocalStartServiceAction(), true, this.getServiceBindFlags()) : new GmsServiceEndpoint(this.getStartServicePackage(), this.getStartServiceAction(), false, this.getServiceBindFlags());
                    this.zzrf = object;
                    if (this.zzrg.bindService(this.zzrf.zzcw(), this.zzrf.getPackageName(), this.zzrf.getBindFlags(), (ServiceConnection)this.zzrl, this.getRealClientName())) break;
                    object = this.zzrf.zzcw();
                    string2 = this.zzrf.getPackageName();
                    stringBuilder = new StringBuilder(String.valueOf(object).length() + 34 + String.valueOf(string2).length());
                    stringBuilder.append("unable to connect to service: ");
                    stringBuilder.append((String)object);
                    stringBuilder.append(" on ");
                    stringBuilder.append(string2);
                    Log.e((String)"GmsClient", (String)stringBuilder.toString());
                    this.onPostServiceBindingHandler(16, null, this.mDisconnectCount.get());
                    break;
                }
                case 1: {
                    if (this.zzrl == null) break;
                    this.zzrg.unbindService(this.getStartServiceAction(), this.getStartServicePackage(), this.getServiceBindFlags(), (ServiceConnection)this.zzrl, this.getRealClientName());
                    this.zzrl = null;
                    break;
                }
            }
            return;
        }
    }

    private final void zza(ConnectionInfo connectionInfo) {
        this.zzrt = connectionInfo;
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    private final boolean zza(int n, int n2, T t) {
        Object object = this.mLock;
        synchronized (object) {
            if (this.zzrm != n) {
                return false;
            }
            this.zza(n2, t);
            return true;
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    private final boolean zzcq() {
        Object object = this.mLock;
        synchronized (object) {
            if (this.zzrm != 3) return false;
            return true;
        }
    }

    private final boolean zzcr() {
        if (this.zzrs) {
            return false;
        }
        if (TextUtils.isEmpty((CharSequence)this.getServiceDescriptor())) {
            return false;
        }
        if (TextUtils.isEmpty((CharSequence)this.getLocalStartServiceAction())) {
            return false;
        }
        try {
            Class.forName(this.getServiceDescriptor());
            return true;
        }
        catch (ClassNotFoundException classNotFoundException) {
            return false;
        }
    }

    private final void zzj(int n) {
        if (this.zzcq()) {
            n = 5;
            this.zzrs = true;
        } else {
            n = 4;
        }
        this.mHandler.sendMessage(this.mHandler.obtainMessage(n, this.mDisconnectCount.get(), 16));
    }

    public void checkAvailabilityAndConnect() {
        int n = this.zzgk.isGooglePlayServicesAvailable(this.mContext, this.getMinApkVersion());
        if (n != 0) {
            this.zza(1, null);
            this.triggerNotAvailable(new LegacyClientCallbackAdapter(), n, null);
            return;
        }
        this.connect(new LegacyClientCallbackAdapter());
    }

    protected final void checkConnected() {
        if (!this.isConnected()) {
            throw new IllegalStateException("Not connected. Call connect() and wait for onConnected() to be called.");
        }
    }

    public void connect(@NonNull ConnectionProgressReportCallbacks connectionProgressReportCallbacks) {
        this.mConnectionProgressReportCallbacks = Preconditions.checkNotNull(connectionProgressReportCallbacks, "Connection progress callbacks cannot be null.");
        this.zza(2, null);
    }

    @Nullable
    protected abstract T createServiceInterface(IBinder var1);

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public void disconnect() {
        this.mDisconnectCount.incrementAndGet();
        Object object = this.zzrk;
        synchronized (object) {
            int n = this.zzrk.size();
            int n2 = 0;
            do {
                if (n2 >= n) {
                    this.zzrk.clear();
                    // MONITOREXIT [5, 7, 8] lbl9 : MonitorExitStatement: MONITOREXIT : var3_1
                    object = this.zzrh;
                    synchronized (object) {
                        this.zzri = null;
                    }
                    this.zza(1, null);
                    return;
                }
                ((CallbackProxy)((Object)this.zzrk.get(n2))).removeListener();
                ++n2;
            } while (true);
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @Deprecated
    public final void doCallbackDEPRECATED(BaseGmsClient<T> baseGmsClient) {
        ArrayList<BaseGmsClient<T>> arrayList = this.zzrk;
        synchronized (arrayList) {
            this.zzrk.add(baseGmsClient);
        }
        this.mHandler.sendMessage(this.mHandler.obtainMessage(2, this.mDisconnectCount.get(), -1, baseGmsClient));
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Converted monitor instructions to comments
     * Lifted jumps to return sites
     */
    public void dump(String var1_1, FileDescriptor var2_2, PrintWriter var3_3, String[] var4_4) {
        var2_2 = this.mLock;
        // MONITORENTER : var2_2
        var5_5 = this.zzrm;
        var4_4 = this.zzrj;
        // MONITOREXIT : var2_2
        var2_2 = this.zzrh;
        // MONITORENTER : var2_2
        var8_6 = this.zzri;
        // MONITOREXIT : var2_2
        var3_3.append((CharSequence)var1_1).append("mConnectState=");
        switch (var5_5) {
            default: {
                var2_2 = "UNKNOWN";
                break;
            }
            case 5: {
                var2_2 = "DISCONNECTING";
                break;
            }
            case 4: {
                var2_2 = "CONNECTED";
                break;
            }
            case 3: {
                var2_2 = "LOCAL_CONNECTING";
                break;
            }
            case 2: {
                var2_2 = "REMOTE_CONNECTING";
                break;
            }
            case 1: {
                var2_2 = "DISCONNECTED";
            }
        }
        var3_3.print((String)var2_2);
        ** break;
lbl31: // 1 sources:
        var3_3.append(" mService=");
        if (var4_4 == null) {
            var3_3.append("null");
        } else {
            var3_3.append(this.getServiceDescriptor()).append("@").append(Integer.toHexString(System.identityHashCode((Object)var4_4.asBinder())));
        }
        var3_3.append(" mServiceBroker=");
        if (var8_6 == null) {
            var3_3.println("null");
        } else {
            var3_3.append("IGmsServiceBroker@").println(Integer.toHexString(System.identityHashCode((Object)var8_6.asBinder())));
        }
        var4_4 = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS", Locale.US);
        if (this.zzrc > 0L) {
            var2_2 = var3_3.append((CharSequence)var1_1).append("lastConnectedTime=");
            var6_7 = this.zzrc;
            var8_6 = var4_4.format(new Date(this.zzrc));
            var9_8 = new StringBuilder(String.valueOf(var8_6).length() + 21);
            var9_8.append(var6_7);
            var9_8.append(" ");
            var9_8.append((String)var8_6);
            var2_2.println(var9_8.toString());
        }
        if (this.zzrb > 0L) {
            var3_3.append((CharSequence)var1_1).append("lastSuspendedCause=");
            switch (this.zzra) {
                default: {
                    var2_2 = String.valueOf(this.zzra);
                    break;
                }
                case 2: {
                    var2_2 = "CAUSE_NETWORK_LOST";
                    break;
                }
                case 1: {
                    var2_2 = "CAUSE_SERVICE_DISCONNECTED";
                }
            }
            var3_3.append((CharSequence)var2_2);
            ** break;
lbl64: // 1 sources:
            var2_2 = var3_3.append(" lastSuspendedTime=");
            var6_7 = this.zzrb;
            var8_6 = var4_4.format(new Date(this.zzrb));
            var9_8 = new StringBuilder(String.valueOf(var8_6).length() + 21);
            var9_8.append(var6_7);
            var9_8.append(" ");
            var9_8.append((String)var8_6);
            var2_2.println(var9_8.toString());
        }
        if (this.zzre <= 0L) return;
        var3_3.append((CharSequence)var1_1).append("lastFailedStatus=").append(CommonStatusCodes.getStatusCodeString(this.zzrd));
        var1_1 = var3_3.append(" lastFailedTime=");
        var6_7 = this.zzre;
        var2_2 = var4_4.format(new Date(this.zzre));
        var3_3 = new StringBuilder(String.valueOf(var2_2).length() + 21);
        var3_3.append(var6_7);
        var3_3.append(" ");
        var3_3.append((String)var2_2);
        var1_1.println(var3_3.toString());
    }

    public Account getAccount() {
        return null;
    }

    public final Account getAccountOrDefault() {
        if (this.getAccount() != null) {
            return this.getAccount();
        }
        return new Account("<<default account>>", "com.google");
    }

    public Feature[] getApiFeatures() {
        return zzqz;
    }

    @Nullable
    public final Feature[] getAvailableFeatures() {
        ConnectionInfo connectionInfo = this.zzrt;
        if (connectionInfo == null) {
            return null;
        }
        return connectionInfo.getAvailableFeatures();
    }

    public Bundle getConnectionHint() {
        return null;
    }

    public final Context getContext() {
        return this.mContext;
    }

    public String getEndpointPackageName() {
        if (this.isConnected() && this.zzrf != null) {
            return this.zzrf.getPackageName();
        }
        throw new RuntimeException("Failed to connect when checking package");
    }

    protected Bundle getGetServiceRequestExtraArgs() {
        return new Bundle();
    }

    @VisibleForTesting
    public final Handler getHandlerForTesting() {
        return this.mHandler;
    }

    @Nullable
    protected String getLocalStartServiceAction() {
        return null;
    }

    public final Looper getLooper() {
        return this.zzcn;
    }

    public int getMinApkVersion() {
        return GoogleApiAvailabilityLight.GOOGLE_PLAY_SERVICES_VERSION_CODE;
    }

    @Nullable
    protected final String getRealClientName() {
        if (this.zzrq == null) {
            return this.mContext.getClass().getName();
        }
        return this.zzrq;
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Converted monitor instructions to comments
     * Lifted jumps to return sites
     */
    @WorkerThread
    public void getRemoteService(IAccountAccessor object, Set<Scope> set) {
        block11 : {
            Object object2 = this.getGetServiceRequestExtraArgs();
            object2 = new GetServiceRequest(this.zzrp).setCallingPackage(this.mContext.getPackageName()).setExtraArgs((Bundle)object2);
            if (set != null) {
                object2.setScopes(set);
            }
            if (this.requiresSignIn()) {
                object2.setClientRequestedAccount(this.getAccountOrDefault()).setAuthenticatedAccount((IAccountAccessor)object);
            } else if (this.requiresAccount()) {
                object2.setClientRequestedAccount(this.getAccount());
            }
            object2.setClientRequiredFeatures(this.getRequiredFeatures());
            object2.setClientApiFeatures(this.getApiFeatures());
            try {
                object = this.zzrh;
                // MONITORENTER : object
                if (this.zzri == null) break block11;
            }
            catch (RemoteException | RuntimeException runtimeException) {
                Log.w((String)"GmsClient", (String)"IGmsServiceBroker.getService failed", (Throwable)runtimeException);
                this.onPostInitHandler(8, null, null, this.mDisconnectCount.get());
                return;
            }
            catch (SecurityException securityException) {
                throw securityException;
            }
            catch (DeadObjectException deadObjectException) {
                Log.w((String)"GmsClient", (String)"IGmsServiceBroker.getService failed", (Throwable)deadObjectException);
                this.triggerConnectionSuspended(1);
                return;
            }
            this.zzri.getService(new GmsCallbacks(this, this.mDisconnectCount.get()), (GetServiceRequest)object2);
            return;
        }
        Log.w((String)"GmsClient", (String)"mServiceBroker is null, client disconnected");
        // MONITOREXIT : object
        return;
    }

    public Feature[] getRequiredFeatures() {
        return zzqz;
    }

    protected Set<Scope> getScopes() {
        return Collections.EMPTY_SET;
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public final T getService() throws DeadObjectException {
        Object object = this.mLock;
        synchronized (object) {
            if (this.zzrm == 5) {
                throw new DeadObjectException();
            }
            this.checkConnected();
            boolean bl = this.zzrj != null;
            Preconditions.checkState(bl, "Client is connected but service is null");
            T t = this.zzrj;
            return t;
        }
    }

    protected int getServiceBindFlags() {
        return 129;
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @Nullable
    public IBinder getServiceBrokerBinder() {
        Object object = this.zzrh;
        synchronized (object) {
            if (this.zzri != null) return this.zzri.asBinder();
            return null;
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @VisibleForTesting
    public final IGmsServiceBroker getServiceBrokerForTesting() {
        Object object = this.zzrh;
        synchronized (object) {
            return this.zzri;
        }
    }

    @NonNull
    protected abstract String getServiceDescriptor();

    public Intent getSignInIntent() {
        throw new UnsupportedOperationException("Not a sign in API");
    }

    @NonNull
    protected abstract String getStartServiceAction();

    protected String getStartServicePackage() {
        return "com.google.android.gms";
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public boolean isConnected() {
        Object object = this.mLock;
        synchronized (object) {
            if (this.zzrm != 4) return false;
            return true;
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public boolean isConnecting() {
        Object object = this.mLock;
        synchronized (object) {
            if (this.zzrm == 2) return true;
            if (this.zzrm != 3) return false;
            return true;
        }
    }

    @CallSuper
    protected void onConnectedLocked(@NonNull T t) {
        this.zzrc = System.currentTimeMillis();
    }

    @CallSuper
    protected void onConnectionFailed(ConnectionResult connectionResult) {
        this.zzrd = connectionResult.getErrorCode();
        this.zzre = System.currentTimeMillis();
    }

    @CallSuper
    protected void onConnectionSuspended(int n) {
        this.zzra = n;
        this.zzrb = System.currentTimeMillis();
    }

    protected void onPostInitHandler(int n, IBinder iBinder, Bundle bundle, int n2) {
        this.mHandler.sendMessage(this.mHandler.obtainMessage(1, n2, -1, (Object)new PostInitCallback(n, iBinder, bundle)));
    }

    protected void onPostServiceBindingHandler(int n, @Nullable Bundle bundle, int n2) {
        this.mHandler.sendMessage(this.mHandler.obtainMessage(7, n2, -1, (Object)new PostServiceBindingCallback(n, bundle)));
    }

    void onSetConnectState(int n, T t) {
    }

    public void onUserSignOut(@NonNull SignOutCallbacks signOutCallbacks) {
        signOutCallbacks.onSignOutComplete();
    }

    public boolean providesSignIn() {
        return false;
    }

    public boolean requiresAccount() {
        return false;
    }

    public boolean requiresGooglePlayServices() {
        return true;
    }

    public boolean requiresSignIn() {
        return false;
    }

    @VisibleForTesting
    public void setConnectionInfoForTesting(ConnectionInfo connectionInfo) {
        this.zzrt = connectionInfo;
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @VisibleForTesting
    public final void setServiceBrokerForTesting(IGmsServiceBroker iGmsServiceBroker) {
        Object object = this.zzrh;
        synchronized (object) {
            this.zzri = iGmsServiceBroker;
            return;
        }
    }

    @VisibleForTesting
    public final void setServiceForTesting(T t) {
        int n = t != null ? 4 : 1;
        this.zza(n, t);
    }

    public void triggerConnectionSuspended(int n) {
        this.mHandler.sendMessage(this.mHandler.obtainMessage(6, this.mDisconnectCount.get(), n));
    }

    @VisibleForTesting
    protected void triggerNotAvailable(@NonNull ConnectionProgressReportCallbacks connectionProgressReportCallbacks, int n, @Nullable PendingIntent pendingIntent) {
        this.mConnectionProgressReportCallbacks = Preconditions.checkNotNull(connectionProgressReportCallbacks, "Connection progress callbacks cannot be null.");
        this.mHandler.sendMessage(this.mHandler.obtainMessage(3, this.mDisconnectCount.get(), n, (Object)pendingIntent));
    }

    public static interface BaseConnectionCallbacks {
        public static final int CAUSE_NETWORK_LOST = 2;
        public static final int CAUSE_SERVICE_DISCONNECTED = 1;

        public void onConnected(@Nullable Bundle var1);

        public void onConnectionSuspended(int var1);
    }

    public static interface BaseOnConnectionFailedListener {
        public void onConnectionFailed(@NonNull ConnectionResult var1);
    }

    protected abstract class CallbackProxy<TListener> {
        private TListener zzli;
        private boolean zzrv;

        public CallbackProxy(TListener TListener) {
            this.zzli = TListener;
            this.zzrv = false;
        }

        /*
         * Enabled aggressive block sorting
         * Enabled unnecessary exception pruning
         * Enabled aggressive exception aggregation
         * Converted monitor instructions to comments
         * Lifted jumps to return sites
         */
        public void deliverCallback() {
            // MONITORENTER : this
            TListener TListener = this.zzli;
            if (this.zzrv) {
                String string2 = String.valueOf(this);
                StringBuilder stringBuilder = new StringBuilder(String.valueOf(string2).length() + 47);
                stringBuilder.append("Callback proxy ");
                stringBuilder.append(string2);
                stringBuilder.append(" being reused. This is not safe.");
                Log.w((String)"GmsClient", (String)stringBuilder.toString());
            }
            // MONITOREXIT : this
            if (TListener != null) {
                try {
                    this.deliverCallback(TListener);
                }
                catch (RuntimeException runtimeException) {
                    this.onDeliverCallbackFailed();
                    throw runtimeException;
                }
            } else {
                this.onDeliverCallbackFailed();
            }
            // MONITORENTER : this
            this.zzrv = true;
            // MONITOREXIT : this
            this.unregister();
        }

        protected abstract void deliverCallback(TListener var1);

        protected abstract void onDeliverCallbackFailed();

        /*
         * Enabled aggressive block sorting
         * Enabled unnecessary exception pruning
         * Enabled aggressive exception aggregation
         */
        public void removeListener() {
            synchronized (this) {
                this.zzli = null;
                return;
            }
        }

        /*
         * Enabled aggressive block sorting
         * Enabled unnecessary exception pruning
         * Enabled aggressive exception aggregation
         */
        public void unregister() {
            this.removeListener();
            ArrayList arrayList = BaseGmsClient.this.zzrk;
            synchronized (arrayList) {
                BaseGmsClient.this.zzrk.remove(this);
                return;
            }
        }
    }

    public static interface ConnectionProgressReportCallbacks {
        public void onReportServiceBinding(@NonNull ConnectionResult var1);
    }

    @VisibleForTesting
    public static final class GmsCallbacks
    extends IGmsCallbacks.Stub {
        private BaseGmsClient zzrw;
        private final int zzrx;

        public GmsCallbacks(@NonNull BaseGmsClient baseGmsClient, int n) {
            this.zzrw = baseGmsClient;
            this.zzrx = n;
        }

        @BinderThread
        @Override
        public final void onAccountValidationComplete(int n, @Nullable Bundle bundle) {
            Log.wtf((String)"GmsClient", (String)"received deprecated onAccountValidationComplete callback, ignoring", (Throwable)new Exception());
        }

        @BinderThread
        @Override
        public final void onPostInitComplete(int n, @NonNull IBinder iBinder, @Nullable Bundle bundle) {
            Preconditions.checkNotNull(this.zzrw, "onPostInitComplete can be called only once per call to getRemoteService");
            this.zzrw.onPostInitHandler(n, iBinder, bundle, this.zzrx);
            this.zzrw = null;
        }

        @BinderThread
        @Override
        public final void onPostInitCompleteWithConnectionInfo(int n, @NonNull IBinder iBinder, @NonNull ConnectionInfo connectionInfo) {
            Preconditions.checkNotNull(this.zzrw, "onPostInitCompleteWithConnectionInfo can be called only once per call togetRemoteService");
            Preconditions.checkNotNull(connectionInfo);
            this.zzrw.zza(connectionInfo);
            this.onPostInitComplete(n, iBinder, connectionInfo.getResolutionBundle());
        }
    }

    @VisibleForTesting
    public final class GmsServiceConnection
    implements ServiceConnection {
        private final int zzrx;

        public GmsServiceConnection(int n) {
            this.zzrx = n;
        }

        /*
         * Enabled aggressive block sorting
         * Enabled unnecessary exception pruning
         * Enabled aggressive exception aggregation
         */
        public final void onServiceConnected(ComponentName object, IBinder iBinder) {
            if (iBinder == null) {
                BaseGmsClient.this.zzj(16);
                return;
            }
            object = BaseGmsClient.this.zzrh;
            synchronized (object) {
                BaseGmsClient.this.zzri = IGmsServiceBroker.Stub.asInterface(iBinder);
            }
            BaseGmsClient.this.onPostServiceBindingHandler(0, null, this.zzrx);
        }

        /*
         * Enabled aggressive block sorting
         * Enabled unnecessary exception pruning
         * Enabled aggressive exception aggregation
         */
        public final void onServiceDisconnected(ComponentName object) {
            object = BaseGmsClient.this.zzrh;
            synchronized (object) {
                BaseGmsClient.this.zzri = null;
            }
            BaseGmsClient.this.mHandler.sendMessage(BaseGmsClient.this.mHandler.obtainMessage(6, this.zzrx, 1));
        }
    }

    protected class LegacyClientCallbackAdapter
    implements ConnectionProgressReportCallbacks {
        @Override
        public void onReportServiceBinding(@NonNull ConnectionResult connectionResult) {
            if (connectionResult.isSuccess()) {
                BaseGmsClient.this.getRemoteService(null, BaseGmsClient.this.getScopes());
                return;
            }
            if (BaseGmsClient.this.zzro != null) {
                BaseGmsClient.this.zzro.onConnectionFailed(connectionResult);
            }
        }
    }

    protected final class PostInitCallback
    extends zza {
        public final IBinder service;

        @BinderThread
        public PostInitCallback(int n, IBinder iBinder, Bundle bundle) {
            super(n, bundle);
            this.service = iBinder;
        }

        @Override
        protected final void handleServiceFailure(ConnectionResult connectionResult) {
            if (BaseGmsClient.this.zzro != null) {
                BaseGmsClient.this.zzro.onConnectionFailed(connectionResult);
            }
            BaseGmsClient.this.onConnectionFailed(connectionResult);
        }

        /*
         * Enabled aggressive block sorting
         * Enabled unnecessary exception pruning
         * Enabled aggressive exception aggregation
         */
        @Override
        protected final boolean handleServiceSuccess() {
            String string2;
            boolean bl = false;
            try {
                string2 = this.service.getInterfaceDescriptor();
            }
            catch (RemoteException remoteException) {}
            if (!BaseGmsClient.this.getServiceDescriptor().equals(string2)) {
                String string3 = BaseGmsClient.this.getServiceDescriptor();
                StringBuilder stringBuilder = new StringBuilder(String.valueOf(string3).length() + 34 + String.valueOf(string2).length());
                stringBuilder.append("service descriptor mismatch: ");
                stringBuilder.append(string3);
                stringBuilder.append(" vs. ");
                stringBuilder.append(string2);
                Log.e((String)"GmsClient", (String)stringBuilder.toString());
                return false;
            }
            Object t = BaseGmsClient.this.createServiceInterface(this.service);
            boolean bl2 = bl;
            if (t == null) return bl2;
            if (!BaseGmsClient.this.zza(2, 4, (T)t)) {
                bl2 = bl;
                if (!BaseGmsClient.this.zza(3, 4, (T)t)) return bl2;
            }
            BaseGmsClient.this.zzrr = null;
            Bundle bundle = BaseGmsClient.this.getConnectionHint();
            if (BaseGmsClient.this.zzrn == null) return true;
            BaseGmsClient.this.zzrn.onConnected(bundle);
            return true;
            Log.w((String)"GmsClient", (String)"service probably died");
            return false;
        }
    }

    protected final class PostServiceBindingCallback
    extends zza {
        @BinderThread
        public PostServiceBindingCallback(@Nullable int n, Bundle bundle) {
            super(n, bundle);
        }

        @Override
        protected final void handleServiceFailure(ConnectionResult connectionResult) {
            BaseGmsClient.this.mConnectionProgressReportCallbacks.onReportServiceBinding(connectionResult);
            BaseGmsClient.this.onConnectionFailed(connectionResult);
        }

        @Override
        protected final boolean handleServiceSuccess() {
            BaseGmsClient.this.mConnectionProgressReportCallbacks.onReportServiceBinding(ConnectionResult.RESULT_SUCCESS);
            return true;
        }
    }

    public static interface SignOutCallbacks {
        public void onSignOutComplete();
    }

    private abstract class zza
    extends BaseGmsClient<T> {
        public final Bundle resolution;
        public final int statusCode;

        @BinderThread
        protected zza(int n, Bundle bundle) {
            super(true);
            this.statusCode = n;
            this.resolution = bundle;
        }

        protected void deliverCallback(Boolean bl) {
            Object var3_2 = null;
            if (bl == null) {
                BaseGmsClient.this.zza(1, null);
                return;
            }
            int n = this.statusCode;
            if (n != 0) {
                if (n != 10) {
                    BaseGmsClient.this.zza(1, null);
                    bl = var3_2;
                    if (this.resolution != null) {
                        bl = (PendingIntent)this.resolution.getParcelable(BaseGmsClient.KEY_PENDING_INTENT);
                    }
                    this.handleServiceFailure(new ConnectionResult(this.statusCode, (PendingIntent)bl));
                    return;
                }
                BaseGmsClient.this.zza(1, null);
                throw new IllegalStateException("A fatal developer error has occurred. Check the logs for further information.");
            }
            if (!this.handleServiceSuccess()) {
                BaseGmsClient.this.zza(1, null);
                this.handleServiceFailure(new ConnectionResult(8, null));
            }
        }

        protected abstract void handleServiceFailure(ConnectionResult var1);

        protected abstract boolean handleServiceSuccess();

        protected void onDeliverCallbackFailed() {
        }
    }

    final class zzb
    extends Handler {
        public zzb(Looper looper) {
            super(looper);
        }

        private static void zza(Message object) {
            object = (CallbackProxy)object.obj;
            object.onDeliverCallbackFailed();
            object.unregister();
        }

        private static boolean zzb(Message message) {
            if (message.what != 2 && message.what != 1) {
                if (message.what == 7) {
                    return true;
                }
                return false;
            }
            return true;
        }

        public final void handleMessage(Message object) {
            if (BaseGmsClient.this.mDisconnectCount.get() != object.arg1) {
                if (zzb.zzb((Message)object)) {
                    zzb.zza((Message)object);
                }
                return;
            }
            if (!(object.what != 1 && object.what != 7 && object.what != 4 && object.what != 5 || BaseGmsClient.this.isConnecting())) {
                zzb.zza((Message)object);
                return;
            }
            int n = object.what;
            PendingIntent pendingIntent = null;
            if (n == 4) {
                BaseGmsClient.this.zzrr = new ConnectionResult(object.arg2);
                if (BaseGmsClient.this.zzcr() && !BaseGmsClient.this.zzrs) {
                    BaseGmsClient.this.zza(3, null);
                    return;
                }
                object = BaseGmsClient.this.zzrr != null ? BaseGmsClient.this.zzrr : new ConnectionResult(8);
                BaseGmsClient.this.mConnectionProgressReportCallbacks.onReportServiceBinding((ConnectionResult)object);
                BaseGmsClient.this.onConnectionFailed((ConnectionResult)object);
                return;
            }
            if (object.what == 5) {
                object = BaseGmsClient.this.zzrr != null ? BaseGmsClient.this.zzrr : new ConnectionResult(8);
                BaseGmsClient.this.mConnectionProgressReportCallbacks.onReportServiceBinding((ConnectionResult)object);
                BaseGmsClient.this.onConnectionFailed((ConnectionResult)object);
                return;
            }
            if (object.what == 3) {
                if (object.obj instanceof PendingIntent) {
                    pendingIntent = (PendingIntent)object.obj;
                }
                object = new ConnectionResult(object.arg2, pendingIntent);
                BaseGmsClient.this.mConnectionProgressReportCallbacks.onReportServiceBinding((ConnectionResult)object);
                BaseGmsClient.this.onConnectionFailed((ConnectionResult)object);
                return;
            }
            if (object.what == 6) {
                BaseGmsClient.this.zza(5, null);
                if (BaseGmsClient.this.zzrn != null) {
                    BaseGmsClient.this.zzrn.onConnectionSuspended(object.arg2);
                }
                BaseGmsClient.this.onConnectionSuspended(object.arg2);
                BaseGmsClient.this.zza(5, 1, (T)null);
                return;
            }
            if (object.what == 2 && !BaseGmsClient.this.isConnected()) {
                zzb.zza((Message)object);
                return;
            }
            if (zzb.zzb((Message)object)) {
                ((CallbackProxy)object.obj).deliverCallback();
                return;
            }
            n = object.what;
            object = new StringBuilder(45);
            object.append("Don't know how to handle message: ");
            object.append(n);
            Log.wtf((String)"GmsClient", (String)object.toString(), (Throwable)new Exception());
        }
    }

}

