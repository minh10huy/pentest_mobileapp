/*
 * Decompiled with CFR 0_132.
 */
package com.google.android.gms.common.util;

import com.google.android.gms.common.internal.Objects;
import com.google.android.gms.common.util.Predicate;
import com.google.android.gms.common.util.VisibleForTesting;
import java.lang.reflect.Array;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;

@VisibleForTesting
public final class ArrayUtils {
    private ArrayUtils() {
    }

    public static int[] appendToArray(int[] arrn, int n) {
        arrn = arrn != null && arrn.length != 0 ? Arrays.copyOf(arrn, arrn.length + 1) : new int[1];
        arrn[arrn.length - 1] = n;
        return arrn;
    }

    public static <T> T[] appendToArray(T[] arrobject, T t) {
        if (arrobject == null && t == null) {
            throw new IllegalArgumentException("Cannot generate array of generic type w/o class info");
        }
        arrobject = arrobject == null ? (Object[])Array.newInstance(t.getClass(), 1) : Arrays.copyOf(arrobject, arrobject.length + 1);
        arrobject[arrobject.length - 1] = t;
        return arrobject;
    }

    public static /* varargs */ <T> T[] concat(T[] ... arrT) {
        int n;
        if (arrT.length == 0) {
            return (Object[])Array.newInstance(arrT.getClass(), 0);
        }
        int n2 = 0;
        for (n = 0; n < arrT.length; ++n) {
            n2 += arrT[n].length;
        }
        T[] arrT2 = Arrays.copyOf(arrT[0], n2);
        n2 = arrT[0].length;
        for (n = 1; n < arrT.length; ++n) {
            T[] arrT3 = arrT[n];
            System.arraycopy(arrT3, 0, arrT2, n2, arrT3.length);
            n2 += arrT3.length;
        }
        return arrT2;
    }

    public static /* varargs */ byte[] concatByteArrays(byte[] ... arrby) {
        int n;
        if (arrby.length == 0) {
            return new byte[0];
        }
        int n2 = 0;
        for (n = 0; n < arrby.length; ++n) {
            n2 += arrby[n].length;
        }
        byte[] arrby2 = Arrays.copyOf(arrby[0], n2);
        n2 = arrby[0].length;
        for (n = 1; n < arrby.length; ++n) {
            byte[] arrby3 = arrby[n];
            System.arraycopy(arrby3, 0, arrby2, n2, arrby3.length);
            n2 += arrby3.length;
        }
        return arrby2;
    }

    public static boolean contains(byte[] arrby, byte by) {
        if (arrby == null) {
            return false;
        }
        int n = arrby.length;
        for (int i = 0; i < n; ++i) {
            if (arrby[i] != by) continue;
            return true;
        }
        return false;
    }

    public static boolean contains(char[] arrc, char c) {
        if (arrc == null) {
            return false;
        }
        int n = arrc.length;
        for (int i = 0; i < n; ++i) {
            if (arrc[i] != c) continue;
            return true;
        }
        return false;
    }

    public static boolean contains(double[] arrd, double d) {
        if (arrd == null) {
            return false;
        }
        int n = arrd.length;
        for (int i = 0; i < n; ++i) {
            if (arrd[i] != d) continue;
            return true;
        }
        return false;
    }

    public static boolean contains(float[] arrf, float f, float f2) {
        if (arrf == null) {
            return false;
        }
        for (float f3 : arrf) {
            if (f - f2 > f3 || f3 > f + f2) continue;
            return true;
        }
        return false;
    }

    public static boolean contains(int[] arrn, int n) {
        if (arrn == null) {
            return false;
        }
        int n2 = arrn.length;
        for (int i = 0; i < n2; ++i) {
            if (arrn[i] != n) continue;
            return true;
        }
        return false;
    }

    public static <T> boolean contains(T[] arrT, T t) {
        if (ArrayUtils.indexOf(arrT, t) >= 0) {
            return true;
        }
        return false;
    }

    public static boolean contains(short[] arrs, short s) {
        if (arrs == null) {
            return false;
        }
        int n = arrs.length;
        for (int i = 0; i < n; ++i) {
            if (arrs[i] != s) continue;
            return true;
        }
        return false;
    }

    public static boolean contains(boolean[] arrbl, boolean bl) {
        if (arrbl == null) {
            return false;
        }
        int n = arrbl.length;
        for (int i = 0; i < n; ++i) {
            if (arrbl[i] != bl) continue;
            return true;
        }
        return false;
    }

    public static boolean containsIgnoreCase(String[] arrstring, String string2) {
        if (arrstring == null) {
            return false;
        }
        for (String string3 : arrstring) {
            if (string3 == string2) {
                return true;
            }
            if (string3 == null || !string3.equalsIgnoreCase(string2)) continue;
            return true;
        }
        return false;
    }

    public static boolean equalsAnyOrder(Object[] object, Object[] arrobject) {
        if (object == arrobject) {
            return true;
        }
        int n = object == null ? 0 : ((Object[])object).length;
        int n2 = arrobject == null ? 0 : arrobject.length;
        if (n == 0 && n2 == 0) {
            return true;
        }
        if (n != n2) {
            return false;
        }
        zza zza2 = new zza(n);
        n2 = ((Object[])object).length;
        for (n = 0; n < n2; ++n) {
            zza2.zzb(object[n]);
        }
        n2 = arrobject.length;
        for (n = 0; n < n2; ++n) {
            zza2.zzc(arrobject[n]);
        }
        object = zza2.zzzb.values().iterator();
        while (object.hasNext()) {
            if (((com.google.android.gms.common.util.zza)object.next()).count == 0) continue;
            return false;
        }
        return true;
    }

    public static <T> int indexOf(T[] arrT, T t) {
        int n = arrT != null ? arrT.length : 0;
        for (int i = 0; i < n; ++i) {
            if (!Objects.equal(arrT[i], t)) continue;
            return i;
        }
        return -1;
    }

    public static <T> ArrayList<T> newArrayList() {
        return new ArrayList();
    }

    public static <T> int rearrange(T[] arrT, Predicate<T> predicate) {
        if (arrT != null) {
            if (arrT.length == 0) {
                return 0;
            }
            int n = arrT.length;
            int n2 = 0;
            for (int i = 0; i < n; ++i) {
                int n3 = n2;
                if (predicate.apply(arrT[i])) {
                    if (n2 != i) {
                        T t = arrT[n2];
                        arrT[n2] = arrT[i];
                        arrT[i] = t;
                    }
                    n3 = n2 + 1;
                }
                n2 = n3;
            }
            return n2;
        }
        return 0;
    }

    public static /* varargs */ int[] removeAll(int[] arrn, int ... arrn2) {
        if (arrn == null) {
            return null;
        }
        if (arrn2 != null && arrn2.length != 0) {
            int n;
            int[] arrn3 = new int[arrn.length];
            int n2 = arrn2.length;
            int n3 = 0;
            if (n2 == 1) {
                int n4 = arrn.length;
                n3 = 0;
                n2 = 0;
                do {
                    n = n2;
                    if (n3 < n4) {
                        int n5 = arrn[n3];
                        n = n2;
                        if (arrn2[0] != n5) {
                            arrn3[n2] = n5;
                            n = n2 + 1;
                        }
                        ++n3;
                        n2 = n;
                        continue;
                    }
                    break;
                } while (true);
            } else {
                int n6 = arrn.length;
                n2 = 0;
                do {
                    n = n2;
                    if (n3 >= n6) break;
                    int n7 = arrn[n3];
                    n = n2;
                    if (!ArrayUtils.contains(arrn2, n7)) {
                        arrn3[n2] = n7;
                        n = n2 + 1;
                    }
                    ++n3;
                    n2 = n;
                } while (true);
            }
            return ArrayUtils.resize(arrn3, n);
        }
        return Arrays.copyOf(arrn, arrn.length);
    }

    public static /* varargs */ <T> T[] removeAll(T[] arrT, T ... arrT2) {
        if (arrT == null) {
            return null;
        }
        if (arrT2 != null && arrT2.length != 0) {
            int n;
            Object[] arrobject = (Object[])Array.newInstance(arrT2.getClass().getComponentType(), arrT.length);
            int n2 = arrT2.length;
            int n3 = 0;
            if (n2 == 1) {
                int n4 = arrT.length;
                n3 = 0;
                n2 = 0;
                do {
                    n = n2;
                    if (n3 < n4) {
                        T t = arrT[n3];
                        n = n2;
                        if (!Objects.equal(arrT2[0], t)) {
                            arrobject[n2] = t;
                            n = n2 + 1;
                        }
                        ++n3;
                        n2 = n;
                        continue;
                    }
                    break;
                } while (true);
            } else {
                int n5 = arrT.length;
                n2 = 0;
                do {
                    n = n2;
                    if (n3 >= n5) break;
                    T t = arrT[n3];
                    n = n2;
                    if (!ArrayUtils.contains(arrT2, t)) {
                        arrobject[n2] = t;
                        n = n2 + 1;
                    }
                    ++n3;
                    n2 = n;
                } while (true);
            }
            return ArrayUtils.resize(arrobject, n);
        }
        return Arrays.copyOf(arrT, arrT.length);
    }

    public static int[] resize(int[] arrn, int n) {
        if (arrn == null) {
            return null;
        }
        int[] arrn2 = arrn;
        if (n != arrn.length) {
            arrn2 = Arrays.copyOf(arrn, n);
        }
        return arrn2;
    }

    public static <T> T[] resize(T[] arrT, int n) {
        if (arrT == null) {
            return null;
        }
        T[] arrT2 = arrT;
        if (n != arrT.length) {
            arrT2 = Arrays.copyOf(arrT, n);
        }
        return arrT2;
    }

    public static <T> ArrayList<T> toArrayList(Collection<T> collection) {
        if (collection == null) {
            return null;
        }
        return new ArrayList<T>(collection);
    }

    public static <T> ArrayList<T> toArrayList(T[] arrT) {
        int n = arrT.length;
        ArrayList<T> arrayList = new ArrayList<T>(n);
        for (int i = 0; i < n; ++i) {
            arrayList.add(arrT[i]);
        }
        return arrayList;
    }

    public static long[] toLongArray(Collection<Long> object) {
        int n = 0;
        if (object != null && object.size() != 0) {
            long[] arrl = new long[object.size()];
            object = object.iterator();
            while (object.hasNext()) {
                arrl[n] = (Long)object.next();
                ++n;
            }
            return arrl;
        }
        return new long[0];
    }

    public static long[] toLongArray(Long[] arrlong) {
        if (arrlong == null) {
            return new long[0];
        }
        long[] arrl = new long[arrlong.length];
        for (int i = 0; i < arrlong.length; ++i) {
            arrl[i] = arrlong[i];
        }
        return arrl;
    }

    public static int[] toPrimitiveArray(Collection<Integer> object) {
        int n = 0;
        if (object != null && object.size() != 0) {
            int[] arrn = new int[object.size()];
            object = object.iterator();
            while (object.hasNext()) {
                arrn[n] = (Integer)object.next();
                ++n;
            }
            return arrn;
        }
        return new int[0];
    }

    public static int[] toPrimitiveArray(Integer[] arrinteger) {
        if (arrinteger == null) {
            return new int[0];
        }
        int[] arrn = new int[arrinteger.length];
        for (int i = 0; i < arrinteger.length; ++i) {
            arrn[i] = arrinteger[i];
        }
        return arrn;
    }

    public static String[] toStringArray(Collection<String> collection) {
        if (collection != null && collection.size() != 0) {
            return collection.toArray(new String[collection.size()]);
        }
        return new String[0];
    }

    public static Boolean[] toWrapperArray(boolean[] arrbl) {
        if (arrbl == null) {
            return null;
        }
        int n = arrbl.length;
        Boolean[] arrboolean = new Boolean[n];
        for (int i = 0; i < n; ++i) {
            arrboolean[i] = arrbl[i];
        }
        return arrboolean;
    }

    public static Byte[] toWrapperArray(byte[] arrby) {
        if (arrby == null) {
            return null;
        }
        int n = arrby.length;
        Byte[] arrbyte = new Byte[n];
        for (int i = 0; i < n; ++i) {
            arrbyte[i] = arrby[i];
        }
        return arrbyte;
    }

    public static Character[] toWrapperArray(char[] arrc) {
        if (arrc == null) {
            return null;
        }
        int n = arrc.length;
        Character[] arrcharacter = new Character[n];
        for (int i = 0; i < n; ++i) {
            arrcharacter[i] = Character.valueOf(arrc[i]);
        }
        return arrcharacter;
    }

    public static Double[] toWrapperArray(double[] arrd) {
        if (arrd == null) {
            return null;
        }
        int n = arrd.length;
        Double[] arrdouble = new Double[n];
        for (int i = 0; i < n; ++i) {
            arrdouble[i] = arrd[i];
        }
        return arrdouble;
    }

    public static Float[] toWrapperArray(float[] arrf) {
        if (arrf == null) {
            return null;
        }
        int n = arrf.length;
        Float[] arrfloat = new Float[n];
        for (int i = 0; i < n; ++i) {
            arrfloat[i] = Float.valueOf(arrf[i]);
        }
        return arrfloat;
    }

    public static Integer[] toWrapperArray(int[] arrn) {
        if (arrn == null) {
            return null;
        }
        int n = arrn.length;
        Integer[] arrinteger = new Integer[n];
        for (int i = 0; i < n; ++i) {
            arrinteger[i] = arrn[i];
        }
        return arrinteger;
    }

    public static Long[] toWrapperArray(long[] arrl) {
        if (arrl == null) {
            return null;
        }
        int n = arrl.length;
        Long[] arrlong = new Long[n];
        for (int i = 0; i < n; ++i) {
            arrlong[i] = arrl[i];
        }
        return arrlong;
    }

    public static Short[] toWrapperArray(short[] arrs) {
        if (arrs == null) {
            return null;
        }
        int n = arrs.length;
        Short[] arrshort = new Short[n];
        for (int i = 0; i < n; ++i) {
            arrshort[i] = arrs[i];
        }
        return arrshort;
    }

    public static void writeArray(StringBuilder stringBuilder, double[] arrd) {
        int n = arrd.length;
        for (int i = 0; i < n; ++i) {
            if (i != 0) {
                stringBuilder.append(",");
            }
            stringBuilder.append(Double.toString(arrd[i]));
        }
    }

    public static void writeArray(StringBuilder stringBuilder, float[] arrf) {
        int n = arrf.length;
        for (int i = 0; i < n; ++i) {
            if (i != 0) {
                stringBuilder.append(",");
            }
            stringBuilder.append(Float.toString(arrf[i]));
        }
    }

    public static void writeArray(StringBuilder stringBuilder, int[] arrn) {
        int n = arrn.length;
        for (int i = 0; i < n; ++i) {
            if (i != 0) {
                stringBuilder.append(",");
            }
            stringBuilder.append(Integer.toString(arrn[i]));
        }
    }

    public static void writeArray(StringBuilder stringBuilder, long[] arrl) {
        int n = arrl.length;
        for (int i = 0; i < n; ++i) {
            if (i != 0) {
                stringBuilder.append(",");
            }
            stringBuilder.append(Long.toString(arrl[i]));
        }
    }

    public static <T> void writeArray(StringBuilder stringBuilder, T[] arrT) {
        int n = arrT.length;
        for (int i = 0; i < n; ++i) {
            if (i != 0) {
                stringBuilder.append(",");
            }
            stringBuilder.append(arrT[i].toString());
        }
    }

    public static void writeArray(StringBuilder stringBuilder, boolean[] arrbl) {
        int n = arrbl.length;
        for (int i = 0; i < n; ++i) {
            if (i != 0) {
                stringBuilder.append(",");
            }
            stringBuilder.append(Boolean.toString(arrbl[i]));
        }
    }

    public static void writeStringArray(StringBuilder stringBuilder, String[] arrstring) {
        int n = arrstring.length;
        for (int i = 0; i < n; ++i) {
            if (i != 0) {
                stringBuilder.append(",");
            }
            stringBuilder.append("\"");
            stringBuilder.append(arrstring[i]);
            stringBuilder.append("\"");
        }
    }

    private static final class zza {
        HashMap<Object, com.google.android.gms.common.util.zza> zzzb;

        zza(int n) {
            this.zzzb = new HashMap(n);
        }

        private final com.google.android.gms.common.util.zza zzd(Object object) {
            com.google.android.gms.common.util.zza zza2;
            com.google.android.gms.common.util.zza zza3 = zza2 = this.zzzb.get(object);
            if (zza2 == null) {
                zza3 = new com.google.android.gms.common.util.zza();
                this.zzzb.put(object, zza3);
            }
            return zza3;
        }

        final void zzb(Object object) {
            object = this.zzd(object);
            ++object.count;
        }

        final void zzc(Object object) {
            object = this.zzd(object);
            --object.count;
        }
    }

}

