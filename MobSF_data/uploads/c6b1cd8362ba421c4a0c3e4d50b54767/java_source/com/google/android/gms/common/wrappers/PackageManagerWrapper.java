/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.annotation.TargetApi
 *  android.app.Activity
 *  android.app.AppOpsManager
 *  android.content.ComponentName
 *  android.content.Context
 *  android.content.pm.ApplicationInfo
 *  android.content.pm.PackageInfo
 *  android.content.pm.PackageManager
 *  android.content.pm.PackageManager$NameNotFoundException
 *  android.graphics.drawable.Drawable
 *  android.os.Binder
 *  android.os.Process
 *  android.util.Log
 */
package com.google.android.gms.common.wrappers;

import android.annotation.TargetApi;
import android.app.Activity;
import android.app.AppOpsManager;
import android.content.ComponentName;
import android.content.Context;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.graphics.drawable.Drawable;
import android.os.Binder;
import android.os.Process;
import android.support.v4.content.PermissionChecker;
import android.support.v4.util.Pair;
import android.util.Log;
import com.google.android.gms.common.util.PlatformVersion;
import com.google.android.gms.common.wrappers.InstantApps;

public class PackageManagerWrapper {
    private final Context zzjp;

    public PackageManagerWrapper(Context context) {
        this.zzjp = context;
    }

    public boolean allowApiAccess(String string2, int n) {
        return true;
    }

    public void checkCallerIsNotInstantApp() {
        if (this.isCallerInstantApp()) {
            throw new SecurityException("This operation is not supported for instant apps.");
        }
    }

    public int checkCallingOrSelfPermission(String string2) {
        return this.zzjp.checkCallingOrSelfPermission(string2);
    }

    public int checkCallingOrSelfPermissionAndAppOps(String string2) {
        return PermissionChecker.checkCallingOrSelfPermission(this.zzjp, string2);
    }

    public int checkCallingPermission(String string2) {
        return this.zzjp.checkCallingPermission(string2);
    }

    @Deprecated
    public int checkCallingPermission(String string2, String string3) {
        return this.checkPermission(string2, string3);
    }

    public int checkCallingPermissionAndAppOps(String string2, String string3) {
        return PermissionChecker.checkCallingPermission(this.zzjp, string2, string3);
    }

    public void checkPackage(int n, String string2) {
        if (!this.uidHasPackageName(n, string2)) {
            StringBuilder stringBuilder = new StringBuilder(String.valueOf(string2).length() + 39);
            stringBuilder.append("Package ");
            stringBuilder.append(string2);
            stringBuilder.append(" does not belong to ");
            stringBuilder.append(n);
            throw new SecurityException(stringBuilder.toString());
        }
    }

    public int checkPermission(String string2, int n, int n2) {
        return this.zzjp.checkPermission(string2, n, n2);
    }

    @Deprecated
    public int checkPermission(String string2, int n, int n2, String string3) {
        return this.checkPermission(string2, n, n2);
    }

    public int checkPermission(String string2, String string3) {
        return this.zzjp.getPackageManager().checkPermission(string2, string3);
    }

    public int checkPermissionAndAppOps(String string2, int n, int n2, String string3) {
        return PermissionChecker.checkPermission(this.zzjp, string2, n, n2, string3);
    }

    public ApplicationInfo getApplicationInfo(String string2, int n) throws PackageManager.NameNotFoundException {
        return this.zzjp.getPackageManager().getApplicationInfo(string2, n);
    }

    public CharSequence getApplicationLabel(String string2) throws PackageManager.NameNotFoundException {
        return this.zzjp.getPackageManager().getApplicationLabel(this.zzjp.getPackageManager().getApplicationInfo(string2, 0));
    }

    public Pair<CharSequence, Drawable> getApplicationLabelAndIcon(String string2) throws PackageManager.NameNotFoundException {
        string2 = this.zzjp.getPackageManager().getApplicationInfo(string2, 0);
        return Pair.create(this.zzjp.getPackageManager().getApplicationLabel((ApplicationInfo)string2), this.zzjp.getPackageManager().getApplicationIcon((ApplicationInfo)string2));
    }

    public ComponentName getCallingActivity(Activity activity) {
        return activity.getCallingActivity();
    }

    public String getCallingPackage(Activity object) {
        if ((object = object.getCallingActivity()) == null) {
            return null;
        }
        CharSequence charSequence = object.getPackageName();
        if (charSequence == null) {
            object = String.valueOf(object);
            charSequence = new StringBuilder(String.valueOf(object).length() + 54);
            charSequence.append("getCallingPackage(): Couldn't get a package name from ");
            charSequence.append((String)object);
            Log.e((String)"PackageManagerWrapper", (String)charSequence.toString());
            return null;
        }
        return charSequence;
    }

    protected Context getContext() {
        return this.zzjp;
    }

    public PackageInfo getPackageInfo(String string2, int n) throws PackageManager.NameNotFoundException {
        return this.zzjp.getPackageManager().getPackageInfo(string2, n);
    }

    public String[] getPackagesForUid(int n) {
        return this.zzjp.getPackageManager().getPackagesForUid(n);
    }

    public boolean isCallerInstantApp() {
        String string2;
        if (Binder.getCallingUid() == Process.myUid()) {
            return InstantApps.isInstantApp(this.zzjp);
        }
        if (PlatformVersion.isAtLeastO() && (string2 = this.zzjp.getPackageManager().getNameForUid(Binder.getCallingUid())) != null) {
            return this.zzjp.getPackageManager().isInstantApp(string2);
        }
        return false;
    }

    public boolean isInstantAppUid(int n) {
        return false;
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    @TargetApi(value=19)
    public boolean uidHasPackageName(int n, String string2) {
        if (PlatformVersion.isAtLeastKitKat()) {
            try {
                ((AppOpsManager)this.zzjp.getSystemService("appops")).checkPackage(n, string2);
                return true;
            }
            catch (SecurityException securityException) {
                return false;
            }
        }
        String[] arrstring = this.zzjp.getPackageManager().getPackagesForUid(n);
        if (string2 == null) return false;
        if (arrstring == null) return false;
        n = 0;
        while (n < arrstring.length) {
            if (string2.equals(arrstring[n])) {
                return true;
            }
            ++n;
        }
        return false;
    }
}

