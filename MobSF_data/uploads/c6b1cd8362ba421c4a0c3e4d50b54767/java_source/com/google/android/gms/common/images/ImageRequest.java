/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.content.Context
 *  android.content.res.Resources
 *  android.graphics.Bitmap
 *  android.graphics.drawable.BitmapDrawable
 *  android.graphics.drawable.Drawable
 *  android.graphics.drawable.Drawable$ConstantState
 *  android.net.Uri
 *  android.widget.ImageView
 *  android.widget.TextView
 */
package com.google.android.gms.common.images;

import android.content.Context;
import android.content.res.Resources;
import android.graphics.Bitmap;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.Drawable;
import android.net.Uri;
import android.widget.ImageView;
import android.widget.TextView;
import com.google.android.gms.common.images.ImageManager;
import com.google.android.gms.common.images.internal.CrossFadingDrawable;
import com.google.android.gms.common.images.internal.ImageUtils;
import com.google.android.gms.common.images.internal.LoadingImageView;
import com.google.android.gms.common.images.internal.PostProcessedResourceCache;
import com.google.android.gms.common.internal.Asserts;
import com.google.android.gms.common.internal.Objects;
import com.google.android.gms.common.util.PlatformVersion;
import java.lang.ref.WeakReference;

public abstract class ImageRequest {
    protected int mLoadingPlaceholderResId = 0;
    protected int mNoDataPlaceholderResId = 0;
    protected ImageManager.OnImageLoadedListener mOnImageLoadedListener;
    protected int mPostProcessingFlags;
    protected boolean mUseNewDrawable = false;
    final zza zzpk;
    private boolean zzpl = true;
    private boolean zzpm = false;
    private boolean zzpn = true;

    public ImageRequest(Uri uri, int n) {
        this.zzpk = new zza(uri);
        this.mNoDataPlaceholderResId = n;
    }

    private final Drawable zza(Context context, PostProcessedResourceCache postProcessedResourceCache, int n) {
        Resources resources = context.getResources();
        if (this.mPostProcessingFlags > 0) {
            PostProcessedResourceCache.PostProcessedResource postProcessedResource = new PostProcessedResourceCache.PostProcessedResource(n, this.mPostProcessingFlags);
            Drawable drawable2 = (Drawable)postProcessedResourceCache.get(postProcessedResource);
            context = drawable2;
            if (drawable2 == null) {
                context = resources.getDrawable(n);
                if ((this.mPostProcessingFlags & 1) != 0) {
                    context = this.frameDrawableInCircle(resources, (Drawable)context);
                }
                postProcessedResourceCache.put(postProcessedResource, context);
            }
            return context;
        }
        return resources.getDrawable(n);
    }

    protected CrossFadingDrawable createTransitionDrawable(Drawable drawable2, Drawable drawable3) {
        Drawable drawable4;
        if (drawable2 != null) {
            drawable4 = drawable2;
            if (drawable2 instanceof CrossFadingDrawable) {
                drawable4 = ((CrossFadingDrawable)drawable2).getEndDrawable();
            }
        } else {
            drawable4 = null;
        }
        return new CrossFadingDrawable(drawable4, drawable3);
    }

    protected Drawable frameDrawableInCircle(Resources resources, Drawable drawable2) {
        return ImageUtils.frameDrawableInCircle(resources, drawable2);
    }

    protected abstract void loadImage(Drawable var1, boolean var2, boolean var3, boolean var4);

    public void setCrossFadeAlwaysEnabled(boolean bl) {
        this.zzpm = bl;
        if (bl) {
            this.setCrossFadeEnabled(true);
        }
    }

    public void setCrossFadeEnabled(boolean bl) {
        this.zzpl = bl;
    }

    public void setLoadingPlaceholder(int n) {
        this.mLoadingPlaceholderResId = n;
    }

    public void setLoadingPlaceholderEnabled(boolean bl) {
        this.zzpn = bl;
    }

    public void setNoDataPlaceholder(int n) {
        this.mNoDataPlaceholderResId = n;
    }

    public void setOnImageLoadedListener(ImageManager.OnImageLoadedListener onImageLoadedListener) {
        this.mOnImageLoadedListener = onImageLoadedListener;
    }

    public void setPostProcessingFlags(int n) {
        this.mPostProcessingFlags = n;
    }

    public void setUseNewDrawable(boolean bl) {
        this.mUseNewDrawable = bl;
    }

    protected boolean shouldCrossFade(boolean bl, boolean bl2) {
        if (this.zzpl && !bl2 && (!bl || this.zzpm)) {
            return true;
        }
        return false;
    }

    final void zza(Context context, Bitmap bitmap, boolean bl) {
        Asserts.checkNotNull((Object)bitmap);
        Bitmap bitmap2 = bitmap;
        if ((this.mPostProcessingFlags & 1) != 0) {
            bitmap2 = ImageUtils.frameBitmapInCircle(bitmap);
        }
        context = new BitmapDrawable(context.getResources(), bitmap2);
        if (this.mOnImageLoadedListener != null) {
            this.mOnImageLoadedListener.onImageLoaded(this.zzpk.uri, (Drawable)context, true);
        }
        this.loadImage((Drawable)context, bl, false, true);
    }

    final void zza(Context context, PostProcessedResourceCache postProcessedResourceCache) {
        if (this.zzpn) {
            Drawable drawable2 = null;
            if (this.mLoadingPlaceholderResId != 0) {
                drawable2 = this.zza(context, postProcessedResourceCache, this.mLoadingPlaceholderResId);
            }
            this.loadImage(drawable2, false, true, false);
        }
    }

    final void zza(Context object, PostProcessedResourceCache postProcessedResourceCache, boolean bl) {
        object = this.mNoDataPlaceholderResId != 0 ? this.zza((Context)object, postProcessedResourceCache, this.mNoDataPlaceholderResId) : null;
        if (this.mOnImageLoadedListener != null) {
            this.mOnImageLoadedListener.onImageLoaded(this.zzpk.uri, (Drawable)object, false);
        }
        this.loadImage((Drawable)object, bl, false, false);
    }

    public static final class ImageViewImageRequest
    extends ImageRequest {
        private WeakReference<ImageView> zzpo;

        public ImageViewImageRequest(ImageView imageView, int n) {
            super(null, n);
            Asserts.checkNotNull((Object)imageView);
            this.zzpo = new WeakReference<ImageView>(imageView);
        }

        public ImageViewImageRequest(ImageView imageView, Uri uri) {
            super(uri, 0);
            Asserts.checkNotNull((Object)imageView);
            this.zzpo = new WeakReference<ImageView>(imageView);
        }

        public final boolean equals(Object object) {
            if (!(object instanceof ImageViewImageRequest)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            ImageViewImageRequest imageViewImageRequest = (ImageViewImageRequest)object;
            object = this.zzpo.get();
            imageViewImageRequest = imageViewImageRequest.zzpo.get();
            if (imageViewImageRequest != null && object != null && Objects.equal(imageViewImageRequest, object)) {
                return true;
            }
            return false;
        }

        public final int hashCode() {
            return 0;
        }

        @Override
        protected final void loadImage(Drawable drawable2, boolean bl, boolean bl2, boolean bl3) {
            block9 : {
                int n;
                boolean bl4;
                ImageView imageView;
                block10 : {
                    imageView = this.zzpo.get();
                    if (imageView == null) break block9;
                    n = 0;
                    bl4 = !bl2 && !bl3;
                    if (!bl4 || !(imageView instanceof LoadingImageView)) break block10;
                    int n2 = ((LoadingImageView)imageView).getLoadedNoDataPlaceholderResId();
                    if (this.mNoDataPlaceholderResId != 0 && n2 == this.mNoDataPlaceholderResId) break block9;
                }
                bl = this.shouldCrossFade(bl, bl2);
                Object object = drawable2;
                if (this.mUseNewDrawable) {
                    object = drawable2;
                    if (drawable2 != null) {
                        object = drawable2.getConstantState().newDrawable();
                    }
                }
                drawable2 = object;
                if (bl) {
                    drawable2 = this.createTransitionDrawable(imageView.getDrawable(), (Drawable)object);
                }
                imageView.setImageDrawable(drawable2);
                if (imageView instanceof LoadingImageView) {
                    imageView = (LoadingImageView)imageView;
                    object = bl3 ? this.zzpk.uri : null;
                    imageView.setLoadedUri((Uri)object);
                    if (bl4) {
                        n = this.mNoDataPlaceholderResId;
                    }
                    imageView.setLoadedNoDataPlaceholderResId(n);
                }
                if (bl) {
                    ((CrossFadingDrawable)drawable2).startTransition(250);
                }
            }
        }
    }

    public static final class ListenerImageRequest
    extends ImageRequest {
        private WeakReference<ImageManager.OnImageLoadedListener> zzpp;

        public ListenerImageRequest(ImageManager.OnImageLoadedListener onImageLoadedListener, Uri uri) {
            super(uri, 0);
            Asserts.checkNotNull(onImageLoadedListener);
            this.zzpp = new WeakReference<ImageManager.OnImageLoadedListener>(onImageLoadedListener);
        }

        public final boolean equals(Object object) {
            if (!(object instanceof ListenerImageRequest)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            object = (ListenerImageRequest)object;
            ImageManager.OnImageLoadedListener onImageLoadedListener = this.zzpp.get();
            ImageManager.OnImageLoadedListener onImageLoadedListener2 = object.zzpp.get();
            if (onImageLoadedListener2 != null && onImageLoadedListener != null && Objects.equal(onImageLoadedListener2, onImageLoadedListener) && Objects.equal(object.zzpk, this.zzpk)) {
                return true;
            }
            return false;
        }

        public final int hashCode() {
            return Objects.hashCode(this.zzpk);
        }

        @Override
        protected final void loadImage(Drawable drawable2, boolean bl, boolean bl2, boolean bl3) {
            ImageManager.OnImageLoadedListener onImageLoadedListener;
            if (!bl2 && (onImageLoadedListener = this.zzpp.get()) != null) {
                onImageLoadedListener.onImageLoaded(this.zzpk.uri, drawable2, bl3);
            }
        }
    }

    public static final class PostProcessingFlags {
        public static final int CIRCLE_CROP = 1;
    }

    public static final class TextViewImageRequest
    extends ImageRequest {
        public static final int POSITION_BOTTOM = 3;
        public static final int POSITION_END = 2;
        public static final int POSITION_START = 0;
        public static final int POSITION_TOP = 1;
        private WeakReference<TextView> zzpq;
        private int zzpr = -1;

        public TextViewImageRequest(TextView textView, int n, int n2) {
            super(null, n2);
            Asserts.checkNotNull((Object)textView);
            boolean bl = true;
            if (n == 0 || n == 1 || n == 2 || n == 3) {
                bl = false;
            }
            StringBuilder stringBuilder = new StringBuilder(29);
            stringBuilder.append("Invalid position: ");
            stringBuilder.append(n);
            Asserts.checkState(bl, stringBuilder.toString());
            this.zzpq = new WeakReference<TextView>(textView);
            this.zzpr = n;
        }

        public TextViewImageRequest(TextView textView, int n, Uri object) {
            super((Uri)object, 0);
            Asserts.checkNotNull((Object)textView);
            boolean bl = true;
            if (n == 0 || n == 1 || n == 2 || n == 3) {
                bl = false;
            }
            object = new StringBuilder(29);
            object.append("Invalid position: ");
            object.append(n);
            Asserts.checkState(bl, object.toString());
            this.zzpq = new WeakReference<TextView>(textView);
            this.zzpr = n;
        }

        public final boolean equals(Object object) {
            if (!(object instanceof TextViewImageRequest)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            object = (TextViewImageRequest)object;
            TextView textView = this.zzpq.get();
            TextView textView2 = object.zzpq.get();
            if (textView2 != null && textView != null && Objects.equal((Object)textView2, (Object)textView) && Objects.equal(object.zzpr, this.zzpr)) {
                return true;
            }
            return false;
        }

        public final int hashCode() {
            return Objects.hashCode(this.zzpr);
        }

        @Override
        protected final void loadImage(Drawable drawable2, boolean bl, boolean bl2, boolean bl3) {
            TextView textView = this.zzpq.get();
            if (textView != null) {
                int n = this.zzpr;
                bl = this.shouldCrossFade(bl, bl2);
                Object object = PlatformVersion.isAtLeastJellyBeanMR1() ? textView.getCompoundDrawablesRelative() : textView.getCompoundDrawables();
                Drawable drawable3 = object[n];
                Drawable drawable4 = drawable2;
                if (bl) {
                    drawable4 = this.createTransitionDrawable(drawable3, drawable2);
                }
                drawable2 = n == 0 ? drawable4 : object[0];
                drawable3 = n == 1 ? drawable4 : object[1];
                Drawable drawable5 = n == 2 ? drawable4 : object[2];
                object = n == 3 ? drawable4 : object[3];
                if (PlatformVersion.isAtLeastJellyBeanMR1()) {
                    textView.setCompoundDrawablesRelativeWithIntrinsicBounds(drawable2, drawable3, drawable5, object);
                } else {
                    textView.setCompoundDrawablesWithIntrinsicBounds(drawable2, drawable3, drawable5, object);
                }
                if (bl) {
                    ((CrossFadingDrawable)drawable4).startTransition(250);
                }
            }
        }
    }

    static final class zza {
        public final Uri uri;

        public zza(Uri uri) {
            this.uri = uri;
        }

        public final boolean equals(Object object) {
            if (!(object instanceof zza)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            return Objects.equal((Object)((zza)object).uri, (Object)this.uri);
        }

        public final int hashCode() {
            return Objects.hashCode(new Object[]{this.uri});
        }
    }

}

