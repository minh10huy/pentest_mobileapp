/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.content.Context
 *  android.os.Bundle
 */
package com.google.android.gms.measurement;

import android.content.Context;
import android.os.Bundle;
import android.support.annotation.Keep;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.annotation.RequiresPermission;
import android.support.annotation.Size;
import android.support.annotation.WorkerThread;
import android.support.v4.util.ArrayMap;
import com.google.android.gms.common.annotation.KeepForSdk;
import com.google.android.gms.common.api.internal.GoogleServices;
import com.google.android.gms.common.internal.Preconditions;
import com.google.android.gms.common.util.VisibleForTesting;
import com.google.android.gms.internal.measurement.zzdu;
import com.google.android.gms.internal.measurement.zzfi;
import com.google.android.gms.internal.measurement.zzfk;
import com.google.android.gms.internal.measurement.zzgn;
import com.google.android.gms.internal.measurement.zzhm;
import com.google.android.gms.internal.measurement.zzig;
import com.google.android.gms.internal.measurement.zzih;
import com.google.android.gms.internal.measurement.zzka;
import com.google.android.gms.internal.measurement.zzkd;
import com.google.firebase.analytics.FirebaseAnalytics;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

@Deprecated
@Keep
public class AppMeasurement {
    @KeepForSdk
    public static final String CRASH_ORIGIN = "crash";
    @KeepForSdk
    public static final String FCM_ORIGIN = "fcm";
    @KeepForSdk
    public static final String FIAM_ORIGIN = "fiam";
    private final zzgn zzacv;

    public AppMeasurement(zzgn zzgn2) {
        Preconditions.checkNotNull(zzgn2);
        this.zzacv = zzgn2;
    }

    @Deprecated
    @Keep
    @RequiresPermission(allOf={"android.permission.INTERNET", "android.permission.ACCESS_NETWORK_STATE", "android.permission.WAKE_LOCK"})
    public static AppMeasurement getInstance(Context context) {
        return zzgn.zza(context, null, null).zzkb();
    }

    @Keep
    public void beginAdUnitExposure(@NonNull @Size(min=1L) String string2) {
        this.zzacv.zzfx().beginAdUnitExposure(string2);
    }

    @Keep
    @KeepForSdk
    public void clearConditionalUserProperty(@NonNull @Size(max=24L, min=1L) String string2, @Nullable String string3, @Nullable Bundle bundle) {
        this.zzacv.zzfy().clearConditionalUserProperty(string2, string3, bundle);
    }

    @Keep
    @VisibleForTesting
    protected void clearConditionalUserPropertyAs(@NonNull @Size(min=1L) String string2, @NonNull @Size(max=24L, min=1L) String string3, @Nullable String string4, @Nullable Bundle bundle) {
        this.zzacv.zzfy().clearConditionalUserPropertyAs(string2, string3, string4, bundle);
    }

    @Keep
    public void endAdUnitExposure(@NonNull @Size(min=1L) String string2) {
        this.zzacv.zzfx().endAdUnitExposure(string2);
    }

    @Keep
    public long generateEventId() {
        return this.zzacv.zzgg().zzln();
    }

    @Keep
    @Nullable
    public String getAppInstanceId() {
        return this.zzacv.zzfy().zzjk();
    }

    @KeepForSdk
    public Boolean getBoolean() {
        return this.zzacv.zzfy().zzkh();
    }

    @Keep
    @WorkerThread
    @KeepForSdk
    public List<ConditionalUserProperty> getConditionalUserProperties(@Nullable String string2, @Nullable @Size(max=23L, min=1L) String string3) {
        return this.zzacv.zzfy().getConditionalUserProperties(string2, string3);
    }

    @Keep
    @WorkerThread
    @VisibleForTesting
    protected List<ConditionalUserProperty> getConditionalUserPropertiesAs(@NonNull @Size(min=1L) String string2, @Nullable String string3, @Nullable @Size(max=23L, min=1L) String string4) {
        return this.zzacv.zzfy().getConditionalUserPropertiesAs(string2, string3, string4);
    }

    @Keep
    @Nullable
    public String getCurrentScreenClass() {
        zzig zzig2 = this.zzacv.zzgb().zzko();
        if (zzig2 != null) {
            return zzig2.zzaqa;
        }
        return null;
    }

    @Keep
    @Nullable
    public String getCurrentScreenName() {
        zzig zzig2 = this.zzacv.zzgb().zzko();
        if (zzig2 != null) {
            return zzig2.zzuk;
        }
        return null;
    }

    @KeepForSdk
    public Double getDouble() {
        return this.zzacv.zzfy().zzkl();
    }

    @Keep
    @Nullable
    public String getGmpAppId() {
        if (this.zzacv.zzkd() != null) {
            return this.zzacv.zzkd();
        }
        try {
            String string2 = GoogleServices.getGoogleAppId();
            return string2;
        }
        catch (IllegalStateException illegalStateException) {
            this.zzacv.zzgi().zziv().zzg("getGoogleAppId failed with exception", illegalStateException);
            return null;
        }
    }

    @KeepForSdk
    public Integer getInteger() {
        return this.zzacv.zzfy().zzkk();
    }

    @KeepForSdk
    public Long getLong() {
        return this.zzacv.zzfy().zzkj();
    }

    @Keep
    @WorkerThread
    @KeepForSdk
    public int getMaxUserProperties(@NonNull @Size(min=1L) String string2) {
        this.zzacv.zzfy();
        Preconditions.checkNotEmpty(string2);
        return 25;
    }

    @KeepForSdk
    public String getString() {
        return this.zzacv.zzfy().zzki();
    }

    @Keep
    @WorkerThread
    @VisibleForTesting
    protected Map<String, Object> getUserProperties(@Nullable String string2, @Nullable @Size(max=24L, min=1L) String string3, boolean bl) {
        return this.zzacv.zzfy().getUserProperties(string2, string3, bl);
    }

    @WorkerThread
    @KeepForSdk
    public Map<String, Object> getUserProperties(boolean bl) {
        Object object = this.zzacv.zzfy().zzj(bl);
        ArrayMap<String, Object> arrayMap = new ArrayMap<String, Object>(object.size());
        object = object.iterator();
        while (object.hasNext()) {
            zzka zzka2 = (zzka)object.next();
            arrayMap.put(zzka2.name, zzka2.getValue());
        }
        return arrayMap;
    }

    @Keep
    @WorkerThread
    @VisibleForTesting
    protected Map<String, Object> getUserPropertiesAs(@NonNull @Size(min=1L) String string2, @Nullable String string3, @Nullable @Size(max=23L, min=1L) String string4, boolean bl) {
        return this.zzacv.zzfy().getUserPropertiesAs(string2, string3, string4, bl);
    }

    public final void logEvent(@NonNull @Size(max=40L, min=1L) String string2, Bundle bundle) {
        Bundle bundle2 = bundle;
        if (bundle == null) {
            bundle2 = new Bundle();
        }
        this.zzacv.zzfy().zza("app", string2, bundle2, true);
    }

    @Keep
    public void logEventInternal(String string2, String string3, Bundle bundle) {
        Bundle bundle2 = bundle;
        if (bundle == null) {
            bundle2 = new Bundle();
        }
        this.zzacv.zzfy().logEvent(string2, string3, bundle2);
    }

    @KeepForSdk
    public void logEventInternalNoInterceptor(String string2, String string3, Bundle bundle, long l) {
        Bundle bundle2 = bundle;
        if (bundle == null) {
            bundle2 = new Bundle();
        }
        this.zzacv.zzfy().logEventNoInterceptor(string2, string3, bundle2, l);
    }

    @KeepForSdk
    public void registerOnMeasurementEventListener(OnEventListener onEventListener) {
        this.zzacv.zzfy().registerOnMeasurementEventListener(onEventListener);
    }

    @Keep
    @KeepForSdk
    public void setConditionalUserProperty(@NonNull ConditionalUserProperty conditionalUserProperty) {
        this.zzacv.zzfy().setConditionalUserProperty(conditionalUserProperty);
    }

    @Keep
    @VisibleForTesting
    protected void setConditionalUserPropertyAs(@NonNull ConditionalUserProperty conditionalUserProperty) {
        this.zzacv.zzfy().setConditionalUserPropertyAs(conditionalUserProperty);
    }

    @WorkerThread
    @KeepForSdk
    public void setEventInterceptor(EventInterceptor eventInterceptor) {
        this.zzacv.zzfy().setEventInterceptor(eventInterceptor);
    }

    @Deprecated
    public void setMeasurementEnabled(boolean bl) {
        this.zzacv.zzfy().setMeasurementEnabled(bl);
    }

    public final void setMinimumSessionDuration(long l) {
        this.zzacv.zzfy().setMinimumSessionDuration(l);
    }

    public final void setSessionTimeoutDuration(long l) {
        this.zzacv.zzfy().setSessionTimeoutDuration(l);
    }

    public final void setUserProperty(@NonNull @Size(max=24L, min=1L) String string2, @Nullable @Size(max=36L) String string3) {
        int n = this.zzacv.zzgg().zzci(string2);
        if (n != 0) {
            this.zzacv.zzgg();
            string3 = zzkd.zza(string2, 24, true);
            int n2 = string2 != null ? string2.length() : 0;
            this.zzacv.zzgg().zza(n, "_ev", string3, n2);
            return;
        }
        this.setUserPropertyInternal("app", string2, string3);
    }

    @KeepForSdk
    public void setUserPropertyInternal(String string2, String string3, Object object) {
        this.zzacv.zzfy().setUserProperty(string2, string3, object);
    }

    @KeepForSdk
    public void unregisterOnMeasurementEventListener(OnEventListener onEventListener) {
        this.zzacv.zzfy().unregisterOnMeasurementEventListener(onEventListener);
    }

    @KeepForSdk
    public static class ConditionalUserProperty {
        @Keep
        @KeepForSdk
        public boolean mActive;
        @Keep
        @KeepForSdk
        public String mAppId;
        @Keep
        @KeepForSdk
        public long mCreationTimestamp;
        @Keep
        public String mExpiredEventName;
        @Keep
        public Bundle mExpiredEventParams;
        @Keep
        @KeepForSdk
        public String mName;
        @Keep
        @KeepForSdk
        public String mOrigin;
        @Keep
        @KeepForSdk
        public long mTimeToLive;
        @Keep
        public String mTimedOutEventName;
        @Keep
        public Bundle mTimedOutEventParams;
        @Keep
        @KeepForSdk
        public String mTriggerEventName;
        @Keep
        @KeepForSdk
        public long mTriggerTimeout;
        @Keep
        public String mTriggeredEventName;
        @Keep
        public Bundle mTriggeredEventParams;
        @Keep
        @KeepForSdk
        public long mTriggeredTimestamp;
        @Keep
        @KeepForSdk
        public Object mValue;

        public ConditionalUserProperty() {
        }

        public ConditionalUserProperty(ConditionalUserProperty conditionalUserProperty) {
            Preconditions.checkNotNull(conditionalUserProperty);
            this.mAppId = conditionalUserProperty.mAppId;
            this.mOrigin = conditionalUserProperty.mOrigin;
            this.mCreationTimestamp = conditionalUserProperty.mCreationTimestamp;
            this.mName = conditionalUserProperty.mName;
            if (conditionalUserProperty.mValue != null) {
                this.mValue = zzkd.zzf(conditionalUserProperty.mValue);
                if (this.mValue == null) {
                    this.mValue = conditionalUserProperty.mValue;
                }
            }
            this.mActive = conditionalUserProperty.mActive;
            this.mTriggerEventName = conditionalUserProperty.mTriggerEventName;
            this.mTriggerTimeout = conditionalUserProperty.mTriggerTimeout;
            this.mTimedOutEventName = conditionalUserProperty.mTimedOutEventName;
            if (conditionalUserProperty.mTimedOutEventParams != null) {
                this.mTimedOutEventParams = new Bundle(conditionalUserProperty.mTimedOutEventParams);
            }
            this.mTriggeredEventName = conditionalUserProperty.mTriggeredEventName;
            if (conditionalUserProperty.mTriggeredEventParams != null) {
                this.mTriggeredEventParams = new Bundle(conditionalUserProperty.mTriggeredEventParams);
            }
            this.mTriggeredTimestamp = conditionalUserProperty.mTriggeredTimestamp;
            this.mTimeToLive = conditionalUserProperty.mTimeToLive;
            this.mExpiredEventName = conditionalUserProperty.mExpiredEventName;
            if (conditionalUserProperty.mExpiredEventParams != null) {
                this.mExpiredEventParams = new Bundle(conditionalUserProperty.mExpiredEventParams);
            }
        }
    }

    @KeepForSdk
    public static final class Event
    extends FirebaseAnalytics.Event {
        @KeepForSdk
        public static final String AD_REWARD = "_ar";
        @KeepForSdk
        public static final String APP_EXCEPTION = "_ae";
        public static final String[] zzacw = new String[]{"app_clear_data", "app_exception", "app_remove", "app_upgrade", "app_install", "app_update", "firebase_campaign", "error", "first_open", "first_visit", "in_app_purchase", "notification_dismiss", "notification_foreground", "notification_open", "notification_receive", "os_update", "session_start", "user_engagement", "ad_exposure", "adunit_exposure", "ad_query", "ad_activeview", "ad_impression", "ad_click", "ad_reward", "screen_view", "ga_extra_parameter"};
        public static final String[] zzacx = new String[]{"_cd", "_ae", "_ui", "_ug", "_in", "_au", "_cmp", "_err", "_f", "_v", "_iap", "_nd", "_nf", "_no", "_nr", "_ou", "_s", "_e", "_xa", "_xu", "_aq", "_aa", "_ai", "_ac", "_ar", "_vs", "_ep"};

        private Event() {
        }

        public static String zzak(String string2) {
            return zzkd.zza(string2, zzacx, zzacw);
        }

        public static String zzal(String string2) {
            return zzkd.zza(string2, zzacw, zzacx);
        }
    }

    @KeepForSdk
    public static interface EventInterceptor {
        @WorkerThread
        @KeepForSdk
        public void interceptEvent(String var1, String var2, Bundle var3, long var4);
    }

    @KeepForSdk
    public static interface OnEventListener {
        @WorkerThread
        @KeepForSdk
        public void onEvent(String var1, String var2, Bundle var3, long var4);
    }

    @KeepForSdk
    public static final class Param
    extends FirebaseAnalytics.Param {
        @KeepForSdk
        public static final String FATAL = "fatal";
        @KeepForSdk
        public static final String TIMESTAMP = "timestamp";
        @KeepForSdk
        public static final String TYPE = "type";
        public static final String[] zzacy = new String[]{"firebase_conversion", "engagement_time_msec", "exposure_time", "ad_event_id", "ad_unit_id", "firebase_error", "firebase_error_value", "firebase_error_length", "firebase_event_origin", "firebase_screen", "firebase_screen_class", "firebase_screen_id", "firebase_previous_screen", "firebase_previous_class", "firebase_previous_id", "message_device_time", "message_id", "message_name", "message_time", "previous_app_version", "previous_os_version", "topic", "update_with_analytics", "previous_first_open_count", "system_app", "system_app_update", "previous_install_count", "ga_event_id", "ga_extra_params_ct", "ga_group_name", "ga_list_length", "ga_index", "ga_event_name", "campaign_info_source", "deferred_analytics_collection"};
        public static final String[] zzacz = new String[]{"_c", "_et", "_xt", "_aeid", "_ai", "_err", "_ev", "_el", "_o", "_sn", "_sc", "_si", "_pn", "_pc", "_pi", "_ndt", "_nmid", "_nmn", "_nmt", "_pv", "_po", "_nt", "_uwa", "_pfo", "_sys", "_sysu", "_pin", "_eid", "_epc", "_gn", "_ll", "_i", "_en", "_cis", "_dac"};

        private Param() {
        }

        public static String zzal(String string2) {
            return zzkd.zza(string2, zzacy, zzacz);
        }
    }

    @KeepForSdk
    public static final class UserProperty
    extends FirebaseAnalytics.UserProperty {
        @KeepForSdk
        public static final String FIREBASE_LAST_NOTIFICATION = "_ln";
        public static final String[] zzada = new String[]{"firebase_last_notification", "first_open_time", "first_visit_time", "last_deep_link_referrer", "user_id", "first_open_after_install", "lifetime_user_engagement"};
        public static final String[] zzadb = new String[]{"_ln", "_fot", "_fvt", "_ldl", "_id", "_fi", "_lte"};

        private UserProperty() {
        }

        public static String zzal(String string2) {
            return zzkd.zza(string2, zzada, zzadb);
        }
    }

}

