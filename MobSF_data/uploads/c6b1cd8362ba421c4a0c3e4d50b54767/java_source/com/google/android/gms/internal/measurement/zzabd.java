/*
 * Decompiled with CFR 0_132.
 */
package com.google.android.gms.internal.measurement;

import com.google.android.gms.internal.measurement.zzabe;
import com.google.android.gms.internal.measurement.zzabf;
import com.google.android.gms.internal.measurement.zzabi;
import com.google.android.gms.internal.measurement.zzabk;
import com.google.android.gms.internal.measurement.zzzt;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.NavigableMap;
import java.util.Set;
import java.util.SortedMap;
import java.util.TreeMap;

class zzabd<K extends Comparable<K>, V>
extends AbstractMap<K, V> {
    private boolean zzbnw;
    private final int zzbwe;
    private List<zzabi> zzbwf;
    private Map<K, V> zzbwg;
    private volatile zzabk zzbwh;
    private Map<K, V> zzbwi;

    private zzabd(int n) {
        this.zzbwe = n;
        this.zzbwf = Collections.emptyList();
        this.zzbwg = Collections.emptyMap();
        this.zzbwi = Collections.emptyMap();
    }

    /* synthetic */ zzabd(int n, zzabe zzabe2) {
        this(n);
    }

    private final int zza(K k) {
        int n;
        int n2 = this.zzbwf.size() - 1;
        if (n2 >= 0) {
            n = k.compareTo((Comparable)((Comparable)this.zzbwf.get(n2).getKey()));
            if (n > 0) {
                return - n2 + 2;
            }
            if (n == 0) {
                return n2;
            }
        }
        n = 0;
        while (n <= n2) {
            int n3 = (n + n2) / 2;
            int n4 = k.compareTo((Comparable)((Comparable)this.zzbwf.get(n3).getKey()));
            if (n4 < 0) {
                n2 = n3 - 1;
                continue;
            }
            if (n4 > 0) {
                n = n3 + 1;
                continue;
            }
            return n3;
        }
        return - n + 1;
    }

    static /* synthetic */ Object zza(zzabd zzabd2, int n) {
        return zzabd2.zzai(n);
    }

    static /* synthetic */ void zza(zzabd zzabd2) {
        zzabd2.zzva();
    }

    static <FieldDescriptorType extends zzzt<FieldDescriptorType>> zzabd<FieldDescriptorType, Object> zzag(int n) {
        return new zzabe(n);
    }

    private final V zzai(int n) {
        this.zzva();
        Object v = this.zzbwf.remove(n).getValue();
        if (!this.zzbwg.isEmpty()) {
            Iterator<Map.Entry<K, V>> iterator = this.zzvb().entrySet().iterator();
            this.zzbwf.add(new zzabi(this, iterator.next()));
            iterator.remove();
        }
        return v;
    }

    static /* synthetic */ List zzb(zzabd zzabd2) {
        return zzabd2.zzbwf;
    }

    static /* synthetic */ Map zzc(zzabd zzabd2) {
        return zzabd2.zzbwg;
    }

    private final void zzva() {
        if (this.zzbnw) {
            throw new UnsupportedOperationException();
        }
    }

    private final SortedMap<K, V> zzvb() {
        this.zzva();
        if (this.zzbwg.isEmpty() && !(this.zzbwg instanceof TreeMap)) {
            this.zzbwg = new TreeMap();
            this.zzbwi = ((TreeMap)this.zzbwg).descendingMap();
        }
        return (SortedMap)this.zzbwg;
    }

    @Override
    public void clear() {
        this.zzva();
        if (!this.zzbwf.isEmpty()) {
            this.zzbwf.clear();
        }
        if (!this.zzbwg.isEmpty()) {
            this.zzbwg.clear();
        }
    }

    @Override
    public boolean containsKey(Object object) {
        if (this.zza(object = (Comparable)object) < 0 && !this.zzbwg.containsKey(object)) {
            return false;
        }
        return true;
    }

    @Override
    public Set<Map.Entry<K, V>> entrySet() {
        if (this.zzbwh == null) {
            this.zzbwh = new zzabk(this, null);
        }
        return this.zzbwh;
    }

    @Override
    public boolean equals(Object object) {
        if (this == object) {
            return true;
        }
        if (!(object instanceof zzabd)) {
            return super.equals(object);
        }
        object = (zzabd)object;
        int n = this.size();
        if (n != object.size()) {
            return false;
        }
        int n2 = this.zzuy();
        if (n2 != object.zzuy()) {
            return this.entrySet().equals(object.entrySet());
        }
        for (int i = 0; i < n2; ++i) {
            if (this.zzah(i).equals(object.zzah(i))) continue;
            return false;
        }
        if (n2 != n) {
            return this.zzbwg.equals(object.zzbwg);
        }
        return true;
    }

    @Override
    public V get(Object object) {
        int n = this.zza(object = (Comparable)object);
        if (n >= 0) {
            return this.zzbwf.get(n).getValue();
        }
        return this.zzbwg.get(object);
    }

    @Override
    public int hashCode() {
        int n;
        int n2 = this.zzuy();
        int n3 = 0;
        for (n = 0; n < n2; ++n) {
            n3 += this.zzbwf.get(n).hashCode();
        }
        n = n3;
        if (this.zzbwg.size() > 0) {
            n = n3 + this.zzbwg.hashCode();
        }
        return n;
    }

    public final boolean isImmutable() {
        return this.zzbnw;
    }

    @Override
    public /* synthetic */ Object put(Object object, Object object2) {
        return this.zza((Comparable)object, object2);
    }

    @Override
    public V remove(Object object) {
        this.zzva();
        object = (Comparable)object;
        int n = this.zza(object);
        if (n >= 0) {
            return this.zzai(n);
        }
        if (this.zzbwg.isEmpty()) {
            return null;
        }
        return this.zzbwg.remove(object);
    }

    @Override
    public int size() {
        return this.zzbwf.size() + this.zzbwg.size();
    }

    public final V zza(K k, V v) {
        this.zzva();
        int n = this.zza(k);
        if (n >= 0) {
            return this.zzbwf.get(n).setValue(v);
        }
        this.zzva();
        if (this.zzbwf.isEmpty() && !(this.zzbwf instanceof ArrayList)) {
            this.zzbwf = new ArrayList<zzabi>(this.zzbwe);
        }
        if ((n = - n + 1) >= this.zzbwe) {
            return this.zzvb().put(k, v);
        }
        if (this.zzbwf.size() == this.zzbwe) {
            zzabi zzabi2 = this.zzbwf.remove(this.zzbwe - 1);
            this.zzvb().put((Comparable)zzabi2.getKey(), zzabi2.getValue());
        }
        this.zzbwf.add(n, new zzabi(this, k, v));
        return null;
    }

    public final Map.Entry<K, V> zzah(int n) {
        return this.zzbwf.get(n);
    }

    public void zzru() {
        if (!this.zzbnw) {
            Map map = this.zzbwg.isEmpty() ? Collections.emptyMap() : Collections.unmodifiableMap(this.zzbwg);
            this.zzbwg = map;
            map = this.zzbwi.isEmpty() ? Collections.emptyMap() : Collections.unmodifiableMap(this.zzbwi);
            this.zzbwi = map;
            this.zzbnw = true;
        }
    }

    public final int zzuy() {
        return this.zzbwf.size();
    }

    public final Iterable<Map.Entry<K, V>> zzuz() {
        if (this.zzbwg.isEmpty()) {
            return zzabf.zzvc();
        }
        return this.zzbwg.entrySet();
    }
}

