/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.accounts.Account
 *  android.content.Context
 *  android.os.Binder
 *  android.os.RemoteException
 *  android.text.TextUtils
 *  android.util.Log
 */
package com.google.android.gms.common.internal;

import android.accounts.Account;
import android.content.Context;
import android.os.Binder;
import android.os.RemoteException;
import android.text.TextUtils;
import android.util.Log;
import com.google.android.gms.common.GooglePlayServicesUtilLight;
import com.google.android.gms.common.internal.IAccountAccessor;

public class AccountAccessor
extends IAccountAccessor.Stub {
    private Context mContext;
    private int zzqu = -1;
    private Account zzs;

    public AccountAccessor(Context context, Account account) {
        this.mContext = context.getApplicationContext();
        this.zzs = account;
    }

    public static AccountAccessor fromGoogleAccountName(Context context, String string2) {
        string2 = TextUtils.isEmpty((CharSequence)string2) ? null : new Account(string2, "com.google");
        return new AccountAccessor(context, (Account)string2);
    }

    /*
     * WARNING - Removed back jump from a try to a catch block - possible behaviour change.
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    public static Account getAccountBinderSafe(IAccountAccessor iAccountAccessor) {
        if (iAccountAccessor == null) return null;
        long l = Binder.clearCallingIdentity();
        try {
            iAccountAccessor = iAccountAccessor.getAccount();
        }
        catch (Throwable throwable) {}
        Binder.restoreCallingIdentity((long)l);
        return iAccountAccessor;
        Binder.restoreCallingIdentity((long)l);
        throw throwable;
        catch (RemoteException remoteException) {}
        {
            Log.w((String)"AccountAccessor", (String)"Remote account accessor probably died");
        }
        Binder.restoreCallingIdentity((long)l);
        return null;
    }

    public boolean equals(Object object) {
        if (this == object) {
            return true;
        }
        if (!(object instanceof AccountAccessor)) {
            return false;
        }
        return this.zzs.equals((Object)((AccountAccessor)object).zzs);
    }

    @Override
    public Account getAccount() {
        int n = Binder.getCallingUid();
        if (n == this.zzqu) {
            return this.zzs;
        }
        if (GooglePlayServicesUtilLight.isGooglePlayServicesUid(this.mContext, n)) {
            this.zzqu = n;
            return this.zzs;
        }
        throw new SecurityException("Caller is not GooglePlayServices");
    }
}

