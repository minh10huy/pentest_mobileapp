/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.content.ContentValues
 *  android.database.CharArrayBuffer
 *  android.database.Cursor
 *  android.database.CursorIndexOutOfBoundsException
 *  android.database.CursorWindow
 *  android.net.Uri
 *  android.os.Bundle
 *  android.os.Parcel
 *  android.os.Parcelable
 *  android.os.Parcelable$Creator
 *  android.util.Log
 */
package com.google.android.gms.common.data;

import android.content.ContentValues;
import android.database.CharArrayBuffer;
import android.database.Cursor;
import android.database.CursorIndexOutOfBoundsException;
import android.database.CursorWindow;
import android.net.Uri;
import android.os.Bundle;
import android.os.Parcel;
import android.os.Parcelable;
import android.util.Log;
import com.google.android.gms.common.annotation.KeepName;
import com.google.android.gms.common.data.DataHolderCreator;
import com.google.android.gms.common.internal.Asserts;
import com.google.android.gms.common.internal.Objects;
import com.google.android.gms.common.internal.Preconditions;
import com.google.android.gms.common.internal.safeparcel.AbstractSafeParcelable;
import com.google.android.gms.common.internal.safeparcel.SafeParcelWriter;
import com.google.android.gms.common.internal.safeparcel.SafeParcelable;
import com.google.android.gms.common.sqlite.CursorWrapper;
import java.io.Closeable;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

@KeepName
@SafeParcelable.Class(creator="DataHolderCreator", validate=true)
public final class DataHolder
extends AbstractSafeParcelable
implements Closeable {
    public static final Parcelable.Creator<DataHolder> CREATOR = new DataHolderCreator();
    private static final Builder zznt = new com.google.android.gms.common.data.zza(new String[0], null);
    private boolean mClosed = false;
    @SafeParcelable.VersionField(id=1000)
    private final int zzal;
    @SafeParcelable.Field(getter="getStatusCode", id=3)
    private final int zzam;
    @SafeParcelable.Field(getter="getColumns", id=1)
    private final String[] zznm;
    private Bundle zznn;
    @SafeParcelable.Field(getter="getWindows", id=2)
    private final CursorWindow[] zzno;
    @SafeParcelable.Field(getter="getMetadata", id=4)
    private final Bundle zznp;
    private int[] zznq;
    private int zznr;
    private boolean zzns = true;

    @SafeParcelable.Constructor
    DataHolder(@SafeParcelable.Param(id=1000) int n, @SafeParcelable.Param(id=1) String[] arrstring, @SafeParcelable.Param(id=2) CursorWindow[] arrcursorWindow, @SafeParcelable.Param(id=3) int n2, @SafeParcelable.Param(id=4) Bundle bundle) {
        this.zzal = n;
        this.zznm = arrstring;
        this.zzno = arrcursorWindow;
        this.zzam = n2;
        this.zznp = bundle;
    }

    public DataHolder(Cursor cursor, int n, Bundle bundle) {
        this(new CursorWrapper(cursor), n, bundle);
    }

    private DataHolder(Builder builder, int n, Bundle bundle) {
        this(builder.zznm, DataHolder.zza(builder, -1), n, bundle);
    }

    private DataHolder(Builder builder, int n, Bundle bundle, int n2) {
        this(builder.zznm, DataHolder.zza(builder, n2), n, bundle);
    }

    /* synthetic */ DataHolder(Builder builder, int n, Bundle bundle, int n2, com.google.android.gms.common.data.zza zza2) {
        this(builder, n, bundle, n2);
    }

    /* synthetic */ DataHolder(Builder builder, int n, Bundle bundle, com.google.android.gms.common.data.zza zza2) {
        this(builder, n, null);
    }

    public DataHolder(CursorWrapper cursorWrapper, int n, Bundle bundle) {
        this(cursorWrapper.getColumnNames(), DataHolder.zza(cursorWrapper), n, bundle);
    }

    public DataHolder(String[] arrstring, CursorWindow[] arrcursorWindow, int n, Bundle bundle) {
        this.zzal = 1;
        this.zznm = Preconditions.checkNotNull(arrstring);
        this.zzno = Preconditions.checkNotNull(arrcursorWindow);
        this.zzam = n;
        this.zznp = bundle;
        this.validateContents();
    }

    public static Builder builder(String[] arrstring) {
        return new Builder(arrstring, null, null);
    }

    public static Builder builder(String[] arrstring, String string2) {
        Preconditions.checkNotNull(string2);
        return new Builder(arrstring, string2, null);
    }

    public static DataHolder empty(int n) {
        return DataHolder.empty(n, null);
    }

    public static DataHolder empty(int n, Bundle bundle) {
        return new DataHolder(zznt, n, bundle);
    }

    private final void zza(String string2, int n) {
        if (this.zznn != null && this.zznn.containsKey(string2)) {
            if (this.isClosed()) {
                throw new IllegalArgumentException("Buffer is closed.");
            }
            if (n >= 0 && n < this.zznr) {
                return;
            }
            throw new CursorIndexOutOfBoundsException(n, this.zznr);
        }
        string2 = (string2 = String.valueOf(string2)).length() != 0 ? "No such column: ".concat(string2) : new String("No such column: ");
        throw new IllegalArgumentException(string2);
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    private static CursorWindow[] zza(Builder object, int n) {
        int n2 = ((Builder)object).zznm.length;
        int n3 = 0;
        if (n2 == 0) {
            return new CursorWindow[0];
        }
        List list = n >= 0 && n < ((Builder)object).zznu.size() ? ((Builder)object).zznu.subList(0, n) : ((Builder)object).zznu;
        int n4 = list.size();
        Object object2 = new CursorWindow(false);
        ArrayList<Object> arrayList = new ArrayList<Object>();
        arrayList.add(object2);
        object2.setNumColumns(((Builder)object).zznm.length);
        n = 0;
        n2 = 0;
        block2 : while (n < n4) {
            boolean bl;
            Map map;
            int n5;
            Object object3 = object2;
            try {
                if (!object2.allocRow()) {
                    object3 = new StringBuilder(72);
                    object3.append("Allocating additional cursor window for large data set (row ");
                    object3.append(n);
                    object3.append(")");
                    Log.d((String)"DataHolder", (String)object3.toString());
                    object2 = new CursorWindow(false);
                    object2.setStartPosition(n);
                    object2.setNumColumns(((Builder)object).zznm.length);
                    arrayList.add(object2);
                    object3 = object2;
                    if (!object2.allocRow()) {
                        Log.e((String)"DataHolder", (String)"Unable to allocate row to hold data.");
                        arrayList.remove(object2);
                        return arrayList.toArray((T[])new CursorWindow[arrayList.size()]);
                    }
                }
                map = (Map)list.get(n);
                n5 = 0;
                bl = true;
            }
            catch (RuntimeException runtimeException) {
                n2 = arrayList.size();
                n = n3;
                do {
                    if (n >= n2) {
                        throw runtimeException;
                    }
                    ((CursorWindow)arrayList.get(n)).close();
                    ++n;
                } while (true);
            }
            do {
                block22 : {
                    long l;
                    block25 : {
                        block20 : {
                            Object v;
                            block24 : {
                                block23 : {
                                    block21 : {
                                        if (n5 >= ((Builder)object).zznm.length || !bl) break block20;
                                        object2 = ((Builder)object).zznm[n5];
                                        v = map.get(object2);
                                        if (v != null) break block21;
                                        bl = object3.putNull(n, n5);
                                        break block22;
                                    }
                                    if (!(v instanceof String)) break block23;
                                    bl = object3.putString((String)v, n, n5);
                                    break block22;
                                }
                                if (!(v instanceof Long)) break block24;
                                l = (Long)v;
                                break block25;
                            }
                            if (v instanceof Integer) {
                                bl = object3.putLong((long)((Integer)v).intValue(), n, n5);
                            } else {
                                if (v instanceof Boolean) {
                                    l = (Boolean)v != false ? 1L : 0L;
                                }
                                if (v instanceof byte[]) {
                                    bl = object3.putBlob((byte[])v, n, n5);
                                } else if (v instanceof Double) {
                                    bl = object3.putDouble(((Double)v).doubleValue(), n, n5);
                                } else {
                                    if (!(v instanceof Float)) {
                                        object = String.valueOf(v);
                                        object3 = new StringBuilder(String.valueOf(object2).length() + 32 + String.valueOf(object).length());
                                        object3.append("Unsupported object for column ");
                                        object3.append((String)object2);
                                        object3.append(": ");
                                        object3.append((String)object);
                                        throw new IllegalArgumentException(object3.toString());
                                    }
                                    bl = object3.putDouble((double)((Float)v).floatValue(), n, n5);
                                }
                            }
                            break block22;
                        }
                        if (!bl) {
                            if (n2 != 0) {
                                throw new DataHolderException("Could not add the value to a new CursorWindow. The size of value may be larger than what a CursorWindow can handle.");
                            }
                            object2 = new StringBuilder(74);
                            object2.append("Couldn't populate window data for row ");
                            object2.append(n);
                            object2.append(" - allocating new window.");
                            Log.d((String)"DataHolder", (String)object2.toString());
                            object3.freeLastRow();
                            object3 = new CursorWindow(false);
                            object3.setStartPosition(n);
                            object3.setNumColumns(((Builder)object).zznm.length);
                            arrayList.add(object3);
                            --n;
                            n2 = 1;
                        } else {
                            n2 = 0;
                        }
                        ++n;
                        object2 = object3;
                        continue block2;
                    }
                    bl = object3.putLong(l, n, n5);
                }
                ++n5;
            } while (true);
            break;
        }
        return arrayList.toArray((T[])new CursorWindow[arrayList.size()]);
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    private static CursorWindow[] zza(CursorWrapper cursorWrapper) {
        int n;
        CursorWindow cursorWindow;
        int n2;
        ArrayList<CursorWindow> arrayList = new ArrayList<CursorWindow>();
        try {
            n2 = cursorWrapper.getCount();
            cursorWindow = cursorWrapper.getWindow();
            if (cursorWindow != null && cursorWindow.getStartPosition() == 0) {
                cursorWindow.acquireReference();
                cursorWrapper.setWindow(null);
                arrayList.add(cursorWindow);
                n = cursorWindow.getNumRows();
            } else {
                n = 0;
            }
        }
        catch (Throwable throwable) {
            cursorWrapper.close();
            throw throwable;
        }
        while (n < n2 && cursorWrapper.moveToPosition(n)) {
            cursorWindow = cursorWrapper.getWindow();
            if (cursorWindow != null) {
                cursorWindow.acquireReference();
                cursorWrapper.setWindow(null);
            } else {
                cursorWindow = new CursorWindow(false);
                cursorWindow.setStartPosition(n);
                cursorWrapper.fillWindow(n, cursorWindow);
            }
            if (cursorWindow.getNumRows() == 0) break;
            arrayList.add(cursorWindow);
            n = cursorWindow.getStartPosition();
            int n3 = cursorWindow.getNumRows();
            n += n3;
        }
        cursorWrapper.close();
        return arrayList.toArray((T[])new CursorWindow[arrayList.size()]);
    }

    public final void clearColumn(String string2, int n, int n2) {
        this.zza(string2, n);
        this.zzno[n2].putNull(n, this.zznn.getInt(string2));
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @Override
    public final void close() {
        synchronized (this) {
            if (this.mClosed) {
                return;
            }
            this.mClosed = true;
            int n = 0;
            while (n < this.zzno.length) {
                this.zzno[n].close();
                ++n;
            }
            return;
        }
    }

    public final void copyToBuffer(String string2, int n, int n2, CharArrayBuffer charArrayBuffer) {
        this.zza(string2, n);
        this.zzno[n2].copyStringToBuffer(n, this.zznn.getInt(string2), charArrayBuffer);
    }

    public final void disableLeakDetection() {
        this.zzns = false;
    }

    protected final void finalize() throws Throwable {
        try {
            if (this.zzns && this.zzno.length > 0 && !this.isClosed()) {
                this.close();
                String string2 = this.toString();
                StringBuilder stringBuilder = new StringBuilder(String.valueOf(string2).length() + 178);
                stringBuilder.append("Internal data leak within a DataBuffer object detected!  Be sure to explicitly call release() on all DataBuffer extending objects when you are done with them. (internal object: ");
                stringBuilder.append(string2);
                stringBuilder.append(")");
                Log.e((String)"DataBuffer", (String)stringBuilder.toString());
            }
            return;
        }
        finally {
            Object.super.finalize();
        }
    }

    public final boolean getBoolean(String string2, int n, int n2) {
        this.zza(string2, n);
        if (Long.valueOf(this.zzno[n2].getLong(n, this.zznn.getInt(string2))) == 1L) {
            return true;
        }
        return false;
    }

    public final byte[] getByteArray(String string2, int n, int n2) {
        this.zza(string2, n);
        return this.zzno[n2].getBlob(n, this.zznn.getInt(string2));
    }

    public final int getCount() {
        return this.zznr;
    }

    public final double getDouble(String string2, int n, int n2) {
        this.zza(string2, n);
        return this.zzno[n2].getDouble(n, this.zznn.getInt(string2));
    }

    public final float getFloat(String string2, int n, int n2) {
        this.zza(string2, n);
        return this.zzno[n2].getFloat(n, this.zznn.getInt(string2));
    }

    public final int getInteger(String string2, int n, int n2) {
        this.zza(string2, n);
        return this.zzno[n2].getInt(n, this.zznn.getInt(string2));
    }

    public final long getLong(String string2, int n, int n2) {
        this.zza(string2, n);
        return this.zzno[n2].getLong(n, this.zznn.getInt(string2));
    }

    public final Bundle getMetadata() {
        return this.zznp;
    }

    public final int getStatusCode() {
        return this.zzam;
    }

    public final String getString(String string2, int n, int n2) {
        this.zza(string2, n);
        return this.zzno[n2].getString(n, this.zznn.getInt(string2));
    }

    public final int getWindowIndex(int n) {
        int n2;
        int n3 = 0;
        boolean bl = n >= 0 && n < this.zznr;
        Preconditions.checkState(bl);
        do {
            n2 = n3;
            if (n3 >= this.zznq.length) break;
            if (n < this.zznq[n3]) {
                n2 = n3 - 1;
                break;
            }
            ++n3;
        } while (true);
        n = n2;
        if (n2 == this.zznq.length) {
            n = n2 - 1;
        }
        return n;
    }

    public final boolean hasColumn(String string2) {
        return this.zznn.containsKey(string2);
    }

    public final boolean hasNull(String string2, int n, int n2) {
        this.zza(string2, n);
        return this.zzno[n2].isNull(n, this.zznn.getInt(string2));
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public final boolean isClosed() {
        synchronized (this) {
            return this.mClosed;
        }
    }

    public final void logCursorMetadataForDebugging() {
        Log.d((String)"DataHolder", (String)"*******************************************");
        int n = this.zzno.length;
        StringBuilder stringBuilder = new StringBuilder(32);
        stringBuilder.append("num cursor windows : ");
        stringBuilder.append(n);
        Log.d((String)"DataHolder", (String)stringBuilder.toString());
        n = this.zznr;
        stringBuilder = new StringBuilder(46);
        stringBuilder.append("total number of objects in holder: ");
        stringBuilder.append(n);
        Log.d((String)"DataHolder", (String)stringBuilder.toString());
        n = this.zznq.length;
        stringBuilder = new StringBuilder(42);
        stringBuilder.append("total mumber of windowOffsets: ");
        stringBuilder.append(n);
        Log.d((String)"DataHolder", (String)stringBuilder.toString());
        for (n = 0; n < this.zznq.length; ++n) {
            int n2 = this.zznq[n];
            stringBuilder = new StringBuilder(43);
            stringBuilder.append("offset for window ");
            stringBuilder.append(n);
            stringBuilder.append(" : ");
            stringBuilder.append(n2);
            Log.d((String)"DataHolder", (String)stringBuilder.toString());
            n2 = this.zzno[n].getNumRows();
            stringBuilder = new StringBuilder(45);
            stringBuilder.append("num rows for window ");
            stringBuilder.append(n);
            stringBuilder.append(" : ");
            stringBuilder.append(n2);
            Log.d((String)"DataHolder", (String)stringBuilder.toString());
            n2 = this.zzno[n].getStartPosition();
            stringBuilder = new StringBuilder(46);
            stringBuilder.append("start pos for window ");
            stringBuilder.append(n);
            stringBuilder.append(" : ");
            stringBuilder.append(n2);
            Log.d((String)"DataHolder", (String)stringBuilder.toString());
        }
        Log.d((String)"DataHolder", (String)"*******************************************");
    }

    public final Uri parseUri(String string2, int n, int n2) {
        if ((string2 = this.getString(string2, n, n2)) == null) {
            return null;
        }
        return Uri.parse((String)string2);
    }

    public final void replaceValue(String string2, int n, int n2, double d) {
        this.zza(string2, n);
        this.zzno[n2].putDouble(d, n, this.zznn.getInt(string2));
    }

    public final void replaceValue(String string2, int n, int n2, long l) {
        this.zza(string2, n);
        this.zzno[n2].putLong(l, n, this.zznn.getInt(string2));
    }

    public final void replaceValue(String string2, int n, int n2, String string3) {
        this.zza(string2, n);
        this.zzno[n2].putString(string3, n, this.zznn.getInt(string2));
    }

    public final void replaceValue(String string2, int n, int n2, byte[] arrby) {
        this.zza(string2, n);
        this.zzno[n2].putBlob(arrby, n, this.zznn.getInt(string2));
    }

    public final void validateContents() {
        int n;
        this.zznn = new Bundle();
        int n2 = 0;
        for (n = 0; n < this.zznm.length; ++n) {
            this.zznn.putInt(this.zznm[n], n);
        }
        this.zznq = new int[this.zzno.length];
        int n3 = 0;
        for (n = n2; n < this.zzno.length; ++n) {
            this.zznq[n] = n3;
            n2 = this.zzno[n].getStartPosition();
            n3 += this.zzno[n].getNumRows() - (n3 - n2);
        }
        this.zznr = n3;
    }

    public final void writeToParcel(Parcel parcel, int n) {
        int n2 = SafeParcelWriter.beginObjectHeader(parcel);
        SafeParcelWriter.writeStringArray(parcel, 1, this.zznm, false);
        SafeParcelWriter.writeTypedArray((Parcel)parcel, (int)2, (Parcelable[])this.zzno, (int)n, (boolean)false);
        SafeParcelWriter.writeInt(parcel, 3, this.getStatusCode());
        SafeParcelWriter.writeBundle(parcel, 4, this.getMetadata(), false);
        SafeParcelWriter.writeInt(parcel, 1000, this.zzal);
        SafeParcelWriter.finishObjectHeader(parcel, n2);
        if ((n & 1) != 0) {
            this.close();
        }
    }

    public static class Builder {
        private final String[] zznm;
        private final ArrayList<HashMap<String, Object>> zznu;
        private final String zznv;
        private final HashMap<Object, Integer> zznw;
        private boolean zznx;
        private String zzny;

        private Builder(String[] arrstring, String string2) {
            this.zznm = Preconditions.checkNotNull(arrstring);
            this.zznu = new ArrayList();
            this.zznv = string2;
            this.zznw = new HashMap();
            this.zznx = false;
            this.zzny = null;
        }

        /* synthetic */ Builder(String[] arrstring, String string2, com.google.android.gms.common.data.zza zza2) {
            this(arrstring, string2);
        }

        private final boolean zzg(String string2) {
            Asserts.checkNotNull(string2);
            if (this.zznx && string2.equals(this.zzny)) {
                return true;
            }
            return false;
        }

        public DataHolder build(int n) {
            return new DataHolder(this, n, null, null);
        }

        public DataHolder build(int n, Bundle bundle) {
            return new DataHolder(this, n, bundle, -1, null);
        }

        public DataHolder build(int n, Bundle bundle, int n2) {
            return new DataHolder(this, n, bundle, n2, null);
        }

        public boolean containsRowWithValue(String string2, Object object) {
            int n = this.zznu.size();
            for (int i = 0; i < n; ++i) {
                if (!Objects.equal(this.zznu.get(i).get(string2), object)) continue;
                return true;
            }
            return false;
        }

        public Builder descendingSort(String string2) {
            if (this.zzg(string2)) {
                return this;
            }
            this.sort(string2);
            Collections.reverse(this.zznu);
            return this;
        }

        public int getCount() {
            return this.zznu.size();
        }

        public void modifyUniqueRowValue(Object object, String string2, Object object2) {
            if (this.zznv == null) {
                return;
            }
            if ((object = this.zznw.get(object)) == null) {
                return;
            }
            this.zznu.get(object.intValue()).put(string2, object2);
        }

        public Builder removeRowsWithValue(String string2, Object object) {
            for (int i = this.zznu.size() - 1; i >= 0; --i) {
                if (!Objects.equal(this.zznu.get(i).get(string2), object)) continue;
                this.zznu.remove(i);
            }
            return this;
        }

        public Builder sort(String string2) {
            if (this.zzg(string2)) {
                return this;
            }
            Collections.sort(this.zznu, new zza(string2));
            if (this.zznv != null) {
                this.zznw.clear();
                int n = this.zznu.size();
                for (int i = 0; i < n; ++i) {
                    Object object = this.zznu.get(i).get(this.zznv);
                    if (object == null) continue;
                    this.zznw.put(object, i);
                }
            }
            this.zznx = true;
            this.zzny = string2;
            return this;
        }

        public Builder withRow(ContentValues object) {
            Asserts.checkNotNull(object);
            HashMap<String, Object> hashMap = new HashMap<String, Object>(object.size());
            for (Map.Entry entry : object.valueSet()) {
                hashMap.put((String)entry.getKey(), entry.getValue());
            }
            return this.withRow(hashMap);
        }

        /*
         * Unable to fully structure code
         * Enabled aggressive block sorting
         * Lifted jumps to return sites
         */
        public Builder withRow(HashMap<String, Object> var1_1) {
            Asserts.checkNotNull(var1_1);
            if (this.zznv == null || (var3_3 = var1_1.get(this.zznv)) == null) ** GOTO lbl6
            var4_4 = this.zznw.get(var3_3);
            if (var4_4 == null) {
                this.zznw.put(var3_3, this.zznu.size());
lbl6: // 2 sources:
                var2_2 = -1;
            } else {
                var2_2 = var4_4;
            }
            if (var2_2 == -1) {
                this.zznu.add(var1_1);
            } else {
                this.zznu.remove(var2_2);
                this.zznu.add(var2_2, var1_1);
            }
            this.zznx = false;
            return this;
        }
    }

    public static class DataHolderException
    extends RuntimeException {
        public DataHolderException(String string2) {
            super(string2);
        }
    }

    private static final class zza
    implements Comparator<HashMap<String, Object>> {
        private final String zznz;

        zza(String string2) {
            this.zznz = Preconditions.checkNotNull(string2);
        }

        @Override
        public final /* synthetic */ int compare(Object object, Object object2) {
            object = (HashMap)object;
            object2 = (HashMap)object2;
            if ((object = Preconditions.checkNotNull(object.get(this.zznz))).equals(object2 = Preconditions.checkNotNull(object2.get(this.zznz)))) {
                return 0;
            }
            if (object instanceof Boolean) {
                return ((Boolean)object).compareTo((Boolean)object2);
            }
            if (object instanceof Long) {
                return ((Long)object).compareTo((Long)object2);
            }
            if (object instanceof Integer) {
                return ((Integer)object).compareTo((Integer)object2);
            }
            if (object instanceof String) {
                return ((String)object).compareTo((String)object2);
            }
            if (object instanceof Double) {
                return ((Double)object).compareTo((Double)object2);
            }
            if (object instanceof Float) {
                return ((Float)object).compareTo((Float)object2);
            }
            object = String.valueOf(object);
            object2 = new StringBuilder(String.valueOf(object).length() + 24);
            object2.append("Unknown type for lValue ");
            object2.append((String)object);
            throw new IllegalArgumentException(object2.toString());
        }
    }

}

