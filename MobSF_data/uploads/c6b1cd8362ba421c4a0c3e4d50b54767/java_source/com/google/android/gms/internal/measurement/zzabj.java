/*
 * Decompiled with CFR 0_132.
 */
package com.google.android.gms.internal.measurement;

import com.google.android.gms.internal.measurement.zzabd;
import com.google.android.gms.internal.measurement.zzabe;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;

final class zzabj
implements Iterator<Map.Entry<K, V>> {
    private int pos = -1;
    private final /* synthetic */ zzabd zzbwm;
    private boolean zzbwn;
    private Iterator<Map.Entry<K, V>> zzbwo;

    private zzabj(zzabd zzabd2) {
        this.zzbwm = zzabd2;
    }

    /* synthetic */ zzabj(zzabd zzabd2, zzabe zzabe2) {
        this(zzabd2);
    }

    private final Iterator<Map.Entry<K, V>> zzve() {
        if (this.zzbwo == null) {
            this.zzbwo = zzabd.zzc(this.zzbwm).entrySet().iterator();
        }
        return this.zzbwo;
    }

    @Override
    public final boolean hasNext() {
        if (this.pos + 1 >= zzabd.zzb(this.zzbwm).size()) {
            if (!zzabd.zzc(this.zzbwm).isEmpty() && this.zzve().hasNext()) {
                return true;
            }
            return false;
        }
        return true;
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    @Override
    public final /* synthetic */ Object next() {
        int n;
        void var2_3;
        this.zzbwn = true;
        this.pos = n = this.pos + 1;
        if (n < zzabd.zzb(this.zzbwm).size()) {
            Object e = zzabd.zzb(this.zzbwm).get(this.pos);
            do {
                return (Map.Entry)var2_3;
                break;
            } while (true);
        }
        Map.Entry<K, V> entry = this.zzve().next();
        return (Map.Entry)var2_3;
    }

    @Override
    public final void remove() {
        if (!this.zzbwn) {
            throw new IllegalStateException("remove() was called before next()");
        }
        this.zzbwn = false;
        zzabd.zza(this.zzbwm);
        if (this.pos < zzabd.zzb(this.zzbwm).size()) {
            zzabd zzabd2 = this.zzbwm;
            int n = this.pos;
            this.pos = n - 1;
            zzabd.zza(zzabd2, n);
            return;
        }
        this.zzve().remove();
    }
}

