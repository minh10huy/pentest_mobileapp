/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.content.Context
 *  android.os.Binder
 *  android.text.TextUtils
 */
package com.google.android.gms.internal.measurement;

import android.content.Context;
import android.os.Binder;
import android.support.annotation.BinderThread;
import android.support.annotation.Nullable;
import android.text.TextUtils;
import com.google.android.gms.common.GooglePlayServicesUtilLight;
import com.google.android.gms.common.GoogleSignatureVerifier;
import com.google.android.gms.common.internal.Preconditions;
import com.google.android.gms.common.util.Clock;
import com.google.android.gms.common.util.UidVerifier;
import com.google.android.gms.common.util.VisibleForTesting;
import com.google.android.gms.internal.measurement.zzeb;
import com.google.android.gms.internal.measurement.zzef;
import com.google.android.gms.internal.measurement.zzex;
import com.google.android.gms.internal.measurement.zzez;
import com.google.android.gms.internal.measurement.zzfb;
import com.google.android.gms.internal.measurement.zzfg;
import com.google.android.gms.internal.measurement.zzfi;
import com.google.android.gms.internal.measurement.zzfk;
import com.google.android.gms.internal.measurement.zzgi;
import com.google.android.gms.internal.measurement.zzgq;
import com.google.android.gms.internal.measurement.zzgr;
import com.google.android.gms.internal.measurement.zzgs;
import com.google.android.gms.internal.measurement.zzgt;
import com.google.android.gms.internal.measurement.zzgu;
import com.google.android.gms.internal.measurement.zzgv;
import com.google.android.gms.internal.measurement.zzgw;
import com.google.android.gms.internal.measurement.zzgx;
import com.google.android.gms.internal.measurement.zzgy;
import com.google.android.gms.internal.measurement.zzgz;
import com.google.android.gms.internal.measurement.zzha;
import com.google.android.gms.internal.measurement.zzhb;
import com.google.android.gms.internal.measurement.zzhc;
import com.google.android.gms.internal.measurement.zzhd;
import com.google.android.gms.internal.measurement.zzhe;
import com.google.android.gms.internal.measurement.zzhf;
import com.google.android.gms.internal.measurement.zzhg;
import com.google.android.gms.internal.measurement.zzhh;
import com.google.android.gms.internal.measurement.zzjt;
import com.google.android.gms.internal.measurement.zzka;
import com.google.android.gms.internal.measurement.zzkc;
import com.google.android.gms.internal.measurement.zzkd;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Future;

public final class zzgp
extends zzfb {
    private final zzjt zzalo;
    private Boolean zzapb;
    @Nullable
    private String zzapc;

    public zzgp(zzjt zzjt2) {
        this(zzjt2, null);
    }

    private zzgp(zzjt zzjt2, @Nullable String string2) {
        Preconditions.checkNotNull(zzjt2);
        this.zzalo = zzjt2;
        this.zzapc = null;
    }

    static /* synthetic */ zzjt zza(zzgp zzgp2) {
        return zzgp2.zzalo;
    }

    @BinderThread
    private final void zzb(zzeb zzeb2, boolean bl) {
        Preconditions.checkNotNull(zzeb2);
        this.zzc(zzeb2.packageName, false);
        this.zzalo.zzgg().zzck(zzeb2.zzafa);
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    @BinderThread
    private final void zzc(String var1_1, boolean var2_2) {
        if (TextUtils.isEmpty((CharSequence)var1_1)) {
            this.zzalo.zzgi().zziv().log("Measurement Service called without app package");
            throw new SecurityException("Measurement Service called without app package");
        }
        if (!var2_2) ** GOTO lbl12
        try {
            block8 : {
                block7 : {
                    block6 : {
                        block5 : {
                            if (this.zzapb != null) break block5;
                            if (!"com.google.android.gms".equals(this.zzapc) && !UidVerifier.isGooglePlayServicesUid(this.zzalo.getContext(), Binder.getCallingUid()) && !GoogleSignatureVerifier.getInstance(this.zzalo.getContext()).isUidGoogleSigned(Binder.getCallingUid())) break block6;
                            break block7;
                        }
lbl10: // 2 sources:
                        do {
                            if (this.zzapb != false) return;
lbl12: // 2 sources:
                            if (this.zzapc == null && GooglePlayServicesUtilLight.uidHasPackageName(this.zzalo.getContext(), Binder.getCallingUid(), var1_1)) {
                                this.zzapc = var1_1;
                            }
                            if (var1_1.equals(this.zzapc) != false) return;
                            throw new SecurityException(String.format("Unknown calling package name '%s'.", new Object[]{var1_1}));
                            break;
                        } while (true);
                    }
                    var2_2 = false;
                    break block8;
                }
                var2_2 = true;
            }
            this.zzapb = var2_2;
            ** continue;
        }
        catch (SecurityException var3_3) {}
        this.zzalo.zzgi().zziv().zzg("Measurement Service called with invalid calling package. appId", zzfi.zzbp(var1_1));
        throw var3_3;
    }

    @VisibleForTesting
    private final void zze(Runnable runnable) {
        Preconditions.checkNotNull(runnable);
        if (zzez.zzajw.get().booleanValue() && this.zzalo.zzgh().zzju()) {
            runnable.run();
            return;
        }
        this.zzalo.zzgh().zzc(runnable);
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @BinderThread
    @Override
    public final List<zzka> zza(zzeb zzeb2, boolean bl) {
        this.zzb(zzeb2, false);
        Object object = this.zzalo.zzgh().zzb(new zzhf(this, zzeb2));
        try {
            Object object2 = (List)object.get();
            object = new ArrayList(object2.size());
            object2 = object2.iterator();
            do {
                if (!object2.hasNext()) {
                    return object;
                }
                zzkc zzkc2 = (zzkc)object2.next();
                if (!bl && zzkd.zzcm(zzkc2.name)) continue;
                object.add(new zzka(zzkc2));
            } while (true);
        }
        catch (InterruptedException | ExecutionException exception) {
            this.zzalo.zzgi().zziv().zze("Failed to get user attributes. appId", zzfi.zzbp(zzeb2.packageName), exception);
            return null;
        }
    }

    @BinderThread
    @Override
    public final List<zzef> zza(String object, String string2, zzeb zzeb2) {
        this.zzb(zzeb2, false);
        object = this.zzalo.zzgh().zzb(new zzgx(this, zzeb2, (String)object, string2));
        try {
            object = (List)object.get();
            return object;
        }
        catch (InterruptedException | ExecutionException exception) {
            this.zzalo.zzgi().zziv().zzg("Failed to get conditional user properties", exception);
            return Collections.emptyList();
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @BinderThread
    @Override
    public final List<zzka> zza(String string2, String arrayList, String iterator, boolean bl) {
        this.zzc(string2, true);
        arrayList = this.zzalo.zzgh().zzb(new zzgw(this, string2, (String)((Object)arrayList), (String)((Object)iterator)));
        try {
            iterator = (List)arrayList.get();
            arrayList = new ArrayList<zzka>(iterator.size());
            iterator = iterator.iterator();
            do {
                if (!iterator.hasNext()) {
                    return arrayList;
                }
                zzkc zzkc2 = (zzkc)iterator.next();
                if (!bl && zzkd.zzcm(zzkc2.name)) continue;
                arrayList.add(new zzka(zzkc2));
            } while (true);
        }
        catch (InterruptedException | ExecutionException exception) {
            this.zzalo.zzgi().zziv().zze("Failed to get user attributes. appId", zzfi.zzbp(string2), exception);
            return Collections.emptyList();
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @BinderThread
    @Override
    public final List<zzka> zza(String arrayList, String iterator, boolean bl, zzeb zzeb2) {
        this.zzb(zzeb2, false);
        arrayList = this.zzalo.zzgh().zzb(new zzgv(this, zzeb2, (String)((Object)arrayList), (String)((Object)iterator)));
        try {
            iterator = (List)arrayList.get();
            arrayList = new ArrayList<zzka>(iterator.size());
            iterator = iterator.iterator();
            do {
                if (!iterator.hasNext()) {
                    return arrayList;
                }
                zzkc zzkc2 = (zzkc)iterator.next();
                if (!bl && zzkd.zzcm(zzkc2.name)) continue;
                arrayList.add(new zzka(zzkc2));
            } while (true);
        }
        catch (InterruptedException | ExecutionException exception) {
            this.zzalo.zzgi().zziv().zze("Failed to get user attributes. appId", zzfi.zzbp(zzeb2.packageName), exception);
            return Collections.emptyList();
        }
    }

    @BinderThread
    @Override
    public final void zza(long l, String string2, String string3, String string4) {
        this.zze(new zzhh(this, string3, string4, string2, l));
    }

    @BinderThread
    @Override
    public final void zza(zzeb zzeb2) {
        this.zzb(zzeb2, false);
        this.zze(new zzhg(this, zzeb2));
    }

    /*
     * Enabled aggressive block sorting
     */
    @BinderThread
    @Override
    public final void zza(zzef object, zzeb zzeb2) {
        Preconditions.checkNotNull(object);
        Preconditions.checkNotNull(object.zzage);
        this.zzb(zzeb2, false);
        zzef zzef2 = new zzef((zzef)object);
        zzef2.packageName = zzeb2.packageName;
        object = object.zzage.getValue() == null ? new zzgr(this, zzef2, zzeb2) : new zzgs(this, zzef2, zzeb2);
        this.zze((Runnable)object);
    }

    @BinderThread
    @Override
    public final void zza(zzex zzex2, zzeb zzeb2) {
        Preconditions.checkNotNull(zzex2);
        this.zzb(zzeb2, false);
        this.zze(new zzha(this, zzex2, zzeb2));
    }

    @BinderThread
    @Override
    public final void zza(zzex zzex2, String string2, String string3) {
        Preconditions.checkNotNull(zzex2);
        Preconditions.checkNotEmpty(string2);
        this.zzc(string2, true);
        this.zze(new zzhb(this, zzex2, string2));
    }

    /*
     * Enabled aggressive block sorting
     */
    @BinderThread
    @Override
    public final void zza(zzka object, zzeb zzeb2) {
        Preconditions.checkNotNull(object);
        this.zzb(zzeb2, false);
        object = object.getValue() == null ? new zzhd(this, (zzka)object, zzeb2) : new zzhe(this, (zzka)object, zzeb2);
        this.zze((Runnable)object);
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @BinderThread
    @Override
    public final byte[] zza(zzex zzex2, String string2) {
        Preconditions.checkNotEmpty(string2);
        Preconditions.checkNotNull(zzex2);
        this.zzc(string2, true);
        this.zzalo.zzgi().zzjb().zzg("Log and bundle. event", this.zzalo.zzgf().zzbm(zzex2.name));
        long l = this.zzalo.zzbt().nanoTime() / 1000000L;
        byte[] arrby = this.zzalo.zzgh().zzc(new zzhc(this, zzex2, string2));
        try {
            byte[] arrby2;
            arrby = arrby2 = (byte[])arrby.get();
            if (arrby2 == null) {
                this.zzalo.zzgi().zziv().zzg("Log and bundle returned null. appId", zzfi.zzbp(string2));
                arrby = new byte[]{};
            }
            long l2 = this.zzalo.zzbt().nanoTime() / 1000000L;
            this.zzalo.zzgi().zzjb().zzd("Log and bundle processed. event, size, time_ms", this.zzalo.zzgf().zzbm(zzex2.name), arrby.length, l2 - l);
            return arrby;
        }
        catch (InterruptedException | ExecutionException exception) {
            this.zzalo.zzgi().zziv().zzd("Failed to log and bundle. appId, event, error", zzfi.zzbp(string2), this.zzalo.zzgf().zzbm(zzex2.name), exception);
            return null;
        }
    }

    @BinderThread
    @Override
    public final void zzb(zzeb zzeb2) {
        this.zzb(zzeb2, false);
        this.zze(new zzgq(this, zzeb2));
    }

    /*
     * Enabled aggressive block sorting
     */
    @BinderThread
    @Override
    public final void zzb(zzef object) {
        Preconditions.checkNotNull(object);
        Preconditions.checkNotNull(object.zzage);
        this.zzc(object.packageName, true);
        zzef zzef2 = new zzef((zzef)object);
        object = object.zzage.getValue() == null ? new zzgt(this, zzef2) : new zzgu(this, zzef2);
        this.zze((Runnable)object);
    }

    @BinderThread
    @Override
    public final String zzc(zzeb zzeb2) {
        this.zzb(zzeb2, false);
        return this.zzalo.zzh(zzeb2);
    }

    @BinderThread
    @Override
    public final void zzd(zzeb zzeb2) {
        this.zzc(zzeb2.packageName, false);
        this.zze(new zzgz(this, zzeb2));
    }

    @BinderThread
    @Override
    public final List<zzef> zze(String object, String string2, String string3) {
        this.zzc((String)object, true);
        object = this.zzalo.zzgh().zzb(new zzgy(this, (String)object, string2, string3));
        try {
            object = (List)object.get();
            return object;
        }
        catch (InterruptedException | ExecutionException exception) {
            this.zzalo.zzgi().zziv().zzg("Failed to get conditional user properties", exception);
            return Collections.emptyList();
        }
    }
}

