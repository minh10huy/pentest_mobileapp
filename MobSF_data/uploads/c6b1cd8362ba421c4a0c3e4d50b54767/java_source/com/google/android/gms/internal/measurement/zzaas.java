/*
 * Decompiled with CFR 0_132.
 */
package com.google.android.gms.internal.measurement;

import com.google.android.gms.internal.measurement.zzaaq;
import com.google.android.gms.internal.measurement.zzabl;
import com.google.android.gms.internal.measurement.zzabp;
import com.google.android.gms.internal.measurement.zzzb;
import com.google.android.gms.internal.measurement.zzzr;
import com.google.android.gms.internal.measurement.zzzv;
import java.lang.annotation.Annotation;
import java.lang.reflect.Method;
import java.lang.reflect.Modifier;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;

final class zzaas {
    static String zza(zzaaq zzaaq2, String string2) {
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("# ");
        stringBuilder.append(string2);
        zzaas.zza(zzaaq2, stringBuilder, 0);
        return stringBuilder.toString();
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Lifted jumps to return sites
     */
    private static void zza(zzaaq var0, StringBuilder var1_1, int var2_2) {
        var8_3 = new HashMap<String, Method>();
        var9_4 = new HashMap<String, Method>();
        var6_5 = new TreeSet<String>();
        for (Method var10_9 : var0.getClass().getDeclaredMethods()) {
            var9_4.put(var10_9.getName(), var10_9);
            if (var10_9.getParameterTypes().length != 0) continue;
            var8_3.put(var10_9.getName(), var10_9);
            if (!var10_9.getName().startsWith("get")) continue;
            var6_5.add(var10_9.getName());
        }
        var10_10 = var6_5.iterator();
        while (var10_10.hasNext()) {
            block18 : {
                block12 : {
                    block17 : {
                        block16 : {
                            block15 : {
                                block14 : {
                                    block13 : {
                                        var7_6 = (String)var10_10.next();
                                        var11_12 = var7_6.replaceFirst("get", "");
                                        if (var11_12.endsWith("List") && !var11_12.endsWith("OrBuilderList") && !var11_12.equals("List")) {
                                            var6_5 = String.valueOf(var11_12.substring(0, 1).toLowerCase());
                                            var12_13 = String.valueOf(var11_12.substring(1, var11_12.length() - 4));
                                            var6_5 = var12_13.length() != 0 ? var6_5.concat((String)var12_13) : new String((String)var6_5);
                                            var12_13 = (Method)var8_3.get(var7_6);
                                            if (var12_13 != null && var12_13.getReturnType().equals(List.class)) {
                                                zzaas.zzb(var1_1, var2_2, zzaas.zzfp((String)var6_5), zzzv.zza((Method)var12_13, var0, new Object[0]));
                                                continue;
                                            }
                                        }
                                        if (var11_12.endsWith("Map") && !var11_12.equals("Map")) {
                                            var6_5 = String.valueOf(var11_12.substring(0, 1).toLowerCase());
                                            var12_13 = String.valueOf(var11_12.substring(1, var11_12.length() - 3));
                                            var6_5 = var12_13.length() != 0 ? var6_5.concat((String)var12_13) : new String((String)var6_5);
                                            if ((var7_6 = (Method)var8_3.get(var7_6)) != null && var7_6.getReturnType().equals(Map.class) && !var7_6.isAnnotationPresent(Deprecated.class) && Modifier.isPublic(var7_6.getModifiers())) {
                                                zzaas.zzb(var1_1, var2_2, zzaas.zzfp((String)var6_5), zzzv.zza((Method)var7_6, var0, new Object[0]));
                                                continue;
                                            }
                                        }
                                        var6_5 = (var6_5 = String.valueOf(var11_12)).length() != 0 ? "set".concat((String)var6_5) : new String("set");
                                        if ((Method)var9_4.get(var6_5) == null) continue;
                                        if (var11_12.endsWith("Bytes")) {
                                            var6_5 = String.valueOf(var11_12.substring(0, var11_12.length() - 5));
                                            var6_5 = var6_5.length() != 0 ? "get".concat((String)var6_5) : new String("get");
                                            if (var8_3.containsKey(var6_5)) continue;
                                        }
                                        var6_5 = String.valueOf(var11_12.substring(0, 1).toLowerCase());
                                        var7_6 = String.valueOf(var11_12.substring(1));
                                        var6_5 = var7_6.length() != 0 ? var6_5.concat((String)var7_6) : new String((String)var6_5);
                                        var7_6 = String.valueOf(var11_12);
                                        var7_6 = var7_6.length() != 0 ? "get".concat((String)var7_6) : new String("get");
                                        var12_13 = (Method)var8_3.get(var7_6);
                                        var7_6 = String.valueOf(var11_12);
                                        var7_6 = var7_6.length() != 0 ? "has".concat((String)var7_6) : new String("has");
                                        var7_6 = (Method)var8_3.get(var7_6);
                                        if (var12_13 == null) continue;
                                        var11_12 = zzzv.zza((Method)var12_13, var0, new Object[0]);
                                        if (var7_6 != null) break block12;
                                        if (!(var11_12 instanceof Boolean)) break block13;
                                        if (((Boolean)var11_12).booleanValue()) ** GOTO lbl-1000
                                        ** GOTO lbl-1000
                                    }
                                    if (!(var11_12 instanceof Integer)) break block14;
                                    if ((Integer)var11_12 != 0) ** GOTO lbl-1000
                                    ** GOTO lbl-1000
                                }
                                if (!(var11_12 instanceof Float)) break block15;
                                if (((Float)var11_12).floatValue() != 0.0f) ** GOTO lbl-1000
                                ** GOTO lbl-1000
                            }
                            if (!(var11_12 instanceof Double)) break block16;
                            if ((Double)var11_12 != 0.0) ** GOTO lbl-1000
                            ** GOTO lbl-1000
                        }
                        if (!(var11_12 instanceof String)) break block17;
                        var7_6 = "";
                        ** GOTO lbl70
                    }
                    if (var11_12 instanceof zzzb) {
                        var7_6 = zzzb.zzbte;
lbl70: // 2 sources:
                        var5_11 = var11_12.equals(var7_6);
                    } else if (var11_12 instanceof zzaaq != false ? var11_12 == ((zzaaq)var11_12).zzuo() : var11_12 instanceof Enum != false && ((Enum)var11_12).ordinal() == 0) lbl-1000: // 5 sources:
                    {
                        var5_11 = true;
                    } else lbl-1000: // 5 sources:
                    {
                        var5_11 = false;
                    }
                    var5_11 = !var5_11;
                    break block18;
                }
                var5_11 = (Boolean)zzzv.zza((Method)var7_6, var0, new Object[0]);
            }
            if (!var5_11) continue;
            zzaas.zzb(var1_1, var2_2, zzaas.zzfp((String)var6_5), var11_12);
        }
        if (var0 instanceof zzzv.zza && (var1_1 = ((zzzv.zza)var0).zzbui.iterator()).hasNext()) {
            var1_1.next().getKey();
            throw new NoSuchMethodError();
        }
        var0 = (zzzv)var0;
        if (var0.zzbuf == null) return;
        var0 = var0.zzbuf;
    }

    static final void zzb(StringBuilder stringBuilder, int n, String object, Object iterator) {
        int n2;
        if (iterator instanceof List) {
            iterator = ((List)((Object)iterator)).iterator();
            while (iterator.hasNext()) {
                zzaas.zzb(stringBuilder, n, (String)object, iterator.next());
            }
            return;
        }
        if (iterator instanceof Map) {
            iterator = ((Map)((Object)iterator)).entrySet().iterator();
            while (iterator.hasNext()) {
                zzaas.zzb(stringBuilder, n, (String)object, (Map.Entry)iterator.next());
            }
            return;
        }
        stringBuilder.append('\n');
        int n3 = 0;
        int n4 = 0;
        for (n2 = 0; n2 < n; ++n2) {
            stringBuilder.append(' ');
        }
        stringBuilder.append((String)object);
        if (iterator instanceof String) {
            stringBuilder.append(": \"");
            stringBuilder.append(zzabl.zza(zzzb.zzfn((String)((Object)iterator))));
            stringBuilder.append('\"');
            return;
        }
        if (iterator instanceof zzzb) {
            stringBuilder.append(": \"");
            stringBuilder.append(zzabl.zza((zzzb)((Object)iterator)));
            stringBuilder.append('\"');
            return;
        }
        if (iterator instanceof zzzv) {
            stringBuilder.append(" {");
            zzaas.zza((zzzv)((Object)iterator), stringBuilder, n + 2);
            stringBuilder.append("\n");
            for (n2 = n4; n2 < n; ++n2) {
                stringBuilder.append(' ');
            }
            stringBuilder.append("}");
            return;
        }
        if (iterator instanceof Map.Entry) {
            stringBuilder.append(" {");
            object = (Map.Entry)((Object)iterator);
            n2 = n + 2;
            zzaas.zzb(stringBuilder, n2, "key", object.getKey());
            zzaas.zzb(stringBuilder, n2, "value", object.getValue());
            stringBuilder.append("\n");
            for (n2 = n3; n2 < n; ++n2) {
                stringBuilder.append(' ');
            }
            stringBuilder.append("}");
            return;
        }
        stringBuilder.append(": ");
        stringBuilder.append(iterator.toString());
    }

    private static final String zzfp(String string2) {
        StringBuilder stringBuilder = new StringBuilder();
        for (int i = 0; i < string2.length(); ++i) {
            char c = string2.charAt(i);
            if (Character.isUpperCase(c)) {
                stringBuilder.append("_");
            }
            stringBuilder.append(Character.toLowerCase(c));
        }
        return stringBuilder.toString();
    }
}

