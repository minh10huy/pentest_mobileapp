/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.annotation.TargetApi
 *  android.content.ContentResolver
 *  android.content.Context
 *  android.content.SharedPreferences
 *  android.content.pm.ApplicationInfo
 *  android.content.pm.PackageManager
 *  android.content.pm.PackageManager$NameNotFoundException
 *  android.os.Binder
 *  android.os.Process
 *  android.os.StrictMode
 *  android.os.StrictMode$ThreadPolicy
 *  android.os.UserHandle
 *  android.os.UserManager
 *  android.util.Log
 *  javax.annotation.concurrent.GuardedBy
 */
package com.google.android.gms.common.config;

import android.annotation.TargetApi;
import android.content.ContentResolver;
import android.content.Context;
import android.content.SharedPreferences;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageManager;
import android.os.Binder;
import android.os.Process;
import android.os.StrictMode;
import android.os.UserHandle;
import android.os.UserManager;
import android.support.annotation.Nullable;
import android.util.Log;
import com.google.android.gms.common.config.zze;
import com.google.android.gms.common.config.zzf;
import com.google.android.gms.common.config.zzg;
import com.google.android.gms.common.util.PlatformVersion;
import com.google.android.gms.common.util.VisibleForTesting;
import com.google.android.gms.internal.stable.zzi;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Map;
import javax.annotation.concurrent.GuardedBy;

public abstract class GservicesValue<T> {
    private static final Object sLock = new Object();
    private static zza zzmu;
    private static int zzmv = 0;
    private static Context zzmw;
    private static String zzmx = "com.google.android.providers.gsf.permission.READ_GSERVICES";
    @GuardedBy(value="sLock")
    private static HashSet<String> zzmy;
    protected final T mDefaultValue;
    protected final String mKey;
    private T zzmz = null;

    protected GservicesValue(String string2, T t) {
        this.mKey = string2;
        this.mDefaultValue = t;
    }

    @Deprecated
    @VisibleForTesting
    public static void forceInit(Context context) {
        GservicesValue.forceInit(context, new HashSet<String>());
    }

    @VisibleForTesting
    public static void forceInit(Context context, @Nullable HashSet<String> hashSet) {
        GservicesValue.zza(context, new zzd(context.getContentResolver()), hashSet);
    }

    @TargetApi(value=24)
    public static SharedPreferences getDirectBootCache(Context context) {
        return context.getApplicationContext().createDeviceProtectedStorageContext().getSharedPreferences("gservices-direboot-cache", 0);
    }

    public static int getSharedUserId() {
        return zzmv;
    }

    @Deprecated
    public static void init(Context context) {
        HashSet<String> hashSet = GservicesValue.zzd(context) ? new HashSet<String>() : null;
        GservicesValue.init(context, hashSet);
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public static void init(Context context, @Nullable HashSet<String> hashSet) {
        Object object = sLock;
        synchronized (object) {
            int n;
            if (zzmu == null) {
                GservicesValue.zza(context, new zzd(context.getContentResolver()), hashSet);
            }
            if ((n = zzmv) == 0) {
                try {
                    zzmv = context.getPackageManager().getApplicationInfo((String)"com.google.android.gms", (int)0).uid;
                }
                catch (PackageManager.NameNotFoundException nameNotFoundException) {
                    Log.e((String)"GservicesValue", (String)nameNotFoundException.toString());
                }
            }
            return;
        }
    }

    @Deprecated
    @VisibleForTesting
    public static void initForTests() {
        GservicesValue.zza(null, new zzb(null), new HashSet<String>());
    }

    @VisibleForTesting
    public static void initForTests(Context context, @Nullable HashSet<String> hashSet) {
        GservicesValue.zza(context, new zzb(null), hashSet);
    }

    @Deprecated
    @VisibleForTesting
    public static void initForTests(String string2, Object object) {
        HashMap<String, Object> hashMap = new HashMap<String, Object>(1);
        hashMap.put(string2, object);
        GservicesValue.initForTests(hashMap);
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @Deprecated
    @VisibleForTesting
    public static void initForTests(Map<String, ?> map) {
        Object object = sLock;
        synchronized (object) {
            zzmu = new zzc(map);
            return;
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public static boolean isInitialized() {
        Object object = sLock;
        synchronized (object) {
            if (zzmu == null) return false;
            return true;
        }
    }

    public static GservicesValue<String> partnerSetting(String string2, String string3) {
        return new zzg(string2, string3);
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @VisibleForTesting
    public static void resetAllOverrides() {
        Object object = sLock;
        synchronized (object) {
            if (GservicesValue.zzcg()) {
                Iterator iterator = zzna.iterator();
                while (iterator.hasNext()) {
                    ((GservicesValue)iterator.next()).resetOverride();
                }
                zzna.clear();
            }
            return;
        }
    }

    public static GservicesValue<Double> value(String string2, Double d) {
        return new com.google.android.gms.common.config.zzd(string2, d);
    }

    public static GservicesValue<Float> value(String string2, Float f) {
        return new zze(string2, f);
    }

    public static GservicesValue<Integer> value(String string2, Integer n) {
        return new com.google.android.gms.common.config.zzc(string2, n);
    }

    public static GservicesValue<Long> value(String string2, Long l) {
        return new com.google.android.gms.common.config.zzb(string2, l);
    }

    public static GservicesValue<String> value(String string2, String string3) {
        return new zzf(string2, string3);
    }

    public static GservicesValue<Boolean> value(String string2, boolean bl) {
        return new com.google.android.gms.common.config.zza(string2, bl);
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @TargetApi(value=24)
    private static void zza(@Nullable Context context, zza zza2, @Nullable HashSet<String> hashSet) {
        Object object = sLock;
        synchronized (object) {
            zzmu = zza2;
            zzmy = null;
            zzmw = null;
            if (context != null && GservicesValue.zzd(context)) {
                zzmy = hashSet;
                zzmw = context.getApplicationContext().createDeviceProtectedStorageContext();
            }
            return;
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    private static boolean zzcg() {
        Object object = sLock;
        synchronized (object) {
            if (zzmu instanceof zzb) return true;
            if (!(zzmu instanceof zzc)) return false;
            return true;
        }
    }

    static /* synthetic */ zza zzch() {
        return zzmu;
    }

    @TargetApi(value=24)
    private static boolean zzd(Context context) {
        if (!PlatformVersion.isAtLeastN()) {
            return false;
        }
        if ((context = (UserManager)context.getSystemService(UserManager.class)).isUserUnlocked()) {
            return false;
        }
        if (!context.isUserRunning(Process.myUserHandle())) {
            return true;
        }
        return false;
    }

    /*
     * WARNING - Removed back jump from a try to a catch block - possible behaviour change.
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Converted monitor instructions to comments
     * Lifted jumps to return sites
     */
    public final T get() {
        if (this.zzmz != null) {
            return this.zzmz;
        }
        Object object = StrictMode.allowThreadDiskReads();
        Object object2 = sLock;
        // MONITORENTER : object2
        boolean bl = zzmw != null && GservicesValue.zzd(zzmw);
        Object object3 = zzmy;
        Context context = zzmw;
        // MONITOREXIT : object2
        if (bl) {
            if (Log.isLoggable((String)"GservicesValue", (int)3)) {
                object = String.valueOf(this.mKey);
                object = object.length() != 0 ? "Gservice value accessed during directboot: ".concat((String)object) : new String("Gservice value accessed during directboot: ");
                Log.d((String)"GservicesValue", (String)object);
            }
            if (object3 == null) return this.retrieveFromDirectBootCache(context, this.mKey, this.mDefaultValue);
            if (object3.contains(this.mKey)) return this.retrieveFromDirectBootCache(context, this.mKey, this.mDefaultValue);
            object = String.valueOf(this.mKey);
            object = object.length() != 0 ? "Gservices key not whitelisted for directboot access: ".concat((String)object) : new String("Gservices key not whitelisted for directboot access: ");
            Log.e((String)"GservicesValue", (String)object);
            return this.mDefaultValue;
        }
        object3 = sLock;
        // MONITORENTER : object3
        zzmy = null;
        zzmw = null;
        // MONITOREXIT : object3
        object3 = this.retrieve(this.mKey);
        StrictMode.setThreadPolicy((StrictMode.ThreadPolicy)object);
        return (T)object3;
        {
            long l;
            catch (Throwable throwable) {}
            StrictMode.setThreadPolicy((StrictMode.ThreadPolicy)object);
            throw throwable;
            catch (SecurityException securityException) {}
            {
                l = Binder.clearCallingIdentity();
            }
            try {
                object3 = this.retrieve(this.mKey);
                return (T)object3;
            }
            finally {
                Binder.restoreCallingIdentity((long)l);
            }
        }
    }

    @Deprecated
    public final T getBinderSafe() {
        return this.get();
    }

    public String getKey() {
        return this.mKey;
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @VisibleForTesting
    public void override(T object) {
        if (!(zzmu instanceof zzb)) {
            Log.w((String)"GservicesValue", (String)"GservicesValue.override(): test should probably call initForTests() first");
        }
        this.zzmz = object;
        object = sLock;
        synchronized (object) {
            if (GservicesValue.zzcg()) {
                zzna.add(this);
            }
            return;
        }
    }

    @VisibleForTesting
    public void resetOverride() {
        this.zzmz = null;
    }

    protected abstract T retrieve(String var1);

    @TargetApi(value=24)
    protected T retrieveFromDirectBootCache(Context context, String string2, T t) {
        throw new UnsupportedOperationException("The Gservices classes used does not support direct-boot");
    }

    private static interface zza {
        public Long getLong(String var1, Long var2);

        public String getString(String var1, String var2);

        public Boolean zza(String var1, Boolean var2);

        public Double zza(String var1, Double var2);

        public Float zza(String var1, Float var2);

        public Integer zza(String var1, Integer var2);

        public String zzb(String var1, String var2);
    }

    private static final class zzb
    implements zza {
        private static final Collection<GservicesValue<?>> zzna = new HashSet();

        private zzb() {
        }

        /* synthetic */ zzb(com.google.android.gms.common.config.zza zza2) {
            this();
        }

        @Override
        public final Long getLong(String string2, Long l) {
            return l;
        }

        @Override
        public final String getString(String string2, String string3) {
            return string3;
        }

        @Override
        public final Boolean zza(String string2, Boolean bl) {
            return bl;
        }

        @Override
        public final Double zza(String string2, Double d) {
            return d;
        }

        @Override
        public final Float zza(String string2, Float f) {
            return f;
        }

        @Override
        public final Integer zza(String string2, Integer n) {
            return n;
        }

        @Override
        public final String zzb(String string2, String string3) {
            return string3;
        }
    }

    @Deprecated
    private static final class zzc
    implements zza {
        private final Map<String, ?> values;

        public zzc(Map<String, ?> map) {
            this.values = map;
        }

        private final <T> T zza(String string2, T t) {
            if (this.values.containsKey(string2)) {
                return (T)this.values.get(string2);
            }
            return t;
        }

        @Override
        public final Long getLong(String string2, Long l) {
            return this.zza(string2, l);
        }

        @Override
        public final String getString(String string2, String string3) {
            return this.zza(string2, string3);
        }

        @Override
        public final Boolean zza(String string2, Boolean bl) {
            return this.zza(string2, (T)bl);
        }

        @Override
        public final Double zza(String string2, Double d) {
            return this.zza(string2, (T)d);
        }

        @Override
        public final Float zza(String string2, Float f) {
            return this.zza(string2, (T)f);
        }

        @Override
        public final Integer zza(String string2, Integer n) {
            return this.zza(string2, (T)n);
        }

        @Override
        public final String zzb(String string2, String string3) {
            return this.zza(string2, string3);
        }
    }

    private static final class zzd
    implements zza {
        private final ContentResolver mContentResolver;

        public zzd(ContentResolver contentResolver) {
            this.mContentResolver = contentResolver;
        }

        @Override
        public final Long getLong(String string2, Long l) {
            return zzi.getLong(this.mContentResolver, string2, l);
        }

        @Override
        public final String getString(String string2, String string3) {
            return zzi.zza(this.mContentResolver, string2, string3);
        }

        @Override
        public final Boolean zza(String string2, Boolean bl) {
            return zzi.zza(this.mContentResolver, string2, bl);
        }

        /*
         * Enabled force condition propagation
         * Lifted jumps to return sites
         */
        @Override
        public final Double zza(String string2, Double d) {
            double d2;
            if ((string2 = zzi.zza(this.mContentResolver, string2, null)) == null) return d;
            try {
                d2 = Double.parseDouble(string2);
            }
            catch (NumberFormatException numberFormatException) {
                return d;
            }
            return d2;
        }

        /*
         * Enabled force condition propagation
         * Lifted jumps to return sites
         */
        @Override
        public final Float zza(String string2, Float f) {
            float f2;
            if ((string2 = zzi.zza(this.mContentResolver, string2, null)) == null) return f;
            try {
                f2 = Float.parseFloat(string2);
            }
            catch (NumberFormatException numberFormatException) {
                return f;
            }
            return Float.valueOf(f2);
        }

        @Override
        public final Integer zza(String string2, Integer n) {
            return zzi.getInt(this.mContentResolver, string2, n);
        }

        @Override
        public final String zzb(String string2, String string3) {
            return com.google.android.gms.internal.stable.zzg.zza(this.mContentResolver, string2, string3);
        }
    }

}

