/*
 * Decompiled with CFR 0_132.
 */
package com.google.android.gms.common.util;

import java.util.ArrayList;

public abstract class ObjectPoolBase<T> {
    private final ArrayList<T> zzaag;
    private final int zzaah;

    public ObjectPoolBase(int n) {
        this.zzaag = new ArrayList(n);
        this.zzaah = n;
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public final T aquire() {
        ArrayList<T> arrayList = this.zzaag;
        synchronized (arrayList) {
            int n = this.zzaag.size();
            if (n > 0) {
                T t = this.zzaag.remove(n - 1);
                return t;
            }
            T t = this.newObject();
            return t;
        }
    }

    protected boolean cleanUpObject(T t) {
        return true;
    }

    protected abstract T newObject();

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public final boolean release(T object) {
        ArrayList<T> arrayList = this.zzaag;
        synchronized (arrayList) {
            int n = this.zzaag.size();
            int n2 = 0;
            do {
                if (n2 < n) {
                    if (this.zzaag.get(n2) == object) {
                        object = String.valueOf(object);
                        StringBuilder stringBuilder = new StringBuilder(String.valueOf(object).length() + 25);
                        stringBuilder.append("Object released already: ");
                        stringBuilder.append((String)object);
                        throw new IllegalArgumentException(stringBuilder.toString());
                    }
                } else {
                    if (n < this.zzaah && this.cleanUpObject(object)) {
                        this.zzaag.add(object);
                        return true;
                    }
                    return false;
                }
                ++n2;
            } while (true);
        }
    }
}

