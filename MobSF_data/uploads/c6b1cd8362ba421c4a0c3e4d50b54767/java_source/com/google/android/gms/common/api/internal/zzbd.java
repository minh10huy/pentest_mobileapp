/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.app.PendingIntent
 *  android.content.Context
 *  android.os.Bundle
 *  android.os.Looper
 *  android.os.Message
 *  javax.annotation.concurrent.GuardedBy
 */
package com.google.android.gms.common.api.internal;

import android.app.PendingIntent;
import android.content.Context;
import android.os.Bundle;
import android.os.Looper;
import android.os.Message;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.GoogleApiAvailabilityLight;
import com.google.android.gms.common.api.Api;
import com.google.android.gms.common.api.Result;
import com.google.android.gms.common.api.internal.BaseImplementation;
import com.google.android.gms.common.api.internal.SignInConnectionListener;
import com.google.android.gms.common.api.internal.zzag;
import com.google.android.gms.common.api.internal.zzaj;
import com.google.android.gms.common.api.internal.zzau;
import com.google.android.gms.common.api.internal.zzav;
import com.google.android.gms.common.api.internal.zzbc;
import com.google.android.gms.common.api.internal.zzbe;
import com.google.android.gms.common.api.internal.zzbf;
import com.google.android.gms.common.api.internal.zzbp;
import com.google.android.gms.common.api.internal.zzbq;
import com.google.android.gms.common.api.internal.zzp;
import com.google.android.gms.common.api.internal.zzq;
import com.google.android.gms.common.internal.ClientSettings;
import com.google.android.gms.signin.SignInClient;
import com.google.android.gms.signin.SignInOptions;
import java.io.FileDescriptor;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.Lock;
import javax.annotation.concurrent.GuardedBy;

public final class zzbd
implements zzbp,
zzq {
    private final Context mContext;
    private final Api.AbstractClientBuilder<? extends SignInClient, SignInOptions> zzdh;
    final zzav zzfq;
    private final Lock zzga;
    private final ClientSettings zzgf;
    private final Map<Api<?>, Boolean> zzgi;
    private final GoogleApiAvailabilityLight zzgk;
    final Map<Api.AnyClientKey<?>, Api.Client> zzil;
    private final Condition zziz;
    private final zzbf zzja;
    final Map<Api.AnyClientKey<?>, ConnectionResult> zzjb = new HashMap();
    private volatile zzbc zzjc;
    private ConnectionResult zzjd = null;
    int zzje;
    final zzbq zzjf;

    public zzbd(Context object, zzav zzav2, Lock lock, Looper looper, GoogleApiAvailabilityLight googleApiAvailabilityLight, Map<Api.AnyClientKey<?>, Api.Client> map, ClientSettings clientSettings, Map<Api<?>, Boolean> map2, Api.AbstractClientBuilder<? extends SignInClient, SignInOptions> abstractClientBuilder, ArrayList<zzp> arrayList, zzbq zzbq2) {
        this.mContext = object;
        this.zzga = lock;
        this.zzgk = googleApiAvailabilityLight;
        this.zzil = map;
        this.zzgf = clientSettings;
        this.zzgi = map2;
        this.zzdh = abstractClientBuilder;
        this.zzfq = zzav2;
        this.zzjf = zzbq2;
        object = arrayList;
        int n = object.size();
        for (int i = 0; i < n; ++i) {
            zzav2 = object.get(i);
            ((zzp)((Object)zzav2)).zza(this);
        }
        this.zzja = new zzbf(this, looper);
        this.zziz = lock.newCondition();
        this.zzjc = new zzau(this);
    }

    static /* synthetic */ Lock zza(zzbd zzbd2) {
        return zzbd2.zzga;
    }

    static /* synthetic */ zzbc zzb(zzbd zzbd2) {
        return zzbd2.zzjc;
    }

    /*
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    @GuardedBy(value="mLock")
    @Override
    public final ConnectionResult blockingConnect() {
        this.connect();
        while (this.isConnecting()) {
            this.zziz.await();
        }
        if (this.isConnected()) {
            return ConnectionResult.RESULT_SUCCESS;
        }
        if (this.zzjd == null) return new ConnectionResult(13, null);
        return this.zzjd;
        catch (InterruptedException interruptedException) {}
        Thread.currentThread().interrupt();
        return new ConnectionResult(15, null);
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    @GuardedBy(value="mLock")
    @Override
    public final ConnectionResult blockingConnect(long var1_1, TimeUnit var3_2) {
        this.connect();
        var1_1 = var3_2.toNanos(var1_1);
        while (this.isConnecting()) {
            if (var1_1 > 0L) ** GOTO lbl8
            this.disconnect();
            return new ConnectionResult(14, null);
lbl8: // 1 sources:
            var1_1 = this.zziz.awaitNanos(var1_1);
        }
        if (this.isConnected()) {
            return ConnectionResult.RESULT_SUCCESS;
        }
        if (this.zzjd == null) return new ConnectionResult(13, null);
        return this.zzjd;
        catch (InterruptedException var3_3) {}
        Thread.currentThread().interrupt();
        return new ConnectionResult(15, null);
    }

    @GuardedBy(value="mLock")
    @Override
    public final void connect() {
        this.zzjc.connect();
    }

    @GuardedBy(value="mLock")
    @Override
    public final void disconnect() {
        if (this.zzjc.disconnect()) {
            this.zzjb.clear();
        }
    }

    @Override
    public final void dump(String string2, FileDescriptor fileDescriptor, PrintWriter printWriter, String[] arrstring) {
        String string3 = String.valueOf(string2).concat("  ");
        printWriter.append(string2).append("mState=").println(this.zzjc);
        for (Api<?> api : this.zzgi.keySet()) {
            printWriter.append(string2).append(api.getName()).println(":");
            this.zzil.get(api.getClientKey()).dump(string3, fileDescriptor, printWriter, arrstring);
        }
    }

    @GuardedBy(value="mLock")
    @Override
    public final <A extends Api.AnyClient, R extends Result, T extends BaseImplementation.ApiMethodImpl<R, A>> T enqueue(@NonNull T t) {
        t.zzx();
        return this.zzjc.enqueue(t);
    }

    @GuardedBy(value="mLock")
    @Override
    public final <A extends Api.AnyClient, T extends BaseImplementation.ApiMethodImpl<? extends Result, A>> T execute(@NonNull T t) {
        t.zzx();
        return this.zzjc.execute(t);
    }

    @Nullable
    @GuardedBy(value="mLock")
    @Override
    public final ConnectionResult getConnectionResult(@NonNull Api<?> object) {
        if (this.zzil.containsKey(object = object.getClientKey())) {
            if (this.zzil.get(object).isConnected()) {
                return ConnectionResult.RESULT_SUCCESS;
            }
            if (this.zzjb.containsKey(object)) {
                return this.zzjb.get(object);
            }
        }
        return null;
    }

    @Override
    public final boolean isConnected() {
        return this.zzjc instanceof zzag;
    }

    @Override
    public final boolean isConnecting() {
        return this.zzjc instanceof zzaj;
    }

    @Override
    public final boolean maybeSignIn(SignInConnectionListener signInConnectionListener) {
        return false;
    }

    @Override
    public final void maybeSignOut() {
    }

    @Override
    public final void onConnected(@Nullable Bundle bundle) {
        this.zzga.lock();
        try {
            this.zzjc.onConnected(bundle);
            return;
        }
        finally {
            this.zzga.unlock();
        }
    }

    @Override
    public final void onConnectionSuspended(int n) {
        this.zzga.lock();
        try {
            this.zzjc.onConnectionSuspended(n);
            return;
        }
        finally {
            this.zzga.unlock();
        }
    }

    @Override
    public final void zza(@NonNull ConnectionResult connectionResult, @NonNull Api<?> api, boolean bl) {
        this.zzga.lock();
        try {
            this.zzjc.zza(connectionResult, api, bl);
            return;
        }
        finally {
            this.zzga.unlock();
        }
    }

    final void zza(zzbe zzbe2) {
        zzbe2 = this.zzja.obtainMessage(1, (Object)zzbe2);
        this.zzja.sendMessage((Message)zzbe2);
    }

    final void zzb(RuntimeException runtimeException) {
        runtimeException = this.zzja.obtainMessage(2, (Object)runtimeException);
        this.zzja.sendMessage((Message)runtimeException);
    }

    final void zzbc() {
        this.zzga.lock();
        try {
            this.zzjc = new zzaj(this, this.zzgf, this.zzgi, this.zzgk, this.zzdh, this.zzga, this.mContext);
            this.zzjc.begin();
            this.zziz.signalAll();
            return;
        }
        finally {
            this.zzga.unlock();
        }
    }

    final void zzbd() {
        this.zzga.lock();
        try {
            this.zzfq.zzaz();
            this.zzjc = new zzag(this);
            this.zzjc.begin();
            this.zziz.signalAll();
            return;
        }
        finally {
            this.zzga.unlock();
        }
    }

    final void zzf(ConnectionResult connectionResult) {
        this.zzga.lock();
        try {
            this.zzjd = connectionResult;
            this.zzjc = new zzau(this);
            this.zzjc.begin();
            this.zziz.signalAll();
            return;
        }
        finally {
            this.zzga.unlock();
        }
    }

    @GuardedBy(value="mLock")
    @Override
    public final void zzz() {
        if (this.isConnected()) {
            ((zzag)this.zzjc).zzap();
        }
    }
}

