/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.os.IBinder
 *  android.os.IInterface
 *  android.os.Parcel
 *  android.os.Parcelable
 *  android.os.Parcelable$Creator
 *  android.os.RemoteException
 */
package com.google.android.gms.common.internal;

import android.os.IBinder;
import android.os.IInterface;
import android.os.Parcel;
import android.os.Parcelable;
import android.os.RemoteException;
import com.google.android.gms.common.GoogleCertificatesQuery;
import com.google.android.gms.dynamic.IObjectWrapper;
import com.google.android.gms.internal.stable.zza;
import com.google.android.gms.internal.stable.zzb;
import com.google.android.gms.internal.stable.zzc;

public interface IGoogleCertificatesApi
extends IInterface {
    public IObjectWrapper getGoogleCertificates() throws RemoteException;

    public IObjectWrapper getGoogleReleaseCertificates() throws RemoteException;

    public boolean isGoogleOrPlatformSigned(GoogleCertificatesQuery var1, IObjectWrapper var2) throws RemoteException;

    public boolean isGoogleReleaseSigned(String var1, IObjectWrapper var2) throws RemoteException;

    public boolean isGoogleSigned(String var1, IObjectWrapper var2) throws RemoteException;

    public static abstract class Stub
    extends zzb
    implements IGoogleCertificatesApi {
        public Stub() {
            super("com.google.android.gms.common.internal.IGoogleCertificatesApi");
        }

        public static IGoogleCertificatesApi asInterface(IBinder iBinder) {
            if (iBinder == null) {
                return null;
            }
            IInterface iInterface = iBinder.queryLocalInterface("com.google.android.gms.common.internal.IGoogleCertificatesApi");
            if (iInterface instanceof IGoogleCertificatesApi) {
                return (IGoogleCertificatesApi)iInterface;
            }
            return new Proxy(iBinder);
        }

        /*
         * Unable to fully structure code
         * Enabled aggressive block sorting
         * Lifted jumps to return sites
         */
        @Override
        protected boolean dispatchTransaction(int var1_1, Parcel var2_2, Parcel var3_3, int var4_4) throws RemoteException {
            block7 : {
                switch (var1_1) {
                    default: {
                        return false;
                    }
                    case 5: {
                        var5_8 = this.isGoogleOrPlatformSigned(zzc.zza(var2_2 /* !! */ , GoogleCertificatesQuery.CREATOR), IObjectWrapper.Stub.asInterface(var2_2 /* !! */ .readStrongBinder()));
                        ** GOTO lbl12
                    }
                    case 4: {
                        var5_8 = this.isGoogleSigned(var2_2 /* !! */ .readString(), IObjectWrapper.Stub.asInterface(var2_2 /* !! */ .readStrongBinder()));
                        ** GOTO lbl12
                    }
                    case 3: {
                        var5_8 = this.isGoogleReleaseSigned(var2_2 /* !! */ .readString(), IObjectWrapper.Stub.asInterface(var2_2 /* !! */ .readStrongBinder()));
lbl12: // 3 sources:
                        var3_6.writeNoException();
                        zzc.zza((Parcel)var3_6, var5_8);
                        return true;
                    }
                    case 2: {
                        var2_3 = this.getGoogleReleaseCertificates();
                        break block7;
                    }
                    case 1: 
                }
                var2_4 = this.getGoogleCertificates();
            }
            var3_6.writeNoException();
            zzc.zza((Parcel)var3_6, (IInterface)var2_5);
            return true;
        }

        public static class Proxy
        extends zza
        implements IGoogleCertificatesApi {
            Proxy(IBinder iBinder) {
                super(iBinder, "com.google.android.gms.common.internal.IGoogleCertificatesApi");
            }

            @Override
            public IObjectWrapper getGoogleCertificates() throws RemoteException {
                Parcel parcel = this.transactAndReadException(1, this.obtainAndWriteInterfaceToken());
                IObjectWrapper iObjectWrapper = IObjectWrapper.Stub.asInterface(parcel.readStrongBinder());
                parcel.recycle();
                return iObjectWrapper;
            }

            @Override
            public IObjectWrapper getGoogleReleaseCertificates() throws RemoteException {
                Parcel parcel = this.transactAndReadException(2, this.obtainAndWriteInterfaceToken());
                IObjectWrapper iObjectWrapper = IObjectWrapper.Stub.asInterface(parcel.readStrongBinder());
                parcel.recycle();
                return iObjectWrapper;
            }

            @Override
            public boolean isGoogleOrPlatformSigned(GoogleCertificatesQuery googleCertificatesQuery, IObjectWrapper iObjectWrapper) throws RemoteException {
                Parcel parcel = this.obtainAndWriteInterfaceToken();
                zzc.zza(parcel, googleCertificatesQuery);
                zzc.zza(parcel, iObjectWrapper);
                googleCertificatesQuery = this.transactAndReadException(5, parcel);
                boolean bl = zzc.zza((Parcel)googleCertificatesQuery);
                googleCertificatesQuery.recycle();
                return bl;
            }

            @Override
            public boolean isGoogleReleaseSigned(String string2, IObjectWrapper iObjectWrapper) throws RemoteException {
                Parcel parcel = this.obtainAndWriteInterfaceToken();
                parcel.writeString(string2);
                zzc.zza(parcel, iObjectWrapper);
                string2 = this.transactAndReadException(3, parcel);
                boolean bl = zzc.zza((Parcel)string2);
                string2.recycle();
                return bl;
            }

            @Override
            public boolean isGoogleSigned(String string2, IObjectWrapper iObjectWrapper) throws RemoteException {
                Parcel parcel = this.obtainAndWriteInterfaceToken();
                parcel.writeString(string2);
                zzc.zza(parcel, iObjectWrapper);
                string2 = this.transactAndReadException(4, parcel);
                boolean bl = zzc.zza((Parcel)string2);
                string2.recycle();
                return bl;
            }
        }

    }

}

