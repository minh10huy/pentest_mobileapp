/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.graphics.Canvas
 *  android.graphics.ColorFilter
 *  android.graphics.Rect
 *  android.graphics.drawable.Drawable
 *  android.graphics.drawable.Drawable$Callback
 *  android.graphics.drawable.Drawable$ConstantState
 *  android.os.SystemClock
 */
package com.google.android.gms.common.images.internal;

import android.graphics.Canvas;
import android.graphics.ColorFilter;
import android.graphics.Rect;
import android.graphics.drawable.Drawable;
import android.os.SystemClock;

public final class CrossFadingDrawable
extends Drawable
implements Drawable.Callback {
    private int mAlpha = 0;
    private int mFrom;
    private boolean zzpl = true;
    private int zzpw = 0;
    private long zzpx;
    private int zzpy;
    private int zzpz = 255;
    private int zzqa;
    private boolean zzqb;
    private zzb zzqc;
    private Drawable zzqd;
    private Drawable zzqe;
    private boolean zzqf;
    private boolean zzqg;
    private boolean zzqh;
    private int zzqi;

    public CrossFadingDrawable(Drawable object, Drawable object2) {
        this(null);
        Drawable drawable2 = object;
        if (object == null) {
            drawable2 = zzqj;
        }
        this.zzqd = drawable2;
        drawable2.setCallback((Drawable.Callback)this);
        object = this.zzqc;
        int n = object.zzql;
        object.zzql = drawable2.getChangingConfigurations() | n;
        object = object2;
        if (object2 == null) {
            object = zzqj;
        }
        this.zzqe = object;
        object.setCallback((Drawable.Callback)this);
        object2 = this.zzqc;
        n = object2.zzql;
        object2.zzql = object.getChangingConfigurations() | n;
    }

    CrossFadingDrawable(zzb zzb2) {
        this.zzqc = new zzb(zzb2);
    }

    public final boolean canConstantState() {
        if (!this.zzqf) {
            boolean bl = this.zzqd.getConstantState() != null && this.zzqe.getConstantState() != null;
            this.zzqg = bl;
            this.zzqf = true;
        }
        return this.zzqg;
    }

    public final void draw(Canvas canvas) {
        int n = this.zzpw;
        int n2 = 1;
        int n3 = 1;
        switch (n) {
            default: {
                break;
            }
            case 2: {
                if (this.zzpx < 0L) break;
                float f = (float)(SystemClock.uptimeMillis() - this.zzpx) / (float)this.zzqa;
                n2 = f >= 1.0f ? n3 : 0;
                if (n2 != 0) {
                    this.zzpw = 0;
                }
                f = Math.min(f, 1.0f);
                this.mAlpha = (int)((float)this.zzpy * f + 0.0f);
                break;
            }
            case 1: {
                this.zzpx = SystemClock.uptimeMillis();
                this.zzpw = 2;
                n2 = 0;
            }
        }
        n3 = this.mAlpha;
        boolean bl = this.zzpl;
        Drawable drawable2 = this.zzqd;
        Drawable drawable3 = this.zzqe;
        if (n2 != 0) {
            if (!bl || n3 == 0) {
                drawable2.draw(canvas);
            }
            if (n3 == this.zzpz) {
                drawable3.setAlpha(this.zzpz);
                drawable3.draw(canvas);
            }
            return;
        }
        if (bl) {
            drawable2.setAlpha(this.zzpz - n3);
        }
        drawable2.draw(canvas);
        if (bl) {
            drawable2.setAlpha(this.zzpz);
        }
        if (n3 > 0) {
            drawable3.setAlpha(n3);
            drawable3.draw(canvas);
            drawable3.setAlpha(this.zzpz);
        }
        this.invalidateSelf();
    }

    public final int getChangingConfigurations() {
        return super.getChangingConfigurations() | this.zzqc.mChangingConfigurations | this.zzqc.zzql;
    }

    public final Drawable.ConstantState getConstantState() {
        if (this.canConstantState()) {
            this.zzqc.mChangingConfigurations = this.getChangingConfigurations();
            return this.zzqc;
        }
        return null;
    }

    public final Drawable getEndDrawable() {
        return this.zzqe;
    }

    public final int getIntrinsicHeight() {
        return Math.max(this.zzqd.getIntrinsicHeight(), this.zzqe.getIntrinsicHeight());
    }

    public final int getIntrinsicWidth() {
        return Math.max(this.zzqd.getIntrinsicWidth(), this.zzqe.getIntrinsicWidth());
    }

    public final int getOpacity() {
        if (!this.zzqh) {
            this.zzqi = Drawable.resolveOpacity((int)this.zzqd.getOpacity(), (int)this.zzqe.getOpacity());
            this.zzqh = true;
        }
        return this.zzqi;
    }

    public final Drawable getStartDrawable() {
        return this.zzqd;
    }

    public final void invalidateDrawable(Drawable drawable2) {
        drawable2 = this.getCallback();
        if (drawable2 != null) {
            drawable2.invalidateDrawable((Drawable)this);
        }
    }

    public final Drawable mutate() {
        if (!this.zzqb && super.mutate() == this) {
            if (!this.canConstantState()) {
                throw new IllegalStateException("One or more children of this LayerDrawable does not have constant state; this drawable cannot be mutated.");
            }
            this.zzqd.mutate();
            this.zzqe.mutate();
            this.zzqb = true;
        }
        return this;
    }

    protected final void onBoundsChange(Rect rect) {
        this.zzqd.setBounds(rect);
        this.zzqe.setBounds(rect);
    }

    public final void resetTransition() {
        this.mAlpha = 0;
        this.zzpw = 0;
        this.invalidateSelf();
    }

    public final void scheduleDrawable(Drawable drawable2, Runnable runnable, long l) {
        drawable2 = this.getCallback();
        if (drawable2 != null) {
            drawable2.scheduleDrawable((Drawable)this, runnable, l);
        }
    }

    public final void setAlpha(int n) {
        if (this.mAlpha == this.zzpz) {
            this.mAlpha = n;
        }
        this.zzpz = n;
        this.invalidateSelf();
    }

    public final void setColorFilter(ColorFilter colorFilter) {
        this.zzqd.setColorFilter(colorFilter);
        this.zzqe.setColorFilter(colorFilter);
    }

    public final void setCrossFadeEnabled(boolean bl) {
        this.zzpl = bl;
    }

    public final void startTransition(int n) {
        this.mFrom = 0;
        this.zzpy = this.zzpz;
        this.mAlpha = 0;
        this.zzqa = n;
        this.zzpw = 1;
        this.invalidateSelf();
    }

    public final void unscheduleDrawable(Drawable drawable2, Runnable runnable) {
        drawable2 = this.getCallback();
        if (drawable2 != null) {
            drawable2.unscheduleDrawable((Drawable)this, runnable);
        }
    }

    private static final class zza
    extends Drawable {
        private static final zza zzqj = new zza();
        private static final com.google.android.gms.common.images.internal.zzb zzqk = new com.google.android.gms.common.images.internal.zzb(null);

        private zza() {
        }

        public final void draw(Canvas canvas) {
        }

        public final Drawable.ConstantState getConstantState() {
            return zzqk;
        }

        public final int getOpacity() {
            return -2;
        }

        public final void setAlpha(int n) {
        }

        public final void setColorFilter(ColorFilter colorFilter) {
        }
    }

    static final class zzb
    extends Drawable.ConstantState {
        int mChangingConfigurations;
        int zzql;

        zzb(zzb zzb2) {
            if (zzb2 != null) {
                this.mChangingConfigurations = zzb2.mChangingConfigurations;
                this.zzql = zzb2.zzql;
            }
        }

        public final int getChangingConfigurations() {
            return this.mChangingConfigurations;
        }

        public final Drawable newDrawable() {
            return new CrossFadingDrawable(this);
        }
    }

}

