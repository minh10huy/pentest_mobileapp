/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.os.Bundle
 *  android.os.Parcel
 *  android.os.Parcelable
 *  android.os.Parcelable$Creator
 *  android.util.SparseArray
 */
package com.google.android.gms.common.server.response;

import android.os.Bundle;
import android.os.Parcel;
import android.os.Parcelable;
import android.util.SparseArray;
import com.google.android.gms.common.internal.Preconditions;
import com.google.android.gms.common.internal.safeparcel.SafeParcelReader;
import com.google.android.gms.common.internal.safeparcel.SafeParcelWriter;
import com.google.android.gms.common.internal.safeparcel.SafeParcelable;
import com.google.android.gms.common.server.response.FastJsonResponse;
import com.google.android.gms.common.server.response.FastSafeParcelableJsonResponse;
import com.google.android.gms.common.server.response.FieldMappingDictionary;
import com.google.android.gms.common.server.response.SafeParcelResponseCreator;
import com.google.android.gms.common.util.ArrayUtils;
import com.google.android.gms.common.util.Base64Utils;
import com.google.android.gms.common.util.JsonUtils;
import com.google.android.gms.common.util.MapUtils;
import com.google.android.gms.common.util.VisibleForTesting;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

@SafeParcelable.Class(creator="SafeParcelResponseCreator")
@VisibleForTesting
public class SafeParcelResponse
extends FastSafeParcelableJsonResponse {
    public static final Parcelable.Creator<SafeParcelResponse> CREATOR = new SafeParcelResponseCreator();
    private final String mClassName;
    @SafeParcelable.VersionField(getter="getVersionCode", id=1)
    private final int zzal;
    @SafeParcelable.Field(getter="getFieldMappingDictionary", id=3)
    private final FieldMappingDictionary zzwn;
    @SafeParcelable.Field(getter="getParcel", id=2)
    private final Parcel zzxq;
    private final int zzxr;
    private int zzxs;
    private int zzxt;

    /*
     * Enabled aggressive block sorting
     */
    @SafeParcelable.Constructor
    SafeParcelResponse(@SafeParcelable.Param(id=1) int n, @SafeParcelable.Param(id=2) Parcel object, @SafeParcelable.Param(id=3) FieldMappingDictionary fieldMappingDictionary) {
        void var2_4;
        void var3_6;
        this.zzal = n;
        this.zzxq = Preconditions.checkNotNull(object);
        this.zzxr = 2;
        this.zzwn = var3_6;
        if (this.zzwn == null) {
            Object var2_3 = null;
        } else {
            String string2 = this.zzwn.getRootClassName();
        }
        this.mClassName = var2_4;
        this.zzxs = 2;
    }

    private SafeParcelResponse(SafeParcelable safeParcelable, FieldMappingDictionary fieldMappingDictionary, String string2) {
        this.zzal = 1;
        this.zzxq = Parcel.obtain();
        safeParcelable.writeToParcel(this.zzxq, 0);
        this.zzxr = 1;
        this.zzwn = Preconditions.checkNotNull(fieldMappingDictionary);
        this.mClassName = Preconditions.checkNotNull(string2);
        this.zzxs = 2;
    }

    public SafeParcelResponse(FieldMappingDictionary fieldMappingDictionary) {
        this(fieldMappingDictionary, fieldMappingDictionary.getRootClassName());
    }

    public SafeParcelResponse(FieldMappingDictionary fieldMappingDictionary, String string2) {
        this.zzal = 1;
        this.zzxq = Parcel.obtain();
        this.zzxr = 0;
        this.zzwn = Preconditions.checkNotNull(fieldMappingDictionary);
        this.mClassName = Preconditions.checkNotNull(string2);
        this.zzxs = 0;
    }

    public static HashMap<String, String> convertBundleToStringMap(Bundle bundle) {
        HashMap<String, String> hashMap = new HashMap<String, String>();
        for (String string2 : bundle.keySet()) {
            hashMap.put(string2, bundle.getString(string2));
        }
        return hashMap;
    }

    public static Bundle convertStringMapToBundle(HashMap<String, String> hashMap) {
        Bundle bundle = new Bundle();
        for (String string2 : hashMap.keySet()) {
            bundle.putString(string2, hashMap.get(string2));
        }
        return bundle;
    }

    public static <T extends FastJsonResponse> SafeParcelResponse from(T t) {
        String string2 = t.getClass().getCanonicalName();
        FieldMappingDictionary fieldMappingDictionary = SafeParcelResponse.zza(t);
        return new SafeParcelResponse((SafeParcelable)t, fieldMappingDictionary, string2);
    }

    public static FieldMappingDictionary generateDictionary(Class<? extends FastJsonResponse> object) {
        try {
            FieldMappingDictionary fieldMappingDictionary = SafeParcelResponse.zza(object.newInstance());
            return fieldMappingDictionary;
        }
        catch (IllegalAccessException illegalAccessException) {
            object = String.valueOf(object.getCanonicalName());
            object = object.length() != 0 ? "Could not access object of type ".concat((String)object) : new String("Could not access object of type ");
            throw new IllegalStateException((String)object, illegalAccessException);
        }
        catch (InstantiationException instantiationException) {
            object = String.valueOf(object.getCanonicalName());
            object = object.length() != 0 ? "Could not instantiate an object of type ".concat((String)object) : new String("Could not instantiate an object of type ");
            throw new IllegalStateException((String)object, instantiationException);
        }
    }

    private static FieldMappingDictionary zza(FastJsonResponse fastJsonResponse) {
        FieldMappingDictionary fieldMappingDictionary = new FieldMappingDictionary(fastJsonResponse.getClass());
        SafeParcelResponse.zza(fieldMappingDictionary, fastJsonResponse);
        fieldMappingDictionary.copyInternalFieldMappings();
        fieldMappingDictionary.linkFields();
        return fieldMappingDictionary;
    }

    private static void zza(FieldMappingDictionary object, FastJsonResponse field) {
        Class<?> class_ = field.getClass();
        if (!object.hasFieldMappingForClass(class_)) {
            Map<String, FastJsonResponse.Field<?, ?>> map = field.getFieldMappings();
            object.put(class_, map);
            class_ = map.keySet().iterator();
            while (class_.hasNext()) {
                field = map.get((String)class_.next());
                Class<FastJsonResponse> class_2 = field.getConcreteType();
                if (class_2 == null) continue;
                try {
                    SafeParcelResponse.zza((FieldMappingDictionary)object, class_2.newInstance());
                }
                catch (IllegalAccessException illegalAccessException) {
                    object = String.valueOf(field.getConcreteType().getCanonicalName());
                    object = object.length() != 0 ? "Could not access object of type ".concat((String)object) : new String("Could not access object of type ");
                    throw new IllegalStateException((String)object, illegalAccessException);
                }
                catch (InstantiationException instantiationException) {
                    object = String.valueOf(field.getConcreteType().getCanonicalName());
                    object = object.length() != 0 ? "Could not instantiate an object of type ".concat((String)object) : new String("Could not instantiate an object of type ");
                    throw new IllegalStateException((String)object, instantiationException);
                }
            }
        }
    }

    private static void zza(StringBuilder stringBuilder, int n, Object object) {
        switch (n) {
            default: {
                stringBuilder = new StringBuilder(26);
                stringBuilder.append("Unknown type = ");
                stringBuilder.append(n);
                throw new IllegalArgumentException(stringBuilder.toString());
            }
            case 11: {
                throw new IllegalArgumentException("Method does not accept concrete type.");
            }
            case 10: {
                MapUtils.writeStringMapToJson(stringBuilder, (HashMap)object);
                return;
            }
            case 9: {
                stringBuilder.append("\"");
                stringBuilder.append(Base64Utils.encodeUrlSafe((byte[])object));
                stringBuilder.append("\"");
                return;
            }
            case 8: {
                stringBuilder.append("\"");
                stringBuilder.append(Base64Utils.encode((byte[])object));
                stringBuilder.append("\"");
                return;
            }
            case 7: {
                stringBuilder.append("\"");
                stringBuilder.append(JsonUtils.escapeString(object.toString()));
                stringBuilder.append("\"");
                return;
            }
            case 0: 
            case 1: 
            case 2: 
            case 3: 
            case 4: 
            case 5: 
            case 6: 
        }
        stringBuilder.append(object);
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Lifted jumps to return sites
     */
    private final void zza(StringBuilder var1_1, Map<String, FastJsonResponse.Field<?, ?>> var2_2, Parcel var3_3) {
        var7_40 = new SparseArray();
        for (Map.Entry<K, V> var8_41 : var2_2.entrySet()) {
            var7_40.put(((FastJsonResponse.Field)var8_41.getValue()).getSafeParcelableFieldId(), var8_41);
        }
        var1_1.append('{');
        var5_48 = SafeParcelReader.validateObjectHeader((Parcel)var3_39);
        var4_49 = 0;
        while (var3_39.dataPosition() < var5_48) {
            block48 : {
                block49 : {
                    block50 : {
                        block47 : {
                            var6_50 = SafeParcelReader.readHeader((Parcel)var3_39);
                            var8_43 = (Map.Entry)var7_40.get(SafeParcelReader.getFieldId(var6_50));
                            if (var8_43 == null) continue;
                            if (var4_49 != 0) {
                                var1_1.append(",");
                            }
                            var2_5 = (String)var8_43.getKey();
                            var8_44 = (FastJsonResponse.Field)var8_43.getValue();
                            var1_1.append("\"");
                            var1_1.append(var2_5);
                            var1_1.append("\":");
                            if (!var8_44.hasConverter()) break block47;
                            switch (var8_44.getTypeOut()) {
                                default: {
                                    var4_49 = var8_44.getTypeOut();
                                    var1_1 = new StringBuilder(36);
                                    var1_1.append("Unknown field out type = ");
                                    var1_1.append(var4_49);
                                    throw new IllegalArgumentException(var1_1.toString());
                                }
                                case 11: {
                                    throw new IllegalArgumentException("Method does not accept concrete type.");
                                }
                                case 10: {
                                    var2_6 = SafeParcelResponse.convertBundleToStringMap(SafeParcelReader.createBundle((Parcel)var3_39, var6_50));
                                    ** break;
                                }
                                case 8: 
                                case 9: {
                                    var2_7 = SafeParcelReader.createByteArray((Parcel)var3_39, var6_50);
                                    ** break;
                                }
                                case 7: {
                                    var2_8 = SafeParcelReader.createString((Parcel)var3_39, var6_50);
                                    ** break;
                                }
                                case 6: {
                                    var2_9 = SafeParcelReader.readBoolean((Parcel)var3_39, var6_50);
                                    ** break;
                                }
                                case 5: {
                                    var2_10 = SafeParcelReader.createBigDecimal((Parcel)var3_39, var6_50);
                                    ** break;
                                }
                                case 4: {
                                    var2_11 = SafeParcelReader.readDouble((Parcel)var3_39, var6_50);
                                    ** break;
                                }
                                case 3: {
                                    var2_12 = Float.valueOf(SafeParcelReader.readFloat((Parcel)var3_39, var6_50));
                                    ** break;
                                }
                                case 2: {
                                    var2_13 = SafeParcelReader.readLong((Parcel)var3_39, var6_50);
                                    ** break;
                                }
                                case 1: {
                                    var2_14 = SafeParcelReader.createBigInteger((Parcel)var3_39, var6_50);
                                    ** break;
                                }
                                case 0: 
                            }
                            var2_15 = SafeParcelReader.readInt((Parcel)var3_39, var6_50);
lbl58: // 10 sources:
                            this.zzb(var1_1, var8_44, this.getOriginalValue(var8_44, var2_16));
                            break block48;
                        }
                        if (!var8_44.isTypeOutArray()) break block49;
                        var1_1.append("[");
                        switch (var8_44.getTypeOut()) {
                            default: {
                                throw new IllegalStateException("Unknown field type out.");
                            }
                            case 11: {
                                var2_17 = SafeParcelReader.createParcelArray((Parcel)var3_39, var6_50);
                                var6_50 = var2_17.length;
                                for (var4_49 = 0; var4_49 < var6_50; ++var4_49) {
                                    if (var4_49 > 0) {
                                        var1_1.append(",");
                                    }
                                    var2_17[var4_49].setDataPosition(0);
                                    this.zza(var1_1, var8_44.getConcreteTypeFieldMappingFromDictionary(), var2_17[var4_49]);
                                }
                                break block50;
                            }
                            case 8: 
                            case 9: 
                            case 10: {
                                throw new UnsupportedOperationException("List of type BASE64, BASE64_URL_SAFE, or STRING_MAP is not supported");
                            }
                            case 7: {
                                ArrayUtils.writeStringArray(var1_1, SafeParcelReader.createStringArray((Parcel)var3_39, var6_50));
                                break block50;
                            }
                            case 6: {
                                ArrayUtils.writeArray(var1_1, SafeParcelReader.createBooleanArray((Parcel)var3_39, var6_50));
                                break block50;
                            }
                            case 5: {
                                var2_18 = SafeParcelReader.createBigDecimalArray((Parcel)var3_39, var6_50);
                                ** GOTO lbl98
                            }
                            case 4: {
                                ArrayUtils.writeArray(var1_1, SafeParcelReader.createDoubleArray((Parcel)var3_39, var6_50));
                                break block50;
                            }
                            case 3: {
                                ArrayUtils.writeArray(var1_1, SafeParcelReader.createFloatArray((Parcel)var3_39, var6_50));
                                break block50;
                            }
                            case 2: {
                                ArrayUtils.writeArray(var1_1, SafeParcelReader.createLongArray((Parcel)var3_39, var6_50));
                                break block50;
                            }
                            case 1: {
                                var2_19 = SafeParcelReader.createBigIntegerArray((Parcel)var3_39, var6_50);
lbl98: // 2 sources:
                                ArrayUtils.writeArray(var1_1, var2_20);
                                break block50;
                            }
                            case 0: 
                        }
                        ArrayUtils.writeArray(var1_1, SafeParcelReader.createIntArray((Parcel)var3_39, var6_50));
                    }
                    var2_22 = "]";
                    ** GOTO lbl152
                }
                switch (var8_44.getTypeOut()) {
                    default: {
                        throw new IllegalStateException("Unknown field type out");
                    }
                    case 11: {
                        var2_23 = SafeParcelReader.createParcel((Parcel)var3_39, var6_50);
                        var2_23.setDataPosition(0);
                        this.zza(var1_1, var8_44.getConcreteTypeFieldMappingFromDictionary(), var2_23);
                        break block48;
                    }
                    case 10: {
                        var2_24 = SafeParcelReader.createBundle((Parcel)var3_39, var6_50);
                        var8_45 = var2_24.keySet();
                        var8_45.size();
                        var1_1.append("{");
                        var8_46 = var8_45.iterator();
                        var4_49 = 1;
                        while (var8_46.hasNext()) {
                            var9_51 = (String)var8_46.next();
                            if (var4_49 == 0) {
                                var1_1.append(",");
                            }
                            var1_1.append("\"");
                            var1_1.append(var9_51);
                            var1_1.append("\"");
                            var1_1.append(":");
                            var1_1.append("\"");
                            var1_1.append(JsonUtils.escapeString(var2_24.getString(var9_51)));
                            var1_1.append("\"");
                            var4_49 = 0;
                        }
                        var2_25 = "}";
                        ** GOTO lbl152
                    }
                    case 9: {
                        var2_26 = SafeParcelReader.createByteArray((Parcel)var3_39, var6_50);
                        var1_1.append("\"");
                        var2_27 = Base64Utils.encodeUrlSafe(var2_26);
                        ** GOTO lbl150
                    }
                    case 8: {
                        var2_28 = SafeParcelReader.createByteArray((Parcel)var3_39, var6_50);
                        var1_1.append("\"");
                        var2_29 = Base64Utils.encode(var2_28);
                        ** GOTO lbl150
                    }
                    case 7: {
                        var2_30 = SafeParcelReader.createString((Parcel)var3_39, var6_50);
                        var1_1.append("\"");
                        var2_31 = JsonUtils.escapeString(var2_30);
lbl150: // 3 sources:
                        var1_1.append((String)var2_32);
                        var2_33 = "\"";
lbl152: // 3 sources:
                        var1_1.append((String)var2_34);
                        break block48;
                    }
                    case 6: {
                        var1_1.append(SafeParcelReader.readBoolean((Parcel)var3_39, var6_50));
                        break block48;
                    }
                    case 5: {
                        var2_35 = SafeParcelReader.createBigDecimal((Parcel)var3_39, var6_50);
                        ** GOTO lbl171
                    }
                    case 4: {
                        var1_1.append(SafeParcelReader.readDouble((Parcel)var3_39, var6_50));
                        break block48;
                    }
                    case 3: {
                        var1_1.append(SafeParcelReader.readFloat((Parcel)var3_39, var6_50));
                        break block48;
                    }
                    case 2: {
                        var1_1.append(SafeParcelReader.readLong((Parcel)var3_39, var6_50));
                        break block48;
                    }
                    case 1: {
                        var2_36 = SafeParcelReader.createBigInteger((Parcel)var3_39, var6_50);
lbl171: // 2 sources:
                        var1_1.append(var2_37);
                        break block48;
                    }
                    case 0: 
                }
                var1_1.append(SafeParcelReader.readInt((Parcel)var3_39, var6_50));
            }
            var4_49 = 1;
        }
        if (var3_39.dataPosition() != var5_48) {
            var1_1 = new StringBuilder(37);
            var1_1.append("Overread allowed size end=");
            var1_1.append(var5_48);
            throw new SafeParcelReader.ParseException(var1_1.toString(), (Parcel)var3_39);
        }
        var1_1.append('}');
    }

    private final void zzb(FastJsonResponse.Field<?, ?> field) {
        if (!field.isValidSafeParcelableFieldId()) {
            throw new IllegalStateException("Field does not have a valid safe parcelable field id.");
        }
        if (this.zzxq == null) {
            throw new IllegalStateException("Internal Parcel object is null.");
        }
        switch (this.zzxs) {
            default: {
                throw new IllegalStateException("Unknown parse state in SafeParcelResponse.");
            }
            case 2: {
                throw new IllegalStateException("Attempted to parse JSON with a SafeParcelResponse object that is already filled with data.");
            }
            case 1: {
                return;
            }
            case 0: 
        }
        this.zzxt = SafeParcelWriter.beginObjectHeader(this.zzxq);
        this.zzxs = 1;
    }

    private final void zzb(StringBuilder stringBuilder, FastJsonResponse.Field<?, ?> field, Object object) {
        if (field.isTypeInArray()) {
            object = (ArrayList)object;
            stringBuilder.append("[");
            int n = object.size();
            for (int i = 0; i < n; ++i) {
                if (i != 0) {
                    stringBuilder.append(",");
                }
                SafeParcelResponse.zza(stringBuilder, field.getTypeIn(), object.get(i));
            }
            stringBuilder.append("]");
            return;
        }
        SafeParcelResponse.zza(stringBuilder, field.getTypeIn(), object);
    }

    @Override
    public <T extends FastJsonResponse> void addConcreteTypeArrayInternal(FastJsonResponse.Field<?, ?> field, String object, ArrayList<T> arrayList) {
        this.zzb(field);
        object = new ArrayList();
        arrayList.size();
        int n = arrayList.size();
        for (int i = 0; i < n; ++i) {
            T t = arrayList.get(i);
            object.add(((SafeParcelResponse)((FastJsonResponse)t)).getParcel());
        }
        SafeParcelWriter.writeParcelList(this.zzxq, field.getSafeParcelableFieldId(), (List<Parcel>)object, true);
    }

    @Override
    public <T extends FastJsonResponse> void addConcreteTypeInternal(FastJsonResponse.Field<?, ?> field, String string2, T t) {
        this.zzb(field);
        string2 = ((SafeParcelResponse)t).getParcel();
        SafeParcelWriter.writeParcel(this.zzxq, field.getSafeParcelableFieldId(), (Parcel)string2, true);
    }

    @Override
    public Map<String, FastJsonResponse.Field<?, ?>> getFieldMappings() {
        if (this.zzwn == null) {
            return null;
        }
        return this.zzwn.getFieldMapping(this.mClassName);
    }

    public Parcel getParcel() {
        switch (this.zzxs) {
            default: {
                break;
            }
            case 0: {
                this.zzxt = SafeParcelWriter.beginObjectHeader(this.zzxq);
            }
            case 1: {
                SafeParcelWriter.finishObjectHeader(this.zzxq, this.zzxt);
                this.zzxs = 2;
            }
        }
        return this.zzxq;
    }

    @Override
    public Object getValueObject(String string2) {
        throw new UnsupportedOperationException("Converting to JSON does not require this method.");
    }

    public int getVersionCode() {
        return this.zzal;
    }

    public <T extends SafeParcelable> T inflate(Parcelable.Creator<T> creator) {
        Parcel parcel = this.getParcel();
        parcel.setDataPosition(0);
        return (T)((SafeParcelable)creator.createFromParcel(parcel));
    }

    @Override
    public boolean isPrimitiveFieldSet(String string2) {
        throw new UnsupportedOperationException("Converting to JSON does not require this method.");
    }

    @Override
    protected void setBigDecimalInternal(FastJsonResponse.Field<?, ?> field, String string2, BigDecimal bigDecimal) {
        this.zzb(field);
        SafeParcelWriter.writeBigDecimal(this.zzxq, field.getSafeParcelableFieldId(), bigDecimal, true);
    }

    @Override
    protected void setBigDecimalsInternal(FastJsonResponse.Field<?, ?> field, String arrbigDecimal, ArrayList<BigDecimal> arrayList) {
        this.zzb(field);
        int n = arrayList.size();
        arrbigDecimal = new BigDecimal[n];
        for (int i = 0; i < n; ++i) {
            arrbigDecimal[i] = arrayList.get(i);
        }
        SafeParcelWriter.writeBigDecimalArray(this.zzxq, field.getSafeParcelableFieldId(), arrbigDecimal, true);
    }

    @Override
    protected void setBigIntegerInternal(FastJsonResponse.Field<?, ?> field, String string2, BigInteger bigInteger) {
        this.zzb(field);
        SafeParcelWriter.writeBigInteger(this.zzxq, field.getSafeParcelableFieldId(), bigInteger, true);
    }

    @Override
    protected void setBigIntegersInternal(FastJsonResponse.Field<?, ?> field, String arrbigInteger, ArrayList<BigInteger> arrayList) {
        this.zzb(field);
        int n = arrayList.size();
        arrbigInteger = new BigInteger[n];
        for (int i = 0; i < n; ++i) {
            arrbigInteger[i] = arrayList.get(i);
        }
        SafeParcelWriter.writeBigIntegerArray(this.zzxq, field.getSafeParcelableFieldId(), arrbigInteger, true);
    }

    @Override
    protected void setBooleanInternal(FastJsonResponse.Field<?, ?> field, String string2, boolean bl) {
        this.zzb(field);
        SafeParcelWriter.writeBoolean(this.zzxq, field.getSafeParcelableFieldId(), bl);
    }

    @Override
    protected void setBooleansInternal(FastJsonResponse.Field<?, ?> field, String arrbl, ArrayList<Boolean> arrayList) {
        this.zzb(field);
        int n = arrayList.size();
        arrbl = new boolean[n];
        for (int i = 0; i < n; ++i) {
            arrbl[i] = arrayList.get(i);
        }
        SafeParcelWriter.writeBooleanArray(this.zzxq, field.getSafeParcelableFieldId(), arrbl, true);
    }

    @Override
    protected void setDecodedBytesInternal(FastJsonResponse.Field<?, ?> field, String string2, byte[] arrby) {
        this.zzb(field);
        SafeParcelWriter.writeByteArray(this.zzxq, field.getSafeParcelableFieldId(), arrby, true);
    }

    @Override
    protected void setDoubleInternal(FastJsonResponse.Field<?, ?> field, String string2, double d) {
        this.zzb(field);
        SafeParcelWriter.writeDouble(this.zzxq, field.getSafeParcelableFieldId(), d);
    }

    @Override
    protected void setDoublesInternal(FastJsonResponse.Field<?, ?> field, String arrd, ArrayList<Double> arrayList) {
        this.zzb(field);
        int n = arrayList.size();
        arrd = new double[n];
        for (int i = 0; i < n; ++i) {
            arrd[i] = arrayList.get(i);
        }
        SafeParcelWriter.writeDoubleArray(this.zzxq, field.getSafeParcelableFieldId(), arrd, true);
    }

    @Override
    protected void setFloatInternal(FastJsonResponse.Field<?, ?> field, String string2, float f) {
        this.zzb(field);
        SafeParcelWriter.writeFloat(this.zzxq, field.getSafeParcelableFieldId(), f);
    }

    @Override
    protected void setFloatsInternal(FastJsonResponse.Field<?, ?> field, String arrf, ArrayList<Float> arrayList) {
        this.zzb(field);
        int n = arrayList.size();
        arrf = new float[n];
        for (int i = 0; i < n; ++i) {
            arrf[i] = arrayList.get(i).floatValue();
        }
        SafeParcelWriter.writeFloatArray(this.zzxq, field.getSafeParcelableFieldId(), arrf, true);
    }

    @Override
    protected void setIntegerInternal(FastJsonResponse.Field<?, ?> field, String string2, int n) {
        this.zzb(field);
        SafeParcelWriter.writeInt(this.zzxq, field.getSafeParcelableFieldId(), n);
    }

    @Override
    protected void setIntegersInternal(FastJsonResponse.Field<?, ?> field, String arrn, ArrayList<Integer> arrayList) {
        this.zzb(field);
        int n = arrayList.size();
        arrn = new int[n];
        for (int i = 0; i < n; ++i) {
            arrn[i] = arrayList.get(i);
        }
        SafeParcelWriter.writeIntArray(this.zzxq, field.getSafeParcelableFieldId(), arrn, true);
    }

    @Override
    protected void setLongInternal(FastJsonResponse.Field<?, ?> field, String string2, long l) {
        this.zzb(field);
        SafeParcelWriter.writeLong(this.zzxq, field.getSafeParcelableFieldId(), l);
    }

    @Override
    protected void setLongsInternal(FastJsonResponse.Field<?, ?> field, String arrl, ArrayList<Long> arrayList) {
        this.zzb(field);
        int n = arrayList.size();
        arrl = new long[n];
        for (int i = 0; i < n; ++i) {
            arrl[i] = arrayList.get(i);
        }
        SafeParcelWriter.writeLongArray(this.zzxq, field.getSafeParcelableFieldId(), arrl, true);
    }

    @Override
    protected void setStringInternal(FastJsonResponse.Field<?, ?> field, String string2, String string3) {
        this.zzb(field);
        SafeParcelWriter.writeString(this.zzxq, field.getSafeParcelableFieldId(), string3, true);
    }

    @Override
    protected void setStringMapInternal(FastJsonResponse.Field<?, ?> field, String string2, Map<String, String> map) {
        this.zzb(field);
        string2 = new Bundle();
        for (String string3 : map.keySet()) {
            string2.putString(string3, map.get(string3));
        }
        SafeParcelWriter.writeBundle(this.zzxq, field.getSafeParcelableFieldId(), (Bundle)string2, true);
    }

    @Override
    protected void setStringsInternal(FastJsonResponse.Field<?, ?> field, String arrstring, ArrayList<String> arrayList) {
        this.zzb(field);
        int n = arrayList.size();
        arrstring = new String[n];
        for (int i = 0; i < n; ++i) {
            arrstring[i] = arrayList.get(i);
        }
        SafeParcelWriter.writeStringArray(this.zzxq, field.getSafeParcelableFieldId(), arrstring, true);
    }

    @Override
    public String toString() {
        Preconditions.checkNotNull(this.zzwn, "Cannot convert to JSON on client side.");
        Parcel parcel = this.getParcel();
        parcel.setDataPosition(0);
        StringBuilder stringBuilder = new StringBuilder(100);
        this.zza(stringBuilder, this.zzwn.getFieldMapping(this.mClassName), parcel);
        return stringBuilder.toString();
    }

    public void writeToParcel(Parcel object, int n) {
        FieldMappingDictionary fieldMappingDictionary;
        int n2 = SafeParcelWriter.beginObjectHeader((Parcel)object);
        SafeParcelWriter.writeInt((Parcel)object, 1, this.getVersionCode());
        SafeParcelWriter.writeParcel((Parcel)object, 2, this.getParcel(), false);
        switch (this.zzxr) {
            default: {
                n = this.zzxr;
                object = new StringBuilder(34);
                object.append("Invalid creation type: ");
                object.append(n);
                throw new IllegalStateException(object.toString());
            }
            case 1: 
            case 2: {
                fieldMappingDictionary = this.zzwn;
                break;
            }
            case 0: {
                fieldMappingDictionary = null;
            }
        }
        SafeParcelWriter.writeParcelable((Parcel)object, 3, fieldMappingDictionary, n, false);
        SafeParcelWriter.finishObjectHeader((Parcel)object, n2);
    }
}

