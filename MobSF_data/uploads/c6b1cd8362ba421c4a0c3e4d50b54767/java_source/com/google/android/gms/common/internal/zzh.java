/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.content.ComponentName
 *  android.content.Context
 *  android.content.ServiceConnection
 *  android.os.Handler
 *  android.os.Handler$Callback
 *  android.os.IBinder
 *  android.os.Looper
 *  android.os.Message
 *  android.util.Log
 *  javax.annotation.concurrent.GuardedBy
 */
package com.google.android.gms.common.internal;

import android.content.ComponentName;
import android.content.Context;
import android.content.ServiceConnection;
import android.os.Handler;
import android.os.IBinder;
import android.os.Looper;
import android.os.Message;
import android.util.Log;
import com.google.android.gms.common.internal.GmsClientSupervisor;
import com.google.android.gms.common.internal.Preconditions;
import com.google.android.gms.common.internal.zzi;
import com.google.android.gms.common.stats.ConnectionTracker;
import com.google.android.gms.common.util.VisibleForTesting;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import javax.annotation.concurrent.GuardedBy;

final class zzh
extends GmsClientSupervisor
implements Handler.Callback {
    private final Handler mHandler;
    private final Context zzau;
    @GuardedBy(value="mConnectionStatus")
    private final HashMap<GmsClientSupervisor.ConnectionStatusConfig, zzi> zztr = new HashMap();
    private final ConnectionTracker zzts;
    private final long zztt;
    private final long zztu;

    zzh(Context context) {
        this.zzau = context.getApplicationContext();
        this.mHandler = new Handler(context.getMainLooper(), (Handler.Callback)this);
        this.zzts = ConnectionTracker.getInstance();
        this.zztt = 5000L;
        this.zztu = 300000L;
    }

    static /* synthetic */ HashMap zza(zzh zzh2) {
        return zzh2.zztr;
    }

    static /* synthetic */ Handler zzb(zzh zzh2) {
        return zzh2.mHandler;
    }

    static /* synthetic */ Context zzc(zzh zzh2) {
        return zzh2.zzau;
    }

    static /* synthetic */ ConnectionTracker zzd(zzh zzh2) {
        return zzh2.zzts;
    }

    static /* synthetic */ long zze(zzh zzh2) {
        return zzh2.zztu;
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @Override
    protected final boolean bindService(GmsClientSupervisor.ConnectionStatusConfig object, ServiceConnection object2, String string2) {
        Preconditions.checkNotNull(object2, "ServiceConnection must not be null");
        HashMap<GmsClientSupervisor.ConnectionStatusConfig, zzi> hashMap = this.zztr;
        synchronized (hashMap) {
            zzi zzi2 = this.zztr.get(object);
            if (zzi2 == null) {
                zzi2 = new zzi(this, (GmsClientSupervisor.ConnectionStatusConfig)object);
                zzi2.zza((ServiceConnection)object2, string2);
                zzi2.zzj(string2);
                this.zztr.put((GmsClientSupervisor.ConnectionStatusConfig)object, zzi2);
                object = zzi2;
                return object.isBound();
            } else {
                this.mHandler.removeMessages(0, object);
                if (zzi2.zza((ServiceConnection)object2)) {
                    object = String.valueOf(object);
                    object2 = new StringBuilder(String.valueOf(object).length() + 81);
                    object2.append("Trying to bind a GmsServiceConnection that was already connected before.  config=");
                    object2.append((String)object);
                    throw new IllegalStateException(object2.toString());
                }
                zzi2.zza((ServiceConnection)object2, string2);
                switch (zzi2.getState()) {
                    case 2: {
                        zzi2.zzj(string2);
                        object = zzi2;
                        return object.isBound();
                    }
                    case 1: {
                        object2.onServiceConnected(zzi2.getComponentName(), zzi2.getBinder());
                        object = zzi2;
                        return object.isBound();
                    }
                    default: {
                        object = zzi2;
                    }
                }
            }
            return object.isBound();
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public final boolean handleMessage(Message object) {
        switch (object.what) {
            default: {
                return false;
            }
            case 1: {
                HashMap<GmsClientSupervisor.ConnectionStatusConfig, zzi> hashMap = this.zztr;
                synchronized (hashMap) {
                    GmsClientSupervisor.ConnectionStatusConfig connectionStatusConfig = (GmsClientSupervisor.ConnectionStatusConfig)object.obj;
                    zzi zzi2 = this.zztr.get(connectionStatusConfig);
                    if (zzi2 != null && zzi2.getState() == 3) {
                        object = String.valueOf(connectionStatusConfig);
                        StringBuilder stringBuilder = new StringBuilder(String.valueOf(object).length() + 47);
                        stringBuilder.append("Timeout waiting for ServiceConnection callback ");
                        stringBuilder.append((String)object);
                        Log.wtf((String)"GmsClientSupervisor", (String)stringBuilder.toString(), (Throwable)new Exception());
                        stringBuilder = zzi2.getComponentName();
                        object = stringBuilder;
                        if (stringBuilder == null) {
                            object = connectionStatusConfig.getComponentName();
                        }
                        stringBuilder = object;
                        if (object == null) {
                            stringBuilder = new ComponentName(connectionStatusConfig.getPackage(), "unknown");
                        }
                        zzi2.onServiceDisconnected((ComponentName)stringBuilder);
                    }
                    return true;
                }
            }
            case 0: 
        }
        HashMap<GmsClientSupervisor.ConnectionStatusConfig, zzi> hashMap = this.zztr;
        synchronized (hashMap) {
            object = (GmsClientSupervisor.ConnectionStatusConfig)object.obj;
            zzi zzi3 = this.zztr.get(object);
            if (zzi3 != null && zzi3.zzcv()) {
                if (zzi3.isBound()) {
                    zzi3.zzk("GmsClientSupervisor");
                }
                this.zztr.remove(object);
            }
            return true;
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @VisibleForTesting
    @Override
    public final void resetForTesting() {
        HashMap<GmsClientSupervisor.ConnectionStatusConfig, zzi> hashMap = this.zztr;
        synchronized (hashMap) {
            Iterator<zzi> iterator = this.zztr.values().iterator();
            do {
                if (!iterator.hasNext()) {
                    this.zztr.clear();
                    return;
                }
                zzi zzi2 = iterator.next();
                this.mHandler.removeMessages(0, (Object)zzi.zza(zzi2));
                if (!zzi2.isBound()) continue;
                zzi2.zzk("GmsClientSupervisor");
            } while (true);
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @Override
    protected final void unbindService(GmsClientSupervisor.ConnectionStatusConfig object, ServiceConnection object2, String string2) {
        Preconditions.checkNotNull(object2, "ServiceConnection must not be null");
        HashMap<GmsClientSupervisor.ConnectionStatusConfig, zzi> hashMap = this.zztr;
        synchronized (hashMap) {
            zzi zzi2 = this.zztr.get(object);
            if (zzi2 == null) {
                object = String.valueOf(object);
                object2 = new StringBuilder(String.valueOf(object).length() + 50);
                object2.append("Nonexistent connection status for service config: ");
                object2.append((String)object);
                throw new IllegalStateException(object2.toString());
            }
            if (!zzi2.zza((ServiceConnection)object2)) {
                object = String.valueOf(object);
                object2 = new StringBuilder(String.valueOf(object).length() + 76);
                object2.append("Trying to unbind a GmsServiceConnection  that was not bound before.  config=");
                object2.append((String)object);
                throw new IllegalStateException(object2.toString());
            }
            zzi2.zzb((ServiceConnection)object2, string2);
            if (zzi2.zzcv()) {
                object = this.mHandler.obtainMessage(0, object);
                this.mHandler.sendMessageDelayed((Message)object, this.zztt);
            }
            return;
        }
    }
}

