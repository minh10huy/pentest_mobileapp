/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.content.Context
 *  android.net.ConnectivityManager
 *  android.net.NetworkInfo
 *  android.os.Build
 *  android.os.Build$VERSION
 */
package com.google.android.gms.internal.measurement;

import android.content.Context;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.os.Build;
import android.support.annotation.WorkerThread;
import com.google.android.gms.common.util.Clock;
import com.google.android.gms.common.util.VisibleForTesting;
import com.google.android.gms.internal.measurement.zzed;
import com.google.android.gms.internal.measurement.zzee;
import com.google.android.gms.internal.measurement.zzeh;
import com.google.android.gms.internal.measurement.zzek;
import com.google.android.gms.internal.measurement.zzer;
import com.google.android.gms.internal.measurement.zzfg;
import com.google.android.gms.internal.measurement.zzfi;
import com.google.android.gms.internal.measurement.zzft;
import com.google.android.gms.internal.measurement.zzgi;
import com.google.android.gms.internal.measurement.zzjs;
import com.google.android.gms.internal.measurement.zzjt;
import com.google.android.gms.internal.measurement.zzjz;
import com.google.android.gms.internal.measurement.zzkd;
import com.google.android.gms.internal.measurement.zzke;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLConnection;
import javax.net.ssl.HttpsURLConnection;
import javax.net.ssl.SSLSocketFactory;

public final class zzfm
extends zzjs {
    private final SSLSocketFactory zzalf;

    public zzfm(zzjt object) {
        super((zzjt)object);
        object = Build.VERSION.SDK_INT < 19 ? new zzke() : null;
        this.zzalf = object;
    }

    static /* synthetic */ byte[] zza(zzfm zzfm2, HttpURLConnection httpURLConnection) throws IOException {
        return zzfm.zzb(httpURLConnection);
    }

    /*
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    @WorkerThread
    private static byte[] zzb(HttpURLConnection arrby) throws IOException {
        InputStream inputStream;
        void var0_3;
        block5 : {
            ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
            inputStream = arrby.getInputStream();
            try {
                int n;
                arrby = new byte[1024];
                while ((n = inputStream.read(arrby)) > 0) {
                    byteArrayOutputStream.write(arrby, 0, n);
                }
                arrby = byteArrayOutputStream.toByteArray();
                if (inputStream == null) return arrby;
            }
            catch (Throwable throwable) {}
            inputStream.close();
            return arrby;
            break block5;
            catch (Throwable throwable) {
                inputStream = null;
            }
        }
        if (inputStream == null) throw var0_3;
        inputStream.close();
        throw var0_3;
    }

    @WorkerThread
    @VisibleForTesting
    protected final HttpURLConnection zzb(URL object) throws IOException {
        if (!((object = object.openConnection()) instanceof HttpURLConnection)) {
            throw new IOException("Failed to obtain HTTP connection");
        }
        if (this.zzalf != null && object instanceof HttpsURLConnection) {
            ((HttpsURLConnection)object).setSSLSocketFactory(this.zzalf);
        }
        object = (HttpURLConnection)object;
        object.setDefaultUseCaches(false);
        object.setConnectTimeout(60000);
        object.setReadTimeout(61000);
        object.setInstanceFollowRedirects(false);
        object.setDoInput(true);
        return object;
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    public final boolean zzex() {
        ConnectivityManager connectivityManager;
        this.zzch();
        connectivityManager = (ConnectivityManager)this.getContext().getSystemService("connectivity");
        try {
            connectivityManager = connectivityManager.getActiveNetworkInfo();
        }
        catch (SecurityException securityException) {
            return false;
        }
        if (connectivityManager == null || !connectivityManager.isConnected()) return false;
        return true;
    }

    @Override
    protected final boolean zzgn() {
        return false;
    }
}

