/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.content.Context
 *  android.content.pm.PackageManager
 *  android.os.IBinder
 *  android.os.RemoteException
 *  android.util.Log
 *  javax.annotation.CheckReturnValue
 *  javax.annotation.concurrent.GuardedBy
 */
package com.google.android.gms.common;

import android.content.Context;
import android.content.pm.PackageManager;
import android.os.IBinder;
import android.os.RemoteException;
import android.util.Log;
import com.google.android.gms.common.GoogleCertificatesQuery;
import com.google.android.gms.common.internal.ICertData;
import com.google.android.gms.common.internal.IGoogleCertificatesApi;
import com.google.android.gms.common.internal.Preconditions;
import com.google.android.gms.common.zzg;
import com.google.android.gms.dynamic.IObjectWrapper;
import com.google.android.gms.dynamic.ObjectWrapper;
import com.google.android.gms.dynamite.DynamiteModule;
import java.io.UnsupportedEncodingException;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashSet;
import java.util.Set;
import javax.annotation.CheckReturnValue;
import javax.annotation.concurrent.GuardedBy;

@CheckReturnValue
final class GoogleCertificates {
    private static volatile IGoogleCertificatesApi zzax;
    private static final Object zzay;
    private static Context zzaz;
    @GuardedBy(value="GoogleCertificates.class")
    private static Set<ICertData> zzba;
    @GuardedBy(value="GoogleCertificates.class")
    private static Set<ICertData> zzbb;

    static {
        zzay = new Object();
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    static void init(Context context) {
        synchronized (GoogleCertificates.class) {
            if (zzaz == null) {
                if (context != null) {
                    zzaz = context.getApplicationContext();
                    return;
                }
            } else {
                Log.w((String)"GoogleCertificates", (String)"GoogleCertificates has been initialized already");
            }
            return;
        }
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    static zzg zza(String string2, CertData object, boolean bl) {
        boolean bl2;
        block5 : {
            void var0_2;
            try {
                GoogleCertificates.zzc();
            }
            catch (DynamiteModule.LoadingException loadingException) {
                object = "module init";
                return zzg.zza((String)object, (Throwable)var0_2);
            }
            Preconditions.checkNotNull(zzaz);
            GoogleCertificatesQuery googleCertificatesQuery = new GoogleCertificatesQuery(string2, (CertData)object, bl);
            try {
                bl2 = zzax.isGoogleOrPlatformSigned(googleCertificatesQuery, ObjectWrapper.wrap(zzaz.getPackageManager()));
                if (!bl2) break block5;
            }
            catch (RemoteException remoteException) {
                Log.e((String)"GoogleCertificates", (String)"Failed to get Google certificates from remote", (Throwable)remoteException);
                object = "module call";
                do {
                    return zzg.zza((String)object, (Throwable)var0_2);
                    break;
                } while (true);
            }
            return zzg.zzg();
        }
        bl2 = true;
        if (!bl && GoogleCertificates.zza((String)string2, (CertData)object, (boolean)true).zzbl) return zzg.zza(string2, (CertData)object, bl, bl2);
        bl2 = false;
        return zzg.zza(string2, (CertData)object, bl, bl2);
    }

    private static Set<ICertData> zza(IBinder[] arriBinder) throws RemoteException {
        int n = arriBinder.length;
        HashSet<ICertData> hashSet = new HashSet<ICertData>(n);
        for (int i = 0; i < n; ++i) {
            ICertData iCertData = ICertData.Stub.asInterface(arriBinder[i]);
            if (iCertData == null) continue;
            hashSet.add(iCertData);
        }
        return hashSet;
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    private static void zzc() throws DynamiteModule.LoadingException {
        if (zzax != null) {
            return;
        }
        Preconditions.checkNotNull(zzaz);
        Object object = zzay;
        synchronized (object) {
            if (zzax == null) {
                zzax = IGoogleCertificatesApi.Stub.asInterface(DynamiteModule.load(zzaz, DynamiteModule.PREFER_HIGHEST_OR_LOCAL_VERSION_NO_FORCE_STAGING, "com.google.android.gms.googlecertificates").instantiate("com.google.android.gms.common.GoogleCertificatesImpl"));
            }
            return;
        }
    }

    /*
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Converted monitor instructions to comments
     * Lifted jumps to return sites
     */
    static Set<ICertData> zzd() {
        Set<ICertData> set;
        block12 : {
            // MONITORENTER : com.google.android.gms.common.GoogleCertificates.class
            if (zzba != null) {
                Set<ICertData> set2 = zzba;
                // MONITOREXIT : com.google.android.gms.common.GoogleCertificates.class
                return set2;
            }
            GoogleCertificates.zzc();
            try {
                set = zzax.getGoogleCertificates();
                if (set != null) break block12;
                Log.e((String)"GoogleCertificates", (String)"Failed to get Google certificates from remote");
                set = Collections.emptySet();
            }
            catch (RemoteException remoteException) {
                Log.e((String)"GoogleCertificates", (String)"Failed to get Google certificates from remote", (Throwable)remoteException);
                Set<ICertData> set3 = Collections.emptySet();
                // MONITOREXIT : com.google.android.gms.common.GoogleCertificates.class
                return set3;
            }
            return set;
        }
        set = zzba = GoogleCertificates.zza((IBinder[])ObjectWrapper.unwrap((IObjectWrapper)((Object)set)));
        // MONITOREXIT : com.google.android.gms.common.GoogleCertificates.class
        return set;
        catch (DynamiteModule.LoadingException loadingException) {
            Log.e((String)"GoogleCertificates", (String)"Failed to load com.google.android.gms.googlecertificates", (Throwable)loadingException);
            Set<ICertData> set4 = Collections.emptySet();
            // MONITOREXIT : com.google.android.gms.common.GoogleCertificates.class
            return set4;
        }
    }

    /*
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Converted monitor instructions to comments
     * Lifted jumps to return sites
     */
    static Set<ICertData> zze() {
        Set<ICertData> set;
        block12 : {
            // MONITORENTER : com.google.android.gms.common.GoogleCertificates.class
            if (zzbb != null) {
                Set<ICertData> set2 = zzbb;
                // MONITOREXIT : com.google.android.gms.common.GoogleCertificates.class
                return set2;
            }
            GoogleCertificates.zzc();
            try {
                set = zzax.getGoogleReleaseCertificates();
                if (set != null) break block12;
                Log.e((String)"GoogleCertificates", (String)"Failed to get Google certificates from remote");
                set = Collections.emptySet();
            }
            catch (RemoteException remoteException) {
                Log.e((String)"GoogleCertificates", (String)"Failed to get Google certificates from remote", (Throwable)remoteException);
                Set<ICertData> set3 = Collections.emptySet();
                // MONITOREXIT : com.google.android.gms.common.GoogleCertificates.class
                return set3;
            }
            return set;
        }
        set = zzbb = GoogleCertificates.zza((IBinder[])ObjectWrapper.unwrap((IObjectWrapper)((Object)set)));
        // MONITOREXIT : com.google.android.gms.common.GoogleCertificates.class
        return set;
        catch (DynamiteModule.LoadingException loadingException) {
            Log.e((String)"GoogleCertificates", (String)"Failed to load com.google.android.gms.googlecertificates", (Throwable)loadingException);
            Set<ICertData> set4 = Collections.emptySet();
            // MONITOREXIT : com.google.android.gms.common.GoogleCertificates.class
            return set4;
        }
    }

    static abstract class CertData
    extends ICertData.Stub {
        private int zzbc;

        protected CertData(byte[] arrby) {
            boolean bl = arrby.length == 25;
            Preconditions.checkArgument(bl);
            this.zzbc = Arrays.hashCode(arrby);
        }

        protected static byte[] zzd(String arrby) {
            try {
                arrby = arrby.getBytes("ISO-8859-1");
                return arrby;
            }
            catch (UnsupportedEncodingException unsupportedEncodingException) {
                throw new AssertionError(unsupportedEncodingException);
            }
        }

        public boolean equals(Object arrby) {
            if (arrby != null) {
                block7 : {
                    block6 : {
                        if (!(arrby instanceof ICertData)) {
                            return false;
                        }
                        arrby = (ICertData)arrby;
                        if (arrby.getHashCode() == this.hashCode()) break block6;
                        return false;
                    }
                    arrby = arrby.getBytesWrapped();
                    if (arrby != null) break block7;
                    return false;
                }
                try {
                    arrby = (byte[])ObjectWrapper.unwrap((IObjectWrapper)arrby);
                    boolean bl = Arrays.equals(this.getBytes(), arrby);
                    return bl;
                }
                catch (RemoteException remoteException) {
                    Log.e((String)"GoogleCertificates", (String)"Failed to get Google certificates from remote", (Throwable)remoteException);
                }
            }
            return false;
        }

        abstract byte[] getBytes();

        @Override
        public IObjectWrapper getBytesWrapped() {
            return ObjectWrapper.wrap(this.getBytes());
        }

        @Override
        public int getHashCode() {
            return this.hashCode();
        }

        public int hashCode() {
            return this.zzbc;
        }
    }

}

