/*
 * Decompiled with CFR 0_132.
 */
package com.google.android.gms.internal.measurement;

import com.google.android.gms.internal.measurement.zzacg;

public final class zzacf
implements Cloneable {
    private static final zzacg zzbzh = new zzacg();
    private int mSize;
    private boolean zzbzi = false;
    private int[] zzbzj;
    private zzacg[] zzbzk;

    zzacf() {
        this(10);
    }

    private zzacf(int n) {
        n = zzacf.idealIntArraySize(n);
        this.zzbzj = new int[n];
        this.zzbzk = new zzacg[n];
        this.mSize = 0;
    }

    private static int idealIntArraySize(int n) {
        int n2;
        int n3 = n << 2;
        n = 4;
        do {
            n2 = n3;
            if (n >= 32 || n3 <= (n2 = (1 << n) - 12)) break;
            ++n;
        } while (true);
        return n2 / 4;
    }

    private final int zzav(int n) {
        int n2 = this.mSize - 1;
        int n3 = 0;
        while (n3 <= n2) {
            int n4 = n3 + n2 >>> 1;
            int n5 = this.zzbzj[n4];
            if (n5 < n) {
                n3 = n4 + 1;
                continue;
            }
            if (n5 > n) {
                n2 = n4 - 1;
                continue;
            }
            return n4;
        }
        return ~ n3;
    }

    public final /* synthetic */ Object clone() throws CloneNotSupportedException {
        int n = this.mSize;
        zzacf zzacf2 = new zzacf(n);
        int[] arrn = this.zzbzj;
        int[] arrn2 = zzacf2.zzbzj;
        System.arraycopy(arrn, 0, arrn2, 0, n);
        for (int i = 0; i < n; ++i) {
            if (this.zzbzk[i] == null) continue;
            zzacf2.zzbzk[i] = (zzacg)this.zzbzk[i].clone();
        }
        zzacf2.mSize = n;
        return zzacf2;
    }

    public final boolean equals(Object arrzzacg) {
        Object[] arrobject;
        int n;
        int n2;
        block7 : {
            if (arrzzacg == this) {
                return true;
            }
            if (!(arrzzacg instanceof zzacf)) {
                return false;
            }
            arrzzacg = (zzacf)arrzzacg;
            if (this.mSize != arrzzacg.mSize) {
                return false;
            }
            arrobject = this.zzbzj;
            int[] arrn = arrzzacg.zzbzj;
            n = this.mSize;
            for (n2 = 0; n2 < n; ++n2) {
                if (arrobject[n2] == arrn[n2]) continue;
                n2 = 0;
                break block7;
            }
            n2 = 1;
        }
        if (n2 != 0) {
            block8 : {
                arrobject = this.zzbzk;
                arrzzacg = arrzzacg.zzbzk;
                n = this.mSize;
                for (n2 = 0; n2 < n; ++n2) {
                    if (arrobject[n2].equals(arrzzacg[n2])) continue;
                    n2 = 0;
                    break block8;
                }
                n2 = 1;
            }
            if (n2 != 0) {
                return true;
            }
        }
        return false;
    }

    public final int hashCode() {
        int n = 17;
        for (int i = 0; i < this.mSize; ++i) {
            n = (n * 31 + this.zzbzj[i]) * 31 + this.zzbzk[i].hashCode();
        }
        return n;
    }

    public final boolean isEmpty() {
        if (this.mSize == 0) {
            return true;
        }
        return false;
    }

    final int size() {
        return this.mSize;
    }

    final void zza(int n, zzacg zzacg2) {
        Object[] arrobject;
        int[] arrn;
        int n2;
        int n3 = this.zzav(n);
        if (n3 >= 0) {
            this.zzbzk[n3] = zzacg2;
            return;
        }
        if ((n3 ^= -1) < this.mSize && this.zzbzk[n3] == zzbzh) {
            this.zzbzj[n3] = n;
            this.zzbzk[n3] = zzacg2;
            return;
        }
        if (this.mSize >= this.zzbzj.length) {
            n2 = zzacf.idealIntArraySize(this.mSize + 1);
            arrn = new int[n2];
            arrobject = new zzacg[n2];
            System.arraycopy(this.zzbzj, 0, arrn, 0, this.zzbzj.length);
            System.arraycopy(this.zzbzk, 0, arrobject, 0, this.zzbzk.length);
            this.zzbzj = arrn;
            this.zzbzk = arrobject;
        }
        if (this.mSize - n3 != 0) {
            arrn = this.zzbzj;
            arrobject = this.zzbzj;
            n2 = n3 + 1;
            System.arraycopy(arrn, n3, arrobject, n2, this.mSize - n3);
            System.arraycopy(this.zzbzk, n3, this.zzbzk, n2, this.mSize - n3);
        }
        this.zzbzj[n3] = n;
        this.zzbzk[n3] = zzacg2;
        ++this.mSize;
    }

    final zzacg zzat(int n) {
        if ((n = this.zzav(n)) >= 0 && this.zzbzk[n] != zzbzh) {
            return this.zzbzk[n];
        }
        return null;
    }

    final zzacg zzau(int n) {
        return this.zzbzk[n];
    }
}

