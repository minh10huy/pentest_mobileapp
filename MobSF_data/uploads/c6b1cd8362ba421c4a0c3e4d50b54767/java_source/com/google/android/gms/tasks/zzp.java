/*
 * Decompiled with CFR 0_132.
 */
package com.google.android.gms.tasks;

import com.google.android.gms.tasks.OnCanceledListener;
import com.google.android.gms.tasks.OnFailureListener;
import com.google.android.gms.tasks.OnSuccessListener;
import com.google.android.gms.tasks.RuntimeExecutionException;
import com.google.android.gms.tasks.Task;
import com.google.android.gms.tasks.TaskExecutors;
import com.google.android.gms.tasks.zzo;
import java.util.concurrent.CancellationException;
import java.util.concurrent.Executor;

final class zzp
implements Runnable {
    private final /* synthetic */ Task zzafn;
    private final /* synthetic */ zzo zzafz;

    zzp(zzo zzo2, Task task) {
        this.zzafz = zzo2;
        this.zzafn = task;
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @Override
    public final void run() {
        Task task;
        block5 : {
            try {
                task = zzo.zza(this.zzafz).then(this.zzafn.getResult());
                if (task != null) break block5;
            }
            catch (Exception exception) {
                this.zzafz.onFailure(exception);
                return;
            }
            catch (RuntimeExecutionException runtimeExecutionException) {
                if (runtimeExecutionException.getCause() instanceof Exception) {
                    this.zzafz.onFailure((Exception)runtimeExecutionException.getCause());
                    return;
                }
                this.zzafz.onFailure(runtimeExecutionException);
                return;
            }
            catch (CancellationException cancellationException) {}
            this.zzafz.onFailure(new NullPointerException("Continuation returned null"));
            return;
        }
        task.addOnSuccessListener(TaskExecutors.zzagd, this.zzafz);
        task.addOnFailureListener(TaskExecutors.zzagd, (OnFailureListener)this.zzafz);
        task.addOnCanceledListener(TaskExecutors.zzagd, (OnCanceledListener)this.zzafz);
        return;
        this.zzafz.onCanceled();
    }
}

