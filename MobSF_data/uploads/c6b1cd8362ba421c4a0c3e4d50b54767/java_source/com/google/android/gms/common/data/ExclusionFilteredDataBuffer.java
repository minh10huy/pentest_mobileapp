/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.text.TextUtils
 */
package com.google.android.gms.common.data;

import android.text.TextUtils;
import com.google.android.gms.common.data.AbstractDataBuffer;
import com.google.android.gms.common.data.DataBuffer;
import com.google.android.gms.common.data.DataBufferObserver;
import com.google.android.gms.common.data.DataBufferObserverSet;
import com.google.android.gms.common.data.DataHolder;
import com.google.android.gms.common.data.EntityBuffer;
import com.google.android.gms.common.data.ExclusionFilterable;
import com.google.android.gms.common.data.FilteredDataBuffer;
import com.google.android.gms.common.util.VisibleForTesting;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.HashSet;

@VisibleForTesting
public final class ExclusionFilteredDataBuffer<T>
extends FilteredDataBuffer<T>
implements DataBufferObserver.Observable,
ExclusionFilterable {
    private AbstractDataBuffer<T> zzoc;
    private final String zzod;
    private final HashSet<Integer> zzoe = new HashSet();
    private DataBufferObserverSet zzof;

    public ExclusionFilteredDataBuffer(AbstractDataBuffer<T> abstractDataBuffer, String string2) {
        super(abstractDataBuffer);
        this.zzoc = abstractDataBuffer;
        this.zzod = string2;
        this.zzof = new DataBufferObserverSet();
    }

    private final ArrayList<Integer> zza(String string2, ArrayList<Integer> arrayList) {
        ArrayList<Integer> arrayList2 = new ArrayList<Integer>();
        if (arrayList != null) {
            arrayList.clear();
        }
        DataHolder dataHolder = this.zzoc.mDataHolder;
        String string3 = this.zzod;
        boolean bl = this.zzoc instanceof EntityBuffer;
        int n = this.zzoc.getCount();
        int n2 = 0;
        for (int i = 0; i < n; ++i) {
            int n3;
            int n4 = bl ? ((EntityBuffer)this.zzoc).zzi(i) : i;
            String string4 = dataHolder.getString(string3, n4, dataHolder.getWindowIndex(n4));
            if (arrayList != null) {
                if (this.zzoe.contains(i)) {
                    n4 = - n2;
                    n3 = n4 - 1;
                    n4 = n2;
                } else {
                    n4 = n2 + 1;
                    n3 = n2;
                }
            } else {
                n4 = n2;
                n3 = n2;
            }
            if (!TextUtils.isEmpty((CharSequence)string4) && string4.equals(string2)) {
                arrayList2.add(i);
                if (arrayList != null) {
                    arrayList.add(n3);
                }
            }
            n2 = n4;
        }
        return arrayList2;
    }

    @Override
    public final void addObserver(DataBufferObserver dataBufferObserver) {
        this.zzof.addObserver(dataBufferObserver);
    }

    /*
     * Enabled aggressive block sorting
     */
    @Override
    public final void clearFilters() {
        if (!this.zzof.hasObservers()) {
            this.zzoe.clear();
            return;
        }
        int n = this.zzoe.size();
        Object[] arrobject = new Integer[n];
        arrobject = this.zzoe.toArray(arrobject);
        Arrays.sort(arrobject);
        int n2 = 0;
        int n3 = 0;
        for (int i = 0; i < n; ++i) {
            int n4 = arrobject[i].intValue();
            this.zzoe.remove(n4);
            if (n2 != 0) {
                if (n4 == n3 + n2) {
                    ++n2;
                    continue;
                }
                this.zzof.onDataRangeRemoved(n3, n2);
            }
            n3 = n4;
            n2 = 1;
        }
        if (n2 > 0) {
            this.zzof.onDataRangeRemoved(n3, n2);
        }
    }

    @Override
    public final int computeRealPosition(int n) {
        if (this.zzoe.isEmpty()) {
            return n;
        }
        if (n >= 0 && n < this.getCount()) {
            int n2 = this.mDataBuffer.getCount();
            int n3 = 0;
            for (int i = 0; i < n2; ++i) {
                int n4 = n3;
                if (!this.zzoe.contains(i)) {
                    if (n3 == n) {
                        return i;
                    }
                    n4 = n3 + 1;
                }
                n3 = n4;
            }
            return -1;
        }
        StringBuilder stringBuilder = new StringBuilder(53);
        stringBuilder.append("Position ");
        stringBuilder.append(n);
        stringBuilder.append(" is out of bounds for this buffer");
        throw new IllegalArgumentException(stringBuilder.toString());
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Lifted jumps to return sites
     */
    @Override
    public final void filterOut(String var1_1) {
        if (TextUtils.isEmpty(var1_1)) {
            return;
        }
        var9_2 = null;
        if (this.zzof.hasObservers()) {
            var9_2 = new ArrayList<Integer>();
        }
        var1_1 = this.zza((String)var1_1, var9_2);
        if (!this.zzof.hasObservers()) {
            this.zzoe.addAll(var1_1);
            return;
        }
        var4_3 = var1_1.size() - 1;
        var5_4 = 0;
        var6_5 = 0;
        do {
            block7 : {
                if (var4_3 < 0) {
                    if (var5_4 <= 0) return;
                    this.zzof.onDataRangeRemoved(var6_5, var5_4);
                    return;
                }
                var8_9 = var9_2.get(var4_3);
                var7_8 = var8_9 < 0;
                var2_6 = var5_4;
                var3_7 = var6_5;
                if (var7_8) break block7;
                var2_6 = var1_1.get(var4_3);
                this.zzoe.add(var2_6);
                if (var5_4 == 0) ** GOTO lbl31
                if (var8_9 == var6_5 - 1) {
                    var3_7 = var6_5 - 1;
                    var2_6 = var5_4 + 1;
                } else {
                    this.zzof.onDataRangeRemoved(var6_5, var5_4);
lbl31: // 2 sources:
                    var3_7 = var8_9;
                    var2_6 = 1;
                }
            }
            --var4_3;
            var5_4 = var2_6;
            var6_5 = var3_7;
        } while (true);
    }

    @Override
    public final int getCount() {
        return this.mDataBuffer.getCount() - this.zzoe.size();
    }

    @Override
    public final void release() {
        super.release();
        this.zzof.clear();
    }

    @Override
    public final void removeObserver(DataBufferObserver dataBufferObserver) {
        this.zzof.removeObserver(dataBufferObserver);
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Lifted jumps to return sites
     */
    @Override
    public final void unfilter(String var1_1) {
        if (TextUtils.isEmpty(var1_1)) {
            return;
        }
        var9_2 = null;
        if (this.zzof.hasObservers()) {
            var9_2 = new ArrayList<Integer>();
        }
        var1_1 = this.zza((String)var1_1, var9_2);
        if (!this.zzof.hasObservers()) {
            this.zzoe.removeAll(var1_1);
            return;
        }
        var3_3 = var1_1.size() - 1;
        var5_4 = 0;
        var4_5 = 0;
        do {
            block7 : {
                if (var3_3 < 0) {
                    if (var5_4 <= 0) return;
                    this.zzof.onDataRangeInserted(var4_5, var5_4);
                    return;
                }
                var8_9 = var9_2.get(var3_3);
                var7_8 = var8_9 < 0;
                var2_6 = var5_4;
                var6_7 = var4_5;
                if (!var7_8) break block7;
                var2_6 = var1_1.get(var3_3);
                this.zzoe.remove(var2_6);
                var6_7 = - var8_9 - 1;
                if (var5_4 == 0) ** GOTO lbl32
                if (var6_7 == var4_5) {
                    var2_6 = var5_4 + 1;
                    var6_7 = var4_5;
                } else {
                    this.zzof.onDataRangeInserted(var4_5, var5_4);
lbl32: // 2 sources:
                    var2_6 = 1;
                }
            }
            --var3_3;
            var5_4 = var2_6;
            var4_5 = var6_7;
        } while (true);
    }
}

