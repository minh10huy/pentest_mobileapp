/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.content.Context
 *  android.content.res.Configuration
 *  android.content.res.Resources
 *  android.text.TextUtils
 */
package com.google.android.gms.common.data;

import android.content.Context;
import android.content.res.Configuration;
import android.content.res.Resources;
import android.text.TextUtils;
import com.google.android.gms.common.data.AbstractDataBuffer;
import com.google.android.gms.common.data.DataBuffer;
import com.google.android.gms.common.data.DataHolder;
import com.google.android.gms.common.data.EntityBuffer;
import com.google.android.gms.common.data.FilteredDataBuffer;
import com.google.android.gms.common.data.TextFilterable;
import com.google.android.gms.common.internal.Preconditions;
import com.google.android.gms.common.util.VisibleForTesting;
import java.util.ArrayList;
import java.util.Locale;

public final class TextFilteredDataBuffer<T>
extends FilteredDataBuffer<T>
implements TextFilterable {
    private final ArrayList<Integer> zzob = new ArrayList();
    private AbstractDataBuffer<T> zzoc;
    private final String zzoo;
    private String zzop;
    private TextFilterable.StringFilter zzoq;
    private Locale zzor;

    public TextFilteredDataBuffer(AbstractDataBuffer<T> abstractDataBuffer, String string2) {
        super(abstractDataBuffer);
        this.zzoc = abstractDataBuffer;
        this.zzoo = string2;
    }

    private final String zzh(String string2) {
        string2 = string2.toLowerCase(this.zzor);
        StringBuilder stringBuilder = new StringBuilder();
        int n = string2.length();
        for (int i = 0; i < n; ++i) {
            if (Character.isIdentifierIgnorable(string2.charAt(i))) continue;
            stringBuilder.append(string2.charAt(i));
        }
        return stringBuilder.toString();
    }

    @Override
    public final int computeRealPosition(int n) {
        if (TextUtils.isEmpty((CharSequence)this.zzop)) {
            return n;
        }
        if (n >= 0 && n < this.zzob.size()) {
            return this.zzob.get(n);
        }
        StringBuilder stringBuilder = new StringBuilder(53);
        stringBuilder.append("Position ");
        stringBuilder.append(n);
        stringBuilder.append(" is out of bounds for this buffer");
        throw new IllegalArgumentException(stringBuilder.toString());
    }

    @Override
    public final int getCount() {
        if (TextUtils.isEmpty((CharSequence)this.zzop)) {
            return this.mDataBuffer.getCount();
        }
        return this.zzob.size();
    }

    @Override
    public final void setFilterTerm(Context object, TextFilterable.StringFilter object2, String string2) {
        Preconditions.checkNotNull(object2);
        this.zzop = string2;
        this.zzoq = object2;
        if (!TextUtils.isEmpty((CharSequence)this.zzop)) {
            this.zzor = object.getResources().getConfiguration().locale;
            this.zzop = this.zzh(this.zzop);
            this.zzob.clear();
            object = this.zzoc.mDataHolder;
            object2 = this.zzoo;
            boolean bl = this.zzoc instanceof EntityBuffer;
            int n = this.zzoc.getCount();
            for (int i = 0; i < n; ++i) {
                int n2 = bl ? ((EntityBuffer)this.zzoc).zzi(i) : i;
                string2 = object.getString((String)object2, n2, object.getWindowIndex(n2));
                if (TextUtils.isEmpty((CharSequence)string2) || !this.zzoq.matches(this.zzh(string2), this.zzop)) continue;
                this.zzob.add(i);
            }
            return;
        }
        this.zzob.clear();
    }

    @VisibleForTesting
    @Override
    public final void setFilterTerm(Context context, String string2) {
        this.setFilterTerm(context, CONTAINS, string2);
    }
}

