/*
 * Decompiled with CFR 0_132.
 */
package com.google.android.gms.internal.measurement;

import com.google.android.gms.internal.measurement.zzabs;
import com.google.android.gms.internal.measurement.zzza;
import java.lang.reflect.AnnotatedElement;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.nio.Buffer;
import java.nio.ByteOrder;
import java.security.AccessController;
import java.util.logging.Level;
import java.util.logging.Logger;
import sun.misc.Unsafe;

final class zzabr {
    private static final Logger logger = Logger.getLogger(zzabr.class.getName());
    private static final Class<?> zzbtc;
    private static final Unsafe zzbvq;
    private static final boolean zzbwu;
    private static final boolean zzbwv;
    private static final zzd zzbww;
    private static final boolean zzbwx;
    private static final boolean zzbwy;
    private static final long zzbwz;
    private static final long zzbxa;
    private static final long zzbxb;
    private static final long zzbxc;
    private static final long zzbxd;
    private static final long zzbxe;
    private static final long zzbxf;
    private static final long zzbxg;
    private static final long zzbxh;
    private static final long zzbxi;
    private static final long zzbxj;
    private static final long zzbxk;
    private static final long zzbxl;
    private static final long zzbxm;
    private static final long zzbxn;
    private static final boolean zzbxo;

    /*
     * Unable to fully structure code
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    static {
        zzabr.zzbvq = zzabr.zzvg();
        zzabr.zzbtc = zzza.zztl();
        zzabr.zzbwu = zzabr.zzk(Long.TYPE);
        zzabr.zzbwv = zzabr.zzk(Integer.TYPE);
        if (zzabr.zzbvq == null) {
            do {
                var1 = null;
                break;
            } while (true);
        } else if (zzza.zztk()) {
            if (zzabr.zzbwu) {
                var1 = new zzb(zzabr.zzbvq);
            } else {
                if (!zzabr.zzbwv) ** continue;
                var1 = new zza(zzabr.zzbvq);
            }
        } else {
            var1 = new zzc(zzabr.zzbvq);
        }
        zzabr.zzbww = var1;
        zzabr.zzbwx = zzabr.zzvi();
        zzabr.zzbwy = zzabr.zzvh();
        zzabr.zzbwz = zzabr.zzi(byte[].class);
        zzabr.zzbxa = zzabr.zzi(boolean[].class);
        zzabr.zzbxb = zzabr.zzj(boolean[].class);
        zzabr.zzbxc = zzabr.zzi(int[].class);
        zzabr.zzbxd = zzabr.zzj(int[].class);
        zzabr.zzbxe = zzabr.zzi(long[].class);
        zzabr.zzbxf = zzabr.zzj(long[].class);
        zzabr.zzbxg = zzabr.zzi(float[].class);
        zzabr.zzbxh = zzabr.zzj(float[].class);
        zzabr.zzbxi = zzabr.zzi(double[].class);
        zzabr.zzbxj = zzabr.zzj(double[].class);
        zzabr.zzbxk = zzabr.zzi(Object[].class);
        zzabr.zzbxl = zzabr.zzj(Object[].class);
        zzabr.zzbxm = zzabr.zza(zzabr.zzvj());
        var1 = zzabr.zza(String.class, "value");
        if (var1 == null || var1.getType() != char[].class) {
            var1 = null;
        }
        zzabr.zzbxn = zzabr.zza((Field)var1);
        var0_1 = ByteOrder.nativeOrder() == ByteOrder.BIG_ENDIAN;
        zzabr.zzbxo = var0_1;
    }

    private zzabr() {
    }

    private static long zza(Field field) {
        if (field != null && zzbww != null) {
            return zzabr.zzbww.zzbxp.objectFieldOffset(field);
        }
        return -1L;
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    private static Field zza(Class<?> annotatedElement, String string2) {
        try {
            annotatedElement = annotatedElement.getDeclaredField(string2);
            annotatedElement.setAccessible(true);
            return annotatedElement;
        }
        catch (Throwable throwable) {
            return null;
        }
    }

    private static int zzi(Class<?> class_) {
        if (zzbwy) {
            return zzabr.zzbww.zzbxp.arrayBaseOffset(class_);
        }
        return -1;
    }

    private static int zzj(Class<?> class_) {
        if (zzbwy) {
            return zzabr.zzbww.zzbxp.arrayIndexScale(class_);
        }
        return -1;
    }

    private static boolean zzk(Class<?> class_) {
        if (!zzza.zztk()) {
            return false;
        }
        try {
            Class<?> class_2 = zzbtc;
            class_2.getMethod("peekLong", class_, Boolean.TYPE);
            class_2.getMethod("pokeLong", class_, Long.TYPE, Boolean.TYPE);
            class_2.getMethod("pokeInt", class_, Integer.TYPE, Boolean.TYPE);
            class_2.getMethod("peekInt", class_, Boolean.TYPE);
            class_2.getMethod("pokeByte", class_, Byte.TYPE);
            class_2.getMethod("peekByte", class_);
            class_2.getMethod("pokeByteArray", class_, byte[].class, Integer.TYPE, Integer.TYPE);
            class_2.getMethod("peekByteArray", class_, byte[].class, Integer.TYPE, Integer.TYPE);
            return true;
        }
        catch (Throwable throwable) {
            return false;
        }
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    static Unsafe zzvg() {
        try {
            return (Unsafe)AccessController.doPrivileged(new zzabs());
        }
        catch (Throwable throwable) {
            return null;
        }
    }

    private static boolean zzvh() {
        Object object;
        block4 : {
            if (zzbvq == null) {
                return false;
            }
            try {
                object = zzbvq.getClass();
                object.getMethod("objectFieldOffset", Field.class);
                object.getMethod("arrayBaseOffset", Class.class);
                object.getMethod("arrayIndexScale", Class.class);
                object.getMethod("getInt", Object.class, Long.TYPE);
                object.getMethod("putInt", Object.class, Long.TYPE, Integer.TYPE);
                object.getMethod("getLong", Object.class, Long.TYPE);
                object.getMethod("putLong", Object.class, Long.TYPE, Long.TYPE);
                object.getMethod("getObject", Object.class, Long.TYPE);
                object.getMethod("putObject", Object.class, Long.TYPE, Object.class);
                if (!zzza.zztk()) break block4;
                return true;
            }
            catch (Throwable throwable) {
                object = logger;
                Level level = Level.WARNING;
                String string2 = String.valueOf(throwable);
                StringBuilder stringBuilder = new StringBuilder(String.valueOf(string2).length() + 71);
                stringBuilder.append("platform method missing - proto runtime falling back to safer methods: ");
                stringBuilder.append(string2);
                object.logp(level, "com.google.protobuf.UnsafeUtil", "supportsUnsafeArrayOperations", stringBuilder.toString());
                return false;
            }
        }
        object.getMethod("getByte", Object.class, Long.TYPE);
        object.getMethod("putByte", Object.class, Long.TYPE, Byte.TYPE);
        object.getMethod("getBoolean", Object.class, Long.TYPE);
        object.getMethod("putBoolean", Object.class, Long.TYPE, Boolean.TYPE);
        object.getMethod("getFloat", Object.class, Long.TYPE);
        object.getMethod("putFloat", Object.class, Long.TYPE, Float.TYPE);
        object.getMethod("getDouble", Object.class, Long.TYPE);
        object.getMethod("putDouble", Object.class, Long.TYPE, Double.TYPE);
        return true;
    }

    private static boolean zzvi() {
        Object object;
        block6 : {
            block5 : {
                if (zzbvq == null) {
                    return false;
                }
                try {
                    object = zzbvq.getClass();
                    object.getMethod("objectFieldOffset", Field.class);
                    object.getMethod("getLong", Object.class, Long.TYPE);
                    if (zzabr.zzvj() != null) break block5;
                    return false;
                }
                catch (Throwable throwable) {
                    object = logger;
                    Level level = Level.WARNING;
                    String string2 = String.valueOf(throwable);
                    StringBuilder stringBuilder = new StringBuilder(String.valueOf(string2).length() + 71);
                    stringBuilder.append("platform method missing - proto runtime falling back to safer methods: ");
                    stringBuilder.append(string2);
                    object.logp(level, "com.google.protobuf.UnsafeUtil", "supportsUnsafeByteBufferOperations", stringBuilder.toString());
                    return false;
                }
            }
            if (!zzza.zztk()) break block6;
            return true;
        }
        object.getMethod("getByte", Long.TYPE);
        object.getMethod("putByte", Long.TYPE, Byte.TYPE);
        object.getMethod("getInt", Long.TYPE);
        object.getMethod("putInt", Long.TYPE, Integer.TYPE);
        object.getMethod("getLong", Long.TYPE);
        object.getMethod("putLong", Long.TYPE, Long.TYPE);
        object.getMethod("copyMemory", Long.TYPE, Long.TYPE, Long.TYPE);
        object.getMethod("copyMemory", Object.class, Long.TYPE, Object.class, Long.TYPE, Long.TYPE);
        return true;
    }

    private static Field zzvj() {
        Field field;
        if (zzza.zztk() && (field = zzabr.zza(Buffer.class, "effectiveDirectAddress")) != null) {
            return field;
        }
        field = zzabr.zza(Buffer.class, "address");
        if (field != null && field.getType() == Long.TYPE) {
            return field;
        }
        return null;
    }

    static final class zza
    extends zzd {
        zza(Unsafe unsafe) {
            super(unsafe);
        }
    }

    static final class zzb
    extends zzd {
        zzb(Unsafe unsafe) {
            super(unsafe);
        }
    }

    static final class zzc
    extends zzd {
        zzc(Unsafe unsafe) {
            super(unsafe);
        }
    }

    static abstract class zzd {
        Unsafe zzbxp;

        zzd(Unsafe unsafe) {
            this.zzbxp = unsafe;
        }
    }

}

