/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.content.Context
 */
package com.google.android.gms.internal.measurement;

import android.content.Context;
import com.google.android.gms.common.internal.Preconditions;
import com.google.android.gms.common.util.Clock;
import com.google.android.gms.internal.measurement.zzee;
import com.google.android.gms.internal.measurement.zzeh;
import com.google.android.gms.internal.measurement.zzer;
import com.google.android.gms.internal.measurement.zzfg;
import com.google.android.gms.internal.measurement.zzfi;
import com.google.android.gms.internal.measurement.zzfk;
import com.google.android.gms.internal.measurement.zzft;
import com.google.android.gms.internal.measurement.zzgk;
import com.google.android.gms.internal.measurement.zzgl;
import com.google.android.gms.internal.measurement.zzgm;
import com.google.android.gms.internal.measurement.zzgn;
import com.google.android.gms.internal.measurement.zzhj;
import com.google.android.gms.internal.measurement.zzkd;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Future;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.PriorityBlockingQueue;
import java.util.concurrent.Semaphore;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicLong;
import java.util.concurrent.atomic.AtomicReference;

public final class zzgi
extends zzhj {
    private static final AtomicLong zzanv = new AtomicLong(Long.MIN_VALUE);
    private ExecutorService executor;
    private zzgm zzanm;
    private zzgm zzann;
    private final PriorityBlockingQueue<zzgl<?>> zzano = new PriorityBlockingQueue();
    private final BlockingQueue<zzgl<?>> zzanp = new LinkedBlockingQueue();
    private final Thread.UncaughtExceptionHandler zzanq = new zzgk(this, "Thread death: Uncaught exception on worker thread");
    private final Thread.UncaughtExceptionHandler zzanr = new zzgk(this, "Thread death: Uncaught exception on network thread");
    private final Object zzans = new Object();
    private final Semaphore zzant = new Semaphore(2);
    private volatile boolean zzanu;

    zzgi(zzgn zzgn2) {
        super(zzgn2);
    }

    static /* synthetic */ zzgm zza(zzgi zzgi2, zzgm zzgm2) {
        zzgi2.zzanm = null;
        return null;
    }

    static /* synthetic */ Semaphore zza(zzgi zzgi2) {
        return zzgi2.zzant;
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    private final void zza(zzgl<?> zzgl2) {
        Object object = this.zzans;
        synchronized (object) {
            this.zzano.add(zzgl2);
            if (this.zzanm == null) {
                this.zzanm = new zzgm(this, "Measurement Worker", this.zzano);
                this.zzanm.setUncaughtExceptionHandler(this.zzanq);
                this.zzanm.start();
            } else {
                this.zzanm.zzjx();
            }
            return;
        }
    }

    static /* synthetic */ zzgm zzb(zzgi zzgi2, zzgm zzgm2) {
        zzgi2.zzann = null;
        return null;
    }

    static /* synthetic */ boolean zzb(zzgi zzgi2) {
        return zzgi2.zzanu;
    }

    static /* synthetic */ Object zzc(zzgi zzgi2) {
        return zzgi2.zzans;
    }

    static /* synthetic */ zzgm zzd(zzgi zzgi2) {
        return zzgi2.zzanm;
    }

    static /* synthetic */ zzgm zze(zzgi zzgi2) {
        return zzgi2.zzann;
    }

    static /* synthetic */ AtomicLong zzjw() {
        return zzanv;
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Converted monitor instructions to comments
     * Lifted jumps to return sites
     */
    final <T> T zza(AtomicReference<T> object, long l, String string2, Runnable runnable) {
        // MONITORENTER : object
        this.zzgh().zzc(runnable);
        try {
            object.wait(15000L);
            // MONITOREXIT : object
            runnable = object.get();
            if (runnable != null) return (T)runnable;
            zzfk zzfk2 = this.zzgi().zziy();
            object = String.valueOf(string2);
            object = object.length() != 0 ? "Timed out waiting for ".concat((String)object) : new String("Timed out waiting for ");
            zzfk2.log((String)object);
        }
        catch (InterruptedException interruptedException) {}
        return (T)runnable;
        zzfk zzfk3 = this.zzgi().zziy();
        string2 = String.valueOf(string2);
        string2 = string2.length() != 0 ? "Interrupted waiting for ".concat(string2) : new String("Interrupted waiting for ");
        zzfk3.log(string2);
        // MONITOREXIT : object
        return null;
    }

    @Override
    public final void zzab() {
        if (Thread.currentThread() != this.zzanm) {
            throw new IllegalStateException("Call expected from worker thread");
        }
    }

    public final <V> Future<V> zzb(Callable<V> object) throws IllegalStateException {
        this.zzch();
        Preconditions.checkNotNull(object);
        object = new zzgl(this, object, false, "Task exception on worker thread");
        if (Thread.currentThread() == this.zzanm) {
            if (!this.zzano.isEmpty()) {
                this.zzgi().zziy().log("Callable skipped the worker queue.");
            }
            object.run();
            return object;
        }
        this.zza((zzgl<?>)object);
        return object;
    }

    public final <V> Future<V> zzc(Callable<V> object) throws IllegalStateException {
        this.zzch();
        Preconditions.checkNotNull(object);
        object = new zzgl(this, object, true, "Task exception on worker thread");
        if (Thread.currentThread() == this.zzanm) {
            object.run();
            return object;
        }
        this.zza((zzgl<?>)object);
        return object;
    }

    public final void zzc(Runnable runnable) throws IllegalStateException {
        this.zzch();
        Preconditions.checkNotNull(runnable);
        this.zza(new zzgl(this, runnable, false, "Task exception on worker thread"));
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public final void zzd(Runnable object) throws IllegalStateException {
        this.zzch();
        Preconditions.checkNotNull(object);
        zzgl zzgl2 = new zzgl(this, (Runnable)object, false, "Task exception on network thread");
        object = this.zzans;
        synchronized (object) {
            this.zzanp.add(zzgl2);
            if (this.zzann == null) {
                this.zzann = new zzgm(this, "Measurement Network", this.zzanp);
                this.zzann.setUncaughtExceptionHandler(this.zzanr);
                this.zzann.start();
            } else {
                this.zzann.zzjx();
            }
            return;
        }
    }

    @Override
    public final void zzfw() {
        if (Thread.currentThread() != this.zzann) {
            throw new IllegalStateException("Call expected from network thread");
        }
    }

    @Override
    protected final boolean zzgn() {
        return false;
    }

    public final boolean zzju() {
        if (Thread.currentThread() == this.zzanm) {
            return true;
        }
        return false;
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    final ExecutorService zzjv() {
        Object object = this.zzans;
        synchronized (object) {
            if (this.executor != null) return this.executor;
            this.executor = new ThreadPoolExecutor(0, 1, 30L, TimeUnit.SECONDS, new ArrayBlockingQueue<Runnable>(100));
            return this.executor;
        }
    }
}

