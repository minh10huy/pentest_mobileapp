/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  javax.annotation.concurrent.GuardedBy
 */
package com.google.android.gms.tasks;

import android.support.annotation.NonNull;
import com.google.android.gms.common.internal.Preconditions;
import com.google.android.gms.tasks.Continuation;
import com.google.android.gms.tasks.OnCanceledListener;
import com.google.android.gms.tasks.OnFailureListener;
import com.google.android.gms.tasks.OnSuccessListener;
import com.google.android.gms.tasks.Task;
import com.google.android.gms.tasks.TaskExecutors;
import com.google.android.gms.tasks.zzu;
import com.google.android.gms.tasks.zzv;
import com.google.android.gms.tasks.zzw;
import com.google.android.gms.tasks.zzx;
import java.util.Arrays;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;
import java.util.concurrent.Callable;
import java.util.concurrent.CancellationException;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Executor;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;
import javax.annotation.concurrent.GuardedBy;

public final class Tasks {
    private Tasks() {
    }

    public static <TResult> TResult await(@NonNull Task<TResult> task) throws ExecutionException, InterruptedException {
        Preconditions.checkNotMainThread();
        Preconditions.checkNotNull(task, "Task must not be null");
        if (task.isComplete()) {
            return Tasks.zzb(task);
        }
        zza zza2 = new zza(null);
        Tasks.zza(task, zza2);
        zza2.await();
        return Tasks.zzb(task);
    }

    public static <TResult> TResult await(@NonNull Task<TResult> task, long l, @NonNull TimeUnit timeUnit) throws ExecutionException, InterruptedException, TimeoutException {
        Preconditions.checkNotMainThread();
        Preconditions.checkNotNull(task, "Task must not be null");
        Preconditions.checkNotNull(timeUnit, "TimeUnit must not be null");
        if (task.isComplete()) {
            return Tasks.zzb(task);
        }
        zza zza2 = new zza(null);
        Tasks.zza(task, zza2);
        if (!zza2.await(l, timeUnit)) {
            throw new TimeoutException("Timed out waiting for Task");
        }
        return Tasks.zzb(task);
    }

    public static <TResult> Task<TResult> call(@NonNull Callable<TResult> callable) {
        return Tasks.call(TaskExecutors.MAIN_THREAD, callable);
    }

    public static <TResult> Task<TResult> call(@NonNull Executor executor, @NonNull Callable<TResult> callable) {
        Preconditions.checkNotNull(executor, "Executor must not be null");
        Preconditions.checkNotNull(callable, "Callback must not be null");
        zzu zzu2 = new zzu();
        executor.execute(new zzv(zzu2, callable));
        return zzu2;
    }

    public static <TResult> Task<TResult> forCanceled() {
        zzu zzu2 = new zzu();
        zzu2.zzdp();
        return zzu2;
    }

    public static <TResult> Task<TResult> forException(@NonNull Exception exception) {
        zzu zzu2 = new zzu();
        zzu2.setException(exception);
        return zzu2;
    }

    public static <TResult> Task<TResult> forResult(TResult TResult) {
        zzu<TResult> zzu2 = new zzu<TResult>();
        zzu2.setResult(TResult);
        return zzu2;
    }

    public static Task<Void> whenAll(Collection<? extends Task<?>> object) {
        if (object.isEmpty()) {
            return Tasks.forResult(null);
        }
        Object object2 = object.iterator();
        while (object2.hasNext()) {
            if (object2.next() != null) continue;
            throw new NullPointerException("null tasks are not accepted");
        }
        object2 = new zzu();
        zzc zzc2 = new zzc(object.size(), (zzu<Void>)object2);
        object = object.iterator();
        while (object.hasNext()) {
            Tasks.zza((Task)object.next(), zzc2);
        }
        return object2;
    }

    public static /* varargs */ Task<Void> whenAll(Task<?> ... arrtask) {
        if (arrtask.length == 0) {
            return Tasks.forResult(null);
        }
        return Tasks.whenAll(Arrays.asList(arrtask));
    }

    public static Task<List<Task<?>>> whenAllComplete(Collection<? extends Task<?>> collection) {
        return Tasks.whenAll(collection).continueWithTask(new zzx(collection));
    }

    public static /* varargs */ Task<List<Task<?>>> whenAllComplete(Task<?> ... arrtask) {
        return Tasks.whenAllComplete(Arrays.asList(arrtask));
    }

    public static <TResult> Task<List<TResult>> whenAllSuccess(Collection<? extends Task<?>> collection) {
        return Tasks.whenAll(collection).continueWith(new zzw(collection));
    }

    public static /* varargs */ <TResult> Task<List<TResult>> whenAllSuccess(Task<?> ... arrtask) {
        return Tasks.whenAllSuccess(Arrays.asList(arrtask));
    }

    private static void zza(Task<?> task, zzb zzb2) {
        task.addOnSuccessListener(TaskExecutors.zzagd, zzb2);
        task.addOnFailureListener(TaskExecutors.zzagd, (OnFailureListener)zzb2);
        task.addOnCanceledListener(TaskExecutors.zzagd, (OnCanceledListener)zzb2);
    }

    private static <TResult> TResult zzb(Task<TResult> task) throws ExecutionException {
        if (task.isSuccessful()) {
            return task.getResult();
        }
        if (task.isCanceled()) {
            throw new CancellationException("Task is already canceled");
        }
        throw new ExecutionException(task.getException());
    }

    private static final class zza
    implements zzb {
        private final CountDownLatch zzfd = new CountDownLatch(1);

        private zza() {
        }

        /* synthetic */ zza(zzv zzv2) {
            this();
        }

        public final void await() throws InterruptedException {
            this.zzfd.await();
        }

        public final boolean await(long l, TimeUnit timeUnit) throws InterruptedException {
            return this.zzfd.await(l, timeUnit);
        }

        @Override
        public final void onCanceled() {
            this.zzfd.countDown();
        }

        @Override
        public final void onFailure(@NonNull Exception exception) {
            this.zzfd.countDown();
        }

        @Override
        public final void onSuccess(Object object) {
            this.zzfd.countDown();
        }
    }

    static interface zzb
    extends OnCanceledListener,
    OnFailureListener,
    OnSuccessListener<Object> {
    }

    private static final class zzc
    implements zzb {
        private final Object mLock = new Object();
        private final zzu<Void> zzafh;
        @GuardedBy(value="mLock")
        private Exception zzagh;
        private final int zzagl;
        @GuardedBy(value="mLock")
        private int zzagm;
        @GuardedBy(value="mLock")
        private int zzagn;
        @GuardedBy(value="mLock")
        private int zzago;
        @GuardedBy(value="mLock")
        private boolean zzagp;

        public zzc(int n, zzu<Void> zzu2) {
            this.zzagl = n;
            this.zzafh = zzu2;
        }

        @GuardedBy(value="mLock")
        private final void zzdu() {
            if (this.zzagm + this.zzagn + this.zzago == this.zzagl) {
                if (this.zzagh != null) {
                    zzu<Void> zzu2 = this.zzafh;
                    int n = this.zzagn;
                    int n2 = this.zzagl;
                    StringBuilder stringBuilder = new StringBuilder(54);
                    stringBuilder.append(n);
                    stringBuilder.append(" out of ");
                    stringBuilder.append(n2);
                    stringBuilder.append(" underlying tasks failed");
                    zzu2.setException(new ExecutionException(stringBuilder.toString(), this.zzagh));
                    return;
                }
                if (this.zzagp) {
                    this.zzafh.zzdp();
                    return;
                }
                this.zzafh.setResult(null);
            }
        }

        /*
         * Enabled aggressive block sorting
         * Enabled unnecessary exception pruning
         * Enabled aggressive exception aggregation
         */
        @Override
        public final void onCanceled() {
            Object object = this.mLock;
            synchronized (object) {
                ++this.zzago;
                this.zzagp = true;
                this.zzdu();
                return;
            }
        }

        /*
         * Enabled aggressive block sorting
         * Enabled unnecessary exception pruning
         * Enabled aggressive exception aggregation
         */
        @Override
        public final void onFailure(@NonNull Exception exception) {
            Object object = this.mLock;
            synchronized (object) {
                ++this.zzagn;
                this.zzagh = exception;
                this.zzdu();
                return;
            }
        }

        /*
         * Enabled aggressive block sorting
         * Enabled unnecessary exception pruning
         * Enabled aggressive exception aggregation
         */
        @Override
        public final void onSuccess(Object object) {
            object = this.mLock;
            synchronized (object) {
                ++this.zzagm;
                this.zzdu();
                return;
            }
        }
    }

}

