/*
 * Decompiled with CFR 0_132.
 */
package com.google.android.gms.internal.measurement;

import com.google.android.gms.internal.measurement.zzacc;
import com.google.android.gms.internal.measurement.zzacj;
import java.io.IOException;
import java.nio.Buffer;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.ReadOnlyBufferException;

public final class zzacb {
    private final ByteBuffer zzbzc;

    private zzacb(ByteBuffer byteBuffer) {
        this.zzbzc = byteBuffer;
        this.zzbzc.order(ByteOrder.LITTLE_ENDIAN);
    }

    private zzacb(byte[] arrby, int n, int n2) {
        this(ByteBuffer.wrap(arrby, n, n2));
    }

    private static int zza(CharSequence charSequence) {
        int n;
        int n2;
        block9 : {
            int n3;
            n = charSequence.length();
            int n4 = 0;
            for (n3 = 0; n3 < n && charSequence.charAt(n3) < '?'; ++n3) {
            }
            int n5 = n;
            do {
                n2 = n5;
                if (n3 >= n) break block9;
                n2 = charSequence.charAt(n3);
                if (n2 >= 2048) break;
                n5 += 127 - n2 >>> 31;
                ++n3;
            } while (true);
            int n6 = charSequence.length();
            n2 = n4;
            while (n3 < n6) {
                char c = charSequence.charAt(n3);
                if (c < '\u0800') {
                    n2 += 127 - c >>> 31;
                    n4 = n3;
                } else {
                    int n7;
                    n2 = n7 = n2 + 2;
                    n4 = n3;
                    if ('\ud800' <= c) {
                        n2 = n7;
                        n4 = n3;
                        if (c <= '\udfff') {
                            if (Character.codePointAt(charSequence, n3) < 65536) {
                                charSequence = new StringBuilder(39);
                                charSequence.append("Unpaired surrogate at index ");
                                charSequence.append(n3);
                                throw new IllegalArgumentException(charSequence.toString());
                            }
                            n4 = n3 + 1;
                            n2 = n7;
                        }
                    }
                }
                n3 = n4 + 1;
            }
            n2 = n5 + n2;
        }
        if (n2 < n) {
            long l = n2;
            charSequence = new StringBuilder(54);
            charSequence.append("UTF-8 length does not fit in int: ");
            charSequence.append(l + 0x100000000L);
            throw new IllegalArgumentException(charSequence.toString());
        }
        return n2;
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive exception aggregation
     */
    private static void zza(CharSequence var0, ByteBuffer var1_2) {
        block26 : {
            block28 : {
                block23 : {
                    block22 : {
                        block25 : {
                            block24 : {
                                if (var1_2.isReadOnly()) {
                                    throw new ReadOnlyBufferException();
                                }
                                var10_3 = var1_2.hasArray();
                                var5_4 = 0;
                                var4_5 = 0;
                                if (!var10_3) break block25;
                                var11_6 = var1_2.array();
                                var5_4 = var1_2.arrayOffset() + var1_2.position();
                                var6_7 = var1_2.remaining();
                                var7_9 = var0.length();
                                var8_10 = var6_7 + var5_4;
                                do {
                                    if (var4_5 >= var7_9 || (var6_7 = var4_5 + var5_4) >= var8_10) break block22;
                                    var9_11 = var0.charAt(var4_5);
                                    if (var9_11 >= 128) break block22;
                                    var11_6[var6_7] = (byte)var9_11;
                                    ++var4_5;
                                } while (true);
lbl21: // 2 sources:
                                var6_7 = var5_4;
                                if (var4_5 >= var7_9) ** GOTO lbl61
                                var2_12 = var0.charAt(var4_5);
                                if (var2_12 >= '?' || var5_4 >= var8_10) break block23;
                                var6_7 = var5_4 + 1;
                                var11_6[var5_4] = (byte)var2_12;
                                var5_4 = var6_7;
                                break block26;
lbl30: // 1 sources:
                                if (var5_4 > var8_10 - 4) ** GOTO lbl55
                                var6_7 = var4_5 + 1;
                                if (var6_7 == var0.length()) break block24;
                                var3_14 = var0.charAt(var6_7);
                                if (!Character.isSurrogatePair(var2_12, var3_14)) ** break block27
                                var4_5 = Character.toCodePoint(var2_12, var3_14);
                                var9_11 = var5_4 + 1;
                                var11_6[var5_4] = (byte)(var4_5 >>> 18 | 240);
                                var5_4 = var9_11 + 1;
                                var11_6[var9_11] = (byte)(var4_5 >>> 12 & 63 | 128);
                                var9_11 = var5_4 + 1;
                                var11_6[var5_4] = (byte)(var4_5 >>> 6 & 63 | 128);
                                var5_4 = var9_11 + 1;
                                var11_6[var9_11] = (byte)(var4_5 & 63 | 128);
                                var4_5 = var6_7;
                                break block26;
                                {
                                    
                                    var4_5 = var6_7;
                                }
                            }
                            try {
                                var0 = new StringBuilder(39);
                                var0.append("Unpaired surrogate at index ");
                                var0.append(var4_5 - 1);
                                throw new IllegalArgumentException(var0.toString());
lbl55: // 1 sources:
                                var0 = new StringBuilder(37);
                                var0.append("Failed writing ");
                                var0.append(var2_12);
                                var0.append(" at index ");
                                var0.append(var5_4);
                                throw new ArrayIndexOutOfBoundsException(var0.toString());
lbl61: // 2 sources:
                                do {
                                    var1_2.position(var6_7 - var1_2.arrayOffset());
                                    return;
                                    break;
                                } while (true);
                            }
                            catch (ArrayIndexOutOfBoundsException var0_1) {
                                var1_2 = new BufferOverflowException();
                                var1_2.initCause(var0_1);
                                throw var1_2;
                            }
                        }
                        var6_8 = var0.length();
                        block11 : for (var4_5 = var5_4; var4_5 < var6_8; ++var4_5) {
                            var2_13 = var0.charAt(var4_5);
                            if (var2_13 < '?') {
                                var5_4 = var2_13;
lbl74: // 2 sources:
                                do {
                                    var1_2.put((byte)var5_4);
                                    continue block11;
                                    break;
                                } while (true);
                            }
                            if (var2_13 < '\u0800') {
                                var5_4 = var2_13 >>> 6 | 960;
lbl79: // 2 sources:
                                do {
                                    var1_2.put((byte)var5_4);
                                    var5_4 = var2_13 & 63 | 128;
                                    ** continue;
                                    break;
                                } while (true);
                            }
                            if (var2_13 >= '\ud800' && '\udfff' >= var2_13) {
                                var5_4 = var4_5 + 1;
                                if (var5_4 != var0.length()) {
                                    var3_15 = var0.charAt(var5_4);
                                    if (!Character.isSurrogatePair(var2_13, var3_15)) {
                                        var4_5 = var5_4;
                                    } else {
                                        var4_5 = Character.toCodePoint(var2_13, var3_15);
                                        var1_2.put((byte)(var4_5 >>> 18 | 240));
                                        var1_2.put((byte)(var4_5 >>> 12 & 63 | 128));
                                        var1_2.put((byte)(var4_5 >>> 6 & 63 | 128));
                                        var1_2.put((byte)(var4_5 & 63 | 128));
                                        var4_5 = var5_4;
                                        continue;
                                    }
                                }
                                var0 = new StringBuilder(39);
                                var0.append("Unpaired surrogate at index ");
                                var0.append(var4_5 - 1);
                                throw new IllegalArgumentException(var0.toString());
                            }
                            var1_2.put((byte)(var2_13 >>> 12 | 480));
                            var5_4 = var2_13 >>> 6 & 63 | 128;
                            ** continue;
                        }
                        return;
                    }
                    if (var4_5 == var7_9) {
                        var6_7 = var5_4 + var7_9;
                        ** continue;
                    }
                    var5_4 += var4_5;
                    ** GOTO lbl21
                }
                if (var2_12 >= '\u0800' || var5_4 > var8_10 - 2) break block28;
                var6_7 = var5_4 + 1;
                var11_6[var5_4] = (byte)(var2_12 >>> 6 | 960);
                var5_4 = var6_7 + 1;
                var11_6[var6_7] = (byte)(var2_12 & 63 | 128);
                break block26;
            }
            if (var2_12 >= '\ud800' && '\udfff' >= var2_12 || var5_4 > var8_10 - 3) ** GOTO lbl30
            var6_7 = var5_4 + 1;
            var11_6[var5_4] = (byte)(var2_12 >>> 12 | 480);
            var9_11 = var6_7 + 1;
            var11_6[var6_7] = (byte)(var2_12 >>> 6 & 63 | 128);
            var5_4 = var9_11 + 1;
            var11_6[var9_11] = (byte)(var2_12 & 63 | 128);
        }
        ++var4_5;
        ** GOTO lbl21
    }

    public static int zzao(int n) {
        if (n >= 0) {
            return zzacb.zzas(n);
        }
        return 10;
    }

    private final void zzap(int n) throws IOException {
        byte by = (byte)n;
        if (!this.zzbzc.hasRemaining()) {
            throw new zzacc(this.zzbzc.position(), this.zzbzc.limit());
        }
        this.zzbzc.put(by);
    }

    public static int zzaq(int n) {
        return zzacb.zzas(n << 3);
    }

    public static int zzas(int n) {
        if ((n & -128) == 0) {
            return 1;
        }
        if ((n & -16384) == 0) {
            return 2;
        }
        if ((-2097152 & n) == 0) {
            return 3;
        }
        if ((n & -268435456) == 0) {
            return 4;
        }
        return 5;
    }

    private final void zzas(long l) throws IOException {
        do {
            if ((l & -128L) == 0L) {
                this.zzap((int)l);
                return;
            }
            this.zzap((int)l & 127 | 128);
            l >>>= 7;
        } while (true);
    }

    public static int zzat(long l) {
        if ((l & -128L) == 0L) {
            return 1;
        }
        if ((l & -16384L) == 0L) {
            return 2;
        }
        if ((l & -2097152L) == 0L) {
            return 3;
        }
        if ((l & -268435456L) == 0L) {
            return 4;
        }
        if ((l & -34359738368L) == 0L) {
            return 5;
        }
        if ((l & -4398046511104L) == 0L) {
            return 6;
        }
        if ((l & -562949953421312L) == 0L) {
            return 7;
        }
        if ((l & -72057594037927936L) == 0L) {
            return 8;
        }
        if ((l & Long.MIN_VALUE) == 0L) {
            return 9;
        }
        return 10;
    }

    public static int zzb(int n, zzacj zzacj2) {
        n = zzacb.zzaq(n);
        int n2 = zzacj2.zzwb();
        return n + (zzacb.zzas(n2) + n2);
    }

    public static zzacb zzb(byte[] arrby, int n, int n2) {
        return new zzacb(arrby, 0, n2);
    }

    public static int zzc(int n, long l) {
        return zzacb.zzaq(n) + zzacb.zzat(l);
    }

    public static int zzc(int n, String string2) {
        return zzacb.zzaq(n) + zzacb.zzfr(string2);
    }

    public static int zzf(int n, int n2) {
        return zzacb.zzaq(n) + zzacb.zzao(n2);
    }

    public static int zzfr(String string2) {
        int n = zzacb.zza(string2);
        return zzacb.zzas(n) + n;
    }

    public static zzacb zzj(byte[] arrby) {
        return zzacb.zzb(arrby, 0, arrby.length);
    }

    public final void zza(int n, double d) throws IOException {
        this.zzg(n, 1);
        long l = Double.doubleToLongBits(d);
        if (this.zzbzc.remaining() < 8) {
            throw new zzacc(this.zzbzc.position(), this.zzbzc.limit());
        }
        this.zzbzc.putLong(l);
    }

    public final void zza(int n, float f) throws IOException {
        this.zzg(n, 5);
        n = Float.floatToIntBits(f);
        if (this.zzbzc.remaining() < 4) {
            throw new zzacc(this.zzbzc.position(), this.zzbzc.limit());
        }
        this.zzbzc.putInt(n);
    }

    public final void zza(int n, long l) throws IOException {
        this.zzg(n, 0);
        this.zzas(l);
    }

    public final void zza(int n, zzacj zzacj2) throws IOException {
        this.zzg(n, 2);
        this.zzb(zzacj2);
    }

    public final void zza(int n, boolean bl) throws IOException {
        this.zzg(n, 0);
        byte by = (byte)(bl ? 1 : 0);
        if (!this.zzbzc.hasRemaining()) {
            throw new zzacc(this.zzbzc.position(), this.zzbzc.limit());
        }
        this.zzbzc.put(by);
    }

    public final void zzar(int n) throws IOException {
        do {
            if ((n & -128) == 0) {
                this.zzap(n);
                return;
            }
            this.zzap(n & 127 | 128);
            n >>>= 7;
        } while (true);
    }

    public final void zzb(int n, long l) throws IOException {
        this.zzg(n, 0);
        this.zzas(l);
    }

    public final void zzb(int n, String string2) throws IOException {
        this.zzg(n, 2);
        try {
            n = zzacb.zzas(string2.length());
            if (n == zzacb.zzas(string2.length() * 3)) {
                int n2 = this.zzbzc.position();
                if (this.zzbzc.remaining() < n) {
                    throw new zzacc(n2 + n, this.zzbzc.limit());
                }
                this.zzbzc.position(n2 + n);
                zzacb.zza(string2, this.zzbzc);
                int n3 = this.zzbzc.position();
                this.zzbzc.position(n2);
                this.zzar(n3 - n2 - n);
                this.zzbzc.position(n3);
                return;
            }
            this.zzar(zzacb.zza(string2));
            zzacb.zza(string2, this.zzbzc);
            return;
        }
        catch (BufferOverflowException bufferOverflowException) {
            zzacc zzacc2 = new zzacc(this.zzbzc.position(), this.zzbzc.limit());
            zzacc2.initCause(bufferOverflowException);
            throw zzacc2;
        }
    }

    public final void zzb(zzacj zzacj2) throws IOException {
        this.zzar(zzacj2.zzwa());
        zzacj2.zza(this);
    }

    public final void zze(int n, int n2) throws IOException {
        this.zzg(n, 0);
        if (n2 >= 0) {
            this.zzar(n2);
            return;
        }
        this.zzas(n2);
    }

    public final void zzg(int n, int n2) throws IOException {
        this.zzar(n << 3 | n2);
    }

    public final void zzk(byte[] arrby) throws IOException {
        int n = arrby.length;
        if (this.zzbzc.remaining() >= n) {
            this.zzbzc.put(arrby, 0, n);
            return;
        }
        throw new zzacc(this.zzbzc.position(), this.zzbzc.limit());
    }

    public final void zzvt() {
        if (this.zzbzc.remaining() != 0) {
            throw new IllegalStateException(String.format("Did not write as much data as expected, %s bytes remaining.", this.zzbzc.remaining()));
        }
    }
}

