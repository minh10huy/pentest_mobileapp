/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.os.Bundle
 */
package com.google.android.gms.common.data;

import android.os.Bundle;
import com.google.android.gms.common.data.AbstractDataBuffer;
import com.google.android.gms.common.data.DataBufferObserver;
import com.google.android.gms.common.data.DataBufferObserverSet;
import com.google.android.gms.common.data.DataHolder;
import com.google.android.gms.common.data.ObjectExclusionFilterable;
import com.google.android.gms.common.internal.Asserts;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.HashSet;
import java.util.Iterator;

public final class ObjectDataBuffer<T>
extends AbstractDataBuffer<T>
implements DataBufferObserver.Observable,
ObjectExclusionFilterable<T> {
    private final ArrayList<Integer> zzob = new ArrayList();
    private final HashSet<Integer> zzoe = new HashSet();
    private DataBufferObserverSet zzof;
    private final ArrayList<T> zzog;

    public ObjectDataBuffer() {
        super(null);
        this.zzog = new ArrayList();
        this.zzof = new DataBufferObserverSet();
        this.zzcl();
    }

    public ObjectDataBuffer(ArrayList<T> arrayList) {
        super(null);
        this.zzog = arrayList;
        this.zzof = new DataBufferObserverSet();
        this.zzcl();
    }

    public /* varargs */ ObjectDataBuffer(T ... arrT) {
        super(null);
        this.zzog = new ArrayList<T>(Arrays.asList(arrT));
        this.zzof = new DataBufferObserverSet();
        this.zzcl();
    }

    private final void zzcl() {
        this.zzob.clear();
        int n = this.zzog.size();
        for (int i = 0; i < n; ++i) {
            if (this.zzoe.contains(i)) continue;
            this.zzob.add(i);
        }
    }

    public final void add(T object) {
        int n = this.zzog.size();
        this.zzog.add(object);
        this.zzcl();
        if (this.zzof.hasObservers()) {
            Asserts.checkState(this.zzoe.contains(n) ^ true);
            int n2 = this.zzob.size();
            boolean bl = false;
            boolean bl2 = n2 > 0;
            Asserts.checkState(bl2);
            object = this.zzob;
            bl2 = bl;
            if ((Integer)object.get(--n2) == n) {
                bl2 = true;
            }
            Asserts.checkState(bl2);
            this.zzof.onDataRangeInserted(n2, 1);
        }
    }

    @Override
    public final void addObserver(DataBufferObserver dataBufferObserver) {
        this.zzof.addObserver(dataBufferObserver);
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Lifted jumps to return sites
     */
    @Override
    public final void filterOut(T var1_1) {
        var11_2 = this.zzog.size();
        var7_3 = 0;
        var10_4 = false;
        var9_5 = -1;
        var8_6 = -1;
        var4_7 = -1;
        do {
            block5 : {
                block6 : {
                    if (var7_3 >= var11_2) {
                        if (var8_6 < 0) return;
                        this.zzof.onDataRangeRemoved(var8_6, var4_7);
                        return;
                    }
                    var2_8 = var10_4;
                    var5_10 = var9_5++;
                    var6_11 = var8_6;
                    var3_9 = var4_7;
                    if (this.zzoe.contains(var7_3)) break block5;
                    if (!var1_1.equals(this.zzog.get(var7_3))) break block6;
                    this.zzoe.add(var7_3);
                    var3_9 = var4_7;
                    if (!this.zzof.hasObservers()) ** GOTO lbl28
                    if (var8_6 < 0) {
                        var6_11 = var9_5;
                        var2_8 = true;
                        var3_9 = 1;
                        var5_10 = var9_5;
                    } else {
                        var3_9 = var4_7 + 1;
lbl28: // 2 sources:
                        var2_8 = true;
                        var5_10 = var9_5;
                        var6_11 = var8_6;
                    }
                    break block5;
                }
                var2_8 = var10_4;
                var5_10 = var9_5;
                var6_11 = var8_6;
                var3_9 = var4_7;
                if (var8_6 >= 0) {
                    this.zzcl();
                    this.zzof.onDataRangeRemoved(var8_6, var4_7);
                    var5_10 = var9_5 - var4_7;
                    var2_8 = false;
                    var6_11 = -1;
                    var3_9 = -1;
                }
            }
            ++var7_3;
            var10_4 = var2_8;
            var9_5 = var5_10;
            var8_6 = var6_11;
            var4_7 = var3_9;
        } while (true);
    }

    public final void filterOutRaw(int n) {
        int n2;
        boolean bl = this.zzoe.add(n);
        if (this.zzof.hasObservers() && bl) {
            int n3 = this.zzob.size();
            for (n2 = 0; n2 < n3; ++n2) {
                if (this.zzob.get(n2) != n) {
                    continue;
                }
                break;
            }
        } else {
            n2 = -1;
        }
        this.zzcl();
        if (n2 >= 0) {
            this.zzof.onDataRangeRemoved(n2, 1);
        }
    }

    @Override
    public final T get(int n) {
        return this.zzog.get(this.getRawPosition(n));
    }

    @Override
    public final int getCount() {
        return this.zzog.size() - this.zzoe.size();
    }

    @Override
    public final Bundle getMetadata() {
        return null;
    }

    public final int getPositionFromRawPosition(int n) {
        int n2 = -1;
        for (int i = 0; i <= n; ++i) {
            int n3 = n2;
            if (!this.zzoe.contains(i)) {
                n3 = n2 + 1;
            }
            n2 = n3;
        }
        return n2;
    }

    public final T getRaw(int n) {
        return this.zzog.get(n);
    }

    public final int getRawCount() {
        return this.zzog.size();
    }

    public final int getRawPosition(int n) {
        if (n >= 0 && n < this.getCount()) {
            return this.zzob.get(n);
        }
        StringBuilder stringBuilder = new StringBuilder(53);
        stringBuilder.append("Position ");
        stringBuilder.append(n);
        stringBuilder.append(" is out of bounds for this buffer");
        throw new IllegalArgumentException(stringBuilder.toString());
    }

    public final void insertRaw(int n, T object) {
        this.zzog.add(n, object);
        object = new HashSet(this.zzoe.size());
        Object object2 = this.zzoe.iterator();
        int n2 = n;
        while (object2.hasNext()) {
            Integer n3 = object2.next();
            if (n3 < n) {
                --n2;
                continue;
            }
            object.add(n3 + 1);
            object2.remove();
        }
        object = object.iterator();
        while (object.hasNext()) {
            object2 = (Integer)object.next();
            this.zzoe.add((Integer)object2);
        }
        this.zzcl();
        if (this.zzof.hasObservers()) {
            this.zzof.onDataRangeInserted(n2, 1);
        }
    }

    public final boolean isRawPositionFiltered(int n) {
        return this.zzoe.contains(n);
    }

    public final void notifyChanged(T t) {
        if (!this.zzof.hasObservers()) {
            return;
        }
        int n = this.zzob.size();
        for (int i = 0; i < n; ++i) {
            if (!t.equals(this.zzog.get(this.zzob.get(i)))) continue;
            this.zzof.onDataRangeChanged(i, 1);
        }
    }

    @Override
    public final void release() {
        this.zzof.clear();
    }

    @Override
    public final void removeObserver(DataBufferObserver dataBufferObserver) {
        this.zzof.removeObserver(dataBufferObserver);
    }

    public final void removeRaw(int n) {
        this.zzog.remove(n);
        boolean bl = this.zzoe.remove(n);
        Object object = new HashSet(this.zzoe.size());
        Object object2 = this.zzoe.iterator();
        int n2 = n;
        while (object2.hasNext()) {
            Integer n3 = object2.next();
            if (n3 < n) {
                --n2;
                continue;
            }
            object2.remove();
            object.add(n3 - 1);
        }
        object = object.iterator();
        while (object.hasNext()) {
            object2 = (Integer)object.next();
            this.zzoe.add((Integer)object2);
        }
        this.zzcl();
        if (!bl && this.zzof.hasObservers()) {
            this.zzof.onDataRangeRemoved(n2, 1);
        }
    }

    public final boolean setRaw(int n, T t) {
        this.zzog.set(n, t);
        boolean bl = this.zzoe.contains(n) ^ true;
        if (bl && this.zzof.hasObservers()) {
            int n2 = this.zzob.size();
            for (int i = 0; i < n2; ++i) {
                if (this.zzob.get(i) != n) continue;
                this.zzof.onDataRangeChanged(i, 1);
                return bl;
            }
        }
        return bl;
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Lifted jumps to return sites
     */
    public final void unfilter(T var1_1) {
        var11_2 = this.zzog.size();
        var8_3 = 0;
        var10_4 = false;
        var2_5 = 0;
        var9_6 = -1;
        var5_7 = -1;
        do {
            block8 : {
                block9 : {
                    block10 : {
                        block7 : {
                            if (var8_3 >= var11_2) {
                                if (var9_6 < 0) return;
                                this.zzof.onDataRangeInserted(var9_6, var5_7);
                                return;
                            }
                            if (this.zzoe.contains(var8_3)) break block7;
                            var3_8 = var10_4;
                            var6_10 = ++var2_5;
                            var7_11 = var9_6;
                            var4_9 = var5_7;
                            if (var9_6 < 0) break block8;
                            break block9;
                        }
                        if (!var1_1.equals(this.zzog.get(var8_3))) break block10;
                        this.zzoe.remove(var8_3);
                        var4_9 = var5_7;
                        if (!this.zzof.hasObservers()) ** GOTO lbl31
                        if (var9_6 < 0) {
                            var7_11 = var2_5;
                            var3_8 = true;
                            var4_9 = 1;
                            var6_10 = var2_5;
                        } else {
                            var4_9 = var5_7 + 1;
lbl31: // 2 sources:
                            var3_8 = true;
                            var6_10 = var2_5;
                            var7_11 = var9_6;
                        }
                        break block8;
                    }
                    var3_8 = var10_4;
                    var6_10 = var2_5;
                    var7_11 = var9_6;
                    var4_9 = var5_7;
                    if (!this.zzof.hasObservers()) break block8;
                    var3_8 = var10_4;
                    var6_10 = var2_5;
                    var7_11 = var9_6;
                    var4_9 = var5_7;
                    if (var9_6 < 0) break block8;
                }
                this.zzcl();
                this.zzof.onDataRangeInserted(var9_6, var5_7);
                var6_10 = var2_5 + var5_7;
                var3_8 = false;
                var7_11 = -1;
                var4_9 = -1;
            }
            ++var8_3;
            var10_4 = var3_8;
            var2_5 = var6_10;
            var9_6 = var7_11;
            var5_7 = var4_9;
        } while (true);
    }

    public final void unfilterRaw(int n) {
        boolean bl = this.zzoe.remove(n);
        this.zzcl();
        if (this.zzof.hasObservers()) {
            int n2;
            if (!bl) {
                return;
            }
            int n3 = -1;
            int n4 = 0;
            int n5 = this.zzob.size();
            do {
                n2 = n3;
                if (n4 >= n5) break;
                if (this.zzob.get(n4) == n) {
                    n2 = n4;
                    break;
                }
                ++n4;
            } while (true);
            if (n2 >= 0) {
                this.zzof.onDataRangeInserted(n2, 1);
            }
        }
    }
}

