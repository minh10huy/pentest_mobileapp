/*
 * Decompiled with CFR 0_132.
 */
package com.google.android.gms.internal.measurement;

import android.support.annotation.NonNull;
import com.google.android.gms.common.internal.Preconditions;
import com.google.android.gms.internal.measurement.zzfi;
import com.google.android.gms.internal.measurement.zzfk;
import com.google.android.gms.internal.measurement.zzgi;
import com.google.android.gms.internal.measurement.zzgj;
import java.util.concurrent.Callable;
import java.util.concurrent.FutureTask;

final class zzgl<V>
extends FutureTask<V>
implements Comparable<zzgl> {
    private final String zzanw;
    private final /* synthetic */ zzgi zzanx;
    private final long zzany;
    final boolean zzanz;

    zzgl(zzgi zzgi2, Runnable runnable, boolean bl, String string2) {
        this.zzanx = zzgi2;
        super(runnable, null);
        Preconditions.checkNotNull(string2);
        this.zzany = zzgi.zzjw().getAndIncrement();
        this.zzanw = string2;
        this.zzanz = false;
        if (this.zzany == Long.MAX_VALUE) {
            zzgi2.zzgi().zziv().log("Tasks index overflow");
        }
    }

    zzgl(Callable<V> callable, boolean bl, String string2) {
        this.zzanx = var1_1;
        super(callable);
        Preconditions.checkNotNull(string2);
        this.zzany = zzgi.zzjw().getAndIncrement();
        this.zzanw = string2;
        this.zzanz = bl;
        if (this.zzany == Long.MAX_VALUE) {
            var1_1.zzgi().zziv().log("Tasks index overflow");
        }
    }

    @Override
    public final /* synthetic */ int compareTo(@NonNull Object object) {
        object = (zzgl)object;
        if (this.zzanz != object.zzanz) {
            if (this.zzanz) {
                return -1;
            }
            return 1;
        }
        if (this.zzany < object.zzany) {
            return -1;
        }
        if (this.zzany > object.zzany) {
            return 1;
        }
        this.zzanx.zzgi().zziw().zzg("Two tasks share the same index. index", this.zzany);
        return 0;
    }

    @Override
    protected final void setException(Throwable throwable) {
        this.zzanx.zzgi().zziv().zzg(this.zzanw, throwable);
        if (throwable instanceof zzgj) {
            Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), throwable);
        }
        super.setException(throwable);
    }
}

