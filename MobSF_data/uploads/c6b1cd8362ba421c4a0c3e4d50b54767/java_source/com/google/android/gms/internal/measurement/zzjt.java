/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.content.ContentResolver
 *  android.content.Context
 *  android.content.pm.ApplicationInfo
 *  android.content.pm.PackageInfo
 *  android.content.pm.PackageManager
 *  android.content.pm.PackageManager$NameNotFoundException
 *  android.database.sqlite.SQLiteDatabase
 *  android.database.sqlite.SQLiteException
 *  android.net.Uri
 *  android.net.Uri$Builder
 *  android.os.Build
 *  android.os.Build$VERSION
 *  android.os.Bundle
 *  android.provider.Settings
 *  android.provider.Settings$Secure
 *  android.text.TextUtils
 *  android.util.Pair
 */
package com.google.android.gms.internal.measurement;

import android.content.ContentResolver;
import android.content.Context;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteException;
import android.net.Uri;
import android.os.Build;
import android.os.Bundle;
import android.provider.Settings;
import android.support.annotation.NonNull;
import android.support.annotation.Size;
import android.support.annotation.WorkerThread;
import android.support.v4.util.ArrayMap;
import android.text.TextUtils;
import android.util.Pair;
import com.google.android.gms.common.internal.Preconditions;
import com.google.android.gms.common.util.Clock;
import com.google.android.gms.common.util.VisibleForTesting;
import com.google.android.gms.common.wrappers.Wrappers;
import com.google.android.gms.internal.measurement.zzacb;
import com.google.android.gms.internal.measurement.zzea;
import com.google.android.gms.internal.measurement.zzeb;
import com.google.android.gms.internal.measurement.zzed;
import com.google.android.gms.internal.measurement.zzee;
import com.google.android.gms.internal.measurement.zzef;
import com.google.android.gms.internal.measurement.zzeh;
import com.google.android.gms.internal.measurement.zzej;
import com.google.android.gms.internal.measurement.zzek;
import com.google.android.gms.internal.measurement.zzel;
import com.google.android.gms.internal.measurement.zzem;
import com.google.android.gms.internal.measurement.zzer;
import com.google.android.gms.internal.measurement.zzes;
import com.google.android.gms.internal.measurement.zzet;
import com.google.android.gms.internal.measurement.zzeu;
import com.google.android.gms.internal.measurement.zzex;
import com.google.android.gms.internal.measurement.zzez;
import com.google.android.gms.internal.measurement.zzfd;
import com.google.android.gms.internal.measurement.zzfg;
import com.google.android.gms.internal.measurement.zzfi;
import com.google.android.gms.internal.measurement.zzfk;
import com.google.android.gms.internal.measurement.zzfm;
import com.google.android.gms.internal.measurement.zzfo;
import com.google.android.gms.internal.measurement.zzfq;
import com.google.android.gms.internal.measurement.zzfr;
import com.google.android.gms.internal.measurement.zzft;
import com.google.android.gms.internal.measurement.zzfw;
import com.google.android.gms.internal.measurement.zzgh;
import com.google.android.gms.internal.measurement.zzgi;
import com.google.android.gms.internal.measurement.zzgn;
import com.google.android.gms.internal.measurement.zzhk;
import com.google.android.gms.internal.measurement.zzik;
import com.google.android.gms.internal.measurement.zzjp;
import com.google.android.gms.internal.measurement.zzjs;
import com.google.android.gms.internal.measurement.zzju;
import com.google.android.gms.internal.measurement.zzjv;
import com.google.android.gms.internal.measurement.zzjw;
import com.google.android.gms.internal.measurement.zzjx;
import com.google.android.gms.internal.measurement.zzjy;
import com.google.android.gms.internal.measurement.zzjz;
import com.google.android.gms.internal.measurement.zzka;
import com.google.android.gms.internal.measurement.zzkc;
import com.google.android.gms.internal.measurement.zzkd;
import com.google.android.gms.internal.measurement.zzkn;
import com.google.android.gms.internal.measurement.zzkp;
import com.google.android.gms.internal.measurement.zzkr;
import com.google.android.gms.internal.measurement.zzks;
import com.google.android.gms.internal.measurement.zzkt;
import com.google.android.gms.internal.measurement.zzku;
import com.google.android.gms.internal.measurement.zzkx;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.net.MalformedURLException;
import java.net.URL;
import java.nio.Buffer;
import java.nio.ByteBuffer;
import java.nio.channels.FileChannel;
import java.nio.channels.FileLock;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;

public class zzjt
implements zzhk {
    private static volatile zzjt zzarr;
    private final zzgn zzacv;
    private zzgh zzars;
    private zzfm zzart;
    private zzek zzaru;
    private zzfr zzarv;
    private zzjp zzarw;
    private zzed zzarx;
    private final zzjz zzary;
    private boolean zzarz;
    @VisibleForTesting
    private long zzasa;
    private List<Runnable> zzasb;
    private int zzasc;
    private int zzasd;
    private boolean zzase;
    private boolean zzasf;
    private boolean zzasg;
    private FileLock zzash;
    private FileChannel zzasi;
    private List<Long> zzasj;
    private List<Long> zzask;
    private long zzasl;
    private boolean zzvn = false;

    private zzjt(zzjy zzjy2) {
        this(zzjy2, null);
    }

    private zzjt(zzjy zzjy2, zzgn zzhk2) {
        Preconditions.checkNotNull(zzjy2);
        this.zzacv = zzgn.zza(zzjy2.zzqx, null, null);
        this.zzasl = -1L;
        zzhk2 = new zzjz(this);
        zzhk2.zzm();
        this.zzary = zzhk2;
        zzhk2 = new zzfm(this);
        zzhk2.zzm();
        this.zzart = zzhk2;
        zzhk2 = new zzgh(this);
        zzhk2.zzm();
        this.zzars = zzhk2;
        this.zzacv.zzgh().zzc(new zzju(this, zzjy2));
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    @WorkerThread
    @VisibleForTesting
    private final int zza(FileChannel fileChannel) {
        this.zzab();
        if (fileChannel != null && fileChannel.isOpen()) {
            ByteBuffer byteBuffer;
            block5 : {
                int n;
                byteBuffer = ByteBuffer.allocate(4);
                try {
                    fileChannel.position(0L);
                    n = fileChannel.read(byteBuffer);
                    if (n == 4) break block5;
                    if (n == -1) return 0;
                }
                catch (IOException iOException) {
                    this.zzacv.zzgi().zziv().zzg("Failed to read from channel", iOException);
                    return 0;
                }
                this.zzacv.zzgi().zziy().zzg("Unexpected data length. Bytes read", n);
                return 0;
            }
            byteBuffer.flip();
            return byteBuffer.getInt();
        }
        this.zzacv.zzgi().zziv().log("Bad channel to read from");
        return 0;
    }

    static /* synthetic */ zzea zza(zzjt zzjt2, zzeb zzeb2) {
        return zzjt2.zzg(zzeb2);
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    private final zzeb zza(Context var1_1, String var2_3, String var3_4, boolean var4_5, boolean var5_6, boolean var6_7, long var7_8) {
        block11 : {
            block12 : {
                block10 : {
                    var14_9 = "Unknown";
                    var11_10 = "Unknown";
                    var10_11 = var1_1.getPackageManager();
                    if (var10_11 == null) {
                        this.zzacv.zzgi().zziv().log("PackageManager is null, can not log app install information");
                        return null;
                    }
                    try {
                        var10_12 = var10_11.getInstallerPackageName(var2_3);
                        break block10;
                    }
                    catch (IllegalArgumentException var10_13) {}
                    this.zzacv.zzgi().zziv().zzg("Error retrieving installer package name. appId", zzfi.zzbp(var2_3));
                    var10_14 = "Unknown";
                }
                if (var10_15 != null) break block12;
                var10_16 = "manual_install";
                ** GOTO lbl20
            }
            if ("com.android.vending".equals(var10_15)) {
                var10_18 = "";
lbl20: // 2 sources:
                var12_26 = var10_17;
            } else {
                var12_27 = var10_15;
            }
            var13_29 = var11_10;
            try {
                var15_30 = Wrappers.packageManager(var1_1).getPackageInfo(var2_3, 0);
                if (var15_30 != null) {
                    var13_29 = var11_10;
                    var14_9 = Wrappers.packageManager(var1_1).getApplicationLabel(var2_3);
                    var10_20 = var11_10;
                    var13_29 = var11_10;
                    if (!TextUtils.isEmpty((CharSequence)var14_9)) {
                        var13_29 = var11_10;
                        var10_21 = var14_9.toString();
                    }
                    var13_29 = var10_22;
                    var11_10 = var15_30.versionName;
                    var13_29 = var10_22;
                    var9_31 = var15_30.versionCode;
                    var10_23 = var11_10;
                    break block11;
                }
                var9_31 = Integer.MIN_VALUE;
                var10_24 = var14_9;
            }
            catch (PackageManager.NameNotFoundException var1_2) {}
        }
        this.zzacv.zzgl();
        if (this.zzacv.zzgk().zzbd(var2_3)) {
            return new zzeb(var2_3, var3_4, (String)var10_25, var9_31, (String)var12_28, this.zzacv.zzgk().zzgw(), this.zzacv.zzgg().zzd(var1_1, var2_3), null, var4_5, false, "", 0L, var7_8, 0, var5_6, var6_7, false);
        }
        var7_8 = 0L;
        return new zzeb(var2_3, var3_4, (String)var10_25, var9_31, (String)var12_28, this.zzacv.zzgk().zzgw(), this.zzacv.zzgg().zzd(var1_1, var2_3), null, var4_5, false, "", 0L, var7_8, 0, var5_6, var6_7, false);
        this.zzacv.zzgi().zziv().zze("Error retrieving newly installed package info. appId, appName", zzfi.zzbp(var2_3), var13_29);
        return null;
    }

    private static void zza(zzjs object) {
        if (object == null) {
            throw new IllegalStateException("Upload Component not created");
        }
        if (!object.isInitialized()) {
            object = String.valueOf(object.getClass());
            StringBuilder stringBuilder = new StringBuilder(String.valueOf(object).length() + 27);
            stringBuilder.append("Component not initialized: ");
            stringBuilder.append((String)object);
            throw new IllegalStateException(stringBuilder.toString());
        }
    }

    static /* synthetic */ void zza(zzjt zzjt2, zzjy zzjy2) {
        zzjt2.zza(zzjy2);
    }

    @WorkerThread
    private final void zza(zzjy object) {
        this.zzacv.zzgh().zzab();
        object = new zzek(this);
        object.zzm();
        this.zzaru = object;
        this.zzacv.zzgk().zza(this.zzars);
        object = new zzed(this);
        object.zzm();
        this.zzarx = object;
        object = new zzjp(this);
        object.zzm();
        this.zzarw = object;
        this.zzarv = new zzfr(this);
        if (this.zzasc != this.zzasd) {
            this.zzacv.zzgi().zziv().zze("Not all upload components initialized", this.zzasc, this.zzasd);
        }
        this.zzvn = true;
    }

    @WorkerThread
    @VisibleForTesting
    private final boolean zza(int n, FileChannel fileChannel) {
        this.zzab();
        if (fileChannel != null && fileChannel.isOpen()) {
            ByteBuffer byteBuffer = ByteBuffer.allocate(4);
            byteBuffer.putInt(n);
            byteBuffer.flip();
            try {
                fileChannel.truncate(0L);
                fileChannel.write(byteBuffer);
                fileChannel.force(true);
                if (fileChannel.size() != 4L) {
                    this.zzacv.zzgi().zziv().zzg("Error writing to channel. Bytes written", fileChannel.size());
                }
                return true;
            }
            catch (IOException iOException) {
                this.zzacv.zzgi().zziv().zzg("Failed to write to channel", iOException);
                return false;
            }
        }
        this.zzacv.zzgi().zziv().log("Bad channel to read from");
        return false;
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    private final boolean zza(String var1_1, zzex var2_2) {
        var12_3 = var2_2.zzahg.getString("currency");
        if (!"ecommerce_purchase".equals(var2_2.name)) ** GOTO lbl11
        var3_5 = var5_4 = var2_2.zzahg.zzbk("value") * 1000000.0;
        if (var5_4 == 0.0) {
            var3_5 = (double)var2_2.zzahg.getLong("value").longValue() * 1000000.0;
        }
        if (var3_5 <= 9.223372036854776E18 && var3_5 >= -9.223372036854776E18) {
            var8_6 = Math.round(var3_5);
        } else {
            this.zzacv.zzgi().zziy().zze("Data lost. Currency value is too big. appId", zzfi.zzbp(var1_1), var3_5);
            return false;
lbl11: // 1 sources:
            var8_6 = var2_2.zzahg.getLong("value");
        }
        if (TextUtils.isEmpty((CharSequence)var12_3) != false) return true;
        var13_7 = var12_3.toUpperCase(Locale.US);
        if (var13_7.matches("[A-Z]{3}") == false) return true;
        var12_3 = String.valueOf("_ltv_");
        var12_3 = (var13_7 = String.valueOf(var13_7)).length() != 0 ? var12_3.concat((String)var13_7) : new String(var12_3);
        var13_7 = this.zzjh().zzh(var1_1, var12_3);
        if (var13_7 != null && var13_7.value instanceof Long) {
            var10_8 = (Long)var13_7.value;
            var2_2 = new zzkc(var1_1, var2_2.origin, var12_3, this.zzacv.zzbt().currentTimeMillis(), var10_8 + var8_6);
        } else {
            var13_7 = this.zzjh();
            var7_9 = this.zzacv.zzgk().zzb(var1_1, zzez.zzaji);
            Preconditions.checkNotEmpty(var1_1);
            var13_7.zzab();
            var13_7.zzch();
            try {
                var13_7.getWritableDatabase().execSQL("delete from user_attributes where app_id=? and name in (select name from user_attributes where app_id=? and name like '_ltv_%' order by set_timestamp desc limit ?,10);", (Object[])new String[]{var1_1, var1_1, String.valueOf(var7_9 - 1)});
            }
            catch (SQLiteException var14_10) {
                var13_7.zzgi().zziv().zze("Error pruning currencies. appId", zzfi.zzbp(var1_1), (Object)var14_10);
            }
            var2_2 = new zzkc(var1_1, var2_2.origin, var12_3, this.zzacv.zzbt().currentTimeMillis(), var8_6);
        }
        if (this.zzjh().zza((zzkc)var2_2) != false) return true;
        this.zzacv.zzgi().zziv().zzd("Too many unique user properties are set. Ignoring user property. appId", zzfi.zzbp(var1_1), this.zzacv.zzgf().zzbo(var2_2.name), var2_2.value);
        this.zzacv.zzgg().zza(var1_1, 9, null, null, 0);
        return true;
    }

    private final zzkp[] zza(String string2, zzkx[] arrzzkx, zzkr[] arrzzkr) {
        Preconditions.checkNotEmpty(string2);
        return this.zzjg().zza(string2, arrzzkr, arrzzkx);
    }

    @WorkerThread
    private final void zzab() {
        this.zzacv.zzgh().zzab();
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @WorkerThread
    private final void zzb(zzea zzea2) {
        this.zzab();
        if (TextUtils.isEmpty((CharSequence)zzea2.getGmpAppId())) {
            this.zzb(zzea2.zzah(), 204, null, null, null);
            return;
        }
        Object object = this.zzacv.zzgk();
        Object object2 = zzea2.getGmpAppId();
        Object object3 = zzea2.getAppInstanceId();
        Object object4 = new Uri.Builder();
        Object object5 = object4.scheme(zzez.zzaii.get()).encodedAuthority(zzez.zzaij.get());
        object2 = (object2 = String.valueOf(object2)).length() != 0 ? "config/app/".concat((String)object2) : new String("config/app/");
        object5.path((String)object2).appendQueryParameter("app_instance_id", (String)object3).appendQueryParameter("platform", "android").appendQueryParameter("gmp_version", String.valueOf(object.zzgw()));
        object = object4.build().toString();
        try {
            object3 = new URL((String)object);
            this.zzacv.zzgi().zzjc().zzg("Fetching remote configuration", zzea2.zzah());
            object2 = this.zzky().zzbx(zzea2.zzah());
            object4 = this.zzky().zzby(zzea2.zzah());
            if (object2 != null && !TextUtils.isEmpty((CharSequence)object4)) {
                object2 = new ArrayMap<String, Object>();
                object2.put("If-Modified-Since", object4);
            } else {
                object2 = null;
            }
            this.zzase = true;
            object4 = this.zzkz();
            object5 = zzea2.zzah();
            zzjw zzjw2 = new zzjw(this);
            object4.zzab();
            object4.zzch();
            Preconditions.checkNotNull(object3);
            Preconditions.checkNotNull(zzjw2);
            object4.zzgh().zzd(new zzfq((zzfm)object4, (String)object5, (URL)object3, null, object2, (zzfo)zzjw2));
            return;
        }
        catch (MalformedURLException malformedURLException) {}
        this.zzacv.zzgi().zziv().zze("Failed to parse config URL. Not fetching. appId", zzfi.zzbp(zzea2.zzah()), object);
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    @WorkerThread
    private final Boolean zzc(zzea zzea2) {
        try {
            if (zzea2.zzgu() != Integer.MIN_VALUE) {
                int n = Wrappers.packageManager((Context)this.zzacv.getContext()).getPackageInfo((String)zzea2.zzah(), (int)0).versionCode;
                if (zzea2.zzgu() != (long)n) return false;
                return true;
            }
            String string2 = Wrappers.packageManager((Context)this.zzacv.getContext()).getPackageInfo((String)zzea2.zzah(), (int)0).versionName;
            if (zzea2.zzag() == null || !zzea2.zzag().equals(string2)) return false;
        }
        catch (PackageManager.NameNotFoundException nameNotFoundException) {
            return null;
        }
        return true;
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    @WorkerThread
    private final void zzc(zzex var1_1, zzeb var2_3) {
        block43 : {
            block42 : {
                block41 : {
                    block45 : {
                        block44 : {
                            block40 : {
                                block39 : {
                                    block38 : {
                                        block37 : {
                                            Preconditions.checkNotNull(var2_3);
                                            Preconditions.checkNotEmpty(var2_3.packageName);
                                            var5_5 = System.nanoTime();
                                            this.zzab();
                                            this.zzlc();
                                            var11_6 = var2_3.packageName;
                                            if (!this.zzjf().zzd((zzex)var1_1, (zzeb)var2_3)) {
                                                return;
                                            }
                                            if (!var2_3.zzafk) {
                                                this.zzg((zzeb)var2_3);
                                                return;
                                            }
                                            var9_7 = this.zzky().zzn((String)var11_6, var1_1.name);
                                            var4_8 = true;
                                            if (var9_7) {
                                                this.zzacv.zzgi().zziy().zze("Dropping blacklisted event. appId", zzfi.zzbp((String)var11_6), this.zzacv.zzgf().zzbm(var1_1.name));
                                                var3_9 = var4_8;
                                                if (!this.zzky().zzcb((String)var11_6)) {
                                                    var3_9 = this.zzky().zzcc((String)var11_6) != false ? var4_8 : false;
                                                }
                                                if (!var3_9) {
                                                    if ("_err".equals(var1_1.name) != false) return;
                                                    this.zzacv.zzgg().zza((String)var11_6, 11, "_ev", var1_1.name, 0);
                                                }
                                                if (var3_9 == false) return;
                                                var1_1 = this.zzjh().zzbf((String)var11_6);
                                                if (var1_1 == null) return;
                                                var5_5 = Math.max(var1_1.zzha(), var1_1.zzgz());
                                                if (Math.abs(this.zzacv.zzbt().currentTimeMillis() - var5_5) <= zzez.zzajd.get()) return;
                                                this.zzacv.zzgi().zzjb().log("Fetching config for blacklisted app");
                                                this.zzb((zzea)var1_1);
                                                return;
                                            }
                                            if (this.zzacv.zzgi().isLoggable(2)) {
                                                this.zzacv.zzgi().zzjc().zzg("Logging event", this.zzacv.zzgf().zzb((zzex)var1_1));
                                            }
                                            this.zzjh().beginTransaction();
                                            this.zzg((zzeb)var2_3);
                                            if (("_iap".equals(var1_1.name) || "ecommerce_purchase".equals(var1_1.name)) && !this.zza((String)var11_6, (zzex)var1_1)) {
                                                this.zzjh().setTransactionSuccessful();
                                                this.zzjh().endTransaction();
                                                return;
                                            }
                                            var9_7 = zzkd.zzcg(var1_1.name);
                                            var10_11 = "_err".equals(var1_1.name);
                                            var12_12 = this.zzjh().zza(this.zzld(), (String)var11_6, true, var9_7, false, var10_11, false);
                                            var7_13 = var12_12.zzagu - (long)zzez.zzaio.get().intValue();
                                            if (var7_13 <= 0L) break block37;
                                            if (var7_13 % 1000L != 1L) ** GOTO lbl47
                                            this.zzacv.zzgi().zziv().zze("Data loss. Too many events logged. appId, count", zzfi.zzbp((String)var11_6), var12_12.zzagu);
lbl47: // 2 sources:
                                            this.zzjh().setTransactionSuccessful();
                                            return;
                                        }
                                        if (!var9_7) break block38;
                                        var7_13 = var12_12.zzagt - (long)zzez.zzaiq.get().intValue();
                                        if (var7_13 <= 0L) break block38;
                                        if (var7_13 % 1000L != 1L) ** GOTO lbl57
                                        this.zzacv.zzgi().zziv().zze("Data loss. Too many public events logged. appId, count", zzfi.zzbp((String)var11_6), var12_12.zzagt);
lbl57: // 2 sources:
                                        this.zzacv.zzgg().zza((String)var11_6, 16, "_ev", var1_1.name, 0);
                                        this.zzjh().setTransactionSuccessful();
                                        this.zzjh().endTransaction();
                                        return;
                                    }
                                    if (var10_11) {
                                        var7_13 = var12_12.zzagw - (long)Math.max(0, Math.min(1000000, this.zzacv.zzgk().zzb(var2_3.packageName, zzez.zzaip)));
                                        if (var7_13 <= 0L) break block39;
                                        if (var7_13 == 1L) {
                                            this.zzacv.zzgi().zziv().zze("Too many error events logged. appId, count", zzfi.zzbp((String)var11_6), var12_12.zzagw);
                                        }
                                        this.zzjh().setTransactionSuccessful();
                                        this.zzjh().endTransaction();
                                        return;
                                    }
                                }
                                var12_12 = var1_1.zzahg.zzin();
                                this.zzacv.zzgg().zza((Bundle)var12_12, "_o", (Object)var1_1.origin);
                                if (this.zzacv.zzgg().zzcn((String)var11_6)) {
                                    this.zzacv.zzgg().zza((Bundle)var12_12, "_dbg", 1L);
                                    this.zzacv.zzgg().zza((Bundle)var12_12, "_r", 1L);
                                }
                                if ((var7_13 = this.zzjh().zzbg((String)var11_6)) > 0L) {
                                    this.zzacv.zzgi().zziy().zze("Data lost. Too many events stored on disk, deleted. appId", zzfi.zzbp((String)var11_6), var7_13);
                                }
                                var1_1 = new zzes(this.zzacv, var1_1.origin, (String)var11_6, var1_1.name, var1_1.zzahr, 0L, (Bundle)var12_12);
                                var12_12 = this.zzjh().zzf((String)var11_6, var1_1.name);
                                if (var12_12 != null) ** GOTO lbl92
                                if (this.zzjh().zzbj((String)var11_6) < 500L || !var9_7) break block40;
                                this.zzacv.zzgi().zziv().zzd("Too many event names used, ignoring event. appId, name, supported count", zzfi.zzbp((String)var11_6), this.zzacv.zzgf().zzbm(var1_1.name), 500);
                                this.zzacv.zzgg().zza((String)var11_6, 8, null, null, 0);
                                this.zzjh().endTransaction();
                                return;
                            }
                            var11_6 = new zzet((String)var11_6, var1_1.name, 0L, 0L, var1_1.timestamp, 0L, null, null, null);
                            break block44;
lbl92: // 1 sources:
                            var1_1 = var1_1.zza(this.zzacv, var12_12.zzahj);
                            var11_6 = var12_12.zzah(var1_1.timestamp);
                        }
                        this.zzjh().zza((zzet)var11_6);
                        this.zzab();
                        this.zzlc();
                        Preconditions.checkNotNull(var1_1);
                        Preconditions.checkNotNull(var2_3);
                        Preconditions.checkNotEmpty(var1_1.zzth);
                        Preconditions.checkArgument(var1_1.zzth.equals(var2_3.packageName));
                        var13_14 = new zzku();
                        var9_7 = true;
                        var13_14.zzavh = 1;
                        var13_14.zzavp = "android";
                        var13_14.zzth = var2_3.packageName;
                        var13_14.zzafh = var2_3.zzafh;
                        var13_14.zztg = var2_3.zztg;
                        var11_6 = var2_3.zzafg == Integer.MIN_VALUE ? null : Integer.valueOf((int)var2_3.zzafg);
                        var13_14.zzawb = var11_6;
                        var13_14.zzavt = var2_3.zzafi;
                        var13_14.zzafa = var2_3.zzafa;
                        var11_6 = var2_3.zzafj == 0L ? null : Long.valueOf(var2_3.zzafj);
                        var13_14.zzavx = var11_6;
                        var11_6 = this.zzacv.zzgj().zzbr(var2_3.packageName);
                        if (var11_6 != null && !TextUtils.isEmpty((CharSequence)((CharSequence)var11_6.first))) {
                            if (var2_3.zzafm) {
                                var13_14.zzavv = (String)var11_6.first;
                                var13_14.zzavw = (Boolean)var11_6.second;
                            }
                        } else if (!this.zzacv.zzge().zzf(this.zzacv.getContext()) && var2_3.zzafn) {
                            var12_12 = Settings.Secure.getString((ContentResolver)this.zzacv.getContext().getContentResolver(), (String)"android_id");
                            if (var12_12 == null) {
                                this.zzacv.zzgi().zziy().zzg("null secure ID. appId", zzfi.zzbp(var13_14.zzth));
                                var11_6 = "null";
                            } else {
                                var11_6 = var12_12;
                                if (var12_12.isEmpty()) {
                                    this.zzacv.zzgi().zziy().zzg("empty secure ID. appId", zzfi.zzbp(var13_14.zzth));
                                    var11_6 = var12_12;
                                }
                            }
                            var13_14.zzawe = var11_6;
                        }
                        this.zzacv.zzge().zzch();
                        var13_14.zzavr = Build.MODEL;
                        this.zzacv.zzge().zzch();
                        var13_14.zzavq = Build.VERSION.RELEASE;
                        var13_14.zzavs = (int)this.zzacv.zzge().zzik();
                        var13_14.zzahd = this.zzacv.zzge().zzil();
                        var13_14.zzavu = null;
                        var13_14.zzavk = null;
                        var13_14.zzavl = null;
                        var13_14.zzavm = null;
                        var13_14.zzawg = var2_3.zzafl;
                        if (this.zzacv.isEnabled() && zzeh.zzht()) {
                            var13_14.zzawh = null;
                        }
                        var11_6 = var12_12 = this.zzjh().zzbf(var2_3.packageName);
                        if (var12_12 == null) {
                            var11_6 = new zzea(this.zzacv, var2_3.packageName);
                            var11_6.zzam(this.zzacv.zzfz().zzir());
                            var11_6.zzap(var2_3.zzafc);
                            var11_6.zzan(var2_3.zzafa);
                            var11_6.zzao(this.zzacv.zzgj().zzbs(var2_3.packageName));
                            var11_6.zzw(0L);
                            var11_6.zzr(0L);
                            var11_6.zzs(0L);
                            var11_6.setAppVersion(var2_3.zztg);
                            var11_6.zzt(var2_3.zzafg);
                            var11_6.zzaq(var2_3.zzafh);
                            var11_6.zzu(var2_3.zzafi);
                            var11_6.zzv(var2_3.zzafj);
                            var11_6.setMeasurementEnabled(var2_3.zzafk);
                            var11_6.zzaf(var2_3.zzafl);
                            this.zzjh().zza((zzea)var11_6);
                        }
                        var13_14.zzaez = var11_6.getAppInstanceId();
                        var13_14.zzafc = var11_6.zzgr();
                        var2_3 = this.zzjh().zzbe(var2_3.packageName);
                        var13_14.zzavj = new zzkx[var2_3.size()];
                        break block45;
                        finally {
                            this.zzjh().endTransaction();
                        }
                    }
                    for (var3_10 = 0; var3_10 < var2_3.size(); ++var3_10) {
                        var13_14.zzavj[var3_10] = var11_6 = new zzkx();
                        var11_6.name = ((zzkc)var2_3.get((int)var3_10)).name;
                        var11_6.zzaws = ((zzkc)var2_3.get((int)var3_10)).zzast;
                        this.zzjf().zza((zzkx)var11_6, ((zzkc)var2_3.get((int)var3_10)).value);
                    }
                    try {
                        try {
                            var7_13 = this.zzjh().zza(var13_14);
                            var2_3 = this.zzjh();
                            if (var1_1.zzahg == null) break block41;
                            var11_6 = var1_1.zzahg.iterator();
                        }
                        catch (IOException var2_4) {
                            this.zzacv.zzgi().zziv().zze("Data loss. Failed to insert raw event metadata. appId", zzfi.zzbp(var13_14.zzth), var2_4);
                            break block43;
                        }
                        while (var11_6.hasNext()) {
                            if (!"_r".equals((String)var11_6.next())) continue;
                            break block42;
                        }
                        var10_11 = this.zzky().zzo(var1_1.zzth, var1_1.name);
                        var11_6 = this.zzjh().zza(this.zzld(), var1_1.zzth, false, false, false, false, false);
                        if (!var10_11 || var11_6.zzagx >= (long)this.zzacv.zzgk().zzas(var1_1.zzth)) break block41;
                        break block42;
                    }
                    catch (Throwable var1_2) {}
                    throw var1_2;
                }
                var9_7 = false;
            }
            if (var2_3.zza((zzes)var1_1, var7_13, var9_7)) {
                this.zzasa = 0L;
            }
        }
        this.zzjh().setTransactionSuccessful();
        if (this.zzacv.zzgi().isLoggable(2)) {
            this.zzacv.zzgi().zzjc().zzg("Event recorded", this.zzacv.zzgf().zza((zzes)var1_1));
        }
        this.zzjh().endTransaction();
        this.zzlg();
        this.zzacv.zzgi().zzjc().zzg("Background event processing time, ms", (System.nanoTime() - var5_5 + 500000L) / 1000000L);
    }

    /*
     * Enabled aggressive block sorting
     * Lifted jumps to return sites
     */
    @WorkerThread
    private final zzeb zzce(String object) {
        Object object2 = object;
        Object object3 = this.zzjh().zzbf((String)object2);
        if (object3 != null && !TextUtils.isEmpty((CharSequence)object3.zzag())) {
            Object object4 = this.zzc((zzea)object3);
            if (object4 == null) return new zzeb((String)object2, object3.getGmpAppId(), object3.zzag(), object3.zzgu(), object3.zzgv(), object3.zzgw(), object3.zzgx(), null, object3.isMeasurementEnabled(), false, object3.zzgr(), object3.zzhk(), 0L, 0, object3.zzhl(), object3.zzhm(), false);
            if (object4.booleanValue()) return new zzeb((String)object2, object3.getGmpAppId(), object3.zzag(), object3.zzgu(), object3.zzgv(), object3.zzgw(), object3.zzgx(), null, object3.isMeasurementEnabled(), false, object3.zzgr(), object3.zzhk(), 0L, 0, object3.zzhl(), object3.zzhm(), false);
            object4 = this.zzacv.zzgi().zziv();
            object3 = "App version does not match; dropping. appId";
            object2 = zzfi.zzbp((String)object);
            object = object4;
        } else {
            object = this.zzacv.zzgi().zzjb();
            object3 = "No app data available; dropping";
        }
        object.zzg((String)object3, object2);
        return null;
    }

    /*
     * Exception decompiling
     */
    @WorkerThread
    private final boolean zzd(String var1_1, long var2_13) {
        // This method has failed to decompile.  When submitting a bug report, please provide this stack trace, and (if you hold appropriate legal rights) the relevant class file.
        // java.lang.IllegalStateException: Backjump on non jumping statement [] lbl43 : TryStatement: try { 4[TRYBLOCK]

        // org.benf.cfr.reader.bytecode.analysis.opgraph.op3rewriters.Cleaner$1.call(Cleaner.java:44)
        // org.benf.cfr.reader.bytecode.analysis.opgraph.op3rewriters.Cleaner$1.call(Cleaner.java:22)
        // org.benf.cfr.reader.util.graph.GraphVisitorDFS.process(GraphVisitorDFS.java:67)
        // org.benf.cfr.reader.bytecode.analysis.opgraph.op3rewriters.Cleaner.removeUnreachableCode(Cleaner.java:54)
        // org.benf.cfr.reader.bytecode.analysis.opgraph.op3rewriters.RemoveDeterministicJumps.apply(RemoveDeterministicJumps.java:35)
        // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisInner(CodeAnalyser.java:497)
        // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisOrWrapFail(CodeAnalyser.java:196)
        // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysis(CodeAnalyser.java:141)
        // org.benf.cfr.reader.entities.attributes.AttributeCode.analyse(AttributeCode.java:95)
        // org.benf.cfr.reader.entities.Method.analyse(Method.java:372)
        // org.benf.cfr.reader.entities.ClassFile.analyseMid(ClassFile.java:867)
        // org.benf.cfr.reader.entities.ClassFile.analyseTop(ClassFile.java:768)
        // org.benf.cfr.reader.Main.doJar(Main.java:141)
        // org.benf.cfr.reader.Main.main(Main.java:242)
        throw new IllegalStateException("Decompilation failed");
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Lifted jumps to return sites
     */
    @WorkerThread
    private final zzea zzg(zzeb var1_1) {
        block20 : {
            this.zzab();
            this.zzlc();
            Preconditions.checkNotNull(var1_1);
            Preconditions.checkNotEmpty(var1_1.packageName);
            var4_2 = this.zzjh().zzbf(var1_1.packageName);
            var5_3 = this.zzacv.zzgj().zzbs(var1_1.packageName);
            if (var4_2 != null) break block20;
            var4_2 = new zzea(this.zzacv, var1_1.packageName);
            var4_2.zzam(this.zzacv.zzfz().zzir());
            var4_2.zzao(var5_3);
            ** GOTO lbl16
        }
        if (!var5_3.equals(var4_2.zzgq())) {
            var4_2.zzao(var5_3);
            var4_2.zzam(this.zzacv.zzfz().zzir());
lbl16: // 2 sources:
            var3_4 = true;
        } else {
            var3_4 = false;
        }
        var2_5 = var3_4;
        if (!TextUtils.isEmpty((CharSequence)var1_1.zzafa)) {
            var2_5 = var3_4;
            if (!var1_1.zzafa.equals(var4_2.getGmpAppId())) {
                var4_2.zzan(var1_1.zzafa);
                var2_5 = true;
            }
        }
        var3_4 = var2_5;
        if (!TextUtils.isEmpty((CharSequence)var1_1.zzafc)) {
            var3_4 = var2_5;
            if (!var1_1.zzafc.equals(var4_2.zzgr())) {
                var4_2.zzap(var1_1.zzafc);
                var3_4 = true;
            }
        }
        var2_5 = var3_4;
        if (var1_1.zzafi != 0L) {
            var2_5 = var3_4;
            if (var1_1.zzafi != var4_2.zzgw()) {
                var4_2.zzu(var1_1.zzafi);
                var2_5 = true;
            }
        }
        var3_4 = var2_5;
        if (!TextUtils.isEmpty((CharSequence)var1_1.zztg)) {
            var3_4 = var2_5;
            if (!var1_1.zztg.equals(var4_2.zzag())) {
                var4_2.setAppVersion(var1_1.zztg);
                var3_4 = true;
            }
        }
        if (var1_1.zzafg != var4_2.zzgu()) {
            var4_2.zzt(var1_1.zzafg);
            var3_4 = true;
        }
        var2_5 = var3_4;
        if (var1_1.zzafh != null) {
            var2_5 = var3_4;
            if (!var1_1.zzafh.equals(var4_2.zzgv())) {
                var4_2.zzaq(var1_1.zzafh);
                var2_5 = true;
            }
        }
        if (var1_1.zzafj != var4_2.zzgx()) {
            var4_2.zzv(var1_1.zzafj);
            var2_5 = true;
        }
        if (var1_1.zzafk != var4_2.isMeasurementEnabled()) {
            var4_2.setMeasurementEnabled(var1_1.zzafk);
            var2_5 = true;
        }
        var3_4 = var2_5;
        if (!TextUtils.isEmpty((CharSequence)var1_1.zzafy)) {
            var3_4 = var2_5;
            if (!var1_1.zzafy.equals(var4_2.zzhi())) {
                var4_2.zzar(var1_1.zzafy);
                var3_4 = true;
            }
        }
        if (var1_1.zzafl != var4_2.zzhk()) {
            var4_2.zzaf(var1_1.zzafl);
            var3_4 = true;
        }
        if (var1_1.zzafm != var4_2.zzhl()) {
            var4_2.zzd(var1_1.zzafm);
            var3_4 = true;
        }
        if (var1_1.zzafn != var4_2.zzhm()) {
            var4_2.zze(var1_1.zzafn);
            var3_4 = true;
            if (var3_4 == false) return var4_2;
        }
        this.zzjh().zza(var4_2);
        return var4_2;
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public static zzjt zzg(Context context) {
        Preconditions.checkNotNull(context);
        Preconditions.checkNotNull(context.getApplicationContext());
        if (zzarr != null) return zzarr;
        synchronized (zzjt.class) {
            if (zzarr != null) return zzarr;
            zzarr = new zzjt(new zzjy(context));
            return zzarr;
        }
    }

    private final zzgh zzky() {
        zzjt.zza(this.zzars);
        return this.zzars;
    }

    private final zzfr zzla() {
        if (this.zzarv == null) {
            throw new IllegalStateException("Network broadcast receiver not created");
        }
        return this.zzarv;
    }

    private final zzjp zzlb() {
        zzjt.zza(this.zzarw);
        return this.zzarw;
    }

    private final long zzld() {
        long l;
        long l2 = this.zzacv.zzbt().currentTimeMillis();
        zzft zzft2 = this.zzacv.zzgj();
        zzft2.zzch();
        zzft2.zzab();
        long l3 = l = zzft2.zzalx.get();
        if (l == 0L) {
            l3 = (long)zzft2.zzgg().zzlo().nextInt(86400000) + 1L;
            zzft2.zzalx.set(l3);
        }
        return (l2 + l3) / 1000L / 60L / 60L / 24L;
    }

    private final boolean zzlf() {
        this.zzab();
        this.zzlc();
        if (!this.zzjh().zzia() && TextUtils.isEmpty((CharSequence)this.zzjh().zzhv())) {
            return false;
        }
        return true;
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Lifted jumps to return sites
     */
    @WorkerThread
    private final void zzlg() {
        block12 : {
            block15 : {
                block14 : {
                    block13 : {
                        this.zzab();
                        this.zzlc();
                        if (!this.zzlk()) {
                            return;
                        }
                        if (this.zzasa > 0L) {
                            var2_1 = 3600000L - Math.abs(this.zzacv.zzbt().elapsedRealtime() - this.zzasa);
                            if (var2_1 > 0L) {
                                this.zzacv.zzgi().zzjc().zzg("Upload has been suspended. Will update scheduling later in approximately ms", var2_1);
                                this.zzla().unregister();
                                this.zzlb().cancel();
                                return;
                            }
                            this.zzasa = 0L;
                        }
                        if (!this.zzacv.zzkg() || !this.zzlf()) break block13;
                        var4_2 = this.zzacv.zzbt().currentTimeMillis();
                        var2_1 = Math.max(0L, zzez.zzaje.get());
                        var1_3 = !this.zzjh().zzib() && !this.zzjh().zzhw() ? 0 : 1;
                        var14_4 = var1_3 != 0 ? (!TextUtils.isEmpty((CharSequence)(var14_4 = this.zzacv.zzgk().zzhs())) && !".none.".equals(var14_4) ? zzez.zzaiz : zzez.zzaiy) : zzez.zzaix;
                        var10_5 = Math.max(0L, var14_4.get());
                        var12_6 = this.zzacv.zzgj().zzalt.get();
                        var6_7 = this.zzacv.zzgj().zzalu.get();
                        var8_8 = Math.max(this.zzjh().zzhy(), this.zzjh().zzhz());
                        if (var8_8 == 0L) break block14;
                        var8_8 = var4_2 - Math.abs(var8_8 - var4_2);
                        var12_6 = Math.abs(var12_6 - var4_2);
                        var6_7 = var4_2 - Math.abs(var6_7 - var4_2);
                        var12_6 = Math.max(var4_2 - var12_6, var6_7);
                        var4_2 = var2_1 = var8_8 + var2_1;
                        if (var1_3 != 0) {
                            var4_2 = var2_1;
                            if (var12_6 > 0L) {
                                var4_2 = Math.min(var8_8, var12_6) + var10_5;
                            }
                        }
                        if (!this.zzjf().zza(var12_6, var10_5)) {
                            var4_2 = var12_6 + var10_5;
                        }
                        var2_1 = var4_2;
                        if (var6_7 == 0L) break block12;
                        var2_1 = var4_2;
                        if (var6_7 < var8_8) break block12;
                        var1_3 = 0;
                        break block15;
                    }
                    this.zzacv.zzgi().zzjc().log("Nothing to upload or uploading impossible");
                    this.zzla().unregister();
                    this.zzlb().cancel();
                    return;
                }
                do {
                    var2_1 = 0L;
                    break block12;
                    break;
                } while (true);
            }
            do {
                if (var1_3 >= Math.min(20, Math.max(0, zzez.zzajg.get()))) ** continue;
                var2_1 = var4_2 + Math.max(0L, zzez.zzajf.get()) * (1L << var1_3);
                if (var2_1 > var6_7) break;
                ++var1_3;
                var4_2 = var2_1;
            } while (true);
        }
        if (var2_1 == 0L) {
            this.zzacv.zzgi().zzjc().log("Next upload time is 0");
            this.zzla().unregister();
            this.zzlb().cancel();
            return;
        }
        if (!this.zzkz().zzex()) {
            this.zzacv.zzgi().zzjc().log("No network");
            this.zzla().zzeu();
            this.zzlb().cancel();
            return;
        }
        var6_7 = this.zzacv.zzgj().zzalv.get();
        var8_8 = Math.max(0L, zzez.zzaiv.get());
        var4_2 = var2_1;
        if (!this.zzjf().zza(var6_7, var8_8)) {
            var4_2 = Math.max(var2_1, var6_7 + var8_8);
        }
        this.zzla().unregister();
        var2_1 = var4_2 -= this.zzacv.zzbt().currentTimeMillis();
        if (var4_2 <= 0L) {
            var2_1 = Math.max(0L, zzez.zzaja.get());
            this.zzacv.zzgj().zzalt.set(this.zzacv.zzbt().currentTimeMillis());
        }
        this.zzacv.zzgi().zzjc().zzg("Upload scheduled in approximately ms", var2_1);
        this.zzlb().zzh(var2_1);
    }

    @WorkerThread
    private final void zzlh() {
        this.zzab();
        if (!(this.zzase || this.zzasf || this.zzasg)) {
            this.zzacv.zzgi().zzjc().log("Stopping uploading service(s)");
            if (this.zzasb == null) {
                return;
            }
            Iterator<Runnable> iterator = this.zzasb.iterator();
            while (iterator.hasNext()) {
                iterator.next().run();
            }
            this.zzasb.clear();
            return;
        }
        this.zzacv.zzgi().zzjc().zzd("Not stopping services. fetch, network, upload", this.zzase, this.zzasf, this.zzasg);
    }

    @WorkerThread
    @VisibleForTesting
    private final boolean zzli() {
        block5 : {
            void var1_4;
            String string2;
            zzfk zzfk2;
            block4 : {
                this.zzab();
                File file = new File(this.zzacv.getContext().getFilesDir(), "google_app_measurement.db");
                this.zzasi = new RandomAccessFile(file, "rw").getChannel();
                this.zzash = this.zzasi.tryLock();
                if (this.zzash == null) break block4;
                this.zzacv.zzgi().zzjc().log("Storage concurrent access okay");
                return true;
            }
            try {
                this.zzacv.zzgi().zziv().log("Storage concurrent data access panic");
                break block5;
            }
            catch (IOException iOException) {
                zzfk2 = this.zzacv.zzgi().zziv();
                string2 = "Failed to access storage lock file";
            }
            catch (FileNotFoundException fileNotFoundException) {
                zzfk2 = this.zzacv.zzgi().zziv();
                string2 = "Failed to acquire storage lock";
            }
            zzfk2.zzg(string2, var1_4);
        }
        return false;
    }

    @WorkerThread
    private final boolean zzlk() {
        this.zzab();
        this.zzlc();
        if (this.zzarz) {
            return true;
        }
        return false;
    }

    @Override
    public final Context getContext() {
        return this.zzacv.getContext();
    }

    @WorkerThread
    protected final void start() {
        this.zzacv.zzgh().zzab();
        this.zzjh().zzhx();
        if (this.zzacv.zzgj().zzalt.get() == 0L) {
            this.zzacv.zzgj().zzalt.set(this.zzacv.zzbt().currentTimeMillis());
        }
        this.zzlg();
    }

    /*
     * Exception decompiling
     */
    @WorkerThread
    @VisibleForTesting
    final void zza(int var1_1, Throwable var2_2, byte[] var3_6, String var4_7) {
        // This method has failed to decompile.  When submitting a bug report, please provide this stack trace, and (if you hold appropriate legal rights) the relevant class file.
        // org.benf.cfr.reader.util.ConfusedCFRException: Started 2 blocks at once
        // org.benf.cfr.reader.bytecode.analysis.opgraph.Op04StructuredStatement.getStartingBlocks(Op04StructuredStatement.java:393)
        // org.benf.cfr.reader.bytecode.analysis.opgraph.Op04StructuredStatement.buildNestedBlocks(Op04StructuredStatement.java:471)
        // org.benf.cfr.reader.bytecode.analysis.opgraph.Op03SimpleStatement.createInitialStructuredBlock(Op03SimpleStatement.java:2960)
        // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisInner(CodeAnalyser.java:818)
        // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisOrWrapFail(CodeAnalyser.java:196)
        // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysis(CodeAnalyser.java:141)
        // org.benf.cfr.reader.entities.attributes.AttributeCode.analyse(AttributeCode.java:95)
        // org.benf.cfr.reader.entities.Method.analyse(Method.java:372)
        // org.benf.cfr.reader.entities.ClassFile.analyseMid(ClassFile.java:867)
        // org.benf.cfr.reader.entities.ClassFile.analyseTop(ClassFile.java:768)
        // org.benf.cfr.reader.Main.doJar(Main.java:141)
        // org.benf.cfr.reader.Main.main(Main.java:242)
        throw new IllegalStateException("Decompilation failed");
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @WorkerThread
    public final byte[] zza(@NonNull zzex object, @Size(min=1L) String string2) {
        Object object2;
        long l;
        zzkt zzkt2;
        zzea zzea2;
        block31 : {
            long l2;
            block30 : {
                this.zzlc();
                this.zzab();
                this.zzacv.zzfu();
                Preconditions.checkNotNull(object);
                Preconditions.checkNotEmpty(string2);
                zzkt2 = new zzkt();
                this.zzjh().beginTransaction();
                try {
                    Object object3;
                    Iterator<String> iterator;
                    Object object4;
                    boolean bl;
                    block35 : {
                        block38 : {
                            block36 : {
                                block37 : {
                                    block34 : {
                                        block33 : {
                                            block32 : {
                                                zzea2 = this.zzjh().zzbf(string2);
                                                if (zzea2 != null) break block32;
                                                this.zzacv.zzgi().zzjb().zzg("Log and bundle not available. package_name", string2);
                                                break block33;
                                            }
                                            if (zzea2.isMeasurementEnabled()) break block34;
                                            this.zzacv.zzgi().zzjb().zzg("Log and bundle disabled. package_name", string2);
                                        }
                                        this.zzjh().endTransaction();
                                        return new byte[0];
                                    }
                                    if (("_iap".equals(object.name) || "ecommerce_purchase".equals(object.name)) && !this.zza(string2, (zzex)object)) {
                                        this.zzacv.zzgi().zziy().zzg("Failed to handle purchase event at single event bundle creation. appId", zzfi.zzbp(string2));
                                    }
                                    bl = this.zzacv.zzgk().zzaw(string2);
                                    object4 = 0L;
                                    iterator = object4;
                                    if (!bl) break block35;
                                    iterator = object4;
                                    if (!"_e".equals(object.name)) break block35;
                                    if (object.zzahg == null || object.zzahg.size() == 0) break block36;
                                    if (object.zzahg.getLong("_et") != null) break block37;
                                    object2 = this.zzacv.zzgi().zziy();
                                    iterator = "The engagement event does not include duration. appId";
                                    object3 = zzfi.zzbp(string2);
                                    break block38;
                                }
                                iterator = object.zzahg.getLong("_et");
                                break block35;
                            }
                            object2 = this.zzacv.zzgi().zziy();
                            iterator = "The engagement event does not contain any parameters. appId";
                            object3 = zzfi.zzbp(string2);
                        }
                        object2.zzg((String)((Object)iterator), object3);
                        iterator = object4;
                    }
                    zzku zzku2 = new zzku();
                    zzkt2.zzavf = new zzku[]{zzku2};
                    zzku2.zzavh = 1;
                    zzku2.zzavp = "android";
                    zzku2.zzth = zzea2.zzah();
                    zzku2.zzafh = zzea2.zzgv();
                    zzku2.zztg = zzea2.zzag();
                    l = zzea2.zzgu();
                    object2 = l == Integer.MIN_VALUE ? null : Integer.valueOf((int)l);
                    zzku2.zzawb = object2;
                    zzku2.zzavt = zzea2.zzgw();
                    zzku2.zzafa = zzea2.getGmpAppId();
                    zzku2.zzavx = zzea2.zzgx();
                    if (this.zzacv.isEnabled() && zzeh.zzht() && this.zzacv.zzgk().zzau(zzku2.zzth)) {
                        zzku2.zzawh = null;
                    }
                    object2 = this.zzacv.zzgj().zzbr(zzea2.zzah());
                    if (zzea2.zzhl() && object2 != null && !TextUtils.isEmpty((CharSequence)((CharSequence)object2.first))) {
                        zzku2.zzavv = (String)object2.first;
                        zzku2.zzavw = (Boolean)object2.second;
                    }
                    this.zzacv.zzge().zzch();
                    zzku2.zzavr = Build.MODEL;
                    this.zzacv.zzge().zzch();
                    zzku2.zzavq = Build.VERSION.RELEASE;
                    zzku2.zzavs = (int)this.zzacv.zzge().zzik();
                    zzku2.zzahd = this.zzacv.zzge().zzil();
                    zzku2.zzaez = zzea2.getAppInstanceId();
                    zzku2.zzafc = zzea2.zzgr();
                    List<zzkc> list = this.zzjh().zzbe(zzea2.zzah());
                    zzku2.zzavj = new zzkx[list.size()];
                    if (bl) {
                        object3 = this.zzjh().zzh(zzku2.zzth, "_lte");
                        if (object3 != null && object3.value != null) {
                            object2 = object3;
                            if (iterator.longValue() > 0L) {
                                object2 = new zzkc(zzku2.zzth, "auto", "_lte", this.zzacv.zzbt().currentTimeMillis(), (Long)object3.value + iterator.longValue());
                            }
                        } else {
                            object2 = new zzkc(zzku2.zzth, "auto", "_lte", this.zzacv.zzbt().currentTimeMillis(), iterator);
                        }
                    } else {
                        object2 = null;
                    }
                    int n = 0;
                    object3 = null;
                    do {
                        zzkx zzkx2;
                        if (n >= list.size()) {
                            if (bl && object3 == null) {
                                object3 = new zzkx();
                                object3.name = "_lte";
                                object3.zzaws = this.zzacv.zzbt().currentTimeMillis();
                                object3.zzave = (Long)object2.value;
                                zzku2.zzavj = Arrays.copyOf(zzku2.zzavj, zzku2.zzavj.length + 1);
                                zzku2.zzavj[zzku2.zzavj.length - 1] = object3;
                            }
                            if (iterator.longValue() > 0L) {
                                this.zzjh().zza((zzkc)object2);
                            }
                            object2 = object.zzahg.zzin();
                            if ("_iap".equals(object.name)) {
                                object2.putLong("_c", 1L);
                                this.zzacv.zzgi().zzjb().log("Marking in-app purchase as real-time");
                                object2.putLong("_r", 1L);
                            }
                            object2.putString("_o", object.origin);
                            if (this.zzacv.zzgg().zzcn(zzku2.zzth)) {
                                this.zzacv.zzgg().zza((Bundle)object2, "_dbg", 1L);
                                this.zzacv.zzgg().zza((Bundle)object2, "_r", 1L);
                            }
                            if ((iterator = this.zzjh().zzf(string2, object.name)) == null) {
                                iterator = new zzet(string2, object.name, 1L, 0L, object.zzahr, 0L, null, null, null);
                                this.zzjh().zza((zzet)((Object)iterator));
                                l = 0L;
                            } else {
                                l = iterator.zzahj;
                                iterator = iterator.zzah(object.zzahr).zzim();
                                this.zzjh().zza((zzet)((Object)iterator));
                            }
                            object = new zzes(this.zzacv, object.origin, string2, object.name, object.zzahr, l, (Bundle)object2);
                            object2 = new zzkr();
                            zzku2.zzavi = new zzkr[]{object2};
                            object2.zzavb = object.timestamp;
                            object2.name = object.name;
                            object2.zzavc = object.zzahf;
                            object2.zzava = new zzks[object.zzahg.size()];
                            iterator = object.zzahg.iterator();
                            n = 0;
                            break;
                        }
                        zzku2.zzavj[n] = zzkx2 = new zzkx();
                        zzkx2.name = list.get((int)n).name;
                        zzkx2.zzaws = list.get((int)n).zzast;
                        this.zzjf().zza(zzkx2, list.get((int)n).value);
                        object4 = object3;
                        if (bl) {
                            object4 = object3;
                            if ("_lte".equals(zzkx2.name)) {
                                zzkx2.zzave = (Long)object2.value;
                                zzkx2.zzaws = this.zzacv.zzbt().currentTimeMillis();
                                object4 = zzkx2;
                            }
                        }
                        ++n;
                        object3 = object4;
                    } while (true);
                    while (iterator.hasNext()) {
                        object4 = iterator.next();
                        object2.zzava[n] = object3 = new zzks();
                        object3.name = object4;
                        object4 = object.zzahg.get((String)object4);
                        this.zzjf().zza((zzks)object3, object4);
                        ++n;
                    }
                    zzku2.zzawa = this.zza(zzea2.zzah(), zzku2.zzavj, zzku2.zzavi);
                    zzku2.zzavl = object2.zzavb;
                    zzku2.zzavm = object2.zzavb;
                    l = zzea2.zzgt();
                    object = l != 0L ? Long.valueOf(l) : null;
                    zzku2.zzavo = object;
                    l2 = zzea2.zzgs();
                    if (l2 != 0L) break block30;
                    break block31;
                }
                catch (Throwable throwable) {
                    this.zzjh().endTransaction();
                    throw throwable;
                }
            }
            l = l2;
        }
        object = l != 0L ? Long.valueOf(l) : null;
        zzku2.zzavn = object;
        zzea2.zzhb();
        zzku2.zzavy = (int)zzea2.zzgy();
        zzku2.zzavu = this.zzacv.zzgk().zzgw();
        zzku2.zzavk = this.zzacv.zzbt().currentTimeMillis();
        zzku2.zzavz = Boolean.TRUE;
        zzea2.zzr(zzku2.zzavl);
        zzea2.zzs(zzku2.zzavm);
        this.zzjh().zza(zzea2);
        this.zzjh().setTransactionSuccessful();
        this.zzjh().endTransaction();
        try {
            object = new byte[zzkt2.zzwb()];
            object2 = zzacb.zzb(object, 0, ((byte[])object).length);
            zzkt2.zza((zzacb)object2);
            object2.zzvt();
            return this.zzjf().zzb((byte[])object);
        }
        catch (IOException iOException) {
            this.zzacv.zzgi().zziv().zze("Data loss. Failed to bundle and serialize. appId", zzfi.zzbp(string2), iOException);
            return null;
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @WorkerThread
    final void zzb(zzef object, zzeb object2) {
        Preconditions.checkNotNull(object);
        Preconditions.checkNotEmpty(object.packageName);
        Preconditions.checkNotNull(object.origin);
        Preconditions.checkNotNull(object.zzage);
        Preconditions.checkNotEmpty(object.zzage.name);
        this.zzab();
        this.zzlc();
        if (TextUtils.isEmpty((CharSequence)object2.zzafa)) {
            return;
        }
        if (!object2.zzafk) {
            this.zzg((zzeb)object2);
            return;
        }
        zzef zzef2 = new zzef((zzef)object);
        boolean bl = false;
        zzef2.active = false;
        this.zzjh().beginTransaction();
        try {
            Object object3;
            String string2;
            String string3;
            object = this.zzjh().zzi(zzef2.packageName, zzef2.zzage.name);
            if (object != null && !object.origin.equals(zzef2.origin)) {
                this.zzacv.zzgi().zziy().zzd("Updating a conditional user property with different origin. name, origin, origin (from DB)", this.zzacv.zzgf().zzbo(zzef2.zzage.name), zzef2.origin, object.origin);
            }
            if (object != null && object.active) {
                zzef2.origin = object.origin;
                zzef2.creationTimestamp = object.creationTimestamp;
                zzef2.triggerTimeout = object.triggerTimeout;
                zzef2.triggerEventName = object.triggerEventName;
                zzef2.zzagg = object.zzagg;
                zzef2.active = object.active;
                zzef2.zzage = new zzka(zzef2.zzage.name, object.zzage.zzast, zzef2.zzage.getValue(), object.zzage.origin);
            } else if (TextUtils.isEmpty((CharSequence)zzef2.triggerEventName)) {
                zzef2.zzage = new zzka(zzef2.zzage.name, zzef2.creationTimestamp, zzef2.zzage.getValue(), zzef2.zzage.origin);
                zzef2.active = true;
                bl = true;
            }
            if (zzef2.active) {
                object = zzef2.zzage;
                Object object4 = new zzkc(zzef2.packageName, zzef2.origin, object.name, object.zzast, object.getValue());
                if (this.zzjh().zza((zzkc)object4)) {
                    object = this.zzacv.zzgi().zzjb();
                    string3 = "User property updated immediately";
                    object3 = zzef2.packageName;
                    string2 = this.zzacv.zzgf().zzbo(object4.name);
                    object4 = object4.value;
                } else {
                    object = this.zzacv.zzgi().zziv();
                    string3 = "(2)Too many active user properties, ignoring";
                    object3 = zzfi.zzbp(zzef2.packageName);
                    string2 = this.zzacv.zzgf().zzbo(object4.name);
                    object4 = object4.value;
                }
                object.zzd(string3, object3, string2, object4);
                if (bl && zzef2.zzagg != null) {
                    this.zzc(new zzex(zzef2.zzagg, zzef2.creationTimestamp), (zzeb)object2);
                }
            }
            if (this.zzjh().zza(zzef2)) {
                object3 = this.zzacv.zzgi().zzjb();
                string2 = "Conditional property added";
                object2 = zzef2.packageName;
                string3 = this.zzacv.zzgf().zzbo(zzef2.zzage.name);
                object = zzef2.zzage.getValue();
            } else {
                object3 = this.zzacv.zzgi().zziv();
                string2 = "Too many conditional properties, ignoring";
                object2 = zzfi.zzbp(zzef2.packageName);
                string3 = this.zzacv.zzgf().zzbo(zzef2.zzage.name);
                object = zzef2.zzage.getValue();
            }
            object3.zzd(string2, object2, string3, object);
            this.zzjh().setTransactionSuccessful();
            return;
        }
        finally {
            this.zzjh().endTransaction();
        }
    }

    /*
     * Exception decompiling
     */
    @WorkerThread
    final void zzb(zzex var1_1, zzeb var2_3) {
        // This method has failed to decompile.  When submitting a bug report, please provide this stack trace, and (if you hold appropriate legal rights) the relevant class file.
        // org.benf.cfr.reader.util.ConfusedCFRException: Tried to end blocks [8[FORLOOP]], but top level block is 2[TRYBLOCK]
        // org.benf.cfr.reader.bytecode.analysis.opgraph.Op04StructuredStatement.processEndingBlocks(Op04StructuredStatement.java:416)
        // org.benf.cfr.reader.bytecode.analysis.opgraph.Op04StructuredStatement.buildNestedBlocks(Op04StructuredStatement.java:468)
        // org.benf.cfr.reader.bytecode.analysis.opgraph.Op03SimpleStatement.createInitialStructuredBlock(Op03SimpleStatement.java:2960)
        // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisInner(CodeAnalyser.java:818)
        // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisOrWrapFail(CodeAnalyser.java:196)
        // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysis(CodeAnalyser.java:141)
        // org.benf.cfr.reader.entities.attributes.AttributeCode.analyse(AttributeCode.java:95)
        // org.benf.cfr.reader.entities.Method.analyse(Method.java:372)
        // org.benf.cfr.reader.entities.ClassFile.analyseMid(ClassFile.java:867)
        // org.benf.cfr.reader.entities.ClassFile.analyseTop(ClassFile.java:768)
        // org.benf.cfr.reader.Main.doJar(Main.java:141)
        // org.benf.cfr.reader.Main.main(Main.java:242)
        throw new IllegalStateException("Decompilation failed");
    }

    final void zzb(zzjs zzjs2) {
        ++this.zzasc;
    }

    @WorkerThread
    final void zzb(zzka object, zzeb zzeb2) {
        this.zzab();
        this.zzlc();
        if (TextUtils.isEmpty((CharSequence)zzeb2.zzafa)) {
            return;
        }
        if (!zzeb2.zzafk) {
            this.zzg(zzeb2);
            return;
        }
        int n = this.zzacv.zzgg().zzcj(object.name);
        if (n != 0) {
            this.zzacv.zzgg();
            String string2 = zzkd.zza(object.name, 24, true);
            int n2 = object.name != null ? object.name.length() : 0;
            this.zzacv.zzgg().zza(zzeb2.packageName, n, "_ev", string2, n2);
            return;
        }
        n = this.zzacv.zzgg().zzi(object.name, object.getValue());
        if (n != 0) {
            this.zzacv.zzgg();
            String string3 = zzkd.zza(object.name, 24, true);
            object = object.getValue();
            int n3 = object != null && (object instanceof String || object instanceof CharSequence) ? String.valueOf(object).length() : 0;
            this.zzacv.zzgg().zza(zzeb2.packageName, n, "_ev", string3, n3);
            return;
        }
        Object object2 = this.zzacv.zzgg().zzj(object.name, object.getValue());
        if (object2 == null) {
            return;
        }
        object = new zzkc(zzeb2.packageName, object.origin, object.name, object.zzast, object2);
        this.zzacv.zzgi().zzjb().zze("Setting user property", this.zzacv.zzgf().zzbo(object.name), object2);
        this.zzjh().beginTransaction();
        try {
            this.zzg(zzeb2);
            boolean bl = this.zzjh().zza((zzkc)object);
            this.zzjh().setTransactionSuccessful();
            if (bl) {
                this.zzacv.zzgi().zzjb().zze("User property set", this.zzacv.zzgf().zzbo(object.name), object.value);
            } else {
                this.zzacv.zzgi().zziv().zze("Too many unique user properties are set. Ignoring user property", this.zzacv.zzgf().zzbo(object.name), object.value);
                this.zzacv.zzgg().zza(zzeb2.packageName, 9, null, null, 0);
            }
            return;
        }
        finally {
            this.zzjh().endTransaction();
        }
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive exception aggregation
     */
    @WorkerThread
    @VisibleForTesting
    final void zzb(String var1_1, int var2_4, Throwable var3_5, byte[] var4_6, Map<String, List<String>> var5_7) {
        block26 : {
            block27 : {
                block25 : {
                    block29 : {
                        block23 : {
                            block24 : {
                                this.zzab();
                                this.zzlc();
                                Preconditions.checkNotEmpty((String)var1_1);
                                var9_8 = var4_6;
                                if (var4_6 != null) ** GOTO lbl8
                                var9_8 = new byte[]{};
lbl8: // 2 sources:
                                this.zzacv.zzgi().zzjc().zzg("onConfigFetched. Response size", var9_8.length);
                                this.zzjh().beginTransaction();
                                var4_6 = this.zzjh().zzbf((String)var1_1);
                                var7_9 = true;
                                if (var2_4 != 200 && var2_4 != 204 && var2_4 != 304) break block23;
lbl15: // 2 sources:
                                if (var4_6 != null) break block29;
                                this.zzacv.zzgi().zziy().zzg("App does not exist in onConfigFetched. appId", zzfi.zzbp((String)var1_1));
                                ** GOTO lbl71
lbl19: // 1 sources:
                                var4_6.zzy(this.zzacv.zzbt().currentTimeMillis());
                                this.zzjh().zza((zzea)var4_6);
                                this.zzacv.zzgi().zzjc().zze("Fetching config failed. code, error", var2_4, var3_5);
                                this.zzky().zzbz((String)var1_1);
                                this.zzacv.zzgj().zzalu.set(this.zzacv.zzbt().currentTimeMillis());
                                var6_10 = var7_9;
                                if (var2_4 == 503) break block24;
                                if (var2_4 != 429) break block25;
                                var6_10 = var7_9;
                            }
lbl29: // 2 sources:
                            if (!var6_10) ** GOTO lbl32
                            this.zzacv.zzgj().zzalv.set(this.zzacv.zzbt().currentTimeMillis());
lbl32: // 3 sources:
                            do {
                                this.zzlg();
                                ** GOTO lbl71
                                break;
                            } while (true);
lbl35: // 1 sources:
                            while (var5_7 != null) {
                                var3_5 = var5_7.get("Last-Modified");
lbl37: // 2 sources:
                                do {
                                    var3_5 = var3_5 != null && var3_5.size() > 0 ? var3_5.get(0) : null;
                                    break;
                                } while (true);
                                break block26;
                            }
                            break block27;
lbl41: // 1 sources:
                            var8_11 = this.zzky().zza((String)var1_1, var9_8, (String)var3_5);
                            if (var8_11) ** GOTO lbl59
                            var1_1 = this.zzjh();
lbl45: // 3 sources:
                            do {
                                var1_1.endTransaction();
                                this.zzase = false;
                                this.zzlh();
                                return;
                                break;
                            } while (true);
lbl50: // 1 sources:
                            do {
                                block30 : {
                                    block28 : {
                                        if (this.zzky().zzbx((String)var1_1) != null || (var8_12 = this.zzky().zza((String)var1_1, null, null))) break block28;
                                        {
                                            catch (Throwable var1_2) {
                                                this.zzjh().endTransaction();
                                                throw var1_2;
                                            }
                                        }
                                        var1_1 = this.zzjh();
                                        ** GOTO lbl45
                                    }
                                    var4_6.zzx(this.zzacv.zzbt().currentTimeMillis());
                                    this.zzjh().zza((zzea)var4_6);
                                    if (var2_4 != 404) ** GOTO lbl67
                                    this.zzacv.zzgi().zziz().zzg("Config not found. Using empty config. appId", var1_1);
                                    break block30;
lbl67: // 1 sources:
                                    this.zzacv.zzgi().zzjc().zze("Successfully fetched config. Got network response. code, size", var2_4, var9_8.length);
                                }
                                if (!this.zzkz().zzex() || !this.zzlf()) ** continue;
                                this.zzle();
lbl71: // 3 sources:
                                this.zzjh().setTransactionSuccessful();
                                try {
                                    var1_1 = this.zzjh();
                                    ** continue;
                                }
                                catch (Throwable var1_3) {
                                    ** continue;
                                }
lbl75: // 1 sources:
                                do {
                                    this.zzase = false;
                                    this.zzlh();
                                    throw var1_3;
                                    break;
                                } while (true);
                                break;
                            } while (true);
                            if (var3_5 != null) break block23;
                            var6_10 = true;
                            ** GOTO lbl15
                        }
                        var6_10 = false;
                        ** GOTO lbl15
                    }
                    if (!var6_10 && var2_4 != 404) ** GOTO lbl19
                    ** GOTO lbl35
                }
                var6_10 = false;
                ** GOTO lbl29
            }
            var3_5 = null;
            ** while (true)
        }
        if (var2_4 != 404 && var2_4 != 304) ** GOTO lbl41
        ** while (true)
    }

    @Override
    public final Clock zzbt() {
        return this.zzacv.zzbt();
    }

    @WorkerThread
    final void zzc(zzef zzef2, zzeb zzeb2) {
        Preconditions.checkNotNull(zzef2);
        Preconditions.checkNotEmpty(zzef2.packageName);
        Preconditions.checkNotNull(zzef2.zzage);
        Preconditions.checkNotEmpty(zzef2.zzage.name);
        this.zzab();
        this.zzlc();
        if (TextUtils.isEmpty((CharSequence)zzeb2.zzafa)) {
            return;
        }
        if (!zzeb2.zzafk) {
            this.zzg(zzeb2);
            return;
        }
        this.zzjh().beginTransaction();
        try {
            this.zzg(zzeb2);
            zzef zzef3 = this.zzjh().zzi(zzef2.packageName, zzef2.zzage.name);
            if (zzef3 != null) {
                this.zzacv.zzgi().zzjb().zze("Removing conditional user property", zzef2.packageName, this.zzacv.zzgf().zzbo(zzef2.zzage.name));
                this.zzjh().zzj(zzef2.packageName, zzef2.zzage.name);
                if (zzef3.active) {
                    this.zzjh().zzg(zzef2.packageName, zzef2.zzage.name);
                }
                if (zzef2.zzagh != null) {
                    Bundle bundle = null;
                    if (zzef2.zzagh.zzahg != null) {
                        bundle = zzef2.zzagh.zzahg.zzin();
                    }
                    this.zzc(this.zzacv.zzgg().zza(zzef2.packageName, zzef2.zzagh.name, bundle, zzef3.origin, zzef2.zzagh.zzahr, true, false), zzeb2);
                }
            } else {
                this.zzacv.zzgi().zziy().zze("Conditional user property doesn't exist", zzfi.zzbp(zzef2.packageName), this.zzacv.zzgf().zzbo(zzef2.zzage.name));
            }
            this.zzjh().setTransactionSuccessful();
            return;
        }
        finally {
            this.zzjh().endTransaction();
        }
    }

    @WorkerThread
    final void zzc(zzex zzex2, String string2) {
        zzea zzea2 = this.zzjh().zzbf(string2);
        if (zzea2 != null && !TextUtils.isEmpty((CharSequence)zzea2.zzag())) {
            Boolean bl = this.zzc(zzea2);
            if (bl == null) {
                if (!"_ui".equals(zzex2.name)) {
                    this.zzacv.zzgi().zziy().zzg("Could not find package. appId", zzfi.zzbp(string2));
                }
            } else if (!bl.booleanValue()) {
                this.zzacv.zzgi().zziv().zzg("App version does not match; dropping event. appId", zzfi.zzbp(string2));
                return;
            }
            this.zzb(zzex2, new zzeb(string2, zzea2.getGmpAppId(), zzea2.zzag(), zzea2.zzgu(), zzea2.zzgv(), zzea2.zzgw(), zzea2.zzgx(), null, zzea2.isMeasurementEnabled(), false, zzea2.zzgr(), zzea2.zzhk(), 0L, 0, zzea2.zzhl(), zzea2.zzhm(), false));
            return;
        }
        this.zzacv.zzgi().zzjb().zzg("No app data available; dropping event", string2);
    }

    @WorkerThread
    final void zzc(zzka zzka2, zzeb zzeb2) {
        this.zzab();
        this.zzlc();
        if (TextUtils.isEmpty((CharSequence)zzeb2.zzafa)) {
            return;
        }
        if (!zzeb2.zzafk) {
            this.zzg(zzeb2);
            return;
        }
        this.zzacv.zzgi().zzjb().zzg("Removing user property", this.zzacv.zzgf().zzbo(zzka2.name));
        this.zzjh().beginTransaction();
        try {
            this.zzg(zzeb2);
            this.zzjh().zzg(zzeb2.packageName, zzka2.name);
            this.zzjh().setTransactionSuccessful();
            this.zzacv.zzgi().zzjb().zzg("User property removed", this.zzacv.zzgf().zzbo(zzka2.name));
            return;
        }
        finally {
            this.zzjh().endTransaction();
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @WorkerThread
    @VisibleForTesting
    final void zzd(zzeb zzeb2) {
        if (this.zzasj != null) {
            this.zzask = new ArrayList<Long>();
            this.zzask.addAll(this.zzasj);
        }
        Object object = this.zzjh();
        String string2 = zzeb2.packageName;
        Preconditions.checkNotEmpty(string2);
        object.zzab();
        object.zzch();
        SQLiteDatabase sQLiteDatabase = object.getWritableDatabase();
        String[] arrstring = new String[]{string2};
        try {
            int n = sQLiteDatabase.delete("apps", "app_id=?", arrstring) + 0 + sQLiteDatabase.delete("events", "app_id=?", arrstring) + sQLiteDatabase.delete("user_attributes", "app_id=?", arrstring) + sQLiteDatabase.delete("conditional_properties", "app_id=?", arrstring) + sQLiteDatabase.delete("raw_events", "app_id=?", arrstring) + sQLiteDatabase.delete("raw_events_metadata", "app_id=?", arrstring) + sQLiteDatabase.delete("queue", "app_id=?", arrstring) + sQLiteDatabase.delete("audience_filter_values", "app_id=?", arrstring) + sQLiteDatabase.delete("main_event_params", "app_id=?", arrstring);
            if (n > 0) {
                object.zzgi().zzjc().zze("Reset analytics data. app, records", string2, n);
            }
        }
        catch (SQLiteException sQLiteException) {
            object.zzgi().zziv().zze("Error resetting analytics data. appId, error", zzfi.zzbp(string2), (Object)sQLiteException);
        }
        object = this.zza(this.zzacv.getContext(), zzeb2.packageName, zzeb2.zzafa, zzeb2.zzafk, zzeb2.zzafm, zzeb2.zzafn, zzeb2.zzaga);
        if (!this.zzacv.zzgk().zzbc(zzeb2.packageName) || zzeb2.zzafk) {
            this.zzf((zzeb)object);
        }
    }

    final void zze(zzeb zzeb2) {
        this.zzab();
        this.zzlc();
        Preconditions.checkNotEmpty(zzeb2.packageName);
        this.zzg(zzeb2);
    }

    @WorkerThread
    final void zze(zzef zzef2) {
        zzeb zzeb2 = this.zzce(zzef2.packageName);
        if (zzeb2 != null) {
            this.zzb(zzef2, zzeb2);
        }
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    @WorkerThread
    final void zzf(zzeb var1_1) {
        block56 : {
            block55 : {
                block51 : {
                    block54 : {
                        block53 : {
                            block52 : {
                                block50 : {
                                    block47 : {
                                        block49 : {
                                            block48 : {
                                                block45 : {
                                                    this.zzab();
                                                    this.zzlc();
                                                    Preconditions.checkNotNull(var1_1);
                                                    Preconditions.checkNotEmpty(var1_1.packageName);
                                                    if (TextUtils.isEmpty((CharSequence)var1_1.zzafa)) {
                                                        return;
                                                    }
                                                    var10_3 = this.zzjh().zzbf(var1_1.packageName);
                                                    if (var10_3 != null && TextUtils.isEmpty((CharSequence)var10_3.getGmpAppId()) && !TextUtils.isEmpty((CharSequence)var1_1.zzafa)) {
                                                        var10_3.zzx(0L);
                                                        this.zzjh().zza((zzea)var10_3);
                                                        this.zzky().zzca(var1_1.packageName);
                                                    }
                                                    if (!var1_1.zzafk) {
                                                        this.zzg(var1_1);
                                                        return;
                                                    }
                                                    var4_7 = var6_6 = var1_1.zzaga;
                                                    if (var6_6 == 0L) {
                                                        var4_7 = this.zzacv.zzbt().currentTimeMillis();
                                                    }
                                                    var2_9 = var3_8 = var1_1.zzagb;
                                                    if (var3_8 != 0) {
                                                        var2_9 = var3_8;
                                                        if (var3_8 != 1) {
                                                            this.zzacv.zzgi().zziy().zze("Incorrect app type, assuming installed app. appId, appType", zzfi.zzbp(var1_1.packageName), var3_8);
                                                            var2_9 = 0;
                                                        }
                                                    }
                                                    this.zzjh().beginTransaction();
                                                    try {
                                                        var10_3 = var11_10 = this.zzjh().zzbf(var1_1.packageName);
                                                        if (var11_10 == null) break block45;
                                                        var10_3 = var11_10;
                                                        if (var11_10.getGmpAppId() == null) break block45;
                                                        var10_3 = var11_10;
                                                        if (var11_10.getGmpAppId().equals(var1_1.zzafa)) break block45;
                                                        this.zzacv.zzgi().zziy().zzg("New GMP App Id passed in. Removing cached database data. appId", zzfi.zzbp(var11_10.zzah()));
                                                        var10_3 = this.zzjh();
                                                        var11_10 = var11_10.zzah();
                                                        var10_3.zzch();
                                                        var10_3.zzab();
                                                        Preconditions.checkNotEmpty((String)var11_10);
                                                        var12_11 = var10_3.getWritableDatabase();
                                                        var13_13 = new String[]{var11_10};
                                                        try {
                                                            var3_8 = var12_11.delete("events", "app_id=?", var13_13) + 0 + var12_11.delete("user_attributes", "app_id=?", var13_13) + var12_11.delete("conditional_properties", "app_id=?", var13_13) + var12_11.delete("apps", "app_id=?", var13_13) + var12_11.delete("raw_events", "app_id=?", var13_13) + var12_11.delete("raw_events_metadata", "app_id=?", var13_13) + var12_11.delete("event_filters", "app_id=?", var13_13) + var12_11.delete("property_filters", "app_id=?", var13_13) + var12_11.delete("audience_filter_values", "app_id=?", var13_13);
                                                            if (var3_8 > 0) {
                                                                var10_3.zzgi().zzjc().zze("Deleted application data. app, records", var11_10, var3_8);
                                                            }
                                                        }
                                                        catch (SQLiteException var12_12) {
                                                            var10_3.zzgi().zziv().zze("Error deleting application data. appId, error", zzfi.zzbp((String)var11_10), (Object)var12_12);
                                                        }
                                                    }
                                                    catch (Throwable var1_2) {
                                                        this.zzjh().endTransaction();
                                                        throw var1_2;
                                                    }
                                                    var10_3 = null;
                                                }
                                                if (var10_3 == null) break block47;
                                                if (var10_3.zzgu() == Integer.MIN_VALUE) break block48;
                                                if (var10_3.zzgu() == var1_1.zzafg) break block47;
                                                var11_10 = new Bundle();
                                                var11_10.putString("_pv", var10_3.zzag());
                                                var10_3 = new zzex("_au", new zzeu((Bundle)var11_10), "auto", var4_7);
                                                break block49;
                                            }
                                            if (var10_3.zzag() == null || var10_3.zzag().equals(var1_1.zztg)) break block47;
                                            var11_10 = new Bundle();
                                            var11_10.putString("_pv", var10_3.zzag());
                                            var10_3 = new zzex("_au", new zzeu((Bundle)var11_10), "auto", var4_7);
                                        }
                                        this.zzb((zzex)var10_3, var1_1);
                                    }
                                    this.zzg(var1_1);
                                    if (var2_9 != 0) break block50;
                                    var10_3 = this.zzjh();
                                    var11_10 = var1_1.packageName;
                                    var12_11 = "_f";
                                    ** GOTO lbl82
                                }
                                if (var2_9 == 1) {
                                    var10_3 = this.zzjh();
                                    var11_10 = var1_1.packageName;
                                    var12_11 = "_v";
lbl82: // 2 sources:
                                    var10_3 = var10_3.zzf((String)var11_10, var12_11);
                                } else {
                                    var10_3 = null;
                                }
                                if (var10_3 != null) break block51;
                                var6_6 = 3600000L * (var4_7 / 3600000L + 1L);
                                if (var2_9 != 0) break block52;
                                var8_14 = 1L;
                                this.zzb(new zzka("_fot", var4_7, var6_6, "auto"), var1_1);
                                this.zzab();
                                this.zzlc();
                                var11_10 = new Bundle();
                                var11_10.putLong("_c", var8_14);
                                var11_10.putLong("_r", var8_14);
                                var11_10.putLong("_uwa", 0L);
                                var11_10.putLong("_pfo", 0L);
                                var11_10.putLong("_sys", 0L);
                                var11_10.putLong("_sysu", 0L);
                                if (this.zzacv.zzgk().zzbc(var1_1.packageName) && var1_1.zzagc) {
                                    var11_10.putLong("_dac", var8_14);
                                }
                                if (this.zzacv.getContext().getPackageManager() == null) {
                                    this.zzacv.zzgi().zziv().zzg("PackageManager is null, first open report might be inaccurate. appId", zzfi.zzbp(var1_1.packageName));
                                } else {
                                    try {
                                        var10_3 = Wrappers.packageManager(this.zzacv.getContext()).getPackageInfo(var1_1.packageName, 0);
                                    }
                                    catch (PackageManager.NameNotFoundException var10_4) {
                                        this.zzacv.zzgi().zziv().zze("Package info is null, first open report might be inaccurate. appId", zzfi.zzbp(var1_1.packageName), (Object)var10_4);
                                        var10_3 = null;
                                    }
                                    if (var10_3 != null && var10_3.firstInstallTime != 0L) {
                                        if (var10_3.firstInstallTime != var10_3.lastUpdateTime) {
                                            var11_10.putLong("_uwa", var8_14);
                                            var2_9 = 0;
                                        } else {
                                            var2_9 = 1;
                                        }
                                        var6_6 = var2_9 != 0 ? var8_14 : 0L;
                                        this.zzb(new zzka("_fi", var4_7, var6_6, "auto"), var1_1);
                                    }
                                    try {
                                        var10_3 = Wrappers.packageManager(this.zzacv.getContext()).getApplicationInfo(var1_1.packageName, 0);
                                    }
                                    catch (PackageManager.NameNotFoundException var10_5) {
                                        this.zzacv.zzgi().zziv().zze("Application info is null, first open report might be inaccurate. appId", zzfi.zzbp(var1_1.packageName), (Object)var10_5);
                                        var10_3 = null;
                                    }
                                    if (var10_3 != null) {
                                        if ((var10_3.flags & 1) != 0) {
                                            var11_10.putLong("_sys", var8_14);
                                        }
                                        if ((var10_3.flags & 128) != 0) {
                                            var11_10.putLong("_sysu", var8_14);
                                        }
                                    }
                                }
                                var10_3 = this.zzjh();
                                var12_11 = var1_1.packageName;
                                Preconditions.checkNotEmpty(var12_11);
                                var10_3.zzab();
                                var10_3.zzch();
                                var6_6 = var10_3.zzm(var12_11, "first_open_count");
                                if (var6_6 >= 0L) {
                                    var11_10.putLong("_pfo", var6_6);
                                }
                                var10_3 = new zzex("_f", new zzeu((Bundle)var11_10), "auto", var4_7);
                                break block53;
                            }
                            var8_15 = 1L;
                            if (var2_9 != 1) break block54;
                            this.zzb(new zzka("_fvt", var4_7, var6_6, "auto"), var1_1);
                            this.zzab();
                            this.zzlc();
                            var10_3 = new Bundle();
                            var10_3.putLong("_c", var8_15);
                            var10_3.putLong("_r", var8_15);
                            if (this.zzacv.zzgk().zzbc(var1_1.packageName) && var1_1.zzagc) {
                                var10_3.putLong("_dac", var8_15);
                            }
                            var10_3 = new zzex("_v", new zzeu((Bundle)var10_3), "auto", var4_7);
                        }
                        this.zzb((zzex)var10_3, var1_1);
                    }
                    var10_3 = new Bundle();
                    var10_3.putLong("_et", 1L);
                    var10_3 = new zzex("_e", new zzeu((Bundle)var10_3), "auto", var4_7);
                    break block55;
                }
                if (!var1_1.zzafz) break block56;
                var10_3 = new zzex("_cd", new zzeu(new Bundle()), "auto", var4_7);
            }
            this.zzb((zzex)var10_3, var1_1);
        }
        this.zzjh().setTransactionSuccessful();
        this.zzjh().endTransaction();
    }

    @WorkerThread
    final void zzf(zzef zzef2) {
        zzeb zzeb2 = this.zzce(zzef2.packageName);
        if (zzeb2 != null) {
            this.zzc(zzef2, zzeb2);
        }
    }

    @WorkerThread
    final void zzg(Runnable runnable) {
        this.zzab();
        if (this.zzasb == null) {
            this.zzasb = new ArrayList<Runnable>();
        }
        this.zzasb.add(runnable);
    }

    public final zzfg zzgf() {
        return this.zzacv.zzgf();
    }

    public final zzkd zzgg() {
        return this.zzacv.zzgg();
    }

    @Override
    public final zzgi zzgh() {
        return this.zzacv.zzgh();
    }

    @Override
    public final zzfi zzgi() {
        return this.zzacv.zzgi();
    }

    public final zzeh zzgk() {
        return this.zzacv.zzgk();
    }

    @Override
    public final zzee zzgl() {
        return this.zzacv.zzgl();
    }

    final String zzh(zzeb zzeb2) {
        Object object = this.zzacv.zzgh().zzb(new zzjx(this, zzeb2));
        try {
            object = (String)object.get(30000L, TimeUnit.MILLISECONDS);
            return object;
        }
        catch (InterruptedException | ExecutionException | TimeoutException exception) {
            this.zzacv.zzgi().zziv().zze("Failed to get app instance id. appId", zzfi.zzbp(zzeb2.packageName), exception);
            return null;
        }
    }

    public final zzjz zzjf() {
        zzjt.zza(this.zzary);
        return this.zzary;
    }

    public final zzed zzjg() {
        zzjt.zza(this.zzarx);
        return this.zzarx;
    }

    public final zzek zzjh() {
        zzjt.zza(this.zzaru);
        return this.zzaru;
    }

    public final zzfm zzkz() {
        zzjt.zza(this.zzart);
        return this.zzart;
    }

    final void zzlc() {
        if (!this.zzvn) {
            throw new IllegalStateException("UploadController is not initialized");
        }
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    @WorkerThread
    final void zzle() {
        block35 : {
            block26 : {
                block27 : {
                    block28 : {
                        this.zzab();
                        this.zzlc();
                        this.zzasg = true;
                        try {
                            block34 : {
                                block32 : {
                                    block33 : {
                                        block30 : {
                                            block31 : {
                                                block29 : {
                                                    this.zzacv.zzgl();
                                                    var7_1 = this.zzacv.zzga().zzkr();
                                                    if (var7_1 != null) break block29;
                                                    var7_1 = this.zzacv.zzgi().zziy();
                                                    var8_4 = "Upload data called on the client side before use of service was decided";
                                                    break block30;
                                                }
                                                if (!var7_1.booleanValue()) break block31;
                                                var7_1 = this.zzacv.zzgi().zziv();
                                                var8_4 = "Upload called in the client side when service should be used";
                                                break block30;
                                            }
                                            if (this.zzasa > 0L) break block32;
                                            this.zzab();
                                            var1_6 = this.zzasj != null ? 1 : 0;
                                            if (var1_6 == 0) break block33;
                                            var7_1 = this.zzacv.zzgi().zzjc();
                                            var8_4 = "Uploading requested multiple times";
                                        }
                                        var7_1.log(var8_4);
                                        break block26;
                                    }
                                    if (this.zzkz().zzex()) break block34;
                                    this.zzacv.zzgi().zzjc().log("Network not connected, ignoring upload request");
                                }
                                this.zzlg();
                                break block26;
                            }
                            var3_7 = this.zzacv.zzbt().currentTimeMillis();
                            var5_8 = zzeh.zzhr();
                            var9_9 = null;
                            this.zzd(null, var3_7 - var5_8);
                            var5_8 = this.zzacv.zzgj().zzalt.get();
                            if (var5_8 != 0L) {
                                this.zzacv.zzgi().zzjb().zzg("Uploading events. Elapsed time since last upload attempt (ms)", Math.abs(var3_7 - var5_8));
                            }
                            if (!TextUtils.isEmpty((CharSequence)(var11_10 = this.zzjh().zzhv()))) {
                                if (this.zzasl == -1L) {
                                    this.zzasl = this.zzjh().zzic();
                                }
                                var1_6 = this.zzacv.zzgk().zzb(var11_10, zzez.zzaik);
                                var2_11 = Math.max(0, this.zzacv.zzgk().zzb(var11_10, zzez.zzail));
                                var10_12 = this.zzjh().zzb(var11_10, var1_6, var2_11);
                                if (var10_12.isEmpty()) break block26;
                                var7_1 = var10_12.iterator();
                                while (var7_1.hasNext()) {
                                    var8_5 = (zzku)var7_1.next().first;
                                    if (TextUtils.isEmpty((CharSequence)var8_5.zzavv)) continue;
                                    var8_5 = var8_5.zzavv;
                                    break block27;
                                }
                                break block28;
                            }
                            this.zzasl = -1L;
                            var7_1 = this.zzjh().zzag(var3_7 - zzeh.zzhr());
                            if (TextUtils.isEmpty((CharSequence)var7_1) || (var7_1 = this.zzjh().zzbf((String)var7_1)) == null) break block26;
                            this.zzb((zzea)var7_1);
                            break block26;
                        }
                        catch (Throwable var7_2) {
                            this.zzasg = false;
                            this.zzlh();
                            throw var7_2;
                        }
                    }
                    var8_5 = null;
                }
                var7_1 = var10_12;
                if (var8_5 == null) ** GOTO lbl82
                break block35;
            }
lbl70: // 3 sources:
            do {
                this.zzasg = false;
                this.zzlh();
                return;
                break;
            } while (true);
        }
        var1_6 = 0;
        do {
            block37 : {
                block36 : {
                    var7_1 = var10_12;
                    if (var1_6 >= var10_12.size()) break block36;
                    var7_1 = (zzku)((Pair)var10_12.get((int)var1_6)).first;
                    if (TextUtils.isEmpty((CharSequence)var7_1.zzavv) || var7_1.zzavv.equals(var8_5)) break block37;
                    var7_1 = var10_12.subList(0, var1_6);
                }
                var10_12 = new zzkt();
                var10_12.zzavf = new zzku[var7_1.size()];
                var8_5 = new ArrayList<Long>(var7_1.size());
                var1_6 = zzeh.zzht() != false && this.zzacv.zzgk().zzau(var11_10) != false ? 1 : 0;
            }
            ++var1_6;
        } while (true);
        var2_11 = 0;
        do {
            block39 : {
                block38 : {
                    if (var2_11 >= var10_12.zzavf.length) break block38;
                    var10_12.zzavf[var2_11] = (zzku)((Pair)var7_1.get((int)var2_11)).first;
                    var8_5.add((Long)((Pair)var7_1.get((int)var2_11)).second);
                    var10_12.zzavf[var2_11].zzavu = this.zzacv.zzgk().zzgw();
                    var10_12.zzavf[var2_11].zzavk = var3_7;
                    var12_13 /* !! */  = var10_12.zzavf[var2_11];
                    this.zzacv.zzgl();
                    var12_13 /* !! */ .zzavz = false;
                    if (var1_6 == 0) {
                        var10_12.zzavf[var2_11].zzawh = null;
                    }
                    break block39;
                }
                var7_1 = var9_9;
                if (this.zzacv.zzgi().isLoggable(2)) {
                    var7_1 = this.zzjf().zzb((zzkt)var10_12);
                }
                var12_13 /* !! */  = this.zzjf().zza((zzkt)var10_12);
                var9_9 = zzez.zzaiu.get();
                try {
                    var13_14 = new URL(var9_9);
                    Preconditions.checkArgument(var8_5.isEmpty() ^ true);
                    if (this.zzasj != null) {
                        this.zzacv.zzgi().zziv().log("Set uploading progress before finishing the previous upload");
                    } else {
                        this.zzasj = new ArrayList<Long>((Collection<Long>)var8_5);
                    }
                    this.zzacv.zzgj().zzalu.set(var3_7);
                    var8_5 = "?";
                    if (var10_12.zzavf.length > 0) {
                        var8_5 = var10_12.zzavf[0].zzth;
                    }
                    this.zzacv.zzgi().zzjc().zzd("Uploading data. app, uncompressed size, data", var8_5, var12_13 /* !! */ .length, var7_1);
                    this.zzasf = true;
                    var7_1 = this.zzkz();
                    var8_5 = new zzjv(this, var11_10);
                    var7_1.zzab();
                    var7_1.zzch();
                    Preconditions.checkNotNull(var13_14);
                    Preconditions.checkNotNull(var12_13 /* !! */ );
                    Preconditions.checkNotNull(var8_5);
                    var7_1.zzgh().zzd(new zzfq((zzfm)var7_1, var11_10, var13_14, var12_13 /* !! */ , null, (zzfo)var8_5));
                    ** GOTO lbl70
                }
                catch (MalformedURLException var7_3) {}
                this.zzacv.zzgi().zziv().zze("Failed to parse upload URL. Not uploading. appId", zzfi.zzbp(var11_10), var9_9);
                ** continue;
            }
            ++var2_11;
        } while (true);
    }

    /*
     * Enabled aggressive block sorting
     */
    @WorkerThread
    final void zzlj() {
        block5 : {
            block6 : {
                zzfk zzfk2;
                int n;
                String string2;
                int n2;
                block8 : {
                    block7 : {
                        this.zzab();
                        this.zzlc();
                        if (this.zzarz) break block5;
                        this.zzacv.zzgi().zzja().log("This instance being marked as an uploader");
                        this.zzab();
                        this.zzlc();
                        if (!this.zzlk() || !this.zzli()) break block6;
                        n = this.zza(this.zzasi);
                        n2 = this.zzacv.zzfz().zzis();
                        this.zzab();
                        if (n <= n2) break block7;
                        zzfk2 = this.zzacv.zzgi().zziv();
                        string2 = "Panic: can't downgrade version. Previous, current version";
                        break block8;
                    }
                    if (n >= n2) break block6;
                    if (this.zza(n2, this.zzasi)) {
                        zzfk2 = this.zzacv.zzgi().zzjc();
                        string2 = "Storage version upgraded. Previous, current version";
                    } else {
                        zzfk2 = this.zzacv.zzgi().zziv();
                        string2 = "Storage version upgrade failed. Previous, current version";
                    }
                }
                zzfk2.zze(string2, n, n2);
            }
            this.zzarz = true;
            this.zzlg();
        }
    }

    final void zzll() {
        ++this.zzasd;
    }

    final zzgn zzlm() {
        return this.zzacv;
    }

    final void zzm(boolean bl) {
        this.zzlg();
    }

    final class zza
    implements zzem {
        zzku zzasp;
        List<Long> zzasq;
        List<zzkr> zzasr;
        private long zzass;

        private zza() {
        }

        /* synthetic */ zza(zzju zzju2) {
            this();
        }

        private static long zza(zzkr zzkr2) {
            return zzkr2.zzavb / 1000L / 60L / 60L;
        }

        @Override
        public final boolean zza(long l, zzkr zzkr2) {
            Preconditions.checkNotNull(zzkr2);
            if (this.zzasr == null) {
                this.zzasr = new ArrayList<zzkr>();
            }
            if (this.zzasq == null) {
                this.zzasq = new ArrayList<Long>();
            }
            if (this.zzasr.size() > 0 && zza.zza(this.zzasr.get(0)) != zza.zza(zzkr2)) {
                return false;
            }
            long l2 = this.zzass + (long)zzkr2.zzwb();
            if (l2 >= (long)Math.max(0, zzez.zzaim.get())) {
                return false;
            }
            this.zzass = l2;
            this.zzasr.add(zzkr2);
            this.zzasq.add(l);
            if (this.zzasr.size() >= Math.max(1, zzez.zzain.get())) {
                return false;
            }
            return true;
        }

        @Override
        public final void zzb(zzku zzku2) {
            Preconditions.checkNotNull(zzku2);
            this.zzasp = zzku2;
        }
    }

}

