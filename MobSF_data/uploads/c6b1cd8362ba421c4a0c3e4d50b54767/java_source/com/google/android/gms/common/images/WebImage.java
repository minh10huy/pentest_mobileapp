/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.net.Uri
 *  android.os.Parcel
 *  android.os.Parcelable
 *  android.os.Parcelable$Creator
 *  org.json.JSONException
 *  org.json.JSONObject
 */
package com.google.android.gms.common.images;

import android.net.Uri;
import android.os.Parcel;
import android.os.Parcelable;
import com.google.android.gms.common.images.WebImageCreator;
import com.google.android.gms.common.internal.Objects;
import com.google.android.gms.common.internal.safeparcel.AbstractSafeParcelable;
import com.google.android.gms.common.internal.safeparcel.SafeParcelWriter;
import com.google.android.gms.common.internal.safeparcel.SafeParcelable;
import java.util.Locale;
import org.json.JSONException;
import org.json.JSONObject;

@SafeParcelable.Class(creator="WebImageCreator")
public final class WebImage
extends AbstractSafeParcelable {
    public static final Parcelable.Creator<WebImage> CREATOR = new WebImageCreator();
    @SafeParcelable.VersionField(id=1)
    private final int zzal;
    @SafeParcelable.Field(getter="getWidth", id=3)
    private final int zzps;
    @SafeParcelable.Field(getter="getHeight", id=4)
    private final int zzpt;
    @SafeParcelable.Field(getter="getUrl", id=2)
    private final Uri zzpu;

    @SafeParcelable.Constructor
    WebImage(@SafeParcelable.Param(id=1) int n, @SafeParcelable.Param(id=2) Uri uri, @SafeParcelable.Param(id=3) int n2, @SafeParcelable.Param(id=4) int n3) {
        this.zzal = n;
        this.zzpu = uri;
        this.zzps = n2;
        this.zzpt = n3;
    }

    public WebImage(Uri uri) throws IllegalArgumentException {
        this(uri, 0, 0);
    }

    public WebImage(Uri uri, int n, int n2) throws IllegalArgumentException {
        this(1, uri, n, n2);
        if (uri == null) {
            throw new IllegalArgumentException("url cannot be null");
        }
        if (n >= 0 && n2 >= 0) {
            return;
        }
        throw new IllegalArgumentException("width and height must not be negative");
    }

    public WebImage(JSONObject jSONObject) throws IllegalArgumentException {
        this(WebImage.zza(jSONObject), jSONObject.optInt("width", 0), jSONObject.optInt("height", 0));
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    private static Uri zza(JSONObject jSONObject) {
        if (!jSONObject.has("url")) return null;
        try {
            return Uri.parse((String)jSONObject.getString("url"));
        }
        catch (JSONException jSONException) {
            return null;
        }
    }

    public final boolean equals(Object object) {
        if (this == object) {
            return true;
        }
        if (object != null) {
            if (!(object instanceof WebImage)) {
                return false;
            }
            object = (WebImage)object;
            if (Objects.equal((Object)this.zzpu, (Object)object.zzpu) && this.zzps == object.zzps && this.zzpt == object.zzpt) {
                return true;
            }
        }
        return false;
    }

    public final int getHeight() {
        return this.zzpt;
    }

    public final Uri getUrl() {
        return this.zzpu;
    }

    public final int getWidth() {
        return this.zzps;
    }

    public final int hashCode() {
        return Objects.hashCode(new Object[]{this.zzpu, this.zzps, this.zzpt});
    }

    public final JSONObject toJson() {
        JSONObject jSONObject = new JSONObject();
        try {
            jSONObject.put("url", (Object)this.zzpu.toString());
            jSONObject.put("width", this.zzps);
            jSONObject.put("height", this.zzpt);
            return jSONObject;
        }
        catch (JSONException jSONException) {
            return jSONObject;
        }
    }

    public final String toString() {
        return String.format(Locale.US, "Image %dx%d %s", this.zzps, this.zzpt, this.zzpu.toString());
    }

    public final void writeToParcel(Parcel parcel, int n) {
        int n2 = SafeParcelWriter.beginObjectHeader(parcel);
        SafeParcelWriter.writeInt(parcel, 1, this.zzal);
        SafeParcelWriter.writeParcelable(parcel, 2, (Parcelable)this.getUrl(), n, false);
        SafeParcelWriter.writeInt(parcel, 3, this.getWidth());
        SafeParcelWriter.writeInt(parcel, 4, this.getHeight());
        SafeParcelWriter.finishObjectHeader(parcel, n2);
    }
}

