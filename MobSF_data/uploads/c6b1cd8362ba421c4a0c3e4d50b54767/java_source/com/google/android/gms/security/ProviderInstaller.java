/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.content.Context
 *  android.content.Intent
 *  android.content.res.Resources
 *  android.content.res.Resources$NotFoundException
 *  android.os.AsyncTask
 *  android.util.Log
 */
package com.google.android.gms.security;

import android.content.Context;
import android.content.Intent;
import android.content.res.Resources;
import android.os.AsyncTask;
import android.util.Log;
import com.google.android.gms.common.GoogleApiAvailabilityLight;
import com.google.android.gms.common.GooglePlayServicesNotAvailableException;
import com.google.android.gms.common.GooglePlayServicesRepairableException;
import com.google.android.gms.common.GooglePlayServicesUtilLight;
import com.google.android.gms.common.internal.Preconditions;
import com.google.android.gms.security.zza;
import java.lang.reflect.Method;

public class ProviderInstaller {
    public static final String PROVIDER_NAME = "GmsCore_OpenSSL";
    private static final Object sLock;
    private static final GoogleApiAvailabilityLight zzacw;
    private static Method zzacx;

    static {
        zzacw = GoogleApiAvailabilityLight.getInstance();
        sLock = new Object();
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Converted monitor instructions to comments
     * Lifted jumps to return sites
     */
    public static void installIfNeeded(Context context) throws GooglePlayServicesRepairableException, GooglePlayServicesNotAvailableException {
        block8 : {
            Preconditions.checkNotNull(context, "Context must not be null");
            zzacw.verifyGooglePlayServicesIsAvailable(context, 11925000);
            try {
                context = GooglePlayServicesUtilLight.getRemoteContext(context);
                if (context != null) break block8;
            }
            catch (Resources.NotFoundException notFoundException) {}
            if (!Log.isLoggable((String)"ProviderInstaller", (int)6)) throw new GooglePlayServicesNotAvailableException(8);
            Log.e((String)"ProviderInstaller", (String)"Failed to get remote context");
            throw new GooglePlayServicesNotAvailableException(8);
        }
        Object object = sLock;
        // MONITORENTER : object
        try {
            if (zzacx == null) {
                zzacx = context.getClassLoader().loadClass("com.google.android.gms.common.security.ProviderInstallerImpl").getMethod("insertProvider", Context.class);
            }
            zzacx.invoke(null, new Object[]{context});
            // MONITOREXIT : object
            return;
        }
        catch (Exception exception) {
            Throwable throwable = exception.getCause();
            if (!Log.isLoggable((String)"ProviderInstaller", (int)6)) throw new GooglePlayServicesNotAvailableException(8);
            String string2 = throwable == null ? exception.getMessage() : throwable.getMessage();
            string2 = String.valueOf(string2);
            string2 = string2.length() != 0 ? "Failed to install provider: ".concat(string2) : new String("Failed to install provider: ");
            Log.e((String)"ProviderInstaller", (String)string2);
            throw new GooglePlayServicesNotAvailableException(8);
        }
        if (!Log.isLoggable((String)"ProviderInstaller", (int)6)) throw new GooglePlayServicesNotAvailableException(8);
        Log.e((String)"ProviderInstaller", (String)"Failed to get remote context - resource not found");
        throw new GooglePlayServicesNotAvailableException(8);
    }

    public static void installIfNeededAsync(Context context, ProviderInstallListener providerInstallListener) {
        Preconditions.checkNotNull(context, "Context must not be null");
        Preconditions.checkNotNull(providerInstallListener, "Listener must not be null");
        Preconditions.checkMainThread("Must be called on the UI thread");
        new zza(context, providerInstallListener).execute((Object[])new Void[0]);
    }

    static /* synthetic */ GoogleApiAvailabilityLight zzdn() {
        return zzacw;
    }

    public static interface ProviderInstallListener {
        public void onProviderInstallFailed(int var1, Intent var2);

        public void onProviderInstalled();
    }

}

