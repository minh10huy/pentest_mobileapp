/*
 * Decompiled with CFR 0_132.
 */
package com.google.android.gms.internal.measurement;

import com.google.android.gms.internal.measurement.zzacj;
import java.lang.reflect.Array;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

public final class zzack {
    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    private static void zza(String object, Object object2, StringBuffer stringBuffer, StringBuffer stringBuffer2) throws IllegalAccessException, InvocationTargetException {
        block17 : {
            block26 : {
                block25 : {
                    block24 : {
                        int n;
                        block21 : {
                            Object object3;
                            int n2;
                            Class<?> class_;
                            int n3;
                            int n4;
                            int n5;
                            Object object4;
                            Object object5;
                            block19 : {
                                block22 : {
                                    block23 : {
                                        block20 : {
                                            block18 : {
                                                if (object2 == null) break block17;
                                                if (!(object2 instanceof zzacj)) break block18;
                                                n2 = stringBuffer.length();
                                                if (object != null) {
                                                    stringBuffer2.append(stringBuffer);
                                                    stringBuffer2.append(zzack.zzfs((String)object));
                                                    stringBuffer2.append(" <\n");
                                                    stringBuffer.append("  ");
                                                }
                                                class_ = object2.getClass();
                                                object4 = class_.getFields();
                                                n5 = ((Field[])object4).length;
                                                break block19;
                                            }
                                            object = zzack.zzfs((String)object);
                                            stringBuffer2.append(stringBuffer);
                                            stringBuffer2.append((String)object);
                                            stringBuffer2.append(": ");
                                            if (!(object2 instanceof String)) break block20;
                                            object = object2 = (String)object2;
                                            if (!object2.startsWith("http")) {
                                                object = object2;
                                                if (object2.length() > 200) {
                                                    object = String.valueOf(object2.substring(0, 200)).concat("[...]");
                                                }
                                            }
                                            n = object.length();
                                            object2 = new StringBuilder(n);
                                            break block21;
                                        }
                                        if (!(object2 instanceof byte[])) break block22;
                                        object = (byte[])object2;
                                        if (object != null) break block23;
                                        object = "\"\"";
                                        break block24;
                                    }
                                    stringBuffer2.append('\"');
                                    break block25;
                                }
                                stringBuffer2.append(object2);
                                break block26;
                            }
                            for (n4 = 0; n4 < n5; ++n4) {
                                Object object6 = object4[n4];
                                n3 = object6.getModifiers();
                                object5 = object6.getName();
                                if ("cachedSize".equals(object5) || (n3 & 1) != 1 || (n3 & 8) == 8 || object5.startsWith("_") || object5.endsWith("_")) continue;
                                object3 = object6.getType();
                                object6 = object6.get(object2);
                                if (object3.isArray() && object3.getComponentType() != Byte.TYPE) {
                                    n3 = object6 == null ? 0 : Array.getLength(object6);
                                    for (int i = 0; i < n3; ++i) {
                                        zzack.zza((String)object5, Array.get(object6, i), stringBuffer, stringBuffer2);
                                    }
                                    continue;
                                }
                                zzack.zza((String)object5, object6, stringBuffer, stringBuffer2);
                            }
                            object5 = class_.getMethods();
                            n3 = ((Method[])object5).length;
                            for (n4 = 0; n4 < n3; ++n4) {
                                object4 = object5[n4].getName();
                                if (!object4.startsWith("set")) continue;
                                object3 = object4.substring(3);
                                try {
                                    object4 = String.valueOf(object3);
                                    object4 = object4.length() != 0 ? "has".concat((String)object4) : new String("has");
                                    object4 = class_.getMethod((String)object4, new Class[0]);
                                    if (!((Boolean)object4.invoke(object2, new Object[0])).booleanValue()) continue;
                                    object4 = String.valueOf(object3);
                                    object4 = object4.length() != 0 ? "get".concat((String)object4) : new String("get");
                                    object4 = class_.getMethod((String)object4, new Class[0]);
                                }
                                catch (NoSuchMethodException noSuchMethodException) {}
                                zzack.zza((String)object3, object4.invoke(object2, new Object[0]), stringBuffer, stringBuffer2);
                            }
                            if (object != null) {
                                stringBuffer.setLength(n2);
                                stringBuffer2.append(stringBuffer);
                                stringBuffer2.append(">\n");
                            }
                            return;
                        }
                        for (int i = 0; i < n; ++i) {
                            char c = object.charAt(i);
                            if (c >= ' ' && c <= '~' && c != '\"' && c != '\'') {
                                object2.append(c);
                                continue;
                            }
                            object2.append(String.format("\\u%04x", c));
                        }
                        object = object2.toString();
                        stringBuffer2.append("\"");
                        stringBuffer2.append((String)object);
                        object = "\"";
                    }
                    stringBuffer2.append((String)object);
                    break block26;
                }
                for (int i = 0; i < ((Object)object).length; ++i) {
                    int n = object[i] & 255;
                    if (n != 92 && n != 34) {
                        if (n < 32 || n >= 127) {
                            stringBuffer2.append(String.format("\\%03o", n));
                            continue;
                        }
                    } else {
                        stringBuffer2.append('\\');
                    }
                    stringBuffer2.append((char)n);
                }
                stringBuffer2.append('\"');
            }
            stringBuffer2.append("\n");
        }
    }

    public static <T extends zzacj> String zzc(T t) {
        if (t == null) {
            return "";
        }
        StringBuffer stringBuffer = new StringBuffer();
        try {
            zzack.zza(null, t, new StringBuffer(), stringBuffer);
            return stringBuffer.toString();
        }
        catch (InvocationTargetException invocationTargetException) {
            String string2 = String.valueOf(invocationTargetException.getMessage());
            if (string2.length() != 0) {
                return "Error printing proto: ".concat(string2);
            }
            return new String("Error printing proto: ");
        }
        catch (IllegalAccessException illegalAccessException) {
            String string3 = String.valueOf(illegalAccessException.getMessage());
            if (string3.length() != 0) {
                return "Error printing proto: ".concat(string3);
            }
            return new String("Error printing proto: ");
        }
    }

    /*
     * Enabled aggressive block sorting
     */
    private static String zzfs(String string2) {
        StringBuffer stringBuffer = new StringBuffer();
        int n = 0;
        while (n < string2.length()) {
            char c;
            block4 : {
                char c2;
                block3 : {
                    c2 = string2.charAt(n);
                    if (n == 0) break block3;
                    c = c2;
                    if (!Character.isUpperCase(c2)) break block4;
                    stringBuffer.append('_');
                }
                c = Character.toLowerCase(c2);
            }
            stringBuffer.append(c);
            ++n;
        }
        return stringBuffer.toString();
    }
}

