/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.content.Context
 *  android.os.Bundle
 */
package com.google.android.gms.internal.measurement;

import android.content.Context;
import android.os.Bundle;
import android.support.annotation.WorkerThread;
import android.support.v4.util.ArrayMap;
import com.google.android.gms.common.internal.Preconditions;
import com.google.android.gms.common.util.Clock;
import com.google.android.gms.internal.measurement.zzdv;
import com.google.android.gms.internal.measurement.zzdw;
import com.google.android.gms.internal.measurement.zzdy;
import com.google.android.gms.internal.measurement.zzee;
import com.google.android.gms.internal.measurement.zzeh;
import com.google.android.gms.internal.measurement.zzer;
import com.google.android.gms.internal.measurement.zzfd;
import com.google.android.gms.internal.measurement.zzfe;
import com.google.android.gms.internal.measurement.zzfg;
import com.google.android.gms.internal.measurement.zzfi;
import com.google.android.gms.internal.measurement.zzfk;
import com.google.android.gms.internal.measurement.zzft;
import com.google.android.gms.internal.measurement.zzgi;
import com.google.android.gms.internal.measurement.zzgn;
import com.google.android.gms.internal.measurement.zzhm;
import com.google.android.gms.internal.measurement.zzig;
import com.google.android.gms.internal.measurement.zzih;
import com.google.android.gms.internal.measurement.zzik;
import com.google.android.gms.internal.measurement.zzjj;
import com.google.android.gms.internal.measurement.zzkd;
import java.util.Map;
import java.util.Set;

public final class zzdu
extends zzdy {
    private final Map<String, Long> zzaeu = new ArrayMap<String, Long>();
    private final Map<String, Integer> zzaev = new ArrayMap<String, Integer>();
    private long zzaew;

    public zzdu(zzgn zzgn2) {
        super(zzgn2);
    }

    @WorkerThread
    private final void zza(long l, zzig zzig2) {
        if (zzig2 == null) {
            this.zzgi().zzjc().log("Not logging ad exposure. No active activity");
            return;
        }
        if (l < 1000L) {
            this.zzgi().zzjc().zzg("Not logging ad exposure. Less than 1000 ms. exposure", l);
            return;
        }
        Bundle bundle = new Bundle();
        bundle.putLong("_xt", l);
        zzih.zza(zzig2, bundle, true);
        this.zzfy().logEvent("am", "_xa", bundle);
    }

    static /* synthetic */ void zza(zzdu zzdu2, long l) {
        zzdu2.zzq(l);
    }

    static /* synthetic */ void zza(zzdu zzdu2, String string2, long l) {
        zzdu2.zza(string2, l);
    }

    @WorkerThread
    private final void zza(String string2, long l) {
        Integer n;
        this.zzfv();
        this.zzab();
        Preconditions.checkNotEmpty(string2);
        if (this.zzaev.isEmpty()) {
            this.zzaew = l;
        }
        if ((n = this.zzaev.get(string2)) != null) {
            this.zzaev.put(string2, n + 1);
            return;
        }
        if (this.zzaev.size() >= 100) {
            this.zzgi().zziy().log("Too many ads visible");
            return;
        }
        this.zzaev.put(string2, 1);
        this.zzaeu.put(string2, l);
    }

    @WorkerThread
    private final void zza(String string2, long l, zzig zzig2) {
        if (zzig2 == null) {
            this.zzgi().zzjc().log("Not logging ad unit exposure. No active activity");
            return;
        }
        if (l < 1000L) {
            this.zzgi().zzjc().zzg("Not logging ad unit exposure. Less than 1000 ms. exposure", l);
            return;
        }
        Bundle bundle = new Bundle();
        bundle.putString("_ai", string2);
        bundle.putLong("_xt", l);
        zzih.zza(zzig2, bundle, true);
        this.zzfy().logEvent("am", "_xu", bundle);
    }

    static /* synthetic */ void zzb(zzdu zzdu2, String string2, long l) {
        zzdu2.zzb(string2, l);
    }

    @WorkerThread
    private final void zzb(String string2, long l) {
        this.zzfv();
        this.zzab();
        Preconditions.checkNotEmpty(string2);
        Number number = this.zzaev.get(string2);
        if (number != null) {
            zzig zzig2 = this.zzgb().zzkn();
            int n = number.intValue() - 1;
            if (n == 0) {
                this.zzaev.remove(string2);
                number = this.zzaeu.get(string2);
                if (number == null) {
                    this.zzgi().zziv().log("First ad unit exposure time was never set");
                } else {
                    long l2 = number.longValue();
                    this.zzaeu.remove(string2);
                    this.zza(string2, l - l2, zzig2);
                }
                if (this.zzaev.isEmpty()) {
                    if (this.zzaew == 0L) {
                        this.zzgi().zziv().log("First ad exposure time was never set");
                        return;
                    }
                    this.zza(l - this.zzaew, zzig2);
                    this.zzaew = 0L;
                }
                return;
            }
            this.zzaev.put(string2, n);
            return;
        }
        this.zzgi().zziv().zzg("Call to endAdUnitExposure for unknown ad unit id", string2);
    }

    @WorkerThread
    private final void zzq(long l) {
        for (String string2 : this.zzaeu.keySet()) {
            this.zzaeu.put(string2, l);
        }
        if (!this.zzaeu.isEmpty()) {
            this.zzaew = l;
        }
    }

    public final void beginAdUnitExposure(String string2) {
        if (string2 != null && string2.length() != 0) {
            long l = this.zzbt().elapsedRealtime();
            this.zzgh().zzc(new zzdv(this, string2, l));
            return;
        }
        this.zzgi().zziv().log("Ad unit id must be a non-empty string");
    }

    public final void endAdUnitExposure(String string2) {
        if (string2 != null && string2.length() != 0) {
            long l = this.zzbt().elapsedRealtime();
            this.zzgh().zzc(new zzdw(this, string2, l));
            return;
        }
        this.zzgi().zziv().log("Ad unit id must be a non-empty string");
    }

    @WorkerThread
    public final void zzp(long l) {
        zzig zzig2 = this.zzgb().zzkn();
        for (String string2 : this.zzaeu.keySet()) {
            this.zza(string2, l - this.zzaeu.get(string2), zzig2);
        }
        if (!this.zzaeu.isEmpty()) {
            this.zza(l - this.zzaew, zzig2);
        }
        this.zzq(l);
    }
}

