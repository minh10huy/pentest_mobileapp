/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.content.ContentValues
 *  android.content.Context
 *  android.database.Cursor
 *  android.database.sqlite.SQLiteDatabase
 *  android.database.sqlite.SQLiteDatabaseLockedException
 *  android.database.sqlite.SQLiteException
 *  android.database.sqlite.SQLiteFullException
 *  android.os.Parcel
 *  android.os.Parcelable
 *  android.os.SystemClock
 */
package com.google.android.gms.internal.measurement;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteDatabaseLockedException;
import android.database.sqlite.SQLiteException;
import android.database.sqlite.SQLiteFullException;
import android.os.Parcel;
import android.os.Parcelable;
import android.os.SystemClock;
import android.support.annotation.WorkerThread;
import com.google.android.gms.common.internal.safeparcel.AbstractSafeParcelable;
import com.google.android.gms.common.util.Clock;
import com.google.android.gms.common.util.VisibleForTesting;
import com.google.android.gms.internal.measurement.zzdu;
import com.google.android.gms.internal.measurement.zzdz;
import com.google.android.gms.internal.measurement.zzee;
import com.google.android.gms.internal.measurement.zzef;
import com.google.android.gms.internal.measurement.zzeh;
import com.google.android.gms.internal.measurement.zzer;
import com.google.android.gms.internal.measurement.zzex;
import com.google.android.gms.internal.measurement.zzfd;
import com.google.android.gms.internal.measurement.zzff;
import com.google.android.gms.internal.measurement.zzfg;
import com.google.android.gms.internal.measurement.zzfi;
import com.google.android.gms.internal.measurement.zzfk;
import com.google.android.gms.internal.measurement.zzft;
import com.google.android.gms.internal.measurement.zzgi;
import com.google.android.gms.internal.measurement.zzgn;
import com.google.android.gms.internal.measurement.zzhm;
import com.google.android.gms.internal.measurement.zzih;
import com.google.android.gms.internal.measurement.zzik;
import com.google.android.gms.internal.measurement.zzjj;
import com.google.android.gms.internal.measurement.zzka;
import com.google.android.gms.internal.measurement.zzkd;
import java.util.List;

public final class zzfe
extends zzdz {
    private final zzff zzakf = new zzff(this, this.getContext(), "google_app_measurement_local.db");
    private boolean zzakg;

    zzfe(zzgn zzgn2) {
        super(zzgn2);
    }

    @WorkerThread
    @VisibleForTesting
    private final SQLiteDatabase getWritableDatabase() throws SQLiteException {
        if (this.zzakg) {
            return null;
        }
        SQLiteDatabase sQLiteDatabase = this.zzakf.getWritableDatabase();
        if (sQLiteDatabase == null) {
            this.zzakg = true;
            return null;
        }
        return sQLiteDatabase;
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    @WorkerThread
    private final boolean zza(int var1_1, byte[] var2_2) {
        block42 : {
            block39 : {
                block41 : {
                    block40 : {
                        this.zzfv();
                        this.zzab();
                        if (this.zzakg) {
                            return false;
                        }
                        var13_4 = new ContentValues();
                        var13_4.put("type", Integer.valueOf(var1_1));
                        var13_4.put("entry", (byte[])var2_2);
                        var4_5 = 0;
                        var3_6 = 5;
lbl10: // 2 sources:
                        if (var4_5 >= 5) {
                            this.zzgi().zziy().log("Failed to write entry to local database");
                            return false;
                        }
                        var11_40 = null;
                        var12_43 = null;
                        var10_37 = null;
                        var9_10 = null;
                        var2_2 = this.getWritableDatabase();
                        if (var2_2 != null) ** GOTO lbl32
                        var9_11 = var2_2;
                        try {
                            this.zzakg = true;
                            if (var2_2 == null) return false;
                        }
                        catch (SQLiteException var9_12) {
                            block38 : {
                                block37 : {
                                    var10_37 = null;
                                    break block38;
                                    catch (SQLiteFullException var9_16) {}
                                    ** GOTO lbl-1000
lbl32: // 2 sources:
                                    var2_2.beginTransaction();
                                    var7_8 = 0L;
                                    var10_37 = var2_2.rawQuery("select count(1) from messages", null);
                                    var5_7 = var7_8;
                                    if (var10_37 == null) ** GOTO lbl41
                                    var5_7 = var7_8;
                                    if (var10_37.moveToFirst()) {
                                        var5_7 = var10_37.getLong(0);
                                    }
lbl41: // 4 sources:
                                    if (var5_7 < 100000L) ** GOTO lbl48
                                    this.zzgi().zziv().log("Data loss, local db full");
                                    var5_7 = 100000L - var5_7 + 1L;
                                    try {
                                        var7_8 = var2_2.delete("messages", "rowid in (select rowid from messages order by rowid asc limit ?)", new String[]{Long.toString(var5_7)});
                                        if (var7_8 != var5_7) {
                                            this.zzgi().zziv().zzd("Different delete count than expected in local db. expected, received, difference", var5_7, var7_8, var5_7 - var7_8);
                                        }
lbl48: // 4 sources:
                                        var2_2.insertOrThrow("messages", null, var13_4);
                                        var2_2.setTransactionSuccessful();
                                        var2_2.endTransaction();
                                        if (var10_37 == null) break block37;
                                    }
                                    catch (SQLiteDatabaseLockedException var9_18) {}
                                    var10_37.close();
                                }
                                if (var2_2 == null) return true;
                                var2_2.close();
                                return true;
                                catch (Throwable var9_19) {
                                    var10_37 = null;
                                    var11_40 = var2_2;
                                    var2_2 = var10_37;
                                    ** GOTO lbl153
                                }
                                catch (SQLiteException var9_20) {
                                    var10_37 = null;
                                    break block38;
                                }
                                catch (SQLiteFullException var9_21) {}
lbl-1000: // 2 sources:
                                {
                                    var11_40 = var9_17;
                                    break block39;
                                }
                                catch (Throwable var9_22) {
                                    var11_40 = null;
                                    var2_2 = var11_40;
                                    ** GOTO lbl153
                                }
                                catch (SQLiteException var10_38) {
                                    var2_2 = null;
                                    var11_40 = var10_38;
                                    break block40;
                                }
                                catch (SQLiteFullException var11_41) {
                                    var2_2 = null;
                                    break block39;
                                }
                                catch (SQLiteDatabaseLockedException var2_3) {}
                                var2_2 = null;
                                ** GOTO lbl132
                                var11_40 = var10_37;
                                ** GOTO lbl132
                                catch (Throwable var9_33) {
                                    var11_40 = var2_2;
                                    var2_2 = var10_37;
                                    ** GOTO lbl153
                                }
                                catch (SQLiteException var9_34) {}
                            }
                            var11_40 = var9_13;
                            var9_14 = var2_2;
                            var2_2 = var10_37;
                        }
                        var2_2.close();
                        return false;
                    }
                    if (var9_23 == null) ** GOTO lbl99
                    try {
                        if (var9_23.inTransaction()) {
                            var9_23.endTransaction();
                        }
lbl99: // 4 sources:
                        this.zzgi().zziv().zzg("Error writing entry to local database", (Object)var11_40);
                        this.zzakg = true;
                        if (var2_2 == null) break block41;
                    }
                    catch (Throwable var10_39) {
                        var11_40 = var9_23;
                        var9_35 = var10_39;
                        ** GOTO lbl153
                    }
                    var2_2.close();
                }
                var1_1 = var3_6;
                if (var9_23 != null) {
                    var9_23.close();
                    var1_1 = var3_6;
                }
                ** GOTO lbl145
                catch (SQLiteFullException var11_42) {
                    var12_43 = var10_37;
                }
            }
            var10_37 = var12_43;
            var9_28 = var2_2;
            this.zzgi().zziv().zzg("Error writing entry to local database", (Object)var11_40);
            var10_37 = var12_43;
            var9_29 = var2_2;
            this.zzakg = true;
            if (var12_43 == null) break block42;
            var12_43.close();
        }
        var1_1 = var3_6;
        if (var2_2 == null) ** GOTO lbl145
        var1_1 = var3_6;
        ** GOTO lbl144
lbl130: // 1 sources:
        do {
            block44 : {
                block43 : {
                    var11_40 = null;
lbl132: // 3 sources:
                    var5_7 = var3_6;
                    var10_37 = var11_40;
                    var9_25 = var2_2;
                    try {
                        SystemClock.sleep((long)var5_7);
                        var3_6 += 20;
                        if (var11_40 == null) break block43;
                    }
                    catch (Throwable var12_44) {
                        var2_2 = var10_37;
                        var11_40 = var9_30;
                        var9_31 = var12_44;
                    }
                    var11_40.close();
                }
                var1_1 = var3_6;
                if (var2_2 == null) break block44;
                var1_1 = var3_6;
lbl144: // 2 sources:
                var2_2.close();
            }
            ++var4_5;
            var3_6 = var1_1;
            ** GOTO lbl10
lbl153: // 5 sources:
            if (var2_2 != null) {
                var2_2.close();
            }
            if (var11_40 == null) throw var9_32;
            var11_40.close();
            throw var9_32;
            break;
        } while (true);
        catch (SQLiteDatabaseLockedException var9_15) {
            ** continue;
        }
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    @WorkerThread
    public final void resetAnalyticsData() {
        int n;
        this.zzfv();
        this.zzab();
        try {
            n = this.getWritableDatabase().delete("messages", null, null) + 0;
            if (n <= 0) return;
        }
        catch (SQLiteException sQLiteException) {
            this.zzgi().zziv().zzg("Error resetting local analytics data. error", (Object)sQLiteException);
            return;
        }
        this.zzgi().zzjc().zzg("Reset local analytics data. records", n);
    }

    public final boolean zza(zzex arrby) {
        Parcel parcel = Parcel.obtain();
        arrby.writeToParcel(parcel, 0);
        arrby = parcel.marshall();
        parcel.recycle();
        if (arrby.length > 131072) {
            this.zzgi().zziy().log("Event is too long for local database. Sending event directly to service");
            return false;
        }
        return this.zza(0, arrby);
    }

    public final boolean zza(zzka arrby) {
        Parcel parcel = Parcel.obtain();
        arrby.writeToParcel(parcel, 0);
        arrby = parcel.marshall();
        parcel.recycle();
        if (arrby.length > 131072) {
            this.zzgi().zziy().log("User property too long for local database. Sending directly to service");
            return false;
        }
        return this.zza(1, arrby);
    }

    public final boolean zzc(zzef arrby) {
        this.zzgg();
        arrby = zzkd.zza((Parcelable)arrby);
        if (arrby.length > 131072) {
            this.zzgi().zziy().log("Conditional user property too long for local database. Sending directly to service");
            return false;
        }
        return this.zza(2, arrby);
    }

    @Override
    protected final boolean zzgn() {
        return false;
    }

    /*
     * Exception decompiling
     */
    public final List<AbstractSafeParcelable> zzp(int var1_1) {
        // This method has failed to decompile.  When submitting a bug report, please provide this stack trace, and (if you hold appropriate legal rights) the relevant class file.
        // org.benf.cfr.reader.util.ConfusedCFRException: Tried to end blocks [6[TRYBLOCK]], but top level block is 16[TRYBLOCK]
        // org.benf.cfr.reader.bytecode.analysis.opgraph.Op04StructuredStatement.processEndingBlocks(Op04StructuredStatement.java:416)
        // org.benf.cfr.reader.bytecode.analysis.opgraph.Op04StructuredStatement.buildNestedBlocks(Op04StructuredStatement.java:468)
        // org.benf.cfr.reader.bytecode.analysis.opgraph.Op03SimpleStatement.createInitialStructuredBlock(Op03SimpleStatement.java:2960)
        // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisInner(CodeAnalyser.java:818)
        // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisOrWrapFail(CodeAnalyser.java:196)
        // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysis(CodeAnalyser.java:141)
        // org.benf.cfr.reader.entities.attributes.AttributeCode.analyse(AttributeCode.java:95)
        // org.benf.cfr.reader.entities.Method.analyse(Method.java:372)
        // org.benf.cfr.reader.entities.ClassFile.analyseMid(ClassFile.java:867)
        // org.benf.cfr.reader.entities.ClassFile.analyseTop(ClassFile.java:768)
        // org.benf.cfr.reader.Main.doJar(Main.java:141)
        // org.benf.cfr.reader.Main.main(Main.java:242)
        throw new IllegalStateException("Decompilation failed");
    }
}

