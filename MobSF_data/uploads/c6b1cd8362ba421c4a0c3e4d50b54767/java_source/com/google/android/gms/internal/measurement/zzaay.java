/*
 * Decompiled with CFR 0_132.
 */
package com.google.android.gms.internal.measurement;

import com.google.android.gms.internal.measurement.zzaai;
import com.google.android.gms.internal.measurement.zzaba;
import com.google.android.gms.internal.measurement.zzabb;
import com.google.android.gms.internal.measurement.zzzw;
import java.lang.reflect.Constructor;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;

final class zzaay {
    private static final zzaay zzbvx = new zzaay();
    private final zzabb zzbvy;
    private final ConcurrentMap<Class<?>, zzaba<?>> zzbvz = new ConcurrentHashMap();

    private zzaay() {
        zzabb zzabb2;
        zzaai zzaai2 = null;
        for (int i = 0; i <= 0; ++i) {
            zzaai2 = zzabb2 = zzaay.zzfq(new String[]{"com.google.protobuf.AndroidProto3SchemaFactory"}[0]);
            if (zzabb2 != null) break;
            zzaai2 = zzabb2;
        }
        zzabb2 = zzaai2;
        if (zzaai2 == null) {
            zzabb2 = new zzaai();
        }
        this.zzbvy = zzabb2;
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    private static zzabb zzfq(String object) {
        try {
            return (zzabb)Class.forName((String)object).getConstructor(new Class[0]).newInstance(new Object[0]);
        }
        catch (Throwable throwable) {
            return null;
        }
    }

    public static zzaay zzus() {
        return zzbvx;
    }

    public final <T> zzaba<T> zzt(T object) {
        Class<?> class_ = object.getClass();
        zzzw.zza(class_, "messageType");
        zzaba<?> zzaba2 = this.zzbvz.get(class_);
        object = zzaba2;
        if (zzaba2 == null) {
            object = this.zzbvy.zzg(class_);
            zzzw.zza(class_, "messageType");
            zzzw.zza(object, "schema");
            zzaba2 = this.zzbvz.putIfAbsent(class_, (zzaba<?>)object);
            if (zzaba2 != null) {
                object = zzaba2;
            }
        }
        return object;
    }
}

