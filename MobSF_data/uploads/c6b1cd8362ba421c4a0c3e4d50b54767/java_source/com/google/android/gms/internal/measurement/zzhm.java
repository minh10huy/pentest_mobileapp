/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.content.Context
 *  android.os.Build
 *  android.os.Build$VERSION
 *  android.os.Bundle
 *  android.os.Parcelable
 *  android.text.TextUtils
 */
package com.google.android.gms.internal.measurement;

import android.content.Context;
import android.os.Build;
import android.os.Bundle;
import android.os.Parcelable;
import android.support.annotation.Nullable;
import android.support.annotation.WorkerThread;
import android.support.v4.util.ArrayMap;
import android.text.TextUtils;
import com.google.android.gms.common.internal.Preconditions;
import com.google.android.gms.common.util.Clock;
import com.google.android.gms.common.util.CollectionUtils;
import com.google.android.gms.common.util.VisibleForTesting;
import com.google.android.gms.internal.measurement.zzdu;
import com.google.android.gms.internal.measurement.zzdz;
import com.google.android.gms.internal.measurement.zzee;
import com.google.android.gms.internal.measurement.zzef;
import com.google.android.gms.internal.measurement.zzeh;
import com.google.android.gms.internal.measurement.zzer;
import com.google.android.gms.internal.measurement.zzeu;
import com.google.android.gms.internal.measurement.zzex;
import com.google.android.gms.internal.measurement.zzfd;
import com.google.android.gms.internal.measurement.zzfe;
import com.google.android.gms.internal.measurement.zzfg;
import com.google.android.gms.internal.measurement.zzfi;
import com.google.android.gms.internal.measurement.zzfk;
import com.google.android.gms.internal.measurement.zzft;
import com.google.android.gms.internal.measurement.zzgi;
import com.google.android.gms.internal.measurement.zzgn;
import com.google.android.gms.internal.measurement.zzhn;
import com.google.android.gms.internal.measurement.zzho;
import com.google.android.gms.internal.measurement.zzhp;
import com.google.android.gms.internal.measurement.zzhq;
import com.google.android.gms.internal.measurement.zzhr;
import com.google.android.gms.internal.measurement.zzhs;
import com.google.android.gms.internal.measurement.zzht;
import com.google.android.gms.internal.measurement.zzhu;
import com.google.android.gms.internal.measurement.zzhv;
import com.google.android.gms.internal.measurement.zzhw;
import com.google.android.gms.internal.measurement.zzhx;
import com.google.android.gms.internal.measurement.zzhy;
import com.google.android.gms.internal.measurement.zzhz;
import com.google.android.gms.internal.measurement.zzia;
import com.google.android.gms.internal.measurement.zzib;
import com.google.android.gms.internal.measurement.zzic;
import com.google.android.gms.internal.measurement.zzid;
import com.google.android.gms.internal.measurement.zzie;
import com.google.android.gms.internal.measurement.zzif;
import com.google.android.gms.internal.measurement.zzig;
import com.google.android.gms.internal.measurement.zzih;
import com.google.android.gms.internal.measurement.zzik;
import com.google.android.gms.internal.measurement.zzjj;
import com.google.android.gms.internal.measurement.zzka;
import com.google.android.gms.internal.measurement.zzkd;
import com.google.android.gms.measurement.AppMeasurement;
import com.google.android.gms.tasks.Task;
import com.google.android.gms.tasks.Tasks;
import java.lang.reflect.Method;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.CopyOnWriteArraySet;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.atomic.AtomicReference;

public final class zzhm
extends zzdz {
    @VisibleForTesting
    protected zzif zzapl;
    private AppMeasurement.EventInterceptor zzapm;
    private final Set<AppMeasurement.OnEventListener> zzapn = new CopyOnWriteArraySet<AppMeasurement.OnEventListener>();
    private boolean zzapo;
    private final AtomicReference<String> zzapp = new AtomicReference();
    @VisibleForTesting
    protected boolean zzapq = true;

    protected zzhm(zzgn zzgn2) {
        super(zzgn2);
    }

    static /* synthetic */ void zza(zzhm zzhm2, AppMeasurement.ConditionalUserProperty conditionalUserProperty) {
        zzhm2.zzb(conditionalUserProperty);
    }

    static /* synthetic */ void zza(zzhm zzhm2, String string2, String string3, long l, Bundle bundle, boolean bl, boolean bl2, boolean bl3, String string4) {
        zzhm2.zza(string2, string3, l, bundle, bl, bl2, bl3, string4);
    }

    static /* synthetic */ void zza(zzhm zzhm2, String string2, String string3, Object object, long l) {
        zzhm2.zza(string2, string3, object, l);
    }

    static /* synthetic */ void zza(zzhm zzhm2, boolean bl) {
        zzhm2.zzi(bl);
    }

    private final void zza(AppMeasurement.ConditionalUserProperty conditionalUserProperty) {
        long l = this.zzbt().currentTimeMillis();
        Preconditions.checkNotNull(conditionalUserProperty);
        Preconditions.checkNotEmpty(conditionalUserProperty.mName);
        Preconditions.checkNotEmpty(conditionalUserProperty.mOrigin);
        Preconditions.checkNotNull(conditionalUserProperty.mValue);
        conditionalUserProperty.mCreationTimestamp = l;
        String string2 = conditionalUserProperty.mName;
        Object object = conditionalUserProperty.mValue;
        if (this.zzgg().zzcj(string2) != 0) {
            this.zzgi().zziv().zzg("Invalid conditional user property name", this.zzgf().zzbo(string2));
            return;
        }
        if (this.zzgg().zzi(string2, object) != 0) {
            this.zzgi().zziv().zze("Invalid conditional user property value", this.zzgf().zzbo(string2), object);
            return;
        }
        Object object2 = this.zzgg().zzj(string2, object);
        if (object2 == null) {
            this.zzgi().zziv().zze("Unable to normalize conditional user property value", this.zzgf().zzbo(string2), object);
            return;
        }
        conditionalUserProperty.mValue = object2;
        l = conditionalUserProperty.mTriggerTimeout;
        if (!(TextUtils.isEmpty((CharSequence)conditionalUserProperty.mTriggerEventName) || l <= 15552000000L && l >= 1L)) {
            this.zzgi().zziv().zze("Invalid conditional user property timeout", this.zzgf().zzbo(string2), l);
            return;
        }
        l = conditionalUserProperty.mTimeToLive;
        if (l <= 15552000000L && l >= 1L) {
            this.zzgh().zzc(new zzht(this, conditionalUserProperty));
            return;
        }
        this.zzgi().zziv().zze("Invalid conditional user property time to live", this.zzgf().zzbo(string2), l);
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @WorkerThread
    private final void zza(String string2, String object, long l, Bundle object2, boolean bl, boolean bl2, boolean bl3, String string3) {
        Object object3;
        int n;
        Bundle bundle;
        boolean bl4;
        block27 : {
            object3 = object;
            Preconditions.checkNotEmpty(string2);
            Preconditions.checkNotEmpty((String)object);
            Preconditions.checkNotNull(object2);
            this.zzab();
            this.zzch();
            if (!this.zzacv.isEnabled()) {
                this.zzgi().zzjb().log("Event not sent since app measurement is disabled");
                return;
            }
            if (!this.zzapo) {
                this.zzapo = true;
                try {
                    bundle = Class.forName("com.google.android.gms.tagmanager.TagManagerService");
                    try {
                        bundle.getDeclaredMethod("initialize", Context.class).invoke(null, new Object[]{this.getContext()});
                    }
                    catch (Exception exception) {
                        this.zzgi().zziy().zzg("Failed to invoke Tag Manager's initialize() method", exception);
                    }
                    break block27;
                }
                catch (ClassNotFoundException classNotFoundException) {}
                this.zzgi().zzja().log("Tag Manager is not found and thus will not be used");
            }
        }
        if (bl3) {
            this.zzgl();
            if (!"_iap".equals(object3)) {
                bundle = this.zzacv.zzgg();
                bl4 = bundle.zzq("event", (String)object3);
                n = 2;
                if (bl4) {
                    if (!bundle.zza("event", AppMeasurement.Event.zzacw, (String)object3)) {
                        n = 13;
                    } else if (bundle.zza("event", 40, (String)object3)) {
                        n = 0;
                    }
                }
                if (n != 0) {
                    this.zzgi().zzix().zzg("Invalid public event name. Event will not be logged (FE)", this.zzgf().zzbm((String)object3));
                    this.zzacv.zzgg();
                    string2 = zzkd.zza((String)object3, 40, true);
                    int n2 = object3 != null ? object.length() : 0;
                    this.zzacv.zzgg().zza(n, "_ev", string2, n2);
                    return;
                }
            }
        }
        this.zzgl();
        Object object4 = this.zzgb().zzkn();
        if (object4 != null && !object2.containsKey("_sc")) {
            object4.zzaqc = true;
        }
        bl4 = bl && bl3;
        zzih.zza((zzig)object4, (Bundle)object2, bl4);
        bl4 = "am".equals(string2);
        boolean bl5 = zzkd.zzcm((String)object);
        if (bl && this.zzapm != null && !bl5 && !bl4) {
            this.zzgi().zzjb().zze("Passing event to registered event handler (FE)", this.zzgf().zzbm((String)object3), this.zzgf().zzb((Bundle)object2));
            this.zzapm.interceptEvent(string2, (String)object3, (Bundle)object2, l);
            return;
        }
        if (!this.zzacv.zzkg()) {
            return;
        }
        int n3 = this.zzgg().zzch((String)object3);
        if (n3 != 0) {
            this.zzgi().zzix().zzg("Invalid event name. Event will not be logged (FE)", this.zzgf().zzbm((String)object3));
            this.zzgg();
            string2 = zzkd.zza((String)object3, 40, true);
            n = object3 != null ? object.length() : 0;
            this.zzacv.zzgg().zza(string3, n3, "_ev", string2, n);
            return;
        }
        bundle = CollectionUtils.listOf("_o", "_sn", "_sc", "_si");
        Object object5 = this.zzgg().zza(string3, (String)object3, (Bundle)object2, (List<String>)bundle, bl3, true);
        object = object5 != null && object5.containsKey("_sc") && object5.containsKey("_si") ? new zzig(object5.getString("_sn"), object5.getString("_sc"), object5.getLong("_si")) : null;
        if (object != null) {
            object4 = object;
        }
        object = new ArrayList();
        object.add(object5);
        long l2 = this.zzgg().zzlo().nextLong();
        Object[] arrobject = object5.keySet().toArray(new String[object2.size()]);
        Arrays.sort(arrobject);
        n = arrobject.length;
        int n4 = 0;
        object2 = object5;
        for (n3 = 0; n3 < n; ++n3) {
            Object object6 = arrobject[n3];
            object5 = object2.get((String)object6);
            this.zzgg();
            object5 = zzkd.zze(object5);
            if (object5 != null) {
                object2.putInt((String)object6, ((Bundle[])object5).length);
                for (int i = 0; i < ((Bundle[])object5).length; ++i) {
                    Bundle bundle2 = object5[i];
                    zzih.zza((zzig)object4, bundle2, true);
                    bundle2 = this.zzgg().zza(string3, "_ep", bundle2, (List<String>)bundle, bl3, false);
                    bundle2.putString("_en", (String)object3);
                    bundle2.putLong("_eid", l2);
                    bundle2.putString("_gn", (String)object6);
                    bundle2.putInt("_ll", ((Bundle[])object5).length);
                    bundle2.putInt("_i", i);
                    object.add(bundle2);
                }
                object6 = bundle;
                bundle = object4;
                n4 += ((Bundle[])object5).length;
                object4 = object;
                object = object6;
            } else {
                object5 = object;
                object = bundle;
                bundle = object4;
                object4 = object5;
            }
            object5 = bundle;
            bundle = object;
            object = object4;
            object4 = object5;
        }
        bundle = object;
        if (n4 != 0) {
            object2.putLong("_eid", l2);
            object2.putInt("_epc", n4);
        }
        object = object3;
        object2 = bundle;
        for (n = 0; n < object2.size(); ++n) {
            object3 = (Bundle)object2.get(n);
            n3 = n != 0 ? 1 : 0;
            object4 = n3 != 0 ? "_ep" : object;
            object3.putString("_o", string2);
            bundle = object3;
            if (bl2) {
                bundle = this.zzgg().zzd((Bundle)object3);
            }
            this.zzgi().zzjb().zze("Logging event (FE)", this.zzgf().zzbm((String)object), this.zzgf().zzb(bundle));
            object4 = new zzex((String)object4, new zzeu(bundle), string2, l);
            this.zzga().zzb((zzex)object4, string3);
            if (bl4) continue;
            object4 = this.zzapn.iterator();
            while (object4.hasNext()) {
                ((AppMeasurement.OnEventListener)object4.next()).onEvent(string2, (String)object, new Bundle(bundle), l);
            }
        }
        this.zzgl();
        if (this.zzgb().zzkn() != null && "_ae".equals(object)) {
            this.zzgd().zzl(true);
        }
    }

    private final void zza(String string2, String string3, long l, Object object) {
        this.zzgh().zzc(new zzho(this, string2, string3, object, l));
    }

    private final void zza(String string2, String string3, Bundle bundle, boolean bl, boolean bl2, boolean bl3, String string4) {
        this.zzb(string2, string3, this.zzbt().currentTimeMillis(), bundle, bl, bl2, bl3, string4);
    }

    @WorkerThread
    private final void zza(String object, String string2, Object object2, long l) {
        Preconditions.checkNotEmpty((String)object);
        Preconditions.checkNotEmpty(string2);
        this.zzab();
        this.zzfv();
        this.zzch();
        if (!this.zzacv.isEnabled()) {
            this.zzgi().zzjb().log("User property not set since app measurement is disabled");
            return;
        }
        if (!this.zzacv.zzkg()) {
            return;
        }
        this.zzgi().zzjb().zze("Setting user property (FE)", this.zzgf().zzbm(string2), object2);
        object = new zzka(string2, l, object2, (String)object);
        this.zzga().zzb((zzka)object);
    }

    private final void zza(String string2, String string3, String string4, Bundle bundle) {
        long l = this.zzbt().currentTimeMillis();
        Preconditions.checkNotEmpty(string3);
        AppMeasurement.ConditionalUserProperty conditionalUserProperty = new AppMeasurement.ConditionalUserProperty();
        conditionalUserProperty.mAppId = string2;
        conditionalUserProperty.mName = string3;
        conditionalUserProperty.mCreationTimestamp = l;
        if (string4 != null) {
            conditionalUserProperty.mExpiredEventName = string4;
            conditionalUserProperty.mExpiredEventParams = bundle;
        }
        this.zzgh().zzc(new zzhu(this, conditionalUserProperty));
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @VisibleForTesting
    private final Map<String, Object> zzb(String arrayMap, String iterator2, String object, boolean bl) {
        block13 : {
            block11 : {
                block12 : {
                    block10 : {
                        if (!this.zzgh().zzju()) break block10;
                        arrayMap = this.zzgi().zziv();
                        iterator2 = "Cannot get user properties from analytics worker thread";
                        break block11;
                    }
                    if (!zzee.isMainThread()) break block12;
                    arrayMap = this.zzgi().zziv();
                    iterator2 = "Cannot get user properties from main thread";
                    break block11;
                }
                AtomicReference atomicReference = new AtomicReference();
                synchronized (atomicReference) {
                    this.zzacv.zzgh().zzc(new zzhw(this, atomicReference, (String)((Object)arrayMap), (String)((Object)iterator2), (String)object, bl));
                    try {
                        atomicReference.wait(5000L);
                    }
                    catch (InterruptedException interruptedException) {
                        this.zzgi().zziy().zzg("Interrupted waiting for get user properties", interruptedException);
                    }
                }
                iterator2 = (List)atomicReference.get();
                if (iterator2 != null) break block13;
                arrayMap = this.zzgi().zziy();
                iterator2 = "Timed out waiting for get user properties";
            }
            arrayMap.log((String)((Object)iterator2));
            return Collections.emptyMap();
        }
        arrayMap = new ArrayMap<String, Object>(iterator2.size());
        iterator2 = iterator2.iterator();
        while (iterator2.hasNext()) {
            object = (zzka)iterator2.next();
            arrayMap.put(object.name, object.getValue());
        }
        return arrayMap;
    }

    static /* synthetic */ void zzb(zzhm zzhm2, AppMeasurement.ConditionalUserProperty conditionalUserProperty) {
        zzhm2.zzc(conditionalUserProperty);
    }

    @WorkerThread
    private final void zzb(AppMeasurement.ConditionalUserProperty object) {
        zzex zzex2;
        zzex zzex3;
        zzex zzex4;
        this.zzab();
        this.zzch();
        Preconditions.checkNotNull(object);
        Preconditions.checkNotEmpty(object.mName);
        Preconditions.checkNotEmpty(object.mOrigin);
        Preconditions.checkNotNull(object.mValue);
        if (!this.zzacv.isEnabled()) {
            this.zzgi().zzjb().log("Conditional property not sent since Firebase Analytics is disabled");
            return;
        }
        zzka zzka2 = new zzka(object.mName, object.mTriggeredTimestamp, object.mValue, object.mOrigin);
        try {
            zzex4 = this.zzgg().zza(object.mAppId, object.mTriggeredEventName, object.mTriggeredEventParams, object.mOrigin, 0L, true, false);
            zzex2 = this.zzgg().zza(object.mAppId, object.mTimedOutEventName, object.mTimedOutEventParams, object.mOrigin, 0L, true, false);
            zzex3 = this.zzgg().zza(object.mAppId, object.mExpiredEventName, object.mExpiredEventParams, object.mOrigin, 0L, true, false);
        }
        catch (IllegalArgumentException illegalArgumentException) {
            return;
        }
        object = new zzef(object.mAppId, object.mOrigin, zzka2, object.mCreationTimestamp, false, object.mTriggerEventName, zzex2, object.mTriggerTimeout, zzex4, object.mTimeToLive, zzex3);
        this.zzga().zzd((zzef)object);
    }

    private final void zzb(String string2, String string3, long l, Bundle bundle, boolean bl, boolean bl2, boolean bl3, String string4) {
        if (bundle == null) {
            bundle = new Bundle();
        } else {
            bundle = new Bundle(bundle);
            for (Object object : bundle.keySet()) {
                int n;
                Object object2 = bundle.get((String)object);
                if (object2 instanceof Bundle) {
                    bundle.putBundle((String)object, new Bundle((Bundle)object2));
                    continue;
                }
                boolean bl4 = object2 instanceof Parcelable[];
                int n2 = 0;
                if (bl4) {
                    object = (Parcelable[])object2;
                    for (n = 0; n < ((Parcelable[])object).length; ++n) {
                        if (!(object[n] instanceof Bundle)) continue;
                        object[n] = new Bundle((Bundle)object[n]);
                    }
                    continue;
                }
                if (!(object2 instanceof ArrayList)) continue;
                object = (ArrayList)object2;
                for (n = n2; n < object.size(); ++n) {
                    object2 = object.get(n);
                    if (!(object2 instanceof Bundle)) continue;
                    object.set(n, new Bundle((Bundle)object2));
                }
            }
        }
        this.zzgh().zzc(new zzie(this, string2, string3, l, bundle, bl, bl2, bl3, string4));
    }

    @WorkerThread
    private final void zzc(AppMeasurement.ConditionalUserProperty object) {
        zzex zzex2;
        this.zzab();
        this.zzch();
        Preconditions.checkNotNull(object);
        Preconditions.checkNotEmpty(object.mName);
        if (!this.zzacv.isEnabled()) {
            this.zzgi().zzjb().log("Conditional property not cleared since Firebase Analytics is disabled");
            return;
        }
        zzka zzka2 = new zzka(object.mName, 0L, null, null);
        try {
            zzex2 = this.zzgg().zza(object.mAppId, object.mExpiredEventName, object.mExpiredEventParams, object.mOrigin, object.mCreationTimestamp, true, false);
        }
        catch (IllegalArgumentException illegalArgumentException) {
            return;
        }
        object = new zzef(object.mAppId, object.mOrigin, zzka2, object.mCreationTimestamp, object.mActive, object.mTriggerEventName, null, object.mTriggerTimeout, null, object.mTimeToLive, zzex2);
        this.zzga().zzd((zzef)object);
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @VisibleForTesting
    private final List<AppMeasurement.ConditionalUserProperty> zzf(String arrayList, String iterator2, String object) {
        block18 : {
            block17 : {
                block16 : {
                    if (!this.zzgh().zzju()) break block16;
                    arrayList = this.zzgi().zziv();
                    iterator2 = "Cannot get conditional user properties from analytics worker thread";
                    break block17;
                }
                if (!zzee.isMainThread()) break block18;
                arrayList = this.zzgi().zziv();
                iterator2 = "Cannot get conditional user properties from main thread";
            }
            arrayList.log((String)((Object)iterator2));
            return Collections.emptyList();
        }
        Object object2 = new AtomicReference();
        synchronized (object2) {
            this.zzacv.zzgh().zzc(new zzhv(this, (AtomicReference)object2, (String)((Object)arrayList), (String)((Object)iterator2), (String)object));
            try {
                object2.wait(5000L);
            }
            catch (InterruptedException interruptedException) {
                this.zzgi().zziy().zze("Interrupted waiting for get conditional user properties", arrayList, interruptedException);
            }
        }
        iterator2 = (List)object2.get();
        if (iterator2 == null) {
            this.zzgi().zziy().zzg("Timed out waiting for get conditional user properties", arrayList);
            return Collections.emptyList();
        }
        arrayList = new ArrayList<AppMeasurement.ConditionalUserProperty>(iterator2.size());
        iterator2 = iterator2.iterator();
        while (iterator2.hasNext()) {
            object = (zzef)iterator2.next();
            object2 = new AppMeasurement.ConditionalUserProperty();
            object2.mAppId = object.packageName;
            object2.mOrigin = object.origin;
            object2.mCreationTimestamp = object.creationTimestamp;
            object2.mName = object.zzage.name;
            object2.mValue = object.zzage.getValue();
            object2.mActive = object.active;
            object2.mTriggerEventName = object.triggerEventName;
            if (object.zzagf != null) {
                object2.mTimedOutEventName = object.zzagf.name;
                if (object.zzagf.zzahg != null) {
                    object2.mTimedOutEventParams = object.zzagf.zzahg.zzin();
                }
            }
            object2.mTriggerTimeout = object.triggerTimeout;
            if (object.zzagg != null) {
                object2.mTriggeredEventName = object.zzagg.name;
                if (object.zzagg.zzahg != null) {
                    object2.mTriggeredEventParams = object.zzagg.zzahg.zzin();
                }
            }
            object2.mTriggeredTimestamp = object.zzage.zzast;
            object2.mTimeToLive = object.timeToLive;
            if (object.zzagh != null) {
                object2.mExpiredEventName = object.zzagh.name;
                if (object.zzagh.zzahg != null) {
                    object2.mExpiredEventParams = object.zzagh.zzahg.zzin();
                }
            }
            arrayList.add((AppMeasurement.ConditionalUserProperty)object2);
        }
        return arrayList;
    }

    @WorkerThread
    private final void zzi(boolean bl) {
        this.zzab();
        this.zzfv();
        this.zzch();
        this.zzgi().zzjb().zzg("Setting app measurement enabled (FE)", bl);
        this.zzgj().setMeasurementEnabled(bl);
        if (this.zzgk().zzbc(this.zzfz().zzah())) {
            if (this.zzacv.isEnabled() && this.zzapq) {
                this.zzgi().zzjb().log("Recording app launch after enabling measurement for the first time (FE)");
                this.zzkm();
                return;
            }
            this.zzga().zzkp();
            return;
        }
        this.zzga().zzkp();
    }

    public final void clearConditionalUserProperty(String string2, String string3, Bundle bundle) {
        this.zzfv();
        this.zza(null, string2, string3, bundle);
    }

    public final void clearConditionalUserPropertyAs(String string2, String string3, String string4, Bundle bundle) {
        Preconditions.checkNotEmpty(string2);
        this.zzfu();
        this.zza(string2, string3, string4, bundle);
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    public final Task<String> getAppInstanceId() {
        String string2;
        try {
            string2 = this.zzgj().zzjk();
            if (string2 == null) return Tasks.call(this.zzgh().zzjv(), new zzhq(this));
        }
        catch (Exception exception) {
            this.zzgi().zziy().log("Failed to schedule task for getAppInstanceId");
            return Tasks.forException(exception);
        }
        return Tasks.forResult(string2);
    }

    public final List<AppMeasurement.ConditionalUserProperty> getConditionalUserProperties(String string2, String string3) {
        this.zzfv();
        return this.zzf(null, string2, string3);
    }

    public final List<AppMeasurement.ConditionalUserProperty> getConditionalUserPropertiesAs(String string2, String string3, String string4) {
        Preconditions.checkNotEmpty(string2);
        this.zzfu();
        return this.zzf(string2, string3, string4);
    }

    public final Map<String, Object> getUserProperties(String string2, String string3, boolean bl) {
        this.zzfv();
        return this.zzb(null, string2, string3, bl);
    }

    public final Map<String, Object> getUserPropertiesAs(String string2, String string3, String string4, boolean bl) {
        Preconditions.checkNotEmpty(string2);
        this.zzfu();
        return this.zzb(string2, string3, string4, bl);
    }

    public final void logEvent(String string2, String string3, Bundle bundle) {
        this.zzfv();
        boolean bl = this.zzapm == null || zzkd.zzcm(string3);
        this.zza(string2, string3, bundle, true, bl, false, null);
    }

    public final void logEventNoInterceptor(String string2, String string3, Bundle bundle, long l) {
        this.zzfv();
        this.zzb(string2, string3, l, bundle, false, true, true, null);
    }

    public final void registerOnMeasurementEventListener(AppMeasurement.OnEventListener onEventListener) {
        this.zzfv();
        this.zzch();
        Preconditions.checkNotNull(onEventListener);
        if (!this.zzapn.add(onEventListener)) {
            this.zzgi().zziy().log("OnEventListener already registered");
        }
    }

    public final void resetAnalyticsData() {
        long l = this.zzbt().currentTimeMillis();
        this.zzgh().zzc(new zzhs(this, l));
    }

    public final void setConditionalUserProperty(AppMeasurement.ConditionalUserProperty conditionalUserProperty) {
        Preconditions.checkNotNull(conditionalUserProperty);
        this.zzfv();
        conditionalUserProperty = new AppMeasurement.ConditionalUserProperty(conditionalUserProperty);
        if (!TextUtils.isEmpty((CharSequence)conditionalUserProperty.mAppId)) {
            this.zzgi().zziy().log("Package name should be null when calling setConditionalUserProperty");
        }
        conditionalUserProperty.mAppId = null;
        this.zza(conditionalUserProperty);
    }

    public final void setConditionalUserPropertyAs(AppMeasurement.ConditionalUserProperty conditionalUserProperty) {
        Preconditions.checkNotNull(conditionalUserProperty);
        Preconditions.checkNotEmpty(conditionalUserProperty.mAppId);
        this.zzfu();
        this.zza(new AppMeasurement.ConditionalUserProperty(conditionalUserProperty));
    }

    @WorkerThread
    public final void setEventInterceptor(AppMeasurement.EventInterceptor eventInterceptor) {
        this.zzab();
        this.zzfv();
        this.zzch();
        if (eventInterceptor != null && eventInterceptor != this.zzapm) {
            boolean bl = this.zzapm == null;
            Preconditions.checkState(bl, "EventInterceptor already set.");
        }
        this.zzapm = eventInterceptor;
    }

    public final void setMeasurementEnabled(boolean bl) {
        this.zzch();
        this.zzfv();
        this.zzgh().zzc(new zzib(this, bl));
    }

    public final void setMinimumSessionDuration(long l) {
        this.zzfv();
        this.zzgh().zzc(new zzic(this, l));
    }

    public final void setSessionTimeoutDuration(long l) {
        this.zzfv();
        this.zzgh().zzc(new zzid(this, l));
    }

    public final void setUserProperty(String string2, String string3, Object object) {
        Preconditions.checkNotEmpty(string2);
        long l = this.zzbt().currentTimeMillis();
        int n = this.zzgg().zzcj(string3);
        int n2 = 0;
        int n3 = 0;
        if (n != 0) {
            this.zzgg();
            string2 = zzkd.zza(string3, 24, true);
            n2 = n3;
            if (string3 != null) {
                n2 = string3.length();
            }
            this.zzacv.zzgg().zza(n, "_ev", string2, n2);
            return;
        }
        if (object != null) {
            n3 = this.zzgg().zzi(string3, object);
            if (n3 != 0) {
                this.zzgg();
                string2 = zzkd.zza(string3, 24, true);
                if (object instanceof String || object instanceof CharSequence) {
                    n2 = String.valueOf(object).length();
                }
                this.zzacv.zzgg().zza(n3, "_ev", string2, n2);
                return;
            }
            object = this.zzgg().zzj(string3, object);
            if (object != null) {
                this.zza(string2, string3, l, object);
            }
            return;
        }
        this.zza(string2, string3, l, null);
    }

    public final void unregisterOnMeasurementEventListener(AppMeasurement.OnEventListener onEventListener) {
        this.zzfv();
        this.zzch();
        Preconditions.checkNotNull(onEventListener);
        if (!this.zzapn.remove(onEventListener)) {
            this.zzgi().zziy().log("OnEventListener had not been registered");
        }
    }

    @WorkerThread
    final void zza(String string2, String string3, Bundle bundle) {
        this.zzfv();
        this.zzab();
        boolean bl = this.zzapm == null || zzkd.zzcm(string3);
        this.zza(string2, string3, this.zzbt().currentTimeMillis(), bundle, true, bl, false, null);
    }

    public final void zza(String string2, String string3, Bundle bundle, boolean bl) {
        this.zzfv();
        bl = this.zzapm == null || zzkd.zzcm(string3);
        this.zza(string2, string3, bundle, true, bl, true, null);
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @Nullable
    final String zzaj(long l) {
        AtomicReference atomicReference = new AtomicReference();
        synchronized (atomicReference) {
            this.zzgh().zzc(new zzhr(this, atomicReference));
            try {
                atomicReference.wait(l);
            }
            catch (InterruptedException interruptedException) {}
            return (String)atomicReference.get();
            this.zzgi().zziy().log("Interrupted waiting for app instance id");
            return null;
        }
    }

    final void zzbu(@Nullable String string2) {
        this.zzapp.set(string2);
    }

    @Override
    protected final boolean zzgn() {
        return false;
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public final List<zzka> zzj(boolean bl) {
        zzfk zzfk2;
        Object object;
        this.zzfv();
        this.zzch();
        this.zzgi().zzjb().log("Fetching user attributes (FE)");
        if (this.zzgh().zzju()) {
            zzfk2 = this.zzgi().zziv();
            object = "Cannot get all user properties from analytics worker thread";
        } else if (zzee.isMainThread()) {
            zzfk2 = this.zzgi().zziv();
            object = "Cannot get all user properties from main thread";
        } else {
            object = new AtomicReference();
            synchronized (object) {
                this.zzacv.zzgh().zzc(new zzhp(this, (AtomicReference)object, bl));
                try {
                    object.wait(5000L);
                }
                catch (InterruptedException interruptedException) {
                    this.zzgi().zziy().zzg("Interrupted waiting for get user properties", interruptedException);
                }
            }
            object = (List)object.get();
            if (object != null) {
                return object;
            }
            zzfk2 = this.zzgi().zziy();
            object = "Timed out waiting for get user properties";
        }
        zzfk2.log((String)object);
        return Collections.emptyList();
    }

    @Nullable
    public final String zzjk() {
        this.zzfv();
        return this.zzapp.get();
    }

    public final Boolean zzkh() {
        AtomicReference atomicReference = new AtomicReference();
        return (Boolean)this.zzgh().zza(atomicReference, 15000L, "boolean test flag value", new zzhn(this, atomicReference));
    }

    public final String zzki() {
        AtomicReference atomicReference = new AtomicReference();
        return (String)this.zzgh().zza(atomicReference, 15000L, "String test flag value", new zzhx(this, atomicReference));
    }

    public final Long zzkj() {
        AtomicReference atomicReference = new AtomicReference();
        return (Long)this.zzgh().zza(atomicReference, 15000L, "long test flag value", new zzhy(this, atomicReference));
    }

    public final Integer zzkk() {
        AtomicReference atomicReference = new AtomicReference();
        return (Integer)this.zzgh().zza(atomicReference, 15000L, "int test flag value", new zzhz(this, atomicReference));
    }

    public final Double zzkl() {
        AtomicReference atomicReference = new AtomicReference();
        return (Double)this.zzgh().zza(atomicReference, 15000L, "double test flag value", new zzia(this, atomicReference));
    }

    @WorkerThread
    public final void zzkm() {
        this.zzab();
        this.zzfv();
        this.zzch();
        if (!this.zzacv.zzkg()) {
            return;
        }
        this.zzga().zzkm();
        this.zzapq = false;
        String string2 = this.zzgj().zzjn();
        if (!TextUtils.isEmpty((CharSequence)string2)) {
            this.zzge().zzch();
            if (!string2.equals(Build.VERSION.RELEASE)) {
                Bundle bundle = new Bundle();
                bundle.putString("_po", string2);
                this.logEvent("auto", "_ou", bundle);
            }
        }
    }
}

