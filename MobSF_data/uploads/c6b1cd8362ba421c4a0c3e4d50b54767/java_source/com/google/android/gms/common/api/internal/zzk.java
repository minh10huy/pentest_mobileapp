/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.app.Activity
 *  android.app.PendingIntent
 *  android.content.Context
 *  android.content.DialogInterface
 *  android.content.DialogInterface$OnCancelListener
 *  android.content.Intent
 *  android.os.Bundle
 *  android.os.Handler
 *  android.os.Looper
 *  android.os.Parcelable
 */
package com.google.android.gms.common.api.internal;

import android.app.Activity;
import android.app.PendingIntent;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.os.Bundle;
import android.os.Handler;
import android.os.Looper;
import android.os.Parcelable;
import android.support.annotation.Nullable;
import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.GoogleApiAvailability;
import com.google.android.gms.common.api.internal.LifecycleCallback;
import com.google.android.gms.common.api.internal.LifecycleFragment;
import com.google.android.gms.common.api.internal.zzl;
import com.google.android.gms.common.api.internal.zzm;
import com.google.android.gms.common.util.VisibleForTesting;
import java.util.concurrent.atomic.AtomicReference;

public abstract class zzk
extends LifecycleCallback
implements DialogInterface.OnCancelListener {
    protected volatile boolean mStarted;
    protected final GoogleApiAvailability zzdg;
    protected final AtomicReference<zzl> zzer = new AtomicReference<Object>(null);
    private final Handler zzes = new Handler(Looper.getMainLooper());

    protected zzk(LifecycleFragment lifecycleFragment) {
        this(lifecycleFragment, GoogleApiAvailability.getInstance());
    }

    @VisibleForTesting
    private zzk(LifecycleFragment lifecycleFragment, GoogleApiAvailability googleApiAvailability) {
        super(lifecycleFragment);
        this.zzdg = googleApiAvailability;
    }

    private static int zza(@Nullable zzl zzl2) {
        if (zzl2 == null) {
            return -1;
        }
        return zzl2.zzu();
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Lifted jumps to return sites
     */
    @Override
    public final void onActivityResult(int var1_1, int var2_2, Intent var3_3) {
        var7_4 = this.zzer.get();
        var5_5 = 1;
        var4_6 = 1;
        switch (var1_1) {
            default: {
                var6_7 = var7_4;
                ** break;
            }
            case 2: {
                var5_5 = this.zzdg.isGooglePlayServicesAvailable((Context)this.getActivity());
                var1_1 = var5_5 == 0 ? var4_6 : 0;
                if (var7_4 == null) {
                    return;
                }
                var6_7 = var7_4;
                var2_2 = var1_1;
                if (var7_4.getConnectionResult().getErrorCode() != 18) break;
                var6_7 = var7_4;
                var2_2 = var1_1;
                if (var5_5 != 18) break;
                return;
            }
            case 1: {
                if (var2_2 == -1) {
                    var6_7 = var7_4;
                    var2_2 = var5_5;
                    break;
                }
                var6_7 = var7_4;
                if (var2_2 == 0) {
                    var1_1 = 13;
                    if (var3_3 != null) {
                        var1_1 = var3_3.getIntExtra("<<ResolutionFailureErrorDetail>>", 13);
                    }
                    var6_7 = new zzl(new ConnectionResult(var1_1, null), zzk.zza(var7_4));
                    this.zzer.set(var6_7);
                }
lbl32: // 4 sources:
                var2_2 = 0;
            }
        }
        if (var2_2 != 0) {
            this.zzt();
            return;
        }
        if (var6_7 == null) return;
        this.zza(var6_7.getConnectionResult(), var6_7.zzu());
    }

    public void onCancel(DialogInterface dialogInterface) {
        this.zza(new ConnectionResult(13, null), zzk.zza(this.zzer.get()));
        this.zzt();
    }

    @Override
    public final void onCreate(Bundle object) {
        super.onCreate((Bundle)object);
        if (object != null) {
            AtomicReference<zzl> atomicReference = this.zzer;
            object = object.getBoolean("resolving_error", false) ? new zzl(new ConnectionResult(object.getInt("failed_status"), (PendingIntent)object.getParcelable("failed_resolution")), object.getInt("failed_client_id", -1)) : null;
            atomicReference.set((zzl)object);
        }
    }

    @Override
    public final void onSaveInstanceState(Bundle bundle) {
        super.onSaveInstanceState(bundle);
        zzl zzl2 = this.zzer.get();
        if (zzl2 != null) {
            bundle.putBoolean("resolving_error", true);
            bundle.putInt("failed_client_id", zzl2.zzu());
            bundle.putInt("failed_status", zzl2.getConnectionResult().getErrorCode());
            bundle.putParcelable("failed_resolution", (Parcelable)zzl2.getConnectionResult().getResolution());
        }
    }

    @Override
    public void onStart() {
        super.onStart();
        this.mStarted = true;
    }

    @Override
    public void onStop() {
        super.onStop();
        this.mStarted = false;
    }

    protected abstract void zza(ConnectionResult var1, int var2);

    public final void zzb(ConnectionResult object, int n) {
        if (this.zzer.compareAndSet(null, (zzl)(object = new zzl((ConnectionResult)object, n)))) {
            this.zzes.post((Runnable)new zzm(this, (zzl)object));
        }
    }

    protected abstract void zzr();

    protected final void zzt() {
        this.zzer.set(null);
        this.zzr();
    }
}

