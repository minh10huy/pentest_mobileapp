/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.content.Context
 *  android.database.Cursor
 *  android.database.sqlite.SQLiteDatabase
 *  android.database.sqlite.SQLiteDatabase$CursorFactory
 *  android.database.sqlite.SQLiteDatabaseLockedException
 *  android.database.sqlite.SQLiteException
 *  android.database.sqlite.SQLiteOpenHelper
 *  android.os.Build
 *  android.os.Build$VERSION
 */
package com.google.android.gms.internal.measurement;

import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteDatabaseLockedException;
import android.database.sqlite.SQLiteException;
import android.database.sqlite.SQLiteOpenHelper;
import android.os.Build;
import android.support.annotation.WorkerThread;
import com.google.android.gms.common.util.VisibleForTesting;
import com.google.android.gms.internal.measurement.zzeo;
import com.google.android.gms.internal.measurement.zzfe;
import com.google.android.gms.internal.measurement.zzfi;
import com.google.android.gms.internal.measurement.zzfk;
import java.io.File;

@VisibleForTesting
final class zzff
extends SQLiteOpenHelper {
    private final /* synthetic */ zzfe zzakh;

    zzff(zzfe zzfe2, Context context, String string2) {
        this.zzakh = zzfe2;
        super(context, string2, null, 1);
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @WorkerThread
    public final SQLiteDatabase getWritableDatabase() throws SQLiteException {
        try {
            return super.getWritableDatabase();
        }
        catch (SQLiteDatabaseLockedException sQLiteDatabaseLockedException) {
            throw sQLiteDatabaseLockedException;
        }
        catch (SQLiteException sQLiteException) {}
        this.zzakh.zzgi().zziv().log("Opening the local database failed, dropping and recreating it");
        if (!this.zzakh.getContext().getDatabasePath("google_app_measurement_local.db").delete()) {
            this.zzakh.zzgi().zziv().zzg("Failed to delete corrupted local db file", "google_app_measurement_local.db");
        }
        try {
            return super.getWritableDatabase();
        }
        catch (SQLiteException sQLiteException) {
            this.zzakh.zzgi().zziv().zzg("Failed to open local database. Events will bypass local storage", (Object)sQLiteException);
            return null;
        }
    }

    @WorkerThread
    public final void onCreate(SQLiteDatabase sQLiteDatabase) {
        zzeo.zza(this.zzakh.zzgi(), sQLiteDatabase);
    }

    @WorkerThread
    public final void onDowngrade(SQLiteDatabase sQLiteDatabase, int n, int n2) {
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    @WorkerThread
    public final void onOpen(SQLiteDatabase var1_1) {
        block5 : {
            block6 : {
                if (Build.VERSION.SDK_INT >= 15) break block5;
                var3_2 = null;
                var2_4 = var1_1.rawQuery("PRAGMA journal_mode=memory", null);
                try {
                    var2_4.moveToFirst();
                    ** if (var2_4 == null) goto lbl-1000
                }
                catch (Throwable var3_3) {
                    var1_1 = var2_4;
                    var2_5 = var3_3;
                }
lbl-1000: // 1 sources:
                {
                    var2_4.close();
                }
lbl-1000: // 2 sources:
                {
                    break block5;
                }
                break block6;
                catch (Throwable var2_6) {
                    var1_1 = var3_2;
                }
            }
            if (var1_1 == null) throw var2_7;
            var1_1.close();
            throw var2_7;
        }
        zzeo.zza(this.zzakh.zzgi(), var1_1, "messages", "create table if not exists messages ( type INTEGER NOT NULL, entry BLOB NOT NULL)", "type,entry", null);
    }

    @WorkerThread
    public final void onUpgrade(SQLiteDatabase sQLiteDatabase, int n, int n2) {
    }
}

