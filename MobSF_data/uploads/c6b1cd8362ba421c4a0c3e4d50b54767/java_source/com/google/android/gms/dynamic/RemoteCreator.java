/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.content.Context
 *  android.os.IBinder
 */
package com.google.android.gms.dynamic;

import android.content.Context;
import android.os.IBinder;
import com.google.android.gms.common.GooglePlayServicesUtilLight;
import com.google.android.gms.common.internal.Preconditions;

public abstract class RemoteCreator<T> {
    private final String zzabo;
    private T zzabp;

    protected RemoteCreator(String string2) {
        this.zzabo = string2;
    }

    protected abstract T getRemoteCreator(IBinder var1);

    protected final T getRemoteCreatorInstance(Context object) throws RemoteCreatorException {
        if (this.zzabp == null) {
            Preconditions.checkNotNull(object);
            object = GooglePlayServicesUtilLight.getRemoteContext((Context)object);
            if (object == null) {
                throw new RemoteCreatorException("Could not get remote context.");
            }
            object = object.getClassLoader();
            try {
                this.zzabp = this.getRemoteCreator((IBinder)object.loadClass(this.zzabo).newInstance());
            }
            catch (IllegalAccessException illegalAccessException) {
                throw new RemoteCreatorException("Could not access creator.", illegalAccessException);
            }
            catch (InstantiationException instantiationException) {
                throw new RemoteCreatorException("Could not instantiate creator.", instantiationException);
            }
            catch (ClassNotFoundException classNotFoundException) {
                throw new RemoteCreatorException("Could not load creator class.", classNotFoundException);
            }
        }
        return this.zzabp;
    }

    public static class RemoteCreatorException
    extends Exception {
        public RemoteCreatorException(String string2) {
            super(string2);
        }

        public RemoteCreatorException(String string2, Throwable throwable) {
            super(string2, throwable);
        }
    }

}

