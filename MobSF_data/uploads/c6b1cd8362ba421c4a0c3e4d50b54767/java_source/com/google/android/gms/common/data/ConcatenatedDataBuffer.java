/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.content.Context
 *  android.os.Bundle
 */
package com.google.android.gms.common.data;

import android.content.Context;
import android.os.Bundle;
import com.google.android.gms.common.data.DataBuffer;
import com.google.android.gms.common.data.DataBufferIterator;
import com.google.android.gms.common.data.ExclusionFilterable;
import com.google.android.gms.common.data.TextFilterable;
import com.google.android.gms.common.util.VisibleForTesting;
import java.util.ArrayList;
import java.util.Iterator;

@VisibleForTesting
public final class ConcatenatedDataBuffer<T>
implements DataBuffer<T>,
ExclusionFilterable,
TextFilterable {
    private Bundle mBundle;
    private final ArrayList<DataBuffer<T>> zznf = new ArrayList();
    private final ArrayList<Integer> zzng = new ArrayList();
    private int zznh;

    public ConcatenatedDataBuffer() {
    }

    public ConcatenatedDataBuffer(DataBuffer<T> dataBuffer) {
        this.append(dataBuffer);
    }

    public static <T> ConcatenatedDataBuffer<T> extend(ConcatenatedDataBuffer<T> iterable, DataBuffer<T> dataBuffer) {
        ConcatenatedDataBuffer<T> concatenatedDataBuffer = new ConcatenatedDataBuffer<T>();
        iterable = iterable.zznf;
        int n = iterable.size();
        for (int i = 0; i < n; ++i) {
            Object object = iterable.get(i);
            concatenatedDataBuffer.append((DataBuffer)object);
        }
        concatenatedDataBuffer.append(dataBuffer);
        return concatenatedDataBuffer;
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public final void append(DataBuffer<T> bundle) {
        if (bundle == null) {
            return;
        }
        synchronized (this) {
            if (this.zznf.isEmpty()) {
                this.mBundle = new Bundle();
                Bundle bundle2 = bundle.getMetadata();
                if (bundle2 != null) {
                    this.mBundle.putString("prev_page_token", bundle2.getString("prev_page_token"));
                }
            }
            this.zznf.add((DataBuffer<T>)bundle);
            this.computeCounts();
            bundle = bundle.getMetadata();
            if (bundle != null) {
                this.mBundle.putString("next_page_token", bundle.getString("next_page_token"));
            } else {
                this.mBundle.remove("next_page_token");
            }
            return;
        }
    }

    @Override
    public final void clearFilters() {
        int n = this.zznf.size();
        for (int i = 0; i < n; ++i) {
            DataBuffer<T> dataBuffer = this.zznf.get(i);
            if (!(dataBuffer instanceof ExclusionFilterable)) continue;
            ((ExclusionFilterable)((Object)dataBuffer)).clearFilters();
        }
        this.computeCounts();
    }

    @Deprecated
    @Override
    public final void close() {
        this.release();
    }

    public final void computeCounts() {
        this.zzng.clear();
        int n = this.zznf.size();
        int n2 = 0;
        for (int i = 0; i < n; ++i) {
            DataBuffer<T> dataBuffer = this.zznf.get(i);
            int n3 = n2;
            if (dataBuffer != null) {
                n3 = n2 + dataBuffer.getCount();
            }
            this.zzng.add(n3);
            n2 = n3;
        }
        this.zznh = n2;
    }

    @Override
    public final void filterOut(String string2) {
        int n = this.zznf.size();
        for (int i = 0; i < n; ++i) {
            DataBuffer<T> dataBuffer = this.zznf.get(i);
            if (!(dataBuffer instanceof ExclusionFilterable)) continue;
            ((ExclusionFilterable)((Object)dataBuffer)).filterOut(string2);
        }
        this.computeCounts();
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @Override
    public final T get(int n) {
        synchronized (this) {
            int n2 = 0;
            int n3 = this.zznf.size();
            while (n2 < n3) {
                DataBuffer<T> dataBuffer;
                int n4 = this.zzng.get(n2);
                if (n < n4 && (dataBuffer = this.zznf.get(n2)) != null) {
                    dataBuffer = dataBuffer.get(n - n4 + dataBuffer.getCount());
                    return (T)dataBuffer;
                }
                ++n2;
            }
            return null;
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @Override
    public final int getCount() {
        synchronized (this) {
            return this.zznh;
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @Override
    public final Bundle getMetadata() {
        synchronized (this) {
            return this.mBundle;
        }
    }

    @Deprecated
    @Override
    public final boolean isClosed() {
        return false;
    }

    @Override
    public final Iterator<T> iterator() {
        return new DataBufferIterator(this);
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @Override
    public final void release() {
        synchronized (this) {
            int n = 0;
            int n2 = this.zznf.size();
            do {
                if (n >= n2) {
                    this.zznf.clear();
                    this.zzng.clear();
                    this.mBundle = null;
                    return;
                }
                DataBuffer<T> dataBuffer = this.zznf.get(n);
                if (dataBuffer != null) {
                    dataBuffer.release();
                }
                ++n;
            } while (true);
        }
    }

    @Override
    public final void setFilterTerm(Context context, TextFilterable.StringFilter stringFilter, String string2) {
        int n = this.zznf.size();
        for (int i = 0; i < n; ++i) {
            DataBuffer<T> dataBuffer = this.zznf.get(i);
            if (!(dataBuffer instanceof TextFilterable)) continue;
            ((TextFilterable)((Object)dataBuffer)).setFilterTerm(context, stringFilter, string2);
        }
        this.computeCounts();
    }

    @Override
    public final void setFilterTerm(Context context, String string2) {
        int n = this.zznf.size();
        for (int i = 0; i < n; ++i) {
            DataBuffer<T> dataBuffer = this.zznf.get(i);
            if (!(dataBuffer instanceof TextFilterable)) continue;
            ((TextFilterable)((Object)dataBuffer)).setFilterTerm(context, string2);
        }
        this.computeCounts();
    }

    @Override
    public final Iterator<T> singleRefIterator() {
        return this.iterator();
    }

    @Override
    public final void unfilter(String string2) {
        int n = this.zznf.size();
        for (int i = 0; i < n; ++i) {
            DataBuffer<T> dataBuffer = this.zznf.get(i);
            if (!(dataBuffer instanceof ExclusionFilterable)) continue;
            ((ExclusionFilterable)((Object)dataBuffer)).unfilter(string2);
        }
        this.computeCounts();
    }
}

