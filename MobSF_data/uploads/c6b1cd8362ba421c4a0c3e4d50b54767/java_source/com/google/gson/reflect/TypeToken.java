/*
 * Decompiled with CFR 0_132.
 */
package com.google.gson.reflect;

import com.google.gson.internal.$Gson$Preconditions;
import com.google.gson.internal.$Gson$Types;
import java.lang.reflect.GenericArrayType;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.lang.reflect.TypeVariable;
import java.util.HashMap;
import java.util.Map;

public class TypeToken<T> {
    final int hashCode;
    final Class<? super T> rawType;
    final Type type;

    protected TypeToken() {
        this.type = TypeToken.getSuperclassTypeParameter(this.getClass());
        this.rawType = $Gson$Types.getRawType(this.type);
        this.hashCode = this.type.hashCode();
    }

    TypeToken(Type type) {
        this.type = $Gson$Types.canonicalize($Gson$Preconditions.checkNotNull(type));
        this.rawType = $Gson$Types.getRawType(this.type);
        this.hashCode = this.type.hashCode();
    }

    private static /* varargs */ AssertionError buildUnexpectedTypeError(Type type, Class<?> ... arrclass) {
        StringBuilder stringBuilder = new StringBuilder("Unexpected type. Expected one of: ");
        int n = arrclass.length;
        for (int i = 0; i < n; ++i) {
            stringBuilder.append(arrclass[i].getName());
            stringBuilder.append(", ");
        }
        stringBuilder.append("but got: ");
        stringBuilder.append(type.getClass().getName());
        stringBuilder.append(", for type token: ");
        stringBuilder.append(type.toString());
        stringBuilder.append('.');
        return new AssertionError((Object)stringBuilder.toString());
    }

    public static <T> TypeToken<T> get(Class<T> class_) {
        return new TypeToken<T>(class_);
    }

    public static TypeToken<?> get(Type type) {
        return new TypeToken<T>(type);
    }

    public static TypeToken<?> getArray(Type type) {
        return new TypeToken<T>($Gson$Types.arrayOf(type));
    }

    public static /* varargs */ TypeToken<?> getParameterized(Type type, Type ... arrtype) {
        return new TypeToken<T>($Gson$Types.newParameterizedTypeWithOwner(null, type, arrtype));
    }

    static Type getSuperclassTypeParameter(Class<?> type) {
        if ((type = type.getGenericSuperclass()) instanceof Class) {
            throw new RuntimeException("Missing type parameter.");
        }
        return $Gson$Types.canonicalize(((ParameterizedType)type).getActualTypeArguments()[0]);
    }

    private static boolean isAssignableFrom(Type class_, GenericArrayType type) {
        Type type2 = type.getGenericComponentType();
        if (type2 instanceof ParameterizedType) {
            if (class_ instanceof GenericArrayType) {
                type = ((GenericArrayType)((Object)class_)).getGenericComponentType();
            } else {
                type = class_;
                if (class_ instanceof Class) {
                    class_ = class_;
                    do {
                        type = class_;
                        if (!class_.isArray()) break;
                        class_ = class_.getComponentType();
                    } while (true);
                }
            }
            return TypeToken.isAssignableFrom(type, (ParameterizedType)type2, new HashMap<String, Type>());
        }
        return true;
    }

    private static boolean isAssignableFrom(Type object, ParameterizedType parameterizedType, Map<String, Type> map) {
        int n;
        int n2 = 0;
        if (object == null) {
            return false;
        }
        if (parameterizedType.equals(object)) {
            return true;
        }
        Class<?> class_ = $Gson$Types.getRawType((Type)object);
        ParameterizedType parameterizedType2 = null;
        if (object instanceof ParameterizedType) {
            parameterizedType2 = (ParameterizedType)object;
        }
        if (parameterizedType2 != null) {
            Type[] arrtype = parameterizedType2.getActualTypeArguments();
            TypeVariable<Class<?>>[] arrtypeVariable = class_.getTypeParameters();
            for (n = 0; n < arrtype.length; ++n) {
                object = arrtype[n];
                TypeVariable<Class<?>> typeVariable = arrtypeVariable[n];
                while (object instanceof TypeVariable) {
                    object = map.get(((TypeVariable)object).getName());
                }
                map.put(typeVariable.getName(), (Type)object);
            }
            if (TypeToken.typeEquals(parameterizedType2, parameterizedType, map)) {
                return true;
            }
        }
        object = class_.getGenericInterfaces();
        int n3 = ((Type[])object).length;
        for (n = n2; n < n3; ++n) {
            if (!TypeToken.isAssignableFrom(object[n], parameterizedType, new HashMap<String, Type>(map))) continue;
            return true;
        }
        return TypeToken.isAssignableFrom(class_.getGenericSuperclass(), parameterizedType, new HashMap<String, Type>(map));
    }

    private static boolean matches(Type type, Type type2, Map<String, Type> map) {
        if (!(type2.equals(type) || type instanceof TypeVariable && type2.equals(map.get(((TypeVariable)type).getName())))) {
            return false;
        }
        return true;
    }

    private static boolean typeEquals(ParameterizedType arrtype, ParameterizedType arrtype2, Map<String, Type> map) {
        if (arrtype.getRawType().equals(arrtype2.getRawType())) {
            arrtype = arrtype.getActualTypeArguments();
            arrtype2 = arrtype2.getActualTypeArguments();
            for (int i = 0; i < arrtype.length; ++i) {
                if (TypeToken.matches(arrtype[i], arrtype2[i], map)) continue;
                return false;
            }
            return true;
        }
        return false;
    }

    public final boolean equals(Object object) {
        if (object instanceof TypeToken && $Gson$Types.equals(this.type, ((TypeToken)object).type)) {
            return true;
        }
        return false;
    }

    public final Class<? super T> getRawType() {
        return this.rawType;
    }

    public final Type getType() {
        return this.type;
    }

    public final int hashCode() {
        return this.hashCode;
    }

    @Deprecated
    public boolean isAssignableFrom(TypeToken<?> typeToken) {
        return this.isAssignableFrom(typeToken.getType());
    }

    @Deprecated
    public boolean isAssignableFrom(Class<?> class_) {
        return this.isAssignableFrom((Type)class_);
    }

    @Deprecated
    public boolean isAssignableFrom(Type type) {
        boolean bl = false;
        if (type == null) {
            return false;
        }
        if (this.type.equals(type)) {
            return true;
        }
        if (this.type instanceof Class) {
            return this.rawType.isAssignableFrom($Gson$Types.getRawType(type));
        }
        if (this.type instanceof ParameterizedType) {
            return TypeToken.isAssignableFrom(type, (ParameterizedType)this.type, new HashMap<String, Type>());
        }
        if (this.type instanceof GenericArrayType) {
            boolean bl2 = bl;
            if (this.rawType.isAssignableFrom($Gson$Types.getRawType(type))) {
                bl2 = bl;
                if (TypeToken.isAssignableFrom(type, (GenericArrayType)this.type)) {
                    bl2 = true;
                }
            }
            return bl2;
        }
        throw TypeToken.buildUnexpectedTypeError(this.type, Class.class, ParameterizedType.class, GenericArrayType.class);
    }

    public final String toString() {
        return $Gson$Types.typeToString(this.type);
    }
}

