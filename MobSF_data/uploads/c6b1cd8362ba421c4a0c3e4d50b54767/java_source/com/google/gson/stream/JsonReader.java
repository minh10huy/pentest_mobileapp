/*
 * Decompiled with CFR 0_132.
 */
package com.google.gson.stream;

import com.google.gson.internal.JsonReaderInternalAccess;
import com.google.gson.internal.bind.JsonTreeReader;
import com.google.gson.stream.JsonToken;
import com.google.gson.stream.MalformedJsonException;
import java.io.Closeable;
import java.io.EOFException;
import java.io.IOException;
import java.io.Reader;

public class JsonReader
implements Closeable {
    private static final long MIN_INCOMPLETE_INTEGER = -922337203685477580L;
    private static final char[] NON_EXECUTE_PREFIX = ")]}'\n".toCharArray();
    private static final int NUMBER_CHAR_DECIMAL = 3;
    private static final int NUMBER_CHAR_DIGIT = 2;
    private static final int NUMBER_CHAR_EXP_DIGIT = 7;
    private static final int NUMBER_CHAR_EXP_E = 5;
    private static final int NUMBER_CHAR_EXP_SIGN = 6;
    private static final int NUMBER_CHAR_FRACTION_DIGIT = 4;
    private static final int NUMBER_CHAR_NONE = 0;
    private static final int NUMBER_CHAR_SIGN = 1;
    private static final int PEEKED_BEGIN_ARRAY = 3;
    private static final int PEEKED_BEGIN_OBJECT = 1;
    private static final int PEEKED_BUFFERED = 11;
    private static final int PEEKED_DOUBLE_QUOTED = 9;
    private static final int PEEKED_DOUBLE_QUOTED_NAME = 13;
    private static final int PEEKED_END_ARRAY = 4;
    private static final int PEEKED_END_OBJECT = 2;
    private static final int PEEKED_EOF = 17;
    private static final int PEEKED_FALSE = 6;
    private static final int PEEKED_LONG = 15;
    private static final int PEEKED_NONE = 0;
    private static final int PEEKED_NULL = 7;
    private static final int PEEKED_NUMBER = 16;
    private static final int PEEKED_SINGLE_QUOTED = 8;
    private static final int PEEKED_SINGLE_QUOTED_NAME = 12;
    private static final int PEEKED_TRUE = 5;
    private static final int PEEKED_UNQUOTED = 10;
    private static final int PEEKED_UNQUOTED_NAME = 14;
    private final char[] buffer = new char[1024];
    private final Reader in;
    private boolean lenient = false;
    private int limit = 0;
    private int lineNumber = 0;
    private int lineStart = 0;
    private int[] pathIndices;
    private String[] pathNames;
    int peeked = 0;
    private long peekedLong;
    private int peekedNumberLength;
    private String peekedString;
    private int pos = 0;
    private int[] stack = new int[32];
    private int stackSize = 0;

    static {
        JsonReaderInternalAccess.INSTANCE = new JsonReaderInternalAccess(){

            @Override
            public void promoteNameToValue(JsonReader jsonReader) throws IOException {
                int n;
                if (jsonReader instanceof JsonTreeReader) {
                    ((JsonTreeReader)jsonReader).promoteNameToValue();
                    return;
                }
                int n2 = n = jsonReader.peeked;
                if (n == 0) {
                    n2 = jsonReader.doPeek();
                }
                if (n2 == 13) {
                    jsonReader.peeked = 9;
                    return;
                }
                if (n2 == 12) {
                    jsonReader.peeked = 8;
                    return;
                }
                if (n2 == 14) {
                    jsonReader.peeked = 10;
                    return;
                }
                StringBuilder stringBuilder = new StringBuilder();
                stringBuilder.append("Expected a name but was ");
                stringBuilder.append((Object)jsonReader.peek());
                stringBuilder.append(jsonReader.locationString());
                throw new IllegalStateException(stringBuilder.toString());
            }
        };
    }

    public JsonReader(Reader reader) {
        int[] arrn = this.stack;
        int n = this.stackSize;
        this.stackSize = n + 1;
        arrn[n] = 6;
        this.pathNames = new String[32];
        this.pathIndices = new int[32];
        if (reader == null) {
            throw new NullPointerException("in == null");
        }
        this.in = reader;
    }

    private void checkLenient() throws IOException {
        if (!this.lenient) {
            throw this.syntaxError("Use JsonReader.setLenient(true) to accept malformed JSON");
        }
    }

    private void consumeNonExecutePrefix() throws IOException {
        this.nextNonWhitespace(true);
        --this.pos;
        if (this.pos + NON_EXECUTE_PREFIX.length > this.limit && !this.fillBuffer(NON_EXECUTE_PREFIX.length)) {
            return;
        }
        for (int i = 0; i < NON_EXECUTE_PREFIX.length; ++i) {
            if (this.buffer[this.pos + i] == NON_EXECUTE_PREFIX[i]) continue;
            return;
        }
        this.pos += NON_EXECUTE_PREFIX.length;
    }

    private boolean fillBuffer(int n) throws IOException {
        int n2;
        char[] arrc = this.buffer;
        this.lineStart -= this.pos;
        if (this.limit != this.pos) {
            this.limit -= this.pos;
            System.arraycopy(arrc, this.pos, arrc, 0, this.limit);
        } else {
            this.limit = 0;
        }
        this.pos = 0;
        while ((n2 = this.in.read(arrc, this.limit, arrc.length - this.limit)) != -1) {
            this.limit += n2;
            n2 = n;
            if (this.lineNumber == 0) {
                n2 = n;
                if (this.lineStart == 0) {
                    n2 = n;
                    if (this.limit > 0) {
                        n2 = n;
                        if (arrc[0] == '\ufeff') {
                            ++this.pos;
                            ++this.lineStart;
                            n2 = n + 1;
                        }
                    }
                }
            }
            n = n2;
            if (this.limit < n2) continue;
            return true;
        }
        return false;
    }

    private boolean isLiteral(char c) throws IOException {
        switch (c) {
            default: {
                return true;
            }
            case '#': 
            case '/': 
            case ';': 
            case '=': 
            case '\\': {
                this.checkLenient();
            }
            case '\t': 
            case '\n': 
            case '\f': 
            case '\r': 
            case ' ': 
            case ',': 
            case ':': 
            case '[': 
            case ']': 
            case '{': 
            case '}': 
        }
        return false;
    }

    private int nextNonWhitespace(boolean bl) throws IOException {
        Object object = this.buffer;
        Object object2 = this.pos;
        int n = this.limit;
        do {
            int n2 = object2;
            int n3 = n;
            if (object2 == n) {
                this.pos = object2;
                if (!this.fillBuffer(1)) {
                    if (bl) {
                        object = new StringBuilder();
                        object.append("End of input");
                        object.append(this.locationString());
                        throw new EOFException(object.toString());
                    }
                    return -1;
                }
                n2 = this.pos;
                n3 = this.limit;
            }
            object2 = n2 + 1;
            n = object[n2];
            if (n == 10) {
                ++this.lineNumber;
                this.lineStart = object2;
            } else if (n != 32 && n != 13 && n != 9) {
                if (n == 47) {
                    this.pos = object2;
                    if (object2 == n3) {
                        --this.pos;
                        boolean bl2 = this.fillBuffer(2);
                        ++this.pos;
                        if (!bl2) {
                            return n;
                        }
                    }
                    this.checkLenient();
                    object2 = object[this.pos];
                    if (object2 != 42) {
                        if (object2 != 47) {
                            return n;
                        }
                        ++this.pos;
                        this.skipToEndOfLine();
                        object2 = this.pos;
                        n = this.limit;
                        continue;
                    }
                    ++this.pos;
                    if (!this.skipTo("*/")) {
                        throw this.syntaxError("Unterminated comment");
                    }
                    object2 = this.pos + 2;
                    n = this.limit;
                    continue;
                }
                if (n == 35) {
                    this.pos = object2;
                    this.checkLenient();
                    this.skipToEndOfLine();
                    object2 = this.pos;
                    n = this.limit;
                    continue;
                }
                this.pos = object2;
                return n;
            }
            n = n3;
        } while (true);
    }

    private String nextQuotedValue(char c) throws IOException {
        char[] arrc = this.buffer;
        StringBuilder stringBuilder = null;
        do {
            StringBuilder stringBuilder2;
            int n;
            int n2 = this.pos;
            int n3 = this.limit;
            block1 : do {
                int n4 = n2;
                while ((n = n4) < n3) {
                    n4 = n + 1;
                    if ((n = arrc[n]) == c) {
                        this.pos = n4;
                        c = (char)(n4 - n2 - 1);
                        if (stringBuilder == null) {
                            return new String(arrc, n2, (int)c);
                        }
                        stringBuilder.append(arrc, n2, (int)c);
                        return stringBuilder.toString();
                    }
                    if (n == 92) {
                        this.pos = n4;
                        n4 = n4 - n2 - 1;
                        stringBuilder2 = stringBuilder;
                        if (stringBuilder == null) {
                            stringBuilder2 = new StringBuilder(Math.max((n4 + 1) * 2, 16));
                        }
                        stringBuilder2.append(arrc, n2, n4);
                        stringBuilder2.append(this.readEscapeCharacter());
                        n2 = this.pos;
                        n3 = this.limit;
                        stringBuilder = stringBuilder2;
                        continue block1;
                    }
                    if (n != 10) continue;
                    ++this.lineNumber;
                    this.lineStart = n4;
                }
                break;
            } while (true);
            stringBuilder2 = stringBuilder;
            if (stringBuilder == null) {
                stringBuilder2 = new StringBuilder(Math.max((n - n2) * 2, 16));
            }
            stringBuilder2.append(arrc, n2, n - n2);
            this.pos = n;
            stringBuilder = stringBuilder2;
        } while (this.fillBuffer(1));
        throw this.syntaxError("Unterminated string");
    }

    /*
     * Exception decompiling
     */
    private String nextUnquotedValue() throws IOException {
        // This method has failed to decompile.  When submitting a bug report, please provide this stack trace, and (if you hold appropriate legal rights) the relevant class file.
        // org.benf.cfr.reader.util.ConfusedCFRException: Extractable last case doesn't follow previous
        // org.benf.cfr.reader.bytecode.analysis.opgraph.op3rewriters.SwitchReplacer.examineSwitchContiguity(SwitchReplacer.java:486)
        // org.benf.cfr.reader.bytecode.analysis.opgraph.op3rewriters.SwitchReplacer.replaceRawSwitches(SwitchReplacer.java:65)
        // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisInner(CodeAnalyser.java:416)
        // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisOrWrapFail(CodeAnalyser.java:196)
        // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysis(CodeAnalyser.java:141)
        // org.benf.cfr.reader.entities.attributes.AttributeCode.analyse(AttributeCode.java:95)
        // org.benf.cfr.reader.entities.Method.analyse(Method.java:372)
        // org.benf.cfr.reader.entities.ClassFile.analyseMid(ClassFile.java:867)
        // org.benf.cfr.reader.entities.ClassFile.analyseTop(ClassFile.java:768)
        // org.benf.cfr.reader.Main.doJar(Main.java:141)
        // org.benf.cfr.reader.Main.main(Main.java:242)
        throw new IllegalStateException("Decompilation failed");
    }

    private int peekKeyword() throws IOException {
        String string2;
        String string3;
        int n = this.buffer[this.pos];
        if (n != 116 && n != 84) {
            if (n != 102 && n != 70) {
                if (n != 110 && n != 78) {
                    return 0;
                }
                string2 = "null";
                string3 = "NULL";
                n = 7;
            } else {
                string2 = "false";
                string3 = "FALSE";
                n = 6;
            }
        } else {
            string2 = "true";
            string3 = "TRUE";
            n = 5;
        }
        int n2 = string2.length();
        for (int i = 1; i < n2; ++i) {
            if (this.pos + i >= this.limit && !this.fillBuffer(i + 1)) {
                return 0;
            }
            char c = this.buffer[this.pos + i];
            if (c == string2.charAt(i) || c == string3.charAt(i)) continue;
            return 0;
        }
        if ((this.pos + n2 < this.limit || this.fillBuffer(n2 + 1)) && this.isLiteral(this.buffer[this.pos + n2])) {
            return 0;
        }
        this.pos += n2;
        this.peeked = n;
        return n;
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Lifted jumps to return sites
     */
    private int peekNumber() throws IOException {
        var14_1 = this.buffer;
        var9_2 = this.pos;
        var4_3 = this.limit;
        var6_4 = 0;
        var2_5 = 0;
        var3_6 = 1;
        var10_7 = 0L;
        var5_8 = false;
        do {
            block17 : {
                block19 : {
                    block15 : {
                        block16 : {
                            block18 : {
                                block14 : {
                                    var8_11 = var9_2;
                                    var7_10 = var4_3;
                                    if (var9_2 + var6_4 != var4_3) break block14;
                                    if (var6_4 == var14_1.length) {
                                        return 0;
                                    }
                                    if (!this.fillBuffer(var6_4 + 1)) ** GOTO lbl49
                                    var8_11 = this.pos;
                                    var7_10 = this.limit;
                                }
                                if ((var1_9 = var14_1[var8_11 + var6_4]) == '+') break block15;
                                if (var1_9 == 'E' || var1_9 == 'e') break block16;
                                switch (var1_9) {
                                    default: {
                                        if (var1_9 < '0' || var1_9 > '9') ** GOTO lbl48
                                        if (var2_5 == 1 || var2_5 == 0) ** GOTO lbl45
                                        if (var2_5 != 2) ** GOTO lbl32
                                        if (var10_7 == 0L) {
                                            return 0;
                                        }
                                        var12_12 = 10L * var10_7 - (long)(var1_9 - 48);
                                        var4_3 = var10_7 <= -922337203685477580L && (var10_7 != -922337203685477580L || var12_12 >= var10_7) ? 0 : 1;
                                        var4_3 &= var3_6;
                                        ** GOTO lbl-1000
lbl32: // 1 sources:
                                        if (var2_5 != 3) ** GOTO lbl35
                                        var2_5 = 4;
                                        break block17;
lbl35: // 1 sources:
                                        if (var2_5 != 5) {
                                            var4_3 = var3_6;
                                            var12_12 = var10_7;
                                            ** if (var2_5 == 6) goto lbl-1000
                                        }
                                        ** GOTO lbl-1000
lbl-1000: // 2 sources:
                                        {
                                            var3_6 = var4_3;
                                            var10_7 = var12_12;
                                            ** GOTO lbl82
                                        }
lbl-1000: // 2 sources:
                                        {
                                            var2_5 = 7;
                                        }
                                        break block17;
lbl45: // 1 sources:
                                        var10_7 = - var1_9 - 48;
                                        var2_5 = 2;
                                        break block17;
lbl48: // 1 sources:
                                        if (this.isLiteral(var1_9) != false) return 0;
lbl49: // 2 sources:
                                        if (!(var2_5 != 2 || var3_6 == 0 || var10_7 == Long.MIN_VALUE && !var5_8 || var10_7 == 0L && var5_8)) {
                                            if (!var5_8) {
                                                var10_7 = - var10_7;
                                            }
                                            this.peekedLong = var10_7;
                                            this.pos += var6_4;
                                            this.peeked = 15;
                                            return 15;
                                        }
                                        if (var2_5 != 2 && var2_5 != 4) {
                                            if (var2_5 != 7) return 0;
                                        }
                                        this.peekedNumberLength = var6_4;
                                        this.peeked = 16;
                                        return 16;
                                    }
                                    case '.': {
                                        if (var2_5 != 2) return 0;
                                        var2_5 = 3;
                                        break block17;
                                    }
                                    case '-': 
                                }
                                if (var2_5 != 0) break block18;
                                var2_5 = 1;
                                var5_8 = true;
                                break block17;
                            }
                            if (var2_5 != 5) return 0;
                            break block19;
                        }
                        if (var2_5 != 2) {
                            if (var2_5 != 4) return 0;
                        }
                        var2_5 = 5;
                        break block17;
                    }
                    if (var2_5 != 5) return 0;
                }
                var2_5 = 6;
            }
            ++var6_4;
            var9_2 = var8_11;
            var4_3 = var7_10;
        } while (true);
    }

    private void push(int n) {
        int[] arrn;
        if (this.stackSize == this.stack.length) {
            arrn = new int[this.stackSize * 2];
            int[] arrn2 = new int[this.stackSize * 2];
            String[] arrstring = new String[this.stackSize * 2];
            System.arraycopy(this.stack, 0, arrn, 0, this.stackSize);
            System.arraycopy(this.pathIndices, 0, arrn2, 0, this.stackSize);
            System.arraycopy(this.pathNames, 0, arrstring, 0, this.stackSize);
            this.stack = arrn;
            this.pathIndices = arrn2;
            this.pathNames = arrstring;
        }
        arrn = this.stack;
        int n2 = this.stackSize;
        this.stackSize = n2 + 1;
        arrn[n2] = n;
    }

    private char readEscapeCharacter() throws IOException {
        if (this.pos == this.limit && !this.fillBuffer(1)) {
            throw this.syntaxError("Unterminated escape sequence");
        }
        Object object = this.buffer;
        int n = this.pos;
        this.pos = n + 1;
        char c = object[n];
        if (c != '\n') {
            if (c != '\"' && c != '\'' && c != '/' && c != '\\') {
                if (c != 'b') {
                    if (c != 'f') {
                        if (c != 'n') {
                            if (c != 'r') {
                                switch (c) {
                                    default: {
                                        throw this.syntaxError("Invalid escape sequence");
                                    }
                                    case 'u': {
                                        int n2;
                                        if (this.pos + 4 > this.limit && !this.fillBuffer(4)) {
                                            throw this.syntaxError("Unterminated escape sequence");
                                        }
                                        c = '\u0000';
                                        for (n = n2 = this.pos; n < n2 + 4; ++n) {
                                            char c2 = this.buffer[n];
                                            char c3 = (char)(c << 4);
                                            if (c2 >= '0' && c2 <= '9') {
                                                c = (char)(c3 + (c2 - 48));
                                                continue;
                                            }
                                            if (c2 >= 'a' && c2 <= 'f') {
                                                c = (char)(c3 + (c2 - 97 + 10));
                                                continue;
                                            }
                                            if (c2 >= 'A' && c2 <= 'F') {
                                                c = (char)(c3 + (c2 - 65 + 10));
                                                continue;
                                            }
                                            object = new StringBuilder();
                                            object.append("\\u");
                                            object.append(new String(this.buffer, this.pos, 4));
                                            throw new NumberFormatException(object.toString());
                                        }
                                        this.pos += 4;
                                        return c;
                                    }
                                    case 't': 
                                }
                                return '\t';
                            }
                            return '\r';
                        }
                        return '\n';
                    }
                    return '\f';
                }
                return '\b';
            }
        } else {
            ++this.lineNumber;
            this.lineStart = this.pos;
        }
        return c;
    }

    private void skipQuotedValue(char c) throws IOException {
        char[] arrc = this.buffer;
        do {
            int n = this.pos;
            int n2 = this.limit;
            while (n < n2) {
                int n3 = n + 1;
                if ((n = arrc[n]) == c) {
                    this.pos = n3;
                    return;
                }
                if (n == 92) {
                    this.pos = n3;
                    this.readEscapeCharacter();
                    n = this.pos;
                    n2 = this.limit;
                    continue;
                }
                if (n == 10) {
                    ++this.lineNumber;
                    this.lineStart = n3;
                }
                n = n3;
            }
            this.pos = n;
        } while (this.fillBuffer(1));
        throw this.syntaxError("Unterminated string");
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Lifted jumps to return sites
     */
    private boolean skipTo(String var1_1) throws IOException {
        var3_2 = var1_1.length();
        block0 : do {
            block6 : {
                var4_4 = this.pos;
                var5_5 = this.limit;
                var2_3 = 0;
                if (var4_4 + var3_2 > var5_5) {
                    if (this.fillBuffer(var3_2) == false) return false;
                }
                if (this.buffer[this.pos] != '\n') break block6;
                ++this.lineNumber;
                this.lineStart = this.pos + 1;
                ** GOTO lbl15
            }
            while (var2_3 < var3_2) {
                block7 : {
                    if (this.buffer[this.pos + var2_3] == var1_1.charAt(var2_3)) break block7;
lbl15: // 2 sources:
                    ++this.pos;
                    continue block0;
                }
                ++var2_3;
            }
            return true;
            break;
        } while (true);
    }

    private void skipToEndOfLine() throws IOException {
        while (this.pos < this.limit || this.fillBuffer(1)) {
            char[] arrc = this.buffer;
            int n = this.pos;
            this.pos = n + 1;
            if ((n = arrc[n]) == 10) {
                ++this.lineNumber;
                this.lineStart = this.pos;
                return;
            }
            if (n != 13) continue;
        }
    }

    private void skipUnquotedValue() throws IOException {
        do {
            int n = 0;
            block5 : while (this.pos + n < this.limit) {
                switch (this.buffer[this.pos + n]) {
                    default: {
                        ++n;
                        continue block5;
                    }
                    case '#': 
                    case '/': 
                    case ';': 
                    case '=': 
                    case '\\': {
                        this.checkLenient();
                    }
                    case '\t': 
                    case '\n': 
                    case '\f': 
                    case '\r': 
                    case ' ': 
                    case ',': 
                    case ':': 
                    case '[': 
                    case ']': 
                    case '{': 
                    case '}': 
                }
                this.pos += n;
                return;
            }
            this.pos += n;
        } while (this.fillBuffer(1));
    }

    private IOException syntaxError(String string2) throws IOException {
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append(string2);
        stringBuilder.append(this.locationString());
        throw new MalformedJsonException(stringBuilder.toString());
    }

    public void beginArray() throws IOException {
        int n;
        int n2 = n = this.peeked;
        if (n == 0) {
            n2 = this.doPeek();
        }
        if (n2 == 3) {
            this.push(1);
            this.pathIndices[this.stackSize - 1] = 0;
            this.peeked = 0;
            return;
        }
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("Expected BEGIN_ARRAY but was ");
        stringBuilder.append((Object)this.peek());
        stringBuilder.append(this.locationString());
        throw new IllegalStateException(stringBuilder.toString());
    }

    public void beginObject() throws IOException {
        int n;
        int n2 = n = this.peeked;
        if (n == 0) {
            n2 = this.doPeek();
        }
        if (n2 == 1) {
            this.push(3);
            this.peeked = 0;
            return;
        }
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("Expected BEGIN_OBJECT but was ");
        stringBuilder.append((Object)this.peek());
        stringBuilder.append(this.locationString());
        throw new IllegalStateException(stringBuilder.toString());
    }

    @Override
    public void close() throws IOException {
        this.peeked = 0;
        this.stack[0] = 8;
        this.stackSize = 1;
        this.in.close();
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Lifted jumps to return sites
     */
    int doPeek() throws IOException {
        block36 : {
            block34 : {
                block35 : {
                    block33 : {
                        var1_1 = this.stack[this.stackSize - 1];
                        if (var1_1 != 1) break block33;
                        this.stack[this.stackSize - 1] = 2;
                        break block34;
                    }
                    if (var1_1 != 2) break block35;
                    var2_2 = this.nextNonWhitespace(true);
                    if (var2_2 != 44) {
                        if (var2_2 != 59) {
                            if (var2_2 != 93) {
                                throw this.syntaxError("Unterminated array");
                            }
                            this.peeked = 4;
                            return 4;
                        }
                        this.checkLenient();
                    }
                    break block34;
                }
                if (var1_1 != 3 && var1_1 != 5) {
                    if (var1_1 == 4) {
                        this.stack[this.stackSize - 1] = 5;
                        var2_2 = this.nextNonWhitespace(true);
                        if (var2_2 != 58) {
                            if (var2_2 != 61) {
                                throw this.syntaxError("Expected ':'");
                            }
                            this.checkLenient();
                            if ((this.pos < this.limit || this.fillBuffer(1)) && this.buffer[this.pos] == '>') {
                                ++this.pos;
                            }
                        }
                    } else if (var1_1 == 6) {
                        if (this.lenient) {
                            this.consumeNonExecutePrefix();
                        }
                        this.stack[this.stackSize - 1] = 7;
                    } else if (var1_1 == 7) {
                        if (this.nextNonWhitespace(false) == -1) {
                            this.peeked = 17;
                            return 17;
                        }
                        this.checkLenient();
                        --this.pos;
                    } else if (var1_1 == 8) {
                        throw new IllegalStateException("JsonReader is closed");
                    } else {
                        ** GOTO lbl43
                    }
                }
                break block36;
            }
            var2_2 = this.nextNonWhitespace(true);
            if (var2_2 == 34) {
                this.peeked = 9;
                return 9;
            }
            if (var2_2 == 39) {
                this.checkLenient();
                this.peeked = 8;
                return 8;
            }
            if (var2_2 != 44 && var2_2 != 59) {
                if (var2_2 == 91) {
                    this.peeked = 3;
                    return 3;
                }
                if (var2_2 != 93) {
                    if (var2_2 == 123) {
                        this.peeked = 1;
                        return 1;
                    }
                    --this.pos;
                    var1_1 = this.peekKeyword();
                    if (var1_1 != 0) {
                        return var1_1;
                    }
                    var1_1 = this.peekNumber();
                    if (var1_1 != 0) {
                        return var1_1;
                    }
                    if (!this.isLiteral(this.buffer[this.pos])) {
                        throw this.syntaxError("Expected value");
                    }
                    this.checkLenient();
                    this.peeked = 10;
                    return 10;
                }
                if (var1_1 == 1) {
                    this.peeked = 4;
                    return 4;
                }
            }
            if (var1_1 != 1) {
                if (var1_1 != 2) throw this.syntaxError("Unexpected value");
            }
            this.checkLenient();
            --this.pos;
            this.peeked = 7;
            return 7;
        }
        this.stack[this.stackSize - 1] = 4;
        if (var1_1 == 5 && (var2_3 = this.nextNonWhitespace(true)) != 44) {
            if (var2_3 != 59) {
                if (var2_3 != 125) {
                    throw this.syntaxError("Unterminated object");
                }
                this.peeked = 2;
                return 2;
            }
            this.checkLenient();
        }
        if ((var2_3 = this.nextNonWhitespace(true)) == 34) {
            this.peeked = 13;
            return 13;
        }
        if (var2_3 == 39) {
            this.checkLenient();
            this.peeked = 12;
            return 12;
        }
        if (var2_3 != 125) {
            this.checkLenient();
            --this.pos;
            if (this.isLiteral((char)var2_3) == false) throw this.syntaxError("Expected name");
            this.peeked = 14;
            return 14;
        }
        if (var1_1 == 5) throw this.syntaxError("Expected name");
        this.peeked = 2;
        return 2;
    }

    public void endArray() throws IOException {
        int n;
        int n2 = n = this.peeked;
        if (n == 0) {
            n2 = this.doPeek();
        }
        if (n2 == 4) {
            --this.stackSize;
            int[] arrn = this.pathIndices;
            n2 = this.stackSize - 1;
            arrn[n2] = arrn[n2] + 1;
            this.peeked = 0;
            return;
        }
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("Expected END_ARRAY but was ");
        stringBuilder.append((Object)this.peek());
        stringBuilder.append(this.locationString());
        throw new IllegalStateException(stringBuilder.toString());
    }

    public void endObject() throws IOException {
        int n;
        int n2 = n = this.peeked;
        if (n == 0) {
            n2 = this.doPeek();
        }
        if (n2 == 2) {
            --this.stackSize;
            this.pathNames[this.stackSize] = null;
            int[] arrn = this.pathIndices;
            n2 = this.stackSize - 1;
            arrn[n2] = arrn[n2] + 1;
            this.peeked = 0;
            return;
        }
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("Expected END_OBJECT but was ");
        stringBuilder.append((Object)this.peek());
        stringBuilder.append(this.locationString());
        throw new IllegalStateException(stringBuilder.toString());
    }

    public String getPath() {
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append('$');
        int n = this.stackSize;
        block4 : for (int i = 0; i < n; ++i) {
            switch (this.stack[i]) {
                default: {
                    continue block4;
                }
                case 3: 
                case 4: 
                case 5: {
                    stringBuilder.append('.');
                    if (this.pathNames[i] == null) continue block4;
                    stringBuilder.append(this.pathNames[i]);
                    continue block4;
                }
                case 1: 
                case 2: {
                    stringBuilder.append('[');
                    stringBuilder.append(this.pathIndices[i]);
                    stringBuilder.append(']');
                }
            }
        }
        return stringBuilder.toString();
    }

    public boolean hasNext() throws IOException {
        int n;
        int n2 = n = this.peeked;
        if (n == 0) {
            n2 = this.doPeek();
        }
        if (n2 != 2 && n2 != 4) {
            return true;
        }
        return false;
    }

    public final boolean isLenient() {
        return this.lenient;
    }

    String locationString() {
        int n = this.lineNumber;
        int n2 = this.pos;
        int n3 = this.lineStart;
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append(" at line ");
        stringBuilder.append(n + 1);
        stringBuilder.append(" column ");
        stringBuilder.append(n2 - n3 + 1);
        stringBuilder.append(" path ");
        stringBuilder.append(this.getPath());
        return stringBuilder.toString();
    }

    public boolean nextBoolean() throws IOException {
        int n;
        int n2 = n = this.peeked;
        if (n == 0) {
            n2 = this.doPeek();
        }
        if (n2 == 5) {
            this.peeked = 0;
            int[] arrn = this.pathIndices;
            n2 = this.stackSize - 1;
            arrn[n2] = arrn[n2] + 1;
            return true;
        }
        if (n2 == 6) {
            this.peeked = 0;
            int[] arrn = this.pathIndices;
            n2 = this.stackSize - 1;
            arrn[n2] = arrn[n2] + 1;
            return false;
        }
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("Expected a boolean but was ");
        stringBuilder.append((Object)this.peek());
        stringBuilder.append(this.locationString());
        throw new IllegalStateException(stringBuilder.toString());
    }

    public double nextDouble() throws IOException {
        int n;
        int n2 = n = this.peeked;
        if (n == 0) {
            n2 = this.doPeek();
        }
        if (n2 == 15) {
            this.peeked = 0;
            int[] arrn = this.pathIndices;
            n2 = this.stackSize - 1;
            arrn[n2] = arrn[n2] + 1;
            return this.peekedLong;
        }
        if (n2 == 16) {
            this.peekedString = new String(this.buffer, this.pos, this.peekedNumberLength);
            this.pos += this.peekedNumberLength;
        } else if (n2 != 8 && n2 != 9) {
            if (n2 == 10) {
                this.peekedString = this.nextUnquotedValue();
            } else if (n2 != 11) {
                StringBuilder stringBuilder = new StringBuilder();
                stringBuilder.append("Expected a double but was ");
                stringBuilder.append((Object)this.peek());
                stringBuilder.append(this.locationString());
                throw new IllegalStateException(stringBuilder.toString());
            }
        } else {
            char c = n2 == 8 ? (char)'\'' : '\"';
            this.peekedString = this.nextQuotedValue(c);
        }
        this.peeked = 11;
        double d = Double.parseDouble(this.peekedString);
        if (!this.lenient && (Double.isNaN(d) || Double.isInfinite(d))) {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("JSON forbids NaN and infinities: ");
            stringBuilder.append(d);
            stringBuilder.append(this.locationString());
            throw new MalformedJsonException(stringBuilder.toString());
        }
        this.peekedString = null;
        this.peeked = 0;
        int[] arrn = this.pathIndices;
        n2 = this.stackSize - 1;
        arrn[n2] = arrn[n2] + 1;
        return d;
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public int nextInt() throws IOException {
        int n;
        int n2 = n = this.peeked;
        if (n == 0) {
            n2 = this.doPeek();
        }
        if (n2 == 15) {
            n2 = (int)this.peekedLong;
            if (this.peekedLong != (long)n2) {
                StringBuilder stringBuilder = new StringBuilder();
                stringBuilder.append("Expected an int but was ");
                stringBuilder.append(this.peekedLong);
                stringBuilder.append(this.locationString());
                throw new NumberFormatException(stringBuilder.toString());
            }
            this.peeked = 0;
            int[] arrn = this.pathIndices;
            n = this.stackSize - 1;
            arrn[n] = arrn[n] + 1;
            return n2;
        }
        if (n2 == 16) {
            this.peekedString = new String(this.buffer, this.pos, this.peekedNumberLength);
            this.pos += this.peekedNumberLength;
        } else {
            int[] arrn;
            if (n2 != 8 && n2 != 9 && n2 != 10) {
                StringBuilder stringBuilder = new StringBuilder();
                stringBuilder.append("Expected an int but was ");
                stringBuilder.append((Object)this.peek());
                stringBuilder.append(this.locationString());
                throw new IllegalStateException(stringBuilder.toString());
            }
            if (n2 == 10) {
                this.peekedString = this.nextUnquotedValue();
            } else {
                char c = n2 == 8 ? (char)'\'' : '\"';
                this.peekedString = this.nextQuotedValue(c);
            }
            try {
                n2 = Integer.parseInt(this.peekedString);
                this.peeked = 0;
                arrn = this.pathIndices;
                n = this.stackSize - 1;
            }
            catch (NumberFormatException numberFormatException) {}
            arrn[n] = arrn[n] + 1;
            return n2;
        }
        this.peeked = 11;
        double d = Double.parseDouble(this.peekedString);
        n2 = (int)d;
        if ((double)n2 != d) {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("Expected an int but was ");
            stringBuilder.append(this.peekedString);
            stringBuilder.append(this.locationString());
            throw new NumberFormatException(stringBuilder.toString());
        }
        this.peekedString = null;
        this.peeked = 0;
        int[] arrn = this.pathIndices;
        n = this.stackSize - 1;
        arrn[n] = arrn[n] + 1;
        return n2;
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public long nextLong() throws IOException {
        int n;
        int n2 = n = this.peeked;
        if (n == 0) {
            n2 = this.doPeek();
        }
        if (n2 == 15) {
            this.peeked = 0;
            int[] arrn = this.pathIndices;
            n2 = this.stackSize - 1;
            arrn[n2] = arrn[n2] + 1;
            return this.peekedLong;
        }
        if (n2 == 16) {
            this.peekedString = new String(this.buffer, this.pos, this.peekedNumberLength);
            this.pos += this.peekedNumberLength;
        } else {
            long l;
            int[] arrn;
            if (n2 != 8 && n2 != 9 && n2 != 10) {
                StringBuilder stringBuilder = new StringBuilder();
                stringBuilder.append("Expected a long but was ");
                stringBuilder.append((Object)this.peek());
                stringBuilder.append(this.locationString());
                throw new IllegalStateException(stringBuilder.toString());
            }
            if (n2 == 10) {
                this.peekedString = this.nextUnquotedValue();
            } else {
                char c = n2 == 8 ? (char)'\'' : '\"';
                this.peekedString = this.nextQuotedValue(c);
            }
            try {
                l = Long.parseLong(this.peekedString);
                this.peeked = 0;
                arrn = this.pathIndices;
                n2 = this.stackSize - 1;
            }
            catch (NumberFormatException numberFormatException) {}
            arrn[n2] = arrn[n2] + 1;
            return l;
        }
        this.peeked = 11;
        double d = Double.parseDouble(this.peekedString);
        long l = (long)d;
        if ((double)l != d) {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("Expected a long but was ");
            stringBuilder.append(this.peekedString);
            stringBuilder.append(this.locationString());
            throw new NumberFormatException(stringBuilder.toString());
        }
        this.peekedString = null;
        this.peeked = 0;
        int[] arrn = this.pathIndices;
        n2 = this.stackSize - 1;
        arrn[n2] = arrn[n2] + 1;
        return l;
    }

    public String nextName() throws IOException {
        block7 : {
            String string2;
            block5 : {
                int n;
                block6 : {
                    block4 : {
                        int n2;
                        n = n2 = this.peeked;
                        if (n2 == 0) {
                            n = this.doPeek();
                        }
                        if (n != 14) break block4;
                        string2 = this.nextUnquotedValue();
                        break block5;
                    }
                    if (n != 12) break block6;
                    string2 = this.nextQuotedValue('\'');
                    break block5;
                }
                if (n != 13) break block7;
                string2 = this.nextQuotedValue('\"');
            }
            this.peeked = 0;
            this.pathNames[this.stackSize - 1] = string2;
            return string2;
        }
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("Expected a name but was ");
        stringBuilder.append((Object)this.peek());
        stringBuilder.append(this.locationString());
        throw new IllegalStateException(stringBuilder.toString());
    }

    public void nextNull() throws IOException {
        int n;
        int n2 = n = this.peeked;
        if (n == 0) {
            n2 = this.doPeek();
        }
        if (n2 == 7) {
            this.peeked = 0;
            int[] arrn = this.pathIndices;
            n2 = this.stackSize - 1;
            arrn[n2] = arrn[n2] + 1;
            return;
        }
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("Expected null but was ");
        stringBuilder.append((Object)this.peek());
        stringBuilder.append(this.locationString());
        throw new IllegalStateException(stringBuilder.toString());
    }

    public String nextString() throws IOException {
        block10 : {
            String string2;
            int n;
            block5 : {
                block9 : {
                    block8 : {
                        block7 : {
                            block6 : {
                                block4 : {
                                    int n2;
                                    n = n2 = this.peeked;
                                    if (n2 == 0) {
                                        n = this.doPeek();
                                    }
                                    if (n != 10) break block4;
                                    string2 = this.nextUnquotedValue();
                                    break block5;
                                }
                                if (n != 8) break block6;
                                string2 = this.nextQuotedValue('\'');
                                break block5;
                            }
                            if (n != 9) break block7;
                            string2 = this.nextQuotedValue('\"');
                            break block5;
                        }
                        if (n != 11) break block8;
                        string2 = this.peekedString;
                        this.peekedString = null;
                        break block5;
                    }
                    if (n != 15) break block9;
                    string2 = Long.toString(this.peekedLong);
                    break block5;
                }
                if (n != 16) break block10;
                string2 = new String(this.buffer, this.pos, this.peekedNumberLength);
                this.pos += this.peekedNumberLength;
            }
            this.peeked = 0;
            int[] arrn = this.pathIndices;
            n = this.stackSize - 1;
            arrn[n] = arrn[n] + 1;
            return string2;
        }
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("Expected a string but was ");
        stringBuilder.append((Object)this.peek());
        stringBuilder.append(this.locationString());
        throw new IllegalStateException(stringBuilder.toString());
    }

    public JsonToken peek() throws IOException {
        int n;
        int n2 = n = this.peeked;
        if (n == 0) {
            n2 = this.doPeek();
        }
        switch (n2) {
            default: {
                throw new AssertionError();
            }
            case 17: {
                return JsonToken.END_DOCUMENT;
            }
            case 15: 
            case 16: {
                return JsonToken.NUMBER;
            }
            case 12: 
            case 13: 
            case 14: {
                return JsonToken.NAME;
            }
            case 8: 
            case 9: 
            case 10: 
            case 11: {
                return JsonToken.STRING;
            }
            case 7: {
                return JsonToken.NULL;
            }
            case 5: 
            case 6: {
                return JsonToken.BOOLEAN;
            }
            case 4: {
                return JsonToken.END_ARRAY;
            }
            case 3: {
                return JsonToken.BEGIN_ARRAY;
            }
            case 2: {
                return JsonToken.END_OBJECT;
            }
            case 1: 
        }
        return JsonToken.BEGIN_OBJECT;
    }

    public final void setLenient(boolean bl) {
        this.lenient = bl;
    }

    public void skipValue() throws IOException {
        int n;
        int n2 = 0;
        do {
            int n3 = n = this.peeked;
            if (n == 0) {
                n3 = this.doPeek();
            }
            if (n3 == 3) {
                this.push(1);
                n = n2 + 1;
            } else if (n3 == 1) {
                this.push(3);
                n = n2 + 1;
            } else if (n3 == 4) {
                --this.stackSize;
                n = n2 - 1;
            } else if (n3 == 2) {
                --this.stackSize;
                n = n2 - 1;
            } else if (n3 != 14 && n3 != 10) {
                if (n3 != 8 && n3 != 12) {
                    if (n3 != 9 && n3 != 13) {
                        n = n2;
                        if (n3 == 16) {
                            this.pos += this.peekedNumberLength;
                            n = n2;
                        }
                    } else {
                        this.skipQuotedValue('\"');
                        n = n2;
                    }
                } else {
                    this.skipQuotedValue('\'');
                    n = n2;
                }
            } else {
                this.skipUnquotedValue();
                n = n2;
            }
            this.peeked = 0;
            n2 = n;
        } while (n != 0);
        int[] arrn = this.pathIndices;
        n = this.stackSize - 1;
        arrn[n] = arrn[n] + 1;
        this.pathNames[this.stackSize - 1] = "null";
    }

    public String toString() {
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append(this.getClass().getSimpleName());
        stringBuilder.append(this.locationString());
        return stringBuilder.toString();
    }

}

