/*
 * Decompiled with CFR 0_132.
 */
package com.google.gson;

import com.google.gson.JsonSyntaxException;
import com.google.gson.TypeAdapter;
import com.google.gson.internal.bind.util.ISO8601Utils;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonToken;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.io.Serializable;
import java.sql.Timestamp;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.ParsePosition;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Locale;

final class DefaultDateTypeAdapter
extends TypeAdapter<Date> {
    private static final String SIMPLE_NAME = "DefaultDateTypeAdapter";
    private final Class<? extends Date> dateType;
    private final DateFormat enUsFormat;
    private final DateFormat localFormat;

    public DefaultDateTypeAdapter(int n, int n2) {
        this(Date.class, DateFormat.getDateTimeInstance(n, n2, Locale.US), DateFormat.getDateTimeInstance(n, n2));
    }

    DefaultDateTypeAdapter(Class<? extends Date> class_) {
        this(class_, DateFormat.getDateTimeInstance(2, 2, Locale.US), DateFormat.getDateTimeInstance(2, 2));
    }

    DefaultDateTypeAdapter(Class<? extends Date> class_, int n) {
        this(class_, DateFormat.getDateInstance(n, Locale.US), DateFormat.getDateInstance(n));
    }

    public DefaultDateTypeAdapter(Class<? extends Date> class_, int n, int n2) {
        this(class_, DateFormat.getDateTimeInstance(n, n2, Locale.US), DateFormat.getDateTimeInstance(n, n2));
    }

    DefaultDateTypeAdapter(Class<? extends Date> class_, String string2) {
        this(class_, new SimpleDateFormat(string2, Locale.US), new SimpleDateFormat(string2));
    }

    DefaultDateTypeAdapter(Class<? extends Date> class_, DateFormat serializable, DateFormat dateFormat) {
        if (class_ != Date.class && class_ != java.sql.Date.class && class_ != Timestamp.class) {
            serializable = new StringBuilder();
            serializable.append("Date type must be one of ");
            serializable.append(Date.class);
            serializable.append(", ");
            serializable.append(Timestamp.class);
            serializable.append(", or ");
            serializable.append(java.sql.Date.class);
            serializable.append(" but was ");
            serializable.append(class_);
            throw new IllegalArgumentException(serializable.toString());
        }
        this.dateType = class_;
        this.enUsFormat = serializable;
        this.localFormat = dateFormat;
    }

    /*
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Converted monitor instructions to comments
     * Lifted jumps to return sites
     */
    private Date deserializeToDate(String string2) {
        DateFormat dateFormat = this.localFormat;
        // MONITORENTER : dateFormat
        Date date = this.localFormat.parse(string2);
        // MONITOREXIT : dateFormat
        return date;
        catch (ParseException parseException) {}
        try {
            Date date2 = this.enUsFormat.parse(string2);
            // MONITOREXIT : dateFormat
            return date2;
        }
        catch (ParseException parseException) {}
        try {
            Date date3 = ISO8601Utils.parse(string2, new ParsePosition(0));
            // MONITOREXIT : dateFormat
            return date3;
        }
        catch (ParseException parseException) {
            throw new JsonSyntaxException(string2, parseException);
        }
    }

    @Override
    public Date read(JsonReader object) throws IOException {
        if (object.peek() == JsonToken.NULL) {
            object.nextNull();
            return null;
        }
        object = this.deserializeToDate(object.nextString());
        if (this.dateType == Date.class) {
            return object;
        }
        if (this.dateType == Timestamp.class) {
            return new Timestamp(object.getTime());
        }
        if (this.dateType == java.sql.Date.class) {
            return new java.sql.Date(object.getTime());
        }
        throw new AssertionError();
    }

    public String toString() {
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append(SIMPLE_NAME);
        stringBuilder.append('(');
        stringBuilder.append(this.localFormat.getClass().getSimpleName());
        stringBuilder.append(')');
        return stringBuilder.toString();
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @Override
    public void write(JsonWriter jsonWriter, Date date) throws IOException {
        if (date == null) {
            jsonWriter.nullValue();
            return;
        }
        DateFormat dateFormat = this.localFormat;
        synchronized (dateFormat) {
            jsonWriter.value(this.enUsFormat.format(date));
            return;
        }
    }
}

