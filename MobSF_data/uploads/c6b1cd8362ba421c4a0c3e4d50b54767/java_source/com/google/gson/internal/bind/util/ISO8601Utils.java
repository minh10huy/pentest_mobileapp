/*
 * Decompiled with CFR 0_132.
 */
package com.google.gson.internal.bind.util;

import java.text.ParseException;
import java.text.ParsePosition;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Locale;
import java.util.TimeZone;

public class ISO8601Utils {
    private static final TimeZone TIMEZONE_UTC = TimeZone.getTimeZone("UTC");
    private static final String UTC_ID = "UTC";

    private static boolean checkOffset(String string2, int n, char c) {
        if (n < string2.length() && string2.charAt(n) == c) {
            return true;
        }
        return false;
    }

    public static String format(Date date) {
        return ISO8601Utils.format(date, false, TIMEZONE_UTC);
    }

    public static String format(Date date, boolean bl) {
        return ISO8601Utils.format(date, bl, TIMEZONE_UTC);
    }

    /*
     * Enabled aggressive block sorting
     */
    public static String format(Date object, boolean bl, TimeZone timeZone) {
        GregorianCalendar gregorianCalendar = new GregorianCalendar(timeZone, Locale.US);
        gregorianCalendar.setTime((Date)object);
        int n = "yyyy-MM-ddThh:mm:ss".length();
        int n2 = bl ? ".sss".length() : 0;
        object = timeZone.getRawOffset() == 0 ? "Z" : "+hh:mm";
        int n3 = object.length();
        object = new StringBuilder(n + n2 + n3);
        ISO8601Utils.padInt((StringBuilder)object, gregorianCalendar.get(1), "yyyy".length());
        char c = '-';
        object.append('-');
        ISO8601Utils.padInt((StringBuilder)object, gregorianCalendar.get(2) + 1, "MM".length());
        object.append('-');
        ISO8601Utils.padInt((StringBuilder)object, gregorianCalendar.get(5), "dd".length());
        object.append('T');
        ISO8601Utils.padInt((StringBuilder)object, gregorianCalendar.get(11), "hh".length());
        object.append(':');
        ISO8601Utils.padInt((StringBuilder)object, gregorianCalendar.get(12), "mm".length());
        object.append(':');
        ISO8601Utils.padInt((StringBuilder)object, gregorianCalendar.get(13), "ss".length());
        if (bl) {
            object.append('.');
            ISO8601Utils.padInt((StringBuilder)object, gregorianCalendar.get(14), "sss".length());
        }
        if ((n2 = timeZone.getOffset(gregorianCalendar.getTimeInMillis())) == 0) {
            object.append('Z');
            return object.toString();
        }
        n3 = n2 / 60000;
        n = Math.abs(n3 / 60);
        n3 = Math.abs(n3 % 60);
        if (n2 >= 0) {
            c = '+';
        }
        object.append(c);
        ISO8601Utils.padInt((StringBuilder)object, n, "hh".length());
        object.append(':');
        ISO8601Utils.padInt((StringBuilder)object, n3, "mm".length());
        return object.toString();
    }

    private static int indexOfNonDigit(String string2, int n) {
        while (n < string2.length()) {
            char c = string2.charAt(n);
            if (c >= '0') {
                if (c > '9') {
                    return n;
                }
                ++n;
                continue;
            }
            return n;
        }
        return string2.length();
    }

    private static void padInt(StringBuilder stringBuilder, int n, int n2) {
        String string2 = Integer.toString(n);
        for (n = n2 - string2.length(); n > 0; --n) {
            stringBuilder.append('0');
        }
        stringBuilder.append(string2);
    }

    /*
     * Exception decompiling
     */
    public static Date parse(String var0, ParsePosition var1_1) throws ParseException {
        // This method has failed to decompile.  When submitting a bug report, please provide this stack trace, and (if you hold appropriate legal rights) the relevant class file.
        // org.benf.cfr.reader.util.ConfusedCFRException: First case is not immediately after switch.
        // org.benf.cfr.reader.bytecode.analysis.opgraph.op3rewriters.SwitchReplacer.examineSwitchContiguity(SwitchReplacer.java:366)
        // org.benf.cfr.reader.bytecode.analysis.opgraph.op3rewriters.SwitchReplacer.replaceRawSwitches(SwitchReplacer.java:65)
        // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisInner(CodeAnalyser.java:416)
        // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisOrWrapFail(CodeAnalyser.java:196)
        // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysis(CodeAnalyser.java:141)
        // org.benf.cfr.reader.entities.attributes.AttributeCode.analyse(AttributeCode.java:95)
        // org.benf.cfr.reader.entities.Method.analyse(Method.java:372)
        // org.benf.cfr.reader.entities.ClassFile.analyseMid(ClassFile.java:867)
        // org.benf.cfr.reader.entities.ClassFile.analyseTop(ClassFile.java:768)
        // org.benf.cfr.reader.Main.doJar(Main.java:141)
        // org.benf.cfr.reader.Main.main(Main.java:242)
        throw new IllegalStateException("Decompilation failed");
    }

    private static int parseInt(String string2, int n, int n2) throws NumberFormatException {
        if (n >= 0 && n2 <= string2.length() && n <= n2) {
            int n3;
            int n4;
            if (n < n2) {
                n3 = n + 1;
                n4 = Character.digit(string2.charAt(n), 10);
                if (n4 < 0) {
                    StringBuilder stringBuilder = new StringBuilder();
                    stringBuilder.append("Invalid number: ");
                    stringBuilder.append(string2.substring(n, n2));
                    throw new NumberFormatException(stringBuilder.toString());
                }
                n4 = - n4;
            } else {
                n3 = n;
                n4 = 0;
            }
            while (n3 < n2) {
                int n5 = Character.digit(string2.charAt(n3), 10);
                if (n5 < 0) {
                    StringBuilder stringBuilder = new StringBuilder();
                    stringBuilder.append("Invalid number: ");
                    stringBuilder.append(string2.substring(n, n2));
                    throw new NumberFormatException(stringBuilder.toString());
                }
                n4 = n4 * 10 - n5;
                ++n3;
            }
            return - n4;
        }
        throw new NumberFormatException(string2);
    }
}

