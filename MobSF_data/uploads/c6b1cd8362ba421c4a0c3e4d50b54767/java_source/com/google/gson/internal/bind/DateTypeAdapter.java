/*
 * Decompiled with CFR 0_132.
 */
package com.google.gson.internal.bind;

import com.google.gson.Gson;
import com.google.gson.JsonSyntaxException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.internal.bind.util.ISO8601Utils;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonToken;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.ParsePosition;
import java.util.Date;
import java.util.Locale;

public final class DateTypeAdapter
extends TypeAdapter<Date> {
    public static final TypeAdapterFactory FACTORY = new TypeAdapterFactory(){

        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {
            if (typeToken.getRawType() == Date.class) {
                return new DateTypeAdapter();
            }
            return null;
        }
    };
    private final DateFormat enUsFormat = DateFormat.getDateTimeInstance(2, 2, Locale.US);
    private final DateFormat localFormat = DateFormat.getDateTimeInstance(2, 2);

    /*
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Converted monitor instructions to comments
     * Lifted jumps to return sites
     */
    private Date deserializeToDate(String string2) {
        // MONITORENTER : this
        Date date = this.localFormat.parse(string2);
        // MONITOREXIT : this
        return date;
        catch (ParseException parseException) {}
        try {
            Date date2 = this.enUsFormat.parse(string2);
            // MONITOREXIT : this
            return date2;
        }
        catch (ParseException parseException) {}
        try {
            Date date3 = ISO8601Utils.parse(string2, new ParsePosition(0));
            // MONITOREXIT : this
            return date3;
        }
        catch (ParseException parseException) {
            throw new JsonSyntaxException(string2, parseException);
        }
    }

    @Override
    public Date read(JsonReader jsonReader) throws IOException {
        if (jsonReader.peek() == JsonToken.NULL) {
            jsonReader.nextNull();
            return null;
        }
        return this.deserializeToDate(jsonReader.nextString());
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @Override
    public void write(JsonWriter jsonWriter, Date date) throws IOException {
        synchronized (this) {
            Throwable throwable2;
            if (date == null) {
                try {
                    jsonWriter.nullValue();
                    return;
                }
                catch (Throwable throwable2) {}
            } else {
                jsonWriter.value(this.enUsFormat.format(date));
                return;
            }
            throw throwable2;
        }
    }

}

