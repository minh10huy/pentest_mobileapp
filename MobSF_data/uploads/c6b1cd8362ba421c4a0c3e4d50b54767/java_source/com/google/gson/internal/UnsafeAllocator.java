/*
 * Decompiled with CFR 0_132.
 */
package com.google.gson.internal;

import java.io.ObjectInputStream;
import java.io.ObjectStreamClass;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.lang.reflect.Modifier;

public abstract class UnsafeAllocator {
    static void assertInstantiable(Class<?> class_) {
        int n = class_.getModifiers();
        if (Modifier.isInterface(n)) {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("Interface can't be instantiated! Interface name: ");
            stringBuilder.append(class_.getName());
            throw new UnsupportedOperationException(stringBuilder.toString());
        }
        if (Modifier.isAbstract(n)) {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("Abstract class can't be instantiated! Class name: ");
            stringBuilder.append(class_.getName());
            throw new UnsupportedOperationException(stringBuilder.toString());
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public static UnsafeAllocator create() {
        try {
            Class<?> class_ = Class.forName("sun.misc.Unsafe");
            Object object = class_.getDeclaredField("theUnsafe");
            object.setAccessible(true);
            object = object.get(null);
            return new UnsafeAllocator(class_.getMethod("allocateInstance", Class.class), object){
                final /* synthetic */ Method val$allocateInstance;
                final /* synthetic */ Object val$unsafe;
                {
                    this.val$allocateInstance = method;
                    this.val$unsafe = object;
                }

                @Override
                public <T> T newInstance(Class<T> class_) throws Exception {
                    .assertInstantiable(class_);
                    return (T)this.val$allocateInstance.invoke(this.val$unsafe, class_);
                }
            };
        }
        catch (Exception exception) {}
        try {
            Object object = ObjectStreamClass.class.getDeclaredMethod("getConstructorId", Class.class);
            object.setAccessible(true);
            int n = (Integer)object.invoke(null, Object.class);
            object = ObjectStreamClass.class.getDeclaredMethod("newInstance", Class.class, Integer.TYPE);
            object.setAccessible(true);
            return new UnsafeAllocator((Method)object, n){
                final /* synthetic */ int val$constructorId;
                final /* synthetic */ Method val$newInstance;
                {
                    this.val$newInstance = method;
                    this.val$constructorId = n;
                }

                @Override
                public <T> T newInstance(Class<T> class_) throws Exception {
                    .assertInstantiable(class_);
                    return (T)this.val$newInstance.invoke(null, class_, this.val$constructorId);
                }
            };
        }
        catch (Exception exception) {}
        try {
            final Method method = ObjectInputStream.class.getDeclaredMethod("newInstance", Class.class, Class.class);
            method.setAccessible(true);
            return new UnsafeAllocator(){

                @Override
                public <T> T newInstance(Class<T> class_) throws Exception {
                    .assertInstantiable(class_);
                    return (T)method.invoke(null, class_, Object.class);
                }
            };
        }
        catch (Exception exception) {
            return new UnsafeAllocator(){

                @Override
                public <T> T newInstance(Class<T> class_) {
                    StringBuilder stringBuilder = new StringBuilder();
                    stringBuilder.append("Cannot allocate ");
                    stringBuilder.append(class_);
                    throw new UnsupportedOperationException(stringBuilder.toString());
                }
            };
        }
    }

    public abstract <T> T newInstance(Class<T> var1) throws Exception;

}

