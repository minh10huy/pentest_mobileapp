/*
 * Decompiled with CFR 0_132.
 */
package com.google.gson.internal;

import com.google.gson.internal.$Gson$Preconditions;
import java.io.Serializable;
import java.lang.reflect.Array;
import java.lang.reflect.GenericArrayType;
import java.lang.reflect.Modifier;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.lang.reflect.TypeVariable;
import java.lang.reflect.WildcardType;
import java.util.Arrays;
import java.util.Collection;
import java.util.HashSet;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Properties;

public final class $Gson$Types {
    static final Type[] EMPTY_TYPE_ARRAY = new Type[0];

    private $Gson$Types() {
        throw new UnsupportedOperationException();
    }

    public static GenericArrayType arrayOf(Type type) {
        return new GenericArrayTypeImpl(type);
    }

    public static Type canonicalize(Type type) {
        if (type instanceof Class) {
            Class class_ = (Class)type;
            type = class_;
            if (class_.isArray()) {
                type = new GenericArrayTypeImpl($Gson$Types.canonicalize(class_.getComponentType()));
            }
            return type;
        }
        if (type instanceof ParameterizedType) {
            type = (ParameterizedType)type;
            return new ParameterizedTypeImpl(type.getOwnerType(), type.getRawType(), type.getActualTypeArguments());
        }
        if (type instanceof GenericArrayType) {
            return new GenericArrayTypeImpl(((GenericArrayType)type).getGenericComponentType());
        }
        if (type instanceof WildcardType) {
            type = (WildcardType)type;
            return new WildcardTypeImpl(type.getUpperBounds(), type.getLowerBounds());
        }
        return type;
    }

    static void checkNotPrimitive(Type type) {
        boolean bl = !(type instanceof Class) || !((Class)type).isPrimitive();
        $Gson$Preconditions.checkArgument(bl);
    }

    private static Class<?> declaringClassOf(TypeVariable<?> typeVariable) {
        if ((typeVariable = typeVariable.getGenericDeclaration()) instanceof Class) {
            return (Class)((Object)typeVariable);
        }
        return null;
    }

    static boolean equal(Object object, Object object2) {
        if (!(object == object2 || object != null && object.equals(object2))) {
            return false;
        }
        return true;
    }

    public static boolean equals(Type type, Type type2) {
        if (type == type2) {
            return true;
        }
        if (type instanceof Class) {
            return type.equals(type2);
        }
        if (type instanceof ParameterizedType) {
            if (!(type2 instanceof ParameterizedType)) {
                return false;
            }
            type = (ParameterizedType)type;
            type2 = (ParameterizedType)type2;
            if ($Gson$Types.equal(type.getOwnerType(), type2.getOwnerType()) && type.getRawType().equals(type2.getRawType()) && Arrays.equals(type.getActualTypeArguments(), type2.getActualTypeArguments())) {
                return true;
            }
            return false;
        }
        if (type instanceof GenericArrayType) {
            if (!(type2 instanceof GenericArrayType)) {
                return false;
            }
            type = (GenericArrayType)type;
            type2 = (GenericArrayType)type2;
            return $Gson$Types.equals(type.getGenericComponentType(), type2.getGenericComponentType());
        }
        if (type instanceof WildcardType) {
            if (!(type2 instanceof WildcardType)) {
                return false;
            }
            type = (WildcardType)type;
            type2 = (WildcardType)type2;
            if (Arrays.equals(type.getUpperBounds(), type2.getUpperBounds()) && Arrays.equals(type.getLowerBounds(), type2.getLowerBounds())) {
                return true;
            }
            return false;
        }
        if (type instanceof TypeVariable) {
            if (!(type2 instanceof TypeVariable)) {
                return false;
            }
            type = (TypeVariable)type;
            type2 = (TypeVariable)type2;
            if (type.getGenericDeclaration() == type2.getGenericDeclaration() && type.getName().equals(type2.getName())) {
                return true;
            }
            return false;
        }
        return false;
    }

    public static Type getArrayComponentType(Type type) {
        if (type instanceof GenericArrayType) {
            return ((GenericArrayType)type).getGenericComponentType();
        }
        return ((Class)type).getComponentType();
    }

    public static Type getCollectionElementType(Type type, Class<?> type2) {
        type = type2 = $Gson$Types.getSupertype(type, type2, Collection.class);
        if (type2 instanceof WildcardType) {
            type = ((WildcardType)type2).getUpperBounds()[0];
        }
        if (type instanceof ParameterizedType) {
            return ((ParameterizedType)type).getActualTypeArguments()[0];
        }
        return Object.class;
    }

    static Type getGenericSupertype(Type object, Class<?> object2, Class<?> class_) {
        if (class_ == object2) {
            return object;
        }
        if (class_.isInterface()) {
            object = object2.getInterfaces();
            int n = ((Class<?>[])object).length;
            for (int i = 0; i < n; ++i) {
                if (object[i] == class_) {
                    return object2.getGenericInterfaces()[i];
                }
                if (!class_.isAssignableFrom(object[i])) continue;
                return $Gson$Types.getGenericSupertype(object2.getGenericInterfaces()[i], object[i], class_);
            }
        }
        if (!object2.isInterface()) {
            while (object2 != Object.class) {
                object = object2.getSuperclass();
                if (object == class_) {
                    return object2.getGenericSuperclass();
                }
                if (class_.isAssignableFrom((Class<?>)object)) {
                    return $Gson$Types.getGenericSupertype(object2.getGenericSuperclass(), object, class_);
                }
                object2 = object;
            }
        }
        return class_;
    }

    public static Type[] getMapKeyAndValueTypes(Type type, Class<?> class_) {
        if (type == Properties.class) {
            return new Type[]{String.class, String.class};
        }
        if ((type = $Gson$Types.getSupertype(type, class_, Map.class)) instanceof ParameterizedType) {
            return ((ParameterizedType)type).getActualTypeArguments();
        }
        return new Type[]{Object.class, Object.class};
    }

    public static Class<?> getRawType(Type type) {
        if (type instanceof Class) {
            return (Class)type;
        }
        if (type instanceof ParameterizedType) {
            type = ((ParameterizedType)type).getRawType();
            $Gson$Preconditions.checkArgument(type instanceof Class);
            return (Class)type;
        }
        if (type instanceof GenericArrayType) {
            return Array.newInstance($Gson$Types.getRawType(((GenericArrayType)type).getGenericComponentType()), 0).getClass();
        }
        if (type instanceof TypeVariable) {
            return Object.class;
        }
        if (type instanceof WildcardType) {
            return $Gson$Types.getRawType(((WildcardType)type).getUpperBounds()[0]);
        }
        String string2 = type == null ? "null" : type.getClass().getName();
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("Expected a Class, ParameterizedType, or GenericArrayType, but <");
        stringBuilder.append(type);
        stringBuilder.append("> is of type ");
        stringBuilder.append(string2);
        throw new IllegalArgumentException(stringBuilder.toString());
    }

    static Type getSupertype(Type type, Class<?> class_, Class<?> class_2) {
        $Gson$Preconditions.checkArgument(class_2.isAssignableFrom(class_));
        return $Gson$Types.resolve(type, class_, $Gson$Types.getGenericSupertype(type, class_, class_2));
    }

    static int hashCodeOrZero(Object object) {
        if (object != null) {
            return object.hashCode();
        }
        return 0;
    }

    private static int indexOf(Object[] arrobject, Object object) {
        int n = arrobject.length;
        for (int i = 0; i < n; ++i) {
            if (!object.equals(arrobject[i])) continue;
            return i;
        }
        throw new NoSuchElementException();
    }

    public static /* varargs */ ParameterizedType newParameterizedTypeWithOwner(Type type, Type type2, Type ... arrtype) {
        return new ParameterizedTypeImpl(type, type2, arrtype);
    }

    public static Type resolve(Type type, Class<?> class_, Type type2) {
        return $Gson$Types.resolve(type, class_, type2, new HashSet<TypeVariable>());
    }

    private static Type resolve(Type type, Class<?> class_, Type type2, Collection<TypeVariable> collection) {
        Object object;
        Type type3;
        while (type2 instanceof TypeVariable) {
            type3 = (TypeVariable)type2;
            if (collection.contains(type3)) {
                return type2;
            }
            collection.add((TypeVariable)type3);
            object = $Gson$Types.resolveTypeVariable(type, class_, type3);
            type2 = object;
            if (object != type3) continue;
            return object;
        }
        if (type2 instanceof Class && (object = (Class)type2).isArray()) {
            type2 = object.getComponentType();
            if (type2 == (type = $Gson$Types.resolve(type, class_, type2, collection))) {
                return object;
            }
            return $Gson$Types.arrayOf(type);
        }
        if (type2 instanceof GenericArrayType) {
            object = (type2 = (GenericArrayType)type2).getGenericComponentType();
            if (object == (type = $Gson$Types.resolve(type, class_, (Type)object, collection))) {
                return type2;
            }
            return $Gson$Types.arrayOf(type);
        }
        boolean bl = type2 instanceof ParameterizedType;
        if (bl) {
            type3 = (ParameterizedType)type2;
            type2 = type3.getOwnerType();
            Type type4 = $Gson$Types.resolve(type, class_, type2, collection);
            boolean bl2 = type4 != type2;
            type2 = type3.getActualTypeArguments();
            int n = ((Type)type2).length;
            for (int i = 0; i < n; ++i) {
                Type type5 = $Gson$Types.resolve(type, class_, type2[i], collection);
                boolean bl3 = bl2;
                object = type2;
                if (type5 != type2[i]) {
                    bl3 = bl2;
                    object = type2;
                    if (!bl2) {
                        object = (Type[])type2.clone();
                        bl3 = true;
                    }
                    object[i] = type5;
                }
                bl2 = bl3;
                type2 = object;
            }
            type = type3;
            if (bl2) {
                type = $Gson$Types.newParameterizedTypeWithOwner(type4, type3.getRawType(), (Type[])type2);
            }
            return type;
        }
        if (type2 instanceof WildcardType) {
            type2 = (WildcardType)type2;
            object = type2.getLowerBounds();
            type3 = type2.getUpperBounds();
            if (((Type[])object).length == 1) {
                if ((type = $Gson$Types.resolve(type, class_, object[0], collection)) != object[0]) {
                    return $Gson$Types.supertypeOf(type);
                }
            } else if (((Type)type3).length == 1 && (type = $Gson$Types.resolve(type, class_, type3[0], collection)) != type3[0]) {
                return $Gson$Types.subtypeOf(type);
            }
            return type2;
        }
        return type2;
    }

    static Type resolveTypeVariable(Type type, Class<?> class_, TypeVariable<?> typeVariable) {
        Class<?> class_2 = $Gson$Types.declaringClassOf(typeVariable);
        if (class_2 == null) {
            return typeVariable;
        }
        if ((type = $Gson$Types.getGenericSupertype(type, class_, class_2)) instanceof ParameterizedType) {
            int n = $Gson$Types.indexOf(class_2.getTypeParameters(), typeVariable);
            return ((ParameterizedType)type).getActualTypeArguments()[n];
        }
        return typeVariable;
    }

    public static WildcardType subtypeOf(Type arrtype) {
        arrtype = arrtype instanceof WildcardType ? ((WildcardType)arrtype).getUpperBounds() : new Type[]{arrtype};
        return new WildcardTypeImpl(arrtype, EMPTY_TYPE_ARRAY);
    }

    public static WildcardType supertypeOf(Type arrtype) {
        arrtype = arrtype instanceof WildcardType ? ((WildcardType)arrtype).getLowerBounds() : new Type[]{arrtype};
        return new WildcardTypeImpl(new Type[]{Object.class}, arrtype);
    }

    public static String typeToString(Type type) {
        if (type instanceof Class) {
            return ((Class)type).getName();
        }
        return type.toString();
    }

    private static final class GenericArrayTypeImpl
    implements GenericArrayType,
    Serializable {
        private static final long serialVersionUID = 0L;
        private final Type componentType;

        public GenericArrayTypeImpl(Type type) {
            this.componentType = $Gson$Types.canonicalize(type);
        }

        public boolean equals(Object object) {
            if (object instanceof GenericArrayType && $Gson$Types.equals(this, (GenericArrayType)object)) {
                return true;
            }
            return false;
        }

        @Override
        public Type getGenericComponentType() {
            return this.componentType;
        }

        public int hashCode() {
            return this.componentType.hashCode();
        }

        public String toString() {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append($Gson$Types.typeToString(this.componentType));
            stringBuilder.append("[]");
            return stringBuilder.toString();
        }
    }

    private static final class ParameterizedTypeImpl
    implements ParameterizedType,
    Serializable {
        private static final long serialVersionUID = 0L;
        private final Type ownerType;
        private final Type rawType;
        private final Type[] typeArguments;

        public /* varargs */ ParameterizedTypeImpl(Type type, Type type2, Type ... arrtype) {
            int n;
            boolean bl = type2 instanceof Class;
            int n2 = 0;
            if (bl) {
                Class class_ = (Class)type2;
                bl = Modifier.isStatic(class_.getModifiers());
                boolean bl2 = true;
                n = !bl && class_.getEnclosingClass() != null ? 0 : 1;
                bl = bl2;
                if (type == null) {
                    bl = n != 0 ? bl2 : false;
                }
                $Gson$Preconditions.checkArgument(bl);
            }
            type = type == null ? null : $Gson$Types.canonicalize(type);
            this.ownerType = type;
            this.rawType = $Gson$Types.canonicalize(type2);
            this.typeArguments = (Type[])arrtype.clone();
            int n3 = this.typeArguments.length;
            for (n = n2; n < n3; ++n) {
                $Gson$Preconditions.checkNotNull(this.typeArguments[n]);
                $Gson$Types.checkNotPrimitive(this.typeArguments[n]);
                this.typeArguments[n] = $Gson$Types.canonicalize(this.typeArguments[n]);
            }
        }

        public boolean equals(Object object) {
            if (object instanceof ParameterizedType && $Gson$Types.equals(this, (ParameterizedType)object)) {
                return true;
            }
            return false;
        }

        @Override
        public Type[] getActualTypeArguments() {
            return (Type[])this.typeArguments.clone();
        }

        @Override
        public Type getOwnerType() {
            return this.ownerType;
        }

        @Override
        public Type getRawType() {
            return this.rawType;
        }

        public int hashCode() {
            return Arrays.hashCode(this.typeArguments) ^ this.rawType.hashCode() ^ $Gson$Types.hashCodeOrZero(this.ownerType);
        }

        public String toString() {
            int n = this.typeArguments.length;
            if (n == 0) {
                return $Gson$Types.typeToString(this.rawType);
            }
            StringBuilder stringBuilder = new StringBuilder((n + 1) * 30);
            stringBuilder.append($Gson$Types.typeToString(this.rawType));
            stringBuilder.append("<");
            stringBuilder.append($Gson$Types.typeToString(this.typeArguments[0]));
            for (int i = 1; i < n; ++i) {
                stringBuilder.append(", ");
                stringBuilder.append($Gson$Types.typeToString(this.typeArguments[i]));
            }
            stringBuilder.append(">");
            return stringBuilder.toString();
        }
    }

    private static final class WildcardTypeImpl
    implements WildcardType,
    Serializable {
        private static final long serialVersionUID = 0L;
        private final Type lowerBound;
        private final Type upperBound;

        public WildcardTypeImpl(Type[] arrtype, Type[] arrtype2) {
            int n = arrtype2.length;
            boolean bl = true;
            boolean bl2 = n <= 1;
            $Gson$Preconditions.checkArgument(bl2);
            bl2 = arrtype.length == 1;
            $Gson$Preconditions.checkArgument(bl2);
            if (arrtype2.length == 1) {
                $Gson$Preconditions.checkNotNull(arrtype2[0]);
                $Gson$Types.checkNotPrimitive(arrtype2[0]);
                bl2 = arrtype[0] == Object.class ? bl : false;
                $Gson$Preconditions.checkArgument(bl2);
                this.lowerBound = $Gson$Types.canonicalize(arrtype2[0]);
                this.upperBound = Object.class;
                return;
            }
            $Gson$Preconditions.checkNotNull(arrtype[0]);
            $Gson$Types.checkNotPrimitive(arrtype[0]);
            this.lowerBound = null;
            this.upperBound = $Gson$Types.canonicalize(arrtype[0]);
        }

        public boolean equals(Object object) {
            if (object instanceof WildcardType && $Gson$Types.equals(this, (WildcardType)object)) {
                return true;
            }
            return false;
        }

        @Override
        public Type[] getLowerBounds() {
            if (this.lowerBound != null) {
                return new Type[]{this.lowerBound};
            }
            return $Gson$Types.EMPTY_TYPE_ARRAY;
        }

        @Override
        public Type[] getUpperBounds() {
            return new Type[]{this.upperBound};
        }

        public int hashCode() {
            int n = this.lowerBound != null ? this.lowerBound.hashCode() + 31 : 1;
            return n ^ this.upperBound.hashCode() + 31;
        }

        public String toString() {
            if (this.lowerBound != null) {
                StringBuilder stringBuilder = new StringBuilder();
                stringBuilder.append("? super ");
                stringBuilder.append($Gson$Types.typeToString(this.lowerBound));
                return stringBuilder.toString();
            }
            if (this.upperBound == Object.class) {
                return "?";
            }
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("? extends ");
            stringBuilder.append($Gson$Types.typeToString(this.upperBound));
            return stringBuilder.toString();
        }
    }

}

