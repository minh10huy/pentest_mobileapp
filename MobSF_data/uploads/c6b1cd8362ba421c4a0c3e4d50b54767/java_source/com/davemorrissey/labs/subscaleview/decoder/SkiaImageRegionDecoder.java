/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.content.ContentResolver
 *  android.content.Context
 *  android.content.pm.PackageManager
 *  android.content.res.AssetManager
 *  android.content.res.Resources
 *  android.graphics.Bitmap
 *  android.graphics.Bitmap$Config
 *  android.graphics.BitmapFactory
 *  android.graphics.BitmapFactory$Options
 *  android.graphics.BitmapRegionDecoder
 *  android.graphics.Point
 *  android.graphics.Rect
 *  android.net.Uri
 *  android.os.Build
 *  android.os.Build$VERSION
 *  android.text.TextUtils
 */
package com.davemorrissey.labs.subscaleview.decoder;

import android.content.ContentResolver;
import android.content.Context;
import android.content.pm.PackageManager;
import android.content.res.AssetManager;
import android.content.res.Resources;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.BitmapRegionDecoder;
import android.graphics.Point;
import android.graphics.Rect;
import android.net.Uri;
import android.os.Build;
import android.support.annotation.Keep;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.text.TextUtils;
import com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView;
import com.davemorrissey.labs.subscaleview.decoder.ImageRegionDecoder;
import java.io.InputStream;
import java.util.List;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReadWriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock;

public class SkiaImageRegionDecoder
implements ImageRegionDecoder {
    private static final String ASSET_PREFIX = "file:///android_asset/";
    private static final String FILE_PREFIX = "file://";
    private static final String RESOURCE_PREFIX = "android.resource://";
    private final Bitmap.Config bitmapConfig;
    private BitmapRegionDecoder decoder;
    private final ReadWriteLock decoderLock = new ReentrantReadWriteLock(true);

    @Keep
    public SkiaImageRegionDecoder() {
        this(null);
    }

    public SkiaImageRegionDecoder(@Nullable Bitmap.Config config) {
        Bitmap.Config config2 = SubsamplingScaleImageView.getPreferredBitmapConfig();
        if (config != null) {
            this.bitmapConfig = config;
            return;
        }
        if (config2 != null) {
            this.bitmapConfig = config2;
            return;
        }
        this.bitmapConfig = Bitmap.Config.RGB_565;
    }

    private Lock getDecodeLock() {
        if (Build.VERSION.SDK_INT < 21) {
            return this.decoderLock.writeLock();
        }
        return this.decoderLock.readLock();
    }

    @NonNull
    @Override
    public Bitmap decodeRegion(@NonNull Rect rect, int n) {
        block4 : {
            block5 : {
                this.getDecodeLock().lock();
                try {
                    if (this.decoder == null || this.decoder.isRecycled()) break block4;
                    BitmapFactory.Options options = new BitmapFactory.Options();
                    options.inSampleSize = n;
                    options.inPreferredConfig = this.bitmapConfig;
                    if ((rect = this.decoder.decodeRegion(rect, options)) != null) break block5;
                }
                catch (Throwable throwable) {
                    this.getDecodeLock().unlock();
                    throw throwable;
                }
                throw new RuntimeException("Skia image decoder returned null bitmap - image format may not be supported");
            }
            this.getDecodeLock().unlock();
            return rect;
        }
        throw new IllegalStateException("Cannot decode region after decoder has been recycled");
    }

    /*
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    @NonNull
    @Override
    public Point init(Context context, @NonNull Uri object) throws Exception {
        int n;
        block13 : {
            block16 : {
                void var1_4;
                block17 : {
                    String string2;
                    block14 : {
                        block15 : {
                            string2 = object.toString();
                            if (!string2.startsWith(RESOURCE_PREFIX)) break block14;
                            String string3 = object.getAuthority();
                            string2 = context.getPackageName().equals(string3) ? context.getResources() : context.getPackageManager().getResourcesForApplication(string3);
                            n = (object = object.getPathSegments()).size();
                            if (n != 2 || !((String)object.get(0)).equals("drawable")) break block15;
                            n = string2.getIdentifier((String)object.get(1), "drawable", string3);
                            break block13;
                        }
                        if (n == 1 && TextUtils.isDigitsOnly((CharSequence)((CharSequence)object.get(0)))) {
                            n = Integer.parseInt((String)object.get(0));
                            break block13;
                        }
                        break block16;
                    }
                    if (string2.startsWith(ASSET_PREFIX)) {
                        object = string2.substring(ASSET_PREFIX.length());
                        this.decoder = BitmapRegionDecoder.newInstance((InputStream)context.getAssets().open((String)object, 1), (boolean)false);
                        return new Point(this.decoder.getWidth(), this.decoder.getHeight());
                    }
                    if (string2.startsWith(FILE_PREFIX)) {
                        this.decoder = BitmapRegionDecoder.newInstance((String)string2.substring(FILE_PREFIX.length()), (boolean)false);
                        return new Point(this.decoder.getWidth(), this.decoder.getHeight());
                    }
                    object = context.getContentResolver().openInputStream((Uri)object);
                    try {
                        this.decoder = BitmapRegionDecoder.newInstance((InputStream)object, (boolean)false);
                        if (object == null) return new Point(this.decoder.getWidth(), this.decoder.getHeight());
                    }
                    catch (Throwable throwable) {}
                    try {
                        object.close();
                    }
                    catch (Exception exception) {
                        return new Point(this.decoder.getWidth(), this.decoder.getHeight());
                    }
                    return new Point(this.decoder.getWidth(), this.decoder.getHeight());
                    break block17;
                    catch (Throwable throwable) {
                        object = null;
                    }
                }
                if (object == null) throw var1_4;
                try {
                    object.close();
                }
                catch (Exception exception) {
                    throw var1_4;
                }
                throw var1_4;
                catch (NumberFormatException numberFormatException) {}
            }
            n = 0;
        }
        this.decoder = BitmapRegionDecoder.newInstance((InputStream)context.getResources().openRawResource(n), (boolean)false);
        return new Point(this.decoder.getWidth(), this.decoder.getHeight());
    }

    @Override
    public boolean isReady() {
        synchronized (this) {
            boolean bl;
            bl = this.decoder != null && !(bl = this.decoder.isRecycled());
            return bl;
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @Override
    public void recycle() {
        synchronized (this) {
            this.decoderLock.writeLock().lock();
            try {
                this.decoder.recycle();
                this.decoder = null;
                return;
            }
            finally {
                this.decoderLock.writeLock().unlock();
            }
        }
    }
}

