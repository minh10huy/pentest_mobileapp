/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.content.Context
 *  android.content.res.Resources
 *  android.graphics.Bitmap
 *  android.graphics.drawable.BitmapDrawable
 *  android.graphics.drawable.Drawable
 *  android.view.View
 *  android.view.animation.Animation
 */
package com.bumptech.glide.request.animation;

import android.content.Context;
import android.content.res.Resources;
import android.graphics.Bitmap;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.Drawable;
import android.view.View;
import android.view.animation.Animation;
import com.bumptech.glide.request.animation.DrawableCrossFadeFactory;
import com.bumptech.glide.request.animation.GlideAnimation;
import com.bumptech.glide.request.animation.GlideAnimationFactory;

public abstract class BitmapContainerCrossFadeFactory<T>
implements GlideAnimationFactory<T> {
    private final GlideAnimationFactory<Drawable> realFactory;

    public BitmapContainerCrossFadeFactory() {
        this(new DrawableCrossFadeFactory<Drawable>());
    }

    public BitmapContainerCrossFadeFactory(int n) {
        this(new DrawableCrossFadeFactory<Drawable>(n));
    }

    public BitmapContainerCrossFadeFactory(Context context, int n, int n2) {
        this(new DrawableCrossFadeFactory<Drawable>(context, n, n2));
    }

    public BitmapContainerCrossFadeFactory(Animation animation, int n) {
        this(new DrawableCrossFadeFactory<Drawable>(animation, n));
    }

    public BitmapContainerCrossFadeFactory(GlideAnimationFactory<Drawable> glideAnimationFactory) {
        this.realFactory = glideAnimationFactory;
    }

    @Override
    public GlideAnimation<T> build(boolean bl, boolean bl2) {
        return new BitmapGlideAnimation(this.realFactory.build(bl, bl2));
    }

    protected abstract Bitmap getBitmap(T var1);

    private class BitmapGlideAnimation
    implements GlideAnimation<T> {
        private final GlideAnimation<Drawable> transition;

        public BitmapGlideAnimation(GlideAnimation<Drawable> glideAnimation) {
            this.transition = glideAnimation;
        }

        @Override
        public boolean animate(T object, GlideAnimation.ViewAdapter viewAdapter) {
            object = new BitmapDrawable(viewAdapter.getView().getResources(), BitmapContainerCrossFadeFactory.this.getBitmap(object));
            return this.transition.animate((Drawable)object, viewAdapter);
        }
    }

}

