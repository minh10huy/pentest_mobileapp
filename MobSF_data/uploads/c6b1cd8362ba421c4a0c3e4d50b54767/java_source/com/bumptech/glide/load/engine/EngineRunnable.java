/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.util.Log
 */
package com.bumptech.glide.load.engine;

import android.util.Log;
import com.bumptech.glide.Priority;
import com.bumptech.glide.load.engine.DecodeJob;
import com.bumptech.glide.load.engine.ErrorWrappingGlideException;
import com.bumptech.glide.load.engine.Resource;
import com.bumptech.glide.load.engine.executor.Prioritized;
import com.bumptech.glide.request.ResourceCallback;

class EngineRunnable
implements Runnable,
Prioritized {
    private static final String TAG = "EngineRunnable";
    private final DecodeJob<?, ?, ?> decodeJob;
    private volatile boolean isCancelled;
    private final EngineRunnableManager manager;
    private final Priority priority;
    private Stage stage;

    public EngineRunnable(EngineRunnableManager engineRunnableManager, DecodeJob<?, ?, ?> decodeJob, Priority priority) {
        this.manager = engineRunnableManager;
        this.decodeJob = decodeJob;
        this.stage = Stage.CACHE;
        this.priority = priority;
    }

    private Resource<?> decode() throws Exception {
        if (this.isDecodingFromCache()) {
            return this.decodeFromCache();
        }
        return this.decodeFromSource();
    }

    private Resource<?> decodeFromCache() throws Exception {
        Resource<?> resource;
        Resource<?> resource2;
        try {
            resource2 = this.decodeJob.decodeResultFromCache();
        }
        catch (Exception exception) {
            if (Log.isLoggable((String)TAG, (int)3)) {
                resource = new StringBuilder();
                resource.append("Exception decoding result from cache: ");
                resource.append((Object)exception);
                Log.d((String)TAG, (String)resource.toString());
            }
            resource2 = null;
        }
        resource = resource2;
        if (resource2 == null) {
            resource = this.decodeJob.decodeSourceFromCache();
        }
        return resource;
    }

    private Resource<?> decodeFromSource() throws Exception {
        return this.decodeJob.decodeFromSource();
    }

    private boolean isDecodingFromCache() {
        if (this.stage == Stage.CACHE) {
            return true;
        }
        return false;
    }

    private void onLoadComplete(Resource resource) {
        this.manager.onResourceReady(resource);
    }

    private void onLoadFailed(Exception exception) {
        if (this.isDecodingFromCache()) {
            this.stage = Stage.SOURCE;
            this.manager.submitForSource(this);
            return;
        }
        this.manager.onException(exception);
    }

    public void cancel() {
        this.isCancelled = true;
        this.decodeJob.cancel();
    }

    @Override
    public int getPriority() {
        return this.priority.ordinal();
    }

    @Override
    public void run() {
        Object object;
        if (this.isCancelled) {
            return;
        }
        Resource<?> resource = null;
        try {
            object = this.decode();
            Object var3_5 = null;
            resource = object;
            object = var3_5;
        }
        catch (Exception exception) {
            if (Log.isLoggable((String)TAG, (int)2)) {
                Log.v((String)TAG, (String)"Exception decoding", (Throwable)exception);
            }
        }
        catch (OutOfMemoryError outOfMemoryError) {
            if (Log.isLoggable((String)TAG, (int)2)) {
                Log.v((String)TAG, (String)"Out Of Memory Error decoding", (Throwable)outOfMemoryError);
            }
            object = new ErrorWrappingGlideException(outOfMemoryError);
        }
        if (this.isCancelled) {
            if (resource != null) {
                resource.recycle();
            }
            return;
        }
        if (resource == null) {
            this.onLoadFailed((Exception)object);
            return;
        }
        this.onLoadComplete(resource);
    }

    static interface EngineRunnableManager
    extends ResourceCallback {
        public void submitForSource(EngineRunnable var1);
    }

    private static enum Stage {
        CACHE,
        SOURCE;
        

        private Stage() {
        }
    }

}

