/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.util.Log
 */
package com.bumptech.glide.load.engine.cache;

import android.util.Log;
import com.bumptech.glide.disklrucache.DiskLruCache;
import com.bumptech.glide.load.Key;
import com.bumptech.glide.load.engine.cache.DiskCache;
import com.bumptech.glide.load.engine.cache.DiskCacheWriteLocker;
import com.bumptech.glide.load.engine.cache.SafeKeyGenerator;
import java.io.File;
import java.io.IOException;

public class DiskLruCacheWrapper
implements DiskCache {
    private static final int APP_VERSION = 1;
    private static final String TAG = "DiskLruCacheWrapper";
    private static final int VALUE_COUNT = 1;
    private static DiskLruCacheWrapper wrapper;
    private final File directory;
    private DiskLruCache diskLruCache;
    private final int maxSize;
    private final SafeKeyGenerator safeKeyGenerator;
    private final DiskCacheWriteLocker writeLocker = new DiskCacheWriteLocker();

    protected DiskLruCacheWrapper(File file, int n) {
        this.directory = file;
        this.maxSize = n;
        this.safeKeyGenerator = new SafeKeyGenerator();
    }

    public static DiskCache get(File object, int n) {
        synchronized (DiskLruCacheWrapper.class) {
            if (wrapper == null) {
                wrapper = new DiskLruCacheWrapper((File)object, n);
            }
            object = wrapper;
            return object;
        }
    }

    private DiskLruCache getDiskCache() throws IOException {
        synchronized (this) {
            if (this.diskLruCache == null) {
                this.diskLruCache = DiskLruCache.open(this.directory, 1, 1, this.maxSize);
            }
            DiskLruCache diskLruCache = this.diskLruCache;
            return diskLruCache;
        }
    }

    private void resetDiskCache() {
        synchronized (this) {
            this.diskLruCache = null;
            return;
        }
    }

    /*
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Converted monitor instructions to comments
     * Lifted jumps to return sites
     */
    @Override
    public void clear() {
        block5 : {
            // MONITORENTER : this
            this.getDiskCache().delete();
            this.resetDiskCache();
            return;
            catch (IOException iOException) {
                if (!Log.isLoggable((String)TAG, (int)5)) break block5;
                Log.w((String)TAG, (String)"Unable to clear disk cache", (Throwable)iOException);
            }
        }
        // MONITOREXIT : this
    }

    @Override
    public void delete(Key object) {
        object = this.safeKeyGenerator.getSafeKey((Key)object);
        try {
            this.getDiskCache().remove((String)object);
            return;
        }
        catch (IOException iOException) {
            if (Log.isLoggable((String)TAG, (int)5)) {
                Log.w((String)TAG, (String)"Unable to delete from disk cache", (Throwable)iOException);
            }
            return;
        }
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    @Override
    public File get(Key object) {
        object = this.safeKeyGenerator.getSafeKey((Key)object);
        object = this.getDiskCache().get((String)object);
        if (object == null) return null;
        try {
            return object.getFile(0);
        }
        catch (IOException iOException) {
            if (!Log.isLoggable((String)TAG, (int)5)) return null;
            Log.w((String)TAG, (String)"Unable to get from disk cache", (Throwable)iOException);
        }
        return null;
    }

    /*
     * WARNING - Removed back jump from a try to a catch block - possible behaviour change.
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    @Override
    public void put(Key key, DiskCache.Writer writer) {
        Throwable throwable3222;
        block9 : {
            block7 : {
                Object object;
                block8 : {
                    object = this.safeKeyGenerator.getSafeKey(key);
                    this.writeLocker.acquire(key);
                    object = this.getDiskCache().edit((String)object);
                    if (object == null) break block7;
                    if (!writer.write(object.getFile(0))) break block8;
                    object.commit();
                    {
                        catch (Throwable throwable2) {
                            object.abortUnlessCommitted();
                            throw throwable2;
                        }
                    }
                }
                object.abortUnlessCommitted();
                break block7;
                {
                    catch (Throwable throwable3222) {
                        break block9;
                    }
                    catch (IOException iOException) {}
                    {
                        if (!Log.isLoggable((String)TAG, (int)5)) break block7;
                        Log.w((String)TAG, (String)"Unable to put to disk cache", (Throwable)iOException);
                    }
                }
            }
            this.writeLocker.release(key);
            return;
        }
        this.writeLocker.release(key);
        throw throwable3222;
    }
}

