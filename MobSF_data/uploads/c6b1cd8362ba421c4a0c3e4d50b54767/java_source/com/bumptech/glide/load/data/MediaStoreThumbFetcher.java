/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.content.ContentResolver
 *  android.content.Context
 *  android.database.Cursor
 *  android.net.Uri
 *  android.provider.MediaStore
 *  android.provider.MediaStore$Images
 *  android.provider.MediaStore$Images$Thumbnails
 *  android.provider.MediaStore$Video
 *  android.provider.MediaStore$Video$Thumbnails
 *  android.text.TextUtils
 *  android.util.Log
 */
package com.bumptech.glide.load.data;

import android.content.ContentResolver;
import android.content.Context;
import android.database.Cursor;
import android.net.Uri;
import android.provider.MediaStore;
import android.text.TextUtils;
import android.util.Log;
import com.bumptech.glide.Priority;
import com.bumptech.glide.load.data.DataFetcher;
import com.bumptech.glide.load.data.ExifOrientationStream;
import com.bumptech.glide.load.resource.bitmap.ImageHeaderParser;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.util.List;

public class MediaStoreThumbFetcher
implements DataFetcher<InputStream> {
    private static final ThumbnailStreamOpenerFactory DEFAULT_FACTORY = new ThumbnailStreamOpenerFactory();
    private static final int MINI_HEIGHT = 384;
    private static final int MINI_WIDTH = 512;
    private static final String TAG = "MediaStoreThumbFetcher";
    private final Context context;
    private final DataFetcher<InputStream> defaultFetcher;
    private final ThumbnailStreamOpenerFactory factory;
    private final int height;
    private InputStream inputStream;
    private final Uri mediaStoreUri;
    private final int width;

    public MediaStoreThumbFetcher(Context context, Uri uri, DataFetcher<InputStream> dataFetcher, int n, int n2) {
        this(context, uri, dataFetcher, n, n2, DEFAULT_FACTORY);
    }

    MediaStoreThumbFetcher(Context context, Uri uri, DataFetcher<InputStream> dataFetcher, int n, int n2, ThumbnailStreamOpenerFactory thumbnailStreamOpenerFactory) {
        this.context = context;
        this.mediaStoreUri = uri;
        this.defaultFetcher = dataFetcher;
        this.width = n;
        this.height = n2;
        this.factory = thumbnailStreamOpenerFactory;
    }

    private static boolean isMediaStoreUri(Uri uri) {
        if (uri != null && "content".equals(uri.getScheme()) && "media".equals(uri.getAuthority())) {
            return true;
        }
        return false;
    }

    private static boolean isMediaStoreVideo(Uri uri) {
        if (MediaStoreThumbFetcher.isMediaStoreUri(uri) && uri.getPathSegments().contains("video")) {
            return true;
        }
        return false;
    }

    private InputStream openThumbInputStream(ThumbnailStreamOpener object) {
        InputStream inputStream;
        try {
            inputStream = object.open(this.context, this.mediaStoreUri);
        }
        catch (FileNotFoundException fileNotFoundException) {
            if (Log.isLoggable((String)TAG, (int)3)) {
                Log.d((String)TAG, (String)"Failed to find thumbnail file", (Throwable)fileNotFoundException);
            }
            inputStream = null;
        }
        int n = inputStream != null ? object.getOrientation(this.context, this.mediaStoreUri) : -1;
        object = inputStream;
        if (n != -1) {
            object = new ExifOrientationStream(inputStream, n);
        }
        return object;
    }

    @Override
    public void cancel() {
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @Override
    public void cleanup() {
        if (this.inputStream != null) {
            try {
                this.inputStream.close();
            }
            catch (IOException iOException) {}
        }
        this.defaultFetcher.cleanup();
    }

    @Override
    public String getId() {
        return this.mediaStoreUri.toString();
    }

    @Override
    public InputStream loadData(Priority priority) throws Exception {
        ThumbnailStreamOpener thumbnailStreamOpener = this.factory.build(this.mediaStoreUri, this.width, this.height);
        if (thumbnailStreamOpener != null) {
            this.inputStream = this.openThumbInputStream(thumbnailStreamOpener);
        }
        if (this.inputStream == null) {
            this.inputStream = this.defaultFetcher.loadData(priority);
        }
        return this.inputStream;
    }

    static class FileService {
        FileService() {
        }

        public boolean exists(File file) {
            return file.exists();
        }

        public File get(String string2) {
            return new File(string2);
        }

        public long length(File file) {
            return file.length();
        }
    }

    static class ImageThumbnailQuery
    implements ThumbnailQuery {
        private static final String[] PATH_PROJECTION = new String[]{"_data"};
        private static final String PATH_SELECTION = "kind = 1 AND image_id = ?";

        ImageThumbnailQuery() {
        }

        @Override
        public Cursor queryPath(Context context, Uri object) {
            object = object.getLastPathSegment();
            return context.getContentResolver().query(MediaStore.Images.Thumbnails.EXTERNAL_CONTENT_URI, PATH_PROJECTION, PATH_SELECTION, new String[]{object}, null);
        }
    }

    static interface ThumbnailQuery {
        public Cursor queryPath(Context var1, Uri var2);
    }

    static class ThumbnailStreamOpener {
        private static final FileService DEFAULT_SERVICE = new FileService();
        private ThumbnailQuery query;
        private final FileService service;

        public ThumbnailStreamOpener(FileService fileService, ThumbnailQuery thumbnailQuery) {
            this.service = fileService;
            this.query = thumbnailQuery;
        }

        public ThumbnailStreamOpener(ThumbnailQuery thumbnailQuery) {
            this(DEFAULT_SERVICE, thumbnailQuery);
        }

        private Uri parseThumbUri(Cursor object) {
            if (!TextUtils.isEmpty((CharSequence)(object = object.getString(0))) && this.service.exists((File)(object = this.service.get((String)object))) && this.service.length((File)object) > 0L) {
                return Uri.fromFile((File)object);
            }
            return null;
        }

        /*
         * Loose catch block
         * Enabled aggressive block sorting
         * Enabled unnecessary exception pruning
         * Enabled aggressive exception aggregation
         * Lifted jumps to return sites
         */
        public int getOrientation(Context object, Uri uri) {
            void var2_8;
            block15 : {
                InputStream inputStream;
                block14 : {
                    int n;
                    inputStream = object.getContentResolver().openInputStream(uri);
                    object = inputStream;
                    int n2 = n = new ImageHeaderParser(inputStream).getOrientation();
                    if (inputStream == null) return n2;
                    try {
                        inputStream.close();
                        return n;
                    }
                    catch (IOException iOException) {
                        return n;
                    }
                    catch (IOException iOException) {
                        break block14;
                    }
                    catch (Throwable throwable) {
                        object = null;
                        break block15;
                    }
                    catch (IOException iOException) {
                        inputStream = null;
                    }
                }
                object = inputStream;
                if (Log.isLoggable((String)MediaStoreThumbFetcher.TAG, (int)3)) {
                    void var6_14;
                    object = inputStream;
                    StringBuilder stringBuilder = new StringBuilder();
                    object = inputStream;
                    stringBuilder.append("Failed to open uri: ");
                    object = inputStream;
                    stringBuilder.append((Object)uri);
                    object = inputStream;
                    Log.d((String)MediaStoreThumbFetcher.TAG, (String)stringBuilder.toString(), (Throwable)var6_14);
                }
                if (inputStream == null) return -1;
                try {
                    inputStream.close();
                    return -1;
                }
                catch (IOException iOException) {}
                catch (Throwable throwable) {
                    // empty catch block
                }
            }
            if (object == null) throw var2_8;
            try {
                object.close();
            }
            catch (IOException iOException) {
                throw var2_8;
            }
            throw var2_8;
            return -1;
        }

        public InputStream open(Context context, Uri uri) throws FileNotFoundException {
            Cursor cursor;
            InputStream inputStream;
            block7 : {
                block6 : {
                    cursor = this.query.queryPath(context, uri);
                    inputStream = null;
                    if (cursor != null) {
                        try {
                            if (!cursor.moveToFirst()) break block6;
                            uri = this.parseThumbUri(cursor);
                            break block7;
                        }
                        catch (Throwable throwable) {
                            if (cursor != null) {
                                cursor.close();
                            }
                            throw throwable;
                        }
                    }
                }
                uri = null;
            }
            if (cursor != null) {
                cursor.close();
            }
            if (uri != null) {
                inputStream = context.getContentResolver().openInputStream(uri);
            }
            return inputStream;
        }
    }

    static class ThumbnailStreamOpenerFactory {
        ThumbnailStreamOpenerFactory() {
        }

        public ThumbnailStreamOpener build(Uri uri, int n, int n2) {
            if (MediaStoreThumbFetcher.isMediaStoreUri(uri) && n <= 512 && n2 <= 384) {
                if (MediaStoreThumbFetcher.isMediaStoreVideo(uri)) {
                    return new ThumbnailStreamOpener(new VideoThumbnailQuery());
                }
                return new ThumbnailStreamOpener(new ImageThumbnailQuery());
            }
            return null;
        }
    }

    static class VideoThumbnailQuery
    implements ThumbnailQuery {
        private static final String[] PATH_PROJECTION = new String[]{"_data"};
        private static final String PATH_SELECTION = "kind = 1 AND video_id = ?";

        VideoThumbnailQuery() {
        }

        @Override
        public Cursor queryPath(Context context, Uri object) {
            object = object.getLastPathSegment();
            return context.getContentResolver().query(MediaStore.Video.Thumbnails.EXTERNAL_CONTENT_URI, PATH_PROJECTION, PATH_SELECTION, new String[]{object}, null);
        }
    }

}

