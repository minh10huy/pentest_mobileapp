/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.os.ParcelFileDescriptor
 *  android.util.Log
 */
package com.bumptech.glide.load.model;

import android.os.ParcelFileDescriptor;
import android.util.Log;
import com.bumptech.glide.Priority;
import com.bumptech.glide.load.data.DataFetcher;
import com.bumptech.glide.load.model.ImageVideoWrapper;
import com.bumptech.glide.load.model.ModelLoader;
import java.io.InputStream;

public class ImageVideoModelLoader<A>
implements ModelLoader<A, ImageVideoWrapper> {
    private static final String TAG = "IVML";
    private final ModelLoader<A, ParcelFileDescriptor> fileDescriptorLoader;
    private final ModelLoader<A, InputStream> streamLoader;

    public ImageVideoModelLoader(ModelLoader<A, InputStream> modelLoader, ModelLoader<A, ParcelFileDescriptor> modelLoader2) {
        if (modelLoader == null && modelLoader2 == null) {
            throw new NullPointerException("At least one of streamLoader and fileDescriptorLoader must be non null");
        }
        this.streamLoader = modelLoader;
        this.fileDescriptorLoader = modelLoader2;
    }

    @Override
    public DataFetcher<ImageVideoWrapper> getResourceFetcher(A object, int n, int n2) {
        DataFetcher<InputStream> dataFetcher = this.streamLoader != null ? this.streamLoader.getResourceFetcher(object, n, n2) : null;
        object = this.fileDescriptorLoader != null ? this.fileDescriptorLoader.getResourceFetcher(object, n, n2) : null;
        if (dataFetcher == null && object == null) {
            return null;
        }
        return new ImageVideoFetcher(dataFetcher, (DataFetcher<ParcelFileDescriptor>)object);
    }

    static class ImageVideoFetcher
    implements DataFetcher<ImageVideoWrapper> {
        private final DataFetcher<ParcelFileDescriptor> fileDescriptorFetcher;
        private final DataFetcher<InputStream> streamFetcher;

        public ImageVideoFetcher(DataFetcher<InputStream> dataFetcher, DataFetcher<ParcelFileDescriptor> dataFetcher2) {
            this.streamFetcher = dataFetcher;
            this.fileDescriptorFetcher = dataFetcher2;
        }

        @Override
        public void cancel() {
            if (this.streamFetcher != null) {
                this.streamFetcher.cancel();
            }
            if (this.fileDescriptorFetcher != null) {
                this.fileDescriptorFetcher.cancel();
            }
        }

        @Override
        public void cleanup() {
            if (this.streamFetcher != null) {
                this.streamFetcher.cleanup();
            }
            if (this.fileDescriptorFetcher != null) {
                this.fileDescriptorFetcher.cleanup();
            }
        }

        @Override
        public String getId() {
            if (this.streamFetcher != null) {
                return this.streamFetcher.getId();
            }
            return this.fileDescriptorFetcher.getId();
        }

        @Override
        public ImageVideoWrapper loadData(Priority priority) throws Exception {
            InputStream inputStream;
            block10 : {
                block11 : {
                    block8 : {
                        block9 : {
                            if (this.streamFetcher != null) {
                                try {
                                    inputStream = this.streamFetcher.loadData(priority);
                                    break block8;
                                }
                                catch (Exception exception) {
                                    if (Log.isLoggable((String)ImageVideoModelLoader.TAG, (int)2)) {
                                        Log.v((String)ImageVideoModelLoader.TAG, (String)"Exception fetching input stream, trying ParcelFileDescriptor", (Throwable)exception);
                                    }
                                    if (this.fileDescriptorFetcher != null) break block9;
                                    throw exception;
                                }
                            }
                        }
                        inputStream = null;
                    }
                    if (this.fileDescriptorFetcher != null) {
                        try {
                            priority = this.fileDescriptorFetcher.loadData(priority);
                            break block10;
                        }
                        catch (Exception exception) {
                            if (Log.isLoggable((String)ImageVideoModelLoader.TAG, (int)2)) {
                                Log.v((String)ImageVideoModelLoader.TAG, (String)"Exception fetching ParcelFileDescriptor", (Throwable)exception);
                            }
                            if (inputStream != null) break block11;
                            throw exception;
                        }
                    }
                }
                priority = null;
            }
            return new ImageVideoWrapper(inputStream, (ParcelFileDescriptor)priority);
        }
    }

}

