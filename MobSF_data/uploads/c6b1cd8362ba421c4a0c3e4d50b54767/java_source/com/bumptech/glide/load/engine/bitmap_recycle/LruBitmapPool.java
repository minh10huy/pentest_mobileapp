/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.annotation.SuppressLint
 *  android.annotation.TargetApi
 *  android.graphics.Bitmap
 *  android.graphics.Bitmap$Config
 *  android.os.Build
 *  android.os.Build$VERSION
 *  android.util.Log
 */
package com.bumptech.glide.load.engine.bitmap_recycle;

import android.annotation.SuppressLint;
import android.annotation.TargetApi;
import android.graphics.Bitmap;
import android.os.Build;
import android.util.Log;
import com.bumptech.glide.load.engine.bitmap_recycle.AttributeStrategy;
import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;
import com.bumptech.glide.load.engine.bitmap_recycle.LruPoolStrategy;
import com.bumptech.glide.load.engine.bitmap_recycle.SizeConfigStrategy;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.HashSet;
import java.util.Set;

public class LruBitmapPool
implements BitmapPool {
    private static final Bitmap.Config DEFAULT_CONFIG = Bitmap.Config.ARGB_8888;
    private static final String TAG = "LruBitmapPool";
    private final Set<Bitmap.Config> allowedConfigs;
    private int currentSize;
    private int evictions;
    private int hits;
    private final int initialMaxSize;
    private int maxSize;
    private int misses;
    private int puts;
    private final LruPoolStrategy strategy;
    private final BitmapTracker tracker;

    public LruBitmapPool(int n) {
        this(n, LruBitmapPool.getDefaultStrategy(), LruBitmapPool.getDefaultAllowedConfigs());
    }

    LruBitmapPool(int n, LruPoolStrategy lruPoolStrategy, Set<Bitmap.Config> set) {
        this.initialMaxSize = n;
        this.maxSize = n;
        this.strategy = lruPoolStrategy;
        this.allowedConfigs = set;
        this.tracker = new NullBitmapTracker();
    }

    public LruBitmapPool(int n, Set<Bitmap.Config> set) {
        this(n, LruBitmapPool.getDefaultStrategy(), set);
    }

    private void dump() {
        if (Log.isLoggable((String)TAG, (int)2)) {
            this.dumpUnchecked();
        }
    }

    private void dumpUnchecked() {
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("Hits=");
        stringBuilder.append(this.hits);
        stringBuilder.append(", misses=");
        stringBuilder.append(this.misses);
        stringBuilder.append(", puts=");
        stringBuilder.append(this.puts);
        stringBuilder.append(", evictions=");
        stringBuilder.append(this.evictions);
        stringBuilder.append(", currentSize=");
        stringBuilder.append(this.currentSize);
        stringBuilder.append(", maxSize=");
        stringBuilder.append(this.maxSize);
        stringBuilder.append("\nStrategy=");
        stringBuilder.append(this.strategy);
        Log.v((String)TAG, (String)stringBuilder.toString());
    }

    private void evict() {
        this.trimToSize(this.maxSize);
    }

    private static Set<Bitmap.Config> getDefaultAllowedConfigs() {
        HashSet<Bitmap.Config> hashSet = new HashSet<Bitmap.Config>();
        hashSet.addAll(Arrays.asList(Bitmap.Config.values()));
        if (Build.VERSION.SDK_INT >= 19) {
            hashSet.add(null);
        }
        return Collections.unmodifiableSet(hashSet);
    }

    private static LruPoolStrategy getDefaultStrategy() {
        if (Build.VERSION.SDK_INT >= 19) {
            return new SizeConfigStrategy();
        }
        return new AttributeStrategy();
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    private void trimToSize(int n) {
        synchronized (this) {
            do {
                if (this.currentSize <= n) return;
                Bitmap bitmap = this.strategy.removeLast();
                if (bitmap == null) {
                    if (Log.isLoggable((String)TAG, (int)5)) {
                        Log.w((String)TAG, (String)"Size mismatch, resetting");
                        this.dumpUnchecked();
                    }
                    this.currentSize = 0;
                    return;
                }
                this.tracker.remove(bitmap);
                this.currentSize -= this.strategy.getSize(bitmap);
                bitmap.recycle();
                ++this.evictions;
                if (Log.isLoggable((String)TAG, (int)3)) {
                    StringBuilder stringBuilder = new StringBuilder();
                    stringBuilder.append("Evicting bitmap=");
                    stringBuilder.append(this.strategy.logBitmap(bitmap));
                    Log.d((String)TAG, (String)stringBuilder.toString());
                }
                this.dump();
                continue;
                break;
            } while (true);
            finally {
            }
        }
    }

    @Override
    public void clearMemory() {
        if (Log.isLoggable((String)TAG, (int)3)) {
            Log.d((String)TAG, (String)"clearMemory");
        }
        this.trimToSize(0);
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @Override
    public Bitmap get(int n, int n2, Bitmap.Config config) {
        synchronized (this) {
            config = this.getDirty(n, n2, config);
            if (config != null) {
                config.eraseColor(0);
            }
            return config;
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @TargetApi(value=12)
    @Override
    public Bitmap getDirty(int n, int n2, Bitmap.Config config) {
        synchronized (this) {
            Object object = this.strategy;
            Bitmap.Config config2 = config != null ? config : DEFAULT_CONFIG;
            config2 = object.get(n, n2, config2);
            if (config2 == null) {
                if (Log.isLoggable((String)TAG, (int)3)) {
                    object = new StringBuilder();
                    object.append("Missing bitmap=");
                    object.append(this.strategy.logBitmap(n, n2, config));
                    Log.d((String)TAG, (String)object.toString());
                }
                ++this.misses;
            } else {
                ++this.hits;
                this.currentSize -= this.strategy.getSize((Bitmap)config2);
                this.tracker.remove((Bitmap)config2);
                if (Build.VERSION.SDK_INT >= 12) {
                    config2.setHasAlpha(true);
                }
            }
            if (Log.isLoggable((String)TAG, (int)2)) {
                object = new StringBuilder();
                object.append("Get bitmap=");
                object.append(this.strategy.logBitmap(n, n2, config));
                Log.v((String)TAG, (String)object.toString());
            }
            this.dump();
            return config2;
        }
    }

    @Override
    public int getMaxSize() {
        return this.maxSize;
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Converted monitor instructions to comments
     * Lifted jumps to return sites
     */
    @Override
    public boolean put(Bitmap var1_1) {
        // MONITORENTER : this
        if (var1_1 != null) ** GOTO lbl5
        throw new NullPointerException("Bitmap must not be null");
lbl5: // 1 sources:
        if (var1_1.isMutable() && this.strategy.getSize(var1_1) <= this.maxSize && this.allowedConfigs.contains((Object)var1_1.getConfig())) {
            var2_3 = this.strategy.getSize(var1_1);
            this.strategy.put(var1_1);
            this.tracker.add(var1_1);
            ++this.puts;
            this.currentSize += var2_3;
            if (Log.isLoggable((String)"LruBitmapPool", (int)2)) {
                var3_4 = new StringBuilder();
                var3_4.append("Put bitmap in pool=");
                var3_4.append(this.strategy.logBitmap(var1_1));
                Log.v((String)"LruBitmapPool", (String)var3_4.toString());
            }
            this.dump();
            this.evict();
            // MONITOREXIT : this
            return true;
        }
        if (Log.isLoggable((String)"LruBitmapPool", (int)2)) {
            var3_5 = new StringBuilder();
            var3_5.append("Reject bitmap from pool, bitmap: ");
            var3_5.append(this.strategy.logBitmap(var1_1));
            var3_5.append(", is mutable: ");
            var3_5.append(var1_1.isMutable());
            var3_5.append(", is allowed config: ");
            var3_5.append(this.allowedConfigs.contains((Object)var1_1.getConfig()));
            Log.v((String)"LruBitmapPool", (String)var3_5.toString());
        }
        // MONITOREXIT : this
        return false;
    }

    @Override
    public void setSizeMultiplier(float f) {
        synchronized (this) {
            this.maxSize = Math.round((float)this.initialMaxSize * f);
            this.evict();
            return;
        }
    }

    @SuppressLint(value={"InlinedApi"})
    @Override
    public void trimMemory(int n) {
        if (Log.isLoggable((String)TAG, (int)3)) {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("trimMemory, level=");
            stringBuilder.append(n);
            Log.d((String)TAG, (String)stringBuilder.toString());
        }
        if (n >= 60) {
            this.clearMemory();
            return;
        }
        if (n >= 40) {
            this.trimToSize(this.maxSize / 2);
        }
    }

    private static interface BitmapTracker {
        public void add(Bitmap var1);

        public void remove(Bitmap var1);
    }

    private static class NullBitmapTracker
    implements BitmapTracker {
        private NullBitmapTracker() {
        }

        @Override
        public void add(Bitmap bitmap) {
        }

        @Override
        public void remove(Bitmap bitmap) {
        }
    }

    private static class ThrowingBitmapTracker
    implements BitmapTracker {
        private final Set<Bitmap> bitmaps = Collections.synchronizedSet(new HashSet());

        private ThrowingBitmapTracker() {
        }

        @Override
        public void add(Bitmap bitmap) {
            if (this.bitmaps.contains((Object)bitmap)) {
                StringBuilder stringBuilder = new StringBuilder();
                stringBuilder.append("Can't add already added bitmap: ");
                stringBuilder.append((Object)bitmap);
                stringBuilder.append(" [");
                stringBuilder.append(bitmap.getWidth());
                stringBuilder.append("x");
                stringBuilder.append(bitmap.getHeight());
                stringBuilder.append("]");
                throw new IllegalStateException(stringBuilder.toString());
            }
            this.bitmaps.add(bitmap);
        }

        @Override
        public void remove(Bitmap bitmap) {
            if (!this.bitmaps.contains((Object)bitmap)) {
                throw new IllegalStateException("Cannot remove bitmap not in tracker");
            }
            this.bitmaps.remove((Object)bitmap);
        }
    }

}

