/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.content.Context
 *  android.content.res.Resources
 *  android.content.res.Resources$NotFoundException
 *  android.net.Uri
 *  android.util.Log
 */
package com.bumptech.glide.load.model;

import android.content.Context;
import android.content.res.Resources;
import android.net.Uri;
import android.util.Log;
import com.bumptech.glide.load.data.DataFetcher;
import com.bumptech.glide.load.model.ModelLoader;
import java.io.Serializable;

public class ResourceLoader<T>
implements ModelLoader<Integer, T> {
    private static final String TAG = "ResourceLoader";
    private final Resources resources;
    private final ModelLoader<Uri, T> uriLoader;

    public ResourceLoader(Context context, ModelLoader<Uri, T> modelLoader) {
        this(context.getResources(), modelLoader);
    }

    public ResourceLoader(Resources resources, ModelLoader<Uri, T> modelLoader) {
        this.resources = resources;
        this.uriLoader = modelLoader;
    }

    @Override
    public DataFetcher<T> getResourceFetcher(Integer serializable, int n, int n2) {
        try {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("android.resource://");
            stringBuilder.append(this.resources.getResourcePackageName(serializable.intValue()));
            stringBuilder.append('/');
            stringBuilder.append(this.resources.getResourceTypeName(serializable.intValue()));
            stringBuilder.append('/');
            stringBuilder.append(this.resources.getResourceEntryName(serializable.intValue()));
            stringBuilder = Uri.parse((String)stringBuilder.toString());
            serializable = stringBuilder;
        }
        catch (Resources.NotFoundException notFoundException) {
            if (Log.isLoggable((String)TAG, (int)5)) {
                StringBuilder stringBuilder = new StringBuilder();
                stringBuilder.append("Received invalid resource id: ");
                stringBuilder.append(serializable);
                Log.w((String)TAG, (String)stringBuilder.toString(), (Throwable)notFoundException);
            }
            serializable = null;
        }
        if (serializable != null) {
            return this.uriLoader.getResourceFetcher((Uri)serializable, n, n2);
        }
        return null;
    }
}

