/*
 * Decompiled with CFR 0_132.
 */
package com.bumptech.glide.load.data;

import java.io.FilterInputStream;
import java.io.IOException;
import java.io.InputStream;

public class ExifOrientationStream
extends FilterInputStream {
    private static final byte[] EXIF_SEGMENT = new byte[]{-1, -31, 0, 28, 69, 120, 105, 102, 0, 0, 77, 77, 0, 0, 0, 0, 0, 8, 0, 1, 1, 18, 0, 2, 0, 0, 0, 1, 0};
    private static final int ORIENTATION_POSITION;
    private static final int SEGMENT_LENGTH;
    private static final int SEGMENT_START_POSITION = 2;
    private final byte orientation;
    private int position;

    static {
        SEGMENT_LENGTH = EXIF_SEGMENT.length;
        ORIENTATION_POSITION = SEGMENT_LENGTH + 2;
    }

    public ExifOrientationStream(InputStream object, int n) {
        super((InputStream)object);
        if (n >= -1 && n <= 8) {
            this.orientation = (byte)n;
            return;
        }
        object = new StringBuilder();
        object.append("Cannot add invalid orientation: ");
        object.append(n);
        throw new IllegalArgumentException(object.toString());
    }

    @Override
    public void mark(int n) {
        throw new UnsupportedOperationException();
    }

    @Override
    public boolean markSupported() {
        return false;
    }

    @Override
    public int read() throws IOException {
        int n = this.position >= 2 && this.position <= ORIENTATION_POSITION ? (this.position == ORIENTATION_POSITION ? (int)this.orientation : EXIF_SEGMENT[this.position - 2] & 255) : super.read();
        if (n != -1) {
            ++this.position;
        }
        return n;
    }

    @Override
    public int read(byte[] arrby, int n, int n2) throws IOException {
        if (this.position > ORIENTATION_POSITION) {
            n = super.read(arrby, n, n2);
        } else if (this.position == ORIENTATION_POSITION) {
            arrby[n] = this.orientation;
            n = 1;
        } else if (this.position < 2) {
            n = super.read(arrby, n, 2 - this.position);
        } else {
            n2 = Math.min(ORIENTATION_POSITION - this.position, n2);
            System.arraycopy(EXIF_SEGMENT, this.position - 2, arrby, n, n2);
            n = n2;
        }
        if (n > 0) {
            this.position += n;
        }
        return n;
    }

    @Override
    public void reset() throws IOException {
        throw new UnsupportedOperationException();
    }

    @Override
    public long skip(long l) throws IOException {
        if ((l = super.skip(l)) > 0L) {
            this.position = (int)((long)this.position + l);
        }
        return l;
    }
}

