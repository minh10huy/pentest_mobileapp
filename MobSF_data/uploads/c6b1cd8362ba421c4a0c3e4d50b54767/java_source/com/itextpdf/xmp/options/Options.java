/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.xmp.options;

import com.itextpdf.xmp.XMPException;
import java.util.HashMap;
import java.util.Map;

public abstract class Options {
    private Map optionNames = null;
    private int options = 0;

    public Options() {
    }

    public Options(int n) throws XMPException {
        this.assertOptionsValid(n);
        this.setOptions(n);
    }

    private void assertOptionsValid(int n) throws XMPException {
        int n2 = ~ this.getValidOptions() & n;
        if (n2 == 0) {
            this.assertConsistency(n);
            return;
        }
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("The option bit(s) 0x");
        stringBuilder.append(Integer.toHexString(n2));
        stringBuilder.append(" are invalid!");
        throw new XMPException(stringBuilder.toString(), 103);
    }

    private String getOptionName(int n) {
        String string2;
        Map map = this.procureOptionNames();
        Integer n2 = new Integer(n);
        String string3 = string2 = (String)map.get(n2);
        if (string2 == null) {
            string3 = this.defineOptionName(n);
            if (string3 != null) {
                map.put(n2, string3);
                return string3;
            }
            string3 = "<option name not defined>";
        }
        return string3;
    }

    private Map procureOptionNames() {
        if (this.optionNames == null) {
            this.optionNames = new HashMap();
        }
        return this.optionNames;
    }

    protected void assertConsistency(int n) throws XMPException {
    }

    public void clear() {
        this.options = 0;
    }

    public boolean containsAllOptions(int n) {
        if ((this.getOptions() & n) == n) {
            return true;
        }
        return false;
    }

    public boolean containsOneOf(int n) {
        if ((n & this.getOptions()) != 0) {
            return true;
        }
        return false;
    }

    protected abstract String defineOptionName(int var1);

    public boolean equals(Object object) {
        if (this.getOptions() == ((Options)object).getOptions()) {
            return true;
        }
        return false;
    }

    protected boolean getOption(int n) {
        if ((n & this.options) != 0) {
            return true;
        }
        return false;
    }

    public int getOptions() {
        return this.options;
    }

    public String getOptionsString() {
        if (this.options != 0) {
            StringBuffer stringBuffer = new StringBuffer();
            int n = this.options;
            while (n != 0) {
                int n2 = n - 1 & n;
                stringBuffer.append(this.getOptionName(n ^ n2));
                if (n2 != 0) {
                    stringBuffer.append(" | ");
                }
                n = n2;
            }
            return stringBuffer.toString();
        }
        return "<none>";
    }

    protected abstract int getValidOptions();

    public int hashCode() {
        return this.getOptions();
    }

    public boolean isExactly(int n) {
        if (this.getOptions() == n) {
            return true;
        }
        return false;
    }

    public void setOption(int n, boolean bl) {
        n = bl ? (n |= this.options) : ~ n & this.options;
        this.options = n;
    }

    public void setOptions(int n) throws XMPException {
        this.assertOptionsValid(n);
        this.options = n;
    }

    public String toString() {
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("0x");
        stringBuilder.append(Integer.toHexString(this.options));
        return stringBuilder.toString();
    }
}

