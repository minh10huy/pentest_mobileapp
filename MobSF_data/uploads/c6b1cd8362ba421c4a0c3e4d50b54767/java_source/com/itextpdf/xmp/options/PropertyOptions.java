/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.xmp.options;

import com.itextpdf.xmp.XMPException;
import com.itextpdf.xmp.options.Options;

public final class PropertyOptions
extends Options {
    public static final int ARRAY = 512;
    public static final int ARRAY_ALTERNATE = 2048;
    public static final int ARRAY_ALT_TEXT = 4096;
    public static final int ARRAY_ORDERED = 1024;
    public static final int DELETE_EXISTING = 536870912;
    public static final int HAS_LANGUAGE = 64;
    public static final int HAS_QUALIFIERS = 16;
    public static final int HAS_TYPE = 128;
    public static final int NO_OPTIONS = 0;
    public static final int QUALIFIER = 32;
    public static final int SCHEMA_NODE = Integer.MIN_VALUE;
    public static final int SEPARATE_NODE = 1073741824;
    public static final int STRUCT = 256;
    public static final int URI = 2;

    public PropertyOptions() {
    }

    public PropertyOptions(int n) throws XMPException {
        super(n);
    }

    @Override
    public void assertConsistency(int n) throws XMPException {
        if ((n & 256) > 0 && (n & 512) > 0) {
            throw new XMPException("IsStruct and IsArray options are mutually exclusive", 103);
        }
        if ((n & 2) > 0 && (n & 768) > 0) {
            throw new XMPException("Structs and arrays can't have \"value\" options", 103);
        }
    }

    @Override
    protected String defineOptionName(int n) {
        switch (n) {
            default: {
                return null;
            }
            case 4096: {
                return "ARRAY_ALT_TEXT";
            }
            case 2048: {
                return "ARRAY_ALTERNATE";
            }
            case 1024: {
                return "ARRAY_ORDERED";
            }
            case 512: {
                return "ARRAY";
            }
            case 256: {
                return "STRUCT";
            }
            case 128: {
                return "HAS_TYPE";
            }
            case 64: {
                return "HAS_LANGUAGE";
            }
            case 32: {
                return "QUALIFIER";
            }
            case 16: {
                return "HAS_QUALIFIER";
            }
            case 2: {
                return "URI";
            }
            case Integer.MIN_VALUE: 
        }
        return "SCHEMA_NODE";
    }

    public boolean equalArrayTypes(PropertyOptions propertyOptions) {
        if (this.isArray() == propertyOptions.isArray() && this.isArrayOrdered() == propertyOptions.isArrayOrdered() && this.isArrayAlternate() == propertyOptions.isArrayAlternate() && this.isArrayAltText() == propertyOptions.isArrayAltText()) {
            return true;
        }
        return false;
    }

    public boolean getHasLanguage() {
        return this.getOption(64);
    }

    public boolean getHasQualifiers() {
        return this.getOption(16);
    }

    public boolean getHasType() {
        return this.getOption(128);
    }

    @Override
    protected int getValidOptions() {
        return -1073733646;
    }

    public boolean isArray() {
        return this.getOption(512);
    }

    public boolean isArrayAltText() {
        return this.getOption(4096);
    }

    public boolean isArrayAlternate() {
        return this.getOption(2048);
    }

    public boolean isArrayOrdered() {
        return this.getOption(1024);
    }

    public boolean isCompositeProperty() {
        if ((this.getOptions() & 768) > 0) {
            return true;
        }
        return false;
    }

    public boolean isOnlyArrayOptions() {
        if ((this.getOptions() & -7681) == 0) {
            return true;
        }
        return false;
    }

    public boolean isQualifier() {
        return this.getOption(32);
    }

    public boolean isSchemaNode() {
        return this.getOption(Integer.MIN_VALUE);
    }

    public boolean isSimple() {
        if ((this.getOptions() & 768) == 0) {
            return true;
        }
        return false;
    }

    public boolean isStruct() {
        return this.getOption(256);
    }

    public boolean isURI() {
        return this.getOption(2);
    }

    public void mergeWith(PropertyOptions propertyOptions) throws XMPException {
        if (propertyOptions != null) {
            int n = this.getOptions();
            this.setOptions(propertyOptions.getOptions() | n);
        }
    }

    public PropertyOptions setArray(boolean bl) {
        this.setOption(512, bl);
        return this;
    }

    public PropertyOptions setArrayAltText(boolean bl) {
        this.setOption(4096, bl);
        return this;
    }

    public PropertyOptions setArrayAlternate(boolean bl) {
        this.setOption(2048, bl);
        return this;
    }

    public PropertyOptions setArrayOrdered(boolean bl) {
        this.setOption(1024, bl);
        return this;
    }

    public PropertyOptions setHasLanguage(boolean bl) {
        this.setOption(64, bl);
        return this;
    }

    public PropertyOptions setHasQualifiers(boolean bl) {
        this.setOption(16, bl);
        return this;
    }

    public PropertyOptions setHasType(boolean bl) {
        this.setOption(128, bl);
        return this;
    }

    public PropertyOptions setQualifier(boolean bl) {
        this.setOption(32, bl);
        return this;
    }

    public PropertyOptions setSchemaNode(boolean bl) {
        this.setOption(Integer.MIN_VALUE, bl);
        return this;
    }

    public PropertyOptions setStruct(boolean bl) {
        this.setOption(256, bl);
        return this;
    }

    public PropertyOptions setURI(boolean bl) {
        this.setOption(2, bl);
        return this;
    }
}

