/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.xmp;

import com.itextpdf.xmp.XMPDateTime;
import com.itextpdf.xmp.XMPException;
import com.itextpdf.xmp.XMPMeta;
import com.itextpdf.xmp.impl.Base64;
import com.itextpdf.xmp.impl.ISO8601Converter;
import com.itextpdf.xmp.impl.XMPUtilsImpl;
import com.itextpdf.xmp.options.PropertyOptions;

public class XMPUtils {
    private XMPUtils() {
    }

    public static void appendProperties(XMPMeta xMPMeta, XMPMeta xMPMeta2, boolean bl, boolean bl2) throws XMPException {
        XMPUtils.appendProperties(xMPMeta, xMPMeta2, bl, bl2, false);
    }

    public static void appendProperties(XMPMeta xMPMeta, XMPMeta xMPMeta2, boolean bl, boolean bl2, boolean bl3) throws XMPException {
        XMPUtilsImpl.appendProperties(xMPMeta, xMPMeta2, bl, bl2, bl3);
    }

    public static String catenateArrayItems(XMPMeta xMPMeta, String string2, String string3, String string4, String string5, boolean bl) throws XMPException {
        return XMPUtilsImpl.catenateArrayItems(xMPMeta, string2, string3, string4, string5, bl);
    }

    public static String convertFromBoolean(boolean bl) {
        if (bl) {
            return "True";
        }
        return "False";
    }

    public static String convertFromDate(XMPDateTime xMPDateTime) {
        return ISO8601Converter.render(xMPDateTime);
    }

    public static String convertFromDouble(double d) {
        return String.valueOf(d);
    }

    public static String convertFromInteger(int n) {
        return String.valueOf(n);
    }

    public static String convertFromLong(long l) {
        return String.valueOf(l);
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public static boolean convertToBoolean(String string2) throws XMPException {
        if (string2 == null) throw new XMPException("Empty convert-string", 5);
        if (string2.length() == 0) {
            throw new XMPException("Empty convert-string", 5);
        }
        string2 = string2.toLowerCase();
        boolean bl = false;
        boolean bl2 = false;
        try {
            int n = Integer.parseInt(string2);
            if (n == 0) return bl2;
            return true;
        }
        catch (NumberFormatException numberFormatException) {}
        if ("true".equals(string2)) return true;
        if ("t".equals(string2)) return true;
        if ("on".equals(string2)) return true;
        bl2 = bl;
        if (!"yes".equals(string2)) return bl2;
        return true;
    }

    public static XMPDateTime convertToDate(String string2) throws XMPException {
        if (string2 != null && string2.length() != 0) {
            return ISO8601Converter.parse(string2);
        }
        throw new XMPException("Empty convert-string", 5);
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    public static double convertToDouble(String string2) throws XMPException {
        if (string2 == null) throw new XMPException("Empty convert-string", 5);
        try {
            if (string2.length() == 0) throw new XMPException("Empty convert-string", 5);
            return Double.parseDouble(string2);
        }
        catch (NumberFormatException numberFormatException) {
            throw new XMPException("Invalid double string", 5);
        }
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    public static int convertToInteger(String string2) throws XMPException {
        if (string2 == null) throw new XMPException("Empty convert-string", 5);
        try {
            if (string2.length() == 0) throw new XMPException("Empty convert-string", 5);
            if (!string2.startsWith("0x")) return Integer.parseInt(string2);
            return Integer.parseInt(string2.substring(2), 16);
        }
        catch (NumberFormatException numberFormatException) {
            throw new XMPException("Invalid integer string", 5);
        }
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    public static long convertToLong(String string2) throws XMPException {
        if (string2 == null) throw new XMPException("Empty convert-string", 5);
        try {
            if (string2.length() == 0) throw new XMPException("Empty convert-string", 5);
            if (!string2.startsWith("0x")) return Long.parseLong(string2);
            return Long.parseLong(string2.substring(2), 16);
        }
        catch (NumberFormatException numberFormatException) {
            throw new XMPException("Invalid long string", 5);
        }
    }

    public static byte[] decodeBase64(String arrby) throws XMPException {
        try {
            arrby = Base64.decode(arrby.getBytes());
            return arrby;
        }
        catch (Throwable throwable) {
            throw new XMPException("Invalid base64 string", 5, throwable);
        }
    }

    public static String encodeBase64(byte[] arrby) {
        return new String(Base64.encode(arrby));
    }

    public static void removeProperties(XMPMeta xMPMeta, String string2, String string3, boolean bl, boolean bl2) throws XMPException {
        XMPUtilsImpl.removeProperties(xMPMeta, string2, string3, bl, bl2);
    }

    public static void separateArrayItems(XMPMeta xMPMeta, String string2, String string3, String string4, PropertyOptions propertyOptions, boolean bl) throws XMPException {
        XMPUtilsImpl.separateArrayItems(xMPMeta, string2, string3, string4, propertyOptions, bl);
    }
}

