/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.xmp.impl;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;

public class ByteBuffer {
    private byte[] buffer;
    private String encoding = null;
    private int length;

    public ByteBuffer(int n) {
        this.buffer = new byte[n];
        this.length = 0;
    }

    public ByteBuffer(InputStream inputStream) throws IOException {
        int n;
        this.length = 0;
        this.buffer = new byte[16384];
        while ((n = inputStream.read(this.buffer, this.length, 16384)) > 0) {
            this.length += n;
            if (n != 16384) break;
            this.ensureCapacity(this.length + 16384);
        }
    }

    public ByteBuffer(byte[] arrby) {
        this.buffer = arrby;
        this.length = arrby.length;
    }

    public ByteBuffer(byte[] arrby, int n) {
        if (n > arrby.length) {
            throw new ArrayIndexOutOfBoundsException("Valid length exceeds the buffer length.");
        }
        this.buffer = arrby;
        this.length = n;
    }

    public ByteBuffer(byte[] arrby, int n, int n2) {
        if (n2 > arrby.length - n) {
            throw new ArrayIndexOutOfBoundsException("Valid length exceeds the buffer length.");
        }
        this.buffer = new byte[n2];
        System.arraycopy(arrby, n, this.buffer, 0, n2);
        this.length = n2;
    }

    private void ensureCapacity(int n) {
        if (n > this.buffer.length) {
            byte[] arrby = this.buffer;
            this.buffer = new byte[arrby.length * 2];
            System.arraycopy(arrby, 0, this.buffer, 0, arrby.length);
        }
    }

    public void append(byte by) {
        this.ensureCapacity(this.length + 1);
        byte[] arrby = this.buffer;
        int n = this.length;
        this.length = n + 1;
        arrby[n] = by;
    }

    public void append(ByteBuffer byteBuffer) {
        this.append(byteBuffer.buffer, 0, byteBuffer.length);
    }

    public void append(byte[] arrby) {
        this.append(arrby, 0, arrby.length);
    }

    public void append(byte[] arrby, int n, int n2) {
        this.ensureCapacity(this.length + n2);
        System.arraycopy(arrby, n, this.buffer, this.length, n2);
        this.length += n2;
    }

    public byte byteAt(int n) {
        if (n < this.length) {
            return this.buffer[n];
        }
        throw new IndexOutOfBoundsException("The index exceeds the valid buffer area");
    }

    public int charAt(int n) {
        if (n < this.length) {
            return this.buffer[n] & 255;
        }
        throw new IndexOutOfBoundsException("The index exceeds the valid buffer area");
    }

    public InputStream getByteStream() {
        return new ByteArrayInputStream(this.buffer, 0, this.length);
    }

    public String getEncoding() {
        if (this.encoding == null) {
            this.encoding = this.length < 2 ? "UTF-8" : (this.buffer[0] == 0 ? (this.length >= 4 && this.buffer[1] == 0 ? ((this.buffer[2] & 255) == 254 && (this.buffer[3] & 255) == 255 ? "UTF-32BE" : "UTF-32") : "UTF-16BE") : ((this.buffer[0] & 255) < 128 ? (this.buffer[1] != 0 ? "UTF-8" : (this.length >= 4 && this.buffer[2] == 0 ? "UTF-32LE" : "UTF-16LE")) : ((this.buffer[0] & 255) == 239 ? "UTF-8" : ((this.buffer[0] & 255) == 254 ? "UTF-16" : (this.length >= 4 && this.buffer[2] == 0 ? "UTF-32" : "UTF-16")))));
        }
        return this.encoding;
    }

    public int length() {
        return this.length;
    }
}

