/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.xmp.impl;

import com.itextpdf.xmp.XMPConst;

public class Utils
implements XMPConst {
    public static final int UUID_LENGTH = 36;
    public static final int UUID_SEGMENT_COUNT = 4;
    private static boolean[] xmlNameChars;
    private static boolean[] xmlNameStartChars;

    static {
        Utils.initCharTables();
    }

    private Utils() {
    }

    static boolean checkUUIDFormat(String string2) {
        int n;
        boolean bl = false;
        if (string2 == null) {
            return false;
        }
        boolean bl2 = true;
        int n2 = 0;
        for (n = 0; n < string2.length(); ++n) {
            boolean bl3 = bl2;
            int n3 = n2;
            if (string2.charAt(n) == '-') {
                n3 = n2 + 1;
                bl3 = bl2 && (n == 8 || n == 13 || n == 18 || n == 23);
            }
            bl2 = bl3;
            n2 = n3;
        }
        boolean bl4 = bl;
        if (bl2) {
            bl4 = bl;
            if (4 == n2) {
                bl4 = bl;
                if (36 == n) {
                    bl4 = true;
                }
            }
        }
        return bl4;
    }

    public static String escapeXML(String string2, boolean bl, boolean bl2) {
        int n;
        block9 : {
            int n2 = 0;
            for (n = 0; n < string2.length(); ++n) {
                char c = string2.charAt(n);
                if (!(c == '<' || c == '>' || c == '&' || bl2 && (c == '\t' || c == '\n' || c == '\r') || bl && c == '\"')) {
                    continue;
                }
                n = 1;
                break block9;
            }
            n = 0;
        }
        if (n == 0) {
            return string2;
        }
        StringBuffer stringBuffer = new StringBuffer(string2.length() * 4 / 3);
        for (n = n2; n < string2.length(); ++n) {
            char c = string2.charAt(n);
            if (bl2 && (c == '\t' || c == '\n' || c == '\r')) {
                stringBuffer.append("&#x");
                stringBuffer.append(Integer.toHexString(c).toUpperCase());
                stringBuffer.append(';');
                continue;
            }
            if (c != '\"') {
                if (c != '&') {
                    if (c != '<') {
                        if (c != '>') {
                            stringBuffer.append(c);
                            continue;
                        }
                        stringBuffer.append("&gt;");
                        continue;
                    }
                    stringBuffer.append("&lt;");
                    continue;
                }
                stringBuffer.append("&amp;");
                continue;
            }
            String string3 = bl ? "&quot;" : "\"";
            stringBuffer.append(string3);
        }
        return stringBuffer.toString();
    }

    private static void initCharTables() {
        xmlNameChars = new boolean[256];
        xmlNameStartChars = new boolean[256];
        for (int n = 0; n < xmlNameChars.length; n = (int)((char)(n + 1))) {
            boolean bl;
            block4 : {
                boolean bl2;
                block5 : {
                    boolean[] arrbl = xmlNameStartChars;
                    bl2 = true;
                    bl = n == 58 || 65 <= n && n <= 90 || n == 95 || 97 <= n && n <= 122 || 192 <= n && n <= 214 || 216 <= n && n <= 246 || 248 <= n && n <= 255;
                    arrbl[n] = bl;
                    arrbl = xmlNameChars;
                    bl = bl2;
                    if (xmlNameStartChars[n]) break block4;
                    bl = bl2;
                    if (n == 45) break block4;
                    bl = bl2;
                    if (n == 46) break block4;
                    if (48 > n) break block5;
                    bl = bl2;
                    if (n <= 57) break block4;
                }
                bl = n == 183 ? bl2 : false;
            }
            arrbl[n] = bl;
        }
    }

    static boolean isControlChar(char c) {
        if ((c <= '\u001f' || c == '') && c != '\t' && c != '\n' && c != '\r') {
            return true;
        }
        return false;
    }

    static boolean isInternalProperty(String string2, String string3) {
        boolean bl;
        block14 : {
            block15 : {
                block21 : {
                    boolean bl2;
                    block20 : {
                        block19 : {
                            block18 : {
                                block17 : {
                                    block16 : {
                                        block13 : {
                                            bl = "http://purl.org/dc/elements/1.1/".equals(string2);
                                            bl2 = true;
                                            if (!bl) break block13;
                                            bl = bl2;
                                            if ("dc:format".equals(string3)) break block14;
                                            if ("dc:language".equals(string3)) {
                                                return true;
                                            }
                                            break block15;
                                        }
                                        if (!"http://ns.adobe.com/xap/1.0/".equals(string2)) break block16;
                                        bl = bl2;
                                        if ("xmp:BaseURL".equals(string3)) break block14;
                                        bl = bl2;
                                        if ("xmp:CreatorTool".equals(string3)) break block14;
                                        bl = bl2;
                                        if ("xmp:Format".equals(string3)) break block14;
                                        bl = bl2;
                                        if ("xmp:Locale".equals(string3)) break block14;
                                        bl = bl2;
                                        if ("xmp:MetadataDate".equals(string3)) break block14;
                                        if ("xmp:ModifyDate".equals(string3)) {
                                            return true;
                                        }
                                        break block15;
                                    }
                                    if (!"http://ns.adobe.com/pdf/1.3/".equals(string2)) break block17;
                                    bl = bl2;
                                    if ("pdf:BaseURL".equals(string3)) break block14;
                                    bl = bl2;
                                    if ("pdf:Creator".equals(string3)) break block14;
                                    bl = bl2;
                                    if ("pdf:ModDate".equals(string3)) break block14;
                                    bl = bl2;
                                    if ("pdf:PDFVersion".equals(string3)) break block14;
                                    if ("pdf:Producer".equals(string3)) {
                                        return true;
                                    }
                                    break block15;
                                }
                                if (!"http://ns.adobe.com/tiff/1.0/".equals(string2)) break block18;
                                if ("tiff:ImageDescription".equals(string3) || "tiff:Artist".equals(string3)) break block15;
                                bl = bl2;
                                if (!"tiff:Copyright".equals(string3)) break block14;
                                break block15;
                            }
                            if (!"http://ns.adobe.com/exif/1.0/".equals(string2)) break block19;
                            bl = bl2;
                            if (!"exif:UserComment".equals(string3)) break block14;
                            break block15;
                        }
                        if ("http://ns.adobe.com/exif/1.0/aux/".equals(string2)) {
                            return true;
                        }
                        if (!"http://ns.adobe.com/photoshop/1.0/".equals(string2)) break block20;
                        if ("photoshop:ICCProfile".equals(string3)) {
                            return true;
                        }
                        break block15;
                    }
                    if (!"http://ns.adobe.com/camera-raw-settings/1.0/".equals(string2)) break block21;
                    bl = bl2;
                    if ("crs:Version".equals(string3)) break block14;
                    bl = bl2;
                    if ("crs:RawFileName".equals(string3)) break block14;
                    if ("crs:ToneCurveName".equals(string3)) {
                        return true;
                    }
                    break block15;
                }
                if ("http://ns.adobe.com/StockPhoto/1.0/".equals(string2)) {
                    return true;
                }
                if ("http://ns.adobe.com/xap/1.0/mm/".equals(string2)) {
                    return true;
                }
                if ("http://ns.adobe.com/xap/1.0/t/".equals(string2)) {
                    return true;
                }
                if ("http://ns.adobe.com/xap/1.0/t/pg/".equals(string2)) {
                    return true;
                }
                if ("http://ns.adobe.com/xap/1.0/g/".equals(string2)) {
                    return true;
                }
                if ("http://ns.adobe.com/xap/1.0/g/img/".equals(string2)) {
                    return true;
                }
                if ("http://ns.adobe.com/xap/1.0/sType/Font#".equals(string2)) {
                    return true;
                }
            }
            bl = false;
        }
        return bl;
    }

    private static boolean isNameChar(char c) {
        if (!(c <= '\u00ff' && xmlNameChars[c] || Utils.isNameStartChar(c) || c >= '\u0300' && c <= '\u036f' || c >= '\u203f' && c <= '\u2040')) {
            return false;
        }
        return true;
    }

    private static boolean isNameStartChar(char c) {
        if (c <= '\u00ff' && xmlNameStartChars[c] || c >= '\u0100' && c <= '\u02ff' || c >= '\u0370' && c <= '\u037d' || c >= '\u037f' && c <= '\u1fff' || c >= '\u200c' && c <= '\u200d' || c >= '\u2070' && c <= '\u218f' || c >= '\u2c00' && c <= '\u2fef' || c >= '\u3001' && c <= '\ud7ff' || c >= '\uf900' && c <= '\ufdcf' || c >= '\ufdf0' && c <= '\ufffd' || c >= '\u10000' && c <= '\ueffff') {
            return true;
        }
        return false;
    }

    public static boolean isXMLName(String string2) {
        if (string2.length() > 0 && !Utils.isNameStartChar(string2.charAt(0))) {
            return false;
        }
        for (int i = 1; i < string2.length(); ++i) {
            if (Utils.isNameChar(string2.charAt(i))) continue;
            return false;
        }
        return true;
    }

    public static boolean isXMLNameNS(String string2) {
        if (!(string2.length() <= 0 || Utils.isNameStartChar(string2.charAt(0)) && string2.charAt(0) != ':')) {
            return false;
        }
        for (int i = 1; i < string2.length(); ++i) {
            if (Utils.isNameChar(string2.charAt(i))) {
                if (string2.charAt(i) != ':') continue;
                return false;
            }
            return false;
        }
        return true;
    }

    public static String normalizeLangValue(String string2) {
        if ("x-default".equals(string2)) {
            return string2;
        }
        StringBuffer stringBuffer = new StringBuffer();
        int n = 1;
        for (int i = 0; i < string2.length(); ++i) {
            char c = string2.charAt(i);
            int n2 = n;
            if (c != ' ') {
                if (c != '-' && c != '_') {
                    if (n != 2) {
                        stringBuffer.append(Character.toLowerCase(string2.charAt(i)));
                        n2 = n;
                    } else {
                        stringBuffer.append(Character.toUpperCase(string2.charAt(i)));
                        n2 = n;
                    }
                } else {
                    stringBuffer.append('-');
                    n2 = n + 1;
                }
            }
            n = n2;
        }
        return stringBuffer.toString();
    }

    static String removeControlChars(String charSequence) {
        charSequence = new StringBuffer((String)charSequence);
        for (int i = 0; i < charSequence.length(); ++i) {
            if (!Utils.isControlChar(charSequence.charAt(i))) continue;
            charSequence.setCharAt(i, ' ');
        }
        return charSequence.toString();
    }

    static String[] splitNameAndValue(String string2) {
        int n = string2.indexOf(61);
        int n2 = string2.charAt(1) == '?' ? 2 : 1;
        String string3 = string2.substring(n2, n);
        n2 = n + 1;
        char c = string2.charAt(n2);
        ++n2;
        int n3 = string2.length() - 2;
        StringBuffer stringBuffer = new StringBuffer(n3 - n);
        while (n2 < n3) {
            stringBuffer.append(string2.charAt(n2));
            n2 = n = n2 + 1;
            if (string2.charAt(n) != c) continue;
            n2 = n + 1;
        }
        return new String[]{string3, stringBuffer.toString()};
    }
}

