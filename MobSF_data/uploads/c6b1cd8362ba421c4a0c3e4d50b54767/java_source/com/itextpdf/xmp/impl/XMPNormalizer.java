/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.xmp.impl;

import com.itextpdf.xmp.XMPDateTime;
import com.itextpdf.xmp.XMPException;
import com.itextpdf.xmp.XMPMeta;
import com.itextpdf.xmp.XMPMetaFactory;
import com.itextpdf.xmp.XMPUtils;
import com.itextpdf.xmp.impl.Utils;
import com.itextpdf.xmp.impl.XMPDateTimeImpl;
import com.itextpdf.xmp.impl.XMPMetaImpl;
import com.itextpdf.xmp.impl.XMPNode;
import com.itextpdf.xmp.impl.XMPNodeUtils;
import com.itextpdf.xmp.impl.xpath.XMPPathParser;
import com.itextpdf.xmp.options.AliasOptions;
import com.itextpdf.xmp.options.ParseOptions;
import com.itextpdf.xmp.options.PropertyOptions;
import com.itextpdf.xmp.properties.XMPAliasInfo;
import java.util.Calendar;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

public class XMPNormalizer {
    private static Map dcArrayForms;

    static {
        XMPNormalizer.initDCArrays();
    }

    private XMPNormalizer() {
    }

    private static void compareAliasedSubtrees(XMPNode object, XMPNode object2, boolean bl) throws XMPException {
        if (object.getValue().equals(object2.getValue()) && object.getChildrenLength() == object2.getChildrenLength()) {
            if (!(bl || object.getName().equals(object2.getName()) && object.getOptions().equals(object2.getOptions()) && object.getQualifierLength() == object2.getQualifierLength())) {
                throw new XMPException("Mismatch between alias and base nodes", 203);
            }
            Iterator iterator = object.iterateChildren();
            Iterator iterator2 = object2.iterateChildren();
            while (iterator.hasNext() && iterator2.hasNext()) {
                XMPNormalizer.compareAliasedSubtrees((XMPNode)iterator.next(), (XMPNode)iterator2.next(), false);
            }
            object = object.iterateQualifier();
            object2 = object2.iterateQualifier();
            while (object.hasNext() && object2.hasNext()) {
                XMPNormalizer.compareAliasedSubtrees((XMPNode)object.next(), (XMPNode)object2.next(), false);
            }
            return;
        }
        throw new XMPException("Mismatch between alias and base nodes", 203);
    }

    private static void deleteEmptySchemas(XMPNode object) {
        object = object.iterateChildren();
        while (object.hasNext()) {
            if (((XMPNode)object.next()).hasChildren()) continue;
            object.remove();
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    private static void fixGPSTimeStamp(XMPNode comparable) throws XMPException {
        XMPNode xMPNode = XMPNodeUtils.findChildNode((XMPNode)comparable, "exif:GPSTimeStamp", false);
        if (xMPNode == null) {
            return;
        }
        try {
            XMPDateTime xMPDateTime = XMPUtils.convertToDate(xMPNode.getValue());
            if (xMPDateTime.getYear() == 0 && xMPDateTime.getMonth() == 0) {
                if (xMPDateTime.getDay() != 0) {
                    return;
                }
                XMPNode xMPNode2 = XMPNodeUtils.findChildNode((XMPNode)comparable, "exif:DateTimeOriginal", false);
                Comparable comparable2 = xMPNode2;
                if (xMPNode2 == null) {
                    comparable2 = XMPNodeUtils.findChildNode((XMPNode)comparable, "exif:DateTimeDigitized", false);
                }
                comparable = XMPUtils.convertToDate(comparable2.getValue());
                comparable2 = xMPDateTime.getCalendar();
                comparable2.set(1, comparable.getYear());
                comparable2.set(2, comparable.getMonth());
                comparable2.set(5, comparable.getDay());
                xMPNode.setValue(XMPUtils.convertFromDate(new XMPDateTimeImpl((Calendar)comparable2)));
                return;
            }
            return;
        }
        catch (XMPException xMPException) {
            return;
        }
    }

    private static void initDCArrays() {
        dcArrayForms = new HashMap();
        PropertyOptions propertyOptions = new PropertyOptions();
        propertyOptions.setArray(true);
        dcArrayForms.put("dc:contributor", propertyOptions);
        dcArrayForms.put("dc:language", propertyOptions);
        dcArrayForms.put("dc:publisher", propertyOptions);
        dcArrayForms.put("dc:relation", propertyOptions);
        dcArrayForms.put("dc:subject", propertyOptions);
        dcArrayForms.put("dc:type", propertyOptions);
        propertyOptions = new PropertyOptions();
        propertyOptions.setArray(true);
        propertyOptions.setArrayOrdered(true);
        dcArrayForms.put("dc:creator", propertyOptions);
        dcArrayForms.put("dc:date", propertyOptions);
        propertyOptions = new PropertyOptions();
        propertyOptions.setArray(true);
        propertyOptions.setArrayOrdered(true);
        propertyOptions.setArrayAlternate(true);
        propertyOptions.setArrayAltText(true);
        dcArrayForms.put("dc:description", propertyOptions);
        dcArrayForms.put("dc:rights", propertyOptions);
        dcArrayForms.put("dc:title", propertyOptions);
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    private static void migrateAudioCopyright(XMPMeta object, XMPNode xMPNode) {
        try {
            Object object2 = XMPNodeUtils.findSchemaNode(((XMPMetaImpl)object).getRoot(), "http://purl.org/dc/elements/1.1/", true);
            String string2 = xMPNode.getValue();
            object2 = XMPNodeUtils.findChildNode((XMPNode)object2, "dc:rights", false);
            if (object2 != null && object2.hasChildren()) {
                int n;
                int n2 = n = XMPNodeUtils.lookupLanguageItem((XMPNode)object2, "x-default");
                if (n < 0) {
                    object.setLocalizedText("http://purl.org/dc/elements/1.1/", "rights", "", "x-default", object2.getChild(1).getValue(), null);
                    n2 = XMPNodeUtils.lookupLanguageItem((XMPNode)object2, "x-default");
                }
                object = object2.getChild(n2);
                object2 = object.getValue();
                n2 = object2.indexOf("\n\n");
                if (n2 < 0) {
                    if (!string2.equals(object2)) {
                        StringBuilder stringBuilder = new StringBuilder();
                        stringBuilder.append((String)object2);
                        stringBuilder.append("\n\n");
                        stringBuilder.append(string2);
                        object.setValue(stringBuilder.toString());
                    }
                } else if (!object2.substring(n2 += 2).equals(string2)) {
                    StringBuilder stringBuilder = new StringBuilder();
                    stringBuilder.append(object2.substring(0, n2));
                    stringBuilder.append(string2);
                    object.setValue(stringBuilder.toString());
                }
            } else {
                object2 = new StringBuilder();
                object2.append("\n\n");
                object2.append(string2);
                object.setLocalizedText("http://purl.org/dc/elements/1.1/", "rights", "", "x-default", object2.toString(), null);
            }
            xMPNode.getParent().removeChild(xMPNode);
            return;
        }
        catch (XMPException xMPException) {
            return;
        }
    }

    private static void moveExplicitAliases(XMPNode xMPNode, ParseOptions object) throws XMPException {
        if (!xMPNode.getHasAliases()) {
            return;
        }
        xMPNode.setHasAliases(false);
        boolean bl = object.getStrictAliasing();
        for (XMPNode xMPNode2 : xMPNode.getUnmodifiableChildren()) {
            if (!xMPNode2.getHasAliases()) continue;
            Iterator iterator = xMPNode2.iterateChildren();
            while (iterator.hasNext()) {
                XMPNode xMPNode3 = (XMPNode)iterator.next();
                if (!xMPNode3.isAlias()) continue;
                xMPNode3.setAlias(false);
                XMPAliasInfo xMPAliasInfo = XMPMetaFactory.getSchemaRegistry().findAlias(xMPNode3.getName());
                if (xMPAliasInfo == null) continue;
                Object object2 = xMPAliasInfo.getNamespace();
                object = null;
                object2 = XMPNodeUtils.findSchemaNode(xMPNode, (String)object2, null, true);
                object2.setImplicit(false);
                Object object3 = new StringBuilder();
                object3.append(xMPAliasInfo.getPrefix());
                object3.append(xMPAliasInfo.getPropName());
                object3 = XMPNodeUtils.findChildNode((XMPNode)object2, object3.toString(), false);
                if (object3 == null) {
                    if (xMPAliasInfo.getAliasForm().isSimple()) {
                        object = new StringBuilder();
                        object.append(xMPAliasInfo.getPrefix());
                        object.append(xMPAliasInfo.getPropName());
                        xMPNode3.setName(object.toString());
                        object2.addChild(xMPNode3);
                        iterator.remove();
                        continue;
                    }
                    object = new StringBuilder();
                    object.append(xMPAliasInfo.getPrefix());
                    object.append(xMPAliasInfo.getPropName());
                    object = new XMPNode(object.toString(), xMPAliasInfo.getAliasForm().toPropertyOptions());
                    object2.addChild((XMPNode)object);
                    XMPNormalizer.transplantArrayItemAlias(iterator, xMPNode3, (XMPNode)object);
                    continue;
                }
                if (xMPAliasInfo.getAliasForm().isSimple()) {
                    if (bl) {
                        XMPNormalizer.compareAliasedSubtrees(xMPNode3, (XMPNode)object3, true);
                    }
                    iterator.remove();
                    continue;
                }
                if (xMPAliasInfo.getAliasForm().isArrayAltText()) {
                    int n = XMPNodeUtils.lookupLanguageItem((XMPNode)object3, "x-default");
                    if (n != -1) {
                        object = object3.getChild(n);
                    }
                } else if (object3.hasChildren()) {
                    object = object3.getChild(1);
                }
                if (object == null) {
                    XMPNormalizer.transplantArrayItemAlias(iterator, xMPNode3, (XMPNode)object3);
                    continue;
                }
                if (bl) {
                    XMPNormalizer.compareAliasedSubtrees(xMPNode3, (XMPNode)object, true);
                }
                iterator.remove();
            }
            xMPNode2.setHasAliases(false);
        }
    }

    private static void normalizeDCArrays(XMPNode xMPNode) throws XMPException {
        for (int i = 1; i <= xMPNode.getChildrenLength(); ++i) {
            XMPNode xMPNode2 = xMPNode.getChild(i);
            PropertyOptions propertyOptions = (PropertyOptions)dcArrayForms.get(xMPNode2.getName());
            if (propertyOptions == null) continue;
            if (xMPNode2.getOptions().isSimple()) {
                XMPNode xMPNode3 = new XMPNode(xMPNode2.getName(), propertyOptions);
                xMPNode2.setName("[]");
                xMPNode3.addChild(xMPNode2);
                xMPNode.replaceChild(i, xMPNode3);
                if (!propertyOptions.isArrayAltText() || xMPNode2.getOptions().getHasLanguage()) continue;
                xMPNode2.addQualifier(new XMPNode("xml:lang", "x-default", null));
                continue;
            }
            xMPNode2.getOptions().setOption(7680, false);
            xMPNode2.getOptions().mergeWith(propertyOptions);
            if (!propertyOptions.isArrayAltText()) continue;
            XMPNormalizer.repairAltText(xMPNode2);
        }
    }

    static XMPMeta process(XMPMetaImpl xMPMetaImpl, ParseOptions parseOptions) throws XMPException {
        XMPNode xMPNode = xMPMetaImpl.getRoot();
        XMPNormalizer.touchUpDataModel(xMPMetaImpl);
        XMPNormalizer.moveExplicitAliases(xMPNode, parseOptions);
        XMPNormalizer.tweakOldXMP(xMPNode);
        XMPNormalizer.deleteEmptySchemas(xMPNode);
        return xMPMetaImpl;
    }

    private static void repairAltText(XMPNode object) throws XMPException {
        if (object != null) {
            if (!object.getOptions().isArray()) {
                return;
            }
            object.getOptions().setArrayOrdered(true).setArrayAlternate(true).setArrayAltText(true);
            object = object.iterateChildren();
            while (object.hasNext()) {
                XMPNode xMPNode = (XMPNode)object.next();
                if (xMPNode.getOptions().isCompositeProperty()) {
                    object.remove();
                    continue;
                }
                if (xMPNode.getOptions().getHasLanguage()) continue;
                String string2 = xMPNode.getValue();
                if (string2 != null && string2.length() != 0) {
                    xMPNode.addQualifier(new XMPNode("xml:lang", "x-repair", null));
                    continue;
                }
                object.remove();
            }
            return;
        }
    }

    private static void touchUpDataModel(XMPMetaImpl xMPMetaImpl) throws XMPException {
        XMPNodeUtils.findSchemaNode(xMPMetaImpl.getRoot(), "http://purl.org/dc/elements/1.1/", true);
        Iterator iterator = xMPMetaImpl.getRoot().iterateChildren();
        while (iterator.hasNext()) {
            XMPNode xMPNode = (XMPNode)iterator.next();
            if ("http://purl.org/dc/elements/1.1/".equals(xMPNode.getName())) {
                XMPNormalizer.normalizeDCArrays(xMPNode);
                continue;
            }
            if ("http://ns.adobe.com/exif/1.0/".equals(xMPNode.getName())) {
                XMPNormalizer.fixGPSTimeStamp(xMPNode);
                if ((xMPNode = XMPNodeUtils.findChildNode(xMPNode, "exif:UserComment", false)) == null) continue;
                XMPNormalizer.repairAltText(xMPNode);
                continue;
            }
            if ("http://ns.adobe.com/xmp/1.0/DynamicMedia/".equals(xMPNode.getName())) {
                if ((xMPNode = XMPNodeUtils.findChildNode(xMPNode, "xmpDM:copyright", false)) == null) continue;
                XMPNormalizer.migrateAudioCopyright(xMPMetaImpl, xMPNode);
                continue;
            }
            if (!"http://ns.adobe.com/xap/1.0/rights/".equals(xMPNode.getName()) || (xMPNode = XMPNodeUtils.findChildNode(xMPNode, "xmpRights:UsageTerms", false)) == null) continue;
            XMPNormalizer.repairAltText(xMPNode);
        }
    }

    private static void transplantArrayItemAlias(Iterator iterator, XMPNode xMPNode, XMPNode xMPNode2) throws XMPException {
        if (xMPNode2.getOptions().isArrayAltText()) {
            if (xMPNode.getOptions().getHasLanguage()) {
                throw new XMPException("Alias to x-default already has a language qualifier", 203);
            }
            xMPNode.addQualifier(new XMPNode("xml:lang", "x-default", null));
        }
        iterator.remove();
        xMPNode.setName("[]");
        xMPNode2.addChild(xMPNode);
    }

    private static void tweakOldXMP(XMPNode xMPNode) throws XMPException {
        if (xMPNode.getName() != null && xMPNode.getName().length() >= 36) {
            Object object = xMPNode.getName().toLowerCase();
            String string2 = object;
            if (object.startsWith("uuid:")) {
                string2 = object.substring(5);
            }
            if (Utils.checkUUIDFormat(string2)) {
                object = XMPNodeUtils.findNode(xMPNode, XMPPathParser.expandXPath("http://ns.adobe.com/xap/1.0/mm/", "InstanceID"), true, null);
                if (object != null) {
                    object.setOptions(null);
                    StringBuilder stringBuilder = new StringBuilder();
                    stringBuilder.append("uuid:");
                    stringBuilder.append(string2);
                    object.setValue(stringBuilder.toString());
                    object.removeChildren();
                    object.removeQualifiers();
                    xMPNode.setName(null);
                    return;
                }
                throw new XMPException("Failure creating xmpMM:InstanceID", 9);
            }
        }
    }
}

