/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.xmp.impl;

import com.itextpdf.xmp.impl.ByteBuffer;
import java.io.UnsupportedEncodingException;

public class Latin1Converter {
    private static final int STATE_START = 0;
    private static final int STATE_UTF8CHAR = 11;

    private Latin1Converter() {
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    public static ByteBuffer convert(ByteBuffer byteBuffer) {
        if (!"UTF-8".equals(byteBuffer.getEncoding())) return byteBuffer;
        byte[] arrby = new byte[8];
        ByteBuffer byteBuffer2 = new ByteBuffer(byteBuffer.length() * 4 / 3);
        int n = 0;
        int n2 = 0;
        int n3 = 0;
        int n4 = 0;
        int n5 = 0;
        while (n2 < byteBuffer.length()) {
            block7 : {
                block10 : {
                    block8 : {
                        int n6;
                        block9 : {
                            int n7;
                            block6 : {
                                n7 = byteBuffer.charAt(n2);
                                if (n3 == 11) break block6;
                                if (n7 < 127) {
                                    byteBuffer2.append((byte)n7);
                                } else if (n7 >= 192) {
                                    n4 = -1;
                                    n3 = n7;
                                    while (n4 < 8 && (n3 & 128) == 128) {
                                        ++n4;
                                        n3 <<= 1;
                                    }
                                    arrby[n5] = (byte)n7;
                                    ++n5;
                                    n3 = 11;
                                } else {
                                    byteBuffer2.append(Latin1Converter.convertToUTF8((byte)n7));
                                }
                                break block7;
                            }
                            if (n4 <= 0 || (n7 & 192) != 128) break block8;
                            n6 = n5 + 1;
                            arrby[n5] = (byte)n7;
                            if (--n4 != 0) break block9;
                            byteBuffer2.append(arrby, 0, n6);
                            break block10;
                        }
                        n5 = n6;
                        break block7;
                    }
                    byteBuffer2.append(Latin1Converter.convertToUTF8(arrby[0]));
                    n2 -= n5;
                }
                n3 = 0;
                n5 = 0;
            }
            ++n2;
        }
        return byteBuffer2;
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    private static byte[] convertToUTF8(byte by) {
        int n = by & 255;
        if (n < 128) return new byte[]{by};
        if (n == 129 || n == 141 || n == 143 || n == 144 || n == 157) return new byte[]{32};
        try {
            return new String(new byte[]{by}, "cp1252").getBytes("UTF-8");
        }
        catch (UnsupportedEncodingException unsupportedEncodingException) {}
        return new byte[]{by};
    }
}

