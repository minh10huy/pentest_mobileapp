/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.xmp.impl;

import com.itextpdf.xmp.XMPDateTime;
import com.itextpdf.xmp.XMPException;
import com.itextpdf.xmp.impl.ISO8601Converter;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Locale;
import java.util.TimeZone;

public class XMPDateTimeImpl
implements XMPDateTime {
    private int day = 0;
    private boolean hasDate = false;
    private boolean hasTime = false;
    private boolean hasTimeZone = false;
    private int hour = 0;
    private int minute = 0;
    private int month = 0;
    private int nanoSeconds;
    private int second = 0;
    private TimeZone timeZone = null;
    private int year = 0;

    public XMPDateTimeImpl() {
    }

    public XMPDateTimeImpl(String string2) throws XMPException {
        ISO8601Converter.parse(string2, this);
    }

    public XMPDateTimeImpl(Calendar cloneable) {
        Date date = cloneable.getTime();
        cloneable = cloneable.getTimeZone();
        GregorianCalendar gregorianCalendar = (GregorianCalendar)Calendar.getInstance(Locale.US);
        gregorianCalendar.setGregorianChange(new Date(Long.MIN_VALUE));
        gregorianCalendar.setTimeZone((TimeZone)cloneable);
        gregorianCalendar.setTime(date);
        this.year = gregorianCalendar.get(1);
        this.month = gregorianCalendar.get(2) + 1;
        this.day = gregorianCalendar.get(5);
        this.hour = gregorianCalendar.get(11);
        this.minute = gregorianCalendar.get(12);
        this.second = gregorianCalendar.get(13);
        this.nanoSeconds = gregorianCalendar.get(14) * 1000000;
        this.timeZone = gregorianCalendar.getTimeZone();
        this.hasTimeZone = true;
        this.hasTime = true;
        this.hasDate = true;
    }

    public XMPDateTimeImpl(Date date, TimeZone timeZone) {
        GregorianCalendar gregorianCalendar = new GregorianCalendar(timeZone);
        gregorianCalendar.setTime(date);
        this.year = gregorianCalendar.get(1);
        this.month = gregorianCalendar.get(2) + 1;
        this.day = gregorianCalendar.get(5);
        this.hour = gregorianCalendar.get(11);
        this.minute = gregorianCalendar.get(12);
        this.second = gregorianCalendar.get(13);
        this.nanoSeconds = gregorianCalendar.get(14) * 1000000;
        this.timeZone = timeZone;
        this.hasTimeZone = true;
        this.hasTime = true;
        this.hasDate = true;
    }

    public int compareTo(Object object) {
        long l = this.getCalendar().getTimeInMillis();
        if ((l -= (object = (XMPDateTime)object).getCalendar().getTimeInMillis()) != 0L) {
            return (int)Math.signum(l);
        }
        return (int)Math.signum(this.nanoSeconds - object.getNanoSecond());
    }

    @Override
    public Calendar getCalendar() {
        GregorianCalendar gregorianCalendar = (GregorianCalendar)Calendar.getInstance(Locale.US);
        gregorianCalendar.setGregorianChange(new Date(Long.MIN_VALUE));
        if (this.hasTimeZone) {
            gregorianCalendar.setTimeZone(this.timeZone);
        }
        gregorianCalendar.set(1, this.year);
        gregorianCalendar.set(2, this.month - 1);
        gregorianCalendar.set(5, this.day);
        gregorianCalendar.set(11, this.hour);
        gregorianCalendar.set(12, this.minute);
        gregorianCalendar.set(13, this.second);
        gregorianCalendar.set(14, this.nanoSeconds / 1000000);
        return gregorianCalendar;
    }

    @Override
    public int getDay() {
        return this.day;
    }

    @Override
    public int getHour() {
        return this.hour;
    }

    @Override
    public String getISO8601String() {
        return ISO8601Converter.render(this);
    }

    @Override
    public int getMinute() {
        return this.minute;
    }

    @Override
    public int getMonth() {
        return this.month;
    }

    @Override
    public int getNanoSecond() {
        return this.nanoSeconds;
    }

    @Override
    public int getSecond() {
        return this.second;
    }

    @Override
    public TimeZone getTimeZone() {
        return this.timeZone;
    }

    @Override
    public int getYear() {
        return this.year;
    }

    @Override
    public boolean hasDate() {
        return this.hasDate;
    }

    @Override
    public boolean hasTime() {
        return this.hasTime;
    }

    @Override
    public boolean hasTimeZone() {
        return this.hasTimeZone;
    }

    @Override
    public void setDay(int n) {
        this.day = n < 1 ? 1 : (n > 31 ? 31 : n);
        this.hasDate = true;
    }

    @Override
    public void setHour(int n) {
        this.hour = Math.min(Math.abs(n), 23);
        this.hasTime = true;
    }

    @Override
    public void setMinute(int n) {
        this.minute = Math.min(Math.abs(n), 59);
        this.hasTime = true;
    }

    @Override
    public void setMonth(int n) {
        this.month = n < 1 ? 1 : (n > 12 ? 12 : n);
        this.hasDate = true;
    }

    @Override
    public void setNanoSecond(int n) {
        this.nanoSeconds = n;
        this.hasTime = true;
    }

    @Override
    public void setSecond(int n) {
        this.second = Math.min(Math.abs(n), 59);
        this.hasTime = true;
    }

    @Override
    public void setTimeZone(TimeZone timeZone) {
        this.timeZone = timeZone;
        this.hasTime = true;
        this.hasTimeZone = true;
    }

    @Override
    public void setYear(int n) {
        this.year = Math.min(Math.abs(n), 9999);
        this.hasDate = true;
    }

    public String toString() {
        return this.getISO8601String();
    }
}

