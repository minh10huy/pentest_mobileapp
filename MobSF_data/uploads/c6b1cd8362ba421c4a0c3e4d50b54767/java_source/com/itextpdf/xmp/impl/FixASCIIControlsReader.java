/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.xmp.impl;

import com.itextpdf.xmp.impl.Utils;
import java.io.IOException;
import java.io.PushbackReader;
import java.io.Reader;

public class FixASCIIControlsReader
extends PushbackReader {
    private static final int BUFFER_SIZE = 8;
    private static final int STATE_AMP = 1;
    private static final int STATE_DIG1 = 4;
    private static final int STATE_ERROR = 5;
    private static final int STATE_HASH = 2;
    private static final int STATE_HEX = 3;
    private static final int STATE_START = 0;
    private int control = 0;
    private int digits = 0;
    private int state = 0;

    public FixASCIIControlsReader(Reader reader) {
        super(reader, 8);
    }

    private char processChar(char c) {
        switch (this.state) {
            default: {
                return c;
            }
            case 5: {
                this.state = 0;
                return c;
            }
            case 4: {
                if ('0' <= c && c <= '9') {
                    this.control = this.control * 10 + Character.digit(c, 10);
                    ++this.digits;
                    if (this.digits <= 5) {
                        this.state = 4;
                        return c;
                    }
                    this.state = 5;
                    return c;
                }
                if (c == ';' && Utils.isControlChar((char)this.control)) {
                    this.state = 0;
                    return (char)this.control;
                }
                this.state = 5;
                return c;
            }
            case 3: {
                if ('0' <= c && c <= '9' || 'a' <= c && c <= 'f' || 'A' <= c && c <= 'F') {
                    this.control = this.control * 16 + Character.digit(c, 16);
                    ++this.digits;
                    if (this.digits <= 4) {
                        this.state = 3;
                        return c;
                    }
                    this.state = 5;
                    return c;
                }
                if (c == ';' && Utils.isControlChar((char)this.control)) {
                    this.state = 0;
                    return (char)this.control;
                }
                this.state = 5;
                return c;
            }
            case 2: {
                if (c == 'x') {
                    this.control = 0;
                    this.digits = 0;
                    this.state = 3;
                    return c;
                }
                if ('0' <= c && c <= '9') {
                    this.control = Character.digit(c, 10);
                    this.digits = 1;
                    this.state = 4;
                    return c;
                }
                this.state = 5;
                return c;
            }
            case 1: {
                if (c == '#') {
                    this.state = 2;
                    return c;
                }
                this.state = 5;
                return c;
            }
            case 0: 
        }
        if (c == '&') {
            this.state = 1;
        }
        return c;
    }

    @Override
    public int read(char[] arrc, int n, int n2) throws IOException {
        char[] arrc2 = new char[8];
        int n3 = n;
        n = 1;
        int n4 = 0;
        block0 : do {
            int n5 = 0;
            while (n != 0 && n4 < n2) {
                n = super.read(arrc2, n5, 1) == 1 ? 1 : 0;
                if (n != 0) {
                    int n6 = this.processChar(arrc2[n5]);
                    if (this.state == 0) {
                        int n7 = n6;
                        if (Utils.isControlChar((char)n6)) {
                            n7 = 32;
                        }
                        arrc[n3] = n7;
                        ++n4;
                        ++n3;
                        continue block0;
                    }
                    if (this.state == 5) {
                        this.unread(arrc2, 0, n5 + 1);
                        continue block0;
                    }
                    ++n5;
                    continue;
                }
                if (n5 <= 0) continue;
                this.unread(arrc2, 0, n5);
                this.state = 5;
                n = 1;
                continue block0;
            }
            break;
        } while (true);
        n2 = n4;
        if (n4 <= 0) {
            if (n != 0) {
                return n4;
            }
            n2 = -1;
        }
        return n2;
    }
}

