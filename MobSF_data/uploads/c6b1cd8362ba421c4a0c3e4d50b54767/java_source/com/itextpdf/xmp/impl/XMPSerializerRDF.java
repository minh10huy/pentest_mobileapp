/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.xmp.impl;

import com.itextpdf.xmp.XMPException;
import com.itextpdf.xmp.XMPMeta;
import com.itextpdf.xmp.XMPMetaFactory;
import com.itextpdf.xmp.impl.CountOutputStream;
import com.itextpdf.xmp.impl.QName;
import com.itextpdf.xmp.impl.Utils;
import com.itextpdf.xmp.impl.XMPMetaImpl;
import com.itextpdf.xmp.impl.XMPNode;
import com.itextpdf.xmp.impl.XMPNodeUtils;
import com.itextpdf.xmp.options.PropertyOptions;
import com.itextpdf.xmp.options.SerializeOptions;
import java.io.IOException;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.util.Arrays;
import java.util.Collection;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;

public class XMPSerializerRDF {
    private static final int DEFAULT_PAD = 2048;
    private static final String PACKET_HEADER = "<?xpacket begin=\"\ufeff\" id=\"W5M0MpCehiHzreSzNTczkc9d\"?>";
    private static final String PACKET_TRAILER = "<?xpacket end=\"";
    private static final String PACKET_TRAILER2 = "\"?>";
    static final Set RDF_ATTR_QUALIFIER = new HashSet<String>(Arrays.asList("xml:lang", "rdf:resource", "rdf:ID", "rdf:bagID", "rdf:nodeID"));
    private static final String RDF_EMPTY_STRUCT = "<rdf:Description/>";
    private static final String RDF_RDF_END = "</rdf:RDF>";
    private static final String RDF_RDF_START = "<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\">";
    private static final String RDF_SCHEMA_END = "</rdf:Description>";
    private static final String RDF_SCHEMA_START = "<rdf:Description rdf:about=";
    private static final String RDF_STRUCT_END = "</rdf:Description>";
    private static final String RDF_STRUCT_START = "<rdf:Description";
    private static final String RDF_XMPMETA_END = "</x:xmpmeta>";
    private static final String RDF_XMPMETA_START = "<x:xmpmeta xmlns:x=\"adobe:ns:meta/\" x:xmptk=\"";
    private SerializeOptions options;
    private CountOutputStream outputStream;
    private int padding;
    private int unicodeSize = 1;
    private OutputStreamWriter writer;
    private XMPMetaImpl xmp;

    private void addPadding(int n) throws XMPException, IOException {
        if (this.options.getExactPacketLength()) {
            n = this.outputStream.getBytesWritten() + n * this.unicodeSize;
            if (n > this.padding) {
                throw new XMPException("Can't fit into specified packet size", 107);
            }
            this.padding -= n;
        }
        this.padding /= this.unicodeSize;
        n = this.options.getNewline().length();
        if (this.padding >= n) {
            int n2;
            int n3;
            this.padding -= n;
            while ((n3 = this.padding) >= (n2 = n + 100)) {
                this.writeChars(100, ' ');
                this.writeNewline();
                this.padding -= n2;
            }
            this.writeChars(this.padding, ' ');
            this.writeNewline();
            return;
        }
        this.writeChars(this.padding, ' ');
    }

    private void appendNodeValue(String string2, boolean bl) throws IOException {
        String string3 = string2;
        if (string2 == null) {
            string3 = "";
        }
        this.write(Utils.escapeXML(string3, bl, true));
    }

    private boolean canBeRDFAttrProp(XMPNode xMPNode) {
        if (!(xMPNode.hasQualifier() || xMPNode.getOptions().isURI() || xMPNode.getOptions().isCompositeProperty() || xMPNode.getOptions().containsOneOf(1073741824) || "[]".equals(xMPNode.getName()))) {
            return true;
        }
        return false;
    }

    private void declareNamespace(String object, String charSequence, Set set, int n) throws IOException {
        String string2 = object;
        String string3 = charSequence;
        if (charSequence == null) {
            if ((object = new QName((String)object)).hasPrefix()) {
                string2 = object.getPrefix();
                object = XMPMetaFactory.getSchemaRegistry();
                charSequence = new StringBuilder();
                charSequence.append(string2);
                charSequence.append(":");
                string3 = object.getNamespaceURI(charSequence.toString());
                this.declareNamespace(string2, string3, set, n);
            } else {
                return;
            }
        }
        if (!set.contains(string2)) {
            this.writeNewline();
            this.writeIndent(n);
            this.write("xmlns:");
            this.write(string2);
            this.write("=\"");
            this.write(string3);
            this.write(34);
            set.add(string2);
        }
    }

    private void declareUsedNamespaces(XMPNode object, Set set, int n) throws IOException {
        Object object2;
        if (object.getOptions().isSchemaNode()) {
            this.declareNamespace(object.getValue().substring(0, object.getValue().length() - 1), object.getName(), set, n);
        } else if (object.getOptions().isStruct()) {
            object2 = object.iterateChildren();
            while (object2.hasNext()) {
                this.declareNamespace(((XMPNode)object2.next()).getName(), null, set, n);
            }
        }
        object2 = object.iterateChildren();
        while (object2.hasNext()) {
            this.declareUsedNamespaces((XMPNode)object2.next(), set, n);
        }
        object = object.iterateQualifier();
        while (object.hasNext()) {
            object2 = (XMPNode)object.next();
            this.declareNamespace(object2.getName(), null, set, n);
            this.declareUsedNamespaces((XMPNode)object2, set, n);
        }
    }

    private void emitRDFArrayTag(XMPNode xMPNode, boolean bl, int n) throws IOException {
        if (bl || xMPNode.hasChildren()) {
            this.writeIndent(n);
            String string2 = bl ? "<rdf:" : "</rdf:";
            this.write(string2);
            if (xMPNode.getOptions().isArrayAlternate()) {
                this.write("Alt");
            } else if (xMPNode.getOptions().isArrayOrdered()) {
                this.write("Seq");
            } else {
                this.write("Bag");
            }
            if (bl && !xMPNode.hasChildren()) {
                this.write("/>");
            } else {
                this.write(">");
            }
            this.writeNewline();
        }
    }

    private void endOuterRDFDescription(int n) throws IOException {
        this.writeIndent(n + 1);
        this.write("</rdf:Description>");
        this.writeNewline();
    }

    private String serializeAsRDF() throws IOException, XMPException {
        boolean bl = this.options.getOmitPacketWrapper();
        int n = 0;
        if (!bl) {
            this.writeIndent(0);
            this.write(PACKET_HEADER);
            this.writeNewline();
        }
        if (!this.options.getOmitXmpMetaElement()) {
            this.writeIndent(0);
            this.write(RDF_XMPMETA_START);
            if (!this.options.getOmitVersionAttribute()) {
                this.write(XMPMetaFactory.getVersionInfo().getMessage());
            }
            this.write("\">");
            this.writeNewline();
            n = 1;
        }
        this.writeIndent(n);
        this.write(RDF_RDF_START);
        this.writeNewline();
        if (this.options.getUseCanonicalFormat()) {
            this.serializeCanonicalRDFSchemas(n);
        } else {
            this.serializeCompactRDFSchemas(n);
        }
        this.writeIndent(n);
        this.write(RDF_RDF_END);
        this.writeNewline();
        if (!this.options.getOmitXmpMetaElement()) {
            this.writeIndent(n - 1);
            this.write(RDF_XMPMETA_END);
            this.writeNewline();
        }
        String string2 = "";
        CharSequence charSequence = string2;
        if (!this.options.getOmitPacketWrapper()) {
            for (n = this.options.getBaseIndent(); n > 0; --n) {
                charSequence = new StringBuilder();
                charSequence.append(string2);
                charSequence.append(this.options.getIndent());
                string2 = charSequence.toString();
            }
            charSequence = new StringBuilder();
            charSequence.append(string2);
            charSequence.append(PACKET_TRAILER);
            string2 = charSequence.toString();
            charSequence = new StringBuilder();
            charSequence.append(string2);
            char c = this.options.getReadOnlyPacket() ? (char)'r' : 'w';
            charSequence.append(c);
            string2 = charSequence.toString();
            charSequence = new StringBuilder();
            charSequence.append(string2);
            charSequence.append(PACKET_TRAILER2);
            charSequence = charSequence.toString();
        }
        return charSequence;
    }

    /*
     * Enabled aggressive block sorting
     */
    private void serializeCanonicalRDFProperty(XMPNode object, boolean bl, boolean bl2, int n) throws IOException, XMPException {
        Object object2;
        block32 : {
            int n2;
            String string2;
            int n3;
            block30 : {
                block27 : {
                    int n4;
                    boolean bl3;
                    block31 : {
                        block28 : {
                            block29 : {
                                int n5;
                                int n6;
                                block26 : {
                                    object2 = object.getName();
                                    if (bl2) {
                                        string2 = "rdf:value";
                                    } else {
                                        string2 = object2;
                                        if ("[]".equals(object2)) {
                                            string2 = "rdf:li";
                                        }
                                    }
                                    this.writeIndent(n);
                                    this.write(60);
                                    this.write(string2);
                                    object2 = object.iterateQualifier();
                                    n6 = 0;
                                    n3 = 0;
                                    n2 = 0;
                                    bl3 = false;
                                    do {
                                        boolean bl4 = object2.hasNext();
                                        n5 = 1;
                                        n4 = 1;
                                        if (!bl4) break;
                                        XMPNode xMPNode = (XMPNode)object2.next();
                                        if (!RDF_ATTR_QUALIFIER.contains(xMPNode.getName())) {
                                            n2 = 1;
                                            continue;
                                        }
                                        bl3 = bl4 = "rdf:resource".equals(xMPNode.getName());
                                        if (bl2) continue;
                                        this.write(32);
                                        this.write(xMPNode.getName());
                                        this.write("=\"");
                                        this.appendNodeValue(xMPNode.getValue(), true);
                                        this.write(34);
                                        bl3 = bl4;
                                    } while (true);
                                    if (n2 == 0 || bl2) break block26;
                                    if (bl3) {
                                        throw new XMPException("Can't mix rdf:resource and general qualifiers", 202);
                                    }
                                    if (bl) {
                                        this.write(">");
                                        this.writeNewline();
                                        n3 = n + 1;
                                        this.writeIndent(n3);
                                        this.write(RDF_STRUCT_START);
                                        this.write(">");
                                    } else {
                                        this.write(" rdf:parseType=\"Resource\">");
                                        n3 = n;
                                    }
                                    this.writeNewline();
                                    n = n3 + 1;
                                    this.serializeCanonicalRDFProperty((XMPNode)object, bl, true, n);
                                    object = object.iterateQualifier();
                                    while (object.hasNext()) {
                                        object2 = (XMPNode)object.next();
                                        if (RDF_ATTR_QUALIFIER.contains(object2.getName())) continue;
                                        this.serializeCanonicalRDFProperty((XMPNode)object2, bl, false, n);
                                    }
                                    n2 = n4;
                                    n = n3;
                                    if (bl) {
                                        this.writeIndent(n3);
                                        this.write("</rdf:Description>");
                                        this.writeNewline();
                                        n = n3 - 1;
                                        n2 = n4;
                                    }
                                    break block27;
                                }
                                if (object.getOptions().isCompositeProperty()) break block28;
                                if (object.getOptions().isURI()) {
                                    this.write(" rdf:resource=\"");
                                    this.appendNodeValue(object.getValue(), true);
                                    this.write("\"/>");
                                    this.writeNewline();
                                    return;
                                }
                                if (object.getValue() == null || "".equals(object.getValue())) break block29;
                                this.write(62);
                                this.appendNodeValue(object.getValue(), false);
                                n3 = n6;
                                n2 = n5;
                                break block30;
                            }
                            this.write("/>");
                            this.writeNewline();
                            return;
                        }
                        if (!object.getOptions().isArray()) break block31;
                        this.write(62);
                        this.writeNewline();
                        n2 = n + 1;
                        this.emitRDFArrayTag((XMPNode)object, true, n2);
                        if (object.getOptions().isArrayAltText()) {
                            XMPNodeUtils.normalizeLangArray((XMPNode)object);
                        }
                        object2 = object.iterateChildren();
                        while (object2.hasNext()) {
                            this.serializeCanonicalRDFProperty((XMPNode)object2.next(), bl, false, n + 2);
                        }
                        this.emitRDFArrayTag((XMPNode)object, false, n2);
                        n2 = n4;
                        break block27;
                    }
                    if (bl3) break block32;
                    if (!object.hasChildren()) {
                        if (bl) {
                            this.write(">");
                            this.writeNewline();
                            this.writeIndent(n + 1);
                            this.write(RDF_EMPTY_STRUCT);
                            n2 = 1;
                        } else {
                            this.write(" rdf:parseType=\"Resource\"/>");
                            n2 = n3;
                        }
                        this.writeNewline();
                    } else {
                        if (bl) {
                            this.write(">");
                            this.writeNewline();
                            n3 = n + 1;
                            this.writeIndent(n3);
                            this.write(RDF_STRUCT_START);
                            this.write(">");
                        } else {
                            this.write(" rdf:parseType=\"Resource\">");
                            n3 = n;
                        }
                        this.writeNewline();
                        object = object.iterateChildren();
                        while (object.hasNext()) {
                            this.serializeCanonicalRDFProperty((XMPNode)object.next(), bl, false, n3 + 1);
                        }
                        n2 = n4;
                        n = n3;
                        if (bl) {
                            this.writeIndent(n3);
                            this.write("</rdf:Description>");
                            this.writeNewline();
                            n = n3 - 1;
                            n2 = n4;
                        }
                    }
                }
                n3 = 1;
            }
            if (n2 == 0) return;
            if (n3 != 0) {
                this.writeIndent(n);
            }
            this.write("</");
            this.write(string2);
            this.write(62);
            this.writeNewline();
            return;
        }
        object = object.iterateChildren();
        do {
            if (!object.hasNext()) {
                this.write("/>");
                this.writeNewline();
                return;
            }
            object2 = (XMPNode)object.next();
            if (!this.canBeRDFAttrProp((XMPNode)object2)) {
                throw new XMPException("Can't mix rdf:resource and complex fields", 202);
            }
            this.writeNewline();
            this.writeIndent(n + 1);
            this.write(32);
            this.write(object2.getName());
            this.write("=\"");
            this.appendNodeValue(object2.getValue(), true);
            this.write(34);
        } while (true);
    }

    private void serializeCanonicalRDFSchema(XMPNode object, int n) throws IOException, XMPException {
        object = object.iterateChildren();
        while (object.hasNext()) {
            this.serializeCanonicalRDFProperty((XMPNode)object.next(), this.options.getUseCanonicalFormat(), false, n + 2);
        }
    }

    private void serializeCanonicalRDFSchemas(int n) throws IOException, XMPException {
        if (this.xmp.getRoot().getChildrenLength() > 0) {
            this.startOuterRDFDescription(this.xmp.getRoot(), n);
            Iterator iterator = this.xmp.getRoot().iterateChildren();
            while (iterator.hasNext()) {
                this.serializeCanonicalRDFSchema((XMPNode)iterator.next(), n);
            }
            this.endOuterRDFDescription(n);
            return;
        }
        this.writeIndent(n + 1);
        this.write(RDF_SCHEMA_START);
        this.writeTreeName();
        this.write("/>");
        this.writeNewline();
    }

    private void serializeCompactRDFArrayProp(XMPNode xMPNode, int n) throws IOException, XMPException {
        this.write(62);
        this.writeNewline();
        int n2 = n + 1;
        this.emitRDFArrayTag(xMPNode, true, n2);
        if (xMPNode.getOptions().isArrayAltText()) {
            XMPNodeUtils.normalizeLangArray(xMPNode);
        }
        this.serializeCompactRDFElementProps(xMPNode, n + 2);
        this.emitRDFArrayTag(xMPNode, false, n2);
    }

    private boolean serializeCompactRDFAttrProps(XMPNode object, int n) throws IOException {
        object = object.iterateChildren();
        boolean bl = true;
        while (object.hasNext()) {
            XMPNode xMPNode = (XMPNode)object.next();
            if (this.canBeRDFAttrProp(xMPNode)) {
                this.writeNewline();
                this.writeIndent(n);
                this.write(xMPNode.getName());
                this.write("=\"");
                this.appendNodeValue(xMPNode.getValue(), true);
                this.write(34);
                continue;
            }
            bl = false;
        }
        return bl;
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Lifted jumps to return sites
     */
    private void serializeCompactRDFElementProps(XMPNode var1_1, int var2_2) throws IOException, XMPException {
        var8_3 = var1_1.iterateChildren();
        while (var8_3.hasNext() != false) {
            block9 : {
                var9_9 = (XMPNode)var8_3.next();
                if (this.canBeRDFAttrProp(var9_9)) continue;
                var7_8 = var9_9.getName();
                var1_1 = var7_8;
                if ("[]".equals(var7_8)) {
                    var1_1 = "rdf:li";
                }
                this.writeIndent(var2_2);
                this.write(60);
                this.write((String)var1_1);
                var7_8 = var9_9.iterateQualifier();
                var3_4 = false;
                var4_5 = false;
                do {
                    var6_7 = var7_8.hasNext();
                    var5_6 = true;
                    if (!var6_7) break;
                    var10_10 = (XMPNode)var7_8.next();
                    if (!XMPSerializerRDF.RDF_ATTR_QUALIFIER.contains(var10_10.getName())) {
                        var3_4 = true;
                        continue;
                    }
                    var4_5 = "rdf:resource".equals(var10_10.getName());
                    this.write(32);
                    this.write(var10_10.getName());
                    this.write("=\"");
                    this.appendNodeValue(var10_10.getValue(), true);
                    this.write(34);
                } while (true);
                if (!var3_4) break block9;
                this.serializeCompactRDFGeneralQualifier(var2_2, var9_9);
                ** GOTO lbl41
            }
            if (!var9_9.getOptions().isCompositeProperty()) {
                var7_8 = this.serializeCompactRDFSimpleProp(var9_9);
                var4_5 = (Boolean)var7_8[0];
                var5_6 = (Boolean)var7_8[1];
            } else if (var9_9.getOptions().isArray()) {
                this.serializeCompactRDFArrayProp(var9_9, var2_2);
lbl41: // 2 sources:
                var4_5 = true;
            } else {
                var4_5 = this.serializeCompactRDFStructProp(var9_9, var2_2, var4_5);
            }
            if (!var4_5) continue;
            if (var5_6) {
                this.writeIndent(var2_2);
            }
            this.write("</");
            this.write((String)var1_1);
            this.write(62);
            this.writeNewline();
        }
    }

    private void serializeCompactRDFGeneralQualifier(int n, XMPNode object) throws IOException, XMPException {
        this.write(" rdf:parseType=\"Resource\">");
        this.writeNewline();
        this.serializeCanonicalRDFProperty((XMPNode)object, false, true, ++n);
        object = object.iterateQualifier();
        while (object.hasNext()) {
            this.serializeCanonicalRDFProperty((XMPNode)object.next(), false, false, n);
        }
    }

    private void serializeCompactRDFSchemas(int n) throws IOException, XMPException {
        int n2 = n + 1;
        this.writeIndent(n2);
        this.write(RDF_SCHEMA_START);
        this.writeTreeName();
        Object object = new HashSet<String>();
        object.add("xml");
        object.add("rdf");
        Iterator iterator = this.xmp.getRoot().iterateChildren();
        while (iterator.hasNext()) {
            this.declareUsedNamespaces((XMPNode)iterator.next(), (Set)object, n + 3);
        }
        object = this.xmp.getRoot().iterateChildren();
        boolean bl = true;
        while (object.hasNext()) {
            bl &= this.serializeCompactRDFAttrProps((XMPNode)object.next(), n + 2);
        }
        if (!bl) {
            this.write(62);
            this.writeNewline();
            object = this.xmp.getRoot().iterateChildren();
            while (object.hasNext()) {
                this.serializeCompactRDFElementProps((XMPNode)object.next(), n + 2);
            }
            this.writeIndent(n2);
            this.write("</rdf:Description>");
            this.writeNewline();
            return;
        }
        this.write("/>");
        this.writeNewline();
    }

    private Object[] serializeCompactRDFSimpleProp(XMPNode comparable) throws IOException {
        Boolean bl = Boolean.TRUE;
        Boolean bl2 = Boolean.TRUE;
        if (comparable.getOptions().isURI()) {
            this.write(" rdf:resource=\"");
            this.appendNodeValue(comparable.getValue(), true);
            this.write("\"/>");
            this.writeNewline();
            comparable = Boolean.FALSE;
        } else if (comparable.getValue() != null && comparable.getValue().length() != 0) {
            this.write(62);
            this.appendNodeValue(comparable.getValue(), false);
            bl2 = Boolean.FALSE;
            comparable = bl;
        } else {
            this.write("/>");
            this.writeNewline();
            comparable = Boolean.FALSE;
        }
        return new Object[]{comparable, bl2};
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Lifted jumps to return sites
     */
    private boolean serializeCompactRDFStructProp(XMPNode var1_1, int var2_2, boolean var3_3) throws XMPException, IOException {
        var8_4 = var1_1.iterateChildren();
        var5_5 = false;
        var4_6 = 0;
        do lbl-1000: // 3 sources:
        {
            var6_7 = var5_5;
            var7_8 = var4_6;
            if (!var8_4.hasNext()) break;
            if (this.canBeRDFAttrProp((XMPNode)var8_4.next())) {
                var6_7 = true;
                var7_8 = var4_6;
            } else {
                var7_8 = 1;
                var6_7 = var5_5;
            }
            var5_5 = var6_7;
            var4_6 = var7_8;
            if (!var6_7) ** GOTO lbl-1000
            var5_5 = var6_7;
            var4_6 = var7_8;
        } while (var7_8 == 0);
        if (var3_3 && var7_8 != 0) {
            throw new XMPException("Can't mix rdf:resource qualifier and element fields", 202);
        }
        if (!var1_1.hasChildren()) {
            this.write(" rdf:parseType=\"Resource\"/>");
            this.writeNewline();
            return false;
        }
        if (var7_8 == 0) {
            this.serializeCompactRDFAttrProps(var1_1, var2_2 + 1);
            this.write("/>");
            this.writeNewline();
            return false;
        }
        if (!var6_7) {
            this.write(" rdf:parseType=\"Resource\">");
            this.writeNewline();
            this.serializeCompactRDFElementProps(var1_1, var2_2 + 1);
            return true;
        }
        this.write(62);
        this.writeNewline();
        var4_6 = var2_2 + 1;
        this.writeIndent(var4_6);
        this.write("<rdf:Description");
        this.serializeCompactRDFAttrProps(var1_1, var2_2 + 2);
        this.write(">");
        this.writeNewline();
        this.serializeCompactRDFElementProps(var1_1, var4_6);
        this.writeIndent(var4_6);
        this.write("</rdf:Description>");
        this.writeNewline();
        return true;
    }

    private void startOuterRDFDescription(XMPNode xMPNode, int n) throws IOException {
        this.writeIndent(n + 1);
        this.write(RDF_SCHEMA_START);
        this.writeTreeName();
        HashSet<String> hashSet = new HashSet<String>();
        hashSet.add("xml");
        hashSet.add("rdf");
        this.declareUsedNamespaces(xMPNode, hashSet, n + 3);
        this.write(62);
        this.writeNewline();
    }

    private void write(int n) throws IOException {
        this.writer.write(n);
    }

    private void write(String string2) throws IOException {
        this.writer.write(string2);
    }

    private void writeChars(int n, char c) throws IOException {
        while (n > 0) {
            this.writer.write(c);
            --n;
        }
    }

    private void writeIndent(int n) throws IOException {
        for (n = this.options.getBaseIndent() + n; n > 0; --n) {
            this.writer.write(this.options.getIndent());
        }
    }

    private void writeNewline() throws IOException {
        this.writer.write(this.options.getNewline());
    }

    private void writeTreeName() throws IOException {
        this.write(34);
        String string2 = this.xmp.getRoot().getName();
        if (string2 != null) {
            this.appendNodeValue(string2, true);
        }
        this.write(34);
    }

    protected void checkOptionsConsistence() throws XMPException {
        if (this.options.getEncodeUTF16BE() | this.options.getEncodeUTF16LE()) {
            this.unicodeSize = 2;
        }
        if (this.options.getExactPacketLength()) {
            if (this.options.getOmitPacketWrapper() | this.options.getIncludeThumbnailPad()) {
                throw new XMPException("Inconsistent options for exact size serialize", 103);
            }
            if ((this.options.getPadding() & this.unicodeSize - 1) != 0) {
                throw new XMPException("Exact size must be a multiple of the Unicode element", 103);
            }
        } else {
            if (this.options.getReadOnlyPacket()) {
                if (this.options.getOmitPacketWrapper() | this.options.getIncludeThumbnailPad()) {
                    throw new XMPException("Inconsistent options for read-only packet", 103);
                }
                this.padding = 0;
                return;
            }
            if (this.options.getOmitPacketWrapper()) {
                if (this.options.getIncludeThumbnailPad()) {
                    throw new XMPException("Inconsistent options for non-packet serialize", 103);
                }
                this.padding = 0;
                return;
            }
            if (this.padding == 0) {
                this.padding = this.unicodeSize * 2048;
            }
            if (this.options.getIncludeThumbnailPad() && !this.xmp.doesPropertyExist("http://ns.adobe.com/xap/1.0/", "Thumbnails")) {
                this.padding += this.unicodeSize * 10000;
            }
        }
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    public void serialize(XMPMeta object, OutputStream outputStream, SerializeOptions serializeOptions) throws XMPException {
        try {
            this.outputStream = new CountOutputStream(outputStream);
            this.writer = new OutputStreamWriter((OutputStream)this.outputStream, serializeOptions.getEncoding());
            this.xmp = (XMPMetaImpl)object;
            this.options = serializeOptions;
            this.padding = serializeOptions.getPadding();
            this.writer = new OutputStreamWriter((OutputStream)this.outputStream, serializeOptions.getEncoding());
            this.checkOptionsConsistence();
            object = this.serializeAsRDF();
            this.writer.flush();
            this.addPadding(object.length());
            this.write((String)object);
            this.writer.flush();
            this.outputStream.close();
            return;
        }
        catch (IOException iOException) {
            throw new XMPException("Error writing to the OutputStream", 0);
        }
    }
}

