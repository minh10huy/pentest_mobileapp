/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.xmp.impl;

import com.itextpdf.xmp.XMPConst;
import com.itextpdf.xmp.XMPDateTime;
import com.itextpdf.xmp.XMPException;
import com.itextpdf.xmp.XMPIterator;
import com.itextpdf.xmp.XMPMeta;
import com.itextpdf.xmp.XMPPathFactory;
import com.itextpdf.xmp.XMPUtils;
import com.itextpdf.xmp.impl.ParameterAsserts;
import com.itextpdf.xmp.impl.Utils;
import com.itextpdf.xmp.impl.XMPIteratorImpl;
import com.itextpdf.xmp.impl.XMPNode;
import com.itextpdf.xmp.impl.XMPNodeUtils;
import com.itextpdf.xmp.impl.XMPNormalizer;
import com.itextpdf.xmp.impl.xpath.XMPPath;
import com.itextpdf.xmp.impl.xpath.XMPPathParser;
import com.itextpdf.xmp.options.IteratorOptions;
import com.itextpdf.xmp.options.ParseOptions;
import com.itextpdf.xmp.options.PropertyOptions;
import com.itextpdf.xmp.properties.XMPProperty;
import java.util.Calendar;
import java.util.Iterator;

public class XMPMetaImpl
implements XMPMeta,
XMPConst {
    static final /* synthetic */ boolean $assertionsDisabled = false;
    private static final int VALUE_BASE64 = 7;
    private static final int VALUE_BOOLEAN = 1;
    private static final int VALUE_CALENDAR = 6;
    private static final int VALUE_DATE = 5;
    private static final int VALUE_DOUBLE = 4;
    private static final int VALUE_INTEGER = 2;
    private static final int VALUE_LONG = 3;
    private static final int VALUE_STRING = 0;
    private String packetHeader = null;
    private XMPNode tree;

    public XMPMetaImpl() {
        this.tree = new XMPNode(null, null, null);
    }

    public XMPMetaImpl(XMPNode xMPNode) {
        this.tree = xMPNode;
    }

    private void doSetArrayItem(XMPNode xMPNode, int n, String string2, PropertyOptions propertyOptions, boolean bl) throws XMPException {
        XMPNode xMPNode2 = new XMPNode("[]", null);
        propertyOptions = XMPNodeUtils.verifySetOptions(propertyOptions, string2);
        int n2 = bl ? xMPNode.getChildrenLength() + 1 : xMPNode.getChildrenLength();
        int n3 = n;
        if (n == -1) {
            n3 = n2;
        }
        if (1 <= n3 && n3 <= n2) {
            if (!bl) {
                xMPNode.removeChild(n3);
            }
            xMPNode.addChild(n3, xMPNode2);
            this.setNode(xMPNode2, string2, propertyOptions, false);
            return;
        }
        throw new XMPException("Array index out of bounds", 104);
    }

    private Object evaluateNodeValue(int n, XMPNode xMPNode) throws XMPException {
        String string2;
        String string3 = xMPNode.getValue();
        switch (n) {
            default: {
                string2 = string3;
                if (string3 != null) break;
                string2 = xMPNode.getOptions().isCompositeProperty() ? string3 : "";
            }
            case 7: {
                return XMPUtils.decodeBase64(string3);
            }
            case 6: {
                return XMPUtils.convertToDate(string3).getCalendar();
            }
            case 5: {
                return XMPUtils.convertToDate(string3);
            }
            case 4: {
                return new Double(XMPUtils.convertToDouble(string3));
            }
            case 3: {
                return new Long(XMPUtils.convertToLong(string3));
            }
            case 2: {
                return new Integer(XMPUtils.convertToInteger(string3));
            }
            case 1: {
                return new Boolean(XMPUtils.convertToBoolean(string3));
            }
        }
        return string2;
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    @Override
    public void appendArrayItem(String object, String object2, PropertyOptions propertyOptions, String string2, PropertyOptions propertyOptions2) throws XMPException {
        ParameterAsserts.assertSchemaNS((String)object);
        ParameterAsserts.assertArrayName((String)object2);
        PropertyOptions propertyOptions3 = propertyOptions;
        if (propertyOptions == null) {
            propertyOptions3 = new PropertyOptions();
        }
        if (!propertyOptions3.isOnlyArrayOptions()) {
            throw new XMPException("Only array form flags allowed for arrayOptions", 103);
        }
        propertyOptions = XMPNodeUtils.verifySetOptions(propertyOptions3, null);
        object = XMPPathParser.expandXPath((String)object, (String)object2);
        object2 = XMPNodeUtils.findNode(this.tree, (XMPPath)object, false, null);
        if (object2 != null) {
            object = object2;
            if (!object2.getOptions().isArray()) {
                throw new XMPException("The named property is not an array", 102);
            }
        } else {
            if (!propertyOptions.isArray()) throw new XMPException("Explicit arrayOptions required to create new array", 103);
            object = object2 = XMPNodeUtils.findNode(this.tree, (XMPPath)object, true, propertyOptions);
            if (object2 == null) {
                throw new XMPException("Failure creating array node", 102);
            }
        }
        this.doSetArrayItem((XMPNode)object, -1, string2, propertyOptions2, true);
    }

    @Override
    public void appendArrayItem(String string2, String string3, String string4) throws XMPException {
        this.appendArrayItem(string2, string3, null, string4, null);
    }

    @Override
    public Object clone() {
        return new XMPMetaImpl((XMPNode)this.tree.clone());
    }

    @Override
    public int countArrayItems(String object, String string2) throws XMPException {
        ParameterAsserts.assertSchemaNS((String)object);
        ParameterAsserts.assertArrayName(string2);
        object = XMPPathParser.expandXPath((String)object, string2);
        object = XMPNodeUtils.findNode(this.tree, (XMPPath)object, false, null);
        if (object == null) {
            return 0;
        }
        if (object.getOptions().isArray()) {
            return object.getChildrenLength();
        }
        throw new XMPException("The named property is not an array", 102);
    }

    @Override
    public void deleteArrayItem(String string2, String string3, int n) {
        try {
            ParameterAsserts.assertSchemaNS(string2);
            ParameterAsserts.assertArrayName(string3);
            this.deleteProperty(string2, XMPPathFactory.composeArrayItemPath(string3, n));
            return;
        }
        catch (XMPException xMPException) {
            return;
        }
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    @Override
    public void deleteProperty(String object, String string2) {
        try {
            ParameterAsserts.assertSchemaNS((String)object);
            ParameterAsserts.assertPropName(string2);
            object = XMPPathParser.expandXPath((String)object, string2);
            object = XMPNodeUtils.findNode(this.tree, (XMPPath)object, false, null);
            if (object == null) return;
        }
        catch (XMPException xMPException) {
            return;
        }
        XMPNodeUtils.deleteNode((XMPNode)object);
    }

    @Override
    public void deleteQualifier(String string2, String string3, String string4, String string5) {
        try {
            ParameterAsserts.assertSchemaNS(string2);
            ParameterAsserts.assertPropName(string3);
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append(string3);
            stringBuilder.append(XMPPathFactory.composeQualifierPath(string4, string5));
            this.deleteProperty(string2, stringBuilder.toString());
            return;
        }
        catch (XMPException xMPException) {
            return;
        }
    }

    @Override
    public void deleteStructField(String string2, String string3, String string4, String string5) {
        try {
            ParameterAsserts.assertSchemaNS(string2);
            ParameterAsserts.assertStructName(string3);
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append(string3);
            stringBuilder.append(XMPPathFactory.composeStructFieldPath(string4, string5));
            this.deleteProperty(string2, stringBuilder.toString());
            return;
        }
        catch (XMPException xMPException) {
            return;
        }
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    @Override
    public boolean doesArrayItemExist(String string2, String string3, int n) {
        try {
            ParameterAsserts.assertSchemaNS(string2);
            ParameterAsserts.assertArrayName(string3);
            return this.doesPropertyExist(string2, XMPPathFactory.composeArrayItemPath(string3, n));
        }
        catch (XMPException xMPException) {
            return false;
        }
    }

    @Override
    public boolean doesPropertyExist(String object, String string2) {
        boolean bl = false;
        try {
            ParameterAsserts.assertSchemaNS((String)object);
            ParameterAsserts.assertPropName(string2);
            object = XMPPathParser.expandXPath((String)object, string2);
            object = XMPNodeUtils.findNode(this.tree, (XMPPath)object, false, null);
            if (object != null) {
                bl = true;
            }
            return bl;
        }
        catch (XMPException xMPException) {
            return false;
        }
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    @Override
    public boolean doesQualifierExist(String string2, String string3, String string4, String charSequence) {
        try {
            ParameterAsserts.assertSchemaNS(string2);
            ParameterAsserts.assertPropName(string3);
            string4 = XMPPathFactory.composeQualifierPath(string4, (String)charSequence);
            charSequence = new StringBuilder();
            charSequence.append(string3);
            charSequence.append(string4);
            return this.doesPropertyExist(string2, charSequence.toString());
        }
        catch (XMPException xMPException) {
            return false;
        }
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    @Override
    public boolean doesStructFieldExist(String string2, String string3, String string4, String charSequence) {
        try {
            ParameterAsserts.assertSchemaNS(string2);
            ParameterAsserts.assertStructName(string3);
            string4 = XMPPathFactory.composeStructFieldPath(string4, (String)charSequence);
            charSequence = new StringBuilder();
            charSequence.append(string3);
            charSequence.append(string4);
            return this.doesPropertyExist(string2, charSequence.toString());
        }
        catch (XMPException xMPException) {
            return false;
        }
    }

    @Override
    public String dumpObject() {
        return this.getRoot().dumpNode(true);
    }

    @Override
    public XMPProperty getArrayItem(String string2, String string3, int n) throws XMPException {
        ParameterAsserts.assertSchemaNS(string2);
        ParameterAsserts.assertArrayName(string3);
        return this.getProperty(string2, XMPPathFactory.composeArrayItemPath(string3, n));
    }

    @Override
    public XMPProperty getLocalizedText(String object, String string2, String string3, String string4) throws XMPException {
        ParameterAsserts.assertSchemaNS((String)object);
        ParameterAsserts.assertArrayName(string2);
        ParameterAsserts.assertSpecificLang(string4);
        string3 = string3 != null ? Utils.normalizeLangValue(string3) : null;
        string4 = Utils.normalizeLangValue(string4);
        object = XMPPathParser.expandXPath((String)object, string2);
        object = XMPNodeUtils.findNode(this.tree, (XMPPath)object, false, null);
        if (object == null) {
            return null;
        }
        object = XMPNodeUtils.chooseLocalizedText((XMPNode)object, string3, string4);
        int n = (Integer)object[0];
        object = (XMPNode)object[1];
        if (n != 0) {
            return new XMPProperty((XMPNode)object){
                final /* synthetic */ XMPNode val$itemNode;
                {
                    this.val$itemNode = xMPNode;
                }

                @Override
                public String getLanguage() {
                    return this.val$itemNode.getQualifier(1).getValue();
                }

                @Override
                public PropertyOptions getOptions() {
                    return this.val$itemNode.getOptions();
                }

                @Override
                public String getValue() {
                    return this.val$itemNode.getValue();
                }

                public String toString() {
                    return this.val$itemNode.getValue().toString();
                }
            };
        }
        return null;
    }

    @Override
    public String getObjectName() {
        if (this.tree.getName() != null) {
            return this.tree.getName();
        }
        return "";
    }

    @Override
    public String getPacketHeader() {
        return this.packetHeader;
    }

    @Override
    public XMPProperty getProperty(String string2, String string3) throws XMPException {
        return this.getProperty(string2, string3, 0);
    }

    protected XMPProperty getProperty(String object, String string2, int n) throws XMPException {
        ParameterAsserts.assertSchemaNS((String)object);
        ParameterAsserts.assertPropName(string2);
        object = XMPPathParser.expandXPath((String)object, string2);
        object = XMPNodeUtils.findNode(this.tree, (XMPPath)object, false, null);
        if (object != null) {
            if (n != 0 && object.getOptions().isCompositeProperty()) {
                throw new XMPException("Property must be simple when a value type is requested", 102);
            }
            return new XMPProperty(this.evaluateNodeValue(n, (XMPNode)object), (XMPNode)object){
                final /* synthetic */ XMPNode val$propNode;
                final /* synthetic */ Object val$value;
                {
                    this.val$value = object;
                    this.val$propNode = xMPNode;
                }

                @Override
                public String getLanguage() {
                    return null;
                }

                @Override
                public PropertyOptions getOptions() {
                    return this.val$propNode.getOptions();
                }

                @Override
                public String getValue() {
                    if (this.val$value != null) {
                        return this.val$value.toString();
                    }
                    return null;
                }

                public String toString() {
                    return this.val$value.toString();
                }
            };
        }
        return null;
    }

    @Override
    public byte[] getPropertyBase64(String string2, String string3) throws XMPException {
        return (byte[])this.getPropertyObject(string2, string3, 7);
    }

    @Override
    public Boolean getPropertyBoolean(String string2, String string3) throws XMPException {
        return (Boolean)this.getPropertyObject(string2, string3, 1);
    }

    @Override
    public Calendar getPropertyCalendar(String string2, String string3) throws XMPException {
        return (Calendar)this.getPropertyObject(string2, string3, 6);
    }

    @Override
    public XMPDateTime getPropertyDate(String string2, String string3) throws XMPException {
        return (XMPDateTime)this.getPropertyObject(string2, string3, 5);
    }

    @Override
    public Double getPropertyDouble(String string2, String string3) throws XMPException {
        return (Double)this.getPropertyObject(string2, string3, 4);
    }

    @Override
    public Integer getPropertyInteger(String string2, String string3) throws XMPException {
        return (Integer)this.getPropertyObject(string2, string3, 2);
    }

    @Override
    public Long getPropertyLong(String string2, String string3) throws XMPException {
        return (Long)this.getPropertyObject(string2, string3, 3);
    }

    protected Object getPropertyObject(String object, String string2, int n) throws XMPException {
        ParameterAsserts.assertSchemaNS((String)object);
        ParameterAsserts.assertPropName(string2);
        object = XMPPathParser.expandXPath((String)object, string2);
        object = XMPNodeUtils.findNode(this.tree, (XMPPath)object, false, null);
        if (object != null) {
            if (n != 0 && object.getOptions().isCompositeProperty()) {
                throw new XMPException("Property must be simple when a value type is requested", 102);
            }
            return this.evaluateNodeValue(n, (XMPNode)object);
        }
        return null;
    }

    @Override
    public String getPropertyString(String string2, String string3) throws XMPException {
        return (String)this.getPropertyObject(string2, string3, 0);
    }

    @Override
    public XMPProperty getQualifier(String string2, String string3, String string4, String string5) throws XMPException {
        ParameterAsserts.assertSchemaNS(string2);
        ParameterAsserts.assertPropName(string3);
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append(string3);
        stringBuilder.append(XMPPathFactory.composeQualifierPath(string4, string5));
        return this.getProperty(string2, stringBuilder.toString());
    }

    public XMPNode getRoot() {
        return this.tree;
    }

    @Override
    public XMPProperty getStructField(String string2, String string3, String string4, String string5) throws XMPException {
        ParameterAsserts.assertSchemaNS(string2);
        ParameterAsserts.assertStructName(string3);
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append(string3);
        stringBuilder.append(XMPPathFactory.composeStructFieldPath(string4, string5));
        return this.getProperty(string2, stringBuilder.toString());
    }

    @Override
    public void insertArrayItem(String string2, String string3, int n, String string4) throws XMPException {
        this.insertArrayItem(string2, string3, n, string4, null);
    }

    @Override
    public void insertArrayItem(String object, String string2, int n, String string3, PropertyOptions propertyOptions) throws XMPException {
        ParameterAsserts.assertSchemaNS((String)object);
        ParameterAsserts.assertArrayName(string2);
        object = XMPPathParser.expandXPath((String)object, string2);
        object = XMPNodeUtils.findNode(this.tree, (XMPPath)object, false, null);
        if (object != null) {
            this.doSetArrayItem((XMPNode)object, n, string3, propertyOptions, true);
            return;
        }
        throw new XMPException("Specified array does not exist", 102);
    }

    @Override
    public XMPIterator iterator() throws XMPException {
        return this.iterator(null, null, null);
    }

    @Override
    public XMPIterator iterator(IteratorOptions iteratorOptions) throws XMPException {
        return this.iterator(null, null, iteratorOptions);
    }

    @Override
    public XMPIterator iterator(String string2, String string3, IteratorOptions iteratorOptions) throws XMPException {
        return new XMPIteratorImpl(this, string2, string3, iteratorOptions);
    }

    @Override
    public void normalize(ParseOptions parseOptions) throws XMPException {
        ParseOptions parseOptions2 = parseOptions;
        if (parseOptions == null) {
            parseOptions2 = new ParseOptions();
        }
        XMPNormalizer.process(this, parseOptions2);
    }

    @Override
    public void setArrayItem(String string2, String string3, int n, String string4) throws XMPException {
        this.setArrayItem(string2, string3, n, string4, null);
    }

    @Override
    public void setArrayItem(String object, String string2, int n, String string3, PropertyOptions propertyOptions) throws XMPException {
        ParameterAsserts.assertSchemaNS((String)object);
        ParameterAsserts.assertArrayName(string2);
        object = XMPPathParser.expandXPath((String)object, string2);
        object = XMPNodeUtils.findNode(this.tree, (XMPPath)object, false, null);
        if (object != null) {
            this.doSetArrayItem((XMPNode)object, n, string3, propertyOptions, false);
            return;
        }
        throw new XMPException("Specified array does not exist", 102);
    }

    @Override
    public void setLocalizedText(String string2, String string3, String string4, String string5, String string6) throws XMPException {
        this.setLocalizedText(string2, string3, string4, string5, string6, null);
    }

    @Override
    public void setLocalizedText(String object, String object2, String object3, String object4, String string2, PropertyOptions object5) throws XMPException {
        int n;
        block26 : {
            int n2;
            block25 : {
                ParameterAsserts.assertSchemaNS((String)object);
                ParameterAsserts.assertArrayName((String)object2);
                ParameterAsserts.assertSpecificLang((String)object4);
                object3 = object3 != null ? Utils.normalizeLangValue((String)object3) : null;
                object5 = Utils.normalizeLangValue((String)object4);
                object = XMPPathParser.expandXPath((String)object, (String)object2);
                object4 = XMPNodeUtils.findNode(this.tree, (XMPPath)object, true, new PropertyOptions(7680));
                if (object4 == null) {
                    throw new XMPException("Failed to find or create array node", 102);
                }
                if (!object4.getOptions().isArrayAltText()) {
                    if (!object4.hasChildren() && object4.getOptions().isArrayAlternate()) {
                        object4.getOptions().setArrayAltText(true);
                    } else {
                        throw new XMPException("Specified property is no alt-text array", 102);
                    }
                }
                object2 = object4.iterateChildren();
                while (object2.hasNext()) {
                    object = (XMPNode)object2.next();
                    if (object.hasQualifier() && "xml:lang".equals(object.getQualifier(1).getName())) {
                        if (!"x-default".equals(object.getQualifier(1).getValue())) continue;
                        n2 = 1;
                        break block25;
                    }
                    throw new XMPException("Language qualifier must be first", 102);
                }
                object = null;
                n2 = 0;
            }
            if (object != null && object4.getChildrenLength() > 1) {
                object4.removeChild((XMPNode)object);
                object4.addChild(1, (XMPNode)object);
            }
            object2 = XMPNodeUtils.chooseLocalizedText((XMPNode)object4, (String)object3, (String)object5);
            n = (Integer)object2[0];
            object2 = (XMPNode)object2[1];
            boolean bl = "x-default".equals(object5);
            switch (n) {
                default: {
                    throw new XMPException("Unexpected result from ChooseLocalizedText", 9);
                }
                case 5: {
                    XMPNodeUtils.appendLangItem((XMPNode)object4, (String)object5, string2);
                    n = n2;
                    if (bl) {
                        break;
                    }
                    break block26;
                }
                case 4: {
                    if (object != null && object4.getChildrenLength() == 1) {
                        object.setValue(string2);
                    }
                    XMPNodeUtils.appendLangItem((XMPNode)object4, (String)object5, string2);
                    n = n2;
                    break block26;
                }
                case 3: {
                    XMPNodeUtils.appendLangItem((XMPNode)object4, (String)object5, string2);
                    n = n2;
                    if (bl) {
                        break;
                    }
                    break block26;
                }
                case 2: {
                    if (n2 != 0 && object != object2 && object != null && object.getValue().equals(object2.getValue())) {
                        object.setValue(string2);
                    }
                    object2.setValue(string2);
                    n = n2;
                    break block26;
                }
                case 1: {
                    if (!bl) {
                        if (n2 != 0 && object != object2 && object != null && object.getValue().equals(object2.getValue())) {
                            object.setValue(string2);
                        }
                        object2.setValue(string2);
                        n = n2;
                    } else {
                        object3 = object4.iterateChildren();
                        while (object3.hasNext()) {
                            object5 = (XMPNode)object3.next();
                            if (object5 == object) continue;
                            String string3 = object5.getValue();
                            object2 = object != null ? object.getValue() : null;
                            if (!string3.equals(object2)) continue;
                            object5.setValue(string2);
                        }
                        n = n2;
                        if (object != null) {
                            object.setValue(string2);
                            n = n2;
                        }
                    }
                    break block26;
                }
                case 0: {
                    XMPNodeUtils.appendLangItem((XMPNode)object4, "x-default", string2);
                    if (bl) break;
                    XMPNodeUtils.appendLangItem((XMPNode)object4, (String)object5, string2);
                }
            }
            n = 1;
        }
        if (n == 0 && object4.getChildrenLength() == 1) {
            XMPNodeUtils.appendLangItem((XMPNode)object4, "x-default", string2);
        }
    }

    void setNode(XMPNode xMPNode, Object object, PropertyOptions propertyOptions, boolean bl) throws XMPException {
        if (bl) {
            xMPNode.clear();
        }
        xMPNode.getOptions().mergeWith(propertyOptions);
        if (!xMPNode.getOptions().isCompositeProperty()) {
            XMPNodeUtils.setNodeValue(xMPNode, object);
            return;
        }
        if (object != null && object.toString().length() > 0) {
            throw new XMPException("Composite nodes can't have values", 102);
        }
        xMPNode.removeChildren();
    }

    @Override
    public void setObjectName(String string2) {
        this.tree.setName(string2);
    }

    public void setPacketHeader(String string2) {
        this.packetHeader = string2;
    }

    @Override
    public void setProperty(String string2, String string3, Object object) throws XMPException {
        this.setProperty(string2, string3, object, null);
    }

    @Override
    public void setProperty(String object, String string2, Object object2, PropertyOptions propertyOptions) throws XMPException {
        ParameterAsserts.assertSchemaNS((String)object);
        ParameterAsserts.assertPropName(string2);
        propertyOptions = XMPNodeUtils.verifySetOptions(propertyOptions, object2);
        object = XMPPathParser.expandXPath((String)object, string2);
        object = XMPNodeUtils.findNode(this.tree, (XMPPath)object, true, propertyOptions);
        if (object != null) {
            this.setNode((XMPNode)object, object2, propertyOptions, false);
            return;
        }
        throw new XMPException("Specified property does not exist", 102);
    }

    @Override
    public void setPropertyBase64(String string2, String string3, byte[] arrby) throws XMPException {
        this.setProperty(string2, string3, arrby, null);
    }

    @Override
    public void setPropertyBase64(String string2, String string3, byte[] arrby, PropertyOptions propertyOptions) throws XMPException {
        this.setProperty(string2, string3, arrby, propertyOptions);
    }

    @Override
    public void setPropertyBoolean(String string2, String string3, boolean bl) throws XMPException {
        String string4 = bl ? "True" : "False";
        this.setProperty(string2, string3, string4, null);
    }

    @Override
    public void setPropertyBoolean(String string2, String string3, boolean bl, PropertyOptions propertyOptions) throws XMPException {
        String string4 = bl ? "True" : "False";
        this.setProperty(string2, string3, string4, propertyOptions);
    }

    @Override
    public void setPropertyCalendar(String string2, String string3, Calendar calendar) throws XMPException {
        this.setProperty(string2, string3, calendar, null);
    }

    @Override
    public void setPropertyCalendar(String string2, String string3, Calendar calendar, PropertyOptions propertyOptions) throws XMPException {
        this.setProperty(string2, string3, calendar, propertyOptions);
    }

    @Override
    public void setPropertyDate(String string2, String string3, XMPDateTime xMPDateTime) throws XMPException {
        this.setProperty(string2, string3, xMPDateTime, null);
    }

    @Override
    public void setPropertyDate(String string2, String string3, XMPDateTime xMPDateTime, PropertyOptions propertyOptions) throws XMPException {
        this.setProperty(string2, string3, xMPDateTime, propertyOptions);
    }

    @Override
    public void setPropertyDouble(String string2, String string3, double d) throws XMPException {
        this.setProperty(string2, string3, new Double(d), null);
    }

    @Override
    public void setPropertyDouble(String string2, String string3, double d, PropertyOptions propertyOptions) throws XMPException {
        this.setProperty(string2, string3, new Double(d), propertyOptions);
    }

    @Override
    public void setPropertyInteger(String string2, String string3, int n) throws XMPException {
        this.setProperty(string2, string3, new Integer(n), null);
    }

    @Override
    public void setPropertyInteger(String string2, String string3, int n, PropertyOptions propertyOptions) throws XMPException {
        this.setProperty(string2, string3, new Integer(n), propertyOptions);
    }

    @Override
    public void setPropertyLong(String string2, String string3, long l) throws XMPException {
        this.setProperty(string2, string3, new Long(l), null);
    }

    @Override
    public void setPropertyLong(String string2, String string3, long l, PropertyOptions propertyOptions) throws XMPException {
        this.setProperty(string2, string3, new Long(l), propertyOptions);
    }

    @Override
    public void setQualifier(String string2, String string3, String string4, String string5, String string6) throws XMPException {
        this.setQualifier(string2, string3, string4, string5, string6, null);
    }

    @Override
    public void setQualifier(String string2, String string3, String string4, String string5, String string6, PropertyOptions propertyOptions) throws XMPException {
        ParameterAsserts.assertSchemaNS(string2);
        ParameterAsserts.assertPropName(string3);
        if (!this.doesPropertyExist(string2, string3)) {
            throw new XMPException("Specified property does not exist!", 102);
        }
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append(string3);
        stringBuilder.append(XMPPathFactory.composeQualifierPath(string4, string5));
        this.setProperty(string2, stringBuilder.toString(), string6, propertyOptions);
    }

    @Override
    public void setStructField(String string2, String string3, String string4, String string5, String string6) throws XMPException {
        this.setStructField(string2, string3, string4, string5, string6, null);
    }

    @Override
    public void setStructField(String string2, String string3, String string4, String string5, String string6, PropertyOptions propertyOptions) throws XMPException {
        ParameterAsserts.assertSchemaNS(string2);
        ParameterAsserts.assertStructName(string3);
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append(string3);
        stringBuilder.append(XMPPathFactory.composeStructFieldPath(string4, string5));
        this.setProperty(string2, stringBuilder.toString(), string6, propertyOptions);
    }

    @Override
    public void sort() {
        this.tree.sort();
    }

}

