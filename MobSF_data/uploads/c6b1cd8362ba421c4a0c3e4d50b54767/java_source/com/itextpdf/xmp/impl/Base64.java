/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.xmp.impl;

public class Base64 {
    private static final byte EQUAL = -3;
    private static final byte INVALID = -1;
    private static final byte WHITESPACE = -2;
    private static byte[] ascii;
    private static byte[] base64;

    static {
        base64 = new byte[]{65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 43, 47};
        ascii = new byte[255];
        int n = 0;
        int n2 = 0;
        do {
            if (n2 >= 255) break;
            Base64.ascii[n2] = -1;
            ++n2;
        } while (true);
        for (int i = n; i < base64.length; ++i) {
            Base64.ascii[Base64.base64[i]] = (byte)i;
        }
        Base64.ascii[9] = -2;
        Base64.ascii[10] = -2;
        Base64.ascii[13] = -2;
        Base64.ascii[32] = -2;
        Base64.ascii[61] = -3;
    }

    public static final String decode(String string2) {
        return new String(Base64.decode(string2.getBytes()));
    }

    public static final byte[] decode(byte[] arrby) throws IllegalArgumentException {
        int n;
        int n2 = 0;
        int n3 = 0;
        int n4 = 0;
        do {
            if (n3 >= arrby.length) break;
            byte by = ascii[arrby[n3]];
            if (by >= 0) {
                arrby[n4] = by;
            } else if (by == -1) {
                throw new IllegalArgumentException("Invalid base 64 string");
            }
            ++n3;
        } while (true);
        for (n = n4++; n > 0 && arrby[n - 1] == -3; --n) {
        }
        byte[] arrby2 = new byte[n * 3 / 4];
        n4 = 0;
        for (n3 = n2; n3 < arrby2.length - 2; n3 += 3) {
            n = arrby[n4];
            n2 = n4 + 1;
            arrby2[n3] = (byte)(n << 2 & 255 | arrby[n2] >>> 4 & 3);
            n = arrby[n2];
            n2 = n4 + 2;
            arrby2[n3 + 1] = (byte)(n << 4 & 255 | arrby[n2] >>> 2 & 15);
            arrby2[n3 + 2] = (byte)(arrby[n2] << 6 & 255 | arrby[n4 + 3] & 63);
            n4 += 4;
        }
        if (n3 < arrby2.length) {
            arrby2[n3] = (byte)(arrby[n4] << 2 & 255 | arrby[n4 + 1] >>> 4 & 3);
        }
        if (++n3 < arrby2.length) {
            n = arrby[n4 + 1];
            arrby2[n3] = (byte)(arrby[n4 + 2] >>> 2 & 15 | n << 4 & 255);
        }
        return arrby2;
    }

    public static final String encode(String string2) {
        return new String(Base64.encode(string2.getBytes()));
    }

    public static final byte[] encode(byte[] arrby) {
        return Base64.encode(arrby, 0);
    }

    public static final byte[] encode(byte[] arrby, int n) {
        int n2 = n = n / 4 * 4;
        if (n < 0) {
            n2 = 0;
        }
        int n3 = n = (arrby.length + 2) / 3 * 4;
        if (n2 > 0) {
            n3 = n + (n - 1) / n2;
        }
        byte[] arrby2 = new byte[n3];
        int n4 = 0;
        n = 0;
        int n5 = 0;
        while (n4 + 3 <= arrby.length) {
            int n6 = n4 + 1;
            n4 = arrby[n4];
            int n7 = n6 + 1;
            n6 = (n4 & 255) << 16 | (arrby[n6] & 255) << 8 | (arrby[n7] & 255) << 0;
            n4 = n + 1;
            arrby2[n] = base64[(n6 & 16515072) >> 18];
            n = n4 + 1;
            arrby2[n4] = base64[(n6 & 258048) >> 12];
            int n8 = n + 1;
            arrby2[n] = base64[(n6 & 4032) >> 6];
            n4 = n8 + 1;
            arrby2[n8] = base64[n6 & 63];
            n5 += 4;
            n = n4;
            if (n4 < n3) {
                n = n4;
                if (n2 > 0) {
                    n = n4;
                    if (n5 % n2 == 0) {
                        arrby2[n4] = 10;
                        n = n4 + 1;
                    }
                }
            }
            n4 = n7 + 1;
        }
        if (arrby.length - n4 == 2) {
            n2 = arrby[n4];
            n2 = (arrby[n4 + 1] & 255) << 8 | (n2 & 255) << 16;
            n3 = n + 1;
            arrby2[n] = base64[(n2 & 16515072) >> 18];
            n = n3 + 1;
            arrby2[n3] = base64[(n2 & 258048) >> 12];
            arrby2[n] = base64[(n2 & 4032) >> 6];
            arrby2[n + 1] = 61;
            return arrby2;
        }
        if (arrby.length - n4 == 1) {
            n2 = (arrby[n4] & 255) << 16;
            n3 = n + 1;
            arrby2[n] = base64[(n2 & 16515072) >> 18];
            n = n3 + 1;
            arrby2[n3] = base64[(n2 & 258048) >> 12];
            arrby2[n] = 61;
            arrby2[n + 1] = 61;
        }
        return arrby2;
    }
}

