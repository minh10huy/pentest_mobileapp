/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.xmp.impl;

import com.itextpdf.xmp.XMPConst;
import com.itextpdf.xmp.XMPException;
import com.itextpdf.xmp.XMPSchemaRegistry;
import com.itextpdf.xmp.impl.ParameterAsserts;
import com.itextpdf.xmp.impl.Utils;
import com.itextpdf.xmp.impl.XMPNodeUtils;
import com.itextpdf.xmp.options.AliasOptions;
import com.itextpdf.xmp.options.PropertyOptions;
import com.itextpdf.xmp.properties.XMPAliasInfo;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import java.util.TreeMap;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public final class XMPSchemaRegistryImpl
implements XMPSchemaRegistry,
XMPConst {
    private Map aliasMap = new HashMap();
    private Map namespaceToPrefixMap = new HashMap();
    private Pattern p = Pattern.compile("[/*?\\[\\]]");
    private Map prefixToNamespaceMap = new HashMap();

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    public XMPSchemaRegistryImpl() {
        try {
            this.registerStandardNamespaces();
            this.registerStandardAliases();
            return;
        }
        catch (XMPException xMPException) {
            throw new RuntimeException("The XMPSchemaRegistry cannot be initialized!");
        }
    }

    private void registerStandardAliases() throws XMPException {
        AliasOptions aliasOptions = new AliasOptions().setArrayOrdered(true);
        AliasOptions aliasOptions2 = new AliasOptions().setArrayAltText(true);
        this.registerAlias("http://ns.adobe.com/xap/1.0/", "Author", "http://purl.org/dc/elements/1.1/", "creator", aliasOptions);
        this.registerAlias("http://ns.adobe.com/xap/1.0/", "Authors", "http://purl.org/dc/elements/1.1/", "creator", null);
        this.registerAlias("http://ns.adobe.com/xap/1.0/", "Description", "http://purl.org/dc/elements/1.1/", "description", null);
        this.registerAlias("http://ns.adobe.com/xap/1.0/", "Format", "http://purl.org/dc/elements/1.1/", "format", null);
        this.registerAlias("http://ns.adobe.com/xap/1.0/", "Keywords", "http://purl.org/dc/elements/1.1/", "subject", null);
        this.registerAlias("http://ns.adobe.com/xap/1.0/", "Locale", "http://purl.org/dc/elements/1.1/", "language", null);
        this.registerAlias("http://ns.adobe.com/xap/1.0/", "Title", "http://purl.org/dc/elements/1.1/", "title", null);
        this.registerAlias("http://ns.adobe.com/xap/1.0/rights/", "Copyright", "http://purl.org/dc/elements/1.1/", "rights", null);
        this.registerAlias("http://ns.adobe.com/pdf/1.3/", "Author", "http://purl.org/dc/elements/1.1/", "creator", aliasOptions);
        this.registerAlias("http://ns.adobe.com/pdf/1.3/", "BaseURL", "http://ns.adobe.com/xap/1.0/", "BaseURL", null);
        this.registerAlias("http://ns.adobe.com/pdf/1.3/", "CreationDate", "http://ns.adobe.com/xap/1.0/", "CreateDate", null);
        this.registerAlias("http://ns.adobe.com/pdf/1.3/", "Creator", "http://ns.adobe.com/xap/1.0/", "CreatorTool", null);
        this.registerAlias("http://ns.adobe.com/pdf/1.3/", "ModDate", "http://ns.adobe.com/xap/1.0/", "ModifyDate", null);
        this.registerAlias("http://ns.adobe.com/pdf/1.3/", "Subject", "http://purl.org/dc/elements/1.1/", "description", aliasOptions2);
        this.registerAlias("http://ns.adobe.com/pdf/1.3/", "Title", "http://purl.org/dc/elements/1.1/", "title", aliasOptions2);
        this.registerAlias("http://ns.adobe.com/photoshop/1.0/", "Author", "http://purl.org/dc/elements/1.1/", "creator", aliasOptions);
        this.registerAlias("http://ns.adobe.com/photoshop/1.0/", "Caption", "http://purl.org/dc/elements/1.1/", "description", aliasOptions2);
        this.registerAlias("http://ns.adobe.com/photoshop/1.0/", "Copyright", "http://purl.org/dc/elements/1.1/", "rights", aliasOptions2);
        this.registerAlias("http://ns.adobe.com/photoshop/1.0/", "Keywords", "http://purl.org/dc/elements/1.1/", "subject", null);
        this.registerAlias("http://ns.adobe.com/photoshop/1.0/", "Marked", "http://ns.adobe.com/xap/1.0/rights/", "Marked", null);
        this.registerAlias("http://ns.adobe.com/photoshop/1.0/", "Title", "http://purl.org/dc/elements/1.1/", "title", aliasOptions2);
        this.registerAlias("http://ns.adobe.com/photoshop/1.0/", "WebStatement", "http://ns.adobe.com/xap/1.0/rights/", "WebStatement", null);
        this.registerAlias("http://ns.adobe.com/tiff/1.0/", "Artist", "http://purl.org/dc/elements/1.1/", "creator", aliasOptions);
        this.registerAlias("http://ns.adobe.com/tiff/1.0/", "Copyright", "http://purl.org/dc/elements/1.1/", "rights", null);
        this.registerAlias("http://ns.adobe.com/tiff/1.0/", "DateTime", "http://ns.adobe.com/xap/1.0/", "ModifyDate", null);
        this.registerAlias("http://ns.adobe.com/tiff/1.0/", "ImageDescription", "http://purl.org/dc/elements/1.1/", "description", null);
        this.registerAlias("http://ns.adobe.com/tiff/1.0/", "Software", "http://ns.adobe.com/xap/1.0/", "CreatorTool", null);
        this.registerAlias("http://ns.adobe.com/png/1.0/", "Author", "http://purl.org/dc/elements/1.1/", "creator", aliasOptions);
        this.registerAlias("http://ns.adobe.com/png/1.0/", "Copyright", "http://purl.org/dc/elements/1.1/", "rights", aliasOptions2);
        this.registerAlias("http://ns.adobe.com/png/1.0/", "CreationTime", "http://ns.adobe.com/xap/1.0/", "CreateDate", null);
        this.registerAlias("http://ns.adobe.com/png/1.0/", "Description", "http://purl.org/dc/elements/1.1/", "description", aliasOptions2);
        this.registerAlias("http://ns.adobe.com/png/1.0/", "ModificationTime", "http://ns.adobe.com/xap/1.0/", "ModifyDate", null);
        this.registerAlias("http://ns.adobe.com/png/1.0/", "Software", "http://ns.adobe.com/xap/1.0/", "CreatorTool", null);
        this.registerAlias("http://ns.adobe.com/png/1.0/", "Title", "http://purl.org/dc/elements/1.1/", "title", aliasOptions2);
    }

    private void registerStandardNamespaces() throws XMPException {
        this.registerNamespace("http://www.w3.org/XML/1998/namespace", "xml");
        this.registerNamespace("http://www.w3.org/1999/02/22-rdf-syntax-ns#", "rdf");
        this.registerNamespace("http://purl.org/dc/elements/1.1/", "dc");
        this.registerNamespace("http://iptc.org/std/Iptc4xmpCore/1.0/xmlns/", "Iptc4xmpCore");
        this.registerNamespace("http://iptc.org/std/Iptc4xmpExt/2008-02-29/", "Iptc4xmpExt");
        this.registerNamespace("http://ns.adobe.com/DICOM/", "DICOM");
        this.registerNamespace("http://ns.useplus.org/ldf/xmp/1.0/", "plus");
        this.registerNamespace("adobe:ns:meta/", "x");
        this.registerNamespace("http://ns.adobe.com/iX/1.0/", "iX");
        this.registerNamespace("http://ns.adobe.com/xap/1.0/", "xmp");
        this.registerNamespace("http://ns.adobe.com/xap/1.0/rights/", "xmpRights");
        this.registerNamespace("http://ns.adobe.com/xap/1.0/mm/", "xmpMM");
        this.registerNamespace("http://ns.adobe.com/xap/1.0/bj/", "xmpBJ");
        this.registerNamespace("http://ns.adobe.com/xmp/note/", "xmpNote");
        this.registerNamespace("http://ns.adobe.com/pdf/1.3/", "pdf");
        this.registerNamespace("http://ns.adobe.com/pdfx/1.3/", "pdfx");
        this.registerNamespace("http://www.npes.org/pdfx/ns/id/", "pdfxid");
        this.registerNamespace("http://www.aiim.org/pdfa/ns/schema#", "pdfaSchema");
        this.registerNamespace("http://www.aiim.org/pdfa/ns/property#", "pdfaProperty");
        this.registerNamespace("http://www.aiim.org/pdfa/ns/type#", "pdfaType");
        this.registerNamespace("http://www.aiim.org/pdfa/ns/field#", "pdfaField");
        this.registerNamespace("http://www.aiim.org/pdfa/ns/id/", "pdfaid");
        this.registerNamespace("http://www.aiim.org/pdfua/ns/id/", "pdfuaid");
        this.registerNamespace("http://www.aiim.org/pdfa/ns/extension/", "pdfaExtension");
        this.registerNamespace("http://ns.adobe.com/photoshop/1.0/", "photoshop");
        this.registerNamespace("http://ns.adobe.com/album/1.0/", "album");
        this.registerNamespace("http://ns.adobe.com/exif/1.0/", "exif");
        this.registerNamespace("http://cipa.jp/exif/1.0/", "exifEX");
        this.registerNamespace("http://ns.adobe.com/exif/1.0/aux/", "aux");
        this.registerNamespace("http://ns.adobe.com/tiff/1.0/", "tiff");
        this.registerNamespace("http://ns.adobe.com/png/1.0/", "png");
        this.registerNamespace("http://ns.adobe.com/jpeg/1.0/", "jpeg");
        this.registerNamespace("http://ns.adobe.com/jp2k/1.0/", "jp2k");
        this.registerNamespace("http://ns.adobe.com/camera-raw-settings/1.0/", "crs");
        this.registerNamespace("http://ns.adobe.com/StockPhoto/1.0/", "bmsp");
        this.registerNamespace("http://ns.adobe.com/creatorAtom/1.0/", "creatorAtom");
        this.registerNamespace("http://ns.adobe.com/asf/1.0/", "asf");
        this.registerNamespace("http://ns.adobe.com/xmp/wav/1.0/", "wav");
        this.registerNamespace("http://ns.adobe.com/bwf/bext/1.0/", "bext");
        this.registerNamespace("http://ns.adobe.com/riff/info/", "riffinfo");
        this.registerNamespace("http://ns.adobe.com/xmp/1.0/Script/", "xmpScript");
        this.registerNamespace("http://ns.adobe.com/TransformXMP/", "txmp");
        this.registerNamespace("http://ns.adobe.com/swf/1.0/", "swf");
        this.registerNamespace("http://ns.adobe.com/xmp/1.0/DynamicMedia/", "xmpDM");
        this.registerNamespace("http://ns.adobe.com/xmp/transient/1.0/", "xmpx");
        this.registerNamespace("http://ns.adobe.com/xap/1.0/t/", "xmpT");
        this.registerNamespace("http://ns.adobe.com/xap/1.0/t/pg/", "xmpTPg");
        this.registerNamespace("http://ns.adobe.com/xap/1.0/g/", "xmpG");
        this.registerNamespace("http://ns.adobe.com/xap/1.0/g/img/", "xmpGImg");
        this.registerNamespace("http://ns.adobe.com/xap/1.0/sType/Font#", "stFnt");
        this.registerNamespace("http://ns.adobe.com/xap/1.0/sType/Dimensions#", "stDim");
        this.registerNamespace("http://ns.adobe.com/xap/1.0/sType/ResourceEvent#", "stEvt");
        this.registerNamespace("http://ns.adobe.com/xap/1.0/sType/ResourceRef#", "stRef");
        this.registerNamespace("http://ns.adobe.com/xap/1.0/sType/Version#", "stVer");
        this.registerNamespace("http://ns.adobe.com/xap/1.0/sType/Job#", "stJob");
        this.registerNamespace("http://ns.adobe.com/xap/1.0/sType/ManifestItem#", "stMfs");
        this.registerNamespace("http://ns.adobe.com/xmp/Identifier/qual/1.0/", "xmpidq");
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @Override
    public void deleteNamespace(String string2) {
        synchronized (this) {
            String string3 = this.getNamespacePrefix(string2);
            if (string3 != null) {
                this.namespaceToPrefixMap.remove(string2);
                this.prefixToNamespaceMap.remove(string3);
            }
            return;
        }
    }

    @Override
    public XMPAliasInfo findAlias(String object) {
        synchronized (this) {
            object = (XMPAliasInfo)this.aliasMap.get(object);
            return object;
        }
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    @Override
    public XMPAliasInfo[] findAliases(String arrxMPAliasInfo) {
        synchronized (this) {
            arrxMPAliasInfo = this.getNamespacePrefix((String)arrxMPAliasInfo);
            ArrayList<XMPAliasInfo> arrayList = new ArrayList<XMPAliasInfo>();
            if (arrxMPAliasInfo == null) return arrayList.toArray(new XMPAliasInfo[arrayList.size()]);
            Iterator iterator = this.aliasMap.keySet().iterator();
            while (iterator.hasNext()) {
                String string2 = (String)iterator.next();
                if (!string2.startsWith((String)arrxMPAliasInfo)) continue;
                arrayList.add(this.findAlias(string2));
            }
            return arrayList.toArray(new XMPAliasInfo[arrayList.size()]);
        }
    }

    @Override
    public Map getAliases() {
        synchronized (this) {
            Map map = Collections.unmodifiableMap(new TreeMap(this.aliasMap));
            return map;
        }
    }

    @Override
    public String getNamespacePrefix(String string2) {
        synchronized (this) {
            string2 = (String)this.namespaceToPrefixMap.get(string2);
            return string2;
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @Override
    public String getNamespaceURI(String string2) {
        synchronized (this) {
            CharSequence charSequence = string2;
            if (string2 == null) return (String)this.prefixToNamespaceMap.get(charSequence);
            charSequence = string2;
            try {
                if (string2.endsWith(":")) return (String)this.prefixToNamespaceMap.get(charSequence);
                charSequence = new StringBuilder();
                charSequence.append(string2);
                charSequence.append(":");
                charSequence = charSequence.toString();
                return (String)this.prefixToNamespaceMap.get(charSequence);
            }
            catch (Throwable throwable) {}
            throw throwable;
        }
    }

    @Override
    public Map getNamespaces() {
        synchronized (this) {
            Map map = Collections.unmodifiableMap(new TreeMap(this.namespaceToPrefixMap));
            return map;
        }
    }

    @Override
    public Map getPrefixes() {
        synchronized (this) {
            Map map = Collections.unmodifiableMap(new TreeMap(this.prefixToNamespaceMap));
            return map;
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    void registerAlias(String object, String string2, String string3, String string4, AliasOptions aliasOptions) throws XMPException {
        synchronized (this) {
            String string5;
            AliasOptions aliasOptions2;
            void var3_3;
            void var4_4;
            ParameterAsserts.assertSchemaNS((String)object);
            ParameterAsserts.assertPropName(string5);
            ParameterAsserts.assertSchemaNS((String)var3_3);
            ParameterAsserts.assertPropName((String)var4_4);
            aliasOptions2 = aliasOptions2 != null ? new AliasOptions(XMPNodeUtils.verifySetOptions(aliasOptions2.toPropertyOptions(), null).getOptions()) : new AliasOptions();
            if (this.p.matcher(string5).find()) throw new XMPException("Alias and actual property names must be simple", 102);
            if (this.p.matcher((CharSequence)var4_4).find()) {
                throw new XMPException("Alias and actual property names must be simple", 102);
            }
            Object object2 = this.getNamespacePrefix((String)object);
            object = this.getNamespacePrefix((String)var3_3);
            if (object2 == null) {
                throw new XMPException("Alias namespace is not registered", 101);
            }
            if (object == null) {
                throw new XMPException("Actual namespace is not registered", 101);
            }
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append((String)object2);
            stringBuilder.append(string5);
            string5 = stringBuilder.toString();
            if (this.aliasMap.containsKey(string5)) {
                throw new XMPException("Alias is already existing", 4);
            }
            object2 = this.aliasMap;
            stringBuilder = new StringBuilder();
            stringBuilder.append((String)object);
            stringBuilder.append((String)var4_4);
            if (object2.containsKey(stringBuilder.toString())) {
                throw new XMPException("Actual property is already an alias, use the base property", 4);
            }
            object = new XMPAliasInfo((String)var3_3, (String)object, (String)var4_4, aliasOptions2){
                final /* synthetic */ String val$actualNS;
                final /* synthetic */ String val$actualPrefix;
                final /* synthetic */ String val$actualProp;
                final /* synthetic */ AliasOptions val$aliasOpts;
                {
                    this.val$actualNS = string2;
                    this.val$actualPrefix = string3;
                    this.val$actualProp = string4;
                    this.val$aliasOpts = aliasOptions;
                }

                @Override
                public AliasOptions getAliasForm() {
                    return this.val$aliasOpts;
                }

                @Override
                public String getNamespace() {
                    return this.val$actualNS;
                }

                @Override
                public String getPrefix() {
                    return this.val$actualPrefix;
                }

                @Override
                public String getPropName() {
                    return this.val$actualProp;
                }

                public String toString() {
                    StringBuilder stringBuilder = new StringBuilder();
                    stringBuilder.append(this.val$actualPrefix);
                    stringBuilder.append(this.val$actualProp);
                    stringBuilder.append(" NS(");
                    stringBuilder.append(this.val$actualNS);
                    stringBuilder.append("), FORM (");
                    stringBuilder.append(this.getAliasForm());
                    stringBuilder.append(")");
                    return stringBuilder.toString();
                }
            };
            this.aliasMap.put(string5, object);
            return;
        }
    }

    @Override
    public String registerNamespace(String string2, String charSequence) throws XMPException {
        synchronized (this) {
            CharSequence charSequence2;
            String string3;
            block10 : {
                ParameterAsserts.assertSchemaNS(string2);
                ParameterAsserts.assertPrefix((String)charSequence);
                charSequence2 = charSequence;
                if (charSequence.charAt(charSequence.length() - 1) != ':') {
                    charSequence2 = new StringBuilder();
                    charSequence2.append((String)charSequence);
                    charSequence2.append(':');
                    charSequence2 = charSequence2.toString();
                }
                if (!Utils.isXMLNameNS(charSequence2.substring(0, charSequence2.length() - 1))) {
                    throw new XMPException("The prefix is a bad XML name", 201);
                }
                charSequence = (String)this.namespaceToPrefixMap.get(string2);
                string3 = (String)this.prefixToNamespaceMap.get(charSequence2);
                if (charSequence == null) break block10;
                return charSequence;
            }
            charSequence = charSequence2;
            if (string3 != null) {
                charSequence = charSequence2;
                int n = 1;
                do {
                    if (!this.prefixToNamespaceMap.containsKey(charSequence)) break;
                    charSequence = new StringBuilder();
                    charSequence.append(charSequence2.substring(0, charSequence2.length() - 1));
                    charSequence.append("_");
                    charSequence.append(n);
                    charSequence.append("_:");
                    charSequence = charSequence.toString();
                    ++n;
                } while (true);
            }
            this.prefixToNamespaceMap.put(charSequence, string2);
            this.namespaceToPrefixMap.put(string2, charSequence);
            return charSequence;
        }
    }

    @Override
    public XMPAliasInfo resolveAlias(String object, String string2) {
        synchronized (this) {
            block4 : {
                object = this.getNamespacePrefix((String)object);
                if (object != null) break block4;
                return null;
            }
            Map map = this.aliasMap;
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append((String)object);
            stringBuilder.append(string2);
            object = (XMPAliasInfo)map.get(stringBuilder.toString());
            return object;
        }
    }

}

