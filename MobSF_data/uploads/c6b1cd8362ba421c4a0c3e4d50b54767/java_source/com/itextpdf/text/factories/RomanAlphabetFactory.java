/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.factories;

import com.itextpdf.text.error_messages.MessageLocalization;

public class RomanAlphabetFactory {
    public static final String getLowerCaseString(int n) {
        return RomanAlphabetFactory.getString(n);
    }

    public static final String getString(int n) {
        int n2;
        if (n < 1) {
            throw new NumberFormatException(MessageLocalization.getComposedMessage("you.can.t.translate.a.negative.number.into.an.alphabetical.value", new Object[0]));
        }
        int n3 = n - 1;
        int n4 = 26;
        int n5 = 0;
        n = 1;
        while (n3 >= (n2 = n4 + n5)) {
            ++n;
            n4 *= 26;
            n5 = n2;
        }
        n4 = n3 - n5;
        char[] arrc = new char[n];
        while (n > 0) {
            arrc[--n] = (char)(n4 % 26 + 97);
            n4 /= 26;
        }
        return new String(arrc);
    }

    public static final String getString(int n, boolean bl) {
        if (bl) {
            return RomanAlphabetFactory.getLowerCaseString(n);
        }
        return RomanAlphabetFactory.getUpperCaseString(n);
    }

    public static final String getUpperCaseString(int n) {
        return RomanAlphabetFactory.getString(n).toUpperCase();
    }
}

