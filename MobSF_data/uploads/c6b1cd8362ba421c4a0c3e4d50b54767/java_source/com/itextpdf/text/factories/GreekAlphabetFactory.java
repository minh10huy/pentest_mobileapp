/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.factories;

import com.itextpdf.text.SpecialSymbol;

public class GreekAlphabetFactory {
    public static final String getLowerCaseString(int n) {
        return GreekAlphabetFactory.getString(n);
    }

    public static final String getString(int n) {
        return GreekAlphabetFactory.getString(n, true);
    }

    public static final String getString(int n, boolean bl) {
        int n2;
        if (n < 1) {
            return "";
        }
        int n3 = n - 1;
        int n4 = 0;
        int n5 = 24;
        n = 1;
        while (n3 >= (n2 = n5 + n4)) {
            ++n;
            n5 *= 24;
            n4 = n2;
        }
        n4 = n3 - n4;
        char[] arrc = new char[n];
        while (n > 0) {
            n5 = n - 1;
            arrc[n5] = (char)(n4 % 24);
            if (arrc[n5] > '\u0010') {
                arrc[n5] = (char)(arrc[n5] + '\u0001');
            }
            n2 = arrc[n5];
            n = bl ? 945 : 913;
            arrc[n5] = (char)(n2 + n);
            arrc[n5] = SpecialSymbol.getCorrespondingSymbol(arrc[n5]);
            n4 /= 24;
            n = n5;
        }
        return String.valueOf(arrc);
    }

    public static final String getUpperCaseString(int n) {
        return GreekAlphabetFactory.getString(n).toUpperCase();
    }
}

