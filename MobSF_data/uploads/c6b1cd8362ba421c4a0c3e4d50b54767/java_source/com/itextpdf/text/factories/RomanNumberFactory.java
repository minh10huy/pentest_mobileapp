/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.factories;

public class RomanNumberFactory {
    private static final RomanDigit[] roman = new RomanDigit[]{new RomanDigit('m', 1000, false), new RomanDigit('d', 500, false), new RomanDigit('c', 100, true), new RomanDigit('l', 50, false), new RomanDigit('x', 10, true), new RomanDigit('v', 5, false), new RomanDigit('i', 1, true)};

    public static final String getLowerCaseString(int n) {
        return RomanNumberFactory.getString(n);
    }

    public static final String getString(int n) {
        StringBuffer stringBuffer = new StringBuffer();
        int n2 = n;
        if (n < 0) {
            stringBuffer.append('-');
            n2 = - n;
        }
        n = n2;
        if (n2 > 3000) {
            stringBuffer.append('|');
            n = n2 / 1000;
            stringBuffer.append(RomanNumberFactory.getString(n));
            stringBuffer.append('|');
            n = n2 - n * 1000;
        }
        int n3 = 0;
        n2 = n;
        n = n3;
        do {
            RomanDigit romanDigit = roman[n];
            while (n2 >= romanDigit.value) {
                stringBuffer.append(romanDigit.digit);
                n2 -= romanDigit.value;
            }
            if (n2 <= 0) {
                return stringBuffer.toString();
            }
            n3 = n;
            do {
                RomanDigit[] arrromanDigit = roman;
                int n4 = n3 + 1;
                if (arrromanDigit[n4].pre) break;
                n3 = n4;
            } while (true);
            n3 = n2;
            if (RomanNumberFactory.roman[n4].value + n2 >= romanDigit.value) {
                stringBuffer.append(RomanNumberFactory.roman[n4].digit);
                stringBuffer.append(romanDigit.digit);
                n3 = n2 - (romanDigit.value - RomanNumberFactory.roman[n4].value);
            }
            ++n;
            n2 = n3;
        } while (true);
    }

    public static final String getString(int n, boolean bl) {
        if (bl) {
            return RomanNumberFactory.getLowerCaseString(n);
        }
        return RomanNumberFactory.getUpperCaseString(n);
    }

    public static final String getUpperCaseString(int n) {
        return RomanNumberFactory.getString(n).toUpperCase();
    }

    private static class RomanDigit {
        public char digit;
        public boolean pre;
        public int value;

        RomanDigit(char c, int n, boolean bl) {
            this.digit = c;
            this.value = n;
            this.pre = bl;
        }
    }

}

