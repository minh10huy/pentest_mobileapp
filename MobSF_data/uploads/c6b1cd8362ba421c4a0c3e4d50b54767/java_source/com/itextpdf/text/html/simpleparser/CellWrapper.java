/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.html.simpleparser;

import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chunk;
import com.itextpdf.text.Element;
import com.itextpdf.text.ElementListener;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.TextElementArray;
import com.itextpdf.text.html.HtmlUtilities;
import com.itextpdf.text.html.simpleparser.ChainedProperties;
import com.itextpdf.text.pdf.PdfPCell;
import java.util.List;

@Deprecated
public class CellWrapper
implements TextElementArray {
    private final PdfPCell cell;
    private boolean percentage;
    private float width;

    public CellWrapper(String object, ChainedProperties object2) {
        this.cell = this.createPdfPCell((String)object, (ChainedProperties)object2);
        object = object2.getProperty("width");
        if (object != null) {
            object = object2 = object.trim();
            if (object2.endsWith("%")) {
                this.percentage = true;
                object = object2.substring(0, object2.length() - 1);
            }
            this.width = Float.parseFloat((String)object);
        }
    }

    @Override
    public boolean add(Element element) {
        this.cell.addElement(element);
        return true;
    }

    public PdfPCell createPdfPCell(String string2, ChainedProperties chainedProperties) {
        PdfPCell pdfPCell = new PdfPCell((Phrase)null);
        String string3 = chainedProperties.getProperty("colspan");
        if (string3 != null) {
            pdfPCell.setColspan(Integer.parseInt(string3));
        }
        if ((string3 = chainedProperties.getProperty("rowspan")) != null) {
            pdfPCell.setRowspan(Integer.parseInt(string3));
        }
        if (string2.equals("th")) {
            pdfPCell.setHorizontalAlignment(1);
        }
        if ((string2 = chainedProperties.getProperty("align")) != null) {
            pdfPCell.setHorizontalAlignment(HtmlUtilities.alignmentValue(string2));
        }
        string2 = chainedProperties.getProperty("valign");
        pdfPCell.setVerticalAlignment(5);
        if (string2 != null) {
            pdfPCell.setVerticalAlignment(HtmlUtilities.alignmentValue(string2));
        }
        string2 = chainedProperties.getProperty("border");
        float f = 0.0f;
        if (string2 != null) {
            f = Float.parseFloat(string2);
        }
        pdfPCell.setBorderWidth(f);
        string2 = chainedProperties.getProperty("cellpadding");
        if (string2 != null) {
            pdfPCell.setPadding(Float.parseFloat(string2));
        }
        pdfPCell.setUseDescender(true);
        pdfPCell.setBackgroundColor(HtmlUtilities.decodeColor(chainedProperties.getProperty("bgcolor")));
        return pdfPCell;
    }

    public PdfPCell getCell() {
        return this.cell;
    }

    @Override
    public List<Chunk> getChunks() {
        return null;
    }

    public float getWidth() {
        return this.width;
    }

    @Override
    public boolean isContent() {
        return false;
    }

    @Override
    public boolean isNestable() {
        return false;
    }

    public boolean isPercentage() {
        return this.percentage;
    }

    @Override
    public boolean process(ElementListener elementListener) {
        return false;
    }

    @Override
    public int type() {
        return 0;
    }
}

