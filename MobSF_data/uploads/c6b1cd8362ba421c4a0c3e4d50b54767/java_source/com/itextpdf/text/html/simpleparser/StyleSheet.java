/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.html.simpleparser;

import com.itextpdf.text.html.HtmlUtilities;
import com.itextpdf.text.html.simpleparser.ChainedProperties;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;

@Deprecated
public class StyleSheet {
    protected Map<String, Map<String, String>> classMap = new HashMap<String, Map<String, String>>();
    protected Map<String, Map<String, String>> tagMap = new HashMap<String, Map<String, String>>();

    public static void resolveStyleAttribute(Map<String, String> map, ChainedProperties object) {
        Object object2 = map.get("style");
        if (object2 == null) {
            return;
        }
        object2 = HtmlUtilities.parseAttributes((String)object2);
        for (Object object3 : object2.keySet()) {
            CharSequence charSequence;
            float f;
            if (object3.equals("font-family")) {
                map.put("face", object2.getProperty((String)object3));
                continue;
            }
            boolean bl = object3.equals("font-size");
            float f2 = 12.0f;
            if (bl) {
                f2 = f = HtmlUtilities.parseLength(object.getProperty("size"), 12.0f);
                if (f <= 0.0f) {
                    f2 = 12.0f;
                }
                charSequence = new StringBuilder();
                charSequence.append(Float.toString(HtmlUtilities.parseLength(object2.getProperty((String)object3), f2)));
                charSequence.append("pt");
                map.put("size", charSequence.toString());
                continue;
            }
            if (object3.equals("font-style")) {
                if (!(object3 = object2.getProperty((String)object3).trim().toLowerCase()).equals("italic") && !object3.equals("oblique")) continue;
                map.put("i", null);
                continue;
            }
            if (object3.equals("font-weight")) {
                if (!(object3 = object2.getProperty((String)object3).trim().toLowerCase()).equals("bold") && !object3.equals("700") && !object3.equals("800") && !object3.equals("900")) continue;
                map.put("b", null);
                continue;
            }
            if (object3.equals("text-decoration")) {
                if (!object2.getProperty((String)object3).trim().toLowerCase().equals("underline")) continue;
                map.put("u", null);
                continue;
            }
            if (object3.equals("color")) {
                if ((object3 = HtmlUtilities.decodeColor(object2.getProperty((String)object3))) == null) continue;
                object3 = Integer.toHexString(object3.getRGB());
                charSequence = new StringBuilder();
                charSequence.append("000000");
                charSequence.append((String)object3);
                object3 = charSequence.toString();
                charSequence = new StringBuilder();
                charSequence.append("#");
                charSequence.append(object3.substring(object3.length() - 6));
                map.put("color", charSequence.toString());
                continue;
            }
            if (object3.equals("line-height")) {
                charSequence = object2.getProperty((String)object3).trim();
                f = HtmlUtilities.parseLength(object.getProperty("size"), 12.0f);
                if (f > 0.0f) {
                    f2 = f;
                }
                f2 = HtmlUtilities.parseLength(object2.getProperty((String)object3), f2);
                if (charSequence.endsWith("%")) {
                    object = new StringBuilder();
                    object.append("0,");
                    object.append(f2 / 100.0f);
                    map.put("leading", object.toString());
                    return;
                }
                if ("normal".equalsIgnoreCase((String)charSequence)) {
                    map.put("leading", "0,1.5");
                    return;
                }
                object3 = new StringBuilder();
                object3.append(f2);
                object3.append(",0");
                map.put("leading", object3.toString());
                continue;
            }
            if (object3.equals("text-align")) {
                map.put("align", object2.getProperty((String)object3).trim().toLowerCase());
                continue;
            }
            if (!object3.equals("padding-left")) continue;
            map.put("indent", Float.toString(HtmlUtilities.parseLength(object2.getProperty((String)object3).trim().toLowerCase())));
        }
    }

    public void applyStyle(String map, Map<String, String> map2) {
        if ((map = this.tagMap.get(map.toLowerCase())) != null) {
            map = new HashMap(map);
            map.putAll(map2);
            map2.putAll(map);
        }
        if ((map = map2.get("class")) == null) {
            return;
        }
        if ((map = this.classMap.get(map.toLowerCase())) == null) {
            return;
        }
        map2.remove("class");
        map = new HashMap<String, String>(map);
        map.putAll(map2);
        map2.putAll(map);
    }

    public void loadStyle(String hashMap, String string2, String string3) {
        String string4 = hashMap.toLowerCase();
        Map<String, String> map = this.classMap.get(string4);
        hashMap = map;
        if (map == null) {
            hashMap = new HashMap<String, String>();
            this.classMap.put(string4, hashMap);
        }
        hashMap.put(string2, string3);
    }

    public void loadStyle(String string2, HashMap<String, String> hashMap) {
        this.classMap.put(string2.toLowerCase(), hashMap);
    }

    public void loadTagStyle(String hashMap, String string2, String string3) {
        String string4 = hashMap.toLowerCase();
        Map<String, String> map = this.tagMap.get(string4);
        hashMap = map;
        if (map == null) {
            hashMap = new HashMap<String, String>();
            this.tagMap.put(string4, hashMap);
        }
        hashMap.put(string2, string3);
    }

    public void loadTagStyle(String string2, Map<String, String> map) {
        this.tagMap.put(string2.toLowerCase(), map);
    }
}

