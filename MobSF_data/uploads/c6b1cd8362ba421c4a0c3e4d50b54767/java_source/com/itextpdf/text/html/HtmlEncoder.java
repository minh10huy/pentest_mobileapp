/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.html;

import com.itextpdf.text.BaseColor;
import java.util.HashSet;
import java.util.Set;

@Deprecated
public final class HtmlEncoder {
    private static final String[] HTML_CODE;
    private static final Set<String> NEWLINETAGS;

    static {
        String[] arrstring;
        int n;
        int n2;
        StringBuilder stringBuilder;
        HTML_CODE = new String[256];
        for (n = 0; n < 10; ++n) {
            arrstring = HTML_CODE;
            stringBuilder = new StringBuilder();
            stringBuilder.append("&#00");
            stringBuilder.append(n);
            stringBuilder.append(";");
            arrstring[n] = stringBuilder.toString();
        }
        n = 10;
        do {
            n2 = 32;
            if (n >= 32) break;
            arrstring = HTML_CODE;
            stringBuilder = new StringBuilder();
            stringBuilder.append("&#0");
            stringBuilder.append(n);
            stringBuilder.append(";");
            arrstring[n] = stringBuilder.toString();
            ++n;
        } while (true);
        do {
            if (n2 >= 128) break;
            HtmlEncoder.HTML_CODE[n2] = String.valueOf((char)n2);
            ++n2;
        } while (true);
        HtmlEncoder.HTML_CODE[9] = "\t";
        HtmlEncoder.HTML_CODE[10] = "<br />\n";
        HtmlEncoder.HTML_CODE[34] = "&quot;";
        HtmlEncoder.HTML_CODE[38] = "&amp;";
        HtmlEncoder.HTML_CODE[60] = "&lt;";
        HtmlEncoder.HTML_CODE[62] = "&gt;";
        for (n = 128; n < 256; ++n) {
            arrstring = HTML_CODE;
            stringBuilder = new StringBuilder();
            stringBuilder.append("&#");
            stringBuilder.append(n);
            stringBuilder.append(";");
            arrstring[n] = stringBuilder.toString();
        }
        NEWLINETAGS = new HashSet<String>();
        NEWLINETAGS.add("p");
        NEWLINETAGS.add("blockquote");
        NEWLINETAGS.add("br");
    }

    private HtmlEncoder() {
    }

    public static String encode(BaseColor baseColor) {
        StringBuffer stringBuffer = new StringBuffer("#");
        if (baseColor.getRed() < 16) {
            stringBuffer.append('0');
        }
        stringBuffer.append(Integer.toString(baseColor.getRed(), 16));
        if (baseColor.getGreen() < 16) {
            stringBuffer.append('0');
        }
        stringBuffer.append(Integer.toString(baseColor.getGreen(), 16));
        if (baseColor.getBlue() < 16) {
            stringBuffer.append('0');
        }
        stringBuffer.append(Integer.toString(baseColor.getBlue(), 16));
        return stringBuffer.toString();
    }

    public static String encode(String string2) {
        int n = string2.length();
        StringBuffer stringBuffer = new StringBuffer();
        for (int i = 0; i < n; ++i) {
            char c = string2.charAt(i);
            if (c < '\u0100') {
                stringBuffer.append(HTML_CODE[c]);
                continue;
            }
            stringBuffer.append("&#");
            stringBuffer.append((int)c);
            stringBuffer.append(';');
        }
        return stringBuffer.toString();
    }

    public static String getAlignment(int n) {
        switch (n) {
            default: {
                return "";
            }
            case 7: {
                return "baseline";
            }
            case 6: {
                return "bottom";
            }
            case 5: {
                return "middle";
            }
            case 4: {
                return "top";
            }
            case 3: 
            case 8: {
                return "justify";
            }
            case 2: {
                return "right";
            }
            case 1: {
                return "center";
            }
            case 0: 
        }
        return "left";
    }

    public static boolean isNewLineTag(String string2) {
        return NEWLINETAGS.contains(string2);
    }
}

