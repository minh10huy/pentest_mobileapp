/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.html.simpleparser;

import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chunk;
import com.itextpdf.text.DocListener;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Font;
import com.itextpdf.text.FontFactory;
import com.itextpdf.text.FontProvider;
import com.itextpdf.text.Image;
import com.itextpdf.text.List;
import com.itextpdf.text.ListItem;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.html.HtmlUtilities;
import com.itextpdf.text.html.simpleparser.ChainedProperties;
import com.itextpdf.text.html.simpleparser.ImageProvider;
import com.itextpdf.text.pdf.HyphenationAuto;
import com.itextpdf.text.pdf.HyphenationEvent;
import com.itextpdf.text.pdf.draw.LineSeparator;
import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;

@Deprecated
public class ElementFactory {
    private FontProvider provider = FontFactory.getFontImp();

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    protected static void setParagraphLeading(Paragraph paragraph, String object) {
        if (object == null) {
            paragraph.setLeading(0.0f, 1.5f);
            return;
        }
        try {
            object = new StringTokenizer((String)object, " ,");
            float f = Float.parseFloat(object.nextToken());
            if (!object.hasMoreTokens()) {
                paragraph.setLeading(f, 0.0f);
                return;
            }
            paragraph.setLeading(f, Float.parseFloat(object.nextToken()));
            return;
        }
        catch (Exception exception) {}
        paragraph.setLeading(0.0f, 1.5f);
    }

    public Chunk createChunk(String object, ChainedProperties chainedProperties) {
        Font font = this.getFont(chainedProperties);
        object = new Chunk((String)object, font);
        if (chainedProperties.hasProperty("sub")) {
            object.setTextRise((- font.getSize()) / 2.0f);
        } else if (chainedProperties.hasProperty("sup")) {
            object.setTextRise(font.getSize() / 2.0f);
        }
        object.setHyphenation(this.getHyphenation(chainedProperties));
        return object;
    }

    public Image createImage(String object, Map<String, String> object2, ChainedProperties chainedProperties, DocListener object3, ImageProvider object4, HashMap<String, Image> object5, String string2) throws DocumentException, IOException {
        float f;
        object3 = object4 != null ? object4.getImage((String)object, (Map<String, String>)object2, chainedProperties, (DocListener)object3) : null;
        object4 = object3;
        if (object3 == null) {
            object4 = object3;
            if (object5 != null) {
                object5 = object5.get(object);
                object4 = object3;
                if (object5 != null) {
                    object4 = Image.getInstance((Image)object5);
                }
            }
        }
        if (object4 != null) {
            return object4;
        }
        if (!object.startsWith("http") && string2 != null) {
            object3 = new StringBuilder();
            object3.append(string2);
            object3.append((String)object);
            object3 = object3.toString();
        } else {
            object3 = object;
            if (object4 == null) {
                object3 = object;
                if (!object.startsWith("http")) {
                    object3 = object4 = chainedProperties.getProperty("image_path");
                    if (object4 == null) {
                        object3 = "";
                    }
                    object3 = new File((String)object3, (String)object).getPath();
                }
            }
        }
        object = Image.getInstance((String)object3);
        if (object == null) {
            return null;
        }
        float f2 = f = HtmlUtilities.parseLength(chainedProperties.getProperty("size"), 12.0f);
        if (f <= 0.0f) {
            f2 = 12.0f;
        }
        f = HtmlUtilities.parseLength(object2.get("width"), f2);
        f2 = HtmlUtilities.parseLength(object2.get("height"), f2);
        if (f > 0.0f && f2 > 0.0f) {
            object.scaleAbsolute(f, f2);
        } else if (f > 0.0f) {
            object.scaleAbsolute(f, object.getHeight() * f / object.getWidth());
        } else if (f2 > 0.0f) {
            object.scaleAbsolute(object.getWidth() * f2 / object.getHeight(), f2);
        }
        object2 = chainedProperties.getProperty("before");
        if (object2 != null) {
            object.setSpacingBefore(Float.parseFloat((String)object2));
        }
        if ((object2 = chainedProperties.getProperty("after")) != null) {
            object.setSpacingAfter(Float.parseFloat((String)object2));
        }
        object.setWidthPercentage(0.0f);
        return object;
    }

    public LineSeparator createLineSeparator(Map<String, String> map, float f) {
        float f2;
        float f3;
        block6 : {
            block5 : {
                String string2 = map.get("size");
                if (string2 == null || (f2 = HtmlUtilities.parseLength(string2, 12.0f)) <= 0.0f) {
                    f2 = 1.0f;
                }
                string2 = map.get("width");
                if (string2 == null) break block5;
                f3 = HtmlUtilities.parseLength(string2, 12.0f);
                if (f3 <= 0.0f) {
                    f3 = 100.0f;
                }
                if (string2.endsWith("%")) break block6;
            }
            f3 = 100.0f;
        }
        return new LineSeparator(f2, f3, null, HtmlUtilities.alignmentValue(map.get("align")), f);
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public List createList(String object, ChainedProperties chainedProperties) {
        if ("ul".equalsIgnoreCase((String)object)) {
            object = new List(false);
            object.setListSymbol("\u2022 ");
        } else {
            object = new List(true);
        }
        try {
            object.setIndentationLeft(new Float(chainedProperties.getProperty("indent")).floatValue());
            return object;
        }
        catch (Exception exception) {}
        object.setAutoindent(true);
        return object;
    }

    public ListItem createListItem(ChainedProperties chainedProperties) {
        ListItem listItem = new ListItem();
        this.updateElement(listItem, chainedProperties);
        return listItem;
    }

    public Paragraph createParagraph(ChainedProperties chainedProperties) {
        Paragraph paragraph = new Paragraph();
        this.updateElement(paragraph, chainedProperties);
        return paragraph;
    }

    public Font getFont(ChainedProperties object) {
        Object object2;
        String string2;
        String string3;
        block18 : {
            block17 : {
                string3 = object.getProperty("face");
                if (string3 == null) break block17;
                string2 = string3;
                if (string3.trim().length() != 0) break block18;
            }
            string2 = object.getProperty("font-family");
        }
        int n = 0;
        string3 = string2;
        if (string2 != null) {
            object2 = new StringTokenizer(string2, ",");
            string3 = string2;
            while (object2.hasMoreTokens()) {
                string3 = string2 = object2.nextToken().trim();
                if (string2.startsWith("\"")) {
                    string3 = string2.substring(1);
                }
                string2 = string3;
                if (string3.endsWith("\"")) {
                    string2 = string3.substring(0, string3.length() - 1);
                }
                string3 = string2;
                if (!this.provider.isRegistered(string2)) continue;
                string3 = string2;
                break;
            }
        }
        object2 = object.getProperty("encoding");
        string2 = object2;
        if (object2 == null) {
            string2 = "Cp1252";
        }
        float f = (object2 = object.getProperty("size")) != null ? Float.parseFloat((String)object2) : 12.0f;
        object2 = object.getProperty("text-decoration");
        int n2 = n;
        if (object2 != null) {
            n2 = n;
            if (object2.trim().length() != 0) {
                if ("underline".equals(object2)) {
                    n2 = 4;
                } else {
                    n2 = n;
                    if ("line-through".equals(object2)) {
                        n2 = 8;
                    }
                }
            }
        }
        n = n2;
        if (object.hasProperty("i")) {
            n = n2 | 2;
        }
        n2 = n;
        if (object.hasProperty("b")) {
            n2 = n | 1;
        }
        n = n2;
        if (object.hasProperty("u")) {
            n = n2 | 4;
        }
        if (object.hasProperty("s")) {
            n |= 8;
        }
        object = HtmlUtilities.decodeColor(object.getProperty("color"));
        return this.provider.getFont(string3, string2, true, f, n, (BaseColor)object);
    }

    public FontProvider getFontProvider() {
        return this.provider;
    }

    public HyphenationEvent getHyphenation(ChainedProperties object) {
        String string2 = object.getProperty("hyphenation");
        if (string2 != null) {
            if (string2.length() == 0) {
                return null;
            }
            int n = string2.indexOf(95);
            int n2 = 2;
            if (n == -1) {
                return new HyphenationAuto(string2, null, 2, 2);
            }
            object = string2.substring(0, n);
            String string3 = string2.substring(n + 1);
            n = string3.indexOf(44);
            if (n == -1) {
                return new HyphenationAuto((String)object, string3, 2, 2);
            }
            string2 = string3.substring(n + 1);
            string3 = string3.substring(0, n);
            int n3 = string2.indexOf(44);
            if (n3 == -1) {
                n = Integer.parseInt(string2);
            } else {
                n = Integer.parseInt(string2.substring(0, n3));
                n2 = Integer.parseInt(string2.substring(n3 + 1));
            }
            return new HyphenationAuto((String)object, string3, n, n2);
        }
        return null;
    }

    public void setFontProvider(FontProvider fontProvider) {
        this.provider = fontProvider;
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    protected void updateElement(Paragraph paragraph, ChainedProperties object) {
        String string2;
        paragraph.setAlignment(HtmlUtilities.alignmentValue(object.getProperty("align")));
        paragraph.setHyphenation(this.getHyphenation((ChainedProperties)object));
        ElementFactory.setParagraphLeading(paragraph, object.getProperty("leading"));
        string2 = object.getProperty("after");
        if (string2 != null) {
            try {
                paragraph.setSpacingBefore(Float.parseFloat(string2));
            }
            catch (Exception exception) {}
        }
        if ((string2 = object.getProperty("after")) != null) {
            try {
                paragraph.setSpacingAfter(Float.parseFloat(string2));
            }
            catch (Exception exception) {}
        }
        if ((string2 = object.getProperty("extraparaspace")) != null) {
            try {
                paragraph.setExtraParagraphSpace(Float.parseFloat(string2));
            }
            catch (Exception exception) {}
        }
        if ((object = object.getProperty("indent")) == null) return;
        try {
            paragraph.setIndentationLeft(Float.parseFloat((String)object));
            return;
        }
        catch (Exception exception) {
            return;
        }
    }
}

