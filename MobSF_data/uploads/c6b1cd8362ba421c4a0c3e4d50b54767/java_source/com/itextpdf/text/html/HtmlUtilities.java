/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.html;

import com.itextpdf.text.BaseColor;
import com.itextpdf.text.html.WebColors;
import java.io.Serializable;
import java.util.HashMap;
import java.util.Properties;
import java.util.StringTokenizer;

@Deprecated
public class HtmlUtilities {
    public static final float DEFAULT_FONT_SIZE = 12.0f;
    public static final int[] FONTSIZES;
    private static HashMap<String, Float> sizes;

    static {
        sizes = new HashMap();
        sizes.put("xx-small", new Float(4.0f));
        sizes.put("x-small", new Float(6.0f));
        sizes.put("small", new Float(8.0f));
        sizes.put("medium", new Float(10.0f));
        sizes.put("large", new Float(13.0f));
        sizes.put("x-large", new Float(18.0f));
        sizes.put("xx-large", new Float(26.0f));
        FONTSIZES = new int[]{8, 10, 12, 14, 18, 24, 36};
    }

    public static int alignmentValue(String string2) {
        if (string2 == null) {
            return -1;
        }
        if ("center".equalsIgnoreCase(string2)) {
            return 1;
        }
        if ("left".equalsIgnoreCase(string2)) {
            return 0;
        }
        if ("right".equalsIgnoreCase(string2)) {
            return 2;
        }
        if ("justify".equalsIgnoreCase(string2)) {
            return 3;
        }
        if ("JustifyAll".equalsIgnoreCase(string2)) {
            return 8;
        }
        if ("top".equalsIgnoreCase(string2)) {
            return 4;
        }
        if ("middle".equalsIgnoreCase(string2)) {
            return 5;
        }
        if ("bottom".equalsIgnoreCase(string2)) {
            return 6;
        }
        if ("baseline".equalsIgnoreCase(string2)) {
            return 7;
        }
        return -1;
    }

    public static BaseColor decodeColor(String object) {
        if (object == null) {
            return null;
        }
        object = object.toLowerCase().trim();
        try {
            object = WebColors.getRGBColor((String)object);
            return object;
        }
        catch (IllegalArgumentException illegalArgumentException) {
            return null;
        }
    }

    /*
     * Exception decompiling
     */
    public static String eliminateWhiteSpace(String var0) {
        // This method has failed to decompile.  When submitting a bug report, please provide this stack trace, and (if you hold appropriate legal rights) the relevant class file.
        // org.benf.cfr.reader.util.ConfusedCFRException: Extractable last case doesn't follow previous
        // org.benf.cfr.reader.bytecode.analysis.opgraph.op3rewriters.SwitchReplacer.examineSwitchContiguity(SwitchReplacer.java:486)
        // org.benf.cfr.reader.bytecode.analysis.opgraph.op3rewriters.SwitchReplacer.replaceRawSwitches(SwitchReplacer.java:65)
        // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisInner(CodeAnalyser.java:416)
        // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisOrWrapFail(CodeAnalyser.java:196)
        // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysis(CodeAnalyser.java:141)
        // org.benf.cfr.reader.entities.attributes.AttributeCode.analyse(AttributeCode.java:95)
        // org.benf.cfr.reader.entities.Method.analyse(Method.java:372)
        // org.benf.cfr.reader.entities.ClassFile.analyseMid(ClassFile.java:867)
        // org.benf.cfr.reader.entities.ClassFile.analyseTop(ClassFile.java:768)
        // org.benf.cfr.reader.Main.doJar(Main.java:141)
        // org.benf.cfr.reader.Main.main(Main.java:242)
        throw new IllegalStateException("Decompilation failed");
    }

    /*
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    public static int getIndexedFontSize(String string2, String string3) {
        int n2;
        int n;
        block8 : {
            block9 : {
                int n3;
                block10 : {
                    boolean bl = string2.startsWith("+");
                    n = 0;
                    if (!bl && !string2.startsWith("-")) {
                        n2 = Integer.parseInt(string2);
                        --n2;
                        break block8;
                    }
                    String string4 = string3;
                    if (string3 == null) {
                        string4 = "12";
                    }
                    n3 = (int)Float.parseFloat(string4);
                    break block10;
                    catch (NumberFormatException numberFormatException) {}
                    n2 = 0;
                    break block8;
                }
                for (n2 = HtmlUtilities.FONTSIZES.length - 1; n2 >= 0; --n2) {
                    if (n3 < FONTSIZES[n2]) {
                        continue;
                    }
                    break block9;
                }
                n2 = 0;
            }
            string3 = string2;
            if (string2.startsWith("+")) {
                string3 = string2.substring(1);
            }
            n2 = Integer.parseInt(string3) + n2;
        }
        if (n2 < 0) {
            n2 = n;
            return FONTSIZES[n2];
        }
        if (n2 < FONTSIZES.length) return FONTSIZES[n2];
        n2 = FONTSIZES.length - 1;
        return FONTSIZES[n2];
    }

    public static Properties parseAttributes(String object) {
        Properties properties = new Properties();
        if (object == null) {
            return properties;
        }
        StringTokenizer stringTokenizer = new StringTokenizer((String)object, ";");
        while (stringTokenizer.hasMoreTokens()) {
            Object object2;
            object = new StringTokenizer(stringTokenizer.nextToken(), ":");
            if (!object.hasMoreTokens()) continue;
            String string2 = object.nextToken().trim();
            if (!object.hasMoreTokens()) continue;
            object = object2 = object.nextToken().trim();
            if (object2.startsWith("\"")) {
                object = object2.substring(1);
            }
            object2 = object;
            if (object.endsWith("\"")) {
                object2 = object.substring(0, object.length() - 1);
            }
            properties.setProperty(string2.toLowerCase(), (String)object2);
        }
        return properties;
    }

    public static float parseLength(String string2) {
        return HtmlUtilities.parseLength(string2, 12.0f);
    }

    public static float parseLength(String string2, float f) {
        if (string2 == null) {
            return 0.0f;
        }
        Serializable serializable = sizes.get(string2.toLowerCase());
        if (serializable != null) {
            return serializable.floatValue();
        }
        int n = string2.length();
        boolean bl = true;
        int n2 = 0;
        block3 : while (bl && n2 < n) {
            switch (string2.charAt(n2)) {
                default: {
                    bl = false;
                    continue block3;
                }
                case '+': 
                case '-': 
                case '.': 
                case '0': 
                case '1': 
                case '2': 
                case '3': 
                case '4': 
                case '5': 
                case '6': 
                case '7': 
                case '8': 
                case '9': 
            }
            ++n2;
        }
        if (n2 == 0) {
            return 0.0f;
        }
        if (n2 == n) {
            serializable = new StringBuilder();
            serializable.append(string2);
            serializable.append("f");
            return Float.parseFloat(serializable.toString());
        }
        serializable = new StringBuilder();
        serializable.append(string2.substring(0, n2));
        serializable.append("f");
        float f2 = Float.parseFloat(serializable.toString());
        string2 = string2.substring(n2);
        if (string2.startsWith("in")) {
            return f2 * 72.0f;
        }
        if (string2.startsWith("cm")) {
            return f2 / 2.54f * 72.0f;
        }
        if (string2.startsWith("mm")) {
            return f2 / 25.4f * 72.0f;
        }
        if (string2.startsWith("pc")) {
            return f2 * 12.0f;
        }
        if (string2.startsWith("em")) {
            return f2 * f;
        }
        if (string2.startsWith("ex")) {
            return f2 * f / 2.0f;
        }
        return f2;
    }

    public static String removeComment(String string2, String string3, String string4) {
        StringBuffer stringBuffer = new StringBuffer();
        int n = string4.length();
        int n2 = 0;
        int n3 = string2.indexOf(string3, 0);
        while (n3 > -1) {
            stringBuffer.append(string2.substring(n2, n3));
            n2 = string2.indexOf(string4, n3) + n;
            n3 = string2.indexOf(string3, n2);
        }
        stringBuffer.append(string2.substring(n2));
        return stringBuffer.toString();
    }
}

