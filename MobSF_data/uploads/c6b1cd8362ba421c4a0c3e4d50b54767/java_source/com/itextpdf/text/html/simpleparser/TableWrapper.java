/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.html.simpleparser;

import com.itextpdf.text.Chunk;
import com.itextpdf.text.Element;
import com.itextpdf.text.ElementListener;
import com.itextpdf.text.html.HtmlUtilities;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

@Deprecated
public class TableWrapper
implements Element {
    private float[] colWidths;
    private final List<List<PdfPCell>> rows = new ArrayList<List<PdfPCell>>();
    private final Map<String, String> styles = new HashMap<String, String>();

    public TableWrapper(Map<String, String> map) {
        this.styles.putAll(map);
    }

    public void addRow(List<PdfPCell> list) {
        if (list != null) {
            Collections.reverse(list);
            this.rows.add(list);
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public PdfPTable createTable() {
        Object object;
        Object object2;
        if (this.rows.isEmpty()) {
            return new PdfPTable(1);
        }
        object2 = this.rows;
        int n = 0;
        object2 = object2.get(0).iterator();
        int n2 = 0;
        while (object2.hasNext()) {
            n2 += ((PdfPCell)object2.next()).getColspan();
        }
        object2 = new PdfPTable(n2);
        object = this.styles.get("width");
        if (object == null) {
            object2.setWidthPercentage(100.0f);
        } else if (object.endsWith("%")) {
            object2.setWidthPercentage(Float.parseFloat(object.substring(0, object.length() - 1)));
        } else {
            object2.setTotalWidth(Float.parseFloat((String)object));
            object2.setLockedWidth(true);
        }
        object = this.styles.get("align");
        n2 = n;
        if (object != null) {
            n2 = HtmlUtilities.alignmentValue((String)object);
        }
        object2.setHorizontalAlignment(n2);
        try {
            if (this.colWidths != null) {
                object2.setWidths(this.colWidths);
            }
        }
        catch (Exception exception) {}
        object = this.rows.iterator();
        block3 : while (object.hasNext()) {
            Iterator iterator = ((List)object.next()).iterator();
            do {
                if (!iterator.hasNext()) continue block3;
                object2.addCell((PdfPCell)iterator.next());
            } while (true);
            break;
        }
        return object2;
    }

    @Override
    public List<Chunk> getChunks() {
        return null;
    }

    @Override
    public boolean isContent() {
        return false;
    }

    @Override
    public boolean isNestable() {
        return false;
    }

    @Override
    public boolean process(ElementListener elementListener) {
        return false;
    }

    public void setColWidths(float[] arrf) {
        this.colWidths = arrf;
    }

    @Override
    public int type() {
        return 0;
    }
}

