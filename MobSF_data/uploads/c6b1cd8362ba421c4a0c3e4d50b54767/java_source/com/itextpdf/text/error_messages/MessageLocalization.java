/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.error_messages;

import com.itextpdf.text.io.StreamUtil;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.Reader;
import java.io.Serializable;
import java.util.HashMap;

public final class MessageLocalization {
    private static final String BASE_PATH = "com/itextpdf/text/l10n/error/";
    private static HashMap<String, String> currentLanguage;
    private static HashMap<String, String> defaultLanguage;

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    static {
        defaultLanguage = new HashMap();
        try {
            defaultLanguage = MessageLocalization.getLanguageMessages("en", null);
        }
        catch (Exception exception) {}
        if (defaultLanguage == null) {
            defaultLanguage = new HashMap();
        }
    }

    private MessageLocalization() {
    }

    public static String getComposedMessage(String string2, int n) {
        return MessageLocalization.getComposedMessage(string2, String.valueOf(n), null, null, null);
    }

    public static /* varargs */ String getComposedMessage(String charSequence, Object ... arrobject) {
        CharSequence charSequence2 = charSequence = MessageLocalization.getMessage((String)charSequence);
        if (arrobject != null) {
            int n = arrobject.length;
            int n2 = 0;
            int n3 = 1;
            do {
                charSequence2 = charSequence;
                if (n2 >= n) break;
                Object object = arrobject[n2];
                charSequence2 = charSequence;
                if (object != null) {
                    charSequence2 = new StringBuilder();
                    charSequence2.append("{");
                    charSequence2.append(n3);
                    charSequence2.append("}");
                    charSequence2 = charSequence.replace(charSequence2.toString(), object.toString());
                }
                ++n3;
                ++n2;
                charSequence = charSequence2;
            } while (true);
        }
        return charSequence2;
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    private static HashMap<String, String> getLanguageMessages(String var0, String var1_5) throws IOException {
        block23 : {
            block20 : {
                block21 : {
                    block19 : {
                        block22 : {
                            if (var0 == null) {
                                throw new IllegalArgumentException("The language cannot be null.");
                            }
                            var3_11 = null;
                            if (var1_5 == null) ** GOTO lbl13
                            var2_12 = new StringBuilder();
                            var2_12.append((String)var0);
                            var2_12.append("_");
                            var2_12.append((String)var1_5);
                            var2_12.append(".lng");
                            var2_12 = var2_12.toString();
                            break block22;
lbl13: // 1 sources:
                            var2_12 = new StringBuilder();
                            var2_12.append((String)var0);
                            var2_12.append(".lng");
                            var2_12 = var2_12.toString();
                        }
                        var4_13 = new StringBuilder();
                        var4_13.append("com/itextpdf/text/l10n/error/");
                        var4_13.append((String)var2_12);
                        var2_12 = StreamUtil.getResourceStream(var4_13.toString(), new MessageLocalization().getClass().getClassLoader());
                        if (var2_12 == null) break block19;
                        var0 = MessageLocalization.readLanguageStream((InputStream)var2_12);
                        if (var2_12 == null) return var0;
                        try {
                            var2_12.close();
                            return var0;
                        }
                        catch (Exception var1_9) {
                            return var0;
                        }
                    }
                    if (var1_5 == null) {
                        if (var2_12 == null) return null;
                        var2_12.close();
                        return null;
                    }
                    try {
                        var1_5 = new StringBuilder();
                        var1_5.append((String)var0);
                        var1_5.append(".lng");
                        var0 = var1_5.toString();
                        var1_5 = new StringBuilder();
                        var1_5.append("com/itextpdf/text/l10n/error/");
                        var1_5.append((String)var0);
                        var0 = StreamUtil.getResourceStream(var1_5.toString(), new MessageLocalization().getClass().getClassLoader());
                        if (var0 == null) break block20;
                        break block21;
                    }
                    catch (Throwable var1_6) {
                        var0 = var2_12;
                    }
                    break block23;
                }
                try {
                    var1_5 = MessageLocalization.readLanguageStream((InputStream)var0);
                    if (var0 == null) return var1_5;
                }
                catch (Throwable var1_7) {}
                try {
                    var0.close();
                    return var1_5;
                }
                catch (Exception var0_2) {
                    return var1_5;
                }
                break block23;
            }
            if (var0 == null) return null;
            try {
                var0.close();
                return null;
            }
            catch (Exception var0_3) {
                return null;
            }
            catch (Exception var0_1) {
                return null;
            }
            catch (Throwable var1_10) {
                var0 = var3_11;
            }
        }
        if (var0 == null) throw var1_8;
        try {
            var0.close();
        }
        catch (Exception var0_4) {
            throw var1_8;
        }
        throw var1_8;
    }

    public static String getMessage(String string2) {
        return MessageLocalization.getMessage(string2, true);
    }

    public static String getMessage(String string2, boolean bl) {
        HashMap<String, String> hashMap = currentLanguage;
        if (hashMap != null && (hashMap = hashMap.get(string2)) != null) {
            return hashMap;
        }
        if (bl && (hashMap = defaultLanguage.get(string2)) != null) {
            return hashMap;
        }
        hashMap = new StringBuilder();
        hashMap.append("No message found for ");
        hashMap.append(string2);
        return hashMap.toString();
    }

    private static HashMap<String, String> readLanguageStream(InputStream inputStream) throws IOException {
        return MessageLocalization.readLanguageStream(new InputStreamReader(inputStream, "UTF-8"));
    }

    private static HashMap<String, String> readLanguageStream(Reader reader) throws IOException {
        String string2;
        HashMap<String, String> hashMap = new HashMap<String, String>();
        reader = new BufferedReader(reader);
        while ((string2 = reader.readLine()) != null) {
            String string3;
            int n = string2.indexOf(61);
            if (n < 0 || (string3 = string2.substring(0, n).trim()).startsWith("#")) continue;
            hashMap.put(string3, string2.substring(n + 1));
        }
        return hashMap;
    }

    public static boolean setLanguage(String object, String string2) throws IOException {
        if ((object = MessageLocalization.getLanguageMessages((String)object, string2)) == null) {
            return false;
        }
        currentLanguage = object;
        return true;
    }

    public static void setMessages(Reader reader) throws IOException {
        currentLanguage = MessageLocalization.readLanguageStream(reader);
    }
}

