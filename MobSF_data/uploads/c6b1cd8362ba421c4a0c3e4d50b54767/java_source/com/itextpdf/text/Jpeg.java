/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text;

import com.itextpdf.text.BadElementException;
import com.itextpdf.text.Image;
import java.io.IOException;
import java.io.InputStream;
import java.net.URL;

public class Jpeg
extends Image {
    public static final byte[] JFIF_ID;
    public static final int M_APP0 = 224;
    public static final int M_APP2 = 226;
    public static final int M_APPD = 237;
    public static final int M_APPE = 238;
    public static final int NOPARAM_MARKER = 2;
    public static final int[] NOPARAM_MARKERS;
    public static final int NOT_A_MARKER = -1;
    public static final byte[] PS_8BIM_RESO;
    public static final int UNSUPPORTED_MARKER = 1;
    public static final int[] UNSUPPORTED_MARKERS;
    public static final int VALID_MARKER = 0;
    public static final int[] VALID_MARKERS;
    private byte[][] icc;

    static {
        VALID_MARKERS = new int[]{192, 193, 194};
        UNSUPPORTED_MARKERS = new int[]{195, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207};
        NOPARAM_MARKERS = new int[]{208, 209, 210, 211, 212, 213, 214, 215, 216, 1};
        JFIF_ID = new byte[]{74, 70, 73, 70, 0};
        PS_8BIM_RESO = new byte[]{56, 66, 73, 77, 3, -19};
    }

    Jpeg(Image image) {
        super(image);
    }

    public Jpeg(URL uRL) throws BadElementException, IOException {
        super(uRL);
        this.processParameters();
    }

    public Jpeg(byte[] arrby) throws BadElementException, IOException {
        super((URL)null);
        this.rawData = arrby;
        this.originalData = arrby;
        this.processParameters();
    }

    public Jpeg(byte[] arrby, float f, float f2) throws BadElementException, IOException {
        this(arrby);
        this.scaledWidth = f;
        this.scaledHeight = f2;
    }

    private static final int getShort(InputStream inputStream) throws IOException {
        return (inputStream.read() << 8) + inputStream.read();
    }

    private static final int marker(int n) {
        int n2;
        int n3 = 0;
        for (n2 = 0; n2 < VALID_MARKERS.length; ++n2) {
            if (n != VALID_MARKERS[n2]) continue;
            return 0;
        }
        n2 = 0;
        do {
            if (n2 >= NOPARAM_MARKERS.length) break;
            if (n == NOPARAM_MARKERS[n2]) {
                return 2;
            }
            ++n2;
        } while (true);
        for (int i = n3; i < UNSUPPORTED_MARKERS.length; ++i) {
            if (n != UNSUPPORTED_MARKERS[i]) continue;
            return 1;
        }
        return -1;
    }

    /*
     * Exception decompiling
     */
    private void processParameters() throws BadElementException, IOException {
        // This method has failed to decompile.  When submitting a bug report, please provide this stack trace, and (if you hold appropriate legal rights) the relevant class file.
        // org.benf.cfr.reader.util.ConfusedCFRException: Tried to end blocks [4[TRYBLOCK]], but top level block is 17[TRYBLOCK]
        // org.benf.cfr.reader.bytecode.analysis.opgraph.Op04StructuredStatement.processEndingBlocks(Op04StructuredStatement.java:416)
        // org.benf.cfr.reader.bytecode.analysis.opgraph.Op04StructuredStatement.buildNestedBlocks(Op04StructuredStatement.java:468)
        // org.benf.cfr.reader.bytecode.analysis.opgraph.Op03SimpleStatement.createInitialStructuredBlock(Op03SimpleStatement.java:2960)
        // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisInner(CodeAnalyser.java:818)
        // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisOrWrapFail(CodeAnalyser.java:196)
        // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysis(CodeAnalyser.java:141)
        // org.benf.cfr.reader.entities.attributes.AttributeCode.analyse(AttributeCode.java:95)
        // org.benf.cfr.reader.entities.Method.analyse(Method.java:372)
        // org.benf.cfr.reader.entities.ClassFile.analyseMid(ClassFile.java:867)
        // org.benf.cfr.reader.entities.ClassFile.analyseTop(ClassFile.java:768)
        // org.benf.cfr.reader.Main.doJar(Main.java:141)
        // org.benf.cfr.reader.Main.main(Main.java:242)
        throw new IllegalStateException("Decompilation failed");
    }
}

