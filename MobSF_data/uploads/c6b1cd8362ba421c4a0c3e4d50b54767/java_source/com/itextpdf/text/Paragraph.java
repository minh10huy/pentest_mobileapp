/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text;

import com.itextpdf.text.AccessibleElementId;
import com.itextpdf.text.Chunk;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.Image;
import com.itextpdf.text.List;
import com.itextpdf.text.ListItem;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.TabSettings;
import com.itextpdf.text.api.Indentable;
import com.itextpdf.text.api.Spaceable;
import com.itextpdf.text.pdf.PdfName;
import com.itextpdf.text.pdf.PdfObject;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.interfaces.IAccessibleElement;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

public class Paragraph
extends Phrase
implements Indentable,
Spaceable,
IAccessibleElement {
    private static final long serialVersionUID = 7852314969733375514L;
    protected HashMap<PdfName, PdfObject> accessibleAttributes = null;
    protected int alignment = -1;
    private float extraParagraphSpace = 0.0f;
    private float firstLineIndent = 0.0f;
    protected AccessibleElementId id = null;
    protected float indentationLeft;
    protected float indentationRight;
    protected boolean keeptogether = false;
    protected float paddingTop;
    protected PdfName role = PdfName.P;
    protected float spacingAfter;
    protected float spacingBefore;

    public Paragraph() {
    }

    public Paragraph(float f) {
        super(f);
    }

    public Paragraph(float f, Chunk chunk) {
        super(f, chunk);
    }

    public Paragraph(float f, String string2) {
        super(f, string2);
    }

    public Paragraph(float f, String string2, Font font) {
        super(f, string2, font);
    }

    public Paragraph(Chunk chunk) {
        super(chunk);
    }

    public Paragraph(Phrase phrase) {
        super(phrase);
        if (phrase instanceof Paragraph) {
            phrase = (Paragraph)phrase;
            this.setAlignment(phrase.alignment);
            this.setIndentationLeft(phrase.getIndentationLeft());
            this.setIndentationRight(phrase.getIndentationRight());
            this.setFirstLineIndent(phrase.getFirstLineIndent());
            this.setSpacingAfter(phrase.getSpacingAfter());
            this.setSpacingBefore(phrase.getSpacingBefore());
            this.setExtraParagraphSpace(phrase.getExtraParagraphSpace());
            this.setRole(phrase.role);
            this.id = phrase.getId();
            if (phrase.accessibleAttributes != null) {
                this.accessibleAttributes = new HashMap<PdfName, PdfObject>(phrase.accessibleAttributes);
            }
        }
    }

    public Paragraph(String string2) {
        super(string2);
    }

    public Paragraph(String string2, Font font) {
        super(string2, font);
    }

    @Override
    public boolean add(Element element) {
        if (element instanceof List) {
            element = (List)element;
            element.setIndentationLeft(element.getIndentationLeft() + this.indentationLeft);
            element.setIndentationRight(this.indentationRight);
            return super.add(element);
        }
        if (element instanceof Image) {
            super.addSpecial(element);
            return true;
        }
        if (element instanceof Paragraph) {
            super.addSpecial(element);
            return true;
        }
        return super.add(element);
    }

    public java.util.List<Element> breakUp() {
        int n;
        ArrayList<Element> arrayList = new ArrayList<Element>();
        Iterator iterator = this.iterator();
        Object object = null;
        do {
            Object object2;
            boolean bl = iterator.hasNext();
            boolean bl2 = true;
            if (!bl) break;
            Element element = (Element)iterator.next();
            if (element.type() != 14 && element.type() != 23 && element.type() != 12) {
                object2 = object;
                if (object == null) {
                    if (arrayList.size() != 0) {
                        bl2 = false;
                    }
                    object2 = this.cloneShallow(bl2);
                }
                object2.add(element);
                object = object2;
                continue;
            }
            object2 = object;
            if (object != null) {
                object2 = object;
                if (object.size() > 0) {
                    object.setSpacingAfter(0.0f);
                    arrayList.add((Element)object);
                    object2 = this.cloneShallow(false);
                }
            }
            if (arrayList.size() == 0) {
                n = element.type();
                if (n != 12) {
                    if (n != 14) {
                        if (n == 23) {
                            ((PdfPTable)element).setSpacingBefore(this.getSpacingBefore());
                        }
                    } else {
                        object = ((List)element).getFirstItem();
                        if (object != null) {
                            object.setSpacingBefore(this.getSpacingBefore());
                        }
                    }
                } else {
                    ((Paragraph)element).setSpacingBefore(this.getSpacingBefore());
                }
            }
            arrayList.add(element);
            object = object2;
        } while (true);
        if (object != null && object.size() > 0) {
            arrayList.add((Element)object);
        }
        if (arrayList.size() != 0) {
            object = arrayList.get(arrayList.size() - 1);
            n = object.type();
            if (n != 12) {
                if (n != 14) {
                    if (n != 23) {
                        return arrayList;
                    }
                    ((PdfPTable)object).setSpacingAfter(this.getSpacingAfter());
                    return arrayList;
                }
                if ((object = ((List)object).getLastItem()) != null) {
                    object.setSpacingAfter(this.getSpacingAfter());
                    return arrayList;
                }
            } else {
                ((Paragraph)object).setSpacingAfter(this.getSpacingAfter());
            }
        }
        return arrayList;
    }

    public Paragraph cloneShallow(boolean bl) {
        Paragraph paragraph = new Paragraph();
        this.populateProperties(paragraph, bl);
        return paragraph;
    }

    @Override
    public PdfObject getAccessibleAttribute(PdfName pdfName) {
        if (this.accessibleAttributes != null) {
            return this.accessibleAttributes.get(pdfName);
        }
        return null;
    }

    @Override
    public HashMap<PdfName, PdfObject> getAccessibleAttributes() {
        return this.accessibleAttributes;
    }

    public int getAlignment() {
        return this.alignment;
    }

    public float getExtraParagraphSpace() {
        return this.extraParagraphSpace;
    }

    public float getFirstLineIndent() {
        return this.firstLineIndent;
    }

    @Override
    public AccessibleElementId getId() {
        if (this.id == null) {
            this.id = new AccessibleElementId();
        }
        return this.id;
    }

    @Override
    public float getIndentationLeft() {
        return this.indentationLeft;
    }

    @Override
    public float getIndentationRight() {
        return this.indentationRight;
    }

    public boolean getKeepTogether() {
        return this.keeptogether;
    }

    @Override
    public float getPaddingTop() {
        return this.paddingTop;
    }

    @Override
    public PdfName getRole() {
        return this.role;
    }

    @Override
    public float getSpacingAfter() {
        return this.spacingAfter;
    }

    @Override
    public float getSpacingBefore() {
        return this.spacingBefore;
    }

    @Override
    public boolean isInline() {
        return false;
    }

    protected void populateProperties(Paragraph paragraph, boolean bl) {
        paragraph.setFont(this.getFont());
        paragraph.setAlignment(this.getAlignment());
        paragraph.setLeading(this.getLeading(), this.multipliedLeading);
        paragraph.setIndentationLeft(this.getIndentationLeft());
        paragraph.setIndentationRight(this.getIndentationRight());
        paragraph.setFirstLineIndent(this.getFirstLineIndent());
        paragraph.setSpacingAfter(this.getSpacingAfter());
        if (bl) {
            paragraph.setSpacingBefore(this.getSpacingBefore());
        }
        paragraph.setExtraParagraphSpace(this.getExtraParagraphSpace());
        paragraph.setRole(this.role);
        paragraph.id = this.getId();
        if (this.accessibleAttributes != null) {
            paragraph.accessibleAttributes = new HashMap<PdfName, PdfObject>(this.accessibleAttributes);
        }
        paragraph.setTabSettings(this.getTabSettings());
        paragraph.setKeepTogether(this.getKeepTogether());
    }

    @Override
    public void setAccessibleAttribute(PdfName pdfName, PdfObject pdfObject) {
        if (this.accessibleAttributes == null) {
            this.accessibleAttributes = new HashMap();
        }
        this.accessibleAttributes.put(pdfName, pdfObject);
    }

    public void setAlignment(int n) {
        this.alignment = n;
    }

    public void setExtraParagraphSpace(float f) {
        this.extraParagraphSpace = f;
    }

    public void setFirstLineIndent(float f) {
        this.firstLineIndent = f;
    }

    @Override
    public void setId(AccessibleElementId accessibleElementId) {
        this.id = accessibleElementId;
    }

    @Override
    public void setIndentationLeft(float f) {
        this.indentationLeft = f;
    }

    @Override
    public void setIndentationRight(float f) {
        this.indentationRight = f;
    }

    public void setKeepTogether(boolean bl) {
        this.keeptogether = bl;
    }

    @Override
    public void setPaddingTop(float f) {
        this.paddingTop = f;
    }

    @Override
    public void setRole(PdfName pdfName) {
        this.role = pdfName;
    }

    @Override
    public void setSpacingAfter(float f) {
        this.spacingAfter = f;
    }

    @Override
    public void setSpacingBefore(float f) {
        this.spacingBefore = f;
    }

    @Deprecated
    public float spacingAfter() {
        return this.spacingAfter;
    }

    @Deprecated
    public float spacingBefore() {
        return this.getSpacingBefore();
    }

    @Override
    public int type() {
        return 12;
    }
}

