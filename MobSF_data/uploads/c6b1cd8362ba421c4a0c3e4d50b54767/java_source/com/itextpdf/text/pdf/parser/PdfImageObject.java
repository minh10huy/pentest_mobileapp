/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf.parser;

import com.itextpdf.text.Version;
import com.itextpdf.text.error_messages.MessageLocalization;
import com.itextpdf.text.exceptions.UnsupportedPdfException;
import com.itextpdf.text.pdf.FilterHandlers;
import com.itextpdf.text.pdf.PRStream;
import com.itextpdf.text.pdf.PdfArray;
import com.itextpdf.text.pdf.PdfDictionary;
import com.itextpdf.text.pdf.PdfName;
import com.itextpdf.text.pdf.PdfNumber;
import com.itextpdf.text.pdf.PdfObject;
import com.itextpdf.text.pdf.PdfReader;
import com.itextpdf.text.pdf.PdfString;
import com.itextpdf.text.pdf.codec.PngWriter;
import com.itextpdf.text.pdf.codec.TiffWriter;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.util.HashMap;
import java.util.Map;

public class PdfImageObject {
    private int bpc;
    private PdfDictionary colorSpaceDic;
    private PdfDictionary dictionary;
    private int height;
    private byte[] icc;
    private byte[] imageBytes;
    private byte[] palette;
    private int pngBitDepth;
    private int pngColorType = -1;
    private ImageBytesType streamContentType = null;
    private int stride;
    private int width;

    public PdfImageObject(PRStream pRStream) throws IOException {
        this(pRStream, PdfReader.getStreamBytesRaw(pRStream), null);
    }

    public PdfImageObject(PRStream pRStream, PdfDictionary pdfDictionary) throws IOException {
        this(pRStream, PdfReader.getStreamBytesRaw(pRStream), pdfDictionary);
    }

    protected PdfImageObject(PdfDictionary pdfDictionary, byte[] arrby, PdfDictionary object) throws IOException {
        this.dictionary = pdfDictionary;
        this.colorSpaceDic = object;
        object = new TrackingFilter();
        HashMap<PdfName, FilterHandlers.FilterHandler> hashMap = new HashMap<PdfName, FilterHandlers.FilterHandler>(FilterHandlers.getDefaultFilterHandlers());
        hashMap.put(PdfName.JBIG2DECODE, (FilterHandlers.FilterHandler)object);
        hashMap.put(PdfName.DCTDECODE, (FilterHandlers.FilterHandler)object);
        hashMap.put(PdfName.JPXDECODE, (FilterHandlers.FilterHandler)object);
        this.imageBytes = PdfReader.decodeBytes(arrby, pdfDictionary, hashMap);
        if (object.lastFilterName != null) {
            if (PdfName.JBIG2DECODE.equals(object.lastFilterName)) {
                this.streamContentType = ImageBytesType.JBIG2;
                return;
            }
            if (PdfName.DCTDECODE.equals(object.lastFilterName)) {
                this.streamContentType = ImageBytesType.JPG;
                return;
            }
            if (PdfName.JPXDECODE.equals(object.lastFilterName)) {
                this.streamContentType = ImageBytesType.JP2;
                return;
            }
        } else {
            this.decodeImageBytes();
        }
    }

    private void decodeImageBytes() throws IOException {
        Object object;
        PdfObject pdfObject;
        Object object2;
        int n;
        Object object3;
        block15 : {
            block17 : {
                block16 : {
                    object2 = this.streamContentType;
                    n = 0;
                    if (object2 != null) {
                        throw new IllegalStateException(MessageLocalization.getComposedMessage("Decoding.can't.happen.on.this.type.of.stream.(.1.)", new Object[]{this.streamContentType}));
                    }
                    this.pngColorType = -1;
                    pdfObject = this.dictionary.getAsArray(PdfName.DECODE);
                    this.width = this.dictionary.getAsNumber(PdfName.WIDTH).intValue();
                    this.height = this.dictionary.getAsNumber(PdfName.HEIGHT).intValue();
                    this.pngBitDepth = this.bpc = this.dictionary.getAsNumber(PdfName.BITSPERCOMPONENT).intValue();
                    object2 = object = this.dictionary.getDirectObject(PdfName.COLORSPACE);
                    if (object instanceof PdfName) {
                        object2 = object;
                        if (this.colorSpaceDic != null) {
                            object3 = this.colorSpaceDic.getDirectObject((PdfName)object);
                            object2 = object;
                            if (object3 != null) {
                                object2 = object3;
                            }
                        }
                    }
                    this.palette = null;
                    this.icc = null;
                    this.stride = 0;
                    this.findColorspace((PdfObject)object2, true);
                    object = new ByteArrayOutputStream();
                    if (this.pngColorType >= 0) break block15;
                    if (this.bpc != 8) {
                        throw new UnsupportedPdfException(MessageLocalization.getComposedMessage("the.color.depth.1.is.not.supported", this.bpc));
                    }
                    if (PdfName.DEVICECMYK.equals(object2)) break block16;
                    if (!(object2 instanceof PdfArray)) break block17;
                    object3 = (PdfArray)object2;
                    pdfObject = object3.getDirectObject(0);
                    if (!PdfName.ICCBASED.equals(pdfObject)) {
                        throw new UnsupportedPdfException(MessageLocalization.getComposedMessage("the.color.space.1.is.not.supported", object2));
                    }
                    object2 = (PRStream)object3.getDirectObject(1);
                    n = object2.getAsNumber(PdfName.N).intValue();
                    if (n != 4) {
                        throw new UnsupportedPdfException(MessageLocalization.getComposedMessage("N.value.1.is.not.supported", n));
                    }
                    this.icc = PdfReader.getStreamBytes((PRStream)object2);
                }
                this.stride = this.width * 4;
                object2 = new TiffWriter();
                object2.addField(new TiffWriter.FieldShort(277, 4));
                object2.addField(new TiffWriter.FieldShort(258, new int[]{8, 8, 8, 8}));
                object2.addField(new TiffWriter.FieldShort(262, 5));
                object2.addField(new TiffWriter.FieldLong(256, this.width));
                object2.addField(new TiffWriter.FieldLong(257, this.height));
                object2.addField(new TiffWriter.FieldShort(259, 5));
                object2.addField(new TiffWriter.FieldShort(317, 2));
                object2.addField(new TiffWriter.FieldLong(278, this.height));
                object2.addField(new TiffWriter.FieldRational(282, new int[]{300, 1}));
                object2.addField(new TiffWriter.FieldRational(283, new int[]{300, 1}));
                object2.addField(new TiffWriter.FieldShort(296, 2));
                object2.addField(new TiffWriter.FieldAscii(305, Version.getInstance().getVersion()));
                object3 = new ByteArrayOutputStream();
                TiffWriter.compressLZW((OutputStream)object3, 2, this.imageBytes, this.height, 4, this.stride);
                object3 = object3.toByteArray();
                object2.addField(new TiffWriter.FieldImage((byte[])object3));
                object2.addField(new TiffWriter.FieldLong(279, ((Object)object3).length));
                if (this.icc != null) {
                    object2.addField(new TiffWriter.FieldUndefined(34675, this.icc));
                }
                object2.writeFile((OutputStream)object);
                this.streamContentType = ImageBytesType.CCITT;
                this.imageBytes = object.toByteArray();
                return;
            }
            throw new UnsupportedPdfException(MessageLocalization.getComposedMessage("the.color.space.1.is.not.supported", object2));
        }
        object2 = new PngWriter((OutputStream)object);
        if (pdfObject != null && this.pngBitDepth == 1 && pdfObject.getAsNumber(0).intValue() == 1 && pdfObject.getAsNumber(1).intValue() == 0) {
            int n2 = this.imageBytes.length;
            while (n < n2) {
                object3 = this.imageBytes;
                object3[n] = (byte)(object3[n] ^ 255);
                ++n;
            }
        }
        object2.writeHeader(this.width, this.height, this.pngBitDepth, this.pngColorType);
        if (this.icc != null) {
            object2.writeIccProfile(this.icc);
        }
        if (this.palette != null) {
            object2.writePalette(this.palette);
        }
        object2.writeData(this.imageBytes, this.stride);
        object2.writeEnd();
        this.streamContentType = ImageBytesType.PNG;
        this.imageBytes = object.toByteArray();
    }

    private void findColorspace(PdfObject pdfObject, boolean bl) throws IOException {
        if (pdfObject == null && this.bpc == 1) {
            this.stride = (this.width * this.bpc + 7) / 8;
            this.pngColorType = 0;
            return;
        }
        if (PdfName.DEVICEGRAY.equals(pdfObject)) {
            this.stride = (this.width * this.bpc + 7) / 8;
            this.pngColorType = 0;
            return;
        }
        if (PdfName.DEVICERGB.equals(pdfObject)) {
            if (this.bpc == 8 || this.bpc == 16) {
                this.stride = (this.width * this.bpc * 3 + 7) / 8;
                this.pngColorType = 2;
                return;
            }
        } else if (pdfObject instanceof PdfArray) {
            PdfObject pdfObject2 = (pdfObject = (PdfArray)pdfObject).getDirectObject(0);
            if (PdfName.CALGRAY.equals(pdfObject2)) {
                this.stride = (this.width * this.bpc + 7) / 8;
                this.pngColorType = 0;
                return;
            }
            if (PdfName.CALRGB.equals(pdfObject2)) {
                if (this.bpc == 8 || this.bpc == 16) {
                    this.stride = (this.width * this.bpc * 3 + 7) / 8;
                    this.pngColorType = 2;
                    return;
                }
            } else if (PdfName.ICCBASED.equals(pdfObject2)) {
                int n = (pdfObject = (PRStream)pdfObject.getDirectObject(1)).getAsNumber(PdfName.N).intValue();
                if (n == 1) {
                    this.stride = (this.width * this.bpc + 7) / 8;
                    this.pngColorType = 0;
                    this.icc = PdfReader.getStreamBytes((PRStream)pdfObject);
                    return;
                }
                if (n == 3) {
                    this.stride = (this.width * this.bpc * 3 + 7) / 8;
                    this.pngColorType = 2;
                    this.icc = PdfReader.getStreamBytes((PRStream)pdfObject);
                    return;
                }
            } else if (bl && PdfName.INDEXED.equals(pdfObject2)) {
                this.findColorspace(pdfObject.getDirectObject(1), false);
                if (this.pngColorType == 2) {
                    if ((pdfObject = pdfObject.getDirectObject(3)) instanceof PdfString) {
                        this.palette = ((PdfString)pdfObject).getBytes();
                    } else if (pdfObject instanceof PRStream) {
                        this.palette = PdfReader.getStreamBytes((PRStream)pdfObject);
                    }
                    this.stride = (this.width * this.bpc + 7) / 8;
                    this.pngColorType = 3;
                }
            }
        }
    }

    public PdfObject get(PdfName pdfName) {
        return this.dictionary.get(pdfName);
    }

    public PdfDictionary getDictionary() {
        return this.dictionary;
    }

    public String getFileType() {
        return this.streamContentType.getFileExtension();
    }

    public byte[] getImageAsBytes() {
        return this.imageBytes;
    }

    public ImageBytesType getImageBytesType() {
        return this.streamContentType;
    }

    public static enum ImageBytesType {
        PNG("png"),
        JPG("jpg"),
        JP2("jp2"),
        CCITT("tif"),
        JBIG2("jbig2");
        
        private final String fileExtension;

        private ImageBytesType(String string3) {
            this.fileExtension = string3;
        }

        public String getFileExtension() {
            return this.fileExtension;
        }
    }

    private static class TrackingFilter
    implements FilterHandlers.FilterHandler {
        public PdfName lastFilterName = null;

        private TrackingFilter() {
        }

        @Override
        public byte[] decode(byte[] arrby, PdfName pdfName, PdfObject pdfObject, PdfDictionary pdfDictionary) throws IOException {
            this.lastFilterName = pdfName;
            return arrby;
        }
    }

}

