/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf;

import com.itextpdf.text.BaseColor;
import com.itextpdf.text.ExceptionConverter;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.error_messages.MessageLocalization;
import com.itextpdf.text.pdf.Barcode;
import com.itextpdf.text.pdf.BaseFont;
import com.itextpdf.text.pdf.PdfContentByte;

public class BarcodeCodabar
extends Barcode {
    private static final byte[][] BARS;
    private static final String CHARS = "0123456789-$:/.+ABCD";
    private static final int START_STOP_IDX = 16;

    static {
        byte[] arrby = new byte[]{0, 0, 0, 0, 0, 1, 1};
        byte[] arrby2 = new byte[]{0, 0, 0, 1, 0, 0, 1};
        byte[] arrby3 = new byte[]{0, 0, 1, 0, 0, 1, 0};
        byte[] arrby4 = new byte[]{0, 1, 0, 0, 0, 0, 1};
        byte[] arrby5 = new byte[]{0, 1, 1, 0, 0, 0, 0};
        byte[] arrby6 = new byte[]{1, 0, 0, 1, 0, 0, 0};
        byte[] arrby7 = new byte[]{0, 0, 1, 0, 1, 0, 1};
        BARS = new byte[][]{arrby, {0, 0, 0, 0, 1, 1, 0}, arrby2, {1, 1, 0, 0, 0, 0, 0}, arrby3, {1, 0, 0, 0, 0, 1, 0}, arrby4, {0, 1, 0, 0, 1, 0, 0}, arrby5, arrby6, {0, 0, 0, 1, 1, 0, 0}, {0, 0, 1, 1, 0, 0, 0}, {1, 0, 0, 0, 1, 0, 1}, {1, 0, 1, 0, 0, 0, 1}, {1, 0, 1, 0, 1, 0, 0}, arrby7, {0, 0, 1, 1, 0, 1, 0}, {0, 1, 0, 1, 0, 0, 1}, {0, 0, 0, 1, 0, 1, 1}, {0, 0, 0, 1, 1, 1, 0}};
    }

    public BarcodeCodabar() {
        try {
            this.x = 0.8f;
            this.n = 2.0f;
            this.font = BaseFont.createFont("Helvetica", "winansi", false);
            this.baseline = this.size = 8.0f;
            this.barHeight = this.size * 3.0f;
            this.textAlignment = 1;
            this.generateChecksum = false;
            this.checksumText = false;
            this.startStopText = false;
            this.codeType = 12;
            return;
        }
        catch (Exception exception) {
            throw new ExceptionConverter(exception);
        }
    }

    public static String calculateChecksum(String string2) {
        int n;
        if (string2.length() < 2) {
            return string2;
        }
        CharSequence charSequence = string2.toUpperCase();
        int n2 = charSequence.length();
        int n3 = 0;
        for (n = 0; n < n2; ++n) {
            n3 += CHARS.indexOf(charSequence.charAt(n));
        }
        n = (n3 + 15) / 16;
        charSequence = new StringBuilder();
        charSequence.append(string2.substring(0, --n2));
        charSequence.append(CHARS.charAt(n * 16 - n3));
        charSequence.append(string2.substring(n2));
        return charSequence.toString();
    }

    public static byte[] getBarsCodabar(String string2) {
        int n;
        int n2 = (string2 = string2.toUpperCase()).length();
        if (n2 < 2) {
            throw new IllegalArgumentException(MessageLocalization.getComposedMessage("codabar.must.have.at.least.a.start.and.stop.character", new Object[0]));
        }
        if (CHARS.indexOf(string2.charAt(0)) >= 16 && CHARS.indexOf(string2.charAt(n = n2 - 1)) >= 16) {
            byte[] arrby = new byte[string2.length() * 8 - 1];
            for (int i = 0; i < n2; ++i) {
                int n3 = CHARS.indexOf(string2.charAt(i));
                if (n3 >= 16 && i > 0 && i < n) {
                    throw new IllegalArgumentException(MessageLocalization.getComposedMessage("in.codabar.start.stop.characters.are.only.allowed.at.the.extremes", new Object[0]));
                }
                if (n3 < 0) {
                    throw new IllegalArgumentException(MessageLocalization.getComposedMessage("the.character.1.is.illegal.in.codabar", string2.charAt(i)));
                }
                System.arraycopy(BARS[n3], 0, arrby, i * 8, 7);
            }
            return arrby;
        }
        throw new IllegalArgumentException(MessageLocalization.getComposedMessage("codabar.must.have.one.of.abcd.as.start.stop.character", new Object[0]));
    }

    @Override
    public Rectangle getBarcodeSize() {
        float f;
        int n;
        Object object = this.code;
        Object object2 = object;
        if (this.generateChecksum) {
            object2 = object;
            if (this.checksumText) {
                object2 = BarcodeCodabar.calculateChecksum(this.code);
            }
        }
        object = object2;
        if (!this.startStopText) {
            object = object2.substring(1, object2.length() - 1);
        }
        object2 = this.font;
        float f2 = 0.0f;
        if (object2 != null) {
            f2 = this.baseline > 0.0f ? this.baseline - this.font.getFontDescriptor(3, this.size) : - this.baseline + this.size;
            object2 = this.font;
            if (this.altText != null) {
                object = this.altText;
            }
            f = object2.getWidthPoint((String)object, this.size);
        } else {
            f = 0.0f;
        }
        object = this.code;
        if (this.generateChecksum) {
            object = BarcodeCodabar.calculateChecksum(this.code);
        }
        object = BarcodeCodabar.getBarsCodabar((String)object);
        int n2 = 0;
        for (n = 0; n < ((byte[])object).length; ++n) {
            n2 += object[n];
        }
        n = ((byte[])object).length;
        return new Rectangle(Math.max(this.x * ((float)(n - n2) + (float)n2 * this.n), f), this.barHeight + f2);
    }

    /*
     * Enabled aggressive block sorting
     */
    @Override
    public Rectangle placeBarcode(PdfContentByte pdfContentByte, BaseColor baseColor, BaseColor baseColor2) {
        int n;
        float f;
        float f2;
        float f3;
        byte[] arrby;
        int n2;
        float f4;
        String string2;
        int n3;
        float f5;
        int n4;
        block24 : {
            block21 : {
                block18 : {
                    block22 : {
                        block23 : {
                            block19 : {
                                block20 : {
                                    void var15_14;
                                    void var15_8;
                                    String string3 = string2 = this.code;
                                    if (this.generateChecksum) {
                                        String string4 = string2;
                                        if (this.checksumText) {
                                            String string5 = BarcodeCodabar.calculateChecksum(this.code);
                                        }
                                    }
                                    boolean bl = this.startStopText;
                                    n4 = 1;
                                    string2 = var15_8;
                                    if (!bl) {
                                        string2 = var15_8.substring(1, var15_8.length() - 1);
                                    }
                                    BaseFont baseFont = this.font;
                                    f4 = 0.0f;
                                    if (baseFont != null) {
                                        BaseFont baseFont2 = this.font;
                                        if (this.altText != null) {
                                            string2 = this.altText;
                                        }
                                        f = baseFont2.getWidthPoint(string2, this.size);
                                    } else {
                                        f = 0.0f;
                                    }
                                    if (this.generateChecksum) {
                                        String string6 = BarcodeCodabar.calculateChecksum(this.code);
                                    } else {
                                        String string7 = this.code;
                                    }
                                    arrby = BarcodeCodabar.getBarsCodabar((String)var15_14);
                                    n = 0;
                                    n2 = 0;
                                    for (n3 = 0; n3 < arrby.length; n2 += arrby[n3], ++n3) {
                                    }
                                    n3 = arrby.length;
                                    f3 = this.x * ((float)(n3 - n2) + (float)n2 * this.n);
                                    n2 = this.textAlignment;
                                    if (n2 == 0) break block18;
                                    if (n2 == 2) break block19;
                                    if (f <= f3) break block20;
                                    f = (f - f3) / 2.0f;
                                    break block21;
                                }
                                f = (f3 - f) / 2.0f;
                                break block22;
                            }
                            if (f <= f3) break block23;
                            f -= f3;
                            break block21;
                        }
                        f = f3 - f;
                    }
                    f2 = f;
                    f = 0.0f;
                    break block24;
                }
                f = 0.0f;
            }
            f2 = 0.0f;
        }
        if (this.font != null) {
            if (this.baseline <= 0.0f) {
                f3 = this.barHeight - this.baseline;
            } else {
                f4 = - this.font.getFontDescriptor(3, this.size);
                f5 = this.baseline;
                f3 = f4;
                f4 = f5 + f4;
            }
        } else {
            f3 = 0.0f;
        }
        f5 = f;
        n2 = n4;
        n3 = n;
        if (baseColor != null) {
            pdfContentByte.setColorFill(baseColor);
            n3 = n;
            n2 = n4;
            f5 = f;
        }
        while (n3 < arrby.length) {
            f = arrby[n3] == 0 ? this.x : this.x * this.n;
            if (n2 != 0) {
                pdfContentByte.rectangle(f5, f4, f - this.inkSpreading, this.barHeight);
            }
            n2 ^= 1;
            f5 += f;
            ++n3;
        }
        pdfContentByte.fill();
        if (this.font != null) {
            if (baseColor2 != null) {
                pdfContentByte.setColorFill(baseColor2);
            }
            pdfContentByte.beginText();
            pdfContentByte.setFontAndSize(this.font, this.size);
            pdfContentByte.setTextMatrix(f2, f3);
            pdfContentByte.showText(string2);
            pdfContentByte.endText();
        }
        return this.getBarcodeSize();
    }
}

