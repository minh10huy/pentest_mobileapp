/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf.security;

import com.itextpdf.text.error_messages.MessageLocalization;
import com.itextpdf.text.log.Logger;
import com.itextpdf.text.log.LoggerFactory;
import com.itextpdf.text.pdf.security.CertificateUtil;
import com.itextpdf.text.pdf.security.CrlClient;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import java.security.Principal;
import java.security.cert.Certificate;
import java.security.cert.CertificateParsingException;
import java.security.cert.X509Certificate;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;

public class CrlClientOnline
implements CrlClient {
    private static final Logger LOGGER = LoggerFactory.getLogger(CrlClientOnline.class);
    protected List<URL> urls = new ArrayList<URL>();

    public CrlClientOnline() {
    }

    public /* varargs */ CrlClientOnline(String ... arrstring) {
        int n = arrstring.length;
        for (int i = 0; i < n; ++i) {
            this.addUrl(arrstring[i]);
        }
    }

    public /* varargs */ CrlClientOnline(URL ... object) {
        object = this.urls.iterator();
        while (object.hasNext()) {
            this.addUrl((URL)object.next());
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public CrlClientOnline(Certificate[] arrcertificate) {
        int n = 0;
        while (n < arrcertificate.length) {
            block3 : {
                X509Certificate x509Certificate = (X509Certificate)arrcertificate[n];
                Logger logger = LOGGER;
                StringBuilder stringBuilder = new StringBuilder();
                stringBuilder.append("Checking certificate: ");
                stringBuilder.append(x509Certificate.getSubjectDN());
                logger.info(stringBuilder.toString());
                try {
                    this.addUrl(CertificateUtil.getCRLURL(x509Certificate));
                    break block3;
                }
                catch (CertificateParsingException certificateParsingException) {}
                LOGGER.info("Skipped CRL url (certificate could not be parsed)");
            }
            ++n;
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    protected void addUrl(String string2) {
        try {
            this.addUrl(new URL(string2));
            return;
        }
        catch (MalformedURLException malformedURLException) {}
        Logger logger = LOGGER;
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("Skipped CRL url (malformed): ");
        stringBuilder.append(string2);
        logger.info(stringBuilder.toString());
    }

    protected void addUrl(URL uRL) {
        if (this.urls.contains(uRL)) {
            Logger logger = LOGGER;
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("Skipped CRL url (duplicate): ");
            stringBuilder.append(uRL);
            logger.info(stringBuilder.toString());
            return;
        }
        this.urls.add(uRL);
        Logger logger = LOGGER;
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("Added CRL url: ");
        stringBuilder.append(uRL);
        logger.info(stringBuilder.toString());
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    @Override
    public Collection<byte[]> getEncoded(X509Certificate var1_1, String var2_2) {
        block10 : {
            if (var1_1 == null) {
                return null;
            }
            var5_3 = new ArrayList<URL>(this.urls);
            if (var5_3.size() != 0) break block10;
            var4_5 = CrlClientOnline.LOGGER;
            var6_13 = new StringBuilder();
            var6_13.append("Looking for CRL for certificate ");
            var6_13.append(var1_1.getSubjectDN());
            var4_5.info(var6_13.toString());
            var4_6 = var2_2;
            if (var2_2 != null) ** GOTO lbl14
            try {
                var4_7 = CertificateUtil.getCRLURL(var1_1);
lbl14: // 2 sources:
                if (var4_8 == null) {
                    throw new NullPointerException();
                }
                var5_3.add(new URL((String)var4_8));
                var1_1 = CrlClientOnline.LOGGER;
                var2_2 = new StringBuilder();
                var2_2.append("Found CRL url: ");
                var2_2.append((String)var4_8);
                var1_1.info(var2_2.toString());
                break block10;
            }
            catch (Exception var4_9) {}
            var1_1 = CrlClientOnline.LOGGER;
            var2_2 = new StringBuilder();
            var2_2.append("Skipped CRL url: ");
            var2_2.append(var4_9.getMessage());
            var1_1.info(var2_2.toString());
        }
        var1_1 = new ArrayList<byte[]>();
        var2_2 = var5_3.iterator();
        block4 : while (var2_2.hasNext() != false) {
            var4_12 = var2_2.next();
            try {
                var5_3 = CrlClientOnline.LOGGER;
                var6_13 = new StringBuilder();
                var6_13.append("Checking CRL: ");
                var6_13.append(var4_12);
                var5_3.info(var6_13.toString());
                var5_3 = (HttpURLConnection)var4_12.openConnection();
                if (var5_3.getResponseCode() / 100 != 2) {
                    throw new IOException(MessageLocalization.getComposedMessage("invalid.http.response.1", var5_3.getResponseCode()));
                }
                var5_3 = (InputStream)var5_3.getContent();
                var6_13 = new byte[1024];
                var7_15 = new ByteArrayOutputStream();
                do {
                    if ((var3_14 = var5_3.read((byte[])var6_13, 0, ((byte[])var6_13).length)) <= 0) {
                        var5_3.close();
                        var1_1.add(var7_15.toByteArray());
                        var5_3 = CrlClientOnline.LOGGER;
                        var6_13 = new StringBuilder();
                        var6_13.append("Added CRL found at: ");
                        var6_13.append(var4_12);
                        var5_3.info(var6_13.toString());
                        continue block4;
                    }
                    var7_15.write((byte[])var6_13, 0, var3_14);
                } while (true);
            }
            catch (Exception var5_4) {
                var6_13 = CrlClientOnline.LOGGER;
                var7_15 = new StringBuilder();
                var7_15.append("Skipped CRL: ");
                var7_15.append(var5_4.getMessage());
                var7_15.append(" for ");
                var7_15.append(var4_12);
                var6_13.info(var7_15.toString());
            }
        }
        return var1_1;
    }
}

