/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf.qrcode;

import com.itextpdf.text.pdf.qrcode.GF256;
import com.itextpdf.text.pdf.qrcode.GF256Poly;
import java.util.ArrayList;

public final class ReedSolomonEncoder {
    private final ArrayList<GF256Poly> cachedGenerators;
    private final GF256 field;

    public ReedSolomonEncoder(GF256 gF256) {
        if (!GF256.QR_CODE_FIELD.equals(gF256)) {
            throw new IllegalArgumentException("Only QR Code is supported at this time");
        }
        this.field = gF256;
        this.cachedGenerators = new ArrayList();
        this.cachedGenerators.add(new GF256Poly(gF256, new int[]{1}));
    }

    private GF256Poly buildGenerator(int n) {
        if (n >= this.cachedGenerators.size()) {
            GF256Poly gF256Poly = this.cachedGenerators.get(this.cachedGenerators.size() - 1);
            for (int i = this.cachedGenerators.size(); i <= n; ++i) {
                gF256Poly = gF256Poly.multiply(new GF256Poly(this.field, new int[]{1, this.field.exp(i - 1)}));
                this.cachedGenerators.add(gF256Poly);
            }
        }
        return this.cachedGenerators.get(n);
    }

    public void encode(int[] arrn, int n) {
        if (n == 0) {
            throw new IllegalArgumentException("No error correction bytes");
        }
        int n2 = arrn.length - n;
        if (n2 <= 0) {
            throw new IllegalArgumentException("No data bytes provided");
        }
        int[] arrn2 = this.buildGenerator(n);
        int[] arrn3 = new int[n2];
        System.arraycopy(arrn, 0, arrn3, 0, n2);
        arrn2 = new GF256Poly(this.field, arrn3).multiplyByMonomial(n, 1).divide((GF256Poly)arrn2)[1].getCoefficients();
        int n3 = n - arrn2.length;
        for (n = 0; n < n3; ++n) {
            arrn[n2 + n] = 0;
        }
        System.arraycopy(arrn2, 0, arrn, n2 + n3, arrn2.length);
    }
}

