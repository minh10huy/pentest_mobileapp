/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf.security;

import com.itextpdf.text.pdf.security.DigestAlgorithms;
import com.itextpdf.text.pdf.security.ExternalSignature;
import java.security.GeneralSecurityException;
import java.security.PrivateKey;
import java.security.Signature;

public class PrivateKeySignature
implements ExternalSignature {
    private String encryptionAlgorithm;
    private String hashAlgorithm;
    private PrivateKey pk;
    private String provider;

    public PrivateKeySignature(PrivateKey privateKey, String string2, String string3) {
        this.pk = privateKey;
        this.provider = string3;
        this.hashAlgorithm = DigestAlgorithms.getDigest(DigestAlgorithms.getAllowedDigests(string2));
        this.encryptionAlgorithm = privateKey.getAlgorithm();
        if (this.encryptionAlgorithm.startsWith("EC")) {
            this.encryptionAlgorithm = "ECDSA";
        }
    }

    @Override
    public String getEncryptionAlgorithm() {
        return this.encryptionAlgorithm;
    }

    @Override
    public String getHashAlgorithm() {
        return this.hashAlgorithm;
    }

    @Override
    public byte[] sign(byte[] arrby) throws GeneralSecurityException {
        Object object = new StringBuilder();
        object.append(this.hashAlgorithm);
        object.append("with");
        object.append(this.encryptionAlgorithm);
        object = object.toString();
        object = this.provider == null ? Signature.getInstance((String)object) : Signature.getInstance((String)object, this.provider);
        object.initSign(this.pk);
        object.update(arrby);
        return object.sign();
    }
}

