/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf;

import com.itextpdf.text.pdf.ByteBuffer;
import com.itextpdf.text.pdf.PdfEncodings;
import com.itextpdf.text.pdf.PdfEncryption;
import com.itextpdf.text.pdf.PdfObject;
import com.itextpdf.text.pdf.PdfReader;
import com.itextpdf.text.pdf.PdfWriter;
import com.itextpdf.text.pdf.StringUtils;
import java.io.IOException;
import java.io.OutputStream;

public class PdfString
extends PdfObject {
    protected String encoding = "PDF";
    protected boolean hexWriting = false;
    protected int objGen = 0;
    protected int objNum = 0;
    protected String originalValue = null;
    protected String value = "";

    public PdfString() {
        super(3);
    }

    public PdfString(String string2) {
        super(3);
        this.value = string2;
    }

    public PdfString(String string2, String string3) {
        super(3);
        this.value = string2;
        this.encoding = string3;
    }

    public PdfString(byte[] arrby) {
        super(3);
        this.value = PdfEncodings.convertToString(arrby, null);
        this.encoding = "";
    }

    void decrypt(PdfReader object) {
        if ((object = object.getDecrypt()) != null) {
            this.originalValue = this.value;
            object.setHashKey(this.objNum, this.objGen);
            this.bytes = PdfEncodings.convertToBytes(this.value, null);
            this.bytes = object.decryptByteArray(this.bytes);
            this.value = PdfEncodings.convertToString(this.bytes, null);
        }
    }

    @Override
    public byte[] getBytes() {
        if (this.bytes == null) {
            this.bytes = this.encoding != null && this.encoding.equals("UnicodeBig") && PdfEncodings.isPdfDocEncoding(this.value) ? PdfEncodings.convertToBytes(this.value, "PDF") : PdfEncodings.convertToBytes(this.value, this.encoding);
        }
        return this.bytes;
    }

    public String getEncoding() {
        return this.encoding;
    }

    public byte[] getOriginalBytes() {
        if (this.originalValue == null) {
            return this.getBytes();
        }
        return PdfEncodings.convertToBytes(this.originalValue, null);
    }

    public boolean isHexWriting() {
        return this.hexWriting;
    }

    public PdfString setHexWriting(boolean bl) {
        this.hexWriting = bl;
        return this;
    }

    void setObjNum(int n, int n2) {
        this.objNum = n;
        this.objGen = n2;
    }

    @Override
    public void toPdf(PdfWriter arrby, OutputStream outputStream) throws IOException {
        PdfWriter.checkPdfIsoConformance((PdfWriter)arrby, 11, this);
        byte[] arrby2 = this.getBytes();
        Object object = arrby != null ? arrby.getEncryption() : null;
        arrby = arrby2;
        if (object != null) {
            arrby = arrby2;
            if (!object.isEmbeddedFilesOnly()) {
                arrby = object.encryptByteArray(arrby2);
            }
        }
        if (this.hexWriting) {
            object = new ByteBuffer();
            object.append('<');
            int n = arrby.length;
            for (int i = 0; i < n; ++i) {
                object.appendHex(arrby[i]);
            }
            object.append('>');
            outputStream.write(object.toByteArray());
            return;
        }
        outputStream.write(StringUtils.escapeString(arrby));
    }

    @Override
    public String toString() {
        return this.value;
    }

    public String toUnicodeString() {
        if (this.encoding != null && this.encoding.length() != 0) {
            return this.value;
        }
        this.getBytes();
        if (this.bytes.length >= 2 && this.bytes[0] == -2 && this.bytes[1] == -1) {
            return PdfEncodings.convertToString(this.bytes, "UnicodeBig");
        }
        return PdfEncodings.convertToString(this.bytes, "PDF");
    }
}

