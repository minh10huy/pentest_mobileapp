/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf;

import com.itextpdf.text.DocumentException;
import com.itextpdf.text.error_messages.MessageLocalization;
import com.itextpdf.text.pdf.BaseFont;
import com.itextpdf.text.pdf.GlyphList;
import com.itextpdf.text.pdf.IntHashtable;
import com.itextpdf.text.pdf.PageResources;
import com.itextpdf.text.pdf.PdfArray;
import com.itextpdf.text.pdf.PdfContentByte;
import com.itextpdf.text.pdf.PdfDictionary;
import com.itextpdf.text.pdf.PdfIndirectObject;
import com.itextpdf.text.pdf.PdfIndirectReference;
import com.itextpdf.text.pdf.PdfName;
import com.itextpdf.text.pdf.PdfNumber;
import com.itextpdf.text.pdf.PdfObject;
import com.itextpdf.text.pdf.PdfRectangle;
import com.itextpdf.text.pdf.PdfStream;
import com.itextpdf.text.pdf.PdfWriter;
import com.itextpdf.text.pdf.Type3Glyph;
import java.io.IOException;
import java.util.HashMap;

public class Type3Font
extends BaseFont {
    private HashMap<Integer, Type3Glyph> char2glyph = new HashMap();
    private boolean colorized;
    private float llx = Float.NaN;
    private float lly;
    private PageResources pageResources = new PageResources();
    private float urx;
    private float ury;
    private boolean[] usedSlot;
    private IntHashtable widths3 = new IntHashtable();
    private PdfWriter writer;

    public Type3Font(PdfWriter pdfWriter, boolean bl) {
        this.writer = pdfWriter;
        this.colorized = bl;
        this.fontType = 5;
        this.usedSlot = new boolean[256];
    }

    public Type3Font(PdfWriter pdfWriter, char[] arrc, boolean bl) {
        this(pdfWriter, bl);
    }

    @Override
    public boolean charExists(int n) {
        if (n > 0 && n < 256) {
            return this.usedSlot[n];
        }
        return false;
    }

    @Override
    byte[] convertToBytes(int n) {
        if (this.charExists(n)) {
            return new byte[]{(byte)n};
        }
        return new byte[0];
    }

    @Override
    public byte[] convertToBytes(String arrby) {
        char[] arrc = arrby.toCharArray();
        arrby = new byte[arrc.length];
        int n = 0;
        for (int i = 0; i < arrc.length; ++i) {
            char c = arrc[i];
            int n2 = n;
            if (this.charExists(c)) {
                arrby[n] = (byte)c;
                n2 = n + 1;
            }
            n = n2;
        }
        if (arrby.length == n) {
            return arrby;
        }
        arrc = new byte[n];
        System.arraycopy(arrby, 0, arrc, 0, n);
        return arrc;
    }

    public PdfContentByte defineGlyph(char c, float f, float f2, float f3, float f4, float f5) {
        if (c != '\u0000' && c <= '\u00ff') {
            this.usedSlot[c] = true;
            Integer n = c;
            Type3Glyph type3Glyph = this.char2glyph.get(n);
            if (type3Glyph != null) {
                return type3Glyph;
            }
            this.widths3.put(c, (int)f);
            if (!this.colorized) {
                if (Float.isNaN(this.llx)) {
                    this.llx = f2;
                    this.lly = f3;
                    this.urx = f4;
                    this.ury = f5;
                } else {
                    this.llx = Math.min(this.llx, f2);
                    this.lly = Math.min(this.lly, f3);
                    this.urx = Math.max(this.urx, f4);
                    this.ury = Math.max(this.ury, f5);
                }
            }
            type3Glyph = new Type3Glyph(this.writer, this.pageResources, f, f2, f3, f4, f5, this.colorized);
            this.char2glyph.put(n, type3Glyph);
            return type3Glyph;
        }
        throw new IllegalArgumentException(MessageLocalization.getComposedMessage("the.char.1.doesn.t.belong.in.this.type3.font", c));
    }

    @Override
    public String[][] getAllNameEntries() {
        return new String[][]{{"4", "", "", "", ""}};
    }

    @Override
    public int[] getCharBBox(int n) {
        return null;
    }

    @Override
    public String[][] getFamilyFontName() {
        return this.getFullFontName();
    }

    @Override
    public float getFontDescriptor(int n, float f) {
        return 0.0f;
    }

    @Override
    public String[][] getFullFontName() {
        return new String[][]{{"", "", "", ""}};
    }

    @Override
    public PdfStream getFullFontStream() {
        return null;
    }

    @Override
    public int getKerning(int n, int n2) {
        return 0;
    }

    @Override
    public String getPostscriptFontName() {
        return "";
    }

    @Override
    protected int[] getRawCharBBox(int n, String string2) {
        return null;
    }

    @Override
    int getRawWidth(int n, String string2) {
        return 0;
    }

    @Override
    public int getWidth(int n) {
        if (!this.widths3.containsKey(n)) {
            throw new IllegalArgumentException(MessageLocalization.getComposedMessage("the.char.1.is.not.defined.in.a.type3.font", n));
        }
        return this.widths3.get(n);
    }

    @Override
    public int getWidth(String arrc) {
        arrc = arrc.toCharArray();
        int n = 0;
        for (int i = 0; i < arrc.length; ++i) {
            n += this.getWidth(arrc[i]);
        }
        return n;
    }

    @Override
    public boolean hasKernPairs() {
        return false;
    }

    @Override
    public boolean setCharAdvance(int n, int n2) {
        return false;
    }

    @Override
    public boolean setKerning(int n, int n2, int n3) {
        return false;
    }

    @Override
    public void setPostscriptFontName(String string2) {
    }

    @Override
    void writeFont(PdfWriter pdfWriter, PdfIndirectReference pdfIndirectReference, Object[] object) throws DocumentException, IOException {
        int n;
        Object object2;
        int n2;
        int n3;
        object = this.writer;
        int n4 = 0;
        if (object != pdfWriter) {
            throw new IllegalArgumentException(MessageLocalization.getComposedMessage("type3.font.used.with.the.wrong.pdfwriter", new Object[0]));
        }
        for (n3 = 0; n3 < this.usedSlot.length && !this.usedSlot[n3]; ++n3) {
        }
        if (n3 == this.usedSlot.length) {
            throw new DocumentException(MessageLocalization.getComposedMessage("no.glyphs.defined.for.type3.font", new Object[0]));
        }
        for (n2 = this.usedSlot.length - 1; n2 >= n3 && !this.usedSlot[n2]; --n2) {
        }
        int n5 = n2 - n3 + 1;
        int[] arrn = new int[n5];
        int[] arrn2 = new int[n5];
        int n6 = n3;
        int n7 = 0;
        n5 = 0;
        while (n6 <= n2) {
            n = n7;
            if (this.usedSlot[n6]) {
                arrn2[n7] = n6;
                arrn[n5] = this.widths3.get(n6);
                n = n7 + 1;
            }
            ++n6;
            ++n5;
            n7 = n;
        }
        PdfArray pdfArray = new PdfArray();
        PdfDictionary pdfDictionary = new PdfDictionary();
        n5 = -1;
        for (n6 = n4; n6 < n7; ++n6) {
            n4 = arrn2[n6];
            n = n5;
            if (n4 > n5) {
                pdfArray.add(new PdfNumber(n4));
                n = n4;
            }
            n5 = n + 1;
            n = arrn2[n6];
            object = object2 = GlyphList.unicodeToName(n);
            if (object2 == null) {
                object = new StringBuilder();
                object.append("a");
                object.append(n);
                object = object.toString();
            }
            object = new PdfName((String)object);
            pdfArray.add((PdfObject)object);
            object2 = new PdfStream(this.char2glyph.get(n).toPdf(null));
            object2.flateCompress(this.compressionLevel);
            pdfDictionary.put((PdfName)object, pdfWriter.addToBody((PdfObject)object2).getIndirectReference());
        }
        object = new PdfDictionary(PdfName.FONT);
        object.put(PdfName.SUBTYPE, PdfName.TYPE3);
        if (this.colorized) {
            object.put(PdfName.FONTBBOX, new PdfRectangle(0.0f, 0.0f, 0.0f, 0.0f));
        } else {
            object.put(PdfName.FONTBBOX, new PdfRectangle(this.llx, this.lly, this.urx, this.ury));
        }
        object.put(PdfName.FONTMATRIX, new PdfArray(new float[]{0.001f, 0.0f, 0.0f, 0.001f, 0.0f, 0.0f}));
        object.put(PdfName.CHARPROCS, pdfWriter.addToBody(pdfDictionary).getIndirectReference());
        object2 = new PdfDictionary();
        object2.put(PdfName.DIFFERENCES, pdfArray);
        object.put(PdfName.ENCODING, pdfWriter.addToBody((PdfObject)object2).getIndirectReference());
        object.put(PdfName.FIRSTCHAR, new PdfNumber(n3));
        object.put(PdfName.LASTCHAR, new PdfNumber(n2));
        object.put(PdfName.WIDTHS, pdfWriter.addToBody(new PdfArray(arrn)).getIndirectReference());
        if (this.pageResources.hasResources()) {
            object.put(PdfName.RESOURCES, pdfWriter.addToBody(this.pageResources.getResources()).getIndirectReference());
        }
        pdfWriter.addToBody((PdfObject)object, pdfIndirectReference);
    }
}

