/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf.qrcode;

public final class BitArray {
    public int[] bits;
    public final int size;

    public BitArray(int n) {
        if (n < 1) {
            throw new IllegalArgumentException("size must be at least 1");
        }
        this.size = n;
        this.bits = BitArray.makeArray(n);
    }

    private static int[] makeArray(int n) {
        int n2;
        int n3 = n2 = n >> 5;
        if ((n & 31) != 0) {
            n3 = n2 + 1;
        }
        return new int[n3];
    }

    public void clear() {
        int n = this.bits.length;
        for (int i = 0; i < n; ++i) {
            this.bits[i] = 0;
        }
    }

    public void flip(int n) {
        int[] arrn = this.bits;
        int n2 = n >> 5;
        arrn[n2] = 1 << (n & 31) ^ arrn[n2];
    }

    public boolean get(int n) {
        if ((1 << (n & 31) & this.bits[n >> 5]) != 0) {
            return true;
        }
        return false;
    }

    public int[] getBitArray() {
        return this.bits;
    }

    public int getSize() {
        return this.size;
    }

    public boolean isRange(int n, int n2, boolean bl) {
        if (n2 < n) {
            throw new IllegalArgumentException();
        }
        if (n2 == n) {
            return true;
        }
        int n3 = n2 - 1;
        int n4 = n >> 5;
        int n5 = n3 >> 5;
        for (int i = n4; i <= n5; ++i) {
            int n6;
            n2 = i > n4 ? 0 : n & 31;
            int n7 = i < n5 ? 31 : n3 & 31;
            if (n2 == 0 && n7 == 31) {
                n2 = -1;
            } else {
                n6 = 0;
                int n8 = n2;
                do {
                    n2 = n6;
                    if (n8 > n7) break;
                    n6 |= 1 << n8;
                    ++n8;
                } while (true);
            }
            n7 = this.bits[i];
            n6 = bl ? n2 : 0;
            if ((n7 & n2) == n6) continue;
            return false;
        }
        return true;
    }

    public void reverse() {
        int[] arrn = new int[this.bits.length];
        int n = this.size;
        for (int i = 0; i < n; ++i) {
            if (!this.get(n - i - 1)) continue;
            int n2 = i >> 5;
            arrn[n2] = 1 << (i & 31) | arrn[n2];
        }
        this.bits = arrn;
    }

    public void set(int n) {
        int[] arrn = this.bits;
        int n2 = n >> 5;
        arrn[n2] = 1 << (n & 31) | arrn[n2];
    }

    public void setBulk(int n, int n2) {
        this.bits[n >> 5] = n2;
    }

    public String toString() {
        StringBuffer stringBuffer = new StringBuffer(this.size);
        for (int i = 0; i < this.size; ++i) {
            if ((i & 7) == 0) {
                stringBuffer.append(' ');
            }
            char c = this.get(i) ? (char)'X' : '.';
            stringBuffer.append(c);
        }
        return stringBuffer.toString();
    }
}

