/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf.codec.wmf;

import com.itextpdf.text.BaseColor;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Image;
import com.itextpdf.text.error_messages.MessageLocalization;
import com.itextpdf.text.pdf.BaseFont;
import com.itextpdf.text.pdf.PdfContentByte;
import com.itextpdf.text.pdf.codec.wmf.InputMeta;
import com.itextpdf.text.pdf.codec.wmf.MetaBrush;
import com.itextpdf.text.pdf.codec.wmf.MetaFont;
import com.itextpdf.text.pdf.codec.wmf.MetaPen;
import com.itextpdf.text.pdf.codec.wmf.MetaState;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.URL;

public class MetaDo {
    public static final int META_ANIMATEPALETTE = 1078;
    public static final int META_ARC = 2071;
    public static final int META_BITBLT = 2338;
    public static final int META_CHORD = 2096;
    public static final int META_CREATEBRUSHINDIRECT = 764;
    public static final int META_CREATEFONTINDIRECT = 763;
    public static final int META_CREATEPALETTE = 247;
    public static final int META_CREATEPATTERNBRUSH = 505;
    public static final int META_CREATEPENINDIRECT = 762;
    public static final int META_CREATEREGION = 1791;
    public static final int META_DELETEOBJECT = 496;
    public static final int META_DIBBITBLT = 2368;
    public static final int META_DIBCREATEPATTERNBRUSH = 322;
    public static final int META_DIBSTRETCHBLT = 2881;
    public static final int META_ELLIPSE = 1048;
    public static final int META_ESCAPE = 1574;
    public static final int META_EXCLUDECLIPRECT = 1045;
    public static final int META_EXTFLOODFILL = 1352;
    public static final int META_EXTTEXTOUT = 2610;
    public static final int META_FILLREGION = 552;
    public static final int META_FLOODFILL = 1049;
    public static final int META_FRAMEREGION = 1065;
    public static final int META_INTERSECTCLIPRECT = 1046;
    public static final int META_INVERTREGION = 298;
    public static final int META_LINETO = 531;
    public static final int META_MOVETO = 532;
    public static final int META_OFFSETCLIPRGN = 544;
    public static final int META_OFFSETVIEWPORTORG = 529;
    public static final int META_OFFSETWINDOWORG = 527;
    public static final int META_PAINTREGION = 299;
    public static final int META_PATBLT = 1565;
    public static final int META_PIE = 2074;
    public static final int META_POLYGON = 804;
    public static final int META_POLYLINE = 805;
    public static final int META_POLYPOLYGON = 1336;
    public static final int META_REALIZEPALETTE = 53;
    public static final int META_RECTANGLE = 1051;
    public static final int META_RESIZEPALETTE = 313;
    public static final int META_RESTOREDC = 295;
    public static final int META_ROUNDRECT = 1564;
    public static final int META_SAVEDC = 30;
    public static final int META_SCALEVIEWPORTEXT = 1042;
    public static final int META_SCALEWINDOWEXT = 1040;
    public static final int META_SELECTCLIPREGION = 300;
    public static final int META_SELECTOBJECT = 301;
    public static final int META_SELECTPALETTE = 564;
    public static final int META_SETBKCOLOR = 513;
    public static final int META_SETBKMODE = 258;
    public static final int META_SETDIBTODEV = 3379;
    public static final int META_SETMAPMODE = 259;
    public static final int META_SETMAPPERFLAGS = 561;
    public static final int META_SETPALENTRIES = 55;
    public static final int META_SETPIXEL = 1055;
    public static final int META_SETPOLYFILLMODE = 262;
    public static final int META_SETRELABS = 261;
    public static final int META_SETROP2 = 260;
    public static final int META_SETSTRETCHBLTMODE = 263;
    public static final int META_SETTEXTALIGN = 302;
    public static final int META_SETTEXTCHAREXTRA = 264;
    public static final int META_SETTEXTCOLOR = 521;
    public static final int META_SETTEXTJUSTIFICATION = 522;
    public static final int META_SETVIEWPORTEXT = 526;
    public static final int META_SETVIEWPORTORG = 525;
    public static final int META_SETWINDOWEXT = 524;
    public static final int META_SETWINDOWORG = 523;
    public static final int META_STRETCHBLT = 2851;
    public static final int META_STRETCHDIB = 3907;
    public static final int META_TEXTOUT = 1313;
    int bottom;
    public PdfContentByte cb;
    public InputMeta in;
    int inch;
    int left;
    int right;
    MetaState state = new MetaState();
    int top;

    public MetaDo(InputStream inputStream, PdfContentByte pdfContentByte) {
        this.cb = pdfContentByte;
        this.in = new InputMeta(inputStream);
    }

    static double getArc(double d, double d2, double d3, double d4) {
        d = d2 = Math.atan2(d4 - d2, d3 - d);
        if (d2 < 0.0) {
            d = d2 + 6.283185307179586;
        }
        return (float)(d / 3.141592653589793 * 180.0);
    }

    static float getArc(float f, float f2, float f3, float f4) {
        return (float)MetaDo.getArc((double)f, (double)f2, (double)f3, (double)f4);
    }

    public static byte[] wrapBMP(Image image) throws IOException {
        Object object;
        ByteArrayOutputStream byteArrayOutputStream;
        int n;
        if (image.getOriginalType() != 4) {
            throw new IOException(MessageLocalization.getComposedMessage("only.bmp.can.be.wrapped.in.wmf", new Object[0]));
        }
        if (image.getOriginalData() == null) {
            object = image.getUrl().openStream();
            byteArrayOutputStream = new ByteArrayOutputStream();
            while ((n = object.read()) != -1) {
                byteArrayOutputStream.write(n);
            }
            object.close();
            object = byteArrayOutputStream.toByteArray();
        } else {
            object = image.getOriginalData();
        }
        n = ((byte[])object).length - 14 + 1 >>> 1;
        byteArrayOutputStream = new ByteArrayOutputStream();
        MetaDo.writeWord(byteArrayOutputStream, 1);
        MetaDo.writeWord(byteArrayOutputStream, 9);
        MetaDo.writeWord(byteArrayOutputStream, 768);
        MetaDo.writeDWord(byteArrayOutputStream, n + 36 + 3);
        MetaDo.writeWord(byteArrayOutputStream, 1);
        MetaDo.writeDWord(byteArrayOutputStream, n + 14);
        MetaDo.writeWord(byteArrayOutputStream, 0);
        MetaDo.writeDWord(byteArrayOutputStream, 4);
        MetaDo.writeWord(byteArrayOutputStream, 259);
        MetaDo.writeWord(byteArrayOutputStream, 8);
        MetaDo.writeDWord(byteArrayOutputStream, 5);
        MetaDo.writeWord(byteArrayOutputStream, 523);
        MetaDo.writeWord(byteArrayOutputStream, 0);
        MetaDo.writeWord(byteArrayOutputStream, 0);
        MetaDo.writeDWord(byteArrayOutputStream, 5);
        MetaDo.writeWord(byteArrayOutputStream, 524);
        MetaDo.writeWord(byteArrayOutputStream, (int)image.getHeight());
        MetaDo.writeWord(byteArrayOutputStream, (int)image.getWidth());
        MetaDo.writeDWord(byteArrayOutputStream, n + 13);
        MetaDo.writeWord(byteArrayOutputStream, 2881);
        MetaDo.writeDWord(byteArrayOutputStream, 13369376);
        MetaDo.writeWord(byteArrayOutputStream, (int)image.getHeight());
        MetaDo.writeWord(byteArrayOutputStream, (int)image.getWidth());
        MetaDo.writeWord(byteArrayOutputStream, 0);
        MetaDo.writeWord(byteArrayOutputStream, 0);
        MetaDo.writeWord(byteArrayOutputStream, (int)image.getHeight());
        MetaDo.writeWord(byteArrayOutputStream, (int)image.getWidth());
        MetaDo.writeWord(byteArrayOutputStream, 0);
        MetaDo.writeWord(byteArrayOutputStream, 0);
        byteArrayOutputStream.write((byte[])object, 14, ((Object)object).length - 14);
        if ((((Object)object).length & 1) == 1) {
            byteArrayOutputStream.write(0);
        }
        MetaDo.writeDWord(byteArrayOutputStream, 3);
        MetaDo.writeWord(byteArrayOutputStream, 0);
        byteArrayOutputStream.close();
        return byteArrayOutputStream.toByteArray();
    }

    public static void writeDWord(OutputStream outputStream, int n) throws IOException {
        MetaDo.writeWord(outputStream, n & 65535);
        MetaDo.writeWord(outputStream, n >>> 16 & 65535);
    }

    public static void writeWord(OutputStream outputStream, int n) throws IOException {
        outputStream.write(n & 255);
        outputStream.write(n >>> 8 & 255);
    }

    public boolean isNullStrokeFill(boolean bl) {
        MetaPen metaPen = this.state.getCurrentPen();
        MetaBrush metaBrush = this.state.getCurrentBrush();
        int n = metaPen.getStyle();
        boolean bl2 = false;
        n = n == 5 ? 1 : 0;
        int n2 = metaBrush.getStyle();
        n2 = n2 != 0 && (n2 != 2 || this.state.getBackgroundMode() != 2) ? 0 : 1;
        boolean bl3 = bl2;
        if (n != 0) {
            bl3 = bl2;
            if (n2 == 0) {
                bl3 = true;
            }
        }
        if (n == 0) {
            if (bl) {
                this.state.setLineJoinRectangle(this.cb);
                return bl3;
            }
            this.state.setLineJoinPolygon(this.cb);
        }
        return bl3;
    }

    public void outputText(int n, int n2, int n3, int n4, int n5, int n6, int n7, String string2) {
        BaseColor baseColor;
        MetaFont metaFont = this.state.getCurrentFont();
        float f = this.state.transformX(n);
        float f2 = this.state.transformY(n2);
        double d = this.state.transformAngle(metaFont.getAngle());
        float f3 = (float)Math.sin(d);
        float f4 = (float)Math.cos(d);
        float f5 = metaFont.getFontSize(this.state);
        BaseFont baseFont = metaFont.getFont();
        n = this.state.getTextAlign();
        float f6 = baseFont.getWidthPoint(string2, f5);
        float f7 = baseFont.getFontDescriptor(3, f5);
        float f8 = baseFont.getFontDescriptor(8, f5);
        this.cb.saveState();
        this.cb.concatCTM(f4, f3, - f3, f4, f, f2);
        f2 = 0.0f;
        f = (n & 6) == 6 ? (- f6) / 2.0f : ((n & 2) == 2 ? - f6 : 0.0f);
        if ((n & 24) != 24) {
            f2 = (n & 8) == 8 ? - f7 : - f8;
        }
        if (this.state.getBackgroundMode() == 2) {
            baseColor = this.state.getCurrentBackgroundColor();
            this.cb.setColorFill(baseColor);
            this.cb.rectangle(f, f2 + f7, f6, f8 - f7);
            this.cb.fill();
        }
        baseColor = this.state.getCurrentTextColor();
        this.cb.setColorFill(baseColor);
        this.cb.beginText();
        this.cb.setFontAndSize(baseFont, f5);
        this.cb.setTextMatrix(f, f2);
        this.cb.showText(string2);
        this.cb.endText();
        if (metaFont.isUnderline()) {
            this.cb.rectangle(f, f2 - f5 / 4.0f, f6, f5 / 15.0f);
            this.cb.fill();
        }
        if (metaFont.isStrikeout()) {
            this.cb.rectangle(f, f2 + f5 / 3.0f, f6, f5 / 15.0f);
            this.cb.fill();
        }
        this.cb.restoreState();
    }

    /*
     * Exception decompiling
     */
    public void readAll() throws IOException, DocumentException {
        // This method has failed to decompile.  When submitting a bug report, please provide this stack trace, and (if you hold appropriate legal rights) the relevant class file.
        // org.benf.cfr.reader.util.CannotPerformDecode: reachable test BLOCK was exited and re-entered.
        // org.benf.cfr.reader.bytecode.analysis.opgraph.op3rewriters.Misc.getFarthestReachableInRange(Misc.java:143)
        // org.benf.cfr.reader.bytecode.analysis.opgraph.op3rewriters.SwitchReplacer.examineSwitchContiguity(SwitchReplacer.java:385)
        // org.benf.cfr.reader.bytecode.analysis.opgraph.op3rewriters.SwitchReplacer.replaceRawSwitches(SwitchReplacer.java:65)
        // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisInner(CodeAnalyser.java:416)
        // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisOrWrapFail(CodeAnalyser.java:196)
        // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysis(CodeAnalyser.java:141)
        // org.benf.cfr.reader.entities.attributes.AttributeCode.analyse(AttributeCode.java:95)
        // org.benf.cfr.reader.entities.Method.analyse(Method.java:372)
        // org.benf.cfr.reader.entities.ClassFile.analyseMid(ClassFile.java:867)
        // org.benf.cfr.reader.entities.ClassFile.analyseTop(ClassFile.java:768)
        // org.benf.cfr.reader.Main.doJar(Main.java:141)
        // org.benf.cfr.reader.Main.main(Main.java:242)
        throw new IllegalStateException("Decompilation failed");
    }

    public void strokeAndFill() {
        MetaPen metaPen = this.state.getCurrentPen();
        MetaBrush metaBrush = this.state.getCurrentBrush();
        int n = metaPen.getStyle();
        int n2 = metaBrush.getStyle();
        if (n == 5) {
            this.cb.closePath();
            if (this.state.getPolyFillMode() == 1) {
                this.cb.eoFill();
                return;
            }
            this.cb.fill();
            return;
        }
        n = n2 != 0 && (n2 != 2 || this.state.getBackgroundMode() != 2) ? 0 : 1;
        if (n != 0) {
            if (this.state.getPolyFillMode() == 1) {
                this.cb.closePathEoFillStroke();
                return;
            }
            this.cb.closePathFillStroke();
            return;
        }
        this.cb.closePathStroke();
    }
}

