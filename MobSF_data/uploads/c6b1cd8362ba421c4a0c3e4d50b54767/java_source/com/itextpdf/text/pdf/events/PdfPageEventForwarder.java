/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf.events;

import com.itextpdf.text.Document;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.pdf.PdfPageEvent;
import com.itextpdf.text.pdf.PdfWriter;
import java.util.ArrayList;
import java.util.Iterator;

public class PdfPageEventForwarder
implements PdfPageEvent {
    protected ArrayList<PdfPageEvent> events = new ArrayList();

    public void addPageEvent(PdfPageEvent pdfPageEvent) {
        this.events.add(pdfPageEvent);
    }

    @Override
    public void onChapter(PdfWriter pdfWriter, Document document, float f, Paragraph paragraph) {
        Iterator<PdfPageEvent> iterator = this.events.iterator();
        while (iterator.hasNext()) {
            iterator.next().onChapter(pdfWriter, document, f, paragraph);
        }
    }

    @Override
    public void onChapterEnd(PdfWriter pdfWriter, Document document, float f) {
        Iterator<PdfPageEvent> iterator = this.events.iterator();
        while (iterator.hasNext()) {
            iterator.next().onChapterEnd(pdfWriter, document, f);
        }
    }

    @Override
    public void onCloseDocument(PdfWriter pdfWriter, Document document) {
        Iterator<PdfPageEvent> iterator = this.events.iterator();
        while (iterator.hasNext()) {
            iterator.next().onCloseDocument(pdfWriter, document);
        }
    }

    @Override
    public void onEndPage(PdfWriter pdfWriter, Document document) {
        Iterator<PdfPageEvent> iterator = this.events.iterator();
        while (iterator.hasNext()) {
            iterator.next().onEndPage(pdfWriter, document);
        }
    }

    @Override
    public void onGenericTag(PdfWriter pdfWriter, Document document, Rectangle rectangle, String string2) {
        Iterator<PdfPageEvent> iterator = this.events.iterator();
        while (iterator.hasNext()) {
            iterator.next().onGenericTag(pdfWriter, document, rectangle, string2);
        }
    }

    @Override
    public void onOpenDocument(PdfWriter pdfWriter, Document document) {
        Iterator<PdfPageEvent> iterator = this.events.iterator();
        while (iterator.hasNext()) {
            iterator.next().onOpenDocument(pdfWriter, document);
        }
    }

    @Override
    public void onParagraph(PdfWriter pdfWriter, Document document, float f) {
        Iterator<PdfPageEvent> iterator = this.events.iterator();
        while (iterator.hasNext()) {
            iterator.next().onParagraph(pdfWriter, document, f);
        }
    }

    @Override
    public void onParagraphEnd(PdfWriter pdfWriter, Document document, float f) {
        Iterator<PdfPageEvent> iterator = this.events.iterator();
        while (iterator.hasNext()) {
            iterator.next().onParagraphEnd(pdfWriter, document, f);
        }
    }

    @Override
    public void onSection(PdfWriter pdfWriter, Document document, float f, int n, Paragraph paragraph) {
        Iterator<PdfPageEvent> iterator = this.events.iterator();
        while (iterator.hasNext()) {
            iterator.next().onSection(pdfWriter, document, f, n, paragraph);
        }
    }

    @Override
    public void onSectionEnd(PdfWriter pdfWriter, Document document, float f) {
        Iterator<PdfPageEvent> iterator = this.events.iterator();
        while (iterator.hasNext()) {
            iterator.next().onSectionEnd(pdfWriter, document, f);
        }
    }

    @Override
    public void onStartPage(PdfWriter pdfWriter, Document document) {
        Iterator<PdfPageEvent> iterator = this.events.iterator();
        while (iterator.hasNext()) {
            iterator.next().onStartPage(pdfWriter, document);
        }
    }
}

