/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf.qrcode;

import com.itextpdf.text.pdf.qrcode.BitVector;
import com.itextpdf.text.pdf.qrcode.BlockPair;
import com.itextpdf.text.pdf.qrcode.ByteArray;
import com.itextpdf.text.pdf.qrcode.ByteMatrix;
import com.itextpdf.text.pdf.qrcode.CharacterSetECI;
import com.itextpdf.text.pdf.qrcode.EncodeHintType;
import com.itextpdf.text.pdf.qrcode.ErrorCorrectionLevel;
import com.itextpdf.text.pdf.qrcode.GF256;
import com.itextpdf.text.pdf.qrcode.MaskUtil;
import com.itextpdf.text.pdf.qrcode.MatrixUtil;
import com.itextpdf.text.pdf.qrcode.Mode;
import com.itextpdf.text.pdf.qrcode.QRCode;
import com.itextpdf.text.pdf.qrcode.ReedSolomonEncoder;
import com.itextpdf.text.pdf.qrcode.Version;
import com.itextpdf.text.pdf.qrcode.WriterException;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.Map;

public final class Encoder {
    private static final int[] ALPHANUMERIC_TABLE = new int[]{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 36, -1, -1, -1, 37, 38, -1, -1, -1, -1, 39, 40, -1, 41, 42, 43, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 44, -1, -1, -1, -1, -1, -1, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, -1, -1, -1, -1, -1};
    static final String DEFAULT_BYTE_MODE_ENCODING = "ISO-8859-1";

    private Encoder() {
    }

    static void append8BitBytes(String arrby, BitVector bitVector, String string2) throws WriterException {
        try {
            arrby = arrby.getBytes(string2);
        }
        catch (UnsupportedEncodingException unsupportedEncodingException) {
            throw new WriterException(unsupportedEncodingException.toString());
        }
        for (int i = 0; i < arrby.length; ++i) {
            bitVector.appendBits(arrby[i], 8);
        }
        return;
    }

    static void appendAlphanumericBytes(String string2, BitVector bitVector) throws WriterException {
        int n = string2.length();
        int n2 = 0;
        while (n2 < n) {
            int n3 = Encoder.getAlphanumericCode(string2.charAt(n2));
            if (n3 == -1) {
                throw new WriterException();
            }
            int n4 = n2 + 1;
            if (n4 < n) {
                if ((n4 = Encoder.getAlphanumericCode(string2.charAt(n4))) == -1) {
                    throw new WriterException();
                }
                bitVector.appendBits(n3 * 45 + n4, 11);
                n2 += 2;
                continue;
            }
            bitVector.appendBits(n3, 6);
            n2 = n4;
        }
    }

    static void appendBytes(String charSequence, Mode mode, BitVector bitVector, String string2) throws WriterException {
        if (mode.equals(Mode.NUMERIC)) {
            Encoder.appendNumericBytes((String)charSequence, bitVector);
            return;
        }
        if (mode.equals(Mode.ALPHANUMERIC)) {
            Encoder.appendAlphanumericBytes((String)charSequence, bitVector);
            return;
        }
        if (mode.equals(Mode.BYTE)) {
            Encoder.append8BitBytes((String)charSequence, bitVector, string2);
            return;
        }
        if (mode.equals(Mode.KANJI)) {
            Encoder.appendKanjiBytes((String)charSequence, bitVector);
            return;
        }
        charSequence = new StringBuilder();
        charSequence.append("Invalid mode: ");
        charSequence.append(mode);
        throw new WriterException(charSequence.toString());
    }

    private static void appendECI(CharacterSetECI characterSetECI, BitVector bitVector) {
        bitVector.appendBits(Mode.ECI.getBits(), 4);
        bitVector.appendBits(characterSetECI.getValue(), 8);
    }

    static void appendKanjiBytes(String arrby, BitVector bitVector) throws WriterException {
        try {
            arrby = arrby.getBytes("Shift_JIS");
        }
        catch (UnsupportedEncodingException unsupportedEncodingException) {
            throw new WriterException(unsupportedEncodingException.toString());
        }
        int n = arrby.length;
        for (int i = 0; i < n; i += 2) {
            int n2 = (arrby[i] & 255) << 8 | arrby[i + 1] & 255;
            n2 = n2 >= 33088 && n2 <= 40956 ? (n2 -= 33088) : (n2 >= 57408 && n2 <= 60351 ? (n2 -= 49472) : -1);
            if (n2 == -1) {
                throw new WriterException("Invalid byte sequence");
            }
            bitVector.appendBits((n2 >> 8) * 192 + (n2 & 255), 13);
        }
        return;
    }

    static void appendLengthInfo(int n, int n2, Mode object, BitVector bitVector) throws WriterException {
        int n3 = (1 << (n2 = object.getCharacterCountBits(Version.getVersionForNumber(n2)))) - 1;
        if (n > n3) {
            object = new StringBuilder();
            object.append(n);
            object.append("is bigger than");
            object.append(n3);
            throw new WriterException(object.toString());
        }
        bitVector.appendBits(n, n2);
    }

    static void appendModeInfo(Mode mode, BitVector bitVector) {
        bitVector.appendBits(mode.getBits(), 4);
    }

    static void appendNumericBytes(String string2, BitVector bitVector) {
        int n = string2.length();
        int n2 = 0;
        while (n2 < n) {
            int n3 = string2.charAt(n2) - 48;
            int n4 = n2 + 2;
            if (n4 < n) {
                bitVector.appendBits(n3 * 100 + (string2.charAt(n2 + 1) - 48) * 10 + (string2.charAt(n4) - 48), 10);
                n2 += 3;
                continue;
            }
            if (++n2 < n) {
                bitVector.appendBits(n3 * 10 + (string2.charAt(n2) - 48), 7);
                n2 = n4;
                continue;
            }
            bitVector.appendBits(n3, 4);
        }
    }

    private static int calculateMaskPenalty(ByteMatrix byteMatrix) {
        return MaskUtil.applyMaskPenaltyRule1(byteMatrix) + 0 + MaskUtil.applyMaskPenaltyRule2(byteMatrix) + MaskUtil.applyMaskPenaltyRule3(byteMatrix) + MaskUtil.applyMaskPenaltyRule4(byteMatrix);
    }

    private static int chooseMaskPattern(BitVector bitVector, ErrorCorrectionLevel errorCorrectionLevel, int n, ByteMatrix byteMatrix) throws WriterException {
        int n2 = Integer.MAX_VALUE;
        int n3 = -1;
        for (int i = 0; i < 8; ++i) {
            MatrixUtil.buildMatrix(bitVector, errorCorrectionLevel, n, i, byteMatrix);
            int n4 = Encoder.calculateMaskPenalty(byteMatrix);
            int n5 = n2;
            if (n4 < n2) {
                n3 = i;
                n5 = n4;
            }
            n2 = n5;
        }
        return n3;
    }

    public static Mode chooseMode(String string2) {
        return Encoder.chooseMode(string2, null);
    }

    public static Mode chooseMode(String string2, String string3) {
        if ("Shift_JIS".equals(string3)) {
            if (Encoder.isOnlyDoubleByteKanji(string2)) {
                return Mode.KANJI;
            }
            return Mode.BYTE;
        }
        boolean bl = false;
        boolean bl2 = false;
        for (int i = 0; i < string2.length(); ++i) {
            char c = string2.charAt(i);
            if (c >= '0' && c <= '9') {
                bl2 = true;
                continue;
            }
            if (Encoder.getAlphanumericCode(c) != -1) {
                bl = true;
                continue;
            }
            return Mode.BYTE;
        }
        if (bl) {
            return Mode.ALPHANUMERIC;
        }
        if (bl2) {
            return Mode.NUMERIC;
        }
        return Mode.BYTE;
    }

    public static void encode(String string2, ErrorCorrectionLevel errorCorrectionLevel, QRCode qRCode) throws WriterException {
        Encoder.encode(string2, errorCorrectionLevel, null, qRCode);
    }

    public static void encode(String object, ErrorCorrectionLevel object2, Map<EncodeHintType, Object> object3, QRCode qRCode) throws WriterException {
        object3 = object3 == null ? null : (String)object3.get(EncodeHintType.CHARACTER_SET);
        Object object4 = object3;
        if (object3 == null) {
            object4 = DEFAULT_BYTE_MODE_ENCODING;
        }
        object3 = Encoder.chooseMode((String)object, (String)object4);
        BitVector bitVector = new BitVector();
        Encoder.appendBytes((String)object, (Mode)object3, bitVector, (String)object4);
        Encoder.initQRCode(bitVector.sizeInBytes(), (ErrorCorrectionLevel)object2, (Mode)object3, qRCode);
        object2 = new BitVector();
        if (object3 == Mode.BYTE && !DEFAULT_BYTE_MODE_ENCODING.equals(object4) && (object4 = CharacterSetECI.getCharacterSetECIByName((String)object4)) != null) {
            Encoder.appendECI((CharacterSetECI)object4, (BitVector)object2);
        }
        Encoder.appendModeInfo((Mode)object3, (BitVector)object2);
        int n = object3.equals(Mode.BYTE) ? bitVector.sizeInBytes() : object.length();
        Encoder.appendLengthInfo(n, qRCode.getVersion(), (Mode)object3, (BitVector)object2);
        object2.appendBitVector(bitVector);
        Encoder.terminateBits(qRCode.getNumDataBytes(), (BitVector)object2);
        object = new BitVector();
        Encoder.interleaveWithECBytes((BitVector)object2, qRCode.getNumTotalBytes(), qRCode.getNumDataBytes(), qRCode.getNumRSBlocks(), (BitVector)object);
        object2 = new ByteMatrix(qRCode.getMatrixWidth(), qRCode.getMatrixWidth());
        qRCode.setMaskPattern(Encoder.chooseMaskPattern((BitVector)object, qRCode.getECLevel(), qRCode.getVersion(), (ByteMatrix)object2));
        MatrixUtil.buildMatrix((BitVector)object, qRCode.getECLevel(), qRCode.getVersion(), qRCode.getMaskPattern(), (ByteMatrix)object2);
        qRCode.setMatrix((ByteMatrix)object2);
        if (!qRCode.isValid()) {
            object = new StringBuilder();
            object.append("Invalid QR code: ");
            object.append(qRCode.toString());
            throw new WriterException(object.toString());
        }
    }

    static ByteArray generateECBytes(ByteArray byteArray, int n) {
        int n2;
        int n3 = byteArray.size();
        int[] arrn = new int[n3 + n];
        int n4 = 0;
        for (n2 = 0; n2 < n3; ++n2) {
            arrn[n2] = byteArray.at(n2);
        }
        new ReedSolomonEncoder(GF256.QR_CODE_FIELD).encode(arrn, n);
        byteArray = new ByteArray(n);
        for (n2 = n4; n2 < n; ++n2) {
            byteArray.set(n2, arrn[n3 + n2]);
        }
        return byteArray;
    }

    static int getAlphanumericCode(int n) {
        if (n < ALPHANUMERIC_TABLE.length) {
            return ALPHANUMERIC_TABLE[n];
        }
        return -1;
    }

    static void getNumDataBytesAndNumECBytesForBlockID(int n, int n2, int n3, int n4, int[] arrn, int[] arrn2) throws WriterException {
        if (n4 >= n3) {
            throw new WriterException("Block ID too large");
        }
        int n5 = n % n3;
        int n6 = n3 - n5;
        int n7 = n / n3;
        int n8 = (n2 /= n3) + 1;
        int n9 = n7 - n2;
        if (n9 != (n7 = n7 + 1 - n8)) {
            throw new WriterException("EC bytes mismatch");
        }
        if (n3 != n6 + n5) {
            throw new WriterException("RS blocks mismatch");
        }
        if (n != (n2 + n9) * n6 + (n8 + n7) * n5) {
            throw new WriterException("Total bytes mismatch");
        }
        if (n4 < n6) {
            arrn[0] = n2;
            arrn2[0] = n9;
            return;
        }
        arrn[0] = n8;
        arrn2[0] = n7;
    }

    private static void initQRCode(int n, ErrorCorrectionLevel errorCorrectionLevel, Mode object, QRCode qRCode) throws WriterException {
        qRCode.setECLevel(errorCorrectionLevel);
        qRCode.setMode((Mode)object);
        for (int i = 1; i <= 40; ++i) {
            object = Version.getVersionForNumber(i);
            int n2 = object.getTotalCodewords();
            Version.ECBlocks eCBlocks = object.getECBlocksForLevel(errorCorrectionLevel);
            int n3 = eCBlocks.getTotalECCodewords();
            int n4 = eCBlocks.getNumBlocks();
            int n5 = n2 - n3;
            if (n5 < n + 3) continue;
            qRCode.setVersion(i);
            qRCode.setNumTotalBytes(n2);
            qRCode.setNumDataBytes(n5);
            qRCode.setNumRSBlocks(n4);
            qRCode.setNumECBytes(n3);
            qRCode.setMatrixWidth(object.getDimensionForVersion());
            return;
        }
        throw new WriterException("Cannot find proper rs block info (input data too big?)");
    }

    static void interleaveWithECBytes(BitVector object, int n, int n2, int n3, BitVector bitVector) throws WriterException {
        if (object.sizeInBytes() != n2) {
            throw new WriterException("Number of bits and data bytes does not match");
        }
        ArrayList<BlockPair> arrayList = new ArrayList<BlockPair>(n3);
        int n4 = 0;
        int n5 = 0;
        int n6 = 0;
        for (int i = 0; i < n3; ++i) {
            int[] arrn = new int[1];
            Object object2 = new int[1];
            Encoder.getNumDataBytesAndNumECBytesForBlockID(n, n2, n3, i, arrn, (int[])object2);
            ByteArray byteArray = new ByteArray();
            byteArray.set(object.getArray(), n4, arrn[0]);
            object2 = Encoder.generateECBytes(byteArray, object2[0]);
            arrayList.add(new BlockPair(byteArray, (ByteArray)object2));
            n5 = Math.max(n5, byteArray.size());
            n6 = Math.max(n6, object2.size());
            n4 += arrn[0];
        }
        if (n2 != n4) {
            throw new WriterException("Data bytes does not match offset");
        }
        for (n2 = 0; n2 < n5; ++n2) {
            for (n3 = 0; n3 < arrayList.size(); ++n3) {
                object = ((BlockPair)arrayList.get(n3)).getDataBytes();
                if (n2 >= object.size()) continue;
                bitVector.appendBits(object.at(n2), 8);
            }
        }
        for (n2 = 0; n2 < n6; ++n2) {
            for (n3 = 0; n3 < arrayList.size(); ++n3) {
                object = ((BlockPair)arrayList.get(n3)).getErrorCorrectionBytes();
                if (n2 >= object.size()) continue;
                bitVector.appendBits(object.at(n2), 8);
            }
        }
        if (n != bitVector.sizeInBytes()) {
            object = new StringBuilder();
            object.append("Interleaving error: ");
            object.append(n);
            object.append(" and ");
            object.append(bitVector.sizeInBytes());
            object.append(" differ.");
            throw new WriterException(object.toString());
        }
    }

    private static boolean isOnlyDoubleByteKanji(String arrby) {
        try {
            arrby = arrby.getBytes("Shift_JIS");
        }
        catch (UnsupportedEncodingException unsupportedEncodingException) {
            return false;
        }
        int n = arrby.length;
        if (n % 2 != 0) {
            return false;
        }
        for (int i = 0; i < n; i += 2) {
            int n2 = arrby[i] & 255;
            if (n2 >= 129 && n2 <= 159) continue;
            if (n2 >= 224) {
                if (n2 <= 235) continue;
                return false;
            }
            return false;
        }
        return true;
    }

    static void terminateBits(int n, BitVector bitVector) throws WriterException {
        int n2;
        int n3 = n << 3;
        if (bitVector.size() > n3) {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("data bits cannot fit in the QR Code");
            stringBuilder.append(bitVector.size());
            stringBuilder.append(" > ");
            stringBuilder.append(n3);
            throw new WriterException(stringBuilder.toString());
        }
        int n4 = 0;
        for (n2 = 0; n2 < 4 && bitVector.size() < n3; ++n2) {
            bitVector.appendBit(0);
        }
        int n5 = bitVector.size() % 8;
        if (n5 > 0) {
            for (n2 = 0; n2 < 8 - n5; ++n2) {
                bitVector.appendBit(0);
            }
        }
        if (bitVector.size() % 8 != 0) {
            throw new WriterException("Number of bits is not a multiple of 8");
        }
        n5 = bitVector.sizeInBytes();
        for (n2 = n4; n2 < n - n5; ++n2) {
            if (n2 % 2 == 0) {
                bitVector.appendBits(236, 8);
                continue;
            }
            bitVector.appendBits(17, 8);
        }
        if (bitVector.size() != n3) {
            throw new WriterException("Bits size does not equal capacity");
        }
    }
}

