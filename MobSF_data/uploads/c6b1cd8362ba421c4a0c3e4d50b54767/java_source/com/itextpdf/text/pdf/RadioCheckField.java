/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf;

import com.itextpdf.text.BaseColor;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.ExceptionConverter;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.pdf.BaseField;
import com.itextpdf.text.pdf.BaseFont;
import com.itextpdf.text.pdf.PdfAnnotation;
import com.itextpdf.text.pdf.PdfAppearance;
import com.itextpdf.text.pdf.PdfBorderDictionary;
import com.itextpdf.text.pdf.PdfContentByte;
import com.itextpdf.text.pdf.PdfDashPattern;
import com.itextpdf.text.pdf.PdfFormField;
import com.itextpdf.text.pdf.PdfName;
import com.itextpdf.text.pdf.PdfTemplate;
import com.itextpdf.text.pdf.PdfWriter;
import java.io.IOException;

public class RadioCheckField
extends BaseField {
    public static final int TYPE_CHECK = 1;
    public static final int TYPE_CIRCLE = 2;
    public static final int TYPE_CROSS = 3;
    public static final int TYPE_DIAMOND = 4;
    public static final int TYPE_SQUARE = 5;
    public static final int TYPE_STAR = 6;
    protected static String[] typeChars = new String[]{"4", "l", "8", "u", "n", "H"};
    protected int checkType;
    private boolean checked;
    private String onValue;

    public RadioCheckField(PdfWriter pdfWriter, Rectangle rectangle, String string2, String string3) {
        super(pdfWriter, rectangle, string2);
        this.setOnValue(string3);
        this.setCheckType(2);
    }

    public PdfAppearance getAppearance(boolean bl, boolean bl2) throws IOException, DocumentException {
        if (bl && this.checkType == 2) {
            return this.getAppearanceRadioCircle(bl2);
        }
        PdfAppearance pdfAppearance = this.getBorderAppearance();
        if (!bl2) {
            return pdfAppearance;
        }
        BaseFont baseFont = this.getRealFont();
        boolean bl3 = this.borderStyle == 2 || this.borderStyle == 3;
        float f = this.box.getHeight() - this.borderWidth * 2.0f;
        float f2 = this.borderWidth;
        float f3 = f;
        float f4 = f2;
        if (bl3) {
            f3 = f - this.borderWidth * 2.0f;
            f4 = f2 * 2.0f;
        }
        f2 = bl3 ? this.borderWidth * 2.0f : this.borderWidth;
        f = Math.min(f4, Math.max(f2, 1.0f));
        f4 = this.box.getWidth();
        float f5 = f * 2.0f;
        float f6 = f4 - f5;
        float f7 = this.box.getHeight();
        f4 = f2 = this.fontSize;
        if (f2 == 0.0f) {
            f4 = baseFont.getWidthPoint(this.text, 1.0f);
            f4 = f4 == 0.0f ? 12.0f : f6 / f4;
            f4 = Math.min(f4, f3 / baseFont.getFontDescriptor(1, 1.0f));
        }
        pdfAppearance.saveState();
        pdfAppearance.rectangle(f, f, f6, f7 - f5);
        pdfAppearance.clip();
        pdfAppearance.newPath();
        if (this.textColor == null) {
            pdfAppearance.resetGrayFill();
        } else {
            pdfAppearance.setColorFill(this.textColor);
        }
        pdfAppearance.beginText();
        pdfAppearance.setFontAndSize(baseFont, f4);
        pdfAppearance.setTextMatrix((this.box.getWidth() - baseFont.getWidthPoint(this.text, f4)) / 2.0f, (this.box.getHeight() - baseFont.getAscentPoint(this.text, f4)) / 2.0f);
        pdfAppearance.showText(this.text);
        pdfAppearance.endText();
        pdfAppearance.restoreState();
        return pdfAppearance;
    }

    public PdfAppearance getAppearanceRadioCircle(boolean bl) {
        PdfAppearance pdfAppearance = PdfAppearance.createAppearance(this.writer, this.box.getWidth(), this.box.getHeight());
        int n = this.rotation;
        if (n != 90) {
            if (n != 180) {
                if (n == 270) {
                    pdfAppearance.setMatrix(0.0f, -1.0f, 1.0f, 0.0f, 0.0f, this.box.getWidth());
                }
            } else {
                pdfAppearance.setMatrix(-1.0f, 0.0f, 0.0f, -1.0f, this.box.getWidth(), this.box.getHeight());
            }
        } else {
            pdfAppearance.setMatrix(0.0f, 1.0f, -1.0f, 0.0f, this.box.getHeight(), 0.0f);
        }
        Rectangle rectangle = new Rectangle(pdfAppearance.getBoundingBox());
        float f = rectangle.getWidth() / 2.0f;
        float f2 = rectangle.getHeight() / 2.0f;
        float f3 = (Math.min(rectangle.getWidth(), rectangle.getHeight()) - this.borderWidth) / 2.0f;
        if (f3 <= 0.0f) {
            return pdfAppearance;
        }
        if (this.backgroundColor != null) {
            pdfAppearance.setColorFill(this.backgroundColor);
            pdfAppearance.circle(f, f2, this.borderWidth / 2.0f + f3);
            pdfAppearance.fill();
        }
        if (this.borderWidth > 0.0f && this.borderColor != null) {
            pdfAppearance.setLineWidth(this.borderWidth);
            pdfAppearance.setColorStroke(this.borderColor);
            pdfAppearance.circle(f, f2, f3);
            pdfAppearance.stroke();
        }
        if (bl) {
            if (this.textColor == null) {
                pdfAppearance.resetGrayFill();
            } else {
                pdfAppearance.setColorFill(this.textColor);
            }
            pdfAppearance.circle(f, f2, f3 / 2.0f);
            pdfAppearance.fill();
        }
        return pdfAppearance;
    }

    public PdfFormField getCheckField() throws IOException, DocumentException {
        return this.getField(false);
    }

    public int getCheckType() {
        return this.checkType;
    }

    protected PdfFormField getField(boolean bl) throws IOException, DocumentException {
        Object object;
        PdfFormField pdfFormField = bl ? PdfFormField.createEmpty(this.writer) : PdfFormField.createCheckBox(this.writer);
        pdfFormField.setWidget(this.box, PdfAnnotation.HIGHLIGHT_INVERT);
        if (!bl) {
            pdfFormField.setFieldName(this.fieldName);
            if ((this.options & 1) != 0) {
                pdfFormField.setFieldFlags(1);
            }
            if ((this.options & 2) != 0) {
                pdfFormField.setFieldFlags(2);
            }
            object = this.checked ? this.onValue : "Off";
            pdfFormField.setValueAsName((String)object);
            this.setCheckType(this.checkType);
        }
        if (this.text != null) {
            pdfFormField.setMKNormalCaption(this.text);
        }
        if (this.rotation != 0) {
            pdfFormField.setMKRotation(this.rotation);
        }
        pdfFormField.setBorderStyle(new PdfBorderDictionary(this.borderWidth, this.borderStyle, new PdfDashPattern(3.0f)));
        PdfAppearance pdfAppearance = this.getAppearance(bl, true);
        object = this.getAppearance(bl, false);
        pdfFormField.setAppearance(PdfAnnotation.APPEARANCE_NORMAL, this.onValue, pdfAppearance);
        pdfFormField.setAppearance(PdfAnnotation.APPEARANCE_NORMAL, "Off", (PdfTemplate)object);
        object = this.checked ? this.onValue : "Off";
        pdfFormField.setAppearanceState((String)object);
        object = (PdfAppearance)pdfAppearance.getDuplicate();
        if (this.getRealFont() != null) {
            object.setFontAndSize(this.getRealFont(), this.fontSize);
        }
        if (this.textColor == null) {
            object.setGrayFill(0.0f);
        } else {
            object.setColorFill(this.textColor);
        }
        pdfFormField.setDefaultAppearanceString((PdfContentByte)object);
        if (this.borderColor != null) {
            pdfFormField.setMKBorderColor(this.borderColor);
        }
        if (this.backgroundColor != null) {
            pdfFormField.setMKBackgroundColor(this.backgroundColor);
        }
        switch (this.visibility) {
            default: {
                pdfFormField.setFlags(4);
                return pdfFormField;
            }
            case 3: {
                pdfFormField.setFlags(36);
                return pdfFormField;
            }
            case 1: {
                pdfFormField.setFlags(6);
            }
            case 2: 
        }
        return pdfFormField;
    }

    public String getOnValue() {
        return this.onValue;
    }

    public PdfFormField getRadioField() throws IOException, DocumentException {
        return this.getField(true);
    }

    public PdfFormField getRadioGroup(boolean bl, boolean bl2) {
        PdfFormField pdfFormField = PdfFormField.createRadioButton(this.writer, bl);
        if (bl2) {
            pdfFormField.setFieldFlags(33554432);
        }
        pdfFormField.setFieldName(this.fieldName);
        if ((this.options & 1) != 0) {
            pdfFormField.setFieldFlags(1);
        }
        if ((this.options & 2) != 0) {
            pdfFormField.setFieldFlags(2);
        }
        String string2 = this.checked ? this.onValue : "Off";
        pdfFormField.setValueAsName(string2);
        return pdfFormField;
    }

    public boolean isChecked() {
        return this.checked;
    }

    public void setCheckType(int n) {
        int n2;
        block5 : {
            block4 : {
                if (n < 1) break block4;
                n2 = n;
                if (n <= 6) break block5;
            }
            n2 = 2;
        }
        this.checkType = n2;
        this.setText(typeChars[n2 - 1]);
        try {
            this.setFont(BaseFont.createFont("ZapfDingbats", "Cp1252", false));
            return;
        }
        catch (Exception exception) {
            throw new ExceptionConverter(exception);
        }
    }

    public void setChecked(boolean bl) {
        this.checked = bl;
    }

    public void setOnValue(String string2) {
        this.onValue = string2;
    }
}

