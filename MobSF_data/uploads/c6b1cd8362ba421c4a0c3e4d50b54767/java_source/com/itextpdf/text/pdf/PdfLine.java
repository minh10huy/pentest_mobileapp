/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf;

import com.itextpdf.text.Chunk;
import com.itextpdf.text.Image;
import com.itextpdf.text.ListItem;
import com.itextpdf.text.TabStop;
import com.itextpdf.text.pdf.BaseFont;
import com.itextpdf.text.pdf.PdfChunk;
import com.itextpdf.text.pdf.PdfFont;
import java.util.ArrayList;
import java.util.Iterator;

public class PdfLine {
    protected int alignment;
    protected float height;
    protected boolean isRTL = false;
    protected float left;
    protected ArrayList<PdfChunk> line;
    protected ListItem listItem = null;
    protected boolean newlineSplit = false;
    protected float originalWidth;
    protected float tabPosition = Float.NaN;
    protected TabStop tabStop = null;
    protected float tabStopAnchorPosition = Float.NaN;
    protected float width;

    PdfLine(float f, float f2, float f3, int n, boolean bl, ArrayList<PdfChunk> arrayList, boolean bl2) {
        this.left = f;
        this.originalWidth = f2;
        this.width = f3;
        this.alignment = n;
        this.line = arrayList;
        this.newlineSplit = bl;
        this.isRTL = bl2;
    }

    PdfLine(float f, float f2, int n, float f3) {
        this.left = f;
        this.originalWidth = this.width = f2 - f;
        this.alignment = n;
        this.height = f3;
        this.line = new ArrayList();
    }

    private void addToLine(PdfChunk pdfChunk) {
        float f;
        int n;
        Object object;
        if (pdfChunk.changeLeading) {
            if (pdfChunk.isImage()) {
                object = pdfChunk.getImage();
                f = pdfChunk.getImageHeight() + pdfChunk.getImageOffsetY() + object.getBorderWidthTop() + object.getSpacingBefore();
            } else {
                f = pdfChunk.getLeading();
            }
            if (f > this.height) {
                this.height = f;
            }
        }
        if (this.tabStop != null && this.tabStop.getAlignment() == TabStop.Alignment.ANCHOR && Float.isNaN(this.tabStopAnchorPosition) && (n = (object = pdfChunk.toString()).indexOf(this.tabStop.getAnchorChar())) != -1) {
            f = pdfChunk.width(object.substring(n, object.length()));
            this.tabStopAnchorPosition = this.originalWidth - this.width - f;
        }
        this.line.add(pdfChunk);
    }

    /*
     * Enabled aggressive block sorting
     */
    PdfChunk add(PdfChunk pdfChunk) {
        PdfChunk pdfChunk2;
        block14 : {
            Object[] arrobject;
            block15 : {
                block16 : {
                    block18 : {
                        block17 : {
                            if (pdfChunk == null) {
                                return null;
                            }
                            if (pdfChunk.toString().equals("")) {
                                return null;
                            }
                            pdfChunk2 = pdfChunk.split(this.width);
                            boolean bl = pdfChunk.isNewlineSplit() || pdfChunk2 == null;
                            this.newlineSplit = bl;
                            if (!pdfChunk.isTab()) break block14;
                            arrobject = (Object[])pdfChunk.getAttribute("TAB");
                            if (!pdfChunk.isAttribute("TABSETTINGS")) break block15;
                            bl = (Boolean)arrobject[1];
                            if (bl && this.line.isEmpty()) {
                                return null;
                            }
                            this.flush();
                            this.tabStopAnchorPosition = Float.NaN;
                            this.tabStop = PdfChunk.getTabStop(pdfChunk, this.originalWidth - this.width);
                            if (this.tabStop.getPosition() <= this.originalWidth) break block16;
                            if (bl) break block17;
                            if ((double)Math.abs(this.originalWidth - this.width) >= 0.001) break block18;
                            this.addToLine(pdfChunk);
                        }
                        pdfChunk = null;
                    }
                    this.width = 0.0f;
                    return pdfChunk;
                }
                pdfChunk.setTabStop(this.tabStop);
                if (!this.isRTL && this.tabStop.getAlignment() == TabStop.Alignment.LEFT) {
                    this.width = this.originalWidth - this.tabStop.getPosition();
                    this.tabStop = null;
                    this.tabPosition = Float.NaN;
                } else {
                    this.tabPosition = this.originalWidth - this.width;
                }
                this.addToLine(pdfChunk);
                return pdfChunk2;
            }
            Float f = Float.valueOf(((Float)arrobject[1]).floatValue());
            if (((Boolean)arrobject[2]).booleanValue() && f.floatValue() < this.originalWidth - this.width) {
                return pdfChunk;
            }
            pdfChunk.adjustLeft(this.left);
            this.width = this.originalWidth - f.floatValue();
            this.addToLine(pdfChunk);
            return pdfChunk2;
        }
        if (pdfChunk.length() <= 0 && !pdfChunk.isImage()) {
            if (this.line.size() >= 1) {
                this.width += this.line.get(this.line.size() - 1).trimLastSpace();
                return pdfChunk2;
            }
            pdfChunk = pdfChunk2.truncate(this.width);
            this.width -= pdfChunk2.width();
            if (pdfChunk2.length() > 0) {
                this.addToLine(pdfChunk2);
                return pdfChunk;
            }
            if (pdfChunk != null) {
                this.addToLine(pdfChunk);
            }
            return null;
        }
        if (pdfChunk2 != null) {
            pdfChunk.trimLastSpace();
        }
        this.width -= pdfChunk.width();
        this.addToLine(pdfChunk);
        return pdfChunk2;
    }

    PdfChunk add(PdfChunk pdfChunk, float f) {
        if (!(pdfChunk == null || pdfChunk.toString().equals("") || pdfChunk.toString().equals(" ") || this.height >= f && !this.line.isEmpty())) {
            this.height = f;
        }
        return this.add(pdfChunk);
    }

    public void flush() {
        if (this.tabStop != null) {
            float f = this.originalWidth;
            float f2 = this.width;
            float f3 = this.tabPosition;
            float f4 = this.tabStop.getPosition(this.tabPosition, this.originalWidth - this.width, this.tabStopAnchorPosition);
            this.width = this.originalWidth - f4 - (f - f2 - f3);
            f = f4;
            if (this.width < 0.0f) {
                f = f4 + this.width;
            }
            if (!this.isRTL) {
                this.tabStop.setPosition(f);
            } else {
                this.tabStop.setPosition(this.originalWidth - this.width - this.tabPosition);
            }
            this.tabStop = null;
            this.tabPosition = Float.NaN;
        }
    }

    public float getAscender() {
        float f = 0.0f;
        for (int i = 0; i < this.line.size(); ++i) {
            PdfChunk pdfChunk = this.line.get(i);
            if (pdfChunk.isImage()) {
                f = Math.max(f, pdfChunk.getImageHeight() + pdfChunk.getImageOffsetY());
                continue;
            }
            PdfFont pdfFont = pdfChunk.font();
            float f2 = pdfChunk.getTextRise();
            if (f2 <= 0.0f) {
                f2 = 0.0f;
            }
            f = Math.max(f, f2 + pdfFont.getFont().getFontDescriptor(1, pdfFont.size()));
        }
        return f;
    }

    public PdfChunk getChunk(int n) {
        if (n >= 0 && n < this.line.size()) {
            return this.line.get(n);
        }
        return null;
    }

    public float getDescender() {
        float f = 0.0f;
        for (int i = 0; i < this.line.size(); ++i) {
            PdfChunk pdfChunk = this.line.get(i);
            if (pdfChunk.isImage()) {
                f = Math.min(f, pdfChunk.getImageOffsetY());
                continue;
            }
            PdfFont pdfFont = pdfChunk.font();
            float f2 = pdfChunk.getTextRise();
            if (f2 >= 0.0f) {
                f2 = 0.0f;
            }
            f = Math.min(f, f2 + pdfFont.getFont().getFontDescriptor(3, pdfFont.size()));
        }
        return f;
    }

    public int getLastStrokeChunk() {
        int n;
        for (n = this.line.size() - 1; n >= 0; --n) {
            if (!this.line.get(n).isStroked()) continue;
            return n;
        }
        return n;
    }

    public int getLineLengthUtf32() {
        Iterator<PdfChunk> iterator = this.line.iterator();
        int n = 0;
        while (iterator.hasNext()) {
            n += iterator.next().lengthUtf32();
        }
        return n;
    }

    float[] getMaxSize(float f, float f2) {
        float f3 = 0.0f;
        float f4 = -10000.0f;
        for (int i = 0; i < this.line.size(); ++i) {
            float f5;
            float f6;
            PdfChunk pdfChunk = this.line.get(i);
            if (pdfChunk.isImage()) {
                Image image = pdfChunk.getImage();
                f6 = f3;
                f5 = f4;
                if (pdfChunk.changeLeading()) {
                    f5 = Math.max(pdfChunk.getImageHeight() + pdfChunk.getImageOffsetY() + image.getSpacingBefore(), f4);
                    f6 = f3;
                }
            } else if (pdfChunk.changeLeading()) {
                f6 = Math.max(pdfChunk.getLeading(), f3);
                f5 = f4;
            } else {
                f6 = Math.max(pdfChunk.font().size() * f2 + f, f3);
                f5 = f4;
            }
            f3 = f6;
            f4 = f5;
        }
        if (f3 > 0.0f) {
            f = f3;
        }
        return new float[]{f, f4};
    }

    public float getOriginalWidth() {
        return this.originalWidth;
    }

    int getSeparatorCount() {
        Iterator<PdfChunk> iterator = this.line.iterator();
        int n = 0;
        while (iterator.hasNext()) {
            PdfChunk pdfChunk = iterator.next();
            if (pdfChunk.isTab()) {
                if (pdfChunk.isAttribute("TABSETTINGS")) continue;
                return -1;
            }
            if (!pdfChunk.isHorizontalSeparator()) continue;
            ++n;
        }
        return n;
    }

    public float getWidthCorrected(float f, float f2) {
        float f3 = 0.0f;
        for (int i = 0; i < this.line.size(); ++i) {
            f3 += this.line.get(i).getWidthCorrected(f, f2);
        }
        return f3;
    }

    public boolean hasToBeJustified() {
        if ((this.alignment == 3 && !this.newlineSplit || this.alignment == 8) && this.width != 0.0f) {
            return true;
        }
        return false;
    }

    float height() {
        return this.height;
    }

    float indentLeft() {
        if (this.isRTL) {
            switch (this.alignment) {
                default: {
                    return this.left + this.width;
                }
                case 3: {
                    float f = this.left;
                    float f2 = this.hasToBeJustified() ? 0.0f : this.width;
                    return f + f2;
                }
                case 2: {
                    return this.left;
                }
                case 1: 
            }
            return this.left + this.width / 2.0f;
        }
        if (this.getSeparatorCount() <= 0) {
            switch (this.alignment) {
                default: {
                    break;
                }
                case 2: {
                    return this.left + this.width;
                }
                case 1: {
                    return this.left + this.width / 2.0f;
                }
            }
        }
        return this.left;
    }

    public boolean isNewlineSplit() {
        if (this.newlineSplit && this.alignment != 8) {
            return true;
        }
        return false;
    }

    boolean isRTL() {
        return this.isRTL;
    }

    public Iterator<PdfChunk> iterator() {
        return this.line.iterator();
    }

    public float listIndent() {
        if (this.listItem != null) {
            return this.listItem.getIndentationLeft();
        }
        return 0.0f;
    }

    public ListItem listItem() {
        return this.listItem;
    }

    public Chunk listSymbol() {
        if (this.listItem != null) {
            return this.listItem.getListSymbol();
        }
        return null;
    }

    int numberOfSpaces() {
        Iterator<PdfChunk> iterator = this.line.iterator();
        int n = 0;
        while (iterator.hasNext()) {
            String string2 = iterator.next().toString();
            int n2 = string2.length();
            for (int i = 0; i < n2; ++i) {
                int n3 = n;
                if (string2.charAt(i) == ' ') {
                    n3 = n + 1;
                }
                n = n3;
            }
        }
        return n;
    }

    public void resetAlignment() {
        if (this.alignment == 3) {
            this.alignment = 0;
        }
    }

    void setExtraIndent(float f) {
        this.left += f;
        this.width -= f;
        this.originalWidth -= f;
    }

    public void setListItem(ListItem listItem) {
        this.listItem = listItem;
    }

    public int size() {
        return this.line.size();
    }

    public String toString() {
        StringBuffer stringBuffer = new StringBuffer();
        Iterator<PdfChunk> iterator = this.line.iterator();
        while (iterator.hasNext()) {
            stringBuffer.append(iterator.next().toString());
        }
        return stringBuffer.toString();
    }

    float widthLeft() {
        return this.width;
    }
}

