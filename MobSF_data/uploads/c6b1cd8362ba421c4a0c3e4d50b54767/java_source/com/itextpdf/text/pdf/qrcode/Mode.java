/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf.qrcode;

import com.itextpdf.text.pdf.qrcode.Version;

public final class Mode {
    public static final Mode ALPHANUMERIC;
    public static final Mode BYTE;
    public static final Mode ECI;
    public static final Mode FNC1_FIRST_POSITION;
    public static final Mode FNC1_SECOND_POSITION;
    public static final Mode KANJI;
    public static final Mode NUMERIC;
    public static final Mode STRUCTURED_APPEND;
    public static final Mode TERMINATOR;
    private final int bits;
    private final int[] characterCountBitsForVersions;
    private final String name;

    static {
        TERMINATOR = new Mode(new int[]{0, 0, 0}, 0, "TERMINATOR");
        NUMERIC = new Mode(new int[]{10, 12, 14}, 1, "NUMERIC");
        ALPHANUMERIC = new Mode(new int[]{9, 11, 13}, 2, "ALPHANUMERIC");
        STRUCTURED_APPEND = new Mode(new int[]{0, 0, 0}, 3, "STRUCTURED_APPEND");
        BYTE = new Mode(new int[]{8, 16, 16}, 4, "BYTE");
        ECI = new Mode(null, 7, "ECI");
        KANJI = new Mode(new int[]{8, 10, 12}, 8, "KANJI");
        FNC1_FIRST_POSITION = new Mode(null, 5, "FNC1_FIRST_POSITION");
        FNC1_SECOND_POSITION = new Mode(null, 9, "FNC1_SECOND_POSITION");
    }

    private Mode(int[] arrn, int n, String string2) {
        this.characterCountBitsForVersions = arrn;
        this.bits = n;
        this.name = string2;
    }

    public static Mode forBits(int n) {
        switch (n) {
            default: {
                throw new IllegalArgumentException();
            }
            case 9: {
                return FNC1_SECOND_POSITION;
            }
            case 8: {
                return KANJI;
            }
            case 7: {
                return ECI;
            }
            case 5: {
                return FNC1_FIRST_POSITION;
            }
            case 4: {
                return BYTE;
            }
            case 3: {
                return STRUCTURED_APPEND;
            }
            case 2: {
                return ALPHANUMERIC;
            }
            case 1: {
                return NUMERIC;
            }
            case 0: 
        }
        return TERMINATOR;
    }

    public int getBits() {
        return this.bits;
    }

    public int getCharacterCountBits(Version version) {
        if (this.characterCountBitsForVersions == null) {
            throw new IllegalArgumentException("Character count doesn't apply to this mode");
        }
        int n = version.getVersionNumber();
        n = n <= 9 ? 0 : (n <= 26 ? 1 : 2);
        return this.characterCountBitsForVersions[n];
    }

    public String getName() {
        return this.name;
    }

    public String toString() {
        return this.name;
    }
}

