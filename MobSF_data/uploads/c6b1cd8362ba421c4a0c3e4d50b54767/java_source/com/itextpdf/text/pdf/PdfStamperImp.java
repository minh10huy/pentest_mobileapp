/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf;

import com.itextpdf.awt.geom.Point;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.ExceptionConverter;
import com.itextpdf.text.Image;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.Version;
import com.itextpdf.text.error_messages.MessageLocalization;
import com.itextpdf.text.exceptions.BadPasswordException;
import com.itextpdf.text.log.Counter;
import com.itextpdf.text.log.CounterFactory;
import com.itextpdf.text.pdf.AcroFields;
import com.itextpdf.text.pdf.ByteBuffer;
import com.itextpdf.text.pdf.FdfReader;
import com.itextpdf.text.pdf.ICC_Profile;
import com.itextpdf.text.pdf.IntHashtable;
import com.itextpdf.text.pdf.NumberArray;
import com.itextpdf.text.pdf.OutputStreamCounter;
import com.itextpdf.text.pdf.PRIndirectReference;
import com.itextpdf.text.pdf.PRStream;
import com.itextpdf.text.pdf.PageResources;
import com.itextpdf.text.pdf.PdfAction;
import com.itextpdf.text.pdf.PdfAnnotation;
import com.itextpdf.text.pdf.PdfAppearance;
import com.itextpdf.text.pdf.PdfArray;
import com.itextpdf.text.pdf.PdfContentByte;
import com.itextpdf.text.pdf.PdfContents;
import com.itextpdf.text.pdf.PdfDate;
import com.itextpdf.text.pdf.PdfDictionary;
import com.itextpdf.text.pdf.PdfDocument;
import com.itextpdf.text.pdf.PdfEncryption;
import com.itextpdf.text.pdf.PdfException;
import com.itextpdf.text.pdf.PdfFormField;
import com.itextpdf.text.pdf.PdfImportedPage;
import com.itextpdf.text.pdf.PdfIndirectObject;
import com.itextpdf.text.pdf.PdfIndirectReference;
import com.itextpdf.text.pdf.PdfLayer;
import com.itextpdf.text.pdf.PdfName;
import com.itextpdf.text.pdf.PdfNameTree;
import com.itextpdf.text.pdf.PdfNumber;
import com.itextpdf.text.pdf.PdfOCG;
import com.itextpdf.text.pdf.PdfOCProperties;
import com.itextpdf.text.pdf.PdfObject;
import com.itextpdf.text.pdf.PdfPageLabels;
import com.itextpdf.text.pdf.PdfReader;
import com.itextpdf.text.pdf.PdfReaderInstance;
import com.itextpdf.text.pdf.PdfRectangle;
import com.itextpdf.text.pdf.PdfStamper;
import com.itextpdf.text.pdf.PdfStream;
import com.itextpdf.text.pdf.PdfString;
import com.itextpdf.text.pdf.PdfTemplate;
import com.itextpdf.text.pdf.PdfTransition;
import com.itextpdf.text.pdf.PdfWriter;
import com.itextpdf.text.pdf.RandomAccessFileOrArray;
import com.itextpdf.text.pdf.StampContent;
import com.itextpdf.text.pdf.XfaForm;
import com.itextpdf.text.pdf.collection.PdfCollection;
import com.itextpdf.text.pdf.internal.PdfVersionImp;
import com.itextpdf.text.pdf.internal.PdfViewerPreferencesImp;
import com.itextpdf.text.xml.xmp.PdfProperties;
import com.itextpdf.text.xml.xmp.XmpBasicProperties;
import com.itextpdf.text.xml.xmp.XmpWriter;
import com.itextpdf.xmp.XMPException;
import com.itextpdf.xmp.XMPMeta;
import com.itextpdf.xmp.XMPMetaFactory;
import com.itextpdf.xmp.options.SerializeOptions;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.ListIterator;
import java.util.Map;
import java.util.Set;

class PdfStamperImp
extends PdfWriter {
    protected Counter COUNTER = CounterFactory.getCounter(PdfStamper.class);
    private double[] DEFAULT_MATRIX = new double[]{1.0, 0.0, 0.0, 1.0, 0.0, 0.0};
    protected AcroFields acroFields;
    protected boolean append;
    protected boolean closed = false;
    protected HashSet<PdfTemplate> fieldTemplates = new HashSet();
    protected boolean fieldsAdded = false;
    protected RandomAccessFileOrArray file;
    protected boolean flat = false;
    protected boolean flatFreeText = false;
    protected boolean flatannotations = false;
    protected int initialXrefSize;
    protected IntHashtable marked;
    IntHashtable myXref = new IntHashtable();
    protected int[] namePtr = new int[]{0};
    protected HashMap<Object, PdfObject> namedDestinations = new HashMap();
    protected PdfAction openAction;
    private boolean originalLayersAreRead = false;
    HashMap<PdfDictionary, PageStamp> pagesToContent = new HashMap();
    protected HashSet<String> partialFlattening = new HashSet();
    PdfReader reader;
    HashMap<PdfReader, RandomAccessFileOrArray> readers2file = new HashMap();
    HashMap<PdfReader, IntHashtable> readers2intrefs = new HashMap();
    private boolean rotateContents = true;
    protected int sigFlags = 0;
    protected boolean useVp = false;
    protected PdfViewerPreferencesImp viewerPreferences = new PdfViewerPreferencesImp();

    protected PdfStamperImp(PdfReader pdfReader, OutputStream arrby, char c, boolean bl) throws DocumentException, IOException {
        super(new PdfDocument(), (OutputStream)arrby);
        if (!pdfReader.isOpenedWithFullPermissions()) {
            throw new BadPasswordException(MessageLocalization.getComposedMessage("pdfreader.not.opened.with.owner.password", new Object[0]));
        }
        if (pdfReader.isTampered()) {
            throw new DocumentException(MessageLocalization.getComposedMessage("the.original.document.was.reused.read.it.again.from.file", new Object[0]));
        }
        pdfReader.setTampered(true);
        this.reader = pdfReader;
        this.file = pdfReader.getSafeFile();
        this.append = bl;
        if (pdfReader.isEncrypted() && (bl || PdfReader.unethicalreading)) {
            this.crypto = new PdfEncryption(pdfReader.getDecrypt());
        }
        if (bl) {
            int n;
            if (pdfReader.isRebuilt()) {
                throw new DocumentException(MessageLocalization.getComposedMessage("append.mode.requires.a.document.without.errors.even.if.recovery.was.possible", new Object[0]));
            }
            this.pdf_version.setAppendmode(true);
            if (c == '\u0000') {
                this.pdf_version.setPdfVersion(pdfReader.getPdfVersion());
            } else {
                this.pdf_version.setPdfVersion(c);
            }
            arrby = new byte[8192];
            while ((n = this.file.read(arrby)) > 0) {
                this.os.write(arrby, 0, n);
            }
            this.prevxref = pdfReader.getLastXref();
            pdfReader.setAppendable(true);
        } else if (c == '\u0000') {
            super.setPdfVersion(pdfReader.getPdfVersion());
        } else {
            super.setPdfVersion(c);
        }
        if (pdfReader.isTagged()) {
            this.setTagged();
        }
        super.open();
        this.pdf.addWriter(this);
        if (bl) {
            this.body.setRefnum(pdfReader.getXrefSize());
            this.marked = new IntHashtable();
            if (pdfReader.isNewXrefType()) {
                this.fullCompression = true;
            }
            if (pdfReader.isHybridXref()) {
                this.fullCompression = false;
            }
        }
        this.initialXrefSize = pdfReader.getXrefSize();
        this.readColorProfile();
    }

    private void addOrder(PdfLayer pdfLayer, PdfArray pdfArray, Map<String, PdfLayer> map) {
        int n = 0;
        while (n < pdfArray.size()) {
            int n2;
            Object object = pdfArray.getPdfObject(n);
            if (object.isIndirect()) {
                object = map.get(object.toString());
                n2 = n;
                if (object != null) {
                    object.setOnPanel(true);
                    this.registerLayer((PdfOCG)object);
                    if (pdfLayer != null) {
                        pdfLayer.addChild((PdfLayer)object);
                    }
                    int n3 = pdfArray.size();
                    int n4 = n + 1;
                    n2 = n;
                    if (n3 > n4) {
                        n2 = n;
                        if (pdfArray.getPdfObject(n4).isArray()) {
                            this.addOrder((PdfLayer)object, (PdfArray)pdfArray.getPdfObject(n4), map);
                            n2 = n4;
                        }
                    }
                }
            } else {
                n2 = n;
                if (object.isArray()) {
                    if ((object = (PdfArray)object).isEmpty()) {
                        return;
                    }
                    PdfObject pdfObject = object.getPdfObject(0);
                    if (pdfObject.isString()) {
                        pdfObject = new PdfLayer(pdfObject.toString());
                        pdfObject.setOnPanel(true);
                        this.registerLayer((PdfOCG)((Object)pdfObject));
                        if (pdfLayer != null) {
                            pdfLayer.addChild((PdfLayer)pdfObject);
                        }
                        PdfArray pdfArray2 = new PdfArray();
                        object = object.listIterator();
                        while (object.hasNext()) {
                            pdfArray2.add((PdfObject)object.next());
                        }
                        this.addOrder((PdfLayer)pdfObject, pdfArray2, map);
                        n2 = n;
                    } else {
                        this.addOrder(pdfLayer, (PdfArray)pdfObject, map);
                        n2 = n;
                    }
                }
            }
            n = n2 + 1;
        }
    }

    static void findAllObjects(PdfReader pdfReader, PdfObject pdfObject, IntHashtable intHashtable) {
        if (pdfObject == null) {
            return;
        }
        int n = pdfObject.type();
        if (n != 10) {
            switch (n) {
                default: {
                    return;
                }
                case 6: 
                case 7: {
                    pdfObject = (PdfDictionary)pdfObject;
                    Iterator<PdfName> iterator2 = pdfObject.getKeys().iterator();
                    while (iterator2.hasNext()) {
                        PdfStamperImp.findAllObjects(pdfReader, pdfObject.get(iterator2.next()), intHashtable);
                    }
                    return;
                }
                case 5: 
            }
            pdfObject = (PdfArray)pdfObject;
            for (n = 0; n < pdfObject.size(); ++n) {
                PdfStamperImp.findAllObjects(pdfReader, pdfObject.getPdfObject(n), intHashtable);
            }
            return;
        }
        PRIndirectReference pRIndirectReference = (PRIndirectReference)pdfObject;
        if (pdfReader != pRIndirectReference.getReader()) {
            return;
        }
        if (intHashtable.containsKey(pRIndirectReference.getNumber())) {
            return;
        }
        intHashtable.put(pRIndirectReference.getNumber(), 1);
        PdfStamperImp.findAllObjects(pdfReader, PdfReader.getPdfObject(pdfObject), intHashtable);
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Lifted jumps to return sites
     */
    private void flattenAnnotations(boolean var1_1) {
        if (this.append) {
            if (var1_1 == false) throw new IllegalArgumentException(MessageLocalization.getComposedMessage("annotation.flattening.is.not.supported.in.append.mode", new Object[0]));
            throw new IllegalArgumentException(MessageLocalization.getComposedMessage("freetext.flattening.is.not.supported.in.append.mode", new Object[0]));
        }
        var3_2 = 1;
        while (var3_2 <= this.reader.getNumberOfPages()) {
            block22 : {
                var8_8 = this.reader.getPageN(var3_2);
                var9_9 = var8_8.getAsArray(PdfName.ANNOTS);
                if (var9_9 == null) break block22;
                var2_3 = 0;
                while (var2_3 < var9_9.size()) {
                    block24 : {
                        block26 : {
                            block25 : {
                                block23 : {
                                    var6_6 = var9_9.getDirectObject(var2_3);
                                    if (!(var6_6 instanceof PdfIndirectReference) || var6_6.isIndirect()) break block23;
                                    var5_5 = var2_3;
                                    break block24;
                                }
                                if (var6_6 instanceof PdfDictionary) break block25;
                                var5_5 = var2_3;
                                break block24;
                            }
                            var10_10 = (PdfDictionary)var6_6;
                            if (!var1_1) break block26;
                            if (var10_10.get(PdfName.SUBTYPE).equals(PdfName.FREETEXT)) ** GOTO lbl-1000
                            var5_5 = var2_3;
                            break block24;
                        }
                        if (var10_10.get(PdfName.SUBTYPE).equals(PdfName.WIDGET)) {
                            var5_5 = var2_3;
                        } else lbl-1000: // 2 sources:
                        {
                            var4_4 = (var6_6 = var10_10.getAsNumber(PdfName.F)) != null ? var6_6.intValue() : 0;
                            var5_5 = var2_3;
                            if ((var4_4 & 4) != 0) {
                                var5_5 = var2_3;
                                if ((var4_4 & 2) == 0) {
                                    var7_7 = var10_10.get(PdfName.AP);
                                    if (var7_7 == null) {
                                        var5_5 = var2_3;
                                    } else {
                                        var6_6 = var7_7;
                                        if (var7_7 instanceof PdfIndirectReference) {
                                            var6_6 = PdfReader.getPdfObject((PdfObject)var7_7);
                                        }
                                        var13_14 = (PdfDictionary)var6_6;
                                        var6_6 = var13_14.get(PdfName.N);
                                        var11_11 = var13_14.getAsStream(PdfName.N);
                                        var7_7 = null;
                                        var12_12 = PdfReader.getPdfObject((PdfObject)var6_6);
                                        if (var6_6 instanceof PdfIndirectReference && !var6_6.isIndirect()) {
                                            var6_6 = new PdfAppearance((PdfIndirectReference)var6_6);
                                        } else if (var12_12 instanceof PdfStream) {
                                            ((PdfDictionary)var12_12).put(PdfName.SUBTYPE, PdfName.FORM);
                                            var6_6 = new PdfAppearance((PdfIndirectReference)var6_6);
                                        } else {
                                            var6_6 = var7_7;
                                            if (var12_12.isDictionary()) {
                                                var13_15 = var13_14.getAsName(PdfName.AS);
                                                var6_6 = var7_7;
                                                if (var13_15 != null) {
                                                    var12_12 = (PdfIndirectReference)((PdfDictionary)var12_12).get(var13_15);
                                                    var6_6 = var7_7;
                                                    if (var12_12 != null) {
                                                        var6_6 = var7_7 = new PdfAppearance((PdfIndirectReference)var12_12);
                                                        if (var12_12.isIndirect()) {
                                                            ((PdfDictionary)PdfReader.getPdfObject((PdfObject)var12_12)).put(PdfName.SUBTYPE, PdfName.FORM);
                                                            var6_6 = var7_7;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        var5_5 = var2_3;
                                        if (var6_6 != null) {
                                            var7_7 = PdfReader.getNormalizedRectangle(var10_10.getAsArray(PdfName.RECT));
                                            var12_12 = PdfReader.getNormalizedRectangle(var11_11.getAsArray(PdfName.BBOX));
                                            var10_10 = this.getOverContent(var3_2);
                                            var10_10.setLiteral("Q ");
                                            if (var11_11.getAsArray(PdfName.MATRIX) != null && !Arrays.equals(this.DEFAULT_MATRIX, var11_11.getAsArray(PdfName.MATRIX).asDoubleArray())) {
                                                var11_11 = this.transformBBoxByMatrix((Rectangle)var12_12, var11_11.getAsArray(PdfName.MATRIX).asDoubleArray());
                                                var10_10.addTemplate((PdfTemplate)var6_6, var7_7.getWidth() / var11_11.getWidth(), 0.0f, 0.0f, var7_7.getHeight() / var11_11.getHeight(), var7_7.getLeft(), var7_7.getBottom());
                                            } else {
                                                var10_10.addTemplate((PdfTemplate)var6_6, var7_7.getWidth() / var12_12.getWidth(), 0.0f, 0.0f, var7_7.getHeight() / var12_12.getHeight(), var7_7.getLeft(), var7_7.getBottom());
                                            }
                                            var10_10.setLiteral("q ");
                                            var9_9.remove(var2_3);
                                            var5_5 = var2_3 - 1;
                                        }
                                    }
                                }
                            }
                        }
                    }
                    var2_3 = var5_5 + 1;
                }
                if (var9_9.isEmpty()) {
                    PdfReader.killIndirect(var8_8.get(PdfName.ANNOTS));
                    var8_8.remove(PdfName.ANNOTS);
                }
            }
            ++var3_2;
        }
    }

    private PdfArray getLastChildInNameTree(PdfDictionary pdfDictionary) {
        PdfArray pdfArray = pdfDictionary.getAsArray(PdfName.KIDS);
        if (pdfArray != null) {
            return this.getLastChildInNameTree(pdfArray.getAsDict(pdfArray.size() - 1));
        }
        return pdfDictionary.getAsArray(PdfName.NAMES);
    }

    private static void moveRectangle(PdfDictionary pdfDictionary, PdfReader object, int n, PdfName pdfName, String string2) {
        if ((object = object.getBoxSize(n, string2)) == null) {
            pdfDictionary.remove(pdfName);
            return;
        }
        pdfDictionary.put(pdfName, new PdfRectangle((Rectangle)object));
    }

    private void outlineTravel(PRIndirectReference pRIndirectReference) {
        while (pRIndirectReference != null) {
            PdfDictionary pdfDictionary = (PdfDictionary)PdfReader.getPdfObjectRelease(pRIndirectReference);
            PRIndirectReference pRIndirectReference2 = (PRIndirectReference)pdfDictionary.get(PdfName.FIRST);
            if (pRIndirectReference2 != null) {
                this.outlineTravel(pRIndirectReference2);
            }
            PdfReader.killIndirect(pdfDictionary.get(PdfName.DEST));
            PdfReader.killIndirect(pdfDictionary.get(PdfName.A));
            PdfReader.killIndirect(pRIndirectReference);
            pRIndirectReference = (PRIndirectReference)pdfDictionary.get(PdfName.NEXT);
        }
    }

    private Rectangle transformBBoxByMatrix(Rectangle object, double[] arrd) {
        ArrayList<Double> arrayList = new ArrayList<Double>();
        ArrayList<Double> arrayList2 = new ArrayList<Double>();
        Point point = this.transformPoint(object.getLeft(), object.getBottom(), arrd);
        arrayList.add(point.x);
        arrayList2.add(point.y);
        point = this.transformPoint(object.getRight(), object.getTop(), arrd);
        arrayList.add(point.x);
        arrayList2.add(point.y);
        point = this.transformPoint(object.getLeft(), object.getTop(), arrd);
        arrayList.add(point.x);
        arrayList2.add(point.y);
        object = this.transformPoint(object.getRight(), object.getBottom(), arrd);
        arrayList.add(object.x);
        arrayList2.add(object.y);
        return new Rectangle(((Double)Collections.min(arrayList)).floatValue(), ((Double)Collections.min(arrayList2)).floatValue(), ((Double)Collections.max(arrayList)).floatValue(), ((Double)Collections.max(arrayList2)).floatValue());
    }

    private Point transformPoint(double d, double d2, double[] arrd) {
        Point point = new Point();
        point.x = arrd[0] * d + arrd[2] * d2 + arrd[4];
        point.y = arrd[1] * d + arrd[3] * d2 + arrd[5];
        return point;
    }

    @Override
    public void addAnnotation(PdfAnnotation pdfAnnotation) {
        throw new RuntimeException(MessageLocalization.getComposedMessage("unsupported.in.this.context.use.pdfstamper.addannotation", new Object[0]));
    }

    @Override
    void addAnnotation(PdfAnnotation pdfAnnotation, int n) {
        if (pdfAnnotation.isAnnotation()) {
            pdfAnnotation.setPage(n);
        }
        this.addAnnotation(pdfAnnotation, this.reader.getPageN(n));
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    void addAnnotation(PdfAnnotation serializable, PdfDictionary serializable2) {
        try {
            ArrayList<PdfAnnotation> arrayList = new ArrayList<PdfAnnotation>();
            if (serializable.isForm()) {
                this.fieldsAdded = true;
                this.getAcroFields();
                serializable = (PdfFormField)serializable;
                if (serializable.getParent() != null) {
                    return;
                }
                this.expandFields((PdfFormField)serializable, arrayList);
            } else {
                arrayList.add((PdfAnnotation)serializable);
            }
            serializable = serializable2;
            for (int i = 0; i < arrayList.size(); ++i) {
                PdfAnnotation pdfAnnotation = arrayList.get(i);
                if (pdfAnnotation.getPlaceInPage() > 0) {
                    serializable = this.reader.getPageN(pdfAnnotation.getPlaceInPage());
                }
                if (pdfAnnotation.isForm()) {
                    if (!pdfAnnotation.isUsed() && (serializable2 = pdfAnnotation.getTemplates()) != null) {
                        this.fieldTemplates.addAll((Collection<PdfTemplate>)((Object)serializable2));
                    }
                    if ((serializable2 = (PdfFormField)pdfAnnotation).getParent() == null) {
                        this.addDocumentField(serializable2.getIndirectReference());
                    }
                }
                if (pdfAnnotation.isAnnotation()) {
                    serializable2 = PdfReader.getPdfObject(serializable.get(PdfName.ANNOTS), (PdfObject)serializable);
                    if (serializable2 != null && serializable2.isArray()) {
                        serializable2 = (PdfArray)serializable2;
                    } else {
                        serializable2 = new PdfArray();
                        serializable.put(PdfName.ANNOTS, (PdfObject)serializable2);
                        this.markUsed((PdfObject)serializable);
                    }
                    serializable2.add(pdfAnnotation.getIndirectReference());
                    this.markUsed((PdfObject)serializable2);
                    if (!(pdfAnnotation.isUsed() || (serializable2 = (PdfRectangle)pdfAnnotation.get(PdfName.RECT)) == null || serializable2.left() == 0.0f && serializable2.right() == 0.0f && serializable2.top() == 0.0f && serializable2.bottom() == 0.0f)) {
                        int n = this.reader.getPageRotation((PdfDictionary)serializable);
                        Rectangle rectangle = this.reader.getPageSizeWithRotation((PdfDictionary)serializable);
                        if (n != 90) {
                            if (n != 180) {
                                if (n == 270) {
                                    pdfAnnotation.put(PdfName.RECT, new PdfRectangle(serializable2.bottom(), rectangle.getRight() - serializable2.left(), serializable2.top(), rectangle.getRight() - serializable2.right()));
                                }
                            } else {
                                pdfAnnotation.put(PdfName.RECT, new PdfRectangle(rectangle.getRight() - serializable2.left(), rectangle.getTop() - serializable2.bottom(), rectangle.getRight() - serializable2.right(), rectangle.getTop() - serializable2.top()));
                            }
                        } else {
                            pdfAnnotation.put(PdfName.RECT, new PdfRectangle(rectangle.getTop() - serializable2.top(), serializable2.right(), rectangle.getTop() - serializable2.bottom(), serializable2.left()));
                        }
                    }
                }
                if (pdfAnnotation.isUsed()) continue;
                pdfAnnotation.setUsed();
                this.addToBody((PdfObject)pdfAnnotation, pdfAnnotation.getIndirectReference());
            }
            return;
        }
        catch (IOException iOException) {
            throw new ExceptionConverter(iOException);
        }
    }

    public void addComments(FdfReader object) throws IOException {
        if (this.readers2intrefs.containsKey(object)) {
            return;
        }
        Object object2 = object.getCatalog().getAsDict(PdfName.FDF);
        if (object2 == null) {
            return;
        }
        if ((object2 = object2.getAsArray(PdfName.ANNOTS)) != null) {
            int n;
            Object object3;
            int n2;
            PdfObject pdfObject;
            PdfObject pdfObject2;
            if (object2.size() == 0) {
                return;
            }
            int n3 = 0;
            this.registerReader((PdfReader)object, false);
            Object object4 = new IntHashtable();
            Serializable serializable = new HashMap();
            ArrayList<Object> arrayList = new ArrayList<Object>();
            for (n2 = 0; n2 < object2.size(); ++n2) {
                object3 = object2.getPdfObject(n2);
                pdfObject2 = (PdfDictionary)PdfReader.getPdfObject((PdfObject)object3);
                pdfObject = pdfObject2.getAsNumber(PdfName.PAGE);
                if (pdfObject == null || pdfObject.intValue() >= this.reader.getNumberOfPages()) continue;
                PdfStamperImp.findAllObjects((PdfReader)object, (PdfObject)object3, (IntHashtable)object4);
                arrayList.add(object3);
                if (object3.type() != 10 || (pdfObject2 = PdfReader.getPdfObject(pdfObject2.get(PdfName.NM))) == null || pdfObject2.type() != 3) continue;
                serializable.put(pdfObject2.toString(), object3);
            }
            object3 = object4.getKeys();
            n2 = 0;
            do {
                if (n2 >= ((int[])object3).length) break;
                n = object3[n2];
                object2 = object4 = object.getPdfObject(n);
                if (object4.type() == 6) {
                    pdfObject2 = (PdfDictionary)object4;
                    pdfObject = PdfReader.getPdfObject(pdfObject2.get(PdfName.IRT));
                    object2 = object4;
                    if (pdfObject != null) {
                        object2 = object4;
                        if (pdfObject.type() == 3) {
                            pdfObject = (PdfObject)serializable.get(pdfObject.toString());
                            object2 = object4;
                            if (pdfObject != null) {
                                object2 = new PdfDictionary();
                                object2.merge((PdfDictionary)pdfObject2);
                                object2.put(PdfName.IRT, pdfObject);
                            }
                        }
                    }
                }
                this.addToBody((PdfObject)object2, this.getNewObjectNumber((PdfReader)object, n, 0));
                ++n2;
            } while (true);
            for (n = n3; n < arrayList.size(); ++n) {
                object4 = (PdfObject)arrayList.get(n);
                object = ((PdfDictionary)PdfReader.getPdfObject((PdfObject)object4)).getAsNumber(PdfName.PAGE);
                serializable = this.reader.getPageN(object.intValue() + 1);
                object = object2 = (PdfArray)PdfReader.getPdfObject(serializable.get(PdfName.ANNOTS), (PdfObject)serializable);
                if (object2 == null) {
                    object = new PdfArray();
                    serializable.put(PdfName.ANNOTS, (PdfObject)object);
                    this.markUsed((PdfObject)serializable);
                }
                this.markUsed((PdfObject)object);
                object.add((PdfObject)object4);
            }
            return;
        }
    }

    void addDocumentField(PdfIndirectReference pdfIndirectReference) {
        PdfObject pdfObject = this.reader.getCatalog();
        PdfObject pdfObject2 = (PdfDictionary)PdfReader.getPdfObject(pdfObject.get(PdfName.ACROFORM), pdfObject);
        PdfDictionary pdfDictionary = pdfObject2;
        if (pdfObject2 == null) {
            pdfDictionary = new PdfDictionary();
            pdfObject.put(PdfName.ACROFORM, pdfDictionary);
            this.markUsed(pdfObject);
        }
        pdfObject = (PdfArray)PdfReader.getPdfObject(pdfDictionary.get(PdfName.FIELDS), pdfDictionary);
        pdfObject2 = pdfObject;
        if (pdfObject == null) {
            pdfObject2 = new PdfArray();
            pdfDictionary.put(PdfName.FIELDS, pdfObject2);
            this.markUsed(pdfDictionary);
        }
        if (!pdfDictionary.contains(PdfName.DA)) {
            pdfDictionary.put(PdfName.DA, new PdfString("/Helv 0 Tf 0 g "));
            this.markUsed(pdfDictionary);
        }
        pdfObject2.add(pdfIndirectReference);
        this.markUsed(pdfObject2);
    }

    protected void addFieldResources() throws IOException {
        PdfDictionary pdfDictionary;
        if (this.fieldTemplates.isEmpty()) {
            return;
        }
        Object object = this.reader.getCatalog();
        PdfDictionary pdfDictionary2 = pdfDictionary = (PdfDictionary)PdfReader.getPdfObject(object.get(PdfName.ACROFORM), (PdfObject)object);
        if (pdfDictionary == null) {
            pdfDictionary2 = new PdfDictionary();
            object.put(PdfName.ACROFORM, pdfDictionary2);
            this.markUsed((PdfObject)object);
        }
        object = (PdfDictionary)PdfReader.getPdfObject(pdfDictionary2.get(PdfName.DR), pdfDictionary2);
        pdfDictionary = object;
        if (object == null) {
            pdfDictionary = new PdfDictionary();
            pdfDictionary2.put(PdfName.DR, pdfDictionary);
            this.markUsed(pdfDictionary2);
        }
        this.markUsed(pdfDictionary);
        object = this.fieldTemplates.iterator();
        while (object.hasNext()) {
            PdfFormField.mergeResources(pdfDictionary, (PdfDictionary)((PdfTemplate)object.next()).getResources(), this);
        }
        PdfDictionary pdfDictionary3 = pdfDictionary.getAsDict(PdfName.FONT);
        object = pdfDictionary3;
        if (pdfDictionary3 == null) {
            object = new PdfDictionary();
            pdfDictionary.put(PdfName.FONT, (PdfObject)object);
        }
        if (!object.contains(PdfName.HELV)) {
            pdfDictionary = new PdfDictionary(PdfName.FONT);
            pdfDictionary.put(PdfName.BASEFONT, PdfName.HELVETICA);
            pdfDictionary.put(PdfName.ENCODING, PdfName.WIN_ANSI_ENCODING);
            pdfDictionary.put(PdfName.NAME, PdfName.HELV);
            pdfDictionary.put(PdfName.SUBTYPE, PdfName.TYPE1);
            object.put(PdfName.HELV, this.addToBody(pdfDictionary).getIndirectReference());
        }
        if (!object.contains(PdfName.ZADB)) {
            pdfDictionary = new PdfDictionary(PdfName.FONT);
            pdfDictionary.put(PdfName.BASEFONT, PdfName.ZAPFDINGBATS);
            pdfDictionary.put(PdfName.NAME, PdfName.ZADB);
            pdfDictionary.put(PdfName.SUBTYPE, PdfName.TYPE1);
            object.put(PdfName.ZADB, this.addToBody(pdfDictionary).getIndirectReference());
        }
        if (pdfDictionary2.get(PdfName.DA) == null) {
            pdfDictionary2.put(PdfName.DA, new PdfString("/Helv 0 Tf 0 g "));
            this.markUsed(pdfDictionary2);
        }
    }

    protected void addFileAttachments() throws IOException {
        Serializable serializable = this.pdf.getDocumentFileAttachment();
        if (serializable.isEmpty()) {
            return;
        }
        PdfDictionary object2 = this.reader.getCatalog();
        Serializable serializable2 = (PdfDictionary)PdfReader.getPdfObject(object2.get(PdfName.NAMES), object2);
        PdfDictionary pdfDictionary = serializable2;
        if (serializable2 == null) {
            pdfDictionary = new PdfDictionary();
            object2.put(PdfName.NAMES, pdfDictionary);
            this.markUsed(object2);
        }
        this.markUsed(pdfDictionary);
        serializable2 = PdfNameTree.readTree((PdfDictionary)PdfReader.getPdfObjectRelease(pdfDictionary.get(PdfName.EMBEDDEDFILES)));
        for (Map.Entry entry : serializable.entrySet()) {
            CharSequence charSequence = (String)entry.getKey();
            int n = 0;
            charSequence = new StringBuilder((String)charSequence);
            while (serializable2.containsKey(charSequence.toString())) {
                charSequence.append(" ");
                charSequence.append(++n);
            }
            serializable2.put(charSequence.toString(), entry.getValue());
        }
        serializable2 = PdfNameTree.writeTree((HashMap<String, ? extends PdfObject>)serializable2, this);
        serializable = pdfDictionary.get(PdfName.EMBEDDEDFILES);
        if (serializable != null) {
            PdfReader.killIndirect((PdfObject)serializable);
        }
        pdfDictionary.put(PdfName.EMBEDDEDFILES, this.addToBody((PdfObject)serializable2).getIndirectReference());
    }

    @Override
    public void addViewerPreference(PdfName pdfName, PdfObject pdfObject) {
        this.useVp = true;
        this.viewerPreferences.addViewerPreference(pdfName, pdfObject);
    }

    protected void alterContents() throws IOException {
        for (PageStamp pageStamp : this.pagesToContent.values()) {
            PdfDictionary pdfDictionary = pageStamp.pageN;
            this.markUsed(pdfDictionary);
            PdfObject pdfObject = PdfReader.getPdfObject(pdfDictionary.get(PdfName.CONTENTS), pdfDictionary);
            if (pdfObject == null) {
                pdfObject = new PdfArray();
                pdfDictionary.put(PdfName.CONTENTS, pdfObject);
            } else if (pdfObject.isArray()) {
                pdfObject = new PdfArray((PdfArray)pdfObject);
                pdfDictionary.put(PdfName.CONTENTS, pdfObject);
            } else if (pdfObject.isStream()) {
                pdfObject = new PdfArray();
                pdfObject.add(pdfDictionary.get(PdfName.CONTENTS));
                pdfDictionary.put(PdfName.CONTENTS, pdfObject);
            } else {
                pdfObject = new PdfArray();
                pdfDictionary.put(PdfName.CONTENTS, pdfObject);
            }
            ByteBuffer byteBuffer = new ByteBuffer();
            if (pageStamp.under != null) {
                byteBuffer.append(PdfContents.SAVESTATE);
                this.applyRotation(pdfDictionary, byteBuffer);
                byteBuffer.append(pageStamp.under.getInternalBuffer());
                byteBuffer.append(PdfContents.RESTORESTATE);
            }
            if (pageStamp.over != null) {
                byteBuffer.append(PdfContents.SAVESTATE);
            }
            Object object = new PdfStream(byteBuffer.toByteArray());
            object.flateCompress(this.compressionLevel);
            pdfObject.addFirst(this.addToBody((PdfObject)object).getIndirectReference());
            byteBuffer.reset();
            if (pageStamp.over != null) {
                byteBuffer.append(' ');
                byteBuffer.append(PdfContents.RESTORESTATE);
                object = pageStamp.over.getInternalBuffer();
                byteBuffer.append(object.getBuffer(), 0, pageStamp.replacePoint);
                byteBuffer.append(PdfContents.SAVESTATE);
                this.applyRotation(pdfDictionary, byteBuffer);
                byteBuffer.append(object.getBuffer(), pageStamp.replacePoint, object.size() - pageStamp.replacePoint);
                byteBuffer.append(PdfContents.RESTORESTATE);
                pdfDictionary = new PdfStream(byteBuffer.toByteArray());
                pdfDictionary.flateCompress(this.compressionLevel);
                pdfObject.add(this.addToBody(pdfDictionary).getIndirectReference());
            }
            this.alterResources(pageStamp);
        }
    }

    void alterResources(PageStamp pageStamp) {
        pageStamp.pageN.put(PdfName.RESOURCES, pageStamp.pageResources.getResources());
    }

    void applyRotation(PdfDictionary object, ByteBuffer byteBuffer) {
        if (!this.rotateContents) {
            return;
        }
        int n = (object = this.reader.getPageSizeWithRotation((PdfDictionary)object)).getRotation();
        if (n != 90) {
            if (n != 180) {
                if (n != 270) {
                    return;
                }
                byteBuffer.append(PdfContents.ROTATE270);
                byteBuffer.append('0').append(' ');
                byteBuffer.append(object.getRight());
                byteBuffer.append(PdfContents.ROTATEFINAL);
                return;
            }
            byteBuffer.append(PdfContents.ROTATE180);
            byteBuffer.append(object.getRight());
            byteBuffer.append(' ');
            byteBuffer.append(object.getTop());
            byteBuffer.append(PdfContents.ROTATEFINAL);
            return;
        }
        byteBuffer.append(PdfContents.ROTATE90);
        byteBuffer.append(object.getTop());
        byteBuffer.append(' ').append('0').append(PdfContents.ROTATEFINAL);
    }

    protected void close(PdfIndirectReference pdfIndirectReference, int n) throws IOException {
        PdfObject pdfObject;
        Object object;
        Object object2;
        this.alterContents();
        int n2 = ((PRIndirectReference)this.reader.trailer.get(PdfName.ROOT)).getNumber();
        if (this.append) {
            object = this.marked.getKeys();
            for (int i = 0; i < ((int[])object).length; ++i) {
                int n3 = object[i];
                object2 = this.reader.getPdfObjectRelease(n3);
                if (object2 == null || n == n3 || n3 >= this.initialXrefSize) continue;
                pdfObject = object2.getIndRef();
                boolean bl = n3 != n2;
                this.addToBody((PdfObject)object2, (PdfIndirectReference)pdfObject, bl);
            }
            for (n = this.initialXrefSize; n < this.reader.getXrefSize(); ++n) {
                object = this.reader.getPdfObject(n);
                if (object == null) continue;
                this.addToBody((PdfObject)object, this.getNewObjectNumber(this.reader, n, 0));
            }
        } else {
            for (int i = 1; i < this.reader.getXrefSize(); ++i) {
                object = this.reader.getPdfObjectRelease(i);
                if (object == null || n == i) continue;
                int n4 = this.getNewObjectNumber(this.reader, i, 0);
                boolean bl = i != n2;
                this.addToBody((PdfObject)object, n4, bl);
            }
        }
        object2 = null;
        if (this.crypto != null) {
            object = this.append ? this.reader.getCryptoRef() : this.addToBody((PdfObject)this.crypto.getEncryptionDictionary(), false).getIndirectReference();
            pdfObject = this.crypto.getFileID(true);
            object2 = object;
            object = pdfObject;
        } else {
            object = this.reader.trailer.getAsArray(PdfName.ID);
            object = object != null && object.getAsString(0) != null ? PdfEncryption.createInfoId(object.getAsString(0).getBytes(), true) : PdfEncryption.createInfoId(PdfEncryption.createDocumentId(), true);
        }
        pdfObject = (PRIndirectReference)this.reader.trailer.get(PdfName.ROOT);
        pdfObject = new PdfIndirectReference(0, this.getNewObjectNumber(this.reader, pdfObject.getNumber(), 0));
        this.body.writeCrossReferenceTable(this.os, (PdfIndirectReference)pdfObject, pdfIndirectReference, (PdfIndirectReference)object2, (PdfObject)object, this.prevxref);
        if (this.fullCompression) {
            PdfStamperImp.writeKeyInfo(this.os);
            this.os.write(PdfStamperImp.getISOBytes("startxref\n"));
            this.os.write(PdfStamperImp.getISOBytes(String.valueOf(this.body.offset())));
            this.os.write(PdfStamperImp.getISOBytes("\n%%EOF\n"));
        } else {
            new PdfWriter.PdfTrailer(this.body.size(), this.body.offset(), (PdfIndirectReference)pdfObject, pdfIndirectReference, (PdfIndirectReference)object2, (PdfObject)object, this.prevxref).toPdf(this, this.os);
        }
        this.os.flush();
        if (this.isCloseStream()) {
            this.os.close();
        }
        this.getCounter().written(this.os.getCounter());
    }

    /*
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    protected void close(Map<String, String> object) throws IOException {
        PdfObject pdfObject2;
        int n;
        Object object2;
        PdfObject pdfObject;
        PdfDictionary pdfDictionary;
        block42 : {
            Object object4;
            PdfDate pdfDate;
            Object object3;
            PdfDictionary pdfDictionary2;
            block41 : {
                if (this.closed) {
                    return;
                }
                if (this.useVp) {
                    this.setViewerPreferences();
                }
                if (this.flat) {
                    this.flatFields();
                }
                if (this.flatFreeText) {
                    this.flatFreeTextFields();
                }
                if (this.flatannotations) {
                    this.flattenAnnotations();
                }
                this.addFieldResources();
                pdfDictionary = this.reader.getCatalog();
                this.getPdfVersion().addToCatalog(pdfDictionary);
                object2 = (PdfDictionary)PdfReader.getPdfObject(pdfDictionary.get(PdfName.ACROFORM), this.reader.getCatalog());
                if (this.acroFields != null && this.acroFields.getXfa().isChanged()) {
                    this.markUsed((PdfObject)object2);
                    if (!this.flat) {
                        this.acroFields.getXfa().setXfa(this);
                    }
                }
                if (this.sigFlags != 0 && object2 != null) {
                    object2.put(PdfName.SIGFLAGS, new PdfNumber(this.sigFlags));
                    this.markUsed((PdfObject)object2);
                    this.markUsed(pdfDictionary);
                }
                this.closed = true;
                this.addSharedObjectsToBody();
                this.setOutlines();
                this.setJavaScript();
                this.addFileAttachments();
                if (this.extraCatalog != null) {
                    pdfDictionary.mergeDifferent(this.extraCatalog);
                }
                if (this.openAction != null) {
                    pdfDictionary.put(PdfName.OPENACTION, this.openAction);
                }
                if (this.pdf.pageLabels != null) {
                    pdfDictionary.put(PdfName.PAGELABELS, this.pdf.pageLabels.getDictionary(this));
                }
                if (!this.documentOCG.isEmpty()) {
                    this.fillOCProperties(false);
                    object4 = pdfDictionary.getAsDict(PdfName.OCPROPERTIES);
                    if (object4 == null) {
                        this.reader.getCatalog().put(PdfName.OCPROPERTIES, this.OCProperties);
                    } else {
                        object4.put(PdfName.OCGS, this.OCProperties.get(PdfName.OCGS));
                        pdfObject = object4.getAsDict(PdfName.D);
                        object2 = pdfObject;
                        if (pdfObject == null) {
                            object2 = new PdfDictionary();
                            object4.put(PdfName.D, (PdfObject)object2);
                        }
                        object2.put(PdfName.ORDER, this.OCProperties.getAsDict(PdfName.D).get(PdfName.ORDER));
                        object2.put(PdfName.RBGROUPS, this.OCProperties.getAsDict(PdfName.D).get(PdfName.RBGROUPS));
                        object2.put(PdfName.OFF, this.OCProperties.getAsDict(PdfName.D).get(PdfName.OFF));
                        object2.put(PdfName.AS, this.OCProperties.getAsDict(PdfName.D).get(PdfName.AS));
                    }
                    PdfWriter.checkPdfIsoConformance(this, 7, this.OCProperties);
                }
                n = (pdfObject = this.reader.getTrailer().getAsIndirectObject(PdfName.INFO)) != null ? pdfObject.getNumber() : -1;
                object4 = this.reader.getTrailer().getAsDict(PdfName.INFO);
                Object var9_10 = null;
                object2 = object4 != null && object4.get(PdfName.PRODUCER) != null ? object4.getAsString(PdfName.PRODUCER).toUnicodeString() : null;
                object3 = Version.getInstance();
                if (object2 != null && object3.getVersion().indexOf(object3.getProduct()) != -1) {
                    int n2 = object2.indexOf("; modified using");
                    object2 = n2 == -1 ? new StringBuffer((String)object2) : new StringBuffer(object2.substring(0, n2));
                    object2.append("; modified using ");
                    object2.append(object3.getVersion());
                    object3 = object2.toString();
                } else {
                    object3 = object3.getVersion();
                }
                pdfDictionary2 = new PdfDictionary();
                if (object4 != null) {
                    for (PdfName pdfName : object4.getKeys()) {
                        pdfDictionary2.put(pdfName, PdfReader.getPdfObject(object4.get(pdfName)));
                    }
                }
                if (object != null) {
                    for (Map.Entry entry : object.entrySet()) {
                        object4 = new PdfName((String)entry.getKey());
                        String string2 = (String)entry.getValue();
                        if (string2 == null) {
                            pdfDictionary2.remove((PdfName)object4);
                            continue;
                        }
                        pdfDictionary2.put((PdfName)object4, new PdfString(string2, "UnicodeBig"));
                    }
                }
                pdfDate = new PdfDate();
                pdfDictionary2.put(PdfName.MODDATE, pdfDate);
                pdfDictionary2.put(PdfName.PRODUCER, new PdfString((String)object3, "UnicodeBig"));
                pdfObject = this.append ? (pdfObject == null ? this.addToBody((PdfObject)pdfDictionary2, false).getIndirectReference() : this.addToBody((PdfObject)pdfDictionary2, pdfObject.getNumber(), false).getIndirectReference()) : this.addToBody((PdfObject)pdfDictionary2, false).getIndirectReference();
                pdfObject2 = PdfReader.getPdfObject(pdfDictionary.get(PdfName.METADATA));
                if (pdfObject2 != null && pdfObject2.isStream()) {
                    object2 = PdfReader.getStreamBytesRaw((PRStream)pdfObject2);
                    PdfReader.killIndirect(pdfDictionary.get(PdfName.METADATA));
                } else {
                    object2 = null;
                }
                if (this.xmpMetadata != null) {
                    byte[] arrby = this.xmpMetadata;
                    object4 = var9_10;
                } else {
                    object4 = var9_10;
                    byte[] arrby = object2;
                    if (this.xmpWriter != null) {
                        try {
                            object4 = new ByteArrayOutputStream();
                            PdfProperties.setProducer(this.xmpWriter.getXmpMeta(), (String)object3);
                            XmpBasicProperties.setModDate(this.xmpWriter.getXmpMeta(), pdfDate.getW3CDate());
                            XmpBasicProperties.setMetaDataDate(this.xmpWriter.getXmpMeta(), pdfDate.getW3CDate());
                            this.xmpWriter.serialize((OutputStream)object4);
                            this.xmpWriter.close();
                            object4 = new PdfStream(object4.toByteArray());
                            Object object5 = object2;
                            break block41;
                        }
                        catch (XMPException xMPException) {}
                        this.xmpWriter = null;
                        Object object6 = object2;
                        object4 = var9_10;
                    }
                }
            }
            object2 = object4;
            if (object4 == null) {
                void var8_22;
                object2 = object4;
                if (var8_22 != null) {
                    try {
                        object2 = new ByteArrayOutputStream();
                        if (object != null && this.xmpMetadata == null) {
                            this.createXmpWriter((ByteArrayOutputStream)object2, pdfDictionary2).close();
                        } else {
                            object = XMPMetaFactory.parseFromBuffer((byte[])var8_22);
                            PdfProperties.setProducer((XMPMeta)object, (String)object3);
                            XmpBasicProperties.setModDate((XMPMeta)object, pdfDate.getW3CDate());
                            XmpBasicProperties.setMetaDataDate((XMPMeta)object, pdfDate.getW3CDate());
                            object4 = new SerializeOptions();
                            object4.setPadding(2000);
                            XMPMetaFactory.serialize((XMPMeta)object, (OutputStream)object2, (SerializeOptions)object4);
                        }
                        object2 = new PdfStream(object2.toByteArray());
                        break block42;
                    }
                    catch (XMPException xMPException) {}
                    object2 = new PdfStream((byte[])var8_22);
                    break block42;
                    catch (IOException iOException) {}
                    object2 = new PdfStream((byte[])var8_22);
                }
            }
        }
        if (object2 != null) {
            object2.put(PdfName.TYPE, PdfName.METADATA);
            object2.put(PdfName.SUBTYPE, PdfName.XML);
            if (this.crypto != null && !this.crypto.isMetadataEncrypted()) {
                object = new PdfArray();
                object.add(PdfName.CRYPT);
                object2.put(PdfName.FILTER, (PdfObject)object);
            }
            if (this.append && pdfObject2 != null) {
                this.body.add((PdfObject)object2, pdfObject2.getIndRef());
            } else {
                pdfDictionary.put(PdfName.METADATA, this.body.add((PdfObject)object2).getIndirectReference());
                this.markUsed(pdfDictionary);
            }
        }
        if (!this.namedDestinations.isEmpty()) {
            this.updateNamedDestinations();
        }
        this.close((PdfIndirectReference)pdfObject, n);
    }

    void correctAcroFieldPages(int n) {
        if (this.acroFields == null) {
            return;
        }
        if (n > this.reader.getNumberOfPages()) {
            return;
        }
        for (AcroFields.Item item : this.acroFields.getFields().values()) {
            for (int i = 0; i < item.size(); ++i) {
                int n2 = item.getPage(i);
                if (n2 < n) continue;
                item.forcePage(i, n2 + 1);
            }
        }
    }

    @Override
    public void createXmpMetadata() {
        try {
            this.xmpWriter = this.createXmpWriter(null, this.reader.getInfo());
            this.xmpMetadata = null;
            return;
        }
        catch (IOException iOException) {
            iOException.printStackTrace();
            return;
        }
    }

    void deleteOutlines() {
        PdfDictionary pdfDictionary = this.reader.getCatalog();
        PdfObject pdfObject = pdfDictionary.get(PdfName.OUTLINES);
        if (pdfObject == null) {
            return;
        }
        if (pdfObject instanceof PRIndirectReference) {
            pdfObject = (PRIndirectReference)pdfObject;
            this.outlineTravel((PRIndirectReference)pdfObject);
            PdfReader.killIndirect(pdfObject);
        }
        pdfDictionary.remove(PdfName.OUTLINES);
        this.markUsed(pdfDictionary);
    }

    void eliminateAcroformObjects() {
        PdfObject pdfObject = this.reader.getCatalog().get(PdfName.ACROFORM);
        if (pdfObject == null) {
            return;
        }
        pdfObject = (PdfDictionary)PdfReader.getPdfObject(pdfObject);
        this.reader.killXref(pdfObject.get(PdfName.XFA));
        pdfObject.remove(PdfName.XFA);
        PdfObject pdfObject2 = pdfObject.get(PdfName.FIELDS);
        if (pdfObject2 != null) {
            PdfDictionary pdfDictionary = new PdfDictionary();
            pdfDictionary.put(PdfName.KIDS, pdfObject2);
            this.sweepKids(pdfDictionary);
            PdfReader.killIndirect(pdfObject2);
            pdfObject.put(PdfName.FIELDS, new PdfArray());
        }
        pdfObject.remove(PdfName.SIGFLAGS);
        pdfObject.remove(PdfName.NEEDAPPEARANCES);
        pdfObject.remove(PdfName.DR);
    }

    void expandFields(PdfFormField serializable, ArrayList<PdfAnnotation> arrayList) {
        arrayList.add((PdfAnnotation)serializable);
        serializable = serializable.getKids();
        if (serializable != null) {
            for (int i = 0; i < serializable.size(); ++i) {
                this.expandFields((PdfFormField)serializable.get(i), arrayList);
            }
        }
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive exception aggregation
     */
    protected void flatFields() {
        block61 : {
            var13_1 = this.append;
            var10_2 = 0;
            if (var13_1) {
                throw new IllegalArgumentException(MessageLocalization.getComposedMessage("field.flattening.is.not.supported.in.append.mode", new Object[0]));
            }
            this.getAcroFields();
            var15_3 = this.acroFields.getFields();
            if (this.fieldsAdded && this.partialFlattening.isEmpty()) {
                for (String var16_7 : var15_3.keySet()) {
                    this.partialFlattening.add(var16_7);
                }
            }
            var14_6 = (var14_6 = this.reader.getCatalog().getAsDict(PdfName.ACROFORM)) != null ? (PdfArray)PdfReader.getPdfObject(var14_6.get(PdfName.FIELDS), (PdfObject)var14_6) : null;
            var16_8 = var15_3.entrySet().iterator();
            var15_3 = var14_6;
            block6 : while (var16_9.hasNext()) {
                var14_6 = (Map.Entry)var16_9.next();
                var19_45 = (String)var14_6.getKey();
                if (!this.partialFlattening.isEmpty() && !this.partialFlattening.contains(var19_45)) continue;
                var20_46 = (AcroFields.Item)var14_6.getValue();
                var11_41 = 0;
                var14_6 = var15_3;
                var9_40 = var10_2;
                var17_43 = var16_9;
                block7 : do {
                    var16_11 = var17_43;
                    var10_2 = var9_40;
                    var15_3 = var14_6;
                    if (var11_41 >= var20_46.size()) continue block6;
                    var21_47 = var20_46.getMerged(var11_41);
                    var15_3 = var21_47.getAsNumber(PdfName.F);
                    var10_2 = var15_3 != null ? var15_3.intValue() : 0;
                    var12_42 = var20_46.getPage(var11_41);
                    if (var12_42 < 1) ** GOTO lbl173
                    var16_12 = var21_47.getAsDict(PdfName.AP);
                    if (var16_12 != null) {
                        var15_3 = var18_44 = var16_12.getAsStream(PdfName.N);
                        if (var18_44 == null) {
                            var15_3 = var16_12.getAsDict(PdfName.N);
                        }
                    } else {
                        var15_3 = null;
                    }
                    if (!this.acroFields.isGenerateAppearances()) ** GOTO lbl70
                    if (var16_12 != null && var15_3 != null) {
                        if (var15_3.isStream()) {
                            var15_3 = (PdfStream)var15_3;
                            var18_44 = var15_3.getAsArray(PdfName.BBOX);
                            var22_48 = var21_47.getAsArray(PdfName.RECT);
                            if (var18_44 != null && var22_48 != null) {
                                var1_32 = var22_48.getAsNumber(2).floatValue();
                                var6_37 = var22_48.getAsNumber(var9_40).floatValue();
                                var7_38 = var18_44.getAsNumber(2).floatValue() - var18_44.getAsNumber(var9_40).floatValue();
                                var3_34 = var22_48.getAsNumber(3).floatValue();
                                var4_35 = var22_48.getAsNumber(1).floatValue();
                                var5_36 = var18_44.getAsNumber(3).floatValue() - var18_44.getAsNumber(1).floatValue();
                                var2_33 = Float.MAX_VALUE;
                                var1_32 = var7_38 != 0.0f ? (var1_32 - var6_37) / var7_38 : Float.MAX_VALUE;
                                var6_37 = Math.abs(var1_32);
                                var1_32 = var2_33;
                                if (var5_36 != 0.0f) {
                                    var1_32 = (var3_34 - var4_35) / var5_36;
                                }
                                var1_32 = Math.abs(var1_32);
                                if (var6_37 != 1.0f || var1_32 != 1.0f) {
                                    var18_44 = new NumberArray(new float[]{var6_37, 0.0f, 0.0f, var1_32, 0.0f, 0.0f});
                                    var15_3.put(PdfName.MATRIX, (PdfObject)var18_44);
                                    this.markUsed((PdfObject)var15_3);
                                }
                            }
                        }
                    } else {
                        this.acroFields.regenerateField(var19_45);
                        var16_13 = var15_3 = this.acroFields.getFieldItem(var19_45).getMerged(var11_41).getAsDict(PdfName.AP);
lbl70: // 1 sources:
                        if (var16_12 != null && var15_3 != null) {
                            var15_3 = ((PdfDictionary)var15_3).getAsArray(PdfName.BBOX);
                            var18_44 = var21_47.getAsArray(PdfName.RECT);
                            if (var15_3 != null && var18_44 != null) {
                                var1_32 = var15_3.getAsNumber(2).floatValue();
                                var2_33 = var15_3.getAsNumber(0).floatValue();
                                var3_34 = var18_44.getAsNumber(2).floatValue();
                                var4_35 = var18_44.getAsNumber(0).floatValue();
                                var5_36 = var15_3.getAsNumber(3).floatValue();
                                var6_37 = var15_3.getAsNumber(1).floatValue();
                                var7_38 = var18_44.getAsNumber(3).floatValue();
                                var8_39 = var18_44.getAsNumber(1).floatValue();
                                if (Math.abs(var1_32 - var2_33 - (var3_34 - var4_35)) > 1.0f || Math.abs(var5_36 - var6_37 - (var7_38 - var8_39)) > 1.0f) {
                                    this.acroFields.setGenerateAppearances(true);
                                    this.acroFields.regenerateField(var19_45);
                                    var15_3 = this.acroFields;
                                    var15_3.setGenerateAppearances(false);
                                    var16_14 = var15_3 = this.acroFields.getFieldItem(var19_45).getMerged(var11_41).getAsDict(PdfName.AP);
                                }
                            }
                        }
                    }
lbl90: // 12 sources:
                    do {
                        block56 : {
                            block57 : {
                                var15_3 = var14_6;
                                if (var16_15 == null || (var10_2 & 4) == 0 || (var10_2 & 2) != 0) break block57;
                                var16_16 = var16_15.get(PdfName.N);
                                if (var16_16 == null) ** GOTO lbl-1000
                                var14_6 = PdfReader.getPdfObject(var16_16);
                                if (var16_16 instanceof PdfIndirectReference && !var16_16.isIndirect()) {
                                    var14_6 = new PdfAppearance((PdfIndirectReference)var16_16);
                                } else if (var14_6 instanceof PdfStream) {
                                    ((PdfDictionary)var14_6).put(PdfName.SUBTYPE, PdfName.FORM);
                                    var14_6 = new PdfAppearance((PdfIndirectReference)var16_16);
                                } else if (var14_6 != null && var14_6.isDictionary() && (var16_17 = var21_47.getAsName(PdfName.AS)) != null && (var18_44 = (PdfIndirectReference)((PdfDictionary)var14_6).get(var16_17)) != null) {
                                    var16_18 = new PdfAppearance((PdfIndirectReference)var18_44);
                                    var14_6 = var16_18;
                                    if (var18_44.isIndirect()) {
                                        ((PdfDictionary)PdfReader.getPdfObject((PdfObject)var18_44)).put(PdfName.SUBTYPE, PdfName.FORM);
                                        var14_6 = var16_18;
                                    }
                                } else lbl-1000: // 2 sources:
                                {
                                    var14_6 = null;
                                }
                                if (var14_6 != null) {
                                    var16_21 = PdfReader.getNormalizedRectangle(var21_47.getAsArray(PdfName.RECT));
                                    var18_44 = this.getOverContent(var12_42);
                                    var18_44.setLiteral("Q ");
                                    var18_44.addTemplate((PdfTemplate)var14_6, var16_21.getLeft(), var16_21.getBottom());
                                    var18_44.setLiteral("q ");
                                }
                            }
                            if (this.partialFlattening.isEmpty()) {
                                do {
                                    var14_6 = var15_3;
                                    break block56;
                                    break;
                                } while (true);
                            }
                            if ((var21_47 = (var18_44 = this.reader.getPageN(var12_42)).getAsArray(PdfName.ANNOTS)) == null) ** continue;
                            var14_6 = var15_3;
                            block10 : for (var9_40 = 0; var9_40 < var21_47.size(); ++var9_40) {
                                var15_3 = var21_47.getPdfObject(var9_40);
                                if (!var15_3.isIndirect() || !(var16_24 = var20_46.getWidgetRef(var11_41)).isIndirect()) continue;
                                var10_2 = ((PRIndirectReference)var15_3).getNumber();
                                var15_3 = (PRIndirectReference)var16_24;
                                if (var10_2 != var15_3.getNumber()) continue;
                                var21_47.remove(var9_40);
                                do {
                                    block60 : {
                                        block59 : {
                                            block58 : {
                                                var16_26 = (PRIndirectReference)((PdfDictionary)PdfReader.getPdfObject((PdfObject)var15_3)).get(PdfName.PARENT);
                                                PdfReader.killIndirect((PdfObject)var15_3);
                                                if (var16_26 != null) break block58;
                                                var16_27 = var14_6;
                                                var10_2 = 0;
                                                while (var10_2 < var16_27.size()) {
                                                    var22_48 = var16_27.getPdfObject(var10_2);
                                                    var12_42 = var10_2;
                                                    if (var22_48.isIndirect()) {
                                                        var12_42 = var10_2;
                                                        if (((PRIndirectReference)var22_48).getNumber() == var15_3.getNumber()) {
                                                            var16_27.remove(var10_2);
                                                            var12_42 = var10_2 - 1;
                                                        }
                                                    }
                                                    var10_2 = var12_42 + 1;
                                                }
                                                break block59;
                                            }
                                            var22_48 = ((PdfDictionary)PdfReader.getPdfObject(var16_26)).getAsArray(PdfName.KIDS);
                                            var10_2 = 0;
                                            while (var10_2 < var22_48.size()) {
                                                var23_49 = var22_48.getPdfObject(var10_2);
                                                var12_42 = var10_2;
                                                if (var23_49.isIndirect()) {
                                                    var12_42 = var10_2;
                                                    if (((PRIndirectReference)var23_49).getNumber() == var15_3.getNumber()) {
                                                        var22_48.remove(var10_2);
                                                        var12_42 = var10_2 - 1;
                                                    }
                                                }
                                                var10_2 = var12_42 + 1;
                                            }
                                            if (var22_48.isEmpty()) break block60;
                                        }
                                        --var9_40;
                                        continue block10;
                                    }
                                    var15_3 = var16_26;
                                } while (true);
                            }
                            var14_6 = var15_3 = var14_6;
                            if (var21_47.isEmpty()) {
                                PdfReader.killIndirect(var18_44.get(PdfName.ANNOTS));
                                var18_44.remove(PdfName.ANNOTS);
                                var14_6 = var15_3;
                            }
                        }
                        ++var11_41;
                        var9_40 = 0;
                        continue block7;
                        break;
                    } while (true);
                    break;
                } while (true);
            }
            if (this.fieldsAdded || !this.partialFlattening.isEmpty()) break block61;
            for (var10_2 = 1; var10_2 <= this.reader.getNumberOfPages(); ++var10_2) {
                var14_6 = this.reader.getPageN(var10_2);
                var15_3 = var14_6.getAsArray(PdfName.ANNOTS);
                if (var15_3 == null) continue;
                var9_40 = 0;
                while (var9_40 < var15_3.size()) {
                    block63 : {
                        block64 : {
                            block62 : {
                                var16_31 = var15_3.getDirectObject(var9_40);
                                if (!(var16_31 instanceof PdfIndirectReference) || var16_31.isIndirect()) break block62;
                                var11_41 = var9_40;
                                break block63;
                            }
                            if (!var16_31.isDictionary()) break block64;
                            var11_41 = var9_40;
                            if (!PdfName.WIDGET.equals(((PdfDictionary)var16_31).get(PdfName.SUBTYPE))) break block63;
                        }
                        var15_3.remove(var9_40);
                        var11_41 = var9_40 - 1;
                    }
                    var9_40 = var11_41 + 1;
                }
                if (!var15_3.isEmpty()) continue;
                PdfReader.killIndirect(var14_6.get(PdfName.ANNOTS));
                var14_6.remove(PdfName.ANNOTS);
            }
            this.eliminateAcroformObjects();
        }
        return;
        catch (DocumentException | IOException var15_4) {}
        ** GOTO lbl90
        catch (DocumentException | IOException var15_5) {
            ** continue;
        }
    }

    protected void flatFreeTextFields() {
        this.flattenAnnotations(true);
    }

    protected void flattenAnnotations() {
        this.flattenAnnotations(false);
    }

    AcroFields getAcroFields() {
        if (this.acroFields == null) {
            this.acroFields = new AcroFields(this.reader, this);
        }
        return this.acroFields;
    }

    @Override
    protected Counter getCounter() {
        return this.COUNTER;
    }

    @Override
    public PdfContentByte getDirectContent() {
        throw new UnsupportedOperationException(MessageLocalization.getComposedMessage("use.pdfstamper.getundercontent.or.pdfstamper.getovercontent", new Object[0]));
    }

    @Override
    public PdfContentByte getDirectContentUnder() {
        throw new UnsupportedOperationException(MessageLocalization.getComposedMessage("use.pdfstamper.getundercontent.or.pdfstamper.getovercontent", new Object[0]));
    }

    protected HashMap<Object, PdfObject> getNamedDestinations() {
        return this.namedDestinations;
    }

    @Override
    protected int getNewObjectNumber(PdfReader object, int n, int n2) {
        if ((object = this.readers2intrefs.get(object)) != null) {
            int n3;
            n2 = n3 = object.get(n);
            if (n3 == 0) {
                n2 = this.getIndirectReferenceNumber();
                object.put(n, n2);
            }
            return n2;
        }
        if (this.currentPdfReaderInstance == null) {
            int n4;
            if (this.append && n < this.initialXrefSize) {
                return n;
            }
            n2 = n4 = this.myXref.get(n);
            if (n4 == 0) {
                n2 = this.getIndirectReferenceNumber();
                this.myXref.put(n, n2);
            }
            return n2;
        }
        return this.currentPdfReaderInstance.getNewObjectNumber(n, n2);
    }

    PdfContentByte getOverContent(int n) {
        if (n >= 1 && n <= this.reader.getNumberOfPages()) {
            PageStamp pageStamp = this.getPageStamp(n);
            if (pageStamp.over == null) {
                pageStamp.over = new StampContent(this, pageStamp);
            }
            return pageStamp.over;
        }
        return null;
    }

    @Override
    public PdfIndirectReference getPageReference(int n) {
        PRIndirectReference pRIndirectReference = this.reader.getPageOrigRef(n);
        if (pRIndirectReference == null) {
            throw new IllegalArgumentException(MessageLocalization.getComposedMessage("invalid.page.number.1", n));
        }
        return pRIndirectReference;
    }

    PageStamp getPageStamp(int n) {
        PageStamp pageStamp;
        PdfDictionary pdfDictionary = this.reader.getPageN(n);
        PageStamp pageStamp2 = pageStamp = this.pagesToContent.get(pdfDictionary);
        if (pageStamp == null) {
            pageStamp2 = new PageStamp(this, this.reader, pdfDictionary);
            this.pagesToContent.put(pdfDictionary, pageStamp2);
        }
        return pageStamp2;
    }

    public Map<String, PdfLayer> getPdfLayers() {
        if (!this.originalLayersAreRead) {
            this.originalLayersAreRead = true;
            this.readOCProperties();
        }
        HashMap<String, PdfLayer> hashMap = new HashMap<String, PdfLayer>();
        Iterator iterator2 = this.documentOCG.iterator();
        while (iterator2.hasNext()) {
            PdfLayer pdfLayer = (PdfLayer)((PdfOCG)iterator2.next());
            String string2 = pdfLayer.getTitle() == null ? pdfLayer.getAsString(PdfName.NAME).toString() : pdfLayer.getTitle();
            CharSequence charSequence = string2;
            if (hashMap.containsKey(string2)) {
                int n = 2;
                charSequence = new StringBuilder();
                charSequence.append(string2);
                charSequence.append("(");
                charSequence.append(2);
                charSequence.append(")");
                charSequence = charSequence.toString();
                while (hashMap.containsKey(charSequence)) {
                    charSequence = new StringBuilder();
                    charSequence.append(string2);
                    charSequence.append("(");
                    charSequence.append(++n);
                    charSequence.append(")");
                    charSequence = charSequence.toString();
                }
            }
            hashMap.put((String)charSequence, pdfLayer);
        }
        return hashMap;
    }

    public PdfReader getPdfReader() {
        return this.reader;
    }

    @Override
    RandomAccessFileOrArray getReaderFile(PdfReader pdfReader) {
        if (this.readers2intrefs.containsKey(pdfReader)) {
            RandomAccessFileOrArray randomAccessFileOrArray = this.readers2file.get(pdfReader);
            if (randomAccessFileOrArray != null) {
                return randomAccessFileOrArray;
            }
            return pdfReader.getSafeFile();
        }
        if (this.currentPdfReaderInstance == null) {
            return this.file;
        }
        return this.currentPdfReaderInstance.getReaderFile();
    }

    PdfContentByte getUnderContent(int n) {
        if (n >= 1 && n <= this.reader.getNumberOfPages()) {
            PageStamp pageStamp = this.getPageStamp(n);
            if (pageStamp.under == null) {
                pageStamp.under = new StampContent(this, pageStamp);
            }
            return pageStamp.under;
        }
        return null;
    }

    void insertPage(int n, Rectangle object) {
        PdfObject pdfObject;
        PdfObject pdfObject2;
        object = new Rectangle((Rectangle)object);
        int n2 = object.getRotation() % 360;
        PdfDictionary pdfDictionary = new PdfDictionary(PdfName.PAGE);
        pdfDictionary.put(PdfName.RESOURCES, new PdfDictionary());
        pdfDictionary.put(PdfName.ROTATE, new PdfNumber(n2));
        pdfDictionary.put(PdfName.MEDIABOX, new PdfRectangle((Rectangle)object, n2));
        PRIndirectReference pRIndirectReference = this.reader.addPdfObject(pdfDictionary);
        if (n > this.reader.getNumberOfPages()) {
            object = (PRIndirectReference)this.reader.getPageNRelease(this.reader.getNumberOfPages()).get(PdfName.PARENT);
            pdfObject = new PRIndirectReference(this.reader, object.getNumber());
            object = (PdfDictionary)PdfReader.getPdfObject(pdfObject);
            pdfObject2 = (PdfArray)PdfReader.getPdfObject(object.get(PdfName.KIDS), (PdfObject)object);
            pdfObject2.add(pRIndirectReference);
            this.markUsed(pdfObject2);
            this.reader.pageRefs.insertPage(n, pRIndirectReference);
        } else {
            n2 = n;
            if (n < 1) {
                n2 = 1;
            }
            object = this.reader.getPageN(n2);
            pdfObject2 = this.reader.getPageOrigRef(n2);
            this.reader.releasePage(n2);
            object = (PRIndirectReference)object.get(PdfName.PARENT);
            pdfObject = new PRIndirectReference(this.reader, object.getNumber());
            object = (PdfDictionary)PdfReader.getPdfObject(pdfObject);
            PdfArray pdfArray = (PdfArray)PdfReader.getPdfObject(object.get(PdfName.KIDS), (PdfObject)object);
            int n3 = pdfArray.size();
            int n4 = pdfObject2.getNumber();
            for (n = 0; n < n3; ++n) {
                if (n4 != ((PRIndirectReference)pdfArray.getPdfObject(n)).getNumber()) continue;
                pdfArray.add(n, pRIndirectReference);
                break;
            }
            if (n3 == pdfArray.size()) {
                throw new RuntimeException(MessageLocalization.getComposedMessage("internal.inconsistence", new Object[0]));
            }
            this.markUsed(pdfArray);
            this.reader.pageRefs.insertPage(n2, pRIndirectReference);
            this.correctAcroFieldPages(n2);
        }
        pdfDictionary.put(PdfName.PARENT, pdfObject);
        while (object != null) {
            this.markUsed((PdfObject)object);
            pdfObject = (PdfNumber)PdfReader.getPdfObjectRelease(object.get(PdfName.COUNT));
            object.put(PdfName.COUNT, new PdfNumber(pdfObject.intValue() + 1));
            object = object.getAsDict(PdfName.PARENT);
        }
    }

    boolean isAppend() {
        return this.append;
    }

    boolean isContentWritten() {
        if (this.body.size() > 1) {
            return true;
        }
        return false;
    }

    boolean isRotateContents() {
        return this.rotateContents;
    }

    void makePackage(PdfCollection pdfCollection) {
        this.reader.getCatalog().put(PdfName.COLLECTION, pdfCollection);
    }

    protected void markUsed(int n) {
        if (this.append) {
            this.marked.put(n, 1);
        }
    }

    protected void markUsed(PdfObject pdfObject) {
        if (this.append && pdfObject != null) {
            pdfObject = pdfObject.type() == 10 ? (PRIndirectReference)pdfObject : pdfObject.getIndRef();
            if (pdfObject != null) {
                this.marked.put(pdfObject.getNumber(), 1);
            }
        }
    }

    boolean partialFormFlattening(String string2) {
        this.getAcroFields();
        if (this.acroFields.getXfa().isXfaPresent()) {
            throw new UnsupportedOperationException(MessageLocalization.getComposedMessage("partial.form.flattening.is.not.supported.with.xfa.forms", new Object[0]));
        }
        if (!this.acroFields.getFields().containsKey(string2)) {
            return false;
        }
        this.partialFlattening.add(string2);
        return true;
    }

    protected void readColorProfile() {
        PdfArray pdfArray;
        PdfObject pdfObject = this.reader.getCatalog().getAsArray(PdfName.OUTPUTINTENTS);
        if (pdfObject != null && (pdfArray = pdfObject).size() > 0) {
            PdfObject pdfObject2;
            pdfObject = null;
            int n = 0;
            do {
                pdfObject2 = pdfObject;
                if (n >= pdfArray.size()) break;
                pdfObject2 = pdfArray.getAsDict(n);
                if (pdfObject2 != null) {
                    pdfObject2 = pdfObject2.getAsStream(PdfName.DESTOUTPUTPROFILE);
                    pdfObject = pdfObject2;
                    if (pdfObject2 != null) break;
                }
                ++n;
            } while (true);
            if (pdfObject2 instanceof PRStream) {
                try {
                    this.colorProfile = ICC_Profile.getInstance(PdfReader.getStreamBytes((PRStream)pdfObject2));
                    return;
                }
                catch (IOException iOException) {
                    throw new ExceptionConverter(iOException);
                }
            }
        }
    }

    protected void readOCProperties() {
        if (!this.documentOCG.isEmpty()) {
            return;
        }
        PdfDictionary pdfDictionary = this.reader.getCatalog().getAsDict(PdfName.OCPROPERTIES);
        if (pdfDictionary == null) {
            return;
        }
        Object object = pdfDictionary.getAsArray(PdfName.OCGS);
        HashMap<String, PdfLayer> hashMap = new HashMap<String, PdfLayer>();
        object = object.listIterator();
        while (object.hasNext()) {
            PdfIndirectReference pdfIndirectReference = (PdfIndirectReference)object.next();
            PdfLayer pdfLayer = new PdfLayer(null);
            pdfLayer.setRef(pdfIndirectReference);
            pdfLayer.setOnPanel(false);
            pdfLayer.merge((PdfDictionary)PdfReader.getPdfObject(pdfIndirectReference));
            hashMap.put(pdfIndirectReference.toString(), pdfLayer);
        }
        object = (pdfDictionary = pdfDictionary.getAsDict(PdfName.D)).getAsArray(PdfName.OFF);
        if (object != null) {
            object = object.listIterator();
            while (object.hasNext()) {
                hashMap.get(((PdfIndirectReference)object.next()).toString()).setOn(false);
            }
        }
        if ((object = pdfDictionary.getAsArray(PdfName.ORDER)) != null) {
            this.addOrder(null, (PdfArray)object, hashMap);
        }
        this.documentOCG.addAll(hashMap.values());
        this.OCGRadioGroup = pdfDictionary.getAsArray(PdfName.RBGROUPS);
        if (this.OCGRadioGroup == null) {
            this.OCGRadioGroup = new PdfArray();
        }
        this.OCGLocked = pdfDictionary.getAsArray(PdfName.LOCKED);
        if (this.OCGLocked == null) {
            this.OCGLocked = new PdfArray();
        }
    }

    @Override
    void registerLayer(PdfOCG pdfOCG) {
        if (!this.originalLayersAreRead) {
            this.originalLayersAreRead = true;
            this.readOCProperties();
        }
        super.registerLayer(pdfOCG);
    }

    public void registerReader(PdfReader pdfReader, boolean bl) throws IOException {
        if (this.readers2intrefs.containsKey(pdfReader)) {
            return;
        }
        this.readers2intrefs.put(pdfReader, new IntHashtable());
        if (bl) {
            RandomAccessFileOrArray randomAccessFileOrArray = pdfReader.getSafeFile();
            this.readers2file.put(pdfReader, randomAccessFileOrArray);
            randomAccessFileOrArray.reOpen();
        }
    }

    void replacePage(PdfReader object, int n, int n2) {
        PdfDictionary pdfDictionary = this.reader.getPageN(n2);
        if (this.pagesToContent.containsKey(pdfDictionary)) {
            throw new IllegalStateException(MessageLocalization.getComposedMessage("this.page.cannot.be.replaced.new.content.was.already.added", new Object[0]));
        }
        PdfImportedPage pdfImportedPage = this.getImportedPage((PdfReader)object, n);
        PdfDictionary pdfDictionary2 = this.reader.getPageNRelease(n2);
        pdfDictionary2.remove(PdfName.RESOURCES);
        pdfDictionary2.remove(PdfName.CONTENTS);
        PdfStamperImp.moveRectangle(pdfDictionary2, (PdfReader)object, n, PdfName.MEDIABOX, "media");
        PdfStamperImp.moveRectangle(pdfDictionary2, (PdfReader)object, n, PdfName.CROPBOX, "crop");
        PdfStamperImp.moveRectangle(pdfDictionary2, (PdfReader)object, n, PdfName.TRIMBOX, "trim");
        PdfStamperImp.moveRectangle(pdfDictionary2, (PdfReader)object, n, PdfName.ARTBOX, "art");
        PdfStamperImp.moveRectangle(pdfDictionary2, (PdfReader)object, n, PdfName.BLEEDBOX, "bleed");
        pdfDictionary2.put(PdfName.ROTATE, new PdfNumber(object.getPageRotation(n)));
        this.getOverContent(n2).addTemplate((PdfTemplate)pdfImportedPage, 0.0f, 0.0f);
        object = this.pagesToContent.get(pdfDictionary);
        object.replacePoint = object.over.getInternalBuffer().size();
    }

    @Override
    public void setAdditionalAction(PdfName pdfName, PdfAction pdfAction) throws PdfException {
        PdfDictionary pdfDictionary;
        if (!(pdfName.equals(DOCUMENT_CLOSE) || pdfName.equals(WILL_SAVE) || pdfName.equals(DID_SAVE) || pdfName.equals(WILL_PRINT) || pdfName.equals(DID_PRINT))) {
            throw new PdfException(MessageLocalization.getComposedMessage("invalid.additional.action.type.1", pdfName.toString()));
        }
        PdfDictionary pdfDictionary2 = pdfDictionary = this.reader.getCatalog().getAsDict(PdfName.AA);
        if (pdfDictionary == null) {
            if (pdfAction == null) {
                return;
            }
            pdfDictionary2 = new PdfDictionary();
            this.reader.getCatalog().put(PdfName.AA, pdfDictionary2);
        }
        this.markUsed(pdfDictionary2);
        if (pdfAction == null) {
            pdfDictionary2.remove(pdfName);
            return;
        }
        pdfDictionary2.put(pdfName, pdfAction);
    }

    @Override
    public void setDuration(int n) {
        throw new UnsupportedOperationException(MessageLocalization.getComposedMessage("use.setpageaction.pdfname.actiontype.pdfaction.action.int.page", new Object[0]));
    }

    void setDuration(int n, int n2) {
        PdfDictionary pdfDictionary = this.reader.getPageN(n2);
        if (n < 0) {
            pdfDictionary.remove(PdfName.DUR);
        } else {
            pdfDictionary.put(PdfName.DUR, new PdfNumber(n));
        }
        this.markUsed(pdfDictionary);
    }

    public void setFlatAnnotations(boolean bl) {
        this.flatannotations = bl;
    }

    void setFormFlattening(boolean bl) {
        this.flat = bl;
    }

    void setFreeTextFlattening(boolean bl) {
        this.flatFreeText = bl;
    }

    protected void setJavaScript() throws IOException {
        PdfDictionary pdfDictionary;
        HashMap<String, PdfObject> hashMap = this.pdf.getDocumentLevelJS();
        if (hashMap.isEmpty()) {
            return;
        }
        PdfDictionary pdfDictionary2 = this.reader.getCatalog();
        PdfDictionary pdfDictionary3 = pdfDictionary = (PdfDictionary)PdfReader.getPdfObject(pdfDictionary2.get(PdfName.NAMES), pdfDictionary2);
        if (pdfDictionary == null) {
            pdfDictionary3 = new PdfDictionary();
            pdfDictionary2.put(PdfName.NAMES, pdfDictionary3);
            this.markUsed(pdfDictionary2);
        }
        this.markUsed(pdfDictionary3);
        pdfDictionary = PdfNameTree.writeTree(hashMap, this);
        pdfDictionary3.put(PdfName.JAVASCRIPT, this.addToBody(pdfDictionary).getIndirectReference());
    }

    @Override
    public void setOpenAction(PdfAction pdfAction) {
        this.openAction = pdfAction;
    }

    @Override
    public void setOpenAction(String string2) {
        throw new UnsupportedOperationException(MessageLocalization.getComposedMessage("open.actions.by.name.are.not.supported", new Object[0]));
    }

    protected void setOutlines() throws IOException {
        if (this.newBookmarks == null) {
            return;
        }
        this.deleteOutlines();
        if (this.newBookmarks.isEmpty()) {
            return;
        }
        PdfDictionary pdfDictionary = this.reader.getCatalog();
        boolean bl = pdfDictionary.get(PdfName.DESTS) != null;
        this.writeOutlines(pdfDictionary, bl);
        this.markUsed(pdfDictionary);
    }

    @Override
    public void setPageAction(PdfName pdfName, PdfAction pdfAction) throws PdfException {
        throw new UnsupportedOperationException(MessageLocalization.getComposedMessage("use.setpageaction.pdfname.actiontype.pdfaction.action.int.page", new Object[0]));
    }

    void setPageAction(PdfName pdfName, PdfAction pdfAction, int n) throws PdfException {
        PdfDictionary pdfDictionary;
        if (!pdfName.equals(PAGE_OPEN) && !pdfName.equals(PAGE_CLOSE)) {
            throw new PdfException(MessageLocalization.getComposedMessage("invalid.page.additional.action.type.1", pdfName.toString()));
        }
        PdfDictionary pdfDictionary2 = this.reader.getPageN(n);
        PdfDictionary pdfDictionary3 = pdfDictionary = (PdfDictionary)PdfReader.getPdfObject(pdfDictionary2.get(PdfName.AA), pdfDictionary2);
        if (pdfDictionary == null) {
            pdfDictionary3 = new PdfDictionary();
            pdfDictionary2.put(PdfName.AA, pdfDictionary3);
            this.markUsed(pdfDictionary2);
        }
        pdfDictionary3.put(pdfName, pdfAction);
        this.markUsed(pdfDictionary3);
    }

    void setRotateContents(boolean bl) {
        this.rotateContents = bl;
    }

    @Override
    public void setSigFlags(int n) {
        this.sigFlags = n | this.sigFlags;
    }

    @Override
    public void setThumbnail(Image image) {
        throw new UnsupportedOperationException(MessageLocalization.getComposedMessage("use.pdfstamper.setthumbnail", new Object[0]));
    }

    void setThumbnail(Image object, int n) throws PdfException, DocumentException {
        object = this.getImageReference(this.addDirectImageSimple((Image)object));
        this.reader.resetReleasePage();
        this.reader.getPageN(n).put(PdfName.THUMB, (PdfObject)object);
        this.reader.resetReleasePage();
    }

    @Override
    public void setTransition(PdfTransition pdfTransition) {
        throw new UnsupportedOperationException(MessageLocalization.getComposedMessage("use.setpageaction.pdfname.actiontype.pdfaction.action.int.page", new Object[0]));
    }

    void setTransition(PdfTransition pdfTransition, int n) {
        PdfDictionary pdfDictionary = this.reader.getPageN(n);
        if (pdfTransition == null) {
            pdfDictionary.remove(PdfName.TRANS);
        } else {
            pdfDictionary.put(PdfName.TRANS, pdfTransition.getTransitionDictionary());
        }
        this.markUsed(pdfDictionary);
    }

    protected void setViewerPreferences() {
        this.reader.setViewerPreferences(this.viewerPreferences);
        this.markUsed(this.reader.getTrailer().get(PdfName.ROOT));
    }

    @Override
    public void setViewerPreferences(int n) {
        this.useVp = true;
        this.viewerPreferences.setViewerPreferences(n);
    }

    void sweepKids(PdfObject pdfObject) {
        if ((pdfObject = PdfReader.killIndirect(pdfObject)) != null) {
            if (!pdfObject.isDictionary()) {
                return;
            }
            if ((pdfObject = (PdfArray)PdfReader.killIndirect(((PdfDictionary)pdfObject).get(PdfName.KIDS))) == null) {
                return;
            }
            for (int i = 0; i < pdfObject.size(); ++i) {
                this.sweepKids(pdfObject.getPdfObject(i));
            }
            return;
        }
    }

    public void unRegisterReader(PdfReader pdfReader) {
        if (!this.readers2intrefs.containsKey(pdfReader)) {
            return;
        }
        this.readers2intrefs.remove(pdfReader);
        RandomAccessFileOrArray randomAccessFileOrArray = this.readers2file.get(pdfReader);
        if (randomAccessFileOrArray == null) {
            return;
        }
        this.readers2file.remove(pdfReader);
        try {
            randomAccessFileOrArray.close();
            return;
        }
        catch (Exception exception) {
            return;
        }
    }

    protected void updateNamedDestinations() throws IOException {
        Object object = this.reader.getCatalog().getAsDict(PdfName.NAMES);
        PdfObject pdfObject = object;
        if (object != null) {
            pdfObject = object.getAsDict(PdfName.DESTS);
        }
        object = pdfObject;
        if (pdfObject == null) {
            object = this.reader.getCatalog().getAsDict(PdfName.DESTS);
        }
        pdfObject = object;
        if (object == null) {
            pdfObject = new PdfDictionary();
            object = new PdfDictionary();
            pdfObject.put(PdfName.NAMES, new PdfArray());
            object.put(PdfName.DESTS, pdfObject);
            this.reader.getCatalog().put(PdfName.NAMES, (PdfObject)object);
        }
        pdfObject = this.getLastChildInNameTree((PdfDictionary)pdfObject);
        for (Object e : this.namedDestinations.keySet()) {
            pdfObject.add(new PdfString(e.toString()));
            pdfObject.add(this.addToBody(this.namedDestinations.get(e), this.getPdfIndirectReference()).getIndirectReference());
        }
    }

    static class PageStamp {
        StampContent over;
        PdfDictionary pageN;
        PageResources pageResources;
        int replacePoint = 0;
        StampContent under;

        PageStamp(PdfStamperImp pdfStamperImp, PdfReader object, PdfDictionary pdfDictionary) {
            this.pageN = pdfDictionary;
            this.pageResources = new PageResources();
            object = pdfDictionary.getAsDict(PdfName.RESOURCES);
            this.pageResources.setOriginalResources((PdfDictionary)object, pdfStamperImp.namePtr);
        }
    }

}

