/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf.codec;

import com.itextpdf.text.pdf.codec.BitFile;
import com.itextpdf.text.pdf.codec.LZWStringTable;
import java.io.IOException;
import java.io.OutputStream;

public class LZWCompressor {
    BitFile bf_;
    int clearCode_;
    int codeSize_;
    int endOfInfo_;
    int limit_;
    LZWStringTable lzss_;
    int numBits_;
    short prefix_;
    boolean tiffFudge_;

    public LZWCompressor(OutputStream outputStream, int n, boolean bl) throws IOException {
        this.bf_ = new BitFile(outputStream, bl ^ true);
        this.codeSize_ = n;
        this.tiffFudge_ = bl;
        this.clearCode_ = 1 << this.codeSize_;
        this.endOfInfo_ = this.clearCode_ + 1;
        this.numBits_ = this.codeSize_ + 1;
        this.limit_ = (1 << this.numBits_) - 1;
        if (this.tiffFudge_) {
            --this.limit_;
        }
        this.prefix_ = (short)-1;
        this.lzss_ = new LZWStringTable();
        this.lzss_.ClearTable(this.codeSize_);
        this.bf_.writeBits(this.clearCode_, this.numBits_);
    }

    public void compress(byte[] arrby, int n, int n2) throws IOException {
        for (int i = n; i < n2 + n; ++i) {
            byte by = arrby[i];
            short s = this.lzss_.FindCharString(this.prefix_, by);
            if (s != -1) {
                this.prefix_ = s;
                continue;
            }
            this.bf_.writeBits(this.prefix_, this.numBits_);
            if (this.lzss_.AddCharString(this.prefix_, by) > this.limit_) {
                if (this.numBits_ == 12) {
                    this.bf_.writeBits(this.clearCode_, this.numBits_);
                    this.lzss_.ClearTable(this.codeSize_);
                    this.numBits_ = this.codeSize_ + 1;
                } else {
                    ++this.numBits_;
                }
                this.limit_ = (1 << this.numBits_) - 1;
                if (this.tiffFudge_) {
                    --this.limit_;
                }
            }
            this.prefix_ = (short)((short)by & 255);
        }
    }

    public void flush() throws IOException {
        if (this.prefix_ != -1) {
            this.bf_.writeBits(this.prefix_, this.numBits_);
        }
        this.bf_.writeBits(this.endOfInfo_, this.numBits_);
        this.bf_.flush();
    }
}

