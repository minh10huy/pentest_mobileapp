/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf;

import com.itextpdf.text.DocWriter;
import com.itextpdf.text.pdf.PdfEncryption;
import com.itextpdf.text.pdf.PdfIndirectReference;
import com.itextpdf.text.pdf.PdfObject;
import com.itextpdf.text.pdf.PdfWriter;
import java.io.IOException;
import java.io.OutputStream;

public class PdfIndirectObject {
    static final byte[] ENDOBJ;
    static final int SIZEOBJ;
    static final byte[] STARTOBJ;
    protected int generation = 0;
    protected int number;
    protected PdfObject object;
    protected PdfWriter writer;

    static {
        STARTOBJ = DocWriter.getISOBytes(" obj\n");
        ENDOBJ = DocWriter.getISOBytes("\nendobj\n");
        SIZEOBJ = STARTOBJ.length + ENDOBJ.length;
    }

    PdfIndirectObject(int n, int n2, PdfObject object, PdfWriter pdfWriter) {
        this.writer = pdfWriter;
        this.number = n;
        this.generation = n2;
        this.object = object;
        object = pdfWriter != null ? pdfWriter.getEncryption() : null;
        if (object != null) {
            object.setHashKey(n, n2);
        }
    }

    protected PdfIndirectObject(int n, PdfObject pdfObject, PdfWriter pdfWriter) {
        this(n, 0, pdfObject, pdfWriter);
    }

    PdfIndirectObject(PdfIndirectReference pdfIndirectReference, PdfObject pdfObject, PdfWriter pdfWriter) {
        this(pdfIndirectReference.getNumber(), pdfIndirectReference.getGeneration(), pdfObject, pdfWriter);
    }

    public PdfIndirectReference getIndirectReference() {
        return new PdfIndirectReference(this.object.type(), this.number, this.generation);
    }

    public String toString() {
        StringBuffer stringBuffer = new StringBuffer();
        stringBuffer.append(this.number);
        stringBuffer.append(' ');
        stringBuffer.append(this.generation);
        stringBuffer.append(" R: ");
        String string2 = this.object != null ? this.object.toString() : "null";
        stringBuffer.append(string2);
        return stringBuffer.toString();
    }

    protected void writeTo(OutputStream outputStream) throws IOException {
        outputStream.write(DocWriter.getISOBytes(String.valueOf(this.number)));
        outputStream.write(32);
        outputStream.write(DocWriter.getISOBytes(String.valueOf(this.generation)));
        outputStream.write(STARTOBJ);
        this.object.toPdf(this.writer, outputStream);
        outputStream.write(ENDOBJ);
    }
}

