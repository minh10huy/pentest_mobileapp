/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf.codec;

import com.itextpdf.text.Image;
import com.itextpdf.text.Utilities;
import com.itextpdf.text.error_messages.MessageLocalization;
import com.itextpdf.text.pdf.ByteBuffer;
import com.itextpdf.text.pdf.ICC_Profile;
import com.itextpdf.text.pdf.PdfArray;
import com.itextpdf.text.pdf.PdfDictionary;
import com.itextpdf.text.pdf.PdfLiteral;
import com.itextpdf.text.pdf.PdfName;
import com.itextpdf.text.pdf.PdfNumber;
import com.itextpdf.text.pdf.PdfObject;
import com.itextpdf.text.pdf.PdfReader;
import com.itextpdf.text.pdf.PdfString;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.util.zip.Inflater;
import java.util.zip.InflaterInputStream;

public class PngImage {
    public static final String IDAT = "IDAT";
    public static final String IEND = "IEND";
    public static final String IHDR = "IHDR";
    public static final String PLTE = "PLTE";
    public static final int[] PNGID = new int[]{137, 80, 78, 71, 13, 10, 26, 10};
    private static final int PNG_FILTER_AVERAGE = 3;
    private static final int PNG_FILTER_NONE = 0;
    private static final int PNG_FILTER_PAETH = 4;
    private static final int PNG_FILTER_SUB = 1;
    private static final int PNG_FILTER_UP = 2;
    private static final int TRANSFERSIZE = 4096;
    public static final String cHRM = "cHRM";
    public static final String gAMA = "gAMA";
    public static final String iCCP = "iCCP";
    private static final PdfName[] intents = new PdfName[]{PdfName.PERCEPTUAL, PdfName.RELATIVECOLORIMETRIC, PdfName.SATURATION, PdfName.ABSOLUTECOLORIMETRIC};
    public static final String pHYs = "pHYs";
    public static final String sRGB = "sRGB";
    public static final String tRNS = "tRNS";
    float XYRatio;
    PdfDictionary additional = new PdfDictionary();
    int bitDepth;
    int bytesPerPixel;
    byte[] colorTable;
    int colorType;
    int compressionMethod;
    DataInputStream dataStream;
    int dpiX;
    int dpiY;
    int filterMethod;
    float gamma = 1.0f;
    boolean genBWMask;
    boolean hasCHRM = false;
    int height;
    ICC_Profile icc_profile;
    NewByteArrayOutputStream idat = new NewByteArrayOutputStream();
    byte[] image;
    int inputBands;
    PdfName intent;
    int interlaceMethod;
    InputStream is;
    boolean palShades;
    byte[] smask;
    byte[] trans;
    int transBlue = -1;
    int transGreen = -1;
    int transRedGray = -1;
    int width;
    float xB;
    float xG;
    float xR;
    float xW;
    float yB;
    float yG;
    float yR;
    float yW;

    PngImage(InputStream inputStream) {
        this.is = inputStream;
    }

    private static void decodeAverageFilter(byte[] arrby, byte[] arrby2, int n, int n2) {
        int n3;
        for (n3 = 0; n3 < n2; ++n3) {
            arrby[n3] = (byte)((arrby[n3] & 255) + (arrby2[n3] & 255) / 2);
        }
        for (n3 = n2; n3 < n; ++n3) {
            arrby[n3] = (byte)((arrby[n3] & 255) + ((arrby[n3 - n2] & 255) + (arrby2[n3] & 255)) / 2);
        }
    }

    private static void decodePaethFilter(byte[] arrby, byte[] arrby2, int n, int n2) {
        int n3;
        for (n3 = 0; n3 < n2; ++n3) {
            arrby[n3] = (byte)((arrby[n3] & 255) + (arrby2[n3] & 255));
        }
        for (n3 = n2; n3 < n; ++n3) {
            byte by = arrby[n3];
            int n4 = n3 - n2;
            arrby[n3] = (byte)((by & 255) + PngImage.paethPredictor(arrby[n4] & 255, arrby2[n3] & 255, arrby2[n4] & 255));
        }
    }

    private static void decodeSubFilter(byte[] arrby, int n, int n2) {
        for (int i = n2; i < n; ++i) {
            arrby[i] = (byte)((arrby[i] & 255) + (arrby[i - n2] & 255));
        }
    }

    private static void decodeUpFilter(byte[] arrby, byte[] arrby2, int n) {
        for (int i = 0; i < n; ++i) {
            arrby[i] = (byte)((arrby[i] & 255) + (arrby2[i] & 255));
        }
    }

    public static Image getImage(InputStream inputStream) throws IOException {
        return new PngImage(inputStream).getImage();
    }

    public static Image getImage(String string2) throws IOException {
        return PngImage.getImage(Utilities.toURL(string2));
    }

    /*
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    public static Image getImage(URL object) throws IOException {
        Object object2;
        block4 : {
            Image image;
            object2 = object.openStream();
            try {
                image = PngImage.getImage((InputStream)object2);
                image.setUrl((URL)object);
                if (object2 == null) return image;
            }
            catch (Throwable throwable) {
                object = object2;
                object2 = throwable;
            }
            object2.close();
            return image;
            break block4;
            catch (Throwable throwable) {
                object = null;
            }
        }
        if (object == null) throw object2;
        object.close();
        throw object2;
    }

    public static Image getImage(byte[] arrby) throws IOException {
        Image image = PngImage.getImage(new ByteArrayInputStream(arrby));
        image.setOriginalData(arrby);
        return image;
    }

    public static final int getInt(InputStream inputStream) throws IOException {
        return (inputStream.read() << 24) + (inputStream.read() << 16) + (inputStream.read() << 8) + inputStream.read();
    }

    static int getPixel(byte[] arrby, int n, int n2, int n3, int n4) {
        if (n3 == 8) {
            return arrby[n4 * n2 + n] & 255;
        }
        int n5 = 8 / n3;
        return arrby[n4 * n2 + n / n5] >> 8 - n % n5 * n3 - n3 & (1 << n3) - 1;
    }

    public static final String getString(InputStream inputStream) throws IOException {
        StringBuffer stringBuffer = new StringBuffer();
        for (int i = 0; i < 4; ++i) {
            stringBuffer.append((char)inputStream.read());
        }
        return stringBuffer.toString();
    }

    public static final int getWord(InputStream inputStream) throws IOException {
        return (inputStream.read() << 8) + inputStream.read();
    }

    private static int paethPredictor(int n, int n2, int n3) {
        int n4 = n + n2 - n3;
        int n5 = Math.abs(n4 - n);
        int n6 = Math.abs(n4 - n2);
        n4 = Math.abs(n4 - n3);
        if (n5 <= n6 && n5 <= n4) {
            return n;
        }
        if (n6 <= n4) {
            return n2;
        }
        return n3;
    }

    static void setPixel(byte[] arrby, int[] arrn, int n, int n2, int n3, int n4, int n5, int n6) {
        int n7 = 0;
        int n8 = 0;
        if (n5 == 8) {
            for (n5 = n8; n5 < n2; ++n5) {
                arrby[n6 * n4 + n3 * n2 + n5] = (byte)arrn[n5 + n];
            }
        } else if (n5 == 16) {
            for (n5 = n7; n5 < n2; ++n5) {
                arrby[n6 * n4 + n3 * n2 + n5] = (byte)(arrn[n5 + n] >>> 8);
            }
        } else {
            n2 = 8 / n5;
            n4 = n6 * n4 + n3 / n2;
            arrby[n4] = (byte)(arrn[n] << 8 - n3 % n2 * n5 - n5 | arrby[n4]);
        }
    }

    boolean checkMarker(String string2) {
        if (string2.length() != 4) {
            return false;
        }
        for (int i = 0; i < 4; ++i) {
            char c = string2.charAt(i);
            if (c >= 'a' && c <= 'z') continue;
            if (c >= 'A') {
                if (c <= 'Z') continue;
                return false;
            }
            return false;
        }
        return true;
    }

    void decodeIdat() {
        int n;
        int n2 = n = this.bitDepth;
        if (n == 16) {
            n2 = 8;
        }
        n = -1;
        int n3 = this.bitDepth == 16 ? 2 : 1;
        this.bytesPerPixel = n3;
        n3 = this.colorType;
        if (n3 != 0) {
            if (n3 != 6) {
                switch (n3) {
                    default: {
                        break;
                    }
                    case 4: {
                        n = this.width * this.height;
                        this.bytesPerPixel *= 2;
                        break;
                    }
                    case 3: {
                        if (this.interlaceMethod == 1) {
                            n = (n2 * this.width + 7) / 8 * this.height;
                        }
                        this.bytesPerPixel = 1;
                        break;
                    }
                    case 2: {
                        n = this.width * 3 * this.height;
                        this.bytesPerPixel *= 3;
                        break;
                    }
                }
            } else {
                n = this.width * 3 * this.height;
                this.bytesPerPixel *= 4;
            }
        } else {
            n = (n2 * this.width + 7) / 8 * this.height;
        }
        if (n >= 0) {
            this.image = new byte[n];
        }
        if (this.palShades) {
            this.smask = new byte[this.width * this.height];
        } else if (this.genBWMask) {
            this.smask = new byte[(this.width + 7) / 8 * this.height];
        }
        this.dataStream = new DataInputStream(new InflaterInputStream(new ByteArrayInputStream(this.idat.getBuf(), 0, this.idat.size()), new Inflater()));
        if (this.interlaceMethod != 1) {
            this.decodePass(0, 0, 1, 1, this.width, this.height);
            return;
        }
        this.decodePass(0, 0, 8, 8, (this.width + 7) / 8, (this.height + 7) / 8);
        this.decodePass(4, 0, 8, 8, (this.width + 3) / 8, (this.height + 7) / 8);
        this.decodePass(0, 4, 4, 8, (this.width + 3) / 4, (this.height + 3) / 8);
        this.decodePass(2, 0, 4, 4, (this.width + 1) / 4, (this.height + 3) / 4);
        this.decodePass(0, 2, 2, 4, (this.width + 1) / 2, (this.height + 1) / 4);
        this.decodePass(1, 0, 2, 2, this.width / 2, (this.height + 1) / 2);
        this.decodePass(0, 1, 1, 2, this.width, this.height / 2);
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    void decodePass(int n, int n2, int n3, int n4, int n5, int n6) {
        if (n5 == 0) {
            return;
        }
        if (n6 == 0) {
            return;
        }
        int n7 = (this.inputBands * n5 * this.bitDepth + 7) / 8;
        byte[] arrby = new byte[n7];
        byte[] arrby2 = new byte[n7];
        int n8 = 0;
        while (n8 < n6) {
            int n9;
            try {
                n9 = this.dataStream.read();
            }
            catch (Exception exception) {}
            try {
                this.dataStream.readFully(arrby, 0, n7);
            }
            catch (Exception exception) {}
            n9 = 0;
            switch (n9) {
                default: {
                    throw new RuntimeException(MessageLocalization.getComposedMessage("png.filter.unknown", new Object[0]));
                }
                case 4: {
                    PngImage.decodePaethFilter(arrby, arrby2, n7, this.bytesPerPixel);
                    break;
                }
                case 3: {
                    PngImage.decodeAverageFilter(arrby, arrby2, n7, this.bytesPerPixel);
                    break;
                }
                case 2: {
                    PngImage.decodeUpFilter(arrby, arrby2, n7);
                    break;
                }
                case 1: {
                    PngImage.decodeSubFilter(arrby, n7, this.bytesPerPixel);
                }
                case 0: 
            }
            this.processPixels(arrby, n, n3, n2, n5);
            ++n8;
            n2 += n4;
            byte[] arrby3 = arrby;
            arrby = arrby2;
            arrby2 = arrby3;
        }
    }

    PdfObject getColorspace() {
        PdfArray pdfArray;
        if (this.icc_profile != null) {
            if ((this.colorType & 2) == 0) {
                return PdfName.DEVICEGRAY;
            }
            return PdfName.DEVICERGB;
        }
        if (this.gamma == 1.0f && !this.hasCHRM) {
            if ((this.colorType & 2) == 0) {
                return PdfName.DEVICEGRAY;
            }
            return PdfName.DEVICERGB;
        }
        PdfArray pdfArray2 = new PdfArray();
        PdfDictionary pdfDictionary = new PdfDictionary();
        if ((this.colorType & 2) == 0) {
            if (this.gamma == 1.0f) {
                return PdfName.DEVICEGRAY;
            }
            pdfArray2.add(PdfName.CALGRAY);
            pdfDictionary.put(PdfName.GAMMA, new PdfNumber(this.gamma));
            pdfDictionary.put(PdfName.WHITEPOINT, new PdfLiteral("[1 1 1]"));
            pdfArray2.add(pdfDictionary);
            return pdfArray2;
        }
        PdfObject pdfObject = new PdfLiteral("[1 1 1]");
        pdfArray2.add(PdfName.CALRGB);
        if (this.gamma != 1.0f) {
            pdfArray = new PdfArray();
            PdfNumber pdfNumber = new PdfNumber(this.gamma);
            pdfArray.add(pdfNumber);
            pdfArray.add(pdfNumber);
            pdfArray.add(pdfNumber);
            pdfDictionary.put(PdfName.GAMMA, pdfArray);
        }
        if (this.hasCHRM) {
            float f = this.yW * ((this.xG - this.xB) * this.yR - (this.xR - this.xB) * this.yG + (this.xR - this.xG) * this.yB);
            float f2 = this.yR * ((this.xG - this.xB) * this.yW - (this.xW - this.xB) * this.yG + (this.xW - this.xG) * this.yB) / f;
            float f3 = this.xR * f2 / this.yR;
            float f4 = ((1.0f - this.xR) / this.yR - 1.0f) * f2;
            float f5 = (- this.yG) * ((this.xR - this.xB) * this.yW - (this.xW - this.xB) * this.yR + (this.xW - this.xR) * this.yB) / f;
            float f6 = this.xG * f5 / this.yG;
            float f7 = ((1.0f - this.xG) / this.yG - 1.0f) * f5;
            f = this.yB * ((this.xR - this.xG) * this.yW - (this.xW - this.xG) * this.yW + (this.xW - this.xR) * this.yG) / f;
            float f8 = this.xB * f / this.yB;
            float f9 = ((1.0f - this.xB) / this.yB - 1.0f) * f;
            pdfObject = new PdfArray();
            pdfObject.add(new PdfNumber(f3 + f6 + f8));
            pdfObject.add(new PdfNumber(1.0f));
            pdfObject.add(new PdfNumber(f4 + f7 + f9));
            pdfArray = new PdfArray();
            pdfArray.add(new PdfNumber(f3));
            pdfArray.add(new PdfNumber(f2));
            pdfArray.add(new PdfNumber(f4));
            pdfArray.add(new PdfNumber(f6));
            pdfArray.add(new PdfNumber(f5));
            pdfArray.add(new PdfNumber(f7));
            pdfArray.add(new PdfNumber(f8));
            pdfArray.add(new PdfNumber(f));
            pdfArray.add(new PdfNumber(f9));
            pdfDictionary.put(PdfName.MATRIX, pdfArray);
        }
        pdfDictionary.put(PdfName.WHITEPOINT, pdfObject);
        pdfArray2.add(pdfDictionary);
        return pdfArray2;
    }

    /*
     * Exception decompiling
     */
    Image getImage() throws IOException {
        // This method has failed to decompile.  When submitting a bug report, please provide this stack trace, and (if you hold appropriate legal rights) the relevant class file.
        // org.benf.cfr.reader.util.CannotPerformDecode: reachable test BLOCK was exited and re-entered.
        // org.benf.cfr.reader.bytecode.analysis.opgraph.op3rewriters.Misc.getFarthestReachableInRange(Misc.java:143)
        // org.benf.cfr.reader.bytecode.analysis.opgraph.op3rewriters.SwitchReplacer.examineSwitchContiguity(SwitchReplacer.java:385)
        // org.benf.cfr.reader.bytecode.analysis.opgraph.op3rewriters.SwitchReplacer.replaceRawSwitches(SwitchReplacer.java:65)
        // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisInner(CodeAnalyser.java:416)
        // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisOrWrapFail(CodeAnalyser.java:196)
        // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysis(CodeAnalyser.java:141)
        // org.benf.cfr.reader.entities.attributes.AttributeCode.analyse(AttributeCode.java:95)
        // org.benf.cfr.reader.entities.Method.analyse(Method.java:372)
        // org.benf.cfr.reader.entities.ClassFile.analyseMid(ClassFile.java:867)
        // org.benf.cfr.reader.entities.ClassFile.analyseTop(ClassFile.java:768)
        // org.benf.cfr.reader.Main.doJar(Main.java:141)
        // org.benf.cfr.reader.Main.main(Main.java:242)
        throw new IllegalStateException("Decompilation failed");
    }

    int[] getPixel(byte[] arrby) {
        int n;
        int n2 = this.bitDepth;
        int n3 = 0;
        int n4 = 0;
        if (n2 != 8) {
            if (n2 != 16) {
                int[] arrn = new int[arrby.length * 8 / this.bitDepth];
                n2 = 8 / this.bitDepth;
                int n5 = this.bitDepth;
                n3 = 0;
                for (n = 0; n < arrby.length; ++n) {
                    n4 = n2 - 1;
                    while (n4 >= 0) {
                        arrn[n3] = arrby[n] >>> this.bitDepth * n4 & (1 << n5) - 1;
                        --n4;
                        ++n3;
                    }
                }
                return arrn;
            }
            int[] arrn = new int[arrby.length / 2];
            for (n = n3; n < arrn.length; ++n) {
                n3 = n * 2;
                arrn[n] = ((arrby[n3] & 255) << 8) + (arrby[n3 + 1] & 255);
            }
            return arrn;
        }
        int[] arrn = new int[arrby.length];
        for (n = n4; n < arrn.length; ++n) {
            arrn[n] = arrby[n] & 255;
        }
        return arrn;
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Lifted jumps to return sites
     */
    void processPixels(byte[] var1_1, int var2_2, int var3_3, int var4_4, int var5_5) {
        block21 : {
            block22 : {
                block20 : {
                    block19 : {
                        block18 : {
                            var1_1 = this.getPixel(var1_1);
                            var6_6 = this.colorType;
                            var9_7 = 0;
                            if (var6_6 == 0) break block18;
                            if (var6_6 == 6) ** GOTO lbl-1000
                            switch (var6_6) {
                                default: {
                                    var6_6 = 0;
                                    ** break;
                                }
                                case 2: lbl-1000: // 2 sources:
                                {
                                    var6_6 = 3;
                                    ** break;
                                }
                                case 3: 
                                case 4: 
                            }
                        }
                        var6_6 = 1;
lbl16: // 3 sources:
                        if (this.image != null) {
                            var8_8 = this.width;
                            var7_9 = this.bitDepth == 16 ? 8 : this.bitDepth;
                            var10_10 = (var8_8 * var6_6 * var7_9 + 7) / 8;
                            var8_8 = var2_2;
                            for (var7_9 = 0; var7_9 < var5_5; var8_8 += var3_3, ++var7_9) {
                                PngImage.setPixel(this.image, var1_1, this.inputBands * var7_9, var6_6, var8_8, var4_4, this.bitDepth, var10_10);
                            }
                        }
                        if (!this.palShades) break block19;
                        if ((this.colorType & 4) != 0) {
                            if (this.bitDepth == 16) {
                                for (var7_9 = 0; var7_9 < var5_5; ++var7_9) {
                                    var8_8 = this.inputBands * var7_9 + var6_6;
                                    var1_1[var8_8] = var1_1[var8_8] >>> 8;
                                }
                            }
                            var8_8 = this.width;
                            var7_9 = var2_2;
                            var2_2 = var9_7;
                            while (var2_2 < var5_5) {
                                PngImage.setPixel(this.smask, var1_1, this.inputBands * var2_2 + var6_6, 1, var7_9, var4_4, 8, var8_8);
                                var7_9 += var3_3;
                                ++var2_2;
                            }
                            return;
                        }
                        break block20;
                    }
                    if (this.genBWMask == false) return;
                    var6_6 = this.colorType;
                    if (var6_6 == 0) break block21;
                    switch (var6_6) {
                        default: {
                            return;
                        }
                        case 3: {
                            var8_8 = (this.width + 7) / 8;
                            var11_12 = new int[1];
                            var7_9 = 0;
                            var6_6 = var2_2;
                            var2_2 = var7_9;
                            while (var2_2 < var5_5) {
                                var7_9 = var1_1[var2_2];
                                var7_9 = var7_9 < this.trans.length && this.trans[var7_9] == 0 ? 1 : 0;
                                var11_12[0] = var7_9;
                                PngImage.setPixel(this.smask, var11_12, 0, 1, var6_6, var4_4, 1, var8_8);
                                var6_6 += var3_3;
                                ++var2_2;
                            }
                            return;
                        }
                        case 2: 
                    }
                    break block22;
                }
                var8_8 = this.width;
                var11_11 = new int[1];
                var7_9 = 0;
                var6_6 = var2_2;
                var2_2 = var7_9;
                while (var2_2 < var5_5) {
                    var7_9 = var1_1[var2_2];
                    var11_11[0] = var7_9 < this.trans.length ? this.trans[var7_9] : 255;
                    PngImage.setPixel(this.smask, var11_11, 0, 1, var6_6, var4_4, 8, var8_8);
                    var6_6 += var3_3;
                    ++var2_2;
                }
                return;
            }
            var8_8 = (this.width + 7) / 8;
            var11_13 = new int[1];
            var7_9 = 0;
            var6_6 = var2_2;
            var2_2 = var7_9;
            while (var2_2 < var5_5) {
                var7_9 = this.inputBands * var2_2;
                var7_9 = var1_1[var7_9] == this.transRedGray && var1_1[var7_9 + 1] == this.transGreen && var1_1[var7_9 + 2] == this.transBlue ? 1 : 0;
                var11_13[0] = var7_9;
                PngImage.setPixel(this.smask, var11_13, 0, 1, var6_6, var4_4, 1, var8_8);
                var6_6 += var3_3;
                ++var2_2;
                ** break;
lbl93: // 1 sources:
            }
            return;
        }
        var8_8 = (this.width + 7) / 8;
        var11_14 = new int[1];
        var7_9 = 0;
        var6_6 = var2_2;
        var2_2 = var7_9;
        while (var2_2 < var5_5) {
            var7_9 = var1_1[var2_2] == this.transRedGray ? 1 : 0;
            var11_14[0] = var7_9;
            PngImage.setPixel(this.smask, var11_14, 0, 1, var6_6, var4_4, 1, var8_8);
            var6_6 += var3_3;
            ++var2_2;
        }
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    void readPng() throws IOException {
        for (var1_1 = 0; var1_1 < PngImage.PNGID.length; ++var1_1) {
            if (PngImage.PNGID[var1_1] == this.is.read()) continue;
            throw new IOException(MessageLocalization.getComposedMessage("file.is.not.a.valid.png", new Object[0]));
        }
        var7_2 = new byte[4096];
        do {
            block31 : {
                block41 : {
                    block32 : {
                        block40 : {
                            block39 : {
                                block38 : {
                                    block37 : {
                                        block36 : {
                                            block35 : {
                                                block34 : {
                                                    block33 : {
                                                        var8_8 = PngImage.getString(this.is);
                                                        if (var1_1 < 0) throw new IOException(MessageLocalization.getComposedMessage("corrupted.png.file", new Object[0]));
                                                        if (!this.checkMarker((String)var8_8)) {
                                                            throw new IOException(MessageLocalization.getComposedMessage("corrupted.png.file", new Object[0]));
                                                        }
                                                        if ("IDAT".equals(var8_8)) break block32;
                                                        if (!"tRNS".equals(var8_8)) break block33;
                                                        var2_3 = this.colorType;
                                                        if (var2_3 != 0) {
                                                            switch (var2_3) {
                                                                default: {
                                                                    var2_3 = var1_1;
                                                                    ** break;
                                                                }
                                                                case 3: {
                                                                    var2_3 = var1_1;
                                                                    if (var1_1 <= 0) break;
                                                                    this.trans = new byte[var1_1];
                                                                    for (var2_3 = 0; var2_3 < var1_1; ++var2_3) {
                                                                        this.trans[var2_3] = (byte)this.is.read();
                                                                    }
                                                                    var2_3 = 0;
                                                                    ** break;
                                                                }
                                                                case 2: {
                                                                    var2_3 = var1_1;
                                                                    if (var1_1 < 6) break;
                                                                    var2_3 = var1_1 - 6;
                                                                    var1_1 = PngImage.getWord(this.is);
                                                                    var3_4 = PngImage.getWord(this.is);
                                                                    var4_5 = PngImage.getWord(this.is);
                                                                    if (this.bitDepth == 16) {
                                                                        this.transRedGray = var1_1;
                                                                        this.transGreen = var3_4;
                                                                        this.transBlue = var4_5;
                                                                        ** break;
                                                                    }
                                                                    var8_8 = this.additional;
                                                                    var9_10 = PdfName.MASK;
                                                                    var10_11 = new StringBuilder();
                                                                    var10_11.append("[");
                                                                    var10_11.append(var1_1);
                                                                    var10_11.append(" ");
                                                                    var10_11.append(var1_1);
                                                                    var10_11.append(" ");
                                                                    var10_11.append(var3_4);
                                                                    var10_11.append(" ");
                                                                    var10_11.append(var3_4);
                                                                    var10_11.append(" ");
                                                                    var10_11.append(var4_5);
                                                                    var10_11.append(" ");
                                                                    var10_11.append(var4_5);
                                                                    var10_11.append("]");
                                                                    var8_8.put((PdfName)var9_10, new PdfLiteral(var10_11.toString()));
                                                                    ** break;
lbl57: // 4 sources:
                                                                    break;
                                                                }
                                                            }
                                                        } else {
                                                            var2_3 = var1_1;
                                                            if (var1_1 >= 2) {
                                                                var2_3 = var1_1 - 2;
                                                                var1_1 = PngImage.getWord(this.is);
                                                                if (this.bitDepth == 16) {
                                                                    this.transRedGray = var1_1;
                                                                } else {
                                                                    var8_8 = this.additional;
                                                                    var9_10 = PdfName.MASK;
                                                                    var10_11 = new StringBuilder();
                                                                    var10_11.append("[");
                                                                    var10_11.append(var1_1);
                                                                    var10_11.append(" ");
                                                                    var10_11.append(var1_1);
                                                                    var10_11.append("]");
                                                                    var8_8.put((PdfName)var9_10, new PdfLiteral(var10_11.toString()));
                                                                }
                                                            }
                                                        }
                                                        Utilities.skip(this.is, var2_3);
                                                        break block31;
                                                    }
                                                    if (!"IHDR".equals(var8_8)) break block34;
                                                    this.width = PngImage.getInt(this.is);
                                                    this.height = PngImage.getInt(this.is);
                                                    this.bitDepth = this.is.read();
                                                    this.colorType = this.is.read();
                                                    this.compressionMethod = this.is.read();
                                                    this.filterMethod = this.is.read();
                                                    this.interlaceMethod = this.is.read();
                                                    break block31;
                                                }
                                                var6_7 = "PLTE".equals(var8_8);
                                                var5_6 = true;
                                                if (!var6_7) break block35;
                                                if (this.colorType == 3) {
                                                    var8_8 = new PdfArray();
                                                    var8_8.add(PdfName.INDEXED);
                                                    var8_8.add(this.getColorspace());
                                                    var8_8.add(new PdfNumber(var1_1 / 3 - 1));
                                                    var9_10 = new ByteBuffer();
                                                    for (var1_1 = PngImage.getInt((InputStream)this.is); var1_1 > 0; --var1_1) {
                                                        var9_10.append_i(this.is.read());
                                                    }
                                                    var9_10 = var9_10.toByteArray();
                                                    this.colorTable = var9_10;
                                                    var8_8.add(new PdfString(var9_10));
                                                    this.additional.put(PdfName.COLORSPACE, (PdfObject)var8_8);
                                                } else {
                                                    Utilities.skip(this.is, var1_1);
                                                }
                                                break block31;
                                            }
                                            if (!"pHYs".equals(var8_8)) break block36;
                                            var1_1 = PngImage.getInt(this.is);
                                            var2_3 = PngImage.getInt(this.is);
                                            if (this.is.read() == 1) {
                                                this.dpiX = (int)((float)var1_1 * 0.0254f + 0.5f);
                                                this.dpiY = (int)((float)var2_3 * 0.0254f + 0.5f);
                                            } else if (var2_3 != 0) {
                                                this.XYRatio = (float)var1_1 / (float)var2_3;
                                            }
                                            break block31;
                                        }
                                        if (!"cHRM".equals(var8_8)) break block37;
                                        this.xW = (float)PngImage.getInt(this.is) / 100000.0f;
                                        this.yW = (float)PngImage.getInt(this.is) / 100000.0f;
                                        this.xR = (float)PngImage.getInt(this.is) / 100000.0f;
                                        this.yR = (float)PngImage.getInt(this.is) / 100000.0f;
                                        this.xG = (float)PngImage.getInt(this.is) / 100000.0f;
                                        this.yG = (float)PngImage.getInt(this.is) / 100000.0f;
                                        this.xB = (float)PngImage.getInt(this.is) / 100000.0f;
                                        this.yB = (float)PngImage.getInt(this.is) / 100000.0f;
                                        if (Math.abs(this.xW) < 1.0E-4f || Math.abs(this.yW) < 1.0E-4f || Math.abs(this.xR) < 1.0E-4f || Math.abs(this.yR) < 1.0E-4f || Math.abs(this.xG) < 1.0E-4f || Math.abs(this.yG) < 1.0E-4f || Math.abs(this.xB) < 1.0E-4f || Math.abs(this.yB) < 1.0E-4f) {
                                            var5_6 = false;
                                        }
                                        this.hasCHRM = var5_6;
                                        break block31;
                                    }
                                    if (!"sRGB".equals(var8_8)) break block38;
                                    var1_1 = this.is.read();
                                    this.intent = PngImage.intents[var1_1];
                                    this.gamma = 2.2f;
                                    this.xW = 0.3127f;
                                    this.yW = 0.329f;
                                    this.xR = 0.64f;
                                    this.yR = 0.33f;
                                    this.xG = 0.3f;
                                    this.yG = 0.6f;
                                    this.xB = 0.15f;
                                    this.yB = 0.06f;
                                    this.hasCHRM = true;
                                    break block31;
                                }
                                if (!"gAMA".equals(var8_8)) break block39;
                                var1_1 = PngImage.getInt(this.is);
                                if (var1_1 != 0) {
                                    this.gamma = 100000.0f / (float)var1_1;
                                    if (!this.hasCHRM) {
                                        this.xW = 0.3127f;
                                        this.yW = 0.329f;
                                        this.xR = 0.64f;
                                        this.yR = 0.33f;
                                        this.xG = 0.3f;
                                        this.yG = 0.6f;
                                        this.xB = 0.15f;
                                        this.yB = 0.06f;
                                        this.hasCHRM = true;
                                    }
                                }
                                break block31;
                            }
                            if (!"iCCP".equals(var8_8)) break block40;
                            do {
                                var1_1 = var2_3 = var1_1 - 1;
                            } while (this.is.read() != 0);
                            this.is.read();
                            var1_1 = var2_3 - 1;
                            var8_8 = new byte[var1_1];
                            var2_3 = 0;
                            break block41;
                        }
                        if ("IEND".equals(var8_8)) {
                            return;
                        }
                        Utilities.skip(this.is, var1_1);
                        break block31;
                    }
                    while (var1_1 != 0) {
                        var2_3 = this.is.read(var7_2, 0, Math.min(var1_1, 4096));
                        if (var2_3 < 0) {
                            return;
                        }
                        this.idat.write(var7_2, 0, var2_3);
                        var1_1 -= var2_3;
                    }
                    break block31;
                }
                while (var1_1 > 0) {
                    var3_4 = this.is.read(var8_8, var2_3, var1_1);
                    if (var3_4 < 0) {
                        throw new IOException(MessageLocalization.getComposedMessage("premature.end.of.file", new Object[0]));
                    }
                    var2_3 += var3_4;
                    var1_1 -= var3_4;
                }
                var8_8 = PdfReader.FlateDecode(var8_8, true);
                try {
                    this.icc_profile = ICC_Profile.getInstance(var8_8);
                    break block31;
                }
                catch (RuntimeException var8_9) {}
                this.icc_profile = null;
            }
            Utilities.skip(this.is, 4);
        } while (true);
    }

    static class NewByteArrayOutputStream
    extends ByteArrayOutputStream {
        NewByteArrayOutputStream() {
        }

        public byte[] getBuf() {
            return this.buf;
        }
    }

}

