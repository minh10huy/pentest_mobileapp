/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf;

import com.itextpdf.text.BaseColor;
import com.itextpdf.text.ExceptionConverter;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.error_messages.MessageLocalization;
import com.itextpdf.text.pdf.Barcode;
import com.itextpdf.text.pdf.BaseFont;
import com.itextpdf.text.pdf.PdfContentByte;

public class BarcodeInter25
extends Barcode {
    private static final byte[][] BARS;

    static {
        byte[] arrby = new byte[]{0, 0, 1, 1, 0};
        byte[] arrby2 = new byte[]{1, 0, 0, 0, 1};
        byte[] arrby3 = new byte[]{0, 1, 1, 0, 0};
        BARS = new byte[][]{arrby, arrby2, {0, 1, 0, 0, 1}, {1, 1, 0, 0, 0}, {0, 0, 1, 0, 1}, {1, 0, 1, 0, 0}, arrby3, {0, 0, 0, 1, 1}, {1, 0, 0, 1, 0}, {0, 1, 0, 1, 0}};
    }

    public BarcodeInter25() {
        try {
            this.x = 0.8f;
            this.n = 2.0f;
            this.font = BaseFont.createFont("Helvetica", "winansi", false);
            this.baseline = this.size = 8.0f;
            this.barHeight = this.size * 3.0f;
            this.textAlignment = 1;
            this.generateChecksum = false;
            this.checksumText = false;
            return;
        }
        catch (Exception exception) {
            throw new ExceptionConverter(exception);
        }
    }

    public static byte[] getBarsInter25(String string2) {
        int n;
        if (((string2 = BarcodeInter25.keepNumbers(string2)).length() & 1) != 0) {
            throw new IllegalArgumentException(MessageLocalization.getComposedMessage("the.text.length.must.be.even", new Object[0]));
        }
        byte[] arrby = new byte[string2.length() * 5 + 7];
        arrby[0] = 0;
        arrby[1] = 0;
        arrby[2] = 0;
        int n2 = 4;
        arrby[3] = 0;
        int n3 = string2.length() / 2;
        for (n = 0; n < n3; ++n) {
            int n4 = n * 2;
            int n5 = string2.charAt(n4);
            n4 = string2.charAt(n4 + 1);
            byte[] arrby2 = BARS[n5 - 48];
            byte[] arrby3 = BARS[n4 - 48];
            for (n5 = 0; n5 < 5; ++n5) {
                n4 = n2 + 1;
                arrby[n2] = arrby2[n5];
                n2 = n4 + 1;
                arrby[n4] = arrby3[n5];
            }
        }
        n = n2 + 1;
        arrby[n2] = 1;
        arrby[n] = 0;
        arrby[n + 1] = 0;
        return arrby;
    }

    public static char getChecksum(String string2) {
        int n = 3;
        int n2 = 0;
        for (int i = string2.length() - 1; i >= 0; --i) {
            n2 += (string2.charAt(i) - 48) * n;
            n ^= 2;
        }
        return (char)((10 - n2 % 10) % 10 + 48);
    }

    public static String keepNumbers(String string2) {
        StringBuffer stringBuffer = new StringBuffer();
        for (int i = 0; i < string2.length(); ++i) {
            char c = string2.charAt(i);
            if (c < '0' || c > '9') continue;
            stringBuffer.append(c);
        }
        return stringBuffer.toString();
    }

    @Override
    public Rectangle getBarcodeSize() {
        float f;
        int n;
        Object object = this.font;
        float f2 = 0.0f;
        if (object != null) {
            Object object2;
            f2 = this.baseline > 0.0f ? this.baseline - this.font.getFontDescriptor(3, this.size) : - this.baseline + this.size;
            object = object2 = this.code;
            if (this.generateChecksum) {
                object = object2;
                if (this.checksumText) {
                    object = new StringBuilder();
                    object.append((String)object2);
                    object.append(BarcodeInter25.getChecksum((String)object2));
                    object = object.toString();
                }
            }
            object2 = this.font;
            if (this.altText != null) {
                object = this.altText;
            }
            f = object2.getWidthPoint((String)object, this.size);
        } else {
            f = 0.0f;
        }
        int n2 = n = BarcodeInter25.keepNumbers(this.code).length();
        if (this.generateChecksum) {
            n2 = n + 1;
        }
        return new Rectangle(Math.max((float)n2 * (this.x * 3.0f + this.x * 2.0f * this.n) + (this.n + 6.0f) * this.x, f), this.barHeight + f2);
    }

    /*
     * Enabled aggressive block sorting
     */
    @Override
    public Rectangle placeBarcode(PdfContentByte pdfContentByte, BaseColor baseColor, BaseColor baseColor2) {
        Object object;
        float f;
        byte[] arrby;
        float f2;
        int n;
        float f3;
        float f4;
        float f5;
        block20 : {
            block17 : {
                block14 : {
                    block18 : {
                        block19 : {
                            block15 : {
                                block16 : {
                                    arrby = this.code;
                                    object = this.font;
                                    f4 = 0.0f;
                                    if (object != null) {
                                        object = arrby;
                                        if (this.generateChecksum) {
                                            object = arrby;
                                            if (this.checksumText) {
                                                object = new StringBuilder();
                                                object.append((String)arrby);
                                                object.append(BarcodeInter25.getChecksum((String)arrby));
                                                object = object.toString();
                                            }
                                        }
                                        arrby = this.font;
                                        if (this.altText != null) {
                                            object = this.altText;
                                        }
                                        f5 = arrby.getWidthPoint((String)object, this.size);
                                    } else {
                                        f5 = 0.0f;
                                        object = arrby;
                                    }
                                    String string2 = BarcodeInter25.keepNumbers(this.code);
                                    arrby = string2;
                                    if (this.generateChecksum) {
                                        arrby = new StringBuilder();
                                        arrby.append(string2);
                                        arrby.append(BarcodeInter25.getChecksum(string2));
                                        arrby = arrby.toString();
                                    }
                                    f3 = (float)arrby.length() * (this.x * 3.0f + this.x * 2.0f * this.n) + (this.n + 6.0f) * this.x;
                                    n = this.textAlignment;
                                    if (n == 0) break block14;
                                    if (n == 2) break block15;
                                    if (f5 <= f3) break block16;
                                    f5 = (f5 - f3) / 2.0f;
                                    break block17;
                                }
                                f5 = (f3 - f5) / 2.0f;
                                break block18;
                            }
                            if (f5 <= f3) break block19;
                            f5 -= f3;
                            break block17;
                        }
                        f5 = f3 - f5;
                    }
                    f2 = f5;
                    f5 = 0.0f;
                    break block20;
                }
                f5 = 0.0f;
            }
            f2 = 0.0f;
        }
        if (this.font != null) {
            if (this.baseline <= 0.0f) {
                f3 = this.barHeight - this.baseline;
            } else {
                f4 = - this.font.getFontDescriptor(3, this.size);
                f = this.baseline;
                f3 = f4;
                f4 = f + f4;
            }
        } else {
            f3 = 0.0f;
        }
        arrby = BarcodeInter25.getBarsInter25((String)arrby);
        if (baseColor != null) {
            pdfContentByte.setColorFill(baseColor);
        }
        boolean bl = true;
        for (n = 0; n < arrby.length; bl ^= true, f5 += f, ++n) {
            f = arrby[n] == 0 ? this.x : this.x * this.n;
            if (!bl) continue;
            pdfContentByte.rectangle(f5, f4, f - this.inkSpreading, this.barHeight);
        }
        pdfContentByte.fill();
        if (this.font != null) {
            if (baseColor2 != null) {
                pdfContentByte.setColorFill(baseColor2);
            }
            pdfContentByte.beginText();
            pdfContentByte.setFontAndSize(this.font, this.size);
            pdfContentByte.setTextMatrix(f2, f3);
            pdfContentByte.showText((String)object);
            pdfContentByte.endText();
        }
        return this.getBarcodeSize();
    }
}

