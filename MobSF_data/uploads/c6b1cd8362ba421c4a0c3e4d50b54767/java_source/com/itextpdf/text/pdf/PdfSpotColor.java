/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf;

import com.itextpdf.text.BaseColor;
import com.itextpdf.text.error_messages.MessageLocalization;
import com.itextpdf.text.pdf.CMYKColor;
import com.itextpdf.text.pdf.ColorDetails;
import com.itextpdf.text.pdf.ExtendedColor;
import com.itextpdf.text.pdf.GrayColor;
import com.itextpdf.text.pdf.ICachedColorSpace;
import com.itextpdf.text.pdf.IPdfSpecialColorSpace;
import com.itextpdf.text.pdf.LabColor;
import com.itextpdf.text.pdf.PdfArray;
import com.itextpdf.text.pdf.PdfFunction;
import com.itextpdf.text.pdf.PdfIndirectReference;
import com.itextpdf.text.pdf.PdfLabColor;
import com.itextpdf.text.pdf.PdfName;
import com.itextpdf.text.pdf.PdfObject;
import com.itextpdf.text.pdf.PdfWriter;

public class PdfSpotColor
implements ICachedColorSpace,
IPdfSpecialColorSpace {
    public ColorDetails altColorDetails;
    public BaseColor altcs;
    public PdfName name;

    public PdfSpotColor(String string2, BaseColor baseColor) {
        this.name = new PdfName(string2);
        this.altcs = baseColor;
    }

    @Override
    public boolean equals(Object object) {
        if (this == object) {
            return true;
        }
        if (!(object instanceof PdfSpotColor)) {
            return false;
        }
        object = (PdfSpotColor)object;
        if (!this.altcs.equals(object.altcs)) {
            return false;
        }
        if (!this.name.equals(object.name)) {
            return false;
        }
        return true;
    }

    public BaseColor getAlternativeCS() {
        return this.altcs;
    }

    @Override
    public ColorDetails[] getColorantDetails(PdfWriter pdfWriter) {
        if (this.altColorDetails == null && this.altcs instanceof ExtendedColor && ((ExtendedColor)this.altcs).getType() == 7) {
            this.altColorDetails = pdfWriter.addSimple(((LabColor)this.altcs).getLabColorSpace());
        }
        return new ColorDetails[]{this.altColorDetails};
    }

    public PdfName getName() {
        return this.name;
    }

    @Override
    public PdfObject getPdfObject(PdfWriter object) {
        PdfArray pdfArray = new PdfArray(PdfName.SEPARATION);
        pdfArray.add(this.name);
        if (this.altcs instanceof ExtendedColor) {
            int n = ((ExtendedColor)this.altcs).type;
            if (n != 7) {
                switch (n) {
                    default: {
                        throw new RuntimeException(MessageLocalization.getComposedMessage("only.rgb.gray.and.cmyk.are.supported.as.alternative.color.spaces", new Object[0]));
                    }
                    case 2: {
                        pdfArray.add(PdfName.DEVICECMYK);
                        CMYKColor cMYKColor = (CMYKColor)this.altcs;
                        float f = cMYKColor.getCyan();
                        float f2 = cMYKColor.getMagenta();
                        float f3 = cMYKColor.getYellow();
                        float f4 = cMYKColor.getBlack();
                        object = PdfFunction.type2((PdfWriter)object, new float[]{0.0f, 1.0f}, null, new float[]{0.0f, 0.0f, 0.0f, 0.0f}, new float[]{f, f2, f3, f4}, 1.0f);
                        break;
                    }
                    case 1: {
                        pdfArray.add(PdfName.DEVICEGRAY);
                        float f = ((GrayColor)this.altcs).getGray();
                        object = PdfFunction.type2((PdfWriter)object, new float[]{0.0f, 1.0f}, null, new float[]{1.0f}, new float[]{f}, 1.0f);
                        break;
                    }
                }
            } else {
                LabColor labColor = (LabColor)this.altcs;
                if (this.altColorDetails != null) {
                    pdfArray.add(this.altColorDetails.getIndirectReference());
                } else {
                    pdfArray.add(labColor.getLabColorSpace().getPdfObject((PdfWriter)object));
                }
                float f = labColor.getL();
                float f5 = labColor.getA();
                float f6 = labColor.getB();
                object = PdfFunction.type2((PdfWriter)object, new float[]{0.0f, 1.0f}, null, new float[]{100.0f, 0.0f, 0.0f}, new float[]{f, f5, f6}, 1.0f);
            }
        } else {
            pdfArray.add(PdfName.DEVICERGB);
            float f = (float)this.altcs.getRed() / 255.0f;
            float f7 = (float)this.altcs.getGreen() / 255.0f;
            float f8 = (float)this.altcs.getBlue() / 255.0f;
            object = PdfFunction.type2((PdfWriter)object, new float[]{0.0f, 1.0f}, null, new float[]{1.0f, 1.0f, 1.0f}, new float[]{f, f7, f8}, 1.0f);
        }
        pdfArray.add(object.getReference());
        return pdfArray;
    }

    @Deprecated
    protected PdfObject getSpotObject(PdfWriter pdfWriter) {
        return this.getPdfObject(pdfWriter);
    }

    @Override
    public int hashCode() {
        return this.name.hashCode() * 31 + this.altcs.hashCode();
    }
}

