/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf;

import com.itextpdf.text.ExceptionConverter;
import com.itextpdf.text.error_messages.MessageLocalization;
import java.io.FileInputStream;
import java.io.InputStream;
import java.io.UnsupportedEncodingException;
import java.util.HashMap;

public class ICC_Profile {
    private static HashMap<String, Integer> cstags = new HashMap();
    protected byte[] data;
    protected int numComponents;

    static {
        cstags.put("XYZ ", 3);
        cstags.put("Lab ", 3);
        cstags.put("Luv ", 3);
        cstags.put("YCbr", 3);
        cstags.put("Yxy ", 3);
        cstags.put("RGB ", 3);
        cstags.put("GRAY", 1);
        cstags.put("HSV ", 3);
        cstags.put("HLS ", 3);
        cstags.put("CMYK", 4);
        cstags.put("CMY ", 3);
        cstags.put("2CLR", 2);
        cstags.put("3CLR", 3);
        cstags.put("4CLR", 4);
        cstags.put("5CLR", 5);
        cstags.put("6CLR", 6);
        cstags.put("7CLR", 7);
        cstags.put("8CLR", 8);
        cstags.put("9CLR", 9);
        cstags.put("ACLR", 10);
        cstags.put("BCLR", 11);
        cstags.put("CCLR", 12);
        cstags.put("DCLR", 13);
        cstags.put("ECLR", 14);
        cstags.put("FCLR", 15);
    }

    protected ICC_Profile() {
    }

    /*
     * WARNING - Removed back jump from a try to a catch block - possible behaviour change.
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    public static ICC_Profile GetInstance(String object) {
        Object object2;
        block11 : {
            FileInputStream fileInputStream = null;
            object2 = null;
            object = new FileInputStream((String)object);
            object2 = ICC_Profile.getInstance((InputStream)object);
            try {
                object.close();
                return object2;
            }
            catch (Exception exception) {
                return object2;
            }
            catch (Throwable throwable) {
                object2 = object;
                object = throwable;
                break block11;
            }
            catch (Exception exception) {
                object2 = object;
                object = exception;
                throw new ExceptionConverter((Exception)object);
            }
            catch (Throwable throwable) {
                break block11;
            }
            catch (Exception exception) {
                object2 = fileInputStream;
            }
            {
                throw new ExceptionConverter((Exception)object);
            }
        }
        try {
            object2.close();
        }
        catch (Exception exception) {
            throw object;
        }
        throw object;
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public static ICC_Profile getInstance(InputStream inputStream) {
        int n;
        byte[] arrby;
        int n2;
        int n3;
        try {
            arrby = new byte[128];
            n2 = 0;
            for (n3 = arrby.length; n3 > 0; n3 -= n, n2 += n) {
                n = inputStream.read(arrby, n2, n3);
                if (n >= 0) continue;
                throw new IllegalArgumentException(MessageLocalization.getComposedMessage("invalid.icc.profile", new Object[0]));
            }
        }
        catch (Exception exception) {
            throw new ExceptionConverter(exception);
        }
        if (arrby[36] != 97) throw new IllegalArgumentException(MessageLocalization.getComposedMessage("invalid.icc.profile", new Object[0]));
        if (arrby[37] != 99) throw new IllegalArgumentException(MessageLocalization.getComposedMessage("invalid.icc.profile", new Object[0]));
        if (arrby[38] != 115) throw new IllegalArgumentException(MessageLocalization.getComposedMessage("invalid.icc.profile", new Object[0]));
        if (arrby[39] != 112) {
            throw new IllegalArgumentException(MessageLocalization.getComposedMessage("invalid.icc.profile", new Object[0]));
        }
        n2 = (arrby[0] & 255) << 24 | (arrby[1] & 255) << 16 | (arrby[2] & 255) << 8 | arrby[3] & 255;
        byte[] arrby2 = new byte[n2];
        System.arraycopy(arrby, 0, arrby2, 0, arrby.length);
        n3 = n2 - arrby.length;
        n2 = arrby.length;
        while (n3 > 0) {
            n = inputStream.read(arrby2, n2, n3);
            if (n < 0) {
                throw new IllegalArgumentException(MessageLocalization.getComposedMessage("invalid.icc.profile", new Object[0]));
            }
            n3 -= n;
            n2 += n;
        }
        return ICC_Profile.getInstance(arrby2);
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    public static ICC_Profile getInstance(byte[] object) {
        Integer n;
        int n2;
        block3 : {
            try {
                n = cstags.get(new String((byte[])object, 16, 4, "US-ASCII"));
                if (n != null) break block3;
                n2 = 0;
                return ICC_Profile.getInstance(object, n2);
            }
            catch (UnsupportedEncodingException unsupportedEncodingException) {
                throw new ExceptionConverter(unsupportedEncodingException);
            }
        }
        n2 = n;
        return ICC_Profile.getInstance(object, n2);
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public static ICC_Profile getInstance(byte[] object, int n) {
        int n2 = ((Object)object).length;
        int n3 = 0;
        if (n2 < 128) throw new IllegalArgumentException(MessageLocalization.getComposedMessage("invalid.icc.profile", new Object[0]));
        if (object[36] != 97) throw new IllegalArgumentException(MessageLocalization.getComposedMessage("invalid.icc.profile", new Object[0]));
        if (object[37] != 99) throw new IllegalArgumentException(MessageLocalization.getComposedMessage("invalid.icc.profile", new Object[0]));
        if (object[38] != 115) throw new IllegalArgumentException(MessageLocalization.getComposedMessage("invalid.icc.profile", new Object[0]));
        if (object[39] != 112) {
            throw new IllegalArgumentException(MessageLocalization.getComposedMessage("invalid.icc.profile", new Object[0]));
        }
        try {
            ICC_Profile iCC_Profile = new ICC_Profile();
            iCC_Profile.data = object;
            object = cstags.get(new String((byte[])object, 16, 4, "US-ASCII"));
            if (object != null) {
                n3 = object.intValue();
            }
            iCC_Profile.numComponents = n3;
            if (n3 == n) return iCC_Profile;
            object = new StringBuilder();
            object.append("ICC profile contains ");
            object.append(n3);
            object.append(" component(s), the image data contains ");
            object.append(n);
            object.append(" component(s)");
            throw new IllegalArgumentException(object.toString());
        }
        catch (UnsupportedEncodingException unsupportedEncodingException) {
            throw new ExceptionConverter(unsupportedEncodingException);
        }
    }

    public byte[] getData() {
        return this.data;
    }

    public int getNumComponents() {
        return this.numComponents;
    }
}

