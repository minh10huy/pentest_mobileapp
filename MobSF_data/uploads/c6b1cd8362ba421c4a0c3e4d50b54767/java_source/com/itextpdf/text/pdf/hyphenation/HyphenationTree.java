/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf.hyphenation;

import com.itextpdf.text.pdf.hyphenation.ByteVector;
import com.itextpdf.text.pdf.hyphenation.CharVector;
import com.itextpdf.text.pdf.hyphenation.Hyphenation;
import com.itextpdf.text.pdf.hyphenation.PatternConsumer;
import com.itextpdf.text.pdf.hyphenation.SimplePatternParser;
import com.itextpdf.text.pdf.hyphenation.TernaryTree;
import java.io.InputStream;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.HashMap;

public class HyphenationTree
extends TernaryTree
implements PatternConsumer {
    private static final long serialVersionUID = -7763254239309429432L;
    protected TernaryTree classmap = new TernaryTree();
    private transient TernaryTree ivalues;
    protected HashMap<String, ArrayList<Object>> stoplist = new HashMap(23);
    protected ByteVector vspace = new ByteVector();

    public HyphenationTree() {
        this.vspace.alloc(1);
    }

    @Override
    public void addClass(String string2) {
        if (string2.length() > 0) {
            char c = string2.charAt(0);
            char[] arrc = new char[2];
            arrc[1] = '\u0000';
            for (int i = 0; i < string2.length(); ++i) {
                arrc[0] = string2.charAt(i);
                this.classmap.insert(arrc, 0, c);
            }
        }
    }

    @Override
    public void addException(String string2, ArrayList<Object> arrayList) {
        this.stoplist.put(string2, arrayList);
    }

    @Override
    public void addPattern(String string2, String string3) {
        int n;
        int n2 = n = this.ivalues.find(string3);
        if (n <= 0) {
            n2 = this.packValues(string3);
            this.ivalues.insert(string3, (char)n2);
        }
        this.insert(string2, (char)n2);
    }

    public String findPattern(String string2) {
        int n = super.find(string2);
        if (n >= 0) {
            return this.unpackValues(n);
        }
        return "";
    }

    protected byte[] getValues(int n) {
        StringBuffer stringBuffer = new StringBuffer();
        byte[] arrby = this.vspace;
        int n2 = n + 1;
        char c = arrby.get(n);
        n = n2;
        while (c != '\u0000') {
            stringBuffer.append((char)((c >>> 4) - 1));
            c = (char)(c & 15);
            if (c == '\u0000') break;
            stringBuffer.append((char)(c - '\u0001'));
            c = (char)this.vspace.get(n);
            ++n;
        }
        arrby = new byte[stringBuffer.length()];
        for (n = 0; n < arrby.length; ++n) {
            arrby[n] = (byte)stringBuffer.charAt(n);
        }
        return arrby;
    }

    protected int hstrcmp(char[] arrc, int n, char[] arrc2, int n2) {
        while (arrc[n] == arrc2[n2]) {
            if (arrc[n] == '\u0000') {
                return 0;
            }
            ++n;
            ++n2;
        }
        if (arrc2[n2] == '\u0000') {
            return 0;
        }
        return arrc[n] - arrc2[n2];
    }

    public Hyphenation hyphenate(String arrc, int n, int n2) {
        arrc = arrc.toCharArray();
        return this.hyphenate(arrc, 0, arrc.length, n, n2);
    }

    public Hyphenation hyphenate(char[] arrc, int n, int n2, int n3, int n4) {
        int n5;
        int n6;
        int n7;
        Object object = new char[n2 + 3];
        char[] arrc2 = new char[2];
        int n8 = n2;
        int n9 = 0;
        int n10 = 0;
        for (n6 = 1; n6 <= n2; ++n6) {
            arrc2[0] = arrc[n + n6 - 1];
            n7 = this.classmap.find(arrc2, 0);
            if (n7 < 0) {
                n7 = n9 + 1;
                if (n6 == n7) {
                    n9 = n7;
                } else {
                    n10 = 1;
                }
                --n8;
                continue;
            }
            if (n10 == 0) {
                object[n6 - n9] = (char)n7;
                continue;
            }
            return null;
        }
        if (n8 < n3 + n4) {
            return null;
        }
        n6 = n8 + 1;
        arrc2 = new int[n6];
        Object object2 = new byte[]((char[])object, 1, n8);
        if (this.stoplist.containsKey(object2)) {
            object = this.stoplist.get(object2);
            n6 = 0;
            n7 = 0;
            n10 = 0;
            do {
                n5 = n10;
                if (n6 < object.size()) {
                    object2 = object.get(n6);
                    n5 = n7;
                    int n11 = n10;
                    if (object2 instanceof String) {
                        n5 = n7 += ((String)object2).length();
                        n11 = n10;
                        if (n7 >= n3) {
                            n5 = n7;
                            n11 = n10;
                            if (n7 < n8 - n4) {
                                arrc2[n10] = n7 + n9;
                                n11 = n10 + 1;
                                n5 = n7;
                            }
                        }
                    }
                    ++n6;
                    n7 = n5;
                    n10 = n11;
                    continue;
                }
                break;
            } while (true);
        } else {
            object[0] = 46;
            object[n6] = 46;
            object[n8 + 2] = '\u0000';
            object2 = new byte[n8 + 3];
            for (n10 = 0; n10 < n6; ++n10) {
                this.searchPatterns((char[])object, n10, (byte[])object2);
            }
            n7 = 0;
            n10 = 0;
            while (n7 < n8) {
                n5 = n7 + 1;
                n6 = n10;
                if ((object2[n5] & 1) == 1) {
                    n6 = n10;
                    if (n7 >= n3) {
                        n6 = n10;
                        if (n7 <= n8 - n4) {
                            arrc2[n10] = n7 + n9;
                            n6 = n10 + 1;
                        }
                    }
                }
                n7 = n5;
                n10 = n6;
            }
            n5 = n10;
        }
        if (n5 > 0) {
            object = new int[n5];
            System.arraycopy(arrc2, 0, object, 0, n5);
            return new Hyphenation(new String(arrc, n, n2), (int[])object);
        }
        return null;
    }

    public void loadSimplePatterns(InputStream inputStream) {
        SimplePatternParser simplePatternParser = new SimplePatternParser();
        this.ivalues = new TernaryTree();
        simplePatternParser.parse(inputStream, this);
        this.trimToSize();
        this.vspace.trimToSize();
        this.classmap.trimToSize();
        this.ivalues = null;
    }

    protected int packValues(String string2) {
        int n = string2.length();
        int n2 = (n & 1) == 1 ? (n >> 1) + 2 : (n >> 1) + 1;
        int n3 = this.vspace.alloc(n2);
        byte[] arrby = this.vspace.getArray();
        for (int i = 0; i < n; ++i) {
            int n4 = i >> 1;
            byte by = (byte)(string2.charAt(i) - 48 + 1 & 15);
            if ((i & 1) == 1) {
                arrby[n4 += n3] = (byte)(by | arrby[n4]);
                continue;
            }
            arrby[n4 + n3] = (byte)(by << 4);
        }
        arrby[n2 - 1 + n3] = 0;
        return n3;
    }

    @Override
    public void printStats() {
        PrintStream printStream = System.out;
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("Value space size = ");
        stringBuilder.append(Integer.toString(this.vspace.length()));
        printStream.println(stringBuilder.toString());
        super.printStats();
    }

    protected void searchPatterns(char[] arrc, int n, byte[] arrby) {
        int n2 = arrc[n];
        int n3 = this.root;
        int n4 = n;
        block0 : while (n3 > 0 && n3 < this.sc.length) {
            char c;
            int n5 = this.sc[n3];
            int n6 = 0;
            int n7 = 0;
            if (n5 == 65535) {
                if (this.hstrcmp(arrc, n4, this.kv.getArray(), this.lo[n3]) == 0) {
                    arrc = this.getValues(this.eq[n3]);
                    n2 = arrc.length;
                    n3 = n;
                    for (n = n7; n < n2; ++n) {
                        c = arrc[n];
                        if (n3 < arrby.length && c > arrby[n3]) {
                            arrby[n3] = c;
                        }
                        ++n3;
                    }
                }
                return;
            }
            n7 = n2 - this.sc[n3];
            if (n7 == 0) {
                if (n2 == 0) {
                    return;
                }
                int n8 = n4 + 1;
                int n9 = arrc[n8];
                n5 = n7 = this.eq[n3];
                do {
                    n4 = n8;
                    n3 = n7;
                    n2 = n9;
                    if (n5 <= 0) continue block0;
                    n4 = n8;
                    n3 = n7;
                    n2 = n9;
                    if (n5 >= this.sc.length) continue block0;
                    if (this.sc[n5] == '\uffff') {
                        n4 = n8;
                        n3 = n7;
                        n2 = n9;
                        continue block0;
                    }
                    if (this.sc[n5] == '\u0000') {
                        byte[] arrby2 = this.getValues(this.eq[n5]);
                        int n10 = arrby2.length;
                        int n11 = n;
                        n5 = n6;
                        do {
                            n4 = n8;
                            n3 = n7;
                            n2 = n9;
                            if (n5 >= n10) continue block0;
                            c = arrby2[n5];
                            if (n11 < arrby.length && c > arrby[n11]) {
                                arrby[n11] = c;
                            }
                            ++n11;
                            ++n5;
                        } while (true);
                    }
                    n5 = this.lo[n5];
                } while (true);
            }
            if (n7 < 0) {
                n3 = this.lo[n3];
                continue;
            }
            n3 = this.hi[n3];
        }
    }

    protected String unpackValues(int n) {
        StringBuffer stringBuffer = new StringBuffer();
        ByteVector byteVector = this.vspace;
        int n2 = n + 1;
        char c = byteVector.get(n);
        n = n2;
        while (c != '\u0000') {
            stringBuffer.append((char)((c >>> 4) - 1 + 48));
            c = (char)(c & 15);
            if (c == '\u0000') break;
            stringBuffer.append((char)(c - '\u0001' + 48));
            c = (char)this.vspace.get(n);
            ++n;
        }
        return stringBuffer.toString();
    }
}

