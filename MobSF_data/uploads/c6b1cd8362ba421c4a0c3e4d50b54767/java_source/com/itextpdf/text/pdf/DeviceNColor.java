/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf;

import com.itextpdf.text.error_messages.MessageLocalization;
import com.itextpdf.text.pdf.ExtendedColor;
import com.itextpdf.text.pdf.PdfDeviceNColor;
import com.itextpdf.text.pdf.PdfSpotColor;

public class DeviceNColor
extends ExtendedColor {
    PdfDeviceNColor pdfDeviceNColor;
    float[] tints;

    public DeviceNColor(PdfDeviceNColor pdfDeviceNColor, float[] arrf) {
        super(6);
        if (pdfDeviceNColor.getSpotColors().length != arrf.length) {
            throw new RuntimeException(MessageLocalization.getComposedMessage("devicen.color.shall.have.the.same.number.of.colorants.as.the.destination.DeviceN.color.space", new Object[0]));
        }
        this.pdfDeviceNColor = pdfDeviceNColor;
        this.tints = arrf;
    }

    @Override
    public boolean equals(Object object) {
        if (object instanceof DeviceNColor) {
            object = (DeviceNColor)object;
            if (object.tints.length == this.tints.length) {
                float[] arrf = this.tints;
                int n = arrf.length;
                int n2 = 0;
                for (int i = 0; i < n; ++i) {
                    if (arrf[i] != object.tints[n2]) {
                        return false;
                    }
                    ++n2;
                }
                return true;
            }
        }
        return false;
    }

    public PdfDeviceNColor getPdfDeviceNColor() {
        return this.pdfDeviceNColor;
    }

    public float[] getTints() {
        return this.tints;
    }

    @Override
    public int hashCode() {
        int n = this.pdfDeviceNColor.hashCode();
        float[] arrf = this.tints;
        int n2 = arrf.length;
        for (int i = 0; i < n2; ++i) {
            n ^= Float.valueOf(arrf[i]).hashCode();
        }
        return n;
    }
}

