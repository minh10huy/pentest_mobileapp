/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf.parser;

import com.itextpdf.text.exceptions.UnsupportedPdfException;
import com.itextpdf.text.log.Logger;
import com.itextpdf.text.log.LoggerFactory;
import com.itextpdf.text.pdf.FilterHandlers;
import com.itextpdf.text.pdf.PRTokeniser;
import com.itextpdf.text.pdf.PdfArray;
import com.itextpdf.text.pdf.PdfContentParser;
import com.itextpdf.text.pdf.PdfDictionary;
import com.itextpdf.text.pdf.PdfName;
import com.itextpdf.text.pdf.PdfNumber;
import com.itextpdf.text.pdf.PdfObject;
import com.itextpdf.text.pdf.PdfReader;
import com.itextpdf.text.pdf.parser.InlineImageInfo;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;

public final class InlineImageUtils {
    private static final Logger LOGGER = LoggerFactory.getLogger(InlineImageUtils.class.getName());
    private static final Map<PdfName, PdfName> inlineImageColorSpaceAbbreviationMap;
    private static final Map<PdfName, PdfName> inlineImageEntryAbbreviationMap;
    private static final Map<PdfName, PdfName> inlineImageFilterAbbreviationMap;

    static {
        inlineImageEntryAbbreviationMap = new HashMap<PdfName, PdfName>();
        inlineImageEntryAbbreviationMap.put(PdfName.BITSPERCOMPONENT, PdfName.BITSPERCOMPONENT);
        inlineImageEntryAbbreviationMap.put(PdfName.COLORSPACE, PdfName.COLORSPACE);
        inlineImageEntryAbbreviationMap.put(PdfName.DECODE, PdfName.DECODE);
        inlineImageEntryAbbreviationMap.put(PdfName.DECODEPARMS, PdfName.DECODEPARMS);
        inlineImageEntryAbbreviationMap.put(PdfName.FILTER, PdfName.FILTER);
        inlineImageEntryAbbreviationMap.put(PdfName.HEIGHT, PdfName.HEIGHT);
        inlineImageEntryAbbreviationMap.put(PdfName.IMAGEMASK, PdfName.IMAGEMASK);
        inlineImageEntryAbbreviationMap.put(PdfName.INTENT, PdfName.INTENT);
        inlineImageEntryAbbreviationMap.put(PdfName.INTERPOLATE, PdfName.INTERPOLATE);
        inlineImageEntryAbbreviationMap.put(PdfName.WIDTH, PdfName.WIDTH);
        inlineImageEntryAbbreviationMap.put(new PdfName("BPC"), PdfName.BITSPERCOMPONENT);
        inlineImageEntryAbbreviationMap.put(new PdfName("CS"), PdfName.COLORSPACE);
        inlineImageEntryAbbreviationMap.put(new PdfName("D"), PdfName.DECODE);
        inlineImageEntryAbbreviationMap.put(new PdfName("DP"), PdfName.DECODEPARMS);
        inlineImageEntryAbbreviationMap.put(new PdfName("F"), PdfName.FILTER);
        inlineImageEntryAbbreviationMap.put(new PdfName("H"), PdfName.HEIGHT);
        inlineImageEntryAbbreviationMap.put(new PdfName("IM"), PdfName.IMAGEMASK);
        inlineImageEntryAbbreviationMap.put(new PdfName("I"), PdfName.INTERPOLATE);
        inlineImageEntryAbbreviationMap.put(new PdfName("W"), PdfName.WIDTH);
        inlineImageColorSpaceAbbreviationMap = new HashMap<PdfName, PdfName>();
        inlineImageColorSpaceAbbreviationMap.put(new PdfName("G"), PdfName.DEVICEGRAY);
        inlineImageColorSpaceAbbreviationMap.put(new PdfName("RGB"), PdfName.DEVICERGB);
        inlineImageColorSpaceAbbreviationMap.put(new PdfName("CMYK"), PdfName.DEVICECMYK);
        inlineImageColorSpaceAbbreviationMap.put(new PdfName("I"), PdfName.INDEXED);
        inlineImageFilterAbbreviationMap = new HashMap<PdfName, PdfName>();
        inlineImageFilterAbbreviationMap.put(new PdfName("AHx"), PdfName.ASCIIHEXDECODE);
        inlineImageFilterAbbreviationMap.put(new PdfName("A85"), PdfName.ASCII85DECODE);
        inlineImageFilterAbbreviationMap.put(new PdfName("LZW"), PdfName.LZWDECODE);
        inlineImageFilterAbbreviationMap.put(new PdfName("Fl"), PdfName.FLATEDECODE);
        inlineImageFilterAbbreviationMap.put(new PdfName("RL"), PdfName.RUNLENGTHDECODE);
        inlineImageFilterAbbreviationMap.put(new PdfName("CCF"), PdfName.CCITTFAXDECODE);
        inlineImageFilterAbbreviationMap.put(new PdfName("DCT"), PdfName.DCTDECODE);
    }

    private InlineImageUtils() {
    }

    private static int computeBytesPerRow(PdfDictionary pdfDictionary, PdfDictionary pdfDictionary2) {
        PdfNumber pdfNumber = pdfDictionary.getAsNumber(PdfName.WIDTH);
        PdfNumber pdfNumber2 = pdfDictionary.getAsNumber(PdfName.BITSPERCOMPONENT);
        int n = InlineImageUtils.getComponentsPerPixel(pdfDictionary.getAsName(PdfName.COLORSPACE), pdfDictionary2);
        int n2 = pdfNumber.intValue();
        int n3 = pdfNumber2 != null ? pdfNumber2.intValue() : 1;
        return (n2 * n3 * n + 7) / 8;
    }

    private static PdfObject getAlternateValue(PdfName pdfName, PdfObject pdfObject) {
        if (pdfName == PdfName.FILTER) {
            if (pdfObject instanceof PdfName) {
                pdfName = inlineImageFilterAbbreviationMap.get(pdfObject);
                if (pdfName != null) {
                    return pdfName;
                }
            } else if (pdfObject instanceof PdfArray) {
                pdfObject = (PdfArray)pdfObject;
                PdfArray pdfArray = new PdfArray();
                int n = pdfObject.size();
                for (int i = 0; i < n; ++i) {
                    pdfArray.add(InlineImageUtils.getAlternateValue(pdfName, pdfObject.getPdfObject(i)));
                }
                return pdfArray;
            }
        } else if (pdfName == PdfName.COLORSPACE && (pdfName = inlineImageColorSpaceAbbreviationMap.get(pdfObject)) != null) {
            return pdfName;
        }
        return pdfObject;
    }

    private static int getComponentsPerPixel(PdfName pdfName, PdfDictionary serializable) {
        if (pdfName == null) {
            return 1;
        }
        if (pdfName.equals(PdfName.DEVICEGRAY)) {
            return 1;
        }
        if (pdfName.equals(PdfName.DEVICERGB)) {
            return 3;
        }
        if (pdfName.equals(PdfName.DEVICECMYK)) {
            return 4;
        }
        if (serializable != null) {
            PdfObject pdfObject = serializable.getAsArray(pdfName);
            if (pdfObject != null) {
                if (PdfName.INDEXED.equals(pdfObject.getAsName(0))) {
                    return 1;
                }
            } else {
                pdfObject = serializable.getAsName(pdfName);
                if (pdfObject != null) {
                    return InlineImageUtils.getComponentsPerPixel((PdfName)pdfObject, (PdfDictionary)serializable);
                }
            }
        }
        serializable = new StringBuilder();
        serializable.append("Unexpected color space ");
        serializable.append(pdfName);
        throw new IllegalArgumentException(serializable.toString());
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    private static boolean inlineImageStreamBytesAreComplete(byte[] arrby, PdfDictionary pdfDictionary) {
        try {
            PdfReader.decodeBytes(arrby, pdfDictionary, FilterHandlers.getDefaultFilterHandlers());
            return true;
        }
        catch (UnsupportedPdfException unsupportedPdfException) {
            LOGGER.warn(unsupportedPdfException.getMessage());
            return true;
        }
        catch (IOException iOException) {
            return false;
        }
    }

    public static InlineImageInfo parseInlineImage(PdfContentParser pdfContentParser, PdfDictionary pdfDictionary) throws IOException {
        PdfDictionary pdfDictionary2 = InlineImageUtils.parseInlineImageDictionary(pdfContentParser);
        return new InlineImageInfo(InlineImageUtils.parseInlineImageSamples(pdfDictionary2, pdfDictionary, pdfContentParser), pdfDictionary2);
    }

    private static PdfDictionary parseInlineImageDictionary(PdfContentParser object) throws IOException {
        PdfObject pdfObject;
        PdfDictionary pdfDictionary = new PdfDictionary();
        while ((pdfObject = object.readPRObject()) != null && !"ID".equals(pdfObject.toString())) {
            PdfName pdfName;
            PdfObject pdfObject2 = object.readPRObject();
            PdfName pdfName2 = pdfName = inlineImageEntryAbbreviationMap.get(pdfObject);
            if (pdfName == null) {
                pdfName2 = (PdfName)pdfObject;
            }
            pdfDictionary.put(pdfName2, InlineImageUtils.getAlternateValue(pdfName2, pdfObject2));
        }
        int n = object.getTokeniser().read();
        if (!PRTokeniser.isWhitespace(n)) {
            object = new StringBuilder();
            object.append("Unexpected character ");
            object.append(n);
            object.append(" found after ID in inline image");
            throw new IOException(object.toString());
        }
        return pdfDictionary;
    }

    private static byte[] parseInlineImageSamples(PdfDictionary pdfDictionary, PdfDictionary object, PdfContentParser object2) throws IOException {
        if (!pdfDictionary.contains(PdfName.FILTER)) {
            return InlineImageUtils.parseUnfilteredSamples(pdfDictionary, (PdfDictionary)object, (PdfContentParser)object2);
        }
        object = new ByteArrayOutputStream();
        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        object2 = object2.getTokeniser();
        block0 : do {
            int n = 0;
            int n2;
            while ((n2 = object2.read()) != -1) {
                if (n == 0 && PRTokeniser.isWhitespace(n2)) {
                    ++n;
                    byteArrayOutputStream.write(n2);
                    continue;
                }
                if (n == 1 && n2 == 69) {
                    ++n;
                    byteArrayOutputStream.write(n2);
                    continue;
                }
                if (n == 1 && PRTokeniser.isWhitespace(n2)) {
                    object.write(byteArrayOutputStream.toByteArray());
                    byteArrayOutputStream.reset();
                    byteArrayOutputStream.write(n2);
                    continue;
                }
                if (n == 2 && n2 == 73) {
                    ++n;
                    byteArrayOutputStream.write(n2);
                    continue;
                }
                if (n == 3 && PRTokeniser.isWhitespace(n2)) {
                    byte[] arrby = object.toByteArray();
                    if (InlineImageUtils.inlineImageStreamBytesAreComplete(arrby, pdfDictionary)) {
                        return arrby;
                    }
                    object.write(byteArrayOutputStream.toByteArray());
                    byteArrayOutputStream.reset();
                    object.write(n2);
                    continue block0;
                }
                object.write(byteArrayOutputStream.toByteArray());
                byteArrayOutputStream.reset();
                object.write(n2);
                continue block0;
            }
            break;
        } while (true);
        throw new InlineImageParseException("Could not find image data or EI");
    }

    private static byte[] parseUnfilteredSamples(PdfDictionary arrby, PdfDictionary object, PdfContentParser pdfContentParser) throws IOException {
        if (arrby.contains(PdfName.FILTER)) {
            throw new IllegalArgumentException("Dictionary contains filters");
        }
        PdfNumber pdfNumber = arrby.getAsNumber(PdfName.HEIGHT);
        int n = InlineImageUtils.computeBytesPerRow((PdfDictionary)arrby, (PdfDictionary)object) * pdfNumber.intValue();
        arrby = new byte[n];
        object = pdfContentParser.getTokeniser();
        int n2 = object.read();
        boolean bl = PRTokeniser.isWhitespace(n2);
        int n3 = 0;
        if (!bl || n2 == 0) {
            arrby[0] = (byte)n2;
            n3 = 1;
        }
        while (n3 < n) {
            n2 = object.read();
            if (n2 == -1) {
                throw new InlineImageParseException("End of content stream reached before end of image data");
            }
            arrby[n3] = (byte)n2;
            ++n3;
        }
        if (!pdfContentParser.readPRObject().toString().equals("EI") && !pdfContentParser.readPRObject().toString().equals("EI")) {
            throw new InlineImageParseException("EI not found after end of image data");
        }
        return arrby;
    }

    public static class InlineImageParseException
    extends IOException {
        private static final long serialVersionUID = 233760879000268548L;

        public InlineImageParseException(String string2) {
            super(string2);
        }
    }

}

