/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf;

import com.itextpdf.text.pdf.PRIndirectReference;
import com.itextpdf.text.pdf.PdfArray;
import com.itextpdf.text.pdf.PdfDictionary;
import com.itextpdf.text.pdf.PdfName;
import com.itextpdf.text.pdf.PdfObject;
import com.itextpdf.text.pdf.PdfReader;
import com.itextpdf.text.pdf.PdfString;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.ListIterator;
import java.util.Set;

public class PRAcroForm
extends PdfDictionary {
    HashMap<String, FieldInformation> fieldByName;
    ArrayList<FieldInformation> fields;
    PdfReader reader;
    ArrayList<PdfDictionary> stack;

    public PRAcroForm(PdfReader pdfReader) {
        this.reader = pdfReader;
        this.fields = new ArrayList();
        this.fieldByName = new HashMap();
        this.stack = new ArrayList();
    }

    public FieldInformation getField(String string2) {
        return this.fieldByName.get(string2);
    }

    public ArrayList<FieldInformation> getFields() {
        return this.fields;
    }

    public PRIndirectReference getRefByName(String object) {
        if ((object = this.fieldByName.get(object)) == null) {
            return null;
        }
        return object.getRef();
    }

    protected void iterateFields(PdfArray object, PRIndirectReference pRIndirectReference, String string2) {
        ListIterator<PdfObject> listIterator = object.listIterator();
        while (listIterator.hasNext()) {
            Serializable serializable;
            Object object2 = (PRIndirectReference)listIterator.next();
            PdfDictionary pdfDictionary = (PdfDictionary)PdfReader.getPdfObjectRelease((PdfObject)object2);
            object = (PdfString)pdfDictionary.get(PdfName.T);
            boolean bl = object != null;
            if (bl) {
                if (string2 == null) {
                    object = object.toString();
                } else {
                    serializable = new StringBuilder();
                    serializable.append(string2);
                    serializable.append('.');
                    serializable.append(object.toString());
                    object = serializable.toString();
                }
            } else {
                object2 = pRIndirectReference;
                object = string2;
            }
            serializable = (PdfArray)pdfDictionary.get(PdfName.KIDS);
            if (serializable != null) {
                this.pushAttrib(pdfDictionary);
                this.iterateFields((PdfArray)serializable, (PRIndirectReference)object2, (String)object);
                this.stack.remove(this.stack.size() - 1);
                continue;
            }
            if (object2 == null) continue;
            PdfDictionary pdfDictionary2 = this.stack.get(this.stack.size() - 1);
            serializable = pdfDictionary2;
            if (bl) {
                serializable = this.mergeAttrib(pdfDictionary2, pdfDictionary);
            }
            serializable.put(PdfName.T, new PdfString((String)object));
            object2 = new FieldInformation((String)object, (PdfDictionary)serializable, (PRIndirectReference)object2);
            this.fields.add((FieldInformation)object2);
            this.fieldByName.put((String)object, (FieldInformation)object2);
        }
    }

    protected PdfDictionary mergeAttrib(PdfDictionary object, PdfDictionary pdfDictionary) {
        PdfDictionary pdfDictionary2 = new PdfDictionary();
        if (object != null) {
            pdfDictionary2.putAll((PdfDictionary)object);
        }
        for (PdfName pdfName : pdfDictionary.getKeys()) {
            if (!pdfName.equals(PdfName.DR) && !pdfName.equals(PdfName.DA) && !pdfName.equals(PdfName.Q) && !pdfName.equals(PdfName.FF) && !pdfName.equals(PdfName.DV) && !pdfName.equals(PdfName.V) && !pdfName.equals(PdfName.FT) && !pdfName.equals(PdfName.NM) && !pdfName.equals(PdfName.F)) continue;
            pdfDictionary2.put(pdfName, pdfDictionary.get(pdfName));
        }
        return pdfDictionary2;
    }

    protected void pushAttrib(PdfDictionary pdfDictionary) {
        PdfDictionary pdfDictionary2 = !this.stack.isEmpty() ? this.stack.get(this.stack.size() - 1) : null;
        pdfDictionary = this.mergeAttrib(pdfDictionary2, pdfDictionary);
        this.stack.add(pdfDictionary);
    }

    public void readAcroForm(PdfDictionary pdfObject) {
        if (pdfObject == null) {
            return;
        }
        this.hashMap = pdfObject.hashMap;
        this.pushAttrib((PdfDictionary)pdfObject);
        pdfObject = (PdfArray)PdfReader.getPdfObjectRelease(pdfObject.get(PdfName.FIELDS));
        if (pdfObject != null) {
            this.iterateFields((PdfArray)pdfObject, null, null);
        }
    }

    @Override
    public int size() {
        return this.fields.size();
    }

    public static class FieldInformation {
        String fieldName;
        PdfDictionary info;
        PRIndirectReference ref;

        FieldInformation(String string2, PdfDictionary pdfDictionary, PRIndirectReference pRIndirectReference) {
            this.fieldName = string2;
            this.info = pdfDictionary;
            this.ref = pRIndirectReference;
        }

        public PdfDictionary getInfo() {
            return this.info;
        }

        public String getName() {
            return this.fieldName;
        }

        public PRIndirectReference getRef() {
            return this.ref;
        }

        public String getWidgetName() {
            PdfObject pdfObject = this.info.get(PdfName.NM);
            if (pdfObject != null) {
                return pdfObject.toString();
            }
            return null;
        }
    }

}

