/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf;

import com.itextpdf.text.BaseColor;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Image;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.error_messages.MessageLocalization;
import com.itextpdf.text.pdf.BaseField;
import com.itextpdf.text.pdf.BaseFont;
import com.itextpdf.text.pdf.PRIndirectReference;
import com.itextpdf.text.pdf.PdfAnnotation;
import com.itextpdf.text.pdf.PdfAppearance;
import com.itextpdf.text.pdf.PdfArray;
import com.itextpdf.text.pdf.PdfBorderDictionary;
import com.itextpdf.text.pdf.PdfContentByte;
import com.itextpdf.text.pdf.PdfDashPattern;
import com.itextpdf.text.pdf.PdfDictionary;
import com.itextpdf.text.pdf.PdfFormField;
import com.itextpdf.text.pdf.PdfIndirectReference;
import com.itextpdf.text.pdf.PdfName;
import com.itextpdf.text.pdf.PdfNumber;
import com.itextpdf.text.pdf.PdfReader;
import com.itextpdf.text.pdf.PdfTemplate;
import com.itextpdf.text.pdf.PdfWriter;
import java.io.IOException;

public class PushbuttonField
extends BaseField {
    public static final int LAYOUT_ICON_LEFT_LABEL_RIGHT = 5;
    public static final int LAYOUT_ICON_ONLY = 2;
    public static final int LAYOUT_ICON_TOP_LABEL_BOTTOM = 3;
    public static final int LAYOUT_LABEL_LEFT_ICON_RIGHT = 6;
    public static final int LAYOUT_LABEL_ONLY = 1;
    public static final int LAYOUT_LABEL_OVER_ICON = 7;
    public static final int LAYOUT_LABEL_TOP_ICON_BOTTOM = 4;
    public static final int SCALE_ICON_ALWAYS = 1;
    public static final int SCALE_ICON_IS_TOO_BIG = 3;
    public static final int SCALE_ICON_IS_TOO_SMALL = 4;
    public static final int SCALE_ICON_NEVER = 2;
    private boolean iconFitToBounds;
    private float iconHorizontalAdjustment = 0.5f;
    private PRIndirectReference iconReference;
    private float iconVerticalAdjustment = 0.5f;
    private Image image;
    private int layout = 1;
    private boolean proportionalIcon = true;
    private int scaleIcon = 1;
    private PdfTemplate template;
    private PdfTemplate tp;

    public PushbuttonField(PdfWriter pdfWriter, Rectangle rectangle, String string2) {
        super(pdfWriter, rectangle, string2);
    }

    private float calculateFontSize(float f, float f2) throws IOException, DocumentException {
        float f3;
        BaseFont baseFont = this.getRealFont();
        float f4 = f3 = this.fontSize;
        if (f3 == 0.0f) {
            f4 = baseFont.getWidthPoint(this.text, 1.0f);
            f = f4 == 0.0f ? 12.0f : (f /= f4);
            f4 = f = Math.min(f, f2 / (1.0f - baseFont.getFontDescriptor(3, 1.0f)));
            if (f < 4.0f) {
                f4 = 4.0f;
            }
        }
        return f4;
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Lifted jumps to return sites
     */
    public PdfAppearance getAppearance() throws IOException, DocumentException {
        block54 : {
            block53 : {
                block51 : {
                    block52 : {
                        block48 : {
                            block49 : {
                                block50 : {
                                    var21_1 = this.getBorderAppearance();
                                    var22_2 = new Rectangle(var21_1.getBoundingBox());
                                    var19_3 = this.text;
                                    var16_4 = 1;
                                    var15_5 = 1;
                                    if (var19_3 == null || this.text.length() == 0) {
                                        if (this.layout == 1) return var21_1;
                                        if (this.image == null && this.template == null && this.iconReference == null) {
                                            return var21_1;
                                        }
                                    }
                                    if (this.layout == 2 && this.image == null && this.template == null && this.iconReference == null) {
                                        return var21_1;
                                    }
                                    var23_6 = this.getRealFont();
                                    var14_7 = this.borderStyle != 2 && this.borderStyle != 3 ? 0 : 1;
                                    var22_2.getHeight();
                                    var1_8 = this.borderWidth;
                                    var1_8 = var2_9 = this.borderWidth;
                                    if (var14_7 != 0) {
                                        var1_8 = this.borderWidth;
                                        var1_8 = var2_9 * 2.0f;
                                    }
                                    var2_9 = var14_7 != 0 ? this.borderWidth * 2.0f : this.borderWidth;
                                    var9_10 = Math.min(var1_8, Math.max(var2_9, 1.0f));
                                    this.tp = null;
                                    var3_11 = this.fontSize;
                                    var1_8 = var22_2.getWidth();
                                    var11_12 = var9_10 * 2.0f;
                                    var5_13 = var1_8 - var11_12 - 2.0f;
                                    var6_14 = var22_2.getHeight() - var11_12;
                                    var18_15 = this.iconFitToBounds;
                                    var10_16 = 0.0f;
                                    var1_8 = var18_15 != false ? 0.0f : var9_10 + 1.0f;
                                    var17_17 = this.layout;
                                    var4_18 = var1_8;
                                    var14_7 = var17_17;
                                    var2_9 = var3_11;
                                    if (this.image != null) break block50;
                                    var4_18 = var1_8;
                                    var14_7 = var17_17;
                                    var2_9 = var3_11;
                                    if (this.template != null) break block50;
                                    var4_18 = var1_8;
                                    var14_7 = var17_17;
                                    var2_9 = var3_11;
                                    if (this.iconReference != null) break block50;
                                    var2_9 = var3_11;
                                    ** GOTO lbl75
                                }
                                block18 : do {
                                    switch (var14_7) {
                                        default: {
                                            var1_8 = 0.0f;
                                            var19_3 = null;
                                            var3_11 = Float.NaN;
                                            var5_13 = var2_9;
                                            var2_9 = var3_11;
                                            break block48;
                                        }
                                        case 6: {
                                            if (this.text == null || this.text.length() == 0 || var5_13 <= 0.0f || var6_14 <= 0.0f) ** GOTO lbl101
                                            var1_8 = var22_2.getWidth() * 0.35f - var9_10;
                                            var3_11 = var1_8 > 0.0f ? this.calculateFontSize(var5_13, var1_8) : 4.0f;
                                            if (var23_6.getWidthPoint(this.text, var3_11) < var5_13) ** GOTO lbl64
                                            var2_9 = this.fontSize;
                                            var1_8 = var4_18;
                                            ** GOTO lbl75
lbl64: // 1 sources:
                                            var2_9 = var9_10 + 1.0f;
                                            var1_8 = (var22_2.getHeight() - var23_6.getFontDescriptor(1, var3_11)) / 2.0f;
                                            var19_3 = new Rectangle(var23_6.getWidthPoint(this.text, var3_11) + var2_9, var22_2.getBottom() + var4_18, var22_2.getRight() - var4_18, var22_2.getTop() - var4_18);
                                            ** GOTO lbl99
                                        }
                                        case 5: {
                                            if (this.text == null || this.text.length() == 0 || var5_13 <= 0.0f || var6_14 <= 0.0f) ** GOTO lbl101
                                            var1_8 = var22_2.getWidth() * 0.35f - var9_10;
                                            var3_11 = var1_8 > 0.0f ? this.calculateFontSize(var5_13, var1_8) : 4.0f;
                                            if (var23_6.getWidthPoint(this.text, var3_11) < var5_13) ** GOTO lbl78
                                            var2_9 = this.fontSize;
                                            var1_8 = var4_18;
lbl75: // 3 sources:
                                            var14_7 = 1;
                                            var4_18 = var1_8;
                                            continue block18;
lbl78: // 1 sources:
                                            var2_9 = var22_2.getWidth() - var23_6.getWidthPoint(this.text, var3_11) - var9_10 - 1.0f;
                                            var1_8 = (var22_2.getHeight() - var23_6.getFontDescriptor(1, var3_11)) / 2.0f;
                                            var19_3 = new Rectangle(var22_2.getLeft() + var4_18, var22_2.getBottom() + var4_18, var2_9 - 1.0f, var22_2.getTop() - var4_18);
                                            ** GOTO lbl99
                                        }
                                        case 4: {
                                            if (this.text == null || this.text.length() == 0 || var5_13 <= 0.0f || var6_14 <= 0.0f) ** GOTO lbl101
                                            var1_8 = var22_2.getHeight() * 0.35f - var9_10;
                                            var3_11 = var1_8 > 0.0f ? this.calculateFontSize(var5_13, var1_8) : 4.0f;
                                            var2_9 = (var22_2.getWidth() - var23_6.getWidthPoint(this.text, var3_11)) / 2.0f;
                                            var1_8 = var5_13 = var22_2.getHeight() - var9_10 - var3_11;
                                            if (var5_13 < var9_10) {
                                                var1_8 = var9_10;
                                            }
                                            var19_3 = new Rectangle(var22_2.getLeft() + var4_18, var22_2.getBottom() + var4_18, var22_2.getRight() - var4_18, var23_6.getFontDescriptor(3, var3_11) + var1_8);
                                            ** GOTO lbl99
                                        }
                                        case 3: {
                                            if (this.text == null || this.text.length() == 0 || var5_13 <= 0.0f || var6_14 <= 0.0f) ** GOTO lbl101
                                            var1_8 = var22_2.getHeight() * 0.35f - var9_10;
                                            var3_11 = var1_8 > 0.0f ? this.calculateFontSize(var5_13, var1_8) : 4.0f;
                                            var2_9 = (var22_2.getWidth() - var23_6.getWidthPoint(this.text, var3_11)) / 2.0f;
                                            var1_8 = var9_10 - var23_6.getFontDescriptor(3, var3_11);
                                            var19_3 = new Rectangle(var22_2.getLeft() + var4_18, var1_8 + var3_11, var22_2.getRight() - var4_18, var22_2.getTop() - var4_18);
lbl99: // 4 sources:
                                            var5_13 = var3_11;
                                            break block48;
lbl101: // 4 sources:
                                            var14_7 = 2;
                                            continue block18;
                                        }
                                        case 1: 
                                        case 7: {
                                            if (this.text == null || this.text.length() <= 0 || var5_13 <= 0.0f || var6_14 <= 0.0f) break block18;
                                            var5_13 = this.calculateFontSize(var5_13, var6_14);
                                            var1_8 = (var22_2.getWidth() - var23_6.getWidthPoint(this.text, var5_13)) / 2.0f;
                                            var2_9 = (var22_2.getHeight() - var23_6.getFontDescriptor(1, var5_13)) / 2.0f;
                                            break block49;
                                        }
                                        case 2: 
                                    }
                                    break;
                                } while (true);
                                var3_11 = 0.0f;
                                var1_8 = Float.NaN;
                                var5_13 = var2_9;
                                var2_9 = var3_11;
                            }
                            if (var14_7 != 7 && var14_7 != 2) {
                                var3_11 = var2_9;
                                var2_9 = var1_8;
                                var19_3 = null;
                                var1_8 = var3_11;
                            } else {
                                var19_3 = new Rectangle(var22_2.getLeft() + var4_18, var22_2.getBottom() + var4_18, var22_2.getRight() - var4_18, var22_2.getTop() - var4_18);
                                var3_11 = var2_9;
                                var2_9 = var1_8;
                                var1_8 = var3_11;
                            }
                        }
                        var3_11 = var1_8;
                        if (var1_8 < var22_2.getBottom() + var9_10) {
                            var3_11 = var22_2.getBottom() + var9_10;
                        }
                        var20_19 = var19_3;
                        if (var19_3 == null) break block51;
                        if (var19_3.getWidth() <= 0.0f) break block52;
                        var20_19 = var19_3;
                        if (var19_3.getHeight() > 0.0f) break block51;
                    }
                    var20_19 = null;
                }
                if (var20_19 == null) ** GOTO lbl-1000
                if (this.image == null) break block53;
                this.tp = new PdfTemplate(this.writer);
                this.tp.setBoundingBox(new Rectangle(this.image));
                this.writer.addDirectTemplateSimple(this.tp, PdfName.FRM);
                this.tp.addImage(this.image, this.image.getWidth(), 0.0f, 0.0f, this.image.getHeight(), 0.0f, 0.0f);
                var1_8 = this.tp.getBoundingBox().getWidth();
                var4_18 = this.tp.getBoundingBox().getHeight();
                var14_7 = var15_5;
                ** GOTO lbl168
            }
            if (this.template == null) break block54;
            this.tp = new PdfTemplate(this.writer);
            this.tp.setBoundingBox(new Rectangle(this.template.getWidth(), this.template.getHeight()));
            this.writer.addDirectTemplateSimple(this.tp, PdfName.FRM);
            this.tp.addTemplate(this.template, this.template.getBoundingBox().getLeft(), this.template.getBoundingBox().getBottom());
            var1_8 = this.tp.getBoundingBox().getWidth();
            var4_18 = this.tp.getBoundingBox().getHeight();
            var14_7 = var15_5;
            ** GOTO lbl168
        }
        if (this.iconReference != null && (var19_3 = (PdfDictionary)PdfReader.getPdfObject(this.iconReference)) != null) {
            var24_20 = PdfReader.getNormalizedRectangle(var19_3.getAsArray(PdfName.BBOX));
            var19_3 = var19_3.getAsArray(PdfName.MATRIX);
            var7_21 = var24_20.getWidth();
            var6_14 = var24_20.getHeight();
            var14_7 = var16_4;
        } else lbl-1000: // 2 sources:
        {
            var1_8 = 0.0f;
            var14_7 = 0;
            var4_18 = 0.0f;
lbl168: // 3 sources:
            var19_3 = null;
            var6_14 = var4_18;
            var7_21 = var1_8;
        }
        if (var14_7 != 0) {
            var1_8 = var20_19.getWidth() / var7_21;
            var4_18 = var20_19.getHeight() / var6_14;
            if (this.proportionalIcon) {
                switch (this.scaleIcon) {
                    default: {
                        var1_8 = Math.min(var1_8, var4_18);
                        ** break;
                    }
                    case 4: {
                        var1_8 = Math.max(Math.min(var1_8, var4_18), 1.0f);
                        ** break;
                    }
                    case 3: {
                        var1_8 = Math.min(Math.min(var1_8, var4_18), 1.0f);
                        ** break;
                    }
                    case 2: 
                }
                var1_8 = 1.0f;
lbl187: // 4 sources:
                var4_18 = var1_8;
            } else {
                var8_22 = 1.0f;
                switch (this.scaleIcon) {
                    default: {
                        ** break;
                    }
                    case 4: {
                        var1_8 = Math.max(var1_8, 1.0f);
                        var4_18 = Math.max(var4_18, 1.0f);
                        ** break;
                    }
                    case 3: {
                        var1_8 = Math.min(var1_8, 1.0f);
                        var4_18 = Math.min(var4_18, 1.0f);
                        ** break;
                    }
                    case 2: 
                }
                var4_18 = 1.0f;
                var1_8 = var8_22;
            }
lbl204: // 5 sources:
            var8_22 = var3_11;
            var12_23 = var20_19.getLeft() + (var20_19.getWidth() - var7_21 * var1_8) * this.iconHorizontalAdjustment;
            var13_24 = var20_19.getBottom() + (var20_19.getHeight() - var6_14 * var4_18) * this.iconVerticalAdjustment;
            var21_1.saveState();
            var21_1.rectangle(var20_19.getLeft(), var20_19.getBottom(), var20_19.getWidth(), var20_19.getHeight());
            var21_1.clip();
            var21_1.newPath();
            if (this.tp != null) {
                var21_1.addTemplate(this.tp, var1_8, 0.0f, 0.0f, var4_18, var12_23, var13_24);
            } else {
                if (var19_3 != null && var19_3.size() == 6) {
                    var20_19 = var19_3.getAsNumber(4);
                    var3_11 = var20_19 != null ? var20_19.floatValue() : 0.0f;
                    var19_3 = var19_3.getAsNumber(5);
                    var6_14 = var3_11;
                    var7_21 = var10_16;
                    if (var19_3 != null) {
                        var7_21 = var19_3.floatValue();
                        var6_14 = var3_11;
                    }
                } else {
                    var6_14 = 0.0f;
                    var7_21 = var10_16;
                }
                var21_1.addTemplateReference((PdfIndirectReference)this.iconReference, PdfName.FRM, var1_8, 0.0f, 0.0f, var4_18, var12_23 - var6_14 * var1_8, var13_24 - var7_21 * var4_18);
            }
            var21_1.restoreState();
            var3_11 = var8_22;
        }
        if (Float.isNaN(var2_9) != false) return var21_1;
        var21_1.saveState();
        var21_1.rectangle(var9_10, var9_10, var22_2.getWidth() - var11_12, var22_2.getHeight() - var11_12);
        var21_1.clip();
        var21_1.newPath();
        if (this.textColor == null) {
            var21_1.resetGrayFill();
        } else {
            var21_1.setColorFill(this.textColor);
        }
        var21_1.beginText();
        var21_1.setFontAndSize(var23_6, var5_13);
        var21_1.setTextMatrix(var2_9, var3_11);
        var21_1.showText(this.text);
        var21_1.endText();
        var21_1.restoreState();
        return var21_1;
    }

    public PdfFormField getField() throws IOException, DocumentException {
        PdfFormField pdfFormField = PdfFormField.createPushButton(this.writer);
        pdfFormField.setWidget(this.box, PdfAnnotation.HIGHLIGHT_INVERT);
        if (this.fieldName != null) {
            pdfFormField.setFieldName(this.fieldName);
            if ((this.options & 1) != 0) {
                pdfFormField.setFieldFlags(1);
            }
            if ((this.options & 2) != 0) {
                pdfFormField.setFieldFlags(2);
            }
        }
        if (this.text != null) {
            pdfFormField.setMKNormalCaption(this.text);
        }
        if (this.rotation != 0) {
            pdfFormField.setMKRotation(this.rotation);
        }
        pdfFormField.setBorderStyle(new PdfBorderDictionary(this.borderWidth, this.borderStyle, new PdfDashPattern(3.0f)));
        Object object = this.getAppearance();
        pdfFormField.setAppearance(PdfAnnotation.APPEARANCE_NORMAL, (PdfTemplate)object);
        object = (PdfAppearance)object.getDuplicate();
        object.setFontAndSize(this.getRealFont(), this.fontSize);
        if (this.textColor == null) {
            object.setGrayFill(0.0f);
        } else {
            object.setColorFill(this.textColor);
        }
        pdfFormField.setDefaultAppearanceString((PdfContentByte)object);
        if (this.borderColor != null) {
            pdfFormField.setMKBorderColor(this.borderColor);
        }
        if (this.backgroundColor != null) {
            pdfFormField.setMKBackgroundColor(this.backgroundColor);
        }
        switch (this.visibility) {
            default: {
                pdfFormField.setFlags(4);
                break;
            }
            case 3: {
                pdfFormField.setFlags(36);
                break;
            }
            case 1: {
                pdfFormField.setFlags(6);
            }
            case 2: 
        }
        if (this.tp != null) {
            pdfFormField.setMKNormalIcon(this.tp);
        }
        pdfFormField.setMKTextPosition(this.layout - 1);
        object = PdfName.A;
        if (this.scaleIcon == 3) {
            object = PdfName.B;
        } else if (this.scaleIcon == 4) {
            object = PdfName.S;
        } else if (this.scaleIcon == 2) {
            object = PdfName.N;
        }
        PdfName pdfName = this.proportionalIcon ? PdfName.P : PdfName.A;
        pdfFormField.setMKIconFit((PdfName)object, pdfName, this.iconHorizontalAdjustment, this.iconVerticalAdjustment, this.iconFitToBounds);
        return pdfFormField;
    }

    public float getIconHorizontalAdjustment() {
        return this.iconHorizontalAdjustment;
    }

    public PRIndirectReference getIconReference() {
        return this.iconReference;
    }

    public float getIconVerticalAdjustment() {
        return this.iconVerticalAdjustment;
    }

    public Image getImage() {
        return this.image;
    }

    public int getLayout() {
        return this.layout;
    }

    public int getScaleIcon() {
        return this.scaleIcon;
    }

    public PdfTemplate getTemplate() {
        return this.template;
    }

    public boolean isIconFitToBounds() {
        return this.iconFitToBounds;
    }

    public boolean isProportionalIcon() {
        return this.proportionalIcon;
    }

    public void setIconFitToBounds(boolean bl) {
        this.iconFitToBounds = bl;
    }

    public void setIconHorizontalAdjustment(float f) {
        float f2;
        if (f < 0.0f) {
            f2 = 0.0f;
        } else {
            f2 = f;
            if (f > 1.0f) {
                f2 = 1.0f;
            }
        }
        this.iconHorizontalAdjustment = f2;
    }

    public void setIconReference(PRIndirectReference pRIndirectReference) {
        this.iconReference = pRIndirectReference;
    }

    public void setIconVerticalAdjustment(float f) {
        float f2;
        if (f < 0.0f) {
            f2 = 0.0f;
        } else {
            f2 = f;
            if (f > 1.0f) {
                f2 = 1.0f;
            }
        }
        this.iconVerticalAdjustment = f2;
    }

    public void setImage(Image image) {
        this.image = image;
        this.template = null;
    }

    public void setLayout(int n) {
        if (n >= 1 && n <= 7) {
            this.layout = n;
            return;
        }
        throw new IllegalArgumentException(MessageLocalization.getComposedMessage("layout.out.of.bounds", new Object[0]));
    }

    public void setProportionalIcon(boolean bl) {
        this.proportionalIcon = bl;
    }

    public void setScaleIcon(int n) {
        int n2;
        block3 : {
            block2 : {
                if (n < 1) break block2;
                n2 = n;
                if (n <= 4) break block3;
            }
            n2 = 1;
        }
        this.scaleIcon = n2;
    }

    public void setTemplate(PdfTemplate pdfTemplate) {
        this.template = pdfTemplate;
        this.image = null;
    }
}

