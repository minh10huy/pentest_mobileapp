/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf.internal;

import com.itextpdf.text.Annotation;
import com.itextpdf.text.ExceptionConverter;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.pdf.PdfAcroForm;
import com.itextpdf.text.pdf.PdfAction;
import com.itextpdf.text.pdf.PdfAnnotation;
import com.itextpdf.text.pdf.PdfArray;
import com.itextpdf.text.pdf.PdfFileSpecification;
import com.itextpdf.text.pdf.PdfFormField;
import com.itextpdf.text.pdf.PdfIndirectObject;
import com.itextpdf.text.pdf.PdfIndirectReference;
import com.itextpdf.text.pdf.PdfName;
import com.itextpdf.text.pdf.PdfNumber;
import com.itextpdf.text.pdf.PdfObject;
import com.itextpdf.text.pdf.PdfRectangle;
import com.itextpdf.text.pdf.PdfString;
import com.itextpdf.text.pdf.PdfTemplate;
import com.itextpdf.text.pdf.PdfWriter;
import java.io.IOException;
import java.io.Serializable;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;

public class PdfAnnotationsImp {
    protected PdfAcroForm acroForm;
    protected ArrayList<PdfAnnotation> annotations = new ArrayList();
    protected ArrayList<PdfAnnotation> delayedAnnotations = new ArrayList();

    public PdfAnnotationsImp(PdfWriter pdfWriter) {
        this.acroForm = new PdfAcroForm(pdfWriter);
    }

    public static PdfAnnotation convertAnnotation(PdfWriter pdfWriter, Annotation annotation, Rectangle object) throws IOException {
        switch (annotation.annotationType()) {
            default: {
                return pdfWriter.createAnnotation(object.getLeft(), object.getBottom(), object.getRight(), object.getTop(), new PdfString(annotation.title(), "UnicodeBig"), new PdfString(annotation.content(), "UnicodeBig"), null);
            }
            case 7: {
                boolean[] arrbl = (boolean[])annotation.attributes().get("parameters");
                String string2 = (String)annotation.attributes().get("file");
                String string3 = (String)annotation.attributes().get("mime");
                object = arrbl[0] ? PdfFileSpecification.fileEmbedded(pdfWriter, string2, string2, null) : PdfFileSpecification.fileExtern(pdfWriter, string2);
                return PdfAnnotation.createScreen(pdfWriter, new Rectangle(annotation.llx(), annotation.lly(), annotation.urx(), annotation.ury()), string2, (PdfFileSpecification)object, string3, arrbl[1]);
            }
            case 6: {
                return pdfWriter.createAnnotation(annotation.llx(), annotation.lly(), annotation.urx(), annotation.ury(), new PdfAction((String)annotation.attributes().get("application"), (String)annotation.attributes().get("parameters"), (String)annotation.attributes().get("operation"), (String)annotation.attributes().get("defaultdir")), null);
            }
            case 5: {
                return pdfWriter.createAnnotation(annotation.llx(), annotation.lly(), annotation.urx(), annotation.ury(), new PdfAction((Integer)annotation.attributes().get("named")), null);
            }
            case 4: {
                return pdfWriter.createAnnotation(annotation.llx(), annotation.lly(), annotation.urx(), annotation.ury(), new PdfAction((String)annotation.attributes().get("file"), (Integer)annotation.attributes().get("page")), null);
            }
            case 3: {
                return pdfWriter.createAnnotation(annotation.llx(), annotation.lly(), annotation.urx(), annotation.ury(), new PdfAction((String)annotation.attributes().get("file"), (String)annotation.attributes().get("destination")), null);
            }
            case 2: {
                return pdfWriter.createAnnotation(annotation.llx(), annotation.lly(), annotation.urx(), annotation.ury(), new PdfAction((String)annotation.attributes().get("file")), null);
            }
            case 1: 
        }
        return pdfWriter.createAnnotation(annotation.llx(), annotation.lly(), annotation.urx(), annotation.ury(), new PdfAction((URL)annotation.attributes().get("url")), null);
    }

    public void addAnnotation(PdfAnnotation pdfAnnotation) {
        if (pdfAnnotation.isForm()) {
            if ((pdfAnnotation = (PdfFormField)pdfAnnotation).getParent() == null) {
                this.addFormFieldRaw((PdfFormField)pdfAnnotation);
                return;
            }
        } else {
            this.annotations.add(pdfAnnotation);
        }
    }

    public void addCalculationOrder(PdfFormField pdfFormField) {
        this.acroForm.addCalculationOrder(pdfFormField);
    }

    void addFormFieldRaw(PdfFormField serializable) {
        this.annotations.add((PdfAnnotation)serializable);
        serializable = serializable.getKids();
        if (serializable != null) {
            for (int i = 0; i < serializable.size(); ++i) {
                PdfFormField pdfFormField = (PdfFormField)serializable.get(i);
                if (pdfFormField.isUsed()) continue;
                this.addFormFieldRaw(pdfFormField);
            }
        }
    }

    public void addPlainAnnotation(PdfAnnotation pdfAnnotation) {
        this.annotations.add(pdfAnnotation);
    }

    public PdfAcroForm getAcroForm() {
        return this.acroForm;
    }

    public boolean hasUnusedAnnotations() {
        return this.annotations.isEmpty() ^ true;
    }

    public boolean hasValidAcroForm() {
        return this.acroForm.isValid();
    }

    public void resetAnnotations() {
        this.annotations = this.delayedAnnotations;
        this.delayedAnnotations = new ArrayList();
    }

    public PdfArray rotateAnnotations(PdfWriter pdfWriter, Rectangle rectangle) {
        PdfArray pdfArray = new PdfArray();
        int n = rectangle.getRotation() % 360;
        int n2 = pdfWriter.getCurrentPageNumber();
        for (int i = 0; i < this.annotations.size(); ++i) {
            Serializable serializable;
            PdfAnnotation pdfAnnotation = this.annotations.get(i);
            if (pdfAnnotation.getPlaceInPage() > n2) {
                this.delayedAnnotations.add(pdfAnnotation);
                continue;
            }
            if (pdfAnnotation.isForm()) {
                if (!pdfAnnotation.isUsed() && (serializable = pdfAnnotation.getTemplates()) != null) {
                    this.acroForm.addFieldTemplates((HashSet<PdfTemplate>)serializable);
                }
                if ((serializable = (PdfFormField)pdfAnnotation).getParent() == null) {
                    this.acroForm.addDocumentField(serializable.getIndirectReference());
                }
            }
            if (pdfAnnotation.isAnnotation()) {
                pdfArray.add(pdfAnnotation.getIndirectReference());
                if (!pdfAnnotation.isUsed()) {
                    serializable = pdfAnnotation.getAsArray(PdfName.RECT);
                    serializable = serializable.size() == 4 ? new PdfRectangle(serializable.getAsNumber(0).floatValue(), serializable.getAsNumber(1).floatValue(), serializable.getAsNumber(2).floatValue(), serializable.getAsNumber(3).floatValue()) : new PdfRectangle(serializable.getAsNumber(0).floatValue(), serializable.getAsNumber(1).floatValue());
                    if (n != 90) {
                        if (n != 180) {
                            if (n == 270) {
                                pdfAnnotation.put(PdfName.RECT, new PdfRectangle(serializable.bottom(), rectangle.getRight() - serializable.left(), serializable.top(), rectangle.getRight() - serializable.right()));
                            }
                        } else {
                            pdfAnnotation.put(PdfName.RECT, new PdfRectangle(rectangle.getRight() - serializable.left(), rectangle.getTop() - serializable.bottom(), rectangle.getRight() - serializable.right(), rectangle.getTop() - serializable.top()));
                        }
                    } else {
                        pdfAnnotation.put(PdfName.RECT, new PdfRectangle(rectangle.getTop() - serializable.bottom(), serializable.left(), rectangle.getTop() - serializable.top(), serializable.right()));
                    }
                }
            }
            if (pdfAnnotation.isUsed()) continue;
            pdfAnnotation.setUsed();
            try {
                pdfWriter.addToBody((PdfObject)pdfAnnotation, pdfAnnotation.getIndirectReference());
                continue;
            }
            catch (IOException iOException) {
                throw new ExceptionConverter(iOException);
            }
        }
        return pdfArray;
    }

    public void setSigFlags(int n) {
        this.acroForm.setSigFlags(n);
    }
}

