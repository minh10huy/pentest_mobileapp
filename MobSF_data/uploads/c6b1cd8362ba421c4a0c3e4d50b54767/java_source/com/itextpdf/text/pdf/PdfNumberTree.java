/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf;

import com.itextpdf.text.pdf.PdfArray;
import com.itextpdf.text.pdf.PdfDictionary;
import com.itextpdf.text.pdf.PdfIndirectObject;
import com.itextpdf.text.pdf.PdfIndirectReference;
import com.itextpdf.text.pdf.PdfName;
import com.itextpdf.text.pdf.PdfNumber;
import com.itextpdf.text.pdf.PdfObject;
import com.itextpdf.text.pdf.PdfReader;
import com.itextpdf.text.pdf.PdfWriter;
import java.io.IOException;
import java.io.Serializable;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Set;

public class PdfNumberTree {
    private static final int leafSize = 64;

    private static void iterateItems(PdfDictionary pdfObject, HashMap<Integer, PdfObject> hashMap) {
        block3 : {
            int n;
            block2 : {
                PdfArray pdfArray = (PdfArray)PdfReader.getPdfObjectRelease(pdfObject.get(PdfName.NUMS));
                int n2 = 0;
                n = 0;
                if (pdfArray == null) break block2;
                while (n < pdfArray.size()) {
                    n2 = n + 1;
                    hashMap.put(((PdfNumber)PdfReader.getPdfObjectRelease(pdfArray.getPdfObject(n))).intValue(), pdfArray.getPdfObject(n2));
                    n = n2 + 1;
                }
                break block3;
            }
            if ((pdfObject = (PdfArray)PdfReader.getPdfObjectRelease(pdfObject.get(PdfName.KIDS))) == null) break block3;
            for (n = n2; n < pdfObject.size(); ++n) {
                PdfNumberTree.iterateItems((PdfDictionary)PdfReader.getPdfObjectRelease(pdfObject.getPdfObject(n)), hashMap);
            }
        }
    }

    public static HashMap<Integer, PdfObject> readTree(PdfDictionary pdfDictionary) {
        HashMap<Integer, PdfObject> hashMap = new HashMap<Integer, PdfObject>();
        if (pdfDictionary != null) {
            PdfNumberTree.iterateItems(pdfDictionary, hashMap);
        }
        return hashMap;
    }

    public static <O extends PdfObject> PdfDictionary writeTree(HashMap<Integer, O> serializable, PdfWriter object) throws IOException {
        int n;
        PdfObject pdfObject;
        int n2;
        int n3;
        if (serializable.isEmpty()) {
            return null;
        }
        Object[] arrobject = new Integer[serializable.size()];
        arrobject = serializable.keySet().toArray(arrobject);
        Arrays.sort(arrobject);
        if (arrobject.length <= 64) {
            object = new PdfDictionary();
            PdfArray pdfArray = new PdfArray();
            for (int i = 0; i < arrobject.length; ++i) {
                pdfArray.add(new PdfNumber(arrobject[i].intValue()));
                pdfArray.add((PdfObject)serializable.get(arrobject[i]));
            }
            object.put(PdfName.NUMS, pdfArray);
            return object;
        }
        PdfIndirectReference[] arrpdfIndirectReference = new PdfIndirectReference[(arrobject.length + 64 - 1) / 64];
        for (n2 = 0; n2 < arrpdfIndirectReference.length; ++n2) {
            n = Math.min(n3 + 64, arrobject.length);
            pdfObject = new PdfDictionary();
            PdfArray pdfArray = new PdfArray();
            pdfArray.add(new PdfNumber(arrobject[n3].intValue()));
            pdfArray.add(new PdfNumber(arrobject[n - 1].intValue()));
            pdfObject.put(PdfName.LIMITS, pdfArray);
            pdfArray = new PdfArray();
            for (n3 = n2 * 64; n3 < n; ++n3) {
                pdfArray.add(new PdfNumber(arrobject[n3].intValue()));
                pdfArray.add((PdfObject)serializable.get(arrobject[n3]));
            }
            pdfObject.put(PdfName.NUMS, pdfArray);
            arrpdfIndirectReference[n2] = object.addToBody(pdfObject).getIndirectReference();
        }
        n2 = arrpdfIndirectReference.length;
        n3 = 64;
        do {
            if (n2 <= 64) {
                serializable = new PdfArray();
                for (n3 = 0; n3 < n2; ++n3) {
                    serializable.add(arrpdfIndirectReference[n3]);
                }
                object = new PdfDictionary();
                object.put(PdfName.KIDS, (PdfObject)serializable);
                return object;
            }
            int n4 = n3 * 64;
            int n5 = (arrobject.length + n4 - 1) / n4;
            n3 = 0;
            while (n3 < n5) {
                int n6 = Math.min(n + 64, n2);
                serializable = new PdfDictionary();
                pdfObject = new PdfArray();
                pdfObject.add(new PdfNumber(arrobject[n3 * n4].intValue()));
                int n7 = n3 + 1;
                pdfObject.add(new PdfNumber(arrobject[Math.min(n7 * n4, arrobject.length) - 1].intValue()));
                serializable.put(PdfName.LIMITS, pdfObject);
                pdfObject = new PdfArray();
                for (n = n3 * 64; n < n6; ++n) {
                    pdfObject.add(arrpdfIndirectReference[n]);
                }
                serializable.put(PdfName.KIDS, pdfObject);
                arrpdfIndirectReference[n3] = object.addToBody((PdfObject)serializable).getIndirectReference();
                n3 = n7;
            }
            n2 = n5;
            n3 = n4;
        } while (true);
    }
}

