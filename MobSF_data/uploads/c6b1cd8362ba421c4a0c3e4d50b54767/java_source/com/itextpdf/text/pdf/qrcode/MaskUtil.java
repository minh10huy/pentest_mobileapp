/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf.qrcode;

import com.itextpdf.text.pdf.qrcode.ByteMatrix;
import com.itextpdf.text.pdf.qrcode.QRCode;

public final class MaskUtil {
    private MaskUtil() {
    }

    public static int applyMaskPenaltyRule1(ByteMatrix byteMatrix) {
        return MaskUtil.applyMaskPenaltyRule1Internal(byteMatrix, true) + MaskUtil.applyMaskPenaltyRule1Internal(byteMatrix, false);
    }

    private static int applyMaskPenaltyRule1Internal(ByteMatrix arrby, boolean bl) {
        int n = bl ? arrby.getHeight() : arrby.getWidth();
        int n2 = bl ? arrby.getWidth() : arrby.getHeight();
        arrby = arrby.getArray();
        int n3 = 0;
        int n4 = -1;
        for (int i = 0; i < n; ++i) {
            int n5 = 0;
            int n6 = n3;
            n3 = n4;
            n4 = n6;
            for (int j = 0; j < n2; ++j) {
                int n7;
                n6 = bl ? arrby[i][j] : arrby[j][i];
                if (n6 == n3) {
                    int n8 = n5 + 1;
                    if (n8 == 5) {
                        n5 = n4 + 3;
                        n7 = n3;
                        n6 = n8;
                    } else {
                        n5 = n4;
                        n7 = n3;
                        n6 = n8;
                        if (n8 > 5) {
                            n5 = n4 + 1;
                            n7 = n3;
                            n6 = n8;
                        }
                    }
                } else {
                    n7 = n6;
                    n6 = 1;
                    n5 = n4;
                }
                n4 = n5;
                n3 = n7;
                n5 = n6;
            }
            n6 = n3;
            n3 = n4;
            n4 = n6;
        }
        return n3;
    }

    public static int applyMaskPenaltyRule2(ByteMatrix arrby) {
        byte[][] arrby2 = arrby.getArray();
        int n = arrby.getWidth();
        int n2 = arrby.getHeight();
        int n3 = 0;
        for (int i = 0; i < n2 - 1; ++i) {
            int n4 = 0;
            while (n4 < n - 1) {
                byte by = arrby2[i][n4];
                arrby = arrby2[i];
                int n5 = n4 + 1;
                int n6 = n3;
                if (by == arrby[n5]) {
                    int n7 = i + 1;
                    n6 = n3;
                    if (by == arrby2[n7][n4]) {
                        n6 = n3;
                        if (by == arrby2[n7][n5]) {
                            n6 = n3 + 3;
                        }
                    }
                }
                n4 = n5;
                n3 = n6;
            }
        }
        return n3;
    }

    public static int applyMaskPenaltyRule3(ByteMatrix byteMatrix) {
        byte[][] arrby = byteMatrix.getArray();
        int n = byteMatrix.getWidth();
        int n2 = byteMatrix.getHeight();
        int n3 = 0;
        for (int i = 0; i < n2; ++i) {
            for (int j = 0; j < n; ++j) {
                int n4;
                int n5;
                block6 : {
                    block7 : {
                        n4 = j + 6;
                        n5 = n3;
                        if (n4 >= n) break block6;
                        n5 = n3;
                        if (arrby[i][j] != 1) break block6;
                        n5 = n3;
                        if (arrby[i][j + 1] != 0) break block6;
                        n5 = n3;
                        if (arrby[i][j + 2] != 1) break block6;
                        n5 = n3;
                        if (arrby[i][j + 3] != 1) break block6;
                        n5 = n3;
                        if (arrby[i][j + 4] != 1) break block6;
                        n5 = n3;
                        if (arrby[i][j + 5] != 0) break block6;
                        n5 = n3;
                        if (arrby[i][n4] != 1) break block6;
                        n5 = j + 10;
                        if (n5 < n && arrby[i][j + 7] == 0 && arrby[i][j + 8] == 0 && arrby[i][j + 9] == 0 && arrby[i][n5] == 0) break block7;
                        n4 = j - 4;
                        n5 = n3;
                        if (n4 < 0) break block6;
                        n5 = n3;
                        if (arrby[i][j - 1] != 0) break block6;
                        n5 = n3;
                        if (arrby[i][j - 2] != 0) break block6;
                        n5 = n3;
                        if (arrby[i][j - 3] != 0) break block6;
                        n5 = n3;
                        if (arrby[i][n4] != 0) break block6;
                    }
                    n5 = n3 + 40;
                }
                n4 = i + 6;
                n3 = n5;
                if (n4 >= n2) continue;
                n3 = n5;
                if (arrby[i][j] != 1) continue;
                n3 = n5;
                if (arrby[i + 1][j] != 0) continue;
                n3 = n5;
                if (arrby[i + 2][j] != 1) continue;
                n3 = n5;
                if (arrby[i + 3][j] != 1) continue;
                n3 = n5;
                if (arrby[i + 4][j] != 1) continue;
                n3 = n5;
                if (arrby[i + 5][j] != 0) continue;
                n3 = n5;
                if (arrby[n4][j] != 1) continue;
                n3 = i + 10;
                if (n3 >= n2 || arrby[i + 7][j] != 0 || arrby[i + 8][j] != 0 || arrby[i + 9][j] != 0 || arrby[n3][j] != 0) {
                    n4 = i - 4;
                    n3 = n5;
                    if (n4 < 0) continue;
                    n3 = n5;
                    if (arrby[i - 1][j] != 0) continue;
                    n3 = n5;
                    if (arrby[i - 2][j] != 0) continue;
                    n3 = n5;
                    if (arrby[i - 3][j] != 0) continue;
                    n3 = n5;
                    if (arrby[n4][j] != 0) continue;
                }
                n3 = n5 + 40;
            }
        }
        return n3;
    }

    public static int applyMaskPenaltyRule4(ByteMatrix byteMatrix) {
        int n;
        int n2;
        byte[][] arrby = byteMatrix.getArray();
        int n3 = byteMatrix.getWidth();
        int n4 = byteMatrix.getHeight();
        int n5 = 0;
        for (n = 0; n < n4; ++n) {
            for (n2 = 0; n2 < n3; ++n2) {
                int n6 = n5;
                if (arrby[n][n2] == 1) {
                    n6 = n5 + 1;
                }
                n5 = n6;
            }
        }
        n = byteMatrix.getHeight();
        n2 = byteMatrix.getWidth();
        return Math.abs((int)((double)n5 / (double)(n * n2) * 100.0 - 50.0)) / 5 * 10;
    }

    public static boolean getDataMaskBit(int n, int n2, int n3) {
        if (!QRCode.isValidMaskPattern(n)) {
            throw new IllegalArgumentException("Invalid mask pattern");
        }
        switch (n) {
            default: {
                StringBuilder stringBuilder = new StringBuilder();
                stringBuilder.append("Invalid mask pattern: ");
                stringBuilder.append(n);
                throw new IllegalArgumentException(stringBuilder.toString());
            }
            case 7: {
                n = n3 * n2 % 3 + (n3 + n2 & 1) & 1;
                break;
            }
            case 6: {
                n = n3 * n2;
                n = (n & 1) + n % 3 & 1;
                break;
            }
            case 5: {
                n = n3 * n2;
                n = (n & 1) + n % 3;
                break;
            }
            case 4: {
                n = (n3 >>> 1) + n2 / 3 & 1;
                break;
            }
            case 3: {
                n = (n3 + n2) % 3;
                break;
            }
            case 2: {
                n = n2 % 3;
                break;
            }
            case 1: {
                n = n3 & 1;
                break;
            }
            case 0: {
                n = n3 + n2 & 1;
            }
        }
        if (n == 0) {
            return true;
        }
        return false;
    }
}

