/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf;

import com.itextpdf.text.Chunk;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.Image;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.Version;
import com.itextpdf.text.error_messages.MessageLocalization;
import com.itextpdf.text.io.RASInputStream;
import com.itextpdf.text.io.RandomAccessSource;
import com.itextpdf.text.io.RandomAccessSourceFactory;
import com.itextpdf.text.pdf.AcroFields;
import com.itextpdf.text.pdf.ByteBuffer;
import com.itextpdf.text.pdf.ColumnText;
import com.itextpdf.text.pdf.PdfAnnotation;
import com.itextpdf.text.pdf.PdfArray;
import com.itextpdf.text.pdf.PdfContentByte;
import com.itextpdf.text.pdf.PdfDeveloperExtension;
import com.itextpdf.text.pdf.PdfDictionary;
import com.itextpdf.text.pdf.PdfFormField;
import com.itextpdf.text.pdf.PdfIndirectObject;
import com.itextpdf.text.pdf.PdfIndirectReference;
import com.itextpdf.text.pdf.PdfLiteral;
import com.itextpdf.text.pdf.PdfName;
import com.itextpdf.text.pdf.PdfNumber;
import com.itextpdf.text.pdf.PdfObject;
import com.itextpdf.text.pdf.PdfReader;
import com.itextpdf.text.pdf.PdfSigLockDictionary;
import com.itextpdf.text.pdf.PdfStamper;
import com.itextpdf.text.pdf.PdfStamperImp;
import com.itextpdf.text.pdf.PdfString;
import com.itextpdf.text.pdf.PdfTemplate;
import com.itextpdf.text.pdf.PdfWriter;
import com.itextpdf.text.pdf.internal.PdfVersionImp;
import com.itextpdf.text.pdf.security.CertificateInfo;
import java.io.EOFException;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.RandomAccessFile;
import java.security.cert.Certificate;
import java.security.cert.X509Certificate;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;

public class PdfSignatureAppearance {
    public static final int CERTIFIED_FORM_FILLING = 2;
    public static final int CERTIFIED_FORM_FILLING_AND_ANNOTATIONS = 3;
    public static final int CERTIFIED_NO_CHANGES_ALLOWED = 1;
    private static final float MARGIN = 2.0f;
    public static final int NOT_CERTIFIED = 0;
    private static final float TOP_SECTION = 0.3f;
    public static final String questionMark = "% DSUnknown\nq\n1 G\n1 g\n0.1 0 0 0.1 9 0 cm\n0 J 0 j 4 M []0 d\n1 i \n0 g\n313 292 m\n313 404 325 453 432 529 c\n478 561 504 597 504 645 c\n504 736 440 760 391 760 c\n286 760 271 681 265 626 c\n265 625 l\n100 625 l\n100 828 253 898 381 898 c\n451 898 679 878 679 650 c\n679 555 628 499 538 435 c\n488 399 467 376 467 292 c\n313 292 l\nh\n308 214 170 -164 re\nf\n0.44 G\n1.2 w\n1 1 0.4 rg\n287 318 m\n287 430 299 479 406 555 c\n451 587 478 623 478 671 c\n478 762 414 786 365 786 c\n260 786 245 707 239 652 c\n239 651 l\n74 651 l\n74 854 227 924 355 924 c\n425 924 653 904 653 676 c\n653 581 602 525 512 461 c\n462 425 441 402 441 318 c\n287 318 l\nh\n282 240 170 -164 re\nB\nQ\n";
    private boolean acro6Layers = true;
    private PdfTemplate[] app = new PdfTemplate[5];
    private byte[] bout;
    private int boutLen;
    private int certificationLevel = 0;
    private String contact;
    private PdfDictionary cryptoDictionary;
    private HashMap<PdfName, PdfLiteral> exclusionLocations;
    private PdfSigLockDictionary fieldLock;
    private String fieldName;
    private PdfTemplate frm;
    private Image image;
    private float imageScale;
    private Font layer2Font;
    private String layer2Text;
    private String layer4Text;
    private String location;
    private String locationCaption = "Location: ";
    private OutputStream originalout;
    private int page = 1;
    private Rectangle pageRect;
    private boolean preClosed = false;
    private RandomAccessFile raf;
    private long[] range;
    private String reason;
    private String reasonCaption = "Reason: ";
    private Rectangle rect;
    private RenderingMode renderingMode = RenderingMode.DESCRIPTION;
    private boolean reuseAppearance = false;
    private int runDirection = 1;
    private Certificate signCertificate;
    private Calendar signDate;
    private String signatureCreator;
    private SignatureEvent signatureEvent;
    private Image signatureGraphic = null;
    private ByteBuffer sigout;
    private PdfStamper stamper;
    private File tempFile;
    private PdfStamperImp writer;

    PdfSignatureAppearance(PdfStamperImp pdfStamperImp) {
        this.writer = pdfStamperImp;
        this.signDate = new GregorianCalendar();
        this.fieldName = this.getNewSigName();
        this.signatureCreator = Version.getInstance().getVersion();
    }

    private void addDocMDP(PdfDictionary pdfDictionary) {
        PdfDictionary pdfDictionary2 = new PdfDictionary();
        PdfObject pdfObject = new PdfDictionary();
        pdfObject.put(PdfName.P, new PdfNumber(this.certificationLevel));
        pdfObject.put(PdfName.V, new PdfName("1.2"));
        pdfObject.put(PdfName.TYPE, PdfName.TRANSFORMPARAMS);
        pdfDictionary2.put(PdfName.TRANSFORMMETHOD, PdfName.DOCMDP);
        pdfDictionary2.put(PdfName.TYPE, PdfName.SIGREF);
        pdfDictionary2.put(PdfName.TRANSFORMPARAMS, pdfObject);
        if (this.writer.getPdfVersion().getVersion() < '6') {
            pdfDictionary2.put(new PdfName("DigestValue"), new PdfString("aa"));
            pdfObject = new PdfArray();
            pdfObject.add(new PdfNumber(0));
            pdfObject.add(new PdfNumber(0));
            pdfDictionary2.put(new PdfName("DigestLocation"), pdfObject);
            pdfDictionary2.put(new PdfName("DigestMethod"), new PdfName("MD5"));
        }
        pdfDictionary2.put(PdfName.DATA, this.writer.reader.getTrailer().get(PdfName.ROOT));
        pdfObject = new PdfArray();
        pdfObject.add(pdfDictionary2);
        pdfDictionary.put(PdfName.REFERENCE, pdfObject);
    }

    private void addFieldMDP(PdfDictionary pdfDictionary, PdfDictionary pdfObject) {
        PdfDictionary pdfDictionary2 = new PdfDictionary();
        PdfObject pdfObject2 = new PdfDictionary();
        pdfObject2.putAll((PdfDictionary)pdfObject);
        pdfObject2.put(PdfName.TYPE, PdfName.TRANSFORMPARAMS);
        pdfObject2.put(PdfName.V, new PdfName("1.2"));
        pdfDictionary2.put(PdfName.TRANSFORMMETHOD, PdfName.FIELDMDP);
        pdfDictionary2.put(PdfName.TYPE, PdfName.SIGREF);
        pdfDictionary2.put(PdfName.TRANSFORMPARAMS, pdfObject2);
        pdfDictionary2.put(new PdfName("DigestValue"), new PdfString("aa"));
        pdfObject = new PdfArray();
        pdfObject.add(new PdfNumber(0));
        pdfObject.add(new PdfNumber(0));
        pdfDictionary2.put(new PdfName("DigestLocation"), pdfObject);
        pdfDictionary2.put(new PdfName("DigestMethod"), new PdfName("MD5"));
        pdfDictionary2.put(PdfName.DATA, this.writer.reader.getTrailer().get(PdfName.ROOT));
        pdfObject2 = pdfDictionary.getAsArray(PdfName.REFERENCE);
        pdfObject = pdfObject2;
        if (pdfObject2 == null) {
            pdfObject = new PdfArray();
        }
        pdfObject.add(pdfDictionary2);
        pdfDictionary.put(PdfName.REFERENCE, pdfObject);
    }

    private void createBlankN0() {
        PdfTemplate pdfTemplate;
        PdfTemplate[] arrpdfTemplate = this.app;
        arrpdfTemplate[0] = pdfTemplate = new PdfTemplate(this.writer);
        pdfTemplate.setBoundingBox(new Rectangle(100.0f, 100.0f));
        this.writer.addDirectTemplateSimple(pdfTemplate, new PdfName("n0"));
        pdfTemplate.setLiteral("% DSBlank\n");
    }

    private RandomAccessSource getUnderlyingSource() throws IOException {
        RandomAccessSourceFactory randomAccessSourceFactory = new RandomAccessSourceFactory();
        if (this.raf == null) {
            return randomAccessSourceFactory.createSource(this.bout);
        }
        return randomAccessSourceFactory.createSource(this.raf);
    }

    public void addDeveloperExtension(PdfDeveloperExtension pdfDeveloperExtension) {
        this.writer.addDeveloperExtension(pdfDeveloperExtension);
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public void close(PdfDictionary arrby) throws IOException, DocumentException {
        block27 : {
            int n;
            try {
                if (!this.preClosed) {
                    throw new DocumentException(MessageLocalization.getComposedMessage("preclose.must.be.called.first", new Object[0]));
                }
                ByteBuffer byteBuffer = new ByteBuffer();
                for (PdfName pdfName : arrby.getKeys()) {
                    PdfObject pdfObject = arrby.get(pdfName);
                    PdfLiteral pdfLiteral = this.exclusionLocations.get(pdfName);
                    if (pdfLiteral == null) {
                        throw new IllegalArgumentException(MessageLocalization.getComposedMessage("the.key.1.didn.t.reserve.space.in.preclose", pdfName.toString()));
                    }
                    byteBuffer.reset();
                    pdfObject.toPdf(null, byteBuffer);
                    if (byteBuffer.size() > pdfLiteral.getPosLength()) {
                        throw new IllegalArgumentException(MessageLocalization.getComposedMessage("the.key.1.is.too.big.is.2.reserved.3", pdfName.toString(), String.valueOf(byteBuffer.size()), String.valueOf(pdfLiteral.getPosLength())));
                    }
                    if (this.tempFile == null) {
                        System.arraycopy(byteBuffer.getBuffer(), 0, this.bout, (int)pdfLiteral.getPosition(), byteBuffer.size());
                        continue;
                    }
                    this.raf.seek(pdfLiteral.getPosition());
                    this.raf.write(byteBuffer.getBuffer(), 0, byteBuffer.size());
                }
                if (arrby.size() != this.exclusionLocations.size()) {
                    throw new IllegalArgumentException(MessageLocalization.getComposedMessage("the.update.dictionary.has.less.keys.than.required", new Object[0]));
                }
                if (this.tempFile == null) {
                    this.originalout.write(this.bout, 0, this.boutLen);
                    break block27;
                }
                if (this.originalout == null) break block27;
                this.raf.seek(0L);
                arrby = new byte[8192];
            }
            catch (Throwable throwable) {
                this.writer.reader.close();
                if (this.tempFile != null) {
                    try {
                        this.raf.close();
                    }
                    catch (Exception exception) {}
                    if (this.originalout != null) {
                        try {
                            this.tempFile.delete();
                        }
                        catch (Exception exception) {}
                    }
                }
                if (this.originalout == null) throw throwable;
                try {
                    this.originalout.close();
                }
                catch (Exception exception) {
                    throw throwable;
                }
                throw throwable;
            }
            for (long i = this.raf.length(); i > 0L; i -= (long)n) {
                n = this.raf.read(arrby, 0, (int)Math.min((long)arrby.length, i));
                if (n < 0) {
                    throw new EOFException(MessageLocalization.getComposedMessage("unexpected.eof", new Object[0]));
                }
                this.originalout.write(arrby, 0, n);
            }
        }
        this.writer.reader.close();
        if (this.tempFile != null) {
            try {
                this.raf.close();
            }
            catch (Exception exception) {}
            if (this.originalout != null) {
                try {
                    this.tempFile.delete();
                }
                catch (Exception exception) {}
            }
        }
        if (this.originalout == null) return;
        try {
            this.originalout.close();
            return;
        }
        catch (Exception exception) {
            return;
        }
    }

    public PdfTemplate getAppearance() throws DocumentException {
        Object object;
        Object object2;
        float f;
        float f2;
        float f3;
        Object object3;
        if (this.isInvisible()) {
            PdfTemplate pdfTemplate = new PdfTemplate(this.writer);
            pdfTemplate.setBoundingBox(new Rectangle(0.0f, 0.0f));
            this.writer.addDirectTemplateSimple(pdfTemplate, null);
            return pdfTemplate;
        }
        if (this.app[0] == null && !this.reuseAppearance) {
            this.createBlankN0();
        }
        if (this.app[1] == null && !this.acro6Layers) {
            object3 = this.app;
            object2 = new PdfTemplate(this.writer);
            object3[1] = object2;
            object2.setBoundingBox(new Rectangle(100.0f, 100.0f));
            this.writer.addDirectTemplateSimple((PdfTemplate)object2, new PdfName("n1"));
            object2.setLiteral(questionMark);
        }
        if (this.app[2] == null) {
            float f4;
            String string2;
            PdfTemplate pdfTemplate;
            if (this.layer2Text == null) {
                object = new StringBuilder();
                object.append("Digitally signed by ");
                object2 = CertificateInfo.getSubjectFields((X509Certificate)this.signCertificate);
                if (object2 != null) {
                    object3 = object2.getField("CN");
                    if (object3 == null) {
                        object3 = object2.getField("E");
                    }
                } else {
                    object3 = null;
                }
                object2 = object3;
                if (object3 == null) {
                    object2 = "";
                }
                object.append((String)object2);
                object.append('\n');
                object3 = new SimpleDateFormat("yyyy.MM.dd HH:mm:ss z");
                object.append("Date: ");
                object.append(object3.format(this.signDate.getTime()));
                if (this.reason != null) {
                    object.append('\n');
                    object.append(this.reasonCaption);
                    object.append(this.reason);
                }
                if (this.location != null) {
                    object.append('\n');
                    object.append(this.locationCaption);
                    object.append(this.location);
                }
                string2 = object.toString();
            } else {
                string2 = this.layer2Text;
            }
            object3 = this.app;
            object3[2] = pdfTemplate = new PdfTemplate(this.writer);
            pdfTemplate.setBoundingBox(this.rect);
            this.writer.addDirectTemplateSimple(pdfTemplate, new PdfName("n2"));
            if (this.image != null) {
                if (this.imageScale == 0.0f) {
                    pdfTemplate.addImage(this.image, this.rect.getWidth(), 0.0f, 0.0f, this.rect.getHeight(), 0.0f, 0.0f);
                } else {
                    f3 = this.imageScale;
                    if (this.imageScale < 0.0f) {
                        f3 = Math.min(this.rect.getWidth() / this.image.getWidth(), this.rect.getHeight() / this.image.getHeight());
                    }
                    f2 = this.image.getWidth() * f3;
                    f3 = this.image.getHeight() * f3;
                    f = (this.rect.getWidth() - f2) / 2.0f;
                    f4 = (this.rect.getHeight() - f3) / 2.0f;
                    pdfTemplate.addImage(this.image, f2, 0.0f, 0.0f, f3, f, f4);
                }
            }
            Font font = this.layer2Font == null ? new Font() : new Font(this.layer2Font);
            f2 = font.getSize();
            if (this.renderingMode != RenderingMode.NAME_AND_DESCRIPTION && (this.renderingMode != RenderingMode.GRAPHIC_AND_DESCRIPTION || this.signatureGraphic == null)) {
                if (this.renderingMode == RenderingMode.GRAPHIC) {
                    if (this.signatureGraphic == null) {
                        throw new IllegalStateException(MessageLocalization.getComposedMessage("a.signature.image.should.be.present.when.rendering.mode.is.graphic.only", new Object[0]));
                    }
                    object3 = new Rectangle(2.0f, 2.0f, this.rect.getWidth() - 2.0f, this.rect.getHeight() - 2.0f);
                    object2 = null;
                } else {
                    object2 = new Rectangle(2.0f, 2.0f, this.rect.getWidth() - 2.0f, this.rect.getHeight() * 0.7f - 2.0f);
                    object3 = null;
                }
            } else {
                object3 = new Rectangle(2.0f, 2.0f, this.rect.getWidth() / 2.0f - 2.0f, this.rect.getHeight() - 2.0f);
                object2 = new Rectangle(this.rect.getWidth() / 2.0f + 1.0f, 2.0f, this.rect.getWidth() - 1.0f, this.rect.getHeight() - 2.0f);
                if (this.rect.getHeight() > this.rect.getWidth()) {
                    object3 = new Rectangle(2.0f, this.rect.getHeight() / 2.0f, this.rect.getWidth() - 2.0f, this.rect.getHeight());
                    object2 = new Rectangle(2.0f, 2.0f, this.rect.getWidth() - 2.0f, this.rect.getHeight() / 2.0f - 2.0f);
                }
            }
            switch (.$SwitchMap$com$itextpdf$text$pdf$PdfSignatureAppearance$RenderingMode[this.renderingMode.ordinal()]) {
                Object object4;
                Paragraph paragraph;
                default: {
                    break;
                }
                case 3: {
                    object = new ColumnText(pdfTemplate);
                    object.setRunDirection(this.runDirection);
                    object.setSimpleColumn(object3.getLeft(), object3.getBottom(), object3.getRight(), object3.getTop(), 0.0f, 2);
                    object4 = Image.getInstance(this.signatureGraphic);
                    object4.scaleToFit(object3.getWidth(), object3.getHeight());
                    paragraph = new Paragraph(object3.getHeight());
                    paragraph.add(new Chunk((Image)object4, (object3.getWidth() - object4.getScaledWidth()) / 2.0f, (object3.getHeight() - object4.getScaledHeight()) / 2.0f, false));
                    object.addElement(paragraph);
                    object.go();
                    break;
                }
                case 2: {
                    if (this.signatureGraphic == null) {
                        throw new IllegalStateException(MessageLocalization.getComposedMessage("a.signature.image.should.be.present.when.rendering.mode.is.graphic.and.description", new Object[0]));
                    }
                    object = new ColumnText(pdfTemplate);
                    object.setRunDirection(this.runDirection);
                    object.setSimpleColumn(object3.getLeft(), object3.getBottom(), object3.getRight(), object3.getTop(), 0.0f, 2);
                    object4 = Image.getInstance(this.signatureGraphic);
                    object4.scaleToFit(object3.getWidth(), object3.getHeight());
                    paragraph = new Paragraph();
                    f3 = - object4.getScaledHeight();
                    f = (object3.getWidth() - object4.getScaledWidth()) / 2.0f;
                    f4 = (object3.getHeight() - object4.getScaledHeight()) / 2.0f;
                    paragraph.add(new Chunk((Image)object4, f + 0.0f + (object3.getWidth() - object4.getScaledWidth()) / 2.0f, f3 + 15.0f - f4, false));
                    object.addElement(paragraph);
                    object.go();
                    break;
                }
                case 1: {
                    object = object4 = CertificateInfo.getSubjectFields((X509Certificate)this.signCertificate).getField("CN");
                    if (object4 == null) {
                        object = CertificateInfo.getSubjectFields((X509Certificate)this.signCertificate).getField("E");
                    }
                    object4 = object;
                    if (object == null) {
                        object4 = "";
                    }
                    f3 = ColumnText.fitText(font, (String)object4, new Rectangle(object3.getWidth() - 2.0f, object3.getHeight() - 2.0f), -1.0f, this.runDirection);
                    object = new ColumnText(pdfTemplate);
                    object.setRunDirection(this.runDirection);
                    object.setSimpleColumn(new Phrase((String)object4, font), object3.getLeft(), object3.getBottom(), object3.getRight(), object3.getTop(), f3, 0);
                    object.go();
                }
            }
            if (this.renderingMode != RenderingMode.GRAPHIC) {
                f3 = f2;
                if (f2 <= 0.0f) {
                    f3 = ColumnText.fitText(font, string2, new Rectangle(object2.getWidth(), object2.getHeight()), 12.0f, this.runDirection);
                }
                object3 = new ColumnText(pdfTemplate);
                object3.setRunDirection(this.runDirection);
                object3.setSimpleColumn(new Phrase(string2, font), object2.getLeft(), object2.getBottom(), object2.getRight(), object2.getTop(), f3, 0);
                object3.go();
            }
        }
        if (this.app[3] == null && !this.acro6Layers) {
            object3 = this.app;
            object3[3] = object2 = new PdfTemplate(this.writer);
            object2.setBoundingBox(new Rectangle(100.0f, 100.0f));
            this.writer.addDirectTemplateSimple((PdfTemplate)object2, new PdfName("n3"));
            object2.setLiteral("% DSBlank\n");
        }
        if (this.app[4] == null && !this.acro6Layers) {
            object3 = this.app;
            object3[4] = object = new PdfTemplate(this.writer);
            object.setBoundingBox(new Rectangle(0.0f, this.rect.getHeight() * 0.7f, this.rect.getRight(), this.rect.getTop()));
            this.writer.addDirectTemplateSimple((PdfTemplate)object, new PdfName("n4"));
            object3 = this.layer2Font == null ? new Font() : new Font(this.layer2Font);
            object2 = "Signature Not Verified";
            if (this.layer4Text != null) {
                object2 = this.layer4Text;
            }
            f3 = ColumnText.fitText((Font)object3, (String)object2, new Rectangle(this.rect.getWidth() - 4.0f, this.rect.getHeight() * 0.3f - 4.0f), 15.0f, this.runDirection);
            object = new ColumnText((PdfContentByte)object);
            object.setRunDirection(this.runDirection);
            object.setSimpleColumn(new Phrase((String)object2, (Font)object3), 2.0f, 0.0f, this.rect.getWidth() - 2.0f, this.rect.getHeight() - 2.0f, f3, 0);
            object.go();
        }
        int n = this.writer.reader.getPageRotation(this.page);
        object3 = new Rectangle(this.rect);
        for (int i = n; i > 0; i -= 90) {
            object3 = object3.rotate();
        }
        if (this.frm == null) {
            this.frm = new PdfTemplate(this.writer);
            this.frm.setBoundingBox((Rectangle)object3);
            this.writer.addDirectTemplateSimple(this.frm, new PdfName("FRM"));
            f = Math.min(this.rect.getWidth(), this.rect.getHeight()) * 0.9f;
            f3 = (this.rect.getWidth() - f) / 2.0f;
            f2 = (this.rect.getHeight() - f) / 2.0f;
            f /= 100.0f;
            if (n == 90) {
                this.frm.concatCTM(0.0f, 1.0f, -1.0f, 0.0f, this.rect.getHeight(), 0.0f);
            } else if (n == 180) {
                this.frm.concatCTM(-1.0f, 0.0f, 0.0f, -1.0f, this.rect.getWidth(), this.rect.getHeight());
            } else if (n == 270) {
                this.frm.concatCTM(0.0f, -1.0f, 1.0f, 0.0f, 0.0f, this.rect.getWidth());
            }
            if (this.reuseAppearance) {
                object2 = this.writer.getAcroFields().getNormalAppearance(this.getFieldName());
                if (object2 != null) {
                    this.frm.addTemplateReference((PdfIndirectReference)object2, new PdfName("n0"), 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f);
                } else {
                    this.reuseAppearance = false;
                    if (this.app[0] == null) {
                        this.createBlankN0();
                    }
                }
            }
            if (!this.reuseAppearance) {
                this.frm.addTemplate(this.app[0], 0.0f, 0.0f);
            }
            if (!this.acro6Layers) {
                this.frm.addTemplate(this.app[1], f, 0.0f, 0.0f, f, f3, f2);
            }
            this.frm.addTemplate(this.app[2], 0.0f, 0.0f);
            if (!this.acro6Layers) {
                this.frm.addTemplate(this.app[3], f, 0.0f, 0.0f, f, f3, f2);
                this.frm.addTemplate(this.app[4], 0.0f, 0.0f);
            }
        }
        object2 = new PdfTemplate(this.writer);
        object2.setBoundingBox((Rectangle)object3);
        this.writer.addDirectTemplateSimple((PdfTemplate)object2, null);
        object2.addTemplate(this.frm, 0.0f, 0.0f);
        return object2;
    }

    public Certificate getCertificate() {
        return this.signCertificate;
    }

    public int getCertificationLevel() {
        return this.certificationLevel;
    }

    public String getContact() {
        return this.contact;
    }

    public PdfDictionary getCryptoDictionary() {
        return this.cryptoDictionary;
    }

    public PdfSigLockDictionary getFieldLockDict() {
        return this.fieldLock;
    }

    public String getFieldName() {
        return this.fieldName;
    }

    public Image getImage() {
        return this.image;
    }

    public float getImageScale() {
        return this.imageScale;
    }

    public PdfTemplate getLayer(int n) {
        if (n >= 0 && n < this.app.length) {
            Object object;
            Object object2 = object = this.app[n];
            if (object == null) {
                object = this.app;
                object[n] = object2 = new PdfTemplate(this.writer);
                object2.setBoundingBox(this.rect);
                object = this.writer;
                StringBuilder stringBuilder = new StringBuilder();
                stringBuilder.append("n");
                stringBuilder.append(n);
                object.addDirectTemplateSimple((PdfTemplate)object2, new PdfName(stringBuilder.toString()));
            }
            return object2;
        }
        return null;
    }

    public Font getLayer2Font() {
        return this.layer2Font;
    }

    public String getLayer2Text() {
        return this.layer2Text;
    }

    public String getLayer4Text() {
        return this.layer4Text;
    }

    public String getLocation() {
        return this.location;
    }

    public String getNewSigName() {
        Object object = this.writer.getAcroFields();
        boolean bl = false;
        int n = 0;
        block0 : while (!bl) {
            CharSequence charSequence = new StringBuilder();
            charSequence.append("Signature");
            charSequence.append(++n);
            charSequence = charSequence.toString();
            if (object.getFieldItem((String)charSequence) != null) continue;
            Object object2 = new StringBuilder();
            object2.append((String)charSequence);
            object2.append(".");
            charSequence = object2.toString();
            object2 = object.getFields().keySet().iterator();
            while (object2.hasNext()) {
                if (!((String)object2.next()).startsWith((String)charSequence)) continue;
                bl = false;
                continue block0;
            }
            bl = true;
        }
        object = new StringBuilder();
        object.append("Signature");
        object.append(n);
        return object.toString();
    }

    OutputStream getOriginalout() {
        return this.originalout;
    }

    public int getPage() {
        return this.page;
    }

    public Rectangle getPageRect() {
        return this.pageRect;
    }

    public InputStream getRangeStream() throws IOException {
        return new RASInputStream(new RandomAccessSourceFactory().createRanged(this.getUnderlyingSource(), this.range));
    }

    public String getReason() {
        return this.reason;
    }

    public Rectangle getRect() {
        return this.rect;
    }

    public RenderingMode getRenderingMode() {
        return this.renderingMode;
    }

    public int getRunDirection() {
        return this.runDirection;
    }

    public Calendar getSignDate() {
        return this.signDate;
    }

    public String getSignatureCreator() {
        return this.signatureCreator;
    }

    public SignatureEvent getSignatureEvent() {
        return this.signatureEvent;
    }

    public Image getSignatureGraphic() {
        return this.signatureGraphic;
    }

    ByteBuffer getSigout() {
        return this.sigout;
    }

    public PdfStamper getStamper() {
        return this.stamper;
    }

    public File getTempFile() {
        return this.tempFile;
    }

    public PdfTemplate getTopLayer() {
        if (this.frm == null) {
            this.frm = new PdfTemplate(this.writer);
            this.frm.setBoundingBox(this.rect);
            this.writer.addDirectTemplateSimple(this.frm, new PdfName("FRM"));
        }
        return this.frm;
    }

    public boolean isAcro6Layers() {
        return this.acro6Layers;
    }

    public boolean isInvisible() {
        if (this.rect != null && this.rect.getWidth() != 0.0f && this.rect.getHeight() != 0.0f) {
            return false;
        }
        return true;
    }

    public boolean isPreClosed() {
        return this.preClosed;
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public void preClose(HashMap<PdfName, Integer> object) throws IOException, DocumentException {
        int n;
        long l;
        if (this.preClosed) {
            throw new DocumentException(MessageLocalization.getComposedMessage("document.already.pre.closed", new Object[0]));
        }
        this.stamper.mergeVerification();
        this.preClosed = true;
        long[] arrl = this.writer.getAcroFields();
        Object object2 = this.getFieldName();
        boolean bl = arrl.doesSignatureFieldExist((String)object2);
        PdfIndirectReference pdfIndirectReference = this.writer.getPdfIndirectReference();
        PdfStamperImp pdfStamperImp = this.writer;
        int n2 = 3;
        pdfStamperImp.setSigFlags(3);
        if (bl) {
            PdfDictionary pdfDictionary = arrl.getFieldItem((String)object2).getWidget(0);
            this.writer.markUsed(pdfDictionary);
            arrl = pdfDictionary.getAsDict(PdfName.LOCK);
            object2 = arrl;
            if (arrl == null) {
                object2 = arrl;
                if (this.fieldLock != null) {
                    pdfDictionary.put(PdfName.LOCK, this.writer.addToBody(this.fieldLock).getIndirectReference());
                    object2 = this.fieldLock;
                }
            }
            pdfDictionary.put(PdfName.P, this.writer.getPageReference(this.getPage()));
            pdfDictionary.put(PdfName.V, pdfIndirectReference);
            arrl = PdfReader.getPdfObjectRelease(pdfDictionary.get(PdfName.F));
            n = arrl != null && arrl.isNumber() ? ((PdfNumber)arrl).intValue() : 0;
            pdfDictionary.put(PdfName.F, new PdfNumber(n | 128));
            arrl = new PdfDictionary();
            arrl.put(PdfName.N, this.getAppearance().getIndirectReference());
            pdfDictionary.put(PdfName.AP, (PdfObject)arrl);
        } else {
            arrl = PdfFormField.createSignature(this.writer);
            arrl.setFieldName((String)object2);
            arrl.put(PdfName.V, pdfIndirectReference);
            arrl.setFlags(132);
            if (this.fieldLock != null) {
                arrl.put(PdfName.LOCK, this.writer.addToBody(this.fieldLock).getIndirectReference());
                object2 = this.fieldLock;
            } else {
                object2 = null;
            }
            n = this.getPage();
            if (!this.isInvisible()) {
                arrl.setWidget(this.getPageRect(), null);
            } else {
                arrl.setWidget(new Rectangle(0.0f, 0.0f), null);
            }
            arrl.setAppearance(PdfAnnotation.APPEARANCE_NORMAL, this.getAppearance());
            arrl.setPage(n);
            this.writer.addAnnotation((PdfAnnotation)arrl, n);
        }
        this.exclusionLocations = new HashMap();
        if (this.cryptoDictionary == null) {
            throw new DocumentException("No crypto dictionary defined.");
        }
        arrl = new PdfLiteral(80);
        this.exclusionLocations.put(PdfName.BYTERANGE, (PdfLiteral)arrl);
        this.cryptoDictionary.put(PdfName.BYTERANGE, (PdfObject)arrl);
        for (Map.Entry entry : object.entrySet()) {
            arrl = (PdfName)entry.getKey();
            PdfLiteral pdfLiteral = new PdfLiteral((Integer)entry.getValue());
            this.exclusionLocations.put((PdfName)arrl, pdfLiteral);
            this.cryptoDictionary.put((PdfName)arrl, pdfLiteral);
        }
        if (this.certificationLevel > 0) {
            this.addDocMDP(this.cryptoDictionary);
        }
        if (object2 != null) {
            this.addFieldMDP(this.cryptoDictionary, (PdfDictionary)object2);
        }
        if (this.signatureEvent != null) {
            this.signatureEvent.getSignatureDictionary(this.cryptoDictionary);
        }
        this.writer.addToBody((PdfObject)this.cryptoDictionary, pdfIndirectReference, false);
        if (this.certificationLevel > 0) {
            object = new PdfDictionary();
            object.put(new PdfName("DocMDP"), pdfIndirectReference);
            this.writer.reader.getCatalog().put(new PdfName("Perms"), (PdfObject)object);
        }
        this.writer.close(this.stamper.getMoreInfo());
        this.range = new long[this.exclusionLocations.size() * 2];
        long l2 = this.exclusionLocations.get(PdfName.BYTERANGE).getPosition();
        this.exclusionLocations.remove(PdfName.BYTERANGE);
        object = this.exclusionLocations.values().iterator();
        n = 1;
        while (object.hasNext()) {
            object2 = (PdfLiteral)object.next();
            l = object2.getPosition();
            arrl = this.range;
            int n3 = n + 1;
            arrl[n] = l;
            this.range[n3] = (long)object2.getPosLength() + l;
            n = n3 + 1;
        }
        Arrays.sort(this.range, 1, this.range.length - 1);
        for (n = n2; n < this.range.length - 2; n += 2) {
            object = this.range;
            object[n] = object[n] - this.range[n - 1];
        }
        if (this.tempFile == null) {
            this.bout = this.sigout.getBuffer();
            this.boutLen = this.sigout.size();
            this.range[this.range.length - 1] = (long)this.boutLen - this.range[this.range.length - 2];
            object = new ByteBuffer();
            object.append('[');
            n = 0;
            do {
                if (n >= this.range.length) {
                    object.append(']');
                    System.arraycopy(object.getBuffer(), 0, this.bout, (int)l2, object.size());
                    return;
                }
                object.append(this.range[n]).append(' ');
                ++n;
            } while (true);
        }
        try {
            this.raf = new RandomAccessFile(this.tempFile, "rw");
            l = this.raf.length();
            this.range[this.range.length - 1] = l - this.range[this.range.length - 2];
            object = new ByteBuffer();
            object.append('[');
            for (n = 0; n < this.range.length; ++n) {
                object.append(this.range[n]).append(' ');
            }
            object.append(']');
            this.raf.seek(l2);
            this.raf.write(object.getBuffer(), 0, object.size());
            return;
        }
        catch (IOException iOException) {
            try {
                this.raf.close();
            }
            catch (Exception exception) {}
            try {
                this.tempFile.delete();
            }
            catch (Exception exception) {
                throw iOException;
            }
            throw iOException;
        }
    }

    public void setAcro6Layers(boolean bl) {
        this.acro6Layers = bl;
    }

    public void setCertificate(Certificate certificate) {
        this.signCertificate = certificate;
    }

    public void setCertificationLevel(int n) {
        this.certificationLevel = n;
    }

    public void setContact(String string2) {
        this.contact = string2;
    }

    public void setCryptoDictionary(PdfDictionary pdfDictionary) {
        this.cryptoDictionary = pdfDictionary;
    }

    public void setFieldLockDict(PdfSigLockDictionary pdfSigLockDictionary) {
        this.fieldLock = pdfSigLockDictionary;
    }

    public void setImage(Image image) {
        this.image = image;
    }

    public void setImageScale(float f) {
        this.imageScale = f;
    }

    public void setLayer2Font(Font font) {
        this.layer2Font = font;
    }

    public void setLayer2Text(String string2) {
        this.layer2Text = string2;
    }

    public void setLayer4Text(String string2) {
        this.layer4Text = string2;
    }

    public void setLocation(String string2) {
        this.location = string2;
    }

    public void setLocationCaption(String string2) {
        this.locationCaption = string2;
    }

    void setOriginalout(OutputStream outputStream) {
        this.originalout = outputStream;
    }

    public void setReason(String string2) {
        this.reason = string2;
    }

    public void setReasonCaption(String string2) {
        this.reasonCaption = string2;
    }

    public void setRenderingMode(RenderingMode renderingMode) {
        this.renderingMode = renderingMode;
    }

    public void setReuseAppearance(boolean bl) {
        this.reuseAppearance = bl;
    }

    public void setRunDirection(int n) {
        if (n >= 0 && n <= 3) {
            this.runDirection = n;
            return;
        }
        throw new RuntimeException(MessageLocalization.getComposedMessage("invalid.run.direction.1", n));
    }

    public void setSignDate(Calendar calendar) {
        this.signDate = calendar;
    }

    public void setSignatureCreator(String string2) {
        this.signatureCreator = string2;
    }

    public void setSignatureEvent(SignatureEvent signatureEvent) {
        this.signatureEvent = signatureEvent;
    }

    public void setSignatureGraphic(Image image) {
        this.signatureGraphic = image;
    }

    void setSigout(ByteBuffer byteBuffer) {
        this.sigout = byteBuffer;
    }

    void setStamper(PdfStamper pdfStamper) {
        this.stamper = pdfStamper;
    }

    void setTempFile(File file) {
        this.tempFile = file;
    }

    public void setVisibleSignature(Rectangle rectangle, int n, String string2) {
        if (string2 != null) {
            if (string2.indexOf(46) >= 0) {
                throw new IllegalArgumentException(MessageLocalization.getComposedMessage("field.names.cannot.contain.a.dot", new Object[0]));
            }
            if (this.writer.getAcroFields().getFieldItem(string2) != null) {
                throw new IllegalArgumentException(MessageLocalization.getComposedMessage("the.field.1.already.exists", string2));
            }
            this.fieldName = string2;
        }
        if (n >= 1 && n <= this.writer.reader.getNumberOfPages()) {
            this.pageRect = new Rectangle(rectangle);
            this.pageRect.normalize();
            this.rect = new Rectangle(this.pageRect.getWidth(), this.pageRect.getHeight());
            this.page = n;
            return;
        }
        throw new IllegalArgumentException(MessageLocalization.getComposedMessage("invalid.page.number.1", n));
    }

    public void setVisibleSignature(String object) {
        AcroFields.Item item = this.writer.getAcroFields().getFieldItem((String)object);
        if (item == null) {
            throw new IllegalArgumentException(MessageLocalization.getComposedMessage("the.field.1.does.not.exist", object));
        }
        PdfDictionary pdfDictionary = item.getMerged(0);
        if (!PdfName.SIG.equals(PdfReader.getPdfObject(pdfDictionary.get(PdfName.FT)))) {
            throw new IllegalArgumentException(MessageLocalization.getComposedMessage("the.field.1.is.not.a.signature.field", object));
        }
        this.fieldName = object;
        object = pdfDictionary.getAsArray(PdfName.RECT);
        this.pageRect = new Rectangle(object.getAsNumber(0).floatValue(), object.getAsNumber(1).floatValue(), object.getAsNumber(2).floatValue(), object.getAsNumber(3).floatValue());
        this.pageRect.normalize();
        this.page = item.getPage(0);
        int n = this.writer.reader.getPageRotation(this.page);
        object = this.writer.reader.getPageSizeWithRotation(this.page);
        if (n != 90) {
            if (n != 180) {
                if (n == 270) {
                    this.pageRect = new Rectangle(object.getRight() - this.pageRect.getBottom(), this.pageRect.getLeft(), object.getRight() - this.pageRect.getTop(), this.pageRect.getRight());
                }
            } else {
                this.pageRect = new Rectangle(object.getRight() - this.pageRect.getLeft(), object.getTop() - this.pageRect.getBottom(), object.getRight() - this.pageRect.getRight(), object.getTop() - this.pageRect.getTop());
            }
        } else {
            this.pageRect = new Rectangle(this.pageRect.getBottom(), object.getTop() - this.pageRect.getLeft(), this.pageRect.getTop(), object.getTop() - this.pageRect.getRight());
        }
        if (n != 0) {
            this.pageRect.normalize();
        }
        this.rect = new Rectangle(this.pageRect.getWidth(), this.pageRect.getHeight());
    }

    public static enum RenderingMode {
        DESCRIPTION,
        NAME_AND_DESCRIPTION,
        GRAPHIC_AND_DESCRIPTION,
        GRAPHIC;
        

        private RenderingMode() {
        }
    }

    public static interface SignatureEvent {
        public void getSignatureDictionary(PdfDictionary var1);
    }

}

