/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf;

import com.itextpdf.text.AccessibleElementId;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chunk;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.ElementListener;
import com.itextpdf.text.ExceptionConverter;
import com.itextpdf.text.Font;
import com.itextpdf.text.Image;
import com.itextpdf.text.ImgTemplate;
import com.itextpdf.text.ListBody;
import com.itextpdf.text.ListItem;
import com.itextpdf.text.ListLabel;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.TabSettings;
import com.itextpdf.text.TabStop;
import com.itextpdf.text.Version;
import com.itextpdf.text.error_messages.MessageLocalization;
import com.itextpdf.text.io.TempFileCache;
import com.itextpdf.text.pdf.BaseFont;
import com.itextpdf.text.pdf.ColumnText;
import com.itextpdf.text.pdf.FloatLayout;
import com.itextpdf.text.pdf.PageResources;
import com.itextpdf.text.pdf.PdfAcroForm;
import com.itextpdf.text.pdf.PdfAction;
import com.itextpdf.text.pdf.PdfAnnotation;
import com.itextpdf.text.pdf.PdfArray;
import com.itextpdf.text.pdf.PdfBody;
import com.itextpdf.text.pdf.PdfChunk;
import com.itextpdf.text.pdf.PdfContentByte;
import com.itextpdf.text.pdf.PdfContents;
import com.itextpdf.text.pdf.PdfDate;
import com.itextpdf.text.pdf.PdfDestination;
import com.itextpdf.text.pdf.PdfDictionary;
import com.itextpdf.text.pdf.PdfDiv;
import com.itextpdf.text.pdf.PdfEncodings;
import com.itextpdf.text.pdf.PdfEncryption;
import com.itextpdf.text.pdf.PdfException;
import com.itextpdf.text.pdf.PdfFileSpecification;
import com.itextpdf.text.pdf.PdfFont;
import com.itextpdf.text.pdf.PdfFormField;
import com.itextpdf.text.pdf.PdfIndirectObject;
import com.itextpdf.text.pdf.PdfIndirectReference;
import com.itextpdf.text.pdf.PdfLine;
import com.itextpdf.text.pdf.PdfName;
import com.itextpdf.text.pdf.PdfNameTree;
import com.itextpdf.text.pdf.PdfNumber;
import com.itextpdf.text.pdf.PdfObject;
import com.itextpdf.text.pdf.PdfOutline;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfPage;
import com.itextpdf.text.pdf.PdfPageEvent;
import com.itextpdf.text.pdf.PdfPageLabels;
import com.itextpdf.text.pdf.PdfRectangle;
import com.itextpdf.text.pdf.PdfStream;
import com.itextpdf.text.pdf.PdfString;
import com.itextpdf.text.pdf.PdfStructureElement;
import com.itextpdf.text.pdf.PdfStructureTreeRoot;
import com.itextpdf.text.pdf.PdfTextArray;
import com.itextpdf.text.pdf.PdfTransition;
import com.itextpdf.text.pdf.PdfWriter;
import com.itextpdf.text.pdf.PdfXConformanceException;
import com.itextpdf.text.pdf.collection.PdfCollection;
import com.itextpdf.text.pdf.draw.DrawInterface;
import com.itextpdf.text.pdf.interfaces.IAccessibleElement;
import com.itextpdf.text.pdf.internal.PdfAnnotationsImp;
import com.itextpdf.text.pdf.internal.PdfVersionImp;
import com.itextpdf.text.pdf.internal.PdfViewerPreferencesImp;
import java.io.IOException;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.Stack;
import java.util.TreeMap;

public class PdfDocument
extends Document {
    protected static final DecimalFormat SIXTEEN_DIGITS = new DecimalFormat("0000000000000000");
    static final String hangingPunctuation = ".,;:'";
    protected PdfDictionary additionalActions;
    protected int alignment = 0;
    protected PdfAction anchorAction = null;
    PdfAnnotationsImp annotationsImp;
    private PdfBody body;
    protected HashMap<String, PdfRectangle> boxSize = new HashMap();
    protected PdfCollection collection;
    protected float currentHeight = 0.0f;
    protected PdfOutline currentOutline;
    protected HashMap<String, PdfObject> documentFileAttachment = new HashMap();
    protected HashMap<String, PdfObject> documentLevelJS = new HashMap();
    private HashMap<AccessibleElementId, AccessibleElementId> elementsParents = new HashMap();
    private TempFileCache externalCache;
    private HashMap<AccessibleElementId, TempFileCache.ObjectPosition> externallyStoredStructElements = new HashMap();
    protected boolean firstPageEvent = true;
    private ArrayList<Element> floatingElements = new ArrayList();
    protected PdfContentByte graphics;
    protected float imageEnd = -1.0f;
    protected Image imageWait = null;
    protected Indentation indentation = new Indentation();
    protected PdfInfo info = new PdfInfo();
    protected boolean isSectionTitle = false;
    private boolean isToUseExternalCache = false;
    int jsCounter;
    protected PdfString language;
    protected int lastElementType = -1;
    protected float leading = 0.0f;
    private Stack<Float> leadingStack = new Stack();
    protected PdfLine line = null;
    protected ArrayList<PdfLine> lines = new ArrayList();
    protected TreeMap<String, Destination> localDestinations = new TreeMap();
    protected HashMap<Object, Integer> markPoints = new HashMap();
    protected float nextMarginBottom;
    protected float nextMarginLeft;
    protected float nextMarginRight;
    protected float nextMarginTop;
    protected Rectangle nextPageSize = null;
    protected PdfAction openActionAction;
    protected String openActionName;
    protected boolean openMCDocument = false;
    protected PdfDictionary pageAA = null;
    private boolean pageEmpty = true;
    protected PdfPageLabels pageLabels;
    protected PageResources pageResources;
    protected PdfOutline rootOutline;
    protected boolean strictImageSequence = false;
    private HashMap<AccessibleElementId, PdfStructureElement> structElements = new HashMap();
    protected HashMap<Object, int[]> structParentIndices = new HashMap();
    protected TabSettings tabSettings;
    protected PdfContentByte text;
    protected int textEmptySize;
    protected HashMap<String, PdfRectangle> thisBoxSize = new HashMap();
    protected PdfViewerPreferencesImp viewerPreferences = new PdfViewerPreferencesImp();
    protected PdfWriter writer;

    public PdfDocument() {
        this.addProducer();
        this.addCreationDate();
    }

    private void addDiv(PdfDiv pdfDiv) throws DocumentException {
        if (this.floatingElements == null) {
            this.floatingElements = new ArrayList();
        }
        this.floatingElements.add(pdfDiv);
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    private void flushFloatingElements() throws DocumentException {
        if (this.floatingElements == null) return;
        if (this.floatingElements.isEmpty() != false) return;
        object = this.floatingElements;
        this.floatingElements = null;
        floatLayout = new FloatLayout((List<Element>)object, false);
        n = 0;
        do lbl-1000: // 2 sources:
        {
            this.indentLeft();
            floatLayout.setSimpleColumn(this.indentLeft(), this.indentBottom(), this.indentRight(), this.indentTop() - this.currentHeight);
            object = PdfDocument.isTagged(this.writer) != false ? this.text : this.writer.getDirectContent();
            if ((floatLayout.layout((PdfContentByte)object, false) & 1) == 0) ** break block6
            if (PdfDocument.isTagged(this.writer)) {
                this.text.setTextMatrix(this.indentLeft(), floatLayout.getYLine());
            } else {
                this.text.moveText(0.0f, floatLayout.getYLine() - this.indentTop() + this.currentHeight);
            }
            this.currentHeight = this.indentTop() - floatLayout.getYLine();
            return;
            break;
        } while (true);
        catch (Exception exception) {
            return;
        }
        {
            
            n = this.indentTop() - this.currentHeight != floatLayout.getYLine() && !this.isPageEmpty() ? 0 : ++n;
            if (n == 2) {
                return;
            }
            this.newPage();
            ** while (true)
        }
    }

    private PdfLine getLastLine() {
        if (this.lines.size() > 0) {
            return this.lines.get(this.lines.size() - 1);
        }
        return null;
    }

    private static boolean isTagged(PdfWriter pdfWriter) {
        if (pdfWriter != null && pdfWriter.isTagged()) {
            return true;
        }
        return false;
    }

    protected void add(Image image) throws PdfException, DocumentException {
        float f;
        if (image.hasAbsoluteY()) {
            this.graphics.addImage(image);
            this.pageEmpty = false;
            return;
        }
        if (this.currentHeight != 0.0f && this.indentTop() - this.currentHeight - image.getScaledHeight() < this.indentBottom()) {
            if (!this.strictImageSequence && this.imageWait == null) {
                this.imageWait = image;
                return;
            }
            this.newPage();
            if (this.currentHeight != 0.0f && this.indentTop() - this.currentHeight - image.getScaledHeight() < this.indentBottom()) {
                this.imageWait = image;
                return;
            }
        }
        this.pageEmpty = false;
        if (image == this.imageWait) {
            this.imageWait = null;
        }
        boolean bl = (image.getAlignment() & 4) == 4 && (image.getAlignment() & 1) != 1;
        boolean bl2 = (image.getAlignment() & 8) == 8;
        float f2 = f = this.leading / 2.0f;
        if (bl) {
            f2 = f + this.leading;
        }
        float f3 = this.indentTop();
        float f4 = this.currentHeight;
        float f5 = image.getScaledHeight();
        float[] arrf = image.matrix();
        f = this.indentLeft() - arrf[4];
        if ((image.getAlignment() & 2) == 2) {
            f = this.indentRight() - image.getScaledWidth() - arrf[4];
        }
        if ((image.getAlignment() & 1) == 1) {
            f = this.indentLeft() + (this.indentRight() - this.indentLeft() - image.getScaledWidth()) / 2.0f - arrf[4];
        }
        if (image.hasAbsoluteX()) {
            f = image.getAbsoluteX();
        }
        if (bl) {
            if (this.imageEnd < 0.0f || this.imageEnd < this.currentHeight + image.getScaledHeight() + f2) {
                this.imageEnd = this.currentHeight + image.getScaledHeight() + f2;
            }
            if ((image.getAlignment() & 2) == 2) {
                Indentation indentation = this.indentation;
                indentation.imageIndentRight += image.getScaledWidth() + image.getIndentationLeft();
            } else {
                Indentation indentation = this.indentation;
                indentation.imageIndentLeft += image.getScaledWidth() + image.getIndentationRight();
            }
        } else {
            f = (image.getAlignment() & 2) == 2 ? (f -= image.getIndentationRight()) : ((image.getAlignment() & 1) == 1 ? (f += image.getIndentationLeft() - image.getIndentationRight()) : (f += image.getIndentationLeft()));
        }
        this.graphics.addImage(image, arrf[0], arrf[1], arrf[2], arrf[3], f, f3 - f4 - f5 - f2 - arrf[5]);
        if (!bl && !bl2) {
            this.currentHeight += image.getScaledHeight() + f2;
            this.flushLines();
            this.text.moveText(0.0f, - image.getScaledHeight() + f2);
            this.newLine();
        }
    }

    /*
     * Exception decompiling
     */
    @Override
    public boolean add(Element var1_1) throws DocumentException {
        // This method has failed to decompile.  When submitting a bug report, please provide this stack trace, and (if you hold appropriate legal rights) the relevant class file.
        // org.benf.cfr.reader.util.ConfusedCFRException: First case is not immediately after switch.
        // org.benf.cfr.reader.bytecode.analysis.opgraph.op3rewriters.SwitchReplacer.examineSwitchContiguity(SwitchReplacer.java:366)
        // org.benf.cfr.reader.bytecode.analysis.opgraph.op3rewriters.SwitchReplacer.replaceRawSwitches(SwitchReplacer.java:65)
        // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisInner(CodeAnalyser.java:416)
        // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisOrWrapFail(CodeAnalyser.java:196)
        // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysis(CodeAnalyser.java:141)
        // org.benf.cfr.reader.entities.attributes.AttributeCode.analyse(AttributeCode.java:95)
        // org.benf.cfr.reader.entities.Method.analyse(Method.java:372)
        // org.benf.cfr.reader.entities.ClassFile.analyseMid(ClassFile.java:867)
        // org.benf.cfr.reader.entities.ClassFile.analyseTop(ClassFile.java:768)
        // org.benf.cfr.reader.Main.doJar(Main.java:141)
        // org.benf.cfr.reader.Main.main(Main.java:242)
        throw new IllegalStateException("Decompilation failed");
    }

    void addAdditionalAction(PdfName pdfName, PdfAction pdfAction) {
        if (this.additionalActions == null) {
            this.additionalActions = new PdfDictionary();
        }
        if (pdfAction == null) {
            this.additionalActions.remove(pdfName);
        } else {
            this.additionalActions.put(pdfName, pdfAction);
        }
        if (this.additionalActions.size() == 0) {
            this.additionalActions = null;
        }
    }

    void addAnnotation(PdfAnnotation pdfAnnotation) {
        this.pageEmpty = false;
        this.annotationsImp.addAnnotation(pdfAnnotation);
    }

    void addCalculationOrder(PdfFormField pdfFormField) {
        this.annotationsImp.addCalculationOrder(pdfFormField);
    }

    void addFileAttachment(String object, PdfFileSpecification pdfFileSpecification) throws IOException {
        CharSequence charSequence = object;
        if (object == null) {
            object = (PdfString)pdfFileSpecification.get(PdfName.DESC);
            charSequence = object == null ? "" : PdfEncodings.convertToString(object.getBytes(), null);
        }
        pdfFileSpecification.addDescription((String)charSequence, true);
        object = charSequence;
        if (charSequence.length() == 0) {
            object = "Unnamed";
        }
        charSequence = PdfEncodings.convertToString(new PdfString((String)object, "UnicodeBig").getBytes(), null);
        int n = 0;
        while (this.documentFileAttachment.containsKey(charSequence)) {
            charSequence = new StringBuilder();
            charSequence.append((String)object);
            charSequence.append(" ");
            charSequence.append(++n);
            charSequence = PdfEncodings.convertToString(new PdfString(charSequence.toString(), "UnicodeBig").getBytes(), null);
        }
        this.documentFileAttachment.put((String)charSequence, pdfFileSpecification.getReference());
    }

    void addJavaScript(PdfAction pdfAction) {
        if (pdfAction.get(PdfName.JS) == null) {
            throw new RuntimeException(MessageLocalization.getComposedMessage("only.javascript.actions.are.allowed", new Object[0]));
        }
        try {
            HashMap<String, PdfObject> hashMap = this.documentLevelJS;
            DecimalFormat decimalFormat = SIXTEEN_DIGITS;
            int n = this.jsCounter;
            this.jsCounter = n + 1;
            hashMap.put(decimalFormat.format(n), this.writer.addToBody(pdfAction).getIndirectReference());
            return;
        }
        catch (IOException iOException) {
            throw new ExceptionConverter(iOException);
        }
    }

    void addJavaScript(String string2, PdfAction pdfAction) {
        if (pdfAction.get(PdfName.JS) == null) {
            throw new RuntimeException(MessageLocalization.getComposedMessage("only.javascript.actions.are.allowed", new Object[0]));
        }
        try {
            this.documentLevelJS.put(string2, this.writer.addToBody(pdfAction).getIndirectReference());
            return;
        }
        catch (IOException iOException) {
            throw new ExceptionConverter(iOException);
        }
    }

    void addOutline(PdfOutline pdfOutline, String string2) {
        this.localDestination(string2, pdfOutline.getPdfDestination());
    }

    void addPTable(PdfPTable pdfPTable) throws DocumentException {
        Object object = PdfDocument.isTagged(this.writer) ? this.text : this.writer.getDirectContent();
        object = new ColumnText((PdfContentByte)object);
        object.setRunDirection(pdfPTable.getRunDirection());
        if (pdfPTable.getKeepTogether() && !this.fitsPage(pdfPTable, 0.0f) && this.currentHeight > 0.0f) {
            this.newPage();
            if (PdfDocument.isTagged(this.writer)) {
                object.setCanvas(this.text);
            }
        }
        if (this.currentHeight == 0.0f) {
            object.setAdjustFirstLine(false);
        }
        object.addElement(pdfPTable);
        boolean bl = pdfPTable.isHeadersInEvent();
        pdfPTable.setHeadersInEvent(true);
        int n = 0;
        do {
            object.setSimpleColumn(this.indentLeft(), this.indentBottom(), this.indentRight(), this.indentTop() - this.currentHeight);
            if ((object.go() & 1) != 0) {
                if (PdfDocument.isTagged(this.writer)) {
                    this.text.setTextMatrix(this.indentLeft(), object.getYLine());
                } else {
                    this.text.moveText(0.0f, object.getYLine() - this.indentTop() + this.currentHeight);
                }
                this.currentHeight = this.indentTop() - object.getYLine();
                pdfPTable.setHeadersInEvent(bl);
                return;
            }
            int n2 = this.indentTop() - this.currentHeight == object.getYLine() ? n + 1 : 0;
            if (n2 == 3) {
                throw new DocumentException(MessageLocalization.getComposedMessage("infinite.table.loop", new Object[0]));
            }
            this.currentHeight = this.indentTop() - object.getYLine();
            this.newPage();
            n = n2;
            if (!PdfDocument.isTagged(this.writer)) continue;
            object.setCanvas(this.text);
            n = n2;
        } while (true);
    }

    protected void addSpacing(float f, float f2, Font font) {
        this.addSpacing(f, f2, font, false);
    }

    protected void addSpacing(float f, float f2, Font font, boolean bl) {
        Chunk chunk;
        if (f == 0.0f) {
            return;
        }
        if (this.pageEmpty) {
            return;
        }
        float f3 = bl ? f : this.calculateLineHeight();
        if (this.currentHeight + f3 > this.indentTop() - this.indentBottom()) {
            this.newPage();
            return;
        }
        this.leading = f;
        this.carriageReturn();
        if (font.isUnderlined() || font.isStrikethru()) {
            font = new Font(font);
            font.setStyle(font.getStyle() & -5 & -9);
        }
        Chunk chunk2 = chunk = new Chunk(" ", font);
        if (bl) {
            chunk2 = chunk;
            if (this.pageEmpty) {
                chunk2 = new Chunk("", font);
            }
        }
        chunk2.process(this);
        this.carriageReturn();
        this.leading = f2;
    }

    void addViewerPreference(PdfName pdfName, PdfObject pdfObject) {
        this.viewerPreferences.addViewerPreference(pdfName, pdfObject);
    }

    public void addWriter(PdfWriter pdfWriter) throws DocumentException {
        if (this.writer == null) {
            this.writer = pdfWriter;
            this.annotationsImp = new PdfAnnotationsImp(pdfWriter);
            return;
        }
        throw new DocumentException(MessageLocalization.getComposedMessage("you.can.only.add.a.writer.to.a.pdfdocument.once", new Object[0]));
    }

    protected float calculateLineHeight() {
        float f;
        float f2 = f = this.line.height();
        if (f != this.leading) {
            f2 = f + this.leading;
        }
        return f2;
    }

    void calculateOutlineCount() {
        if (this.rootOutline.getKids().size() == 0) {
            return;
        }
        this.traverseOutlineCount(this.rootOutline);
    }

    protected void carriageReturn() {
        if (this.lines == null) {
            this.lines = new ArrayList();
        }
        if (this.line != null && this.line.size() > 0) {
            if (this.currentHeight + this.calculateLineHeight() > this.indentTop() - this.indentBottom() && this.currentHeight != 0.0f) {
                PdfLine pdfLine = this.line;
                this.line = null;
                this.newPage();
                this.line = pdfLine;
                pdfLine.left = this.indentLeft();
            }
            this.currentHeight += this.line.height();
            this.lines.add(this.line);
            this.pageEmpty = false;
        }
        if (this.imageEnd > -1.0f && this.currentHeight > this.imageEnd) {
            this.imageEnd = -1.0f;
            this.indentation.imageIndentRight = 0.0f;
            this.indentation.imageIndentLeft = 0.0f;
        }
        this.line = new PdfLine(this.indentLeft(), this.indentRight(), this.alignment, this.leading);
    }

    public void clearTextWrap() {
        float f;
        float f2 = f = this.imageEnd - this.currentHeight;
        if (this.line != null) {
            f2 = f + this.line.height();
        }
        if (this.imageEnd > -1.0f && f2 > 0.0f) {
            this.carriageReturn();
            this.currentHeight += f2;
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @Override
    public void close() {
        if (this.close) {
            return;
        }
        try {
            if (PdfDocument.isTagged(this.writer)) {
                int n;
                this.flushFloatingElements();
                this.flushLines();
                this.writer.flushAcroFields();
                this.writer.flushTaggedObjects();
                if (this.isPageEmpty() && (n = this.writer.pageReferences.size()) > 0 && this.writer.currentPageNumber == n) {
                    this.writer.pageReferences.remove(n - 1);
                }
            } else {
                this.writer.flushAcroFields();
            }
            if (this.imageWait != null) {
                this.newPage();
            }
            this.endPage();
            if (PdfDocument.isTagged(this.writer)) {
                this.writer.getDirectContent().closeMCBlock(this);
            }
            if (this.annotationsImp.hasUnusedAnnotations()) {
                throw new RuntimeException(MessageLocalization.getComposedMessage("not.all.annotations.could.be.added.to.the.document.the.document.doesn.t.have.enough.pages", new Object[0]));
            }
            PdfPageEvent pdfPageEvent = this.writer.getPageEvent();
            if (pdfPageEvent != null) {
                pdfPageEvent.onCloseDocument(this.writer, this);
            }
            super.close();
            this.writer.addLocalDestinations(this.localDestinations);
            this.calculateOutlineCount();
            this.writeOutlines();
            this.writer.close();
            return;
        }
        catch (Exception exception) {
            throw ExceptionConverter.convertException(exception);
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    protected ArrayList<IAccessibleElement> endPage() {
        ArrayList<IAccessibleElement> arrayList;
        PdfContentByte pdfContentByte;
        block20 : {
            boolean bl = this.isPageEmpty();
            pdfContentByte = null;
            if (bl) {
                return null;
            }
            try {
                this.flushFloatingElements();
                this.lastElementType = -1;
                arrayList = this.writer.getPageEvent();
                if (arrayList == null) break block20;
                arrayList.onEndPage(this.writer, (Document)this);
            }
            catch (DocumentException documentException) {
                throw new ExceptionConverter(documentException);
            }
        }
        try {
            this.flushLines();
            int n = this.pageSize.getRotation();
            if (this.writer.isPdfIso()) {
                if (this.thisBoxSize.containsKey("art") && this.thisBoxSize.containsKey("trim")) {
                    throw new PdfXConformanceException(MessageLocalization.getComposedMessage("only.one.of.artbox.or.trimbox.can.exist.in.the.page", new Object[0]));
                }
                if (!this.thisBoxSize.containsKey("art") && !this.thisBoxSize.containsKey("trim")) {
                    if (this.thisBoxSize.containsKey("crop")) {
                        this.thisBoxSize.put("trim", this.thisBoxSize.get("crop"));
                    } else {
                        this.thisBoxSize.put("trim", new PdfRectangle(this.pageSize, this.pageSize.getRotation()));
                    }
                }
            }
            this.pageResources.addDefaultColorDiff(this.writer.getDefaultColorspace());
            if (this.writer.isRgbTransparencyBlending()) {
                arrayList = new PdfDictionary();
                arrayList.put(PdfName.CS, (PdfObject)PdfName.DEVICERGB);
                this.pageResources.addDefaultColorDiff((PdfDictionary)((Object)arrayList));
            }
            arrayList = this.pageResources.getResources();
            PdfPage pdfPage = new PdfPage(new PdfRectangle(this.pageSize, n), this.thisBoxSize, (PdfDictionary)((Object)arrayList), n);
            if (PdfDocument.isTagged(this.writer)) {
                pdfPage.put(PdfName.TABS, PdfName.S);
            } else {
                pdfPage.put(PdfName.TABS, this.writer.getTabs());
            }
            pdfPage.putAll(this.writer.getPageDictEntries());
            this.writer.resetPageDictEntries();
            if (this.pageAA != null) {
                pdfPage.put(PdfName.AA, this.writer.addToBody(this.pageAA).getIndirectReference());
                this.pageAA = null;
            }
            if (this.annotationsImp.hasUnusedAnnotations() && (arrayList = this.annotationsImp.rotateAnnotations(this.writer, this.pageSize)).size() != 0) {
                pdfPage.put(PdfName.ANNOTS, (PdfObject)((Object)arrayList));
            }
            if (PdfDocument.isTagged(this.writer)) {
                pdfPage.put(PdfName.STRUCTPARENTS, new PdfNumber(this.getStructParentIndex(this.writer.getCurrentPage())));
            }
            if (this.text.size() <= this.textEmptySize && !PdfDocument.isTagged(this.writer)) {
                this.text = null;
            } else {
                this.text.endText();
            }
            arrayList = PdfDocument.isTagged(this.writer) ? this.writer.getDirectContent().saveMCBlocks() : null;
            PdfWriter pdfWriter = this.writer;
            PdfContentByte pdfContentByte2 = this.writer.getDirectContentUnder();
            PdfContentByte pdfContentByte3 = this.graphics;
            if (!PdfDocument.isTagged(this.writer)) {
                pdfContentByte = this.text;
            }
            pdfWriter.add(pdfPage, new PdfContents(pdfContentByte2, pdfContentByte3, pdfContentByte, this.writer.getDirectContent(), this.pageSize));
            this.annotationsImp.resetAnnotations();
            this.writer.resetContent();
            return arrayList;
        }
        catch (IOException iOException) {
            throw new ExceptionConverter(iOException);
        }
        catch (DocumentException documentException) {
            throw new ExceptionConverter(documentException);
        }
    }

    protected void ensureNewLine() {
        try {
            if (this.lastElementType == 11 || this.lastElementType == 10) {
                this.newLine();
                this.flushLines();
            }
            return;
        }
        catch (DocumentException documentException) {
            throw new ExceptionConverter(documentException);
        }
    }

    boolean fitsPage(PdfPTable pdfPTable, float f) {
        if (!pdfPTable.isLockedWidth()) {
            pdfPTable.setTotalWidth((this.indentRight() - this.indentLeft()) * pdfPTable.getWidthPercentage() / 100.0f);
        }
        this.ensureNewLine();
        float f2 = pdfPTable.isSkipFirstHeader() ? pdfPTable.getTotalHeight() - pdfPTable.getHeaderHeight() : pdfPTable.getTotalHeight();
        float f3 = Float.valueOf(f2).floatValue();
        float f4 = this.currentHeight;
        f2 = 0.0f;
        if (f4 > 0.0f) {
            f2 = pdfPTable.spacingBefore();
        }
        if (f3 + f2 <= this.indentTop() - this.currentHeight - this.indentBottom() - f) {
            return true;
        }
        return false;
    }

    protected float flushLines() throws DocumentException {
        if (this.lines == null) {
            return 0.0f;
        }
        if (this.line != null && this.line.size() > 0) {
            this.lines.add(this.line);
            this.line = new PdfLine(this.indentLeft(), this.indentRight(), this.alignment, this.leading);
        }
        if (this.lines.isEmpty()) {
            return 0.0f;
        }
        Object[] arrobject = new Object[2];
        arrobject[1] = new Float(0.0f);
        Iterator<PdfLine> iterator = this.lines.iterator();
        PdfFont pdfFont = null;
        float f = 0.0f;
        while (iterator.hasNext()) {
            PdfLine pdfLine = iterator.next();
            float f2 = pdfLine.indentLeft() - this.indentLeft() + this.indentation.indentLeft + this.indentation.listIndentLeft + this.indentation.sectionIndentLeft;
            this.text.moveText(f2, - pdfLine.height());
            pdfLine.flush();
            if (pdfLine.listSymbol() != null) {
                ListLabel listLabel;
                Chunk chunk = pdfLine.listSymbol();
                if (PdfDocument.isTagged(this.writer)) {
                    listLabel = pdfLine.listItem().getListLabel();
                    this.graphics.openMCBlock(listLabel);
                    chunk = new Chunk(chunk);
                    chunk.setRole(null);
                } else {
                    listLabel = null;
                }
                ColumnText.showTextAligned(this.graphics, 0, new Phrase(chunk), this.text.getXTLM() - pdfLine.listIndent(), this.text.getYTLM(), 0.0f);
                if (listLabel != null) {
                    this.graphics.closeMCBlock(listLabel);
                }
            }
            arrobject[0] = pdfFont;
            if (PdfDocument.isTagged(this.writer) && pdfLine.listItem() != null) {
                this.text.openMCBlock(pdfLine.listItem().getListBody());
            }
            this.writeLineToContent(pdfLine, this.text, this.graphics, arrobject, this.writer.getSpaceCharRatio());
            pdfFont = (PdfFont)arrobject[0];
            f += pdfLine.height();
            this.text.moveText(- f2, 0.0f);
        }
        this.lines = new ArrayList();
        return f;
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    protected void flushStructureElementsOnNewPage() {
        if (!this.isToUseExternalCache) {
            return;
        }
        Iterator<Map.Entry<AccessibleElementId, PdfStructureElement>> iterator = this.structElements.entrySet().iterator();
        while (iterator.hasNext()) {
            Map.Entry<AccessibleElementId, PdfStructureElement> entry = iterator.next();
            if (entry.getValue().getStructureType().equals(PdfName.DOCUMENT)) continue;
            try {
                PdfStructureElement pdfStructureElement = entry.getValue();
                PdfDictionary pdfDictionary = pdfStructureElement.getParent();
                Object object = null;
                if (pdfDictionary instanceof PdfStructureElement && (object = (PdfStructureElement)pdfDictionary) != null) {
                    this.elementsParents.put(entry.getKey(), object.getElementId());
                }
                object = this.externalCache.put(pdfStructureElement);
                this.externallyStoredStructElements.put(entry.getKey(), (TempFileCache.ObjectPosition)object);
                iterator.remove();
                continue;
            }
            catch (IOException iOException) {}
            throw new ExceptionConverter(iOException);
        }
        return;
    }

    PdfAcroForm getAcroForm() {
        return this.annotationsImp.getAcroForm();
    }

    Rectangle getBoxSize(String object) {
        if ((object = this.thisBoxSize.get(object)) != null) {
            return object.getRectangle();
        }
        return null;
    }

    PdfCatalog getCatalog(PdfIndirectReference pdfObject) {
        pdfObject = new PdfCatalog((PdfIndirectReference)pdfObject, this.writer);
        if (this.rootOutline.getKids().size() > 0) {
            pdfObject.put(PdfName.PAGEMODE, PdfName.USEOUTLINES);
            pdfObject.put(PdfName.OUTLINES, this.rootOutline.indirectReference());
        }
        this.writer.getPdfVersion().addToCatalog((PdfDictionary)pdfObject);
        this.viewerPreferences.addToCatalog((PdfDictionary)pdfObject);
        if (this.pageLabels != null) {
            pdfObject.put(PdfName.PAGELABELS, this.pageLabels.getDictionary(this.writer));
        }
        pdfObject.addNames(this.localDestinations, this.getDocumentLevelJS(), this.documentFileAttachment, this.writer);
        if (this.openActionName != null) {
            pdfObject.setOpenAction(this.getLocalGotoAction(this.openActionName));
        } else if (this.openActionAction != null) {
            pdfObject.setOpenAction(this.openActionAction);
        }
        if (this.additionalActions != null) {
            pdfObject.setAdditionalActions(this.additionalActions);
        }
        if (this.collection != null) {
            pdfObject.put(PdfName.COLLECTION, this.collection);
        }
        if (this.annotationsImp.hasValidAcroForm()) {
            try {
                pdfObject.put(PdfName.ACROFORM, this.writer.addToBody(this.annotationsImp.getAcroForm()).getIndirectReference());
            }
            catch (IOException iOException) {
                throw new ExceptionConverter(iOException);
            }
        }
        if (this.language != null) {
            pdfObject.put(PdfName.LANG, this.language);
        }
        return pdfObject;
    }

    HashMap<String, PdfObject> getDocumentFileAttachment() {
        return this.documentFileAttachment;
    }

    HashMap<String, PdfObject> getDocumentLevelJS() {
        return this.documentLevelJS;
    }

    PdfInfo getInfo() {
        return this.info;
    }

    public float getLeading() {
        return this.leading;
    }

    PdfAction getLocalGotoAction(String string2) {
        Object object = this.localDestinations.get(string2);
        Destination destination = object;
        if (object == null) {
            destination = new Destination();
        }
        if (destination.action == null) {
            if (destination.reference == null) {
                destination.reference = this.writer.getPdfIndirectReference();
            }
            destination.action = object = new PdfAction(destination.reference);
            this.localDestinations.put(string2, destination);
            return object;
        }
        return destination.action;
    }

    public int getNextMarkPoint(Object object) {
        int[] arrn;
        int[] arrn2 = arrn = this.structParentIndices.get(object);
        if (arrn == null) {
            arrn2 = new int[]{this.structParentIndices.size(), 0};
            this.structParentIndices.put(object, arrn2);
        }
        int n = arrn2[1];
        arrn2[1] = arrn2[1] + 1;
        return n;
    }

    public PdfPageLabels getPageLabels() {
        return this.pageLabels;
    }

    PageResources getPageResources() {
        return this.pageResources;
    }

    public PdfOutline getRootOutline() {
        return this.rootOutline;
    }

    protected PdfStructureElement getStructElement(AccessibleElementId accessibleElementId) {
        return this.getStructElement(accessibleElementId, true);
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    protected PdfStructureElement getStructElement(AccessibleElementId accessibleElementId, boolean bl) {
        PdfStructureElement pdfStructureElement;
        PdfStructureElement pdfStructureElement2 = pdfStructureElement = this.structElements.get(accessibleElementId);
        if (!this.isToUseExternalCache) return pdfStructureElement2;
        pdfStructureElement2 = pdfStructureElement;
        if (pdfStructureElement != null) return pdfStructureElement2;
        TempFileCache.ObjectPosition objectPosition = this.externallyStoredStructElements.get(accessibleElementId);
        pdfStructureElement2 = pdfStructureElement;
        if (objectPosition == null) return pdfStructureElement2;
        pdfStructureElement = (PdfStructureElement)this.externalCache.get(objectPosition);
        pdfStructureElement.setStructureTreeRoot(this.writer.getStructureTreeRoot());
        pdfStructureElement.setStructureElementParent(this.getStructElement(this.elementsParents.get(pdfStructureElement.getElementId()), bl));
        pdfStructureElement2 = pdfStructureElement;
        if (!bl) return pdfStructureElement2;
        try {
            this.externallyStoredStructElements.remove(accessibleElementId);
            this.structElements.put(accessibleElementId, pdfStructureElement);
            return pdfStructureElement;
        }
        catch (ClassNotFoundException classNotFoundException) {
            throw new ExceptionConverter(classNotFoundException);
        }
        catch (IOException iOException) {
            throw new ExceptionConverter(iOException);
        }
    }

    public Set<AccessibleElementId> getStructElements() {
        HashSet<AccessibleElementId> hashSet = new HashSet<AccessibleElementId>();
        hashSet.addAll(this.externallyStoredStructElements.keySet());
        hashSet.addAll(this.structElements.keySet());
        return hashSet;
    }

    public int getStructParentIndex(Object object) {
        int[] arrn;
        int[] arrn2 = arrn = this.structParentIndices.get(object);
        if (arrn == null) {
            arrn2 = new int[]{this.structParentIndices.size(), 0};
            this.structParentIndices.put(object, arrn2);
        }
        return arrn2[0];
    }

    public int[] getStructParentIndexAndNextMarkPoint(Object object) {
        int[] arrn;
        int[] arrn2 = arrn = this.structParentIndices.get(object);
        if (arrn == null) {
            arrn2 = new int[]{this.structParentIndices.size(), 0};
            this.structParentIndices.put(object, arrn2);
        }
        int n = arrn2[1];
        arrn2[1] = arrn2[1] + 1;
        return new int[]{arrn2[0], n};
    }

    public TabSettings getTabSettings() {
        return this.tabSettings;
    }

    public float getVerticalPosition(boolean bl) {
        if (bl) {
            this.ensureNewLine();
        }
        return this.top() - this.currentHeight - this.indentation.indentTop;
    }

    float indentBottom() {
        return this.bottom(this.indentation.indentBottom);
    }

    protected float indentLeft() {
        return this.left(this.indentation.indentLeft + this.indentation.listIndentLeft + this.indentation.imageIndentLeft + this.indentation.sectionIndentLeft);
    }

    protected float indentRight() {
        return this.right(this.indentation.indentRight + this.indentation.sectionIndentRight + this.indentation.imageIndentRight);
    }

    protected float indentTop() {
        return this.top(this.indentation.indentTop);
    }

    protected void initPage() throws DocumentException {
        ++this.pageN;
        this.pageResources = new PageResources();
        if (PdfDocument.isTagged(this.writer)) {
            this.writer.getDirectContent().duplicatedFrom = this.graphics = this.writer.getDirectContentUnder().getDuplicate();
        } else {
            this.graphics = new PdfContentByte(this.writer);
        }
        this.setNewPageSizeAndMargins();
        this.imageEnd = -1.0f;
        this.indentation.imageIndentRight = 0.0f;
        this.indentation.imageIndentLeft = 0.0f;
        this.indentation.indentBottom = 0.0f;
        this.indentation.indentTop = 0.0f;
        this.currentHeight = 0.0f;
        this.thisBoxSize = new HashMap<String, PdfRectangle>(this.boxSize);
        if (this.pageSize.getBackgroundColor() != null || this.pageSize.hasBorders() || this.pageSize.getBorderColor() != null) {
            this.add(this.pageSize);
        }
        float f = this.leading;
        int n = this.alignment;
        this.pageEmpty = true;
        try {
            if (this.imageWait != null) {
                this.add(this.imageWait);
                this.imageWait = null;
            }
            this.leading = f;
            this.alignment = n;
            this.carriageReturn();
            PdfPageEvent pdfPageEvent = this.writer.getPageEvent();
            if (pdfPageEvent != null) {
                if (this.firstPageEvent) {
                    pdfPageEvent.onOpenDocument(this.writer, this);
                }
                pdfPageEvent.onStartPage(this.writer, this);
            }
            this.firstPageEvent = false;
            return;
        }
        catch (Exception exception) {
            throw new ExceptionConverter(exception);
        }
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    boolean isPageEmpty() {
        boolean bl = PdfDocument.isTagged(this.writer);
        boolean bl2 = true;
        boolean bl3 = true;
        if (bl) {
            bl = bl3;
            if (this.writer == null) return bl;
            if (this.writer.getDirectContent().size(false) != 0) return false;
            if (this.writer.getDirectContentUnder().size(false) != 0) return false;
            if (this.text.size(false) - this.textEmptySize != 0) return false;
            bl = bl3;
            if (this.pageEmpty) return bl;
            if (!this.writer.isPaused()) return false;
            return true;
        }
        bl = bl2;
        if (this.writer == null) return bl;
        if (this.writer.getDirectContent().size() != 0) return false;
        if (this.writer.getDirectContentUnder().size() != 0) return false;
        bl = bl2;
        if (this.pageEmpty) return bl;
        if (!this.writer.isPaused()) return false;
        return true;
    }

    boolean isStrictImageSequence() {
        return this.strictImageSequence;
    }

    boolean localDestination(String string2, PdfDestination pdfDestination) {
        Destination destination;
        Destination destination2 = destination = this.localDestinations.get(string2);
        if (destination == null) {
            destination2 = new Destination();
        }
        if (destination2.destination != null) {
            return false;
        }
        destination2.destination = pdfDestination;
        this.localDestinations.put(string2, destination2);
        if (!pdfDestination.hasPage()) {
            pdfDestination.addPage(this.writer.getCurrentPage());
        }
        return true;
    }

    void localGoto(String object, float f, float f2, float f3, float f4) {
        object = this.getLocalGotoAction((String)object);
        this.annotationsImp.addPlainAnnotation(this.writer.createAnnotation(f, f2, f3, f4, (PdfAction)object, null));
    }

    protected void newLine() throws DocumentException {
        this.lastElementType = -1;
        this.carriageReturn();
        if (this.lines != null && !this.lines.isEmpty()) {
            this.lines.add(this.line);
            this.currentHeight += this.line.height();
        }
        this.line = new PdfLine(this.indentLeft(), this.indentRight(), this.alignment, this.leading);
    }

    @Override
    public boolean newPage() {
        if (this.isPageEmpty()) {
            this.setNewPageSizeAndMargins();
            return false;
        }
        if (this.open && !this.close) {
            ArrayList<IAccessibleElement> arrayList = this.endPage();
            super.newPage();
            this.indentation.imageIndentLeft = 0.0f;
            this.indentation.imageIndentRight = 0.0f;
            try {
                if (PdfDocument.isTagged(this.writer)) {
                    this.flushStructureElementsOnNewPage();
                    this.writer.getDirectContentUnder().restoreMCBlocks(arrayList);
                }
                this.initPage();
                if (this.body != null && this.body.getBackgroundColor() != null) {
                    this.graphics.rectangle(this.body);
                }
                return true;
            }
            catch (DocumentException documentException) {
                throw new ExceptionConverter(documentException);
            }
        }
        throw new RuntimeException(MessageLocalization.getComposedMessage("the.document.is.not.open", new Object[0]));
    }

    @Override
    public void open() {
        if (!this.open) {
            super.open();
            this.writer.open();
            this.currentOutline = this.rootOutline = new PdfOutline(this.writer);
        }
        try {
            if (PdfDocument.isTagged(this.writer)) {
                this.openMCDocument = true;
            }
            this.initPage();
            return;
        }
        catch (DocumentException documentException) {
            throw new ExceptionConverter(documentException);
        }
    }

    void outlineTree(PdfOutline pdfOutline) throws IOException {
        int n;
        pdfOutline.setIndirectReference(this.writer.getPdfIndirectReference());
        if (pdfOutline.parent() != null) {
            pdfOutline.put(PdfName.PARENT, pdfOutline.parent().indirectReference());
        }
        ArrayList<PdfOutline> arrayList = pdfOutline.getKids();
        int n2 = arrayList.size();
        int n3 = 0;
        for (n = 0; n < n2; ++n) {
            this.outlineTree(arrayList.get(n));
        }
        for (n = 0; n < n2; ++n) {
            if (n > 0) {
                arrayList.get(n).put(PdfName.PREV, arrayList.get(n - 1).indirectReference());
            }
            if (n >= n2 - 1) continue;
            arrayList.get(n).put(PdfName.NEXT, arrayList.get(n + 1).indirectReference());
        }
        n = n3;
        if (n2 > 0) {
            pdfOutline.put(PdfName.FIRST, arrayList.get(0).indirectReference());
            pdfOutline.put(PdfName.LAST, arrayList.get(n2 - 1).indirectReference());
            n = n3;
        }
        while (n < n2) {
            pdfOutline = arrayList.get(n);
            this.writer.addToBody((PdfObject)pdfOutline, pdfOutline.indirectReference());
            ++n;
        }
    }

    protected void popLeading() {
        this.leading = this.leadingStack.pop().floatValue();
        if (this.leadingStack.size() > 0) {
            this.leading = this.leadingStack.peek().floatValue();
        }
    }

    protected void pushLeading() {
        this.leadingStack.push(Float.valueOf(this.leading));
    }

    void remoteGoto(String string2, int n, float f, float f2, float f3, float f4) {
        this.addAnnotation(this.writer.createAnnotation(f, f2, f3, f4, new PdfAction(string2, n), null));
    }

    void remoteGoto(String string2, String string3, float f, float f2, float f3, float f4) {
        this.annotationsImp.addPlainAnnotation(this.writer.createAnnotation(f, f2, f3, f4, new PdfAction(string2, string3), null));
    }

    @Override
    public void resetPageCount() {
        if (this.writer != null && this.writer.isPaused()) {
            return;
        }
        super.resetPageCount();
    }

    protected void saveStructElement(AccessibleElementId accessibleElementId, PdfStructureElement pdfStructureElement) {
        this.structElements.put(accessibleElementId, pdfStructureElement);
    }

    void setAction(PdfAction pdfAction, float f, float f2, float f3, float f4) {
        this.addAnnotation(this.writer.createAnnotation(f, f2, f3, f4, pdfAction, null));
    }

    void setBoxSize(String string2, Rectangle rectangle) {
        if (rectangle == null) {
            this.boxSize.remove(string2);
            return;
        }
        this.boxSize.put(string2, new PdfRectangle(rectangle));
    }

    public void setCollection(PdfCollection pdfCollection) {
        this.collection = pdfCollection;
    }

    void setCropBoxSize(Rectangle rectangle) {
        this.setBoxSize("crop", rectangle);
    }

    void setDuration(int n) {
        if (n > 0) {
            this.writer.addPageDictEntry(PdfName.DUR, new PdfNumber(n));
        }
    }

    void setLanguage(String string2) {
        this.language = new PdfString(string2);
    }

    void setLeading(float f) {
        this.leading = f;
    }

    @Override
    public boolean setMarginMirroring(boolean bl) {
        if (this.writer != null && this.writer.isPaused()) {
            return false;
        }
        return super.setMarginMirroring(bl);
    }

    @Override
    public boolean setMarginMirroringTopBottom(boolean bl) {
        if (this.writer != null && this.writer.isPaused()) {
            return false;
        }
        return super.setMarginMirroringTopBottom(bl);
    }

    @Override
    public boolean setMargins(float f, float f2, float f3, float f4) {
        if (this.writer != null && this.writer.isPaused()) {
            return false;
        }
        this.nextMarginLeft = f;
        this.nextMarginRight = f2;
        this.nextMarginTop = f3;
        this.nextMarginBottom = f4;
        return true;
    }

    protected void setNewPageSizeAndMargins() {
        this.pageSize = this.nextPageSize;
        if (this.marginMirroring && (this.getPageNumber() & 1) == 0) {
            this.marginRight = this.nextMarginLeft;
            this.marginLeft = this.nextMarginRight;
        } else {
            this.marginLeft = this.nextMarginLeft;
            this.marginRight = this.nextMarginRight;
        }
        if (this.marginMirroringTopBottom && (this.getPageNumber() & 1) == 0) {
            this.marginTop = this.nextMarginBottom;
            this.marginBottom = this.nextMarginTop;
        } else {
            this.marginTop = this.nextMarginTop;
            this.marginBottom = this.nextMarginBottom;
        }
        if (!PdfDocument.isTagged(this.writer)) {
            this.text = new PdfContentByte(this.writer);
            this.text.reset();
        } else {
            this.text = this.graphics;
        }
        this.text.beginText();
        this.text.moveText(this.left(), this.top());
        if (PdfDocument.isTagged(this.writer)) {
            this.textEmptySize = this.text.size();
        }
    }

    void setOpenAction(PdfAction pdfAction) {
        this.openActionAction = pdfAction;
        this.openActionName = null;
    }

    void setOpenAction(String string2) {
        this.openActionName = string2;
        this.openActionAction = null;
    }

    void setPageAction(PdfName pdfName, PdfAction pdfAction) {
        if (this.pageAA == null) {
            this.pageAA = new PdfDictionary();
        }
        this.pageAA.put(pdfName, pdfAction);
    }

    @Override
    public void setPageCount(int n) {
        if (this.writer != null && this.writer.isPaused()) {
            return;
        }
        super.setPageCount(n);
    }

    void setPageEmpty(boolean bl) {
        this.pageEmpty = bl;
    }

    void setPageLabels(PdfPageLabels pdfPageLabels) {
        this.pageLabels = pdfPageLabels;
    }

    @Override
    public boolean setPageSize(Rectangle rectangle) {
        if (this.writer != null && this.writer.isPaused()) {
            return false;
        }
        this.nextPageSize = new Rectangle(rectangle);
        return true;
    }

    void setSigFlags(int n) {
        this.annotationsImp.setSigFlags(n);
    }

    void setStrictImageSequence(boolean bl) {
        this.strictImageSequence = bl;
    }

    public void setTabSettings(TabSettings tabSettings) {
        this.tabSettings = tabSettings;
    }

    void setThumbnail(Image image) throws PdfException, DocumentException {
        this.writer.addPageDictEntry(PdfName.THUMB, this.writer.getImageReference(this.writer.addDirectImageSimple(image)));
    }

    void setTransition(PdfTransition pdfTransition) {
        this.writer.addPageDictEntry(PdfName.TRANS, pdfTransition.getTransitionDictionary());
    }

    void setViewerPreferences(int n) {
        this.viewerPreferences.setViewerPreferences(n);
    }

    public void setXmpMetadata(byte[] object) throws IOException {
        object = new PdfStream((byte[])object);
        object.put(PdfName.TYPE, PdfName.METADATA);
        object.put(PdfName.SUBTYPE, PdfName.XML);
        Object object2 = this.writer.getEncryption();
        if (object2 != null && !object2.isMetadataEncrypted()) {
            object2 = new PdfArray();
            object2.add(PdfName.CRYPT);
            object.put(PdfName.FILTER, (PdfObject)object2);
        }
        this.writer.addPageDictEntry(PdfName.METADATA, this.writer.addToBody((PdfObject)object).getIndirectReference());
    }

    void traverseOutlineCount(PdfOutline pdfOutline) {
        ArrayList<PdfOutline> arrayList = pdfOutline.getKids();
        PdfOutline pdfOutline2 = pdfOutline.parent();
        if (arrayList.isEmpty()) {
            if (pdfOutline2 != null) {
                pdfOutline2.setCount(pdfOutline2.getCount() + 1);
                return;
            }
        } else {
            for (int i = 0; i < arrayList.size(); ++i) {
                this.traverseOutlineCount(arrayList.get(i));
            }
            if (pdfOutline2 != null) {
                if (pdfOutline.isOpen()) {
                    pdfOutline2.setCount(pdfOutline.getCount() + pdfOutline2.getCount() + 1);
                    return;
                }
                pdfOutline2.setCount(pdfOutline2.getCount() + 1);
                pdfOutline.setCount(- pdfOutline.getCount());
            }
        }
    }

    protected void useExternalCache(TempFileCache tempFileCache) {
        this.isToUseExternalCache = true;
        this.externalCache = tempFileCache;
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Lifted jumps to return sites
     */
    float writeLineToContent(PdfLine var1_1, PdfContentByte var2_2, PdfContentByte var3_3, Object[] var4_4, float var5_5) throws DocumentException {
        block105 : {
            block104 : {
                block101 : {
                    block107 : {
                        block106 : {
                            block102 : {
                                block103 : {
                                    block100 : {
                                        var35_6 = var1_1;
                                        var34_7 = (PdfFont)var4_4[0];
                                        var9_8 = ((Float)var4_4[1]).floatValue();
                                        var6_9 = var2_2.getXTLM() + var1_1.getOriginalWidth();
                                        var24_10 = var1_1.numberOfSpaces();
                                        var25_11 = var1_1.getLineLengthUtf32();
                                        var27_12 = var1_1.hasToBeJustified() != false && (var24_10 != 0 || var25_11 > 1);
                                        var26_13 = var1_1.getSeparatorCount();
                                        if (var26_13 <= 0) break block100;
                                        var8_14 = var1_1.widthLeft() / (float)var26_13;
                                        break block101;
                                    }
                                    if (!var27_12 || var26_13 != 0) break block102;
                                    if (!var1_1.isNewlineSplit() || (var7_16 /* !! */  = var1_1.widthLeft()) < (var8_14 = ((float)var24_10 * var5_5 + (float)var25_11 - 1.0f) * var9_8)) break block103;
                                    if (var1_1.isRTL()) {
                                        var2_2.moveText(var1_1.widthLeft() - var8_14, 0.0f);
                                    }
                                    var7_16 /* !! */  = var5_5 * var9_8;
                                    var10_15 = var9_8;
                                    var8_14 = 0.0f;
                                    break block104;
                                }
                                var8_14 = var1_1.widthLeft();
                                if ((var35_6 = var35_6.getChunk(var1_1.size() - 1)) != null && (var36_19 = var35_6.toString()).length() > 0 && ".,;:'".indexOf(var26_13 = (int)var36_19.charAt(var36_19.length() - 1)) >= 0) {
                                    var9_8 = var35_6.font().width(var26_13) * 0.4f + var8_14;
                                    var7_16 /* !! */  = var9_8 - var8_14;
                                    var8_14 = var9_8;
                                } else {
                                    var7_16 /* !! */  = 0.0f;
                                }
                                var9_8 = var5_5 * (var8_14 /= (float)var24_10 * var5_5 + (float)var25_11 - 1.0f);
                                var5_5 = var8_14;
                                var15_17 = var7_16 /* !! */ ;
                                var8_14 = 0.0f;
                                var10_15 = var5_5;
                                var7_16 /* !! */  = var9_8;
                                var14_18 = var6_9;
                                break block105;
                            }
                            if (var35_6.alignment == 0) break block106;
                            var5_5 = var6_9;
                            if (var35_6.alignment != -1) break block107;
                        }
                        var5_5 = var6_9 - var1_1.widthLeft();
                    }
                    var8_14 = 0.0f;
                    var6_9 = var5_5;
                }
                var10_15 = 0.0f;
                var7_16 /* !! */  = 0.0f;
            }
            var5_5 = var9_8;
            var15_17 = 0.0f;
            var14_18 = var6_9;
        }
        var28_20 = var1_1.getLastStrokeChunk();
        var22_21 = var2_2.getXTLM();
        var11_22 = var2_2.getYTLM();
        var35_6 = var1_1.iterator();
        var6_9 = var22_21;
        var32_23 = false;
        var26_13 = 0;
        var12_24 = 0.0f;
        var25_11 = 0;
        var9_8 = Float.NaN;
        do {
            block114 : {
                block108 : {
                    block113 : {
                        block109 : {
                            block112 : {
                                block110 : {
                                    block111 : {
                                        var40_40 = var3_3;
                                        var41_41 = this;
                                        if (!var35_6.hasNext()) break;
                                        var39_39 = var35_6.next();
                                        if (PdfDocument.isTagged(var41_41.writer) && var39_39.accessibleElement != null) {
                                            var2_2.openMCBlock(var39_39.accessibleElement);
                                            var32_23 = true;
                                        }
                                        var36_19 = var39_39.color();
                                        var19_29 = var39_39.font().size();
                                        if (var39_39.isImage()) {
                                            var18_28 = var39_39.height();
                                            var19_29 = var39_39.height();
                                            var17_27 = 0.0f;
                                        } else {
                                            var18_28 = var39_39.font().getFont().getFontDescriptor(1, var19_29);
                                            var17_27 = var39_39.font().getFont().getFontDescriptor(3, var19_29);
                                        }
                                        var38_38 = var35_6;
                                        if (var26_13 > var28_20) break block108;
                                        var13_25 /* !! */  = var27_12 != false ? var39_39.getWidthCorrected(var10_15, var7_16 /* !! */ ) : var39_39.width();
                                        if (!var39_39.isStroked()) break block109;
                                        var42_42 = var1_1.getChunk(var26_13 + 1);
                                        if (var39_39.isSeparator()) {
                                            var35_6 = (Object[])var39_39.getAttribute("SEPARATOR");
                                            var37_37 = (DrawInterface)var35_6[0];
                                            if (((Boolean)var35_6[1]).booleanValue()) {
                                                var37_37.draw((PdfContentByte)var40_40, var22_21, var11_22 + var17_27, var22_21 + var1_1.getOriginalWidth(), var18_28 - var17_27, var11_22);
                                            } else {
                                                var37_37.draw((PdfContentByte)var40_40, var6_9, var11_22 + var17_27, var6_9 + var8_14, var18_28 - var17_27, var11_22);
                                            }
                                            var13_25 /* !! */  = var8_14;
                                        }
                                        var16_26 = var10_15;
                                        var20_30 = var8_14;
                                        if (!var39_39.isTab()) break block110;
                                        if (!var39_39.isAttribute("TABSETTINGS")) break block111;
                                        var35_6 = var39_39.getTabStop();
                                        if (var35_6 != null) {
                                            var8_14 = var35_6.getPosition() + var22_21;
                                            if (var35_6.getLeader() != null) {
                                                var35_6.getLeader().draw((PdfContentByte)var40_40, var6_9, var11_22 + var17_27, var8_14, var18_28 - var17_27, var11_22);
                                            }
                                        } else {
                                            var8_14 = var6_9;
                                        }
                                        ** GOTO lbl-1000
                                    }
                                    var10_15 = var11_22;
                                    var35_6 = (Object[])var39_39.getAttribute("TAB");
                                    var37_37 = (DrawInterface)var35_6[0];
                                    var8_14 = var12_24 = ((Float)var35_6[1]).floatValue() + ((Float)var35_6[3]).floatValue();
                                    if (var12_24 > var6_9) {
                                        var8_14 = var10_15;
                                        var37_37.draw((PdfContentByte)var40_40, var6_9, var10_15 + var17_27, var12_24, var18_28 - var17_27, var10_15);
                                        var10_15 = var8_14;
                                        var8_14 = var12_24;
                                    } else lbl-1000: // 3 sources:
                                    {
                                        var10_15 = var11_22;
                                    }
                                    var11_22 = var6_9;
                                    var6_9 = var8_14;
                                    var8_14 = var11_22;
                                    break block112;
                                }
                                var10_15 = var11_22;
                                var8_14 = var12_24;
                            }
                            if (var39_39.isAttribute("BACKGROUND") && (var35_6 = (Object[])var39_39.getAttribute("BACKGROUND"))[0] != null) {
                                var33_36 = var3_3.getInText();
                                if (var33_36 && PdfDocument.isTagged(var41_41.writer)) {
                                    var3_3.endText();
                                }
                                var3_3.saveState();
                                var11_22 = var42_42 != null && var42_42.isAttribute("BACKGROUND") != false ? 0.0f : var5_5;
                                var12_24 = var11_22;
                                if (var42_42 == null) {
                                    var12_24 = var11_22 + var15_17;
                                }
                                var40_40.setColorFill((BaseColor)var35_6[0]);
                                var35_6 = (float[])var35_6[1];
                                var40_40.rectangle(var6_9 - var35_6[0], var10_15 + var17_27 - var35_6[1] + var39_39.getTextRise(), var13_25 /* !! */  - var12_24 + var35_6[0] + var35_6[2], var18_28 - var17_27 + var35_6[1] + var35_6[3]);
                                var3_3.fill();
                                var40_40.setGrayFill(0.0f);
                                var3_3.restoreState();
                                if (var33_36 && PdfDocument.isTagged(var41_41.writer)) {
                                    var40_40.beginText(true);
                                }
                            }
                            var21_31 = var10_15;
                            if (var39_39.isAttribute("UNDERLINE")) {
                                var33_36 = var3_3.getInText();
                                if (var33_36 && PdfDocument.isTagged(var41_41.writer)) {
                                    var3_3.endText();
                                }
                                var10_15 = var42_42 != null && var42_42.isAttribute("UNDERLINE") != false ? 0.0f : var5_5;
                                var11_22 = var10_15;
                                if (var42_42 == null) {
                                    var11_22 = var10_15 + var15_17;
                                }
                                var35_6 = (Object[][])var39_39.getAttribute("UNDERLINE");
                                for (var29_33 = 0; var29_33 < ((Object)var35_6).length; ++var29_33) {
                                    var43_43 = var35_6[var29_33];
                                    var37_37 = (BaseColor)var43_43[0];
                                    var43_43 = (float[])var43_43[1];
                                    if (var37_37 == null) {
                                        var37_37 = var36_19;
                                    }
                                    if (var37_37 != null) {
                                        var40_40.setColorStroke((BaseColor)var37_37);
                                    }
                                    var40_40.setLineWidth(var43_43[0] + var39_39.font().size() * var43_43[1]);
                                    var10_15 = var43_43[2];
                                    var12_24 = var39_39.font().size();
                                    var23_32 = var43_43[3];
                                    var30_34 = (int)var43_43[4];
                                    if (var30_34 != 0) {
                                        var40_40.setLineCap(var30_34);
                                    }
                                    var10_15 = var21_31 + (var10_15 + var12_24 * var23_32);
                                    var40_40.moveTo(var6_9, var10_15);
                                    var40_40.lineTo(var6_9 + var13_25 /* !! */  - var11_22, var10_15);
                                    var3_3.stroke();
                                    if (var37_37 != null) {
                                        var3_3.resetGrayStroke();
                                    }
                                    if (var30_34 == 0) continue;
                                    var40_40.setLineCap(0);
                                }
                                var29_33 = var24_10;
                                var10_15 = var7_16 /* !! */ ;
                                var40_40.setLineWidth(1.0f);
                                var24_10 = var29_33;
                                var7_16 /* !! */  = var10_15;
                                if (var33_36) {
                                    var24_10 = var29_33;
                                    var7_16 /* !! */  = var10_15;
                                    if (PdfDocument.isTagged(var41_41.writer)) {
                                        var40_40.beginText(true);
                                        var24_10 = var29_33;
                                        var7_16 /* !! */  = var10_15;
                                    }
                                }
                            }
                            if (var39_39.isAttribute("ACTION")) {
                                var10_15 = var42_42 != null && var42_42.isAttribute("ACTION") != false ? 0.0f : var5_5;
                                var11_22 = var10_15;
                                if (var42_42 == null) {
                                    var11_22 = var10_15 + var15_17;
                                }
                                if (var39_39.isImage()) {
                                    var35_6 = var41_41.writer;
                                    var10_15 = var39_39.getImageOffsetY();
                                    var12_24 = var39_39.getImageHeight();
                                    var35_6 = var35_6.createAnnotation(var6_9, var10_15 + var21_31, var6_9 + var13_25 /* !! */  - var11_22, var39_39.getImageOffsetY() + (var12_24 + var21_31), (PdfAction)var39_39.getAttribute("ACTION"), null);
                                } else {
                                    var10_15 = var6_9;
                                    var35_6 = var41_41.writer.createAnnotation(var10_15, var39_39.getTextRise() + (var21_31 + var17_27), var10_15 + var13_25 /* !! */  - var11_22, var21_31 + var18_28 + var39_39.getTextRise(), (PdfAction)var39_39.getAttribute("ACTION"), null);
                                }
                                var2_2.addAnnotation((PdfAnnotation)var35_6, true);
                                if (PdfDocument.isTagged(var41_41.writer) && var39_39.accessibleElement != null && (var37_37 = var41_41.getStructElement(var39_39.accessibleElement.getId())) != null) {
                                    var29_33 = var41_41.getStructParentIndex(var35_6);
                                    var35_6.put(PdfName.STRUCTPARENT, new PdfNumber(var29_33));
                                    var37_37.setAnnotation((PdfAnnotation)var35_6, var41_41.writer.getCurrentPage());
                                    var41_41.writer.getStructureTreeRoot().setAnnotationMark(var29_33, var37_37.getReference());
                                }
                            }
                            var11_22 = var20_30;
                            var12_24 = var6_9;
                            var20_30 = var21_31;
                            if (var39_39.isAttribute("REMOTEGOTO")) {
                                var6_9 = var42_42 != null && var42_42.isAttribute("REMOTEGOTO") != false ? 0.0f : var5_5;
                                var10_15 = var6_9;
                                if (var42_42 == null) {
                                    var10_15 = var6_9 + var15_17;
                                }
                                var35_6 = (Object[])var39_39.getAttribute("REMOTEGOTO");
                                var37_37 = (String)var35_6[0];
                                if (var35_6[1] instanceof String) {
                                    var41_41.remoteGoto((String)var37_37, (String)var35_6[1], var12_24, var20_30 + var17_27 + var39_39.getTextRise(), var12_24 + var13_25 /* !! */  - var10_15, var20_30 + var18_28 + var39_39.getTextRise());
                                } else {
                                    var41_41.remoteGoto((String)var37_37, (Integer)var35_6[1], var12_24, var20_30 + var17_27 + var39_39.getTextRise(), var12_24 + var13_25 /* !! */  - var10_15, var20_30 + var18_28 + var39_39.getTextRise());
                                }
                            }
                            if (var39_39.isAttribute("LOCALGOTO")) {
                                var6_9 = var42_42 != null && var42_42.isAttribute("LOCALGOTO") != false ? 0.0f : var5_5;
                                var10_15 = var6_9;
                                if (var42_42 == null) {
                                    var10_15 = var6_9 + var15_17;
                                }
                                var41_41.localGoto((String)var39_39.getAttribute("LOCALGOTO"), var12_24, var20_30, var12_24 + var13_25 /* !! */  - var10_15, var20_30 + var19_29);
                            }
                            if (var39_39.isAttribute("LOCALDESTINATION")) {
                                var41_41.localDestination((String)var39_39.getAttribute("LOCALDESTINATION"), new PdfDestination(0, var12_24, var20_30 + var19_29, 0.0f));
                            }
                            if (var39_39.isAttribute("GENERICTAG")) {
                                var6_9 = var42_42 != null && var42_42.isAttribute("GENERICTAG") != false ? 0.0f : var5_5;
                                var10_15 = var6_9;
                                if (var42_42 == null) {
                                    var10_15 = var6_9 + var15_17;
                                }
                                var35_6 = new Rectangle(var12_24, var20_30, var12_24 + var13_25 /* !! */  - var10_15, var20_30 + var19_29);
                                var37_37 = var41_41.writer.getPageEvent();
                                if (var37_37 != null) {
                                    var37_37.onGenericTag(var41_41.writer, var41_41, (Rectangle)var35_6, (String)var39_39.getAttribute("GENERICTAG"));
                                }
                            }
                            if (var39_39.isAttribute("PDFANNOTATION")) {
                                var6_9 = var42_42 != null && var42_42.isAttribute("PDFANNOTATION") != false ? 0.0f : var5_5;
                                var10_15 = var6_9;
                                if (var42_42 == null) {
                                    var10_15 = var6_9 + var15_17;
                                }
                                var35_6 = PdfFormField.shallowDuplicate((PdfAnnotation)var39_39.getAttribute("PDFANNOTATION"));
                                var35_6.put(PdfName.RECT, new PdfRectangle(var12_24, var20_30 + var17_27, var12_24 + var13_25 /* !! */  - var10_15, var20_30 + var18_28));
                                var2_2.addAnnotation((PdfAnnotation)var35_6, true);
                            }
                            var35_6 = (float[])var39_39.getAttribute("SKEW");
                            var37_37 = (Float)var39_39.getAttribute("HSCALE");
                            if (var35_6 == null && var37_37 == null) {
                                var6_9 = 1.0f;
                            } else {
                                if (var35_6 != null) {
                                    var10_15 = (float)var35_6[0];
                                    var17_27 = (float)var35_6[1];
                                } else {
                                    var10_15 = 0.0f;
                                    var17_27 = 0.0f;
                                }
                                var6_9 = var37_37 != null ? var37_37.floatValue() : 1.0f;
                                var2_2.setTextMatrix(var6_9, var10_15, var17_27, 1.0f, var12_24, var20_30);
                            }
                            if (!var27_12) {
                                if (var39_39.isAttribute("WORD_SPACING")) {
                                    var2_2.setWordSpacing(((Float)var39_39.getAttribute("WORD_SPACING")).floatValue());
                                }
                                if (var39_39.isAttribute("CHAR_SPACING")) {
                                    var2_2.setCharacterSpacing(((Float)var39_39.getAttribute("CHAR_SPACING")).floatValue());
                                }
                            }
                            if (var39_39.isImage()) {
                                var35_6 = var39_39.getImage();
                                var10_15 = var39_39.getImageWidth();
                                var37_37 = var35_6.matrix(var39_39.getImageScalePercentage());
                                var37_37[4] = var12_24 + var39_39.getImageOffsetX() - var37_37[4];
                                var37_37[5] = var39_39.getImageOffsetY() + var20_30 - var37_37[5];
                                if (var3_3.getInText() && !(var35_6 instanceof ImgTemplate)) {
                                    var3_3.endText();
                                    var29_33 = 1;
                                } else {
                                    var29_33 = 0;
                                }
                                var40_40.addImage((Image)var35_6, (double)var37_37[0], (double)var37_37[1], (double)var37_37[2], (double)var37_37[3], (double)var37_37[4], (double)var37_37[5], false, var32_23);
                                if (var29_33 != 0) {
                                    var40_40.beginText(true);
                                }
                                var2_2.moveText(var12_24 + var5_5 + var39_39.getImageWidth() - var2_2.getXTLM(), 0.0f);
                            } else {
                                var10_15 = var13_25 /* !! */ ;
                            }
                            var13_25 /* !! */  = var7_16 /* !! */ ;
                            var17_27 = var12_24;
                            var12_24 = var10_15;
                            var7_16 /* !! */  = var11_22;
                            var10_15 = var20_30;
                            var11_22 = var16_26;
                            break block113;
                        }
                        var16_26 = var13_25 /* !! */ ;
                        var17_27 = var11_22;
                        var18_28 = 1.0f;
                        var13_25 /* !! */  = var7_16 /* !! */ ;
                        var11_22 = var10_15;
                        var10_15 = var17_27;
                        var7_16 /* !! */  = var8_14;
                        var8_14 = var12_24;
                        var17_27 = var6_9;
                        var6_9 = var18_28;
                        var12_24 = var16_26;
                    }
                    ++var26_13;
                    var12_24 = var17_27 + var12_24;
                    var16_26 = var8_14;
                    var8_14 = var12_24;
                    break block114;
                }
                var16_26 = var11_22;
                var17_27 = var6_9;
                var6_9 = 1.0f;
                var13_25 /* !! */  = var7_16 /* !! */ ;
                var11_22 = var10_15;
                var10_15 = var16_26;
                var7_16 /* !! */  = var8_14;
                var16_26 = var12_24;
                var8_14 = var17_27;
            }
            var35_6 = var36_19;
            if (!var39_39.isImage() && var39_39.font().compareTo(var34_7) != 0) {
                var34_7 = var39_39.font();
                var2_2.setFontAndSize(var34_7.getFont(), var34_7.size());
            }
            var36_19 = (Object[])var39_39.getAttribute("TEXTRENDERMODE");
            var40_40 = (Float)var39_39.getAttribute("SUBSUPSCRIPT");
            if (var36_19 != null) {
                var30_34 = (Integer)var36_19[0] & 3;
                if (var30_34 != 0) {
                    var2_2.setTextRenderingMode(var30_34);
                }
                if (var30_34 != 1 && var30_34 != 2) {
                    var36_19 = null;
                    var12_24 = 1.0f;
                    var29_33 = var30_34;
                } else {
                    var17_27 = ((Float)var36_19[1]).floatValue();
                    if (var17_27 != 1.0f) {
                        var2_2.setLineWidth(var17_27);
                    }
                    var37_37 = var36_19 = (BaseColor)var36_19[2];
                    if (var36_19 == null) {
                        var37_37 = var35_6;
                    }
                    var12_24 = var17_27;
                    var36_19 = var37_37;
                    var29_33 = var30_34;
                    if (var37_37 != null) {
                        var2_2.setColorStroke((BaseColor)var37_37);
                        var12_24 = var17_27;
                        var36_19 = var37_37;
                        var29_33 = var30_34;
                    }
                }
            } else {
                var36_19 = null;
                var12_24 = 1.0f;
                var29_33 = 0;
            }
            var17_27 = var40_40 != null ? var40_40.floatValue() : 0.0f;
            if (var35_6 != null) {
                var2_2.setColorFill((BaseColor)var35_6);
                if (var17_27 != 0.0f) {
                    var2_2.setTextRise(var17_27);
                }
            }
            if (var39_39.isImage()) {
                var25_11 = 1;
            } else if (var39_39.isHorizontalSeparator()) {
                var37_37 = new PdfTextArray();
                var37_37.add((- var7_16 /* !! */ ) * 1000.0f / var39_39.font.size() / var6_9);
                var2_2.showText((PdfTextArray)var37_37);
            } else if (var39_39.isTab() && var16_26 != var8_14) {
                var37_37 = new PdfTextArray();
                var37_37.add((var16_26 - var8_14) * 1000.0f / var39_39.font.size() / var6_9);
                var2_2.showText((PdfTextArray)var37_37);
            } else if (var27_12 && var24_10 > 0 && var39_39.isSpecialEncoding()) {
                if (var6_9 != var9_8) {
                    var2_2.setWordSpacing(var13_25 /* !! */  / var6_9);
                    var2_2.setCharacterSpacing(var11_22 / var6_9 + var2_2.getCharacterSpacing());
                    var9_8 = var6_9;
                }
                if ((var30_34 = (var37_37 = var39_39.toString()).indexOf(32)) < 0) {
                    var2_2.showText((String)var37_37);
                } else {
                    var6_9 = (- var13_25 /* !! */ ) * 1000.0f / var39_39.font.size() / var6_9;
                    var40_40 = new PdfTextArray(var37_37.substring(0, var30_34));
                    while ((var31_35 = var37_37.indexOf(32, var30_34 + 1)) >= 0) {
                        var40_40.add(var6_9);
                        var40_40.add(var37_37.substring(var30_34, var31_35));
                        var30_34 = var31_35;
                    }
                    var40_40.add(var6_9);
                    var40_40.add(var37_37.substring(var30_34));
                    var2_2.showText((PdfTextArray)var40_40);
                }
            } else {
                if (var27_12 && var6_9 != var9_8) {
                    var2_2.setWordSpacing(var13_25 /* !! */  / var6_9);
                    var2_2.setCharacterSpacing(var11_22 / var6_9 + var2_2.getCharacterSpacing());
                } else {
                    var6_9 = var9_8;
                }
                var2_2.showText(var39_39.toString());
                var9_8 = var6_9;
            }
            if (var17_27 != 0.0f) {
                var2_2.setTextRise(0.0f);
            }
            if (var35_6 != null) {
                var2_2.resetRGBColorFill();
            }
            if (var29_33 != 0) {
                var2_2.setTextRenderingMode(0);
            }
            if (var36_19 != null) {
                var2_2.resetRGBColorStroke();
            }
            if (var12_24 != 1.0f) {
                var2_2.setLineWidth(1.0f);
            }
            if (var39_39.isAttribute("SKEW") || var39_39.isAttribute("HSCALE")) {
                var2_2.setTextMatrix(var8_14, var10_15);
                var25_11 = 1;
            }
            if (!var27_12) {
                if (var39_39.isAttribute("CHAR_SPACING")) {
                    var2_2.setCharacterSpacing(var11_22);
                }
                if (var39_39.isAttribute("WORD_SPACING")) {
                    var2_2.setWordSpacing(var13_25 /* !! */ );
                }
            }
            var6_9 = var11_22;
            if (PdfDocument.isTagged(this.writer) && var39_39.accessibleElement != null) {
                var2_2.closeMCBlock(var39_39.accessibleElement);
            }
            var12_24 = var8_14;
            var35_6 = var38_38;
            var11_22 = var10_15;
            var8_14 = var7_16 /* !! */ ;
            var10_15 = var6_9;
            var7_16 /* !! */  = var13_25 /* !! */ ;
            var6_9 = var12_24;
            var12_24 = var16_26;
        } while (true);
        if (var27_12) {
            var2_2.setWordSpacing(0.0f);
            var2_2.setCharacterSpacing(0.0f);
            if (var1_1.isNewlineSplit()) {
                var5_5 = 0.0f;
            }
        }
        if (var25_11 != 0) {
            var2_2.moveText(var22_21 - var2_2.getXTLM(), 0.0f);
        }
        var4_4[0] = var34_7;
        var4_4[1] = new Float(var5_5);
        return var14_18;
    }

    void writeOutlines() throws IOException {
        if (this.rootOutline.getKids().size() == 0) {
            return;
        }
        this.outlineTree(this.rootOutline);
        this.writer.addToBody((PdfObject)this.rootOutline, this.rootOutline.indirectReference());
    }

    public class Destination {
        public PdfAction action;
        public PdfDestination destination;
        public PdfIndirectReference reference;
    }

    public static class Indentation {
        float imageIndentLeft = 0.0f;
        float imageIndentRight = 0.0f;
        float indentBottom = 0.0f;
        float indentLeft = 0.0f;
        float indentRight = 0.0f;
        float indentTop = 0.0f;
        float listIndentLeft = 0.0f;
        float sectionIndentLeft = 0.0f;
        float sectionIndentRight = 0.0f;
    }

    static class PdfCatalog
    extends PdfDictionary {
        PdfWriter writer;

        PdfCatalog(PdfIndirectReference pdfIndirectReference, PdfWriter pdfWriter) {
            super(CATALOG);
            this.writer = pdfWriter;
            this.put(PdfName.PAGES, pdfIndirectReference);
        }

        void addNames(TreeMap<String, Destination> object, HashMap<String, PdfObject> hashMap, HashMap<String, PdfObject> hashMap2, PdfWriter pdfWriter) {
            if (object.isEmpty() && hashMap.isEmpty() && hashMap2.isEmpty()) {
                return;
            }
            try {
                PdfDictionary pdfDictionary = new PdfDictionary();
                if (!object.isEmpty()) {
                    HashMap<String, PdfIndirectReference> hashMap3 = new HashMap<String, PdfIndirectReference>();
                    for (Map.Entry entry : object.entrySet()) {
                        String string2 = (String)entry.getKey();
                        Destination object2 = (Destination)entry.getValue();
                        if (object2.destination == null) continue;
                        hashMap3.put(string2, object2.reference);
                    }
                    if (hashMap3.size() > 0) {
                        pdfDictionary.put(PdfName.DESTS, pdfWriter.addToBody(PdfNameTree.writeTree(hashMap3, pdfWriter)).getIndirectReference());
                    }
                }
                if (!hashMap.isEmpty()) {
                    object = PdfNameTree.writeTree(hashMap, pdfWriter);
                    pdfDictionary.put(PdfName.JAVASCRIPT, pdfWriter.addToBody((PdfObject)((Object)object)).getIndirectReference());
                }
                if (!hashMap2.isEmpty()) {
                    pdfDictionary.put(PdfName.EMBEDDEDFILES, pdfWriter.addToBody(PdfNameTree.writeTree(hashMap2, pdfWriter)).getIndirectReference());
                }
                if (pdfDictionary.size() > 0) {
                    this.put(PdfName.NAMES, pdfWriter.addToBody(pdfDictionary).getIndirectReference());
                }
                return;
            }
            catch (IOException iOException) {
                throw new ExceptionConverter(iOException);
            }
        }

        void setAdditionalActions(PdfDictionary pdfDictionary) {
            try {
                this.put(PdfName.AA, this.writer.addToBody(pdfDictionary).getIndirectReference());
                return;
            }
            catch (Exception exception) {
                throw new ExceptionConverter(exception);
            }
        }

        void setOpenAction(PdfAction pdfAction) {
            this.put(PdfName.OPENACTION, pdfAction);
        }
    }

    public static class PdfInfo
    extends PdfDictionary {
        PdfInfo() {
            this.addProducer();
            this.addCreationDate();
        }

        PdfInfo(String string2, String string3, String string4) {
            this();
            this.addTitle(string3);
            this.addSubject(string4);
            this.addAuthor(string2);
        }

        void addAuthor(String string2) {
            this.put(PdfName.AUTHOR, new PdfString(string2, "UnicodeBig"));
        }

        void addCreationDate() {
            PdfDate pdfDate = new PdfDate();
            this.put(PdfName.CREATIONDATE, pdfDate);
            this.put(PdfName.MODDATE, pdfDate);
        }

        void addCreator(String string2) {
            this.put(PdfName.CREATOR, new PdfString(string2, "UnicodeBig"));
        }

        void addKeywords(String string2) {
            this.put(PdfName.KEYWORDS, new PdfString(string2, "UnicodeBig"));
        }

        void addProducer() {
            this.put(PdfName.PRODUCER, new PdfString(Version.getInstance().getVersion()));
        }

        void addSubject(String string2) {
            this.put(PdfName.SUBJECT, new PdfString(string2, "UnicodeBig"));
        }

        void addTitle(String string2) {
            this.put(PdfName.TITLE, new PdfString(string2, "UnicodeBig"));
        }

        void addkey(String string2, String string3) {
            if (!string2.equals("Producer")) {
                if (string2.equals("CreationDate")) {
                    return;
                }
                this.put(new PdfName(string2), new PdfString(string3, "UnicodeBig"));
                return;
            }
        }
    }

}

