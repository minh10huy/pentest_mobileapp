/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf;

import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chunk;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Font;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.pdf.BaseField;
import com.itextpdf.text.pdf.BaseFont;
import com.itextpdf.text.pdf.ColumnText;
import com.itextpdf.text.pdf.FontSelector;
import com.itextpdf.text.pdf.GrayColor;
import com.itextpdf.text.pdf.PdfAnnotation;
import com.itextpdf.text.pdf.PdfAppearance;
import com.itextpdf.text.pdf.PdfArray;
import com.itextpdf.text.pdf.PdfBorderDictionary;
import com.itextpdf.text.pdf.PdfContentByte;
import com.itextpdf.text.pdf.PdfDashPattern;
import com.itextpdf.text.pdf.PdfFormField;
import com.itextpdf.text.pdf.PdfName;
import com.itextpdf.text.pdf.PdfNumber;
import com.itextpdf.text.pdf.PdfObject;
import com.itextpdf.text.pdf.PdfString;
import com.itextpdf.text.pdf.PdfTemplate;
import com.itextpdf.text.pdf.PdfWriter;
import java.io.IOException;
import java.io.Serializable;
import java.lang.reflect.Array;
import java.util.ArrayList;
import java.util.Collection;

public class TextField
extends BaseField {
    private String[] choiceExports;
    private ArrayList<Integer> choiceSelections = new ArrayList();
    private String[] choices;
    private String defaultText;
    private BaseFont extensionFont;
    private float extraMarginLeft;
    private float extraMarginTop;
    private ArrayList<BaseFont> substitutionFonts;
    private int topFirst;
    private int visibleTopChoice = -1;

    public TextField(PdfWriter pdfWriter, Rectangle rectangle, String string2) {
        super(pdfWriter, rectangle, string2);
    }

    private static void changeFontSize(Phrase phrase, float f) {
        for (int i = 0; i < phrase.size(); ++i) {
            ((Chunk)phrase.get(i)).getFont().setSize(f);
        }
    }

    private static boolean checkRTL(String arrc) {
        if (arrc != null) {
            if (arrc.length() == 0) {
                return false;
            }
            arrc = arrc.toCharArray();
            for (int i = 0; i < arrc.length; ++i) {
                char c = arrc[i];
                if (c < '\u0590' || c >= '\u0780') continue;
                return true;
            }
            return false;
        }
        return false;
    }

    private Phrase composePhrase(String string2, BaseFont baseFont, BaseColor baseColor, float f) {
        if (this.extensionFont == null && (this.substitutionFonts == null || this.substitutionFonts.isEmpty())) {
            return new Phrase(new Chunk(string2, new Font(baseFont, f, 0, baseColor)));
        }
        FontSelector fontSelector = new FontSelector();
        fontSelector.addFont(new Font(baseFont, f, 0, baseColor));
        if (this.extensionFont != null) {
            fontSelector.addFont(new Font(this.extensionFont, f, 0, baseColor));
        }
        if (this.substitutionFonts != null) {
            for (int i = 0; i < this.substitutionFonts.size(); ++i) {
                fontSelector.addFont(new Font(this.substitutionFonts.get(i), f, 0, baseColor));
            }
        }
        return fontSelector.process(string2);
    }

    private int getTopChoice() {
        Serializable serializable = this.choiceSelections;
        int n = 0;
        if (serializable != null) {
            if (this.choiceSelections.size() == 0) {
                return 0;
            }
            serializable = this.choiceSelections.get(0);
            if (serializable == null) {
                return 0;
            }
            if (this.choices != null) {
                if (this.visibleTopChoice != -1) {
                    return this.visibleTopChoice;
                }
                n = Math.max(0, Math.min(serializable.intValue(), this.choices.length));
            }
            return n;
        }
        return 0;
    }

    public static String obfuscatePassword(String string2) {
        char[] arrc = new char[string2.length()];
        for (int i = 0; i < string2.length(); ++i) {
            arrc[i] = 42;
        }
        return new String(arrc);
    }

    public static String removeCRLF(String arrc) {
        if (arrc.indexOf(10) < 0 && arrc.indexOf(13) < 0) {
            return arrc;
        }
        arrc = arrc.toCharArray();
        StringBuffer stringBuffer = new StringBuffer(arrc.length);
        int n = 0;
        while (n < arrc.length) {
            int n2;
            char c = arrc[n];
            if (c == '\n') {
                stringBuffer.append(' ');
                n2 = n;
            } else if (c == '\r') {
                stringBuffer.append(' ');
                n2 = n;
                if (n < arrc.length - 1) {
                    int n3 = n + 1;
                    n2 = n;
                    if (arrc[n3] == '\n') {
                        n2 = n3;
                    }
                }
            } else {
                stringBuffer.append(c);
                n2 = n;
            }
            n = n2 + 1;
        }
        return stringBuffer.toString();
    }

    private void writeMultipleValues(PdfFormField pdfFormField, String[][] arrstring) {
        PdfArray pdfArray = new PdfArray();
        PdfArray pdfArray2 = new PdfArray();
        for (int i = 0; i < this.choiceSelections.size(); ++i) {
            int n = this.choiceSelections.get(i);
            pdfArray.add(new PdfNumber(n));
            if (arrstring != null) {
                pdfArray2.add(new PdfString(arrstring[n][0]));
                continue;
            }
            if (this.choices == null) continue;
            pdfArray2.add(new PdfString(this.choices[n]));
        }
        pdfFormField.put(PdfName.V, pdfArray2);
        pdfFormField.put(PdfName.I, pdfArray);
    }

    public void addChoiceSelection(int n) {
        if ((this.options & 2097152) != 0) {
            this.choiceSelections.add(n);
        }
    }

    public PdfAppearance getAppearance() throws IOException, DocumentException {
        PdfAppearance pdfAppearance = this.getBorderAppearance();
        pdfAppearance.beginVariableText();
        if (this.text != null && this.text.length() != 0) {
            int n = this.borderStyle != 2 && this.borderStyle != 3 ? 0 : 1;
            float f = this.box.getHeight() - this.borderWidth * 2.0f - this.extraMarginTop;
            float f2 = this.borderWidth;
            float f3 = f;
            float f4 = f2;
            if (n != 0) {
                f3 = f - this.borderWidth * 2.0f;
                f4 = f2 * 2.0f;
            }
            float f5 = Math.max(f4, 1.0f);
            f = Math.min(f4, f5);
            pdfAppearance.saveState();
            f4 = this.box.getWidth();
            float f6 = f * 2.0f;
            pdfAppearance.rectangle(f, f, f4 - f6, this.box.getHeight() - f6);
            pdfAppearance.clip();
            pdfAppearance.newPath();
            Object object = (this.options & 8192) != 0 ? TextField.obfuscatePassword(this.text) : ((this.options & 4096) == 0 ? TextField.removeCRLF(this.text) : this.text);
            Object object2 = this.getRealFont();
            Object object3 = this.textColor == null ? GrayColor.GRAYBLACK : this.textColor;
            n = TextField.checkRTL((String)object) ? 2 : 1;
            f4 = this.fontSize;
            object3 = this.composePhrase((String)object, (BaseFont)object2, (BaseColor)object3, f4);
            if ((this.options & 4096) != 0) {
                f6 = this.box.getWidth();
                float f7 = this.extraMarginLeft;
                f = object2.getFontDescriptor(8, 1.0f) - object2.getFontDescriptor(6, 1.0f);
                object = new ColumnText(null);
                f2 = f4;
                if (f4 == 0.0f) {
                    f4 = f2 = f3 / f;
                    if (f2 > 4.0f) {
                        f4 = f2;
                        if (f2 > 12.0f) {
                            f4 = 12.0f;
                        }
                        float f8 = Math.max((f4 - 4.0f) / 10.0f, 0.2f);
                        object.setSimpleColumn(0.0f, - f3, f6 - f5 * 4.0f - f7, 0.0f);
                        object.setAlignment(this.alignment);
                        object.setRunDirection(n);
                        f2 = f4;
                        do {
                            f4 = f2;
                            if (f2 <= 4.0f) break;
                            object.setYLine(0.0f);
                            TextField.changeFontSize((Phrase)object3, f2);
                            object.setText((Phrase)object3);
                            object.setLeading(f * f2);
                            if ((object.go(true) & 2) == 0) {
                                f4 = f2;
                                break;
                            }
                            f2 -= f8;
                        } while (true);
                    }
                    f2 = f4;
                    if (f4 < 4.0f) {
                        f2 = 4.0f;
                    }
                }
                TextField.changeFontSize((Phrase)object3, f2);
                object.setCanvas(pdfAppearance);
                f4 = f * f2;
                f2 = object2.getFontDescriptor(8, f2);
                f = this.extraMarginLeft;
                f6 = f5 * 2.0f;
                object.setSimpleColumn(f + f6, -20000.0f, this.box.getWidth() - f6, f3 + f5 - f2 + f4);
                object.setLeading(f4);
                object.setAlignment(this.alignment);
                object.setRunDirection(n);
                object.setText((Phrase)object3);
                object.go();
            } else {
                if (f4 == 0.0f) {
                    f2 = f3 / (object2.getFontDescriptor(7, 1.0f) - object2.getFontDescriptor(6, 1.0f));
                    TextField.changeFontSize((Phrase)object3, 1.0f);
                    f4 = ColumnText.getWidth((Phrase)object3, n, 0);
                    if (f4 != 0.0f) {
                        f2 = Math.min(f2, (this.box.getWidth() - this.extraMarginLeft - f5 * 4.0f) / f4);
                    }
                    f4 = f2;
                    if (f2 < 4.0f) {
                        f4 = 4.0f;
                    }
                }
                TextField.changeFontSize((Phrase)object3, f4);
                f2 = f3 = (this.box.getHeight() - f6 - object2.getFontDescriptor(1, f4)) / 2.0f + f;
                if (f3 < f) {
                    f2 = f;
                }
                f3 = f2;
                if (f2 - f < - object2.getFontDescriptor(3, f4)) {
                    f3 = Math.min(- object2.getFontDescriptor(3, f4) + f, Math.max(f2, this.box.getHeight() - f - object2.getFontDescriptor(1, f4)));
                }
                if ((this.options & 16777216) != 0 && this.maxCharacterLength > 0) {
                    n = Math.min(this.maxCharacterLength, object.length());
                    n = this.alignment == 2 ? this.maxCharacterLength - n : (this.alignment == 1 ? (this.maxCharacterLength - n) / 2 : 0);
                    f = (this.box.getWidth() - this.extraMarginLeft) / (float)this.maxCharacterLength;
                    f2 = f / 2.0f + (float)n * f;
                    if (this.textColor == null) {
                        pdfAppearance.setGrayFill(0.0f);
                    } else {
                        pdfAppearance.setColorFill(this.textColor);
                    }
                    pdfAppearance.beginText();
                    for (n = 0; n < object3.size(); ++n) {
                        object2 = (Chunk)object3.get(n);
                        object = object2.getFont().getBaseFont();
                        pdfAppearance.setFontAndSize((BaseFont)object, f4);
                        object2 = object2.append("");
                        int n2 = 0;
                        while (n2 < object2.length()) {
                            int n3 = n2 + 1;
                            String string2 = object2.substring(n2, n3);
                            f5 = object.getWidthPoint(string2, f4);
                            pdfAppearance.setTextMatrix(this.extraMarginLeft + f2 - f5 / 2.0f, f3 - this.extraMarginTop);
                            pdfAppearance.showText(string2);
                            f2 += f;
                            n2 = n3;
                        }
                    }
                    pdfAppearance.endText();
                } else {
                    switch (this.alignment) {
                        default: {
                            f4 = this.extraMarginLeft + f5 * 2.0f;
                            break;
                        }
                        case 2: {
                            f4 = this.extraMarginLeft + this.box.getWidth() - f5 * 2.0f;
                            break;
                        }
                        case 1: {
                            f4 = this.extraMarginLeft + this.box.getWidth() / 2.0f;
                            break;
                        }
                    }
                    ColumnText.showTextAligned(pdfAppearance, this.alignment, (Phrase)object3, f4, f3 - this.extraMarginTop, 0.0f, n, 0);
                }
            }
            pdfAppearance.restoreState();
            pdfAppearance.endVariableText();
            return pdfAppearance;
        }
        pdfAppearance.endVariableText();
        return pdfAppearance;
    }

    public String[] getChoiceExports() {
        return this.choiceExports;
    }

    /*
     * Enabled aggressive block sorting
     */
    protected PdfFormField getChoiceField(boolean bl) throws IOException, DocumentException {
        Object object;
        String[][] arrstring;
        this.options &= -16781313;
        Object object2 = object = this.choices;
        if (object == null) {
            object2 = new String[]{};
        }
        int n = this.getTopChoice();
        if (((String[])object2).length > 0 && n >= 0) {
            this.text = object2[n];
        }
        if (this.text == null) {
            this.text = "";
        }
        String[][] arrstring2 = null;
        if (this.choiceExports == null) {
            if (bl) {
                object = PdfFormField.createList(this.writer, (String[])object2, n);
            } else {
                object = this.writer;
                boolean bl2 = (262144 & this.options) != 0;
                object = PdfFormField.createCombo((PdfWriter)object, bl2, (String[])object2, n);
            }
            arrstring = arrstring2;
        } else {
            int n2;
            arrstring = (String[][])Array.newInstance(String.class, ((String[])object2).length, 2);
            for (n2 = 0; n2 < arrstring.length; ++n2) {
                String string2;
                object = arrstring[n2];
                String[] arrstring3 = arrstring[n2];
                arrstring3[1] = string2 = object2[n2];
                object[0] = string2;
            }
            int n3 = Math.min(((String[])object2).length, this.choiceExports.length);
            for (n2 = 0; n2 < n3; ++n2) {
                if (this.choiceExports[n2] == null) continue;
                arrstring[n2][0] = this.choiceExports[n2];
            }
            if (bl) {
                object = PdfFormField.createList(this.writer, arrstring, n);
            } else {
                object = this.writer;
                boolean bl3 = (262144 & this.options) != 0;
                object = PdfFormField.createCombo((PdfWriter)object, bl3, arrstring, n);
            }
        }
        object.setWidget(this.box, PdfAnnotation.HIGHLIGHT_INVERT);
        if (this.rotation != 0) {
            object.setMKRotation(this.rotation);
        }
        if (this.fieldName != null) {
            object.setFieldName(this.fieldName);
            if (((String[])object2).length > 0) {
                if (arrstring != null) {
                    if (this.choiceSelections.size() < 2) {
                        object.setValueAsString(arrstring[n][0]);
                        object.setDefaultValueAsString(arrstring[n][0]);
                    } else {
                        this.writeMultipleValues((PdfFormField)object, arrstring);
                    }
                } else if (this.choiceSelections.size() < 2) {
                    object.setValueAsString(this.text);
                    object.setDefaultValueAsString(this.text);
                } else {
                    this.writeMultipleValues((PdfFormField)object, arrstring2);
                }
            }
            if ((this.options & 1) != 0) {
                object.setFieldFlags(1);
            }
            if ((this.options & 2) != 0) {
                object.setFieldFlags(2);
            }
            if ((this.options & 4194304) != 0) {
                object.setFieldFlags(4194304);
            }
            if ((this.options & 2097152) != 0) {
                object.setFieldFlags(2097152);
            }
        }
        object.setBorderStyle(new PdfBorderDictionary(this.borderWidth, this.borderStyle, new PdfDashPattern(3.0f)));
        if (bl) {
            arrstring = this.getListAppearance();
            object2 = arrstring;
            if (this.topFirst > 0) {
                object.put(PdfName.TI, new PdfNumber(this.topFirst));
                object2 = arrstring;
            }
        } else {
            object2 = this.getAppearance();
        }
        object.setAppearance(PdfAnnotation.APPEARANCE_NORMAL, (PdfTemplate)object2);
        object2 = (PdfAppearance)object2.getDuplicate();
        object2.setFontAndSize(this.getRealFont(), this.fontSize);
        if (this.textColor == null) {
            object2.setGrayFill(0.0f);
        } else {
            object2.setColorFill(this.textColor);
        }
        object.setDefaultAppearanceString((PdfContentByte)object2);
        if (this.borderColor != null) {
            object.setMKBorderColor(this.borderColor);
        }
        if (this.backgroundColor != null) {
            object.setMKBackgroundColor(this.backgroundColor);
        }
        switch (this.visibility) {
            default: {
                object.setFlags(4);
                return object;
            }
            case 3: {
                object.setFlags(36);
                return object;
            }
            case 1: {
                object.setFlags(6);
            }
            case 2: 
        }
        return object;
    }

    public int getChoiceSelection() {
        return this.getTopChoice();
    }

    public ArrayList<Integer> getChoiceSelections() {
        return this.choiceSelections;
    }

    public String[] getChoices() {
        return this.choices;
    }

    public PdfFormField getComboField() throws IOException, DocumentException {
        return this.getChoiceField(false);
    }

    public String getDefaultText() {
        return this.defaultText;
    }

    public BaseFont getExtensionFont() {
        return this.extensionFont;
    }

    PdfAppearance getListAppearance() throws IOException, DocumentException {
        PdfAppearance pdfAppearance = this.getBorderAppearance();
        if (this.choices != null) {
            int n;
            if (this.choices.length == 0) {
                return pdfAppearance;
            }
            pdfAppearance.beginVariableText();
            int n2 = this.getTopChoice();
            BaseFont baseFont = this.getRealFont();
            float f = this.fontSize;
            if (f == 0.0f) {
                f = 12.0f;
            }
            int n3 = this.borderStyle != 2 && this.borderStyle != 3 ? 0 : 1;
            float f2 = this.box.getHeight() - this.borderWidth * 2.0f;
            float f3 = this.borderWidth;
            float f4 = f2;
            float f5 = f3;
            if (n3 != 0) {
                f4 = f2 - this.borderWidth * 2.0f;
                f5 = f3 * 2.0f;
            }
            f3 = baseFont.getFontDescriptor(8, f) - baseFont.getFontDescriptor(6, f);
            n3 = n = (int)(f4 / f3) + 1 + n2;
            if (n > this.choices.length) {
                n3 = this.choices.length;
            }
            this.topFirst = n2;
            pdfAppearance.saveState();
            float f6 = this.box.getWidth();
            f2 = f5 * 2.0f;
            pdfAppearance.rectangle(f5, f5, f6 - f2, this.box.getHeight() - f2);
            pdfAppearance.clip();
            pdfAppearance.newPath();
            BaseColor baseColor = this.textColor == null ? GrayColor.GRAYBLACK : this.textColor;
            pdfAppearance.setColorFill(new BaseColor(10, 36, 106));
            for (n = 0; n < this.choiceSelections.size(); ++n) {
                int n4 = this.choiceSelections.get(n);
                if (n4 < n2 || n4 > n3) continue;
                pdfAppearance.rectangle(f5, f5 + f4 - (float)(n4 - n2 + 1) * f3, this.box.getWidth() - f2, f3);
                pdfAppearance.fill();
            }
            f6 = baseFont.getFontDescriptor(8, f);
            n = n2;
            f5 = f5 + f4 - f6;
            while (n < n3) {
                Object object = this.choices[n];
                n2 = TextField.checkRTL((String)object) ? 2 : 1;
                String string2 = TextField.removeCRLF((String)object);
                object = this.choiceSelections.contains(n) ? GrayColor.GRAYWHITE : baseColor;
                ColumnText.showTextAligned(pdfAppearance, 0, this.composePhrase(string2, baseFont, (BaseColor)object, f), f2, f5, 0.0f, n2, 0);
                ++n;
                f5 -= f3;
            }
            pdfAppearance.restoreState();
            pdfAppearance.endVariableText();
            return pdfAppearance;
        }
        return pdfAppearance;
    }

    public PdfFormField getListField() throws IOException, DocumentException {
        return this.getChoiceField(true);
    }

    public ArrayList<BaseFont> getSubstitutionFonts() {
        return this.substitutionFonts;
    }

    public PdfFormField getTextField() throws IOException, DocumentException {
        if (this.maxCharacterLength <= 0) {
            this.options &= -16777217;
        }
        if ((this.options & 16777216) != 0) {
            this.options &= -4097;
        }
        PdfFormField pdfFormField = PdfFormField.createTextField(this.writer, false, false, this.maxCharacterLength);
        pdfFormField.setWidget(this.box, PdfAnnotation.HIGHLIGHT_INVERT);
        switch (this.alignment) {
            default: {
                break;
            }
            case 2: {
                pdfFormField.setQuadding(2);
                break;
            }
            case 1: {
                pdfFormField.setQuadding(1);
            }
        }
        if (this.rotation != 0) {
            pdfFormField.setMKRotation(this.rotation);
        }
        if (this.fieldName != null) {
            pdfFormField.setFieldName(this.fieldName);
            if (!"".equals(this.text)) {
                pdfFormField.setValueAsString(this.text);
            }
            if (this.defaultText != null) {
                pdfFormField.setDefaultValueAsString(this.defaultText);
            }
            if ((this.options & 1) != 0) {
                pdfFormField.setFieldFlags(1);
            }
            if ((this.options & 2) != 0) {
                pdfFormField.setFieldFlags(2);
            }
            if ((this.options & 4096) != 0) {
                pdfFormField.setFieldFlags(4096);
            }
            if ((this.options & 8388608) != 0) {
                pdfFormField.setFieldFlags(8388608);
            }
            if ((this.options & 8192) != 0) {
                pdfFormField.setFieldFlags(8192);
            }
            if ((this.options & 1048576) != 0) {
                pdfFormField.setFieldFlags(1048576);
            }
            if ((this.options & 4194304) != 0) {
                pdfFormField.setFieldFlags(4194304);
            }
            if ((this.options & 16777216) != 0) {
                pdfFormField.setFieldFlags(16777216);
            }
        }
        pdfFormField.setBorderStyle(new PdfBorderDictionary(this.borderWidth, this.borderStyle, new PdfDashPattern(3.0f)));
        PdfAppearance pdfAppearance = this.getAppearance();
        pdfFormField.setAppearance(PdfAnnotation.APPEARANCE_NORMAL, pdfAppearance);
        pdfAppearance = (PdfAppearance)pdfAppearance.getDuplicate();
        pdfAppearance.setFontAndSize(this.getRealFont(), this.fontSize);
        if (this.textColor == null) {
            pdfAppearance.setGrayFill(0.0f);
        } else {
            pdfAppearance.setColorFill(this.textColor);
        }
        pdfFormField.setDefaultAppearanceString(pdfAppearance);
        if (this.borderColor != null) {
            pdfFormField.setMKBorderColor(this.borderColor);
        }
        if (this.backgroundColor != null) {
            pdfFormField.setMKBackgroundColor(this.backgroundColor);
        }
        switch (this.visibility) {
            default: {
                pdfFormField.setFlags(4);
                return pdfFormField;
            }
            case 3: {
                pdfFormField.setFlags(36);
                return pdfFormField;
            }
            case 1: {
                pdfFormField.setFlags(6);
            }
            case 2: 
        }
        return pdfFormField;
    }

    int getTopFirst() {
        return this.topFirst;
    }

    public int getVisibleTopChoice() {
        return this.visibleTopChoice;
    }

    public void setChoiceExports(String[] arrstring) {
        this.choiceExports = arrstring;
    }

    public void setChoiceSelection(int n) {
        this.choiceSelections = new ArrayList();
        this.choiceSelections.add(n);
    }

    public void setChoiceSelections(ArrayList<Integer> arrayList) {
        if (arrayList != null) {
            this.choiceSelections = new ArrayList<Integer>(arrayList);
            if (this.choiceSelections.size() > 1 && (this.options & 2097152) == 0) {
                while (this.choiceSelections.size() > 1) {
                    this.choiceSelections.remove(1);
                }
            }
        } else {
            this.choiceSelections.clear();
        }
    }

    public void setChoices(String[] arrstring) {
        this.choices = arrstring;
    }

    public void setDefaultText(String string2) {
        this.defaultText = string2;
    }

    public void setExtensionFont(BaseFont baseFont) {
        this.extensionFont = baseFont;
    }

    public void setExtraMargin(float f, float f2) {
        this.extraMarginLeft = f;
        this.extraMarginTop = f2;
    }

    public void setSubstitutionFonts(ArrayList<BaseFont> arrayList) {
        this.substitutionFonts = arrayList;
    }

    public void setVisibleTopChoice(int n) {
        if (n < 0) {
            return;
        }
        if (this.choices != null && n < this.choices.length) {
            this.visibleTopChoice = n;
        }
    }
}

