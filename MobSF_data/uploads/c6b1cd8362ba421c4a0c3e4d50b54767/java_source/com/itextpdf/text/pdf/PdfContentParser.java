/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf;

import com.itextpdf.text.error_messages.MessageLocalization;
import com.itextpdf.text.pdf.PRTokeniser;
import com.itextpdf.text.pdf.PdfArray;
import com.itextpdf.text.pdf.PdfDictionary;
import com.itextpdf.text.pdf.PdfLiteral;
import com.itextpdf.text.pdf.PdfName;
import com.itextpdf.text.pdf.PdfNumber;
import com.itextpdf.text.pdf.PdfObject;
import com.itextpdf.text.pdf.PdfString;
import java.io.IOException;
import java.util.ArrayList;

public class PdfContentParser {
    public static final int COMMAND_TYPE = 200;
    private PRTokeniser tokeniser;

    public PdfContentParser(PRTokeniser pRTokeniser) {
        this.tokeniser = pRTokeniser;
    }

    public PRTokeniser getTokeniser() {
        return this.tokeniser;
    }

    public boolean nextValidToken() throws IOException {
        while (this.tokeniser.nextToken()) {
            if (this.tokeniser.getTokenType() == PRTokeniser.TokenType.COMMENT) continue;
            return true;
        }
        return false;
    }

    public ArrayList<PdfObject> parse(ArrayList<PdfObject> arrayList) throws IOException {
        PdfObject pdfObject;
        if (arrayList == null) {
            arrayList = new ArrayList();
        } else {
            arrayList.clear();
        }
        while ((pdfObject = this.readPRObject()) != null) {
            arrayList.add(pdfObject);
            if (pdfObject.type() != 200) continue;
        }
        return arrayList;
    }

    public PdfArray readArray() throws IOException {
        PdfArray pdfArray = new PdfArray();
        PdfObject pdfObject;
        int n;
        while ((n = - (pdfObject = this.readPRObject()).type()) != PRTokeniser.TokenType.END_ARRAY.ordinal()) {
            if (n == PRTokeniser.TokenType.END_DIC.ordinal()) {
                throw new IOException(MessageLocalization.getComposedMessage("unexpected.gt.gt", new Object[0]));
            }
            pdfArray.add(pdfObject);
        }
        return pdfArray;
    }

    public PdfDictionary readDictionary() throws IOException {
        PdfDictionary pdfDictionary = new PdfDictionary();
        do {
            if (!this.nextValidToken()) {
                throw new IOException(MessageLocalization.getComposedMessage("unexpected.end.of.file", new Object[0]));
            }
            if (this.tokeniser.getTokenType() == PRTokeniser.TokenType.END_DIC) {
                return pdfDictionary;
            }
            if (this.tokeniser.getTokenType() == PRTokeniser.TokenType.OTHER && "def".equals(this.tokeniser.getStringValue())) continue;
            if (this.tokeniser.getTokenType() != PRTokeniser.TokenType.NAME) {
                throw new IOException(MessageLocalization.getComposedMessage("dictionary.key.1.is.not.a.name", this.tokeniser.getStringValue()));
            }
            PdfName pdfName = new PdfName(this.tokeniser.getStringValue(), false);
            PdfObject pdfObject = this.readPRObject();
            int n = - pdfObject.type();
            if (n == PRTokeniser.TokenType.END_DIC.ordinal()) {
                throw new IOException(MessageLocalization.getComposedMessage("unexpected.gt.gt", new Object[0]));
            }
            if (n == PRTokeniser.TokenType.END_ARRAY.ordinal()) {
                throw new IOException(MessageLocalization.getComposedMessage("unexpected.close.bracket", new Object[0]));
            }
            pdfDictionary.put(pdfName, pdfObject);
        } while (true);
    }

    public PdfObject readPRObject() throws IOException {
        if (!this.nextValidToken()) {
            return null;
        }
        PRTokeniser.TokenType tokenType = this.tokeniser.getTokenType();
        switch (.$SwitchMap$com$itextpdf$text$pdf$PRTokeniser$TokenType[tokenType.ordinal()]) {
            default: {
                return new PdfLiteral(- tokenType.ordinal(), this.tokeniser.getStringValue());
            }
            case 6: {
                return new PdfLiteral(200, this.tokeniser.getStringValue());
            }
            case 5: {
                return new PdfNumber(this.tokeniser.getStringValue());
            }
            case 4: {
                return new PdfName(this.tokeniser.getStringValue(), false);
            }
            case 3: {
                return new PdfString(this.tokeniser.getStringValue(), null).setHexWriting(this.tokeniser.isHexString());
            }
            case 2: {
                return this.readArray();
            }
            case 1: 
        }
        return this.readDictionary();
    }

    public void setTokeniser(PRTokeniser pRTokeniser) {
        this.tokeniser = pRTokeniser;
    }

}

