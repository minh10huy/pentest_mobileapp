/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf;

import com.itextpdf.text.error_messages.MessageLocalization;
import com.itextpdf.text.pdf.PdfArray;
import com.itextpdf.text.pdf.PdfDictionary;
import com.itextpdf.text.pdf.PdfIndirectObject;
import com.itextpdf.text.pdf.PdfIndirectReference;
import com.itextpdf.text.pdf.PdfName;
import com.itextpdf.text.pdf.PdfNumber;
import com.itextpdf.text.pdf.PdfOCG;
import com.itextpdf.text.pdf.PdfObject;
import com.itextpdf.text.pdf.PdfStamperImp;
import com.itextpdf.text.pdf.PdfString;
import com.itextpdf.text.pdf.PdfWriter;
import java.io.IOException;
import java.util.ArrayList;

public class PdfLayer
extends PdfDictionary
implements PdfOCG {
    protected ArrayList<PdfLayer> children;
    private boolean on = true;
    private boolean onPanel = true;
    protected PdfLayer parent;
    protected PdfIndirectReference ref;
    protected String title;

    PdfLayer(String string2) {
        this.title = string2;
    }

    public PdfLayer(String string2, PdfWriter pdfWriter) throws IOException {
        super(PdfName.OCG);
        this.setName(string2);
        this.ref = pdfWriter instanceof PdfStamperImp ? pdfWriter.addToBody(this).getIndirectReference() : pdfWriter.getPdfIndirectReference();
        pdfWriter.registerLayer(this);
    }

    public static PdfLayer createTitle(String object, PdfWriter pdfWriter) {
        if (object == null) {
            throw new NullPointerException(MessageLocalization.getComposedMessage("title.cannot.be.null", new Object[0]));
        }
        object = new PdfLayer((String)object);
        pdfWriter.registerLayer((PdfOCG)object);
        return object;
    }

    private PdfDictionary getUsage() {
        PdfDictionary pdfDictionary;
        PdfDictionary pdfDictionary2 = pdfDictionary = this.getAsDict(PdfName.USAGE);
        if (pdfDictionary == null) {
            pdfDictionary2 = new PdfDictionary();
            this.put(PdfName.USAGE, pdfDictionary2);
        }
        return pdfDictionary2;
    }

    public void addChild(PdfLayer pdfLayer) {
        if (pdfLayer.parent != null) {
            throw new IllegalArgumentException(MessageLocalization.getComposedMessage("the.layer.1.already.has.a.parent", pdfLayer.getAsString(PdfName.NAME).toUnicodeString()));
        }
        pdfLayer.parent = this;
        if (this.children == null) {
            this.children = new ArrayList();
        }
        this.children.add(pdfLayer);
    }

    public ArrayList<PdfLayer> getChildren() {
        return this.children;
    }

    public PdfLayer getParent() {
        return this.parent;
    }

    @Override
    public PdfObject getPdfObject() {
        return this;
    }

    @Override
    public PdfIndirectReference getRef() {
        return this.ref;
    }

    String getTitle() {
        return this.title;
    }

    public boolean isOn() {
        return this.on;
    }

    public boolean isOnPanel() {
        return this.onPanel;
    }

    public void setCreatorInfo(String string2, String string3) {
        PdfDictionary pdfDictionary = this.getUsage();
        PdfDictionary pdfDictionary2 = new PdfDictionary();
        pdfDictionary2.put(PdfName.CREATOR, new PdfString(string2, "UnicodeBig"));
        pdfDictionary2.put(PdfName.SUBTYPE, new PdfName(string3));
        pdfDictionary.put(PdfName.CREATORINFO, pdfDictionary2);
    }

    public void setExport(boolean bl) {
        PdfDictionary pdfDictionary = this.getUsage();
        PdfDictionary pdfDictionary2 = new PdfDictionary();
        PdfName pdfName = PdfName.EXPORTSTATE;
        PdfName pdfName2 = bl ? PdfName.ON : PdfName.OFF;
        pdfDictionary2.put(pdfName, pdfName2);
        pdfDictionary.put(PdfName.EXPORT, pdfDictionary2);
    }

    public void setLanguage(String string2, boolean bl) {
        PdfDictionary pdfDictionary = this.getUsage();
        PdfDictionary pdfDictionary2 = new PdfDictionary();
        pdfDictionary2.put(PdfName.LANG, new PdfString(string2, "UnicodeBig"));
        if (bl) {
            pdfDictionary2.put(PdfName.PREFERRED, PdfName.ON);
        }
        pdfDictionary.put(PdfName.LANGUAGE, pdfDictionary2);
    }

    public void setName(String string2) {
        this.put(PdfName.NAME, new PdfString(string2, "UnicodeBig"));
    }

    public void setOn(boolean bl) {
        this.on = bl;
    }

    public void setOnPanel(boolean bl) {
        this.onPanel = bl;
    }

    public void setPageElement(String string2) {
        PdfDictionary pdfDictionary = this.getUsage();
        PdfDictionary pdfDictionary2 = new PdfDictionary();
        pdfDictionary2.put(PdfName.SUBTYPE, new PdfName(string2));
        pdfDictionary.put(PdfName.PAGEELEMENT, pdfDictionary2);
    }

    public void setPrint(String object, boolean bl) {
        PdfDictionary pdfDictionary = this.getUsage();
        PdfDictionary pdfDictionary2 = new PdfDictionary();
        pdfDictionary2.put(PdfName.SUBTYPE, new PdfName((String)object));
        PdfName pdfName = PdfName.PRINTSTATE;
        object = bl ? PdfName.ON : PdfName.OFF;
        pdfDictionary2.put(pdfName, (PdfObject)object);
        pdfDictionary.put(PdfName.PRINT, pdfDictionary2);
    }

    void setRef(PdfIndirectReference pdfIndirectReference) {
        this.ref = pdfIndirectReference;
    }

    public /* varargs */ void setUser(String object, String ... arrstring) {
        PdfDictionary pdfDictionary = this.getUsage();
        PdfDictionary pdfDictionary2 = new PdfDictionary();
        pdfDictionary2.put(PdfName.TYPE, new PdfName((String)object));
        object = new PdfArray();
        int n = arrstring.length;
        for (int i = 0; i < n; ++i) {
            object.add(new PdfString(arrstring[i], "UnicodeBig"));
        }
        pdfDictionary.put(PdfName.NAME, (PdfObject)object);
        pdfDictionary.put(PdfName.USER, pdfDictionary2);
    }

    public void setView(boolean bl) {
        PdfDictionary pdfDictionary = this.getUsage();
        PdfDictionary pdfDictionary2 = new PdfDictionary();
        PdfName pdfName = PdfName.VIEWSTATE;
        PdfName pdfName2 = bl ? PdfName.ON : PdfName.OFF;
        pdfDictionary2.put(pdfName, pdfName2);
        pdfDictionary.put(PdfName.VIEW, pdfDictionary2);
    }

    public void setZoom(float f, float f2) {
        if (f <= 0.0f && f2 < 0.0f) {
            return;
        }
        PdfDictionary pdfDictionary = this.getUsage();
        PdfDictionary pdfDictionary2 = new PdfDictionary();
        if (f > 0.0f) {
            pdfDictionary2.put(PdfName.MIN_LOWER_CASE, new PdfNumber(f));
        }
        if (f2 >= 0.0f) {
            pdfDictionary2.put(PdfName.MAX_LOWER_CASE, new PdfNumber(f2));
        }
        pdfDictionary.put(PdfName.ZOOM, pdfDictionary2);
    }
}

