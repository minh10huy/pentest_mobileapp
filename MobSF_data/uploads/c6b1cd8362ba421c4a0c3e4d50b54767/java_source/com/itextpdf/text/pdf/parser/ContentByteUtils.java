/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf.parser;

import com.itextpdf.text.pdf.PRIndirectReference;
import com.itextpdf.text.pdf.PRStream;
import com.itextpdf.text.pdf.PdfArray;
import com.itextpdf.text.pdf.PdfDictionary;
import com.itextpdf.text.pdf.PdfName;
import com.itextpdf.text.pdf.PdfObject;
import com.itextpdf.text.pdf.PdfReader;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.ListIterator;

public class ContentByteUtils {
    private ContentByteUtils() {
    }

    public static byte[] getContentBytesForPage(PdfReader object, int n) throws IOException {
        if ((object = object.getPageN(n).get(PdfName.CONTENTS)) == null) {
            return new byte[0];
        }
        return ContentByteUtils.getContentBytesFromContentObject((PdfObject)object);
    }

    public static byte[] getContentBytesFromContentObject(PdfObject object) throws IOException {
        int n = object.type();
        if (n != 5) {
            if (n != 7) {
                if (n != 10) {
                    StringBuilder stringBuilder = new StringBuilder();
                    stringBuilder.append("Unable to handle Content of type ");
                    stringBuilder.append(object.getClass());
                    throw new IllegalStateException(stringBuilder.toString());
                }
                return ContentByteUtils.getContentBytesFromContentObject(PdfReader.getPdfObjectRelease((PRIndirectReference)object));
            }
            return PdfReader.getStreamBytes((PRStream)PdfReader.getPdfObjectRelease((PdfObject)object));
        }
        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        object = ((PdfArray)object).listIterator();
        while (object.hasNext()) {
            byteArrayOutputStream.write(ContentByteUtils.getContentBytesFromContentObject((PdfObject)object.next()));
            byteArrayOutputStream.write(32);
        }
        return byteArrayOutputStream.toByteArray();
    }
}

