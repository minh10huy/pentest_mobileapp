/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf;

import com.itextpdf.text.BadElementException;
import com.itextpdf.text.ExceptionConverter;
import com.itextpdf.text.Image;
import com.itextpdf.text.pdf.codec.CCITTG4Encoder;
import com.itextpdf.text.pdf.qrcode.ByteMatrix;
import com.itextpdf.text.pdf.qrcode.EncodeHintType;
import com.itextpdf.text.pdf.qrcode.QRCodeWriter;
import com.itextpdf.text.pdf.qrcode.WriterException;
import java.util.Map;

public class BarcodeQRCode {
    ByteMatrix bm;

    public BarcodeQRCode(String string2, int n, int n2, Map<EncodeHintType, Object> map) {
        try {
            this.bm = new QRCodeWriter().encode(string2, n, n2, map);
            return;
        }
        catch (WriterException writerException) {
            throw new ExceptionConverter(writerException);
        }
    }

    private byte[] getBitMatrix() {
        int n = this.bm.getWidth();
        int n2 = this.bm.getHeight();
        int n3 = (n + 7) / 8;
        byte[] arrby = new byte[n3 * n2];
        byte[][] arrby2 = this.bm.getArray();
        for (int i = 0; i < n2; ++i) {
            byte[] arrby3 = arrby2[i];
            for (int j = 0; j < n; ++j) {
                if (arrby3[j] == 0) continue;
                int n4 = n3 * i + j / 8;
                arrby[n4] = (byte)(arrby[n4] | (byte)(128 >> j % 8));
            }
        }
        return arrby;
    }

    public Image getImage() throws BadElementException {
        byte[] arrby = CCITTG4Encoder.compress(this.getBitMatrix(), this.bm.getWidth(), this.bm.getHeight());
        return Image.getInstance(this.bm.getWidth(), this.bm.getHeight(), false, 256, 1, arrby, null);
    }
}

