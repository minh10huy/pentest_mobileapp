/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf.hyphenation;

import com.itextpdf.text.io.StreamUtil;
import com.itextpdf.text.pdf.hyphenation.Hyphenation;
import com.itextpdf.text.pdf.hyphenation.HyphenationTree;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.io.Serializable;
import java.util.Hashtable;

public class Hyphenator {
    private static final String defaultHyphLocation = "com/itextpdf/text/pdf/hyphenation/hyph/";
    private static String hyphenDir = "";
    private static Hashtable<String, HyphenationTree> hyphenTrees = new Hashtable();
    private HyphenationTree hyphenTree = null;
    private int pushCharCount = 2;
    private int remainCharCount = 2;

    public Hyphenator(String string2, String string3, int n, int n2) {
        this.hyphenTree = Hyphenator.getHyphenationTree(string2, string3);
        this.remainCharCount = n;
        this.pushCharCount = n2;
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public static HyphenationTree getFileHyphenationTree(String object) {
        Object object2;
        try {
            if (hyphenDir == null) {
                return null;
            }
            Object object3 = hyphenDir;
            object2 = new StringBuilder();
            object2.append((String)object);
            object2.append(".xml");
            object3 = new File((String)object3, object2.toString());
            object3 = object3.canRead() ? new FileInputStream((File)object3) : null;
            object2 = object3;
            if (object3 == null) {
                object2 = object3;
                if (object.length() <= 2) return null;
                object2 = hyphenDir;
                StringBuilder stringBuilder = new StringBuilder();
                stringBuilder.append(object.substring(0, 2));
                stringBuilder.append(".xml");
                object = new File((String)object2, stringBuilder.toString());
                object2 = object3;
                if (object.canRead()) {
                    object2 = new FileInputStream((File)object);
                }
            }
        }
        catch (Exception exception) {
            return null;
        }
        if (object2 != null) {
            object = new HyphenationTree();
            object.loadSimplePatterns((InputStream)object2);
            return object;
        }
        return null;
    }

    public static String getHyphenDir() {
        return hyphenDir;
    }

    public static HyphenationTree getHyphenationTree(String object, String string2) {
        Serializable serializable;
        if (string2 != null && !string2.equals("none")) {
            serializable = new StringBuilder();
            serializable.append((String)object);
            serializable.append("_");
            serializable.append(string2);
            string2 = serializable.toString();
        } else {
            string2 = object;
        }
        if (hyphenTrees.containsKey(string2)) {
            return hyphenTrees.get(string2);
        }
        if (hyphenTrees.containsKey(object)) {
            return hyphenTrees.get(object);
        }
        serializable = Hyphenator.getResourceHyphenationTree(string2);
        object = serializable;
        if (serializable == null) {
            object = Hyphenator.getFileHyphenationTree(string2);
        }
        if (object != null) {
            hyphenTrees.put(string2, (HyphenationTree)object);
        }
        return object;
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public static HyphenationTree getResourceHyphenationTree(String object) {
        Object object2;
        try {
            object2 = new StringBuilder();
            object2.append(defaultHyphLocation);
            object2.append((String)object);
            object2.append(".xml");
            InputStream inputStream = StreamUtil.getResourceStream(object2.toString());
            object2 = inputStream;
            if (inputStream == null) {
                object2 = inputStream;
                if (object.length() > 2) {
                    object2 = new StringBuilder();
                    object2.append(defaultHyphLocation);
                    object2.append(object.substring(0, 2));
                    object2.append(".xml");
                    object2 = StreamUtil.getResourceStream(object2.toString());
                }
            }
        }
        catch (Exception exception) {
            return null;
        }
        if (object2 != null) {
            object = new HyphenationTree();
            object.loadSimplePatterns((InputStream)object2);
            return object;
        }
        return null;
    }

    public static Hyphenation hyphenate(String object, String string2, String string3, int n, int n2) {
        if ((object = Hyphenator.getHyphenationTree((String)object, string2)) == null) {
            return null;
        }
        return object.hyphenate(string3, n, n2);
    }

    public static Hyphenation hyphenate(String object, String string2, char[] arrc, int n, int n2, int n3, int n4) {
        if ((object = Hyphenator.getHyphenationTree((String)object, string2)) == null) {
            return null;
        }
        return object.hyphenate(arrc, n, n2, n3, n4);
    }

    public static void setHyphenDir(String string2) {
        hyphenDir = string2;
    }

    public Hyphenation hyphenate(String string2) {
        if (this.hyphenTree == null) {
            return null;
        }
        return this.hyphenTree.hyphenate(string2, this.remainCharCount, this.pushCharCount);
    }

    public Hyphenation hyphenate(char[] arrc, int n, int n2) {
        if (this.hyphenTree == null) {
            return null;
        }
        return this.hyphenTree.hyphenate(arrc, n, n2, this.remainCharCount, this.pushCharCount);
    }

    public void setLanguage(String string2, String string3) {
        this.hyphenTree = Hyphenator.getHyphenationTree(string2, string3);
    }

    public void setMinPushCharCount(int n) {
        this.pushCharCount = n;
    }

    public void setMinRemainCharCount(int n) {
        this.remainCharCount = n;
    }
}

