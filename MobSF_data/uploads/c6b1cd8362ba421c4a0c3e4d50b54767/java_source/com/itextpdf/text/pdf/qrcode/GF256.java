/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf.qrcode;

import com.itextpdf.text.pdf.qrcode.GF256Poly;

public final class GF256 {
    public static final GF256 DATA_MATRIX_FIELD;
    public static final GF256 QR_CODE_FIELD;
    private final int[] expTable = new int[256];
    private final int[] logTable = new int[256];
    private final GF256Poly one;
    private final GF256Poly zero;

    static {
        QR_CODE_FIELD = new GF256(285);
        DATA_MATRIX_FIELD = new GF256(301);
    }

    private GF256(int n) {
        int n2 = 1;
        for (int i = 0; i < 256; ++i) {
            int n3;
            this.expTable[i] = n2;
            n2 = n3 = n2 << 1;
            if (n3 < 256) continue;
            n2 = n3 ^ n;
        }
        n = 0;
        while (n < 255) {
            this.logTable[this.expTable[n]] = n++;
        }
        this.zero = new GF256Poly(this, new int[]{0});
        this.one = new GF256Poly(this, new int[]{1});
    }

    static int addOrSubtract(int n, int n2) {
        return n ^ n2;
    }

    GF256Poly buildMonomial(int n, int n2) {
        if (n < 0) {
            throw new IllegalArgumentException();
        }
        if (n2 == 0) {
            return this.zero;
        }
        int[] arrn = new int[n + 1];
        arrn[0] = n2;
        return new GF256Poly(this, arrn);
    }

    int exp(int n) {
        return this.expTable[n];
    }

    GF256Poly getOne() {
        return this.one;
    }

    GF256Poly getZero() {
        return this.zero;
    }

    int inverse(int n) {
        if (n == 0) {
            throw new ArithmeticException();
        }
        return this.expTable[255 - this.logTable[n]];
    }

    int log(int n) {
        if (n == 0) {
            throw new IllegalArgumentException();
        }
        return this.logTable[n];
    }

    int multiply(int n, int n2) {
        if (n != 0 && n2 != 0) {
            if (n == 1) {
                return n2;
            }
            if (n2 == 1) {
                return n;
            }
            return this.expTable[(this.logTable[n] + this.logTable[n2]) % 255];
        }
        return 0;
    }
}

