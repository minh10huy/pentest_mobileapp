/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf;

import com.itextpdf.awt.geom.AffineTransform;
import com.itextpdf.text.AccessibleElementId;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.ExceptionConverter;
import com.itextpdf.text.Image;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.error_messages.MessageLocalization;
import com.itextpdf.text.exceptions.IllegalPdfSyntaxException;
import com.itextpdf.text.pdf.BaseFont;
import com.itextpdf.text.pdf.ByteBuffer;
import com.itextpdf.text.pdf.CMYKColor;
import com.itextpdf.text.pdf.ColorDetails;
import com.itextpdf.text.pdf.DeviceNColor;
import com.itextpdf.text.pdf.ExtendedColor;
import com.itextpdf.text.pdf.FontDetails;
import com.itextpdf.text.pdf.GrayColor;
import com.itextpdf.text.pdf.ICachedColorSpace;
import com.itextpdf.text.pdf.LabColor;
import com.itextpdf.text.pdf.PageResources;
import com.itextpdf.text.pdf.PatternColor;
import com.itextpdf.text.pdf.PdfAction;
import com.itextpdf.text.pdf.PdfAnnotation;
import com.itextpdf.text.pdf.PdfAppearance;
import com.itextpdf.text.pdf.PdfArray;
import com.itextpdf.text.pdf.PdfArtifact;
import com.itextpdf.text.pdf.PdfDestination;
import com.itextpdf.text.pdf.PdfDeviceNColor;
import com.itextpdf.text.pdf.PdfDictionary;
import com.itextpdf.text.pdf.PdfDocument;
import com.itextpdf.text.pdf.PdfFormField;
import com.itextpdf.text.pdf.PdfGState;
import com.itextpdf.text.pdf.PdfIndirectObject;
import com.itextpdf.text.pdf.PdfIndirectReference;
import com.itextpdf.text.pdf.PdfLabColor;
import com.itextpdf.text.pdf.PdfLayer;
import com.itextpdf.text.pdf.PdfLayerMembership;
import com.itextpdf.text.pdf.PdfName;
import com.itextpdf.text.pdf.PdfNumber;
import com.itextpdf.text.pdf.PdfOCG;
import com.itextpdf.text.pdf.PdfObject;
import com.itextpdf.text.pdf.PdfOutline;
import com.itextpdf.text.pdf.PdfPSXObject;
import com.itextpdf.text.pdf.PdfPatternPainter;
import com.itextpdf.text.pdf.PdfShading;
import com.itextpdf.text.pdf.PdfShadingPattern;
import com.itextpdf.text.pdf.PdfSpotColor;
import com.itextpdf.text.pdf.PdfStream;
import com.itextpdf.text.pdf.PdfStructureElement;
import com.itextpdf.text.pdf.PdfStructureTreeRoot;
import com.itextpdf.text.pdf.PdfTemplate;
import com.itextpdf.text.pdf.PdfTextArray;
import com.itextpdf.text.pdf.PdfWriter;
import com.itextpdf.text.pdf.ShadingColor;
import com.itextpdf.text.pdf.SpotColor;
import com.itextpdf.text.pdf.StringUtils;
import com.itextpdf.text.pdf.interfaces.IAccessibleElement;
import java.io.IOException;
import java.io.OutputStream;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;

public class PdfContentByte {
    public static final int ALIGN_CENTER = 1;
    public static final int ALIGN_LEFT = 0;
    public static final int ALIGN_RIGHT = 2;
    public static final int LINE_CAP_BUTT = 0;
    public static final int LINE_CAP_PROJECTING_SQUARE = 2;
    public static final int LINE_CAP_ROUND = 1;
    public static final int LINE_JOIN_BEVEL = 2;
    public static final int LINE_JOIN_MITER = 0;
    public static final int LINE_JOIN_ROUND = 1;
    public static final int TEXT_RENDER_MODE_CLIP = 7;
    public static final int TEXT_RENDER_MODE_FILL = 0;
    public static final int TEXT_RENDER_MODE_FILL_CLIP = 4;
    public static final int TEXT_RENDER_MODE_FILL_STROKE = 2;
    public static final int TEXT_RENDER_MODE_FILL_STROKE_CLIP = 6;
    public static final int TEXT_RENDER_MODE_INVISIBLE = 3;
    public static final int TEXT_RENDER_MODE_STROKE = 1;
    public static final int TEXT_RENDER_MODE_STROKE_CLIP = 5;
    private static HashMap<PdfName, String> abrev;
    private static final float[] unitRect;
    protected ByteBuffer content = new ByteBuffer();
    protected PdfContentByte duplicatedFrom = null;
    private boolean inText = false;
    protected ArrayList<Integer> layerDepth;
    protected int markedContentSize = 0;
    private int mcDepth = 0;
    private ArrayList<IAccessibleElement> mcElements = new ArrayList();
    protected PdfDocument pdf;
    protected int separator = 10;
    protected GraphicState state = new GraphicState();
    protected ArrayList<GraphicState> stateList = new ArrayList();
    private boolean suppressTagging = false;
    protected PdfWriter writer;

    static {
        unitRect = new float[]{0.0f, 0.0f, 0.0f, 1.0f, 1.0f, 0.0f, 1.0f, 1.0f};
        abrev = new HashMap();
        abrev.put(PdfName.BITSPERCOMPONENT, "/BPC ");
        abrev.put(PdfName.COLORSPACE, "/CS ");
        abrev.put(PdfName.DECODE, "/D ");
        abrev.put(PdfName.DECODEPARMS, "/DP ");
        abrev.put(PdfName.FILTER, "/F ");
        abrev.put(PdfName.HEIGHT, "/H ");
        abrev.put(PdfName.IMAGEMASK, "/IM ");
        abrev.put(PdfName.INTENT, "/Intent ");
        abrev.put(PdfName.INTERPOLATE, "/I ");
        abrev.put(PdfName.WIDTH, "/W ");
    }

    public PdfContentByte(PdfWriter pdfWriter) {
        if (pdfWriter != null) {
            this.writer = pdfWriter;
            this.pdf = this.writer.getPdfDocument();
        }
    }

    private void HelperCMYK(float f, float f2, float f3, float f4) {
        float f5;
        if (f < 0.0f) {
            f5 = 0.0f;
        } else {
            f5 = f;
            if (f > 1.0f) {
                f5 = 1.0f;
            }
        }
        if (f2 < 0.0f) {
            f = 0.0f;
        } else {
            f = f2;
            if (f2 > 1.0f) {
                f = 1.0f;
            }
        }
        if (f3 < 0.0f) {
            f2 = 0.0f;
        } else {
            f2 = f3;
            if (f3 > 1.0f) {
                f2 = 1.0f;
            }
        }
        if (f4 < 0.0f) {
            f3 = 0.0f;
        } else {
            f3 = f4;
            if (f4 > 1.0f) {
                f3 = 1.0f;
            }
        }
        this.content.append(f5).append(' ').append(f).append(' ').append(f2).append(' ').append(f3);
    }

    private void HelperRGB(float f, float f2, float f3) {
        float f4;
        if (f < 0.0f) {
            f4 = 0.0f;
        } else {
            f4 = f;
            if (f > 1.0f) {
                f4 = 1.0f;
            }
        }
        if (f2 < 0.0f) {
            f = 0.0f;
        } else {
            f = f2;
            if (f2 > 1.0f) {
                f = 1.0f;
            }
        }
        if (f3 < 0.0f) {
            f2 = 0.0f;
        } else {
            f2 = f3;
            if (f3 > 1.0f) {
                f2 = 1.0f;
            }
        }
        this.content.append(f4).append(' ').append(f).append(' ').append(f2);
    }

    private void addTemplate(PdfTemplate pdfTemplate, double d, double d2, double d3, double d4, double d5, double d6, boolean bl, boolean bl2) {
        this.checkWriter();
        this.checkNoPattern(pdfTemplate);
        PdfWriter.checkPdfIsoConformance(this.writer, 20, pdfTemplate);
        PdfName pdfName = this.writer.addDirectTemplateSimple(pdfTemplate, null);
        pdfName = this.getPageResources().addXObject(pdfName, pdfTemplate.getIndirectReference());
        if (this.isTagged() && bl) {
            if (this.inText) {
                this.endText();
            }
            if (!(pdfTemplate.isContentTagged() || pdfTemplate.getPageReference() != null && bl2)) {
                pdfTemplate.setPageReference(this.writer.getCurrentPage());
                if (bl2) {
                    pdfTemplate.setContentTagged(true);
                    this.ensureDocumentTagIsOpen();
                    ArrayList<IAccessibleElement> arrayList = this.getMcElements();
                    if (arrayList != null && arrayList.size() > 0) {
                        pdfTemplate.getMcElements().add(arrayList.get(arrayList.size() - 1));
                    }
                } else {
                    this.openMCBlock(pdfTemplate);
                }
            } else {
                throw new RuntimeException(MessageLocalization.getComposedMessage("template.with.tagged.could.not.be.used.more.than.once", new Object[0]));
            }
        }
        this.content.append("q ");
        this.content.append(d).append(' ');
        this.content.append(d2).append(' ');
        this.content.append(d3).append(' ');
        this.content.append(d4).append(' ');
        this.content.append(d5).append(' ');
        this.content.append(d6).append(" cm ");
        this.content.append(pdfName.getBytes()).append(" Do Q").append_i(this.separator);
        if (this.isTagged() && bl && !bl2) {
            this.closeMCBlock(pdfTemplate);
            pdfTemplate.setId(null);
        }
    }

    private void beginLayer2(PdfOCG object) {
        PdfName pdfName = (PdfName)this.writer.addSimpleProperty(object, object.getRef())[0];
        object = this.getPageResources().addProperty(pdfName, object.getRef());
        this.content.append("/OC ").append(object.getBytes()).append(" BDC").append_i(this.separator);
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    private void beginMarkedContentSequence(PdfStructureElement pdfStructureElement, String string2) {
        PdfObject pdfObject = pdfStructureElement.get(PdfName.K);
        Object object = this.pdf.getStructParentIndexAndNextMarkPoint(this.getCurrentPage());
        int n = object[0];
        int n2 = object[1];
        if (pdfObject != null) {
            if (pdfObject.isNumber()) {
                object = new PdfArray();
                object.add(pdfObject);
                pdfStructureElement.put(PdfName.K, (PdfObject)object);
            } else {
                if (!pdfObject.isArray()) throw new IllegalArgumentException(MessageLocalization.getComposedMessage("unknown.object.at.k.1", pdfObject.getClass().toString()));
                object = (PdfArray)pdfObject;
            }
            if (object.getAsNumber(0) != null) {
                pdfObject = new PdfDictionary(PdfName.MCR);
                pdfObject.put(PdfName.PG, this.getCurrentPage());
                pdfObject.put(PdfName.MCID, new PdfNumber(n2));
                object.add(pdfObject);
            }
            pdfStructureElement.setPageMark(this.pdf.getStructParentIndex(this.getCurrentPage()), -1);
        } else {
            pdfStructureElement.setPageMark(n, n2);
            pdfStructureElement.put(PdfName.PG, this.getCurrentPage());
        }
        this.setMcDepth(this.getMcDepth() + 1);
        n = this.content.size();
        this.content.append(pdfStructureElement.get(PdfName.S).getBytes()).append(" <</MCID ").append(n2);
        if (string2 != null) {
            this.content.append("/E (").append(string2).append(")");
        }
        this.content.append(">> BDC").append_i(this.separator);
        this.markedContentSize += this.content.size() - n;
    }

    public static ArrayList<double[]> bezierArc(double d, double d2, double d3, double d4, double d5, double d6) {
        double d7;
        int n;
        if (d > d3) {
            d7 = d;
        } else {
            d7 = d3;
            d3 = d;
        }
        if (d4 > d2) {
            d = d2;
            d2 = d4;
            d4 = d;
        }
        if (Math.abs(d6) <= 90.0) {
            d = d6;
            n = 1;
        } else {
            n = (int)Math.ceil(Math.abs(d6) / 90.0);
            d = d6 / (double)n;
        }
        d6 = (d3 + d7) / 2.0;
        double d8 = (d2 + d4) / 2.0;
        d3 = (d7 - d3) / 2.0;
        d4 = (d4 - d2) / 2.0;
        d2 = d * 3.141592653589793 / 360.0;
        d2 = Math.abs((1.0 - Math.cos(d2)) * 1.3333333333333333 / Math.sin(d2));
        ArrayList<double[]> arrayList = new ArrayList<double[]>();
        int n2 = 0;
        while (n2 < n) {
            double d9 = (d5 + (double)n2 * d) * 3.141592653589793 / 180.0;
            double d10 = (d5 + (double)(++n2) * d) * 3.141592653589793 / 180.0;
            d7 = Math.cos(d9);
            double d11 = Math.cos(d10);
            d9 = Math.sin(d9);
            d10 = Math.sin(d10);
            if (d > 0.0) {
                arrayList.add(new double[]{d6 + d3 * d7, d8 - d4 * d9, d6 + (d7 - d2 * d9) * d3, d8 - (d9 + d7 * d2) * d4, (d11 + d2 * d10) * d3 + d6, d8 - (d10 - d2 * d11) * d4, d6 + d11 * d3, d8 - d10 * d4});
                continue;
            }
            arrayList.add(new double[]{d6 + d3 * d7, d8 - d4 * d9, d6 + (d7 + d2 * d9) * d3, d8 - (d9 - d7 * d2) * d4, (d11 - d2 * d10) * d3 + d6, d8 - (d2 * d11 + d10) * d4, d6 + d11 * d3, d8 - d10 * d4});
        }
        return arrayList;
    }

    public static ArrayList<double[]> bezierArc(float f, float f2, float f3, float f4, float f5, float f6) {
        return PdfContentByte.bezierArc((double)f, (double)f2, (double)f3, (double)f4, (double)f5, (double)f6);
    }

    private void closeMCBlockInt(IAccessibleElement iAccessibleElement) {
        if (this.isTagged() && iAccessibleElement.getRole() != null) {
            PdfStructureElement pdfStructureElement = this.pdf.getStructElement(iAccessibleElement.getId());
            if (pdfStructureElement != null) {
                pdfStructureElement.writeAttributes(iAccessibleElement);
            }
            if (this.writer.needToBeMarkedInContent(iAccessibleElement)) {
                boolean bl = this.inText;
                if (this.inText) {
                    this.endText();
                }
                this.endMarkedContentSequence();
                if (bl) {
                    this.beginText(true);
                }
            }
        }
    }

    private boolean compareColors(BaseColor baseColor, BaseColor baseColor2) {
        if (baseColor == null && baseColor2 == null) {
            return true;
        }
        if (baseColor != null && baseColor2 != null) {
            if (baseColor instanceof ExtendedColor) {
                return baseColor.equals(baseColor2);
            }
            return baseColor2.equals(baseColor);
        }
        return false;
    }

    private void ensureDocumentTagIsOpen() {
        if (this.pdf.openMCDocument) {
            this.pdf.openMCDocument = false;
            this.writer.getDirectContentUnder().openMCBlock(this.pdf);
        }
    }

    private float getEffectiveStringWidth(String string2, boolean bl, float f) {
        BaseFont baseFont = this.state.fontDetails.getBaseFont();
        float f2 = bl ? baseFont.getWidthPointKerned(string2, this.state.size) : baseFont.getWidthPoint(string2, this.state.size);
        float f3 = f2;
        if (this.state.charSpace != 0.0f) {
            f3 = f2;
            if (string2.length() > 0) {
                f3 = f2 + this.state.charSpace * (float)string2.length();
            }
        }
        f2 = f3;
        if (this.state.wordSpace != 0.0f) {
            f2 = f3;
            if (!baseFont.isVertical()) {
                int n = 0;
                do {
                    f2 = f3;
                    if (n >= string2.length()) break;
                    f2 = f3;
                    if (string2.charAt(n) == ' ') {
                        f2 = f3 + this.state.wordSpace;
                    }
                    ++n;
                    f3 = f2;
                } while (true);
            }
        }
        f = f3 = f2 - f / 1000.0f * this.state.size;
        if ((double)this.state.scale != 100.0) {
            f = f3 * this.state.scale / 100.0f;
        }
        return f;
    }

    public static PdfTextArray getKernArray(String arrc, BaseFont baseFont) {
        PdfTextArray pdfTextArray = new PdfTextArray();
        StringBuffer stringBuffer = new StringBuffer();
        int n = arrc.length() - 1;
        arrc = arrc.toCharArray();
        if (n >= 0) {
            stringBuffer.append(arrc, 0, 1);
        }
        int n2 = 0;
        while (n2 < n) {
            int n3 = n2 + 1;
            char c = arrc[n3];
            if ((n2 = baseFont.getKerning(arrc[n2], c)) == 0) {
                stringBuffer.append(c);
            } else {
                pdfTextArray.add(stringBuffer.toString());
                stringBuffer.setLength(0);
                stringBuffer.append(arrc, n3, 1);
                pdfTextArray.add(- n2);
            }
            n2 = n3;
        }
        pdfTextArray.add(stringBuffer.toString());
        return pdfTextArray;
    }

    private PdfDictionary getParentStructureElement() {
        PdfDictionary pdfDictionary = this.getMcElements().size() > 0 ? this.pdf.getStructElement(this.getMcElements().get(this.getMcElements().size() - 1).getId()) : null;
        PdfStructureTreeRoot pdfStructureTreeRoot = pdfDictionary;
        if (pdfDictionary == null) {
            pdfStructureTreeRoot = this.writer.getStructureTreeRoot();
        }
        return pdfStructureTreeRoot;
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    private PdfStructureElement openMCBlockInt(IAccessibleElement iAccessibleElement) {
        Object object;
        boolean bl = this.isTagged();
        PdfDictionary pdfDictionary = null;
        if (!bl) return null;
        Object object2 = this.getMcElements().size() > 0 ? this.getMcElements().get(this.getMcElements().size() - 1) : null;
        this.writer.checkElementRole(iAccessibleElement, (IAccessibleElement)object2);
        if (iAccessibleElement.getRole() == null) return null;
        if (!PdfName.ARTIFACT.equals(iAccessibleElement.getRole())) {
            object2 = object = this.pdf.getStructElement(iAccessibleElement.getId());
            if (object == null) {
                object2 = new PdfStructureElement(this.getParentStructureElement(), iAccessibleElement.getRole(), iAccessibleElement.getId());
            }
        } else {
            object2 = null;
        }
        if (PdfName.ARTIFACT.equals(iAccessibleElement.getRole())) {
            Object object3 = iAccessibleElement.getAccessibleAttributes();
            object = pdfDictionary;
            if (object3 != null) {
                object = pdfDictionary;
                if (!object3.isEmpty()) {
                    pdfDictionary = new PdfDictionary();
                    object3 = object3.entrySet().iterator();
                    do {
                        object = pdfDictionary;
                        if (!object3.hasNext()) break;
                        object = (Map.Entry)object3.next();
                        pdfDictionary.put((PdfName)object.getKey(), (PdfObject)object.getValue());
                    } while (true);
                }
            }
            bl = this.inText;
            if (this.inText) {
                this.endText();
            }
            this.beginMarkedContentSequence(iAccessibleElement.getRole(), (PdfDictionary)object, true);
            object = object2;
            if (!bl) return object;
            this.beginText(true);
            return object2;
        }
        object = object2;
        if (!this.writer.needToBeMarkedInContent(iAccessibleElement)) return object;
        bl = this.inText;
        if (this.inText) {
            this.endText();
        }
        if (iAccessibleElement.getAccessibleAttributes() != null && iAccessibleElement.getAccessibleAttribute(PdfName.E) != null) {
            this.beginMarkedContentSequence((PdfStructureElement)object2, iAccessibleElement.getAccessibleAttribute(PdfName.E).toString());
            iAccessibleElement.setAccessibleAttribute(PdfName.E, null);
        } else {
            this.beginMarkedContentSequence((PdfStructureElement)object2);
        }
        object = object2;
        if (!bl) return object;
        this.beginText(true);
        return object2;
    }

    private void saveColor(BaseColor baseColor, boolean bl) {
        if (bl) {
            this.state.colorFill = baseColor;
            return;
        }
        this.state.colorStroke = baseColor;
    }

    private void showText2(String string2) {
        if (this.state.fontDetails == null) {
            throw new NullPointerException(MessageLocalization.getComposedMessage("font.and.size.must.be.set.before.writing.any.text", new Object[0]));
        }
        StringUtils.escapeString(this.state.fontDetails.convertToBytes(string2), this.content);
    }

    private void showTextAligned(int n, String string2, float f, float f2, float f3, boolean bl) {
        if (this.state.fontDetails == null) {
            throw new NullPointerException(MessageLocalization.getComposedMessage("font.and.size.must.be.set.before.writing.any.text", new Object[0]));
        }
        if (f3 == 0.0f) {
            switch (n) {
                default: {
                    break;
                }
                case 2: {
                    f -= this.getEffectiveStringWidth(string2, bl);
                    break;
                }
                case 1: {
                    f -= this.getEffectiveStringWidth(string2, bl) / 2.0f;
                }
            }
            this.setTextMatrix(f, f2);
            if (bl) {
                this.showTextKerned(string2);
                return;
            }
            this.showText(string2);
            return;
        }
        double d = (double)f3 * 3.141592653589793 / 180.0;
        f3 = (float)Math.cos(d);
        float f4 = (float)Math.sin(d);
        switch (n) {
            default: {
                break;
            }
            case 2: {
                float f5 = this.getEffectiveStringWidth(string2, bl);
                f -= f5 * f3;
                f2 -= f5 * f4;
                break;
            }
            case 1: {
                float f6 = this.getEffectiveStringWidth(string2, bl) / 2.0f;
                f -= f6 * f3;
                f2 -= f6 * f4;
            }
        }
        this.setTextMatrix(f3, f4, - f4, f3, f, f2);
        if (bl) {
            this.showTextKerned(string2);
        } else {
            this.showText(string2);
        }
        this.setTextMatrix(0.0f, 0.0f);
    }

    public void add(PdfContentByte pdfContentByte) {
        if (pdfContentByte.writer != null && this.writer != pdfContentByte.writer) {
            throw new RuntimeException(MessageLocalization.getComposedMessage("inconsistent.writers.are.you.mixing.two.documents", new Object[0]));
        }
        this.content.append(pdfContentByte.content);
        this.markedContentSize += pdfContentByte.markedContentSize;
    }

    void addAnnotation(PdfAnnotation pdfAnnotation) {
        int n = this.isTagged() && pdfAnnotation.getRole() != null && (!(pdfAnnotation instanceof PdfFormField) || ((PdfFormField)pdfAnnotation).getKids() == null) ? 1 : 0;
        if (n != 0) {
            this.openMCBlock(pdfAnnotation);
        }
        this.writer.addAnnotation(pdfAnnotation);
        if (n != 0) {
            PdfStructureElement pdfStructureElement = this.pdf.getStructElement(pdfAnnotation.getId());
            if (pdfStructureElement != null) {
                n = this.pdf.getStructParentIndex(pdfAnnotation);
                pdfAnnotation.put(PdfName.STRUCTPARENT, new PdfNumber(n));
                pdfStructureElement.setAnnotation(pdfAnnotation, this.getCurrentPage());
                this.writer.getStructureTreeRoot().setAnnotationMark(n, pdfStructureElement.getReference());
            }
            this.closeMCBlock(pdfAnnotation);
        }
    }

    public void addAnnotation(PdfAnnotation pdfAnnotation, boolean bl) {
        if (bl && this.state.CTM.getType() != 0) {
            pdfAnnotation.applyCTM(this.state.CTM);
        }
        this.addAnnotation(pdfAnnotation);
    }

    public PdfName addFormXObj(PdfStream object, PdfName pdfName, double d, double d2, double d3, double d4, double d5, double d6) throws IOException {
        this.checkWriter();
        PdfWriter.checkPdfIsoConformance(this.writer, 9, object);
        pdfName = this.getPageResources().addXObject(pdfName, this.writer.addToBody((PdfObject)object).getIndirectReference());
        if (this.isTagged()) {
            if (this.inText) {
                this.endText();
            }
            object = new PdfArtifact();
            this.openMCBlock((IAccessibleElement)object);
        } else {
            object = null;
        }
        this.content.append("q ");
        this.content.append(d).append(' ');
        this.content.append(d2).append(' ');
        this.content.append(d3).append(' ');
        this.content.append(d4).append(' ');
        this.content.append(d5).append(' ');
        this.content.append(d6).append(" cm ");
        this.content.append(pdfName.getBytes()).append(" Do Q").append_i(this.separator);
        if (this.isTagged()) {
            this.closeMCBlock((IAccessibleElement)object);
        }
        return pdfName;
    }

    public PdfName addFormXObj(PdfStream pdfStream, PdfName pdfName, float f, float f2, float f3, float f4, float f5, float f6) throws IOException {
        return this.addFormXObj(pdfStream, pdfName, (double)f, (double)f2, (double)f3, (double)f4, (double)f5, (double)f6);
    }

    public void addImage(Image image) throws DocumentException {
        this.addImage(image, false);
    }

    public void addImage(Image image, double d, double d2, double d3, double d4, double d5, double d6) throws DocumentException {
        this.addImage(image, d, d2, d3, d4, d5, d6, false);
    }

    public void addImage(Image image, double d, double d2, double d3, double d4, double d5, double d6, boolean bl) throws DocumentException {
        this.addImage(image, d, d2, d3, d4, d5, d6, bl, false);
    }

    /*
     * Exception decompiling
     */
    protected void addImage(Image var1_1, double var2_2, double var4_3, double var6_4, double var8_5, double var10_6, double var12_7, boolean var14_8, boolean var15_9) throws DocumentException {
        // This method has failed to decompile.  When submitting a bug report, please provide this stack trace, and (if you hold appropriate legal rights) the relevant class file.
        // org.benf.cfr.reader.util.ConfusedCFRException: Tried to end blocks [4[TRYBLOCK]], but top level block is 5[TRYBLOCK]
        // org.benf.cfr.reader.bytecode.analysis.opgraph.Op04StructuredStatement.processEndingBlocks(Op04StructuredStatement.java:416)
        // org.benf.cfr.reader.bytecode.analysis.opgraph.Op04StructuredStatement.buildNestedBlocks(Op04StructuredStatement.java:468)
        // org.benf.cfr.reader.bytecode.analysis.opgraph.Op03SimpleStatement.createInitialStructuredBlock(Op03SimpleStatement.java:2960)
        // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisInner(CodeAnalyser.java:818)
        // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisOrWrapFail(CodeAnalyser.java:196)
        // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysis(CodeAnalyser.java:141)
        // org.benf.cfr.reader.entities.attributes.AttributeCode.analyse(AttributeCode.java:95)
        // org.benf.cfr.reader.entities.Method.analyse(Method.java:372)
        // org.benf.cfr.reader.entities.ClassFile.analyseMid(ClassFile.java:867)
        // org.benf.cfr.reader.entities.ClassFile.analyseTop(ClassFile.java:768)
        // org.benf.cfr.reader.Main.doJar(Main.java:141)
        // org.benf.cfr.reader.Main.main(Main.java:242)
        throw new IllegalStateException("Decompilation failed");
    }

    public void addImage(Image image, float f, float f2, float f3, float f4, float f5, float f6) throws DocumentException {
        this.addImage(image, f, f2, f3, f4, f5, f6, false);
    }

    public void addImage(Image image, float f, float f2, float f3, float f4, float f5, float f6, boolean bl) throws DocumentException {
        this.addImage(image, (double)f, (double)f2, (double)f3, (double)f4, (double)f5, (double)f6, bl);
    }

    public void addImage(Image image, AffineTransform affineTransform) throws DocumentException {
        double[] arrd = new double[6];
        affineTransform.getMatrix(arrd);
        this.addImage(image, arrd[0], arrd[1], arrd[2], arrd[3], arrd[4], arrd[5], false);
    }

    public void addImage(Image image, boolean bl) throws DocumentException {
        if (!image.hasAbsoluteY()) {
            throw new DocumentException(MessageLocalization.getComposedMessage("the.image.must.have.absolute.positioning", new Object[0]));
        }
        float[] arrf = image.matrix();
        arrf[4] = image.getAbsoluteX() - arrf[4];
        arrf[5] = image.getAbsoluteY() - arrf[5];
        this.addImage(image, arrf[0], arrf[1], arrf[2], arrf[3], arrf[4], arrf[5], bl);
    }

    public void addOutline(PdfOutline pdfOutline, String string2) {
        this.checkWriter();
        this.pdf.addOutline(pdfOutline, string2);
    }

    public void addPSXObject(PdfPSXObject object) {
        if (this.inText && this.isTagged()) {
            this.endText();
        }
        this.checkWriter();
        PdfName pdfName = this.writer.addDirectTemplateSimple((PdfTemplate)object, null);
        object = this.getPageResources().addXObject(pdfName, object.getIndirectReference());
        this.content.append(object.getBytes()).append(" Do").append_i(this.separator);
    }

    public void addTemplate(PdfTemplate pdfTemplate, double d, double d2) {
        this.addTemplate(pdfTemplate, 1.0, 0.0, 0.0, 1.0, d, d2);
    }

    public void addTemplate(PdfTemplate pdfTemplate, double d, double d2, double d3, double d4, double d5, double d6) {
        this.addTemplate(pdfTemplate, d, d2, d3, d4, d5, d6, false);
    }

    public void addTemplate(PdfTemplate pdfTemplate, double d, double d2, double d3, double d4, double d5, double d6, boolean bl) {
        this.addTemplate(pdfTemplate, d, d2, d3, d4, d5, d6, true, bl);
    }

    public void addTemplate(PdfTemplate pdfTemplate, double d, double d2, boolean bl) {
        this.addTemplate(pdfTemplate, 1.0, 0.0, 0.0, 1.0, d, d2, bl);
    }

    public void addTemplate(PdfTemplate pdfTemplate, float f, float f2) {
        this.addTemplate(pdfTemplate, 1.0f, 0.0f, 0.0f, 1.0f, f, f2);
    }

    public void addTemplate(PdfTemplate pdfTemplate, float f, float f2, float f3, float f4, float f5, float f6) {
        this.addTemplate(pdfTemplate, f, f2, f3, f4, f5, f6, false);
    }

    public void addTemplate(PdfTemplate pdfTemplate, float f, float f2, float f3, float f4, float f5, float f6, boolean bl) {
        this.addTemplate(pdfTemplate, (double)f, (double)f2, (double)f3, (double)f4, (double)f5, (double)f6, bl);
    }

    public void addTemplate(PdfTemplate pdfTemplate, float f, float f2, boolean bl) {
        this.addTemplate(pdfTemplate, 1.0f, 0.0f, 0.0f, 1.0f, f, f2, bl);
    }

    public void addTemplate(PdfTemplate pdfTemplate, AffineTransform affineTransform) {
        this.addTemplate(pdfTemplate, affineTransform, false);
    }

    public void addTemplate(PdfTemplate pdfTemplate, AffineTransform affineTransform, boolean bl) {
        double[] arrd = new double[6];
        affineTransform.getMatrix(arrd);
        this.addTemplate(pdfTemplate, arrd[0], arrd[1], arrd[2], arrd[3], arrd[4], arrd[5], bl);
    }

    void addTemplateReference(PdfIndirectReference pdfObject, PdfName pdfName, double d, double d2, double d3, double d4, double d5, double d6) {
        if (this.inText && this.isTagged()) {
            this.endText();
        }
        this.checkWriter();
        pdfObject = this.getPageResources().addXObject(pdfName, (PdfIndirectReference)pdfObject);
        this.content.append("q ");
        this.content.append(d).append(' ');
        this.content.append(d2).append(' ');
        this.content.append(d3).append(' ');
        this.content.append(d4).append(' ');
        this.content.append(d5).append(' ');
        this.content.append(d6).append(" cm ");
        this.content.append(pdfObject.getBytes()).append(" Do Q").append_i(this.separator);
    }

    void addTemplateReference(PdfIndirectReference pdfIndirectReference, PdfName pdfName, float f, float f2, float f3, float f4, float f5, float f6) {
        this.addTemplateReference(pdfIndirectReference, pdfName, (double)f, (double)f2, (double)f3, (double)f4, (double)f5, (double)f6);
    }

    public void arc(double d, double d2, double d3, double d4, double d5, double d6) {
        ArrayList<double[]> arrayList = PdfContentByte.bezierArc(d, d2, d3, d4, d5, d6);
        if (arrayList.isEmpty()) {
            return;
        }
        double[] arrd = arrayList.get(0);
        this.moveTo(arrd[0], arrd[1]);
        for (int i = 0; i < arrayList.size(); ++i) {
            arrd = arrayList.get(i);
            this.curveTo(arrd[2], arrd[3], arrd[4], arrd[5], arrd[6], arrd[7]);
        }
    }

    public void arc(float f, float f2, float f3, float f4, float f5, float f6) {
        this.arc((double)f, (double)f2, (double)f3, (double)f4, (double)f5, (double)f6);
    }

    public void beginLayer(PdfOCG pdfOCG) {
        boolean bl = pdfOCG instanceof PdfLayer;
        int n = 0;
        if (bl && ((PdfLayer)pdfOCG).getTitle() != null) {
            throw new IllegalArgumentException(MessageLocalization.getComposedMessage("a.title.is.not.a.layer", new Object[0]));
        }
        if (this.layerDepth == null) {
            this.layerDepth = new ArrayList();
        }
        if (pdfOCG instanceof PdfLayerMembership) {
            this.layerDepth.add(1);
            this.beginLayer2(pdfOCG);
            return;
        }
        for (pdfOCG = (PdfLayer)pdfOCG; pdfOCG != null; pdfOCG = pdfOCG.getParent()) {
            int n2 = n;
            if (pdfOCG.getTitle() == null) {
                this.beginLayer2(pdfOCG);
                n2 = n + 1;
            }
            n = n2;
        }
        this.layerDepth.add(n);
    }

    public void beginMarkedContentSequence(PdfName pdfName) {
        this.beginMarkedContentSequence(pdfName, null, false);
    }

    public void beginMarkedContentSequence(PdfName object, PdfDictionary pdfObject, boolean bl) {
        int n = this.content.size();
        if (pdfObject == null) {
            this.content.append(object.getBytes()).append(" BMC").append_i(this.separator);
            this.setMcDepth(this.getMcDepth() + 1);
        } else {
            this.content.append(object.getBytes()).append(' ');
            if (bl) {
                try {
                    pdfObject.toPdf(this.writer, this.content);
                }
                catch (Exception exception) {
                    throw new ExceptionConverter(exception);
                }
            } else {
                object = this.writer.propertyExists(pdfObject) ? this.writer.addSimpleProperty(pdfObject, null) : this.writer.addSimpleProperty(pdfObject, this.writer.getPdfIndirectReference());
                pdfObject = (PdfName)object[0];
                object = this.getPageResources().addProperty((PdfName)pdfObject, (PdfIndirectReference)object[1]);
                this.content.append(object.getBytes());
            }
            this.content.append(" BDC").append_i(this.separator);
            this.setMcDepth(this.getMcDepth() + 1);
        }
        this.markedContentSize += this.content.size() - n;
    }

    public void beginMarkedContentSequence(PdfStructureElement pdfStructureElement) {
        this.beginMarkedContentSequence(pdfStructureElement, null);
    }

    public void beginText() {
        this.beginText(false);
    }

    protected void beginText(boolean bl) {
        if (this.inText) {
            if (this.isTagged()) {
                return;
            }
            throw new IllegalPdfSyntaxException(MessageLocalization.getComposedMessage("unbalanced.begin.end.text.operators", new Object[0]));
        }
        this.inText = true;
        this.content.append("BT").append_i(this.separator);
        if (bl) {
            float f = this.state.xTLM;
            float f2 = this.state.tx;
            this.setTextMatrix(this.state.aTLM, this.state.bTLM, this.state.cTLM, this.state.dTLM, this.state.tx, this.state.yTLM);
            this.state.xTLM = f;
            this.state.tx = f2;
            return;
        }
        this.state.xTLM = 0.0f;
        this.state.yTLM = 0.0f;
        this.state.tx = 0.0f;
    }

    void checkNoPattern(PdfTemplate pdfTemplate) {
        if (pdfTemplate.getType() == 3) {
            throw new RuntimeException(MessageLocalization.getComposedMessage("invalid.use.of.a.pattern.a.template.was.expected", new Object[0]));
        }
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Lifted jumps to return sites
     */
    protected void checkState() {
        block9 : {
            block8 : {
                block7 : {
                    var1_1 = this.state.textRenderMode;
                    var2_2 = false;
                    if (var1_1 != 0) break block7;
                    var1_1 = 0;
                    ** GOTO lbl12
                }
                if (this.state.textRenderMode == 1) {
                    var1_1 = 1;
                } else if (this.state.textRenderMode == 2) {
                    var1_1 = 1;
lbl12: // 2 sources:
                    var2_2 = true;
                } else {
                    var1_1 = 0;
                }
                if (!var2_2) break block8;
                PdfWriter.checkPdfIsoConformance(this.writer, 1, this.state.colorFill);
                if (var1_1 == 0) break block9;
            }
            PdfWriter.checkPdfIsoConformance(this.writer, 1, this.state.colorStroke);
        }
        PdfWriter.checkPdfIsoConformance(this.writer, 6, this.state.extGState);
    }

    protected void checkWriter() {
        if (this.writer == null) {
            throw new NullPointerException(MessageLocalization.getComposedMessage("the.writer.in.pdfcontentbyte.is.null", new Object[0]));
        }
    }

    public void circle(double d, double d2, double d3) {
        double d4 = d + d3;
        this.moveTo(d4, d2);
        double d5 = d3 * (double)0.5523f;
        double d6 = d2 + d5;
        double d7 = d + d5;
        double d8 = d2 + d3;
        this.curveTo(d4, d6, d7, d8, d, d8);
        double d9 = d - d5;
        double d10 = d - d3;
        this.curveTo(d9, d8, d10, d6, d10, d2);
        d5 = d2 - d5;
        d3 = d2 - d3;
        this.curveTo(d10, d5, d9, d3, d, d3);
        this.curveTo(d7, d3, d4, d5, d4, d2);
    }

    public void circle(float f, float f2, float f3) {
        this.circle((double)f, (double)f2, (double)f3);
    }

    public void clip() {
        if (this.inText && this.isTagged()) {
            this.endText();
        }
        this.content.append("W").append_i(this.separator);
    }

    public void closeMCBlock(IAccessibleElement iAccessibleElement) {
        if (this.isTagged() && iAccessibleElement != null && this.getMcElements().contains(iAccessibleElement)) {
            this.closeMCBlockInt(iAccessibleElement);
            this.getMcElements().remove(iAccessibleElement);
        }
    }

    public void closePath() {
        if (this.inText) {
            if (this.isTagged()) {
                this.endText();
            } else {
                throw new IllegalPdfSyntaxException(MessageLocalization.getComposedMessage("path.construction.operator.inside.text.object", new Object[0]));
            }
        }
        this.content.append("h").append_i(this.separator);
    }

    public void closePathEoFillStroke() {
        if (this.inText) {
            if (this.isTagged()) {
                this.endText();
            } else {
                throw new IllegalPdfSyntaxException(MessageLocalization.getComposedMessage("path.construction.operator.inside.text.object", new Object[0]));
            }
        }
        PdfWriter.checkPdfIsoConformance(this.writer, 1, this.state.colorFill);
        PdfWriter.checkPdfIsoConformance(this.writer, 1, this.state.colorStroke);
        PdfWriter.checkPdfIsoConformance(this.writer, 6, this.state.extGState);
        this.content.append("b*").append_i(this.separator);
    }

    public void closePathFillStroke() {
        if (this.inText) {
            if (this.isTagged()) {
                this.endText();
            } else {
                throw new IllegalPdfSyntaxException(MessageLocalization.getComposedMessage("path.construction.operator.inside.text.object", new Object[0]));
            }
        }
        PdfWriter.checkPdfIsoConformance(this.writer, 1, this.state.colorFill);
        PdfWriter.checkPdfIsoConformance(this.writer, 1, this.state.colorStroke);
        PdfWriter.checkPdfIsoConformance(this.writer, 6, this.state.extGState);
        this.content.append("b").append_i(this.separator);
    }

    public void closePathStroke() {
        if (this.inText) {
            if (this.isTagged()) {
                this.endText();
            } else {
                throw new IllegalPdfSyntaxException(MessageLocalization.getComposedMessage("path.construction.operator.inside.text.object", new Object[0]));
            }
        }
        PdfWriter.checkPdfIsoConformance(this.writer, 1, this.state.colorStroke);
        PdfWriter.checkPdfIsoConformance(this.writer, 6, this.state.extGState);
        this.content.append("s").append_i(this.separator);
    }

    public void concatCTM(double d, double d2, double d3, double d4, double d5, double d6) {
        if (this.inText && this.isTagged()) {
            this.endText();
        }
        this.state.CTM.concatenate(new AffineTransform(d, d2, d3, d4, d5, d6));
        this.content.append(d).append(' ').append(d2).append(' ').append(d3).append(' ');
        this.content.append(d4).append(' ').append(d5).append(' ').append(d6).append(" cm").append_i(this.separator);
    }

    public void concatCTM(float f, float f2, float f3, float f4, float f5, float f6) {
        this.concatCTM((double)f, (double)f2, (double)f3, (double)f4, (double)f5, (double)f6);
    }

    public void concatCTM(AffineTransform affineTransform) {
        double[] arrd = new double[6];
        affineTransform.getMatrix(arrd);
        this.concatCTM(arrd[0], arrd[1], arrd[2], arrd[3], arrd[4], arrd[5]);
    }

    public PdfAppearance createAppearance(float f, float f2) {
        return this.createAppearance(f, f2, null);
    }

    PdfAppearance createAppearance(float f, float f2, PdfName pdfName) {
        this.checkWriter();
        PdfAppearance pdfAppearance = new PdfAppearance(this.writer);
        pdfAppearance.setWidth(f);
        pdfAppearance.setHeight(f2);
        this.writer.addDirectTemplateSimple(pdfAppearance, pdfName);
        return pdfAppearance;
    }

    public PdfPatternPainter createPattern(float f, float f2) {
        return this.createPattern(f, f2, f, f2);
    }

    public PdfPatternPainter createPattern(float f, float f2, float f3, float f4) {
        this.checkWriter();
        if (f3 != 0.0f && f4 != 0.0f) {
            PdfPatternPainter pdfPatternPainter = new PdfPatternPainter(this.writer);
            pdfPatternPainter.setWidth(f);
            pdfPatternPainter.setHeight(f2);
            pdfPatternPainter.setXStep(f3);
            pdfPatternPainter.setYStep(f4);
            this.writer.addSimplePattern(pdfPatternPainter);
            return pdfPatternPainter;
        }
        throw new RuntimeException(MessageLocalization.getComposedMessage("xstep.or.ystep.can.not.be.zero", new Object[0]));
    }

    public PdfPatternPainter createPattern(float f, float f2, float f3, float f4, BaseColor object) {
        this.checkWriter();
        if (f3 != 0.0f && f4 != 0.0f) {
            object = new PdfPatternPainter(this.writer, (BaseColor)object);
            object.setWidth(f);
            object.setHeight(f2);
            object.setXStep(f3);
            object.setYStep(f4);
            this.writer.addSimplePattern((PdfPatternPainter)object);
            return object;
        }
        throw new RuntimeException(MessageLocalization.getComposedMessage("xstep.or.ystep.can.not.be.zero", new Object[0]));
    }

    public PdfPatternPainter createPattern(float f, float f2, BaseColor baseColor) {
        return this.createPattern(f, f2, f, f2, baseColor);
    }

    public PdfTemplate createTemplate(float f, float f2) {
        return this.createTemplate(f, f2, null);
    }

    PdfTemplate createTemplate(float f, float f2, PdfName pdfName) {
        this.checkWriter();
        PdfTemplate pdfTemplate = new PdfTemplate(this.writer);
        pdfTemplate.setWidth(f);
        pdfTemplate.setHeight(f2);
        this.writer.addDirectTemplateSimple(pdfTemplate, pdfName);
        return pdfTemplate;
    }

    public void curveFromTo(double d, double d2, double d3, double d4) {
        if (this.inText) {
            if (this.isTagged()) {
                this.endText();
            } else {
                throw new IllegalPdfSyntaxException(MessageLocalization.getComposedMessage("path.construction.operator.inside.text.object", new Object[0]));
            }
        }
        this.content.append(d).append(' ').append(d2).append(' ').append(d3).append(' ').append(d4).append(" y").append_i(this.separator);
    }

    public void curveFromTo(float f, float f2, float f3, float f4) {
        this.curveFromTo((double)f, (double)f2, (double)f3, (double)f4);
    }

    public void curveTo(double d, double d2, double d3, double d4) {
        if (this.inText) {
            if (this.isTagged()) {
                this.endText();
            } else {
                throw new IllegalPdfSyntaxException(MessageLocalization.getComposedMessage("path.construction.operator.inside.text.object", new Object[0]));
            }
        }
        this.content.append(d).append(' ').append(d2).append(' ').append(d3).append(' ').append(d4).append(" v").append_i(this.separator);
    }

    public void curveTo(double d, double d2, double d3, double d4, double d5, double d6) {
        if (this.inText) {
            if (this.isTagged()) {
                this.endText();
            } else {
                throw new IllegalPdfSyntaxException(MessageLocalization.getComposedMessage("path.construction.operator.inside.text.object", new Object[0]));
            }
        }
        this.content.append(d).append(' ').append(d2).append(' ').append(d3).append(' ').append(d4).append(' ').append(d5).append(' ').append(d6).append(" c").append_i(this.separator);
    }

    public void curveTo(float f, float f2, float f3, float f4) {
        this.curveTo((double)f, (double)f2, (double)f3, (double)f4);
    }

    public void curveTo(float f, float f2, float f3, float f4, float f5, float f6) {
        this.curveTo((double)f, (double)f2, (double)f3, (double)f4, (double)f5, (double)f6);
    }

    public void drawButton(double d, double d2, double d3, double d4, String string2, BaseFont baseFont, float f) {
        double d5;
        if (d > d3) {
            d5 = d;
            d = d3;
            d3 = d5;
        }
        if (d2 > d4) {
            d5 = d2;
            d2 = d4;
            d4 = d5;
        }
        this.saveState();
        this.setColorStroke(new BaseColor(0, 0, 0));
        this.setLineWidth(1.0f);
        this.setLineCap(0);
        d5 = d3 - d;
        double d6 = d4 - d2;
        this.rectangle(d, d2, d5, d6);
        this.stroke();
        this.setLineWidth(1.0f);
        this.setLineCap(0);
        this.setColorFill(new BaseColor(192, 192, 192));
        this.rectangle(d + 0.5, d2 + 0.5, d5 - 1.0, d6 - 1.0);
        this.fill();
        this.setColorStroke(new BaseColor(255, 255, 255));
        this.setLineWidth(1.0f);
        this.setLineCap(0);
        double d7 = d + 1.0;
        double d8 = d2 + 1.0;
        this.moveTo(d7, d8);
        this.lineTo(d7, d4 -= 1.0);
        this.lineTo(d3 -= 1.0, d4);
        this.stroke();
        this.setColorStroke(new BaseColor(160, 160, 160));
        this.setLineWidth(1.0f);
        this.setLineCap(0);
        this.moveTo(d7, d8);
        this.lineTo(d3, d8);
        this.lineTo(d3, d4);
        this.stroke();
        this.resetRGBColorFill();
        this.beginText();
        this.setFontAndSize(baseFont, f);
        this.showTextAligned(1, string2, (float)(d + d5 / 2.0), (float)(d2 + (d6 - (double)f) / 2.0), 0.0f);
        this.endText();
        this.restoreState();
    }

    public void drawButton(float f, float f2, float f3, float f4, String string2, BaseFont baseFont, float f5) {
        this.drawButton((double)f, (double)f2, (double)f3, (double)f4, string2, baseFont, f5);
    }

    public void drawRadioField(double d, double d2, double d3, double d4, boolean bl) {
        double d5;
        if (d > d3) {
            d5 = d;
            d = d3;
            d3 = d5;
        }
        if (d2 > d4) {
            d5 = d2;
        } else {
            d5 = d4;
            d4 = d2;
        }
        this.saveState();
        this.setLineWidth(1.0f);
        this.setLineCap(1);
        this.setColorStroke(new BaseColor(192, 192, 192));
        this.arc(d + 1.0, d4 + 1.0, d3 - 1.0, d5 - 1.0, 0.0, 360.0);
        this.stroke();
        this.setLineWidth(1.0f);
        this.setLineCap(1);
        this.setColorStroke(new BaseColor(160, 160, 160));
        this.arc(d + 0.5, d4 + 0.5, d3 - 0.5, d5 - 0.5, 45.0, 180.0);
        this.stroke();
        this.setLineWidth(1.0f);
        this.setLineCap(1);
        this.setColorStroke(new BaseColor(0, 0, 0));
        this.arc(d + 1.5, d4 + 1.5, d3 - 1.5, d5 - 1.5, 45.0, 180.0);
        this.stroke();
        if (bl) {
            this.setLineWidth(1.0f);
            this.setLineCap(1);
            this.setColorFill(new BaseColor(0, 0, 0));
            this.arc(d + 4.0, d4 + 4.0, d3 - 4.0, d5 - 4.0, 0.0, 360.0);
            this.fill();
        }
        this.restoreState();
    }

    public void drawRadioField(float f, float f2, float f3, float f4, boolean bl) {
        this.drawRadioField((double)f, (double)f2, (double)f3, (double)f4, bl);
    }

    public void drawTextField(double d, double d2, double d3, double d4) {
        double d5;
        if (d <= d3) {
            d5 = d;
            d = d3;
            d3 = d5;
        }
        if (d2 > d4) {
            d5 = d2;
            d2 = d4;
            d4 = d5;
        }
        this.saveState();
        this.setColorStroke(new BaseColor(192, 192, 192));
        this.setLineWidth(1.0f);
        this.setLineCap(0);
        d5 = d - d3;
        double d6 = d4 - d2;
        this.rectangle(d3, d2, d5, d6);
        this.stroke();
        this.setLineWidth(1.0f);
        this.setLineCap(0);
        this.setColorFill(new BaseColor(255, 255, 255));
        this.rectangle(d3 + 0.5, d2 + 0.5, d5 - 1.0, d6 - 1.0);
        this.fill();
        this.setColorStroke(new BaseColor(192, 192, 192));
        this.setLineWidth(1.0f);
        this.setLineCap(0);
        d5 = d3 + 1.0;
        double d7 = d2 + 1.5;
        this.moveTo(d5, d7);
        d6 = d - 1.5;
        this.lineTo(d6, d7);
        d7 = d4 - 1.0;
        this.lineTo(d6, d7);
        this.stroke();
        this.setColorStroke(new BaseColor(160, 160, 160));
        this.setLineWidth(1.0f);
        this.setLineCap(0);
        this.moveTo(d5, d2 + 1.0);
        this.lineTo(d5, d7);
        this.lineTo(d - 1.0, d7);
        this.stroke();
        this.setColorStroke(new BaseColor(0, 0, 0));
        this.setLineWidth(1.0f);
        this.setLineCap(0);
        this.moveTo(d3 += 2.0, d2 + 2.0);
        d2 = d4 - 2.0;
        this.lineTo(d3, d2);
        this.lineTo(d - 2.0, d2);
        this.stroke();
        this.restoreState();
    }

    public void drawTextField(float f, float f2, float f3, float f4) {
        this.drawTextField((double)f, (double)f2, (double)f3, (double)f4);
    }

    public void ellipse(double d, double d2, double d3, double d4) {
        this.arc(d, d2, d3, d4, 0.0, 360.0);
    }

    public void ellipse(float f, float f2, float f3, float f4) {
        this.ellipse((double)f, (double)f2, (double)f3, (double)f4);
    }

    public void endLayer() {
        if (this.layerDepth != null && !this.layerDepth.isEmpty()) {
            this.layerDepth.remove(this.layerDepth.size() - 1);
            for (int i = this.layerDepth.get((int)(this.layerDepth.size() - 1)).intValue(); i > 0; --i) {
                this.content.append("EMC").append_i(this.separator);
            }
            return;
        }
        throw new IllegalPdfSyntaxException(MessageLocalization.getComposedMessage("unbalanced.layer.operators", new Object[0]));
    }

    public void endMarkedContentSequence() {
        if (this.getMcDepth() == 0) {
            throw new IllegalPdfSyntaxException(MessageLocalization.getComposedMessage("unbalanced.begin.end.marked.content.operators", new Object[0]));
        }
        int n = this.content.size();
        this.setMcDepth(this.getMcDepth() - 1);
        this.content.append("EMC").append_i(this.separator);
        this.markedContentSize += this.content.size() - n;
    }

    public void endText() {
        if (!this.inText) {
            if (this.isTagged()) {
                return;
            }
            throw new IllegalPdfSyntaxException(MessageLocalization.getComposedMessage("unbalanced.begin.end.text.operators", new Object[0]));
        }
        this.inText = false;
        this.content.append("ET").append_i(this.separator);
    }

    public void eoClip() {
        if (this.inText && this.isTagged()) {
            this.endText();
        }
        this.content.append("W*").append_i(this.separator);
    }

    public void eoFill() {
        if (this.inText) {
            if (this.isTagged()) {
                this.endText();
            } else {
                throw new IllegalPdfSyntaxException(MessageLocalization.getComposedMessage("path.construction.operator.inside.text.object", new Object[0]));
            }
        }
        PdfWriter.checkPdfIsoConformance(this.writer, 1, this.state.colorFill);
        PdfWriter.checkPdfIsoConformance(this.writer, 6, this.state.extGState);
        this.content.append("f*").append_i(this.separator);
    }

    public void eoFillStroke() {
        if (this.inText) {
            if (this.isTagged()) {
                this.endText();
            } else {
                throw new IllegalPdfSyntaxException(MessageLocalization.getComposedMessage("path.construction.operator.inside.text.object", new Object[0]));
            }
        }
        PdfWriter.checkPdfIsoConformance(this.writer, 1, this.state.colorFill);
        PdfWriter.checkPdfIsoConformance(this.writer, 1, this.state.colorStroke);
        PdfWriter.checkPdfIsoConformance(this.writer, 6, this.state.extGState);
        this.content.append("B*").append_i(this.separator);
    }

    public void fill() {
        if (this.inText) {
            if (this.isTagged()) {
                this.endText();
            } else {
                throw new IllegalPdfSyntaxException(MessageLocalization.getComposedMessage("path.construction.operator.inside.text.object", new Object[0]));
            }
        }
        PdfWriter.checkPdfIsoConformance(this.writer, 1, this.state.colorFill);
        PdfWriter.checkPdfIsoConformance(this.writer, 6, this.state.extGState);
        this.content.append("f").append_i(this.separator);
    }

    public void fillStroke() {
        if (this.inText) {
            if (this.isTagged()) {
                this.endText();
            } else {
                throw new IllegalPdfSyntaxException(MessageLocalization.getComposedMessage("path.construction.operator.inside.text.object", new Object[0]));
            }
        }
        PdfWriter.checkPdfIsoConformance(this.writer, 1, this.state.colorFill);
        PdfWriter.checkPdfIsoConformance(this.writer, 1, this.state.colorStroke);
        PdfWriter.checkPdfIsoConformance(this.writer, 6, this.state.extGState);
        this.content.append("B").append_i(this.separator);
    }

    public float getCharacterSpacing() {
        return this.state.charSpace;
    }

    protected PdfIndirectReference getCurrentPage() {
        return this.writer.getCurrentPage();
    }

    public PdfContentByte getDuplicate() {
        PdfContentByte pdfContentByte = new PdfContentByte(this.writer);
        pdfContentByte.duplicatedFrom = this;
        return pdfContentByte;
    }

    public PdfContentByte getDuplicate(boolean bl) {
        PdfContentByte pdfContentByte = this.getDuplicate();
        if (bl) {
            pdfContentByte.state = this.state;
            pdfContentByte.stateList = this.stateList;
        }
        return pdfContentByte;
    }

    public float getEffectiveStringWidth(String string2, boolean bl) {
        BaseFont baseFont = this.state.fontDetails.getBaseFont();
        float f = bl ? baseFont.getWidthPointKerned(string2, this.state.size) : baseFont.getWidthPoint(string2, this.state.size);
        float f2 = f;
        if (this.state.charSpace != 0.0f) {
            f2 = f;
            if (string2.length() > 1) {
                f2 = f + this.state.charSpace * (float)(string2.length() - 1);
            }
        }
        f = f2;
        if (this.state.wordSpace != 0.0f) {
            f = f2;
            if (!baseFont.isVertical()) {
                int n = 0;
                do {
                    f = f2;
                    if (n >= string2.length() - 1) break;
                    f = f2;
                    if (string2.charAt(n) == ' ') {
                        f = f2 + this.state.wordSpace;
                    }
                    ++n;
                    f2 = f;
                } while (true);
            }
        }
        f2 = f;
        if ((double)this.state.scale != 100.0) {
            f2 = f * this.state.scale / 100.0f;
        }
        return f2;
    }

    public float getHorizontalScaling() {
        return this.state.scale;
    }

    protected boolean getInText() {
        return this.inText;
    }

    public ByteBuffer getInternalBuffer() {
        return this.content;
    }

    public float getLeading() {
        return this.state.leading;
    }

    protected int getMcDepth() {
        if (this.duplicatedFrom != null) {
            return this.duplicatedFrom.getMcDepth();
        }
        return this.mcDepth;
    }

    protected ArrayList<IAccessibleElement> getMcElements() {
        if (this.duplicatedFrom != null) {
            return this.duplicatedFrom.getMcElements();
        }
        return this.mcElements;
    }

    PageResources getPageResources() {
        return this.pdf.getPageResources();
    }

    public PdfDocument getPdfDocument() {
        return this.pdf;
    }

    public PdfWriter getPdfWriter() {
        return this.writer;
    }

    public PdfOutline getRootOutline() {
        this.checkWriter();
        return this.pdf.getRootOutline();
    }

    public float getWordSpacing() {
        return this.state.wordSpace;
    }

    public float getXTLM() {
        return this.state.xTLM;
    }

    public float getYTLM() {
        return this.state.yTLM;
    }

    public void inheritGraphicState(PdfContentByte pdfContentByte) {
        this.state = pdfContentByte.state;
        this.stateList = pdfContentByte.stateList;
    }

    public boolean isTagged() {
        if (this.writer != null && this.writer.isTagged() && !this.isTaggingSuppressed()) {
            return true;
        }
        return false;
    }

    public boolean isTaggingSuppressed() {
        return this.suppressTagging;
    }

    public void lineTo(double d, double d2) {
        if (this.inText) {
            if (this.isTagged()) {
                this.endText();
            } else {
                throw new IllegalPdfSyntaxException(MessageLocalization.getComposedMessage("path.construction.operator.inside.text.object", new Object[0]));
            }
        }
        this.content.append(d).append(' ').append(d2).append(" l").append_i(this.separator);
    }

    public void lineTo(float f, float f2) {
        this.lineTo((double)f, (double)f2);
    }

    public boolean localDestination(String string2, PdfDestination pdfDestination) {
        return this.pdf.localDestination(string2, pdfDestination);
    }

    public void localGoto(String string2, float f, float f2, float f3, float f4) {
        this.pdf.localGoto(string2, f, f2, f3, f4);
    }

    public void moveText(float f, float f2) {
        if (!this.inText && this.isTagged()) {
            this.beginText(true);
        }
        GraphicState graphicState = this.state;
        graphicState.xTLM += f;
        graphicState = this.state;
        graphicState.yTLM += f2;
        if (this.isTagged() && this.state.xTLM != this.state.tx) {
            this.setTextMatrix(this.state.aTLM, this.state.bTLM, this.state.cTLM, this.state.dTLM, this.state.xTLM, this.state.yTLM);
            return;
        }
        this.content.append(f).append(' ').append(f2).append(" Td").append_i(this.separator);
    }

    public void moveTextWithLeading(float f, float f2) {
        if (!this.inText && this.isTagged()) {
            this.beginText(true);
        }
        GraphicState graphicState = this.state;
        graphicState.xTLM += f;
        graphicState = this.state;
        graphicState.yTLM += f2;
        this.state.leading = - f2;
        if (this.isTagged() && this.state.xTLM != this.state.tx) {
            this.setTextMatrix(this.state.aTLM, this.state.bTLM, this.state.cTLM, this.state.dTLM, this.state.xTLM, this.state.yTLM);
            return;
        }
        this.content.append(f).append(' ').append(f2).append(" TD").append_i(this.separator);
    }

    public void moveTo(double d, double d2) {
        if (this.inText) {
            if (this.isTagged()) {
                this.endText();
            } else {
                throw new IllegalPdfSyntaxException(MessageLocalization.getComposedMessage("path.construction.operator.inside.text.object", new Object[0]));
            }
        }
        this.content.append(d).append(' ').append(d2).append(" m").append_i(this.separator);
    }

    public void moveTo(float f, float f2) {
        this.moveTo((double)f, (double)f2);
    }

    public void newPath() {
        if (this.inText) {
            if (this.isTagged()) {
                this.endText();
            } else {
                throw new IllegalPdfSyntaxException(MessageLocalization.getComposedMessage("path.construction.operator.inside.text.object", new Object[0]));
            }
        }
        this.content.append("n").append_i(this.separator);
    }

    public void newlineShowText(float f, float f2, String string2) {
        this.checkState();
        if (!this.inText && this.isTagged()) {
            this.beginText(true);
        }
        GraphicState graphicState = this.state;
        graphicState.yTLM -= this.state.leading;
        this.content.append(f).append(' ').append(f2);
        this.showText2(string2);
        this.content.append("\"").append_i(this.separator);
        this.state.charSpace = f2;
        this.state.wordSpace = f;
        this.state.tx = this.state.xTLM;
        this.updateTx(string2, 0.0f);
    }

    public void newlineShowText(String string2) {
        this.checkState();
        if (!this.inText && this.isTagged()) {
            this.beginText(true);
        }
        GraphicState graphicState = this.state;
        graphicState.yTLM -= this.state.leading;
        this.showText2(string2);
        this.content.append("'").append_i(this.separator);
        this.state.tx = this.state.xTLM;
        this.updateTx(string2, 0.0f);
    }

    public void newlineText() {
        if (!this.inText && this.isTagged()) {
            this.beginText(true);
        }
        if (this.isTagged() && this.state.xTLM != this.state.tx) {
            this.setTextMatrix(this.state.aTLM, this.state.bTLM, this.state.cTLM, this.state.dTLM, this.state.xTLM, this.state.yTLM);
        }
        GraphicState graphicState = this.state;
        graphicState.yTLM -= this.state.leading;
        this.content.append("T*").append_i(this.separator);
    }

    public void openMCBlock(IAccessibleElement iAccessibleElement) {
        if (this.isTagged()) {
            this.ensureDocumentTagIsOpen();
            if (iAccessibleElement != null && !this.getMcElements().contains(iAccessibleElement)) {
                PdfStructureElement pdfStructureElement = this.openMCBlockInt(iAccessibleElement);
                this.getMcElements().add(iAccessibleElement);
                if (pdfStructureElement != null) {
                    this.pdf.saveStructElement(iAccessibleElement.getId(), pdfStructureElement);
                }
            }
        }
    }

    void outputColorNumbers(BaseColor baseColor, float f) {
        PdfWriter.checkPdfIsoConformance(this.writer, 1, baseColor);
        switch (ExtendedColor.getType(baseColor)) {
            default: {
                throw new RuntimeException(MessageLocalization.getComposedMessage("invalid.color.type", new Object[0]));
            }
            case 3: {
                this.content.append(f);
                return;
            }
            case 2: {
                baseColor = (CMYKColor)baseColor;
                this.content.append(baseColor.getCyan()).append(' ').append(baseColor.getMagenta());
                this.content.append(' ').append(baseColor.getYellow()).append(' ').append(baseColor.getBlack());
                return;
            }
            case 1: {
                this.content.append(((GrayColor)baseColor).getGray());
                return;
            }
            case 0: 
        }
        this.content.append((float)baseColor.getRed() / 255.0f);
        this.content.append(' ');
        this.content.append((float)baseColor.getGreen() / 255.0f);
        this.content.append(' ');
        this.content.append((float)baseColor.getBlue() / 255.0f);
    }

    public void paintShading(PdfShading object) {
        this.writer.addSimpleShading((PdfShading)object);
        PageResources pageResources = this.getPageResources();
        PdfName pdfName = pageResources.addShading(object.getShadingName(), object.getShadingReference());
        this.content.append(pdfName.getBytes()).append(" sh").append_i(this.separator);
        object = object.getColorDetails();
        if (object != null) {
            pageResources.addColor(object.getColorSpaceName(), object.getIndirectReference());
        }
    }

    public void paintShading(PdfShadingPattern pdfShadingPattern) {
        this.paintShading(pdfShadingPattern.getShading());
    }

    public void rectangle(double d, double d2, double d3, double d4) {
        if (this.inText) {
            if (this.isTagged()) {
                this.endText();
            } else {
                throw new IllegalPdfSyntaxException(MessageLocalization.getComposedMessage("path.construction.operator.inside.text.object", new Object[0]));
            }
        }
        this.content.append(d).append(' ').append(d2).append(' ').append(d3).append(' ').append(d4).append(" re").append_i(this.separator);
    }

    public void rectangle(float f, float f2, float f3, float f4) {
        this.rectangle((double)f, (double)f2, (double)f3, (double)f4);
    }

    public void rectangle(Rectangle rectangle) {
        float f = rectangle.getLeft();
        float f2 = rectangle.getBottom();
        float f3 = rectangle.getRight();
        float f4 = rectangle.getTop();
        BaseColor baseColor = rectangle.getBackgroundColor();
        if (baseColor != null) {
            this.saveState();
            this.setColorFill(baseColor);
            this.rectangle(f, f2, f3 - f, f4 - f2);
            this.fill();
            this.restoreState();
        }
        if (!rectangle.hasBorders()) {
            return;
        }
        if (rectangle.isUseVariableBorders()) {
            this.variableRectangle(rectangle);
            return;
        }
        if (rectangle.getBorderWidth() != -1.0f) {
            this.setLineWidth(rectangle.getBorderWidth());
        }
        if ((baseColor = rectangle.getBorderColor()) != null) {
            this.setColorStroke(baseColor);
        }
        if (rectangle.hasBorder(15)) {
            this.rectangle(f, f2, f3 - f, f4 - f2);
        } else {
            if (rectangle.hasBorder(8)) {
                this.moveTo(f3, f2);
                this.lineTo(f3, f4);
            }
            if (rectangle.hasBorder(4)) {
                this.moveTo(f, f2);
                this.lineTo(f, f4);
            }
            if (rectangle.hasBorder(2)) {
                this.moveTo(f, f2);
                this.lineTo(f3, f2);
            }
            if (rectangle.hasBorder(1)) {
                this.moveTo(f, f4);
                this.lineTo(f3, f4);
            }
        }
        this.stroke();
        if (baseColor != null) {
            this.resetRGBColorStroke();
        }
    }

    public void remoteGoto(String string2, int n, float f, float f2, float f3, float f4) {
        this.pdf.remoteGoto(string2, n, f, f2, f3, f4);
    }

    public void remoteGoto(String string2, String string3, float f, float f2, float f3, float f4) {
        this.pdf.remoteGoto(string2, string3, f, f2, f3, f4);
    }

    public void reset() {
        this.reset(true);
    }

    public void reset(boolean bl) {
        this.content.reset();
        this.markedContentSize = 0;
        if (bl) {
            this.sanityCheck();
        }
        this.state = new GraphicState();
        this.stateList = new ArrayList();
    }

    public void resetCMYKColorFill() {
        this.saveColor(new CMYKColor(0, 0, 0, 1), true);
        this.content.append("0 0 0 1 k").append_i(this.separator);
    }

    public void resetCMYKColorStroke() {
        this.saveColor(new CMYKColor(0, 0, 0, 1), false);
        this.content.append("0 0 0 1 K").append_i(this.separator);
    }

    public void resetGrayFill() {
        this.saveColor(new GrayColor(0), true);
        this.content.append("0 g").append_i(this.separator);
    }

    public void resetGrayStroke() {
        this.saveColor(new GrayColor(0), false);
        this.content.append("0 G").append_i(this.separator);
    }

    public void resetRGBColorFill() {
        this.resetGrayFill();
    }

    public void resetRGBColorStroke() {
        this.resetGrayStroke();
    }

    protected void restoreMCBlocks(ArrayList<IAccessibleElement> arrayList) {
        if (this.isTagged() && arrayList != null) {
            this.setMcElements(arrayList);
            for (int i = 0; i < this.getMcElements().size(); ++i) {
                this.openMCBlockInt(this.getMcElements().get(i));
            }
        }
    }

    public void restoreState() {
        PdfWriter.checkPdfIsoConformance(this.writer, 12, "Q");
        if (this.inText && this.isTagged()) {
            this.endText();
        }
        this.content.append("Q").append_i(this.separator);
        int n = this.stateList.size() - 1;
        if (n < 0) {
            throw new IllegalPdfSyntaxException(MessageLocalization.getComposedMessage("unbalanced.save.restore.state.operators", new Object[0]));
        }
        this.state.restore(this.stateList.get(n));
        this.stateList.remove(n);
    }

    public void roundRectangle(double d, double d2, double d3, double d4, double d5) {
        double d6;
        if (d3 < 0.0) {
            d6 = - d3;
            d += d3;
            d3 = d6;
        }
        if (d4 < 0.0) {
            d6 = - d4;
            d2 += d4;
            d4 = d6;
        }
        if (d5 < 0.0) {
            d5 = - d5;
        }
        d6 = d + d5;
        this.moveTo(d6, d2);
        double d7 = d + d3;
        double d8 = d7 - d5;
        this.lineTo(d8, d2);
        double d9 = d5 * (double)0.4477f;
        double d10 = d7 - d9;
        d3 = d2 + d9;
        double d11 = d2 + d5;
        this.curveTo(d10, d2, d7, d3, d7, d11);
        d4 = d2 + d4;
        d5 = d4 - d5;
        this.lineTo(d7, d5);
        double d12 = d4 - d9;
        this.curveTo(d7, d12, d10, d4, d8, d4);
        this.lineTo(d6, d4);
        d7 = d + d9;
        this.curveTo(d7, d4, d, d12, d, d5);
        this.lineTo(d, d11);
        this.curveTo(d, d3, d7, d2, d6, d2);
    }

    public void roundRectangle(float f, float f2, float f3, float f4, float f5) {
        this.roundRectangle((double)f, (double)f2, (double)f3, (double)f4, (double)f5);
    }

    public void sanityCheck() {
        if (this.getMcDepth() != 0) {
            throw new IllegalPdfSyntaxException(MessageLocalization.getComposedMessage("unbalanced.marked.content.operators", new Object[0]));
        }
        if (this.inText) {
            if (this.isTagged()) {
                this.endText();
            } else {
                throw new IllegalPdfSyntaxException(MessageLocalization.getComposedMessage("unbalanced.begin.end.text.operators", new Object[0]));
            }
        }
        if (this.layerDepth != null && !this.layerDepth.isEmpty()) {
            throw new IllegalPdfSyntaxException(MessageLocalization.getComposedMessage("unbalanced.layer.operators", new Object[0]));
        }
        if (!this.stateList.isEmpty()) {
            throw new IllegalPdfSyntaxException(MessageLocalization.getComposedMessage("unbalanced.save.restore.state.operators", new Object[0]));
        }
    }

    protected ArrayList<IAccessibleElement> saveMCBlocks() {
        ArrayList<IAccessibleElement> arrayList = new ArrayList<IAccessibleElement>();
        if (this.isTagged()) {
            arrayList = this.getMcElements();
            for (int i = 0; i < arrayList.size(); ++i) {
                this.closeMCBlockInt(arrayList.get(i));
            }
            this.setMcElements(new ArrayList<IAccessibleElement>());
        }
        return arrayList;
    }

    public void saveState() {
        PdfWriter.checkPdfIsoConformance(this.writer, 12, "q");
        if (this.inText && this.isTagged()) {
            this.endText();
        }
        this.content.append("q").append_i(this.separator);
        this.stateList.add(new GraphicState(this.state));
    }

    public void setAction(PdfAction pdfAction, float f, float f2, float f3, float f4) {
        this.pdf.setAction(pdfAction, f, f2, f3, f4);
    }

    public void setCMYKColorFill(int n, int n2, int n3, int n4) {
        this.saveColor(new CMYKColor(n, n2, n3, n4), true);
        this.content.append((float)(n & 255) / 255.0f);
        this.content.append(' ');
        this.content.append((float)(n2 & 255) / 255.0f);
        this.content.append(' ');
        this.content.append((float)(n3 & 255) / 255.0f);
        this.content.append(' ');
        this.content.append((float)(n4 & 255) / 255.0f);
        this.content.append(" k").append_i(this.separator);
    }

    public void setCMYKColorFillF(float f, float f2, float f3, float f4) {
        this.saveColor(new CMYKColor(f, f2, f3, f4), true);
        this.HelperCMYK(f, f2, f3, f4);
        this.content.append(" k").append_i(this.separator);
    }

    public void setCMYKColorStroke(int n, int n2, int n3, int n4) {
        this.saveColor(new CMYKColor(n, n2, n3, n4), false);
        this.content.append((float)(n & 255) / 255.0f);
        this.content.append(' ');
        this.content.append((float)(n2 & 255) / 255.0f);
        this.content.append(' ');
        this.content.append((float)(n3 & 255) / 255.0f);
        this.content.append(' ');
        this.content.append((float)(n4 & 255) / 255.0f);
        this.content.append(" K").append_i(this.separator);
    }

    public void setCMYKColorStrokeF(float f, float f2, float f3, float f4) {
        this.saveColor(new CMYKColor(f, f2, f3, f4), false);
        this.HelperCMYK(f, f2, f3, f4);
        this.content.append(" K").append_i(this.separator);
    }

    public void setCharacterSpacing(float f) {
        if (!this.inText && this.isTagged()) {
            this.beginText(true);
        }
        this.state.charSpace = f;
        this.content.append(f).append(" Tc").append_i(this.separator);
    }

    public void setColorFill(BaseColor object) {
        switch (ExtendedColor.getType((BaseColor)object)) {
            default: {
                this.setRGBColorFill(object.getRed(), object.getGreen(), object.getBlue());
                break;
            }
            case 7: {
                LabColor labColor = (LabColor)object;
                this.setColorFill(labColor.getLabColorSpace(), labColor.getL(), labColor.getA(), labColor.getB());
                break;
            }
            case 6: {
                DeviceNColor deviceNColor = (DeviceNColor)object;
                this.setColorFill(deviceNColor.getPdfDeviceNColor(), deviceNColor.getTints());
                break;
            }
            case 5: {
                this.setShadingFill(((ShadingColor)object).getPdfShadingPattern());
                break;
            }
            case 4: {
                this.setPatternFill(((PatternColor)object).getPainter());
                break;
            }
            case 3: {
                SpotColor spotColor = (SpotColor)object;
                this.setColorFill(spotColor.getPdfSpotColor(), spotColor.getTint());
                break;
            }
            case 2: {
                CMYKColor cMYKColor = (CMYKColor)object;
                this.setCMYKColorFillF(cMYKColor.getCyan(), cMYKColor.getMagenta(), cMYKColor.getYellow(), cMYKColor.getBlack());
                break;
            }
            case 1: {
                this.setGrayFill(((GrayColor)object).getGray());
            }
        }
        int n = object.getAlpha();
        if (n < 255) {
            object = new PdfGState();
            object.setFillOpacity((float)n / 255.0f);
            this.setGState((PdfGState)object);
        }
    }

    public void setColorFill(PdfDeviceNColor object, float[] arrf) {
        this.checkWriter();
        this.state.colorDetails = this.writer.addSimple((ICachedColorSpace)object);
        Serializable serializable = this.getPageResources().addColor(this.state.colorDetails.getColorSpaceName(), this.state.colorDetails.getIndirectReference());
        this.saveColor(new DeviceNColor((PdfDeviceNColor)object, arrf), true);
        this.content.append(serializable.getBytes()).append(" cs ");
        for (float f : arrf) {
            object = this.content;
            serializable = new StringBuilder();
            serializable.append(f);
            serializable.append(" ");
            object.append(serializable.toString());
        }
        this.content.append("scn").append_i(this.separator);
    }

    public void setColorFill(PdfLabColor object, float f, float f2, float f3) {
        this.checkWriter();
        this.state.colorDetails = this.writer.addSimple((ICachedColorSpace)object);
        Serializable serializable = this.getPageResources().addColor(this.state.colorDetails.getColorSpaceName(), this.state.colorDetails.getIndirectReference());
        this.saveColor(new LabColor((PdfLabColor)object, f, f2, f3), true);
        this.content.append(serializable.getBytes()).append(" cs ");
        object = this.content;
        serializable = new StringBuilder();
        serializable.append(f);
        serializable.append(" ");
        serializable.append(f2);
        serializable.append(" ");
        serializable.append(f3);
        serializable.append(" ");
        object.append(serializable.toString());
        this.content.append("scn").append_i(this.separator);
    }

    public void setColorFill(PdfSpotColor pdfSpotColor, float f) {
        this.checkWriter();
        this.state.colorDetails = this.writer.addSimple(pdfSpotColor);
        PdfName pdfName = this.getPageResources().addColor(this.state.colorDetails.getColorSpaceName(), this.state.colorDetails.getIndirectReference());
        this.saveColor(new SpotColor(pdfSpotColor, f), true);
        this.content.append(pdfName.getBytes()).append(" cs ").append(f).append(" scn").append_i(this.separator);
    }

    public void setColorStroke(BaseColor object) {
        switch (ExtendedColor.getType((BaseColor)object)) {
            default: {
                this.setRGBColorStroke(object.getRed(), object.getGreen(), object.getBlue());
                break;
            }
            case 7: {
                LabColor labColor = (LabColor)object;
                this.setColorStroke(labColor.getLabColorSpace(), labColor.getL(), labColor.getA(), labColor.getB());
                break;
            }
            case 6: {
                DeviceNColor deviceNColor = (DeviceNColor)object;
                this.setColorStroke(deviceNColor.getPdfDeviceNColor(), deviceNColor.getTints());
                break;
            }
            case 5: {
                this.setShadingStroke(((ShadingColor)object).getPdfShadingPattern());
                break;
            }
            case 4: {
                this.setPatternStroke(((PatternColor)object).getPainter());
                break;
            }
            case 3: {
                SpotColor spotColor = (SpotColor)object;
                this.setColorStroke(spotColor.getPdfSpotColor(), spotColor.getTint());
                break;
            }
            case 2: {
                CMYKColor cMYKColor = (CMYKColor)object;
                this.setCMYKColorStrokeF(cMYKColor.getCyan(), cMYKColor.getMagenta(), cMYKColor.getYellow(), cMYKColor.getBlack());
                break;
            }
            case 1: {
                this.setGrayStroke(((GrayColor)object).getGray());
            }
        }
        int n = object.getAlpha();
        if (n < 255) {
            object = new PdfGState();
            object.setStrokeOpacity((float)n / 255.0f);
            this.setGState((PdfGState)object);
        }
    }

    public void setColorStroke(PdfDeviceNColor object, float[] arrf) {
        this.checkWriter();
        this.state.colorDetails = this.writer.addSimple((ICachedColorSpace)object);
        Serializable serializable = this.getPageResources().addColor(this.state.colorDetails.getColorSpaceName(), this.state.colorDetails.getIndirectReference());
        this.saveColor(new DeviceNColor((PdfDeviceNColor)object, arrf), true);
        this.content.append(serializable.getBytes()).append(" CS ");
        for (float f : arrf) {
            object = this.content;
            serializable = new StringBuilder();
            serializable.append(f);
            serializable.append(" ");
            object.append(serializable.toString());
        }
        this.content.append("SCN").append_i(this.separator);
    }

    public void setColorStroke(PdfLabColor object, float f, float f2, float f3) {
        this.checkWriter();
        this.state.colorDetails = this.writer.addSimple((ICachedColorSpace)object);
        Serializable serializable = this.getPageResources().addColor(this.state.colorDetails.getColorSpaceName(), this.state.colorDetails.getIndirectReference());
        this.saveColor(new LabColor((PdfLabColor)object, f, f2, f3), true);
        this.content.append(serializable.getBytes()).append(" CS ");
        object = this.content;
        serializable = new StringBuilder();
        serializable.append(f);
        serializable.append(" ");
        serializable.append(f2);
        serializable.append(" ");
        serializable.append(f3);
        serializable.append(" ");
        object.append(serializable.toString());
        this.content.append("SCN").append_i(this.separator);
    }

    public void setColorStroke(PdfSpotColor pdfSpotColor, float f) {
        this.checkWriter();
        this.state.colorDetails = this.writer.addSimple(pdfSpotColor);
        PdfName pdfName = this.getPageResources().addColor(this.state.colorDetails.getColorSpaceName(), this.state.colorDetails.getIndirectReference());
        this.saveColor(new SpotColor(pdfSpotColor, f), false);
        this.content.append(pdfName.getBytes()).append(" CS ").append(f).append(" SCN").append_i(this.separator);
    }

    public void setDefaultColorspace(PdfName pdfName, PdfObject pdfObject) {
        this.getPageResources().addDefaultColor(pdfName, pdfObject);
    }

    public void setFlatness(double d) {
        if (d >= 0.0 && d <= 100.0) {
            this.content.append(d).append(" i").append_i(this.separator);
        }
    }

    public void setFlatness(float f) {
        this.setFlatness((double)f);
    }

    public void setFontAndSize(BaseFont object, float f) {
        if (!this.inText && this.isTagged()) {
            this.beginText(true);
        }
        this.checkWriter();
        if (f < 1.0E-4f && f > -1.0E-4f) {
            throw new IllegalArgumentException(MessageLocalization.getComposedMessage("font.size.too.small.1", String.valueOf(f)));
        }
        this.state.size = f;
        this.state.fontDetails = this.writer.addSimple((BaseFont)object);
        object = this.getPageResources().addFont(this.state.fontDetails.getFontName(), this.state.fontDetails.getIndirectReference());
        this.content.append(object.getBytes()).append(' ').append(f).append(" Tf").append_i(this.separator);
    }

    public void setGState(PdfGState pdfGState) {
        Object object = this.writer.addSimpleExtGState(pdfGState);
        object = this.getPageResources().addExtGState((PdfName)object[0], (PdfIndirectReference)object[1]);
        this.state.extGState = pdfGState;
        this.content.append(object.getBytes()).append(" gs").append_i(this.separator);
    }

    public void setGrayFill(float f) {
        this.saveColor(new GrayColor(f), true);
        this.content.append(f).append(" g").append_i(this.separator);
    }

    public void setGrayStroke(float f) {
        this.saveColor(new GrayColor(f), false);
        this.content.append(f).append(" G").append_i(this.separator);
    }

    public void setHorizontalScaling(float f) {
        if (!this.inText && this.isTagged()) {
            this.beginText(true);
        }
        this.state.scale = f;
        this.content.append(f).append(" Tz").append_i(this.separator);
    }

    public void setLeading(float f) {
        if (!this.inText && this.isTagged()) {
            this.beginText(true);
        }
        this.state.leading = f;
        this.content.append(f).append(" TL").append_i(this.separator);
    }

    public void setLineCap(int n) {
        if (n >= 0 && n <= 2) {
            this.content.append(n).append(" J").append_i(this.separator);
        }
    }

    public void setLineDash(double d) {
        this.content.append("[] ").append(d).append(" d").append_i(this.separator);
    }

    public void setLineDash(double d, double d2) {
        this.content.append("[").append(d).append("] ").append(d2).append(" d").append_i(this.separator);
    }

    public void setLineDash(double d, double d2, double d3) {
        this.content.append("[").append(d).append(' ').append(d2).append("] ").append(d3).append(" d").append_i(this.separator);
    }

    public void setLineDash(float f) {
        this.setLineDash((double)f);
    }

    public void setLineDash(float f, float f2) {
        this.setLineDash((double)f, (double)f2);
    }

    public void setLineDash(float f, float f2, float f3) {
        this.setLineDash((double)f, (double)f2, (double)f3);
    }

    public final void setLineDash(double[] arrd, double d) {
        this.content.append("[");
        for (int i = 0; i < arrd.length; ++i) {
            this.content.append(arrd[i]);
            if (i >= arrd.length - 1) continue;
            this.content.append(' ');
        }
        this.content.append("] ").append(d).append(" d").append_i(this.separator);
    }

    public final void setLineDash(float[] arrf, float f) {
        this.content.append("[");
        for (int i = 0; i < arrf.length; ++i) {
            this.content.append(arrf[i]);
            if (i >= arrf.length - 1) continue;
            this.content.append(' ');
        }
        this.content.append("] ").append(f).append(" d").append_i(this.separator);
    }

    public void setLineJoin(int n) {
        if (n >= 0 && n <= 2) {
            this.content.append(n).append(" j").append_i(this.separator);
        }
    }

    public void setLineWidth(double d) {
        this.content.append(d).append(" w").append_i(this.separator);
    }

    public void setLineWidth(float f) {
        this.setLineWidth((double)f);
    }

    public void setLiteral(char c) {
        this.content.append(c);
    }

    public void setLiteral(float f) {
        this.content.append(f);
    }

    public void setLiteral(String string2) {
        this.content.append(string2);
    }

    protected void setMcDepth(int n) {
        if (this.duplicatedFrom != null) {
            this.duplicatedFrom.setMcDepth(n);
            return;
        }
        this.mcDepth = n;
    }

    protected void setMcElements(ArrayList<IAccessibleElement> arrayList) {
        if (this.duplicatedFrom != null) {
            this.duplicatedFrom.setMcElements(arrayList);
            return;
        }
        this.mcElements = arrayList;
    }

    public void setMiterLimit(double d) {
        if (d > 1.0) {
            this.content.append(d).append(" M").append_i(this.separator);
        }
    }

    public void setMiterLimit(float f) {
        this.setMiterLimit((double)f);
    }

    public void setPatternFill(PdfPatternPainter pdfPatternPainter) {
        if (pdfPatternPainter.isStencil()) {
            this.setPatternFill(pdfPatternPainter, pdfPatternPainter.getDefaultColor());
            return;
        }
        this.checkWriter();
        PdfName pdfName = this.getPageResources().addPattern(this.writer.addSimplePattern(pdfPatternPainter), pdfPatternPainter.getIndirectReference());
        this.saveColor(new PatternColor(pdfPatternPainter), true);
        this.content.append(PdfName.PATTERN.getBytes()).append(" cs ").append(pdfName.getBytes()).append(" scn").append_i(this.separator);
    }

    public void setPatternFill(PdfPatternPainter pdfPatternPainter, BaseColor baseColor) {
        if (ExtendedColor.getType(baseColor) == 3) {
            this.setPatternFill(pdfPatternPainter, baseColor, ((SpotColor)baseColor).getTint());
            return;
        }
        this.setPatternFill(pdfPatternPainter, baseColor, 0.0f);
    }

    public void setPatternFill(PdfPatternPainter pdfPatternPainter, BaseColor baseColor, float f) {
        this.checkWriter();
        if (!pdfPatternPainter.isStencil()) {
            throw new RuntimeException(MessageLocalization.getComposedMessage("an.uncolored.pattern.was.expected", new Object[0]));
        }
        Object object = this.getPageResources();
        PdfName pdfName = object.addPattern(this.writer.addSimplePattern(pdfPatternPainter), pdfPatternPainter.getIndirectReference());
        ColorDetails colorDetails = this.writer.addSimplePatternColorspace(baseColor);
        object = object.addColor(colorDetails.getColorSpaceName(), colorDetails.getIndirectReference());
        this.saveColor(new UncoloredPattern(pdfPatternPainter, baseColor, f), true);
        this.content.append(object.getBytes()).append(" cs").append_i(this.separator);
        this.outputColorNumbers(baseColor, f);
        this.content.append(' ').append(pdfName.getBytes()).append(" scn").append_i(this.separator);
    }

    public void setPatternStroke(PdfPatternPainter pdfPatternPainter) {
        if (pdfPatternPainter.isStencil()) {
            this.setPatternStroke(pdfPatternPainter, pdfPatternPainter.getDefaultColor());
            return;
        }
        this.checkWriter();
        PdfName pdfName = this.getPageResources().addPattern(this.writer.addSimplePattern(pdfPatternPainter), pdfPatternPainter.getIndirectReference());
        this.saveColor(new PatternColor(pdfPatternPainter), false);
        this.content.append(PdfName.PATTERN.getBytes()).append(" CS ").append(pdfName.getBytes()).append(" SCN").append_i(this.separator);
    }

    public void setPatternStroke(PdfPatternPainter pdfPatternPainter, BaseColor baseColor) {
        if (ExtendedColor.getType(baseColor) == 3) {
            this.setPatternStroke(pdfPatternPainter, baseColor, ((SpotColor)baseColor).getTint());
            return;
        }
        this.setPatternStroke(pdfPatternPainter, baseColor, 0.0f);
    }

    public void setPatternStroke(PdfPatternPainter pdfPatternPainter, BaseColor baseColor, float f) {
        this.checkWriter();
        if (!pdfPatternPainter.isStencil()) {
            throw new RuntimeException(MessageLocalization.getComposedMessage("an.uncolored.pattern.was.expected", new Object[0]));
        }
        Object object = this.getPageResources();
        PdfName pdfName = object.addPattern(this.writer.addSimplePattern(pdfPatternPainter), pdfPatternPainter.getIndirectReference());
        ColorDetails colorDetails = this.writer.addSimplePatternColorspace(baseColor);
        object = object.addColor(colorDetails.getColorSpaceName(), colorDetails.getIndirectReference());
        this.saveColor(new UncoloredPattern(pdfPatternPainter, baseColor, f), false);
        this.content.append(object.getBytes()).append(" CS").append_i(this.separator);
        this.outputColorNumbers(baseColor, f);
        this.content.append(' ').append(pdfName.getBytes()).append(" SCN").append_i(this.separator);
    }

    public void setRGBColorFill(int n, int n2, int n3) {
        this.saveColor(new BaseColor(n, n2, n3), true);
        this.HelperRGB((float)(n & 255) / 255.0f, (float)(n2 & 255) / 255.0f, (float)(n3 & 255) / 255.0f);
        this.content.append(" rg").append_i(this.separator);
    }

    public void setRGBColorFillF(float f, float f2, float f3) {
        this.saveColor(new BaseColor(f, f2, f3), true);
        this.HelperRGB(f, f2, f3);
        this.content.append(" rg").append_i(this.separator);
    }

    public void setRGBColorStroke(int n, int n2, int n3) {
        this.saveColor(new BaseColor(n, n2, n3), false);
        this.HelperRGB((float)(n & 255) / 255.0f, (float)(n2 & 255) / 255.0f, (float)(n3 & 255) / 255.0f);
        this.content.append(" RG").append_i(this.separator);
    }

    public void setRGBColorStrokeF(float f, float f2, float f3) {
        this.saveColor(new BaseColor(f, f2, f3), false);
        this.HelperRGB(f, f2, f3);
        this.content.append(" RG").append_i(this.separator);
    }

    public void setRenderingIntent(PdfName pdfName) {
        this.content.append(pdfName.getBytes()).append(" ri").append_i(this.separator);
    }

    public void setShadingFill(PdfShadingPattern object) {
        this.writer.addSimpleShadingPattern((PdfShadingPattern)object);
        PageResources pageResources = this.getPageResources();
        PdfName pdfName = pageResources.addPattern(object.getPatternName(), object.getPatternReference());
        this.saveColor(new ShadingColor((PdfShadingPattern)object), true);
        this.content.append(PdfName.PATTERN.getBytes()).append(" cs ").append(pdfName.getBytes()).append(" scn").append_i(this.separator);
        object = object.getColorDetails();
        if (object != null) {
            pageResources.addColor(object.getColorSpaceName(), object.getIndirectReference());
        }
    }

    public void setShadingStroke(PdfShadingPattern object) {
        this.writer.addSimpleShadingPattern((PdfShadingPattern)object);
        PageResources pageResources = this.getPageResources();
        PdfName pdfName = pageResources.addPattern(object.getPatternName(), object.getPatternReference());
        this.saveColor(new ShadingColor((PdfShadingPattern)object), false);
        this.content.append(PdfName.PATTERN.getBytes()).append(" CS ").append(pdfName.getBytes()).append(" SCN").append_i(this.separator);
        object = object.getColorDetails();
        if (object != null) {
            pageResources.addColor(object.getColorSpaceName(), object.getIndirectReference());
        }
    }

    public PdfContentByte setSuppressTagging(boolean bl) {
        this.suppressTagging = bl;
        return this;
    }

    public void setTextMatrix(float f, float f2) {
        this.setTextMatrix(1.0f, 0.0f, 0.0f, 1.0f, f, f2);
    }

    public void setTextMatrix(float f, float f2, float f3, float f4, float f5, float f6) {
        if (!this.inText && this.isTagged()) {
            this.beginText(true);
        }
        this.state.xTLM = f5;
        this.state.yTLM = f6;
        this.state.aTLM = f;
        this.state.bTLM = f2;
        this.state.cTLM = f3;
        this.state.dTLM = f4;
        this.state.tx = this.state.xTLM;
        this.content.append(f).append(' ').append(f2).append_i(32).append(f3).append_i(32).append(f4).append_i(32).append(f5).append_i(32).append(f6).append(" Tm").append_i(this.separator);
    }

    public void setTextMatrix(AffineTransform affineTransform) {
        double[] arrd = new double[6];
        affineTransform.getMatrix(arrd);
        this.setTextMatrix((float)arrd[0], (float)arrd[1], (float)arrd[2], (float)arrd[3], (float)arrd[4], (float)arrd[5]);
    }

    public void setTextRenderingMode(int n) {
        if (!this.inText && this.isTagged()) {
            this.beginText(true);
        }
        this.state.textRenderMode = n;
        this.content.append(n).append(" Tr").append_i(this.separator);
    }

    public void setTextRise(double d) {
        if (!this.inText && this.isTagged()) {
            this.beginText(true);
        }
        this.content.append(d).append(" Ts").append_i(this.separator);
    }

    public void setTextRise(float f) {
        this.setTextRise((double)f);
    }

    public void setWordSpacing(float f) {
        if (!this.inText && this.isTagged()) {
            this.beginText(true);
        }
        this.state.wordSpace = f;
        this.content.append(f).append(" Tw").append_i(this.separator);
    }

    public void showText(PdfTextArray object) {
        this.checkState();
        if (!this.inText && this.isTagged()) {
            this.beginText(true);
        }
        if (this.state.fontDetails == null) {
            throw new NullPointerException(MessageLocalization.getComposedMessage("font.and.size.must.be.set.before.writing.any.text", new Object[0]));
        }
        this.content.append("[");
        object = object.getArrayList().iterator();
        block0 : do {
            boolean bl = false;
            while (object.hasNext()) {
                Object object2;
                Object object3 = object.next();
                if (object3 instanceof String) {
                    object2 = (String)object3;
                    this.showText2((String)object2);
                    this.updateTx((String)object2, 0.0f);
                    continue block0;
                }
                if (bl) {
                    this.content.append(' ');
                } else {
                    bl = true;
                }
                object2 = this.content;
                object3 = (Float)object3;
                object2.append(object3.floatValue());
                this.updateTx("", object3.floatValue());
            }
            break;
        } while (true);
        this.content.append("]TJ").append_i(this.separator);
    }

    public void showText(String string2) {
        this.checkState();
        if (!this.inText && this.isTagged()) {
            this.beginText(true);
        }
        this.showText2(string2);
        this.updateTx(string2, 0.0f);
        this.content.append("Tj").append_i(this.separator);
    }

    public void showTextAligned(int n, String string2, float f, float f2, float f3) {
        this.showTextAligned(n, string2, f, f2, f3, false);
    }

    public void showTextAlignedKerned(int n, String string2, float f, float f2, float f3) {
        this.showTextAligned(n, string2, f, f2, f3, true);
    }

    public void showTextGid(String arrobject) {
        this.checkState();
        if (!this.inText && this.isTagged()) {
            this.beginText(true);
        }
        if (this.state.fontDetails == null) {
            throw new NullPointerException(MessageLocalization.getComposedMessage("font.and.size.must.be.set.before.writing.any.text", new Object[0]));
        }
        arrobject = this.state.fontDetails.convertToBytesGid((String)arrobject);
        StringUtils.escapeString((byte[])arrobject[0], this.content);
        GraphicState graphicState = this.state;
        graphicState.tx += (float)((Integer)arrobject[2]).intValue() * 0.001f * this.state.size;
        this.content.append("Tj").append_i(this.separator);
    }

    public void showTextKerned(String string2) {
        if (this.state.fontDetails == null) {
            throw new NullPointerException(MessageLocalization.getComposedMessage("font.and.size.must.be.set.before.writing.any.text", new Object[0]));
        }
        BaseFont baseFont = this.state.fontDetails.getBaseFont();
        if (baseFont.hasKernPairs()) {
            this.showText(PdfContentByte.getKernArray(string2, baseFont));
            return;
        }
        this.showText(string2);
    }

    int size() {
        return this.size(true);
    }

    int size(boolean bl) {
        if (bl) {
            return this.content.size();
        }
        return this.content.size() - this.markedContentSize;
    }

    public void stroke() {
        if (this.inText) {
            if (this.isTagged()) {
                this.endText();
            } else {
                throw new IllegalPdfSyntaxException(MessageLocalization.getComposedMessage("path.construction.operator.inside.text.object", new Object[0]));
            }
        }
        PdfWriter.checkPdfIsoConformance(this.writer, 1, this.state.colorStroke);
        PdfWriter.checkPdfIsoConformance(this.writer, 6, this.state.extGState);
        this.content.append("S").append_i(this.separator);
    }

    public byte[] toPdf(PdfWriter pdfWriter) {
        this.sanityCheck();
        return this.content.toByteArray();
    }

    public String toString() {
        return this.content.toString();
    }

    public void transform(AffineTransform affineTransform) {
        if (this.inText && this.isTagged()) {
            this.endText();
        }
        double[] arrd = new double[6];
        affineTransform.getMatrix(arrd);
        this.state.CTM.concatenate(affineTransform);
        this.content.append(arrd[0]).append(' ').append(arrd[1]).append(' ').append(arrd[2]).append(' ');
        this.content.append(arrd[3]).append(' ').append(arrd[4]).append(' ').append(arrd[5]).append(" cm").append_i(this.separator);
    }

    protected void updateTx(String string2, float f) {
        GraphicState graphicState = this.state;
        graphicState.tx += this.getEffectiveStringWidth(string2, false, f);
    }

    public void variableRectangle(Rectangle object) {
        float f;
        float f2;
        float f3;
        BaseColor baseColor;
        boolean bl;
        boolean bl2;
        float f4;
        float f5;
        float f6;
        boolean bl3;
        float f7;
        float f8;
        BaseColor baseColor2;
        BaseColor baseColor3;
        boolean bl4;
        BaseColor baseColor4;
        block39 : {
            Object object2;
            block38 : {
                block34 : {
                    float f9;
                    float f10;
                    block37 : {
                        block36 : {
                            block35 : {
                                block31 : {
                                    block33 : {
                                        block32 : {
                                            f6 = object.getTop();
                                            f = object.getBottom();
                                            f10 = object.getRight();
                                            f8 = object.getLeft();
                                            f3 = object.getBorderWidthTop();
                                            f2 = object.getBorderWidthBottom();
                                            f9 = object.getBorderWidthRight();
                                            f4 = object.getBorderWidthLeft();
                                            baseColor2 = object.getBorderColorTop();
                                            baseColor = object.getBorderColorBottom();
                                            baseColor3 = object.getBorderColorRight();
                                            baseColor4 = object.getBorderColorLeft();
                                            this.saveState();
                                            this.setLineCap(0);
                                            this.setLineJoin(0);
                                            if (f3 > 0.0f) {
                                                this.setLineWidth(f3);
                                                if (baseColor2 == null) {
                                                    this.resetRGBColorStroke();
                                                } else {
                                                    this.setColorStroke(baseColor2);
                                                }
                                                f5 = f6 - f3 / 2.0f;
                                                this.moveTo(f8, f5);
                                                this.lineTo(f10, f5);
                                                this.stroke();
                                                f5 = f3;
                                                object = baseColor2;
                                                bl = true;
                                            } else {
                                                object = null;
                                                f5 = 0.0f;
                                                bl = false;
                                            }
                                            object2 = object;
                                            f7 = f5;
                                            bl2 = bl;
                                            if (f2 <= 0.0f) break block31;
                                            f7 = f5;
                                            if (f2 != f5) {
                                                this.setLineWidth(f2);
                                                f7 = f2;
                                            }
                                            if (!bl) break block32;
                                            object2 = object;
                                            if (this.compareColors((BaseColor)object, baseColor)) break block33;
                                        }
                                        if (baseColor == null) {
                                            this.resetRGBColorStroke();
                                        } else {
                                            this.setColorStroke(baseColor);
                                        }
                                        object2 = baseColor;
                                        bl = true;
                                    }
                                    f5 = f + f2 / 2.0f;
                                    this.moveTo(f10, f5);
                                    this.lineTo(f8, f5);
                                    this.stroke();
                                    bl2 = bl;
                                }
                                if (f9 <= 0.0f) break block34;
                                f5 = f7;
                                if (f9 != f7) {
                                    this.setLineWidth(f9);
                                    f5 = f9;
                                }
                                if (!bl2) break block35;
                                object = object2;
                                if (this.compareColors((BaseColor)object2, baseColor3)) break block36;
                            }
                            if (baseColor3 == null) {
                                this.resetRGBColorStroke();
                            } else {
                                this.setColorStroke(baseColor3);
                            }
                            object = baseColor3;
                            bl2 = true;
                        }
                        bl3 = this.compareColors(baseColor2, baseColor3);
                        bl4 = this.compareColors(baseColor, baseColor3);
                        float f11 = f10 - f9 / 2.0f;
                        f7 = bl3 ? f6 : f6 - f3;
                        this.moveTo(f11, f7);
                        f7 = bl4 ? f : f + f2;
                        this.lineTo(f11, f7);
                        this.stroke();
                        if (!bl3 || !bl4) break block37;
                        object2 = object;
                        break block38;
                    }
                    if (baseColor3 == null) {
                        this.resetRGBColorFill();
                    } else {
                        this.setColorFill(baseColor3);
                    }
                    if (!bl3) {
                        this.moveTo(f10, f6);
                        f7 = f6 - f3;
                        this.lineTo(f10, f7);
                        this.lineTo(f10 - f9, f7);
                        this.fill();
                    }
                    if (!bl4) {
                        this.moveTo(f10, f);
                        f7 = f + f2;
                        this.lineTo(f10, f7);
                        this.lineTo(f10 - f9, f7);
                        this.fill();
                    }
                    bl = true;
                    break block39;
                }
                f5 = f7;
            }
            baseColor3 = null;
            bl = false;
            object = object2;
        }
        if (f4 > 0.0f) {
            if (f4 != f5) {
                this.setLineWidth(f4);
            }
            if (!bl2 || !this.compareColors((BaseColor)object, baseColor4)) {
                if (baseColor4 == null) {
                    this.resetRGBColorStroke();
                } else {
                    this.setColorStroke(baseColor4);
                }
            }
            bl3 = this.compareColors(baseColor2, baseColor4);
            bl4 = this.compareColors(baseColor, baseColor4);
            f7 = f4 / 2.0f + f8;
            f5 = bl3 ? f6 : f6 - f3;
            this.moveTo(f7, f5);
            f5 = bl4 ? f : f + f2;
            this.lineTo(f7, f5);
            this.stroke();
            if (!bl3 || !bl4) {
                if (!bl || !this.compareColors(baseColor3, baseColor4)) {
                    if (baseColor4 == null) {
                        this.resetRGBColorFill();
                    } else {
                        this.setColorFill(baseColor4);
                    }
                }
                if (!bl3) {
                    this.moveTo(f8, f6);
                    f5 = f6 - f3;
                    this.lineTo(f8, f5);
                    this.lineTo(f8 + f4, f5);
                    this.fill();
                }
                if (!bl4) {
                    this.moveTo(f8, f);
                    f5 = f + f2;
                    this.lineTo(f8, f5);
                    this.lineTo(f8 + f4, f5);
                    this.fill();
                }
            }
        }
        this.restoreState();
    }

    public static class GraphicState {
        protected AffineTransform CTM = new AffineTransform();
        protected float aTLM = 1.0f;
        protected float bTLM = 0.0f;
        protected float cTLM = 0.0f;
        protected float charSpace = 0.0f;
        ColorDetails colorDetails;
        protected BaseColor colorFill = new GrayColor(0);
        protected BaseColor colorStroke = new GrayColor(0);
        protected float dTLM = 1.0f;
        protected PdfObject extGState = null;
        FontDetails fontDetails;
        protected float leading = 0.0f;
        protected float scale = 100.0f;
        float size;
        protected int textRenderMode = 0;
        protected float tx = 0.0f;
        protected float wordSpace = 0.0f;
        protected float xTLM = 0.0f;
        protected float yTLM = 0.0f;

        GraphicState() {
        }

        GraphicState(GraphicState graphicState) {
            this.copyParameters(graphicState);
        }

        void copyParameters(GraphicState graphicState) {
            this.fontDetails = graphicState.fontDetails;
            this.colorDetails = graphicState.colorDetails;
            this.size = graphicState.size;
            this.xTLM = graphicState.xTLM;
            this.yTLM = graphicState.yTLM;
            this.aTLM = graphicState.aTLM;
            this.bTLM = graphicState.bTLM;
            this.cTLM = graphicState.cTLM;
            this.dTLM = graphicState.dTLM;
            this.tx = graphicState.tx;
            this.leading = graphicState.leading;
            this.scale = graphicState.scale;
            this.charSpace = graphicState.charSpace;
            this.wordSpace = graphicState.wordSpace;
            this.colorFill = graphicState.colorFill;
            this.colorStroke = graphicState.colorStroke;
            this.CTM = new AffineTransform(graphicState.CTM);
            this.textRenderMode = graphicState.textRenderMode;
            this.extGState = graphicState.extGState;
        }

        void restore(GraphicState graphicState) {
            this.copyParameters(graphicState);
        }
    }

    static class UncoloredPattern
    extends PatternColor {
        protected BaseColor color;
        protected float tint;

        protected UncoloredPattern(PdfPatternPainter pdfPatternPainter, BaseColor baseColor, float f) {
            super(pdfPatternPainter);
            this.color = baseColor;
            this.tint = f;
        }

        @Override
        public boolean equals(Object object) {
            if (object instanceof UncoloredPattern) {
                object = (UncoloredPattern)object;
                if (object.painter.equals(this.painter) && object.color.equals(this.color) && object.tint == this.tint) {
                    return true;
                }
            }
            return false;
        }
    }

}

