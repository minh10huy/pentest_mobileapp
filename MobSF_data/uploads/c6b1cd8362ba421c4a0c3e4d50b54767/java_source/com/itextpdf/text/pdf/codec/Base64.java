/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf.codec;

import com.itextpdf.text.error_messages.MessageLocalization;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FilterInputStream;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.PrintStream;
import java.io.Serializable;
import java.io.UnsupportedEncodingException;
import java.util.zip.GZIPInputStream;
import java.util.zip.GZIPOutputStream;

public class Base64 {
    public static final int DECODE = 0;
    public static final int DONT_BREAK_LINES = 8;
    public static final int ENCODE = 1;
    private static final byte EQUALS_SIGN = 61;
    private static final byte EQUALS_SIGN_ENC = -1;
    public static final int GZIP = 2;
    private static final int MAX_LINE_LENGTH = 76;
    private static final byte NEW_LINE = 10;
    public static final int NO_OPTIONS = 0;
    public static final int ORDERED = 32;
    private static final String PREFERRED_ENCODING = "UTF-8";
    public static final int URL_SAFE = 16;
    private static final byte WHITE_SPACE_ENC = -5;
    private static final byte[] _ORDERED_ALPHABET;
    private static final byte[] _ORDERED_DECODABET;
    private static final byte[] _STANDARD_ALPHABET;
    private static final byte[] _STANDARD_DECODABET;
    private static final byte[] _URL_SAFE_ALPHABET;
    private static final byte[] _URL_SAFE_DECODABET;

    static {
        _STANDARD_ALPHABET = new byte[]{65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 43, 47};
        _STANDARD_DECODABET = new byte[]{-9, -9, -9, -9, -9, -9, -9, -9, -9, -5, -5, -9, -9, -5, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -5, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, 62, -9, -9, -9, 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -9, -9, -9, -1, -9, -9, -9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -9, -9, -9, -9, -9, -9, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, -9, -9, -9, -9};
        _URL_SAFE_ALPHABET = new byte[]{65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 45, 95};
        _URL_SAFE_DECODABET = new byte[]{-9, -9, -9, -9, -9, -9, -9, -9, -9, -5, -5, -9, -9, -5, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -5, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, 62, -9, -9, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -9, -9, -9, -1, -9, -9, -9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -9, -9, -9, -9, 63, -9, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, -9, -9, -9, -9};
        _ORDERED_ALPHABET = new byte[]{45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122};
        _ORDERED_DECODABET = new byte[]{-9, -9, -9, -9, -9, -9, -9, -9, -9, -5, -5, -9, -9, -5, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -5, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, 0, -9, -9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -9, -9, -9, -1, -9, -9, -9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, -9, -9, -9, -9, 37, -9, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, -9, -9, -9, -9};
    }

    private Base64() {
    }

    static /* synthetic */ byte[] access$200(byte[] arrby, int n, int n2, byte[] arrby2, int n3, int n4) {
        return Base64.encode3to4(arrby, n, n2, arrby2, n3, n4);
    }

    public static byte[] decode(String string2) {
        return Base64.decode(string2, 0);
    }

    /*
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    public static byte[] decode(String object, int n) {
        byte[] arrby;
        GZIPInputStream gZIPInputStream;
        block38 : {
            Object object2;
            block36 : {
                Object object3;
                block34 : {
                    block37 : {
                        GZIPInputStream gZIPInputStream2;
                        block35 : {
                            block33 : {
                                try {
                                    object = object2 = object.getBytes(PREFERRED_ENCODING);
                                    break block33;
                                }
                                catch (UnsupportedEncodingException unsupportedEncodingException) {}
                                object = object.getBytes();
                            }
                            arrby = Base64.decode((byte[])object, 0, ((Object)object).length, n);
                            if (arrby == null) return arrby;
                            if (arrby.length < 4) return arrby;
                            if (35615 != (arrby[0] & 255 | arrby[1] << 8 & 65280)) return arrby;
                            object3 = new byte[2048];
                            gZIPInputStream2 = null;
                            GZIPInputStream gZIPInputStream3 = null;
                            object = new ByteArrayOutputStream();
                            object2 = new ByteArrayInputStream(arrby);
                            gZIPInputStream = new GZIPInputStream((java.io.InputStream)object2);
                            while ((n = gZIPInputStream.read((byte[])object3)) >= 0) {
                                object.write((byte[])object3, 0, n);
                            }
                            object3 = object.toByteArray();
                            try {
                                object.close();
                                break block34;
                            }
                            catch (Exception exception) {}
                            catch (Throwable throwable) {
                                object3 = object;
                                object = throwable;
                                break block35;
                            }
                            catch (Throwable throwable) {
                                gZIPInputStream = gZIPInputStream3;
                                object3 = object;
                                object = throwable;
                                break block35;
                            }
                            catch (Throwable throwable) {
                                object2 = null;
                                gZIPInputStream = gZIPInputStream3;
                                object3 = object;
                                object = throwable;
                                break block35;
                            }
                            catch (Throwable throwable) {
                                object3 = null;
                                object2 = object3;
                                gZIPInputStream = gZIPInputStream3;
                            }
                        }
                        try {
                            object3.close();
                            break block36;
                        }
                        catch (Exception exception) {}
                        catch (IOException iOException) {}
                        object3 = null;
                        object = object3;
                        gZIPInputStream = gZIPInputStream2;
                        break block37;
                        catch (IOException iOException) {}
                        Object var2_11 = null;
                        gZIPInputStream = gZIPInputStream2;
                        object3 = object;
                        object = var2_11;
                        break block37;
                        catch (IOException iOException) {
                            gZIPInputStream = gZIPInputStream2;
                            object3 = object;
                            object = object2;
                            break block37;
                        }
                        catch (IOException iOException) {}
                        object3 = object;
                        object = object2;
                    }
                    try {
                        object3.close();
                        break block38;
                    }
                    catch (Exception exception) {}
                }
                try {
                    gZIPInputStream.close();
                }
                catch (Exception exception) {}
                try {
                    object2.close();
                    return object3;
                }
                catch (Exception exception) {
                    return object3;
                }
            }
            try {
                gZIPInputStream.close();
            }
            catch (Exception exception) {}
            try {
                object2.close();
            }
            catch (Exception exception) {
                throw object;
            }
            throw object;
        }
        try {
            gZIPInputStream.close();
        }
        catch (Exception exception) {}
        try {
            object.close();
            return arrby;
        }
        catch (Exception exception) {
            return arrby;
        }
    }

    public static byte[] decode(byte[] arrby, int n, int n2, int n3) {
        int n4;
        Object object;
        block4 : {
            Object object2 = Base64.getDecodabet(n3);
            object = new byte[n2 * 3 / 4];
            byte[] arrby2 = new byte[4];
            int n5 = n;
            int n6 = 0;
            int n7 = 0;
            do {
                n4 = n7;
                if (n5 >= n + n2) break block4;
                byte by = (byte)(arrby[n5] & 127);
                byte by2 = object2[by];
                if (by2 < -5) break;
                int n8 = n6;
                n4 = n7;
                if (by2 >= -1) {
                    n8 = n6 + 1;
                    arrby2[n6] = by;
                    if (n8 > 3) {
                        n4 = n7 + Base64.decode4to3(arrby2, 0, (byte[])object, n7, n3);
                        if (by == 61) break block4;
                        n8 = 0;
                    } else {
                        n4 = n7;
                    }
                }
                ++n5;
                n6 = n8;
                n7 = n4;
            } while (true);
            object = System.err;
            object2 = new StringBuilder();
            object2.append("Bad Base64 input character at ");
            object2.append(n5);
            object2.append(": ");
            object2.append(arrby[n5]);
            object2.append("(decimal)");
            object.println(object2.toString());
            return null;
        }
        arrby = new byte[n4];
        System.arraycopy(object, 0, arrby, 0, n4);
        return arrby;
    }

    private static int decode4to3(byte[] arrby, int n, byte[] arrby2, int n2, int n3) {
        byte[] arrby3 = Base64.getDecodabet(n3);
        n3 = n + 2;
        if (arrby[n3] == 61) {
            n3 = arrby3[arrby[n]];
            arrby2[n2] = (byte)(((arrby3[arrby[n + 1]] & 255) << 12 | (n3 & 255) << 18) >>> 16);
            return 1;
        }
        int n4 = n + 3;
        if (arrby[n4] == 61) {
            n4 = arrby3[arrby[n]];
            n = arrby3[arrby[n + 1]];
            n = (arrby3[arrby[n3]] & 255) << 6 | ((n & 255) << 12 | (n4 & 255) << 18);
            arrby2[n2] = (byte)(n >>> 16);
            arrby2[n2 + 1] = (byte)(n >>> 8);
            return 2;
        }
        n = (arrby3[arrby[n]] & 255) << 18 | (arrby3[arrby[n + 1]] & 255) << 12 | (arrby3[arrby[n3]] & 255) << 6 | arrby3[arrby[n4]] & 255;
        arrby2[n2] = (byte)(n >> 16);
        arrby2[n2 + 1] = (byte)(n >> 8);
        arrby2[n2 + 2] = (byte)n;
        return 3;
    }

    /*
     * WARNING - Removed back jump from a try to a catch block - possible behaviour change.
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    public static void decodeFileToFile(String object, String object2) {
        block12 : {
            block13 : {
                byte[] arrby = Base64.decodeFromFile((String)object);
                Object var3_10 = null;
                object = null;
                object2 = new BufferedOutputStream(new FileOutputStream((String)object2));
                object2.write(arrby);
                try {
                    object2.close();
                    return;
                }
                catch (Exception exception) {
                    return;
                }
                catch (Throwable throwable) {
                    object = object2;
                    object2 = throwable;
                    break block12;
                }
                catch (IOException iOException) {
                    break block13;
                }
                catch (Throwable throwable) {
                    break block12;
                }
                catch (IOException iOException) {
                    object2 = var3_10;
                }
            }
            object = object2;
            {
                void var2_9;
                var2_9.printStackTrace();
            }
            object2.close();
            return;
        }
        try {
            object.close();
        }
        catch (Exception exception) {
            throw object2;
        }
        throw object2;
    }

    /*
     * WARNING - Removed back jump from a try to a catch block - possible behaviour change.
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    public static byte[] decodeFromFile(String arrby) {
        byte[] arrby2;
        byte[] arrby3;
        Object object2;
        PrintStream printStream;
        Object object;
        block19 : {
            void var0_3;
            block18 : {
                int n;
                printStream = null;
                arrby3 = null;
                object = arrby3;
                object2 = new File((String)arrby);
                object = arrby3;
                if (object2.length() > Integer.MAX_VALUE) {
                    object = arrby3;
                    PrintStream printStream2 = System.err;
                    object = arrby3;
                    StringBuilder stringBuilder = new StringBuilder();
                    object = arrby3;
                    stringBuilder.append("File is too big for this convenience method (");
                    object = arrby3;
                    stringBuilder.append(object2.length());
                    object = arrby3;
                    stringBuilder.append(" bytes).");
                    object = arrby3;
                    printStream2.println(stringBuilder.toString());
                    return null;
                }
                object = arrby3;
                arrby2 = new byte[(int)object2.length()];
                object = arrby3;
                object2 = new InputStream(new BufferedInputStream(new FileInputStream((File)object2)), 0);
                int n2 = 0;
                while ((n = object2.read(arrby2, n2, 4096)) >= 0) {
                    n2 += n;
                }
                arrby3 = new byte[n2];
                System.arraycopy(arrby2, 0, arrby3, 0, n2);
                arrby = arrby3;
                if (object2 == null) return arrby;
                arrby = arrby3;
                try {
                    object2.close();
                    return arrby3;
                }
                catch (Exception exception) {
                    return arrby;
                }
                catch (Throwable throwable) {
                    object = object2;
                    break block18;
                }
                catch (IOException iOException) {}
                arrby3 = null;
                break block19;
                catch (IOException iOException) {
                    break block19;
                }
                catch (Throwable throwable) {}
            }
            if (object == null) throw var0_3;
            try {
                object.close();
            }
            catch (Exception exception) {
                throw var0_3;
            }
            throw var0_3;
            catch (IOException iOException) {}
            arrby3 = null;
            object2 = printStream;
        }
        object = object2;
        {
            printStream = System.err;
            object = object2;
            arrby2 = new byte[]();
            object = object2;
            arrby2.append("Error decoding from file ");
            object = object2;
            arrby2.append((String)arrby);
            object = object2;
            printStream.println(arrby2.toString());
            arrby = arrby3;
            if (object2 == null) return arrby;
            arrby = arrby3;
        }
        object2.close();
        return arrby3;
    }

    /*
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    public static boolean decodeToFile(String string2, String object) {
        block12 : {
            void var0_3;
            Object var4_10;
            block11 : {
                boolean bl = false;
                var4_10 = null;
                Object var3_11 = null;
                object = new OutputStream(new FileOutputStream((String)object), 0);
                object.write(string2.getBytes(PREFERRED_ENCODING));
                bl = true;
                try {
                    object.close();
                    return true;
                }
                catch (Exception exception) {
                    return bl;
                }
                catch (Throwable throwable) {
                    break block11;
                }
                catch (Throwable throwable) {
                    object = var3_11;
                }
            }
            try {
                object.close();
            }
            catch (Exception exception) {
                throw var0_3;
            }
            throw var0_3;
            catch (IOException iOException) {
                object = var4_10;
                break block12;
            }
            catch (IOException iOException) {}
        }
        object.close();
        return false;
    }

    /*
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    public static Object decodeToObject(String object) {
        Object object2;
        block32 : {
            block31 : {
                ObjectInputStream objectInputStream;
                Object object3;
                block26 : {
                    Object object4;
                    block29 : {
                        Object object5;
                        block30 : {
                            void var5_22;
                            block28 : {
                                void var5_20;
                                block27 : {
                                    object = Base64.decode((String)object);
                                    object2 = null;
                                    object = new ByteArrayInputStream((byte[])object);
                                    objectInputStream = new ObjectInputStream((java.io.InputStream)object);
                                    object4 = object;
                                    object2 = objectInputStream;
                                    object3 = objectInputStream.readObject();
                                    try {
                                        object.close();
                                        break block26;
                                    }
                                    catch (Exception exception) {}
                                    catch (ClassNotFoundException classNotFoundException) {
                                        object5 = object;
                                        object = objectInputStream;
                                        break block27;
                                    }
                                    catch (IOException iOException) {
                                        object5 = object;
                                        object = objectInputStream;
                                        break block28;
                                    }
                                    catch (Throwable throwable) {
                                        object4 = object;
                                        object = throwable;
                                        break block29;
                                    }
                                    catch (ClassNotFoundException classNotFoundException) {
                                        object4 = null;
                                        object5 = object;
                                        object = object4;
                                        break block27;
                                    }
                                    catch (IOException iOException) {
                                        object4 = null;
                                        object5 = object;
                                        object = object4;
                                        break block28;
                                    }
                                    catch (Throwable throwable) {
                                        object4 = null;
                                        break block29;
                                    }
                                    catch (ClassNotFoundException classNotFoundException) {
                                        object5 = object = null;
                                    }
                                }
                                object4 = object5;
                                object2 = object;
                                var5_20.printStackTrace();
                                break block30;
                                catch (IOException iOException) {
                                    object5 = object = null;
                                }
                            }
                            object4 = object5;
                            object2 = object;
                            var5_22.printStackTrace();
                        }
                        try {
                            object5.close();
                            break block31;
                        }
                        catch (Exception exception) {}
                        catch (Throwable throwable) {
                            // empty catch block
                        }
                    }
                    try {
                        object4.close();
                        break block32;
                    }
                    catch (Exception exception) {}
                }
                try {
                    objectInputStream.close();
                    return object3;
                }
                catch (Exception exception) {
                    return object3;
                }
            }
            try {
                object.close();
                return null;
            }
            catch (Exception exception) {
                return null;
            }
        }
        try {
            object2.close();
        }
        catch (Exception exception) {
            throw object;
        }
        throw object;
    }

    private static byte[] encode3to4(byte[] arrby, int n, int n2, byte[] arrby2, int n3, int n4) {
        byte[] arrby3 = Base64.getAlphabet(n4);
        int n5 = 0;
        n4 = n2 > 0 ? arrby[n] << 24 >>> 8 : 0;
        int n6 = n2 > 1 ? arrby[n + 1] << 24 >>> 16 : 0;
        if (n2 > 2) {
            n5 = arrby[n + 2] << 24 >>> 24;
        }
        n = n4 | n6 | n5;
        switch (n2) {
            default: {
                return arrby2;
            }
            case 3: {
                arrby2[n3] = arrby3[n >>> 18];
                arrby2[n3 + 1] = arrby3[n >>> 12 & 63];
                arrby2[n3 + 2] = arrby3[n >>> 6 & 63];
                arrby2[n3 + 3] = arrby3[n & 63];
                return arrby2;
            }
            case 2: {
                arrby2[n3] = arrby3[n >>> 18];
                arrby2[n3 + 1] = arrby3[n >>> 12 & 63];
                arrby2[n3 + 2] = arrby3[n >>> 6 & 63];
                arrby2[n3 + 3] = 61;
                return arrby2;
            }
            case 1: 
        }
        arrby2[n3] = arrby3[n >>> 18];
        arrby2[n3 + 1] = arrby3[n >>> 12 & 63];
        arrby2[n3 + 2] = 61;
        arrby2[n3 + 3] = 61;
        return arrby2;
    }

    private static byte[] encode3to4(byte[] arrby, byte[] arrby2, int n, int n2) {
        Base64.encode3to4(arrby2, 0, n, arrby, 0, n2);
        return arrby;
    }

    public static String encodeBytes(byte[] arrby) {
        return Base64.encodeBytes(arrby, 0, arrby.length, 0);
    }

    public static String encodeBytes(byte[] arrby, int n) {
        return Base64.encodeBytes(arrby, 0, arrby.length, n);
    }

    public static String encodeBytes(byte[] arrby, int n, int n2) {
        return Base64.encodeBytes(arrby, n, n2, 0);
    }

    /*
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    public static String encodeBytes(byte[] object, int n, int n2, int n3) {
        void var0_13;
        java.io.OutputStream outputStream;
        block43 : {
            OutputStream outputStream2;
            block42 : {
                block38 : {
                    void var2_25;
                    void var3_26;
                    void var1_24;
                    if ((var3_26 & 2) == 2) {
                        void var12_34;
                        block40 : {
                            void var14_59;
                            void var0_11;
                            block39 : {
                                block41 : {
                                    Object var12_27 = null;
                                    outputStream = new ByteArrayOutputStream();
                                    outputStream2 = new OutputStream(outputStream, var3_26 | true);
                                    GZIPOutputStream gZIPOutputStream = new GZIPOutputStream(outputStream2);
                                    ByteArrayOutputStream byteArrayOutputStream = outputStream;
                                    GZIPOutputStream gZIPOutputStream2 = gZIPOutputStream;
                                    OutputStream outputStream3 = outputStream2;
                                    gZIPOutputStream.write((byte[])object, (int)var1_24, (int)var2_25);
                                    java.io.OutputStream outputStream4 = outputStream;
                                    GZIPOutputStream gZIPOutputStream3 = gZIPOutputStream;
                                    OutputStream outputStream5 = outputStream2;
                                    gZIPOutputStream.close();
                                    gZIPOutputStream.close();
                                    break block38;
                                    catch (IOException iOException) {
                                        GZIPOutputStream gZIPOutputStream4 = gZIPOutputStream;
                                        break block39;
                                    }
                                    catch (Throwable throwable) {
                                        ByteArrayOutputStream byteArrayOutputStream2 = outputStream;
                                        outputStream = outputStream2;
                                        break block40;
                                    }
                                    catch (IOException iOException) {
                                        Object var0_7 = null;
                                        break block39;
                                    }
                                    catch (Throwable throwable) {
                                        Object var10_40 = null;
                                        ByteArrayOutputStream byteArrayOutputStream3 = outputStream;
                                        outputStream = var10_40;
                                        break block40;
                                    }
                                    catch (IOException iOException) {
                                        break block41;
                                    }
                                    catch (Throwable throwable) {
                                        Object var11_47 = null;
                                        outputStream = var11_47;
                                        break block40;
                                    }
                                    catch (IOException iOException) {
                                        outputStream = null;
                                    }
                                }
                                Object var0_10 = null;
                                outputStream2 = null;
                            }
                            ByteArrayOutputStream byteArrayOutputStream = outputStream;
                            void var13_53 = var0_11;
                            OutputStream outputStream6 = outputStream2;
                            var14_59.printStackTrace();
                            var0_11.close();
                            break block42;
                            catch (Throwable throwable) {
                                void var12_32;
                                void var13_54;
                                outputStream = var12_32;
                                void var12_33 = var13_54;
                            }
                        }
                        var12_34.close();
                        break block43;
                    }
                    boolean bl = (var3_26 & 8) == 0;
                    int n4 = var2_25 * 4 / 3;
                    int n5 = var2_25 % 3 > 0 ? 4 : 0;
                    int n6 = bl ? n4 / 76 : 0;
                    byte[] arrby = new byte[n5 + n4 + n6];
                    void var8_64 = var2_25 - 2;
                    n5 = 0;
                    n6 = 0;
                    for (n4 = 0; n4 < var8_64; n4 += 3, n5 += 4) {
                        Base64.encode3to4((byte[])object, n4 + var1_24, 3, arrby, n5, (int)var3_26);
                        if (!bl || (n6 += 4) != 76) continue;
                        arrby[n5 + 4] = 10;
                        ++n5;
                        n6 = 0;
                    }
                    n6 = n5;
                    if (n4 < var2_25) {
                        Base64.encode3to4((byte[])object, n4 + var1_24, (int)(var2_25 - n4), arrby, n5, (int)var3_26);
                        n6 = n5 + 4;
                    }
                    try {
                        return new String(arrby, 0, n6, PREFERRED_ENCODING);
                    }
                    catch (UnsupportedEncodingException unsupportedEncodingException) {
                        return new String(arrby, 0, n6);
                    }
                    catch (Exception exception) {}
                }
                try {
                    outputStream2.close();
                }
                catch (Exception exception) {}
                try {
                    outputStream.close();
                }
                catch (Exception exception) {}
                try {
                    return new String(outputStream.toByteArray(), PREFERRED_ENCODING);
                }
                catch (UnsupportedEncodingException unsupportedEncodingException) {
                    return new String(outputStream.toByteArray());
                }
                catch (Exception exception) {}
            }
            try {
                outputStream2.close();
            }
            catch (Exception exception) {}
            try {
                outputStream.close();
                return null;
            }
            catch (Exception exception) {
                return null;
            }
            catch (Exception exception) {}
        }
        try {
            outputStream.close();
        }
        catch (Exception exception) {}
        try {
            void var11_50;
            var11_50.close();
        }
        catch (Exception exception) {
            throw var0_13;
        }
        throw var0_13;
    }

    /*
     * WARNING - Removed back jump from a try to a catch block - possible behaviour change.
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    public static void encodeFileToFile(String object, String object2) {
        block12 : {
            block13 : {
                String string2 = Base64.encodeFromFile((String)object);
                Object var3_10 = null;
                object = null;
                object2 = new BufferedOutputStream(new FileOutputStream((String)object2));
                object2.write(string2.getBytes("US-ASCII"));
                try {
                    object2.close();
                    return;
                }
                catch (Exception exception) {
                    return;
                }
                catch (Throwable throwable) {
                    object = object2;
                    object2 = throwable;
                    break block12;
                }
                catch (IOException iOException) {
                    break block13;
                }
                catch (Throwable throwable) {
                    break block12;
                }
                catch (IOException iOException) {
                    object2 = var3_10;
                }
            }
            object = object2;
            {
                void var2_9;
                var2_9.printStackTrace();
            }
            object2.close();
            return;
        }
        try {
            object.close();
        }
        catch (Exception exception) {
            throw object2;
        }
        throw object2;
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive exception aggregation
     */
    public static String encodeFromFile(String var0) {
        var3_6 = new File(var0);
        var5_10 = new byte[Math.max((int)((double)var3_6.length() * 1.4), 40)];
        var4_13 = new InputStream(new BufferedInputStream(new FileInputStream((File)var3_6)), 1);
        var1_14 = 0;
        do {
            var3_6 = var4_13;
            var2_15 = var4_13.read(var5_10, var1_14, 4096);
            if (var2_15 < 0) break;
            var1_14 += var2_15;
        } while (true);
        var3_6 = var4_13;
        var5_11 = new String(var5_10, 0, var1_14, "UTF-8");
        var4_13.close();
lbl18: // 2 sources:
        do {
            return var5_11;
            break;
        } while (true);
        catch (Throwable var0_1) {
            var3_6 = null;
            ** GOTO lbl43
        }
lbl23: // 1 sources:
        do {
            var4_13 = null;
lbl25: // 2 sources:
            do {
                var3_6 = var4_13;
                var5_12 = System.err;
                var3_6 = var4_13;
                var6_16 = new StringBuilder();
                var3_6 = var4_13;
                var6_16.append("Error encoding from file ");
                var3_6 = var4_13;
                var6_16.append(var0);
                var3_6 = var4_13;
                var5_12.println(var6_16.toString());
                var4_13.close();
                return null;
                catch (Throwable var0_2) {
                    // empty catch block
                }
lbl43: // 3 sources:
                var3_6.close();
lbl44: // 2 sources:
                do {
                    throw var0_3;
                    break;
                } while (true);
                break;
            } while (true);
            break;
        } while (true);
        catch (IOException var3_7) {
            ** continue;
        }
        catch (IOException var3_8) {
            ** continue;
        }
        catch (Exception var0_4) {
            ** continue;
        }
        catch (Exception var0_5) {
            return null;
        }
        catch (Exception var3_9) {
            ** continue;
        }
    }

    public static String encodeObject(Serializable serializable) {
        return Base64.encodeObject(serializable, 0);
    }

    /*
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    public static String encodeObject(Serializable object, int n) {
        Object object2;
        void var0_6;
        Object object3;
        Object object4;
        block49 : {
            Object object5;
            block48 : {
                OutputStream outputStream;
                block47 : {
                    block45 : {
                        Object object7;
                        Object object6;
                        Object object8;
                        Object object9;
                        block46 : {
                            block44 : {
                                object5 = null;
                                object2 = new ByteArrayOutputStream();
                                outputStream = new OutputStream((java.io.OutputStream)object2, n | 1);
                                if ((n & 2) == 2) {
                                    object4 = new GZIPOutputStream(outputStream);
                                    try {
                                        object5 = object3 = new ObjectOutputStream((java.io.OutputStream)object4);
                                        object3 = object4;
                                        object4 = object5;
                                        break block44;
                                    }
                                    catch (Throwable throwable) {
                                        object3 = outputStream;
                                        break block45;
                                    }
                                    catch (IOException iOException) {
                                        object = object4;
                                        object4 = null;
                                        object5 = object2;
                                        object2 = outputStream;
                                        break block46;
                                    }
                                }
                                try {
                                    object4 = new ObjectOutputStream(outputStream);
                                    object3 = null;
                                }
                                catch (Throwable throwable) {
                                    object4 = null;
                                    object3 = outputStream;
                                    break block45;
                                }
                                catch (IOException iOException) {
                                    object = object4 = null;
                                    object5 = object2;
                                    object2 = outputStream;
                                    break block46;
                                }
                            }
                            object7 = object3;
                            object6 = object2;
                            object8 = outputStream;
                            object9 = object4;
                            object4.writeObject(object);
                            try {
                                object4.close();
                                break block47;
                            }
                            catch (Exception exception) {}
                            catch (IOException iOException) {
                                object = object3;
                                object5 = object2;
                                object2 = outputStream;
                                object3 = iOException;
                                break block46;
                            }
                            catch (Throwable throwable) {
                                object3 = object4 = null;
                                break block45;
                            }
                            catch (IOException iOException) {
                                object3 = object = (object4 = null);
                                object5 = object2;
                                object2 = object3;
                                object3 = iOException;
                                break block46;
                            }
                            catch (Throwable throwable) {
                                object3 = object2 = (object4 = null);
                                break block45;
                            }
                            catch (IOException iOException) {
                                object2 = object5 = (object = (object4 = null));
                            }
                        }
                        object7 = object;
                        object6 = object5;
                        object8 = object2;
                        object9 = object4;
                        object3.printStackTrace();
                        try {
                            object4.close();
                            break block48;
                        }
                        catch (Exception exception) {}
                        catch (Throwable throwable) {
                            object5 = object9;
                            object4 = object7;
                            object3 = object8;
                            object2 = object6;
                        }
                    }
                    try {
                        object5.close();
                        break block49;
                    }
                    catch (Exception exception) {}
                }
                try {
                    object3.close();
                }
                catch (Exception exception) {}
                try {
                    outputStream.close();
                }
                catch (Exception exception) {}
                try {
                    object2.close();
                }
                catch (Exception exception) {}
                try {
                    return new String(object2.toByteArray(), PREFERRED_ENCODING);
                }
                catch (UnsupportedEncodingException unsupportedEncodingException) {
                    return new String(object2.toByteArray());
                }
            }
            try {
                object.close();
            }
            catch (Exception exception) {}
            try {
                object2.close();
            }
            catch (Exception exception) {}
            try {
                object5.close();
                return null;
            }
            catch (Exception exception) {
                return null;
            }
        }
        try {
            object4.close();
        }
        catch (Exception exception) {}
        try {
            object3.close();
        }
        catch (Exception exception) {}
        try {
            object2.close();
        }
        catch (Exception exception) {
            throw var0_6;
        }
        throw var0_6;
    }

    /*
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    public static boolean encodeToFile(byte[] arrby, String object) {
        boolean bl;
        block12 : {
            void var0_3;
            Object var4_10;
            block11 : {
                bl = true;
                var4_10 = null;
                Object var3_11 = null;
                object = new OutputStream(new FileOutputStream((String)object), 1);
                object.write(arrby);
                try {
                    object.close();
                    return true;
                }
                catch (Exception exception) {
                    return bl;
                }
                catch (Throwable throwable) {
                    break block11;
                }
                catch (Throwable throwable) {
                    object = var3_11;
                }
            }
            try {
                object.close();
            }
            catch (Exception exception) {
                throw var0_3;
            }
            throw var0_3;
            catch (IOException iOException) {
                object = var4_10;
                break block12;
            }
            catch (IOException iOException) {}
        }
        bl = false;
        object.close();
        return false;
    }

    private static final byte[] getAlphabet(int n) {
        if ((n & 16) == 16) {
            return _URL_SAFE_ALPHABET;
        }
        if ((n & 32) == 32) {
            return _ORDERED_ALPHABET;
        }
        return _STANDARD_ALPHABET;
    }

    private static final byte[] getDecodabet(int n) {
        if ((n & 16) == 16) {
            return _URL_SAFE_DECODABET;
        }
        if ((n & 32) == 32) {
            return _ORDERED_DECODABET;
        }
        return _STANDARD_DECODABET;
    }

    private static final void usage(String string2) {
        System.err.println(string2);
        System.err.println("Usage: java Base64 -e|-d inputfile outputfile");
    }

    public static class InputStream
    extends FilterInputStream {
        private byte[] alphabet;
        private boolean breakLines;
        private byte[] buffer;
        private int bufferLength;
        private byte[] decodabet;
        private boolean encode;
        private int lineLength;
        private int numSigBytes;
        private int options;
        private int position;

        public InputStream(java.io.InputStream inputStream) {
            this(inputStream, 0);
        }

        public InputStream(java.io.InputStream inputStream, int n) {
            super(inputStream);
            boolean bl = true;
            boolean bl2 = (n & 8) != 8;
            this.breakLines = bl2;
            bl2 = (n & 1) == 1 ? bl : false;
            this.encode = bl2;
            int n2 = this.encode ? 4 : 3;
            this.bufferLength = n2;
            this.buffer = new byte[this.bufferLength];
            this.position = -1;
            this.lineLength = 0;
            this.options = n;
            this.alphabet = Base64.getAlphabet(n);
            this.decodabet = Base64.getDecodabet(n);
        }

        /*
         * Unable to fully structure code
         * Enabled aggressive block sorting
         * Enabled unnecessary exception pruning
         * Enabled aggressive exception aggregation
         * Lifted jumps to return sites
         */
        @Override
        public int read() throws IOException {
            if (this.position < 0) {
                if (this.encode) {
                    var5_1 = new byte[3];
                    var2_3 = 0;
                    for (var1_2 = 0; var1_2 < 3; ++var1_2) {
                        block13 : {
                            try {
                                var4_6 = this.in.read();
                                var3_5 = var2_3;
                                ** if (var4_6 < 0) goto lbl-1000
                            }
                            catch (IOException var6_7) {
                                var3_5 = var2_3;
                                if (var1_2 != 0) break block13;
                                throw var6_7;
                            }
lbl-1000: // 1 sources:
                            {
                                var5_1[var1_2] = (byte)var4_6;
                                var3_5 = var2_3 + 1;
                            }
lbl-1000: // 2 sources:
                            {
                            }
                        }
                        var2_3 = var3_5;
                    }
                    if (var2_3 <= 0) return -1;
                    Base64.access$200(var5_1, 0, var2_3, this.buffer, 0, this.options);
                    this.position = 0;
                    this.numSigBytes = 4;
                } else {
                    block14 : {
                        var5_1 = new byte[4];
                        var1_2 = 0;
                        while (var1_2 < 4) {
                            while ((var2_4 = this.in.read()) >= 0 && this.decodabet[var2_4 & 127] <= -5) {
                            }
                            if (var2_4 < 0) {
                                if (var1_2 != 4) {
                                    if (var1_2 != 0) throw new IOException(MessageLocalization.getComposedMessage("improperly.padded.base64.input", new Object[0]));
                                    return -1;
                                }
                                break block14;
                            }
                            var5_1[var1_2] = (byte)var2_4;
                            ++var1_2;
                        }
                        return -1;
                    }
                    this.numSigBytes = Base64.access$300(var5_1, 0, this.buffer, 0, this.options);
                    this.position = 0;
                }
            }
            if (this.position < 0) throw new IOException(MessageLocalization.getComposedMessage("error.in.base64.code.reading.stream", new Object[0]));
            if (this.position >= this.numSigBytes) {
                return -1;
            }
            if (this.encode && this.breakLines && this.lineLength >= 76) {
                this.lineLength = 0;
                return 10;
            }
            ++this.lineLength;
            var5_1 = this.buffer;
            var1_2 = this.position;
            this.position = var1_2 + 1;
            var1_2 = var5_1[var1_2];
            if (this.position < this.bufferLength) return var1_2 & 255;
            this.position = -1;
            return var1_2 & 255;
        }

        @Override
        public int read(byte[] arrby, int n, int n2) throws IOException {
            int n3;
            for (n3 = 0; n3 < n2; ++n3) {
                int n4 = this.read();
                if (n4 >= 0) {
                    arrby[n + n3] = (byte)n4;
                    continue;
                }
                if (n3 != 0) break;
                return -1;
            }
            return n3;
        }
    }

    public static class OutputStream
    extends FilterOutputStream {
        private byte[] alphabet;
        private byte[] b4;
        private boolean breakLines;
        private byte[] buffer;
        private int bufferLength;
        private byte[] decodabet;
        private boolean encode;
        private int lineLength;
        private int options;
        private int position;
        private boolean suspendEncoding;

        public OutputStream(java.io.OutputStream outputStream) {
            this(outputStream, 1);
        }

        public OutputStream(java.io.OutputStream outputStream, int n) {
            super(outputStream);
            boolean bl = true;
            boolean bl2 = (n & 8) != 8;
            this.breakLines = bl2;
            bl2 = (n & 1) == 1 ? bl : false;
            this.encode = bl2;
            int n2 = this.encode ? 3 : 4;
            this.bufferLength = n2;
            this.buffer = new byte[this.bufferLength];
            this.position = 0;
            this.lineLength = 0;
            this.suspendEncoding = false;
            this.b4 = new byte[4];
            this.options = n;
            this.alphabet = Base64.getAlphabet(n);
            this.decodabet = Base64.getDecodabet(n);
        }

        @Override
        public void close() throws IOException {
            this.flushBase64();
            super.close();
            this.buffer = null;
            this.out = null;
        }

        public void flushBase64() throws IOException {
            if (this.position > 0) {
                if (this.encode) {
                    this.out.write(Base64.encode3to4(this.b4, this.buffer, this.position, this.options));
                    this.position = 0;
                    return;
                }
                throw new IOException(MessageLocalization.getComposedMessage("base64.input.not.properly.padded", new Object[0]));
            }
        }

        public void resumeEncoding() {
            this.suspendEncoding = false;
        }

        public void suspendEncoding() throws IOException {
            this.flushBase64();
            this.suspendEncoding = true;
        }

        @Override
        public void write(int n) throws IOException {
            if (this.suspendEncoding) {
                this.out.write(n);
                return;
            }
            if (this.encode) {
                byte[] arrby = this.buffer;
                int n2 = this.position;
                this.position = n2 + 1;
                arrby[n2] = (byte)n;
                if (this.position >= this.bufferLength) {
                    this.out.write(Base64.encode3to4(this.b4, this.buffer, this.bufferLength, this.options));
                    this.lineLength += 4;
                    if (this.breakLines && this.lineLength >= 76) {
                        this.out.write(10);
                        this.lineLength = 0;
                    }
                    this.position = 0;
                    return;
                }
            } else {
                byte[] arrby = this.decodabet;
                int n3 = n & 127;
                if (arrby[n3] > -5) {
                    arrby = this.buffer;
                    n3 = this.position;
                    this.position = n3 + 1;
                    arrby[n3] = (byte)n;
                    if (this.position >= this.bufferLength) {
                        n = Base64.decode4to3(this.buffer, 0, this.b4, 0, this.options);
                        this.out.write(this.b4, 0, n);
                        this.position = 0;
                        return;
                    }
                } else if (this.decodabet[n3] != -5) {
                    throw new IOException(MessageLocalization.getComposedMessage("invalid.character.in.base64.data", new Object[0]));
                }
            }
        }

        @Override
        public void write(byte[] arrby, int n, int n2) throws IOException {
            if (this.suspendEncoding) {
                this.out.write(arrby, n, n2);
                return;
            }
            for (int i = 0; i < n2; ++i) {
                this.write(arrby[n + i]);
            }
        }
    }

}

