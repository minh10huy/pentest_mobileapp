/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf;

import com.itextpdf.text.error_messages.MessageLocalization;
import com.itextpdf.text.pdf.ByteBuffer;
import com.itextpdf.text.pdf.IntHashtable;
import com.itextpdf.text.pdf.PRIndirectReference;
import com.itextpdf.text.pdf.PdfAction;
import com.itextpdf.text.pdf.PdfArray;
import com.itextpdf.text.pdf.PdfBoolean;
import com.itextpdf.text.pdf.PdfDictionary;
import com.itextpdf.text.pdf.PdfEncodings;
import com.itextpdf.text.pdf.PdfIndirectObject;
import com.itextpdf.text.pdf.PdfIndirectReference;
import com.itextpdf.text.pdf.PdfName;
import com.itextpdf.text.pdf.PdfNull;
import com.itextpdf.text.pdf.PdfNumber;
import com.itextpdf.text.pdf.PdfObject;
import com.itextpdf.text.pdf.PdfReader;
import com.itextpdf.text.pdf.PdfString;
import com.itextpdf.text.pdf.PdfWriter;
import com.itextpdf.text.pdf.SimpleNamedDestination;
import com.itextpdf.text.xml.XMLUtil;
import com.itextpdf.text.xml.simpleparser.IanaEncodings;
import com.itextpdf.text.xml.simpleparser.SimpleXMLDocHandler;
import com.itextpdf.text.xml.simpleparser.SimpleXMLParser;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.Reader;
import java.io.Writer;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.ListIterator;
import java.util.Map;
import java.util.Set;
import java.util.Stack;
import java.util.StringTokenizer;

public final class SimpleBookmark
implements SimpleXMLDocHandler {
    private final Stack<HashMap<String, Object>> attr = new Stack();
    private ArrayList<HashMap<String, Object>> topList;

    private SimpleBookmark() {
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    private static List<HashMap<String, Object>> bookmarkDepth(PdfReader pdfReader, PdfDictionary pdfDictionary, IntHashtable intHashtable, boolean bl) {
        ArrayList<HashMap<String, Object>> arrayList = new ArrayList<HashMap<String, Object>>();
        do {
            Object object;
            HashMap<String, Object> hashMap;
            block30 : {
                Object object2;
                if (pdfDictionary == null) {
                    return arrayList;
                }
                hashMap = new HashMap<String, Object>();
                hashMap.put("Title", ((PdfString)PdfReader.getPdfObjectRelease(pdfDictionary.get(PdfName.TITLE))).toUnicodeString());
                object = (PdfArray)PdfReader.getPdfObjectRelease(pdfDictionary.get(PdfName.C));
                int n = 2;
                if (object != null && object.size() == 3) {
                    object2 = new ByteBuffer();
                    object2.append(object.getAsNumber(0).floatValue()).append(' ');
                    object2.append(object.getAsNumber(1).floatValue()).append(' ');
                    object2.append(object.getAsNumber(2).floatValue());
                    hashMap.put("Color", PdfEncodings.convertToString(object2.toByteArray(), null));
                }
                if ((object = (PdfNumber)PdfReader.getPdfObjectRelease(pdfDictionary.get(PdfName.F))) != null) {
                    int n2 = object.intValue();
                    object = "";
                    if ((n2 & 1) != 0) {
                        object = new StringBuilder();
                        object.append("");
                        object.append("italic ");
                        object = object.toString();
                    }
                    object2 = object;
                    if ((n2 & 2) != 0) {
                        object2 = new StringBuilder();
                        object2.append((String)object);
                        object2.append("bold ");
                        object2 = object2.toString();
                    }
                    if ((object = object2.trim()).length() != 0) {
                        hashMap.put("Style", object);
                    }
                }
                if ((object = (PdfNumber)PdfReader.getPdfObjectRelease(pdfDictionary.get(PdfName.COUNT))) != null && object.intValue() < 0) {
                    hashMap.put("Open", "false");
                }
                try {
                    PdfDictionary pdfDictionary2;
                    block32 : {
                        block35 : {
                            block31 : {
                                block34 : {
                                    block33 : {
                                        object = PdfReader.getPdfObjectRelease(pdfDictionary.get(PdfName.DEST));
                                        if (object != null) {
                                            SimpleBookmark.mapGotoBookmark(hashMap, (PdfObject)object, intHashtable);
                                            break block30;
                                        }
                                        pdfDictionary2 = (PdfDictionary)PdfReader.getPdfObjectRelease(pdfDictionary.get(PdfName.A));
                                        if (pdfDictionary2 == null) break block30;
                                        if (PdfName.GOTO.equals(PdfReader.getPdfObjectRelease(pdfDictionary2.get(PdfName.S)))) {
                                            object = PdfReader.getPdfObjectRelease(pdfDictionary2.get(PdfName.D));
                                            if (object != null) {
                                                SimpleBookmark.mapGotoBookmark(hashMap, (PdfObject)object, intHashtable);
                                            }
                                            break block30;
                                        }
                                        if (PdfName.URI.equals(PdfReader.getPdfObjectRelease(pdfDictionary2.get(PdfName.S)))) {
                                            hashMap.put("Action", "URI");
                                            hashMap.put("URI", ((PdfString)PdfReader.getPdfObjectRelease(pdfDictionary2.get(PdfName.URI))).toUnicodeString());
                                            break block30;
                                        }
                                        if (PdfName.JAVASCRIPT.equals(PdfReader.getPdfObjectRelease(pdfDictionary2.get(PdfName.S)))) {
                                            hashMap.put("Action", "JS");
                                            hashMap.put("Code", PdfReader.getPdfObjectRelease(pdfDictionary2.get(PdfName.JS)).toString());
                                            break block30;
                                        }
                                        if (!PdfName.GOTOR.equals(PdfReader.getPdfObjectRelease(pdfDictionary2.get(PdfName.S)))) break block31;
                                        object = PdfReader.getPdfObjectRelease(pdfDictionary2.get(PdfName.D));
                                        if (object == null) break block32;
                                        if (!object.isString()) break block33;
                                        hashMap.put("Named", object.toString());
                                        break block32;
                                    }
                                    if (!object.isName()) break block34;
                                    hashMap.put("NamedN", PdfName.decodeName(object.toString()));
                                    break block32;
                                }
                                if (!object.isArray()) break block32;
                                object = (PdfArray)object;
                                object2 = new StringBuffer();
                                object2.append(object.getPdfObject(0).toString());
                                object2.append(' ');
                                object2.append(object.getPdfObject(1).toString());
                                break block35;
                            }
                            if (PdfName.LAUNCH.equals(PdfReader.getPdfObjectRelease(pdfDictionary2.get(PdfName.S)))) {
                                hashMap.put("Action", "Launch");
                                object = object2 = PdfReader.getPdfObjectRelease(pdfDictionary2.get(PdfName.F));
                                if (object2 == null) {
                                    object = PdfReader.getPdfObjectRelease(pdfDictionary2.get(PdfName.WIN));
                                }
                                if (object != null) {
                                    if (object.isString()) {
                                        hashMap.put("File", ((PdfString)object).toUnicodeString());
                                    } else if (object.isDictionary() && (object = PdfReader.getPdfObjectRelease(((PdfDictionary)object).get(PdfName.F))).isString()) {
                                        hashMap.put("File", ((PdfString)object).toUnicodeString());
                                    }
                                }
                            }
                            break block30;
                        }
                        while (n < object.size()) {
                            object2.append(' ');
                            object2.append(object.getPdfObject(n).toString());
                            ++n;
                        }
                        hashMap.put("Page", object2.toString());
                    }
                    hashMap.put("Action", "GoToR");
                    object = PdfReader.getPdfObjectRelease(pdfDictionary2.get(PdfName.F));
                    if (object != null) {
                        if (object.isString()) {
                            hashMap.put("File", ((PdfString)object).toUnicodeString());
                        } else if (object.isDictionary() && (object = PdfReader.getPdfObject(((PdfDictionary)object).get(PdfName.F))).isString()) {
                            hashMap.put("File", ((PdfString)object).toUnicodeString());
                        }
                    }
                    if ((object = PdfReader.getPdfObjectRelease(pdfDictionary2.get(PdfName.NEWWINDOW))) != null) {
                        hashMap.put("NewWindow", object.toString());
                    }
                }
                catch (Exception exception) {}
            }
            if ((object = (PdfDictionary)PdfReader.getPdfObjectRelease(pdfDictionary.get(PdfName.FIRST))) != null) {
                hashMap.put("Kids", SimpleBookmark.bookmarkDepth(pdfReader, (PdfDictionary)object, intHashtable, false));
            }
            arrayList.add(hashMap);
            if (bl) {
                return arrayList;
            }
            pdfDictionary = (PdfDictionary)PdfReader.getPdfObjectRelease(pdfDictionary.get(PdfName.NEXT));
        } while (true);
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    static void createOutlineAction(PdfDictionary pdfDictionary, HashMap<String, Object> object, PdfWriter object2, boolean bl) {
        PdfDictionary pdfDictionary2;
        block25 : {
            PdfArray pdfArray;
            block26 : {
                int n;
                StringTokenizer stringTokenizer;
                block27 : {
                    Object object3;
                    block23 : {
                        StringTokenizer stringTokenizer2;
                        block24 : {
                            try {
                                object3 = (String)object.get("Action");
                                boolean bl2 = "GoTo".equals(object3);
                                int n2 = 0;
                                n = 0;
                                if (bl2) {
                                    object3 = (String)object.get("Named");
                                    if (object3 != null) {
                                        if (bl) {
                                            pdfDictionary.put(PdfName.DEST, new PdfName((String)object3));
                                            return;
                                        }
                                        pdfDictionary.put(PdfName.DEST, new PdfString((String)object3, null));
                                        return;
                                    }
                                    if ((object = (String)object.get("Page")) == null) return;
                                    object3 = new PdfArray();
                                    stringTokenizer2 = new StringTokenizer((String)object);
                                    object3.add(object2.getPageReference(Integer.parseInt(stringTokenizer2.nextToken())));
                                    if (!stringTokenizer2.hasMoreTokens()) {
                                        object3.add(PdfName.XYZ);
                                        object3.add(new float[]{0.0f, 10000.0f, 0.0f});
                                        break block23;
                                    }
                                    object = object2 = stringTokenizer2.nextToken();
                                    if (object2.startsWith("/")) {
                                        object = object2.substring(1);
                                    }
                                    object3.add(new PdfName((String)object));
                                    break block24;
                                }
                                if ("GoToR".equals(object3)) {
                                    pdfDictionary2 = new PdfDictionary();
                                    object2 = (String)object.get("Named");
                                    if (object2 != null) {
                                        pdfDictionary2.put(PdfName.D, new PdfString((String)object2, null));
                                        break block25;
                                    }
                                    object2 = (String)object.get("NamedN");
                                    if (object2 != null) {
                                        pdfDictionary2.put(PdfName.D, new PdfName((String)object2));
                                        break block25;
                                    }
                                    object2 = (String)object.get("Page");
                                    if (object2 == null) break block25;
                                    pdfArray = new PdfArray();
                                    stringTokenizer = new StringTokenizer((String)object2);
                                    pdfArray.add(new PdfNumber(stringTokenizer.nextToken()));
                                    if (!stringTokenizer.hasMoreTokens()) {
                                        pdfArray.add(PdfName.XYZ);
                                        pdfArray.add(new float[]{0.0f, 10000.0f, 0.0f});
                                        break block26;
                                    }
                                    object2 = object3 = stringTokenizer.nextToken();
                                    if (object3.startsWith("/")) {
                                        object2 = object3.substring(1);
                                    }
                                    pdfArray.add(new PdfName((String)object2));
                                    break block27;
                                }
                                if ("URI".equals(object3)) {
                                    if ((object = (String)object.get("URI")) == null) return;
                                    object2 = new PdfDictionary();
                                    object2.put(PdfName.S, PdfName.URI);
                                    object2.put(PdfName.URI, new PdfString((String)object));
                                    pdfDictionary.put(PdfName.A, (PdfObject)object2);
                                    return;
                                }
                                if ("JS".equals(object3)) {
                                    if ((object = (String)object.get("Code")) == null) return;
                                    pdfDictionary.put(PdfName.A, PdfAction.javaScript((String)object, (PdfWriter)object2));
                                    return;
                                }
                                if (!"Launch".equals(object3)) return;
                                if ((object = (String)object.get("File")) == null) return;
                                object2 = new PdfDictionary();
                                object2.put(PdfName.S, PdfName.LAUNCH);
                                object2.put(PdfName.F, new PdfString((String)object));
                                pdfDictionary.put(PdfName.A, (PdfObject)object2);
                                return;
                            }
                            catch (Exception exception) {
                                return;
                            }
                        }
                        while (n < 4 && stringTokenizer2.hasMoreTokens()) {
                            object = stringTokenizer2.nextToken();
                            if (object.equals("null")) {
                                object3.add(PdfNull.PDFNULL);
                            } else {
                                object3.add(new PdfNumber((String)object));
                            }
                            ++n;
                        }
                    }
                    pdfDictionary.put(PdfName.DEST, (PdfObject)object3);
                    return;
                }
                for (n = n2; n < 4 && stringTokenizer.hasMoreTokens(); ++n) {
                    object2 = stringTokenizer.nextToken();
                    if (object2.equals("null")) {
                        pdfArray.add(PdfNull.PDFNULL);
                        continue;
                    }
                    pdfArray.add(new PdfNumber((String)object2));
                }
            }
            pdfDictionary2.put(PdfName.D, pdfArray);
        }
        object2 = (String)object.get("File");
        if (pdfDictionary2.size() <= 0) return;
        if (object2 == null) return;
        pdfDictionary2.put(PdfName.S, PdfName.GOTOR);
        pdfDictionary2.put(PdfName.F, new PdfString((String)object2));
        object = (String)object.get("NewWindow");
        if (object != null) {
            if (object.equals("true")) {
                pdfDictionary2.put(PdfName.NEWWINDOW, PdfBoolean.PDFTRUE);
            } else if (object.equals("false")) {
                pdfDictionary2.put(PdfName.NEWWINDOW, PdfBoolean.PDFFALSE);
            }
        }
        pdfDictionary.put(PdfName.A, pdfDictionary2);
    }

    public static void eliminatePages(List<HashMap<String, Object>> object, int[] arrn) {
        if (object == null) {
            return;
        }
        ListIterator<HashMap<String, Object>> listIterator = object.listIterator();
        while (listIterator.hasNext()) {
            boolean bl;
            HashMap<String, Object> hashMap = listIterator.next();
            boolean bl2 = "GoTo".equals(hashMap.get("Action"));
            boolean bl3 = bl = false;
            if (bl2) {
                object = (String)hashMap.get("Page");
                bl3 = bl;
                if (object != null) {
                    int n = (object = object.trim()).indexOf(32);
                    n = n < 0 ? Integer.parseInt((String)object) : Integer.parseInt(object.substring(0, n));
                    int n2 = arrn.length;
                    int n3 = 0;
                    do {
                        bl3 = bl;
                        if (n3 >= (n2 & -2)) break;
                        if (n >= arrn[n3] && n <= arrn[n3 + 1]) {
                            bl3 = true;
                            break;
                        }
                        n3 += 2;
                    } while (true);
                }
            }
            List list = (List)hashMap.get("Kids");
            object = list;
            if (list != null) {
                SimpleBookmark.eliminatePages(list, arrn);
                object = list;
                if (list.isEmpty()) {
                    hashMap.remove("Kids");
                    object = null;
                }
            }
            if (!bl3) continue;
            if (object == null) {
                listIterator.remove();
                continue;
            }
            hashMap.remove("Action");
            hashMap.remove("Page");
            hashMap.remove("Named");
        }
    }

    public static void exportToXML(List<HashMap<String, Object>> list, OutputStream outputStream, String string2, boolean bl) throws IOException {
        SimpleBookmark.exportToXML(list, new BufferedWriter(new OutputStreamWriter(outputStream, IanaEncodings.getJavaEncoding(string2))), string2, bl);
    }

    public static void exportToXML(List<HashMap<String, Object>> list, Writer writer, String string2, boolean bl) throws IOException {
        writer.write("<?xml version=\"1.0\" encoding=\"");
        writer.write(XMLUtil.escapeXML(string2, bl));
        writer.write("\"?>\n<Bookmark>\n");
        SimpleBookmark.exportToXMLNode(list, writer, 1, bl);
        writer.write("</Bookmark>\n");
        writer.flush();
    }

    public static void exportToXMLNode(List<HashMap<String, Object>> object, Writer writer, int n, boolean bl) throws IOException {
        int n2;
        Object object2 = "";
        CharSequence charSequence = object2;
        if (n != -1) {
            n2 = 0;
            do {
                charSequence = object2;
                if (n2 >= n) break;
                charSequence = new StringBuilder();
                charSequence.append((String)object2);
                charSequence.append("  ");
                object2 = charSequence.toString();
                ++n2;
            } while (true);
        }
        Iterator<HashMap<String, Object>> iterator = object.iterator();
        while (iterator.hasNext()) {
            Map.Entry entry;
            object = iterator.next();
            writer.write((String)charSequence);
            writer.write("<Title ");
            Iterator iterator2 = object.entrySet().iterator();
            object = null;
            object2 = null;
            while (iterator2.hasNext()) {
                block12 : {
                    String string2;
                    block11 : {
                        entry = iterator2.next();
                        String string3 = (String)entry.getKey();
                        if (string3.equals("Title")) {
                            object = (String)entry.getValue();
                            continue;
                        }
                        if (string3.equals("Kids")) {
                            object2 = (List)entry.getValue();
                            continue;
                        }
                        writer.write(string3);
                        writer.write("=\"");
                        string2 = (String)entry.getValue();
                        if (string3.equals("Named")) break block11;
                        entry = string2;
                        if (!string3.equals("NamedN")) break block12;
                    }
                    entry = SimpleNamedDestination.escapeBinaryString(string2);
                }
                writer.write(XMLUtil.escapeXML((String)((Object)entry), bl));
                writer.write("\" ");
            }
            writer.write(">");
            entry = object;
            if (object == null) {
                entry = "";
            }
            writer.write(XMLUtil.escapeXML((String)((Object)entry), bl));
            if (object2 != null) {
                writer.write("\n");
                n2 = n == -1 ? n : n + 1;
                SimpleBookmark.exportToXMLNode((List<HashMap<String, Object>>)object2, writer, n2, bl);
                writer.write((String)charSequence);
            }
            writer.write("</Title>\n");
        }
    }

    public static List<HashMap<String, Object>> getBookmark(PdfReader pdfReader) {
        PdfObject pdfObject = PdfReader.getPdfObjectRelease(pdfReader.getCatalog().get(PdfName.OUTLINES));
        if (pdfObject != null && pdfObject.isDictionary()) {
            return SimpleBookmark.getBookmark(pdfReader, (PdfDictionary)pdfObject, false);
        }
        return null;
    }

    public static List<HashMap<String, Object>> getBookmark(PdfReader pdfReader, PdfDictionary pdfDictionary, boolean bl) {
        pdfReader.getCatalog();
        if (pdfDictionary == null) {
            return null;
        }
        IntHashtable intHashtable = new IntHashtable();
        int n = pdfReader.getNumberOfPages();
        for (int i = 1; i <= n; ++i) {
            intHashtable.put(pdfReader.getPageOrigRef(i).getNumber(), i);
            pdfReader.releasePage(i);
        }
        if (bl) {
            return SimpleBookmark.bookmarkDepth(pdfReader, pdfDictionary, intHashtable, true);
        }
        return SimpleBookmark.bookmarkDepth(pdfReader, (PdfDictionary)PdfReader.getPdfObjectRelease(pdfDictionary.get(PdfName.FIRST)), intHashtable, false);
    }

    private static int getNumber(PdfIndirectReference pdfIndirectReference) {
        PdfDictionary pdfDictionary = (PdfDictionary)PdfReader.getPdfObjectRelease(pdfIndirectReference);
        PdfIndirectReference pdfIndirectReference2 = pdfIndirectReference;
        if (pdfDictionary.contains(PdfName.TYPE)) {
            pdfIndirectReference2 = pdfIndirectReference;
            if (pdfDictionary.get(PdfName.TYPE).equals(PdfName.PAGES)) {
                pdfIndirectReference2 = pdfIndirectReference;
                if (pdfDictionary.contains(PdfName.KIDS)) {
                    pdfIndirectReference2 = (PdfIndirectReference)((PdfArray)pdfDictionary.get(PdfName.KIDS)).getPdfObject(0);
                }
            }
        }
        return pdfIndirectReference2.getNumber();
    }

    public static List<HashMap<String, Object>> importFromXML(InputStream inputStream) throws IOException {
        SimpleBookmark simpleBookmark = new SimpleBookmark();
        SimpleXMLParser.parse((SimpleXMLDocHandler)simpleBookmark, inputStream);
        return simpleBookmark.topList;
    }

    public static List<HashMap<String, Object>> importFromXML(Reader reader) throws IOException {
        SimpleBookmark simpleBookmark = new SimpleBookmark();
        SimpleXMLParser.parse((SimpleXMLDocHandler)simpleBookmark, reader);
        return simpleBookmark.topList;
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    public static Object[] iterateOutlines(PdfWriter var0, PdfIndirectReference var1_1, List<HashMap<String, Object>> var2_2, boolean var3_4) throws IOException {
        var11_5 = new PdfIndirectReference[var2_2.size()];
        for (var6_6 = 0; var6_6 < var11_5.length; ++var6_6) {
            var11_5[var6_6] = var0.getPdfIndirectReference();
        }
        var12_7 = var2_2.listIterator();
        var6_6 = 0;
        var8_8 = 0;
        do {
            block20 : {
                if (!var12_7.hasNext()) {
                    return new Object[]{var11_5[0], var11_5[var11_5.length - 1], var6_6};
                }
                var13_14 = (HashMap)var12_7.next();
                var10_13 = null;
                var14_15 = (List)var13_14.get("Kids");
                var2_2 = var10_13;
                if (var14_15 != null) {
                    var2_2 = var10_13;
                    if (!var14_15.isEmpty()) {
                        var2_2 = SimpleBookmark.iterateOutlines(var0, var11_5[var8_8], (List<HashMap<String, Object>>)var14_15, var3_4);
                    }
                }
                var10_13 = new PdfDictionary();
                var6_6 = var7_11 = var6_6 + 1;
                if (var2_2 != null) {
                    var10_13.put(PdfName.FIRST, (PdfIndirectReference)var2_2[0]);
                    var10_13.put(PdfName.LAST, (PdfIndirectReference)var2_2[1]);
                    var6_6 = (Integer)var2_2[2];
                    if ("false".equals(var13_14.get("Open"))) {
                        var10_13.put(PdfName.COUNT, new PdfNumber(- var6_6));
                        var6_6 = var7_11;
                    } else {
                        var10_13.put(PdfName.COUNT, new PdfNumber(var6_6));
                        var6_6 = var7_11 + var6_6;
                    }
                }
                var10_13.put(PdfName.PARENT, var1_1);
                if (var8_8 > 0) {
                    var10_13.put(PdfName.PREV, var11_5[var8_8 - 1]);
                }
                if (var8_8 < var11_5.length - 1) {
                    var10_13.put(PdfName.NEXT, var11_5[var8_8 + 1]);
                }
                var10_13.put(PdfName.TITLE, new PdfString((String)var13_14.get("Title"), "UnicodeBig"));
                var14_15 = (String)var13_14.get("Color");
                if (var14_15 != null) {
                    try {
                        var2_2 = new PdfArray();
                        var14_15 = new StringTokenizer((String)var14_15);
                        var7_11 = 0;
                        do {
                            if (var7_11 >= 3) {
                                var10_13.put(PdfName.C, (PdfObject)var2_2);
                                break block20;
                            }
                            var4_9 = var5_10 = Float.parseFloat(var14_15.nextToken());
                            if (var5_10 < 0.0f) {
                                var4_9 = 0.0f;
                            }
                            var5_10 = var4_9;
                            if (var4_9 <= 1.0f) ** break block21
                            var5_10 = 1.0f;
                            break;
                        } while (true);
                    }
                    catch (Exception var2_3) {}
                    {
                        
                        var2_2.add(new PdfNumber(var5_10));
                        ++var7_11;
                        continue;
                    }
                }
            }
            if ((var2_2 = (String)var13_14.get("Style")) != null) {
                var7_11 = (var2_2 = var2_2.toLowerCase()).indexOf("italic") >= 0 ? 1 : 0;
                var9_12 = var7_11;
                if (var2_2.indexOf("bold") < 0 || (var9_12 = var7_11 | 2) != 0) {
                    var10_13.put(PdfName.F, new PdfNumber(var9_12));
                }
            }
            SimpleBookmark.createOutlineAction(var10_13, var13_14, var0, var3_4);
            var0.addToBody((PdfObject)var10_13, var11_5[var8_8]);
            ++var8_8;
        } while (true);
    }

    private static String makeBookmarkParam(PdfArray pdfArray, IntHashtable intHashtable) {
        StringBuffer stringBuffer = new StringBuffer();
        PdfObject pdfObject = pdfArray.getPdfObject(0);
        if (pdfObject.isNumber()) {
            stringBuffer.append(((PdfNumber)pdfObject).intValue() + 1);
        } else {
            stringBuffer.append(intHashtable.get(SimpleBookmark.getNumber((PdfIndirectReference)pdfObject)));
        }
        stringBuffer.append(' ');
        stringBuffer.append(pdfArray.getPdfObject(1).toString().substring(1));
        for (int i = 2; i < pdfArray.size(); ++i) {
            stringBuffer.append(' ');
            stringBuffer.append(pdfArray.getPdfObject(i).toString());
        }
        return stringBuffer.toString();
    }

    private static void mapGotoBookmark(HashMap<String, Object> hashMap, PdfObject pdfObject, IntHashtable intHashtable) {
        if (pdfObject.isString()) {
            hashMap.put("Named", pdfObject.toString());
        } else if (pdfObject.isName()) {
            hashMap.put("Named", PdfName.decodeName(pdfObject.toString()));
        } else if (pdfObject.isArray()) {
            hashMap.put("Page", SimpleBookmark.makeBookmarkParam((PdfArray)pdfObject, intHashtable));
        }
        hashMap.put("Action", "GoTo");
    }

    public static void shiftPageNumbers(List<HashMap<String, Object>> object, int n, int[] arrn) {
        if (object == null) {
            return;
        }
        ListIterator<HashMap<String, Object>> listIterator = object.listIterator();
        while (listIterator.hasNext()) {
            HashMap<String, Object> hashMap = listIterator.next();
            if ("GoTo".equals(hashMap.get("Action")) && (object = (String)hashMap.get("Page")) != null) {
                int n2;
                int n3;
                String string2;
                int n4;
                block9 : {
                    string2 = object.trim();
                    n2 = string2.indexOf(32);
                    n3 = n2 < 0 ? Integer.parseInt(string2) : Integer.parseInt(string2.substring(0, n2));
                    int n5 = 1;
                    if (arrn == null) {
                        n4 = n5;
                    } else {
                        int n6 = arrn.length;
                        for (n4 = 0; n4 < (n6 & -2); n4 += 2) {
                            if (n3 < arrn[n4] || n3 > arrn[n4 + 1]) continue;
                            n4 = n5;
                            break block9;
                        }
                        n4 = 0;
                    }
                }
                object = string2;
                if (n4 != 0) {
                    if (n2 < 0) {
                        object = Integer.toString(n3 + n);
                    } else {
                        object = new StringBuilder();
                        object.append(n3 + n);
                        object.append(string2.substring(n2));
                        object = object.toString();
                    }
                }
                hashMap.put("Page", object);
            }
            if ((object = (List)hashMap.get("Kids")) == null) continue;
            SimpleBookmark.shiftPageNumbers((List<HashMap<String, Object>>)object, n, arrn);
        }
    }

    @Override
    public void endDocument() {
    }

    @Override
    public void endElement(String arrayList) {
        if (arrayList.equals((Object)"Bookmark")) {
            if (this.attr.isEmpty()) {
                return;
            }
            throw new RuntimeException(MessageLocalization.getComposedMessage("bookmark.end.tag.out.of.place", new Object[0]));
        }
        if (!arrayList.equals((Object)"Title")) {
            throw new RuntimeException(MessageLocalization.getComposedMessage("invalid.end.tag.1", arrayList));
        }
        HashMap<String, Object> hashMap = this.attr.pop();
        hashMap.put("Title", ((String)hashMap.get("Title")).trim());
        arrayList = (String)hashMap.get("Named");
        if (arrayList != null) {
            hashMap.put("Named", SimpleNamedDestination.unEscapeBinaryString((String)((Object)arrayList)));
        }
        if ((arrayList = (String)hashMap.get("NamedN")) != null) {
            hashMap.put("NamedN", SimpleNamedDestination.unEscapeBinaryString((String)((Object)arrayList)));
        }
        if (this.attr.isEmpty()) {
            this.topList.add(hashMap);
            return;
        }
        HashMap<String, Object> hashMap2 = this.attr.peek();
        List list = (List)hashMap2.get("Kids");
        arrayList = list;
        if (list == null) {
            arrayList = new ArrayList<HashMap<String, Object>>();
            hashMap2.put("Kids", arrayList);
        }
        arrayList.add(hashMap);
    }

    @Override
    public void startDocument() {
    }

    @Override
    public void startElement(String object, Map<String, String> map) {
        if (this.topList == null) {
            if (object.equals("Bookmark")) {
                this.topList = new ArrayList();
                return;
            }
            throw new RuntimeException(MessageLocalization.getComposedMessage("root.element.is.not.bookmark.1", object));
        }
        if (!object.equals("Title")) {
            throw new RuntimeException(MessageLocalization.getComposedMessage("tag.1.not.allowed", object));
        }
        object = new HashMap<String, String>(map);
        object.put("Title", "");
        object.remove("Kids");
        this.attr.push((HashMap<String, Object>)object);
    }

    @Override
    public void text(String string2) {
        if (this.attr.isEmpty()) {
            return;
        }
        HashMap<String, Object> hashMap = this.attr.peek();
        String string3 = (String)hashMap.get("Title");
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append(string3);
        stringBuilder.append(string2);
        hashMap.put("Title", stringBuilder.toString());
    }
}

