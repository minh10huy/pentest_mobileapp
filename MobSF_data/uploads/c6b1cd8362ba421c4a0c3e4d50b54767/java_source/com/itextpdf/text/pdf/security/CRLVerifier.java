/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf.security;

import com.itextpdf.text.log.Logger;
import com.itextpdf.text.log.LoggerFactory;
import com.itextpdf.text.pdf.security.CertificateUtil;
import com.itextpdf.text.pdf.security.CertificateVerifier;
import com.itextpdf.text.pdf.security.RootStoreVerifier;
import com.itextpdf.text.pdf.security.VerificationException;
import com.itextpdf.text.pdf.security.VerificationOK;
import java.io.IOException;
import java.io.InputStream;
import java.io.Serializable;
import java.net.URL;
import java.security.GeneralSecurityException;
import java.security.KeyStore;
import java.security.PublicKey;
import java.security.cert.CRL;
import java.security.cert.Certificate;
import java.security.cert.CertificateFactory;
import java.security.cert.X509CRL;
import java.security.cert.X509Certificate;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.List;
import javax.security.auth.x500.X500Principal;

public class CRLVerifier
extends RootStoreVerifier {
    protected static final Logger LOGGER = LoggerFactory.getLogger(CRLVerifier.class);
    List<X509CRL> crls;

    public CRLVerifier(CertificateVerifier certificateVerifier, List<X509CRL> list) {
        super(certificateVerifier);
        this.crls = list;
    }

    public X509CRL getCRL(X509Certificate object, X509Certificate object2) {
        block4 : {
            object = CertificateUtil.getCRLURL((X509Certificate)object);
            if (object != null) break block4;
            return null;
        }
        try {
            object2 = LOGGER;
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("Getting CRL from ");
            stringBuilder.append((String)object);
            object2.info(stringBuilder.toString());
            object = (X509CRL)CertificateFactory.getInstance("X.509").generateCRL(new URL((String)object).openStream());
            return object;
        }
        catch (IOException iOException) {
            return null;
        }
        catch (GeneralSecurityException generalSecurityException) {
            return null;
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public boolean isSignatureValid(X509CRL x509CRL, X509Certificate enumeration) {
        if (enumeration != null) {
            try {
                x509CRL.verify(enumeration.getPublicKey());
                return true;
            }
            catch (GeneralSecurityException generalSecurityException) {}
            LOGGER.warn("CRL not issued by the same authority as the certificate that is being checked");
        }
        if (this.rootStore == null) {
            return false;
        }
        try {
            enumeration = this.rootStore.aliases();
        }
        catch (GeneralSecurityException generalSecurityException) {
            return false;
        }
        while (enumeration.hasMoreElements()) {
            String string2 = enumeration.nextElement();
            try {
                if (!this.rootStore.isCertificateEntry(string2)) continue;
                x509CRL.verify(((X509Certificate)this.rootStore.getCertificate(string2)).getPublicKey());
                return true;
            }
            catch (GeneralSecurityException generalSecurityException) {
            }
        }
        return false;
    }

    @Override
    public List<VerificationOK> verify(X509Certificate x509Certificate, X509Certificate x509Certificate2, Date date) throws GeneralSecurityException, IOException {
        int n;
        int n2;
        ArrayList<VerificationOK> arrayList = new ArrayList<VerificationOK>();
        Object object = this.crls;
        boolean bl = false;
        if (object != null) {
            object = this.crls.iterator();
            n2 = 0;
            do {
                n = n2++;
                if (object.hasNext()) {
                    if (!this.verify((X509CRL)object.next(), x509Certificate, x509Certificate2, date)) continue;
                    continue;
                }
                break;
            } while (true);
        } else {
            n = 0;
        }
        boolean bl2 = bl;
        n2 = n;
        if (this.onlineCheckingAllowed) {
            bl2 = bl;
            n2 = n;
            if (n == 0) {
                bl2 = bl;
                n2 = n;
                if (this.verify(this.getCRL(x509Certificate, x509Certificate2), x509Certificate, x509Certificate2, date)) {
                    n2 = n + 1;
                    bl2 = true;
                }
            }
        }
        object = LOGGER;
        Serializable serializable = new StringBuilder();
        serializable.append("Valid CRLs found: ");
        serializable.append(n2);
        object.info(serializable.toString());
        if (n2 > 0) {
            serializable = this.getClass();
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("Valid CRLs found: ");
            stringBuilder.append(n2);
            object = bl2 ? " (online)" : "";
            stringBuilder.append((String)object);
            arrayList.add(new VerificationOK(x509Certificate, (Class<? extends CertificateVerifier>)serializable, stringBuilder.toString()));
        }
        if (this.verifier != null) {
            arrayList.addAll(this.verifier.verify(x509Certificate, x509Certificate2, date));
        }
        return arrayList;
    }

    public boolean verify(X509CRL x509CRL, X509Certificate x509Certificate, X509Certificate x509Certificate2, Date date) throws GeneralSecurityException {
        if (x509CRL != null) {
            if (date == null) {
                return false;
            }
            if (x509CRL.getIssuerX500Principal().equals(x509Certificate.getIssuerX500Principal()) && date.after(x509CRL.getThisUpdate()) && date.before(x509CRL.getNextUpdate())) {
                if (this.isSignatureValid(x509CRL, x509Certificate2) && x509CRL.isRevoked(x509Certificate)) {
                    throw new VerificationException(x509Certificate, "The certificate has been revoked.");
                }
                return true;
            }
            return false;
        }
        return false;
    }
}

