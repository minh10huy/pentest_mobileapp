/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf.qrcode;

import com.itextpdf.text.pdf.qrcode.ByteMatrix;
import com.itextpdf.text.pdf.qrcode.EncodeHintType;
import com.itextpdf.text.pdf.qrcode.Encoder;
import com.itextpdf.text.pdf.qrcode.ErrorCorrectionLevel;
import com.itextpdf.text.pdf.qrcode.QRCode;
import com.itextpdf.text.pdf.qrcode.WriterException;
import java.util.Map;

public final class QRCodeWriter {
    private static final int QUIET_ZONE_SIZE = 4;

    private static ByteMatrix renderResult(QRCode arrby, int n, int n2) {
        arrby = arrby.getMatrix();
        int n3 = arrby.getWidth();
        int n4 = arrby.getHeight();
        int n5 = n3 + 8;
        int n6 = n4 + 8;
        int n7 = Math.max(n, n5);
        int n8 = Math.max(n2, n6);
        int n9 = Math.min(n7 / n5, n8 / n6);
        int n10 = n3 * n9;
        int n11 = (n7 - n10) / 2;
        int n12 = n4 * n9;
        int n13 = (n8 - n12) / 2;
        ByteMatrix byteMatrix = new ByteMatrix(n7, n8);
        byte[][] arrby2 = byteMatrix.getArray();
        byte[] arrby3 = new byte[n7];
        for (n = 0; n < n13; ++n) {
            QRCodeWriter.setRowColor(arrby2[n], (byte)-1);
        }
        arrby = arrby.getArray();
        for (n = 0; n < n4; ++n) {
            for (n2 = 0; n2 < n11; ++n2) {
                arrby3[n2] = -1;
            }
            n5 = n11;
            for (n2 = 0; n2 < n3; ++n2) {
                int n14 = arrby[n][n2] == 1 ? 0 : -1;
                for (n6 = 0; n6 < n9; ++n6) {
                    arrby3[n5 + n6] = n14;
                }
                n5 += n9;
            }
            for (n2 = n11 + n10; n2 < n7; ++n2) {
                arrby3[n2] = -1;
            }
            n2 = n * n9 + n13;
            for (n5 = 0; n5 < n9; ++n5) {
                System.arraycopy(arrby3, 0, arrby2[n2 + n5], 0, n7);
            }
        }
        for (n = n13 + n12; n < n8; ++n) {
            QRCodeWriter.setRowColor(arrby2[n], (byte)-1);
        }
        return byteMatrix;
    }

    private static void setRowColor(byte[] arrby, byte by) {
        for (int i = 0; i < arrby.length; ++i) {
            arrby[i] = by;
        }
    }

    public ByteMatrix encode(String string2, int n, int n2) throws WriterException {
        return this.encode(string2, n, n2, null);
    }

    public ByteMatrix encode(String charSequence, int n, int n2, Map<EncodeHintType, Object> map) throws WriterException {
        if (charSequence != null && charSequence.length() != 0) {
            if (n >= 0 && n2 >= 0) {
                Object object;
                Object object2 = object = ErrorCorrectionLevel.L;
                if (map != null) {
                    ErrorCorrectionLevel errorCorrectionLevel = (ErrorCorrectionLevel)map.get(EncodeHintType.ERROR_CORRECTION);
                    object2 = object;
                    if (errorCorrectionLevel != null) {
                        object2 = errorCorrectionLevel;
                    }
                }
                object = new QRCode();
                Encoder.encode((String)charSequence, (ErrorCorrectionLevel)object2, map, (QRCode)object);
                return QRCodeWriter.renderResult((QRCode)object, n, n2);
            }
            charSequence = new StringBuilder();
            charSequence.append("Requested dimensions are too small: ");
            charSequence.append(n);
            charSequence.append('x');
            charSequence.append(n2);
            throw new IllegalArgumentException(charSequence.toString());
        }
        throw new IllegalArgumentException("Found empty contents");
    }
}

