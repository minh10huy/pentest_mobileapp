/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf.qrcode;

import com.itextpdf.text.pdf.qrcode.BitArray;

public final class BitMatrix {
    public final int[] bits;
    public final int height;
    public final int rowSize;
    public final int width;

    public BitMatrix(int n) {
        this(n, n);
    }

    public BitMatrix(int n, int n2) {
        if (n >= 1 && n2 >= 1) {
            int n3;
            this.width = n;
            this.height = n2;
            int n4 = n3 = n >> 5;
            if ((n & 31) != 0) {
                n4 = n3 + 1;
            }
            this.rowSize = n4;
            this.bits = new int[n4 * n2];
            return;
        }
        throw new IllegalArgumentException("Both dimensions must be greater than 0");
    }

    public void clear() {
        int n = this.bits.length;
        for (int i = 0; i < n; ++i) {
            this.bits[i] = 0;
        }
    }

    public void flip(int n, int n2) {
        n2 = n2 * this.rowSize + (n >> 5);
        int[] arrn = this.bits;
        arrn[n2] = 1 << (n & 31) ^ arrn[n2];
    }

    public boolean get(int n, int n2) {
        int n3 = this.rowSize;
        if ((this.bits[n2 * n3 + (n >> 5)] >>> (n & 31) & 1) != 0) {
            return true;
        }
        return false;
    }

    public int getDimension() {
        if (this.width != this.height) {
            throw new RuntimeException("Can't call getDimension() on a non-square matrix");
        }
        return this.width;
    }

    public int getHeight() {
        return this.height;
    }

    public BitArray getRow(int n, BitArray bitArray) {
        BitArray bitArray2;
        block4 : {
            block3 : {
                if (bitArray == null) break block3;
                bitArray2 = bitArray;
                if (bitArray.getSize() >= this.width) break block4;
            }
            bitArray2 = new BitArray(this.width);
        }
        int n2 = this.rowSize;
        for (int i = 0; i < this.rowSize; ++i) {
            bitArray2.setBulk(i << 5, this.bits[n * n2 + i]);
        }
        return bitArray2;
    }

    public int getWidth() {
        return this.width;
    }

    public void set(int n, int n2) {
        n2 = n2 * this.rowSize + (n >> 5);
        int[] arrn = this.bits;
        arrn[n2] = 1 << (n & 31) | arrn[n2];
    }

    public void setRegion(int n, int n2, int n3, int n4) {
        if (n2 >= 0 && n >= 0) {
            if (n4 >= 1 && n3 >= 1) {
                int n5 = n3 + n;
                if ((n4 += n2) <= this.height && n5 <= this.width) {
                    while (n2 < n4) {
                        int n6 = this.rowSize;
                        for (n3 = n; n3 < n5; ++n3) {
                            int[] arrn = this.bits;
                            int n7 = (n3 >> 5) + n6 * n2;
                            arrn[n7] = arrn[n7] | 1 << (n3 & 31);
                        }
                        ++n2;
                    }
                    return;
                }
                throw new IllegalArgumentException("The region must fit inside the matrix");
            }
            throw new IllegalArgumentException("Height and width must be at least 1");
        }
        throw new IllegalArgumentException("Left and top must be nonnegative");
    }

    public String toString() {
        StringBuffer stringBuffer = new StringBuffer(this.height * (this.width + 1));
        for (int i = 0; i < this.height; ++i) {
            for (int j = 0; j < this.width; ++j) {
                String string2 = this.get(j, i) ? "X " : "  ";
                stringBuffer.append(string2);
            }
            stringBuffer.append('\n');
        }
        return stringBuffer.toString();
    }
}

