/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf;

import com.itextpdf.text.DocWriter;
import com.itextpdf.text.error_messages.MessageLocalization;
import com.itextpdf.text.pdf.PdfEncodings;
import java.io.IOException;
import java.io.OutputStream;
import java.io.UnsupportedEncodingException;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.util.Locale;

public class ByteBuffer
extends OutputStream {
    public static boolean HIGH_PRECISION = false;
    public static final byte ZERO = 48;
    private static byte[][] byteCache = new byte[byteCacheSize][];
    private static int byteCacheSize;
    private static final byte[] bytes;
    private static final char[] chars;
    private static final DecimalFormatSymbols dfs;
    protected byte[] buf;
    protected int count;

    static {
        chars = new char[]{'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'};
        bytes = new byte[]{48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 97, 98, 99, 100, 101, 102};
        dfs = new DecimalFormatSymbols(Locale.US);
    }

    public ByteBuffer() {
        this(128);
    }

    public ByteBuffer(int n) {
        int n2 = n;
        if (n < 1) {
            n2 = 128;
        }
        this.buf = new byte[n2];
    }

    private static byte[] convertToBytes(int n) {
        double d = n;
        int n2 = (int)Math.floor(Math.log(d) / Math.log(10.0));
        int n3 = n % 100;
        int n4 = n2;
        if (n3 != 0) {
            n4 = n2 + 2;
        }
        int n5 = n % 10;
        n2 = n4;
        if (n5 != 0) {
            n2 = n4 + 1;
        }
        n4 = n2++;
        if (n < 100) {
            n4 = n2;
            if (n < 10) {
                n4 = n2 + 1;
            }
        }
        byte[] arrby = new byte[--n4];
        int n6 = n4 - 1;
        n2 = 0;
        if (n < 100) {
            arrby[0] = 48;
        }
        n4 = n6;
        if (n5 != 0) {
            arrby[n6] = bytes[n5];
            n4 = n6 - 1;
        }
        if (n3 != 0) {
            arrby[n4] = bytes[n / 10 % 10];
            arrby[n4 - 1] = 46;
        }
        n6 = (int)Math.floor(Math.log(d) / Math.log(10.0)) - 1;
        for (n4 = n2; n4 < n6; ++n4) {
            arrby[n4] = bytes[n / (int)Math.pow(10.0, n6 - n4 + 1) % 10];
        }
        return arrby;
    }

    public static void fillCache(int n) {
        int n2 = 1;
        switch (n) {
            default: {
                n = 1;
                break;
            }
            case 1: {
                n = 10;
                break;
            }
            case 0: {
                n = 100;
            }
        }
        while (n2 < byteCacheSize) {
            if (byteCache[n2] == null) {
                ByteBuffer.byteCache[n2] = ByteBuffer.convertToBytes(n2);
            }
            n2 += n;
        }
    }

    public static String formatDouble(double d) {
        return ByteBuffer.formatDouble(d, null);
    }

    public static String formatDouble(double d, ByteBuffer object) {
        boolean bl;
        double d2 = d;
        if (HIGH_PRECISION) {
            String string2 = new DecimalFormat("0.######", dfs).format(d2);
            if (object == null) {
                return string2;
            }
            object.append(string2);
            return null;
        }
        if (Math.abs(d) < 1.5E-5) {
            if (object != null) {
                object.append((byte)48);
                return null;
            }
            return "0";
        }
        int n = 0;
        if (d2 < 0.0) {
            d2 = - d2;
            bl = true;
        } else {
            bl = false;
        }
        int n2 = 100000;
        if (d2 < 1.0) {
            d = d2 + 5.0E-6;
            if (d >= 1.0) {
                if (bl) {
                    if (object != null) {
                        object.append((byte)45);
                        object.append((byte)49);
                        return null;
                    }
                    return "-1";
                }
                if (object != null) {
                    object.append((byte)49);
                    return null;
                }
                return "1";
            }
            if (object != null) {
                n2 = (int)(d * 100000.0);
                if (bl) {
                    object.append((byte)45);
                }
                object.append((byte)48);
                object.append((byte)46);
                object.append((byte)(n2 / 10000 + 48));
                if (n2 % 10000 != 0) {
                    object.append((byte)(n2 / 1000 % 10 + 48));
                    if (n2 % 1000 != 0) {
                        object.append((byte)(n2 / 100 % 10 + 48));
                        if (n2 % 100 != 0) {
                            object.append((byte)(n2 / 10 % 10 + 48));
                            if ((n2 %= 10) != 0) {
                                object.append((byte)(n2 + 48));
                            }
                        }
                    }
                }
                return null;
            }
            int n3 = (int)(d * (double)100000);
            object = new StringBuilder();
            if (bl) {
                object.append('-');
            }
            object.append("0.");
            while (n3 < (n2 /= 10)) {
                object.append('0');
            }
            object.append(n3);
            n2 = object.length() - 1;
            while (object.charAt(n2) == '0') {
                --n2;
            }
            object.setLength(n2 + 1);
            return object.toString();
        }
        if (d2 <= 32767.0) {
            int n4 = (int)((d2 + 0.005) * 100.0);
            if (n4 < byteCacheSize && byteCache[n4] != null) {
                if (object != null) {
                    if (bl) {
                        object.append((byte)45);
                    }
                    object.append(byteCache[n4]);
                    return null;
                }
                String string3 = PdfEncodings.convertToString(byteCache[n4], null);
                object = string3;
                if (bl) {
                    object = new StringBuilder();
                    object.append("-");
                    object.append(string3);
                    object = object.toString();
                }
                return object;
            }
            if (object != null) {
                if (n4 < byteCacheSize) {
                    n2 = n4 >= 1000000 ? 5 : (n4 >= 100000 ? 4 : (n4 >= 10000 ? 3 : (n4 >= 1000 ? 2 : (n4 >= 100 ? 1 : 0))));
                    int n5 = n4 % 100;
                    int n6 = n2;
                    if (n5 != 0) {
                        n6 = n2 + 2;
                    }
                    int n7 = n4 % 10;
                    n2 = n6;
                    if (n7 != 0) {
                        n2 = n6 + 1;
                    }
                    byte[] arrby = new byte[n2];
                    n6 = n;
                    if (n4 >= 1000000) {
                        arrby[0] = bytes[n4 / 1000000];
                        n6 = 1;
                    }
                    n2 = n6;
                    if (n4 >= 100000) {
                        arrby[n6] = bytes[n4 / 100000 % 10];
                        n2 = n6 + 1;
                    }
                    n6 = n2;
                    if (n4 >= 10000) {
                        arrby[n2] = bytes[n4 / 10000 % 10];
                        n6 = n2 + 1;
                    }
                    if (n4 >= 1000) {
                        n2 = n6 + 1;
                        arrby[n6] = bytes[n4 / 1000 % 10];
                    } else {
                        n2 = n6;
                    }
                    n6 = n2;
                    if (n4 >= 100) {
                        arrby[n2] = bytes[n4 / 100 % 10];
                        n6 = n2 + 1;
                    }
                    if (n5 != 0) {
                        n2 = n6 + 1;
                        arrby[n6] = 46;
                        arrby[n2] = bytes[n4 / 10 % 10];
                        if (n7 != 0) {
                            arrby[n2 + 1] = bytes[n7];
                        }
                    }
                    ByteBuffer.byteCache[n4] = arrby;
                }
                if (bl) {
                    object.append((byte)45);
                }
                if (n4 >= 1000000) {
                    object.append(bytes[n4 / 1000000]);
                }
                if (n4 >= 100000) {
                    object.append(bytes[n4 / 100000 % 10]);
                }
                if (n4 >= 10000) {
                    object.append(bytes[n4 / 10000 % 10]);
                }
                if (n4 >= 1000) {
                    object.append(bytes[n4 / 1000 % 10]);
                }
                if (n4 >= 100) {
                    object.append(bytes[n4 / 100 % 10]);
                }
                if (n4 % 100 != 0) {
                    object.append((byte)46);
                    object.append(bytes[n4 / 10 % 10]);
                    n2 = n4 % 10;
                    if (n2 != 0) {
                        object.append(bytes[n2]);
                    }
                }
                return null;
            }
            object = new StringBuilder();
            if (bl) {
                object.append('-');
            }
            if (n4 >= 1000000) {
                object.append(chars[n4 / 1000000]);
            }
            if (n4 >= 100000) {
                object.append(chars[n4 / 100000 % 10]);
            }
            if (n4 >= 10000) {
                object.append(chars[n4 / 10000 % 10]);
            }
            if (n4 >= 1000) {
                object.append(chars[n4 / 1000 % 10]);
            }
            if (n4 >= 100) {
                object.append(chars[n4 / 100 % 10]);
            }
            if (n4 % 100 != 0) {
                object.append('.');
                object.append(chars[n4 / 10 % 10]);
                n2 = n4 % 10;
                if (n2 != 0) {
                    object.append(chars[n2]);
                }
            }
            return object.toString();
        }
        long l = (long)(d2 + 0.5);
        if (bl) {
            object = new StringBuilder();
            object.append("-");
            object.append(Long.toString(l));
            return object.toString();
        }
        return Long.toString(l);
    }

    public static void setCacheSize(int n) {
        int n2 = n;
        if (n > 3276700) {
            n2 = 3276700;
        }
        if (n2 <= byteCacheSize) {
            return;
        }
        byte[][] arrarrby = new byte[n2][];
        System.arraycopy(byteCache, 0, arrarrby, 0, byteCacheSize);
        byteCache = arrarrby;
        byteCacheSize = n2;
    }

    public ByteBuffer append(byte by) {
        return this.append_i(by);
    }

    public ByteBuffer append(char c) {
        return this.append_i(c);
    }

    public ByteBuffer append(double d) {
        this.append(ByteBuffer.formatDouble(d, this));
        return this;
    }

    public ByteBuffer append(float f) {
        return this.append((double)f);
    }

    public ByteBuffer append(int n) {
        return this.append((double)n);
    }

    public ByteBuffer append(long l) {
        return this.append(Long.toString(l));
    }

    public ByteBuffer append(ByteBuffer byteBuffer) {
        return this.append(byteBuffer.buf, 0, byteBuffer.count);
    }

    public ByteBuffer append(String string2) {
        if (string2 != null) {
            return this.append(DocWriter.getISOBytes(string2));
        }
        return this;
    }

    public ByteBuffer append(byte[] arrby) {
        return this.append(arrby, 0, arrby.length);
    }

    public ByteBuffer append(byte[] arrby, int n, int n2) {
        int n3;
        if (n >= 0 && n <= arrby.length && n2 >= 0 && (n3 = n + n2) <= arrby.length && n3 >= 0) {
            if (n2 == 0) {
                return this;
            }
            n3 = this.count + n2;
            if (n3 > this.buf.length) {
                byte[] arrby2 = new byte[Math.max(this.buf.length << 1, n3)];
                System.arraycopy(this.buf, 0, arrby2, 0, this.count);
                this.buf = arrby2;
            }
            System.arraycopy(arrby, n, this.buf, this.count, n2);
            this.count = n3;
            return this;
        }
        return this;
    }

    public ByteBuffer appendHex(byte by) {
        this.append(bytes[by >> 4 & 15]);
        return this.append(bytes[by & 15]);
    }

    public ByteBuffer append_i(int n) {
        int n2 = this.count + 1;
        if (n2 > this.buf.length) {
            byte[] arrby = new byte[Math.max(this.buf.length << 1, n2)];
            System.arraycopy(this.buf, 0, arrby, 0, this.count);
            this.buf = arrby;
        }
        this.buf[this.count] = (byte)n;
        this.count = n2;
        return this;
    }

    public byte[] getBuffer() {
        return this.buf;
    }

    public void reset() {
        this.count = 0;
    }

    public void setSize(int n) {
        if (n <= this.count && n >= 0) {
            this.count = n;
            return;
        }
        throw new IndexOutOfBoundsException(MessageLocalization.getComposedMessage("the.new.size.must.be.positive.and.lt.eq.of.the.current.size", new Object[0]));
    }

    public int size() {
        return this.count;
    }

    public byte[] toByteArray() {
        byte[] arrby = new byte[this.count];
        System.arraycopy(this.buf, 0, arrby, 0, this.count);
        return arrby;
    }

    public String toString() {
        return new String(this.buf, 0, this.count);
    }

    public String toString(String string2) throws UnsupportedEncodingException {
        return new String(this.buf, 0, this.count, string2);
    }

    @Override
    public void write(int n) throws IOException {
        this.append((byte)n);
    }

    @Override
    public void write(byte[] arrby, int n, int n2) {
        this.append(arrby, n, n2);
    }

    public void writeTo(OutputStream outputStream) throws IOException {
        outputStream.write(this.buf, 0, this.count);
    }
}

