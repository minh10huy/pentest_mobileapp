/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf;

import com.itextpdf.text.pdf.CFFFont;
import com.itextpdf.text.pdf.RandomAccessFileOrArray;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Set;

public class CFFFontSubset
extends CFFFont {
    static final byte ENDCHAR_OP = 14;
    static final byte RETURN_OP = 11;
    static final String[] SubrsEscapeFuncs;
    static final String[] SubrsFunctions;
    HashSet<Integer> FDArrayUsed = new HashSet();
    int GBias = 0;
    HashMap<Integer, int[]> GlyphsUsed;
    byte[] NewCharStringsIndex;
    byte[] NewGSubrsIndex;
    byte[][] NewLSubrsIndex;
    byte[] NewSubrsIndexNonCID;
    int NumOfHints = 0;
    LinkedList<CFFFont.Item> OutputList;
    ArrayList<Integer> glyphsInList;
    HashMap<Integer, int[]> hGSubrsUsed = new HashMap();
    HashMap<Integer, int[]>[] hSubrsUsed;
    HashMap<Integer, int[]> hSubrsUsedNonCID = new HashMap();
    ArrayList<Integer> lGSubrsUsed = new ArrayList();
    ArrayList<Integer>[] lSubrsUsed;
    ArrayList<Integer> lSubrsUsedNonCID = new ArrayList();

    static {
        SubrsFunctions = new String[]{"RESERVED_0", "hstem", "RESERVED_2", "vstem", "vmoveto", "rlineto", "hlineto", "vlineto", "rrcurveto", "RESERVED_9", "callsubr", "return", "escape", "RESERVED_13", "endchar", "RESERVED_15", "RESERVED_16", "RESERVED_17", "hstemhm", "hintmask", "cntrmask", "rmoveto", "hmoveto", "vstemhm", "rcurveline", "rlinecurve", "vvcurveto", "hhcurveto", "shortint", "callgsubr", "vhcurveto", "hvcurveto"};
        SubrsEscapeFuncs = new String[]{"RESERVED_0", "RESERVED_1", "RESERVED_2", "and", "or", "not", "RESERVED_6", "RESERVED_7", "RESERVED_8", "abs", "add", "sub", "div", "RESERVED_13", "neg", "eq", "RESERVED_16", "RESERVED_17", "drop", "RESERVED_19", "put", "get", "ifelse", "random", "mul", "RESERVED_25", "sqrt", "dup", "exch", "index", "roll", "RESERVED_31", "RESERVED_32", "RESERVED_33", "hflex", "flex", "hflex1", "flex1", "RESERVED_REST"};
    }

    public CFFFontSubset(RandomAccessFileOrArray randomAccessFileOrArray, HashMap<Integer, int[]> hashMap) {
        super(randomAccessFileOrArray);
        this.GlyphsUsed = hashMap;
        this.glyphsInList = new ArrayList<Integer>(hashMap.keySet());
        for (int i = 0; i < this.fonts.length; ++i) {
            this.seek(this.fonts[i].charstringsOffset);
            this.fonts[i].nglyphs = this.getCard16();
            this.seek(this.stringIndexOffset);
            this.fonts[i].nstrings = this.getCard16() + standardStrings.length;
            this.fonts[i].charstringsOffsets = this.getIndex(this.fonts[i].charstringsOffset);
            if (this.fonts[i].fdselectOffset >= 0) {
                this.readFDSelect(i);
                this.BuildFDArrayUsed(i);
            }
            if (this.fonts[i].isCID) {
                this.ReadFDArray(i);
            }
            this.fonts[i].CharsetLength = this.CountCharset(this.fonts[i].charsetOffset, this.fonts[i].nglyphs);
        }
    }

    protected byte[] AssembleIndex(int[] arrn, byte[] arrby) {
        int n = arrn.length - 1;
        int n2 = arrn[arrn.length - 1];
        int n3 = 3;
        int n4 = n2 <= 255 ? 1 : (n2 <= 65535 ? 2 : (n2 <= 16777215 ? 3 : 4));
        byte[] arrby2 = new byte[(n + '\u0001') * n4 + 3 + arrby.length];
        byte by = (byte)(n >>> 8 & 255);
        int n5 = 0;
        arrby2[0] = by;
        arrby2[1] = (byte)(n >>> 0 & 255);
        arrby2[2] = n4;
        int n6 = arrn.length;
        block6 : for (n = 0; n < n6; ++n) {
            int n7 = arrn[n] - arrn[0] + 1;
            n2 = n3;
            int n8 = n3;
            int n9 = n3;
            switch (n4) {
                default: {
                    continue block6;
                }
                case 4: {
                    arrby2[n3] = (byte)(n7 >>> 24 & 255);
                    n2 = n3 + 1;
                }
                case 3: {
                    arrby2[n2] = (byte)(n7 >>> 16 & 255);
                    n8 = n2 + 1;
                }
                case 2: {
                    arrby2[n8] = (byte)(n7 >>> 8 & 255);
                    n9 = n8 + 1;
                }
                case 1: {
                    arrby2[n9] = (byte)(n7 >>> 0 & 255);
                    n3 = n9 + 1;
                }
            }
        }
        n2 = arrby.length;
        n = n5;
        while (n < n2) {
            arrby2[n3] = arrby[n];
            ++n;
            ++n3;
        }
        return arrby2;
    }

    protected void BuildFDArrayUsed(int n) {
        int[] arrn = this.fonts[n].FDSelect;
        for (n = 0; n < this.glyphsInList.size(); ++n) {
            int n2 = arrn[this.glyphsInList.get(n)];
            this.FDArrayUsed.add(n2);
        }
    }

    protected void BuildFDSubrsOffsets(int n, int n2) {
        this.fonts[n].PrivateSubrsOffset[n2] = -1;
        this.seek(this.fonts[n].fdprivateOffsets[n2]);
        while (this.getPosition() < this.fonts[n].fdprivateOffsets[n2] + this.fonts[n].fdprivateLengths[n2]) {
            this.getDictItem();
            if (this.key != "Subrs") continue;
            this.fonts[n].PrivateSubrsOffset[n2] = (Integer)this.args[0] + this.fonts[n].fdprivateOffsets[n2];
        }
        if (this.fonts[n].PrivateSubrsOffset[n2] >= 0) {
            this.fonts[n].PrivateSubrsOffsetsArray[n2] = this.getIndex(this.fonts[n].PrivateSubrsOffset[n2]);
        }
    }

    protected void BuildGSubrsUsed(int n) {
        int n2;
        int n3 = this.fonts[n].privateSubrs;
        int n4 = 0;
        if (n3 >= 0) {
            n2 = this.CalcBias(this.fonts[n].privateSubrs, n);
            n3 = this.lSubrsUsedNonCID.size();
        } else {
            n2 = 0;
            n3 = 0;
        }
        while (n4 < this.lGSubrsUsed.size()) {
            int n5 = this.lGSubrsUsed.get(n4);
            int n6 = n3;
            if (n5 < this.gsubrOffsets.length - 1) {
                n6 = n3;
                if (n5 >= 0) {
                    n6 = this.gsubrOffsets[n5];
                    n5 = this.gsubrOffsets[n5 + 1];
                    if (this.fonts[n].isCID) {
                        this.ReadASubr(n6, n5, this.GBias, 0, this.hGSubrsUsed, this.lGSubrsUsed, null);
                        n6 = n3;
                    } else {
                        this.ReadASubr(n6, n5, this.GBias, n2, this.hSubrsUsedNonCID, this.lSubrsUsedNonCID, this.fonts[n].SubrsOffsets);
                        n6 = n3;
                        if (n3 < this.lSubrsUsedNonCID.size()) {
                            while (n3 < this.lSubrsUsedNonCID.size()) {
                                n6 = this.lSubrsUsedNonCID.get(n3);
                                if (n6 < this.fonts[n].SubrsOffsets.length - 1 && n6 >= 0) {
                                    this.ReadASubr(this.fonts[n].SubrsOffsets[n6], this.fonts[n].SubrsOffsets[n6 + 1], this.GBias, n2, this.hSubrsUsedNonCID, this.lSubrsUsedNonCID, this.fonts[n].SubrsOffsets);
                                }
                                ++n3;
                            }
                            n6 = this.lSubrsUsedNonCID.size();
                        }
                    }
                }
            }
            ++n4;
            n3 = n6;
        }
    }

    protected void BuildIndexHeader(int n, int n2, int n3) {
        this.OutputList.addLast(new CFFFont.UInt16Item((char)n));
        this.OutputList.addLast(new CFFFont.UInt8Item((char)n2));
        switch (n2) {
            default: {
                return;
            }
            case 4: {
                this.OutputList.addLast(new CFFFont.UInt32Item((char)n3));
                return;
            }
            case 3: {
                this.OutputList.addLast(new CFFFont.UInt24Item((char)n3));
                return;
            }
            case 2: {
                this.OutputList.addLast(new CFFFont.UInt16Item((char)n3));
                return;
            }
            case 1: 
        }
        this.OutputList.addLast(new CFFFont.UInt8Item((char)n3));
    }

    protected void BuildNewCharString(int n) throws IOException {
        this.NewCharStringsIndex = this.BuildNewIndex(this.fonts[n].charstringsOffsets, this.GlyphsUsed, (byte)14);
    }

    protected byte[] BuildNewFile(int n) {
        this.OutputList = new LinkedList();
        this.CopyHeader();
        this.BuildIndexHeader(1, 1, 1);
        this.OutputList.addLast(new CFFFont.UInt8Item((char)(this.fonts[n].name.length() + 1)));
        this.OutputList.addLast(new CFFFont.StringItem(this.fonts[n].name));
        this.BuildIndexHeader(1, 2, 1);
        CFFFont.Item item = new CFFFont.IndexOffsetItem(2);
        this.OutputList.addLast(item);
        CFFFont.IndexBaseItem indexBaseItem = new CFFFont.IndexBaseItem();
        this.OutputList.addLast(indexBaseItem);
        CFFFont.DictOffsetItem dictOffsetItem = new CFFFont.DictOffsetItem();
        int[] arrn = new int[]();
        CFFFont.DictOffsetItem dictOffsetItem2 = new CFFFont.DictOffsetItem();
        CFFFont.DictOffsetItem dictOffsetItem3 = new CFFFont.DictOffsetItem();
        Iterator<CFFFont.Item> iterator = new CFFFont.DictOffsetItem();
        if (!this.fonts[n].isCID) {
            this.OutputList.addLast(new CFFFont.DictNumberItem(this.fonts[n].nstrings));
            this.OutputList.addLast(new CFFFont.DictNumberItem(this.fonts[n].nstrings + 1));
            this.OutputList.addLast(new CFFFont.DictNumberItem(0));
            this.OutputList.addLast(new CFFFont.UInt8Item('\f'));
            this.OutputList.addLast(new CFFFont.UInt8Item('\u001e'));
            this.OutputList.addLast(new CFFFont.DictNumberItem(this.fonts[n].nglyphs));
            this.OutputList.addLast(new CFFFont.UInt8Item('\f'));
            this.OutputList.addLast(new CFFFont.UInt8Item('\"'));
        }
        this.seek(this.topdictOffsets[n]);
        while (this.getPosition() < this.topdictOffsets[n + 1]) {
            int n2 = this.getPosition();
            this.getDictItem();
            int n3 = this.getPosition();
            if (this.key == "Encoding" || this.key == "Private" || this.key == "FDSelect" || this.key == "FDArray" || this.key == "charset" || this.key == "CharStrings") continue;
            this.OutputList.add(new CFFFont.RangeItem(this.buf, n2, n3 - n2));
        }
        this.CreateKeys(dictOffsetItem2, dictOffsetItem3, dictOffsetItem, (CFFFont.OffsetItem)arrn);
        this.OutputList.addLast(new CFFFont.IndexMarkerItem((CFFFont.OffsetItem)item, indexBaseItem));
        if (this.fonts[n].isCID) {
            this.OutputList.addLast(this.getEntireIndexRange(this.stringIndexOffset));
        } else {
            this.CreateNewStringIndex(n);
        }
        this.OutputList.addLast(new CFFFont.RangeItem(new RandomAccessFileOrArray(this.NewGSubrsIndex), 0, this.NewGSubrsIndex.length));
        if (this.fonts[n].isCID) {
            this.OutputList.addLast(new CFFFont.MarkerItem(dictOffsetItem3));
            if (this.fonts[n].fdselectOffset >= 0) {
                this.OutputList.addLast(new CFFFont.RangeItem(this.buf, this.fonts[n].fdselectOffset, this.fonts[n].FDSelectLength));
            } else {
                this.CreateFDSelect(dictOffsetItem3, this.fonts[n].nglyphs);
            }
            this.OutputList.addLast(new CFFFont.MarkerItem(dictOffsetItem));
            this.OutputList.addLast(new CFFFont.RangeItem(this.buf, this.fonts[n].charsetOffset, this.fonts[n].CharsetLength));
            if (this.fonts[n].fdarrayOffset >= 0) {
                this.OutputList.addLast(new CFFFont.MarkerItem(dictOffsetItem2));
                this.Reconstruct(n);
            } else {
                this.CreateFDArray(dictOffsetItem2, (CFFFont.OffsetItem)((Object)iterator), n);
            }
        } else {
            this.CreateFDSelect(dictOffsetItem3, this.fonts[n].nglyphs);
            this.CreateCharset(dictOffsetItem, this.fonts[n].nglyphs);
            this.CreateFDArray(dictOffsetItem2, (CFFFont.OffsetItem)((Object)iterator), n);
        }
        if (this.fonts[n].privateOffset >= 0) {
            item = new CFFFont.IndexBaseItem();
            this.OutputList.addLast(item);
            this.OutputList.addLast(new CFFFont.MarkerItem((CFFFont.OffsetItem)((Object)iterator)));
            iterator = new CFFFont.DictOffsetItem();
            this.CreateNonCIDPrivate(n, (CFFFont.OffsetItem)((Object)iterator));
            this.CreateNonCIDSubrs(n, (CFFFont.IndexBaseItem)item, (CFFFont.OffsetItem)((Object)iterator));
        }
        this.OutputList.addLast(new CFFFont.MarkerItem((CFFFont.OffsetItem)arrn));
        this.OutputList.addLast(new CFFFont.RangeItem(new RandomAccessFileOrArray(this.NewCharStringsIndex), 0, this.NewCharStringsIndex.length));
        arrn = new int[]{0};
        iterator = this.OutputList.iterator();
        while (iterator.hasNext()) {
            ((CFFFont.Item)iterator.next()).increment(arrn);
        }
        iterator = this.OutputList.iterator();
        while (iterator.hasNext()) {
            iterator.next().xref();
        }
        arrn = new byte[arrn[0]];
        iterator = this.OutputList.iterator();
        while (iterator.hasNext()) {
            iterator.next().emit((byte[])arrn);
        }
        return arrn;
    }

    protected byte[] BuildNewIndex(int[] arrn, HashMap<Integer, int[]> arrby, byte by) throws IOException {
        int n;
        int[] arrn2 = new int[arrn.length];
        int n2 = 0;
        int n3 = 0;
        int n4 = 0;
        for (n = 0; n < arrn.length; ++n) {
            arrn2[n] = n3;
            if (arrby.containsKey(n)) {
                n3 += arrn[n + 1] - arrn[n];
                continue;
            }
            ++n4;
        }
        arrby = new byte[n3 + n4];
        n = 0;
        n4 = n2;
        while (n4 < arrn.length - 1) {
            int n5;
            n2 = arrn2[n4];
            n3 = n4 + 1;
            int n6 = arrn2[n3];
            arrn2[n4] = n5 = n2 + n;
            if (n2 != n6) {
                this.buf.seek(arrn[n4]);
                this.buf.readFully(arrby, n5, n6 - n2);
            } else {
                arrby[n5] = by;
                ++n;
            }
            n4 = n3;
        }
        n4 = arrn.length - 1;
        arrn2[n4] = arrn2[n4] + n;
        return this.AssembleIndex(arrn2, arrby);
    }

    protected void BuildNewLGSubrs(int n) throws IOException {
        if (this.fonts[n].isCID) {
            this.hSubrsUsed = new HashMap[this.fonts[n].fdprivateOffsets.length];
            this.lSubrsUsed = new ArrayList[this.fonts[n].fdprivateOffsets.length];
            this.NewLSubrsIndex = new byte[this.fonts[n].fdprivateOffsets.length][];
            this.fonts[n].PrivateSubrsOffset = new int[this.fonts[n].fdprivateOffsets.length];
            this.fonts[n].PrivateSubrsOffsetsArray = new int[this.fonts[n].fdprivateOffsets.length][];
            ArrayList<Integer> arrayList = new ArrayList<Integer>(this.FDArrayUsed);
            for (int i = 0; i < arrayList.size(); ++i) {
                int n2 = arrayList.get(i);
                this.hSubrsUsed[n2] = new HashMap();
                this.lSubrsUsed[n2] = new ArrayList();
                this.BuildFDSubrsOffsets(n, n2);
                if (this.fonts[n].PrivateSubrsOffset[n2] < 0) continue;
                this.BuildSubrUsed(n, n2, this.fonts[n].PrivateSubrsOffset[n2], this.fonts[n].PrivateSubrsOffsetsArray[n2], this.hSubrsUsed[n2], this.lSubrsUsed[n2]);
                this.NewLSubrsIndex[n2] = this.BuildNewIndex(this.fonts[n].PrivateSubrsOffsetsArray[n2], this.hSubrsUsed[n2], (byte)11);
            }
        } else if (this.fonts[n].privateSubrs >= 0) {
            this.fonts[n].SubrsOffsets = this.getIndex(this.fonts[n].privateSubrs);
            this.BuildSubrUsed(n, -1, this.fonts[n].privateSubrs, this.fonts[n].SubrsOffsets, this.hSubrsUsedNonCID, this.lSubrsUsedNonCID);
        }
        this.BuildGSubrsUsed(n);
        if (this.fonts[n].privateSubrs >= 0) {
            this.NewSubrsIndexNonCID = this.BuildNewIndex(this.fonts[n].SubrsOffsets, this.hSubrsUsedNonCID, (byte)11);
        }
        this.NewGSubrsIndex = this.BuildNewIndex(this.gsubrOffsets, this.hGSubrsUsed, (byte)11);
    }

    protected void BuildSubrUsed(int n, int n2, int n3, int[] arrn, HashMap<Integer, int[]> hashMap, ArrayList<Integer> arrayList) {
        int n4;
        int n5 = this.CalcBias(n3, n);
        int n6 = 0;
        n3 = 0;
        do {
            if (n3 >= this.glyphsInList.size()) break;
            n4 = this.glyphsInList.get(n3);
            int n7 = this.fonts[n].charstringsOffsets[n4];
            int n8 = this.fonts[n].charstringsOffsets[n4 + 1];
            if (n2 >= 0) {
                this.EmptyStack();
                this.NumOfHints = 0;
                if (this.fonts[n].FDSelect[n4] == n2) {
                    this.ReadASubr(n7, n8, this.GBias, n5, hashMap, arrayList, arrn);
                }
            } else {
                this.ReadASubr(n7, n8, this.GBias, n5, hashMap, arrayList, arrn);
            }
            ++n3;
        } while (true);
        for (n4 = n6; n4 < arrayList.size(); ++n4) {
            n = arrayList.get(n4);
            if (n >= arrn.length - 1 || n < 0) continue;
            this.ReadASubr(arrn[n], arrn[n + 1], this.GBias, n5, hashMap, arrayList, arrn);
        }
    }

    protected int CalcBias(int n, int n2) {
        this.seek(n);
        n = this.getCard16();
        if (this.fonts[n2].CharstringType == 1) {
            return 0;
        }
        if (n < 1240) {
            return 107;
        }
        if (n < 33900) {
            return 1131;
        }
        return 32768;
    }

    protected int CalcHints(int n, int n2, int n3, int n4, int[] arrn) {
        this.seek(n);
        while (this.getPosition() < n2) {
            int n5;
            block8 : {
                block10 : {
                    block9 : {
                        this.ReadCommand();
                        n = this.getPosition();
                        Object object = null;
                        if (this.arg_count > 0) {
                            object = this.args[this.arg_count - 1];
                        }
                        n5 = this.arg_count;
                        this.HandelStack();
                        if (this.key == "callsubr") {
                            if (n5 <= 0) continue;
                            n5 = (Integer)object + n3;
                            this.CalcHints(arrn[n5], arrn[n5 + 1], n3, n4, arrn);
                            this.seek(n);
                            continue;
                        }
                        if (this.key == "callgsubr") {
                            if (n5 <= 0) continue;
                            n5 = (Integer)object + n4;
                            this.CalcHints(this.gsubrOffsets[n5], this.gsubrOffsets[n5 + 1], n3, n4, arrn);
                            this.seek(n);
                            continue;
                        }
                        if (this.key == "hstem" || this.key == "vstem" || this.key == "hstemhm" || this.key == "vstemhm") break block8;
                        if (this.key != "hintmask" && this.key != "cntrmask") continue;
                        n5 = this.NumOfHints / 8;
                        if (this.NumOfHints % 8 != 0) break block9;
                        n = n5;
                        if (n5 != 0) break block10;
                    }
                    n = n5 + 1;
                }
                for (n5 = 0; n5 < n; ++n5) {
                    this.getCard8();
                }
                continue;
            }
            this.NumOfHints += n5 / 2;
        }
        return this.NumOfHints;
    }

    int CalcSubrOffsetSize(int n, int n2) {
        this.seek(n);
        int n3 = 0;
        while (this.getPosition() < n + n2) {
            int n4 = this.getPosition();
            this.getDictItem();
            int n5 = this.getPosition();
            if (this.key != "Subrs") continue;
            n3 = n5 - n4 - 1;
        }
        return n3;
    }

    protected void CopyHeader() {
        this.seek(0);
        this.getCard8();
        this.getCard8();
        char c = this.getCard8();
        this.getCard8();
        this.nextIndexOffset = c;
        this.OutputList.addLast(new CFFFont.RangeItem(this.buf, 0, c));
    }

    int CountCharset(int n, int n2) {
        this.seek(n);
        switch (this.getCard8()) {
            default: {
                return 0;
            }
            case '\u0002': {
                return this.CountRange(n2, 2) * 4 + 1;
            }
            case '\u0001': {
                return this.CountRange(n2, 1) * 3 + 1;
            }
            case '\u0000': 
        }
        return n2 * 2 + 1;
    }

    int CountRange(int n, int n2) {
        int n3 = 0;
        for (int i = 1; i < n; i += n3 + 1) {
            int n4 = n3 + 1;
            this.getCard16();
            n3 = n2 == 1 ? (int)this.getCard8() : (int)this.getCard16();
            n3 = n4;
        }
        return n3;
    }

    protected void CreateCharset(CFFFont.OffsetItem offsetItem, int n) {
        this.OutputList.addLast(new CFFFont.MarkerItem(offsetItem));
        this.OutputList.addLast(new CFFFont.UInt8Item('\u0002'));
        this.OutputList.addLast(new CFFFont.UInt16Item('\u0001'));
        this.OutputList.addLast(new CFFFont.UInt16Item((char)(n - 1)));
    }

    protected void CreateFDArray(CFFFont.OffsetItem offsetItem, CFFFont.OffsetItem offsetItem2, int n) {
        this.OutputList.addLast(new CFFFont.MarkerItem(offsetItem));
        this.BuildIndexHeader(1, 1, 1);
        offsetItem = new CFFFont.IndexOffsetItem(1);
        this.OutputList.addLast(offsetItem);
        CFFFont.IndexBaseItem indexBaseItem = new CFFFont.IndexBaseItem();
        this.OutputList.addLast(indexBaseItem);
        int n2 = this.fonts[n].privateLength;
        int n3 = this.CalcSubrOffsetSize(this.fonts[n].privateOffset, this.fonts[n].privateLength);
        n = n2;
        if (n3 != 0) {
            n = n2 + (5 - n3);
        }
        this.OutputList.addLast(new CFFFont.DictNumberItem(n));
        this.OutputList.addLast(offsetItem2);
        this.OutputList.addLast(new CFFFont.UInt8Item('\u0012'));
        this.OutputList.addLast(new CFFFont.IndexMarkerItem(offsetItem, indexBaseItem));
    }

    protected void CreateFDSelect(CFFFont.OffsetItem offsetItem, int n) {
        this.OutputList.addLast(new CFFFont.MarkerItem(offsetItem));
        this.OutputList.addLast(new CFFFont.UInt8Item('\u0003'));
        this.OutputList.addLast(new CFFFont.UInt16Item('\u0001'));
        this.OutputList.addLast(new CFFFont.UInt16Item('\u0000'));
        this.OutputList.addLast(new CFFFont.UInt8Item('\u0000'));
        this.OutputList.addLast(new CFFFont.UInt16Item((char)n));
    }

    protected void CreateKeys(CFFFont.OffsetItem offsetItem, CFFFont.OffsetItem offsetItem2, CFFFont.OffsetItem offsetItem3, CFFFont.OffsetItem offsetItem4) {
        this.OutputList.addLast(offsetItem);
        this.OutputList.addLast(new CFFFont.UInt8Item('\f'));
        this.OutputList.addLast(new CFFFont.UInt8Item('$'));
        this.OutputList.addLast(offsetItem2);
        this.OutputList.addLast(new CFFFont.UInt8Item('\f'));
        this.OutputList.addLast(new CFFFont.UInt8Item('%'));
        this.OutputList.addLast(offsetItem3);
        this.OutputList.addLast(new CFFFont.UInt8Item('\u000f'));
        this.OutputList.addLast(offsetItem4);
        this.OutputList.addLast(new CFFFont.UInt8Item('\u0011'));
    }

    protected void CreateNewStringIndex(int n) {
        CharSequence charSequence = new StringBuilder();
        charSequence.append(this.fonts[n].name);
        charSequence.append("-OneRange");
        CharSequence charSequence2 = charSequence.toString();
        charSequence = charSequence2;
        if (charSequence2.length() > 127) {
            charSequence = charSequence2.substring(0, 127);
        }
        charSequence2 = new StringBuilder();
        charSequence2.append("AdobeIdentity");
        charSequence2.append((String)charSequence);
        charSequence2 = charSequence2.toString();
        int n2 = this.stringOffsets[this.stringOffsets.length - 1] - this.stringOffsets[0];
        int n3 = this.stringOffsets[0] - 1;
        n = charSequence2.length() + n2 <= 255 ? 1 : (charSequence2.length() + n2 <= 65535 ? 2 : (charSequence2.length() + n2 <= 16777215 ? 3 : 4));
        this.OutputList.addLast(new CFFFont.UInt16Item((char)(this.stringOffsets.length - 1 + 3)));
        this.OutputList.addLast(new CFFFont.UInt8Item((char)n));
        for (int n4 : this.stringOffsets) {
            this.OutputList.addLast(new CFFFont.IndexOffsetItem(n, n4 - n3));
        }
        int n5 = this.stringOffsets[this.stringOffsets.length - 1] - n3 + "Adobe".length();
        this.OutputList.addLast(new CFFFont.IndexOffsetItem(n, n5));
        this.OutputList.addLast(new CFFFont.IndexOffsetItem(n, n5 += "Identity".length()));
        n3 = charSequence.length();
        this.OutputList.addLast(new CFFFont.IndexOffsetItem(n, n5 + n3));
        this.OutputList.addLast(new CFFFont.RangeItem(this.buf, this.stringOffsets[0], n2));
        this.OutputList.addLast(new CFFFont.StringItem((String)charSequence2));
    }

    void CreateNonCIDPrivate(int n, CFFFont.OffsetItem offsetItem) {
        this.seek(this.fonts[n].privateOffset);
        while (this.getPosition() < this.fonts[n].privateOffset + this.fonts[n].privateLength) {
            int n2 = this.getPosition();
            this.getDictItem();
            int n3 = this.getPosition();
            if (this.key == "Subrs") {
                this.OutputList.addLast(offsetItem);
                this.OutputList.addLast(new CFFFont.UInt8Item('\u0013'));
                continue;
            }
            this.OutputList.addLast(new CFFFont.RangeItem(this.buf, n2, n3 - n2));
        }
    }

    void CreateNonCIDSubrs(int n, CFFFont.IndexBaseItem indexBaseItem, CFFFont.OffsetItem offsetItem) {
        this.OutputList.addLast(new CFFFont.SubrMarkerItem(offsetItem, indexBaseItem));
        if (this.NewSubrsIndexNonCID != null) {
            this.OutputList.addLast(new CFFFont.RangeItem(new RandomAccessFileOrArray(this.NewSubrsIndexNonCID), 0, this.NewSubrsIndexNonCID.length));
        }
    }

    protected void EmptyStack() {
        for (int i = 0; i < this.arg_count; ++i) {
            this.args[i] = null;
        }
        this.arg_count = 0;
    }

    protected void HandelStack() {
        int n = this.StackOpp();
        if (n < 2) {
            if (n == 1) {
                this.PushStack();
                return;
            }
            for (int i = 0; i < n * -1; ++i) {
                this.PopStack();
            }
        } else {
            this.EmptyStack();
        }
    }

    protected void PopStack() {
        if (this.arg_count > 0) {
            this.args[this.arg_count - 1] = null;
            --this.arg_count;
        }
    }

    public byte[] Process(String arrby) throws IOException {
        this.buf.reOpen();
        int n = 0;
        do {
            block13 : {
                block14 : {
                    if (n < this.fonts.length && !arrby.equals(this.fonts[n].name)) break block13;
                    int n2 = this.fonts.length;
                    if (n != n2) break block14;
                    try {
                        this.buf.close();
                        return null;
                    }
                    catch (Exception exception) {
                        return null;
                    }
                }
                try {
                    if (this.gsubrIndexOffset >= 0) {
                        this.GBias = this.CalcBias(this.gsubrIndexOffset, n);
                    }
                    this.BuildNewCharString(n);
                    this.BuildNewLGSubrs(n);
                    arrby = this.BuildNewFile(n);
                    return arrby;
                }
                finally {
                    this.buf.close();
                }
            }
            ++n;
        } while (true);
    }

    protected void PushStack() {
        ++this.arg_count;
    }

    protected void ReadASubr(int n, int n2, int n3, int n4, HashMap<Integer, int[]> hashMap, ArrayList<Integer> arrayList, int[] arrn) {
        this.EmptyStack();
        this.NumOfHints = 0;
        this.seek(n);
        while (this.getPosition() < n2) {
            int n5;
            block9 : {
                block11 : {
                    block10 : {
                        this.ReadCommand();
                        n = this.getPosition();
                        Object object = this.arg_count > 0 ? this.args[this.arg_count - 1] : null;
                        n5 = this.arg_count;
                        this.HandelStack();
                        if (this.key == "callsubr") {
                            if (n5 <= 0) continue;
                            n5 = (Integer)object + n4;
                            if (!hashMap.containsKey(n5)) {
                                hashMap.put(n5, null);
                                arrayList.add(n5);
                            }
                            this.CalcHints(arrn[n5], arrn[n5 + 1], n4, n3, arrn);
                            this.seek(n);
                            continue;
                        }
                        if (this.key == "callgsubr") {
                            if (n5 <= 0) continue;
                            n5 = (Integer)object + n3;
                            if (!this.hGSubrsUsed.containsKey(n5)) {
                                this.hGSubrsUsed.put(n5, null);
                                this.lGSubrsUsed.add(n5);
                            }
                            this.CalcHints(this.gsubrOffsets[n5], this.gsubrOffsets[n5 + 1], n4, n3, arrn);
                            this.seek(n);
                            continue;
                        }
                        if (this.key == "hstem" || this.key == "vstem" || this.key == "hstemhm" || this.key == "vstemhm") break block9;
                        if (this.key != "hintmask" && this.key != "cntrmask") continue;
                        this.NumOfHints += n5 / 2;
                        n5 = this.NumOfHints / 8;
                        if (this.NumOfHints % 8 != 0) break block10;
                        n = n5;
                        if (n5 != 0) break block11;
                    }
                    n = n5 + 1;
                }
                for (n5 = 0; n5 < n; ++n5) {
                    this.getCard8();
                }
                continue;
            }
            this.NumOfHints += n5 / 2;
        }
    }

    protected void ReadCommand() {
        this.key = null;
        int n = 0;
        while (n == 0) {
            char c;
            int n2 = this.getCard8();
            if (n2 == 28) {
                n2 = this.getCard8();
                c = this.getCard8();
                this.args[this.arg_count] = n2 << 8 | c;
                ++this.arg_count;
                continue;
            }
            if (n2 >= 32 && n2 <= 246) {
                this.args[this.arg_count] = n2 - 139;
                ++this.arg_count;
                continue;
            }
            if (n2 >= 247 && n2 <= 250) {
                c = this.getCard8();
                this.args[this.arg_count] = (n2 - 247) * 256 + c + 108;
                ++this.arg_count;
                continue;
            }
            if (n2 >= 251 && n2 <= 254) {
                c = this.getCard8();
                this.args[this.arg_count] = (- n2 - 251) * 256 - c - 108;
                ++this.arg_count;
                continue;
            }
            if (n2 == 255) {
                n2 = this.getCard8();
                c = this.getCard8();
                char c2 = this.getCard8();
                char c3 = this.getCard8();
                this.args[this.arg_count] = n2 << 24 | c << 16 | c2 << 8 | c3;
                ++this.arg_count;
                continue;
            }
            if (n2 > 31 || n2 == 28) continue;
            if (n2 == 12) {
                n = n2 = this.getCard8();
                if (n2 > SubrsEscapeFuncs.length - 1) {
                    n = SubrsEscapeFuncs.length - 1;
                }
                this.key = SubrsEscapeFuncs[n];
            } else {
                this.key = SubrsFunctions[n2];
            }
            n = 1;
        }
    }

    protected void ReadFDArray(int n) {
        this.seek(this.fonts[n].fdarrayOffset);
        this.fonts[n].FDArrayCount = this.getCard16();
        this.fonts[n].FDArrayOffsize = this.getCard8();
        if (this.fonts[n].FDArrayOffsize < 4) {
            CFFFont.Font font = this.fonts[n];
            ++font.FDArrayOffsize;
        }
        this.fonts[n].FDArrayOffsets = this.getIndex(this.fonts[n].fdarrayOffset);
    }

    void Reconstruct(int n) {
        CFFFont.OffsetItem[] arroffsetItem = new CFFFont.DictOffsetItem[this.fonts[n].FDArrayOffsets.length - 1];
        CFFFont.IndexBaseItem[] arrindexBaseItem = new CFFFont.IndexBaseItem[this.fonts[n].fdprivateOffsets.length];
        CFFFont.OffsetItem[] arroffsetItem2 = new CFFFont.DictOffsetItem[this.fonts[n].fdprivateOffsets.length];
        this.ReconstructFDArray(n, arroffsetItem);
        this.ReconstructPrivateDict(n, arroffsetItem, arrindexBaseItem, arroffsetItem2);
        this.ReconstructPrivateSubrs(n, arrindexBaseItem, arroffsetItem2);
    }

    void ReconstructFDArray(int n, CFFFont.OffsetItem[] arroffsetItem) {
        int n2;
        this.BuildIndexHeader(this.fonts[n].FDArrayCount, this.fonts[n].FDArrayOffsize, 1);
        CFFFont.IndexOffsetItem[] arrindexOffsetItem = new CFFFont.IndexOffsetItem[this.fonts[n].FDArrayOffsets.length - 1];
        for (n2 = 0; n2 < this.fonts[n].FDArrayOffsets.length - 1; ++n2) {
            arrindexOffsetItem[n2] = new CFFFont.IndexOffsetItem(this.fonts[n].FDArrayOffsize);
            this.OutputList.addLast(arrindexOffsetItem[n2]);
        }
        CFFFont.IndexBaseItem indexBaseItem = new CFFFont.IndexBaseItem();
        this.OutputList.addLast(indexBaseItem);
        n2 = 0;
        while (n2 < this.fonts[n].FDArrayOffsets.length - 1) {
            int[] arrn;
            int n3;
            int n4;
            this.seek(this.fonts[n].FDArrayOffsets[n2]);
            while ((n3 = this.getPosition()) < (arrn = this.fonts[n].FDArrayOffsets)[n4 = n2 + 1]) {
                n4 = this.getPosition();
                this.getDictItem();
                int n5 = this.getPosition();
                if (this.key == "Private") {
                    n3 = (Integer)this.args[0];
                    int n6 = this.CalcSubrOffsetSize(this.fonts[n].fdprivateOffsets[n2], this.fonts[n].fdprivateLengths[n2]);
                    n4 = n3;
                    if (n6 != 0) {
                        n4 = n3 + (5 - n6);
                    }
                    this.OutputList.addLast(new CFFFont.DictNumberItem(n4));
                    arroffsetItem[n2] = new CFFFont.DictOffsetItem();
                    this.OutputList.addLast(arroffsetItem[n2]);
                    this.OutputList.addLast(new CFFFont.UInt8Item('\u0012'));
                    this.seek(n5);
                    continue;
                }
                this.OutputList.addLast(new CFFFont.RangeItem(this.buf, n4, n5 - n4));
            }
            this.OutputList.addLast(new CFFFont.IndexMarkerItem(arrindexOffsetItem[n2], indexBaseItem));
            n2 = n4;
        }
    }

    void ReconstructPrivateDict(int n, CFFFont.OffsetItem[] arroffsetItem, CFFFont.IndexBaseItem[] arrindexBaseItem, CFFFont.OffsetItem[] arroffsetItem2) {
        for (int i = 0; i < this.fonts[n].fdprivateOffsets.length; ++i) {
            this.OutputList.addLast(new CFFFont.MarkerItem(arroffsetItem[i]));
            arrindexBaseItem[i] = new CFFFont.IndexBaseItem();
            this.OutputList.addLast(arrindexBaseItem[i]);
            this.seek(this.fonts[n].fdprivateOffsets[i]);
            while (this.getPosition() < this.fonts[n].fdprivateOffsets[i] + this.fonts[n].fdprivateLengths[i]) {
                int n2 = this.getPosition();
                this.getDictItem();
                int n3 = this.getPosition();
                if (this.key == "Subrs") {
                    arroffsetItem2[i] = new CFFFont.DictOffsetItem();
                    this.OutputList.addLast(arroffsetItem2[i]);
                    this.OutputList.addLast(new CFFFont.UInt8Item('\u0013'));
                    continue;
                }
                this.OutputList.addLast(new CFFFont.RangeItem(this.buf, n2, n3 - n2));
            }
        }
    }

    void ReconstructPrivateSubrs(int n, CFFFont.IndexBaseItem[] arrindexBaseItem, CFFFont.OffsetItem[] arroffsetItem) {
        for (int i = 0; i < this.fonts[n].fdprivateLengths.length; ++i) {
            if (arroffsetItem[i] == null || this.fonts[n].PrivateSubrsOffset[i] < 0) continue;
            this.OutputList.addLast(new CFFFont.SubrMarkerItem(arroffsetItem[i], arrindexBaseItem[i]));
            if (this.NewLSubrsIndex[i] == null) continue;
            this.OutputList.addLast(new CFFFont.RangeItem(new RandomAccessFileOrArray(this.NewLSubrsIndex[i]), 0, this.NewLSubrsIndex[i].length));
        }
    }

    protected int StackOpp() {
        if (this.key == "ifelse") {
            return -3;
        }
        if (this.key != "roll" && this.key != "put") {
            if (this.key != "callsubr" && this.key != "callgsubr" && this.key != "add" && this.key != "sub" && this.key != "div" && this.key != "mul" && this.key != "drop" && this.key != "and" && this.key != "or" && this.key != "eq") {
                if (this.key != "abs" && this.key != "neg" && this.key != "sqrt" && this.key != "exch" && this.key != "index" && this.key != "get" && this.key != "not" && this.key != "return") {
                    if (this.key != "random" && this.key != "dup") {
                        return 2;
                    }
                    return 1;
                }
                return 0;
            }
            return -1;
        }
        return -2;
    }

    protected int countEntireIndexRange(int n) {
        this.seek(n);
        char c = this.getCard16();
        if (c == '\u0000') {
            return 2;
        }
        char c2 = this.getCard8();
        this.seek(n + 2 + 1 + c * c2);
        return (c + '\u0001') * c2 + 3 + (this.getOffset(c2) - 1);
    }

    protected void readFDSelect(int n) {
        int n2;
        int n3 = this.fonts[n].nglyphs;
        int[] arrn = new int[n3];
        this.seek(this.fonts[n].fdselectOffset);
        int n4 = this.fonts[n].FDSelectFormat = (int)this.getCard8();
        if (n4 != 0) {
            if (n4 == 3) {
                int n5 = this.getCard16();
                n4 = this.getCard16();
                n2 = 0;
                for (n3 = 0; n3 < n5; ++n3) {
                    char c = this.getCard8();
                    char c2 = this.getCard16();
                    for (int i = 0; i < c2 - n4; ++i) {
                        arrn[n2] = c;
                        ++n2;
                    }
                    n4 = c2;
                }
                this.fonts[n].FDSelectLength = n5 * 3 + 3 + 2;
            }
        } else {
            for (n2 = 0; n2 < n3; ++n2) {
                arrn[n2] = this.getCard8();
            }
            this.fonts[n].FDSelectLength = this.fonts[n].nglyphs + 1;
        }
        this.fonts[n].FDSelect = arrn;
    }
}

