/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf;

import com.itextpdf.text.BaseColor;
import com.itextpdf.text.error_messages.MessageLocalization;
import com.itextpdf.text.pdf.CMYKColor;
import com.itextpdf.text.pdf.ColorDetails;
import com.itextpdf.text.pdf.ExtendedColor;
import com.itextpdf.text.pdf.GrayColor;
import com.itextpdf.text.pdf.ICachedColorSpace;
import com.itextpdf.text.pdf.IPdfSpecialColorSpace;
import com.itextpdf.text.pdf.LabColor;
import com.itextpdf.text.pdf.PdfArray;
import com.itextpdf.text.pdf.PdfDictionary;
import com.itextpdf.text.pdf.PdfFunction;
import com.itextpdf.text.pdf.PdfIndirectReference;
import com.itextpdf.text.pdf.PdfName;
import com.itextpdf.text.pdf.PdfObject;
import com.itextpdf.text.pdf.PdfSpotColor;
import com.itextpdf.text.pdf.PdfWriter;
import java.lang.reflect.Array;
import java.util.Arrays;
import java.util.Locale;

public class PdfDeviceNColor
implements ICachedColorSpace,
IPdfSpecialColorSpace {
    ColorDetails[] colorantsDetails;
    PdfSpotColor[] spotColors;

    public PdfDeviceNColor(PdfSpotColor[] arrpdfSpotColor) {
        this.spotColors = arrpdfSpotColor;
    }

    @Override
    public boolean equals(Object object) {
        if (this == object) {
            return true;
        }
        if (!(object instanceof PdfDeviceNColor)) {
            return false;
        }
        object = (PdfDeviceNColor)object;
        if (!Arrays.equals(this.spotColors, object.spotColors)) {
            return false;
        }
        return true;
    }

    @Override
    public ColorDetails[] getColorantDetails(PdfWriter pdfWriter) {
        if (this.colorantsDetails == null) {
            this.colorantsDetails = new ColorDetails[this.spotColors.length];
            PdfSpotColor[] arrpdfSpotColor = this.spotColors;
            int n = arrpdfSpotColor.length;
            int n2 = 0;
            for (int i = 0; i < n; ++i) {
                PdfSpotColor pdfSpotColor = arrpdfSpotColor[i];
                this.colorantsDetails[n2] = pdfWriter.addSimple(pdfSpotColor);
                ++n2;
            }
        }
        return this.colorantsDetails;
    }

    public int getNumberOfColorants() {
        return this.spotColors.length;
    }

    @Override
    public PdfObject getPdfObject(PdfWriter object) {
        Object object2;
        Object object3;
        int n;
        int n2;
        PdfArray pdfArray = new PdfArray(PdfName.DEVICEN);
        Object object4 = new PdfArray();
        float[] arrf = new float[this.spotColors.length * 2];
        PdfDictionary pdfDictionary = new PdfDictionary();
        int n3 = this.spotColors.length;
        Object object5 = (float[][])Array.newInstance(Float.TYPE, 4, n3);
        String string2 = "";
        for (n = 0; n < n3; ++n) {
            object2 = this.spotColors[n];
            n2 = n * 2;
            arrf[n2] = 0.0f;
            float f = 1.0f;
            arrf[n2 + 1] = 1.0f;
            object4.add(object2.getName());
            if (pdfDictionary.get(object2.getName()) != null) {
                throw new RuntimeException(MessageLocalization.getComposedMessage("devicen.component.names.shall.be.different", new Object[0]));
            }
            if (this.colorantsDetails != null) {
                pdfDictionary.put(object2.getName(), this.colorantsDetails[n].getIndirectReference());
            } else {
                pdfDictionary.put(object2.getName(), object2.getPdfObject((PdfWriter)object));
            }
            object3 = object2.getAlternativeCS();
            if (object3 instanceof ExtendedColor) {
                n2 = ((ExtendedColor)object3).type;
                if (n2 != 7) {
                    switch (n2) {
                        default: {
                            throw new RuntimeException(MessageLocalization.getComposedMessage("only.rgb.gray.and.cmyk.are.supported.as.alternative.color.spaces", new Object[0]));
                        }
                        case 2: {
                            object2 = object5[0];
                            object3 = (CMYKColor)object3;
                            object2[n] = object3.getCyan();
                            object5[1][n] = object3.getMagenta();
                            object5[2][n] = object3.getYellow();
                            object5[3][n] = object3.getBlack();
                            break;
                        }
                        case 1: {
                            object5[0][n] = (float)false;
                            object5[1][n] = false;
                            object5[2][n] = false;
                            object5[3][n] = 1.0f - ((GrayColor)object3).getGray();
                            break;
                        }
                    }
                } else {
                    object2 = ((LabColor)object3).toCmyk();
                    object5[0][n] = object2.getCyan();
                    object5[1][n] = object2.getMagenta();
                    object5[2][n] = object2.getYellow();
                    object5[3][n] = object2.getBlack();
                }
            } else {
                float f2 = object3.getRed();
                float f3 = object3.getGreen();
                float f4 = object3.getBlue();
                if (f2 == 0.0f && f3 == 0.0f && f4 == 0.0f) {
                    f2 = 0.0f;
                    f4 = 0.0f;
                    f3 = 0.0f;
                } else {
                    f2 = 1.0f - f2 / 255.0f;
                    f3 = 1.0f - f3 / 255.0f;
                    float f5 = 1.0f - f4 / 255.0f;
                    f = Math.min(f2, Math.min(f3, f5));
                    float f6 = 1.0f - f;
                    f4 = (f2 - f) / f6;
                    f3 = (f3 - f) / f6;
                    f2 = (f5 - f) / f6;
                }
                object5[0][n] = f4;
                object5[1][n] = f3;
                object5[2][n] = f2;
                object5[3][n] = f;
            }
            object2 = new StringBuilder();
            object2.append(string2);
            object2.append("pop ");
            string2 = object2.toString();
        }
        pdfArray.add((PdfObject)object4);
        object4 = String.format(Locale.US, "1.000000 %d 1 roll ", n3 + 1);
        pdfArray.add(PdfName.DEVICECMYK);
        object2 = new StringBuilder();
        object2.append((String)object4);
        object2.append((String)object4);
        object2.append((String)object4);
        object2.append((String)object4);
        object2 = object2.toString();
        int n4 = n3 + 4;
        object4 = "";
        for (n = n4; n > n3; --n) {
            object3 = new StringBuilder();
            object3.append((String)object4);
            object3.append(String.format(Locale.US, "%d -1 roll ", n));
            object4 = object3.toString();
            for (n2 = n3; n2 > 0; --n2) {
                object3 = new StringBuilder();
                object3.append((String)object4);
                object3.append(String.format(Locale.US, "%d index %f mul 1.000000 cvr exch sub mul ", n2, Float.valueOf((float)object5[n4 - n][n3 - n2])));
                object4 = object3.toString();
            }
            object3 = new StringBuilder();
            object3.append((String)object4);
            object3.append(String.format(Locale.US, "1.000000 cvr exch sub %d 1 roll ", n));
            object4 = object3.toString();
        }
        object5 = new StringBuilder();
        object5.append("{ ");
        object5.append((String)object2);
        object5.append((String)object4);
        object5.append(string2);
        object5.append("}");
        string2 = object5.toString();
        pdfArray.add(PdfFunction.type4((PdfWriter)object, arrf, new float[]{0.0f, 1.0f, 0.0f, 1.0f, 0.0f, 1.0f, 0.0f, 1.0f}, string2).getReference());
        object = new PdfDictionary();
        object.put(PdfName.SUBTYPE, PdfName.NCHANNEL);
        object.put(PdfName.COLORANTS, pdfDictionary);
        pdfArray.add((PdfObject)object);
        return pdfArray;
    }

    public PdfSpotColor[] getSpotColors() {
        return this.spotColors;
    }

    @Override
    public int hashCode() {
        return Arrays.hashCode(this.spotColors);
    }
}

