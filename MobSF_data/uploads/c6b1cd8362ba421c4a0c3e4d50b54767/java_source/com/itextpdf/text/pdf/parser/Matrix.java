/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf.parser;

import java.util.Arrays;

public class Matrix {
    public static final int I11 = 0;
    public static final int I12 = 1;
    public static final int I13 = 2;
    public static final int I21 = 3;
    public static final int I22 = 4;
    public static final int I23 = 5;
    public static final int I31 = 6;
    public static final int I32 = 7;
    public static final int I33 = 8;
    private final float[] vals = new float[]{1.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 1.0f};

    public Matrix() {
    }

    public Matrix(float f, float f2) {
        this.vals[6] = f;
        this.vals[7] = f2;
    }

    public Matrix(float f, float f2, float f3, float f4, float f5, float f6) {
        this.vals[0] = f;
        this.vals[1] = f2;
        this.vals[2] = 0.0f;
        this.vals[3] = f3;
        this.vals[4] = f4;
        this.vals[5] = 0.0f;
        this.vals[6] = f5;
        this.vals[7] = f6;
        this.vals[8] = 1.0f;
    }

    public boolean equals(Object object) {
        if (!(object instanceof Matrix)) {
            return false;
        }
        return Arrays.equals(this.vals, ((Matrix)object).vals);
    }

    public float get(int n) {
        return this.vals[n];
    }

    public float getDeterminant() {
        return this.vals[0] * this.vals[4] * this.vals[8] + this.vals[1] * this.vals[5] * this.vals[6] + this.vals[2] * this.vals[3] * this.vals[7] - this.vals[0] * this.vals[5] * this.vals[7] - this.vals[1] * this.vals[3] * this.vals[8] - this.vals[2] * this.vals[4] * this.vals[6];
    }

    public int hashCode() {
        int n = 1;
        for (int i = 0; i < this.vals.length; ++i) {
            n = n * 31 + Float.floatToIntBits(this.vals[i]);
        }
        return n;
    }

    public Matrix multiply(Matrix arrf) {
        Matrix matrix = new Matrix();
        float[] arrf2 = this.vals;
        arrf = arrf.vals;
        float[] arrf3 = matrix.vals;
        arrf3[0] = arrf2[0] * arrf[0] + arrf2[1] * arrf[3] + arrf2[2] * arrf[6];
        arrf3[1] = arrf2[0] * arrf[1] + arrf2[1] * arrf[4] + arrf2[2] * arrf[7];
        arrf3[2] = arrf2[0] * arrf[2] + arrf2[1] * arrf[5] + arrf2[2] * arrf[8];
        arrf3[3] = arrf2[3] * arrf[0] + arrf2[4] * arrf[3] + arrf2[5] * arrf[6];
        arrf3[4] = arrf2[3] * arrf[1] + arrf2[4] * arrf[4] + arrf2[5] * arrf[7];
        arrf3[5] = arrf2[3] * arrf[2] + arrf2[4] * arrf[5] + arrf2[5] * arrf[8];
        arrf3[6] = arrf2[6] * arrf[0] + arrf2[7] * arrf[3] + arrf2[8] * arrf[6];
        arrf3[7] = arrf2[6] * arrf[1] + arrf2[7] * arrf[4] + arrf2[8] * arrf[7];
        arrf3[8] = arrf2[6] * arrf[2] + arrf2[7] * arrf[5] + arrf2[8] * arrf[8];
        return matrix;
    }

    public Matrix subtract(Matrix arrf) {
        Matrix matrix = new Matrix();
        float[] arrf2 = this.vals;
        arrf = arrf.vals;
        float[] arrf3 = matrix.vals;
        arrf3[0] = arrf2[0] - arrf[0];
        arrf3[1] = arrf2[1] - arrf[1];
        arrf3[2] = arrf2[2] - arrf[2];
        arrf3[3] = arrf2[3] - arrf[3];
        arrf3[4] = arrf2[4] - arrf[4];
        arrf3[5] = arrf2[5] - arrf[5];
        arrf3[6] = arrf2[6] - arrf[6];
        arrf3[7] = arrf2[7] - arrf[7];
        arrf3[8] = arrf2[8] - arrf[8];
        return matrix;
    }

    public String toString() {
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append(this.vals[0]);
        stringBuilder.append("\t");
        stringBuilder.append(this.vals[1]);
        stringBuilder.append("\t");
        stringBuilder.append(this.vals[2]);
        stringBuilder.append("\n");
        stringBuilder.append(this.vals[3]);
        stringBuilder.append("\t");
        stringBuilder.append(this.vals[4]);
        stringBuilder.append("\t");
        stringBuilder.append(this.vals[2]);
        stringBuilder.append("\n");
        stringBuilder.append(this.vals[6]);
        stringBuilder.append("\t");
        stringBuilder.append(this.vals[7]);
        stringBuilder.append("\t");
        stringBuilder.append(this.vals[8]);
        return stringBuilder.toString();
    }
}

