/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf.qrcode;

import com.itextpdf.text.pdf.qrcode.ErrorCorrectionLevel;

final class FormatInformation {
    private static final int[] BITS_SET_IN_HALF_BYTE;
    private static final int[][] FORMAT_INFO_DECODE_LOOKUP;
    private static final int FORMAT_INFO_MASK_QR = 21522;
    private final byte dataMask;
    private final ErrorCorrectionLevel errorCorrectionLevel;

    static {
        int[] arrn = new int[]{21522, 0};
        int[] arrn2 = new int[]{24188, 2};
        int[] arrn3 = new int[]{23371, 3};
        int[] arrn4 = new int[]{17913, 4};
        int[] arrn5 = new int[]{16590, 5};
        int[] arrn6 = new int[]{20375, 6};
        int[] arrn7 = new int[]{19104, 7};
        int[] arrn8 = new int[]{29427, 9};
        int[] arrn9 = new int[]{32170, 10};
        int[] arrn10 = new int[]{26159, 12};
        int[] arrn11 = new int[]{26998, 15};
        int[] arrn12 = new int[]{5769, 16};
        int[] arrn13 = new int[]{5054, 17};
        int[] arrn14 = new int[]{7399, 18};
        int[] arrn15 = new int[]{1890, 20};
        int[] arrn16 = new int[]{597, 21};
        int[] arrn17 = new int[]{3340, 22};
        int[] arrn18 = new int[]{2107, 23};
        int[] arrn19 = new int[]{13663, 24};
        int[] arrn20 = new int[]{12392, 25};
        int[] arrn21 = new int[]{16177, 26};
        int[] arrn22 = new int[]{9396, 28};
        int[] arrn23 = new int[]{8579, 29};
        int[] arrn24 = new int[]{11245, 31};
        FORMAT_INFO_DECODE_LOOKUP = new int[][]{arrn, {20773, 1}, arrn2, arrn3, arrn4, arrn5, arrn6, arrn7, {30660, 8}, arrn8, arrn9, {30877, 11}, arrn10, {25368, 13}, {27713, 14}, arrn11, arrn12, arrn13, arrn14, {6608, 19}, arrn15, arrn16, arrn17, arrn18, arrn19, arrn20, arrn21, {14854, 27}, arrn22, arrn23, {11994, 30}, arrn24};
        BITS_SET_IN_HALF_BYTE = new int[]{0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 4};
    }

    private FormatInformation(int n) {
        this.errorCorrectionLevel = ErrorCorrectionLevel.forBits(n >> 3 & 3);
        this.dataMask = (byte)(n & 7);
    }

    static FormatInformation decodeFormatInformation(int n, int n2) {
        FormatInformation formatInformation = FormatInformation.doDecodeFormatInformation(n, n2);
        if (formatInformation != null) {
            return formatInformation;
        }
        return FormatInformation.doDecodeFormatInformation(n ^ 21522, n2 ^ 21522);
    }

    private static FormatInformation doDecodeFormatInformation(int n, int n2) {
        int n3 = Integer.MAX_VALUE;
        int n4 = 0;
        for (int i = 0; i < FORMAT_INFO_DECODE_LOOKUP.length; ++i) {
            int[] arrn = FORMAT_INFO_DECODE_LOOKUP[i];
            int n5 = arrn[0];
            if (n5 != n && n5 != n2) {
                int n6 = FormatInformation.numBitsDiffering(n, n5);
                int n7 = n3;
                if (n6 < n3) {
                    n4 = arrn[1];
                    n7 = n6;
                }
                n3 = n7;
                n6 = n4;
                if (n != n2) {
                    n5 = FormatInformation.numBitsDiffering(n2, n5);
                    n3 = n7;
                    n6 = n4;
                    if (n5 < n7) {
                        n6 = arrn[1];
                        n3 = n5;
                    }
                }
                n4 = n6;
                continue;
            }
            return new FormatInformation(arrn[1]);
        }
        if (n3 <= 3) {
            return new FormatInformation(n4);
        }
        return null;
    }

    static int numBitsDiffering(int n, int n2) {
        return BITS_SET_IN_HALF_BYTE[n & 15] + BITS_SET_IN_HALF_BYTE[n >>> 4 & 15] + BITS_SET_IN_HALF_BYTE[n >>> 8 & 15] + BITS_SET_IN_HALF_BYTE[n >>> 12 & 15] + BITS_SET_IN_HALF_BYTE[n >>> 16 & 15] + BITS_SET_IN_HALF_BYTE[n >>> 20 & 15] + BITS_SET_IN_HALF_BYTE[n >>> 24 & 15] + BITS_SET_IN_HALF_BYTE[(n ^= n2) >>> 28 & 15];
    }

    public boolean equals(Object object) {
        boolean bl = object instanceof FormatInformation;
        boolean bl2 = false;
        if (!bl) {
            return false;
        }
        object = (FormatInformation)object;
        bl = bl2;
        if (this.errorCorrectionLevel == object.errorCorrectionLevel) {
            bl = bl2;
            if (this.dataMask == object.dataMask) {
                bl = true;
            }
        }
        return bl;
    }

    byte getDataMask() {
        return this.dataMask;
    }

    ErrorCorrectionLevel getErrorCorrectionLevel() {
        return this.errorCorrectionLevel;
    }

    public int hashCode() {
        return this.errorCorrectionLevel.ordinal() << 3 | this.dataMask;
    }
}

