/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf;

import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.pdf.Barcode;
import com.itextpdf.text.pdf.PdfContentByte;

public class BarcodePostnet
extends Barcode {
    private static final byte[][] BARS;

    static {
        byte[] arrby = new byte[]{0, 0, 0, 1, 1};
        byte[] arrby2 = new byte[]{0, 1, 1, 0, 0};
        BARS = new byte[][]{{1, 1, 0, 0, 0}, arrby, {0, 0, 1, 0, 1}, {0, 0, 1, 1, 0}, {0, 1, 0, 0, 1}, {0, 1, 0, 1, 0}, arrby2, {1, 0, 0, 0, 1}, {1, 0, 0, 1, 0}, {1, 0, 1, 0, 0}};
    }

    public BarcodePostnet() {
        this.n = 3.2727273f;
        this.x = 1.4399999f;
        this.barHeight = 9.0f;
        this.size = 3.6000001f;
        this.codeType = 7;
    }

    public static byte[] getBarsPostnet(String string2) {
        int n;
        int n2 = 0;
        for (n = string2.length() - 1; n >= 0; --n) {
            n2 += string2.charAt(n) - 48;
        }
        byte[] arrby = new byte[]();
        arrby.append(string2);
        arrby.append((char)((10 - n2 % 10) % 10 + 48));
        string2 = arrby.toString();
        arrby = new byte[string2.length() * 5 + 2];
        arrby[0] = 1;
        arrby[arrby.length - 1] = 1;
        for (n = 0; n < string2.length(); ++n) {
            n2 = string2.charAt(n);
            System.arraycopy(BARS[n2 - 48], 0, arrby, n * 5 + 1, 5);
        }
        return arrby;
    }

    @Override
    public Rectangle getBarcodeSize() {
        return new Rectangle((float)((this.code.length() + 1) * 5 + 1) * this.n + this.x, this.barHeight);
    }

    @Override
    public Rectangle placeBarcode(PdfContentByte pdfContentByte, BaseColor arrby, BaseColor baseColor) {
        if (arrby != null) {
            pdfContentByte.setColorFill((BaseColor)arrby);
        }
        arrby = BarcodePostnet.getBarsPostnet(this.code);
        int n = this.codeType;
        byte by = 1;
        int n2 = 0;
        if (n == 8) {
            arrby[0] = 0;
            arrby[arrby.length - 1] = 0;
            by = 0;
        }
        float f = 0.0f;
        while (n2 < arrby.length) {
            float f2 = this.x;
            float f3 = this.inkSpreading;
            float f4 = arrby[n2] == by ? this.barHeight : this.size;
            pdfContentByte.rectangle(f, 0.0f, f2 - f3, f4);
            f += this.n;
            ++n2;
        }
        pdfContentByte.fill();
        return this.getBarcodeSize();
    }
}

