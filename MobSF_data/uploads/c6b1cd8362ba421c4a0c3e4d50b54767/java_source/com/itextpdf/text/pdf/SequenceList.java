/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf;

import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;

public class SequenceList {
    protected static final int COMMA = 1;
    private static final int DIGIT = 1;
    private static final int DIGIT2 = 3;
    protected static final int END = 6;
    protected static final char EOT = '\uffff';
    private static final int FIRST = 0;
    protected static final int MINUS = 2;
    protected static final int NOT = 3;
    private static final String NOT_OTHER = "-,!0123456789";
    protected static final int NUMBER = 5;
    private static final int OTHER = 2;
    protected static final int TEXT = 4;
    protected boolean even;
    protected int high;
    protected boolean inverse;
    protected int low;
    protected int number;
    protected boolean odd;
    protected String other;
    protected int ptr = 0;
    protected char[] text;

    protected SequenceList(String string2) {
        this.text = string2.toCharArray();
    }

    public static List<Integer> expand(String object, int n) {
        object = new SequenceList((String)object);
        LinkedList<Integer> linkedList = new LinkedList<Integer>();
        boolean bl = false;
        block0 : while (!bl) {
            int n2;
            int n3;
            boolean bl2;
            int n4;
            block21 : {
                block23 : {
                    block22 : {
                        bl2 = object.getAttributes();
                        n3 = object.low;
                        n4 = -1;
                        if (n3 == -1 && object.high == -1 && !object.even && !object.odd) {
                            bl = bl2;
                            continue;
                        }
                        int n5 = object.low;
                        n3 = 1;
                        n2 = 1;
                        if (n5 < 1) {
                            object.low = 1;
                        }
                        if (object.high < 1 || object.high > n) {
                            object.high = n;
                        }
                        if (object.low > n) {
                            object.low = n;
                        }
                        if (object.inverse) {
                            if (object.low > object.high) {
                                n3 = object.low;
                                object.low = object.high;
                                object.high = n3;
                            }
                            ListIterator<Integer> listIterator = linkedList.listIterator();
                            do {
                                bl = bl2;
                                if (!listIterator.hasNext()) continue block0;
                                n3 = listIterator.next();
                                if (object.even && (n3 & 1) == 1 || object.odd && (n3 & 1) == 0 || n3 < object.low || n3 > object.high) continue;
                                listIterator.remove();
                            } while (true);
                        }
                        if (object.low <= object.high) break block21;
                        if (object.odd) break block22;
                        n3 = n4;
                        if (!object.even) break block23;
                    }
                    if (object.even) {
                        object.low &= -2;
                    } else {
                        n4 = object.low;
                        n3 = n2;
                        if ((object.low & 1) == 1) {
                            n3 = 0;
                        }
                        object.low = n4 - n3;
                    }
                    n3 = -2;
                }
                n2 = object.low;
                do {
                    bl = bl2;
                    if (n2 < object.high) continue block0;
                    linkedList.add(n2);
                    n2 += n3;
                } while (true);
            }
            if (!object.odd && !object.even) {
                n3 = 1;
            } else {
                n2 = 2;
                if (object.odd) {
                    object.low |= 1;
                    n3 = n2;
                } else {
                    n4 = object.low;
                    if ((object.low & 1) != 1) {
                        n3 = 0;
                    }
                    object.low = n4 + n3;
                    n3 = n2;
                }
            }
            n2 = object.low;
            do {
                bl = bl2;
                if (n2 > object.high) continue block0;
                linkedList.add(n2);
                n2 += n3;
            } while (true);
        }
        return linkedList;
    }

    private void otherProc() {
        if (!this.other.equals("odd") && !this.other.equals("o")) {
            if (this.other.equals("even") || this.other.equals("e")) {
                this.odd = false;
                this.even = true;
                return;
            }
        } else {
            this.odd = true;
            this.even = false;
        }
    }

    /*
     * Exception decompiling
     */
    protected boolean getAttributes() {
        // This method has failed to decompile.  When submitting a bug report, please provide this stack trace, and (if you hold appropriate legal rights) the relevant class file.
        // org.benf.cfr.reader.util.ConfusedCFRException: Tried to end blocks [3[CASE]], but top level block is 9[SWITCH]
        // org.benf.cfr.reader.bytecode.analysis.opgraph.Op04StructuredStatement.processEndingBlocks(Op04StructuredStatement.java:416)
        // org.benf.cfr.reader.bytecode.analysis.opgraph.Op04StructuredStatement.buildNestedBlocks(Op04StructuredStatement.java:468)
        // org.benf.cfr.reader.bytecode.analysis.opgraph.Op03SimpleStatement.createInitialStructuredBlock(Op03SimpleStatement.java:2960)
        // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisInner(CodeAnalyser.java:818)
        // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisOrWrapFail(CodeAnalyser.java:196)
        // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysis(CodeAnalyser.java:141)
        // org.benf.cfr.reader.entities.attributes.AttributeCode.analyse(AttributeCode.java:95)
        // org.benf.cfr.reader.entities.Method.analyse(Method.java:372)
        // org.benf.cfr.reader.entities.ClassFile.analyseMid(ClassFile.java:867)
        // org.benf.cfr.reader.entities.ClassFile.analyseTop(ClassFile.java:768)
        // org.benf.cfr.reader.Main.doJar(Main.java:141)
        // org.benf.cfr.reader.Main.main(Main.java:242)
        throw new IllegalStateException("Decompilation failed");
    }

    protected int getType() {
        block16 : {
            CharSequence charSequence = new StringBuffer();
            int n = 0;
            block9 : do {
                char c;
                if ((c = this.nextChar()) == '\uffff') {
                    if (n == 1) {
                        charSequence = charSequence.toString();
                        this.other = charSequence;
                        this.number = Integer.parseInt((String)charSequence);
                        return 5;
                    }
                    if (n == 2) {
                        this.other = charSequence.toString().toLowerCase();
                        return 4;
                    }
                    return 6;
                }
                switch (n) {
                    default: {
                        continue block9;
                    }
                    case 2: {
                        if (NOT_OTHER.indexOf(c) < 0) {
                            charSequence.append(c);
                            continue block9;
                        }
                        this.putBack();
                        this.other = charSequence.toString().toLowerCase();
                        return 4;
                    }
                    case 1: {
                        if (c >= '0' && c <= '9') {
                            charSequence.append(c);
                            continue block9;
                        }
                        this.putBack();
                        charSequence = charSequence.toString();
                        this.other = charSequence;
                        this.number = Integer.parseInt((String)charSequence);
                        return 5;
                    }
                    case 0: 
                }
                if (c == '!') break block16;
                switch (c) {
                    default: {
                        charSequence.append(c);
                        if (c >= '0' && c <= '9') {
                            n = 1;
                            continue block9;
                        }
                        n = 2;
                        continue block9;
                    }
                    case '-': {
                        return 2;
                    }
                    case ',': 
                }
                break;
            } while (true);
            return 1;
        }
        return 3;
    }

    protected char nextChar() {
        char c;
        char[] arrc;
        int n;
        do {
            if (this.ptr >= this.text.length) {
                return '\uffff';
            }
            arrc = this.text;
            n = this.ptr;
            this.ptr = n + 1;
        } while ((c = arrc[n]) <= ' ');
        return c;
    }

    protected void putBack() {
        --this.ptr;
        if (this.ptr < 0) {
            this.ptr = 0;
        }
    }
}

