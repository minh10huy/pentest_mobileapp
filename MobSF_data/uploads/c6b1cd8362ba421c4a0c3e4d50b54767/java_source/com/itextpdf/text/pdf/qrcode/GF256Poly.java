/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf.qrcode;

import com.itextpdf.text.pdf.qrcode.GF256;

final class GF256Poly {
    private final int[] coefficients;
    private final GF256 field;

    GF256Poly(GF256 gF256, int[] arrn) {
        if (arrn != null && arrn.length != 0) {
            this.field = gF256;
            int n = arrn.length;
            if (n > 1 && arrn[0] == 0) {
                int n2;
                for (n2 = 1; n2 < n && arrn[n2] == 0; ++n2) {
                }
                if (n2 == n) {
                    this.coefficients = gF256.getZero().coefficients;
                    return;
                }
                this.coefficients = new int[n - n2];
                System.arraycopy(arrn, n2, this.coefficients, 0, this.coefficients.length);
                return;
            }
            this.coefficients = arrn;
            return;
        }
        throw new IllegalArgumentException();
    }

    GF256Poly addOrSubtract(GF256Poly arrn) {
        if (!this.field.equals(arrn.field)) {
            throw new IllegalArgumentException("GF256Polys do not have same GF256 field");
        }
        if (this.isZero()) {
            return arrn;
        }
        if (arrn.isZero()) {
            return this;
        }
        int[] arrn2 = this.coefficients;
        int[] arrn3 = arrn.coefficients;
        int[] arrn4 = arrn2;
        arrn = arrn3;
        if (arrn2.length > arrn3.length) {
            arrn4 = arrn3;
            arrn = arrn2;
        }
        arrn2 = new int[arrn.length];
        int n = arrn.length - arrn4.length;
        System.arraycopy(arrn, 0, arrn2, 0, n);
        for (int i = n; i < arrn.length; ++i) {
            arrn2[i] = GF256.addOrSubtract(arrn4[i - n], arrn[i]);
        }
        return new GF256Poly(this.field, arrn2);
    }

    GF256Poly[] divide(GF256Poly gF256Poly) {
        if (!this.field.equals(gF256Poly.field)) {
            throw new IllegalArgumentException("GF256Polys do not have same GF256 field");
        }
        if (gF256Poly.isZero()) {
            throw new IllegalArgumentException("Divide by 0");
        }
        GF256Poly gF256Poly2 = this.field.getZero();
        int n = gF256Poly.getCoefficient(gF256Poly.getDegree());
        n = this.field.inverse(n);
        GF256Poly gF256Poly3 = this;
        while (gF256Poly3.getDegree() >= gF256Poly.getDegree() && !gF256Poly3.isZero()) {
            int n2 = gF256Poly3.getDegree() - gF256Poly.getDegree();
            int n3 = this.field.multiply(gF256Poly3.getCoefficient(gF256Poly3.getDegree()), n);
            GF256Poly gF256Poly4 = gF256Poly.multiplyByMonomial(n2, n3);
            gF256Poly2 = gF256Poly2.addOrSubtract(this.field.buildMonomial(n2, n3));
            gF256Poly3 = gF256Poly3.addOrSubtract(gF256Poly4);
        }
        return new GF256Poly[]{gF256Poly2, gF256Poly3};
    }

    int evaluateAt(int n) {
        int n2;
        int n3 = 0;
        if (n == 0) {
            return this.getCoefficient(0);
        }
        int n4 = this.coefficients.length;
        if (n == 1) {
            n2 = 0;
            for (n = n3; n < n4; ++n) {
                n2 = GF256.addOrSubtract(n2, this.coefficients[n]);
            }
            return n2;
        }
        n3 = this.coefficients[0];
        for (n2 = 1; n2 < n4; ++n2) {
            n3 = GF256.addOrSubtract(this.field.multiply(n, n3), this.coefficients[n2]);
        }
        return n3;
    }

    int getCoefficient(int n) {
        return this.coefficients[this.coefficients.length - 1 - n];
    }

    int[] getCoefficients() {
        return this.coefficients;
    }

    int getDegree() {
        return this.coefficients.length - 1;
    }

    boolean isZero() {
        int[] arrn = this.coefficients;
        boolean bl = false;
        if (arrn[0] == 0) {
            bl = true;
        }
        return bl;
    }

    GF256Poly multiply(int n) {
        if (n == 0) {
            return this.field.getZero();
        }
        if (n == 1) {
            return this;
        }
        int n2 = this.coefficients.length;
        int[] arrn = new int[n2];
        for (int i = 0; i < n2; ++i) {
            arrn[i] = this.field.multiply(this.coefficients[i], n);
        }
        return new GF256Poly(this.field, arrn);
    }

    GF256Poly multiply(GF256Poly arrn) {
        if (!this.field.equals(arrn.field)) {
            throw new IllegalArgumentException("GF256Polys do not have same GF256 field");
        }
        if (!this.isZero() && !arrn.isZero()) {
            int[] arrn2 = this.coefficients;
            int n = arrn2.length;
            arrn = arrn.coefficients;
            int n2 = arrn.length;
            int[] arrn3 = new int[n + n2 - 1];
            for (int i = 0; i < n; ++i) {
                int n3 = arrn2[i];
                for (int j = 0; j < n2; ++j) {
                    int n4 = i + j;
                    arrn3[n4] = GF256.addOrSubtract(arrn3[n4], this.field.multiply(n3, arrn[j]));
                }
            }
            return new GF256Poly(this.field, arrn3);
        }
        return this.field.getZero();
    }

    GF256Poly multiplyByMonomial(int n, int n2) {
        if (n < 0) {
            throw new IllegalArgumentException();
        }
        if (n2 == 0) {
            return this.field.getZero();
        }
        int n3 = this.coefficients.length;
        int[] arrn = new int[n + n3];
        for (n = 0; n < n3; ++n) {
            arrn[n] = this.field.multiply(this.coefficients[n], n2);
        }
        return new GF256Poly(this.field, arrn);
    }

    public String toString() {
        StringBuffer stringBuffer = new StringBuffer(this.getDegree() * 8);
        for (int i = this.getDegree(); i >= 0; --i) {
            int n;
            int n2 = this.getCoefficient(i);
            if (n2 == 0) continue;
            if (n2 < 0) {
                stringBuffer.append(" - ");
                n = - n2;
            } else {
                n = n2;
                if (stringBuffer.length() > 0) {
                    stringBuffer.append(" + ");
                    n = n2;
                }
            }
            if (i == 0 || n != 1) {
                if ((n = this.field.log(n)) == 0) {
                    stringBuffer.append('1');
                } else if (n == 1) {
                    stringBuffer.append('a');
                } else {
                    stringBuffer.append("a^");
                    stringBuffer.append(n);
                }
            }
            if (i == 0) continue;
            if (i == 1) {
                stringBuffer.append('x');
                continue;
            }
            stringBuffer.append("x^");
            stringBuffer.append(i);
        }
        return stringBuffer.toString();
    }
}

