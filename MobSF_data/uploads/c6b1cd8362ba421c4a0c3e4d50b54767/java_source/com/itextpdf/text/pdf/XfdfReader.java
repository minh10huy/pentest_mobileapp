/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf;

import com.itextpdf.text.error_messages.MessageLocalization;
import com.itextpdf.text.xml.simpleparser.SimpleXMLDocHandler;
import com.itextpdf.text.xml.simpleparser.SimpleXMLParser;
import java.io.ByteArrayInputStream;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Stack;

public class XfdfReader
implements SimpleXMLDocHandler {
    private final Stack<String> fieldNames;
    private final Stack<String> fieldValues;
    HashMap<String, String> fields;
    String fileSpec;
    private boolean foundRoot;
    protected HashMap<String, List<String>> listFields;

    public XfdfReader(InputStream inputStream) throws IOException {
        this.foundRoot = false;
        this.fieldNames = new Stack();
        this.fieldValues = new Stack();
        SimpleXMLParser.parse((SimpleXMLDocHandler)this, inputStream);
    }

    /*
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    public XfdfReader(String string2) throws IOException {
        void var1_4;
        FileInputStream fileInputStream;
        block8 : {
            this.foundRoot = false;
            this.fieldNames = new Stack();
            this.fieldValues = new Stack();
            fileInputStream = null;
            FileInputStream fileInputStream2 = new FileInputStream(string2);
            SimpleXMLParser.parse((SimpleXMLDocHandler)this, fileInputStream2);
            if (fileInputStream2 == null) return;
            try {
                fileInputStream2.close();
                return;
            }
            catch (Exception exception) {
                return;
            }
            catch (Throwable throwable) {
                fileInputStream = fileInputStream2;
            }
            break block8;
            catch (Throwable throwable) {
                // empty catch block
            }
        }
        if (fileInputStream == null) throw var1_4;
        try {
            fileInputStream.close();
        }
        catch (Exception exception) {
            throw var1_4;
        }
        throw var1_4;
    }

    public XfdfReader(byte[] arrby) throws IOException {
        this(new ByteArrayInputStream(arrby));
    }

    @Override
    public void endDocument() {
    }

    @Override
    public void endElement(String arrayList) {
        if (arrayList.equals((Object)"value")) {
            String string2;
            String string3;
            CharSequence charSequence;
            arrayList = "";
            for (int i = 0; i < this.fieldNames.size(); ++i) {
                charSequence = new StringBuilder();
                charSequence.append((String)((Object)arrayList));
                charSequence.append(".");
                charSequence.append(this.fieldNames.elementAt(i));
                arrayList = charSequence.toString();
            }
            charSequence = arrayList;
            if (arrayList.startsWith(".")) {
                charSequence = arrayList.substring(1);
            }
            if ((string2 = this.fields.put((String)charSequence, string3 = this.fieldValues.pop())) != null) {
                List<String> list = this.listFields.get(charSequence);
                arrayList = list;
                if (list == null) {
                    arrayList = new ArrayList<String>();
                    arrayList.add(string2);
                }
                arrayList.add(string3);
                this.listFields.put((String)charSequence, arrayList);
                return;
            }
        } else if (arrayList.equals((Object)"field") && !this.fieldNames.isEmpty()) {
            this.fieldNames.pop();
        }
    }

    public String getField(String string2) {
        return this.fields.get(string2);
    }

    public String getFieldValue(String string2) {
        if ((string2 = this.fields.get(string2)) == null) {
            return null;
        }
        return string2;
    }

    public HashMap<String, String> getFields() {
        return this.fields;
    }

    public String getFileSpec() {
        return this.fileSpec;
    }

    public List<String> getListValues(String string2) {
        return this.listFields.get(string2);
    }

    @Override
    public void startDocument() {
        this.fileSpec = "";
    }

    @Override
    public void startElement(String string2, Map<String, String> map) {
        if (!this.foundRoot) {
            if (!string2.equals("xfdf")) {
                throw new RuntimeException(MessageLocalization.getComposedMessage("root.element.is.not.xfdf.1", string2));
            }
            this.foundRoot = true;
        }
        if (string2.equals("xfdf")) {
            return;
        }
        if (string2.equals("f")) {
            this.fileSpec = map.get("href");
            return;
        }
        if (string2.equals("fields")) {
            this.fields = new HashMap();
            this.listFields = new HashMap();
            return;
        }
        if (string2.equals("field")) {
            string2 = map.get("name");
            this.fieldNames.push(string2);
            return;
        }
        if (string2.equals("value")) {
            this.fieldValues.push("");
        }
    }

    @Override
    public void text(String string2) {
        if (!this.fieldNames.isEmpty()) {
            if (this.fieldValues.isEmpty()) {
                return;
            }
            String string3 = this.fieldValues.pop();
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append(string3);
            stringBuilder.append(string2);
            string2 = stringBuilder.toString();
            this.fieldValues.push(string2);
            return;
        }
    }
}

