/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf;

import com.itextpdf.text.ExceptionConverter;
import com.itextpdf.text.error_messages.MessageLocalization;
import java.io.IOException;
import java.io.OutputStream;

public class LZWDecoder {
    int[] andTable = new int[]{511, 1023, 2047, 4095};
    int bitPointer;
    int bitsToGet = 9;
    int bytePointer;
    byte[] data = null;
    int nextBits = 0;
    int nextData = 0;
    byte[][] stringTable;
    int tableIndex;
    OutputStream uncompData;

    public void addStringToTable(byte[] arrby) {
        byte[][] arrby2 = this.stringTable;
        int n = this.tableIndex;
        this.tableIndex = n + 1;
        arrby2[n] = arrby;
        if (this.tableIndex == 511) {
            this.bitsToGet = 10;
            return;
        }
        if (this.tableIndex == 1023) {
            this.bitsToGet = 11;
            return;
        }
        if (this.tableIndex == 2047) {
            this.bitsToGet = 12;
        }
    }

    public void addStringToTable(byte[] arrby, byte by) {
        int n = arrby.length;
        byte[] arrby2 = new byte[n + 1];
        System.arraycopy(arrby, 0, arrby2, 0, n);
        arrby2[n] = by;
        arrby = this.stringTable;
        n = this.tableIndex;
        this.tableIndex = n + 1;
        arrby[n] = (byte)arrby2;
        if (this.tableIndex == 511) {
            this.bitsToGet = 10;
            return;
        }
        if (this.tableIndex == 1023) {
            this.bitsToGet = 11;
            return;
        }
        if (this.tableIndex == 2047) {
            this.bitsToGet = 12;
        }
    }

    public byte[] composeString(byte[] arrby, byte by) {
        int n = arrby.length;
        byte[] arrby2 = new byte[n + 1];
        System.arraycopy(arrby, 0, arrby2, 0, n);
        arrby2[n] = by;
        return arrby2;
    }

    public void decode(byte[] arrby, OutputStream outputStream) {
        int n;
        if (arrby[0] == 0 && arrby[1] == 1) {
            throw new RuntimeException(MessageLocalization.getComposedMessage("lzw.flavour.not.supported", new Object[0]));
        }
        this.initializeStringTable();
        this.data = arrby;
        this.uncompData = outputStream;
        this.bytePointer = 0;
        this.bitPointer = 0;
        this.nextData = 0;
        this.nextBits = 0;
        int n2 = 0;
        while ((n = this.getNextCode()) != 257) {
            if (n == 256) {
                this.initializeStringTable();
                n2 = this.getNextCode();
                if (n2 == 257) {
                    return;
                }
                this.writeString(this.stringTable[n2]);
                continue;
            }
            if (n < this.tableIndex) {
                arrby = this.stringTable[n];
                this.writeString(arrby);
                this.addStringToTable(this.stringTable[n2], arrby[0]);
            } else {
                arrby = this.stringTable[n2];
                arrby = this.composeString(arrby, arrby[0]);
                this.writeString(arrby);
                this.addStringToTable(arrby);
            }
            n2 = n;
        }
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    public int getNextCode() {
        try {
            int n = this.nextData;
            byte[] arrby = this.data;
            int n2 = this.bytePointer;
            this.bytePointer = n2 + 1;
            this.nextData = n << 8 | arrby[n2] & 255;
            this.nextBits += 8;
            if (this.nextBits < this.bitsToGet) {
                n = this.nextData;
                arrby = this.data;
                n2 = this.bytePointer;
                this.bytePointer = n2 + 1;
                this.nextData = n << 8 | arrby[n2] & 255;
                this.nextBits += 8;
            }
            n = this.nextData;
            n2 = this.nextBits;
            int n3 = this.bitsToGet;
            int n4 = this.andTable[this.bitsToGet - 9];
            this.nextBits -= this.bitsToGet;
            return n >> n2 - n3 & n4;
        }
        catch (ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException) {
            return 257;
        }
    }

    public void initializeStringTable() {
        this.stringTable = new byte[8192][];
        for (int i = 0; i < 256; ++i) {
            this.stringTable[i] = new byte[1];
            this.stringTable[i][0] = (byte)i;
        }
        this.tableIndex = 258;
        this.bitsToGet = 9;
    }

    public void writeString(byte[] arrby) {
        try {
            this.uncompData.write(arrby);
            return;
        }
        catch (IOException iOException) {
            throw new ExceptionConverter(iOException);
        }
    }
}

