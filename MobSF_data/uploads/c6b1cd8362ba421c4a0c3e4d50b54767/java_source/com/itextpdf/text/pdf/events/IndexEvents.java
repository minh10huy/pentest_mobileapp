/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf.events;

import com.itextpdf.text.Chunk;
import com.itextpdf.text.Document;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.pdf.PdfPageEventHelper;
import com.itextpdf.text.pdf.PdfWriter;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;

public class IndexEvents
extends PdfPageEventHelper {
    private Comparator<Entry> comparator = new Comparator<Entry>(){

        @Override
        public int compare(Entry entry, Entry entry2) {
            int n;
            if (entry.getIn1() != null && entry2.getIn1() != null) {
                int n2;
                n = n2 = entry.getIn1().compareToIgnoreCase(entry2.getIn1());
                if (n2 == 0) {
                    n = n2;
                    if (entry.getIn2() != null) {
                        n = n2;
                        if (entry2.getIn2() != null) {
                            n = n2 = entry.getIn2().compareToIgnoreCase(entry2.getIn2());
                            if (n2 == 0) {
                                n = n2;
                                if (entry.getIn3() != null) {
                                    n = n2;
                                    if (entry2.getIn3() != null) {
                                        return entry.getIn3().compareToIgnoreCase(entry2.getIn3());
                                    }
                                }
                            }
                        }
                    }
                }
            } else {
                n = 0;
            }
            return n;
        }
    };
    private long indexcounter = 0L;
    private List<Entry> indexentry = new ArrayList<Entry>();
    private Map<String, Integer> indextag = new TreeMap<String, Integer>();

    public Chunk create(String string2, String string3) {
        return this.create(string2, string3, "", "");
    }

    public Chunk create(String string2, String string3, String string4) {
        return this.create(string2, string3, string4, "");
    }

    public Chunk create(String object, String object2, String string2, String string3) {
        object = new Chunk((String)object);
        CharSequence charSequence = new StringBuilder();
        charSequence.append("idx_");
        long l = this.indexcounter;
        this.indexcounter = l + 1L;
        charSequence.append(l);
        charSequence = charSequence.toString();
        object.setGenericTag((String)charSequence);
        object.setLocalDestination((String)charSequence);
        object2 = new Entry((String)object2, string2, string3, (String)charSequence);
        this.indexentry.add((Entry)object2);
        return object;
    }

    public void create(Chunk chunk, String string2) {
        this.create(chunk, string2, "", "");
    }

    public void create(Chunk chunk, String string2, String string3) {
        this.create(chunk, string2, string3, "");
    }

    public void create(Chunk object, String string2, String string3, String string4) {
        CharSequence charSequence = new StringBuilder();
        charSequence.append("idx_");
        long l = this.indexcounter;
        this.indexcounter = l + 1L;
        charSequence.append(l);
        charSequence = charSequence.toString();
        object.setGenericTag((String)charSequence);
        object.setLocalDestination((String)charSequence);
        object = new Entry(string2, string3, string4, (String)charSequence);
        this.indexentry.add((Entry)object);
    }

    public List<Entry> getSortedEntries() {
        Cloneable cloneable = new HashMap();
        for (int i = 0; i < this.indexentry.size(); ++i) {
            Entry entry = this.indexentry.get(i);
            String string2 = entry.getKey();
            Entry entry2 = (Entry)cloneable.get(string2);
            if (entry2 != null) {
                entry2.addPageNumberAndTag(entry.getPageNumber(), entry.getTag());
                continue;
            }
            entry.addPageNumberAndTag(entry.getPageNumber(), entry.getTag());
            cloneable.put(string2, entry);
        }
        cloneable = new ArrayList(cloneable.values());
        Collections.sort(cloneable, this.comparator);
        return cloneable;
    }

    @Override
    public void onGenericTag(PdfWriter pdfWriter, Document document, Rectangle rectangle, String string2) {
        this.indextag.put(string2, pdfWriter.getPageNumber());
    }

    public void setComparator(Comparator<Entry> comparator) {
        this.comparator = comparator;
    }

    public class Entry {
        private String in1;
        private String in2;
        private String in3;
        private List<Integer> pagenumbers = new ArrayList<Integer>();
        private String tag;
        private List<String> tags = new ArrayList<String>();

        public Entry(String string2, String string3, String string4, String string5) {
            this.in1 = string2;
            this.in2 = string3;
            this.in3 = string4;
            this.tag = string5;
        }

        public void addPageNumberAndTag(int n, String string2) {
            this.pagenumbers.add(n);
            this.tags.add(string2);
        }

        public String getIn1() {
            return this.in1;
        }

        public String getIn2() {
            return this.in2;
        }

        public String getIn3() {
            return this.in3;
        }

        public String getKey() {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append(this.in1);
            stringBuilder.append("!");
            stringBuilder.append(this.in2);
            stringBuilder.append("!");
            stringBuilder.append(this.in3);
            return stringBuilder.toString();
        }

        public int getPageNumber() {
            Integer n = (Integer)IndexEvents.this.indextag.get(this.tag);
            if (n != null) {
                return n;
            }
            return -1;
        }

        public List<Integer> getPagenumbers() {
            return this.pagenumbers;
        }

        public String getTag() {
            return this.tag;
        }

        public List<String> getTags() {
            return this.tags;
        }

        public String toString() {
            StringBuffer stringBuffer = new StringBuffer();
            stringBuffer.append(this.in1);
            stringBuffer.append(' ');
            stringBuffer.append(this.in2);
            stringBuffer.append(' ');
            stringBuffer.append(this.in3);
            stringBuffer.append(' ');
            for (int i = 0; i < this.pagenumbers.size(); ++i) {
                stringBuffer.append(this.pagenumbers.get(i));
                stringBuffer.append(' ');
            }
            return stringBuffer.toString();
        }
    }

}

