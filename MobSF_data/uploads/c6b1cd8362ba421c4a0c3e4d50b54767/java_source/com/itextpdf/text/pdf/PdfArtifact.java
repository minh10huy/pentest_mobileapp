/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf;

import com.itextpdf.text.AccessibleElementId;
import com.itextpdf.text.error_messages.MessageLocalization;
import com.itextpdf.text.pdf.PdfArray;
import com.itextpdf.text.pdf.PdfName;
import com.itextpdf.text.pdf.PdfObject;
import com.itextpdf.text.pdf.PdfString;
import com.itextpdf.text.pdf.interfaces.IAccessibleElement;
import java.util.Arrays;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;

public class PdfArtifact
implements IAccessibleElement {
    private static final HashSet<String> allowedArtifactTypes = new HashSet<String>(Arrays.asList("Pagination", "Layout", "Page", "Background"));
    protected HashMap<PdfName, PdfObject> accessibleAttributes = null;
    protected AccessibleElementId id = new AccessibleElementId();
    protected PdfName role = PdfName.ARTIFACT;

    @Override
    public PdfObject getAccessibleAttribute(PdfName pdfName) {
        if (this.accessibleAttributes != null) {
            return this.accessibleAttributes.get(pdfName);
        }
        return null;
    }

    @Override
    public HashMap<PdfName, PdfObject> getAccessibleAttributes() {
        return this.accessibleAttributes;
    }

    public PdfArray getAttached() {
        if (this.accessibleAttributes == null) {
            return null;
        }
        return (PdfArray)this.accessibleAttributes.get(PdfName.ATTACHED);
    }

    public PdfArray getBBox() {
        if (this.accessibleAttributes == null) {
            return null;
        }
        return (PdfArray)this.accessibleAttributes.get(PdfName.BBOX);
    }

    @Override
    public AccessibleElementId getId() {
        return this.id;
    }

    @Override
    public PdfName getRole() {
        return this.role;
    }

    public PdfString getType() {
        if (this.accessibleAttributes == null) {
            return null;
        }
        return (PdfString)this.accessibleAttributes.get(PdfName.TYPE);
    }

    @Override
    public boolean isInline() {
        return true;
    }

    @Override
    public void setAccessibleAttribute(PdfName pdfName, PdfObject pdfObject) {
        if (this.accessibleAttributes == null) {
            this.accessibleAttributes = new HashMap();
        }
        this.accessibleAttributes.put(pdfName, pdfObject);
    }

    public void setAttached(PdfArray pdfArray) {
        this.setAccessibleAttribute(PdfName.ATTACHED, pdfArray);
    }

    public void setBBox(PdfArray pdfArray) {
        this.setAccessibleAttribute(PdfName.BBOX, pdfArray);
    }

    @Override
    public void setId(AccessibleElementId accessibleElementId) {
        this.id = accessibleElementId;
    }

    @Override
    public void setRole(PdfName pdfName) {
    }

    public void setType(ArtifactType object) {
        switch (.$SwitchMap$com$itextpdf$text$pdf$PdfArtifact$ArtifactType[object.ordinal()]) {
            default: {
                object = null;
                break;
            }
            case 4: {
                object = new PdfString("Pagination");
                break;
            }
            case 3: {
                object = new PdfString("Page");
                break;
            }
            case 2: {
                object = new PdfString("Layout");
                break;
            }
            case 1: {
                object = new PdfString("Background");
            }
        }
        this.setAccessibleAttribute(PdfName.TYPE, (PdfObject)object);
    }

    public void setType(PdfString pdfString) {
        if (!allowedArtifactTypes.contains(pdfString.toString())) {
            throw new IllegalArgumentException(MessageLocalization.getComposedMessage("the.artifact.type.1.is.invalid", pdfString));
        }
        this.setAccessibleAttribute(PdfName.TYPE, pdfString);
    }

    public static enum ArtifactType {
        PAGINATION,
        LAYOUT,
        PAGE,
        BACKGROUND;
        

        private ArtifactType() {
        }
    }

}

