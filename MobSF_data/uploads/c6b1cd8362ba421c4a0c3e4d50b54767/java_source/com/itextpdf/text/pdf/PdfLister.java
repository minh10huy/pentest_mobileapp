/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf;

import com.itextpdf.text.pdf.PRStream;
import com.itextpdf.text.pdf.PdfArray;
import com.itextpdf.text.pdf.PdfDictionary;
import com.itextpdf.text.pdf.PdfImportedPage;
import com.itextpdf.text.pdf.PdfName;
import com.itextpdf.text.pdf.PdfObject;
import com.itextpdf.text.pdf.PdfReader;
import com.itextpdf.text.pdf.PdfReaderInstance;
import java.io.IOException;
import java.io.PrintStream;
import java.util.ListIterator;
import java.util.Set;

public class PdfLister {
    PrintStream out;

    public PdfLister(PrintStream printStream) {
        this.out = printStream;
    }

    public void listAnyObject(PdfObject pdfObject) {
        int n = pdfObject.type();
        if (n != 3) {
            switch (n) {
                default: {
                    this.out.println(pdfObject.toString());
                    return;
                }
                case 6: {
                    this.listDict((PdfDictionary)pdfObject);
                    return;
                }
                case 5: 
            }
            this.listArray((PdfArray)pdfObject);
            return;
        }
        PrintStream printStream = this.out;
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("(");
        stringBuilder.append(pdfObject.toString());
        stringBuilder.append(")");
        printStream.println(stringBuilder.toString());
    }

    public void listArray(PdfArray object) {
        this.out.println('[');
        object = object.listIterator();
        while (object.hasNext()) {
            this.listAnyObject((PdfObject)object.next());
        }
        this.out.println(']');
    }

    public void listDict(PdfDictionary pdfDictionary) {
        this.out.println("<<");
        for (PdfName pdfName : pdfDictionary.getKeys()) {
            PdfObject pdfObject = pdfDictionary.get(pdfName);
            this.out.print(pdfName.toString());
            this.out.print(' ');
            this.listAnyObject(pdfObject);
        }
        this.out.println(">>");
    }

    public void listPage(PdfImportedPage object) {
        int n = object.getPageNumber();
        object = object.getPdfReaderInstance();
        Object object2 = object.getReader().getPageN(n);
        this.listDict((PdfDictionary)object2);
        object2 = PdfReader.getPdfObject(object2.get(PdfName.CONTENTS));
        if (object2 == null) {
            return;
        }
        n = object2.type;
        if (n != 5) {
            if (n != 7) {
                return;
            }
            this.listStream((PRStream)object2, (PdfReaderInstance)object);
            return;
        }
        object2 = ((PdfArray)object2).listIterator();
        while (object2.hasNext()) {
            this.listStream((PRStream)PdfReader.getPdfObject((PdfObject)object2.next()), (PdfReaderInstance)object);
            this.out.println("-----------");
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public void listStream(PRStream arrby, PdfReaderInstance object) {
        int n;
        int n2;
        try {
            this.listDict((PdfDictionary)arrby);
            this.out.println("startstream");
            arrby = PdfReader.getStreamBytes((PRStream)arrby);
            n2 = arrby.length;
            n = 0;
        }
        catch (IOException iOException) {
            object = System.err;
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("I/O exception: ");
            stringBuilder.append(iOException);
            object.println(stringBuilder.toString());
            return;
        }
        do {
            if (n >= n2 - 1) {
                this.out.println(new String(arrby));
                this.out.println("endstream");
                return;
            }
            if (arrby[n] == 13 && arrby[n + 1] != 10) {
                arrby[n] = 10;
            }
            ++n;
        } while (true);
    }
}

