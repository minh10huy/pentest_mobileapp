/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf;

import com.itextpdf.text.BaseColor;
import com.itextpdf.text.ExceptionConverter;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.error_messages.MessageLocalization;
import com.itextpdf.text.pdf.Barcode;
import com.itextpdf.text.pdf.BaseFont;
import com.itextpdf.text.pdf.IntHashtable;
import com.itextpdf.text.pdf.PdfContentByte;

public class Barcode128
extends Barcode {
    private static final byte[][] BARS;
    private static final byte[] BARS_STOP;
    public static final char CODE_A = '\u00c8';
    public static final char CODE_AB_TO_C = 'c';
    public static final char CODE_AC_TO_B = 'd';
    public static final char CODE_BC_TO_A = 'e';
    public static final char CODE_C = '\u00c7';
    public static final char DEL = '\u00c3';
    public static final char FNC1 = '\u00ca';
    public static final char FNC1_INDEX = 'f';
    public static final char FNC2 = '\u00c5';
    public static final char FNC3 = '\u00c4';
    public static final char FNC4 = '\u00c8';
    public static final char SHIFT = '\u00c6';
    public static final char STARTA = '\u00cb';
    public static final char STARTB = '\u00cc';
    public static final char STARTC = '\u00cd';
    public static final char START_A = 'g';
    public static final char START_B = 'h';
    public static final char START_C = 'i';
    private static final IntHashtable ais;
    private Barcode128CodeSet codeSet = Barcode128CodeSet.AUTO;

    static {
        int n;
        byte[] arrby = new byte[]{2, 2, 2, 2, 2, 1};
        byte[] arrby2 = new byte[]{1, 2, 1, 2, 2, 3};
        byte[] arrby3 = new byte[]{1, 3, 1, 2, 2, 2};
        byte[] arrby4 = new byte[]{1, 2, 2, 2, 1, 3};
        byte[] arrby5 = new byte[]{1, 2, 2, 3, 1, 2};
        byte[] arrby6 = new byte[]{1, 3, 2, 2, 1, 2};
        byte[] arrby7 = new byte[]{2, 2, 1, 2, 1, 3};
        byte[] arrby8 = new byte[]{2, 2, 1, 3, 1, 2};
        byte[] arrby9 = new byte[]{2, 3, 1, 2, 1, 2};
        byte[] arrby10 = new byte[]{2, 2, 3, 2, 1, 1};
        byte[] arrby11 = new byte[]{2, 2, 1, 2, 3, 1};
        byte[] arrby12 = new byte[]{2, 2, 3, 1, 1, 2};
        byte[] arrby13 = new byte[]{3, 1, 1, 2, 2, 2};
        byte[] arrby14 = new byte[]{3, 2, 1, 2, 2, 1};
        byte[] arrby15 = new byte[]{3, 1, 2, 2, 1, 2};
        byte[] arrby16 = new byte[]{2, 1, 2, 1, 2, 3};
        byte[] arrby17 = new byte[]{2, 3, 2, 1, 2, 1};
        byte[] arrby18 = new byte[]{1, 3, 1, 1, 2, 3};
        byte[] arrby19 = new byte[]{1, 3, 1, 3, 2, 1};
        byte[] arrby20 = new byte[]{1, 1, 2, 3, 1, 3};
        byte[] arrby21 = new byte[]{2, 1, 1, 3, 1, 3};
        byte[] arrby22 = new byte[]{1, 1, 2, 1, 3, 3};
        byte[] arrby23 = new byte[]{1, 1, 2, 3, 3, 1};
        byte[] arrby24 = new byte[]{1, 1, 3, 3, 2, 1};
        byte[] arrby25 = new byte[]{1, 3, 3, 1, 2, 1};
        byte[] arrby26 = new byte[]{3, 1, 3, 1, 2, 1};
        byte[] arrby27 = new byte[]{2, 1, 1, 3, 3, 1};
        byte[] arrby28 = new byte[]{2, 1, 3, 1, 1, 3};
        byte[] arrby29 = new byte[]{2, 1, 3, 3, 1, 1};
        byte[] arrby30 = new byte[]{2, 1, 3, 1, 3, 1};
        byte[] arrby31 = new byte[]{3, 1, 1, 1, 2, 3};
        byte[] arrby32 = new byte[]{3, 3, 1, 1, 2, 1};
        byte[] arrby33 = new byte[]{3, 1, 2, 1, 1, 3};
        byte[] arrby34 = new byte[]{3, 1, 4, 1, 1, 1};
        byte[] arrby35 = new byte[]{2, 2, 1, 4, 1, 1};
        byte[] arrby36 = new byte[]{4, 3, 1, 1, 1, 1};
        byte[] arrby37 = new byte[]{1, 1, 1, 2, 2, 4};
        byte[] arrby38 = new byte[]{1, 1, 1, 4, 2, 2};
        byte[] arrby39 = new byte[]{1, 2, 1, 1, 2, 4};
        byte[] arrby40 = new byte[]{1, 2, 1, 4, 2, 1};
        byte[] arrby41 = new byte[]{1, 4, 1, 1, 2, 2};
        byte[] arrby42 = new byte[]{1, 1, 2, 2, 1, 4};
        byte[] arrby43 = new byte[]{1, 2, 2, 1, 1, 4};
        byte[] arrby44 = new byte[]{1, 2, 2, 4, 1, 1};
        byte[] arrby45 = new byte[]{1, 4, 2, 1, 1, 2};
        byte[] arrby46 = new byte[]{1, 4, 2, 2, 1, 1};
        byte[] arrby47 = new byte[]{2, 4, 1, 1, 1, 2};
        byte[] arrby48 = new byte[]{1, 1, 1, 2, 4, 2};
        byte[] arrby49 = new byte[]{1, 2, 1, 1, 4, 2};
        byte[] arrby50 = new byte[]{1, 2, 1, 2, 4, 1};
        byte[] arrby51 = new byte[]{1, 2, 4, 1, 1, 2};
        byte[] arrby52 = new byte[]{4, 1, 1, 2, 1, 2};
        byte[] arrby53 = new byte[]{4, 2, 1, 2, 1, 1};
        byte[] arrby54 = new byte[]{2, 1, 2, 1, 4, 1};
        byte[] arrby55 = new byte[]{4, 1, 2, 1, 2, 1};
        byte[] arrby56 = new byte[]{1, 1, 4, 1, 1, 3};
        byte[] arrby57 = new byte[]{4, 1, 1, 1, 1, 3};
        byte[] arrby58 = new byte[]{4, 1, 1, 3, 1, 1};
        byte[] arrby59 = new byte[]{3, 1, 1, 1, 4, 1};
        byte[] arrby60 = new byte[]{4, 1, 1, 1, 3, 1};
        byte[] arrby61 = new byte[]{2, 1, 1, 2, 3, 2};
        BARS = new byte[][]{{2, 1, 2, 2, 2, 2}, {2, 2, 2, 1, 2, 2}, arrby, arrby2, {1, 2, 1, 3, 2, 2}, arrby3, arrby4, arrby5, arrby6, arrby7, arrby8, arrby9, {1, 1, 2, 2, 3, 2}, {1, 2, 2, 1, 3, 2}, {1, 2, 2, 2, 3, 1}, {1, 1, 3, 2, 2, 2}, {1, 2, 3, 1, 2, 2}, {1, 2, 3, 2, 2, 1}, arrby10, {2, 2, 1, 1, 3, 2}, arrby11, {2, 1, 3, 2, 1, 2}, arrby12, {3, 1, 2, 1, 3, 1}, arrby13, {3, 2, 1, 1, 2, 2}, arrby14, arrby15, {3, 2, 2, 1, 1, 2}, {3, 2, 2, 2, 1, 1}, arrby16, {2, 1, 2, 3, 2, 1}, arrby17, {1, 1, 1, 3, 2, 3}, arrby18, arrby19, arrby20, {1, 3, 2, 1, 1, 3}, {1, 3, 2, 3, 1, 1}, arrby21, {2, 3, 1, 1, 1, 3}, {2, 3, 1, 3, 1, 1}, arrby22, arrby23, {1, 3, 2, 1, 3, 1}, {1, 1, 3, 1, 2, 3}, arrby24, arrby25, arrby26, arrby27, {2, 3, 1, 1, 3, 1}, arrby28, arrby29, arrby30, arrby31, {3, 1, 1, 3, 2, 1}, arrby32, arrby33, {3, 1, 2, 3, 1, 1}, {3, 3, 2, 1, 1, 1}, arrby34, arrby35, arrby36, arrby37, arrby38, arrby39, arrby40, arrby41, {1, 4, 1, 2, 2, 1}, arrby42, {1, 1, 2, 4, 1, 2}, arrby43, arrby44, arrby45, arrby46, {2, 4, 1, 2, 1, 1}, {2, 2, 1, 1, 1, 4}, {4, 1, 3, 1, 1, 1}, arrby47, {1, 3, 4, 1, 1, 1}, arrby48, arrby49, arrby50, {1, 1, 4, 2, 1, 2}, arrby51, {1, 2, 4, 2, 1, 1}, arrby52, {4, 2, 1, 1, 1, 2}, arrby53, arrby54, {2, 1, 4, 1, 2, 1}, arrby55, {1, 1, 1, 1, 4, 3}, {1, 1, 1, 3, 4, 1}, {1, 3, 1, 1, 4, 1}, arrby56, {1, 1, 4, 3, 1, 1}, arrby57, arrby58, {1, 1, 3, 1, 4, 1}, {1, 1, 4, 1, 3, 1}, arrby59, arrby60, {2, 1, 1, 4, 1, 2}, {2, 1, 1, 2, 1, 4}, arrby61};
        BARS_STOP = new byte[]{2, 3, 3, 1, 1, 1, 2};
        ais = new IntHashtable();
        ais.put(0, 20);
        ais.put(1, 16);
        ais.put(2, 16);
        ais.put(10, -1);
        ais.put(11, 9);
        ais.put(12, 8);
        ais.put(13, 8);
        ais.put(15, 8);
        ais.put(17, 8);
        ais.put(20, 4);
        ais.put(21, -1);
        ais.put(22, -1);
        ais.put(23, -1);
        ais.put(240, -1);
        ais.put(241, -1);
        ais.put(250, -1);
        ais.put(251, -1);
        ais.put(252, -1);
        ais.put(30, -1);
        for (n = 3100; n < 3700; ++n) {
            ais.put(n, 10);
        }
        ais.put(37, -1);
        for (n = 3900; n < 3940; ++n) {
            ais.put(n, -1);
        }
        ais.put(400, -1);
        ais.put(401, -1);
        ais.put(402, 20);
        ais.put(403, -1);
        for (n = 410; n < 416; ++n) {
            ais.put(n, 16);
        }
        ais.put(420, -1);
        ais.put(421, -1);
        ais.put(422, 6);
        ais.put(423, -1);
        ais.put(424, 6);
        ais.put(425, 6);
        ais.put(426, 6);
        ais.put(7001, 17);
        ais.put(7002, -1);
        for (n = 7030; n < 7040; ++n) {
            ais.put(n, -1);
        }
        ais.put(8001, 18);
        ais.put(8002, -1);
        ais.put(8003, -1);
        ais.put(8004, -1);
        ais.put(8005, 10);
        ais.put(8006, 22);
        ais.put(8007, -1);
        ais.put(8008, -1);
        ais.put(8018, 22);
        ais.put(8020, -1);
        ais.put(8100, 10);
        ais.put(8101, 14);
        ais.put(8102, 6);
        for (n = 90; n < 100; ++n) {
            ais.put(n, -1);
        }
    }

    public Barcode128() {
        try {
            this.x = 0.8f;
            this.font = BaseFont.createFont("Helvetica", "winansi", false);
            this.baseline = this.size = 8.0f;
            this.barHeight = this.size * 3.0f;
            this.textAlignment = 1;
            this.codeType = 9;
            return;
        }
        catch (Exception exception) {
            throw new ExceptionConverter(exception);
        }
    }

    public static byte[] getBarsCode128Raw(String charSequence) {
        int n = charSequence.indexOf(65535);
        byte[] arrby = charSequence;
        if (n >= 0) {
            arrby = charSequence.substring(0, n);
        }
        int n2 = arrby.charAt(0);
        for (n = 1; n < arrby.length(); ++n) {
            n2 += arrby.charAt(n) * n;
        }
        charSequence = new StringBuilder();
        charSequence.append((String)arrby);
        charSequence.append((char)(n2 % 103));
        charSequence = charSequence.toString();
        arrby = new byte[(charSequence.length() + 1) * 6 + 7];
        for (n = 0; n < charSequence.length(); ++n) {
            System.arraycopy(BARS[charSequence.charAt(n)], 0, arrby, n * 6, 6);
        }
        System.arraycopy(BARS_STOP, 0, arrby, n * 6, 7);
        return arrby;
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    public static String getHumanReadableUCCEAN(String var0) {
        block8 : {
            var4_2 = new StringBuffer();
            do {
                block9 : {
                    try {
                        while (var0.startsWith(String.valueOf('\u00ca'))) {
                            var0 = var3_5 = var0.substring(1);
                        }
                    }
                    catch (Exception var3_6) {
                        break block8;
                    }
                    var2_4 = 0;
                    for (var1_3 = 2; var1_3 < 5 && var0.length() >= var1_3; ++var1_3) {
                        var2_4 = Barcode128.ais.get(Integer.parseInt(var0.substring(0, var1_3)));
                        if (var2_4 == 0) {
                            continue;
                        }
                        break block9;
                    }
                    var1_3 = 0;
                }
                if (var1_3 == 0) break block8;
                var4_2.append('(');
                var4_2.append(var0.substring(0, var1_3));
                var4_2.append(')');
                var3_5 = var0.substring(var1_3);
                if (var2_4 <= 0) ** GOTO lbl30
                var1_3 = var2_4 - var1_3;
                try {
                    if (var3_5.length() <= var1_3) break;
                    var4_2.append(Barcode128.removeFNC1(var3_5.substring(0, var1_3)));
                    var0 = var3_5.substring(var1_3);
                    continue;
lbl30: // 1 sources:
                    var1_3 = var3_5.indexOf(202);
                    if (var1_3 < 0) break;
                    var4_2.append(var3_5.substring(0, var1_3));
                    var0 = var3_5.substring(var1_3 + 1);
                    continue;
                }
                catch (Exception var0_1) {}
                break;
            } while (true);
            var0 = var3_5;
        }
        var4_2.append(Barcode128.removeFNC1(var0));
        return var4_2.toString();
    }

    static String getPackedRawDigits(String charSequence, int n, int n2) {
        StringBuilder stringBuilder = new StringBuilder("");
        int n3 = n;
        int n4 = n2;
        n2 = n3;
        while (n4 > 0) {
            if (charSequence.charAt(n2) == '\u00ca') {
                stringBuilder.append('f');
                ++n2;
                continue;
            }
            n4 -= 2;
            n3 = n2 + 1;
            stringBuilder.append((char)((charSequence.charAt(n2) - 48) * 10 + (charSequence.charAt(n3) - 48)));
            n2 = n3 + 1;
        }
        charSequence = new StringBuilder();
        charSequence.append((char)(n2 - n));
        charSequence.append(stringBuilder.toString());
        return charSequence.toString();
    }

    public static String getRawText(String string2, boolean bl) {
        return Barcode128.getRawText(string2, bl, Barcode128CodeSet.AUTO);
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Lifted jumps to return sites
     */
    public static String getRawText(String var0, boolean var1_1, Barcode128CodeSet var2_2) {
        var7_3 = var0.length();
        if (var7_3 == 0) {
            var0 = new StringBuilder();
            var0.append("");
            var0.append(var2_2.getStartSymbol());
            var0 = var2_2 = var0.toString();
            if (var1_1 == false) return var0;
            var0 = new StringBuilder();
            var0.append((String)var2_2);
            var0.append('f');
            return var0.toString();
        }
        for (var3_4 = 0; var3_4 < var7_3; ++var3_4) {
            var4_5 = var0.charAt(var3_4);
            if (var4_5 <= 127 || var4_5 == 202) continue;
            throw new RuntimeException(MessageLocalization.getComposedMessage("there.are.illegal.characters.for.barcode.128.in.1", new Object[]{var0}));
        }
        var3_4 = var0.charAt(0);
        if ((var2_2 == Barcode128CodeSet.AUTO || var2_2 == Barcode128CodeSet.C) && Barcode128.isNextDigits((String)var0, 0, 2)) {
            var8_6 = new StringBuilder();
            var8_6.append("");
            var8_6.append('i');
            var9_7 = var8_6.toString();
            var8_6 = var9_7;
            if (var1_1) {
                var8_6 = new StringBuilder();
                var8_6.append((String)var9_7);
                var8_6.append('f');
                var8_6 = var8_6.toString();
            }
            var9_7 = Barcode128.getPackedRawDigits((String)var0, 0, 2);
            var4_5 = var9_7.charAt(0) + '\u0000';
            var10_8 = new StringBuilder();
            var10_8.append((String)var8_6);
            var10_8.append(var9_7.substring(1));
            var8_6 = var10_8.toString();
            var3_4 = 105;
        } else {
            if (var3_4 < 32) {
                var8_6 = new StringBuilder();
                var8_6.append("");
                var8_6.append('g');
                var9_7 = var8_6.toString();
                var8_6 = var9_7;
                if (var1_1) {
                    var8_6 = new StringBuilder();
                    var8_6.append((String)var9_7);
                    var8_6.append('f');
                    var8_6 = var8_6.toString();
                }
                var9_7 = new StringBuilder();
                var9_7.append((String)var8_6);
                var9_7.append((char)(var3_4 + 64));
                var8_6 = var9_7.toString();
                var3_4 = 103;
            } else {
                var8_6 = new StringBuilder();
                var8_6.append("");
                var8_6.append('h');
                var9_7 = var8_6.toString();
                var8_6 = var9_7;
                if (var1_1) {
                    var8_6 = new StringBuilder();
                    var8_6.append((String)var9_7);
                    var8_6.append('f');
                    var8_6 = var8_6.toString();
                }
                if (var3_4 == 202) {
                    var9_7 = new StringBuilder();
                    var9_7.append((String)var8_6);
                    var9_7.append('f');
                    var8_6 = var9_7.toString();
                } else {
                    var9_7 = new StringBuilder();
                    var9_7.append((String)var8_6);
                    var9_7.append((char)(var3_4 - 32));
                    var8_6 = var9_7.toString();
                }
                var3_4 = 104;
            }
            var4_5 = 1;
        }
        var5_9 = var3_4;
        var9_7 = var8_6;
        var6_10 = var4_5;
        if (var2_2 != Barcode128CodeSet.AUTO) {
            var5_9 = var3_4;
            var9_7 = var8_6;
            var6_10 = var4_5;
            if (var3_4 != var2_2.getStartSymbol()) {
                throw new RuntimeException(MessageLocalization.getComposedMessage("there.are.illegal.characters.for.barcode.128.in.1", new Object[]{var0}));
            }
        }
        while (var6_10 < var7_3) {
            block24 : {
                block27 : {
                    block26 : {
                        block25 : {
                            switch (var5_9) {
                                default: {
                                    var4_5 = var5_9;
                                    var8_6 = var9_7;
                                    var3_4 = var6_10;
                                    break block24;
                                }
                                case 105: {
                                    if (!Barcode128.isNextDigits((String)var0, var6_10, 2)) ** GOTO lbl101
                                    var8_6 = Barcode128.getPackedRawDigits((String)var0, var6_10, 2);
                                    var3_4 = var6_10 + var8_6.charAt(0);
                                    var10_8 = new StringBuilder();
                                    var10_8.append((String)var9_7);
                                    var10_8.append(var8_6.substring(1));
                                    var8_6 = var10_8.toString();
                                    var4_5 = var5_9;
                                    break block24;
lbl101: // 1 sources:
                                    var3_4 = var6_10 + 1;
                                    var4_5 = var0.charAt(var6_10);
                                    if (var4_5 != 202) ** GOTO lbl109
                                    var8_6 = new StringBuilder();
                                    var8_6.append((String)var9_7);
                                    var8_6.append('f');
                                    var8_6 = var8_6.toString();
                                    ** GOTO lbl211
lbl109: // 1 sources:
                                    if (var4_5 >= 32) ** GOTO lbl119
                                    var8_6 = new StringBuilder();
                                    var8_6.append((String)var9_7);
                                    var8_6.append('e');
                                    var8_6 = var8_6.toString();
                                    var9_7 = new StringBuilder();
                                    var9_7.append((String)var8_6);
                                    var9_7.append((char)(var4_5 + 64));
                                    var8_6 = var9_7.toString();
                                    ** GOTO lbl158
lbl119: // 1 sources:
                                    var8_6 = new StringBuilder();
                                    var8_6.append((String)var9_7);
                                    var8_6.append('d');
                                    var8_6 = var8_6.toString();
                                    var9_7 = new StringBuilder();
                                    var9_7.append((String)var8_6);
                                    var9_7.append((char)(var4_5 - 32));
                                    var8_6 = var9_7.toString();
                                    ** GOTO lbl199
                                }
                                case 104: {
                                    if (var2_2 != Barcode128CodeSet.AUTO || !Barcode128.isNextDigits((String)var0, var6_10, 4)) ** GOTO lbl141
                                    var8_6 = new StringBuilder();
                                    var8_6.append((String)var9_7);
                                    var8_6.append('c');
                                    var8_6 = var8_6.toString();
                                    var9_7 = Barcode128.getPackedRawDigits((String)var0, var6_10, 4);
                                    var3_4 = var6_10 + var9_7.charAt(0);
                                    var10_8 = new StringBuilder();
                                    var10_8.append((String)var8_6);
                                    var10_8.append(var9_7.substring(1));
                                    var8_6 = var10_8.toString();
                                    break block25;
lbl141: // 1 sources:
                                    var3_4 = var6_10 + 1;
                                    var4_5 = var0.charAt(var6_10);
                                    if (var4_5 != 202) ** GOTO lbl149
                                    var8_6 = new StringBuilder();
                                    var8_6.append((String)var9_7);
                                    var8_6.append('f');
                                    var8_6 = var8_6.toString();
                                    ** GOTO lbl211
lbl149: // 1 sources:
                                    if (var4_5 >= 32) ** GOTO lbl160
                                    var8_6 = new StringBuilder();
                                    var8_6.append((String)var9_7);
                                    var8_6.append('e');
                                    var8_6 = var8_6.toString();
                                    var9_7 = new StringBuilder();
                                    var9_7.append((String)var8_6);
                                    var9_7.append((char)(var4_5 + 64));
                                    var8_6 = var9_7.toString();
lbl158: // 2 sources:
                                    var4_5 = 103;
                                    break block24;
lbl160: // 1 sources:
                                    var8_6 = new StringBuilder();
                                    var8_6.append((String)var9_7);
                                    var8_6.append((char)(var4_5 - 32));
                                    var8_6 = var8_6.toString();
                                    ** GOTO lbl211
                                }
                                case 103: 
                            }
                            if (var2_2 != Barcode128CodeSet.AUTO || !Barcode128.isNextDigits((String)var0, var6_10, 4)) break block26;
                            var8_6 = new StringBuilder();
                            var8_6.append((String)var9_7);
                            var8_6.append('c');
                            var8_6 = var8_6.toString();
                            var9_7 = Barcode128.getPackedRawDigits((String)var0, var6_10, 4);
                            var3_4 = var6_10 + var9_7.charAt(0);
                            var10_8 = new StringBuilder();
                            var10_8.append((String)var8_6);
                            var10_8.append(var9_7.substring(1));
                            var8_6 = var10_8.toString();
                        }
                        var4_5 = 105;
                        break block24;
                    }
                    var3_4 = var6_10 + 1;
                    var4_5 = var0.charAt(var6_10);
                    if (var4_5 != 202) break block27;
                    var8_6 = new StringBuilder();
                    var8_6.append((String)var9_7);
                    var8_6.append('f');
                    var8_6 = var8_6.toString();
                    ** GOTO lbl211
                }
                if (var4_5 > 95) {
                    var8_6 = new StringBuilder();
                    var8_6.append((String)var9_7);
                    var8_6.append('d');
                    var8_6 = var8_6.toString();
                    var9_7 = new StringBuilder();
                    var9_7.append((String)var8_6);
                    var9_7.append((char)(var4_5 - 32));
                    var8_6 = var9_7.toString();
lbl199: // 2 sources:
                    var4_5 = 104;
                } else {
                    if (var4_5 < 32) {
                        var8_6 = new StringBuilder();
                        var8_6.append((String)var9_7);
                        var8_6.append((char)(var4_5 + 64));
                        var8_6 = var8_6.toString();
                    } else {
                        var8_6 = new StringBuilder();
                        var8_6.append((String)var9_7);
                        var8_6.append((char)(var4_5 - 32));
                        var8_6 = var8_6.toString();
                    }
lbl211: // 6 sources:
                    var4_5 = var5_9;
                }
            }
            if (var2_2 != Barcode128CodeSet.AUTO && var4_5 != var2_2.getStartSymbol()) {
                throw new RuntimeException(MessageLocalization.getComposedMessage("there.are.illegal.characters.for.barcode.128.in.1", new Object[]{var0}));
            }
            var5_9 = var4_5;
            var9_7 = var8_6;
            var6_10 = var3_4;
        }
        return var9_7;
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Lifted jumps to return sites
     */
    static boolean isNextDigits(String var0, int var1_1, int var2_2) {
        var7_3 = var0.length();
        var3_4 = var2_2;
        block0 : do {
            var8_8 = false;
            if (var1_1 < var7_3 && var3_4 > 0) {
                if (var0.charAt(var1_1) == '\u00ca') {
                    ++var1_1;
                    continue;
                }
                var2_2 = var6_7 = Math.min(2, var3_4);
                var4_5 = var1_1;
                var5_6 = var3_4;
                if (var1_1 + var6_7 > var7_3) {
                    return false;
                }
            } else {
                if (var3_4 != 0) return var8_8;
                return true;
            }
            do {
                var1_1 = var4_5;
                var3_4 = var5_6--;
                if (var2_2 > 0) ** break;
                continue block0;
                var1_1 = var0.charAt(var4_5);
                if (var1_1 < 48) return false;
                if (var1_1 > 57) {
                    return false;
                }
                ++var4_5;
                --var2_2;
            } while (true);
            break;
        } while (true);
    }

    public static String removeFNC1(String string2) {
        int n = string2.length();
        StringBuffer stringBuffer = new StringBuffer(n);
        for (int i = 0; i < n; ++i) {
            char c = string2.charAt(i);
            if (c < ' ' || c > '~') continue;
            stringBuffer.append(c);
        }
        return stringBuffer.toString();
    }

    @Override
    public Rectangle getBarcodeSize() {
        float f;
        int n;
        Object object = this.font;
        boolean bl = true;
        float f2 = 0.0f;
        if (object != null) {
            f2 = this.baseline > 0.0f ? this.baseline - this.font.getFontDescriptor(3, this.size) : - this.baseline + this.size;
            object = this.codeType == 11 ? ((n = this.code.indexOf(65535)) < 0 ? "" : this.code.substring(n + 1)) : (this.codeType == 10 ? Barcode128.getHumanReadableUCCEAN(this.code) : Barcode128.removeFNC1(this.code));
            BaseFont baseFont = this.font;
            if (this.altText != null) {
                object = this.altText;
            }
            f = baseFont.getWidthPoint((String)object, this.size);
        } else {
            f = 0.0f;
        }
        if (this.codeType == 11) {
            n = this.code.indexOf(65535);
            object = n >= 0 ? this.code.substring(0, n) : this.code;
        } else {
            object = this.code;
            if (this.codeType != 10) {
                bl = false;
            }
            object = Barcode128.getRawText((String)object, bl, this.codeSet);
        }
        return new Rectangle(Math.max((float)((object.length() + 2) * 11) * this.x + this.x * 2.0f, f), this.barHeight + f2);
    }

    public Barcode128CodeSet getCodeSet() {
        return this.codeSet;
    }

    /*
     * Enabled aggressive block sorting
     */
    @Override
    public Rectangle placeBarcode(PdfContentByte pdfContentByte, BaseColor baseColor, BaseColor baseColor2) {
        float f;
        int n;
        float f2;
        BaseFont baseFont;
        int n2;
        float f3;
        float f4;
        int n3;
        void var14_17;
        block28 : {
            block25 : {
                block22 : {
                    block26 : {
                        block27 : {
                            block23 : {
                                block24 : {
                                    n2 = this.codeType;
                                    n3 = 1;
                                    if (n2 == 11) {
                                        n2 = this.code.indexOf(65535);
                                        if (n2 < 0) {
                                            String string2 = "";
                                        } else {
                                            String string3 = this.code.substring(n2 + 1);
                                        }
                                    } else if (this.codeType == 10) {
                                        String string4 = Barcode128.getHumanReadableUCCEAN(this.code);
                                    } else {
                                        String string5 = Barcode128.removeFNC1(this.code);
                                    }
                                    baseFont = this.font;
                                    f2 = 0.0f;
                                    if (baseFont != null) {
                                        void var14_12;
                                        baseFont = this.font;
                                        if (this.altText != null) {
                                            String string6 = this.altText;
                                        }
                                        f3 = baseFont.getWidthPoint((String)var14_12, this.size);
                                        baseFont = var14_12;
                                    } else {
                                        void var14_10;
                                        f3 = 0.0f;
                                        baseFont = var14_10;
                                    }
                                    n2 = this.codeType;
                                    n = 0;
                                    if (n2 == 11) {
                                        n2 = this.code.indexOf(65535);
                                        if (n2 >= 0) {
                                            String string7 = this.code.substring(0, n2);
                                        } else {
                                            String string8 = this.code;
                                        }
                                    } else {
                                        String string9 = this.code;
                                        boolean bl = this.codeType == 10;
                                        String string10 = Barcode128.getRawText(string9, bl, this.codeSet);
                                    }
                                    f4 = (float)((var14_17.length() + 2) * 11) * this.x + this.x * 2.0f;
                                    n2 = this.textAlignment;
                                    if (n2 == 0) break block22;
                                    if (n2 == 2) break block23;
                                    if (f3 <= f4) break block24;
                                    f3 = (f3 - f4) / 2.0f;
                                    break block25;
                                }
                                f3 = (f4 - f3) / 2.0f;
                                break block26;
                            }
                            if (f3 <= f4) break block27;
                            f3 -= f4;
                            break block25;
                        }
                        f3 = f4 - f3;
                    }
                    f = f3;
                    f3 = 0.0f;
                    break block28;
                }
                f3 = 0.0f;
            }
            f = 0.0f;
        }
        if (this.font != null) {
            if (this.baseline <= 0.0f) {
                f4 = this.barHeight - this.baseline;
            } else {
                f4 = - this.font.getFontDescriptor(3, this.size);
                f2 = this.baseline + f4;
            }
        } else {
            f4 = 0.0f;
        }
        byte[] arrby = Barcode128.getBarsCode128Raw((String)var14_17);
        float f5 = f3;
        n2 = n3;
        int n4 = n;
        if (baseColor != null) {
            pdfContentByte.setColorFill(baseColor);
            n4 = n;
            n2 = n3;
            f5 = f3;
        }
        while (n4 < arrby.length) {
            f3 = (float)arrby[n4] * this.x;
            if (n2 != 0) {
                pdfContentByte.rectangle(f5, f2, f3 - this.inkSpreading, this.barHeight);
            }
            n2 ^= 1;
            f5 += f3;
            ++n4;
        }
        pdfContentByte.fill();
        if (this.font != null) {
            if (baseColor2 != null) {
                pdfContentByte.setColorFill(baseColor2);
            }
            pdfContentByte.beginText();
            pdfContentByte.setFontAndSize(this.font, this.size);
            pdfContentByte.setTextMatrix(f, f4);
            pdfContentByte.showText((String)((Object)baseFont));
            pdfContentByte.endText();
        }
        return this.getBarcodeSize();
    }

    @Override
    public void setCode(String string2) {
        if (this.getCodeType() == 10 && string2.startsWith("(")) {
            StringBuilder stringBuilder = new StringBuilder("");
            int n = 0;
            while (n >= 0) {
                int n2 = string2.indexOf(41, n);
                if (n2 < 0) {
                    throw new IllegalArgumentException(MessageLocalization.getComposedMessage("badly.formed.ucc.string.1", string2));
                }
                CharSequence charSequence = string2.substring(n + 1, n2);
                if (charSequence.length() < 2) {
                    throw new IllegalArgumentException(MessageLocalization.getComposedMessage("ai.too.short.1", charSequence));
                }
                n = Integer.parseInt((String)charSequence);
                int n3 = ais.get(n);
                if (n3 == 0) {
                    throw new IllegalArgumentException(MessageLocalization.getComposedMessage("ai.not.found.1", charSequence));
                }
                String string3 = String.valueOf(n);
                charSequence = string3;
                if (string3.length() == 1) {
                    charSequence = new StringBuilder();
                    charSequence.append("0");
                    charSequence.append(string3);
                    charSequence = charSequence.toString();
                }
                int n4 = (n = string2.indexOf(40, n2)) < 0 ? string2.length() : n;
                stringBuilder.append((String)charSequence);
                stringBuilder.append(string2.substring(n2 + 1, n4));
                if (n3 < 0) {
                    if (n < 0) continue;
                    stringBuilder.append('\u00ca');
                    continue;
                }
                if (n4 - n2 - 1 + charSequence.length() == n3) continue;
                throw new IllegalArgumentException(MessageLocalization.getComposedMessage("invalid.ai.length.1", charSequence));
            }
            super.setCode(stringBuilder.toString());
            return;
        }
        super.setCode(string2);
    }

    public void setCodeSet(Barcode128CodeSet barcode128CodeSet) {
        this.codeSet = barcode128CodeSet;
    }

    public static enum Barcode128CodeSet {
        A,
        B,
        C,
        AUTO;
        

        private Barcode128CodeSet() {
        }

        public char getStartSymbol() {
            switch (.$SwitchMap$com$itextpdf$text$pdf$Barcode128$Barcode128CodeSet[this.ordinal()]) {
                default: {
                    return 'h';
                }
                case 3: {
                    return 'i';
                }
                case 2: {
                    return 'h';
                }
                case 1: 
            }
            return 'g';
        }
    }

}

