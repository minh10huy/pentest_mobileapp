/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf.internal;

import com.itextpdf.text.pdf.PdfArray;
import com.itextpdf.text.pdf.PdfBoolean;
import com.itextpdf.text.pdf.PdfDictionary;
import com.itextpdf.text.pdf.PdfName;
import com.itextpdf.text.pdf.PdfNumber;
import com.itextpdf.text.pdf.PdfObject;
import com.itextpdf.text.pdf.PdfReader;
import com.itextpdf.text.pdf.interfaces.PdfViewerPreferences;

public class PdfViewerPreferencesImp
implements PdfViewerPreferences {
    public static final PdfName[] DIRECTION_PREFERENCES;
    public static final PdfName[] DUPLEX_PREFERENCES;
    public static final PdfName[] NONFULLSCREENPAGEMODE_PREFERENCES;
    public static final PdfName[] PAGE_BOUNDARIES;
    public static final PdfName[] PRINTSCALING_PREFERENCES;
    public static final PdfName[] VIEWER_PREFERENCES;
    private static final int viewerPreferencesMask = 16773120;
    private int pageLayoutAndMode = 0;
    private PdfDictionary viewerPreferences = new PdfDictionary();

    static {
        VIEWER_PREFERENCES = new PdfName[]{PdfName.HIDETOOLBAR, PdfName.HIDEMENUBAR, PdfName.HIDEWINDOWUI, PdfName.FITWINDOW, PdfName.CENTERWINDOW, PdfName.DISPLAYDOCTITLE, PdfName.NONFULLSCREENPAGEMODE, PdfName.DIRECTION, PdfName.VIEWAREA, PdfName.VIEWCLIP, PdfName.PRINTAREA, PdfName.PRINTCLIP, PdfName.PRINTSCALING, PdfName.DUPLEX, PdfName.PICKTRAYBYPDFSIZE, PdfName.PRINTPAGERANGE, PdfName.NUMCOPIES};
        NONFULLSCREENPAGEMODE_PREFERENCES = new PdfName[]{PdfName.USENONE, PdfName.USEOUTLINES, PdfName.USETHUMBS, PdfName.USEOC};
        DIRECTION_PREFERENCES = new PdfName[]{PdfName.L2R, PdfName.R2L};
        PAGE_BOUNDARIES = new PdfName[]{PdfName.MEDIABOX, PdfName.CROPBOX, PdfName.BLEEDBOX, PdfName.TRIMBOX, PdfName.ARTBOX};
        PRINTSCALING_PREFERENCES = new PdfName[]{PdfName.APPDEFAULT, PdfName.NONE};
        DUPLEX_PREFERENCES = new PdfName[]{PdfName.SIMPLEX, PdfName.DUPLEXFLIPSHORTEDGE, PdfName.DUPLEXFLIPLONGEDGE};
    }

    private int getIndex(PdfName pdfName) {
        for (int i = 0; i < VIEWER_PREFERENCES.length; ++i) {
            if (!VIEWER_PREFERENCES[i].equals(pdfName)) continue;
            return i;
        }
        return -1;
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Lifted jumps to return sites
     */
    public static PdfViewerPreferencesImp getViewerPreferences(PdfDictionary var0) {
        var4_1 = new PdfViewerPreferencesImp();
        var5_2 = PdfReader.getPdfObjectRelease(var0.get(PdfName.PAGELAYOUT));
        var3_3 = 0;
        if (var5_2 == null || !var5_2.isName()) ** GOTO lbl-1000
        if ((var5_2 = (PdfName)var5_2).equals(PdfName.SINGLEPAGE)) {
            var1_4 = 1;
        } else if (var5_2.equals(PdfName.ONECOLUMN)) {
            var1_4 = 2;
        } else if (var5_2.equals(PdfName.TWOCOLUMNLEFT)) {
            var1_4 = 4;
        } else if (var5_2.equals(PdfName.TWOCOLUMNRIGHT)) {
            var1_4 = 8;
        } else if (var5_2.equals(PdfName.TWOPAGELEFT)) {
            var1_4 = 16;
        } else if (var5_2.equals(PdfName.TWOPAGERIGHT)) {
            var1_4 = 32;
        } else lbl-1000: // 2 sources:
        {
            var1_4 = 0;
        }
        var5_2 = PdfReader.getPdfObjectRelease(var0.get(PdfName.PAGEMODE));
        var2_5 = var1_4;
        if (var5_2 != null) {
            var2_5 = var1_4;
            if (var5_2.isName()) {
                if ((var5_2 = (PdfName)var5_2).equals(PdfName.USENONE)) {
                    var2_5 = var1_4 | 64;
                } else if (var5_2.equals(PdfName.USEOUTLINES)) {
                    var2_5 = var1_4 | 128;
                } else if (var5_2.equals(PdfName.USETHUMBS)) {
                    var2_5 = var1_4 | 256;
                } else if (var5_2.equals(PdfName.FULLSCREEN)) {
                    var2_5 = var1_4 | 512;
                } else if (var5_2.equals(PdfName.USEOC)) {
                    var2_5 = var1_4 | 1024;
                } else {
                    var2_5 = var1_4;
                    if (var5_2.equals(PdfName.USEATTACHMENTS)) {
                        var2_5 = var1_4 | 2048;
                    }
                }
            }
        }
        var4_1.setViewerPreferences(var2_5);
        var0 = PdfReader.getPdfObjectRelease(var0.get(PdfName.VIEWERPREFERENCES));
        if (var0 == null) return var4_1;
        if (var0.isDictionary() == false) return var4_1;
        var0 = (PdfDictionary)var0;
        var1_4 = var3_3;
        while (var1_4 < PdfViewerPreferencesImp.VIEWER_PREFERENCES.length) {
            var5_2 = PdfReader.getPdfObjectRelease(var0.get(PdfViewerPreferencesImp.VIEWER_PREFERENCES[var1_4]));
            var4_1.addViewerPreference(PdfViewerPreferencesImp.VIEWER_PREFERENCES[var1_4], var5_2);
            ++var1_4;
        }
        return var4_1;
    }

    private boolean isPossibleValue(PdfName pdfName, PdfName[] arrpdfName) {
        for (int i = 0; i < arrpdfName.length; ++i) {
            if (!arrpdfName[i].equals(pdfName)) continue;
            return true;
        }
        return false;
    }

    public void addToCatalog(PdfDictionary pdfDictionary) {
        pdfDictionary.remove(PdfName.PAGELAYOUT);
        if ((this.pageLayoutAndMode & 1) != 0) {
            pdfDictionary.put(PdfName.PAGELAYOUT, PdfName.SINGLEPAGE);
        } else if ((this.pageLayoutAndMode & 2) != 0) {
            pdfDictionary.put(PdfName.PAGELAYOUT, PdfName.ONECOLUMN);
        } else if ((this.pageLayoutAndMode & 4) != 0) {
            pdfDictionary.put(PdfName.PAGELAYOUT, PdfName.TWOCOLUMNLEFT);
        } else if ((this.pageLayoutAndMode & 8) != 0) {
            pdfDictionary.put(PdfName.PAGELAYOUT, PdfName.TWOCOLUMNRIGHT);
        } else if ((this.pageLayoutAndMode & 16) != 0) {
            pdfDictionary.put(PdfName.PAGELAYOUT, PdfName.TWOPAGELEFT);
        } else if ((this.pageLayoutAndMode & 32) != 0) {
            pdfDictionary.put(PdfName.PAGELAYOUT, PdfName.TWOPAGERIGHT);
        }
        pdfDictionary.remove(PdfName.PAGEMODE);
        if ((this.pageLayoutAndMode & 64) != 0) {
            pdfDictionary.put(PdfName.PAGEMODE, PdfName.USENONE);
        } else if ((this.pageLayoutAndMode & 128) != 0) {
            pdfDictionary.put(PdfName.PAGEMODE, PdfName.USEOUTLINES);
        } else if ((this.pageLayoutAndMode & 256) != 0) {
            pdfDictionary.put(PdfName.PAGEMODE, PdfName.USETHUMBS);
        } else if ((this.pageLayoutAndMode & 512) != 0) {
            pdfDictionary.put(PdfName.PAGEMODE, PdfName.FULLSCREEN);
        } else if ((this.pageLayoutAndMode & 1024) != 0) {
            pdfDictionary.put(PdfName.PAGEMODE, PdfName.USEOC);
        } else if ((this.pageLayoutAndMode & 2048) != 0) {
            pdfDictionary.put(PdfName.PAGEMODE, PdfName.USEATTACHMENTS);
        }
        pdfDictionary.remove(PdfName.VIEWERPREFERENCES);
        if (this.viewerPreferences.size() > 0) {
            pdfDictionary.put(PdfName.VIEWERPREFERENCES, this.viewerPreferences);
        }
    }

    @Override
    public void addViewerPreference(PdfName pdfName, PdfObject pdfObject) {
        switch (this.getIndex(pdfName)) {
            default: {
                return;
            }
            case 16: {
                if (!(pdfObject instanceof PdfNumber)) break;
                this.viewerPreferences.put(pdfName, pdfObject);
                return;
            }
            case 15: {
                if (!(pdfObject instanceof PdfArray)) break;
                this.viewerPreferences.put(pdfName, pdfObject);
                return;
            }
            case 13: {
                if (!(pdfObject instanceof PdfName) || !this.isPossibleValue((PdfName)pdfObject, DUPLEX_PREFERENCES)) break;
                this.viewerPreferences.put(pdfName, pdfObject);
                return;
            }
            case 12: {
                if (!(pdfObject instanceof PdfName) || !this.isPossibleValue((PdfName)pdfObject, PRINTSCALING_PREFERENCES)) break;
                this.viewerPreferences.put(pdfName, pdfObject);
                return;
            }
            case 8: 
            case 9: 
            case 10: 
            case 11: {
                if (!(pdfObject instanceof PdfName) || !this.isPossibleValue((PdfName)pdfObject, PAGE_BOUNDARIES)) break;
                this.viewerPreferences.put(pdfName, pdfObject);
                return;
            }
            case 7: {
                if (!(pdfObject instanceof PdfName) || !this.isPossibleValue((PdfName)pdfObject, DIRECTION_PREFERENCES)) break;
                this.viewerPreferences.put(pdfName, pdfObject);
                return;
            }
            case 6: {
                if (!(pdfObject instanceof PdfName) || !this.isPossibleValue((PdfName)pdfObject, NONFULLSCREENPAGEMODE_PREFERENCES)) break;
                this.viewerPreferences.put(pdfName, pdfObject);
                return;
            }
            case 0: 
            case 1: 
            case 2: 
            case 3: 
            case 4: 
            case 5: 
            case 14: {
                if (!(pdfObject instanceof PdfBoolean)) break;
                this.viewerPreferences.put(pdfName, pdfObject);
            }
        }
    }

    public int getPageLayoutAndMode() {
        return this.pageLayoutAndMode;
    }

    public PdfDictionary getViewerPreferences() {
        return this.viewerPreferences;
    }

    @Override
    public void setViewerPreferences(int n) {
        this.pageLayoutAndMode |= n;
        if ((16773120 & n) != 0) {
            this.pageLayoutAndMode = -16773121 & this.pageLayoutAndMode;
            if ((n & 4096) != 0) {
                this.viewerPreferences.put(PdfName.HIDETOOLBAR, PdfBoolean.PDFTRUE);
            }
            if ((n & 8192) != 0) {
                this.viewerPreferences.put(PdfName.HIDEMENUBAR, PdfBoolean.PDFTRUE);
            }
            if ((n & 16384) != 0) {
                this.viewerPreferences.put(PdfName.HIDEWINDOWUI, PdfBoolean.PDFTRUE);
            }
            if ((32768 & n) != 0) {
                this.viewerPreferences.put(PdfName.FITWINDOW, PdfBoolean.PDFTRUE);
            }
            if ((65536 & n) != 0) {
                this.viewerPreferences.put(PdfName.CENTERWINDOW, PdfBoolean.PDFTRUE);
            }
            if ((131072 & n) != 0) {
                this.viewerPreferences.put(PdfName.DISPLAYDOCTITLE, PdfBoolean.PDFTRUE);
            }
            if ((262144 & n) != 0) {
                this.viewerPreferences.put(PdfName.NONFULLSCREENPAGEMODE, PdfName.USENONE);
            } else if ((524288 & n) != 0) {
                this.viewerPreferences.put(PdfName.NONFULLSCREENPAGEMODE, PdfName.USEOUTLINES);
            } else if ((1048576 & n) != 0) {
                this.viewerPreferences.put(PdfName.NONFULLSCREENPAGEMODE, PdfName.USETHUMBS);
            } else if ((2097152 & n) != 0) {
                this.viewerPreferences.put(PdfName.NONFULLSCREENPAGEMODE, PdfName.USEOC);
            }
            if ((4194304 & n) != 0) {
                this.viewerPreferences.put(PdfName.DIRECTION, PdfName.L2R);
            } else if ((8388608 & n) != 0) {
                this.viewerPreferences.put(PdfName.DIRECTION, PdfName.R2L);
            }
            if ((n & 16777216) != 0) {
                this.viewerPreferences.put(PdfName.PRINTSCALING, PdfName.NONE);
            }
        }
    }
}

