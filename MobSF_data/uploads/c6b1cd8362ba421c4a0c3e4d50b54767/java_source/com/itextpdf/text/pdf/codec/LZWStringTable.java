/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf.codec;

import java.io.PrintStream;

public class LZWStringTable {
    private static final short HASHSIZE = 9973;
    private static final short HASHSTEP = 2039;
    private static final short HASH_FREE = -1;
    private static final int MAXBITS = 12;
    private static final int MAXSTR = 4096;
    private static final short NEXT_FIRST = -1;
    private static final int RES_CODES = 2;
    short numStrings_;
    byte[] strChr_ = new byte[4096];
    short[] strHsh_ = new short[9973];
    int[] strLen_ = new int[4096];
    short[] strNxt_ = new short[4096];

    public static int Hash(short s, byte by) {
        return ((s ^ (short)(by << 8)) & 65535) % 9973;
    }

    public int AddCharString(short s, byte by) {
        if (this.numStrings_ >= 4096) {
            return 65535;
        }
        int n = LZWStringTable.Hash(s, by);
        while (this.strHsh_[n] != -1) {
            n = (n + 2039) % 9973;
        }
        this.strHsh_[n] = this.numStrings_;
        this.strChr_[this.numStrings_] = by;
        if (s == -1) {
            this.strNxt_[this.numStrings_] = -1;
            this.strLen_[this.numStrings_] = 1;
        } else {
            this.strNxt_[this.numStrings_] = s;
            this.strLen_[this.numStrings_] = this.strLen_[s] + 1;
        }
        n = this.numStrings_;
        this.numStrings_ = (short)(n + 1);
        return n;
    }

    public void ClearTable(int n) {
        int n2;
        int n3 = 0;
        this.numStrings_ = 0;
        for (n2 = 0; n2 < 9973; ++n2) {
            this.strHsh_[n2] = -1;
        }
        for (n2 = n3; n2 < (1 << n) + 2; ++n2) {
            this.AddCharString((short)-1, (byte)n2);
        }
    }

    public short FindCharString(short s, byte by) {
        short s2;
        if (s == -1) {
            return (short)(by & 255);
        }
        int n = LZWStringTable.Hash(s, by);
        while ((s2 = this.strHsh_[n]) != -1) {
            if (this.strNxt_[s2] == s && this.strChr_[s2] == by) {
                return s2;
            }
            n = (n + 2039) % 9973;
        }
        return -1;
    }

    public void dump(PrintStream printStream) {
        for (int i = 258; i < this.numStrings_; ++i) {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append(" strNxt_[");
            stringBuilder.append(i);
            stringBuilder.append("] = ");
            stringBuilder.append(this.strNxt_[i]);
            stringBuilder.append(" strChr_ ");
            stringBuilder.append(Integer.toHexString(this.strChr_[i] & 255));
            stringBuilder.append(" strLen_ ");
            stringBuilder.append(Integer.toHexString(this.strLen_[i]));
            printStream.println(stringBuilder.toString());
        }
    }

    public int expandCode(byte[] arrby, int n, short s, int n2) {
        int n3 = n2;
        if (n == -2) {
            n3 = n2;
            if (n2 == 1) {
                n3 = 0;
            }
        }
        if (s != -1) {
            if (n3 == this.strLen_[s]) {
                return 0;
            }
            int n4 = this.strLen_[s] - n3;
            n2 = n3 = arrby.length - n;
            if (n3 > n4) {
                n2 = n4;
            }
            int n5 = n4 - n2;
            n3 = n + n2;
            while (n3 > n && s != -1) {
                int n6 = n3;
                if (--n5 < 0) {
                    n6 = n3 - 1;
                    arrby[n6] = this.strChr_[s];
                }
                s = this.strNxt_[s];
                n3 = n6;
            }
            if (n4 > n2) {
                return - n2;
            }
            return n2;
        }
        return 0;
    }
}

