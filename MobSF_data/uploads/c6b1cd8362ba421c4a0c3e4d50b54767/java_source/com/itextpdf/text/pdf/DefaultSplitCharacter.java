/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf;

import com.itextpdf.text.SplitCharacter;
import com.itextpdf.text.pdf.PdfChunk;

public class DefaultSplitCharacter
implements SplitCharacter {
    public static final SplitCharacter DEFAULT = new DefaultSplitCharacter();
    protected char[] characters;

    public DefaultSplitCharacter() {
    }

    public DefaultSplitCharacter(char c) {
        this(new char[]{c});
    }

    public DefaultSplitCharacter(char[] arrc) {
        this.characters = arrc;
    }

    protected char getCurrentCharacter(int n, char[] arrc, PdfChunk[] arrpdfChunk) {
        if (arrpdfChunk == null) {
            return arrc[n];
        }
        return (char)arrpdfChunk[Math.min(n, arrpdfChunk.length - 1)].getUnicodeEquivalent(arrc[n]);
    }

    @Override
    public boolean isSplitCharacter(int n, int n2, int n3, char[] arrc, PdfChunk[] arrpdfChunk) {
        block8 : {
            boolean bl;
            block10 : {
                block13 : {
                    boolean bl2;
                    block12 : {
                        block11 : {
                            block9 : {
                                n2 = this.getCurrentCharacter(n2, arrc, arrpdfChunk);
                                arrc = this.characters;
                                bl2 = true;
                                if (arrc != null) {
                                    for (n = 0; n < this.characters.length; ++n) {
                                        if (n2 != this.characters[n]) continue;
                                        return true;
                                    }
                                    return false;
                                }
                                if (n2 <= 32 || n2 == 45) break block8;
                                if (n2 == 8208) {
                                    return true;
                                }
                                if (n2 < 8194) {
                                    return false;
                                }
                                if (n2 < 8194) break block9;
                                bl = bl2;
                                if (n2 <= 8203) break block10;
                            }
                            if (n2 < 11904) break block11;
                            bl = bl2;
                            if (n2 < 55200) break block10;
                        }
                        if (n2 < 63744) break block12;
                        bl = bl2;
                        if (n2 < 64256) break block10;
                    }
                    if (n2 < 65072) break block13;
                    bl = bl2;
                    if (n2 < 65104) break block10;
                }
                if (n2 >= 65377 && n2 < 65440) {
                    return true;
                }
                bl = false;
            }
            return bl;
        }
        return true;
    }
}

