/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf;

import com.itextpdf.text.Chunk;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.WritableDirectElement;
import com.itextpdf.text.api.Spaceable;
import com.itextpdf.text.pdf.ColumnText;
import com.itextpdf.text.pdf.PdfContentByte;
import com.itextpdf.text.pdf.PdfDiv;
import com.itextpdf.text.pdf.PdfDocument;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import com.itextpdf.text.pdf.interfaces.IAccessibleElement;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

public class FloatLayout {
    protected final ColumnText compositeColumn = new ColumnText(null);
    protected final List<Element> content;
    protected float filledWidth;
    protected float floatLeftX;
    protected float floatRightX;
    protected float leftX;
    protected float maxY;
    protected float minY;
    protected float rightX;
    protected final boolean useAscender;
    protected float yLine;

    public FloatLayout(List<Element> list, boolean bl) {
        this.compositeColumn.setUseAscender(bl);
        this.useAscender = bl;
        this.content = list;
    }

    private int floatingLayout(List<Element> list, boolean bl) throws DocumentException {
        float f;
        float f2;
        int n;
        float f3;
        block45 : {
            float f4;
            float f5 = this.yLine;
            ColumnText columnText = this.compositeColumn;
            if (bl) {
                columnText = ColumnText.duplicate(this.compositeColumn);
            }
            n = this.maxY == this.yLine ? 1 : 0;
            int n2 = 1;
            float f6 = 0.0f;
            f = 0.0f;
            int n3 = n;
            n = n2;
            do {
                block48 : {
                    block46 : {
                        Element element;
                        block47 : {
                            Object object;
                            boolean bl2;
                            Object object2;
                            Object object32 = list;
                            f4 = f6;
                            f3 = f;
                            f2 = f5;
                            if (list.isEmpty()) break;
                            element = object32.get(0);
                            object32.remove(0);
                            if (element instanceof PdfDiv) {
                                object = (PdfDiv)element;
                                n = n2 = object.layout(this.compositeColumn.getCanvas(), this.useAscender, true, this.floatLeftX, this.minY, this.floatRightX, this.yLine);
                                if ((n2 & 1) == 0) {
                                    this.yLine = f5;
                                    this.floatLeftX = this.leftX;
                                    this.floatRightX = this.rightX;
                                    n = n2 = object.layout(this.compositeColumn.getCanvas(), this.useAscender, true, this.floatLeftX, this.minY, this.floatRightX, this.yLine);
                                    if ((n2 & 1) == 0) {
                                        object32.add(0, object);
                                        n = n2;
                                        f4 = f6;
                                        f3 = f;
                                        f2 = f5;
                                        break;
                                    }
                                }
                                if (object.getFloatType() == PdfDiv.FloatType.LEFT) {
                                    object2 = this.compositeColumn.getCanvas();
                                    bl2 = this.useAscender;
                                    f3 = this.floatLeftX;
                                    f2 = this.minY;
                                    float f7 = this.floatRightX;
                                    float f8 = this.yLine;
                                    object32 = object;
                                    f4 = f6;
                                    n = object.layout((PdfContentByte)object2, bl2, bl, f3, f2, f7, f8);
                                    this.floatLeftX += object32.getActualWidth();
                                    f6 = f + object32.getActualWidth();
                                    f = f4;
                                } else {
                                    object32 = object;
                                    f4 = f;
                                    f3 = f6;
                                    f6 = f4;
                                    f = f3;
                                    if (object32.getFloatType() == PdfDiv.FloatType.RIGHT) {
                                        n = object32.layout(this.compositeColumn.getCanvas(), this.useAscender, bl, this.floatRightX - object32.getActualWidth() - 0.01f, this.minY, this.floatRightX, this.yLine);
                                        this.floatRightX -= object32.getActualWidth();
                                        f = f3 + object32.getActualWidth();
                                        f6 = f4;
                                    }
                                }
                                f5 = Math.min(f5, this.yLine - object.getActualHeight());
                                f4 = f6;
                            } else {
                                object = element;
                                if (this.minY > f5) {
                                    n3 = 2;
                                    f4 = f;
                                    list.add(0, (Element)object);
                                    n = n3;
                                    f3 = f6;
                                    f = f4;
                                    f2 = f5;
                                    if (columnText != null) {
                                        columnText.setText(null);
                                        n = n3;
                                        f3 = f6;
                                        f = f4;
                                        f2 = f5;
                                    }
                                    break block45;
                                }
                                f3 = f;
                                if (object instanceof Spaceable && (n3 == 0 || !columnText.isIgnoreSpacingBefore() || ((Spaceable)object).getPaddingTop() != 0.0f)) {
                                    this.yLine -= ((Spaceable)object).getSpacingBefore();
                                }
                                if (bl) {
                                    if (object instanceof PdfPTable) {
                                        columnText.addElement(new PdfPTable((PdfPTable)object));
                                    } else {
                                        columnText.addElement((Element)object);
                                    }
                                } else {
                                    columnText.addElement((Element)object);
                                }
                                if (this.yLine > f5) {
                                    columnText.setSimpleColumn(this.floatLeftX, this.yLine, this.floatRightX, f5);
                                } else {
                                    columnText.setSimpleColumn(this.floatLeftX, this.yLine, this.floatRightX, this.minY);
                                }
                                columnText.setFilledWidth(0.0f);
                                n = columnText.go(bl);
                                if (this.yLine > f5 && (this.floatLeftX > this.leftX || this.floatRightX < this.rightX) && (n & 1) == 0) {
                                    this.yLine = f5;
                                    this.floatLeftX = this.leftX;
                                    this.floatRightX = this.rightX;
                                    if (f3 != 0.0f && f6 != 0.0f) {
                                        this.filledWidth = this.rightX - this.leftX;
                                    } else {
                                        if (f3 > this.filledWidth) {
                                            this.filledWidth = f3;
                                        }
                                        if (f6 > this.filledWidth) {
                                            this.filledWidth = f6;
                                        }
                                    }
                                    if (bl && object instanceof PdfPTable) {
                                        columnText.addElement(new PdfPTable((PdfPTable)object));
                                    }
                                    columnText.setSimpleColumn(this.floatLeftX, this.yLine, this.floatRightX, this.minY);
                                    n = columnText.go(bl);
                                    this.yLine = f5 = columnText.getYLine() + columnText.getDescender();
                                    if (columnText.getFilledWidth() > this.filledWidth) {
                                        this.filledWidth = columnText.getFilledWidth();
                                    }
                                    f = 0.0f;
                                    f6 = 0.0f;
                                } else {
                                    if (f6 > 0.0f) {
                                        f = f6 + columnText.getFilledWidth();
                                        f4 = f3;
                                    } else if (f3 > 0.0f) {
                                        f4 = f3 + columnText.getFilledWidth();
                                        f = f6;
                                    } else {
                                        f = f6;
                                        f4 = f3;
                                        if (columnText.getFilledWidth() > this.filledWidth) {
                                            this.filledWidth = columnText.getFilledWidth();
                                            f4 = f3;
                                            f = f6;
                                        }
                                    }
                                    f5 = Math.min(columnText.getYLine() + columnText.getDescender(), f5);
                                    this.yLine = columnText.getYLine() + columnText.getDescender();
                                    f6 = f4;
                                }
                                if ((n & 1) == 0) {
                                    if (!bl) {
                                        list.addAll(0, columnText.getCompositeElements());
                                        columnText.getCompositeElements().clear();
                                        f4 = f;
                                        f3 = f6;
                                        f2 = f5;
                                        break;
                                    }
                                    list.add(0, (Element)object);
                                    columnText.setText(null);
                                    f4 = f;
                                    f3 = f6;
                                    f2 = f5;
                                    break;
                                }
                                columnText.setText(null);
                                f4 = f6;
                            }
                            bl2 = element instanceof Paragraph;
                            if (bl2) {
                                for (Object object32 : (Paragraph)element) {
                                    if (!(object32 instanceof WritableDirectElement) || (object32 = (WritableDirectElement)object32).getDirectElementType() != 1 || bl) continue;
                                    object2 = this.compositeColumn.getCanvas().getPdfWriter();
                                    PdfDocument pdfDocument = this.compositeColumn.getCanvas().getPdfDocument();
                                    f6 = pdfDocument.currentHeight;
                                    pdfDocument.currentHeight = pdfDocument.top() - this.yLine - pdfDocument.indentation.indentTop;
                                    object32.write((PdfWriter)object2, pdfDocument);
                                    pdfDocument.currentHeight = f6;
                                }
                            }
                            if (n3 == 0 || element.getChunks().size() != 0) break block46;
                            if (!bl2) break block47;
                            if ((element = (Element)((Paragraph)element).get(0)) instanceof WritableDirectElement && ((WritableDirectElement)element).getDirectElementType() != 1) {
                                n3 = 0;
                            }
                            break block48;
                        }
                        if (!(element instanceof Spaceable)) break block48;
                    }
                    n3 = 0;
                }
                f6 = f;
                f = f4;
            } while (true);
            f = f3;
            f3 = f4;
        }
        if (f != 0.0f && f3 != 0.0f) {
            this.filledWidth = this.rightX - this.leftX;
        } else {
            if (f > this.filledWidth) {
                this.filledWidth = f;
            }
            if (f3 > this.filledWidth) {
                this.filledWidth = f3;
            }
        }
        this.yLine = f2;
        this.floatLeftX = this.leftX;
        this.floatRightX = this.rightX;
        return n;
    }

    public float getFilledWidth() {
        return this.filledWidth;
    }

    public int getRunDirection() {
        return this.compositeColumn.getRunDirection();
    }

    public float getYLine() {
        return this.yLine;
    }

    public int layout(PdfContentByte pdfContentByte, boolean bl) throws DocumentException {
        int n;
        this.compositeColumn.setCanvas(pdfContentByte);
        ArrayList<Element> arrayList = new ArrayList<Element>();
        List<Element> list = bl ? new ArrayList<Element>(this.content) : this.content;
        int n2 = 1;
        do {
            n = n2;
            if (list.isEmpty()) break;
            if (list.get(0) instanceof PdfDiv) {
                PdfDiv pdfDiv = (PdfDiv)list.get(0);
                if (pdfDiv.getFloatType() != PdfDiv.FloatType.LEFT && pdfDiv.getFloatType() != PdfDiv.FloatType.RIGHT) {
                    if (!arrayList.isEmpty() && ((n = this.floatingLayout(arrayList, bl)) & 1) == 0) break;
                    list.remove(0);
                    n = pdfDiv.layout(pdfContentByte, this.useAscender, true, this.floatLeftX, this.minY, this.floatRightX, this.yLine);
                    if (pdfDiv.getKeepTogether() && (n & 1) == 0 && (this.compositeColumn.getCanvas().getPdfDocument().currentHeight > 0.0f || this.yLine != this.maxY)) {
                        list.add(0, pdfDiv);
                        break;
                    }
                    if (!bl) {
                        pdfContentByte.openMCBlock(pdfDiv);
                        n = pdfDiv.layout(pdfContentByte, this.useAscender, bl, this.floatLeftX, this.minY, this.floatRightX, this.yLine);
                        pdfContentByte.closeMCBlock(pdfDiv);
                    }
                    if (pdfDiv.getActualWidth() > this.filledWidth) {
                        this.filledWidth = pdfDiv.getActualWidth();
                    }
                    if ((n & 1) == 0) {
                        list.add(0, pdfDiv);
                        this.yLine = pdfDiv.getYLine();
                        break;
                    }
                    this.yLine -= pdfDiv.getActualHeight();
                    n2 = n;
                    continue;
                }
                arrayList.add(pdfDiv);
                list.remove(0);
                continue;
            }
            arrayList.add(list.get(0));
            list.remove(0);
        } while (true);
        n2 = n;
        if (n & true) {
            n2 = n;
            if (!arrayList.isEmpty()) {
                n2 = this.floatingLayout(arrayList, bl);
            }
        }
        list.addAll(0, arrayList);
        return n2;
    }

    public void setFilledWidth(float f) {
        this.filledWidth = f;
    }

    public void setRunDirection(int n) {
        this.compositeColumn.setRunDirection(n);
    }

    public void setSimpleColumn(float f, float f2, float f3, float f4) {
        this.leftX = Math.min(f, f3);
        this.maxY = Math.max(f2, f4);
        this.minY = Math.min(f2, f4);
        this.rightX = Math.max(f, f3);
        this.floatLeftX = this.leftX;
        this.floatRightX = this.rightX;
        this.yLine = this.maxY;
        this.filledWidth = 0.0f;
    }

    public void setYLine(float f) {
        this.yLine = f;
    }
}

