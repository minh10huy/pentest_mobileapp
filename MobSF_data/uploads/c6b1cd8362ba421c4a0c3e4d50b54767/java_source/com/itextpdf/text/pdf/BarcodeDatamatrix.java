/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf;

import com.itextpdf.text.BadElementException;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Image;
import com.itextpdf.text.pdf.PdfContentByte;
import com.itextpdf.text.pdf.codec.CCITTG4Encoder;
import java.io.UnsupportedEncodingException;
import java.util.Arrays;
import java.util.Hashtable;

public class BarcodeDatamatrix {
    public static final int DM_ASCII = 1;
    public static final int DM_AUTO = 0;
    public static final int DM_B256 = 4;
    public static final int DM_C40 = 2;
    public static final int DM_EDIFACT = 6;
    public static final int DM_ERROR_EXTENSION = 5;
    public static final int DM_ERROR_INVALID_SQUARE = 3;
    public static final int DM_ERROR_TEXT_TOO_BIG = 1;
    public static final int DM_EXTENSION = 32;
    public static final int DM_NO_ERROR = 0;
    public static final int DM_RAW = 7;
    public static final int DM_TEST = 64;
    public static final int DM_TEXT = 3;
    public static final int DM_X21 = 5;
    private static final DmParams[] dmSizes = new DmParams[]{new DmParams(10, 10, 10, 10, 3, 3, 5), new DmParams(12, 12, 12, 12, 5, 5, 7), new DmParams(8, 18, 8, 18, 5, 5, 7), new DmParams(14, 14, 14, 14, 8, 8, 10), new DmParams(8, 32, 8, 16, 10, 10, 11), new DmParams(16, 16, 16, 16, 12, 12, 12), new DmParams(12, 26, 12, 26, 16, 16, 14), new DmParams(18, 18, 18, 18, 18, 18, 14), new DmParams(20, 20, 20, 20, 22, 22, 18), new DmParams(12, 36, 12, 18, 22, 22, 18), new DmParams(22, 22, 22, 22, 30, 30, 20), new DmParams(16, 36, 16, 18, 32, 32, 24), new DmParams(24, 24, 24, 24, 36, 36, 24), new DmParams(26, 26, 26, 26, 44, 44, 28), new DmParams(16, 48, 16, 24, 49, 49, 28), new DmParams(32, 32, 16, 16, 62, 62, 36), new DmParams(36, 36, 18, 18, 86, 86, 42), new DmParams(40, 40, 20, 20, 114, 114, 48), new DmParams(44, 44, 22, 22, 144, 144, 56), new DmParams(48, 48, 24, 24, 174, 174, 68), new DmParams(52, 52, 26, 26, 204, 102, 42), new DmParams(64, 64, 16, 16, 280, 140, 56), new DmParams(72, 72, 18, 18, 368, 92, 36), new DmParams(80, 80, 20, 20, 456, 114, 48), new DmParams(88, 88, 22, 22, 576, 144, 56), new DmParams(96, 96, 24, 24, 696, 174, 68), new DmParams(104, 104, 26, 26, 816, 136, 56), new DmParams(120, 120, 20, 20, 1050, 175, 68), new DmParams(132, 132, 22, 22, 1304, 163, 62), new DmParams(144, 144, 24, 24, 1558, 156, 62)};
    private static final String x12 = "\r*> 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    private int extOut;
    private boolean forceSquareSize = false;
    private int height;
    private byte[] image;
    private int options;
    private short[] place;
    private int width;
    private int ws;

    private static int C40OrTextEncodation(byte[] arrby, int n, int n2, byte[] arrby2, int n3, int n4, boolean bl) {
        String string2;
        int n5;
        int n6;
        String string3;
        int n7 = 0;
        if (n2 == 0) {
            return 0;
        }
        arrby2[n3 + 0] = bl ? -26 : -17;
        if (bl) {
            string3 = " 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
            string2 = "`abcdefghijklmnopqrstuvwxyz{|}~";
        } else {
            string3 = " 0123456789abcdefghijklmnopqrstuvwxyz";
            string2 = "`ABCDEFGHIJKLMNOPQRSTUVWXYZ{|}~";
        }
        int[] arrn = new int[n2 * 4 + 10];
        int n8 = 0;
        int n9 = 0;
        int n10 = 0;
        for (n5 = 0; n5 < n2; ++n5) {
            int n11;
            n6 = n10;
            if (n8 % 3 == 0) {
                n9 = n5;
                n6 = n8;
            }
            int n12 = n11 = arrby[n + n5] & 255;
            n10 = n8;
            if (n11 > 127) {
                n12 = n11 - 128;
                n11 = n8 + 1;
                arrn[n8] = 1;
                n10 = n11 + 1;
                arrn[n11] = 30;
            }
            if ((n11 = string3.indexOf(n8 = (int)((char)n12))) >= 0) {
                arrn[n10] = n11 + 3;
                n8 = n10 + 1;
            } else if (n12 < 32) {
                n11 = n10 + 1;
                arrn[n10] = 0;
                n8 = n11 + 1;
                arrn[n11] = n12;
            } else {
                n12 = "!\"#$%&'()*+,-./:;<=>?@[\\]^_".indexOf(n8);
                if (n12 >= 0) {
                    n11 = n10 + 1;
                    arrn[n10] = 1;
                    n8 = n11 + 1;
                    arrn[n11] = n12;
                } else {
                    n12 = string2.indexOf(n8);
                    n8 = n10;
                    if (n12 >= 0) {
                        n11 = n10 + 1;
                        arrn[n10] = 2;
                        n8 = n11 + 1;
                        arrn[n11] = n12;
                    }
                }
            }
            n10 = n6;
        }
        n = n8;
        if (n8 % 3 != 0) {
            n5 = n9;
            n = n10;
        }
        if (n / 3 * 2 > n4 - 2) {
            return -1;
        }
        n8 = 1;
        for (n10 = n7; n10 < n; n10 += 3) {
            n9 = arrn[n10] * 1600 + arrn[n10 + 1] * 40 + arrn[n10 + 2] + 1;
            n6 = n8 + 1;
            arrby2[n3 + n8] = (byte)(n9 / 256);
            n8 = n6 + 1;
            arrby2[n3 + n6] = (byte)n9;
        }
        n = n8 + 1;
        arrby2[n8] = -2;
        if ((n2 = BarcodeDatamatrix.asciiEncodation(arrby, n5, n2 - n5, arrby2, n, n4 - n)) < 0) {
            return n2;
        }
        return n + n2;
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    private static int EdifactEncodation(byte[] arrby, int n, int n2, byte[] arrby2, int n3, int n4) {
        int n5;
        int n6;
        int n7;
        int n8;
        if (n2 == 0) {
            return 0;
        }
        int n9 = 0;
        int n10 = 1;
        int n11 = 0;
        int n12 = 18;
        int n13 = 0;
        do {
            n7 = n10;
            n8 = n11;
            n5 = n12;
            n6 = n13;
            if (n9 >= n2) break;
            n5 = arrby[n9 + n] & 255;
            n6 = n5 & 224;
            if ((n6 == 64 || n6 == 32) && n5 != 95) {
                n8 = n10;
                n6 = n13;
                if (n10 != 0) {
                    n6 = n13 + 1;
                    if (n6 > n4) {
                        n7 = n10;
                        n8 = n11;
                        n5 = n12;
                        n6 = n13;
                        break;
                    }
                    arrby2[n3 + n13] = -16;
                    n8 = 0;
                }
                n13 = n11 | (n5 & 63) << n12;
                if (n12 == 0) {
                    if (n6 + 3 > n4) {
                        n7 = n8;
                        n8 = n13;
                        n5 = n12;
                        break;
                    }
                    n10 = n6 + 1;
                    arrby2[n3 + n6] = (byte)(n13 >> 16);
                    n6 = n10 + 1;
                    arrby2[n3 + n10] = (byte)(n13 >> 8);
                    arrby2[n3 + n6] = (byte)n13;
                    n13 = n6 + 1;
                    n6 = 0;
                    n12 = 18;
                    n10 = n8;
                    n8 = n6;
                } else {
                    n12 -= 6;
                    n10 = n8;
                    n8 = n13;
                    n13 = n6;
                }
            } else {
                n7 = n10;
                n8 = n11;
                n6 = n12;
                int n14 = n13;
                if (n10 == 0) {
                    n8 = n11 | 31 << n12;
                    if (n13 + 3 - n12 / 8 > n4) {
                        n7 = n10;
                        n5 = n12;
                        n6 = n13;
                        break;
                    }
                    n10 = n13 + 1;
                    arrby2[n3 + n13] = (byte)(n8 >> 16);
                    n6 = n10;
                    if (n12 <= 12) {
                        arrby2[n3 + n10] = (byte)(n8 >> 8);
                        n6 = n10 + 1;
                    }
                    n13 = n6;
                    if (n12 <= 6) {
                        arrby2[n3 + n6] = (byte)n8;
                        n13 = n6 + 1;
                    }
                    n7 = 1;
                    n8 = 0;
                    n6 = 18;
                    n14 = n13;
                }
                n10 = n5;
                n13 = n14;
                if (n5 > 127) {
                    if (n14 >= n4) {
                        n5 = n6;
                        n6 = n14;
                        break;
                    }
                    arrby2[n3 + n14] = -21;
                    n10 = n5 - 128;
                    n13 = n14 + 1;
                }
                if (n13 >= n4) {
                    n5 = n6;
                    n6 = n13;
                    break;
                }
                arrby2[n3 + n13] = (byte)(n10 + 1);
                ++n13;
                n12 = n6;
                n10 = n7;
            }
            ++n9;
            n11 = n8;
        } while (true);
        if (n9 != n2) {
            return -1;
        }
        n13 = Integer.MAX_VALUE;
        n = 0;
        do {
            n2 = n13;
            if (n >= dmSizes.length) break;
            if (BarcodeDatamatrix.dmSizes[n].dataSize >= n3 + n6 + (3 - n5 / 6)) {
                n2 = BarcodeDatamatrix.dmSizes[n].dataSize;
                break;
            }
            ++n;
        } while (true);
        if (n2 - n3 - n6 <= 2 && n5 >= 6) {
            n = n6;
            if (n5 <= 12) {
                n = n2 = (int)((byte)(n8 >> 18 & 63));
                if ((n2 & 32) == 0) {
                    n = (byte)(n2 | 64);
                }
                arrby2[n3 + n6] = (byte)(n + 1);
                n = n6 + 1;
            }
            n2 = n;
            if (n5 > 6) return n2;
            n2 = n4 = (int)((byte)(n8 >> 12 & 63));
            if ((n4 & 32) == 0) {
                n2 = (byte)(n4 | 64);
            }
            n4 = n + 1;
            arrby2[n3 + n] = (byte)(n2 + 1);
            return n4;
        }
        n2 = n6;
        if (n7 != 0) return n2;
        n13 = 31 << n5 | n8;
        if (n6 + 3 - n5 / 8 > n4) {
            return -1;
        }
        n = n6 + 1;
        arrby2[n3 + n6] = (byte)(n13 >> 16);
        if (n5 <= 12) {
            arrby2[n3 + n] = (byte)(n13 >> 8);
            ++n;
        }
        n2 = n;
        if (n5 > 6) return n2;
        n2 = n + 1;
        arrby2[n3 + n] = (byte)n13;
        return n2;
    }

    private static int X12Encodation(byte[] arrby, int n, int n2, byte[] arrby2, int n3, int n4) {
        int n5;
        int n6;
        int n7 = 0;
        if (n2 == 0) {
            return 0;
        }
        byte[] arrby3 = new byte[n2];
        int n8 = 0;
        int n9 = 0;
        do {
            n6 = 100;
            if (n8 >= n2) break;
            n5 = x12.indexOf((char)arrby[n8 + n]);
            if (n5 >= 0) {
                arrby3[n8] = (byte)n5;
                ++n9;
            } else {
                arrby3[n8] = 100;
                n5 = n9;
                if (n9 >= 6) {
                    n5 = n9 - n9 / 3 * 3;
                }
                for (n9 = 0; n9 < n5; ++n9) {
                    arrby3[n8 - n9 - 1] = 100;
                }
                n9 = 0;
            }
            ++n8;
        } while (true);
        n5 = n9;
        if (n9 >= 6) {
            n5 = n9 - n9 / 3 * 3;
        }
        for (n9 = 0; n9 < n5; ++n9) {
            arrby3[n8 - n9 - 1] = 100;
        }
        n9 = 0;
        n8 = n7;
        do {
            block23 : {
                int n10;
                block20 : {
                    block22 : {
                        block21 : {
                            n5 = n9;
                            if (n8 >= n2) break;
                            n5 = arrby3[n8];
                            if (n9 >= n4) {
                                n5 = n9;
                                break;
                            }
                            if (n5 >= 40) break block20;
                            if (n8 == 0) break block21;
                            n5 = n9;
                            if (n8 <= 0) break block22;
                            n5 = n9;
                            if (arrby3[n8 - 1] <= 40) break block22;
                        }
                        arrby2[n9 + n3] = -18;
                        n5 = n9 + 1;
                    }
                    if (n5 + 2 > n4) break;
                    n9 = arrby3[n8];
                    n7 = arrby3[n8 + 1];
                    n7 = n9 * 1600 + n7 * 40 + arrby3[n8 += 2] + 1;
                    n10 = n5 + 1;
                    arrby2[n5 + n3] = (byte)(n7 / 256);
                    n9 = n10 + 1;
                    arrby2[n10 + n3] = (byte)n7;
                    break block23;
                }
                n5 = n9;
                if (n8 > 0) {
                    n5 = n9;
                    if (arrby3[n8 - 1] < 40) {
                        arrby2[n9 + n3] = -2;
                        n5 = n9 + 1;
                    }
                }
                n10 = arrby[n8 + n] & 255;
                n9 = n5;
                n7 = n10;
                if (n10 > 127) {
                    arrby2[n5 + n3] = -21;
                    n7 = n10 - 128;
                    n9 = n5 + 1;
                }
                if (n9 >= n4) {
                    n5 = n9;
                    break;
                }
                arrby2[n9 + n3] = (byte)(n7 + 1);
                ++n9;
            }
            ++n8;
        } while (true);
        n = n6;
        if (n2 > 0) {
            n = arrby3[n2 - 1];
        }
        if (n8 == n2 && (n >= 40 || n5 < n4)) {
            if (n < 40) {
                arrby2[n3 + n5] = -2;
                return n5 + 1;
            }
            return n5;
        }
        return -1;
    }

    private static int asciiEncodation(byte[] arrby, int n, int n2, byte[] arrby2, int n3, int n4) {
        int n5 = n2 + n;
        int n6 = n4 + n3;
        n4 = n3;
        n2 = n;
        n = n4;
        while (n2 < n5) {
            if (n >= n6) {
                return -1;
            }
            n4 = n2 + 1;
            if (BarcodeDatamatrix.isDigit(n2 = arrby[n2] & 255) && n4 < n5 && BarcodeDatamatrix.isDigit(arrby[n4] & 255)) {
                arrby2[n] = (byte)((n2 - 48) * 10 + (arrby[n4] & 255) - 48 + 130);
                ++n;
                n2 = n4 + 1;
                continue;
            }
            if (n2 > 127) {
                int n7 = n + 1;
                if (n7 >= n6) {
                    return -1;
                }
                arrby2[n] = -21;
                n = n7 + 1;
                arrby2[n7] = (byte)(n2 - 128 + 1);
            } else {
                arrby2[n] = (byte)(n2 + 1);
                ++n;
            }
            n2 = n4;
        }
        return n - n3;
    }

    private static int b256Encodation(byte[] arrby, int n, int n2, byte[] arrby2, int n3, int n4) {
        if (n2 == 0) {
            return 0;
        }
        if (n2 < 250 && n2 + 2 > n4) {
            return -1;
        }
        if (n2 >= 250 && n2 + 3 > n4) {
            return -1;
        }
        arrby2[n3] = -25;
        if (n2 < 250) {
            arrby2[n3 + 1] = (byte)n2;
            n4 = 2;
        } else {
            arrby2[n3 + 1] = (byte)(n2 / 250 + 249);
            arrby2[n3 + 2] = (byte)(n2 % 250);
            n4 = 3;
        }
        System.arraycopy(arrby, n, arrby2, n4 + n3, n2);
        int n5 = n4 + (n2 + n3);
        n = n3 + 1;
        while (n < n5) {
            int n6;
            n2 = arrby2[n];
            n4 = n + 1;
            n2 = n6 = (n2 & 255) + (n4 * 149 % 255 + 1);
            if (n6 > 255) {
                n2 = n6 - 256;
            }
            arrby2[n] = (byte)n2;
            n = n4;
        }
        return n5 - n3;
    }

    private void draw(byte[] arrby, int n, DmParams dmParams) {
        int n2;
        int n3;
        int n4 = (dmParams.width + this.ws * 2 + 7) / 8;
        Arrays.fill(this.image, (byte)0);
        for (n = this.ws; n < dmParams.height + this.ws; n += dmParams.heightSection) {
            for (n3 = this.ws; n3 < dmParams.width + this.ws; n3 += 2) {
                this.setBit(n3, n, n4);
            }
        }
        n = dmParams.heightSection - 1;
        n3 = this.ws;
        while ((n3 = n + n3) < dmParams.height + this.ws) {
            for (n = this.ws; n < dmParams.width + this.ws; ++n) {
                this.setBit(n, n3, n4);
            }
            n2 = dmParams.heightSection;
            n = n3;
            n3 = n2;
        }
        for (n = this.ws; n < dmParams.width + this.ws; n += dmParams.widthSection) {
            for (n3 = this.ws; n3 < dmParams.height + this.ws; ++n3) {
                this.setBit(n, n3, n4);
            }
        }
        n = dmParams.widthSection - 1;
        n3 = this.ws;
        while ((n3 = n + n3) < dmParams.width + this.ws) {
            for (n = this.ws + 1; n < dmParams.height + this.ws; n += 2) {
                this.setBit(n3, n, n4);
            }
            n2 = dmParams.widthSection;
            n = n3;
            n3 = n2;
        }
        n = 0;
        for (n3 = 0; n3 < dmParams.height; n3 += dmParams.heightSection) {
            for (n2 = 1; n2 < dmParams.heightSection - 1; ++n2) {
                for (int i = 0; i < dmParams.width; i += dmParams.widthSection) {
                    int n5 = 1;
                    while (n5 < dmParams.widthSection - 1) {
                        short s = this.place[n];
                        if (s == 1 || s > 1 && (128 >> s % 8 & (arrby[s / 8 - 1] & 255)) != 0) {
                            this.setBit(n5 + i + this.ws, n2 + n3 + this.ws, n4);
                        }
                        ++n5;
                        ++n;
                    }
                }
            }
        }
    }

    private static int getEncodation(byte[] arrby, int n, int n2, byte[] arrby2, int n3, int n4, int n5, boolean bl) {
        int[] arrn = new int[6];
        if (n4 < 0) {
            return -1;
        }
        if ((n5 &= 7) == 0) {
            int n6 = BarcodeDatamatrix.asciiEncodation(arrby, n, n2, arrby2, n3, n4);
            arrn[0] = n6;
            if (bl && arrn[0] >= 0) {
                return arrn[0];
            }
            arrn[1] = BarcodeDatamatrix.C40OrTextEncodation(arrby, n, n2, arrby2, n3, n4, false);
            if (bl && arrn[1] >= 0) {
                return arrn[1];
            }
            arrn[2] = BarcodeDatamatrix.C40OrTextEncodation(arrby, n, n2, arrby2, n3, n4, true);
            if (bl && arrn[2] >= 0) {
                return arrn[2];
            }
            arrn[3] = BarcodeDatamatrix.b256Encodation(arrby, n, n2, arrby2, n3, n4);
            if (bl && arrn[3] >= 0) {
                return arrn[3];
            }
            arrn[4] = BarcodeDatamatrix.X12Encodation(arrby, n, n2, arrby2, n3, n4);
            if (bl && arrn[4] >= 0) {
                return arrn[4];
            }
            arrn[5] = BarcodeDatamatrix.EdifactEncodation(arrby, n, n2, arrby2, n3, n4);
            if (bl && arrn[5] >= 0) {
                return arrn[5];
            }
            if (arrn[0] < 0 && arrn[1] < 0 && arrn[2] < 0 && arrn[3] < 0 && arrn[4] < 0 && arrn[5] < 0) {
                return -1;
            }
            int n7 = 0;
            n6 = 99999;
            for (n5 = 0; n5 < 6; ++n5) {
                int n8 = n7;
                int n9 = n6;
                if (arrn[n5] >= 0) {
                    n8 = n7;
                    n9 = n6;
                    if (arrn[n5] < n6) {
                        n9 = arrn[n5];
                        n8 = n5;
                    }
                }
                n7 = n8;
                n6 = n9;
            }
            if (n7 == 0) {
                return BarcodeDatamatrix.asciiEncodation(arrby, n, n2, arrby2, n3, n4);
            }
            if (n7 == 1) {
                return BarcodeDatamatrix.C40OrTextEncodation(arrby, n, n2, arrby2, n3, n4, false);
            }
            if (n7 == 2) {
                return BarcodeDatamatrix.C40OrTextEncodation(arrby, n, n2, arrby2, n3, n4, true);
            }
            if (n7 == 3) {
                return BarcodeDatamatrix.b256Encodation(arrby, n, n2, arrby2, n3, n4);
            }
            if (n7 == 4) {
                n6 = BarcodeDatamatrix.X12Encodation(arrby, n, n2, arrby2, n3, n4);
            }
            return n6;
        }
        switch (n5) {
            default: {
                return -1;
            }
            case 7: {
                if (n2 > n4) {
                    return -1;
                }
                System.arraycopy(arrby, n, arrby2, n3, n2);
                return n2;
            }
            case 6: {
                return BarcodeDatamatrix.EdifactEncodation(arrby, n, n2, arrby2, n3, n4);
            }
            case 5: {
                return BarcodeDatamatrix.X12Encodation(arrby, n, n2, arrby2, n3, n4);
            }
            case 4: {
                return BarcodeDatamatrix.b256Encodation(arrby, n, n2, arrby2, n3, n4);
            }
            case 3: {
                return BarcodeDatamatrix.C40OrTextEncodation(arrby, n, n2, arrby2, n3, n4, false);
            }
            case 2: {
                return BarcodeDatamatrix.C40OrTextEncodation(arrby, n, n2, arrby2, n3, n4, true);
            }
            case 1: 
        }
        return BarcodeDatamatrix.asciiEncodation(arrby, n, n2, arrby2, n3, n4);
    }

    private static int getNumber(byte[] arrby, int n, int n2) {
        int n3 = 0;
        int n4 = 0;
        while (n3 < n2) {
            int n5 = arrby[n] & 255;
            if (n5 >= 48 && n5 <= 57) {
                n4 = n4 * 10 + n5 - 48;
                ++n3;
                ++n;
                continue;
            }
            return -1;
        }
        return n4;
    }

    private static boolean isDigit(int n) {
        if (n >= 48 && n <= 57) {
            return true;
        }
        return false;
    }

    private static void makePadding(byte[] arrby, int n, int n2) {
        if (n2 <= 0) {
            return;
        }
        int n3 = n + 1;
        arrby[n] = -127;
        n = n3;
        while ((n3 = n2 - 1) > 0) {
            int n4;
            int n5 = n + 1;
            n2 = n4 = n5 * 149 % 253 + 129 + 1;
            if (n4 > 254) {
                n2 = n4 - 254;
            }
            arrby[n] = (byte)n2;
            n = n5;
            n2 = n3;
        }
    }

    /*
     * Enabled aggressive block sorting
     */
    private int processExtensions(byte[] arrby, int n, int n2, byte[] arrby2) {
        int n3 = this.options;
        int n4 = 0;
        if ((n3 & 32) == 0) {
            return 0;
        }
        int n5 = 0;
        n3 = 0;
        block4 : while (n4 < n2) {
            int n6;
            int n7;
            int n8;
            block25 : {
                block28 : {
                    block26 : {
                        block27 : {
                            if (n5 > 20) {
                                return -1;
                            }
                            n7 = n4 + 1;
                            n4 = arrby[n4 + n] & 255;
                            ++n5;
                            if (n4 == 46) {
                                this.extOut = n7;
                                return n3;
                            }
                            if (n4 == 109) break block25;
                            if (n4 == 112) break block26;
                            if (n4 == 115) break block27;
                            switch (n4) {
                                default: {
                                    n4 = n7;
                                    continue block4;
                                }
                                case 102: {
                                    if (n5 != 1 && (n5 != 2 || arrby[n] != 115 && arrby[n] != 109)) {
                                        return -1;
                                    }
                                    n4 = n3 + 1;
                                    arrby2[n3] = -24;
                                    n3 = n4;
                                    break block28;
                                }
                                case 101: 
                            }
                            n4 = n7 + 6;
                            if (n4 > n2) {
                                return -1;
                            }
                            n8 = BarcodeDatamatrix.getNumber(arrby, n7 + n, 6);
                            if (n8 < 0) {
                                return -1;
                            }
                            n7 = n3 + 1;
                            arrby2[n3] = -15;
                            if (n8 < 127) {
                                n3 = n7 + 1;
                                arrby2[n7] = (byte)(n8 + 1);
                                continue;
                            }
                            if (n8 < 16383) {
                                n3 = n7 + 1;
                                arrby2[n7] = (byte)((n8 -= 127) / 254 + 128);
                                arrby2[n3] = (byte)(n8 % 254 + 1);
                                ++n3;
                                continue;
                            }
                            n3 = n7 + 1;
                            arrby2[n7] = (byte)((n8 -= 16383) / 64516 + 192);
                            n7 = n3 + 1;
                            arrby2[n3] = (byte)(n8 / 254 % 254 + 1);
                            n3 = n7 + 1;
                            arrby2[n7] = (byte)(n8 % 254 + 1);
                            continue;
                        }
                        if (n5 != 1) {
                            return -1;
                        }
                        if (n7 + 9 > n2) {
                            return -1;
                        }
                        n8 = BarcodeDatamatrix.getNumber(arrby, n + n7, 2);
                        if (n8 <= 0) {
                            return -1;
                        }
                        if (n8 > 16) {
                            return -1;
                        }
                        n4 = n7 + 2;
                        n6 = BarcodeDatamatrix.getNumber(arrby, n + n4, 2);
                        if (n6 <= 1) {
                            return -1;
                        }
                        if (n6 > 16) {
                            return -1;
                        }
                        n7 = BarcodeDatamatrix.getNumber(arrby, n + (n4 += 2), 5);
                        if (n7 < 0) {
                            return -1;
                        }
                        if (n8 >= 64516) {
                            return -1;
                        }
                        n4 += 5;
                        int n9 = n3 + 1;
                        arrby2[n3] = -23;
                        n3 = n9 + 1;
                        arrby2[n9] = (byte)(n8 - 1 << 4 | 17 - n6);
                        n8 = n3 + 1;
                        arrby2[n3] = (byte)(n7 / 254 + 1);
                        n3 = n8 + 1;
                        arrby2[n8] = (byte)(n7 % 254 + 1);
                        continue;
                    }
                    if (n5 != 1) {
                        return -1;
                    }
                    n4 = n3 + 1;
                    arrby2[n3] = -22;
                    n3 = n4;
                }
                n4 = n7;
                continue;
            }
            if (n5 != 1) {
                return -1;
            }
            n4 = n7 + 1;
            if (n4 > n2) {
                return -1;
            }
            n6 = arrby[n7 + n] & 255;
            if (n6 != 53 && n6 != 53) {
                return -1;
            }
            n8 = n3 + 1;
            arrby2[n3] = -22;
            n7 = n8 + 1;
            n3 = n6 == 53 ? 236 : 237;
            arrby2[n8] = (byte)n3;
            n3 = n7;
        }
        return -1;
    }

    private void setBit(int n, int n2, int n3) {
        byte[] arrby = this.image;
        n2 = n2 * n3 + n / 8;
        n3 = arrby[n2];
        arrby[n2] = (byte)((byte)(128 >> (n & 7)) | n3);
    }

    public Image createImage() throws BadElementException {
        if (this.image == null) {
            return null;
        }
        byte[] arrby = CCITTG4Encoder.compress(this.image, this.width + this.ws * 2, this.height + this.ws * 2);
        return Image.getInstance(this.width + this.ws * 2, this.height + this.ws * 2, false, 256, 0, arrby, null);
    }

    public int generate(String arrby) throws UnsupportedEncodingException {
        arrby = arrby.getBytes("iso-8859-1");
        return this.generate(arrby, 0, arrby.length);
    }

    public int generate(byte[] object, int n, int n2) {
        int n3;
        byte[] arrby = new byte[2500];
        this.extOut = 0;
        int n4 = this.processExtensions((byte[])object, n, n2, arrby);
        if (n4 < 0) {
            return 5;
        }
        if (this.height != 0 && this.width != 0) {
            for (n3 = 0; n3 < dmSizes.length && (this.height != BarcodeDatamatrix.dmSizes[n3].height || this.width != BarcodeDatamatrix.dmSizes[n3].width); ++n3) {
            }
            if (n3 == dmSizes.length) {
                return 3;
            }
            DmParams dmParams = dmSizes[n3];
            if ((n = BarcodeDatamatrix.getEncodation(object, this.extOut + n, n2 - this.extOut, arrby, n4, dmParams.dataSize - n4, this.options, true)) < 0) {
                return 1;
            }
            n += n4;
            object = dmParams;
        } else {
            DmParams dmParams = dmSizes[dmSizes.length - 1];
            if ((n = BarcodeDatamatrix.getEncodation(object, n + this.extOut, n2 - this.extOut, arrby, n4, dmParams.dataSize - n4, this.options, false)) < 0) {
                return 1;
            }
            n2 = n + n4;
            for (n = 0; n < dmSizes.length && (BarcodeDatamatrix.dmSizes[n].dataSize < n2 || this.forceSquareSize && BarcodeDatamatrix.dmSizes[n].width != BarcodeDatamatrix.dmSizes[n].height); ++n) {
            }
            object = dmSizes[n];
            this.height = object.height;
            this.width = object.width;
            n = n2;
        }
        if ((this.options & 64) != 0) {
            return 0;
        }
        this.image = new byte[(object.width + this.ws * 2 + 7) / 8 * (object.height + this.ws * 2)];
        BarcodeDatamatrix.makePadding(arrby, n, object.dataSize - n);
        this.place = Placement.doPlacement(object.height - object.height / object.heightSection * 2, object.width - object.width / object.widthSection * 2);
        n = object.dataSize;
        n2 = (object.dataSize + 2) / object.dataBlock;
        n3 = object.errorBlock;
        ReedSolomon.generateECC(arrby, object.dataSize, object.dataBlock, object.errorBlock);
        this.draw(arrby, n + n2 * n3, (DmParams)object);
        return 0;
    }

    public int getHeight() {
        return this.height;
    }

    public byte[] getImage() {
        return this.image;
    }

    public int getOptions() {
        return this.options;
    }

    public int getWidth() {
        return this.width;
    }

    public int getWs() {
        return this.ws;
    }

    public void placeBarcode(PdfContentByte pdfContentByte, BaseColor baseColor, float f, float f2) {
        int n = this.width + this.ws * 2;
        int n2 = this.height + this.ws * 2;
        int n3 = (n + 7) / 8;
        pdfContentByte.setColorFill(baseColor);
        for (int i = 0; i < n2; ++i) {
            for (int j = 0; j < n; ++j) {
                if (((this.image[j / 8 + i * n3] & 255) << j % 8 & 128) == 0) continue;
                pdfContentByte.rectangle((float)j * f2, (float)(n2 - i - 1) * f, f2, f);
            }
        }
        pdfContentByte.fill();
    }

    public void setForceSquareSize(boolean bl) {
        this.forceSquareSize = bl;
    }

    public void setHeight(int n) {
        this.height = n;
    }

    public void setOptions(int n) {
        this.options = n;
    }

    public void setWidth(int n) {
        this.width = n;
    }

    public void setWs(int n) {
        this.ws = n;
    }

    private static class DmParams {
        int dataBlock;
        int dataSize;
        int errorBlock;
        int height;
        int heightSection;
        int width;
        int widthSection;

        DmParams(int n, int n2, int n3, int n4, int n5, int n6, int n7) {
            this.height = n;
            this.width = n2;
            this.heightSection = n3;
            this.widthSection = n4;
            this.dataSize = n5;
            this.dataBlock = n6;
            this.errorBlock = n7;
        }
    }

    static class Placement {
        private static final Hashtable<Integer, short[]> cache = new Hashtable();
        private short[] array;
        private int ncol;
        private int nrow;

        private Placement() {
        }

        private void corner1(int n) {
            this.module(this.nrow - 1, 0, n, 0);
            this.module(this.nrow - 1, 1, n, 1);
            this.module(this.nrow - 1, 2, n, 2);
            this.module(0, this.ncol - 2, n, 3);
            this.module(0, this.ncol - 1, n, 4);
            this.module(1, this.ncol - 1, n, 5);
            this.module(2, this.ncol - 1, n, 6);
            this.module(3, this.ncol - 1, n, 7);
        }

        private void corner2(int n) {
            this.module(this.nrow - 3, 0, n, 0);
            this.module(this.nrow - 2, 0, n, 1);
            this.module(this.nrow - 1, 0, n, 2);
            this.module(0, this.ncol - 4, n, 3);
            this.module(0, this.ncol - 3, n, 4);
            this.module(0, this.ncol - 2, n, 5);
            this.module(0, this.ncol - 1, n, 6);
            this.module(1, this.ncol - 1, n, 7);
        }

        private void corner3(int n) {
            this.module(this.nrow - 3, 0, n, 0);
            this.module(this.nrow - 2, 0, n, 1);
            this.module(this.nrow - 1, 0, n, 2);
            this.module(0, this.ncol - 2, n, 3);
            this.module(0, this.ncol - 1, n, 4);
            this.module(1, this.ncol - 1, n, 5);
            this.module(2, this.ncol - 1, n, 6);
            this.module(3, this.ncol - 1, n, 7);
        }

        private void corner4(int n) {
            this.module(this.nrow - 1, 0, n, 0);
            this.module(this.nrow - 1, this.ncol - 1, n, 1);
            this.module(0, this.ncol - 3, n, 2);
            this.module(0, this.ncol - 2, n, 3);
            this.module(0, this.ncol - 1, n, 4);
            this.module(1, this.ncol - 3, n, 5);
            this.module(1, this.ncol - 2, n, 6);
            this.module(1, this.ncol - 1, n, 7);
        }

        static short[] doPlacement(int n, int n2) {
            Integer n3 = n * 1000 + n2;
            Object object = cache.get(n3);
            if (object != null) {
                return object;
            }
            object = new Placement();
            object.nrow = n;
            object.ncol = n2;
            object.array = new short[n * n2];
            Placement.super.ecc200();
            cache.put(n3, object.array);
            return object.array;
        }

        /*
         * Unable to fully structure code
         * Enabled aggressive block sorting
         * Lifted jumps to return sites
         */
        private void ecc200() {
            Arrays.fill(this.array, (short)0);
            var2_1 = 4;
            var1_2 = 0;
            var4_3 = 1;
            do lbl-1000: // 3 sources:
            {
                var3_4 = var4_3;
                if (var2_1 == this.nrow) {
                    var3_4 = var4_3;
                    if (var1_2 == 0) {
                        this.corner1(var4_3);
                        var3_4 = var4_3 + 1;
                    }
                }
                var5_5 = var3_4;
                if (var2_1 == this.nrow - 2) {
                    var5_5 = var3_4;
                    if (var1_2 == 0) {
                        var5_5 = var3_4;
                        if (this.ncol % 4 != 0) {
                            this.corner2(var3_4);
                            var5_5 = var3_4 + 1;
                        }
                    }
                }
                var4_3 = var5_5;
                if (var2_1 == this.nrow - 2) {
                    var4_3 = var5_5;
                    if (var1_2 == 0) {
                        var4_3 = var5_5;
                        if (this.ncol % 8 == 4) {
                            this.corner3(var5_5);
                            var4_3 = var5_5 + 1;
                        }
                    }
                }
                var5_5 = var2_1;
                var6_6 = var1_2;
                var3_4 = var4_3;
                if (var2_1 == this.nrow + 4) {
                    var5_5 = var2_1;
                    var6_6 = var1_2;
                    var3_4 = var4_3;
                    if (var1_2 == 2) {
                        var5_5 = var2_1;
                        var6_6 = var1_2;
                        var3_4 = var4_3;
                        if (this.ncol % 8 == 0) {
                            this.corner4(var4_3);
                            var3_4 = var4_3 + 1;
                            var6_6 = var1_2;
                            var5_5 = var2_1;
                        }
                    }
                }
                do {
                    var1_2 = var3_4;
                    if (var5_5 < this.nrow) {
                        var1_2 = var3_4;
                        if (var6_6 >= 0) {
                            var1_2 = var3_4;
                            if (this.array[this.ncol * var5_5 + var6_6] == 0) {
                                this.utah(var5_5, var6_6, var3_4);
                                var1_2 = var3_4 + 1;
                            }
                        }
                    }
                    var4_3 = var5_5 - 2;
                    var2_1 = var6_6 + 2;
                    if (var4_3 < 0) break;
                    var5_5 = var4_3;
                    var6_6 = var2_1;
                    var3_4 = var1_2;
                } while (var2_1 < this.ncol);
                ++var4_3;
                var3_4 = var2_1 + 3;
                var2_1 = var1_2;
                var1_2 = var3_4;
                do {
                    var3_4 = var2_1;
                    if (var4_3 >= 0) {
                        var3_4 = var2_1;
                        if (var1_2 < this.ncol) {
                            var3_4 = var2_1;
                            if (this.array[this.ncol * var4_3 + var1_2] == 0) {
                                this.utah(var4_3, var1_2, var2_1);
                                var3_4 = var2_1 + 1;
                            }
                        }
                    }
                    var6_6 = var4_3 + 2;
                    var5_5 = var1_2 - 2;
                    if (var6_6 >= this.nrow) break;
                    var4_3 = var6_6;
                    var1_2 = var5_5;
                    var2_1 = var3_4;
                } while (var5_5 >= 0);
                var2_1 = var6_6 += 3;
                var1_2 = ++var5_5;
                var4_3 = var3_4;
                if (var6_6 < this.nrow) ** GOTO lbl-1000
                var2_1 = var6_6;
                var1_2 = var5_5;
                var4_3 = var3_4;
            } while (var5_5 < this.ncol);
            if (this.array[this.nrow * this.ncol - 1] != 0) return;
            var7_7 = this.array;
            var1_2 = this.nrow;
            var2_1 = this.ncol;
            this.array[this.nrow * this.ncol - this.ncol - 2] = 1;
            var7_7[var1_2 * var2_1 - 1] = 1;
        }

        private void module(int n, int n2, int n3, int n4) {
            int n5 = n;
            int n6 = n2;
            if (n < 0) {
                n5 = n + this.nrow;
                n6 = n2 + (4 - (this.nrow + 4) % 8);
            }
            n2 = n5;
            n = n6;
            if (n6 < 0) {
                n = n6 + this.ncol;
                n2 = n5 + (4 - (this.ncol + 4) % 8);
            }
            this.array[n2 * this.ncol + n] = (short)(n3 * 8 + n4);
        }

        private void utah(int n, int n2, int n3) {
            int n4 = n - 2;
            int n5 = n2 - 2;
            this.module(n4, n5, n3, 0);
            int n6 = n2 - 1;
            this.module(n4, n6, n3, 1);
            n4 = n - 1;
            this.module(n4, n5, n3, 2);
            this.module(n4, n6, n3, 3);
            this.module(n4, n2, n3, 4);
            this.module(n, n5, n3, 5);
            this.module(n, n6, n3, 6);
            this.module(n, n2, n3, 7);
        }
    }

    static class ReedSolomon {
        private static final int[] alog;
        private static final int[] log;
        private static final int[] poly10;
        private static final int[] poly11;
        private static final int[] poly12;
        private static final int[] poly14;
        private static final int[] poly18;
        private static final int[] poly20;
        private static final int[] poly24;
        private static final int[] poly28;
        private static final int[] poly36;
        private static final int[] poly42;
        private static final int[] poly48;
        private static final int[] poly5;
        private static final int[] poly56;
        private static final int[] poly62;
        private static final int[] poly68;
        private static final int[] poly7;

        static {
            log = new int[]{0, 255, 1, 240, 2, 225, 241, 53, 3, 38, 226, 133, 242, 43, 54, 210, 4, 195, 39, 114, 227, 106, 134, 28, 243, 140, 44, 23, 55, 118, 211, 234, 5, 219, 196, 96, 40, 222, 115, 103, 228, 78, 107, 125, 135, 8, 29, 162, 244, 186, 141, 180, 45, 99, 24, 49, 56, 13, 119, 153, 212, 199, 235, 91, 6, 76, 220, 217, 197, 11, 97, 184, 41, 36, 223, 253, 116, 138, 104, 193, 229, 86, 79, 171, 108, 165, 126, 145, 136, 34, 9, 74, 30, 32, 163, 84, 245, 173, 187, 204, 142, 81, 181, 190, 46, 88, 100, 159, 25, 231, 50, 207, 57, 147, 14, 67, 120, 128, 154, 248, 213, 167, 200, 63, 236, 110, 92, 176, 7, 161, 77, 124, 221, 102, 218, 95, 198, 90, 12, 152, 98, 48, 185, 179, 42, 209, 37, 132, 224, 52, 254, 239, 117, 233, 139, 22, 105, 27, 194, 113, 230, 206, 87, 158, 80, 189, 172, 203, 109, 175, 166, 62, 127, 247, 146, 66, 137, 192, 35, 252, 10, 183, 75, 216, 31, 83, 33, 73, 164, 144, 85, 170, 246, 65, 174, 61, 188, 202, 205, 157, 143, 169, 82, 72, 182, 215, 191, 251, 47, 178, 89, 151, 101, 94, 160, 123, 26, 112, 232, 21, 51, 238, 208, 131, 58, 69, 148, 18, 15, 16, 68, 17, 121, 149, 129, 19, 155, 59, 249, 70, 214, 250, 168, 71, 201, 156, 64, 60, 237, 130, 111, 20, 93, 122, 177, 150};
            alog = new int[]{1, 2, 4, 8, 16, 32, 64, 128, 45, 90, 180, 69, 138, 57, 114, 228, 229, 231, 227, 235, 251, 219, 155, 27, 54, 108, 216, 157, 23, 46, 92, 184, 93, 186, 89, 178, 73, 146, 9, 18, 36, 72, 144, 13, 26, 52, 104, 208, 141, 55, 110, 220, 149, 7, 14, 28, 56, 112, 224, 237, 247, 195, 171, 123, 246, 193, 175, 115, 230, 225, 239, 243, 203, 187, 91, 182, 65, 130, 41, 82, 164, 101, 202, 185, 95, 190, 81, 162, 105, 210, 137, 63, 126, 252, 213, 135, 35, 70, 140, 53, 106, 212, 133, 39, 78, 156, 21, 42, 84, 168, 125, 250, 217, 159, 19, 38, 76, 152, 29, 58, 116, 232, 253, 215, 131, 43, 86, 172, 117, 234, 249, 223, 147, 11, 22, 44, 88, 176, 77, 154, 25, 50, 100, 200, 189, 87, 174, 113, 226, 233, 255, 211, 139, 59, 118, 236, 245, 199, 163, 107, 214, 129, 47, 94, 188, 85, 170, 121, 242, 201, 191, 83, 166, 97, 194, 169, 127, 254, 209, 143, 51, 102, 204, 181, 71, 142, 49, 98, 196, 165, 103, 206, 177, 79, 158, 17, 34, 68, 136, 61, 122, 244, 197, 167, 99, 198, 161, 111, 222, 145, 15, 30, 60, 120, 240, 205, 183, 67, 134, 33, 66, 132, 37, 74, 148, 5, 10, 20, 40, 80, 160, 109, 218, 153, 31, 62, 124, 248, 221, 151, 3, 6, 12, 24, 48, 96, 192, 173, 119, 238, 241, 207, 179, 75, 150, 1};
            poly5 = new int[]{228, 48, 15, 111, 62};
            poly7 = new int[]{23, 68, 144, 134, 240, 92, 254};
            poly10 = new int[]{28, 24, 185, 166, 223, 248, 116, 255, 110, 61};
            poly11 = new int[]{175, 138, 205, 12, 194, 168, 39, 245, 60, 97, 120};
            poly12 = new int[]{41, 153, 158, 91, 61, 42, 142, 213, 97, 178, 100, 242};
            poly14 = new int[]{156, 97, 192, 252, 95, 9, 157, 119, 138, 45, 18, 186, 83, 185};
            poly18 = new int[]{83, 195, 100, 39, 188, 75, 66, 61, 241, 213, 109, 129, 94, 254, 225, 48, 90, 188};
            poly20 = new int[]{15, 195, 244, 9, 233, 71, 168, 2, 188, 160, 153, 145, 253, 79, 108, 82, 27, 174, 186, 172};
            poly24 = new int[]{52, 190, 88, 205, 109, 39, 176, 21, 155, 197, 251, 223, 155, 21, 5, 172, 254, 124, 12, 181, 184, 96, 50, 193};
            poly28 = new int[]{211, 231, 43, 97, 71, 96, 103, 174, 37, 151, 170, 53, 75, 34, 249, 121, 17, 138, 110, 213, 141, 136, 120, 151, 233, 168, 93, 255};
            poly36 = new int[]{245, 127, 242, 218, 130, 250, 162, 181, 102, 120, 84, 179, 220, 251, 80, 182, 229, 18, 2, 4, 68, 33, 101, 137, 95, 119, 115, 44, 175, 184, 59, 25, 225, 98, 81, 112};
            poly42 = new int[]{77, 193, 137, 31, 19, 38, 22, 153, 247, 105, 122, 2, 245, 133, 242, 8, 175, 95, 100, 9, 167, 105, 214, 111, 57, 121, 21, 1, 253, 57, 54, 101, 248, 202, 69, 50, 150, 177, 226, 5, 9, 5};
            poly48 = new int[]{245, 132, 172, 223, 96, 32, 117, 22, 238, 133, 238, 231, 205, 188, 237, 87, 191, 106, 16, 147, 118, 23, 37, 90, 170, 205, 131, 88, 120, 100, 66, 138, 186, 240, 82, 44, 176, 87, 187, 147, 160, 175, 69, 213, 92, 253, 225, 19};
            poly56 = new int[]{175, 9, 223, 238, 12, 17, 220, 208, 100, 29, 175, 170, 230, 192, 215, 235, 150, 159, 36, 223, 38, 200, 132, 54, 228, 146, 218, 234, 117, 203, 29, 232, 144, 238, 22, 150, 201, 117, 62, 207, 164, 13, 137, 245, 127, 67, 247, 28, 155, 43, 203, 107, 233, 53, 143, 46};
            poly62 = new int[]{242, 93, 169, 50, 144, 210, 39, 118, 202, 188, 201, 189, 143, 108, 196, 37, 185, 112, 134, 230, 245, 63, 197, 190, 250, 106, 185, 221, 175, 64, 114, 71, 161, 44, 147, 6, 27, 218, 51, 63, 87, 10, 40, 130, 188, 17, 163, 31, 176, 170, 4, 107, 232, 7, 94, 166, 224, 124, 86, 47, 11, 204};
            poly68 = new int[]{220, 228, 173, 89, 251, 149, 159, 56, 89, 33, 147, 244, 154, 36, 73, 127, 213, 136, 248, 180, 234, 197, 158, 177, 68, 122, 93, 213, 15, 160, 227, 236, 66, 139, 153, 185, 202, 167, 179, 25, 220, 232, 96, 210, 231, 136, 223, 239, 181, 241, 59, 52, 172, 25, 49, 232, 211, 189, 64, 54, 108, 153, 132, 63, 96, 103, 82, 186};
        }

        ReedSolomon() {
        }

        static void generateECC(byte[] arrby, int n, int n2, int n3) {
            int n4 = (n + 2) / n2;
            byte[] arrby2 = new byte[256];
            byte[] arrby3 = new byte[256];
            int[] arrn = ReedSolomon.getPoly(n3);
            for (n2 = 0; n2 < n4; ++n2) {
                int n5 = n2;
                int n6 = 0;
                while (n5 < n) {
                    arrby2[n6] = arrby[n5];
                    n5 += n4;
                    ++n6;
                }
                ReedSolomon.reedSolomonBlock(arrby2, n6, arrby3, n3, arrn);
                n5 = n2;
                n6 = 0;
                while (n5 < n3 * n4) {
                    arrby[n + n5] = arrby3[n6];
                    n5 += n4;
                    ++n6;
                }
            }
        }

        private static int[] getPoly(int n) {
            switch (n) {
                default: {
                    return null;
                }
                case 68: {
                    return poly68;
                }
                case 62: {
                    return poly62;
                }
                case 56: {
                    return poly56;
                }
                case 48: {
                    return poly48;
                }
                case 42: {
                    return poly42;
                }
                case 36: {
                    return poly36;
                }
                case 28: {
                    return poly28;
                }
                case 24: {
                    return poly24;
                }
                case 20: {
                    return poly20;
                }
                case 18: {
                    return poly18;
                }
                case 14: {
                    return poly14;
                }
                case 12: {
                    return poly12;
                }
                case 11: {
                    return poly11;
                }
                case 10: {
                    return poly10;
                }
                case 7: {
                    return poly7;
                }
                case 5: 
            }
            return poly5;
        }

        private static void reedSolomonBlock(byte[] arrby, int n, byte[] arrby2, int n2, int[] arrn) {
            int n3;
            for (n3 = 0; n3 <= n2; ++n3) {
                arrby2[n3] = 0;
            }
            for (n3 = 0; n3 < n; ++n3) {
                int n4 = (arrby2[0] ^ arrby[n3]) & 255;
                int n5 = 0;
                while (n5 < n2) {
                    int n6 = n5 + 1;
                    byte by = arrby2[n6];
                    byte by2 = n4 == 0 ? (byte)0 : (byte)alog[(log[n4] + log[arrn[n2 - n5 - 1]]) % 255];
                    arrby2[n5] = (byte)(by ^ by2);
                    n5 = n6;
                }
            }
        }
    }

}

