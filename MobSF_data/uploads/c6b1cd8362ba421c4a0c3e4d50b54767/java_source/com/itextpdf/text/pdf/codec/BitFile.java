/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf.codec;

import java.io.IOException;
import java.io.OutputStream;

public class BitFile {
    int bitsLeft_;
    boolean blocks_ = false;
    byte[] buffer_;
    int index_;
    OutputStream output_;

    public BitFile(OutputStream outputStream, boolean bl) {
        this.output_ = outputStream;
        this.blocks_ = bl;
        this.buffer_ = new byte[256];
        this.index_ = 0;
        this.bitsLeft_ = 8;
    }

    public void flush() throws IOException {
        int n = this.index_;
        int n2 = this.bitsLeft_ == 8 ? 0 : 1;
        if ((n2 = n + n2) > 0) {
            if (this.blocks_) {
                this.output_.write(n2);
            }
            this.output_.write(this.buffer_, 0, n2);
            this.buffer_[0] = 0;
            this.index_ = 0;
            this.bitsLeft_ = 8;
        }
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    public void writeBits(int n, int n2) throws IOException {
        int n3 = n2;
        n2 = n;
        do {
            byte[] arrby;
            int n4;
            if (this.index_ == 254 && this.bitsLeft_ == 0 || this.index_ > 254) {
                if (this.blocks_) {
                    this.output_.write(255);
                }
                this.output_.write(this.buffer_, 0, 255);
                this.buffer_[0] = 0;
                this.index_ = 0;
                this.bitsLeft_ = 8;
            }
            if (n3 <= this.bitsLeft_) {
                if (this.blocks_) {
                    arrby = this.buffer_;
                    n = this.index_;
                    n4 = arrby[n];
                    arrby[n] = (byte)((n2 & (1 << n3) - 1) << 8 - this.bitsLeft_ | n4);
                    this.bitsLeft_ -= n3;
                    do {
                        return;
                        break;
                    } while (true);
                }
                arrby = this.buffer_;
                n = this.index_;
                n4 = arrby[n];
                arrby[n] = (byte)((n2 & (1 << n3) - 1) << this.bitsLeft_ - n3 | n4);
                this.bitsLeft_ -= n3;
                return;
            }
            if (this.blocks_) {
                arrby = this.buffer_;
                n = this.index_;
                arrby[n] = (byte)(arrby[n] | ((1 << this.bitsLeft_) - 1 & n2) << 8 - this.bitsLeft_);
                n = this.bitsLeft_;
                n2 >>= this.bitsLeft_;
                n = n3 - this.bitsLeft_;
                arrby = this.buffer_;
                this.index_ = n3 = this.index_ + 1;
                arrby[n3] = 0;
                this.bitsLeft_ = 8;
            } else {
                n = this.bitsLeft_;
                n4 = this.bitsLeft_;
                arrby = this.buffer_;
                int n5 = this.index_;
                arrby[n5] = (byte)(n2 >>> n3 - n & (1 << n4) - 1 | arrby[n5]);
                n = n3 - this.bitsLeft_;
                n3 = this.bitsLeft_;
                arrby = this.buffer_;
                this.index_ = n3 = this.index_ + 1;
                arrby[n3] = 0;
                this.bitsLeft_ = 8;
            }
            n3 = n;
        } while (n != 0);
    }
}

