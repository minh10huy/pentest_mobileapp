/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf;

import com.itextpdf.text.DocWriter;
import com.itextpdf.text.Document;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.pdf.BadPdfFormatException;
import com.itextpdf.text.pdf.ByteBuffer;
import com.itextpdf.text.pdf.PdfContentByte;
import com.itextpdf.text.pdf.PdfName;
import com.itextpdf.text.pdf.PdfNumber;
import com.itextpdf.text.pdf.PdfObject;
import com.itextpdf.text.pdf.PdfStream;
import com.itextpdf.text.pdf.PdfWriter;
import java.io.ByteArrayOutputStream;
import java.io.OutputStream;
import java.util.zip.Deflater;
import java.util.zip.DeflaterOutputStream;

class PdfContents
extends PdfStream {
    static final byte[] RESTORESTATE;
    static final byte[] ROTATE180;
    static final byte[] ROTATE270;
    static final byte[] ROTATE90;
    static final byte[] ROTATEFINAL;
    static final byte[] SAVESTATE;

    static {
        SAVESTATE = DocWriter.getISOBytes("q\n");
        RESTORESTATE = DocWriter.getISOBytes("Q\n");
        ROTATE90 = DocWriter.getISOBytes("0 1 -1 0 ");
        ROTATE180 = DocWriter.getISOBytes("-1 0 0 -1 ");
        ROTATE270 = DocWriter.getISOBytes("0 -1 1 0 ");
        ROTATEFINAL = DocWriter.getISOBytes(" cm\n");
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    PdfContents(PdfContentByte pdfContentByte, PdfContentByte pdfContentByte2, PdfContentByte pdfContentByte3, PdfContentByte pdfContentByte4, Rectangle rectangle) throws BadPdfFormatException {
        block18 : {
            Deflater deflater = null;
            try {
                OutputStream outputStream;
                this.streamBytes = new ByteArrayOutputStream();
                if (Document.compress) {
                    this.compressed = true;
                    if (pdfContentByte3 != null) {
                        this.compressionLevel = pdfContentByte3.getPdfWriter().getCompressionLevel();
                    } else if (pdfContentByte2 != null) {
                        this.compressionLevel = pdfContentByte2.getPdfWriter().getCompressionLevel();
                    }
                    deflater = new Deflater(this.compressionLevel);
                    outputStream = new DeflaterOutputStream((OutputStream)this.streamBytes, deflater);
                } else {
                    outputStream = this.streamBytes;
                }
                int n = rectangle.getRotation();
                if (n != 90) {
                    if (n != 180) {
                        if (n == 270) {
                            outputStream.write(ROTATE270);
                            outputStream.write(48);
                            outputStream.write(32);
                            outputStream.write(DocWriter.getISOBytes(ByteBuffer.formatDouble(rectangle.getRight())));
                            outputStream.write(ROTATEFINAL);
                        }
                    } else {
                        outputStream.write(ROTATE180);
                        outputStream.write(DocWriter.getISOBytes(ByteBuffer.formatDouble(rectangle.getRight())));
                        outputStream.write(32);
                        outputStream.write(DocWriter.getISOBytes(ByteBuffer.formatDouble(rectangle.getTop())));
                        outputStream.write(ROTATEFINAL);
                    }
                } else {
                    outputStream.write(ROTATE90);
                    outputStream.write(DocWriter.getISOBytes(ByteBuffer.formatDouble(rectangle.getTop())));
                    outputStream.write(32);
                    outputStream.write(48);
                    outputStream.write(ROTATEFINAL);
                }
                if (pdfContentByte.size() > 0) {
                    outputStream.write(SAVESTATE);
                    pdfContentByte.getInternalBuffer().writeTo(outputStream);
                    outputStream.write(RESTORESTATE);
                }
                if (pdfContentByte2.size() > 0) {
                    outputStream.write(SAVESTATE);
                    pdfContentByte2.getInternalBuffer().writeTo(outputStream);
                    outputStream.write(RESTORESTATE);
                }
                if (pdfContentByte3 != null) {
                    outputStream.write(SAVESTATE);
                    pdfContentByte3.getInternalBuffer().writeTo(outputStream);
                    outputStream.write(RESTORESTATE);
                }
                if (pdfContentByte4.size() > 0) {
                    pdfContentByte4.getInternalBuffer().writeTo(outputStream);
                }
                outputStream.close();
                if (deflater == null) break block18;
                deflater.end();
            }
            catch (Exception exception) {
                throw new BadPdfFormatException(exception.getMessage());
            }
        }
        this.put(PdfName.LENGTH, new PdfNumber(this.streamBytes.size()));
        if (this.compressed) {
            this.put(PdfName.FILTER, PdfName.FLATEDECODE);
        }
    }
}

