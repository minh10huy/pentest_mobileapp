/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  org.apache.jcp.xml.dsig.internal.dom.DOMKeyInfoFactory
 *  org.apache.jcp.xml.dsig.internal.dom.DOMReference
 *  org.apache.jcp.xml.dsig.internal.dom.DOMSignedInfo
 *  org.apache.jcp.xml.dsig.internal.dom.DOMUtils
 *  org.apache.jcp.xml.dsig.internal.dom.DOMXMLSignature
 *  org.apache.jcp.xml.dsig.internal.dom.XMLDSigRI
 *  org.apache.xml.security.utils.Base64
 */
package com.itextpdf.text.pdf.security;

import com.itextpdf.text.DocumentException;
import com.itextpdf.text.error_messages.MessageLocalization;
import com.itextpdf.text.pdf.XmlSignatureAppearance;
import com.itextpdf.text.pdf.security.ExternalSignature;
import com.itextpdf.text.pdf.security.XmlLocator;
import com.itextpdf.text.pdf.security.XpathConstructor;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.StringWriter;
import java.io.Writer;
import java.math.BigInteger;
import java.security.GeneralSecurityException;
import java.security.Key;
import java.security.MessageDigest;
import java.security.Provider;
import java.security.PublicKey;
import java.security.cert.Certificate;
import java.security.cert.X509Certificate;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Collections;
import java.util.Date;
import java.util.List;
import java.util.UUID;
import javax.security.auth.x500.X500Principal;
import javax.xml.crypto.XMLCryptoContext;
import javax.xml.crypto.dom.DOMCryptoContext;
import javax.xml.crypto.dom.DOMStructure;
import javax.xml.crypto.dsig.CanonicalizationMethod;
import javax.xml.crypto.dsig.DigestMethod;
import javax.xml.crypto.dsig.Reference;
import javax.xml.crypto.dsig.SignatureMethod;
import javax.xml.crypto.dsig.SignedInfo;
import javax.xml.crypto.dsig.Transform;
import javax.xml.crypto.dsig.XMLObject;
import javax.xml.crypto.dsig.XMLSignContext;
import javax.xml.crypto.dsig.XMLSignature;
import javax.xml.crypto.dsig.XMLSignatureFactory;
import javax.xml.crypto.dsig.dom.DOMSignContext;
import javax.xml.crypto.dsig.keyinfo.KeyInfo;
import javax.xml.crypto.dsig.keyinfo.KeyValue;
import javax.xml.crypto.dsig.keyinfo.X509Data;
import javax.xml.crypto.dsig.spec.C14NMethodParameterSpec;
import javax.xml.crypto.dsig.spec.DigestMethodParameterSpec;
import javax.xml.crypto.dsig.spec.SignatureMethodParameterSpec;
import javax.xml.crypto.dsig.spec.TransformParameterSpec;
import javax.xml.crypto.dsig.spec.XPathFilter2ParameterSpec;
import javax.xml.crypto.dsig.spec.XPathType;
import javax.xml.transform.Result;
import javax.xml.transform.Source;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import org.apache.jcp.xml.dsig.internal.dom.DOMKeyInfoFactory;
import org.apache.jcp.xml.dsig.internal.dom.DOMReference;
import org.apache.jcp.xml.dsig.internal.dom.DOMSignedInfo;
import org.apache.jcp.xml.dsig.internal.dom.DOMUtils;
import org.apache.jcp.xml.dsig.internal.dom.DOMXMLSignature;
import org.apache.jcp.xml.dsig.internal.dom.XMLDSigRI;
import org.apache.xml.security.utils.Base64;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.w3c.dom.Text;

public class MakeXmlSignature {
    private static XMLSignatureFactory createSignatureFactory() {
        return XMLSignatureFactory.getInstance("DOM", (Provider)new XMLDSigRI());
    }

    private static Element findElement(NodeList nodeList, String string2) {
        for (int i = nodeList.getLength() - 1; i >= 0; --i) {
            Node node = nodeList.item(i);
            if (node.getNodeType() != 1 || !node.getLocalName().equals(string2)) continue;
            return (Element)node;
        }
        return null;
    }

    private static Reference generateContentReference(XMLSignatureFactory xMLSignatureFactory, XmlSignatureAppearance object, String string2) throws GeneralSecurityException {
        DigestMethod digestMethod = xMLSignatureFactory.newDigestMethod("http://www.w3.org/2000/09/xmldsig#sha1", null);
        ArrayList<Transform> arrayList = new ArrayList<Transform>();
        arrayList.add(xMLSignatureFactory.newTransform("http://www.w3.org/2000/09/xmldsig#enveloped-signature", (TransformParameterSpec)null));
        object = object.getXpathConstructor();
        if (object != null && object.getXpathExpression().length() > 0) {
            arrayList.add(xMLSignatureFactory.newTransform("http://www.w3.org/2002/06/xmldsig-filter2", new XPathFilter2ParameterSpec(Collections.singletonList(new XPathType(object.getXpathExpression(), XPathType.Filter.INTERSECT)))));
        }
        return xMLSignatureFactory.newReference("", digestMethod, arrayList, null, string2);
    }

    private static Reference generateCustomReference(XMLSignatureFactory xMLSignatureFactory, String string2, String string3, String string4) throws GeneralSecurityException {
        return xMLSignatureFactory.newReference(string2, xMLSignatureFactory.newDigestMethod("http://www.w3.org/2000/09/xmldsig#sha1", null), null, string3, string4);
    }

    private static KeyInfo generateKeyInfo(PublicKey publicKey) throws GeneralSecurityException {
        DOMKeyInfoFactory dOMKeyInfoFactory = new DOMKeyInfoFactory();
        return dOMKeyInfoFactory.newKeyInfo(Collections.singletonList(dOMKeyInfoFactory.newKeyValue(publicKey)));
    }

    private static KeyInfo generateKeyInfo(Certificate[] object, XmlSignatureAppearance xmlSignatureAppearance) {
        object = object[0];
        xmlSignatureAppearance.setCertificate((Certificate)object);
        xmlSignatureAppearance = new DOMKeyInfoFactory();
        return xmlSignatureAppearance.newKeyInfo(Collections.singletonList(xmlSignatureAppearance.newX509Data(Collections.singletonList(object))));
    }

    private static XMLObject generateXadesObject(XMLSignatureFactory xMLSignatureFactory, XmlSignatureAppearance object, String object2, String object3, String object4, String[] object5) throws GeneralSecurityException {
        Object object6 = MessageDigest.getInstance("SHA1");
        Object object7 = object.getCertificate();
        Document document = object.getXmlLocator().getDocument();
        Element element = document.createElementNS("http://uri.etsi.org/01903/v1.3.2#", "xades:QualifyingProperties");
        Object object8 = new StringBuilder();
        object8.append("#");
        object8.append((String)object2);
        element.setAttribute("Target", object8.toString());
        object2 = document.createElementNS("http://uri.etsi.org/01903/v1.3.2#", "xades:SignedProperties");
        object2.setAttribute("Id", (String)object4);
        object2.setIdAttribute("Id", true);
        object4 = document.createElementNS("http://uri.etsi.org/01903/v1.3.2#", "xades:SignedSignatureProperties");
        object8 = document.createElementNS("http://uri.etsi.org/01903/v1.3.2#", "xades:SigningTime");
        Object object9 = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssZ").format(object.getSignDate().getTime());
        object8.appendChild(document.createTextNode(object9.substring(0, object9.length() - 2).concat(":").concat(object9.substring(object9.length() - 2))));
        object4.appendChild((Node)object8);
        object8 = document.createElementNS("http://uri.etsi.org/01903/v1.3.2#", "xades:SigningCertificate");
        object9 = document.createElementNS("http://uri.etsi.org/01903/v1.3.2#", "xades:Cert");
        Element element2 = document.createElementNS("http://uri.etsi.org/01903/v1.3.2#", "xades:CertDigest");
        Element element3 = document.createElementNS("http://www.w3.org/2000/09/xmldsig#", "DigestMethod");
        element3.setAttribute("Algorithm", "http://www.w3.org/2000/09/xmldsig#sha1");
        element2.appendChild(element3);
        element3 = document.createElementNS("http://www.w3.org/2000/09/xmldsig#", "DigestValue");
        element3.appendChild(document.createTextNode(Base64.encode((byte[])object6.digest(object7.getEncoded()))));
        element2.appendChild(element3);
        object9.appendChild(element2);
        if (object7 instanceof X509Certificate) {
            element2 = document.createElementNS("http://uri.etsi.org/01903/v1.3.2#", "xades:IssuerSerial");
            element3 = document.createElementNS("http://www.w3.org/2000/09/xmldsig#", "X509IssuerName");
            object7 = (X509Certificate)object7;
            element3.appendChild(document.createTextNode(MakeXmlSignature.getX509IssuerName((X509Certificate)object7)));
            element2.appendChild(element3);
            element3 = document.createElementNS("http://www.w3.org/2000/09/xmldsig#", "X509SerialNumber");
            element3.appendChild(document.createTextNode(MakeXmlSignature.getX509SerialNumber((X509Certificate)object7)));
            element2.appendChild(element3);
            object9.appendChild(element2);
        }
        object8.appendChild((Node)object9);
        object4.appendChild((Node)object8);
        if (object5 != null) {
            object7 = document.createElementNS("http://uri.etsi.org/01903/v1.3.2#", "xades:SignaturePolicyIdentifier");
            object8 = document.createElementNS("http://uri.etsi.org/01903/v1.3.2#", "xades:SignaturePolicyId");
            object9 = document.createElementNS("http://uri.etsi.org/01903/v1.3.2#", "xades:SigPolicyId");
            element2 = document.createElementNS("http://uri.etsi.org/01903/v1.3.2#", "xades:Identifier");
            element2.appendChild(document.createTextNode(object5[0]));
            element2.setAttribute("Qualifier", "OIDAsURN");
            object9.appendChild(element2);
            element2 = document.createElementNS("http://uri.etsi.org/01903/v1.3.2#", "xades:Description");
            element2.appendChild(document.createTextNode((String)object5[1]));
            object9.appendChild(element2);
            object8.appendChild((Node)object9);
            object5 = document.createElementNS("http://uri.etsi.org/01903/v1.3.2#", "xades:SigPolicyHash");
            element2 = document.createElementNS("http://www.w3.org/2000/09/xmldsig#", "DigestMethod");
            element2.setAttribute("Algorithm", "http://www.w3.org/2000/09/xmldsig#sha1");
            object5.appendChild(element2);
            element2 = document.createElementNS("http://www.w3.org/2000/09/xmldsig#", "DigestValue");
            element2.appendChild(document.createTextNode(Base64.encode((byte[])object6.digest(MakeXmlSignature.getByteArrayOfNode((Node)object9)))));
            object5.appendChild(element2);
            object8.appendChild((Node)object5);
            object7.appendChild((Node)object8);
            object4.appendChild((Node)object7);
        }
        object2.appendChild((Node)object4);
        object4 = document.createElement("xades:SignedDataObjectProperties");
        object5 = document.createElement("xades:DataObjectFormat");
        object6 = new StringBuilder();
        object6.append("#");
        object6.append((String)object3);
        object5.setAttribute("ObjectReference", object6.toString());
        object3 = object.getDescription();
        if (object3 != null) {
            object6 = document.createElement("xades:Description");
            object6.appendChild(document.createTextNode((String)object3));
            object5.appendChild((Node)object6);
        }
        object3 = document.createElement("xades:MimeType");
        object3.appendChild(document.createTextNode(object.getMimeType()));
        object5.appendChild((Node)object3);
        object = object.getXmlLocator().getEncoding();
        if (object != null) {
            object3 = document.createElement("xades:Encoding");
            object3.appendChild(document.createTextNode((String)object));
            object5.appendChild((Node)object3);
        }
        object4.appendChild((Node)object5);
        object2.appendChild((Node)object4);
        element.appendChild((Node)object2);
        return xMLSignatureFactory.newXMLObject(Collections.singletonList(new DOMStructure(element)), null, null, null);
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    private static byte[] getByteArrayOfNode(Node arrby) {
        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        try {
            StreamResult streamResult = new StreamResult(new StringWriter());
            Transformer transformer = TransformerFactory.newInstance().newTransformer();
            transformer.setOutputProperty("omit-xml-declaration", "yes");
            transformer.transform(new DOMSource((Node)arrby), streamResult);
            return streamResult.getWriter().toString().getBytes();
        }
        catch (Exception exception) {
            return byteArrayOutputStream.toByteArray();
        }
    }

    private static String getRandomId() {
        return UUID.randomUUID().toString().substring(24);
    }

    private static String getX509IssuerName(X509Certificate x509Certificate) {
        return x509Certificate.getIssuerX500Principal().toString();
    }

    private static String getX509SerialNumber(X509Certificate x509Certificate) {
        return x509Certificate.getSerialNumber().toString();
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    private static void sign(XMLSignatureFactory object, ExternalSignature externalSignature, XmlLocator xmlLocator, DOMSignedInfo dOMSignedInfo, XMLObject object2, KeyInfo object3, String string2) throws DocumentException {
        Document document = xmlLocator.getDocument();
        DOMSignContext dOMSignContext = new DOMSignContext(EmptyKey.getInstance(), (Node)document.getDocumentElement());
        object2 = object2 != null ? Collections.singletonList(object2) : null;
        object2 = (DOMXMLSignature)object.newXMLSignature((SignedInfo)dOMSignedInfo, (KeyInfo)object3, (List)object2, string2, null);
        object = new ByteArrayOutputStream();
        try {
            object2.marshal(dOMSignContext.getParent(), dOMSignContext.getNextSibling(), DOMUtils.getSignaturePrefix((XMLCryptoContext)dOMSignContext), (DOMCryptoContext)dOMSignContext);
            object2 = MakeXmlSignature.findElement(document.getDocumentElement().getChildNodes(), "Signature");
            if (string2 != null) {
                object2.setAttributeNS("http://www.w3.org/2000/xmlns/", "xmlns:xades", "http://uri.etsi.org/01903/v1.3.2#");
            }
            object3 = dOMSignedInfo.getReferences();
            for (int i = 0; i < object3.size(); ++i) {
                ((DOMReference)object3.get(i)).digest((XMLSignContext)dOMSignContext);
            }
            dOMSignedInfo.canonicalize((XMLCryptoContext)dOMSignContext, (ByteArrayOutputStream)object);
            MakeXmlSignature.findElement(object2.getChildNodes(), "SignatureValue").appendChild(document.createTextNode(Base64.encode((byte[])externalSignature.sign(object.toByteArray()))));
            xmlLocator.setDocument(document);
            return;
        }
        catch (Exception exception) {
            throw new DocumentException(exception);
        }
    }

    public static void signXades(XmlSignatureAppearance xmlSignatureAppearance, ExternalSignature externalSignature, Certificate[] object, boolean bl) throws GeneralSecurityException, DocumentException, IOException {
        MakeXmlSignature.verifyArguments(xmlSignatureAppearance, externalSignature);
        String string2 = externalSignature.getEncryptionAlgorithm().equals("RSA") ? "http://www.w3.org/2000/09/xmldsig#rsa-sha1" : (externalSignature.getEncryptionAlgorithm().equals("DSA") ? "http://www.w3.org/2000/09/xmldsig#dsa-sha1" : null);
        CharSequence charSequence = new StringBuilder();
        charSequence.append("Reference-");
        charSequence.append(MakeXmlSignature.getRandomId());
        Object object2 = charSequence.toString();
        charSequence = new StringBuilder();
        charSequence.append("SignedProperties-");
        charSequence.append(MakeXmlSignature.getRandomId());
        Object object3 = charSequence.toString();
        charSequence = new StringBuilder();
        charSequence.append("Signature-");
        charSequence.append(MakeXmlSignature.getRandomId());
        charSequence = charSequence.toString();
        XMLSignatureFactory xMLSignatureFactory = MakeXmlSignature.createSignatureFactory();
        KeyInfo keyInfo = MakeXmlSignature.generateKeyInfo((Certificate[])object, xmlSignatureAppearance);
        if (bl) {
            object = new String[2];
            if (string2.equals("http://www.w3.org/2000/09/xmldsig#rsa-sha1")) {
                object[0] = "urn:oid:1.2.840.113549.1.1.5";
                object[1] = "RSA (PKCS #1 v1.5) with SHA-1 signature";
            } else {
                object[0] = "urn:oid:1.2.840.10040.4.3";
                object[1] = "ANSI X9.57 DSA signature generated with SHA-1 hash (DSA x9.30)";
            }
        } else {
            object = null;
        }
        object = MakeXmlSignature.generateXadesObject(xMLSignatureFactory, xmlSignatureAppearance, (String)charSequence, (String)object2, (String)object3, (String[])object);
        object2 = MakeXmlSignature.generateContentReference(xMLSignatureFactory, xmlSignatureAppearance, (String)object2);
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("#");
        stringBuilder.append((String)object3);
        object3 = Arrays.asList(MakeXmlSignature.generateCustomReference(xMLSignatureFactory, stringBuilder.toString(), "http://uri.etsi.org/01903#SignedProperties", null), object2);
        string2 = (DOMSignedInfo)xMLSignatureFactory.newSignedInfo(xMLSignatureFactory.newCanonicalizationMethod("http://www.w3.org/TR/2001/REC-xml-c14n-20010315", (C14NMethodParameterSpec)null), xMLSignatureFactory.newSignatureMethod(string2, null), (List)object3, null);
        MakeXmlSignature.sign(xMLSignatureFactory, externalSignature, xmlSignatureAppearance.getXmlLocator(), (DOMSignedInfo)string2, (XMLObject)object, keyInfo, (String)charSequence);
        xmlSignatureAppearance.close();
    }

    public static void signXadesBes(XmlSignatureAppearance xmlSignatureAppearance, ExternalSignature externalSignature, Certificate[] arrcertificate) throws GeneralSecurityException, DocumentException, IOException {
        MakeXmlSignature.signXades(xmlSignatureAppearance, externalSignature, arrcertificate, false);
    }

    public static void signXadesEpes(XmlSignatureAppearance xmlSignatureAppearance, ExternalSignature externalSignature, Certificate[] arrcertificate) throws GeneralSecurityException, DocumentException, IOException {
        MakeXmlSignature.signXades(xmlSignatureAppearance, externalSignature, arrcertificate, true);
    }

    public static void signXmlDSig(XmlSignatureAppearance xmlSignatureAppearance, ExternalSignature externalSignature, PublicKey publicKey) throws GeneralSecurityException, DocumentException, IOException {
        MakeXmlSignature.signXmlDSig(xmlSignatureAppearance, externalSignature, MakeXmlSignature.generateKeyInfo(publicKey));
    }

    public static void signXmlDSig(XmlSignatureAppearance xmlSignatureAppearance, ExternalSignature externalSignature, KeyInfo keyInfo) throws GeneralSecurityException, IOException, DocumentException {
        MakeXmlSignature.verifyArguments(xmlSignatureAppearance, externalSignature);
        XMLSignatureFactory xMLSignatureFactory = MakeXmlSignature.createSignatureFactory();
        Reference reference = MakeXmlSignature.generateContentReference(xMLSignatureFactory, xmlSignatureAppearance, null);
        String string2 = externalSignature.getEncryptionAlgorithm().equals("RSA") ? "http://www.w3.org/2000/09/xmldsig#rsa-sha1" : (externalSignature.getEncryptionAlgorithm().equals("DSA") ? "http://www.w3.org/2000/09/xmldsig#dsa-sha1" : null);
        string2 = (DOMSignedInfo)xMLSignatureFactory.newSignedInfo(xMLSignatureFactory.newCanonicalizationMethod("http://www.w3.org/TR/2001/REC-xml-c14n-20010315", (C14NMethodParameterSpec)null), xMLSignatureFactory.newSignatureMethod(string2, null), Collections.singletonList(reference));
        MakeXmlSignature.sign(xMLSignatureFactory, externalSignature, xmlSignatureAppearance.getXmlLocator(), (DOMSignedInfo)string2, null, keyInfo, null);
        xmlSignatureAppearance.close();
    }

    public static void signXmlDSig(XmlSignatureAppearance xmlSignatureAppearance, ExternalSignature externalSignature, Certificate[] arrcertificate) throws DocumentException, GeneralSecurityException, IOException {
        MakeXmlSignature.signXmlDSig(xmlSignatureAppearance, externalSignature, MakeXmlSignature.generateKeyInfo(arrcertificate, xmlSignatureAppearance));
    }

    private static void verifyArguments(XmlSignatureAppearance xmlSignatureAppearance, ExternalSignature externalSignature) throws DocumentException {
        if (xmlSignatureAppearance.getXmlLocator() == null) {
            throw new DocumentException(MessageLocalization.getComposedMessage("xmllocator.cannot.be.null", new Object[0]));
        }
        if (!externalSignature.getHashAlgorithm().equals("SHA1")) {
            throw new UnsupportedOperationException(MessageLocalization.getComposedMessage("support.only.sha1.hash.algorithm", new Object[0]));
        }
        if (!externalSignature.getEncryptionAlgorithm().equals("RSA") && !externalSignature.getEncryptionAlgorithm().equals("DSA")) {
            throw new UnsupportedOperationException(MessageLocalization.getComposedMessage("support.only.rsa.and.dsa.algorithms", new Object[0]));
        }
    }

    private static class EmptyKey
    implements Key {
        private static EmptyKey instance = new EmptyKey();

        private EmptyKey() {
        }

        public static EmptyKey getInstance() {
            return instance;
        }

        @Override
        public String getAlgorithm() {
            return null;
        }

        @Override
        public byte[] getEncoded() {
            return new byte[0];
        }

        @Override
        public String getFormat() {
            return null;
        }
    }

}

