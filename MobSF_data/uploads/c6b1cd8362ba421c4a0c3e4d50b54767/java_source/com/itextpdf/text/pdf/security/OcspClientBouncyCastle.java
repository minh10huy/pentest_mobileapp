/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  org.spongycastle.asn1.ASN1ObjectIdentifier
 *  org.spongycastle.asn1.ASN1OctetString
 *  org.spongycastle.asn1.DEROctetString
 *  org.spongycastle.asn1.ocsp.OCSPObjectIdentifiers
 *  org.spongycastle.asn1.x509.AlgorithmIdentifier
 *  org.spongycastle.asn1.x509.Extension
 *  org.spongycastle.asn1.x509.Extensions
 *  org.spongycastle.cert.X509CertificateHolder
 *  org.spongycastle.cert.jcajce.JcaX509CertificateHolder
 *  org.spongycastle.cert.ocsp.BasicOCSPResp
 *  org.spongycastle.cert.ocsp.CertificateID
 *  org.spongycastle.cert.ocsp.CertificateStatus
 *  org.spongycastle.cert.ocsp.OCSPException
 *  org.spongycastle.cert.ocsp.OCSPReq
 *  org.spongycastle.cert.ocsp.OCSPReqBuilder
 *  org.spongycastle.cert.ocsp.OCSPResp
 *  org.spongycastle.cert.ocsp.SingleResp
 *  org.spongycastle.jce.provider.BouncyCastleProvider
 *  org.spongycastle.ocsp.RevokedStatus
 *  org.spongycastle.operator.DigestCalculator
 *  org.spongycastle.operator.DigestCalculatorProvider
 *  org.spongycastle.operator.OperatorException
 *  org.spongycastle.operator.jcajce.JcaDigestCalculatorProviderBuilder
 */
package com.itextpdf.text.pdf.security;

import com.itextpdf.text.error_messages.MessageLocalization;
import com.itextpdf.text.io.StreamUtil;
import com.itextpdf.text.log.Level;
import com.itextpdf.text.log.Logger;
import com.itextpdf.text.log.LoggerFactory;
import com.itextpdf.text.pdf.PdfEncryption;
import com.itextpdf.text.pdf.security.CertificateUtil;
import com.itextpdf.text.pdf.security.OCSPVerifier;
import com.itextpdf.text.pdf.security.OcspClient;
import java.io.BufferedOutputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.math.BigInteger;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLConnection;
import java.security.GeneralSecurityException;
import java.security.Provider;
import java.security.Security;
import java.security.cert.CertificateEncodingException;
import java.security.cert.X509Certificate;
import org.spongycastle.asn1.ASN1ObjectIdentifier;
import org.spongycastle.asn1.ASN1OctetString;
import org.spongycastle.asn1.DEROctetString;
import org.spongycastle.asn1.ocsp.OCSPObjectIdentifiers;
import org.spongycastle.asn1.x509.AlgorithmIdentifier;
import org.spongycastle.asn1.x509.Extension;
import org.spongycastle.asn1.x509.Extensions;
import org.spongycastle.cert.X509CertificateHolder;
import org.spongycastle.cert.jcajce.JcaX509CertificateHolder;
import org.spongycastle.cert.ocsp.BasicOCSPResp;
import org.spongycastle.cert.ocsp.CertificateID;
import org.spongycastle.cert.ocsp.CertificateStatus;
import org.spongycastle.cert.ocsp.OCSPException;
import org.spongycastle.cert.ocsp.OCSPReq;
import org.spongycastle.cert.ocsp.OCSPReqBuilder;
import org.spongycastle.cert.ocsp.OCSPResp;
import org.spongycastle.cert.ocsp.SingleResp;
import org.spongycastle.jce.provider.BouncyCastleProvider;
import org.spongycastle.ocsp.RevokedStatus;
import org.spongycastle.operator.DigestCalculator;
import org.spongycastle.operator.DigestCalculatorProvider;
import org.spongycastle.operator.OperatorException;
import org.spongycastle.operator.jcajce.JcaDigestCalculatorProviderBuilder;

public class OcspClientBouncyCastle
implements OcspClient {
    private static final Logger LOGGER = LoggerFactory.getLogger(OcspClientBouncyCastle.class);
    private final OCSPVerifier verifier;

    @Deprecated
    public OcspClientBouncyCastle() {
        this.verifier = null;
    }

    public OcspClientBouncyCastle(OCSPVerifier oCSPVerifier) {
        this.verifier = oCSPVerifier;
    }

    private static OCSPReq generateOCSPRequest(X509Certificate x509Certificate, BigInteger bigInteger) throws OCSPException, IOException, OperatorException, CertificateEncodingException {
        Security.addProvider((Provider)new BouncyCastleProvider());
        x509Certificate = new CertificateID(new JcaDigestCalculatorProviderBuilder().build().get(CertificateID.HASH_SHA1), (X509CertificateHolder)new JcaX509CertificateHolder(x509Certificate), bigInteger);
        bigInteger = new OCSPReqBuilder();
        bigInteger.addRequest((CertificateID)x509Certificate);
        bigInteger.setRequestExtensions(new Extensions(new Extension[]{new Extension(OCSPObjectIdentifiers.id_pkix_ocsp_nonce, false, (ASN1OctetString)new DEROctetString(new DEROctetString(PdfEncryption.createDocumentId()).getEncoded()))}));
        return bigInteger.build();
    }

    private OCSPResp getOcspResponse(X509Certificate arrby, X509Certificate object, String object2) throws GeneralSecurityException, OCSPException, IOException, OperatorException {
        if (arrby != null) {
            if (object == null) {
                return null;
            }
            String string2 = object2;
            if (object2 == null) {
                string2 = CertificateUtil.getOCSPURL((X509Certificate)arrby);
            }
            if (string2 == null) {
                return null;
            }
            object2 = LOGGER;
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("Getting OCSP from ");
            stringBuilder.append(string2);
            object2.info(stringBuilder.toString());
            arrby = OcspClientBouncyCastle.generateOCSPRequest((X509Certificate)object, arrby.getSerialNumber()).getEncoded();
            object = (HttpURLConnection)new URL(string2).openConnection();
            object.setRequestProperty("Content-Type", "application/ocsp-request");
            object.setRequestProperty("Accept", "application/ocsp-response");
            object.setDoOutput(true);
            object2 = new DataOutputStream(new BufferedOutputStream(object.getOutputStream()));
            object2.write(arrby);
            object2.flush();
            object2.close();
            if (object.getResponseCode() / 100 != 2) {
                throw new IOException(MessageLocalization.getComposedMessage("invalid.http.response.1", object.getResponseCode()));
            }
            return new OCSPResp(StreamUtil.inputStreamToArray((InputStream)object.getContent()));
        }
        return null;
    }

    public BasicOCSPResp getBasicOCSPResp(X509Certificate x509Certificate, X509Certificate x509Certificate2, String string2) {
        block7 : {
            block6 : {
                try {
                    x509Certificate = this.getOcspResponse(x509Certificate, x509Certificate2, string2);
                    if (x509Certificate != null) break block6;
                    return null;
                }
                catch (Exception exception) {
                    if (LOGGER.isLogging(Level.ERROR)) {
                        LOGGER.error(exception.getMessage());
                    }
                    return null;
                }
            }
            if (x509Certificate.getStatus() == 0) break block7;
            return null;
        }
        x509Certificate = (BasicOCSPResp)x509Certificate.getResponseObject();
        if (this.verifier != null) {
            this.verifier.isValidResponse((BasicOCSPResp)x509Certificate, x509Certificate2);
        }
        return x509Certificate;
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    @Override
    public byte[] getEncoded(X509Certificate x509Certificate, X509Certificate certificateStatus, String string2) {
        x509Certificate = this.getBasicOCSPResp(x509Certificate, (X509Certificate)certificateStatus, string2);
        if (x509Certificate == null) return null;
        try {
            certificateStatus = x509Certificate.getResponses();
            if (((SingleResp[])certificateStatus).length != 1) return null;
            if ((certificateStatus = certificateStatus[0].getCertStatus()) == CertificateStatus.GOOD) {
                return x509Certificate.getEncoded();
            }
            if (!(certificateStatus instanceof RevokedStatus)) throw new IOException(MessageLocalization.getComposedMessage("ocsp.status.is.unknown", new Object[0]));
            throw new IOException(MessageLocalization.getComposedMessage("ocsp.status.is.revoked", new Object[0]));
        }
        catch (Exception exception) {
            if (!LOGGER.isLogging(Level.ERROR)) return null;
            LOGGER.error(exception.getMessage());
        }
        return null;
    }
}

