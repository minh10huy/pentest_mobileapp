/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf.fonts.cmaps;

import com.itextpdf.text.ExceptionConverter;
import com.itextpdf.text.Utilities;
import com.itextpdf.text.error_messages.MessageLocalization;
import com.itextpdf.text.pdf.PdfObject;
import com.itextpdf.text.pdf.PdfString;
import com.itextpdf.text.pdf.fonts.cmaps.AbstractCMap;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;

public class CMapToUnicode
extends AbstractCMap {
    private Map<Integer, String> doubleByteMappings = new HashMap<Integer, String>();
    private Map<Integer, String> singleByteMappings = new HashMap<Integer, String>();

    private int convertToInt(String arrby) throws IOException {
        arrby = arrby.getBytes("UTF-16BE");
        int n = 0;
        for (int i = 0; i < arrby.length - 1; ++i) {
            n = n + (arrby[i] & 255) << 8;
        }
        return n + (arrby[arrby.length - 1] & 255);
    }

    private String createStringFromBytes(byte[] arrby) throws IOException {
        if (arrby.length == 1) {
            return new String(arrby);
        }
        return new String(arrby, "UTF-16BE");
    }

    public static CMapToUnicode getIdentity() {
        CMapToUnicode cMapToUnicode = new CMapToUnicode();
        for (int i = 0; i < 65537; ++i) {
            cMapToUnicode.addChar(i, Utilities.convertFromUtf32(i));
        }
        return cMapToUnicode;
    }

    void addChar(int n, String string2) {
        this.doubleByteMappings.put(n, string2);
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    @Override
    void addChar(PdfString arrby, PdfObject object) {
        try {
            arrby = arrby.getBytes();
            object = this.createStringFromBytes(object.getBytes());
            if (arrby.length == 1) {
                this.singleByteMappings.put(arrby[0] & 255, (String)object);
                return;
            }
            if (arrby.length != 2) throw new IOException(MessageLocalization.getComposedMessage("mapping.code.should.be.1.or.two.bytes.and.not.1", arrby.length));
        }
        catch (Exception exception) {
            throw new ExceptionConverter(exception);
        }
        byte by = arrby[0];
        byte by2 = arrby[1];
        this.doubleByteMappings.put(by2 & 255 | (by & 255) << 8, (String)object);
    }

    public Map<Integer, Integer> createDirectMapping() throws IOException {
        HashMap<Integer, Integer> hashMap = new HashMap<Integer, Integer>();
        for (Map.Entry<Integer, String> entry : this.singleByteMappings.entrySet()) {
            hashMap.put(entry.getKey(), this.convertToInt(entry.getValue()));
        }
        for (Map.Entry<Integer, String> entry : this.doubleByteMappings.entrySet()) {
            hashMap.put(entry.getKey(), this.convertToInt(entry.getValue()));
        }
        return hashMap;
    }

    public Map<Integer, Integer> createReverseMapping() throws IOException {
        HashMap<Integer, Integer> hashMap = new HashMap<Integer, Integer>();
        for (Map.Entry<Integer, String> entry : this.singleByteMappings.entrySet()) {
            hashMap.put(this.convertToInt(entry.getValue()), entry.getKey());
        }
        for (Map.Entry<Integer, String> entry : this.doubleByteMappings.entrySet()) {
            hashMap.put(this.convertToInt(entry.getValue()), entry.getKey());
        }
        return hashMap;
    }

    public boolean hasOneByteMappings() {
        return this.singleByteMappings.isEmpty() ^ true;
    }

    public boolean hasTwoByteMappings() {
        return this.doubleByteMappings.isEmpty() ^ true;
    }

    public String lookup(byte[] arrby, int n, int n2) {
        if (n2 == 1) {
            n = arrby[n];
            return this.singleByteMappings.get(n & 255);
        }
        if (n2 == 2) {
            n2 = arrby[n];
            n = arrby[n + 1];
            return this.doubleByteMappings.get(((n2 & 255) << 8) + (n & 255));
        }
        return null;
    }
}

