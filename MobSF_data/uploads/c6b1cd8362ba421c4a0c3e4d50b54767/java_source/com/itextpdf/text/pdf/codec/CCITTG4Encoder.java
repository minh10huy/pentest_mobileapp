/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf.codec;

import com.itextpdf.text.pdf.ByteBuffer;

public class CCITTG4Encoder {
    private static final int CODE = 1;
    private static final int EOL = 1;
    private static final int G3CODE_EOF = -3;
    private static final int G3CODE_EOL = -1;
    private static final int G3CODE_INCOMP = -4;
    private static final int G3CODE_INVALID = -2;
    private static final int LENGTH = 0;
    private static final int RUNLEN = 2;
    private static byte[] oneruns;
    private static byte[] zeroruns;
    private int[][] TIFFFaxBlackCodes;
    private int[][] TIFFFaxWhiteCodes;
    private int bit = 8;
    private int data;
    private byte[] dataBp;
    private int[] horizcode;
    private int[] msbmask;
    private int offsetData;
    private ByteBuffer outBuf = new ByteBuffer(1024);
    private int[] passcode;
    private byte[] refline;
    private int rowbytes;
    private int rowpixels;
    private int sizeData;
    private int[][] vcodes;

    static {
        zeroruns = new byte[]{8, 7, 6, 6, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
        oneruns = new byte[]{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 7, 8};
    }

    public CCITTG4Encoder(int n) {
        int[] arrn = new int[]{4, 7, 2};
        int[] arrn2 = new int[]{4, 11, 4};
        int[] arrn3 = new int[]{4, 12, 5};
        int[] arrn4 = new int[]{4, 14, 6};
        int[] arrn5 = new int[]{4, 15, 7};
        int[] arrn6 = new int[]{5, 7, 10};
        int[] arrn7 = new int[]{5, 8, 11};
        int[] arrn8 = new int[]{6, 52, 14};
        int[] arrn9 = new int[]{6, 53, 15};
        int[] arrn10 = new int[]{6, 42, 16};
        int[] arrn11 = new int[]{6, 43, 17};
        int[] arrn12 = new int[]{7, 39, 18};
        int[] arrn13 = new int[]{7, 12, 19};
        int[] arrn14 = new int[]{7, 8, 20};
        int[] arrn15 = new int[]{7, 3, 22};
        int[] arrn16 = new int[]{7, 4, 23};
        int[] arrn17 = new int[]{7, 19, 26};
        int[] arrn18 = new int[]{8, 2, 29};
        int[] arrn19 = new int[]{8, 19, 34};
        int[] arrn20 = new int[]{8, 21, 36};
        int[] arrn21 = new int[]{8, 22, 37};
        int[] arrn22 = new int[]{8, 23, 38};
        int[] arrn23 = new int[]{8, 41, 40};
        int[] arrn24 = new int[]{8, 42, 41};
        int[] arrn25 = new int[]{8, 44, 43};
        int[] arrn26 = new int[]{8, 11, 48};
        int[] arrn27 = new int[]{8, 82, 49};
        int[] arrn28 = new int[]{8, 84, 51};
        int[] arrn29 = new int[]{8, 85, 52};
        int[] arrn30 = new int[]{8, 36, 53};
        int[] arrn31 = new int[]{8, 37, 54};
        int[] arrn32 = new int[]{8, 89, 56};
        int[] arrn33 = new int[]{8, 90, 57};
        int[] arrn34 = new int[]{8, 91, 58};
        int[] arrn35 = new int[]{8, 74, 59};
        int[] arrn36 = new int[]{8, 75, 60};
        int[] arrn37 = new int[]{8, 50, 61};
        int[] arrn38 = new int[]{5, 27, 64};
        int[] arrn39 = new int[]{5, 18, 128};
        int[] arrn40 = new int[]{8, 54, 320};
        int[] arrn41 = new int[]{9, 205, 768};
        int[] arrn42 = new int[]{9, 210, 832};
        int[] arrn43 = new int[]{9, 212, 960};
        int[] arrn44 = new int[]{9, 217, 1280};
        int[] arrn45 = new int[]{9, 218, 1344};
        int[] arrn46 = new int[]{9, 153, 1536};
        int[] arrn47 = new int[]{9, 154, 1600};
        int[] arrn48 = new int[]{6, 24, 1664};
        int[] arrn49 = new int[]{11, 8, 1792};
        int[] arrn50 = new int[]{11, 12, 1856};
        int[] arrn51 = new int[]{11, 13, 1920};
        int[] arrn52 = new int[]{12, 18, 1984};
        int[] arrn53 = new int[]{12, 23, 2304};
        int[] arrn54 = new int[]{12, 28, 2368};
        int[] arrn55 = new int[]{12, 31, 2560};
        int[] arrn56 = new int[]{10, 1, -2};
        int[] arrn57 = new int[]{11, 1, -2};
        this.TIFFFaxWhiteCodes = new int[][]{{8, 53, 0}, {6, 7, 1}, arrn, {4, 8, 3}, arrn2, arrn3, arrn4, arrn5, {5, 19, 8}, {5, 20, 9}, arrn6, arrn7, {6, 8, 12}, {6, 3, 13}, arrn8, arrn9, arrn10, arrn11, arrn12, arrn13, arrn14, {7, 23, 21}, arrn15, arrn16, {7, 40, 24}, {7, 43, 25}, arrn17, {7, 36, 27}, {7, 24, 28}, arrn18, {8, 3, 30}, {8, 26, 31}, {8, 27, 32}, {8, 18, 33}, arrn19, {8, 20, 35}, arrn20, arrn21, arrn22, {8, 40, 39}, arrn23, arrn24, {8, 43, 42}, arrn25, {8, 45, 44}, {8, 4, 45}, {8, 5, 46}, {8, 10, 47}, arrn26, arrn27, {8, 83, 50}, arrn28, arrn29, arrn30, arrn31, {8, 88, 55}, arrn32, arrn33, arrn34, arrn35, arrn36, arrn37, {8, 51, 62}, {8, 52, 63}, arrn38, arrn39, {6, 23, 192}, {7, 55, 256}, arrn40, {8, 55, 384}, {8, 100, 448}, {8, 101, 512}, {8, 104, 576}, {8, 103, 640}, {9, 204, 704}, arrn41, arrn42, {9, 211, 896}, arrn43, {9, 213, 1024}, {9, 214, 1088}, {9, 215, 1152}, {9, 216, 1216}, arrn44, arrn45, {9, 219, 1408}, {9, 152, 1472}, arrn46, arrn47, arrn48, {9, 155, 1728}, arrn49, arrn50, arrn51, arrn52, {12, 19, 2048}, {12, 20, 2112}, {12, 21, 2176}, {12, 22, 2240}, arrn53, arrn54, {12, 29, 2432}, {12, 30, 2496}, arrn55, {12, 1, -1}, {9, 1, -2}, arrn56, arrn57, {12, 0, -2}};
        arrn = new int[]{10, 55, 0};
        arrn2 = new int[]{2, 2, 3};
        arrn3 = new int[]{4, 2, 6};
        arrn4 = new int[]{11, 103, 19};
        arrn5 = new int[]{12, 202, 26};
        arrn6 = new int[]{12, 104, 30};
        arrn7 = new int[]{12, 107, 33};
        arrn8 = new int[]{12, 101, 49};
        arrn9 = new int[]{12, 90, 61};
        arrn10 = new int[]{12, 102, 62};
        arrn11 = new int[]{12, 52, 384};
        arrn12 = new int[]{13, 108, 512};
        arrn13 = new int[]{13, 114, 896};
        arrn14 = new int[]{13, 117, 1088};
        arrn15 = new int[]{12, 18, 1984};
        this.TIFFFaxBlackCodes = new int[][]{arrn, {3, 2, 1}, {2, 3, 2}, arrn2, {3, 3, 4}, {4, 3, 5}, arrn3, {5, 3, 7}, {6, 5, 8}, {6, 4, 9}, {7, 4, 10}, {7, 5, 11}, {7, 7, 12}, {8, 4, 13}, {8, 7, 14}, {9, 24, 15}, {10, 23, 16}, {10, 24, 17}, {10, 8, 18}, arrn4, {11, 104, 20}, {11, 108, 21}, {11, 55, 22}, {11, 40, 23}, {11, 23, 24}, {11, 24, 25}, arrn5, {12, 203, 27}, {12, 204, 28}, {12, 205, 29}, arrn6, {12, 105, 31}, {12, 106, 32}, arrn7, {12, 210, 34}, {12, 211, 35}, {12, 212, 36}, {12, 213, 37}, {12, 214, 38}, {12, 215, 39}, {12, 108, 40}, {12, 109, 41}, {12, 218, 42}, {12, 219, 43}, {12, 84, 44}, {12, 85, 45}, {12, 86, 46}, {12, 87, 47}, {12, 100, 48}, arrn8, {12, 82, 50}, {12, 83, 51}, {12, 36, 52}, {12, 55, 53}, {12, 56, 54}, {12, 39, 55}, {12, 40, 56}, {12, 88, 57}, {12, 89, 58}, {12, 43, 59}, {12, 44, 60}, arrn9, arrn10, {12, 103, 63}, {10, 15, 64}, {12, 200, 128}, {12, 201, 192}, {12, 91, 256}, {12, 51, 320}, arrn11, {12, 53, 448}, arrn12, {13, 109, 576}, {13, 74, 640}, {13, 75, 704}, {13, 76, 768}, {13, 77, 832}, arrn13, {13, 115, 960}, {13, 116, 1024}, arrn14, {13, 118, 1152}, {13, 119, 1216}, {13, 82, 1280}, {13, 83, 1344}, {13, 84, 1408}, {13, 85, 1472}, {13, 90, 1536}, {13, 91, 1600}, {13, 100, 1664}, {13, 101, 1728}, {11, 8, 1792}, {11, 12, 1856}, {11, 13, 1920}, arrn15, {12, 19, 2048}, {12, 20, 2112}, {12, 21, 2176}, {12, 22, 2240}, {12, 23, 2304}, {12, 28, 2368}, {12, 29, 2432}, {12, 30, 2496}, {12, 31, 2560}, {12, 1, -1}, {9, 1, -2}, {10, 1, -2}, {11, 1, -2}, {12, 0, -2}};
        this.horizcode = new int[]{3, 1, 0};
        this.passcode = new int[]{4, 1, 0};
        arrn = new int[]{6, 3, 0};
        arrn2 = new int[]{3, 2, 0};
        arrn3 = new int[]{6, 2, 0};
        this.vcodes = new int[][]{{7, 3, 0}, arrn, {3, 3, 0}, {1, 1, 0}, arrn2, arrn3, {7, 2, 0}};
        this.msbmask = new int[]{0, 1, 3, 7, 15, 31, 63, 127, 255};
        this.rowpixels = n;
        this.rowbytes = (this.rowpixels + 7) / 8;
        this.refline = new byte[this.rowbytes];
    }

    private void Fax3Encode2DRow() {
        int n = this.pixel(this.dataBp, this.offsetData, 0) != 0 ? 0 : CCITTG4Encoder.finddiff(this.dataBp, this.offsetData, 0, this.rowpixels, 0);
        int n2 = this.pixel(this.refline, 0, 0) != 0 ? 0 : CCITTG4Encoder.finddiff(this.refline, 0, 0, this.rowpixels, 0);
        int n3 = 0;
        int n4 = n2;
        do {
            if ((n2 = CCITTG4Encoder.finddiff2(this.refline, 0, n4, this.rowpixels, this.pixel(this.refline, 0, n4))) >= n) {
                n2 = n4 - n;
                if (-3 <= n2 && n2 <= 3) {
                    this.putcode(this.vcodes[n2 + 3]);
                } else {
                    n2 = CCITTG4Encoder.finddiff2(this.dataBp, this.offsetData, n, this.rowpixels, this.pixel(this.dataBp, this.offsetData, n));
                    this.putcode(this.horizcode);
                    if (n3 + n != 0 && this.pixel(this.dataBp, this.offsetData, n3) != 0) {
                        this.putspan(n - n3, this.TIFFFaxBlackCodes);
                        this.putspan(n2 - n, this.TIFFFaxWhiteCodes);
                    } else {
                        this.putspan(n - n3, this.TIFFFaxWhiteCodes);
                        this.putspan(n2 - n, this.TIFFFaxBlackCodes);
                    }
                    n = n2;
                }
                n2 = n;
            } else {
                this.putcode(this.passcode);
            }
            if (n2 >= this.rowpixels) {
                return;
            }
            n = CCITTG4Encoder.finddiff(this.dataBp, this.offsetData, n2, this.rowpixels, this.pixel(this.dataBp, this.offsetData, n2));
            n3 = CCITTG4Encoder.finddiff(this.refline, 0, n2, this.rowpixels, this.pixel(this.dataBp, this.offsetData, n2) ^ 1);
            n4 = CCITTG4Encoder.finddiff(this.refline, 0, n3, this.rowpixels, this.pixel(this.dataBp, this.offsetData, n2));
            n3 = n2;
        } while (true);
    }

    private void Fax4PostEncode() {
        this.putBits(1, 12);
        this.putBits(1, 12);
        if (this.bit != 8) {
            this.outBuf.append((byte)this.data);
            this.data = 0;
            this.bit = 8;
        }
    }

    public static byte[] compress(byte[] arrby, int n, int n2) {
        CCITTG4Encoder cCITTG4Encoder = new CCITTG4Encoder(n);
        cCITTG4Encoder.fax4Encode(arrby, 0, cCITTG4Encoder.rowbytes * n2);
        return cCITTG4Encoder.close();
    }

    private static int find0span(byte[] arrby, int n, int n2, int n3) {
        int n4;
        int n5 = n + (n2 >> 3);
        if ((n3 -= n2) > 0 && (n4 = n2 & 7) != 0) {
            n2 = zeroruns[arrby[n5] << n4 & 255];
            int n6 = 8 - n4;
            n = n2;
            if (n2 > n6) {
                n = n6;
            }
            n2 = n;
            if (n > n3) {
                n2 = n3;
            }
            if (n4 + n2 < 8) {
                return n2;
            }
            n6 = n3 - n2;
            n3 = n5 + 1;
            n = n2;
            n2 = n6;
        } else {
            n = 0;
            n2 = n3;
            n3 = n5;
        }
        while (n2 >= 8) {
            if (arrby[n3] != 0) {
                return n + zeroruns[arrby[n3] & 255];
            }
            n += 8;
            n2 -= 8;
            ++n3;
        }
        n5 = n;
        if (n2 > 0) {
            n3 = n5 = zeroruns[arrby[n3] & 255];
            if (n5 > n2) {
                n3 = n2;
            }
            n5 = n + n3;
        }
        return n5;
    }

    private static int find1span(byte[] arrby, int n, int n2, int n3) {
        int n4;
        int n5 = n + (n2 >> 3);
        if ((n3 -= n2) > 0 && (n4 = n2 & 7) != 0) {
            n2 = oneruns[arrby[n5] << n4 & 255];
            int n6 = 8 - n4;
            n = n2;
            if (n2 > n6) {
                n = n6;
            }
            n2 = n;
            if (n > n3) {
                n2 = n3;
            }
            if (n4 + n2 < 8) {
                return n2;
            }
            n6 = n3 - n2;
            n3 = n5 + 1;
            n = n2;
            n2 = n6;
        } else {
            n = 0;
            n2 = n3;
            n3 = n5;
        }
        while (n2 >= 8) {
            if (arrby[n3] != -1) {
                return n + oneruns[arrby[n3] & 255];
            }
            n += 8;
            n2 -= 8;
            ++n3;
        }
        n5 = n;
        if (n2 > 0) {
            n3 = n5 = oneruns[arrby[n3] & 255];
            if (n5 > n2) {
                n3 = n2;
            }
            n5 = n + n3;
        }
        return n5;
    }

    private static int finddiff(byte[] arrby, int n, int n2, int n3, int n4) {
        n = n4 != 0 ? CCITTG4Encoder.find1span(arrby, n, n2, n3) : CCITTG4Encoder.find0span(arrby, n, n2, n3);
        return n2 + n;
    }

    private static int finddiff2(byte[] arrby, int n, int n2, int n3, int n4) {
        int n5 = n3;
        if (n2 < n3) {
            n5 = CCITTG4Encoder.finddiff(arrby, n, n2, n3, n4);
        }
        return n5;
    }

    private int pixel(byte[] arrby, int n, int n2) {
        if (n2 >= this.rowpixels) {
            return 0;
        }
        return (arrby[n + (n2 >> 3)] & 255) >> 7 - (n2 & 7) & 1;
    }

    private void putBits(int n, int n2) {
        while (n2 > this.bit) {
            this.data |= n >> n2 - this.bit;
            n2 -= this.bit;
            this.outBuf.append((byte)this.data);
            this.data = 0;
            this.bit = 8;
        }
        int n3 = this.data;
        this.data = (n & this.msbmask[n2]) << this.bit - n2 | n3;
        this.bit -= n2;
        if (this.bit == 0) {
            this.outBuf.append((byte)this.data);
            this.data = 0;
            this.bit = 8;
        }
    }

    private void putcode(int[] arrn) {
        this.putBits(arrn[1], arrn[0]);
    }

    private void putspan(int n, int[][] arrn) {
        int[] arrn2;
        while (n >= 2624) {
            arrn2 = arrn[103];
            this.putBits(arrn2[1], arrn2[0]);
            n -= arrn2[2];
        }
        int n2 = n;
        if (n >= 64) {
            arrn2 = arrn[(n >> 6) + 63];
            this.putBits(arrn2[1], arrn2[0]);
            n2 = n - arrn2[2];
        }
        this.putBits(arrn[n2][1], arrn[n2][0]);
    }

    public byte[] close() {
        this.Fax4PostEncode();
        return this.outBuf.toByteArray();
    }

    public void fax4Encode(byte[] arrby, int n) {
        this.fax4Encode(arrby, 0, this.rowbytes * n);
    }

    public void fax4Encode(byte[] arrby, int n, int n2) {
        this.dataBp = arrby;
        this.offsetData = n;
        this.sizeData = n2;
        while (this.sizeData > 0) {
            this.Fax3Encode2DRow();
            System.arraycopy(this.dataBp, this.offsetData, this.refline, 0, this.rowbytes);
            this.offsetData += this.rowbytes;
            this.sizeData -= this.rowbytes;
        }
    }
}

