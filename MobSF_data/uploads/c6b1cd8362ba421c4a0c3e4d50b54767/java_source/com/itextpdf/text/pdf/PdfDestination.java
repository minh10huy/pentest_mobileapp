/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf;

import com.itextpdf.text.pdf.PdfArray;
import com.itextpdf.text.pdf.PdfIndirectReference;
import com.itextpdf.text.pdf.PdfName;
import com.itextpdf.text.pdf.PdfNull;
import com.itextpdf.text.pdf.PdfNumber;
import com.itextpdf.text.pdf.PdfObject;
import java.util.StringTokenizer;

public class PdfDestination
extends PdfArray {
    public static final int FIT = 1;
    public static final int FITB = 5;
    public static final int FITBH = 6;
    public static final int FITBV = 7;
    public static final int FITH = 2;
    public static final int FITR = 4;
    public static final int FITV = 3;
    public static final int XYZ = 0;
    private boolean status = false;

    public PdfDestination(int n) {
        if (n == 5) {
            this.add(PdfName.FITB);
            return;
        }
        this.add(PdfName.FIT);
    }

    public PdfDestination(int n, float f) {
        super(new PdfNumber(f));
        if (n != 3) {
            switch (n) {
                default: {
                    this.addFirst(PdfName.FITH);
                    return;
                }
                case 7: {
                    this.addFirst(PdfName.FITBV);
                    return;
                }
                case 6: 
            }
            this.addFirst(PdfName.FITBH);
            return;
        }
        this.addFirst(PdfName.FITV);
    }

    public PdfDestination(int n, float f, float f2, float f3) {
        super(PdfName.XYZ);
        if (f < 0.0f) {
            this.add(PdfNull.PDFNULL);
        } else {
            this.add(new PdfNumber(f));
        }
        if (f2 < 0.0f) {
            this.add(PdfNull.PDFNULL);
        } else {
            this.add(new PdfNumber(f2));
        }
        this.add(new PdfNumber(f3));
    }

    public PdfDestination(int n, float f, float f2, float f3, float f4) {
        super(PdfName.FITR);
        this.add(new PdfNumber(f));
        this.add(new PdfNumber(f2));
        this.add(new PdfNumber(f3));
        this.add(new PdfNumber(f4));
    }

    public PdfDestination(PdfDestination pdfDestination) {
        super(pdfDestination);
        this.status = pdfDestination.status;
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public PdfDestination(String object) {
        object = new StringTokenizer((String)object);
        if (object.hasMoreTokens()) {
            this.add(new PdfName(object.nextToken()));
        }
        while (object.hasMoreTokens()) {
            String string2 = object.nextToken();
            if ("null".equals(string2)) {
                this.add(new PdfNull());
                continue;
            }
            try {
                this.add(new PdfNumber(string2));
                continue;
            }
            catch (RuntimeException runtimeException) {}
            this.add(new PdfNull());
        }
        return;
    }

    public boolean addPage(PdfIndirectReference pdfIndirectReference) {
        if (!this.status) {
            this.addFirst(pdfIndirectReference);
            this.status = true;
            return true;
        }
        return false;
    }

    public boolean hasPage() {
        return this.status;
    }
}

