/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf.codec;

import com.itextpdf.text.pdf.codec.LZWCompressor;
import java.io.IOException;
import java.io.OutputStream;
import java.util.Collection;
import java.util.Iterator;
import java.util.TreeMap;

public class TiffWriter {
    private TreeMap<Integer, FieldBase> ifd = new TreeMap();

    public static void compressLZW(OutputStream object, int n, byte[] arrby, int n2, int n3, int n4) throws IOException {
        int n5 = 1;
        LZWCompressor lZWCompressor = new LZWCompressor((OutputStream)object, 8, true);
        n = n == 2 ? n5 : 0;
        if (n == 0) {
            lZWCompressor.compress(arrby, 0, arrby.length);
        } else {
            object = n != 0 ? new byte[n4] : null;
            n5 = 0;
            for (n = 0; n < n2; ++n) {
                System.arraycopy(arrby, n5, object, 0, n4);
                for (int i = n4 - 1; i >= n3; --i) {
                    object[i] = (byte)(object[i] - object[i - n3]);
                }
                lZWCompressor.compress((byte[])object, 0, n4);
                n5 += n4;
            }
        }
        lZWCompressor.flush();
    }

    public static void writeLong(int n, OutputStream outputStream) throws IOException {
        outputStream.write(n >> 24 & 255);
        outputStream.write(n >> 16 & 255);
        outputStream.write(n >> 8 & 255);
        outputStream.write(n & 255);
    }

    public static void writeShort(int n, OutputStream outputStream) throws IOException {
        outputStream.write(n >> 8 & 255);
        outputStream.write(n & 255);
    }

    public void addField(FieldBase fieldBase) {
        this.ifd.put(fieldBase.getTag(), fieldBase);
    }

    public int getIfdSize() {
        return this.ifd.size() * 12 + 6;
    }

    public void writeFile(OutputStream outputStream) throws IOException {
        outputStream.write(77);
        outputStream.write(77);
        outputStream.write(0);
        outputStream.write(42);
        TiffWriter.writeLong(8, outputStream);
        TiffWriter.writeShort(this.ifd.size(), outputStream);
        int n = this.getIfdSize() + 8;
        for (FieldBase fieldBase : this.ifd.values()) {
            int n2 = fieldBase.getValueSize();
            int n3 = n;
            if (n2 > 4) {
                fieldBase.setOffset(n);
                n3 = n + n2;
            }
            fieldBase.writeField(outputStream);
            n = n3;
        }
        TiffWriter.writeLong(0, outputStream);
        Iterator<FieldBase> iterator = this.ifd.values().iterator();
        while (iterator.hasNext()) {
            iterator.next().writeValue(outputStream);
        }
    }

    public static class FieldAscii
    extends FieldBase {
        public FieldAscii(int n, String arrby) {
            super(n, 2, arrby.getBytes().length + 1);
            arrby = arrby.getBytes();
            this.data = new byte[arrby.length + 1];
            System.arraycopy(arrby, 0, this.data, 0, arrby.length);
        }
    }

    public static abstract class FieldBase {
        private int count;
        protected byte[] data;
        private int fieldType;
        private int offset;
        private int tag;

        protected FieldBase(int n, int n2, int n3) {
            this.tag = n;
            this.fieldType = n2;
            this.count = n3;
        }

        public int getTag() {
            return this.tag;
        }

        public int getValueSize() {
            return this.data.length + 1 & -2;
        }

        public void setOffset(int n) {
            this.offset = n;
        }

        public void writeField(OutputStream outputStream) throws IOException {
            TiffWriter.writeShort(this.tag, outputStream);
            TiffWriter.writeShort(this.fieldType, outputStream);
            TiffWriter.writeLong(this.count, outputStream);
            if (this.data.length <= 4) {
                outputStream.write(this.data);
                for (int i = this.data.length; i < 4; ++i) {
                    outputStream.write(0);
                }
            } else {
                TiffWriter.writeLong(this.offset, outputStream);
            }
        }

        public void writeValue(OutputStream outputStream) throws IOException {
            if (this.data.length <= 4) {
                return;
            }
            outputStream.write(this.data);
            if ((this.data.length & 1) == 1) {
                outputStream.write(0);
            }
        }
    }

    public static class FieldByte
    extends FieldBase {
        public FieldByte(int n, byte[] arrby) {
            super(n, 1, arrby.length);
            this.data = arrby;
        }
    }

    public static class FieldImage
    extends FieldBase {
        public FieldImage(byte[] arrby) {
            super(273, 4, 1);
            this.data = arrby;
        }
    }

    public static class FieldLong
    extends FieldBase {
        public FieldLong(int n, int n2) {
            super(n, 4, 1);
            this.data = new byte[4];
            this.data[0] = (byte)(n2 >> 24);
            this.data[1] = (byte)(n2 >> 16);
            this.data[2] = (byte)(n2 >> 8);
            this.data[3] = (byte)n2;
        }

        public FieldLong(int n, int[] arrn) {
            super(n, 4, arrn.length);
            this.data = new byte[arrn.length * 4];
            int n2 = arrn.length;
            int n3 = 0;
            for (n = 0; n < n2; ++n) {
                int n4 = arrn[n];
                byte[] arrby = this.data;
                int n5 = n3 + 1;
                arrby[n3] = (byte)(n4 >> 24);
                arrby = this.data;
                n3 = n5 + 1;
                arrby[n5] = (byte)(n4 >> 16);
                arrby = this.data;
                n5 = n3 + 1;
                arrby[n3] = (byte)(n4 >> 8);
                this.data[n5] = (byte)n4;
                n3 = n5 + 1;
            }
        }
    }

    public static class FieldRational
    extends FieldBase {
        public FieldRational(int n, int[] arrn) {
            this(n, new int[][]{arrn});
        }

        public FieldRational(int n, int[][] arrn) {
            super(n, 5, arrn.length);
            this.data = new byte[arrn.length * 8];
            int n2 = arrn.length;
            int n3 = 0;
            for (n = 0; n < n2; ++n) {
                int[] arrn2 = arrn[n];
                byte[] arrby = this.data;
                int n4 = n3 + 1;
                arrby[n3] = (byte)(arrn2[0] >> 24);
                arrby = this.data;
                n3 = n4 + 1;
                arrby[n4] = (byte)(arrn2[0] >> 16);
                arrby = this.data;
                n4 = n3 + 1;
                arrby[n3] = (byte)(arrn2[0] >> 8);
                arrby = this.data;
                n3 = n4 + 1;
                arrby[n4] = (byte)arrn2[0];
                arrby = this.data;
                n4 = n3 + 1;
                arrby[n3] = (byte)(arrn2[1] >> 24);
                arrby = this.data;
                n3 = n4 + 1;
                arrby[n4] = (byte)(arrn2[1] >> 16);
                arrby = this.data;
                n4 = n3 + 1;
                arrby[n3] = (byte)(arrn2[1] >> 8);
                this.data[n4] = (byte)arrn2[1];
                n3 = n4 + 1;
            }
        }
    }

    public static class FieldShort
    extends FieldBase {
        public FieldShort(int n, int n2) {
            super(n, 3, 1);
            this.data = new byte[2];
            this.data[0] = (byte)(n2 >> 8);
            this.data[1] = (byte)n2;
        }

        public FieldShort(int n, int[] arrn) {
            super(n, 3, arrn.length);
            this.data = new byte[arrn.length * 2];
            int n2 = arrn.length;
            int n3 = 0;
            for (n = 0; n < n2; ++n) {
                int n4 = arrn[n];
                byte[] arrby = this.data;
                int n5 = n3 + 1;
                arrby[n3] = (byte)(n4 >> 8);
                this.data[n5] = (byte)n4;
                n3 = n5 + 1;
            }
        }
    }

    public static class FieldUndefined
    extends FieldBase {
        public FieldUndefined(int n, byte[] arrby) {
            super(n, 7, arrby.length);
            this.data = arrby;
        }
    }

}

