/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf.qrcode;

public final class BitVector {
    private static final int DEFAULT_SIZE_IN_BYTES = 32;
    private byte[] array = new byte[32];
    private int sizeInBits = 0;

    private void appendByte(int n) {
        if (this.sizeInBits >> 3 == this.array.length) {
            byte[] arrby = new byte[this.array.length << 1];
            System.arraycopy(this.array, 0, arrby, 0, this.array.length);
            this.array = arrby;
        }
        this.array[this.sizeInBits >> 3] = (byte)n;
        this.sizeInBits += 8;
    }

    public void appendBit(int n) {
        if (n != 0 && n != 1) {
            throw new IllegalArgumentException("Bad bit");
        }
        int n2 = this.sizeInBits & 7;
        if (n2 == 0) {
            this.appendByte(0);
            this.sizeInBits -= 8;
        }
        byte[] arrby = this.array;
        int n3 = this.sizeInBits >> 3;
        arrby[n3] = (byte)(n << 7 - n2 | arrby[n3]);
        ++this.sizeInBits;
    }

    public void appendBitVector(BitVector bitVector) {
        int n = bitVector.size();
        for (int i = 0; i < n; ++i) {
            this.appendBit(bitVector.at(i));
        }
    }

    public void appendBits(int n, int n2) {
        if (n2 >= 0) {
            int n3 = n2;
            if (n2 <= 32) {
                while (n3 > 0) {
                    if ((this.sizeInBits & 7) == 0 && n3 >= 8) {
                        this.appendByte(n >> n3 - 8 & 255);
                        n3 -= 8;
                        continue;
                    }
                    this.appendBit(n >> n3 - 1 & 1);
                    --n3;
                }
                return;
            }
        }
        throw new IllegalArgumentException("Num bits must be between 0 and 32");
    }

    public int at(int n) {
        if (n >= 0 && n < this.sizeInBits) {
            return (this.array[n >> 3] & 255) >> 7 - (n & 7) & 1;
        }
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("Bad index: ");
        stringBuilder.append(n);
        throw new IllegalArgumentException(stringBuilder.toString());
    }

    public byte[] getArray() {
        return this.array;
    }

    public int size() {
        return this.sizeInBits;
    }

    public int sizeInBytes() {
        return this.sizeInBits + 7 >> 3;
    }

    public String toString() {
        StringBuffer stringBuffer = new StringBuffer(this.sizeInBits);
        for (int i = 0; i < this.sizeInBits; ++i) {
            if (this.at(i) == 0) {
                stringBuffer.append('0');
                continue;
            }
            if (this.at(i) == 1) {
                stringBuffer.append('1');
                continue;
            }
            throw new IllegalArgumentException("Byte isn't 0 or 1");
        }
        return stringBuffer.toString();
    }

    public void xor(BitVector bitVector) {
        if (this.sizeInBits != bitVector.size()) {
            throw new IllegalArgumentException("BitVector sizes don't match");
        }
        int n = this.sizeInBits;
        for (int i = 0; i < n + 7 >> 3; ++i) {
            byte[] arrby = this.array;
            arrby[i] = (byte)(arrby[i] ^ bitVector.array[i]);
        }
    }
}

