/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf.codec;

import com.itextpdf.text.DocWriter;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.util.zip.DeflaterOutputStream;

public class PngWriter {
    private static final byte[] IDAT;
    private static final byte[] IEND;
    private static final byte[] IHDR;
    private static final byte[] PLTE;
    private static final byte[] PNG_SIGNTURE;
    private static int[] crc_table;
    private static final byte[] iCCP;
    private OutputStream outp;

    static {
        PNG_SIGNTURE = new byte[]{-119, 80, 78, 71, 13, 10, 26, 10};
        IHDR = DocWriter.getISOBytes("IHDR");
        PLTE = DocWriter.getISOBytes("PLTE");
        IDAT = DocWriter.getISOBytes("IDAT");
        IEND = DocWriter.getISOBytes("IEND");
        iCCP = DocWriter.getISOBytes("iCCP");
    }

    public PngWriter(OutputStream outputStream) throws IOException {
        this.outp = outputStream;
        outputStream.write(PNG_SIGNTURE);
    }

    private static int crc(byte[] arrby) {
        return ~ PngWriter.update_crc(-1, arrby, 0, arrby.length);
    }

    private static int crc(byte[] arrby, int n, int n2) {
        return ~ PngWriter.update_crc(-1, arrby, n, n2);
    }

    private static void make_crc_table() {
        if (crc_table != null) {
            return;
        }
        int[] arrn = new int[256];
        for (int i = 0; i < 256; ++i) {
            int n = i;
            for (int j = 0; j < 8; ++j) {
                if ((n & 1) != 0) {
                    n = n >>> 1 ^ -306674912;
                    continue;
                }
                n >>>= 1;
            }
            arrn[i] = n;
        }
        crc_table = arrn;
    }

    public static void outputInt(int n, OutputStream outputStream) throws IOException {
        outputStream.write((byte)(n >> 24));
        outputStream.write((byte)(n >> 16));
        outputStream.write((byte)(n >> 8));
        outputStream.write((byte)n);
    }

    private static int update_crc(int n, byte[] arrby, int n2, int n3) {
        if (crc_table == null) {
            PngWriter.make_crc_table();
        }
        int n4 = 0;
        int n5 = n;
        for (n = n4; n < n3; ++n) {
            n5 = n5 >>> 8 ^ crc_table[(arrby[n + n2] ^ n5) & 255];
        }
        return n5;
    }

    public void outputInt(int n) throws IOException {
        PngWriter.outputInt(n, this.outp);
    }

    public void writeChunk(byte[] arrby, byte[] arrby2) throws IOException {
        this.outputInt(arrby2.length);
        this.outp.write(arrby, 0, 4);
        this.outp.write(arrby2);
        this.outputInt(~ PngWriter.update_crc(PngWriter.update_crc(-1, arrby, 0, arrby.length), arrby2, 0, arrby2.length));
    }

    public void writeData(byte[] arrby, int n) throws IOException {
        int n2;
        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        DeflaterOutputStream deflaterOutputStream = new DeflaterOutputStream(byteArrayOutputStream);
        for (n2 = 0; n2 < arrby.length - n; n2 += n) {
            deflaterOutputStream.write(0);
            deflaterOutputStream.write(arrby, n2, n);
        }
        n = arrby.length - n2;
        if (n > 0) {
            deflaterOutputStream.write(0);
            deflaterOutputStream.write(arrby, n2, n);
        }
        deflaterOutputStream.close();
        this.writeChunk(IDAT, byteArrayOutputStream.toByteArray());
    }

    public void writeEnd() throws IOException {
        this.writeChunk(IEND, new byte[0]);
    }

    public void writeHeader(int n, int n2, int n3, int n4) throws IOException {
        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        PngWriter.outputInt(n, byteArrayOutputStream);
        PngWriter.outputInt(n2, byteArrayOutputStream);
        byteArrayOutputStream.write(n3);
        byteArrayOutputStream.write(n4);
        byteArrayOutputStream.write(0);
        byteArrayOutputStream.write(0);
        byteArrayOutputStream.write(0);
        this.writeChunk(IHDR, byteArrayOutputStream.toByteArray());
    }

    public void writeIccProfile(byte[] arrby) throws IOException {
        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        byteArrayOutputStream.write(73);
        byteArrayOutputStream.write(67);
        byteArrayOutputStream.write(67);
        byteArrayOutputStream.write(0);
        byteArrayOutputStream.write(0);
        DeflaterOutputStream deflaterOutputStream = new DeflaterOutputStream(byteArrayOutputStream);
        deflaterOutputStream.write(arrby);
        deflaterOutputStream.close();
        this.writeChunk(iCCP, byteArrayOutputStream.toByteArray());
    }

    public void writePalette(byte[] arrby) throws IOException {
        this.writeChunk(PLTE, arrby);
    }
}

