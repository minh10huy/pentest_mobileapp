/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf.events;

import com.itextpdf.text.pdf.PdfContentByte;
import com.itextpdf.text.pdf.PdfPRow;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfPTableEvent;
import com.itextpdf.text.pdf.PdfPTableEventAfterSplit;
import com.itextpdf.text.pdf.PdfPTableEventSplit;
import java.util.ArrayList;
import java.util.Iterator;

public class PdfPTableEventForwarder
implements PdfPTableEventAfterSplit {
    protected ArrayList<PdfPTableEvent> events = new ArrayList();

    public void addTableEvent(PdfPTableEvent pdfPTableEvent) {
        this.events.add(pdfPTableEvent);
    }

    @Override
    public void afterSplitTable(PdfPTable pdfPTable, PdfPRow pdfPRow, int n) {
        for (PdfPTableEvent pdfPTableEvent : this.events) {
            if (!(pdfPTableEvent instanceof PdfPTableEventAfterSplit)) continue;
            ((PdfPTableEventAfterSplit)pdfPTableEvent).afterSplitTable(pdfPTable, pdfPRow, n);
        }
    }

    @Override
    public void splitTable(PdfPTable pdfPTable) {
        for (PdfPTableEvent pdfPTableEvent : this.events) {
            if (!(pdfPTableEvent instanceof PdfPTableEventSplit)) continue;
            ((PdfPTableEventSplit)pdfPTableEvent).splitTable(pdfPTable);
        }
    }

    @Override
    public void tableLayout(PdfPTable pdfPTable, float[][] arrf, float[] arrf2, int n, int n2, PdfContentByte[] arrpdfContentByte) {
        Iterator<PdfPTableEvent> iterator = this.events.iterator();
        while (iterator.hasNext()) {
            iterator.next().tableLayout(pdfPTable, arrf, arrf2, n, n2, arrpdfContentByte);
        }
    }
}

