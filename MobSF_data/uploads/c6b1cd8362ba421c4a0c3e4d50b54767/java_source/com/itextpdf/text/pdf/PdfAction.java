/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf;

import com.itextpdf.text.error_messages.MessageLocalization;
import com.itextpdf.text.pdf.PdfAnnotation;
import com.itextpdf.text.pdf.PdfArray;
import com.itextpdf.text.pdf.PdfBoolean;
import com.itextpdf.text.pdf.PdfDestination;
import com.itextpdf.text.pdf.PdfDictionary;
import com.itextpdf.text.pdf.PdfEncodings;
import com.itextpdf.text.pdf.PdfFileSpecification;
import com.itextpdf.text.pdf.PdfIndirectObject;
import com.itextpdf.text.pdf.PdfIndirectReference;
import com.itextpdf.text.pdf.PdfLayer;
import com.itextpdf.text.pdf.PdfLiteral;
import com.itextpdf.text.pdf.PdfName;
import com.itextpdf.text.pdf.PdfNumber;
import com.itextpdf.text.pdf.PdfObject;
import com.itextpdf.text.pdf.PdfRendition;
import com.itextpdf.text.pdf.PdfStream;
import com.itextpdf.text.pdf.PdfString;
import com.itextpdf.text.pdf.PdfWriter;
import com.itextpdf.text.pdf.collection.PdfTargetDictionary;
import java.io.IOException;
import java.io.OutputStream;
import java.net.URL;
import java.util.ArrayList;

public class PdfAction
extends PdfDictionary {
    public static final int FIRSTPAGE = 1;
    public static final int LASTPAGE = 4;
    public static final int NEXTPAGE = 3;
    public static final int PREVPAGE = 2;
    public static final int PRINTDIALOG = 5;
    public static final int RESET_EXCLUDE = 1;
    public static final int SUBMIT_CANONICAL_FORMAT = 512;
    public static final int SUBMIT_COORDINATES = 16;
    public static final int SUBMIT_EMBED_FORM = 8196;
    public static final int SUBMIT_EXCLUDE = 1;
    public static final int SUBMIT_EXCL_F_KEY = 2048;
    public static final int SUBMIT_EXCL_NON_USER_ANNOTS = 1024;
    public static final int SUBMIT_HTML_FORMAT = 4;
    public static final int SUBMIT_HTML_GET = 8;
    public static final int SUBMIT_INCLUDE_ANNOTATIONS = 128;
    public static final int SUBMIT_INCLUDE_APPEND_SAVES = 64;
    public static final int SUBMIT_INCLUDE_NO_VALUE_FIELDS = 2;
    public static final int SUBMIT_PDF = 256;
    public static final int SUBMIT_XFDF = 32;

    public PdfAction() {
    }

    public PdfAction(int n) {
        this.put(PdfName.S, PdfName.NAMED);
        switch (n) {
            default: {
                throw new RuntimeException(MessageLocalization.getComposedMessage("invalid.named.action", new Object[0]));
            }
            case 5: {
                this.put(PdfName.S, PdfName.JAVASCRIPT);
                this.put(PdfName.JS, new PdfString("this.print(true);\r"));
                return;
            }
            case 4: {
                this.put(PdfName.N, PdfName.LASTPAGE);
                return;
            }
            case 3: {
                this.put(PdfName.N, PdfName.NEXTPAGE);
                return;
            }
            case 2: {
                this.put(PdfName.N, PdfName.PREVPAGE);
                return;
            }
            case 1: 
        }
        this.put(PdfName.N, PdfName.FIRSTPAGE);
    }

    PdfAction(PdfIndirectReference pdfIndirectReference) {
        this.put(PdfName.S, PdfName.GOTO);
        this.put(PdfName.D, pdfIndirectReference);
    }

    public PdfAction(String string2) {
        this(string2, false);
    }

    public PdfAction(String object, int n) {
        this.put(PdfName.S, PdfName.GOTOR);
        this.put(PdfName.F, new PdfString((String)object));
        object = PdfName.D;
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("[");
        stringBuilder.append(n - 1);
        stringBuilder.append(" /FitH 10000]");
        this.put((PdfName)object, new PdfLiteral(stringBuilder.toString()));
    }

    public PdfAction(String string2, String string3) {
        this.put(PdfName.S, PdfName.GOTOR);
        this.put(PdfName.F, new PdfString(string2));
        this.put(PdfName.D, new PdfString(string3));
    }

    public PdfAction(String string2, String string3, String string4, String string5) {
        this.put(PdfName.S, PdfName.LAUNCH);
        if (string3 == null && string4 == null && string5 == null) {
            this.put(PdfName.F, new PdfString(string2));
            return;
        }
        PdfDictionary pdfDictionary = new PdfDictionary();
        pdfDictionary.put(PdfName.F, new PdfString(string2));
        if (string3 != null) {
            pdfDictionary.put(PdfName.P, new PdfString(string3));
        }
        if (string4 != null) {
            pdfDictionary.put(PdfName.O, new PdfString(string4));
        }
        if (string5 != null) {
            pdfDictionary.put(PdfName.D, new PdfString(string5));
        }
        this.put(PdfName.WIN, pdfDictionary);
    }

    public PdfAction(String string2, boolean bl) {
        this.put(PdfName.S, PdfName.URI);
        this.put(PdfName.URI, new PdfString(string2));
        if (bl) {
            this.put(PdfName.ISMAP, PdfBoolean.PDFTRUE);
        }
    }

    public PdfAction(URL uRL) {
        this(uRL.toExternalForm());
    }

    public PdfAction(URL uRL, boolean bl) {
        this(uRL.toExternalForm(), bl);
    }

    static PdfArray buildArray(Object[] arrobject) {
        PdfArray pdfArray = new PdfArray();
        for (int i = 0; i < arrobject.length; ++i) {
            Object object = arrobject[i];
            if (object instanceof String) {
                pdfArray.add(new PdfString((String)object));
                continue;
            }
            if (object instanceof PdfAnnotation) {
                pdfArray.add(((PdfAnnotation)object).getIndirectReference());
                continue;
            }
            throw new RuntimeException(MessageLocalization.getComposedMessage("the.array.must.contain.string.or.pdfannotation", new Object[0]));
        }
        return pdfArray;
    }

    public static PdfAction createHide(PdfAnnotation pdfAnnotation, boolean bl) {
        return PdfAction.createHide(pdfAnnotation.getIndirectReference(), bl);
    }

    static PdfAction createHide(PdfObject pdfObject, boolean bl) {
        PdfAction pdfAction = new PdfAction();
        pdfAction.put(PdfName.S, PdfName.HIDE);
        pdfAction.put(PdfName.T, pdfObject);
        if (!bl) {
            pdfAction.put(PdfName.H, PdfBoolean.PDFFALSE);
        }
        return pdfAction;
    }

    public static PdfAction createHide(String string2, boolean bl) {
        return PdfAction.createHide(new PdfString(string2), bl);
    }

    public static PdfAction createHide(Object[] arrobject, boolean bl) {
        return PdfAction.createHide(PdfAction.buildArray(arrobject), bl);
    }

    public static PdfAction createImportData(String string2) {
        PdfAction pdfAction = new PdfAction();
        pdfAction.put(PdfName.S, PdfName.IMPORTDATA);
        pdfAction.put(PdfName.F, new PdfString(string2));
        return pdfAction;
    }

    public static PdfAction createLaunch(String string2, String string3, String string4, String string5) {
        return new PdfAction(string2, string3, string4, string5);
    }

    public static PdfAction createResetForm(Object[] arrobject, int n) {
        PdfAction pdfAction = new PdfAction();
        pdfAction.put(PdfName.S, PdfName.RESETFORM);
        if (arrobject != null) {
            pdfAction.put(PdfName.FIELDS, PdfAction.buildArray(arrobject));
        }
        pdfAction.put(PdfName.FLAGS, new PdfNumber(n));
        return pdfAction;
    }

    public static PdfAction createSubmitForm(String string2, Object[] arrobject, int n) {
        PdfAction pdfAction = new PdfAction();
        pdfAction.put(PdfName.S, PdfName.SUBMITFORM);
        PdfDictionary pdfDictionary = new PdfDictionary();
        pdfDictionary.put(PdfName.F, new PdfString(string2));
        pdfDictionary.put(PdfName.FS, PdfName.URL);
        pdfAction.put(PdfName.F, pdfDictionary);
        if (arrobject != null) {
            pdfAction.put(PdfName.FIELDS, PdfAction.buildArray(arrobject));
        }
        pdfAction.put(PdfName.FLAGS, new PdfNumber(n));
        return pdfAction;
    }

    public static PdfAction gotoEmbedded(String string2, PdfTargetDictionary pdfTargetDictionary, PdfObject pdfObject, boolean bl) {
        PdfAction pdfAction = new PdfAction();
        pdfAction.put(PdfName.S, PdfName.GOTOE);
        pdfAction.put(PdfName.T, pdfTargetDictionary);
        pdfAction.put(PdfName.D, pdfObject);
        pdfAction.put(PdfName.NEWWINDOW, new PdfBoolean(bl));
        if (string2 != null) {
            pdfAction.put(PdfName.F, new PdfString(string2));
        }
        return pdfAction;
    }

    public static PdfAction gotoEmbedded(String string2, PdfTargetDictionary pdfTargetDictionary, String string3, boolean bl, boolean bl2) {
        if (bl) {
            return PdfAction.gotoEmbedded(string2, pdfTargetDictionary, new PdfName(string3), bl2);
        }
        return PdfAction.gotoEmbedded(string2, pdfTargetDictionary, new PdfString(string3, "UnicodeBig"), bl2);
    }

    public static PdfAction gotoLocalPage(int n, PdfDestination pdfDestination, PdfWriter object) {
        object = object.getPageReference(n);
        pdfDestination = new PdfDestination(pdfDestination);
        pdfDestination.addPage((PdfIndirectReference)object);
        object = new PdfAction();
        object.put(PdfName.S, PdfName.GOTO);
        object.put(PdfName.D, pdfDestination);
        return object;
    }

    public static PdfAction gotoLocalPage(String string2, boolean bl) {
        PdfAction pdfAction = new PdfAction();
        pdfAction.put(PdfName.S, PdfName.GOTO);
        if (bl) {
            pdfAction.put(PdfName.D, new PdfName(string2));
            return pdfAction;
        }
        pdfAction.put(PdfName.D, new PdfString(string2, "UnicodeBig"));
        return pdfAction;
    }

    public static PdfAction gotoRemotePage(String string2, String string3, boolean bl, boolean bl2) {
        PdfAction pdfAction = new PdfAction();
        pdfAction.put(PdfName.F, new PdfString(string2));
        pdfAction.put(PdfName.S, PdfName.GOTOR);
        if (bl) {
            pdfAction.put(PdfName.D, new PdfName(string3));
        } else {
            pdfAction.put(PdfName.D, new PdfString(string3, "UnicodeBig"));
        }
        if (bl2) {
            pdfAction.put(PdfName.NEWWINDOW, PdfBoolean.PDFTRUE);
        }
        return pdfAction;
    }

    public static PdfAction javaScript(String string2, PdfWriter pdfWriter) {
        return PdfAction.javaScript(string2, pdfWriter, false);
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public static PdfAction javaScript(String string2, PdfWriter pdfWriter, boolean bl) {
        PdfAction pdfAction = new PdfAction();
        pdfAction.put(PdfName.S, PdfName.JAVASCRIPT);
        if (bl && string2.length() < 50) {
            pdfAction.put(PdfName.JS, new PdfString(string2, "UnicodeBig"));
            return pdfAction;
        }
        if (!bl && string2.length() < 100) {
            pdfAction.put(PdfName.JS, new PdfString(string2));
            return pdfAction;
        }
        Object object = bl ? "UnicodeBig" : "PDF";
        try {
            object = new PdfStream(PdfEncodings.convertToBytes(string2, (String)object));
            object.flateCompress(pdfWriter.getCompressionLevel());
            pdfAction.put(PdfName.JS, pdfWriter.addToBody((PdfObject)object).getIndirectReference());
            return pdfAction;
        }
        catch (Exception exception) {}
        pdfAction.put(PdfName.JS, new PdfString(string2));
        return pdfAction;
    }

    public static PdfAction rendition(String string2, PdfFileSpecification pdfFileSpecification, String string3, PdfIndirectReference pdfIndirectReference) throws IOException {
        PdfAction pdfAction = new PdfAction();
        pdfAction.put(PdfName.S, PdfName.RENDITION);
        pdfAction.put(PdfName.R, new PdfRendition(string2, pdfFileSpecification, string3));
        pdfAction.put(new PdfName("OP"), new PdfNumber(0));
        pdfAction.put(new PdfName("AN"), pdfIndirectReference);
        return pdfAction;
    }

    public static PdfAction setOCGstate(ArrayList<Object> arrayList, boolean bl) {
        PdfAction pdfAction = new PdfAction();
        pdfAction.put(PdfName.S, PdfName.SETOCGSTATE);
        PdfArray pdfArray = new PdfArray();
        for (int i = 0; i < arrayList.size(); ++i) {
            Object object;
            block8 : {
                block12 : {
                    block10 : {
                        block11 : {
                            block9 : {
                                object = arrayList.get(i);
                                if (object == null) continue;
                                if (object instanceof PdfIndirectReference) {
                                    pdfArray.add((PdfIndirectReference)object);
                                    continue;
                                }
                                if (object instanceof PdfLayer) {
                                    pdfArray.add(((PdfLayer)object).getRef());
                                    continue;
                                }
                                if (object instanceof PdfName) {
                                    pdfArray.add((PdfName)object);
                                    continue;
                                }
                                if (!(object instanceof String)) break block8;
                                if (!(object = (String)object).equalsIgnoreCase("on")) break block9;
                                object = PdfName.ON;
                                break block10;
                            }
                            if (!object.equalsIgnoreCase("off")) break block11;
                            object = PdfName.OFF;
                            break block10;
                        }
                        if (!object.equalsIgnoreCase("toggle")) break block12;
                        object = PdfName.TOGGLE;
                    }
                    pdfArray.add((PdfObject)object);
                    continue;
                }
                throw new IllegalArgumentException(MessageLocalization.getComposedMessage("a.string.1.was.passed.in.state.only.on.off.and.toggle.are.allowed", object));
            }
            throw new IllegalArgumentException(MessageLocalization.getComposedMessage("invalid.type.was.passed.in.state.1", object.getClass().getName()));
        }
        pdfAction.put(PdfName.STATE, pdfArray);
        if (!bl) {
            pdfAction.put(PdfName.PRESERVERB, PdfBoolean.PDFFALSE);
        }
        return pdfAction;
    }

    public void next(PdfAction pdfAction) {
        PdfObject pdfObject = this.get(PdfName.NEXT);
        if (pdfObject == null) {
            this.put(PdfName.NEXT, pdfAction);
            return;
        }
        if (pdfObject.isDictionary()) {
            pdfObject = new PdfArray(pdfObject);
            pdfObject.add(pdfAction);
            this.put(PdfName.NEXT, pdfObject);
            return;
        }
        ((PdfArray)pdfObject).add(pdfAction);
    }

    @Override
    public void toPdf(PdfWriter pdfWriter, OutputStream outputStream) throws IOException {
        PdfWriter.checkPdfIsoConformance(pdfWriter, 14, this);
        super.toPdf(pdfWriter, outputStream);
    }
}

