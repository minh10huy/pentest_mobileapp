/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.pdf.internal;

import com.itextpdf.text.BaseColor;
import com.itextpdf.text.error_messages.MessageLocalization;
import com.itextpdf.text.pdf.BaseFont;
import com.itextpdf.text.pdf.ExtendedColor;
import com.itextpdf.text.pdf.PatternColor;
import com.itextpdf.text.pdf.PdfArray;
import com.itextpdf.text.pdf.PdfDictionary;
import com.itextpdf.text.pdf.PdfGState;
import com.itextpdf.text.pdf.PdfImage;
import com.itextpdf.text.pdf.PdfName;
import com.itextpdf.text.pdf.PdfNumber;
import com.itextpdf.text.pdf.PdfObject;
import com.itextpdf.text.pdf.PdfPatternPainter;
import com.itextpdf.text.pdf.PdfShading;
import com.itextpdf.text.pdf.PdfShadingPattern;
import com.itextpdf.text.pdf.PdfSpotColor;
import com.itextpdf.text.pdf.PdfWriter;
import com.itextpdf.text.pdf.PdfXConformanceException;
import com.itextpdf.text.pdf.ShadingColor;
import com.itextpdf.text.pdf.SpotColor;
import com.itextpdf.text.pdf.interfaces.PdfXConformance;

public class PdfXConformanceImp
implements PdfXConformance {
    protected int pdfxConformance = 0;
    protected PdfWriter writer;

    public PdfXConformanceImp(PdfWriter pdfWriter) {
        this.writer = pdfWriter;
    }

    @Override
    public void checkPdfIsoConformance(int n, Object object) {
        if (this.writer != null) {
            if (!this.writer.isPdfX()) {
                return;
            }
            int n2 = this.writer.getPDFXConformance();
            switch (n) {
                default: {
                    return;
                }
                case 7: {
                    throw new PdfXConformanceException(MessageLocalization.getComposedMessage("layers.are.not.allowed", new Object[0]));
                }
                case 6: {
                    double d;
                    object = (PdfDictionary)object;
                    if (object == null) {
                        return;
                    }
                    PdfObject pdfObject = object.get(PdfName.BM);
                    if (pdfObject != null && !PdfGState.BM_NORMAL.equals(pdfObject) && !PdfGState.BM_COMPATIBLE.equals(pdfObject)) {
                        throw new PdfXConformanceException(MessageLocalization.getComposedMessage("blend.mode.1.not.allowed", pdfObject.toString()));
                    }
                    pdfObject = object.get(PdfName.CA);
                    if (pdfObject != null && (d = ((PdfNumber)pdfObject).doubleValue()) != 1.0) {
                        throw new PdfXConformanceException(MessageLocalization.getComposedMessage("transparency.is.not.allowed.ca.eq.1", String.valueOf(d)));
                    }
                    if ((object = object.get(PdfName.ca)) == null || (d = ((PdfNumber)object).doubleValue()) == 1.0) break;
                    throw new PdfXConformanceException(MessageLocalization.getComposedMessage("transparency.is.not.allowed.ca.eq.1", String.valueOf(d)));
                }
                case 5: {
                    object = (PdfImage)object;
                    if (object.get(PdfName.SMASK) != null) {
                        throw new PdfXConformanceException(MessageLocalization.getComposedMessage("the.smask.key.is.not.allowed.in.images", new Object[0]));
                    }
                    if (n2 != 1) {
                        return;
                    }
                    if ((object = object.get(PdfName.COLORSPACE)) == null) {
                        return;
                    }
                    if (object.isName()) {
                        if (!PdfName.DEVICERGB.equals(object)) break;
                        throw new PdfXConformanceException(MessageLocalization.getComposedMessage("colorspace.rgb.is.not.allowed", new Object[0]));
                    }
                    if (!object.isArray() || !PdfName.CALRGB.equals(((PdfArray)object).getPdfObject(0))) break;
                    throw new PdfXConformanceException(MessageLocalization.getComposedMessage("colorspace.calrgb.is.not.allowed", new Object[0]));
                }
                case 4: {
                    object = (BaseFont)object;
                    if (object.isEmbedded()) break;
                    throw new PdfXConformanceException(MessageLocalization.getComposedMessage("all.the.fonts.must.be.embedded.this.one.isn.t.1", object.getPostscriptFontName()));
                }
                case 3: {
                    if (n2 != 1) break;
                    throw new PdfXConformanceException(MessageLocalization.getComposedMessage("colorspace.rgb.is.not.allowed", new Object[0]));
                }
                case 1: {
                    if (n2 != 1) {
                        return;
                    }
                    if (object instanceof ExtendedColor) {
                        object = (ExtendedColor)object;
                        switch (object.getType()) {
                            default: {
                                return;
                            }
                            case 5: {
                                this.checkPdfIsoConformance(1, ((ShadingColor)object).getPdfShadingPattern().getShading().getColorSpace());
                                return;
                            }
                            case 4: {
                                this.checkPdfIsoConformance(1, ((PatternColor)object).getPainter().getDefaultColor());
                                return;
                            }
                            case 3: {
                                this.checkPdfIsoConformance(1, ((SpotColor)object).getPdfSpotColor().getAlternativeCS());
                                return;
                            }
                            case 1: 
                            case 2: {
                                return;
                            }
                            case 0: 
                        }
                        throw new PdfXConformanceException(MessageLocalization.getComposedMessage("colorspace.rgb.is.not.allowed", new Object[0]));
                    }
                    if (!(object instanceof BaseColor)) break;
                    throw new PdfXConformanceException(MessageLocalization.getComposedMessage("colorspace.rgb.is.not.allowed", new Object[0]));
                }
                case 2: 
            }
            return;
        }
    }

    @Override
    public int getPDFXConformance() {
        return this.pdfxConformance;
    }

    @Override
    public boolean isPdfIso() {
        return this.isPdfX();
    }

    @Override
    public boolean isPdfX() {
        if (this.pdfxConformance != 0) {
            return true;
        }
        return false;
    }

    public boolean isPdfX1A2001() {
        if (this.pdfxConformance == 1) {
            return true;
        }
        return false;
    }

    public boolean isPdfX32002() {
        if (this.pdfxConformance == 2) {
            return true;
        }
        return false;
    }

    @Override
    public void setPDFXConformance(int n) {
        this.pdfxConformance = n;
    }
}

