/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.io;

import com.itextpdf.text.io.RandomAccessSource;
import java.io.IOException;

public class GetBufferedRandomAccessSource
implements RandomAccessSource {
    private final byte[] getBuffer;
    private long getBufferEnd = -1L;
    private long getBufferStart = -1L;
    private final RandomAccessSource source;

    public GetBufferedRandomAccessSource(RandomAccessSource randomAccessSource) {
        this.source = randomAccessSource;
        this.getBuffer = new byte[(int)Math.min(Math.max(randomAccessSource.length() / 4L, 1L), 4096L)];
        this.getBufferStart = -1L;
        this.getBufferEnd = -1L;
    }

    @Override
    public void close() throws IOException {
        this.source.close();
        this.getBufferStart = -1L;
        this.getBufferEnd = -1L;
    }

    @Override
    public int get(long l) throws IOException {
        int n;
        if (l < this.getBufferStart || l > this.getBufferEnd) {
            n = this.source.get(l, this.getBuffer, 0, this.getBuffer.length);
            if (n == -1) {
                return -1;
            }
            this.getBufferStart = l;
            this.getBufferEnd = l + (long)n - 1L;
        }
        n = (int)(l - this.getBufferStart);
        return this.getBuffer[n] & 255;
    }

    @Override
    public int get(long l, byte[] arrby, int n, int n2) throws IOException {
        return this.source.get(l, arrby, n, n2);
    }

    @Override
    public long length() {
        return this.source.length();
    }
}

