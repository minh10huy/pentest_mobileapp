/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.io;

import com.itextpdf.text.io.RandomAccessSource;
import java.io.ByteArrayOutputStream;
import java.io.EOFException;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

public final class StreamUtil {
    private StreamUtil() {
    }

    public static void CopyBytes(RandomAccessSource randomAccessSource, long l, long l2, OutputStream outputStream) throws IOException {
        if (l2 <= 0L) {
            return;
        }
        byte[] arrby = new byte[8192];
        while (l2 > 0L) {
            long l3 = randomAccessSource.get(l, arrby, 0, (int)Math.min((long)arrby.length, l2));
            if (l3 <= 0L) {
                throw new EOFException();
            }
            outputStream.write(arrby, 0, (int)l3);
            l2 -= l3;
            l += l3;
        }
    }

    public static InputStream getResourceStream(String string2) {
        return StreamUtil.getResourceStream(string2, null);
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public static InputStream getResourceStream(String object, ClassLoader object2) {
        Object object3 = object;
        if (object.startsWith("/")) {
            object3 = object.substring(1);
        }
        object = null;
        if (object2 != null) {
            object = object2 = object2.getResourceAsStream((String)object3);
            if (object2 != null) {
                return object2;
            }
        }
        try {
            ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
            object2 = object;
            if (classLoader != null) {
                object2 = classLoader.getResourceAsStream((String)object3);
            }
        }
        catch (Throwable throwable) {
            object2 = object;
        }
        object = object2;
        if (object2 == null) {
            object = new StringBuilder();
            object.append("/");
            object.append((String)object3);
            object = StreamUtil.class.getResourceAsStream(object.toString());
        }
        object2 = object;
        if (object != null) return object2;
        return ClassLoader.getSystemResourceAsStream((String)object3);
    }

    public static byte[] inputStreamToArray(InputStream inputStream) throws IOException {
        byte[] arrby = new byte[8192];
        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        do {
            int n;
            if ((n = inputStream.read(arrby)) < 1) {
                byteArrayOutputStream.close();
                return byteArrayOutputStream.toByteArray();
            }
            byteArrayOutputStream.write(arrby, 0, n);
        } while (true);
    }
}

