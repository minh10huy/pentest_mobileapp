/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.io;

import com.itextpdf.text.io.GroupedRandomAccessSource;
import com.itextpdf.text.io.MappedChannelRandomAccessSource;
import com.itextpdf.text.io.RandomAccessSource;
import java.io.IOException;
import java.nio.channels.FileChannel;
import java.util.Iterator;
import java.util.LinkedList;

class PagedChannelRandomAccessSource
extends GroupedRandomAccessSource
implements RandomAccessSource {
    public static final int DEFAULT_MAX_OPEN_BUFFERS = 16;
    public static final int DEFAULT_TOTAL_BUFSIZE = 67108864;
    private final int bufferSize;
    private final FileChannel channel;
    private final MRU<RandomAccessSource> mru;

    public PagedChannelRandomAccessSource(FileChannel fileChannel) throws IOException {
        this(fileChannel, 67108864, 16);
    }

    public PagedChannelRandomAccessSource(FileChannel fileChannel, int n, int n2) throws IOException {
        super(PagedChannelRandomAccessSource.buildSources(fileChannel, n /= n2));
        this.channel = fileChannel;
        this.bufferSize = n;
        this.mru = new MRU(n2);
    }

    private static RandomAccessSource[] buildSources(FileChannel fileChannel, int n) throws IOException {
        long l = fileChannel.size();
        if (l <= 0L) {
            throw new IOException("File size must be greater than zero");
        }
        long l2 = n;
        int n2 = (int)(l / l2);
        int n3 = 0;
        n = l % l2 == 0L ? 0 : 1;
        RandomAccessSource[] arrrandomAccessSource = new MappedChannelRandomAccessSource[n2 += n];
        for (n = n3; n < n2; ++n) {
            long l3 = (long)n * l2;
            arrrandomAccessSource[n] = new MappedChannelRandomAccessSource(fileChannel, l3, Math.min(l - l3, l2));
        }
        return arrrandomAccessSource;
    }

    @Override
    public void close() throws IOException {
        super.close();
        this.channel.close();
    }

    @Override
    protected int getStartingSourceIndex(long l) {
        return (int)(l / (long)this.bufferSize);
    }

    @Override
    protected void sourceInUse(RandomAccessSource randomAccessSource) throws IOException {
        ((MappedChannelRandomAccessSource)randomAccessSource).open();
    }

    @Override
    protected void sourceReleased(RandomAccessSource randomAccessSource) throws IOException {
        if ((randomAccessSource = this.mru.enqueue(randomAccessSource)) != null) {
            randomAccessSource.close();
        }
    }

    private static class MRU<E> {
        private final int limit;
        private LinkedList<E> queue = new LinkedList();

        public MRU(int n) {
            this.limit = n;
        }

        public E enqueue(E e) {
            if (this.queue.size() > 0 && this.queue.getFirst() == e) {
                return null;
            }
            Iterator<E> iterator = this.queue.iterator();
            while (iterator.hasNext()) {
                if (e != iterator.next()) continue;
                iterator.remove();
                this.queue.addFirst(e);
                return null;
            }
            this.queue.addFirst(e);
            if (this.queue.size() > this.limit) {
                return this.queue.removeLast();
            }
            return null;
        }
    }

}

