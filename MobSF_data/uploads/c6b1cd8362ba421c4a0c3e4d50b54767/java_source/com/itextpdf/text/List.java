/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text;

import com.itextpdf.text.AccessibleElementId;
import com.itextpdf.text.Chunk;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.ElementListener;
import com.itextpdf.text.Font;
import com.itextpdf.text.ListItem;
import com.itextpdf.text.TextElementArray;
import com.itextpdf.text.api.Indentable;
import com.itextpdf.text.factories.RomanAlphabetFactory;
import com.itextpdf.text.pdf.PdfName;
import com.itextpdf.text.pdf.PdfObject;
import com.itextpdf.text.pdf.interfaces.IAccessibleElement;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;

public class List
implements TextElementArray,
Indentable,
IAccessibleElement {
    public static final boolean ALPHABETICAL = true;
    public static final boolean LOWERCASE = true;
    public static final boolean NUMERICAL = false;
    public static final boolean ORDERED = true;
    public static final boolean UNORDERED = false;
    public static final boolean UPPERCASE = false;
    protected HashMap<PdfName, PdfObject> accessibleAttributes = null;
    protected boolean alignindent = false;
    protected boolean autoindent = false;
    protected int first = 1;
    private AccessibleElementId id = null;
    protected float indentationLeft = 0.0f;
    protected float indentationRight = 0.0f;
    protected boolean lettered = false;
    protected ArrayList<Element> list = new ArrayList();
    protected boolean lowercase = false;
    protected boolean numbered = false;
    protected String postSymbol = ". ";
    protected String preSymbol = "";
    protected PdfName role = PdfName.L;
    protected Chunk symbol = new Chunk("- ");
    protected float symbolIndent = 0.0f;

    public List() {
        this(false, false);
    }

    public List(float f) {
        this.symbolIndent = f;
    }

    public List(boolean bl) {
        this(bl, false);
    }

    public List(boolean bl, float f) {
        this(bl, false, f);
    }

    public List(boolean bl, boolean bl2) {
        this.numbered = bl;
        this.lettered = bl2;
        this.autoindent = true;
        this.alignindent = true;
    }

    public List(boolean bl, boolean bl2, float f) {
        this.numbered = bl;
        this.lettered = bl2;
        this.symbolIndent = f;
    }

    @Override
    public boolean add(Element element) {
        if (element instanceof ListItem) {
            element = (ListItem)element;
            if (!this.numbered && !this.lettered) {
                element.setListSymbol(this.symbol);
            } else {
                Chunk chunk = new Chunk(this.preSymbol, this.symbol.getFont());
                chunk.setAttributes(this.symbol.getAttributes());
                int n = this.first + this.list.size();
                if (this.lettered) {
                    chunk.append(RomanAlphabetFactory.getString(n, this.lowercase));
                } else {
                    chunk.append(String.valueOf(n));
                }
                chunk.append(this.postSymbol);
                element.setListSymbol(chunk);
            }
            element.setIndentationLeft(this.symbolIndent, this.autoindent);
            element.setIndentationRight(0.0f);
            return this.list.add(element);
        }
        if (element instanceof List) {
            element = (List)element;
            element.setIndentationLeft(element.getIndentationLeft() + this.symbolIndent);
            --this.first;
            return this.list.add(element);
        }
        return false;
    }

    public boolean add(String string2) {
        if (string2 != null) {
            return this.add(new ListItem(string2));
        }
        return false;
    }

    public List cloneShallow() {
        List list = new List();
        this.populateProperties(list);
        return list;
    }

    @Override
    public PdfObject getAccessibleAttribute(PdfName pdfName) {
        if (this.accessibleAttributes != null) {
            return this.accessibleAttributes.get(pdfName);
        }
        return null;
    }

    @Override
    public HashMap<PdfName, PdfObject> getAccessibleAttributes() {
        return this.accessibleAttributes;
    }

    @Override
    public java.util.List<Chunk> getChunks() {
        ArrayList<Chunk> arrayList = new ArrayList<Chunk>();
        Iterator<Element> iterator = this.list.iterator();
        while (iterator.hasNext()) {
            arrayList.addAll(iterator.next().getChunks());
        }
        return arrayList;
    }

    public int getFirst() {
        return this.first;
    }

    public ListItem getFirstItem() {
        Element element = this.list.size() > 0 ? this.list.get(0) : null;
        if (element != null) {
            if (element instanceof ListItem) {
                return (ListItem)element;
            }
            if (element instanceof List) {
                return ((List)element).getFirstItem();
            }
        }
        return null;
    }

    @Override
    public AccessibleElementId getId() {
        if (this.id == null) {
            this.id = new AccessibleElementId();
        }
        return this.id;
    }

    @Override
    public float getIndentationLeft() {
        return this.indentationLeft;
    }

    @Override
    public float getIndentationRight() {
        return this.indentationRight;
    }

    public ArrayList<Element> getItems() {
        return this.list;
    }

    public ListItem getLastItem() {
        Element element = this.list.size() > 0 ? this.list.get(this.list.size() - 1) : null;
        if (element != null) {
            if (element instanceof ListItem) {
                return (ListItem)element;
            }
            if (element instanceof List) {
                return ((List)element).getLastItem();
            }
        }
        return null;
    }

    public String getPostSymbol() {
        return this.postSymbol;
    }

    public String getPreSymbol() {
        return this.preSymbol;
    }

    @Override
    public PdfName getRole() {
        return this.role;
    }

    public Chunk getSymbol() {
        return this.symbol;
    }

    public float getSymbolIndent() {
        return this.symbolIndent;
    }

    public float getTotalLeading() {
        if (this.list.size() < 1) {
            return -1.0f;
        }
        return ((ListItem)this.list.get(0)).getTotalLeading();
    }

    public boolean isAlignindent() {
        return this.alignindent;
    }

    public boolean isAutoindent() {
        return this.autoindent;
    }

    @Override
    public boolean isContent() {
        return true;
    }

    public boolean isEmpty() {
        return this.list.isEmpty();
    }

    @Override
    public boolean isInline() {
        return false;
    }

    public boolean isLettered() {
        return this.lettered;
    }

    public boolean isLowercase() {
        return this.lowercase;
    }

    @Override
    public boolean isNestable() {
        return true;
    }

    public boolean isNumbered() {
        return this.numbered;
    }

    public void normalizeIndentation() {
        Iterator<Element> iterator = this.list.iterator();
        float f = 0.0f;
        while (iterator.hasNext()) {
            Element element = iterator.next();
            if (!(element instanceof ListItem)) continue;
            f = Math.max(f, ((ListItem)element).getIndentationLeft());
        }
        for (Element element : this.list) {
            if (!(element instanceof ListItem)) continue;
            ((ListItem)element).setIndentationLeft(f);
        }
    }

    protected void populateProperties(List list) {
        list.indentationLeft = this.indentationLeft;
        list.indentationRight = this.indentationRight;
        list.autoindent = this.autoindent;
        list.alignindent = this.alignindent;
        list.symbolIndent = this.symbolIndent;
        list.symbol = this.symbol;
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    @Override
    public boolean process(ElementListener elementListener) {
        try {
            Iterator<Element> iterator = this.list.iterator();
            while (iterator.hasNext()) {
                elementListener.add(iterator.next());
            }
            return true;
        }
        catch (DocumentException documentException) {
            return false;
        }
    }

    @Override
    public void setAccessibleAttribute(PdfName pdfName, PdfObject pdfObject) {
        if (this.accessibleAttributes == null) {
            this.accessibleAttributes = new HashMap();
        }
        this.accessibleAttributes.put(pdfName, pdfObject);
    }

    public void setAlignindent(boolean bl) {
        this.alignindent = bl;
    }

    public void setAutoindent(boolean bl) {
        this.autoindent = bl;
    }

    public void setFirst(int n) {
        this.first = n;
    }

    @Override
    public void setId(AccessibleElementId accessibleElementId) {
        this.id = accessibleElementId;
    }

    @Override
    public void setIndentationLeft(float f) {
        this.indentationLeft = f;
    }

    @Override
    public void setIndentationRight(float f) {
        this.indentationRight = f;
    }

    public void setLettered(boolean bl) {
        this.lettered = bl;
    }

    public void setListSymbol(Chunk chunk) {
        this.symbol = chunk;
    }

    public void setListSymbol(String string2) {
        this.symbol = new Chunk(string2);
    }

    public void setLowercase(boolean bl) {
        this.lowercase = bl;
    }

    public void setNumbered(boolean bl) {
        this.numbered = bl;
    }

    public void setPostSymbol(String string2) {
        this.postSymbol = string2;
    }

    public void setPreSymbol(String string2) {
        this.preSymbol = string2;
    }

    @Override
    public void setRole(PdfName pdfName) {
        this.role = pdfName;
    }

    public void setSymbolIndent(float f) {
        this.symbolIndent = f;
    }

    public int size() {
        return this.list.size();
    }

    @Override
    public int type() {
        return 14;
    }
}

