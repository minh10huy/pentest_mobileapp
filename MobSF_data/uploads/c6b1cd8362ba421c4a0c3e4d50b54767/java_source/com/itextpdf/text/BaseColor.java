/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text;

import com.itextpdf.text.error_messages.MessageLocalization;

public class BaseColor {
    public static final BaseColor BLACK;
    public static final BaseColor BLUE;
    public static final BaseColor CYAN;
    public static final BaseColor DARK_GRAY;
    private static final double FACTOR = 0.7;
    public static final BaseColor GRAY;
    public static final BaseColor GREEN;
    public static final BaseColor LIGHT_GRAY;
    public static final BaseColor MAGENTA;
    public static final BaseColor ORANGE;
    public static final BaseColor PINK;
    public static final BaseColor RED;
    public static final BaseColor WHITE;
    public static final BaseColor YELLOW;
    private int value;

    static {
        WHITE = new BaseColor(255, 255, 255);
        LIGHT_GRAY = new BaseColor(192, 192, 192);
        GRAY = new BaseColor(128, 128, 128);
        DARK_GRAY = new BaseColor(64, 64, 64);
        BLACK = new BaseColor(0, 0, 0);
        RED = new BaseColor(255, 0, 0);
        PINK = new BaseColor(255, 175, 175);
        ORANGE = new BaseColor(255, 200, 0);
        YELLOW = new BaseColor(255, 255, 0);
        GREEN = new BaseColor(0, 255, 0);
        MAGENTA = new BaseColor(255, 0, 255);
        CYAN = new BaseColor(0, 255, 255);
        BLUE = new BaseColor(0, 0, 255);
    }

    public BaseColor(float f, float f2, float f3) {
        this(f, f2, f3, 1.0f);
    }

    public BaseColor(float f, float f2, float f3, float f4) {
        this((int)((double)(f * 255.0f) + 0.5), (int)((double)(f2 * 255.0f) + 0.5), (int)((double)(f3 * 255.0f) + 0.5), (int)((double)(f4 * 255.0f) + 0.5));
    }

    public BaseColor(int n) {
        this.value = n;
    }

    public BaseColor(int n, int n2, int n3) {
        this(n, n2, n3, 255);
    }

    public BaseColor(int n, int n2, int n3, int n4) {
        this.setValue(n, n2, n3, n4);
    }

    private static void validate(int n) {
        if (n >= 0 && n <= 255) {
            return;
        }
        throw new IllegalArgumentException(MessageLocalization.getComposedMessage("color.value.outside.range.0.255", new Object[0]));
    }

    public BaseColor brighter() {
        int n = this.getRed();
        int n2 = this.getGreen();
        int n3 = this.getBlue();
        if (n == 0 && n2 == 0 && n3 == 0) {
            return new BaseColor(3, 3, 3);
        }
        int n4 = n;
        if (n > 0) {
            n4 = n;
            if (n < 3) {
                n4 = 3;
            }
        }
        n = n2;
        if (n2 > 0) {
            n = n2;
            if (n2 < 3) {
                n = 3;
            }
        }
        n2 = n3;
        if (n3 > 0) {
            n2 = n3;
            if (n3 < 3) {
                n2 = 3;
            }
        }
        return new BaseColor(Math.min((int)((double)n4 / 0.7), 255), Math.min((int)((double)n / 0.7), 255), Math.min((int)((double)n2 / 0.7), 255));
    }

    public BaseColor darker() {
        return new BaseColor(Math.max((int)((double)this.getRed() * 0.7), 0), Math.max((int)((double)this.getGreen() * 0.7), 0), Math.max((int)((double)this.getBlue() * 0.7), 0));
    }

    public boolean equals(Object object) {
        if (object instanceof BaseColor && ((BaseColor)object).value == this.value) {
            return true;
        }
        return false;
    }

    public int getAlpha() {
        return this.getRGB() >> 24 & 255;
    }

    public int getBlue() {
        return this.getRGB() >> 0 & 255;
    }

    public int getGreen() {
        return this.getRGB() >> 8 & 255;
    }

    public int getRGB() {
        return this.value;
    }

    public int getRed() {
        return this.getRGB() >> 16 & 255;
    }

    public int hashCode() {
        return this.value;
    }

    protected void setValue(int n, int n2, int n3, int n4) {
        BaseColor.validate(n);
        BaseColor.validate(n2);
        BaseColor.validate(n3);
        BaseColor.validate(n4);
        this.value = (n & 255) << 16 | (n4 & 255) << 24 | (n2 & 255) << 8 | (n3 & 255) << 0;
    }

    public String toString() {
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("Color value[");
        stringBuilder.append(Integer.toString(this.value, 16));
        stringBuilder.append("]");
        return stringBuilder.toString();
    }
}

