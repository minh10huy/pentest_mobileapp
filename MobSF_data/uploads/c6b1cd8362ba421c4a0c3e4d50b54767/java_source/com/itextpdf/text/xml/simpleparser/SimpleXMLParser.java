/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.xml.simpleparser;

import com.itextpdf.text.error_messages.MessageLocalization;
import com.itextpdf.text.xml.XMLUtil;
import com.itextpdf.text.xml.simpleparser.EntitiesToUnicode;
import com.itextpdf.text.xml.simpleparser.IanaEncodings;
import com.itextpdf.text.xml.simpleparser.NewLineHandler;
import com.itextpdf.text.xml.simpleparser.SimpleXMLDocHandler;
import com.itextpdf.text.xml.simpleparser.SimpleXMLDocHandlerComment;
import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.Reader;
import java.util.HashMap;
import java.util.Map;
import java.util.Stack;

public final class SimpleXMLParser {
    private static final int ATTRIBUTE_EQUAL = 13;
    private static final int ATTRIBUTE_KEY = 12;
    private static final int ATTRIBUTE_VALUE = 14;
    private static final int CDATA = 7;
    private static final int COMMENT = 8;
    private static final int ENTITY = 10;
    private static final int EXAMIN_TAG = 3;
    private static final int IN_CLOSETAG = 5;
    private static final int PI = 9;
    private static final int QUOTE = 11;
    private static final int SINGLE_TAG = 6;
    private static final int TAG_ENCOUNTERED = 2;
    private static final int TAG_EXAMINED = 4;
    private static final int TEXT = 1;
    private static final int UNKNOWN = 0;
    private String attributekey;
    private HashMap<String, String> attributes;
    private String attributevalue;
    private int character;
    private int columns;
    private final SimpleXMLDocHandlerComment comment;
    private final SimpleXMLDocHandler doc;
    private final StringBuffer entity;
    private boolean eol;
    private final boolean html;
    private int lines;
    private int nested;
    private NewLineHandler newLineHandler;
    private boolean nowhite;
    private int previousCharacter;
    private int quoteCharacter;
    private final Stack<Integer> stack;
    private int state;
    private String tag;
    private final StringBuffer text;

    private SimpleXMLParser(SimpleXMLDocHandler simpleXMLDocHandler, SimpleXMLDocHandlerComment simpleXMLDocHandlerComment, boolean bl) {
        RuntimeException runtimeException;
        super("d2j fail translate: java.lang.RuntimeException: can not merge I and Z\n\tat com.googlecode.dex2jar.ir.TypeClass.merge(TypeClass.java:100)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeRef.updateTypeClass(TypeTransformer.java:174)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.copyTypes(TypeTransformer.java:311)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.fixTypes(TypeTransformer.java:226)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.analyze(TypeTransformer.java:207)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer.transform(TypeTransformer.java:44)\n\tat com.googlecode.d2j.dex.Dex2jar$2.optimize(Dex2jar.java:162)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertCode(Dex2Asm.java:414)\n\tat com.googlecode.d2j.dex.ExDex2Asm.convertCode(ExDex2Asm.java:42)\n\tat com.googlecode.d2j.dex.Dex2jar$2.convertCode(Dex2jar.java:128)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertMethod(Dex2Asm.java:509)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertClass(Dex2Asm.java:406)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertDex(Dex2Asm.java:422)\n\tat com.googlecode.d2j.dex.Dex2jar.doTranslate(Dex2jar.java:172)\n\tat com.googlecode.d2j.dex.Dex2jar.to(Dex2jar.java:272)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.doCommandLine(Dex2jarCmd.java:108)\n\tat com.googlecode.dex2jar.tools.BaseCmd.doMain(BaseCmd.java:288)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.main(Dex2jarCmd.java:32)\n");
        throw runtimeException;
    }

    private void doTag() {
        if (this.tag == null) {
            this.tag = this.text.toString();
        }
        if (this.html) {
            this.tag = this.tag.toLowerCase();
        }
        this.text.setLength(0);
    }

    @Deprecated
    public static String escapeXML(String string2, boolean bl) {
        return XMLUtil.escapeXML(string2, bl);
    }

    private void flush() {
        switch (this.state) {
            default: {
                break;
            }
            case 12: {
                this.attributekey = this.text.toString();
                if (!this.html) break;
                this.attributekey = this.attributekey.toLowerCase();
                break;
            }
            case 11: 
            case 14: {
                this.attributevalue = this.text.toString();
                this.attributes.put(this.attributekey, this.attributevalue);
                break;
            }
            case 8: {
                if (this.comment == null) break;
                this.comment.comment(this.text.toString());
                break;
            }
            case 1: 
            case 7: {
                if (this.text.length() <= 0) break;
                this.doc.text(this.text.toString());
            }
        }
        this.text.setLength(0);
    }

    private static String getDeclaredEncoding(String string2) {
        if (string2 == null) {
            return null;
        }
        int n = string2.indexOf("encoding");
        if (n < 0) {
            return null;
        }
        int n2 = string2.indexOf(34, n);
        if (n2 == (n = string2.indexOf(39, n))) {
            return null;
        }
        if (n2 < 0 && n > 0 || n > 0 && n < n2) {
            n2 = n + 1;
            n = string2.indexOf(39, n2);
            if (n < 0) {
                return null;
            }
            return string2.substring(n2, n);
        }
        if (n < 0 && n2 > 0 || n2 > 0 && n2 < n) {
            if ((n = string2.indexOf(34, ++n2)) < 0) {
                return null;
            }
            return string2.substring(n2, n);
        }
        return null;
    }

    private void go(Reader reader) throws IOException {
        reader = reader instanceof BufferedReader ? (BufferedReader)reader : new BufferedReader(reader);
        this.doc.startDocument();
        block17 : do {
            if (this.previousCharacter == -1) {
                this.character = reader.read();
            } else {
                this.character = this.previousCharacter;
                this.previousCharacter = -1;
            }
            if (this.character == -1) {
                if (this.html) {
                    if (this.html && this.state == 1) {
                        this.flush();
                    }
                    this.doc.endDocument();
                    return;
                }
                this.throwException(MessageLocalization.getComposedMessage("missing.end.tag", new Object[0]));
                return;
            }
            if (this.character == 10 && this.eol) {
                this.eol = false;
                continue;
            }
            if (this.eol) {
                this.eol = false;
            } else if (this.character == 10) {
                ++this.lines;
                this.columns = 0;
            } else if (this.character == 13) {
                this.eol = true;
                this.character = 10;
                ++this.lines;
                this.columns = 0;
            } else {
                ++this.columns;
            }
            switch (this.state) {
                default: {
                    continue block17;
                }
                case 14: {
                    if (this.character != 34 && this.character != 39) {
                        if (Character.isWhitespace((char)this.character)) continue block17;
                        if (this.html && this.character == 62) {
                            this.flush();
                            this.processTag(true);
                            this.initTag();
                            this.state = this.restoreState();
                            continue block17;
                        }
                        if (this.html) {
                            this.text.append((char)this.character);
                            this.quoteCharacter = 32;
                            this.state = 11;
                            continue block17;
                        }
                        this.throwException(MessageLocalization.getComposedMessage("error.in.attribute.processing", new Object[0]));
                        continue block17;
                    }
                    this.quoteCharacter = this.character;
                    this.state = 11;
                    continue block17;
                }
                case 13: {
                    if (this.character == 61) {
                        this.state = 14;
                        continue block17;
                    }
                    if (Character.isWhitespace((char)this.character)) continue block17;
                    if (this.html && this.character == 62) {
                        this.text.setLength(0);
                        this.processTag(true);
                        this.initTag();
                        this.state = this.restoreState();
                        continue block17;
                    }
                    if (this.html && this.character == 47) {
                        this.flush();
                        this.state = 6;
                        continue block17;
                    }
                    if (this.html) {
                        this.flush();
                        this.text.append((char)this.character);
                        this.state = 12;
                        continue block17;
                    }
                    this.throwException(MessageLocalization.getComposedMessage("error.in.attribute.processing", new Object[0]));
                    continue block17;
                }
                case 12: {
                    if (Character.isWhitespace((char)this.character)) {
                        this.flush();
                        this.state = 13;
                        continue block17;
                    }
                    if (this.character == 61) {
                        this.flush();
                        this.state = 14;
                        continue block17;
                    }
                    if (this.html && this.character == 62) {
                        this.text.setLength(0);
                        this.processTag(true);
                        this.initTag();
                        this.state = this.restoreState();
                        continue block17;
                    }
                    this.text.append((char)this.character);
                    continue block17;
                }
                case 11: {
                    if (this.html && this.quoteCharacter == 32 && this.character == 62) {
                        this.flush();
                        this.processTag(true);
                        this.initTag();
                        this.state = this.restoreState();
                        continue block17;
                    }
                    if (this.html && this.quoteCharacter == 32 && Character.isWhitespace((char)this.character)) {
                        this.flush();
                        this.state = 4;
                        continue block17;
                    }
                    if (this.html && this.quoteCharacter == 32) {
                        this.text.append((char)this.character);
                        continue block17;
                    }
                    if (this.character == this.quoteCharacter) {
                        this.flush();
                        this.state = 4;
                        continue block17;
                    }
                    if (" \r\n\t".indexOf(this.character) >= 0) {
                        this.text.append(' ');
                        continue block17;
                    }
                    if (this.character == 38) {
                        this.saveState(this.state);
                        this.state = 10;
                        this.entity.setLength(0);
                        continue block17;
                    }
                    this.text.append((char)this.character);
                    continue block17;
                }
                case 10: {
                    CharSequence charSequence;
                    if (this.character == 59) {
                        this.state = this.restoreState();
                        charSequence = this.entity.toString();
                        this.entity.setLength(0);
                        char c = EntitiesToUnicode.decodeEntity((String)charSequence);
                        if (c == '\u0000') {
                            StringBuffer stringBuffer = this.text;
                            stringBuffer.append('&');
                            stringBuffer.append((String)charSequence);
                            stringBuffer.append(';');
                            continue block17;
                        }
                        this.text.append(c);
                        continue block17;
                    }
                    if (!((this.character == 35 || this.character >= 48 && this.character <= 57 || this.character >= 97 && this.character <= 122 || this.character >= 65 && this.character <= 90) && this.entity.length() < 7)) {
                        this.state = this.restoreState();
                        this.previousCharacter = this.character;
                        charSequence = this.text;
                        charSequence.append('&');
                        charSequence.append(this.entity.toString());
                        this.entity.setLength(0);
                        continue block17;
                    }
                    this.entity.append((char)this.character);
                    continue block17;
                }
                case 9: {
                    if (this.character != 62) continue block17;
                    this.state = this.restoreState();
                    if (this.state != 1) continue block17;
                    this.state = 0;
                    continue block17;
                }
                case 8: {
                    if (this.character == 62 && this.text.toString().endsWith("--")) {
                        this.text.setLength(this.text.length() - 2);
                        this.flush();
                        this.state = this.restoreState();
                        continue block17;
                    }
                    this.text.append((char)this.character);
                    continue block17;
                }
                case 7: {
                    if (this.character == 62 && this.text.toString().endsWith("]]")) {
                        this.text.setLength(this.text.length() - 2);
                        this.flush();
                        this.state = this.restoreState();
                        continue block17;
                    }
                    this.text.append((char)this.character);
                    continue block17;
                }
                case 6: {
                    if (this.character != 62) {
                        this.throwException(MessageLocalization.getComposedMessage("expected.gt.for.tag.lt.1.gt", this.tag));
                    }
                    this.doTag();
                    this.processTag(true);
                    this.processTag(false);
                    this.initTag();
                    if (!this.html && this.nested == 0) {
                        this.doc.endDocument();
                        return;
                    }
                    this.state = this.restoreState();
                    continue block17;
                }
                case 5: {
                    if (this.character == 62) {
                        this.doTag();
                        this.processTag(false);
                        if (!this.html && this.nested == 0) {
                            return;
                        }
                        this.state = this.restoreState();
                        continue block17;
                    }
                    if (Character.isWhitespace((char)this.character)) continue block17;
                    this.text.append((char)this.character);
                    continue block17;
                }
                case 4: {
                    if (this.character == 62) {
                        this.processTag(true);
                        this.initTag();
                        this.state = this.restoreState();
                        continue block17;
                    }
                    if (this.character == 47) {
                        this.state = 6;
                        continue block17;
                    }
                    if (Character.isWhitespace((char)this.character)) continue block17;
                    this.text.append((char)this.character);
                    this.state = 12;
                    continue block17;
                }
                case 3: {
                    if (this.character == 62) {
                        this.doTag();
                        this.processTag(true);
                        this.initTag();
                        this.state = this.restoreState();
                        continue block17;
                    }
                    if (this.character == 47) {
                        this.state = 6;
                        continue block17;
                    }
                    if (this.character == 45 && this.text.toString().equals("!-")) {
                        this.flush();
                        this.state = 8;
                        continue block17;
                    }
                    if (this.character == 91 && this.text.toString().equals("![CDATA")) {
                        this.flush();
                        this.state = 7;
                        continue block17;
                    }
                    if (this.character == 69 && this.text.toString().equals("!DOCTYP")) {
                        this.flush();
                        this.state = 9;
                        continue block17;
                    }
                    if (Character.isWhitespace((char)this.character)) {
                        this.doTag();
                        this.state = 4;
                        continue block17;
                    }
                    this.text.append((char)this.character);
                    continue block17;
                }
                case 2: {
                    this.initTag();
                    if (this.character == 47) {
                        this.state = 5;
                        continue block17;
                    }
                    if (this.character == 63) {
                        this.restoreState();
                        this.state = 9;
                        continue block17;
                    }
                    this.text.append((char)this.character);
                    this.state = 3;
                    continue block17;
                }
                case 1: {
                    if (this.character == 60) {
                        this.flush();
                        this.saveState(this.state);
                        this.state = 2;
                        continue block17;
                    }
                    if (this.character == 38) {
                        this.saveState(this.state);
                        this.entity.setLength(0);
                        this.state = 10;
                        this.nowhite = true;
                        continue block17;
                    }
                    if (this.character == 32) {
                        if (this.html && this.nowhite) {
                            this.text.append(' ');
                            this.nowhite = false;
                            continue block17;
                        }
                        if (this.nowhite) {
                            this.text.append((char)this.character);
                        }
                        this.nowhite = false;
                        continue block17;
                    }
                    if (Character.isWhitespace((char)this.character)) {
                        if (this.html) continue block17;
                        if (this.nowhite) {
                            this.text.append((char)this.character);
                        }
                        this.nowhite = false;
                        continue block17;
                    }
                    this.text.append((char)this.character);
                    this.nowhite = true;
                    continue block17;
                }
                case 0: 
            }
            if (this.character != 60) continue;
            this.saveState(1);
            this.state = 2;
        } while (true);
    }

    private void initTag() {
        this.tag = null;
        this.attributes = new HashMap();
    }

    public static void parse(SimpleXMLDocHandler simpleXMLDocHandler, SimpleXMLDocHandlerComment simpleXMLDocHandlerComment, Reader reader, boolean bl) throws IOException {
        new SimpleXMLParser(simpleXMLDocHandler, simpleXMLDocHandlerComment, bl).go(reader);
    }

    public static void parse(SimpleXMLDocHandler simpleXMLDocHandler, InputStream inputStream) throws IOException {
        Object object = new byte[4];
        if (inputStream.read((byte[])object) != 4) {
            throw new IOException(MessageLocalization.getComposedMessage("insufficient.length", new Object[0]));
        }
        String string2 = XMLUtil.getEncodingName((byte[])object);
        object = null;
        if (string2.equals("UTF-8")) {
            int n;
            object = new StringBuffer();
            while ((n = inputStream.read()) != -1 && n != 62) {
                object.append((char)n);
            }
            object = object.toString();
        } else if (string2.equals("CP037")) {
            int n;
            object = new ByteArrayOutputStream();
            while ((n = inputStream.read()) != -1 && n != 110) {
                object.write(n);
            }
            object = new String(object.toByteArray(), "CP037");
        }
        Object object2 = string2;
        if (object != null) {
            object = SimpleXMLParser.getDeclaredEncoding((String)object);
            object2 = string2;
            if (object != null) {
                object2 = object;
            }
        }
        SimpleXMLParser.parse(simpleXMLDocHandler, new InputStreamReader(inputStream, IanaEncodings.getJavaEncoding((String)object2)));
    }

    public static void parse(SimpleXMLDocHandler simpleXMLDocHandler, Reader reader) throws IOException {
        SimpleXMLParser.parse(simpleXMLDocHandler, null, reader, false);
    }

    private void processTag(boolean bl) {
        if (bl) {
            ++this.nested;
            this.doc.startElement(this.tag, this.attributes);
            return;
        }
        if (this.newLineHandler.isNewLineTag(this.tag)) {
            this.nowhite = false;
        }
        --this.nested;
        this.doc.endElement(this.tag);
    }

    private int restoreState() {
        if (!this.stack.empty()) {
            return this.stack.pop();
        }
        return 0;
    }

    private void saveState(int n) {
        this.stack.push(n);
    }

    private void throwException(String string2) throws IOException {
        throw new IOException(MessageLocalization.getComposedMessage("1.near.line.2.column.3", string2, String.valueOf(this.lines), String.valueOf(this.columns)));
    }
}

