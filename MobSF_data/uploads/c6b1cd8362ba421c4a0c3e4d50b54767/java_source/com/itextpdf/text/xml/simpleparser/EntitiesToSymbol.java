/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.xml.simpleparser;

import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chunk;
import com.itextpdf.text.Font;
import java.util.HashMap;
import java.util.Map;

public class EntitiesToSymbol {
    private static final Map<String, Character> MAP = new HashMap<String, Character>();

    static {
        MAP.put("169", Character.valueOf('\u00e3'));
        MAP.put("172", Character.valueOf('\u00d8'));
        MAP.put("174", Character.valueOf('\u00d2'));
        MAP.put("177", Character.valueOf('\u00b1'));
        MAP.put("215", Character.valueOf('\u00b4'));
        MAP.put("247", Character.valueOf('\u00b8'));
        MAP.put("8230", Character.valueOf('\u00bc'));
        MAP.put("8242", Character.valueOf('\u00a2'));
        MAP.put("8243", Character.valueOf('\u00b2'));
        MAP.put("8260", Character.valueOf('\u00a4'));
        MAP.put("8364", Character.valueOf('\u00f0'));
        MAP.put("8465", Character.valueOf('\u00c1'));
        MAP.put("8472", Character.valueOf('\u00c3'));
        MAP.put("8476", Character.valueOf('\u00c2'));
        MAP.put("8482", Character.valueOf('\u00d4'));
        MAP.put("8501", Character.valueOf('\u00c0'));
        MAP.put("8592", Character.valueOf('\u00ac'));
        MAP.put("8593", Character.valueOf('\u00ad'));
        MAP.put("8594", Character.valueOf('\u00ae'));
        MAP.put("8595", Character.valueOf('\u00af'));
        MAP.put("8596", Character.valueOf('\u00ab'));
        MAP.put("8629", Character.valueOf('\u00bf'));
        MAP.put("8656", Character.valueOf('\u00dc'));
        MAP.put("8657", Character.valueOf('\u00dd'));
        MAP.put("8658", Character.valueOf('\u00de'));
        MAP.put("8659", Character.valueOf('\u00df'));
        MAP.put("8660", Character.valueOf('\u00db'));
        MAP.put("8704", Character.valueOf('\"'));
        MAP.put("8706", Character.valueOf('\u00b6'));
        MAP.put("8707", Character.valueOf('$'));
        MAP.put("8709", Character.valueOf('\u00c6'));
        MAP.put("8711", Character.valueOf('\u00d1'));
        MAP.put("8712", Character.valueOf('\u00ce'));
        MAP.put("8713", Character.valueOf('\u00cf'));
        MAP.put("8717", Character.valueOf('\''));
        MAP.put("8719", Character.valueOf('\u00d5'));
        MAP.put("8721", Character.valueOf('\u00e5'));
        MAP.put("8722", Character.valueOf('-'));
        MAP.put("8727", Character.valueOf('*'));
        MAP.put("8729", Character.valueOf('\u00b7'));
        MAP.put("8730", Character.valueOf('\u00d6'));
        MAP.put("8733", Character.valueOf('\u00b5'));
        MAP.put("8734", Character.valueOf('\u00a5'));
        MAP.put("8736", Character.valueOf('\u00d0'));
        MAP.put("8743", Character.valueOf('\u00d9'));
        MAP.put("8744", Character.valueOf('\u00da'));
        MAP.put("8745", Character.valueOf('\u00c7'));
        MAP.put("8746", Character.valueOf('\u00c8'));
        MAP.put("8747", Character.valueOf('\u00f2'));
        MAP.put("8756", Character.valueOf('\\'));
        MAP.put("8764", Character.valueOf('~'));
        MAP.put("8773", Character.valueOf('@'));
        MAP.put("8776", Character.valueOf('\u00bb'));
        MAP.put("8800", Character.valueOf('\u00b9'));
        MAP.put("8801", Character.valueOf('\u00ba'));
        MAP.put("8804", Character.valueOf('\u00a3'));
        MAP.put("8805", Character.valueOf('\u00b3'));
        MAP.put("8834", Character.valueOf('\u00cc'));
        MAP.put("8835", Character.valueOf('\u00c9'));
        MAP.put("8836", Character.valueOf('\u00cb'));
        MAP.put("8838", Character.valueOf('\u00cd'));
        MAP.put("8839", Character.valueOf('\u00ca'));
        MAP.put("8853", Character.valueOf('\u00c5'));
        MAP.put("8855", Character.valueOf('\u00c4'));
        MAP.put("8869", Character.valueOf('^'));
        MAP.put("8901", Character.valueOf('\u00d7'));
        MAP.put("8992", Character.valueOf('\u00f3'));
        MAP.put("8993", Character.valueOf('\u00f5'));
        MAP.put("9001", Character.valueOf('\u00e1'));
        MAP.put("9002", Character.valueOf('\u00f1'));
        MAP.put("913", Character.valueOf('A'));
        MAP.put("914", Character.valueOf('B'));
        MAP.put("915", Character.valueOf('G'));
        MAP.put("916", Character.valueOf('D'));
        MAP.put("917", Character.valueOf('E'));
        MAP.put("918", Character.valueOf('Z'));
        MAP.put("919", Character.valueOf('H'));
        MAP.put("920", Character.valueOf('Q'));
        MAP.put("921", Character.valueOf('I'));
        MAP.put("922", Character.valueOf('K'));
        MAP.put("923", Character.valueOf('L'));
        MAP.put("924", Character.valueOf('M'));
        MAP.put("925", Character.valueOf('N'));
        MAP.put("926", Character.valueOf('X'));
        MAP.put("927", Character.valueOf('O'));
        MAP.put("928", Character.valueOf('P'));
        MAP.put("929", Character.valueOf('R'));
        MAP.put("931", Character.valueOf('S'));
        MAP.put("932", Character.valueOf('T'));
        MAP.put("933", Character.valueOf('U'));
        MAP.put("934", Character.valueOf('F'));
        MAP.put("935", Character.valueOf('C'));
        MAP.put("936", Character.valueOf('Y'));
        MAP.put("937", Character.valueOf('W'));
        MAP.put("945", Character.valueOf('a'));
        MAP.put("946", Character.valueOf('b'));
        MAP.put("947", Character.valueOf('g'));
        MAP.put("948", Character.valueOf('d'));
        MAP.put("949", Character.valueOf('e'));
        MAP.put("950", Character.valueOf('z'));
        MAP.put("951", Character.valueOf('h'));
        MAP.put("952", Character.valueOf('q'));
        MAP.put("953", Character.valueOf('i'));
        MAP.put("954", Character.valueOf('k'));
        MAP.put("955", Character.valueOf('l'));
        MAP.put("956", Character.valueOf('m'));
        MAP.put("957", Character.valueOf('n'));
        MAP.put("958", Character.valueOf('x'));
        MAP.put("959", Character.valueOf('o'));
        MAP.put("960", Character.valueOf('p'));
        MAP.put("961", Character.valueOf('r'));
        MAP.put("962", Character.valueOf('V'));
        MAP.put("963", Character.valueOf('s'));
        MAP.put("964", Character.valueOf('t'));
        MAP.put("965", Character.valueOf('u'));
        MAP.put("966", Character.valueOf('f'));
        MAP.put("967", Character.valueOf('c'));
        MAP.put("9674", Character.valueOf('\u00e0'));
        MAP.put("968", Character.valueOf('y'));
        MAP.put("969", Character.valueOf('w'));
        MAP.put("977", Character.valueOf('J'));
        MAP.put("978", Character.valueOf('\u00a1'));
        MAP.put("981", Character.valueOf('j'));
        MAP.put("982", Character.valueOf('v'));
        MAP.put("9824", Character.valueOf('\u00aa'));
        MAP.put("9827", Character.valueOf('\u00a7'));
        MAP.put("9829", Character.valueOf('\u00a9'));
        MAP.put("9830", Character.valueOf('\u00a8'));
        MAP.put("Alpha", Character.valueOf('A'));
        MAP.put("Beta", Character.valueOf('B'));
        MAP.put("Chi", Character.valueOf('C'));
        MAP.put("Delta", Character.valueOf('D'));
        MAP.put("Epsilon", Character.valueOf('E'));
        MAP.put("Eta", Character.valueOf('H'));
        MAP.put("Gamma", Character.valueOf('G'));
        MAP.put("Iota", Character.valueOf('I'));
        MAP.put("Kappa", Character.valueOf('K'));
        MAP.put("Lambda", Character.valueOf('L'));
        MAP.put("Mu", Character.valueOf('M'));
        MAP.put("Nu", Character.valueOf('N'));
        MAP.put("Omega", Character.valueOf('W'));
        MAP.put("Omicron", Character.valueOf('O'));
        MAP.put("Phi", Character.valueOf('F'));
        MAP.put("Pi", Character.valueOf('P'));
        MAP.put("Prime", Character.valueOf('\u00b2'));
        MAP.put("Psi", Character.valueOf('Y'));
        MAP.put("Rho", Character.valueOf('R'));
        MAP.put("Sigma", Character.valueOf('S'));
        MAP.put("Tau", Character.valueOf('T'));
        MAP.put("Theta", Character.valueOf('Q'));
        MAP.put("Upsilon", Character.valueOf('U'));
        MAP.put("Xi", Character.valueOf('X'));
        MAP.put("Zeta", Character.valueOf('Z'));
        MAP.put("alefsym", Character.valueOf('\u00c0'));
        MAP.put("alpha", Character.valueOf('a'));
        MAP.put("and", Character.valueOf('\u00d9'));
        MAP.put("ang", Character.valueOf('\u00d0'));
        MAP.put("asymp", Character.valueOf('\u00bb'));
        MAP.put("beta", Character.valueOf('b'));
        MAP.put("cap", Character.valueOf('\u00c7'));
        MAP.put("chi", Character.valueOf('c'));
        MAP.put("clubs", Character.valueOf('\u00a7'));
        MAP.put("cong", Character.valueOf('@'));
        MAP.put("copy", Character.valueOf('\u00d3'));
        MAP.put("crarr", Character.valueOf('\u00bf'));
        MAP.put("cup", Character.valueOf('\u00c8'));
        MAP.put("dArr", Character.valueOf('\u00df'));
        MAP.put("darr", Character.valueOf('\u00af'));
        MAP.put("delta", Character.valueOf('d'));
        MAP.put("diams", Character.valueOf('\u00a8'));
        MAP.put("divide", Character.valueOf('\u00b8'));
        MAP.put("empty", Character.valueOf('\u00c6'));
        MAP.put("epsilon", Character.valueOf('e'));
        MAP.put("equiv", Character.valueOf('\u00ba'));
        MAP.put("eta", Character.valueOf('h'));
        MAP.put("euro", Character.valueOf('\u00f0'));
        MAP.put("exist", Character.valueOf('$'));
        MAP.put("forall", Character.valueOf('\"'));
        MAP.put("frasl", Character.valueOf('\u00a4'));
        MAP.put("gamma", Character.valueOf('g'));
        MAP.put("ge", Character.valueOf('\u00b3'));
        MAP.put("hArr", Character.valueOf('\u00db'));
        MAP.put("harr", Character.valueOf('\u00ab'));
        MAP.put("hearts", Character.valueOf('\u00a9'));
        MAP.put("hellip", Character.valueOf('\u00bc'));
        MAP.put("horizontal arrow extender", Character.valueOf('\u00be'));
        MAP.put("image", Character.valueOf('\u00c1'));
        MAP.put("infin", Character.valueOf('\u00a5'));
        MAP.put("int", Character.valueOf('\u00f2'));
        MAP.put("iota", Character.valueOf('i'));
        MAP.put("isin", Character.valueOf('\u00ce'));
        MAP.put("kappa", Character.valueOf('k'));
        MAP.put("lArr", Character.valueOf('\u00dc'));
        MAP.put("lambda", Character.valueOf('l'));
        MAP.put("lang", Character.valueOf('\u00e1'));
        MAP.put("large brace extender", Character.valueOf('\u00ef'));
        MAP.put("large integral extender", Character.valueOf('\u00f4'));
        MAP.put("large left brace (bottom)", Character.valueOf('\u00ee'));
        MAP.put("large left brace (middle)", Character.valueOf('\u00ed'));
        MAP.put("large left brace (top)", Character.valueOf('\u00ec'));
        MAP.put("large left bracket (bottom)", Character.valueOf('\u00eb'));
        MAP.put("large left bracket (extender)", Character.valueOf('\u00ea'));
        MAP.put("large left bracket (top)", Character.valueOf('\u00e9'));
        MAP.put("large left parenthesis (bottom)", Character.valueOf('\u00e8'));
        MAP.put("large left parenthesis (extender)", Character.valueOf('\u00e7'));
        MAP.put("large left parenthesis (top)", Character.valueOf('\u00e6'));
        MAP.put("large right brace (bottom)", Character.valueOf('\u00fe'));
        MAP.put("large right brace (middle)", Character.valueOf('\u00fd'));
        MAP.put("large right brace (top)", Character.valueOf('\u00fc'));
        MAP.put("large right bracket (bottom)", Character.valueOf('\u00fb'));
        MAP.put("large right bracket (extender)", Character.valueOf('\u00fa'));
        MAP.put("large right bracket (top)", Character.valueOf('\u00f9'));
        MAP.put("large right parenthesis (bottom)", Character.valueOf('\u00f8'));
        MAP.put("large right parenthesis (extender)", Character.valueOf('\u00f7'));
        MAP.put("large right parenthesis (top)", Character.valueOf('\u00f6'));
        MAP.put("larr", Character.valueOf('\u00ac'));
        MAP.put("le", Character.valueOf('\u00a3'));
        MAP.put("lowast", Character.valueOf('*'));
        MAP.put("loz", Character.valueOf('\u00e0'));
        MAP.put("minus", Character.valueOf('-'));
        MAP.put("mu", Character.valueOf('m'));
        MAP.put("nabla", Character.valueOf('\u00d1'));
        MAP.put("ne", Character.valueOf('\u00b9'));
        MAP.put("not", Character.valueOf('\u00d8'));
        MAP.put("notin", Character.valueOf('\u00cf'));
        MAP.put("nsub", Character.valueOf('\u00cb'));
        MAP.put("nu", Character.valueOf('n'));
        MAP.put("omega", Character.valueOf('w'));
        MAP.put("omicron", Character.valueOf('o'));
        MAP.put("oplus", Character.valueOf('\u00c5'));
        MAP.put("or", Character.valueOf('\u00da'));
        MAP.put("otimes", Character.valueOf('\u00c4'));
        MAP.put("part", Character.valueOf('\u00b6'));
        MAP.put("perp", Character.valueOf('^'));
        MAP.put("phi", Character.valueOf('f'));
        MAP.put("pi", Character.valueOf('p'));
        MAP.put("piv", Character.valueOf('v'));
        MAP.put("plusmn", Character.valueOf('\u00b1'));
        MAP.put("prime", Character.valueOf('\u00a2'));
        MAP.put("prod", Character.valueOf('\u00d5'));
        MAP.put("prop", Character.valueOf('\u00b5'));
        MAP.put("psi", Character.valueOf('y'));
        MAP.put("rArr", Character.valueOf('\u00de'));
        MAP.put("radic", Character.valueOf('\u00d6'));
        MAP.put("radical extender", Character.valueOf('`'));
        MAP.put("rang", Character.valueOf('\u00f1'));
        MAP.put("rarr", Character.valueOf('\u00ae'));
        MAP.put("real", Character.valueOf('\u00c2'));
        MAP.put("reg", Character.valueOf('\u00d2'));
        MAP.put("rho", Character.valueOf('r'));
        MAP.put("sdot", Character.valueOf('\u00d7'));
        MAP.put("sigma", Character.valueOf('s'));
        MAP.put("sigmaf", Character.valueOf('V'));
        MAP.put("sim", Character.valueOf('~'));
        MAP.put("spades", Character.valueOf('\u00aa'));
        MAP.put("sub", Character.valueOf('\u00cc'));
        MAP.put("sube", Character.valueOf('\u00cd'));
        MAP.put("sum", Character.valueOf('\u00e5'));
        MAP.put("sup", Character.valueOf('\u00c9'));
        MAP.put("supe", Character.valueOf('\u00ca'));
        MAP.put("tau", Character.valueOf('t'));
        MAP.put("there4", Character.valueOf('\\'));
        MAP.put("theta", Character.valueOf('q'));
        MAP.put("thetasym", Character.valueOf('J'));
        MAP.put("times", Character.valueOf('\u00b4'));
        MAP.put("trade", Character.valueOf('\u00d4'));
        MAP.put("uArr", Character.valueOf('\u00dd'));
        MAP.put("uarr", Character.valueOf('\u00ad'));
        MAP.put("upsih", Character.valueOf('\u00a1'));
        MAP.put("upsilon", Character.valueOf('u'));
        MAP.put("vertical arrow extender", Character.valueOf('\u00bd'));
        MAP.put("weierp", Character.valueOf('\u00c3'));
        MAP.put("xi", Character.valueOf('x'));
        MAP.put("zeta", Character.valueOf('z'));
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    public static Chunk get(String string2, Font font) {
        char c = EntitiesToSymbol.getCorrespondingSymbol(string2);
        if (c != '\u0000') return new Chunk(String.valueOf(c), new Font(Font.FontFamily.SYMBOL, font.getSize(), font.getStyle(), font.getColor()));
        try {
            return new Chunk(String.valueOf((char)Integer.parseInt(string2)), font);
        }
        catch (Exception exception) {
            return new Chunk(string2, font);
        }
    }

    public static char getCorrespondingSymbol(String object) {
        if ((object = MAP.get(object)) == null) {
            return '\u0000';
        }
        return object.charValue();
    }
}

