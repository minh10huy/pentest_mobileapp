/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.xml;

public class XMLUtil {
    public static String escapeXML(String arrc, boolean bl) {
        arrc = arrc.toCharArray();
        int n = arrc.length;
        StringBuffer stringBuffer = new StringBuffer();
        block4 : for (int i = 0; i < n; ++i) {
            char c = arrc[i];
            if (c != '\"') {
                if (c != '<') {
                    if (c != '>') {
                        switch (c) {
                            default: {
                                if (!XMLUtil.isValidCharacterValue(c)) continue block4;
                                if (bl && c > '') {
                                    stringBuffer.append("&#");
                                    stringBuffer.append((int)c);
                                    stringBuffer.append(';');
                                    break;
                                }
                                stringBuffer.append(c);
                                break;
                            }
                            case '\'': {
                                stringBuffer.append("&apos;");
                                break;
                            }
                            case '&': {
                                stringBuffer.append("&amp;");
                                break;
                            }
                        }
                        continue;
                    }
                    stringBuffer.append("&gt;");
                    continue;
                }
                stringBuffer.append("&lt;");
                continue;
            }
            stringBuffer.append("&quot;");
        }
        return stringBuffer.toString();
    }

    public static int findInArray(char c, char[] arrc, int n) {
        while (n < arrc.length) {
            if (arrc[n] == ';') {
                return n;
            }
            ++n;
        }
        return -1;
    }

    public static String getEncodingName(byte[] arrby) {
        int n = arrby[0] & 255;
        int n2 = arrby[1] & 255;
        if (n == 254 && n2 == 255) {
            return "UTF-16BE";
        }
        if (n == 255 && n2 == 254) {
            return "UTF-16LE";
        }
        int n3 = arrby[2] & 255;
        if (n == 239 && n2 == 187 && n3 == 191) {
            return "UTF-8";
        }
        int n4 = arrby[3] & 255;
        if (n == 0 && n2 == 0 && n3 == 0 && n4 == 60) {
            return "ISO-10646-UCS-4";
        }
        if (n == 60 && n2 == 0 && n3 == 0 && n4 == 0) {
            return "ISO-10646-UCS-4";
        }
        if (n == 0 && n2 == 0 && n3 == 60 && n4 == 0) {
            return "ISO-10646-UCS-4";
        }
        if (n == 0 && n2 == 60 && n3 == 0 && n4 == 0) {
            return "ISO-10646-UCS-4";
        }
        if (n == 0 && n2 == 60 && n3 == 0 && n4 == 63) {
            return "UTF-16BE";
        }
        if (n == 60 && n2 == 0 && n3 == 63 && n4 == 0) {
            return "UTF-16LE";
        }
        if (n == 76 && n2 == 111 && n3 == 167 && n4 == 148) {
            return "CP037";
        }
        return "UTF-8";
    }

    public static boolean isValidCharacterValue(int n) {
        if (!(n == 9 || n == 10 || n == 13 || n >= 32 && n <= 55295 || n >= 57344 && n <= 65533 || n >= 65536 && n <= 1114111)) {
            return false;
        }
        return true;
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    public static boolean isValidCharacterValue(String string2) {
        try {
            return XMLUtil.isValidCharacterValue(Integer.parseInt(string2));
        }
        catch (NumberFormatException numberFormatException) {
            return false;
        }
    }

    public static int unescape(String string2) {
        if ("apos".equals(string2)) {
            return 39;
        }
        if ("quot".equals(string2)) {
            return 34;
        }
        if ("lt".equals(string2)) {
            return 60;
        }
        if ("gt".equals(string2)) {
            return 62;
        }
        if ("amp".equals(string2)) {
            return 38;
        }
        return -1;
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Lifted jumps to return sites
     */
    public static String unescapeXML(String var0) {
        var0 = var0.toCharArray();
        var5_1 = var0.length;
        var6_2 = new StringBuffer();
        var1_3 = 0;
        while (var1_3 < var5_1) {
            block4 : {
                block5 : {
                    block3 : {
                        var3_5 = var0[var1_3];
                        if (var3_5 != 38 || (var2_4 = XMLUtil.findInArray(';', var0, var1_3 + 3)) <= -1) ** GOTO lbl-1000
                        var7_7 = new String(var0, var1_3 + 1, var2_4 - var1_3 - 1);
                        if (!var7_7.startsWith("#")) break block3;
                        var7_7 = var7_7.substring(1);
                        var1_3 = var2_4;
                        if (!XMLUtil.isValidCharacterValue(var7_7)) break block4;
                        var1_3 = (char)Integer.parseInt(var7_7);
                        break block5;
                    }
                    var4_6 = XMLUtil.unescape(var7_7);
                    if (var4_6 > 0) {
                        var1_3 = var4_6;
                    } else lbl-1000: // 2 sources:
                    {
                        var2_4 = var1_3;
                        var1_3 = var3_5;
                    }
                }
                var6_2.append((char)var1_3);
                var1_3 = var2_4;
            }
            ++var1_3;
        }
        return var6_2.toString();
    }
}

