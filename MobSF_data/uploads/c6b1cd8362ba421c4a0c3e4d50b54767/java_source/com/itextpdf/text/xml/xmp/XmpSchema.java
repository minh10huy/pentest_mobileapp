/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text.xml.xmp;

import com.itextpdf.text.xml.XMLUtil;
import com.itextpdf.text.xml.xmp.LangAlt;
import com.itextpdf.text.xml.xmp.XmpArray;
import java.util.Enumeration;
import java.util.Properties;

@Deprecated
public abstract class XmpSchema
extends Properties {
    private static final long serialVersionUID = -176374295948945272L;
    protected String xmlns;

    public XmpSchema(String string2) {
        this.xmlns = string2;
    }

    public static String escape(String string2) {
        return XMLUtil.escapeXML(string2, false);
    }

    public Object addProperty(String string2, String string3) {
        return this.setProperty(string2, string3);
    }

    public String getXmlns() {
        return this.xmlns;
    }

    protected void process(StringBuffer stringBuffer, Object object) {
        stringBuffer.append('<');
        stringBuffer.append(object);
        stringBuffer.append('>');
        stringBuffer.append(this.get(object));
        stringBuffer.append("</");
        stringBuffer.append(object);
        stringBuffer.append('>');
    }

    public Object setProperty(String string2, LangAlt langAlt) {
        return super.setProperty(string2, langAlt.toString());
    }

    public Object setProperty(String string2, XmpArray xmpArray) {
        return super.setProperty(string2, xmpArray.toString());
    }

    @Override
    public Object setProperty(String string2, String string3) {
        return super.setProperty(string2, XMLUtil.escapeXML(string3, false));
    }

    @Override
    public String toString() {
        StringBuffer stringBuffer = new StringBuffer();
        Enumeration<?> enumeration = this.propertyNames();
        while (enumeration.hasMoreElements()) {
            this.process(stringBuffer, enumeration.nextElement());
        }
        return stringBuffer.toString();
    }
}

