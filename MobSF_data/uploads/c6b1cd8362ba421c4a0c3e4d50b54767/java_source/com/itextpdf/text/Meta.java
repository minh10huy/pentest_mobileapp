/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.text;

import com.itextpdf.text.Chunk;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.ElementListener;
import java.util.ArrayList;
import java.util.List;

public class Meta
implements Element {
    public static final String AUTHOR = "author";
    public static final String CREATIONDATE = "creationdate";
    public static final String KEYWORDS = "keywords";
    public static final String PRODUCER = "producer";
    public static final String SUBJECT = "subject";
    public static final String TITLE = "title";
    public static final String UNKNOWN = "unknown";
    private final StringBuffer content;
    private final int type;

    Meta(int n, String string2) {
        this.type = n;
        this.content = new StringBuffer(string2);
    }

    public Meta(String string2, String string3) {
        this.type = Meta.getType(string2);
        this.content = new StringBuffer(string3);
    }

    public static int getType(String string2) {
        if (SUBJECT.equals(string2)) {
            return 2;
        }
        if (KEYWORDS.equals(string2)) {
            return 3;
        }
        if (AUTHOR.equals(string2)) {
            return 4;
        }
        if (TITLE.equals(string2)) {
            return 1;
        }
        if (PRODUCER.equals(string2)) {
            return 5;
        }
        if (CREATIONDATE.equals(string2)) {
            return 6;
        }
        return 0;
    }

    public StringBuffer append(String string2) {
        StringBuffer stringBuffer = this.content;
        stringBuffer.append(string2);
        return stringBuffer;
    }

    @Override
    public List<Chunk> getChunks() {
        return new ArrayList<Chunk>();
    }

    public String getContent() {
        return this.content.toString();
    }

    public String getName() {
        switch (this.type) {
            default: {
                return UNKNOWN;
            }
            case 6: {
                return CREATIONDATE;
            }
            case 5: {
                return PRODUCER;
            }
            case 4: {
                return AUTHOR;
            }
            case 3: {
                return KEYWORDS;
            }
            case 2: {
                return SUBJECT;
            }
            case 1: 
        }
        return TITLE;
    }

    @Override
    public boolean isContent() {
        return false;
    }

    @Override
    public boolean isNestable() {
        return false;
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    @Override
    public boolean process(ElementListener elementListener) {
        try {
            return elementListener.add(this);
        }
        catch (DocumentException documentException) {
            return false;
        }
    }

    @Override
    public int type() {
        return this.type;
    }
}

