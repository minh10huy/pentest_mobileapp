/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.awt.geom;

import com.itextpdf.awt.geom.CubicCurve2D;
import com.itextpdf.awt.geom.PathIterator;
import com.itextpdf.awt.geom.QuadCurve2D;
import com.itextpdf.awt.geom.misc.Messages;
import java.util.NoSuchElementException;

public class FlatteningPathIterator
implements PathIterator {
    private static final int BUFFER_CAPACITY = 16;
    private static final int BUFFER_LIMIT = 16;
    private static final int BUFFER_SIZE = 16;
    double[] buf;
    boolean bufEmpty = true;
    int bufIndex;
    int bufLimit;
    int bufSize;
    int bufSubdiv;
    int bufType;
    double[] coords = new double[6];
    double flatness;
    double flatness2;
    PathIterator p;
    double px;
    double py;

    public FlatteningPathIterator(PathIterator pathIterator, double d) {
        this(pathIterator, d, 16);
    }

    public FlatteningPathIterator(PathIterator pathIterator, double d, int n) {
        if (d < 0.0) {
            throw new IllegalArgumentException(Messages.getString("awt.206"));
        }
        if (n < 0) {
            throw new IllegalArgumentException(Messages.getString("awt.207"));
        }
        if (pathIterator == null) {
            throw new NullPointerException(Messages.getString("awt.208"));
        }
        this.p = pathIterator;
        this.flatness = d;
        this.flatness2 = d * d;
        this.bufLimit = n;
        this.bufSize = Math.min(this.bufLimit, 16);
        this.buf = new double[this.bufSize];
        this.bufIndex = this.bufSize;
    }

    @Override
    public int currentSegment(double[] arrd) {
        int n;
        if (this.isDone()) {
            throw new NoSuchElementException(Messages.getString("awt.4B"));
        }
        this.evaluate();
        int n2 = n = this.bufType;
        if (n != 4) {
            arrd[0] = this.px;
            arrd[1] = this.py;
            n2 = n;
            if (n != 0) {
                n2 = 1;
            }
        }
        return n2;
    }

    @Override
    public int currentSegment(float[] arrf) {
        int n;
        if (this.isDone()) {
            throw new NoSuchElementException(Messages.getString("awt.4Bx"));
        }
        this.evaluate();
        int n2 = n = this.bufType;
        if (n != 4) {
            arrf[0] = (float)this.px;
            arrf[1] = (float)this.py;
            n2 = n;
            if (n != 0) {
                n2 = 1;
            }
        }
        return n2;
    }

    void evaluate() {
        if (this.bufEmpty) {
            this.bufType = this.p.currentSegment(this.coords);
        }
        int n = this.bufType;
        boolean bl = false;
        boolean bl2 = false;
        switch (n) {
            default: {
                return;
            }
            case 3: {
                if (this.bufEmpty) {
                    this.bufIndex -= 8;
                    this.buf[this.bufIndex + 0] = this.px;
                    this.buf[this.bufIndex + 1] = this.py;
                    System.arraycopy(this.coords, 0, this.buf, this.bufIndex + 2, 6);
                    this.bufSubdiv = 0;
                }
                while (this.bufSubdiv < this.bufLimit && CubicCurve2D.getFlatnessSq(this.buf, this.bufIndex) >= this.flatness2) {
                    if (this.bufIndex <= 6) {
                        double[] arrd = new double[this.bufSize + 16];
                        System.arraycopy(this.buf, this.bufIndex, arrd, this.bufIndex + 16, this.bufSize - this.bufIndex);
                        this.buf = arrd;
                        this.bufSize += 16;
                        this.bufIndex += 16;
                    }
                    CubicCurve2D.subdivide(this.buf, this.bufIndex, this.buf, this.bufIndex - 6, this.buf, this.bufIndex);
                    this.bufIndex -= 6;
                    ++this.bufSubdiv;
                }
                this.bufIndex += 6;
                this.px = this.buf[this.bufIndex];
                this.py = this.buf[this.bufIndex + 1];
                if (this.bufIndex == this.bufSize - 2) {
                    bl2 = true;
                }
                this.bufEmpty = bl2;
                if (!this.bufEmpty) break;
                this.bufIndex = this.bufSize;
                this.bufType = 1;
                return;
            }
            case 2: {
                if (this.bufEmpty) {
                    this.bufIndex -= 6;
                    this.buf[this.bufIndex + 0] = this.px;
                    this.buf[this.bufIndex + 1] = this.py;
                    System.arraycopy(this.coords, 0, this.buf, this.bufIndex + 2, 4);
                    this.bufSubdiv = 0;
                }
                while (this.bufSubdiv < this.bufLimit && QuadCurve2D.getFlatnessSq(this.buf, this.bufIndex) >= this.flatness2) {
                    if (this.bufIndex <= 4) {
                        double[] arrd = new double[this.bufSize + 16];
                        System.arraycopy(this.buf, this.bufIndex, arrd, this.bufIndex + 16, this.bufSize - this.bufIndex);
                        this.buf = arrd;
                        this.bufSize += 16;
                        this.bufIndex += 16;
                    }
                    QuadCurve2D.subdivide(this.buf, this.bufIndex, this.buf, this.bufIndex - 4, this.buf, this.bufIndex);
                    this.bufIndex -= 4;
                    ++this.bufSubdiv;
                }
                this.bufIndex += 4;
                this.px = this.buf[this.bufIndex];
                this.py = this.buf[this.bufIndex + 1];
                bl2 = bl;
                if (this.bufIndex == this.bufSize - 2) {
                    bl2 = true;
                }
                this.bufEmpty = bl2;
                if (!this.bufEmpty) break;
                this.bufIndex = this.bufSize;
                this.bufType = 1;
                return;
            }
            case 0: 
            case 1: {
                this.px = this.coords[0];
                this.py = this.coords[1];
            }
        }
    }

    public double getFlatness() {
        return this.flatness;
    }

    public int getRecursionLimit() {
        return this.bufLimit;
    }

    @Override
    public int getWindingRule() {
        return this.p.getWindingRule();
    }

    @Override
    public boolean isDone() {
        if (this.bufEmpty && this.p.isDone()) {
            return true;
        }
        return false;
    }

    @Override
    public void next() {
        if (this.bufEmpty) {
            this.p.next();
        }
    }
}

