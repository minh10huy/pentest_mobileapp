/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.awt.geom;

import com.itextpdf.awt.geom.Dimension;
import com.itextpdf.awt.geom.Point;
import com.itextpdf.awt.geom.Rectangle2D;
import com.itextpdf.awt.geom.Shape;
import java.io.Serializable;

public class Rectangle
extends Rectangle2D
implements Shape,
Serializable {
    private static final long serialVersionUID = -4345857070255674764L;
    public double height;
    public double width;
    public double x;
    public double y;

    public Rectangle() {
        this.setBounds(0, 0, 0, 0);
    }

    public Rectangle(double d, double d2, double d3, double d4) {
        this.setBounds(d, d2, d3, d4);
    }

    public Rectangle(int n, int n2) {
        this.setBounds(0, 0, n, n2);
    }

    public Rectangle(Dimension dimension) {
        this.setBounds(0.0, 0.0, dimension.width, dimension.height);
    }

    public Rectangle(Point point) {
        this.setBounds(point.x, point.y, 0.0, 0.0);
    }

    public Rectangle(Point point, Dimension dimension) {
        this.setBounds(point.x, point.y, dimension.width, dimension.height);
    }

    public Rectangle(Rectangle rectangle) {
        this.setBounds(rectangle.x, rectangle.y, rectangle.width, rectangle.height);
    }

    public Rectangle(com.itextpdf.text.Rectangle rectangle) {
        rectangle.normalize();
        this.setBounds(rectangle.getLeft(), rectangle.getBottom(), rectangle.getWidth(), rectangle.getHeight());
    }

    @Override
    public void add(double d, double d2) {
        double d3 = Math.min(this.x, d);
        d = Math.max(this.x + this.width, d);
        double d4 = Math.min(this.y, d2);
        this.setBounds(d3, d4, d - d3, Math.max(this.y + this.height, d2) - d4);
    }

    public void add(int n, int n2) {
        this.add((double)n, (double)n2);
    }

    public void add(Point point) {
        this.add(point.x, point.y);
    }

    public void add(Rectangle rectangle) {
        double d = Math.min(this.x, rectangle.x);
        double d2 = Math.max(this.x + this.width, rectangle.x + rectangle.width);
        double d3 = Math.min(this.y, rectangle.y);
        this.setBounds(d, d3, d2 - d, Math.max(this.y + this.height, rectangle.y + rectangle.height) - d3);
    }

    @Override
    public boolean contains(double d, double d2) {
        boolean bl = this.isEmpty();
        boolean bl2 = false;
        if (bl) {
            return false;
        }
        if (d >= this.x) {
            if (d2 < this.y) {
                return false;
            }
            double d3 = this.x;
            double d4 = this.y;
            bl = bl2;
            if (d - d3 < this.width) {
                bl = bl2;
                if (d2 - d4 < this.height) {
                    bl = true;
                }
            }
            return bl;
        }
        return false;
    }

    @Override
    public boolean contains(double d, double d2, double d3, double d4) {
        if (this.contains(d, d2) && this.contains(d + d3 - 0.01, d2 + d4 - 0.01)) {
            return true;
        }
        return false;
    }

    public boolean contains(int n, int n2) {
        return this.contains((double)n, (double)n2);
    }

    public boolean contains(int n, int n2, int n3, int n4) {
        if (this.contains(n, n2) && this.contains(n + n3 - 1, n2 + n4 - 1)) {
            return true;
        }
        return false;
    }

    public boolean contains(Point point) {
        return this.contains(point.x, point.y);
    }

    public boolean contains(Rectangle rectangle) {
        return this.contains(rectangle.x, rectangle.y, rectangle.width, rectangle.height);
    }

    @Override
    public Rectangle2D createIntersection(Rectangle2D rectangle2D) {
        if (rectangle2D instanceof Rectangle) {
            return this.intersection((Rectangle)rectangle2D);
        }
        Rectangle2D.Double double_ = new Rectangle2D.Double();
        Rectangle2D.intersect(this, rectangle2D, double_);
        return double_;
    }

    @Override
    public Rectangle2D createUnion(Rectangle2D rectangle2D) {
        if (rectangle2D instanceof Rectangle) {
            return this.union((Rectangle)rectangle2D);
        }
        Rectangle2D.Double double_ = new Rectangle2D.Double();
        Rectangle2D.union(this, rectangle2D, double_);
        return double_;
    }

    @Override
    public boolean equals(Object object) {
        if (object == this) {
            return true;
        }
        if (object instanceof Rectangle) {
            object = (Rectangle)object;
            if (object.x == this.x && object.y == this.y && object.width == this.width && object.height == this.height) {
                return true;
            }
            return false;
        }
        return false;
    }

    @Override
    public Rectangle getBounds() {
        return new Rectangle(this.x, this.y, this.width, this.height);
    }

    @Override
    public Rectangle2D getBounds2D() {
        return this.getBounds();
    }

    @Override
    public double getHeight() {
        return this.height;
    }

    public Point getLocation() {
        return new Point(this.x, this.y);
    }

    public Dimension getSize() {
        return new Dimension(this.width, this.height);
    }

    @Override
    public double getWidth() {
        return this.width;
    }

    @Override
    public double getX() {
        return this.x;
    }

    @Override
    public double getY() {
        return this.y;
    }

    public void grow(double d, double d2) {
        this.x -= d;
        this.y -= d2;
        this.width += d + d;
        this.height += d2 + d2;
    }

    public void grow(int n, int n2) {
        this.translate((double)n, (double)n2);
    }

    public Rectangle intersection(Rectangle rectangle) {
        double d = Math.max(this.x, rectangle.x);
        double d2 = Math.max(this.y, rectangle.y);
        return new Rectangle(d, d2, Math.min(this.x + this.width, rectangle.x + rectangle.width) - d, Math.min(this.y + this.height, rectangle.y + rectangle.height) - d2);
    }

    public boolean intersects(Rectangle rectangle) {
        return this.intersection(rectangle).isEmpty() ^ true;
    }

    @Override
    public boolean isEmpty() {
        if (this.width > 0.0 && this.height > 0.0) {
            return false;
        }
        return true;
    }

    @Override
    public int outcode(double d, double d2) {
        int n = this.width <= 0.0 ? 5 : (d < this.x ? 1 : (d > this.x + this.width ? 4 : 0));
        if (this.height <= 0.0) {
            return n | 10;
        }
        if (d2 < this.y) {
            return n | 2;
        }
        int n2 = n;
        if (d2 > this.y + this.height) {
            n2 = n | 8;
        }
        return n2;
    }

    public void setBounds(double d, double d2, double d3, double d4) {
        this.x = d;
        this.y = d2;
        this.height = d4;
        this.width = d3;
    }

    public void setBounds(int n, int n2, int n3, int n4) {
        this.setBounds((double)n, (double)n2, (double)n3, (double)n4);
    }

    public void setBounds(Rectangle rectangle) {
        this.setBounds(rectangle.x, rectangle.y, rectangle.width, rectangle.height);
    }

    public void setLocation(double d, double d2) {
        this.x = d;
        this.y = d2;
    }

    public void setLocation(int n, int n2) {
        this.setLocation((double)n, (double)n2);
    }

    public void setLocation(Point point) {
        this.setLocation(point.x, point.y);
    }

    @Override
    public void setRect(double d, double d2, double d3, double d4) {
        int n = (int)Math.floor(d);
        int n2 = (int)Math.floor(d2);
        this.setBounds(n, n2, (int)Math.ceil(d + d3) - n, (int)Math.ceil(d2 + d4) - n2);
    }

    public void setSize(double d, double d2) {
        this.width = d;
        this.height = d2;
    }

    public void setSize(int n, int n2) {
        this.setSize((double)n, (double)n2);
    }

    public void setSize(Dimension dimension) {
        this.setSize(dimension.width, dimension.height);
    }

    public String toString() {
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append(this.getClass().getName());
        stringBuilder.append("[x=");
        stringBuilder.append(this.x);
        stringBuilder.append(",y=");
        stringBuilder.append(this.y);
        stringBuilder.append(",width=");
        stringBuilder.append(this.width);
        stringBuilder.append(",height=");
        stringBuilder.append(this.height);
        stringBuilder.append("]");
        return stringBuilder.toString();
    }

    public void translate(double d, double d2) {
        this.x += d;
        this.y += d2;
    }

    public void translate(int n, int n2) {
        this.translate((double)n, (double)n2);
    }

    public Rectangle union(Rectangle rectangle) {
        Rectangle rectangle2 = new Rectangle(this);
        rectangle2.add(rectangle);
        return rectangle2;
    }
}

