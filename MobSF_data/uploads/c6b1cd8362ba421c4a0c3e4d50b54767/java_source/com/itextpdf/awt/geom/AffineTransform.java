/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.awt.geom;

import com.itextpdf.awt.geom.GeneralPath;
import com.itextpdf.awt.geom.NoninvertibleTransformException;
import com.itextpdf.awt.geom.PathIterator;
import com.itextpdf.awt.geom.Point2D;
import com.itextpdf.awt.geom.Shape;
import com.itextpdf.awt.geom.misc.HashCode;
import com.itextpdf.awt.geom.misc.Messages;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;

public class AffineTransform
implements Cloneable,
Serializable {
    public static final int TYPE_FLIP = 64;
    public static final int TYPE_GENERAL_ROTATION = 16;
    public static final int TYPE_GENERAL_SCALE = 4;
    public static final int TYPE_GENERAL_TRANSFORM = 32;
    public static final int TYPE_IDENTITY = 0;
    public static final int TYPE_MASK_ROTATION = 24;
    public static final int TYPE_MASK_SCALE = 6;
    public static final int TYPE_QUADRANT_ROTATION = 8;
    public static final int TYPE_TRANSLATION = 1;
    public static final int TYPE_UNIFORM_SCALE = 2;
    static final int TYPE_UNKNOWN = -1;
    static final double ZERO = 1.0E-10;
    private static final long serialVersionUID = 1330973210523860834L;
    double m00;
    double m01;
    double m02;
    double m10;
    double m11;
    double m12;
    transient int type;

    public AffineTransform() {
        this.type = 0;
        this.m11 = 1.0;
        this.m00 = 1.0;
        this.m12 = 0.0;
        this.m02 = 0.0;
        this.m01 = 0.0;
        this.m10 = 0.0;
    }

    public AffineTransform(double d, double d2, double d3, double d4, double d5, double d6) {
        this.type = -1;
        this.m00 = d;
        this.m10 = d2;
        this.m01 = d3;
        this.m11 = d4;
        this.m02 = d5;
        this.m12 = d6;
    }

    public AffineTransform(float f, float f2, float f3, float f4, float f5, float f6) {
        this.type = -1;
        this.m00 = f;
        this.m10 = f2;
        this.m01 = f3;
        this.m11 = f4;
        this.m02 = f5;
        this.m12 = f6;
    }

    public AffineTransform(AffineTransform affineTransform) {
        this.type = affineTransform.type;
        this.m00 = affineTransform.m00;
        this.m10 = affineTransform.m10;
        this.m01 = affineTransform.m01;
        this.m11 = affineTransform.m11;
        this.m02 = affineTransform.m02;
        this.m12 = affineTransform.m12;
    }

    public AffineTransform(double[] arrd) {
        this.type = -1;
        this.m00 = arrd[0];
        this.m10 = arrd[1];
        this.m01 = arrd[2];
        this.m11 = arrd[3];
        if (arrd.length > 4) {
            this.m02 = arrd[4];
            this.m12 = arrd[5];
        }
    }

    public AffineTransform(float[] arrf) {
        this.type = -1;
        this.m00 = arrf[0];
        this.m10 = arrf[1];
        this.m01 = arrf[2];
        this.m11 = arrf[3];
        if (arrf.length > 4) {
            this.m02 = arrf[4];
            this.m12 = arrf[5];
        }
    }

    public static AffineTransform getRotateInstance(double d) {
        AffineTransform affineTransform = new AffineTransform();
        affineTransform.setToRotation(d);
        return affineTransform;
    }

    public static AffineTransform getRotateInstance(double d, double d2, double d3) {
        AffineTransform affineTransform = new AffineTransform();
        affineTransform.setToRotation(d, d2, d3);
        return affineTransform;
    }

    public static AffineTransform getScaleInstance(double d, double d2) {
        AffineTransform affineTransform = new AffineTransform();
        affineTransform.setToScale(d, d2);
        return affineTransform;
    }

    public static AffineTransform getShearInstance(double d, double d2) {
        AffineTransform affineTransform = new AffineTransform();
        affineTransform.setToShear(d, d2);
        return affineTransform;
    }

    public static AffineTransform getTranslateInstance(double d, double d2) {
        AffineTransform affineTransform = new AffineTransform();
        affineTransform.setToTranslation(d, d2);
        return affineTransform;
    }

    private void readObject(ObjectInputStream objectInputStream) throws IOException, ClassNotFoundException {
        objectInputStream.defaultReadObject();
        this.type = -1;
    }

    private void writeObject(ObjectOutputStream objectOutputStream) throws IOException {
        objectOutputStream.defaultWriteObject();
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    public Object clone() {
        try {
            return super.clone();
        }
        catch (CloneNotSupportedException cloneNotSupportedException) {
            throw new InternalError();
        }
    }

    public void concatenate(AffineTransform affineTransform) {
        this.setTransform(this.multiply(affineTransform, this));
    }

    public AffineTransform createInverse() throws NoninvertibleTransformException {
        double d = this.getDeterminant();
        if (Math.abs(d) < 1.0E-10) {
            throw new NoninvertibleTransformException(Messages.getString("awt.204"));
        }
        return new AffineTransform(this.m11 / d, (- this.m10) / d, (- this.m01) / d, this.m00 / d, (this.m01 * this.m12 - this.m11 * this.m02) / d, (this.m10 * this.m02 - this.m00 * this.m12) / d);
    }

    public Shape createTransformedShape(Shape object) {
        if (object == null) {
            return null;
        }
        if (object instanceof GeneralPath) {
            return ((GeneralPath)object).createTransformedShape(this);
        }
        object = object.getPathIterator(this);
        GeneralPath generalPath = new GeneralPath(object.getWindingRule());
        generalPath.append((PathIterator)object, false);
        return generalPath;
    }

    public Point2D deltaTransform(Point2D point2D, Point2D point2D2) {
        Point2D point2D3 = point2D2;
        if (point2D2 == null) {
            point2D3 = point2D instanceof Point2D.Double ? new Point2D.Double() : new Point2D.Float();
        }
        double d = point2D.getX();
        double d2 = point2D.getY();
        point2D3.setLocation(this.m00 * d + this.m01 * d2, d * this.m10 + d2 * this.m11);
        return point2D3;
    }

    public void deltaTransform(double[] arrd, int n, double[] arrd2, int n2, int n3) {
        while (--n3 >= 0) {
            int n4 = n + 1;
            double d = arrd[n];
            n = n4 + 1;
            double d2 = arrd[n4];
            n4 = n2 + 1;
            arrd2[n2] = this.m00 * d + this.m01 * d2;
            n2 = n4 + 1;
            arrd2[n4] = d * this.m10 + d2 * this.m11;
        }
    }

    public boolean equals(Object object) {
        if (object == this) {
            return true;
        }
        if (object instanceof AffineTransform) {
            object = (AffineTransform)object;
            if (this.m00 == object.m00 && this.m01 == object.m01 && this.m02 == object.m02 && this.m10 == object.m10 && this.m11 == object.m11 && this.m12 == object.m12) {
                return true;
            }
            return false;
        }
        return false;
    }

    public double getDeterminant() {
        return this.m00 * this.m11 - this.m01 * this.m10;
    }

    public void getMatrix(double[] arrd) {
        arrd[0] = this.m00;
        arrd[1] = this.m10;
        arrd[2] = this.m01;
        arrd[3] = this.m11;
        if (arrd.length > 4) {
            arrd[4] = this.m02;
            arrd[5] = this.m12;
        }
    }

    public double getScaleX() {
        return this.m00;
    }

    public double getScaleY() {
        return this.m11;
    }

    public double getShearX() {
        return this.m01;
    }

    public double getShearY() {
        return this.m10;
    }

    public double getTranslateX() {
        return this.m02;
    }

    public double getTranslateY() {
        return this.m12;
    }

    public int getType() {
        int n;
        block19 : {
            int n2;
            block18 : {
                if (this.type != -1) {
                    return this.type;
                }
                if (this.m00 * this.m01 + this.m10 * this.m11 != 0.0) {
                    return 32;
                }
                double d = this.m02;
                n = 0;
                if (d == 0.0 && this.m12 == 0.0) {
                    n2 = n;
                    if (this.m00 == 1.0) {
                        n2 = n;
                        if (this.m11 == 1.0) {
                            n2 = n;
                            if (this.m01 == 0.0) {
                                n2 = n;
                                if (this.m10 == 0.0) {
                                    return 0;
                                }
                            }
                        }
                    }
                } else {
                    n2 = 1;
                }
                n = n2;
                if (this.m00 * this.m11 - this.m01 * this.m10 < 0.0) {
                    n = n2 | 64;
                }
                if ((d = this.m00 * this.m00 + this.m10 * this.m10) != this.m01 * this.m01 + this.m11 * this.m11) {
                    n2 = n | 4;
                } else {
                    n2 = n;
                    if (d != 1.0) {
                        n2 = n | 2;
                    }
                }
                if (this.m00 == 0.0 && this.m11 == 0.0 || this.m10 == 0.0 && this.m01 == 0.0 && (this.m00 < 0.0 || this.m11 < 0.0)) {
                    return n2 | 8;
                }
                if (this.m01 != 0.0) break block18;
                n = n2;
                if (this.m10 == 0.0) break block19;
            }
            n = n2 | 16;
        }
        return n;
    }

    public int hashCode() {
        HashCode hashCode = new HashCode();
        hashCode.append(this.m00);
        hashCode.append(this.m01);
        hashCode.append(this.m02);
        hashCode.append(this.m10);
        hashCode.append(this.m11);
        hashCode.append(this.m12);
        return hashCode.hashCode();
    }

    public Point2D inverseTransform(Point2D point2D, Point2D point2D2) throws NoninvertibleTransformException {
        double d = this.getDeterminant();
        if (Math.abs(d) < 1.0E-10) {
            throw new NoninvertibleTransformException(Messages.getString("awt.204"));
        }
        Point2D point2D3 = point2D2;
        if (point2D2 == null) {
            point2D3 = point2D instanceof Point2D.Double ? new Point2D.Double() : new Point2D.Float();
        }
        double d2 = point2D.getX() - this.m02;
        double d3 = point2D.getY() - this.m12;
        point2D3.setLocation((this.m11 * d2 - this.m01 * d3) / d, (d3 * this.m00 - d2 * this.m10) / d);
        return point2D3;
    }

    public void inverseTransform(double[] arrd, int n, double[] arrd2, int n2, int n3) throws NoninvertibleTransformException {
        double d = this.getDeterminant();
        if (Math.abs(d) < 1.0E-10) {
            throw new NoninvertibleTransformException(Messages.getString("awt.204"));
        }
        int n4 = n;
        n = n2;
        n2 = n4;
        while (--n3 >= 0) {
            n4 = n2 + 1;
            double d2 = arrd[n2] - this.m02;
            double d3 = arrd[n4] - this.m12;
            n2 = n + 1;
            arrd2[n] = (this.m11 * d2 - this.m01 * d3) / d;
            n = n2 + 1;
            arrd2[n2] = (d3 * this.m00 - d2 * this.m10) / d;
            n2 = n4 + 1;
        }
    }

    public void inverseTransform(float[] arrf, int n, float[] arrf2, int n2, int n3) throws NoninvertibleTransformException {
        float f = (float)this.getDeterminant();
        if ((double)Math.abs(f) < 1.0E-10) {
            throw new NoninvertibleTransformException(Messages.getString("awt.204"));
        }
        while (--n3 >= 0) {
            int n4 = n + 1;
            float f2 = arrf[n] - (float)this.m02;
            float f3 = arrf[n4] - (float)this.m12;
            n = n2 + 1;
            arrf2[n2] = ((float)this.m11 * f2 - (float)this.m01 * f3) / f;
            n2 = n + 1;
            arrf2[n] = (f3 * (float)this.m00 - f2 * (float)this.m10) / f;
            n = n4 + 1;
        }
    }

    public boolean isIdentity() {
        if (this.getType() == 0) {
            return true;
        }
        return false;
    }

    AffineTransform multiply(AffineTransform affineTransform, AffineTransform affineTransform2) {
        return new AffineTransform(affineTransform.m00 * affineTransform2.m00 + affineTransform.m10 * affineTransform2.m01, affineTransform.m00 * affineTransform2.m10 + affineTransform.m10 * affineTransform2.m11, affineTransform.m01 * affineTransform2.m00 + affineTransform.m11 * affineTransform2.m01, affineTransform.m01 * affineTransform2.m10 + affineTransform.m11 * affineTransform2.m11, affineTransform.m02 * affineTransform2.m00 + affineTransform.m12 * affineTransform2.m01 + affineTransform2.m02, affineTransform.m02 * affineTransform2.m10 + affineTransform.m12 * affineTransform2.m11 + affineTransform2.m12);
    }

    public void preConcatenate(AffineTransform affineTransform) {
        this.setTransform(this.multiply(this, affineTransform));
    }

    public void rotate(double d) {
        this.concatenate(AffineTransform.getRotateInstance(d));
    }

    public void rotate(double d, double d2, double d3) {
        this.concatenate(AffineTransform.getRotateInstance(d, d2, d3));
    }

    public void scale(double d, double d2) {
        this.concatenate(AffineTransform.getScaleInstance(d, d2));
    }

    public void setToIdentity() {
        this.type = 0;
        this.m11 = 1.0;
        this.m00 = 1.0;
        this.m12 = 0.0;
        this.m02 = 0.0;
        this.m01 = 0.0;
        this.m10 = 0.0;
    }

    public void setToRotation(double d) {
        double d2;
        double d3 = Math.sin(d);
        double d4 = Math.cos(d);
        if (Math.abs(d4) < 1.0E-10) {
            d = d3 > 0.0 ? 1.0 : -1.0;
            d2 = 0.0;
        } else {
            d = d3;
            d2 = d4;
            if (Math.abs(d3) < 1.0E-10) {
                d2 = d4 > 0.0 ? 1.0 : -1.0;
                d = 0.0;
            }
        }
        this.m11 = d2;
        this.m00 = d2;
        this.m01 = - d;
        this.m10 = d;
        this.m12 = 0.0;
        this.m02 = 0.0;
        this.type = -1;
    }

    public void setToRotation(double d, double d2, double d3) {
        this.setToRotation(d);
        this.m02 = (1.0 - this.m00) * d2 + this.m10 * d3;
        this.m12 = d3 * (1.0 - this.m00) - d2 * this.m10;
        this.type = -1;
    }

    public void setToScale(double d, double d2) {
        this.m00 = d;
        this.m11 = d2;
        this.m12 = 0.0;
        this.m02 = 0.0;
        this.m01 = 0.0;
        this.m10 = 0.0;
        if (d == 1.0 && d2 == 1.0) {
            this.type = 0;
            return;
        }
        this.type = -1;
    }

    public void setToShear(double d, double d2) {
        this.m11 = 1.0;
        this.m00 = 1.0;
        this.m12 = 0.0;
        this.m02 = 0.0;
        this.m01 = d;
        this.m10 = d2;
        if (d == 0.0 && d2 == 0.0) {
            this.type = 0;
            return;
        }
        this.type = -1;
    }

    public void setToTranslation(double d, double d2) {
        this.m11 = 1.0;
        this.m00 = 1.0;
        this.m10 = 0.0;
        this.m01 = 0.0;
        this.m02 = d;
        this.m12 = d2;
        if (d == 0.0 && d2 == 0.0) {
            this.type = 0;
            return;
        }
        this.type = 1;
    }

    public void setTransform(double d, double d2, double d3, double d4, double d5, double d6) {
        this.type = -1;
        this.m00 = d;
        this.m10 = d2;
        this.m01 = d3;
        this.m11 = d4;
        this.m02 = d5;
        this.m12 = d6;
    }

    public void setTransform(AffineTransform affineTransform) {
        this.type = affineTransform.type;
        this.setTransform(affineTransform.m00, affineTransform.m10, affineTransform.m01, affineTransform.m11, affineTransform.m02, affineTransform.m12);
    }

    public void shear(double d, double d2) {
        this.concatenate(AffineTransform.getShearInstance(d, d2));
    }

    public String toString() {
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append(this.getClass().getName());
        stringBuilder.append("[[");
        stringBuilder.append(this.m00);
        stringBuilder.append(", ");
        stringBuilder.append(this.m01);
        stringBuilder.append(", ");
        stringBuilder.append(this.m02);
        stringBuilder.append("], [");
        stringBuilder.append(this.m10);
        stringBuilder.append(", ");
        stringBuilder.append(this.m11);
        stringBuilder.append(", ");
        stringBuilder.append(this.m12);
        stringBuilder.append("]]");
        return stringBuilder.toString();
    }

    public Point2D transform(Point2D point2D, Point2D point2D2) {
        Point2D point2D3 = point2D2;
        if (point2D2 == null) {
            point2D3 = point2D instanceof Point2D.Double ? new Point2D.Double() : new Point2D.Float();
        }
        double d = point2D.getX();
        double d2 = point2D.getY();
        point2D3.setLocation(this.m00 * d + this.m01 * d2 + this.m02, d * this.m10 + d2 * this.m11 + this.m12);
        return point2D3;
    }

    public void transform(double[] arrd, int n, double[] arrd2, int n2, int n3) {
        int n4;
        int n5 = n4 = 2;
        int n6 = n;
        int n7 = n2;
        int n8 = n3;
        if (arrd == arrd2) {
            n5 = n4;
            n6 = n;
            n7 = n2;
            n8 = n3;
            if (n < n2) {
                int n9 = n3 * 2;
                int n10 = n + n9;
                n5 = n4;
                n6 = n;
                n7 = n2;
                n8 = n3;
                if (n2 < n10) {
                    n6 = n10 - 2;
                    n7 = n2 + n9 - 2;
                    n5 = -2;
                    n8 = n3;
                }
            }
        }
        while (--n8 >= 0) {
            double d = arrd[n6 + 0];
            double d2 = arrd[n6 + 1];
            arrd2[n7 + 0] = this.m00 * d + this.m01 * d2 + this.m02;
            arrd2[n7 + 1] = d * this.m10 + d2 * this.m11 + this.m12;
            n6 += n5;
            n7 += n5;
        }
    }

    public void transform(double[] arrd, int n, float[] arrf, int n2, int n3) {
        while (--n3 >= 0) {
            int n4 = n + 1;
            double d = arrd[n];
            n = n4 + 1;
            double d2 = arrd[n4];
            n4 = n2 + 1;
            arrf[n2] = (float)(this.m00 * d + this.m01 * d2 + this.m02);
            n2 = n4 + 1;
            arrf[n4] = (float)(d * this.m10 + d2 * this.m11 + this.m12);
        }
    }

    public void transform(float[] arrf, int n, double[] arrd, int n2, int n3) {
        int n4 = n;
        n = n2;
        n2 = n4;
        while (--n3 >= 0) {
            n4 = n2 + 1;
            float f = arrf[n2];
            float f2 = arrf[n4];
            n2 = n + 1;
            double d = f;
            double d2 = this.m00;
            double d3 = f2;
            arrd[n] = d2 * d + this.m01 * d3 + this.m02;
            n = n2 + 1;
            arrd[n2] = d * this.m10 + d3 * this.m11 + this.m12;
            n2 = n4 + 1;
        }
    }

    public void transform(float[] arrf, int n, float[] arrf2, int n2, int n3) {
        int n4;
        int n5 = n4 = 2;
        int n6 = n;
        int n7 = n2;
        int n8 = n3;
        if (arrf == arrf2) {
            n5 = n4;
            n6 = n;
            n7 = n2;
            n8 = n3;
            if (n < n2) {
                int n9 = n3 * 2;
                int n10 = n + n9;
                n5 = n4;
                n6 = n;
                n7 = n2;
                n8 = n3;
                if (n2 < n10) {
                    n6 = n10 - 2;
                    n7 = n2 + n9 - 2;
                    n5 = -2;
                    n8 = n3;
                }
            }
        }
        while (--n8 >= 0) {
            float f = arrf[n6 + 0];
            float f2 = arrf[n6 + 1];
            double d = f;
            double d2 = this.m00;
            double d3 = f2;
            arrf2[n7 + 0] = (float)(d2 * d + this.m01 * d3 + this.m02);
            arrf2[n7 + 1] = (float)(d * this.m10 + d3 * this.m11 + this.m12);
            n6 += n5;
            n7 += n5;
        }
    }

    public void transform(Point2D[] arrpoint2D, int n, Point2D[] arrpoint2D2, int n2, int n3) {
        while (--n3 >= 0) {
            Point2D point2D;
            Point2D point2D2 = arrpoint2D[n];
            double d = point2D2.getX();
            double d2 = point2D2.getY();
            Point2D point2D3 = point2D = arrpoint2D2[n2];
            if (point2D == null) {
                point2D3 = point2D2 instanceof Point2D.Double ? new Point2D.Double() : new Point2D.Float();
            }
            point2D3.setLocation(this.m00 * d + this.m01 * d2 + this.m02, d * this.m10 + d2 * this.m11 + this.m12);
            arrpoint2D2[n2] = point2D3;
            ++n2;
            ++n;
        }
    }

    public void translate(double d, double d2) {
        this.concatenate(AffineTransform.getTranslateInstance(d, d2));
    }
}

