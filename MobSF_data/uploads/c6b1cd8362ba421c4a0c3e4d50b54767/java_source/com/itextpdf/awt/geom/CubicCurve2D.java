/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.awt.geom;

import com.itextpdf.awt.geom.AffineTransform;
import com.itextpdf.awt.geom.FlatteningPathIterator;
import com.itextpdf.awt.geom.Line2D;
import com.itextpdf.awt.geom.PathIterator;
import com.itextpdf.awt.geom.Point2D;
import com.itextpdf.awt.geom.Rectangle;
import com.itextpdf.awt.geom.Rectangle2D;
import com.itextpdf.awt.geom.Shape;
import com.itextpdf.awt.geom.gl.Crossing;
import com.itextpdf.awt.geom.misc.Messages;
import java.util.NoSuchElementException;

public abstract class CubicCurve2D
implements Shape,
Cloneable {
    protected CubicCurve2D() {
    }

    public static double getFlatness(double d, double d2, double d3, double d4, double d5, double d6, double d7, double d8) {
        return Math.sqrt(CubicCurve2D.getFlatnessSq(d, d2, d3, d4, d5, d6, d7, d8));
    }

    public static double getFlatness(double[] arrd, int n) {
        return CubicCurve2D.getFlatness(arrd[n + 0], arrd[n + 1], arrd[n + 2], arrd[n + 3], arrd[n + 4], arrd[n + 5], arrd[n + 6], arrd[n + 7]);
    }

    public static double getFlatnessSq(double d, double d2, double d3, double d4, double d5, double d6, double d7, double d8) {
        return Math.max(Line2D.ptSegDistSq(d, d2, d7, d8, d3, d4), Line2D.ptSegDistSq(d, d2, d7, d8, d5, d6));
    }

    public static double getFlatnessSq(double[] arrd, int n) {
        return CubicCurve2D.getFlatnessSq(arrd[n + 0], arrd[n + 1], arrd[n + 2], arrd[n + 3], arrd[n + 4], arrd[n + 5], arrd[n + 6], arrd[n + 7]);
    }

    public static int solveCubic(double[] arrd) {
        return CubicCurve2D.solveCubic(arrd, arrd);
    }

    public static int solveCubic(double[] arrd, double[] arrd2) {
        return Crossing.solveCubic(arrd, arrd2);
    }

    public static void subdivide(CubicCurve2D cubicCurve2D, CubicCurve2D cubicCurve2D2, CubicCurve2D cubicCurve2D3) {
        double d = cubicCurve2D.getX1();
        double d2 = cubicCurve2D.getY1();
        double d3 = cubicCurve2D.getCtrlX1();
        double d4 = cubicCurve2D.getCtrlY1();
        double d5 = cubicCurve2D.getCtrlX2();
        double d6 = cubicCurve2D.getCtrlY2();
        double d7 = cubicCurve2D.getX2();
        double d8 = cubicCurve2D.getY2();
        double d9 = (d3 + d5) / 2.0;
        double d10 = (d4 + d6) / 2.0;
        d3 = (d3 + d) / 2.0;
        d4 = (d4 + d2) / 2.0;
        d5 = (d7 + d5) / 2.0;
        d6 = (d8 + d6) / 2.0;
        double d11 = (d3 + d9) / 2.0;
        double d12 = (d4 + d10) / 2.0;
        d9 = (d5 + d9) / 2.0;
        d10 = (d6 + d10) / 2.0;
        double d13 = (d11 + d9) / 2.0;
        double d14 = (d12 + d10) / 2.0;
        if (cubicCurve2D2 != null) {
            cubicCurve2D2.setCurve(d, d2, d3, d4, d11, d12, d13, d14);
        }
        if (cubicCurve2D3 != null) {
            cubicCurve2D3.setCurve(d13, d14, d9, d10, d5, d6, d7, d8);
        }
    }

    public static void subdivide(double[] arrd, int n, double[] arrd2, int n2, double[] arrd3, int n3) {
        double d = arrd[n + 0];
        double d2 = arrd[n + 1];
        double d3 = arrd[n + 2];
        double d4 = arrd[n + 3];
        double d5 = arrd[n + 4];
        double d6 = arrd[n + 5];
        double d7 = arrd[n + 6];
        double d8 = arrd[n + 7];
        double d9 = (d3 + d5) / 2.0;
        double d10 = (d4 + d6) / 2.0;
        d3 = (d3 + d) / 2.0;
        d4 = (d4 + d2) / 2.0;
        d5 = (d7 + d5) / 2.0;
        d6 = (d8 + d6) / 2.0;
        double d11 = (d3 + d9) / 2.0;
        double d12 = (d4 + d10) / 2.0;
        d9 = (d9 + d5) / 2.0;
        d10 = (d6 + d10) / 2.0;
        double d13 = (d11 + d9) / 2.0;
        double d14 = (d12 + d10) / 2.0;
        if (arrd2 != null) {
            arrd2[n2 + 0] = d;
            arrd2[n2 + 1] = d2;
            arrd2[n2 + 2] = d3;
            arrd2[n2 + 3] = d4;
            arrd2[n2 + 4] = d11;
            arrd2[n2 + 5] = d12;
            arrd2[n2 + 6] = d13;
            arrd2[n2 + 7] = d14;
        }
        if (arrd3 != null) {
            arrd3[n3 + 0] = d13;
            arrd3[n3 + 1] = d14;
            arrd3[n3 + 2] = d9;
            arrd3[n3 + 3] = d10;
            arrd3[n3 + 4] = d5;
            arrd3[n3 + 5] = d6;
            arrd3[n3 + 6] = d7;
            arrd3[n3 + 7] = d8;
        }
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    public Object clone() {
        try {
            return super.clone();
        }
        catch (CloneNotSupportedException cloneNotSupportedException) {
            throw new InternalError();
        }
    }

    @Override
    public boolean contains(double d, double d2) {
        return Crossing.isInsideEvenOdd(Crossing.crossShape(this, d, d2));
    }

    @Override
    public boolean contains(double d, double d2, double d3, double d4) {
        int n = Crossing.intersectShape(this, d, d2, d3, d4);
        if (n != 255 && Crossing.isInsideEvenOdd(n)) {
            return true;
        }
        return false;
    }

    @Override
    public boolean contains(Point2D point2D) {
        return this.contains(point2D.getX(), point2D.getY());
    }

    @Override
    public boolean contains(Rectangle2D rectangle2D) {
        return this.contains(rectangle2D.getX(), rectangle2D.getY(), rectangle2D.getWidth(), rectangle2D.getHeight());
    }

    @Override
    public Rectangle getBounds() {
        return this.getBounds2D().getBounds();
    }

    public abstract Point2D getCtrlP1();

    public abstract Point2D getCtrlP2();

    public abstract double getCtrlX1();

    public abstract double getCtrlX2();

    public abstract double getCtrlY1();

    public abstract double getCtrlY2();

    public double getFlatness() {
        return CubicCurve2D.getFlatness(this.getX1(), this.getY1(), this.getCtrlX1(), this.getCtrlY1(), this.getCtrlX2(), this.getCtrlY2(), this.getX2(), this.getY2());
    }

    public double getFlatnessSq() {
        return CubicCurve2D.getFlatnessSq(this.getX1(), this.getY1(), this.getCtrlX1(), this.getCtrlY1(), this.getCtrlX2(), this.getCtrlY2(), this.getX2(), this.getY2());
    }

    public abstract Point2D getP1();

    public abstract Point2D getP2();

    @Override
    public PathIterator getPathIterator(AffineTransform affineTransform) {
        return new Iterator(this, affineTransform);
    }

    @Override
    public PathIterator getPathIterator(AffineTransform affineTransform, double d) {
        return new FlatteningPathIterator(this.getPathIterator(affineTransform), d);
    }

    public abstract double getX1();

    public abstract double getX2();

    public abstract double getY1();

    public abstract double getY2();

    @Override
    public boolean intersects(double d, double d2, double d3, double d4) {
        int n = Crossing.intersectShape(this, d, d2, d3, d4);
        if (n != 255 && !Crossing.isInsideEvenOdd(n)) {
            return false;
        }
        return true;
    }

    @Override
    public boolean intersects(Rectangle2D rectangle2D) {
        return this.intersects(rectangle2D.getX(), rectangle2D.getY(), rectangle2D.getWidth(), rectangle2D.getHeight());
    }

    public abstract void setCurve(double var1, double var3, double var5, double var7, double var9, double var11, double var13, double var15);

    public void setCurve(CubicCurve2D cubicCurve2D) {
        this.setCurve(cubicCurve2D.getX1(), cubicCurve2D.getY1(), cubicCurve2D.getCtrlX1(), cubicCurve2D.getCtrlY1(), cubicCurve2D.getCtrlX2(), cubicCurve2D.getCtrlY2(), cubicCurve2D.getX2(), cubicCurve2D.getY2());
    }

    public void setCurve(Point2D point2D, Point2D point2D2, Point2D point2D3, Point2D point2D4) {
        this.setCurve(point2D.getX(), point2D.getY(), point2D2.getX(), point2D2.getY(), point2D3.getX(), point2D3.getY(), point2D4.getX(), point2D4.getY());
    }

    public void setCurve(double[] arrd, int n) {
        this.setCurve(arrd[n + 0], arrd[n + 1], arrd[n + 2], arrd[n + 3], arrd[n + 4], arrd[n + 5], arrd[n + 6], arrd[n + 7]);
    }

    public void setCurve(Point2D[] arrpoint2D, int n) {
        int n2 = n + 0;
        double d = arrpoint2D[n2].getX();
        double d2 = arrpoint2D[n2].getY();
        n2 = n + 1;
        double d3 = arrpoint2D[n2].getX();
        double d4 = arrpoint2D[n2].getY();
        n2 = n + 2;
        double d5 = arrpoint2D[n2].getX();
        double d6 = arrpoint2D[n2].getY();
        this.setCurve(d, d2, d3, d4, d5, d6, arrpoint2D[n].getX(), arrpoint2D[n += 3].getY());
    }

    public void subdivide(CubicCurve2D cubicCurve2D, CubicCurve2D cubicCurve2D2) {
        CubicCurve2D.subdivide(this, cubicCurve2D, cubicCurve2D2);
    }

    public static class Double
    extends CubicCurve2D {
        public double ctrlx1;
        public double ctrlx2;
        public double ctrly1;
        public double ctrly2;
        public double x1;
        public double x2;
        public double y1;
        public double y2;

        public Double() {
        }

        public Double(double d, double d2, double d3, double d4, double d5, double d6, double d7, double d8) {
            this.setCurve(d, d2, d3, d4, d5, d6, d7, d8);
        }

        @Override
        public Rectangle2D getBounds2D() {
            double d = Math.min(Math.min(this.x1, this.x2), Math.min(this.ctrlx1, this.ctrlx2));
            double d2 = Math.min(Math.min(this.y1, this.y2), Math.min(this.ctrly1, this.ctrly2));
            return new Rectangle2D.Double(d, d2, Math.max(Math.max(this.x1, this.x2), Math.max(this.ctrlx1, this.ctrlx2)) - d, Math.max(Math.max(this.y1, this.y2), Math.max(this.ctrly1, this.ctrly2)) - d2);
        }

        @Override
        public Point2D getCtrlP1() {
            return new Point2D.Double(this.ctrlx1, this.ctrly1);
        }

        @Override
        public Point2D getCtrlP2() {
            return new Point2D.Double(this.ctrlx2, this.ctrly2);
        }

        @Override
        public double getCtrlX1() {
            return this.ctrlx1;
        }

        @Override
        public double getCtrlX2() {
            return this.ctrlx2;
        }

        @Override
        public double getCtrlY1() {
            return this.ctrly1;
        }

        @Override
        public double getCtrlY2() {
            return this.ctrly2;
        }

        @Override
        public Point2D getP1() {
            return new Point2D.Double(this.x1, this.y1);
        }

        @Override
        public Point2D getP2() {
            return new Point2D.Double(this.x2, this.y2);
        }

        @Override
        public double getX1() {
            return this.x1;
        }

        @Override
        public double getX2() {
            return this.x2;
        }

        @Override
        public double getY1() {
            return this.y1;
        }

        @Override
        public double getY2() {
            return this.y2;
        }

        @Override
        public void setCurve(double d, double d2, double d3, double d4, double d5, double d6, double d7, double d8) {
            this.x1 = d;
            this.y1 = d2;
            this.ctrlx1 = d3;
            this.ctrly1 = d4;
            this.ctrlx2 = d5;
            this.ctrly2 = d6;
            this.x2 = d7;
            this.y2 = d8;
        }
    }

    public static class Float
    extends CubicCurve2D {
        public float ctrlx1;
        public float ctrlx2;
        public float ctrly1;
        public float ctrly2;
        public float x1;
        public float x2;
        public float y1;
        public float y2;

        public Float() {
        }

        public Float(float f, float f2, float f3, float f4, float f5, float f6, float f7, float f8) {
            this.setCurve(f, f2, f3, f4, f5, f6, f7, f8);
        }

        @Override
        public Rectangle2D getBounds2D() {
            float f = Math.min(Math.min(this.x1, this.x2), Math.min(this.ctrlx1, this.ctrlx2));
            float f2 = Math.min(Math.min(this.y1, this.y2), Math.min(this.ctrly1, this.ctrly2));
            return new Rectangle2D.Float(f, f2, Math.max(Math.max(this.x1, this.x2), Math.max(this.ctrlx1, this.ctrlx2)) - f, Math.max(Math.max(this.y1, this.y2), Math.max(this.ctrly1, this.ctrly2)) - f2);
        }

        @Override
        public Point2D getCtrlP1() {
            return new Point2D.Float(this.ctrlx1, this.ctrly1);
        }

        @Override
        public Point2D getCtrlP2() {
            return new Point2D.Float(this.ctrlx2, this.ctrly2);
        }

        @Override
        public double getCtrlX1() {
            return this.ctrlx1;
        }

        @Override
        public double getCtrlX2() {
            return this.ctrlx2;
        }

        @Override
        public double getCtrlY1() {
            return this.ctrly1;
        }

        @Override
        public double getCtrlY2() {
            return this.ctrly2;
        }

        @Override
        public Point2D getP1() {
            return new Point2D.Float(this.x1, this.y1);
        }

        @Override
        public Point2D getP2() {
            return new Point2D.Float(this.x2, this.y2);
        }

        @Override
        public double getX1() {
            return this.x1;
        }

        @Override
        public double getX2() {
            return this.x2;
        }

        @Override
        public double getY1() {
            return this.y1;
        }

        @Override
        public double getY2() {
            return this.y2;
        }

        @Override
        public void setCurve(double d, double d2, double d3, double d4, double d5, double d6, double d7, double d8) {
            this.x1 = (float)d;
            this.y1 = (float)d2;
            this.ctrlx1 = (float)d3;
            this.ctrly1 = (float)d4;
            this.ctrlx2 = (float)d5;
            this.ctrly2 = (float)d6;
            this.x2 = (float)d7;
            this.y2 = (float)d8;
        }

        public void setCurve(float f, float f2, float f3, float f4, float f5, float f6, float f7, float f8) {
            this.x1 = f;
            this.y1 = f2;
            this.ctrlx1 = f3;
            this.ctrly1 = f4;
            this.ctrlx2 = f5;
            this.ctrly2 = f6;
            this.x2 = f7;
            this.y2 = f8;
        }
    }

    class Iterator
    implements PathIterator {
        CubicCurve2D c;
        int index;
        AffineTransform t;

        Iterator(CubicCurve2D cubicCurve2D2, AffineTransform affineTransform) {
            this.c = cubicCurve2D2;
            this.t = affineTransform;
        }

        @Override
        public int currentSegment(double[] arrd) {
            if (this.isDone()) {
                throw new NoSuchElementException(Messages.getString("awt.4B"));
            }
            int n = this.index;
            int n2 = 3;
            if (n == 0) {
                arrd[0] = this.c.getX1();
                arrd[1] = this.c.getY1();
                n2 = 0;
                n = 1;
            } else {
                arrd[0] = this.c.getCtrlX1();
                arrd[1] = this.c.getCtrlY1();
                arrd[2] = this.c.getCtrlX2();
                arrd[3] = this.c.getCtrlY2();
                arrd[4] = this.c.getX2();
                arrd[5] = this.c.getY2();
                n = 3;
            }
            if (this.t != null) {
                this.t.transform(arrd, 0, arrd, 0, n);
            }
            return n2;
        }

        @Override
        public int currentSegment(float[] arrf) {
            if (this.isDone()) {
                throw new NoSuchElementException(Messages.getString("awt.4B"));
            }
            int n = this.index;
            int n2 = 3;
            if (n == 0) {
                arrf[0] = (float)this.c.getX1();
                arrf[1] = (float)this.c.getY1();
                n2 = 0;
                n = 1;
            } else {
                arrf[0] = (float)this.c.getCtrlX1();
                arrf[1] = (float)this.c.getCtrlY1();
                arrf[2] = (float)this.c.getCtrlX2();
                arrf[3] = (float)this.c.getCtrlY2();
                arrf[4] = (float)this.c.getX2();
                arrf[5] = (float)this.c.getY2();
                n = 3;
            }
            if (this.t != null) {
                this.t.transform(arrf, 0, arrf, 0, n);
            }
            return n2;
        }

        @Override
        public int getWindingRule() {
            return 1;
        }

        @Override
        public boolean isDone() {
            if (this.index > 1) {
                return true;
            }
            return false;
        }

        @Override
        public void next() {
            ++this.index;
        }
    }

}

