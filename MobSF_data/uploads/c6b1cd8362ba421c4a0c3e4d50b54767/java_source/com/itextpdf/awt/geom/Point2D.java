/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.awt.geom;

import com.itextpdf.awt.geom.misc.HashCode;

public abstract class Point2D
implements Cloneable {
    protected Point2D() {
    }

    public static double distance(double d, double d2, double d3, double d4) {
        return Math.sqrt(Point2D.distanceSq(d, d2, d3, d4));
    }

    public static double distanceSq(double d, double d2, double d3, double d4) {
        d = d3 - d;
        d2 = d4 - d2;
        return d * d + d2 * d2;
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    public Object clone() {
        try {
            return super.clone();
        }
        catch (CloneNotSupportedException cloneNotSupportedException) {
            throw new InternalError();
        }
    }

    public double distance(double d, double d2) {
        return Math.sqrt(this.distanceSq(d, d2));
    }

    public double distance(Point2D point2D) {
        return Math.sqrt(this.distanceSq(point2D));
    }

    public double distanceSq(double d, double d2) {
        return Point2D.distanceSq(this.getX(), this.getY(), d, d2);
    }

    public double distanceSq(Point2D point2D) {
        return Point2D.distanceSq(this.getX(), this.getY(), point2D.getX(), point2D.getY());
    }

    public boolean equals(Object object) {
        if (object == this) {
            return true;
        }
        if (object instanceof Point2D) {
            object = (Point2D)object;
            if (this.getX() == object.getX() && this.getY() == object.getY()) {
                return true;
            }
            return false;
        }
        return false;
    }

    public abstract double getX();

    public abstract double getY();

    public int hashCode() {
        HashCode hashCode = new HashCode();
        hashCode.append(this.getX());
        hashCode.append(this.getY());
        return hashCode.hashCode();
    }

    public abstract void setLocation(double var1, double var3);

    public void setLocation(Point2D point2D) {
        this.setLocation(point2D.getX(), point2D.getY());
    }

    public static class Double
    extends Point2D {
        public double x;
        public double y;

        public Double() {
        }

        public Double(double d, double d2) {
            this.x = d;
            this.y = d2;
        }

        @Override
        public double getX() {
            return this.x;
        }

        @Override
        public double getY() {
            return this.y;
        }

        @Override
        public void setLocation(double d, double d2) {
            this.x = d;
            this.y = d2;
        }

        public String toString() {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append(this.getClass().getName());
            stringBuilder.append("[x=");
            stringBuilder.append(this.x);
            stringBuilder.append(",y=");
            stringBuilder.append(this.y);
            stringBuilder.append("]");
            return stringBuilder.toString();
        }
    }

    public static class Float
    extends Point2D {
        public float x;
        public float y;

        public Float() {
        }

        public Float(float f, float f2) {
            this.x = f;
            this.y = f2;
        }

        @Override
        public double getX() {
            return this.x;
        }

        @Override
        public double getY() {
            return this.y;
        }

        @Override
        public void setLocation(double d, double d2) {
            this.x = (float)d;
            this.y = (float)d2;
        }

        public void setLocation(float f, float f2) {
            this.x = f;
            this.y = f2;
        }

        public String toString() {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append(this.getClass().getName());
            stringBuilder.append("[x=");
            stringBuilder.append(this.x);
            stringBuilder.append(",y=");
            stringBuilder.append(this.y);
            stringBuilder.append("]");
            return stringBuilder.toString();
        }
    }

}

