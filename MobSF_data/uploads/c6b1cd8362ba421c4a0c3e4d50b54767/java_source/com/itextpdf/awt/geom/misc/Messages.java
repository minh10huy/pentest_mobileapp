/*
 * Decompiled with CFR 0_132.
 */
package com.itextpdf.awt.geom.misc;

import java.util.MissingResourceException;
import java.util.ResourceBundle;

public class Messages {
    private static ResourceBundle bundle;

    public static String format(String string2, Object[] arrobject) {
        int n;
        int n2;
        StringBuilder stringBuilder = new StringBuilder(string2.length() + arrobject.length * 20);
        String[] arrstring = new String[arrobject.length];
        int n3 = 0;
        for (n = 0; n < arrobject.length; ++n) {
            arrstring[n] = arrobject[n] == null ? "<null>" : arrobject[n].toString();
        }
        n = n3;
        while ((n2 = string2.indexOf(123, n)) >= 0) {
            if (n2 != 0 && string2.charAt(n3 = n2 - 1) == '\\') {
                if (n2 != 1) {
                    stringBuilder.append(string2.substring(n, n3));
                }
                stringBuilder.append('{');
                n = n2 + 1;
                continue;
            }
            if (n2 > string2.length() - 3) {
                stringBuilder.append(string2.substring(n, string2.length()));
                n = string2.length();
                continue;
            }
            n3 = n2 + 1;
            byte by = (byte)Character.digit(string2.charAt(n3), 10);
            if (by >= 0 && string2.charAt(n2 + 2) == '}') {
                stringBuilder.append(string2.substring(n, n2));
                if (by >= arrstring.length) {
                    stringBuilder.append("<missing argument>");
                } else {
                    stringBuilder.append(arrstring[by]);
                }
                n = n2 + 3;
                continue;
            }
            stringBuilder.append(string2.substring(n, n3));
            n = n3;
        }
        if (n < string2.length()) {
            stringBuilder.append(string2.substring(n, string2.length()));
        }
        return stringBuilder.toString();
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public static String getString(String string2) {
        if (bundle == null) {
            return string2;
        }
        try {
            return bundle.getString(string2);
        }
        catch (MissingResourceException missingResourceException) {}
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("Missing message: ");
        stringBuilder.append(string2);
        return stringBuilder.toString();
    }

    public static String getString(String string2, char c) {
        return Messages.getString(string2, new Object[]{String.valueOf(c)});
    }

    public static String getString(String string2, int n) {
        return Messages.getString(string2, new Object[]{Integer.toString(n)});
    }

    public static String getString(String string2, Object object) {
        return Messages.getString(string2, new Object[]{object});
    }

    public static String getString(String string2, Object object, Object object2) {
        return Messages.getString(string2, new Object[]{object, object2});
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public static String getString(String string2, Object[] arrobject) {
        String string3 = string2;
        if (bundle == null) return Messages.format(string3, arrobject);
        try {
            string3 = bundle.getString(string2);
        }
        catch (MissingResourceException missingResourceException) {
            string3 = string2;
            return Messages.format(string3, arrobject);
        }
        return Messages.format(string3, arrobject);
    }
}

