/*
 * Decompiled with CFR 0_132.
 */
package io.reactivex.disposables;

import io.reactivex.annotations.NonNull;
import io.reactivex.disposables.Disposable;
import io.reactivex.exceptions.CompositeException;
import io.reactivex.exceptions.Exceptions;
import io.reactivex.internal.disposables.DisposableContainer;
import io.reactivex.internal.functions.ObjectHelper;
import io.reactivex.internal.util.ExceptionHelper;
import io.reactivex.internal.util.OpenHashSet;
import java.util.ArrayList;
import java.util.Iterator;

public final class CompositeDisposable
implements Disposable,
DisposableContainer {
    volatile boolean disposed;
    OpenHashSet<Disposable> resources;

    public CompositeDisposable() {
    }

    public CompositeDisposable(@NonNull Iterable<? extends Disposable> object) {
        ObjectHelper.requireNonNull(object, "resources is null");
        this.resources = new OpenHashSet();
        object = object.iterator();
        while (object.hasNext()) {
            Disposable disposable = (Disposable)object.next();
            ObjectHelper.requireNonNull(disposable, "Disposable item is null");
            this.resources.add(disposable);
        }
    }

    public /* varargs */ CompositeDisposable(@NonNull Disposable ... arrdisposable) {
        ObjectHelper.requireNonNull(arrdisposable, "resources is null");
        this.resources = new OpenHashSet(arrdisposable.length + 1);
        for (Disposable disposable : arrdisposable) {
            ObjectHelper.requireNonNull(disposable, "Disposable item is null");
            this.resources.add(disposable);
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @Override
    public boolean add(@NonNull Disposable disposable) {
        ObjectHelper.requireNonNull(disposable, "d is null");
        if (!this.disposed) {
            synchronized (this) {
                if (!this.disposed) {
                    OpenHashSet<Disposable> openHashSet;
                    OpenHashSet<Disposable> openHashSet2 = openHashSet = this.resources;
                    if (openHashSet == null) {
                        this.resources = openHashSet2 = new OpenHashSet();
                    }
                    openHashSet2.add(disposable);
                    return true;
                }
            }
        }
        disposable.dispose();
        return false;
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public /* varargs */ boolean addAll(@NonNull Disposable ... arrdisposable) {
        ObjectHelper.requireNonNull(arrdisposable, "ds is null");
        boolean bl = this.disposed;
        int n = 0;
        if (!bl) {
            synchronized (this) {
                if (!this.disposed) {
                    Object object = this.resources;
                    OpenHashSet<Disposable> openHashSet = object;
                    if (object == null) {
                        openHashSet = new OpenHashSet(arrdisposable.length + 1);
                        this.resources = openHashSet;
                    }
                    int n2 = arrdisposable.length;
                    do {
                        if (n >= n2) {
                            return true;
                        }
                        object = arrdisposable[n];
                        ObjectHelper.requireNonNull(object, "d is null");
                        openHashSet.add((Disposable)object);
                        ++n;
                    } while (true);
                }
            }
        }
        int n3 = arrdisposable.length;
        n = 0;
        while (n < n3) {
            arrdisposable[n].dispose();
            ++n;
        }
        return false;
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public void clear() {
        OpenHashSet<Disposable> openHashSet;
        if (this.disposed) {
            return;
        }
        synchronized (this) {
            if (this.disposed) {
                return;
            }
            openHashSet = this.resources;
            this.resources = null;
        }
        this.dispose(openHashSet);
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @Override
    public boolean delete(@NonNull Disposable disposable) {
        ObjectHelper.requireNonNull(disposable, "Disposable item is null");
        if (this.disposed) {
            return false;
        }
        synchronized (this) {
            if (this.disposed) {
                return false;
            }
            OpenHashSet<Disposable> openHashSet = this.resources;
            if (openHashSet != null && openHashSet.remove(disposable)) {
                return true;
            }
            return false;
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @Override
    public void dispose() {
        OpenHashSet<Disposable> openHashSet;
        if (this.disposed) {
            return;
        }
        synchronized (this) {
            if (this.disposed) {
                return;
            }
            this.disposed = true;
            openHashSet = this.resources;
            this.resources = null;
        }
        this.dispose(openHashSet);
    }

    void dispose(OpenHashSet<Disposable> openHashSet) {
        if (openHashSet == null) {
            return;
        }
        Object[] arrobject = openHashSet.keys();
        int n = arrobject.length;
        openHashSet = null;
        for (int i = 0; i < n; ++i) {
            Object object = arrobject[i];
            Object object2 = openHashSet;
            if (object instanceof Disposable) {
                try {
                    ((Disposable)object).dispose();
                    object2 = openHashSet;
                }
                catch (Throwable throwable) {
                    Exceptions.throwIfFatal(throwable);
                    object2 = openHashSet;
                    if (openHashSet == null) {
                        object2 = new ArrayList();
                    }
                    object2.add((Throwable)throwable);
                }
            }
            openHashSet = object2;
        }
        if (openHashSet != null) {
            if (openHashSet.size() == 1) {
                throw ExceptionHelper.wrapOrThrow((Throwable)((Object)openHashSet.get(0)));
            }
            throw new CompositeException((Iterable<? extends Throwable>)((Object)openHashSet));
        }
    }

    @Override
    public boolean isDisposed() {
        return this.disposed;
    }

    @Override
    public boolean remove(@NonNull Disposable disposable) {
        if (this.delete(disposable)) {
            disposable.dispose();
            return true;
        }
        return false;
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public int size() {
        boolean bl = this.disposed;
        int n = 0;
        if (bl) {
            return 0;
        }
        synchronized (this) {
            if (this.disposed) {
                return 0;
            }
            OpenHashSet<Disposable> openHashSet = this.resources;
            if (openHashSet == null) return n;
            return openHashSet.size();
        }
    }
}

