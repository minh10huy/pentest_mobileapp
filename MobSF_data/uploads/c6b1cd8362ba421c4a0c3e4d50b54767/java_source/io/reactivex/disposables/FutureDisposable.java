/*
 * Decompiled with CFR 0_132.
 */
package io.reactivex.disposables;

import io.reactivex.disposables.Disposable;
import java.util.concurrent.Future;
import java.util.concurrent.atomic.AtomicReference;

final class FutureDisposable
extends AtomicReference<Future<?>>
implements Disposable {
    private static final long serialVersionUID = 6545242830671168775L;
    private final boolean allowInterrupt;

    FutureDisposable(Future<?> future, boolean bl) {
        super(future);
        this.allowInterrupt = bl;
    }

    @Override
    public void dispose() {
        Future future = this.getAndSet(null);
        if (future != null) {
            future.cancel(this.allowInterrupt);
        }
    }

    @Override
    public boolean isDisposed() {
        Future future = (Future)this.get();
        if (future != null && !future.isDone()) {
            return false;
        }
        return true;
    }
}

