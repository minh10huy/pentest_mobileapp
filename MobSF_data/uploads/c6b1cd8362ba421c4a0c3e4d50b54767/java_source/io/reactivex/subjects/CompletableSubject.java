/*
 * Decompiled with CFR 0_132.
 */
package io.reactivex.subjects;

import io.reactivex.Completable;
import io.reactivex.CompletableObserver;
import io.reactivex.annotations.CheckReturnValue;
import io.reactivex.disposables.Disposable;
import io.reactivex.plugins.RxJavaPlugins;
import java.io.Serializable;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicReference;

public final class CompletableSubject
extends Completable
implements CompletableObserver {
    static final CompletableDisposable[] EMPTY = new CompletableDisposable[0];
    static final CompletableDisposable[] TERMINATED = new CompletableDisposable[0];
    Throwable error;
    final AtomicReference<CompletableDisposable[]> observers = new AtomicReference<CompletableDisposable[]>(EMPTY);
    final AtomicBoolean once = new AtomicBoolean();

    CompletableSubject() {
    }

    @CheckReturnValue
    public static CompletableSubject create() {
        return new CompletableSubject();
    }

    boolean add(CompletableDisposable completableDisposable) {
        CompletableDisposable[] arrcompletableDisposable;
        CompletableDisposable[] arrcompletableDisposable2;
        do {
            if ((arrcompletableDisposable2 = this.observers.get()) == TERMINATED) {
                return false;
            }
            int n = arrcompletableDisposable2.length;
            arrcompletableDisposable = new CompletableDisposable[n + 1];
            System.arraycopy(arrcompletableDisposable2, 0, arrcompletableDisposable, 0, n);
            arrcompletableDisposable[n] = completableDisposable;
        } while (!this.observers.compareAndSet(arrcompletableDisposable2, arrcompletableDisposable));
        return true;
    }

    public Throwable getThrowable() {
        if (this.observers.get() == TERMINATED) {
            return this.error;
        }
        return null;
    }

    public boolean hasComplete() {
        if (this.observers.get() == TERMINATED && this.error == null) {
            return true;
        }
        return false;
    }

    public boolean hasObservers() {
        if (this.observers.get().length != 0) {
            return true;
        }
        return false;
    }

    public boolean hasThrowable() {
        if (this.observers.get() == TERMINATED && this.error != null) {
            return true;
        }
        return false;
    }

    int observerCount() {
        return this.observers.get().length;
    }

    @Override
    public void onComplete() {
        CompletableDisposable[] arrcompletableDisposable = this.once;
        if (arrcompletableDisposable.compareAndSet(false, true)) {
            arrcompletableDisposable = this.observers.getAndSet(TERMINATED);
            int n = arrcompletableDisposable.length;
            for (int i = 0; i < n; ++i) {
                arrcompletableDisposable[i].actual.onComplete();
            }
        }
    }

    @Override
    public void onError(Throwable serializable) {
        Throwable throwable = serializable;
        if (serializable == null) {
            throwable = new NullPointerException("Null errors are not allowed in 2.x");
        }
        serializable = this.once;
        if (serializable.compareAndSet(false, true)) {
            this.error = throwable;
            serializable = this.observers.getAndSet(TERMINATED);
            int n = ((Serializable)serializable).length;
            for (int i = 0; i < n; ++i) {
                serializable[i].actual.onError(throwable);
            }
        } else {
            RxJavaPlugins.onError(throwable);
        }
    }

    @Override
    public void onSubscribe(Disposable disposable) {
        if (this.observers.get() == TERMINATED) {
            disposable.dispose();
        }
    }

    void remove(CompletableDisposable completableDisposable) {
        CompletableDisposable[] arrcompletableDisposable;
        CompletableDisposable[] arrcompletableDisposable2;
        do {
            int n;
            int n2;
            if ((n2 = (arrcompletableDisposable2 = this.observers.get()).length) == 0) {
                return;
            }
            int n3 = -1;
            int n4 = 0;
            do {
                n = n3;
                if (n4 >= n2) break;
                if (arrcompletableDisposable2[n4] == completableDisposable) {
                    n = n4;
                    break;
                }
                ++n4;
            } while (true);
            if (n < 0) {
                return;
            }
            if (n2 == 1) {
                arrcompletableDisposable = EMPTY;
                continue;
            }
            arrcompletableDisposable = new CompletableDisposable[n2 - 1];
            System.arraycopy(arrcompletableDisposable2, 0, arrcompletableDisposable, 0, n);
            System.arraycopy(arrcompletableDisposable2, n + 1, arrcompletableDisposable, n, n2 - n - 1);
        } while (!this.observers.compareAndSet(arrcompletableDisposable2, arrcompletableDisposable));
    }

    @Override
    protected void subscribeActual(CompletableObserver completableObserver) {
        Serializable serializable = new CompletableDisposable(completableObserver, this);
        completableObserver.onSubscribe((Disposable)((Object)serializable));
        if (this.add((CompletableDisposable)serializable)) {
            if (serializable.isDisposed()) {
                this.remove((CompletableDisposable)serializable);
                return;
            }
        } else {
            serializable = this.error;
            if (serializable != null) {
                completableObserver.onError((Throwable)serializable);
                return;
            }
            completableObserver.onComplete();
        }
    }

    static final class CompletableDisposable
    extends AtomicReference<CompletableSubject>
    implements Disposable {
        private static final long serialVersionUID = -7650903191002190468L;
        final CompletableObserver actual;

        CompletableDisposable(CompletableObserver completableObserver, CompletableSubject completableSubject) {
            this.actual = completableObserver;
            this.lazySet(completableSubject);
        }

        @Override
        public void dispose() {
            CompletableSubject completableSubject = this.getAndSet(null);
            if (completableSubject != null) {
                completableSubject.remove(this);
            }
        }

        @Override
        public boolean isDisposed() {
            if (this.get() == null) {
                return true;
            }
            return false;
        }
    }

}

