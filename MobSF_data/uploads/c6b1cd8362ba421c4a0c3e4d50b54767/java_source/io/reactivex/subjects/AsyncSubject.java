/*
 * Decompiled with CFR 0_132.
 */
package io.reactivex.subjects;

import io.reactivex.Observer;
import io.reactivex.annotations.CheckReturnValue;
import io.reactivex.disposables.Disposable;
import io.reactivex.internal.observers.DeferredScalarDisposable;
import io.reactivex.plugins.RxJavaPlugins;
import io.reactivex.subjects.Subject;
import java.util.Arrays;
import java.util.concurrent.atomic.AtomicReference;

public final class AsyncSubject<T>
extends Subject<T> {
    static final AsyncDisposable[] EMPTY = new AsyncDisposable[0];
    static final AsyncDisposable[] TERMINATED = new AsyncDisposable[0];
    Throwable error;
    final AtomicReference<AsyncDisposable<T>[]> subscribers = new AtomicReference<AsyncDisposable[]>(EMPTY);
    T value;

    AsyncSubject() {
    }

    @CheckReturnValue
    public static <T> AsyncSubject<T> create() {
        return new AsyncSubject<T>();
    }

    boolean add(AsyncDisposable<T> asyncDisposable) {
        AsyncDisposable[] arrasyncDisposable;
        AsyncDisposable<T>[] arrasyncDisposable2;
        do {
            if ((arrasyncDisposable2 = this.subscribers.get()) == TERMINATED) {
                return false;
            }
            int n = arrasyncDisposable2.length;
            arrasyncDisposable = new AsyncDisposable[n + 1];
            System.arraycopy(arrasyncDisposable2, 0, arrasyncDisposable, 0, n);
            arrasyncDisposable[n] = asyncDisposable;
        } while (!this.subscribers.compareAndSet(arrasyncDisposable2, arrasyncDisposable));
        return true;
    }

    @Override
    public Throwable getThrowable() {
        if (this.subscribers.get() == TERMINATED) {
            return this.error;
        }
        return null;
    }

    public T getValue() {
        if (this.subscribers.get() == TERMINATED) {
            return this.value;
        }
        return null;
    }

    public Object[] getValues() {
        T t = this.getValue();
        if (t != null) {
            return new Object[]{t};
        }
        return new Object[0];
    }

    public T[] getValues(T[] arrT) {
        T t = this.getValue();
        if (t == null) {
            if (arrT.length != 0) {
                arrT[0] = null;
            }
            return arrT;
        }
        T[] arrT2 = arrT;
        if (arrT.length == 0) {
            arrT2 = Arrays.copyOf(arrT, 1);
        }
        arrT2[0] = t;
        if (arrT2.length != 1) {
            arrT2[1] = null;
        }
        return arrT2;
    }

    @Override
    public boolean hasComplete() {
        if (this.subscribers.get() == TERMINATED && this.error == null) {
            return true;
        }
        return false;
    }

    @Override
    public boolean hasObservers() {
        if (this.subscribers.get().length != 0) {
            return true;
        }
        return false;
    }

    @Override
    public boolean hasThrowable() {
        if (this.subscribers.get() == TERMINATED && this.error != null) {
            return true;
        }
        return false;
    }

    public boolean hasValue() {
        if (this.subscribers.get() == TERMINATED && this.value != null) {
            return true;
        }
        return false;
    }

    void nullOnNext() {
        this.value = null;
        NullPointerException nullPointerException = new NullPointerException("onNext called with null. Null values are generally not allowed in 2.x operators and sources.");
        this.error = nullPointerException;
        AsyncDisposable[] arrasyncDisposable = this.subscribers.getAndSet(TERMINATED);
        int n = arrasyncDisposable.length;
        for (int i = 0; i < n; ++i) {
            arrasyncDisposable[i].onError(nullPointerException);
        }
    }

    @Override
    public void onComplete() {
        int n;
        if (this.subscribers.get() == TERMINATED) {
            return;
        }
        T t = this.value;
        AsyncDisposable[] arrasyncDisposable = this.subscribers.getAndSet(TERMINATED);
        int n2 = 0;
        if (t == null) {
            n2 = arrasyncDisposable.length;
            for (n = 0; n < n2; ++n) {
                arrasyncDisposable[n].onComplete();
            }
        } else {
            int n3 = arrasyncDisposable.length;
            for (n = n2; n < n3; ++n) {
                arrasyncDisposable[n].complete(t);
            }
        }
    }

    @Override
    public void onError(Throwable arrasyncDisposable) {
        AsyncDisposable[] arrasyncDisposable2 = arrasyncDisposable;
        if (arrasyncDisposable == null) {
            arrasyncDisposable2 = new NullPointerException("onError called with null. Null values are generally not allowed in 2.x operators and sources.");
        }
        if (this.subscribers.get() == TERMINATED) {
            RxJavaPlugins.onError((Throwable)arrasyncDisposable2);
            return;
        }
        this.value = null;
        this.error = arrasyncDisposable2;
        arrasyncDisposable = this.subscribers.getAndSet(TERMINATED);
        int n = arrasyncDisposable.length;
        for (int i = 0; i < n; ++i) {
            arrasyncDisposable[i].onError((Throwable)arrasyncDisposable2);
        }
    }

    @Override
    public void onNext(T t) {
        if (this.subscribers.get() == TERMINATED) {
            return;
        }
        if (t == null) {
            this.nullOnNext();
            return;
        }
        this.value = t;
    }

    @Override
    public void onSubscribe(Disposable disposable) {
        if (this.subscribers.get() == TERMINATED) {
            disposable.dispose();
        }
    }

    void remove(AsyncDisposable<T> asyncDisposable) {
        AsyncDisposable[] arrasyncDisposable;
        AsyncDisposable<T>[] arrasyncDisposable2;
        do {
            int n;
            int n2;
            if ((n2 = (arrasyncDisposable2 = this.subscribers.get()).length) == 0) {
                return;
            }
            int n3 = -1;
            int n4 = 0;
            do {
                n = n3;
                if (n4 >= n2) break;
                if (arrasyncDisposable2[n4] == asyncDisposable) {
                    n = n4;
                    break;
                }
                ++n4;
            } while (true);
            if (n < 0) {
                return;
            }
            if (n2 == 1) {
                arrasyncDisposable = EMPTY;
                continue;
            }
            arrasyncDisposable = new AsyncDisposable[n2 - 1];
            System.arraycopy(arrasyncDisposable2, 0, arrasyncDisposable, 0, n);
            System.arraycopy(arrasyncDisposable2, n + 1, arrasyncDisposable, n, n2 - n - 1);
        } while (!this.subscribers.compareAndSet(arrasyncDisposable2, arrasyncDisposable));
    }

    @Override
    protected void subscribeActual(Observer<? super T> observer) {
        AsyncDisposable<Observer<T>> asyncDisposable = new AsyncDisposable<Observer<T>>(observer, this);
        observer.onSubscribe(asyncDisposable);
        if (this.add(asyncDisposable)) {
            if (asyncDisposable.isDisposed()) {
                this.remove(asyncDisposable);
                return;
            }
        } else {
            Throwable throwable = this.error;
            if (throwable != null) {
                observer.onError(throwable);
                return;
            }
            observer = this.value;
            if (observer != null) {
                asyncDisposable.complete(observer);
                return;
            }
            asyncDisposable.onComplete();
        }
    }

    static final class AsyncDisposable<T>
    extends DeferredScalarDisposable<T> {
        private static final long serialVersionUID = 5629876084736248016L;
        final AsyncSubject<T> parent;

        AsyncDisposable(Observer<? super T> observer, AsyncSubject<T> asyncSubject) {
            super(observer);
            this.parent = asyncSubject;
        }

        @Override
        public void dispose() {
            if (super.tryDispose()) {
                this.parent.remove(this);
            }
        }

        void onComplete() {
            if (!this.isDisposed()) {
                this.actual.onComplete();
            }
        }

        void onError(Throwable throwable) {
            if (this.isDisposed()) {
                RxJavaPlugins.onError(throwable);
                return;
            }
            this.actual.onError(throwable);
        }
    }

}

