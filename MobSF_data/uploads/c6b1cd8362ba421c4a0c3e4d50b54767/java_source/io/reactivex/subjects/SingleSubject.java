/*
 * Decompiled with CFR 0_132.
 */
package io.reactivex.subjects;

import io.reactivex.Single;
import io.reactivex.SingleObserver;
import io.reactivex.annotations.CheckReturnValue;
import io.reactivex.annotations.NonNull;
import io.reactivex.annotations.Nullable;
import io.reactivex.disposables.Disposable;
import io.reactivex.plugins.RxJavaPlugins;
import java.io.Serializable;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicReference;

public final class SingleSubject<T>
extends Single<T>
implements SingleObserver<T> {
    static final SingleDisposable[] EMPTY = new SingleDisposable[0];
    static final SingleDisposable[] TERMINATED = new SingleDisposable[0];
    Throwable error;
    final AtomicReference<SingleDisposable<T>[]> observers = new AtomicReference<SingleDisposable[]>(EMPTY);
    final AtomicBoolean once = new AtomicBoolean();
    T value;

    SingleSubject() {
    }

    @CheckReturnValue
    @NonNull
    public static <T> SingleSubject<T> create() {
        return new SingleSubject<T>();
    }

    boolean add(@NonNull SingleDisposable<T> singleDisposable) {
        SingleDisposable[] arrsingleDisposable;
        SingleDisposable<T>[] arrsingleDisposable2;
        do {
            if ((arrsingleDisposable2 = this.observers.get()) == TERMINATED) {
                return false;
            }
            int n = arrsingleDisposable2.length;
            arrsingleDisposable = new SingleDisposable[n + 1];
            System.arraycopy(arrsingleDisposable2, 0, arrsingleDisposable, 0, n);
            arrsingleDisposable[n] = singleDisposable;
        } while (!this.observers.compareAndSet(arrsingleDisposable2, arrsingleDisposable));
        return true;
    }

    @Nullable
    public Throwable getThrowable() {
        if (this.observers.get() == TERMINATED) {
            return this.error;
        }
        return null;
    }

    @Nullable
    public T getValue() {
        if (this.observers.get() == TERMINATED) {
            return this.value;
        }
        return null;
    }

    public boolean hasObservers() {
        if (this.observers.get().length != 0) {
            return true;
        }
        return false;
    }

    public boolean hasThrowable() {
        if (this.observers.get() == TERMINATED && this.error != null) {
            return true;
        }
        return false;
    }

    public boolean hasValue() {
        if (this.observers.get() == TERMINATED && this.value != null) {
            return true;
        }
        return false;
    }

    int observerCount() {
        return this.observers.get().length;
    }

    @Override
    public void onError(@NonNull Throwable serializable) {
        Throwable throwable = serializable;
        if (serializable == null) {
            throwable = new NullPointerException("Null errors are not allowed in 2.x");
        }
        serializable = this.once;
        if (serializable.compareAndSet(false, true)) {
            this.error = throwable;
            serializable = this.observers.getAndSet(TERMINATED);
            int n = ((Serializable)serializable).length;
            for (int i = 0; i < n; ++i) {
                serializable[i].actual.onError(throwable);
            }
        } else {
            RxJavaPlugins.onError(throwable);
        }
    }

    @Override
    public void onSubscribe(@NonNull Disposable disposable) {
        if (this.observers.get() == TERMINATED) {
            disposable.dispose();
        }
    }

    @Override
    public void onSuccess(@NonNull T t) {
        if (t == null) {
            this.onError(new NullPointerException("Null values are not allowed in 2.x"));
            return;
        }
        SingleDisposable[] arrsingleDisposable = this.once;
        if (arrsingleDisposable.compareAndSet(false, true)) {
            this.value = t;
            arrsingleDisposable = this.observers.getAndSet(TERMINATED);
            int n = arrsingleDisposable.length;
            for (int i = 0; i < n; ++i) {
                arrsingleDisposable[i].actual.onSuccess(t);
            }
        }
    }

    void remove(@NonNull SingleDisposable<T> singleDisposable) {
        SingleDisposable[] arrsingleDisposable;
        SingleDisposable<T>[] arrsingleDisposable2;
        do {
            int n;
            int n2;
            if ((n2 = (arrsingleDisposable2 = this.observers.get()).length) == 0) {
                return;
            }
            int n3 = -1;
            int n4 = 0;
            do {
                n = n3;
                if (n4 >= n2) break;
                if (arrsingleDisposable2[n4] == singleDisposable) {
                    n = n4;
                    break;
                }
                ++n4;
            } while (true);
            if (n < 0) {
                return;
            }
            if (n2 == 1) {
                arrsingleDisposable = EMPTY;
                continue;
            }
            arrsingleDisposable = new SingleDisposable[n2 - 1];
            System.arraycopy(arrsingleDisposable2, 0, arrsingleDisposable, 0, n);
            System.arraycopy(arrsingleDisposable2, n + 1, arrsingleDisposable, n, n2 - n - 1);
        } while (!this.observers.compareAndSet(arrsingleDisposable2, arrsingleDisposable));
    }

    @Override
    protected void subscribeActual(@NonNull SingleObserver<? super T> singleObserver) {
        Serializable serializable = new SingleDisposable<T>(singleObserver, this);
        singleObserver.onSubscribe((Disposable)((Object)serializable));
        if (this.add((SingleDisposable<T>)serializable)) {
            if (serializable.isDisposed()) {
                this.remove((SingleDisposable<T>)serializable);
                return;
            }
        } else {
            serializable = this.error;
            if (serializable != null) {
                singleObserver.onError((Throwable)serializable);
                return;
            }
            singleObserver.onSuccess(this.value);
        }
    }

    static final class SingleDisposable<T>
    extends AtomicReference<SingleSubject<T>>
    implements Disposable {
        private static final long serialVersionUID = -7650903191002190468L;
        final SingleObserver<? super T> actual;

        SingleDisposable(SingleObserver<? super T> singleObserver, SingleSubject<T> singleSubject) {
            this.actual = singleObserver;
            this.lazySet(singleSubject);
        }

        @Override
        public void dispose() {
            SingleSubject singleSubject = this.getAndSet(null);
            if (singleSubject != null) {
                singleSubject.remove(this);
            }
        }

        @Override
        public boolean isDisposed() {
            if (this.get() == null) {
                return true;
            }
            return false;
        }
    }

}

