/*
 * Decompiled with CFR 0_132.
 */
package io.reactivex.subjects;

import io.reactivex.Observer;
import io.reactivex.annotations.CheckReturnValue;
import io.reactivex.annotations.Experimental;
import io.reactivex.annotations.Nullable;
import io.reactivex.disposables.Disposable;
import io.reactivex.internal.disposables.EmptyDisposable;
import io.reactivex.internal.functions.ObjectHelper;
import io.reactivex.internal.fuseable.SimpleQueue;
import io.reactivex.internal.observers.BasicIntQueueDisposable;
import io.reactivex.internal.queue.SpscLinkedArrayQueue;
import io.reactivex.plugins.RxJavaPlugins;
import io.reactivex.subjects.Subject;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicReference;

public final class UnicastSubject<T>
extends Subject<T> {
    final AtomicReference<Observer<? super T>> actual;
    final boolean delayError;
    volatile boolean disposed;
    volatile boolean done;
    boolean enableOperatorFusion;
    Throwable error;
    final AtomicReference<Runnable> onTerminate;
    final AtomicBoolean once;
    final SpscLinkedArrayQueue<T> queue;
    final BasicIntQueueDisposable<T> wip;

    UnicastSubject(int n, Runnable runnable) {
        this(n, runnable, true);
    }

    UnicastSubject(int n, Runnable runnable, boolean bl) {
        this.queue = new SpscLinkedArrayQueue(ObjectHelper.verifyPositive(n, "capacityHint"));
        this.onTerminate = new AtomicReference<Runnable>(ObjectHelper.requireNonNull(runnable, "onTerminate"));
        this.delayError = bl;
        this.actual = new AtomicReference();
        this.once = new AtomicBoolean();
        this.wip = new UnicastQueueDisposable();
    }

    UnicastSubject(int n, boolean bl) {
        this.queue = new SpscLinkedArrayQueue(ObjectHelper.verifyPositive(n, "capacityHint"));
        this.onTerminate = new AtomicReference();
        this.delayError = bl;
        this.actual = new AtomicReference();
        this.once = new AtomicBoolean();
        this.wip = new UnicastQueueDisposable();
    }

    @CheckReturnValue
    public static <T> UnicastSubject<T> create() {
        return new UnicastSubject<T>(UnicastSubject.bufferSize(), true);
    }

    @CheckReturnValue
    public static <T> UnicastSubject<T> create(int n) {
        return new UnicastSubject<T>(n, true);
    }

    @CheckReturnValue
    public static <T> UnicastSubject<T> create(int n, Runnable runnable) {
        return new UnicastSubject<T>(n, runnable, true);
    }

    @CheckReturnValue
    @Experimental
    public static <T> UnicastSubject<T> create(int n, Runnable runnable, boolean bl) {
        return new UnicastSubject<T>(n, runnable, bl);
    }

    @CheckReturnValue
    @Experimental
    public static <T> UnicastSubject<T> create(boolean bl) {
        return new UnicastSubject<T>(UnicastSubject.bufferSize(), bl);
    }

    void doTerminate() {
        Runnable runnable = this.onTerminate.get();
        if (runnable != null && this.onTerminate.compareAndSet(runnable, null)) {
            runnable.run();
        }
    }

    void drain() {
        if (this.wip.getAndIncrement() != 0) {
            return;
        }
        Observer<? super T> observer = this.actual.get();
        int n = 1;
        do {
            if (observer != null) {
                if (this.enableOperatorFusion) {
                    this.drainFused(observer);
                    return;
                }
                this.drainNormal(observer);
                return;
            }
            if ((n = this.wip.addAndGet(- n)) == 0) {
                return;
            }
            observer = this.actual.get();
        } while (true);
    }

    void drainFused(Observer<? super T> observer) {
        int n;
        SpscLinkedArrayQueue<T> spscLinkedArrayQueue = this.queue;
        boolean bl = this.delayError;
        int n2 = 1;
        do {
            if (this.disposed) {
                this.actual.lazySet(null);
                spscLinkedArrayQueue.clear();
                return;
            }
            boolean bl2 = this.done;
            if (bl ^ true && bl2 && this.failedFast(spscLinkedArrayQueue, observer)) {
                return;
            }
            observer.onNext(null);
            if (bl2) {
                this.errorOrComplete(observer);
                return;
            }
            n2 = n = this.wip.addAndGet(- n2);
        } while (n != 0);
    }

    void drainNormal(Observer<? super T> observer) {
        SpscLinkedArrayQueue<T> spscLinkedArrayQueue = this.queue;
        boolean bl = this.delayError;
        boolean bl2 = true;
        int n = 1;
        do {
            if (this.disposed) {
                this.actual.lazySet(null);
                spscLinkedArrayQueue.clear();
                return;
            }
            boolean bl3 = this.done;
            T t = this.queue.poll();
            int n2 = t == null ? 1 : 0;
            boolean bl4 = bl2;
            if (bl3) {
                bl4 = bl2;
                if (bl ^ true) {
                    bl4 = bl2;
                    if (bl2) {
                        if (this.failedFast(spscLinkedArrayQueue, observer)) {
                            return;
                        }
                        bl4 = false;
                    }
                }
                if (n2 != 0) {
                    this.errorOrComplete(observer);
                    return;
                }
            }
            if (n2 != 0) {
                n2 = this.wip.addAndGet(- n);
                bl2 = bl4;
                n = n2;
                if (n2 != 0) continue;
                return;
            }
            observer.onNext(t);
            bl2 = bl4;
        } while (true);
    }

    void errorOrComplete(Observer<? super T> observer) {
        this.actual.lazySet(null);
        Throwable throwable = this.error;
        if (throwable != null) {
            observer.onError(throwable);
            return;
        }
        observer.onComplete();
    }

    boolean failedFast(SimpleQueue<T> simpleQueue, Observer<? super T> observer) {
        Throwable throwable = this.error;
        if (throwable != null) {
            this.actual.lazySet(null);
            simpleQueue.clear();
            observer.onError(throwable);
            return true;
        }
        return false;
    }

    @Override
    public Throwable getThrowable() {
        if (this.done) {
            return this.error;
        }
        return null;
    }

    @Override
    public boolean hasComplete() {
        if (this.done && this.error == null) {
            return true;
        }
        return false;
    }

    @Override
    public boolean hasObservers() {
        if (this.actual.get() != null) {
            return true;
        }
        return false;
    }

    @Override
    public boolean hasThrowable() {
        if (this.done && this.error != null) {
            return true;
        }
        return false;
    }

    @Override
    public void onComplete() {
        if (!this.done) {
            if (this.disposed) {
                return;
            }
            this.done = true;
            this.doTerminate();
            this.drain();
            return;
        }
    }

    @Override
    public void onError(Throwable throwable) {
        if (!this.done && !this.disposed) {
            Throwable throwable2 = throwable;
            if (throwable == null) {
                throwable2 = new NullPointerException("onError called with null. Null values are generally not allowed in 2.x operators and sources.");
            }
            this.error = throwable2;
            this.done = true;
            this.doTerminate();
            this.drain();
            return;
        }
        RxJavaPlugins.onError(throwable);
    }

    @Override
    public void onNext(T t) {
        if (!this.done) {
            if (this.disposed) {
                return;
            }
            if (t == null) {
                this.onError(new NullPointerException("onNext called with null. Null values are generally not allowed in 2.x operators and sources."));
                return;
            }
            this.queue.offer(t);
            this.drain();
            return;
        }
    }

    @Override
    public void onSubscribe(Disposable disposable) {
        if (this.done || this.disposed) {
            disposable.dispose();
        }
    }

    @Override
    protected void subscribeActual(Observer<? super T> observer) {
        if (!this.once.get() && this.once.compareAndSet(false, true)) {
            observer.onSubscribe(this.wip);
            this.actual.lazySet(observer);
            if (this.disposed) {
                this.actual.lazySet(null);
                return;
            }
            this.drain();
            return;
        }
        EmptyDisposable.error((Throwable)new IllegalStateException("Only a single observer allowed."), observer);
    }

    final class UnicastQueueDisposable
    extends BasicIntQueueDisposable<T> {
        private static final long serialVersionUID = 7926949470189395511L;

        UnicastQueueDisposable() {
        }

        @Override
        public void clear() {
            UnicastSubject.this.queue.clear();
        }

        @Override
        public void dispose() {
            if (!UnicastSubject.this.disposed) {
                UnicastSubject.this.disposed = true;
                UnicastSubject.this.doTerminate();
                UnicastSubject.this.actual.lazySet(null);
                if (UnicastSubject.this.wip.getAndIncrement() == 0) {
                    UnicastSubject.this.actual.lazySet(null);
                    UnicastSubject.this.queue.clear();
                }
            }
        }

        @Override
        public boolean isDisposed() {
            return UnicastSubject.this.disposed;
        }

        @Override
        public boolean isEmpty() {
            return UnicastSubject.this.queue.isEmpty();
        }

        @Nullable
        @Override
        public T poll() throws Exception {
            return UnicastSubject.this.queue.poll();
        }

        @Override
        public int requestFusion(int n) {
            if ((n & 2) != 0) {
                UnicastSubject.this.enableOperatorFusion = true;
                return 2;
            }
            return 0;
        }
    }

}

