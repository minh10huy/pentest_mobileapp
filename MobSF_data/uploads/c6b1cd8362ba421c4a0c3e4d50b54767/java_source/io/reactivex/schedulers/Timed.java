/*
 * Decompiled with CFR 0_132.
 */
package io.reactivex.schedulers;

import io.reactivex.annotations.NonNull;
import io.reactivex.internal.functions.ObjectHelper;
import java.util.concurrent.TimeUnit;

public final class Timed<T> {
    final long time;
    final TimeUnit unit;
    final T value;

    public Timed(@NonNull T t, long l, @NonNull TimeUnit timeUnit) {
        this.value = t;
        this.time = l;
        this.unit = ObjectHelper.requireNonNull(timeUnit, "unit is null");
    }

    public boolean equals(Object object) {
        boolean bl = object instanceof Timed;
        boolean bl2 = false;
        if (bl) {
            object = (Timed)object;
            bl = bl2;
            if (ObjectHelper.equals(this.value, object.value)) {
                bl = bl2;
                if (this.time == object.time) {
                    bl = bl2;
                    if (ObjectHelper.equals((Object)this.unit, (Object)object.unit)) {
                        bl = true;
                    }
                }
            }
            return bl;
        }
        return false;
    }

    public int hashCode() {
        int n = this.value != null ? this.value.hashCode() : 0;
        return (n * 31 + (int)(this.time >>> 31 ^ this.time)) * 31 + this.unit.hashCode();
    }

    public long time() {
        return this.time;
    }

    public long time(@NonNull TimeUnit timeUnit) {
        return timeUnit.convert(this.time, this.unit);
    }

    public String toString() {
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("Timed[time=");
        stringBuilder.append(this.time);
        stringBuilder.append(", unit=");
        stringBuilder.append((Object)this.unit);
        stringBuilder.append(", value=");
        stringBuilder.append(this.value);
        stringBuilder.append("]");
        return stringBuilder.toString();
    }

    @NonNull
    public TimeUnit unit() {
        return this.unit;
    }

    @NonNull
    public T value() {
        return this.value;
    }
}

