/*
 * Decompiled with CFR 0_132.
 */
package io.reactivex.schedulers;

import io.reactivex.Scheduler;
import io.reactivex.annotations.NonNull;
import io.reactivex.disposables.Disposable;
import io.reactivex.disposables.Disposables;
import io.reactivex.internal.disposables.EmptyDisposable;
import io.reactivex.internal.functions.ObjectHelper;
import java.util.Queue;
import java.util.concurrent.PriorityBlockingQueue;
import java.util.concurrent.TimeUnit;

public final class TestScheduler
extends Scheduler {
    long counter;
    final Queue<TimedRunnable> queue = new PriorityBlockingQueue<TimedRunnable>(11);
    volatile long time;

    private void triggerActions(long l) {
        TimedRunnable timedRunnable;
        while ((timedRunnable = this.queue.peek()) != null && timedRunnable.time <= l) {
            long l2 = timedRunnable.time == 0L ? this.time : timedRunnable.time;
            this.time = l2;
            this.queue.remove(timedRunnable);
            if (timedRunnable.scheduler.disposed) continue;
            timedRunnable.run.run();
        }
        this.time = l;
    }

    public void advanceTimeBy(long l, TimeUnit timeUnit) {
        this.advanceTimeTo(this.time + timeUnit.toNanos(l), TimeUnit.NANOSECONDS);
    }

    public void advanceTimeTo(long l, TimeUnit timeUnit) {
        this.triggerActions(timeUnit.toNanos(l));
    }

    @NonNull
    @Override
    public Scheduler.Worker createWorker() {
        return new TestWorker();
    }

    @Override
    public long now(@NonNull TimeUnit timeUnit) {
        return timeUnit.convert(this.time, TimeUnit.NANOSECONDS);
    }

    public void triggerActions() {
        this.triggerActions(this.time);
    }

    final class TestWorker
    extends Scheduler.Worker {
        volatile boolean disposed;

        TestWorker() {
        }

        @Override
        public void dispose() {
            this.disposed = true;
        }

        @Override
        public boolean isDisposed() {
            return this.disposed;
        }

        @Override
        public long now(@NonNull TimeUnit timeUnit) {
            return TestScheduler.this.now(timeUnit);
        }

        @NonNull
        @Override
        public Disposable schedule(@NonNull Runnable object) {
            if (this.disposed) {
                return EmptyDisposable.INSTANCE;
            }
            TestScheduler testScheduler = TestScheduler.this;
            long l = testScheduler.counter;
            testScheduler.counter = l + 1L;
            object = new TimedRunnable(this, 0L, (Runnable)object, l);
            TestScheduler.this.queue.add((TimedRunnable)object);
            return Disposables.fromRunnable(new QueueRemove((TimedRunnable)object));
        }

        @NonNull
        @Override
        public Disposable schedule(@NonNull Runnable object, long l, @NonNull TimeUnit object2) {
            if (this.disposed) {
                return EmptyDisposable.INSTANCE;
            }
            long l2 = TestScheduler.this.time;
            l = object2.toNanos(l);
            object2 = TestScheduler.this;
            long l3 = object2.counter;
            object2.counter = l3 + 1L;
            object = new TimedRunnable(this, l2 + l, (Runnable)object, l3);
            TestScheduler.this.queue.add((TimedRunnable)object);
            return Disposables.fromRunnable(new QueueRemove((TimedRunnable)object));
        }

        final class QueueRemove
        implements Runnable {
            final TimedRunnable timedAction;

            QueueRemove(TimedRunnable timedRunnable) {
                this.timedAction = timedRunnable;
            }

            @Override
            public void run() {
                TestScheduler.this.queue.remove(this.timedAction);
            }
        }

    }

    static final class TimedRunnable
    implements Comparable<TimedRunnable> {
        final long count;
        final Runnable run;
        final TestWorker scheduler;
        final long time;

        TimedRunnable(TestWorker testWorker, long l, Runnable runnable, long l2) {
            this.time = l;
            this.run = runnable;
            this.scheduler = testWorker;
            this.count = l2;
        }

        @Override
        public int compareTo(TimedRunnable timedRunnable) {
            if (this.time == timedRunnable.time) {
                return ObjectHelper.compare(this.count, timedRunnable.count);
            }
            return ObjectHelper.compare(this.time, timedRunnable.time);
        }

        public String toString() {
            return String.format("TimedRunnable(time = %d, run = %s)", this.time, this.run.toString());
        }
    }

}

