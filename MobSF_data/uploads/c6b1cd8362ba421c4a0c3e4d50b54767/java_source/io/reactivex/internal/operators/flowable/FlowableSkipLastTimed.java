/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  org.reactivestreams.Subscriber
 *  org.reactivestreams.Subscription
 */
package io.reactivex.internal.operators.flowable;

import io.reactivex.Flowable;
import io.reactivex.FlowableSubscriber;
import io.reactivex.Scheduler;
import io.reactivex.internal.operators.flowable.AbstractFlowableWithUpstream;
import io.reactivex.internal.queue.SpscLinkedArrayQueue;
import io.reactivex.internal.subscriptions.SubscriptionHelper;
import io.reactivex.internal.util.BackpressureHelper;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
import org.reactivestreams.Subscriber;
import org.reactivestreams.Subscription;

public final class FlowableSkipLastTimed<T>
extends AbstractFlowableWithUpstream<T, T> {
    final int bufferSize;
    final boolean delayError;
    final Scheduler scheduler;
    final long time;
    final TimeUnit unit;

    public FlowableSkipLastTimed(Flowable<T> flowable, long l, TimeUnit timeUnit, Scheduler scheduler, int n, boolean bl) {
        super(flowable);
        this.time = l;
        this.unit = timeUnit;
        this.scheduler = scheduler;
        this.bufferSize = n;
        this.delayError = bl;
    }

    @Override
    protected void subscribeActual(Subscriber<? super T> subscriber) {
        this.source.subscribe(new SkipLastTimedSubscriber<T>(subscriber, this.time, this.unit, this.scheduler, this.bufferSize, this.delayError));
    }

    static final class SkipLastTimedSubscriber<T>
    extends AtomicInteger
    implements FlowableSubscriber<T>,
    Subscription {
        private static final long serialVersionUID = -5677354903406201275L;
        final Subscriber<? super T> actual;
        volatile boolean cancelled;
        final boolean delayError;
        volatile boolean done;
        Throwable error;
        final SpscLinkedArrayQueue<Object> queue;
        final AtomicLong requested = new AtomicLong();
        Subscription s;
        final Scheduler scheduler;
        final long time;
        final TimeUnit unit;

        SkipLastTimedSubscriber(Subscriber<? super T> subscriber, long l, TimeUnit timeUnit, Scheduler scheduler, int n, boolean bl) {
            this.actual = subscriber;
            this.time = l;
            this.unit = timeUnit;
            this.scheduler = scheduler;
            this.queue = new SpscLinkedArrayQueue(n);
            this.delayError = bl;
        }

        public void cancel() {
            if (!this.cancelled) {
                this.cancelled = true;
                this.s.cancel();
                if (this.getAndIncrement() == 0) {
                    this.queue.clear();
                }
            }
        }

        boolean checkTerminated(boolean bl, boolean bl2, Subscriber<? super T> subscriber, boolean bl3) {
            if (this.cancelled) {
                this.queue.clear();
                return true;
            }
            if (bl) {
                if (bl3) {
                    if (bl2) {
                        Throwable throwable = this.error;
                        if (throwable != null) {
                            subscriber.onError(throwable);
                            return true;
                        }
                        subscriber.onComplete();
                        return true;
                    }
                } else {
                    Throwable throwable = this.error;
                    if (throwable != null) {
                        this.queue.clear();
                        subscriber.onError(throwable);
                        return true;
                    }
                    if (bl2) {
                        subscriber.onComplete();
                        return true;
                    }
                }
            }
            return false;
        }

        void drain() {
            int n;
            if (this.getAndIncrement() != 0) {
                return;
            }
            Subscriber<? super T> subscriber = this.actual;
            SpscLinkedArrayQueue<Object> spscLinkedArrayQueue = this.queue;
            boolean bl = this.delayError;
            TimeUnit timeUnit = this.unit;
            Scheduler scheduler = this.scheduler;
            long l = this.time;
            int n2 = 1;
            do {
                long l2;
                long l3 = this.requested.get();
                for (l2 = 0L; l2 != l3; ++l2) {
                    boolean bl2 = this.done;
                    Long l4 = (Long)spscLinkedArrayQueue.peek();
                    boolean bl3 = l4 == null;
                    long l5 = scheduler.now(timeUnit);
                    boolean bl4 = bl3;
                    if (!bl3) {
                        bl4 = bl3;
                        if (l4 > l5 - l) {
                            bl4 = true;
                        }
                    }
                    if (this.checkTerminated(bl2, bl4, subscriber, bl)) {
                        return;
                    }
                    if (bl4) break;
                    spscLinkedArrayQueue.poll();
                    subscriber.onNext(spscLinkedArrayQueue.poll());
                }
                if (l2 != 0L) {
                    BackpressureHelper.produced(this.requested, l2);
                }
                n2 = n = this.addAndGet(- n2);
            } while (n != 0);
        }

        public void onComplete() {
            this.done = true;
            this.drain();
        }

        public void onError(Throwable throwable) {
            this.error = throwable;
            this.done = true;
            this.drain();
        }

        public void onNext(T t) {
            long l = this.scheduler.now(this.unit);
            this.queue.offer(l, t);
            this.drain();
        }

        @Override
        public void onSubscribe(Subscription subscription) {
            if (SubscriptionHelper.validate(this.s, subscription)) {
                this.s = subscription;
                this.actual.onSubscribe((Subscription)this);
                subscription.request(Long.MAX_VALUE);
            }
        }

        public void request(long l) {
            if (SubscriptionHelper.validate(l)) {
                BackpressureHelper.add(this.requested, l);
                this.drain();
            }
        }
    }

}

