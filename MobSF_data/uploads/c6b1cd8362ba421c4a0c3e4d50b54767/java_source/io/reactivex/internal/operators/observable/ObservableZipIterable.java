/*
 * Decompiled with CFR 0_132.
 */
package io.reactivex.internal.operators.observable;

import io.reactivex.Observable;
import io.reactivex.Observer;
import io.reactivex.disposables.Disposable;
import io.reactivex.exceptions.Exceptions;
import io.reactivex.functions.BiFunction;
import io.reactivex.internal.disposables.DisposableHelper;
import io.reactivex.internal.disposables.EmptyDisposable;
import io.reactivex.internal.functions.ObjectHelper;
import io.reactivex.plugins.RxJavaPlugins;
import java.util.Iterator;

public final class ObservableZipIterable<T, U, V>
extends Observable<V> {
    final Iterable<U> other;
    final Observable<? extends T> source;
    final BiFunction<? super T, ? super U, ? extends V> zipper;

    public ObservableZipIterable(Observable<? extends T> observable, Iterable<U> iterable, BiFunction<? super T, ? super U, ? extends V> biFunction) {
        this.source = observable;
        this.other = iterable;
        this.zipper = biFunction;
    }

    @Override
    public void subscribeActual(Observer<? super V> observer) {
        Iterator<U> iterator;
        block4 : {
            try {
                iterator = ObjectHelper.requireNonNull(this.other.iterator(), "The iterator returned by other is null");
            }
            catch (Throwable throwable) {
                Exceptions.throwIfFatal(throwable);
                EmptyDisposable.error(throwable, observer);
                return;
            }
            try {
                boolean bl = iterator.hasNext();
                if (bl) break block4;
            }
            catch (Throwable throwable) {
                Exceptions.throwIfFatal(throwable);
                EmptyDisposable.error(throwable, observer);
                return;
            }
            EmptyDisposable.complete(observer);
            return;
        }
        this.source.subscribe(new ZipIterableObserver<T, U, V>(observer, iterator, this.zipper));
    }

    static final class ZipIterableObserver<T, U, V>
    implements Observer<T>,
    Disposable {
        final Observer<? super V> actual;
        boolean done;
        final Iterator<U> iterator;
        Disposable s;
        final BiFunction<? super T, ? super U, ? extends V> zipper;

        ZipIterableObserver(Observer<? super V> observer, Iterator<U> iterator, BiFunction<? super T, ? super U, ? extends V> biFunction) {
            this.actual = observer;
            this.iterator = iterator;
            this.zipper = biFunction;
        }

        @Override
        public void dispose() {
            this.s.dispose();
        }

        void error(Throwable throwable) {
            this.done = true;
            this.s.dispose();
            this.actual.onError(throwable);
        }

        @Override
        public boolean isDisposed() {
            return this.s.isDisposed();
        }

        @Override
        public void onComplete() {
            if (this.done) {
                return;
            }
            this.done = true;
            this.actual.onComplete();
        }

        @Override
        public void onError(Throwable throwable) {
            if (this.done) {
                RxJavaPlugins.onError(throwable);
                return;
            }
            this.done = true;
            this.actual.onError(throwable);
        }

        @Override
        public void onNext(T object) {
            U u;
            if (this.done) {
                return;
            }
            try {
                u = ObjectHelper.requireNonNull(this.iterator.next(), "The iterator returned a null value");
            }
            catch (Throwable throwable) {
                Exceptions.throwIfFatal(throwable);
                this.error(throwable);
                return;
            }
            try {
                object = ObjectHelper.requireNonNull(this.zipper.apply(object, u), "The zipper function returned a null value");
                this.actual.onNext(object);
            }
            catch (Throwable throwable) {
                Exceptions.throwIfFatal(throwable);
                this.error(throwable);
                return;
            }
            try {
                boolean bl = this.iterator.hasNext();
                if (!bl) {
                    this.done = true;
                    this.s.dispose();
                    this.actual.onComplete();
                }
                return;
            }
            catch (Throwable throwable) {
                Exceptions.throwIfFatal(throwable);
                this.error(throwable);
                return;
            }
        }

        @Override
        public void onSubscribe(Disposable disposable) {
            if (DisposableHelper.validate(this.s, disposable)) {
                this.s = disposable;
                this.actual.onSubscribe(this);
            }
        }
    }

}

