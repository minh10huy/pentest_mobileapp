/*
 * Decompiled with CFR 0_132.
 */
package io.reactivex.internal.operators.maybe;

import io.reactivex.Maybe;
import io.reactivex.MaybeObserver;
import io.reactivex.MaybeSource;
import io.reactivex.disposables.Disposable;
import io.reactivex.exceptions.Exceptions;
import io.reactivex.functions.Function;
import io.reactivex.internal.disposables.EmptyDisposable;
import io.reactivex.internal.functions.ObjectHelper;
import io.reactivex.internal.operators.maybe.MaybeMap;
import io.reactivex.internal.operators.maybe.MaybeZipArray;
import java.util.Arrays;
import java.util.Iterator;

public final class MaybeZipIterable<T, R>
extends Maybe<R> {
    final Iterable<? extends MaybeSource<? extends T>> sources;
    final Function<? super Object[], ? extends R> zipper;

    public MaybeZipIterable(Iterable<? extends MaybeSource<? extends T>> iterable, Function<? super Object[], ? extends R> function) {
        this.sources = iterable;
        this.zipper = function;
    }

    @Override
    protected void subscribeActual(MaybeObserver<? super R> maybeObserver) {
        Object object;
        int n;
        int n2;
        Iterator<MaybeSource<T>> iterator;
        Object object2 = new MaybeSource[8];
        try {
            iterator = this.sources.iterator();
            n = 0;
            n2 = 0;
        }
        catch (Throwable throwable) {
            Exceptions.throwIfFatal(throwable);
            EmptyDisposable.error(throwable, maybeObserver);
            return;
        }
        do {
            MaybeSource<? extends T> maybeSource;
            block11 : {
                if (!iterator.hasNext()) break;
                maybeSource = iterator.next();
                if (maybeSource != null) break block11;
                EmptyDisposable.error((Throwable)new NullPointerException("One of the sources is null"), maybeObserver);
                return;
            }
            object = object2;
            if (n2 == ((MaybeSource[])object2).length) {
                object = Arrays.copyOf(object2, (n2 >> 2) + n2);
            }
            object[n2] = maybeSource;
            ++n2;
            object2 = object;
        } while (true);
        if (n2 == 0) {
            EmptyDisposable.complete(maybeObserver);
            return;
        }
        if (n2 == 1) {
            object2[0].subscribe(new MaybeMap.MapMaybeObserver(maybeObserver, new SingletonArrayFunc()));
            return;
        }
        object = new MaybeZipArray.ZipCoordinator(maybeObserver, n2, this.zipper);
        maybeObserver.onSubscribe((Disposable)object);
        while (n < n2) {
            if (object.isDisposed()) {
                return;
            }
            object2[n].subscribe(object.observers[n]);
            ++n;
        }
        return;
    }

    final class SingletonArrayFunc
    implements Function<T, R> {
        SingletonArrayFunc() {
        }

        @Override
        public R apply(T t) throws Exception {
            return ObjectHelper.requireNonNull(MaybeZipIterable.this.zipper.apply((Object[])new Object[]{t}), "The zipper returned a null value");
        }
    }

}

