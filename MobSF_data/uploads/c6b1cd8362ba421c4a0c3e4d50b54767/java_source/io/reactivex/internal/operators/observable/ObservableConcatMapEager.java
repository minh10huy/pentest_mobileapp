/*
 * Decompiled with CFR 0_132.
 */
package io.reactivex.internal.operators.observable;

import io.reactivex.ObservableSource;
import io.reactivex.Observer;
import io.reactivex.disposables.Disposable;
import io.reactivex.exceptions.Exceptions;
import io.reactivex.functions.Function;
import io.reactivex.internal.disposables.DisposableHelper;
import io.reactivex.internal.functions.ObjectHelper;
import io.reactivex.internal.fuseable.QueueDisposable;
import io.reactivex.internal.fuseable.SimpleQueue;
import io.reactivex.internal.observers.InnerQueuedObserver;
import io.reactivex.internal.observers.InnerQueuedObserverSupport;
import io.reactivex.internal.operators.observable.AbstractObservableWithUpstream;
import io.reactivex.internal.queue.SpscLinkedArrayQueue;
import io.reactivex.internal.util.AtomicThrowable;
import io.reactivex.internal.util.ErrorMode;
import io.reactivex.plugins.RxJavaPlugins;
import java.util.ArrayDeque;
import java.util.concurrent.atomic.AtomicInteger;

public final class ObservableConcatMapEager<T, R>
extends AbstractObservableWithUpstream<T, R> {
    final ErrorMode errorMode;
    final Function<? super T, ? extends ObservableSource<? extends R>> mapper;
    final int maxConcurrency;
    final int prefetch;

    public ObservableConcatMapEager(ObservableSource<T> observableSource, Function<? super T, ? extends ObservableSource<? extends R>> function, ErrorMode errorMode, int n, int n2) {
        super(observableSource);
        this.mapper = function;
        this.errorMode = errorMode;
        this.maxConcurrency = n;
        this.prefetch = n2;
    }

    @Override
    protected void subscribeActual(Observer<? super R> observer) {
        this.source.subscribe(new ConcatMapEagerMainObserver<T, R>(observer, this.mapper, this.maxConcurrency, this.prefetch, this.errorMode));
    }

    static final class ConcatMapEagerMainObserver<T, R>
    extends AtomicInteger
    implements Observer<T>,
    Disposable,
    InnerQueuedObserverSupport<R> {
        private static final long serialVersionUID = 8080567949447303262L;
        int activeCount;
        final Observer<? super R> actual;
        volatile boolean cancelled;
        InnerQueuedObserver<R> current;
        Disposable d;
        volatile boolean done;
        final AtomicThrowable error;
        final ErrorMode errorMode;
        final Function<? super T, ? extends ObservableSource<? extends R>> mapper;
        final int maxConcurrency;
        final ArrayDeque<InnerQueuedObserver<R>> observers;
        final int prefetch;
        SimpleQueue<T> queue;
        int sourceMode;

        ConcatMapEagerMainObserver(Observer<? super R> observer, Function<? super T, ? extends ObservableSource<? extends R>> function, int n, int n2, ErrorMode errorMode) {
            this.actual = observer;
            this.mapper = function;
            this.maxConcurrency = n;
            this.prefetch = n2;
            this.errorMode = errorMode;
            this.error = new AtomicThrowable();
            this.observers = new ArrayDeque();
        }

        @Override
        public void dispose() {
            this.cancelled = true;
            if (this.getAndIncrement() == 0) {
                this.queue.clear();
                this.disposeAll();
            }
        }

        void disposeAll() {
            InnerQueuedObserver<R> innerQueuedObserver = this.current;
            if (innerQueuedObserver != null) {
                innerQueuedObserver.dispose();
            }
            while ((innerQueuedObserver = this.observers.poll()) != null) {
                innerQueuedObserver.dispose();
            }
            return;
        }

        /*
         * Unable to fully structure code
         * Enabled aggressive block sorting
         * Enabled unnecessary exception pruning
         * Enabled aggressive exception aggregation
         * Lifted jumps to return sites
         */
        @Override
        public void drain() {
            if (this.getAndIncrement() != 0) {
                return;
            }
            var6_1 = this.queue;
            var8_2 = this.observers;
            var7_3 = this.actual;
            var9_4 = this.errorMode;
            var1_5 = 1;
            do lbl-1000: // 5 sources:
            {
                for (var2_6 = this.activeCount; var2_6 != this.maxConcurrency; ++var2_6) {
                    if (this.cancelled) {
                        var6_1.clear();
                        this.disposeAll();
                        return;
                    }
                    if (var9_4 == ErrorMode.IMMEDIATE && (Throwable)this.error.get() != null) {
                        var6_1.clear();
                        this.disposeAll();
                        var7_3.onError(this.error.terminate());
                        return;
                    }
                    try {
                        var4_8 = var6_1.poll();
                        if (var4_8 == null) break;
                        var4_8 = ObjectHelper.requireNonNull(this.mapper.apply(var4_8), "The mapper returned a null ObservableSource");
                        var5_11 = new InnerQueuedObserver<T>(this, this.prefetch);
                        var8_2.offer(var5_11);
                        var4_8.subscribe(var5_11);
                        continue;
                    }
                    catch (Throwable var4_9) {
                        Exceptions.throwIfFatal(var4_9);
                        this.d.dispose();
                        var6_1.clear();
                        this.disposeAll();
                        this.error.addThrowable(var4_9);
                        var7_3.onError(this.error.terminate());
                        return;
                    }
                }
                this.activeCount = var2_6;
                if (this.cancelled) {
                    var6_1.clear();
                    this.disposeAll();
                    return;
                }
                if (var9_4 == ErrorMode.IMMEDIATE && (Throwable)this.error.get() != null) {
                    var6_1.clear();
                    this.disposeAll();
                    var7_3.onError(this.error.terminate());
                    return;
                }
                var5_11 = this.current;
                var4_8 = var5_11;
                if (var5_11 == null) {
                    if (var9_4 == ErrorMode.BOUNDARY && (Throwable)this.error.get() != null) {
                        var6_1.clear();
                        this.disposeAll();
                        var7_3.onError(this.error.terminate());
                        return;
                    }
                    var3_7 = this.done;
                    var4_8 = var8_2.poll();
                    var2_6 = var4_8 == null ? 1 : 0;
                    if (var3_7) {
                        if (var2_6 != 0) {
                            if ((Throwable)this.error.get() != null) {
                                var6_1.clear();
                                this.disposeAll();
                                var7_3.onError(this.error.terminate());
                                return;
                            }
                            var7_3.onComplete();
                            return;
                        }
                        if (var2_6 == 0) {
                            this.current = var4_8;
                        }
                    }
                }
                if (var4_8 != null) {
                    var5_11 = var4_8.queue();
                    do {
                        if (this.cancelled) {
                            var6_1.clear();
                            this.disposeAll();
                            return;
                        }
                        var3_7 = var4_8.isDone();
                        if (var9_4 == ErrorMode.IMMEDIATE && (Throwable)this.error.get() != null) {
                            var6_1.clear();
                            this.disposeAll();
                            var7_3.onError(this.error.terminate());
                            return;
                        }
                        try {
                            var10_12 = var5_11.poll();
                            var2_6 = var10_12 == null ? 1 : 0;
                            if (!var3_7) break;
                            if (var2_6 != 0) {
                                this.current = null;
                                --this.activeCount;
                                ** continue;
                            }
                            if (var2_6 != 0) break;
                            var7_3.onNext(var10_12);
                        }
                        catch (Throwable var4_10) {
                            Exceptions.throwIfFatal(var4_10);
                            this.error.addThrowable(var4_10);
                            this.current = null;
                            --this.activeCount;
                            ** continue;
                        }
                    } while (true);
                }
                var1_5 = var2_6 = this.addAndGet(- var1_5);
                if (var2_6 == 0) return;
            } while (true);
        }

        @Override
        public void innerComplete(InnerQueuedObserver<R> innerQueuedObserver) {
            innerQueuedObserver.setDone();
            this.drain();
        }

        @Override
        public void innerError(InnerQueuedObserver<R> innerQueuedObserver, Throwable throwable) {
            if (this.error.addThrowable(throwable)) {
                if (this.errorMode == ErrorMode.IMMEDIATE) {
                    this.d.dispose();
                }
                innerQueuedObserver.setDone();
                this.drain();
                return;
            }
            RxJavaPlugins.onError(throwable);
        }

        @Override
        public void innerNext(InnerQueuedObserver<R> innerQueuedObserver, R r) {
            innerQueuedObserver.queue().offer(r);
            this.drain();
        }

        @Override
        public boolean isDisposed() {
            return this.cancelled;
        }

        @Override
        public void onComplete() {
            this.done = true;
            this.drain();
        }

        @Override
        public void onError(Throwable throwable) {
            if (this.error.addThrowable(throwable)) {
                this.done = true;
                this.drain();
                return;
            }
            RxJavaPlugins.onError(throwable);
        }

        @Override
        public void onNext(T t) {
            if (this.sourceMode == 0) {
                this.queue.offer(t);
            }
            this.drain();
        }

        @Override
        public void onSubscribe(Disposable disposable) {
            if (DisposableHelper.validate(this.d, disposable)) {
                this.d = disposable;
                if (disposable instanceof QueueDisposable) {
                    int n = (disposable = (QueueDisposable)disposable).requestFusion(3);
                    if (n == 1) {
                        this.sourceMode = n;
                        this.queue = disposable;
                        this.done = true;
                        this.actual.onSubscribe(this);
                        this.drain();
                        return;
                    }
                    if (n == 2) {
                        this.sourceMode = n;
                        this.queue = disposable;
                        this.actual.onSubscribe(this);
                        return;
                    }
                }
                this.queue = new SpscLinkedArrayQueue(this.prefetch);
                this.actual.onSubscribe(this);
            }
        }
    }

}

