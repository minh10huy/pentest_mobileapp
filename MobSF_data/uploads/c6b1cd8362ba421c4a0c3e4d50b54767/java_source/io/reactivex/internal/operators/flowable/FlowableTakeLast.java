/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  org.reactivestreams.Subscriber
 *  org.reactivestreams.Subscription
 */
package io.reactivex.internal.operators.flowable;

import io.reactivex.Flowable;
import io.reactivex.FlowableSubscriber;
import io.reactivex.internal.operators.flowable.AbstractFlowableWithUpstream;
import io.reactivex.internal.subscriptions.SubscriptionHelper;
import io.reactivex.internal.util.BackpressureHelper;
import java.util.ArrayDeque;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
import org.reactivestreams.Subscriber;
import org.reactivestreams.Subscription;

public final class FlowableTakeLast<T>
extends AbstractFlowableWithUpstream<T, T> {
    final int count;

    public FlowableTakeLast(Flowable<T> flowable, int n) {
        super(flowable);
        this.count = n;
    }

    @Override
    protected void subscribeActual(Subscriber<? super T> subscriber) {
        this.source.subscribe(new TakeLastSubscriber<T>(subscriber, this.count));
    }

    static final class TakeLastSubscriber<T>
    extends ArrayDeque<T>
    implements FlowableSubscriber<T>,
    Subscription {
        private static final long serialVersionUID = 7240042530241604978L;
        final Subscriber<? super T> actual;
        volatile boolean cancelled;
        final int count;
        volatile boolean done;
        final AtomicLong requested = new AtomicLong();
        Subscription s;
        final AtomicInteger wip = new AtomicInteger();

        TakeLastSubscriber(Subscriber<? super T> subscriber, int n) {
            this.actual = subscriber;
            this.count = n;
        }

        public void cancel() {
            this.cancelled = true;
            this.s.cancel();
        }

        void drain() {
            if (this.wip.getAndIncrement() == 0) {
                Subscriber<? super T> subscriber = this.actual;
                long l = this.requested.get();
                do {
                    if (this.cancelled) {
                        return;
                    }
                    long l2 = l;
                    if (this.done) {
                        long l3;
                        for (l3 = 0L; l3 != l; ++l3) {
                            if (this.cancelled) {
                                return;
                            }
                            Object e = this.poll();
                            if (e == null) {
                                subscriber.onComplete();
                                return;
                            }
                            subscriber.onNext(e);
                        }
                        l2 = l;
                        if (l3 != 0L) {
                            l2 = l;
                            if (l != Long.MAX_VALUE) {
                                l2 = this.requested.addAndGet(- l3);
                            }
                        }
                    }
                    l = l2;
                } while (this.wip.decrementAndGet() != 0);
            }
        }

        public void onComplete() {
            this.done = true;
            this.drain();
        }

        public void onError(Throwable throwable) {
            this.actual.onError(throwable);
        }

        public void onNext(T t) {
            if (this.count == this.size()) {
                this.poll();
            }
            this.offer(t);
        }

        @Override
        public void onSubscribe(Subscription subscription) {
            if (SubscriptionHelper.validate(this.s, subscription)) {
                this.s = subscription;
                this.actual.onSubscribe((Subscription)this);
                subscription.request(Long.MAX_VALUE);
            }
        }

        public void request(long l) {
            if (SubscriptionHelper.validate(l)) {
                BackpressureHelper.add(this.requested, l);
                this.drain();
            }
        }
    }

}

