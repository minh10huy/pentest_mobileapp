/*
 * Decompiled with CFR 0_132.
 */
package io.reactivex.internal.operators.observable;

import io.reactivex.Observable;
import io.reactivex.Observer;
import io.reactivex.disposables.Disposable;
import io.reactivex.exceptions.Exceptions;
import io.reactivex.internal.functions.ObjectHelper;
import io.reactivex.internal.observers.DeferredScalarDisposable;
import io.reactivex.plugins.RxJavaPlugins;
import java.util.concurrent.Callable;

public final class ObservableFromCallable<T>
extends Observable<T>
implements Callable<T> {
    final Callable<? extends T> callable;

    public ObservableFromCallable(Callable<? extends T> callable) {
        this.callable = callable;
    }

    @Override
    public T call() throws Exception {
        return ObjectHelper.requireNonNull(this.callable.call(), "The callable returned a null value");
    }

    @Override
    public void subscribeActual(Observer<? super T> observer) {
        DeferredScalarDisposable<T> deferredScalarDisposable = new DeferredScalarDisposable<T>(observer);
        observer.onSubscribe(deferredScalarDisposable);
        if (deferredScalarDisposable.isDisposed()) {
            return;
        }
        try {
            T t = ObjectHelper.requireNonNull(this.callable.call(), "Callable returned null");
            deferredScalarDisposable.complete(t);
            return;
        }
        catch (Throwable throwable) {
            Exceptions.throwIfFatal(throwable);
            if (!deferredScalarDisposable.isDisposed()) {
                observer.onError(throwable);
                return;
            }
            RxJavaPlugins.onError(throwable);
            return;
        }
    }
}

