/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  org.reactivestreams.Subscriber
 *  org.reactivestreams.Subscription
 */
package io.reactivex.internal.operators.flowable;

import io.reactivex.Flowable;
import io.reactivex.FlowableSubscriber;
import io.reactivex.internal.operators.flowable.AbstractFlowableWithUpstream;
import io.reactivex.internal.subscriptions.DeferredScalarSubscription;
import io.reactivex.internal.subscriptions.SubscriptionHelper;
import io.reactivex.plugins.RxJavaPlugins;
import java.util.NoSuchElementException;
import org.reactivestreams.Subscriber;
import org.reactivestreams.Subscription;

public final class FlowableElementAt<T>
extends AbstractFlowableWithUpstream<T, T> {
    final T defaultValue;
    final boolean errorOnFewer;
    final long index;

    public FlowableElementAt(Flowable<T> flowable, long l, T t, boolean bl) {
        super(flowable);
        this.index = l;
        this.defaultValue = t;
        this.errorOnFewer = bl;
    }

    @Override
    protected void subscribeActual(Subscriber<? super T> subscriber) {
        this.source.subscribe(new ElementAtSubscriber<T>(subscriber, this.index, (T)this.defaultValue, this.errorOnFewer));
    }

    static final class ElementAtSubscriber<T>
    extends DeferredScalarSubscription<T>
    implements FlowableSubscriber<T> {
        private static final long serialVersionUID = 4066607327284737757L;
        long count;
        final T defaultValue;
        boolean done;
        final boolean errorOnFewer;
        final long index;
        Subscription s;

        ElementAtSubscriber(Subscriber<? super T> subscriber, long l, T t, boolean bl) {
            super(subscriber);
            this.index = l;
            this.defaultValue = t;
            this.errorOnFewer = bl;
        }

        @Override
        public void cancel() {
            super.cancel();
            this.s.cancel();
        }

        public void onComplete() {
            if (!this.done) {
                this.done = true;
                T t = this.defaultValue;
                if (t == null) {
                    if (this.errorOnFewer) {
                        this.actual.onError((Throwable)new NoSuchElementException());
                        return;
                    }
                    this.actual.onComplete();
                    return;
                }
                this.complete(t);
            }
        }

        public void onError(Throwable throwable) {
            if (this.done) {
                RxJavaPlugins.onError(throwable);
                return;
            }
            this.done = true;
            this.actual.onError(throwable);
        }

        public void onNext(T t) {
            if (this.done) {
                return;
            }
            long l = this.count;
            if (l == this.index) {
                this.done = true;
                this.s.cancel();
                this.complete(t);
                return;
            }
            this.count = l + 1L;
        }

        @Override
        public void onSubscribe(Subscription subscription) {
            if (SubscriptionHelper.validate(this.s, subscription)) {
                this.s = subscription;
                this.actual.onSubscribe((Subscription)this);
                subscription.request(Long.MAX_VALUE);
            }
        }
    }

}

