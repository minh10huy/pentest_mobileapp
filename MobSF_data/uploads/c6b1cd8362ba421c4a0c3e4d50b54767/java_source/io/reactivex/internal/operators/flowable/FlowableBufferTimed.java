/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  org.reactivestreams.Subscriber
 *  org.reactivestreams.Subscription
 */
package io.reactivex.internal.operators.flowable;

import io.reactivex.Flowable;
import io.reactivex.FlowableSubscriber;
import io.reactivex.Scheduler;
import io.reactivex.disposables.Disposable;
import io.reactivex.exceptions.Exceptions;
import io.reactivex.internal.disposables.DisposableHelper;
import io.reactivex.internal.functions.ObjectHelper;
import io.reactivex.internal.fuseable.SimplePlainQueue;
import io.reactivex.internal.operators.flowable.AbstractFlowableWithUpstream;
import io.reactivex.internal.queue.MpscLinkedQueue;
import io.reactivex.internal.subscribers.QueueDrainSubscriber;
import io.reactivex.internal.subscriptions.EmptySubscription;
import io.reactivex.internal.subscriptions.SubscriptionHelper;
import io.reactivex.internal.util.QueueDrainHelper;
import io.reactivex.subscribers.SerializedSubscriber;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.concurrent.Callable;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicReference;
import org.reactivestreams.Subscriber;
import org.reactivestreams.Subscription;

public final class FlowableBufferTimed<T, U extends Collection<? super T>>
extends AbstractFlowableWithUpstream<T, U> {
    final Callable<U> bufferSupplier;
    final int maxSize;
    final boolean restartTimerOnMaxSize;
    final Scheduler scheduler;
    final long timeskip;
    final long timespan;
    final TimeUnit unit;

    public FlowableBufferTimed(Flowable<T> flowable, long l, long l2, TimeUnit timeUnit, Scheduler scheduler, Callable<U> callable, int n, boolean bl) {
        super(flowable);
        this.timespan = l;
        this.timeskip = l2;
        this.unit = timeUnit;
        this.scheduler = scheduler;
        this.bufferSupplier = callable;
        this.maxSize = n;
        this.restartTimerOnMaxSize = bl;
    }

    @Override
    protected void subscribeActual(Subscriber<? super U> subscriber) {
        if (this.timespan == this.timeskip && this.maxSize == Integer.MAX_VALUE) {
            this.source.subscribe(new BufferExactUnboundedSubscriber(new SerializedSubscriber<U>(subscriber), this.bufferSupplier, this.timespan, this.unit, this.scheduler));
            return;
        }
        Scheduler.Worker worker = this.scheduler.createWorker();
        if (this.timespan == this.timeskip) {
            this.source.subscribe(new BufferExactBoundedSubscriber(new SerializedSubscriber<U>(subscriber), this.bufferSupplier, this.timespan, this.unit, this.maxSize, this.restartTimerOnMaxSize, worker));
            return;
        }
        this.source.subscribe(new BufferSkipBoundedSubscriber(new SerializedSubscriber<U>(subscriber), this.bufferSupplier, this.timespan, this.timeskip, this.unit, worker));
    }

    static final class BufferExactBoundedSubscriber<T, U extends Collection<? super T>>
    extends QueueDrainSubscriber<T, U, U>
    implements Subscription,
    Runnable,
    Disposable {
        U buffer;
        final Callable<U> bufferSupplier;
        long consumerIndex;
        final int maxSize;
        long producerIndex;
        final boolean restartTimerOnMaxSize;
        Subscription s;
        Disposable timer;
        final long timespan;
        final TimeUnit unit;
        final Scheduler.Worker w;

        BufferExactBoundedSubscriber(Subscriber<? super U> subscriber, Callable<U> callable, long l, TimeUnit timeUnit, int n, boolean bl, Scheduler.Worker worker) {
            super(subscriber, new MpscLinkedQueue());
            this.bufferSupplier = callable;
            this.timespan = l;
            this.unit = timeUnit;
            this.maxSize = n;
            this.restartTimerOnMaxSize = bl;
            this.w = worker;
        }

        @Override
        public boolean accept(Subscriber<? super U> subscriber, U u) {
            subscriber.onNext(u);
            return true;
        }

        public void cancel() {
            if (!this.cancelled) {
                this.cancelled = true;
                this.dispose();
            }
        }

        /*
         * Enabled aggressive block sorting
         * Enabled unnecessary exception pruning
         * Enabled aggressive exception aggregation
         */
        @Override
        public void dispose() {
            synchronized (this) {
                this.buffer = null;
            }
            this.s.cancel();
            this.w.dispose();
        }

        @Override
        public boolean isDisposed() {
            return this.w.isDisposed();
        }

        /*
         * Enabled aggressive block sorting
         * Enabled unnecessary exception pruning
         * Enabled aggressive exception aggregation
         */
        public void onComplete() {
            U u;
            synchronized (this) {
                u = this.buffer;
                this.buffer = null;
            }
            this.queue.offer(u);
            this.done = true;
            if (this.enter()) {
                QueueDrainHelper.drainMaxLoop(this.queue, this.actual, false, this, this);
            }
            this.w.dispose();
        }

        /*
         * Enabled aggressive block sorting
         * Enabled unnecessary exception pruning
         * Enabled aggressive exception aggregation
         */
        public void onError(Throwable throwable) {
            synchronized (this) {
                this.buffer = null;
            }
            this.actual.onError(throwable);
            this.w.dispose();
        }

        /*
         * Enabled aggressive block sorting
         * Enabled unnecessary exception pruning
         * Enabled aggressive exception aggregation
         * Converted monitor instructions to comments
         * Lifted jumps to return sites
         */
        public void onNext(T object) {
            // MONITORENTER : this
            U u = this.buffer;
            if (u == null) {
                // MONITOREXIT : this
                return;
            }
            u.add(object);
            if (u.size() < this.maxSize) {
                // MONITOREXIT : this
                return;
            }
            this.buffer = null;
            ++this.producerIndex;
            // MONITOREXIT : this
            if (this.restartTimerOnMaxSize) {
                this.timer.dispose();
            }
            this.fastPathOrderedEmitMax(u, false, this);
            try {
                object = (Collection)ObjectHelper.requireNonNull(this.bufferSupplier.call(), "The supplied buffer is null");
            }
            catch (Throwable throwable) {
                Exceptions.throwIfFatal(throwable);
                this.cancel();
                this.actual.onError(throwable);
                return;
            }
            this.buffer = object;
            ++this.consumerIndex;
            // MONITOREXIT : this
            if (!this.restartTimerOnMaxSize) return;
            this.timer = this.w.schedulePeriodically(this, this.timespan, this.timespan, this.unit);
        }

        @Override
        public void onSubscribe(Subscription subscription) {
            if (!SubscriptionHelper.validate(this.s, subscription)) {
                return;
            }
            this.s = subscription;
            try {
                Collection collection = (Collection)ObjectHelper.requireNonNull(this.bufferSupplier.call(), "The supplied buffer is null");
                this.buffer = collection;
            }
            catch (Throwable throwable) {
                Exceptions.throwIfFatal(throwable);
                this.w.dispose();
                subscription.cancel();
                EmptySubscription.error(throwable, this.actual);
                return;
            }
            this.actual.onSubscribe((Subscription)this);
            this.timer = this.w.schedulePeriodically(this, this.timespan, this.timespan, this.unit);
            subscription.request(Long.MAX_VALUE);
        }

        public void request(long l) {
            this.requested(l);
        }

        /*
         * Enabled aggressive block sorting
         * Enabled unnecessary exception pruning
         * Enabled aggressive exception aggregation
         */
        @Override
        public void run() {
            Collection collection;
            try {
                collection = (Collection)ObjectHelper.requireNonNull(this.bufferSupplier.call(), "The supplied buffer is null");
            }
            catch (Throwable throwable) {
                Exceptions.throwIfFatal(throwable);
                this.cancel();
                this.actual.onError(throwable);
                return;
            }
            synchronized (this) {
                U u = this.buffer;
                if (u != null && this.producerIndex == this.consumerIndex) {
                    this.buffer = collection;
                    // MONITOREXIT [3, 5] lbl7 : MonitorExitStatement: MONITOREXIT : this
                    this.fastPathOrderedEmitMax(u, false, this);
                    return;
                }
                return;
            }
        }
    }

    static final class BufferExactUnboundedSubscriber<T, U extends Collection<? super T>>
    extends QueueDrainSubscriber<T, U, U>
    implements Subscription,
    Runnable,
    Disposable {
        U buffer;
        final Callable<U> bufferSupplier;
        Subscription s;
        final Scheduler scheduler;
        final AtomicReference<Disposable> timer = new AtomicReference();
        final long timespan;
        final TimeUnit unit;

        BufferExactUnboundedSubscriber(Subscriber<? super U> subscriber, Callable<U> callable, long l, TimeUnit timeUnit, Scheduler scheduler) {
            super(subscriber, new MpscLinkedQueue());
            this.bufferSupplier = callable;
            this.timespan = l;
            this.unit = timeUnit;
            this.scheduler = scheduler;
        }

        @Override
        public boolean accept(Subscriber<? super U> subscriber, U u) {
            this.actual.onNext(u);
            return true;
        }

        public void cancel() {
            this.s.cancel();
            DisposableHelper.dispose(this.timer);
        }

        @Override
        public void dispose() {
            this.cancel();
        }

        @Override
        public boolean isDisposed() {
            if (this.timer.get() == DisposableHelper.DISPOSED) {
                return true;
            }
            return false;
        }

        /*
         * Enabled aggressive block sorting
         * Enabled unnecessary exception pruning
         * Enabled aggressive exception aggregation
         */
        public void onComplete() {
            U u;
            DisposableHelper.dispose(this.timer);
            synchronized (this) {
                u = this.buffer;
                if (u == null) {
                    return;
                }
                this.buffer = null;
            }
            this.queue.offer(u);
            this.done = true;
            if (this.enter()) {
                QueueDrainHelper.drainMaxLoop(this.queue, this.actual, false, this, this);
            }
        }

        /*
         * Enabled aggressive block sorting
         * Enabled unnecessary exception pruning
         * Enabled aggressive exception aggregation
         */
        public void onError(Throwable throwable) {
            DisposableHelper.dispose(this.timer);
            synchronized (this) {
                this.buffer = null;
            }
            this.actual.onError(throwable);
        }

        /*
         * Enabled aggressive block sorting
         * Enabled unnecessary exception pruning
         * Enabled aggressive exception aggregation
         */
        public void onNext(T t) {
            synchronized (this) {
                U u = this.buffer;
                if (u != null) {
                    u.add(t);
                }
                return;
            }
        }

        @Override
        public void onSubscribe(Subscription object) {
            if (SubscriptionHelper.validate(this.s, (Subscription)object)) {
                this.s = object;
                try {
                    Collection collection = (Collection)ObjectHelper.requireNonNull(this.bufferSupplier.call(), "The supplied buffer is null");
                    this.buffer = collection;
                }
                catch (Throwable throwable) {
                    Exceptions.throwIfFatal(throwable);
                    this.cancel();
                    EmptySubscription.error(throwable, this.actual);
                    return;
                }
                this.actual.onSubscribe((Subscription)this);
                if (!this.cancelled) {
                    object.request(Long.MAX_VALUE);
                    object = this.scheduler.schedulePeriodicallyDirect(this, this.timespan, this.timespan, this.unit);
                    if (!this.timer.compareAndSet(null, (Disposable)object)) {
                        object.dispose();
                        return;
                    }
                }
            }
        }

        public void request(long l) {
            this.requested(l);
        }

        /*
         * Enabled aggressive block sorting
         * Enabled unnecessary exception pruning
         * Enabled aggressive exception aggregation
         * Converted monitor instructions to comments
         * Lifted jumps to return sites
         */
        @Override
        public void run() {
            Collection collection;
            try {
                collection = (Collection)ObjectHelper.requireNonNull(this.bufferSupplier.call(), "The supplied buffer is null");
            }
            catch (Throwable throwable) {
                Exceptions.throwIfFatal(throwable);
                this.cancel();
                this.actual.onError(throwable);
                return;
            }
            U u = this.buffer;
            if (u != null) {
                this.buffer = collection;
            }
            // MONITOREXIT : this
            if (u == null) {
                DisposableHelper.dispose(this.timer);
                return;
            }
            this.fastPathEmitMax(u, false, this);
        }
    }

    static final class BufferSkipBoundedSubscriber<T, U extends Collection<? super T>>
    extends QueueDrainSubscriber<T, U, U>
    implements Subscription,
    Runnable {
        final Callable<U> bufferSupplier;
        final List<U> buffers;
        Subscription s;
        final long timeskip;
        final long timespan;
        final TimeUnit unit;
        final Scheduler.Worker w;

        BufferSkipBoundedSubscriber(Subscriber<? super U> subscriber, Callable<U> callable, long l, long l2, TimeUnit timeUnit, Scheduler.Worker worker) {
            super(subscriber, new MpscLinkedQueue());
            this.bufferSupplier = callable;
            this.timespan = l;
            this.timeskip = l2;
            this.unit = timeUnit;
            this.w = worker;
            this.buffers = new LinkedList<U>();
        }

        @Override
        public boolean accept(Subscriber<? super U> subscriber, U u) {
            subscriber.onNext(u);
            return true;
        }

        public void cancel() {
            this.clear();
            this.s.cancel();
            this.w.dispose();
        }

        /*
         * Enabled aggressive block sorting
         * Enabled unnecessary exception pruning
         * Enabled aggressive exception aggregation
         */
        void clear() {
            synchronized (this) {
                this.buffers.clear();
                return;
            }
        }

        /*
         * Enabled aggressive block sorting
         * Enabled unnecessary exception pruning
         * Enabled aggressive exception aggregation
         */
        public void onComplete() {
            Object object;
            synchronized (this) {
                object = new ArrayList<U>(this.buffers);
                this.buffers.clear();
            }
            object = object.iterator();
            while (object.hasNext()) {
                Collection collection = (Collection)object.next();
                this.queue.offer(collection);
            }
            this.done = true;
            if (this.enter()) {
                QueueDrainHelper.drainMaxLoop(this.queue, this.actual, false, this.w, this);
            }
        }

        public void onError(Throwable throwable) {
            this.done = true;
            this.w.dispose();
            this.clear();
            this.actual.onError(throwable);
        }

        /*
         * Enabled aggressive block sorting
         * Enabled unnecessary exception pruning
         * Enabled aggressive exception aggregation
         */
        public void onNext(T t) {
            synchronized (this) {
                Iterator<U> iterator = this.buffers.iterator();
                while (iterator.hasNext()) {
                    ((Collection)iterator.next()).add(t);
                }
                return;
            }
        }

        @Override
        public void onSubscribe(Subscription subscription) {
            Collection collection;
            if (!SubscriptionHelper.validate(this.s, subscription)) {
                return;
            }
            this.s = subscription;
            try {
                collection = (Collection)ObjectHelper.requireNonNull(this.bufferSupplier.call(), "The supplied buffer is null");
                this.buffers.add(collection);
            }
            catch (Throwable throwable) {
                Exceptions.throwIfFatal(throwable);
                this.w.dispose();
                subscription.cancel();
                EmptySubscription.error(throwable, this.actual);
                return;
            }
            this.actual.onSubscribe((Subscription)this);
            subscription.request(Long.MAX_VALUE);
            this.w.schedulePeriodically(this, this.timeskip, this.timeskip, this.unit);
            this.w.schedule(new RemoveFromBuffer(this, collection), this.timespan, this.unit);
        }

        public void request(long l) {
            this.requested(l);
        }

        /*
         * Enabled aggressive block sorting
         * Enabled unnecessary exception pruning
         * Enabled aggressive exception aggregation
         */
        @Override
        public void run() {
            Collection collection;
            if (this.cancelled) {
                return;
            }
            try {
                collection = (Collection)ObjectHelper.requireNonNull(this.bufferSupplier.call(), "The supplied buffer is null");
            }
            catch (Throwable throwable) {
                Exceptions.throwIfFatal(throwable);
                this.cancel();
                this.actual.onError(throwable);
                return;
            }
            synchronized (this) {
                if (this.cancelled) {
                    return;
                }
                this.buffers.add(collection);
            }
            this.w.schedule(new RemoveFromBuffer(this, collection), this.timespan, this.unit);
        }

        final class RemoveFromBuffer
        implements Runnable {
            private final U buffer;

            RemoveFromBuffer(U u) {
                this.buffer = u;
            }

            /*
             * Enabled aggressive block sorting
             * Enabled unnecessary exception pruning
             * Enabled aggressive exception aggregation
             */
            @Override
            public void run() {
                BufferSkipBoundedSubscriber bufferSkipBoundedSubscriber = this$0;
                synchronized (bufferSkipBoundedSubscriber) {
                    this$0.buffers.remove(this.buffer);
                }
                this$0.fastPathOrderedEmitMax(this.buffer, false, this$0.w);
            }
        }

    }

}

