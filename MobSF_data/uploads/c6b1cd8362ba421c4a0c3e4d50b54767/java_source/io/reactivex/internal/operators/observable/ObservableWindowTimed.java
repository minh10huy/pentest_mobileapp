/*
 * Decompiled with CFR 0_132.
 */
package io.reactivex.internal.operators.observable;

import io.reactivex.Observable;
import io.reactivex.ObservableSource;
import io.reactivex.Observer;
import io.reactivex.Scheduler;
import io.reactivex.disposables.Disposable;
import io.reactivex.internal.disposables.DisposableHelper;
import io.reactivex.internal.fuseable.SimplePlainQueue;
import io.reactivex.internal.observers.QueueDrainObserver;
import io.reactivex.internal.operators.observable.AbstractObservableWithUpstream;
import io.reactivex.internal.queue.MpscLinkedQueue;
import io.reactivex.internal.util.NotificationLite;
import io.reactivex.observers.SerializedObserver;
import io.reactivex.subjects.UnicastSubject;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicReference;

public final class ObservableWindowTimed<T>
extends AbstractObservableWithUpstream<T, Observable<T>> {
    final int bufferSize;
    final long maxSize;
    final boolean restartTimerOnMaxSize;
    final Scheduler scheduler;
    final long timeskip;
    final long timespan;
    final TimeUnit unit;

    public ObservableWindowTimed(ObservableSource<T> observableSource, long l, long l2, TimeUnit timeUnit, Scheduler scheduler, long l3, int n, boolean bl) {
        super(observableSource);
        this.timespan = l;
        this.timeskip = l2;
        this.unit = timeUnit;
        this.scheduler = scheduler;
        this.maxSize = l3;
        this.bufferSize = n;
        this.restartTimerOnMaxSize = bl;
    }

    @Override
    public void subscribeActual(Observer<? super Observable<T>> observer) {
        observer = new SerializedObserver<Observable<? super Observable<T>>>(observer);
        if (this.timespan == this.timeskip) {
            if (this.maxSize == Long.MAX_VALUE) {
                this.source.subscribe(new WindowExactUnboundedObserver(observer, this.timespan, this.unit, this.scheduler, this.bufferSize));
                return;
            }
            this.source.subscribe(new WindowExactBoundedObserver(observer, this.timespan, this.unit, this.scheduler, this.bufferSize, this.maxSize, this.restartTimerOnMaxSize));
            return;
        }
        this.source.subscribe(new WindowSkipObserver(observer, this.timespan, this.timeskip, this.unit, this.scheduler.createWorker(), this.bufferSize));
    }

    static final class WindowExactBoundedObserver<T>
    extends QueueDrainObserver<T, Object, Observable<T>>
    implements Disposable {
        final int bufferSize;
        long count;
        final long maxSize;
        long producerIndex;
        final boolean restartTimerOnMaxSize;
        Disposable s;
        final Scheduler scheduler;
        volatile boolean terminated;
        final AtomicReference<Disposable> timer = new AtomicReference();
        final long timespan;
        final TimeUnit unit;
        UnicastSubject<T> window;
        final Scheduler.Worker worker;

        WindowExactBoundedObserver(Observer<? super Observable<T>> observer, long l, TimeUnit timeUnit, Scheduler scheduler, int n, long l2, boolean bl) {
            super(observer, new MpscLinkedQueue());
            this.timespan = l;
            this.unit = timeUnit;
            this.scheduler = scheduler;
            this.bufferSize = n;
            this.maxSize = l2;
            this.restartTimerOnMaxSize = bl;
            if (bl) {
                this.worker = scheduler.createWorker();
                return;
            }
            this.worker = null;
        }

        @Override
        public void dispose() {
            this.cancelled = true;
        }

        void disposeTimer() {
            DisposableHelper.dispose(this.timer);
            Scheduler.Worker worker = this.worker;
            if (worker != null) {
                worker.dispose();
            }
        }

        void drainLoop() {
            MpscLinkedQueue mpscLinkedQueue = (MpscLinkedQueue)this.queue;
            Observer observer = this.actual;
            Object object = this.window;
            int n = 1;
            do {
                if (this.terminated) {
                    this.s.dispose();
                    mpscLinkedQueue.clear();
                    this.disposeTimer();
                    return;
                }
                boolean bl = this.done;
                Object object2 = mpscLinkedQueue.poll();
                int n2 = object2 == null ? 1 : 0;
                boolean bl2 = object2 instanceof ConsumerIndexHolder;
                if (bl && (n2 != 0 || bl2)) {
                    this.window = null;
                    mpscLinkedQueue.clear();
                    this.disposeTimer();
                    object2 = this.error;
                    if (object2 != null) {
                        object.onError((Throwable)object2);
                        return;
                    }
                    object.onComplete();
                    return;
                }
                if (n2 != 0) {
                    n = n2 = this.leave(- n);
                    if (n2 != 0) continue;
                    return;
                }
                if (bl2) {
                    object2 = (ConsumerIndexHolder)object2;
                    if (!this.restartTimerOnMaxSize && this.producerIndex != object2.index) continue;
                    object.onComplete();
                    this.count = 0L;
                    object = UnicastSubject.create(this.bufferSize);
                    this.window = object;
                    observer.onNext(object);
                    continue;
                }
                object.onNext(NotificationLite.getValue(object2));
                long l = this.count + 1L;
                if (l >= this.maxSize) {
                    ++this.producerIndex;
                    this.count = 0L;
                    object.onComplete();
                    object2 = UnicastSubject.create(this.bufferSize);
                    this.window = object2;
                    this.actual.onNext(object2);
                    object = object2;
                    if (!this.restartTimerOnMaxSize) continue;
                    Disposable disposable = this.timer.get();
                    disposable.dispose();
                    Disposable disposable2 = this.worker.schedulePeriodically(new ConsumerIndexHolder(this.producerIndex, this), this.timespan, this.timespan, this.unit);
                    object = object2;
                    if (this.timer.compareAndSet(disposable, disposable2)) continue;
                    disposable2.dispose();
                    object = object2;
                    continue;
                }
                this.count = l;
            } while (true);
        }

        @Override
        public boolean isDisposed() {
            return this.cancelled;
        }

        @Override
        public void onComplete() {
            this.done = true;
            if (this.enter()) {
                this.drainLoop();
            }
            this.actual.onComplete();
            this.disposeTimer();
        }

        @Override
        public void onError(Throwable throwable) {
            this.error = throwable;
            this.done = true;
            if (this.enter()) {
                this.drainLoop();
            }
            this.actual.onError(throwable);
            this.disposeTimer();
        }

        @Override
        public void onNext(T object) {
            if (this.terminated) {
                return;
            }
            if (this.fastEnter()) {
                UnicastSubject<T> unicastSubject = this.window;
                unicastSubject.onNext(object);
                long l = this.count + 1L;
                if (l >= this.maxSize) {
                    ++this.producerIndex;
                    this.count = 0L;
                    unicastSubject.onComplete();
                    object = UnicastSubject.create(this.bufferSize);
                    this.window = object;
                    this.actual.onNext(object);
                    if (this.restartTimerOnMaxSize) {
                        this.timer.get().dispose();
                        object = this.worker.schedulePeriodically(new ConsumerIndexHolder(this.producerIndex, this), this.timespan, this.timespan, this.unit);
                        DisposableHelper.replace(this.timer, object);
                    }
                } else {
                    this.count = l;
                }
                if (this.leave(-1) == 0) {
                    return;
                }
            } else {
                this.queue.offer(NotificationLite.next(object));
                if (!this.enter()) {
                    return;
                }
            }
            this.drainLoop();
        }

        @Override
        public void onSubscribe(Disposable object) {
            if (DisposableHelper.validate(this.s, (Disposable)object)) {
                this.s = object;
                object = this.actual;
                object.onSubscribe(this);
                if (this.cancelled) {
                    return;
                }
                UnicastSubject unicastSubject = UnicastSubject.create(this.bufferSize);
                this.window = unicastSubject;
                object.onNext(unicastSubject);
                object = new ConsumerIndexHolder(this.producerIndex, this);
                object = this.restartTimerOnMaxSize ? this.worker.schedulePeriodically((Runnable)object, this.timespan, this.timespan, this.unit) : this.scheduler.schedulePeriodicallyDirect((Runnable)object, this.timespan, this.timespan, this.unit);
                DisposableHelper.replace(this.timer, (Disposable)object);
            }
        }

        static final class ConsumerIndexHolder
        implements Runnable {
            final long index;
            final WindowExactBoundedObserver<?> parent;

            ConsumerIndexHolder(long l, WindowExactBoundedObserver<?> windowExactBoundedObserver) {
                this.index = l;
                this.parent = windowExactBoundedObserver;
            }

            @Override
            public void run() {
                WindowExactBoundedObserver<?> windowExactBoundedObserver = this.parent;
                if (!windowExactBoundedObserver.cancelled) {
                    windowExactBoundedObserver.queue.offer(this);
                } else {
                    windowExactBoundedObserver.terminated = true;
                    windowExactBoundedObserver.disposeTimer();
                }
                if (windowExactBoundedObserver.enter()) {
                    windowExactBoundedObserver.drainLoop();
                }
            }
        }

    }

    static final class WindowExactUnboundedObserver<T>
    extends QueueDrainObserver<T, Object, Observable<T>>
    implements Observer<T>,
    Disposable,
    Runnable {
        static final Object NEXT = new Object();
        final int bufferSize;
        Disposable s;
        final Scheduler scheduler;
        volatile boolean terminated;
        final AtomicReference<Disposable> timer = new AtomicReference();
        final long timespan;
        final TimeUnit unit;
        UnicastSubject<T> window;

        WindowExactUnboundedObserver(Observer<? super Observable<T>> observer, long l, TimeUnit timeUnit, Scheduler scheduler, int n) {
            super(observer, new MpscLinkedQueue());
            this.timespan = l;
            this.unit = timeUnit;
            this.scheduler = scheduler;
            this.bufferSize = n;
        }

        @Override
        public void dispose() {
            this.cancelled = true;
        }

        void disposeTimer() {
            DisposableHelper.dispose(this.timer);
        }

        void drainLoop() {
            Object object = (MpscLinkedQueue)this.queue;
            Observer observer = this.actual;
            UnicastSubject unicastSubject = this.window;
            int n = 1;
            do {
                boolean bl = this.terminated;
                boolean bl2 = this.done;
                Object t = object.poll();
                if (bl2 && (t == null || t == NEXT)) {
                    this.window = null;
                    object.clear();
                    this.disposeTimer();
                    object = this.error;
                    if (object != null) {
                        unicastSubject.onError((Throwable)object);
                        return;
                    }
                    unicastSubject.onComplete();
                    return;
                }
                if (t == null) {
                    int n2;
                    n = n2 = this.leave(- n);
                    if (n2 != 0) continue;
                    return;
                }
                if (t == NEXT) {
                    unicastSubject.onComplete();
                    if (!bl) {
                        unicastSubject = UnicastSubject.create(this.bufferSize);
                        this.window = unicastSubject;
                        observer.onNext(unicastSubject);
                        continue;
                    }
                    this.s.dispose();
                    continue;
                }
                unicastSubject.onNext(NotificationLite.getValue(t));
            } while (true);
        }

        @Override
        public boolean isDisposed() {
            return this.cancelled;
        }

        @Override
        public void onComplete() {
            this.done = true;
            if (this.enter()) {
                this.drainLoop();
            }
            this.disposeTimer();
            this.actual.onComplete();
        }

        @Override
        public void onError(Throwable throwable) {
            this.error = throwable;
            this.done = true;
            if (this.enter()) {
                this.drainLoop();
            }
            this.disposeTimer();
            this.actual.onError(throwable);
        }

        @Override
        public void onNext(T t) {
            if (this.terminated) {
                return;
            }
            if (this.fastEnter()) {
                this.window.onNext(t);
                if (this.leave(-1) == 0) {
                    return;
                }
            } else {
                this.queue.offer(NotificationLite.next(t));
                if (!this.enter()) {
                    return;
                }
            }
            this.drainLoop();
        }

        @Override
        public void onSubscribe(Disposable object) {
            if (DisposableHelper.validate(this.s, (Disposable)object)) {
                this.s = object;
                this.window = UnicastSubject.create(this.bufferSize);
                object = this.actual;
                object.onSubscribe(this);
                object.onNext(this.window);
                if (!this.cancelled) {
                    object = this.scheduler.schedulePeriodicallyDirect(this, this.timespan, this.timespan, this.unit);
                    DisposableHelper.replace(this.timer, (Disposable)object);
                }
            }
        }

        @Override
        public void run() {
            if (this.cancelled) {
                this.terminated = true;
                this.disposeTimer();
            }
            this.queue.offer(NEXT);
            if (this.enter()) {
                this.drainLoop();
            }
        }
    }

    static final class WindowSkipObserver<T>
    extends QueueDrainObserver<T, Object, Observable<T>>
    implements Disposable,
    Runnable {
        final int bufferSize;
        Disposable s;
        volatile boolean terminated;
        final long timeskip;
        final long timespan;
        final TimeUnit unit;
        final List<UnicastSubject<T>> windows;
        final Scheduler.Worker worker;

        WindowSkipObserver(Observer<? super Observable<T>> observer, long l, long l2, TimeUnit timeUnit, Scheduler.Worker worker, int n) {
            super(observer, new MpscLinkedQueue());
            this.timespan = l;
            this.timeskip = l2;
            this.unit = timeUnit;
            this.worker = worker;
            this.bufferSize = n;
            this.windows = new LinkedList<UnicastSubject<T>>();
        }

        void complete(UnicastSubject<T> unicastSubject) {
            this.queue.offer(new SubjectWork<T>(unicastSubject, false));
            if (this.enter()) {
                this.drainLoop();
            }
        }

        @Override
        public void dispose() {
            this.cancelled = true;
        }

        void disposeWorker() {
            this.worker.dispose();
        }

        /*
         * Unable to fully structure code
         * Enabled aggressive block sorting
         * Lifted jumps to return sites
         */
        void drainLoop() {
            var6_1 = (MpscLinkedQueue)this.queue;
            var7_2 = this.actual;
            var5_3 = this.windows;
            var1_4 = 1;
            block0 : do {
                if (this.terminated) {
                    this.s.dispose();
                    this.disposeWorker();
                    var6_1.clear();
                    var5_3.clear();
                    return;
                }
                var3_6 = this.done;
                var8_9 = var6_1.poll();
                var2_5 = var8_9 == null ? 1 : 0;
                var4_7 = var8_9 instanceof SubjectWork;
                if (var3_6 && (var2_5 != 0 || var4_7)) {
                    var6_1.clear();
                    var6_1 = this.error;
                    if (var6_1 != null) {
                        var7_2 = var5_3.iterator();
                        while (var7_2.hasNext()) {
                            ((UnicastSubject)var7_2.next()).onError((Throwable)var6_1);
                        }
                    } else {
                        var6_1 = var5_3.iterator();
                        while (var6_1.hasNext()) {
                            var6_1.next().onComplete();
                        }
                    }
                    this.disposeWorker();
                    var5_3.clear();
                    return;
                }
                if (var2_5 != 0) {
                    var1_4 = var2_5 = this.leave(- var1_4);
                    if (var2_5 != 0) continue;
                    return;
                }
                if (var4_7) {
                    var8_10 = (SubjectWork)var8_9;
                    if (var8_10.open) {
                        if (this.cancelled) continue;
                        var8_11 = UnicastSubject.create(this.bufferSize);
                        var5_3.add(var8_11);
                        var7_2.onNext(var8_11);
                        this.worker.schedule(new CompletionTask(var8_11), this.timespan, this.unit);
                        continue;
                    }
                    var5_3.remove(var8_10.w);
                    var8_10.w.onComplete();
                    if (!var5_3.isEmpty() || !this.cancelled) continue;
                    this.terminated = true;
                    continue;
                }
                var9_12 = var5_3.iterator();
                do {
                    if (var9_12.hasNext()) ** break;
                    continue block0;
                    var9_12.next().onNext(var8_9);
                } while (true);
                break;
            } while (true);
        }

        @Override
        public boolean isDisposed() {
            return this.cancelled;
        }

        @Override
        public void onComplete() {
            this.done = true;
            if (this.enter()) {
                this.drainLoop();
            }
            this.actual.onComplete();
            this.disposeWorker();
        }

        @Override
        public void onError(Throwable throwable) {
            this.error = throwable;
            this.done = true;
            if (this.enter()) {
                this.drainLoop();
            }
            this.actual.onError(throwable);
            this.disposeWorker();
        }

        @Override
        public void onNext(T t) {
            if (this.fastEnter()) {
                Iterator<UnicastSubject<T>> iterator = this.windows.iterator();
                while (iterator.hasNext()) {
                    iterator.next().onNext(t);
                }
                if (this.leave(-1) == 0) {
                    return;
                }
            } else {
                this.queue.offer(t);
                if (!this.enter()) {
                    return;
                }
            }
            this.drainLoop();
        }

        @Override
        public void onSubscribe(Disposable object) {
            if (DisposableHelper.validate(this.s, (Disposable)object)) {
                this.s = object;
                this.actual.onSubscribe(this);
                if (this.cancelled) {
                    return;
                }
                object = UnicastSubject.create(this.bufferSize);
                this.windows.add((UnicastSubject<T>)object);
                this.actual.onNext(object);
                this.worker.schedule(new CompletionTask(object), this.timespan, this.unit);
                this.worker.schedulePeriodically(this, this.timeskip, this.timeskip, this.unit);
            }
        }

        @Override
        public void run() {
            SubjectWork subjectWork = new SubjectWork(UnicastSubject.create(this.bufferSize), true);
            if (!this.cancelled) {
                this.queue.offer(subjectWork);
            }
            if (this.enter()) {
                this.drainLoop();
            }
        }

        final class CompletionTask
        implements Runnable {
            private final UnicastSubject<T> w;

            CompletionTask(UnicastSubject<T> unicastSubject) {
                this.w = unicastSubject;
            }

            @Override
            public void run() {
                WindowSkipObserver.this.complete(this.w);
            }
        }

        static final class SubjectWork<T> {
            final boolean open;
            final UnicastSubject<T> w;

            SubjectWork(UnicastSubject<T> unicastSubject, boolean bl) {
                this.w = unicastSubject;
                this.open = bl;
            }
        }

    }

}

