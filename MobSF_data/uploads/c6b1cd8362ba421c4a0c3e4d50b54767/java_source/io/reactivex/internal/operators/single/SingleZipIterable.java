/*
 * Decompiled with CFR 0_132.
 */
package io.reactivex.internal.operators.single;

import io.reactivex.Single;
import io.reactivex.SingleObserver;
import io.reactivex.SingleSource;
import io.reactivex.disposables.Disposable;
import io.reactivex.exceptions.Exceptions;
import io.reactivex.functions.Function;
import io.reactivex.internal.disposables.EmptyDisposable;
import io.reactivex.internal.functions.ObjectHelper;
import io.reactivex.internal.operators.single.SingleMap;
import io.reactivex.internal.operators.single.SingleZipArray;
import java.util.Arrays;
import java.util.Iterator;
import java.util.NoSuchElementException;

public final class SingleZipIterable<T, R>
extends Single<R> {
    final Iterable<? extends SingleSource<? extends T>> sources;
    final Function<? super Object[], ? extends R> zipper;

    public SingleZipIterable(Iterable<? extends SingleSource<? extends T>> iterable, Function<? super Object[], ? extends R> function) {
        this.sources = iterable;
        this.zipper = function;
    }

    @Override
    protected void subscribeActual(SingleObserver<? super R> singleObserver) {
        Object object;
        int n;
        int n2;
        Iterator<SingleSource<T>> iterator;
        Object object2 = new SingleSource[8];
        try {
            iterator = this.sources.iterator();
            n = 0;
            n2 = 0;
        }
        catch (Throwable throwable) {
            Exceptions.throwIfFatal(throwable);
            EmptyDisposable.error(throwable, singleObserver);
            return;
        }
        do {
            SingleSource<? extends T> singleSource;
            block11 : {
                if (!iterator.hasNext()) break;
                singleSource = iterator.next();
                if (singleSource != null) break block11;
                EmptyDisposable.error((Throwable)new NullPointerException("One of the sources is null"), singleObserver);
                return;
            }
            object = object2;
            if (n2 == ((SingleSource[])object2).length) {
                object = Arrays.copyOf(object2, (n2 >> 2) + n2);
            }
            object[n2] = singleSource;
            ++n2;
            object2 = object;
        } while (true);
        if (n2 == 0) {
            EmptyDisposable.error((Throwable)new NoSuchElementException(), singleObserver);
            return;
        }
        if (n2 == 1) {
            object2[0].subscribe(new SingleMap.MapSingleObserver(singleObserver, new SingletonArrayFunc()));
            return;
        }
        object = new SingleZipArray.ZipCoordinator(singleObserver, n2, this.zipper);
        singleObserver.onSubscribe((Disposable)object);
        while (n < n2) {
            if (object.isDisposed()) {
                return;
            }
            object2[n].subscribe(object.observers[n]);
            ++n;
        }
        return;
    }

    final class SingletonArrayFunc
    implements Function<T, R> {
        SingletonArrayFunc() {
        }

        @Override
        public R apply(T t) throws Exception {
            return ObjectHelper.requireNonNull(SingleZipIterable.this.zipper.apply((Object[])new Object[]{t}), "The zipper returned a null value");
        }
    }

}

