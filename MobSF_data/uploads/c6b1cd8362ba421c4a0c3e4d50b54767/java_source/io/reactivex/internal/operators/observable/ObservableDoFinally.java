/*
 * Decompiled with CFR 0_132.
 */
package io.reactivex.internal.operators.observable;

import io.reactivex.ObservableSource;
import io.reactivex.Observer;
import io.reactivex.annotations.Experimental;
import io.reactivex.annotations.Nullable;
import io.reactivex.disposables.Disposable;
import io.reactivex.exceptions.Exceptions;
import io.reactivex.functions.Action;
import io.reactivex.internal.disposables.DisposableHelper;
import io.reactivex.internal.fuseable.QueueDisposable;
import io.reactivex.internal.observers.BasicIntQueueDisposable;
import io.reactivex.internal.operators.observable.AbstractObservableWithUpstream;
import io.reactivex.plugins.RxJavaPlugins;

@Experimental
public final class ObservableDoFinally<T>
extends AbstractObservableWithUpstream<T, T> {
    final Action onFinally;

    public ObservableDoFinally(ObservableSource<T> observableSource, Action action) {
        super(observableSource);
        this.onFinally = action;
    }

    @Override
    protected void subscribeActual(Observer<? super T> observer) {
        this.source.subscribe(new DoFinallyObserver<T>(observer, this.onFinally));
    }

    static final class DoFinallyObserver<T>
    extends BasicIntQueueDisposable<T>
    implements Observer<T> {
        private static final long serialVersionUID = 4109457741734051389L;
        final Observer<? super T> actual;
        Disposable d;
        final Action onFinally;
        QueueDisposable<T> qd;
        boolean syncFused;

        DoFinallyObserver(Observer<? super T> observer, Action action) {
            this.actual = observer;
            this.onFinally = action;
        }

        @Override
        public void clear() {
            this.qd.clear();
        }

        @Override
        public void dispose() {
            this.d.dispose();
            this.runFinally();
        }

        @Override
        public boolean isDisposed() {
            return this.d.isDisposed();
        }

        @Override
        public boolean isEmpty() {
            return this.qd.isEmpty();
        }

        @Override
        public void onComplete() {
            this.actual.onComplete();
            this.runFinally();
        }

        @Override
        public void onError(Throwable throwable) {
            this.actual.onError(throwable);
            this.runFinally();
        }

        @Override
        public void onNext(T t) {
            this.actual.onNext(t);
        }

        @Override
        public void onSubscribe(Disposable disposable) {
            if (DisposableHelper.validate(this.d, disposable)) {
                this.d = disposable;
                if (disposable instanceof QueueDisposable) {
                    this.qd = (QueueDisposable)disposable;
                }
                this.actual.onSubscribe(this);
            }
        }

        @Nullable
        @Override
        public T poll() throws Exception {
            T t = this.qd.poll();
            if (t == null && this.syncFused) {
                this.runFinally();
            }
            return t;
        }

        @Override
        public int requestFusion(int n) {
            QueueDisposable<T> queueDisposable = this.qd;
            if (queueDisposable != null && (n & 4) == 0) {
                if ((n = queueDisposable.requestFusion(n)) != 0) {
                    boolean bl = true;
                    if (n != 1) {
                        bl = false;
                    }
                    this.syncFused = bl;
                }
                return n;
            }
            return 0;
        }

        void runFinally() {
            if (this.compareAndSet(0, 1)) {
                try {
                    this.onFinally.run();
                    return;
                }
                catch (Throwable throwable) {
                    Exceptions.throwIfFatal(throwable);
                    RxJavaPlugins.onError(throwable);
                }
            }
        }
    }

}

