/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  org.reactivestreams.Subscriber
 *  org.reactivestreams.Subscription
 */
package io.reactivex.internal.operators.parallel;

import io.reactivex.Flowable;
import io.reactivex.FlowableSubscriber;
import io.reactivex.exceptions.MissingBackpressureException;
import io.reactivex.internal.fuseable.SimplePlainQueue;
import io.reactivex.internal.queue.SpscArrayQueue;
import io.reactivex.internal.subscriptions.SubscriptionHelper;
import io.reactivex.internal.util.AtomicThrowable;
import io.reactivex.internal.util.BackpressureHelper;
import io.reactivex.parallel.ParallelFlowable;
import io.reactivex.plugins.RxJavaPlugins;
import java.io.Serializable;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
import java.util.concurrent.atomic.AtomicReference;
import org.reactivestreams.Subscriber;
import org.reactivestreams.Subscription;

public final class ParallelJoin<T>
extends Flowable<T> {
    final boolean delayErrors;
    final int prefetch;
    final ParallelFlowable<? extends T> source;

    public ParallelJoin(ParallelFlowable<? extends T> parallelFlowable, int n, boolean bl) {
        this.source = parallelFlowable;
        this.prefetch = n;
        this.delayErrors = bl;
    }

    @Override
    protected void subscribeActual(Subscriber<? super T> subscriber) {
        JoinSubscriptionBase joinSubscriptionBase = this.delayErrors ? new JoinSubscriptionDelayError<T>(subscriber, this.source.parallelism(), this.prefetch) : new JoinSubscription<T>(subscriber, this.source.parallelism(), this.prefetch);
        subscriber.onSubscribe(joinSubscriptionBase);
        this.source.subscribe(joinSubscriptionBase.subscribers);
    }

    static final class JoinInnerSubscriber<T>
    extends AtomicReference<Subscription>
    implements FlowableSubscriber<T> {
        private static final long serialVersionUID = 8410034718427740355L;
        final int limit;
        final JoinSubscriptionBase<T> parent;
        final int prefetch;
        long produced;
        volatile SimplePlainQueue<T> queue;

        JoinInnerSubscriber(JoinSubscriptionBase<T> joinSubscriptionBase, int n) {
            this.parent = joinSubscriptionBase;
            this.prefetch = n;
            this.limit = n - (n >> 2);
        }

        public boolean cancel() {
            return SubscriptionHelper.cancel(this);
        }

        SimplePlainQueue<T> getQueue() {
            SimplePlainQueue<T> simplePlainQueue;
            SimplePlainQueue<T> simplePlainQueue2 = simplePlainQueue = this.queue;
            if (simplePlainQueue == null) {
                this.queue = simplePlainQueue2 = new SpscArrayQueue<T>(this.prefetch);
            }
            return simplePlainQueue2;
        }

        public void onComplete() {
            this.parent.onComplete();
        }

        public void onError(Throwable throwable) {
            this.parent.onError(throwable);
        }

        public void onNext(T t) {
            this.parent.onNext(this, t);
        }

        @Override
        public void onSubscribe(Subscription subscription) {
            if (SubscriptionHelper.setOnce(this, subscription)) {
                subscription.request((long)this.prefetch);
            }
        }

        public void request(long l) {
            if ((l = this.produced + l) >= (long)this.limit) {
                this.produced = 0L;
                ((Subscription)this.get()).request(l);
                return;
            }
            this.produced = l;
        }

        public void requestOne() {
            long l = this.produced + 1L;
            if (l == (long)this.limit) {
                this.produced = 0L;
                ((Subscription)this.get()).request(l);
                return;
            }
            this.produced = l;
        }
    }

    static final class JoinSubscription<T>
    extends JoinSubscriptionBase<T> {
        private static final long serialVersionUID = 6312374661811000451L;

        JoinSubscription(Subscriber<? super T> subscriber, int n, int n2) {
            super(subscriber, n, n2);
        }

        @Override
        void drain() {
            if (this.getAndIncrement() != 0) {
                return;
            }
            this.drainLoop();
        }

        void drainLoop() {
            JoinInnerSubscriber[] arrjoinInnerSubscriber = this.subscribers;
            int n = arrjoinInnerSubscriber.length;
            Subscriber subscriber = this.actual;
            int n2 = 1;
            do {
                int n3;
                int n4;
                SimplePlainQueue simplePlainQueue;
                long l = this.requested.get();
                long l2 = 0L;
                block1 : while (l2 != l) {
                    if (this.cancelled) {
                        this.cleanup();
                        return;
                    }
                    simplePlainQueue = (Throwable)this.errors.get();
                    if (simplePlainQueue != null) {
                        this.cleanup();
                        subscriber.onError((Throwable)((Object)simplePlainQueue));
                        return;
                    }
                    n3 = this.done.get() == 0 ? 1 : 0;
                    boolean bl = true;
                    for (n4 = 0; n4 < arrjoinInnerSubscriber.length; ++n4) {
                        simplePlainQueue = arrjoinInnerSubscriber[n4];
                        SimplePlainQueue simplePlainQueue2 = simplePlainQueue.queue;
                        boolean bl2 = bl;
                        long l3 = l2;
                        if (simplePlainQueue2 != null) {
                            simplePlainQueue2 = simplePlainQueue2.poll();
                            bl2 = bl;
                            l3 = l2++;
                            if (simplePlainQueue2 != null) {
                                subscriber.onNext(simplePlainQueue2);
                                simplePlainQueue.requestOne();
                                if (l2 == l) break block1;
                                bl2 = false;
                                l3 = l2;
                            }
                        }
                        bl = bl2;
                        l2 = l3;
                    }
                    if (n3 != 0 && bl) {
                        subscriber.onComplete();
                        return;
                    }
                    if (!bl) continue;
                    break;
                }
                if (l2 == l) {
                    block16 : {
                        if (this.cancelled) {
                            this.cleanup();
                            return;
                        }
                        simplePlainQueue = (Throwable)this.errors.get();
                        if (simplePlainQueue != null) {
                            this.cleanup();
                            subscriber.onError((Throwable)((Object)simplePlainQueue));
                            return;
                        }
                        n3 = this.done.get() == 0 ? 1 : 0;
                        for (n4 = 0; n4 < n; ++n4) {
                            simplePlainQueue = arrjoinInnerSubscriber[n4].queue;
                            if (simplePlainQueue == null || simplePlainQueue.isEmpty()) continue;
                            n4 = 0;
                            break block16;
                        }
                        n4 = 1;
                    }
                    if (n3 != 0 && n4 != 0) {
                        subscriber.onComplete();
                        return;
                    }
                }
                if (l2 != 0L && l != Long.MAX_VALUE) {
                    this.requested.addAndGet(- l2);
                }
                n3 = n4 = this.get();
                if (n4 == n2) {
                    n3 = n2 = this.addAndGet(- n2);
                    if (n2 == 0) {
                        return;
                    }
                }
                n2 = n3;
            } while (true);
        }

        @Override
        public void onComplete() {
            this.done.decrementAndGet();
            this.drain();
        }

        @Override
        public void onError(Throwable throwable) {
            if (this.errors.compareAndSet(null, throwable)) {
                this.cancelAll();
                this.drain();
                return;
            }
            if (throwable != this.errors.get()) {
                RxJavaPlugins.onError(throwable);
            }
        }

        @Override
        public void onNext(JoinInnerSubscriber<T> serializable, T t) {
            if (this.get() == 0 && this.compareAndSet(0, 1)) {
                if (this.requested.get() != 0L) {
                    this.actual.onNext(t);
                    if (this.requested.get() != Long.MAX_VALUE) {
                        this.requested.decrementAndGet();
                    }
                    serializable.request(1L);
                } else if (!serializable.getQueue().offer(t)) {
                    this.cancelAll();
                    serializable = new MissingBackpressureException("Queue full?!");
                    if (this.errors.compareAndSet(null, serializable)) {
                        this.actual.onError(serializable);
                        return;
                    }
                    RxJavaPlugins.onError(serializable);
                    return;
                }
                if (this.decrementAndGet() == 0) {
                    return;
                }
            } else {
                if (!serializable.getQueue().offer(t)) {
                    this.cancelAll();
                    this.onError(new MissingBackpressureException("Queue full?!"));
                    return;
                }
                if (this.getAndIncrement() != 0) {
                    return;
                }
            }
            this.drainLoop();
        }
    }

    static abstract class JoinSubscriptionBase<T>
    extends AtomicInteger
    implements Subscription {
        private static final long serialVersionUID = 3100232009247827843L;
        final Subscriber<? super T> actual;
        volatile boolean cancelled;
        final AtomicInteger done = new AtomicInteger();
        final AtomicThrowable errors = new AtomicThrowable();
        final AtomicLong requested = new AtomicLong();
        final JoinInnerSubscriber<T>[] subscribers;

        JoinSubscriptionBase(Subscriber<? super T> arrjoinInnerSubscriber, int n, int n2) {
            this.actual = arrjoinInnerSubscriber;
            arrjoinInnerSubscriber = new JoinInnerSubscriber[n];
            for (int i = 0; i < n; ++i) {
                arrjoinInnerSubscriber[i] = new JoinInnerSubscriber(this, n2);
            }
            this.subscribers = arrjoinInnerSubscriber;
            this.done.lazySet(n);
        }

        public void cancel() {
            if (!this.cancelled) {
                this.cancelled = true;
                this.cancelAll();
                if (this.getAndIncrement() == 0) {
                    this.cleanup();
                }
            }
        }

        void cancelAll() {
            for (int i = 0; i < this.subscribers.length; ++i) {
                this.subscribers[i].cancel();
            }
        }

        void cleanup() {
            for (int i = 0; i < this.subscribers.length; ++i) {
                this.subscribers[i].queue = null;
            }
        }

        abstract void drain();

        abstract void onComplete();

        abstract void onError(Throwable var1);

        abstract void onNext(JoinInnerSubscriber<T> var1, T var2);

        public void request(long l) {
            if (SubscriptionHelper.validate(l)) {
                BackpressureHelper.add(this.requested, l);
                this.drain();
            }
        }
    }

    static final class JoinSubscriptionDelayError<T>
    extends JoinSubscriptionBase<T> {
        private static final long serialVersionUID = -5737965195918321883L;

        JoinSubscriptionDelayError(Subscriber<? super T> subscriber, int n, int n2) {
            super(subscriber, n, n2);
        }

        @Override
        void drain() {
            if (this.getAndIncrement() != 0) {
                return;
            }
            this.drainLoop();
        }

        void drainLoop() {
            JoinInnerSubscriber[] arrjoinInnerSubscriber = this.subscribers;
            int n = arrjoinInnerSubscriber.length;
            Subscriber subscriber = this.actual;
            int n2 = 1;
            do {
                int n3;
                int n4;
                SimplePlainQueue simplePlainQueue;
                long l = this.requested.get();
                long l2 = 0L;
                block1 : while (l2 != l) {
                    if (this.cancelled) {
                        this.cleanup();
                        return;
                    }
                    n3 = this.done.get() == 0 ? 1 : 0;
                    boolean bl = true;
                    for (n4 = 0; n4 < n; ++n4) {
                        simplePlainQueue = arrjoinInnerSubscriber[n4];
                        SimplePlainQueue simplePlainQueue2 = simplePlainQueue.queue;
                        boolean bl2 = bl;
                        long l3 = l2;
                        if (simplePlainQueue2 != null) {
                            simplePlainQueue2 = simplePlainQueue2.poll();
                            bl2 = bl;
                            l3 = l2++;
                            if (simplePlainQueue2 != null) {
                                subscriber.onNext(simplePlainQueue2);
                                simplePlainQueue.requestOne();
                                if (l2 == l) break block1;
                                bl2 = false;
                                l3 = l2;
                            }
                        }
                        bl = bl2;
                        l2 = l3;
                    }
                    if (n3 != 0 && bl) {
                        if ((Throwable)this.errors.get() != null) {
                            subscriber.onError(this.errors.terminate());
                            return;
                        }
                        subscriber.onComplete();
                        return;
                    }
                    if (!bl) continue;
                    break;
                }
                if (l2 == l) {
                    block16 : {
                        if (this.cancelled) {
                            this.cleanup();
                            return;
                        }
                        n3 = this.done.get() == 0 ? 1 : 0;
                        for (n4 = 0; n4 < n; ++n4) {
                            simplePlainQueue = arrjoinInnerSubscriber[n4].queue;
                            if (simplePlainQueue == null || simplePlainQueue.isEmpty()) continue;
                            n4 = 0;
                            break block16;
                        }
                        n4 = 1;
                    }
                    if (n3 != 0 && n4 != 0) {
                        if ((Throwable)this.errors.get() != null) {
                            subscriber.onError(this.errors.terminate());
                            return;
                        }
                        subscriber.onComplete();
                        return;
                    }
                }
                if (l2 != 0L && l != Long.MAX_VALUE) {
                    this.requested.addAndGet(- l2);
                }
                n3 = n4 = this.get();
                if (n4 == n2) {
                    n3 = n2 = this.addAndGet(- n2);
                    if (n2 == 0) {
                        return;
                    }
                }
                n2 = n3;
            } while (true);
        }

        @Override
        void onComplete() {
            this.done.decrementAndGet();
            this.drain();
        }

        @Override
        void onError(Throwable throwable) {
            this.errors.addThrowable(throwable);
            this.done.decrementAndGet();
            this.drain();
        }

        @Override
        void onNext(JoinInnerSubscriber<T> joinInnerSubscriber, T t) {
            if (this.get() == 0 && this.compareAndSet(0, 1)) {
                if (this.requested.get() != 0L) {
                    this.actual.onNext(t);
                    if (this.requested.get() != Long.MAX_VALUE) {
                        this.requested.decrementAndGet();
                    }
                    joinInnerSubscriber.request(1L);
                } else if (!joinInnerSubscriber.getQueue().offer(t)) {
                    joinInnerSubscriber.cancel();
                    this.errors.addThrowable(new MissingBackpressureException("Queue full?!"));
                    this.done.decrementAndGet();
                    this.drainLoop();
                    return;
                }
                if (this.decrementAndGet() == 0) {
                    return;
                }
            } else {
                if (!joinInnerSubscriber.getQueue().offer(t) && joinInnerSubscriber.cancel()) {
                    this.errors.addThrowable(new MissingBackpressureException("Queue full?!"));
                    this.done.decrementAndGet();
                }
                if (this.getAndIncrement() != 0) {
                    return;
                }
            }
            this.drainLoop();
        }
    }

}

