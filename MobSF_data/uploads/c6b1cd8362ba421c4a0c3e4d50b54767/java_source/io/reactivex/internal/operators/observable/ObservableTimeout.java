/*
 * Decompiled with CFR 0_132.
 */
package io.reactivex.internal.operators.observable;

import io.reactivex.ObservableSource;
import io.reactivex.Observer;
import io.reactivex.disposables.Disposable;
import io.reactivex.exceptions.Exceptions;
import io.reactivex.functions.Function;
import io.reactivex.internal.disposables.DisposableHelper;
import io.reactivex.internal.disposables.ObserverFullArbiter;
import io.reactivex.internal.functions.ObjectHelper;
import io.reactivex.internal.observers.FullArbiterObserver;
import io.reactivex.internal.operators.observable.AbstractObservableWithUpstream;
import io.reactivex.observers.DisposableObserver;
import io.reactivex.observers.SerializedObserver;
import io.reactivex.plugins.RxJavaPlugins;
import java.util.concurrent.TimeoutException;
import java.util.concurrent.atomic.AtomicReference;

public final class ObservableTimeout<T, U, V>
extends AbstractObservableWithUpstream<T, T> {
    final ObservableSource<U> firstTimeoutIndicator;
    final Function<? super T, ? extends ObservableSource<V>> itemTimeoutIndicator;
    final ObservableSource<? extends T> other;

    public ObservableTimeout(ObservableSource<T> observableSource, ObservableSource<U> observableSource2, Function<? super T, ? extends ObservableSource<V>> function, ObservableSource<? extends T> observableSource3) {
        super(observableSource);
        this.firstTimeoutIndicator = observableSource2;
        this.itemTimeoutIndicator = function;
        this.other = observableSource3;
    }

    @Override
    public void subscribeActual(Observer<? super T> observer) {
        if (this.other == null) {
            this.source.subscribe(new TimeoutObserver(new SerializedObserver<T>(observer), this.firstTimeoutIndicator, this.itemTimeoutIndicator));
            return;
        }
        this.source.subscribe(new TimeoutOtherObserver(observer, this.firstTimeoutIndicator, this.itemTimeoutIndicator, this.other));
    }

    static interface OnTimeout {
        public void innerError(Throwable var1);

        public void timeout(long var1);
    }

    static final class TimeoutInnerObserver<T, U, V>
    extends DisposableObserver<Object> {
        boolean done;
        final long index;
        final OnTimeout parent;

        TimeoutInnerObserver(OnTimeout onTimeout, long l) {
            this.parent = onTimeout;
            this.index = l;
        }

        @Override
        public void onComplete() {
            if (this.done) {
                return;
            }
            this.done = true;
            this.parent.timeout(this.index);
        }

        @Override
        public void onError(Throwable throwable) {
            if (this.done) {
                RxJavaPlugins.onError(throwable);
                return;
            }
            this.done = true;
            this.parent.innerError(throwable);
        }

        @Override
        public void onNext(Object object) {
            if (this.done) {
                return;
            }
            this.done = true;
            this.dispose();
            this.parent.timeout(this.index);
        }
    }

    static final class TimeoutObserver<T, U, V>
    extends AtomicReference<Disposable>
    implements Observer<T>,
    Disposable,
    OnTimeout {
        private static final long serialVersionUID = 2672739326310051084L;
        final Observer<? super T> actual;
        final ObservableSource<U> firstTimeoutIndicator;
        volatile long index;
        final Function<? super T, ? extends ObservableSource<V>> itemTimeoutIndicator;
        Disposable s;

        TimeoutObserver(Observer<? super T> observer, ObservableSource<U> observableSource, Function<? super T, ? extends ObservableSource<V>> function) {
            this.actual = observer;
            this.firstTimeoutIndicator = observableSource;
            this.itemTimeoutIndicator = function;
        }

        @Override
        public void dispose() {
            if (DisposableHelper.dispose(this)) {
                this.s.dispose();
            }
        }

        @Override
        public void innerError(Throwable throwable) {
            this.s.dispose();
            this.actual.onError(throwable);
        }

        @Override
        public boolean isDisposed() {
            return this.s.isDisposed();
        }

        @Override
        public void onComplete() {
            DisposableHelper.dispose(this);
            this.actual.onComplete();
        }

        @Override
        public void onError(Throwable throwable) {
            DisposableHelper.dispose(this);
            this.actual.onError(throwable);
        }

        @Override
        public void onNext(T object) {
            TimeoutInnerObserver timeoutInnerObserver;
            long l;
            this.index = l = this.index + 1L;
            this.actual.onNext(object);
            Disposable disposable = (Disposable)this.get();
            if (disposable != null) {
                disposable.dispose();
            }
            try {
                object = ObjectHelper.requireNonNull(this.itemTimeoutIndicator.apply(object), "The ObservableSource returned is null");
                timeoutInnerObserver = new TimeoutInnerObserver(this, l);
            }
            catch (Throwable throwable) {
                Exceptions.throwIfFatal(throwable);
                this.dispose();
                this.actual.onError(throwable);
                return;
            }
            if (this.compareAndSet(disposable, timeoutInnerObserver)) {
                object.subscribe(timeoutInnerObserver);
            }
        }

        @Override
        public void onSubscribe(Disposable object) {
            if (DisposableHelper.validate(this.s, (Disposable)object)) {
                this.s = object;
                object = this.actual;
                ObservableSource<U> observableSource = this.firstTimeoutIndicator;
                if (observableSource != null) {
                    TimeoutInnerObserver timeoutInnerObserver = new TimeoutInnerObserver(this, 0L);
                    if (this.compareAndSet(null, timeoutInnerObserver)) {
                        object.onSubscribe(this);
                        observableSource.subscribe(timeoutInnerObserver);
                        return;
                    }
                } else {
                    object.onSubscribe(this);
                }
            }
        }

        @Override
        public void timeout(long l) {
            if (l == this.index) {
                this.dispose();
                this.actual.onError(new TimeoutException());
            }
        }
    }

    static final class TimeoutOtherObserver<T, U, V>
    extends AtomicReference<Disposable>
    implements Observer<T>,
    Disposable,
    OnTimeout {
        private static final long serialVersionUID = -1957813281749686898L;
        final Observer<? super T> actual;
        final ObserverFullArbiter<T> arbiter;
        boolean done;
        final ObservableSource<U> firstTimeoutIndicator;
        volatile long index;
        final Function<? super T, ? extends ObservableSource<V>> itemTimeoutIndicator;
        final ObservableSource<? extends T> other;
        Disposable s;

        TimeoutOtherObserver(Observer<? super T> observer, ObservableSource<U> observableSource, Function<? super T, ? extends ObservableSource<V>> function, ObservableSource<? extends T> observableSource2) {
            this.actual = observer;
            this.firstTimeoutIndicator = observableSource;
            this.itemTimeoutIndicator = function;
            this.other = observableSource2;
            this.arbiter = new ObserverFullArbiter<T>(observer, this, 8);
        }

        @Override
        public void dispose() {
            if (DisposableHelper.dispose(this)) {
                this.s.dispose();
            }
        }

        @Override
        public void innerError(Throwable throwable) {
            this.s.dispose();
            this.actual.onError(throwable);
        }

        @Override
        public boolean isDisposed() {
            return this.s.isDisposed();
        }

        @Override
        public void onComplete() {
            if (this.done) {
                return;
            }
            this.done = true;
            this.dispose();
            this.arbiter.onComplete(this.s);
        }

        @Override
        public void onError(Throwable throwable) {
            if (this.done) {
                RxJavaPlugins.onError(throwable);
                return;
            }
            this.done = true;
            this.dispose();
            this.arbiter.onError(throwable, this.s);
        }

        @Override
        public void onNext(T object) {
            TimeoutInnerObserver timeoutInnerObserver;
            long l;
            if (this.done) {
                return;
            }
            this.index = l = this.index + 1L;
            if (!this.arbiter.onNext(object, this.s)) {
                return;
            }
            Disposable disposable = (Disposable)this.get();
            if (disposable != null) {
                disposable.dispose();
            }
            try {
                object = ObjectHelper.requireNonNull(this.itemTimeoutIndicator.apply(object), "The ObservableSource returned is null");
                timeoutInnerObserver = new TimeoutInnerObserver(this, l);
            }
            catch (Throwable throwable) {
                Exceptions.throwIfFatal(throwable);
                this.actual.onError(throwable);
                return;
            }
            if (this.compareAndSet(disposable, timeoutInnerObserver)) {
                object.subscribe(timeoutInnerObserver);
            }
        }

        @Override
        public void onSubscribe(Disposable object) {
            if (DisposableHelper.validate(this.s, (Disposable)object)) {
                this.s = object;
                this.arbiter.setDisposable((Disposable)object);
                object = this.actual;
                ObservableSource<U> observableSource = this.firstTimeoutIndicator;
                if (observableSource != null) {
                    TimeoutInnerObserver timeoutInnerObserver = new TimeoutInnerObserver(this, 0L);
                    if (this.compareAndSet(null, timeoutInnerObserver)) {
                        object.onSubscribe(this.arbiter);
                        observableSource.subscribe(timeoutInnerObserver);
                        return;
                    }
                } else {
                    object.onSubscribe(this.arbiter);
                }
            }
        }

        @Override
        public void timeout(long l) {
            if (l == this.index) {
                this.dispose();
                this.other.subscribe(new FullArbiterObserver<T>(this.arbiter));
            }
        }
    }

}

