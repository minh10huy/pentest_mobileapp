/*
 * Decompiled with CFR 0_132.
 */
package io.reactivex.internal.operators.observable;

import io.reactivex.Observable;
import io.reactivex.ObservableSource;
import io.reactivex.Observer;
import io.reactivex.disposables.CompositeDisposable;
import io.reactivex.disposables.Disposable;
import io.reactivex.exceptions.Exceptions;
import io.reactivex.functions.Function;
import io.reactivex.internal.disposables.DisposableHelper;
import io.reactivex.internal.functions.ObjectHelper;
import io.reactivex.internal.fuseable.SimplePlainQueue;
import io.reactivex.internal.observers.QueueDrainObserver;
import io.reactivex.internal.operators.observable.AbstractObservableWithUpstream;
import io.reactivex.internal.queue.MpscLinkedQueue;
import io.reactivex.internal.util.NotificationLite;
import io.reactivex.observers.DisposableObserver;
import io.reactivex.observers.SerializedObserver;
import io.reactivex.plugins.RxJavaPlugins;
import io.reactivex.subjects.UnicastSubject;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.concurrent.atomic.AtomicLong;
import java.util.concurrent.atomic.AtomicReference;

public final class ObservableWindowBoundarySelector<T, B, V>
extends AbstractObservableWithUpstream<T, Observable<T>> {
    final int bufferSize;
    final Function<? super B, ? extends ObservableSource<V>> close;
    final ObservableSource<B> open;

    public ObservableWindowBoundarySelector(ObservableSource<T> observableSource, ObservableSource<B> observableSource2, Function<? super B, ? extends ObservableSource<V>> function, int n) {
        super(observableSource);
        this.open = observableSource2;
        this.close = function;
        this.bufferSize = n;
    }

    @Override
    public void subscribeActual(Observer<? super Observable<T>> observer) {
        this.source.subscribe(new WindowBoundaryMainObserver(new SerializedObserver<Observable<T>>(observer), this.open, this.close, this.bufferSize));
    }

    static final class OperatorWindowBoundaryCloseObserver<T, V>
    extends DisposableObserver<V> {
        boolean done;
        final WindowBoundaryMainObserver<T, ?, V> parent;
        final UnicastSubject<T> w;

        OperatorWindowBoundaryCloseObserver(WindowBoundaryMainObserver<T, ?, V> windowBoundaryMainObserver, UnicastSubject<T> unicastSubject) {
            this.parent = windowBoundaryMainObserver;
            this.w = unicastSubject;
        }

        @Override
        public void onComplete() {
            if (this.done) {
                return;
            }
            this.done = true;
            this.parent.close(this);
        }

        @Override
        public void onError(Throwable throwable) {
            if (this.done) {
                RxJavaPlugins.onError(throwable);
                return;
            }
            this.done = true;
            this.parent.error(throwable);
        }

        @Override
        public void onNext(V v) {
            if (this.done) {
                return;
            }
            this.done = true;
            this.dispose();
            this.parent.close(this);
        }
    }

    static final class OperatorWindowBoundaryOpenObserver<T, B>
    extends DisposableObserver<B> {
        final WindowBoundaryMainObserver<T, B, ?> parent;

        OperatorWindowBoundaryOpenObserver(WindowBoundaryMainObserver<T, B, ?> windowBoundaryMainObserver) {
            this.parent = windowBoundaryMainObserver;
        }

        @Override
        public void onComplete() {
            this.parent.onComplete();
        }

        @Override
        public void onError(Throwable throwable) {
            this.parent.error(throwable);
        }

        @Override
        public void onNext(B b) {
            this.parent.open(b);
        }
    }

    static final class WindowBoundaryMainObserver<T, B, V>
    extends QueueDrainObserver<T, Object, Observable<T>>
    implements Disposable {
        final AtomicReference<Disposable> boundary = new AtomicReference();
        final int bufferSize;
        final Function<? super B, ? extends ObservableSource<V>> close;
        final ObservableSource<B> open;
        final CompositeDisposable resources;
        Disposable s;
        final AtomicLong windows = new AtomicLong();
        final List<UnicastSubject<T>> ws;

        WindowBoundaryMainObserver(Observer<? super Observable<T>> observer, ObservableSource<B> observableSource, Function<? super B, ? extends ObservableSource<V>> function, int n) {
            super(observer, new MpscLinkedQueue());
            this.open = observableSource;
            this.close = function;
            this.bufferSize = n;
            this.resources = new CompositeDisposable();
            this.ws = new ArrayList<UnicastSubject<T>>();
            this.windows.lazySet(1L);
        }

        @Override
        public void accept(Observer<? super Observable<T>> observer, Object object) {
        }

        void close(OperatorWindowBoundaryCloseObserver<T, V> operatorWindowBoundaryCloseObserver) {
            this.resources.delete(operatorWindowBoundaryCloseObserver);
            this.queue.offer(new WindowOperation(operatorWindowBoundaryCloseObserver.w, null));
            if (this.enter()) {
                this.drainLoop();
            }
        }

        @Override
        public void dispose() {
            this.cancelled = true;
        }

        void disposeBoundary() {
            this.resources.dispose();
            DisposableHelper.dispose(this.boundary);
        }

        /*
         * Unable to fully structure code
         * Enabled aggressive block sorting
         * Enabled unnecessary exception pruning
         * Enabled aggressive exception aggregation
         * Lifted jumps to return sites
         */
        void drainLoop() {
            var5_1 = (MpscLinkedQueue)this.queue;
            var6_2 = this.actual;
            var4_3 = this.ws;
            var1_4 = 1;
            block2 : do {
                block16 : {
                    block15 : {
                        var3_6 = this.done;
                        var7_8 = var5_1.poll();
                        var2_5 = var7_8 == null ? 1 : 0;
                        if (!var3_6) break block15;
                        if (var2_5 != 0) {
                            this.disposeBoundary();
                            var5_1 = this.error;
                            if (var5_1 != null) {
                                var6_2 = var4_3.iterator();
                                while (var6_2.hasNext()) {
                                    ((UnicastSubject)var6_2.next()).onError((Throwable)var5_1);
                                }
                            } else {
                                var5_1 = var4_3.iterator();
                                while (var5_1.hasNext()) {
                                    var5_1.next().onComplete();
                                }
                            }
                            var4_3.clear();
                            return;
                        }
                        if (var2_5 == 0) break block16;
                    }
                    var1_4 = var2_5 = this.leave(- var1_4);
                    if (var2_5 != 0) continue;
                    return;
                }
                if (var7_8 instanceof WindowOperation) {
                    var8_12 = (WindowOperation)var7_8;
                    if (var8_12.w != null) {
                        if (!var4_3.remove(var8_12.w)) continue;
                        var8_12.w.onComplete();
                        if (this.windows.decrementAndGet() != 0L) continue;
                        this.disposeBoundary();
                        return;
                    }
                    if (this.cancelled) continue;
                    var7_9 = UnicastSubject.create(this.bufferSize);
                    var4_3.add(var7_9);
                    var6_2.onNext(var7_9);
                    try {
                        var8_12 = ObjectHelper.requireNonNull(this.close.apply(var8_12.open), "The ObservableSource supplied is null");
                        var7_10 = new OperatorWindowBoundaryCloseObserver<T, V>(this, var7_9);
                        if (!this.resources.add(var7_10)) continue;
                        this.windows.getAndIncrement();
                        var8_12.subscribe(var7_10);
                    }
                    catch (Throwable var7_11) {
                        Exceptions.throwIfFatal(var7_11);
                        this.cancelled = true;
                        var6_2.onError(var7_11);
                    }
                    continue;
                }
                var8_12 = var4_3.iterator();
                do {
                    if (var8_12.hasNext()) ** break;
                    continue block2;
                    ((UnicastSubject)var8_12.next()).onNext(NotificationLite.getValue(var7_8));
                } while (true);
                break;
            } while (true);
        }

        void error(Throwable throwable) {
            this.s.dispose();
            this.resources.dispose();
            this.onError(throwable);
        }

        @Override
        public boolean isDisposed() {
            return this.cancelled;
        }

        @Override
        public void onComplete() {
            if (this.done) {
                return;
            }
            this.done = true;
            if (this.enter()) {
                this.drainLoop();
            }
            if (this.windows.decrementAndGet() == 0L) {
                this.resources.dispose();
            }
            this.actual.onComplete();
        }

        @Override
        public void onError(Throwable throwable) {
            if (this.done) {
                RxJavaPlugins.onError(throwable);
                return;
            }
            this.error = throwable;
            this.done = true;
            if (this.enter()) {
                this.drainLoop();
            }
            if (this.windows.decrementAndGet() == 0L) {
                this.resources.dispose();
            }
            this.actual.onError(throwable);
        }

        @Override
        public void onNext(T t) {
            if (this.fastEnter()) {
                Iterator<UnicastSubject<T>> iterator = this.ws.iterator();
                while (iterator.hasNext()) {
                    iterator.next().onNext(t);
                }
                if (this.leave(-1) == 0) {
                    return;
                }
            } else {
                this.queue.offer(NotificationLite.next(t));
                if (!this.enter()) {
                    return;
                }
            }
            this.drainLoop();
        }

        @Override
        public void onSubscribe(Disposable operatorWindowBoundaryOpenObserver) {
            if (DisposableHelper.validate(this.s, operatorWindowBoundaryOpenObserver)) {
                this.s = operatorWindowBoundaryOpenObserver;
                this.actual.onSubscribe(this);
                if (this.cancelled) {
                    return;
                }
                operatorWindowBoundaryOpenObserver = new OperatorWindowBoundaryOpenObserver(this);
                if (this.boundary.compareAndSet(null, operatorWindowBoundaryOpenObserver)) {
                    this.windows.getAndIncrement();
                    this.open.subscribe(operatorWindowBoundaryOpenObserver);
                }
            }
        }

        void open(B b) {
            this.queue.offer(new WindowOperation(null, b));
            if (this.enter()) {
                this.drainLoop();
            }
        }
    }

    static final class WindowOperation<T, B> {
        final B open;
        final UnicastSubject<T> w;

        WindowOperation(UnicastSubject<T> unicastSubject, B b) {
            this.w = unicastSubject;
            this.open = b;
        }
    }

}

