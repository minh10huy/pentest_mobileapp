/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  org.reactivestreams.Subscriber
 *  org.reactivestreams.Subscription
 */
package io.reactivex.internal.operators.flowable;

import io.reactivex.Flowable;
import io.reactivex.FlowableSubscriber;
import io.reactivex.annotations.Nullable;
import io.reactivex.exceptions.Exceptions;
import io.reactivex.flowables.GroupedFlowable;
import io.reactivex.functions.Function;
import io.reactivex.internal.functions.ObjectHelper;
import io.reactivex.internal.operators.flowable.AbstractFlowableWithUpstream;
import io.reactivex.internal.queue.SpscLinkedArrayQueue;
import io.reactivex.internal.subscriptions.BasicIntQueueSubscription;
import io.reactivex.internal.subscriptions.EmptySubscription;
import io.reactivex.internal.subscriptions.SubscriptionHelper;
import io.reactivex.internal.util.BackpressureHelper;
import io.reactivex.plugins.RxJavaPlugins;
import java.util.Collection;
import java.util.Iterator;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
import java.util.concurrent.atomic.AtomicReference;
import org.reactivestreams.Publisher;
import org.reactivestreams.Subscriber;
import org.reactivestreams.Subscription;

public final class FlowableGroupBy<T, K, V>
extends AbstractFlowableWithUpstream<T, GroupedFlowable<K, V>> {
    final int bufferSize;
    final boolean delayError;
    final Function<? super T, ? extends K> keySelector;
    final Function<? super T, ? extends V> valueSelector;

    public FlowableGroupBy(Flowable<T> flowable, Function<? super T, ? extends K> function, Function<? super T, ? extends V> function2, int n, boolean bl) {
        super(flowable);
        this.keySelector = function;
        this.valueSelector = function2;
        this.bufferSize = n;
        this.delayError = bl;
    }

    @Override
    protected void subscribeActual(Subscriber<? super GroupedFlowable<K, V>> subscriber) {
        this.source.subscribe(new GroupBySubscriber<T, K, V>(subscriber, this.keySelector, this.valueSelector, this.bufferSize, this.delayError));
    }

    public static final class GroupBySubscriber<T, K, V>
    extends BasicIntQueueSubscription<GroupedFlowable<K, V>>
    implements FlowableSubscriber<T> {
        static final Object NULL_KEY = new Object();
        private static final long serialVersionUID = -3688291656102519502L;
        final Subscriber<? super GroupedFlowable<K, V>> actual;
        final int bufferSize;
        final AtomicBoolean cancelled = new AtomicBoolean();
        final boolean delayError;
        volatile boolean done;
        Throwable error;
        final AtomicInteger groupCount = new AtomicInteger(1);
        final Map<Object, GroupedUnicast<K, V>> groups;
        final Function<? super T, ? extends K> keySelector;
        boolean outputFused;
        final SpscLinkedArrayQueue<GroupedFlowable<K, V>> queue;
        final AtomicLong requested = new AtomicLong();
        Subscription s;
        final Function<? super T, ? extends V> valueSelector;

        public GroupBySubscriber(Subscriber<? super GroupedFlowable<K, V>> subscriber, Function<? super T, ? extends K> function, Function<? super T, ? extends V> function2, int n, boolean bl) {
            this.actual = subscriber;
            this.keySelector = function;
            this.valueSelector = function2;
            this.bufferSize = n;
            this.delayError = bl;
            this.groups = new ConcurrentHashMap<Object, GroupedUnicast<K, V>>();
            this.queue = new SpscLinkedArrayQueue(n);
        }

        public void cancel() {
            if (this.cancelled.compareAndSet(false, true) && this.groupCount.decrementAndGet() == 0) {
                this.s.cancel();
            }
        }

        public void cancel(K object) {
            if (object == null) {
                object = NULL_KEY;
            }
            this.groups.remove(object);
            if (this.groupCount.decrementAndGet() == 0) {
                this.s.cancel();
                if (this.getAndIncrement() == 0) {
                    this.queue.clear();
                }
            }
        }

        boolean checkTerminated(boolean bl, boolean bl2, Subscriber<?> subscriber, SpscLinkedArrayQueue<?> object) {
            if (this.cancelled.get()) {
                object.clear();
                return true;
            }
            if (this.delayError) {
                if (bl && bl2) {
                    object = this.error;
                    if (object != null) {
                        subscriber.onError((Throwable)object);
                        return true;
                    }
                    subscriber.onComplete();
                    return true;
                }
            } else if (bl) {
                Throwable throwable = this.error;
                if (throwable != null) {
                    object.clear();
                    subscriber.onError(throwable);
                    return true;
                }
                if (bl2) {
                    subscriber.onComplete();
                    return true;
                }
            }
            return false;
        }

        @Override
        public void clear() {
            this.queue.clear();
        }

        void drain() {
            if (this.getAndIncrement() != 0) {
                return;
            }
            if (this.outputFused) {
                this.drainFused();
                return;
            }
            this.drainNormal();
        }

        void drainFused() {
            int n;
            Object object = this.queue;
            Subscriber<? super GroupedFlowable<K, V>> subscriber = this.actual;
            int n2 = 1;
            do {
                Throwable throwable;
                if (this.cancelled.get()) {
                    object.clear();
                    return;
                }
                boolean bl = this.done;
                if (bl && !this.delayError && (throwable = this.error) != null) {
                    object.clear();
                    subscriber.onError(throwable);
                    return;
                }
                subscriber.onNext(null);
                if (bl) {
                    object = this.error;
                    if (object != null) {
                        subscriber.onError((Throwable)object);
                        return;
                    }
                    subscriber.onComplete();
                    return;
                }
                n2 = n = this.addAndGet(- n2);
            } while (n != 0);
        }

        void drainNormal() {
            int n;
            SpscLinkedArrayQueue<GroupedFlowable<K, V>> spscLinkedArrayQueue = this.queue;
            Subscriber<? super GroupedFlowable<K, V>> subscriber = this.actual;
            int n2 = 1;
            do {
                long l;
                long l2 = this.requested.get();
                for (l = 0L; l != l2; ++l) {
                    boolean bl = this.done;
                    GroupedFlowable<K, V> groupedFlowable = spscLinkedArrayQueue.poll();
                    boolean bl2 = groupedFlowable == null;
                    if (this.checkTerminated(bl, bl2, subscriber, spscLinkedArrayQueue)) {
                        return;
                    }
                    if (bl2) break;
                    subscriber.onNext(groupedFlowable);
                }
                if (l == l2 && this.checkTerminated(this.done, spscLinkedArrayQueue.isEmpty(), subscriber, spscLinkedArrayQueue)) {
                    return;
                }
                if (l != 0L) {
                    if (l2 != Long.MAX_VALUE) {
                        this.requested.addAndGet(- l);
                    }
                    this.s.request(l);
                }
                n2 = n = this.addAndGet(- n2);
            } while (n != 0);
        }

        @Override
        public boolean isEmpty() {
            return this.queue.isEmpty();
        }

        public void onComplete() {
            if (!this.done) {
                Iterator<GroupedUnicast<K, V>> iterator = this.groups.values().iterator();
                while (iterator.hasNext()) {
                    iterator.next().onComplete();
                }
                this.groups.clear();
                this.done = true;
                this.drain();
            }
        }

        public void onError(Throwable throwable) {
            if (this.done) {
                RxJavaPlugins.onError(throwable);
                return;
            }
            Iterator<GroupedUnicast<K, V>> iterator = this.groups.values().iterator();
            while (iterator.hasNext()) {
                iterator.next().onError(throwable);
            }
            this.groups.clear();
            this.error = throwable;
            this.done = true;
            this.drain();
        }

        public void onNext(T object) {
            GroupedUnicast<K, Object> groupedUnicast;
            SpscLinkedArrayQueue<GroupedFlowable<K, V>> spscLinkedArrayQueue;
            boolean bl;
            block6 : {
                K k;
                Object object2;
                block7 : {
                    if (this.done) {
                        return;
                    }
                    spscLinkedArrayQueue = this.queue;
                    try {
                        GroupedUnicast<K, V> groupedUnicast2;
                        k = this.keySelector.apply(object);
                        bl = false;
                        object2 = k != null ? k : NULL_KEY;
                        groupedUnicast = groupedUnicast2 = this.groups.get(object2);
                        if (groupedUnicast2 != null) break block6;
                        if (!this.cancelled.get()) break block7;
                        return;
                    }
                    catch (Throwable throwable) {
                        Exceptions.throwIfFatal(throwable);
                        this.s.cancel();
                        this.onError(throwable);
                        return;
                    }
                }
                groupedUnicast = GroupedUnicast.createWith(k, this.bufferSize, this, this.delayError);
                this.groups.put(object2, groupedUnicast);
                this.groupCount.getAndIncrement();
                bl = true;
            }
            try {
                object = ObjectHelper.requireNonNull(this.valueSelector.apply(object), "The valueSelector returned null");
                groupedUnicast.onNext(object);
                if (bl) {
                    spscLinkedArrayQueue.offer(groupedUnicast);
                    this.drain();
                }
                return;
            }
            catch (Throwable throwable) {
                Exceptions.throwIfFatal(throwable);
                this.s.cancel();
                this.onError(throwable);
                return;
            }
        }

        @Override
        public void onSubscribe(Subscription subscription) {
            if (SubscriptionHelper.validate(this.s, subscription)) {
                this.s = subscription;
                this.actual.onSubscribe((Subscription)this);
                subscription.request((long)this.bufferSize);
            }
        }

        @Nullable
        @Override
        public GroupedFlowable<K, V> poll() {
            return this.queue.poll();
        }

        public void request(long l) {
            if (SubscriptionHelper.validate(l)) {
                BackpressureHelper.add(this.requested, l);
                this.drain();
            }
        }

        @Override
        public int requestFusion(int n) {
            if ((n & 2) != 0) {
                this.outputFused = true;
                return 2;
            }
            return 0;
        }
    }

    static final class GroupedUnicast<K, T>
    extends GroupedFlowable<K, T> {
        final State<T, K> state;

        protected GroupedUnicast(K k, State<T, K> state) {
            super(k);
            this.state = state;
        }

        public static <T, K> GroupedUnicast<K, T> createWith(K k, int n, GroupBySubscriber<?, K, T> groupBySubscriber, boolean bl) {
            return new GroupedUnicast<K, T>(k, new State<T, K>(n, groupBySubscriber, k, bl));
        }

        public void onComplete() {
            this.state.onComplete();
        }

        public void onError(Throwable throwable) {
            this.state.onError(throwable);
        }

        public void onNext(T t) {
            this.state.onNext(t);
        }

        @Override
        protected void subscribeActual(Subscriber<? super T> subscriber) {
            this.state.subscribe(subscriber);
        }
    }

    static final class State<T, K>
    extends BasicIntQueueSubscription<T>
    implements Publisher<T> {
        private static final long serialVersionUID = -3852313036005250360L;
        final AtomicReference<Subscriber<? super T>> actual = new AtomicReference();
        final AtomicBoolean cancelled = new AtomicBoolean();
        final boolean delayError;
        volatile boolean done;
        Throwable error;
        final K key;
        final AtomicBoolean once = new AtomicBoolean();
        boolean outputFused;
        final GroupBySubscriber<?, K, T> parent;
        int produced;
        final SpscLinkedArrayQueue<T> queue;
        final AtomicLong requested = new AtomicLong();

        State(int n, GroupBySubscriber<?, K, T> groupBySubscriber, K k, boolean bl) {
            this.queue = new SpscLinkedArrayQueue(n);
            this.parent = groupBySubscriber;
            this.key = k;
            this.delayError = bl;
        }

        public void cancel() {
            if (this.cancelled.compareAndSet(false, true)) {
                this.parent.cancel(this.key);
            }
        }

        boolean checkTerminated(boolean bl, boolean bl2, Subscriber<? super T> subscriber, boolean bl3) {
            if (this.cancelled.get()) {
                this.queue.clear();
                return true;
            }
            if (bl) {
                if (bl3) {
                    if (bl2) {
                        Throwable throwable = this.error;
                        if (throwable != null) {
                            subscriber.onError(throwable);
                            return true;
                        }
                        subscriber.onComplete();
                        return true;
                    }
                } else {
                    Throwable throwable = this.error;
                    if (throwable != null) {
                        this.queue.clear();
                        subscriber.onError(throwable);
                        return true;
                    }
                    if (bl2) {
                        subscriber.onComplete();
                        return true;
                    }
                }
            }
            return false;
        }

        @Override
        public void clear() {
            this.queue.clear();
        }

        void drain() {
            if (this.getAndIncrement() != 0) {
                return;
            }
            if (this.outputFused) {
                this.drainFused();
                return;
            }
            this.drainNormal();
        }

        void drainFused() {
            Object object = this.queue;
            Subscriber<? super T> subscriber = this.actual.get();
            int n = 1;
            do {
                int n2;
                if (subscriber != null) {
                    Throwable throwable;
                    if (this.cancelled.get()) {
                        object.clear();
                        return;
                    }
                    boolean bl = this.done;
                    if (bl && !this.delayError && (throwable = this.error) != null) {
                        object.clear();
                        subscriber.onError(throwable);
                        return;
                    }
                    subscriber.onNext(null);
                    if (bl) {
                        object = this.error;
                        if (object != null) {
                            subscriber.onError((Throwable)object);
                            return;
                        }
                        subscriber.onComplete();
                        return;
                    }
                }
                if ((n2 = this.addAndGet(- n)) == 0) {
                    return;
                }
                n = n2;
                if (subscriber != null) continue;
                subscriber = this.actual.get();
                n = n2;
            } while (true);
        }

        void drainNormal() {
            SpscLinkedArrayQueue<T> spscLinkedArrayQueue = this.queue;
            boolean bl = this.delayError;
            Subscriber<? super T> subscriber = this.actual.get();
            int n = 1;
            do {
                int n2;
                if (subscriber != null) {
                    long l;
                    long l2 = this.requested.get();
                    for (l = 0L; l != l2; ++l) {
                        boolean bl2 = this.done;
                        T t = spscLinkedArrayQueue.poll();
                        boolean bl3 = t == null;
                        if (this.checkTerminated(bl2, bl3, subscriber, bl)) {
                            return;
                        }
                        if (bl3) break;
                        subscriber.onNext(t);
                    }
                    if (l == l2 && this.checkTerminated(this.done, spscLinkedArrayQueue.isEmpty(), subscriber, bl)) {
                        return;
                    }
                    if (l != 0L) {
                        if (l2 != Long.MAX_VALUE) {
                            this.requested.addAndGet(- l);
                        }
                        this.parent.s.request(l);
                    }
                }
                if ((n2 = this.addAndGet(- n)) == 0) {
                    return;
                }
                n = n2;
                if (subscriber != null) continue;
                subscriber = this.actual.get();
                n = n2;
            } while (true);
        }

        @Override
        public boolean isEmpty() {
            return this.queue.isEmpty();
        }

        public void onComplete() {
            this.done = true;
            this.drain();
        }

        public void onError(Throwable throwable) {
            this.error = throwable;
            this.done = true;
            this.drain();
        }

        public void onNext(T t) {
            this.queue.offer(t);
            this.drain();
        }

        @Nullable
        @Override
        public T poll() {
            T t = this.queue.poll();
            if (t != null) {
                ++this.produced;
                return t;
            }
            int n = this.produced;
            if (n != 0) {
                this.produced = 0;
                this.parent.s.request((long)n);
            }
            return null;
        }

        public void request(long l) {
            if (SubscriptionHelper.validate(l)) {
                BackpressureHelper.add(this.requested, l);
                this.drain();
            }
        }

        @Override
        public int requestFusion(int n) {
            if ((n & 2) != 0) {
                this.outputFused = true;
                return 2;
            }
            return 0;
        }

        @Override
        public void subscribe(Subscriber<? super T> subscriber) {
            if (this.once.compareAndSet(false, true)) {
                subscriber.onSubscribe((Subscription)this);
                this.actual.lazySet(subscriber);
                this.drain();
                return;
            }
            EmptySubscription.error(new IllegalStateException("Only one Subscriber allowed!"), subscriber);
        }
    }

}

