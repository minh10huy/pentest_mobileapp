/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  org.reactivestreams.Subscriber
 *  org.reactivestreams.Subscription
 */
package io.reactivex.internal.operators.maybe;

import io.reactivex.Flowable;
import io.reactivex.MaybeObserver;
import io.reactivex.MaybeSource;
import io.reactivex.disposables.Disposable;
import io.reactivex.exceptions.Exceptions;
import io.reactivex.internal.disposables.SequentialDisposable;
import io.reactivex.internal.functions.ObjectHelper;
import io.reactivex.internal.subscriptions.EmptySubscription;
import io.reactivex.internal.subscriptions.SubscriptionHelper;
import io.reactivex.internal.util.BackpressureHelper;
import io.reactivex.internal.util.NotificationLite;
import java.util.Iterator;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
import java.util.concurrent.atomic.AtomicReference;
import org.reactivestreams.Subscriber;
import org.reactivestreams.Subscription;

public final class MaybeConcatIterable<T>
extends Flowable<T> {
    final Iterable<? extends MaybeSource<? extends T>> sources;

    public MaybeConcatIterable(Iterable<? extends MaybeSource<? extends T>> iterable) {
        this.sources = iterable;
    }

    @Override
    protected void subscribeActual(Subscriber<? super T> subscriber) {
        Object object;
        try {
            object = ObjectHelper.requireNonNull(this.sources.iterator(), "The sources Iterable returned a null Iterator");
            object = new ConcatMaybeObserver<T>(subscriber, (Iterator<MaybeSource<? super T>>)object);
        }
        catch (Throwable throwable) {
            Exceptions.throwIfFatal(throwable);
            EmptySubscription.error(throwable, subscriber);
            return;
        }
        subscriber.onSubscribe((Subscription)object);
        object.drain();
    }

    static final class ConcatMaybeObserver<T>
    extends AtomicInteger
    implements MaybeObserver<T>,
    Subscription {
        private static final long serialVersionUID = 3520831347801429610L;
        final Subscriber<? super T> actual;
        final AtomicReference<Object> current;
        final SequentialDisposable disposables;
        long produced;
        final AtomicLong requested;
        final Iterator<? extends MaybeSource<? extends T>> sources;

        ConcatMaybeObserver(Subscriber<? super T> subscriber, Iterator<? extends MaybeSource<? extends T>> iterator) {
            this.actual = subscriber;
            this.sources = iterator;
            this.requested = new AtomicLong();
            this.disposables = new SequentialDisposable();
            this.current = new AtomicReference<NotificationLite>(NotificationLite.COMPLETE);
        }

        public void cancel() {
            this.disposables.dispose();
        }

        void drain() {
            if (this.getAndIncrement() != 0) {
                return;
            }
            AtomicReference<Object> atomicReference = this.current;
            Subscriber<? super T> subscriber = this.actual;
            SequentialDisposable sequentialDisposable = this.disposables;
            do {
                block11 : {
                    if (sequentialDisposable.isDisposed()) {
                        atomicReference.lazySet(null);
                        return;
                    }
                    MaybeSource<T> maybeSource = atomicReference.get();
                    if (maybeSource == null) continue;
                    NotificationLite notificationLite = NotificationLite.COMPLETE;
                    boolean bl = true;
                    if (maybeSource != notificationLite) {
                        long l = this.produced;
                        if (l != this.requested.get()) {
                            this.produced = l + 1L;
                            atomicReference.lazySet(null);
                            subscriber.onNext((Object)maybeSource);
                        } else {
                            bl = false;
                        }
                    } else {
                        atomicReference.lazySet(null);
                    }
                    if (!bl || sequentialDisposable.isDisposed()) continue;
                    try {
                        boolean bl2 = this.sources.hasNext();
                        if (!bl2) break block11;
                    }
                    catch (Throwable throwable) {
                        Exceptions.throwIfFatal(throwable);
                        subscriber.onError(throwable);
                        return;
                    }
                    try {
                        maybeSource = ObjectHelper.requireNonNull(this.sources.next(), "The source Iterator returned a null MaybeSource");
                        maybeSource.subscribe(this);
                    }
                    catch (Throwable throwable) {
                        Exceptions.throwIfFatal(throwable);
                        subscriber.onError(throwable);
                        return;
                    }
                }
                subscriber.onComplete();
            } while (this.decrementAndGet() != 0);
        }

        @Override
        public void onComplete() {
            this.current.lazySet((Object)NotificationLite.COMPLETE);
            this.drain();
        }

        @Override
        public void onError(Throwable throwable) {
            this.actual.onError(throwable);
        }

        @Override
        public void onSubscribe(Disposable disposable) {
            this.disposables.replace(disposable);
        }

        @Override
        public void onSuccess(T t) {
            this.current.lazySet(t);
            this.drain();
        }

        public void request(long l) {
            if (SubscriptionHelper.validate(l)) {
                BackpressureHelper.add(this.requested, l);
                this.drain();
            }
        }
    }

}

