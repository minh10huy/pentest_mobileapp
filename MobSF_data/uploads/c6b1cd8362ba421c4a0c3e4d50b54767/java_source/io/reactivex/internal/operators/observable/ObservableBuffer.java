/*
 * Decompiled with CFR 0_132.
 */
package io.reactivex.internal.operators.observable;

import io.reactivex.ObservableSource;
import io.reactivex.Observer;
import io.reactivex.disposables.Disposable;
import io.reactivex.exceptions.Exceptions;
import io.reactivex.internal.disposables.DisposableHelper;
import io.reactivex.internal.disposables.EmptyDisposable;
import io.reactivex.internal.functions.ObjectHelper;
import io.reactivex.internal.operators.observable.AbstractObservableWithUpstream;
import java.util.ArrayDeque;
import java.util.Collection;
import java.util.Iterator;
import java.util.concurrent.Callable;
import java.util.concurrent.atomic.AtomicBoolean;

public final class ObservableBuffer<T, U extends Collection<? super T>>
extends AbstractObservableWithUpstream<T, U> {
    final Callable<U> bufferSupplier;
    final int count;
    final int skip;

    public ObservableBuffer(ObservableSource<T> observableSource, int n, int n2, Callable<U> callable) {
        super(observableSource);
        this.count = n;
        this.skip = n2;
        this.bufferSupplier = callable;
    }

    @Override
    protected void subscribeActual(Observer<? super U> observer) {
        if (this.skip == this.count) {
            if ((observer = new BufferExactObserver<U, U>(observer, this.count, this.bufferSupplier)).createBuffer()) {
                this.source.subscribe(observer);
                return;
            }
        } else {
            this.source.subscribe(new BufferSkipObserver(observer, this.count, this.skip, this.bufferSupplier));
        }
    }

    static final class BufferExactObserver<T, U extends Collection<? super T>>
    implements Observer<T>,
    Disposable {
        final Observer<? super U> actual;
        U buffer;
        final Callable<U> bufferSupplier;
        final int count;
        Disposable s;
        int size;

        BufferExactObserver(Observer<? super U> observer, int n, Callable<U> callable) {
            this.actual = observer;
            this.count = n;
            this.bufferSupplier = callable;
        }

        boolean createBuffer() {
            try {
                Collection collection = (Collection)ObjectHelper.requireNonNull(this.bufferSupplier.call(), "Empty buffer supplied");
                this.buffer = collection;
                return true;
            }
            catch (Throwable throwable) {
                Exceptions.throwIfFatal(throwable);
                this.buffer = null;
                if (this.s == null) {
                    EmptyDisposable.error(throwable, this.actual);
                } else {
                    this.s.dispose();
                    this.actual.onError(throwable);
                }
                return false;
            }
        }

        @Override
        public void dispose() {
            this.s.dispose();
        }

        @Override
        public boolean isDisposed() {
            return this.s.isDisposed();
        }

        @Override
        public void onComplete() {
            U u = this.buffer;
            this.buffer = null;
            if (u != null && !u.isEmpty()) {
                this.actual.onNext(u);
            }
            this.actual.onComplete();
        }

        @Override
        public void onError(Throwable throwable) {
            this.buffer = null;
            this.actual.onError(throwable);
        }

        @Override
        public void onNext(T t) {
            U u = this.buffer;
            if (u != null) {
                int n;
                u.add(t);
                this.size = n = this.size + 1;
                if (n >= this.count) {
                    this.actual.onNext(u);
                    this.size = 0;
                    this.createBuffer();
                }
            }
        }

        @Override
        public void onSubscribe(Disposable disposable) {
            if (DisposableHelper.validate(this.s, disposable)) {
                this.s = disposable;
                this.actual.onSubscribe(this);
            }
        }
    }

    static final class BufferSkipObserver<T, U extends Collection<? super T>>
    extends AtomicBoolean
    implements Observer<T>,
    Disposable {
        private static final long serialVersionUID = -8223395059921494546L;
        final Observer<? super U> actual;
        final Callable<U> bufferSupplier;
        final ArrayDeque<U> buffers;
        final int count;
        long index;
        Disposable s;
        final int skip;

        BufferSkipObserver(Observer<? super U> observer, int n, int n2, Callable<U> callable) {
            this.actual = observer;
            this.count = n;
            this.skip = n2;
            this.bufferSupplier = callable;
            this.buffers = new ArrayDeque();
        }

        @Override
        public void dispose() {
            this.s.dispose();
        }

        @Override
        public boolean isDisposed() {
            return this.s.isDisposed();
        }

        @Override
        public void onComplete() {
            while (!this.buffers.isEmpty()) {
                this.actual.onNext(this.buffers.poll());
            }
            this.actual.onComplete();
        }

        @Override
        public void onError(Throwable throwable) {
            this.buffers.clear();
            this.actual.onError(throwable);
        }

        @Override
        public void onNext(T t) {
            Object object;
            long l = this.index;
            this.index = l + 1L;
            if (l % (long)this.skip == 0L) {
                try {
                    object = (Collection)ObjectHelper.requireNonNull(this.bufferSupplier.call(), "The bufferSupplier returned a null collection. Null values are generally not allowed in 2.x operators and sources.");
                    this.buffers.offer(object);
                }
                catch (Throwable throwable) {
                    this.buffers.clear();
                    this.s.dispose();
                    this.actual.onError(throwable);
                    return;
                }
            }
            object = this.buffers.iterator();
            while (object.hasNext()) {
                Collection collection = (Collection)object.next();
                collection.add(t);
                if (this.count > collection.size()) continue;
                object.remove();
                this.actual.onNext(collection);
            }
        }

        @Override
        public void onSubscribe(Disposable disposable) {
            if (DisposableHelper.validate(this.s, disposable)) {
                this.s = disposable;
                this.actual.onSubscribe(this);
            }
        }
    }

}

