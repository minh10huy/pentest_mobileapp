/*
 * Decompiled with CFR 0_132.
 */
package io.reactivex.internal.operators.observable;

import io.reactivex.Observable;
import io.reactivex.ObservableSource;
import io.reactivex.Observer;
import io.reactivex.disposables.Disposable;
import io.reactivex.functions.Function;
import io.reactivex.internal.disposables.DisposableHelper;
import io.reactivex.internal.disposables.EmptyDisposable;
import io.reactivex.internal.queue.SpscLinkedArrayQueue;
import io.reactivex.internal.util.AtomicThrowable;
import io.reactivex.plugins.RxJavaPlugins;
import java.util.Iterator;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicReference;

public final class ObservableCombineLatest<T, R>
extends Observable<R> {
    final int bufferSize;
    final Function<? super Object[], ? extends R> combiner;
    final boolean delayError;
    final ObservableSource<? extends T>[] sources;
    final Iterable<? extends ObservableSource<? extends T>> sourcesIterable;

    public ObservableCombineLatest(ObservableSource<? extends T>[] arrobservableSource, Iterable<? extends ObservableSource<? extends T>> iterable, Function<? super Object[], ? extends R> function, int n, boolean bl) {
        this.sources = arrobservableSource;
        this.sourcesIterable = iterable;
        this.combiner = function;
        this.bufferSize = n;
        this.delayError = bl;
    }

    @Override
    public void subscribeActual(Observer<? super R> observer) {
        int n;
        ObservableSource<? extends T>[] arrobservableSource = this.sources;
        if (arrobservableSource == null) {
            arrobservableSource = new Observable[8];
            Iterator<ObservableSource<T>> iterator = this.sourcesIterable.iterator();
            n = 0;
            while (iterator.hasNext()) {
                ObservableSource<? extends T> observableSource = iterator.next();
                ObservableSource<? extends T>[] arrobservableSource2 = arrobservableSource;
                if (n == arrobservableSource.length) {
                    arrobservableSource2 = new ObservableSource[(n >> 2) + n];
                    System.arraycopy(arrobservableSource, 0, arrobservableSource2, 0, n);
                }
                arrobservableSource2[n] = observableSource;
                ++n;
                arrobservableSource = arrobservableSource2;
            }
        } else {
            n = arrobservableSource.length;
        }
        if (n == 0) {
            EmptyDisposable.complete(observer);
            return;
        }
        new LatestCoordinator<T, R>(observer, this.combiner, n, this.bufferSize, this.delayError).subscribe(arrobservableSource);
    }

    static final class CombinerObserver<T, R>
    extends AtomicReference<Disposable>
    implements Observer<T> {
        private static final long serialVersionUID = -4823716997131257941L;
        final int index;
        final LatestCoordinator<T, R> parent;

        CombinerObserver(LatestCoordinator<T, R> latestCoordinator, int n) {
            this.parent = latestCoordinator;
            this.index = n;
        }

        public void dispose() {
            DisposableHelper.dispose(this);
        }

        @Override
        public void onComplete() {
            this.parent.innerComplete(this.index);
        }

        @Override
        public void onError(Throwable throwable) {
            this.parent.innerError(this.index, throwable);
        }

        @Override
        public void onNext(T t) {
            this.parent.innerNext(this.index, t);
        }

        @Override
        public void onSubscribe(Disposable disposable) {
            DisposableHelper.setOnce(this, disposable);
        }
    }

    static final class LatestCoordinator<T, R>
    extends AtomicInteger
    implements Disposable {
        private static final long serialVersionUID = 8567835998786448817L;
        int active;
        final Observer<? super R> actual;
        volatile boolean cancelled;
        final Function<? super Object[], ? extends R> combiner;
        int complete;
        final boolean delayError;
        volatile boolean done;
        final AtomicThrowable errors = new AtomicThrowable();
        Object[] latest;
        final CombinerObserver<T, R>[] observers;
        final SpscLinkedArrayQueue<Object[]> queue;

        LatestCoordinator(Observer<? super R> arrcombinerObserver, Function<? super Object[], ? extends R> function, int n, int n2, boolean bl) {
            this.actual = arrcombinerObserver;
            this.combiner = function;
            this.delayError = bl;
            this.latest = new Object[n];
            arrcombinerObserver = new CombinerObserver[n];
            for (int i = 0; i < n; ++i) {
                arrcombinerObserver[i] = new CombinerObserver(this, i);
            }
            this.observers = arrcombinerObserver;
            this.queue = new SpscLinkedArrayQueue(n2);
        }

        void cancelSources() {
            CombinerObserver<T, R>[] arrcombinerObserver = this.observers;
            int n = arrcombinerObserver.length;
            for (int i = 0; i < n; ++i) {
                arrcombinerObserver[i].dispose();
            }
        }

        /*
         * Enabled aggressive block sorting
         * Enabled unnecessary exception pruning
         * Enabled aggressive exception aggregation
         */
        void clear(SpscLinkedArrayQueue<?> spscLinkedArrayQueue) {
            synchronized (this) {
                this.latest = null;
            }
            spscLinkedArrayQueue.clear();
        }

        @Override
        public void dispose() {
            if (!this.cancelled) {
                this.cancelled = true;
                this.cancelSources();
                if (this.getAndIncrement() == 0) {
                    this.clear(this.queue);
                }
            }
        }

        /*
         * Exception decompiling
         */
        void drain() {
            // This method has failed to decompile.  When submitting a bug report, please provide this stack trace, and (if you hold appropriate legal rights) the relevant class file.
            // org.benf.cfr.reader.util.ConfusedCFRException: Tried to end blocks [2[UNCONDITIONALDOLOOP]], but top level block is 1[CATCHBLOCK]
            // org.benf.cfr.reader.bytecode.analysis.opgraph.Op04StructuredStatement.processEndingBlocks(Op04StructuredStatement.java:416)
            // org.benf.cfr.reader.bytecode.analysis.opgraph.Op04StructuredStatement.buildNestedBlocks(Op04StructuredStatement.java:468)
            // org.benf.cfr.reader.bytecode.analysis.opgraph.Op03SimpleStatement.createInitialStructuredBlock(Op03SimpleStatement.java:2960)
            // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisInner(CodeAnalyser.java:818)
            // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisOrWrapFail(CodeAnalyser.java:196)
            // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysis(CodeAnalyser.java:141)
            // org.benf.cfr.reader.entities.attributes.AttributeCode.analyse(AttributeCode.java:95)
            // org.benf.cfr.reader.entities.Method.analyse(Method.java:372)
            // org.benf.cfr.reader.entities.ClassFile.analyseMid(ClassFile.java:867)
            // org.benf.cfr.reader.entities.ClassFile.analyseInnerClassesPass1(ClassFile.java:749)
            // org.benf.cfr.reader.entities.ClassFile.analyseMid(ClassFile.java:847)
            // org.benf.cfr.reader.entities.ClassFile.analyseTop(ClassFile.java:768)
            // org.benf.cfr.reader.Main.doJar(Main.java:141)
            // org.benf.cfr.reader.Main.main(Main.java:242)
            throw new IllegalStateException("Decompilation failed");
        }

        /*
         * Enabled aggressive block sorting
         * Enabled unnecessary exception pruning
         * Enabled aggressive exception aggregation
         * Converted monitor instructions to comments
         * Lifted jumps to return sites
         */
        void innerComplete(int n) {
            block9 : {
                block8 : {
                    int n2;
                    // MONITORENTER : this
                    Object[] arrobject = this.latest;
                    if (arrobject == null) {
                        // MONITOREXIT : this
                        return;
                    }
                    n = arrobject[n] == null ? 1 : 0;
                    if (n != 0) break block8;
                    this.complete = n2 = this.complete + 1;
                    if (n2 != arrobject.length) break block9;
                }
                this.done = true;
            }
            // MONITOREXIT : this
            if (n != 0) {
                this.cancelSources();
            }
            this.drain();
        }

        /*
         * Enabled aggressive block sorting
         * Enabled unnecessary exception pruning
         * Enabled aggressive exception aggregation
         */
        void innerError(int n, Throwable arrobject) {
            block10 : {
                block9 : {
                    if (!this.errors.addThrowable((Throwable)arrobject)) {
                        RxJavaPlugins.onError((Throwable)arrobject);
                        return;
                    }
                    if (this.delayError) break block9;
                    n = 1;
                    break block10;
                }
                synchronized (this) {
                    block11 : {
                        int n2;
                        arrobject = this.latest;
                        if (arrobject == null) {
                            return;
                        }
                        n = arrobject[n] == null ? 1 : 0;
                        if (n != 0) break block11;
                        this.complete = n2 = this.complete + 1;
                        if (n2 != arrobject.length) break block10;
                    }
                    this.done = true;
                }
            }
            if (n != 0) {
                this.cancelSources();
            }
            this.drain();
        }

        /*
         * Enabled aggressive block sorting
         * Enabled unnecessary exception pruning
         * Enabled aggressive exception aggregation
         * Converted monitor instructions to comments
         * Lifted jumps to return sites
         */
        void innerNext(int n, T t) {
            int n2;
            // MONITORENTER : this
            Object[] arrobject = this.latest;
            if (arrobject == null) {
                // MONITOREXIT : this
                return;
            }
            Object object = arrobject[n];
            int n3 = n2 = this.active;
            if (object == null) {
                this.active = n3 = n2 + 1;
            }
            arrobject[n] = t;
            if (n3 == arrobject.length) {
                this.queue.offer((Object[])arrobject.clone());
                n = 1;
            } else {
                n = 0;
            }
            // MONITOREXIT : this
            if (n == 0) return;
            this.drain();
        }

        @Override
        public boolean isDisposed() {
            return this.cancelled;
        }

        public void subscribe(ObservableSource<? extends T>[] arrobservableSource) {
            CombinerObserver<T, R>[] arrcombinerObserver = this.observers;
            int n = arrcombinerObserver.length;
            this.actual.onSubscribe(this);
            for (int i = 0; i < n; ++i) {
                if (!this.done) {
                    if (this.cancelled) {
                        return;
                    }
                    arrobservableSource[i].subscribe(arrcombinerObserver[i]);
                    continue;
                }
                return;
            }
        }
    }

}

