/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  org.reactivestreams.Subscriber
 *  org.reactivestreams.Subscription
 */
package io.reactivex.internal.operators.flowable;

import io.reactivex.Flowable;
import io.reactivex.FlowableSubscriber;
import io.reactivex.Scheduler;
import io.reactivex.annotations.Nullable;
import io.reactivex.disposables.Disposable;
import io.reactivex.exceptions.Exceptions;
import io.reactivex.exceptions.MissingBackpressureException;
import io.reactivex.internal.fuseable.ConditionalSubscriber;
import io.reactivex.internal.fuseable.QueueSubscription;
import io.reactivex.internal.fuseable.SimpleQueue;
import io.reactivex.internal.operators.flowable.AbstractFlowableWithUpstream;
import io.reactivex.internal.queue.SpscArrayQueue;
import io.reactivex.internal.subscriptions.BasicIntQueueSubscription;
import io.reactivex.internal.subscriptions.SubscriptionHelper;
import io.reactivex.internal.util.BackpressureHelper;
import io.reactivex.plugins.RxJavaPlugins;
import java.util.concurrent.atomic.AtomicLong;
import org.reactivestreams.Subscriber;
import org.reactivestreams.Subscription;

public final class FlowableObserveOn<T>
extends AbstractFlowableWithUpstream<T, T> {
    final boolean delayError;
    final int prefetch;
    final Scheduler scheduler;

    public FlowableObserveOn(Flowable<T> flowable, Scheduler scheduler, boolean bl, int n) {
        super(flowable);
        this.scheduler = scheduler;
        this.delayError = bl;
        this.prefetch = n;
    }

    @Override
    public void subscribeActual(Subscriber<? super T> subscriber) {
        Scheduler.Worker worker = this.scheduler.createWorker();
        if (subscriber instanceof ConditionalSubscriber) {
            this.source.subscribe(new ObserveOnConditionalSubscriber((ConditionalSubscriber)subscriber, worker, this.delayError, this.prefetch));
            return;
        }
        this.source.subscribe(new ObserveOnSubscriber<T>(subscriber, worker, this.delayError, this.prefetch));
    }

    static abstract class BaseObserveOnSubscriber<T>
    extends BasicIntQueueSubscription<T>
    implements FlowableSubscriber<T>,
    Runnable {
        private static final long serialVersionUID = -8241002408341274697L;
        volatile boolean cancelled;
        final boolean delayError;
        volatile boolean done;
        Throwable error;
        final int limit;
        boolean outputFused;
        final int prefetch;
        long produced;
        SimpleQueue<T> queue;
        final AtomicLong requested;
        Subscription s;
        int sourceMode;
        final Scheduler.Worker worker;

        BaseObserveOnSubscriber(Scheduler.Worker worker, boolean bl, int n) {
            this.worker = worker;
            this.delayError = bl;
            this.prefetch = n;
            this.requested = new AtomicLong();
            this.limit = n - (n >> 2);
        }

        public final void cancel() {
            if (this.cancelled) {
                return;
            }
            this.cancelled = true;
            this.s.cancel();
            this.worker.dispose();
            if (this.getAndIncrement() == 0) {
                this.queue.clear();
            }
        }

        final boolean checkTerminated(boolean bl, boolean bl2, Subscriber<?> subscriber) {
            if (this.cancelled) {
                this.clear();
                return true;
            }
            if (bl) {
                if (this.delayError) {
                    if (bl2) {
                        Throwable throwable = this.error;
                        if (throwable != null) {
                            subscriber.onError(throwable);
                        } else {
                            subscriber.onComplete();
                        }
                        this.worker.dispose();
                        return true;
                    }
                } else {
                    Throwable throwable = this.error;
                    if (throwable != null) {
                        this.clear();
                        subscriber.onError(throwable);
                        this.worker.dispose();
                        return true;
                    }
                    if (bl2) {
                        subscriber.onComplete();
                        this.worker.dispose();
                        return true;
                    }
                }
            }
            return false;
        }

        @Override
        public final void clear() {
            this.queue.clear();
        }

        @Override
        public final boolean isEmpty() {
            return this.queue.isEmpty();
        }

        public final void onComplete() {
            if (!this.done) {
                this.done = true;
                this.trySchedule();
            }
        }

        public final void onError(Throwable throwable) {
            if (this.done) {
                RxJavaPlugins.onError(throwable);
                return;
            }
            this.error = throwable;
            this.done = true;
            this.trySchedule();
        }

        public final void onNext(T t) {
            if (this.done) {
                return;
            }
            if (this.sourceMode == 2) {
                this.trySchedule();
                return;
            }
            if (!this.queue.offer(t)) {
                this.s.cancel();
                this.error = new MissingBackpressureException("Queue is full?!");
                this.done = true;
            }
            this.trySchedule();
        }

        public final void request(long l) {
            if (SubscriptionHelper.validate(l)) {
                BackpressureHelper.add(this.requested, l);
                this.trySchedule();
            }
        }

        @Override
        public final int requestFusion(int n) {
            if ((n & 2) != 0) {
                this.outputFused = true;
                return 2;
            }
            return 0;
        }

        @Override
        public final void run() {
            if (this.outputFused) {
                this.runBackfused();
                return;
            }
            if (this.sourceMode == 1) {
                this.runSync();
                return;
            }
            this.runAsync();
        }

        abstract void runAsync();

        abstract void runBackfused();

        abstract void runSync();

        final void trySchedule() {
            if (this.getAndIncrement() != 0) {
                return;
            }
            this.worker.schedule(this);
        }
    }

    static final class ObserveOnConditionalSubscriber<T>
    extends BaseObserveOnSubscriber<T> {
        private static final long serialVersionUID = 644624475404284533L;
        final ConditionalSubscriber<? super T> actual;
        long consumed;

        ObserveOnConditionalSubscriber(ConditionalSubscriber<? super T> conditionalSubscriber, Scheduler.Worker worker, boolean bl, int n) {
            super(worker, bl, n);
            this.actual = conditionalSubscriber;
        }

        @Override
        public void onSubscribe(Subscription subscription) {
            if (SubscriptionHelper.validate(this.s, subscription)) {
                this.s = subscription;
                if (subscription instanceof QueueSubscription) {
                    QueueSubscription queueSubscription = (QueueSubscription)subscription;
                    int n = queueSubscription.requestFusion(7);
                    if (n == 1) {
                        this.sourceMode = 1;
                        this.queue = queueSubscription;
                        this.done = true;
                        this.actual.onSubscribe(this);
                        return;
                    }
                    if (n == 2) {
                        this.sourceMode = 2;
                        this.queue = queueSubscription;
                        this.actual.onSubscribe(this);
                        subscription.request((long)this.prefetch);
                        return;
                    }
                }
                this.queue = new SpscArrayQueue(this.prefetch);
                this.actual.onSubscribe(this);
                subscription.request((long)this.prefetch);
            }
        }

        @Nullable
        @Override
        public T poll() throws Exception {
            Object t = this.queue.poll();
            if (t != null && this.sourceMode != 1) {
                long l = this.consumed + 1L;
                if (l == (long)this.limit) {
                    this.consumed = 0L;
                    this.s.request(l);
                    return t;
                }
                this.consumed = l;
            }
            return t;
        }

        @Override
        void runAsync() {
            ConditionalSubscriber<? super T> conditionalSubscriber = this.actual;
            SimpleQueue simpleQueue = this.queue;
            long l = this.produced;
            long l2 = this.consumed;
            int n = 1;
            do {
                long l3 = this.requested.get();
                while (l != l3) {
                    boolean bl;
                    Object t;
                    boolean bl2 = this.done;
                    try {
                        t = simpleQueue.poll();
                        bl = t == null;
                    }
                    catch (Throwable throwable) {
                        Exceptions.throwIfFatal(throwable);
                        this.s.cancel();
                        simpleQueue.clear();
                        conditionalSubscriber.onError(throwable);
                        this.worker.dispose();
                        return;
                    }
                    if (this.checkTerminated(bl2, bl, conditionalSubscriber)) {
                        return;
                    }
                    if (bl) break;
                    long l4 = l;
                    if (conditionalSubscriber.tryOnNext((T)t)) {
                        l4 = l + 1L;
                    }
                    if (++l2 == (long)this.limit) {
                        this.s.request(l2);
                        l2 = 0L;
                        l = l4;
                        continue;
                    }
                    l = l4;
                }
                if (l == l3 && this.checkTerminated(this.done, simpleQueue.isEmpty(), conditionalSubscriber)) {
                    return;
                }
                int n2 = this.get();
                if (n == n2) {
                    this.produced = l;
                    this.consumed = l2;
                    n = n2 = this.addAndGet(- n);
                    if (n2 != 0) continue;
                    return;
                }
                n = n2;
            } while (true);
        }

        @Override
        void runBackfused() {
            int n;
            int n2 = 1;
            do {
                if (this.cancelled) {
                    return;
                }
                boolean bl = this.done;
                this.actual.onNext(null);
                if (bl) {
                    Throwable throwable = this.error;
                    if (throwable != null) {
                        this.actual.onError(throwable);
                    } else {
                        this.actual.onComplete();
                    }
                    this.worker.dispose();
                    return;
                }
                n2 = n = this.addAndGet(- n2);
            } while (n != 0);
        }

        @Override
        void runSync() {
            ConditionalSubscriber<? super T> conditionalSubscriber = this.actual;
            SimpleQueue simpleQueue = this.queue;
            long l = this.produced;
            int n = 1;
            do {
                long l2 = this.requested.get();
                while (l != l2) {
                    Object t;
                    block8 : {
                        try {
                            t = simpleQueue.poll();
                            if (this.cancelled) {
                                return;
                            }
                            if (t != null) break block8;
                        }
                        catch (Throwable throwable) {
                            Exceptions.throwIfFatal(throwable);
                            this.s.cancel();
                            conditionalSubscriber.onError(throwable);
                            this.worker.dispose();
                            return;
                        }
                        conditionalSubscriber.onComplete();
                        this.worker.dispose();
                        return;
                    }
                    if (!conditionalSubscriber.tryOnNext((T)t)) continue;
                    ++l;
                }
                if (this.cancelled) {
                    return;
                }
                if (simpleQueue.isEmpty()) {
                    conditionalSubscriber.onComplete();
                    this.worker.dispose();
                    return;
                }
                int n2 = this.get();
                if (n == n2) {
                    this.produced = l;
                    n = n2 = this.addAndGet(- n);
                    if (n2 != 0) continue;
                    return;
                }
                n = n2;
            } while (true);
        }
    }

    static final class ObserveOnSubscriber<T>
    extends BaseObserveOnSubscriber<T>
    implements FlowableSubscriber<T> {
        private static final long serialVersionUID = -4547113800637756442L;
        final Subscriber<? super T> actual;

        ObserveOnSubscriber(Subscriber<? super T> subscriber, Scheduler.Worker worker, boolean bl, int n) {
            super(worker, bl, n);
            this.actual = subscriber;
        }

        @Override
        public void onSubscribe(Subscription subscription) {
            if (SubscriptionHelper.validate(this.s, subscription)) {
                this.s = subscription;
                if (subscription instanceof QueueSubscription) {
                    QueueSubscription queueSubscription = (QueueSubscription)subscription;
                    int n = queueSubscription.requestFusion(7);
                    if (n == 1) {
                        this.sourceMode = 1;
                        this.queue = queueSubscription;
                        this.done = true;
                        this.actual.onSubscribe((Subscription)this);
                        return;
                    }
                    if (n == 2) {
                        this.sourceMode = 2;
                        this.queue = queueSubscription;
                        this.actual.onSubscribe((Subscription)this);
                        subscription.request((long)this.prefetch);
                        return;
                    }
                }
                this.queue = new SpscArrayQueue(this.prefetch);
                this.actual.onSubscribe((Subscription)this);
                subscription.request((long)this.prefetch);
            }
        }

        @Nullable
        @Override
        public T poll() throws Exception {
            Object t = this.queue.poll();
            if (t != null && this.sourceMode != 1) {
                long l = this.produced + 1L;
                if (l == (long)this.limit) {
                    this.produced = 0L;
                    this.s.request(l);
                    return t;
                }
                this.produced = l;
            }
            return t;
        }

        @Override
        void runAsync() {
            Subscriber<? super T> subscriber = this.actual;
            SimpleQueue simpleQueue = this.queue;
            long l = this.produced;
            int n = 1;
            do {
                long l2 = this.requested.get();
                while (l != l2) {
                    boolean bl;
                    Object t;
                    boolean bl2 = this.done;
                    try {
                        t = simpleQueue.poll();
                        bl = t == null;
                    }
                    catch (Throwable throwable) {
                        Exceptions.throwIfFatal(throwable);
                        this.s.cancel();
                        simpleQueue.clear();
                        subscriber.onError(throwable);
                        this.worker.dispose();
                        return;
                    }
                    if (this.checkTerminated(bl2, bl, subscriber)) {
                        return;
                    }
                    if (bl) break;
                    subscriber.onNext(t);
                    if (++l != (long)this.limit) continue;
                    long l3 = l2;
                    if (l2 != Long.MAX_VALUE) {
                        l3 = this.requested.addAndGet(- l);
                    }
                    this.s.request(l);
                    l = 0L;
                    l2 = l3;
                }
                if (l == l2 && this.checkTerminated(this.done, simpleQueue.isEmpty(), subscriber)) {
                    return;
                }
                int n2 = this.get();
                if (n == n2) {
                    this.produced = l;
                    n = n2 = this.addAndGet(- n);
                    if (n2 != 0) continue;
                    return;
                }
                n = n2;
            } while (true);
        }

        @Override
        void runBackfused() {
            int n;
            int n2 = 1;
            do {
                if (this.cancelled) {
                    return;
                }
                boolean bl = this.done;
                this.actual.onNext(null);
                if (bl) {
                    Throwable throwable = this.error;
                    if (throwable != null) {
                        this.actual.onError(throwable);
                    } else {
                        this.actual.onComplete();
                    }
                    this.worker.dispose();
                    return;
                }
                n2 = n = this.addAndGet(- n2);
            } while (n != 0);
        }

        @Override
        void runSync() {
            Subscriber<? super T> subscriber = this.actual;
            SimpleQueue simpleQueue = this.queue;
            long l = this.produced;
            int n = 1;
            do {
                long l2 = this.requested.get();
                while (l != l2) {
                    Object t;
                    block8 : {
                        try {
                            t = simpleQueue.poll();
                            if (this.cancelled) {
                                return;
                            }
                            if (t != null) break block8;
                        }
                        catch (Throwable throwable) {
                            Exceptions.throwIfFatal(throwable);
                            this.s.cancel();
                            subscriber.onError(throwable);
                            this.worker.dispose();
                            return;
                        }
                        subscriber.onComplete();
                        this.worker.dispose();
                        return;
                    }
                    subscriber.onNext(t);
                    ++l;
                }
                if (this.cancelled) {
                    return;
                }
                if (simpleQueue.isEmpty()) {
                    subscriber.onComplete();
                    this.worker.dispose();
                    return;
                }
                int n2 = this.get();
                if (n == n2) {
                    this.produced = l;
                    n = n2 = this.addAndGet(- n);
                    if (n2 != 0) continue;
                    return;
                }
                n = n2;
            } while (true);
        }
    }

}

