/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  org.reactivestreams.Subscriber
 *  org.reactivestreams.Subscription
 */
package io.reactivex.internal.operators.maybe;

import io.reactivex.Flowable;
import io.reactivex.MaybeObserver;
import io.reactivex.MaybeSource;
import io.reactivex.disposables.Disposable;
import io.reactivex.internal.disposables.SequentialDisposable;
import io.reactivex.internal.subscriptions.SubscriptionHelper;
import io.reactivex.internal.util.AtomicThrowable;
import io.reactivex.internal.util.BackpressureHelper;
import io.reactivex.internal.util.NotificationLite;
import io.reactivex.plugins.RxJavaPlugins;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
import java.util.concurrent.atomic.AtomicReference;
import org.reactivestreams.Subscriber;
import org.reactivestreams.Subscription;

public final class MaybeConcatArrayDelayError<T>
extends Flowable<T> {
    final MaybeSource<? extends T>[] sources;

    public MaybeConcatArrayDelayError(MaybeSource<? extends T>[] arrmaybeSource) {
        this.sources = arrmaybeSource;
    }

    @Override
    protected void subscribeActual(Subscriber<? super T> subscriber) {
        ConcatMaybeObserver<T> concatMaybeObserver = new ConcatMaybeObserver<T>(subscriber, this.sources);
        subscriber.onSubscribe(concatMaybeObserver);
        concatMaybeObserver.drain();
    }

    static final class ConcatMaybeObserver<T>
    extends AtomicInteger
    implements MaybeObserver<T>,
    Subscription {
        private static final long serialVersionUID = 3520831347801429610L;
        final Subscriber<? super T> actual;
        final AtomicReference<Object> current;
        final SequentialDisposable disposables;
        final AtomicThrowable errors;
        int index;
        long produced;
        final AtomicLong requested;
        final MaybeSource<? extends T>[] sources;

        ConcatMaybeObserver(Subscriber<? super T> subscriber, MaybeSource<? extends T>[] arrmaybeSource) {
            this.actual = subscriber;
            this.sources = arrmaybeSource;
            this.requested = new AtomicLong();
            this.disposables = new SequentialDisposable();
            this.current = new AtomicReference<NotificationLite>(NotificationLite.COMPLETE);
            this.errors = new AtomicThrowable();
        }

        public void cancel() {
            this.disposables.dispose();
        }

        void drain() {
            if (this.getAndIncrement() != 0) {
                return;
            }
            AtomicReference<Object> atomicReference = this.current;
            Subscriber<? super T> subscriber = this.actual;
            SequentialDisposable sequentialDisposable = this.disposables;
            do {
                if (sequentialDisposable.isDisposed()) {
                    atomicReference.lazySet(null);
                    return;
                }
                Object object = atomicReference.get();
                if (object == null) continue;
                NotificationLite notificationLite = NotificationLite.COMPLETE;
                int n = 1;
                if (object != notificationLite) {
                    long l = this.produced;
                    if (l != this.requested.get()) {
                        this.produced = l + 1L;
                        atomicReference.lazySet(null);
                        subscriber.onNext(object);
                    } else {
                        n = 0;
                    }
                } else {
                    atomicReference.lazySet(null);
                }
                if (n == 0 || sequentialDisposable.isDisposed()) continue;
                n = this.index;
                if (n == this.sources.length) {
                    if ((Throwable)this.errors.get() != null) {
                        subscriber.onError(this.errors.terminate());
                        return;
                    }
                    subscriber.onComplete();
                    return;
                }
                this.index = n + 1;
                this.sources[n].subscribe(this);
            } while (this.decrementAndGet() != 0);
        }

        @Override
        public void onComplete() {
            this.current.lazySet((Object)NotificationLite.COMPLETE);
            this.drain();
        }

        @Override
        public void onError(Throwable throwable) {
            this.current.lazySet((Object)NotificationLite.COMPLETE);
            if (this.errors.addThrowable(throwable)) {
                this.drain();
                return;
            }
            RxJavaPlugins.onError(throwable);
        }

        @Override
        public void onSubscribe(Disposable disposable) {
            this.disposables.replace(disposable);
        }

        @Override
        public void onSuccess(T t) {
            this.current.lazySet(t);
            this.drain();
        }

        public void request(long l) {
            if (SubscriptionHelper.validate(l)) {
                BackpressureHelper.add(this.requested, l);
                this.drain();
            }
        }
    }

}

