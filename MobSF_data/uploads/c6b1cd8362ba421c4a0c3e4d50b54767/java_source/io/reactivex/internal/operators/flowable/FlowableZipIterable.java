/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  org.reactivestreams.Subscriber
 *  org.reactivestreams.Subscription
 */
package io.reactivex.internal.operators.flowable;

import io.reactivex.Flowable;
import io.reactivex.FlowableSubscriber;
import io.reactivex.exceptions.Exceptions;
import io.reactivex.functions.BiFunction;
import io.reactivex.internal.functions.ObjectHelper;
import io.reactivex.internal.operators.flowable.AbstractFlowableWithUpstream;
import io.reactivex.internal.subscriptions.EmptySubscription;
import io.reactivex.internal.subscriptions.SubscriptionHelper;
import io.reactivex.plugins.RxJavaPlugins;
import java.util.Iterator;
import org.reactivestreams.Subscriber;
import org.reactivestreams.Subscription;

public final class FlowableZipIterable<T, U, V>
extends AbstractFlowableWithUpstream<T, V> {
    final Iterable<U> other;
    final BiFunction<? super T, ? super U, ? extends V> zipper;

    public FlowableZipIterable(Flowable<T> flowable, Iterable<U> iterable, BiFunction<? super T, ? super U, ? extends V> biFunction) {
        super(flowable);
        this.other = iterable;
        this.zipper = biFunction;
    }

    @Override
    public void subscribeActual(Subscriber<? super V> subscriber) {
        Iterator<U> iterator;
        block4 : {
            try {
                iterator = ObjectHelper.requireNonNull(this.other.iterator(), "The iterator returned by other is null");
            }
            catch (Throwable throwable) {
                Exceptions.throwIfFatal(throwable);
                EmptySubscription.error(throwable, subscriber);
                return;
            }
            try {
                boolean bl = iterator.hasNext();
                if (bl) break block4;
            }
            catch (Throwable throwable) {
                Exceptions.throwIfFatal(throwable);
                EmptySubscription.error(throwable, subscriber);
                return;
            }
            EmptySubscription.complete(subscriber);
            return;
        }
        this.source.subscribe(new ZipIterableSubscriber<T, U, V>(subscriber, iterator, this.zipper));
    }

    static final class ZipIterableSubscriber<T, U, V>
    implements FlowableSubscriber<T>,
    Subscription {
        final Subscriber<? super V> actual;
        boolean done;
        final Iterator<U> iterator;
        Subscription s;
        final BiFunction<? super T, ? super U, ? extends V> zipper;

        ZipIterableSubscriber(Subscriber<? super V> subscriber, Iterator<U> iterator, BiFunction<? super T, ? super U, ? extends V> biFunction) {
            this.actual = subscriber;
            this.iterator = iterator;
            this.zipper = biFunction;
        }

        public void cancel() {
            this.s.cancel();
        }

        void error(Throwable throwable) {
            Exceptions.throwIfFatal(throwable);
            this.done = true;
            this.s.cancel();
            this.actual.onError(throwable);
        }

        public void onComplete() {
            if (this.done) {
                return;
            }
            this.done = true;
            this.actual.onComplete();
        }

        public void onError(Throwable throwable) {
            if (this.done) {
                RxJavaPlugins.onError(throwable);
                return;
            }
            this.done = true;
            this.actual.onError(throwable);
        }

        public void onNext(T object) {
            block7 : {
                U u;
                if (this.done) {
                    return;
                }
                try {
                    u = ObjectHelper.requireNonNull(this.iterator.next(), "The iterator returned a null value");
                }
                catch (Throwable throwable) {
                    this.error(throwable);
                    return;
                }
                try {
                    object = ObjectHelper.requireNonNull(this.zipper.apply(object, u), "The zipper function returned a null value");
                }
                catch (Throwable throwable) {
                    this.error(throwable);
                    return;
                }
                this.actual.onNext(object);
                try {
                    boolean bl = this.iterator.hasNext();
                    if (bl) break block7;
                    this.done = true;
                }
                catch (Throwable throwable) {
                    this.error(throwable);
                    return;
                }
                this.s.cancel();
                this.actual.onComplete();
            }
        }

        @Override
        public void onSubscribe(Subscription subscription) {
            if (SubscriptionHelper.validate(this.s, subscription)) {
                this.s = subscription;
                this.actual.onSubscribe((Subscription)this);
            }
        }

        public void request(long l) {
            this.s.request(l);
        }
    }

}

