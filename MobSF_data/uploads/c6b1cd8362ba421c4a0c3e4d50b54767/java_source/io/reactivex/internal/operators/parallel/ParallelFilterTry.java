/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  org.reactivestreams.Subscriber
 *  org.reactivestreams.Subscription
 */
package io.reactivex.internal.operators.parallel;

import io.reactivex.exceptions.CompositeException;
import io.reactivex.exceptions.Exceptions;
import io.reactivex.functions.BiFunction;
import io.reactivex.functions.Predicate;
import io.reactivex.internal.functions.ObjectHelper;
import io.reactivex.internal.fuseable.ConditionalSubscriber;
import io.reactivex.internal.subscriptions.SubscriptionHelper;
import io.reactivex.parallel.ParallelFailureHandling;
import io.reactivex.parallel.ParallelFlowable;
import io.reactivex.plugins.RxJavaPlugins;
import org.reactivestreams.Subscriber;
import org.reactivestreams.Subscription;

public final class ParallelFilterTry<T>
extends ParallelFlowable<T> {
    final BiFunction<? super Long, ? super Throwable, ParallelFailureHandling> errorHandler;
    final Predicate<? super T> predicate;
    final ParallelFlowable<T> source;

    public ParallelFilterTry(ParallelFlowable<T> parallelFlowable, Predicate<? super T> predicate, BiFunction<? super Long, ? super Throwable, ParallelFailureHandling> biFunction) {
        this.source = parallelFlowable;
        this.predicate = predicate;
        this.errorHandler = biFunction;
    }

    @Override
    public int parallelism() {
        return this.source.parallelism();
    }

    @Override
    public void subscribe(Subscriber<? super T>[] arrsubscriber) {
        if (!this.validate(arrsubscriber)) {
            return;
        }
        int n = arrsubscriber.length;
        Subscriber[] arrsubscriber2 = new Subscriber[n];
        for (int i = 0; i < n; ++i) {
            Subscriber<? super T> subscriber = arrsubscriber[i];
            arrsubscriber2[i] = subscriber instanceof ConditionalSubscriber ? new ParallelFilterConditionalSubscriber<T>((ConditionalSubscriber)subscriber, this.predicate, this.errorHandler) : new ParallelFilterSubscriber<T>(subscriber, this.predicate, this.errorHandler);
        }
        this.source.subscribe(arrsubscriber2);
    }

    static abstract class BaseFilterSubscriber<T>
    implements ConditionalSubscriber<T>,
    Subscription {
        boolean done;
        final BiFunction<? super Long, ? super Throwable, ParallelFailureHandling> errorHandler;
        final Predicate<? super T> predicate;
        Subscription s;

        BaseFilterSubscriber(Predicate<? super T> predicate, BiFunction<? super Long, ? super Throwable, ParallelFailureHandling> biFunction) {
            this.predicate = predicate;
            this.errorHandler = biFunction;
        }

        public final void cancel() {
            this.s.cancel();
        }

        public final void onNext(T t) {
            if (!this.tryOnNext(t) && !this.done) {
                this.s.request(1L);
            }
        }

        public final void request(long l) {
            this.s.request(l);
        }
    }

    static final class ParallelFilterConditionalSubscriber<T>
    extends BaseFilterSubscriber<T> {
        final ConditionalSubscriber<? super T> actual;

        ParallelFilterConditionalSubscriber(ConditionalSubscriber<? super T> conditionalSubscriber, Predicate<? super T> predicate, BiFunction<? super Long, ? super Throwable, ParallelFailureHandling> biFunction) {
            super(predicate, biFunction);
            this.actual = conditionalSubscriber;
        }

        public void onComplete() {
            if (!this.done) {
                this.done = true;
                this.actual.onComplete();
            }
        }

        public void onError(Throwable throwable) {
            if (this.done) {
                RxJavaPlugins.onError(throwable);
                return;
            }
            this.done = true;
            this.actual.onError(throwable);
        }

        @Override
        public void onSubscribe(Subscription subscription) {
            if (SubscriptionHelper.validate(this.s, subscription)) {
                this.s = subscription;
                this.actual.onSubscribe(this);
            }
        }

        @Override
        public boolean tryOnNext(T t) {
            if (!this.done) {
                long l = 0L;
                do {
                    try {
                        boolean bl = this.predicate.test(t);
                        if (bl && this.actual.tryOnNext(t)) {
                            return true;
                        }
                        return false;
                    }
                    catch (Throwable throwable) {
                        BiFunction biFunction;
                        Exceptions.throwIfFatal(throwable);
                        try {
                            biFunction = this.errorHandler;
                        }
                        catch (Throwable throwable2) {
                            Exceptions.throwIfFatal(throwable2);
                            this.cancel();
                            this.onError(new CompositeException(throwable, throwable2));
                            return false;
                        }
                        ++l;
                        biFunction = (ParallelFailureHandling)ObjectHelper.requireNonNull(biFunction.apply(l, throwable), "The errorHandler returned a null item");
                        switch (.$SwitchMap$io$reactivex$parallel$ParallelFailureHandling[biFunction.ordinal()]) {
                            default: {
                                this.cancel();
                                this.onError(throwable);
                                return false;
                            }
                            case 3: {
                                this.cancel();
                                this.onComplete();
                                return false;
                            }
                            case 2: {
                                return false;
                            }
                            case 1: 
                        }
                        continue;
                    }
                    break;
                } while (true);
            }
            return false;
        }
    }

    static final class ParallelFilterSubscriber<T>
    extends BaseFilterSubscriber<T> {
        final Subscriber<? super T> actual;

        ParallelFilterSubscriber(Subscriber<? super T> subscriber, Predicate<? super T> predicate, BiFunction<? super Long, ? super Throwable, ParallelFailureHandling> biFunction) {
            super(predicate, biFunction);
            this.actual = subscriber;
        }

        public void onComplete() {
            if (!this.done) {
                this.done = true;
                this.actual.onComplete();
            }
        }

        public void onError(Throwable throwable) {
            if (this.done) {
                RxJavaPlugins.onError(throwable);
                return;
            }
            this.done = true;
            this.actual.onError(throwable);
        }

        @Override
        public void onSubscribe(Subscription subscription) {
            if (SubscriptionHelper.validate(this.s, subscription)) {
                this.s = subscription;
                this.actual.onSubscribe((Subscription)this);
            }
        }

        @Override
        public boolean tryOnNext(T t) {
            if (!this.done) {
                long l = 0L;
                do {
                    block12 : {
                        try {
                            boolean bl = this.predicate.test(t);
                            if (!bl) break block12;
                        }
                        catch (Throwable throwable) {
                            BiFunction biFunction;
                            Exceptions.throwIfFatal(throwable);
                            try {
                                biFunction = this.errorHandler;
                            }
                            catch (Throwable throwable2) {
                                Exceptions.throwIfFatal(throwable2);
                                this.cancel();
                                this.onError(new CompositeException(throwable, throwable2));
                                return false;
                            }
                            ++l;
                            biFunction = (ParallelFailureHandling)ObjectHelper.requireNonNull(biFunction.apply(l, throwable), "The errorHandler returned a null item");
                            switch (.$SwitchMap$io$reactivex$parallel$ParallelFailureHandling[biFunction.ordinal()]) {
                                default: {
                                    this.cancel();
                                    this.onError(throwable);
                                    return false;
                                }
                                case 3: {
                                    this.cancel();
                                    this.onComplete();
                                    return false;
                                }
                                case 2: {
                                    return false;
                                }
                                case 1: 
                            }
                            continue;
                        }
                        this.actual.onNext(t);
                        return true;
                    }
                    return false;
                    break;
                } while (true);
            }
            return false;
        }
    }

}

