/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  org.reactivestreams.Subscriber
 *  org.reactivestreams.Subscription
 */
package io.reactivex.internal.operators.flowable;

import io.reactivex.Flowable;
import io.reactivex.FlowableSubscriber;
import io.reactivex.disposables.Disposable;
import io.reactivex.exceptions.Exceptions;
import io.reactivex.exceptions.MissingBackpressureException;
import io.reactivex.functions.Function;
import io.reactivex.internal.functions.ObjectHelper;
import io.reactivex.internal.fuseable.QueueSubscription;
import io.reactivex.internal.fuseable.SimplePlainQueue;
import io.reactivex.internal.fuseable.SimpleQueue;
import io.reactivex.internal.operators.flowable.AbstractFlowableWithUpstream;
import io.reactivex.internal.operators.flowable.FlowableScalarXMap;
import io.reactivex.internal.queue.SpscArrayQueue;
import io.reactivex.internal.queue.SpscLinkedArrayQueue;
import io.reactivex.internal.subscriptions.SubscriptionHelper;
import io.reactivex.internal.util.AtomicThrowable;
import io.reactivex.internal.util.BackpressureHelper;
import io.reactivex.internal.util.ExceptionHelper;
import io.reactivex.plugins.RxJavaPlugins;
import java.util.concurrent.Callable;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
import java.util.concurrent.atomic.AtomicReference;
import org.reactivestreams.Publisher;
import org.reactivestreams.Subscriber;
import org.reactivestreams.Subscription;

public final class FlowableFlatMap<T, U>
extends AbstractFlowableWithUpstream<T, U> {
    final int bufferSize;
    final boolean delayErrors;
    final Function<? super T, ? extends Publisher<? extends U>> mapper;
    final int maxConcurrency;

    public FlowableFlatMap(Flowable<T> flowable, Function<? super T, ? extends Publisher<? extends U>> function, boolean bl, int n, int n2) {
        super(flowable);
        this.mapper = function;
        this.delayErrors = bl;
        this.maxConcurrency = n;
        this.bufferSize = n2;
    }

    public static <T, U> FlowableSubscriber<T> subscribe(Subscriber<? super U> subscriber, Function<? super T, ? extends Publisher<? extends U>> function, boolean bl, int n, int n2) {
        return new MergeSubscriber<T, U>(subscriber, function, bl, n, n2);
    }

    @Override
    protected void subscribeActual(Subscriber<? super U> subscriber) {
        if (FlowableScalarXMap.tryScalarXMapSubscribe(this.source, subscriber, this.mapper)) {
            return;
        }
        this.source.subscribe(FlowableFlatMap.subscribe(subscriber, this.mapper, this.delayErrors, this.maxConcurrency, this.bufferSize));
    }

    static final class InnerSubscriber<T, U>
    extends AtomicReference<Subscription>
    implements FlowableSubscriber<U>,
    Disposable {
        private static final long serialVersionUID = -4606175640614850599L;
        final int bufferSize;
        volatile boolean done;
        int fusionMode;
        final long id;
        final int limit;
        final MergeSubscriber<T, U> parent;
        long produced;
        volatile SimpleQueue<U> queue;

        InnerSubscriber(MergeSubscriber<T, U> mergeSubscriber, long l) {
            this.id = l;
            this.parent = mergeSubscriber;
            this.bufferSize = mergeSubscriber.bufferSize;
            this.limit = this.bufferSize >> 2;
        }

        @Override
        public void dispose() {
            SubscriptionHelper.cancel(this);
        }

        @Override
        public boolean isDisposed() {
            if (this.get() == SubscriptionHelper.CANCELLED) {
                return true;
            }
            return false;
        }

        public void onComplete() {
            this.done = true;
            this.parent.drain();
        }

        public void onError(Throwable throwable) {
            this.lazySet(SubscriptionHelper.CANCELLED);
            this.parent.innerError(this, throwable);
        }

        public void onNext(U u) {
            if (this.fusionMode != 2) {
                this.parent.tryEmit(u, this);
                return;
            }
            this.parent.drain();
        }

        @Override
        public void onSubscribe(Subscription subscription) {
            if (SubscriptionHelper.setOnce(this, subscription)) {
                if (subscription instanceof QueueSubscription) {
                    QueueSubscription queueSubscription = (QueueSubscription)subscription;
                    int n = queueSubscription.requestFusion(7);
                    if (n == 1) {
                        this.fusionMode = n;
                        this.queue = queueSubscription;
                        this.done = true;
                        this.parent.drain();
                        return;
                    }
                    if (n == 2) {
                        this.fusionMode = n;
                        this.queue = queueSubscription;
                    }
                }
                subscription.request((long)this.bufferSize);
            }
        }

        void requestMore(long l) {
            if (this.fusionMode != 1) {
                if ((l = this.produced + l) >= (long)this.limit) {
                    this.produced = 0L;
                    ((Subscription)this.get()).request(l);
                    return;
                }
                this.produced = l;
            }
        }
    }

    static final class MergeSubscriber<T, U>
    extends AtomicInteger
    implements FlowableSubscriber<T>,
    Subscription {
        static final InnerSubscriber<?, ?>[] CANCELLED;
        static final InnerSubscriber<?, ?>[] EMPTY;
        private static final long serialVersionUID = -2117620485640801370L;
        final Subscriber<? super U> actual;
        final int bufferSize;
        volatile boolean cancelled;
        final boolean delayErrors;
        volatile boolean done;
        final AtomicThrowable errs = new AtomicThrowable();
        long lastId;
        int lastIndex;
        final Function<? super T, ? extends Publisher<? extends U>> mapper;
        final int maxConcurrency;
        volatile SimplePlainQueue<U> queue;
        final AtomicLong requested = new AtomicLong();
        Subscription s;
        int scalarEmitted;
        final int scalarLimit;
        final AtomicReference<InnerSubscriber<?, ?>[]> subscribers = new AtomicReference();
        long uniqueId;

        static {
            EMPTY = new InnerSubscriber[0];
            CANCELLED = new InnerSubscriber[0];
        }

        MergeSubscriber(Subscriber<? super U> subscriber, Function<? super T, ? extends Publisher<? extends U>> function, boolean bl, int n, int n2) {
            this.actual = subscriber;
            this.mapper = function;
            this.delayErrors = bl;
            this.maxConcurrency = n;
            this.bufferSize = n2;
            this.scalarLimit = Math.max(1, n >> 1);
            this.subscribers.lazySet(EMPTY);
        }

        boolean addInner(InnerSubscriber<T, U> innerSubscriber) {
            InnerSubscriber[] arrinnerSubscriber;
            InnerSubscriber<?, ?>[] arrinnerSubscriber2;
            do {
                if ((arrinnerSubscriber2 = this.subscribers.get()) == CANCELLED) {
                    innerSubscriber.dispose();
                    return false;
                }
                int n = arrinnerSubscriber2.length;
                arrinnerSubscriber = new InnerSubscriber[n + 1];
                System.arraycopy(arrinnerSubscriber2, 0, arrinnerSubscriber, 0, n);
                arrinnerSubscriber[n] = innerSubscriber;
            } while (!this.subscribers.compareAndSet(arrinnerSubscriber2, arrinnerSubscriber));
            return true;
        }

        public void cancel() {
            if (!this.cancelled) {
                SimplePlainQueue<U> simplePlainQueue;
                this.cancelled = true;
                this.s.cancel();
                this.disposeAll();
                if (this.getAndIncrement() == 0 && (simplePlainQueue = this.queue) != null) {
                    simplePlainQueue.clear();
                }
            }
        }

        boolean checkTerminate() {
            if (this.cancelled) {
                this.clearScalarQueue();
                return true;
            }
            if (!this.delayErrors && this.errs.get() != null) {
                this.clearScalarQueue();
                Throwable throwable = this.errs.terminate();
                if (throwable != ExceptionHelper.TERMINATED) {
                    this.actual.onError(throwable);
                }
                return true;
            }
            return false;
        }

        void clearScalarQueue() {
            SimplePlainQueue<U> simplePlainQueue = this.queue;
            if (simplePlainQueue != null) {
                simplePlainQueue.clear();
            }
        }

        void disposeAll() {
            Object object;
            if (this.subscribers.get() != CANCELLED && (object = this.subscribers.getAndSet(CANCELLED)) != CANCELLED) {
                int n = ((InnerSubscriber<?, ?>[])object).length;
                for (int i = 0; i < n; ++i) {
                    object[i].dispose();
                }
                object = this.errs.terminate();
                if (object != null && object != ExceptionHelper.TERMINATED) {
                    RxJavaPlugins.onError(object);
                }
            }
        }

        void drain() {
            if (this.getAndIncrement() == 0) {
                this.drainLoop();
            }
        }

        /*
         * Unable to fully structure code
         * Enabled aggressive block sorting
         * Enabled unnecessary exception pruning
         * Enabled aggressive exception aggregation
         * Lifted jumps to return sites
         */
        void drainLoop() {
            var18_1 = this.actual;
            var3_2 = 1;
            do lbl-1000: // 3 sources:
            {
                block36 : {
                    block34 : {
                        block35 : {
                            block32 : {
                                block33 : {
                                    block30 : {
                                        if (this.checkTerminate()) {
                                            return;
                                        }
                                        var20_17 = this.queue;
                                        var9_10 = this.requested.get();
                                        var6_7 = var9_10 == Long.MAX_VALUE;
                                        if (var20_17 == null) {
                                            var11_11 = 0L;
                                            var15_13 = var9_10;
                                        } else {
                                            var13_12 = 0L;
                                            do {
                                                var11_11 = 0L;
                                                var19_15 /* !! */  = null;
                                                while (var9_10 != 0L) {
                                                    var19_15 /* !! */  = var20_17.poll();
                                                    if (this.checkTerminate()) {
                                                        return;
                                                    }
                                                    if (var19_15 /* !! */  == null) {
                                                        if (var11_11 == 0L) break;
                                                    } else {
                                                        var18_1.onNext(var19_15 /* !! */ );
                                                        --var9_10;
                                                        ++var11_11;
                                                        ++var13_12;
                                                        continue;
                                                    }
                                                    var9_10 = var6_7 != false ? Long.MAX_VALUE : this.requested.addAndGet(- var11_11);
                                                    break;
                                                }
                                                var15_13 = var9_10;
                                                var11_11 = var13_12;
                                                if (var9_10 == 0L) break block30;
                                            } while (var19_15 /* !! */  != null);
                                            var15_13 = var9_10;
                                            var11_11 = var13_12;
                                        }
                                    }
                                    var17_14 = this.done;
                                    var19_15 /* !! */  = this.queue;
                                    var20_17 = this.subscribers.get();
                                    var4_5 = var20_17.length;
                                    if (var17_14 && (var19_15 /* !! */  == null || var19_15 /* !! */ .isEmpty()) && var4_5 == 0) {
                                        var19_15 /* !! */  = this.errs.terminate();
                                        if (var19_15 /* !! */  == ExceptionHelper.TERMINATED) return;
                                        if (var19_15 /* !! */  == null) {
                                            var18_1.onComplete();
                                            return;
                                        }
                                        var18_1.onError((Throwable)var19_15 /* !! */ );
                                        return;
                                    }
                                    if (var4_5 == 0) break block32;
                                    var9_10 = this.lastId;
                                    var2_4 = this.lastIndex;
                                    if (var4_5 <= var2_4) break block33;
                                    var1_3 = var2_4;
                                    if (var20_17[var2_4].id == var9_10) break block34;
                                }
                                var1_3 = var2_4;
                                if (var4_5 > var2_4) break block35;
                                var1_3 = 0;
                                break block35;
                            }
                            var1_3 = 0;
                            var9_10 = var11_11;
                            break block36;
                        }
                        for (var2_4 = 0; var2_4 < var4_5 && var20_17[var1_3].id != var9_10; ++var2_4) {
                            var1_3 = var5_6 = var1_3 + 1;
                            if (var5_6 != var4_5) continue;
                            var1_3 = 0;
                        }
                        this.lastIndex = var1_3;
                        this.lastId = var20_17[var1_3].id;
                    }
                    var5_6 = 0;
                    var8_9 = 0;
                    var9_10 = var11_11;
                    var2_4 = var4_5;
                    var11_11 = var15_13;
                    var7_8 = var1_3;
                    var1_3 = var8_9;
                    var4_5 = var5_6;
                    while (var4_5 < var2_4) {
                        block31 : {
                            if (this.checkTerminate()) {
                                return;
                            }
                            var21_18 = var20_17[var7_8];
                            var19_15 /* !! */  = null;
                            do {
                                if (this.checkTerminate()) {
                                    return;
                                }
                                var22_19 = var21_18.queue;
                                if (var22_19 == null) {
                                    var13_12 = var11_11;
                                    break;
                                }
                                var5_6 = var2_4;
                                var13_12 = 0L;
                                while (var11_11 != 0L) {
                                    try {
                                        var19_15 /* !! */  = var22_19.poll();
                                        ** if (var19_15 /* !! */  == null) goto lbl-1000
                                    }
                                    catch (Throwable var19_16) {
                                        Exceptions.throwIfFatal(var19_16);
                                        var21_18.dispose();
                                        this.errs.addThrowable(var19_16);
                                        if (this.checkTerminate()) {
                                            return;
                                        }
                                        this.removeInner(var21_18);
                                        var8_9 = var4_5 + 1;
                                        var4_5 = var5_6;
                                        var1_3 = 1;
                                        var2_4 = var7_8;
                                        var5_6 = var8_9;
                                        break block31;
                                    }
lbl-1000: // 1 sources:
                                    {
                                        var18_1.onNext(var19_15 /* !! */ );
                                        if (this.checkTerminate()) {
                                            return;
                                        }
                                        ++var13_12;
                                        --var11_11;
                                        continue;
                                    }
lbl-1000: // 1 sources:
                                    {
                                    }
                                    if (var13_12 == 0L) break;
                                    var11_11 = var6_7 == false ? this.requested.addAndGet(- var13_12) : Long.MAX_VALUE;
                                    var21_18.requestMore(var13_12);
                                    break;
                                }
                                var13_12 = var11_11;
                                if (var11_11 == 0L) break;
                                if (var19_15 /* !! */  == null) {
                                    var13_12 = var11_11;
                                    break;
                                }
                                var2_4 = var5_6;
                            } while (true);
                            var5_6 = var4_5;
                            var19_15 /* !! */  = var18_1;
                            var17_14 = var21_18.done;
                            var22_19 = var21_18.queue;
                            if (var17_14 && (var22_19 == null || var22_19.isEmpty())) {
                                this.removeInner(var21_18);
                                if (this.checkTerminate()) {
                                    return;
                                }
                                ++var9_10;
                                var1_3 = 1;
                            }
                            if (var13_12 == 0L) {
                                var18_1 = var19_15 /* !! */ ;
                                break;
                            }
                            var4_5 = var2_4;
                            if (++var7_8 == var4_5) {
                                var2_4 = 0;
                                var11_11 = var13_12;
                            } else {
                                var2_4 = var7_8;
                                var11_11 = var13_12;
                            }
                        }
                        var8_9 = var4_5;
                        var4_5 = var5_6 + 1;
                        var7_8 = var2_4;
                        var2_4 = var8_9;
                    }
                    this.lastIndex = var7_8;
                    this.lastId = var20_17[var7_8].id;
                }
                if (var9_10 != 0L && !this.cancelled) {
                    this.s.request(var9_10);
                }
                if (var1_3 != 0) ** GOTO lbl-1000
                var3_2 = var1_3 = this.addAndGet(- var3_2);
            } while (var1_3 != 0);
        }

        SimpleQueue<U> getInnerQueue(InnerSubscriber<T, U> innerSubscriber) {
            SimpleQueue simpleQueue;
            SimpleQueue simpleQueue2 = simpleQueue = innerSubscriber.queue;
            if (simpleQueue == null) {
                innerSubscriber.queue = simpleQueue2 = new SpscArrayQueue(this.bufferSize);
            }
            return simpleQueue2;
        }

        SimpleQueue<U> getMainQueue() {
            SimplePlainQueue<U> simplePlainQueue;
            SimplePlainQueue<U> simplePlainQueue2 = simplePlainQueue = this.queue;
            if (simplePlainQueue == null) {
                simplePlainQueue2 = this.maxConcurrency == Integer.MAX_VALUE ? new SpscLinkedArrayQueue<U>(this.bufferSize) : new SpscArrayQueue<U>(this.maxConcurrency);
                this.queue = simplePlainQueue2;
            }
            return simplePlainQueue2;
        }

        void innerError(InnerSubscriber<T, U> arrinnerSubscriber, Throwable throwable) {
            if (this.errs.addThrowable(throwable)) {
                arrinnerSubscriber.done = true;
                if (!this.delayErrors) {
                    this.s.cancel();
                    arrinnerSubscriber = this.subscribers.getAndSet(CANCELLED);
                    int n = arrinnerSubscriber.length;
                    for (int i = 0; i < n; ++i) {
                        arrinnerSubscriber[i].dispose();
                    }
                }
                this.drain();
                return;
            }
            RxJavaPlugins.onError(throwable);
        }

        public void onComplete() {
            if (this.done) {
                return;
            }
            this.done = true;
            this.drain();
        }

        public void onError(Throwable throwable) {
            if (this.done) {
                RxJavaPlugins.onError(throwable);
                return;
            }
            if (this.errs.addThrowable(throwable)) {
                this.done = true;
                this.drain();
                return;
            }
            RxJavaPlugins.onError(throwable);
        }

        /*
         * Enabled force condition propagation
         * Lifted jumps to return sites
         */
        public void onNext(T object) {
            if (this.done) {
                return;
            }
            try {
                object = ObjectHelper.requireNonNull(this.mapper.apply(object), "The mapper returned a null Publisher");
            }
            catch (Throwable throwable) {
                Exceptions.throwIfFatal(throwable);
                this.s.cancel();
                this.onError(throwable);
                return;
            }
            if (object instanceof Callable) {
                int n;
                try {
                    object = ((Callable)object).call();
                    if (object != null) {
                        this.tryEmitScalar(object);
                        return;
                    }
                    if (this.maxConcurrency == Integer.MAX_VALUE || this.cancelled) return;
                }
                catch (Throwable throwable) {
                    Exceptions.throwIfFatal(throwable);
                    this.errs.addThrowable(throwable);
                    this.drain();
                    return;
                }
                this.scalarEmitted = n = this.scalarEmitted + 1;
                if (n != this.scalarLimit) return;
                this.scalarEmitted = 0;
                this.s.request((long)this.scalarLimit);
                return;
            }
            long l = this.uniqueId;
            this.uniqueId = l + 1L;
            InnerSubscriber innerSubscriber = new InnerSubscriber(this, l);
            if (!this.addInner(innerSubscriber)) return;
            object.subscribe(innerSubscriber);
        }

        @Override
        public void onSubscribe(Subscription subscription) {
            if (SubscriptionHelper.validate(this.s, subscription)) {
                this.s = subscription;
                this.actual.onSubscribe((Subscription)this);
                if (!this.cancelled) {
                    if (this.maxConcurrency == Integer.MAX_VALUE) {
                        subscription.request(Long.MAX_VALUE);
                        return;
                    }
                    subscription.request((long)this.maxConcurrency);
                }
            }
        }

        void removeInner(InnerSubscriber<T, U> innerSubscriber) {
            InnerSubscriber<?, ?>[] arrinnerSubscriber;
            while ((arrinnerSubscriber = this.subscribers.get()) != CANCELLED) {
                int n;
                InnerSubscriber<?, ?>[] arrinnerSubscriber2;
                if (arrinnerSubscriber == EMPTY) {
                    return;
                }
                int n2 = arrinnerSubscriber.length;
                int n3 = -1;
                int n4 = 0;
                do {
                    n = n3;
                    if (n4 >= n2) break;
                    if (arrinnerSubscriber[n4] == innerSubscriber) {
                        n = n4;
                        break;
                    }
                    ++n4;
                } while (true);
                if (n < 0) {
                    return;
                }
                if (n2 == 1) {
                    arrinnerSubscriber2 = EMPTY;
                } else {
                    arrinnerSubscriber2 = new InnerSubscriber[n2 - 1];
                    System.arraycopy(arrinnerSubscriber, 0, arrinnerSubscriber2, 0, n);
                    System.arraycopy(arrinnerSubscriber, n + 1, arrinnerSubscriber2, n, n2 - n - 1);
                }
                if (!this.subscribers.compareAndSet(arrinnerSubscriber, arrinnerSubscriber2)) continue;
                return;
            }
        }

        public void request(long l) {
            if (SubscriptionHelper.validate(l)) {
                BackpressureHelper.add(this.requested, l);
                this.drain();
            }
        }

        void tryEmit(U u, InnerSubscriber<T, U> innerSubscriber) {
            if (this.get() == 0 && this.compareAndSet(0, 1)) {
                long l = this.requested.get();
                SimpleQueue simpleQueue = innerSubscriber.queue;
                if (l != 0L && (simpleQueue == null || simpleQueue.isEmpty())) {
                    this.actual.onNext(u);
                    if (l != Long.MAX_VALUE) {
                        this.requested.decrementAndGet();
                    }
                    innerSubscriber.requestMore(1L);
                } else {
                    SimpleQueue simpleQueue2 = simpleQueue;
                    if (simpleQueue == null) {
                        simpleQueue2 = this.getInnerQueue(innerSubscriber);
                    }
                    if (!simpleQueue2.offer(u)) {
                        this.onError(new MissingBackpressureException("Inner queue full?!"));
                        return;
                    }
                }
                if (this.decrementAndGet() == 0) {
                    return;
                }
            } else {
                SimpleQueue simpleQueue;
                SimpleQueue simpleQueue3 = simpleQueue = innerSubscriber.queue;
                if (simpleQueue == null) {
                    simpleQueue3 = new SpscArrayQueue(this.bufferSize);
                    innerSubscriber.queue = simpleQueue3;
                }
                if (!simpleQueue3.offer(u)) {
                    this.onError(new MissingBackpressureException("Inner queue full?!"));
                    return;
                }
                if (this.getAndIncrement() != 0) {
                    return;
                }
            }
            this.drainLoop();
        }

        void tryEmitScalar(U u) {
            if (this.get() == 0 && this.compareAndSet(0, 1)) {
                long l = this.requested.get();
                SimplePlainQueue<U> simplePlainQueue = this.queue;
                if (l != 0L && (simplePlainQueue == null || simplePlainQueue.isEmpty())) {
                    this.actual.onNext(u);
                    if (l != Long.MAX_VALUE) {
                        this.requested.decrementAndGet();
                    }
                    if (this.maxConcurrency != Integer.MAX_VALUE && !this.cancelled) {
                        int n;
                        this.scalarEmitted = n = this.scalarEmitted + 1;
                        if (n == this.scalarLimit) {
                            this.scalarEmitted = 0;
                            this.s.request((long)this.scalarLimit);
                        }
                    }
                } else {
                    SimpleQueue<U> simpleQueue = simplePlainQueue;
                    if (simplePlainQueue == null) {
                        simpleQueue = this.getMainQueue();
                    }
                    if (!simpleQueue.offer(u)) {
                        this.onError(new IllegalStateException("Scalar queue full?!"));
                        return;
                    }
                }
                if (this.decrementAndGet() == 0) {
                    return;
                }
            } else {
                if (!this.getMainQueue().offer(u)) {
                    this.onError(new IllegalStateException("Scalar queue full?!"));
                    return;
                }
                if (this.getAndIncrement() != 0) {
                    return;
                }
            }
            this.drainLoop();
        }
    }

}

