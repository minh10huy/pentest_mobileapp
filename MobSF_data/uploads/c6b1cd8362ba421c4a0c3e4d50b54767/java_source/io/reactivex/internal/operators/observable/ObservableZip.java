/*
 * Decompiled with CFR 0_132.
 */
package io.reactivex.internal.operators.observable;

import io.reactivex.Observable;
import io.reactivex.ObservableSource;
import io.reactivex.Observer;
import io.reactivex.disposables.Disposable;
import io.reactivex.exceptions.Exceptions;
import io.reactivex.functions.Function;
import io.reactivex.internal.disposables.DisposableHelper;
import io.reactivex.internal.disposables.EmptyDisposable;
import io.reactivex.internal.functions.ObjectHelper;
import io.reactivex.internal.queue.SpscLinkedArrayQueue;
import java.util.Arrays;
import java.util.Iterator;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicReference;

public final class ObservableZip<T, R>
extends Observable<R> {
    final int bufferSize;
    final boolean delayError;
    final ObservableSource<? extends T>[] sources;
    final Iterable<? extends ObservableSource<? extends T>> sourcesIterable;
    final Function<? super Object[], ? extends R> zipper;

    public ObservableZip(ObservableSource<? extends T>[] arrobservableSource, Iterable<? extends ObservableSource<? extends T>> iterable, Function<? super Object[], ? extends R> function, int n, boolean bl) {
        this.sources = arrobservableSource;
        this.sourcesIterable = iterable;
        this.zipper = function;
        this.bufferSize = n;
        this.delayError = bl;
    }

    @Override
    public void subscribeActual(Observer<? super R> observer) {
        int n;
        ObservableSource<? extends T>[] arrobservableSource = this.sources;
        if (arrobservableSource == null) {
            ObservableSource<Object>[] arrobservableSource2 = new Observable[8];
            Iterator<ObservableSource<T>> iterator = this.sourcesIterable.iterator();
            int n2 = 0;
            do {
                n = n2;
                arrobservableSource = arrobservableSource2;
                if (iterator.hasNext()) {
                    ObservableSource<? extends T> observableSource = iterator.next();
                    arrobservableSource = arrobservableSource2;
                    if (n2 == arrobservableSource2.length) {
                        arrobservableSource = new ObservableSource[(n2 >> 2) + n2];
                        System.arraycopy(arrobservableSource2, 0, arrobservableSource, 0, n2);
                    }
                    arrobservableSource[n2] = observableSource;
                    ++n2;
                    arrobservableSource2 = arrobservableSource;
                    continue;
                }
                break;
            } while (true);
        } else {
            n = arrobservableSource.length;
        }
        if (n == 0) {
            EmptyDisposable.complete(observer);
            return;
        }
        new ZipCoordinator<T, R>(observer, this.zipper, n, this.delayError).subscribe(arrobservableSource, this.bufferSize);
    }

    static final class ZipCoordinator<T, R>
    extends AtomicInteger
    implements Disposable {
        private static final long serialVersionUID = 2983708048395377667L;
        final Observer<? super R> actual;
        volatile boolean cancelled;
        final boolean delayError;
        final ZipObserver<T, R>[] observers;
        final T[] row;
        final Function<? super Object[], ? extends R> zipper;

        ZipCoordinator(Observer<? super R> observer, Function<? super Object[], ? extends R> function, int n, boolean bl) {
            this.actual = observer;
            this.zipper = function;
            this.observers = new ZipObserver[n];
            this.row = new Object[n];
            this.delayError = bl;
        }

        void cancel() {
            this.clear();
            this.cancelSources();
        }

        void cancelSources() {
            ZipObserver<T, R>[] arrzipObserver = this.observers;
            int n = arrzipObserver.length;
            for (int i = 0; i < n; ++i) {
                arrzipObserver[i].dispose();
            }
        }

        boolean checkTerminated(boolean bl, boolean bl2, Observer<? super R> observer, boolean bl3, ZipObserver<?, ?> object) {
            if (this.cancelled) {
                this.cancel();
                return true;
            }
            if (bl) {
                if (bl3) {
                    if (bl2) {
                        object = object.error;
                        this.cancel();
                        if (object != null) {
                            observer.onError((Throwable)object);
                            return true;
                        }
                        observer.onComplete();
                        return true;
                    }
                } else {
                    object = object.error;
                    if (object != null) {
                        this.cancel();
                        observer.onError((Throwable)object);
                        return true;
                    }
                    if (bl2) {
                        this.cancel();
                        observer.onComplete();
                        return true;
                    }
                }
            }
            return false;
        }

        void clear() {
            ZipObserver<T, R>[] arrzipObserver = this.observers;
            int n = arrzipObserver.length;
            for (int i = 0; i < n; ++i) {
                arrzipObserver[i].queue.clear();
            }
        }

        @Override
        public void dispose() {
            if (!this.cancelled) {
                this.cancelled = true;
                this.cancelSources();
                if (this.getAndIncrement() == 0) {
                    this.clear();
                }
            }
        }

        /*
         * Unable to fully structure code
         * Enabled aggressive block sorting
         * Enabled unnecessary exception pruning
         * Enabled aggressive exception aggregation
         * Lifted jumps to return sites
         */
        public void drain() {
            if (this.getAndIncrement() != 0) {
                return;
            }
            var11_1 = this.observers;
            var10_3 = this.actual;
            var12_4 = this.row;
            var8_5 = this.delayError;
            var1_6 = 1;
            do lbl-1000: // 2 sources:
            {
                var6_11 = var11_1.length;
                var3_8 = 0;
                var4_9 = 0;
                for (var2_7 = 0; var2_7 < var6_11; ++var3_8, ++var2_7) {
                    var13_14 = var11_1[var2_7];
                    if (var12_4[var3_8] == null) {
                        var9_13 = var13_14.done;
                        var14_15 = var13_14.queue.poll();
                        var7_12 = var14_15 == null;
                        if (this.checkTerminated(var9_13, var7_12, (Observer<? super R>)var10_3, var8_5, (ZipObserver<?, ?>)var13_14)) {
                            return;
                        }
                        var5_10 = var4_9 + 1;
                    } else {
                        var5_10 = var4_9;
                        if (var13_14.done) {
                            var5_10 = var4_9;
                            if (!var8_5) {
                                var13_14 = var13_14.error;
                                var5_10 = var4_9;
                                if (var13_14 != null) {
                                    this.cancel();
                                    var10_3.onError((Throwable)var13_14);
                                    return;
                                }
                            }
                        }
                    }
                    var4_9 = var5_10;
                }
                var13_14 = ObjectHelper.requireNonNull(this.zipper.apply((Object[])var12_4.clone()), "The zipper returned a null value");
                var10_3.onNext(var13_14);
                break;
            } while (true);
            catch (Throwable var11_2) {
                Exceptions.throwIfFatal(var11_2);
                this.cancel();
                var10_3.onError(var11_2);
                return;
            }
            {
                Arrays.fill(var12_4, null);
                ** while (true)
            }
        }

        @Override
        public boolean isDisposed() {
            return this.cancelled;
        }

        public void subscribe(ObservableSource<? extends T>[] arrobservableSource, int n) {
            ZipObserver<T, R>[] arrzipObserver = this.observers;
            int n2 = arrzipObserver.length;
            int n3 = 0;
            for (int i = 0; i < n2; ++i) {
                arrzipObserver[i] = new ZipObserver(this, n);
            }
            this.lazySet(0);
            this.actual.onSubscribe(this);
            for (n = n3; n < n2; ++n) {
                if (this.cancelled) {
                    return;
                }
                arrobservableSource[n].subscribe(arrzipObserver[n]);
            }
        }
    }

    static final class ZipObserver<T, R>
    implements Observer<T> {
        volatile boolean done;
        Throwable error;
        final ZipCoordinator<T, R> parent;
        final SpscLinkedArrayQueue<T> queue;
        final AtomicReference<Disposable> s = new AtomicReference();

        ZipObserver(ZipCoordinator<T, R> zipCoordinator, int n) {
            this.parent = zipCoordinator;
            this.queue = new SpscLinkedArrayQueue(n);
        }

        public void dispose() {
            DisposableHelper.dispose(this.s);
        }

        @Override
        public void onComplete() {
            this.done = true;
            this.parent.drain();
        }

        @Override
        public void onError(Throwable throwable) {
            this.error = throwable;
            this.done = true;
            this.parent.drain();
        }

        @Override
        public void onNext(T t) {
            this.queue.offer(t);
            this.parent.drain();
        }

        @Override
        public void onSubscribe(Disposable disposable) {
            DisposableHelper.setOnce(this.s, disposable);
        }
    }

}

