/*
 * Decompiled with CFR 0_132.
 */
package io.reactivex.internal.operators.observable;

import io.reactivex.ObservableSource;
import io.reactivex.Observer;
import io.reactivex.disposables.Disposable;
import io.reactivex.exceptions.Exceptions;
import io.reactivex.functions.Function;
import io.reactivex.internal.disposables.DisposableHelper;
import io.reactivex.internal.functions.ObjectHelper;
import io.reactivex.internal.operators.observable.AbstractObservableWithUpstream;
import io.reactivex.internal.operators.observable.ObservableScalarXMap;
import io.reactivex.internal.queue.SpscLinkedArrayQueue;
import io.reactivex.internal.util.AtomicThrowable;
import io.reactivex.plugins.RxJavaPlugins;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicReference;

public final class ObservableSwitchMap<T, R>
extends AbstractObservableWithUpstream<T, R> {
    final int bufferSize;
    final boolean delayErrors;
    final Function<? super T, ? extends ObservableSource<? extends R>> mapper;

    public ObservableSwitchMap(ObservableSource<T> observableSource, Function<? super T, ? extends ObservableSource<? extends R>> function, int n, boolean bl) {
        super(observableSource);
        this.mapper = function;
        this.bufferSize = n;
        this.delayErrors = bl;
    }

    @Override
    public void subscribeActual(Observer<? super R> observer) {
        if (ObservableScalarXMap.tryScalarXMapSubscribe(this.source, observer, this.mapper)) {
            return;
        }
        this.source.subscribe(new SwitchMapObserver<T, R>(observer, this.mapper, this.bufferSize, this.delayErrors));
    }

    static final class SwitchMapInnerObserver<T, R>
    extends AtomicReference<Disposable>
    implements Observer<R> {
        private static final long serialVersionUID = 3837284832786408377L;
        volatile boolean done;
        final long index;
        final SwitchMapObserver<T, R> parent;
        final SpscLinkedArrayQueue<R> queue;

        SwitchMapInnerObserver(SwitchMapObserver<T, R> switchMapObserver, long l, int n) {
            this.parent = switchMapObserver;
            this.index = l;
            this.queue = new SpscLinkedArrayQueue(n);
        }

        public void cancel() {
            DisposableHelper.dispose(this);
        }

        @Override
        public void onComplete() {
            if (this.index == this.parent.unique) {
                this.done = true;
                this.parent.drain();
            }
        }

        @Override
        public void onError(Throwable throwable) {
            this.parent.innerError(this, throwable);
        }

        @Override
        public void onNext(R r) {
            if (this.index == this.parent.unique) {
                this.queue.offer(r);
                this.parent.drain();
            }
        }

        @Override
        public void onSubscribe(Disposable disposable) {
            DisposableHelper.setOnce(this, disposable);
        }
    }

    static final class SwitchMapObserver<T, R>
    extends AtomicInteger
    implements Observer<T>,
    Disposable {
        static final SwitchMapInnerObserver<Object, Object> CANCELLED = new SwitchMapInnerObserver(null, -1L, 1);
        private static final long serialVersionUID = -3491074160481096299L;
        final AtomicReference<SwitchMapInnerObserver<T, R>> active = new AtomicReference();
        final Observer<? super R> actual;
        final int bufferSize;
        volatile boolean cancelled;
        final boolean delayErrors;
        volatile boolean done;
        final AtomicThrowable errors;
        final Function<? super T, ? extends ObservableSource<? extends R>> mapper;
        Disposable s;
        volatile long unique;

        static {
            CANCELLED.cancel();
        }

        SwitchMapObserver(Observer<? super R> observer, Function<? super T, ? extends ObservableSource<? extends R>> function, int n, boolean bl) {
            this.actual = observer;
            this.mapper = function;
            this.bufferSize = n;
            this.delayErrors = bl;
            this.errors = new AtomicThrowable();
        }

        @Override
        public void dispose() {
            if (!this.cancelled) {
                this.cancelled = true;
                this.s.dispose();
                this.disposeInner();
            }
        }

        void disposeInner() {
            SwitchMapInnerObserver<Object, Object> switchMapInnerObserver;
            if (this.active.get() != CANCELLED && (switchMapInnerObserver = this.active.getAndSet(CANCELLED)) != CANCELLED && switchMapInnerObserver != null) {
                switchMapInnerObserver.cancel();
            }
        }

        /*
         * Enabled aggressive block sorting
         */
        void drain() {
            if (this.getAndIncrement() != 0) {
                return;
            }
            Observer<R> observer = this.actual;
            int n = 1;
            block0 : do {
                int n2;
                block23 : {
                    SwitchMapInnerObserver<T, R> switchMapInnerObserver;
                    if (this.cancelled) {
                        return;
                    }
                    boolean bl = this.done;
                    int n3 = 0;
                    if (bl) {
                        n2 = this.active.get() == null ? 1 : 0;
                        if (this.delayErrors) {
                            if (n2 != 0) {
                                Throwable throwable = (Throwable)this.errors.get();
                                if (throwable != null) {
                                    observer.onError(throwable);
                                    return;
                                }
                                observer.onComplete();
                                return;
                            }
                        } else {
                            if ((Throwable)this.errors.get() != null) {
                                observer.onError(this.errors.terminate());
                                return;
                            }
                            if (n2 != 0) {
                                observer.onComplete();
                                return;
                            }
                        }
                    }
                    if ((switchMapInnerObserver = this.active.get()) == null) break block23;
                    SpscLinkedArrayQueue spscLinkedArrayQueue = switchMapInnerObserver.queue;
                    if (switchMapInnerObserver.done) {
                        bl = spscLinkedArrayQueue.isEmpty();
                        if (this.delayErrors) {
                            if (bl) {
                                this.active.compareAndSet(switchMapInnerObserver, null);
                                continue;
                            }
                        } else {
                            if ((Throwable)this.errors.get() != null) {
                                observer.onError(this.errors.terminate());
                                return;
                            }
                            if (bl) {
                                this.active.compareAndSet(switchMapInnerObserver, null);
                                continue;
                            }
                        }
                    }
                    do {
                        Object r;
                        block28 : {
                            block27 : {
                                block25 : {
                                    block26 : {
                                        block24 : {
                                            if (this.cancelled) {
                                                return;
                                            }
                                            if (switchMapInnerObserver != this.active.get()) break block24;
                                            if (!this.delayErrors && (Throwable)this.errors.get() != null) {
                                                observer.onError(this.errors.terminate());
                                                return;
                                            }
                                            bl = switchMapInnerObserver.done;
                                            r = spscLinkedArrayQueue.poll();
                                            n2 = r == null ? 1 : 0;
                                            if (!bl) break block25;
                                            if (n2 == 0) break block26;
                                            this.active.compareAndSet(switchMapInnerObserver, null);
                                        }
                                        n2 = 1;
                                        break block27;
                                    }
                                    if (n2 == 0) break block28;
                                }
                                n2 = n3;
                            }
                            if (n2 == 0) break;
                            continue block0;
                        }
                        observer.onNext(r);
                    } while (true);
                }
                n = n2 = this.addAndGet(- n);
                if (n2 == 0) break;
            } while (true);
        }

        void innerError(SwitchMapInnerObserver<T, R> switchMapInnerObserver, Throwable throwable) {
            if (switchMapInnerObserver.index == this.unique && this.errors.addThrowable(throwable)) {
                if (!this.delayErrors) {
                    this.s.dispose();
                }
                switchMapInnerObserver.done = true;
                this.drain();
                return;
            }
            RxJavaPlugins.onError(throwable);
        }

        @Override
        public boolean isDisposed() {
            return this.cancelled;
        }

        @Override
        public void onComplete() {
            if (!this.done) {
                this.done = true;
                this.drain();
            }
        }

        @Override
        public void onError(Throwable throwable) {
            if (!this.done && this.errors.addThrowable(throwable)) {
                this.done = true;
                this.drain();
                return;
            }
            if (!this.delayErrors) {
                this.disposeInner();
            }
            RxJavaPlugins.onError(throwable);
        }

        @Override
        public void onNext(T object) {
            SwitchMapInnerObserver<T, R> switchMapInnerObserver;
            long l;
            this.unique = l = this.unique + 1L;
            SwitchMapInnerObserver<T, R> switchMapInnerObserver2 = this.active.get();
            if (switchMapInnerObserver2 != null) {
                switchMapInnerObserver2.cancel();
            }
            try {
                object = ObjectHelper.requireNonNull(this.mapper.apply(object), "The ObservableSource returned is null");
                switchMapInnerObserver2 = new SwitchMapInnerObserver(this, l, this.bufferSize);
            }
            catch (Throwable throwable) {
                Exceptions.throwIfFatal(throwable);
                this.s.dispose();
                this.onError(throwable);
                return;
            }
            do {
                if ((switchMapInnerObserver = this.active.get()) != CANCELLED) continue;
                return;
            } while (!this.active.compareAndSet(switchMapInnerObserver, switchMapInnerObserver2));
            object.subscribe(switchMapInnerObserver2);
            return;
        }

        @Override
        public void onSubscribe(Disposable disposable) {
            if (DisposableHelper.validate(this.s, disposable)) {
                this.s = disposable;
                this.actual.onSubscribe(this);
            }
        }
    }

}

