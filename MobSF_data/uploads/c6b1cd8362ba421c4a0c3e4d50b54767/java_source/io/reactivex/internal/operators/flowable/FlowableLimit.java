/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  org.reactivestreams.Subscriber
 *  org.reactivestreams.Subscription
 */
package io.reactivex.internal.operators.flowable;

import io.reactivex.Flowable;
import io.reactivex.FlowableSubscriber;
import io.reactivex.annotations.Experimental;
import io.reactivex.internal.operators.flowable.AbstractFlowableWithUpstream;
import io.reactivex.internal.subscriptions.EmptySubscription;
import io.reactivex.internal.subscriptions.SubscriptionHelper;
import io.reactivex.plugins.RxJavaPlugins;
import java.util.concurrent.atomic.AtomicLong;
import org.reactivestreams.Subscriber;
import org.reactivestreams.Subscription;

@Experimental
public final class FlowableLimit<T>
extends AbstractFlowableWithUpstream<T, T> {
    final long n;

    public FlowableLimit(Flowable<T> flowable, long l) {
        super(flowable);
        this.n = l;
    }

    @Override
    protected void subscribeActual(Subscriber<? super T> subscriber) {
        this.source.subscribe(new LimitSubscriber<T>(subscriber, this.n));
    }

    static final class LimitSubscriber<T>
    extends AtomicLong
    implements FlowableSubscriber<T>,
    Subscription {
        private static final long serialVersionUID = 2288246011222124525L;
        final Subscriber<? super T> actual;
        long remaining;
        Subscription upstream;

        LimitSubscriber(Subscriber<? super T> subscriber, long l) {
            this.actual = subscriber;
            this.remaining = l;
            this.lazySet(l);
        }

        public void cancel() {
            this.upstream.cancel();
        }

        public void onComplete() {
            if (this.remaining > 0L) {
                this.remaining = 0L;
                this.actual.onComplete();
            }
        }

        public void onError(Throwable throwable) {
            if (this.remaining > 0L) {
                this.remaining = 0L;
                this.actual.onError(throwable);
                return;
            }
            RxJavaPlugins.onError(throwable);
        }

        public void onNext(T t) {
            long l = this.remaining;
            if (l > 0L) {
                this.remaining = --l;
                this.actual.onNext(t);
                if (l == 0L) {
                    this.upstream.cancel();
                    this.actual.onComplete();
                }
            }
        }

        @Override
        public void onSubscribe(Subscription subscription) {
            if (SubscriptionHelper.validate(this.upstream, subscription)) {
                if (this.remaining == 0L) {
                    subscription.cancel();
                    EmptySubscription.complete(this.actual);
                    return;
                }
                this.upstream = subscription;
                this.actual.onSubscribe((Subscription)this);
            }
        }

        public void request(long l) {
            if (SubscriptionHelper.validate(l)) {
                long l2;
                long l3;
                do {
                    if ((l2 = this.get()) != 0L) continue;
                    return;
                } while (!this.compareAndSet(l2, l2 - (l3 = l2 <= l ? l2 : l)));
                this.upstream.request(l3);
            }
        }
    }

}

