/*
 * Decompiled with CFR 0_132.
 */
package io.reactivex.internal.operators.completable;

import io.reactivex.Completable;
import io.reactivex.CompletableObserver;
import io.reactivex.CompletableSource;
import io.reactivex.disposables.CompositeDisposable;
import io.reactivex.disposables.Disposable;
import io.reactivex.internal.util.AtomicThrowable;
import io.reactivex.plugins.RxJavaPlugins;
import java.util.concurrent.atomic.AtomicInteger;

public final class CompletableMergeDelayErrorArray
extends Completable {
    final CompletableSource[] sources;

    public CompletableMergeDelayErrorArray(CompletableSource[] arrcompletableSource) {
        this.sources = arrcompletableSource;
    }

    @Override
    public void subscribeActual(CompletableObserver completableObserver) {
        Object object = new CompositeDisposable();
        AtomicInteger atomicInteger = new AtomicInteger(this.sources.length + 1);
        AtomicThrowable atomicThrowable = new AtomicThrowable();
        completableObserver.onSubscribe((Disposable)object);
        for (CompletableSource completableSource : this.sources) {
            if (object.isDisposed()) {
                return;
            }
            if (completableSource == null) {
                atomicThrowable.addThrowable(new NullPointerException("A completable source is null"));
                atomicInteger.decrementAndGet();
                continue;
            }
            completableSource.subscribe(new MergeInnerCompletableObserver(completableObserver, (CompositeDisposable)object, atomicThrowable, atomicInteger));
        }
        if (atomicInteger.decrementAndGet() == 0) {
            object = atomicThrowable.terminate();
            if (object == null) {
                completableObserver.onComplete();
                return;
            }
            completableObserver.onError((Throwable)object);
        }
    }

    static final class MergeInnerCompletableObserver
    implements CompletableObserver {
        final CompletableObserver actual;
        final AtomicThrowable error;
        final CompositeDisposable set;
        final AtomicInteger wip;

        MergeInnerCompletableObserver(CompletableObserver completableObserver, CompositeDisposable compositeDisposable, AtomicThrowable atomicThrowable, AtomicInteger atomicInteger) {
            this.actual = completableObserver;
            this.set = compositeDisposable;
            this.error = atomicThrowable;
            this.wip = atomicInteger;
        }

        @Override
        public void onComplete() {
            this.tryTerminate();
        }

        @Override
        public void onError(Throwable throwable) {
            if (this.error.addThrowable(throwable)) {
                this.tryTerminate();
                return;
            }
            RxJavaPlugins.onError(throwable);
        }

        @Override
        public void onSubscribe(Disposable disposable) {
            this.set.add(disposable);
        }

        void tryTerminate() {
            if (this.wip.decrementAndGet() == 0) {
                Throwable throwable = this.error.terminate();
                if (throwable == null) {
                    this.actual.onComplete();
                    return;
                }
                this.actual.onError(throwable);
            }
        }
    }

}

