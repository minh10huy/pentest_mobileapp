/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  org.reactivestreams.Subscriber
 *  org.reactivestreams.Subscription
 */
package io.reactivex.internal.operators.parallel;

import io.reactivex.exceptions.Exceptions;
import io.reactivex.functions.BiFunction;
import io.reactivex.internal.functions.ObjectHelper;
import io.reactivex.internal.subscribers.DeferredScalarSubscriber;
import io.reactivex.internal.subscriptions.EmptySubscription;
import io.reactivex.internal.subscriptions.SubscriptionHelper;
import io.reactivex.parallel.ParallelFlowable;
import io.reactivex.plugins.RxJavaPlugins;
import java.util.concurrent.Callable;
import org.reactivestreams.Subscriber;
import org.reactivestreams.Subscription;

public final class ParallelReduce<T, R>
extends ParallelFlowable<R> {
    final Callable<R> initialSupplier;
    final BiFunction<R, ? super T, R> reducer;
    final ParallelFlowable<? extends T> source;

    public ParallelReduce(ParallelFlowable<? extends T> parallelFlowable, Callable<R> callable, BiFunction<R, ? super T, R> biFunction) {
        this.source = parallelFlowable;
        this.initialSupplier = callable;
        this.reducer = biFunction;
    }

    @Override
    public int parallelism() {
        return this.source.parallelism();
    }

    void reportError(Subscriber<?>[] arrsubscriber, Throwable throwable) {
        int n = arrsubscriber.length;
        for (int i = 0; i < n; ++i) {
            EmptySubscription.error(throwable, arrsubscriber[i]);
        }
    }

    @Override
    public void subscribe(Subscriber<? super R>[] arrsubscriber) {
        if (!this.validate(arrsubscriber)) {
            return;
        }
        int n = arrsubscriber.length;
        Subscriber[] arrsubscriber2 = new Subscriber[n];
        for (int i = 0; i < n; ++i) {
            try {
                R r = ObjectHelper.requireNonNull(this.initialSupplier.call(), "The initialSupplier returned a null value");
                arrsubscriber2[i] = new ParallelReduceSubscriber<T, R>(arrsubscriber[i], (R)r, (BiFunction<? super R, ? super T, ? super R>)this.reducer);
            }
            catch (Throwable throwable) {
                Exceptions.throwIfFatal(throwable);
                this.reportError(arrsubscriber, throwable);
                return;
            }
        }
        this.source.subscribe(arrsubscriber2);
    }

    static final class ParallelReduceSubscriber<T, R>
    extends DeferredScalarSubscriber<T, R> {
        private static final long serialVersionUID = 8200530050639449080L;
        R accumulator;
        boolean done;
        final BiFunction<R, ? super T, R> reducer;

        ParallelReduceSubscriber(Subscriber<? super R> subscriber, R r, BiFunction<R, ? super T, R> biFunction) {
            super(subscriber);
            this.accumulator = r;
            this.reducer = biFunction;
        }

        @Override
        public void cancel() {
            super.cancel();
            this.s.cancel();
        }

        @Override
        public void onComplete() {
            if (!this.done) {
                this.done = true;
                R r = this.accumulator;
                this.accumulator = null;
                this.complete(r);
            }
        }

        @Override
        public void onError(Throwable throwable) {
            if (this.done) {
                RxJavaPlugins.onError(throwable);
                return;
            }
            this.done = true;
            this.accumulator = null;
            this.actual.onError(throwable);
        }

        public void onNext(T object) {
            if (!this.done) {
                try {
                    object = ObjectHelper.requireNonNull(this.reducer.apply(this.accumulator, object), "The reducer returned a null value");
                    this.accumulator = object;
                    return;
                }
                catch (Throwable throwable) {
                    Exceptions.throwIfFatal(throwable);
                    this.cancel();
                    this.onError(throwable);
                    return;
                }
            }
        }

        @Override
        public void onSubscribe(Subscription subscription) {
            if (SubscriptionHelper.validate(this.s, subscription)) {
                this.s = subscription;
                this.actual.onSubscribe((Subscription)this);
                subscription.request(Long.MAX_VALUE);
            }
        }
    }

}

