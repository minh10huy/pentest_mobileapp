/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  org.reactivestreams.Subscriber
 *  org.reactivestreams.Subscription
 */
package io.reactivex.internal.operators.flowable;

import io.reactivex.Flowable;
import io.reactivex.FlowableSubscriber;
import io.reactivex.annotations.NonNull;
import io.reactivex.annotations.Nullable;
import io.reactivex.exceptions.Exceptions;
import io.reactivex.functions.Function;
import io.reactivex.internal.functions.ObjectHelper;
import io.reactivex.internal.queue.SpscLinkedArrayQueue;
import io.reactivex.internal.subscriptions.BasicIntQueueSubscription;
import io.reactivex.internal.subscriptions.SubscriptionHelper;
import io.reactivex.internal.util.BackpressureHelper;
import io.reactivex.internal.util.ExceptionHelper;
import io.reactivex.plugins.RxJavaPlugins;
import java.util.concurrent.atomic.AtomicLong;
import java.util.concurrent.atomic.AtomicReference;
import org.reactivestreams.Publisher;
import org.reactivestreams.Subscriber;
import org.reactivestreams.Subscription;

public final class FlowableCombineLatest<T, R>
extends Flowable<R> {
    @Nullable
    final Publisher<? extends T>[] array;
    final int bufferSize;
    final Function<? super Object[], ? extends R> combiner;
    final boolean delayErrors;
    @Nullable
    final Iterable<? extends Publisher<? extends T>> iterable;

    public FlowableCombineLatest(@NonNull Iterable<? extends Publisher<? extends T>> iterable, @NonNull Function<? super Object[], ? extends R> function, int n, boolean bl) {
        this.array = null;
        this.iterable = iterable;
        this.combiner = function;
        this.bufferSize = n;
        this.delayErrors = bl;
    }

    public FlowableCombineLatest(@NonNull Publisher<? extends T>[] arrpublisher, @NonNull Function<? super Object[], ? extends R> function, int n, boolean bl) {
        this.array = arrpublisher;
        this.iterable = null;
        this.combiner = function;
        this.bufferSize = n;
        this.delayErrors = bl;
    }

    /*
     * Exception decompiling
     */
    @Override
    public void subscribeActual(Subscriber<? super R> var1_1) {
        // This method has failed to decompile.  When submitting a bug report, please provide this stack trace, and (if you hold appropriate legal rights) the relevant class file.
        // org.benf.cfr.reader.util.ConfusedCFRException: Tried to end blocks [6[UNCONDITIONALDOLOOP]], but top level block is 10[SIMPLE_IF_TAKEN]
        // org.benf.cfr.reader.bytecode.analysis.opgraph.Op04StructuredStatement.processEndingBlocks(Op04StructuredStatement.java:416)
        // org.benf.cfr.reader.bytecode.analysis.opgraph.Op04StructuredStatement.buildNestedBlocks(Op04StructuredStatement.java:468)
        // org.benf.cfr.reader.bytecode.analysis.opgraph.Op03SimpleStatement.createInitialStructuredBlock(Op03SimpleStatement.java:2960)
        // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisInner(CodeAnalyser.java:818)
        // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisOrWrapFail(CodeAnalyser.java:196)
        // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysis(CodeAnalyser.java:141)
        // org.benf.cfr.reader.entities.attributes.AttributeCode.analyse(AttributeCode.java:95)
        // org.benf.cfr.reader.entities.Method.analyse(Method.java:372)
        // org.benf.cfr.reader.entities.ClassFile.analyseMid(ClassFile.java:867)
        // org.benf.cfr.reader.entities.ClassFile.analyseTop(ClassFile.java:768)
        // org.benf.cfr.reader.Main.doJar(Main.java:141)
        // org.benf.cfr.reader.Main.main(Main.java:242)
        throw new IllegalStateException("Decompilation failed");
    }

    static final class CombineLatestCoordinator<T, R>
    extends BasicIntQueueSubscription<R> {
        private static final long serialVersionUID = -5082275438355852221L;
        final Subscriber<? super R> actual;
        volatile boolean cancelled;
        final Function<? super Object[], ? extends R> combiner;
        int completedSources;
        final boolean delayErrors;
        volatile boolean done;
        final AtomicReference<Throwable> error;
        final Object[] latest;
        int nonEmptySources;
        boolean outputFused;
        final SpscLinkedArrayQueue<Object> queue;
        final AtomicLong requested;
        final CombineLatestInnerSubscriber<T>[] subscribers;

        CombineLatestCoordinator(Subscriber<? super R> arrcombineLatestInnerSubscriber, Function<? super Object[], ? extends R> function, int n, int n2, boolean bl) {
            this.actual = arrcombineLatestInnerSubscriber;
            this.combiner = function;
            arrcombineLatestInnerSubscriber = new CombineLatestInnerSubscriber[n];
            for (int i = 0; i < n; ++i) {
                arrcombineLatestInnerSubscriber[i] = new CombineLatestInnerSubscriber(this, i, n2);
            }
            this.subscribers = arrcombineLatestInnerSubscriber;
            this.latest = new Object[n];
            this.queue = new SpscLinkedArrayQueue(n2);
            this.requested = new AtomicLong();
            this.error = new AtomicReference();
            this.delayErrors = bl;
        }

        public void cancel() {
            this.cancelled = true;
            this.cancelAll();
        }

        void cancelAll() {
            CombineLatestInnerSubscriber<T>[] arrcombineLatestInnerSubscriber = this.subscribers;
            int n = arrcombineLatestInnerSubscriber.length;
            for (int i = 0; i < n; ++i) {
                arrcombineLatestInnerSubscriber[i].cancel();
            }
        }

        boolean checkTerminated(boolean bl, boolean bl2, Subscriber<?> subscriber, SpscLinkedArrayQueue<?> object) {
            if (this.cancelled) {
                this.cancelAll();
                object.clear();
                return true;
            }
            if (bl) {
                if (this.delayErrors) {
                    if (bl2) {
                        this.cancelAll();
                        object = ExceptionHelper.terminate(this.error);
                        if (object != null && object != ExceptionHelper.TERMINATED) {
                            subscriber.onError((Throwable)object);
                            return true;
                        }
                        subscriber.onComplete();
                        return true;
                    }
                } else {
                    Throwable throwable = ExceptionHelper.terminate(this.error);
                    if (throwable != null && throwable != ExceptionHelper.TERMINATED) {
                        this.cancelAll();
                        object.clear();
                        subscriber.onError(throwable);
                        return true;
                    }
                    if (bl2) {
                        this.cancelAll();
                        subscriber.onComplete();
                        return true;
                    }
                }
            }
            return false;
        }

        @Override
        public void clear() {
            this.queue.clear();
        }

        void drain() {
            if (this.getAndIncrement() != 0) {
                return;
            }
            if (this.outputFused) {
                this.drainOutput();
                return;
            }
            this.drainAsync();
        }

        void drainAsync() {
            int n;
            Subscriber<? super R> subscriber = this.actual;
            SpscLinkedArrayQueue<Object> spscLinkedArrayQueue = this.queue;
            int n2 = 1;
            do {
                long l;
                long l2 = this.requested.get();
                for (l = 0L; l != l2; ++l) {
                    boolean bl = this.done;
                    Object object = spscLinkedArrayQueue.poll();
                    boolean bl2 = object == null;
                    if (this.checkTerminated(bl, bl2, subscriber, spscLinkedArrayQueue)) {
                        return;
                    }
                    if (bl2) break;
                    Object object2 = (Object[])spscLinkedArrayQueue.poll();
                    try {
                        object2 = ObjectHelper.requireNonNull(this.combiner.apply((Object[])object2), "The combiner returned a null value");
                    }
                    catch (Throwable throwable) {
                        Exceptions.throwIfFatal(throwable);
                        this.cancelAll();
                        ExceptionHelper.addThrowable(this.error, throwable);
                        subscriber.onError(ExceptionHelper.terminate(this.error));
                        return;
                    }
                    subscriber.onNext(object2);
                    ((CombineLatestInnerSubscriber)object).requestOne();
                }
                if (l == l2 && this.checkTerminated(this.done, spscLinkedArrayQueue.isEmpty(), subscriber, spscLinkedArrayQueue)) {
                    return;
                }
                if (l != 0L && l2 != Long.MAX_VALUE) {
                    this.requested.addAndGet(- l);
                }
                n2 = n = this.addAndGet(- n2);
            } while (n != 0);
        }

        void drainOutput() {
            int n;
            Subscriber<? super R> subscriber = this.actual;
            SpscLinkedArrayQueue<Object> spscLinkedArrayQueue = this.queue;
            int n2 = 1;
            do {
                if (this.cancelled) {
                    spscLinkedArrayQueue.clear();
                    return;
                }
                Throwable throwable = this.error.get();
                if (throwable != null) {
                    spscLinkedArrayQueue.clear();
                    subscriber.onError(throwable);
                    return;
                }
                boolean bl = this.done;
                boolean bl2 = spscLinkedArrayQueue.isEmpty();
                if (!bl2) {
                    subscriber.onNext(null);
                }
                if (bl && bl2) {
                    subscriber.onComplete();
                    return;
                }
                n2 = n = this.addAndGet(- n2);
            } while (n != 0);
        }

        /*
         * Enabled aggressive block sorting
         * Enabled unnecessary exception pruning
         * Enabled aggressive exception aggregation
         */
        void innerComplete(int n) {
            synchronized (this) {
                Object[] arrobject = this.latest;
                if (arrobject[n] != null) {
                    n = this.completedSources + 1;
                    if (n != arrobject.length) {
                        this.completedSources = n;
                        return;
                    }
                    this.done = true;
                } else {
                    this.done = true;
                }
            }
            this.drain();
        }

        void innerError(int n, Throwable throwable) {
            if (ExceptionHelper.addThrowable(this.error, throwable)) {
                if (!this.delayErrors) {
                    this.cancelAll();
                    this.done = true;
                    this.drain();
                    return;
                }
                this.innerComplete(n);
                return;
            }
            RxJavaPlugins.onError(throwable);
        }

        /*
         * Enabled aggressive block sorting
         * Enabled unnecessary exception pruning
         * Enabled aggressive exception aggregation
         * Converted monitor instructions to comments
         * Lifted jumps to return sites
         */
        void innerValue(int n, T t) {
            int n2;
            // MONITORENTER : this
            Object[] arrobject = this.latest;
            int n3 = n2 = this.nonEmptySources;
            if (arrobject[n] == null) {
                this.nonEmptySources = n3 = n2 + 1;
            }
            arrobject[n] = t;
            if (arrobject.length == n3) {
                this.queue.offer(this.subscribers[n], arrobject.clone());
                n3 = 0;
            } else {
                n3 = 1;
            }
            // MONITOREXIT : this
            if (n3 != 0) {
                this.subscribers[n].requestOne();
                return;
            }
            this.drain();
        }

        @Override
        public boolean isEmpty() {
            return this.queue.isEmpty();
        }

        @Nullable
        @Override
        public R poll() throws Exception {
            Object object = this.queue.poll();
            if (object == null) {
                return null;
            }
            Object object2 = (Object[])this.queue.poll();
            object2 = ObjectHelper.requireNonNull(this.combiner.apply((Object[])object2), "The combiner returned a null value");
            ((CombineLatestInnerSubscriber)object).requestOne();
            return (R)object2;
        }

        public void request(long l) {
            if (SubscriptionHelper.validate(l)) {
                BackpressureHelper.add(this.requested, l);
                this.drain();
            }
        }

        @Override
        public int requestFusion(int n) {
            boolean bl = false;
            if ((n & 4) != 0) {
                return 0;
            }
            if ((n &= 2) != 0) {
                bl = true;
            }
            this.outputFused = bl;
            return n;
        }

        void subscribe(Publisher<? extends T>[] arrpublisher, int n) {
            CombineLatestInnerSubscriber<T>[] arrcombineLatestInnerSubscriber = this.subscribers;
            for (int i = 0; i < n; ++i) {
                if (!this.done) {
                    if (this.cancelled) {
                        return;
                    }
                    arrpublisher[i].subscribe(arrcombineLatestInnerSubscriber[i]);
                    continue;
                }
                return;
            }
        }
    }

    static final class CombineLatestInnerSubscriber<T>
    extends AtomicReference<Subscription>
    implements FlowableSubscriber<T> {
        private static final long serialVersionUID = -8730235182291002949L;
        final int index;
        final int limit;
        final CombineLatestCoordinator<T, ?> parent;
        final int prefetch;
        int produced;

        CombineLatestInnerSubscriber(CombineLatestCoordinator<T, ?> combineLatestCoordinator, int n, int n2) {
            this.parent = combineLatestCoordinator;
            this.index = n;
            this.prefetch = n2;
            this.limit = n2 - (n2 >> 2);
        }

        public void cancel() {
            SubscriptionHelper.cancel(this);
        }

        public void onComplete() {
            this.parent.innerComplete(this.index);
        }

        public void onError(Throwable throwable) {
            this.parent.innerError(this.index, throwable);
        }

        public void onNext(T t) {
            this.parent.innerValue(this.index, t);
        }

        @Override
        public void onSubscribe(Subscription subscription) {
            if (SubscriptionHelper.setOnce(this, subscription)) {
                subscription.request((long)this.prefetch);
            }
        }

        public void requestOne() {
            int n = this.produced + 1;
            if (n == this.limit) {
                this.produced = 0;
                ((Subscription)this.get()).request((long)n);
                return;
            }
            this.produced = n;
        }
    }

    final class SingletonArrayFunc
    implements Function<T, R> {
        SingletonArrayFunc() {
        }

        @Override
        public R apply(T t) throws Exception {
            return FlowableCombineLatest.this.combiner.apply((Object[])new Object[]{t});
        }
    }

}

