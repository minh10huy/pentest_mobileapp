/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  org.reactivestreams.Subscriber
 *  org.reactivestreams.Subscription
 */
package io.reactivex.internal.operators.flowable;

import io.reactivex.Flowable;
import io.reactivex.FlowableSubscriber;
import io.reactivex.annotations.Nullable;
import io.reactivex.functions.Predicate;
import io.reactivex.internal.fuseable.ConditionalSubscriber;
import io.reactivex.internal.fuseable.QueueSubscription;
import io.reactivex.internal.operators.flowable.AbstractFlowableWithUpstream;
import io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber;
import io.reactivex.internal.subscribers.BasicFuseableSubscriber;
import org.reactivestreams.Subscriber;
import org.reactivestreams.Subscription;

public final class FlowableFilter<T>
extends AbstractFlowableWithUpstream<T, T> {
    final Predicate<? super T> predicate;

    public FlowableFilter(Flowable<T> flowable, Predicate<? super T> predicate) {
        super(flowable);
        this.predicate = predicate;
    }

    @Override
    protected void subscribeActual(Subscriber<? super T> subscriber) {
        if (subscriber instanceof ConditionalSubscriber) {
            this.source.subscribe(new FilterConditionalSubscriber<T>((ConditionalSubscriber)subscriber, this.predicate));
            return;
        }
        this.source.subscribe(new FilterSubscriber<T>(subscriber, this.predicate));
    }

    static final class FilterConditionalSubscriber<T>
    extends BasicFuseableConditionalSubscriber<T, T> {
        final Predicate<? super T> filter;

        FilterConditionalSubscriber(ConditionalSubscriber<? super T> conditionalSubscriber, Predicate<? super T> predicate) {
            super(conditionalSubscriber);
            this.filter = predicate;
        }

        public void onNext(T t) {
            if (!this.tryOnNext(t)) {
                this.s.request(1L);
            }
        }

        @Nullable
        @Override
        public T poll() throws Exception {
            QueueSubscription queueSubscription = this.qs;
            Predicate predicate = this.filter;
            Object t;
            while ((t = queueSubscription.poll()) != null) {
                if (predicate.test(t)) {
                    return t;
                }
                if (this.sourceMode != 2) continue;
                queueSubscription.request(1L);
            }
            return null;
        }

        @Override
        public int requestFusion(int n) {
            return this.transitiveBoundaryFusion(n);
        }

        @Override
        public boolean tryOnNext(T t) {
            if (this.done) {
                return false;
            }
            if (this.sourceMode != 0) {
                return this.actual.tryOnNext(null);
            }
            try {
                boolean bl = this.filter.test(t);
                if (bl && this.actual.tryOnNext(t)) {
                    return true;
                }
                return false;
            }
            catch (Throwable throwable) {
                this.fail(throwable);
                return true;
            }
        }
    }

    static final class FilterSubscriber<T>
    extends BasicFuseableSubscriber<T, T>
    implements ConditionalSubscriber<T> {
        final Predicate<? super T> filter;

        FilterSubscriber(Subscriber<? super T> subscriber, Predicate<? super T> predicate) {
            super(subscriber);
            this.filter = predicate;
        }

        public void onNext(T t) {
            if (!this.tryOnNext(t)) {
                this.s.request(1L);
            }
        }

        @Nullable
        @Override
        public T poll() throws Exception {
            QueueSubscription queueSubscription = this.qs;
            Predicate predicate = this.filter;
            Object t;
            while ((t = queueSubscription.poll()) != null) {
                if (predicate.test(t)) {
                    return t;
                }
                if (this.sourceMode != 2) continue;
                queueSubscription.request(1L);
            }
            return null;
        }

        @Override
        public int requestFusion(int n) {
            return this.transitiveBoundaryFusion(n);
        }

        @Override
        public boolean tryOnNext(T t) {
            boolean bl;
            block4 : {
                if (this.done) {
                    return false;
                }
                if (this.sourceMode != 0) {
                    this.actual.onNext(null);
                    return true;
                }
                try {
                    bl = this.filter.test(t);
                    if (!bl) break block4;
                }
                catch (Throwable throwable) {
                    this.fail(throwable);
                    return true;
                }
                this.actual.onNext(t);
            }
            return bl;
        }
    }

}

