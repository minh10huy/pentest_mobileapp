/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  org.reactivestreams.Subscriber
 *  org.reactivestreams.Subscription
 */
package io.reactivex.internal.operators.flowable;

import io.reactivex.Flowable;
import io.reactivex.FlowableSubscriber;
import io.reactivex.exceptions.Exceptions;
import io.reactivex.functions.Function;
import io.reactivex.internal.functions.ObjectHelper;
import io.reactivex.internal.fuseable.QueueSubscription;
import io.reactivex.internal.fuseable.SimpleQueue;
import io.reactivex.internal.operators.flowable.AbstractFlowableWithUpstream;
import io.reactivex.internal.operators.flowable.FlowableScalarXMap;
import io.reactivex.internal.queue.SpscArrayQueue;
import io.reactivex.internal.subscriptions.SubscriptionArbiter;
import io.reactivex.internal.subscriptions.SubscriptionHelper;
import io.reactivex.internal.util.AtomicThrowable;
import io.reactivex.internal.util.ErrorMode;
import io.reactivex.plugins.RxJavaPlugins;
import java.util.concurrent.Callable;
import java.util.concurrent.atomic.AtomicInteger;
import org.reactivestreams.Publisher;
import org.reactivestreams.Subscriber;
import org.reactivestreams.Subscription;

public final class FlowableConcatMap<T, R>
extends AbstractFlowableWithUpstream<T, R> {
    final ErrorMode errorMode;
    final Function<? super T, ? extends Publisher<? extends R>> mapper;
    final int prefetch;

    public FlowableConcatMap(Flowable<T> flowable, Function<? super T, ? extends Publisher<? extends R>> function, int n, ErrorMode errorMode) {
        super(flowable);
        this.mapper = function;
        this.prefetch = n;
        this.errorMode = errorMode;
    }

    public static <T, R> Subscriber<T> subscribe(Subscriber<? super R> subscriber, Function<? super T, ? extends Publisher<? extends R>> function, int n, ErrorMode errorMode) {
        switch (.$SwitchMap$io$reactivex$internal$util$ErrorMode[errorMode.ordinal()]) {
            default: {
                return new ConcatMapImmediate<T, R>(subscriber, function, n);
            }
            case 2: {
                return new ConcatMapDelayed<T, R>(subscriber, function, n, true);
            }
            case 1: 
        }
        return new ConcatMapDelayed<T, R>(subscriber, function, n, false);
    }

    @Override
    protected void subscribeActual(Subscriber<? super R> subscriber) {
        if (FlowableScalarXMap.tryScalarXMapSubscribe(this.source, subscriber, this.mapper)) {
            return;
        }
        this.source.subscribe(FlowableConcatMap.subscribe(subscriber, this.mapper, this.prefetch, this.errorMode));
    }

    static abstract class BaseConcatMapSubscriber<T, R>
    extends AtomicInteger
    implements FlowableSubscriber<T>,
    ConcatMapSupport<R>,
    Subscription {
        private static final long serialVersionUID = -3511336836796789179L;
        volatile boolean active;
        volatile boolean cancelled;
        int consumed;
        volatile boolean done;
        final AtomicThrowable errors;
        final ConcatMapInner<R> inner;
        final int limit;
        final Function<? super T, ? extends Publisher<? extends R>> mapper;
        final int prefetch;
        SimpleQueue<T> queue;
        Subscription s;
        int sourceMode;

        BaseConcatMapSubscriber(Function<? super T, ? extends Publisher<? extends R>> function, int n) {
            this.mapper = function;
            this.prefetch = n;
            this.limit = n - (n >> 2);
            this.inner = new ConcatMapInner(this);
            this.errors = new AtomicThrowable();
        }

        abstract void drain();

        @Override
        public final void innerComplete() {
            this.active = false;
            this.drain();
        }

        public final void onComplete() {
            this.done = true;
            this.drain();
        }

        public final void onNext(T t) {
            if (this.sourceMode != 2 && !this.queue.offer(t)) {
                this.s.cancel();
                this.onError((Throwable)new IllegalStateException("Queue full?!"));
                return;
            }
            this.drain();
        }

        @Override
        public final void onSubscribe(Subscription subscription) {
            if (SubscriptionHelper.validate(this.s, subscription)) {
                this.s = subscription;
                if (subscription instanceof QueueSubscription) {
                    QueueSubscription queueSubscription = (QueueSubscription)subscription;
                    int n = queueSubscription.requestFusion(3);
                    if (n == 1) {
                        this.sourceMode = n;
                        this.queue = queueSubscription;
                        this.done = true;
                        this.subscribeActual();
                        this.drain();
                        return;
                    }
                    if (n == 2) {
                        this.sourceMode = n;
                        this.queue = queueSubscription;
                        this.subscribeActual();
                        subscription.request((long)this.prefetch);
                        return;
                    }
                }
                this.queue = new SpscArrayQueue<T>(this.prefetch);
                this.subscribeActual();
                subscription.request((long)this.prefetch);
            }
        }

        abstract void subscribeActual();
    }

    static final class ConcatMapDelayed<T, R>
    extends BaseConcatMapSubscriber<T, R> {
        private static final long serialVersionUID = -2945777694260521066L;
        final Subscriber<? super R> actual;
        final boolean veryEnd;

        ConcatMapDelayed(Subscriber<? super R> subscriber, Function<? super T, ? extends Publisher<? extends R>> function, int n, boolean bl) {
            super(function, n);
            this.actual = subscriber;
            this.veryEnd = bl;
        }

        public void cancel() {
            if (!this.cancelled) {
                this.cancelled = true;
                this.inner.cancel();
                this.s.cancel();
            }
        }

        @Override
        void drain() {
            block15 : {
                if (this.getAndIncrement() != 0) break block15;
                do {
                    block16 : {
                        Object object;
                        block17 : {
                            block14 : {
                                int n;
                                block12 : {
                                    block13 : {
                                        if (this.cancelled) {
                                            return;
                                        }
                                        if (this.active) break block16;
                                        boolean bl = this.done;
                                        if (bl && !this.veryEnd && (Throwable)this.errors.get() != null) {
                                            this.actual.onError(this.errors.terminate());
                                            return;
                                        }
                                        try {
                                            object = this.queue.poll();
                                            n = object == null ? 1 : 0;
                                            if (!bl || n == 0) break block12;
                                            object = this.errors.terminate();
                                            if (object == null) break block13;
                                        }
                                        catch (Throwable throwable) {
                                            Exceptions.throwIfFatal(throwable);
                                            this.s.cancel();
                                            this.errors.addThrowable(throwable);
                                            this.actual.onError(this.errors.terminate());
                                            return;
                                        }
                                        this.actual.onError(object);
                                        return;
                                    }
                                    this.actual.onComplete();
                                    return;
                                }
                                if (n != 0) break block16;
                                try {
                                    object = (Publisher)ObjectHelper.requireNonNull(this.mapper.apply(object), "The mapper returned a null Publisher");
                                    if (this.sourceMode == 1) break block14;
                                }
                                catch (Throwable throwable) {
                                    Exceptions.throwIfFatal(throwable);
                                    this.s.cancel();
                                    this.errors.addThrowable(throwable);
                                    this.actual.onError(this.errors.terminate());
                                    return;
                                }
                                n = this.consumed + 1;
                                if (n == this.limit) {
                                    this.consumed = 0;
                                    this.s.request((long)n);
                                } else {
                                    this.consumed = n;
                                }
                            }
                            if (!(object instanceof Callable)) break block17;
                            object = (Callable)object;
                            try {
                                if ((object = object.call()) == null) continue;
                            }
                            catch (Throwable throwable) {
                                Exceptions.throwIfFatal(throwable);
                                this.s.cancel();
                                this.errors.addThrowable(throwable);
                                this.actual.onError(this.errors.terminate());
                                return;
                            }
                            if (this.inner.isUnbounded()) {
                                this.actual.onNext(object);
                                continue;
                            }
                            this.active = true;
                            this.inner.setSubscription(new WeakScalarSubscription(object, this.inner));
                            break block16;
                        }
                        this.active = true;
                        object.subscribe(this.inner);
                    }
                    if (this.decrementAndGet() == 0) break;
                } while (true);
            }
        }

        @Override
        public void innerError(Throwable throwable) {
            if (this.errors.addThrowable(throwable)) {
                if (!this.veryEnd) {
                    this.s.cancel();
                    this.done = true;
                }
                this.active = false;
                this.drain();
                return;
            }
            RxJavaPlugins.onError(throwable);
        }

        @Override
        public void innerNext(R r) {
            this.actual.onNext(r);
        }

        public void onError(Throwable throwable) {
            if (this.errors.addThrowable(throwable)) {
                this.done = true;
                this.drain();
                return;
            }
            RxJavaPlugins.onError(throwable);
        }

        public void request(long l) {
            this.inner.request(l);
        }

        @Override
        void subscribeActual() {
            this.actual.onSubscribe((Subscription)this);
        }
    }

    static final class ConcatMapImmediate<T, R>
    extends BaseConcatMapSubscriber<T, R> {
        private static final long serialVersionUID = 7898995095634264146L;
        final Subscriber<? super R> actual;
        final AtomicInteger wip;

        ConcatMapImmediate(Subscriber<? super R> subscriber, Function<? super T, ? extends Publisher<? extends R>> function, int n) {
            super(function, n);
            this.actual = subscriber;
            this.wip = new AtomicInteger();
        }

        public void cancel() {
            if (!this.cancelled) {
                this.cancelled = true;
                this.inner.cancel();
                this.s.cancel();
            }
        }

        /*
         * Unable to fully structure code
         * Enabled aggressive block sorting
         * Enabled unnecessary exception pruning
         * Enabled aggressive exception aggregation
         * Lifted jumps to return sites
         */
        @Override
        void drain() {
            if (this.wip.getAndIncrement() != 0) return;
            do lbl-1000: // 5 sources:
            {
                block12 : {
                    block13 : {
                        block11 : {
                            block10 : {
                                if (this.cancelled) {
                                    return;
                                }
                                if (this.active) continue;
                                var2_2 = this.done;
                                try {
                                    var3_4 = this.queue.poll();
                                    var1_1 = var3_4 == null ? 1 : 0;
                                    if (!var2_2) continue;
                                    if (var1_1 == 0) break block10;
                                }
                                catch (Throwable var3_10) {
                                    Exceptions.throwIfFatal(var3_10);
                                    this.s.cancel();
                                    this.errors.addThrowable(var3_10);
                                    this.actual.onError(this.errors.terminate());
                                    return;
                                }
                                this.actual.onComplete();
                                return;
                            }
                            if (var1_1 != 0) continue;
                            try {
                                var3_5 = (Publisher)ObjectHelper.requireNonNull(this.mapper.apply(var3_4), "The mapper returned a null Publisher");
                                if (this.sourceMode == 1) break block11;
                            }
                            catch (Throwable var3_9) {
                                Exceptions.throwIfFatal(var3_9);
                                this.s.cancel();
                                this.errors.addThrowable(var3_9);
                                this.actual.onError(this.errors.terminate());
                                return;
                            }
                            var1_1 = this.consumed + 1;
                            if (var1_1 == this.limit) {
                                this.consumed = 0;
                                this.s.request((long)var1_1);
                            } else {
                                this.consumed = var1_1;
                            }
                        }
                        if (!(var3_5 instanceof Callable)) break block12;
                        var3_6 = (Callable)var3_5;
                        try {
                            var3_7 = var3_6.call();
                            if (var3_7 == null) ** GOTO lbl-1000
                        }
                        catch (Throwable var3_8) {
                            Exceptions.throwIfFatal(var3_8);
                            this.s.cancel();
                            this.errors.addThrowable(var3_8);
                            this.actual.onError(this.errors.terminate());
                            return;
                        }
                        if (!this.inner.isUnbounded()) break block13;
                        if (this.get() != 0 || !this.compareAndSet(0, 1)) ** GOTO lbl-1000
                        this.actual.onNext(var3_7);
                        if (this.compareAndSet(1, 0)) ** GOTO lbl-1000
                        this.actual.onError(this.errors.terminate());
                        return;
                    }
                    this.active = true;
                    this.inner.setSubscription(new WeakScalarSubscription<V>(var3_7, this.inner));
                    continue;
                }
                this.active = true;
                var3_5.subscribe(this.inner);
            } while (this.wip.decrementAndGet() != 0);
        }

        @Override
        public void innerError(Throwable throwable) {
            if (this.errors.addThrowable(throwable)) {
                this.s.cancel();
                if (this.getAndIncrement() == 0) {
                    this.actual.onError(this.errors.terminate());
                    return;
                }
            } else {
                RxJavaPlugins.onError(throwable);
            }
        }

        @Override
        public void innerNext(R r) {
            if (this.get() == 0 && this.compareAndSet(0, 1)) {
                this.actual.onNext(r);
                if (this.compareAndSet(1, 0)) {
                    return;
                }
                this.actual.onError(this.errors.terminate());
            }
        }

        public void onError(Throwable throwable) {
            if (this.errors.addThrowable(throwable)) {
                this.inner.cancel();
                if (this.getAndIncrement() == 0) {
                    this.actual.onError(this.errors.terminate());
                    return;
                }
            } else {
                RxJavaPlugins.onError(throwable);
            }
        }

        public void request(long l) {
            this.inner.request(l);
        }

        @Override
        void subscribeActual() {
            this.actual.onSubscribe((Subscription)this);
        }
    }

    static final class ConcatMapInner<R>
    extends SubscriptionArbiter
    implements FlowableSubscriber<R> {
        private static final long serialVersionUID = 897683679971470653L;
        final ConcatMapSupport<R> parent;
        long produced;

        ConcatMapInner(ConcatMapSupport<R> concatMapSupport) {
            this.parent = concatMapSupport;
        }

        public void onComplete() {
            long l = this.produced;
            if (l != 0L) {
                this.produced = 0L;
                this.produced(l);
            }
            this.parent.innerComplete();
        }

        public void onError(Throwable throwable) {
            long l = this.produced;
            if (l != 0L) {
                this.produced = 0L;
                this.produced(l);
            }
            this.parent.innerError(throwable);
        }

        public void onNext(R r) {
            ++this.produced;
            this.parent.innerNext(r);
        }

        @Override
        public void onSubscribe(Subscription subscription) {
            this.setSubscription(subscription);
        }
    }

    static interface ConcatMapSupport<T> {
        public void innerComplete();

        public void innerError(Throwable var1);

        public void innerNext(T var1);
    }

    static final class WeakScalarSubscription<T>
    implements Subscription {
        final Subscriber<? super T> actual;
        boolean once;
        final T value;

        WeakScalarSubscription(T t, Subscriber<? super T> subscriber) {
            this.value = t;
            this.actual = subscriber;
        }

        public void cancel() {
        }

        public void request(long l) {
            if (l > 0L && !this.once) {
                this.once = true;
                Subscriber<? super T> subscriber = this.actual;
                subscriber.onNext(this.value);
                subscriber.onComplete();
            }
        }
    }

}

