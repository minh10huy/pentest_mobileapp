/*
 * Decompiled with CFR 0_132.
 */
package io.reactivex.internal.operators.observable;

import io.reactivex.Observable;
import io.reactivex.Observer;
import io.reactivex.Scheduler;
import io.reactivex.disposables.Disposable;
import io.reactivex.internal.disposables.DisposableHelper;
import io.reactivex.internal.schedulers.TrampolineScheduler;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicReference;

public final class ObservableIntervalRange
extends Observable<Long> {
    final long end;
    final long initialDelay;
    final long period;
    final Scheduler scheduler;
    final long start;
    final TimeUnit unit;

    public ObservableIntervalRange(long l, long l2, long l3, long l4, TimeUnit timeUnit, Scheduler scheduler) {
        this.initialDelay = l3;
        this.period = l4;
        this.unit = timeUnit;
        this.scheduler = scheduler;
        this.start = l;
        this.end = l2;
    }

    @Override
    public void subscribeActual(Observer<? super Long> object) {
        IntervalRangeObserver intervalRangeObserver = new IntervalRangeObserver((Observer<? super Long>)object, this.start, this.end);
        object.onSubscribe(intervalRangeObserver);
        object = this.scheduler;
        if (object instanceof TrampolineScheduler) {
            object = object.createWorker();
            intervalRangeObserver.setResource((Disposable)object);
            object.schedulePeriodically(intervalRangeObserver, this.initialDelay, this.period, this.unit);
            return;
        }
        intervalRangeObserver.setResource(object.schedulePeriodicallyDirect(intervalRangeObserver, this.initialDelay, this.period, this.unit));
    }

    static final class IntervalRangeObserver
    extends AtomicReference<Disposable>
    implements Disposable,
    Runnable {
        private static final long serialVersionUID = 1891866368734007884L;
        final Observer<? super Long> actual;
        long count;
        final long end;

        IntervalRangeObserver(Observer<? super Long> observer, long l, long l2) {
            this.actual = observer;
            this.count = l;
            this.end = l2;
        }

        @Override
        public void dispose() {
            DisposableHelper.dispose(this);
        }

        @Override
        public boolean isDisposed() {
            if (this.get() == DisposableHelper.DISPOSED) {
                return true;
            }
            return false;
        }

        @Override
        public void run() {
            if (!this.isDisposed()) {
                long l = this.count;
                this.actual.onNext((Long)l);
                if (l == this.end) {
                    DisposableHelper.dispose(this);
                    this.actual.onComplete();
                    return;
                }
                this.count = l + 1L;
            }
        }

        public void setResource(Disposable disposable) {
            DisposableHelper.setOnce(this, disposable);
        }
    }

}

