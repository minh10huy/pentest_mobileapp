/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  org.reactivestreams.Processor
 *  org.reactivestreams.Subscriber
 *  org.reactivestreams.Subscription
 */
package io.reactivex.internal.operators.flowable;

import io.reactivex.Flowable;
import io.reactivex.FlowableSubscriber;
import io.reactivex.internal.operators.flowable.AbstractFlowableWithUpstream;
import io.reactivex.internal.queue.SpscLinkedArrayQueue;
import io.reactivex.internal.subscriptions.SubscriptionHelper;
import io.reactivex.internal.util.BackpressureHelper;
import io.reactivex.plugins.RxJavaPlugins;
import io.reactivex.processors.UnicastProcessor;
import java.util.ArrayDeque;
import java.util.Iterator;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
import org.reactivestreams.Processor;
import org.reactivestreams.Subscriber;
import org.reactivestreams.Subscription;

public final class FlowableWindow<T>
extends AbstractFlowableWithUpstream<T, Flowable<T>> {
    final int bufferSize;
    final long size;
    final long skip;

    public FlowableWindow(Flowable<T> flowable, long l, long l2, int n) {
        super(flowable);
        this.size = l;
        this.skip = l2;
        this.bufferSize = n;
    }

    @Override
    public void subscribeActual(Subscriber<? super Flowable<T>> subscriber) {
        if (this.skip == this.size) {
            this.source.subscribe(new WindowExactSubscriber(subscriber, this.size, this.bufferSize));
            return;
        }
        if (this.skip > this.size) {
            this.source.subscribe(new WindowSkipSubscriber(subscriber, this.size, this.skip, this.bufferSize));
            return;
        }
        this.source.subscribe(new WindowOverlapSubscriber(subscriber, this.size, this.skip, this.bufferSize));
    }

    static final class WindowExactSubscriber<T>
    extends AtomicInteger
    implements FlowableSubscriber<T>,
    Subscription,
    Runnable {
        private static final long serialVersionUID = -2365647875069161133L;
        final Subscriber<? super Flowable<T>> actual;
        final int bufferSize;
        long index;
        final AtomicBoolean once;
        Subscription s;
        final long size;
        UnicastProcessor<T> window;

        WindowExactSubscriber(Subscriber<? super Flowable<T>> subscriber, long l, int n) {
            super(1);
            this.actual = subscriber;
            this.size = l;
            this.once = new AtomicBoolean();
            this.bufferSize = n;
        }

        public void cancel() {
            if (this.once.compareAndSet(false, true)) {
                this.run();
            }
        }

        public void onComplete() {
            UnicastProcessor<T> unicastProcessor = this.window;
            if (unicastProcessor != null) {
                this.window = null;
                unicastProcessor.onComplete();
            }
            this.actual.onComplete();
        }

        public void onError(Throwable throwable) {
            UnicastProcessor<T> unicastProcessor = this.window;
            if (unicastProcessor != null) {
                this.window = null;
                unicastProcessor.onError(throwable);
            }
            this.actual.onError(throwable);
        }

        public void onNext(T t) {
            long l = this.index;
            UnicastProcessor<T> unicastProcessor = this.window;
            if (l == 0L) {
                this.getAndIncrement();
                unicastProcessor = UnicastProcessor.create(this.bufferSize, this);
                this.window = unicastProcessor;
                this.actual.onNext(unicastProcessor);
            }
            unicastProcessor.onNext(t);
            if (++l == this.size) {
                this.index = 0L;
                this.window = null;
                unicastProcessor.onComplete();
                return;
            }
            this.index = l;
        }

        @Override
        public void onSubscribe(Subscription subscription) {
            if (SubscriptionHelper.validate(this.s, subscription)) {
                this.s = subscription;
                this.actual.onSubscribe((Subscription)this);
            }
        }

        public void request(long l) {
            if (SubscriptionHelper.validate(l)) {
                l = BackpressureHelper.multiplyCap(this.size, l);
                this.s.request(l);
            }
        }

        @Override
        public void run() {
            if (this.decrementAndGet() == 0) {
                this.s.cancel();
            }
        }
    }

    static final class WindowOverlapSubscriber<T>
    extends AtomicInteger
    implements FlowableSubscriber<T>,
    Subscription,
    Runnable {
        private static final long serialVersionUID = 2428527070996323976L;
        final Subscriber<? super Flowable<T>> actual;
        final int bufferSize;
        volatile boolean cancelled;
        volatile boolean done;
        Throwable error;
        final AtomicBoolean firstRequest;
        long index;
        final AtomicBoolean once;
        long produced;
        final SpscLinkedArrayQueue<UnicastProcessor<T>> queue;
        final AtomicLong requested;
        Subscription s;
        final long size;
        final long skip;
        final ArrayDeque<UnicastProcessor<T>> windows;
        final AtomicInteger wip;

        WindowOverlapSubscriber(Subscriber<? super Flowable<T>> subscriber, long l, long l2, int n) {
            super(1);
            this.actual = subscriber;
            this.size = l;
            this.skip = l2;
            this.queue = new SpscLinkedArrayQueue(n);
            this.windows = new ArrayDeque();
            this.once = new AtomicBoolean();
            this.firstRequest = new AtomicBoolean();
            this.requested = new AtomicLong();
            this.wip = new AtomicInteger();
            this.bufferSize = n;
        }

        public void cancel() {
            this.cancelled = true;
            if (this.once.compareAndSet(false, true)) {
                this.run();
            }
        }

        boolean checkTerminated(boolean bl, boolean bl2, Subscriber<?> subscriber, SpscLinkedArrayQueue<?> spscLinkedArrayQueue) {
            if (this.cancelled) {
                spscLinkedArrayQueue.clear();
                return true;
            }
            if (bl) {
                Throwable throwable = this.error;
                if (throwable != null) {
                    spscLinkedArrayQueue.clear();
                    subscriber.onError(throwable);
                    return true;
                }
                if (bl2) {
                    subscriber.onComplete();
                    return true;
                }
            }
            return false;
        }

        void drain() {
            int n;
            if (this.wip.getAndIncrement() != 0) {
                return;
            }
            Subscriber<? super Flowable<T>> subscriber = this.actual;
            SpscLinkedArrayQueue<UnicastProcessor<T>> spscLinkedArrayQueue = this.queue;
            int n2 = 1;
            do {
                long l;
                long l2 = this.requested.get();
                for (l = 0L; l != l2; ++l) {
                    boolean bl = this.done;
                    UnicastProcessor<T> unicastProcessor = spscLinkedArrayQueue.poll();
                    boolean bl2 = unicastProcessor == null;
                    if (this.checkTerminated(bl, bl2, subscriber, spscLinkedArrayQueue)) {
                        return;
                    }
                    if (bl2) break;
                    subscriber.onNext(unicastProcessor);
                }
                if (l == l2 && this.checkTerminated(this.done, spscLinkedArrayQueue.isEmpty(), subscriber, spscLinkedArrayQueue)) {
                    return;
                }
                if (l != 0L && l2 != Long.MAX_VALUE) {
                    this.requested.addAndGet(- l);
                }
                n2 = n = this.wip.addAndGet(- n2);
            } while (n != 0);
        }

        public void onComplete() {
            if (this.done) {
                return;
            }
            Iterator<UnicastProcessor<T>> iterator = this.windows.iterator();
            while (iterator.hasNext()) {
                ((Processor)iterator.next()).onComplete();
            }
            this.windows.clear();
            this.done = true;
            this.drain();
        }

        public void onError(Throwable throwable) {
            if (this.done) {
                RxJavaPlugins.onError(throwable);
                return;
            }
            Iterator<UnicastProcessor<T>> iterator = this.windows.iterator();
            while (iterator.hasNext()) {
                ((Processor)iterator.next()).onError(throwable);
            }
            this.windows.clear();
            this.error = throwable;
            this.done = true;
            this.drain();
        }

        public void onNext(T object) {
            Object object2;
            if (this.done) {
                return;
            }
            long l = this.index;
            if (l == 0L && !this.cancelled) {
                this.getAndIncrement();
                object2 = UnicastProcessor.create(this.bufferSize, this);
                this.windows.offer((UnicastProcessor<T>)object2);
                this.queue.offer((UnicastProcessor<Object>)object2);
                this.drain();
            }
            ++l;
            object2 = this.windows.iterator();
            while (object2.hasNext()) {
                ((Processor)object2.next()).onNext(object);
            }
            long l2 = this.produced + 1L;
            if (l2 == this.size) {
                this.produced = l2 - this.skip;
                object = this.windows.poll();
                if (object != null) {
                    object.onComplete();
                }
            } else {
                this.produced = l2;
            }
            if (l == this.skip) {
                this.index = 0L;
                return;
            }
            this.index = l;
        }

        @Override
        public void onSubscribe(Subscription subscription) {
            if (SubscriptionHelper.validate(this.s, subscription)) {
                this.s = subscription;
                this.actual.onSubscribe((Subscription)this);
            }
        }

        public void request(long l) {
            if (SubscriptionHelper.validate(l)) {
                BackpressureHelper.add(this.requested, l);
                if (!this.firstRequest.get() && this.firstRequest.compareAndSet(false, true)) {
                    l = BackpressureHelper.multiplyCap(this.skip, l - 1L);
                    l = BackpressureHelper.addCap(this.size, l);
                    this.s.request(l);
                } else {
                    l = BackpressureHelper.multiplyCap(this.skip, l);
                    this.s.request(l);
                }
                this.drain();
            }
        }

        @Override
        public void run() {
            if (this.decrementAndGet() == 0) {
                this.s.cancel();
            }
        }
    }

    static final class WindowSkipSubscriber<T>
    extends AtomicInteger
    implements FlowableSubscriber<T>,
    Subscription,
    Runnable {
        private static final long serialVersionUID = -8792836352386833856L;
        final Subscriber<? super Flowable<T>> actual;
        final int bufferSize;
        final AtomicBoolean firstRequest;
        long index;
        final AtomicBoolean once;
        Subscription s;
        final long size;
        final long skip;
        UnicastProcessor<T> window;

        WindowSkipSubscriber(Subscriber<? super Flowable<T>> subscriber, long l, long l2, int n) {
            super(1);
            this.actual = subscriber;
            this.size = l;
            this.skip = l2;
            this.once = new AtomicBoolean();
            this.firstRequest = new AtomicBoolean();
            this.bufferSize = n;
        }

        public void cancel() {
            if (this.once.compareAndSet(false, true)) {
                this.run();
            }
        }

        public void onComplete() {
            UnicastProcessor<T> unicastProcessor = this.window;
            if (unicastProcessor != null) {
                this.window = null;
                unicastProcessor.onComplete();
            }
            this.actual.onComplete();
        }

        public void onError(Throwable throwable) {
            UnicastProcessor<T> unicastProcessor = this.window;
            if (unicastProcessor != null) {
                this.window = null;
                unicastProcessor.onError(throwable);
            }
            this.actual.onError(throwable);
        }

        public void onNext(T t) {
            long l = this.index;
            UnicastProcessor<T> unicastProcessor = this.window;
            if (l == 0L) {
                this.getAndIncrement();
                unicastProcessor = UnicastProcessor.create(this.bufferSize, this);
                this.window = unicastProcessor;
                this.actual.onNext(unicastProcessor);
            }
            ++l;
            if (unicastProcessor != null) {
                unicastProcessor.onNext(t);
            }
            if (l == this.size) {
                this.window = null;
                unicastProcessor.onComplete();
            }
            if (l == this.skip) {
                this.index = 0L;
                return;
            }
            this.index = l;
        }

        @Override
        public void onSubscribe(Subscription subscription) {
            if (SubscriptionHelper.validate(this.s, subscription)) {
                this.s = subscription;
                this.actual.onSubscribe((Subscription)this);
            }
        }

        public void request(long l) {
            if (SubscriptionHelper.validate(l)) {
                if (!this.firstRequest.get() && this.firstRequest.compareAndSet(false, true)) {
                    l = BackpressureHelper.addCap(BackpressureHelper.multiplyCap(this.size, l), BackpressureHelper.multiplyCap(this.skip - this.size, l - 1L));
                    this.s.request(l);
                    return;
                }
                l = BackpressureHelper.multiplyCap(this.skip, l);
                this.s.request(l);
            }
        }

        @Override
        public void run() {
            if (this.decrementAndGet() == 0) {
                this.s.cancel();
            }
        }
    }

}

