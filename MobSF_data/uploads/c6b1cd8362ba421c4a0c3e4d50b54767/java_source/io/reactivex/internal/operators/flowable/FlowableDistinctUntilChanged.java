/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  org.reactivestreams.Subscriber
 *  org.reactivestreams.Subscription
 */
package io.reactivex.internal.operators.flowable;

import io.reactivex.Flowable;
import io.reactivex.FlowableSubscriber;
import io.reactivex.annotations.Nullable;
import io.reactivex.functions.BiPredicate;
import io.reactivex.functions.Function;
import io.reactivex.internal.fuseable.ConditionalSubscriber;
import io.reactivex.internal.fuseable.QueueSubscription;
import io.reactivex.internal.operators.flowable.AbstractFlowableWithUpstream;
import io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber;
import io.reactivex.internal.subscribers.BasicFuseableSubscriber;
import org.reactivestreams.Subscriber;
import org.reactivestreams.Subscription;

public final class FlowableDistinctUntilChanged<T, K>
extends AbstractFlowableWithUpstream<T, T> {
    final BiPredicate<? super K, ? super K> comparer;
    final Function<? super T, K> keySelector;

    public FlowableDistinctUntilChanged(Flowable<T> flowable, Function<? super T, K> function, BiPredicate<? super K, ? super K> biPredicate) {
        super(flowable);
        this.keySelector = function;
        this.comparer = biPredicate;
    }

    @Override
    protected void subscribeActual(Subscriber<? super T> conditionalSubscriber) {
        if (conditionalSubscriber instanceof ConditionalSubscriber) {
            conditionalSubscriber = conditionalSubscriber;
            this.source.subscribe(new DistinctUntilChangedConditionalSubscriber<T, K>(conditionalSubscriber, this.keySelector, this.comparer));
            return;
        }
        this.source.subscribe(new DistinctUntilChangedSubscriber<T, K>(conditionalSubscriber, this.keySelector, this.comparer));
    }

    static final class DistinctUntilChangedConditionalSubscriber<T, K>
    extends BasicFuseableConditionalSubscriber<T, T> {
        final BiPredicate<? super K, ? super K> comparer;
        boolean hasValue;
        final Function<? super T, K> keySelector;
        K last;

        DistinctUntilChangedConditionalSubscriber(ConditionalSubscriber<? super T> conditionalSubscriber, Function<? super T, K> function, BiPredicate<? super K, ? super K> biPredicate) {
            super(conditionalSubscriber);
            this.keySelector = function;
            this.comparer = biPredicate;
        }

        public void onNext(T t) {
            if (!this.tryOnNext(t)) {
                this.s.request(1L);
            }
        }

        @Nullable
        @Override
        public T poll() throws Exception {
            Object t;
            while ((t = this.qs.poll()) != null) {
                K k = this.keySelector.apply(t);
                if (!this.hasValue) {
                    this.hasValue = true;
                    this.last = k;
                    return t;
                }
                if (!this.comparer.test(this.last, k)) {
                    this.last = k;
                    return t;
                }
                this.last = k;
                if (this.sourceMode == 1) continue;
                this.s.request(1L);
            }
            return null;
        }

        @Override
        public int requestFusion(int n) {
            return this.transitiveBoundaryFusion(n);
        }

        @Override
        public boolean tryOnNext(T t) {
            block7 : {
                K k;
                block6 : {
                    if (this.done) {
                        return false;
                    }
                    if (this.sourceMode != 0) {
                        return this.actual.tryOnNext(t);
                    }
                    try {
                        k = this.keySelector.apply(t);
                        if (!this.hasValue) break block6;
                        boolean bl = this.comparer.test(this.last, k);
                        this.last = k;
                        if (bl) {
                            return false;
                        }
                        break block7;
                    }
                    catch (Throwable throwable) {
                        this.fail(throwable);
                        return true;
                    }
                }
                this.hasValue = true;
                this.last = k;
            }
            this.actual.onNext(t);
            return true;
        }
    }

    static final class DistinctUntilChangedSubscriber<T, K>
    extends BasicFuseableSubscriber<T, T>
    implements ConditionalSubscriber<T> {
        final BiPredicate<? super K, ? super K> comparer;
        boolean hasValue;
        final Function<? super T, K> keySelector;
        K last;

        DistinctUntilChangedSubscriber(Subscriber<? super T> subscriber, Function<? super T, K> function, BiPredicate<? super K, ? super K> biPredicate) {
            super(subscriber);
            this.keySelector = function;
            this.comparer = biPredicate;
        }

        public void onNext(T t) {
            if (!this.tryOnNext(t)) {
                this.s.request(1L);
            }
        }

        @Nullable
        @Override
        public T poll() throws Exception {
            Object t;
            while ((t = this.qs.poll()) != null) {
                K k = this.keySelector.apply(t);
                if (!this.hasValue) {
                    this.hasValue = true;
                    this.last = k;
                    return t;
                }
                if (!this.comparer.test(this.last, k)) {
                    this.last = k;
                    return t;
                }
                this.last = k;
                if (this.sourceMode == 1) continue;
                this.s.request(1L);
            }
            return null;
        }

        @Override
        public int requestFusion(int n) {
            return this.transitiveBoundaryFusion(n);
        }

        @Override
        public boolean tryOnNext(T t) {
            block7 : {
                K k;
                block6 : {
                    if (this.done) {
                        return false;
                    }
                    if (this.sourceMode != 0) {
                        this.actual.onNext(t);
                        return true;
                    }
                    try {
                        k = this.keySelector.apply(t);
                        if (!this.hasValue) break block6;
                        boolean bl = this.comparer.test(this.last, k);
                        this.last = k;
                        if (bl) {
                            return false;
                        }
                        break block7;
                    }
                    catch (Throwable throwable) {
                        this.fail(throwable);
                        return true;
                    }
                }
                this.hasValue = true;
                this.last = k;
            }
            this.actual.onNext(t);
            return true;
        }
    }

}

