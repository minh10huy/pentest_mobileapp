/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  org.reactivestreams.Subscriber
 *  org.reactivestreams.Subscription
 */
package io.reactivex.internal.operators.flowable;

import io.reactivex.Flowable;
import io.reactivex.FlowableSubscriber;
import io.reactivex.Scheduler;
import io.reactivex.disposables.Disposable;
import io.reactivex.internal.operators.flowable.AbstractFlowableWithUpstream;
import io.reactivex.internal.subscriptions.SubscriptionHelper;
import io.reactivex.subscribers.SerializedSubscriber;
import java.util.concurrent.TimeUnit;
import org.reactivestreams.Subscriber;
import org.reactivestreams.Subscription;

public final class FlowableDelay<T>
extends AbstractFlowableWithUpstream<T, T> {
    final long delay;
    final boolean delayError;
    final Scheduler scheduler;
    final TimeUnit unit;

    public FlowableDelay(Flowable<T> flowable, long l, TimeUnit timeUnit, Scheduler scheduler, boolean bl) {
        super(flowable);
        this.delay = l;
        this.unit = timeUnit;
        this.scheduler = scheduler;
        this.delayError = bl;
    }

    @Override
    protected void subscribeActual(Subscriber<? super T> subscriber) {
        if (!this.delayError) {
            subscriber = new SerializedSubscriber<T>(subscriber);
        }
        Scheduler.Worker worker = this.scheduler.createWorker();
        this.source.subscribe(new DelaySubscriber<T>(subscriber, this.delay, this.unit, worker, this.delayError));
    }

    static final class DelaySubscriber<T>
    implements FlowableSubscriber<T>,
    Subscription {
        final Subscriber<? super T> actual;
        final long delay;
        final boolean delayError;
        Subscription s;
        final TimeUnit unit;
        final Scheduler.Worker w;

        DelaySubscriber(Subscriber<? super T> subscriber, long l, TimeUnit timeUnit, Scheduler.Worker worker, boolean bl) {
            this.actual = subscriber;
            this.delay = l;
            this.unit = timeUnit;
            this.w = worker;
            this.delayError = bl;
        }

        public void cancel() {
            this.s.cancel();
            this.w.dispose();
        }

        public void onComplete() {
            this.w.schedule(new OnComplete(), this.delay, this.unit);
        }

        public void onError(Throwable object) {
            Scheduler.Worker worker = this.w;
            object = new OnError((Throwable)object);
            long l = this.delayError ? this.delay : 0L;
            worker.schedule((Runnable)object, l, this.unit);
        }

        public void onNext(T t) {
            this.w.schedule(new OnNext(t), this.delay, this.unit);
        }

        @Override
        public void onSubscribe(Subscription subscription) {
            if (SubscriptionHelper.validate(this.s, subscription)) {
                this.s = subscription;
                this.actual.onSubscribe((Subscription)this);
            }
        }

        public void request(long l) {
            this.s.request(l);
        }

        final class OnComplete
        implements Runnable {
            OnComplete() {
            }

            @Override
            public void run() {
                try {
                    DelaySubscriber.this.actual.onComplete();
                    return;
                }
                finally {
                    DelaySubscriber.this.w.dispose();
                }
            }
        }

        final class OnError
        implements Runnable {
            private final Throwable t;

            OnError(Throwable throwable) {
                this.t = throwable;
            }

            @Override
            public void run() {
                try {
                    DelaySubscriber.this.actual.onError(this.t);
                    return;
                }
                finally {
                    DelaySubscriber.this.w.dispose();
                }
            }
        }

        final class OnNext
        implements Runnable {
            private final T t;

            OnNext(T t) {
                this.t = t;
            }

            @Override
            public void run() {
                DelaySubscriber.this.actual.onNext(this.t);
            }
        }

    }

}

