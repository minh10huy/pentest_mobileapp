/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  org.reactivestreams.Subscriber
 *  org.reactivestreams.Subscription
 */
package io.reactivex.internal.operators.flowable;

import io.reactivex.Flowable;
import io.reactivex.annotations.Nullable;
import io.reactivex.internal.fuseable.ConditionalSubscriber;
import io.reactivex.internal.subscriptions.BasicQueueSubscription;
import io.reactivex.internal.subscriptions.SubscriptionHelper;
import io.reactivex.internal.util.BackpressureHelper;
import org.reactivestreams.Subscriber;
import org.reactivestreams.Subscription;

public final class FlowableRangeLong
extends Flowable<Long> {
    final long end;
    final long start;

    public FlowableRangeLong(long l, long l2) {
        this.start = l;
        this.end = l + l2;
    }

    @Override
    public void subscribeActual(Subscriber<? super Long> subscriber) {
        if (subscriber instanceof ConditionalSubscriber) {
            subscriber.onSubscribe((Subscription)new RangeConditionalSubscription((ConditionalSubscriber)subscriber, this.start, this.end));
            return;
        }
        subscriber.onSubscribe((Subscription)new RangeSubscription(subscriber, this.start, this.end));
    }

    static abstract class BaseRangeSubscription
    extends BasicQueueSubscription<Long> {
        private static final long serialVersionUID = -2252972430506210021L;
        volatile boolean cancelled;
        final long end;
        long index;

        BaseRangeSubscription(long l, long l2) {
            this.index = l;
            this.end = l2;
        }

        public final void cancel() {
            this.cancelled = true;
        }

        @Override
        public final void clear() {
            this.index = this.end;
        }

        abstract void fastPath();

        @Override
        public final boolean isEmpty() {
            if (this.index == this.end) {
                return true;
            }
            return false;
        }

        @Nullable
        @Override
        public final Long poll() {
            long l = this.index;
            if (l == this.end) {
                return null;
            }
            this.index = l + 1L;
            return l;
        }

        public final void request(long l) {
            if (SubscriptionHelper.validate(l) && BackpressureHelper.add(this, l) == 0L) {
                if (l == Long.MAX_VALUE) {
                    this.fastPath();
                    return;
                }
                this.slowPath(l);
            }
        }

        @Override
        public final int requestFusion(int n) {
            return n & 1;
        }

        abstract void slowPath(long var1);
    }

    static final class RangeConditionalSubscription
    extends BaseRangeSubscription {
        private static final long serialVersionUID = 2587302975077663557L;
        final ConditionalSubscriber<? super Long> actual;

        RangeConditionalSubscription(ConditionalSubscriber<? super Long> conditionalSubscriber, long l, long l2) {
            super(l, l2);
            this.actual = conditionalSubscriber;
        }

        @Override
        void fastPath() {
            long l = this.end;
            ConditionalSubscriber<? super Long> conditionalSubscriber = this.actual;
            for (long i = this.index; i != l; ++i) {
                if (this.cancelled) {
                    return;
                }
                conditionalSubscriber.tryOnNext((Long)i);
            }
            if (this.cancelled) {
                return;
            }
            conditionalSubscriber.onComplete();
        }

        @Override
        void slowPath(long l) {
            long l2;
            long l3 = this.end;
            long l4 = this.index;
            ConditionalSubscriber<? super Long> conditionalSubscriber = this.actual;
            do {
                l2 = 0L;
                do {
                    long l5;
                    if (l2 != l && l4 != l3) {
                        if (this.cancelled) {
                            return;
                        }
                        l5 = l2;
                        if (conditionalSubscriber.tryOnNext((Long)l4)) {
                            l5 = l2 + 1L;
                        }
                        ++l4;
                        l2 = l5;
                        continue;
                    }
                    if (l4 == l3) {
                        if (!this.cancelled) {
                            conditionalSubscriber.onComplete();
                        }
                        return;
                    }
                    l = l5 = this.get();
                    if (l2 == l5) break;
                } while (true);
                this.index = l4;
                l = l2 = this.addAndGet(- l2);
            } while (l2 != 0L);
        }
    }

    static final class RangeSubscription
    extends BaseRangeSubscription {
        private static final long serialVersionUID = 2587302975077663557L;
        final Subscriber<? super Long> actual;

        RangeSubscription(Subscriber<? super Long> subscriber, long l, long l2) {
            super(l, l2);
            this.actual = subscriber;
        }

        @Override
        void fastPath() {
            long l = this.end;
            Subscriber<? super Long> subscriber = this.actual;
            for (long i = this.index; i != l; ++i) {
                if (this.cancelled) {
                    return;
                }
                subscriber.onNext((Object)i);
            }
            if (this.cancelled) {
                return;
            }
            subscriber.onComplete();
        }

        @Override
        void slowPath(long l) {
            long l2;
            long l3 = this.end;
            long l4 = this.index;
            Subscriber<? super Long> subscriber = this.actual;
            do {
                l2 = 0L;
                do {
                    long l5;
                    if (l2 != l && l4 != l3) {
                        if (this.cancelled) {
                            return;
                        }
                        subscriber.onNext((Object)l4);
                        ++l4;
                        ++l2;
                        continue;
                    }
                    if (l4 == l3) {
                        if (!this.cancelled) {
                            subscriber.onComplete();
                        }
                        return;
                    }
                    l = l5 = this.get();
                    if (l2 == l5) break;
                } while (true);
                this.index = l4;
                l = l2 = this.addAndGet(- l2);
            } while (l2 != 0L);
        }
    }

}

