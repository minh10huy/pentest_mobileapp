/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  org.reactivestreams.Subscriber
 *  org.reactivestreams.Subscription
 */
package io.reactivex.internal.operators.flowable;

import io.reactivex.Flowable;
import io.reactivex.FlowableSubscriber;
import io.reactivex.Scheduler;
import io.reactivex.disposables.Disposable;
import io.reactivex.exceptions.Exceptions;
import io.reactivex.flowables.ConnectableFlowable;
import io.reactivex.functions.Consumer;
import io.reactivex.functions.Function;
import io.reactivex.internal.functions.ObjectHelper;
import io.reactivex.internal.fuseable.HasUpstreamPublisher;
import io.reactivex.internal.subscribers.SubscriberResourceWrapper;
import io.reactivex.internal.subscriptions.EmptySubscription;
import io.reactivex.internal.subscriptions.SubscriptionHelper;
import io.reactivex.internal.util.BackpressureHelper;
import io.reactivex.internal.util.ExceptionHelper;
import io.reactivex.internal.util.NotificationLite;
import io.reactivex.plugins.RxJavaPlugins;
import io.reactivex.schedulers.Timed;
import java.util.ArrayList;
import java.util.Collection;
import java.util.concurrent.Callable;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
import java.util.concurrent.atomic.AtomicReference;
import org.reactivestreams.Publisher;
import org.reactivestreams.Subscriber;
import org.reactivestreams.Subscription;

public final class FlowableReplay<T>
extends ConnectableFlowable<T>
implements HasUpstreamPublisher<T>,
Disposable {
    static final Callable DEFAULT_UNBOUNDED_FACTORY = new DefaultUnboundedFactory();
    final Callable<? extends ReplayBuffer<T>> bufferFactory;
    final AtomicReference<ReplaySubscriber<T>> current;
    final Publisher<T> onSubscribe;
    final Flowable<T> source;

    private FlowableReplay(Publisher<T> publisher, Flowable<T> flowable, AtomicReference<ReplaySubscriber<T>> atomicReference, Callable<? extends ReplayBuffer<T>> callable) {
        this.onSubscribe = publisher;
        this.source = flowable;
        this.current = atomicReference;
        this.bufferFactory = callable;
    }

    public static <T> ConnectableFlowable<T> create(Flowable<T> flowable, int n) {
        if (n == Integer.MAX_VALUE) {
            return FlowableReplay.createFrom(flowable);
        }
        return FlowableReplay.create(flowable, new ReplayBufferTask(n));
    }

    public static <T> ConnectableFlowable<T> create(Flowable<T> flowable, long l, TimeUnit timeUnit, Scheduler scheduler) {
        return FlowableReplay.create(flowable, l, timeUnit, scheduler, Integer.MAX_VALUE);
    }

    public static <T> ConnectableFlowable<T> create(Flowable<T> flowable, long l, TimeUnit timeUnit, Scheduler scheduler, int n) {
        return FlowableReplay.create(flowable, new ScheduledReplayBufferTask(n, l, timeUnit, scheduler));
    }

    static <T> ConnectableFlowable<T> create(Flowable<T> flowable, Callable<? extends ReplayBuffer<T>> callable) {
        AtomicReference atomicReference = new AtomicReference();
        return RxJavaPlugins.onAssembly(new FlowableReplay(new ReplayPublisher(atomicReference, callable), flowable, atomicReference, callable));
    }

    public static <T> ConnectableFlowable<T> createFrom(Flowable<? extends T> flowable) {
        return FlowableReplay.create(flowable, DEFAULT_UNBOUNDED_FACTORY);
    }

    public static <U, R> Flowable<R> multicastSelector(Callable<? extends ConnectableFlowable<U>> callable, Function<? super Flowable<U>, ? extends Publisher<R>> function) {
        return Flowable.unsafeCreate(new MultiCastPublisher(callable, function));
    }

    public static <T> ConnectableFlowable<T> observeOn(ConnectableFlowable<T> connectableFlowable, Scheduler scheduler) {
        return RxJavaPlugins.onAssembly(new ConnectableFlowableReplay<T>(connectableFlowable, connectableFlowable.observeOn(scheduler)));
    }

    /*
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    @Override
    public void connect(Consumer<? super Disposable> consumer) {
        ReplaySubscriber replaySubscriber;
        do {
            ReplaySubscriber<T> replaySubscriber2;
            if ((replaySubscriber2 = this.current.get()) != null) {
                replaySubscriber = replaySubscriber2;
                if (!replaySubscriber2.isDisposed()) break;
            }
            replaySubscriber = this.bufferFactory.call();
            if (!this.current.compareAndSet(replaySubscriber2, replaySubscriber = new ReplaySubscriber(replaySubscriber))) continue;
            break;
        } while (true);
        boolean bl = !replaySubscriber.shouldConnect.get() && replaySubscriber.shouldConnect.compareAndSet(false, true);
        try {
            consumer.accept(replaySubscriber);
            if (!bl) return;
            this.source.subscribe(replaySubscriber);
            return;
        }
        catch (Throwable throwable) {
            if (bl) {
                replaySubscriber.shouldConnect.compareAndSet(true, false);
            }
            Exceptions.throwIfFatal(throwable);
            throw ExceptionHelper.wrapOrThrow(throwable);
        }
        catch (Throwable throwable) {
            Exceptions.throwIfFatal(throwable);
            throw ExceptionHelper.wrapOrThrow(throwable);
        }
    }

    @Override
    public void dispose() {
        this.current.lazySet(null);
    }

    @Override
    public boolean isDisposed() {
        Disposable disposable = this.current.get();
        if (disposable != null && !disposable.isDisposed()) {
            return false;
        }
        return true;
    }

    @Override
    public Publisher<T> source() {
        return this.source;
    }

    @Override
    protected void subscribeActual(Subscriber<? super T> subscriber) {
        this.onSubscribe.subscribe(subscriber);
    }

    static class BoundedReplayBuffer<T>
    extends AtomicReference<Node>
    implements ReplayBuffer<T> {
        private static final long serialVersionUID = 2346567790059478686L;
        long index;
        int size;
        Node tail;

        BoundedReplayBuffer() {
            Node node;
            this.tail = node = new Node(null, 0L);
            this.set(node);
        }

        final void addLast(Node node) {
            this.tail.set(node);
            this.tail = node;
            ++this.size;
        }

        final void collect(Collection<? super T> collection) {
            Object object;
            Node node = this.getHead();
            while ((node = (Node)node.get()) != null && !NotificationLite.isComplete(object = this.leaveTransform(node.value))) {
                if (NotificationLite.isError(object)) {
                    return;
                }
                collection.add(NotificationLite.getValue(object));
            }
        }

        @Override
        public final void complete() {
            long l;
            Object object = this.enterTransform(NotificationLite.complete());
            this.index = l = this.index + 1L;
            this.addLast(new Node(object, l));
            this.truncateFinal();
        }

        Object enterTransform(Object object) {
            return object;
        }

        @Override
        public final void error(Throwable object) {
            long l;
            object = this.enterTransform(NotificationLite.error((Throwable)object));
            this.index = l = this.index + 1L;
            this.addLast(new Node(object, l));
            this.truncateFinal();
        }

        Node getHead() {
            return (Node)this.get();
        }

        boolean hasCompleted() {
            if (this.tail.value != null && NotificationLite.isComplete(this.leaveTransform(this.tail.value))) {
                return true;
            }
            return false;
        }

        boolean hasError() {
            if (this.tail.value != null && NotificationLite.isError(this.leaveTransform(this.tail.value))) {
                return true;
            }
            return false;
        }

        Object leaveTransform(Object object) {
            return object;
        }

        @Override
        public final void next(T object) {
            long l;
            object = this.enterTransform(NotificationLite.next(object));
            this.index = l = this.index + 1L;
            this.addLast(new Node(object, l));
            this.truncate();
        }

        final void removeFirst() {
            Node node = (Node)((Node)this.get()).get();
            if (node == null) {
                throw new IllegalStateException("Empty list!");
            }
            --this.size;
            this.setFirst(node);
        }

        final void removeSome(int n) {
            Node node = (Node)this.get();
            while (n > 0) {
                node = (Node)node.get();
                --n;
                --this.size;
            }
            this.setFirst(node);
        }

        /*
         * Enabled aggressive block sorting
         * Enabled unnecessary exception pruning
         * Enabled aggressive exception aggregation
         */
        @Override
        public final void replay(InnerSubscription<T> innerSubscription) {
            synchronized (innerSubscription) {
                if (innerSubscription.emitting) {
                    innerSubscription.missed = true;
                    return;
                }
                innerSubscription.emitting = true;
            }
            while (!innerSubscription.isDisposed()) {
                long l = innerSubscription.get();
                boolean bl = l == Long.MAX_VALUE;
                Node node = (Node)innerSubscription.index();
                Object object = node;
                if (node == null) {
                    innerSubscription.index = object = this.getHead();
                    BackpressureHelper.add(innerSubscription.totalRequested, object.index);
                }
                long l2 = 0L;
                while (l != 0L) {
                    node = (Node)object.get();
                    if (node != null) {
                        object = this.leaveTransform(node.value);
                        try {
                            if (NotificationLite.accept(object, innerSubscription.child)) {
                                innerSubscription.index = null;
                                return;
                            }
                            if (innerSubscription.isDisposed()) {
                                return;
                            }
                            --l;
                            object = node;
                            ++l2;
                            continue;
                        }
                        catch (Throwable throwable) {
                            Exceptions.throwIfFatal(throwable);
                            innerSubscription.index = null;
                            innerSubscription.dispose();
                            if (!NotificationLite.isError(object) && !NotificationLite.isComplete(object)) {
                                innerSubscription.child.onError(throwable);
                            }
                            return;
                        }
                    }
                    if (l2 == 0L) break;
                    innerSubscription.index = object;
                    if (bl) break;
                    innerSubscription.produced(l2);
                    break;
                }
                synchronized (innerSubscription) {
                    if (!innerSubscription.missed) {
                        innerSubscription.emitting = false;
                        return;
                    }
                    innerSubscription.missed = false;
                }
            }
            return;
        }

        final void setFirst(Node node) {
            this.set(node);
        }

        void truncate() {
        }

        void truncateFinal() {
        }
    }

    static final class ConnectableFlowableReplay<T>
    extends ConnectableFlowable<T> {
        private final ConnectableFlowable<T> co;
        private final Flowable<T> observable;

        ConnectableFlowableReplay(ConnectableFlowable<T> connectableFlowable, Flowable<T> flowable) {
            this.co = connectableFlowable;
            this.observable = flowable;
        }

        @Override
        public void connect(Consumer<? super Disposable> consumer) {
            this.co.connect(consumer);
        }

        @Override
        protected void subscribeActual(Subscriber<? super T> subscriber) {
            this.observable.subscribe(subscriber);
        }
    }

    static final class DefaultUnboundedFactory
    implements Callable<Object> {
        DefaultUnboundedFactory() {
        }

        @Override
        public Object call() {
            return new UnboundedReplayBuffer(16);
        }
    }

    static final class InnerSubscription<T>
    extends AtomicLong
    implements Subscription,
    Disposable {
        static final long CANCELLED = Long.MIN_VALUE;
        private static final long serialVersionUID = -4453897557930727610L;
        final Subscriber<? super T> child;
        boolean emitting;
        Object index;
        boolean missed;
        final ReplaySubscriber<T> parent;
        final AtomicLong totalRequested;

        InnerSubscription(ReplaySubscriber<T> replaySubscriber, Subscriber<? super T> subscriber) {
            this.parent = replaySubscriber;
            this.child = subscriber;
            this.totalRequested = new AtomicLong();
        }

        public void cancel() {
            this.dispose();
        }

        @Override
        public void dispose() {
            if (this.getAndSet(Long.MIN_VALUE) != Long.MIN_VALUE) {
                this.parent.remove(this);
                this.parent.manageRequests();
            }
        }

        <U> U index() {
            return (U)this.index;
        }

        @Override
        public boolean isDisposed() {
            if (this.get() == Long.MIN_VALUE) {
                return true;
            }
            return false;
        }

        public long produced(long l) {
            return BackpressureHelper.producedCancel(this, l);
        }

        public void request(long l) {
            if (SubscriptionHelper.validate(l)) {
                long l2;
                do {
                    if ((l2 = this.get()) == Long.MIN_VALUE) {
                        return;
                    }
                    if (l2 < 0L || l != 0L) continue;
                    return;
                } while (!this.compareAndSet(l2, BackpressureHelper.addCap(l2, l)));
                BackpressureHelper.add(this.totalRequested, l);
                this.parent.manageRequests();
                this.parent.buffer.replay(this);
                return;
            }
        }
    }

    static final class MultiCastPublisher<R, U>
    implements Publisher<R> {
        private final Callable<? extends ConnectableFlowable<U>> connectableFactory;
        private final Function<? super Flowable<U>, ? extends Publisher<R>> selector;

        MultiCastPublisher(Callable<? extends ConnectableFlowable<U>> callable, Function<? super Flowable<U>, ? extends Publisher<R>> function) {
            this.connectableFactory = callable;
            this.selector = function;
        }

        @Override
        public void subscribe(Subscriber<? super R> subscriber) {
            ConnectableFlowable<U> connectableFlowable;
            try {
                connectableFlowable = ObjectHelper.requireNonNull(this.connectableFactory.call(), "The connectableFactory returned null");
            }
            catch (Throwable throwable) {
                Exceptions.throwIfFatal(throwable);
                EmptySubscription.error(throwable, subscriber);
                return;
            }
            try {
                Publisher<R> publisher = ObjectHelper.requireNonNull(this.selector.apply(connectableFlowable), "The selector returned a null Publisher");
                subscriber = new SubscriberResourceWrapper<R>(subscriber);
                publisher.subscribe(subscriber);
                connectableFlowable.connect(new DisposableConsumer(subscriber));
                return;
            }
            catch (Throwable throwable) {
                Exceptions.throwIfFatal(throwable);
                EmptySubscription.error(throwable, subscriber);
                return;
            }
        }

        final class DisposableConsumer
        implements Consumer<Disposable> {
            private final SubscriberResourceWrapper<R> srw;

            DisposableConsumer(SubscriberResourceWrapper<R> subscriberResourceWrapper) {
                this.srw = subscriberResourceWrapper;
            }

            @Override
            public void accept(Disposable disposable) {
                this.srw.setResource(disposable);
            }
        }

    }

    static final class Node
    extends AtomicReference<Node> {
        private static final long serialVersionUID = 245354315435971818L;
        final long index;
        final Object value;

        Node(Object object, long l) {
            this.value = object;
            this.index = l;
        }
    }

    static interface ReplayBuffer<T> {
        public void complete();

        public void error(Throwable var1);

        public void next(T var1);

        public void replay(InnerSubscription<T> var1);
    }

    static final class ReplayBufferTask<T>
    implements Callable<ReplayBuffer<T>> {
        private final int bufferSize;

        ReplayBufferTask(int n) {
            this.bufferSize = n;
        }

        @Override
        public ReplayBuffer<T> call() {
            return new SizeBoundReplayBuffer(this.bufferSize);
        }
    }

    static final class ReplayPublisher<T>
    implements Publisher<T> {
        private final Callable<? extends ReplayBuffer<T>> bufferFactory;
        private final AtomicReference<ReplaySubscriber<T>> curr;

        ReplayPublisher(AtomicReference<ReplaySubscriber<T>> atomicReference, Callable<? extends ReplayBuffer<T>> callable) {
            this.curr = atomicReference;
            this.bufferFactory = callable;
        }

        @Override
        public void subscribe(Subscriber<? super T> subscriber) {
            Disposable disposable;
            ReplaySubscriber replaySubscriber;
            do {
                disposable = this.curr.get();
                replaySubscriber = disposable;
                if (disposable != null) break;
                try {
                    replaySubscriber = this.bufferFactory.call();
                    replaySubscriber = new ReplaySubscriber(replaySubscriber);
                    if (this.curr.compareAndSet(null, replaySubscriber)) break;
                }
                catch (Throwable throwable) {
                    Exceptions.throwIfFatal(throwable);
                    throw ExceptionHelper.wrapOrThrow(throwable);
                }
            } while (true);
            disposable = new InnerSubscription<T>(replaySubscriber, subscriber);
            subscriber.onSubscribe(disposable);
            replaySubscriber.add(disposable);
            if (disposable.isDisposed()) {
                replaySubscriber.remove(disposable);
                return;
            }
            replaySubscriber.manageRequests();
            replaySubscriber.buffer.replay(disposable);
        }
    }

    static final class ReplaySubscriber<T>
    extends AtomicReference<Subscription>
    implements FlowableSubscriber<T>,
    Disposable {
        static final InnerSubscription[] EMPTY = new InnerSubscription[0];
        static final InnerSubscription[] TERMINATED = new InnerSubscription[0];
        private static final long serialVersionUID = 7224554242710036740L;
        final ReplayBuffer<T> buffer;
        boolean done;
        final AtomicInteger management;
        long maxChildRequested;
        long maxUpstreamRequested;
        final AtomicBoolean shouldConnect;
        final AtomicReference<InnerSubscription<T>[]> subscribers;

        ReplaySubscriber(ReplayBuffer<T> replayBuffer) {
            this.buffer = replayBuffer;
            this.management = new AtomicInteger();
            this.subscribers = new AtomicReference<InnerSubscription[]>(EMPTY);
            this.shouldConnect = new AtomicBoolean();
        }

        boolean add(InnerSubscription<T> innerSubscription) {
            InnerSubscription[] arrinnerSubscription;
            InnerSubscription<T>[] arrinnerSubscription2;
            if (innerSubscription == null) {
                throw new NullPointerException();
            }
            do {
                if ((arrinnerSubscription2 = this.subscribers.get()) == TERMINATED) {
                    return false;
                }
                int n = arrinnerSubscription2.length;
                arrinnerSubscription = new InnerSubscription[n + 1];
                System.arraycopy(arrinnerSubscription2, 0, arrinnerSubscription, 0, n);
                arrinnerSubscription[n] = innerSubscription;
            } while (!this.subscribers.compareAndSet(arrinnerSubscription2, arrinnerSubscription));
            return true;
        }

        @Override
        public void dispose() {
            this.subscribers.set(TERMINATED);
            SubscriptionHelper.cancel(this);
        }

        @Override
        public boolean isDisposed() {
            if (this.subscribers.get() == TERMINATED) {
                return true;
            }
            return false;
        }

        void manageRequests() {
            int n;
            if (this.management.getAndIncrement() != 0) {
                return;
            }
            int n2 = 1;
            do {
                if (this.isDisposed()) {
                    return;
                }
                Subscription subscription = this.subscribers.get();
                long l = this.maxChildRequested;
                int n3 = ((InnerSubscription<T>[])subscription).length;
                long l2 = l;
                for (n = 0; n < n3; ++n) {
                    l2 = Math.max(l2, subscription[n].totalRequested.get());
                }
                long l3 = this.maxUpstreamRequested;
                subscription = (Subscription)this.get();
                if ((l = l2 - l) != 0L) {
                    this.maxChildRequested = l2;
                    if (subscription != null) {
                        if (l3 != 0L) {
                            this.maxUpstreamRequested = 0L;
                            subscription.request(l3 + l);
                        } else {
                            subscription.request(l);
                        }
                    } else {
                        l2 = l = l3 + l;
                        if (l < 0L) {
                            l2 = Long.MAX_VALUE;
                        }
                        this.maxUpstreamRequested = l2;
                    }
                } else if (l3 != 0L && subscription != null) {
                    this.maxUpstreamRequested = 0L;
                    subscription.request(l3);
                }
                n2 = n = this.management.addAndGet(- n2);
            } while (n != 0);
        }

        public void onComplete() {
            if (!this.done) {
                this.done = true;
                this.buffer.complete();
                for (InnerSubscription innerSubscription : this.subscribers.getAndSet(TERMINATED)) {
                    this.buffer.replay(innerSubscription);
                }
            }
        }

        public void onError(Throwable arrinnerSubscription) {
            if (!this.done) {
                this.done = true;
                this.buffer.error((Throwable)arrinnerSubscription);
                for (InnerSubscription innerSubscription : this.subscribers.getAndSet(TERMINATED)) {
                    this.buffer.replay(innerSubscription);
                }
            } else {
                RxJavaPlugins.onError((Throwable)arrinnerSubscription);
            }
        }

        public void onNext(T object) {
            if (!this.done) {
                this.buffer.next(object);
                for (InnerSubscription<T> t : this.subscribers.get()) {
                    this.buffer.replay(t);
                }
            }
        }

        @Override
        public void onSubscribe(Subscription arrinnerSubscription) {
            if (SubscriptionHelper.setOnce(this, (Subscription)arrinnerSubscription)) {
                this.manageRequests();
                for (InnerSubscription<T> innerSubscription : this.subscribers.get()) {
                    this.buffer.replay(innerSubscription);
                }
            }
        }

        void remove(InnerSubscription<T> innerSubscription) {
            InnerSubscription<T>[] arrinnerSubscription;
            InnerSubscription[] arrinnerSubscription2;
            do {
                int n;
                int n2;
                if ((n2 = (arrinnerSubscription = this.subscribers.get()).length) == 0) {
                    return;
                }
                int n3 = -1;
                int n4 = 0;
                do {
                    n = n3;
                    if (n4 >= n2) break;
                    if (arrinnerSubscription[n4].equals(innerSubscription)) {
                        n = n4;
                        break;
                    }
                    ++n4;
                } while (true);
                if (n < 0) {
                    return;
                }
                if (n2 == 1) {
                    arrinnerSubscription2 = EMPTY;
                    continue;
                }
                arrinnerSubscription2 = new InnerSubscription[n2 - 1];
                System.arraycopy(arrinnerSubscription, 0, arrinnerSubscription2, 0, n);
                System.arraycopy(arrinnerSubscription, n + 1, arrinnerSubscription2, n, n2 - n - 1);
            } while (!this.subscribers.compareAndSet(arrinnerSubscription, arrinnerSubscription2));
        }
    }

    static final class ScheduledReplayBufferTask<T>
    implements Callable<ReplayBuffer<T>> {
        private final int bufferSize;
        private final long maxAge;
        private final Scheduler scheduler;
        private final TimeUnit unit;

        ScheduledReplayBufferTask(int n, long l, TimeUnit timeUnit, Scheduler scheduler) {
            this.bufferSize = n;
            this.maxAge = l;
            this.unit = timeUnit;
            this.scheduler = scheduler;
        }

        @Override
        public ReplayBuffer<T> call() {
            return new SizeAndTimeBoundReplayBuffer(this.bufferSize, this.maxAge, this.unit, this.scheduler);
        }
    }

    static final class SizeAndTimeBoundReplayBuffer<T>
    extends BoundedReplayBuffer<T> {
        private static final long serialVersionUID = 3457957419649567404L;
        final int limit;
        final long maxAge;
        final Scheduler scheduler;
        final TimeUnit unit;

        SizeAndTimeBoundReplayBuffer(int n, long l, TimeUnit timeUnit, Scheduler scheduler) {
            this.scheduler = scheduler;
            this.limit = n;
            this.maxAge = l;
            this.unit = timeUnit;
        }

        @Override
        Object enterTransform(Object object) {
            return new Timed<Object>(object, this.scheduler.now(this.unit), this.unit);
        }

        @Override
        Node getHead() {
            long l = this.scheduler.now(this.unit);
            long l2 = this.maxAge;
            Node node = (Node)this.get();
            Object object = (Node)node.get();
            do {
                if (object == null) {
                    return node;
                }
                Object object2 = (Timed)object.value;
                if (NotificationLite.isComplete(object2.value())) break;
                if (NotificationLite.isError(object2.value())) {
                    return node;
                }
                if (object2.time() > l - l2) break;
                object2 = (Node)object.get();
                node = object;
                object = object2;
            } while (true);
            return node;
        }

        @Override
        Object leaveTransform(Object object) {
            return ((Timed)object).value();
        }

        @Override
        void truncate() {
            long l = this.scheduler.now(this.unit);
            long l2 = this.maxAge;
            Node node = (Node)this.get();
            Node node2 = (Node)node.get();
            int n = 0;
            while (node2 != null) {
                Node node3;
                if (this.size > this.limit) {
                    ++n;
                    --this.size;
                    node3 = (Node)node2.get();
                    node = node2;
                    node2 = node3;
                    continue;
                }
                if (((Timed)node2.value).time() > l - l2) break;
                ++n;
                --this.size;
                node3 = (Node)node2.get();
                node = node2;
                node2 = node3;
            }
            if (n != 0) {
                this.setFirst(node);
            }
        }

        @Override
        void truncateFinal() {
            long l = this.scheduler.now(this.unit);
            long l2 = this.maxAge;
            Node node = (Node)this.get();
            Node node2 = (Node)node.get();
            int n = 0;
            while (node2 != null && this.size > 1 && ((Timed)node2.value).time() <= l - l2) {
                ++n;
                --this.size;
                Node node3 = (Node)node2.get();
                node = node2;
                node2 = node3;
            }
            if (n != 0) {
                this.setFirst(node);
            }
        }
    }

    static final class SizeBoundReplayBuffer<T>
    extends BoundedReplayBuffer<T> {
        private static final long serialVersionUID = -5898283885385201806L;
        final int limit;

        SizeBoundReplayBuffer(int n) {
            this.limit = n;
        }

        @Override
        void truncate() {
            if (this.size > this.limit) {
                this.removeFirst();
            }
        }
    }

    static final class UnboundedReplayBuffer<T>
    extends ArrayList<Object>
    implements ReplayBuffer<T> {
        private static final long serialVersionUID = 7063189396499112664L;
        volatile int size;

        UnboundedReplayBuffer(int n) {
            super(n);
        }

        @Override
        public void complete() {
            this.add(NotificationLite.complete());
            ++this.size;
        }

        @Override
        public void error(Throwable throwable) {
            this.add(NotificationLite.error(throwable));
            ++this.size;
        }

        @Override
        public void next(T t) {
            this.add(NotificationLite.next(t));
            ++this.size;
        }

        /*
         * Enabled aggressive block sorting
         * Enabled unnecessary exception pruning
         * Enabled aggressive exception aggregation
         */
        @Override
        public void replay(InnerSubscription<T> innerSubscription) {
            synchronized (innerSubscription) {
                if (innerSubscription.emitting) {
                    innerSubscription.missed = true;
                    return;
                }
                innerSubscription.emitting = true;
            }
            Subscriber subscriber = innerSubscription.child;
            while (!innerSubscription.isDisposed()) {
                long l;
                int n = this.size;
                Integer n2 = (Integer)innerSubscription.index();
                int n3 = n2 != null ? n2 : 0;
                long l2 = 0L;
                for (long i = l = innerSubscription.get(); i != 0L; ++n3, ++l2, --i) {
                    if (n3 < n) {
                        n2 = this.get(n3);
                        try {
                            boolean bl = NotificationLite.accept((Object)n2, subscriber);
                            if (bl) {
                                return;
                            }
                            if (!innerSubscription.isDisposed()) continue;
                            return;
                        }
                        catch (Throwable throwable) {
                            Exceptions.throwIfFatal(throwable);
                            innerSubscription.dispose();
                            if (!NotificationLite.isError(n2) && !NotificationLite.isComplete(n2)) {
                                subscriber.onError(throwable);
                            }
                            return;
                        }
                    }
                    if (l2 == 0L) break;
                    innerSubscription.index = n3;
                    if (l == Long.MAX_VALUE) break;
                    innerSubscription.produced(l2);
                    break;
                }
                synchronized (innerSubscription) {
                    if (!innerSubscription.missed) {
                        innerSubscription.emitting = false;
                        return;
                    }
                    innerSubscription.missed = false;
                }
            }
            return;
        }
    }

}

