/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  org.reactivestreams.Subscriber
 *  org.reactivestreams.Subscription
 */
package io.reactivex.internal.operators.flowable;

import io.reactivex.Flowable;
import io.reactivex.FlowableSubscriber;
import io.reactivex.annotations.NonNull;
import io.reactivex.annotations.Nullable;
import io.reactivex.exceptions.Exceptions;
import io.reactivex.functions.Function;
import io.reactivex.internal.functions.ObjectHelper;
import io.reactivex.internal.fuseable.ConditionalSubscriber;
import io.reactivex.internal.operators.flowable.AbstractFlowableWithUpstream;
import io.reactivex.internal.operators.flowable.FlowableMap;
import io.reactivex.internal.subscriptions.EmptySubscription;
import io.reactivex.internal.subscriptions.SubscriptionHelper;
import io.reactivex.internal.util.AtomicThrowable;
import io.reactivex.internal.util.HalfSerializer;
import io.reactivex.plugins.RxJavaPlugins;
import java.util.Arrays;
import java.util.Iterator;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
import java.util.concurrent.atomic.AtomicReference;
import java.util.concurrent.atomic.AtomicReferenceArray;
import org.reactivestreams.Publisher;
import org.reactivestreams.Subscriber;
import org.reactivestreams.Subscription;

public final class FlowableWithLatestFromMany<T, R>
extends AbstractFlowableWithUpstream<T, R> {
    final Function<? super Object[], R> combiner;
    @Nullable
    final Publisher<?>[] otherArray;
    @Nullable
    final Iterable<? extends Publisher<?>> otherIterable;

    public FlowableWithLatestFromMany(@NonNull Flowable<T> flowable, @NonNull Iterable<? extends Publisher<?>> iterable, @NonNull Function<? super Object[], R> function) {
        super(flowable);
        this.otherArray = null;
        this.otherIterable = iterable;
        this.combiner = function;
    }

    public FlowableWithLatestFromMany(@NonNull Flowable<T> flowable, @NonNull Publisher<?>[] arrpublisher, Function<? super Object[], R> function) {
        super(flowable);
        this.otherArray = arrpublisher;
        this.otherIterable = null;
        this.combiner = function;
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @Override
    protected void subscribeActual(Subscriber<? super R> subscriber) {
        Object object;
        int n;
        Object object2 = this.otherArray;
        if (object2 != null) {
            n = ((Publisher<?>[])object2).length;
        } else {
            int n2;
            Iterator<Publisher<?>> iterator;
            object = new Publisher[8];
            try {
                iterator = this.otherIterable.iterator();
                n2 = 0;
            }
            catch (Throwable throwable) {
                Exceptions.throwIfFatal(throwable);
                EmptySubscription.error(throwable, subscriber);
                return;
            }
            do {
                object2 = object;
                n = n2;
                if (!iterator.hasNext()) break;
                Publisher<?> publisher = iterator.next();
                object2 = object;
                if (n2 == ((Object)object).length) {
                    object2 = (Publisher[])Arrays.copyOf(object, (n2 >> 1) + n2);
                }
                object2[n2] = publisher;
                ++n2;
                object = object2;
            } while (true);
        }
        if (n == 0) {
            new FlowableMap(this.source, new SingletonArrayFunc()).subscribeActual(subscriber);
            return;
        }
        object = new WithLatestFromSubscriber(subscriber, this.combiner, n);
        subscriber.onSubscribe((Subscription)object);
        object.subscribe((Publisher<?>[])object2, n);
        this.source.subscribe(object);
    }

    final class SingletonArrayFunc
    implements Function<T, R> {
        SingletonArrayFunc() {
        }

        @Override
        public R apply(T t) throws Exception {
            return ObjectHelper.requireNonNull(FlowableWithLatestFromMany.this.combiner.apply((Object[])new Object[]{t}), "The combiner returned a null value");
        }
    }

    static final class WithLatestFromSubscriber<T, R>
    extends AtomicInteger
    implements ConditionalSubscriber<T>,
    Subscription {
        private static final long serialVersionUID = 1577321883966341961L;
        final Subscriber<? super R> actual;
        final Function<? super Object[], R> combiner;
        volatile boolean done;
        final AtomicThrowable error;
        final AtomicLong requested;
        final AtomicReference<Subscription> s;
        final WithLatestInnerSubscriber[] subscribers;
        final AtomicReferenceArray<Object> values;

        WithLatestFromSubscriber(Subscriber<? super R> arrwithLatestInnerSubscriber, Function<? super Object[], R> function, int n) {
            this.actual = arrwithLatestInnerSubscriber;
            this.combiner = function;
            arrwithLatestInnerSubscriber = new WithLatestInnerSubscriber[n];
            for (int i = 0; i < n; ++i) {
                arrwithLatestInnerSubscriber[i] = new WithLatestInnerSubscriber(this, i);
            }
            this.subscribers = arrwithLatestInnerSubscriber;
            this.values = new AtomicReferenceArray(n);
            this.s = new AtomicReference();
            this.requested = new AtomicLong();
            this.error = new AtomicThrowable();
        }

        public void cancel() {
            SubscriptionHelper.cancel(this.s);
            WithLatestInnerSubscriber[] arrwithLatestInnerSubscriber = this.subscribers;
            int n = arrwithLatestInnerSubscriber.length;
            for (int i = 0; i < n; ++i) {
                arrwithLatestInnerSubscriber[i].dispose();
            }
        }

        void cancelAllBut(int n) {
            WithLatestInnerSubscriber[] arrwithLatestInnerSubscriber = this.subscribers;
            for (int i = 0; i < arrwithLatestInnerSubscriber.length; ++i) {
                if (i == n) continue;
                arrwithLatestInnerSubscriber[i].dispose();
            }
        }

        void innerComplete(int n, boolean bl) {
            if (!bl) {
                this.done = true;
                SubscriptionHelper.cancel(this.s);
                this.cancelAllBut(n);
                HalfSerializer.onComplete(this.actual, (AtomicInteger)this, this.error);
            }
        }

        void innerError(int n, Throwable throwable) {
            this.done = true;
            SubscriptionHelper.cancel(this.s);
            this.cancelAllBut(n);
            HalfSerializer.onError(this.actual, throwable, (AtomicInteger)this, this.error);
        }

        void innerNext(int n, Object object) {
            this.values.set(n, object);
        }

        public void onComplete() {
            if (!this.done) {
                this.done = true;
                this.cancelAllBut(-1);
                HalfSerializer.onComplete(this.actual, (AtomicInteger)this, this.error);
            }
        }

        public void onError(Throwable throwable) {
            if (this.done) {
                RxJavaPlugins.onError(throwable);
                return;
            }
            this.done = true;
            this.cancelAllBut(-1);
            HalfSerializer.onError(this.actual, throwable, (AtomicInteger)this, this.error);
        }

        public void onNext(T t) {
            if (!this.tryOnNext(t) && !this.done) {
                this.s.get().request(1L);
            }
        }

        @Override
        public void onSubscribe(Subscription subscription) {
            SubscriptionHelper.deferredSetOnce(this.s, this.requested, subscription);
        }

        public void request(long l) {
            SubscriptionHelper.deferredRequest(this.s, this.requested, l);
        }

        void subscribe(Publisher<?>[] arrpublisher, int n) {
            WithLatestInnerSubscriber[] arrwithLatestInnerSubscriber = this.subscribers;
            AtomicReference<Subscription> atomicReference = this.s;
            for (int i = 0; i < n; ++i) {
                if (SubscriptionHelper.isCancelled(atomicReference.get())) {
                    return;
                }
                arrpublisher[i].subscribe(arrwithLatestInnerSubscriber[i]);
            }
        }

        @Override
        public boolean tryOnNext(T object) {
            if (this.done) {
                return false;
            }
            AtomicReferenceArray<Object> atomicReferenceArray = this.values;
            int n = atomicReferenceArray.length();
            Object[] arrobject = new Object[n + 1];
            arrobject[0] = object;
            int n2 = 0;
            while (n2 < n) {
                object = atomicReferenceArray.get(n2);
                if (object == null) {
                    return false;
                }
                arrobject[++n2] = object;
            }
            try {
                object = ObjectHelper.requireNonNull(this.combiner.apply((Object[])arrobject), "The combiner returned a null value");
            }
            catch (Throwable throwable) {
                Exceptions.throwIfFatal(throwable);
                this.cancel();
                this.onError(throwable);
                return false;
            }
            HalfSerializer.onNext(this.actual, object, (AtomicInteger)this, this.error);
            return true;
        }
    }

    static final class WithLatestInnerSubscriber
    extends AtomicReference<Subscription>
    implements FlowableSubscriber<Object> {
        private static final long serialVersionUID = 3256684027868224024L;
        boolean hasValue;
        final int index;
        final WithLatestFromSubscriber<?, ?> parent;

        WithLatestInnerSubscriber(WithLatestFromSubscriber<?, ?> withLatestFromSubscriber, int n) {
            this.parent = withLatestFromSubscriber;
            this.index = n;
        }

        void dispose() {
            SubscriptionHelper.cancel(this);
        }

        public void onComplete() {
            this.parent.innerComplete(this.index, this.hasValue);
        }

        public void onError(Throwable throwable) {
            this.parent.innerError(this.index, throwable);
        }

        public void onNext(Object object) {
            if (!this.hasValue) {
                this.hasValue = true;
            }
            this.parent.innerNext(this.index, object);
        }

        @Override
        public void onSubscribe(Subscription subscription) {
            if (SubscriptionHelper.setOnce(this, subscription)) {
                subscription.request(Long.MAX_VALUE);
            }
        }
    }

}

