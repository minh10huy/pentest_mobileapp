/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  org.reactivestreams.Subscriber
 *  org.reactivestreams.Subscription
 */
package io.reactivex.internal.operators.flowable;

import io.reactivex.Flowable;
import io.reactivex.exceptions.Exceptions;
import io.reactivex.internal.subscriptions.DeferredScalarSubscription;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.reactivestreams.Subscriber;
import org.reactivestreams.Subscription;

public final class FlowableFromFuture<T>
extends Flowable<T> {
    final Future<? extends T> future;
    final long timeout;
    final TimeUnit unit;

    public FlowableFromFuture(Future<? extends T> future, long l, TimeUnit timeUnit) {
        this.future = future;
        this.timeout = l;
        this.unit = timeUnit;
    }

    @Override
    public void subscribeActual(Subscriber<? super T> subscriber) {
        DeferredScalarSubscription<T> deferredScalarSubscription;
        T t;
        block3 : {
            deferredScalarSubscription = new DeferredScalarSubscription<T>(subscriber);
            subscriber.onSubscribe(deferredScalarSubscription);
            try {
                t = this.unit != null ? this.future.get(this.timeout, this.unit) : this.future.get();
                if (t != null) break block3;
            }
            catch (Throwable throwable) {
                Exceptions.throwIfFatal(throwable);
                if (!deferredScalarSubscription.isCancelled()) {
                    subscriber.onError(throwable);
                }
                return;
            }
            subscriber.onError((Throwable)new NullPointerException("The future returned null"));
            return;
        }
        deferredScalarSubscription.complete(t);
    }
}

