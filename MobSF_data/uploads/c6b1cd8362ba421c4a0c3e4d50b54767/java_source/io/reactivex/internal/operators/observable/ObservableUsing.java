/*
 * Decompiled with CFR 0_132.
 */
package io.reactivex.internal.operators.observable;

import io.reactivex.Observable;
import io.reactivex.ObservableSource;
import io.reactivex.Observer;
import io.reactivex.disposables.Disposable;
import io.reactivex.exceptions.CompositeException;
import io.reactivex.exceptions.Exceptions;
import io.reactivex.functions.Consumer;
import io.reactivex.functions.Function;
import io.reactivex.internal.disposables.DisposableHelper;
import io.reactivex.internal.disposables.EmptyDisposable;
import io.reactivex.internal.functions.ObjectHelper;
import io.reactivex.plugins.RxJavaPlugins;
import java.util.concurrent.Callable;
import java.util.concurrent.atomic.AtomicBoolean;

public final class ObservableUsing<T, D>
extends Observable<T> {
    final Consumer<? super D> disposer;
    final boolean eager;
    final Callable<? extends D> resourceSupplier;
    final Function<? super D, ? extends ObservableSource<? extends T>> sourceSupplier;

    public ObservableUsing(Callable<? extends D> callable, Function<? super D, ? extends ObservableSource<? extends T>> function, Consumer<? super D> consumer, boolean bl) {
        this.resourceSupplier = callable;
        this.sourceSupplier = function;
        this.disposer = consumer;
        this.eager = bl;
    }

    @Override
    public void subscribeActual(Observer<? super T> observer) {
        D d;
        try {
            d = this.resourceSupplier.call();
        }
        catch (Throwable throwable) {
            Exceptions.throwIfFatal(throwable);
            EmptyDisposable.error(throwable, observer);
            return;
        }
        try {
            ObservableSource<T> observableSource = ObjectHelper.requireNonNull(this.sourceSupplier.apply(d), "The sourceSupplier returned a null ObservableSource");
            observableSource.subscribe(new UsingObserver<T, D>(observer, (D)d, this.disposer, this.eager));
            return;
        }
        catch (Throwable throwable) {
            Exceptions.throwIfFatal(throwable);
            try {
                this.disposer.accept(d);
            }
            catch (Throwable throwable2) {
                Exceptions.throwIfFatal(throwable2);
                EmptyDisposable.error((Throwable)new CompositeException(throwable, throwable2), observer);
                return;
            }
            EmptyDisposable.error(throwable, observer);
            return;
        }
    }

    static final class UsingObserver<T, D>
    extends AtomicBoolean
    implements Observer<T>,
    Disposable {
        private static final long serialVersionUID = 5904473792286235046L;
        final Observer<? super T> actual;
        final Consumer<? super D> disposer;
        final boolean eager;
        final D resource;
        Disposable s;

        UsingObserver(Observer<? super T> observer, D d, Consumer<? super D> consumer, boolean bl) {
            this.actual = observer;
            this.resource = d;
            this.disposer = consumer;
            this.eager = bl;
        }

        @Override
        public void dispose() {
            this.disposeAfter();
            this.s.dispose();
        }

        void disposeAfter() {
            if (this.compareAndSet(false, true)) {
                try {
                    this.disposer.accept(this.resource);
                    return;
                }
                catch (Throwable throwable) {
                    Exceptions.throwIfFatal(throwable);
                    RxJavaPlugins.onError(throwable);
                }
            }
        }

        @Override
        public boolean isDisposed() {
            return this.get();
        }

        @Override
        public void onComplete() {
            if (this.eager) {
                if (this.compareAndSet(false, true)) {
                    try {
                        this.disposer.accept(this.resource);
                    }
                    catch (Throwable throwable) {
                        Exceptions.throwIfFatal(throwable);
                        this.actual.onError(throwable);
                        return;
                    }
                }
                this.s.dispose();
                this.actual.onComplete();
                return;
            }
            this.actual.onComplete();
            this.s.dispose();
            this.disposeAfter();
        }

        @Override
        public void onError(Throwable throwable) {
            if (this.eager) {
                Throwable throwable2 = throwable;
                if (this.compareAndSet(false, true)) {
                    try {
                        this.disposer.accept(this.resource);
                        throwable2 = throwable;
                    }
                    catch (Throwable throwable3) {
                        Exceptions.throwIfFatal(throwable3);
                        throwable2 = new CompositeException(throwable, throwable3);
                    }
                }
                this.s.dispose();
                this.actual.onError(throwable2);
                return;
            }
            this.actual.onError(throwable);
            this.s.dispose();
            this.disposeAfter();
        }

        @Override
        public void onNext(T t) {
            this.actual.onNext(t);
        }

        @Override
        public void onSubscribe(Disposable disposable) {
            if (DisposableHelper.validate(this.s, disposable)) {
                this.s = disposable;
                this.actual.onSubscribe(this);
            }
        }
    }

}

