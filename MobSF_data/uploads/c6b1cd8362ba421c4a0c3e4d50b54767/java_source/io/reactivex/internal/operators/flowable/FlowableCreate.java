/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  org.reactivestreams.Subscriber
 *  org.reactivestreams.Subscription
 */
package io.reactivex.internal.operators.flowable;

import io.reactivex.BackpressureStrategy;
import io.reactivex.Flowable;
import io.reactivex.FlowableEmitter;
import io.reactivex.FlowableOnSubscribe;
import io.reactivex.disposables.Disposable;
import io.reactivex.exceptions.Exceptions;
import io.reactivex.exceptions.MissingBackpressureException;
import io.reactivex.functions.Cancellable;
import io.reactivex.internal.disposables.CancellableDisposable;
import io.reactivex.internal.disposables.SequentialDisposable;
import io.reactivex.internal.fuseable.SimplePlainQueue;
import io.reactivex.internal.queue.SpscLinkedArrayQueue;
import io.reactivex.internal.subscriptions.SubscriptionHelper;
import io.reactivex.internal.util.AtomicThrowable;
import io.reactivex.internal.util.BackpressureHelper;
import io.reactivex.plugins.RxJavaPlugins;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
import java.util.concurrent.atomic.AtomicReference;
import org.reactivestreams.Subscriber;
import org.reactivestreams.Subscription;

public final class FlowableCreate<T>
extends Flowable<T> {
    final BackpressureStrategy backpressure;
    final FlowableOnSubscribe<T> source;

    public FlowableCreate(FlowableOnSubscribe<T> flowableOnSubscribe, BackpressureStrategy backpressureStrategy) {
        this.source = flowableOnSubscribe;
        this.backpressure = backpressureStrategy;
    }

    @Override
    public void subscribeActual(Subscriber<? super T> subscriber) {
        BaseEmitter baseEmitter;
        switch (.$SwitchMap$io$reactivex$BackpressureStrategy[this.backpressure.ordinal()]) {
            default: {
                baseEmitter = new BufferAsyncEmitter<T>(subscriber, FlowableCreate.bufferSize());
                break;
            }
            case 4: {
                baseEmitter = new LatestAsyncEmitter<T>(subscriber);
                break;
            }
            case 3: {
                baseEmitter = new DropAsyncEmitter<T>(subscriber);
                break;
            }
            case 2: {
                baseEmitter = new ErrorAsyncEmitter<T>(subscriber);
                break;
            }
            case 1: {
                baseEmitter = new MissingEmitter<T>(subscriber);
            }
        }
        subscriber.onSubscribe(baseEmitter);
        try {
            this.source.subscribe(baseEmitter);
            return;
        }
        catch (Throwable throwable) {
            Exceptions.throwIfFatal(throwable);
            baseEmitter.onError(throwable);
            return;
        }
    }

    static abstract class BaseEmitter<T>
    extends AtomicLong
    implements FlowableEmitter<T>,
    Subscription {
        private static final long serialVersionUID = 7326289992464377023L;
        final Subscriber<? super T> actual;
        final SequentialDisposable serial;

        BaseEmitter(Subscriber<? super T> subscriber) {
            this.actual = subscriber;
            this.serial = new SequentialDisposable();
        }

        public final void cancel() {
            this.serial.dispose();
            this.onUnsubscribed();
        }

        protected void complete() {
            if (this.isCancelled()) {
                return;
            }
            try {
                this.actual.onComplete();
                return;
            }
            finally {
                this.serial.dispose();
            }
        }

        protected boolean error(Throwable throwable) {
            Throwable throwable2 = throwable;
            if (throwable == null) {
                throwable2 = new NullPointerException("onError called with null. Null values are generally not allowed in 2.x operators and sources.");
            }
            if (this.isCancelled()) {
                return false;
            }
            try {
                this.actual.onError(throwable2);
                return true;
            }
            finally {
                this.serial.dispose();
            }
        }

        @Override
        public final boolean isCancelled() {
            return this.serial.isDisposed();
        }

        @Override
        public void onComplete() {
            this.complete();
        }

        @Override
        public final void onError(Throwable throwable) {
            if (!this.tryOnError(throwable)) {
                RxJavaPlugins.onError(throwable);
            }
        }

        void onRequested() {
        }

        void onUnsubscribed() {
        }

        public final void request(long l) {
            if (SubscriptionHelper.validate(l)) {
                BackpressureHelper.add(this, l);
                this.onRequested();
            }
        }

        @Override
        public final long requested() {
            return this.get();
        }

        @Override
        public final FlowableEmitter<T> serialize() {
            return new SerializedEmitter(this);
        }

        @Override
        public final void setCancellable(Cancellable cancellable) {
            this.setDisposable(new CancellableDisposable(cancellable));
        }

        @Override
        public final void setDisposable(Disposable disposable) {
            this.serial.update(disposable);
        }

        @Override
        public boolean tryOnError(Throwable throwable) {
            return this.error(throwable);
        }
    }

    static final class BufferAsyncEmitter<T>
    extends BaseEmitter<T> {
        private static final long serialVersionUID = 2427151001689639875L;
        volatile boolean done;
        Throwable error;
        final SpscLinkedArrayQueue<T> queue;
        final AtomicInteger wip;

        BufferAsyncEmitter(Subscriber<? super T> subscriber, int n) {
            super(subscriber);
            this.queue = new SpscLinkedArrayQueue(n);
            this.wip = new AtomicInteger();
        }

        void drain() {
            int n;
            if (this.wip.getAndIncrement() != 0) {
                return;
            }
            Object object = this.actual;
            SpscLinkedArrayQueue<T> spscLinkedArrayQueue = this.queue;
            int n2 = 1;
            do {
                boolean bl;
                long l;
                long l2 = this.get();
                for (l = 0L; l != l2; ++l) {
                    if (this.isCancelled()) {
                        spscLinkedArrayQueue.clear();
                        return;
                    }
                    bl = this.done;
                    T t = spscLinkedArrayQueue.poll();
                    n = t == null ? 1 : 0;
                    if (bl && n != 0) {
                        object = this.error;
                        if (object != null) {
                            this.error((Throwable)object);
                            return;
                        }
                        this.complete();
                        return;
                    }
                    if (n != 0) break;
                    object.onNext(t);
                }
                if (l == l2) {
                    if (this.isCancelled()) {
                        spscLinkedArrayQueue.clear();
                        return;
                    }
                    bl = this.done;
                    boolean bl2 = spscLinkedArrayQueue.isEmpty();
                    if (bl && bl2) {
                        object = this.error;
                        if (object != null) {
                            this.error((Throwable)object);
                            return;
                        }
                        this.complete();
                        return;
                    }
                }
                if (l != 0L) {
                    BackpressureHelper.produced(this, l);
                }
                n2 = n = this.wip.addAndGet(- n2);
            } while (n != 0);
        }

        @Override
        public void onComplete() {
            this.done = true;
            this.drain();
        }

        @Override
        public void onNext(T t) {
            if (!this.done) {
                if (this.isCancelled()) {
                    return;
                }
                if (t == null) {
                    this.onError(new NullPointerException("onNext called with null. Null values are generally not allowed in 2.x operators and sources."));
                    return;
                }
                this.queue.offer(t);
                this.drain();
                return;
            }
        }

        @Override
        void onRequested() {
            this.drain();
        }

        @Override
        void onUnsubscribed() {
            if (this.wip.getAndIncrement() == 0) {
                this.queue.clear();
            }
        }

        @Override
        public boolean tryOnError(Throwable throwable) {
            if (!this.done && !this.isCancelled()) {
                Throwable throwable2 = throwable;
                if (throwable == null) {
                    throwable2 = new NullPointerException("onError called with null. Null values are generally not allowed in 2.x operators and sources.");
                }
                this.error = throwable2;
                this.done = true;
                this.drain();
                return true;
            }
            return false;
        }
    }

    static final class DropAsyncEmitter<T>
    extends NoOverflowBaseAsyncEmitter<T> {
        private static final long serialVersionUID = 8360058422307496563L;

        DropAsyncEmitter(Subscriber<? super T> subscriber) {
            super(subscriber);
        }

        @Override
        void onOverflow() {
        }
    }

    static final class ErrorAsyncEmitter<T>
    extends NoOverflowBaseAsyncEmitter<T> {
        private static final long serialVersionUID = 338953216916120960L;

        ErrorAsyncEmitter(Subscriber<? super T> subscriber) {
            super(subscriber);
        }

        @Override
        void onOverflow() {
            this.onError(new MissingBackpressureException("create: could not emit value due to lack of requests"));
        }
    }

    static final class LatestAsyncEmitter<T>
    extends BaseEmitter<T> {
        private static final long serialVersionUID = 4023437720691792495L;
        volatile boolean done;
        Throwable error;
        final AtomicReference<T> queue = new AtomicReference();
        final AtomicInteger wip = new AtomicInteger();

        LatestAsyncEmitter(Subscriber<? super T> subscriber) {
            super(subscriber);
        }

        void drain() {
            int n;
            if (this.wip.getAndIncrement() != 0) {
                return;
            }
            Object object = this.actual;
            AtomicReference<T> atomicReference = this.queue;
            int n2 = 1;
            do {
                int n3;
                boolean bl;
                long l = this.get();
                long l2 = 0L;
                do {
                    n3 = 0;
                    if (l2 == l) break;
                    if (this.isCancelled()) {
                        atomicReference.lazySet(null);
                        return;
                    }
                    bl = this.done;
                    Object var11_9 = atomicReference.getAndSet(null);
                    n = var11_9 == null ? 1 : 0;
                    if (bl && n != 0) {
                        object = this.error;
                        if (object != null) {
                            this.error((Throwable)object);
                            return;
                        }
                        this.complete();
                        return;
                    }
                    if (n != 0) break;
                    object.onNext(var11_9);
                    ++l2;
                } while (true);
                if (l2 == l) {
                    if (this.isCancelled()) {
                        atomicReference.lazySet(null);
                        return;
                    }
                    bl = this.done;
                    n = n3;
                    if (atomicReference.get() == null) {
                        n = 1;
                    }
                    if (bl && n != 0) {
                        object = this.error;
                        if (object != null) {
                            this.error((Throwable)object);
                            return;
                        }
                        this.complete();
                        return;
                    }
                }
                if (l2 != 0L) {
                    BackpressureHelper.produced(this, l2);
                }
                n2 = n = this.wip.addAndGet(- n2);
            } while (n != 0);
        }

        @Override
        public void onComplete() {
            this.done = true;
            this.drain();
        }

        @Override
        public void onNext(T t) {
            if (!this.done) {
                if (this.isCancelled()) {
                    return;
                }
                if (t == null) {
                    this.onError(new NullPointerException("onNext called with null. Null values are generally not allowed in 2.x operators and sources."));
                    return;
                }
                this.queue.set(t);
                this.drain();
                return;
            }
        }

        @Override
        void onRequested() {
            this.drain();
        }

        @Override
        void onUnsubscribed() {
            if (this.wip.getAndIncrement() == 0) {
                this.queue.lazySet(null);
            }
        }

        @Override
        public boolean tryOnError(Throwable throwable) {
            if (!this.done && !this.isCancelled()) {
                if (throwable == null) {
                    this.onError(new NullPointerException("onError called with null. Null values are generally not allowed in 2.x operators and sources."));
                }
                this.error = throwable;
                this.done = true;
                this.drain();
                return true;
            }
            return false;
        }
    }

    static final class MissingEmitter<T>
    extends BaseEmitter<T> {
        private static final long serialVersionUID = 3776720187248809713L;

        MissingEmitter(Subscriber<? super T> subscriber) {
            super(subscriber);
        }

        @Override
        public void onNext(T t) {
            if (this.isCancelled()) {
                return;
            }
            if (t != null) {
                long l;
                this.actual.onNext(t);
                while ((l = this.get()) != 0L && !this.compareAndSet(l, l - 1L)) {
                }
                return;
            }
            this.onError(new NullPointerException("onNext called with null. Null values are generally not allowed in 2.x operators and sources."));
        }
    }

    static abstract class NoOverflowBaseAsyncEmitter<T>
    extends BaseEmitter<T> {
        private static final long serialVersionUID = 4127754106204442833L;

        NoOverflowBaseAsyncEmitter(Subscriber<? super T> subscriber) {
            super(subscriber);
        }

        @Override
        public final void onNext(T t) {
            if (this.isCancelled()) {
                return;
            }
            if (t == null) {
                this.onError(new NullPointerException("onNext called with null. Null values are generally not allowed in 2.x operators and sources."));
                return;
            }
            if (this.get() != 0L) {
                this.actual.onNext(t);
                BackpressureHelper.produced(this, 1L);
                return;
            }
            this.onOverflow();
        }

        abstract void onOverflow();
    }

    static final class SerializedEmitter<T>
    extends AtomicInteger
    implements FlowableEmitter<T> {
        private static final long serialVersionUID = 4883307006032401862L;
        volatile boolean done;
        final BaseEmitter<T> emitter;
        final AtomicThrowable error;
        final SimplePlainQueue<T> queue;

        SerializedEmitter(BaseEmitter<T> baseEmitter) {
            this.emitter = baseEmitter;
            this.error = new AtomicThrowable();
            this.queue = new SpscLinkedArrayQueue(16);
        }

        void drain() {
            if (this.getAndIncrement() == 0) {
                this.drainLoop();
            }
        }

        void drainLoop() {
            BaseEmitter<T> baseEmitter = this.emitter;
            SimplePlainQueue<T> simplePlainQueue = this.queue;
            AtomicThrowable atomicThrowable = this.error;
            int n = 1;
            do {
                if (baseEmitter.isCancelled()) {
                    simplePlainQueue.clear();
                    return;
                }
                if (atomicThrowable.get() != null) {
                    simplePlainQueue.clear();
                    baseEmitter.onError(atomicThrowable.terminate());
                    return;
                }
                boolean bl = this.done;
                T t = simplePlainQueue.poll();
                int n2 = t == null ? 1 : 0;
                if (bl && n2 != 0) {
                    baseEmitter.onComplete();
                    return;
                }
                if (n2 != 0) {
                    n = n2 = this.addAndGet(- n);
                    if (n2 != 0) continue;
                    return;
                }
                baseEmitter.onNext(t);
            } while (true);
        }

        @Override
        public boolean isCancelled() {
            return this.emitter.isCancelled();
        }

        @Override
        public void onComplete() {
            if (!this.emitter.isCancelled()) {
                if (this.done) {
                    return;
                }
                this.done = true;
                this.drain();
                return;
            }
        }

        @Override
        public void onError(Throwable throwable) {
            if (!this.tryOnError(throwable)) {
                RxJavaPlugins.onError(throwable);
            }
        }

        /*
         * Enabled aggressive block sorting
         * Enabled unnecessary exception pruning
         * Enabled aggressive exception aggregation
         * Converted monitor instructions to comments
         * Lifted jumps to return sites
         */
        @Override
        public void onNext(T t) {
            if (this.emitter.isCancelled()) return;
            if (this.done) {
                return;
            }
            if (t == null) {
                this.onError(new NullPointerException("onNext called with null. Null values are generally not allowed in 2.x operators and sources."));
                return;
            }
            if (this.get() == 0 && this.compareAndSet(0, 1)) {
                this.emitter.onNext(t);
                if (this.decrementAndGet() == 0) {
                    return;
                }
            } else {
                SimplePlainQueue<T> simplePlainQueue = this.queue;
                // MONITORENTER : simplePlainQueue
                simplePlainQueue.offer(t);
                // MONITOREXIT : simplePlainQueue
                if (this.getAndIncrement() != 0) {
                    return;
                }
            }
            this.drainLoop();
        }

        @Override
        public long requested() {
            return this.emitter.requested();
        }

        @Override
        public FlowableEmitter<T> serialize() {
            return this;
        }

        @Override
        public void setCancellable(Cancellable cancellable) {
            this.emitter.setCancellable(cancellable);
        }

        @Override
        public void setDisposable(Disposable disposable) {
            this.emitter.setDisposable(disposable);
        }

        @Override
        public boolean tryOnError(Throwable throwable) {
            if (!this.emitter.isCancelled()) {
                if (this.done) {
                    return false;
                }
                Throwable throwable2 = throwable;
                if (throwable == null) {
                    throwable2 = new NullPointerException("onError called with null. Null values are generally not allowed in 2.x operators and sources.");
                }
                if (this.error.addThrowable(throwable2)) {
                    this.done = true;
                    this.drain();
                    return true;
                }
                return false;
            }
            return false;
        }
    }

}

