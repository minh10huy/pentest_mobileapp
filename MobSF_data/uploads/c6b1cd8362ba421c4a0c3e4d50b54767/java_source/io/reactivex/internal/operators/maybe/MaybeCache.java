/*
 * Decompiled with CFR 0_132.
 */
package io.reactivex.internal.operators.maybe;

import io.reactivex.Maybe;
import io.reactivex.MaybeObserver;
import io.reactivex.MaybeSource;
import io.reactivex.disposables.Disposable;
import java.io.Serializable;
import java.util.concurrent.atomic.AtomicReference;

public final class MaybeCache<T>
extends Maybe<T>
implements MaybeObserver<T> {
    static final CacheDisposable[] EMPTY = new CacheDisposable[0];
    static final CacheDisposable[] TERMINATED = new CacheDisposable[0];
    Throwable error;
    final AtomicReference<CacheDisposable<T>[]> observers;
    final AtomicReference<MaybeSource<T>> source;
    T value;

    public MaybeCache(MaybeSource<T> maybeSource) {
        this.source = new AtomicReference<MaybeSource<T>>(maybeSource);
        this.observers = new AtomicReference<CacheDisposable[]>(EMPTY);
    }

    boolean add(CacheDisposable<T> cacheDisposable) {
        CacheDisposable[] arrcacheDisposable;
        CacheDisposable<T>[] arrcacheDisposable2;
        do {
            if ((arrcacheDisposable2 = this.observers.get()) == TERMINATED) {
                return false;
            }
            int n = arrcacheDisposable2.length;
            arrcacheDisposable = new CacheDisposable[n + 1];
            System.arraycopy(arrcacheDisposable2, 0, arrcacheDisposable, 0, n);
            arrcacheDisposable[n] = cacheDisposable;
        } while (!this.observers.compareAndSet(arrcacheDisposable2, arrcacheDisposable));
        return true;
    }

    @Override
    public void onComplete() {
        for (CacheDisposable cacheDisposable : this.observers.getAndSet(TERMINATED)) {
            if (cacheDisposable.isDisposed()) continue;
            cacheDisposable.actual.onComplete();
        }
    }

    @Override
    public void onError(Throwable throwable) {
        this.error = throwable;
        for (CacheDisposable cacheDisposable : this.observers.getAndSet(TERMINATED)) {
            if (cacheDisposable.isDisposed()) continue;
            cacheDisposable.actual.onError(throwable);
        }
    }

    @Override
    public void onSubscribe(Disposable disposable) {
    }

    @Override
    public void onSuccess(T t) {
        this.value = t;
        for (CacheDisposable cacheDisposable : this.observers.getAndSet(TERMINATED)) {
            if (cacheDisposable.isDisposed()) continue;
            cacheDisposable.actual.onSuccess(t);
        }
    }

    void remove(CacheDisposable<T> cacheDisposable) {
        CacheDisposable<T>[] arrcacheDisposable;
        CacheDisposable[] arrcacheDisposable2;
        do {
            int n;
            int n2;
            if ((n2 = (arrcacheDisposable = this.observers.get()).length) == 0) {
                return;
            }
            int n3 = -1;
            int n4 = 0;
            do {
                n = n3;
                if (n4 >= n2) break;
                if (arrcacheDisposable[n4] == cacheDisposable) {
                    n = n4;
                    break;
                }
                ++n4;
            } while (true);
            if (n < 0) {
                return;
            }
            if (n2 == 1) {
                arrcacheDisposable2 = EMPTY;
                continue;
            }
            arrcacheDisposable2 = new CacheDisposable[n2 - 1];
            System.arraycopy(arrcacheDisposable, 0, arrcacheDisposable2, 0, n);
            System.arraycopy(arrcacheDisposable, n + 1, arrcacheDisposable2, n, n2 - n - 1);
        } while (!this.observers.compareAndSet(arrcacheDisposable, arrcacheDisposable2));
    }

    @Override
    protected void subscribeActual(MaybeObserver<? super T> object) {
        Serializable serializable = new CacheDisposable<T>((MaybeObserver<T>)object, this);
        object.onSubscribe((Disposable)((Object)serializable));
        if (this.add((CacheDisposable<T>)serializable)) {
            if (serializable.isDisposed()) {
                this.remove((CacheDisposable<T>)serializable);
                return;
            }
            object = this.source.getAndSet(null);
            if (object != null) {
                object.subscribe(this);
            }
            return;
        }
        if (!serializable.isDisposed()) {
            serializable = this.error;
            if (serializable != null) {
                object.onError((Throwable)serializable);
                return;
            }
            serializable = this.value;
            if (serializable != null) {
                object.onSuccess(serializable);
                return;
            }
            object.onComplete();
        }
    }

    static final class CacheDisposable<T>
    extends AtomicReference<MaybeCache<T>>
    implements Disposable {
        private static final long serialVersionUID = -5791853038359966195L;
        final MaybeObserver<? super T> actual;

        CacheDisposable(MaybeObserver<? super T> maybeObserver, MaybeCache<T> maybeCache) {
            super(maybeCache);
            this.actual = maybeObserver;
        }

        @Override
        public void dispose() {
            MaybeCache maybeCache = this.getAndSet(null);
            if (maybeCache != null) {
                maybeCache.remove(this);
            }
        }

        @Override
        public boolean isDisposed() {
            if (this.get() == null) {
                return true;
            }
            return false;
        }
    }

}

