/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  org.reactivestreams.Subscriber
 *  org.reactivestreams.Subscription
 */
package io.reactivex.internal.operators.flowable;

import io.reactivex.Flowable;
import io.reactivex.FlowableSubscriber;
import io.reactivex.exceptions.MissingBackpressureException;
import io.reactivex.internal.subscriptions.SubscriptionHelper;
import io.reactivex.internal.util.BackpressureHelper;
import io.reactivex.subscribers.SerializedSubscriber;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
import java.util.concurrent.atomic.AtomicReference;
import org.reactivestreams.Publisher;
import org.reactivestreams.Subscriber;
import org.reactivestreams.Subscription;

public final class FlowableSamplePublisher<T>
extends Flowable<T> {
    final boolean emitLast;
    final Publisher<?> other;
    final Publisher<T> source;

    public FlowableSamplePublisher(Publisher<T> publisher, Publisher<?> publisher2, boolean bl) {
        this.source = publisher;
        this.other = publisher2;
        this.emitLast = bl;
    }

    @Override
    protected void subscribeActual(Subscriber<? super T> subscriber) {
        subscriber = new SerializedSubscriber<T>(subscriber);
        if (this.emitLast) {
            this.source.subscribe(new SampleMainEmitLast<T>(subscriber, this.other));
            return;
        }
        this.source.subscribe(new SampleMainNoLast<T>(subscriber, this.other));
    }

    static final class SampleMainEmitLast<T>
    extends SamplePublisherSubscriber<T> {
        private static final long serialVersionUID = -3029755663834015785L;
        volatile boolean done;
        final AtomicInteger wip = new AtomicInteger();

        SampleMainEmitLast(Subscriber<? super T> subscriber, Publisher<?> publisher) {
            super(subscriber, publisher);
        }

        @Override
        void completeMain() {
            this.done = true;
            if (this.wip.getAndIncrement() == 0) {
                this.emit();
                this.actual.onComplete();
            }
        }

        @Override
        void completeOther() {
            this.done = true;
            if (this.wip.getAndIncrement() == 0) {
                this.emit();
                this.actual.onComplete();
            }
        }

        @Override
        void run() {
            if (this.wip.getAndIncrement() == 0) {
                do {
                    boolean bl = this.done;
                    this.emit();
                    if (!bl) continue;
                    this.actual.onComplete();
                    return;
                } while (this.wip.decrementAndGet() != 0);
            }
        }
    }

    static final class SampleMainNoLast<T>
    extends SamplePublisherSubscriber<T> {
        private static final long serialVersionUID = -3029755663834015785L;

        SampleMainNoLast(Subscriber<? super T> subscriber, Publisher<?> publisher) {
            super(subscriber, publisher);
        }

        @Override
        void completeMain() {
            this.actual.onComplete();
        }

        @Override
        void completeOther() {
            this.actual.onComplete();
        }

        @Override
        void run() {
            this.emit();
        }
    }

    static abstract class SamplePublisherSubscriber<T>
    extends AtomicReference<T>
    implements FlowableSubscriber<T>,
    Subscription {
        private static final long serialVersionUID = -3517602651313910099L;
        final Subscriber<? super T> actual;
        final AtomicReference<Subscription> other = new AtomicReference();
        final AtomicLong requested = new AtomicLong();
        Subscription s;
        final Publisher<?> sampler;

        SamplePublisherSubscriber(Subscriber<? super T> subscriber, Publisher<?> publisher) {
            this.actual = subscriber;
            this.sampler = publisher;
        }

        public void cancel() {
            SubscriptionHelper.cancel(this.other);
            this.s.cancel();
        }

        public void complete() {
            this.s.cancel();
            this.completeOther();
        }

        abstract void completeMain();

        abstract void completeOther();

        void emit() {
            Object var1_1 = this.getAndSet(null);
            if (var1_1 != null) {
                if (this.requested.get() != 0L) {
                    this.actual.onNext(var1_1);
                    BackpressureHelper.produced(this.requested, 1L);
                    return;
                }
                this.cancel();
                this.actual.onError((Throwable)new MissingBackpressureException("Couldn't emit value due to lack of requests!"));
            }
        }

        public void error(Throwable throwable) {
            this.s.cancel();
            this.actual.onError(throwable);
        }

        public void onComplete() {
            SubscriptionHelper.cancel(this.other);
            this.completeMain();
        }

        public void onError(Throwable throwable) {
            SubscriptionHelper.cancel(this.other);
            this.actual.onError(throwable);
        }

        public void onNext(T t) {
            this.lazySet(t);
        }

        @Override
        public void onSubscribe(Subscription subscription) {
            if (SubscriptionHelper.validate(this.s, subscription)) {
                this.s = subscription;
                this.actual.onSubscribe((Subscription)this);
                if (this.other.get() == null) {
                    this.sampler.subscribe(new SamplerSubscriber<T>(this));
                    subscription.request(Long.MAX_VALUE);
                }
            }
        }

        public void request(long l) {
            if (SubscriptionHelper.validate(l)) {
                BackpressureHelper.add(this.requested, l);
            }
        }

        abstract void run();

        boolean setOther(Subscription subscription) {
            return SubscriptionHelper.setOnce(this.other, subscription);
        }
    }

    static final class SamplerSubscriber<T>
    implements FlowableSubscriber<Object> {
        final SamplePublisherSubscriber<T> parent;

        SamplerSubscriber(SamplePublisherSubscriber<T> samplePublisherSubscriber) {
            this.parent = samplePublisherSubscriber;
        }

        public void onComplete() {
            this.parent.complete();
        }

        public void onError(Throwable throwable) {
            this.parent.error(throwable);
        }

        public void onNext(Object object) {
            this.parent.run();
        }

        @Override
        public void onSubscribe(Subscription subscription) {
            if (this.parent.setOther(subscription)) {
                subscription.request(Long.MAX_VALUE);
            }
        }
    }

}

