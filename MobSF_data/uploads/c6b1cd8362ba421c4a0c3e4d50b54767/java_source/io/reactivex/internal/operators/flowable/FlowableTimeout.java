/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  org.reactivestreams.Subscriber
 *  org.reactivestreams.Subscription
 */
package io.reactivex.internal.operators.flowable;

import io.reactivex.Flowable;
import io.reactivex.FlowableSubscriber;
import io.reactivex.disposables.Disposable;
import io.reactivex.exceptions.Exceptions;
import io.reactivex.functions.Function;
import io.reactivex.internal.disposables.SequentialDisposable;
import io.reactivex.internal.functions.ObjectHelper;
import io.reactivex.internal.operators.flowable.AbstractFlowableWithUpstream;
import io.reactivex.internal.operators.flowable.FlowableTimeoutTimed;
import io.reactivex.internal.subscriptions.SubscriptionArbiter;
import io.reactivex.internal.subscriptions.SubscriptionHelper;
import io.reactivex.plugins.RxJavaPlugins;
import java.util.concurrent.TimeoutException;
import java.util.concurrent.atomic.AtomicLong;
import java.util.concurrent.atomic.AtomicReference;
import org.reactivestreams.Publisher;
import org.reactivestreams.Subscriber;
import org.reactivestreams.Subscription;

public final class FlowableTimeout<T, U, V>
extends AbstractFlowableWithUpstream<T, T> {
    final Publisher<U> firstTimeoutIndicator;
    final Function<? super T, ? extends Publisher<V>> itemTimeoutIndicator;
    final Publisher<? extends T> other;

    public FlowableTimeout(Flowable<T> flowable, Publisher<U> publisher, Function<? super T, ? extends Publisher<V>> function, Publisher<? extends T> publisher2) {
        super(flowable);
        this.firstTimeoutIndicator = publisher;
        this.itemTimeoutIndicator = function;
        this.other = publisher2;
    }

    @Override
    protected void subscribeActual(Subscriber<? super T> subscriber) {
        if (this.other == null) {
            TimeoutSubscriber<T> timeoutSubscriber = new TimeoutSubscriber<T>(subscriber, this.itemTimeoutIndicator);
            subscriber.onSubscribe(timeoutSubscriber);
            timeoutSubscriber.startFirstTimeout(this.firstTimeoutIndicator);
            this.source.subscribe(timeoutSubscriber);
            return;
        }
        TimeoutFallbackSubscriber<T> timeoutFallbackSubscriber = new TimeoutFallbackSubscriber<T>(subscriber, this.itemTimeoutIndicator, this.other);
        subscriber.onSubscribe(timeoutFallbackSubscriber);
        timeoutFallbackSubscriber.startFirstTimeout(this.firstTimeoutIndicator);
        this.source.subscribe(timeoutFallbackSubscriber);
    }

    static final class TimeoutConsumer
    extends AtomicReference<Subscription>
    implements FlowableSubscriber<Object>,
    Disposable {
        private static final long serialVersionUID = 8708641127342403073L;
        final long idx;
        final TimeoutSelectorSupport parent;

        TimeoutConsumer(long l, TimeoutSelectorSupport timeoutSelectorSupport) {
            this.idx = l;
            this.parent = timeoutSelectorSupport;
        }

        @Override
        public void dispose() {
            SubscriptionHelper.cancel(this);
        }

        @Override
        public boolean isDisposed() {
            return SubscriptionHelper.isCancelled((Subscription)this.get());
        }

        public void onComplete() {
            if (this.get() != SubscriptionHelper.CANCELLED) {
                this.lazySet(SubscriptionHelper.CANCELLED);
                this.parent.onTimeout(this.idx);
            }
        }

        public void onError(Throwable throwable) {
            if (this.get() != SubscriptionHelper.CANCELLED) {
                this.lazySet(SubscriptionHelper.CANCELLED);
                this.parent.onTimeoutError(this.idx, throwable);
                return;
            }
            RxJavaPlugins.onError(throwable);
        }

        public void onNext(Object object) {
            object = (Subscription)this.get();
            if (object != SubscriptionHelper.CANCELLED) {
                object.cancel();
                this.lazySet(SubscriptionHelper.CANCELLED);
                this.parent.onTimeout(this.idx);
            }
        }

        @Override
        public void onSubscribe(Subscription subscription) {
            if (SubscriptionHelper.setOnce(this, subscription)) {
                subscription.request(Long.MAX_VALUE);
            }
        }
    }

    static final class TimeoutFallbackSubscriber<T>
    extends SubscriptionArbiter
    implements FlowableSubscriber<T>,
    TimeoutSelectorSupport {
        private static final long serialVersionUID = 3764492702657003550L;
        final Subscriber<? super T> actual;
        long consumed;
        Publisher<? extends T> fallback;
        final AtomicLong index;
        final Function<? super T, ? extends Publisher<?>> itemTimeoutIndicator;
        final SequentialDisposable task;
        final AtomicReference<Subscription> upstream;

        TimeoutFallbackSubscriber(Subscriber<? super T> subscriber, Function<? super T, ? extends Publisher<?>> function, Publisher<? extends T> publisher) {
            this.actual = subscriber;
            this.itemTimeoutIndicator = function;
            this.task = new SequentialDisposable();
            this.upstream = new AtomicReference();
            this.fallback = publisher;
            this.index = new AtomicLong();
        }

        @Override
        public void cancel() {
            super.cancel();
            this.task.dispose();
        }

        public void onComplete() {
            if (this.index.getAndSet(Long.MAX_VALUE) != Long.MAX_VALUE) {
                this.task.dispose();
                this.actual.onComplete();
                this.task.dispose();
            }
        }

        public void onError(Throwable throwable) {
            if (this.index.getAndSet(Long.MAX_VALUE) != Long.MAX_VALUE) {
                this.task.dispose();
                this.actual.onError(throwable);
                this.task.dispose();
                return;
            }
            RxJavaPlugins.onError(throwable);
        }

        public void onNext(T object) {
            long l = this.index.get();
            if (l != Long.MAX_VALUE) {
                Object object2 = this.index;
                long l2 = l + 1L;
                if (!object2.compareAndSet(l, l2)) {
                    return;
                }
                object2 = (Disposable)this.task.get();
                if (object2 != null) {
                    object2.dispose();
                }
                ++this.consumed;
                this.actual.onNext(object);
                try {
                    object = ObjectHelper.requireNonNull(this.itemTimeoutIndicator.apply(object), "The itemTimeoutIndicator returned a null Publisher.");
                    object2 = new TimeoutConsumer(l2, this);
                    if (this.task.replace((Disposable)object2)) {
                        object.subscribe(object2);
                    }
                    return;
                }
                catch (Throwable throwable) {
                    Exceptions.throwIfFatal(throwable);
                    this.upstream.get().cancel();
                    this.index.getAndSet(Long.MAX_VALUE);
                    this.actual.onError(throwable);
                    return;
                }
            }
        }

        @Override
        public void onSubscribe(Subscription subscription) {
            if (SubscriptionHelper.setOnce(this.upstream, subscription)) {
                this.setSubscription(subscription);
            }
        }

        @Override
        public void onTimeout(long l) {
            if (this.index.compareAndSet(l, Long.MAX_VALUE)) {
                SubscriptionHelper.cancel(this.upstream);
                Publisher<? super T> publisher = this.fallback;
                this.fallback = null;
                l = this.consumed;
                if (l != 0L) {
                    this.produced(l);
                }
                publisher.subscribe(new FlowableTimeoutTimed.FallbackSubscriber<T>(this.actual, this));
            }
        }

        @Override
        public void onTimeoutError(long l, Throwable throwable) {
            if (this.index.compareAndSet(l, Long.MAX_VALUE)) {
                SubscriptionHelper.cancel(this.upstream);
                this.actual.onError(throwable);
                return;
            }
            RxJavaPlugins.onError(throwable);
        }

        void startFirstTimeout(Publisher<?> publisher) {
            TimeoutConsumer timeoutConsumer;
            if (publisher != null && this.task.replace(timeoutConsumer = new TimeoutConsumer(0L, this))) {
                publisher.subscribe(timeoutConsumer);
            }
        }
    }

    static interface TimeoutSelectorSupport
    extends FlowableTimeoutTimed.TimeoutSupport {
        public void onTimeoutError(long var1, Throwable var3);
    }

    static final class TimeoutSubscriber<T>
    extends AtomicLong
    implements FlowableSubscriber<T>,
    Subscription,
    TimeoutSelectorSupport {
        private static final long serialVersionUID = 3764492702657003550L;
        final Subscriber<? super T> actual;
        final Function<? super T, ? extends Publisher<?>> itemTimeoutIndicator;
        final AtomicLong requested;
        final SequentialDisposable task;
        final AtomicReference<Subscription> upstream;

        TimeoutSubscriber(Subscriber<? super T> subscriber, Function<? super T, ? extends Publisher<?>> function) {
            this.actual = subscriber;
            this.itemTimeoutIndicator = function;
            this.task = new SequentialDisposable();
            this.upstream = new AtomicReference();
            this.requested = new AtomicLong();
        }

        public void cancel() {
            SubscriptionHelper.cancel(this.upstream);
            this.task.dispose();
        }

        public void onComplete() {
            if (this.getAndSet(Long.MAX_VALUE) != Long.MAX_VALUE) {
                this.task.dispose();
                this.actual.onComplete();
            }
        }

        public void onError(Throwable throwable) {
            if (this.getAndSet(Long.MAX_VALUE) != Long.MAX_VALUE) {
                this.task.dispose();
                this.actual.onError(throwable);
                return;
            }
            RxJavaPlugins.onError(throwable);
        }

        public void onNext(T object) {
            long l = this.get();
            if (l != Long.MAX_VALUE) {
                long l2 = l + 1L;
                if (!this.compareAndSet(l, l2)) {
                    return;
                }
                Disposable disposable = (Disposable)this.task.get();
                if (disposable != null) {
                    disposable.dispose();
                }
                this.actual.onNext(object);
                try {
                    object = ObjectHelper.requireNonNull(this.itemTimeoutIndicator.apply(object), "The itemTimeoutIndicator returned a null Publisher.");
                    disposable = new TimeoutConsumer(l2, this);
                    if (this.task.replace(disposable)) {
                        object.subscribe(disposable);
                    }
                    return;
                }
                catch (Throwable throwable) {
                    Exceptions.throwIfFatal(throwable);
                    this.upstream.get().cancel();
                    this.getAndSet(Long.MAX_VALUE);
                    this.actual.onError(throwable);
                    return;
                }
            }
        }

        @Override
        public void onSubscribe(Subscription subscription) {
            SubscriptionHelper.deferredSetOnce(this.upstream, this.requested, subscription);
        }

        @Override
        public void onTimeout(long l) {
            if (this.compareAndSet(l, Long.MAX_VALUE)) {
                SubscriptionHelper.cancel(this.upstream);
                this.actual.onError((Throwable)new TimeoutException());
            }
        }

        @Override
        public void onTimeoutError(long l, Throwable throwable) {
            if (this.compareAndSet(l, Long.MAX_VALUE)) {
                SubscriptionHelper.cancel(this.upstream);
                this.actual.onError(throwable);
                return;
            }
            RxJavaPlugins.onError(throwable);
        }

        public void request(long l) {
            SubscriptionHelper.deferredRequest(this.upstream, this.requested, l);
        }

        void startFirstTimeout(Publisher<?> publisher) {
            TimeoutConsumer timeoutConsumer;
            if (publisher != null && this.task.replace(timeoutConsumer = new TimeoutConsumer(0L, this))) {
                publisher.subscribe(timeoutConsumer);
            }
        }
    }

}

