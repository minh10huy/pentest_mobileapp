/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  org.reactivestreams.Subscriber
 *  org.reactivestreams.Subscription
 */
package io.reactivex.internal.operators.flowable;

import io.reactivex.Flowable;
import io.reactivex.FlowableSubscriber;
import io.reactivex.exceptions.Exceptions;
import io.reactivex.exceptions.MissingBackpressureException;
import io.reactivex.functions.Function;
import io.reactivex.internal.functions.ObjectHelper;
import io.reactivex.internal.fuseable.QueueSubscription;
import io.reactivex.internal.fuseable.SimpleQueue;
import io.reactivex.internal.operators.flowable.AbstractFlowableWithUpstream;
import io.reactivex.internal.operators.flowable.FlowableScalarXMap;
import io.reactivex.internal.queue.SpscArrayQueue;
import io.reactivex.internal.subscriptions.SubscriptionHelper;
import io.reactivex.internal.util.AtomicThrowable;
import io.reactivex.internal.util.BackpressureHelper;
import io.reactivex.plugins.RxJavaPlugins;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
import java.util.concurrent.atomic.AtomicReference;
import org.reactivestreams.Publisher;
import org.reactivestreams.Subscriber;
import org.reactivestreams.Subscription;

public final class FlowableSwitchMap<T, R>
extends AbstractFlowableWithUpstream<T, R> {
    final int bufferSize;
    final boolean delayErrors;
    final Function<? super T, ? extends Publisher<? extends R>> mapper;

    public FlowableSwitchMap(Flowable<T> flowable, Function<? super T, ? extends Publisher<? extends R>> function, int n, boolean bl) {
        super(flowable);
        this.mapper = function;
        this.bufferSize = n;
        this.delayErrors = bl;
    }

    @Override
    protected void subscribeActual(Subscriber<? super R> subscriber) {
        if (FlowableScalarXMap.tryScalarXMapSubscribe(this.source, subscriber, this.mapper)) {
            return;
        }
        this.source.subscribe(new SwitchMapSubscriber<T, R>(subscriber, this.mapper, this.bufferSize, this.delayErrors));
    }

    static final class SwitchMapInnerSubscriber<T, R>
    extends AtomicReference<Subscription>
    implements FlowableSubscriber<R> {
        private static final long serialVersionUID = 3837284832786408377L;
        final int bufferSize;
        volatile boolean done;
        int fusionMode;
        final long index;
        final SwitchMapSubscriber<T, R> parent;
        volatile SimpleQueue<R> queue;

        SwitchMapInnerSubscriber(SwitchMapSubscriber<T, R> switchMapSubscriber, long l, int n) {
            this.parent = switchMapSubscriber;
            this.index = l;
            this.bufferSize = n;
        }

        public void cancel() {
            SubscriptionHelper.cancel(this);
        }

        public void onComplete() {
            SwitchMapSubscriber<T, R> switchMapSubscriber = this.parent;
            if (this.index == switchMapSubscriber.unique) {
                this.done = true;
                switchMapSubscriber.drain();
            }
        }

        public void onError(Throwable throwable) {
            SwitchMapSubscriber<T, R> switchMapSubscriber = this.parent;
            if (this.index == switchMapSubscriber.unique && switchMapSubscriber.error.addThrowable(throwable)) {
                if (!switchMapSubscriber.delayErrors) {
                    switchMapSubscriber.s.cancel();
                }
                this.done = true;
                switchMapSubscriber.drain();
                return;
            }
            RxJavaPlugins.onError(throwable);
        }

        public void onNext(R r) {
            SwitchMapSubscriber<T, R> switchMapSubscriber = this.parent;
            if (this.index == switchMapSubscriber.unique) {
                if (this.fusionMode == 0 && !this.queue.offer(r)) {
                    this.onError(new MissingBackpressureException("Queue full?!"));
                    return;
                }
                switchMapSubscriber.drain();
            }
        }

        @Override
        public void onSubscribe(Subscription subscription) {
            if (SubscriptionHelper.setOnce(this, subscription)) {
                if (subscription instanceof QueueSubscription) {
                    QueueSubscription queueSubscription = (QueueSubscription)subscription;
                    int n = queueSubscription.requestFusion(3);
                    if (n == 1) {
                        this.fusionMode = n;
                        this.queue = queueSubscription;
                        this.done = true;
                        this.parent.drain();
                        return;
                    }
                    if (n == 2) {
                        this.fusionMode = n;
                        this.queue = queueSubscription;
                        subscription.request((long)this.bufferSize);
                        return;
                    }
                }
                this.queue = new SpscArrayQueue<R>(this.bufferSize);
                subscription.request((long)this.bufferSize);
            }
        }
    }

    static final class SwitchMapSubscriber<T, R>
    extends AtomicInteger
    implements FlowableSubscriber<T>,
    Subscription {
        static final SwitchMapInnerSubscriber<Object, Object> CANCELLED = new SwitchMapInnerSubscriber(null, -1L, 1);
        private static final long serialVersionUID = -3491074160481096299L;
        final AtomicReference<SwitchMapInnerSubscriber<T, R>> active = new AtomicReference();
        final Subscriber<? super R> actual;
        final int bufferSize;
        volatile boolean cancelled;
        final boolean delayErrors;
        volatile boolean done;
        final AtomicThrowable error;
        final Function<? super T, ? extends Publisher<? extends R>> mapper;
        final AtomicLong requested = new AtomicLong();
        Subscription s;
        volatile long unique;

        static {
            CANCELLED.cancel();
        }

        SwitchMapSubscriber(Subscriber<? super R> subscriber, Function<? super T, ? extends Publisher<? extends R>> function, int n, boolean bl) {
            this.actual = subscriber;
            this.mapper = function;
            this.bufferSize = n;
            this.delayErrors = bl;
            this.error = new AtomicThrowable();
        }

        public void cancel() {
            if (!this.cancelled) {
                this.cancelled = true;
                this.s.cancel();
                this.disposeInner();
            }
        }

        void disposeInner() {
            SwitchMapInnerSubscriber<Object, Object> switchMapInnerSubscriber;
            if (this.active.get() != CANCELLED && (switchMapInnerSubscriber = this.active.getAndSet(CANCELLED)) != CANCELLED && switchMapInnerSubscriber != null) {
                switchMapInnerSubscriber.cancel();
            }
        }

        /*
         * Enabled aggressive block sorting
         * Enabled unnecessary exception pruning
         * Enabled aggressive exception aggregation
         */
        void drain() {
            if (this.getAndIncrement() != 0) {
                return;
            }
            Subscriber<? super R> subscriber = this.actual;
            int n = 1;
            do {
                int n2;
                block28 : {
                    SwitchMapInnerSubscriber<T, R> switchMapInnerSubscriber;
                    SimpleQueue simpleQueue;
                    if (this.cancelled) {
                        this.active.lazySet(null);
                        return;
                    }
                    if (this.done) {
                        if (this.delayErrors) {
                            if (this.active.get() == null) {
                                if ((Throwable)this.error.get() != null) {
                                    subscriber.onError(this.error.terminate());
                                    return;
                                }
                                subscriber.onComplete();
                                return;
                            }
                        } else {
                            if ((Throwable)this.error.get() != null) {
                                this.disposeInner();
                                subscriber.onError(this.error.terminate());
                                return;
                            }
                            if (this.active.get() == null) {
                                subscriber.onComplete();
                                return;
                            }
                        }
                    }
                    if ((simpleQueue = (switchMapInnerSubscriber = this.active.get()) != null ? switchMapInnerSubscriber.queue : null) == null) break block28;
                    if (switchMapInnerSubscriber.done) {
                        if (!this.delayErrors) {
                            if ((Throwable)this.error.get() != null) {
                                this.disposeInner();
                                subscriber.onError(this.error.terminate());
                                return;
                            }
                            if (simpleQueue.isEmpty()) {
                                this.active.compareAndSet(switchMapInnerSubscriber, null);
                                continue;
                            }
                        } else if (simpleQueue.isEmpty()) {
                            this.active.compareAndSet(switchMapInnerSubscriber, null);
                            continue;
                        }
                    }
                    long l = this.requested.get();
                    long l2 = 0L;
                    do {
                        int n3;
                        Object r;
                        block31 : {
                            block29 : {
                                block30 : {
                                    n2 = n3 = 0;
                                    if (l2 == l) break block28;
                                    if (this.cancelled) {
                                        return;
                                    }
                                    boolean bl = switchMapInnerSubscriber.done;
                                    try {
                                        r = simpleQueue.poll();
                                    }
                                    catch (Throwable throwable) {
                                        Exceptions.throwIfFatal(throwable);
                                        switchMapInnerSubscriber.cancel();
                                        this.error.addThrowable(throwable);
                                        r = null;
                                        bl = true;
                                    }
                                    n2 = r == null ? 1 : 0;
                                    if (switchMapInnerSubscriber != this.active.get()) break block29;
                                    if (this.delayErrors) break block30;
                                    if ((Throwable)this.error.get() != null) {
                                        subscriber.onError(this.error.terminate());
                                        return;
                                    }
                                    if (n2 == 0) break block31;
                                    this.active.compareAndSet(switchMapInnerSubscriber, null);
                                    break block29;
                                }
                                if (n2 == 0) break block31;
                                this.active.compareAndSet(switchMapInnerSubscriber, null);
                            }
                            n2 = 1;
                            break;
                        }
                        if (n2 != 0) {
                            n2 = n3;
                            break;
                        }
                        subscriber.onNext(r);
                        ++l2;
                    } while (true);
                    if (l2 == 0L) continue;
                    if (!this.cancelled) {
                        if (l != Long.MAX_VALUE) {
                            this.requested.addAndGet(- l2);
                        }
                        ((Subscription)switchMapInnerSubscriber.get()).request(l2);
                    }
                    if (n2 != 0) continue;
                }
                n = n2 = this.addAndGet(- n);
                if (n2 == 0) break;
            } while (true);
        }

        public void onComplete() {
            if (this.done) {
                return;
            }
            this.done = true;
            this.drain();
        }

        public void onError(Throwable throwable) {
            if (!this.done && this.error.addThrowable(throwable)) {
                if (!this.delayErrors) {
                    this.disposeInner();
                }
                this.done = true;
                this.drain();
                return;
            }
            RxJavaPlugins.onError(throwable);
        }

        public void onNext(T object) {
            SwitchMapInnerSubscriber<T, R> switchMapInnerSubscriber;
            long l;
            if (this.done) {
                return;
            }
            this.unique = l = this.unique + 1L;
            SwitchMapInnerSubscriber<T, R> switchMapInnerSubscriber2 = this.active.get();
            if (switchMapInnerSubscriber2 != null) {
                switchMapInnerSubscriber2.cancel();
            }
            try {
                object = ObjectHelper.requireNonNull(this.mapper.apply(object), "The publisher returned is null");
                switchMapInnerSubscriber2 = new SwitchMapInnerSubscriber(this, l, this.bufferSize);
            }
            catch (Throwable throwable) {
                Exceptions.throwIfFatal(throwable);
                this.s.cancel();
                this.onError(throwable);
                return;
            }
            do {
                if ((switchMapInnerSubscriber = this.active.get()) != CANCELLED) continue;
                return;
            } while (!this.active.compareAndSet(switchMapInnerSubscriber, switchMapInnerSubscriber2));
            object.subscribe(switchMapInnerSubscriber2);
            return;
        }

        @Override
        public void onSubscribe(Subscription subscription) {
            if (SubscriptionHelper.validate(this.s, subscription)) {
                this.s = subscription;
                this.actual.onSubscribe((Subscription)this);
            }
        }

        public void request(long l) {
            if (SubscriptionHelper.validate(l)) {
                BackpressureHelper.add(this.requested, l);
                if (this.unique == 0L) {
                    this.s.request(Long.MAX_VALUE);
                    return;
                }
                this.drain();
            }
        }
    }

}

