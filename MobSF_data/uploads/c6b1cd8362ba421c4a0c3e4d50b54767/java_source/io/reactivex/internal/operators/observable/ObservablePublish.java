/*
 * Decompiled with CFR 0_132.
 */
package io.reactivex.internal.operators.observable;

import io.reactivex.ObservableSource;
import io.reactivex.Observer;
import io.reactivex.disposables.Disposable;
import io.reactivex.exceptions.Exceptions;
import io.reactivex.functions.Consumer;
import io.reactivex.internal.disposables.DisposableHelper;
import io.reactivex.internal.fuseable.HasUpstreamObservableSource;
import io.reactivex.internal.util.ExceptionHelper;
import io.reactivex.observables.ConnectableObservable;
import io.reactivex.plugins.RxJavaPlugins;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicReference;

public final class ObservablePublish<T>
extends ConnectableObservable<T>
implements HasUpstreamObservableSource<T> {
    final AtomicReference<PublishObserver<T>> current;
    final ObservableSource<T> onSubscribe;
    final ObservableSource<T> source;

    private ObservablePublish(ObservableSource<T> observableSource, ObservableSource<T> observableSource2, AtomicReference<PublishObserver<T>> atomicReference) {
        this.onSubscribe = observableSource;
        this.source = observableSource2;
        this.current = atomicReference;
    }

    public static <T> ConnectableObservable<T> create(ObservableSource<T> observableSource) {
        AtomicReference atomicReference = new AtomicReference();
        return RxJavaPlugins.onAssembly(new ObservablePublish(new PublishSource(atomicReference), observableSource, atomicReference));
    }

    @Override
    public void connect(Consumer<? super Disposable> consumer) {
        PublishObserver<T> publishObserver;
        PublishObserver<T> publishObserver2;
        do {
            if ((publishObserver = this.current.get()) == null) continue;
            publishObserver2 = publishObserver;
            if (!publishObserver.isDisposed()) break;
        } while (!this.current.compareAndSet(publishObserver, publishObserver2 = new PublishObserver<T>(this.current)));
        boolean bl = publishObserver2.shouldConnect.get();
        boolean bl2 = true;
        if (bl || !publishObserver2.shouldConnect.compareAndSet(false, true)) {
            bl2 = false;
        }
        try {
            consumer.accept(publishObserver2);
            if (bl2) {
                this.source.subscribe(publishObserver2);
            }
            return;
        }
        catch (Throwable throwable) {
            Exceptions.throwIfFatal(throwable);
            throw ExceptionHelper.wrapOrThrow(throwable);
        }
    }

    @Override
    public ObservableSource<T> source() {
        return this.source;
    }

    @Override
    protected void subscribeActual(Observer<? super T> observer) {
        this.onSubscribe.subscribe(observer);
    }

    static final class InnerDisposable<T>
    extends AtomicReference<Object>
    implements Disposable {
        private static final long serialVersionUID = -1100270633763673112L;
        final Observer<? super T> child;

        InnerDisposable(Observer<? super T> observer) {
            this.child = observer;
        }

        @Override
        public void dispose() {
            InnerDisposable innerDisposable = this.getAndSet(this);
            if (innerDisposable != null && innerDisposable != this) {
                ((PublishObserver)((Object)innerDisposable)).remove(this);
            }
        }

        @Override
        public boolean isDisposed() {
            if (this.get() == this) {
                return true;
            }
            return false;
        }

        void setParent(PublishObserver<T> publishObserver) {
            if (!this.compareAndSet(null, publishObserver)) {
                publishObserver.remove(this);
            }
        }
    }

    static final class PublishObserver<T>
    implements Observer<T>,
    Disposable {
        static final InnerDisposable[] EMPTY = new InnerDisposable[0];
        static final InnerDisposable[] TERMINATED = new InnerDisposable[0];
        final AtomicReference<PublishObserver<T>> current;
        final AtomicReference<InnerDisposable<T>[]> observers = new AtomicReference<InnerDisposable[]>(EMPTY);
        final AtomicReference<Disposable> s = new AtomicReference();
        final AtomicBoolean shouldConnect;

        PublishObserver(AtomicReference<PublishObserver<T>> atomicReference) {
            this.current = atomicReference;
            this.shouldConnect = new AtomicBoolean();
        }

        boolean add(InnerDisposable<T> innerDisposable) {
            InnerDisposable[] arrinnerDisposable;
            InnerDisposable<T>[] arrinnerDisposable2;
            do {
                if ((arrinnerDisposable2 = this.observers.get()) == TERMINATED) {
                    return false;
                }
                int n = arrinnerDisposable2.length;
                arrinnerDisposable = new InnerDisposable[n + 1];
                System.arraycopy(arrinnerDisposable2, 0, arrinnerDisposable, 0, n);
                arrinnerDisposable[n] = innerDisposable;
            } while (!this.observers.compareAndSet(arrinnerDisposable2, arrinnerDisposable));
            return true;
        }

        @Override
        public void dispose() {
            if (this.observers.get() != TERMINATED && this.observers.getAndSet(TERMINATED) != TERMINATED) {
                this.current.compareAndSet(this, null);
                DisposableHelper.dispose(this.s);
            }
        }

        @Override
        public boolean isDisposed() {
            if (this.observers.get() == TERMINATED) {
                return true;
            }
            return false;
        }

        @Override
        public void onComplete() {
            this.current.compareAndSet(this, null);
            InnerDisposable[] arrinnerDisposable = this.observers.getAndSet(TERMINATED);
            int n = arrinnerDisposable.length;
            for (int i = 0; i < n; ++i) {
                arrinnerDisposable[i].child.onComplete();
            }
        }

        @Override
        public void onError(Throwable throwable) {
            this.current.compareAndSet(this, null);
            InnerDisposable[] arrinnerDisposable = this.observers.getAndSet(TERMINATED);
            if (arrinnerDisposable.length != 0) {
                int n = arrinnerDisposable.length;
                for (int i = 0; i < n; ++i) {
                    arrinnerDisposable[i].child.onError(throwable);
                }
            } else {
                RxJavaPlugins.onError(throwable);
            }
        }

        @Override
        public void onNext(T t) {
            InnerDisposable<T>[] arrinnerDisposable = this.observers.get();
            int n = arrinnerDisposable.length;
            for (int i = 0; i < n; ++i) {
                arrinnerDisposable[i].child.onNext(t);
            }
        }

        @Override
        public void onSubscribe(Disposable disposable) {
            DisposableHelper.setOnce(this.s, disposable);
        }

        void remove(InnerDisposable<T> innerDisposable) {
            InnerDisposable<T>[] arrinnerDisposable;
            InnerDisposable[] arrinnerDisposable2;
            do {
                int n;
                int n2;
                if ((n2 = (arrinnerDisposable = this.observers.get()).length) == 0) {
                    return;
                }
                int n3 = -1;
                int n4 = 0;
                do {
                    n = n3;
                    if (n4 >= n2) break;
                    if (arrinnerDisposable[n4].equals(innerDisposable)) {
                        n = n4;
                        break;
                    }
                    ++n4;
                } while (true);
                if (n < 0) {
                    return;
                }
                if (n2 == 1) {
                    arrinnerDisposable2 = EMPTY;
                    continue;
                }
                arrinnerDisposable2 = new InnerDisposable[n2 - 1];
                System.arraycopy(arrinnerDisposable, 0, arrinnerDisposable2, 0, n);
                System.arraycopy(arrinnerDisposable, n + 1, arrinnerDisposable2, n, n2 - n - 1);
            } while (!this.observers.compareAndSet(arrinnerDisposable, arrinnerDisposable2));
        }
    }

    static final class PublishSource<T>
    implements ObservableSource<T> {
        private final AtomicReference<PublishObserver<T>> curr;

        PublishSource(AtomicReference<PublishObserver<T>> atomicReference) {
            this.curr = atomicReference;
        }

        /*
         * Unable to fully structure code
         * Enabled aggressive block sorting
         * Lifted jumps to return sites
         */
        @Override
        public void subscribe(Observer<? super T> var1_1) {
            var3_2 = new InnerDisposable<T>(var1_1);
            var1_1.onSubscribe(var3_2);
            do lbl-1000: // 3 sources:
            {
                if ((var2_3 = this.curr.get()) != null) {
                    var1_1 = var2_3;
                    if (!var2_3.isDisposed()) continue;
                }
                if (!this.curr.compareAndSet(var2_3, (PublishObserver<T>)(var1_1 = new PublishObserver<T>(this.curr)))) ** GOTO lbl-1000
            } while (!var1_1.add(var3_2));
            var3_2.setParent((PublishObserver<? super T>)var1_1);
        }
    }

}

