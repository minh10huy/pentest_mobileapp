/*
 * Decompiled with CFR 0_132.
 */
package io.reactivex.internal.operators.completable;

import io.reactivex.Completable;
import io.reactivex.CompletableObserver;
import io.reactivex.CompletableSource;
import io.reactivex.disposables.Disposable;
import io.reactivex.exceptions.CompositeException;
import io.reactivex.exceptions.Exceptions;
import io.reactivex.functions.Consumer;
import io.reactivex.functions.Function;
import io.reactivex.internal.disposables.DisposableHelper;
import io.reactivex.internal.disposables.EmptyDisposable;
import io.reactivex.internal.functions.ObjectHelper;
import io.reactivex.plugins.RxJavaPlugins;
import java.io.Serializable;
import java.util.concurrent.Callable;
import java.util.concurrent.atomic.AtomicReference;

public final class CompletableUsing<R>
extends Completable {
    final Function<? super R, ? extends CompletableSource> completableFunction;
    final Consumer<? super R> disposer;
    final boolean eager;
    final Callable<R> resourceSupplier;

    public CompletableUsing(Callable<R> callable, Function<? super R, ? extends CompletableSource> function, Consumer<? super R> consumer, boolean bl) {
        this.resourceSupplier = callable;
        this.completableFunction = function;
        this.disposer = consumer;
        this.eager = bl;
    }

    @Override
    protected void subscribeActual(CompletableObserver completableObserver) {
        R r;
        try {
            r = this.resourceSupplier.call();
        }
        catch (Throwable throwable) {
            Exceptions.throwIfFatal(throwable);
            EmptyDisposable.error(throwable, completableObserver);
            return;
        }
        try {
            CompletableSource completableSource = ObjectHelper.requireNonNull(this.completableFunction.apply(r), "The completableFunction returned a null CompletableSource");
            completableSource.subscribe(new UsingObserver<R>(completableObserver, (R)r, this.disposer, this.eager));
            return;
        }
        catch (Throwable throwable) {
            Exceptions.throwIfFatal(throwable);
            if (this.eager) {
                try {
                    this.disposer.accept(r);
                }
                catch (Throwable throwable2) {
                    Exceptions.throwIfFatal(throwable2);
                    EmptyDisposable.error((Throwable)new CompositeException(throwable, throwable2), completableObserver);
                    return;
                }
            }
            EmptyDisposable.error(throwable, completableObserver);
            if (!this.eager) {
                try {
                    this.disposer.accept(r);
                    return;
                }
                catch (Throwable throwable3) {
                    Exceptions.throwIfFatal(throwable3);
                    RxJavaPlugins.onError(throwable3);
                }
            }
            return;
        }
    }

    static final class UsingObserver<R>
    extends AtomicReference<Object>
    implements CompletableObserver,
    Disposable {
        private static final long serialVersionUID = -674404550052917487L;
        final CompletableObserver actual;
        Disposable d;
        final Consumer<? super R> disposer;
        final boolean eager;

        UsingObserver(CompletableObserver completableObserver, R r, Consumer<? super R> consumer, boolean bl) {
            super(r);
            this.actual = completableObserver;
            this.disposer = consumer;
            this.eager = bl;
        }

        @Override
        public void dispose() {
            this.d.dispose();
            this.d = DisposableHelper.DISPOSED;
            this.disposeResourceAfter();
        }

        void disposeResourceAfter() {
            UsingObserver usingObserver = this.getAndSet(this);
            if (usingObserver != this) {
                try {
                    this.disposer.accept(usingObserver);
                    return;
                }
                catch (Throwable throwable) {
                    Exceptions.throwIfFatal(throwable);
                    RxJavaPlugins.onError(throwable);
                }
            }
        }

        @Override
        public boolean isDisposed() {
            return this.d.isDisposed();
        }

        @Override
        public void onComplete() {
            this.d = DisposableHelper.DISPOSED;
            if (this.eager) {
                UsingObserver usingObserver = this.getAndSet(this);
                if (usingObserver != this) {
                    try {
                        this.disposer.accept(usingObserver);
                    }
                    catch (Throwable throwable) {
                        Exceptions.throwIfFatal(throwable);
                        this.actual.onError(throwable);
                        return;
                    }
                } else {
                    return;
                }
            }
            this.actual.onComplete();
            if (!this.eager) {
                this.disposeResourceAfter();
            }
        }

        @Override
        public void onError(Throwable throwable) {
            this.d = DisposableHelper.DISPOSED;
            Serializable serializable = throwable;
            if (this.eager) {
                serializable = this.getAndSet(this);
                if (serializable != this) {
                    try {
                        this.disposer.accept(serializable);
                        serializable = throwable;
                    }
                    catch (Throwable throwable2) {
                        Exceptions.throwIfFatal(throwable2);
                        serializable = new CompositeException(throwable, throwable2);
                    }
                } else {
                    return;
                }
            }
            this.actual.onError((Throwable)serializable);
            if (!this.eager) {
                this.disposeResourceAfter();
            }
        }

        @Override
        public void onSubscribe(Disposable disposable) {
            if (DisposableHelper.validate(this.d, disposable)) {
                this.d = disposable;
                this.actual.onSubscribe(this);
            }
        }
    }

}

