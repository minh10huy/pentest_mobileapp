/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  org.reactivestreams.Subscriber
 *  org.reactivestreams.Subscription
 */
package io.reactivex.internal.operators.flowable;

import io.reactivex.Flowable;
import io.reactivex.FlowableSubscriber;
import io.reactivex.disposables.Disposable;
import io.reactivex.exceptions.Exceptions;
import io.reactivex.internal.functions.ObjectHelper;
import io.reactivex.internal.fuseable.SimplePlainQueue;
import io.reactivex.internal.operators.flowable.AbstractFlowableWithUpstream;
import io.reactivex.internal.queue.MpscLinkedQueue;
import io.reactivex.internal.subscribers.QueueDrainSubscriber;
import io.reactivex.internal.subscriptions.EmptySubscription;
import io.reactivex.internal.subscriptions.SubscriptionHelper;
import io.reactivex.internal.util.QueueDrainHelper;
import io.reactivex.subscribers.DisposableSubscriber;
import io.reactivex.subscribers.SerializedSubscriber;
import java.util.Collection;
import java.util.concurrent.Callable;
import org.reactivestreams.Publisher;
import org.reactivestreams.Subscriber;
import org.reactivestreams.Subscription;

public final class FlowableBufferExactBoundary<T, U extends Collection<? super T>, B>
extends AbstractFlowableWithUpstream<T, U> {
    final Publisher<B> boundary;
    final Callable<U> bufferSupplier;

    public FlowableBufferExactBoundary(Flowable<T> flowable, Publisher<B> publisher, Callable<U> callable) {
        super(flowable);
        this.boundary = publisher;
        this.bufferSupplier = callable;
    }

    @Override
    protected void subscribeActual(Subscriber<? super U> subscriber) {
        this.source.subscribe(new BufferExactBoundarySubscriber(new SerializedSubscriber<U>(subscriber), this.bufferSupplier, this.boundary));
    }

    static final class BufferBoundarySubscriber<T, U extends Collection<? super T>, B>
    extends DisposableSubscriber<B> {
        final BufferExactBoundarySubscriber<T, U, B> parent;

        BufferBoundarySubscriber(BufferExactBoundarySubscriber<T, U, B> bufferExactBoundarySubscriber) {
            this.parent = bufferExactBoundarySubscriber;
        }

        public void onComplete() {
            this.parent.onComplete();
        }

        public void onError(Throwable throwable) {
            this.parent.onError(throwable);
        }

        public void onNext(B b) {
            this.parent.next();
        }
    }

    static final class BufferExactBoundarySubscriber<T, U extends Collection<? super T>, B>
    extends QueueDrainSubscriber<T, U, U>
    implements FlowableSubscriber<T>,
    Subscription,
    Disposable {
        final Publisher<B> boundary;
        U buffer;
        final Callable<U> bufferSupplier;
        Disposable other;
        Subscription s;

        BufferExactBoundarySubscriber(Subscriber<? super U> subscriber, Callable<U> callable, Publisher<B> publisher) {
            super(subscriber, new MpscLinkedQueue());
            this.bufferSupplier = callable;
            this.boundary = publisher;
        }

        @Override
        public boolean accept(Subscriber<? super U> subscriber, U u) {
            this.actual.onNext(u);
            return true;
        }

        public void cancel() {
            if (!this.cancelled) {
                this.cancelled = true;
                this.other.dispose();
                this.s.cancel();
                if (this.enter()) {
                    this.queue.clear();
                }
            }
        }

        @Override
        public void dispose() {
            this.cancel();
        }

        @Override
        public boolean isDisposed() {
            return this.cancelled;
        }

        /*
         * Enabled aggressive block sorting
         * Enabled unnecessary exception pruning
         * Enabled aggressive exception aggregation
         */
        void next() {
            Collection collection;
            U u;
            try {
                collection = (Collection)ObjectHelper.requireNonNull(this.bufferSupplier.call(), "The buffer supplied is null");
            }
            catch (Throwable throwable) {
                Exceptions.throwIfFatal(throwable);
                this.cancel();
                this.actual.onError(throwable);
                return;
            }
            synchronized (this) {
                u = this.buffer;
                if (u == null) {
                    return;
                }
                this.buffer = collection;
            }
            this.fastPathEmitMax(u, false, this);
        }

        /*
         * Enabled aggressive block sorting
         * Enabled unnecessary exception pruning
         * Enabled aggressive exception aggregation
         */
        public void onComplete() {
            U u;
            synchronized (this) {
                u = this.buffer;
                if (u == null) {
                    return;
                }
                this.buffer = null;
            }
            this.queue.offer(u);
            this.done = true;
            if (this.enter()) {
                QueueDrainHelper.drainMaxLoop(this.queue, this.actual, false, this, this);
            }
        }

        public void onError(Throwable throwable) {
            this.cancel();
            this.actual.onError(throwable);
        }

        /*
         * Enabled aggressive block sorting
         * Enabled unnecessary exception pruning
         * Enabled aggressive exception aggregation
         */
        public void onNext(T t) {
            synchronized (this) {
                U u = this.buffer;
                if (u == null) {
                    return;
                }
                u.add(t);
                return;
            }
        }

        @Override
        public void onSubscribe(Subscription subscription) {
            Object object;
            if (!SubscriptionHelper.validate(this.s, subscription)) {
                return;
            }
            this.s = subscription;
            try {
                object = (Collection)ObjectHelper.requireNonNull(this.bufferSupplier.call(), "The buffer supplied is null");
                this.buffer = object;
                this.other = object = new BufferBoundarySubscriber(this);
            }
            catch (Throwable throwable) {
                Exceptions.throwIfFatal(throwable);
                this.cancelled = true;
                subscription.cancel();
                EmptySubscription.error(throwable, this.actual);
                return;
            }
            this.actual.onSubscribe((Subscription)this);
            if (!this.cancelled) {
                subscription.request(Long.MAX_VALUE);
                this.boundary.subscribe((Subscriber<B>)object);
            }
        }

        public void request(long l) {
            this.requested(l);
        }
    }

}

