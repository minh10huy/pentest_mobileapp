/*
 * Decompiled with CFR 0_132.
 */
package io.reactivex.internal.operators.maybe;

import io.reactivex.Maybe;
import io.reactivex.MaybeObserver;
import io.reactivex.disposables.Disposable;
import io.reactivex.disposables.Disposables;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;

public final class MaybeFromFuture<T>
extends Maybe<T> {
    final Future<? extends T> future;
    final long timeout;
    final TimeUnit unit;

    public MaybeFromFuture(Future<? extends T> future, long l, TimeUnit timeUnit) {
        this.future = future;
        this.timeout = l;
        this.unit = timeUnit;
    }

    @Override
    protected void subscribeActual(MaybeObserver<? super T> maybeObserver) {
        Disposable disposable = Disposables.empty();
        maybeObserver.onSubscribe(disposable);
        if (!disposable.isDisposed()) {
            try {
                T t = this.timeout <= 0L ? this.future.get() : this.future.get(this.timeout, this.unit);
                if (!disposable.isDisposed()) {
                    if (t == null) {
                        maybeObserver.onComplete();
                        return;
                    }
                    maybeObserver.onSuccess(t);
                    return;
                }
            }
            catch (TimeoutException timeoutException) {
                if (!disposable.isDisposed()) {
                    maybeObserver.onError(timeoutException);
                }
                return;
            }
            catch (ExecutionException executionException) {
                if (!disposable.isDisposed()) {
                    maybeObserver.onError(executionException.getCause());
                }
                return;
            }
            catch (InterruptedException interruptedException) {
                if (!disposable.isDisposed()) {
                    maybeObserver.onError(interruptedException);
                }
                return;
            }
        }
    }
}

