/*
 * Decompiled with CFR 0_132.
 */
package io.reactivex.internal.operators.observable;

import io.reactivex.ObservableSource;
import io.reactivex.Observer;
import io.reactivex.disposables.Disposable;
import io.reactivex.exceptions.Exceptions;
import io.reactivex.functions.BiFunction;
import io.reactivex.internal.disposables.DisposableHelper;
import io.reactivex.internal.functions.ObjectHelper;
import io.reactivex.internal.operators.observable.AbstractObservableWithUpstream;
import io.reactivex.observers.SerializedObserver;
import java.util.concurrent.atomic.AtomicReference;

public final class ObservableWithLatestFrom<T, U, R>
extends AbstractObservableWithUpstream<T, R> {
    final BiFunction<? super T, ? super U, ? extends R> combiner;
    final ObservableSource<? extends U> other;

    public ObservableWithLatestFrom(ObservableSource<T> observableSource, BiFunction<? super T, ? super U, ? extends R> biFunction, ObservableSource<? extends U> observableSource2) {
        super(observableSource);
        this.combiner = biFunction;
        this.other = observableSource2;
    }

    @Override
    public void subscribeActual(Observer<? super R> observer) {
        observer = new SerializedObserver<R>(observer);
        WithLatestFromObserver<? super T, ? super U, ? extends R> withLatestFromObserver = new WithLatestFromObserver<T, U, R>(observer, this.combiner);
        observer.onSubscribe(withLatestFromObserver);
        this.other.subscribe(new WithLastFrom(withLatestFromObserver));
        this.source.subscribe(withLatestFromObserver);
    }

    final class WithLastFrom
    implements Observer<U> {
        private final WithLatestFromObserver<T, U, R> wlf;

        WithLastFrom(WithLatestFromObserver<T, U, R> withLatestFromObserver) {
            this.wlf = withLatestFromObserver;
        }

        @Override
        public void onComplete() {
        }

        @Override
        public void onError(Throwable throwable) {
            this.wlf.otherError(throwable);
        }

        @Override
        public void onNext(U u) {
            this.wlf.lazySet(u);
        }

        @Override
        public void onSubscribe(Disposable disposable) {
            this.wlf.setOther(disposable);
        }
    }

    static final class WithLatestFromObserver<T, U, R>
    extends AtomicReference<U>
    implements Observer<T>,
    Disposable {
        private static final long serialVersionUID = -312246233408980075L;
        final Observer<? super R> actual;
        final BiFunction<? super T, ? super U, ? extends R> combiner;
        final AtomicReference<Disposable> other = new AtomicReference();
        final AtomicReference<Disposable> s = new AtomicReference();

        WithLatestFromObserver(Observer<? super R> observer, BiFunction<? super T, ? super U, ? extends R> biFunction) {
            this.actual = observer;
            this.combiner = biFunction;
        }

        @Override
        public void dispose() {
            DisposableHelper.dispose(this.s);
            DisposableHelper.dispose(this.other);
        }

        @Override
        public boolean isDisposed() {
            return DisposableHelper.isDisposed(this.s.get());
        }

        @Override
        public void onComplete() {
            DisposableHelper.dispose(this.other);
            this.actual.onComplete();
        }

        @Override
        public void onError(Throwable throwable) {
            DisposableHelper.dispose(this.other);
            this.actual.onError(throwable);
        }

        @Override
        public void onNext(T object) {
            Object v = this.get();
            if (v != null) {
                try {
                    object = ObjectHelper.requireNonNull(this.combiner.apply(object, v), "The combiner returned a null value");
                    this.actual.onNext(object);
                    return;
                }
                catch (Throwable throwable) {
                    Exceptions.throwIfFatal(throwable);
                    this.dispose();
                    this.actual.onError(throwable);
                    return;
                }
            }
        }

        @Override
        public void onSubscribe(Disposable disposable) {
            DisposableHelper.setOnce(this.s, disposable);
        }

        public void otherError(Throwable throwable) {
            DisposableHelper.dispose(this.s);
            this.actual.onError(throwable);
        }

        public boolean setOther(Disposable disposable) {
            return DisposableHelper.setOnce(this.other, disposable);
        }
    }

}

