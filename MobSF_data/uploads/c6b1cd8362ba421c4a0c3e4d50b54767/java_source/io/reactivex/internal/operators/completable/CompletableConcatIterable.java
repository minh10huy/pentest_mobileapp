/*
 * Decompiled with CFR 0_132.
 */
package io.reactivex.internal.operators.completable;

import io.reactivex.Completable;
import io.reactivex.CompletableObserver;
import io.reactivex.CompletableSource;
import io.reactivex.disposables.Disposable;
import io.reactivex.exceptions.Exceptions;
import io.reactivex.internal.disposables.EmptyDisposable;
import io.reactivex.internal.disposables.SequentialDisposable;
import io.reactivex.internal.functions.ObjectHelper;
import java.util.Iterator;
import java.util.concurrent.atomic.AtomicInteger;

public final class CompletableConcatIterable
extends Completable {
    final Iterable<? extends CompletableSource> sources;

    public CompletableConcatIterable(Iterable<? extends CompletableSource> iterable) {
        this.sources = iterable;
    }

    @Override
    public void subscribeActual(CompletableObserver completableObserver) {
        try {
            Object object = ObjectHelper.requireNonNull(this.sources.iterator(), "The iterator returned is null");
            object = new ConcatInnerObserver(completableObserver, (Iterator<? extends CompletableSource>)object);
            completableObserver.onSubscribe(object.sd);
            object.next();
            return;
        }
        catch (Throwable throwable) {
            Exceptions.throwIfFatal(throwable);
            EmptyDisposable.error(throwable, completableObserver);
            return;
        }
    }

    static final class ConcatInnerObserver
    extends AtomicInteger
    implements CompletableObserver {
        private static final long serialVersionUID = -7965400327305809232L;
        final CompletableObserver actual;
        final SequentialDisposable sd;
        final Iterator<? extends CompletableSource> sources;

        ConcatInnerObserver(CompletableObserver completableObserver, Iterator<? extends CompletableSource> iterator) {
            this.actual = completableObserver;
            this.sources = iterator;
            this.sd = new SequentialDisposable();
        }

        /*
         * Loose catch block
         * Enabled aggressive block sorting
         * Enabled unnecessary exception pruning
         * Enabled aggressive exception aggregation
         * Lifted jumps to return sites
         */
        void next() {
            if (this.sd.isDisposed()) {
                return;
            }
            if (this.getAndIncrement() != 0) {
                return;
            }
            Iterator<? extends CompletableSource> iterator = this.sources;
            do {
                block8 : {
                    if (this.sd.isDisposed()) {
                        return;
                    }
                    boolean bl = iterator.hasNext();
                    if (bl) break block8;
                    this.actual.onComplete();
                    return;
                }
                CompletableSource completableSource = ObjectHelper.requireNonNull(iterator.next(), "The CompletableSource returned is null");
                completableSource.subscribe(this);
            } while (this.decrementAndGet() != 0);
            return;
            catch (Throwable throwable) {
                Exceptions.throwIfFatal(throwable);
                this.actual.onError(throwable);
                return;
            }
            catch (Throwable throwable) {
                Exceptions.throwIfFatal(throwable);
                this.actual.onError(throwable);
                return;
            }
        }

        @Override
        public void onComplete() {
            this.next();
        }

        @Override
        public void onError(Throwable throwable) {
            this.actual.onError(throwable);
        }

        @Override
        public void onSubscribe(Disposable disposable) {
            this.sd.replace(disposable);
        }
    }

}

