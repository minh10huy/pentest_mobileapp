/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  org.reactivestreams.Subscriber
 *  org.reactivestreams.Subscription
 */
package io.reactivex.internal.operators.flowable;

import io.reactivex.Flowable;
import io.reactivex.annotations.Nullable;
import io.reactivex.internal.functions.ObjectHelper;
import io.reactivex.internal.fuseable.ConditionalSubscriber;
import io.reactivex.internal.subscriptions.BasicQueueSubscription;
import io.reactivex.internal.subscriptions.SubscriptionHelper;
import io.reactivex.internal.util.BackpressureHelper;
import org.reactivestreams.Subscriber;
import org.reactivestreams.Subscription;

public final class FlowableFromArray<T>
extends Flowable<T> {
    final T[] array;

    public FlowableFromArray(T[] arrT) {
        this.array = arrT;
    }

    @Override
    public void subscribeActual(Subscriber<? super T> subscriber) {
        if (subscriber instanceof ConditionalSubscriber) {
            subscriber.onSubscribe(new ArrayConditionalSubscription<T>((ConditionalSubscriber)subscriber, this.array));
            return;
        }
        subscriber.onSubscribe(new ArraySubscription<T>(subscriber, this.array));
    }

    static final class ArrayConditionalSubscription<T>
    extends BaseArraySubscription<T> {
        private static final long serialVersionUID = 2587302975077663557L;
        final ConditionalSubscriber<? super T> actual;

        ArrayConditionalSubscription(ConditionalSubscriber<? super T> conditionalSubscriber, T[] arrT) {
            super(arrT);
            this.actual = conditionalSubscriber;
        }

        @Override
        void fastPath() {
            Object[] arrobject = this.array;
            int n = arrobject.length;
            ConditionalSubscriber<? super T> conditionalSubscriber = this.actual;
            for (int i = this.index; i != n; ++i) {
                if (this.cancelled) {
                    return;
                }
                Object object = arrobject[i];
                if (object == null) {
                    conditionalSubscriber.onError((Throwable)new NullPointerException("array element is null"));
                    return;
                }
                conditionalSubscriber.tryOnNext(object);
            }
            if (this.cancelled) {
                return;
            }
            conditionalSubscriber.onComplete();
        }

        @Override
        void slowPath(long l) {
            long l2;
            Object[] arrobject = this.array;
            int n = arrobject.length;
            int n2 = this.index;
            ConditionalSubscriber<? super T> conditionalSubscriber = this.actual;
            do {
                l2 = 0L;
                do {
                    long l3;
                    if (l2 != l && n2 != n) {
                        if (this.cancelled) {
                            return;
                        }
                        Object object = arrobject[n2];
                        if (object == null) {
                            conditionalSubscriber.onError((Throwable)new NullPointerException("array element is null"));
                            return;
                        }
                        l3 = l2;
                        if (conditionalSubscriber.tryOnNext(object)) {
                            l3 = l2 + 1L;
                        }
                        ++n2;
                        l2 = l3;
                        continue;
                    }
                    if (n2 == n) {
                        if (!this.cancelled) {
                            conditionalSubscriber.onComplete();
                        }
                        return;
                    }
                    l = l3 = this.get();
                    if (l2 == l3) break;
                } while (true);
                this.index = n2;
                l = l2 = this.addAndGet(- l2);
            } while (l2 != 0L);
        }
    }

    static final class ArraySubscription<T>
    extends BaseArraySubscription<T> {
        private static final long serialVersionUID = 2587302975077663557L;
        final Subscriber<? super T> actual;

        ArraySubscription(Subscriber<? super T> subscriber, T[] arrT) {
            super(arrT);
            this.actual = subscriber;
        }

        @Override
        void fastPath() {
            Object[] arrobject = this.array;
            int n = arrobject.length;
            Subscriber<? super T> subscriber = this.actual;
            for (int i = this.index; i != n; ++i) {
                if (this.cancelled) {
                    return;
                }
                Object object = arrobject[i];
                if (object == null) {
                    subscriber.onError((Throwable)new NullPointerException("array element is null"));
                    return;
                }
                subscriber.onNext(object);
            }
            if (this.cancelled) {
                return;
            }
            subscriber.onComplete();
        }

        @Override
        void slowPath(long l) {
            long l2;
            Object[] arrobject = this.array;
            int n = arrobject.length;
            int n2 = this.index;
            Subscriber<? super T> subscriber = this.actual;
            do {
                l2 = 0L;
                do {
                    long l3;
                    if (l2 != l && n2 != n) {
                        if (this.cancelled) {
                            return;
                        }
                        Object object = arrobject[n2];
                        if (object == null) {
                            subscriber.onError((Throwable)new NullPointerException("array element is null"));
                            return;
                        }
                        subscriber.onNext(object);
                        ++n2;
                        ++l2;
                        continue;
                    }
                    if (n2 == n) {
                        if (!this.cancelled) {
                            subscriber.onComplete();
                        }
                        return;
                    }
                    l = l3 = this.get();
                    if (l2 == l3) break;
                } while (true);
                this.index = n2;
                l = l2 = this.addAndGet(- l2);
            } while (l2 != 0L);
        }
    }

    static abstract class BaseArraySubscription<T>
    extends BasicQueueSubscription<T> {
        private static final long serialVersionUID = -2252972430506210021L;
        final T[] array;
        volatile boolean cancelled;
        int index;

        BaseArraySubscription(T[] arrT) {
            this.array = arrT;
        }

        public final void cancel() {
            this.cancelled = true;
        }

        @Override
        public final void clear() {
            this.index = this.array.length;
        }

        abstract void fastPath();

        @Override
        public final boolean isEmpty() {
            if (this.index == this.array.length) {
                return true;
            }
            return false;
        }

        @Nullable
        @Override
        public final T poll() {
            int n = this.index;
            T[] arrT = this.array;
            if (n == arrT.length) {
                return null;
            }
            this.index = n + 1;
            return ObjectHelper.requireNonNull(arrT[n], "array element is null");
        }

        public final void request(long l) {
            if (SubscriptionHelper.validate(l) && BackpressureHelper.add(this, l) == 0L) {
                if (l == Long.MAX_VALUE) {
                    this.fastPath();
                    return;
                }
                this.slowPath(l);
            }
        }

        @Override
        public final int requestFusion(int n) {
            return n & 1;
        }

        abstract void slowPath(long var1);
    }

}

