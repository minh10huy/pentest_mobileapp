/*
 * Decompiled with CFR 0_132.
 */
package io.reactivex.internal.operators.single;

import io.reactivex.Single;
import io.reactivex.SingleObserver;
import io.reactivex.SingleSource;
import io.reactivex.disposables.CompositeDisposable;
import io.reactivex.disposables.Disposable;
import io.reactivex.internal.functions.ObjectHelper;
import io.reactivex.plugins.RxJavaPlugins;
import java.util.concurrent.atomic.AtomicInteger;

public final class SingleEquals<T>
extends Single<Boolean> {
    final SingleSource<? extends T> first;
    final SingleSource<? extends T> second;

    public SingleEquals(SingleSource<? extends T> singleSource, SingleSource<? extends T> singleSource2) {
        this.first = singleSource;
        this.second = singleSource2;
    }

    @Override
    protected void subscribeActual(SingleObserver<? super Boolean> singleObserver) {
        AtomicInteger atomicInteger = new AtomicInteger();
        Object[] arrobject = new Object[]{null, null};
        CompositeDisposable compositeDisposable = new CompositeDisposable();
        singleObserver.onSubscribe(compositeDisposable);
        this.first.subscribe(new InnerObserver(0, compositeDisposable, arrobject, singleObserver, atomicInteger));
        this.second.subscribe(new InnerObserver(1, compositeDisposable, arrobject, singleObserver, atomicInteger));
    }

    static class InnerObserver<T>
    implements SingleObserver<T> {
        final AtomicInteger count;
        final int index;
        final SingleObserver<? super Boolean> s;
        final CompositeDisposable set;
        final Object[] values;

        InnerObserver(int n, CompositeDisposable compositeDisposable, Object[] arrobject, SingleObserver<? super Boolean> singleObserver, AtomicInteger atomicInteger) {
            this.index = n;
            this.set = compositeDisposable;
            this.values = arrobject;
            this.s = singleObserver;
            this.count = atomicInteger;
        }

        @Override
        public void onError(Throwable throwable) {
            int n;
            do {
                if ((n = this.count.get()) < 2) continue;
                RxJavaPlugins.onError(throwable);
                return;
            } while (!this.count.compareAndSet(n, 2));
            this.set.dispose();
            this.s.onError(throwable);
        }

        @Override
        public void onSubscribe(Disposable disposable) {
            this.set.add(disposable);
        }

        @Override
        public void onSuccess(T t) {
            this.values[this.index] = t;
            if (this.count.incrementAndGet() == 2) {
                this.s.onSuccess((Boolean)ObjectHelper.equals(this.values[0], this.values[1]));
            }
        }
    }

}

