/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  org.reactivestreams.Subscriber
 *  org.reactivestreams.Subscription
 */
package io.reactivex.internal.operators.flowable;

import io.reactivex.Flowable;
import io.reactivex.FlowableSubscriber;
import io.reactivex.exceptions.CompositeException;
import io.reactivex.exceptions.Exceptions;
import io.reactivex.functions.Function;
import io.reactivex.internal.operators.flowable.AbstractFlowableWithUpstream;
import io.reactivex.internal.subscriptions.SubscriptionArbiter;
import io.reactivex.plugins.RxJavaPlugins;
import org.reactivestreams.Publisher;
import org.reactivestreams.Subscriber;
import org.reactivestreams.Subscription;

public final class FlowableOnErrorNext<T>
extends AbstractFlowableWithUpstream<T, T> {
    final boolean allowFatal;
    final Function<? super Throwable, ? extends Publisher<? extends T>> nextSupplier;

    public FlowableOnErrorNext(Flowable<T> flowable, Function<? super Throwable, ? extends Publisher<? extends T>> function, boolean bl) {
        super(flowable);
        this.nextSupplier = function;
        this.allowFatal = bl;
    }

    @Override
    protected void subscribeActual(Subscriber<? super T> subscriber) {
        OnErrorNextSubscriber<? super T> onErrorNextSubscriber = new OnErrorNextSubscriber<T>(subscriber, this.nextSupplier, this.allowFatal);
        subscriber.onSubscribe((Subscription)onErrorNextSubscriber.arbiter);
        this.source.subscribe(onErrorNextSubscriber);
    }

    static final class OnErrorNextSubscriber<T>
    implements FlowableSubscriber<T> {
        final Subscriber<? super T> actual;
        final boolean allowFatal;
        final SubscriptionArbiter arbiter;
        boolean done;
        final Function<? super Throwable, ? extends Publisher<? extends T>> nextSupplier;
        boolean once;

        OnErrorNextSubscriber(Subscriber<? super T> subscriber, Function<? super Throwable, ? extends Publisher<? extends T>> function, boolean bl) {
            this.actual = subscriber;
            this.nextSupplier = function;
            this.allowFatal = bl;
            this.arbiter = new SubscriptionArbiter();
        }

        public void onComplete() {
            if (this.done) {
                return;
            }
            this.done = true;
            this.once = true;
            this.actual.onComplete();
        }

        public void onError(Throwable throwable) {
            Object object;
            block5 : {
                if (this.once) {
                    if (this.done) {
                        RxJavaPlugins.onError(throwable);
                        return;
                    }
                    this.actual.onError(throwable);
                    return;
                }
                this.once = true;
                if (this.allowFatal && !(throwable instanceof Exception)) {
                    this.actual.onError(throwable);
                    return;
                }
                try {
                    object = this.nextSupplier.apply(throwable);
                    if (object != null) break block5;
                    object = new NullPointerException("Publisher is null");
                }
                catch (Throwable throwable2) {
                    Exceptions.throwIfFatal(throwable2);
                    this.actual.onError((Throwable)new CompositeException(throwable, throwable2));
                    return;
                }
                object.initCause(throwable);
                this.actual.onError((Throwable)object);
                return;
            }
            object.subscribe(this);
        }

        public void onNext(T t) {
            if (this.done) {
                return;
            }
            this.actual.onNext(t);
            if (!this.once) {
                this.arbiter.produced(1L);
            }
        }

        @Override
        public void onSubscribe(Subscription subscription) {
            this.arbiter.setSubscription(subscription);
        }
    }

}

