/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  org.reactivestreams.Subscriber
 *  org.reactivestreams.Subscription
 */
package io.reactivex.internal.operators.parallel;

import io.reactivex.Flowable;
import io.reactivex.FlowableSubscriber;
import io.reactivex.exceptions.Exceptions;
import io.reactivex.functions.BiFunction;
import io.reactivex.internal.functions.ObjectHelper;
import io.reactivex.internal.subscriptions.DeferredScalarSubscription;
import io.reactivex.internal.subscriptions.SubscriptionHelper;
import io.reactivex.parallel.ParallelFlowable;
import io.reactivex.plugins.RxJavaPlugins;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicReference;
import org.reactivestreams.Subscriber;
import org.reactivestreams.Subscription;

public final class ParallelReduceFull<T>
extends Flowable<T> {
    final BiFunction<T, T, T> reducer;
    final ParallelFlowable<? extends T> source;

    public ParallelReduceFull(ParallelFlowable<? extends T> parallelFlowable, BiFunction<T, T, T> biFunction) {
        this.source = parallelFlowable;
        this.reducer = biFunction;
    }

    @Override
    protected void subscribeActual(Subscriber<? super T> subscriber) {
        ParallelReduceFullMainSubscriber<? super T> parallelReduceFullMainSubscriber = new ParallelReduceFullMainSubscriber<T>(subscriber, this.source.parallelism(), this.reducer);
        subscriber.onSubscribe(parallelReduceFullMainSubscriber);
        this.source.subscribe(parallelReduceFullMainSubscriber.subscribers);
    }

    static final class ParallelReduceFullInnerSubscriber<T>
    extends AtomicReference<Subscription>
    implements FlowableSubscriber<T> {
        private static final long serialVersionUID = -7954444275102466525L;
        boolean done;
        final ParallelReduceFullMainSubscriber<T> parent;
        final BiFunction<T, T, T> reducer;
        T value;

        ParallelReduceFullInnerSubscriber(ParallelReduceFullMainSubscriber<T> parallelReduceFullMainSubscriber, BiFunction<T, T, T> biFunction) {
            this.parent = parallelReduceFullMainSubscriber;
            this.reducer = biFunction;
        }

        void cancel() {
            SubscriptionHelper.cancel(this);
        }

        public void onComplete() {
            if (!this.done) {
                this.done = true;
                this.parent.innerComplete(this.value);
            }
        }

        public void onError(Throwable throwable) {
            if (this.done) {
                RxJavaPlugins.onError(throwable);
                return;
            }
            this.done = true;
            this.parent.innerError(throwable);
        }

        public void onNext(T t) {
            if (!this.done) {
                T t2 = this.value;
                if (t2 == null) {
                    this.value = t;
                    return;
                }
                try {
                    t = ObjectHelper.requireNonNull(this.reducer.apply(t2, t), "The reducer returned a null value");
                    this.value = t;
                    return;
                }
                catch (Throwable throwable) {
                    Exceptions.throwIfFatal(throwable);
                    ((Subscription)this.get()).cancel();
                    this.onError(throwable);
                    return;
                }
            }
        }

        @Override
        public void onSubscribe(Subscription subscription) {
            if (SubscriptionHelper.setOnce(this, subscription)) {
                subscription.request(Long.MAX_VALUE);
            }
        }
    }

    static final class ParallelReduceFullMainSubscriber<T>
    extends DeferredScalarSubscription<T> {
        private static final long serialVersionUID = -5370107872170712765L;
        final AtomicReference<SlotPair<T>> current = new AtomicReference();
        final AtomicReference<Throwable> error = new AtomicReference();
        final BiFunction<T, T, T> reducer;
        final AtomicInteger remaining = new AtomicInteger();
        final ParallelReduceFullInnerSubscriber<T>[] subscribers;

        ParallelReduceFullMainSubscriber(Subscriber<? super T> arrparallelReduceFullInnerSubscriber, int n, BiFunction<T, T, T> biFunction) {
            super(arrparallelReduceFullInnerSubscriber);
            arrparallelReduceFullInnerSubscriber = new ParallelReduceFullInnerSubscriber[n];
            for (int i = 0; i < n; ++i) {
                arrparallelReduceFullInnerSubscriber[i] = new ParallelReduceFullInnerSubscriber<T>(this, biFunction);
            }
            this.subscribers = arrparallelReduceFullInnerSubscriber;
            this.reducer = biFunction;
            this.remaining.lazySet(n);
        }

        SlotPair<T> addValue(T t) {
            SlotPair<T> slotPair;
            int n;
            do {
                SlotPair<T> slotPair2;
                slotPair = slotPair2 = this.current.get();
                if (slotPair2 == null) {
                    slotPair = slotPair2 = new SlotPair();
                    if (!this.current.compareAndSet(null, slotPair2)) continue;
                }
                if ((n = slotPair.tryAcquireSlot()) >= 0) break;
                this.current.compareAndSet(slotPair, null);
            } while (true);
            if (n == 0) {
                slotPair.first = t;
            } else {
                slotPair.second = t;
            }
            if (slotPair.releaseSlot()) {
                this.current.compareAndSet(slotPair, null);
                return slotPair;
            }
            return null;
        }

        @Override
        public void cancel() {
            ParallelReduceFullInnerSubscriber<T>[] arrparallelReduceFullInnerSubscriber = this.subscribers;
            int n = arrparallelReduceFullInnerSubscriber.length;
            for (int i = 0; i < n; ++i) {
                arrparallelReduceFullInnerSubscriber[i].cancel();
            }
        }

        void innerComplete(T object) {
            if (object != null) {
                while ((object = this.addValue(object)) != null) {
                    try {
                        object = ObjectHelper.requireNonNull(this.reducer.apply(object.first, object.second), "The reducer returned a null value");
                    }
                    catch (Throwable throwable) {
                        Exceptions.throwIfFatal(throwable);
                        this.innerError(throwable);
                        return;
                    }
                }
            }
            if (this.remaining.decrementAndGet() == 0) {
                object = this.current.get();
                this.current.lazySet(null);
                if (object != null) {
                    this.complete(object.first);
                    return;
                }
                this.actual.onComplete();
            }
        }

        void innerError(Throwable throwable) {
            if (this.error.compareAndSet(null, throwable)) {
                this.cancel();
                this.actual.onError(throwable);
                return;
            }
            if (throwable != this.error.get()) {
                RxJavaPlugins.onError(throwable);
            }
        }
    }

    static final class SlotPair<T>
    extends AtomicInteger {
        private static final long serialVersionUID = 473971317683868662L;
        T first;
        final AtomicInteger releaseIndex = new AtomicInteger();
        T second;

        SlotPair() {
        }

        boolean releaseSlot() {
            if (this.releaseIndex.incrementAndGet() == 2) {
                return true;
            }
            return false;
        }

        int tryAcquireSlot() {
            int n;
            do {
                if ((n = this.get()) < 2) continue;
                return -1;
            } while (!this.compareAndSet(n, n + 1));
            return n;
        }
    }

}

