/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  org.reactivestreams.Subscriber
 *  org.reactivestreams.Subscription
 */
package io.reactivex.internal.operators.completable;

import io.reactivex.Completable;
import io.reactivex.CompletableObserver;
import io.reactivex.CompletableSource;
import io.reactivex.FlowableSubscriber;
import io.reactivex.disposables.CompositeDisposable;
import io.reactivex.disposables.Disposable;
import io.reactivex.internal.disposables.DisposableHelper;
import io.reactivex.internal.subscriptions.SubscriptionHelper;
import io.reactivex.internal.util.AtomicThrowable;
import io.reactivex.plugins.RxJavaPlugins;
import java.io.Serializable;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicReference;
import org.reactivestreams.Publisher;
import org.reactivestreams.Subscriber;
import org.reactivestreams.Subscription;

public final class CompletableMerge
extends Completable {
    final boolean delayErrors;
    final int maxConcurrency;
    final Publisher<? extends CompletableSource> source;

    public CompletableMerge(Publisher<? extends CompletableSource> publisher, int n, boolean bl) {
        this.source = publisher;
        this.maxConcurrency = n;
        this.delayErrors = bl;
    }

    @Override
    public void subscribeActual(CompletableObserver object) {
        object = new CompletableMergeSubscriber((CompletableObserver)object, this.maxConcurrency, this.delayErrors);
        this.source.subscribe((Subscriber<? extends CompletableSource>)object);
    }

    static final class CompletableMergeSubscriber
    extends AtomicInteger
    implements FlowableSubscriber<CompletableSource>,
    Disposable {
        private static final long serialVersionUID = -2108443387387077490L;
        final CompletableObserver actual;
        final boolean delayErrors;
        final AtomicThrowable error;
        final int maxConcurrency;
        Subscription s;
        final CompositeDisposable set;

        CompletableMergeSubscriber(CompletableObserver completableObserver, int n, boolean bl) {
            this.actual = completableObserver;
            this.maxConcurrency = n;
            this.delayErrors = bl;
            this.set = new CompositeDisposable();
            this.error = new AtomicThrowable();
            this.lazySet(1);
        }

        @Override
        public void dispose() {
            this.s.cancel();
            this.set.dispose();
        }

        void innerComplete(MergeInnerObserver serializable) {
            this.set.delete((Disposable)((Object)serializable));
            if (this.decrementAndGet() == 0) {
                serializable = (Throwable)this.error.get();
                if (serializable != null) {
                    this.actual.onError((Throwable)serializable);
                    return;
                }
                this.actual.onComplete();
                return;
            }
            if (this.maxConcurrency != Integer.MAX_VALUE) {
                this.s.request(1L);
            }
        }

        /*
         * Enabled force condition propagation
         * Lifted jumps to return sites
         */
        void innerError(MergeInnerObserver mergeInnerObserver, Throwable throwable) {
            this.set.delete(mergeInnerObserver);
            if (!this.delayErrors) {
                this.s.cancel();
                this.set.dispose();
                if (this.error.addThrowable(throwable)) {
                    if (this.getAndSet(0) <= 0) return;
                    this.actual.onError(this.error.terminate());
                    return;
                }
                RxJavaPlugins.onError(throwable);
                return;
            }
            if (this.error.addThrowable(throwable)) {
                if (this.decrementAndGet() == 0) {
                    this.actual.onError(this.error.terminate());
                    return;
                }
                if (this.maxConcurrency == Integer.MAX_VALUE) return;
                this.s.request(1L);
                return;
            }
            RxJavaPlugins.onError(throwable);
        }

        @Override
        public boolean isDisposed() {
            return this.set.isDisposed();
        }

        public void onComplete() {
            if (this.decrementAndGet() == 0) {
                if ((Throwable)this.error.get() != null) {
                    this.actual.onError(this.error.terminate());
                    return;
                }
                this.actual.onComplete();
            }
        }

        /*
         * Enabled force condition propagation
         * Lifted jumps to return sites
         */
        public void onError(Throwable throwable) {
            if (!this.delayErrors) {
                this.set.dispose();
                if (this.error.addThrowable(throwable)) {
                    if (this.getAndSet(0) <= 0) return;
                    this.actual.onError(this.error.terminate());
                    return;
                }
                RxJavaPlugins.onError(throwable);
                return;
            }
            if (this.error.addThrowable(throwable)) {
                if (this.decrementAndGet() != 0) return;
                this.actual.onError(this.error.terminate());
                return;
            }
            RxJavaPlugins.onError(throwable);
        }

        public void onNext(CompletableSource completableSource) {
            this.getAndIncrement();
            MergeInnerObserver mergeInnerObserver = new MergeInnerObserver();
            this.set.add(mergeInnerObserver);
            completableSource.subscribe(mergeInnerObserver);
        }

        @Override
        public void onSubscribe(Subscription subscription) {
            if (SubscriptionHelper.validate(this.s, subscription)) {
                this.s = subscription;
                this.actual.onSubscribe(this);
                if (this.maxConcurrency == Integer.MAX_VALUE) {
                    subscription.request(Long.MAX_VALUE);
                    return;
                }
                subscription.request((long)this.maxConcurrency);
            }
        }

        final class MergeInnerObserver
        extends AtomicReference<Disposable>
        implements CompletableObserver,
        Disposable {
            private static final long serialVersionUID = 251330541679988317L;

            MergeInnerObserver() {
            }

            @Override
            public void dispose() {
                DisposableHelper.dispose(this);
            }

            @Override
            public boolean isDisposed() {
                return DisposableHelper.isDisposed((Disposable)this.get());
            }

            @Override
            public void onComplete() {
                CompletableMergeSubscriber.this.innerComplete(this);
            }

            @Override
            public void onError(Throwable throwable) {
                CompletableMergeSubscriber.this.innerError(this, throwable);
            }

            @Override
            public void onSubscribe(Disposable disposable) {
                DisposableHelper.setOnce(this, disposable);
            }
        }

    }

}

