/*
 * Decompiled with CFR 0_132.
 */
package io.reactivex.internal.operators.observable;

import io.reactivex.Observable;
import io.reactivex.ObservableSource;
import io.reactivex.Observer;
import io.reactivex.disposables.Disposable;
import io.reactivex.internal.disposables.DisposableHelper;
import io.reactivex.internal.operators.observable.AbstractObservableWithUpstream;
import io.reactivex.subjects.UnicastSubject;
import java.util.ArrayDeque;
import java.util.Iterator;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicInteger;

public final class ObservableWindow<T>
extends AbstractObservableWithUpstream<T, Observable<T>> {
    final int capacityHint;
    final long count;
    final long skip;

    public ObservableWindow(ObservableSource<T> observableSource, long l, long l2, int n) {
        super(observableSource);
        this.count = l;
        this.skip = l2;
        this.capacityHint = n;
    }

    @Override
    public void subscribeActual(Observer<? super Observable<T>> observer) {
        if (this.count == this.skip) {
            this.source.subscribe(new WindowExactObserver(observer, this.count, this.capacityHint));
            return;
        }
        this.source.subscribe(new WindowSkipObserver(observer, this.count, this.skip, this.capacityHint));
    }

    static final class WindowExactObserver<T>
    extends AtomicInteger
    implements Observer<T>,
    Disposable,
    Runnable {
        private static final long serialVersionUID = -7481782523886138128L;
        final Observer<? super Observable<T>> actual;
        volatile boolean cancelled;
        final int capacityHint;
        final long count;
        Disposable s;
        long size;
        UnicastSubject<T> window;

        WindowExactObserver(Observer<? super Observable<T>> observer, long l, int n) {
            this.actual = observer;
            this.count = l;
            this.capacityHint = n;
        }

        @Override
        public void dispose() {
            this.cancelled = true;
        }

        @Override
        public boolean isDisposed() {
            return this.cancelled;
        }

        @Override
        public void onComplete() {
            UnicastSubject<T> unicastSubject = this.window;
            if (unicastSubject != null) {
                this.window = null;
                unicastSubject.onComplete();
            }
            this.actual.onComplete();
        }

        @Override
        public void onError(Throwable throwable) {
            UnicastSubject<T> unicastSubject = this.window;
            if (unicastSubject != null) {
                this.window = null;
                unicastSubject.onError(throwable);
            }
            this.actual.onError(throwable);
        }

        @Override
        public void onNext(T t) {
            UnicastSubject<T> unicastSubject;
            UnicastSubject<T> unicastSubject2 = unicastSubject = this.window;
            if (unicastSubject == null) {
                unicastSubject2 = unicastSubject;
                if (!this.cancelled) {
                    unicastSubject2 = UnicastSubject.create(this.capacityHint, this);
                    this.window = unicastSubject2;
                    this.actual.onNext(unicastSubject2);
                }
            }
            if (unicastSubject2 != null) {
                long l;
                unicastSubject2.onNext(t);
                this.size = l = this.size + 1L;
                if (l >= this.count) {
                    this.size = 0L;
                    this.window = null;
                    unicastSubject2.onComplete();
                    if (this.cancelled) {
                        this.s.dispose();
                    }
                }
            }
        }

        @Override
        public void onSubscribe(Disposable disposable) {
            if (DisposableHelper.validate(this.s, disposable)) {
                this.s = disposable;
                this.actual.onSubscribe(this);
            }
        }

        @Override
        public void run() {
            if (this.cancelled) {
                this.s.dispose();
            }
        }
    }

    static final class WindowSkipObserver<T>
    extends AtomicBoolean
    implements Observer<T>,
    Disposable,
    Runnable {
        private static final long serialVersionUID = 3366976432059579510L;
        final Observer<? super Observable<T>> actual;
        volatile boolean cancelled;
        final int capacityHint;
        final long count;
        long firstEmission;
        long index;
        Disposable s;
        final long skip;
        final ArrayDeque<UnicastSubject<T>> windows;
        final AtomicInteger wip = new AtomicInteger();

        WindowSkipObserver(Observer<? super Observable<T>> observer, long l, long l2, int n) {
            this.actual = observer;
            this.count = l;
            this.skip = l2;
            this.capacityHint = n;
            this.windows = new ArrayDeque();
        }

        @Override
        public void dispose() {
            this.cancelled = true;
        }

        @Override
        public boolean isDisposed() {
            return this.cancelled;
        }

        @Override
        public void onComplete() {
            ArrayDeque<UnicastSubject<T>> arrayDeque = this.windows;
            while (!arrayDeque.isEmpty()) {
                arrayDeque.poll().onComplete();
            }
            this.actual.onComplete();
        }

        @Override
        public void onError(Throwable throwable) {
            ArrayDeque<UnicastSubject<T>> arrayDeque = this.windows;
            while (!arrayDeque.isEmpty()) {
                arrayDeque.poll().onError(throwable);
            }
            this.actual.onError(throwable);
        }

        @Override
        public void onNext(T t) {
            Object object;
            ArrayDeque<UnicastSubject<T>> arrayDeque = this.windows;
            long l = this.index;
            long l2 = this.skip;
            if (l % l2 == 0L && !this.cancelled) {
                this.wip.getAndIncrement();
                object = UnicastSubject.create(this.capacityHint, this);
                arrayDeque.offer((UnicastSubject<T>)object);
                this.actual.onNext((Observable<Object>)object);
            }
            long l3 = this.firstEmission + 1L;
            object = arrayDeque.iterator();
            while (object.hasNext()) {
                ((UnicastSubject)object.next()).onNext(t);
            }
            if (l3 >= this.count) {
                arrayDeque.poll().onComplete();
                if (arrayDeque.isEmpty() && this.cancelled) {
                    this.s.dispose();
                    return;
                }
                this.firstEmission = l3 - l2;
            } else {
                this.firstEmission = l3;
            }
            this.index = l + 1L;
        }

        @Override
        public void onSubscribe(Disposable disposable) {
            if (DisposableHelper.validate(this.s, disposable)) {
                this.s = disposable;
                this.actual.onSubscribe(this);
            }
        }

        @Override
        public void run() {
            if (this.wip.decrementAndGet() == 0 && this.cancelled) {
                this.s.dispose();
            }
        }
    }

}

