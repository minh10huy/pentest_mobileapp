/*
 * Decompiled with CFR 0_132.
 */
package io.reactivex.internal.operators.observable;

import io.reactivex.Observable;
import io.reactivex.ObservableSource;
import io.reactivex.Observer;
import io.reactivex.disposables.CompositeDisposable;
import io.reactivex.disposables.Disposable;
import io.reactivex.exceptions.Exceptions;
import io.reactivex.functions.BiFunction;
import io.reactivex.functions.Function;
import io.reactivex.internal.disposables.DisposableHelper;
import io.reactivex.internal.functions.ObjectHelper;
import io.reactivex.internal.operators.observable.AbstractObservableWithUpstream;
import io.reactivex.internal.queue.SpscLinkedArrayQueue;
import io.reactivex.internal.util.ExceptionHelper;
import io.reactivex.plugins.RxJavaPlugins;
import io.reactivex.subjects.UnicastSubject;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicReference;

public final class ObservableGroupJoin<TLeft, TRight, TLeftEnd, TRightEnd, R>
extends AbstractObservableWithUpstream<TLeft, R> {
    final Function<? super TLeft, ? extends ObservableSource<TLeftEnd>> leftEnd;
    final ObservableSource<? extends TRight> other;
    final BiFunction<? super TLeft, ? super Observable<TRight>, ? extends R> resultSelector;
    final Function<? super TRight, ? extends ObservableSource<TRightEnd>> rightEnd;

    public ObservableGroupJoin(ObservableSource<TLeft> observableSource, ObservableSource<? extends TRight> observableSource2, Function<? super TLeft, ? extends ObservableSource<TLeftEnd>> function, Function<? super TRight, ? extends ObservableSource<TRightEnd>> function2, BiFunction<? super TLeft, ? super Observable<TRight>, ? extends R> biFunction) {
        super(observableSource);
        this.other = observableSource2;
        this.leftEnd = function;
        this.rightEnd = function2;
        this.resultSelector = biFunction;
    }

    @Override
    protected void subscribeActual(Observer<? super R> leftRightObserver) {
        GroupJoinDisposable groupJoinDisposable = new GroupJoinDisposable(leftRightObserver, this.leftEnd, this.rightEnd, this.resultSelector);
        leftRightObserver.onSubscribe(groupJoinDisposable);
        leftRightObserver = new LeftRightObserver(groupJoinDisposable, true);
        groupJoinDisposable.disposables.add(leftRightObserver);
        LeftRightObserver leftRightObserver2 = new LeftRightObserver(groupJoinDisposable, false);
        groupJoinDisposable.disposables.add(leftRightObserver2);
        this.source.subscribe(leftRightObserver);
        this.other.subscribe(leftRightObserver2);
    }

    static final class GroupJoinDisposable<TLeft, TRight, TLeftEnd, TRightEnd, R>
    extends AtomicInteger
    implements Disposable,
    JoinSupport {
        static final Integer LEFT_CLOSE;
        static final Integer LEFT_VALUE;
        static final Integer RIGHT_CLOSE;
        static final Integer RIGHT_VALUE;
        private static final long serialVersionUID = -6071216598687999801L;
        final AtomicInteger active;
        final Observer<? super R> actual;
        volatile boolean cancelled;
        final CompositeDisposable disposables;
        final AtomicReference<Throwable> error;
        final Function<? super TLeft, ? extends ObservableSource<TLeftEnd>> leftEnd;
        int leftIndex;
        final Map<Integer, UnicastSubject<TRight>> lefts;
        final SpscLinkedArrayQueue<Object> queue;
        final BiFunction<? super TLeft, ? super Observable<TRight>, ? extends R> resultSelector;
        final Function<? super TRight, ? extends ObservableSource<TRightEnd>> rightEnd;
        int rightIndex;
        final Map<Integer, TRight> rights;

        static {
            LEFT_VALUE = 1;
            RIGHT_VALUE = 2;
            LEFT_CLOSE = 3;
            RIGHT_CLOSE = 4;
        }

        GroupJoinDisposable(Observer<? super R> observer, Function<? super TLeft, ? extends ObservableSource<TLeftEnd>> function, Function<? super TRight, ? extends ObservableSource<TRightEnd>> function2, BiFunction<? super TLeft, ? super Observable<TRight>, ? extends R> biFunction) {
            this.actual = observer;
            this.disposables = new CompositeDisposable();
            this.queue = new SpscLinkedArrayQueue(Observable.bufferSize());
            this.lefts = new LinkedHashMap<Integer, UnicastSubject<TRight>>();
            this.rights = new LinkedHashMap<Integer, TRight>();
            this.error = new AtomicReference();
            this.leftEnd = function;
            this.rightEnd = function2;
            this.resultSelector = biFunction;
            this.active = new AtomicInteger(2);
        }

        void cancelAll() {
            this.disposables.dispose();
        }

        @Override
        public void dispose() {
            if (this.cancelled) {
                return;
            }
            this.cancelled = true;
            this.cancelAll();
            if (this.getAndIncrement() == 0) {
                this.queue.clear();
            }
        }

        /*
         * Loose catch block
         * Enabled aggressive block sorting
         * Enabled unnecessary exception pruning
         * Enabled aggressive exception aggregation
         * Lifted jumps to return sites
         */
        void drain() {
            if (this.getAndIncrement() != 0) {
                return;
            }
            Object object = this.queue;
            Observer<R> observer = this.actual;
            int n = 1;
            block6 : do {
                Object object3;
                int n2;
                Object object2;
                block25 : {
                    block24 : {
                        if (this.cancelled) {
                            object.clear();
                            return;
                        }
                        if (this.error.get() != null) {
                            object.clear();
                            this.cancelAll();
                            this.errorAll(observer);
                            return;
                        }
                        n2 = this.active.get() == 0 ? 1 : 0;
                        object3 = (Integer)object.poll();
                        boolean bl = object3 == null;
                        if (n2 == 0) break block24;
                        if (bl) {
                            object = this.lefts.values().iterator();
                            do {
                                if (!object.hasNext()) {
                                    this.lefts.clear();
                                    this.rights.clear();
                                    this.disposables.dispose();
                                    observer.onComplete();
                                    return;
                                }
                                ((UnicastSubject)object.next()).onComplete();
                            } while (true);
                        }
                        if (!bl) break block25;
                    }
                    n = n2 = this.addAndGet(- n);
                    if (n2 != 0) continue;
                    return;
                }
                Iterator<TRight> iterator = object.poll();
                if (object3 == LEFT_VALUE) {
                    block23 : {
                        object3 = UnicastSubject.create();
                        n2 = this.leftIndex;
                        this.leftIndex = n2 + 1;
                        this.lefts.put(n2, (UnicastSubject<TRight>)object3);
                        object2 = ObjectHelper.requireNonNull(this.leftEnd.apply(iterator), "The leftEnd returned a null ObservableSource");
                        LeftRightEndObserver leftRightEndObserver = new LeftRightEndObserver(this, true, n2);
                        this.disposables.add(leftRightEndObserver);
                        object2.subscribe(leftRightEndObserver);
                        if (this.error.get() == null) break block23;
                        object.clear();
                        this.cancelAll();
                        this.errorAll(observer);
                        return;
                    }
                    try {
                        iterator = ObjectHelper.requireNonNull(this.resultSelector.apply((TLeft)iterator, (Observable<TRight>)object3), "The resultSelector returned a null value");
                        observer.onNext(iterator);
                        iterator = this.rights.values().iterator();
                    }
                    catch (Throwable throwable) {
                        this.fail(throwable, observer, (SpscLinkedArrayQueue<?>)object);
                        return;
                    }
                    do {
                        if (!iterator.hasNext()) continue block6;
                        object3.onNext(iterator.next());
                    } while (true);
                    catch (Throwable throwable) {
                        this.fail(throwable, observer, (SpscLinkedArrayQueue<?>)object);
                        return;
                    }
                }
                if (object3 == RIGHT_VALUE) {
                    n2 = this.rightIndex;
                    this.rightIndex = n2 + 1;
                    this.rights.put(n2, iterator);
                    try {
                        object3 = ObjectHelper.requireNonNull(this.rightEnd.apply(iterator), "The rightEnd returned a null ObservableSource");
                        object2 = new LeftRightEndObserver(this, false, n2);
                        this.disposables.add((Disposable)object2);
                        object3.subscribe(object2);
                        if (this.error.get() != null) {
                            object.clear();
                            this.cancelAll();
                            this.errorAll(observer);
                            return;
                        }
                        object3 = this.lefts.values().iterator();
                    }
                    catch (Throwable throwable) {
                        this.fail(throwable, observer, (SpscLinkedArrayQueue<?>)object);
                        return;
                    }
                    do {
                        if (!object3.hasNext()) continue block6;
                        ((UnicastSubject)object3.next()).onNext(iterator);
                    } while (true);
                }
                if (object3 == LEFT_CLOSE) {
                    iterator = (LeftRightEndObserver)((Object)iterator);
                    object3 = this.lefts.remove(iterator.index);
                    this.disposables.remove((Disposable)((Object)iterator));
                    if (object3 == null) continue;
                    object3.onComplete();
                    continue;
                }
                if (object3 != RIGHT_CLOSE) continue;
                iterator = (LeftRightEndObserver)((Object)iterator);
                this.rights.remove(iterator.index);
                this.disposables.remove((Disposable)((Object)iterator));
            } while (true);
        }

        void errorAll(Observer<?> observer) {
            Throwable throwable = ExceptionHelper.terminate(this.error);
            Iterator<UnicastSubject<TRight>> iterator = this.lefts.values().iterator();
            while (iterator.hasNext()) {
                iterator.next().onError(throwable);
            }
            this.lefts.clear();
            this.rights.clear();
            observer.onError(throwable);
        }

        void fail(Throwable throwable, Observer<?> observer, SpscLinkedArrayQueue<?> spscLinkedArrayQueue) {
            Exceptions.throwIfFatal(throwable);
            ExceptionHelper.addThrowable(this.error, throwable);
            spscLinkedArrayQueue.clear();
            this.cancelAll();
            this.errorAll(observer);
        }

        /*
         * Enabled aggressive block sorting
         * Enabled unnecessary exception pruning
         * Enabled aggressive exception aggregation
         */
        @Override
        public void innerClose(boolean bl, LeftRightEndObserver leftRightEndObserver) {
            synchronized (this) {
                SpscLinkedArrayQueue<Object> spscLinkedArrayQueue = this.queue;
                Integer n = bl ? LEFT_CLOSE : RIGHT_CLOSE;
                spscLinkedArrayQueue.offer(n, leftRightEndObserver);
            }
            this.drain();
        }

        @Override
        public void innerCloseError(Throwable throwable) {
            if (ExceptionHelper.addThrowable(this.error, throwable)) {
                this.drain();
                return;
            }
            RxJavaPlugins.onError(throwable);
        }

        @Override
        public void innerComplete(LeftRightObserver leftRightObserver) {
            this.disposables.delete(leftRightObserver);
            this.active.decrementAndGet();
            this.drain();
        }

        @Override
        public void innerError(Throwable throwable) {
            if (ExceptionHelper.addThrowable(this.error, throwable)) {
                this.active.decrementAndGet();
                this.drain();
                return;
            }
            RxJavaPlugins.onError(throwable);
        }

        /*
         * Enabled aggressive block sorting
         * Enabled unnecessary exception pruning
         * Enabled aggressive exception aggregation
         */
        @Override
        public void innerValue(boolean bl, Object object) {
            synchronized (this) {
                SpscLinkedArrayQueue<Object> spscLinkedArrayQueue = this.queue;
                Integer n = bl ? LEFT_VALUE : RIGHT_VALUE;
                spscLinkedArrayQueue.offer(n, object);
            }
            this.drain();
        }

        @Override
        public boolean isDisposed() {
            return this.cancelled;
        }
    }

    static interface JoinSupport {
        public void innerClose(boolean var1, LeftRightEndObserver var2);

        public void innerCloseError(Throwable var1);

        public void innerComplete(LeftRightObserver var1);

        public void innerError(Throwable var1);

        public void innerValue(boolean var1, Object var2);
    }

    static final class LeftRightEndObserver
    extends AtomicReference<Disposable>
    implements Observer<Object>,
    Disposable {
        private static final long serialVersionUID = 1883890389173668373L;
        final int index;
        final boolean isLeft;
        final JoinSupport parent;

        LeftRightEndObserver(JoinSupport joinSupport, boolean bl, int n) {
            this.parent = joinSupport;
            this.isLeft = bl;
            this.index = n;
        }

        @Override
        public void dispose() {
            DisposableHelper.dispose(this);
        }

        @Override
        public boolean isDisposed() {
            return DisposableHelper.isDisposed((Disposable)this.get());
        }

        @Override
        public void onComplete() {
            this.parent.innerClose(this.isLeft, this);
        }

        @Override
        public void onError(Throwable throwable) {
            this.parent.innerCloseError(throwable);
        }

        @Override
        public void onNext(Object object) {
            if (DisposableHelper.dispose(this)) {
                this.parent.innerClose(this.isLeft, this);
            }
        }

        @Override
        public void onSubscribe(Disposable disposable) {
            DisposableHelper.setOnce(this, disposable);
        }
    }

    static final class LeftRightObserver
    extends AtomicReference<Disposable>
    implements Observer<Object>,
    Disposable {
        private static final long serialVersionUID = 1883890389173668373L;
        final boolean isLeft;
        final JoinSupport parent;

        LeftRightObserver(JoinSupport joinSupport, boolean bl) {
            this.parent = joinSupport;
            this.isLeft = bl;
        }

        @Override
        public void dispose() {
            DisposableHelper.dispose(this);
        }

        @Override
        public boolean isDisposed() {
            return DisposableHelper.isDisposed((Disposable)this.get());
        }

        @Override
        public void onComplete() {
            this.parent.innerComplete(this);
        }

        @Override
        public void onError(Throwable throwable) {
            this.parent.innerError(throwable);
        }

        @Override
        public void onNext(Object object) {
            this.parent.innerValue(this.isLeft, object);
        }

        @Override
        public void onSubscribe(Disposable disposable) {
            DisposableHelper.setOnce(this, disposable);
        }
    }

}

