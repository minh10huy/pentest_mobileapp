/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  org.reactivestreams.Subscriber
 *  org.reactivestreams.Subscription
 */
package io.reactivex.internal.operators.flowable;

import io.reactivex.Flowable;
import io.reactivex.FlowableSubscriber;
import io.reactivex.exceptions.Exceptions;
import io.reactivex.exceptions.MissingBackpressureException;
import io.reactivex.functions.BiPredicate;
import io.reactivex.internal.fuseable.QueueSubscription;
import io.reactivex.internal.fuseable.SimpleQueue;
import io.reactivex.internal.queue.SpscArrayQueue;
import io.reactivex.internal.subscriptions.DeferredScalarSubscription;
import io.reactivex.internal.subscriptions.SubscriptionHelper;
import io.reactivex.internal.util.AtomicThrowable;
import io.reactivex.plugins.RxJavaPlugins;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicReference;
import org.reactivestreams.Publisher;
import org.reactivestreams.Subscriber;
import org.reactivestreams.Subscription;

public final class FlowableSequenceEqual<T>
extends Flowable<Boolean> {
    final BiPredicate<? super T, ? super T> comparer;
    final Publisher<? extends T> first;
    final int prefetch;
    final Publisher<? extends T> second;

    public FlowableSequenceEqual(Publisher<? extends T> publisher, Publisher<? extends T> publisher2, BiPredicate<? super T, ? super T> biPredicate, int n) {
        this.first = publisher;
        this.second = publisher2;
        this.comparer = biPredicate;
        this.prefetch = n;
    }

    @Override
    public void subscribeActual(Subscriber<? super Boolean> subscriber) {
        EqualCoordinator<? extends T> equalCoordinator = new EqualCoordinator<T>(subscriber, this.prefetch, this.comparer);
        subscriber.onSubscribe(equalCoordinator);
        equalCoordinator.subscribe(this.first, this.second);
    }

    static final class EqualCoordinator<T>
    extends DeferredScalarSubscription<Boolean>
    implements EqualCoordinatorHelper {
        private static final long serialVersionUID = -6178010334400373240L;
        final BiPredicate<? super T, ? super T> comparer;
        final AtomicThrowable error;
        final EqualSubscriber<T> first;
        final EqualSubscriber<T> second;
        T v1;
        T v2;
        final AtomicInteger wip;

        EqualCoordinator(Subscriber<? super Boolean> subscriber, int n, BiPredicate<? super T, ? super T> biPredicate) {
            super(subscriber);
            this.comparer = biPredicate;
            this.wip = new AtomicInteger();
            this.first = new EqualSubscriber(this, n);
            this.second = new EqualSubscriber(this, n);
            this.error = new AtomicThrowable();
        }

        @Override
        public void cancel() {
            super.cancel();
            this.first.cancel();
            this.second.cancel();
            if (this.wip.getAndIncrement() == 0) {
                this.first.clear();
                this.second.clear();
            }
        }

        void cancelAndClear() {
            this.first.cancel();
            this.first.clear();
            this.second.cancel();
            this.second.clear();
        }

        /*
         * Unable to fully structure code
         * Enabled aggressive block sorting
         * Enabled unnecessary exception pruning
         * Enabled aggressive exception aggregation
         * Lifted jumps to return sites
         */
        @Override
        public void drain() {
            if (this.wip.getAndIncrement() != 0) {
                return;
            }
            var1_1 = 1;
            do {
                block19 : {
                    var9_12 = this.first.queue;
                    var10_13 = this.second.queue;
                    if (var9_12 == null || var10_13 == null) {
                        if (this.isCancelled()) {
                            this.first.clear();
                            this.second.clear();
                            return;
                        }
                        if ((Throwable)this.error.get() != null) {
                            this.cancelAndClear();
                            this.actual.onError(this.error.terminate());
                            return;
                        }
                    } else {
                        do lbl-1000: // 2 sources:
                        {
                            if (this.isCancelled()) {
                                this.first.clear();
                                this.second.clear();
                                return;
                            }
                            if ((Throwable)this.error.get() != null) {
                                this.cancelAndClear();
                                this.actual.onError(this.error.terminate());
                                return;
                            }
                            var4_4 = this.first.done;
                            var6_6 = var7_10 = this.v1;
                            if (var7_10 == null) {
                                try {
                                    this.v1 = var6_6 = var9_12.poll();
                                }
                                catch (Throwable var6_7) {
                                    Exceptions.throwIfFatal(var6_7);
                                    this.cancelAndClear();
                                    this.error.addThrowable(var6_7);
                                    this.actual.onError(this.error.terminate());
                                    return;
                                }
                            }
                            var2_2 = var6_6 == null ? 1 : 0;
                            var5_5 = this.second.done;
                            var8_11 = this.v2;
                            var7_10 = var8_11;
                            if (var8_11 == null) {
                                try {
                                    var7_10 = var10_13.poll();
                                    this.v2 = var7_10;
                                }
                                catch (Throwable var6_8) {
                                    Exceptions.throwIfFatal(var6_8);
                                    this.cancelAndClear();
                                    this.error.addThrowable(var6_8);
                                    this.actual.onError(this.error.terminate());
                                    return;
                                }
                            }
                            var3_3 = var7_10 == null ? 1 : 0;
                            if (var4_4 && var5_5 && var2_2 != 0 && var3_3 != 0) {
                                this.complete(true);
                                return;
                            }
                            if (var4_4 && var5_5 && var2_2 != var3_3) {
                                this.cancelAndClear();
                                this.complete(false);
                                return;
                            }
                            if (var2_2 != 0 || var3_3 != 0) break block19;
                            var4_4 = this.comparer.test(var6_6, var7_10);
                            if (var4_4) break block20;
                            this.cancelAndClear();
                            break;
                        } while (true);
                        catch (Throwable var6_9) {
                            Exceptions.throwIfFatal(var6_9);
                            this.cancelAndClear();
                            this.error.addThrowable(var6_9);
                            this.actual.onError(this.error.terminate());
                            return;
                        }
                        {
                            block20 : {
                                this.complete(false);
                                return;
                            }
                            this.v1 = null;
                            this.v2 = null;
                            this.first.request();
                            this.second.request();
                            ** while (true)
                        }
                    }
                }
                var1_1 = var2_2 = this.wip.addAndGet(- var1_1);
            } while (var2_2 != 0);
        }

        @Override
        public void innerError(Throwable throwable) {
            if (this.error.addThrowable(throwable)) {
                this.drain();
                return;
            }
            RxJavaPlugins.onError(throwable);
        }

        void subscribe(Publisher<? extends T> publisher, Publisher<? extends T> publisher2) {
            publisher.subscribe(this.first);
            publisher2.subscribe(this.second);
        }
    }

    static interface EqualCoordinatorHelper {
        public void drain();

        public void innerError(Throwable var1);
    }

    static final class EqualSubscriber<T>
    extends AtomicReference<Subscription>
    implements FlowableSubscriber<T> {
        private static final long serialVersionUID = 4804128302091633067L;
        volatile boolean done;
        final int limit;
        final EqualCoordinatorHelper parent;
        final int prefetch;
        long produced;
        volatile SimpleQueue<T> queue;
        int sourceMode;

        EqualSubscriber(EqualCoordinatorHelper equalCoordinatorHelper, int n) {
            this.parent = equalCoordinatorHelper;
            this.limit = n - (n >> 2);
            this.prefetch = n;
        }

        public void cancel() {
            SubscriptionHelper.cancel(this);
        }

        void clear() {
            SimpleQueue<T> simpleQueue = this.queue;
            if (simpleQueue != null) {
                simpleQueue.clear();
            }
        }

        public void onComplete() {
            this.done = true;
            this.parent.drain();
        }

        public void onError(Throwable throwable) {
            this.parent.innerError(throwable);
        }

        public void onNext(T t) {
            if (this.sourceMode == 0 && !this.queue.offer(t)) {
                this.onError(new MissingBackpressureException());
                return;
            }
            this.parent.drain();
        }

        @Override
        public void onSubscribe(Subscription subscription) {
            if (SubscriptionHelper.setOnce(this, subscription)) {
                if (subscription instanceof QueueSubscription) {
                    QueueSubscription queueSubscription = (QueueSubscription)subscription;
                    int n = queueSubscription.requestFusion(3);
                    if (n == 1) {
                        this.sourceMode = n;
                        this.queue = queueSubscription;
                        this.done = true;
                        this.parent.drain();
                        return;
                    }
                    if (n == 2) {
                        this.sourceMode = n;
                        this.queue = queueSubscription;
                        subscription.request((long)this.prefetch);
                        return;
                    }
                }
                this.queue = new SpscArrayQueue<T>(this.prefetch);
                subscription.request((long)this.prefetch);
            }
        }

        public void request() {
            if (this.sourceMode != 1) {
                long l = this.produced + 1L;
                if (l >= (long)this.limit) {
                    this.produced = 0L;
                    ((Subscription)this.get()).request(l);
                    return;
                }
                this.produced = l;
            }
        }
    }

}

