/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  org.reactivestreams.Subscriber
 *  org.reactivestreams.Subscription
 */
package io.reactivex.internal.operators.flowable;

import io.reactivex.Flowable;
import io.reactivex.FlowableSubscriber;
import io.reactivex.Scheduler;
import io.reactivex.internal.operators.flowable.AbstractFlowableWithUpstream;
import io.reactivex.internal.queue.SpscLinkedArrayQueue;
import io.reactivex.internal.subscriptions.SubscriptionHelper;
import io.reactivex.internal.util.BackpressureHelper;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
import org.reactivestreams.Subscriber;
import org.reactivestreams.Subscription;

public final class FlowableTakeLastTimed<T>
extends AbstractFlowableWithUpstream<T, T> {
    final int bufferSize;
    final long count;
    final boolean delayError;
    final Scheduler scheduler;
    final long time;
    final TimeUnit unit;

    public FlowableTakeLastTimed(Flowable<T> flowable, long l, long l2, TimeUnit timeUnit, Scheduler scheduler, int n, boolean bl) {
        super(flowable);
        this.count = l;
        this.time = l2;
        this.unit = timeUnit;
        this.scheduler = scheduler;
        this.bufferSize = n;
        this.delayError = bl;
    }

    @Override
    protected void subscribeActual(Subscriber<? super T> subscriber) {
        this.source.subscribe(new TakeLastTimedSubscriber<T>(subscriber, this.count, this.time, this.unit, this.scheduler, this.bufferSize, this.delayError));
    }

    static final class TakeLastTimedSubscriber<T>
    extends AtomicInteger
    implements FlowableSubscriber<T>,
    Subscription {
        private static final long serialVersionUID = -5677354903406201275L;
        final Subscriber<? super T> actual;
        volatile boolean cancelled;
        final long count;
        final boolean delayError;
        volatile boolean done;
        Throwable error;
        final SpscLinkedArrayQueue<Object> queue;
        final AtomicLong requested = new AtomicLong();
        Subscription s;
        final Scheduler scheduler;
        final long time;
        final TimeUnit unit;

        TakeLastTimedSubscriber(Subscriber<? super T> subscriber, long l, long l2, TimeUnit timeUnit, Scheduler scheduler, int n, boolean bl) {
            this.actual = subscriber;
            this.count = l;
            this.time = l2;
            this.unit = timeUnit;
            this.scheduler = scheduler;
            this.queue = new SpscLinkedArrayQueue(n);
            this.delayError = bl;
        }

        public void cancel() {
            if (!this.cancelled) {
                this.cancelled = true;
                this.s.cancel();
                if (this.getAndIncrement() == 0) {
                    this.queue.clear();
                }
            }
        }

        boolean checkTerminated(boolean bl, Subscriber<? super T> subscriber, boolean bl2) {
            if (this.cancelled) {
                this.queue.clear();
                return true;
            }
            if (bl2) {
                if (bl) {
                    Throwable throwable = this.error;
                    if (throwable != null) {
                        subscriber.onError(throwable);
                        return true;
                    }
                    subscriber.onComplete();
                    return true;
                }
            } else {
                Throwable throwable = this.error;
                if (throwable != null) {
                    this.queue.clear();
                    subscriber.onError(throwable);
                    return true;
                }
                if (bl) {
                    subscriber.onComplete();
                    return true;
                }
            }
            return false;
        }

        void drain() {
            int n;
            if (this.getAndIncrement() != 0) {
                return;
            }
            Subscriber<? super T> subscriber = this.actual;
            SpscLinkedArrayQueue<Object> spscLinkedArrayQueue = this.queue;
            boolean bl = this.delayError;
            int n2 = 1;
            do {
                if (this.done) {
                    if (this.checkTerminated(spscLinkedArrayQueue.isEmpty(), subscriber, bl)) {
                        return;
                    }
                    long l = this.requested.get();
                    long l2 = 0L;
                    do {
                        boolean bl2;
                        if (this.checkTerminated(bl2 = spscLinkedArrayQueue.peek() == null, subscriber, bl)) {
                            return;
                        }
                        if (l == l2) {
                            if (l2 == 0L) break;
                            BackpressureHelper.produced(this.requested, l2);
                            break;
                        }
                        spscLinkedArrayQueue.poll();
                        subscriber.onNext(spscLinkedArrayQueue.poll());
                        ++l2;
                    } while (true);
                }
                n2 = n = this.addAndGet(- n2);
            } while (n != 0);
        }

        public void onComplete() {
            this.trim(this.scheduler.now(this.unit), this.queue);
            this.done = true;
            this.drain();
        }

        public void onError(Throwable throwable) {
            if (this.delayError) {
                this.trim(this.scheduler.now(this.unit), this.queue);
            }
            this.error = throwable;
            this.done = true;
            this.drain();
        }

        public void onNext(T t) {
            SpscLinkedArrayQueue<Object> spscLinkedArrayQueue = this.queue;
            long l = this.scheduler.now(this.unit);
            spscLinkedArrayQueue.offer(l, t);
            this.trim(l, spscLinkedArrayQueue);
        }

        @Override
        public void onSubscribe(Subscription subscription) {
            if (SubscriptionHelper.validate(this.s, subscription)) {
                this.s = subscription;
                this.actual.onSubscribe((Subscription)this);
                subscription.request(Long.MAX_VALUE);
            }
        }

        public void request(long l) {
            if (SubscriptionHelper.validate(l)) {
                BackpressureHelper.add(this.requested, l);
                this.drain();
            }
        }

        void trim(long l, SpscLinkedArrayQueue<Object> spscLinkedArrayQueue) {
            long l2 = this.time;
            long l3 = this.count;
            boolean bl = l3 == Long.MAX_VALUE;
            while (!spscLinkedArrayQueue.isEmpty() && ((Long)spscLinkedArrayQueue.peek() < l - l2 || !bl && (long)(spscLinkedArrayQueue.size() >> 1) > l3)) {
                spscLinkedArrayQueue.poll();
                spscLinkedArrayQueue.poll();
            }
        }
    }

}

