/*
 * Decompiled with CFR 0_132.
 */
package io.reactivex.internal.operators.observable;

import io.reactivex.ObservableSource;
import io.reactivex.Observer;
import io.reactivex.Scheduler;
import io.reactivex.disposables.Disposable;
import io.reactivex.internal.disposables.DisposableHelper;
import io.reactivex.internal.operators.observable.AbstractObservableWithUpstream;
import io.reactivex.internal.queue.SpscLinkedArrayQueue;
import java.io.Serializable;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;

public final class ObservableSkipLastTimed<T>
extends AbstractObservableWithUpstream<T, T> {
    final int bufferSize;
    final boolean delayError;
    final Scheduler scheduler;
    final long time;
    final TimeUnit unit;

    public ObservableSkipLastTimed(ObservableSource<T> observableSource, long l, TimeUnit timeUnit, Scheduler scheduler, int n, boolean bl) {
        super(observableSource);
        this.time = l;
        this.unit = timeUnit;
        this.scheduler = scheduler;
        this.bufferSize = n;
        this.delayError = bl;
    }

    @Override
    public void subscribeActual(Observer<? super T> observer) {
        this.source.subscribe(new SkipLastTimedObserver<T>(observer, this.time, this.unit, this.scheduler, this.bufferSize, this.delayError));
    }

    static final class SkipLastTimedObserver<T>
    extends AtomicInteger
    implements Observer<T>,
    Disposable {
        private static final long serialVersionUID = -5677354903406201275L;
        final Observer<? super T> actual;
        volatile boolean cancelled;
        final boolean delayError;
        volatile boolean done;
        Throwable error;
        final SpscLinkedArrayQueue<Object> queue;
        Disposable s;
        final Scheduler scheduler;
        final long time;
        final TimeUnit unit;

        SkipLastTimedObserver(Observer<? super T> observer, long l, TimeUnit timeUnit, Scheduler scheduler, int n, boolean bl) {
            this.actual = observer;
            this.time = l;
            this.unit = timeUnit;
            this.scheduler = scheduler;
            this.queue = new SpscLinkedArrayQueue(n);
            this.delayError = bl;
        }

        @Override
        public void dispose() {
            if (!this.cancelled) {
                this.cancelled = true;
                this.s.dispose();
                if (this.getAndIncrement() == 0) {
                    this.queue.clear();
                }
            }
        }

        void drain() {
            if (this.getAndIncrement() != 0) {
                return;
            }
            Observer observer = this.actual;
            Object object = this.queue;
            boolean bl = this.delayError;
            TimeUnit timeUnit = this.unit;
            Scheduler scheduler = this.scheduler;
            long l = this.time;
            int n = 1;
            do {
                if (this.cancelled) {
                    this.queue.clear();
                    return;
                }
                boolean bl2 = this.done;
                Serializable serializable = (Long)object.peek();
                int n2 = serializable == null ? 1 : 0;
                long l2 = scheduler.now(timeUnit);
                int n3 = n2;
                if (n2 == 0) {
                    n3 = n2;
                    if (serializable > l2 - l) {
                        n3 = 1;
                    }
                }
                if (bl2) {
                    if (bl) {
                        if (n3 != 0) {
                            object = this.error;
                            if (object != null) {
                                observer.onError((Throwable)object);
                                return;
                            }
                            observer.onComplete();
                            return;
                        }
                    } else {
                        serializable = this.error;
                        if (serializable != null) {
                            this.queue.clear();
                            observer.onError((Throwable)serializable);
                            return;
                        }
                        if (n3 != 0) {
                            observer.onComplete();
                            return;
                        }
                    }
                }
                if (n3 != 0) {
                    n = n2 = this.addAndGet(- n);
                    if (n2 != 0) continue;
                    return;
                }
                object.poll();
                observer.onNext(object.poll());
            } while (true);
        }

        @Override
        public boolean isDisposed() {
            return this.cancelled;
        }

        @Override
        public void onComplete() {
            this.done = true;
            this.drain();
        }

        @Override
        public void onError(Throwable throwable) {
            this.error = throwable;
            this.done = true;
            this.drain();
        }

        @Override
        public void onNext(T t) {
            this.queue.offer(this.scheduler.now(this.unit), t);
            this.drain();
        }

        @Override
        public void onSubscribe(Disposable disposable) {
            if (DisposableHelper.validate(this.s, disposable)) {
                this.s = disposable;
                this.actual.onSubscribe(this);
            }
        }
    }

}

