/*
 * Decompiled with CFR 0_132.
 */
package io.reactivex.internal.operators.observable;

import io.reactivex.ObservableSource;
import io.reactivex.Observer;
import io.reactivex.disposables.Disposable;
import io.reactivex.exceptions.Exceptions;
import io.reactivex.functions.Function;
import io.reactivex.internal.disposables.DisposableHelper;
import io.reactivex.internal.functions.ObjectHelper;
import io.reactivex.internal.fuseable.QueueDisposable;
import io.reactivex.internal.fuseable.SimplePlainQueue;
import io.reactivex.internal.fuseable.SimpleQueue;
import io.reactivex.internal.operators.observable.AbstractObservableWithUpstream;
import io.reactivex.internal.operators.observable.ObservableScalarXMap;
import io.reactivex.internal.queue.SpscArrayQueue;
import io.reactivex.internal.queue.SpscLinkedArrayQueue;
import io.reactivex.internal.util.AtomicThrowable;
import io.reactivex.internal.util.ExceptionHelper;
import io.reactivex.plugins.RxJavaPlugins;
import java.util.ArrayDeque;
import java.util.Queue;
import java.util.concurrent.Callable;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicReference;

public final class ObservableFlatMap<T, U>
extends AbstractObservableWithUpstream<T, U> {
    final int bufferSize;
    final boolean delayErrors;
    final Function<? super T, ? extends ObservableSource<? extends U>> mapper;
    final int maxConcurrency;

    public ObservableFlatMap(ObservableSource<T> observableSource, Function<? super T, ? extends ObservableSource<? extends U>> function, boolean bl, int n, int n2) {
        super(observableSource);
        this.mapper = function;
        this.delayErrors = bl;
        this.maxConcurrency = n;
        this.bufferSize = n2;
    }

    @Override
    public void subscribeActual(Observer<? super U> observer) {
        if (ObservableScalarXMap.tryScalarXMapSubscribe(this.source, observer, this.mapper)) {
            return;
        }
        this.source.subscribe(new MergeObserver<T, U>(observer, this.mapper, this.delayErrors, this.maxConcurrency, this.bufferSize));
    }

    static final class InnerObserver<T, U>
    extends AtomicReference<Disposable>
    implements Observer<U> {
        private static final long serialVersionUID = -4606175640614850599L;
        volatile boolean done;
        int fusionMode;
        final long id;
        final MergeObserver<T, U> parent;
        volatile SimpleQueue<U> queue;

        InnerObserver(MergeObserver<T, U> mergeObserver, long l) {
            this.id = l;
            this.parent = mergeObserver;
        }

        public void dispose() {
            DisposableHelper.dispose(this);
        }

        @Override
        public void onComplete() {
            this.done = true;
            this.parent.drain();
        }

        @Override
        public void onError(Throwable throwable) {
            if (this.parent.errors.addThrowable(throwable)) {
                if (!this.parent.delayErrors) {
                    this.parent.disposeAll();
                }
                this.done = true;
                this.parent.drain();
                return;
            }
            RxJavaPlugins.onError(throwable);
        }

        @Override
        public void onNext(U u) {
            if (this.fusionMode == 0) {
                this.parent.tryEmit(u, this);
                return;
            }
            this.parent.drain();
        }

        @Override
        public void onSubscribe(Disposable disposable) {
            if (DisposableHelper.setOnce(this, disposable) && disposable instanceof QueueDisposable) {
                int n = (disposable = (QueueDisposable)disposable).requestFusion(7);
                if (n == 1) {
                    this.fusionMode = n;
                    this.queue = disposable;
                    this.done = true;
                    this.parent.drain();
                    return;
                }
                if (n == 2) {
                    this.fusionMode = n;
                    this.queue = disposable;
                }
            }
        }
    }

    static final class MergeObserver<T, U>
    extends AtomicInteger
    implements Disposable,
    Observer<T> {
        static final InnerObserver<?, ?>[] CANCELLED;
        static final InnerObserver<?, ?>[] EMPTY;
        private static final long serialVersionUID = -2117620485640801370L;
        final Observer<? super U> actual;
        final int bufferSize;
        volatile boolean cancelled;
        final boolean delayErrors;
        volatile boolean done;
        final AtomicThrowable errors = new AtomicThrowable();
        long lastId;
        int lastIndex;
        final Function<? super T, ? extends ObservableSource<? extends U>> mapper;
        final int maxConcurrency;
        final AtomicReference<InnerObserver<?, ?>[]> observers;
        volatile SimplePlainQueue<U> queue;
        Disposable s;
        Queue<ObservableSource<? extends U>> sources;
        long uniqueId;
        int wip;

        static {
            EMPTY = new InnerObserver[0];
            CANCELLED = new InnerObserver[0];
        }

        MergeObserver(Observer<? super U> observer, Function<? super T, ? extends ObservableSource<? extends U>> function, boolean bl, int n, int n2) {
            this.actual = observer;
            this.mapper = function;
            this.delayErrors = bl;
            this.maxConcurrency = n;
            this.bufferSize = n2;
            if (n != Integer.MAX_VALUE) {
                this.sources = new ArrayDeque<ObservableSource<? extends U>>(n);
            }
            this.observers = new AtomicReference<InnerObserver<?, ?>[]>(EMPTY);
        }

        boolean addInner(InnerObserver<T, U> innerObserver) {
            InnerObserver[] arrinnerObserver;
            InnerObserver<?, ?>[] arrinnerObserver2;
            do {
                if ((arrinnerObserver2 = this.observers.get()) == CANCELLED) {
                    innerObserver.dispose();
                    return false;
                }
                int n = arrinnerObserver2.length;
                arrinnerObserver = new InnerObserver[n + 1];
                System.arraycopy(arrinnerObserver2, 0, arrinnerObserver, 0, n);
                arrinnerObserver[n] = innerObserver;
            } while (!this.observers.compareAndSet(arrinnerObserver2, arrinnerObserver));
            return true;
        }

        boolean checkTerminate() {
            if (this.cancelled) {
                return true;
            }
            Throwable throwable = (Throwable)this.errors.get();
            if (!this.delayErrors && throwable != null) {
                this.disposeAll();
                throwable = this.errors.terminate();
                if (throwable != ExceptionHelper.TERMINATED) {
                    this.actual.onError(throwable);
                }
                return true;
            }
            return false;
        }

        @Override
        public void dispose() {
            if (!this.cancelled) {
                Throwable throwable;
                this.cancelled = true;
                if (this.disposeAll() && (throwable = this.errors.terminate()) != null && throwable != ExceptionHelper.TERMINATED) {
                    RxJavaPlugins.onError(throwable);
                }
            }
        }

        boolean disposeAll() {
            this.s.dispose();
            InnerObserver<?, ?>[] arrinnerObserver = this.observers.get();
            InnerObserver<?, ?>[] arrinnerObserver2 = CANCELLED;
            if (arrinnerObserver != arrinnerObserver2 && (arrinnerObserver = this.observers.getAndSet(CANCELLED)) != CANCELLED) {
                int n = arrinnerObserver.length;
                for (int i = 0; i < n; ++i) {
                    arrinnerObserver[i].dispose();
                }
                return true;
            }
            return false;
        }

        void drain() {
            if (this.getAndIncrement() == 0) {
                this.drainLoop();
            }
        }

        /*
         * Unable to fully structure code
         * Enabled aggressive block sorting
         * Enabled unnecessary exception pruning
         * Enabled aggressive exception aggregation
         * Converted monitor instructions to comments
         * Lifted jumps to return sites
         */
        void drainLoop() {
            var12_1 = this.actual;
            var5_2 = 1;
            block5 : do {
                block39 : {
                    block38 : {
                        if (this.checkTerminate()) {
                            return;
                        }
                        var13_12 /* !! */  = this.queue;
                        if (var13_12 /* !! */  != null) {
                            do {
                                if (this.checkTerminate()) {
                                    return;
                                }
                                var14_13 /* !! */  = var13_12 /* !! */ .poll();
                                if (var14_13 /* !! */  == null) {
                                    if (var14_13 /* !! */  != null) continue;
                                    break;
                                }
                                var12_1.onNext(var14_13 /* !! */ );
                            } while (true);
                        }
                        var9_10 = this.done;
                        var14_13 /* !! */  = this.queue;
                        var13_12 /* !! */  = this.observers.get();
                        var8_9 = var13_12 /* !! */ .length;
                        if (var9_10 && (var14_13 /* !! */  == null || var14_13 /* !! */ .isEmpty()) && var8_9 == 0) {
                            var13_12 /* !! */  = this.errors.terminate();
                            if (var13_12 /* !! */  == ExceptionHelper.TERMINATED) return;
                            if (var13_12 /* !! */  == null) {
                                var12_1.onComplete();
                                return;
                            }
                            var12_1.onError((Throwable)var13_12 /* !! */ );
                            return;
                        }
                        var1_3 = 0;
                        if (var8_9 == 0) ** GOTO lbl69
                        var10_11 = this.lastId;
                        var2_4 = this.lastIndex;
                        if (var8_9 <= var2_4) break block38;
                        var1_3 = var2_4;
                        if (var13_12 /* !! */ [var2_4].id == var10_11) break block39;
                    }
                    var1_3 = var2_4;
                    if (var8_9 <= var2_4) {
                        var1_3 = 0;
                    }
                    for (var2_4 = 0; var2_4 < var8_9 && var13_12 /* !! */ [var1_3].id != var10_11; ++var2_4) {
                        var1_3 = var3_5 = var1_3 + 1;
                        if (var3_5 != var8_9) continue;
                        var1_3 = 0;
                    }
                    this.lastIndex = var1_3;
                    this.lastId = var13_12 /* !! */ [var1_3].id;
                }
                var4_6 = var1_3;
                var2_4 = 0;
                var1_3 = 0;
                do {
                    block37 : {
                        if (var2_4 < var8_9) {
                            if (this.checkTerminate()) {
                                return;
                            }
                        } else {
                            this.lastIndex = var4_6;
                            this.lastId = var13_12 /* !! */ [var4_6].id;
                            if (var1_3 != 0) {
                                if (this.maxConcurrency == Integer.MAX_VALUE) continue block5;
                                // MONITORENTER : this
                                var13_12 /* !! */  = this.sources.poll();
                                if (var13_12 /* !! */  == null) {
                                    --this.wip;
                                    // MONITOREXIT : this
                                    continue block5;
                                }
                                // MONITOREXIT : this
                                this.subscribeInner((ObservableSource<? extends U>)var13_12 /* !! */ );
                                continue block5;
                            }
lbl69: // 3 sources:
                            var5_2 = var1_3 = this.addAndGet(- var5_2);
                            if (var1_3 != 0) ** break;
                            return;
                        }
                        var14_13 /* !! */  = var13_12 /* !! */ [var4_6];
                        block9 : do {
                            if (this.checkTerminate()) {
                                return;
                            }
                            var15_14 = var14_13 /* !! */ .queue;
                            if (var15_14 == null) ** GOTO lbl84
                            do {
                                block36 : {
                                    block40 : {
                                        block41 : {
                                            var16_16 = var15_14.poll();
                                            if (var16_16 == null) {
                                                if (var16_16 != null) continue block9;
                                            }
                                            break block36;
lbl84: // 2 sources:
                                            var9_10 = var14_13 /* !! */ .done;
                                            var15_14 = var14_13 /* !! */ .queue;
                                            var3_5 = var1_3;
                                            if (!var9_10) break block40;
                                            if (var15_14 == null) break block41;
                                            var3_5 = var1_3;
                                            if (!var15_14.isEmpty()) break block40;
                                        }
                                        this.removeInner((InnerObserver<T, U>)var14_13 /* !! */ );
                                        if (this.checkTerminate()) {
                                            return;
                                        }
                                        var3_5 = 1;
                                    }
                                    var7_8 = var4_6 + 1;
                                    var6_7 = var2_4;
                                    var4_6 = var7_8;
                                    var1_3 = var3_5;
                                    if (var7_8 == var8_9) {
                                        var4_6 = 0;
                                        var6_7 = var2_4;
                                        var1_3 = var3_5;
                                    }
                                    break block37;
                                }
                                var12_1.onNext(var16_16);
                            } while (!this.checkTerminate());
                            break;
                        } while (true);
                        return;
                        catch (Throwable var15_15) {
                            Exceptions.throwIfFatal(var15_15);
                            var14_13 /* !! */ .dispose();
                            this.errors.addThrowable(var15_15);
                            if (this.checkTerminate()) {
                                return;
                            }
                            this.removeInner((InnerObserver<T, U>)var14_13 /* !! */ );
                            var6_7 = var2_4 + 1;
                            var1_3 = 1;
                        }
                    }
                    var2_4 = var6_7 + 1;
                } while (true);
                break;
            } while (true);
        }

        @Override
        public boolean isDisposed() {
            return this.cancelled;
        }

        @Override
        public void onComplete() {
            if (this.done) {
                return;
            }
            this.done = true;
            this.drain();
        }

        @Override
        public void onError(Throwable throwable) {
            if (this.done) {
                RxJavaPlugins.onError(throwable);
                return;
            }
            if (this.errors.addThrowable(throwable)) {
                this.done = true;
                this.drain();
                return;
            }
            RxJavaPlugins.onError(throwable);
        }

        /*
         * Enabled aggressive block sorting
         * Enabled unnecessary exception pruning
         * Enabled aggressive exception aggregation
         */
        @Override
        public void onNext(T object) {
            block6 : {
                if (this.done) {
                    return;
                }
                try {
                    object = ObjectHelper.requireNonNull(this.mapper.apply(object), "The mapper returned a null ObservableSource");
                    if (this.maxConcurrency == Integer.MAX_VALUE) break block6;
                }
                catch (Throwable throwable) {
                    Exceptions.throwIfFatal(throwable);
                    this.s.dispose();
                    this.onError(throwable);
                    return;
                }
                synchronized (this) {
                    if (this.wip == this.maxConcurrency) {
                        this.sources.offer((ObservableSource<U>)object);
                        return;
                    }
                    ++this.wip;
                }
            }
            this.subscribeInner((ObservableSource<? extends U>)object);
        }

        @Override
        public void onSubscribe(Disposable disposable) {
            if (DisposableHelper.validate(this.s, disposable)) {
                this.s = disposable;
                this.actual.onSubscribe(this);
            }
        }

        void removeInner(InnerObserver<T, U> innerObserver) {
            InnerObserver<?, ?>[] arrinnerObserver;
            InnerObserver<?, ?>[] arrinnerObserver2;
            do {
                int n;
                int n2;
                if ((n2 = (arrinnerObserver = this.observers.get()).length) == 0) {
                    return;
                }
                int n3 = -1;
                int n4 = 0;
                do {
                    n = n3;
                    if (n4 >= n2) break;
                    if (arrinnerObserver[n4] == innerObserver) {
                        n = n4;
                        break;
                    }
                    ++n4;
                } while (true);
                if (n < 0) {
                    return;
                }
                if (n2 == 1) {
                    arrinnerObserver2 = EMPTY;
                    continue;
                }
                arrinnerObserver2 = new InnerObserver[n2 - 1];
                System.arraycopy(arrinnerObserver, 0, arrinnerObserver2, 0, n);
                System.arraycopy(arrinnerObserver, n + 1, arrinnerObserver2, n, n2 - n - 1);
            } while (!this.observers.compareAndSet(arrinnerObserver, arrinnerObserver2));
        }

        /*
         * Enabled aggressive block sorting
         * Enabled unnecessary exception pruning
         * Enabled aggressive exception aggregation
         */
        void subscribeInner(ObservableSource<? extends U> observableSource) {
            while (observableSource instanceof Callable) {
                this.tryEmitScalar((Callable)((Object)observableSource));
                if (this.maxConcurrency == Integer.MAX_VALUE) return;
                {
                    synchronized (this) {
                        observableSource = this.sources.poll();
                        if (observableSource == null) {
                            --this.wip;
                            return;
                        }
                    }
                }
            }
            long l = this.uniqueId;
            this.uniqueId = l + 1L;
            InnerObserver innerObserver = new InnerObserver(this, l);
            if (!this.addInner(innerObserver)) return;
            {
                observableSource.subscribe(innerObserver);
            }
        }

        void tryEmit(U u, InnerObserver<T, U> innerObserver) {
            if (this.get() == 0 && this.compareAndSet(0, 1)) {
                this.actual.onNext(u);
                if (this.decrementAndGet() == 0) {
                    return;
                }
            } else {
                SimpleQueue simpleQueue;
                SimpleQueue simpleQueue2 = simpleQueue = innerObserver.queue;
                if (simpleQueue == null) {
                    simpleQueue2 = new SpscLinkedArrayQueue(this.bufferSize);
                    innerObserver.queue = simpleQueue2;
                }
                simpleQueue2.offer(u);
                if (this.getAndIncrement() != 0) {
                    return;
                }
            }
            this.drainLoop();
        }

        void tryEmitScalar(Callable<? extends U> simplePlainQueue) {
            U u;
            block8 : {
                try {
                    u = simplePlainQueue.call();
                    if (u != null) break block8;
                    return;
                }
                catch (Throwable throwable) {
                    Exceptions.throwIfFatal(throwable);
                    this.errors.addThrowable(throwable);
                    this.drain();
                    return;
                }
            }
            if (this.get() == 0 && this.compareAndSet(0, 1)) {
                this.actual.onNext(u);
                if (this.decrementAndGet() == 0) {
                    return;
                }
            } else {
                SimplePlainQueue<U> simplePlainQueue2 = this.queue;
                simplePlainQueue = simplePlainQueue2;
                if (simplePlainQueue2 == null) {
                    simplePlainQueue = this.maxConcurrency == Integer.MAX_VALUE ? new SpscLinkedArrayQueue<U>(this.bufferSize) : new SpscArrayQueue(this.maxConcurrency);
                    this.queue = simplePlainQueue;
                }
                if (!simplePlainQueue.offer(u)) {
                    this.onError(new IllegalStateException("Scalar queue full?!"));
                    return;
                }
                if (this.getAndIncrement() != 0) {
                    return;
                }
            }
            this.drainLoop();
        }
    }

}

