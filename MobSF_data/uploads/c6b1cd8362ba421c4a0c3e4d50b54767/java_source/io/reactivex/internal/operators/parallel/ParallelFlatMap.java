/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  org.reactivestreams.Subscriber
 */
package io.reactivex.internal.operators.parallel;

import io.reactivex.functions.Function;
import io.reactivex.internal.operators.flowable.FlowableFlatMap;
import io.reactivex.parallel.ParallelFlowable;
import org.reactivestreams.Publisher;
import org.reactivestreams.Subscriber;

public final class ParallelFlatMap<T, R>
extends ParallelFlowable<R> {
    final boolean delayError;
    final Function<? super T, ? extends Publisher<? extends R>> mapper;
    final int maxConcurrency;
    final int prefetch;
    final ParallelFlowable<T> source;

    public ParallelFlatMap(ParallelFlowable<T> parallelFlowable, Function<? super T, ? extends Publisher<? extends R>> function, boolean bl, int n, int n2) {
        this.source = parallelFlowable;
        this.mapper = function;
        this.delayError = bl;
        this.maxConcurrency = n;
        this.prefetch = n2;
    }

    @Override
    public int parallelism() {
        return this.source.parallelism();
    }

    @Override
    public void subscribe(Subscriber<? super R>[] arrsubscriber) {
        if (!this.validate(arrsubscriber)) {
            return;
        }
        int n = arrsubscriber.length;
        Subscriber[] arrsubscriber2 = new Subscriber[n];
        for (int i = 0; i < n; ++i) {
            arrsubscriber2[i] = FlowableFlatMap.subscribe(arrsubscriber[i], this.mapper, this.delayError, this.maxConcurrency, this.prefetch);
        }
        this.source.subscribe(arrsubscriber2);
    }
}

