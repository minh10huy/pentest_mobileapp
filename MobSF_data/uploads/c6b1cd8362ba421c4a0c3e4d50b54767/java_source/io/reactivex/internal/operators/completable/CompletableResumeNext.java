/*
 * Decompiled with CFR 0_132.
 */
package io.reactivex.internal.operators.completable;

import io.reactivex.Completable;
import io.reactivex.CompletableObserver;
import io.reactivex.CompletableSource;
import io.reactivex.disposables.Disposable;
import io.reactivex.exceptions.CompositeException;
import io.reactivex.exceptions.Exceptions;
import io.reactivex.functions.Function;
import io.reactivex.internal.disposables.SequentialDisposable;

public final class CompletableResumeNext
extends Completable {
    final Function<? super Throwable, ? extends CompletableSource> errorMapper;
    final CompletableSource source;

    public CompletableResumeNext(CompletableSource completableSource, Function<? super Throwable, ? extends CompletableSource> function) {
        this.source = completableSource;
        this.errorMapper = function;
    }

    @Override
    protected void subscribeActual(CompletableObserver completableObserver) {
        SequentialDisposable sequentialDisposable = new SequentialDisposable();
        completableObserver.onSubscribe(sequentialDisposable);
        this.source.subscribe(new ResumeNext(completableObserver, sequentialDisposable));
    }

    final class ResumeNext
    implements CompletableObserver {
        final CompletableObserver s;
        final SequentialDisposable sd;

        ResumeNext(CompletableObserver completableObserver, SequentialDisposable sequentialDisposable) {
            this.s = completableObserver;
            this.sd = sequentialDisposable;
        }

        @Override
        public void onComplete() {
            this.s.onComplete();
        }

        @Override
        public void onError(Throwable throwable) {
            Object object;
            block2 : {
                try {
                    object = CompletableResumeNext.this.errorMapper.apply(throwable);
                    if (object != null) break block2;
                    object = new NullPointerException("The CompletableConsumable returned is null");
                }
                catch (Throwable throwable2) {
                    Exceptions.throwIfFatal(throwable2);
                    this.s.onError(new CompositeException(throwable2, throwable));
                    return;
                }
                object.initCause(throwable);
                this.s.onError((Throwable)object);
                return;
            }
            object.subscribe(new OnErrorObserver());
        }

        @Override
        public void onSubscribe(Disposable disposable) {
            this.sd.update(disposable);
        }

        final class OnErrorObserver
        implements CompletableObserver {
            OnErrorObserver() {
            }

            @Override
            public void onComplete() {
                ResumeNext.this.s.onComplete();
            }

            @Override
            public void onError(Throwable throwable) {
                ResumeNext.this.s.onError(throwable);
            }

            @Override
            public void onSubscribe(Disposable disposable) {
                ResumeNext.this.sd.update(disposable);
            }
        }

    }

}

