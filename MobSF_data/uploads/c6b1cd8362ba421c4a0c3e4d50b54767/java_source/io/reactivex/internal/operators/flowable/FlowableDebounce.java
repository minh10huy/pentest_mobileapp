/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  org.reactivestreams.Subscriber
 *  org.reactivestreams.Subscription
 */
package io.reactivex.internal.operators.flowable;

import io.reactivex.Flowable;
import io.reactivex.FlowableSubscriber;
import io.reactivex.disposables.Disposable;
import io.reactivex.exceptions.Exceptions;
import io.reactivex.exceptions.MissingBackpressureException;
import io.reactivex.functions.Function;
import io.reactivex.internal.disposables.DisposableHelper;
import io.reactivex.internal.functions.ObjectHelper;
import io.reactivex.internal.operators.flowable.AbstractFlowableWithUpstream;
import io.reactivex.internal.subscriptions.SubscriptionHelper;
import io.reactivex.internal.util.BackpressureHelper;
import io.reactivex.plugins.RxJavaPlugins;
import io.reactivex.subscribers.DisposableSubscriber;
import io.reactivex.subscribers.SerializedSubscriber;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicLong;
import java.util.concurrent.atomic.AtomicReference;
import org.reactivestreams.Publisher;
import org.reactivestreams.Subscriber;
import org.reactivestreams.Subscription;

public final class FlowableDebounce<T, U>
extends AbstractFlowableWithUpstream<T, T> {
    final Function<? super T, ? extends Publisher<U>> debounceSelector;

    public FlowableDebounce(Flowable<T> flowable, Function<? super T, ? extends Publisher<U>> function) {
        super(flowable);
        this.debounceSelector = function;
    }

    @Override
    protected void subscribeActual(Subscriber<? super T> subscriber) {
        this.source.subscribe(new DebounceSubscriber(new SerializedSubscriber<T>(subscriber), this.debounceSelector));
    }

    static final class DebounceSubscriber<T, U>
    extends AtomicLong
    implements FlowableSubscriber<T>,
    Subscription {
        private static final long serialVersionUID = 6725975399620862591L;
        final Subscriber<? super T> actual;
        final Function<? super T, ? extends Publisher<U>> debounceSelector;
        final AtomicReference<Disposable> debouncer = new AtomicReference();
        boolean done;
        volatile long index;
        Subscription s;

        DebounceSubscriber(Subscriber<? super T> subscriber, Function<? super T, ? extends Publisher<U>> function) {
            this.actual = subscriber;
            this.debounceSelector = function;
        }

        public void cancel() {
            this.s.cancel();
            DisposableHelper.dispose(this.debouncer);
        }

        void emit(long l, T t) {
            if (l == this.index) {
                if (this.get() != 0L) {
                    this.actual.onNext(t);
                    BackpressureHelper.produced(this, 1L);
                    return;
                }
                this.cancel();
                this.actual.onError((Throwable)new MissingBackpressureException("Could not deliver value due to lack of requests"));
            }
        }

        public void onComplete() {
            if (this.done) {
                return;
            }
            this.done = true;
            Disposable disposable = this.debouncer.get();
            if (!DisposableHelper.isDisposed(disposable)) {
                ((DebounceInnerSubscriber)disposable).emit();
                DisposableHelper.dispose(this.debouncer);
                this.actual.onComplete();
            }
        }

        public void onError(Throwable throwable) {
            DisposableHelper.dispose(this.debouncer);
            this.actual.onError(throwable);
        }

        public void onNext(T object) {
            long l;
            if (this.done) {
                return;
            }
            this.index = l = this.index + 1L;
            Disposable disposable = this.debouncer.get();
            if (disposable != null) {
                disposable.dispose();
            }
            try {
                Publisher<U> publisher = ObjectHelper.requireNonNull(this.debounceSelector.apply(object), "The publisher supplied is null");
                object = new DebounceInnerSubscriber(this, l, object);
                if (this.debouncer.compareAndSet(disposable, (Disposable)object)) {
                    publisher.subscribe((Subscriber<U>)object);
                }
                return;
            }
            catch (Throwable throwable) {
                Exceptions.throwIfFatal(throwable);
                this.cancel();
                this.actual.onError(throwable);
                return;
            }
        }

        @Override
        public void onSubscribe(Subscription subscription) {
            if (SubscriptionHelper.validate(this.s, subscription)) {
                this.s = subscription;
                this.actual.onSubscribe((Subscription)this);
                subscription.request(Long.MAX_VALUE);
            }
        }

        public void request(long l) {
            if (SubscriptionHelper.validate(l)) {
                BackpressureHelper.add(this, l);
            }
        }

        static final class DebounceInnerSubscriber<T, U>
        extends DisposableSubscriber<U> {
            boolean done;
            final long index;
            final AtomicBoolean once = new AtomicBoolean();
            final DebounceSubscriber<T, U> parent;
            final T value;

            DebounceInnerSubscriber(DebounceSubscriber<T, U> debounceSubscriber, long l, T t) {
                this.parent = debounceSubscriber;
                this.index = l;
                this.value = t;
            }

            void emit() {
                if (this.once.compareAndSet(false, true)) {
                    this.parent.emit(this.index, this.value);
                }
            }

            public void onComplete() {
                if (this.done) {
                    return;
                }
                this.done = true;
                this.emit();
            }

            public void onError(Throwable throwable) {
                if (this.done) {
                    RxJavaPlugins.onError(throwable);
                    return;
                }
                this.done = true;
                this.parent.onError(throwable);
            }

            public void onNext(U u) {
                if (this.done) {
                    return;
                }
                this.done = true;
                this.cancel();
                this.emit();
            }
        }

    }

}

