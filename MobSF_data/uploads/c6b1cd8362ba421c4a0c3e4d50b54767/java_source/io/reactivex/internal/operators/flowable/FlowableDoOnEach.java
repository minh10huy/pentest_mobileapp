/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  org.reactivestreams.Subscriber
 */
package io.reactivex.internal.operators.flowable;

import io.reactivex.Flowable;
import io.reactivex.FlowableSubscriber;
import io.reactivex.annotations.Nullable;
import io.reactivex.exceptions.CompositeException;
import io.reactivex.exceptions.Exceptions;
import io.reactivex.functions.Action;
import io.reactivex.functions.Consumer;
import io.reactivex.internal.fuseable.ConditionalSubscriber;
import io.reactivex.internal.fuseable.QueueSubscription;
import io.reactivex.internal.operators.flowable.AbstractFlowableWithUpstream;
import io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber;
import io.reactivex.internal.subscribers.BasicFuseableSubscriber;
import io.reactivex.internal.util.ExceptionHelper;
import io.reactivex.plugins.RxJavaPlugins;
import org.reactivestreams.Subscriber;

public final class FlowableDoOnEach<T>
extends AbstractFlowableWithUpstream<T, T> {
    final Action onAfterTerminate;
    final Action onComplete;
    final Consumer<? super Throwable> onError;
    final Consumer<? super T> onNext;

    public FlowableDoOnEach(Flowable<T> flowable, Consumer<? super T> consumer, Consumer<? super Throwable> consumer2, Action action, Action action2) {
        super(flowable);
        this.onNext = consumer;
        this.onError = consumer2;
        this.onComplete = action;
        this.onAfterTerminate = action2;
    }

    @Override
    protected void subscribeActual(Subscriber<? super T> subscriber) {
        if (subscriber instanceof ConditionalSubscriber) {
            this.source.subscribe(new DoOnEachConditionalSubscriber<T>((ConditionalSubscriber)subscriber, this.onNext, this.onError, this.onComplete, this.onAfterTerminate));
            return;
        }
        this.source.subscribe(new DoOnEachSubscriber<T>(subscriber, this.onNext, this.onError, this.onComplete, this.onAfterTerminate));
    }

    static final class DoOnEachConditionalSubscriber<T>
    extends BasicFuseableConditionalSubscriber<T, T> {
        final Action onAfterTerminate;
        final Action onComplete;
        final Consumer<? super Throwable> onError;
        final Consumer<? super T> onNext;

        DoOnEachConditionalSubscriber(ConditionalSubscriber<? super T> conditionalSubscriber, Consumer<? super T> consumer, Consumer<? super Throwable> consumer2, Action action, Action action2) {
            super(conditionalSubscriber);
            this.onNext = consumer;
            this.onError = consumer2;
            this.onComplete = action;
            this.onAfterTerminate = action2;
        }

        @Override
        public void onComplete() {
            if (this.done) {
                return;
            }
            try {
                this.onComplete.run();
                this.done = true;
            }
            catch (Throwable throwable) {
                this.fail(throwable);
                return;
            }
            this.actual.onComplete();
            try {
                this.onAfterTerminate.run();
                return;
            }
            catch (Throwable throwable) {
                Exceptions.throwIfFatal(throwable);
                RxJavaPlugins.onError(throwable);
                return;
            }
        }

        @Override
        public void onError(Throwable throwable) {
            if (this.done) {
                RxJavaPlugins.onError(throwable);
                return;
            }
            boolean bl = true;
            this.done = true;
            try {
                this.onError.accept(throwable);
            }
            catch (Throwable throwable2) {
                Exceptions.throwIfFatal(throwable2);
                this.actual.onError((Throwable)new CompositeException(throwable, throwable2));
                bl = false;
            }
            if (bl) {
                this.actual.onError(throwable);
            }
            try {
                this.onAfterTerminate.run();
                return;
            }
            catch (Throwable throwable3) {
                Exceptions.throwIfFatal(throwable3);
                RxJavaPlugins.onError(throwable3);
                return;
            }
        }

        public void onNext(T t) {
            if (this.done) {
                return;
            }
            if (this.sourceMode != 0) {
                this.actual.onNext(null);
                return;
            }
            try {
                this.onNext.accept(t);
            }
            catch (Throwable throwable) {
                this.fail(throwable);
                return;
            }
            this.actual.onNext(t);
        }

        /*
         * WARNING - Removed back jump from a try to a catch block - possible behaviour change.
         * Loose catch block
         * Enabled aggressive block sorting
         * Enabled unnecessary exception pruning
         * Enabled aggressive exception aggregation
         * Lifted jumps to return sites
         */
        @Nullable
        @Override
        public T poll() throws Exception {
            Throwable throwable4222;
            Object t;
            block10 : {
                try {
                    t = this.qs.poll();
                    if (t == null) break block10;
                }
                catch (Throwable throwable2) {
                    Exceptions.throwIfFatal(throwable2);
                    try {
                        this.onError.accept(throwable2);
                    }
                    catch (Throwable throwable3) {
                        throw new CompositeException(throwable2, throwable3);
                    }
                    throw ExceptionHelper.throwIfThrowable(throwable2);
                }
                this.onNext.accept(t);
                this.onAfterTerminate.run();
                return t;
            }
            if (this.sourceMode != 1) return t;
            this.onComplete.run();
            this.onAfterTerminate.run();
            return t;
            {
                catch (Throwable throwable4222) {
                }
                catch (Throwable throwable5) {}
                {
                    Exceptions.throwIfFatal(throwable5);
                    try {
                        this.onError.accept(throwable5);
                    }
                    catch (Throwable throwable6) {
                        throw new CompositeException(throwable5, throwable6);
                    }
                    throw ExceptionHelper.throwIfThrowable(throwable5);
                }
            }
            this.onAfterTerminate.run();
            throw throwable4222;
        }

        @Override
        public int requestFusion(int n) {
            return this.transitiveBoundaryFusion(n);
        }

        @Override
        public boolean tryOnNext(T t) {
            if (this.done) {
                return false;
            }
            try {
                this.onNext.accept(t);
                return this.actual.tryOnNext(t);
            }
            catch (Throwable throwable) {
                this.fail(throwable);
                return false;
            }
        }
    }

    static final class DoOnEachSubscriber<T>
    extends BasicFuseableSubscriber<T, T> {
        final Action onAfterTerminate;
        final Action onComplete;
        final Consumer<? super Throwable> onError;
        final Consumer<? super T> onNext;

        DoOnEachSubscriber(Subscriber<? super T> subscriber, Consumer<? super T> consumer, Consumer<? super Throwable> consumer2, Action action, Action action2) {
            super(subscriber);
            this.onNext = consumer;
            this.onError = consumer2;
            this.onComplete = action;
            this.onAfterTerminate = action2;
        }

        @Override
        public void onComplete() {
            if (this.done) {
                return;
            }
            try {
                this.onComplete.run();
                this.done = true;
            }
            catch (Throwable throwable) {
                this.fail(throwable);
                return;
            }
            this.actual.onComplete();
            try {
                this.onAfterTerminate.run();
                return;
            }
            catch (Throwable throwable) {
                Exceptions.throwIfFatal(throwable);
                RxJavaPlugins.onError(throwable);
                return;
            }
        }

        @Override
        public void onError(Throwable throwable) {
            if (this.done) {
                RxJavaPlugins.onError(throwable);
                return;
            }
            boolean bl = true;
            this.done = true;
            try {
                this.onError.accept(throwable);
            }
            catch (Throwable throwable2) {
                Exceptions.throwIfFatal(throwable2);
                this.actual.onError((Throwable)new CompositeException(throwable, throwable2));
                bl = false;
            }
            if (bl) {
                this.actual.onError(throwable);
            }
            try {
                this.onAfterTerminate.run();
                return;
            }
            catch (Throwable throwable3) {
                Exceptions.throwIfFatal(throwable3);
                RxJavaPlugins.onError(throwable3);
                return;
            }
        }

        public void onNext(T t) {
            if (this.done) {
                return;
            }
            if (this.sourceMode != 0) {
                this.actual.onNext(null);
                return;
            }
            try {
                this.onNext.accept(t);
            }
            catch (Throwable throwable) {
                this.fail(throwable);
                return;
            }
            this.actual.onNext(t);
        }

        /*
         * WARNING - Removed back jump from a try to a catch block - possible behaviour change.
         * Loose catch block
         * Enabled aggressive block sorting
         * Enabled unnecessary exception pruning
         * Enabled aggressive exception aggregation
         * Lifted jumps to return sites
         */
        @Nullable
        @Override
        public T poll() throws Exception {
            Throwable throwable4222;
            Object t;
            block10 : {
                try {
                    t = this.qs.poll();
                    if (t == null) break block10;
                }
                catch (Throwable throwable2) {
                    Exceptions.throwIfFatal(throwable2);
                    try {
                        this.onError.accept(throwable2);
                    }
                    catch (Throwable throwable3) {
                        throw new CompositeException(throwable2, throwable3);
                    }
                    throw ExceptionHelper.throwIfThrowable(throwable2);
                }
                this.onNext.accept(t);
                this.onAfterTerminate.run();
                return t;
            }
            if (this.sourceMode != 1) return t;
            this.onComplete.run();
            this.onAfterTerminate.run();
            return t;
            {
                catch (Throwable throwable4222) {
                }
                catch (Throwable throwable5) {}
                {
                    Exceptions.throwIfFatal(throwable5);
                    try {
                        this.onError.accept(throwable5);
                    }
                    catch (Throwable throwable6) {
                        throw new CompositeException(throwable5, throwable6);
                    }
                    throw ExceptionHelper.throwIfThrowable(throwable5);
                }
            }
            this.onAfterTerminate.run();
            throw throwable4222;
        }

        @Override
        public int requestFusion(int n) {
            return this.transitiveBoundaryFusion(n);
        }
    }

}

