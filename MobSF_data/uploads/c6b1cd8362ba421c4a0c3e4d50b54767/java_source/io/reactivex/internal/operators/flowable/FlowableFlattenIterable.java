/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  org.reactivestreams.Subscriber
 *  org.reactivestreams.Subscription
 */
package io.reactivex.internal.operators.flowable;

import io.reactivex.Flowable;
import io.reactivex.FlowableSubscriber;
import io.reactivex.annotations.Nullable;
import io.reactivex.exceptions.Exceptions;
import io.reactivex.exceptions.MissingBackpressureException;
import io.reactivex.functions.Function;
import io.reactivex.internal.functions.ObjectHelper;
import io.reactivex.internal.fuseable.QueueSubscription;
import io.reactivex.internal.fuseable.SimpleQueue;
import io.reactivex.internal.operators.flowable.AbstractFlowableWithUpstream;
import io.reactivex.internal.operators.flowable.FlowableFromIterable;
import io.reactivex.internal.queue.SpscArrayQueue;
import io.reactivex.internal.subscriptions.BasicIntQueueSubscription;
import io.reactivex.internal.subscriptions.EmptySubscription;
import io.reactivex.internal.subscriptions.SubscriptionHelper;
import io.reactivex.internal.util.BackpressureHelper;
import io.reactivex.internal.util.ExceptionHelper;
import io.reactivex.plugins.RxJavaPlugins;
import java.util.Iterator;
import java.util.concurrent.Callable;
import java.util.concurrent.atomic.AtomicLong;
import java.util.concurrent.atomic.AtomicReference;
import org.reactivestreams.Subscriber;
import org.reactivestreams.Subscription;

public final class FlowableFlattenIterable<T, R>
extends AbstractFlowableWithUpstream<T, R> {
    final Function<? super T, ? extends Iterable<? extends R>> mapper;
    final int prefetch;

    public FlowableFlattenIterable(Flowable<T> flowable, Function<? super T, ? extends Iterable<? extends R>> function, int n) {
        super(flowable);
        this.mapper = function;
        this.prefetch = n;
    }

    @Override
    public void subscribeActual(Subscriber<? super R> subscriber) {
        if (this.source instanceof Callable) {
            Object object;
            block5 : {
                try {
                    object = ((Callable)((Object)this.source)).call();
                    if (object != null) break block5;
                }
                catch (Throwable throwable) {
                    Exceptions.throwIfFatal(throwable);
                    EmptySubscription.error(throwable, subscriber);
                    return;
                }
                EmptySubscription.complete(subscriber);
                return;
            }
            try {
                object = this.mapper.apply(object).iterator();
            }
            catch (Throwable throwable) {
                Exceptions.throwIfFatal(throwable);
                EmptySubscription.error(throwable, subscriber);
                return;
            }
            FlowableFromIterable.subscribe(subscriber, object);
            return;
        }
        this.source.subscribe(new FlattenIterableSubscriber<T, R>(subscriber, this.mapper, this.prefetch));
    }

    static final class FlattenIterableSubscriber<T, R>
    extends BasicIntQueueSubscription<R>
    implements FlowableSubscriber<T> {
        private static final long serialVersionUID = -3096000382929934955L;
        final Subscriber<? super R> actual;
        volatile boolean cancelled;
        int consumed;
        Iterator<? extends R> current;
        volatile boolean done;
        final AtomicReference<Throwable> error;
        int fusionMode;
        final int limit;
        final Function<? super T, ? extends Iterable<? extends R>> mapper;
        final int prefetch;
        SimpleQueue<T> queue;
        final AtomicLong requested;
        Subscription s;

        FlattenIterableSubscriber(Subscriber<? super R> subscriber, Function<? super T, ? extends Iterable<? extends R>> function, int n) {
            this.actual = subscriber;
            this.mapper = function;
            this.prefetch = n;
            this.limit = n - (n >> 2);
            this.error = new AtomicReference();
            this.requested = new AtomicLong();
        }

        public void cancel() {
            if (!this.cancelled) {
                this.cancelled = true;
                this.s.cancel();
                if (this.getAndIncrement() == 0) {
                    this.queue.clear();
                }
            }
        }

        boolean checkTerminated(boolean bl, boolean bl2, Subscriber<?> subscriber, SimpleQueue<?> simpleQueue) {
            if (this.cancelled) {
                this.current = null;
                simpleQueue.clear();
                return true;
            }
            if (bl) {
                if (this.error.get() != null) {
                    Throwable throwable = ExceptionHelper.terminate(this.error);
                    this.current = null;
                    simpleQueue.clear();
                    subscriber.onError(throwable);
                    return true;
                }
                if (bl2) {
                    subscriber.onComplete();
                    return true;
                }
            }
            return false;
        }

        @Override
        public void clear() {
            this.current = null;
            this.queue.clear();
        }

        void consumedOne(boolean bl) {
            if (bl) {
                int n = this.consumed + 1;
                if (n == this.limit) {
                    this.consumed = 0;
                    this.s.request((long)n);
                    return;
                }
                this.consumed = n;
            }
        }

        /*
         * Exception decompiling
         */
        void drain() {
            // This method has failed to decompile.  When submitting a bug report, please provide this stack trace, and (if you hold appropriate legal rights) the relevant class file.
            // org.benf.cfr.reader.util.ConfusedCFRException: Tried to end blocks [9[DOLOOP]], but top level block is 3[TRYBLOCK]
            // org.benf.cfr.reader.bytecode.analysis.opgraph.Op04StructuredStatement.processEndingBlocks(Op04StructuredStatement.java:416)
            // org.benf.cfr.reader.bytecode.analysis.opgraph.Op04StructuredStatement.buildNestedBlocks(Op04StructuredStatement.java:468)
            // org.benf.cfr.reader.bytecode.analysis.opgraph.Op03SimpleStatement.createInitialStructuredBlock(Op03SimpleStatement.java:2960)
            // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisInner(CodeAnalyser.java:818)
            // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisOrWrapFail(CodeAnalyser.java:196)
            // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysis(CodeAnalyser.java:141)
            // org.benf.cfr.reader.entities.attributes.AttributeCode.analyse(AttributeCode.java:95)
            // org.benf.cfr.reader.entities.Method.analyse(Method.java:372)
            // org.benf.cfr.reader.entities.ClassFile.analyseMid(ClassFile.java:867)
            // org.benf.cfr.reader.entities.ClassFile.analyseInnerClassesPass1(ClassFile.java:749)
            // org.benf.cfr.reader.entities.ClassFile.analyseMid(ClassFile.java:847)
            // org.benf.cfr.reader.entities.ClassFile.analyseTop(ClassFile.java:768)
            // org.benf.cfr.reader.Main.doJar(Main.java:141)
            // org.benf.cfr.reader.Main.main(Main.java:242)
            throw new IllegalStateException("Decompilation failed");
        }

        @Override
        public boolean isEmpty() {
            Iterator<R> iterator = this.current;
            if (iterator == null) {
                return this.queue.isEmpty();
            }
            return iterator.hasNext() ^ true;
        }

        public void onComplete() {
            if (this.done) {
                return;
            }
            this.done = true;
            this.drain();
        }

        public void onError(Throwable throwable) {
            if (!this.done && ExceptionHelper.addThrowable(this.error, throwable)) {
                this.done = true;
                this.drain();
                return;
            }
            RxJavaPlugins.onError(throwable);
        }

        public void onNext(T t) {
            if (this.done) {
                return;
            }
            if (this.fusionMode == 0 && !this.queue.offer(t)) {
                this.onError(new MissingBackpressureException("Queue is full?!"));
                return;
            }
            this.drain();
        }

        @Override
        public void onSubscribe(Subscription subscription) {
            if (SubscriptionHelper.validate(this.s, subscription)) {
                this.s = subscription;
                if (subscription instanceof QueueSubscription) {
                    QueueSubscription queueSubscription = (QueueSubscription)subscription;
                    int n = queueSubscription.requestFusion(3);
                    if (n == 1) {
                        this.fusionMode = n;
                        this.queue = queueSubscription;
                        this.done = true;
                        this.actual.onSubscribe((Subscription)this);
                        return;
                    }
                    if (n == 2) {
                        this.fusionMode = n;
                        this.queue = queueSubscription;
                        this.actual.onSubscribe((Subscription)this);
                        subscription.request((long)this.prefetch);
                        return;
                    }
                }
                this.queue = new SpscArrayQueue<T>(this.prefetch);
                this.actual.onSubscribe((Subscription)this);
                subscription.request((long)this.prefetch);
            }
        }

        @Nullable
        @Override
        public R poll() throws Exception {
            Iterator<Object> iterator;
            Iterator<R> iterator2;
            block3 : {
                iterator = this.current;
                do {
                    iterator2 = iterator;
                    if (iterator != null) break block3;
                    iterator = this.queue.poll();
                    if (iterator == null) {
                        return null;
                    }
                    iterator2 = this.mapper.apply(iterator).iterator();
                    if (iterator2.hasNext()) break;
                    iterator = null;
                } while (true);
                this.current = iterator2;
            }
            iterator = ObjectHelper.requireNonNull(iterator2.next(), "The iterator returned a null value");
            if (!iterator2.hasNext()) {
                this.current = null;
            }
            return (R)iterator;
        }

        public void request(long l) {
            if (SubscriptionHelper.validate(l)) {
                BackpressureHelper.add(this.requested, l);
                this.drain();
            }
        }

        @Override
        public int requestFusion(int n) {
            if ((n & 1) != 0 && this.fusionMode == 1) {
                return 1;
            }
            return 0;
        }
    }

}

