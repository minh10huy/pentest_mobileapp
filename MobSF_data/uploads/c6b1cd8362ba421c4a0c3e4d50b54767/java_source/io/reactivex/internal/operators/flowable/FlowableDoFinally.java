/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  org.reactivestreams.Subscriber
 *  org.reactivestreams.Subscription
 */
package io.reactivex.internal.operators.flowable;

import io.reactivex.Flowable;
import io.reactivex.FlowableSubscriber;
import io.reactivex.annotations.Experimental;
import io.reactivex.annotations.Nullable;
import io.reactivex.exceptions.Exceptions;
import io.reactivex.functions.Action;
import io.reactivex.internal.fuseable.ConditionalSubscriber;
import io.reactivex.internal.fuseable.QueueSubscription;
import io.reactivex.internal.operators.flowable.AbstractFlowableWithUpstream;
import io.reactivex.internal.subscriptions.BasicIntQueueSubscription;
import io.reactivex.internal.subscriptions.SubscriptionHelper;
import io.reactivex.plugins.RxJavaPlugins;
import org.reactivestreams.Subscriber;
import org.reactivestreams.Subscription;

@Experimental
public final class FlowableDoFinally<T>
extends AbstractFlowableWithUpstream<T, T> {
    final Action onFinally;

    public FlowableDoFinally(Flowable<T> flowable, Action action) {
        super(flowable);
        this.onFinally = action;
    }

    @Override
    protected void subscribeActual(Subscriber<? super T> subscriber) {
        if (subscriber instanceof ConditionalSubscriber) {
            this.source.subscribe(new DoFinallyConditionalSubscriber((ConditionalSubscriber)subscriber, this.onFinally));
            return;
        }
        this.source.subscribe(new DoFinallySubscriber<T>(subscriber, this.onFinally));
    }

    static final class DoFinallyConditionalSubscriber<T>
    extends BasicIntQueueSubscription<T>
    implements ConditionalSubscriber<T> {
        private static final long serialVersionUID = 4109457741734051389L;
        final ConditionalSubscriber<? super T> actual;
        final Action onFinally;
        QueueSubscription<T> qs;
        Subscription s;
        boolean syncFused;

        DoFinallyConditionalSubscriber(ConditionalSubscriber<? super T> conditionalSubscriber, Action action) {
            this.actual = conditionalSubscriber;
            this.onFinally = action;
        }

        public void cancel() {
            this.s.cancel();
            this.runFinally();
        }

        @Override
        public void clear() {
            this.qs.clear();
        }

        @Override
        public boolean isEmpty() {
            return this.qs.isEmpty();
        }

        public void onComplete() {
            this.actual.onComplete();
            this.runFinally();
        }

        public void onError(Throwable throwable) {
            this.actual.onError(throwable);
            this.runFinally();
        }

        public void onNext(T t) {
            this.actual.onNext(t);
        }

        @Override
        public void onSubscribe(Subscription subscription) {
            if (SubscriptionHelper.validate(this.s, subscription)) {
                this.s = subscription;
                if (subscription instanceof QueueSubscription) {
                    this.qs = (QueueSubscription)subscription;
                }
                this.actual.onSubscribe(this);
            }
        }

        @Nullable
        @Override
        public T poll() throws Exception {
            T t = this.qs.poll();
            if (t == null && this.syncFused) {
                this.runFinally();
            }
            return t;
        }

        public void request(long l) {
            this.s.request(l);
        }

        @Override
        public int requestFusion(int n) {
            QueueSubscription<T> queueSubscription = this.qs;
            if (queueSubscription != null && (n & 4) == 0) {
                if ((n = queueSubscription.requestFusion(n)) != 0) {
                    boolean bl = true;
                    if (n != 1) {
                        bl = false;
                    }
                    this.syncFused = bl;
                }
                return n;
            }
            return 0;
        }

        void runFinally() {
            if (this.compareAndSet(0, 1)) {
                try {
                    this.onFinally.run();
                    return;
                }
                catch (Throwable throwable) {
                    Exceptions.throwIfFatal(throwable);
                    RxJavaPlugins.onError(throwable);
                }
            }
        }

        @Override
        public boolean tryOnNext(T t) {
            return this.actual.tryOnNext(t);
        }
    }

    static final class DoFinallySubscriber<T>
    extends BasicIntQueueSubscription<T>
    implements FlowableSubscriber<T> {
        private static final long serialVersionUID = 4109457741734051389L;
        final Subscriber<? super T> actual;
        final Action onFinally;
        QueueSubscription<T> qs;
        Subscription s;
        boolean syncFused;

        DoFinallySubscriber(Subscriber<? super T> subscriber, Action action) {
            this.actual = subscriber;
            this.onFinally = action;
        }

        public void cancel() {
            this.s.cancel();
            this.runFinally();
        }

        @Override
        public void clear() {
            this.qs.clear();
        }

        @Override
        public boolean isEmpty() {
            return this.qs.isEmpty();
        }

        public void onComplete() {
            this.actual.onComplete();
            this.runFinally();
        }

        public void onError(Throwable throwable) {
            this.actual.onError(throwable);
            this.runFinally();
        }

        public void onNext(T t) {
            this.actual.onNext(t);
        }

        @Override
        public void onSubscribe(Subscription subscription) {
            if (SubscriptionHelper.validate(this.s, subscription)) {
                this.s = subscription;
                if (subscription instanceof QueueSubscription) {
                    this.qs = (QueueSubscription)subscription;
                }
                this.actual.onSubscribe((Subscription)this);
            }
        }

        @Nullable
        @Override
        public T poll() throws Exception {
            T t = this.qs.poll();
            if (t == null && this.syncFused) {
                this.runFinally();
            }
            return t;
        }

        public void request(long l) {
            this.s.request(l);
        }

        @Override
        public int requestFusion(int n) {
            QueueSubscription<T> queueSubscription = this.qs;
            if (queueSubscription != null && (n & 4) == 0) {
                if ((n = queueSubscription.requestFusion(n)) != 0) {
                    boolean bl = true;
                    if (n != 1) {
                        bl = false;
                    }
                    this.syncFused = bl;
                }
                return n;
            }
            return 0;
        }

        void runFinally() {
            if (this.compareAndSet(0, 1)) {
                try {
                    this.onFinally.run();
                    return;
                }
                catch (Throwable throwable) {
                    Exceptions.throwIfFatal(throwable);
                    RxJavaPlugins.onError(throwable);
                }
            }
        }
    }

}

