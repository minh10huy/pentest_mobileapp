/*
 * Decompiled with CFR 0_132.
 */
package io.reactivex.internal.operators.completable;

import io.reactivex.Completable;
import io.reactivex.CompletableObserver;
import io.reactivex.CompletableSource;
import io.reactivex.Scheduler;
import io.reactivex.disposables.CompositeDisposable;
import io.reactivex.disposables.Disposable;
import java.util.concurrent.TimeUnit;

public final class CompletableDelay
extends Completable {
    final long delay;
    final boolean delayError;
    final Scheduler scheduler;
    final CompletableSource source;
    final TimeUnit unit;

    public CompletableDelay(CompletableSource completableSource, long l, TimeUnit timeUnit, Scheduler scheduler, boolean bl) {
        this.source = completableSource;
        this.delay = l;
        this.unit = timeUnit;
        this.scheduler = scheduler;
        this.delayError = bl;
    }

    @Override
    protected void subscribeActual(CompletableObserver completableObserver) {
        CompositeDisposable compositeDisposable = new CompositeDisposable();
        this.source.subscribe(new Delay(compositeDisposable, completableObserver));
    }

    final class Delay
    implements CompletableObserver {
        final CompletableObserver s;
        private final CompositeDisposable set;

        Delay(CompositeDisposable compositeDisposable, CompletableObserver completableObserver) {
            this.set = compositeDisposable;
            this.s = completableObserver;
        }

        @Override
        public void onComplete() {
            this.set.add(CompletableDelay.this.scheduler.scheduleDirect(new OnComplete(), CompletableDelay.this.delay, CompletableDelay.this.unit));
        }

        @Override
        public void onError(Throwable object) {
            CompositeDisposable compositeDisposable = this.set;
            Scheduler scheduler = CompletableDelay.this.scheduler;
            object = new OnError((Throwable)object);
            long l = CompletableDelay.this.delayError ? CompletableDelay.this.delay : 0L;
            compositeDisposable.add(scheduler.scheduleDirect((Runnable)object, l, CompletableDelay.this.unit));
        }

        @Override
        public void onSubscribe(Disposable disposable) {
            this.set.add(disposable);
            this.s.onSubscribe(this.set);
        }

        final class OnComplete
        implements Runnable {
            OnComplete() {
            }

            @Override
            public void run() {
                Delay.this.s.onComplete();
            }
        }

        final class OnError
        implements Runnable {
            private final Throwable e;

            OnError(Throwable throwable) {
                this.e = throwable;
            }

            @Override
            public void run() {
                Delay.this.s.onError(this.e);
            }
        }

    }

}

