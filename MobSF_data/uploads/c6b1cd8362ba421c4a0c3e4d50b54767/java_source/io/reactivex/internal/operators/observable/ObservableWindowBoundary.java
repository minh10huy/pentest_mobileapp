/*
 * Decompiled with CFR 0_132.
 */
package io.reactivex.internal.operators.observable;

import io.reactivex.Observable;
import io.reactivex.ObservableSource;
import io.reactivex.Observer;
import io.reactivex.disposables.Disposable;
import io.reactivex.internal.disposables.DisposableHelper;
import io.reactivex.internal.fuseable.SimplePlainQueue;
import io.reactivex.internal.observers.QueueDrainObserver;
import io.reactivex.internal.operators.observable.AbstractObservableWithUpstream;
import io.reactivex.internal.queue.MpscLinkedQueue;
import io.reactivex.internal.util.NotificationLite;
import io.reactivex.observers.DisposableObserver;
import io.reactivex.observers.SerializedObserver;
import io.reactivex.plugins.RxJavaPlugins;
import io.reactivex.subjects.UnicastSubject;
import java.util.concurrent.atomic.AtomicLong;
import java.util.concurrent.atomic.AtomicReference;

public final class ObservableWindowBoundary<T, B>
extends AbstractObservableWithUpstream<T, Observable<T>> {
    final int bufferSize;
    final ObservableSource<B> other;

    public ObservableWindowBoundary(ObservableSource<T> observableSource, ObservableSource<B> observableSource2, int n) {
        super(observableSource);
        this.other = observableSource2;
        this.bufferSize = n;
    }

    @Override
    public void subscribeActual(Observer<? super Observable<T>> observer) {
        this.source.subscribe(new WindowBoundaryMainObserver(new SerializedObserver<Observable<T>>(observer), this.other, this.bufferSize));
    }

    static final class WindowBoundaryInnerObserver<T, B>
    extends DisposableObserver<B> {
        boolean done;
        final WindowBoundaryMainObserver<T, B> parent;

        WindowBoundaryInnerObserver(WindowBoundaryMainObserver<T, B> windowBoundaryMainObserver) {
            this.parent = windowBoundaryMainObserver;
        }

        @Override
        public void onComplete() {
            if (this.done) {
                return;
            }
            this.done = true;
            this.parent.onComplete();
        }

        @Override
        public void onError(Throwable throwable) {
            if (this.done) {
                RxJavaPlugins.onError(throwable);
                return;
            }
            this.done = true;
            this.parent.onError(throwable);
        }

        @Override
        public void onNext(B b) {
            if (this.done) {
                return;
            }
            this.parent.next();
        }
    }

    static final class WindowBoundaryMainObserver<T, B>
    extends QueueDrainObserver<T, Object, Observable<T>>
    implements Disposable {
        static final Object NEXT = new Object();
        final AtomicReference<Disposable> boundary = new AtomicReference();
        final int bufferSize;
        final ObservableSource<B> other;
        Disposable s;
        UnicastSubject<T> window;
        final AtomicLong windows = new AtomicLong();

        WindowBoundaryMainObserver(Observer<? super Observable<T>> observer, ObservableSource<B> observableSource, int n) {
            super(observer, new MpscLinkedQueue());
            this.other = observableSource;
            this.bufferSize = n;
            this.windows.lazySet(1L);
        }

        @Override
        public void dispose() {
            this.cancelled = true;
        }

        void drainLoop() {
            Object object = (MpscLinkedQueue)this.queue;
            Observer observer = this.actual;
            UnicastSubject unicastSubject = this.window;
            int n = 1;
            do {
                boolean bl = this.done;
                Object t = object.poll();
                int n2 = t == null ? 1 : 0;
                if (bl && n2 != 0) {
                    DisposableHelper.dispose(this.boundary);
                    object = this.error;
                    if (object != null) {
                        unicastSubject.onError((Throwable)object);
                        return;
                    }
                    unicastSubject.onComplete();
                    return;
                }
                if (n2 != 0) {
                    n = n2 = this.leave(- n);
                    if (n2 != 0) continue;
                    return;
                }
                if (t == NEXT) {
                    unicastSubject.onComplete();
                    if (this.windows.decrementAndGet() == 0L) {
                        DisposableHelper.dispose(this.boundary);
                        return;
                    }
                    if (this.cancelled) continue;
                    unicastSubject = UnicastSubject.create(this.bufferSize);
                    this.windows.getAndIncrement();
                    this.window = unicastSubject;
                    observer.onNext(unicastSubject);
                    continue;
                }
                unicastSubject.onNext(NotificationLite.getValue(t));
            } while (true);
        }

        @Override
        public boolean isDisposed() {
            return this.cancelled;
        }

        void next() {
            this.queue.offer(NEXT);
            if (this.enter()) {
                this.drainLoop();
            }
        }

        @Override
        public void onComplete() {
            if (this.done) {
                return;
            }
            this.done = true;
            if (this.enter()) {
                this.drainLoop();
            }
            if (this.windows.decrementAndGet() == 0L) {
                DisposableHelper.dispose(this.boundary);
            }
            this.actual.onComplete();
        }

        @Override
        public void onError(Throwable throwable) {
            if (this.done) {
                RxJavaPlugins.onError(throwable);
                return;
            }
            this.error = throwable;
            this.done = true;
            if (this.enter()) {
                this.drainLoop();
            }
            if (this.windows.decrementAndGet() == 0L) {
                DisposableHelper.dispose(this.boundary);
            }
            this.actual.onError(throwable);
        }

        @Override
        public void onNext(T t) {
            if (this.fastEnter()) {
                this.window.onNext(t);
                if (this.leave(-1) == 0) {
                    return;
                }
            } else {
                this.queue.offer(NotificationLite.next(t));
                if (!this.enter()) {
                    return;
                }
            }
            this.drainLoop();
        }

        @Override
        public void onSubscribe(Disposable windowBoundaryInnerObserver) {
            if (DisposableHelper.validate(this.s, windowBoundaryInnerObserver)) {
                this.s = windowBoundaryInnerObserver;
                windowBoundaryInnerObserver = this.actual;
                windowBoundaryInnerObserver.onSubscribe(this);
                if (this.cancelled) {
                    return;
                }
                UnicastSubject unicastSubject = UnicastSubject.create(this.bufferSize);
                this.window = unicastSubject;
                windowBoundaryInnerObserver.onNext(unicastSubject);
                windowBoundaryInnerObserver = new WindowBoundaryInnerObserver(this);
                if (this.boundary.compareAndSet(null, windowBoundaryInnerObserver)) {
                    this.windows.getAndIncrement();
                    this.other.subscribe(windowBoundaryInnerObserver);
                }
            }
        }
    }

}

