/*
 * Decompiled with CFR 0_132.
 */
package io.reactivex.internal.operators.observable;

import io.reactivex.ObservableSource;
import io.reactivex.Observer;
import io.reactivex.disposables.Disposable;
import io.reactivex.exceptions.Exceptions;
import io.reactivex.functions.Function;
import io.reactivex.internal.disposables.DisposableHelper;
import io.reactivex.internal.disposables.EmptyDisposable;
import io.reactivex.internal.functions.ObjectHelper;
import io.reactivex.internal.operators.observable.AbstractObservableWithUpstream;
import io.reactivex.internal.queue.SpscLinkedArrayQueue;
import io.reactivex.observables.GroupedObservable;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicReference;

public final class ObservableGroupBy<T, K, V>
extends AbstractObservableWithUpstream<T, GroupedObservable<K, V>> {
    final int bufferSize;
    final boolean delayError;
    final Function<? super T, ? extends K> keySelector;
    final Function<? super T, ? extends V> valueSelector;

    public ObservableGroupBy(ObservableSource<T> observableSource, Function<? super T, ? extends K> function, Function<? super T, ? extends V> function2, int n, boolean bl) {
        super(observableSource);
        this.keySelector = function;
        this.valueSelector = function2;
        this.bufferSize = n;
        this.delayError = bl;
    }

    @Override
    public void subscribeActual(Observer<? super GroupedObservable<K, V>> observer) {
        this.source.subscribe(new GroupByObserver<T, K, V>(observer, this.keySelector, this.valueSelector, this.bufferSize, this.delayError));
    }

    public static final class GroupByObserver<T, K, V>
    extends AtomicInteger
    implements Observer<T>,
    Disposable {
        static final Object NULL_KEY = new Object();
        private static final long serialVersionUID = -3688291656102519502L;
        final Observer<? super GroupedObservable<K, V>> actual;
        final int bufferSize;
        final AtomicBoolean cancelled = new AtomicBoolean();
        final boolean delayError;
        final Map<Object, GroupedUnicast<K, V>> groups;
        final Function<? super T, ? extends K> keySelector;
        Disposable s;
        final Function<? super T, ? extends V> valueSelector;

        public GroupByObserver(Observer<? super GroupedObservable<K, V>> observer, Function<? super T, ? extends K> function, Function<? super T, ? extends V> function2, int n, boolean bl) {
            this.actual = observer;
            this.keySelector = function;
            this.valueSelector = function2;
            this.bufferSize = n;
            this.delayError = bl;
            this.groups = new ConcurrentHashMap<Object, GroupedUnicast<K, V>>();
            this.lazySet(1);
        }

        public void cancel(K object) {
            if (object == null) {
                object = NULL_KEY;
            }
            this.groups.remove(object);
            if (this.decrementAndGet() == 0) {
                this.s.dispose();
            }
        }

        @Override
        public void dispose() {
            if (this.cancelled.compareAndSet(false, true) && this.decrementAndGet() == 0) {
                this.s.dispose();
            }
        }

        @Override
        public boolean isDisposed() {
            return this.cancelled.get();
        }

        @Override
        public void onComplete() {
            Object object = new ArrayList<GroupedUnicast<K, V>>(this.groups.values());
            this.groups.clear();
            object = object.iterator();
            while (object.hasNext()) {
                ((GroupedUnicast)object.next()).onComplete();
            }
            this.actual.onComplete();
        }

        @Override
        public void onError(Throwable throwable) {
            Object object = new ArrayList<GroupedUnicast<K, V>>(this.groups.values());
            this.groups.clear();
            object = object.iterator();
            while (object.hasNext()) {
                ((GroupedUnicast)object.next()).onError(throwable);
            }
            this.actual.onError(throwable);
        }

        @Override
        public void onNext(T object) {
            GroupedUnicast<K, Object> groupedUnicast;
            block4 : {
                K k;
                Object object2;
                block5 : {
                    try {
                        GroupedUnicast<K, V> groupedUnicast2;
                        k = this.keySelector.apply(object);
                        object2 = k != null ? k : NULL_KEY;
                        groupedUnicast = groupedUnicast2 = this.groups.get(object2);
                        if (groupedUnicast2 != null) break block4;
                        if (!this.cancelled.get()) break block5;
                        return;
                    }
                    catch (Throwable throwable) {
                        Exceptions.throwIfFatal(throwable);
                        this.s.dispose();
                        this.onError(throwable);
                        return;
                    }
                }
                groupedUnicast = GroupedUnicast.createWith(k, this.bufferSize, this, this.delayError);
                this.groups.put(object2, groupedUnicast);
                this.getAndIncrement();
                this.actual.onNext(groupedUnicast);
            }
            try {
                object = ObjectHelper.requireNonNull(this.valueSelector.apply(object), "The value supplied is null");
                groupedUnicast.onNext(object);
                return;
            }
            catch (Throwable throwable) {
                Exceptions.throwIfFatal(throwable);
                this.s.dispose();
                this.onError(throwable);
                return;
            }
        }

        @Override
        public void onSubscribe(Disposable disposable) {
            if (DisposableHelper.validate(this.s, disposable)) {
                this.s = disposable;
                this.actual.onSubscribe(this);
            }
        }
    }

    static final class GroupedUnicast<K, T>
    extends GroupedObservable<K, T> {
        final State<T, K> state;

        protected GroupedUnicast(K k, State<T, K> state) {
            super(k);
            this.state = state;
        }

        public static <T, K> GroupedUnicast<K, T> createWith(K k, int n, GroupByObserver<?, K, T> groupByObserver, boolean bl) {
            return new GroupedUnicast<K, T>(k, new State<T, K>(n, groupByObserver, k, bl));
        }

        public void onComplete() {
            this.state.onComplete();
        }

        public void onError(Throwable throwable) {
            this.state.onError(throwable);
        }

        public void onNext(T t) {
            this.state.onNext(t);
        }

        @Override
        protected void subscribeActual(Observer<? super T> observer) {
            this.state.subscribe(observer);
        }
    }

    static final class State<T, K>
    extends AtomicInteger
    implements Disposable,
    ObservableSource<T> {
        private static final long serialVersionUID = -3852313036005250360L;
        final AtomicReference<Observer<? super T>> actual = new AtomicReference();
        final AtomicBoolean cancelled = new AtomicBoolean();
        final boolean delayError;
        volatile boolean done;
        Throwable error;
        final K key;
        final AtomicBoolean once = new AtomicBoolean();
        final GroupByObserver<?, K, T> parent;
        final SpscLinkedArrayQueue<T> queue;

        State(int n, GroupByObserver<?, K, T> groupByObserver, K k, boolean bl) {
            this.queue = new SpscLinkedArrayQueue(n);
            this.parent = groupByObserver;
            this.key = k;
            this.delayError = bl;
        }

        boolean checkTerminated(boolean bl, boolean bl2, Observer<? super T> observer, boolean bl3) {
            if (this.cancelled.get()) {
                this.queue.clear();
                this.parent.cancel(this.key);
                this.actual.lazySet(null);
                return true;
            }
            if (bl) {
                if (bl3) {
                    if (bl2) {
                        Throwable throwable = this.error;
                        this.actual.lazySet(null);
                        if (throwable != null) {
                            observer.onError(throwable);
                            return true;
                        }
                        observer.onComplete();
                        return true;
                    }
                } else {
                    Throwable throwable = this.error;
                    if (throwable != null) {
                        this.queue.clear();
                        this.actual.lazySet(null);
                        observer.onError(throwable);
                        return true;
                    }
                    if (bl2) {
                        this.actual.lazySet(null);
                        observer.onComplete();
                        return true;
                    }
                }
            }
            return false;
        }

        @Override
        public void dispose() {
            if (this.cancelled.compareAndSet(false, true) && this.getAndIncrement() == 0) {
                this.actual.lazySet(null);
                this.parent.cancel(this.key);
            }
        }

        void drain() {
            if (this.getAndIncrement() != 0) {
                return;
            }
            SpscLinkedArrayQueue<T> spscLinkedArrayQueue = this.queue;
            boolean bl = this.delayError;
            Observer<T> observer = this.actual.get();
            int n = 1;
            do {
                int n2;
                if (observer != null) {
                    do {
                        boolean bl2;
                        T t;
                        boolean bl3;
                        if (this.checkTerminated(bl3 = this.done, bl2 = (t = spscLinkedArrayQueue.poll()) == null, observer, bl)) {
                            return;
                        }
                        if (bl2) break;
                        observer.onNext(t);
                    } while (true);
                }
                if ((n2 = this.addAndGet(- n)) == 0) {
                    return;
                }
                n = n2;
                if (observer != null) continue;
                observer = this.actual.get();
                n = n2;
            } while (true);
        }

        @Override
        public boolean isDisposed() {
            return this.cancelled.get();
        }

        public void onComplete() {
            this.done = true;
            this.drain();
        }

        public void onError(Throwable throwable) {
            this.error = throwable;
            this.done = true;
            this.drain();
        }

        public void onNext(T t) {
            this.queue.offer(t);
            this.drain();
        }

        @Override
        public void subscribe(Observer<? super T> observer) {
            if (this.once.compareAndSet(false, true)) {
                observer.onSubscribe(this);
                this.actual.lazySet(observer);
                if (this.cancelled.get()) {
                    this.actual.lazySet(null);
                    return;
                }
                this.drain();
                return;
            }
            EmptyDisposable.error((Throwable)new IllegalStateException("Only one Observer allowed!"), observer);
        }
    }

}

