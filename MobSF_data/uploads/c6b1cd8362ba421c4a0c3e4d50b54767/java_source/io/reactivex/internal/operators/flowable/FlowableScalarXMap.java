/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  org.reactivestreams.Subscriber
 *  org.reactivestreams.Subscription
 */
package io.reactivex.internal.operators.flowable;

import io.reactivex.Flowable;
import io.reactivex.exceptions.Exceptions;
import io.reactivex.functions.Function;
import io.reactivex.internal.functions.ObjectHelper;
import io.reactivex.internal.subscriptions.EmptySubscription;
import io.reactivex.internal.subscriptions.ScalarSubscription;
import io.reactivex.plugins.RxJavaPlugins;
import java.util.concurrent.Callable;
import org.reactivestreams.Publisher;
import org.reactivestreams.Subscriber;
import org.reactivestreams.Subscription;

public final class FlowableScalarXMap {
    private FlowableScalarXMap() {
        throw new IllegalStateException("No instances!");
    }

    public static <T, U> Flowable<U> scalarXMap(T t, Function<? super T, ? extends Publisher<? extends U>> function) {
        return RxJavaPlugins.onAssembly(new ScalarXMapFlowable((T)t, function));
    }

    public static <T, R> boolean tryScalarXMapSubscribe(Publisher<T> publisher, Subscriber<? super R> subscriber, Function<? super T, ? extends Publisher<? extends R>> function) {
        if (publisher instanceof Callable) {
            block8 : {
                try {
                    publisher = ((Callable)((Object)publisher)).call();
                    if (publisher != null) break block8;
                }
                catch (Throwable throwable) {
                    Exceptions.throwIfFatal(throwable);
                    EmptySubscription.error(throwable, subscriber);
                    return true;
                }
                EmptySubscription.complete(subscriber);
                return true;
            }
            try {
                publisher = ObjectHelper.requireNonNull(function.apply(publisher), "The mapper returned a null Publisher");
            }
            catch (Throwable throwable) {
                Exceptions.throwIfFatal(throwable);
                EmptySubscription.error(throwable, subscriber);
                return true;
            }
            if (publisher instanceof Callable) {
                block9 : {
                    try {
                        publisher = ((Callable)((Object)publisher)).call();
                        if (publisher != null) break block9;
                    }
                    catch (Throwable throwable) {
                        Exceptions.throwIfFatal(throwable);
                        EmptySubscription.error(throwable, subscriber);
                        return true;
                    }
                    EmptySubscription.complete(subscriber);
                    return true;
                }
                subscriber.onSubscribe(new ScalarSubscription<Publisher<T>>(subscriber, publisher));
                return true;
            }
            publisher.subscribe(subscriber);
            return true;
        }
        return false;
    }

    static final class ScalarXMapFlowable<T, R>
    extends Flowable<R> {
        final Function<? super T, ? extends Publisher<? extends R>> mapper;
        final T value;

        ScalarXMapFlowable(T t, Function<? super T, ? extends Publisher<? extends R>> function) {
            this.value = t;
            this.mapper = function;
        }

        @Override
        public void subscribeActual(Subscriber<? super R> subscriber) {
            Publisher<Object> publisher;
            try {
                publisher = ObjectHelper.requireNonNull(this.mapper.apply(this.value), "The mapper returned a null Publisher");
            }
            catch (Throwable throwable) {
                EmptySubscription.error(throwable, subscriber);
                return;
            }
            if (publisher instanceof Callable) {
                block5 : {
                    try {
                        publisher = ((Callable)((Object)publisher)).call();
                        if (publisher != null) break block5;
                    }
                    catch (Throwable throwable) {
                        Exceptions.throwIfFatal(throwable);
                        EmptySubscription.error(throwable, subscriber);
                        return;
                    }
                    EmptySubscription.complete(subscriber);
                    return;
                }
                subscriber.onSubscribe(new ScalarSubscription<Publisher<? extends R>>(subscriber, publisher));
                return;
            }
            publisher.subscribe(subscriber);
        }
    }

}

