/*
 * Decompiled with CFR 0_132.
 */
package io.reactivex.internal.operators.observable;

import io.reactivex.ObservableSource;
import io.reactivex.Observer;
import io.reactivex.Scheduler;
import io.reactivex.disposables.Disposable;
import io.reactivex.internal.disposables.DisposableHelper;
import io.reactivex.internal.operators.observable.AbstractObservableWithUpstream;
import io.reactivex.observers.SerializedObserver;
import java.util.concurrent.TimeUnit;

public final class ObservableDelay<T>
extends AbstractObservableWithUpstream<T, T> {
    final long delay;
    final boolean delayError;
    final Scheduler scheduler;
    final TimeUnit unit;

    public ObservableDelay(ObservableSource<T> observableSource, long l, TimeUnit timeUnit, Scheduler scheduler, boolean bl) {
        super(observableSource);
        this.delay = l;
        this.unit = timeUnit;
        this.scheduler = scheduler;
        this.delayError = bl;
    }

    @Override
    public void subscribeActual(Observer<? super T> observer) {
        if (!this.delayError) {
            observer = new SerializedObserver<T>(observer);
        }
        Scheduler.Worker worker = this.scheduler.createWorker();
        this.source.subscribe(new DelayObserver<T>(observer, this.delay, this.unit, worker, this.delayError));
    }

    static final class DelayObserver<T>
    implements Observer<T>,
    Disposable {
        final Observer<? super T> actual;
        final long delay;
        final boolean delayError;
        Disposable s;
        final TimeUnit unit;
        final Scheduler.Worker w;

        DelayObserver(Observer<? super T> observer, long l, TimeUnit timeUnit, Scheduler.Worker worker, boolean bl) {
            this.actual = observer;
            this.delay = l;
            this.unit = timeUnit;
            this.w = worker;
            this.delayError = bl;
        }

        @Override
        public void dispose() {
            this.s.dispose();
            this.w.dispose();
        }

        @Override
        public boolean isDisposed() {
            return this.w.isDisposed();
        }

        @Override
        public void onComplete() {
            this.w.schedule(new OnComplete(), this.delay, this.unit);
        }

        @Override
        public void onError(Throwable object) {
            Scheduler.Worker worker = this.w;
            object = new OnError((Throwable)object);
            long l = this.delayError ? this.delay : 0L;
            worker.schedule((Runnable)object, l, this.unit);
        }

        @Override
        public void onNext(T t) {
            this.w.schedule(new OnNext(t), this.delay, this.unit);
        }

        @Override
        public void onSubscribe(Disposable disposable) {
            if (DisposableHelper.validate(this.s, disposable)) {
                this.s = disposable;
                this.actual.onSubscribe(this);
            }
        }

        final class OnComplete
        implements Runnable {
            OnComplete() {
            }

            @Override
            public void run() {
                try {
                    DelayObserver.this.actual.onComplete();
                    return;
                }
                finally {
                    DelayObserver.this.w.dispose();
                }
            }
        }

        final class OnError
        implements Runnable {
            private final Throwable throwable;

            OnError(Throwable throwable) {
                this.throwable = throwable;
            }

            @Override
            public void run() {
                try {
                    DelayObserver.this.actual.onError(this.throwable);
                    return;
                }
                finally {
                    DelayObserver.this.w.dispose();
                }
            }
        }

        final class OnNext
        implements Runnable {
            private final T t;

            OnNext(T t) {
                this.t = t;
            }

            @Override
            public void run() {
                DelayObserver.this.actual.onNext(this.t);
            }
        }

    }

}

