/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  org.reactivestreams.Subscriber
 *  org.reactivestreams.Subscription
 */
package io.reactivex.internal.operators.single;

import io.reactivex.Flowable;
import io.reactivex.SingleObserver;
import io.reactivex.SingleSource;
import io.reactivex.annotations.Nullable;
import io.reactivex.disposables.Disposable;
import io.reactivex.exceptions.Exceptions;
import io.reactivex.functions.Function;
import io.reactivex.internal.disposables.DisposableHelper;
import io.reactivex.internal.functions.ObjectHelper;
import io.reactivex.internal.subscriptions.BasicIntQueueSubscription;
import io.reactivex.internal.subscriptions.SubscriptionHelper;
import io.reactivex.internal.util.BackpressureHelper;
import java.util.Iterator;
import java.util.concurrent.atomic.AtomicLong;
import org.reactivestreams.Subscriber;
import org.reactivestreams.Subscription;

public final class SingleFlatMapIterableFlowable<T, R>
extends Flowable<R> {
    final Function<? super T, ? extends Iterable<? extends R>> mapper;
    final SingleSource<T> source;

    public SingleFlatMapIterableFlowable(SingleSource<T> singleSource, Function<? super T, ? extends Iterable<? extends R>> function) {
        this.source = singleSource;
        this.mapper = function;
    }

    @Override
    protected void subscribeActual(Subscriber<? super R> subscriber) {
        this.source.subscribe(new FlatMapIterableObserver<T, R>(subscriber, this.mapper));
    }

    static final class FlatMapIterableObserver<T, R>
    extends BasicIntQueueSubscription<R>
    implements SingleObserver<T> {
        private static final long serialVersionUID = -8938804753851907758L;
        final Subscriber<? super R> actual;
        volatile boolean cancelled;
        Disposable d;
        volatile Iterator<? extends R> it;
        final Function<? super T, ? extends Iterable<? extends R>> mapper;
        boolean outputFused;
        final AtomicLong requested;

        FlatMapIterableObserver(Subscriber<? super R> subscriber, Function<? super T, ? extends Iterable<? extends R>> function) {
            this.actual = subscriber;
            this.mapper = function;
            this.requested = new AtomicLong();
        }

        public void cancel() {
            this.cancelled = true;
            this.d.dispose();
            this.d = DisposableHelper.DISPOSED;
        }

        @Override
        public void clear() {
            this.it = null;
        }

        void drain() {
            if (this.getAndIncrement() != 0) {
                return;
            }
            Subscriber<? super R> subscriber = this.actual;
            Iterator<R> iterator = this.it;
            if (this.outputFused && iterator != null) {
                subscriber.onNext(null);
                subscriber.onComplete();
                return;
            }
            int n = 1;
            do {
                int n2;
                if (iterator != null) {
                    long l;
                    long l2 = this.requested.get();
                    if (l2 == Long.MAX_VALUE) {
                        this.slowPath(subscriber, iterator);
                        return;
                    }
                    for (l = 0L; l != l2; ++l) {
                        R r;
                        if (this.cancelled) {
                            return;
                        }
                        try {
                            r = ObjectHelper.requireNonNull(iterator.next(), "The iterator returned a null value");
                        }
                        catch (Throwable throwable) {
                            Exceptions.throwIfFatal(throwable);
                            subscriber.onError(throwable);
                            return;
                        }
                        subscriber.onNext(r);
                        if (this.cancelled) {
                            return;
                        }
                        try {
                            boolean bl = iterator.hasNext();
                            if (bl) continue;
                        }
                        catch (Throwable throwable) {
                            Exceptions.throwIfFatal(throwable);
                            subscriber.onError(throwable);
                            return;
                        }
                        subscriber.onComplete();
                        return;
                    }
                    if (l != 0L) {
                        BackpressureHelper.produced(this.requested, l);
                    }
                }
                if ((n2 = this.addAndGet(- n)) == 0) {
                    return;
                }
                n = n2;
                if (iterator != null) continue;
                iterator = this.it;
                n = n2;
            } while (true);
        }

        @Override
        public boolean isEmpty() {
            if (this.it == null) {
                return true;
            }
            return false;
        }

        @Override
        public void onError(Throwable throwable) {
            this.d = DisposableHelper.DISPOSED;
            this.actual.onError(throwable);
        }

        @Override
        public void onSubscribe(Disposable disposable) {
            if (DisposableHelper.validate(this.d, disposable)) {
                this.d = disposable;
                this.actual.onSubscribe((Subscription)this);
            }
        }

        @Override
        public void onSuccess(T object) {
            block2 : {
                try {
                    object = this.mapper.apply(object).iterator();
                    boolean bl = object.hasNext();
                    if (bl) break block2;
                }
                catch (Throwable throwable) {
                    Exceptions.throwIfFatal(throwable);
                    this.actual.onError(throwable);
                    return;
                }
                this.actual.onComplete();
                return;
            }
            this.it = object;
            this.drain();
        }

        @Nullable
        @Override
        public R poll() throws Exception {
            Iterator<R> iterator = this.it;
            if (iterator != null) {
                R r = ObjectHelper.requireNonNull(iterator.next(), "The iterator returned a null value");
                if (!iterator.hasNext()) {
                    this.it = null;
                }
                return r;
            }
            return null;
        }

        public void request(long l) {
            if (SubscriptionHelper.validate(l)) {
                BackpressureHelper.add(this.requested, l);
                this.drain();
            }
        }

        @Override
        public int requestFusion(int n) {
            if ((n & 2) != 0) {
                this.outputFused = true;
                return 2;
            }
            return 0;
        }

        /*
         * Loose catch block
         * Enabled aggressive block sorting
         * Enabled unnecessary exception pruning
         * Enabled aggressive exception aggregation
         * Lifted jumps to return sites
         */
        void slowPath(Subscriber<? super R> subscriber, Iterator<? extends R> iterator) {
            do {
                boolean bl;
                if (this.cancelled) {
                    return;
                }
                R r = iterator.next();
                subscriber.onNext(r);
                if (this.cancelled) {
                    return;
                }
                if (bl = iterator.hasNext()) continue;
                break;
            } while (true);
            subscriber.onComplete();
            return;
            catch (Throwable throwable) {
                Exceptions.throwIfFatal(throwable);
                subscriber.onError(throwable);
                return;
            }
            catch (Throwable throwable) {
                Exceptions.throwIfFatal(throwable);
                subscriber.onError(throwable);
                return;
            }
        }
    }

}

