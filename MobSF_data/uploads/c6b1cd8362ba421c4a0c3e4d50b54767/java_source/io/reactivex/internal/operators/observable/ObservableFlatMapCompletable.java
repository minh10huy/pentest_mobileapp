/*
 * Decompiled with CFR 0_132.
 */
package io.reactivex.internal.operators.observable;

import io.reactivex.CompletableObserver;
import io.reactivex.CompletableSource;
import io.reactivex.ObservableSource;
import io.reactivex.Observer;
import io.reactivex.annotations.Nullable;
import io.reactivex.disposables.CompositeDisposable;
import io.reactivex.disposables.Disposable;
import io.reactivex.exceptions.Exceptions;
import io.reactivex.functions.Function;
import io.reactivex.internal.disposables.DisposableHelper;
import io.reactivex.internal.functions.ObjectHelper;
import io.reactivex.internal.observers.BasicIntQueueDisposable;
import io.reactivex.internal.operators.observable.AbstractObservableWithUpstream;
import io.reactivex.internal.util.AtomicThrowable;
import io.reactivex.plugins.RxJavaPlugins;
import java.util.concurrent.atomic.AtomicReference;

public final class ObservableFlatMapCompletable<T>
extends AbstractObservableWithUpstream<T, T> {
    final boolean delayErrors;
    final Function<? super T, ? extends CompletableSource> mapper;

    public ObservableFlatMapCompletable(ObservableSource<T> observableSource, Function<? super T, ? extends CompletableSource> function, boolean bl) {
        super(observableSource);
        this.mapper = function;
        this.delayErrors = bl;
    }

    @Override
    protected void subscribeActual(Observer<? super T> observer) {
        this.source.subscribe(new FlatMapCompletableMainObserver<T>(observer, this.mapper, this.delayErrors));
    }

    static final class FlatMapCompletableMainObserver<T>
    extends BasicIntQueueDisposable<T>
    implements Observer<T> {
        private static final long serialVersionUID = 8443155186132538303L;
        final Observer<? super T> actual;
        Disposable d;
        final boolean delayErrors;
        volatile boolean disposed;
        final AtomicThrowable errors;
        final Function<? super T, ? extends CompletableSource> mapper;
        final CompositeDisposable set;

        FlatMapCompletableMainObserver(Observer<? super T> observer, Function<? super T, ? extends CompletableSource> function, boolean bl) {
            this.actual = observer;
            this.mapper = function;
            this.delayErrors = bl;
            this.errors = new AtomicThrowable();
            this.set = new CompositeDisposable();
            this.lazySet(1);
        }

        @Override
        public void clear() {
        }

        @Override
        public void dispose() {
            this.disposed = true;
            this.d.dispose();
            this.set.dispose();
        }

        void innerComplete(FlatMapCompletableMainObserver<T> flatMapCompletableMainObserver) {
            this.set.delete(flatMapCompletableMainObserver);
            this.onComplete();
        }

        void innerError(FlatMapCompletableMainObserver<T> flatMapCompletableMainObserver, Throwable throwable) {
            this.set.delete(flatMapCompletableMainObserver);
            this.onError(throwable);
        }

        @Override
        public boolean isDisposed() {
            return this.d.isDisposed();
        }

        @Override
        public boolean isEmpty() {
            return true;
        }

        @Override
        public void onComplete() {
            if (this.decrementAndGet() == 0) {
                Throwable throwable = this.errors.terminate();
                if (throwable != null) {
                    this.actual.onError(throwable);
                    return;
                }
                this.actual.onComplete();
            }
        }

        @Override
        public void onError(Throwable throwable) {
            if (this.errors.addThrowable(throwable)) {
                if (this.delayErrors) {
                    if (this.decrementAndGet() == 0) {
                        throwable = this.errors.terminate();
                        this.actual.onError(throwable);
                        return;
                    }
                } else {
                    this.dispose();
                    if (this.getAndSet(0) > 0) {
                        throwable = this.errors.terminate();
                        this.actual.onError(throwable);
                        return;
                    }
                }
            } else {
                RxJavaPlugins.onError(throwable);
            }
        }

        @Override
        public void onNext(T object) {
            try {
                object = ObjectHelper.requireNonNull(this.mapper.apply(object), "The mapper returned a null CompletableSource");
            }
            catch (Throwable throwable) {
                Exceptions.throwIfFatal(throwable);
                this.d.dispose();
                this.onError(throwable);
                return;
            }
            this.getAndIncrement();
            InnerObserver innerObserver = new InnerObserver();
            if (!this.disposed && this.set.add(innerObserver)) {
                object.subscribe(innerObserver);
            }
        }

        @Override
        public void onSubscribe(Disposable disposable) {
            if (DisposableHelper.validate(this.d, disposable)) {
                this.d = disposable;
                this.actual.onSubscribe(this);
            }
        }

        @Nullable
        @Override
        public T poll() throws Exception {
            return null;
        }

        @Override
        public int requestFusion(int n) {
            return n & 2;
        }

        final class InnerObserver
        extends AtomicReference<Disposable>
        implements CompletableObserver,
        Disposable {
            private static final long serialVersionUID = 8606673141535671828L;

            InnerObserver() {
            }

            @Override
            public void dispose() {
                DisposableHelper.dispose(this);
            }

            @Override
            public boolean isDisposed() {
                return DisposableHelper.isDisposed((Disposable)this.get());
            }

            @Override
            public void onComplete() {
                FlatMapCompletableMainObserver.this.innerComplete(this);
            }

            @Override
            public void onError(Throwable throwable) {
                FlatMapCompletableMainObserver.this.innerError(this, throwable);
            }

            @Override
            public void onSubscribe(Disposable disposable) {
                DisposableHelper.setOnce(this, disposable);
            }
        }

    }

}

