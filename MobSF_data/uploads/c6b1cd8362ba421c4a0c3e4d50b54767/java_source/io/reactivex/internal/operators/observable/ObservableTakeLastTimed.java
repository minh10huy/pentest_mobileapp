/*
 * Decompiled with CFR 0_132.
 */
package io.reactivex.internal.operators.observable;

import io.reactivex.ObservableSource;
import io.reactivex.Observer;
import io.reactivex.Scheduler;
import io.reactivex.disposables.Disposable;
import io.reactivex.internal.disposables.DisposableHelper;
import io.reactivex.internal.operators.observable.AbstractObservableWithUpstream;
import io.reactivex.internal.queue.SpscLinkedArrayQueue;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicBoolean;

public final class ObservableTakeLastTimed<T>
extends AbstractObservableWithUpstream<T, T> {
    final int bufferSize;
    final long count;
    final boolean delayError;
    final Scheduler scheduler;
    final long time;
    final TimeUnit unit;

    public ObservableTakeLastTimed(ObservableSource<T> observableSource, long l, long l2, TimeUnit timeUnit, Scheduler scheduler, int n, boolean bl) {
        super(observableSource);
        this.count = l;
        this.time = l2;
        this.unit = timeUnit;
        this.scheduler = scheduler;
        this.bufferSize = n;
        this.delayError = bl;
    }

    @Override
    public void subscribeActual(Observer<? super T> observer) {
        this.source.subscribe(new TakeLastTimedObserver<T>(observer, this.count, this.time, this.unit, this.scheduler, this.bufferSize, this.delayError));
    }

    static final class TakeLastTimedObserver<T>
    extends AtomicBoolean
    implements Observer<T>,
    Disposable {
        private static final long serialVersionUID = -5677354903406201275L;
        final Observer<? super T> actual;
        volatile boolean cancelled;
        final long count;
        Disposable d;
        final boolean delayError;
        Throwable error;
        final SpscLinkedArrayQueue<Object> queue;
        final Scheduler scheduler;
        final long time;
        final TimeUnit unit;

        TakeLastTimedObserver(Observer<? super T> observer, long l, long l2, TimeUnit timeUnit, Scheduler scheduler, int n, boolean bl) {
            this.actual = observer;
            this.count = l;
            this.time = l2;
            this.unit = timeUnit;
            this.scheduler = scheduler;
            this.queue = new SpscLinkedArrayQueue(n);
            this.delayError = bl;
        }

        @Override
        public void dispose() {
            if (!this.cancelled) {
                this.cancelled = true;
                this.d.dispose();
                if (this.compareAndSet(false, true)) {
                    this.queue.clear();
                }
            }
        }

        void drain() {
            if (!this.compareAndSet(false, true)) {
                return;
            }
            Observer<Object> observer = this.actual;
            Object object = this.queue;
            boolean bl = this.delayError;
            do {
                Object object2;
                if (this.cancelled) {
                    object.clear();
                    return;
                }
                if (!bl && (object2 = this.error) != null) {
                    object.clear();
                    observer.onError((Throwable)object2);
                    return;
                }
                object2 = object.poll();
                boolean bl2 = object2 == null;
                if (bl2) {
                    object = this.error;
                    if (object != null) {
                        observer.onError((Throwable)object);
                        return;
                    }
                    observer.onComplete();
                    return;
                }
                Object object3 = object.poll();
                if ((Long)object2 < this.scheduler.now(this.unit) - this.time) continue;
                observer.onNext(object3);
            } while (true);
        }

        @Override
        public boolean isDisposed() {
            return this.cancelled;
        }

        @Override
        public void onComplete() {
            this.drain();
        }

        @Override
        public void onError(Throwable throwable) {
            this.error = throwable;
            this.drain();
        }

        @Override
        public void onNext(T t) {
            SpscLinkedArrayQueue<Object> spscLinkedArrayQueue = this.queue;
            long l = this.scheduler.now(this.unit);
            long l2 = this.time;
            long l3 = this.count;
            boolean bl = l3 == Long.MAX_VALUE;
            spscLinkedArrayQueue.offer(l, t);
            while (!spscLinkedArrayQueue.isEmpty() && ((Long)spscLinkedArrayQueue.peek() <= l - l2 || !bl && (long)(spscLinkedArrayQueue.size() >> 1) > l3)) {
                spscLinkedArrayQueue.poll();
                spscLinkedArrayQueue.poll();
            }
        }

        @Override
        public void onSubscribe(Disposable disposable) {
            if (DisposableHelper.validate(this.d, disposable)) {
                this.d = disposable;
                this.actual.onSubscribe(this);
            }
        }
    }

}

