/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  org.reactivestreams.Subscriber
 *  org.reactivestreams.Subscription
 */
package io.reactivex.internal.operators.flowable;

import io.reactivex.Flowable;
import io.reactivex.FlowableSubscriber;
import io.reactivex.Scheduler;
import io.reactivex.disposables.Disposable;
import io.reactivex.exceptions.MissingBackpressureException;
import io.reactivex.internal.disposables.DisposableHelper;
import io.reactivex.internal.disposables.SequentialDisposable;
import io.reactivex.internal.operators.flowable.AbstractFlowableWithUpstream;
import io.reactivex.internal.subscriptions.SubscriptionHelper;
import io.reactivex.internal.util.BackpressureHelper;
import io.reactivex.plugins.RxJavaPlugins;
import io.reactivex.subscribers.SerializedSubscriber;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicLong;
import java.util.concurrent.atomic.AtomicReference;
import org.reactivestreams.Subscriber;
import org.reactivestreams.Subscription;

public final class FlowableDebounceTimed<T>
extends AbstractFlowableWithUpstream<T, T> {
    final Scheduler scheduler;
    final long timeout;
    final TimeUnit unit;

    public FlowableDebounceTimed(Flowable<T> flowable, long l, TimeUnit timeUnit, Scheduler scheduler) {
        super(flowable);
        this.timeout = l;
        this.unit = timeUnit;
        this.scheduler = scheduler;
    }

    @Override
    protected void subscribeActual(Subscriber<? super T> subscriber) {
        this.source.subscribe(new DebounceTimedSubscriber<T>(new SerializedSubscriber<T>(subscriber), this.timeout, this.unit, this.scheduler.createWorker()));
    }

    static final class DebounceEmitter<T>
    extends AtomicReference<Disposable>
    implements Runnable,
    Disposable {
        private static final long serialVersionUID = 6812032969491025141L;
        final long idx;
        final AtomicBoolean once = new AtomicBoolean();
        final DebounceTimedSubscriber<T> parent;
        final T value;

        DebounceEmitter(T t, long l, DebounceTimedSubscriber<T> debounceTimedSubscriber) {
            this.value = t;
            this.idx = l;
            this.parent = debounceTimedSubscriber;
        }

        @Override
        public void dispose() {
            DisposableHelper.dispose(this);
        }

        void emit() {
            if (this.once.compareAndSet(false, true)) {
                this.parent.emit(this.idx, this.value, this);
            }
        }

        @Override
        public boolean isDisposed() {
            if (this.get() == DisposableHelper.DISPOSED) {
                return true;
            }
            return false;
        }

        @Override
        public void run() {
            this.emit();
        }

        public void setResource(Disposable disposable) {
            DisposableHelper.replace(this, disposable);
        }
    }

    static final class DebounceTimedSubscriber<T>
    extends AtomicLong
    implements FlowableSubscriber<T>,
    Subscription {
        private static final long serialVersionUID = -9102637559663639004L;
        final Subscriber<? super T> actual;
        boolean done;
        volatile long index;
        Subscription s;
        final long timeout;
        final SequentialDisposable timer = new SequentialDisposable();
        final TimeUnit unit;
        final Scheduler.Worker worker;

        DebounceTimedSubscriber(Subscriber<? super T> subscriber, long l, TimeUnit timeUnit, Scheduler.Worker worker) {
            this.actual = subscriber;
            this.timeout = l;
            this.unit = timeUnit;
            this.worker = worker;
        }

        public void cancel() {
            this.s.cancel();
            this.worker.dispose();
        }

        void emit(long l, T t, DebounceEmitter<T> debounceEmitter) {
            if (l == this.index) {
                if (this.get() != 0L) {
                    this.actual.onNext(t);
                    BackpressureHelper.produced(this, 1L);
                    debounceEmitter.dispose();
                    return;
                }
                this.cancel();
                this.actual.onError((Throwable)new MissingBackpressureException("Could not deliver value due to lack of requests"));
            }
        }

        public void onComplete() {
            if (this.done) {
                return;
            }
            this.done = true;
            Disposable disposable = (Disposable)this.timer.get();
            if (!DisposableHelper.isDisposed(disposable)) {
                if ((disposable = (DebounceEmitter)disposable) != null) {
                    disposable.emit();
                }
                DisposableHelper.dispose(this.timer);
                this.actual.onComplete();
                this.worker.dispose();
            }
        }

        public void onError(Throwable throwable) {
            if (this.done) {
                RxJavaPlugins.onError(throwable);
                return;
            }
            this.done = true;
            this.actual.onError(throwable);
            this.worker.dispose();
        }

        public void onNext(T object) {
            long l;
            if (this.done) {
                return;
            }
            this.index = l = this.index + 1L;
            Disposable disposable = (Disposable)this.timer.get();
            if (disposable != null) {
                disposable.dispose();
            }
            if (this.timer.replace((Disposable)(object = new DebounceEmitter<T>(object, l, this)))) {
                object.setResource(this.worker.schedule((Runnable)object, this.timeout, this.unit));
            }
        }

        @Override
        public void onSubscribe(Subscription subscription) {
            if (SubscriptionHelper.validate(this.s, subscription)) {
                this.s = subscription;
                this.actual.onSubscribe((Subscription)this);
                subscription.request(Long.MAX_VALUE);
            }
        }

        public void request(long l) {
            if (SubscriptionHelper.validate(l)) {
                BackpressureHelper.add(this, l);
            }
        }
    }

}

