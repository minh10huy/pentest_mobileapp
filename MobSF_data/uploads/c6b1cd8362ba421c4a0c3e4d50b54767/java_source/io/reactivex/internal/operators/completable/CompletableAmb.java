/*
 * Decompiled with CFR 0_132.
 */
package io.reactivex.internal.operators.completable;

import io.reactivex.Completable;
import io.reactivex.CompletableObserver;
import io.reactivex.CompletableSource;
import io.reactivex.disposables.CompositeDisposable;
import io.reactivex.disposables.Disposable;
import io.reactivex.exceptions.Exceptions;
import io.reactivex.internal.disposables.EmptyDisposable;
import io.reactivex.plugins.RxJavaPlugins;
import java.util.Iterator;
import java.util.concurrent.atomic.AtomicBoolean;

public final class CompletableAmb
extends Completable {
    private final CompletableSource[] sources;
    private final Iterable<? extends CompletableSource> sourcesIterable;

    public CompletableAmb(CompletableSource[] arrcompletableSource, Iterable<? extends CompletableSource> iterable) {
        this.sources = arrcompletableSource;
        this.sourcesIterable = iterable;
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @Override
    public void subscribeActual(CompletableObserver completableObserver) {
        Object object;
        int n;
        int n2;
        Object object2;
        Object object3;
        CompletableSource[] arrcompletableSource = this.sources;
        if (arrcompletableSource != null) {
            n2 = arrcompletableSource.length;
        } else {
            object = new CompletableSource[8];
            try {
                object2 = this.sourcesIterable.iterator();
                n = 0;
            }
            catch (Throwable throwable) {
                Exceptions.throwIfFatal(throwable);
                EmptyDisposable.error(throwable, completableObserver);
                return;
            }
            do {
                void var5_7;
                Object object4 = object;
                n2 = n;
                if (!object2.hasNext()) break;
                object3 = (CompletableSource)object2.next();
                if (object3 == null) {
                    EmptyDisposable.error((Throwable)new NullPointerException("One of the sources is null"), completableObserver);
                    return;
                }
                Object object5 = object;
                if (n == ((CompletableSource[])object).length) {
                    CompletableSource[] arrcompletableSource2 = new CompletableSource[(n >> 2) + n];
                    System.arraycopy(object, 0, arrcompletableSource2, 0, n);
                }
                var5_7[n] = object3;
                ++n;
                object = var5_7;
            } while (true);
        }
        object = new CompositeDisposable();
        completableObserver.onSubscribe((Disposable)object);
        object2 = new AtomicBoolean();
        object3 = new Amb((AtomicBoolean)object2, (CompositeDisposable)object, completableObserver);
        for (n = 0; n < n2; ++n) {
            void var5_8;
            void var8_16 = var5_8[n];
            if (object.isDisposed()) {
                return;
            }
            if (var8_16 == null) {
                NullPointerException nullPointerException = new NullPointerException("One of the sources is null");
                if (object2.compareAndSet(false, true)) {
                    object.dispose();
                    completableObserver.onError(nullPointerException);
                    return;
                }
                RxJavaPlugins.onError(nullPointerException);
                return;
            }
            var8_16.subscribe((CompletableObserver)object3);
        }
        if (n2 == 0) {
            completableObserver.onComplete();
        }
    }

    static final class Amb
    implements CompletableObserver {
        private final AtomicBoolean once;
        private final CompletableObserver s;
        private final CompositeDisposable set;

        Amb(AtomicBoolean atomicBoolean, CompositeDisposable compositeDisposable, CompletableObserver completableObserver) {
            this.once = atomicBoolean;
            this.set = compositeDisposable;
            this.s = completableObserver;
        }

        @Override
        public void onComplete() {
            if (this.once.compareAndSet(false, true)) {
                this.set.dispose();
                this.s.onComplete();
            }
        }

        @Override
        public void onError(Throwable throwable) {
            if (this.once.compareAndSet(false, true)) {
                this.set.dispose();
                this.s.onError(throwable);
                return;
            }
            RxJavaPlugins.onError(throwable);
        }

        @Override
        public void onSubscribe(Disposable disposable) {
            this.set.add(disposable);
        }
    }

}

