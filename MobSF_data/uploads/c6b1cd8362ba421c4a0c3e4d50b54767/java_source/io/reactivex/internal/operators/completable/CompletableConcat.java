/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  org.reactivestreams.Subscriber
 *  org.reactivestreams.Subscription
 */
package io.reactivex.internal.operators.completable;

import io.reactivex.Completable;
import io.reactivex.CompletableObserver;
import io.reactivex.CompletableSource;
import io.reactivex.Flowable;
import io.reactivex.FlowableSubscriber;
import io.reactivex.disposables.Disposable;
import io.reactivex.exceptions.Exceptions;
import io.reactivex.exceptions.MissingBackpressureException;
import io.reactivex.internal.disposables.DisposableHelper;
import io.reactivex.internal.fuseable.QueueSubscription;
import io.reactivex.internal.fuseable.SimpleQueue;
import io.reactivex.internal.queue.SpscArrayQueue;
import io.reactivex.internal.queue.SpscLinkedArrayQueue;
import io.reactivex.internal.subscriptions.SubscriptionHelper;
import io.reactivex.plugins.RxJavaPlugins;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicReference;
import org.reactivestreams.Publisher;
import org.reactivestreams.Subscriber;
import org.reactivestreams.Subscription;

public final class CompletableConcat
extends Completable {
    final int prefetch;
    final Publisher<? extends CompletableSource> sources;

    public CompletableConcat(Publisher<? extends CompletableSource> publisher, int n) {
        this.sources = publisher;
        this.prefetch = n;
    }

    @Override
    public void subscribeActual(CompletableObserver completableObserver) {
        this.sources.subscribe(new CompletableConcatSubscriber(completableObserver, this.prefetch));
    }

    static final class CompletableConcatSubscriber
    extends AtomicInteger
    implements FlowableSubscriber<CompletableSource>,
    Disposable {
        private static final long serialVersionUID = 9032184911934499404L;
        volatile boolean active;
        final CompletableObserver actual;
        int consumed;
        volatile boolean done;
        final ConcatInnerObserver inner;
        final int limit;
        final AtomicBoolean once;
        final int prefetch;
        SimpleQueue<CompletableSource> queue;
        Subscription s;
        int sourceFused;

        CompletableConcatSubscriber(CompletableObserver completableObserver, int n) {
            this.actual = completableObserver;
            this.prefetch = n;
            this.inner = new ConcatInnerObserver(this);
            this.once = new AtomicBoolean();
            this.limit = n - (n >> 2);
        }

        @Override
        public void dispose() {
            this.s.cancel();
            DisposableHelper.dispose(this.inner);
        }

        void drain() {
            if (this.getAndIncrement() != 0) {
                return;
            }
            do {
                if (this.isDisposed()) {
                    return;
                }
                if (this.active) continue;
                boolean bl = this.done;
                try {
                    CompletableSource completableSource = this.queue.poll();
                    boolean bl2 = completableSource == null;
                    if (bl && bl2) {
                        if (this.once.compareAndSet(false, true)) {
                            this.actual.onComplete();
                        }
                        return;
                    }
                    if (bl2) continue;
                    this.active = true;
                    completableSource.subscribe(this.inner);
                    this.request();
                }
                catch (Throwable throwable) {
                    Exceptions.throwIfFatal(throwable);
                    this.innerError(throwable);
                    return;
                }
            } while (this.decrementAndGet() != 0);
        }

        void innerComplete() {
            this.active = false;
            this.drain();
        }

        void innerError(Throwable throwable) {
            if (this.once.compareAndSet(false, true)) {
                this.s.cancel();
                this.actual.onError(throwable);
                return;
            }
            RxJavaPlugins.onError(throwable);
        }

        @Override
        public boolean isDisposed() {
            return DisposableHelper.isDisposed((Disposable)this.inner.get());
        }

        public void onComplete() {
            this.done = true;
            this.drain();
        }

        public void onError(Throwable throwable) {
            if (this.once.compareAndSet(false, true)) {
                DisposableHelper.dispose(this.inner);
                this.actual.onError(throwable);
                return;
            }
            RxJavaPlugins.onError(throwable);
        }

        public void onNext(CompletableSource completableSource) {
            if (this.sourceFused == 0 && !this.queue.offer(completableSource)) {
                this.onError(new MissingBackpressureException());
                return;
            }
            this.drain();
        }

        @Override
        public void onSubscribe(Subscription subscription) {
            if (SubscriptionHelper.validate(this.s, subscription)) {
                this.s = subscription;
                long l = this.prefetch == Integer.MAX_VALUE ? Long.MAX_VALUE : (long)this.prefetch;
                if (subscription instanceof QueueSubscription) {
                    QueueSubscription queueSubscription = (QueueSubscription)subscription;
                    int n = queueSubscription.requestFusion(3);
                    if (n == 1) {
                        this.sourceFused = n;
                        this.queue = queueSubscription;
                        this.done = true;
                        this.actual.onSubscribe(this);
                        this.drain();
                        return;
                    }
                    if (n == 2) {
                        this.sourceFused = n;
                        this.queue = queueSubscription;
                        this.actual.onSubscribe(this);
                        subscription.request(l);
                        return;
                    }
                }
                this.queue = this.prefetch == Integer.MAX_VALUE ? new SpscLinkedArrayQueue<CompletableSource>(Flowable.bufferSize()) : new SpscArrayQueue<CompletableSource>(this.prefetch);
                this.actual.onSubscribe(this);
                subscription.request(l);
            }
        }

        void request() {
            if (this.sourceFused != 1) {
                int n = this.consumed + 1;
                if (n == this.limit) {
                    this.consumed = 0;
                    this.s.request((long)n);
                    return;
                }
                this.consumed = n;
            }
        }

        static final class ConcatInnerObserver
        extends AtomicReference<Disposable>
        implements CompletableObserver {
            private static final long serialVersionUID = -5454794857847146511L;
            final CompletableConcatSubscriber parent;

            ConcatInnerObserver(CompletableConcatSubscriber completableConcatSubscriber) {
                this.parent = completableConcatSubscriber;
            }

            @Override
            public void onComplete() {
                this.parent.innerComplete();
            }

            @Override
            public void onError(Throwable throwable) {
                this.parent.innerError(throwable);
            }

            @Override
            public void onSubscribe(Disposable disposable) {
                DisposableHelper.replace(this, disposable);
            }
        }

    }

}

