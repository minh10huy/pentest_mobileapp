/*
 * Decompiled with CFR 0_132.
 */
package io.reactivex.internal.operators.observable;

import io.reactivex.ObservableSource;
import io.reactivex.Observer;
import io.reactivex.disposables.Disposable;
import io.reactivex.exceptions.CompositeException;
import io.reactivex.exceptions.Exceptions;
import io.reactivex.functions.Function;
import io.reactivex.internal.disposables.SequentialDisposable;
import io.reactivex.internal.operators.observable.AbstractObservableWithUpstream;
import io.reactivex.plugins.RxJavaPlugins;

public final class ObservableOnErrorNext<T>
extends AbstractObservableWithUpstream<T, T> {
    final boolean allowFatal;
    final Function<? super Throwable, ? extends ObservableSource<? extends T>> nextSupplier;

    public ObservableOnErrorNext(ObservableSource<T> observableSource, Function<? super Throwable, ? extends ObservableSource<? extends T>> function, boolean bl) {
        super(observableSource);
        this.nextSupplier = function;
        this.allowFatal = bl;
    }

    @Override
    public void subscribeActual(Observer<? super T> observer) {
        OnErrorNextObserver<? super T> onErrorNextObserver = new OnErrorNextObserver<T>(observer, this.nextSupplier, this.allowFatal);
        observer.onSubscribe(onErrorNextObserver.arbiter);
        this.source.subscribe(onErrorNextObserver);
    }

    static final class OnErrorNextObserver<T>
    implements Observer<T> {
        final Observer<? super T> actual;
        final boolean allowFatal;
        final SequentialDisposable arbiter;
        boolean done;
        final Function<? super Throwable, ? extends ObservableSource<? extends T>> nextSupplier;
        boolean once;

        OnErrorNextObserver(Observer<? super T> observer, Function<? super Throwable, ? extends ObservableSource<? extends T>> function, boolean bl) {
            this.actual = observer;
            this.nextSupplier = function;
            this.allowFatal = bl;
            this.arbiter = new SequentialDisposable();
        }

        @Override
        public void onComplete() {
            if (this.done) {
                return;
            }
            this.done = true;
            this.once = true;
            this.actual.onComplete();
        }

        @Override
        public void onError(Throwable throwable) {
            Object object;
            block5 : {
                if (this.once) {
                    if (this.done) {
                        RxJavaPlugins.onError(throwable);
                        return;
                    }
                    this.actual.onError(throwable);
                    return;
                }
                this.once = true;
                if (this.allowFatal && !(throwable instanceof Exception)) {
                    this.actual.onError(throwable);
                    return;
                }
                try {
                    object = this.nextSupplier.apply(throwable);
                    if (object != null) break block5;
                    object = new NullPointerException("Observable is null");
                }
                catch (Throwable throwable2) {
                    Exceptions.throwIfFatal(throwable2);
                    this.actual.onError(new CompositeException(throwable, throwable2));
                    return;
                }
                object.initCause(throwable);
                this.actual.onError((Throwable)object);
                return;
            }
            object.subscribe(this);
        }

        @Override
        public void onNext(T t) {
            if (this.done) {
                return;
            }
            this.actual.onNext(t);
        }

        @Override
        public void onSubscribe(Disposable disposable) {
            this.arbiter.replace(disposable);
        }
    }

}

