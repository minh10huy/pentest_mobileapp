/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  org.reactivestreams.Subscriber
 *  org.reactivestreams.Subscription
 */
package io.reactivex.internal.operators.flowable;

import io.reactivex.Flowable;
import io.reactivex.FlowableSubscriber;
import io.reactivex.Scheduler;
import io.reactivex.disposables.Disposable;
import io.reactivex.internal.disposables.SequentialDisposable;
import io.reactivex.internal.operators.flowable.AbstractFlowableWithUpstream;
import io.reactivex.internal.subscriptions.SubscriptionArbiter;
import io.reactivex.internal.subscriptions.SubscriptionHelper;
import io.reactivex.plugins.RxJavaPlugins;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;
import java.util.concurrent.atomic.AtomicLong;
import java.util.concurrent.atomic.AtomicReference;
import org.reactivestreams.Publisher;
import org.reactivestreams.Subscriber;
import org.reactivestreams.Subscription;

public final class FlowableTimeoutTimed<T>
extends AbstractFlowableWithUpstream<T, T> {
    final Publisher<? extends T> other;
    final Scheduler scheduler;
    final long timeout;
    final TimeUnit unit;

    public FlowableTimeoutTimed(Flowable<T> flowable, long l, TimeUnit timeUnit, Scheduler scheduler, Publisher<? extends T> publisher) {
        super(flowable);
        this.timeout = l;
        this.unit = timeUnit;
        this.scheduler = scheduler;
        this.other = publisher;
    }

    @Override
    protected void subscribeActual(Subscriber<? super T> subscriber) {
        if (this.other == null) {
            TimeoutSubscriber<T> timeoutSubscriber = new TimeoutSubscriber<T>(subscriber, this.timeout, this.unit, this.scheduler.createWorker());
            subscriber.onSubscribe(timeoutSubscriber);
            timeoutSubscriber.startTimeout(0L);
            this.source.subscribe(timeoutSubscriber);
            return;
        }
        TimeoutFallbackSubscriber<T> timeoutFallbackSubscriber = new TimeoutFallbackSubscriber<T>(subscriber, this.timeout, this.unit, this.scheduler.createWorker(), this.other);
        subscriber.onSubscribe(timeoutFallbackSubscriber);
        timeoutFallbackSubscriber.startTimeout(0L);
        this.source.subscribe(timeoutFallbackSubscriber);
    }

    static final class FallbackSubscriber<T>
    implements FlowableSubscriber<T> {
        final Subscriber<? super T> actual;
        final SubscriptionArbiter arbiter;

        FallbackSubscriber(Subscriber<? super T> subscriber, SubscriptionArbiter subscriptionArbiter) {
            this.actual = subscriber;
            this.arbiter = subscriptionArbiter;
        }

        public void onComplete() {
            this.actual.onComplete();
        }

        public void onError(Throwable throwable) {
            this.actual.onError(throwable);
        }

        public void onNext(T t) {
            this.actual.onNext(t);
        }

        @Override
        public void onSubscribe(Subscription subscription) {
            this.arbiter.setSubscription(subscription);
        }
    }

    static final class TimeoutFallbackSubscriber<T>
    extends SubscriptionArbiter
    implements FlowableSubscriber<T>,
    TimeoutSupport {
        private static final long serialVersionUID = 3764492702657003550L;
        final Subscriber<? super T> actual;
        long consumed;
        Publisher<? extends T> fallback;
        final AtomicLong index;
        final SequentialDisposable task;
        final long timeout;
        final TimeUnit unit;
        final AtomicReference<Subscription> upstream;
        final Scheduler.Worker worker;

        TimeoutFallbackSubscriber(Subscriber<? super T> subscriber, long l, TimeUnit timeUnit, Scheduler.Worker worker, Publisher<? extends T> publisher) {
            this.actual = subscriber;
            this.timeout = l;
            this.unit = timeUnit;
            this.worker = worker;
            this.fallback = publisher;
            this.task = new SequentialDisposable();
            this.upstream = new AtomicReference();
            this.index = new AtomicLong();
        }

        @Override
        public void cancel() {
            super.cancel();
            this.worker.dispose();
        }

        public void onComplete() {
            if (this.index.getAndSet(Long.MAX_VALUE) != Long.MAX_VALUE) {
                this.task.dispose();
                this.actual.onComplete();
                this.worker.dispose();
            }
        }

        public void onError(Throwable throwable) {
            if (this.index.getAndSet(Long.MAX_VALUE) != Long.MAX_VALUE) {
                this.task.dispose();
                this.actual.onError(throwable);
                this.worker.dispose();
                return;
            }
            RxJavaPlugins.onError(throwable);
        }

        public void onNext(T t) {
            long l = this.index.get();
            if (l != Long.MAX_VALUE) {
                AtomicLong atomicLong = this.index;
                long l2 = l + 1L;
                if (!atomicLong.compareAndSet(l, l2)) {
                    return;
                }
                ((Disposable)this.task.get()).dispose();
                ++this.consumed;
                this.actual.onNext(t);
                this.startTimeout(l2);
                return;
            }
        }

        @Override
        public void onSubscribe(Subscription subscription) {
            if (SubscriptionHelper.setOnce(this.upstream, subscription)) {
                this.setSubscription(subscription);
            }
        }

        @Override
        public void onTimeout(long l) {
            if (this.index.compareAndSet(l, Long.MAX_VALUE)) {
                SubscriptionHelper.cancel(this.upstream);
                l = this.consumed;
                if (l != 0L) {
                    this.produced(l);
                }
                Publisher<? super T> publisher = this.fallback;
                this.fallback = null;
                publisher.subscribe(new FallbackSubscriber<T>(this.actual, this));
                this.worker.dispose();
            }
        }

        void startTimeout(long l) {
            this.task.replace(this.worker.schedule(new TimeoutTask(l, this), this.timeout, this.unit));
        }
    }

    static final class TimeoutSubscriber<T>
    extends AtomicLong
    implements FlowableSubscriber<T>,
    Subscription,
    TimeoutSupport {
        private static final long serialVersionUID = 3764492702657003550L;
        final Subscriber<? super T> actual;
        final AtomicLong requested;
        final SequentialDisposable task;
        final long timeout;
        final TimeUnit unit;
        final AtomicReference<Subscription> upstream;
        final Scheduler.Worker worker;

        TimeoutSubscriber(Subscriber<? super T> subscriber, long l, TimeUnit timeUnit, Scheduler.Worker worker) {
            this.actual = subscriber;
            this.timeout = l;
            this.unit = timeUnit;
            this.worker = worker;
            this.task = new SequentialDisposable();
            this.upstream = new AtomicReference();
            this.requested = new AtomicLong();
        }

        public void cancel() {
            SubscriptionHelper.cancel(this.upstream);
            this.worker.dispose();
        }

        public void onComplete() {
            if (this.getAndSet(Long.MAX_VALUE) != Long.MAX_VALUE) {
                this.task.dispose();
                this.actual.onComplete();
                this.worker.dispose();
            }
        }

        public void onError(Throwable throwable) {
            if (this.getAndSet(Long.MAX_VALUE) != Long.MAX_VALUE) {
                this.task.dispose();
                this.actual.onError(throwable);
                this.worker.dispose();
                return;
            }
            RxJavaPlugins.onError(throwable);
        }

        public void onNext(T t) {
            long l = this.get();
            if (l != Long.MAX_VALUE) {
                long l2 = l + 1L;
                if (!this.compareAndSet(l, l2)) {
                    return;
                }
                ((Disposable)this.task.get()).dispose();
                this.actual.onNext(t);
                this.startTimeout(l2);
                return;
            }
        }

        @Override
        public void onSubscribe(Subscription subscription) {
            SubscriptionHelper.deferredSetOnce(this.upstream, this.requested, subscription);
        }

        @Override
        public void onTimeout(long l) {
            if (this.compareAndSet(l, Long.MAX_VALUE)) {
                SubscriptionHelper.cancel(this.upstream);
                this.actual.onError((Throwable)new TimeoutException());
                this.worker.dispose();
            }
        }

        public void request(long l) {
            SubscriptionHelper.deferredRequest(this.upstream, this.requested, l);
        }

        void startTimeout(long l) {
            this.task.replace(this.worker.schedule(new TimeoutTask(l, this), this.timeout, this.unit));
        }
    }

    static interface TimeoutSupport {
        public void onTimeout(long var1);
    }

    static final class TimeoutTask
    implements Runnable {
        final long idx;
        final TimeoutSupport parent;

        TimeoutTask(long l, TimeoutSupport timeoutSupport) {
            this.idx = l;
            this.parent = timeoutSupport;
        }

        @Override
        public void run() {
            this.parent.onTimeout(this.idx);
        }
    }

}

