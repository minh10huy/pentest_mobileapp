/*
 * Decompiled with CFR 0_132.
 */
package io.reactivex.internal.operators.single;

import io.reactivex.Single;
import io.reactivex.SingleObserver;
import io.reactivex.SingleSource;
import io.reactivex.disposables.Disposable;
import io.reactivex.exceptions.CompositeException;
import io.reactivex.exceptions.Exceptions;
import io.reactivex.functions.Consumer;
import io.reactivex.functions.Function;
import io.reactivex.internal.disposables.DisposableHelper;
import io.reactivex.internal.disposables.EmptyDisposable;
import io.reactivex.internal.functions.ObjectHelper;
import io.reactivex.plugins.RxJavaPlugins;
import java.io.Serializable;
import java.util.concurrent.Callable;
import java.util.concurrent.atomic.AtomicReference;

public final class SingleUsing<T, U>
extends Single<T> {
    final Consumer<? super U> disposer;
    final boolean eager;
    final Callable<U> resourceSupplier;
    final Function<? super U, ? extends SingleSource<? extends T>> singleFunction;

    public SingleUsing(Callable<U> callable, Function<? super U, ? extends SingleSource<? extends T>> function, Consumer<? super U> consumer, boolean bl) {
        this.resourceSupplier = callable;
        this.singleFunction = function;
        this.disposer = consumer;
        this.eager = bl;
    }

    @Override
    protected void subscribeActual(SingleObserver<? super T> singleObserver) {
        U u;
        try {
            u = this.resourceSupplier.call();
        }
        catch (Throwable throwable) {
            Exceptions.throwIfFatal(throwable);
            EmptyDisposable.error(throwable, singleObserver);
            return;
        }
        try {
            SingleSource<T> singleSource = ObjectHelper.requireNonNull(this.singleFunction.apply(u), "The singleFunction returned a null SingleSource");
            singleSource.subscribe(new UsingSingleObserver<T, U>(singleObserver, (U)u, this.eager, this.disposer));
            return;
        }
        catch (Throwable throwable) {
            Exceptions.throwIfFatal(throwable);
            Throwable throwable2 = throwable;
            if (this.eager) {
                try {
                    this.disposer.accept(u);
                    throwable2 = throwable;
                }
                catch (Throwable throwable3) {
                    Exceptions.throwIfFatal(throwable3);
                    throwable2 = new CompositeException(throwable, throwable3);
                }
            }
            EmptyDisposable.error(throwable2, singleObserver);
            if (!this.eager) {
                try {
                    this.disposer.accept(u);
                    return;
                }
                catch (Throwable throwable4) {
                    Exceptions.throwIfFatal(throwable4);
                    RxJavaPlugins.onError(throwable4);
                }
            }
            return;
        }
    }

    static final class UsingSingleObserver<T, U>
    extends AtomicReference<Object>
    implements SingleObserver<T>,
    Disposable {
        private static final long serialVersionUID = -5331524057054083935L;
        final SingleObserver<? super T> actual;
        Disposable d;
        final Consumer<? super U> disposer;
        final boolean eager;

        UsingSingleObserver(SingleObserver<? super T> singleObserver, U u, boolean bl, Consumer<? super U> consumer) {
            super(u);
            this.actual = singleObserver;
            this.eager = bl;
            this.disposer = consumer;
        }

        @Override
        public void dispose() {
            this.d.dispose();
            this.d = DisposableHelper.DISPOSED;
            this.disposeAfter();
        }

        void disposeAfter() {
            UsingSingleObserver usingSingleObserver = this.getAndSet(this);
            if (usingSingleObserver != this) {
                try {
                    this.disposer.accept(usingSingleObserver);
                    return;
                }
                catch (Throwable throwable) {
                    Exceptions.throwIfFatal(throwable);
                    RxJavaPlugins.onError(throwable);
                }
            }
        }

        @Override
        public boolean isDisposed() {
            return this.d.isDisposed();
        }

        @Override
        public void onError(Throwable throwable) {
            this.d = DisposableHelper.DISPOSED;
            Serializable serializable = throwable;
            if (this.eager) {
                serializable = this.getAndSet(this);
                if (serializable != this) {
                    try {
                        this.disposer.accept(serializable);
                        serializable = throwable;
                    }
                    catch (Throwable throwable2) {
                        Exceptions.throwIfFatal(throwable2);
                        serializable = new CompositeException(throwable, throwable2);
                    }
                } else {
                    return;
                }
            }
            this.actual.onError((Throwable)serializable);
            if (!this.eager) {
                this.disposeAfter();
            }
        }

        @Override
        public void onSubscribe(Disposable disposable) {
            if (DisposableHelper.validate(this.d, disposable)) {
                this.d = disposable;
                this.actual.onSubscribe(this);
            }
        }

        @Override
        public void onSuccess(T t) {
            this.d = DisposableHelper.DISPOSED;
            if (this.eager) {
                UsingSingleObserver usingSingleObserver = this.getAndSet(this);
                if (usingSingleObserver != this) {
                    try {
                        this.disposer.accept(usingSingleObserver);
                    }
                    catch (Throwable throwable) {
                        Exceptions.throwIfFatal(throwable);
                        this.actual.onError(throwable);
                        return;
                    }
                } else {
                    return;
                }
            }
            this.actual.onSuccess(t);
            if (!this.eager) {
                this.disposeAfter();
            }
        }
    }

}

