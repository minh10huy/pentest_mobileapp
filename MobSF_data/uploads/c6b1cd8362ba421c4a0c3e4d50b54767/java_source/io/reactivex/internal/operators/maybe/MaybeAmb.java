/*
 * Decompiled with CFR 0_132.
 */
package io.reactivex.internal.operators.maybe;

import io.reactivex.Maybe;
import io.reactivex.MaybeObserver;
import io.reactivex.MaybeSource;
import io.reactivex.disposables.CompositeDisposable;
import io.reactivex.disposables.Disposable;
import io.reactivex.exceptions.Exceptions;
import io.reactivex.internal.disposables.EmptyDisposable;
import io.reactivex.plugins.RxJavaPlugins;
import java.util.Iterator;
import java.util.concurrent.atomic.AtomicBoolean;

public final class MaybeAmb<T>
extends Maybe<T> {
    private final MaybeSource<? extends T>[] sources;
    private final Iterable<? extends MaybeSource<? extends T>> sourcesIterable;

    public MaybeAmb(MaybeSource<? extends T>[] arrmaybeSource, Iterable<? extends MaybeSource<? extends T>> iterable) {
        this.sources = arrmaybeSource;
        this.sourcesIterable = iterable;
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @Override
    protected void subscribeActual(MaybeObserver<? super T> maybeObserver) {
        int n;
        int n2;
        Iterator<MaybeSource<T>> iterator;
        Object object;
        MaybeSource<? extends T>[] arrmaybeSource = this.sources;
        int n3 = 0;
        if (arrmaybeSource != null) {
            n2 = arrmaybeSource.length;
        } else {
            object = new MaybeSource[8];
            try {
                iterator = this.sourcesIterable.iterator();
                n = 0;
            }
            catch (Throwable throwable) {
                Exceptions.throwIfFatal(throwable);
                EmptyDisposable.error(throwable, maybeObserver);
                return;
            }
            do {
                void var6_7;
                Object object2 = object;
                n2 = n;
                if (!iterator.hasNext()) break;
                MaybeSource<? extends T> maybeSource = iterator.next();
                if (maybeSource == null) {
                    EmptyDisposable.error((Throwable)new NullPointerException("One of the sources is null"), maybeObserver);
                    return;
                }
                Object object3 = object;
                if (n == ((Object)object).length) {
                    MaybeSource[] arrmaybeSource2 = new MaybeSource[(n >> 2) + n];
                    System.arraycopy(object, 0, arrmaybeSource2, 0, n);
                }
                var6_7[n] = maybeSource;
                ++n;
                object = var6_7;
            } while (true);
        }
        object = new AmbMaybeObserver<T>(maybeObserver);
        maybeObserver.onSubscribe((Disposable)object);
        for (n = n3; n < n2; ++n) {
            void var6_8;
            iterator = var6_8[n];
            if (object.isDisposed()) {
                return;
            }
            if (iterator == null) {
                object.onError(new NullPointerException("One of the MaybeSources is null"));
                return;
            }
            iterator.subscribe((MaybeObserver<MaybeSource<T>>)object);
        }
        if (n2 == 0) {
            maybeObserver.onComplete();
        }
    }

    static final class AmbMaybeObserver<T>
    extends AtomicBoolean
    implements MaybeObserver<T>,
    Disposable {
        private static final long serialVersionUID = -7044685185359438206L;
        final MaybeObserver<? super T> actual;
        final CompositeDisposable set;

        AmbMaybeObserver(MaybeObserver<? super T> maybeObserver) {
            this.actual = maybeObserver;
            this.set = new CompositeDisposable();
        }

        @Override
        public void dispose() {
            if (this.compareAndSet(false, true)) {
                this.set.dispose();
            }
        }

        @Override
        public boolean isDisposed() {
            return this.get();
        }

        @Override
        public void onComplete() {
            if (this.compareAndSet(false, true)) {
                this.set.dispose();
                this.actual.onComplete();
            }
        }

        @Override
        public void onError(Throwable throwable) {
            if (this.compareAndSet(false, true)) {
                this.set.dispose();
                this.actual.onError(throwable);
                return;
            }
            RxJavaPlugins.onError(throwable);
        }

        @Override
        public void onSubscribe(Disposable disposable) {
            this.set.add(disposable);
        }

        @Override
        public void onSuccess(T t) {
            if (this.compareAndSet(false, true)) {
                this.set.dispose();
                this.actual.onSuccess(t);
            }
        }
    }

}

