/*
 * Decompiled with CFR 0_132.
 */
package io.reactivex.internal.operators.observable;

import io.reactivex.Observable;
import io.reactivex.ObservableSource;
import io.reactivex.Observer;
import io.reactivex.disposables.Disposable;
import io.reactivex.internal.disposables.SequentialDisposable;
import io.reactivex.internal.functions.ObjectHelper;
import io.reactivex.internal.operators.observable.AbstractObservableWithUpstream;
import io.reactivex.internal.util.LinkedArrayList;
import io.reactivex.internal.util.NotificationLite;
import io.reactivex.plugins.RxJavaPlugins;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicReference;

public final class ObservableCache<T>
extends AbstractObservableWithUpstream<T, T> {
    final AtomicBoolean once;
    final CacheState<T> state;

    private ObservableCache(Observable<T> observable, CacheState<T> cacheState) {
        super(observable);
        this.state = cacheState;
        this.once = new AtomicBoolean();
    }

    public static <T> Observable<T> from(Observable<T> observable) {
        return ObservableCache.from(observable, 16);
    }

    public static <T> Observable<T> from(Observable<T> observable, int n) {
        ObjectHelper.verifyPositive(n, "capacityHint");
        return RxJavaPlugins.onAssembly(new ObservableCache<T>(observable, new CacheState<T>(observable, n)));
    }

    int cachedEventCount() {
        return this.state.size();
    }

    boolean hasObservers() {
        if (this.state.observers.get().length != 0) {
            return true;
        }
        return false;
    }

    boolean isConnected() {
        return this.state.isConnected;
    }

    @Override
    protected void subscribeActual(Observer<? super T> observer) {
        ReplayDisposable<T> replayDisposable = new ReplayDisposable<T>(observer, this.state);
        observer.onSubscribe(replayDisposable);
        this.state.addChild(replayDisposable);
        if (!this.once.get() && this.once.compareAndSet(false, true)) {
            this.state.connect();
        }
        replayDisposable.replay();
    }

    static final class CacheState<T>
    extends LinkedArrayList
    implements Observer<T> {
        static final ReplayDisposable[] EMPTY = new ReplayDisposable[0];
        static final ReplayDisposable[] TERMINATED = new ReplayDisposable[0];
        final SequentialDisposable connection;
        volatile boolean isConnected;
        final AtomicReference<ReplayDisposable<T>[]> observers;
        final Observable<? extends T> source;
        boolean sourceDone;

        CacheState(Observable<? extends T> observable, int n) {
            super(n);
            this.source = observable;
            this.observers = new AtomicReference<ReplayDisposable[]>(EMPTY);
            this.connection = new SequentialDisposable();
        }

        public boolean addChild(ReplayDisposable<T> replayDisposable) {
            ReplayDisposable<T>[] arrreplayDisposable;
            ReplayDisposable[] arrreplayDisposable2;
            do {
                if ((arrreplayDisposable = this.observers.get()) == TERMINATED) {
                    return false;
                }
                int n = arrreplayDisposable.length;
                arrreplayDisposable2 = new ReplayDisposable[n + 1];
                System.arraycopy(arrreplayDisposable, 0, arrreplayDisposable2, 0, n);
                arrreplayDisposable2[n] = replayDisposable;
            } while (!this.observers.compareAndSet(arrreplayDisposable, arrreplayDisposable2));
            return true;
        }

        public void connect() {
            this.source.subscribe(this);
            this.isConnected = true;
        }

        @Override
        public void onComplete() {
            if (!this.sourceDone) {
                this.sourceDone = true;
                this.add(NotificationLite.complete());
                this.connection.dispose();
                ReplayDisposable[] arrreplayDisposable = this.observers.getAndSet(TERMINATED);
                int n = arrreplayDisposable.length;
                for (int i = 0; i < n; ++i) {
                    arrreplayDisposable[i].replay();
                }
            }
        }

        @Override
        public void onError(Throwable arrreplayDisposable) {
            if (!this.sourceDone) {
                this.sourceDone = true;
                this.add(NotificationLite.error((Throwable)arrreplayDisposable));
                this.connection.dispose();
                arrreplayDisposable = this.observers.getAndSet(TERMINATED);
                int n = arrreplayDisposable.length;
                for (int i = 0; i < n; ++i) {
                    arrreplayDisposable[i].replay();
                }
            }
        }

        @Override
        public void onNext(T object) {
            if (!this.sourceDone) {
                this.add(NotificationLite.next(object));
                object = this.observers.get();
                int n = ((T)object).length;
                for (int i = 0; i < n; ++i) {
                    object[i].replay();
                }
            }
        }

        @Override
        public void onSubscribe(Disposable disposable) {
            this.connection.update(disposable);
        }

        public void removeChild(ReplayDisposable<T> replayDisposable) {
            ReplayDisposable[] arrreplayDisposable;
            ReplayDisposable<T>[] arrreplayDisposable2;
            do {
                int n;
                int n2;
                if ((n2 = (arrreplayDisposable2 = this.observers.get()).length) == 0) {
                    return;
                }
                int n3 = -1;
                int n4 = 0;
                do {
                    n = n3;
                    if (n4 >= n2) break;
                    if (arrreplayDisposable2[n4].equals(replayDisposable)) {
                        n = n4;
                        break;
                    }
                    ++n4;
                } while (true);
                if (n < 0) {
                    return;
                }
                if (n2 == 1) {
                    arrreplayDisposable = EMPTY;
                    continue;
                }
                arrreplayDisposable = new ReplayDisposable[n2 - 1];
                System.arraycopy(arrreplayDisposable2, 0, arrreplayDisposable, 0, n);
                System.arraycopy(arrreplayDisposable2, n + 1, arrreplayDisposable, n, n2 - n - 1);
            } while (!this.observers.compareAndSet(arrreplayDisposable2, arrreplayDisposable));
        }
    }

    static final class ReplayDisposable<T>
    extends AtomicInteger
    implements Disposable {
        private static final long serialVersionUID = 7058506693698832024L;
        volatile boolean cancelled;
        final Observer<? super T> child;
        Object[] currentBuffer;
        int currentIndexInBuffer;
        int index;
        final CacheState<T> state;

        ReplayDisposable(Observer<? super T> observer, CacheState<T> cacheState) {
            this.child = observer;
            this.state = cacheState;
        }

        @Override
        public void dispose() {
            if (!this.cancelled) {
                this.cancelled = true;
                this.state.removeChild(this);
            }
        }

        @Override
        public boolean isDisposed() {
            return this.cancelled;
        }

        public void replay() {
            int n;
            if (this.getAndIncrement() != 0) {
                return;
            }
            Observer<? super T> observer = this.child;
            int n2 = 1;
            do {
                if (this.cancelled) {
                    return;
                }
                int n3 = this.state.size();
                if (n3 != 0) {
                    Object[] arrobject;
                    int n4;
                    Object[] arrobject2 = arrobject = this.currentBuffer;
                    if (arrobject == null) {
                        this.currentBuffer = arrobject2 = this.state.head();
                    }
                    int n5 = arrobject2.length - 1;
                    n = this.currentIndexInBuffer;
                    for (n4 = this.index; n4 < n3; ++n4) {
                        if (this.cancelled) {
                            return;
                        }
                        arrobject = arrobject2;
                        int n6 = n;
                        if (n == n5) {
                            arrobject = (Object[])arrobject2[n5];
                            n6 = 0;
                        }
                        if (NotificationLite.accept(arrobject[n6], observer)) {
                            return;
                        }
                        n = n6 + 1;
                        arrobject2 = arrobject;
                    }
                    if (this.cancelled) {
                        return;
                    }
                    this.index = n4;
                    this.currentIndexInBuffer = n;
                    this.currentBuffer = arrobject2;
                }
                n2 = n = this.addAndGet(- n2);
            } while (n != 0);
        }
    }

}

