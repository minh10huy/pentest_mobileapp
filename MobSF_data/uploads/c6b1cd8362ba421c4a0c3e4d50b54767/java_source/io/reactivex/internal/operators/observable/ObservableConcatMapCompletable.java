/*
 * Decompiled with CFR 0_132.
 */
package io.reactivex.internal.operators.observable;

import io.reactivex.Completable;
import io.reactivex.CompletableObserver;
import io.reactivex.CompletableSource;
import io.reactivex.ObservableSource;
import io.reactivex.Observer;
import io.reactivex.disposables.Disposable;
import io.reactivex.exceptions.Exceptions;
import io.reactivex.functions.Function;
import io.reactivex.internal.disposables.DisposableHelper;
import io.reactivex.internal.functions.ObjectHelper;
import io.reactivex.internal.fuseable.QueueDisposable;
import io.reactivex.internal.fuseable.SimpleQueue;
import io.reactivex.internal.queue.SpscLinkedArrayQueue;
import io.reactivex.plugins.RxJavaPlugins;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicReference;

public final class ObservableConcatMapCompletable<T>
extends Completable {
    final int bufferSize;
    final Function<? super T, ? extends CompletableSource> mapper;
    final ObservableSource<T> source;

    public ObservableConcatMapCompletable(ObservableSource<T> observableSource, Function<? super T, ? extends CompletableSource> function, int n) {
        this.source = observableSource;
        this.mapper = function;
        this.bufferSize = Math.max(8, n);
    }

    @Override
    public void subscribeActual(CompletableObserver completableObserver) {
        this.source.subscribe(new SourceObserver<T>(completableObserver, this.mapper, this.bufferSize));
    }

    static final class SourceObserver<T>
    extends AtomicInteger
    implements Observer<T>,
    Disposable {
        private static final long serialVersionUID = 6893587405571511048L;
        volatile boolean active;
        final CompletableObserver actual;
        final int bufferSize;
        volatile boolean disposed;
        volatile boolean done;
        final InnerObserver inner;
        final Function<? super T, ? extends CompletableSource> mapper;
        SimpleQueue<T> queue;
        Disposable s;
        int sourceMode;

        SourceObserver(CompletableObserver completableObserver, Function<? super T, ? extends CompletableSource> function, int n) {
            this.actual = completableObserver;
            this.mapper = function;
            this.bufferSize = n;
            this.inner = new InnerObserver(completableObserver, this);
        }

        @Override
        public void dispose() {
            this.disposed = true;
            this.inner.dispose();
            this.s.dispose();
            if (this.getAndIncrement() == 0) {
                this.queue.clear();
            }
        }

        void drain() {
            if (this.getAndIncrement() != 0) {
                return;
            }
            do {
                Object object;
                if (this.disposed) {
                    this.queue.clear();
                    return;
                }
                if (this.active) continue;
                boolean bl = this.done;
                try {
                    object = this.queue.poll();
                    boolean bl2 = object == null;
                    if (bl && bl2) {
                        this.disposed = true;
                        this.actual.onComplete();
                        return;
                    }
                    if (bl2) continue;
                }
                catch (Throwable throwable) {
                    Exceptions.throwIfFatal(throwable);
                    this.dispose();
                    this.queue.clear();
                    this.actual.onError(throwable);
                    return;
                }
                try {
                    object = ObjectHelper.requireNonNull(this.mapper.apply(object), "The mapper returned a null CompletableSource");
                    this.active = true;
                    object.subscribe(this.inner);
                }
                catch (Throwable throwable) {
                    Exceptions.throwIfFatal(throwable);
                    this.dispose();
                    this.queue.clear();
                    this.actual.onError(throwable);
                    return;
                }
            } while (this.decrementAndGet() != 0);
        }

        void innerComplete() {
            this.active = false;
            this.drain();
        }

        @Override
        public boolean isDisposed() {
            return this.disposed;
        }

        @Override
        public void onComplete() {
            if (this.done) {
                return;
            }
            this.done = true;
            this.drain();
        }

        @Override
        public void onError(Throwable throwable) {
            if (this.done) {
                RxJavaPlugins.onError(throwable);
                return;
            }
            this.done = true;
            this.dispose();
            this.actual.onError(throwable);
        }

        @Override
        public void onNext(T t) {
            if (this.done) {
                return;
            }
            if (this.sourceMode == 0) {
                this.queue.offer(t);
            }
            this.drain();
        }

        @Override
        public void onSubscribe(Disposable disposable) {
            if (DisposableHelper.validate(this.s, disposable)) {
                this.s = disposable;
                if (disposable instanceof QueueDisposable) {
                    int n = (disposable = (QueueDisposable)disposable).requestFusion(3);
                    if (n == 1) {
                        this.sourceMode = n;
                        this.queue = disposable;
                        this.done = true;
                        this.actual.onSubscribe(this);
                        this.drain();
                        return;
                    }
                    if (n == 2) {
                        this.sourceMode = n;
                        this.queue = disposable;
                        this.actual.onSubscribe(this);
                        return;
                    }
                }
                this.queue = new SpscLinkedArrayQueue(this.bufferSize);
                this.actual.onSubscribe(this);
            }
        }

        static final class InnerObserver
        extends AtomicReference<Disposable>
        implements CompletableObserver {
            private static final long serialVersionUID = -5987419458390772447L;
            final CompletableObserver actual;
            final SourceObserver<?> parent;

            InnerObserver(CompletableObserver completableObserver, SourceObserver<?> sourceObserver) {
                this.actual = completableObserver;
                this.parent = sourceObserver;
            }

            void dispose() {
                DisposableHelper.dispose(this);
            }

            @Override
            public void onComplete() {
                this.parent.innerComplete();
            }

            @Override
            public void onError(Throwable throwable) {
                this.parent.dispose();
                this.actual.onError(throwable);
            }

            @Override
            public void onSubscribe(Disposable disposable) {
                DisposableHelper.set(this, disposable);
            }
        }

    }

}

