/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  org.reactivestreams.Subscriber
 *  org.reactivestreams.Subscription
 */
package io.reactivex.internal.operators.flowable;

import io.reactivex.Flowable;
import io.reactivex.FlowableSubscriber;
import io.reactivex.exceptions.Exceptions;
import io.reactivex.functions.BiFunction;
import io.reactivex.internal.functions.ObjectHelper;
import io.reactivex.internal.fuseable.SimplePlainQueue;
import io.reactivex.internal.operators.flowable.AbstractFlowableWithUpstream;
import io.reactivex.internal.queue.SpscArrayQueue;
import io.reactivex.internal.subscriptions.EmptySubscription;
import io.reactivex.internal.subscriptions.SubscriptionHelper;
import io.reactivex.internal.util.BackpressureHelper;
import io.reactivex.plugins.RxJavaPlugins;
import java.util.concurrent.Callable;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
import org.reactivestreams.Subscriber;
import org.reactivestreams.Subscription;

public final class FlowableScanSeed<T, R>
extends AbstractFlowableWithUpstream<T, R> {
    final BiFunction<R, ? super T, R> accumulator;
    final Callable<R> seedSupplier;

    public FlowableScanSeed(Flowable<T> flowable, Callable<R> callable, BiFunction<R, ? super T, R> biFunction) {
        super(flowable);
        this.accumulator = biFunction;
        this.seedSupplier = callable;
    }

    @Override
    protected void subscribeActual(Subscriber<? super R> subscriber) {
        try {
            R r = ObjectHelper.requireNonNull(this.seedSupplier.call(), "The seed supplied is null");
            this.source.subscribe(new ScanSeedSubscriber<T, R>(subscriber, (BiFunction<? super R, ? super T, ? super R>)this.accumulator, (R)r, FlowableScanSeed.bufferSize()));
            return;
        }
        catch (Throwable throwable) {
            Exceptions.throwIfFatal(throwable);
            EmptySubscription.error(throwable, subscriber);
            return;
        }
    }

    static final class ScanSeedSubscriber<T, R>
    extends AtomicInteger
    implements FlowableSubscriber<T>,
    Subscription {
        private static final long serialVersionUID = -1776795561228106469L;
        final BiFunction<R, ? super T, R> accumulator;
        final Subscriber<? super R> actual;
        volatile boolean cancelled;
        int consumed;
        volatile boolean done;
        Throwable error;
        final int limit;
        final int prefetch;
        final SimplePlainQueue<R> queue;
        final AtomicLong requested;
        Subscription s;
        R value;

        ScanSeedSubscriber(Subscriber<? super R> subscriber, BiFunction<R, ? super T, R> biFunction, R r, int n) {
            this.actual = subscriber;
            this.accumulator = biFunction;
            this.value = r;
            this.prefetch = n;
            this.limit = n - (n >> 2);
            this.queue = new SpscArrayQueue<R>(n);
            this.queue.offer(r);
            this.requested = new AtomicLong();
        }

        public void cancel() {
            this.cancelled = true;
            this.s.cancel();
            if (this.getAndIncrement() == 0) {
                this.queue.clear();
            }
        }

        void drain() {
            int n;
            if (this.getAndIncrement() != 0) {
                return;
            }
            Subscriber<? super R> subscriber = this.actual;
            SimplePlainQueue<R> simplePlainQueue = this.queue;
            int n2 = this.limit;
            int n3 = this.consumed;
            int n4 = 1;
            do {
                long l;
                Throwable throwable;
                long l2 = this.requested.get();
                for (l = 0L; l != l2; ++l) {
                    if (this.cancelled) {
                        simplePlainQueue.clear();
                        return;
                    }
                    boolean bl = this.done;
                    if (bl && (throwable = this.error) != null) {
                        simplePlainQueue.clear();
                        subscriber.onError(throwable);
                        return;
                    }
                    throwable = simplePlainQueue.poll();
                    n = throwable == null ? 1 : 0;
                    if (bl && n != 0) {
                        subscriber.onComplete();
                        return;
                    }
                    if (n != 0) break;
                    subscriber.onNext((Object)throwable);
                    n3 = n = n3 + 1;
                    if (n != n2) continue;
                    this.s.request((long)n2);
                    n3 = 0;
                }
                if (l == l2 && this.done) {
                    throwable = this.error;
                    if (throwable != null) {
                        simplePlainQueue.clear();
                        subscriber.onError(throwable);
                        return;
                    }
                    if (simplePlainQueue.isEmpty()) {
                        subscriber.onComplete();
                        return;
                    }
                }
                if (l != 0L) {
                    BackpressureHelper.produced(this.requested, l);
                }
                this.consumed = n3;
                n4 = n = this.addAndGet(- n4);
            } while (n != 0);
        }

        public void onComplete() {
            if (this.done) {
                return;
            }
            this.done = true;
            this.drain();
        }

        public void onError(Throwable throwable) {
            if (this.done) {
                RxJavaPlugins.onError(throwable);
                return;
            }
            this.error = throwable;
            this.done = true;
            this.drain();
        }

        public void onNext(T object) {
            if (this.done) {
                return;
            }
            R r = this.value;
            try {
                object = ObjectHelper.requireNonNull(this.accumulator.apply(r, object), "The accumulator returned a null value");
                this.value = object;
            }
            catch (Throwable throwable) {
                Exceptions.throwIfFatal(throwable);
                this.s.cancel();
                this.onError(throwable);
                return;
            }
            this.queue.offer(object);
            this.drain();
        }

        @Override
        public void onSubscribe(Subscription subscription) {
            if (SubscriptionHelper.validate(this.s, subscription)) {
                this.s = subscription;
                this.actual.onSubscribe((Subscription)this);
                subscription.request((long)(this.prefetch - 1));
            }
        }

        public void request(long l) {
            if (SubscriptionHelper.validate(l)) {
                BackpressureHelper.add(this.requested, l);
                this.drain();
            }
        }
    }

}

