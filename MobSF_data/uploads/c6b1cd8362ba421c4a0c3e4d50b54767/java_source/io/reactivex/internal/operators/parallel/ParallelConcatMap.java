/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  org.reactivestreams.Subscriber
 */
package io.reactivex.internal.operators.parallel;

import io.reactivex.functions.Function;
import io.reactivex.internal.functions.ObjectHelper;
import io.reactivex.internal.operators.flowable.FlowableConcatMap;
import io.reactivex.internal.util.ErrorMode;
import io.reactivex.parallel.ParallelFlowable;
import org.reactivestreams.Publisher;
import org.reactivestreams.Subscriber;

public final class ParallelConcatMap<T, R>
extends ParallelFlowable<R> {
    final ErrorMode errorMode;
    final Function<? super T, ? extends Publisher<? extends R>> mapper;
    final int prefetch;
    final ParallelFlowable<T> source;

    public ParallelConcatMap(ParallelFlowable<T> parallelFlowable, Function<? super T, ? extends Publisher<? extends R>> function, int n, ErrorMode errorMode) {
        this.source = parallelFlowable;
        this.mapper = ObjectHelper.requireNonNull(function, "mapper");
        this.prefetch = n;
        this.errorMode = ObjectHelper.requireNonNull(errorMode, "errorMode");
    }

    @Override
    public int parallelism() {
        return this.source.parallelism();
    }

    @Override
    public void subscribe(Subscriber<? super R>[] arrsubscriber) {
        if (!this.validate(arrsubscriber)) {
            return;
        }
        int n = arrsubscriber.length;
        Subscriber[] arrsubscriber2 = new Subscriber[n];
        for (int i = 0; i < n; ++i) {
            arrsubscriber2[i] = FlowableConcatMap.subscribe(arrsubscriber[i], this.mapper, this.prefetch, this.errorMode);
        }
        this.source.subscribe(arrsubscriber2);
    }
}

