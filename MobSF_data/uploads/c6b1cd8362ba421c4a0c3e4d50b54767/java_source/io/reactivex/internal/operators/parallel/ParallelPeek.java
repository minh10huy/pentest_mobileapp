/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  org.reactivestreams.Subscriber
 *  org.reactivestreams.Subscription
 */
package io.reactivex.internal.operators.parallel;

import io.reactivex.FlowableSubscriber;
import io.reactivex.exceptions.CompositeException;
import io.reactivex.exceptions.Exceptions;
import io.reactivex.functions.Action;
import io.reactivex.functions.Consumer;
import io.reactivex.functions.LongConsumer;
import io.reactivex.internal.functions.ObjectHelper;
import io.reactivex.internal.subscriptions.EmptySubscription;
import io.reactivex.internal.subscriptions.SubscriptionHelper;
import io.reactivex.parallel.ParallelFlowable;
import io.reactivex.plugins.RxJavaPlugins;
import org.reactivestreams.Subscriber;
import org.reactivestreams.Subscription;

public final class ParallelPeek<T>
extends ParallelFlowable<T> {
    final Consumer<? super T> onAfterNext;
    final Action onAfterTerminated;
    final Action onCancel;
    final Action onComplete;
    final Consumer<? super Throwable> onError;
    final Consumer<? super T> onNext;
    final LongConsumer onRequest;
    final Consumer<? super Subscription> onSubscribe;
    final ParallelFlowable<T> source;

    public ParallelPeek(ParallelFlowable<T> parallelFlowable, Consumer<? super T> consumer, Consumer<? super T> consumer2, Consumer<? super Throwable> consumer3, Action action, Action action2, Consumer<? super Subscription> consumer4, LongConsumer longConsumer, Action action3) {
        this.source = parallelFlowable;
        this.onNext = ObjectHelper.requireNonNull(consumer, "onNext is null");
        this.onAfterNext = ObjectHelper.requireNonNull(consumer2, "onAfterNext is null");
        this.onError = ObjectHelper.requireNonNull(consumer3, "onError is null");
        this.onComplete = ObjectHelper.requireNonNull(action, "onComplete is null");
        this.onAfterTerminated = ObjectHelper.requireNonNull(action2, "onAfterTerminated is null");
        this.onSubscribe = ObjectHelper.requireNonNull(consumer4, "onSubscribe is null");
        this.onRequest = ObjectHelper.requireNonNull(longConsumer, "onRequest is null");
        this.onCancel = ObjectHelper.requireNonNull(action3, "onCancel is null");
    }

    @Override
    public int parallelism() {
        return this.source.parallelism();
    }

    @Override
    public void subscribe(Subscriber<? super T>[] arrsubscriber) {
        if (!this.validate(arrsubscriber)) {
            return;
        }
        int n = arrsubscriber.length;
        Subscriber[] arrsubscriber2 = new Subscriber[n];
        for (int i = 0; i < n; ++i) {
            arrsubscriber2[i] = new ParallelPeekSubscriber<T>(arrsubscriber[i], this);
        }
        this.source.subscribe(arrsubscriber2);
    }

    static final class ParallelPeekSubscriber<T>
    implements FlowableSubscriber<T>,
    Subscription {
        final Subscriber<? super T> actual;
        boolean done;
        final ParallelPeek<T> parent;
        Subscription s;

        ParallelPeekSubscriber(Subscriber<? super T> subscriber, ParallelPeek<T> parallelPeek) {
            this.actual = subscriber;
            this.parent = parallelPeek;
        }

        public void cancel() {
            try {
                this.parent.onCancel.run();
            }
            catch (Throwable throwable) {
                Exceptions.throwIfFatal(throwable);
                RxJavaPlugins.onError(throwable);
            }
            this.s.cancel();
        }

        public void onComplete() {
            if (!this.done) {
                this.done = true;
                try {
                    this.parent.onComplete.run();
                }
                catch (Throwable throwable) {
                    Exceptions.throwIfFatal(throwable);
                    this.actual.onError(throwable);
                    return;
                }
                this.actual.onComplete();
                try {
                    this.parent.onAfterTerminated.run();
                    return;
                }
                catch (Throwable throwable) {
                    Exceptions.throwIfFatal(throwable);
                    RxJavaPlugins.onError(throwable);
                    return;
                }
            }
        }

        public void onError(Throwable throwable) {
            if (this.done) {
                RxJavaPlugins.onError(throwable);
                return;
            }
            this.done = true;
            try {
                this.parent.onError.accept(throwable);
            }
            catch (Throwable throwable2) {
                Exceptions.throwIfFatal(throwable2);
                throwable = new CompositeException(throwable, throwable2);
            }
            this.actual.onError(throwable);
            try {
                this.parent.onAfterTerminated.run();
                return;
            }
            catch (Throwable throwable3) {
                Exceptions.throwIfFatal(throwable3);
                RxJavaPlugins.onError(throwable3);
                return;
            }
        }

        public void onNext(T t) {
            if (!this.done) {
                try {
                    this.parent.onNext.accept(t);
                }
                catch (Throwable throwable) {
                    Exceptions.throwIfFatal(throwable);
                    this.onError(throwable);
                    return;
                }
                this.actual.onNext(t);
                try {
                    this.parent.onAfterNext.accept(t);
                    return;
                }
                catch (Throwable throwable) {
                    Exceptions.throwIfFatal(throwable);
                    this.onError(throwable);
                    return;
                }
            }
        }

        @Override
        public void onSubscribe(Subscription subscription) {
            if (SubscriptionHelper.validate(this.s, subscription)) {
                this.s = subscription;
                try {
                    this.parent.onSubscribe.accept((Subscription)subscription);
                }
                catch (Throwable throwable) {
                    Exceptions.throwIfFatal(throwable);
                    subscription.cancel();
                    this.actual.onSubscribe((Subscription)EmptySubscription.INSTANCE);
                    this.onError(throwable);
                    return;
                }
                this.actual.onSubscribe((Subscription)this);
                return;
            }
        }

        public void request(long l) {
            try {
                this.parent.onRequest.accept(l);
            }
            catch (Throwable throwable) {
                Exceptions.throwIfFatal(throwable);
                RxJavaPlugins.onError(throwable);
            }
            this.s.request(l);
        }
    }

}

