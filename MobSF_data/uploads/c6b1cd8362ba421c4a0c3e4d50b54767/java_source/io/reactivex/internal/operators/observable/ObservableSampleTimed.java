/*
 * Decompiled with CFR 0_132.
 */
package io.reactivex.internal.operators.observable;

import io.reactivex.ObservableSource;
import io.reactivex.Observer;
import io.reactivex.Scheduler;
import io.reactivex.disposables.Disposable;
import io.reactivex.internal.disposables.DisposableHelper;
import io.reactivex.internal.operators.observable.AbstractObservableWithUpstream;
import io.reactivex.observers.SerializedObserver;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicReference;

public final class ObservableSampleTimed<T>
extends AbstractObservableWithUpstream<T, T> {
    final boolean emitLast;
    final long period;
    final Scheduler scheduler;
    final TimeUnit unit;

    public ObservableSampleTimed(ObservableSource<T> observableSource, long l, TimeUnit timeUnit, Scheduler scheduler, boolean bl) {
        super(observableSource);
        this.period = l;
        this.unit = timeUnit;
        this.scheduler = scheduler;
        this.emitLast = bl;
    }

    @Override
    public void subscribeActual(Observer<? super T> observer) {
        observer = new SerializedObserver<T>(observer);
        if (this.emitLast) {
            this.source.subscribe(new SampleTimedEmitLast<T>(observer, this.period, this.unit, this.scheduler));
            return;
        }
        this.source.subscribe(new SampleTimedNoLast<T>(observer, this.period, this.unit, this.scheduler));
    }

    static final class SampleTimedEmitLast<T>
    extends SampleTimedObserver<T> {
        private static final long serialVersionUID = -7139995637533111443L;
        final AtomicInteger wip = new AtomicInteger(1);

        SampleTimedEmitLast(Observer<? super T> observer, long l, TimeUnit timeUnit, Scheduler scheduler) {
            super(observer, l, timeUnit, scheduler);
        }

        @Override
        void complete() {
            this.emit();
            if (this.wip.decrementAndGet() == 0) {
                this.actual.onComplete();
            }
        }

        @Override
        public void run() {
            if (this.wip.incrementAndGet() == 2) {
                this.emit();
                if (this.wip.decrementAndGet() == 0) {
                    this.actual.onComplete();
                }
            }
        }
    }

    static final class SampleTimedNoLast<T>
    extends SampleTimedObserver<T> {
        private static final long serialVersionUID = -7139995637533111443L;

        SampleTimedNoLast(Observer<? super T> observer, long l, TimeUnit timeUnit, Scheduler scheduler) {
            super(observer, l, timeUnit, scheduler);
        }

        @Override
        void complete() {
            this.actual.onComplete();
        }

        @Override
        public void run() {
            this.emit();
        }
    }

    static abstract class SampleTimedObserver<T>
    extends AtomicReference<T>
    implements Observer<T>,
    Disposable,
    Runnable {
        private static final long serialVersionUID = -3517602651313910099L;
        final Observer<? super T> actual;
        final long period;
        Disposable s;
        final Scheduler scheduler;
        final AtomicReference<Disposable> timer = new AtomicReference();
        final TimeUnit unit;

        SampleTimedObserver(Observer<? super T> observer, long l, TimeUnit timeUnit, Scheduler scheduler) {
            this.actual = observer;
            this.period = l;
            this.unit = timeUnit;
            this.scheduler = scheduler;
        }

        void cancelTimer() {
            DisposableHelper.dispose(this.timer);
        }

        abstract void complete();

        @Override
        public void dispose() {
            this.cancelTimer();
            this.s.dispose();
        }

        void emit() {
            T t = this.getAndSet(null);
            if (t != null) {
                this.actual.onNext(t);
            }
        }

        @Override
        public boolean isDisposed() {
            return this.s.isDisposed();
        }

        @Override
        public void onComplete() {
            this.cancelTimer();
            this.complete();
        }

        @Override
        public void onError(Throwable throwable) {
            this.cancelTimer();
            this.actual.onError(throwable);
        }

        @Override
        public void onNext(T t) {
            this.lazySet(t);
        }

        @Override
        public void onSubscribe(Disposable disposable) {
            if (DisposableHelper.validate(this.s, disposable)) {
                this.s = disposable;
                this.actual.onSubscribe(this);
                disposable = this.scheduler.schedulePeriodicallyDirect(this, this.period, this.period, this.unit);
                DisposableHelper.replace(this.timer, disposable);
            }
        }
    }

}

