/*
 * Decompiled with CFR 0_132.
 */
package io.reactivex.internal.operators.observable;

import io.reactivex.Observable;
import io.reactivex.ObservableSource;
import io.reactivex.Observer;
import io.reactivex.disposables.Disposable;
import io.reactivex.exceptions.Exceptions;
import io.reactivex.functions.Function;
import io.reactivex.internal.disposables.DisposableHelper;
import io.reactivex.internal.disposables.EmptyDisposable;
import io.reactivex.internal.functions.ObjectHelper;
import io.reactivex.internal.operators.observable.AbstractObservableWithUpstream;
import io.reactivex.internal.util.AtomicThrowable;
import io.reactivex.internal.util.HalfSerializer;
import io.reactivex.subjects.PublishSubject;
import io.reactivex.subjects.Subject;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicReference;

public final class ObservableRepeatWhen<T>
extends AbstractObservableWithUpstream<T, T> {
    final Function<? super Observable<Object>, ? extends ObservableSource<?>> handler;

    public ObservableRepeatWhen(ObservableSource<T> observableSource, Function<? super Observable<Object>, ? extends ObservableSource<?>> function) {
        super(observableSource);
        this.handler = function;
    }

    @Override
    protected void subscribeActual(Observer<? super T> observer) {
        Observer<Object> observer2 = PublishSubject.create().toSerialized();
        try {
            ObservableSource<?> observableSource = ObjectHelper.requireNonNull(this.handler.apply((Observable<Object>)((Object)observer2)), "The handler returned a null ObservableSource");
            observer2 = new RepeatWhenObserver<T>((Observer<? super T>)observer, (Subject<Object>)observer2, this.source);
            observer.onSubscribe((Disposable)((Object)observer2));
            observableSource.subscribe(observer2.inner);
            observer2.subscribeNext();
            return;
        }
        catch (Throwable throwable) {
            Exceptions.throwIfFatal(throwable);
            EmptyDisposable.error(throwable, observer);
            return;
        }
    }

    static final class RepeatWhenObserver<T>
    extends AtomicInteger
    implements Observer<T>,
    Disposable {
        private static final long serialVersionUID = 802743776666017014L;
        volatile boolean active;
        final Observer<? super T> actual;
        final AtomicReference<Disposable> d;
        final AtomicThrowable error;
        final RepeatWhenObserver<T> inner;
        final Subject<Object> signaller;
        final ObservableSource<T> source;
        final AtomicInteger wip;

        RepeatWhenObserver(Observer<? super T> observer, Subject<Object> subject, ObservableSource<T> observableSource) {
            this.actual = observer;
            this.signaller = subject;
            this.source = observableSource;
            this.wip = new AtomicInteger();
            this.error = new AtomicThrowable();
            this.inner = new InnerRepeatObserver();
            this.d = new AtomicReference();
        }

        @Override
        public void dispose() {
            DisposableHelper.dispose(this.d);
            DisposableHelper.dispose(this.inner);
        }

        void innerComplete() {
            DisposableHelper.dispose(this.d);
            HalfSerializer.onComplete(this.actual, (AtomicInteger)this, this.error);
        }

        void innerError(Throwable throwable) {
            DisposableHelper.dispose(this.d);
            HalfSerializer.onError(this.actual, throwable, (AtomicInteger)this, this.error);
        }

        void innerNext() {
            this.subscribeNext();
        }

        @Override
        public boolean isDisposed() {
            return DisposableHelper.isDisposed(this.d.get());
        }

        @Override
        public void onComplete() {
            this.active = false;
            this.signaller.onNext(0);
        }

        @Override
        public void onError(Throwable throwable) {
            DisposableHelper.dispose(this.inner);
            HalfSerializer.onError(this.actual, throwable, (AtomicInteger)this, this.error);
        }

        @Override
        public void onNext(T t) {
            HalfSerializer.onNext(this.actual, t, (AtomicInteger)this, this.error);
        }

        @Override
        public void onSubscribe(Disposable disposable) {
            DisposableHelper.replace(this.d, disposable);
        }

        void subscribeNext() {
            if (this.wip.getAndIncrement() == 0) {
                do {
                    if (this.isDisposed()) {
                        return;
                    }
                    if (this.active) continue;
                    this.active = true;
                    this.source.subscribe(this);
                } while (this.wip.decrementAndGet() != 0);
            }
        }

        final class InnerRepeatObserver
        extends AtomicReference<Disposable>
        implements Observer<Object> {
            private static final long serialVersionUID = 3254781284376480842L;

            InnerRepeatObserver() {
            }

            @Override
            public void onComplete() {
                RepeatWhenObserver.this.innerComplete();
            }

            @Override
            public void onError(Throwable throwable) {
                RepeatWhenObserver.this.innerError(throwable);
            }

            @Override
            public void onNext(Object object) {
                RepeatWhenObserver.this.innerNext();
            }

            @Override
            public void onSubscribe(Disposable disposable) {
                DisposableHelper.setOnce(this, disposable);
            }
        }

    }

}

