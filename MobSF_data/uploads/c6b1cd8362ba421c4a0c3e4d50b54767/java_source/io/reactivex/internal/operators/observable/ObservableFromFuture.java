/*
 * Decompiled with CFR 0_132.
 */
package io.reactivex.internal.operators.observable;

import io.reactivex.Observable;
import io.reactivex.Observer;
import io.reactivex.disposables.Disposable;
import io.reactivex.exceptions.Exceptions;
import io.reactivex.internal.functions.ObjectHelper;
import io.reactivex.internal.observers.DeferredScalarDisposable;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;

public final class ObservableFromFuture<T>
extends Observable<T> {
    final Future<? extends T> future;
    final long timeout;
    final TimeUnit unit;

    public ObservableFromFuture(Future<? extends T> future, long l, TimeUnit timeUnit) {
        this.future = future;
        this.timeout = l;
        this.unit = timeUnit;
    }

    @Override
    public void subscribeActual(Observer<? super T> observer) {
        DeferredScalarDisposable<T> deferredScalarDisposable = new DeferredScalarDisposable<T>(observer);
        observer.onSubscribe(deferredScalarDisposable);
        if (!deferredScalarDisposable.isDisposed()) {
            try {
                T t = this.unit != null ? this.future.get(this.timeout, this.unit) : this.future.get();
                t = ObjectHelper.requireNonNull(t, "Future returned null");
                deferredScalarDisposable.complete(t);
                return;
            }
            catch (Throwable throwable) {
                Exceptions.throwIfFatal(throwable);
                if (!deferredScalarDisposable.isDisposed()) {
                    observer.onError(throwable);
                }
                return;
            }
        }
    }
}

