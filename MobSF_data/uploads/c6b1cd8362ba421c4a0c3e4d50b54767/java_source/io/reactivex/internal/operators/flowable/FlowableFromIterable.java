/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  org.reactivestreams.Subscriber
 *  org.reactivestreams.Subscription
 */
package io.reactivex.internal.operators.flowable;

import io.reactivex.Flowable;
import io.reactivex.annotations.Nullable;
import io.reactivex.exceptions.Exceptions;
import io.reactivex.internal.functions.ObjectHelper;
import io.reactivex.internal.fuseable.ConditionalSubscriber;
import io.reactivex.internal.subscriptions.BasicQueueSubscription;
import io.reactivex.internal.subscriptions.EmptySubscription;
import io.reactivex.internal.subscriptions.SubscriptionHelper;
import io.reactivex.internal.util.BackpressureHelper;
import java.util.Iterator;
import org.reactivestreams.Subscriber;
import org.reactivestreams.Subscription;

public final class FlowableFromIterable<T>
extends Flowable<T> {
    final Iterable<? extends T> source;

    public FlowableFromIterable(Iterable<? extends T> iterable) {
        this.source = iterable;
    }

    public static <T> void subscribe(Subscriber<? super T> subscriber, Iterator<? extends T> iterator) {
        block3 : {
            try {
                boolean bl = iterator.hasNext();
                if (bl) break block3;
            }
            catch (Throwable throwable) {
                Exceptions.throwIfFatal(throwable);
                EmptySubscription.error(throwable, subscriber);
                return;
            }
            EmptySubscription.complete(subscriber);
            return;
        }
        if (subscriber instanceof ConditionalSubscriber) {
            subscriber.onSubscribe(new IteratorConditionalSubscription<T>((ConditionalSubscriber)subscriber, iterator));
            return;
        }
        subscriber.onSubscribe(new IteratorSubscription<T>(subscriber, iterator));
    }

    @Override
    public void subscribeActual(Subscriber<? super T> subscriber) {
        Iterator<? extends T> iterator;
        try {
            iterator = this.source.iterator();
        }
        catch (Throwable throwable) {
            Exceptions.throwIfFatal(throwable);
            EmptySubscription.error(throwable, subscriber);
            return;
        }
        FlowableFromIterable.subscribe(subscriber, iterator);
    }

    static abstract class BaseRangeSubscription<T>
    extends BasicQueueSubscription<T> {
        private static final long serialVersionUID = -2252972430506210021L;
        volatile boolean cancelled;
        Iterator<? extends T> it;
        boolean once;

        BaseRangeSubscription(Iterator<? extends T> iterator) {
            this.it = iterator;
        }

        public final void cancel() {
            this.cancelled = true;
        }

        @Override
        public final void clear() {
            this.it = null;
        }

        abstract void fastPath();

        @Override
        public final boolean isEmpty() {
            if (this.it != null && this.it.hasNext()) {
                return false;
            }
            return true;
        }

        @Nullable
        @Override
        public final T poll() {
            if (this.it == null) {
                return null;
            }
            if (!this.once) {
                this.once = true;
            } else if (!this.it.hasNext()) {
                return null;
            }
            return ObjectHelper.requireNonNull(this.it.next(), "Iterator.next() returned a null value");
        }

        public final void request(long l) {
            if (SubscriptionHelper.validate(l) && BackpressureHelper.add(this, l) == 0L) {
                if (l == Long.MAX_VALUE) {
                    this.fastPath();
                    return;
                }
                this.slowPath(l);
            }
        }

        @Override
        public final int requestFusion(int n) {
            return n & 1;
        }

        abstract void slowPath(long var1);
    }

    static final class IteratorConditionalSubscription<T>
    extends BaseRangeSubscription<T> {
        private static final long serialVersionUID = -6022804456014692607L;
        final ConditionalSubscriber<? super T> actual;

        IteratorConditionalSubscription(ConditionalSubscriber<? super T> conditionalSubscriber, Iterator<? extends T> iterator) {
            super(iterator);
            this.actual = conditionalSubscriber;
        }

        /*
         * Exception decompiling
         */
        @Override
        void fastPath() {
            // This method has failed to decompile.  When submitting a bug report, please provide this stack trace, and (if you hold appropriate legal rights) the relevant class file.
            // org.benf.cfr.reader.util.ConfusedCFRException: Tried to end blocks [4[DOLOOP]], but top level block is 1[TRYBLOCK]
            // org.benf.cfr.reader.bytecode.analysis.opgraph.Op04StructuredStatement.processEndingBlocks(Op04StructuredStatement.java:416)
            // org.benf.cfr.reader.bytecode.analysis.opgraph.Op04StructuredStatement.buildNestedBlocks(Op04StructuredStatement.java:468)
            // org.benf.cfr.reader.bytecode.analysis.opgraph.Op03SimpleStatement.createInitialStructuredBlock(Op03SimpleStatement.java:2960)
            // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisInner(CodeAnalyser.java:818)
            // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisOrWrapFail(CodeAnalyser.java:196)
            // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysis(CodeAnalyser.java:141)
            // org.benf.cfr.reader.entities.attributes.AttributeCode.analyse(AttributeCode.java:95)
            // org.benf.cfr.reader.entities.Method.analyse(Method.java:372)
            // org.benf.cfr.reader.entities.ClassFile.analyseMid(ClassFile.java:867)
            // org.benf.cfr.reader.entities.ClassFile.analyseInnerClassesPass1(ClassFile.java:749)
            // org.benf.cfr.reader.entities.ClassFile.analyseMid(ClassFile.java:847)
            // org.benf.cfr.reader.entities.ClassFile.analyseTop(ClassFile.java:768)
            // org.benf.cfr.reader.Main.doJar(Main.java:141)
            // org.benf.cfr.reader.Main.main(Main.java:242)
            throw new IllegalStateException("Decompilation failed");
        }

        @Override
        void slowPath(long l) {
            long l2;
            Iterator iterator = this.it;
            ConditionalSubscriber<? super T> conditionalSubscriber = this.actual;
            do {
                l2 = 0L;
                do {
                    long l3;
                    if (l2 != l) {
                        boolean bl;
                        block11 : {
                            block12 : {
                                Object e;
                                block10 : {
                                    if (this.cancelled) {
                                        return;
                                    }
                                    try {
                                        e = iterator.next();
                                        if (this.cancelled) {
                                            return;
                                        }
                                        if (e != null) break block10;
                                    }
                                    catch (Throwable throwable) {
                                        Exceptions.throwIfFatal(throwable);
                                        conditionalSubscriber.onError(throwable);
                                        return;
                                    }
                                    conditionalSubscriber.onError((Throwable)new NullPointerException("Iterator.next() returned a null value"));
                                    return;
                                }
                                bl = conditionalSubscriber.tryOnNext((T)e);
                                if (this.cancelled) {
                                    return;
                                }
                                try {
                                    boolean bl2 = iterator.hasNext();
                                    if (bl2) break block11;
                                    if (this.cancelled) break block12;
                                }
                                catch (Throwable throwable) {
                                    Exceptions.throwIfFatal(throwable);
                                    conditionalSubscriber.onError(throwable);
                                    return;
                                }
                                conditionalSubscriber.onComplete();
                            }
                            return;
                        }
                        if (!bl) continue;
                        ++l2;
                        continue;
                    }
                    l = l3 = this.get();
                    if (l2 == l3) break;
                } while (true);
                l = l2 = this.addAndGet(- l2);
            } while (l2 != 0L);
        }
    }

    static final class IteratorSubscription<T>
    extends BaseRangeSubscription<T> {
        private static final long serialVersionUID = -6022804456014692607L;
        final Subscriber<? super T> actual;

        IteratorSubscription(Subscriber<? super T> subscriber, Iterator<? extends T> iterator) {
            super(iterator);
            this.actual = subscriber;
        }

        /*
         * Exception decompiling
         */
        @Override
        void fastPath() {
            // This method has failed to decompile.  When submitting a bug report, please provide this stack trace, and (if you hold appropriate legal rights) the relevant class file.
            // org.benf.cfr.reader.util.ConfusedCFRException: Tried to end blocks [4[DOLOOP]], but top level block is 1[TRYBLOCK]
            // org.benf.cfr.reader.bytecode.analysis.opgraph.Op04StructuredStatement.processEndingBlocks(Op04StructuredStatement.java:416)
            // org.benf.cfr.reader.bytecode.analysis.opgraph.Op04StructuredStatement.buildNestedBlocks(Op04StructuredStatement.java:468)
            // org.benf.cfr.reader.bytecode.analysis.opgraph.Op03SimpleStatement.createInitialStructuredBlock(Op03SimpleStatement.java:2960)
            // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisInner(CodeAnalyser.java:818)
            // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisOrWrapFail(CodeAnalyser.java:196)
            // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysis(CodeAnalyser.java:141)
            // org.benf.cfr.reader.entities.attributes.AttributeCode.analyse(AttributeCode.java:95)
            // org.benf.cfr.reader.entities.Method.analyse(Method.java:372)
            // org.benf.cfr.reader.entities.ClassFile.analyseMid(ClassFile.java:867)
            // org.benf.cfr.reader.entities.ClassFile.analyseInnerClassesPass1(ClassFile.java:749)
            // org.benf.cfr.reader.entities.ClassFile.analyseMid(ClassFile.java:847)
            // org.benf.cfr.reader.entities.ClassFile.analyseTop(ClassFile.java:768)
            // org.benf.cfr.reader.Main.doJar(Main.java:141)
            // org.benf.cfr.reader.Main.main(Main.java:242)
            throw new IllegalStateException("Decompilation failed");
        }

        @Override
        void slowPath(long l) {
            long l2;
            Iterator iterator = this.it;
            Subscriber<? super T> subscriber = this.actual;
            do {
                l2 = 0L;
                do {
                    long l3;
                    if (l2 != l) {
                        block11 : {
                            block12 : {
                                Object e;
                                block10 : {
                                    if (this.cancelled) {
                                        return;
                                    }
                                    try {
                                        e = iterator.next();
                                        if (this.cancelled) {
                                            return;
                                        }
                                        if (e != null) break block10;
                                    }
                                    catch (Throwable throwable) {
                                        Exceptions.throwIfFatal(throwable);
                                        subscriber.onError(throwable);
                                        return;
                                    }
                                    subscriber.onError((Throwable)new NullPointerException("Iterator.next() returned a null value"));
                                    return;
                                }
                                subscriber.onNext(e);
                                if (this.cancelled) {
                                    return;
                                }
                                try {
                                    boolean bl = iterator.hasNext();
                                    if (bl) break block11;
                                    if (this.cancelled) break block12;
                                }
                                catch (Throwable throwable) {
                                    Exceptions.throwIfFatal(throwable);
                                    subscriber.onError(throwable);
                                    return;
                                }
                                subscriber.onComplete();
                            }
                            return;
                        }
                        ++l2;
                        continue;
                    }
                    l = l3 = this.get();
                    if (l2 == l3) break;
                } while (true);
                l = l2 = this.addAndGet(- l2);
            } while (l2 != 0L);
        }
    }

}

