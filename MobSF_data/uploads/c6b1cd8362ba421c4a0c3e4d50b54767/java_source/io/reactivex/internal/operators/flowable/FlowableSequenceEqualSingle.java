/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  org.reactivestreams.Subscriber
 *  org.reactivestreams.Subscription
 */
package io.reactivex.internal.operators.flowable;

import io.reactivex.Flowable;
import io.reactivex.Single;
import io.reactivex.SingleObserver;
import io.reactivex.disposables.Disposable;
import io.reactivex.exceptions.Exceptions;
import io.reactivex.functions.BiPredicate;
import io.reactivex.internal.fuseable.FuseToFlowable;
import io.reactivex.internal.fuseable.SimpleQueue;
import io.reactivex.internal.operators.flowable.FlowableSequenceEqual;
import io.reactivex.internal.subscriptions.SubscriptionHelper;
import io.reactivex.internal.util.AtomicThrowable;
import io.reactivex.plugins.RxJavaPlugins;
import java.util.concurrent.atomic.AtomicInteger;
import org.reactivestreams.Publisher;
import org.reactivestreams.Subscriber;
import org.reactivestreams.Subscription;

public final class FlowableSequenceEqualSingle<T>
extends Single<Boolean>
implements FuseToFlowable<Boolean> {
    final BiPredicate<? super T, ? super T> comparer;
    final Publisher<? extends T> first;
    final int prefetch;
    final Publisher<? extends T> second;

    public FlowableSequenceEqualSingle(Publisher<? extends T> publisher, Publisher<? extends T> publisher2, BiPredicate<? super T, ? super T> biPredicate, int n) {
        this.first = publisher;
        this.second = publisher2;
        this.comparer = biPredicate;
        this.prefetch = n;
    }

    @Override
    public Flowable<Boolean> fuseToFlowable() {
        return RxJavaPlugins.onAssembly(new FlowableSequenceEqual<T>(this.first, this.second, this.comparer, this.prefetch));
    }

    @Override
    public void subscribeActual(SingleObserver<? super Boolean> singleObserver) {
        EqualCoordinator<? extends T> equalCoordinator = new EqualCoordinator<T>(singleObserver, this.prefetch, this.comparer);
        singleObserver.onSubscribe(equalCoordinator);
        equalCoordinator.subscribe(this.first, this.second);
    }

    static final class EqualCoordinator<T>
    extends AtomicInteger
    implements Disposable,
    FlowableSequenceEqual.EqualCoordinatorHelper {
        private static final long serialVersionUID = -6178010334400373240L;
        final SingleObserver<? super Boolean> actual;
        final BiPredicate<? super T, ? super T> comparer;
        final AtomicThrowable error;
        final FlowableSequenceEqual.EqualSubscriber<T> first;
        final FlowableSequenceEqual.EqualSubscriber<T> second;
        T v1;
        T v2;

        EqualCoordinator(SingleObserver<? super Boolean> singleObserver, int n, BiPredicate<? super T, ? super T> biPredicate) {
            this.actual = singleObserver;
            this.comparer = biPredicate;
            this.first = new FlowableSequenceEqual.EqualSubscriber(this, n);
            this.second = new FlowableSequenceEqual.EqualSubscriber(this, n);
            this.error = new AtomicThrowable();
        }

        void cancelAndClear() {
            this.first.cancel();
            this.first.clear();
            this.second.cancel();
            this.second.clear();
        }

        @Override
        public void dispose() {
            this.first.cancel();
            this.second.cancel();
            if (this.getAndIncrement() == 0) {
                this.first.clear();
                this.second.clear();
            }
        }

        @Override
        public void drain() {
            int n;
            if (this.getAndIncrement() != 0) {
                return;
            }
            int n2 = 1;
            do {
                block20 : {
                    SimpleQueue simpleQueue = this.first.queue;
                    SimpleQueue simpleQueue2 = this.second.queue;
                    if (simpleQueue != null && simpleQueue2 != null) {
                        do {
                            T t;
                            if (this.isDisposed()) {
                                this.first.clear();
                                this.second.clear();
                                return;
                            }
                            if ((Throwable)this.error.get() != null) {
                                this.cancelAndClear();
                                this.actual.onError(this.error.terminate());
                                return;
                            }
                            boolean bl = this.first.done;
                            T t2 = t = this.v1;
                            if (t == null) {
                                try {
                                    this.v1 = t2 = simpleQueue.poll();
                                }
                                catch (Throwable throwable) {
                                    Exceptions.throwIfFatal(throwable);
                                    this.cancelAndClear();
                                    this.error.addThrowable(throwable);
                                    this.actual.onError(this.error.terminate());
                                    return;
                                }
                            }
                            n = t2 == null ? 1 : 0;
                            boolean bl2 = this.second.done;
                            T t3 = this.v2;
                            t = t3;
                            if (t3 == null) {
                                try {
                                    t = simpleQueue2.poll();
                                    this.v2 = t;
                                }
                                catch (Throwable throwable) {
                                    Exceptions.throwIfFatal(throwable);
                                    this.cancelAndClear();
                                    this.error.addThrowable(throwable);
                                    this.actual.onError(this.error.terminate());
                                    return;
                                }
                            }
                            int n3 = t == null ? 1 : 0;
                            if (bl && bl2 && n != 0 && n3 != 0) {
                                this.actual.onSuccess((Boolean)true);
                                return;
                            }
                            if (bl && bl2 && n != n3) {
                                this.cancelAndClear();
                                this.actual.onSuccess((Boolean)false);
                                return;
                            }
                            if (n == 0 && n3 == 0) {
                                try {
                                    bl = this.comparer.test(t2, t);
                                    if (!bl) {
                                        this.cancelAndClear();
                                        this.actual.onSuccess((Boolean)false);
                                        return;
                                    }
                                    this.v1 = null;
                                    this.v2 = null;
                                    this.first.request();
                                    this.second.request();
                                }
                                catch (Throwable throwable) {
                                    Exceptions.throwIfFatal(throwable);
                                    this.cancelAndClear();
                                    this.error.addThrowable(throwable);
                                    this.actual.onError(this.error.terminate());
                                    return;
                                }
                                continue;
                            }
                            break block20;
                            break;
                        } while (true);
                    }
                    if (this.isDisposed()) {
                        this.first.clear();
                        this.second.clear();
                        return;
                    }
                    if ((Throwable)this.error.get() != null) {
                        this.cancelAndClear();
                        this.actual.onError(this.error.terminate());
                        return;
                    }
                }
                n2 = n = this.addAndGet(- n2);
            } while (n != 0);
        }

        @Override
        public void innerError(Throwable throwable) {
            if (this.error.addThrowable(throwable)) {
                this.drain();
                return;
            }
            RxJavaPlugins.onError(throwable);
        }

        @Override
        public boolean isDisposed() {
            return SubscriptionHelper.isCancelled((Subscription)this.first.get());
        }

        void subscribe(Publisher<? extends T> publisher, Publisher<? extends T> publisher2) {
            publisher.subscribe(this.first);
            publisher2.subscribe(this.second);
        }
    }

}

