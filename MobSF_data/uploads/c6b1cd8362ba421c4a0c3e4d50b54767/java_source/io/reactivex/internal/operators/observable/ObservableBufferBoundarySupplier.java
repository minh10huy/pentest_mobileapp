/*
 * Decompiled with CFR 0_132.
 */
package io.reactivex.internal.operators.observable;

import io.reactivex.ObservableSource;
import io.reactivex.Observer;
import io.reactivex.disposables.Disposable;
import io.reactivex.exceptions.Exceptions;
import io.reactivex.internal.disposables.DisposableHelper;
import io.reactivex.internal.disposables.EmptyDisposable;
import io.reactivex.internal.functions.ObjectHelper;
import io.reactivex.internal.fuseable.SimplePlainQueue;
import io.reactivex.internal.observers.QueueDrainObserver;
import io.reactivex.internal.operators.observable.AbstractObservableWithUpstream;
import io.reactivex.internal.queue.MpscLinkedQueue;
import io.reactivex.internal.util.QueueDrainHelper;
import io.reactivex.observers.DisposableObserver;
import io.reactivex.observers.SerializedObserver;
import io.reactivex.plugins.RxJavaPlugins;
import java.util.Collection;
import java.util.concurrent.Callable;
import java.util.concurrent.atomic.AtomicReference;

public final class ObservableBufferBoundarySupplier<T, U extends Collection<? super T>, B>
extends AbstractObservableWithUpstream<T, U> {
    final Callable<? extends ObservableSource<B>> boundarySupplier;
    final Callable<U> bufferSupplier;

    public ObservableBufferBoundarySupplier(ObservableSource<T> observableSource, Callable<? extends ObservableSource<B>> callable, Callable<U> callable2) {
        super(observableSource);
        this.boundarySupplier = callable;
        this.bufferSupplier = callable2;
    }

    @Override
    protected void subscribeActual(Observer<? super U> observer) {
        this.source.subscribe(new BufferBoundarySupplierObserver(new SerializedObserver<U>(observer), this.bufferSupplier, this.boundarySupplier));
    }

    static final class BufferBoundaryObserver<T, U extends Collection<? super T>, B>
    extends DisposableObserver<B> {
        boolean once;
        final BufferBoundarySupplierObserver<T, U, B> parent;

        BufferBoundaryObserver(BufferBoundarySupplierObserver<T, U, B> bufferBoundarySupplierObserver) {
            this.parent = bufferBoundarySupplierObserver;
        }

        @Override
        public void onComplete() {
            if (this.once) {
                return;
            }
            this.once = true;
            this.parent.next();
        }

        @Override
        public void onError(Throwable throwable) {
            if (this.once) {
                RxJavaPlugins.onError(throwable);
                return;
            }
            this.once = true;
            this.parent.onError(throwable);
        }

        @Override
        public void onNext(B b) {
            if (this.once) {
                return;
            }
            this.once = true;
            this.dispose();
            this.parent.next();
        }
    }

    static final class BufferBoundarySupplierObserver<T, U extends Collection<? super T>, B>
    extends QueueDrainObserver<T, U, U>
    implements Observer<T>,
    Disposable {
        final Callable<? extends ObservableSource<B>> boundarySupplier;
        U buffer;
        final Callable<U> bufferSupplier;
        final AtomicReference<Disposable> other = new AtomicReference();
        Disposable s;

        BufferBoundarySupplierObserver(Observer<? super U> observer, Callable<U> callable, Callable<? extends ObservableSource<B>> callable2) {
            super(observer, new MpscLinkedQueue());
            this.bufferSupplier = callable;
            this.boundarySupplier = callable2;
        }

        @Override
        public void accept(Observer<? super U> observer, U u) {
            this.actual.onNext(u);
        }

        @Override
        public void dispose() {
            if (!this.cancelled) {
                this.cancelled = true;
                this.s.dispose();
                this.disposeOther();
                if (this.enter()) {
                    this.queue.clear();
                }
            }
        }

        void disposeOther() {
            DisposableHelper.dispose(this.other);
        }

        @Override
        public boolean isDisposed() {
            return this.cancelled;
        }

        /*
         * Enabled aggressive block sorting
         * Enabled unnecessary exception pruning
         * Enabled aggressive exception aggregation
         */
        void next() {
            Disposable disposable;
            Collection collection;
            ObservableSource<B> observableSource;
            BufferBoundaryObserver bufferBoundaryObserver;
            block8 : {
                try {
                    collection = (Collection)ObjectHelper.requireNonNull(this.bufferSupplier.call(), "The buffer supplied is null");
                }
                catch (Throwable throwable) {
                    Exceptions.throwIfFatal(throwable);
                    this.dispose();
                    this.actual.onError(throwable);
                    return;
                }
                try {
                    observableSource = ObjectHelper.requireNonNull(this.boundarySupplier.call(), "The boundary ObservableSource supplied is null");
                    bufferBoundaryObserver = new BufferBoundaryObserver(this);
                    disposable = this.other.get();
                    if (this.other.compareAndSet(disposable, bufferBoundaryObserver)) break block8;
                    return;
                }
                catch (Throwable throwable) {
                    Exceptions.throwIfFatal(throwable);
                    this.cancelled = true;
                    this.s.dispose();
                    this.actual.onError(throwable);
                    return;
                }
            }
            synchronized (this) {
                disposable = this.buffer;
                if (disposable == null) {
                    return;
                }
                this.buffer = collection;
            }
            observableSource.subscribe(bufferBoundaryObserver);
            this.fastPathEmit(disposable, false, this);
        }

        /*
         * Enabled aggressive block sorting
         * Enabled unnecessary exception pruning
         * Enabled aggressive exception aggregation
         */
        @Override
        public void onComplete() {
            U u;
            synchronized (this) {
                u = this.buffer;
                if (u == null) {
                    return;
                }
                this.buffer = null;
            }
            this.queue.offer(u);
            this.done = true;
            if (this.enter()) {
                QueueDrainHelper.drainLoop(this.queue, this.actual, false, this, this);
            }
        }

        @Override
        public void onError(Throwable throwable) {
            this.dispose();
            this.actual.onError(throwable);
        }

        /*
         * Enabled aggressive block sorting
         * Enabled unnecessary exception pruning
         * Enabled aggressive exception aggregation
         */
        @Override
        public void onNext(T t) {
            synchronized (this) {
                U u = this.buffer;
                if (u == null) {
                    return;
                }
                u.add(t);
                return;
            }
        }

        @Override
        public void onSubscribe(Disposable bufferBoundaryObserver) {
            if (DisposableHelper.validate(this.s, bufferBoundaryObserver)) {
                Object object;
                this.s = bufferBoundaryObserver;
                Observer observer = this.actual;
                try {
                    object = (Collection)ObjectHelper.requireNonNull(this.bufferSupplier.call(), "The buffer supplied is null");
                    this.buffer = object;
                }
                catch (Throwable throwable) {
                    Exceptions.throwIfFatal(throwable);
                    this.cancelled = true;
                    bufferBoundaryObserver.dispose();
                    EmptyDisposable.error(throwable, observer);
                    return;
                }
                try {
                    object = ObjectHelper.requireNonNull(this.boundarySupplier.call(), "The boundary ObservableSource supplied is null");
                    bufferBoundaryObserver = new BufferBoundaryObserver(this);
                    this.other.set(bufferBoundaryObserver);
                    observer.onSubscribe(this);
                    if (!this.cancelled) {
                        object.subscribe(bufferBoundaryObserver);
                        return;
                    }
                }
                catch (Throwable throwable) {
                    Exceptions.throwIfFatal(throwable);
                    this.cancelled = true;
                    bufferBoundaryObserver.dispose();
                    EmptyDisposable.error(throwable, observer);
                    return;
                }
            }
        }
    }

}

