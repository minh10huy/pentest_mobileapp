/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  org.reactivestreams.Subscriber
 *  org.reactivestreams.Subscription
 */
package io.reactivex.internal.operators.flowable;

import io.reactivex.Flowable;
import io.reactivex.FlowableSubscriber;
import io.reactivex.exceptions.Exceptions;
import io.reactivex.exceptions.MissingBackpressureException;
import io.reactivex.functions.Function;
import io.reactivex.internal.functions.ObjectHelper;
import io.reactivex.internal.fuseable.SimpleQueue;
import io.reactivex.internal.operators.flowable.AbstractFlowableWithUpstream;
import io.reactivex.internal.queue.SpscLinkedArrayQueue;
import io.reactivex.internal.subscribers.InnerQueuedSubscriber;
import io.reactivex.internal.subscribers.InnerQueuedSubscriberSupport;
import io.reactivex.internal.subscriptions.SubscriptionHelper;
import io.reactivex.internal.util.AtomicThrowable;
import io.reactivex.internal.util.BackpressureHelper;
import io.reactivex.internal.util.ErrorMode;
import io.reactivex.plugins.RxJavaPlugins;
import java.io.Serializable;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
import org.reactivestreams.Publisher;
import org.reactivestreams.Subscriber;
import org.reactivestreams.Subscription;

public final class FlowableConcatMapEager<T, R>
extends AbstractFlowableWithUpstream<T, R> {
    final ErrorMode errorMode;
    final Function<? super T, ? extends Publisher<? extends R>> mapper;
    final int maxConcurrency;
    final int prefetch;

    public FlowableConcatMapEager(Flowable<T> flowable, Function<? super T, ? extends Publisher<? extends R>> function, int n, int n2, ErrorMode errorMode) {
        super(flowable);
        this.mapper = function;
        this.maxConcurrency = n;
        this.prefetch = n2;
        this.errorMode = errorMode;
    }

    @Override
    protected void subscribeActual(Subscriber<? super R> subscriber) {
        this.source.subscribe(new ConcatMapEagerDelayErrorSubscriber<T, R>(subscriber, this.mapper, this.maxConcurrency, this.prefetch, this.errorMode));
    }

    static final class ConcatMapEagerDelayErrorSubscriber<T, R>
    extends AtomicInteger
    implements FlowableSubscriber<T>,
    Subscription,
    InnerQueuedSubscriberSupport<R> {
        private static final long serialVersionUID = -4255299542215038287L;
        final Subscriber<? super R> actual;
        volatile boolean cancelled;
        volatile InnerQueuedSubscriber<R> current;
        volatile boolean done;
        final ErrorMode errorMode;
        final AtomicThrowable errors;
        final Function<? super T, ? extends Publisher<? extends R>> mapper;
        final int maxConcurrency;
        final int prefetch;
        final AtomicLong requested;
        Subscription s;
        final SpscLinkedArrayQueue<InnerQueuedSubscriber<R>> subscribers;

        ConcatMapEagerDelayErrorSubscriber(Subscriber<? super R> subscriber, Function<? super T, ? extends Publisher<? extends R>> function, int n, int n2, ErrorMode errorMode) {
            this.actual = subscriber;
            this.mapper = function;
            this.maxConcurrency = n;
            this.prefetch = n2;
            this.errorMode = errorMode;
            this.subscribers = new SpscLinkedArrayQueue(Math.min(n2, n));
            this.errors = new AtomicThrowable();
            this.requested = new AtomicLong();
        }

        public void cancel() {
            if (this.cancelled) {
                return;
            }
            this.cancelled = true;
            this.s.cancel();
            this.drainAndCancel();
        }

        void cancelAll() {
            InnerQueuedSubscriber<R> innerQueuedSubscriber;
            while ((innerQueuedSubscriber = this.subscribers.poll()) != null) {
                innerQueuedSubscriber.cancel();
            }
        }

        @Override
        public void drain() {
            if (this.getAndIncrement() != 0) {
                return;
            }
            InnerQueuedSubscriber<R> innerQueuedSubscriber = this.current;
            Subscriber<? super R> subscriber = this.actual;
            ErrorMode errorMode = this.errorMode;
            int n = 1;
            do {
                int n2;
                long l;
                boolean bl;
                long l2 = this.requested.get();
                Serializable serializable = innerQueuedSubscriber;
                if (innerQueuedSubscriber == null) {
                    if (errorMode != ErrorMode.END && (Throwable)this.errors.get() != null) {
                        this.cancelAll();
                        subscriber.onError(this.errors.terminate());
                        return;
                    }
                    bl = this.done;
                    serializable = this.subscribers.poll();
                    if (bl && serializable == null) {
                        serializable = this.errors.terminate();
                        if (serializable != null) {
                            subscriber.onError((Throwable)serializable);
                            return;
                        }
                        subscriber.onComplete();
                        return;
                    }
                    if (serializable != null) {
                        this.current = serializable;
                    }
                }
                if (serializable != null && (innerQueuedSubscriber = serializable.queue()) != null) {
                    block21 : {
                        for (l = 0L; l != l2; ++l) {
                            R r;
                            block20 : {
                                if (this.cancelled) {
                                    this.cancelAll();
                                    return;
                                }
                                if (errorMode == ErrorMode.IMMEDIATE && (Throwable)this.errors.get() != null) {
                                    this.current = null;
                                    serializable.cancel();
                                    this.cancelAll();
                                    subscriber.onError(this.errors.terminate());
                                    return;
                                }
                                bl = serializable.isDone();
                                try {
                                    r = innerQueuedSubscriber.poll();
                                    n2 = r == null ? 1 : 0;
                                    if (!bl || n2 == 0) break block20;
                                    this.current = null;
                                }
                                catch (Throwable throwable) {
                                    Exceptions.throwIfFatal(throwable);
                                    this.current = null;
                                    serializable.cancel();
                                    this.cancelAll();
                                    subscriber.onError(throwable);
                                    return;
                                }
                                this.s.request(1L);
                                serializable = null;
                                n2 = 1;
                                break block21;
                            }
                            if (n2 != 0) break;
                            subscriber.onNext(r);
                            serializable.requestOne();
                        }
                        n2 = 0;
                    }
                    if (l == l2) {
                        if (this.cancelled) {
                            this.cancelAll();
                            return;
                        }
                        if (errorMode == ErrorMode.IMMEDIATE && (Throwable)this.errors.get() != null) {
                            this.current = null;
                            serializable.cancel();
                            this.cancelAll();
                            subscriber.onError(this.errors.terminate());
                            return;
                        }
                        bl = serializable.isDone();
                        boolean bl2 = innerQueuedSubscriber.isEmpty();
                        if (bl && bl2) {
                            this.current = null;
                            this.s.request(1L);
                            serializable = null;
                            n2 = 1;
                        }
                    }
                } else {
                    l = 0L;
                    n2 = 0;
                }
                if (l != 0L && l2 != Long.MAX_VALUE) {
                    this.requested.addAndGet(- l);
                }
                if (n2 != 0) {
                    innerQueuedSubscriber = serializable;
                    continue;
                }
                n2 = this.addAndGet(- n);
                innerQueuedSubscriber = serializable;
                n = n2;
                if (n2 == 0) break;
            } while (true);
        }

        void drainAndCancel() {
            if (this.getAndIncrement() == 0) {
                do {
                    this.cancelAll();
                } while (this.decrementAndGet() != 0);
            }
        }

        @Override
        public void innerComplete(InnerQueuedSubscriber<R> innerQueuedSubscriber) {
            innerQueuedSubscriber.setDone();
            this.drain();
        }

        @Override
        public void innerError(InnerQueuedSubscriber<R> innerQueuedSubscriber, Throwable throwable) {
            if (this.errors.addThrowable(throwable)) {
                innerQueuedSubscriber.setDone();
                if (this.errorMode != ErrorMode.END) {
                    this.s.cancel();
                }
                this.drain();
                return;
            }
            RxJavaPlugins.onError(throwable);
        }

        @Override
        public void innerNext(InnerQueuedSubscriber<R> innerQueuedSubscriber, R r) {
            if (innerQueuedSubscriber.queue().offer(r)) {
                this.drain();
                return;
            }
            innerQueuedSubscriber.cancel();
            this.innerError(innerQueuedSubscriber, new MissingBackpressureException());
        }

        public void onComplete() {
            this.done = true;
            this.drain();
        }

        public void onError(Throwable throwable) {
            if (this.errors.addThrowable(throwable)) {
                this.done = true;
                this.drain();
                return;
            }
            RxJavaPlugins.onError(throwable);
        }

        public void onNext(T object) {
            try {
                object = ObjectHelper.requireNonNull(this.mapper.apply(object), "The mapper returned a null Publisher");
                InnerQueuedSubscriber innerQueuedSubscriber = new InnerQueuedSubscriber(this, this.prefetch);
                if (this.cancelled) {
                    return;
                }
                this.subscribers.offer(innerQueuedSubscriber);
                if (this.cancelled) {
                    return;
                }
                object.subscribe(innerQueuedSubscriber);
                if (this.cancelled) {
                    innerQueuedSubscriber.cancel();
                    this.drainAndCancel();
                }
                return;
            }
            catch (Throwable throwable) {
                Exceptions.throwIfFatal(throwable);
                this.s.cancel();
                this.onError(throwable);
                return;
            }
        }

        @Override
        public void onSubscribe(Subscription subscription) {
            if (SubscriptionHelper.validate(this.s, subscription)) {
                this.s = subscription;
                this.actual.onSubscribe((Subscription)this);
                long l = this.maxConcurrency == Integer.MAX_VALUE ? Long.MAX_VALUE : (long)this.maxConcurrency;
                subscription.request(l);
            }
        }

        public void request(long l) {
            if (SubscriptionHelper.validate(l)) {
                BackpressureHelper.add(this.requested, l);
                this.drain();
            }
        }
    }

}

