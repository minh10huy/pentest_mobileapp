/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  org.reactivestreams.Subscriber
 *  org.reactivestreams.Subscription
 */
package io.reactivex.internal.operators.flowable;

import io.reactivex.Flowable;
import io.reactivex.FlowableSubscriber;
import io.reactivex.SingleObserver;
import io.reactivex.SingleSource;
import io.reactivex.disposables.CompositeDisposable;
import io.reactivex.disposables.Disposable;
import io.reactivex.exceptions.Exceptions;
import io.reactivex.functions.Function;
import io.reactivex.internal.disposables.DisposableHelper;
import io.reactivex.internal.functions.ObjectHelper;
import io.reactivex.internal.operators.flowable.AbstractFlowableWithUpstream;
import io.reactivex.internal.queue.SpscLinkedArrayQueue;
import io.reactivex.internal.subscriptions.SubscriptionHelper;
import io.reactivex.internal.util.AtomicThrowable;
import io.reactivex.internal.util.BackpressureHelper;
import io.reactivex.plugins.RxJavaPlugins;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
import java.util.concurrent.atomic.AtomicReference;
import org.reactivestreams.Subscriber;
import org.reactivestreams.Subscription;

public final class FlowableFlatMapSingle<T, R>
extends AbstractFlowableWithUpstream<T, R> {
    final boolean delayErrors;
    final Function<? super T, ? extends SingleSource<? extends R>> mapper;
    final int maxConcurrency;

    public FlowableFlatMapSingle(Flowable<T> flowable, Function<? super T, ? extends SingleSource<? extends R>> function, boolean bl, int n) {
        super(flowable);
        this.mapper = function;
        this.delayErrors = bl;
        this.maxConcurrency = n;
    }

    @Override
    protected void subscribeActual(Subscriber<? super R> subscriber) {
        this.source.subscribe(new FlatMapSingleSubscriber<T, R>(subscriber, this.mapper, this.delayErrors, this.maxConcurrency));
    }

    static final class FlatMapSingleSubscriber<T, R>
    extends AtomicInteger
    implements FlowableSubscriber<T>,
    Subscription {
        private static final long serialVersionUID = 8600231336733376951L;
        final AtomicInteger active;
        final Subscriber<? super R> actual;
        volatile boolean cancelled;
        final boolean delayErrors;
        final AtomicThrowable errors;
        final Function<? super T, ? extends SingleSource<? extends R>> mapper;
        final int maxConcurrency;
        final AtomicReference<SpscLinkedArrayQueue<R>> queue;
        final AtomicLong requested;
        Subscription s;
        final CompositeDisposable set;

        FlatMapSingleSubscriber(Subscriber<? super R> subscriber, Function<? super T, ? extends SingleSource<? extends R>> function, boolean bl, int n) {
            this.actual = subscriber;
            this.mapper = function;
            this.delayErrors = bl;
            this.maxConcurrency = n;
            this.requested = new AtomicLong();
            this.set = new CompositeDisposable();
            this.errors = new AtomicThrowable();
            this.active = new AtomicInteger(1);
            this.queue = new AtomicReference();
        }

        public void cancel() {
            this.cancelled = true;
            this.s.cancel();
            this.set.dispose();
        }

        void clear() {
            SpscLinkedArrayQueue<R> spscLinkedArrayQueue = this.queue.get();
            if (spscLinkedArrayQueue != null) {
                spscLinkedArrayQueue.clear();
            }
        }

        void drain() {
            if (this.getAndIncrement() == 0) {
                this.drainLoop();
            }
        }

        void drainLoop() {
            int n;
            Subscriber<? super R> subscriber = this.actual;
            AtomicInteger atomicInteger = this.active;
            AtomicReference<SpscLinkedArrayQueue<R>> atomicReference = this.queue;
            int n2 = 1;
            do {
                long l;
                block15 : {
                    boolean bl;
                    Object object;
                    block17 : {
                        block16 : {
                            boolean bl2;
                            long l2 = this.requested.get();
                            l = 0L;
                            do {
                                bl2 = false;
                                if (l == l2) break;
                                if (this.cancelled) {
                                    this.clear();
                                    return;
                                }
                                if (!this.delayErrors && (Throwable)this.errors.get() != null) {
                                    object = this.errors.terminate();
                                    this.clear();
                                    subscriber.onError(object);
                                    return;
                                }
                                n = atomicInteger.get() == 0 ? 1 : 0;
                                object = atomicReference.get();
                                object = object != null ? object.poll() : null;
                                bl = object == null;
                                if (n != 0 && bl) {
                                    object = this.errors.terminate();
                                    if (object != null) {
                                        subscriber.onError((Throwable)object);
                                        return;
                                    }
                                    subscriber.onComplete();
                                    return;
                                }
                                if (bl) break;
                                subscriber.onNext(object);
                                ++l;
                            } while (true);
                            if (l != l2) break block15;
                            if (this.cancelled) {
                                this.clear();
                                return;
                            }
                            if (!this.delayErrors && (Throwable)this.errors.get() != null) {
                                object = this.errors.terminate();
                                this.clear();
                                subscriber.onError(object);
                                return;
                            }
                            n = atomicInteger.get() == 0 ? 1 : 0;
                            object = atomicReference.get();
                            if (object == null) break block16;
                            bl = bl2;
                            if (!object.isEmpty()) break block17;
                        }
                        bl = true;
                    }
                    if (n != 0 && bl) {
                        object = this.errors.terminate();
                        if (object != null) {
                            subscriber.onError((Throwable)object);
                            return;
                        }
                        subscriber.onComplete();
                        return;
                    }
                }
                if (l != 0L) {
                    BackpressureHelper.produced(this.requested, l);
                    if (this.maxConcurrency != Integer.MAX_VALUE) {
                        this.s.request(l);
                    }
                }
                n2 = n = this.addAndGet(- n2);
            } while (n != 0);
        }

        SpscLinkedArrayQueue<R> getOrCreateQueue() {
            SpscLinkedArrayQueue<Object> spscLinkedArrayQueue;
            do {
                if ((spscLinkedArrayQueue = this.queue.get()) == null) continue;
                return spscLinkedArrayQueue;
            } while (!this.queue.compareAndSet(null, spscLinkedArrayQueue = new SpscLinkedArrayQueue(Flowable.bufferSize())));
            return spscLinkedArrayQueue;
        }

        void innerError(FlatMapSingleSubscriber<T, R> flatMapSingleSubscriber, Throwable throwable) {
            this.set.delete((Disposable)((Object)flatMapSingleSubscriber));
            if (this.errors.addThrowable(throwable)) {
                if (!this.delayErrors) {
                    this.s.cancel();
                    this.set.dispose();
                } else if (this.maxConcurrency != Integer.MAX_VALUE) {
                    this.s.request(1L);
                }
                this.active.decrementAndGet();
                this.drain();
                return;
            }
            RxJavaPlugins.onError(throwable);
        }

        /*
         * Unable to fully structure code
         * Enabled aggressive block sorting
         * Enabled unnecessary exception pruning
         * Enabled aggressive exception aggregation
         * Converted monitor instructions to comments
         * Lifted jumps to return sites
         */
        void innerSuccess(FlatMapSingleSubscriber<T, R> var1_1, R var2_2) {
            this.set.delete((Disposable)var1_1);
            if (this.get() != 0) ** GOTO lbl-1000
            var3_3 = true;
            if (this.compareAndSet(0, 1)) {
                if (this.active.decrementAndGet() != 0) {
                    var3_3 = false;
                }
                if (this.requested.get() != 0L) {
                    this.actual.onNext(var2_2);
                    var1_1 = this.queue.get();
                    if (var3_3 && (var1_1 == null || var1_1.isEmpty())) {
                        var1_1 = this.errors.terminate();
                        if (var1_1 != null) {
                            this.actual.onError((Throwable)var1_1);
                            return;
                        }
                        this.actual.onComplete();
                        return;
                    }
                    BackpressureHelper.produced(this.requested, 1L);
                    if (this.maxConcurrency != Integer.MAX_VALUE) {
                        this.s.request(1L);
                    }
                } else {
                    var1_1 = this.getOrCreateQueue();
                    // MONITORENTER : var1_1
                    var1_1.offer(var2_2);
                    // MONITOREXIT : var1_1
                }
                if (this.decrementAndGet() == 0) {
                    return;
                }
            } else lbl-1000: // 2 sources:
            {
                var1_1 = this.getOrCreateQueue();
                // MONITORENTER : var1_1
                var1_1.offer(var2_2);
                // MONITOREXIT : var1_1
                this.active.decrementAndGet();
                if (this.getAndIncrement() != 0) {
                    return;
                }
            }
            this.drainLoop();
        }

        public void onComplete() {
            this.active.decrementAndGet();
            this.drain();
        }

        public void onError(Throwable throwable) {
            this.active.decrementAndGet();
            if (this.errors.addThrowable(throwable)) {
                if (!this.delayErrors) {
                    this.set.dispose();
                }
                this.drain();
                return;
            }
            RxJavaPlugins.onError(throwable);
        }

        public void onNext(T object) {
            try {
                object = ObjectHelper.requireNonNull(this.mapper.apply(object), "The mapper returned a null SingleSource");
                this.active.getAndIncrement();
                InnerObserver innerObserver = new InnerObserver();
                if (!this.cancelled && this.set.add(innerObserver)) {
                    object.subscribe(innerObserver);
                }
                return;
            }
            catch (Throwable throwable) {
                Exceptions.throwIfFatal(throwable);
                this.s.cancel();
                this.onError(throwable);
                return;
            }
        }

        @Override
        public void onSubscribe(Subscription subscription) {
            if (SubscriptionHelper.validate(this.s, subscription)) {
                this.s = subscription;
                this.actual.onSubscribe((Subscription)this);
                if (this.maxConcurrency == Integer.MAX_VALUE) {
                    subscription.request(Long.MAX_VALUE);
                    return;
                }
                subscription.request((long)this.maxConcurrency);
            }
        }

        public void request(long l) {
            if (SubscriptionHelper.validate(l)) {
                BackpressureHelper.add(this.requested, l);
                this.drain();
            }
        }

        final class InnerObserver
        extends AtomicReference<Disposable>
        implements SingleObserver<R>,
        Disposable {
            private static final long serialVersionUID = -502562646270949838L;

            InnerObserver() {
            }

            @Override
            public void dispose() {
                DisposableHelper.dispose(this);
            }

            @Override
            public boolean isDisposed() {
                return DisposableHelper.isDisposed((Disposable)this.get());
            }

            @Override
            public void onError(Throwable throwable) {
                FlatMapSingleSubscriber.this.innerError(this, throwable);
            }

            @Override
            public void onSubscribe(Disposable disposable) {
                DisposableHelper.setOnce(this, disposable);
            }

            @Override
            public void onSuccess(R r) {
                FlatMapSingleSubscriber.this.innerSuccess(this, r);
            }
        }

    }

}

