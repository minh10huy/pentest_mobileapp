/*
 * Decompiled with CFR 0_132.
 */
package io.reactivex.internal.operators.flowable;

import io.reactivex.Flowable;
import io.reactivex.FlowableSubscriber;
import io.reactivex.Notification;
import io.reactivex.internal.util.BlockingHelper;
import io.reactivex.internal.util.ExceptionHelper;
import io.reactivex.plugins.RxJavaPlugins;
import io.reactivex.subscribers.DisposableSubscriber;
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.atomic.AtomicInteger;
import org.reactivestreams.Publisher;

public final class BlockingFlowableNext<T>
implements Iterable<T> {
    final Publisher<? extends T> source;

    public BlockingFlowableNext(Publisher<? extends T> publisher) {
        this.source = publisher;
    }

    @Override
    public Iterator<T> iterator() {
        NextSubscriber nextSubscriber = new NextSubscriber();
        return new NextIterator<T>(this.source, nextSubscriber);
    }

    static final class NextIterator<T>
    implements Iterator<T> {
        private Throwable error;
        private boolean hasNext = true;
        private boolean isNextConsumed = true;
        private final Publisher<? extends T> items;
        private T next;
        private final NextSubscriber<T> observer;
        private boolean started;

        NextIterator(Publisher<? extends T> publisher, NextSubscriber<T> nextSubscriber) {
            this.items = publisher;
            this.observer = nextSubscriber;
        }

        private boolean moveToNext() {
            Notification<T> notification;
            block7 : {
                block6 : {
                    try {
                        if (!this.started) {
                            this.started = true;
                            this.observer.setWaiting();
                            Flowable.fromPublisher(this.items).materialize().subscribe(this.observer);
                        }
                        if (!(notification = this.observer.takeNext()).isOnNext()) break block6;
                        this.isNextConsumed = false;
                        this.next = notification.getValue();
                        return true;
                    }
                    catch (InterruptedException interruptedException) {
                        this.observer.dispose();
                        this.error = interruptedException;
                        throw ExceptionHelper.wrapOrThrow(interruptedException);
                    }
                }
                this.hasNext = false;
                if (!notification.isOnComplete()) break block7;
                return false;
            }
            if (notification.isOnError()) {
                this.error = notification.getError();
                throw ExceptionHelper.wrapOrThrow(this.error);
            }
            throw new IllegalStateException("Should not reach here");
        }

        @Override
        public boolean hasNext() {
            if (this.error != null) {
                throw ExceptionHelper.wrapOrThrow(this.error);
            }
            boolean bl = this.hasNext;
            boolean bl2 = false;
            if (!bl) {
                return false;
            }
            if (!this.isNextConsumed || this.moveToNext()) {
                bl2 = true;
            }
            return bl2;
        }

        @Override
        public T next() {
            if (this.error != null) {
                throw ExceptionHelper.wrapOrThrow(this.error);
            }
            if (this.hasNext()) {
                this.isNextConsumed = true;
                return this.next;
            }
            throw new NoSuchElementException("No more elements");
        }

        @Override
        public void remove() {
            throw new UnsupportedOperationException("Read only iterator");
        }
    }

    static final class NextSubscriber<T>
    extends DisposableSubscriber<Notification<T>> {
        private final BlockingQueue<Notification<T>> buf = new ArrayBlockingQueue<Notification<T>>(1);
        final AtomicInteger waiting = new AtomicInteger();

        NextSubscriber() {
        }

        public void onComplete() {
        }

        public void onError(Throwable throwable) {
            RxJavaPlugins.onError(throwable);
        }

        public void onNext(Notification<T> notification) {
            block4 : {
                Notification<T> notification2;
                block3 : {
                    notification2 = notification;
                    if (this.waiting.getAndSet(0) == 1) break block3;
                    if (notification.isOnNext()) break block4;
                    notification2 = notification;
                }
                while (!this.buf.offer(notification2)) {
                    notification = this.buf.poll();
                    if (notification == null || notification.isOnNext()) continue;
                    notification2 = notification;
                }
            }
        }

        void setWaiting() {
            this.waiting.set(1);
        }

        public Notification<T> takeNext() throws InterruptedException {
            this.setWaiting();
            BlockingHelper.verifyNonBlocking();
            return this.buf.take();
        }
    }

}

