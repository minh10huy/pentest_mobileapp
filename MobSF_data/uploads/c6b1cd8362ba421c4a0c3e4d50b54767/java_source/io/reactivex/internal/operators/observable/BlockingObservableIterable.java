/*
 * Decompiled with CFR 0_132.
 */
package io.reactivex.internal.operators.observable;

import io.reactivex.ObservableSource;
import io.reactivex.Observer;
import io.reactivex.disposables.Disposable;
import io.reactivex.internal.disposables.DisposableHelper;
import io.reactivex.internal.queue.SpscLinkedArrayQueue;
import io.reactivex.internal.util.BlockingHelper;
import io.reactivex.internal.util.ExceptionHelper;
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.concurrent.atomic.AtomicReference;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

public final class BlockingObservableIterable<T>
implements Iterable<T> {
    final int bufferSize;
    final ObservableSource<? extends T> source;

    public BlockingObservableIterable(ObservableSource<? extends T> observableSource, int n) {
        this.source = observableSource;
        this.bufferSize = n;
    }

    @Override
    public Iterator<T> iterator() {
        BlockingObservableIterator blockingObservableIterator = new BlockingObservableIterator(this.bufferSize);
        this.source.subscribe(blockingObservableIterator);
        return blockingObservableIterator;
    }

    static final class BlockingObservableIterator<T>
    extends AtomicReference<Disposable>
    implements Observer<T>,
    Iterator<T>,
    Disposable {
        private static final long serialVersionUID = 6695226475494099826L;
        final Condition condition;
        volatile boolean done;
        Throwable error;
        final Lock lock;
        final SpscLinkedArrayQueue<T> queue;

        BlockingObservableIterator(int n) {
            this.queue = new SpscLinkedArrayQueue(n);
            this.lock = new ReentrantLock();
            this.condition = this.lock.newCondition();
        }

        @Override
        public void dispose() {
            DisposableHelper.dispose(this);
        }

        /*
         * Loose catch block
         * Enabled aggressive block sorting
         * Enabled unnecessary exception pruning
         * Enabled aggressive exception aggregation
         * Lifted jumps to return sites
         */
        @Override
        public boolean hasNext() {
            do {
                boolean bl = this.done;
                boolean bl2 = this.queue.isEmpty();
                if (bl) {
                    Throwable throwable = this.error;
                    if (throwable != null) {
                        throw ExceptionHelper.wrapOrThrow(throwable);
                    }
                    if (bl2) {
                        return false;
                    }
                }
                if (!bl2) return true;
                BlockingHelper.verifyNonBlocking();
                this.lock.lock();
                while (!this.done && this.queue.isEmpty()) {
                    this.condition.await();
                }
                break;
            } while (true);
            {
                catch (Throwable throwable) {
                    this.lock.unlock();
                    throw throwable;
                }
            }
            {
                this.lock.unlock();
                continue;
            }
            catch (InterruptedException interruptedException) {
                DisposableHelper.dispose(this);
                this.signalConsumer();
                throw ExceptionHelper.wrapOrThrow(interruptedException);
            }
        }

        @Override
        public boolean isDisposed() {
            return DisposableHelper.isDisposed((Disposable)this.get());
        }

        @Override
        public T next() {
            if (this.hasNext()) {
                return this.queue.poll();
            }
            throw new NoSuchElementException();
        }

        @Override
        public void onComplete() {
            this.done = true;
            this.signalConsumer();
        }

        @Override
        public void onError(Throwable throwable) {
            this.error = throwable;
            this.done = true;
            this.signalConsumer();
        }

        @Override
        public void onNext(T t) {
            this.queue.offer(t);
            this.signalConsumer();
        }

        @Override
        public void onSubscribe(Disposable disposable) {
            DisposableHelper.setOnce(this, disposable);
        }

        @Override
        public void remove() {
            throw new UnsupportedOperationException("remove");
        }

        void signalConsumer() {
            this.lock.lock();
            try {
                this.condition.signalAll();
                return;
            }
            finally {
                this.lock.unlock();
            }
        }
    }

}

