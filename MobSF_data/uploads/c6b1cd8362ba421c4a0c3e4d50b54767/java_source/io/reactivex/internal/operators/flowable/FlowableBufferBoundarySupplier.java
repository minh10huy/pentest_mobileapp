/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  org.reactivestreams.Subscriber
 *  org.reactivestreams.Subscription
 */
package io.reactivex.internal.operators.flowable;

import io.reactivex.Flowable;
import io.reactivex.FlowableSubscriber;
import io.reactivex.disposables.Disposable;
import io.reactivex.exceptions.Exceptions;
import io.reactivex.internal.disposables.DisposableHelper;
import io.reactivex.internal.functions.ObjectHelper;
import io.reactivex.internal.fuseable.SimplePlainQueue;
import io.reactivex.internal.operators.flowable.AbstractFlowableWithUpstream;
import io.reactivex.internal.queue.MpscLinkedQueue;
import io.reactivex.internal.subscribers.QueueDrainSubscriber;
import io.reactivex.internal.subscriptions.EmptySubscription;
import io.reactivex.internal.subscriptions.SubscriptionHelper;
import io.reactivex.internal.util.QueueDrainHelper;
import io.reactivex.plugins.RxJavaPlugins;
import io.reactivex.subscribers.DisposableSubscriber;
import io.reactivex.subscribers.SerializedSubscriber;
import java.util.Collection;
import java.util.concurrent.Callable;
import java.util.concurrent.atomic.AtomicReference;
import org.reactivestreams.Publisher;
import org.reactivestreams.Subscriber;
import org.reactivestreams.Subscription;

public final class FlowableBufferBoundarySupplier<T, U extends Collection<? super T>, B>
extends AbstractFlowableWithUpstream<T, U> {
    final Callable<? extends Publisher<B>> boundarySupplier;
    final Callable<U> bufferSupplier;

    public FlowableBufferBoundarySupplier(Flowable<T> flowable, Callable<? extends Publisher<B>> callable, Callable<U> callable2) {
        super(flowable);
        this.boundarySupplier = callable;
        this.bufferSupplier = callable2;
    }

    @Override
    protected void subscribeActual(Subscriber<? super U> subscriber) {
        this.source.subscribe(new BufferBoundarySupplierSubscriber(new SerializedSubscriber<U>(subscriber), this.bufferSupplier, this.boundarySupplier));
    }

    static final class BufferBoundarySubscriber<T, U extends Collection<? super T>, B>
    extends DisposableSubscriber<B> {
        boolean once;
        final BufferBoundarySupplierSubscriber<T, U, B> parent;

        BufferBoundarySubscriber(BufferBoundarySupplierSubscriber<T, U, B> bufferBoundarySupplierSubscriber) {
            this.parent = bufferBoundarySupplierSubscriber;
        }

        public void onComplete() {
            if (this.once) {
                return;
            }
            this.once = true;
            this.parent.next();
        }

        public void onError(Throwable throwable) {
            if (this.once) {
                RxJavaPlugins.onError(throwable);
                return;
            }
            this.once = true;
            this.parent.onError(throwable);
        }

        public void onNext(B b) {
            if (this.once) {
                return;
            }
            this.once = true;
            this.cancel();
            this.parent.next();
        }
    }

    static final class BufferBoundarySupplierSubscriber<T, U extends Collection<? super T>, B>
    extends QueueDrainSubscriber<T, U, U>
    implements FlowableSubscriber<T>,
    Subscription,
    Disposable {
        final Callable<? extends Publisher<B>> boundarySupplier;
        U buffer;
        final Callable<U> bufferSupplier;
        final AtomicReference<Disposable> other = new AtomicReference();
        Subscription s;

        BufferBoundarySupplierSubscriber(Subscriber<? super U> subscriber, Callable<U> callable, Callable<? extends Publisher<B>> callable2) {
            super(subscriber, new MpscLinkedQueue());
            this.bufferSupplier = callable;
            this.boundarySupplier = callable2;
        }

        @Override
        public boolean accept(Subscriber<? super U> subscriber, U u) {
            this.actual.onNext(u);
            return true;
        }

        public void cancel() {
            if (!this.cancelled) {
                this.cancelled = true;
                this.s.cancel();
                this.disposeOther();
                if (this.enter()) {
                    this.queue.clear();
                }
            }
        }

        @Override
        public void dispose() {
            this.s.cancel();
            this.disposeOther();
        }

        void disposeOther() {
            DisposableHelper.dispose(this.other);
        }

        @Override
        public boolean isDisposed() {
            if (this.other.get() == DisposableHelper.DISPOSED) {
                return true;
            }
            return false;
        }

        /*
         * Enabled aggressive block sorting
         * Enabled unnecessary exception pruning
         * Enabled aggressive exception aggregation
         */
        void next() {
            BufferBoundarySubscriber bufferBoundarySubscriber;
            Publisher<B> publisher;
            Disposable disposable;
            Collection collection;
            block8 : {
                try {
                    collection = (Collection)ObjectHelper.requireNonNull(this.bufferSupplier.call(), "The buffer supplied is null");
                }
                catch (Throwable throwable) {
                    Exceptions.throwIfFatal(throwable);
                    this.cancel();
                    this.actual.onError(throwable);
                    return;
                }
                try {
                    publisher = ObjectHelper.requireNonNull(this.boundarySupplier.call(), "The boundary publisher supplied is null");
                    bufferBoundarySubscriber = new BufferBoundarySubscriber(this);
                    disposable = this.other.get();
                    if (this.other.compareAndSet(disposable, bufferBoundarySubscriber)) break block8;
                    return;
                }
                catch (Throwable throwable) {
                    Exceptions.throwIfFatal(throwable);
                    this.cancelled = true;
                    this.s.cancel();
                    this.actual.onError(throwable);
                    return;
                }
            }
            synchronized (this) {
                disposable = this.buffer;
                if (disposable == null) {
                    return;
                }
                this.buffer = collection;
            }
            publisher.subscribe(bufferBoundarySubscriber);
            this.fastPathEmitMax(disposable, false, this);
        }

        /*
         * Enabled aggressive block sorting
         * Enabled unnecessary exception pruning
         * Enabled aggressive exception aggregation
         */
        public void onComplete() {
            U u;
            synchronized (this) {
                u = this.buffer;
                if (u == null) {
                    return;
                }
                this.buffer = null;
            }
            this.queue.offer(u);
            this.done = true;
            if (this.enter()) {
                QueueDrainHelper.drainMaxLoop(this.queue, this.actual, false, this, this);
            }
        }

        public void onError(Throwable throwable) {
            this.cancel();
            this.actual.onError(throwable);
        }

        /*
         * Enabled aggressive block sorting
         * Enabled unnecessary exception pruning
         * Enabled aggressive exception aggregation
         */
        public void onNext(T t) {
            synchronized (this) {
                U u = this.buffer;
                if (u == null) {
                    return;
                }
                u.add(t);
                return;
            }
        }

        @Override
        public void onSubscribe(Subscription subscription) {
            BufferBoundarySubscriber bufferBoundarySubscriber;
            Object object;
            if (!SubscriptionHelper.validate(this.s, subscription)) {
                return;
            }
            this.s = subscription;
            Subscriber subscriber = this.actual;
            try {
                object = (Collection)ObjectHelper.requireNonNull(this.bufferSupplier.call(), "The buffer supplied is null");
                this.buffer = object;
            }
            catch (Throwable throwable) {
                Exceptions.throwIfFatal(throwable);
                this.cancelled = true;
                subscription.cancel();
                EmptySubscription.error(throwable, subscriber);
                return;
            }
            try {
                object = ObjectHelper.requireNonNull(this.boundarySupplier.call(), "The boundary publisher supplied is null");
                bufferBoundarySubscriber = new BufferBoundarySubscriber(this);
                this.other.set(bufferBoundarySubscriber);
            }
            catch (Throwable throwable) {
                Exceptions.throwIfFatal(throwable);
                this.cancelled = true;
                subscription.cancel();
                EmptySubscription.error(throwable, subscriber);
                return;
            }
            subscriber.onSubscribe((Subscription)this);
            if (!this.cancelled) {
                subscription.request(Long.MAX_VALUE);
                object.subscribe(bufferBoundarySubscriber);
            }
        }

        public void request(long l) {
            this.requested(l);
        }
    }

}

