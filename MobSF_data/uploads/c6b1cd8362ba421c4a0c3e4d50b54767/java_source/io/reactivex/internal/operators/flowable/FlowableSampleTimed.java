/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  org.reactivestreams.Subscriber
 *  org.reactivestreams.Subscription
 */
package io.reactivex.internal.operators.flowable;

import io.reactivex.Flowable;
import io.reactivex.FlowableSubscriber;
import io.reactivex.Scheduler;
import io.reactivex.disposables.Disposable;
import io.reactivex.exceptions.MissingBackpressureException;
import io.reactivex.internal.disposables.DisposableHelper;
import io.reactivex.internal.disposables.SequentialDisposable;
import io.reactivex.internal.operators.flowable.AbstractFlowableWithUpstream;
import io.reactivex.internal.subscriptions.SubscriptionHelper;
import io.reactivex.internal.util.BackpressureHelper;
import io.reactivex.subscribers.SerializedSubscriber;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
import java.util.concurrent.atomic.AtomicReference;
import org.reactivestreams.Subscriber;
import org.reactivestreams.Subscription;

public final class FlowableSampleTimed<T>
extends AbstractFlowableWithUpstream<T, T> {
    final boolean emitLast;
    final long period;
    final Scheduler scheduler;
    final TimeUnit unit;

    public FlowableSampleTimed(Flowable<T> flowable, long l, TimeUnit timeUnit, Scheduler scheduler, boolean bl) {
        super(flowable);
        this.period = l;
        this.unit = timeUnit;
        this.scheduler = scheduler;
        this.emitLast = bl;
    }

    @Override
    protected void subscribeActual(Subscriber<? super T> subscriber) {
        subscriber = new SerializedSubscriber<T>(subscriber);
        if (this.emitLast) {
            this.source.subscribe(new SampleTimedEmitLast<T>(subscriber, this.period, this.unit, this.scheduler));
            return;
        }
        this.source.subscribe(new SampleTimedNoLast<T>(subscriber, this.period, this.unit, this.scheduler));
    }

    static final class SampleTimedEmitLast<T>
    extends SampleTimedSubscriber<T> {
        private static final long serialVersionUID = -7139995637533111443L;
        final AtomicInteger wip = new AtomicInteger(1);

        SampleTimedEmitLast(Subscriber<? super T> subscriber, long l, TimeUnit timeUnit, Scheduler scheduler) {
            super(subscriber, l, timeUnit, scheduler);
        }

        @Override
        void complete() {
            this.emit();
            if (this.wip.decrementAndGet() == 0) {
                this.actual.onComplete();
            }
        }

        @Override
        public void run() {
            if (this.wip.incrementAndGet() == 2) {
                this.emit();
                if (this.wip.decrementAndGet() == 0) {
                    this.actual.onComplete();
                }
            }
        }
    }

    static final class SampleTimedNoLast<T>
    extends SampleTimedSubscriber<T> {
        private static final long serialVersionUID = -7139995637533111443L;

        SampleTimedNoLast(Subscriber<? super T> subscriber, long l, TimeUnit timeUnit, Scheduler scheduler) {
            super(subscriber, l, timeUnit, scheduler);
        }

        @Override
        void complete() {
            this.actual.onComplete();
        }

        @Override
        public void run() {
            this.emit();
        }
    }

    static abstract class SampleTimedSubscriber<T>
    extends AtomicReference<T>
    implements FlowableSubscriber<T>,
    Subscription,
    Runnable {
        private static final long serialVersionUID = -3517602651313910099L;
        final Subscriber<? super T> actual;
        final long period;
        final AtomicLong requested = new AtomicLong();
        Subscription s;
        final Scheduler scheduler;
        final SequentialDisposable timer = new SequentialDisposable();
        final TimeUnit unit;

        SampleTimedSubscriber(Subscriber<? super T> subscriber, long l, TimeUnit timeUnit, Scheduler scheduler) {
            this.actual = subscriber;
            this.period = l;
            this.unit = timeUnit;
            this.scheduler = scheduler;
        }

        public void cancel() {
            this.cancelTimer();
            this.s.cancel();
        }

        void cancelTimer() {
            DisposableHelper.dispose(this.timer);
        }

        abstract void complete();

        void emit() {
            Object var1_1 = this.getAndSet(null);
            if (var1_1 != null) {
                if (this.requested.get() != 0L) {
                    this.actual.onNext(var1_1);
                    BackpressureHelper.produced(this.requested, 1L);
                    return;
                }
                this.cancel();
                this.actual.onError((Throwable)new MissingBackpressureException("Couldn't emit value due to lack of requests!"));
            }
        }

        public void onComplete() {
            this.cancelTimer();
            this.complete();
        }

        public void onError(Throwable throwable) {
            this.cancelTimer();
            this.actual.onError(throwable);
        }

        public void onNext(T t) {
            this.lazySet(t);
        }

        @Override
        public void onSubscribe(Subscription subscription) {
            if (SubscriptionHelper.validate(this.s, subscription)) {
                this.s = subscription;
                this.actual.onSubscribe((Subscription)this);
                this.timer.replace(this.scheduler.schedulePeriodicallyDirect(this, this.period, this.period, this.unit));
                subscription.request(Long.MAX_VALUE);
            }
        }

        public void request(long l) {
            if (SubscriptionHelper.validate(l)) {
                BackpressureHelper.add(this.requested, l);
            }
        }
    }

}

