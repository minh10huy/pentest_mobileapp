/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  org.reactivestreams.Subscriber
 *  org.reactivestreams.Subscription
 */
package io.reactivex.internal.operators.flowable;

import io.reactivex.Flowable;
import io.reactivex.FlowableSubscriber;
import io.reactivex.Scheduler;
import io.reactivex.disposables.Disposable;
import io.reactivex.exceptions.MissingBackpressureException;
import io.reactivex.internal.disposables.DisposableHelper;
import io.reactivex.internal.disposables.SequentialDisposable;
import io.reactivex.internal.fuseable.SimplePlainQueue;
import io.reactivex.internal.operators.flowable.AbstractFlowableWithUpstream;
import io.reactivex.internal.queue.MpscLinkedQueue;
import io.reactivex.internal.subscribers.QueueDrainSubscriber;
import io.reactivex.internal.subscriptions.SubscriptionHelper;
import io.reactivex.internal.util.NotificationLite;
import io.reactivex.processors.UnicastProcessor;
import io.reactivex.subscribers.SerializedSubscriber;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.concurrent.TimeUnit;
import org.reactivestreams.Subscriber;
import org.reactivestreams.Subscription;

public final class FlowableWindowTimed<T>
extends AbstractFlowableWithUpstream<T, Flowable<T>> {
    final int bufferSize;
    final long maxSize;
    final boolean restartTimerOnMaxSize;
    final Scheduler scheduler;
    final long timeskip;
    final long timespan;
    final TimeUnit unit;

    public FlowableWindowTimed(Flowable<T> flowable, long l, long l2, TimeUnit timeUnit, Scheduler scheduler, long l3, int n, boolean bl) {
        super(flowable);
        this.timespan = l;
        this.timeskip = l2;
        this.unit = timeUnit;
        this.scheduler = scheduler;
        this.maxSize = l3;
        this.bufferSize = n;
        this.restartTimerOnMaxSize = bl;
    }

    @Override
    protected void subscribeActual(Subscriber<? super Flowable<T>> subscriber) {
        subscriber = new SerializedSubscriber<Flowable<? super Flowable<T>>>(subscriber);
        if (this.timespan == this.timeskip) {
            if (this.maxSize == Long.MAX_VALUE) {
                this.source.subscribe(new WindowExactUnboundedSubscriber(subscriber, this.timespan, this.unit, this.scheduler, this.bufferSize));
                return;
            }
            this.source.subscribe(new WindowExactBoundedSubscriber(subscriber, this.timespan, this.unit, this.scheduler, this.bufferSize, this.maxSize, this.restartTimerOnMaxSize));
            return;
        }
        this.source.subscribe(new WindowSkipSubscriber(subscriber, this.timespan, this.timeskip, this.unit, this.scheduler.createWorker(), this.bufferSize));
    }

    static final class WindowExactBoundedSubscriber<T>
    extends QueueDrainSubscriber<T, Object, Flowable<T>>
    implements Subscription {
        final int bufferSize;
        long count;
        final long maxSize;
        long producerIndex;
        final boolean restartTimerOnMaxSize;
        Subscription s;
        final Scheduler scheduler;
        volatile boolean terminated;
        final SequentialDisposable timer = new SequentialDisposable();
        final long timespan;
        final TimeUnit unit;
        UnicastProcessor<T> window;
        final Scheduler.Worker worker;

        WindowExactBoundedSubscriber(Subscriber<? super Flowable<T>> subscriber, long l, TimeUnit timeUnit, Scheduler scheduler, int n, long l2, boolean bl) {
            super(subscriber, new MpscLinkedQueue());
            this.timespan = l;
            this.unit = timeUnit;
            this.scheduler = scheduler;
            this.bufferSize = n;
            this.maxSize = l2;
            this.restartTimerOnMaxSize = bl;
            if (bl) {
                this.worker = scheduler.createWorker();
                return;
            }
            this.worker = null;
        }

        public void cancel() {
            this.cancelled = true;
        }

        public void dispose() {
            DisposableHelper.dispose(this.timer);
            Scheduler.Worker worker = this.worker;
            if (worker != null) {
                worker.dispose();
            }
        }

        /*
         * Enabled aggressive block sorting
         */
        void drainLoop() {
            SimplePlainQueue simplePlainQueue = this.queue;
            Subscriber subscriber = this.actual;
            UnicastProcessor unicastProcessor = this.window;
            int n = 1;
            do {
                void var7_13;
                block18 : {
                    long l;
                    Object object;
                    Object t;
                    block16 : {
                        block17 : {
                            if (this.terminated) {
                                this.s.cancel();
                                simplePlainQueue.clear();
                                this.dispose();
                                return;
                            }
                            boolean bl = this.done;
                            t = simplePlainQueue.poll();
                            int n2 = t == null ? 1 : 0;
                            boolean bl2 = t instanceof ConsumerIndexHolder;
                            if (bl && (n2 != 0 || bl2)) {
                                this.window = null;
                                simplePlainQueue.clear();
                                Throwable throwable = this.error;
                                if (throwable != null) {
                                    unicastProcessor.onError(throwable);
                                } else {
                                    unicastProcessor.onComplete();
                                }
                                this.dispose();
                                return;
                            }
                            if (n2 != 0) {
                                n = n2 = this.leave(- n);
                                if (n2 != 0) continue;
                                return;
                            }
                            if (!bl2) break block16;
                            object = (ConsumerIndexHolder)t;
                            if (this.restartTimerOnMaxSize) break block17;
                            UnicastProcessor unicastProcessor2 = unicastProcessor;
                            if (this.producerIndex != object.index) break block18;
                        }
                        unicastProcessor.onComplete();
                        this.count = 0L;
                        unicastProcessor = UnicastProcessor.create(this.bufferSize);
                        this.window = unicastProcessor;
                        l = this.requested();
                        if (l == 0L) {
                            this.window = null;
                            this.queue.clear();
                            this.s.cancel();
                            subscriber.onError((Throwable)new MissingBackpressureException("Could not deliver first window due to lack of requests."));
                            this.dispose();
                            return;
                        }
                        subscriber.onNext(unicastProcessor);
                        UnicastProcessor unicastProcessor3 = unicastProcessor;
                        if (l != Long.MAX_VALUE) {
                            this.produced(1L);
                            UnicastProcessor unicastProcessor4 = unicastProcessor;
                        }
                        break block18;
                    }
                    unicastProcessor.onNext(NotificationLite.getValue(t));
                    l = this.count + 1L;
                    if (l >= this.maxSize) {
                        ++this.producerIndex;
                        this.count = 0L;
                        unicastProcessor.onComplete();
                        l = this.requested();
                        if (l == 0L) {
                            this.window = null;
                            this.s.cancel();
                            this.actual.onError((Throwable)new MissingBackpressureException("Could not deliver window due to lack of requests"));
                            this.dispose();
                            return;
                        }
                        unicastProcessor = UnicastProcessor.create(this.bufferSize);
                        this.window = unicastProcessor;
                        this.actual.onNext(unicastProcessor);
                        if (l != Long.MAX_VALUE) {
                            this.produced(1L);
                        }
                        UnicastProcessor unicastProcessor5 = unicastProcessor;
                        if (this.restartTimerOnMaxSize) {
                            object = (Disposable)this.timer.get();
                            object.dispose();
                            Disposable disposable = this.worker.schedulePeriodically(new ConsumerIndexHolder(this.producerIndex, this), this.timespan, this.timespan, this.unit);
                            UnicastProcessor unicastProcessor6 = unicastProcessor;
                            if (!this.timer.compareAndSet(object, disposable)) {
                                disposable.dispose();
                                UnicastProcessor unicastProcessor7 = unicastProcessor;
                            }
                        }
                    } else {
                        this.count = l;
                        UnicastProcessor unicastProcessor8 = unicastProcessor;
                    }
                }
                unicastProcessor = var7_13;
            } while (true);
        }

        public void onComplete() {
            this.done = true;
            if (this.enter()) {
                this.drainLoop();
            }
            this.actual.onComplete();
            this.dispose();
        }

        public void onError(Throwable throwable) {
            this.error = throwable;
            this.done = true;
            if (this.enter()) {
                this.drainLoop();
            }
            this.actual.onError(throwable);
            this.dispose();
        }

        /*
         * Enabled aggressive block sorting
         */
        public void onNext(T object) {
            if (this.terminated) {
                return;
            }
            if (this.fastEnter()) {
                Object object2 = this.window;
                object2.onNext(object);
                long l = this.count + 1L;
                if (l >= this.maxSize) {
                    ++this.producerIndex;
                    this.count = 0L;
                    object2.onComplete();
                    l = this.requested();
                    if (l == 0L) {
                        this.window = null;
                        this.s.cancel();
                        this.actual.onError((Throwable)new MissingBackpressureException("Could not deliver window due to lack of requests"));
                        this.dispose();
                        return;
                    }
                    this.window = object = UnicastProcessor.create(this.bufferSize);
                    this.actual.onNext(object);
                    if (l != Long.MAX_VALUE) {
                        this.produced(1L);
                    }
                    if (this.restartTimerOnMaxSize) {
                        object = (Disposable)this.timer.get();
                        object.dispose();
                        object2 = this.worker.schedulePeriodically(new ConsumerIndexHolder(this.producerIndex, this), this.timespan, this.timespan, this.unit);
                        if (!this.timer.compareAndSet(object, object2)) {
                            object2.dispose();
                        }
                    }
                } else {
                    this.count = l;
                }
                if (this.leave(-1) == 0) {
                    return;
                }
            } else {
                this.queue.offer(NotificationLite.next(object));
                if (!this.enter()) {
                    return;
                }
            }
            this.drainLoop();
        }

        @Override
        public void onSubscribe(Subscription subscription) {
            if (SubscriptionHelper.validate(this.s, subscription)) {
                this.s = subscription;
                Object object = this.actual;
                object.onSubscribe((Subscription)this);
                if (this.cancelled) {
                    return;
                }
                UnicastProcessor unicastProcessor = UnicastProcessor.create(this.bufferSize);
                this.window = unicastProcessor;
                long l = this.requested();
                if (l != 0L) {
                    object.onNext(unicastProcessor);
                    if (l != Long.MAX_VALUE) {
                        this.produced(1L);
                    }
                    object = new ConsumerIndexHolder(this.producerIndex, this);
                    object = this.restartTimerOnMaxSize ? this.worker.schedulePeriodically((Runnable)object, this.timespan, this.timespan, this.unit) : this.scheduler.schedulePeriodicallyDirect((Runnable)object, this.timespan, this.timespan, this.unit);
                    if (this.timer.replace((Disposable)object)) {
                        subscription.request(Long.MAX_VALUE);
                        return;
                    }
                } else {
                    this.cancelled = true;
                    subscription.cancel();
                    object.onError((Throwable)new MissingBackpressureException("Could not deliver initial window due to lack of requests."));
                    return;
                }
            }
        }

        public void request(long l) {
            this.requested(l);
        }

        static final class ConsumerIndexHolder
        implements Runnable {
            final long index;
            final WindowExactBoundedSubscriber<?> parent;

            ConsumerIndexHolder(long l, WindowExactBoundedSubscriber<?> windowExactBoundedSubscriber) {
                this.index = l;
                this.parent = windowExactBoundedSubscriber;
            }

            @Override
            public void run() {
                WindowExactBoundedSubscriber<?> windowExactBoundedSubscriber = this.parent;
                if (!windowExactBoundedSubscriber.cancelled) {
                    windowExactBoundedSubscriber.queue.offer(this);
                } else {
                    windowExactBoundedSubscriber.terminated = true;
                    windowExactBoundedSubscriber.dispose();
                }
                if (windowExactBoundedSubscriber.enter()) {
                    windowExactBoundedSubscriber.drainLoop();
                }
            }
        }

    }

    static final class WindowExactUnboundedSubscriber<T>
    extends QueueDrainSubscriber<T, Object, Flowable<T>>
    implements FlowableSubscriber<T>,
    Subscription,
    Runnable {
        static final Object NEXT = new Object();
        final int bufferSize;
        Subscription s;
        final Scheduler scheduler;
        volatile boolean terminated;
        final SequentialDisposable timer = new SequentialDisposable();
        final long timespan;
        final TimeUnit unit;
        UnicastProcessor<T> window;

        WindowExactUnboundedSubscriber(Subscriber<? super Flowable<T>> subscriber, long l, TimeUnit timeUnit, Scheduler scheduler, int n) {
            super(subscriber, new MpscLinkedQueue());
            this.timespan = l;
            this.unit = timeUnit;
            this.scheduler = scheduler;
            this.bufferSize = n;
        }

        public void cancel() {
            this.cancelled = true;
        }

        public void dispose() {
            DisposableHelper.dispose(this.timer);
        }

        void drainLoop() {
            SimplePlainQueue simplePlainQueue = this.queue;
            Subscriber subscriber = this.actual;
            Object object = this.window;
            int n = 1;
            do {
                boolean bl = this.terminated;
                boolean bl2 = this.done;
                Object object2 = simplePlainQueue.poll();
                if (bl2 && (object2 == null || object2 == NEXT)) {
                    this.window = null;
                    simplePlainQueue.clear();
                    this.dispose();
                    object2 = this.error;
                    if (object2 != null) {
                        object.onError((Throwable)object2);
                        return;
                    }
                    object.onComplete();
                    return;
                }
                if (object2 == null) {
                    int n2;
                    n = n2 = this.leave(- n);
                    if (n2 != 0) continue;
                    return;
                }
                if (object2 == NEXT) {
                    object.onComplete();
                    if (!bl) {
                        object2 = UnicastProcessor.create(this.bufferSize);
                        this.window = object2;
                        long l = this.requested();
                        if (l != 0L) {
                            subscriber.onNext(object2);
                            object = object2;
                            if (l == Long.MAX_VALUE) continue;
                            this.produced(1L);
                            object = object2;
                            continue;
                        }
                        this.window = null;
                        this.queue.clear();
                        this.s.cancel();
                        this.dispose();
                        subscriber.onError((Throwable)new MissingBackpressureException("Could not deliver first window due to lack of requests."));
                        return;
                    }
                    this.s.cancel();
                    continue;
                }
                object.onNext(NotificationLite.getValue(object2));
            } while (true);
        }

        public void onComplete() {
            this.done = true;
            if (this.enter()) {
                this.drainLoop();
            }
            this.actual.onComplete();
            this.dispose();
        }

        public void onError(Throwable throwable) {
            this.error = throwable;
            this.done = true;
            if (this.enter()) {
                this.drainLoop();
            }
            this.actual.onError(throwable);
            this.dispose();
        }

        public void onNext(T t) {
            if (this.terminated) {
                return;
            }
            if (this.fastEnter()) {
                this.window.onNext(t);
                if (this.leave(-1) == 0) {
                    return;
                }
            } else {
                this.queue.offer(NotificationLite.next(t));
                if (!this.enter()) {
                    return;
                }
            }
            this.drainLoop();
        }

        @Override
        public void onSubscribe(Subscription subscription) {
            if (SubscriptionHelper.validate(this.s, subscription)) {
                this.s = subscription;
                this.window = UnicastProcessor.create(this.bufferSize);
                Subscriber subscriber = this.actual;
                subscriber.onSubscribe((Subscription)this);
                long l = this.requested();
                if (l != 0L) {
                    subscriber.onNext(this.window);
                    if (l != Long.MAX_VALUE) {
                        this.produced(1L);
                    }
                    if (!this.cancelled && this.timer.replace(this.scheduler.schedulePeriodicallyDirect(this, this.timespan, this.timespan, this.unit))) {
                        subscription.request(Long.MAX_VALUE);
                        return;
                    }
                } else {
                    this.cancelled = true;
                    subscription.cancel();
                    subscriber.onError((Throwable)new MissingBackpressureException("Could not deliver first window due to lack of requests."));
                    return;
                }
            }
        }

        public void request(long l) {
            this.requested(l);
        }

        @Override
        public void run() {
            if (this.cancelled) {
                this.terminated = true;
                this.dispose();
            }
            this.queue.offer(NEXT);
            if (this.enter()) {
                this.drainLoop();
            }
        }
    }

    static final class WindowSkipSubscriber<T>
    extends QueueDrainSubscriber<T, Object, Flowable<T>>
    implements Subscription,
    Runnable {
        final int bufferSize;
        Subscription s;
        volatile boolean terminated;
        final long timeskip;
        final long timespan;
        final TimeUnit unit;
        final List<UnicastProcessor<T>> windows;
        final Scheduler.Worker worker;

        WindowSkipSubscriber(Subscriber<? super Flowable<T>> subscriber, long l, long l2, TimeUnit timeUnit, Scheduler.Worker worker, int n) {
            super(subscriber, new MpscLinkedQueue());
            this.timespan = l;
            this.timeskip = l2;
            this.unit = timeUnit;
            this.worker = worker;
            this.bufferSize = n;
            this.windows = new LinkedList<UnicastProcessor<T>>();
        }

        public void cancel() {
            this.cancelled = true;
        }

        void complete(UnicastProcessor<T> unicastProcessor) {
            this.queue.offer(new SubjectWork<T>(unicastProcessor, false));
            if (this.enter()) {
                this.drainLoop();
            }
        }

        public void dispose() {
            this.worker.dispose();
        }

        /*
         * Unable to fully structure code
         * Enabled aggressive block sorting
         * Lifted jumps to return sites
         */
        void drainLoop() {
            var8_1 = this.queue;
            var9_2 = this.actual;
            var7_3 = this.windows;
            var1_4 = 1;
            block0 : do {
                if (this.terminated) {
                    this.s.cancel();
                    this.dispose();
                    var8_1.clear();
                    var7_3.clear();
                    return;
                }
                var3_6 = this.done;
                var10_10 = var8_1.poll();
                var2_5 = var10_10 == null ? 1 : 0;
                var4_7 = var10_10 instanceof SubjectWork;
                if (var3_6 && (var2_5 != 0 || var4_7)) {
                    var8_1.clear();
                    var8_1 = this.error;
                    if (var8_1 != null) {
                        var9_2 = var7_3.iterator();
                        while (var9_2.hasNext()) {
                            ((UnicastProcessor)var9_2.next()).onError((Throwable)var8_1);
                        }
                    } else {
                        var8_1 = var7_3.iterator();
                        while (var8_1.hasNext()) {
                            var8_1.next().onComplete();
                        }
                    }
                    var7_3.clear();
                    this.dispose();
                    return;
                }
                if (var2_5 != 0) {
                    var1_4 = var2_5 = this.leave(- var1_4);
                    if (var2_5 != 0) continue;
                    return;
                }
                if (var4_7) {
                    var10_11 = (SubjectWork)var10_10;
                    if (var10_11.open) {
                        if (this.cancelled) continue;
                        var5_8 = this.requested();
                        if (var5_8 != 0L) {
                            var10_12 = UnicastProcessor.create(this.bufferSize);
                            var7_3.add(var10_12);
                            var9_2.onNext(var10_12);
                            if (var5_8 != Long.MAX_VALUE) {
                                this.produced(1L);
                            }
                            this.worker.schedule(new Completion(var10_12), this.timespan, this.unit);
                            continue;
                        }
                        var9_2.onError((Throwable)new MissingBackpressureException("Can't emit window due to lack of requests"));
                        continue;
                    }
                    var7_3.remove(var10_11.w);
                    var10_11.w.onComplete();
                    if (!var7_3.isEmpty() || !this.cancelled) continue;
                    this.terminated = true;
                    continue;
                }
                var11_13 = var7_3.iterator();
                do {
                    if (var11_13.hasNext()) ** break;
                    continue block0;
                    var11_13.next().onNext(var10_10);
                } while (true);
                break;
            } while (true);
        }

        public void onComplete() {
            this.done = true;
            if (this.enter()) {
                this.drainLoop();
            }
            this.actual.onComplete();
            this.dispose();
        }

        public void onError(Throwable throwable) {
            this.error = throwable;
            this.done = true;
            if (this.enter()) {
                this.drainLoop();
            }
            this.actual.onError(throwable);
            this.dispose();
        }

        public void onNext(T t) {
            if (this.fastEnter()) {
                Iterator<UnicastProcessor<T>> iterator = this.windows.iterator();
                while (iterator.hasNext()) {
                    iterator.next().onNext(t);
                }
                if (this.leave(-1) == 0) {
                    return;
                }
            } else {
                this.queue.offer(t);
                if (!this.enter()) {
                    return;
                }
            }
            this.drainLoop();
        }

        @Override
        public void onSubscribe(Subscription subscription) {
            if (SubscriptionHelper.validate(this.s, subscription)) {
                this.s = subscription;
                this.actual.onSubscribe((Subscription)this);
                if (this.cancelled) {
                    return;
                }
                long l = this.requested();
                if (l != 0L) {
                    UnicastProcessor unicastProcessor = UnicastProcessor.create(this.bufferSize);
                    this.windows.add(unicastProcessor);
                    this.actual.onNext(unicastProcessor);
                    if (l != Long.MAX_VALUE) {
                        this.produced(1L);
                    }
                    this.worker.schedule(new Completion(unicastProcessor), this.timespan, this.unit);
                    this.worker.schedulePeriodically(this, this.timeskip, this.timeskip, this.unit);
                    subscription.request(Long.MAX_VALUE);
                    return;
                }
                subscription.cancel();
                this.actual.onError((Throwable)new MissingBackpressureException("Could not emit the first window due to lack of requests"));
            }
        }

        public void request(long l) {
            this.requested(l);
        }

        @Override
        public void run() {
            SubjectWork subjectWork = new SubjectWork(UnicastProcessor.create(this.bufferSize), true);
            if (!this.cancelled) {
                this.queue.offer(subjectWork);
            }
            if (this.enter()) {
                this.drainLoop();
            }
        }

        final class Completion
        implements Runnable {
            private final UnicastProcessor<T> processor;

            Completion(UnicastProcessor<T> unicastProcessor) {
                this.processor = unicastProcessor;
            }

            @Override
            public void run() {
                WindowSkipSubscriber.this.complete(this.processor);
            }
        }

        static final class SubjectWork<T> {
            final boolean open;
            final UnicastProcessor<T> w;

            SubjectWork(UnicastProcessor<T> unicastProcessor, boolean bl) {
                this.w = unicastProcessor;
                this.open = bl;
            }
        }

    }

}

