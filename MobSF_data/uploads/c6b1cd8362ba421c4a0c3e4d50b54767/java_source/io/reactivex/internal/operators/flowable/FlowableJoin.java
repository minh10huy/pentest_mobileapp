/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  org.reactivestreams.Subscriber
 *  org.reactivestreams.Subscription
 */
package io.reactivex.internal.operators.flowable;

import io.reactivex.Flowable;
import io.reactivex.FlowableSubscriber;
import io.reactivex.disposables.CompositeDisposable;
import io.reactivex.disposables.Disposable;
import io.reactivex.exceptions.Exceptions;
import io.reactivex.exceptions.MissingBackpressureException;
import io.reactivex.functions.BiFunction;
import io.reactivex.functions.Function;
import io.reactivex.internal.functions.ObjectHelper;
import io.reactivex.internal.fuseable.SimpleQueue;
import io.reactivex.internal.operators.flowable.AbstractFlowableWithUpstream;
import io.reactivex.internal.operators.flowable.FlowableGroupJoin;
import io.reactivex.internal.queue.SpscLinkedArrayQueue;
import io.reactivex.internal.subscriptions.SubscriptionHelper;
import io.reactivex.internal.util.BackpressureHelper;
import io.reactivex.internal.util.ExceptionHelper;
import io.reactivex.plugins.RxJavaPlugins;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
import java.util.concurrent.atomic.AtomicReference;
import org.reactivestreams.Publisher;
import org.reactivestreams.Subscriber;
import org.reactivestreams.Subscription;

public final class FlowableJoin<TLeft, TRight, TLeftEnd, TRightEnd, R>
extends AbstractFlowableWithUpstream<TLeft, R> {
    final Function<? super TLeft, ? extends Publisher<TLeftEnd>> leftEnd;
    final Publisher<? extends TRight> other;
    final BiFunction<? super TLeft, ? super TRight, ? extends R> resultSelector;
    final Function<? super TRight, ? extends Publisher<TRightEnd>> rightEnd;

    public FlowableJoin(Flowable<TLeft> flowable, Publisher<? extends TRight> publisher, Function<? super TLeft, ? extends Publisher<TLeftEnd>> function, Function<? super TRight, ? extends Publisher<TRightEnd>> function2, BiFunction<? super TLeft, ? super TRight, ? extends R> biFunction) {
        super(flowable);
        this.other = publisher;
        this.leftEnd = function;
        this.rightEnd = function2;
        this.resultSelector = biFunction;
    }

    @Override
    protected void subscribeActual(Subscriber<? super R> leftRightSubscriber) {
        JoinSubscription joinSubscription = new JoinSubscription(leftRightSubscriber, this.leftEnd, this.rightEnd, this.resultSelector);
        leftRightSubscriber.onSubscribe(joinSubscription);
        leftRightSubscriber = new FlowableGroupJoin.LeftRightSubscriber(joinSubscription, true);
        joinSubscription.disposables.add(leftRightSubscriber);
        FlowableGroupJoin.LeftRightSubscriber leftRightSubscriber2 = new FlowableGroupJoin.LeftRightSubscriber(joinSubscription, false);
        joinSubscription.disposables.add(leftRightSubscriber2);
        this.source.subscribe(leftRightSubscriber);
        this.other.subscribe(leftRightSubscriber2);
    }

    static final class JoinSubscription<TLeft, TRight, TLeftEnd, TRightEnd, R>
    extends AtomicInteger
    implements Subscription,
    FlowableGroupJoin.JoinSupport {
        static final Integer LEFT_CLOSE;
        static final Integer LEFT_VALUE;
        static final Integer RIGHT_CLOSE;
        static final Integer RIGHT_VALUE;
        private static final long serialVersionUID = -6071216598687999801L;
        final AtomicInteger active;
        final Subscriber<? super R> actual;
        volatile boolean cancelled;
        final CompositeDisposable disposables;
        final AtomicReference<Throwable> error;
        final Function<? super TLeft, ? extends Publisher<TLeftEnd>> leftEnd;
        int leftIndex;
        final Map<Integer, TLeft> lefts;
        final SpscLinkedArrayQueue<Object> queue;
        final AtomicLong requested;
        final BiFunction<? super TLeft, ? super TRight, ? extends R> resultSelector;
        final Function<? super TRight, ? extends Publisher<TRightEnd>> rightEnd;
        int rightIndex;
        final Map<Integer, TRight> rights;

        static {
            LEFT_VALUE = 1;
            RIGHT_VALUE = 2;
            LEFT_CLOSE = 3;
            RIGHT_CLOSE = 4;
        }

        JoinSubscription(Subscriber<? super R> subscriber, Function<? super TLeft, ? extends Publisher<TLeftEnd>> function, Function<? super TRight, ? extends Publisher<TRightEnd>> function2, BiFunction<? super TLeft, ? super TRight, ? extends R> biFunction) {
            this.actual = subscriber;
            this.requested = new AtomicLong();
            this.disposables = new CompositeDisposable();
            this.queue = new SpscLinkedArrayQueue(Flowable.bufferSize());
            this.lefts = new LinkedHashMap<Integer, TLeft>();
            this.rights = new LinkedHashMap<Integer, TRight>();
            this.error = new AtomicReference();
            this.leftEnd = function;
            this.rightEnd = function2;
            this.resultSelector = biFunction;
            this.active = new AtomicInteger(2);
        }

        public void cancel() {
            if (this.cancelled) {
                return;
            }
            this.cancelled = true;
            this.cancelAll();
            if (this.getAndIncrement() == 0) {
                this.queue.clear();
            }
        }

        void cancelAll() {
            this.disposables.dispose();
        }

        void drain() {
            if (this.getAndIncrement() != 0) {
                return;
            }
            SpscLinkedArrayQueue<Object> spscLinkedArrayQueue = this.queue;
            Subscriber<? super R> subscriber = this.actual;
            int n = 1;
            do {
                FlowableGroupJoin.LeftRightEndSubscriber leftRightEndSubscriber;
                long l;
                long l2;
                if (this.cancelled) {
                    spscLinkedArrayQueue.clear();
                    return;
                }
                if (this.error.get() != null) {
                    spscLinkedArrayQueue.clear();
                    this.cancelAll();
                    this.errorAll(subscriber);
                    return;
                }
                int n2 = this.active.get() == 0 ? 1 : 0;
                Iterator<TLeft> iterator = (Integer)spscLinkedArrayQueue.poll();
                boolean bl = iterator == null;
                if (n2 != 0 && bl) {
                    this.lefts.clear();
                    this.rights.clear();
                    this.disposables.dispose();
                    subscriber.onComplete();
                    return;
                }
                if (bl) {
                    n = n2 = this.addAndGet(- n);
                    if (n2 != 0) continue;
                    return;
                }
                Object object = spscLinkedArrayQueue.poll();
                if (iterator == LEFT_VALUE) {
                    n2 = this.leftIndex;
                    this.leftIndex = n2 + 1;
                    this.lefts.put(n2, object);
                    try {
                        iterator = ObjectHelper.requireNonNull(this.leftEnd.apply(object), "The leftEnd returned a null Publisher");
                        leftRightEndSubscriber = new FlowableGroupJoin.LeftRightEndSubscriber(this, true, n2);
                        this.disposables.add(leftRightEndSubscriber);
                        iterator.subscribe(leftRightEndSubscriber);
                        if (this.error.get() != null) {
                            spscLinkedArrayQueue.clear();
                            this.cancelAll();
                            this.errorAll(subscriber);
                            return;
                        }
                        l2 = this.requested.get();
                        iterator = this.rights.values().iterator();
                        l = 0L;
                    }
                    catch (Throwable throwable) {
                        this.fail(throwable, subscriber, spscLinkedArrayQueue);
                        return;
                    }
                    while (iterator.hasNext()) {
                        block21 : {
                            leftRightEndSubscriber = iterator.next();
                            try {
                                leftRightEndSubscriber = ObjectHelper.requireNonNull(this.resultSelector.apply(object, leftRightEndSubscriber), "The resultSelector returned a null value");
                                if (l == l2) break block21;
                            }
                            catch (Throwable throwable) {
                                this.fail(throwable, subscriber, spscLinkedArrayQueue);
                                return;
                            }
                            subscriber.onNext((Object)leftRightEndSubscriber);
                            ++l;
                            continue;
                        }
                        ExceptionHelper.addThrowable(this.error, new MissingBackpressureException("Could not emit value due to lack of requests"));
                        spscLinkedArrayQueue.clear();
                        this.cancelAll();
                        this.errorAll(subscriber);
                        return;
                    }
                    if (l == 0L) continue;
                    BackpressureHelper.produced(this.requested, l);
                    continue;
                }
                if (iterator == RIGHT_VALUE) {
                    n2 = this.rightIndex;
                    this.rightIndex = n2 + 1;
                    this.rights.put(n2, object);
                    try {
                        iterator = ObjectHelper.requireNonNull(this.rightEnd.apply(object), "The rightEnd returned a null Publisher");
                        leftRightEndSubscriber = new FlowableGroupJoin.LeftRightEndSubscriber(this, false, n2);
                        this.disposables.add(leftRightEndSubscriber);
                        iterator.subscribe(leftRightEndSubscriber);
                        if (this.error.get() != null) {
                            spscLinkedArrayQueue.clear();
                            this.cancelAll();
                            this.errorAll(subscriber);
                            return;
                        }
                        l2 = this.requested.get();
                        iterator = this.lefts.values().iterator();
                        l = 0L;
                    }
                    catch (Throwable throwable) {
                        this.fail(throwable, subscriber, spscLinkedArrayQueue);
                        return;
                    }
                    while (iterator.hasNext()) {
                        block22 : {
                            leftRightEndSubscriber = iterator.next();
                            try {
                                leftRightEndSubscriber = ObjectHelper.requireNonNull(this.resultSelector.apply(leftRightEndSubscriber, object), "The resultSelector returned a null value");
                                if (l == l2) break block22;
                            }
                            catch (Throwable throwable) {
                                this.fail(throwable, subscriber, spscLinkedArrayQueue);
                                return;
                            }
                            subscriber.onNext((Object)leftRightEndSubscriber);
                            ++l;
                            continue;
                        }
                        ExceptionHelper.addThrowable(this.error, new MissingBackpressureException("Could not emit value due to lack of requests"));
                        spscLinkedArrayQueue.clear();
                        this.cancelAll();
                        this.errorAll(subscriber);
                        return;
                    }
                    if (l == 0L) continue;
                    BackpressureHelper.produced(this.requested, l);
                    continue;
                }
                if (iterator == LEFT_CLOSE) {
                    object = (FlowableGroupJoin.LeftRightEndSubscriber)object;
                    this.lefts.remove(object.index);
                    this.disposables.remove((Disposable)object);
                    continue;
                }
                if (iterator != RIGHT_CLOSE) continue;
                object = (FlowableGroupJoin.LeftRightEndSubscriber)object;
                this.rights.remove(object.index);
                this.disposables.remove((Disposable)object);
            } while (true);
        }

        void errorAll(Subscriber<?> subscriber) {
            Throwable throwable = ExceptionHelper.terminate(this.error);
            this.lefts.clear();
            this.rights.clear();
            subscriber.onError(throwable);
        }

        void fail(Throwable throwable, Subscriber<?> subscriber, SimpleQueue<?> simpleQueue) {
            Exceptions.throwIfFatal(throwable);
            ExceptionHelper.addThrowable(this.error, throwable);
            simpleQueue.clear();
            this.cancelAll();
            this.errorAll(subscriber);
        }

        /*
         * Enabled aggressive block sorting
         * Enabled unnecessary exception pruning
         * Enabled aggressive exception aggregation
         */
        @Override
        public void innerClose(boolean bl, FlowableGroupJoin.LeftRightEndSubscriber leftRightEndSubscriber) {
            synchronized (this) {
                SpscLinkedArrayQueue<Object> spscLinkedArrayQueue = this.queue;
                Integer n = bl ? LEFT_CLOSE : RIGHT_CLOSE;
                spscLinkedArrayQueue.offer(n, leftRightEndSubscriber);
            }
            this.drain();
        }

        @Override
        public void innerCloseError(Throwable throwable) {
            if (ExceptionHelper.addThrowable(this.error, throwable)) {
                this.drain();
                return;
            }
            RxJavaPlugins.onError(throwable);
        }

        @Override
        public void innerComplete(FlowableGroupJoin.LeftRightSubscriber leftRightSubscriber) {
            this.disposables.delete(leftRightSubscriber);
            this.active.decrementAndGet();
            this.drain();
        }

        @Override
        public void innerError(Throwable throwable) {
            if (ExceptionHelper.addThrowable(this.error, throwable)) {
                this.active.decrementAndGet();
                this.drain();
                return;
            }
            RxJavaPlugins.onError(throwable);
        }

        /*
         * Enabled aggressive block sorting
         * Enabled unnecessary exception pruning
         * Enabled aggressive exception aggregation
         */
        @Override
        public void innerValue(boolean bl, Object object) {
            synchronized (this) {
                SpscLinkedArrayQueue<Object> spscLinkedArrayQueue = this.queue;
                Integer n = bl ? LEFT_VALUE : RIGHT_VALUE;
                spscLinkedArrayQueue.offer(n, object);
            }
            this.drain();
        }

        public void request(long l) {
            if (SubscriptionHelper.validate(l)) {
                BackpressureHelper.add(this.requested, l);
            }
        }
    }

}

