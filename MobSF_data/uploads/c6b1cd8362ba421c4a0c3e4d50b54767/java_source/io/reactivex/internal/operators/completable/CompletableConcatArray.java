/*
 * Decompiled with CFR 0_132.
 */
package io.reactivex.internal.operators.completable;

import io.reactivex.Completable;
import io.reactivex.CompletableObserver;
import io.reactivex.CompletableSource;
import io.reactivex.disposables.Disposable;
import io.reactivex.internal.disposables.SequentialDisposable;
import java.util.concurrent.atomic.AtomicInteger;

public final class CompletableConcatArray
extends Completable {
    final CompletableSource[] sources;

    public CompletableConcatArray(CompletableSource[] arrcompletableSource) {
        this.sources = arrcompletableSource;
    }

    @Override
    public void subscribeActual(CompletableObserver completableObserver) {
        ConcatInnerObserver concatInnerObserver = new ConcatInnerObserver(completableObserver, this.sources);
        completableObserver.onSubscribe(concatInnerObserver.sd);
        concatInnerObserver.next();
    }

    static final class ConcatInnerObserver
    extends AtomicInteger
    implements CompletableObserver {
        private static final long serialVersionUID = -7965400327305809232L;
        final CompletableObserver actual;
        int index;
        final SequentialDisposable sd;
        final CompletableSource[] sources;

        ConcatInnerObserver(CompletableObserver completableObserver, CompletableSource[] arrcompletableSource) {
            this.actual = completableObserver;
            this.sources = arrcompletableSource;
            this.sd = new SequentialDisposable();
        }

        void next() {
            if (this.sd.isDisposed()) {
                return;
            }
            if (this.getAndIncrement() != 0) {
                return;
            }
            CompletableSource[] arrcompletableSource = this.sources;
            do {
                if (this.sd.isDisposed()) {
                    return;
                }
                int n = this.index;
                this.index = n + 1;
                if (n == arrcompletableSource.length) {
                    this.actual.onComplete();
                    return;
                }
                arrcompletableSource[n].subscribe(this);
            } while (this.decrementAndGet() != 0);
        }

        @Override
        public void onComplete() {
            this.next();
        }

        @Override
        public void onError(Throwable throwable) {
            this.actual.onError(throwable);
        }

        @Override
        public void onSubscribe(Disposable disposable) {
            this.sd.replace(disposable);
        }
    }

}

