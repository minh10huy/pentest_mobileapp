/*
 * Decompiled with CFR 0_132.
 */
package io.reactivex.internal.operators.single;

import io.reactivex.Single;
import io.reactivex.SingleObserver;
import io.reactivex.SingleSource;
import io.reactivex.disposables.CompositeDisposable;
import io.reactivex.disposables.Disposable;
import io.reactivex.exceptions.Exceptions;
import io.reactivex.internal.disposables.EmptyDisposable;
import io.reactivex.plugins.RxJavaPlugins;
import java.util.Iterator;
import java.util.concurrent.atomic.AtomicBoolean;

public final class SingleAmb<T>
extends Single<T> {
    private final SingleSource<? extends T>[] sources;
    private final Iterable<? extends SingleSource<? extends T>> sourcesIterable;

    public SingleAmb(SingleSource<? extends T>[] arrsingleSource, Iterable<? extends SingleSource<? extends T>> iterable) {
        this.sources = arrsingleSource;
        this.sourcesIterable = iterable;
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @Override
    protected void subscribeActual(SingleObserver<? super T> singleObserver) {
        Object object;
        int n;
        int n2;
        SingleSource singleSource;
        Object object2;
        SingleSource<? extends T>[] arrsingleSource = this.sources;
        if (arrsingleSource != null) {
            n2 = arrsingleSource.length;
        } else {
            object = new SingleSource[8];
            try {
                object2 = this.sourcesIterable.iterator();
                n = 0;
            }
            catch (Throwable throwable) {
                Exceptions.throwIfFatal(throwable);
                EmptyDisposable.error(throwable, singleObserver);
                return;
            }
            do {
                void var5_7;
                SingleSource[] arrsingleSource2 = object;
                n2 = n;
                if (!object2.hasNext()) break;
                singleSource = (SingleSource)object2.next();
                if (singleSource == null) {
                    EmptyDisposable.error((Throwable)new NullPointerException("One of the sources is null"), singleObserver);
                    return;
                }
                Object object3 = object;
                if (n == ((Object)object).length) {
                    SingleSource[] arrsingleSource3 = new SingleSource[(n >> 2) + n];
                    System.arraycopy(object, 0, arrsingleSource3, 0, n);
                }
                var5_7[n] = singleSource;
                ++n;
                object = var5_7;
            } while (true);
        }
        object2 = new CompositeDisposable();
        object = new AmbSingleObserver<T>(singleObserver, (CompositeDisposable)object2);
        singleObserver.onSubscribe((Disposable)object2);
        n = 0;
        while (n < n2) {
            void var5_8;
            singleSource = var5_8[n];
            if (object.get()) {
                return;
            }
            if (singleSource == null) {
                object2.dispose();
                NullPointerException nullPointerException = new NullPointerException("One of the sources is null");
                if (object.compareAndSet(false, true)) {
                    singleObserver.onError(nullPointerException);
                    return;
                }
                RxJavaPlugins.onError(nullPointerException);
                return;
            }
            singleSource.subscribe(object);
            ++n;
        }
    }

    static final class AmbSingleObserver<T>
    extends AtomicBoolean
    implements SingleObserver<T> {
        private static final long serialVersionUID = -1944085461036028108L;
        final SingleObserver<? super T> s;
        final CompositeDisposable set;

        AmbSingleObserver(SingleObserver<? super T> singleObserver, CompositeDisposable compositeDisposable) {
            this.s = singleObserver;
            this.set = compositeDisposable;
        }

        @Override
        public void onError(Throwable throwable) {
            if (this.compareAndSet(false, true)) {
                this.set.dispose();
                this.s.onError(throwable);
                return;
            }
            RxJavaPlugins.onError(throwable);
        }

        @Override
        public void onSubscribe(Disposable disposable) {
            this.set.add(disposable);
        }

        @Override
        public void onSuccess(T t) {
            if (this.compareAndSet(false, true)) {
                this.set.dispose();
                this.s.onSuccess(t);
            }
        }
    }

}

