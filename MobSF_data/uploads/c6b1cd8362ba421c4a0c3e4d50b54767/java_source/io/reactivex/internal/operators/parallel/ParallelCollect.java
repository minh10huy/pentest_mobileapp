/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  org.reactivestreams.Subscriber
 *  org.reactivestreams.Subscription
 */
package io.reactivex.internal.operators.parallel;

import io.reactivex.exceptions.Exceptions;
import io.reactivex.functions.BiConsumer;
import io.reactivex.internal.functions.ObjectHelper;
import io.reactivex.internal.subscribers.DeferredScalarSubscriber;
import io.reactivex.internal.subscriptions.EmptySubscription;
import io.reactivex.internal.subscriptions.SubscriptionHelper;
import io.reactivex.parallel.ParallelFlowable;
import io.reactivex.plugins.RxJavaPlugins;
import java.util.concurrent.Callable;
import org.reactivestreams.Subscriber;
import org.reactivestreams.Subscription;

public final class ParallelCollect<T, C>
extends ParallelFlowable<C> {
    final BiConsumer<? super C, ? super T> collector;
    final Callable<? extends C> initialCollection;
    final ParallelFlowable<? extends T> source;

    public ParallelCollect(ParallelFlowable<? extends T> parallelFlowable, Callable<? extends C> callable, BiConsumer<? super C, ? super T> biConsumer) {
        this.source = parallelFlowable;
        this.initialCollection = callable;
        this.collector = biConsumer;
    }

    @Override
    public int parallelism() {
        return this.source.parallelism();
    }

    void reportError(Subscriber<?>[] arrsubscriber, Throwable throwable) {
        int n = arrsubscriber.length;
        for (int i = 0; i < n; ++i) {
            EmptySubscription.error(throwable, arrsubscriber[i]);
        }
    }

    @Override
    public void subscribe(Subscriber<? super C>[] arrsubscriber) {
        if (!this.validate(arrsubscriber)) {
            return;
        }
        int n = arrsubscriber.length;
        Subscriber[] arrsubscriber2 = new Subscriber[n];
        for (int i = 0; i < n; ++i) {
            try {
                C c = ObjectHelper.requireNonNull(this.initialCollection.call(), "The initialSupplier returned a null value");
                arrsubscriber2[i] = new ParallelCollectSubscriber<T, C>(arrsubscriber[i], (C)c, this.collector);
            }
            catch (Throwable throwable) {
                Exceptions.throwIfFatal(throwable);
                this.reportError(arrsubscriber, throwable);
                return;
            }
        }
        this.source.subscribe(arrsubscriber2);
    }

    static final class ParallelCollectSubscriber<T, C>
    extends DeferredScalarSubscriber<T, C> {
        private static final long serialVersionUID = -4767392946044436228L;
        C collection;
        final BiConsumer<? super C, ? super T> collector;
        boolean done;

        ParallelCollectSubscriber(Subscriber<? super C> subscriber, C c, BiConsumer<? super C, ? super T> biConsumer) {
            super(subscriber);
            this.collection = c;
            this.collector = biConsumer;
        }

        @Override
        public void cancel() {
            super.cancel();
            this.s.cancel();
        }

        @Override
        public void onComplete() {
            if (this.done) {
                return;
            }
            this.done = true;
            C c = this.collection;
            this.collection = null;
            this.complete(c);
        }

        @Override
        public void onError(Throwable throwable) {
            if (this.done) {
                RxJavaPlugins.onError(throwable);
                return;
            }
            this.done = true;
            this.collection = null;
            this.actual.onError(throwable);
        }

        public void onNext(T t) {
            if (this.done) {
                return;
            }
            try {
                this.collector.accept(this.collection, t);
                return;
            }
            catch (Throwable throwable) {
                Exceptions.throwIfFatal(throwable);
                this.cancel();
                this.onError(throwable);
                return;
            }
        }

        @Override
        public void onSubscribe(Subscription subscription) {
            if (SubscriptionHelper.validate(this.s, subscription)) {
                this.s = subscription;
                this.actual.onSubscribe((Subscription)this);
                subscription.request(Long.MAX_VALUE);
            }
        }
    }

}

