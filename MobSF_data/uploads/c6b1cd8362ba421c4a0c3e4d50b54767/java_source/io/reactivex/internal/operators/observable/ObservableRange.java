/*
 * Decompiled with CFR 0_132.
 */
package io.reactivex.internal.operators.observable;

import io.reactivex.Observable;
import io.reactivex.Observer;
import io.reactivex.annotations.Nullable;
import io.reactivex.disposables.Disposable;
import io.reactivex.internal.observers.BasicIntQueueDisposable;

public final class ObservableRange
extends Observable<Integer> {
    private final long end;
    private final int start;

    public ObservableRange(int n, int n2) {
        this.start = n;
        this.end = (long)n + (long)n2;
    }

    @Override
    protected void subscribeActual(Observer<? super Integer> observer) {
        RangeDisposable rangeDisposable = new RangeDisposable(observer, this.start, this.end);
        observer.onSubscribe(rangeDisposable);
        rangeDisposable.run();
    }

    static final class RangeDisposable
    extends BasicIntQueueDisposable<Integer> {
        private static final long serialVersionUID = 396518478098735504L;
        final Observer<? super Integer> actual;
        final long end;
        boolean fused;
        long index;

        RangeDisposable(Observer<? super Integer> observer, long l, long l2) {
            this.actual = observer;
            this.index = l;
            this.end = l2;
        }

        @Override
        public void clear() {
            this.index = this.end;
            this.lazySet(1);
        }

        @Override
        public void dispose() {
            this.set(1);
        }

        @Override
        public boolean isDisposed() {
            if (this.get() != 0) {
                return true;
            }
            return false;
        }

        @Override
        public boolean isEmpty() {
            if (this.index == this.end) {
                return true;
            }
            return false;
        }

        @Nullable
        @Override
        public Integer poll() throws Exception {
            long l = this.index;
            if (l != this.end) {
                this.index = l + 1L;
                return (int)l;
            }
            this.lazySet(1);
            return null;
        }

        @Override
        public int requestFusion(int n) {
            if ((n & 1) != 0) {
                this.fused = true;
                return 1;
            }
            return 0;
        }

        void run() {
            if (this.fused) {
                return;
            }
            Observer<? super Integer> observer = this.actual;
            long l = this.end;
            for (long i = this.index; i != l && this.get() == 0; ++i) {
                observer.onNext((Integer)((int)i));
            }
            if (this.get() == 0) {
                this.lazySet(1);
                observer.onComplete();
            }
        }
    }

}

