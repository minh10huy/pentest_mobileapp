/*
 * Decompiled with CFR 0_132.
 */
package io.reactivex.internal.operators.observable;

import io.reactivex.Notification;
import io.reactivex.ObservableSource;
import io.reactivex.Observer;
import io.reactivex.internal.operators.observable.ObservableMaterialize;
import io.reactivex.internal.util.BlockingHelper;
import io.reactivex.internal.util.ExceptionHelper;
import io.reactivex.observers.DisposableObserver;
import io.reactivex.plugins.RxJavaPlugins;
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.atomic.AtomicInteger;

public final class BlockingObservableNext<T>
implements Iterable<T> {
    final ObservableSource<T> source;

    public BlockingObservableNext(ObservableSource<T> observableSource) {
        this.source = observableSource;
    }

    @Override
    public Iterator<T> iterator() {
        NextObserver nextObserver = new NextObserver();
        return new NextIterator<T>(this.source, nextObserver);
    }

    static final class NextIterator<T>
    implements Iterator<T> {
        private Throwable error;
        private boolean hasNext = true;
        private boolean isNextConsumed = true;
        private final ObservableSource<T> items;
        private T next;
        private final NextObserver<T> observer;
        private boolean started;

        NextIterator(ObservableSource<T> observableSource, NextObserver<T> nextObserver) {
            this.items = observableSource;
            this.observer = nextObserver;
        }

        private boolean moveToNext() {
            if (!this.started) {
                this.started = true;
                this.observer.setWaiting();
                new ObservableMaterialize<T>(this.items).subscribe(this.observer);
            }
            try {
                Notification<T> notification = this.observer.takeNext();
                if (notification.isOnNext()) {
                    this.isNextConsumed = false;
                    this.next = notification.getValue();
                    return true;
                }
                this.hasNext = false;
                if (notification.isOnComplete()) {
                    return false;
                }
                this.error = notification.getError();
            }
            catch (InterruptedException interruptedException) {
                this.observer.dispose();
                this.error = interruptedException;
                throw ExceptionHelper.wrapOrThrow(interruptedException);
            }
            throw ExceptionHelper.wrapOrThrow(this.error);
        }

        @Override
        public boolean hasNext() {
            if (this.error != null) {
                throw ExceptionHelper.wrapOrThrow(this.error);
            }
            boolean bl = this.hasNext;
            boolean bl2 = false;
            if (!bl) {
                return false;
            }
            if (!this.isNextConsumed || this.moveToNext()) {
                bl2 = true;
            }
            return bl2;
        }

        @Override
        public T next() {
            if (this.error != null) {
                throw ExceptionHelper.wrapOrThrow(this.error);
            }
            if (this.hasNext()) {
                this.isNextConsumed = true;
                return this.next;
            }
            throw new NoSuchElementException("No more elements");
        }

        @Override
        public void remove() {
            throw new UnsupportedOperationException("Read only iterator");
        }
    }

    static final class NextObserver<T>
    extends DisposableObserver<Notification<T>> {
        private final BlockingQueue<Notification<T>> buf = new ArrayBlockingQueue<Notification<T>>(1);
        final AtomicInteger waiting = new AtomicInteger();

        NextObserver() {
        }

        @Override
        public void onComplete() {
        }

        @Override
        public void onError(Throwable throwable) {
            RxJavaPlugins.onError(throwable);
        }

        @Override
        public void onNext(Notification<T> notification) {
            block4 : {
                Notification<T> notification2;
                block3 : {
                    notification2 = notification;
                    if (this.waiting.getAndSet(0) == 1) break block3;
                    if (notification.isOnNext()) break block4;
                    notification2 = notification;
                }
                while (!this.buf.offer(notification2)) {
                    notification = this.buf.poll();
                    if (notification == null || notification.isOnNext()) continue;
                    notification2 = notification;
                }
            }
        }

        void setWaiting() {
            this.waiting.set(1);
        }

        public Notification<T> takeNext() throws InterruptedException {
            this.setWaiting();
            BlockingHelper.verifyNonBlocking();
            return this.buf.take();
        }
    }

}

