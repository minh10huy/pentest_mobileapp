/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  org.reactivestreams.Subscriber
 *  org.reactivestreams.Subscription
 */
package io.reactivex.internal.operators.flowable;

import io.reactivex.Flowable;
import io.reactivex.FlowableSubscriber;
import io.reactivex.disposables.CompositeDisposable;
import io.reactivex.disposables.Disposable;
import io.reactivex.exceptions.MissingBackpressureException;
import io.reactivex.functions.Function;
import io.reactivex.internal.disposables.DisposableHelper;
import io.reactivex.internal.functions.ObjectHelper;
import io.reactivex.internal.fuseable.SimplePlainQueue;
import io.reactivex.internal.operators.flowable.AbstractFlowableWithUpstream;
import io.reactivex.internal.queue.MpscLinkedQueue;
import io.reactivex.internal.subscribers.QueueDrainSubscriber;
import io.reactivex.internal.subscriptions.SubscriptionHelper;
import io.reactivex.internal.util.NotificationLite;
import io.reactivex.plugins.RxJavaPlugins;
import io.reactivex.processors.UnicastProcessor;
import io.reactivex.subscribers.DisposableSubscriber;
import io.reactivex.subscribers.SerializedSubscriber;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.concurrent.atomic.AtomicLong;
import java.util.concurrent.atomic.AtomicReference;
import org.reactivestreams.Publisher;
import org.reactivestreams.Subscriber;
import org.reactivestreams.Subscription;

public final class FlowableWindowBoundarySelector<T, B, V>
extends AbstractFlowableWithUpstream<T, Flowable<T>> {
    final int bufferSize;
    final Function<? super B, ? extends Publisher<V>> close;
    final Publisher<B> open;

    public FlowableWindowBoundarySelector(Flowable<T> flowable, Publisher<B> publisher, Function<? super B, ? extends Publisher<V>> function, int n) {
        super(flowable);
        this.open = publisher;
        this.close = function;
        this.bufferSize = n;
    }

    @Override
    protected void subscribeActual(Subscriber<? super Flowable<T>> subscriber) {
        this.source.subscribe(new WindowBoundaryMainSubscriber(new SerializedSubscriber<Flowable<T>>(subscriber), this.open, this.close, this.bufferSize));
    }

    static final class OperatorWindowBoundaryCloseSubscriber<T, V>
    extends DisposableSubscriber<V> {
        boolean done;
        final WindowBoundaryMainSubscriber<T, ?, V> parent;
        final UnicastProcessor<T> w;

        OperatorWindowBoundaryCloseSubscriber(WindowBoundaryMainSubscriber<T, ?, V> windowBoundaryMainSubscriber, UnicastProcessor<T> unicastProcessor) {
            this.parent = windowBoundaryMainSubscriber;
            this.w = unicastProcessor;
        }

        public void onComplete() {
            if (this.done) {
                return;
            }
            this.done = true;
            this.parent.close(this);
        }

        public void onError(Throwable throwable) {
            if (this.done) {
                RxJavaPlugins.onError(throwable);
                return;
            }
            this.done = true;
            this.parent.error(throwable);
        }

        public void onNext(V v) {
            if (this.done) {
                return;
            }
            this.done = true;
            this.cancel();
            this.parent.close(this);
        }
    }

    static final class OperatorWindowBoundaryOpenSubscriber<T, B>
    extends DisposableSubscriber<B> {
        boolean done;
        final WindowBoundaryMainSubscriber<T, B, ?> parent;

        OperatorWindowBoundaryOpenSubscriber(WindowBoundaryMainSubscriber<T, B, ?> windowBoundaryMainSubscriber) {
            this.parent = windowBoundaryMainSubscriber;
        }

        public void onComplete() {
            if (this.done) {
                return;
            }
            this.done = true;
            this.parent.onComplete();
        }

        public void onError(Throwable throwable) {
            if (this.done) {
                RxJavaPlugins.onError(throwable);
                return;
            }
            this.done = true;
            this.parent.error(throwable);
        }

        public void onNext(B b) {
            if (this.done) {
                return;
            }
            this.parent.open(b);
        }
    }

    static final class WindowBoundaryMainSubscriber<T, B, V>
    extends QueueDrainSubscriber<T, Object, Flowable<T>>
    implements Subscription {
        final AtomicReference<Disposable> boundary = new AtomicReference();
        final int bufferSize;
        final Function<? super B, ? extends Publisher<V>> close;
        final Publisher<B> open;
        final CompositeDisposable resources;
        Subscription s;
        final AtomicLong windows = new AtomicLong();
        final List<UnicastProcessor<T>> ws;

        WindowBoundaryMainSubscriber(Subscriber<? super Flowable<T>> subscriber, Publisher<B> publisher, Function<? super B, ? extends Publisher<V>> function, int n) {
            super(subscriber, new MpscLinkedQueue());
            this.open = publisher;
            this.close = function;
            this.bufferSize = n;
            this.resources = new CompositeDisposable();
            this.ws = new ArrayList<UnicastProcessor<T>>();
            this.windows.lazySet(1L);
        }

        @Override
        public boolean accept(Subscriber<? super Flowable<T>> subscriber, Object object) {
            return false;
        }

        public void cancel() {
            this.cancelled = true;
        }

        void close(OperatorWindowBoundaryCloseSubscriber<T, V> operatorWindowBoundaryCloseSubscriber) {
            this.resources.delete(operatorWindowBoundaryCloseSubscriber);
            this.queue.offer(new WindowOperation(operatorWindowBoundaryCloseSubscriber.w, null));
            if (this.enter()) {
                this.drainLoop();
            }
        }

        void dispose() {
            this.resources.dispose();
            DisposableHelper.dispose(this.boundary);
        }

        /*
         * Unable to fully structure code
         * Enabled aggressive block sorting
         * Enabled unnecessary exception pruning
         * Enabled aggressive exception aggregation
         * Lifted jumps to return sites
         */
        void drainLoop() {
            var7_1 = this.queue;
            var8_2 = this.actual;
            var6_3 = this.ws;
            var1_4 = 1;
            block2 : do {
                block18 : {
                    block17 : {
                        var3_6 = this.done;
                        var9_9 = var7_1.poll();
                        var2_5 = var9_9 == null ? 1 : 0;
                        if (!var3_6) break block17;
                        if (var2_5 != 0) {
                            this.dispose();
                            var7_1 = this.error;
                            if (var7_1 != null) {
                                var8_2 = var6_3.iterator();
                                while (var8_2.hasNext()) {
                                    ((UnicastProcessor)var8_2.next()).onError((Throwable)var7_1);
                                }
                            } else {
                                var7_1 = var6_3.iterator();
                                while (var7_1.hasNext()) {
                                    var7_1.next().onComplete();
                                }
                            }
                            var6_3.clear();
                            return;
                        }
                        if (var2_5 == 0) break block18;
                    }
                    var1_4 = var2_5 = this.leave(- var1_4);
                    if (var2_5 != 0) continue;
                    return;
                }
                if (var9_9 instanceof WindowOperation) {
                    var10_13 = (WindowOperation)var9_9;
                    if (var10_13.w != null) {
                        if (!var6_3.remove(var10_13.w)) continue;
                        var10_13.w.onComplete();
                        if (this.windows.decrementAndGet() != 0L) continue;
                        this.dispose();
                        return;
                    }
                    if (this.cancelled) continue;
                    var9_10 = UnicastProcessor.create(this.bufferSize);
                    var4_7 = this.requested();
                    if (var4_7 != 0L) {
                        var6_3.add(var9_10);
                        var8_2.onNext(var9_10);
                        if (var4_7 != Long.MAX_VALUE) {
                            this.produced(1L);
                        }
                        try {
                            var10_13 = ObjectHelper.requireNonNull(this.close.apply(var10_13.open), "The publisher supplied is null");
                            var9_11 = new OperatorWindowBoundaryCloseSubscriber<T, V>(this, var9_10);
                            if (!this.resources.add(var9_11)) continue;
                            this.windows.getAndIncrement();
                            var10_13.subscribe(var9_11);
                        }
                        catch (Throwable var9_12) {
                            this.cancelled = true;
                            var8_2.onError(var9_12);
                        }
                        continue;
                    }
                    this.cancelled = true;
                    var8_2.onError((Throwable)new MissingBackpressureException("Could not deliver new window due to lack of requests"));
                    continue;
                }
                var10_13 = var6_3.iterator();
                do {
                    if (var10_13.hasNext()) ** break;
                    continue block2;
                    ((UnicastProcessor)var10_13.next()).onNext(NotificationLite.getValue(var9_9));
                } while (true);
                break;
            } while (true);
        }

        void error(Throwable throwable) {
            this.s.cancel();
            this.resources.dispose();
            DisposableHelper.dispose(this.boundary);
            this.actual.onError(throwable);
        }

        public void onComplete() {
            if (this.done) {
                return;
            }
            this.done = true;
            if (this.enter()) {
                this.drainLoop();
            }
            if (this.windows.decrementAndGet() == 0L) {
                this.resources.dispose();
            }
            this.actual.onComplete();
        }

        public void onError(Throwable throwable) {
            if (this.done) {
                RxJavaPlugins.onError(throwable);
                return;
            }
            this.error = throwable;
            this.done = true;
            if (this.enter()) {
                this.drainLoop();
            }
            if (this.windows.decrementAndGet() == 0L) {
                this.resources.dispose();
            }
            this.actual.onError(throwable);
        }

        public void onNext(T t) {
            if (this.done) {
                return;
            }
            if (this.fastEnter()) {
                Iterator<UnicastProcessor<T>> iterator = this.ws.iterator();
                while (iterator.hasNext()) {
                    iterator.next().onNext(t);
                }
                if (this.leave(-1) == 0) {
                    return;
                }
            } else {
                this.queue.offer(NotificationLite.next(t));
                if (!this.enter()) {
                    return;
                }
            }
            this.drainLoop();
        }

        @Override
        public void onSubscribe(Subscription subscription) {
            if (SubscriptionHelper.validate(this.s, subscription)) {
                this.s = subscription;
                this.actual.onSubscribe((Subscription)this);
                if (this.cancelled) {
                    return;
                }
                OperatorWindowBoundaryOpenSubscriber operatorWindowBoundaryOpenSubscriber = new OperatorWindowBoundaryOpenSubscriber(this);
                if (this.boundary.compareAndSet(null, operatorWindowBoundaryOpenSubscriber)) {
                    this.windows.getAndIncrement();
                    subscription.request(Long.MAX_VALUE);
                    this.open.subscribe(operatorWindowBoundaryOpenSubscriber);
                }
            }
        }

        void open(B b) {
            this.queue.offer(new WindowOperation(null, b));
            if (this.enter()) {
                this.drainLoop();
            }
        }

        public void request(long l) {
            this.requested(l);
        }
    }

    static final class WindowOperation<T, B> {
        final B open;
        final UnicastProcessor<T> w;

        WindowOperation(UnicastProcessor<T> unicastProcessor, B b) {
            this.w = unicastProcessor;
            this.open = b;
        }
    }

}

