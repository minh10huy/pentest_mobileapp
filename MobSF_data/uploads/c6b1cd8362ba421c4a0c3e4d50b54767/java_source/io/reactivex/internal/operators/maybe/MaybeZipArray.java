/*
 * Decompiled with CFR 0_132.
 */
package io.reactivex.internal.operators.maybe;

import io.reactivex.Maybe;
import io.reactivex.MaybeObserver;
import io.reactivex.MaybeSource;
import io.reactivex.disposables.Disposable;
import io.reactivex.exceptions.Exceptions;
import io.reactivex.functions.Function;
import io.reactivex.internal.disposables.DisposableHelper;
import io.reactivex.internal.functions.ObjectHelper;
import io.reactivex.internal.operators.maybe.MaybeMap;
import io.reactivex.plugins.RxJavaPlugins;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicReference;

public final class MaybeZipArray<T, R>
extends Maybe<R> {
    final MaybeSource<? extends T>[] sources;
    final Function<? super Object[], ? extends R> zipper;

    public MaybeZipArray(MaybeSource<? extends T>[] arrmaybeSource, Function<? super Object[], ? extends R> function) {
        this.sources = arrmaybeSource;
        this.zipper = function;
    }

    @Override
    protected void subscribeActual(MaybeObserver<? super R> maybeSource) {
        MaybeSource<? extends T>[] arrmaybeSource = this.sources;
        int n = arrmaybeSource.length;
        if (n == 1) {
            arrmaybeSource[0].subscribe(new MaybeMap.MapMaybeObserver((MaybeObserver<? super R>)((Object)maybeSource), new SingletonArrayFunc()));
            return;
        }
        ZipCoordinator zipCoordinator = new ZipCoordinator((MaybeObserver<R>)((Object)maybeSource), n, (Function<Object[], R>)this.zipper);
        maybeSource.onSubscribe(zipCoordinator);
        for (int i = 0; i < n; ++i) {
            if (zipCoordinator.isDisposed()) {
                return;
            }
            maybeSource = arrmaybeSource[i];
            if (maybeSource == null) {
                zipCoordinator.innerError(new NullPointerException("One of the sources is null"), i);
                return;
            }
            maybeSource.subscribe(zipCoordinator.observers[i]);
        }
    }

    final class SingletonArrayFunc
    implements Function<T, R> {
        SingletonArrayFunc() {
        }

        @Override
        public R apply(T t) throws Exception {
            return ObjectHelper.requireNonNull(MaybeZipArray.this.zipper.apply((Object[])new Object[]{t}), "The zipper returned a null value");
        }
    }

    static final class ZipCoordinator<T, R>
    extends AtomicInteger
    implements Disposable {
        private static final long serialVersionUID = -5556924161382950569L;
        final MaybeObserver<? super R> actual;
        final ZipMaybeObserver<T>[] observers;
        final Object[] values;
        final Function<? super Object[], ? extends R> zipper;

        ZipCoordinator(MaybeObserver<? super R> arrzipMaybeObserver, int n, Function<? super Object[], ? extends R> function) {
            super(n);
            this.actual = arrzipMaybeObserver;
            this.zipper = function;
            arrzipMaybeObserver = new ZipMaybeObserver[n];
            for (int i = 0; i < n; ++i) {
                arrzipMaybeObserver[i] = new ZipMaybeObserver(this, i);
            }
            this.observers = arrzipMaybeObserver;
            this.values = new Object[n];
        }

        @Override
        public void dispose() {
            if (this.getAndSet(0) > 0) {
                ZipMaybeObserver<T>[] arrzipMaybeObserver = this.observers;
                int n = arrzipMaybeObserver.length;
                for (int i = 0; i < n; ++i) {
                    arrzipMaybeObserver[i].dispose();
                }
            }
        }

        void disposeExcept(int n) {
            int n2;
            ZipMaybeObserver<T>[] arrzipMaybeObserver = this.observers;
            int n3 = arrzipMaybeObserver.length;
            int n4 = 0;
            do {
                n2 = n;
                if (n4 >= n) break;
                arrzipMaybeObserver[n4].dispose();
                ++n4;
            } while (true);
            while (++n2 < n3) {
                arrzipMaybeObserver[n2].dispose();
            }
        }

        void innerComplete(int n) {
            if (this.getAndSet(0) > 0) {
                this.disposeExcept(n);
                this.actual.onComplete();
            }
        }

        void innerError(Throwable throwable, int n) {
            if (this.getAndSet(0) > 0) {
                this.disposeExcept(n);
                this.actual.onError(throwable);
                return;
            }
            RxJavaPlugins.onError(throwable);
        }

        void innerSuccess(T object, int n) {
            this.values[n] = object;
            if (this.decrementAndGet() == 0) {
                try {
                    object = ObjectHelper.requireNonNull(this.zipper.apply((Object[])this.values), "The zipper returned a null value");
                    this.actual.onSuccess(object);
                    return;
                }
                catch (Throwable throwable) {
                    Exceptions.throwIfFatal(throwable);
                    this.actual.onError(throwable);
                    return;
                }
            }
        }

        @Override
        public boolean isDisposed() {
            if (this.get() <= 0) {
                return true;
            }
            return false;
        }
    }

    static final class ZipMaybeObserver<T>
    extends AtomicReference<Disposable>
    implements MaybeObserver<T> {
        private static final long serialVersionUID = 3323743579927613702L;
        final int index;
        final ZipCoordinator<T, ?> parent;

        ZipMaybeObserver(ZipCoordinator<T, ?> zipCoordinator, int n) {
            this.parent = zipCoordinator;
            this.index = n;
        }

        public void dispose() {
            DisposableHelper.dispose(this);
        }

        @Override
        public void onComplete() {
            this.parent.innerComplete(this.index);
        }

        @Override
        public void onError(Throwable throwable) {
            this.parent.innerError(throwable, this.index);
        }

        @Override
        public void onSubscribe(Disposable disposable) {
            DisposableHelper.setOnce(this, disposable);
        }

        @Override
        public void onSuccess(T t) {
            this.parent.innerSuccess(t, this.index);
        }
    }

}

