/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  org.reactivestreams.Subscriber
 *  org.reactivestreams.Subscription
 */
package io.reactivex.internal.operators.flowable;

import io.reactivex.Flowable;
import io.reactivex.FlowableSubscriber;
import io.reactivex.disposables.Disposable;
import io.reactivex.exceptions.MissingBackpressureException;
import io.reactivex.internal.disposables.DisposableHelper;
import io.reactivex.internal.fuseable.SimplePlainQueue;
import io.reactivex.internal.operators.flowable.AbstractFlowableWithUpstream;
import io.reactivex.internal.queue.MpscLinkedQueue;
import io.reactivex.internal.subscribers.QueueDrainSubscriber;
import io.reactivex.internal.subscriptions.SubscriptionHelper;
import io.reactivex.internal.util.NotificationLite;
import io.reactivex.plugins.RxJavaPlugins;
import io.reactivex.processors.UnicastProcessor;
import io.reactivex.subscribers.DisposableSubscriber;
import io.reactivex.subscribers.SerializedSubscriber;
import java.util.concurrent.atomic.AtomicLong;
import java.util.concurrent.atomic.AtomicReference;
import org.reactivestreams.Publisher;
import org.reactivestreams.Subscriber;
import org.reactivestreams.Subscription;

public final class FlowableWindowBoundary<T, B>
extends AbstractFlowableWithUpstream<T, Flowable<T>> {
    final int bufferSize;
    final Publisher<B> other;

    public FlowableWindowBoundary(Flowable<T> flowable, Publisher<B> publisher, int n) {
        super(flowable);
        this.other = publisher;
        this.bufferSize = n;
    }

    @Override
    protected void subscribeActual(Subscriber<? super Flowable<T>> subscriber) {
        this.source.subscribe(new WindowBoundaryMainSubscriber(new SerializedSubscriber<Flowable<T>>(subscriber), this.other, this.bufferSize));
    }

    static final class WindowBoundaryInnerSubscriber<T, B>
    extends DisposableSubscriber<B> {
        boolean done;
        final WindowBoundaryMainSubscriber<T, B> parent;

        WindowBoundaryInnerSubscriber(WindowBoundaryMainSubscriber<T, B> windowBoundaryMainSubscriber) {
            this.parent = windowBoundaryMainSubscriber;
        }

        public void onComplete() {
            if (this.done) {
                return;
            }
            this.done = true;
            this.parent.onComplete();
        }

        public void onError(Throwable throwable) {
            if (this.done) {
                RxJavaPlugins.onError(throwable);
                return;
            }
            this.done = true;
            this.parent.onError(throwable);
        }

        public void onNext(B b) {
            if (this.done) {
                return;
            }
            this.parent.next();
        }
    }

    static final class WindowBoundaryMainSubscriber<T, B>
    extends QueueDrainSubscriber<T, Object, Flowable<T>>
    implements Subscription {
        static final Object NEXT = new Object();
        final AtomicReference<Disposable> boundary = new AtomicReference();
        final int bufferSize;
        final Publisher<B> other;
        Subscription s;
        UnicastProcessor<T> window;
        final AtomicLong windows = new AtomicLong();

        WindowBoundaryMainSubscriber(Subscriber<? super Flowable<T>> subscriber, Publisher<B> publisher, int n) {
            super(subscriber, new MpscLinkedQueue());
            this.other = publisher;
            this.bufferSize = n;
            this.windows.lazySet(1L);
        }

        @Override
        public boolean accept(Subscriber<? super Flowable<T>> subscriber, Object object) {
            return false;
        }

        public void cancel() {
            this.cancelled = true;
        }

        void drainLoop() {
            Object object = this.queue;
            Subscriber subscriber = this.actual;
            UnicastProcessor unicastProcessor = this.window;
            int n = 1;
            do {
                boolean bl = this.done;
                Object t = object.poll();
                int n2 = t == null ? 1 : 0;
                if (bl && n2 != 0) {
                    DisposableHelper.dispose(this.boundary);
                    object = this.error;
                    if (object != null) {
                        unicastProcessor.onError((Throwable)object);
                        return;
                    }
                    unicastProcessor.onComplete();
                    return;
                }
                if (n2 != 0) {
                    n = n2 = this.leave(- n);
                    if (n2 != 0) continue;
                    return;
                }
                if (t == NEXT) {
                    unicastProcessor.onComplete();
                    if (this.windows.decrementAndGet() == 0L) {
                        DisposableHelper.dispose(this.boundary);
                        return;
                    }
                    if (this.cancelled) continue;
                    unicastProcessor = UnicastProcessor.create(this.bufferSize);
                    long l = this.requested();
                    if (l != 0L) {
                        this.windows.getAndIncrement();
                        subscriber.onNext(unicastProcessor);
                        if (l != Long.MAX_VALUE) {
                            this.produced(1L);
                        }
                        this.window = unicastProcessor;
                        continue;
                    }
                    this.cancelled = true;
                    subscriber.onError((Throwable)new MissingBackpressureException("Could not deliver new window due to lack of requests"));
                    continue;
                }
                unicastProcessor.onNext(NotificationLite.getValue(t));
            } while (true);
        }

        void next() {
            this.queue.offer(NEXT);
            if (this.enter()) {
                this.drainLoop();
            }
        }

        public void onComplete() {
            if (this.done) {
                return;
            }
            this.done = true;
            if (this.enter()) {
                this.drainLoop();
            }
            if (this.windows.decrementAndGet() == 0L) {
                DisposableHelper.dispose(this.boundary);
            }
            this.actual.onComplete();
        }

        public void onError(Throwable throwable) {
            if (this.done) {
                RxJavaPlugins.onError(throwable);
                return;
            }
            this.error = throwable;
            this.done = true;
            if (this.enter()) {
                this.drainLoop();
            }
            if (this.windows.decrementAndGet() == 0L) {
                DisposableHelper.dispose(this.boundary);
            }
            this.actual.onError(throwable);
        }

        public void onNext(T t) {
            if (this.fastEnter()) {
                this.window.onNext(t);
                if (this.leave(-1) == 0) {
                    return;
                }
            } else {
                this.queue.offer(NotificationLite.next(t));
                if (!this.enter()) {
                    return;
                }
            }
            this.drainLoop();
        }

        @Override
        public void onSubscribe(Subscription subscription) {
            if (SubscriptionHelper.validate(this.s, subscription)) {
                this.s = subscription;
                WindowBoundaryInnerSubscriber windowBoundaryInnerSubscriber = this.actual;
                windowBoundaryInnerSubscriber.onSubscribe((Subscription)this);
                if (this.cancelled) {
                    return;
                }
                UnicastProcessor unicastProcessor = UnicastProcessor.create(this.bufferSize);
                long l = this.requested();
                if (l != 0L) {
                    windowBoundaryInnerSubscriber.onNext(unicastProcessor);
                    if (l != Long.MAX_VALUE) {
                        this.produced(1L);
                    }
                    this.window = unicastProcessor;
                    windowBoundaryInnerSubscriber = new WindowBoundaryInnerSubscriber(this);
                    if (this.boundary.compareAndSet(null, windowBoundaryInnerSubscriber)) {
                        this.windows.getAndIncrement();
                        subscription.request(Long.MAX_VALUE);
                        this.other.subscribe(windowBoundaryInnerSubscriber);
                        return;
                    }
                } else {
                    windowBoundaryInnerSubscriber.onError((Throwable)new MissingBackpressureException("Could not deliver first window due to lack of requests"));
                    return;
                }
            }
        }

        public void request(long l) {
            this.requested(l);
        }
    }

}

