/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  org.reactivestreams.Subscriber
 *  org.reactivestreams.Subscription
 */
package io.reactivex.internal.operators.parallel;

import io.reactivex.Flowable;
import io.reactivex.FlowableSubscriber;
import io.reactivex.exceptions.Exceptions;
import io.reactivex.internal.subscriptions.SubscriptionHelper;
import io.reactivex.internal.util.BackpressureHelper;
import io.reactivex.parallel.ParallelFlowable;
import io.reactivex.plugins.RxJavaPlugins;
import java.util.Arrays;
import java.util.Comparator;
import java.util.List;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
import java.util.concurrent.atomic.AtomicReference;
import org.reactivestreams.Subscriber;
import org.reactivestreams.Subscription;

public final class ParallelSortedJoin<T>
extends Flowable<T> {
    final Comparator<? super T> comparator;
    final ParallelFlowable<List<T>> source;

    public ParallelSortedJoin(ParallelFlowable<List<T>> parallelFlowable, Comparator<? super T> comparator) {
        this.source = parallelFlowable;
        this.comparator = comparator;
    }

    @Override
    protected void subscribeActual(Subscriber<? super T> subscriber) {
        SortedJoinSubscription<? super T> sortedJoinSubscription = new SortedJoinSubscription<T>(subscriber, this.source.parallelism(), this.comparator);
        subscriber.onSubscribe(sortedJoinSubscription);
        this.source.subscribe(sortedJoinSubscription.subscribers);
    }

    static final class SortedJoinInnerSubscriber<T>
    extends AtomicReference<Subscription>
    implements FlowableSubscriber<List<T>> {
        private static final long serialVersionUID = 6751017204873808094L;
        final int index;
        final SortedJoinSubscription<T> parent;

        SortedJoinInnerSubscriber(SortedJoinSubscription<T> sortedJoinSubscription, int n) {
            this.parent = sortedJoinSubscription;
            this.index = n;
        }

        void cancel() {
            SubscriptionHelper.cancel(this);
        }

        public void onComplete() {
        }

        public void onError(Throwable throwable) {
            this.parent.innerError(throwable);
        }

        public void onNext(List<T> list) {
            this.parent.innerNext(list, this.index);
        }

        @Override
        public void onSubscribe(Subscription subscription) {
            if (SubscriptionHelper.setOnce(this, subscription)) {
                subscription.request(Long.MAX_VALUE);
            }
        }
    }

    static final class SortedJoinSubscription<T>
    extends AtomicInteger
    implements Subscription {
        private static final long serialVersionUID = 3481980673745556697L;
        final Subscriber<? super T> actual;
        volatile boolean cancelled;
        final Comparator<? super T> comparator;
        final AtomicReference<Throwable> error = new AtomicReference();
        final int[] indexes;
        final List<T>[] lists;
        final AtomicInteger remaining = new AtomicInteger();
        final AtomicLong requested = new AtomicLong();
        final SortedJoinInnerSubscriber<T>[] subscribers;

        SortedJoinSubscription(Subscriber<? super T> arrsortedJoinInnerSubscriber, int n, Comparator<? super T> comparator) {
            this.actual = arrsortedJoinInnerSubscriber;
            this.comparator = comparator;
            arrsortedJoinInnerSubscriber = new SortedJoinInnerSubscriber[n];
            for (int i = 0; i < n; ++i) {
                arrsortedJoinInnerSubscriber[i] = new SortedJoinInnerSubscriber(this, i);
            }
            this.subscribers = arrsortedJoinInnerSubscriber;
            this.lists = new List[n];
            this.indexes = new int[n];
            this.remaining.lazySet(n);
        }

        public void cancel() {
            if (!this.cancelled) {
                this.cancelled = true;
                this.cancelAll();
                if (this.getAndIncrement() == 0) {
                    Arrays.fill(this.lists, null);
                }
            }
        }

        void cancelAll() {
            SortedJoinInnerSubscriber<T>[] arrsortedJoinInnerSubscriber = this.subscribers;
            int n = arrsortedJoinInnerSubscriber.length;
            for (int i = 0; i < n; ++i) {
                arrsortedJoinInnerSubscriber[i].cancel();
            }
        }

        /*
         * Loose catch block
         * Enabled aggressive block sorting
         * Enabled unnecessary exception pruning
         * Enabled aggressive exception aggregation
         * Lifted jumps to return sites
         */
        void drain() {
            if (this.getAndIncrement() != 0) {
                return;
            }
            Subscriber<? super T> subscriber = this.actual;
            Object[] arrobject = this.lists;
            int[] arrn = this.indexes;
            int n = arrn.length;
            int n2 = 1;
            do {
                long l;
                int n4;
                int n3;
                long l2;
                block24 : {
                    block21 : {
                        block25 : {
                            Object object;
                            block23 : {
                                block22 : {
                                    if ((l = 0L) == (l2 = this.requested.get())) break block22;
                                    if (this.cancelled) {
                                        Arrays.fill(arrobject, null);
                                        return;
                                    }
                                    object = this.error.get();
                                    if (object != null) {
                                        this.cancelAll();
                                        Arrays.fill(arrobject, null);
                                        subscriber.onError((Throwable)object);
                                        return;
                                    }
                                    break block23;
                                }
                                if (l != l2) break block24;
                                if (this.cancelled) {
                                    Arrays.fill(arrobject, null);
                                    return;
                                }
                                object = this.error.get();
                                if (object != null) {
                                    this.cancelAll();
                                    Arrays.fill(arrobject, null);
                                    subscriber.onError((Throwable)object);
                                    return;
                                }
                                break block25;
                            }
                            object = null;
                            n4 = -1;
                            n3 = 0;
                            do {
                                int n5;
                                Throwable throwable;
                                block20 : {
                                    if (n3 >= n) {
                                        Arrays.fill(arrobject, null);
                                        subscriber.onComplete();
                                        return;
                                    }
                                    Object object2 = arrobject[n3];
                                    int n6 = arrn[n3];
                                    throwable = object;
                                    n5 = n4;
                                    if (object2.size() != n6) {
                                        if (object == null) {
                                            object = object2.get(n6);
                                        } else {
                                            object2 = object2.get(n6);
                                            n5 = this.comparator.compare(object, object2);
                                            n6 = n5 > 0 ? 1 : 0;
                                            throwable = object;
                                            n5 = n4;
                                            if (n6 == 0) break block20;
                                            object = object2;
                                        }
                                        n5 = n3;
                                        throwable = object;
                                        {
                                        }
                                        catch (Throwable throwable2) {
                                            Exceptions.throwIfFatal(throwable2);
                                            this.cancelAll();
                                            Arrays.fill(arrobject, null);
                                            if (!this.error.compareAndSet(null, throwable2)) {
                                                RxJavaPlugins.onError(throwable2);
                                            }
                                            subscriber.onError(this.error.get());
                                            return;
                                        }
                                    }
                                }
                                ++n3;
                                object = throwable;
                                n4 = n5;
                            } while (true);
                        }
                        for (n3 = 0; n3 < n; ++n3) {
                            if (arrn[n3] == arrobject[n3].size()) continue;
                            n3 = 0;
                            break block21;
                        }
                        n3 = 1;
                    }
                    if (n3 != 0) {
                        Arrays.fill(arrobject, null);
                        subscriber.onComplete();
                        return;
                    }
                }
                if (l != 0L && l2 != Long.MAX_VALUE) {
                    this.requested.addAndGet(- l);
                }
                n3 = n4 = this.get();
                if (n4 == n2) {
                    n3 = n2 = this.addAndGet(- n2);
                    if (n2 == 0) {
                        return;
                    }
                }
                n2 = n3;
            } while (true);
        }

        void innerError(Throwable throwable) {
            if (this.error.compareAndSet(null, throwable)) {
                this.drain();
                return;
            }
            if (throwable != this.error.get()) {
                RxJavaPlugins.onError(throwable);
            }
        }

        void innerNext(List<T> list, int n) {
            this.lists[n] = list;
            if (this.remaining.decrementAndGet() == 0) {
                this.drain();
            }
        }

        public void request(long l) {
            if (SubscriptionHelper.validate(l)) {
                BackpressureHelper.add(this.requested, l);
                if (this.remaining.get() == 0) {
                    this.drain();
                }
            }
        }
    }

}

