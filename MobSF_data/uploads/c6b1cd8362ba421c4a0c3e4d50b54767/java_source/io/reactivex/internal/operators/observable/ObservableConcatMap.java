/*
 * Decompiled with CFR 0_132.
 */
package io.reactivex.internal.operators.observable;

import io.reactivex.ObservableSource;
import io.reactivex.Observer;
import io.reactivex.disposables.Disposable;
import io.reactivex.exceptions.Exceptions;
import io.reactivex.functions.Function;
import io.reactivex.internal.disposables.DisposableHelper;
import io.reactivex.internal.functions.ObjectHelper;
import io.reactivex.internal.fuseable.QueueDisposable;
import io.reactivex.internal.fuseable.SimpleQueue;
import io.reactivex.internal.operators.observable.AbstractObservableWithUpstream;
import io.reactivex.internal.operators.observable.ObservableScalarXMap;
import io.reactivex.internal.queue.SpscLinkedArrayQueue;
import io.reactivex.internal.util.AtomicThrowable;
import io.reactivex.internal.util.ErrorMode;
import io.reactivex.observers.SerializedObserver;
import io.reactivex.plugins.RxJavaPlugins;
import java.io.Serializable;
import java.util.concurrent.Callable;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicReference;

public final class ObservableConcatMap<T, U>
extends AbstractObservableWithUpstream<T, U> {
    final int bufferSize;
    final ErrorMode delayErrors;
    final Function<? super T, ? extends ObservableSource<? extends U>> mapper;

    public ObservableConcatMap(ObservableSource<T> observableSource, Function<? super T, ? extends ObservableSource<? extends U>> function, int n, ErrorMode errorMode) {
        super(observableSource);
        this.mapper = function;
        this.delayErrors = errorMode;
        this.bufferSize = Math.max(8, n);
    }

    @Override
    public void subscribeActual(Observer<? super U> observer) {
        if (ObservableScalarXMap.tryScalarXMapSubscribe(this.source, observer, this.mapper)) {
            return;
        }
        if (this.delayErrors == ErrorMode.IMMEDIATE) {
            observer = new SerializedObserver<U>(observer);
            this.source.subscribe(new SourceObserver<T, U>(observer, this.mapper, this.bufferSize));
            return;
        }
        ObservableSource observableSource = this.source;
        Function<? super T, ? extends ObservableSource<? extends U>> function = this.mapper;
        int n = this.bufferSize;
        boolean bl = this.delayErrors == ErrorMode.END;
        observableSource.subscribe(new ConcatMapDelayErrorObserver<T, U>(observer, function, n, bl));
    }

    static final class ConcatMapDelayErrorObserver<T, R>
    extends AtomicInteger
    implements Observer<T>,
    Disposable {
        private static final long serialVersionUID = -6951100001833242599L;
        volatile boolean active;
        final Observer<? super R> actual;
        final int bufferSize;
        volatile boolean cancelled;
        Disposable d;
        volatile boolean done;
        final AtomicThrowable error;
        final Function<? super T, ? extends ObservableSource<? extends R>> mapper;
        final DelayErrorInnerObserver<R> observer;
        SimpleQueue<T> queue;
        int sourceMode;
        final boolean tillTheEnd;

        ConcatMapDelayErrorObserver(Observer<? super R> observer, Function<? super T, ? extends ObservableSource<? extends R>> function, int n, boolean bl) {
            this.actual = observer;
            this.mapper = function;
            this.bufferSize = n;
            this.tillTheEnd = bl;
            this.error = new AtomicThrowable();
            this.observer = new DelayErrorInnerObserver<R>(observer, this);
        }

        @Override
        public void dispose() {
            this.cancelled = true;
            this.d.dispose();
            this.observer.dispose();
        }

        void drain() {
            if (this.getAndIncrement() != 0) {
                return;
            }
            Observer<R> observer = this.actual;
            SimpleQueue<T> simpleQueue = this.queue;
            Serializable serializable = this.error;
            do {
                block14 : {
                    if (!this.active) {
                        Object object;
                        if (this.cancelled) {
                            simpleQueue.clear();
                            return;
                        }
                        if (!this.tillTheEnd && (Throwable)serializable.get() != null) {
                            simpleQueue.clear();
                            this.cancelled = true;
                            observer.onError(serializable.terminate());
                            return;
                        }
                        boolean bl = this.done;
                        try {
                            object = simpleQueue.poll();
                            boolean bl2 = object == null;
                            if (bl && bl2) {
                                this.cancelled = true;
                                if ((serializable = serializable.terminate()) != null) {
                                    observer.onError((Throwable)serializable);
                                    return;
                                }
                                observer.onComplete();
                                return;
                            }
                            if (bl2) break block14;
                        }
                        catch (Throwable throwable) {
                            Exceptions.throwIfFatal(throwable);
                            this.cancelled = true;
                            this.d.dispose();
                            serializable.addThrowable(throwable);
                            observer.onError(serializable.terminate());
                            return;
                        }
                        try {
                            object = ObjectHelper.requireNonNull(this.mapper.apply(object), "The mapper returned a null ObservableSource");
                        }
                        catch (Throwable throwable) {
                            Exceptions.throwIfFatal(throwable);
                            this.cancelled = true;
                            this.d.dispose();
                            simpleQueue.clear();
                            serializable.addThrowable(throwable);
                            observer.onError(serializable.terminate());
                            return;
                        }
                        if (object instanceof Callable) {
                            try {
                                if ((object = ((Callable)object).call()) == null || this.cancelled) continue;
                                observer.onNext(object);
                            }
                            catch (Throwable throwable) {
                                Exceptions.throwIfFatal(throwable);
                                serializable.addThrowable(throwable);
                            }
                            continue;
                        }
                        this.active = true;
                        object.subscribe(this.observer);
                    }
                }
                if (this.decrementAndGet() == 0) break;
            } while (true);
        }

        @Override
        public boolean isDisposed() {
            return this.cancelled;
        }

        @Override
        public void onComplete() {
            this.done = true;
            this.drain();
        }

        @Override
        public void onError(Throwable throwable) {
            if (this.error.addThrowable(throwable)) {
                this.done = true;
                this.drain();
                return;
            }
            RxJavaPlugins.onError(throwable);
        }

        @Override
        public void onNext(T t) {
            if (this.sourceMode == 0) {
                this.queue.offer(t);
            }
            this.drain();
        }

        @Override
        public void onSubscribe(Disposable disposable) {
            if (DisposableHelper.validate(this.d, disposable)) {
                this.d = disposable;
                if (disposable instanceof QueueDisposable) {
                    int n = (disposable = (QueueDisposable)disposable).requestFusion(3);
                    if (n == 1) {
                        this.sourceMode = n;
                        this.queue = disposable;
                        this.done = true;
                        this.actual.onSubscribe(this);
                        this.drain();
                        return;
                    }
                    if (n == 2) {
                        this.sourceMode = n;
                        this.queue = disposable;
                        this.actual.onSubscribe(this);
                        return;
                    }
                }
                this.queue = new SpscLinkedArrayQueue(this.bufferSize);
                this.actual.onSubscribe(this);
            }
        }

        static final class DelayErrorInnerObserver<R>
        extends AtomicReference<Disposable>
        implements Observer<R> {
            private static final long serialVersionUID = 2620149119579502636L;
            final Observer<? super R> actual;
            final ConcatMapDelayErrorObserver<?, R> parent;

            DelayErrorInnerObserver(Observer<? super R> observer, ConcatMapDelayErrorObserver<?, R> concatMapDelayErrorObserver) {
                this.actual = observer;
                this.parent = concatMapDelayErrorObserver;
            }

            void dispose() {
                DisposableHelper.dispose(this);
            }

            @Override
            public void onComplete() {
                ConcatMapDelayErrorObserver<?, R> concatMapDelayErrorObserver = this.parent;
                concatMapDelayErrorObserver.active = false;
                concatMapDelayErrorObserver.drain();
            }

            @Override
            public void onError(Throwable throwable) {
                ConcatMapDelayErrorObserver<?, R> concatMapDelayErrorObserver = this.parent;
                if (concatMapDelayErrorObserver.error.addThrowable(throwable)) {
                    if (!concatMapDelayErrorObserver.tillTheEnd) {
                        concatMapDelayErrorObserver.d.dispose();
                    }
                    concatMapDelayErrorObserver.active = false;
                    concatMapDelayErrorObserver.drain();
                    return;
                }
                RxJavaPlugins.onError(throwable);
            }

            @Override
            public void onNext(R r) {
                this.actual.onNext(r);
            }

            @Override
            public void onSubscribe(Disposable disposable) {
                DisposableHelper.replace(this, disposable);
            }
        }

    }

    static final class SourceObserver<T, U>
    extends AtomicInteger
    implements Observer<T>,
    Disposable {
        private static final long serialVersionUID = 8828587559905699186L;
        volatile boolean active;
        final Observer<? super U> actual;
        final int bufferSize;
        volatile boolean disposed;
        volatile boolean done;
        int fusionMode;
        final InnerObserver<U> inner;
        final Function<? super T, ? extends ObservableSource<? extends U>> mapper;
        SimpleQueue<T> queue;
        Disposable s;

        SourceObserver(Observer<? super U> observer, Function<? super T, ? extends ObservableSource<? extends U>> function, int n) {
            this.actual = observer;
            this.mapper = function;
            this.bufferSize = n;
            this.inner = new InnerObserver<U>(observer, this);
        }

        @Override
        public void dispose() {
            this.disposed = true;
            this.inner.dispose();
            this.s.dispose();
            if (this.getAndIncrement() == 0) {
                this.queue.clear();
            }
        }

        void drain() {
            if (this.getAndIncrement() != 0) {
                return;
            }
            do {
                Object object;
                if (this.disposed) {
                    this.queue.clear();
                    return;
                }
                if (this.active) continue;
                boolean bl = this.done;
                try {
                    object = this.queue.poll();
                    boolean bl2 = object == null;
                    if (bl && bl2) {
                        this.disposed = true;
                        this.actual.onComplete();
                        return;
                    }
                    if (bl2) continue;
                }
                catch (Throwable throwable) {
                    Exceptions.throwIfFatal(throwable);
                    this.dispose();
                    this.queue.clear();
                    this.actual.onError(throwable);
                    return;
                }
                try {
                    object = ObjectHelper.requireNonNull(this.mapper.apply(object), "The mapper returned a null ObservableSource");
                    this.active = true;
                    object.subscribe(this.inner);
                }
                catch (Throwable throwable) {
                    Exceptions.throwIfFatal(throwable);
                    this.dispose();
                    this.queue.clear();
                    this.actual.onError(throwable);
                    return;
                }
            } while (this.decrementAndGet() != 0);
        }

        void innerComplete() {
            this.active = false;
            this.drain();
        }

        @Override
        public boolean isDisposed() {
            return this.disposed;
        }

        @Override
        public void onComplete() {
            if (this.done) {
                return;
            }
            this.done = true;
            this.drain();
        }

        @Override
        public void onError(Throwable throwable) {
            if (this.done) {
                RxJavaPlugins.onError(throwable);
                return;
            }
            this.done = true;
            this.dispose();
            this.actual.onError(throwable);
        }

        @Override
        public void onNext(T t) {
            if (this.done) {
                return;
            }
            if (this.fusionMode == 0) {
                this.queue.offer(t);
            }
            this.drain();
        }

        @Override
        public void onSubscribe(Disposable disposable) {
            if (DisposableHelper.validate(this.s, disposable)) {
                this.s = disposable;
                if (disposable instanceof QueueDisposable) {
                    int n = (disposable = (QueueDisposable)disposable).requestFusion(3);
                    if (n == 1) {
                        this.fusionMode = n;
                        this.queue = disposable;
                        this.done = true;
                        this.actual.onSubscribe(this);
                        this.drain();
                        return;
                    }
                    if (n == 2) {
                        this.fusionMode = n;
                        this.queue = disposable;
                        this.actual.onSubscribe(this);
                        return;
                    }
                }
                this.queue = new SpscLinkedArrayQueue(this.bufferSize);
                this.actual.onSubscribe(this);
            }
        }

        static final class InnerObserver<U>
        extends AtomicReference<Disposable>
        implements Observer<U> {
            private static final long serialVersionUID = -7449079488798789337L;
            final Observer<? super U> actual;
            final SourceObserver<?, ?> parent;

            InnerObserver(Observer<? super U> observer, SourceObserver<?, ?> sourceObserver) {
                this.actual = observer;
                this.parent = sourceObserver;
            }

            void dispose() {
                DisposableHelper.dispose(this);
            }

            @Override
            public void onComplete() {
                this.parent.innerComplete();
            }

            @Override
            public void onError(Throwable throwable) {
                this.parent.dispose();
                this.actual.onError(throwable);
            }

            @Override
            public void onNext(U u) {
                this.actual.onNext(u);
            }

            @Override
            public void onSubscribe(Disposable disposable) {
                DisposableHelper.set(this, disposable);
            }
        }

    }

}

