/*
 * Decompiled with CFR 0_132.
 */
package io.reactivex.internal.operators.observable;

import io.reactivex.ObservableSource;
import io.reactivex.Observer;
import io.reactivex.annotations.Nullable;
import io.reactivex.functions.BiPredicate;
import io.reactivex.functions.Function;
import io.reactivex.internal.fuseable.QueueDisposable;
import io.reactivex.internal.observers.BasicFuseableObserver;
import io.reactivex.internal.operators.observable.AbstractObservableWithUpstream;

public final class ObservableDistinctUntilChanged<T, K>
extends AbstractObservableWithUpstream<T, T> {
    final BiPredicate<? super K, ? super K> comparer;
    final Function<? super T, K> keySelector;

    public ObservableDistinctUntilChanged(ObservableSource<T> observableSource, Function<? super T, K> function, BiPredicate<? super K, ? super K> biPredicate) {
        super(observableSource);
        this.keySelector = function;
        this.comparer = biPredicate;
    }

    @Override
    protected void subscribeActual(Observer<? super T> observer) {
        this.source.subscribe(new DistinctUntilChangedObserver<T, K>(observer, this.keySelector, this.comparer));
    }

    static final class DistinctUntilChangedObserver<T, K>
    extends BasicFuseableObserver<T, T> {
        final BiPredicate<? super K, ? super K> comparer;
        boolean hasValue;
        final Function<? super T, K> keySelector;
        K last;

        DistinctUntilChangedObserver(Observer<? super T> observer, Function<? super T, K> function, BiPredicate<? super K, ? super K> biPredicate) {
            super(observer);
            this.keySelector = function;
            this.comparer = biPredicate;
        }

        @Override
        public void onNext(T t) {
            block7 : {
                K k;
                block6 : {
                    if (this.done) {
                        return;
                    }
                    if (this.sourceMode != 0) {
                        this.actual.onNext(t);
                        return;
                    }
                    try {
                        k = this.keySelector.apply(t);
                        if (!this.hasValue) break block6;
                        boolean bl = this.comparer.test(this.last, k);
                        this.last = k;
                        if (bl) {
                            return;
                        }
                        break block7;
                    }
                    catch (Throwable throwable) {
                        this.fail(throwable);
                        return;
                    }
                }
                this.hasValue = true;
                this.last = k;
            }
            this.actual.onNext(t);
        }

        @Nullable
        @Override
        public T poll() throws Exception {
            Object t;
            while ((t = this.qs.poll()) != null) {
                K k = this.keySelector.apply(t);
                if (!this.hasValue) {
                    this.hasValue = true;
                    this.last = k;
                    return t;
                }
                if (!this.comparer.test(this.last, k)) {
                    this.last = k;
                    return t;
                }
                this.last = k;
            }
            return null;
        }

        @Override
        public int requestFusion(int n) {
            return this.transitiveBoundaryFusion(n);
        }
    }

}

