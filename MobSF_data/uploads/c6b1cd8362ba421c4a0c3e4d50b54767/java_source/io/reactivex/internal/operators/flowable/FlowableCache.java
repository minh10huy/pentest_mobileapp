/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  org.reactivestreams.Subscriber
 *  org.reactivestreams.Subscription
 */
package io.reactivex.internal.operators.flowable;

import io.reactivex.Flowable;
import io.reactivex.FlowableSubscriber;
import io.reactivex.internal.operators.flowable.AbstractFlowableWithUpstream;
import io.reactivex.internal.subscriptions.SubscriptionHelper;
import io.reactivex.internal.util.BackpressureHelper;
import io.reactivex.internal.util.LinkedArrayList;
import io.reactivex.internal.util.NotificationLite;
import io.reactivex.plugins.RxJavaPlugins;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
import java.util.concurrent.atomic.AtomicReference;
import org.reactivestreams.Subscriber;
import org.reactivestreams.Subscription;

public final class FlowableCache<T>
extends AbstractFlowableWithUpstream<T, T> {
    final AtomicBoolean once;
    final CacheState<T> state;

    public FlowableCache(Flowable<T> flowable, int n) {
        super(flowable);
        this.state = new CacheState<T>(flowable, n);
        this.once = new AtomicBoolean();
    }

    int cachedEventCount() {
        return this.state.size();
    }

    boolean hasSubscribers() {
        if (this.state.subscribers.get().length != 0) {
            return true;
        }
        return false;
    }

    boolean isConnected() {
        return this.state.isConnected;
    }

    @Override
    protected void subscribeActual(Subscriber<? super T> subscriber) {
        ReplaySubscription<? super T> replaySubscription = new ReplaySubscription<T>(subscriber, this.state);
        this.state.addChild(replaySubscription);
        subscriber.onSubscribe(replaySubscription);
        if (!this.once.get() && this.once.compareAndSet(false, true)) {
            this.state.connect();
        }
    }

    static final class CacheState<T>
    extends LinkedArrayList
    implements FlowableSubscriber<T> {
        static final ReplaySubscription[] EMPTY = new ReplaySubscription[0];
        static final ReplaySubscription[] TERMINATED = new ReplaySubscription[0];
        final AtomicReference<Subscription> connection = new AtomicReference();
        volatile boolean isConnected;
        final Flowable<T> source;
        boolean sourceDone;
        final AtomicReference<ReplaySubscription<T>[]> subscribers;

        CacheState(Flowable<T> flowable, int n) {
            super(n);
            this.source = flowable;
            this.subscribers = new AtomicReference<ReplaySubscription[]>(EMPTY);
        }

        public void addChild(ReplaySubscription<T> replaySubscription) {
            ReplaySubscription[] arrreplaySubscription;
            ReplaySubscription<T>[] arrreplaySubscription2;
            do {
                if ((arrreplaySubscription2 = this.subscribers.get()) == TERMINATED) {
                    return;
                }
                int n = arrreplaySubscription2.length;
                arrreplaySubscription = new ReplaySubscription[n + 1];
                System.arraycopy(arrreplaySubscription2, 0, arrreplaySubscription, 0, n);
                arrreplaySubscription[n] = replaySubscription;
            } while (!this.subscribers.compareAndSet(arrreplaySubscription2, arrreplaySubscription));
        }

        public void connect() {
            this.source.subscribe(this);
            this.isConnected = true;
        }

        public void onComplete() {
            if (!this.sourceDone) {
                this.sourceDone = true;
                this.add(NotificationLite.complete());
                SubscriptionHelper.cancel(this.connection);
                ReplaySubscription[] arrreplaySubscription = this.subscribers.getAndSet(TERMINATED);
                int n = arrreplaySubscription.length;
                for (int i = 0; i < n; ++i) {
                    arrreplaySubscription[i].replay();
                }
            }
        }

        public void onError(Throwable arrreplaySubscription) {
            if (!this.sourceDone) {
                this.sourceDone = true;
                this.add(NotificationLite.error((Throwable)arrreplaySubscription));
                SubscriptionHelper.cancel(this.connection);
                arrreplaySubscription = this.subscribers.getAndSet(TERMINATED);
                int n = arrreplaySubscription.length;
                for (int i = 0; i < n; ++i) {
                    arrreplaySubscription[i].replay();
                }
            } else {
                RxJavaPlugins.onError((Throwable)arrreplaySubscription);
            }
        }

        public void onNext(T object) {
            if (!this.sourceDone) {
                this.add(NotificationLite.next(object));
                object = this.subscribers.get();
                int n = ((T)object).length;
                for (int i = 0; i < n; ++i) {
                    object[i].replay();
                }
            }
        }

        @Override
        public void onSubscribe(Subscription subscription) {
            if (SubscriptionHelper.setOnce(this.connection, subscription)) {
                subscription.request(Long.MAX_VALUE);
            }
        }

        public void removeChild(ReplaySubscription<T> replaySubscription) {
            ReplaySubscription<T>[] arrreplaySubscription;
            ReplaySubscription[] arrreplaySubscription2;
            do {
                int n;
                int n2;
                if ((n2 = (arrreplaySubscription = this.subscribers.get()).length) == 0) {
                    return;
                }
                int n3 = -1;
                int n4 = 0;
                do {
                    n = n3;
                    if (n4 >= n2) break;
                    if (arrreplaySubscription[n4].equals(replaySubscription)) {
                        n = n4;
                        break;
                    }
                    ++n4;
                } while (true);
                if (n < 0) {
                    return;
                }
                if (n2 == 1) {
                    arrreplaySubscription2 = EMPTY;
                    continue;
                }
                arrreplaySubscription2 = new ReplaySubscription[n2 - 1];
                System.arraycopy(arrreplaySubscription, 0, arrreplaySubscription2, 0, n);
                System.arraycopy(arrreplaySubscription, n + 1, arrreplaySubscription2, n, n2 - n - 1);
            } while (!this.subscribers.compareAndSet(arrreplaySubscription, arrreplaySubscription2));
        }
    }

    static final class ReplaySubscription<T>
    extends AtomicInteger
    implements Subscription {
        private static final long CANCELLED = -1L;
        private static final long serialVersionUID = -2557562030197141021L;
        final Subscriber<? super T> child;
        Object[] currentBuffer;
        int currentIndexInBuffer;
        int index;
        final AtomicLong requested;
        final CacheState<T> state;

        ReplaySubscription(Subscriber<? super T> subscriber, CacheState<T> cacheState) {
            this.child = subscriber;
            this.state = cacheState;
            this.requested = new AtomicLong();
        }

        public void cancel() {
            if (this.requested.getAndSet(-1L) != -1L) {
                this.state.removeChild(this);
            }
        }

        public void replay() {
            if (this.getAndIncrement() != 0) {
                return;
            }
            Subscriber<? super T> subscriber = this.child;
            AtomicLong atomicLong = this.requested;
            int n = 1;
            do {
                long l;
                Object object;
                if ((l = atomicLong.get()) < 0L) {
                    return;
                }
                int n2 = this.state.size();
                if (n2 == 0) continue;
                Object[] arrobject = object = this.currentBuffer;
                if (object == null) {
                    this.currentBuffer = arrobject = this.state.head();
                }
                int n3 = arrobject.length - 1;
                int n4 = this.index;
                int n5 = this.currentIndexInBuffer;
                int n6 = 0;
                while (n4 < n2 && l > 0L) {
                    if (atomicLong.get() == -1L) {
                        return;
                    }
                    object = arrobject;
                    int n7 = n5;
                    if (n5 == n3) {
                        object = (Object[])arrobject[n3];
                        n7 = 0;
                    }
                    if (NotificationLite.accept(object[n7], subscriber)) {
                        return;
                    }
                    n5 = n7 + 1;
                    ++n4;
                    ++n6;
                    --l;
                    arrobject = object;
                }
                if (atomicLong.get() == -1L) {
                    return;
                }
                if (l == 0L) {
                    object = arrobject[n5];
                    if (NotificationLite.isComplete(object)) {
                        subscriber.onComplete();
                        return;
                    }
                    if (NotificationLite.isError(object)) {
                        subscriber.onError(NotificationLite.getError(object));
                        return;
                    }
                }
                if (n6 != 0) {
                    BackpressureHelper.producedCancel(atomicLong, n6);
                }
                this.index = n4;
                this.currentIndexInBuffer = n5;
                this.currentBuffer = arrobject;
            } while ((n = this.addAndGet(- n)) != 0);
        }

        public void request(long l) {
            if (SubscriptionHelper.validate(l)) {
                long l2;
                long l3;
                do {
                    if ((l3 = this.requested.get()) != -1L) continue;
                    return;
                } while (!this.requested.compareAndSet(l3, l2 = BackpressureHelper.addCap(l3, l)));
                this.replay();
                return;
            }
        }
    }

}

