/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  org.reactivestreams.Subscriber
 *  org.reactivestreams.Subscription
 */
package io.reactivex.internal.operators.flowable;

import io.reactivex.Flowable;
import io.reactivex.FlowableSubscriber;
import io.reactivex.exceptions.Exceptions;
import io.reactivex.functions.BooleanSupplier;
import io.reactivex.internal.functions.ObjectHelper;
import io.reactivex.internal.operators.flowable.AbstractFlowableWithUpstream;
import io.reactivex.internal.subscriptions.SubscriptionHelper;
import io.reactivex.internal.util.BackpressureHelper;
import io.reactivex.internal.util.QueueDrainHelper;
import io.reactivex.plugins.RxJavaPlugins;
import java.util.ArrayDeque;
import java.util.Collection;
import java.util.Iterator;
import java.util.concurrent.Callable;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
import org.reactivestreams.Subscriber;
import org.reactivestreams.Subscription;

public final class FlowableBuffer<T, C extends Collection<? super T>>
extends AbstractFlowableWithUpstream<T, C> {
    final Callable<C> bufferSupplier;
    final int size;
    final int skip;

    public FlowableBuffer(Flowable<T> flowable, int n, int n2, Callable<C> callable) {
        super(flowable);
        this.size = n;
        this.skip = n2;
        this.bufferSupplier = callable;
    }

    @Override
    public void subscribeActual(Subscriber<? super C> subscriber) {
        if (this.size == this.skip) {
            this.source.subscribe(new PublisherBufferExactSubscriber(subscriber, this.size, this.bufferSupplier));
            return;
        }
        if (this.skip > this.size) {
            this.source.subscribe(new PublisherBufferSkipSubscriber(subscriber, this.size, this.skip, this.bufferSupplier));
            return;
        }
        this.source.subscribe(new PublisherBufferOverlappingSubscriber(subscriber, this.size, this.skip, this.bufferSupplier));
    }

    static final class PublisherBufferExactSubscriber<T, C extends Collection<? super T>>
    implements FlowableSubscriber<T>,
    Subscription {
        final Subscriber<? super C> actual;
        C buffer;
        final Callable<C> bufferSupplier;
        boolean done;
        int index;
        Subscription s;
        final int size;

        PublisherBufferExactSubscriber(Subscriber<? super C> subscriber, int n, Callable<C> callable) {
            this.actual = subscriber;
            this.size = n;
            this.bufferSupplier = callable;
        }

        public void cancel() {
            this.s.cancel();
        }

        public void onComplete() {
            if (this.done) {
                return;
            }
            this.done = true;
            C c = this.buffer;
            if (c != null && !c.isEmpty()) {
                this.actual.onNext(c);
            }
            this.actual.onComplete();
        }

        public void onError(Throwable throwable) {
            if (this.done) {
                RxJavaPlugins.onError(throwable);
                return;
            }
            this.done = true;
            this.actual.onError(throwable);
        }

        public void onNext(T t) {
            C c;
            if (this.done) {
                return;
            }
            Object object = c = this.buffer;
            if (c == null) {
                try {
                    this.buffer = object = (Collection)ObjectHelper.requireNonNull(this.bufferSupplier.call(), "The bufferSupplier returned a null buffer");
                }
                catch (Throwable throwable) {
                    Exceptions.throwIfFatal(throwable);
                    this.cancel();
                    this.onError(throwable);
                    return;
                }
            }
            object.add(t);
            int n = this.index + 1;
            if (n == this.size) {
                this.index = 0;
                this.buffer = null;
                this.actual.onNext(object);
                return;
            }
            this.index = n;
        }

        @Override
        public void onSubscribe(Subscription subscription) {
            if (SubscriptionHelper.validate(this.s, subscription)) {
                this.s = subscription;
                this.actual.onSubscribe((Subscription)this);
            }
        }

        public void request(long l) {
            if (SubscriptionHelper.validate(l)) {
                this.s.request(BackpressureHelper.multiplyCap(l, this.size));
            }
        }
    }

    static final class PublisherBufferOverlappingSubscriber<T, C extends Collection<? super T>>
    extends AtomicLong
    implements FlowableSubscriber<T>,
    Subscription,
    BooleanSupplier {
        private static final long serialVersionUID = -7370244972039324525L;
        final Subscriber<? super C> actual;
        final Callable<C> bufferSupplier;
        final ArrayDeque<C> buffers;
        volatile boolean cancelled;
        boolean done;
        int index;
        final AtomicBoolean once;
        long produced;
        Subscription s;
        final int size;
        final int skip;

        PublisherBufferOverlappingSubscriber(Subscriber<? super C> subscriber, int n, int n2, Callable<C> callable) {
            this.actual = subscriber;
            this.size = n;
            this.skip = n2;
            this.bufferSupplier = callable;
            this.once = new AtomicBoolean();
            this.buffers = new ArrayDeque();
        }

        public void cancel() {
            this.cancelled = true;
            this.s.cancel();
        }

        @Override
        public boolean getAsBoolean() {
            return this.cancelled;
        }

        public void onComplete() {
            if (this.done) {
                return;
            }
            this.done = true;
            long l = this.produced;
            if (l != 0L) {
                BackpressureHelper.produced(this, l);
            }
            QueueDrainHelper.postComplete(this.actual, this.buffers, this, this);
        }

        public void onError(Throwable throwable) {
            if (this.done) {
                RxJavaPlugins.onError(throwable);
                return;
            }
            this.done = true;
            this.buffers.clear();
            this.actual.onError(throwable);
        }

        public void onNext(T t) {
            Collection collection;
            if (this.done) {
                return;
            }
            Object object = this.buffers;
            int n = this.index;
            int n2 = n + 1;
            if (n == 0) {
                try {
                    collection = (Collection)ObjectHelper.requireNonNull(this.bufferSupplier.call(), "The bufferSupplier returned a null buffer");
                    object.offer(collection);
                }
                catch (Throwable throwable) {
                    Exceptions.throwIfFatal(throwable);
                    this.cancel();
                    this.onError(throwable);
                    return;
                }
            }
            if ((collection = (Collection)object.peek()) != null && collection.size() + 1 == this.size) {
                object.poll();
                collection.add(t);
                ++this.produced;
                this.actual.onNext((Object)collection);
            }
            object = object.iterator();
            while (object.hasNext()) {
                ((Collection)object.next()).add(t);
            }
            n = n2;
            if (n2 == this.skip) {
                n = 0;
            }
            this.index = n;
        }

        @Override
        public void onSubscribe(Subscription subscription) {
            if (SubscriptionHelper.validate(this.s, subscription)) {
                this.s = subscription;
                this.actual.onSubscribe((Subscription)this);
            }
        }

        public void request(long l) {
            if (SubscriptionHelper.validate(l)) {
                if (QueueDrainHelper.postCompleteRequest(l, this.actual, this.buffers, this, this)) {
                    return;
                }
                if (!this.once.get() && this.once.compareAndSet(false, true)) {
                    l = BackpressureHelper.multiplyCap(this.skip, l - 1L);
                    l = BackpressureHelper.addCap(this.size, l);
                    this.s.request(l);
                    return;
                }
                l = BackpressureHelper.multiplyCap(this.skip, l);
                this.s.request(l);
            }
        }
    }

    static final class PublisherBufferSkipSubscriber<T, C extends Collection<? super T>>
    extends AtomicInteger
    implements FlowableSubscriber<T>,
    Subscription {
        private static final long serialVersionUID = -5616169793639412593L;
        final Subscriber<? super C> actual;
        C buffer;
        final Callable<C> bufferSupplier;
        boolean done;
        int index;
        Subscription s;
        final int size;
        final int skip;

        PublisherBufferSkipSubscriber(Subscriber<? super C> subscriber, int n, int n2, Callable<C> callable) {
            this.actual = subscriber;
            this.size = n;
            this.skip = n2;
            this.bufferSupplier = callable;
        }

        public void cancel() {
            this.s.cancel();
        }

        public void onComplete() {
            if (this.done) {
                return;
            }
            this.done = true;
            C c = this.buffer;
            this.buffer = null;
            if (c != null) {
                this.actual.onNext(c);
            }
            this.actual.onComplete();
        }

        public void onError(Throwable throwable) {
            if (this.done) {
                RxJavaPlugins.onError(throwable);
                return;
            }
            this.done = true;
            this.buffer = null;
            this.actual.onError(throwable);
        }

        public void onNext(T t) {
            if (this.done) {
                return;
            }
            Object object = this.buffer;
            int n = this.index;
            int n2 = n + 1;
            if (n == 0) {
                try {
                    this.buffer = object = (Collection)ObjectHelper.requireNonNull(this.bufferSupplier.call(), "The bufferSupplier returned a null buffer");
                }
                catch (Throwable throwable) {
                    Exceptions.throwIfFatal(throwable);
                    this.cancel();
                    this.onError(throwable);
                    return;
                }
            }
            if (object != null) {
                object.add(t);
                if (object.size() == this.size) {
                    this.buffer = null;
                    this.actual.onNext(object);
                }
            }
            n = n2;
            if (n2 == this.skip) {
                n = 0;
            }
            this.index = n;
        }

        @Override
        public void onSubscribe(Subscription subscription) {
            if (SubscriptionHelper.validate(this.s, subscription)) {
                this.s = subscription;
                this.actual.onSubscribe((Subscription)this);
            }
        }

        public void request(long l) {
            if (SubscriptionHelper.validate(l)) {
                if (this.get() == 0 && this.compareAndSet(0, 1)) {
                    long l2 = BackpressureHelper.multiplyCap(l, this.size);
                    l = BackpressureHelper.multiplyCap(this.skip - this.size, l - 1L);
                    this.s.request(BackpressureHelper.addCap(l2, l));
                    return;
                }
                this.s.request(BackpressureHelper.multiplyCap(this.skip, l));
            }
        }
    }

}

