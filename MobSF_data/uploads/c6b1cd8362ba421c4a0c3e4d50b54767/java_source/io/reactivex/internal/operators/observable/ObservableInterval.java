/*
 * Decompiled with CFR 0_132.
 */
package io.reactivex.internal.operators.observable;

import io.reactivex.Observable;
import io.reactivex.Observer;
import io.reactivex.Scheduler;
import io.reactivex.disposables.Disposable;
import io.reactivex.internal.disposables.DisposableHelper;
import io.reactivex.internal.schedulers.TrampolineScheduler;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicReference;

public final class ObservableInterval
extends Observable<Long> {
    final long initialDelay;
    final long period;
    final Scheduler scheduler;
    final TimeUnit unit;

    public ObservableInterval(long l, long l2, TimeUnit timeUnit, Scheduler scheduler) {
        this.initialDelay = l;
        this.period = l2;
        this.unit = timeUnit;
        this.scheduler = scheduler;
    }

    @Override
    public void subscribeActual(Observer<? super Long> object) {
        IntervalObserver intervalObserver = new IntervalObserver((Observer<? super Long>)object);
        object.onSubscribe(intervalObserver);
        object = this.scheduler;
        if (object instanceof TrampolineScheduler) {
            object = object.createWorker();
            intervalObserver.setResource((Disposable)object);
            object.schedulePeriodically(intervalObserver, this.initialDelay, this.period, this.unit);
            return;
        }
        intervalObserver.setResource(object.schedulePeriodicallyDirect(intervalObserver, this.initialDelay, this.period, this.unit));
    }

    static final class IntervalObserver
    extends AtomicReference<Disposable>
    implements Disposable,
    Runnable {
        private static final long serialVersionUID = 346773832286157679L;
        final Observer<? super Long> actual;
        long count;

        IntervalObserver(Observer<? super Long> observer) {
            this.actual = observer;
        }

        @Override
        public void dispose() {
            DisposableHelper.dispose(this);
        }

        @Override
        public boolean isDisposed() {
            if (this.get() == DisposableHelper.DISPOSED) {
                return true;
            }
            return false;
        }

        @Override
        public void run() {
            if (this.get() != DisposableHelper.DISPOSED) {
                Observer<? super Long> observer = this.actual;
                long l = this.count;
                this.count = l + 1L;
                observer.onNext((Long)l);
            }
        }

        public void setResource(Disposable disposable) {
            DisposableHelper.setOnce(this, disposable);
        }
    }

}

