/*
 * Decompiled with CFR 0_132.
 */
package io.reactivex.internal.operators.observable;

import io.reactivex.Observable;
import io.reactivex.ObservableSource;
import io.reactivex.Observer;
import io.reactivex.disposables.Disposable;
import io.reactivex.exceptions.Exceptions;
import io.reactivex.functions.BiPredicate;
import io.reactivex.internal.disposables.ArrayCompositeDisposable;
import io.reactivex.internal.queue.SpscLinkedArrayQueue;
import java.util.concurrent.atomic.AtomicInteger;

public final class ObservableSequenceEqual<T>
extends Observable<Boolean> {
    final int bufferSize;
    final BiPredicate<? super T, ? super T> comparer;
    final ObservableSource<? extends T> first;
    final ObservableSource<? extends T> second;

    public ObservableSequenceEqual(ObservableSource<? extends T> observableSource, ObservableSource<? extends T> observableSource2, BiPredicate<? super T, ? super T> biPredicate, int n) {
        this.first = observableSource;
        this.second = observableSource2;
        this.comparer = biPredicate;
        this.bufferSize = n;
    }

    @Override
    public void subscribeActual(Observer<? super Boolean> observer) {
        EqualCoordinator<T> equalCoordinator = new EqualCoordinator<T>(observer, this.bufferSize, this.first, this.second, this.comparer);
        observer.onSubscribe(equalCoordinator);
        equalCoordinator.subscribe();
    }

    static final class EqualCoordinator<T>
    extends AtomicInteger
    implements Disposable {
        private static final long serialVersionUID = -6178010334400373240L;
        final Observer<? super Boolean> actual;
        volatile boolean cancelled;
        final BiPredicate<? super T, ? super T> comparer;
        final ObservableSource<? extends T> first;
        final EqualObserver<T>[] observers;
        final ArrayCompositeDisposable resources;
        final ObservableSource<? extends T> second;
        T v1;
        T v2;

        EqualCoordinator(Observer<? super Boolean> arrequalObserver, int n, ObservableSource<? extends T> observableSource, ObservableSource<? extends T> observableSource2, BiPredicate<? super T, ? super T> biPredicate) {
            this.actual = arrequalObserver;
            this.first = observableSource;
            this.second = observableSource2;
            this.comparer = biPredicate;
            arrequalObserver = new EqualObserver[2];
            this.observers = arrequalObserver;
            arrequalObserver[0] = new EqualObserver(this, 0, n);
            arrequalObserver[1] = new EqualObserver(this, 1, n);
            this.resources = new ArrayCompositeDisposable(2);
        }

        void cancel(SpscLinkedArrayQueue<T> spscLinkedArrayQueue, SpscLinkedArrayQueue<T> spscLinkedArrayQueue2) {
            this.cancelled = true;
            spscLinkedArrayQueue.clear();
            spscLinkedArrayQueue2.clear();
        }

        @Override
        public void dispose() {
            if (!this.cancelled) {
                this.cancelled = true;
                this.resources.dispose();
                if (this.getAndIncrement() == 0) {
                    EqualObserver<T>[] arrequalObserver = this.observers;
                    arrequalObserver[0].queue.clear();
                    arrequalObserver[1].queue.clear();
                }
            }
        }

        /*
         * Unable to fully structure code
         * Enabled aggressive block sorting
         * Enabled unnecessary exception pruning
         * Enabled aggressive exception aggregation
         * Lifted jumps to return sites
         */
        void drain() {
            if (this.getAndIncrement() != 0) {
                return;
            }
            var8_1 = this.observers;
            var7_2 = var8_1[0];
            var6_4 = var7_2.queue;
            var9_5 = var8_1[1];
            var8_1 = var9_5.queue;
            var1_6 = 1;
            do lbl-1000: // 3 sources:
            {
                if (this.cancelled) {
                    var6_4.clear();
                    var8_1.clear();
                    return;
                }
                var4_9 = var7_2.done;
                if (var4_9 && (var10_11 = var7_2.error) != null) {
                    this.cancel(var6_4, (SpscLinkedArrayQueue<T>)var8_1);
                    this.actual.onError(var10_11);
                    return;
                }
                var5_10 = var9_5.done;
                if (var5_10 && (var10_11 = var9_5.error) != null) {
                    this.cancel(var6_4, (SpscLinkedArrayQueue<T>)var8_1);
                    this.actual.onError(var10_11);
                    return;
                }
                if (this.v1 == null) {
                    this.v1 = var6_4.poll();
                }
                var2_7 = this.v1 == null ? 1 : 0;
                if (this.v2 == null) {
                    this.v2 = var8_1.poll();
                }
                var3_8 = this.v2 == null;
                if (var4_9 && var5_10 && var2_7 != 0 && var3_8) {
                    this.actual.onNext((Boolean)true);
                    this.actual.onComplete();
                    return;
                }
                if (var4_9 && var5_10 && var2_7 != var3_8) {
                    this.cancel(var6_4, (SpscLinkedArrayQueue<T>)var8_1);
                    this.actual.onNext((Boolean)false);
                    this.actual.onComplete();
                    return;
                }
                if (var2_7 == 0 && !var3_8) {
                    try {
                        var4_9 = this.comparer.test(this.v1, this.v2);
                        if (!var4_9) {
                            this.cancel(var6_4, (SpscLinkedArrayQueue<T>)var8_1);
                            this.actual.onNext((Boolean)false);
                            this.actual.onComplete();
                            return;
                        }
                        this.v1 = null;
                        this.v2 = null;
                    }
                    catch (Throwable var7_3) {
                        Exceptions.throwIfFatal(var7_3);
                        this.cancel(var6_4, (SpscLinkedArrayQueue<T>)var8_1);
                        this.actual.onError(var7_3);
                        return;
                    }
                }
                if (var2_7 == 0 && !var3_8) ** GOTO lbl-1000
                var1_6 = var2_7 = this.addAndGet(- var1_6);
            } while (var2_7 != 0);
        }

        @Override
        public boolean isDisposed() {
            return this.cancelled;
        }

        boolean setDisposable(Disposable disposable, int n) {
            return this.resources.setResource(n, disposable);
        }

        void subscribe() {
            EqualObserver<T>[] arrequalObserver = this.observers;
            this.first.subscribe(arrequalObserver[0]);
            this.second.subscribe(arrequalObserver[1]);
        }
    }

    static final class EqualObserver<T>
    implements Observer<T> {
        volatile boolean done;
        Throwable error;
        final int index;
        final EqualCoordinator<T> parent;
        final SpscLinkedArrayQueue<T> queue;

        EqualObserver(EqualCoordinator<T> equalCoordinator, int n, int n2) {
            this.parent = equalCoordinator;
            this.index = n;
            this.queue = new SpscLinkedArrayQueue(n2);
        }

        @Override
        public void onComplete() {
            this.done = true;
            this.parent.drain();
        }

        @Override
        public void onError(Throwable throwable) {
            this.error = throwable;
            this.done = true;
            this.parent.drain();
        }

        @Override
        public void onNext(T t) {
            this.queue.offer(t);
            this.parent.drain();
        }

        @Override
        public void onSubscribe(Disposable disposable) {
            this.parent.setDisposable(disposable, this.index);
        }
    }

}

