/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  org.reactivestreams.Subscriber
 *  org.reactivestreams.Subscription
 */
package io.reactivex.internal.operators.flowable;

import io.reactivex.Flowable;
import io.reactivex.FlowableSubscriber;
import io.reactivex.Scheduler;
import io.reactivex.disposables.Disposable;
import io.reactivex.internal.operators.flowable.AbstractFlowableWithUpstream;
import io.reactivex.internal.subscriptions.SubscriptionHelper;
import io.reactivex.internal.util.BackpressureHelper;
import java.util.concurrent.atomic.AtomicLong;
import java.util.concurrent.atomic.AtomicReference;
import org.reactivestreams.Publisher;
import org.reactivestreams.Subscriber;
import org.reactivestreams.Subscription;

public final class FlowableSubscribeOn<T>
extends AbstractFlowableWithUpstream<T, T> {
    final boolean nonScheduledRequests;
    final Scheduler scheduler;

    public FlowableSubscribeOn(Flowable<T> flowable, Scheduler scheduler, boolean bl) {
        super(flowable);
        this.scheduler = scheduler;
        this.nonScheduledRequests = bl;
    }

    @Override
    public void subscribeActual(Subscriber<? super T> subscriber) {
        Scheduler.Worker worker = this.scheduler.createWorker();
        SubscribeOnSubscriber<? super T> subscribeOnSubscriber = new SubscribeOnSubscriber<T>(subscriber, worker, this.source, this.nonScheduledRequests);
        subscriber.onSubscribe(subscribeOnSubscriber);
        worker.schedule(subscribeOnSubscriber);
    }

    static final class SubscribeOnSubscriber<T>
    extends AtomicReference<Thread>
    implements FlowableSubscriber<T>,
    Subscription,
    Runnable {
        private static final long serialVersionUID = 8094547886072529208L;
        final Subscriber<? super T> actual;
        final boolean nonScheduledRequests;
        final AtomicLong requested;
        final AtomicReference<Subscription> s;
        Publisher<T> source;
        final Scheduler.Worker worker;

        SubscribeOnSubscriber(Subscriber<? super T> subscriber, Scheduler.Worker worker, Publisher<T> publisher, boolean bl) {
            this.actual = subscriber;
            this.worker = worker;
            this.source = publisher;
            this.s = new AtomicReference();
            this.requested = new AtomicLong();
            this.nonScheduledRequests = bl ^ true;
        }

        public void cancel() {
            SubscriptionHelper.cancel(this.s);
            this.worker.dispose();
        }

        public void onComplete() {
            this.actual.onComplete();
            this.worker.dispose();
        }

        public void onError(Throwable throwable) {
            this.actual.onError(throwable);
            this.worker.dispose();
        }

        public void onNext(T t) {
            this.actual.onNext(t);
        }

        @Override
        public void onSubscribe(Subscription subscription) {
            long l;
            if (SubscriptionHelper.setOnce(this.s, subscription) && (l = this.requested.getAndSet(0L)) != 0L) {
                this.requestUpstream(l, subscription);
            }
        }

        public void request(long l) {
            if (SubscriptionHelper.validate(l)) {
                Subscription subscription = this.s.get();
                if (subscription != null) {
                    this.requestUpstream(l, subscription);
                    return;
                }
                BackpressureHelper.add(this.requested, l);
                subscription = this.s.get();
                if (subscription != null && (l = this.requested.getAndSet(0L)) != 0L) {
                    this.requestUpstream(l, subscription);
                }
            }
        }

        void requestUpstream(long l, Subscription subscription) {
            if (!this.nonScheduledRequests && Thread.currentThread() != this.get()) {
                this.worker.schedule(new Request(subscription, l));
                return;
            }
            subscription.request(l);
        }

        @Override
        public void run() {
            this.lazySet(Thread.currentThread());
            Publisher<T> publisher = this.source;
            this.source = null;
            publisher.subscribe(this);
        }

        static final class Request
        implements Runnable {
            private final long n;
            private final Subscription s;

            Request(Subscription subscription, long l) {
                this.s = subscription;
                this.n = l;
            }

            @Override
            public void run() {
                this.s.request(this.n);
            }
        }

    }

}

