/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  org.reactivestreams.Subscriber
 *  org.reactivestreams.Subscription
 */
package io.reactivex.internal.operators.flowable;

import io.reactivex.Emitter;
import io.reactivex.Flowable;
import io.reactivex.exceptions.Exceptions;
import io.reactivex.functions.BiFunction;
import io.reactivex.functions.Consumer;
import io.reactivex.internal.subscriptions.EmptySubscription;
import io.reactivex.internal.subscriptions.SubscriptionHelper;
import io.reactivex.internal.util.BackpressureHelper;
import io.reactivex.plugins.RxJavaPlugins;
import java.util.concurrent.Callable;
import java.util.concurrent.atomic.AtomicLong;
import org.reactivestreams.Subscriber;
import org.reactivestreams.Subscription;

public final class FlowableGenerate<T, S>
extends Flowable<T> {
    final Consumer<? super S> disposeState;
    final BiFunction<S, Emitter<T>, S> generator;
    final Callable<S> stateSupplier;

    public FlowableGenerate(Callable<S> callable, BiFunction<S, Emitter<T>, S> biFunction, Consumer<? super S> consumer) {
        this.stateSupplier = callable;
        this.generator = biFunction;
        this.disposeState = consumer;
    }

    @Override
    public void subscribeActual(Subscriber<? super T> subscriber) {
        S s;
        try {
            s = this.stateSupplier.call();
        }
        catch (Throwable throwable) {
            Exceptions.throwIfFatal(throwable);
            EmptySubscription.error(throwable, subscriber);
            return;
        }
        subscriber.onSubscribe(new GeneratorSubscription<T, S>(subscriber, (BiFunction<? super S, Emitter<? super T>, ? super S>)this.generator, this.disposeState, (S)s));
    }

    static final class GeneratorSubscription<T, S>
    extends AtomicLong
    implements Emitter<T>,
    Subscription {
        private static final long serialVersionUID = 7565982551505011832L;
        final Subscriber<? super T> actual;
        volatile boolean cancelled;
        final Consumer<? super S> disposeState;
        final BiFunction<S, ? super Emitter<T>, S> generator;
        boolean hasNext;
        S state;
        boolean terminate;

        GeneratorSubscription(Subscriber<? super T> subscriber, BiFunction<S, ? super Emitter<T>, S> biFunction, Consumer<? super S> consumer, S s) {
            this.actual = subscriber;
            this.generator = biFunction;
            this.disposeState = consumer;
            this.state = s;
        }

        private void dispose(S s) {
            try {
                this.disposeState.accept(s);
                return;
            }
            catch (Throwable throwable) {
                Exceptions.throwIfFatal(throwable);
                RxJavaPlugins.onError(throwable);
                return;
            }
        }

        public void cancel() {
            if (!this.cancelled) {
                this.cancelled = true;
                if (BackpressureHelper.add(this, 1L) == 0L) {
                    S s = this.state;
                    this.state = null;
                    this.dispose(s);
                }
            }
        }

        @Override
        public void onComplete() {
            if (!this.terminate) {
                this.terminate = true;
                this.actual.onComplete();
            }
        }

        @Override
        public void onError(Throwable throwable) {
            if (this.terminate) {
                RxJavaPlugins.onError(throwable);
                return;
            }
            Throwable throwable2 = throwable;
            if (throwable == null) {
                throwable2 = new NullPointerException("onError called with null. Null values are generally not allowed in 2.x operators and sources.");
            }
            this.terminate = true;
            this.actual.onError(throwable2);
        }

        @Override
        public void onNext(T t) {
            if (!this.terminate) {
                if (this.hasNext) {
                    this.onError(new IllegalStateException("onNext already called in this generate turn"));
                    return;
                }
                if (t == null) {
                    this.onError(new NullPointerException("onNext called with null. Null values are generally not allowed in 2.x operators and sources."));
                    return;
                }
                this.hasNext = true;
                this.actual.onNext(t);
            }
        }

        public void request(long l) {
            long l2;
            if (!SubscriptionHelper.validate(l)) {
                return;
            }
            if (BackpressureHelper.add(this, l) != 0L) {
                return;
            }
            S s = this.state;
            BiFunction<S, Emitter<T>, S> biFunction = this.generator;
            do {
                l2 = 0L;
                do {
                    long l3;
                    if (l2 != l) {
                        if (this.cancelled) {
                            this.state = null;
                            this.dispose(s);
                            return;
                        }
                        this.hasNext = false;
                        try {
                            S s2 = biFunction.apply(s, this);
                            if (this.terminate) {
                                this.cancelled = true;
                                this.state = null;
                                this.dispose(s2);
                                return;
                            }
                            s = s2;
                        }
                        catch (Throwable throwable) {
                            Exceptions.throwIfFatal(throwable);
                            this.cancelled = true;
                            this.state = null;
                            this.onError(throwable);
                            this.dispose(s);
                            return;
                        }
                        ++l2;
                        continue;
                    }
                    l = l3 = this.get();
                    if (l2 == l3) break;
                } while (true);
                this.state = s;
                l = l2 = this.addAndGet(- l2);
            } while (l2 != 0L);
        }
    }

}

