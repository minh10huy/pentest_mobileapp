/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  org.reactivestreams.Subscription
 */
package io.reactivex.internal.operators.flowable;

import io.reactivex.Completable;
import io.reactivex.CompletableObserver;
import io.reactivex.CompletableSource;
import io.reactivex.Flowable;
import io.reactivex.FlowableSubscriber;
import io.reactivex.disposables.CompositeDisposable;
import io.reactivex.disposables.Disposable;
import io.reactivex.exceptions.Exceptions;
import io.reactivex.functions.Function;
import io.reactivex.internal.disposables.DisposableHelper;
import io.reactivex.internal.functions.ObjectHelper;
import io.reactivex.internal.fuseable.FuseToFlowable;
import io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable;
import io.reactivex.internal.subscriptions.SubscriptionHelper;
import io.reactivex.internal.util.AtomicThrowable;
import io.reactivex.plugins.RxJavaPlugins;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicReference;
import org.reactivestreams.Subscription;

public final class FlowableFlatMapCompletableCompletable<T>
extends Completable
implements FuseToFlowable<T> {
    final boolean delayErrors;
    final Function<? super T, ? extends CompletableSource> mapper;
    final int maxConcurrency;
    final Flowable<T> source;

    public FlowableFlatMapCompletableCompletable(Flowable<T> flowable, Function<? super T, ? extends CompletableSource> function, boolean bl, int n) {
        this.source = flowable;
        this.mapper = function;
        this.delayErrors = bl;
        this.maxConcurrency = n;
    }

    @Override
    public Flowable<T> fuseToFlowable() {
        return RxJavaPlugins.onAssembly(new FlowableFlatMapCompletable<T>(this.source, this.mapper, this.delayErrors, this.maxConcurrency));
    }

    @Override
    protected void subscribeActual(CompletableObserver completableObserver) {
        this.source.subscribe((FlowableSubscriber<? super T>)new FlatMapCompletableMainSubscriber<T>(completableObserver, this.mapper, this.delayErrors, this.maxConcurrency));
    }

    static final class FlatMapCompletableMainSubscriber<T>
    extends AtomicInteger
    implements FlowableSubscriber<T>,
    Disposable {
        private static final long serialVersionUID = 8443155186132538303L;
        final CompletableObserver actual;
        final boolean delayErrors;
        volatile boolean disposed;
        final AtomicThrowable errors;
        final Function<? super T, ? extends CompletableSource> mapper;
        final int maxConcurrency;
        Subscription s;
        final CompositeDisposable set;

        FlatMapCompletableMainSubscriber(CompletableObserver completableObserver, Function<? super T, ? extends CompletableSource> function, boolean bl, int n) {
            this.actual = completableObserver;
            this.mapper = function;
            this.delayErrors = bl;
            this.errors = new AtomicThrowable();
            this.set = new CompositeDisposable();
            this.maxConcurrency = n;
            this.lazySet(1);
        }

        @Override
        public void dispose() {
            this.disposed = true;
            this.s.cancel();
            this.set.dispose();
        }

        void innerComplete(FlatMapCompletableMainSubscriber<T> flatMapCompletableMainSubscriber) {
            this.set.delete(flatMapCompletableMainSubscriber);
            this.onComplete();
        }

        void innerError(FlatMapCompletableMainSubscriber<T> flatMapCompletableMainSubscriber, Throwable throwable) {
            this.set.delete(flatMapCompletableMainSubscriber);
            this.onError(throwable);
        }

        @Override
        public boolean isDisposed() {
            return this.set.isDisposed();
        }

        public void onComplete() {
            if (this.decrementAndGet() == 0) {
                Throwable throwable = this.errors.terminate();
                if (throwable != null) {
                    this.actual.onError(throwable);
                    return;
                }
                this.actual.onComplete();
                return;
            }
            if (this.maxConcurrency != Integer.MAX_VALUE) {
                this.s.request(1L);
            }
        }

        public void onError(Throwable throwable) {
            if (this.errors.addThrowable(throwable)) {
                if (this.delayErrors) {
                    if (this.decrementAndGet() == 0) {
                        throwable = this.errors.terminate();
                        this.actual.onError(throwable);
                        return;
                    }
                    if (this.maxConcurrency != Integer.MAX_VALUE) {
                        this.s.request(1L);
                        return;
                    }
                } else {
                    this.dispose();
                    if (this.getAndSet(0) > 0) {
                        throwable = this.errors.terminate();
                        this.actual.onError(throwable);
                        return;
                    }
                }
            } else {
                RxJavaPlugins.onError(throwable);
            }
        }

        public void onNext(T object) {
            try {
                object = ObjectHelper.requireNonNull(this.mapper.apply(object), "The mapper returned a null CompletableSource");
            }
            catch (Throwable throwable) {
                Exceptions.throwIfFatal(throwable);
                this.s.cancel();
                this.onError(throwable);
                return;
            }
            this.getAndIncrement();
            InnerObserver innerObserver = new InnerObserver();
            if (!this.disposed && this.set.add(innerObserver)) {
                object.subscribe(innerObserver);
            }
        }

        @Override
        public void onSubscribe(Subscription subscription) {
            if (SubscriptionHelper.validate(this.s, subscription)) {
                this.s = subscription;
                this.actual.onSubscribe(this);
                int n = this.maxConcurrency;
                if (n == Integer.MAX_VALUE) {
                    subscription.request(Long.MAX_VALUE);
                    return;
                }
                subscription.request((long)n);
            }
        }

        final class InnerObserver
        extends AtomicReference<Disposable>
        implements CompletableObserver,
        Disposable {
            private static final long serialVersionUID = 8606673141535671828L;

            InnerObserver() {
            }

            @Override
            public void dispose() {
                DisposableHelper.dispose(this);
            }

            @Override
            public boolean isDisposed() {
                return DisposableHelper.isDisposed((Disposable)this.get());
            }

            @Override
            public void onComplete() {
                FlatMapCompletableMainSubscriber.this.innerComplete(this);
            }

            @Override
            public void onError(Throwable throwable) {
                FlatMapCompletableMainSubscriber.this.innerError(this, throwable);
            }

            @Override
            public void onSubscribe(Disposable disposable) {
                DisposableHelper.setOnce(this, disposable);
            }
        }

    }

}

