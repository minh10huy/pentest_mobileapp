/*
 * Decompiled with CFR 0_132.
 */
package io.reactivex.internal.operators.completable;

import io.reactivex.Completable;
import io.reactivex.CompletableObserver;
import io.reactivex.CompletableSource;
import io.reactivex.disposables.CompositeDisposable;
import io.reactivex.disposables.Disposable;
import io.reactivex.exceptions.Exceptions;
import io.reactivex.internal.functions.ObjectHelper;
import io.reactivex.internal.operators.completable.CompletableMergeDelayErrorArray;
import io.reactivex.internal.util.AtomicThrowable;
import java.io.Serializable;
import java.util.Iterator;
import java.util.concurrent.atomic.AtomicInteger;

public final class CompletableMergeDelayErrorIterable
extends Completable {
    final Iterable<? extends CompletableSource> sources;

    public CompletableMergeDelayErrorIterable(Iterable<? extends CompletableSource> iterable) {
        this.sources = iterable;
    }

    /*
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    @Override
    public void subscribeActual(CompletableObserver completableObserver) {
        Serializable serializable;
        AtomicThrowable atomicThrowable;
        block10 : {
            CompositeDisposable compositeDisposable = new CompositeDisposable();
            completableObserver.onSubscribe(compositeDisposable);
            try {}
            catch (Throwable throwable) {
                Exceptions.throwIfFatal(throwable);
                completableObserver.onError(throwable);
                return;
            }
            Iterator<? extends CompletableSource> iterator = ObjectHelper.requireNonNull(this.sources.iterator(), "The source iterator returned is null");
            serializable = new AtomicInteger(1);
            atomicThrowable = new AtomicThrowable();
            do {
                block11 : {
                    if (compositeDisposable.isDisposed()) {
                        return;
                    }
                    boolean bl = iterator.hasNext();
                    if (!bl) break block10;
                    if (!compositeDisposable.isDisposed()) break block11;
                    return;
                }
                try {
                    CompletableSource completableSource = ObjectHelper.requireNonNull(iterator.next(), "The iterator returned a null CompletableSource");
                    if (compositeDisposable.isDisposed()) {
                        return;
                    }
                    serializable.getAndIncrement();
                    completableSource.subscribe(new CompletableMergeDelayErrorArray.MergeInnerCompletableObserver(completableObserver, compositeDisposable, atomicThrowable, (AtomicInteger)serializable));
                }
                catch (Throwable throwable) {
                    Exceptions.throwIfFatal(throwable);
                    atomicThrowable.addThrowable(throwable);
                    break block10;
                }
            } while (true);
            catch (Throwable throwable) {
                Exceptions.throwIfFatal(throwable);
                atomicThrowable.addThrowable(throwable);
            }
        }
        if (serializable.decrementAndGet() != 0) return;
        serializable = atomicThrowable.terminate();
        if (serializable == null) {
            completableObserver.onComplete();
            return;
        }
        completableObserver.onError((Throwable)serializable);
    }
}

