/*
 * Decompiled with CFR 0_132.
 */
package io.reactivex.internal.operators.single;

import io.reactivex.Single;
import io.reactivex.SingleObserver;
import io.reactivex.disposables.Disposable;
import io.reactivex.disposables.Disposables;
import io.reactivex.exceptions.Exceptions;
import io.reactivex.internal.functions.ObjectHelper;
import io.reactivex.plugins.RxJavaPlugins;
import java.util.concurrent.Callable;

public final class SingleFromCallable<T>
extends Single<T> {
    final Callable<? extends T> callable;

    public SingleFromCallable(Callable<? extends T> callable) {
        this.callable = callable;
    }

    @Override
    protected void subscribeActual(SingleObserver<? super T> singleObserver) {
        Disposable disposable = Disposables.empty();
        singleObserver.onSubscribe(disposable);
        if (disposable.isDisposed()) {
            return;
        }
        try {
            T t = ObjectHelper.requireNonNull(this.callable.call(), "The callable returned a null value");
            if (!disposable.isDisposed()) {
                singleObserver.onSuccess(t);
            }
            return;
        }
        catch (Throwable throwable) {
            Exceptions.throwIfFatal(throwable);
            if (!disposable.isDisposed()) {
                singleObserver.onError(throwable);
                return;
            }
            RxJavaPlugins.onError(throwable);
            return;
        }
    }
}

