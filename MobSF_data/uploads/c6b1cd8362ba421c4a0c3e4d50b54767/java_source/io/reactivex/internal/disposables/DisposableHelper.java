/*
 * Decompiled with CFR 0_132.
 */
package io.reactivex.internal.disposables;

import io.reactivex.disposables.Disposable;
import io.reactivex.exceptions.ProtocolViolationException;
import io.reactivex.internal.functions.ObjectHelper;
import io.reactivex.plugins.RxJavaPlugins;
import java.util.concurrent.atomic.AtomicReference;

public enum DisposableHelper implements Disposable
{
    DISPOSED;
    

    private DisposableHelper() {
    }

    public static boolean dispose(AtomicReference<Disposable> object) {
        DisposableHelper disposableHelper;
        Disposable disposable = object.get();
        if (disposable != (disposableHelper = DISPOSED) && (object = object.getAndSet((Disposable)disposableHelper)) != disposableHelper) {
            if (object != null) {
                object.dispose();
            }
            return true;
        }
        return false;
    }

    public static boolean isDisposed(Disposable disposable) {
        if (disposable == DISPOSED) {
            return true;
        }
        return false;
    }

    public static boolean replace(AtomicReference<Disposable> atomicReference, Disposable disposable) {
        Disposable disposable2;
        do {
            if ((disposable2 = atomicReference.get()) != DISPOSED) continue;
            if (disposable != null) {
                disposable.dispose();
            }
            return false;
        } while (!atomicReference.compareAndSet(disposable2, disposable));
        return true;
    }

    public static void reportDisposableSet() {
        RxJavaPlugins.onError(new ProtocolViolationException("Disposable already set!"));
    }

    public static boolean set(AtomicReference<Disposable> atomicReference, Disposable disposable) {
        Disposable disposable2;
        do {
            if ((disposable2 = atomicReference.get()) != DISPOSED) continue;
            if (disposable != null) {
                disposable.dispose();
            }
            return false;
        } while (!atomicReference.compareAndSet(disposable2, disposable));
        if (disposable2 != null) {
            disposable2.dispose();
        }
        return true;
    }

    public static boolean setOnce(AtomicReference<Disposable> atomicReference, Disposable disposable) {
        ObjectHelper.requireNonNull(disposable, "d is null");
        if (!atomicReference.compareAndSet(null, disposable)) {
            disposable.dispose();
            if (atomicReference.get() != DISPOSED) {
                DisposableHelper.reportDisposableSet();
            }
            return false;
        }
        return true;
    }

    public static boolean trySet(AtomicReference<Disposable> atomicReference, Disposable disposable) {
        if (!atomicReference.compareAndSet(null, disposable)) {
            if (atomicReference.get() == DISPOSED) {
                disposable.dispose();
            }
            return false;
        }
        return true;
    }

    public static boolean validate(Disposable disposable, Disposable disposable2) {
        if (disposable2 == null) {
            RxJavaPlugins.onError(new NullPointerException("next is null"));
            return false;
        }
        if (disposable != null) {
            disposable2.dispose();
            DisposableHelper.reportDisposableSet();
            return false;
        }
        return true;
    }

    @Override
    public void dispose() {
    }

    @Override
    public boolean isDisposed() {
        return true;
    }
}

