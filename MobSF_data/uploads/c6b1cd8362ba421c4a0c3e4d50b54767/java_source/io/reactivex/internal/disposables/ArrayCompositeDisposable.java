/*
 * Decompiled with CFR 0_132.
 */
package io.reactivex.internal.disposables;

import io.reactivex.disposables.Disposable;
import io.reactivex.internal.disposables.DisposableHelper;
import java.util.concurrent.atomic.AtomicReferenceArray;

public final class ArrayCompositeDisposable
extends AtomicReferenceArray<Disposable>
implements Disposable {
    private static final long serialVersionUID = 2746389416410565408L;

    public ArrayCompositeDisposable(int n) {
        super(n);
    }

    @Override
    public void dispose() {
        if (this.get(0) != DisposableHelper.DISPOSED) {
            int n = this.length();
            for (int i = 0; i < n; ++i) {
                Disposable disposable;
                if ((Disposable)this.get(i) == DisposableHelper.DISPOSED || (disposable = (Disposable)this.getAndSet(i, DisposableHelper.DISPOSED)) == DisposableHelper.DISPOSED || disposable == null) continue;
                disposable.dispose();
            }
        }
    }

    @Override
    public boolean isDisposed() {
        boolean bl = false;
        if (this.get(0) == DisposableHelper.DISPOSED) {
            bl = true;
        }
        return bl;
    }

    public Disposable replaceResource(int n, Disposable disposable) {
        Disposable disposable2;
        do {
            if ((disposable2 = (Disposable)this.get(n)) != DisposableHelper.DISPOSED) continue;
            disposable.dispose();
            return null;
        } while (!this.compareAndSet(n, disposable2, disposable));
        return disposable2;
    }

    public boolean setResource(int n, Disposable disposable) {
        Disposable disposable2;
        do {
            if ((disposable2 = (Disposable)this.get(n)) != DisposableHelper.DISPOSED) continue;
            disposable.dispose();
            return false;
        } while (!this.compareAndSet(n, disposable2, disposable));
        if (disposable2 != null) {
            disposable2.dispose();
        }
        return true;
    }
}

