/*
 * Decompiled with CFR 0_132.
 */
package io.reactivex.internal.disposables;

import io.reactivex.disposables.Disposable;
import io.reactivex.exceptions.CompositeException;
import io.reactivex.exceptions.Exceptions;
import io.reactivex.internal.disposables.DisposableContainer;
import io.reactivex.internal.functions.ObjectHelper;
import io.reactivex.internal.util.ExceptionHelper;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;

public final class ListCompositeDisposable
implements Disposable,
DisposableContainer {
    volatile boolean disposed;
    List<Disposable> resources;

    public ListCompositeDisposable() {
    }

    public ListCompositeDisposable(Iterable<? extends Disposable> object) {
        ObjectHelper.requireNonNull(object, "resources is null");
        this.resources = new LinkedList<Disposable>();
        object = object.iterator();
        while (object.hasNext()) {
            Disposable disposable = (Disposable)object.next();
            ObjectHelper.requireNonNull(disposable, "Disposable item is null");
            this.resources.add(disposable);
        }
    }

    public /* varargs */ ListCompositeDisposable(Disposable ... arrdisposable) {
        ObjectHelper.requireNonNull(arrdisposable, "resources is null");
        this.resources = new LinkedList<Disposable>();
        for (Disposable disposable : arrdisposable) {
            ObjectHelper.requireNonNull(disposable, "Disposable item is null");
            this.resources.add(disposable);
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @Override
    public boolean add(Disposable disposable) {
        ObjectHelper.requireNonNull(disposable, "d is null");
        if (!this.disposed) {
            synchronized (this) {
                if (!this.disposed) {
                    List<Disposable> list;
                    List<Disposable> list2 = list = this.resources;
                    if (list == null) {
                        this.resources = list2 = new LinkedList<Disposable>();
                    }
                    list2.add(disposable);
                    return true;
                }
            }
        }
        disposable.dispose();
        return false;
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public /* varargs */ boolean addAll(Disposable ... arrdisposable) {
        ObjectHelper.requireNonNull(arrdisposable, "ds is null");
        boolean bl = this.disposed;
        int n = 0;
        if (!bl) {
            synchronized (this) {
                if (!this.disposed) {
                    Object object = this.resources;
                    List<Disposable> list = object;
                    if (object == null) {
                        this.resources = list = new LinkedList<Disposable>();
                    }
                    int n2 = arrdisposable.length;
                    do {
                        if (n >= n2) {
                            return true;
                        }
                        object = arrdisposable[n];
                        ObjectHelper.requireNonNull(object, "d is null");
                        list.add((Disposable)object);
                        ++n;
                    } while (true);
                }
            }
        }
        int n3 = arrdisposable.length;
        n = 0;
        while (n < n3) {
            arrdisposable[n].dispose();
            ++n;
        }
        return false;
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public void clear() {
        List<Disposable> list;
        if (this.disposed) {
            return;
        }
        synchronized (this) {
            if (this.disposed) {
                return;
            }
            list = this.resources;
            this.resources = null;
        }
        this.dispose(list);
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @Override
    public boolean delete(Disposable disposable) {
        ObjectHelper.requireNonNull(disposable, "Disposable item is null");
        if (this.disposed) {
            return false;
        }
        synchronized (this) {
            if (this.disposed) {
                return false;
            }
            List<Disposable> list = this.resources;
            if (list != null && list.remove(disposable)) {
                return true;
            }
            return false;
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @Override
    public void dispose() {
        List<Disposable> list;
        if (this.disposed) {
            return;
        }
        synchronized (this) {
            if (this.disposed) {
                return;
            }
            this.disposed = true;
            list = this.resources;
            this.resources = null;
        }
        this.dispose(list);
    }

    void dispose(List<Disposable> list) {
        if (list == null) {
            return;
        }
        ArrayList<Disposable> arrayList = null;
        Iterator<Disposable> iterator = list.iterator();
        list = arrayList;
        while (iterator.hasNext()) {
            arrayList = iterator.next();
            try {
                arrayList.dispose();
            }
            catch (Throwable throwable) {
                Exceptions.throwIfFatal(throwable);
                arrayList = list;
                if (list == null) {
                    arrayList = new ArrayList<Disposable>();
                }
                arrayList.add((Disposable)((Object)throwable));
                list = arrayList;
            }
        }
        if (list != null) {
            if (list.size() == 1) {
                throw ExceptionHelper.wrapOrThrow((Throwable)((Object)list.get(0)));
            }
            throw new CompositeException(list);
        }
    }

    @Override
    public boolean isDisposed() {
        return this.disposed;
    }

    @Override
    public boolean remove(Disposable disposable) {
        if (this.delete(disposable)) {
            disposable.dispose();
            return true;
        }
        return false;
    }
}

