/*
 * Decompiled with CFR 0_132.
 */
package io.reactivex.internal.disposables;

import io.reactivex.disposables.Disposable;
import io.reactivex.exceptions.Exceptions;
import io.reactivex.functions.Cancellable;
import io.reactivex.plugins.RxJavaPlugins;
import java.util.concurrent.atomic.AtomicReference;

public final class CancellableDisposable
extends AtomicReference<Cancellable>
implements Disposable {
    private static final long serialVersionUID = 5718521705281392066L;

    public CancellableDisposable(Cancellable cancellable) {
        super(cancellable);
    }

    @Override
    public void dispose() {
        Cancellable cancellable;
        if (this.get() != null && (cancellable = (Cancellable)this.getAndSet(null)) != null) {
            try {
                cancellable.cancel();
                return;
            }
            catch (Exception exception) {
                Exceptions.throwIfFatal(exception);
                RxJavaPlugins.onError(exception);
            }
        }
    }

    @Override
    public boolean isDisposed() {
        if (this.get() == null) {
            return true;
        }
        return false;
    }
}

