/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  org.reactivestreams.Subscriber
 *  org.reactivestreams.Subscription
 */
package io.reactivex.internal.util;

import io.reactivex.Observer;
import io.reactivex.disposables.Disposable;
import io.reactivex.internal.functions.ObjectHelper;
import java.io.Serializable;
import org.reactivestreams.Subscriber;
import org.reactivestreams.Subscription;

public enum NotificationLite {
    COMPLETE;
    

    private NotificationLite() {
    }

    public static <T> boolean accept(Object object, Observer<? super T> observer) {
        if (object == COMPLETE) {
            observer.onComplete();
            return true;
        }
        if (object instanceof ErrorNotification) {
            observer.onError(((ErrorNotification)object).e);
            return true;
        }
        observer.onNext(object);
        return false;
    }

    public static <T> boolean accept(Object object, Subscriber<? super T> subscriber) {
        if (object == COMPLETE) {
            subscriber.onComplete();
            return true;
        }
        if (object instanceof ErrorNotification) {
            subscriber.onError(((ErrorNotification)object).e);
            return true;
        }
        subscriber.onNext(object);
        return false;
    }

    public static <T> boolean acceptFull(Object object, Observer<? super T> observer) {
        if (object == COMPLETE) {
            observer.onComplete();
            return true;
        }
        if (object instanceof ErrorNotification) {
            observer.onError(((ErrorNotification)object).e);
            return true;
        }
        if (object instanceof DisposableNotification) {
            observer.onSubscribe(((DisposableNotification)object).d);
            return false;
        }
        observer.onNext(object);
        return false;
    }

    public static <T> boolean acceptFull(Object object, Subscriber<? super T> subscriber) {
        if (object == COMPLETE) {
            subscriber.onComplete();
            return true;
        }
        if (object instanceof ErrorNotification) {
            subscriber.onError(((ErrorNotification)object).e);
            return true;
        }
        if (object instanceof SubscriptionNotification) {
            subscriber.onSubscribe(((SubscriptionNotification)object).s);
            return false;
        }
        subscriber.onNext(object);
        return false;
    }

    public static Object complete() {
        return COMPLETE;
    }

    public static Object disposable(Disposable disposable) {
        return new DisposableNotification(disposable);
    }

    public static Object error(Throwable throwable) {
        return new ErrorNotification(throwable);
    }

    public static Disposable getDisposable(Object object) {
        return ((DisposableNotification)object).d;
    }

    public static Throwable getError(Object object) {
        return ((ErrorNotification)object).e;
    }

    public static Subscription getSubscription(Object object) {
        return ((SubscriptionNotification)object).s;
    }

    public static <T> T getValue(Object object) {
        return (T)object;
    }

    public static boolean isComplete(Object object) {
        if (object == COMPLETE) {
            return true;
        }
        return false;
    }

    public static boolean isDisposable(Object object) {
        return object instanceof DisposableNotification;
    }

    public static boolean isError(Object object) {
        return object instanceof ErrorNotification;
    }

    public static boolean isSubscription(Object object) {
        return object instanceof SubscriptionNotification;
    }

    public static <T> Object next(T t) {
        return t;
    }

    public static Object subscription(Subscription subscription) {
        return new SubscriptionNotification(subscription);
    }

    public String toString() {
        return "NotificationLite.Complete";
    }

    static final class DisposableNotification
    implements Serializable {
        private static final long serialVersionUID = -7482590109178395495L;
        final Disposable d;

        DisposableNotification(Disposable disposable) {
            this.d = disposable;
        }

        public String toString() {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("NotificationLite.Disposable[");
            stringBuilder.append(this.d);
            stringBuilder.append("]");
            return stringBuilder.toString();
        }
    }

    static final class ErrorNotification
    implements Serializable {
        private static final long serialVersionUID = -8759979445933046293L;
        final Throwable e;

        ErrorNotification(Throwable throwable) {
            this.e = throwable;
        }

        public boolean equals(Object object) {
            if (object instanceof ErrorNotification) {
                object = (ErrorNotification)object;
                return ObjectHelper.equals(this.e, object.e);
            }
            return false;
        }

        public int hashCode() {
            return this.e.hashCode();
        }

        public String toString() {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("NotificationLite.Error[");
            stringBuilder.append(this.e);
            stringBuilder.append("]");
            return stringBuilder.toString();
        }
    }

    static final class SubscriptionNotification
    implements Serializable {
        private static final long serialVersionUID = -1322257508628817540L;
        final Subscription s;

        SubscriptionNotification(Subscription subscription) {
            this.s = subscription;
        }

        public String toString() {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("NotificationLite.Subscription[");
            stringBuilder.append((Object)this.s);
            stringBuilder.append("]");
            return stringBuilder.toString();
        }
    }

}

