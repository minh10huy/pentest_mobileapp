/*
 * Decompiled with CFR 0_132.
 */
package io.reactivex.internal.util;

import java.util.ArrayList;

public class LinkedArrayList {
    final int capacityHint;
    Object[] head;
    int indexInTail;
    volatile int size;
    Object[] tail;

    public LinkedArrayList(int n) {
        this.capacityHint = n;
    }

    public void add(Object object) {
        if (this.size == 0) {
            this.head = new Object[this.capacityHint + 1];
            this.tail = this.head;
            this.head[0] = object;
            this.indexInTail = 1;
            this.size = 1;
            return;
        }
        if (this.indexInTail == this.capacityHint) {
            Object[] arrobject = new Object[this.capacityHint + 1];
            arrobject[0] = object;
            this.tail[this.capacityHint] = arrobject;
            this.tail = arrobject;
            this.indexInTail = 1;
            ++this.size;
            return;
        }
        this.tail[this.indexInTail] = object;
        ++this.indexInTail;
        ++this.size;
    }

    public Object[] head() {
        return this.head;
    }

    public int size() {
        return this.size;
    }

    public String toString() {
        int n = this.capacityHint;
        int n2 = this.size;
        ArrayList<Object> arrayList = new ArrayList<Object>(n2 + 1);
        Object[] arrobject = this.head();
        int n3 = 0;
        block0 : do {
            int n4 = 0;
            while (n3 < n2) {
                arrayList.add(arrobject[n4]);
                int n5 = n3 + 1;
                int n6 = n4 + 1;
                n3 = n5;
                n4 = n6;
                if (n6 != n) continue;
                arrobject = (Object[])arrobject[n];
                n3 = n5;
                continue block0;
            }
            break;
        } while (true);
        return arrayList.toString();
    }
}

