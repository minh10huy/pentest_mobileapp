/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  org.reactivestreams.Subscriber
 *  org.reactivestreams.Subscription
 */
package io.reactivex.internal.util;

import io.reactivex.CompletableObserver;
import io.reactivex.FlowableSubscriber;
import io.reactivex.MaybeObserver;
import io.reactivex.Observer;
import io.reactivex.SingleObserver;
import io.reactivex.disposables.Disposable;
import io.reactivex.plugins.RxJavaPlugins;
import org.reactivestreams.Subscriber;
import org.reactivestreams.Subscription;

public enum EmptyComponent implements FlowableSubscriber<Object>,
Observer<Object>,
MaybeObserver<Object>,
SingleObserver<Object>,
CompletableObserver,
Subscription,
Disposable
{
    INSTANCE;
    

    private EmptyComponent() {
    }

    public static <T> Observer<T> asObserver() {
        return INSTANCE;
    }

    public static <T> Subscriber<T> asSubscriber() {
        return INSTANCE;
    }

    public void cancel() {
    }

    @Override
    public void dispose() {
    }

    @Override
    public boolean isDisposed() {
        return true;
    }

    @Override
    public void onComplete() {
    }

    @Override
    public void onError(Throwable throwable) {
        RxJavaPlugins.onError(throwable);
    }

    @Override
    public void onNext(Object object) {
    }

    @Override
    public void onSubscribe(Disposable disposable) {
        disposable.dispose();
    }

    @Override
    public void onSubscribe(Subscription subscription) {
        subscription.cancel();
    }

    @Override
    public void onSuccess(Object object) {
    }

    public void request(long l) {
    }
}

