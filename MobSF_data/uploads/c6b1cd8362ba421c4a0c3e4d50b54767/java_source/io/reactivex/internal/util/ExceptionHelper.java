/*
 * Decompiled with CFR 0_132.
 */
package io.reactivex.internal.util;

import io.reactivex.exceptions.CompositeException;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.atomic.AtomicReference;

public final class ExceptionHelper {
    public static final Throwable TERMINATED = new Termination();

    private ExceptionHelper() {
        throw new IllegalStateException("No instances!");
    }

    public static <T> boolean addThrowable(AtomicReference<Throwable> atomicReference, Throwable throwable) {
        Throwable throwable2;
        Throwable throwable3;
        do {
            if ((throwable3 = atomicReference.get()) != TERMINATED) continue;
            return false;
        } while (!atomicReference.compareAndSet(throwable3, throwable2 = throwable3 == null ? throwable : new CompositeException(throwable3, throwable)));
        return true;
    }

    public static List<Throwable> flatten(Throwable object) {
        ArrayList<Throwable> arrayList = new ArrayList<Throwable>();
        ArrayDeque<Throwable> arrayDeque = new ArrayDeque<Throwable>();
        arrayDeque.offer((Throwable)object);
        while (!arrayDeque.isEmpty()) {
            object = (Throwable)arrayDeque.removeFirst();
            if (object instanceof CompositeException) {
                object = ((CompositeException)object).getExceptions();
                for (int i = object.size() - 1; i >= 0; --i) {
                    arrayDeque.offerFirst((Throwable)object.get(i));
                }
                continue;
            }
            arrayList.add((Throwable)object);
        }
        return arrayList;
    }

    public static <T> Throwable terminate(AtomicReference<Throwable> atomicReference) {
        Throwable throwable;
        Throwable throwable2 = throwable = atomicReference.get();
        if (throwable != TERMINATED) {
            throwable2 = atomicReference.getAndSet(TERMINATED);
        }
        return throwable2;
    }

    public static <E extends Throwable> Exception throwIfThrowable(Throwable throwable) throws Throwable {
        if (throwable instanceof Exception) {
            return (Exception)throwable;
        }
        throw throwable;
    }

    public static RuntimeException wrapOrThrow(Throwable throwable) {
        if (throwable instanceof Error) {
            throw (Error)throwable;
        }
        if (throwable instanceof RuntimeException) {
            return (RuntimeException)throwable;
        }
        return new RuntimeException(throwable);
    }

    static final class Termination
    extends Throwable {
        private static final long serialVersionUID = -4649703670690200604L;

        Termination() {
            super("No further exceptions");
        }

        @Override
        public Throwable fillInStackTrace() {
            return this;
        }
    }

}

