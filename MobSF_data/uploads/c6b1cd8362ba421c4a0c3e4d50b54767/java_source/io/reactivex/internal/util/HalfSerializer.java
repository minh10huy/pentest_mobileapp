/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  org.reactivestreams.Subscriber
 */
package io.reactivex.internal.util;

import io.reactivex.Observer;
import io.reactivex.internal.util.AtomicThrowable;
import io.reactivex.plugins.RxJavaPlugins;
import java.io.Serializable;
import java.util.concurrent.atomic.AtomicInteger;
import org.reactivestreams.Subscriber;

public final class HalfSerializer {
    private HalfSerializer() {
        throw new IllegalStateException("No instances!");
    }

    public static void onComplete(Observer<?> observer, AtomicInteger serializable, AtomicThrowable atomicThrowable) {
        if (serializable.getAndIncrement() == 0) {
            serializable = atomicThrowable.terminate();
            if (serializable != null) {
                observer.onError((Throwable)serializable);
                return;
            }
            observer.onComplete();
        }
    }

    public static void onComplete(Subscriber<?> subscriber, AtomicInteger serializable, AtomicThrowable atomicThrowable) {
        if (serializable.getAndIncrement() == 0) {
            serializable = atomicThrowable.terminate();
            if (serializable != null) {
                subscriber.onError((Throwable)serializable);
                return;
            }
            subscriber.onComplete();
        }
    }

    public static void onError(Observer<?> observer, Throwable throwable, AtomicInteger atomicInteger, AtomicThrowable atomicThrowable) {
        if (atomicThrowable.addThrowable(throwable)) {
            if (atomicInteger.getAndIncrement() == 0) {
                observer.onError(atomicThrowable.terminate());
                return;
            }
        } else {
            RxJavaPlugins.onError(throwable);
        }
    }

    public static void onError(Subscriber<?> subscriber, Throwable throwable, AtomicInteger atomicInteger, AtomicThrowable atomicThrowable) {
        if (atomicThrowable.addThrowable(throwable)) {
            if (atomicInteger.getAndIncrement() == 0) {
                subscriber.onError(atomicThrowable.terminate());
                return;
            }
        } else {
            RxJavaPlugins.onError(throwable);
        }
    }

    public static <T> void onNext(Observer<? super T> observer, T object, AtomicInteger atomicInteger, AtomicThrowable atomicThrowable) {
        if (atomicInteger.get() == 0 && atomicInteger.compareAndSet(0, 1)) {
            observer.onNext(object);
            if (atomicInteger.decrementAndGet() != 0) {
                object = atomicThrowable.terminate();
                if (object != null) {
                    observer.onError((Throwable)object);
                    return;
                }
                observer.onComplete();
            }
        }
    }

    public static <T> void onNext(Subscriber<? super T> subscriber, T object, AtomicInteger atomicInteger, AtomicThrowable atomicThrowable) {
        if (atomicInteger.get() == 0 && atomicInteger.compareAndSet(0, 1)) {
            subscriber.onNext(object);
            if (atomicInteger.decrementAndGet() != 0) {
                object = atomicThrowable.terminate();
                if (object != null) {
                    subscriber.onError(object);
                    return;
                }
                subscriber.onComplete();
            }
        }
    }
}

