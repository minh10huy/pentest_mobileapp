/*
 * Decompiled with CFR 0_132.
 */
package io.reactivex.internal.util;

import io.reactivex.functions.BiFunction;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.Iterator;
import java.util.List;

public final class MergerBiFunction<T>
implements BiFunction<List<T>, List<T>, List<T>> {
    final Comparator<? super T> comparator;

    public MergerBiFunction(Comparator<? super T> comparator) {
        this.comparator = comparator;
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Lifted jumps to return sites
     */
    @Override
    public List<T> apply(List<T> var1_1, List<T> var2_2) throws Exception {
        block10 : {
            var3_15 = var1_1.size() + var2_9.size();
            if (var3_15 == 0) {
                return new ArrayList<E>();
            }
            var5_16 = new ArrayList<Object>(var3_15);
            var6_17 = var1_1.iterator();
            var7_18 = var2_9.iterator();
            if (var6_17.hasNext()) {
                var1_2 = var6_17.next();
            } else {
                var1_3 = null;
            }
            var4_19 = var1_4;
            if (!var7_18.hasNext()) break block10;
            var2_10 = var7_18.next();
            ** GOTO lbl19
        }
        block0 : do {
            var2_12 = null;
            var1_6 = var4_20;
lbl19: // 5 sources:
            while (var1_5 != null && var2_13 != null) {
                if (this.comparator.compare(var1_5, var2_13) < 0) {
                    var5_16.add(var1_5);
                    if (var6_17.hasNext()) {
                        var1_7 = var6_17.next();
                        continue;
                    }
                    var1_8 = null;
                    continue;
                }
                var5_16.add(var2_13);
                var4_21 = var1_5;
                if (!var7_18.hasNext()) continue block0;
                var2_14 = var7_18.next();
            }
            break;
        } while (true);
        if (var1_5 != null) {
            var5_16.add(var1_5);
            while (var6_17.hasNext() != false) {
                var5_16.add(var6_17.next());
            }
            return var5_16;
        }
        if (var2_13 == null) return var5_16;
        var5_16.add(var2_13);
        while (var7_18.hasNext() != false) {
            var5_16.add(var7_18.next());
        }
        return var5_16;
    }
}

