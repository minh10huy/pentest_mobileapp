/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  org.reactivestreams.Subscription
 */
package io.reactivex.internal.functions;

import io.reactivex.Notification;
import io.reactivex.Scheduler;
import io.reactivex.exceptions.OnErrorNotImplementedException;
import io.reactivex.functions.Action;
import io.reactivex.functions.BiConsumer;
import io.reactivex.functions.BiFunction;
import io.reactivex.functions.BooleanSupplier;
import io.reactivex.functions.Consumer;
import io.reactivex.functions.Function;
import io.reactivex.functions.Function3;
import io.reactivex.functions.Function4;
import io.reactivex.functions.Function5;
import io.reactivex.functions.Function6;
import io.reactivex.functions.Function7;
import io.reactivex.functions.Function8;
import io.reactivex.functions.Function9;
import io.reactivex.functions.LongConsumer;
import io.reactivex.functions.Predicate;
import io.reactivex.internal.functions.ObjectHelper;
import io.reactivex.plugins.RxJavaPlugins;
import io.reactivex.schedulers.Timed;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.Callable;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.reactivestreams.Subscription;

public final class Functions {
    static final Predicate<Object> ALWAYS_FALSE;
    static final Predicate<Object> ALWAYS_TRUE;
    public static final Action EMPTY_ACTION;
    static final Consumer<Object> EMPTY_CONSUMER;
    public static final LongConsumer EMPTY_LONG_CONSUMER;
    public static final Runnable EMPTY_RUNNABLE;
    public static final Consumer<Throwable> ERROR_CONSUMER;
    static final Function<Object, Object> IDENTITY;
    static final Comparator<Object> NATURAL_COMPARATOR;
    static final Callable<Object> NULL_SUPPLIER;
    public static final Consumer<Throwable> ON_ERROR_MISSING;
    public static final Consumer<Subscription> REQUEST_MAX;

    static {
        IDENTITY = new Identity();
        EMPTY_RUNNABLE = new EmptyRunnable();
        EMPTY_ACTION = new EmptyAction();
        EMPTY_CONSUMER = new EmptyConsumer();
        ERROR_CONSUMER = new ErrorConsumer();
        ON_ERROR_MISSING = new OnErrorMissingConsumer();
        EMPTY_LONG_CONSUMER = new EmptyLongConsumer();
        ALWAYS_TRUE = new TruePredicate();
        ALWAYS_FALSE = new FalsePredicate();
        NULL_SUPPLIER = new NullCallable();
        NATURAL_COMPARATOR = new NaturalObjectComparator();
        REQUEST_MAX = new MaxRequestSubscription();
    }

    private Functions() {
        throw new IllegalStateException("No instances!");
    }

    public static <T> Consumer<T> actionConsumer(Action action) {
        return new ActionConsumer(action);
    }

    public static <T> Predicate<T> alwaysFalse() {
        return ALWAYS_FALSE;
    }

    public static <T> Predicate<T> alwaysTrue() {
        return ALWAYS_TRUE;
    }

    public static <T, U> Function<T, U> castFunction(Class<U> class_) {
        return new CastToClass(class_);
    }

    public static <T> Callable<List<T>> createArrayList(int n) {
        return new ArrayListCapacityCallable(n);
    }

    public static <T> Callable<Set<T>> createHashSet() {
        return HashSetCallable.INSTANCE;
    }

    public static <T> Consumer<T> emptyConsumer() {
        return EMPTY_CONSUMER;
    }

    public static <T> Predicate<T> equalsWith(T t) {
        return new EqualsPredicate<T>(t);
    }

    public static Action futureAction(Future<?> future) {
        return new FutureAction(future);
    }

    public static <T> Function<T, T> identity() {
        return IDENTITY;
    }

    public static <T, U> Predicate<T> isInstanceOf(Class<U> class_) {
        return new ClassFilter(class_);
    }

    public static <T> Callable<T> justCallable(T t) {
        return new JustValue(t);
    }

    public static <T, U> Function<T, U> justFunction(U u) {
        return new JustValue(u);
    }

    public static <T> Function<List<T>, List<T>> listSorter(Comparator<? super T> comparator) {
        return new ListSorter<T>(comparator);
    }

    public static <T> Comparator<T> naturalComparator() {
        return NaturalComparator.INSTANCE;
    }

    public static <T> Comparator<T> naturalOrder() {
        return NATURAL_COMPARATOR;
    }

    public static <T> Action notificationOnComplete(Consumer<? super Notification<T>> consumer) {
        return new NotificationOnComplete(consumer);
    }

    public static <T> Consumer<Throwable> notificationOnError(Consumer<? super Notification<T>> consumer) {
        return new NotificationOnError(consumer);
    }

    public static <T> Consumer<T> notificationOnNext(Consumer<? super Notification<T>> consumer) {
        return new NotificationOnNext(consumer);
    }

    public static <T> Callable<T> nullSupplier() {
        return NULL_SUPPLIER;
    }

    public static <T> Predicate<T> predicateReverseFor(BooleanSupplier booleanSupplier) {
        return new BooleanSupplierPredicateReverse(booleanSupplier);
    }

    public static <T> Function<T, Timed<T>> timestampWith(TimeUnit timeUnit, Scheduler scheduler) {
        return new TimestampFunction(timeUnit, scheduler);
    }

    public static <T1, T2, R> Function<Object[], R> toFunction(BiFunction<? super T1, ? super T2, ? extends R> biFunction) {
        ObjectHelper.requireNonNull(biFunction, "f is null");
        return new Array2Func<T1, T2, R>(biFunction);
    }

    public static <T1, T2, T3, R> Function<Object[], R> toFunction(Function3<T1, T2, T3, R> function3) {
        ObjectHelper.requireNonNull(function3, "f is null");
        return new Array3Func<T1, T2, T3, R>(function3);
    }

    public static <T1, T2, T3, T4, R> Function<Object[], R> toFunction(Function4<T1, T2, T3, T4, R> function4) {
        ObjectHelper.requireNonNull(function4, "f is null");
        return new Array4Func<T1, T2, T3, T4, R>(function4);
    }

    public static <T1, T2, T3, T4, T5, R> Function<Object[], R> toFunction(Function5<T1, T2, T3, T4, T5, R> function5) {
        ObjectHelper.requireNonNull(function5, "f is null");
        return new Array5Func<T1, T2, T3, T4, T5, R>(function5);
    }

    public static <T1, T2, T3, T4, T5, T6, R> Function<Object[], R> toFunction(Function6<T1, T2, T3, T4, T5, T6, R> function6) {
        ObjectHelper.requireNonNull(function6, "f is null");
        return new Array6Func<T1, T2, T3, T4, T5, T6, R>(function6);
    }

    public static <T1, T2, T3, T4, T5, T6, T7, R> Function<Object[], R> toFunction(Function7<T1, T2, T3, T4, T5, T6, T7, R> function7) {
        ObjectHelper.requireNonNull(function7, "f is null");
        return new Array7Func<T1, T2, T3, T4, T5, T6, T7, R>(function7);
    }

    public static <T1, T2, T3, T4, T5, T6, T7, T8, R> Function<Object[], R> toFunction(Function8<T1, T2, T3, T4, T5, T6, T7, T8, R> function8) {
        ObjectHelper.requireNonNull(function8, "f is null");
        return new Array8Func<T1, T2, T3, T4, T5, T6, T7, T8, R>(function8);
    }

    public static <T1, T2, T3, T4, T5, T6, T7, T8, T9, R> Function<Object[], R> toFunction(Function9<T1, T2, T3, T4, T5, T6, T7, T8, T9, R> function9) {
        ObjectHelper.requireNonNull(function9, "f is null");
        return new Array9Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, R>(function9);
    }

    public static <T, K> BiConsumer<Map<K, T>, T> toMapKeySelector(Function<? super T, ? extends K> function) {
        return new ToMapKeySelector<K, T>(function);
    }

    public static <T, K, V> BiConsumer<Map<K, V>, T> toMapKeyValueSelector(Function<? super T, ? extends K> function, Function<? super T, ? extends V> function2) {
        return new ToMapKeyValueSelector<K, V, T>(function2, function);
    }

    public static <T, K, V> BiConsumer<Map<K, Collection<V>>, T> toMultimapKeyValueSelector(Function<? super T, ? extends K> function, Function<? super T, ? extends V> function2, Function<? super K, ? extends Collection<? super V>> function3) {
        return new ToMultimapKeyValueSelector<K, V, T>(function3, function2, function);
    }

    static final class ActionConsumer<T>
    implements Consumer<T> {
        final Action action;

        ActionConsumer(Action action) {
            this.action = action;
        }

        @Override
        public void accept(T t) throws Exception {
            this.action.run();
        }
    }

    static final class Array2Func<T1, T2, R>
    implements Function<Object[], R> {
        final BiFunction<? super T1, ? super T2, ? extends R> f;

        Array2Func(BiFunction<? super T1, ? super T2, ? extends R> biFunction) {
            this.f = biFunction;
        }

        @Override
        public R apply(Object[] arrobject) throws Exception {
            if (arrobject.length != 2) {
                StringBuilder stringBuilder = new StringBuilder();
                stringBuilder.append("Array of size 2 expected but got ");
                stringBuilder.append(arrobject.length);
                throw new IllegalArgumentException(stringBuilder.toString());
            }
            return this.f.apply(arrobject[0], arrobject[1]);
        }
    }

    static final class Array3Func<T1, T2, T3, R>
    implements Function<Object[], R> {
        final Function3<T1, T2, T3, R> f;

        Array3Func(Function3<T1, T2, T3, R> function3) {
            this.f = function3;
        }

        @Override
        public R apply(Object[] arrobject) throws Exception {
            if (arrobject.length != 3) {
                StringBuilder stringBuilder = new StringBuilder();
                stringBuilder.append("Array of size 3 expected but got ");
                stringBuilder.append(arrobject.length);
                throw new IllegalArgumentException(stringBuilder.toString());
            }
            return this.f.apply(arrobject[0], arrobject[1], arrobject[2]);
        }
    }

    static final class Array4Func<T1, T2, T3, T4, R>
    implements Function<Object[], R> {
        final Function4<T1, T2, T3, T4, R> f;

        Array4Func(Function4<T1, T2, T3, T4, R> function4) {
            this.f = function4;
        }

        @Override
        public R apply(Object[] arrobject) throws Exception {
            if (arrobject.length != 4) {
                StringBuilder stringBuilder = new StringBuilder();
                stringBuilder.append("Array of size 4 expected but got ");
                stringBuilder.append(arrobject.length);
                throw new IllegalArgumentException(stringBuilder.toString());
            }
            return this.f.apply(arrobject[0], arrobject[1], arrobject[2], arrobject[3]);
        }
    }

    static final class Array5Func<T1, T2, T3, T4, T5, R>
    implements Function<Object[], R> {
        private final Function5<T1, T2, T3, T4, T5, R> f;

        Array5Func(Function5<T1, T2, T3, T4, T5, R> function5) {
            this.f = function5;
        }

        @Override
        public R apply(Object[] arrobject) throws Exception {
            if (arrobject.length != 5) {
                StringBuilder stringBuilder = new StringBuilder();
                stringBuilder.append("Array of size 5 expected but got ");
                stringBuilder.append(arrobject.length);
                throw new IllegalArgumentException(stringBuilder.toString());
            }
            return this.f.apply(arrobject[0], arrobject[1], arrobject[2], arrobject[3], arrobject[4]);
        }
    }

    static final class Array6Func<T1, T2, T3, T4, T5, T6, R>
    implements Function<Object[], R> {
        final Function6<T1, T2, T3, T4, T5, T6, R> f;

        Array6Func(Function6<T1, T2, T3, T4, T5, T6, R> function6) {
            this.f = function6;
        }

        @Override
        public R apply(Object[] arrobject) throws Exception {
            if (arrobject.length != 6) {
                StringBuilder stringBuilder = new StringBuilder();
                stringBuilder.append("Array of size 6 expected but got ");
                stringBuilder.append(arrobject.length);
                throw new IllegalArgumentException(stringBuilder.toString());
            }
            return this.f.apply(arrobject[0], arrobject[1], arrobject[2], arrobject[3], arrobject[4], arrobject[5]);
        }
    }

    static final class Array7Func<T1, T2, T3, T4, T5, T6, T7, R>
    implements Function<Object[], R> {
        final Function7<T1, T2, T3, T4, T5, T6, T7, R> f;

        Array7Func(Function7<T1, T2, T3, T4, T5, T6, T7, R> function7) {
            this.f = function7;
        }

        @Override
        public R apply(Object[] arrobject) throws Exception {
            if (arrobject.length != 7) {
                StringBuilder stringBuilder = new StringBuilder();
                stringBuilder.append("Array of size 7 expected but got ");
                stringBuilder.append(arrobject.length);
                throw new IllegalArgumentException(stringBuilder.toString());
            }
            return this.f.apply(arrobject[0], arrobject[1], arrobject[2], arrobject[3], arrobject[4], arrobject[5], arrobject[6]);
        }
    }

    static final class Array8Func<T1, T2, T3, T4, T5, T6, T7, T8, R>
    implements Function<Object[], R> {
        final Function8<T1, T2, T3, T4, T5, T6, T7, T8, R> f;

        Array8Func(Function8<T1, T2, T3, T4, T5, T6, T7, T8, R> function8) {
            this.f = function8;
        }

        @Override
        public R apply(Object[] arrobject) throws Exception {
            if (arrobject.length != 8) {
                StringBuilder stringBuilder = new StringBuilder();
                stringBuilder.append("Array of size 8 expected but got ");
                stringBuilder.append(arrobject.length);
                throw new IllegalArgumentException(stringBuilder.toString());
            }
            return this.f.apply(arrobject[0], arrobject[1], arrobject[2], arrobject[3], arrobject[4], arrobject[5], arrobject[6], arrobject[7]);
        }
    }

    static final class Array9Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, R>
    implements Function<Object[], R> {
        final Function9<T1, T2, T3, T4, T5, T6, T7, T8, T9, R> f;

        Array9Func(Function9<T1, T2, T3, T4, T5, T6, T7, T8, T9, R> function9) {
            this.f = function9;
        }

        @Override
        public R apply(Object[] arrobject) throws Exception {
            if (arrobject.length != 9) {
                StringBuilder stringBuilder = new StringBuilder();
                stringBuilder.append("Array of size 9 expected but got ");
                stringBuilder.append(arrobject.length);
                throw new IllegalArgumentException(stringBuilder.toString());
            }
            return this.f.apply(arrobject[0], arrobject[1], arrobject[2], arrobject[3], arrobject[4], arrobject[5], arrobject[6], arrobject[7], arrobject[8]);
        }
    }

    static final class ArrayListCapacityCallable<T>
    implements Callable<List<T>> {
        final int capacity;

        ArrayListCapacityCallable(int n) {
            this.capacity = n;
        }

        @Override
        public List<T> call() throws Exception {
            return new ArrayList(this.capacity);
        }
    }

    static final class BooleanSupplierPredicateReverse<T>
    implements Predicate<T> {
        final BooleanSupplier supplier;

        BooleanSupplierPredicateReverse(BooleanSupplier booleanSupplier) {
            this.supplier = booleanSupplier;
        }

        @Override
        public boolean test(T t) throws Exception {
            return this.supplier.getAsBoolean() ^ true;
        }
    }

    static final class CastToClass<T, U>
    implements Function<T, U> {
        final Class<U> clazz;

        CastToClass(Class<U> class_) {
            this.clazz = class_;
        }

        @Override
        public U apply(T t) throws Exception {
            return this.clazz.cast(t);
        }
    }

    static final class ClassFilter<T, U>
    implements Predicate<T> {
        final Class<U> clazz;

        ClassFilter(Class<U> class_) {
            this.clazz = class_;
        }

        @Override
        public boolean test(T t) throws Exception {
            return this.clazz.isInstance(t);
        }
    }

    static final class EmptyAction
    implements Action {
        EmptyAction() {
        }

        @Override
        public void run() {
        }

        public String toString() {
            return "EmptyAction";
        }
    }

    static final class EmptyConsumer
    implements Consumer<Object> {
        EmptyConsumer() {
        }

        @Override
        public void accept(Object object) {
        }

        public String toString() {
            return "EmptyConsumer";
        }
    }

    static final class EmptyLongConsumer
    implements LongConsumer {
        EmptyLongConsumer() {
        }

        @Override
        public void accept(long l) {
        }
    }

    static final class EmptyRunnable
    implements Runnable {
        EmptyRunnable() {
        }

        @Override
        public void run() {
        }

        public String toString() {
            return "EmptyRunnable";
        }
    }

    static final class EqualsPredicate<T>
    implements Predicate<T> {
        final T value;

        EqualsPredicate(T t) {
            this.value = t;
        }

        @Override
        public boolean test(T t) throws Exception {
            return ObjectHelper.equals(t, this.value);
        }
    }

    static final class ErrorConsumer
    implements Consumer<Throwable> {
        ErrorConsumer() {
        }

        @Override
        public void accept(Throwable throwable) {
            RxJavaPlugins.onError(throwable);
        }
    }

    static final class FalsePredicate
    implements Predicate<Object> {
        FalsePredicate() {
        }

        @Override
        public boolean test(Object object) {
            return false;
        }
    }

    static final class FutureAction
    implements Action {
        final Future<?> future;

        FutureAction(Future<?> future) {
            this.future = future;
        }

        @Override
        public void run() throws Exception {
            this.future.get();
        }
    }

    static enum HashSetCallable implements Callable<Set<Object>>
    {
        INSTANCE;
        

        private HashSetCallable() {
        }

        @Override
        public Set<Object> call() throws Exception {
            return new HashSet<Object>();
        }
    }

    static final class Identity
    implements Function<Object, Object> {
        Identity() {
        }

        @Override
        public Object apply(Object object) {
            return object;
        }

        public String toString() {
            return "IdentityFunction";
        }
    }

    static final class JustValue<T, U>
    implements Callable<U>,
    Function<T, U> {
        final U value;

        JustValue(U u) {
            this.value = u;
        }

        @Override
        public U apply(T t) throws Exception {
            return this.value;
        }

        @Override
        public U call() throws Exception {
            return this.value;
        }
    }

    static final class ListSorter<T>
    implements Function<List<T>, List<T>> {
        final Comparator<? super T> comparator;

        ListSorter(Comparator<? super T> comparator) {
            this.comparator = comparator;
        }

        @Override
        public List<T> apply(List<T> list) {
            Collections.sort(list, this.comparator);
            return list;
        }
    }

    static final class MaxRequestSubscription
    implements Consumer<Subscription> {
        MaxRequestSubscription() {
        }

        @Override
        public void accept(Subscription subscription) throws Exception {
            subscription.request(Long.MAX_VALUE);
        }
    }

    static enum NaturalComparator implements Comparator<Object>
    {
        INSTANCE;
        

        private NaturalComparator() {
        }

        @Override
        public int compare(Object object, Object object2) {
            return ((Comparable)object).compareTo(object2);
        }
    }

    static final class NaturalObjectComparator
    implements Comparator<Object> {
        NaturalObjectComparator() {
        }

        @Override
        public int compare(Object object, Object object2) {
            return ((Comparable)object).compareTo(object2);
        }
    }

    static final class NotificationOnComplete<T>
    implements Action {
        final Consumer<? super Notification<T>> onNotification;

        NotificationOnComplete(Consumer<? super Notification<T>> consumer) {
            this.onNotification = consumer;
        }

        @Override
        public void run() throws Exception {
            this.onNotification.accept(Notification.createOnComplete());
        }
    }

    static final class NotificationOnError<T>
    implements Consumer<Throwable> {
        final Consumer<? super Notification<T>> onNotification;

        NotificationOnError(Consumer<? super Notification<T>> consumer) {
            this.onNotification = consumer;
        }

        @Override
        public void accept(Throwable throwable) throws Exception {
            this.onNotification.accept(Notification.createOnError(throwable));
        }
    }

    static final class NotificationOnNext<T>
    implements Consumer<T> {
        final Consumer<? super Notification<T>> onNotification;

        NotificationOnNext(Consumer<? super Notification<T>> consumer) {
            this.onNotification = consumer;
        }

        @Override
        public void accept(T t) throws Exception {
            this.onNotification.accept(Notification.createOnNext(t));
        }
    }

    static final class NullCallable
    implements Callable<Object> {
        NullCallable() {
        }

        @Override
        public Object call() {
            return null;
        }
    }

    static final class OnErrorMissingConsumer
    implements Consumer<Throwable> {
        OnErrorMissingConsumer() {
        }

        @Override
        public void accept(Throwable throwable) {
            RxJavaPlugins.onError(new OnErrorNotImplementedException(throwable));
        }
    }

    static final class TimestampFunction<T>
    implements Function<T, Timed<T>> {
        final Scheduler scheduler;
        final TimeUnit unit;

        TimestampFunction(TimeUnit timeUnit, Scheduler scheduler) {
            this.unit = timeUnit;
            this.scheduler = scheduler;
        }

        @Override
        public Timed<T> apply(T t) throws Exception {
            return new Timed<T>(t, this.scheduler.now(this.unit), this.unit);
        }
    }

    static final class ToMapKeySelector<K, T>
    implements BiConsumer<Map<K, T>, T> {
        private final Function<? super T, ? extends K> keySelector;

        ToMapKeySelector(Function<? super T, ? extends K> function) {
            this.keySelector = function;
        }

        @Override
        public void accept(Map<K, T> map, T t) throws Exception {
            map.put(this.keySelector.apply(t), t);
        }
    }

    static final class ToMapKeyValueSelector<K, V, T>
    implements BiConsumer<Map<K, V>, T> {
        private final Function<? super T, ? extends K> keySelector;
        private final Function<? super T, ? extends V> valueSelector;

        ToMapKeyValueSelector(Function<? super T, ? extends V> function, Function<? super T, ? extends K> function2) {
            this.valueSelector = function;
            this.keySelector = function2;
        }

        @Override
        public void accept(Map<K, V> map, T t) throws Exception {
            map.put(this.keySelector.apply(t), this.valueSelector.apply(t));
        }
    }

    static final class ToMultimapKeyValueSelector<K, V, T>
    implements BiConsumer<Map<K, Collection<V>>, T> {
        private final Function<? super K, ? extends Collection<? super V>> collectionFactory;
        private final Function<? super T, ? extends K> keySelector;
        private final Function<? super T, ? extends V> valueSelector;

        ToMultimapKeyValueSelector(Function<? super K, ? extends Collection<? super V>> function, Function<? super T, ? extends V> function2, Function<? super T, ? extends K> function3) {
            this.collectionFactory = function;
            this.valueSelector = function2;
            this.keySelector = function3;
        }

        @Override
        public void accept(Map<K, Collection<V>> map, T t) throws Exception {
            Collection<V> collection;
            K k = this.keySelector.apply(t);
            Collection<Object> collection2 = collection = map.get(k);
            if (collection == null) {
                collection2 = this.collectionFactory.apply(k);
                map.put(k, collection2);
            }
            collection2.add(this.valueSelector.apply(t));
        }
    }

    static final class TruePredicate
    implements Predicate<Object> {
        TruePredicate() {
        }

        @Override
        public boolean test(Object object) {
            return true;
        }
    }

}

