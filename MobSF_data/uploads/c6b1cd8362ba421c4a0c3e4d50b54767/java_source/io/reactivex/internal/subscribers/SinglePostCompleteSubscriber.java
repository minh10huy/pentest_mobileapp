/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  org.reactivestreams.Subscriber
 *  org.reactivestreams.Subscription
 */
package io.reactivex.internal.subscribers;

import io.reactivex.FlowableSubscriber;
import io.reactivex.internal.subscriptions.SubscriptionHelper;
import io.reactivex.internal.util.BackpressureHelper;
import java.util.concurrent.atomic.AtomicLong;
import org.reactivestreams.Subscriber;
import org.reactivestreams.Subscription;

public abstract class SinglePostCompleteSubscriber<T, R>
extends AtomicLong
implements FlowableSubscriber<T>,
Subscription {
    static final long COMPLETE_MASK = Long.MIN_VALUE;
    static final long REQUEST_MASK = Long.MAX_VALUE;
    private static final long serialVersionUID = 7917814472626990048L;
    protected final Subscriber<? super R> actual;
    protected long produced;
    protected Subscription s;
    protected R value;

    public SinglePostCompleteSubscriber(Subscriber<? super R> subscriber) {
        this.actual = subscriber;
    }

    public void cancel() {
        this.s.cancel();
    }

    protected final void complete(R r) {
        long l = this.produced;
        if (l != 0L) {
            BackpressureHelper.produced(this, l);
        }
        do {
            if (((l = this.get()) & Long.MIN_VALUE) != 0L) {
                this.onDrop(r);
                return;
            }
            if ((l & Long.MAX_VALUE) != 0L) {
                this.lazySet(-9223372036854775807L);
                this.actual.onNext(r);
                this.actual.onComplete();
                return;
            }
            this.value = r;
            if (this.compareAndSet(0L, Long.MIN_VALUE)) {
                return;
            }
            this.value = null;
        } while (true);
    }

    protected void onDrop(R r) {
    }

    @Override
    public void onSubscribe(Subscription subscription) {
        if (SubscriptionHelper.validate(this.s, subscription)) {
            this.s = subscription;
            this.actual.onSubscribe((Subscription)this);
        }
    }

    public final void request(long l) {
        block3 : {
            if (SubscriptionHelper.validate(l)) {
                long l2;
                do {
                    if (((l2 = this.get()) & Long.MIN_VALUE) == 0L) continue;
                    if (this.compareAndSet(Long.MIN_VALUE, -9223372036854775807L)) {
                        this.actual.onNext(this.value);
                        this.actual.onComplete();
                        return;
                    }
                    break block3;
                } while (!this.compareAndSet(l2, BackpressureHelper.addCap(l2, l)));
                this.s.request(l);
            }
        }
    }
}

