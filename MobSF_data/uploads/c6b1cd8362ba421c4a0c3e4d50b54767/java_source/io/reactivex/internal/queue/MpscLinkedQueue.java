/*
 * Decompiled with CFR 0_132.
 */
package io.reactivex.internal.queue;

import io.reactivex.annotations.Nullable;
import io.reactivex.internal.fuseable.SimplePlainQueue;
import java.util.concurrent.atomic.AtomicReference;

public final class MpscLinkedQueue<T>
implements SimplePlainQueue<T> {
    private final AtomicReference<LinkedQueueNode<T>> consumerNode = new AtomicReference();
    private final AtomicReference<LinkedQueueNode<T>> producerNode = new AtomicReference();

    public MpscLinkedQueue() {
        LinkedQueueNode linkedQueueNode = new LinkedQueueNode();
        this.spConsumerNode(linkedQueueNode);
        this.xchgProducerNode(linkedQueueNode);
    }

    @Override
    public void clear() {
        while (this.poll() != null && !this.isEmpty()) {
        }
    }

    @Override
    public boolean isEmpty() {
        if (this.lvConsumerNode() == this.lvProducerNode()) {
            return true;
        }
        return false;
    }

    LinkedQueueNode<T> lpConsumerNode() {
        return this.consumerNode.get();
    }

    LinkedQueueNode<T> lvConsumerNode() {
        return this.consumerNode.get();
    }

    LinkedQueueNode<T> lvProducerNode() {
        return this.producerNode.get();
    }

    @Override
    public boolean offer(T object) {
        if (object == null) {
            throw new NullPointerException("Null is not a valid element");
        }
        object = new LinkedQueueNode<T>(object);
        this.xchgProducerNode((LinkedQueueNode<T>)object).soNext((LinkedQueueNode<T>)object);
        return true;
    }

    @Override
    public boolean offer(T t, T t2) {
        this.offer(t);
        this.offer(t2);
        return true;
    }

    @Nullable
    @Override
    public T poll() {
        LinkedQueueNode<T> linkedQueueNode = this.lpConsumerNode();
        LinkedQueueNode<T> linkedQueueNode2 = linkedQueueNode.lvNext();
        if (linkedQueueNode2 != null) {
            linkedQueueNode = linkedQueueNode2.getAndNullValue();
            this.spConsumerNode(linkedQueueNode2);
            return (T)linkedQueueNode;
        }
        if (linkedQueueNode != this.lvProducerNode()) {
            while ((linkedQueueNode2 = linkedQueueNode.lvNext()) == null) {
            }
            linkedQueueNode = linkedQueueNode2.getAndNullValue();
            this.spConsumerNode(linkedQueueNode2);
            return (T)linkedQueueNode;
        }
        return null;
    }

    void spConsumerNode(LinkedQueueNode<T> linkedQueueNode) {
        this.consumerNode.lazySet(linkedQueueNode);
    }

    LinkedQueueNode<T> xchgProducerNode(LinkedQueueNode<T> linkedQueueNode) {
        return this.producerNode.getAndSet(linkedQueueNode);
    }

    static final class LinkedQueueNode<E>
    extends AtomicReference<LinkedQueueNode<E>> {
        private static final long serialVersionUID = 2404266111789071508L;
        private E value;

        LinkedQueueNode() {
        }

        LinkedQueueNode(E e) {
            this.spValue(e);
        }

        public E getAndNullValue() {
            E e = this.lpValue();
            this.spValue(null);
            return e;
        }

        public E lpValue() {
            return this.value;
        }

        public LinkedQueueNode<E> lvNext() {
            return (LinkedQueueNode)this.get();
        }

        public void soNext(LinkedQueueNode<E> linkedQueueNode) {
            this.lazySet(linkedQueueNode);
        }

        public void spValue(E e) {
            this.value = e;
        }
    }

}

