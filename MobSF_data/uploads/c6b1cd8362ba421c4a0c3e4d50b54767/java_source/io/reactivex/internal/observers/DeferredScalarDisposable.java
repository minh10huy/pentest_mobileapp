/*
 * Decompiled with CFR 0_132.
 */
package io.reactivex.internal.observers;

import io.reactivex.Observer;
import io.reactivex.annotations.Nullable;
import io.reactivex.internal.observers.BasicIntQueueDisposable;
import io.reactivex.plugins.RxJavaPlugins;

public class DeferredScalarDisposable<T>
extends BasicIntQueueDisposable<T> {
    static final int DISPOSED = 4;
    static final int FUSED_CONSUMED = 32;
    static final int FUSED_EMPTY = 8;
    static final int FUSED_READY = 16;
    static final int TERMINATED = 2;
    private static final long serialVersionUID = -5502432239815349361L;
    protected final Observer<? super T> actual;
    protected T value;

    public DeferredScalarDisposable(Observer<? super T> observer) {
        this.actual = observer;
    }

    @Override
    public final void clear() {
        this.lazySet(32);
        this.value = null;
    }

    public final void complete() {
        if ((this.get() & 54) != 0) {
            return;
        }
        this.lazySet(2);
        this.actual.onComplete();
    }

    public final void complete(T t) {
        int n = this.get();
        if ((n & 54) != 0) {
            return;
        }
        if (n == 8) {
            this.value = t;
            this.lazySet(16);
        } else {
            this.lazySet(2);
        }
        Observer<T> observer = this.actual;
        observer.onNext(t);
        if (this.get() != 4) {
            observer.onComplete();
        }
    }

    @Override
    public void dispose() {
        this.set(4);
        this.value = null;
    }

    public final void error(Throwable throwable) {
        if ((this.get() & 54) != 0) {
            RxJavaPlugins.onError(throwable);
            return;
        }
        this.lazySet(2);
        this.actual.onError(throwable);
    }

    @Override
    public final boolean isDisposed() {
        if (this.get() == 4) {
            return true;
        }
        return false;
    }

    @Override
    public final boolean isEmpty() {
        if (this.get() != 16) {
            return true;
        }
        return false;
    }

    @Nullable
    @Override
    public final T poll() throws Exception {
        if (this.get() == 16) {
            T t = this.value;
            this.value = null;
            this.lazySet(32);
            return t;
        }
        return null;
    }

    @Override
    public final int requestFusion(int n) {
        if ((n & 2) != 0) {
            this.lazySet(8);
            return 2;
        }
        return 0;
    }

    public final boolean tryDispose() {
        if (this.getAndSet(4) != 4) {
            return true;
        }
        return false;
    }
}

