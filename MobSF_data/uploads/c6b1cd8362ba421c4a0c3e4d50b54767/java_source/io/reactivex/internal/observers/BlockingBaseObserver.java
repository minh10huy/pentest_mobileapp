/*
 * Decompiled with CFR 0_132.
 */
package io.reactivex.internal.observers;

import io.reactivex.Observer;
import io.reactivex.disposables.Disposable;
import io.reactivex.internal.util.BlockingHelper;
import io.reactivex.internal.util.ExceptionHelper;
import java.util.concurrent.CountDownLatch;

public abstract class BlockingBaseObserver<T>
extends CountDownLatch
implements Observer<T>,
Disposable {
    volatile boolean cancelled;
    Disposable d;
    Throwable error;
    T value;

    public BlockingBaseObserver() {
        super(1);
    }

    public final T blockingGet() {
        Throwable throwable;
        if (this.getCount() != 0L) {
            try {
                BlockingHelper.verifyNonBlocking();
                this.await();
            }
            catch (InterruptedException interruptedException) {
                this.dispose();
                throw ExceptionHelper.wrapOrThrow(interruptedException);
            }
        }
        if ((throwable = this.error) != null) {
            throw ExceptionHelper.wrapOrThrow(throwable);
        }
        return this.value;
    }

    @Override
    public final void dispose() {
        this.cancelled = true;
        Disposable disposable = this.d;
        if (disposable != null) {
            disposable.dispose();
        }
    }

    @Override
    public final boolean isDisposed() {
        return this.cancelled;
    }

    @Override
    public final void onComplete() {
        this.countDown();
    }

    @Override
    public final void onSubscribe(Disposable disposable) {
        this.d = disposable;
        if (this.cancelled) {
            disposable.dispose();
        }
    }
}

