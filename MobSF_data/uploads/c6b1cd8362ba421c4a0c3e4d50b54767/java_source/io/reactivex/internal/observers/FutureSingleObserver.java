/*
 * Decompiled with CFR 0_132.
 */
package io.reactivex.internal.observers;

import io.reactivex.SingleObserver;
import io.reactivex.disposables.Disposable;
import io.reactivex.internal.disposables.DisposableHelper;
import io.reactivex.internal.util.BlockingHelper;
import io.reactivex.plugins.RxJavaPlugins;
import java.util.concurrent.CancellationException;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;
import java.util.concurrent.atomic.AtomicReference;

public final class FutureSingleObserver<T>
extends CountDownLatch
implements SingleObserver<T>,
Future<T>,
Disposable {
    Throwable error;
    final AtomicReference<Disposable> s = new AtomicReference();
    T value;

    public FutureSingleObserver() {
        super(1);
    }

    @Override
    public boolean cancel(boolean bl) {
        Disposable disposable;
        while ((disposable = this.s.get()) != this && disposable != DisposableHelper.DISPOSED) {
            if (!this.s.compareAndSet(disposable, DisposableHelper.DISPOSED)) continue;
            if (disposable != null) {
                disposable.dispose();
            }
            this.countDown();
            return true;
        }
        return false;
    }

    @Override
    public void dispose() {
    }

    @Override
    public T get() throws InterruptedException, ExecutionException {
        if (this.getCount() != 0L) {
            BlockingHelper.verifyNonBlocking();
            this.await();
        }
        if (this.isCancelled()) {
            throw new CancellationException();
        }
        Throwable throwable = this.error;
        if (throwable != null) {
            throw new ExecutionException(throwable);
        }
        return this.value;
    }

    @Override
    public T get(long l, TimeUnit object) throws InterruptedException, ExecutionException, TimeoutException {
        if (this.getCount() != 0L) {
            BlockingHelper.verifyNonBlocking();
            if (!this.await(l, (TimeUnit)((Object)object))) {
                throw new TimeoutException();
            }
        }
        if (this.isCancelled()) {
            throw new CancellationException();
        }
        object = this.error;
        if (object != null) {
            throw new ExecutionException((Throwable)object);
        }
        return this.value;
    }

    @Override
    public boolean isCancelled() {
        return DisposableHelper.isDisposed(this.s.get());
    }

    @Override
    public boolean isDisposed() {
        return this.isDone();
    }

    @Override
    public boolean isDone() {
        if (this.getCount() == 0L) {
            return true;
        }
        return false;
    }

    @Override
    public void onError(Throwable throwable) {
        Disposable disposable;
        do {
            if ((disposable = this.s.get()) == DisposableHelper.DISPOSED) {
                RxJavaPlugins.onError(throwable);
                return;
            }
            this.error = throwable;
        } while (!this.s.compareAndSet(disposable, this));
        this.countDown();
    }

    @Override
    public void onSubscribe(Disposable disposable) {
        DisposableHelper.setOnce(this.s, disposable);
    }

    @Override
    public void onSuccess(T t) {
        Disposable disposable = this.s.get();
        if (disposable == DisposableHelper.DISPOSED) {
            return;
        }
        this.value = t;
        this.s.compareAndSet(disposable, this);
        this.countDown();
    }
}

