/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  org.reactivestreams.Subscription
 */
package io.reactivex.internal.subscriptions;

import io.reactivex.internal.functions.ObjectHelper;
import io.reactivex.internal.subscriptions.SubscriptionHelper;
import io.reactivex.internal.util.BackpressureHelper;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
import java.util.concurrent.atomic.AtomicReference;
import org.reactivestreams.Subscription;

public class SubscriptionArbiter
extends AtomicInteger
implements Subscription {
    private static final long serialVersionUID = -2189523197179400958L;
    Subscription actual;
    volatile boolean cancelled;
    final AtomicLong missedProduced = new AtomicLong();
    final AtomicLong missedRequested = new AtomicLong();
    final AtomicReference<Subscription> missedSubscription = new AtomicReference();
    long requested;
    protected boolean unbounded;

    public void cancel() {
        if (!this.cancelled) {
            this.cancelled = true;
            this.drain();
        }
    }

    final void drain() {
        if (this.getAndIncrement() != 0) {
            return;
        }
        this.drainLoop();
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Lifted jumps to return sites
     */
    final void drainLoop() {
        var11_1 = null;
        var5_2 = 0L;
        var1_3 = 1;
        do {
            block16 : {
                block15 : {
                    block14 : {
                        var12_8 = var13_9 = this.missedSubscription.get();
                        if (var13_9 != null) {
                            var12_8 = this.missedSubscription.getAndSet(null);
                        }
                        var7_6 = var3_5 = this.missedRequested.get();
                        if (var3_5 != 0L) {
                            var7_6 = this.missedRequested.getAndSet(0L);
                        }
                        var3_5 = var9_7 = this.missedProduced.get();
                        if (var9_7 != 0L) {
                            var3_5 = this.missedProduced.getAndSet(0L);
                        }
                        var13_9 = this.actual;
                        if (!this.cancelled) break block14;
                        if (var13_9 != null) {
                            var13_9.cancel();
                            this.actual = null;
                        }
                        if (var12_8 != null) {
                            var12_8.cancel();
                        }
                        ** GOTO lbl-1000
                    }
                    var9_7 = this.requested;
                    if (var9_7 != Long.MAX_VALUE) {
                        if ((var9_7 = BackpressureHelper.addCap(var9_7, var7_6)) != Long.MAX_VALUE) {
                            var3_5 = var9_7 -= var3_5;
                            if (var9_7 < 0L) {
                                SubscriptionHelper.reportMoreProduced(var9_7);
                                var3_5 = 0L;
                            }
                        } else {
                            var3_5 = var9_7;
                        }
                        this.requested = var3_5;
                    } else {
                        var3_5 = var9_7;
                    }
                    if (var12_8 == null) break block15;
                    if (var13_9 != null) {
                        var13_9.cancel();
                    }
                    this.actual = var12_8;
                    if (var3_5 == 0L) ** GOTO lbl-1000
                    var3_5 = BackpressureHelper.addCap(var5_2, var3_5);
                    break block16;
                }
                if (var13_9 != null && var7_6 != 0L) {
                    var3_5 = BackpressureHelper.addCap(var5_2, var7_6);
                    var12_8 = var13_9;
                } else lbl-1000: // 3 sources:
                {
                    var12_8 = var11_1;
                    var3_5 = var5_2;
                }
            }
            var2_4 = this.addAndGet(- var1_3);
            var5_2 = var3_5;
            var1_3 = var2_4;
            var11_1 = var12_8;
        } while (var2_4 != 0);
        if (var3_5 == 0L) return;
        var12_8.request(var3_5);
    }

    public final boolean isCancelled() {
        return this.cancelled;
    }

    public final boolean isUnbounded() {
        return this.unbounded;
    }

    public final void produced(long l) {
        if (this.unbounded) {
            return;
        }
        if (this.get() == 0 && this.compareAndSet(0, 1)) {
            long l2 = this.requested;
            if (l2 != Long.MAX_VALUE) {
                l = l2 - l;
                l2 = 0L;
                if (l < 0L) {
                    SubscriptionHelper.reportMoreProduced(l);
                    l = l2;
                }
                this.requested = l;
            }
            if (this.decrementAndGet() == 0) {
                return;
            }
            this.drainLoop();
            return;
        }
        BackpressureHelper.add(this.missedProduced, l);
        this.drain();
    }

    public final void request(long l) {
        if (SubscriptionHelper.validate(l)) {
            if (this.unbounded) {
                return;
            }
            if (this.get() == 0 && this.compareAndSet(0, 1)) {
                long l2 = this.requested;
                if (l2 != Long.MAX_VALUE) {
                    this.requested = l2 = BackpressureHelper.addCap(l2, l);
                    if (l2 == Long.MAX_VALUE) {
                        this.unbounded = true;
                    }
                }
                Subscription subscription = this.actual;
                if (this.decrementAndGet() != 0) {
                    this.drainLoop();
                }
                if (subscription != null) {
                    subscription.request(l);
                }
                return;
            }
            BackpressureHelper.add(this.missedRequested, l);
            this.drain();
        }
    }

    public final void setSubscription(Subscription subscription) {
        if (this.cancelled) {
            subscription.cancel();
            return;
        }
        ObjectHelper.requireNonNull(subscription, "s is null");
        if (this.get() == 0 && this.compareAndSet(0, 1)) {
            Subscription subscription2 = this.actual;
            if (subscription2 != null) {
                subscription2.cancel();
            }
            this.actual = subscription;
            long l = this.requested;
            if (this.decrementAndGet() != 0) {
                this.drainLoop();
            }
            if (l != 0L) {
                subscription.request(l);
            }
            return;
        }
        if ((subscription = this.missedSubscription.getAndSet(subscription)) != null) {
            subscription.cancel();
        }
        this.drain();
    }
}

