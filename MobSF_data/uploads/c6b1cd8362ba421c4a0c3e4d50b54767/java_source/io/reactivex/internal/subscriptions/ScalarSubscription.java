/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  org.reactivestreams.Subscriber
 */
package io.reactivex.internal.subscriptions;

import io.reactivex.annotations.Nullable;
import io.reactivex.internal.fuseable.QueueSubscription;
import io.reactivex.internal.subscriptions.SubscriptionHelper;
import java.util.concurrent.atomic.AtomicInteger;
import org.reactivestreams.Subscriber;

public final class ScalarSubscription<T>
extends AtomicInteger
implements QueueSubscription<T> {
    static final int CANCELLED = 2;
    static final int NO_REQUEST = 0;
    static final int REQUESTED = 1;
    private static final long serialVersionUID = -3830916580126663321L;
    final Subscriber<? super T> subscriber;
    final T value;

    public ScalarSubscription(Subscriber<? super T> subscriber, T t) {
        this.subscriber = subscriber;
        this.value = t;
    }

    public void cancel() {
        this.lazySet(2);
    }

    @Override
    public void clear() {
        this.lazySet(1);
    }

    public boolean isCancelled() {
        if (this.get() == 2) {
            return true;
        }
        return false;
    }

    @Override
    public boolean isEmpty() {
        if (this.get() != 0) {
            return true;
        }
        return false;
    }

    @Override
    public boolean offer(T t) {
        throw new UnsupportedOperationException("Should not be called!");
    }

    @Override
    public boolean offer(T t, T t2) {
        throw new UnsupportedOperationException("Should not be called!");
    }

    @Nullable
    @Override
    public T poll() {
        if (this.get() == 0) {
            this.lazySet(1);
            return this.value;
        }
        return null;
    }

    public void request(long l) {
        if (!SubscriptionHelper.validate(l)) {
            return;
        }
        if (this.compareAndSet(0, 1)) {
            Subscriber<? super T> subscriber = this.subscriber;
            subscriber.onNext(this.value);
            if (this.get() != 2) {
                subscriber.onComplete();
            }
        }
    }

    @Override
    public int requestFusion(int n) {
        return n & 1;
    }
}

