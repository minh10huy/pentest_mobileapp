/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  org.reactivestreams.Subscription
 */
package io.reactivex.internal.subscriptions;

import io.reactivex.disposables.Disposable;
import io.reactivex.internal.subscriptions.SubscriptionHelper;
import java.util.concurrent.atomic.AtomicReferenceArray;
import org.reactivestreams.Subscription;

public final class ArrayCompositeSubscription
extends AtomicReferenceArray<Subscription>
implements Disposable {
    private static final long serialVersionUID = 2746389416410565408L;

    public ArrayCompositeSubscription(int n) {
        super(n);
    }

    @Override
    public void dispose() {
        if (this.get(0) != SubscriptionHelper.CANCELLED) {
            int n = this.length();
            for (int i = 0; i < n; ++i) {
                Subscription subscription;
                if ((Subscription)this.get(i) == SubscriptionHelper.CANCELLED || (subscription = (Subscription)this.getAndSet(i, SubscriptionHelper.CANCELLED)) == SubscriptionHelper.CANCELLED || subscription == null) continue;
                subscription.cancel();
            }
        }
    }

    @Override
    public boolean isDisposed() {
        boolean bl = false;
        if (this.get(0) == SubscriptionHelper.CANCELLED) {
            bl = true;
        }
        return bl;
    }

    public Subscription replaceResource(int n, Subscription subscription) {
        Subscription subscription2;
        do {
            if ((subscription2 = (Subscription)this.get(n)) != SubscriptionHelper.CANCELLED) continue;
            if (subscription != null) {
                subscription.cancel();
            }
            return null;
        } while (!this.compareAndSet(n, subscription2, subscription));
        return subscription2;
    }

    public boolean setResource(int n, Subscription subscription) {
        Subscription subscription2;
        do {
            if ((subscription2 = (Subscription)this.get(n)) != SubscriptionHelper.CANCELLED) continue;
            if (subscription != null) {
                subscription.cancel();
            }
            return false;
        } while (!this.compareAndSet(n, subscription2, subscription));
        if (subscription2 != null) {
            subscription2.cancel();
        }
        return true;
    }
}

