/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  org.reactivestreams.Subscription
 */
package io.reactivex.internal.subscriptions;

import io.reactivex.exceptions.ProtocolViolationException;
import io.reactivex.internal.functions.ObjectHelper;
import io.reactivex.internal.util.BackpressureHelper;
import io.reactivex.plugins.RxJavaPlugins;
import java.util.concurrent.atomic.AtomicLong;
import java.util.concurrent.atomic.AtomicReference;
import org.reactivestreams.Subscription;

public enum SubscriptionHelper implements Subscription
{
    CANCELLED;
    

    private SubscriptionHelper() {
    }

    public static boolean cancel(AtomicReference<Subscription> subscription) {
        if (subscription.get() != CANCELLED && (subscription = subscription.getAndSet((Subscription)CANCELLED)) != CANCELLED) {
            if (subscription != null) {
                subscription.cancel();
            }
            return true;
        }
        return false;
    }

    public static void deferredRequest(AtomicReference<Subscription> subscription, AtomicLong atomicLong, long l) {
        Subscription subscription2 = subscription.get();
        if (subscription2 != null) {
            subscription2.request(l);
            return;
        }
        if (SubscriptionHelper.validate(l)) {
            BackpressureHelper.add(atomicLong, l);
            subscription = subscription.get();
            if (subscription != null && (l = atomicLong.getAndSet(0L)) != 0L) {
                subscription.request(l);
            }
        }
    }

    public static boolean deferredSetOnce(AtomicReference<Subscription> atomicReference, AtomicLong atomicLong, Subscription subscription) {
        if (SubscriptionHelper.setOnce(atomicReference, subscription)) {
            long l = atomicLong.getAndSet(0L);
            if (l != 0L) {
                subscription.request(l);
            }
            return true;
        }
        return false;
    }

    public static boolean isCancelled(Subscription subscription) {
        if (subscription == CANCELLED) {
            return true;
        }
        return false;
    }

    public static boolean replace(AtomicReference<Subscription> atomicReference, Subscription subscription) {
        Subscription subscription2;
        do {
            if ((subscription2 = atomicReference.get()) != CANCELLED) continue;
            if (subscription != null) {
                subscription.cancel();
            }
            return false;
        } while (!atomicReference.compareAndSet(subscription2, subscription));
        return true;
    }

    public static void reportMoreProduced(long l) {
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("More produced than requested: ");
        stringBuilder.append(l);
        RxJavaPlugins.onError(new ProtocolViolationException(stringBuilder.toString()));
    }

    public static void reportSubscriptionSet() {
        RxJavaPlugins.onError(new ProtocolViolationException("Subscription already set!"));
    }

    public static boolean set(AtomicReference<Subscription> atomicReference, Subscription subscription) {
        Subscription subscription2;
        do {
            if ((subscription2 = atomicReference.get()) != CANCELLED) continue;
            if (subscription != null) {
                subscription.cancel();
            }
            return false;
        } while (!atomicReference.compareAndSet(subscription2, subscription));
        if (subscription2 != null) {
            subscription2.cancel();
        }
        return true;
    }

    public static boolean setOnce(AtomicReference<Subscription> atomicReference, Subscription subscription) {
        ObjectHelper.requireNonNull(subscription, "s is null");
        if (!atomicReference.compareAndSet(null, subscription)) {
            subscription.cancel();
            if (atomicReference.get() != CANCELLED) {
                SubscriptionHelper.reportSubscriptionSet();
            }
            return false;
        }
        return true;
    }

    public static boolean validate(long l) {
        if (l <= 0L) {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("n > 0 required but it was ");
            stringBuilder.append(l);
            RxJavaPlugins.onError(new IllegalArgumentException(stringBuilder.toString()));
            return false;
        }
        return true;
    }

    public static boolean validate(Subscription subscription, Subscription subscription2) {
        if (subscription2 == null) {
            RxJavaPlugins.onError(new NullPointerException("next is null"));
            return false;
        }
        if (subscription != null) {
            subscription2.cancel();
            SubscriptionHelper.reportSubscriptionSet();
            return false;
        }
        return true;
    }

    public void cancel() {
    }

    public void request(long l) {
    }
}

