/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  org.reactivestreams.Subscription
 */
package io.reactivex.subscribers;

import io.reactivex.FlowableSubscriber;
import io.reactivex.disposables.Disposable;
import io.reactivex.internal.subscriptions.SubscriptionHelper;
import io.reactivex.internal.util.EndConsumerHelper;
import java.util.concurrent.atomic.AtomicReference;
import org.reactivestreams.Subscription;

public abstract class DisposableSubscriber<T>
implements FlowableSubscriber<T>,
Disposable {
    final AtomicReference<Subscription> s = new AtomicReference();

    protected final void cancel() {
        this.dispose();
    }

    @Override
    public final void dispose() {
        SubscriptionHelper.cancel(this.s);
    }

    @Override
    public final boolean isDisposed() {
        if (this.s.get() == SubscriptionHelper.CANCELLED) {
            return true;
        }
        return false;
    }

    protected void onStart() {
        this.s.get().request(Long.MAX_VALUE);
    }

    @Override
    public final void onSubscribe(Subscription subscription) {
        if (EndConsumerHelper.setOnce(this.s, subscription, this.getClass())) {
            this.onStart();
        }
    }

    protected final void request(long l) {
        this.s.get().request(l);
    }
}

