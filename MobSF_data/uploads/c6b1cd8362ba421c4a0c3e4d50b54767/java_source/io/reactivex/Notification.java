/*
 * Decompiled with CFR 0_132.
 */
package io.reactivex;

import io.reactivex.annotations.NonNull;
import io.reactivex.annotations.Nullable;
import io.reactivex.internal.functions.ObjectHelper;
import io.reactivex.internal.util.NotificationLite;

public final class Notification<T> {
    static final Notification<Object> COMPLETE = new Notification<T>(null);
    final Object value;

    private Notification(Object object) {
        this.value = object;
    }

    @NonNull
    public static <T> Notification<T> createOnComplete() {
        return COMPLETE;
    }

    @NonNull
    public static <T> Notification<T> createOnError(@NonNull Throwable throwable) {
        ObjectHelper.requireNonNull(throwable, "error is null");
        return new Notification<T>(NotificationLite.error(throwable));
    }

    @NonNull
    public static <T> Notification<T> createOnNext(@NonNull T t) {
        ObjectHelper.requireNonNull(t, "value is null");
        return new Notification<T>(t);
    }

    public boolean equals(Object object) {
        if (object instanceof Notification) {
            object = (Notification)object;
            return ObjectHelper.equals(this.value, object.value);
        }
        return false;
    }

    @Nullable
    public Throwable getError() {
        Object object = this.value;
        if (NotificationLite.isError(object)) {
            return NotificationLite.getError(object);
        }
        return null;
    }

    @Nullable
    public T getValue() {
        Object object = this.value;
        if (object != null && !NotificationLite.isError(object)) {
            return (T)this.value;
        }
        return null;
    }

    public int hashCode() {
        Object object = this.value;
        if (object != null) {
            return object.hashCode();
        }
        return 0;
    }

    public boolean isOnComplete() {
        if (this.value == null) {
            return true;
        }
        return false;
    }

    public boolean isOnError() {
        return NotificationLite.isError(this.value);
    }

    public boolean isOnNext() {
        Object object = this.value;
        if (object != null && !NotificationLite.isError(object)) {
            return true;
        }
        return false;
    }

    public String toString() {
        Object object = this.value;
        if (object == null) {
            return "OnCompleteNotification";
        }
        if (NotificationLite.isError(object)) {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("OnErrorNotification[");
            stringBuilder.append(NotificationLite.getError(object));
            stringBuilder.append("]");
            return stringBuilder.toString();
        }
        object = new StringBuilder();
        object.append("OnNextNotification[");
        object.append(this.value);
        object.append("]");
        return object.toString();
    }
}

