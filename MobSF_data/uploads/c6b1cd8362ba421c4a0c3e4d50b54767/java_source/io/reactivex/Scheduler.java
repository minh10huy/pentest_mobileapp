/*
 * Decompiled with CFR 0_132.
 */
package io.reactivex;

import io.reactivex.Completable;
import io.reactivex.Flowable;
import io.reactivex.annotations.NonNull;
import io.reactivex.disposables.Disposable;
import io.reactivex.exceptions.Exceptions;
import io.reactivex.functions.Function;
import io.reactivex.internal.disposables.EmptyDisposable;
import io.reactivex.internal.disposables.SequentialDisposable;
import io.reactivex.internal.schedulers.NewThreadWorker;
import io.reactivex.internal.schedulers.SchedulerWhen;
import io.reactivex.internal.util.ExceptionHelper;
import io.reactivex.plugins.RxJavaPlugins;
import java.util.concurrent.TimeUnit;

public abstract class Scheduler {
    static final long CLOCK_DRIFT_TOLERANCE_NANOSECONDS = TimeUnit.MINUTES.toNanos(Long.getLong("rx2.scheduler.drift-tolerance", 15L));

    public static long clockDriftTolerance() {
        return CLOCK_DRIFT_TOLERANCE_NANOSECONDS;
    }

    @NonNull
    public abstract Worker createWorker();

    public long now(@NonNull TimeUnit timeUnit) {
        return timeUnit.convert(System.currentTimeMillis(), TimeUnit.MILLISECONDS);
    }

    @NonNull
    public Disposable scheduleDirect(@NonNull Runnable runnable) {
        return this.scheduleDirect(runnable, 0L, TimeUnit.NANOSECONDS);
    }

    @NonNull
    public Disposable scheduleDirect(@NonNull Runnable runnable, long l, @NonNull TimeUnit timeUnit) {
        Worker worker = this.createWorker();
        runnable = new DisposeTask(RxJavaPlugins.onSchedule(runnable), worker);
        worker.schedule(runnable, l, timeUnit);
        return runnable;
    }

    @NonNull
    public Disposable schedulePeriodicallyDirect(@NonNull Runnable runnable, long l, long l2, @NonNull TimeUnit object) {
        Worker worker = this.createWorker();
        object = worker.schedulePeriodically(runnable = new PeriodicDirectTask(RxJavaPlugins.onSchedule(runnable), worker), l, l2, (TimeUnit)((Object)object));
        if (object == EmptyDisposable.INSTANCE) {
            return object;
        }
        return runnable;
    }

    public void shutdown() {
    }

    public void start() {
    }

    @NonNull
    public <S extends Scheduler> S when(@NonNull Function<Flowable<Flowable<Completable>>, Completable> function) {
        return (S)new SchedulerWhen(function, this);
    }

    static final class DisposeTask
    implements Runnable,
    Disposable {
        final Runnable decoratedRun;
        Thread runner;
        final Worker w;

        DisposeTask(Runnable runnable, Worker worker) {
            this.decoratedRun = runnable;
            this.w = worker;
        }

        @Override
        public void dispose() {
            if (this.runner == Thread.currentThread() && this.w instanceof NewThreadWorker) {
                ((NewThreadWorker)this.w).shutdown();
                return;
            }
            this.w.dispose();
        }

        @Override
        public boolean isDisposed() {
            return this.w.isDisposed();
        }

        @Override
        public void run() {
            this.runner = Thread.currentThread();
            try {
                this.decoratedRun.run();
                return;
            }
            finally {
                this.dispose();
                this.runner = null;
            }
        }
    }

    static class PeriodicDirectTask
    implements Runnable,
    Disposable {
        @NonNull
        volatile boolean disposed;
        final Runnable run;
        @NonNull
        final Worker worker;

        PeriodicDirectTask(@NonNull Runnable runnable, @NonNull Worker worker) {
            this.run = runnable;
            this.worker = worker;
        }

        @Override
        public void dispose() {
            this.disposed = true;
            this.worker.dispose();
        }

        @Override
        public boolean isDisposed() {
            return this.disposed;
        }

        @Override
        public void run() {
            if (!this.disposed) {
                try {
                    this.run.run();
                    return;
                }
                catch (Throwable throwable) {
                    Exceptions.throwIfFatal(throwable);
                    this.worker.dispose();
                    throw ExceptionHelper.wrapOrThrow(throwable);
                }
            }
        }
    }

    public static abstract class Worker
    implements Disposable {
        public long now(@NonNull TimeUnit timeUnit) {
            return timeUnit.convert(System.currentTimeMillis(), TimeUnit.MILLISECONDS);
        }

        @NonNull
        public Disposable schedule(@NonNull Runnable runnable) {
            return this.schedule(runnable, 0L, TimeUnit.NANOSECONDS);
        }

        @NonNull
        public abstract Disposable schedule(@NonNull Runnable var1, long var2, @NonNull TimeUnit var4);

        @NonNull
        public Disposable schedulePeriodically(@NonNull Runnable object, long l, long l2, @NonNull TimeUnit timeUnit) {
            SequentialDisposable sequentialDisposable = new SequentialDisposable();
            SequentialDisposable sequentialDisposable2 = new SequentialDisposable(sequentialDisposable);
            object = RxJavaPlugins.onSchedule((Runnable)object);
            l2 = timeUnit.toNanos(l2);
            long l3 = this.now(TimeUnit.NANOSECONDS);
            object = this.schedule(new PeriodicTask(l3 + timeUnit.toNanos(l), (Runnable)object, l3, sequentialDisposable2, l2), l, timeUnit);
            if (object == EmptyDisposable.INSTANCE) {
                return object;
            }
            sequentialDisposable.replace((Disposable)object);
            return sequentialDisposable2;
        }

        final class PeriodicTask
        implements Runnable {
            long count;
            @NonNull
            final Runnable decoratedRun;
            long lastNowNanoseconds;
            final long periodInNanoseconds;
            @NonNull
            final SequentialDisposable sd;
            long startInNanoseconds;

            PeriodicTask(@NonNull long l, Runnable runnable, @NonNull long l2, SequentialDisposable sequentialDisposable, long l3) {
                this.decoratedRun = runnable;
                this.sd = sequentialDisposable;
                this.periodInNanoseconds = l3;
                this.lastNowNanoseconds = l2;
                this.startInNanoseconds = l;
            }

            @Override
            public void run() {
                this.decoratedRun.run();
                if (!this.sd.isDisposed()) {
                    long l;
                    long l2 = Worker.this.now(TimeUnit.NANOSECONDS);
                    if (l2 + Scheduler.CLOCK_DRIFT_TOLERANCE_NANOSECONDS >= this.lastNowNanoseconds && l2 < this.lastNowNanoseconds + this.periodInNanoseconds + Scheduler.CLOCK_DRIFT_TOLERANCE_NANOSECONDS) {
                        long l3;
                        l = this.startInNanoseconds;
                        this.count = l3 = this.count + 1L;
                        l += l3 * this.periodInNanoseconds;
                    } else {
                        long l4;
                        l = l2 + this.periodInNanoseconds;
                        long l5 = this.periodInNanoseconds;
                        this.count = l4 = this.count + 1L;
                        this.startInNanoseconds = l - l5 * l4;
                    }
                    this.lastNowNanoseconds = l2;
                    this.sd.replace(Worker.this.schedule(this, l - l2, TimeUnit.NANOSECONDS));
                }
            }
        }

    }

}

