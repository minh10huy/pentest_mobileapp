/*
 * Decompiled with CFR 0_132.
 */
package io.reactivex.exceptions;

import io.reactivex.annotations.NonNull;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.List;

public final class CompositeException
extends RuntimeException {
    private static final long serialVersionUID = 3026362227162912146L;
    private Throwable cause;
    private final List<Throwable> exceptions;
    private final String message;

    public CompositeException(@NonNull Iterable<? extends Throwable> object) {
        LinkedHashSet<Throwable> linkedHashSet = new LinkedHashSet<Throwable>();
        ArrayList<Throwable> arrayList = new ArrayList<Throwable>();
        if (object != null) {
            object = object.iterator();
            while (object.hasNext()) {
                Throwable throwable = (Throwable)object.next();
                if (throwable instanceof CompositeException) {
                    linkedHashSet.addAll(((CompositeException)throwable).getExceptions());
                    continue;
                }
                if (throwable != null) {
                    linkedHashSet.add(throwable);
                    continue;
                }
                linkedHashSet.add(new NullPointerException("Throwable was null!"));
            }
        } else {
            linkedHashSet.add(new NullPointerException("errors was null"));
        }
        if (linkedHashSet.isEmpty()) {
            throw new IllegalArgumentException("errors is empty");
        }
        arrayList.addAll(linkedHashSet);
        this.exceptions = Collections.unmodifiableList(arrayList);
        object = new StringBuilder();
        object.append(this.exceptions.size());
        object.append(" exceptions occurred. ");
        this.message = object.toString();
    }

    public /* varargs */ CompositeException(@NonNull Throwable ... object) {
        object = object == null ? Collections.singletonList(new NullPointerException("exceptions was null")) : Arrays.asList(object);
        this((Iterable<? extends Throwable>)object);
    }

    private void appendStackTrace(StringBuilder stringBuilder, Throwable throwable, String arrstackTraceElement) {
        stringBuilder.append((String)arrstackTraceElement);
        stringBuilder.append(throwable);
        stringBuilder.append('\n');
        for (StackTraceElement stackTraceElement : throwable.getStackTrace()) {
            stringBuilder.append("\t\tat ");
            stringBuilder.append(stackTraceElement);
            stringBuilder.append('\n');
        }
        if (throwable.getCause() != null) {
            stringBuilder.append("\tCaused by: ");
            this.appendStackTrace(stringBuilder, throwable.getCause(), "");
        }
    }

    private List<Throwable> getListOfCauses(Throwable throwable) {
        ArrayList<Throwable> arrayList = new ArrayList<Throwable>();
        Throwable throwable2 = throwable.getCause();
        if (throwable2 != null) {
            Throwable throwable3 = throwable2;
            if (throwable2 == throwable) {
                return arrayList;
            }
            do {
                arrayList.add(throwable3);
                throwable = throwable3.getCause();
                if (throwable == null) break;
                if (throwable == throwable3) {
                    return arrayList;
                }
                throwable3 = throwable;
            } while (true);
            return arrayList;
        }
        return arrayList;
    }

    private Throwable getRootCause(Throwable throwable) {
        Throwable throwable2 = throwable.getCause();
        if (throwable2 != null) {
            Throwable throwable3 = throwable2;
            if (this.cause == throwable2) {
                return throwable;
            }
            while ((throwable = throwable3.getCause()) != null) {
                if (throwable == throwable3) {
                    return throwable3;
                }
                throwable3 = throwable;
            }
            return throwable3;
        }
        return throwable;
    }

    private void printStackTrace(PrintStreamOrWriter printStreamOrWriter) {
        StringBuilder stringBuilder = new StringBuilder(128);
        stringBuilder.append(this);
        stringBuilder.append('\n');
        for (Serializable serializable : this.getStackTrace()) {
            stringBuilder.append("\tat ");
            stringBuilder.append(serializable);
            stringBuilder.append('\n');
        }
        Iterator<Throwable> iterator = this.exceptions.iterator();
        int n = 1;
        while (iterator.hasNext()) {
            Serializable serializable;
            serializable = (Throwable)iterator.next();
            stringBuilder.append("  ComposedException ");
            stringBuilder.append(n);
            stringBuilder.append(" :\n");
            this.appendStackTrace(stringBuilder, (Throwable)serializable, "\t");
            ++n;
        }
        printStreamOrWriter.println(stringBuilder.toString());
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @NonNull
    @Override
    public Throwable getCause() {
        synchronized (this) {
            if (this.cause != null) return this.cause;
            CompositeExceptionCausalChain compositeExceptionCausalChain = new CompositeExceptionCausalChain();
            HashSet<Throwable> hashSet = new HashSet<Throwable>();
            Iterator<Throwable> iterator = this.exceptions.iterator();
            Throwable throwable = compositeExceptionCausalChain;
            do {
                Iterator<Throwable> iterator2;
                Throwable throwable2;
                if (iterator.hasNext()) {
                    throwable2 = iterator.next();
                    if (hashSet.contains(throwable2)) continue;
                    hashSet.add(throwable2);
                    iterator2 = this.getListOfCauses(throwable2).iterator();
                } else {
                    this.cause = compositeExceptionCausalChain;
                    return this.cause;
                }
                while (iterator2.hasNext()) {
                    Throwable throwable3 = iterator2.next();
                    if (hashSet.contains(throwable3)) {
                        throwable2 = new RuntimeException("Duplicate found in causal chain so cropping to prevent loop ...");
                        continue;
                    }
                    hashSet.add(throwable3);
                }
                try {
                    throwable.initCause(throwable2);
                }
                catch (Throwable throwable4) {}
                throwable = this.getRootCause(throwable);
            } while (true);
        }
    }

    @NonNull
    public List<Throwable> getExceptions() {
        return this.exceptions;
    }

    @NonNull
    @Override
    public String getMessage() {
        return this.message;
    }

    @Override
    public void printStackTrace() {
        this.printStackTrace(System.err);
    }

    @Override
    public void printStackTrace(PrintStream printStream) {
        this.printStackTrace(new WrappedPrintStream(printStream));
    }

    @Override
    public void printStackTrace(PrintWriter printWriter) {
        this.printStackTrace(new WrappedPrintWriter(printWriter));
    }

    public int size() {
        return this.exceptions.size();
    }

    static final class CompositeExceptionCausalChain
    extends RuntimeException {
        static final String MESSAGE = "Chain of Causes for CompositeException In Order Received =>";
        private static final long serialVersionUID = 3875212506787802066L;

        CompositeExceptionCausalChain() {
        }

        @Override
        public String getMessage() {
            return MESSAGE;
        }
    }

    static abstract class PrintStreamOrWriter {
        PrintStreamOrWriter() {
        }

        abstract void println(Object var1);
    }

    static final class WrappedPrintStream
    extends PrintStreamOrWriter {
        private final PrintStream printStream;

        WrappedPrintStream(PrintStream printStream) {
            this.printStream = printStream;
        }

        @Override
        void println(Object object) {
            this.printStream.println(object);
        }
    }

    static final class WrappedPrintWriter
    extends PrintStreamOrWriter {
        private final PrintWriter printWriter;

        WrappedPrintWriter(PrintWriter printWriter) {
            this.printWriter = printWriter;
        }

        @Override
        void println(Object object) {
            this.printWriter.println(object);
        }
    }

}

