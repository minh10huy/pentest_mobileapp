/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  org.reactivestreams.Subscriber
 *  org.reactivestreams.Subscription
 */
package io.reactivex.processors;

import io.reactivex.annotations.CheckReturnValue;
import io.reactivex.annotations.Experimental;
import io.reactivex.exceptions.MissingBackpressureException;
import io.reactivex.internal.functions.ObjectHelper;
import io.reactivex.internal.subscriptions.SubscriptionHelper;
import io.reactivex.internal.util.AppendOnlyLinkedArrayList;
import io.reactivex.internal.util.BackpressureHelper;
import io.reactivex.internal.util.ExceptionHelper;
import io.reactivex.internal.util.NotificationLite;
import io.reactivex.plugins.RxJavaPlugins;
import io.reactivex.processors.FlowableProcessor;
import java.io.Serializable;
import java.lang.reflect.Array;
import java.util.concurrent.atomic.AtomicLong;
import java.util.concurrent.atomic.AtomicReference;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReadWriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import org.reactivestreams.Subscriber;
import org.reactivestreams.Subscription;

public final class BehaviorProcessor<T>
extends FlowableProcessor<T> {
    static final BehaviorSubscription[] EMPTY;
    static final Object[] EMPTY_ARRAY;
    static final BehaviorSubscription[] TERMINATED;
    long index;
    final ReadWriteLock lock = new ReentrantReadWriteLock();
    final Lock readLock = this.lock.readLock();
    final AtomicReference<BehaviorSubscription<T>[]> subscribers = new AtomicReference<BehaviorSubscription[]>(EMPTY);
    final AtomicReference<Throwable> terminalEvent = new AtomicReference();
    final AtomicReference<Object> value = new AtomicReference();
    final Lock writeLock = this.lock.writeLock();

    static {
        EMPTY_ARRAY = new Object[0];
        EMPTY = new BehaviorSubscription[0];
        TERMINATED = new BehaviorSubscription[0];
    }

    BehaviorProcessor() {
    }

    BehaviorProcessor(T t) {
        this();
        this.value.lazySet(ObjectHelper.requireNonNull(t, "defaultValue is null"));
    }

    @CheckReturnValue
    public static <T> BehaviorProcessor<T> create() {
        return new BehaviorProcessor<T>();
    }

    @CheckReturnValue
    public static <T> BehaviorProcessor<T> createDefault(T t) {
        ObjectHelper.requireNonNull(t, "defaultValue is null");
        return new BehaviorProcessor<T>(t);
    }

    boolean add(BehaviorSubscription<T> behaviorSubscription) {
        BehaviorSubscription[] arrbehaviorSubscription;
        BehaviorSubscription<T>[] arrbehaviorSubscription2;
        do {
            if ((arrbehaviorSubscription2 = this.subscribers.get()) == TERMINATED) {
                return false;
            }
            int n = arrbehaviorSubscription2.length;
            arrbehaviorSubscription = new BehaviorSubscription[n + 1];
            System.arraycopy(arrbehaviorSubscription2, 0, arrbehaviorSubscription, 0, n);
            arrbehaviorSubscription[n] = behaviorSubscription;
        } while (!this.subscribers.compareAndSet(arrbehaviorSubscription2, arrbehaviorSubscription));
        return true;
    }

    @Override
    public Throwable getThrowable() {
        Object object = this.value.get();
        if (NotificationLite.isError(object)) {
            return NotificationLite.getError(object);
        }
        return null;
    }

    public T getValue() {
        Object object = this.value.get();
        if (!NotificationLite.isComplete(object) && !NotificationLite.isError(object)) {
            return NotificationLite.getValue(object);
        }
        return null;
    }

    public Object[] getValues() {
        Object[] arrobject = this.getValues(EMPTY_ARRAY);
        if (arrobject == EMPTY_ARRAY) {
            return new Object[0];
        }
        return arrobject;
    }

    public T[] getValues(T[] arrT) {
        Object[] arrobject = this.value.get();
        if (arrobject != null && !NotificationLite.isComplete(arrobject) && !NotificationLite.isError(arrobject)) {
            Object t = NotificationLite.getValue(arrobject);
            if (arrT.length != 0) {
                arrT[0] = t;
                arrobject = arrT;
                if (arrT.length != 1) {
                    arrT[1] = null;
                    return arrT;
                }
            } else {
                arrobject = (Object[])Array.newInstance(arrT.getClass().getComponentType(), 1);
                arrobject[0] = t;
            }
            return arrobject;
        }
        if (arrT.length != 0) {
            arrT[0] = null;
        }
        return arrT;
    }

    @Override
    public boolean hasComplete() {
        return NotificationLite.isComplete(this.value.get());
    }

    @Override
    public boolean hasSubscribers() {
        if (this.subscribers.get().length != 0) {
            return true;
        }
        return false;
    }

    @Override
    public boolean hasThrowable() {
        return NotificationLite.isError(this.value.get());
    }

    public boolean hasValue() {
        Object object = this.value.get();
        if (object != null && !NotificationLite.isComplete(object) && !NotificationLite.isError(object)) {
            return true;
        }
        return false;
    }

    @Experimental
    public boolean offer(T object) {
        int n;
        if (object == null) {
            this.onError(new NullPointerException("onNext called with null. Null values are generally not allowed in 2.x operators and sources."));
            return true;
        }
        BehaviorSubscription<T>[] arrbehaviorSubscription = this.subscribers.get();
        int n2 = arrbehaviorSubscription.length;
        int n3 = 0;
        for (n = 0; n < n2; ++n) {
            if (!arrbehaviorSubscription[n].isFull()) continue;
            return false;
        }
        object = NotificationLite.next(object);
        this.setCurrent(object);
        n2 = arrbehaviorSubscription.length;
        for (n = n3; n < n2; ++n) {
            arrbehaviorSubscription[n].emitNext(object, this.index);
        }
        return true;
    }

    public void onComplete() {
        if (!this.terminalEvent.compareAndSet(null, ExceptionHelper.TERMINATED)) {
            return;
        }
        Object object = NotificationLite.complete();
        BehaviorSubscription<T>[] arrbehaviorSubscription = this.terminate(object);
        int n = arrbehaviorSubscription.length;
        for (int i = 0; i < n; ++i) {
            arrbehaviorSubscription[i].emitNext(object, this.index);
        }
    }

    public void onError(Throwable object) {
        BehaviorSubscription<T>[] arrbehaviorSubscription = object;
        if (object == null) {
            arrbehaviorSubscription = new NullPointerException("onError called with null. Null values are generally not allowed in 2.x operators and sources.");
        }
        if (!this.terminalEvent.compareAndSet(null, (Throwable)arrbehaviorSubscription)) {
            RxJavaPlugins.onError((Throwable)arrbehaviorSubscription);
            return;
        }
        object = NotificationLite.error((Throwable)arrbehaviorSubscription);
        arrbehaviorSubscription = this.terminate(object);
        int n = arrbehaviorSubscription.length;
        for (int i = 0; i < n; ++i) {
            arrbehaviorSubscription[i].emitNext(object, this.index);
        }
    }

    public void onNext(T object) {
        if (object == null) {
            this.onError(new NullPointerException("onNext called with null. Null values are generally not allowed in 2.x operators and sources."));
            return;
        }
        if (this.terminalEvent.get() != null) {
            return;
        }
        object = NotificationLite.next(object);
        this.setCurrent(object);
        BehaviorSubscription<T>[] arrbehaviorSubscription = this.subscribers.get();
        int n = arrbehaviorSubscription.length;
        for (int i = 0; i < n; ++i) {
            arrbehaviorSubscription[i].emitNext(object, this.index);
        }
    }

    @Override
    public void onSubscribe(Subscription subscription) {
        if (this.terminalEvent.get() != null) {
            subscription.cancel();
            return;
        }
        subscription.request(Long.MAX_VALUE);
    }

    void remove(BehaviorSubscription<T> behaviorSubscription) {
        BehaviorSubscription<T>[] arrbehaviorSubscription;
        while ((arrbehaviorSubscription = this.subscribers.get()) != TERMINATED) {
            int n;
            BehaviorSubscription[] arrbehaviorSubscription2;
            if (arrbehaviorSubscription == EMPTY) {
                return;
            }
            int n2 = arrbehaviorSubscription.length;
            int n3 = -1;
            int n4 = 0;
            do {
                n = n3;
                if (n4 >= n2) break;
                if (arrbehaviorSubscription[n4] == behaviorSubscription) {
                    n = n4;
                    break;
                }
                ++n4;
            } while (true);
            if (n < 0) {
                return;
            }
            if (n2 == 1) {
                arrbehaviorSubscription2 = EMPTY;
            } else {
                arrbehaviorSubscription2 = new BehaviorSubscription[n2 - 1];
                System.arraycopy(arrbehaviorSubscription, 0, arrbehaviorSubscription2, 0, n);
                System.arraycopy(arrbehaviorSubscription, n + 1, arrbehaviorSubscription2, n, n2 - n - 1);
            }
            if (!this.subscribers.compareAndSet(arrbehaviorSubscription, arrbehaviorSubscription2)) continue;
            return;
        }
    }

    void setCurrent(Object object) {
        Lock lock = this.writeLock;
        lock.lock();
        ++this.index;
        this.value.lazySet(object);
        lock.unlock();
    }

    @Override
    protected void subscribeActual(Subscriber<? super T> subscriber) {
        Serializable serializable = new BehaviorSubscription<T>(subscriber, this);
        subscriber.onSubscribe(serializable);
        if (this.add((BehaviorSubscription<T>)serializable)) {
            if (serializable.cancelled) {
                this.remove((BehaviorSubscription<T>)serializable);
                return;
            }
            serializable.emitFirst();
            return;
        }
        serializable = this.terminalEvent.get();
        if (serializable == ExceptionHelper.TERMINATED) {
            subscriber.onComplete();
            return;
        }
        subscriber.onError(serializable);
    }

    int subscriberCount() {
        return this.subscribers.get().length;
    }

    BehaviorSubscription<T>[] terminate(Object object) {
        BehaviorSubscription<T>[] arrbehaviorSubscription;
        BehaviorSubscription<T>[] arrbehaviorSubscription2 = arrbehaviorSubscription = this.subscribers.get();
        if (arrbehaviorSubscription != TERMINATED) {
            arrbehaviorSubscription2 = arrbehaviorSubscription = this.subscribers.getAndSet(TERMINATED);
            if (arrbehaviorSubscription != TERMINATED) {
                this.setCurrent(object);
                arrbehaviorSubscription2 = arrbehaviorSubscription;
            }
        }
        return arrbehaviorSubscription2;
    }

    static final class BehaviorSubscription<T>
    extends AtomicLong
    implements Subscription,
    AppendOnlyLinkedArrayList.NonThrowingPredicate<Object> {
        private static final long serialVersionUID = 3293175281126227086L;
        final Subscriber<? super T> actual;
        volatile boolean cancelled;
        boolean emitting;
        boolean fastPath;
        long index;
        boolean next;
        AppendOnlyLinkedArrayList<Object> queue;
        final BehaviorProcessor<T> state;

        BehaviorSubscription(Subscriber<? super T> subscriber, BehaviorProcessor<T> behaviorProcessor) {
            this.actual = subscriber;
            this.state = behaviorProcessor;
        }

        public void cancel() {
            if (!this.cancelled) {
                this.cancelled = true;
                this.state.remove(this);
            }
        }

        /*
         * Enabled aggressive block sorting
         * Enabled unnecessary exception pruning
         * Enabled aggressive exception aggregation
         * Converted monitor instructions to comments
         * Lifted jumps to return sites
         */
        void emitFirst() {
            if (this.cancelled) {
                return;
            }
            // MONITORENTER : this
            if (this.cancelled) {
                // MONITOREXIT : this
                return;
            }
            if (this.next) {
                // MONITOREXIT : this
                return;
            }
            Object object = this.state;
            Lock lock = object.readLock;
            lock.lock();
            this.index = object.index;
            object = object.value.get();
            lock.unlock();
            boolean bl = object != null;
            this.emitting = bl;
            this.next = true;
            // MONITOREXIT : this
            if (object == null) return;
            if (this.test(object)) {
                return;
            }
            this.emitLoop();
        }

        /*
         * Enabled aggressive block sorting
         * Enabled unnecessary exception pruning
         * Enabled aggressive exception aggregation
         */
        void emitLoop() {
            while (!this.cancelled) {
                AppendOnlyLinkedArrayList<Object> appendOnlyLinkedArrayList;
                synchronized (this) {
                    appendOnlyLinkedArrayList = this.queue;
                    if (appendOnlyLinkedArrayList == null) {
                        this.emitting = false;
                        return;
                    }
                    this.queue = null;
                }
                appendOnlyLinkedArrayList.forEachWhile(this);
            }
            return;
        }

        /*
         * Enabled aggressive block sorting
         * Enabled unnecessary exception pruning
         * Enabled aggressive exception aggregation
         */
        void emitNext(Object object, long l) {
            if (this.cancelled) {
                return;
            }
            if (!this.fastPath) {
                synchronized (this) {
                    if (this.cancelled) {
                        return;
                    }
                    if (this.index == l) {
                        return;
                    }
                    if (this.emitting) {
                        AppendOnlyLinkedArrayList<Object> appendOnlyLinkedArrayList;
                        AppendOnlyLinkedArrayList<Object> appendOnlyLinkedArrayList2 = appendOnlyLinkedArrayList = this.queue;
                        if (appendOnlyLinkedArrayList == null) {
                            this.queue = appendOnlyLinkedArrayList2 = new AppendOnlyLinkedArrayList(4);
                        }
                        appendOnlyLinkedArrayList2.add(object);
                        return;
                    }
                    this.next = true;
                }
                this.fastPath = true;
            }
            this.test(object);
        }

        public boolean isFull() {
            if (this.get() == 0L) {
                return true;
            }
            return false;
        }

        public void request(long l) {
            if (SubscriptionHelper.validate(l)) {
                BackpressureHelper.add(this, l);
            }
        }

        @Override
        public boolean test(Object object) {
            if (this.cancelled) {
                return true;
            }
            if (NotificationLite.isComplete(object)) {
                this.actual.onComplete();
                return true;
            }
            if (NotificationLite.isError(object)) {
                this.actual.onError(NotificationLite.getError(object));
                return true;
            }
            long l = this.get();
            if (l != 0L) {
                this.actual.onNext(NotificationLite.getValue(object));
                if (l != Long.MAX_VALUE) {
                    this.decrementAndGet();
                }
                return false;
            }
            this.cancel();
            this.actual.onError((Throwable)new MissingBackpressureException("Could not deliver value due to lack of requests"));
            return true;
        }
    }

}

