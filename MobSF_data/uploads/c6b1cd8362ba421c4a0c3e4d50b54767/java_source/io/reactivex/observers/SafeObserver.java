/*
 * Decompiled with CFR 0_132.
 */
package io.reactivex.observers;

import io.reactivex.Observer;
import io.reactivex.annotations.NonNull;
import io.reactivex.disposables.Disposable;
import io.reactivex.exceptions.CompositeException;
import io.reactivex.exceptions.Exceptions;
import io.reactivex.internal.disposables.DisposableHelper;
import io.reactivex.internal.disposables.EmptyDisposable;
import io.reactivex.plugins.RxJavaPlugins;

public final class SafeObserver<T>
implements Observer<T>,
Disposable {
    final Observer<? super T> actual;
    boolean done;
    Disposable s;

    public SafeObserver(@NonNull Observer<? super T> observer) {
        this.actual = observer;
    }

    @Override
    public void dispose() {
        this.s.dispose();
    }

    @Override
    public boolean isDisposed() {
        return this.s.isDisposed();
    }

    @Override
    public void onComplete() {
        if (this.done) {
            return;
        }
        this.done = true;
        if (this.s == null) {
            this.onCompleteNoSubscription();
            return;
        }
        try {
            this.actual.onComplete();
            return;
        }
        catch (Throwable throwable) {
            Exceptions.throwIfFatal(throwable);
            RxJavaPlugins.onError(throwable);
            return;
        }
    }

    void onCompleteNoSubscription() {
        NullPointerException nullPointerException = new NullPointerException("Subscription not set!");
        try {
            this.actual.onSubscribe(EmptyDisposable.INSTANCE);
        }
        catch (Throwable throwable) {
            Exceptions.throwIfFatal(throwable);
            RxJavaPlugins.onError(new CompositeException(nullPointerException, throwable));
            return;
        }
        try {
            this.actual.onError(nullPointerException);
            return;
        }
        catch (Throwable throwable) {
            Exceptions.throwIfFatal(throwable);
            RxJavaPlugins.onError(new CompositeException(nullPointerException, throwable));
            return;
        }
    }

    @Override
    public void onError(@NonNull Throwable throwable) {
        if (this.done) {
            RxJavaPlugins.onError(throwable);
            return;
        }
        this.done = true;
        if (this.s == null) {
            NullPointerException nullPointerException = new NullPointerException("Subscription not set!");
            try {
                this.actual.onSubscribe(EmptyDisposable.INSTANCE);
            }
            catch (Throwable throwable2) {
                Exceptions.throwIfFatal(throwable2);
                RxJavaPlugins.onError(new CompositeException(throwable, nullPointerException, throwable2));
                return;
            }
            try {
                this.actual.onError(new CompositeException(throwable, nullPointerException));
                return;
            }
            catch (Throwable throwable3) {
                Exceptions.throwIfFatal(throwable3);
                RxJavaPlugins.onError(new CompositeException(throwable, nullPointerException, throwable3));
                return;
            }
        }
        Throwable throwable4 = throwable;
        if (throwable == null) {
            throwable4 = new NullPointerException("onError called with null. Null values are generally not allowed in 2.x operators and sources.");
        }
        try {
            this.actual.onError(throwable4);
            return;
        }
        catch (Throwable throwable5) {
            Exceptions.throwIfFatal(throwable5);
            RxJavaPlugins.onError(new CompositeException(throwable4, throwable5));
            return;
        }
    }

    @Override
    public void onNext(@NonNull T object) {
        if (this.done) {
            return;
        }
        if (this.s == null) {
            this.onNextNoSubscription();
            return;
        }
        if (object == null) {
            object = new NullPointerException("onNext called with null. Null values are generally not allowed in 2.x operators and sources.");
            try {
                this.s.dispose();
                this.onError((Throwable)object);
                return;
            }
            catch (Throwable throwable) {
                Exceptions.throwIfFatal(throwable);
                this.onError(new CompositeException(new Throwable[]{object, throwable}));
                return;
            }
        }
        try {
            this.actual.onNext(object);
            return;
        }
        catch (Throwable throwable) {
            Exceptions.throwIfFatal(throwable);
            try {
                this.s.dispose();
                this.onError(throwable);
                return;
            }
            catch (Throwable throwable2) {
                Exceptions.throwIfFatal(throwable2);
                this.onError(new CompositeException(throwable, throwable2));
                return;
            }
        }
    }

    void onNextNoSubscription() {
        this.done = true;
        NullPointerException nullPointerException = new NullPointerException("Subscription not set!");
        try {
            this.actual.onSubscribe(EmptyDisposable.INSTANCE);
        }
        catch (Throwable throwable) {
            Exceptions.throwIfFatal(throwable);
            RxJavaPlugins.onError(new CompositeException(nullPointerException, throwable));
            return;
        }
        try {
            this.actual.onError(nullPointerException);
            return;
        }
        catch (Throwable throwable) {
            Exceptions.throwIfFatal(throwable);
            RxJavaPlugins.onError(new CompositeException(nullPointerException, throwable));
            return;
        }
    }

    @Override
    public void onSubscribe(@NonNull Disposable disposable) {
        if (DisposableHelper.validate(this.s, disposable)) {
            this.s = disposable;
            try {
                this.actual.onSubscribe(this);
                return;
            }
            catch (Throwable throwable) {
                Exceptions.throwIfFatal(throwable);
                this.done = true;
                try {
                    disposable.dispose();
                }
                catch (Throwable throwable2) {
                    Exceptions.throwIfFatal(throwable2);
                    RxJavaPlugins.onError(new CompositeException(throwable, throwable2));
                    return;
                }
                RxJavaPlugins.onError(throwable);
                return;
            }
        }
    }
}

