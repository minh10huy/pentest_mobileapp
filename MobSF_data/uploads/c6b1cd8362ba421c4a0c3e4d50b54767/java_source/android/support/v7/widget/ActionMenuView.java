/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.content.Context
 *  android.content.res.Configuration
 *  android.content.res.Resources
 *  android.graphics.drawable.Drawable
 *  android.util.AttributeSet
 *  android.util.DisplayMetrics
 *  android.view.ContextThemeWrapper
 *  android.view.Menu
 *  android.view.MenuItem
 *  android.view.View
 *  android.view.View$MeasureSpec
 *  android.view.ViewDebug
 *  android.view.ViewDebug$ExportedProperty
 *  android.view.ViewGroup
 *  android.view.ViewGroup$LayoutParams
 *  android.view.accessibility.AccessibilityEvent
 */
package android.support.v7.widget;

import android.content.Context;
import android.content.res.Configuration;
import android.content.res.Resources;
import android.graphics.drawable.Drawable;
import android.support.annotation.Nullable;
import android.support.annotation.RestrictTo;
import android.support.annotation.StyleRes;
import android.support.v7.view.menu.ActionMenuItemView;
import android.support.v7.view.menu.MenuBuilder;
import android.support.v7.view.menu.MenuItemImpl;
import android.support.v7.view.menu.MenuPresenter;
import android.support.v7.view.menu.MenuView;
import android.support.v7.widget.ActionMenuPresenter;
import android.support.v7.widget.LinearLayoutCompat;
import android.support.v7.widget.ViewUtils;
import android.util.AttributeSet;
import android.util.DisplayMetrics;
import android.view.ContextThemeWrapper;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewDebug;
import android.view.ViewGroup;
import android.view.accessibility.AccessibilityEvent;

public class ActionMenuView
extends LinearLayoutCompat
implements MenuBuilder.ItemInvoker,
MenuView {
    static final int GENERATED_ITEM_PADDING = 4;
    static final int MIN_CELL_SIZE = 56;
    private static final String TAG = "ActionMenuView";
    private MenuPresenter.Callback mActionMenuPresenterCallback;
    private boolean mFormatItems;
    private int mFormatItemsWidth;
    private int mGeneratedItemPadding;
    private MenuBuilder mMenu;
    MenuBuilder.Callback mMenuBuilderCallback;
    private int mMinCellSize;
    OnMenuItemClickListener mOnMenuItemClickListener;
    private Context mPopupContext;
    private int mPopupTheme;
    private ActionMenuPresenter mPresenter;
    private boolean mReserveOverflow;

    public ActionMenuView(Context context) {
        this(context, null);
    }

    public ActionMenuView(Context context, AttributeSet attributeSet) {
        super(context, attributeSet);
        this.setBaselineAligned(false);
        float f = context.getResources().getDisplayMetrics().density;
        this.mMinCellSize = (int)(56.0f * f);
        this.mGeneratedItemPadding = (int)(f * 4.0f);
        this.mPopupContext = context;
        this.mPopupTheme = 0;
    }

    static int measureChildForCells(View view, int n, int n2, int n3, int n4) {
        LayoutParams layoutParams = (LayoutParams)view.getLayoutParams();
        int n5 = View.MeasureSpec.makeMeasureSpec((int)(View.MeasureSpec.getSize((int)n3) - n4), (int)View.MeasureSpec.getMode((int)n3));
        ActionMenuItemView actionMenuItemView = view instanceof ActionMenuItemView ? (ActionMenuItemView)view : null;
        boolean bl = false;
        n3 = actionMenuItemView != null && actionMenuItemView.hasText() ? 1 : 0;
        n4 = 2;
        if (n2 > 0 && (n3 == 0 || n2 >= 2)) {
            int n6;
            view.measure(View.MeasureSpec.makeMeasureSpec((int)(n2 * n), (int)Integer.MIN_VALUE), n5);
            int n7 = view.getMeasuredWidth();
            n2 = n6 = n7 / n;
            if (n7 % n != 0) {
                n2 = n6 + 1;
            }
            if (n3 != 0 && n2 < 2) {
                n2 = n4;
            }
        } else {
            n2 = 0;
        }
        boolean bl2 = bl;
        if (!layoutParams.isOverflowButton) {
            bl2 = bl;
            if (n3 != 0) {
                bl2 = true;
            }
        }
        layoutParams.expandable = bl2;
        layoutParams.cellsUsed = n2;
        view.measure(View.MeasureSpec.makeMeasureSpec((int)(n * n2), (int)1073741824), n5);
        return n2;
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Lifted jumps to return sites
     */
    private void onMeasureExactFormat(int var1_1, int var2_2) {
        block37 : {
            block36 : {
                var20_3 = View.MeasureSpec.getMode((int)var2_2);
                var1_1 = View.MeasureSpec.getSize((int)var1_1);
                var8_4 = View.MeasureSpec.getSize((int)var2_2);
                var5_5 = this.getPaddingLeft();
                var6_6 = this.getPaddingRight();
                var15_7 = this.getPaddingTop() + this.getPaddingBottom();
                var16_8 = ActionMenuView.getChildMeasureSpec((int)var2_2, (int)var15_7, (int)-2);
                var11_9 = var1_1 - (var5_5 + var6_6);
                var1_1 = var11_9 / this.mMinCellSize;
                var2_2 = this.mMinCellSize;
                if (var1_1 == 0) {
                    this.setMeasuredDimension(var11_9, 0);
                    return;
                }
                var21_10 = this.mMinCellSize + var11_9 % var2_2 / var1_1;
                var17_11 = this.getChildCount();
                var7_13 = 0;
                var5_5 = 0;
                var13_14 = 0;
                var12_15 = 0;
                var6_6 = 0;
                var22_16 = 0L;
                var2_2 = var8_4;
                for (var14_12 = 0; var14_12 < var17_11; ++var14_12) {
                    var31_22 = this.getChildAt(var14_12);
                    if (var31_22.getVisibility() == 8) {
                        var9_18 = var13_14;
                        var10_19 = var12_15;
                    } else {
                        var30_21 = var31_22 instanceof ActionMenuItemView;
                        var9_18 = var13_14 + 1;
                        if (var30_21) {
                            var31_22.setPadding(this.mGeneratedItemPadding, 0, this.mGeneratedItemPadding, 0);
                        }
                        var32_17 = (LayoutParams)var31_22.getLayoutParams();
                        var32_17.expanded = false;
                        var32_17.extraPixels = 0;
                        var32_17.cellsUsed = 0;
                        var32_17.expandable = false;
                        var32_17.leftMargin = 0;
                        var32_17.rightMargin = 0;
                        var30_21 = var30_21 != false && ((ActionMenuItemView)var31_22).hasText() != false;
                        var32_17.preventEdgeOffset = var30_21;
                        var8_4 = var32_17.isOverflowButton != false ? 1 : var1_1;
                        var13_14 = ActionMenuView.measureChildForCells(var31_22, var21_10, var8_4, var16_8, var15_7);
                        var10_19 = Math.max(var12_15, var13_14);
                        var8_4 = var6_6;
                        if (var32_17.expandable) {
                            var8_4 = var6_6 + 1;
                        }
                        if (var32_17.isOverflowButton) {
                            var5_5 = 1;
                        }
                        var1_1 -= var13_14;
                        var7_13 = Math.max(var7_13, var31_22.getMeasuredHeight());
                        if (var13_14 == 1) {
                            var24_20 = 1 << var14_12;
                            var22_16 |= var24_20;
                            var6_6 = var8_4;
                        } else {
                            var6_6 = var8_4;
                        }
                    }
                    var13_14 = var9_18;
                    var12_15 = var10_19;
                }
                var14_12 = var5_5 != 0 && var13_14 == 2 ? 1 : 0;
                var10_19 = 0;
                var15_7 = var1_1;
                var9_18 = var17_11;
                var8_4 = var16_8;
                var1_1 = var10_19;
                while (var6_6 > 0 && var15_7 > 0) {
                    var18_30 = 0;
                    var16_8 = Integer.MAX_VALUE;
                    var26_32 = 0L;
                    for (var17_11 = 0; var17_11 < var9_18; ++var17_11) {
                        var31_24 = (LayoutParams)this.getChildAt(var17_11).getLayoutParams();
                        if (!var31_24.expandable) {
                            var10_19 = var18_30;
                            var19_31 = var16_8;
                            var24_20 = var26_32;
                        } else if (var31_24.cellsUsed < var16_8) {
                            var19_31 = var31_24.cellsUsed;
                            var24_20 = 1L << var17_11;
                            var10_19 = 1;
                        } else {
                            var10_19 = var18_30;
                            var19_31 = var16_8;
                            var24_20 = var26_32;
                            if (var31_24.cellsUsed == var16_8) {
                                var10_19 = var18_30 + 1;
                                var24_20 = var26_32 | 1L << var17_11;
                                var19_31 = var16_8;
                            }
                        }
                        var18_30 = var10_19;
                        var16_8 = var19_31;
                        var26_32 = var24_20;
                    }
                    var22_16 |= var26_32;
                    if (var18_30 > var15_7) break;
                    for (var1_1 = 0; var1_1 < var9_18; ++var1_1) {
                        var31_25 = this.getChildAt(var1_1);
                        var32_17 = (LayoutParams)var31_25.getLayoutParams();
                        var28_33 = 1 << var1_1;
                        if ((var26_32 & var28_33) == 0L) {
                            var10_19 = var15_7;
                            var24_20 = var22_16;
                            if (var32_17.cellsUsed == var16_8 + 1) {
                                var24_20 = var22_16 | var28_33;
                                var10_19 = var15_7;
                            }
                        } else {
                            if (var14_12 != 0 && var32_17.preventEdgeOffset && var15_7 == 1) {
                                var31_25.setPadding(this.mGeneratedItemPadding + var21_10, 0, this.mGeneratedItemPadding, 0);
                            }
                            ++var32_17.cellsUsed;
                            var32_17.expanded = true;
                            var10_19 = var15_7 - 1;
                            var24_20 = var22_16;
                        }
                        var15_7 = var10_19;
                        var22_16 = var24_20;
                    }
                    var1_1 = 1;
                }
                var5_5 = var5_5 == 0 && var13_14 == 1 ? 1 : 0;
                if (var15_7 > 0 && var22_16 != 0L && (var15_7 < var13_14 - 1 || var5_5 != 0 || var12_15 > 1)) break block36;
                var10_19 = var1_1;
                break block37;
            }
            var4_34 = Long.bitCount(var22_16);
            if (var5_5 == 0) {
                if ((var22_16 & 1L) != 0L) {
                    var3_35 = var4_34;
                    if (!((LayoutParams)this.getChildAt((int)0).getLayoutParams()).preventEdgeOffset) {
                        var3_35 = var4_34 - 0.5f;
                    }
                } else {
                    var3_35 = var4_34;
                }
                var5_5 = var9_18 - 1;
                var4_34 = var3_35;
                if ((var22_16 & (long)(1 << var5_5)) != 0L) {
                    var4_34 = var3_35;
                    if (!((LayoutParams)this.getChildAt((int)var5_5).getLayoutParams()).preventEdgeOffset) {
                        var4_34 = var3_35 - 0.5f;
                    }
                }
            }
            var5_5 = var4_34 > 0.0f ? (int)((float)(var15_7 * var21_10) / var4_34) : 0;
            var12_15 = var9_18;
            var6_6 = 0;
            do {
                block39 : {
                    block40 : {
                        block38 : {
                            var10_19 = var1_1;
                            if (var6_6 >= var12_15) break;
                            if ((var22_16 & (long)(1 << var6_6)) != 0L) break block38;
                            var10_19 = var1_1;
                            break block39;
                        }
                        var31_27 = this.getChildAt(var6_6);
                        var32_17 = (LayoutParams)var31_27.getLayoutParams();
                        if (!(var31_27 instanceof ActionMenuItemView)) break block40;
                        var32_17.extraPixels = var5_5;
                        var32_17.expanded = true;
                        if (var6_6 == 0 && !var32_17.preventEdgeOffset) {
                            var32_17.leftMargin = (- var5_5) / 2;
                        }
                        ** GOTO lbl160
                    }
                    if (var32_17.isOverflowButton) {
                        var32_17.extraPixels = var5_5;
                        var32_17.expanded = true;
                        var32_17.rightMargin = (- var5_5) / 2;
lbl160: // 2 sources:
                        var10_19 = 1;
                    } else {
                        if (var6_6 != 0) {
                            var32_17.leftMargin = var5_5 / 2;
                        }
                        var10_19 = var1_1;
                        if (var6_6 != var12_15 - 1) {
                            var32_17.rightMargin = var5_5 / 2;
                            var10_19 = var1_1;
                        }
                    }
                }
                ++var6_6;
                var1_1 = var10_19;
            } while (true);
        }
        if (var10_19 != 0) {
            for (var1_1 = 0; var1_1 < var9_18; ++var1_1) {
                var31_29 = this.getChildAt(var1_1);
                var32_17 = (LayoutParams)var31_29.getLayoutParams();
                if (!var32_17.expanded) continue;
                var31_29.measure(View.MeasureSpec.makeMeasureSpec((int)(var32_17.cellsUsed * var21_10 + var32_17.extraPixels), (int)1073741824), var8_4);
            }
        }
        if (var20_3 != 1073741824) {
            var2_2 = var7_13;
        }
        this.setMeasuredDimension(var11_9, var2_2);
    }

    @Override
    protected boolean checkLayoutParams(ViewGroup.LayoutParams layoutParams) {
        if (layoutParams != null && layoutParams instanceof LayoutParams) {
            return true;
        }
        return false;
    }

    public void dismissPopupMenus() {
        if (this.mPresenter != null) {
            this.mPresenter.dismissPopupMenus();
        }
    }

    public boolean dispatchPopulateAccessibilityEvent(AccessibilityEvent accessibilityEvent) {
        return false;
    }

    @Override
    protected LayoutParams generateDefaultLayoutParams() {
        LayoutParams layoutParams = new LayoutParams(-2, -2);
        layoutParams.gravity = 16;
        return layoutParams;
    }

    @Override
    public LayoutParams generateLayoutParams(AttributeSet attributeSet) {
        return new LayoutParams(this.getContext(), attributeSet);
    }

    @Override
    protected LayoutParams generateLayoutParams(ViewGroup.LayoutParams object) {
        if (object != null) {
            object = object instanceof LayoutParams ? new LayoutParams((LayoutParams)((Object)object)) : new LayoutParams((ViewGroup.LayoutParams)object);
            if (object.gravity <= 0) {
                object.gravity = 16;
            }
            return object;
        }
        return this.generateDefaultLayoutParams();
    }

    @RestrictTo(value={RestrictTo.Scope.LIBRARY_GROUP})
    public LayoutParams generateOverflowButtonLayoutParams() {
        LayoutParams layoutParams = this.generateDefaultLayoutParams();
        layoutParams.isOverflowButton = true;
        return layoutParams;
    }

    public Menu getMenu() {
        if (this.mMenu == null) {
            Object object = this.getContext();
            this.mMenu = new MenuBuilder((Context)object);
            this.mMenu.setCallback(new MenuBuilderCallback());
            this.mPresenter = new ActionMenuPresenter((Context)object);
            this.mPresenter.setReserveOverflow(true);
            ActionMenuPresenter actionMenuPresenter = this.mPresenter;
            object = this.mActionMenuPresenterCallback != null ? this.mActionMenuPresenterCallback : new ActionMenuPresenterCallback();
            actionMenuPresenter.setCallback((MenuPresenter.Callback)object);
            this.mMenu.addMenuPresenter(this.mPresenter, this.mPopupContext);
            this.mPresenter.setMenuView(this);
        }
        return this.mMenu;
    }

    @Nullable
    public Drawable getOverflowIcon() {
        this.getMenu();
        return this.mPresenter.getOverflowIcon();
    }

    public int getPopupTheme() {
        return this.mPopupTheme;
    }

    @RestrictTo(value={RestrictTo.Scope.LIBRARY_GROUP})
    @Override
    public int getWindowAnimations() {
        return 0;
    }

    @RestrictTo(value={RestrictTo.Scope.LIBRARY_GROUP})
    protected boolean hasSupportDividerBeforeChildAt(int n) {
        boolean bl = false;
        if (n == 0) {
            return false;
        }
        View view = this.getChildAt(n - 1);
        View view2 = this.getChildAt(n);
        boolean bl2 = bl;
        if (n < this.getChildCount()) {
            bl2 = bl;
            if (view instanceof ActionMenuChildView) {
                bl2 = false | ((ActionMenuChildView)view).needsDividerAfter();
            }
        }
        bl = bl2;
        if (n > 0) {
            bl = bl2;
            if (view2 instanceof ActionMenuChildView) {
                bl = bl2 | ((ActionMenuChildView)view2).needsDividerBefore();
            }
        }
        return bl;
    }

    public boolean hideOverflowMenu() {
        if (this.mPresenter != null && this.mPresenter.hideOverflowMenu()) {
            return true;
        }
        return false;
    }

    @RestrictTo(value={RestrictTo.Scope.LIBRARY_GROUP})
    @Override
    public void initialize(MenuBuilder menuBuilder) {
        this.mMenu = menuBuilder;
    }

    @RestrictTo(value={RestrictTo.Scope.LIBRARY_GROUP})
    @Override
    public boolean invokeItem(MenuItemImpl menuItemImpl) {
        return this.mMenu.performItemAction(menuItemImpl, 0);
    }

    @RestrictTo(value={RestrictTo.Scope.LIBRARY_GROUP})
    public boolean isOverflowMenuShowPending() {
        if (this.mPresenter != null && this.mPresenter.isOverflowMenuShowPending()) {
            return true;
        }
        return false;
    }

    public boolean isOverflowMenuShowing() {
        if (this.mPresenter != null && this.mPresenter.isOverflowMenuShowing()) {
            return true;
        }
        return false;
    }

    @RestrictTo(value={RestrictTo.Scope.LIBRARY_GROUP})
    public boolean isOverflowReserved() {
        return this.mReserveOverflow;
    }

    public void onConfigurationChanged(Configuration configuration) {
        super.onConfigurationChanged(configuration);
        if (this.mPresenter != null) {
            this.mPresenter.updateMenuView(false);
            if (this.mPresenter.isOverflowMenuShowing()) {
                this.mPresenter.hideOverflowMenu();
                this.mPresenter.showOverflowMenu();
            }
        }
    }

    public void onDetachedFromWindow() {
        super.onDetachedFromWindow();
        this.dismissPopupMenus();
    }

    @Override
    protected void onLayout(boolean bl, int n, int n2, int n3, int n4) {
        int n5;
        LayoutParams layoutParams;
        int n6;
        View view;
        if (!this.mFormatItems) {
            super.onLayout(bl, n, n2, n3, n4);
            return;
        }
        int n7 = this.getChildCount();
        int n8 = (n4 - n2) / 2;
        int n9 = this.getDividerWidth();
        int n10 = n3 - n;
        n = this.getPaddingRight();
        n2 = this.getPaddingLeft();
        bl = ViewUtils.isLayoutRtl((View)this);
        n = n10 - n - n2;
        n4 = 0;
        n3 = 0;
        for (n2 = 0; n2 < n7; ++n2) {
            view = this.getChildAt(n2);
            if (view.getVisibility() == 8) continue;
            layoutParams = (LayoutParams)view.getLayoutParams();
            if (layoutParams.isOverflowButton) {
                n4 = n6 = view.getMeasuredWidth();
                if (this.hasSupportDividerBeforeChildAt(n2)) {
                    n4 = n6 + n9;
                }
                int n11 = view.getMeasuredHeight();
                if (bl) {
                    n5 = this.getPaddingLeft() + layoutParams.leftMargin;
                    n6 = n5 + n4;
                } else {
                    n6 = this.getWidth() - this.getPaddingRight() - layoutParams.rightMargin;
                    n5 = n6 - n4;
                }
                int n12 = n8 - n11 / 2;
                view.layout(n5, n12, n6, n11 + n12);
                n -= n4;
                n4 = 1;
                continue;
            }
            n -= view.getMeasuredWidth() + layoutParams.leftMargin + layoutParams.rightMargin;
            this.hasSupportDividerBeforeChildAt(n2);
            ++n3;
        }
        if (n7 == 1 && n4 == 0) {
            view = this.getChildAt(0);
            n = view.getMeasuredWidth();
            n2 = view.getMeasuredHeight();
            n3 = n10 / 2 - n / 2;
            n4 = n8 - n2 / 2;
            view.layout(n3, n4, n + n3, n2 + n4);
            return;
        }
        n2 = n3 - (n4 ^ 1);
        n = n2 > 0 ? (n /= n2) : 0;
        n4 = 0;
        n3 = 0;
        n6 = Math.max(0, n);
        if (bl) {
            n2 = this.getWidth() - this.getPaddingRight();
            for (n = n3; n < n7; ++n) {
                view = this.getChildAt(n);
                layoutParams = (LayoutParams)view.getLayoutParams();
                n3 = n2;
                if (view.getVisibility() != 8) {
                    if (layoutParams.isOverflowButton) {
                        n3 = n2;
                    } else {
                        n3 = view.getMeasuredWidth();
                        n4 = view.getMeasuredHeight();
                        n5 = n8 - n4 / 2;
                        view.layout(n2 - n3, n5, n2 -= layoutParams.rightMargin, n4 + n5);
                        n3 = n2 - (n3 + layoutParams.leftMargin + n6);
                    }
                }
                n2 = n3;
            }
        } else {
            n2 = this.getPaddingLeft();
            for (n = n4; n < n7; ++n) {
                view = this.getChildAt(n);
                layoutParams = (LayoutParams)view.getLayoutParams();
                n3 = n2;
                if (view.getVisibility() != 8) {
                    if (layoutParams.isOverflowButton) {
                        n3 = n2;
                    } else {
                        n3 = view.getMeasuredWidth();
                        n4 = view.getMeasuredHeight();
                        n5 = n8 - n4 / 2;
                        view.layout(n2, n5, (n2 += layoutParams.leftMargin) + n3, n4 + n5);
                        n3 = n2 + (n3 + layoutParams.rightMargin + n6);
                    }
                }
                n2 = n3;
            }
        }
    }

    @Override
    protected void onMeasure(int n, int n2) {
        boolean bl = this.mFormatItems;
        boolean bl2 = View.MeasureSpec.getMode((int)n) == 1073741824;
        this.mFormatItems = bl2;
        if (bl != this.mFormatItems) {
            this.mFormatItemsWidth = 0;
        }
        int n3 = View.MeasureSpec.getSize((int)n);
        if (this.mFormatItems && this.mMenu != null && n3 != this.mFormatItemsWidth) {
            this.mFormatItemsWidth = n3;
            this.mMenu.onItemsChanged(true);
        }
        int n4 = this.getChildCount();
        if (this.mFormatItems && n4 > 0) {
            this.onMeasureExactFormat(n, n2);
            return;
        }
        for (n3 = 0; n3 < n4; ++n3) {
            LayoutParams layoutParams = (LayoutParams)this.getChildAt(n3).getLayoutParams();
            layoutParams.rightMargin = 0;
            layoutParams.leftMargin = 0;
        }
        super.onMeasure(n, n2);
    }

    @RestrictTo(value={RestrictTo.Scope.LIBRARY_GROUP})
    public MenuBuilder peekMenu() {
        return this.mMenu;
    }

    @RestrictTo(value={RestrictTo.Scope.LIBRARY_GROUP})
    public void setExpandedActionViewsExclusive(boolean bl) {
        this.mPresenter.setExpandedActionViewsExclusive(bl);
    }

    @RestrictTo(value={RestrictTo.Scope.LIBRARY_GROUP})
    public void setMenuCallbacks(MenuPresenter.Callback callback, MenuBuilder.Callback callback2) {
        this.mActionMenuPresenterCallback = callback;
        this.mMenuBuilderCallback = callback2;
    }

    public void setOnMenuItemClickListener(OnMenuItemClickListener onMenuItemClickListener) {
        this.mOnMenuItemClickListener = onMenuItemClickListener;
    }

    public void setOverflowIcon(@Nullable Drawable drawable2) {
        this.getMenu();
        this.mPresenter.setOverflowIcon(drawable2);
    }

    @RestrictTo(value={RestrictTo.Scope.LIBRARY_GROUP})
    public void setOverflowReserved(boolean bl) {
        this.mReserveOverflow = bl;
    }

    public void setPopupTheme(@StyleRes int n) {
        if (this.mPopupTheme != n) {
            this.mPopupTheme = n;
            if (n == 0) {
                this.mPopupContext = this.getContext();
                return;
            }
            this.mPopupContext = new ContextThemeWrapper(this.getContext(), n);
        }
    }

    @RestrictTo(value={RestrictTo.Scope.LIBRARY_GROUP})
    public void setPresenter(ActionMenuPresenter actionMenuPresenter) {
        this.mPresenter = actionMenuPresenter;
        this.mPresenter.setMenuView(this);
    }

    public boolean showOverflowMenu() {
        if (this.mPresenter != null && this.mPresenter.showOverflowMenu()) {
            return true;
        }
        return false;
    }

    @RestrictTo(value={RestrictTo.Scope.LIBRARY_GROUP})
    public static interface ActionMenuChildView {
        public boolean needsDividerAfter();

        public boolean needsDividerBefore();
    }

    private static class ActionMenuPresenterCallback
    implements MenuPresenter.Callback {
        ActionMenuPresenterCallback() {
        }

        @Override
        public void onCloseMenu(MenuBuilder menuBuilder, boolean bl) {
        }

        @Override
        public boolean onOpenSubMenu(MenuBuilder menuBuilder) {
            return false;
        }
    }

    public static class LayoutParams
    extends LinearLayoutCompat.LayoutParams {
        @ViewDebug.ExportedProperty
        public int cellsUsed;
        @ViewDebug.ExportedProperty
        public boolean expandable;
        boolean expanded;
        @ViewDebug.ExportedProperty
        public int extraPixels;
        @ViewDebug.ExportedProperty
        public boolean isOverflowButton;
        @ViewDebug.ExportedProperty
        public boolean preventEdgeOffset;

        public LayoutParams(int n, int n2) {
            super(n, n2);
            this.isOverflowButton = false;
        }

        LayoutParams(int n, int n2, boolean bl) {
            super(n, n2);
            this.isOverflowButton = bl;
        }

        public LayoutParams(Context context, AttributeSet attributeSet) {
            super(context, attributeSet);
        }

        public LayoutParams(LayoutParams layoutParams) {
            super((ViewGroup.LayoutParams)layoutParams);
            this.isOverflowButton = layoutParams.isOverflowButton;
        }

        public LayoutParams(ViewGroup.LayoutParams layoutParams) {
            super(layoutParams);
        }
    }

    private class MenuBuilderCallback
    implements MenuBuilder.Callback {
        MenuBuilderCallback() {
        }

        @Override
        public boolean onMenuItemSelected(MenuBuilder menuBuilder, MenuItem menuItem) {
            if (ActionMenuView.this.mOnMenuItemClickListener != null && ActionMenuView.this.mOnMenuItemClickListener.onMenuItemClick(menuItem)) {
                return true;
            }
            return false;
        }

        @Override
        public void onMenuModeChange(MenuBuilder menuBuilder) {
            if (ActionMenuView.this.mMenuBuilderCallback != null) {
                ActionMenuView.this.mMenuBuilderCallback.onMenuModeChange(menuBuilder);
            }
        }
    }

    public static interface OnMenuItemClickListener {
        public boolean onMenuItemClick(MenuItem var1);
    }

}

