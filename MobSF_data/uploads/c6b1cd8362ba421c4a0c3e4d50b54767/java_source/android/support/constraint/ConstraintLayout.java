/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.annotation.TargetApi
 *  android.content.Context
 *  android.content.res.Resources
 *  android.content.res.Resources$NotFoundException
 *  android.content.res.TypedArray
 *  android.graphics.Canvas
 *  android.graphics.Paint
 *  android.os.Build
 *  android.os.Build$VERSION
 *  android.util.AttributeSet
 *  android.util.Log
 *  android.util.SparseArray
 *  android.util.SparseIntArray
 *  android.view.View
 *  android.view.View$MeasureSpec
 *  android.view.ViewGroup
 *  android.view.ViewGroup$LayoutParams
 *  android.view.ViewGroup$MarginLayoutParams
 */
package android.support.constraint;

import android.annotation.TargetApi;
import android.content.Context;
import android.content.res.Resources;
import android.content.res.TypedArray;
import android.graphics.Canvas;
import android.graphics.Paint;
import android.os.Build;
import android.support.constraint.ConstraintHelper;
import android.support.constraint.ConstraintSet;
import android.support.constraint.Guideline;
import android.support.constraint.Placeholder;
import android.support.constraint.R;
import android.support.constraint.solver.Metrics;
import android.support.constraint.solver.widgets.ConstraintAnchor;
import android.support.constraint.solver.widgets.ConstraintWidget;
import android.support.constraint.solver.widgets.ConstraintWidgetContainer;
import android.support.constraint.solver.widgets.ResolutionAnchor;
import android.support.constraint.solver.widgets.ResolutionDimension;
import android.util.AttributeSet;
import android.util.Log;
import android.util.SparseArray;
import android.util.SparseIntArray;
import android.view.View;
import android.view.ViewGroup;
import java.util.ArrayList;
import java.util.HashMap;

public class ConstraintLayout
extends ViewGroup {
    static final boolean ALLOWS_EMBEDDED = false;
    private static final boolean DEBUG = false;
    public static final int DESIGN_INFO_ID = 0;
    private static final String TAG = "ConstraintLayout";
    private static final boolean USE_CONSTRAINTS_HELPER = true;
    public static final String VERSION = "ConstraintLayout-1.1.2";
    SparseArray<View> mChildrenByIds = new SparseArray();
    private ArrayList<ConstraintHelper> mConstraintHelpers = new ArrayList(4);
    private ConstraintSet mConstraintSet = null;
    private int mConstraintSetId = -1;
    private HashMap<String, Integer> mDesignIds = new HashMap();
    private boolean mDirtyHierarchy = true;
    private int mLastMeasureHeight = -1;
    int mLastMeasureHeightMode = 0;
    int mLastMeasureHeightSize = -1;
    private int mLastMeasureWidth = -1;
    int mLastMeasureWidthMode = 0;
    int mLastMeasureWidthSize = -1;
    ConstraintWidgetContainer mLayoutWidget = new ConstraintWidgetContainer();
    private int mMaxHeight = Integer.MAX_VALUE;
    private int mMaxWidth = Integer.MAX_VALUE;
    private Metrics mMetrics;
    private int mMinHeight = 0;
    private int mMinWidth = 0;
    private int mOptimizationLevel = 3;
    private final ArrayList<ConstraintWidget> mVariableDimensionsWidgets = new ArrayList(100);

    public ConstraintLayout(Context context) {
        super(context);
        this.init(null);
    }

    public ConstraintLayout(Context context, AttributeSet attributeSet) {
        super(context, attributeSet);
        this.init(attributeSet);
    }

    public ConstraintLayout(Context context, AttributeSet attributeSet, int n) {
        super(context, attributeSet, n);
        this.init(attributeSet);
    }

    private final ConstraintWidget getTargetWidget(int n) {
        if (n == 0) {
            return this.mLayoutWidget;
        }
        View view = (View)this.mChildrenByIds.get(n);
        if (view == this) {
            return this.mLayoutWidget;
        }
        if (view == null) {
            return null;
        }
        return ((LayoutParams)view.getLayoutParams()).widget;
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    private void init(AttributeSet attributeSet) {
        this.mLayoutWidget.setCompanionWidget((Object)this);
        this.mChildrenByIds.put(this.getId(), (Object)this);
        this.mConstraintSet = null;
        if (attributeSet == null) ** GOTO lbl34
        attributeSet = this.getContext().obtainStyledAttributes(attributeSet, R.styleable.ConstraintLayout_Layout);
        n = attributeSet.getIndexCount();
        n2 = 0;
        do {
            if (n2 < n) {
                n3 = attributeSet.getIndex(n2);
                if (n3 == R.styleable.ConstraintLayout_Layout_android_minWidth) {
                    this.mMinWidth = attributeSet.getDimensionPixelOffset(n3, this.mMinWidth);
                } else if (n3 == R.styleable.ConstraintLayout_Layout_android_minHeight) {
                    this.mMinHeight = attributeSet.getDimensionPixelOffset(n3, this.mMinHeight);
                } else if (n3 == R.styleable.ConstraintLayout_Layout_android_maxWidth) {
                    this.mMaxWidth = attributeSet.getDimensionPixelOffset(n3, this.mMaxWidth);
                } else if (n3 == R.styleable.ConstraintLayout_Layout_android_maxHeight) {
                    this.mMaxHeight = attributeSet.getDimensionPixelOffset(n3, this.mMaxHeight);
                } else if (n3 == R.styleable.ConstraintLayout_Layout_layout_optimizationLevel) {
                    this.mOptimizationLevel = attributeSet.getInt(n3, this.mOptimizationLevel);
                } else if (n3 == R.styleable.ConstraintLayout_Layout_constraintSet) {
                    n3 = attributeSet.getResourceId(n3, 0);
                    this.mConstraintSet = new ConstraintSet();
                    this.mConstraintSet.load(this.getContext(), n3);
                    break block16;
                }
            } else {
                block16 : {
                    attributeSet.recycle();
lbl34: // 2 sources:
                    this.mLayoutWidget.setOptimizationLevel(this.mOptimizationLevel);
                    return;
                    catch (Resources.NotFoundException notFoundException) {}
                    this.mConstraintSet = null;
                }
                this.mConstraintSetId = n3;
            }
            ++n2;
        } while (true);
    }

    private void internalMeasureChildren(int n, int n2) {
        int n3 = this.getPaddingTop() + this.getPaddingBottom();
        int n4 = this.getPaddingLeft() + this.getPaddingRight();
        int n5 = this.getChildCount();
        int n6 = 0;
        do {
            int n7 = n;
            Object object = this;
            if (n6 >= n5) break;
            View view = object.getChildAt(n6);
            if (view.getVisibility() != 8) {
                LayoutParams layoutParams = (LayoutParams)view.getLayoutParams();
                ConstraintWidget constraintWidget = layoutParams.widget;
                if (!layoutParams.isGuideline && !layoutParams.isHelper) {
                    int n8;
                    int n9;
                    constraintWidget.setVisibility(view.getVisibility());
                    int n10 = layoutParams.width;
                    int n11 = layoutParams.height;
                    int n12 = !layoutParams.horizontalDimensionFixed && !layoutParams.verticalDimensionFixed && (layoutParams.horizontalDimensionFixed || layoutParams.matchConstraintDefaultWidth != 1) && layoutParams.width != -1 && (layoutParams.verticalDimensionFixed || layoutParams.matchConstraintDefaultHeight != 1 && layoutParams.height != -1) ? 0 : 1;
                    if (n12 != 0) {
                        if (n10 == 0) {
                            n9 = ConstraintLayout.getChildMeasureSpec((int)n7, (int)n4, (int)-2);
                            n12 = 1;
                        } else if (n10 == -1) {
                            n9 = ConstraintLayout.getChildMeasureSpec((int)n7, (int)n4, (int)-1);
                            n12 = 0;
                        } else {
                            n12 = n10 == -2 ? 1 : 0;
                            n9 = ConstraintLayout.getChildMeasureSpec((int)n7, (int)n4, (int)n10);
                        }
                        if (n11 == 0) {
                            n8 = ConstraintLayout.getChildMeasureSpec((int)n2, (int)n3, (int)-2);
                            n7 = 1;
                        } else if (n11 == -1) {
                            n8 = ConstraintLayout.getChildMeasureSpec((int)n2, (int)n3, (int)-1);
                            n7 = 0;
                        } else {
                            n7 = n11 == -2 ? 1 : 0;
                            n8 = ConstraintLayout.getChildMeasureSpec((int)n2, (int)n3, (int)n11);
                        }
                        view.measure(n9, n8);
                        if (object.mMetrics != null) {
                            object = object.mMetrics;
                            ++object.measures;
                        }
                        boolean bl = n10 == -2;
                        constraintWidget.setWidthWrapContent(bl);
                        bl = n11 == -2;
                        constraintWidget.setHeightWrapContent(bl);
                        n9 = view.getMeasuredWidth();
                        n8 = view.getMeasuredHeight();
                    } else {
                        n12 = 0;
                        n7 = 0;
                        n8 = n11;
                        n9 = n10;
                    }
                    constraintWidget.setWidth(n9);
                    constraintWidget.setHeight(n8);
                    if (n12 != 0) {
                        constraintWidget.setWrapWidth(n9);
                    }
                    if (n7 != 0) {
                        constraintWidget.setWrapHeight(n8);
                    }
                    if (layoutParams.needsBaseline && (n12 = view.getBaseline()) != -1) {
                        constraintWidget.setBaselineDistance(n12);
                    }
                }
            }
            ++n6;
        } while (true);
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Lifted jumps to return sites
     */
    private void internalMeasureDimensions(int var1_1, int var2_2) {
        var20_3 = this;
        var5_8 = this.getPaddingTop() + this.getPaddingBottom();
        var4_9 = this.getPaddingLeft() + this.getPaddingRight();
        var3_10 = this.getChildCount();
        var6_11 = 0;
        do {
            var15_17 = 1L;
            if (var6_11 >= var3_10) break;
            var21_19 = var20_3.getChildAt(var6_11);
            if (var21_19.getVisibility() != 8) {
                var22_20 = (LayoutParams)var21_19.getLayoutParams();
                var23_21 = var22_20.widget;
                if (!var22_20.isGuideline && !var22_20.isHelper) {
                    var23_21.setVisibility(var21_19.getVisibility());
                    var9_14 = var22_20.width;
                    var10_15 = var22_20.height;
                    if (var9_14 != 0 && var10_15 != 0) {
                        var7_12 = var9_14 == -2 ? 1 : 0;
                        var11_16 = ConstraintLayout.getChildMeasureSpec((int)var1_1, (int)var4_9, (int)var9_14);
                        var8_13 = var10_15 == -2 ? 1 : 0;
                        var21_19.measure(var11_16, ConstraintLayout.getChildMeasureSpec((int)var2_2, (int)var5_8, (int)var10_15));
                        if (var20_3.mMetrics != null) {
                            var24_22 = var20_3.mMetrics;
                            ++var24_22.measures;
                        }
                        var19_18 = var9_14 == -2;
                        var23_21.setWidthWrapContent(var19_18);
                        var19_18 = var10_15 == -2;
                        var23_21.setHeightWrapContent(var19_18);
                        var9_14 = var21_19.getMeasuredWidth();
                        var10_15 = var21_19.getMeasuredHeight();
                        var23_21.setWidth(var9_14);
                        var23_21.setHeight(var10_15);
                        if (var7_12 != 0) {
                            var23_21.setWrapWidth(var9_14);
                        }
                        if (var8_13 != 0) {
                            var23_21.setWrapHeight(var10_15);
                        }
                        if (var22_20.needsBaseline && (var7_12 = var21_19.getBaseline()) != -1) {
                            var23_21.setBaselineDistance(var7_12);
                        }
                        if (var22_20.horizontalDimensionFixed && var22_20.verticalDimensionFixed) {
                            var23_21.getResolutionWidth().resolve(var9_14);
                            var23_21.getResolutionHeight().resolve(var10_15);
                        }
                    } else {
                        var23_21.getResolutionWidth().invalidate();
                        var23_21.getResolutionHeight().invalidate();
                    }
                }
            }
            ++var6_11;
        } while (true);
        var20_3.mLayoutWidget.solveGraph();
        var11_16 = var3_10;
        var12_23 = 0;
        var3_10 = var4_9;
        var6_11 = var5_8;
        do {
            block27 : {
                block34 : {
                    block32 : {
                        block33 : {
                            block31 : {
                                block29 : {
                                    block30 : {
                                        block28 : {
                                            var8_13 = var1_1;
                                            var20_5 = this;
                                            if (var12_23 >= var11_16) return;
                                            var21_19 = var20_5.getChildAt(var12_23);
                                            if (var21_19.getVisibility() == 8) break block27;
                                            var22_20 = (LayoutParams)var21_19.getLayoutParams();
                                            var23_21 = var22_20.widget;
                                            if (var22_20.isGuideline || var22_20.isHelper) break block27;
                                            var23_21.setVisibility(var21_19.getVisibility());
                                            var13_24 = var22_20.width;
                                            var10_15 = var22_20.height;
                                            if (var13_24 != 0 && var10_15 != 0) break block27;
                                            var24_22 = var23_21.getAnchor(ConstraintAnchor.Type.LEFT).getResolutionNode();
                                            var25_27 = var23_21.getAnchor(ConstraintAnchor.Type.RIGHT).getResolutionNode();
                                            var7_12 = var23_21.getAnchor(ConstraintAnchor.Type.LEFT).getTarget() != null && var23_21.getAnchor(ConstraintAnchor.Type.RIGHT).getTarget() != null ? 1 : 0;
                                            var26_28 = var23_21.getAnchor(ConstraintAnchor.Type.TOP).getResolutionNode();
                                            var27_29 = var23_21.getAnchor(ConstraintAnchor.Type.BOTTOM).getResolutionNode();
                                            var9_14 = var23_21.getAnchor(ConstraintAnchor.Type.TOP).getTarget() != null && var23_21.getAnchor(ConstraintAnchor.Type.BOTTOM).getTarget() != null ? 1 : 0;
                                            if (var13_24 != 0 || var10_15 != 0 || var7_12 == 0 || var9_14 == 0) break block28;
                                            var15_17 = 1L;
                                            break block27;
                                        }
                                        var5_8 = var20_5.mLayoutWidget.getHorizontalDimensionBehaviour() != ConstraintWidget.DimensionBehaviour.WRAP_CONTENT ? 1 : 0;
                                        var4_9 = var20_5.mLayoutWidget.getVerticalDimensionBehaviour() != ConstraintWidget.DimensionBehaviour.WRAP_CONTENT ? 1 : 0;
                                        if (var5_8 == 0) {
                                            var23_21.getResolutionWidth().invalidate();
                                            if (var4_9 == 0) {
                                                var23_21.getResolutionHeight().invalidate();
                                            }
                                        }
                                        if (var13_24 != 0) break block29;
                                        if (var5_8 == 0 || !var23_21.isSpreadWidth() || var7_12 == 0 || !var24_22.isResolved() || !var25_27.isResolved()) break block30;
                                        var7_12 = (int)(var25_27.getResolvedValue() - var24_22.getResolvedValue());
                                        var23_21.getResolutionWidth().resolve(var7_12);
                                        var8_13 = ConstraintLayout.getChildMeasureSpec((int)var8_13, (int)var3_10, (int)var7_12);
                                        ** GOTO lbl97
                                    }
                                    var8_13 = ConstraintLayout.getChildMeasureSpec((int)var8_13, (int)var3_10, (int)-2);
                                    var5_8 = 1;
                                    var7_12 = 0;
                                    break block31;
                                }
                                var14_25 = var3_10;
                                if (var13_24 == -1) {
                                    var8_13 = ConstraintLayout.getChildMeasureSpec((int)var8_13, (int)var14_25, (int)-1);
                                    var7_12 = var13_24;
lbl97: // 2 sources:
                                    var14_25 = var5_8;
                                    var5_8 = 0;
                                    var13_24 = var7_12;
                                    var7_12 = var14_25;
                                } else {
                                    var7_12 = var13_24 == -2 ? 1 : 0;
                                    var14_25 = ConstraintLayout.getChildMeasureSpec((int)var8_13, (int)var14_25, (int)var13_24);
                                    var8_13 = var5_8;
                                    var5_8 = var7_12;
                                    var7_12 = var8_13;
                                    var8_13 = var14_25;
                                }
                            }
                            var14_25 = var3_10;
                            if (var10_15 != 0) break block32;
                            if (var4_9 == 0 || !var23_21.isSpreadHeight() || var9_14 == 0 || !var26_28.isResolved() || !var27_29.isResolved()) break block33;
                            var10_15 = (int)(var27_29.getResolvedValue() - var26_28.getResolvedValue());
                            var23_21.getResolutionHeight().resolve(var10_15);
                            var9_14 = ConstraintLayout.getChildMeasureSpec((int)var2_2, (int)var6_11, (int)var10_15);
                            ** GOTO lbl125
                        }
                        var9_14 = ConstraintLayout.getChildMeasureSpec((int)var2_2, (int)var6_11, (int)-2);
                        var3_10 = 1;
                        var4_9 = 0;
                        break block34;
                    }
                    var9_14 = var6_11;
                    if (var10_15 == -1) {
                        var9_14 = ConstraintLayout.getChildMeasureSpec((int)var2_2, (int)var9_14, (int)-1);
lbl125: // 2 sources:
                        var3_10 = 0;
                    } else {
                        var3_10 = var10_15 == -2 ? 1 : 0;
                        var9_14 = ConstraintLayout.getChildMeasureSpec((int)var2_2, (int)var9_14, (int)var10_15);
                    }
                }
                var21_19.measure(var8_13, var9_14);
                if (var20_5.mMetrics != null) {
                    var20_6 = var20_5.mMetrics;
                    ++var20_6.measures;
                }
                var17_26 = 1L;
                var19_18 = var13_24 == -2;
                var23_21.setWidthWrapContent(var19_18);
                var19_18 = var10_15 == -2;
                var23_21.setHeightWrapContent(var19_18);
                var8_13 = var21_19.getMeasuredWidth();
                var9_14 = var21_19.getMeasuredHeight();
                var23_21.setWidth(var8_13);
                var23_21.setHeight(var9_14);
                if (var5_8 != 0) {
                    var23_21.setWrapWidth(var8_13);
                }
                if (var3_10 != 0) {
                    var23_21.setWrapHeight(var9_14);
                }
                if (var7_12 != 0) {
                    var23_21.getResolutionWidth().resolve(var8_13);
                } else {
                    var23_21.getResolutionWidth().remove();
                }
                if (var4_9 != 0) {
                    var23_21.getResolutionHeight().resolve(var9_14);
                } else {
                    var23_21.getResolutionHeight().remove();
                }
                if (var22_20.needsBaseline) {
                    var4_9 = var21_19.getBaseline();
                    var15_17 = var17_26;
                    var3_10 = var14_25;
                    if (var4_9 != -1) {
                        var23_21.setBaselineDistance(var4_9);
                        var15_17 = var17_26;
                        var3_10 = var14_25;
                    }
                } else {
                    var3_10 = var14_25;
                    var15_17 = var17_26;
                }
            }
            ++var12_23;
        } while (true);
    }

    private void setChildrenConstraints() {
        RuntimeException runtimeException;
        super("d2j fail translate: java.lang.RuntimeException: can not merge Z and I\n\tat com.googlecode.dex2jar.ir.TypeClass.merge(TypeClass.java:100)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeRef.updateTypeClass(TypeTransformer.java:174)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.copyTypes(TypeTransformer.java:311)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.fixTypes(TypeTransformer.java:226)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.analyze(TypeTransformer.java:207)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer.transform(TypeTransformer.java:44)\n\tat com.googlecode.d2j.dex.Dex2jar$2.optimize(Dex2jar.java:162)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertCode(Dex2Asm.java:414)\n\tat com.googlecode.d2j.dex.ExDex2Asm.convertCode(ExDex2Asm.java:42)\n\tat com.googlecode.d2j.dex.Dex2jar$2.convertCode(Dex2jar.java:128)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertMethod(Dex2Asm.java:509)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertClass(Dex2Asm.java:406)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertDex(Dex2Asm.java:422)\n\tat com.googlecode.d2j.dex.Dex2jar.doTranslate(Dex2jar.java:172)\n\tat com.googlecode.d2j.dex.Dex2jar.to(Dex2jar.java:272)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.doCommandLine(Dex2jarCmd.java:108)\n\tat com.googlecode.dex2jar.tools.BaseCmd.doMain(BaseCmd.java:288)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.main(Dex2jarCmd.java:32)\n");
        throw runtimeException;
    }

    /*
     * Enabled aggressive block sorting
     */
    private void setSelfDimensionBehaviour(int n, int n2) {
        ConstraintWidget.DimensionBehaviour dimensionBehaviour;
        ConstraintWidget.DimensionBehaviour dimensionBehaviour2;
        block7 : {
            block4 : {
                block6 : {
                    block5 : {
                        int n3;
                        int n4;
                        int n5;
                        block3 : {
                            block0 : {
                                block2 : {
                                    block1 : {
                                        int n6 = View.MeasureSpec.getMode((int)n);
                                        n = View.MeasureSpec.getSize((int)n);
                                        n3 = View.MeasureSpec.getMode((int)n2);
                                        n2 = View.MeasureSpec.getSize((int)n2);
                                        n5 = this.getPaddingTop();
                                        n4 = this.getPaddingBottom();
                                        int n7 = this.getPaddingLeft();
                                        int n8 = this.getPaddingRight();
                                        dimensionBehaviour2 = ConstraintWidget.DimensionBehaviour.FIXED;
                                        dimensionBehaviour = ConstraintWidget.DimensionBehaviour.FIXED;
                                        this.getLayoutParams();
                                        if (n6 == Integer.MIN_VALUE) break block0;
                                        if (n6 == 0) break block1;
                                        if (n6 != 1073741824) break block2;
                                        n = Math.min(this.mMaxWidth, n) - (n7 + n8);
                                        break block3;
                                    }
                                    dimensionBehaviour2 = ConstraintWidget.DimensionBehaviour.WRAP_CONTENT;
                                }
                                n = 0;
                                break block3;
                            }
                            dimensionBehaviour2 = ConstraintWidget.DimensionBehaviour.WRAP_CONTENT;
                        }
                        if (n3 == Integer.MIN_VALUE) break block4;
                        if (n3 == 0) break block5;
                        if (n3 != 1073741824) break block6;
                        n2 = Math.min(this.mMaxHeight, n2) - (n5 + n4);
                        break block7;
                    }
                    dimensionBehaviour = ConstraintWidget.DimensionBehaviour.WRAP_CONTENT;
                }
                n2 = 0;
                break block7;
            }
            dimensionBehaviour = ConstraintWidget.DimensionBehaviour.WRAP_CONTENT;
        }
        this.mLayoutWidget.setMinWidth(0);
        this.mLayoutWidget.setMinHeight(0);
        this.mLayoutWidget.setHorizontalDimensionBehaviour(dimensionBehaviour2);
        this.mLayoutWidget.setWidth(n);
        this.mLayoutWidget.setVerticalDimensionBehaviour(dimensionBehaviour);
        this.mLayoutWidget.setHeight(n2);
        this.mLayoutWidget.setMinWidth(this.mMinWidth - this.getPaddingLeft() - this.getPaddingRight());
        this.mLayoutWidget.setMinHeight(this.mMinHeight - this.getPaddingTop() - this.getPaddingBottom());
    }

    private void updateHierarchy() {
        boolean bl;
        int n = this.getChildCount();
        boolean bl2 = false;
        int n2 = 0;
        do {
            bl = bl2;
            if (n2 >= n) break;
            if (this.getChildAt(n2).isLayoutRequested()) {
                bl = true;
                break;
            }
            ++n2;
        } while (true);
        if (bl) {
            this.mVariableDimensionsWidgets.clear();
            this.setChildrenConstraints();
        }
    }

    private void updatePostMeasures() {
        int n;
        int n2 = this.getChildCount();
        int n3 = 0;
        for (n = 0; n < n2; ++n) {
            View view = this.getChildAt(n);
            if (!(view instanceof Placeholder)) continue;
            ((Placeholder)view).updatePostMeasure(this);
        }
        n2 = this.mConstraintHelpers.size();
        if (n2 > 0) {
            for (n = n3; n < n2; ++n) {
                this.mConstraintHelpers.get(n).updatePostMeasure(this);
            }
        }
    }

    public void addView(View view, int n, ViewGroup.LayoutParams layoutParams) {
        super.addView(view, n, layoutParams);
        if (Build.VERSION.SDK_INT < 14) {
            this.onViewAdded(view);
        }
    }

    protected boolean checkLayoutParams(ViewGroup.LayoutParams layoutParams) {
        return layoutParams instanceof LayoutParams;
    }

    public void dispatchDraw(Canvas canvas) {
        super.dispatchDraw(canvas);
        if (this.isInEditMode()) {
            int n = this.getChildCount();
            float f = this.getWidth();
            float f2 = this.getHeight();
            for (int i = 0; i < n; ++i) {
                Paint paint = this.getChildAt(i);
                if (paint.getVisibility() == 8 || (paint = paint.getTag()) == null || !(paint instanceof String) || ((String[])(paint = ((String)paint).split(","))).length != 4) continue;
                int n2 = Integer.parseInt(paint[0]);
                int n3 = Integer.parseInt(paint[1]);
                int n4 = Integer.parseInt(paint[2]);
                int n5 = Integer.parseInt(paint[3]);
                n2 = (int)((float)n2 / 1080.0f * f);
                n3 = (int)((float)n3 / 1920.0f * f2);
                n4 = (int)((float)n4 / 1080.0f * f);
                n5 = (int)((float)n5 / 1920.0f * f2);
                paint = new Paint();
                paint.setColor(-65536);
                float f3 = n2;
                float f4 = n3;
                float f5 = n2 + n4;
                canvas.drawLine(f3, f4, f5, f4, paint);
                float f6 = n3 + n5;
                canvas.drawLine(f5, f4, f5, f6, paint);
                canvas.drawLine(f5, f6, f3, f6, paint);
                canvas.drawLine(f3, f6, f3, f4, paint);
                paint.setColor(-16711936);
                canvas.drawLine(f3, f4, f5, f6, paint);
                canvas.drawLine(f3, f6, f5, f4, paint);
            }
        }
    }

    public void fillMetrics(Metrics metrics) {
        this.mMetrics = metrics;
        this.mLayoutWidget.fillMetrics(metrics);
    }

    protected LayoutParams generateDefaultLayoutParams() {
        return new LayoutParams(-2, -2);
    }

    public LayoutParams generateLayoutParams(AttributeSet attributeSet) {
        return new LayoutParams(this.getContext(), attributeSet);
    }

    protected ViewGroup.LayoutParams generateLayoutParams(ViewGroup.LayoutParams layoutParams) {
        return new LayoutParams(layoutParams);
    }

    public Object getDesignInformation(int n, Object object) {
        if (n == 0 && object instanceof String) {
            object = (String)object;
            if (this.mDesignIds != null && this.mDesignIds.containsKey(object)) {
                return this.mDesignIds.get(object);
            }
        }
        return null;
    }

    public int getMaxHeight() {
        return this.mMaxHeight;
    }

    public int getMaxWidth() {
        return this.mMaxWidth;
    }

    public int getMinHeight() {
        return this.mMinHeight;
    }

    public int getMinWidth() {
        return this.mMinWidth;
    }

    public int getOptimizationLevel() {
        return this.mLayoutWidget.getOptimizationLevel();
    }

    public View getViewById(int n) {
        return (View)this.mChildrenByIds.get(n);
    }

    public final ConstraintWidget getViewWidget(View view) {
        if (view == this) {
            return this.mLayoutWidget;
        }
        if (view == null) {
            return null;
        }
        return ((LayoutParams)view.getLayoutParams()).widget;
    }

    protected void onLayout(boolean bl, int n, int n2, int n3, int n4) {
        n3 = this.getChildCount();
        bl = this.isInEditMode();
        n2 = 0;
        for (n = 0; n < n3; ++n) {
            View view = this.getChildAt(n);
            LayoutParams layoutParams = (LayoutParams)view.getLayoutParams();
            ConstraintWidget constraintWidget = layoutParams.widget;
            if (view.getVisibility() == 8 && !layoutParams.isGuideline && !layoutParams.isHelper && !bl || layoutParams.isInPlaceholder) continue;
            n4 = constraintWidget.getDrawX();
            int n5 = constraintWidget.getDrawY();
            int n6 = constraintWidget.getWidth() + n4;
            int n7 = constraintWidget.getHeight() + n5;
            view.layout(n4, n5, n6, n7);
            if (!(view instanceof Placeholder) || (view = ((Placeholder)view).getContent()) == null) continue;
            view.setVisibility(0);
            view.layout(n4, n5, n6, n7);
        }
        n3 = this.mConstraintHelpers.size();
        if (n3 > 0) {
            for (n = n2; n < n3; ++n) {
                this.mConstraintHelpers.get(n).updatePostLayout(this);
            }
        }
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Lifted jumps to return sites
     */
    protected void onMeasure(int var1_1, int var2_2) {
        block46 : {
            block47 : {
                block48 : {
                    block45 : {
                        block44 : {
                            block43 : {
                                block42 : {
                                    System.currentTimeMillis();
                                    var4_3 = View.MeasureSpec.getMode((int)var1_1);
                                    var5_4 = View.MeasureSpec.getSize((int)var1_1);
                                    var6_5 = View.MeasureSpec.getMode((int)var2_2);
                                    var7_6 = View.MeasureSpec.getSize((int)var2_2);
                                    if (this.mLastMeasureWidth != -1) {
                                        var3_7 = this.mLastMeasureHeight;
                                    }
                                    if (var4_3 == 1073741824 && var6_5 == 1073741824 && var5_4 == this.mLastMeasureWidth) {
                                        var3_7 = this.mLastMeasureHeight;
                                    }
                                    var3_7 = var4_3 == this.mLastMeasureWidthMode && var6_5 == this.mLastMeasureHeightMode ? 1 : 0;
                                    if (var3_7 == 0) break block42;
                                    if (var5_4 != this.mLastMeasureWidthSize) break block43;
                                    var8_8 = this.mLastMeasureHeightSize;
                                }
                                if (var3_7 == 0) break block44;
                            }
                            if (var4_3 == Integer.MIN_VALUE && var6_5 == 1073741824 && var5_4 >= this.mLastMeasureWidth) {
                                var8_8 = this.mLastMeasureHeight;
                            }
                        }
                        if (var3_7 != 0 && var4_3 == 1073741824 && var6_5 == Integer.MIN_VALUE && var5_4 == this.mLastMeasureWidth) {
                            var3_7 = this.mLastMeasureHeight;
                        }
                        this.mLastMeasureWidthMode = var4_3;
                        this.mLastMeasureHeightMode = var6_5;
                        this.mLastMeasureWidthSize = var5_4;
                        this.mLastMeasureHeightSize = var7_6;
                        var3_7 = this.getPaddingLeft();
                        var4_3 = this.getPaddingTop();
                        this.mLayoutWidget.setX(var3_7);
                        this.mLayoutWidget.setY(var4_3);
                        this.mLayoutWidget.setMaxWidth(this.mMaxWidth);
                        this.mLayoutWidget.setMaxHeight(this.mMaxHeight);
                        if (Build.VERSION.SDK_INT >= 17) {
                            var20_9 = this.mLayoutWidget;
                            var19_10 = this.getLayoutDirection() == 1;
                            var20_9.setRtl(var19_10);
                        }
                        this.setSelfDimensionBehaviour(var1_1, var2_2);
                        var13_11 = this.mLayoutWidget.getWidth();
                        var14_12 = this.mLayoutWidget.getHeight();
                        if (this.mDirtyHierarchy) {
                            this.mDirtyHierarchy = false;
                            this.updateHierarchy();
                        }
                        var9_13 = (this.mOptimizationLevel & 8) == 8;
                        if (var9_13) {
                            this.mLayoutWidget.preOptimize();
                            this.mLayoutWidget.optimizeForDimensions(var13_11, var14_12);
                            this.internalMeasureDimensions(var1_1, var2_2);
                        } else {
                            this.internalMeasureChildren(var1_1, var2_2);
                        }
                        this.updatePostMeasures();
                        if (this.getChildCount() > 0) {
                            this.solveLinearSystem("First pass");
                        }
                        var11_14 = this.mVariableDimensionsWidgets.size();
                        var17_15 = var4_3 + this.getPaddingBottom();
                        var6_5 = var3_7 + this.getPaddingRight();
                        if (var11_14 > 0) break block45;
                        var4_3 = var6_5;
                        var3_7 = 0;
                        break block46;
                    }
                    var10_16 = this.mLayoutWidget.getHorizontalDimensionBehaviour() == ConstraintWidget.DimensionBehaviour.WRAP_CONTENT;
                    var12_17 = this.mLayoutWidget.getVerticalDimensionBehaviour() == ConstraintWidget.DimensionBehaviour.WRAP_CONTENT;
                    var5_4 = Math.max(this.mLayoutWidget.getWidth(), this.mMinWidth);
                    var3_7 = Math.max(this.mLayoutWidget.getHeight(), this.mMinHeight);
                    var7_6 = 0;
                    var4_3 = 0;
                    for (var15_18 = 0; var15_18 < var11_14; ++var15_18) {
                        var20_9 = this.mVariableDimensionsWidgets.get(var15_18);
                        var21_21 = (View)var20_9.getCompanionWidget();
                        if (var21_21 == null) ** GOTO lbl-1000
                        var22_22 = (LayoutParams)var21_21.getLayoutParams();
                        if (!(var22_22.isHelper || var22_22.isGuideline || var21_21.getVisibility() == 8 || var9_13 && var20_9.getResolutionWidth().isResolved() && var20_9.getResolutionHeight().isResolved())) {
                            var8_8 = var22_22.width == -2 && var22_22.horizontalDimensionFixed != false ? ConstraintLayout.getChildMeasureSpec((int)var1_1, (int)var6_5, (int)var22_22.width) : View.MeasureSpec.makeMeasureSpec((int)var20_9.getWidth(), (int)1073741824);
                            var16_19 = var22_22.height == -2 && var22_22.verticalDimensionFixed != false ? ConstraintLayout.getChildMeasureSpec((int)var2_2, (int)var17_15, (int)var22_22.height) : View.MeasureSpec.makeMeasureSpec((int)var20_9.getHeight(), (int)1073741824);
                            var21_21.measure(var8_8, var16_19);
                            if (this.mMetrics != null) {
                                var23_23 = this.mMetrics;
                                ++var23_23.additionalMeasures;
                            }
                            var18_20 = var21_21.getMeasuredWidth();
                            var16_19 = var21_21.getMeasuredHeight();
                            var8_8 = var7_6;
                            var7_6 = var5_4;
                            if (var18_20 != var20_9.getWidth()) {
                                var20_9.setWidth(var18_20);
                                if (var9_13) {
                                    var20_9.getResolutionWidth().resolve(var18_20);
                                }
                                var7_6 = var5_4;
                                if (var10_16) {
                                    var7_6 = var5_4;
                                    if (var20_9.getRight() > var5_4) {
                                        var7_6 = Math.max(var5_4, var20_9.getRight() + var20_9.getAnchor(ConstraintAnchor.Type.RIGHT).getMargin());
                                    }
                                }
                                var8_8 = 1;
                            }
                            if (var16_19 != var20_9.getHeight()) {
                                var20_9.setHeight(var16_19);
                                if (var9_13) {
                                    var20_9.getResolutionHeight().resolve(var16_19);
                                }
                                if (var12_17 && (var8_8 = var20_9.getBottom()) > (var5_4 = var3_7)) {
                                    var3_7 = Math.max(var5_4, var20_9.getBottom() + var20_9.getAnchor(ConstraintAnchor.Type.BOTTOM).getMargin());
                                }
                                var8_8 = 1;
                            }
                            if (var22_22.needsBaseline) {
                                var16_19 = var21_21.getBaseline();
                                var5_4 = var8_8;
                                if (var16_19 != -1) {
                                    var5_4 = var8_8;
                                    if (var16_19 != var20_9.getBaselineDistance()) {
                                        var20_9.setBaselineDistance(var16_19);
                                        var5_4 = 1;
                                    }
                                }
                            } else {
                                var5_4 = var8_8;
                            }
                            if (Build.VERSION.SDK_INT >= 11) {
                                var4_3 = ConstraintLayout.combineMeasuredStates((int)var4_3, (int)var21_21.getMeasuredState());
                            }
                            var8_8 = var7_6;
                        } else lbl-1000: // 2 sources:
                        {
                            var8_8 = var5_4;
                            var5_4 = var7_6;
                        }
                        var7_6 = var5_4;
                        var5_4 = var8_8;
                    }
                    var8_8 = var4_3;
                    if (var7_6 == 0) break block47;
                    this.mLayoutWidget.setWidth(var13_11);
                    this.mLayoutWidget.setHeight(var14_12);
                    if (var9_13) {
                        this.mLayoutWidget.solveGraph();
                    }
                    this.solveLinearSystem("2nd pass");
                    if (this.mLayoutWidget.getWidth() < var5_4) {
                        this.mLayoutWidget.setWidth(var5_4);
                        var4_3 = 1;
                    } else {
                        var4_3 = 0;
                    }
                    if (this.mLayoutWidget.getHeight() >= var3_7) break block48;
                    this.mLayoutWidget.setHeight(var3_7);
                    var4_3 = 1;
                    if (var4_3 == 0) break block47;
                }
                this.solveLinearSystem("3rd pass");
            }
            var5_4 = 0;
            do {
                var3_7 = var8_8;
                var4_3 = var6_5;
                if (var5_4 >= var11_14) break;
                var20_9 = this.mVariableDimensionsWidgets.get(var5_4);
                var21_21 = (View)var20_9.getCompanionWidget();
                if (var21_21 != null && (var21_21.getMeasuredWidth() != var20_9.getWidth() || var21_21.getMeasuredHeight() != var20_9.getHeight()) && var20_9.getVisibility() != 8) {
                    var21_21.measure(View.MeasureSpec.makeMeasureSpec((int)var20_9.getWidth(), (int)1073741824), View.MeasureSpec.makeMeasureSpec((int)var20_9.getHeight(), (int)1073741824));
                    if (this.mMetrics != null) {
                        var20_9 = this.mMetrics;
                        ++var20_9.additionalMeasures;
                    }
                }
                ++var5_4;
            } while (true);
        }
        var4_3 = this.mLayoutWidget.getWidth() + var4_3;
        var5_4 = this.mLayoutWidget.getHeight() + var17_15;
        if (Build.VERSION.SDK_INT < 11) {
            this.setMeasuredDimension(var4_3, var5_4);
            this.mLastMeasureWidth = var4_3;
            this.mLastMeasureHeight = var5_4;
            return;
        }
        var1_1 = ConstraintLayout.resolveSizeAndState((int)var4_3, (int)var1_1, (int)var3_7);
        var3_7 = ConstraintLayout.resolveSizeAndState((int)var5_4, (int)var2_2, (int)(var3_7 << 16));
        var2_2 = Math.min(this.mMaxWidth, var1_1 & 16777215);
        var3_7 = Math.min(this.mMaxHeight, var3_7 & 16777215);
        var1_1 = var2_2;
        if (this.mLayoutWidget.isWidthMeasuredTooSmall()) {
            var1_1 = var2_2 | 16777216;
        }
        var2_2 = var3_7;
        if (this.mLayoutWidget.isHeightMeasuredTooSmall()) {
            var2_2 = var3_7 | 16777216;
        }
        this.setMeasuredDimension(var1_1, var2_2);
        this.mLastMeasureWidth = var1_1;
        this.mLastMeasureHeight = var2_2;
    }

    public void onViewAdded(View view) {
        if (Build.VERSION.SDK_INT >= 14) {
            super.onViewAdded(view);
        }
        Object object = this.getViewWidget(view);
        if (view instanceof Guideline && !(object instanceof android.support.constraint.solver.widgets.Guideline)) {
            object = (LayoutParams)view.getLayoutParams();
            object.widget = new android.support.constraint.solver.widgets.Guideline();
            object.isGuideline = true;
            ((android.support.constraint.solver.widgets.Guideline)object.widget).setOrientation(object.orientation);
        }
        if (view instanceof ConstraintHelper) {
            object = (ConstraintHelper)view;
            object.validateParams();
            ((LayoutParams)view.getLayoutParams()).isHelper = true;
            if (!this.mConstraintHelpers.contains(object)) {
                this.mConstraintHelpers.add((ConstraintHelper)((Object)object));
            }
        }
        this.mChildrenByIds.put(view.getId(), (Object)view);
        this.mDirtyHierarchy = true;
    }

    public void onViewRemoved(View view) {
        if (Build.VERSION.SDK_INT >= 14) {
            super.onViewRemoved(view);
        }
        this.mChildrenByIds.remove(view.getId());
        ConstraintWidget constraintWidget = this.getViewWidget(view);
        this.mLayoutWidget.remove(constraintWidget);
        this.mConstraintHelpers.remove((Object)view);
        this.mVariableDimensionsWidgets.remove(constraintWidget);
        this.mDirtyHierarchy = true;
    }

    public void removeView(View view) {
        super.removeView(view);
        if (Build.VERSION.SDK_INT < 14) {
            this.onViewRemoved(view);
        }
    }

    public void requestLayout() {
        super.requestLayout();
        this.mDirtyHierarchy = true;
        this.mLastMeasureWidth = -1;
        this.mLastMeasureHeight = -1;
        this.mLastMeasureWidthSize = -1;
        this.mLastMeasureHeightSize = -1;
        this.mLastMeasureWidthMode = 0;
        this.mLastMeasureHeightMode = 0;
    }

    public void setConstraintSet(ConstraintSet constraintSet) {
        this.mConstraintSet = constraintSet;
    }

    public void setDesignInformation(int n, Object object, Object object2) {
        if (n == 0 && object instanceof String && object2 instanceof Integer) {
            if (this.mDesignIds == null) {
                this.mDesignIds = new HashMap();
            }
            String string2 = (String)object;
            n = string2.indexOf("/");
            object = string2;
            if (n != -1) {
                object = string2.substring(n + 1);
            }
            n = (Integer)object2;
            this.mDesignIds.put((String)object, n);
        }
    }

    public void setId(int n) {
        this.mChildrenByIds.remove(this.getId());
        super.setId(n);
        this.mChildrenByIds.put(this.getId(), (Object)this);
    }

    public void setMaxHeight(int n) {
        if (n == this.mMaxHeight) {
            return;
        }
        this.mMaxHeight = n;
        this.requestLayout();
    }

    public void setMaxWidth(int n) {
        if (n == this.mMaxWidth) {
            return;
        }
        this.mMaxWidth = n;
        this.requestLayout();
    }

    public void setMinHeight(int n) {
        if (n == this.mMinHeight) {
            return;
        }
        this.mMinHeight = n;
        this.requestLayout();
    }

    public void setMinWidth(int n) {
        if (n == this.mMinWidth) {
            return;
        }
        this.mMinWidth = n;
        this.requestLayout();
    }

    public void setOptimizationLevel(int n) {
        this.mLayoutWidget.setOptimizationLevel(n);
    }

    public boolean shouldDelayChildPressedState() {
        return false;
    }

    protected void solveLinearSystem(String object) {
        this.mLayoutWidget.layout();
        if (this.mMetrics != null) {
            object = this.mMetrics;
            ++object.resolutions;
        }
    }

    public static class LayoutParams
    extends ViewGroup.MarginLayoutParams {
        public static final int BASELINE = 5;
        public static final int BOTTOM = 4;
        public static final int CHAIN_PACKED = 2;
        public static final int CHAIN_SPREAD = 0;
        public static final int CHAIN_SPREAD_INSIDE = 1;
        public static final int END = 7;
        public static final int HORIZONTAL = 0;
        public static final int LEFT = 1;
        public static final int MATCH_CONSTRAINT = 0;
        public static final int MATCH_CONSTRAINT_PERCENT = 2;
        public static final int MATCH_CONSTRAINT_SPREAD = 0;
        public static final int MATCH_CONSTRAINT_WRAP = 1;
        public static final int PARENT_ID = 0;
        public static final int RIGHT = 2;
        public static final int START = 6;
        public static final int TOP = 3;
        public static final int UNSET = -1;
        public static final int VERTICAL = 1;
        public int baselineToBaseline = -1;
        public int bottomToBottom = -1;
        public int bottomToTop = -1;
        public float circleAngle = 0.0f;
        public int circleConstraint = -1;
        public int circleRadius = 0;
        public boolean constrainedHeight = false;
        public boolean constrainedWidth = false;
        public String dimensionRatio = null;
        int dimensionRatioSide = 1;
        float dimensionRatioValue = 0.0f;
        public int editorAbsoluteX = -1;
        public int editorAbsoluteY = -1;
        public int endToEnd = -1;
        public int endToStart = -1;
        public int goneBottomMargin = -1;
        public int goneEndMargin = -1;
        public int goneLeftMargin = -1;
        public int goneRightMargin = -1;
        public int goneStartMargin = -1;
        public int goneTopMargin = -1;
        public int guideBegin = -1;
        public int guideEnd = -1;
        public float guidePercent = -1.0f;
        public boolean helped = false;
        public float horizontalBias = 0.5f;
        public int horizontalChainStyle = 0;
        boolean horizontalDimensionFixed = true;
        public float horizontalWeight = -1.0f;
        boolean isGuideline = false;
        boolean isHelper = false;
        boolean isInPlaceholder = false;
        public int leftToLeft = -1;
        public int leftToRight = -1;
        public int matchConstraintDefaultHeight = 0;
        public int matchConstraintDefaultWidth = 0;
        public int matchConstraintMaxHeight = 0;
        public int matchConstraintMaxWidth = 0;
        public int matchConstraintMinHeight = 0;
        public int matchConstraintMinWidth = 0;
        public float matchConstraintPercentHeight = 1.0f;
        public float matchConstraintPercentWidth = 1.0f;
        boolean needsBaseline = false;
        public int orientation = -1;
        int resolveGoneLeftMargin = -1;
        int resolveGoneRightMargin = -1;
        int resolvedGuideBegin;
        int resolvedGuideEnd;
        float resolvedGuidePercent;
        float resolvedHorizontalBias = 0.5f;
        int resolvedLeftToLeft = -1;
        int resolvedLeftToRight = -1;
        int resolvedRightToLeft = -1;
        int resolvedRightToRight = -1;
        public int rightToLeft = -1;
        public int rightToRight = -1;
        public int startToEnd = -1;
        public int startToStart = -1;
        public int topToBottom = -1;
        public int topToTop = -1;
        public float verticalBias = 0.5f;
        public int verticalChainStyle = 0;
        boolean verticalDimensionFixed = true;
        public float verticalWeight = -1.0f;
        ConstraintWidget widget = new ConstraintWidget();

        public LayoutParams(int n, int n2) {
            super(n, n2);
        }

        /*
         * Unable to fully structure code
         * Enabled aggressive block sorting
         * Enabled unnecessary exception pruning
         * Enabled aggressive exception aggregation
         * Lifted jumps to return sites
         */
        public LayoutParams(Context var1_1, AttributeSet var2_2) {
            super(var1_1, (AttributeSet)var2_2);
            var1_1 = var1_1.obtainStyledAttributes((AttributeSet)var2_2, R.styleable.ConstraintLayout_Layout);
            var7_8 = var1_1.getIndexCount();
            var5_9 = 0;
            do {
                block70 : {
                    if (var5_9 >= var7_8) {
                        var1_1.recycle();
                        this.validate();
                        return;
                    }
                    var6_12 = var1_1.getIndex(var5_9);
                    switch (Table.map.get(var6_12)) {
                        default: {
                            ** break;
                        }
                        case 50: {
                            this.editorAbsoluteY = var1_1.getDimensionPixelOffset(var6_12, this.editorAbsoluteY);
                            ** break;
                        }
                        case 49: {
                            this.editorAbsoluteX = var1_1.getDimensionPixelOffset(var6_12, this.editorAbsoluteX);
                            ** break;
                        }
                        case 48: {
                            this.verticalChainStyle = var1_1.getInt(var6_12, 0);
                            ** break;
                        }
                        case 47: {
                            this.horizontalChainStyle = var1_1.getInt(var6_12, 0);
                            ** break;
                        }
                        case 46: {
                            this.verticalWeight = var1_1.getFloat(var6_12, this.verticalWeight);
                            ** break;
                        }
                        case 45: {
                            this.horizontalWeight = var1_1.getFloat(var6_12, this.horizontalWeight);
                            ** break;
                        }
                        case 44: {
                            this.dimensionRatio = var1_1.getString(var6_12);
                            this.dimensionRatioValue = Float.NaN;
                            this.dimensionRatioSide = -1;
                            if (this.dimensionRatio == null) ** break;
                            var8_13 = this.dimensionRatio.length();
                            var6_12 = this.dimensionRatio.indexOf(44);
                            if (var6_12 > 0 && var6_12 < var8_13 - 1) {
                                var2_2 = this.dimensionRatio.substring(0, var6_12);
                                if (var2_2.equalsIgnoreCase("W")) {
                                    this.dimensionRatioSide = 0;
                                } else if (var2_2.equalsIgnoreCase("H")) {
                                    this.dimensionRatioSide = 1;
                                }
                                ++var6_12;
                            } else {
                                var6_12 = 0;
                            }
                            var9_14 = this.dimensionRatio.indexOf(58);
                            if (var9_14 < 0 || var9_14 >= var8_13 - 1) ** GOTO lbl127
                            var2_2 = this.dimensionRatio.substring(var6_12, var9_14);
                            var10_15 = this.dimensionRatio.substring(var9_14 + 1);
                            if (var2_2.length() > 0 && var10_15.length() > 0) {
                                var3_10 = Float.parseFloat((String)var2_2);
                                var4_11 = Float.parseFloat(var10_15);
                                if (var3_10 > 0.0f && var4_11 > 0.0f) {
                                    if (this.dimensionRatioSide == 1) {
                                        this.dimensionRatioValue = Math.abs(var4_11 / var3_10);
                                        ** break;
                                    }
                                    this.dimensionRatioValue = Math.abs(var3_10 / var4_11);
                                }
                                break block70;
                            }
                            break block70;
lbl127: // 1 sources:
                            var2_2 = this.dimensionRatio.substring(var6_12);
                            if (var2_2.length() <= 0) ** break;
                            this.dimensionRatioValue = Float.parseFloat((String)var2_2);
                            ** break;
                        }
                        case 38: {
                            this.matchConstraintPercentHeight = Math.max(0.0f, var1_1.getFloat(var6_12, this.matchConstraintPercentHeight));
                            ** break;
                        }
                        case 37: {
                            this.matchConstraintMaxHeight = var1_1.getDimensionPixelSize(var6_12, this.matchConstraintMaxHeight);
                            ** break;
                        }
                        case 36: {
                            this.matchConstraintMinHeight = var1_1.getDimensionPixelSize(var6_12, this.matchConstraintMinHeight);
                            ** break;
                        }
                        case 35: {
                            this.matchConstraintPercentWidth = Math.max(0.0f, var1_1.getFloat(var6_12, this.matchConstraintPercentWidth));
                            ** break;
                        }
                        case 34: {
                            this.matchConstraintMaxWidth = var1_1.getDimensionPixelSize(var6_12, this.matchConstraintMaxWidth);
                            ** break;
                        }
                        case 33: {
                            this.matchConstraintMinWidth = var1_1.getDimensionPixelSize(var6_12, this.matchConstraintMinWidth);
                            ** break;
                        }
                        case 32: {
                            this.matchConstraintDefaultHeight = var1_1.getInt(var6_12, 0);
                            if (this.matchConstraintDefaultHeight != 1) ** break;
                            Log.e((String)"ConstraintLayout", (String)"layout_constraintHeight_default=\"wrap\" is deprecated.\nUse layout_height=\"WRAP_CONTENT\" and layout_constrainedHeight=\"true\" instead.");
                            ** break;
                        }
                        case 31: {
                            this.matchConstraintDefaultWidth = var1_1.getInt(var6_12, 0);
                            if (this.matchConstraintDefaultWidth != 1) ** break;
                            Log.e((String)"ConstraintLayout", (String)"layout_constraintWidth_default=\"wrap\" is deprecated.\nUse layout_width=\"WRAP_CONTENT\" and layout_constrainedWidth=\"true\" instead.");
                            ** break;
                        }
                        case 30: {
                            this.verticalBias = var1_1.getFloat(var6_12, this.verticalBias);
                            ** break;
                        }
                        case 29: {
                            this.horizontalBias = var1_1.getFloat(var6_12, this.horizontalBias);
                            ** break;
                        }
                        case 28: {
                            this.constrainedHeight = var1_1.getBoolean(var6_12, this.constrainedHeight);
                            ** break;
                        }
                        case 27: {
                            this.constrainedWidth = var1_1.getBoolean(var6_12, this.constrainedWidth);
                            ** break;
                        }
                        case 26: {
                            this.goneEndMargin = var1_1.getDimensionPixelSize(var6_12, this.goneEndMargin);
                            ** break;
                        }
                        case 25: {
                            this.goneStartMargin = var1_1.getDimensionPixelSize(var6_12, this.goneStartMargin);
                            ** break;
                        }
                        case 24: {
                            this.goneBottomMargin = var1_1.getDimensionPixelSize(var6_12, this.goneBottomMargin);
                            ** break;
                        }
                        case 23: {
                            this.goneRightMargin = var1_1.getDimensionPixelSize(var6_12, this.goneRightMargin);
                            ** break;
                        }
                        case 22: {
                            this.goneTopMargin = var1_1.getDimensionPixelSize(var6_12, this.goneTopMargin);
                            ** break;
                        }
                        case 21: {
                            this.goneLeftMargin = var1_1.getDimensionPixelSize(var6_12, this.goneLeftMargin);
                            ** break;
                        }
                        case 20: {
                            this.endToEnd = var1_1.getResourceId(var6_12, this.endToEnd);
                            if (this.endToEnd != -1) ** break;
                            this.endToEnd = var1_1.getInt(var6_12, -1);
                            ** break;
                        }
                        case 19: {
                            this.endToStart = var1_1.getResourceId(var6_12, this.endToStart);
                            if (this.endToStart != -1) ** break;
                            this.endToStart = var1_1.getInt(var6_12, -1);
                            ** break;
                        }
                        case 18: {
                            this.startToStart = var1_1.getResourceId(var6_12, this.startToStart);
                            if (this.startToStart != -1) ** break;
                            this.startToStart = var1_1.getInt(var6_12, -1);
                            ** break;
                        }
                        case 17: {
                            this.startToEnd = var1_1.getResourceId(var6_12, this.startToEnd);
                            if (this.startToEnd != -1) ** break;
                            this.startToEnd = var1_1.getInt(var6_12, -1);
                            ** break;
                        }
                        case 16: {
                            this.baselineToBaseline = var1_1.getResourceId(var6_12, this.baselineToBaseline);
                            if (this.baselineToBaseline != -1) ** break;
                            this.baselineToBaseline = var1_1.getInt(var6_12, -1);
                            ** break;
                        }
                        case 15: {
                            this.bottomToBottom = var1_1.getResourceId(var6_12, this.bottomToBottom);
                            if (this.bottomToBottom != -1) ** break;
                            this.bottomToBottom = var1_1.getInt(var6_12, -1);
                            ** break;
                        }
                        case 14: {
                            this.bottomToTop = var1_1.getResourceId(var6_12, this.bottomToTop);
                            if (this.bottomToTop != -1) ** break;
                            this.bottomToTop = var1_1.getInt(var6_12, -1);
                            ** break;
                        }
                        case 13: {
                            this.topToBottom = var1_1.getResourceId(var6_12, this.topToBottom);
                            if (this.topToBottom != -1) ** break;
                            this.topToBottom = var1_1.getInt(var6_12, -1);
                            ** break;
                        }
                        case 12: {
                            this.topToTop = var1_1.getResourceId(var6_12, this.topToTop);
                            if (this.topToTop != -1) ** break;
                            this.topToTop = var1_1.getInt(var6_12, -1);
                            ** break;
                        }
                        case 11: {
                            this.rightToRight = var1_1.getResourceId(var6_12, this.rightToRight);
                            if (this.rightToRight != -1) ** break;
                            this.rightToRight = var1_1.getInt(var6_12, -1);
                            ** break;
                        }
                        case 10: {
                            this.rightToLeft = var1_1.getResourceId(var6_12, this.rightToLeft);
                            if (this.rightToLeft != -1) ** break;
                            this.rightToLeft = var1_1.getInt(var6_12, -1);
                            ** break;
                        }
                        case 9: {
                            this.leftToRight = var1_1.getResourceId(var6_12, this.leftToRight);
                            if (this.leftToRight != -1) ** break;
                            this.leftToRight = var1_1.getInt(var6_12, -1);
                            ** break;
                        }
                        case 8: {
                            this.leftToLeft = var1_1.getResourceId(var6_12, this.leftToLeft);
                            if (this.leftToLeft != -1) ** break;
                            this.leftToLeft = var1_1.getInt(var6_12, -1);
                            ** break;
                        }
                        case 7: {
                            this.guidePercent = var1_1.getFloat(var6_12, this.guidePercent);
                            ** break;
                        }
                        case 6: {
                            this.guideEnd = var1_1.getDimensionPixelOffset(var6_12, this.guideEnd);
                            ** break;
                        }
                        case 5: {
                            this.guideBegin = var1_1.getDimensionPixelOffset(var6_12, this.guideBegin);
                            ** break;
                        }
                        case 4: {
                            this.circleAngle = var1_1.getFloat(var6_12, this.circleAngle) % 360.0f;
                            if (this.circleAngle >= 0.0f) ** break;
                            this.circleAngle = (360.0f - this.circleAngle) % 360.0f;
                            ** break;
                        }
                        case 3: {
                            this.circleRadius = var1_1.getDimensionPixelSize(var6_12, this.circleRadius);
                            ** break;
                        }
                        case 2: {
                            this.circleConstraint = var1_1.getResourceId(var6_12, this.circleConstraint);
                            if (this.circleConstraint != -1) ** break;
                            this.circleConstraint = var1_1.getInt(var6_12, -1);
                            ** break;
                        }
                        case 1: {
                            this.orientation = var1_1.getInt(var6_12, this.orientation);
                        }
                        case 0: 
                        case 39: 
                        case 40: 
                        case 41: 
                        case 42: 
                    }
                    break block70;
                    catch (NumberFormatException var2_7) {}
                    break block70;
                    catch (Exception var2_3) {}
                    if (var1_1.getInt(var6_12, this.matchConstraintMaxHeight) != -2) ** break;
                    this.matchConstraintMaxHeight = -2;
                    ** break;
                    catch (Exception var2_4) {}
                    if (var1_1.getInt(var6_12, this.matchConstraintMinHeight) != -2) ** break;
                    this.matchConstraintMinHeight = -2;
                    ** break;
                    catch (Exception var2_5) {}
                    if (var1_1.getInt(var6_12, this.matchConstraintMaxWidth) != -2) ** break;
                    this.matchConstraintMaxWidth = -2;
                    ** break;
                    catch (Exception var2_6) {}
                    if (var1_1.getInt(var6_12, this.matchConstraintMinWidth) != -2) ** break;
                    this.matchConstraintMinWidth = -2;
                    ** break;
                }
                ++var5_9;
            } while (true);
        }

        public LayoutParams(LayoutParams layoutParams) {
            super((ViewGroup.MarginLayoutParams)layoutParams);
            this.guideBegin = layoutParams.guideBegin;
            this.guideEnd = layoutParams.guideEnd;
            this.guidePercent = layoutParams.guidePercent;
            this.leftToLeft = layoutParams.leftToLeft;
            this.leftToRight = layoutParams.leftToRight;
            this.rightToLeft = layoutParams.rightToLeft;
            this.rightToRight = layoutParams.rightToRight;
            this.topToTop = layoutParams.topToTop;
            this.topToBottom = layoutParams.topToBottom;
            this.bottomToTop = layoutParams.bottomToTop;
            this.bottomToBottom = layoutParams.bottomToBottom;
            this.baselineToBaseline = layoutParams.baselineToBaseline;
            this.circleConstraint = layoutParams.circleConstraint;
            this.circleRadius = layoutParams.circleRadius;
            this.circleAngle = layoutParams.circleAngle;
            this.startToEnd = layoutParams.startToEnd;
            this.startToStart = layoutParams.startToStart;
            this.endToStart = layoutParams.endToStart;
            this.endToEnd = layoutParams.endToEnd;
            this.goneLeftMargin = layoutParams.goneLeftMargin;
            this.goneTopMargin = layoutParams.goneTopMargin;
            this.goneRightMargin = layoutParams.goneRightMargin;
            this.goneBottomMargin = layoutParams.goneBottomMargin;
            this.goneStartMargin = layoutParams.goneStartMargin;
            this.goneEndMargin = layoutParams.goneEndMargin;
            this.horizontalBias = layoutParams.horizontalBias;
            this.verticalBias = layoutParams.verticalBias;
            this.dimensionRatio = layoutParams.dimensionRatio;
            this.dimensionRatioValue = layoutParams.dimensionRatioValue;
            this.dimensionRatioSide = layoutParams.dimensionRatioSide;
            this.horizontalWeight = layoutParams.horizontalWeight;
            this.verticalWeight = layoutParams.verticalWeight;
            this.horizontalChainStyle = layoutParams.horizontalChainStyle;
            this.verticalChainStyle = layoutParams.verticalChainStyle;
            this.constrainedWidth = layoutParams.constrainedWidth;
            this.constrainedHeight = layoutParams.constrainedHeight;
            this.matchConstraintDefaultWidth = layoutParams.matchConstraintDefaultWidth;
            this.matchConstraintDefaultHeight = layoutParams.matchConstraintDefaultHeight;
            this.matchConstraintMinWidth = layoutParams.matchConstraintMinWidth;
            this.matchConstraintMaxWidth = layoutParams.matchConstraintMaxWidth;
            this.matchConstraintMinHeight = layoutParams.matchConstraintMinHeight;
            this.matchConstraintMaxHeight = layoutParams.matchConstraintMaxHeight;
            this.matchConstraintPercentWidth = layoutParams.matchConstraintPercentWidth;
            this.matchConstraintPercentHeight = layoutParams.matchConstraintPercentHeight;
            this.editorAbsoluteX = layoutParams.editorAbsoluteX;
            this.editorAbsoluteY = layoutParams.editorAbsoluteY;
            this.orientation = layoutParams.orientation;
            this.horizontalDimensionFixed = layoutParams.horizontalDimensionFixed;
            this.verticalDimensionFixed = layoutParams.verticalDimensionFixed;
            this.needsBaseline = layoutParams.needsBaseline;
            this.isGuideline = layoutParams.isGuideline;
            this.resolvedLeftToLeft = layoutParams.resolvedLeftToLeft;
            this.resolvedLeftToRight = layoutParams.resolvedLeftToRight;
            this.resolvedRightToLeft = layoutParams.resolvedRightToLeft;
            this.resolvedRightToRight = layoutParams.resolvedRightToRight;
            this.resolveGoneLeftMargin = layoutParams.resolveGoneLeftMargin;
            this.resolveGoneRightMargin = layoutParams.resolveGoneRightMargin;
            this.resolvedHorizontalBias = layoutParams.resolvedHorizontalBias;
            this.widget = layoutParams.widget;
        }

        public LayoutParams(ViewGroup.LayoutParams layoutParams) {
            super(layoutParams);
        }

        public void reset() {
            if (this.widget != null) {
                this.widget.reset();
            }
        }

        /*
         * Enabled aggressive block sorting
         */
        @TargetApi(value=17)
        public void resolveLayoutDirection(int n) {
            int n2;
            int n3;
            block37 : {
                block33 : {
                    block36 : {
                        block35 : {
                            int n4;
                            block34 : {
                                n2 = this.leftMargin;
                                n3 = this.rightMargin;
                                super.resolveLayoutDirection(n);
                                this.resolvedRightToLeft = -1;
                                this.resolvedRightToRight = -1;
                                this.resolvedLeftToLeft = -1;
                                this.resolvedLeftToRight = -1;
                                this.resolveGoneLeftMargin = -1;
                                this.resolveGoneRightMargin = -1;
                                this.resolveGoneLeftMargin = this.goneLeftMargin;
                                this.resolveGoneRightMargin = this.goneRightMargin;
                                this.resolvedHorizontalBias = this.horizontalBias;
                                this.resolvedGuideBegin = this.guideBegin;
                                this.resolvedGuideEnd = this.guideEnd;
                                this.resolvedGuidePercent = this.guidePercent;
                                n = this.getLayoutDirection();
                                n4 = 0;
                                n = 1 == n ? 1 : 0;
                                if (n == 0) break block33;
                                if (this.startToEnd == -1) break block34;
                                this.resolvedRightToLeft = this.startToEnd;
                                break block35;
                            }
                            n = n4;
                            if (this.startToStart == -1) break block36;
                            this.resolvedRightToRight = this.startToStart;
                        }
                        n = 1;
                    }
                    if (this.endToStart != -1) {
                        this.resolvedLeftToRight = this.endToStart;
                        n = 1;
                    }
                    if (this.endToEnd != -1) {
                        this.resolvedLeftToLeft = this.endToEnd;
                        n = 1;
                    }
                    if (this.goneStartMargin != -1) {
                        this.resolveGoneRightMargin = this.goneStartMargin;
                    }
                    if (this.goneEndMargin != -1) {
                        this.resolveGoneLeftMargin = this.goneEndMargin;
                    }
                    if (n != 0) {
                        this.resolvedHorizontalBias = 1.0f - this.horizontalBias;
                    }
                    if (this.isGuideline && this.orientation == 1) {
                        if (this.guidePercent != -1.0f) {
                            this.resolvedGuidePercent = 1.0f - this.guidePercent;
                            this.resolvedGuideBegin = -1;
                            this.resolvedGuideEnd = -1;
                        } else if (this.guideBegin != -1) {
                            this.resolvedGuideEnd = this.guideBegin;
                            this.resolvedGuideBegin = -1;
                            this.resolvedGuidePercent = -1.0f;
                        } else if (this.guideEnd != -1) {
                            this.resolvedGuideBegin = this.guideEnd;
                            this.resolvedGuideEnd = -1;
                            this.resolvedGuidePercent = -1.0f;
                        }
                    }
                    break block37;
                }
                if (this.startToEnd != -1) {
                    this.resolvedLeftToRight = this.startToEnd;
                }
                if (this.startToStart != -1) {
                    this.resolvedLeftToLeft = this.startToStart;
                }
                if (this.endToStart != -1) {
                    this.resolvedRightToLeft = this.endToStart;
                }
                if (this.endToEnd != -1) {
                    this.resolvedRightToRight = this.endToEnd;
                }
                if (this.goneStartMargin != -1) {
                    this.resolveGoneLeftMargin = this.goneStartMargin;
                }
                if (this.goneEndMargin != -1) {
                    this.resolveGoneRightMargin = this.goneEndMargin;
                }
            }
            if (this.endToStart != -1 || this.endToEnd != -1 || this.startToStart != -1 || this.startToEnd != -1) return;
            {
                if (this.rightToLeft != -1) {
                    this.resolvedRightToLeft = this.rightToLeft;
                    if (this.rightMargin <= 0 && n3 > 0) {
                        this.rightMargin = n3;
                    }
                } else if (this.rightToRight != -1) {
                    this.resolvedRightToRight = this.rightToRight;
                    if (this.rightMargin <= 0 && n3 > 0) {
                        this.rightMargin = n3;
                    }
                }
                if (this.leftToLeft != -1) {
                    this.resolvedLeftToLeft = this.leftToLeft;
                    if (this.leftMargin > 0 || n2 <= 0) return;
                    {
                        this.leftMargin = n2;
                        return;
                    }
                } else {
                    if (this.leftToRight == -1) return;
                    {
                        this.resolvedLeftToRight = this.leftToRight;
                        if (this.leftMargin > 0 || n2 <= 0) return;
                        {
                            this.leftMargin = n2;
                        }
                    }
                }
            }
        }

        public void validate() {
            this.isGuideline = false;
            this.horizontalDimensionFixed = true;
            this.verticalDimensionFixed = true;
            if (this.width == -2 && this.constrainedWidth) {
                this.horizontalDimensionFixed = false;
                this.matchConstraintDefaultWidth = 1;
            }
            if (this.height == -2 && this.constrainedHeight) {
                this.verticalDimensionFixed = false;
                this.matchConstraintDefaultHeight = 1;
            }
            if (this.width == 0 || this.width == -1) {
                this.horizontalDimensionFixed = false;
                if (this.width == 0 && this.matchConstraintDefaultWidth == 1) {
                    this.width = -2;
                    this.constrainedWidth = true;
                }
            }
            if (this.height == 0 || this.height == -1) {
                this.verticalDimensionFixed = false;
                if (this.height == 0 && this.matchConstraintDefaultHeight == 1) {
                    this.height = -2;
                    this.constrainedHeight = true;
                }
            }
            if (this.guidePercent != -1.0f || this.guideBegin != -1 || this.guideEnd != -1) {
                this.isGuideline = true;
                this.horizontalDimensionFixed = true;
                this.verticalDimensionFixed = true;
                if (!(this.widget instanceof android.support.constraint.solver.widgets.Guideline)) {
                    this.widget = new android.support.constraint.solver.widgets.Guideline();
                }
                ((android.support.constraint.solver.widgets.Guideline)this.widget).setOrientation(this.orientation);
            }
        }

        private static class Table {
            public static final int ANDROID_ORIENTATION = 1;
            public static final int LAYOUT_CONSTRAINED_HEIGHT = 28;
            public static final int LAYOUT_CONSTRAINED_WIDTH = 27;
            public static final int LAYOUT_CONSTRAINT_BASELINE_CREATOR = 43;
            public static final int LAYOUT_CONSTRAINT_BASELINE_TO_BASELINE_OF = 16;
            public static final int LAYOUT_CONSTRAINT_BOTTOM_CREATOR = 42;
            public static final int LAYOUT_CONSTRAINT_BOTTOM_TO_BOTTOM_OF = 15;
            public static final int LAYOUT_CONSTRAINT_BOTTOM_TO_TOP_OF = 14;
            public static final int LAYOUT_CONSTRAINT_CIRCLE = 2;
            public static final int LAYOUT_CONSTRAINT_CIRCLE_ANGLE = 4;
            public static final int LAYOUT_CONSTRAINT_CIRCLE_RADIUS = 3;
            public static final int LAYOUT_CONSTRAINT_DIMENSION_RATIO = 44;
            public static final int LAYOUT_CONSTRAINT_END_TO_END_OF = 20;
            public static final int LAYOUT_CONSTRAINT_END_TO_START_OF = 19;
            public static final int LAYOUT_CONSTRAINT_GUIDE_BEGIN = 5;
            public static final int LAYOUT_CONSTRAINT_GUIDE_END = 6;
            public static final int LAYOUT_CONSTRAINT_GUIDE_PERCENT = 7;
            public static final int LAYOUT_CONSTRAINT_HEIGHT_DEFAULT = 32;
            public static final int LAYOUT_CONSTRAINT_HEIGHT_MAX = 37;
            public static final int LAYOUT_CONSTRAINT_HEIGHT_MIN = 36;
            public static final int LAYOUT_CONSTRAINT_HEIGHT_PERCENT = 38;
            public static final int LAYOUT_CONSTRAINT_HORIZONTAL_BIAS = 29;
            public static final int LAYOUT_CONSTRAINT_HORIZONTAL_CHAINSTYLE = 47;
            public static final int LAYOUT_CONSTRAINT_HORIZONTAL_WEIGHT = 45;
            public static final int LAYOUT_CONSTRAINT_LEFT_CREATOR = 39;
            public static final int LAYOUT_CONSTRAINT_LEFT_TO_LEFT_OF = 8;
            public static final int LAYOUT_CONSTRAINT_LEFT_TO_RIGHT_OF = 9;
            public static final int LAYOUT_CONSTRAINT_RIGHT_CREATOR = 41;
            public static final int LAYOUT_CONSTRAINT_RIGHT_TO_LEFT_OF = 10;
            public static final int LAYOUT_CONSTRAINT_RIGHT_TO_RIGHT_OF = 11;
            public static final int LAYOUT_CONSTRAINT_START_TO_END_OF = 17;
            public static final int LAYOUT_CONSTRAINT_START_TO_START_OF = 18;
            public static final int LAYOUT_CONSTRAINT_TOP_CREATOR = 40;
            public static final int LAYOUT_CONSTRAINT_TOP_TO_BOTTOM_OF = 13;
            public static final int LAYOUT_CONSTRAINT_TOP_TO_TOP_OF = 12;
            public static final int LAYOUT_CONSTRAINT_VERTICAL_BIAS = 30;
            public static final int LAYOUT_CONSTRAINT_VERTICAL_CHAINSTYLE = 48;
            public static final int LAYOUT_CONSTRAINT_VERTICAL_WEIGHT = 46;
            public static final int LAYOUT_CONSTRAINT_WIDTH_DEFAULT = 31;
            public static final int LAYOUT_CONSTRAINT_WIDTH_MAX = 34;
            public static final int LAYOUT_CONSTRAINT_WIDTH_MIN = 33;
            public static final int LAYOUT_CONSTRAINT_WIDTH_PERCENT = 35;
            public static final int LAYOUT_EDITOR_ABSOLUTEX = 49;
            public static final int LAYOUT_EDITOR_ABSOLUTEY = 50;
            public static final int LAYOUT_GONE_MARGIN_BOTTOM = 24;
            public static final int LAYOUT_GONE_MARGIN_END = 26;
            public static final int LAYOUT_GONE_MARGIN_LEFT = 21;
            public static final int LAYOUT_GONE_MARGIN_RIGHT = 23;
            public static final int LAYOUT_GONE_MARGIN_START = 25;
            public static final int LAYOUT_GONE_MARGIN_TOP = 22;
            public static final int UNUSED = 0;
            public static final SparseIntArray map = new SparseIntArray();

            static {
                map.append(R.styleable.ConstraintLayout_Layout_layout_constraintLeft_toLeftOf, 8);
                map.append(R.styleable.ConstraintLayout_Layout_layout_constraintLeft_toRightOf, 9);
                map.append(R.styleable.ConstraintLayout_Layout_layout_constraintRight_toLeftOf, 10);
                map.append(R.styleable.ConstraintLayout_Layout_layout_constraintRight_toRightOf, 11);
                map.append(R.styleable.ConstraintLayout_Layout_layout_constraintTop_toTopOf, 12);
                map.append(R.styleable.ConstraintLayout_Layout_layout_constraintTop_toBottomOf, 13);
                map.append(R.styleable.ConstraintLayout_Layout_layout_constraintBottom_toTopOf, 14);
                map.append(R.styleable.ConstraintLayout_Layout_layout_constraintBottom_toBottomOf, 15);
                map.append(R.styleable.ConstraintLayout_Layout_layout_constraintBaseline_toBaselineOf, 16);
                map.append(R.styleable.ConstraintLayout_Layout_layout_constraintCircle, 2);
                map.append(R.styleable.ConstraintLayout_Layout_layout_constraintCircleRadius, 3);
                map.append(R.styleable.ConstraintLayout_Layout_layout_constraintCircleAngle, 4);
                map.append(R.styleable.ConstraintLayout_Layout_layout_editor_absoluteX, 49);
                map.append(R.styleable.ConstraintLayout_Layout_layout_editor_absoluteY, 50);
                map.append(R.styleable.ConstraintLayout_Layout_layout_constraintGuide_begin, 5);
                map.append(R.styleable.ConstraintLayout_Layout_layout_constraintGuide_end, 6);
                map.append(R.styleable.ConstraintLayout_Layout_layout_constraintGuide_percent, 7);
                map.append(R.styleable.ConstraintLayout_Layout_android_orientation, 1);
                map.append(R.styleable.ConstraintLayout_Layout_layout_constraintStart_toEndOf, 17);
                map.append(R.styleable.ConstraintLayout_Layout_layout_constraintStart_toStartOf, 18);
                map.append(R.styleable.ConstraintLayout_Layout_layout_constraintEnd_toStartOf, 19);
                map.append(R.styleable.ConstraintLayout_Layout_layout_constraintEnd_toEndOf, 20);
                map.append(R.styleable.ConstraintLayout_Layout_layout_goneMarginLeft, 21);
                map.append(R.styleable.ConstraintLayout_Layout_layout_goneMarginTop, 22);
                map.append(R.styleable.ConstraintLayout_Layout_layout_goneMarginRight, 23);
                map.append(R.styleable.ConstraintLayout_Layout_layout_goneMarginBottom, 24);
                map.append(R.styleable.ConstraintLayout_Layout_layout_goneMarginStart, 25);
                map.append(R.styleable.ConstraintLayout_Layout_layout_goneMarginEnd, 26);
                map.append(R.styleable.ConstraintLayout_Layout_layout_constraintHorizontal_bias, 29);
                map.append(R.styleable.ConstraintLayout_Layout_layout_constraintVertical_bias, 30);
                map.append(R.styleable.ConstraintLayout_Layout_layout_constraintDimensionRatio, 44);
                map.append(R.styleable.ConstraintLayout_Layout_layout_constraintHorizontal_weight, 45);
                map.append(R.styleable.ConstraintLayout_Layout_layout_constraintVertical_weight, 46);
                map.append(R.styleable.ConstraintLayout_Layout_layout_constraintHorizontal_chainStyle, 47);
                map.append(R.styleable.ConstraintLayout_Layout_layout_constraintVertical_chainStyle, 48);
                map.append(R.styleable.ConstraintLayout_Layout_layout_constrainedWidth, 27);
                map.append(R.styleable.ConstraintLayout_Layout_layout_constrainedHeight, 28);
                map.append(R.styleable.ConstraintLayout_Layout_layout_constraintWidth_default, 31);
                map.append(R.styleable.ConstraintLayout_Layout_layout_constraintHeight_default, 32);
                map.append(R.styleable.ConstraintLayout_Layout_layout_constraintWidth_min, 33);
                map.append(R.styleable.ConstraintLayout_Layout_layout_constraintWidth_max, 34);
                map.append(R.styleable.ConstraintLayout_Layout_layout_constraintWidth_percent, 35);
                map.append(R.styleable.ConstraintLayout_Layout_layout_constraintHeight_min, 36);
                map.append(R.styleable.ConstraintLayout_Layout_layout_constraintHeight_max, 37);
                map.append(R.styleable.ConstraintLayout_Layout_layout_constraintHeight_percent, 38);
                map.append(R.styleable.ConstraintLayout_Layout_layout_constraintLeft_creator, 39);
                map.append(R.styleable.ConstraintLayout_Layout_layout_constraintTop_creator, 40);
                map.append(R.styleable.ConstraintLayout_Layout_layout_constraintRight_creator, 41);
                map.append(R.styleable.ConstraintLayout_Layout_layout_constraintBottom_creator, 42);
                map.append(R.styleable.ConstraintLayout_Layout_layout_constraintBaseline_creator, 43);
            }

            private Table() {
            }
        }

    }

}

