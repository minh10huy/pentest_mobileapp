/*
 * Decompiled with CFR 0_132.
 */
package android.support.constraint.solver.widgets;

import android.support.constraint.solver.ArrayRow;
import android.support.constraint.solver.Cache;
import android.support.constraint.solver.LinearSystem;
import android.support.constraint.solver.SolverVariable;
import android.support.constraint.solver.widgets.ConstraintAnchor;
import android.support.constraint.solver.widgets.ConstraintWidgetContainer;
import android.support.constraint.solver.widgets.Optimizer;
import android.support.constraint.solver.widgets.ResolutionAnchor;
import android.support.constraint.solver.widgets.ResolutionDimension;
import android.support.constraint.solver.widgets.WidgetContainer;
import java.util.ArrayList;

public class ConstraintWidget {
    protected static final int ANCHOR_BASELINE = 4;
    protected static final int ANCHOR_BOTTOM = 3;
    protected static final int ANCHOR_LEFT = 0;
    protected static final int ANCHOR_RIGHT = 1;
    protected static final int ANCHOR_TOP = 2;
    private static final boolean AUTOTAG_CENTER = false;
    public static final int CHAIN_PACKED = 2;
    public static final int CHAIN_SPREAD = 0;
    public static final int CHAIN_SPREAD_INSIDE = 1;
    public static float DEFAULT_BIAS = 0.5f;
    static final int DIMENSION_HORIZONTAL = 0;
    static final int DIMENSION_VERTICAL = 1;
    protected static final int DIRECT = 2;
    public static final int GONE = 8;
    public static final int HORIZONTAL = 0;
    public static final int INVISIBLE = 4;
    public static final int MATCH_CONSTRAINT_PERCENT = 2;
    public static final int MATCH_CONSTRAINT_RATIO = 3;
    public static final int MATCH_CONSTRAINT_RATIO_RESOLVED = 4;
    public static final int MATCH_CONSTRAINT_SPREAD = 0;
    public static final int MATCH_CONSTRAINT_WRAP = 1;
    protected static final int SOLVER = 1;
    public static final int UNKNOWN = -1;
    public static final int VERTICAL = 1;
    public static final int VISIBLE = 0;
    private static final int WRAP = -2;
    protected ArrayList<ConstraintAnchor> mAnchors = new ArrayList();
    ConstraintAnchor mBaseline = new ConstraintAnchor(this, ConstraintAnchor.Type.BASELINE);
    int mBaselineDistance = 0;
    ConstraintAnchor mBottom = new ConstraintAnchor(this, ConstraintAnchor.Type.BOTTOM);
    boolean mBottomHasCentered;
    ConstraintAnchor mCenter = new ConstraintAnchor(this, ConstraintAnchor.Type.CENTER);
    ConstraintAnchor mCenterX = new ConstraintAnchor(this, ConstraintAnchor.Type.CENTER_X);
    ConstraintAnchor mCenterY = new ConstraintAnchor(this, ConstraintAnchor.Type.CENTER_Y);
    private float mCircleConstraintAngle = 0.0f;
    private Object mCompanionWidget;
    private int mContainerItemSkip = 0;
    private String mDebugName = null;
    protected float mDimensionRatio = 0.0f;
    protected int mDimensionRatioSide = -1;
    int mDistToBottom;
    int mDistToLeft;
    int mDistToRight;
    int mDistToTop;
    private int mDrawHeight = 0;
    private int mDrawWidth = 0;
    private int mDrawX = 0;
    private int mDrawY = 0;
    int mHeight = 0;
    float mHorizontalBiasPercent = DEFAULT_BIAS;
    boolean mHorizontalChainFixedPosition;
    int mHorizontalChainStyle = 0;
    ConstraintWidget mHorizontalNextWidget = null;
    public int mHorizontalResolution = -1;
    boolean mHorizontalWrapVisited;
    boolean mIsHeightWrapContent;
    boolean mIsWidthWrapContent;
    ConstraintAnchor mLeft = new ConstraintAnchor(this, ConstraintAnchor.Type.LEFT);
    boolean mLeftHasCentered;
    protected ConstraintAnchor[] mListAnchors = new ConstraintAnchor[]{this.mLeft, this.mRight, this.mTop, this.mBottom, this.mBaseline, this.mCenter};
    protected DimensionBehaviour[] mListDimensionBehaviors = new DimensionBehaviour[]{DimensionBehaviour.FIXED, DimensionBehaviour.FIXED};
    protected ConstraintWidget[] mListNextMatchConstraintsWidget = new ConstraintWidget[]{null, null};
    protected ConstraintWidget[] mListNextVisibleWidget = new ConstraintWidget[]{null, null};
    int mMatchConstraintDefaultHeight = 0;
    int mMatchConstraintDefaultWidth = 0;
    int mMatchConstraintMaxHeight = 0;
    int mMatchConstraintMaxWidth = 0;
    int mMatchConstraintMinHeight = 0;
    int mMatchConstraintMinWidth = 0;
    float mMatchConstraintPercentHeight = 1.0f;
    float mMatchConstraintPercentWidth = 1.0f;
    private int[] mMaxDimension = new int[]{Integer.MAX_VALUE, Integer.MAX_VALUE};
    protected int mMinHeight;
    protected int mMinWidth;
    protected int mOffsetX = 0;
    protected int mOffsetY = 0;
    ConstraintWidget mParent = null;
    ResolutionDimension mResolutionHeight;
    ResolutionDimension mResolutionWidth;
    float mResolvedDimensionRatio = 1.0f;
    int mResolvedDimensionRatioSide = -1;
    int[] mResolvedMatchConstraintDefault = new int[2];
    ConstraintAnchor mRight = new ConstraintAnchor(this, ConstraintAnchor.Type.RIGHT);
    boolean mRightHasCentered;
    ConstraintAnchor mTop = new ConstraintAnchor(this, ConstraintAnchor.Type.TOP);
    boolean mTopHasCentered;
    private String mType = null;
    float mVerticalBiasPercent = DEFAULT_BIAS;
    boolean mVerticalChainFixedPosition;
    int mVerticalChainStyle = 0;
    ConstraintWidget mVerticalNextWidget = null;
    public int mVerticalResolution = -1;
    boolean mVerticalWrapVisited;
    private int mVisibility = 0;
    float[] mWeight = new float[]{-1.0f, -1.0f};
    int mWidth = 0;
    private int mWrapHeight;
    private int mWrapWidth;
    protected int mX = 0;
    protected int mY = 0;

    public ConstraintWidget() {
        this.addAnchors();
    }

    public ConstraintWidget(int n, int n2) {
        this(0, 0, n, n2);
    }

    public ConstraintWidget(int n, int n2, int n3, int n4) {
        this.mX = n;
        this.mY = n2;
        this.mWidth = n3;
        this.mHeight = n4;
        this.addAnchors();
        this.forceUpdateDrawPosition();
    }

    private void addAnchors() {
        this.mAnchors.add(this.mLeft);
        this.mAnchors.add(this.mTop);
        this.mAnchors.add(this.mRight);
        this.mAnchors.add(this.mBottom);
        this.mAnchors.add(this.mCenterX);
        this.mAnchors.add(this.mCenterY);
        this.mAnchors.add(this.mCenter);
        this.mAnchors.add(this.mBaseline);
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Lifted jumps to return sites
     */
    private void applyConstraints(LinearSystem var1_1, boolean var2_2, SolverVariable var3_3, SolverVariable var4_4, DimensionBehaviour var5_5, boolean var6_6, ConstraintAnchor var7_7, ConstraintAnchor var8_8, int var9_9, int var10_10, int var11_11, int var12_12, float var13_13, boolean var14_14, boolean var15_15, int var16_16, int var17_17, int var18_18, float var19_19, boolean var20_20) {
        block49 : {
            block51 : {
                block56 : {
                    block60 : {
                        block54 : {
                            block59 : {
                                block58 : {
                                    block57 : {
                                        block55 : {
                                            block53 : {
                                                block52 : {
                                                    block50 : {
                                                        var30_22 = var1_1.createObjectVariable(var7_8);
                                                        var27_23 = var1_1.createObjectVariable(var8_9);
                                                        var28_24 = var1_1.createObjectVariable(var7_8.getTarget());
                                                        var31_25 = var1_1.createObjectVariable(var8_9.getTarget());
                                                        if (var1_1.graphOptimizer && var7_8.getResolutionNode().state == 1 && var8_9.getResolutionNode().state == 1) {
                                                            if (LinearSystem.getMetrics() != null) {
                                                                var3_3 = LinearSystem.getMetrics();
                                                                ++var3_3.resolvedWidgets;
                                                            }
                                                            var7_8.getResolutionNode().addResolvedValue(var1_1);
                                                            var8_9.getResolutionNode().addResolvedValue(var1_1);
                                                            if (var15_16 != false) return;
                                                            if (var2_2 == false) return;
                                                            var1_1.addGreaterThan(var4_4, var27_23, 0, 6);
                                                            return;
                                                        }
                                                        if (LinearSystem.getMetrics() != null) {
                                                            var29_26 = LinearSystem.getMetrics();
                                                            ++var29_26.nonresolvedWidgets;
                                                        }
                                                        var25_27 = var7_8.isConnected();
                                                        var24_28 = var8_9.isConnected();
                                                        var26_29 = this.mCenter.isConnected();
                                                        var22_30 = var25_27 != false ? 1 : 0;
                                                        var21_31 = var22_30;
                                                        if (var24_28) {
                                                            var21_31 = var22_30 + 1;
                                                        }
                                                        var22_30 = var21_31;
                                                        if (var26_29) {
                                                            var22_30 = var21_31 + 1;
                                                        }
                                                        var21_31 = var14_15 != false ? 3 : var16_17;
                                                        switch (.$SwitchMap$android$support$constraint$solver$widgets$ConstraintWidget$DimensionBehaviour[var5_5.ordinal()]) {
                                                            case 4: {
                                                                if (var21_31 != 4) break;
                                                            }
                                                            default: {
                                                                var16_17 = 0;
                                                                ** break;
                                                            }
                                                        }
                                                        var16_17 = 1;
lbl36: // 2 sources:
                                                        if (this.mVisibility == 8) {
                                                            var10_11 = 0;
                                                            var16_17 = 0;
                                                        }
                                                        if (var20_21 != false) {
                                                            if (!(var25_27 || var24_28 || var26_29)) {
                                                                var1_1.addEquality(var30_22, var9_10);
                                                            } else if (var25_27 && !var24_28) {
                                                                var1_1.addEquality(var30_22, var28_24, var7_8.getMargin(), 6);
                                                            }
                                                        }
                                                        var5_6 = var28_24;
                                                        if (var16_17 == 0) {
                                                            if (var6_7 != false) {
                                                                var28_24 = var27_23;
                                                                var1_1.addEquality(var28_24, var30_22, 0, 3);
                                                                if (var11_12 > 0) {
                                                                    var1_1.addGreaterThan(var28_24, var30_22, var11_12, 6);
                                                                }
                                                                if (var12_13 < Integer.MAX_VALUE) {
                                                                    var1_1.addLowerThan(var28_24, var30_22, var12_13, 6);
                                                                }
                                                            } else {
                                                                var1_1.addEquality(var27_23, var30_22, var10_11, 6);
                                                            }
                                                            var10_11 = var16_17;
                                                        } else {
                                                            var32_32 = var27_23;
                                                            var9_10 = var17_18 == -2 ? var10_11 : var17_18;
                                                            var12_13 = var18_19;
                                                            if (var18_19 == -2) {
                                                                var12_13 = var10_11;
                                                            }
                                                            if (var9_10 > 0) {
                                                                if (var2_2) {
                                                                    var1_1.addGreaterThan(var32_32, var30_22, var9_10, 6);
                                                                } else {
                                                                    var1_1.addGreaterThan(var32_32, var30_22, var9_10, 6);
                                                                }
                                                                var10_11 = Math.max(var10_11, var9_10);
                                                            }
                                                            var23_33 = var10_11;
                                                            if (var12_13 > 0) {
                                                                if (var2_2) {
                                                                    var1_1.addLowerThan(var32_32, var30_22, var12_13, 1);
                                                                } else {
                                                                    var1_1.addLowerThan(var32_32, var30_22, var12_13, 6);
                                                                }
                                                                var23_33 = Math.min(var10_11, var12_13);
                                                            }
                                                            if (var21_31 == 1) {
                                                                if (var2_2) {
                                                                    var1_1.addEquality(var32_32, var30_22, var23_33, 6);
                                                                } else if (var15_16 != false) {
                                                                    var1_1.addEquality(var32_32, var30_22, var23_33, 4);
                                                                } else {
                                                                    var1_1.addEquality(var32_32, var30_22, var23_33, 1);
                                                                }
                                                            } else if (var21_31 == 2) {
                                                                if (var7_8.getType() != ConstraintAnchor.Type.TOP && var7_8.getType() != ConstraintAnchor.Type.BOTTOM) {
                                                                    var28_24 = var1_1.createObjectVariable(this.mParent.getAnchor(ConstraintAnchor.Type.LEFT));
                                                                    var29_26 = var1_1.createObjectVariable(this.mParent.getAnchor(ConstraintAnchor.Type.RIGHT));
                                                                } else {
                                                                    var28_24 = var1_1.createObjectVariable(this.mParent.getAnchor(ConstraintAnchor.Type.TOP));
                                                                    var29_26 = var1_1.createObjectVariable(this.mParent.getAnchor(ConstraintAnchor.Type.BOTTOM));
                                                                }
                                                                var1_1.addConstraint(var1_1.createRow().createRowDimensionRatio(var32_32, var30_22, (SolverVariable)var29_26, var28_24, (float)var19_20));
                                                                var16_17 = 0;
                                                            }
                                                            var17_18 = var9_10;
                                                            var18_19 = var12_13;
                                                            var10_11 = var16_17;
                                                            if (var16_17 != 0) {
                                                                var17_18 = var9_10;
                                                                var18_19 = var12_13;
                                                                var10_11 = var16_17;
                                                                if (var22_30 != 2) {
                                                                    var17_18 = var9_10;
                                                                    var18_19 = var12_13;
                                                                    var10_11 = var16_17;
                                                                    if (var14_15 == false) {
                                                                        var10_11 = var16_17 = Math.max(var9_10, var23_33);
                                                                        if (var12_13 > 0) {
                                                                            var10_11 = Math.min(var12_13, var16_17);
                                                                        }
                                                                        var1_1.addEquality(var32_32, var30_22, var10_11, 6);
                                                                        var10_11 = 0;
                                                                        var18_19 = var12_13;
                                                                        var17_18 = var9_10;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        if (var20_21 == false || var15_16 != false) break block49;
                                                        if (var25_27 || var24_28 || var26_29) break block50;
                                                        if (var2_2) {
                                                            var1_1.addGreaterThan(var4_4, var27_23, 0, 5);
                                                        }
                                                        break block51;
                                                    }
                                                    if (!var25_27 || var24_28) break block52;
                                                    if (var2_2) {
                                                        var1_1.addGreaterThan(var4_4, var27_23, 0, 5);
                                                    }
                                                    break block51;
                                                }
                                                if (var25_27 || !var24_28) break block53;
                                                var1_1.addEquality(var27_23, var31_25, - var8_9.getMargin(), 6);
                                                if (var2_2) {
                                                    var1_1.addGreaterThan(var30_22, (SolverVariable)var3_3, 0, 5);
                                                }
                                                break block51;
                                            }
                                            var12_13 = 1;
                                            var16_17 = 1;
                                            if (!var25_27 || !var24_28) break block51;
                                            if (var10_11 == 0) break block54;
                                            if (var2_2 && var11_12 == 0) {
                                                var1_1.addGreaterThan(var27_23, var30_22, 0, 6);
                                            }
                                            if (var21_31 != 0) break block55;
                                            if (var18_19 <= 0 && var17_18 <= 0) {
                                                var10_11 = 6;
                                                var9_10 = 0;
                                            } else {
                                                var10_11 = 4;
                                                var9_10 = 1;
                                            }
                                            var1_1.addEquality(var30_22, var5_6, var7_8.getMargin(), var10_11);
                                            var1_1.addEquality(var27_23, var31_25, - var8_9.getMargin(), var10_11);
                                            var10_11 = var18_19 <= 0 && var17_18 <= 0 ? 0 : 1;
                                            var11_12 = var9_10;
                                            var9_10 = var10_11;
                                            var10_11 = 5;
                                            break block56;
                                        }
                                        if (var21_31 != 1) break block57;
                                        var10_11 = 6;
                                        break block58;
                                    }
                                    if (var21_31 != 3) break block59;
                                    var9_10 = var14_15 == false && this.mResolvedDimensionRatioSide != -1 && var18_19 <= 0 ? 6 : 4;
                                    var1_1.addEquality(var30_22, var5_6, var7_8.getMargin(), var9_10);
                                    var1_1.addEquality(var27_23, var31_25, - var8_9.getMargin(), var9_10);
                                    var10_11 = 5;
                                }
                                var11_12 = 1;
                                var9_10 = var12_13;
                                break block56;
                            }
                            var9_10 = 0;
                            break block60;
                        }
                        var9_10 = var16_17;
                        if (var2_2) {
                            var1_1.addGreaterThan(var30_22, var5_6, var7_8.getMargin(), 5);
                            var1_1.addLowerThan(var27_23, var31_25, - var8_9.getMargin(), 5);
                            var9_10 = var16_17;
                        }
                    }
                    var10_11 = 5;
                    var11_12 = 0;
                }
                if (var9_10 != 0) {
                    var1_1.addCentering(var30_22, var5_6, var7_8.getMargin(), (float)var13_14, var31_25, var27_23, var8_9.getMargin(), var10_11);
                    if (var11_12 != 0) {
                        var1_1.addGreaterThan(var30_22, var5_6, var7_8.getMargin(), 6);
                        var1_1.addLowerThan(var27_23, var31_25, - var8_9.getMargin(), 6);
                    }
                }
                if (var2_2) {
                    var1_1.addGreaterThan(var30_22, (SolverVariable)var3_3, 0, 6);
                }
            }
            if (var2_2 == false) return;
            var1_1.addGreaterThan(var4_4, var27_23, 0, 6);
            return;
        }
        if (var22_30 >= 2) return;
        if (var2_2 == false) return;
        var1_1.addGreaterThan(var30_22, (SolverVariable)var3_3, 0, 6);
        var1_1.addGreaterThan(var4_4, var27_23, 0, 6);
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Lifted jumps to return sites
     */
    public void addToSolver(LinearSystem var1_1) {
        block26 : {
            block25 : {
                block24 : {
                    block20 : {
                        block22 : {
                            block23 : {
                                block21 : {
                                    var21_2 = this;
                                    var23_3 = var1_1.createObjectVariable(var21_2.mLeft);
                                    var19_4 = var1_1.createObjectVariable(var21_2.mRight);
                                    var22_5 = var1_1.createObjectVariable(var21_2.mTop);
                                    var18_6 = var1_1.createObjectVariable(var21_2.mBottom);
                                    var20_7 = var1_1.createObjectVariable(var21_2.mBaseline);
                                    if (var21_2.mParent != null) {
                                        var9_8 = var21_2.mParent != null && var21_2.mParent.mListDimensionBehaviors[0] == DimensionBehaviour.WRAP_CONTENT;
                                        var10_9 = var21_2.mParent != null && var21_2.mParent.mListDimensionBehaviors[1] == DimensionBehaviour.WRAP_CONTENT;
                                        if (var21_2.mLeft.mTarget != null && var21_2.mLeft.mTarget.mTarget != var21_2.mLeft && var21_2.mRight.mTarget != null && var21_2.mRight.mTarget.mTarget == var21_2.mRight) {
                                            ((ConstraintWidgetContainer)var21_2.mParent).addChain((ConstraintWidget)var21_2, 0);
                                        }
                                        var11_10 = var21_2.mLeft.mTarget != null && var21_2.mLeft.mTarget.mTarget == var21_2.mLeft || var21_2.mRight.mTarget != null && var21_2.mRight.mTarget.mTarget == var21_2.mRight;
                                        if (var21_2.mTop.mTarget != null && var21_2.mTop.mTarget.mTarget != var21_2.mTop && var21_2.mBottom.mTarget != null && var21_2.mBottom.mTarget.mTarget == var21_2.mBottom) {
                                            ((ConstraintWidgetContainer)var21_2.mParent).addChain((ConstraintWidget)var21_2, 1);
                                        }
                                        var12_11 = var21_2.mTop.mTarget != null && var21_2.mTop.mTarget.mTarget == var21_2.mTop || var21_2.mBottom.mTarget != null && var21_2.mBottom.mTarget.mTarget == var21_2.mBottom;
                                        if (var9_8 && var21_2.mVisibility != 8 && var21_2.mLeft.mTarget == null && var21_2.mRight.mTarget == null) {
                                            var1_1.addGreaterThan(var1_1.createObjectVariable(var21_2.mParent.mRight), var19_4, 0, 1);
                                        }
                                        if (var10_9 && var21_2.mVisibility != 8 && var21_2.mTop.mTarget == null && var21_2.mBottom.mTarget == null && var21_2.mBaseline == null) {
                                            var1_1.addGreaterThan(var1_1.createObjectVariable(var21_2.mParent.mBottom), var18_6, 0, 1);
                                        }
                                        var13_12 = var11_10;
                                        var14_13 = var12_11;
                                        var11_10 = var9_8;
                                        var9_8 = var10_9;
                                        var12_11 = var13_12;
                                        var10_9 = var14_13;
                                    } else {
                                        var11_10 = false;
                                        var9_8 = false;
                                        var12_11 = false;
                                        var10_9 = false;
                                    }
                                    var4_15 = var3_14 = var21_2.mWidth;
                                    if (var3_14 < var21_2.mMinWidth) {
                                        var4_15 = var21_2.mMinWidth;
                                    }
                                    var3_14 = var5_16 = var21_2.mHeight;
                                    if (var5_16 < var21_2.mMinHeight) {
                                        var3_14 = var21_2.mMinHeight;
                                    }
                                    var13_12 = var21_2.mListDimensionBehaviors[0] != DimensionBehaviour.MATCH_CONSTRAINT;
                                    var14_13 = var21_2.mListDimensionBehaviors[1] != DimensionBehaviour.MATCH_CONSTRAINT;
                                    var21_2.mResolvedDimensionRatioSide = var21_2.mDimensionRatioSide;
                                    var21_2.mResolvedDimensionRatio = var21_2.mDimensionRatio;
                                    var6_17 = var21_2.mMatchConstraintDefaultWidth;
                                    var7_18 = var21_2.mMatchConstraintDefaultHeight;
                                    var2_19 = var21_2.mDimensionRatio;
                                    var8_20 = 4;
                                    if (var2_19 <= 0.0f || var21_2.mVisibility == 8) break block20;
                                    var5_16 = var6_17;
                                    if (var21_2.mListDimensionBehaviors[0] == DimensionBehaviour.MATCH_CONSTRAINT) {
                                        var5_16 = var6_17;
                                        if (var6_17 == 0) {
                                            var5_16 = 3;
                                        }
                                    }
                                    var6_17 = var7_18;
                                    if (var21_2.mListDimensionBehaviors[1] == DimensionBehaviour.MATCH_CONSTRAINT) {
                                        var6_17 = var7_18;
                                        if (var7_18 == 0) {
                                            var6_17 = 3;
                                        }
                                    }
                                    if (var21_2.mListDimensionBehaviors[0] != DimensionBehaviour.MATCH_CONSTRAINT || var21_2.mListDimensionBehaviors[1] != DimensionBehaviour.MATCH_CONSTRAINT || var5_16 != 3 || var6_17 != 3) break block21;
                                    var21_2.setupDimensionRatio(var11_10, var9_8, var13_12, var14_13);
                                    break block22;
                                }
                                if (var21_2.mListDimensionBehaviors[0] != DimensionBehaviour.MATCH_CONSTRAINT || var5_16 != 3) break block23;
                                var21_2.mResolvedDimensionRatioSide = 0;
                                var4_15 = (int)(var21_2.mResolvedDimensionRatio * (float)var21_2.mHeight);
                                if (var21_2.mListDimensionBehaviors[1] == DimensionBehaviour.MATCH_CONSTRAINT) break block22;
                                var7_18 = var3_14;
                                var5_16 = var6_17;
                                var3_14 = var8_20;
                                var6_17 = var7_18;
                                break block24;
                            }
                            if (var21_2.mListDimensionBehaviors[1] != DimensionBehaviour.MATCH_CONSTRAINT || var6_17 != 3) break block22;
                            var21_2.mResolvedDimensionRatioSide = 1;
                            if (var21_2.mDimensionRatioSide == -1) {
                                var21_2.mResolvedDimensionRatio = 1.0f / var21_2.mResolvedDimensionRatio;
                            }
                            var3_14 = (int)(var21_2.mResolvedDimensionRatio * (float)var21_2.mWidth);
                            if (var21_2.mListDimensionBehaviors[0] == DimensionBehaviour.MATCH_CONSTRAINT) break block22;
                            var6_17 = var3_14;
                            var3_14 = var5_16;
                            var5_16 = 4;
                            break block24;
                        }
                        var7_18 = 1;
                        var8_20 = var3_14;
                        break block25;
                    }
                    var5_16 = var3_14;
                    var3_14 = var6_17;
                    var6_17 = var5_16;
                    var5_16 = var7_18;
                }
                var7_18 = 0;
                var8_20 = var6_17;
                var6_17 = var5_16;
                var5_16 = var3_14;
            }
            var21_2.mResolvedMatchConstraintDefault[0] = var5_16;
            var21_2.mResolvedMatchConstraintDefault[1] = var6_17;
            var13_12 = var7_18 != 0 && (var21_2.mResolvedDimensionRatioSide == 0 || var21_2.mResolvedDimensionRatioSide == -1);
            var14_13 = var21_2.mListDimensionBehaviors[0] == DimensionBehaviour.WRAP_CONTENT && var21_2 instanceof ConstraintWidgetContainer != false;
            var15_21 = var21_2.mCenter.isConnected() ^ true;
            if (var21_2.mHorizontalResolution != 2) {
                var16_22 = var21_2.mParent != null ? var1_1.createObjectVariable(var21_2.mParent.mRight) : null;
                var17_23 = var21_2.mParent != null ? var1_1.createObjectVariable(var21_2.mParent.mLeft) : null;
                var21_2.applyConstraints(var1_1, var11_10, var17_23, (SolverVariable)var16_22, var21_2.mListDimensionBehaviors[0], var14_13, var21_2.mLeft, var21_2.mRight, var21_2.mX, var4_15, var21_2.mMinWidth, var21_2.mMaxDimension[0], var21_2.mHorizontalBiasPercent, var13_12, var12_11, var5_16, var21_2.mMatchConstraintMinWidth, var21_2.mMatchConstraintMaxWidth, var21_2.mMatchConstraintPercentWidth, var15_21);
            }
            var16_22 = var22_5;
            var17_23 = var20_7;
            var20_7 = this;
            if (var20_7.mVerticalResolution == 2) {
                return;
            }
            var11_10 = var20_7.mListDimensionBehaviors[1] == DimensionBehaviour.WRAP_CONTENT && var20_7 instanceof ConstraintWidgetContainer != false;
            var12_11 = var7_18 != 0 && (var20_7.mResolvedDimensionRatioSide == 1 || var20_7.mResolvedDimensionRatioSide == -1);
            if (var20_7.mBaselineDistance <= 0) ** GOTO lbl-1000
            if (var20_7.mBaseline.getResolutionNode().state != 1) break block26;
            var20_7.mBaseline.getResolutionNode().addResolvedValue(var1_1);
            ** GOTO lbl-1000
        }
        var21_2 = var1_1;
        var21_2.addEquality(var17_23, (SolverVariable)var16_22, this.getBaselineDistance(), 6);
        if (var20_7.mBaseline.mTarget != null) {
            var21_2.addEquality(var17_23, var21_2.createObjectVariable(var20_7.mBaseline.mTarget), 0, 6);
            var13_12 = false;
        } else lbl-1000: // 3 sources:
        {
            var13_12 = var15_21;
        }
        var22_5 = var1_1;
        var21_2 = var16_22;
        var16_22 = var20_7.mParent != null ? var22_5.createObjectVariable(var20_7.mParent.mBottom) : null;
        var17_23 = var20_7.mParent != null ? var22_5.createObjectVariable(var20_7.mParent.mTop) : null;
        ConstraintWidget.super.applyConstraints((LinearSystem)var22_5, var9_8, var17_23, (SolverVariable)var16_22, var20_7.mListDimensionBehaviors[1], var11_10, var20_7.mTop, var20_7.mBottom, var20_7.mY, var8_20, var20_7.mMinHeight, var20_7.mMaxDimension[1], var20_7.mVerticalBiasPercent, var12_11, var10_9, var6_17, var20_7.mMatchConstraintMinHeight, var20_7.mMatchConstraintMaxHeight, var20_7.mMatchConstraintPercentHeight, var13_12);
        if (var7_18 != 0) {
            var16_22 = this;
            if (var16_22.mResolvedDimensionRatioSide == 1) {
                var1_1.addRatio(var18_6, (SolverVariable)var21_2, var19_4, var23_3, var16_22.mResolvedDimensionRatio, 6);
            } else {
                var1_1.addRatio(var19_4, var23_3, var18_6, (SolverVariable)var21_2, var16_22.mResolvedDimensionRatio, 6);
            }
        }
        var16_22 = this;
        if (var16_22.mCenter.isConnected() == false) return;
        var1_1.addCenterPoint((ConstraintWidget)var16_22, var16_22.mCenter.getTarget().getOwner(), (float)Math.toRadians(var16_22.mCircleConstraintAngle + 90.0f), var16_22.mCenter.getMargin());
    }

    public boolean allowedInBarrier() {
        if (this.mVisibility != 8) {
            return true;
        }
        return false;
    }

    public void analyze(int n) {
        Optimizer.analyze(n, this);
    }

    public void connect(ConstraintAnchor.Type type, ConstraintWidget constraintWidget, ConstraintAnchor.Type type2) {
        this.connect(type, constraintWidget, type2, 0, ConstraintAnchor.Strength.STRONG);
    }

    public void connect(ConstraintAnchor.Type type, ConstraintWidget constraintWidget, ConstraintAnchor.Type type2, int n) {
        this.connect(type, constraintWidget, type2, n, ConstraintAnchor.Strength.STRONG);
    }

    public void connect(ConstraintAnchor.Type type, ConstraintWidget constraintWidget, ConstraintAnchor.Type type2, int n, ConstraintAnchor.Strength strength) {
        this.connect(type, constraintWidget, type2, n, strength, 0);
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    public void connect(ConstraintAnchor.Type object, ConstraintWidget object2, ConstraintAnchor.Type object3, int n, ConstraintAnchor.Strength strength, int n2) {
        Object object4 = ConstraintAnchor.Type.CENTER;
        int n3 = 0;
        if (object == object4) {
            if (object3 == ConstraintAnchor.Type.CENTER) {
                object = this.getAnchor(ConstraintAnchor.Type.LEFT);
                object3 = this.getAnchor(ConstraintAnchor.Type.RIGHT);
                object4 = this.getAnchor(ConstraintAnchor.Type.TOP);
                ConstraintAnchor constraintAnchor = this.getAnchor(ConstraintAnchor.Type.BOTTOM);
                n3 = 1;
                if (object != null && object.isConnected() || object3 != null && object3.isConnected()) {
                    n = 0;
                } else {
                    this.connect(ConstraintAnchor.Type.LEFT, (ConstraintWidget)object2, ConstraintAnchor.Type.LEFT, 0, strength, n2);
                    this.connect(ConstraintAnchor.Type.RIGHT, (ConstraintWidget)object2, ConstraintAnchor.Type.RIGHT, 0, strength, n2);
                    n = 1;
                }
                if (object4 != null && object4.isConnected() || constraintAnchor != null && constraintAnchor.isConnected()) {
                    n3 = 0;
                } else {
                    this.connect(ConstraintAnchor.Type.TOP, (ConstraintWidget)object2, ConstraintAnchor.Type.TOP, 0, strength, n2);
                    this.connect(ConstraintAnchor.Type.BOTTOM, (ConstraintWidget)object2, ConstraintAnchor.Type.BOTTOM, 0, strength, n2);
                }
                if (n != 0 && n3 != 0) {
                    this.getAnchor(ConstraintAnchor.Type.CENTER).connect(object2.getAnchor(ConstraintAnchor.Type.CENTER), 0, n2);
                    return;
                }
                if (n != 0) {
                    this.getAnchor(ConstraintAnchor.Type.CENTER_X).connect(object2.getAnchor(ConstraintAnchor.Type.CENTER_X), 0, n2);
                    return;
                }
                if (n3 == 0) return;
                this.getAnchor(ConstraintAnchor.Type.CENTER_Y).connect(object2.getAnchor(ConstraintAnchor.Type.CENTER_Y), 0, n2);
                return;
            }
            if (object3 != ConstraintAnchor.Type.LEFT && object3 != ConstraintAnchor.Type.RIGHT) {
                if (object3 != ConstraintAnchor.Type.TOP && object3 != ConstraintAnchor.Type.BOTTOM) return;
                this.connect(ConstraintAnchor.Type.TOP, (ConstraintWidget)object2, (ConstraintAnchor.Type)((Object)object3), 0, strength, n2);
                this.connect(ConstraintAnchor.Type.BOTTOM, (ConstraintWidget)object2, (ConstraintAnchor.Type)((Object)object3), 0, strength, n2);
                this.getAnchor(ConstraintAnchor.Type.CENTER).connect(object2.getAnchor((ConstraintAnchor.Type)((Object)object3)), 0, n2);
                return;
            }
            this.connect(ConstraintAnchor.Type.LEFT, (ConstraintWidget)object2, (ConstraintAnchor.Type)((Object)object3), 0, strength, n2);
            this.connect(ConstraintAnchor.Type.RIGHT, (ConstraintWidget)object2, (ConstraintAnchor.Type)((Object)object3), 0, strength, n2);
            this.getAnchor(ConstraintAnchor.Type.CENTER).connect(object2.getAnchor((ConstraintAnchor.Type)((Object)object3)), 0, n2);
            return;
        }
        if (object == ConstraintAnchor.Type.CENTER_X && (object3 == ConstraintAnchor.Type.LEFT || object3 == ConstraintAnchor.Type.RIGHT)) {
            object = this.getAnchor(ConstraintAnchor.Type.LEFT);
            object2 = object2.getAnchor((ConstraintAnchor.Type)((Object)object3));
            object3 = this.getAnchor(ConstraintAnchor.Type.RIGHT);
            object.connect((ConstraintAnchor)object2, 0, n2);
            object3.connect((ConstraintAnchor)object2, 0, n2);
            this.getAnchor(ConstraintAnchor.Type.CENTER_X).connect((ConstraintAnchor)object2, 0, n2);
            return;
        }
        if (object == ConstraintAnchor.Type.CENTER_Y && (object3 == ConstraintAnchor.Type.TOP || object3 == ConstraintAnchor.Type.BOTTOM)) {
            object = object2.getAnchor((ConstraintAnchor.Type)((Object)object3));
            this.getAnchor(ConstraintAnchor.Type.TOP).connect((ConstraintAnchor)object, 0, n2);
            this.getAnchor(ConstraintAnchor.Type.BOTTOM).connect((ConstraintAnchor)object, 0, n2);
            this.getAnchor(ConstraintAnchor.Type.CENTER_Y).connect((ConstraintAnchor)object, 0, n2);
            return;
        }
        if (object == ConstraintAnchor.Type.CENTER_X && object3 == ConstraintAnchor.Type.CENTER_X) {
            this.getAnchor(ConstraintAnchor.Type.LEFT).connect(object2.getAnchor(ConstraintAnchor.Type.LEFT), 0, n2);
            this.getAnchor(ConstraintAnchor.Type.RIGHT).connect(object2.getAnchor(ConstraintAnchor.Type.RIGHT), 0, n2);
            this.getAnchor(ConstraintAnchor.Type.CENTER_X).connect(object2.getAnchor((ConstraintAnchor.Type)((Object)object3)), 0, n2);
            return;
        }
        if (object == ConstraintAnchor.Type.CENTER_Y && object3 == ConstraintAnchor.Type.CENTER_Y) {
            this.getAnchor(ConstraintAnchor.Type.TOP).connect(object2.getAnchor(ConstraintAnchor.Type.TOP), 0, n2);
            this.getAnchor(ConstraintAnchor.Type.BOTTOM).connect(object2.getAnchor(ConstraintAnchor.Type.BOTTOM), 0, n2);
            this.getAnchor(ConstraintAnchor.Type.CENTER_Y).connect(object2.getAnchor((ConstraintAnchor.Type)((Object)object3)), 0, n2);
            return;
        }
        object4 = this.getAnchor((ConstraintAnchor.Type)((Object)object));
        if (!object4.isValidConnection((ConstraintAnchor)(object2 = object2.getAnchor((ConstraintAnchor.Type)((Object)object3))))) return;
        if (object == ConstraintAnchor.Type.BASELINE) {
            object = this.getAnchor(ConstraintAnchor.Type.TOP);
            object3 = this.getAnchor(ConstraintAnchor.Type.BOTTOM);
            if (object != null) {
                object.reset();
            }
            n = n3;
            if (object3 != null) {
                object3.reset();
                n = n3;
            }
        } else if (object != ConstraintAnchor.Type.TOP && object != ConstraintAnchor.Type.BOTTOM) {
            if (object == ConstraintAnchor.Type.LEFT || object == ConstraintAnchor.Type.RIGHT) {
                object3 = this.getAnchor(ConstraintAnchor.Type.CENTER);
                if (object3.getTarget() != object2) {
                    object3.reset();
                }
                object = this.getAnchor((ConstraintAnchor.Type)((Object)object)).getOpposite();
                object3 = this.getAnchor(ConstraintAnchor.Type.CENTER_X);
                if (object3.isConnected()) {
                    object.reset();
                    object3.reset();
                }
            }
        } else {
            object3 = this.getAnchor(ConstraintAnchor.Type.BASELINE);
            if (object3 != null) {
                object3.reset();
            }
            if ((object3 = this.getAnchor(ConstraintAnchor.Type.CENTER)).getTarget() != object2) {
                object3.reset();
            }
            object = this.getAnchor((ConstraintAnchor.Type)((Object)object)).getOpposite();
            object3 = this.getAnchor(ConstraintAnchor.Type.CENTER_Y);
            if (object3.isConnected()) {
                object.reset();
                object3.reset();
            }
        }
        object4.connect((ConstraintAnchor)object2, n, strength, n2);
        object2.getOwner().connectedTo(object4.getOwner());
    }

    public void connect(ConstraintAnchor constraintAnchor, ConstraintAnchor constraintAnchor2, int n) {
        this.connect(constraintAnchor, constraintAnchor2, n, ConstraintAnchor.Strength.STRONG, 0);
    }

    public void connect(ConstraintAnchor constraintAnchor, ConstraintAnchor constraintAnchor2, int n, int n2) {
        this.connect(constraintAnchor, constraintAnchor2, n, ConstraintAnchor.Strength.STRONG, n2);
    }

    public void connect(ConstraintAnchor constraintAnchor, ConstraintAnchor constraintAnchor2, int n, ConstraintAnchor.Strength strength, int n2) {
        if (constraintAnchor.getOwner() == this) {
            this.connect(constraintAnchor.getType(), constraintAnchor2.getOwner(), constraintAnchor2.getType(), n, strength, n2);
        }
    }

    public void connectCircularConstraint(ConstraintWidget constraintWidget, float f, int n) {
        this.immediateConnect(ConstraintAnchor.Type.CENTER, constraintWidget, ConstraintAnchor.Type.CENTER, n, 0);
        this.mCircleConstraintAngle = f;
    }

    public void connectedTo(ConstraintWidget constraintWidget) {
    }

    public void createObjectVariables(LinearSystem linearSystem) {
        linearSystem.createObjectVariable(this.mLeft);
        linearSystem.createObjectVariable(this.mTop);
        linearSystem.createObjectVariable(this.mRight);
        linearSystem.createObjectVariable(this.mBottom);
        if (this.mBaselineDistance > 0) {
            linearSystem.createObjectVariable(this.mBaseline);
        }
    }

    public void disconnectUnlockedWidget(ConstraintWidget constraintWidget) {
        ArrayList<ConstraintAnchor> arrayList = this.getAnchors();
        int n = arrayList.size();
        for (int i = 0; i < n; ++i) {
            ConstraintAnchor constraintAnchor = arrayList.get(i);
            if (!constraintAnchor.isConnected() || constraintAnchor.getTarget().getOwner() != constraintWidget || constraintAnchor.getConnectionCreator() != 2) continue;
            constraintAnchor.reset();
        }
    }

    public void disconnectWidget(ConstraintWidget constraintWidget) {
        ArrayList<ConstraintAnchor> arrayList = this.getAnchors();
        int n = arrayList.size();
        for (int i = 0; i < n; ++i) {
            ConstraintAnchor constraintAnchor = arrayList.get(i);
            if (!constraintAnchor.isConnected() || constraintAnchor.getTarget().getOwner() != constraintWidget) continue;
            constraintAnchor.reset();
        }
    }

    public void forceUpdateDrawPosition() {
        int n = this.mX;
        int n2 = this.mY;
        int n3 = this.mX;
        int n4 = this.mWidth;
        int n5 = this.mY;
        int n6 = this.mHeight;
        this.mDrawX = n;
        this.mDrawY = n2;
        this.mDrawWidth = n3 + n4 - n;
        this.mDrawHeight = n5 + n6 - n2;
    }

    public ConstraintAnchor getAnchor(ConstraintAnchor.Type type) {
        switch (.$SwitchMap$android$support$constraint$solver$widgets$ConstraintAnchor$Type[type.ordinal()]) {
            default: {
                throw new AssertionError((Object)type.name());
            }
            case 9: {
                return null;
            }
            case 8: {
                return this.mCenterY;
            }
            case 7: {
                return this.mCenterX;
            }
            case 6: {
                return this.mCenter;
            }
            case 5: {
                return this.mBaseline;
            }
            case 4: {
                return this.mBottom;
            }
            case 3: {
                return this.mRight;
            }
            case 2: {
                return this.mTop;
            }
            case 1: 
        }
        return this.mLeft;
    }

    public ArrayList<ConstraintAnchor> getAnchors() {
        return this.mAnchors;
    }

    public int getBaselineDistance() {
        return this.mBaselineDistance;
    }

    public int getBottom() {
        return this.getY() + this.mHeight;
    }

    public Object getCompanionWidget() {
        return this.mCompanionWidget;
    }

    public int getContainerItemSkip() {
        return this.mContainerItemSkip;
    }

    public String getDebugName() {
        return this.mDebugName;
    }

    public float getDimensionRatio() {
        return this.mDimensionRatio;
    }

    public int getDimensionRatioSide() {
        return this.mDimensionRatioSide;
    }

    public int getDrawBottom() {
        return this.getDrawY() + this.mDrawHeight;
    }

    public int getDrawHeight() {
        return this.mDrawHeight;
    }

    public int getDrawRight() {
        return this.getDrawX() + this.mDrawWidth;
    }

    public int getDrawWidth() {
        return this.mDrawWidth;
    }

    public int getDrawX() {
        return this.mDrawX + this.mOffsetX;
    }

    public int getDrawY() {
        return this.mDrawY + this.mOffsetY;
    }

    public int getHeight() {
        if (this.mVisibility == 8) {
            return 0;
        }
        return this.mHeight;
    }

    public float getHorizontalBiasPercent() {
        return this.mHorizontalBiasPercent;
    }

    public ConstraintWidget getHorizontalChainControlWidget() {
        Object object;
        if (this.isInHorizontalChain()) {
            Object object2 = this;
            Object object3 = null;
            do {
                object = object3;
                if (object3 == null) {
                    object = object3;
                    if (object2 != null) {
                        object = object2.getAnchor(ConstraintAnchor.Type.LEFT);
                        object = object == null ? null : object.getTarget();
                        object = object == null ? null : object.getOwner();
                        if (object == this.getParent()) {
                            return object2;
                        }
                        ConstraintAnchor constraintAnchor = object == null ? null : object.getAnchor(ConstraintAnchor.Type.RIGHT).getTarget();
                        if (constraintAnchor != null && constraintAnchor.getOwner() != object2) {
                            object3 = object2;
                            continue;
                        }
                        object2 = object;
                        continue;
                    }
                }
                break;
            } while (true);
        } else {
            object = null;
        }
        return object;
    }

    public int getHorizontalChainStyle() {
        return this.mHorizontalChainStyle;
    }

    public DimensionBehaviour getHorizontalDimensionBehaviour() {
        return this.mListDimensionBehaviors[0];
    }

    public int getInternalDrawBottom() {
        return this.mDrawY + this.mDrawHeight;
    }

    public int getInternalDrawRight() {
        return this.mDrawX + this.mDrawWidth;
    }

    int getInternalDrawX() {
        return this.mDrawX;
    }

    int getInternalDrawY() {
        return this.mDrawY;
    }

    public int getLeft() {
        return this.getX();
    }

    public int getMaxHeight() {
        return this.mMaxDimension[1];
    }

    public int getMaxWidth() {
        return this.mMaxDimension[0];
    }

    public int getMinHeight() {
        return this.mMinHeight;
    }

    public int getMinWidth() {
        return this.mMinWidth;
    }

    public int getOptimizerWrapHeight() {
        int n;
        int n2 = n = this.mHeight;
        if (this.mListDimensionBehaviors[1] == DimensionBehaviour.MATCH_CONSTRAINT) {
            if (this.mMatchConstraintDefaultHeight == 1) {
                n = Math.max(this.mMatchConstraintMinHeight, n);
            } else if (this.mMatchConstraintMinHeight > 0) {
                this.mHeight = n = this.mMatchConstraintMinHeight;
            } else {
                n = 0;
            }
            n2 = n;
            if (this.mMatchConstraintMaxHeight > 0) {
                n2 = n;
                if (this.mMatchConstraintMaxHeight < n) {
                    n2 = this.mMatchConstraintMaxHeight;
                }
            }
        }
        return n2;
    }

    public int getOptimizerWrapWidth() {
        int n;
        int n2 = n = this.mWidth;
        if (this.mListDimensionBehaviors[0] == DimensionBehaviour.MATCH_CONSTRAINT) {
            if (this.mMatchConstraintDefaultWidth == 1) {
                n = Math.max(this.mMatchConstraintMinWidth, n);
            } else if (this.mMatchConstraintMinWidth > 0) {
                this.mWidth = n = this.mMatchConstraintMinWidth;
            } else {
                n = 0;
            }
            n2 = n;
            if (this.mMatchConstraintMaxWidth > 0) {
                n2 = n;
                if (this.mMatchConstraintMaxWidth < n) {
                    n2 = this.mMatchConstraintMaxWidth;
                }
            }
        }
        return n2;
    }

    public ConstraintWidget getParent() {
        return this.mParent;
    }

    public ResolutionDimension getResolutionHeight() {
        if (this.mResolutionHeight == null) {
            this.mResolutionHeight = new ResolutionDimension();
        }
        return this.mResolutionHeight;
    }

    public ResolutionDimension getResolutionWidth() {
        if (this.mResolutionWidth == null) {
            this.mResolutionWidth = new ResolutionDimension();
        }
        return this.mResolutionWidth;
    }

    public int getRight() {
        return this.getX() + this.mWidth;
    }

    public WidgetContainer getRootWidgetContainer() {
        ConstraintWidget constraintWidget = this;
        while (constraintWidget.getParent() != null) {
            constraintWidget = constraintWidget.getParent();
        }
        if (constraintWidget instanceof WidgetContainer) {
            return (WidgetContainer)constraintWidget;
        }
        return null;
    }

    protected int getRootX() {
        return this.mX + this.mOffsetX;
    }

    protected int getRootY() {
        return this.mY + this.mOffsetY;
    }

    public int getTop() {
        return this.getY();
    }

    public String getType() {
        return this.mType;
    }

    public float getVerticalBiasPercent() {
        return this.mVerticalBiasPercent;
    }

    public ConstraintWidget getVerticalChainControlWidget() {
        Object object;
        if (this.isInVerticalChain()) {
            Object object2 = this;
            Object object3 = null;
            do {
                object = object3;
                if (object3 == null) {
                    object = object3;
                    if (object2 != null) {
                        object = object2.getAnchor(ConstraintAnchor.Type.TOP);
                        object = object == null ? null : object.getTarget();
                        object = object == null ? null : object.getOwner();
                        if (object == this.getParent()) {
                            return object2;
                        }
                        ConstraintAnchor constraintAnchor = object == null ? null : object.getAnchor(ConstraintAnchor.Type.BOTTOM).getTarget();
                        if (constraintAnchor != null && constraintAnchor.getOwner() != object2) {
                            object3 = object2;
                            continue;
                        }
                        object2 = object;
                        continue;
                    }
                }
                break;
            } while (true);
        } else {
            object = null;
        }
        return object;
    }

    public int getVerticalChainStyle() {
        return this.mVerticalChainStyle;
    }

    public DimensionBehaviour getVerticalDimensionBehaviour() {
        return this.mListDimensionBehaviors[1];
    }

    public int getVisibility() {
        return this.mVisibility;
    }

    public int getWidth() {
        if (this.mVisibility == 8) {
            return 0;
        }
        return this.mWidth;
    }

    public int getWrapHeight() {
        return this.mWrapHeight;
    }

    public int getWrapWidth() {
        return this.mWrapWidth;
    }

    public int getX() {
        return this.mX;
    }

    public int getY() {
        return this.mY;
    }

    public boolean hasAncestor(ConstraintWidget constraintWidget) {
        ConstraintWidget constraintWidget2 = this.getParent();
        if (constraintWidget2 == constraintWidget) {
            return true;
        }
        if (constraintWidget2 == constraintWidget.getParent()) {
            return false;
        }
        for (ConstraintWidget constraintWidget3 = constraintWidget2; constraintWidget3 != null; constraintWidget3 = constraintWidget3.getParent()) {
            if (constraintWidget3 == constraintWidget) {
                return true;
            }
            if (constraintWidget3 != constraintWidget.getParent()) continue;
            return true;
        }
        return false;
    }

    public boolean hasBaseline() {
        if (this.mBaselineDistance > 0) {
            return true;
        }
        return false;
    }

    public void immediateConnect(ConstraintAnchor.Type type, ConstraintWidget constraintWidget, ConstraintAnchor.Type type2, int n, int n2) {
        this.getAnchor(type).connect(constraintWidget.getAnchor(type2), n, n2, ConstraintAnchor.Strength.STRONG, 0, true);
    }

    public boolean isFullyResolved() {
        if (this.mLeft.getResolutionNode().state == 1 && this.mRight.getResolutionNode().state == 1 && this.mTop.getResolutionNode().state == 1 && this.mBottom.getResolutionNode().state == 1) {
            return true;
        }
        return false;
    }

    public boolean isHeightWrapContent() {
        return this.mIsHeightWrapContent;
    }

    public boolean isInHorizontalChain() {
        if (this.mLeft.mTarget != null && this.mLeft.mTarget.mTarget == this.mLeft || this.mRight.mTarget != null && this.mRight.mTarget.mTarget == this.mRight) {
            return true;
        }
        return false;
    }

    public boolean isInVerticalChain() {
        if (this.mTop.mTarget != null && this.mTop.mTarget.mTarget == this.mTop || this.mBottom.mTarget != null && this.mBottom.mTarget.mTarget == this.mBottom) {
            return true;
        }
        return false;
    }

    public boolean isInsideConstraintLayout() {
        ConstraintWidget constraintWidget;
        if (constraintWidget == null) {
            return false;
        }
        for (ConstraintWidget constraintWidget2 = constraintWidget = this.getParent(); constraintWidget2 != null; constraintWidget2 = constraintWidget2.getParent()) {
            if (!(constraintWidget2 instanceof ConstraintWidgetContainer)) continue;
            return true;
        }
        return false;
    }

    public boolean isRoot() {
        if (this.mParent == null) {
            return true;
        }
        return false;
    }

    public boolean isRootContainer() {
        if (this instanceof ConstraintWidgetContainer && (this.mParent == null || !(this.mParent instanceof ConstraintWidgetContainer))) {
            return true;
        }
        return false;
    }

    public boolean isSpreadHeight() {
        if (this.mMatchConstraintDefaultHeight == 0 && this.mDimensionRatio == 0.0f && this.mMatchConstraintMinHeight == 0 && this.mMatchConstraintMaxHeight == 0 && this.mListDimensionBehaviors[1] == DimensionBehaviour.MATCH_CONSTRAINT) {
            return true;
        }
        return false;
    }

    public boolean isSpreadWidth() {
        boolean bl;
        int n = this.mMatchConstraintDefaultWidth;
        boolean bl2 = bl = false;
        if (n == 0) {
            bl2 = bl;
            if (this.mDimensionRatio == 0.0f) {
                bl2 = bl;
                if (this.mMatchConstraintMinWidth == 0) {
                    bl2 = bl;
                    if (this.mMatchConstraintMaxWidth == 0) {
                        bl2 = bl;
                        if (this.mListDimensionBehaviors[0] == DimensionBehaviour.MATCH_CONSTRAINT) {
                            bl2 = true;
                        }
                    }
                }
            }
        }
        return bl2;
    }

    public boolean isWidthWrapContent() {
        return this.mIsWidthWrapContent;
    }

    public void reset() {
        this.mLeft.reset();
        this.mTop.reset();
        this.mRight.reset();
        this.mBottom.reset();
        this.mBaseline.reset();
        this.mCenterX.reset();
        this.mCenterY.reset();
        this.mCenter.reset();
        this.mParent = null;
        this.mCircleConstraintAngle = 0.0f;
        this.mWidth = 0;
        this.mHeight = 0;
        this.mDimensionRatio = 0.0f;
        this.mDimensionRatioSide = -1;
        this.mX = 0;
        this.mY = 0;
        this.mDrawX = 0;
        this.mDrawY = 0;
        this.mDrawWidth = 0;
        this.mDrawHeight = 0;
        this.mOffsetX = 0;
        this.mOffsetY = 0;
        this.mBaselineDistance = 0;
        this.mMinWidth = 0;
        this.mMinHeight = 0;
        this.mWrapWidth = 0;
        this.mWrapHeight = 0;
        this.mHorizontalBiasPercent = DEFAULT_BIAS;
        this.mVerticalBiasPercent = DEFAULT_BIAS;
        this.mListDimensionBehaviors[0] = DimensionBehaviour.FIXED;
        this.mListDimensionBehaviors[1] = DimensionBehaviour.FIXED;
        this.mCompanionWidget = null;
        this.mContainerItemSkip = 0;
        this.mVisibility = 0;
        this.mType = null;
        this.mHorizontalWrapVisited = false;
        this.mVerticalWrapVisited = false;
        this.mHorizontalChainStyle = 0;
        this.mVerticalChainStyle = 0;
        this.mHorizontalChainFixedPosition = false;
        this.mVerticalChainFixedPosition = false;
        this.mWeight[0] = -1.0f;
        this.mWeight[1] = -1.0f;
        this.mHorizontalResolution = -1;
        this.mVerticalResolution = -1;
        this.mMaxDimension[0] = Integer.MAX_VALUE;
        this.mMaxDimension[1] = Integer.MAX_VALUE;
        this.mMatchConstraintDefaultWidth = 0;
        this.mMatchConstraintDefaultHeight = 0;
        this.mMatchConstraintPercentWidth = 1.0f;
        this.mMatchConstraintPercentHeight = 1.0f;
        this.mMatchConstraintMaxWidth = Integer.MAX_VALUE;
        this.mMatchConstraintMaxHeight = Integer.MAX_VALUE;
        this.mMatchConstraintMinWidth = 0;
        this.mMatchConstraintMinHeight = 0;
        this.mResolvedDimensionRatioSide = -1;
        this.mResolvedDimensionRatio = 1.0f;
        if (this.mResolutionWidth != null) {
            this.mResolutionWidth.reset();
        }
        if (this.mResolutionHeight != null) {
            this.mResolutionHeight.reset();
        }
    }

    public void resetAllConstraints() {
        this.resetAnchors();
        this.setVerticalBiasPercent(DEFAULT_BIAS);
        this.setHorizontalBiasPercent(DEFAULT_BIAS);
        if (this instanceof ConstraintWidgetContainer) {
            return;
        }
        if (this.getHorizontalDimensionBehaviour() == DimensionBehaviour.MATCH_CONSTRAINT) {
            if (this.getWidth() == this.getWrapWidth()) {
                this.setHorizontalDimensionBehaviour(DimensionBehaviour.WRAP_CONTENT);
            } else if (this.getWidth() > this.getMinWidth()) {
                this.setHorizontalDimensionBehaviour(DimensionBehaviour.FIXED);
            }
        }
        if (this.getVerticalDimensionBehaviour() == DimensionBehaviour.MATCH_CONSTRAINT) {
            if (this.getHeight() == this.getWrapHeight()) {
                this.setVerticalDimensionBehaviour(DimensionBehaviour.WRAP_CONTENT);
                return;
            }
            if (this.getHeight() > this.getMinHeight()) {
                this.setVerticalDimensionBehaviour(DimensionBehaviour.FIXED);
            }
        }
    }

    public void resetAnchor(ConstraintAnchor constraintAnchor) {
        if (this.getParent() != null && this.getParent() instanceof ConstraintWidgetContainer && ((ConstraintWidgetContainer)this.getParent()).handlesInternalConstraints()) {
            return;
        }
        ConstraintAnchor constraintAnchor2 = this.getAnchor(ConstraintAnchor.Type.LEFT);
        ConstraintAnchor constraintAnchor3 = this.getAnchor(ConstraintAnchor.Type.RIGHT);
        ConstraintAnchor constraintAnchor4 = this.getAnchor(ConstraintAnchor.Type.TOP);
        ConstraintAnchor constraintAnchor5 = this.getAnchor(ConstraintAnchor.Type.BOTTOM);
        ConstraintAnchor constraintAnchor6 = this.getAnchor(ConstraintAnchor.Type.CENTER);
        ConstraintAnchor constraintAnchor7 = this.getAnchor(ConstraintAnchor.Type.CENTER_X);
        ConstraintAnchor constraintAnchor8 = this.getAnchor(ConstraintAnchor.Type.CENTER_Y);
        if (constraintAnchor == constraintAnchor6) {
            if (constraintAnchor2.isConnected() && constraintAnchor3.isConnected() && constraintAnchor2.getTarget() == constraintAnchor3.getTarget()) {
                constraintAnchor2.reset();
                constraintAnchor3.reset();
            }
            if (constraintAnchor4.isConnected() && constraintAnchor5.isConnected() && constraintAnchor4.getTarget() == constraintAnchor5.getTarget()) {
                constraintAnchor4.reset();
                constraintAnchor5.reset();
            }
            this.mHorizontalBiasPercent = 0.5f;
            this.mVerticalBiasPercent = 0.5f;
        } else if (constraintAnchor == constraintAnchor7) {
            if (constraintAnchor2.isConnected() && constraintAnchor3.isConnected() && constraintAnchor2.getTarget().getOwner() == constraintAnchor3.getTarget().getOwner()) {
                constraintAnchor2.reset();
                constraintAnchor3.reset();
            }
            this.mHorizontalBiasPercent = 0.5f;
        } else if (constraintAnchor == constraintAnchor8) {
            if (constraintAnchor4.isConnected() && constraintAnchor5.isConnected() && constraintAnchor4.getTarget().getOwner() == constraintAnchor5.getTarget().getOwner()) {
                constraintAnchor4.reset();
                constraintAnchor5.reset();
            }
            this.mVerticalBiasPercent = 0.5f;
        } else if (constraintAnchor != constraintAnchor2 && constraintAnchor != constraintAnchor3) {
            if ((constraintAnchor == constraintAnchor4 || constraintAnchor == constraintAnchor5) && constraintAnchor4.isConnected() && constraintAnchor4.getTarget() == constraintAnchor5.getTarget()) {
                constraintAnchor6.reset();
            }
        } else if (constraintAnchor2.isConnected() && constraintAnchor2.getTarget() == constraintAnchor3.getTarget()) {
            constraintAnchor6.reset();
        }
        constraintAnchor.reset();
    }

    public void resetAnchors() {
        ConstraintWidget constraintWidget = this.getParent();
        if (constraintWidget != null && constraintWidget instanceof ConstraintWidgetContainer && ((ConstraintWidgetContainer)this.getParent()).handlesInternalConstraints()) {
            return;
        }
        int n = this.mAnchors.size();
        for (int i = 0; i < n; ++i) {
            this.mAnchors.get(i).reset();
        }
    }

    public void resetAnchors(int n) {
        Object object = this.getParent();
        if (object != null && object instanceof ConstraintWidgetContainer && ((ConstraintWidgetContainer)this.getParent()).handlesInternalConstraints()) {
            return;
        }
        int n2 = this.mAnchors.size();
        for (int i = 0; i < n2; ++i) {
            object = this.mAnchors.get(i);
            if (n != object.getConnectionCreator()) continue;
            if (object.isVerticalAnchor()) {
                this.setVerticalBiasPercent(DEFAULT_BIAS);
            } else {
                this.setHorizontalBiasPercent(DEFAULT_BIAS);
            }
            object.reset();
        }
    }

    public void resetResolutionNodes() {
        for (int i = 0; i < 6; ++i) {
            this.mListAnchors[i].getResolutionNode().reset();
        }
    }

    public void resetSolverVariables(Cache cache) {
        this.mLeft.resetSolverVariable(cache);
        this.mTop.resetSolverVariable(cache);
        this.mRight.resetSolverVariable(cache);
        this.mBottom.resetSolverVariable(cache);
        this.mBaseline.resetSolverVariable(cache);
        this.mCenter.resetSolverVariable(cache);
        this.mCenterX.resetSolverVariable(cache);
        this.mCenterY.resetSolverVariable(cache);
    }

    public void resolve() {
    }

    public void setBaselineDistance(int n) {
        this.mBaselineDistance = n;
    }

    public void setCompanionWidget(Object object) {
        this.mCompanionWidget = object;
    }

    public void setContainerItemSkip(int n) {
        if (n >= 0) {
            this.mContainerItemSkip = n;
            return;
        }
        this.mContainerItemSkip = 0;
    }

    public void setDebugName(String string2) {
        this.mDebugName = string2;
    }

    public void setDebugSolverName(LinearSystem object, String string2) {
        this.mDebugName = string2;
        Object object2 = object.createObjectVariable(this.mLeft);
        Object object3 = object.createObjectVariable(this.mTop);
        Object object4 = object.createObjectVariable(this.mRight);
        Object object5 = object.createObjectVariable(this.mBottom);
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append(string2);
        stringBuilder.append(".left");
        object2.setName(stringBuilder.toString());
        object2 = new StringBuilder();
        object2.append(string2);
        object2.append(".top");
        object3.setName(object2.toString());
        object3 = new StringBuilder();
        object3.append(string2);
        object3.append(".right");
        object4.setName(object3.toString());
        object4 = new StringBuilder();
        object4.append(string2);
        object4.append(".bottom");
        object5.setName(object4.toString());
        if (this.mBaselineDistance > 0) {
            object = object.createObjectVariable(this.mBaseline);
            object5 = new StringBuilder();
            object5.append(string2);
            object5.append(".baseline");
            object.setName(object5.toString());
        }
    }

    public void setDimension(int n, int n2) {
        this.mWidth = n;
        if (this.mWidth < this.mMinWidth) {
            this.mWidth = this.mMinWidth;
        }
        this.mHeight = n2;
        if (this.mHeight < this.mMinHeight) {
            this.mHeight = this.mMinHeight;
        }
    }

    public void setDimensionRatio(float f, int n) {
        this.mDimensionRatio = f;
        this.mDimensionRatioSide = n;
    }

    /*
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    public void setDimensionRatio(String string2) {
        int n;
        float f;
        block16 : {
            block15 : {
                if (string2 != null && string2.length() != 0) {
                    String string3;
                    int n2 = -1;
                    int n3 = string2.length();
                    int n4 = string2.indexOf(44);
                    int n5 = 0;
                    n = n2;
                    int n6 = n5;
                    if (n4 > 0) {
                        n = n2;
                        n6 = n5;
                        if (n4 < n3 - 1) {
                            string3 = string2.substring(0, n4);
                            if (string3.equalsIgnoreCase("W")) {
                                n = 0;
                            } else {
                                n = n2;
                                if (string3.equalsIgnoreCase("H")) {
                                    n = 1;
                                }
                            }
                            n6 = n4 + 1;
                        }
                    }
                    if ((n2 = string2.indexOf(58)) >= 0 && n2 < n3 - 1) {
                        string3 = string2.substring(n6, n2);
                        string2 = string2.substring(n2 + 1);
                        if (string3.length() > 0 && string2.length() > 0) {
                            f = Float.parseFloat(string3);
                            float f2 = Float.parseFloat(string2);
                            if (f <= 0.0f || f2 <= 0.0f) break block15;
                            f = n == 1 ? Math.abs(f2 / f) : Math.abs(f / f2);
                            break block16;
                        }
                    } else if ((string2 = string2.substring(n6)).length() > 0) {
                        f = Float.parseFloat(string2);
                        break block16;
                    }
                } else {
                    this.mDimensionRatio = 0.0f;
                    return;
                    catch (NumberFormatException numberFormatException) {}
                }
            }
            f = 0.0f;
        }
        if (f <= 0.0f) return;
        this.mDimensionRatio = f;
        this.mDimensionRatioSide = n;
    }

    public void setDrawHeight(int n) {
        this.mDrawHeight = n;
    }

    public void setDrawOrigin(int n, int n2) {
        this.mDrawX = n - this.mOffsetX;
        this.mDrawY = n2 - this.mOffsetY;
        this.mX = this.mDrawX;
        this.mY = this.mDrawY;
    }

    public void setDrawWidth(int n) {
        this.mDrawWidth = n;
    }

    public void setDrawX(int n) {
        this.mX = this.mDrawX = n - this.mOffsetX;
    }

    public void setDrawY(int n) {
        this.mY = this.mDrawY = n - this.mOffsetY;
    }

    public void setFrame(int n, int n2, int n3, int n4) {
        int n5 = n3 - n;
        n3 = n4 - n2;
        this.mX = n;
        this.mY = n2;
        if (this.mVisibility == 8) {
            this.mWidth = 0;
            this.mHeight = 0;
            return;
        }
        n = n5;
        if (this.mListDimensionBehaviors[0] == DimensionBehaviour.FIXED) {
            n = n5;
            if (n5 < this.mWidth) {
                n = this.mWidth;
            }
        }
        n2 = n3;
        if (this.mListDimensionBehaviors[1] == DimensionBehaviour.FIXED) {
            n2 = n3;
            if (n3 < this.mHeight) {
                n2 = this.mHeight;
            }
        }
        this.mWidth = n;
        this.mHeight = n2;
        if (this.mHeight < this.mMinHeight) {
            this.mHeight = this.mMinHeight;
        }
        if (this.mWidth < this.mMinWidth) {
            this.mWidth = this.mMinWidth;
        }
    }

    public void setGoneMargin(ConstraintAnchor.Type type, int n) {
        switch (.$SwitchMap$android$support$constraint$solver$widgets$ConstraintAnchor$Type[type.ordinal()]) {
            default: {
                return;
            }
            case 4: {
                this.mBottom.mGoneMargin = n;
                return;
            }
            case 3: {
                this.mRight.mGoneMargin = n;
                return;
            }
            case 2: {
                this.mTop.mGoneMargin = n;
                return;
            }
            case 1: 
        }
        this.mLeft.mGoneMargin = n;
    }

    public void setHeight(int n) {
        this.mHeight = n;
        if (this.mHeight < this.mMinHeight) {
            this.mHeight = this.mMinHeight;
        }
    }

    public void setHeightWrapContent(boolean bl) {
        this.mIsHeightWrapContent = bl;
    }

    public void setHorizontalBiasPercent(float f) {
        this.mHorizontalBiasPercent = f;
    }

    public void setHorizontalChainStyle(int n) {
        this.mHorizontalChainStyle = n;
    }

    public void setHorizontalDimension(int n, int n2) {
        this.mX = n;
        this.mWidth = n2 - n;
        if (this.mWidth < this.mMinWidth) {
            this.mWidth = this.mMinWidth;
        }
    }

    public void setHorizontalDimensionBehaviour(DimensionBehaviour dimensionBehaviour) {
        this.mListDimensionBehaviors[0] = dimensionBehaviour;
        if (dimensionBehaviour == DimensionBehaviour.WRAP_CONTENT) {
            this.setWidth(this.mWrapWidth);
        }
    }

    public void setHorizontalMatchStyle(int n, int n2, int n3, float f) {
        this.mMatchConstraintDefaultWidth = n;
        this.mMatchConstraintMinWidth = n2;
        this.mMatchConstraintMaxWidth = n3;
        this.mMatchConstraintPercentWidth = f;
        if (f < 1.0f && this.mMatchConstraintDefaultWidth == 0) {
            this.mMatchConstraintDefaultWidth = 2;
        }
    }

    public void setHorizontalWeight(float f) {
        this.mWeight[0] = f;
    }

    public void setMaxHeight(int n) {
        this.mMaxDimension[1] = n;
    }

    public void setMaxWidth(int n) {
        this.mMaxDimension[0] = n;
    }

    public void setMinHeight(int n) {
        if (n < 0) {
            this.mMinHeight = 0;
            return;
        }
        this.mMinHeight = n;
    }

    public void setMinWidth(int n) {
        if (n < 0) {
            this.mMinWidth = 0;
            return;
        }
        this.mMinWidth = n;
    }

    public void setOffset(int n, int n2) {
        this.mOffsetX = n;
        this.mOffsetY = n2;
    }

    public void setOrigin(int n, int n2) {
        this.mX = n;
        this.mY = n2;
    }

    public void setParent(ConstraintWidget constraintWidget) {
        this.mParent = constraintWidget;
    }

    public void setType(String string2) {
        this.mType = string2;
    }

    public void setVerticalBiasPercent(float f) {
        this.mVerticalBiasPercent = f;
    }

    public void setVerticalChainStyle(int n) {
        this.mVerticalChainStyle = n;
    }

    public void setVerticalDimension(int n, int n2) {
        this.mY = n;
        this.mHeight = n2 - n;
        if (this.mHeight < this.mMinHeight) {
            this.mHeight = this.mMinHeight;
        }
    }

    public void setVerticalDimensionBehaviour(DimensionBehaviour dimensionBehaviour) {
        this.mListDimensionBehaviors[1] = dimensionBehaviour;
        if (dimensionBehaviour == DimensionBehaviour.WRAP_CONTENT) {
            this.setHeight(this.mWrapHeight);
        }
    }

    public void setVerticalMatchStyle(int n, int n2, int n3, float f) {
        this.mMatchConstraintDefaultHeight = n;
        this.mMatchConstraintMinHeight = n2;
        this.mMatchConstraintMaxHeight = n3;
        this.mMatchConstraintPercentHeight = f;
        if (f < 1.0f && this.mMatchConstraintDefaultHeight == 0) {
            this.mMatchConstraintDefaultHeight = 2;
        }
    }

    public void setVerticalWeight(float f) {
        this.mWeight[1] = f;
    }

    public void setVisibility(int n) {
        this.mVisibility = n;
    }

    public void setWidth(int n) {
        this.mWidth = n;
        if (this.mWidth < this.mMinWidth) {
            this.mWidth = this.mMinWidth;
        }
    }

    public void setWidthWrapContent(boolean bl) {
        this.mIsWidthWrapContent = bl;
    }

    public void setWrapHeight(int n) {
        this.mWrapHeight = n;
    }

    public void setWrapWidth(int n) {
        this.mWrapWidth = n;
    }

    public void setX(int n) {
        this.mX = n;
    }

    public void setY(int n) {
        this.mY = n;
    }

    public void setupDimensionRatio(boolean bl, boolean bl2, boolean bl3, boolean bl4) {
        if (this.mResolvedDimensionRatioSide == -1) {
            if (bl3 && !bl4) {
                this.mResolvedDimensionRatioSide = 0;
            } else if (!bl3 && bl4) {
                this.mResolvedDimensionRatioSide = 1;
                if (this.mDimensionRatioSide == -1) {
                    this.mResolvedDimensionRatio = 1.0f / this.mResolvedDimensionRatio;
                }
            }
        }
        if (!(this.mResolvedDimensionRatioSide != 0 || this.mTop.isConnected() && this.mBottom.isConnected())) {
            this.mResolvedDimensionRatioSide = 1;
        } else if (!(this.mResolvedDimensionRatioSide != 1 || this.mLeft.isConnected() && this.mRight.isConnected())) {
            this.mResolvedDimensionRatioSide = 0;
        }
        if (!(this.mResolvedDimensionRatioSide != -1 || this.mTop.isConnected() && this.mBottom.isConnected() && this.mLeft.isConnected() && this.mRight.isConnected())) {
            if (this.mTop.isConnected() && this.mBottom.isConnected()) {
                this.mResolvedDimensionRatioSide = 0;
            } else if (this.mLeft.isConnected() && this.mRight.isConnected()) {
                this.mResolvedDimensionRatio = 1.0f / this.mResolvedDimensionRatio;
                this.mResolvedDimensionRatioSide = 1;
            }
        }
        if (this.mResolvedDimensionRatioSide == -1) {
            if (bl && !bl2) {
                this.mResolvedDimensionRatioSide = 0;
            } else if (!bl && bl2) {
                this.mResolvedDimensionRatio = 1.0f / this.mResolvedDimensionRatio;
                this.mResolvedDimensionRatioSide = 1;
            }
        }
        if (this.mResolvedDimensionRatioSide == -1) {
            if (this.mMatchConstraintMinWidth > 0 && this.mMatchConstraintMinHeight == 0) {
                this.mResolvedDimensionRatioSide = 0;
            } else if (this.mMatchConstraintMinWidth == 0 && this.mMatchConstraintMinHeight > 0) {
                this.mResolvedDimensionRatio = 1.0f / this.mResolvedDimensionRatio;
                this.mResolvedDimensionRatioSide = 1;
            }
        }
        if (this.mResolvedDimensionRatioSide == -1 && bl && bl2) {
            this.mResolvedDimensionRatio = 1.0f / this.mResolvedDimensionRatio;
            this.mResolvedDimensionRatioSide = 1;
        }
    }

    public String toString() {
        CharSequence charSequence;
        StringBuilder stringBuilder = new StringBuilder();
        if (this.mType != null) {
            charSequence = new StringBuilder();
            charSequence.append("type: ");
            charSequence.append(this.mType);
            charSequence.append(" ");
            charSequence = charSequence.toString();
        } else {
            charSequence = "";
        }
        stringBuilder.append((String)charSequence);
        if (this.mDebugName != null) {
            charSequence = new StringBuilder();
            charSequence.append("id: ");
            charSequence.append(this.mDebugName);
            charSequence.append(" ");
            charSequence = charSequence.toString();
        } else {
            charSequence = "";
        }
        stringBuilder.append((String)charSequence);
        stringBuilder.append("(");
        stringBuilder.append(this.mX);
        stringBuilder.append(", ");
        stringBuilder.append(this.mY);
        stringBuilder.append(") - (");
        stringBuilder.append(this.mWidth);
        stringBuilder.append(" x ");
        stringBuilder.append(this.mHeight);
        stringBuilder.append(") wrap: (");
        stringBuilder.append(this.mWrapWidth);
        stringBuilder.append(" x ");
        stringBuilder.append(this.mWrapHeight);
        stringBuilder.append(")");
        return stringBuilder.toString();
    }

    public void updateDrawPosition() {
        int n = this.mX;
        int n2 = this.mY;
        int n3 = this.mX;
        int n4 = this.mWidth;
        int n5 = this.mY;
        int n6 = this.mHeight;
        this.mDrawX = n;
        this.mDrawY = n2;
        this.mDrawWidth = n3 + n4 - n;
        this.mDrawHeight = n5 + n6 - n2;
    }

    public void updateFromSolver(LinearSystem linearSystem) {
        int n;
        int n2;
        int n3;
        int n4;
        block3 : {
            block2 : {
                n = linearSystem.getObjectVariableValue(this.mLeft);
                n3 = linearSystem.getObjectVariableValue(this.mTop);
                n4 = linearSystem.getObjectVariableValue(this.mRight);
                int n5 = linearSystem.getObjectVariableValue(this.mBottom);
                if (n4 - n < 0 || n5 - n3 < 0 || n == Integer.MIN_VALUE || n == Integer.MAX_VALUE || n3 == Integer.MIN_VALUE || n3 == Integer.MAX_VALUE || n4 == Integer.MIN_VALUE || n4 == Integer.MAX_VALUE || n5 == Integer.MIN_VALUE) break block2;
                n2 = n5;
                if (n5 != Integer.MAX_VALUE) break block3;
            }
            n2 = 0;
            n = 0;
            n3 = 0;
            n4 = 0;
        }
        this.setFrame(n, n3, n4, n2);
    }

    public void updateResolutionNodes() {
        for (int i = 0; i < 6; ++i) {
            this.mListAnchors[i].getResolutionNode().update();
        }
    }

    public static enum ContentAlignment {
        BEGIN,
        MIDDLE,
        END,
        TOP,
        VERTICAL_MIDDLE,
        BOTTOM,
        LEFT,
        RIGHT;
        

        private ContentAlignment() {
        }
    }

    public static enum DimensionBehaviour {
        FIXED,
        WRAP_CONTENT,
        MATCH_CONSTRAINT,
        MATCH_PARENT;
        

        private DimensionBehaviour() {
        }
    }

}

