/*
 * Decompiled with CFR 0_132.
 */
package android.support.constraint.solver.widgets;

import android.support.constraint.solver.Cache;
import android.support.constraint.solver.LinearSystem;
import android.support.constraint.solver.Metrics;
import android.support.constraint.solver.widgets.Chain;
import android.support.constraint.solver.widgets.ChainHead;
import android.support.constraint.solver.widgets.ConstraintAnchor;
import android.support.constraint.solver.widgets.ConstraintWidget;
import android.support.constraint.solver.widgets.Guideline;
import android.support.constraint.solver.widgets.Optimizer;
import android.support.constraint.solver.widgets.ResolutionAnchor;
import android.support.constraint.solver.widgets.ResolutionDimension;
import android.support.constraint.solver.widgets.Snapshot;
import android.support.constraint.solver.widgets.WidgetContainer;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.Arrays;

public class ConstraintWidgetContainer
extends WidgetContainer {
    private static final boolean DEBUG = false;
    static final boolean DEBUG_GRAPH = false;
    private static final boolean DEBUG_LAYOUT = false;
    private static final int MAX_ITERATIONS = 8;
    private static final boolean USE_SNAPSHOT = true;
    int mDebugSolverPassCount = 0;
    private boolean mHeightMeasuredTooSmall = false;
    ChainHead[] mHorizontalChainsArray = new ChainHead[4];
    int mHorizontalChainsSize = 0;
    private boolean mIsRtl = false;
    private int mOptimizationLevel = 3;
    int mPaddingBottom;
    int mPaddingLeft;
    int mPaddingRight;
    int mPaddingTop;
    private Snapshot mSnapshot;
    protected LinearSystem mSystem = new LinearSystem();
    ChainHead[] mVerticalChainsArray = new ChainHead[4];
    int mVerticalChainsSize = 0;
    private boolean mWidthMeasuredTooSmall = false;

    public ConstraintWidgetContainer() {
    }

    public ConstraintWidgetContainer(int n, int n2) {
        super(n, n2);
    }

    public ConstraintWidgetContainer(int n, int n2, int n3, int n4) {
        super(n, n2, n3, n4);
    }

    private void addHorizontalChain(ConstraintWidget constraintWidget) {
        if (this.mHorizontalChainsSize + 1 >= this.mHorizontalChainsArray.length) {
            this.mHorizontalChainsArray = Arrays.copyOf(this.mHorizontalChainsArray, this.mHorizontalChainsArray.length * 2);
        }
        this.mHorizontalChainsArray[this.mHorizontalChainsSize] = new ChainHead(constraintWidget, 0, this.isRtl());
        ++this.mHorizontalChainsSize;
    }

    private void addVerticalChain(ConstraintWidget constraintWidget) {
        if (this.mVerticalChainsSize + 1 >= this.mVerticalChainsArray.length) {
            this.mVerticalChainsArray = Arrays.copyOf(this.mVerticalChainsArray, this.mVerticalChainsArray.length * 2);
        }
        this.mVerticalChainsArray[this.mVerticalChainsSize] = new ChainHead(constraintWidget, 1, this.isRtl());
        ++this.mVerticalChainsSize;
    }

    private void resetChains() {
        this.mHorizontalChainsSize = 0;
        this.mVerticalChainsSize = 0;
    }

    void addChain(ConstraintWidget constraintWidget, int n) {
        if (n == 0) {
            this.addHorizontalChain(constraintWidget);
            return;
        }
        if (n == 1) {
            this.addVerticalChain(constraintWidget);
        }
    }

    public boolean addChildrenToSolver(LinearSystem linearSystem) {
        this.addToSolver(linearSystem);
        int n = this.mChildren.size();
        for (int i = 0; i < n; ++i) {
            ConstraintWidget constraintWidget = (ConstraintWidget)this.mChildren.get(i);
            if (constraintWidget instanceof ConstraintWidgetContainer) {
                ConstraintWidget.DimensionBehaviour dimensionBehaviour = constraintWidget.mListDimensionBehaviors[0];
                ConstraintWidget.DimensionBehaviour dimensionBehaviour2 = constraintWidget.mListDimensionBehaviors[1];
                if (dimensionBehaviour == ConstraintWidget.DimensionBehaviour.WRAP_CONTENT) {
                    constraintWidget.setHorizontalDimensionBehaviour(ConstraintWidget.DimensionBehaviour.FIXED);
                }
                if (dimensionBehaviour2 == ConstraintWidget.DimensionBehaviour.WRAP_CONTENT) {
                    constraintWidget.setVerticalDimensionBehaviour(ConstraintWidget.DimensionBehaviour.FIXED);
                }
                constraintWidget.addToSolver(linearSystem);
                if (dimensionBehaviour == ConstraintWidget.DimensionBehaviour.WRAP_CONTENT) {
                    constraintWidget.setHorizontalDimensionBehaviour(dimensionBehaviour);
                }
                if (dimensionBehaviour2 != ConstraintWidget.DimensionBehaviour.WRAP_CONTENT) continue;
                constraintWidget.setVerticalDimensionBehaviour(dimensionBehaviour2);
                continue;
            }
            Optimizer.checkMatchParent(this, linearSystem, constraintWidget);
            constraintWidget.addToSolver(linearSystem);
        }
        if (this.mHorizontalChainsSize > 0) {
            Chain.applyChainConstraints(this, linearSystem, 0);
        }
        if (this.mVerticalChainsSize > 0) {
            Chain.applyChainConstraints(this, linearSystem, 1);
        }
        return true;
    }

    @Override
    public void analyze(int n) {
        super.analyze(n);
        int n2 = this.mChildren.size();
        for (int i = 0; i < n2; ++i) {
            ((ConstraintWidget)this.mChildren.get(i)).analyze(n);
        }
    }

    public void fillMetrics(Metrics metrics) {
        this.mSystem.fillMetrics(metrics);
    }

    public ArrayList<Guideline> getHorizontalGuidelines() {
        ArrayList<Guideline> arrayList = new ArrayList<Guideline>();
        int n = this.mChildren.size();
        for (int i = 0; i < n; ++i) {
            ConstraintWidget constraintWidget = (ConstraintWidget)this.mChildren.get(i);
            if (!(constraintWidget instanceof Guideline) || (constraintWidget = (Guideline)constraintWidget).getOrientation() != 0) continue;
            arrayList.add((Guideline)constraintWidget);
        }
        return arrayList;
    }

    public int getOptimizationLevel() {
        return this.mOptimizationLevel;
    }

    public LinearSystem getSystem() {
        return this.mSystem;
    }

    @Override
    public String getType() {
        return "ConstraintLayout";
    }

    public ArrayList<Guideline> getVerticalGuidelines() {
        ArrayList<Guideline> arrayList = new ArrayList<Guideline>();
        int n = this.mChildren.size();
        for (int i = 0; i < n; ++i) {
            ConstraintWidget constraintWidget = (ConstraintWidget)this.mChildren.get(i);
            if (!(constraintWidget instanceof Guideline) || (constraintWidget = (Guideline)constraintWidget).getOrientation() != 1) continue;
            arrayList.add((Guideline)constraintWidget);
        }
        return arrayList;
    }

    public boolean handlesInternalConstraints() {
        return false;
    }

    public boolean isHeightMeasuredTooSmall() {
        return this.mHeightMeasuredTooSmall;
    }

    public boolean isRtl() {
        return this.mIsRtl;
    }

    public boolean isWidthMeasuredTooSmall() {
        return this.mWidthMeasuredTooSmall;
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    @Override
    public void layout() {
        var6_1 = this.mX;
        var7_2 = this.mY;
        var8_3 = Math.max(0, this.getWidth());
        var9_4 = Math.max(0, this.getHeight());
        this.mWidthMeasuredTooSmall = false;
        this.mHeightMeasuredTooSmall = false;
        if (this.mParent != null) {
            if (this.mSnapshot == null) {
                this.mSnapshot = new Snapshot(this);
            }
            this.mSnapshot.updateFrom(this);
            this.setX(this.mPaddingLeft);
            this.setY(this.mPaddingTop);
            this.resetAnchors();
            this.resetSolverVariables(this.mSystem.getCache());
        } else {
            this.mX = 0;
            this.mY = 0;
        }
        if (this.mOptimizationLevel != 0) {
            if (!this.optimizeFor(8)) {
                this.optimizeReset();
            }
            this.optimize();
            this.mSystem.graphOptimizer = true;
        } else {
            this.mSystem.graphOptimizer = false;
        }
        var15_5 = this.mListDimensionBehaviors[1];
        var16_6 = this.mListDimensionBehaviors[0];
        this.resetChains();
        var10_7 = this.mChildren.size();
        for (var1_8 = 0; var1_8 < var10_7; ++var1_8) {
            var14_9 = (ConstraintWidget)this.mChildren.get(var1_8);
            if (!(var14_9 instanceof WidgetContainer)) continue;
            ((WidgetContainer)var14_9).layout();
        }
        var11_12 = true;
        var2_13 = 0;
        var1_8 = 0;
        do {
            block35 : {
                block36 : {
                    block37 : {
                        if (!var11_12) ** GOTO lbl44
                        var5_16 = var2_13 + 1;
                        this.mSystem.reset();
                        this.createObjectVariables(this.mSystem);
                        break block37;
lbl44: // 1 sources:
                        if (this.mParent != null) {
                            var2_13 = Math.max(this.mMinWidth, this.getWidth());
                            var3_14 = Math.max(this.mMinHeight, this.getHeight());
                            this.mSnapshot.applyTo(this);
                            this.setWidth(var2_13 + this.mPaddingLeft + this.mPaddingRight);
                            this.setHeight(var3_14 + this.mPaddingTop + this.mPaddingBottom);
                        } else {
                            this.mX = var6_1;
                            this.mY = var7_2;
                        }
                        if (var1_8 != 0) {
                            this.mListDimensionBehaviors[0] = var16_6;
                            this.mListDimensionBehaviors[1] = var15_5;
                        }
                        this.resetSolverVariables(this.mSystem.getCache());
                        if (this != this.getRootConstraintContainer()) return;
                        this.updateDrawPosition();
                        return;
                    }
                    for (var2_13 = 0; var2_13 < var10_7; ++var2_13) {
                        ((ConstraintWidget)this.mChildren.get(var2_13)).createObjectVariables(this.mSystem);
                    }
                    var11_12 = var12_17 = this.addChildrenToSolver(this.mSystem);
                    if (!var12_17) break block35;
                    try {
                        this.mSystem.minimize();
                        var11_12 = var12_17;
                        break block35;
                    }
                    catch (Exception var14_10) {
                        var11_12 = var12_17;
                        break block36;
                    }
                    catch (Exception var14_11) {
                        // empty catch block
                    }
                }
                var14_9.printStackTrace();
                var17_19 = System.out;
                var18_20 = new StringBuilder();
                var18_20.append("EXCEPTION : ");
                var18_20.append(var14_9);
                var17_19.println(var18_20.toString());
            }
            if (var11_12) {
                this.updateChildrenFromSolver(this.mSystem, Optimizer.flags);
            } else {
                this.updateFromSolver(this.mSystem);
                for (var2_13 = 0; var2_13 < var10_7; ++var2_13) {
                    var14_9 = (ConstraintWidget)this.mChildren.get(var2_13);
                    if (var14_9.mListDimensionBehaviors[0] == ConstraintWidget.DimensionBehaviour.MATCH_CONSTRAINT && var14_9.getWidth() < var14_9.getWrapWidth()) {
                        Optimizer.flags[2] = true;
                        break;
                    }
                    if (var14_9.mListDimensionBehaviors[1] != ConstraintWidget.DimensionBehaviour.MATCH_CONSTRAINT || var14_9.getHeight() >= var14_9.getWrapHeight()) continue;
                    Optimizer.flags[2] = true;
                    break;
                }
            }
            if (var5_16 < 8 && Optimizer.flags[2]) {
                var4_15 = 0;
                var2_13 = 0;
                for (var3_14 = 0; var3_14 < var10_7; ++var3_14) {
                    var14_9 = (ConstraintWidget)this.mChildren.get(var3_14);
                    var4_15 = Math.max(var4_15, var14_9.mX + var14_9.getWidth());
                    var2_13 = Math.max(var2_13, var14_9.mY + var14_9.getHeight());
                }
                var4_15 = Math.max(this.mMinWidth, var4_15);
                var3_14 = Math.max(this.mMinHeight, var2_13);
                if (var16_6 == ConstraintWidget.DimensionBehaviour.WRAP_CONTENT && this.getWidth() < var4_15) {
                    this.setWidth(var4_15);
                    this.mListDimensionBehaviors[0] = ConstraintWidget.DimensionBehaviour.WRAP_CONTENT;
                    var12_17 = true;
                    var2_13 = 1;
                } else {
                    var12_17 = false;
                    var2_13 = var1_8;
                }
                var11_12 = var12_17;
                var1_8 = var2_13;
                if (var15_5 == ConstraintWidget.DimensionBehaviour.WRAP_CONTENT) {
                    var11_12 = var12_17;
                    var1_8 = var2_13;
                    if (this.getHeight() < var3_14) {
                        this.setHeight(var3_14);
                        this.mListDimensionBehaviors[1] = ConstraintWidget.DimensionBehaviour.WRAP_CONTENT;
                        var11_12 = true;
                        var1_8 = 1;
                    }
                }
            } else {
                var11_12 = false;
            }
            if ((var2_13 = Math.max(this.mMinWidth, this.getWidth())) > this.getWidth()) {
                this.setWidth(var2_13);
                this.mListDimensionBehaviors[0] = ConstraintWidget.DimensionBehaviour.FIXED;
                var11_12 = true;
                var1_8 = 1;
            }
            if ((var2_13 = Math.max(this.mMinHeight, this.getHeight())) > this.getHeight()) {
                this.setHeight(var2_13);
                this.mListDimensionBehaviors[1] = ConstraintWidget.DimensionBehaviour.FIXED;
                var11_12 = true;
                var1_8 = 1;
            }
            var13_18 = var11_12;
            var3_14 = var1_8;
            if (var1_8 != 0) ** GOTO lbl-1000
            var12_17 = var11_12;
            var2_13 = var1_8;
            if (this.mListDimensionBehaviors[0] == ConstraintWidget.DimensionBehaviour.WRAP_CONTENT) {
                var12_17 = var11_12;
                var2_13 = var1_8;
                if (var8_3 > 0) {
                    var12_17 = var11_12;
                    var2_13 = var1_8;
                    if (this.getWidth() > var8_3) {
                        this.mWidthMeasuredTooSmall = true;
                        this.mListDimensionBehaviors[0] = ConstraintWidget.DimensionBehaviour.FIXED;
                        this.setWidth(var8_3);
                        var12_17 = true;
                        var2_13 = 1;
                    }
                }
            }
            var13_18 = var12_17;
            var3_14 = var2_13;
            if (this.mListDimensionBehaviors[1] != ConstraintWidget.DimensionBehaviour.WRAP_CONTENT) ** GOTO lbl-1000
            var13_18 = var12_17;
            var3_14 = var2_13;
            if (var9_4 <= 0) ** GOTO lbl-1000
            var13_18 = var12_17;
            var3_14 = var2_13;
            if (this.getHeight() > var9_4) {
                this.mHeightMeasuredTooSmall = true;
                this.mListDimensionBehaviors[1] = ConstraintWidget.DimensionBehaviour.FIXED;
                this.setHeight(var9_4);
                var11_12 = true;
                var1_8 = 1;
            } else lbl-1000: // 4 sources:
            {
                var11_12 = var13_18;
                var1_8 = var3_14;
            }
            var2_13 = var5_16;
        } while (true);
    }

    public void optimize() {
        if (!this.optimizeFor(8)) {
            this.analyze(this.mOptimizationLevel);
        }
        this.solveGraph();
    }

    public boolean optimizeFor(int n) {
        if ((this.mOptimizationLevel & n) == n) {
            return true;
        }
        return false;
    }

    public void optimizeForDimensions(int n, int n2) {
        if (this.mListDimensionBehaviors[0] != ConstraintWidget.DimensionBehaviour.WRAP_CONTENT && this.mResolutionWidth != null) {
            this.mResolutionWidth.resolve(n);
        }
        if (this.mListDimensionBehaviors[1] != ConstraintWidget.DimensionBehaviour.WRAP_CONTENT && this.mResolutionHeight != null) {
            this.mResolutionHeight.resolve(n2);
        }
    }

    public void optimizeReset() {
        int n = this.mChildren.size();
        this.resetResolutionNodes();
        for (int i = 0; i < n; ++i) {
            ((ConstraintWidget)this.mChildren.get(i)).resetResolutionNodes();
        }
    }

    public void preOptimize() {
        this.optimizeReset();
        this.analyze(this.mOptimizationLevel);
    }

    @Override
    public void reset() {
        this.mSystem.reset();
        this.mPaddingLeft = 0;
        this.mPaddingRight = 0;
        this.mPaddingTop = 0;
        this.mPaddingBottom = 0;
        super.reset();
    }

    public void resetGraph() {
        ResolutionAnchor resolutionAnchor = this.getAnchor(ConstraintAnchor.Type.LEFT).getResolutionNode();
        ResolutionAnchor resolutionAnchor2 = this.getAnchor(ConstraintAnchor.Type.TOP).getResolutionNode();
        resolutionAnchor.invalidateAnchors();
        resolutionAnchor2.invalidateAnchors();
        resolutionAnchor.resolve(null, 0.0f);
        resolutionAnchor2.resolve(null, 0.0f);
    }

    public void setOptimizationLevel(int n) {
        this.mOptimizationLevel = n;
    }

    public void setPadding(int n, int n2, int n3, int n4) {
        this.mPaddingLeft = n;
        this.mPaddingTop = n2;
        this.mPaddingRight = n3;
        this.mPaddingBottom = n4;
    }

    public void setRtl(boolean bl) {
        this.mIsRtl = bl;
    }

    public void solveGraph() {
        ResolutionAnchor resolutionAnchor = this.getAnchor(ConstraintAnchor.Type.LEFT).getResolutionNode();
        ResolutionAnchor resolutionAnchor2 = this.getAnchor(ConstraintAnchor.Type.TOP).getResolutionNode();
        resolutionAnchor.resolve(null, 0.0f);
        resolutionAnchor2.resolve(null, 0.0f);
    }

    public void updateChildrenFromSolver(LinearSystem linearSystem, boolean[] arrbl) {
        arrbl[2] = false;
        this.updateFromSolver(linearSystem);
        int n = this.mChildren.size();
        for (int i = 0; i < n; ++i) {
            ConstraintWidget constraintWidget = (ConstraintWidget)this.mChildren.get(i);
            constraintWidget.updateFromSolver(linearSystem);
            if (constraintWidget.mListDimensionBehaviors[0] == ConstraintWidget.DimensionBehaviour.MATCH_CONSTRAINT && constraintWidget.getWidth() < constraintWidget.getWrapWidth()) {
                arrbl[2] = true;
            }
            if (constraintWidget.mListDimensionBehaviors[1] != ConstraintWidget.DimensionBehaviour.MATCH_CONSTRAINT || constraintWidget.getHeight() >= constraintWidget.getWrapHeight()) continue;
            arrbl[2] = true;
        }
    }
}

