/*
 * Decompiled with CFR 0_132.
 */
package android.support.constraint.solver;

import android.support.constraint.solver.ArrayLinkedVariables;
import android.support.constraint.solver.Cache;
import android.support.constraint.solver.LinearSystem;
import android.support.constraint.solver.SolverVariable;

public class ArrayRow
implements LinearSystem.Row {
    private static final boolean DEBUG = false;
    private static final float epsilon = 0.001f;
    float constantValue = 0.0f;
    boolean isSimpleDefinition = false;
    boolean used = false;
    SolverVariable variable = null;
    public final ArrayLinkedVariables variables;

    public ArrayRow(Cache cache) {
        this.variables = new ArrayLinkedVariables(this, cache);
    }

    public ArrayRow addError(LinearSystem linearSystem, int n) {
        this.variables.put(linearSystem.createErrorVariable(n, "ep"), 1.0f);
        this.variables.put(linearSystem.createErrorVariable(n, "em"), -1.0f);
        return this;
    }

    @Override
    public void addError(SolverVariable solverVariable) {
        int n = solverVariable.strength;
        float f = 1.0f;
        if (n != 1) {
            if (solverVariable.strength == 2) {
                f = 1000.0f;
            } else if (solverVariable.strength == 3) {
                f = 1000000.0f;
            } else if (solverVariable.strength == 4) {
                f = 1.0E9f;
            } else if (solverVariable.strength == 5) {
                f = 1.0E12f;
            }
        }
        this.variables.put(solverVariable, f);
    }

    ArrayRow addSingleError(SolverVariable solverVariable, int n) {
        this.variables.put(solverVariable, n);
        return this;
    }

    boolean chooseSubject(LinearSystem object) {
        boolean bl;
        if ((object = this.variables.chooseSubject((LinearSystem)object)) == null) {
            bl = true;
        } else {
            this.pivot((SolverVariable)object);
            bl = false;
        }
        if (this.variables.currentSize == 0) {
            this.isSimpleDefinition = true;
        }
        return bl;
    }

    @Override
    public void clear() {
        this.variables.clear();
        this.variable = null;
        this.constantValue = 0.0f;
    }

    ArrayRow createRowCentering(SolverVariable solverVariable, SolverVariable solverVariable2, int n, float f, SolverVariable solverVariable3, SolverVariable solverVariable4, int n2) {
        if (solverVariable2 == solverVariable3) {
            this.variables.put(solverVariable, 1.0f);
            this.variables.put(solverVariable4, 1.0f);
            this.variables.put(solverVariable2, -2.0f);
            return this;
        }
        if (f == 0.5f) {
            this.variables.put(solverVariable, 1.0f);
            this.variables.put(solverVariable2, -1.0f);
            this.variables.put(solverVariable3, -1.0f);
            this.variables.put(solverVariable4, 1.0f);
            if (n > 0 || n2 > 0) {
                this.constantValue = - n + n2;
                return this;
            }
        } else {
            if (f <= 0.0f) {
                this.variables.put(solverVariable, -1.0f);
                this.variables.put(solverVariable2, 1.0f);
                this.constantValue = n;
                return this;
            }
            if (f >= 1.0f) {
                this.variables.put(solverVariable3, -1.0f);
                this.variables.put(solverVariable4, 1.0f);
                this.constantValue = n2;
                return this;
            }
            ArrayLinkedVariables arrayLinkedVariables = this.variables;
            float f2 = 1.0f - f;
            arrayLinkedVariables.put(solverVariable, f2 * 1.0f);
            this.variables.put(solverVariable2, f2 * -1.0f);
            this.variables.put(solverVariable3, -1.0f * f);
            this.variables.put(solverVariable4, 1.0f * f);
            if (n > 0 || n2 > 0) {
                this.constantValue = (float)(- n) * f2 + (float)n2 * f;
            }
        }
        return this;
    }

    ArrayRow createRowDefinition(SolverVariable solverVariable, int n) {
        float f;
        this.variable = solverVariable;
        solverVariable.computedValue = f = (float)n;
        this.constantValue = f;
        this.isSimpleDefinition = true;
        return this;
    }

    ArrayRow createRowDimensionPercent(SolverVariable solverVariable, SolverVariable solverVariable2, SolverVariable solverVariable3, float f) {
        this.variables.put(solverVariable, -1.0f);
        this.variables.put(solverVariable2, 1.0f - f);
        this.variables.put(solverVariable3, f);
        return this;
    }

    public ArrayRow createRowDimensionRatio(SolverVariable solverVariable, SolverVariable solverVariable2, SolverVariable solverVariable3, SolverVariable solverVariable4, float f) {
        this.variables.put(solverVariable, -1.0f);
        this.variables.put(solverVariable2, 1.0f);
        this.variables.put(solverVariable3, f);
        this.variables.put(solverVariable4, - f);
        return this;
    }

    public ArrayRow createRowEqualDimension(float f, float f2, float f3, SolverVariable solverVariable, int n, SolverVariable solverVariable2, int n2, SolverVariable solverVariable3, int n3, SolverVariable solverVariable4, int n4) {
        if (f2 != 0.0f && f != f3) {
            f = f / f2 / (f3 / f2);
            this.constantValue = (float)(- n - n2) + (float)n3 * f + (float)n4 * f;
            this.variables.put(solverVariable, 1.0f);
            this.variables.put(solverVariable2, -1.0f);
            this.variables.put(solverVariable4, f);
            this.variables.put(solverVariable3, - f);
            return this;
        }
        this.constantValue = - n - n2 + n3 + n4;
        this.variables.put(solverVariable, 1.0f);
        this.variables.put(solverVariable2, -1.0f);
        this.variables.put(solverVariable4, 1.0f);
        this.variables.put(solverVariable3, -1.0f);
        return this;
    }

    public ArrayRow createRowEqualMatchDimensions(float f, float f2, float f3, SolverVariable solverVariable, SolverVariable solverVariable2, SolverVariable solverVariable3, SolverVariable solverVariable4) {
        this.constantValue = 0.0f;
        if (f2 != 0.0f && f != f3) {
            if (f == 0.0f) {
                this.variables.put(solverVariable, 1.0f);
                this.variables.put(solverVariable2, -1.0f);
                return this;
            }
            if (f3 == 0.0f) {
                this.variables.put(solverVariable3, 1.0f);
                this.variables.put(solverVariable4, -1.0f);
                return this;
            }
            f = f / f2 / (f3 / f2);
            this.variables.put(solverVariable, 1.0f);
            this.variables.put(solverVariable2, -1.0f);
            this.variables.put(solverVariable4, f);
            this.variables.put(solverVariable3, - f);
            return this;
        }
        this.variables.put(solverVariable, 1.0f);
        this.variables.put(solverVariable2, -1.0f);
        this.variables.put(solverVariable4, 1.0f);
        this.variables.put(solverVariable3, -1.0f);
        return this;
    }

    public ArrayRow createRowEquals(SolverVariable solverVariable, int n) {
        if (n < 0) {
            this.constantValue = n * -1;
            this.variables.put(solverVariable, 1.0f);
            return this;
        }
        this.constantValue = n;
        this.variables.put(solverVariable, -1.0f);
        return this;
    }

    public ArrayRow createRowEquals(SolverVariable solverVariable, SolverVariable solverVariable2, int n) {
        int n2 = 0;
        int n3 = 0;
        if (n != 0) {
            n2 = n3;
            n3 = n;
            if (n < 0) {
                n3 = n * -1;
                n2 = 1;
            }
            this.constantValue = n3;
        }
        if (n2 == 0) {
            this.variables.put(solverVariable, -1.0f);
            this.variables.put(solverVariable2, 1.0f);
            return this;
        }
        this.variables.put(solverVariable, 1.0f);
        this.variables.put(solverVariable2, -1.0f);
        return this;
    }

    public ArrayRow createRowGreaterThan(SolverVariable solverVariable, int n, SolverVariable solverVariable2) {
        this.constantValue = n;
        this.variables.put(solverVariable, -1.0f);
        return this;
    }

    public ArrayRow createRowGreaterThan(SolverVariable solverVariable, SolverVariable solverVariable2, SolverVariable solverVariable3, int n) {
        int n2 = 0;
        int n3 = 0;
        if (n != 0) {
            n2 = n3;
            n3 = n;
            if (n < 0) {
                n3 = n * -1;
                n2 = 1;
            }
            this.constantValue = n3;
        }
        if (n2 == 0) {
            this.variables.put(solverVariable, -1.0f);
            this.variables.put(solverVariable2, 1.0f);
            this.variables.put(solverVariable3, 1.0f);
            return this;
        }
        this.variables.put(solverVariable, 1.0f);
        this.variables.put(solverVariable2, -1.0f);
        this.variables.put(solverVariable3, -1.0f);
        return this;
    }

    public ArrayRow createRowLowerThan(SolverVariable solverVariable, SolverVariable solverVariable2, SolverVariable solverVariable3, int n) {
        int n2 = 0;
        int n3 = 0;
        if (n != 0) {
            n2 = n3;
            n3 = n;
            if (n < 0) {
                n3 = n * -1;
                n2 = 1;
            }
            this.constantValue = n3;
        }
        if (n2 == 0) {
            this.variables.put(solverVariable, -1.0f);
            this.variables.put(solverVariable2, 1.0f);
            this.variables.put(solverVariable3, -1.0f);
            return this;
        }
        this.variables.put(solverVariable, 1.0f);
        this.variables.put(solverVariable2, -1.0f);
        this.variables.put(solverVariable3, 1.0f);
        return this;
    }

    public ArrayRow createRowWithAngle(SolverVariable solverVariable, SolverVariable solverVariable2, SolverVariable solverVariable3, SolverVariable solverVariable4, float f) {
        this.variables.put(solverVariable3, 0.5f);
        this.variables.put(solverVariable4, 0.5f);
        this.variables.put(solverVariable, -0.5f);
        this.variables.put(solverVariable2, -0.5f);
        this.constantValue = - f;
        return this;
    }

    void ensurePositiveConstant() {
        if (this.constantValue < 0.0f) {
            this.constantValue *= -1.0f;
            this.variables.invert();
        }
    }

    @Override
    public SolverVariable getKey() {
        return this.variable;
    }

    @Override
    public SolverVariable getPivotCandidate(LinearSystem linearSystem, boolean[] arrbl) {
        return this.variables.getPivotCandidate(arrbl, null);
    }

    boolean hasKeyVariable() {
        if (this.variable != null && (this.variable.mType == SolverVariable.Type.UNRESTRICTED || this.constantValue >= 0.0f)) {
            return true;
        }
        return false;
    }

    boolean hasVariable(SolverVariable solverVariable) {
        return this.variables.containsKey(solverVariable);
    }

    @Override
    public void initFromRow(LinearSystem.Row row) {
        if (row instanceof ArrayRow) {
            row = (ArrayRow)row;
            this.variable = null;
            this.variables.clear();
            for (int i = 0; i < row.variables.currentSize; ++i) {
                SolverVariable solverVariable = row.variables.getVariable(i);
                float f = row.variables.getVariableValue(i);
                this.variables.add(solverVariable, f, true);
            }
        }
    }

    @Override
    public boolean isEmpty() {
        if (this.variable == null && this.constantValue == 0.0f && this.variables.currentSize == 0) {
            return true;
        }
        return false;
    }

    SolverVariable pickPivot(SolverVariable solverVariable) {
        return this.variables.getPivotCandidate(null, solverVariable);
    }

    void pivot(SolverVariable solverVariable) {
        if (this.variable != null) {
            this.variables.put(this.variable, -1.0f);
            this.variable = null;
        }
        float f = this.variables.remove(solverVariable, true) * -1.0f;
        this.variable = solverVariable;
        if (f == 1.0f) {
            return;
        }
        this.constantValue /= f;
        this.variables.divideByAmount(f);
    }

    public void reset() {
        this.variable = null;
        this.variables.clear();
        this.constantValue = 0.0f;
        this.isSimpleDefinition = false;
    }

    int sizeInBytes() {
        int n = this.variable != null ? 4 : 0;
        return n + 4 + 4 + this.variables.sizeInBytes();
    }

    String toReadableString() {
        boolean bl;
        CharSequence charSequence;
        if (this.variable == null) {
            charSequence = new StringBuilder();
            charSequence.append("");
            charSequence.append("0");
            charSequence = charSequence.toString();
        } else {
            charSequence = new StringBuilder();
            charSequence.append("");
            charSequence.append(this.variable);
            charSequence = charSequence.toString();
        }
        Object object = new StringBuilder();
        object.append((String)charSequence);
        object.append(" = ");
        charSequence = object.toString();
        float f = this.constantValue;
        int n = 0;
        if (f != 0.0f) {
            object = new StringBuilder();
            object.append((String)charSequence);
            object.append(this.constantValue);
            charSequence = object.toString();
            bl = true;
        } else {
            bl = false;
        }
        int n2 = this.variables.currentSize;
        while (n < n2) {
            float f2;
            object = this.variables.getVariable(n);
            if (object != null && (f2 = this.variables.getVariableValue(n)) != 0.0f) {
                String string2 = object.toString();
                if (!bl) {
                    object = charSequence;
                    f = f2;
                    if (f2 < 0.0f) {
                        object = new StringBuilder();
                        object.append((String)charSequence);
                        object.append("- ");
                        object = object.toString();
                        f = f2 * -1.0f;
                    }
                } else if (f2 > 0.0f) {
                    object = new StringBuilder();
                    object.append((String)charSequence);
                    object.append(" + ");
                    object = object.toString();
                    f = f2;
                } else {
                    object = new StringBuilder();
                    object.append((String)charSequence);
                    object.append(" - ");
                    object = object.toString();
                    f = f2 * -1.0f;
                }
                if (f == 1.0f) {
                    charSequence = new StringBuilder();
                    charSequence.append((String)object);
                    charSequence.append(string2);
                    charSequence = charSequence.toString();
                } else {
                    charSequence = new StringBuilder();
                    charSequence.append((String)object);
                    charSequence.append(f);
                    charSequence.append(" ");
                    charSequence.append(string2);
                    charSequence = charSequence.toString();
                }
                bl = true;
            }
            ++n;
        }
        object = charSequence;
        if (!bl) {
            object = new StringBuilder();
            object.append((String)charSequence);
            object.append("0.0");
            object = object.toString();
        }
        return object;
    }

    public String toString() {
        return this.toReadableString();
    }
}

