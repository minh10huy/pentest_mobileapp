/*
 * Decompiled with CFR 0_132.
 */
package android.support.constraint.solver.widgets;

import android.support.constraint.solver.LinearSystem;
import android.support.constraint.solver.Metrics;
import android.support.constraint.solver.SolverVariable;
import android.support.constraint.solver.widgets.ChainHead;
import android.support.constraint.solver.widgets.ConstraintAnchor;
import android.support.constraint.solver.widgets.ConstraintWidget;
import android.support.constraint.solver.widgets.ConstraintWidgetContainer;
import android.support.constraint.solver.widgets.ResolutionAnchor;
import android.support.constraint.solver.widgets.ResolutionDimension;
import android.support.constraint.solver.widgets.ResolutionNode;

public class Optimizer {
    static final int FLAG_CHAIN_DANGLING = 1;
    static final int FLAG_RECOMPUTE_BOUNDS = 2;
    static final int FLAG_USE_OPTIMIZE = 0;
    public static final int OPTIMIZATION_BARRIER = 2;
    public static final int OPTIMIZATION_CHAIN = 4;
    public static final int OPTIMIZATION_DIMENSIONS = 8;
    public static final int OPTIMIZATION_DIRECT = 1;
    public static final int OPTIMIZATION_NONE = 0;
    public static final int OPTIMIZATION_RATIO = 16;
    public static final int OPTIMIZATION_STANDARD = 3;
    static boolean[] flags = new boolean[3];

    static void analyze(int n, ConstraintWidget constraintWidget) {
        constraintWidget.updateResolutionNodes();
        ResolutionAnchor resolutionAnchor = constraintWidget.mLeft.getResolutionNode();
        ResolutionAnchor resolutionAnchor2 = constraintWidget.mTop.getResolutionNode();
        ResolutionAnchor resolutionAnchor3 = constraintWidget.mRight.getResolutionNode();
        ResolutionAnchor resolutionAnchor4 = constraintWidget.mBottom.getResolutionNode();
        n = (n & 8) == 8 ? 1 : 0;
        int n2 = constraintWidget.mListDimensionBehaviors[0] == ConstraintWidget.DimensionBehaviour.MATCH_CONSTRAINT && Optimizer.optimizableMatchConstraint(constraintWidget, 0) ? 1 : 0;
        if (resolutionAnchor.type != 4 && resolutionAnchor3.type != 4) {
            if (constraintWidget.mListDimensionBehaviors[0] != ConstraintWidget.DimensionBehaviour.FIXED && (n2 == 0 || constraintWidget.getVisibility() != 8)) {
                if (n2 != 0) {
                    n2 = constraintWidget.getWidth();
                    resolutionAnchor.setType(1);
                    resolutionAnchor3.setType(1);
                    if (constraintWidget.mLeft.mTarget == null && constraintWidget.mRight.mTarget == null) {
                        if (n != 0) {
                            resolutionAnchor3.dependsOn(resolutionAnchor, 1, constraintWidget.getResolutionWidth());
                        } else {
                            resolutionAnchor3.dependsOn(resolutionAnchor, n2);
                        }
                    } else if (constraintWidget.mLeft.mTarget != null && constraintWidget.mRight.mTarget == null) {
                        if (n != 0) {
                            resolutionAnchor3.dependsOn(resolutionAnchor, 1, constraintWidget.getResolutionWidth());
                        } else {
                            resolutionAnchor3.dependsOn(resolutionAnchor, n2);
                        }
                    } else if (constraintWidget.mLeft.mTarget == null && constraintWidget.mRight.mTarget != null) {
                        if (n != 0) {
                            resolutionAnchor.dependsOn(resolutionAnchor3, -1, constraintWidget.getResolutionWidth());
                        } else {
                            resolutionAnchor.dependsOn(resolutionAnchor3, - n2);
                        }
                    } else if (constraintWidget.mLeft.mTarget != null && constraintWidget.mRight.mTarget != null) {
                        if (n != 0) {
                            constraintWidget.getResolutionWidth().addDependent(resolutionAnchor);
                            constraintWidget.getResolutionWidth().addDependent(resolutionAnchor3);
                        }
                        if (constraintWidget.mDimensionRatio == 0.0f) {
                            resolutionAnchor.setType(3);
                            resolutionAnchor3.setType(3);
                            resolutionAnchor.setOpposite(resolutionAnchor3, 0.0f);
                            resolutionAnchor3.setOpposite(resolutionAnchor, 0.0f);
                        } else {
                            resolutionAnchor.setType(2);
                            resolutionAnchor3.setType(2);
                            resolutionAnchor.setOpposite(resolutionAnchor3, - n2);
                            resolutionAnchor3.setOpposite(resolutionAnchor, n2);
                            constraintWidget.setWidth(n2);
                        }
                    }
                }
            } else if (constraintWidget.mLeft.mTarget == null && constraintWidget.mRight.mTarget == null) {
                resolutionAnchor.setType(1);
                resolutionAnchor3.setType(1);
                if (n != 0) {
                    resolutionAnchor3.dependsOn(resolutionAnchor, 1, constraintWidget.getResolutionWidth());
                } else {
                    resolutionAnchor3.dependsOn(resolutionAnchor, constraintWidget.getWidth());
                }
            } else if (constraintWidget.mLeft.mTarget != null && constraintWidget.mRight.mTarget == null) {
                resolutionAnchor.setType(1);
                resolutionAnchor3.setType(1);
                if (n != 0) {
                    resolutionAnchor3.dependsOn(resolutionAnchor, 1, constraintWidget.getResolutionWidth());
                } else {
                    resolutionAnchor3.dependsOn(resolutionAnchor, constraintWidget.getWidth());
                }
            } else if (constraintWidget.mLeft.mTarget == null && constraintWidget.mRight.mTarget != null) {
                resolutionAnchor.setType(1);
                resolutionAnchor3.setType(1);
                resolutionAnchor.dependsOn(resolutionAnchor3, - constraintWidget.getWidth());
                if (n != 0) {
                    resolutionAnchor.dependsOn(resolutionAnchor3, -1, constraintWidget.getResolutionWidth());
                } else {
                    resolutionAnchor.dependsOn(resolutionAnchor3, - constraintWidget.getWidth());
                }
            } else if (constraintWidget.mLeft.mTarget != null && constraintWidget.mRight.mTarget != null) {
                resolutionAnchor.setType(2);
                resolutionAnchor3.setType(2);
                if (n != 0) {
                    constraintWidget.getResolutionWidth().addDependent(resolutionAnchor);
                    constraintWidget.getResolutionWidth().addDependent(resolutionAnchor3);
                    resolutionAnchor.setOpposite(resolutionAnchor3, -1, constraintWidget.getResolutionWidth());
                    resolutionAnchor3.setOpposite(resolutionAnchor, 1, constraintWidget.getResolutionWidth());
                } else {
                    resolutionAnchor.setOpposite(resolutionAnchor3, - constraintWidget.getWidth());
                    resolutionAnchor3.setOpposite(resolutionAnchor, constraintWidget.getWidth());
                }
            }
        }
        n2 = constraintWidget.mListDimensionBehaviors[1] == ConstraintWidget.DimensionBehaviour.MATCH_CONSTRAINT && Optimizer.optimizableMatchConstraint(constraintWidget, 1) ? 1 : 0;
        if (resolutionAnchor2.type != 4 && resolutionAnchor4.type != 4) {
            if (constraintWidget.mListDimensionBehaviors[1] != ConstraintWidget.DimensionBehaviour.FIXED && (n2 == 0 || constraintWidget.getVisibility() != 8)) {
                if (n2 != 0) {
                    n2 = constraintWidget.getHeight();
                    resolutionAnchor2.setType(1);
                    resolutionAnchor4.setType(1);
                    if (constraintWidget.mTop.mTarget == null && constraintWidget.mBottom.mTarget == null) {
                        if (n != 0) {
                            resolutionAnchor4.dependsOn(resolutionAnchor2, 1, constraintWidget.getResolutionHeight());
                            return;
                        }
                        resolutionAnchor4.dependsOn(resolutionAnchor2, n2);
                        return;
                    }
                    if (constraintWidget.mTop.mTarget != null && constraintWidget.mBottom.mTarget == null) {
                        if (n != 0) {
                            resolutionAnchor4.dependsOn(resolutionAnchor2, 1, constraintWidget.getResolutionHeight());
                            return;
                        }
                        resolutionAnchor4.dependsOn(resolutionAnchor2, n2);
                        return;
                    }
                    if (constraintWidget.mTop.mTarget == null && constraintWidget.mBottom.mTarget != null) {
                        if (n != 0) {
                            resolutionAnchor2.dependsOn(resolutionAnchor4, -1, constraintWidget.getResolutionHeight());
                            return;
                        }
                        resolutionAnchor2.dependsOn(resolutionAnchor4, - n2);
                        return;
                    }
                    if (constraintWidget.mTop.mTarget != null && constraintWidget.mBottom.mTarget != null) {
                        if (n != 0) {
                            constraintWidget.getResolutionHeight().addDependent(resolutionAnchor2);
                            constraintWidget.getResolutionWidth().addDependent(resolutionAnchor4);
                        }
                        if (constraintWidget.mDimensionRatio == 0.0f) {
                            resolutionAnchor2.setType(3);
                            resolutionAnchor4.setType(3);
                            resolutionAnchor2.setOpposite(resolutionAnchor4, 0.0f);
                            resolutionAnchor4.setOpposite(resolutionAnchor2, 0.0f);
                            return;
                        }
                        resolutionAnchor2.setType(2);
                        resolutionAnchor4.setType(2);
                        resolutionAnchor2.setOpposite(resolutionAnchor4, - n2);
                        resolutionAnchor4.setOpposite(resolutionAnchor2, n2);
                        constraintWidget.setHeight(n2);
                        if (constraintWidget.mBaselineDistance > 0) {
                            constraintWidget.mBaseline.getResolutionNode().dependsOn(1, resolutionAnchor2, constraintWidget.mBaselineDistance);
                            return;
                        }
                    }
                }
            } else if (constraintWidget.mTop.mTarget == null && constraintWidget.mBottom.mTarget == null) {
                resolutionAnchor2.setType(1);
                resolutionAnchor4.setType(1);
                if (n != 0) {
                    resolutionAnchor4.dependsOn(resolutionAnchor2, 1, constraintWidget.getResolutionHeight());
                } else {
                    resolutionAnchor4.dependsOn(resolutionAnchor2, constraintWidget.getHeight());
                }
                if (constraintWidget.mBaseline.mTarget != null) {
                    constraintWidget.mBaseline.getResolutionNode().setType(1);
                    resolutionAnchor2.dependsOn(1, constraintWidget.mBaseline.getResolutionNode(), - constraintWidget.mBaselineDistance);
                    return;
                }
            } else if (constraintWidget.mTop.mTarget != null && constraintWidget.mBottom.mTarget == null) {
                resolutionAnchor2.setType(1);
                resolutionAnchor4.setType(1);
                if (n != 0) {
                    resolutionAnchor4.dependsOn(resolutionAnchor2, 1, constraintWidget.getResolutionHeight());
                } else {
                    resolutionAnchor4.dependsOn(resolutionAnchor2, constraintWidget.getHeight());
                }
                if (constraintWidget.mBaselineDistance > 0) {
                    constraintWidget.mBaseline.getResolutionNode().dependsOn(1, resolutionAnchor2, constraintWidget.mBaselineDistance);
                    return;
                }
            } else if (constraintWidget.mTop.mTarget == null && constraintWidget.mBottom.mTarget != null) {
                resolutionAnchor2.setType(1);
                resolutionAnchor4.setType(1);
                if (n != 0) {
                    resolutionAnchor2.dependsOn(resolutionAnchor4, -1, constraintWidget.getResolutionHeight());
                } else {
                    resolutionAnchor2.dependsOn(resolutionAnchor4, - constraintWidget.getHeight());
                }
                if (constraintWidget.mBaselineDistance > 0) {
                    constraintWidget.mBaseline.getResolutionNode().dependsOn(1, resolutionAnchor2, constraintWidget.mBaselineDistance);
                    return;
                }
            } else if (constraintWidget.mTop.mTarget != null && constraintWidget.mBottom.mTarget != null) {
                resolutionAnchor2.setType(2);
                resolutionAnchor4.setType(2);
                if (n != 0) {
                    resolutionAnchor2.setOpposite(resolutionAnchor4, -1, constraintWidget.getResolutionHeight());
                    resolutionAnchor4.setOpposite(resolutionAnchor2, 1, constraintWidget.getResolutionHeight());
                    constraintWidget.getResolutionHeight().addDependent(resolutionAnchor2);
                    constraintWidget.getResolutionWidth().addDependent(resolutionAnchor4);
                } else {
                    resolutionAnchor2.setOpposite(resolutionAnchor4, - constraintWidget.getHeight());
                    resolutionAnchor4.setOpposite(resolutionAnchor2, constraintWidget.getHeight());
                }
                if (constraintWidget.mBaselineDistance > 0) {
                    constraintWidget.mBaseline.getResolutionNode().dependsOn(1, resolutionAnchor2, constraintWidget.mBaselineDistance);
                }
            }
        }
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Lifted jumps to return sites
     */
    static boolean applyChainOptimized(ConstraintWidgetContainer var0, LinearSystem var1_1, int var2_2, int var3_3, ChainHead var4_4) {
        block59 : {
            block58 : {
                block55 : {
                    var20_5 = var4_4.mFirst;
                    var23_6 = var4_4.mLast;
                    var19_7 = var4_4.mFirstVisibleWidget;
                    var21_8 = var4_4.mLastVisibleWidget;
                    var22_9 = var4_4.mHead;
                    var10_10 = var4_4.mTotalWeight;
                    var24_11 = var4_4.mFirstMatchConstraintWidget;
                    var4_4 = var4_4.mLastMatchConstraintWidget;
                    var0 = var0.mListDimensionBehaviors[var2_2];
                    var0 = ConstraintWidget.DimensionBehaviour.WRAP_CONTENT;
                    if (var2_2 != 0) break block55;
                    var11_12 = var22_9.mHorizontalChainStyle == 0 ? 1 : 0;
                    var12_13 = var22_9.mHorizontalChainStyle == 1 ? 1 : 0;
                    var14_14 = var11_12;
                    var13_15 = var12_13;
                    if (var22_9.mHorizontalChainStyle != 2) ** GOTO lbl-1000
                    ** GOTO lbl-1000
                }
                var11_12 = var22_9.mVerticalChainStyle == 0 ? 1 : 0;
                var12_13 = var22_9.mVerticalChainStyle == 1 ? 1 : 0;
                var14_14 = var11_12;
                var13_15 = var12_13;
                if (var22_9.mVerticalChainStyle == 2) lbl-1000: // 2 sources:
                {
                    var15_16 = true;
                    var14_14 = var11_12;
                } else lbl-1000: // 2 sources:
                {
                    var15_16 = false;
                    var12_13 = var13_15;
                }
                var4_4 = var20_5;
                var16_17 = 0;
                var13_15 = 0;
                var11_12 = 0;
                var8_18 = 0.0f;
                var7_19 = 0.0f;
                while (var11_12 == 0) {
                    block57 : {
                        block56 : {
                            var17_22 = var16_17;
                            var5_20 = var8_18;
                            var6_21 = var7_19;
                            if (var4_4.getVisibility() != 8) {
                                var17_22 = var16_17 + 1;
                                var6_21 = var2_2 == 0 ? var8_18 + (float)var4_4.getWidth() : var8_18 + (float)var4_4.getHeight();
                                var5_20 = var6_21;
                                if (var4_4 != var19_7) {
                                    var5_20 = var6_21 + (float)var4_4.mListAnchors[var3_3].getMargin();
                                }
                                var6_21 = var7_19 + (float)var4_4.mListAnchors[var3_3].getMargin() + (float)var4_4.mListAnchors[var3_3 + 1].getMargin();
                            }
                            var0 = var4_4.mListAnchors[var3_3];
                            var18_23 = var13_15;
                            if (var4_4.getVisibility() != 8) {
                                var18_23 = var13_15;
                                if (var4_4.mListDimensionBehaviors[var2_2] == ConstraintWidget.DimensionBehaviour.MATCH_CONSTRAINT) {
                                    var18_23 = var13_15 + 1;
                                    if (var2_2 == 0) {
                                        if (var4_4.mMatchConstraintDefaultWidth != 0) {
                                            return false;
                                        }
                                        if (var4_4.mMatchConstraintMinWidth != 0) return false;
                                        if (var4_4.mMatchConstraintMaxWidth != 0) {
                                            return false;
                                        }
                                    } else {
                                        if (var4_4.mMatchConstraintDefaultHeight != 0) {
                                            return false;
                                        }
                                        if (var4_4.mMatchConstraintMinHeight != 0) return false;
                                        if (var4_4.mMatchConstraintMaxHeight != 0) {
                                            return false;
                                        }
                                    }
                                }
                            }
                            if ((var0 = var4_4.mListAnchors[var3_3 + 1].mTarget) == null) break block56;
                            var0 = var0.mOwner;
                            if (var0.mListAnchors[var3_3].mTarget != null && var0.mListAnchors[var3_3].mTarget.mOwner == var4_4) break block57;
                        }
                        var0 = null;
                    }
                    if (var0 != null) {
                        var16_17 = var17_22;
                        var13_15 = var18_23;
                        var4_4 = var0;
                        var8_18 = var5_20;
                        var7_19 = var6_21;
                        continue;
                    }
                    var11_12 = 1;
                    var16_17 = var17_22;
                    var13_15 = var18_23;
                    var8_18 = var5_20;
                    var7_19 = var6_21;
                }
                var22_9 = var20_5.mListAnchors[var3_3].getResolutionNode();
                var0 = var23_6.mListAnchors;
                var17_22 = var3_3 + 1;
                var0 = var0[var17_22].getResolutionNode();
                if (var22_9.target == null) return false;
                if (var0.target == null) {
                    return false;
                }
                if (var22_9.target.state != 1 && var0.target.state != 1) {
                    return false;
                }
                if (var13_15 > 0 && var13_15 != var16_17) {
                    return false;
                }
                if (!var15_16 && var14_14 == 0 && var12_13 == 0) {
                    var5_20 = 0.0f;
                } else {
                    var6_21 = var19_7 != null ? (float)var19_7.mListAnchors[var3_3].getMargin() : 0.0f;
                    var5_20 = var6_21;
                    if (var21_8 != null) {
                        var5_20 = var6_21 + (float)var21_8.mListAnchors[var17_22].getMargin();
                    }
                }
                var9_24 = var22_9.target.resolvedOffset;
                var6_21 = var0.target.resolvedOffset;
                var6_21 = var9_24 < var6_21 ? var6_21 - var9_24 - var8_18 : var9_24 - var6_21 - var8_18;
                if (var13_15 > 0 && var13_15 == var16_17) {
                    if (var4_4.getParent() != null && var4_4.getParent().mListDimensionBehaviors[var2_2] == ConstraintWidget.DimensionBehaviour.WRAP_CONTENT) {
                        return false;
                    }
                    var6_21 = var8_18 = var6_21 + var8_18 - var7_19;
                    if (var14_14 != 0) {
                        var6_21 = var8_18 - (var7_19 - var5_20);
                    }
                    var5_20 = var9_24;
                    var0 = var19_7;
                    var11_12 = var17_22;
                    if (var14_14 != 0) {
                        var7_19 = var9_24 + (float)var19_7.mListAnchors[var17_22].getMargin();
                        var4_4 = var19_7.mListNextVisibleWidget[var2_2];
                        var5_20 = var7_19;
                        var0 = var19_7;
                        var11_12 = var17_22;
                        if (var4_4 != null) {
                            var5_20 = var7_19 + (float)var4_4.mListAnchors[var3_3].getMargin();
                            var11_12 = var17_22;
                            var0 = var19_7;
                        }
                    }
                    while (var0 != null) {
                        if (LinearSystem.sMetrics != null) {
                            var4_4 = LinearSystem.sMetrics;
                            --var4_4.nonresolvedWidgets;
                            var4_4 = LinearSystem.sMetrics;
                            ++var4_4.resolvedWidgets;
                            var4_4 = LinearSystem.sMetrics;
                            ++var4_4.chainConnectionResolved;
                        }
                        if ((var4_4 = var0.mListNextVisibleWidget[var2_2]) != null || var0 == var21_8) {
                            var7_19 = var6_21 / (float)var13_15;
                            if (var10_10 > 0.0f) {
                                var7_19 = var0.mWeight[var2_2] * var6_21 / var10_10;
                            }
                            var0.mListAnchors[var3_3].getResolutionNode().resolve(var22_9.resolvedTarget, var5_20 += (float)var0.mListAnchors[var3_3].getMargin());
                            var19_7 = var0.mListAnchors[var11_12].getResolutionNode();
                            var20_5 = var22_9.resolvedTarget;
                            var19_7.resolve((ResolutionAnchor)var20_5, var5_20 += var7_19);
                            var0.mListAnchors[var3_3].getResolutionNode().addResolvedValue(var1_1);
                            var0.mListAnchors[var11_12].getResolutionNode().addResolvedValue(var1_1);
                            var5_20 += (float)var0.mListAnchors[var11_12].getMargin();
                        }
                        var0 = var4_4;
                    }
                    return true;
                }
                if (var6_21 < var8_18) {
                    return false;
                }
                if (var15_16) break block58;
                if (var14_14 == 0) {
                    if (var12_13 == 0) return true;
                }
                if (var14_14 != 0) {
                    var7_19 = var6_21 - var5_20;
                } else {
                    var7_19 = var6_21;
                    if (var12_13 != 0) {
                        var7_19 = var6_21 - var5_20;
                    }
                }
                var5_20 = var7_19 / (float)(var16_17 + 1);
                if (var12_13 != 0) {
                    var5_20 = var16_17 > 1 ? var7_19 / (float)(var16_17 - 1) : var7_19 / 2.0f;
                }
                var7_19 = var6_21 = var9_24 + var5_20;
                if (var12_13 != 0) {
                    var7_19 = var6_21;
                    if (var16_17 > 1) {
                        var7_19 = (float)var19_7.mListAnchors[var3_3].getMargin() + var9_24;
                    }
                }
                var6_21 = var7_19;
                var0 = var19_7;
                if (var14_14 != 0) {
                    var6_21 = var7_19;
                    var0 = var19_7;
                    if (var19_7 != null) {
                        var6_21 = var7_19 + (float)var19_7.mListAnchors[var3_3].getMargin();
                        var0 = var19_7;
                    }
                }
                break block59;
            }
            var5_20 = var9_24 + (var6_21 - var5_20) * var20_5.getHorizontalBiasPercent();
            while (var19_7 != null) {
                block61 : {
                    block60 : {
                        if (LinearSystem.sMetrics != null) {
                            var0 = LinearSystem.sMetrics;
                            --var0.nonresolvedWidgets;
                            var0 = LinearSystem.sMetrics;
                            ++var0.resolvedWidgets;
                            var0 = LinearSystem.sMetrics;
                            ++var0.chainConnectionResolved;
                        }
                        if ((var0 = var19_7.mListNextVisibleWidget[var2_2]) != null) break block60;
                        var6_21 = var5_20;
                        if (var19_7 != var21_8) break block61;
                    }
                    var6_21 = var2_2 == 0 ? (float)var19_7.getWidth() : (float)var19_7.getHeight();
                    var19_7.mListAnchors[var3_3].getResolutionNode().resolve(var22_9.resolvedTarget, var5_20 += (float)var19_7.mListAnchors[var3_3].getMargin());
                    var4_4 = var19_7.mListAnchors[var17_22].getResolutionNode();
                    var20_5 = var22_9.resolvedTarget;
                    var4_4.resolve((ResolutionAnchor)var20_5, var5_20 += var6_21);
                    var19_7.mListAnchors[var3_3].getResolutionNode().addResolvedValue(var1_1);
                    var19_7.mListAnchors[var17_22].getResolutionNode().addResolvedValue(var1_1);
                    var6_21 = var5_20 + (float)var19_7.mListAnchors[var17_22].getMargin();
                }
                var19_7 = var0;
                var5_20 = var6_21;
            }
            return true;
        }
        while (var0 != null) {
            block63 : {
                block62 : {
                    if (LinearSystem.sMetrics != null) {
                        var4_4 = LinearSystem.sMetrics;
                        --var4_4.nonresolvedWidgets;
                        var4_4 = LinearSystem.sMetrics;
                        ++var4_4.resolvedWidgets;
                        var4_4 = LinearSystem.sMetrics;
                        ++var4_4.chainConnectionResolved;
                    }
                    if ((var4_4 = var0.mListNextVisibleWidget[var2_2]) != null) break block62;
                    var7_19 = var6_21;
                    if (var0 != var21_8) break block63;
                }
                var7_19 = var2_2 == 0 ? (float)var0.getWidth() : (float)var0.getHeight();
                var0.mListAnchors[var3_3].getResolutionNode().resolve(var22_9.resolvedTarget, var6_21);
                var0.mListAnchors[var17_22].getResolutionNode().resolve(var22_9.resolvedTarget, var6_21 + var7_19);
                var0.mListAnchors[var3_3].getResolutionNode().addResolvedValue(var1_1);
                var0.mListAnchors[var17_22].getResolutionNode().addResolvedValue(var1_1);
                var7_19 = var6_21 + (var7_19 + var5_20);
            }
            var0 = var4_4;
            var6_21 = var7_19;
        }
        return true;
    }

    static void checkMatchParent(ConstraintWidgetContainer constraintWidgetContainer, LinearSystem linearSystem, ConstraintWidget constraintWidget) {
        int n;
        int n2;
        if (constraintWidgetContainer.mListDimensionBehaviors[0] != ConstraintWidget.DimensionBehaviour.WRAP_CONTENT && constraintWidget.mListDimensionBehaviors[0] == ConstraintWidget.DimensionBehaviour.MATCH_PARENT) {
            n = constraintWidget.mLeft.mMargin;
            n2 = constraintWidgetContainer.getWidth() - constraintWidget.mRight.mMargin;
            constraintWidget.mLeft.mSolverVariable = linearSystem.createObjectVariable(constraintWidget.mLeft);
            constraintWidget.mRight.mSolverVariable = linearSystem.createObjectVariable(constraintWidget.mRight);
            linearSystem.addEquality(constraintWidget.mLeft.mSolverVariable, n);
            linearSystem.addEquality(constraintWidget.mRight.mSolverVariable, n2);
            constraintWidget.mHorizontalResolution = 2;
            constraintWidget.setHorizontalDimension(n, n2);
        }
        if (constraintWidgetContainer.mListDimensionBehaviors[1] != ConstraintWidget.DimensionBehaviour.WRAP_CONTENT && constraintWidget.mListDimensionBehaviors[1] == ConstraintWidget.DimensionBehaviour.MATCH_PARENT) {
            n = constraintWidget.mTop.mMargin;
            n2 = constraintWidgetContainer.getHeight() - constraintWidget.mBottom.mMargin;
            constraintWidget.mTop.mSolverVariable = linearSystem.createObjectVariable(constraintWidget.mTop);
            constraintWidget.mBottom.mSolverVariable = linearSystem.createObjectVariable(constraintWidget.mBottom);
            linearSystem.addEquality(constraintWidget.mTop.mSolverVariable, n);
            linearSystem.addEquality(constraintWidget.mBottom.mSolverVariable, n2);
            if (constraintWidget.mBaselineDistance > 0 || constraintWidget.getVisibility() == 8) {
                constraintWidget.mBaseline.mSolverVariable = linearSystem.createObjectVariable(constraintWidget.mBaseline);
                linearSystem.addEquality(constraintWidget.mBaseline.mSolverVariable, constraintWidget.mBaselineDistance + n);
            }
            constraintWidget.mVerticalResolution = 2;
            constraintWidget.setVerticalDimension(n, n2);
        }
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    private static boolean optimizableMatchConstraint(ConstraintWidget arrdimensionBehaviour, int n) {
        if (arrdimensionBehaviour.mListDimensionBehaviors[n] != ConstraintWidget.DimensionBehaviour.MATCH_CONSTRAINT) {
            return false;
        }
        float f = arrdimensionBehaviour.mDimensionRatio;
        int n2 = 1;
        if (f != 0.0f) {
            arrdimensionBehaviour = arrdimensionBehaviour.mListDimensionBehaviors;
            n = n == 0 ? n2 : 0;
            if (arrdimensionBehaviour[n] != ConstraintWidget.DimensionBehaviour.MATCH_CONSTRAINT) return false;
            return false;
        }
        if (n == 0) {
            if (arrdimensionBehaviour.mMatchConstraintDefaultWidth != 0) {
                return false;
            }
            if (arrdimensionBehaviour.mMatchConstraintMinWidth == 0 && arrdimensionBehaviour.mMatchConstraintMaxWidth == 0) return true;
            return false;
        }
        if (arrdimensionBehaviour.mMatchConstraintDefaultHeight != 0) {
            return false;
        }
        if (arrdimensionBehaviour.mMatchConstraintMinHeight != 0) return false;
        if (arrdimensionBehaviour.mMatchConstraintMaxHeight == 0) return true;
        return false;
    }
}

