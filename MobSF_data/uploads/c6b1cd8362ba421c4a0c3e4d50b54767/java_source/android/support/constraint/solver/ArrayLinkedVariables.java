/*
 * Decompiled with CFR 0_132.
 */
package android.support.constraint.solver;

import android.support.constraint.solver.ArrayRow;
import android.support.constraint.solver.Cache;
import android.support.constraint.solver.LinearSystem;
import android.support.constraint.solver.SolverVariable;
import java.io.PrintStream;
import java.util.Arrays;

public class ArrayLinkedVariables {
    private static final boolean DEBUG = false;
    private static final boolean FULL_NEW_CHECK = false;
    private static final int NONE = -1;
    private int ROW_SIZE = 8;
    private SolverVariable candidate = null;
    int currentSize = 0;
    private int[] mArrayIndices = new int[this.ROW_SIZE];
    private int[] mArrayNextIndices = new int[this.ROW_SIZE];
    private float[] mArrayValues = new float[this.ROW_SIZE];
    private final Cache mCache;
    private boolean mDidFillOnce = false;
    private int mHead = -1;
    private int mLast = -1;
    private final ArrayRow mRow;

    ArrayLinkedVariables(ArrayRow arrayRow, Cache cache) {
        this.mRow = arrayRow;
        this.mCache = cache;
    }

    private boolean isNew(SolverVariable solverVariable, LinearSystem linearSystem) {
        if (solverVariable.usageInRowCount <= 1) {
            return true;
        }
        return false;
    }

    final void add(SolverVariable solverVariable, float f, boolean bl) {
        int n;
        if (f == 0.0f) {
            return;
        }
        if (this.mHead == -1) {
            this.mHead = 0;
            this.mArrayValues[this.mHead] = f;
            this.mArrayIndices[this.mHead] = solverVariable.id;
            this.mArrayNextIndices[this.mHead] = -1;
            ++solverVariable.usageInRowCount;
            solverVariable.addToRow(this.mRow);
            ++this.currentSize;
            if (!this.mDidFillOnce) {
                ++this.mLast;
                if (this.mLast >= this.mArrayIndices.length) {
                    this.mDidFillOnce = true;
                    this.mLast = this.mArrayIndices.length - 1;
                }
            }
            return;
        }
        int n2 = this.mHead;
        int n3 = -1;
        for (n = 0; n2 != -1 && n < this.currentSize; ++n) {
            if (this.mArrayIndices[n2] == solverVariable.id) {
                float[] arrf = this.mArrayValues;
                arrf[n2] = arrf[n2] + f;
                if (this.mArrayValues[n2] == 0.0f) {
                    if (n2 == this.mHead) {
                        this.mHead = this.mArrayNextIndices[n2];
                    } else {
                        this.mArrayNextIndices[n3] = this.mArrayNextIndices[n2];
                    }
                    if (bl) {
                        solverVariable.removeFromRow(this.mRow);
                    }
                    if (this.mDidFillOnce) {
                        this.mLast = n2;
                    }
                    --solverVariable.usageInRowCount;
                    --this.currentSize;
                }
                return;
            }
            if (this.mArrayIndices[n2] < solverVariable.id) {
                n3 = n2;
            }
            n2 = this.mArrayNextIndices[n2];
        }
        n2 = this.mLast + 1;
        if (this.mDidFillOnce) {
            n2 = this.mArrayIndices[this.mLast] == -1 ? this.mLast : this.mArrayIndices.length;
        }
        n = n2;
        if (n2 >= this.mArrayIndices.length) {
            n = n2;
            if (this.currentSize < this.mArrayIndices.length) {
                int n4 = 0;
                do {
                    n = n2;
                    if (n4 >= this.mArrayIndices.length) break;
                    if (this.mArrayIndices[n4] == -1) {
                        n = n4;
                        break;
                    }
                    ++n4;
                } while (true);
            }
        }
        n2 = n;
        if (n >= this.mArrayIndices.length) {
            n2 = this.mArrayIndices.length;
            this.ROW_SIZE *= 2;
            this.mDidFillOnce = false;
            this.mLast = n2 - 1;
            this.mArrayValues = Arrays.copyOf(this.mArrayValues, this.ROW_SIZE);
            this.mArrayIndices = Arrays.copyOf(this.mArrayIndices, this.ROW_SIZE);
            this.mArrayNextIndices = Arrays.copyOf(this.mArrayNextIndices, this.ROW_SIZE);
        }
        this.mArrayIndices[n2] = solverVariable.id;
        this.mArrayValues[n2] = f;
        if (n3 != -1) {
            this.mArrayNextIndices[n2] = this.mArrayNextIndices[n3];
            this.mArrayNextIndices[n3] = n2;
        } else {
            this.mArrayNextIndices[n2] = this.mHead;
            this.mHead = n2;
        }
        ++solverVariable.usageInRowCount;
        solverVariable.addToRow(this.mRow);
        ++this.currentSize;
        if (!this.mDidFillOnce) {
            ++this.mLast;
        }
        if (this.mLast >= this.mArrayIndices.length) {
            this.mDidFillOnce = true;
            this.mLast = this.mArrayIndices.length - 1;
        }
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Lifted jumps to return sites
     */
    SolverVariable chooseSubject(LinearSystem var1_1) {
        var8_2 = this.mHead;
        var17_3 = null;
        var16_5 = null;
        var6_6 = 0.0f;
        var12_7 = false;
        var5_8 = 0.0f;
        var11_9 = false;
        for (var7_4 = 0; var8_2 != -1 && var7_4 < this.currentSize; ++var7_4) {
            block17 : {
                block20 : {
                    block18 : {
                        block19 : {
                            block15 : {
                                block16 : {
                                    block14 : {
                                        var3_11 = this.mArrayValues[var8_2];
                                        var13_15 = this.mCache.mIndexedVariables[this.mArrayIndices[var8_2]];
                                        if (var3_11 >= 0.0f) break block14;
                                        var2_10 = var3_11;
                                        if (var3_11 <= -0.001f) break block15;
                                        this.mArrayValues[var8_2] = 0.0f;
                                        var13_15.removeFromRow(this.mRow);
                                        break block16;
                                    }
                                    var2_10 = var3_11;
                                    if (var3_11 >= 0.001f) break block15;
                                    this.mArrayValues[var8_2] = 0.0f;
                                    var13_15.removeFromRow(this.mRow);
                                }
                                var2_10 = 0.0f;
                            }
                            var14_16 = var17_3;
                            var15_17 = var16_5;
                            var3_11 = var6_6;
                            var9_13 = var12_7;
                            var4_12 = var5_8;
                            var10_14 = var11_9;
                            if (var2_10 == 0.0f) break block17;
                            if (var13_15.mType != SolverVariable.Type.UNRESTRICTED) break block18;
                            if (var17_3 != null) break block19;
                            var9_13 = this.isNew(var13_15, var1_1);
                            ** GOTO lbl39
                        }
                        if (var6_6 > var2_10) {
                            var9_13 = this.isNew(var13_15, var1_1);
lbl39: // 2 sources:
                            var14_16 = var13_15;
                            var15_17 = var16_5;
                            var3_11 = var2_10;
                            var4_12 = var5_8;
                            var10_14 = var11_9;
                        } else {
                            var14_16 = var17_3;
                            var15_17 = var16_5;
                            var3_11 = var6_6;
                            var9_13 = var12_7;
                            var4_12 = var5_8;
                            var10_14 = var11_9;
                            if (!var12_7) {
                                var14_16 = var17_3;
                                var15_17 = var16_5;
                                var3_11 = var6_6;
                                var9_13 = var12_7;
                                var4_12 = var5_8;
                                var10_14 = var11_9;
                                if (this.isNew(var13_15, var1_1)) {
                                    var9_13 = true;
                                    var14_16 = var13_15;
                                    var15_17 = var16_5;
                                    var3_11 = var2_10;
                                    var4_12 = var5_8;
                                    var10_14 = var11_9;
                                }
                            }
                        }
                        break block17;
                    }
                    var14_16 = var17_3;
                    var15_17 = var16_5;
                    var3_11 = var6_6;
                    var9_13 = var12_7;
                    var4_12 = var5_8;
                    var10_14 = var11_9;
                    if (var17_3 != null) break block17;
                    var14_16 = var17_3;
                    var15_17 = var16_5;
                    var3_11 = var6_6;
                    var9_13 = var12_7;
                    var4_12 = var5_8;
                    var10_14 = var11_9;
                    if (var2_10 >= 0.0f) break block17;
                    if (var16_5 != null) break block20;
                    var9_13 = this.isNew(var13_15, var1_1);
                    ** GOTO lbl87
                }
                if (var5_8 > var2_10) {
                    var9_13 = this.isNew(var13_15, var1_1);
lbl87: // 2 sources:
                    var10_14 = var9_13;
                    var14_16 = var17_3;
                    var15_17 = var13_15;
                    var3_11 = var6_6;
                    var9_13 = var12_7;
                    var4_12 = var2_10;
                } else {
                    var14_16 = var17_3;
                    var15_17 = var16_5;
                    var3_11 = var6_6;
                    var9_13 = var12_7;
                    var4_12 = var5_8;
                    var10_14 = var11_9;
                    if (!var11_9) {
                        var14_16 = var17_3;
                        var15_17 = var16_5;
                        var3_11 = var6_6;
                        var9_13 = var12_7;
                        var4_12 = var5_8;
                        var10_14 = var11_9;
                        if (this.isNew(var13_15, var1_1)) {
                            var10_14 = true;
                            var4_12 = var2_10;
                            var9_13 = var12_7;
                            var3_11 = var6_6;
                            var15_17 = var13_15;
                            var14_16 = var17_3;
                        }
                    }
                }
            }
            var8_2 = this.mArrayNextIndices[var8_2];
            var17_3 = var14_16;
            var16_5 = var15_17;
            var6_6 = var3_11;
            var12_7 = var9_13;
            var5_8 = var4_12;
            var11_9 = var10_14;
        }
        if (var17_3 == null) return var16_5;
        return var17_3;
    }

    public final void clear() {
        int n = this.mHead;
        for (int i = 0; n != -1 && i < this.currentSize; ++i) {
            SolverVariable solverVariable = this.mCache.mIndexedVariables[this.mArrayIndices[n]];
            if (solverVariable != null) {
                solverVariable.removeFromRow(this.mRow);
            }
            n = this.mArrayNextIndices[n];
        }
        this.mHead = -1;
        this.mLast = -1;
        this.mDidFillOnce = false;
        this.currentSize = 0;
    }

    final boolean containsKey(SolverVariable solverVariable) {
        if (this.mHead == -1) {
            return false;
        }
        int n = this.mHead;
        for (int i = 0; n != -1 && i < this.currentSize; ++i) {
            if (this.mArrayIndices[n] == solverVariable.id) {
                return true;
            }
            n = this.mArrayNextIndices[n];
        }
        return false;
    }

    public void display() {
        int n = this.currentSize;
        System.out.print("{ ");
        for (int i = 0; i < n; ++i) {
            SolverVariable solverVariable = this.getVariable(i);
            if (solverVariable == null) continue;
            PrintStream printStream = System.out;
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append(solverVariable);
            stringBuilder.append(" = ");
            stringBuilder.append(this.getVariableValue(i));
            stringBuilder.append(" ");
            printStream.print(stringBuilder.toString());
        }
        System.out.println(" }");
    }

    void divideByAmount(float f) {
        int n = this.mHead;
        for (int i = 0; n != -1 && i < this.currentSize; ++i) {
            float[] arrf = this.mArrayValues;
            arrf[n] = arrf[n] / f;
            n = this.mArrayNextIndices[n];
        }
    }

    public final float get(SolverVariable solverVariable) {
        int n = this.mHead;
        for (int i = 0; n != -1 && i < this.currentSize; ++i) {
            if (this.mArrayIndices[n] == solverVariable.id) {
                return this.mArrayValues[n];
            }
            n = this.mArrayNextIndices[n];
        }
        return 0.0f;
    }

    SolverVariable getPivotCandidate() {
        block3 : {
            if (this.candidate != null) break block3;
            int n = this.mHead;
            SolverVariable solverVariable = null;
            for (int i = 0; n != -1 && i < this.currentSize; ++i) {
                SolverVariable solverVariable2;
                block4 : {
                    SolverVariable solverVariable3;
                    block5 : {
                        solverVariable2 = solverVariable;
                        if (this.mArrayValues[n] >= 0.0f) break block4;
                        solverVariable3 = this.mCache.mIndexedVariables[this.mArrayIndices[n]];
                        if (solverVariable == null) break block5;
                        solverVariable2 = solverVariable;
                        if (solverVariable.strength >= solverVariable3.strength) break block4;
                    }
                    solverVariable2 = solverVariable3;
                }
                n = this.mArrayNextIndices[n];
                solverVariable = solverVariable2;
            }
            return solverVariable;
        }
        return this.candidate;
    }

    SolverVariable getPivotCandidate(boolean[] arrbl, SolverVariable solverVariable) {
        int n = this.mHead;
        SolverVariable solverVariable2 = null;
        float f = 0.0f;
        for (int i = 0; n != -1 && i < this.currentSize; ++i) {
            float f2;
            SolverVariable solverVariable3;
            block5 : {
                SolverVariable solverVariable4;
                block7 : {
                    block6 : {
                        solverVariable3 = solverVariable2;
                        f2 = f;
                        if (this.mArrayValues[n] >= 0.0f) break block5;
                        solverVariable4 = this.mCache.mIndexedVariables[this.mArrayIndices[n]];
                        if (arrbl == null) break block6;
                        solverVariable3 = solverVariable2;
                        f2 = f;
                        if (arrbl[solverVariable4.id]) break block5;
                    }
                    solverVariable3 = solverVariable2;
                    f2 = f;
                    if (solverVariable4 == solverVariable) break block5;
                    if (solverVariable4.mType == SolverVariable.Type.SLACK) break block7;
                    solverVariable3 = solverVariable2;
                    f2 = f;
                    if (solverVariable4.mType != SolverVariable.Type.ERROR) break block5;
                }
                float f3 = this.mArrayValues[n];
                solverVariable3 = solverVariable2;
                f2 = f;
                if (f3 < f) {
                    solverVariable3 = solverVariable4;
                    f2 = f3;
                }
            }
            n = this.mArrayNextIndices[n];
            solverVariable2 = solverVariable3;
            f = f2;
        }
        return solverVariable2;
    }

    final SolverVariable getVariable(int n) {
        int n2 = this.mHead;
        for (int i = 0; n2 != -1 && i < this.currentSize; ++i) {
            if (i == n) {
                return this.mCache.mIndexedVariables[this.mArrayIndices[n2]];
            }
            n2 = this.mArrayNextIndices[n2];
        }
        return null;
    }

    final float getVariableValue(int n) {
        int n2 = this.mHead;
        for (int i = 0; n2 != -1 && i < this.currentSize; ++i) {
            if (i == n) {
                return this.mArrayValues[n2];
            }
            n2 = this.mArrayNextIndices[n2];
        }
        return 0.0f;
    }

    boolean hasAtLeastOnePositiveVariable() {
        int n = this.mHead;
        for (int i = 0; n != -1 && i < this.currentSize; ++i) {
            if (this.mArrayValues[n] > 0.0f) {
                return true;
            }
            n = this.mArrayNextIndices[n];
        }
        return false;
    }

    void invert() {
        int n = this.mHead;
        for (int i = 0; n != -1 && i < this.currentSize; ++i) {
            float[] arrf = this.mArrayValues;
            arrf[n] = arrf[n] * -1.0f;
            n = this.mArrayNextIndices[n];
        }
    }

    public final void put(SolverVariable solverVariable, float f) {
        int n;
        if (f == 0.0f) {
            this.remove(solverVariable, true);
            return;
        }
        if (this.mHead == -1) {
            this.mHead = 0;
            this.mArrayValues[this.mHead] = f;
            this.mArrayIndices[this.mHead] = solverVariable.id;
            this.mArrayNextIndices[this.mHead] = -1;
            ++solverVariable.usageInRowCount;
            solverVariable.addToRow(this.mRow);
            ++this.currentSize;
            if (!this.mDidFillOnce) {
                ++this.mLast;
                if (this.mLast >= this.mArrayIndices.length) {
                    this.mDidFillOnce = true;
                    this.mLast = this.mArrayIndices.length - 1;
                }
            }
            return;
        }
        int n2 = this.mHead;
        int n3 = -1;
        for (n = 0; n2 != -1 && n < this.currentSize; ++n) {
            if (this.mArrayIndices[n2] == solverVariable.id) {
                this.mArrayValues[n2] = f;
                return;
            }
            if (this.mArrayIndices[n2] < solverVariable.id) {
                n3 = n2;
            }
            n2 = this.mArrayNextIndices[n2];
        }
        n2 = this.mLast + 1;
        if (this.mDidFillOnce) {
            n2 = this.mArrayIndices[this.mLast] == -1 ? this.mLast : this.mArrayIndices.length;
        }
        n = n2;
        if (n2 >= this.mArrayIndices.length) {
            n = n2;
            if (this.currentSize < this.mArrayIndices.length) {
                int n4 = 0;
                do {
                    n = n2;
                    if (n4 >= this.mArrayIndices.length) break;
                    if (this.mArrayIndices[n4] == -1) {
                        n = n4;
                        break;
                    }
                    ++n4;
                } while (true);
            }
        }
        n2 = n;
        if (n >= this.mArrayIndices.length) {
            n2 = this.mArrayIndices.length;
            this.ROW_SIZE *= 2;
            this.mDidFillOnce = false;
            this.mLast = n2 - 1;
            this.mArrayValues = Arrays.copyOf(this.mArrayValues, this.ROW_SIZE);
            this.mArrayIndices = Arrays.copyOf(this.mArrayIndices, this.ROW_SIZE);
            this.mArrayNextIndices = Arrays.copyOf(this.mArrayNextIndices, this.ROW_SIZE);
        }
        this.mArrayIndices[n2] = solverVariable.id;
        this.mArrayValues[n2] = f;
        if (n3 != -1) {
            this.mArrayNextIndices[n2] = this.mArrayNextIndices[n3];
            this.mArrayNextIndices[n3] = n2;
        } else {
            this.mArrayNextIndices[n2] = this.mHead;
            this.mHead = n2;
        }
        ++solverVariable.usageInRowCount;
        solverVariable.addToRow(this.mRow);
        ++this.currentSize;
        if (!this.mDidFillOnce) {
            ++this.mLast;
        }
        if (this.currentSize >= this.mArrayIndices.length) {
            this.mDidFillOnce = true;
        }
        if (this.mLast >= this.mArrayIndices.length) {
            this.mDidFillOnce = true;
            this.mLast = this.mArrayIndices.length - 1;
        }
    }

    public final float remove(SolverVariable solverVariable, boolean bl) {
        if (this.candidate == solverVariable) {
            this.candidate = null;
        }
        if (this.mHead == -1) {
            return 0.0f;
        }
        int n = this.mHead;
        int n2 = -1;
        for (int i = 0; n != -1 && i < this.currentSize; ++i) {
            if (this.mArrayIndices[n] == solverVariable.id) {
                if (n == this.mHead) {
                    this.mHead = this.mArrayNextIndices[n];
                } else {
                    this.mArrayNextIndices[n2] = this.mArrayNextIndices[n];
                }
                if (bl) {
                    solverVariable.removeFromRow(this.mRow);
                }
                --solverVariable.usageInRowCount;
                --this.currentSize;
                this.mArrayIndices[n] = -1;
                if (this.mDidFillOnce) {
                    this.mLast = n;
                }
                return this.mArrayValues[n];
            }
            int n3 = this.mArrayNextIndices[n];
            n2 = n;
            n = n3;
        }
        return 0.0f;
    }

    int sizeInBytes() {
        return this.mArrayIndices.length * 4 * 3 + 0 + 36;
    }

    public String toString() {
        String string2 = "";
        int n = this.mHead;
        for (int i = 0; n != -1 && i < this.currentSize; ++i) {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append(string2);
            stringBuilder.append(" -> ");
            string2 = stringBuilder.toString();
            stringBuilder = new StringBuilder();
            stringBuilder.append(string2);
            stringBuilder.append(this.mArrayValues[n]);
            stringBuilder.append(" : ");
            string2 = stringBuilder.toString();
            stringBuilder = new StringBuilder();
            stringBuilder.append(string2);
            stringBuilder.append(this.mCache.mIndexedVariables[this.mArrayIndices[n]]);
            string2 = stringBuilder.toString();
            n = this.mArrayNextIndices[n];
        }
        return string2;
    }

    final void updateFromRow(ArrayRow arrayRow, ArrayRow arrayRow2, boolean bl) {
        int n = this.mHead;
        do {
            for (int i = 0; n != -1 && i < this.currentSize; ++i) {
                if (this.mArrayIndices[n] == arrayRow2.variable.id) {
                    float f = this.mArrayValues[n];
                    this.remove(arrayRow2.variable, bl);
                    ArrayLinkedVariables arrayLinkedVariables = arrayRow2.variables;
                    i = arrayLinkedVariables.mHead;
                    for (n = 0; i != -1 && n < arrayLinkedVariables.currentSize; ++n) {
                        this.add(this.mCache.mIndexedVariables[arrayLinkedVariables.mArrayIndices[i]], arrayLinkedVariables.mArrayValues[i] * f, bl);
                        i = arrayLinkedVariables.mArrayNextIndices[i];
                    }
                    arrayRow.constantValue += arrayRow2.constantValue * f;
                    if (bl) {
                        arrayRow2.variable.removeFromRow(arrayRow);
                    }
                    n = this.mHead;
                    continue;
                }
                n = this.mArrayNextIndices[n];
            }
            break;
        } while (true);
    }

    void updateFromSystem(ArrayRow arrayRow, ArrayRow[] arrarrayRow) {
        int n = this.mHead;
        do {
            for (int i = 0; n != -1 && i < this.currentSize; ++i) {
                Object object = this.mCache.mIndexedVariables[this.mArrayIndices[n]];
                if (object.definitionId != -1) {
                    float f = this.mArrayValues[n];
                    this.remove((SolverVariable)object, true);
                    object = arrarrayRow[object.definitionId];
                    if (!object.isSimpleDefinition) {
                        ArrayLinkedVariables arrayLinkedVariables = object.variables;
                        i = arrayLinkedVariables.mHead;
                        for (n = 0; i != -1 && n < arrayLinkedVariables.currentSize; ++n) {
                            this.add(this.mCache.mIndexedVariables[arrayLinkedVariables.mArrayIndices[i]], arrayLinkedVariables.mArrayValues[i] * f, true);
                            i = arrayLinkedVariables.mArrayNextIndices[i];
                        }
                    }
                    arrayRow.constantValue += object.constantValue * f;
                    object.variable.removeFromRow(arrayRow);
                    n = this.mHead;
                    continue;
                }
                n = this.mArrayNextIndices[n];
            }
            break;
        } while (true);
    }
}

