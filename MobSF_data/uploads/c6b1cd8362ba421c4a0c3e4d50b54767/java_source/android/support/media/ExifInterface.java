/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.content.res.AssetManager
 *  android.content.res.AssetManager$AssetInputStream
 *  android.graphics.Bitmap
 *  android.graphics.Bitmap$Config
 *  android.graphics.BitmapFactory
 *  android.location.Location
 *  android.util.Log
 *  android.util.Pair
 */
package android.support.media;

import android.content.res.AssetManager;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.location.Location;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.annotation.RestrictTo;
import android.util.Log;
import android.util.Pair;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.Closeable;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.lang.annotation.Annotation;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.charset.Charset;
import java.text.ParsePosition;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TimeZone;
import java.util.concurrent.TimeUnit;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class ExifInterface {
    public static final short ALTITUDE_ABOVE_SEA_LEVEL = 0;
    public static final short ALTITUDE_BELOW_SEA_LEVEL = 1;
    private static final Charset ASCII;
    public static final int[] BITS_PER_SAMPLE_GREYSCALE_1;
    public static final int[] BITS_PER_SAMPLE_GREYSCALE_2;
    public static final int[] BITS_PER_SAMPLE_RGB;
    static final short BYTE_ALIGN_II = 18761;
    static final short BYTE_ALIGN_MM = 19789;
    public static final int COLOR_SPACE_S_RGB = 1;
    public static final int COLOR_SPACE_UNCALIBRATED = 65535;
    public static final short CONTRAST_HARD = 2;
    public static final short CONTRAST_NORMAL = 0;
    public static final short CONTRAST_SOFT = 1;
    public static final int DATA_DEFLATE_ZIP = 8;
    public static final int DATA_HUFFMAN_COMPRESSED = 2;
    public static final int DATA_JPEG = 6;
    public static final int DATA_JPEG_COMPRESSED = 7;
    public static final int DATA_LOSSY_JPEG = 34892;
    public static final int DATA_PACK_BITS_COMPRESSED = 32773;
    public static final int DATA_UNCOMPRESSED = 1;
    private static final boolean DEBUG = false;
    private static final byte[] EXIF_ASCII_PREFIX;
    private static final ExifTag[] EXIF_POINTER_TAGS;
    static final ExifTag[][] EXIF_TAGS;
    public static final short EXPOSURE_MODE_AUTO = 0;
    public static final short EXPOSURE_MODE_AUTO_BRACKET = 2;
    public static final short EXPOSURE_MODE_MANUAL = 1;
    public static final short EXPOSURE_PROGRAM_ACTION = 6;
    public static final short EXPOSURE_PROGRAM_APERTURE_PRIORITY = 3;
    public static final short EXPOSURE_PROGRAM_CREATIVE = 5;
    public static final short EXPOSURE_PROGRAM_LANDSCAPE_MODE = 8;
    public static final short EXPOSURE_PROGRAM_MANUAL = 1;
    public static final short EXPOSURE_PROGRAM_NORMAL = 2;
    public static final short EXPOSURE_PROGRAM_NOT_DEFINED = 0;
    public static final short EXPOSURE_PROGRAM_PORTRAIT_MODE = 7;
    public static final short EXPOSURE_PROGRAM_SHUTTER_PRIORITY = 4;
    public static final short FILE_SOURCE_DSC = 3;
    public static final short FILE_SOURCE_OTHER = 0;
    public static final short FILE_SOURCE_REFLEX_SCANNER = 2;
    public static final short FILE_SOURCE_TRANSPARENT_SCANNER = 1;
    public static final short FLAG_FLASH_FIRED = 1;
    public static final short FLAG_FLASH_MODE_AUTO = 24;
    public static final short FLAG_FLASH_MODE_COMPULSORY_FIRING = 8;
    public static final short FLAG_FLASH_MODE_COMPULSORY_SUPPRESSION = 16;
    public static final short FLAG_FLASH_NO_FLASH_FUNCTION = 32;
    public static final short FLAG_FLASH_RED_EYE_SUPPORTED = 64;
    public static final short FLAG_FLASH_RETURN_LIGHT_DETECTED = 6;
    public static final short FLAG_FLASH_RETURN_LIGHT_NOT_DETECTED = 4;
    private static final List<Integer> FLIPPED_ROTATION_ORDER;
    public static final short FORMAT_CHUNKY = 1;
    public static final short FORMAT_PLANAR = 2;
    public static final short GAIN_CONTROL_HIGH_GAIN_DOWN = 4;
    public static final short GAIN_CONTROL_HIGH_GAIN_UP = 2;
    public static final short GAIN_CONTROL_LOW_GAIN_DOWN = 3;
    public static final short GAIN_CONTROL_LOW_GAIN_UP = 1;
    public static final short GAIN_CONTROL_NONE = 0;
    public static final String GPS_DIRECTION_MAGNETIC = "M";
    public static final String GPS_DIRECTION_TRUE = "T";
    public static final String GPS_DISTANCE_KILOMETERS = "K";
    public static final String GPS_DISTANCE_MILES = "M";
    public static final String GPS_DISTANCE_NAUTICAL_MILES = "N";
    public static final String GPS_MEASUREMENT_2D = "2";
    public static final String GPS_MEASUREMENT_3D = "3";
    public static final short GPS_MEASUREMENT_DIFFERENTIAL_CORRECTED = 1;
    public static final String GPS_MEASUREMENT_INTERRUPTED = "V";
    public static final String GPS_MEASUREMENT_IN_PROGRESS = "A";
    public static final short GPS_MEASUREMENT_NO_DIFFERENTIAL = 0;
    public static final String GPS_SPEED_KILOMETERS_PER_HOUR = "K";
    public static final String GPS_SPEED_KNOTS = "N";
    public static final String GPS_SPEED_MILES_PER_HOUR = "M";
    static final byte[] IDENTIFIER_EXIF_APP1;
    private static final ExifTag[] IFD_EXIF_TAGS;
    private static final int IFD_FORMAT_BYTE = 1;
    static final int[] IFD_FORMAT_BYTES_PER_FORMAT;
    private static final int IFD_FORMAT_DOUBLE = 12;
    private static final int IFD_FORMAT_IFD = 13;
    static final String[] IFD_FORMAT_NAMES;
    private static final int IFD_FORMAT_SBYTE = 6;
    private static final int IFD_FORMAT_SINGLE = 11;
    private static final int IFD_FORMAT_SLONG = 9;
    private static final int IFD_FORMAT_SRATIONAL = 10;
    private static final int IFD_FORMAT_SSHORT = 8;
    private static final int IFD_FORMAT_STRING = 2;
    private static final int IFD_FORMAT_ULONG = 4;
    private static final int IFD_FORMAT_UNDEFINED = 7;
    private static final int IFD_FORMAT_URATIONAL = 5;
    private static final int IFD_FORMAT_USHORT = 3;
    private static final ExifTag[] IFD_GPS_TAGS;
    private static final ExifTag[] IFD_INTEROPERABILITY_TAGS;
    private static final int IFD_OFFSET = 8;
    private static final ExifTag[] IFD_THUMBNAIL_TAGS;
    private static final ExifTag[] IFD_TIFF_TAGS;
    private static final int IFD_TYPE_EXIF = 1;
    private static final int IFD_TYPE_GPS = 2;
    private static final int IFD_TYPE_INTEROPERABILITY = 3;
    private static final int IFD_TYPE_ORF_CAMERA_SETTINGS = 7;
    private static final int IFD_TYPE_ORF_IMAGE_PROCESSING = 8;
    private static final int IFD_TYPE_ORF_MAKER_NOTE = 6;
    private static final int IFD_TYPE_PEF = 9;
    static final int IFD_TYPE_PREVIEW = 5;
    static final int IFD_TYPE_PRIMARY = 0;
    static final int IFD_TYPE_THUMBNAIL = 4;
    private static final int IMAGE_TYPE_ARW = 1;
    private static final int IMAGE_TYPE_CR2 = 2;
    private static final int IMAGE_TYPE_DNG = 3;
    private static final int IMAGE_TYPE_JPEG = 4;
    private static final int IMAGE_TYPE_NEF = 5;
    private static final int IMAGE_TYPE_NRW = 6;
    private static final int IMAGE_TYPE_ORF = 7;
    private static final int IMAGE_TYPE_PEF = 8;
    private static final int IMAGE_TYPE_RAF = 9;
    private static final int IMAGE_TYPE_RW2 = 10;
    private static final int IMAGE_TYPE_SRW = 11;
    private static final int IMAGE_TYPE_UNKNOWN = 0;
    private static final ExifTag JPEG_INTERCHANGE_FORMAT_LENGTH_TAG;
    private static final ExifTag JPEG_INTERCHANGE_FORMAT_TAG;
    static final byte[] JPEG_SIGNATURE;
    public static final String LATITUDE_NORTH = "N";
    public static final String LATITUDE_SOUTH = "S";
    public static final short LIGHT_SOURCE_CLOUDY_WEATHER = 10;
    public static final short LIGHT_SOURCE_COOL_WHITE_FLUORESCENT = 14;
    public static final short LIGHT_SOURCE_D50 = 23;
    public static final short LIGHT_SOURCE_D55 = 20;
    public static final short LIGHT_SOURCE_D65 = 21;
    public static final short LIGHT_SOURCE_D75 = 22;
    public static final short LIGHT_SOURCE_DAYLIGHT = 1;
    public static final short LIGHT_SOURCE_DAYLIGHT_FLUORESCENT = 12;
    public static final short LIGHT_SOURCE_DAY_WHITE_FLUORESCENT = 13;
    public static final short LIGHT_SOURCE_FINE_WEATHER = 9;
    public static final short LIGHT_SOURCE_FLASH = 4;
    public static final short LIGHT_SOURCE_FLUORESCENT = 2;
    public static final short LIGHT_SOURCE_ISO_STUDIO_TUNGSTEN = 24;
    public static final short LIGHT_SOURCE_OTHER = 255;
    public static final short LIGHT_SOURCE_SHADE = 11;
    public static final short LIGHT_SOURCE_STANDARD_LIGHT_A = 17;
    public static final short LIGHT_SOURCE_STANDARD_LIGHT_B = 18;
    public static final short LIGHT_SOURCE_STANDARD_LIGHT_C = 19;
    public static final short LIGHT_SOURCE_TUNGSTEN = 3;
    public static final short LIGHT_SOURCE_UNKNOWN = 0;
    public static final short LIGHT_SOURCE_WARM_WHITE_FLUORESCENT = 16;
    public static final short LIGHT_SOURCE_WHITE_FLUORESCENT = 15;
    public static final String LONGITUDE_EAST = "E";
    public static final String LONGITUDE_WEST = "W";
    static final byte MARKER = -1;
    static final byte MARKER_APP1 = -31;
    private static final byte MARKER_COM = -2;
    static final byte MARKER_EOI = -39;
    private static final byte MARKER_SOF0 = -64;
    private static final byte MARKER_SOF1 = -63;
    private static final byte MARKER_SOF10 = -54;
    private static final byte MARKER_SOF11 = -53;
    private static final byte MARKER_SOF13 = -51;
    private static final byte MARKER_SOF14 = -50;
    private static final byte MARKER_SOF15 = -49;
    private static final byte MARKER_SOF2 = -62;
    private static final byte MARKER_SOF3 = -61;
    private static final byte MARKER_SOF5 = -59;
    private static final byte MARKER_SOF6 = -58;
    private static final byte MARKER_SOF7 = -57;
    private static final byte MARKER_SOF9 = -55;
    private static final byte MARKER_SOI = -40;
    private static final byte MARKER_SOS = -38;
    private static final int MAX_THUMBNAIL_SIZE = 512;
    public static final short METERING_MODE_AVERAGE = 1;
    public static final short METERING_MODE_CENTER_WEIGHT_AVERAGE = 2;
    public static final short METERING_MODE_MULTI_SPOT = 4;
    public static final short METERING_MODE_OTHER = 255;
    public static final short METERING_MODE_PARTIAL = 6;
    public static final short METERING_MODE_PATTERN = 5;
    public static final short METERING_MODE_SPOT = 3;
    public static final short METERING_MODE_UNKNOWN = 0;
    private static final ExifTag[] ORF_CAMERA_SETTINGS_TAGS;
    private static final ExifTag[] ORF_IMAGE_PROCESSING_TAGS;
    private static final byte[] ORF_MAKER_NOTE_HEADER_1;
    private static final int ORF_MAKER_NOTE_HEADER_1_SIZE = 8;
    private static final byte[] ORF_MAKER_NOTE_HEADER_2;
    private static final int ORF_MAKER_NOTE_HEADER_2_SIZE = 12;
    private static final ExifTag[] ORF_MAKER_NOTE_TAGS;
    private static final short ORF_SIGNATURE_1 = 20306;
    private static final short ORF_SIGNATURE_2 = 21330;
    public static final int ORIENTATION_FLIP_HORIZONTAL = 2;
    public static final int ORIENTATION_FLIP_VERTICAL = 4;
    public static final int ORIENTATION_NORMAL = 1;
    public static final int ORIENTATION_ROTATE_180 = 3;
    public static final int ORIENTATION_ROTATE_270 = 8;
    public static final int ORIENTATION_ROTATE_90 = 6;
    public static final int ORIENTATION_TRANSPOSE = 5;
    public static final int ORIENTATION_TRANSVERSE = 7;
    public static final int ORIENTATION_UNDEFINED = 0;
    public static final int ORIGINAL_RESOLUTION_IMAGE = 0;
    private static final int PEF_MAKER_NOTE_SKIP_SIZE = 6;
    private static final String PEF_SIGNATURE = "PENTAX";
    private static final ExifTag[] PEF_TAGS;
    public static final int PHOTOMETRIC_INTERPRETATION_BLACK_IS_ZERO = 1;
    public static final int PHOTOMETRIC_INTERPRETATION_RGB = 2;
    public static final int PHOTOMETRIC_INTERPRETATION_WHITE_IS_ZERO = 0;
    public static final int PHOTOMETRIC_INTERPRETATION_YCBCR = 6;
    private static final int RAF_INFO_SIZE = 160;
    private static final int RAF_JPEG_LENGTH_VALUE_SIZE = 4;
    private static final int RAF_OFFSET_TO_JPEG_IMAGE_OFFSET = 84;
    private static final String RAF_SIGNATURE = "FUJIFILMCCD-RAW";
    public static final int REDUCED_RESOLUTION_IMAGE = 1;
    public static final short RENDERED_PROCESS_CUSTOM = 1;
    public static final short RENDERED_PROCESS_NORMAL = 0;
    public static final short RESOLUTION_UNIT_CENTIMETERS = 3;
    public static final short RESOLUTION_UNIT_INCHES = 2;
    private static final List<Integer> ROTATION_ORDER;
    private static final short RW2_SIGNATURE = 85;
    public static final short SATURATION_HIGH = 0;
    public static final short SATURATION_LOW = 0;
    public static final short SATURATION_NORMAL = 0;
    public static final short SCENE_CAPTURE_TYPE_LANDSCAPE = 1;
    public static final short SCENE_CAPTURE_TYPE_NIGHT = 3;
    public static final short SCENE_CAPTURE_TYPE_PORTRAIT = 2;
    public static final short SCENE_CAPTURE_TYPE_STANDARD = 0;
    public static final short SCENE_TYPE_DIRECTLY_PHOTOGRAPHED = 1;
    public static final short SENSITIVITY_TYPE_ISO_SPEED = 3;
    public static final short SENSITIVITY_TYPE_REI = 2;
    public static final short SENSITIVITY_TYPE_REI_AND_ISO = 6;
    public static final short SENSITIVITY_TYPE_SOS = 1;
    public static final short SENSITIVITY_TYPE_SOS_AND_ISO = 5;
    public static final short SENSITIVITY_TYPE_SOS_AND_REI = 4;
    public static final short SENSITIVITY_TYPE_SOS_AND_REI_AND_ISO = 7;
    public static final short SENSITIVITY_TYPE_UNKNOWN = 0;
    public static final short SENSOR_TYPE_COLOR_SEQUENTIAL = 5;
    public static final short SENSOR_TYPE_COLOR_SEQUENTIAL_LINEAR = 8;
    public static final short SENSOR_TYPE_NOT_DEFINED = 1;
    public static final short SENSOR_TYPE_ONE_CHIP = 2;
    public static final short SENSOR_TYPE_THREE_CHIP = 4;
    public static final short SENSOR_TYPE_TRILINEAR = 7;
    public static final short SENSOR_TYPE_TWO_CHIP = 3;
    public static final short SHARPNESS_HARD = 2;
    public static final short SHARPNESS_NORMAL = 0;
    public static final short SHARPNESS_SOFT = 1;
    private static final int SIGNATURE_CHECK_SIZE = 5000;
    static final byte START_CODE = 42;
    public static final short SUBJECT_DISTANCE_RANGE_CLOSE_VIEW = 2;
    public static final short SUBJECT_DISTANCE_RANGE_DISTANT_VIEW = 3;
    public static final short SUBJECT_DISTANCE_RANGE_MACRO = 1;
    public static final short SUBJECT_DISTANCE_RANGE_UNKNOWN = 0;
    private static final String TAG = "ExifInterface";
    public static final String TAG_APERTURE_VALUE = "ApertureValue";
    public static final String TAG_ARTIST = "Artist";
    public static final String TAG_BITS_PER_SAMPLE = "BitsPerSample";
    public static final String TAG_BODY_SERIAL_NUMBER = "BodySerialNumber";
    public static final String TAG_BRIGHTNESS_VALUE = "BrightnessValue";
    public static final String TAG_CAMARA_OWNER_NAME = "CameraOwnerName";
    public static final String TAG_CFA_PATTERN = "CFAPattern";
    public static final String TAG_COLOR_SPACE = "ColorSpace";
    public static final String TAG_COMPONENTS_CONFIGURATION = "ComponentsConfiguration";
    public static final String TAG_COMPRESSED_BITS_PER_PIXEL = "CompressedBitsPerPixel";
    public static final String TAG_COMPRESSION = "Compression";
    public static final String TAG_CONTRAST = "Contrast";
    public static final String TAG_COPYRIGHT = "Copyright";
    public static final String TAG_CUSTOM_RENDERED = "CustomRendered";
    public static final String TAG_DATETIME = "DateTime";
    public static final String TAG_DATETIME_DIGITIZED = "DateTimeDigitized";
    public static final String TAG_DATETIME_ORIGINAL = "DateTimeOriginal";
    public static final String TAG_DEFAULT_CROP_SIZE = "DefaultCropSize";
    public static final String TAG_DEVICE_SETTING_DESCRIPTION = "DeviceSettingDescription";
    public static final String TAG_DIGITAL_ZOOM_RATIO = "DigitalZoomRatio";
    public static final String TAG_DNG_VERSION = "DNGVersion";
    private static final String TAG_EXIF_IFD_POINTER = "ExifIFDPointer";
    public static final String TAG_EXIF_VERSION = "ExifVersion";
    public static final String TAG_EXPOSURE_BIAS_VALUE = "ExposureBiasValue";
    public static final String TAG_EXPOSURE_INDEX = "ExposureIndex";
    public static final String TAG_EXPOSURE_MODE = "ExposureMode";
    public static final String TAG_EXPOSURE_PROGRAM = "ExposureProgram";
    public static final String TAG_EXPOSURE_TIME = "ExposureTime";
    public static final String TAG_FILE_SOURCE = "FileSource";
    public static final String TAG_FLASH = "Flash";
    public static final String TAG_FLASHPIX_VERSION = "FlashpixVersion";
    public static final String TAG_FLASH_ENERGY = "FlashEnergy";
    public static final String TAG_FOCAL_LENGTH = "FocalLength";
    public static final String TAG_FOCAL_LENGTH_IN_35MM_FILM = "FocalLengthIn35mmFilm";
    public static final String TAG_FOCAL_PLANE_RESOLUTION_UNIT = "FocalPlaneResolutionUnit";
    public static final String TAG_FOCAL_PLANE_X_RESOLUTION = "FocalPlaneXResolution";
    public static final String TAG_FOCAL_PLANE_Y_RESOLUTION = "FocalPlaneYResolution";
    public static final String TAG_F_NUMBER = "FNumber";
    public static final String TAG_GAIN_CONTROL = "GainControl";
    public static final String TAG_GAMMA = "Gamma";
    public static final String TAG_GPS_ALTITUDE = "GPSAltitude";
    public static final String TAG_GPS_ALTITUDE_REF = "GPSAltitudeRef";
    public static final String TAG_GPS_AREA_INFORMATION = "GPSAreaInformation";
    public static final String TAG_GPS_DATESTAMP = "GPSDateStamp";
    public static final String TAG_GPS_DEST_BEARING = "GPSDestBearing";
    public static final String TAG_GPS_DEST_BEARING_REF = "GPSDestBearingRef";
    public static final String TAG_GPS_DEST_DISTANCE = "GPSDestDistance";
    public static final String TAG_GPS_DEST_DISTANCE_REF = "GPSDestDistanceRef";
    public static final String TAG_GPS_DEST_LATITUDE = "GPSDestLatitude";
    public static final String TAG_GPS_DEST_LATITUDE_REF = "GPSDestLatitudeRef";
    public static final String TAG_GPS_DEST_LONGITUDE = "GPSDestLongitude";
    public static final String TAG_GPS_DEST_LONGITUDE_REF = "GPSDestLongitudeRef";
    public static final String TAG_GPS_DIFFERENTIAL = "GPSDifferential";
    public static final String TAG_GPS_DOP = "GPSDOP";
    public static final String TAG_GPS_H_POSITIONING_ERROR = "GPSHPositioningError";
    public static final String TAG_GPS_IMG_DIRECTION = "GPSImgDirection";
    public static final String TAG_GPS_IMG_DIRECTION_REF = "GPSImgDirectionRef";
    private static final String TAG_GPS_INFO_IFD_POINTER = "GPSInfoIFDPointer";
    public static final String TAG_GPS_LATITUDE = "GPSLatitude";
    public static final String TAG_GPS_LATITUDE_REF = "GPSLatitudeRef";
    public static final String TAG_GPS_LONGITUDE = "GPSLongitude";
    public static final String TAG_GPS_LONGITUDE_REF = "GPSLongitudeRef";
    public static final String TAG_GPS_MAP_DATUM = "GPSMapDatum";
    public static final String TAG_GPS_MEASURE_MODE = "GPSMeasureMode";
    public static final String TAG_GPS_PROCESSING_METHOD = "GPSProcessingMethod";
    public static final String TAG_GPS_SATELLITES = "GPSSatellites";
    public static final String TAG_GPS_SPEED = "GPSSpeed";
    public static final String TAG_GPS_SPEED_REF = "GPSSpeedRef";
    public static final String TAG_GPS_STATUS = "GPSStatus";
    public static final String TAG_GPS_TIMESTAMP = "GPSTimeStamp";
    public static final String TAG_GPS_TRACK = "GPSTrack";
    public static final String TAG_GPS_TRACK_REF = "GPSTrackRef";
    public static final String TAG_GPS_VERSION_ID = "GPSVersionID";
    private static final String TAG_HAS_THUMBNAIL = "HasThumbnail";
    public static final String TAG_IMAGE_DESCRIPTION = "ImageDescription";
    public static final String TAG_IMAGE_LENGTH = "ImageLength";
    public static final String TAG_IMAGE_UNIQUE_ID = "ImageUniqueID";
    public static final String TAG_IMAGE_WIDTH = "ImageWidth";
    private static final String TAG_INTEROPERABILITY_IFD_POINTER = "InteroperabilityIFDPointer";
    public static final String TAG_INTEROPERABILITY_INDEX = "InteroperabilityIndex";
    public static final String TAG_ISO_SPEED = "ISOSpeed";
    public static final String TAG_ISO_SPEED_LATITUDE_YYY = "ISOSpeedLatitudeyyy";
    public static final String TAG_ISO_SPEED_LATITUDE_ZZZ = "ISOSpeedLatitudezzz";
    @Deprecated
    public static final String TAG_ISO_SPEED_RATINGS = "ISOSpeedRatings";
    public static final String TAG_JPEG_INTERCHANGE_FORMAT = "JPEGInterchangeFormat";
    public static final String TAG_JPEG_INTERCHANGE_FORMAT_LENGTH = "JPEGInterchangeFormatLength";
    public static final String TAG_LENS_MAKE = "LensMake";
    public static final String TAG_LENS_MODEL = "LensModel";
    public static final String TAG_LENS_SERIAL_NUMBER = "LensSerialNumber";
    public static final String TAG_LENS_SPECIFICATION = "LensSpecification";
    public static final String TAG_LIGHT_SOURCE = "LightSource";
    public static final String TAG_MAKE = "Make";
    public static final String TAG_MAKER_NOTE = "MakerNote";
    public static final String TAG_MAX_APERTURE_VALUE = "MaxApertureValue";
    public static final String TAG_METERING_MODE = "MeteringMode";
    public static final String TAG_MODEL = "Model";
    public static final String TAG_NEW_SUBFILE_TYPE = "NewSubfileType";
    public static final String TAG_OECF = "OECF";
    public static final String TAG_ORF_ASPECT_FRAME = "AspectFrame";
    private static final String TAG_ORF_CAMERA_SETTINGS_IFD_POINTER = "CameraSettingsIFDPointer";
    private static final String TAG_ORF_IMAGE_PROCESSING_IFD_POINTER = "ImageProcessingIFDPointer";
    public static final String TAG_ORF_PREVIEW_IMAGE_LENGTH = "PreviewImageLength";
    public static final String TAG_ORF_PREVIEW_IMAGE_START = "PreviewImageStart";
    public static final String TAG_ORF_THUMBNAIL_IMAGE = "ThumbnailImage";
    public static final String TAG_ORIENTATION = "Orientation";
    public static final String TAG_PHOTOGRAPHIC_SENSITIVITY = "PhotographicSensitivity";
    public static final String TAG_PHOTOMETRIC_INTERPRETATION = "PhotometricInterpretation";
    public static final String TAG_PIXEL_X_DIMENSION = "PixelXDimension";
    public static final String TAG_PIXEL_Y_DIMENSION = "PixelYDimension";
    public static final String TAG_PLANAR_CONFIGURATION = "PlanarConfiguration";
    public static final String TAG_PRIMARY_CHROMATICITIES = "PrimaryChromaticities";
    private static final ExifTag TAG_RAF_IMAGE_SIZE;
    public static final String TAG_RECOMMENDED_EXPOSURE_INDEX = "RecommendedExposureIndex";
    public static final String TAG_REFERENCE_BLACK_WHITE = "ReferenceBlackWhite";
    public static final String TAG_RELATED_SOUND_FILE = "RelatedSoundFile";
    public static final String TAG_RESOLUTION_UNIT = "ResolutionUnit";
    public static final String TAG_ROWS_PER_STRIP = "RowsPerStrip";
    public static final String TAG_RW2_ISO = "ISO";
    public static final String TAG_RW2_JPG_FROM_RAW = "JpgFromRaw";
    public static final String TAG_RW2_SENSOR_BOTTOM_BORDER = "SensorBottomBorder";
    public static final String TAG_RW2_SENSOR_LEFT_BORDER = "SensorLeftBorder";
    public static final String TAG_RW2_SENSOR_RIGHT_BORDER = "SensorRightBorder";
    public static final String TAG_RW2_SENSOR_TOP_BORDER = "SensorTopBorder";
    public static final String TAG_SAMPLES_PER_PIXEL = "SamplesPerPixel";
    public static final String TAG_SATURATION = "Saturation";
    public static final String TAG_SCENE_CAPTURE_TYPE = "SceneCaptureType";
    public static final String TAG_SCENE_TYPE = "SceneType";
    public static final String TAG_SENSING_METHOD = "SensingMethod";
    public static final String TAG_SENSITIVITY_TYPE = "SensitivityType";
    public static final String TAG_SHARPNESS = "Sharpness";
    public static final String TAG_SHUTTER_SPEED_VALUE = "ShutterSpeedValue";
    public static final String TAG_SOFTWARE = "Software";
    public static final String TAG_SPATIAL_FREQUENCY_RESPONSE = "SpatialFrequencyResponse";
    public static final String TAG_SPECTRAL_SENSITIVITY = "SpectralSensitivity";
    public static final String TAG_STANDARD_OUTPUT_SENSITIVITY = "StandardOutputSensitivity";
    public static final String TAG_STRIP_BYTE_COUNTS = "StripByteCounts";
    public static final String TAG_STRIP_OFFSETS = "StripOffsets";
    public static final String TAG_SUBFILE_TYPE = "SubfileType";
    public static final String TAG_SUBJECT_AREA = "SubjectArea";
    public static final String TAG_SUBJECT_DISTANCE = "SubjectDistance";
    public static final String TAG_SUBJECT_DISTANCE_RANGE = "SubjectDistanceRange";
    public static final String TAG_SUBJECT_LOCATION = "SubjectLocation";
    public static final String TAG_SUBSEC_TIME = "SubSecTime";
    public static final String TAG_SUBSEC_TIME_DIGITIZED = "SubSecTimeDigitized";
    public static final String TAG_SUBSEC_TIME_ORIGINAL = "SubSecTimeOriginal";
    private static final String TAG_SUB_IFD_POINTER = "SubIFDPointer";
    private static final String TAG_THUMBNAIL_DATA = "ThumbnailData";
    public static final String TAG_THUMBNAIL_IMAGE_LENGTH = "ThumbnailImageLength";
    public static final String TAG_THUMBNAIL_IMAGE_WIDTH = "ThumbnailImageWidth";
    private static final String TAG_THUMBNAIL_LENGTH = "ThumbnailLength";
    private static final String TAG_THUMBNAIL_OFFSET = "ThumbnailOffset";
    public static final String TAG_TRANSFER_FUNCTION = "TransferFunction";
    public static final String TAG_USER_COMMENT = "UserComment";
    public static final String TAG_WHITE_BALANCE = "WhiteBalance";
    public static final String TAG_WHITE_POINT = "WhitePoint";
    public static final String TAG_X_RESOLUTION = "XResolution";
    public static final String TAG_Y_CB_CR_COEFFICIENTS = "YCbCrCoefficients";
    public static final String TAG_Y_CB_CR_POSITIONING = "YCbCrPositioning";
    public static final String TAG_Y_CB_CR_SUB_SAMPLING = "YCbCrSubSampling";
    public static final String TAG_Y_RESOLUTION = "YResolution";
    @Deprecated
    public static final int WHITEBALANCE_AUTO = 0;
    @Deprecated
    public static final int WHITEBALANCE_MANUAL = 1;
    public static final short WHITE_BALANCE_AUTO = 0;
    public static final short WHITE_BALANCE_MANUAL = 1;
    public static final short Y_CB_CR_POSITIONING_CENTERED = 1;
    public static final short Y_CB_CR_POSITIONING_CO_SITED = 2;
    private static final HashMap<Integer, Integer> sExifPointerTagMap;
    private static final HashMap<Integer, ExifTag>[] sExifTagMapsForReading;
    private static final HashMap<String, ExifTag>[] sExifTagMapsForWriting;
    private static SimpleDateFormat sFormatter;
    private static final Pattern sGpsTimestampPattern;
    private static final Pattern sNonZeroTimePattern;
    private static final HashSet<String> sTagSetForCompatibility;
    private final AssetManager.AssetInputStream mAssetInputStream;
    private final HashMap<String, ExifAttribute>[] mAttributes;
    private ByteOrder mExifByteOrder;
    private int mExifOffset;
    private final String mFilename;
    private boolean mHasThumbnail;
    private boolean mIsSupportedFile;
    private int mMimeType;
    private int mOrfMakerNoteOffset;
    private int mOrfThumbnailLength;
    private int mOrfThumbnailOffset;
    private int mRw2JpgFromRawOffset;
    private byte[] mThumbnailBytes;
    private int mThumbnailCompression;
    private int mThumbnailLength;
    private int mThumbnailOffset;

    static {
        ROTATION_ORDER = Arrays.asList(1, 6, 3, 8);
        FLIPPED_ROTATION_ORDER = Arrays.asList(2, 7, 4, 5);
        BITS_PER_SAMPLE_RGB = new int[]{8, 8, 8};
        BITS_PER_SAMPLE_GREYSCALE_1 = new int[]{4};
        BITS_PER_SAMPLE_GREYSCALE_2 = new int[]{8};
        JPEG_SIGNATURE = new byte[]{-1, -40, -1};
        ORF_MAKER_NOTE_HEADER_1 = new byte[]{79, 76, 89, 77, 80, 0};
        ORF_MAKER_NOTE_HEADER_2 = new byte[]{79, 76, 89, 77, 80, 85, 83, 0, 73, 73};
        IFD_FORMAT_NAMES = new String[]{"", "BYTE", "STRING", "USHORT", "ULONG", "URATIONAL", "SBYTE", "UNDEFINED", "SSHORT", "SLONG", "SRATIONAL", "SINGLE", "DOUBLE"};
        IFD_FORMAT_BYTES_PER_FORMAT = new int[]{0, 1, 1, 2, 4, 8, 1, 1, 2, 4, 8, 4, 8, 1};
        EXIF_ASCII_PREFIX = new byte[]{65, 83, 67, 73, 73, 0, 0, 0};
        IFD_TIFF_TAGS = new ExifTag[]{new ExifTag(TAG_NEW_SUBFILE_TYPE, 254, 4), new ExifTag(TAG_SUBFILE_TYPE, 255, 4), new ExifTag(TAG_IMAGE_WIDTH, 256, 3, 4), new ExifTag(TAG_IMAGE_LENGTH, 257, 3, 4), new ExifTag(TAG_BITS_PER_SAMPLE, 258, 3), new ExifTag(TAG_COMPRESSION, 259, 3), new ExifTag(TAG_PHOTOMETRIC_INTERPRETATION, 262, 3), new ExifTag(TAG_IMAGE_DESCRIPTION, 270, 2), new ExifTag(TAG_MAKE, 271, 2), new ExifTag(TAG_MODEL, 272, 2), new ExifTag(TAG_STRIP_OFFSETS, 273, 3, 4), new ExifTag(TAG_ORIENTATION, 274, 3), new ExifTag(TAG_SAMPLES_PER_PIXEL, 277, 3), new ExifTag(TAG_ROWS_PER_STRIP, 278, 3, 4), new ExifTag(TAG_STRIP_BYTE_COUNTS, 279, 3, 4), new ExifTag(TAG_X_RESOLUTION, 282, 5), new ExifTag(TAG_Y_RESOLUTION, 283, 5), new ExifTag(TAG_PLANAR_CONFIGURATION, 284, 3), new ExifTag(TAG_RESOLUTION_UNIT, 296, 3), new ExifTag(TAG_TRANSFER_FUNCTION, 301, 3), new ExifTag(TAG_SOFTWARE, 305, 2), new ExifTag(TAG_DATETIME, 306, 2), new ExifTag(TAG_ARTIST, 315, 2), new ExifTag(TAG_WHITE_POINT, 318, 5), new ExifTag(TAG_PRIMARY_CHROMATICITIES, 319, 5), new ExifTag(TAG_SUB_IFD_POINTER, 330, 4), new ExifTag(TAG_JPEG_INTERCHANGE_FORMAT, 513, 4), new ExifTag(TAG_JPEG_INTERCHANGE_FORMAT_LENGTH, 514, 4), new ExifTag(TAG_Y_CB_CR_COEFFICIENTS, 529, 5), new ExifTag(TAG_Y_CB_CR_SUB_SAMPLING, 530, 3), new ExifTag(TAG_Y_CB_CR_POSITIONING, 531, 3), new ExifTag(TAG_REFERENCE_BLACK_WHITE, 532, 5), new ExifTag(TAG_COPYRIGHT, 33432, 2), new ExifTag(TAG_EXIF_IFD_POINTER, 34665, 4), new ExifTag(TAG_GPS_INFO_IFD_POINTER, 34853, 4), new ExifTag(TAG_RW2_SENSOR_TOP_BORDER, 4, 4), new ExifTag(TAG_RW2_SENSOR_LEFT_BORDER, 5, 4), new ExifTag(TAG_RW2_SENSOR_BOTTOM_BORDER, 6, 4), new ExifTag(TAG_RW2_SENSOR_RIGHT_BORDER, 7, 4), new ExifTag(TAG_RW2_ISO, 23, 3), new ExifTag(TAG_RW2_JPG_FROM_RAW, 46, 7)};
        IFD_EXIF_TAGS = new ExifTag[]{new ExifTag(TAG_EXPOSURE_TIME, 33434, 5), new ExifTag(TAG_F_NUMBER, 33437, 5), new ExifTag(TAG_EXPOSURE_PROGRAM, 34850, 3), new ExifTag(TAG_SPECTRAL_SENSITIVITY, 34852, 2), new ExifTag(TAG_PHOTOGRAPHIC_SENSITIVITY, 34855, 3), new ExifTag(TAG_OECF, 34856, 7), new ExifTag(TAG_EXIF_VERSION, 36864, 2), new ExifTag(TAG_DATETIME_ORIGINAL, 36867, 2), new ExifTag(TAG_DATETIME_DIGITIZED, 36868, 2), new ExifTag(TAG_COMPONENTS_CONFIGURATION, 37121, 7), new ExifTag(TAG_COMPRESSED_BITS_PER_PIXEL, 37122, 5), new ExifTag(TAG_SHUTTER_SPEED_VALUE, 37377, 10), new ExifTag(TAG_APERTURE_VALUE, 37378, 5), new ExifTag(TAG_BRIGHTNESS_VALUE, 37379, 10), new ExifTag(TAG_EXPOSURE_BIAS_VALUE, 37380, 10), new ExifTag(TAG_MAX_APERTURE_VALUE, 37381, 5), new ExifTag(TAG_SUBJECT_DISTANCE, 37382, 5), new ExifTag(TAG_METERING_MODE, 37383, 3), new ExifTag(TAG_LIGHT_SOURCE, 37384, 3), new ExifTag(TAG_FLASH, 37385, 3), new ExifTag(TAG_FOCAL_LENGTH, 37386, 5), new ExifTag(TAG_SUBJECT_AREA, 37396, 3), new ExifTag(TAG_MAKER_NOTE, 37500, 7), new ExifTag(TAG_USER_COMMENT, 37510, 7), new ExifTag(TAG_SUBSEC_TIME, 37520, 2), new ExifTag(TAG_SUBSEC_TIME_ORIGINAL, 37521, 2), new ExifTag(TAG_SUBSEC_TIME_DIGITIZED, 37522, 2), new ExifTag(TAG_FLASHPIX_VERSION, 40960, 7), new ExifTag(TAG_COLOR_SPACE, 40961, 3), new ExifTag(TAG_PIXEL_X_DIMENSION, 40962, 3, 4), new ExifTag(TAG_PIXEL_Y_DIMENSION, 40963, 3, 4), new ExifTag(TAG_RELATED_SOUND_FILE, 40964, 2), new ExifTag(TAG_INTEROPERABILITY_IFD_POINTER, 40965, 4), new ExifTag(TAG_FLASH_ENERGY, 41483, 5), new ExifTag(TAG_SPATIAL_FREQUENCY_RESPONSE, 41484, 7), new ExifTag(TAG_FOCAL_PLANE_X_RESOLUTION, 41486, 5), new ExifTag(TAG_FOCAL_PLANE_Y_RESOLUTION, 41487, 5), new ExifTag(TAG_FOCAL_PLANE_RESOLUTION_UNIT, 41488, 3), new ExifTag(TAG_SUBJECT_LOCATION, 41492, 3), new ExifTag(TAG_EXPOSURE_INDEX, 41493, 5), new ExifTag(TAG_SENSING_METHOD, 41495, 3), new ExifTag(TAG_FILE_SOURCE, 41728, 7), new ExifTag(TAG_SCENE_TYPE, 41729, 7), new ExifTag(TAG_CFA_PATTERN, 41730, 7), new ExifTag(TAG_CUSTOM_RENDERED, 41985, 3), new ExifTag(TAG_EXPOSURE_MODE, 41986, 3), new ExifTag(TAG_WHITE_BALANCE, 41987, 3), new ExifTag(TAG_DIGITAL_ZOOM_RATIO, 41988, 5), new ExifTag(TAG_FOCAL_LENGTH_IN_35MM_FILM, 41989, 3), new ExifTag(TAG_SCENE_CAPTURE_TYPE, 41990, 3), new ExifTag(TAG_GAIN_CONTROL, 41991, 3), new ExifTag(TAG_CONTRAST, 41992, 3), new ExifTag(TAG_SATURATION, 41993, 3), new ExifTag(TAG_SHARPNESS, 41994, 3), new ExifTag(TAG_DEVICE_SETTING_DESCRIPTION, 41995, 7), new ExifTag(TAG_SUBJECT_DISTANCE_RANGE, 41996, 3), new ExifTag(TAG_IMAGE_UNIQUE_ID, 42016, 2), new ExifTag(TAG_DNG_VERSION, 50706, 1), new ExifTag(TAG_DEFAULT_CROP_SIZE, 50720, 3, 4)};
        IFD_GPS_TAGS = new ExifTag[]{new ExifTag(TAG_GPS_VERSION_ID, 0, 1), new ExifTag(TAG_GPS_LATITUDE_REF, 1, 2), new ExifTag(TAG_GPS_LATITUDE, 2, 5), new ExifTag(TAG_GPS_LONGITUDE_REF, 3, 2), new ExifTag(TAG_GPS_LONGITUDE, 4, 5), new ExifTag(TAG_GPS_ALTITUDE_REF, 5, 1), new ExifTag(TAG_GPS_ALTITUDE, 6, 5), new ExifTag(TAG_GPS_TIMESTAMP, 7, 5), new ExifTag(TAG_GPS_SATELLITES, 8, 2), new ExifTag(TAG_GPS_STATUS, 9, 2), new ExifTag(TAG_GPS_MEASURE_MODE, 10, 2), new ExifTag(TAG_GPS_DOP, 11, 5), new ExifTag(TAG_GPS_SPEED_REF, 12, 2), new ExifTag(TAG_GPS_SPEED, 13, 5), new ExifTag(TAG_GPS_TRACK_REF, 14, 2), new ExifTag(TAG_GPS_TRACK, 15, 5), new ExifTag(TAG_GPS_IMG_DIRECTION_REF, 16, 2), new ExifTag(TAG_GPS_IMG_DIRECTION, 17, 5), new ExifTag(TAG_GPS_MAP_DATUM, 18, 2), new ExifTag(TAG_GPS_DEST_LATITUDE_REF, 19, 2), new ExifTag(TAG_GPS_DEST_LATITUDE, 20, 5), new ExifTag(TAG_GPS_DEST_LONGITUDE_REF, 21, 2), new ExifTag(TAG_GPS_DEST_LONGITUDE, 22, 5), new ExifTag(TAG_GPS_DEST_BEARING_REF, 23, 2), new ExifTag(TAG_GPS_DEST_BEARING, 24, 5), new ExifTag(TAG_GPS_DEST_DISTANCE_REF, 25, 2), new ExifTag(TAG_GPS_DEST_DISTANCE, 26, 5), new ExifTag(TAG_GPS_PROCESSING_METHOD, 27, 7), new ExifTag(TAG_GPS_AREA_INFORMATION, 28, 7), new ExifTag(TAG_GPS_DATESTAMP, 29, 2), new ExifTag(TAG_GPS_DIFFERENTIAL, 30, 3)};
        IFD_INTEROPERABILITY_TAGS = new ExifTag[]{new ExifTag(TAG_INTEROPERABILITY_INDEX, 1, 2)};
        IFD_THUMBNAIL_TAGS = new ExifTag[]{new ExifTag(TAG_NEW_SUBFILE_TYPE, 254, 4), new ExifTag(TAG_SUBFILE_TYPE, 255, 4), new ExifTag(TAG_THUMBNAIL_IMAGE_WIDTH, 256, 3, 4), new ExifTag(TAG_THUMBNAIL_IMAGE_LENGTH, 257, 3, 4), new ExifTag(TAG_BITS_PER_SAMPLE, 258, 3), new ExifTag(TAG_COMPRESSION, 259, 3), new ExifTag(TAG_PHOTOMETRIC_INTERPRETATION, 262, 3), new ExifTag(TAG_IMAGE_DESCRIPTION, 270, 2), new ExifTag(TAG_MAKE, 271, 2), new ExifTag(TAG_MODEL, 272, 2), new ExifTag(TAG_STRIP_OFFSETS, 273, 3, 4), new ExifTag(TAG_ORIENTATION, 274, 3), new ExifTag(TAG_SAMPLES_PER_PIXEL, 277, 3), new ExifTag(TAG_ROWS_PER_STRIP, 278, 3, 4), new ExifTag(TAG_STRIP_BYTE_COUNTS, 279, 3, 4), new ExifTag(TAG_X_RESOLUTION, 282, 5), new ExifTag(TAG_Y_RESOLUTION, 283, 5), new ExifTag(TAG_PLANAR_CONFIGURATION, 284, 3), new ExifTag(TAG_RESOLUTION_UNIT, 296, 3), new ExifTag(TAG_TRANSFER_FUNCTION, 301, 3), new ExifTag(TAG_SOFTWARE, 305, 2), new ExifTag(TAG_DATETIME, 306, 2), new ExifTag(TAG_ARTIST, 315, 2), new ExifTag(TAG_WHITE_POINT, 318, 5), new ExifTag(TAG_PRIMARY_CHROMATICITIES, 319, 5), new ExifTag(TAG_SUB_IFD_POINTER, 330, 4), new ExifTag(TAG_JPEG_INTERCHANGE_FORMAT, 513, 4), new ExifTag(TAG_JPEG_INTERCHANGE_FORMAT_LENGTH, 514, 4), new ExifTag(TAG_Y_CB_CR_COEFFICIENTS, 529, 5), new ExifTag(TAG_Y_CB_CR_SUB_SAMPLING, 530, 3), new ExifTag(TAG_Y_CB_CR_POSITIONING, 531, 3), new ExifTag(TAG_REFERENCE_BLACK_WHITE, 532, 5), new ExifTag(TAG_COPYRIGHT, 33432, 2), new ExifTag(TAG_EXIF_IFD_POINTER, 34665, 4), new ExifTag(TAG_GPS_INFO_IFD_POINTER, 34853, 4), new ExifTag(TAG_DNG_VERSION, 50706, 1), new ExifTag(TAG_DEFAULT_CROP_SIZE, 50720, 3, 4)};
        TAG_RAF_IMAGE_SIZE = new ExifTag(TAG_STRIP_OFFSETS, 273, 3);
        ORF_MAKER_NOTE_TAGS = new ExifTag[]{new ExifTag(TAG_ORF_THUMBNAIL_IMAGE, 256, 7), new ExifTag(TAG_ORF_CAMERA_SETTINGS_IFD_POINTER, 8224, 4), new ExifTag(TAG_ORF_IMAGE_PROCESSING_IFD_POINTER, 8256, 4)};
        ORF_CAMERA_SETTINGS_TAGS = new ExifTag[]{new ExifTag(TAG_ORF_PREVIEW_IMAGE_START, 257, 4), new ExifTag(TAG_ORF_PREVIEW_IMAGE_LENGTH, 258, 4)};
        ORF_IMAGE_PROCESSING_TAGS = new ExifTag[]{new ExifTag(TAG_ORF_ASPECT_FRAME, 4371, 3)};
        PEF_TAGS = new ExifTag[]{new ExifTag(TAG_COLOR_SPACE, 55, 3)};
        EXIF_TAGS = new ExifTag[][]{IFD_TIFF_TAGS, IFD_EXIF_TAGS, IFD_GPS_TAGS, IFD_INTEROPERABILITY_TAGS, IFD_THUMBNAIL_TAGS, IFD_TIFF_TAGS, ORF_MAKER_NOTE_TAGS, ORF_CAMERA_SETTINGS_TAGS, ORF_IMAGE_PROCESSING_TAGS, PEF_TAGS};
        EXIF_POINTER_TAGS = new ExifTag[]{new ExifTag(TAG_SUB_IFD_POINTER, 330, 4), new ExifTag(TAG_EXIF_IFD_POINTER, 34665, 4), new ExifTag(TAG_GPS_INFO_IFD_POINTER, 34853, 4), new ExifTag(TAG_INTEROPERABILITY_IFD_POINTER, 40965, 4), new ExifTag(TAG_ORF_CAMERA_SETTINGS_IFD_POINTER, 8224, 1), new ExifTag(TAG_ORF_IMAGE_PROCESSING_IFD_POINTER, 8256, 1)};
        JPEG_INTERCHANGE_FORMAT_TAG = new ExifTag(TAG_JPEG_INTERCHANGE_FORMAT, 513, 4);
        JPEG_INTERCHANGE_FORMAT_LENGTH_TAG = new ExifTag(TAG_JPEG_INTERCHANGE_FORMAT_LENGTH, 514, 4);
        sExifTagMapsForReading = new HashMap[EXIF_TAGS.length];
        sExifTagMapsForWriting = new HashMap[EXIF_TAGS.length];
        sTagSetForCompatibility = new HashSet<String>(Arrays.asList(TAG_F_NUMBER, TAG_DIGITAL_ZOOM_RATIO, TAG_EXPOSURE_TIME, TAG_SUBJECT_DISTANCE, TAG_GPS_TIMESTAMP));
        sExifPointerTagMap = new HashMap();
        ASCII = Charset.forName("US-ASCII");
        IDENTIFIER_EXIF_APP1 = "Exif\u0000\u0000".getBytes(ASCII);
        sFormatter = new SimpleDateFormat("yyyy:MM:dd HH:mm:ss");
        sFormatter.setTimeZone(TimeZone.getTimeZone("UTC"));
        for (int i = 0; i < EXIF_TAGS.length; ++i) {
            ExifInterface.sExifTagMapsForReading[i] = new HashMap();
            ExifInterface.sExifTagMapsForWriting[i] = new HashMap();
            for (ExifTag exifTag : EXIF_TAGS[i]) {
                sExifTagMapsForReading[i].put(exifTag.number, exifTag);
                sExifTagMapsForWriting[i].put(exifTag.name, exifTag);
            }
        }
        sExifPointerTagMap.put(ExifInterface.EXIF_POINTER_TAGS[0].number, 5);
        sExifPointerTagMap.put(ExifInterface.EXIF_POINTER_TAGS[1].number, 1);
        sExifPointerTagMap.put(ExifInterface.EXIF_POINTER_TAGS[2].number, 2);
        sExifPointerTagMap.put(ExifInterface.EXIF_POINTER_TAGS[3].number, 3);
        sExifPointerTagMap.put(ExifInterface.EXIF_POINTER_TAGS[4].number, 7);
        sExifPointerTagMap.put(ExifInterface.EXIF_POINTER_TAGS[5].number, 8);
        sNonZeroTimePattern = Pattern.compile(".*[1-9].*");
        sGpsTimestampPattern = Pattern.compile("^([0-9][0-9]):([0-9][0-9]):([0-9][0-9])$");
    }

    public ExifInterface(@NonNull InputStream inputStream) throws IOException {
        this.mAttributes = new HashMap[EXIF_TAGS.length];
        this.mExifByteOrder = ByteOrder.BIG_ENDIAN;
        if (inputStream == null) {
            throw new IllegalArgumentException("inputStream cannot be null");
        }
        this.mFilename = null;
        this.mAssetInputStream = inputStream instanceof AssetManager.AssetInputStream ? (AssetManager.AssetInputStream)inputStream : null;
        this.loadAttributes(inputStream);
    }

    /*
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    public ExifInterface(@NonNull String object) throws IOException {
        void var2_5;
        block5 : {
            this.mAttributes = new HashMap[EXIF_TAGS.length];
            this.mExifByteOrder = ByteOrder.BIG_ENDIAN;
            if (object == null) {
                throw new IllegalArgumentException("filename cannot be null");
            }
            Object var3_2 = null;
            this.mAssetInputStream = null;
            this.mFilename = object;
            object = new FileInputStream((String)object);
            try {
                this.loadAttributes((InputStream)object);
            }
            catch (Throwable throwable) {
                break block5;
            }
            ExifInterface.closeQuietly((Closeable)object);
            return;
            catch (Throwable throwable) {
                object = var3_2;
            }
        }
        ExifInterface.closeQuietly((Closeable)object);
        throw var2_5;
    }

    static /* synthetic */ byte[] access$100() {
        return EXIF_ASCII_PREFIX;
    }

    private void addDefaultValuesForCompatibility() {
        String string2 = this.getAttribute(TAG_DATETIME_ORIGINAL);
        if (string2 != null && this.getAttribute(TAG_DATETIME) == null) {
            this.mAttributes[0].put(TAG_DATETIME, ExifAttribute.createString(string2));
        }
        if (this.getAttribute(TAG_IMAGE_WIDTH) == null) {
            this.mAttributes[0].put(TAG_IMAGE_WIDTH, ExifAttribute.createULong(0L, this.mExifByteOrder));
        }
        if (this.getAttribute(TAG_IMAGE_LENGTH) == null) {
            this.mAttributes[0].put(TAG_IMAGE_LENGTH, ExifAttribute.createULong(0L, this.mExifByteOrder));
        }
        if (this.getAttribute(TAG_ORIENTATION) == null) {
            this.mAttributes[0].put(TAG_ORIENTATION, ExifAttribute.createULong(0L, this.mExifByteOrder));
        }
        if (this.getAttribute(TAG_LIGHT_SOURCE) == null) {
            this.mAttributes[1].put(TAG_LIGHT_SOURCE, ExifAttribute.createULong(0L, this.mExifByteOrder));
        }
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    private static void closeQuietly(Closeable closeable) {
        if (closeable == null) return;
        try {
            closeable.close();
            return;
        }
        catch (RuntimeException runtimeException) {
            throw runtimeException;
        }
        catch (Exception exception) {
            return;
        }
    }

    private String convertDecimalDegree(double d) {
        long l = (long)d;
        long l2 = (long)((d -= (double)l) * 60.0);
        long l3 = Math.round((d - (double)l2 / 60.0) * 3600.0 * 1.0E7);
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append(l);
        stringBuilder.append("/1,");
        stringBuilder.append(l2);
        stringBuilder.append("/1,");
        stringBuilder.append(l3);
        stringBuilder.append("/10000000");
        return stringBuilder.toString();
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    private static double convertRationalLatLonToDouble(String arrstring, String string2) {
        block4 : {
            arrstring = arrstring.split(",");
            String[] arrstring2 = arrstring[0].split("/");
            double d = Double.parseDouble(arrstring2[0].trim()) / Double.parseDouble(arrstring2[1].trim());
            arrstring2 = arrstring[1].split("/");
            double d2 = Double.parseDouble(arrstring2[0].trim()) / Double.parseDouble(arrstring2[1].trim());
            arrstring = arrstring[2].split("/");
            double d3 = Double.parseDouble(arrstring[0].trim()) / Double.parseDouble(arrstring[1].trim());
            d = d + d2 / 60.0 + d3 / 3600.0;
            if (string2.equals(LATITUDE_SOUTH) || string2.equals(LONGITUDE_WEST)) return - d;
            if (string2.equals("N")) return d;
            if (!string2.equals(LONGITUDE_EAST)) break block4;
            return d;
        }
        try {
            throw new IllegalArgumentException();
        }
        catch (ArrayIndexOutOfBoundsException | NumberFormatException runtimeException) {
            throw new IllegalArgumentException();
        }
    }

    private static long[] convertToLongArray(Object arrn) {
        if (arrn instanceof int[]) {
            arrn = arrn;
            long[] arrl = new long[arrn.length];
            for (int i = 0; i < arrn.length; ++i) {
                arrl[i] = arrn[i];
            }
            return arrl;
        }
        if (arrn instanceof long[]) {
            return arrn;
        }
        return null;
    }

    private static int copy(InputStream inputStream, OutputStream outputStream) throws IOException {
        int n;
        byte[] arrby = new byte[8192];
        int n2 = 0;
        while ((n = inputStream.read(arrby)) != -1) {
            n2 += n;
            outputStream.write(arrby, 0, n);
        }
        return n2;
    }

    @Nullable
    private ExifAttribute getExifAttribute(@NonNull String object) {
        String string2 = object;
        if (TAG_ISO_SPEED_RATINGS.equals(object)) {
            string2 = TAG_PHOTOGRAPHIC_SENSITIVITY;
        }
        for (int i = 0; i < EXIF_TAGS.length; ++i) {
            object = this.mAttributes[i].get(string2);
            if (object == null) continue;
            return object;
        }
        return null;
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Lifted jumps to return sites
     */
    private void getJpegAttributes(ByteOrderedDataInputStream var1_1, int var2_2, int var3_3) throws IOException {
        var1_1.setByteOrder(ByteOrder.BIG_ENDIAN);
        var1_1.seek(var2_2);
        var4_4 = var1_1.readByte();
        if (var4_4 != -1) {
            var1_1 = new StringBuilder();
            var1_1.append("Invalid marker: ");
            var1_1.append(Integer.toHexString(var4_4 & 255));
            throw new IOException(var1_1.toString());
        }
        if (var1_1.readByte() != -40) {
            var1_1 = new StringBuilder();
            var1_1.append("Invalid marker: ");
            var1_1.append(Integer.toHexString(var4_4 & 255));
            throw new IOException(var1_1.toString());
        }
        var2_2 = var2_2 + 1 + 1;
        do {
            block31 : {
                block29 : {
                    block30 : {
                        if ((var4_4 = var1_1.readByte()) != -1) {
                            var1_1 = new StringBuilder();
                            var1_1.append("Invalid marker:");
                            var1_1.append(Integer.toHexString(var4_4 & 255));
                            throw new IOException(var1_1.toString());
                        }
                        var6_6 = var1_1.readByte();
                        if (var6_6 == -39 || var6_6 == -38) break;
                        var4_4 = var1_1.readUnsignedShort() - 2;
                        var5_5 = var2_2 + 1 + 1 + 2;
                        if (var4_4 < 0) {
                            throw new IOException("Invalid length");
                        }
                        if (var6_6 == -31) break block29;
                        if (var6_6 == -2) break block30;
                        switch (var6_6) {
                            default: {
                                switch (var6_6) {
                                    default: {
                                        switch (var6_6) {
                                            default: {
                                                switch (var6_6) {
                                                    default: {
                                                        var2_2 = var4_4;
                                                        var4_4 = var5_5;
                                                        ** break;
                                                    }
                                                    case -51: 
                                                    case -50: 
                                                    case -49: 
                                                }
                                            }
                                            case -55: 
                                            case -54: 
                                            case -53: 
                                        }
                                    }
                                    case -59: 
                                    case -58: 
                                    case -57: 
                                }
                            }
                            case -64: 
                            case -63: 
                            case -62: 
                            case -61: 
                        }
                        if (var1_1.skipBytes(1) != 1) {
                            throw new IOException("Invalid SOFx");
                        }
                        this.mAttributes[var3_3].put("ImageLength", ExifAttribute.createULong(var1_1.readUnsignedShort(), this.mExifByteOrder));
                        this.mAttributes[var3_3].put("ImageWidth", ExifAttribute.createULong(var1_1.readUnsignedShort(), this.mExifByteOrder));
                        var2_2 = var4_4 - 5;
                        var4_4 = var5_5;
                        ** break;
lbl51: // 2 sources:
                        break block31;
                    }
                    var7_7 = new byte[var4_4];
                    if (var1_1.read(var7_7) != var4_4) {
                        throw new IOException("Invalid exif");
                    }
                    var4_4 = var5_5;
                    if (this.getAttribute("UserComment") == null) {
                        this.mAttributes[1].put("UserComment", ExifAttribute.createString(new String(var7_7, ExifInterface.ASCII)));
                        var4_4 = var5_5;
                    }
                    ** GOTO lbl82
                }
                if (var4_4 < 6) {
                    var2_2 = var4_4;
                    var4_4 = var5_5;
                } else {
                    var7_7 = new byte[6];
                    if (var1_1.read(var7_7) != 6) {
                        throw new IOException("Invalid exif");
                    }
                    var5_5 += 6;
                    var2_2 = var4_4 - 6;
                    if (!Arrays.equals(var7_7, ExifInterface.IDENTIFIER_EXIF_APP1)) {
                        var4_4 = var5_5;
                    } else {
                        if (var2_2 <= 0) {
                            throw new IOException("Invalid exif");
                        }
                        this.mExifOffset = var5_5;
                        var7_7 = new byte[var2_2];
                        if (var1_1.read(var7_7) != var2_2) {
                            throw new IOException("Invalid exif");
                        }
                        var4_4 = var5_5 + var2_2;
                        this.readExifSegment(var7_7, var3_3);
lbl82: // 2 sources:
                        var2_2 = 0;
                    }
                }
            }
            if (var2_2 < 0) {
                throw new IOException("Invalid length");
            }
            if (var1_1.skipBytes(var2_2) != var2_2) {
                throw new IOException("Invalid JPEG segment");
            }
            var2_2 = var4_4 + var2_2;
        } while (true);
        var1_1.setByteOrder(this.mExifByteOrder);
    }

    private int getMimeType(BufferedInputStream bufferedInputStream) throws IOException {
        bufferedInputStream.mark(5000);
        byte[] arrby = new byte[5000];
        bufferedInputStream.read(arrby);
        bufferedInputStream.reset();
        if (ExifInterface.isJpegFormat(arrby)) {
            return 4;
        }
        if (this.isRafFormat(arrby)) {
            return 9;
        }
        if (this.isOrfFormat(arrby)) {
            return 7;
        }
        if (this.isRw2Format(arrby)) {
            return 10;
        }
        return 0;
    }

    private void getOrfAttributes(ByteOrderedDataInputStream object) throws IOException {
        this.getRawAttributes((ByteOrderedDataInputStream)object);
        object = this.mAttributes[1].get(TAG_MAKER_NOTE);
        if (object != null) {
            object = new ByteOrderedDataInputStream(object.bytes);
            object.setByteOrder(this.mExifByteOrder);
            Object object2 = new byte[ORF_MAKER_NOTE_HEADER_1.length];
            object.readFully((byte[])object2);
            object.seek(0L);
            byte[] arrby = new byte[ORF_MAKER_NOTE_HEADER_2.length];
            object.readFully(arrby);
            if (Arrays.equals((byte[])object2, ORF_MAKER_NOTE_HEADER_1)) {
                object.seek(8L);
            } else if (Arrays.equals(arrby, ORF_MAKER_NOTE_HEADER_2)) {
                object.seek(12L);
            }
            this.readImageFileDirectory((ByteOrderedDataInputStream)object, 6);
            object = this.mAttributes[7].get(TAG_ORF_PREVIEW_IMAGE_START);
            object2 = this.mAttributes[7].get(TAG_ORF_PREVIEW_IMAGE_LENGTH);
            if (object != null && object2 != null) {
                this.mAttributes[5].put(TAG_JPEG_INTERCHANGE_FORMAT, (ExifAttribute)object);
                this.mAttributes[5].put(TAG_JPEG_INTERCHANGE_FORMAT_LENGTH, (ExifAttribute)object2);
            }
            if ((object = this.mAttributes[8].get(TAG_ORF_ASPECT_FRAME)) != null) {
                if ((object = (int[])((ExifAttribute)object).getValue(this.mExifByteOrder)) != null && ((int[])object).length == 4) {
                    if (object[2] > object[0] && object[3] > object[1]) {
                        int n = object[2] - object[0] + 1;
                        int n2 = object[3] - object[1] + 1;
                        int n3 = n;
                        int n4 = n2;
                        if (n < n2) {
                            n3 = n + n2;
                            n4 = n3 - n2;
                            n3 -= n4;
                        }
                        object = ExifAttribute.createUShort(n3, this.mExifByteOrder);
                        object2 = ExifAttribute.createUShort(n4, this.mExifByteOrder);
                        this.mAttributes[0].put(TAG_IMAGE_WIDTH, (ExifAttribute)object);
                        this.mAttributes[0].put(TAG_IMAGE_LENGTH, (ExifAttribute)object2);
                        return;
                    }
                } else {
                    object2 = new StringBuilder();
                    object2.append("Invalid aspect frame values. frame=");
                    object2.append(Arrays.toString(object));
                    Log.w((String)TAG, (String)object2.toString());
                    return;
                }
            }
        }
    }

    private void getRafAttributes(ByteOrderedDataInputStream object) throws IOException {
        object.skipBytes(84);
        Object object2 = new byte[4];
        byte[] arrby = new byte[4];
        object.read((byte[])object2);
        object.skipBytes(4);
        object.read(arrby);
        int n = ByteBuffer.wrap(object2).getInt();
        int n2 = ByteBuffer.wrap(arrby).getInt();
        this.getJpegAttributes((ByteOrderedDataInputStream)object, n, 5);
        object.seek(n2);
        object.setByteOrder(ByteOrder.BIG_ENDIAN);
        n2 = object.readInt();
        for (n = 0; n < n2; ++n) {
            int n3 = object.readUnsignedShort();
            int n4 = object.readUnsignedShort();
            if (n3 == ExifInterface.TAG_RAF_IMAGE_SIZE.number) {
                n = object.readShort();
                n2 = object.readShort();
                object = ExifAttribute.createUShort(n, this.mExifByteOrder);
                object2 = ExifAttribute.createUShort(n2, this.mExifByteOrder);
                this.mAttributes[0].put(TAG_IMAGE_LENGTH, (ExifAttribute)object);
                this.mAttributes[0].put(TAG_IMAGE_WIDTH, (ExifAttribute)object2);
                return;
            }
            object.skipBytes(n4);
        }
    }

    private void getRawAttributes(ByteOrderedDataInputStream object) throws IOException {
        this.parseTiffHeaders((ByteOrderedDataInputStream)object, object.available());
        this.readImageFileDirectory((ByteOrderedDataInputStream)object, 0);
        this.updateImageSizeValues((ByteOrderedDataInputStream)object, 0);
        this.updateImageSizeValues((ByteOrderedDataInputStream)object, 5);
        this.updateImageSizeValues((ByteOrderedDataInputStream)object, 4);
        this.validateImages((InputStream)object);
        if (this.mMimeType == 8 && (object = this.mAttributes[1].get(TAG_MAKER_NOTE)) != null) {
            object = new ByteOrderedDataInputStream(object.bytes);
            object.setByteOrder(this.mExifByteOrder);
            object.seek(6L);
            this.readImageFileDirectory((ByteOrderedDataInputStream)object, 9);
            object = this.mAttributes[9].get(TAG_COLOR_SPACE);
            if (object != null) {
                this.mAttributes[1].put(TAG_COLOR_SPACE, (ExifAttribute)object);
            }
        }
    }

    private void getRw2Attributes(ByteOrderedDataInputStream object) throws IOException {
        this.getRawAttributes((ByteOrderedDataInputStream)object);
        if (this.mAttributes[0].get(TAG_RW2_JPG_FROM_RAW) != null) {
            this.getJpegAttributes((ByteOrderedDataInputStream)object, this.mRw2JpgFromRawOffset, 5);
        }
        object = this.mAttributes[0].get(TAG_RW2_ISO);
        ExifAttribute exifAttribute = this.mAttributes[1].get(TAG_PHOTOGRAPHIC_SENSITIVITY);
        if (object != null && exifAttribute == null) {
            this.mAttributes[1].put(TAG_PHOTOGRAPHIC_SENSITIVITY, (ExifAttribute)object);
        }
    }

    /*
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    private static Pair<Integer, Integer> guessDataFormat(String pair) {
        Pair pair2;
        String[] arrstring;
        boolean bl = pair.contains(",");
        int n = 1;
        if (bl) {
            arrstring = pair.split(",");
            pair = pair2 = ExifInterface.guessDataFormat(arrstring[0]);
            if ((Integer)pair2.first == 2) {
                return pair2;
            }
        } else {
            long l;
            long l2;
            if (pair.contains("/")) {
                if (((String[])(pair = pair.split("/"))).length != 2) return new Pair((Object)2, (Object)-1);
                l = (long)Double.parseDouble(pair[0]);
                l2 = (long)Double.parseDouble((String)pair[1]);
                if (l < 0L) return new Pair((Object)10, (Object)-1);
                if (l2 < 0L) {
                    return new Pair((Object)10, (Object)-1);
                }
            } else {
                try {
                    Long l3 = Long.parseLong((String)pair);
                    if (l3 >= 0L && l3 <= 65535L) {
                        return new Pair((Object)3, (Object)4);
                    }
                    if (l3 >= 0L) return new Pair((Object)4, (Object)-1);
                    return new Pair((Object)9, (Object)-1);
                }
                catch (NumberFormatException numberFormatException) {}
                catch (NumberFormatException numberFormatException) {
                    return new Pair((Object)2, (Object)-1);
                }
                try {
                    Double.parseDouble(pair);
                    return new Pair((Object)12, (Object)-1);
                }
                catch (NumberFormatException numberFormatException) {
                    return new Pair((Object)2, (Object)-1);
                }
            }
            if (l > Integer.MAX_VALUE) return new Pair((Object)5, (Object)-1);
            if (l2 <= Integer.MAX_VALUE) return new Pair((Object)10, (Object)5);
            return new Pair((Object)5, (Object)-1);
        }
        while (n < arrstring.length) {
            pair2 = ExifInterface.guessDataFormat(arrstring[n]);
            int n2 = !((Integer)pair2.first).equals(pair.first) && !((Integer)pair2.second).equals(pair.first) ? -1 : (Integer)pair.first;
            if ((Integer)pair.second == -1) return new Pair((Object)2, (Object)-1);
            int n3 = ((Integer)pair2.first).equals(pair.second) || ((Integer)pair2.second).equals(pair.second) ? (Integer)pair.second : -1;
            if (n2 == -1 && n3 == -1) {
                return new Pair((Object)2, (Object)-1);
            }
            if (n2 == -1) {
                pair = new Pair((Object)n3, (Object)-1);
            } else if (n3 == -1) {
                pair = new Pair((Object)n2, (Object)-1);
            }
            ++n;
        }
        return pair;
    }

    private void handleThumbnailFromJfif(ByteOrderedDataInputStream byteOrderedDataInputStream, HashMap arrby) throws IOException {
        ExifAttribute exifAttribute = (ExifAttribute)arrby.get(TAG_JPEG_INTERCHANGE_FORMAT);
        arrby = (ExifAttribute)arrby.get(TAG_JPEG_INTERCHANGE_FORMAT_LENGTH);
        if (exifAttribute != null && arrby != null) {
            int n;
            int n2 = exifAttribute.getIntValue(this.mExifByteOrder);
            int n3 = Math.min(arrby.getIntValue(this.mExifByteOrder), byteOrderedDataInputStream.available() - n2);
            if (this.mMimeType != 4 && this.mMimeType != 9 && this.mMimeType != 10) {
                n = n2;
                if (this.mMimeType == 7) {
                    n = n2 + this.mOrfMakerNoteOffset;
                }
            } else {
                n = n2 + this.mExifOffset;
            }
            if (n > 0 && n3 > 0) {
                this.mHasThumbnail = true;
                this.mThumbnailOffset = n;
                this.mThumbnailLength = n3;
                if (this.mFilename == null && this.mAssetInputStream == null) {
                    arrby = new byte[n3];
                    byteOrderedDataInputStream.seek(n);
                    byteOrderedDataInputStream.readFully(arrby);
                    this.mThumbnailBytes = arrby;
                }
            }
        }
    }

    private void handleThumbnailFromStrips(ByteOrderedDataInputStream byteOrderedDataInputStream, HashMap arrl) throws IOException {
        long[] arrl2 = (long[])arrl.get(TAG_STRIP_OFFSETS);
        byte[] arrby = (byte[])arrl.get(TAG_STRIP_BYTE_COUNTS);
        if (arrl2 != null && arrby != null) {
            arrl = ExifInterface.convertToLongArray(((ExifAttribute)arrl2).getValue(this.mExifByteOrder));
            arrl2 = ExifInterface.convertToLongArray(((ExifAttribute)arrby).getValue(this.mExifByteOrder));
            if (arrl == null) {
                Log.w((String)TAG, (String)"stripOffsets should not be null.");
                return;
            }
            if (arrl2 == null) {
                Log.w((String)TAG, (String)"stripByteCounts should not be null.");
                return;
            }
            int n = arrl2.length;
            long l = 0L;
            int n2 = 0;
            while (n2 < n) {
                long l2 = arrl2[n2];
                ++n2;
                l += l2;
            }
            arrby = new byte[(int)l];
            int n3 = 0;
            n2 = 0;
            for (n = 0; n < arrl.length; ++n) {
                int n4 = (int)arrl[n];
                int n5 = (int)arrl2[n];
                if ((n4 -= n3) < 0) {
                    Log.d((String)TAG, (String)"Invalid strip offset value");
                }
                byteOrderedDataInputStream.seek(n4);
                byte[] arrby2 = new byte[n5];
                byteOrderedDataInputStream.read(arrby2);
                n3 = n3 + n4 + n5;
                System.arraycopy(arrby2, 0, arrby, n2, arrby2.length);
                n2 += arrby2.length;
            }
            this.mHasThumbnail = true;
            this.mThumbnailBytes = arrby;
            this.mThumbnailLength = arrby.length;
        }
    }

    private static boolean isJpegFormat(byte[] arrby) throws IOException {
        for (int i = 0; i < JPEG_SIGNATURE.length; ++i) {
            if (arrby[i] == JPEG_SIGNATURE[i]) continue;
            return false;
        }
        return true;
    }

    private boolean isOrfFormat(byte[] object) throws IOException {
        object = new ByteOrderedDataInputStream((byte[])object);
        this.mExifByteOrder = this.readByteOrder((ByteOrderedDataInputStream)object);
        object.setByteOrder(this.mExifByteOrder);
        short s = object.readShort();
        object.close();
        if (s != 20306 && s != 21330) {
            return false;
        }
        return true;
    }

    private boolean isRafFormat(byte[] arrby) throws IOException {
        byte[] arrby2 = RAF_SIGNATURE.getBytes(Charset.defaultCharset());
        for (int i = 0; i < arrby2.length; ++i) {
            if (arrby[i] == arrby2[i]) continue;
            return false;
        }
        return true;
    }

    private boolean isRw2Format(byte[] object) throws IOException {
        object = new ByteOrderedDataInputStream((byte[])object);
        this.mExifByteOrder = this.readByteOrder((ByteOrderedDataInputStream)object);
        object.setByteOrder(this.mExifByteOrder);
        short s = object.readShort();
        object.close();
        if (s == 85) {
            return true;
        }
        return false;
    }

    private boolean isSupportedDataType(HashMap object) throws IOException {
        int[] arrn = (int[])object.get(TAG_BITS_PER_SAMPLE);
        if (arrn != null) {
            int n;
            if (Arrays.equals(BITS_PER_SAMPLE_RGB, arrn = (int[])((ExifAttribute)arrn).getValue(this.mExifByteOrder))) {
                return true;
            }
            if (this.mMimeType == 3 && (object = (ExifAttribute)object.get(TAG_PHOTOMETRIC_INTERPRETATION)) != null && ((n = object.getIntValue(this.mExifByteOrder)) == 1 && Arrays.equals(arrn, BITS_PER_SAMPLE_GREYSCALE_2) || n == 6 && Arrays.equals(arrn, BITS_PER_SAMPLE_RGB))) {
                return true;
            }
        }
        return false;
    }

    private boolean isThumbnail(HashMap object) throws IOException {
        ExifAttribute exifAttribute = (ExifAttribute)object.get(TAG_IMAGE_LENGTH);
        object = (ExifAttribute)object.get(TAG_IMAGE_WIDTH);
        if (exifAttribute != null && object != null) {
            int n = exifAttribute.getIntValue(this.mExifByteOrder);
            int n2 = object.getIntValue(this.mExifByteOrder);
            if (n <= 512 && n2 <= 512) {
                return true;
            }
        }
        return false;
    }

    /*
     * Exception decompiling
     */
    private void loadAttributes(@NonNull InputStream var1_1) throws IOException {
        // This method has failed to decompile.  When submitting a bug report, please provide this stack trace, and (if you hold appropriate legal rights) the relevant class file.
        // org.benf.cfr.reader.util.CannotPerformDecode: reachable test BLOCK was exited and re-entered.
        // org.benf.cfr.reader.bytecode.analysis.opgraph.op3rewriters.Misc.getFarthestReachableInRange(Misc.java:143)
        // org.benf.cfr.reader.bytecode.analysis.opgraph.op3rewriters.SwitchReplacer.examineSwitchContiguity(SwitchReplacer.java:385)
        // org.benf.cfr.reader.bytecode.analysis.opgraph.op3rewriters.SwitchReplacer.replaceRawSwitches(SwitchReplacer.java:65)
        // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisInner(CodeAnalyser.java:416)
        // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisOrWrapFail(CodeAnalyser.java:196)
        // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysis(CodeAnalyser.java:141)
        // org.benf.cfr.reader.entities.attributes.AttributeCode.analyse(AttributeCode.java:95)
        // org.benf.cfr.reader.entities.Method.analyse(Method.java:372)
        // org.benf.cfr.reader.entities.ClassFile.analyseMid(ClassFile.java:867)
        // org.benf.cfr.reader.entities.ClassFile.analyseTop(ClassFile.java:768)
        // org.benf.cfr.reader.Main.doJar(Main.java:141)
        // org.benf.cfr.reader.Main.main(Main.java:242)
        throw new IllegalStateException("Decompilation failed");
    }

    private void parseTiffHeaders(ByteOrderedDataInputStream object, int n) throws IOException {
        this.mExifByteOrder = this.readByteOrder((ByteOrderedDataInputStream)object);
        object.setByteOrder(this.mExifByteOrder);
        int n2 = object.readUnsignedShort();
        if (this.mMimeType != 7 && this.mMimeType != 10 && n2 != 42) {
            object = new StringBuilder();
            object.append("Invalid start code: ");
            object.append(Integer.toHexString(n2));
            throw new IOException(object.toString());
        }
        n2 = object.readInt();
        if (n2 >= 8 && n2 < n) {
            n = n2 - 8;
            if (n > 0 && object.skipBytes(n) != n) {
                object = new StringBuilder();
                object.append("Couldn't jump to first Ifd: ");
                object.append(n);
                throw new IOException(object.toString());
            }
            return;
        }
        object = new StringBuilder();
        object.append("Invalid first Ifd offset: ");
        object.append(n2);
        throw new IOException(object.toString());
    }

    private void printAttributes() {
        for (int i = 0; i < this.mAttributes.length; ++i) {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("The size of tag group[");
            stringBuilder.append(i);
            stringBuilder.append("]: ");
            stringBuilder.append(this.mAttributes[i].size());
            Log.d((String)TAG, (String)stringBuilder.toString());
            for (Map.Entry entry : this.mAttributes[i].entrySet()) {
                ExifAttribute exifAttribute = (ExifAttribute)entry.getValue();
                StringBuilder stringBuilder2 = new StringBuilder();
                stringBuilder2.append("tagName: ");
                stringBuilder2.append((String)entry.getKey());
                stringBuilder2.append(", tagType: ");
                stringBuilder2.append(exifAttribute.toString());
                stringBuilder2.append(", tagValue: '");
                stringBuilder2.append(exifAttribute.getStringValue(this.mExifByteOrder));
                stringBuilder2.append("'");
                Log.d((String)TAG, (String)stringBuilder2.toString());
            }
        }
    }

    private ByteOrder readByteOrder(ByteOrderedDataInputStream object) throws IOException {
        short s = object.readShort();
        if (s != 18761) {
            if (s != 19789) {
                object = new StringBuilder();
                object.append("Invalid byte order: ");
                object.append(Integer.toHexString(s));
                throw new IOException(object.toString());
            }
            return ByteOrder.BIG_ENDIAN;
        }
        return ByteOrder.LITTLE_ENDIAN;
    }

    private void readExifSegment(byte[] arrby, int n) throws IOException {
        ByteOrderedDataInputStream byteOrderedDataInputStream = new ByteOrderedDataInputStream(arrby);
        this.parseTiffHeaders(byteOrderedDataInputStream, arrby.length);
        this.readImageFileDirectory(byteOrderedDataInputStream, n);
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Lifted jumps to return sites
     */
    private void readImageFileDirectory(ByteOrderedDataInputStream var1_1, int var2_2) throws IOException {
        var4_3 = var2_2;
        if (ByteOrderedDataInputStream.access$700(var1_1) + 2 > ByteOrderedDataInputStream.access$800(var1_1)) {
            return;
        }
        var5_4 = var1_1.readShort();
        if (ByteOrderedDataInputStream.access$700(var1_1) + var5_4 * 12 > ByteOrderedDataInputStream.access$800(var1_1)) {
            return;
        }
        for (var6_5 = 0; var6_5 < var5_4; var6_5 = (short)(var6_5 + 1)) {
            block32 : {
                block33 : {
                    block34 : {
                        block31 : {
                            block29 : {
                                block30 : {
                                    block25 : {
                                        block26 : {
                                            block28 : {
                                                block27 : {
                                                    block24 : {
                                                        var8_8 = var1_1.readUnsignedShort();
                                                        var7_7 = var1_1.readUnsignedShort();
                                                        var9_9 = var1_1.readInt();
                                                        var12_11 = (long)var1_1.peek() + 4L;
                                                        var16_13 = ExifInterface.sExifTagMapsForReading[var4_3].get(var8_8);
                                                        if (var16_13 != null) break block24;
                                                        var17_14 = new StringBuilder();
                                                        var17_14.append("Skip the tag entry since tag number is not defined: ");
                                                        var17_14.append(var8_8);
                                                        Log.w((String)"ExifInterface", (String)var17_14.toString());
                                                        break block25;
                                                    }
                                                    if (var7_7 <= 0 || var7_7 >= ExifInterface.IFD_FORMAT_BYTES_PER_FORMAT.length) break block26;
                                                    if (ExifTag.access$900((ExifTag)var16_13, var7_7)) break block27;
                                                    var17_14 = new StringBuilder();
                                                    var17_14.append("Skip the tag entry since data format (");
                                                    var17_14.append(ExifInterface.IFD_FORMAT_NAMES[var7_7]);
                                                    var17_14.append(") is unexpected for tag: ");
                                                    var17_14.append(var16_13.name);
                                                    Log.w((String)"ExifInterface", (String)var17_14.toString());
                                                    break block25;
                                                }
                                                var3_6 = var7_7;
                                                if (var7_7 == 7) {
                                                    var3_6 = var16_13.primaryFormat;
                                                }
                                                if ((var10_10 = (long)var9_9 * (long)ExifInterface.IFD_FORMAT_BYTES_PER_FORMAT[var3_6]) < 0L || var10_10 > Integer.MAX_VALUE) break block28;
                                                var7_7 = 1;
                                                break block29;
                                            }
                                            var17_14 = new StringBuilder();
                                            var17_14.append("Skip the tag entry since the number of components is invalid: ");
                                            var17_14.append(var9_9);
                                            Log.w((String)"ExifInterface", (String)var17_14.toString());
                                            break block30;
                                        }
                                        var17_14 = new StringBuilder();
                                        var17_14.append("Skip the tag entry since data format is invalid: ");
                                        var17_14.append(var7_7);
                                        Log.w((String)"ExifInterface", (String)var17_14.toString());
                                    }
                                    var10_10 = 0L;
                                    var3_6 = var7_7;
                                }
                                var7_7 = 0;
                            }
                            if (var7_7 != 0) break block31;
                            var1_1.seek(var12_11);
                            var3_6 = var4_3;
                            break block32;
                        }
                        if (var10_10 <= 4L) break block33;
                        var7_7 = var1_1.readInt();
                        if (this.mMimeType == 7) {
                            if ("MakerNote".equals(var16_13.name)) {
                                this.mOrfMakerNoteOffset = var7_7;
                            } else if (var4_3 == 6 && "ThumbnailImage".equals(var16_13.name)) {
                                this.mOrfThumbnailOffset = var7_7;
                                this.mOrfThumbnailLength = var9_9;
                                var17_14 = ExifAttribute.createUShort(6, this.mExifByteOrder);
                                var18_16 = ExifAttribute.createULong(this.mOrfThumbnailOffset, this.mExifByteOrder);
                                var19_18 = ExifAttribute.createULong(this.mOrfThumbnailLength, this.mExifByteOrder);
                                this.mAttributes[4].put("Compression", (ExifAttribute)var17_14);
                                this.mAttributes[4].put("JPEGInterchangeFormat", var18_16);
                                this.mAttributes[4].put("JPEGInterchangeFormatLength", var19_18);
                            }
                        } else if (this.mMimeType == 10 && "JpgFromRaw".equals(var16_13.name)) {
                            this.mRw2JpgFromRawOffset = var7_7;
                        }
                        var14_12 = var7_7;
                        if (var14_12 + var10_10 <= (long)ByteOrderedDataInputStream.access$800(var1_1)) break block34;
                        var16_13 = new StringBuilder();
                        var16_13.append("Skip the tag entry since data offset is invalid: ");
                        var16_13.append(var7_7);
                        Log.w((String)"ExifInterface", (String)var16_13.toString());
                        var1_1.seek(var12_11);
                        ** GOTO lbl112
                    }
                    var1_1.seek(var14_12);
                }
                if ((var17_14 = ExifInterface.sExifPointerTagMap.get(var8_8)) != null) {
                    var10_10 = -1L;
                    switch (var3_6) {
                        default: {
                            ** break;
                        }
                        case 9: 
                        case 13: {
                            var10_10 = var1_1.readInt();
                            ** break;
                        }
                        case 8: {
                            var10_10 = var1_1.readShort();
                            ** break;
                        }
                        case 4: {
                            var10_10 = var1_1.readUnsignedInt();
                            ** break;
                        }
                        case 3: 
                    }
                    var10_10 = var1_1.readUnsignedShort();
lbl103: // 5 sources:
                    if (var10_10 > 0L && var10_10 < (long)ByteOrderedDataInputStream.access$800(var1_1)) {
                        var1_1.seek(var10_10);
                        this.readImageFileDirectory(var1_1, var17_14.intValue());
                    } else {
                        var16_13 = new StringBuilder();
                        var16_13.append("Skip jump into the IFD since its offset is invalid: ");
                        var16_13.append(var10_10);
                        Log.w((String)"ExifInterface", (String)var16_13.toString());
                    }
                    var1_1.seek(var12_11);
lbl112: // 2 sources:
                    var3_6 = var2_2;
                } else {
                    var17_14 = new byte[(int)var10_10];
                    var1_1.readFully((byte[])var17_14);
                    var17_14 = new ExifAttribute(var3_6, var9_9, (byte[])var17_14);
                    var18_17 = this.mAttributes;
                    var4_3 = var2_2;
                    var18_17[var4_3].put(var16_13.name, (ExifAttribute)var17_14);
                    if ("DNGVersion".equals(var16_13.name)) {
                        this.mMimeType = 3;
                    }
                    if (("Make".equals(var16_13.name) || "Model".equals(var16_13.name)) && var17_14.getStringValue(this.mExifByteOrder).contains("PENTAX") || "Compression".equals(var16_13.name) && var17_14.getIntValue(this.mExifByteOrder) == 65535) {
                        this.mMimeType = 8;
                    }
                    var3_6 = var4_3;
                    if ((long)var1_1.peek() != var12_11) {
                        var1_1.seek(var12_11);
                        var3_6 = var4_3;
                    }
                }
            }
            var4_3 = var3_6;
        }
        if (var1_1.peek() + 4 > ByteOrderedDataInputStream.access$800(var1_1)) return;
        var2_2 = var1_1.readInt();
        if (var2_2 <= 8) return;
        if (var2_2 >= ByteOrderedDataInputStream.access$800(var1_1)) return;
        var1_1.seek(var2_2);
        if (this.mAttributes[4].isEmpty()) {
            this.readImageFileDirectory(var1_1, 4);
            return;
        }
        if (this.mAttributes[5].isEmpty() == false) return;
        this.readImageFileDirectory(var1_1, 5);
    }

    private void removeAttribute(String string2) {
        for (int i = 0; i < EXIF_TAGS.length; ++i) {
            this.mAttributes[i].remove(string2);
        }
    }

    private void retrieveJpegImageSize(ByteOrderedDataInputStream byteOrderedDataInputStream, int n) throws IOException {
        ExifAttribute exifAttribute = this.mAttributes[n].get(TAG_IMAGE_LENGTH);
        ExifAttribute exifAttribute2 = this.mAttributes[n].get(TAG_IMAGE_WIDTH);
        if ((exifAttribute == null || exifAttribute2 == null) && (exifAttribute = this.mAttributes[n].get(TAG_JPEG_INTERCHANGE_FORMAT)) != null) {
            this.getJpegAttributes(byteOrderedDataInputStream, exifAttribute.getIntValue(this.mExifByteOrder), n);
        }
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Lifted jumps to return sites
     */
    private void saveJpegAttributes(InputStream var1_1, OutputStream var2_2) throws IOException {
        var1_1 = new DataInputStream(var1_1);
        var2_2 = new ByteOrderedDataOutputStream(var2_2, ByteOrder.BIG_ENDIAN);
        if (var1_1.readByte() != -1) {
            throw new IOException("Invalid marker");
        }
        var2_2.writeByte(-1);
        if (var1_1.readByte() != -40) {
            throw new IOException("Invalid marker");
        }
        var2_2.writeByte(-40);
        var2_2.writeByte(-1);
        var2_2.writeByte(-31);
        this.writeExifSegment((ByteOrderedDataOutputStream)var2_2, 6);
        var5_3 = new byte[4096];
        block3 : do lbl-1000: // 4 sources:
        {
            block14 : {
                block13 : {
                    if (var1_1.readByte() != -1) {
                        throw new IOException("Invalid marker");
                    }
                    var3_4 = var1_1.readByte();
                    if (var3_4 == -31) break block13;
                    switch (var3_4) {
                        default: {
                            var2_2.writeByte(-1);
                            var2_2.writeByte(var3_4);
                            var3_4 = var1_1.readUnsignedShort();
                            var2_2.writeUnsignedShort(var3_4);
                            var3_4 = var4_5 = var3_4 - 2;
                            if (var4_5 < 0) {
                                throw new IOException("Invalid length");
                            }
                            do {
                                if (var3_4 <= 0 || (var4_5 = var1_1.read(var5_3, 0, Math.min(var3_4, var5_3.length))) < 0) ** GOTO lbl-1000
                                var2_2.write(var5_3, 0, var4_5);
                                var3_4 -= var4_5;
                            } while (true);
                        }
                        case -39: 
                        case -38: 
                    }
                    var2_2.writeByte(-1);
                    var2_2.writeByte(var3_4);
                    ExifInterface.copy(var1_1, var2_2);
                    return;
                }
                var4_5 = var1_1.readUnsignedShort() - 2;
                if (var4_5 < 0) {
                    throw new IOException("Invalid length");
                }
                var6_6 = new byte[6];
                if (var4_5 < 6) break block14;
                if (var1_1.read(var6_6) != 6) {
                    throw new IOException("Invalid exif");
                }
                if (!Arrays.equals(var6_6, ExifInterface.IDENTIFIER_EXIF_APP1)) break block14;
                var3_4 = var4_5 - 6;
                if (var1_1.skipBytes(var3_4) == var3_4) ** GOTO lbl-1000
                throw new IOException("Invalid length");
            }
            var2_2.writeByte(-1);
            var2_2.writeByte(var3_4);
            var2_2.writeUnsignedShort(var4_5 + 2);
            var3_4 = var4_5;
            if (var4_5 >= 6) {
                var3_4 = var4_5 - 6;
                var2_2.write(var6_6);
            }
            do {
                if (var3_4 <= 0 || (var4_5 = var1_1.read(var5_3, 0, Math.min(var3_4, var5_3.length))) < 0) continue block3;
                var2_2.write(var5_3, 0, var4_5);
                var3_4 -= var4_5;
            } while (true);
            break;
        } while (true);
    }

    private void setThumbnailData(ByteOrderedDataInputStream byteOrderedDataInputStream) throws IOException {
        HashMap<String, ExifAttribute> hashMap = this.mAttributes[4];
        ExifAttribute exifAttribute = hashMap.get(TAG_COMPRESSION);
        if (exifAttribute != null) {
            this.mThumbnailCompression = exifAttribute.getIntValue(this.mExifByteOrder);
            int n = this.mThumbnailCompression;
            if (n != 1) {
                switch (n) {
                    default: {
                        return;
                    }
                    case 6: {
                        this.handleThumbnailFromJfif(byteOrderedDataInputStream, hashMap);
                        return;
                    }
                    case 7: 
                }
            }
            if (this.isSupportedDataType(hashMap)) {
                this.handleThumbnailFromStrips(byteOrderedDataInputStream, hashMap);
                return;
            }
        } else {
            this.mThumbnailCompression = 6;
            this.handleThumbnailFromJfif(byteOrderedDataInputStream, hashMap);
        }
    }

    private void swapBasedOnImageSize(int n, int n2) throws IOException {
        if (!this.mAttributes[n].isEmpty()) {
            if (this.mAttributes[n2].isEmpty()) {
                return;
            }
            Object object = this.mAttributes[n].get(TAG_IMAGE_LENGTH);
            ExifAttribute exifAttribute = this.mAttributes[n].get(TAG_IMAGE_WIDTH);
            ExifAttribute exifAttribute2 = this.mAttributes[n2].get(TAG_IMAGE_LENGTH);
            ExifAttribute exifAttribute3 = this.mAttributes[n2].get(TAG_IMAGE_WIDTH);
            if (object != null) {
                if (exifAttribute == null) {
                    return;
                }
                if (exifAttribute2 != null) {
                    if (exifAttribute3 == null) {
                        return;
                    }
                    int n3 = object.getIntValue(this.mExifByteOrder);
                    int n4 = exifAttribute.getIntValue(this.mExifByteOrder);
                    int n5 = exifAttribute2.getIntValue(this.mExifByteOrder);
                    int n6 = exifAttribute3.getIntValue(this.mExifByteOrder);
                    if (n3 < n5 && n4 < n6) {
                        object = this.mAttributes[n];
                        this.mAttributes[n] = this.mAttributes[n2];
                        this.mAttributes[n2] = object;
                    }
                }
            }
            return;
        }
    }

    private boolean updateAttribute(String string2, ExifAttribute exifAttribute) {
        boolean bl = false;
        for (int i = 0; i < EXIF_TAGS.length; ++i) {
            if (!this.mAttributes[i].containsKey(string2)) continue;
            this.mAttributes[i].put(string2, exifAttribute);
            bl = true;
        }
        return bl;
    }

    private void updateImageSizeValues(ByteOrderedDataInputStream object, int n) throws IOException {
        ExifAttribute exifAttribute;
        ExifAttribute exifAttribute2;
        ExifAttribute exifAttribute3;
        ExifAttribute exifAttribute4;
        Object object2;
        block7 : {
            block11 : {
                block10 : {
                    block8 : {
                        block9 : {
                            object2 = this.mAttributes[n].get(TAG_DEFAULT_CROP_SIZE);
                            exifAttribute4 = this.mAttributes[n].get(TAG_RW2_SENSOR_TOP_BORDER);
                            exifAttribute2 = this.mAttributes[n].get(TAG_RW2_SENSOR_LEFT_BORDER);
                            exifAttribute = this.mAttributes[n].get(TAG_RW2_SENSOR_BOTTOM_BORDER);
                            exifAttribute3 = this.mAttributes[n].get(TAG_RW2_SENSOR_RIGHT_BORDER);
                            if (object2 == null) break block7;
                            if (object2.format != 5) break block8;
                            if ((object2 = (Rational[])((ExifAttribute)object2).getValue(this.mExifByteOrder)) == null || ((Rational[])object2).length != 2) break block9;
                            object = ExifAttribute.createURational(object2[0], this.mExifByteOrder);
                            object2 = ExifAttribute.createURational((Rational)object2[1], this.mExifByteOrder);
                            break block10;
                        }
                        object = new StringBuilder();
                        object.append("Invalid crop size values. cropSize=");
                        object.append(Arrays.toString(object2));
                        Log.w((String)TAG, (String)object.toString());
                        return;
                    }
                    if ((object2 = (int[])((ExifAttribute)object2).getValue(this.mExifByteOrder)) == null || ((Rational[])object2).length != 2) break block11;
                    object = ExifAttribute.createUShort((int)object2[0], this.mExifByteOrder);
                    object2 = ExifAttribute.createUShort((int)object2[1], this.mExifByteOrder);
                }
                this.mAttributes[n].put(TAG_IMAGE_WIDTH, (ExifAttribute)object);
                this.mAttributes[n].put(TAG_IMAGE_LENGTH, (ExifAttribute)object2);
                return;
            }
            object = new StringBuilder();
            object.append("Invalid crop size values. cropSize=");
            object.append(Arrays.toString((int[])object2));
            Log.w((String)TAG, (String)object.toString());
            return;
        }
        if (exifAttribute4 != null && exifAttribute2 != null && exifAttribute != null && exifAttribute3 != null) {
            int n2 = exifAttribute4.getIntValue(this.mExifByteOrder);
            int n3 = exifAttribute.getIntValue(this.mExifByteOrder);
            int n4 = exifAttribute3.getIntValue(this.mExifByteOrder);
            int n5 = exifAttribute2.getIntValue(this.mExifByteOrder);
            if (n3 > n2 && n4 > n5) {
                object = ExifAttribute.createUShort(n3 - n2, this.mExifByteOrder);
                object2 = ExifAttribute.createUShort(n4 - n5, this.mExifByteOrder);
                this.mAttributes[n].put(TAG_IMAGE_LENGTH, (ExifAttribute)object);
                this.mAttributes[n].put(TAG_IMAGE_WIDTH, (ExifAttribute)object2);
                return;
            }
        } else {
            this.retrieveJpegImageSize((ByteOrderedDataInputStream)object, n);
        }
    }

    private void validateImages(InputStream object) throws IOException {
        this.swapBasedOnImageSize(0, 5);
        this.swapBasedOnImageSize(0, 4);
        this.swapBasedOnImageSize(5, 4);
        object = this.mAttributes[1].get(TAG_PIXEL_X_DIMENSION);
        ExifAttribute exifAttribute = this.mAttributes[1].get(TAG_PIXEL_Y_DIMENSION);
        if (object != null && exifAttribute != null) {
            this.mAttributes[0].put(TAG_IMAGE_WIDTH, (ExifAttribute)object);
            this.mAttributes[0].put(TAG_IMAGE_LENGTH, exifAttribute);
        }
        if (this.mAttributes[4].isEmpty() && this.isThumbnail(this.mAttributes[5])) {
            this.mAttributes[4] = this.mAttributes[5];
            this.mAttributes[5] = new HashMap();
        }
        if (!this.isThumbnail(this.mAttributes[4])) {
            Log.d((String)TAG, (String)"No image meets the size requirements of a thumbnail image.");
        }
    }

    private int writeExifSegment(ByteOrderedDataOutputStream byteOrderedDataOutputStream, int n) throws IOException {
        int n2;
        int n3;
        int[] arrn = new int[EXIF_TAGS.length];
        Object object = new int[EXIF_TAGS.length];
        ExifTag[] object22 = EXIF_POINTER_TAGS;
        int n4 = object22.length;
        for (n3 = 0; n3 < n4; ++n3) {
            this.removeAttribute(object22[n3].name);
        }
        this.removeAttribute(ExifInterface.JPEG_INTERCHANGE_FORMAT_TAG.name);
        this.removeAttribute(ExifInterface.JPEG_INTERCHANGE_FORMAT_LENGTH_TAG.name);
        for (n3 = 0; n3 < EXIF_TAGS.length; ++n3) {
            Object[] arrobject = this.mAttributes[n3].entrySet().toArray();
            n2 = arrobject.length;
            for (n4 = 0; n4 < n2; ++n4) {
                Map.Entry entry = (Map.Entry)arrobject[n4];
                if (entry.getValue() != null) continue;
                this.mAttributes[n3].remove(entry.getKey());
            }
        }
        if (!this.mAttributes[1].isEmpty()) {
            this.mAttributes[0].put(ExifInterface.EXIF_POINTER_TAGS[1].name, ExifAttribute.createULong(0L, this.mExifByteOrder));
        }
        if (!this.mAttributes[2].isEmpty()) {
            this.mAttributes[0].put(ExifInterface.EXIF_POINTER_TAGS[2].name, ExifAttribute.createULong(0L, this.mExifByteOrder));
        }
        if (!this.mAttributes[3].isEmpty()) {
            this.mAttributes[1].put(ExifInterface.EXIF_POINTER_TAGS[3].name, ExifAttribute.createULong(0L, this.mExifByteOrder));
        }
        if (this.mHasThumbnail) {
            this.mAttributes[4].put(ExifInterface.JPEG_INTERCHANGE_FORMAT_TAG.name, ExifAttribute.createULong(0L, this.mExifByteOrder));
            this.mAttributes[4].put(ExifInterface.JPEG_INTERCHANGE_FORMAT_LENGTH_TAG.name, ExifAttribute.createULong(this.mThumbnailLength, this.mExifByteOrder));
        }
        for (n3 = 0; n3 < EXIF_TAGS.length; ++n3) {
            Iterator<Map.Entry<String, ExifAttribute>> iterator = this.mAttributes[n3].entrySet().iterator();
            n4 = 0;
            while (iterator.hasNext()) {
                n2 = iterator.next().getValue().size();
                if (n2 <= 4) continue;
                n4 += n2;
            }
            object[n3] = object[n3] + n4;
        }
        n3 = 8;
        for (n4 = 0; n4 < EXIF_TAGS.length; ++n4) {
            n2 = n3;
            if (!this.mAttributes[n4].isEmpty()) {
                arrn[n4] = n3;
                n2 = n3 + (this.mAttributes[n4].size() * 12 + 2 + 4 + object[n4]);
            }
            n3 = n2;
        }
        n4 = n3;
        if (this.mHasThumbnail) {
            this.mAttributes[4].put(ExifInterface.JPEG_INTERCHANGE_FORMAT_TAG.name, ExifAttribute.createULong(n3, this.mExifByteOrder));
            this.mThumbnailOffset = n + n3;
            n4 = n3 + this.mThumbnailLength;
        }
        n2 = n4 + 8;
        if (!this.mAttributes[1].isEmpty()) {
            this.mAttributes[0].put(ExifInterface.EXIF_POINTER_TAGS[1].name, ExifAttribute.createULong(arrn[1], this.mExifByteOrder));
        }
        if (!this.mAttributes[2].isEmpty()) {
            this.mAttributes[0].put(ExifInterface.EXIF_POINTER_TAGS[2].name, ExifAttribute.createULong(arrn[2], this.mExifByteOrder));
        }
        if (!this.mAttributes[3].isEmpty()) {
            this.mAttributes[1].put(ExifInterface.EXIF_POINTER_TAGS[3].name, ExifAttribute.createULong(arrn[3], this.mExifByteOrder));
        }
        byteOrderedDataOutputStream.writeUnsignedShort(n2);
        byteOrderedDataOutputStream.write(IDENTIFIER_EXIF_APP1);
        short s = this.mExifByteOrder == ByteOrder.BIG_ENDIAN ? (short)19789 : 18761;
        byteOrderedDataOutputStream.writeShort(s);
        byteOrderedDataOutputStream.setByteOrder(this.mExifByteOrder);
        byteOrderedDataOutputStream.writeUnsignedShort(42);
        byteOrderedDataOutputStream.writeUnsignedInt(8L);
        for (n = 0; n < EXIF_TAGS.length; ++n) {
            if (this.mAttributes[n].isEmpty()) continue;
            byteOrderedDataOutputStream.writeUnsignedShort(this.mAttributes[n].size());
            n3 = arrn[n] + 2 + this.mAttributes[n].size() * 12 + 4;
            for (Map.Entry entry : this.mAttributes[n].entrySet()) {
                int n5 = ExifInterface.sExifTagMapsForWriting[n].get(entry.getKey()).number;
                ExifAttribute exifAttribute = (ExifAttribute)entry.getValue();
                byteOrderedDataOutputStream.writeUnsignedShort(n5);
                byteOrderedDataOutputStream.writeUnsignedShort(exifAttribute.format);
                byteOrderedDataOutputStream.writeInt(exifAttribute.numberOfComponents);
                if (n4 > 4) {
                    byteOrderedDataOutputStream.writeUnsignedInt(n3);
                    n3 += n4;
                    continue;
                }
                byteOrderedDataOutputStream.write(exifAttribute.bytes);
                if (n4 >= 4) continue;
                for (n4 = exifAttribute.size(); n4 < 4; ++n4) {
                    byteOrderedDataOutputStream.writeByte(0);
                }
            }
            if (n == 0 && !this.mAttributes[4].isEmpty()) {
                byteOrderedDataOutputStream.writeUnsignedInt(arrn[4]);
            } else {
                byteOrderedDataOutputStream.writeUnsignedInt(0L);
            }
            object = this.mAttributes[n].entrySet().iterator();
            while (object.hasNext()) {
                ExifAttribute exifAttribute = (ExifAttribute)((Map.Entry)object.next()).getValue();
                if (exifAttribute.bytes.length <= 4) continue;
                byteOrderedDataOutputStream.write(exifAttribute.bytes, 0, exifAttribute.bytes.length);
            }
        }
        if (this.mHasThumbnail) {
            byteOrderedDataOutputStream.write(this.getThumbnailBytes());
        }
        byteOrderedDataOutputStream.setByteOrder(ByteOrder.BIG_ENDIAN);
        return n2;
    }

    public void flipHorizontally() {
        int n = 1;
        switch (this.getAttributeInt(TAG_ORIENTATION, 1)) {
            default: {
                n = 0;
                break;
            }
            case 8: {
                n = 7;
                break;
            }
            case 7: {
                n = 8;
                break;
            }
            case 6: {
                n = 5;
                break;
            }
            case 5: {
                n = 6;
                break;
            }
            case 4: {
                n = 3;
                break;
            }
            case 3: {
                n = 4;
                break;
            }
            case 1: {
                n = 2;
            }
            case 2: 
        }
        this.setAttribute(TAG_ORIENTATION, Integer.toString(n));
    }

    public void flipVertically() {
        int n = 1;
        switch (this.getAttributeInt(TAG_ORIENTATION, 1)) {
            default: {
                n = 0;
                break;
            }
            case 8: {
                n = 5;
                break;
            }
            case 7: {
                n = 6;
                break;
            }
            case 6: {
                n = 7;
                break;
            }
            case 5: {
                n = 8;
                break;
            }
            case 3: {
                n = 2;
                break;
            }
            case 2: {
                n = 3;
                break;
            }
            case 1: {
                n = 4;
            }
            case 4: 
        }
        this.setAttribute(TAG_ORIENTATION, Integer.toString(n));
    }

    public double getAltitude(double d) {
        double d2 = this.getAttributeDouble(TAG_GPS_ALTITUDE, -1.0);
        int n = this.getAttributeInt(TAG_GPS_ALTITUDE_REF, -1);
        if (d2 >= 0.0 && n >= 0) {
            int n2 = 1;
            if (n == 1) {
                n2 = -1;
            }
            return d2 * (double)n2;
        }
        return d;
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    @Nullable
    public String getAttribute(@NonNull String object) {
        Object object2 = this.getExifAttribute((String)object);
        if (object2 == null) return null;
        if (!sTagSetForCompatibility.contains(object)) {
            return object2.getStringValue(this.mExifByteOrder);
        }
        if (object.equals(TAG_GPS_TIMESTAMP)) {
            if (object2.format != 5 && object2.format != 10) {
                object = new StringBuilder();
                object.append("GPS Timestamp format is not rational. format=");
                object.append(object2.format);
                Log.w((String)TAG, (String)object.toString());
                return null;
            }
            object = (Rational[])((ExifAttribute)object2).getValue(this.mExifByteOrder);
            if (object != null && ((Object)object).length == 3) {
                return String.format("%02d:%02d:%02d", (int)((float)object[0].numerator / (float)object[0].denominator), (int)((float)object[1].numerator / (float)object[1].denominator), (int)((float)object[2].numerator / (float)object[2].denominator));
            }
            object2 = new StringBuilder();
            object2.append("Invalid GPS Timestamp array. array=");
            object2.append(Arrays.toString((Object[])object));
            Log.w((String)TAG, (String)object2.toString());
            return null;
        }
        try {
            return Double.toString(object2.getDoubleValue(this.mExifByteOrder));
        }
        catch (NumberFormatException numberFormatException) {
            return null;
        }
    }

    public double getAttributeDouble(@NonNull String object, double d) {
        if ((object = this.getExifAttribute((String)object)) == null) {
            return d;
        }
        try {
            double d2 = object.getDoubleValue(this.mExifByteOrder);
            return d2;
        }
        catch (NumberFormatException numberFormatException) {
            return d;
        }
    }

    public int getAttributeInt(@NonNull String object, int n) {
        if ((object = this.getExifAttribute((String)object)) == null) {
            return n;
        }
        try {
            int n2 = object.getIntValue(this.mExifByteOrder);
            return n2;
        }
        catch (NumberFormatException numberFormatException) {
            return n;
        }
    }

    /*
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    @RestrictTo(value={RestrictTo.Scope.LIBRARY})
    public long getDateTime() {
        long l;
        Object object = this.getAttribute(TAG_DATETIME);
        if (object == null) return -1L;
        if (!sNonZeroTimePattern.matcher((CharSequence)object).matches()) {
            return -1L;
        }
        ParsePosition parsePosition = new ParsePosition(0);
        try {
            object = sFormatter.parse((String)object, parsePosition);
            if (object == null) {
                return -1L;
            }
            l = object.getTime();
            object = this.getAttribute(TAG_SUBSEC_TIME);
            if (object == null) return l;
            long l2 = Long.parseLong((String)object);
            while (l2 > 1000L) {
                l2 /= 10L;
            }
            return l + l2;
        }
        catch (IllegalArgumentException illegalArgumentException) {
            return -1L;
        }
        catch (NumberFormatException numberFormatException) {
            return l;
        }
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    @RestrictTo(value={RestrictTo.Scope.LIBRARY})
    public long getGpsDateTime() {
        Object object;
        block4 : {
            object = this.getAttribute(TAG_GPS_DATESTAMP);
            Object object2 = this.getAttribute(TAG_GPS_TIMESTAMP);
            if (object == null) return -1L;
            if (object2 == null) return -1L;
            if (!sNonZeroTimePattern.matcher((CharSequence)object).matches() && !sNonZeroTimePattern.matcher((CharSequence)object2).matches()) {
                return -1L;
            }
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append((String)object);
            stringBuilder.append(' ');
            stringBuilder.append((String)object2);
            object = stringBuilder.toString();
            object2 = new ParsePosition(0);
            try {
                object = sFormatter.parse((String)object, (ParsePosition)object2);
                if (object != null) break block4;
                return -1L;
            }
            catch (IllegalArgumentException illegalArgumentException) {
                return -1L;
            }
        }
        return object.getTime();
    }

    @Deprecated
    public boolean getLatLong(float[] arrf) {
        double[] arrd = this.getLatLong();
        if (arrd == null) {
            return false;
        }
        arrf[0] = (float)arrd[0];
        arrf[1] = (float)arrd[1];
        return true;
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @Nullable
    public double[] getLatLong() {
        String string2 = this.getAttribute(TAG_GPS_LATITUDE);
        String string3 = this.getAttribute(TAG_GPS_LATITUDE_REF);
        String string4 = this.getAttribute(TAG_GPS_LONGITUDE);
        String string5 = this.getAttribute(TAG_GPS_LONGITUDE_REF);
        if (string2 != null && string3 != null && string4 != null && string5 != null) {
            double d;
            double d2;
            try {
                d2 = ExifInterface.convertRationalLatLonToDouble(string2, string3);
                d = ExifInterface.convertRationalLatLonToDouble(string4, string5);
            }
            catch (IllegalArgumentException illegalArgumentException) {}
            return new double[]{d2, d};
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("Latitude/longitude values are not parseable. ");
            stringBuilder.append(String.format("latValue=%s, latRef=%s, lngValue=%s, lngRef=%s", string2, string3, string4, string5));
            Log.w((String)TAG, (String)stringBuilder.toString());
        }
        return null;
    }

    public int getRotationDegrees() {
        switch (this.getAttributeInt(TAG_ORIENTATION, 1)) {
            default: {
                return 0;
            }
            case 6: 
            case 7: {
                return 90;
            }
            case 5: 
            case 8: {
                return 270;
            }
            case 3: 
            case 4: 
        }
        return 180;
    }

    @Nullable
    public byte[] getThumbnail() {
        if (this.mThumbnailCompression != 6 && this.mThumbnailCompression != 7) {
            return null;
        }
        return this.getThumbnailBytes();
    }

    @Nullable
    public Bitmap getThumbnailBitmap() {
        if (!this.mHasThumbnail) {
            return null;
        }
        if (this.mThumbnailBytes == null) {
            this.mThumbnailBytes = this.getThumbnailBytes();
        }
        if (this.mThumbnailCompression != 6 && this.mThumbnailCompression != 7) {
            if (this.mThumbnailCompression == 1) {
                Object object;
                int n;
                int[] arrn = new int[this.mThumbnailBytes.length / 3];
                for (n = 0; n < arrn.length; ++n) {
                    object = this.mThumbnailBytes;
                    int n2 = n * 3;
                    arrn[n] = (object[n2] << 16) + 0 + (this.mThumbnailBytes[n2 + 1] << 8) + this.mThumbnailBytes[n2 + 2];
                }
                object = this.mAttributes[4].get(TAG_IMAGE_LENGTH);
                ExifAttribute exifAttribute = this.mAttributes[4].get(TAG_IMAGE_WIDTH);
                if (object != null && exifAttribute != null) {
                    n = object.getIntValue(this.mExifByteOrder);
                    return Bitmap.createBitmap((int[])arrn, (int)exifAttribute.getIntValue(this.mExifByteOrder), (int)n, (Bitmap.Config)Bitmap.Config.ARGB_8888);
                }
            }
            return null;
        }
        return BitmapFactory.decodeByteArray((byte[])this.mThumbnailBytes, (int)0, (int)this.mThumbnailLength);
    }

    /*
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    @Nullable
    public byte[] getThumbnailBytes() {
        void var1_6;
        Object object;
        block18 : {
            Object object2;
            Object object3;
            block17 : {
                block19 : {
                    block16 : {
                        block15 : {
                            if (!this.mHasThumbnail) {
                                return null;
                            }
                            if (this.mThumbnailBytes != null) {
                                return this.mThumbnailBytes;
                            }
                            if (this.mAssetInputStream == null) break block15;
                            object2 = this.mAssetInputStream;
                            object3 = object2;
                            object = object2;
                            if (object2.markSupported()) {
                                object3 = object2;
                                object = object2;
                                object2.reset();
                                break block16;
                            }
                            object3 = object2;
                            object = object2;
                            Log.d((String)TAG, (String)"Cannot read thumbnail from inputstream without mark/reset support");
                            ExifInterface.closeQuietly((Closeable)object2);
                            return null;
                        }
                        try {
                            object2 = this.mFilename != null ? new FileInputStream(this.mFilename) : null;
                        }
                        catch (Throwable throwable) {
                            object = null;
                            break block18;
                        }
                        catch (IOException iOException) {
                            object3 = null;
                        }
                    }
                    if (object2 == null) {
                        object3 = object2;
                        object = object2;
                        throw new FileNotFoundException();
                    }
                    break block19;
                    catch (IOException iOException) {
                        break block17;
                    }
                }
                object3 = object2;
                object = object2;
                if (object2.skip(this.mThumbnailOffset) != (long)this.mThumbnailOffset) {
                    object3 = object2;
                    object = object2;
                    throw new IOException("Corrupted image");
                }
                object3 = object2;
                object = object2;
                byte[] arrby = new byte[this.mThumbnailLength];
                object3 = object2;
                object = object2;
                if (object2.read(arrby) != this.mThumbnailLength) {
                    object3 = object2;
                    object = object2;
                    throw new IOException("Corrupted image");
                }
                object3 = object2;
                object = object2;
                this.mThumbnailBytes = arrby;
                ExifInterface.closeQuietly((Closeable)object2);
                return arrby;
            }
            object = object3;
            try {
                Log.d((String)TAG, (String)"Encountered exception while getting thumbnail", (Throwable)object2);
            }
            catch (Throwable throwable) {
                // empty catch block
            }
            ExifInterface.closeQuietly((Closeable)object3);
            return null;
        }
        ExifInterface.closeQuietly(object);
        throw var1_6;
    }

    @Nullable
    public long[] getThumbnailRange() {
        if (!this.mHasThumbnail) {
            return null;
        }
        return new long[]{this.mThumbnailOffset, this.mThumbnailLength};
    }

    public boolean hasThumbnail() {
        return this.mHasThumbnail;
    }

    public boolean isFlipped() {
        int n = this.getAttributeInt(TAG_ORIENTATION, 1);
        if (n != 2 && n != 7) {
            switch (n) {
                default: {
                    return false;
                }
                case 4: 
                case 5: 
            }
        }
        return true;
    }

    public boolean isThumbnailCompressed() {
        if (this.mThumbnailCompression != 6 && this.mThumbnailCompression != 7) {
            return false;
        }
        return true;
    }

    public void resetOrientation() {
        this.setAttribute(TAG_ORIENTATION, Integer.toString(1));
    }

    public void rotate(int n) {
        if (n % 90 != 0) {
            throw new IllegalArgumentException("degree should be a multiple of 90");
        }
        int n2 = this.getAttributeInt(TAG_ORIENTATION, 1);
        boolean bl = ROTATION_ORDER.contains(n2);
        int n3 = 0;
        int n4 = 0;
        int n5 = 0;
        if (bl) {
            n3 = (ROTATION_ORDER.indexOf(n2) + n / 90) % 4;
            n = n5;
            if (n3 < 0) {
                n = 4;
            }
            n5 = ROTATION_ORDER.get(n3 + n);
        } else {
            n5 = n4;
            if (FLIPPED_ROTATION_ORDER.contains(n2)) {
                n5 = (FLIPPED_ROTATION_ORDER.indexOf(n2) + n / 90) % 4;
                n = n3;
                if (n5 < 0) {
                    n = 4;
                }
                n5 = FLIPPED_ROTATION_ORDER.get(n5 + n);
            }
        }
        this.setAttribute(TAG_ORIENTATION, Integer.toString(n5));
    }

    /*
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    public void saveAttributes() throws IOException {
        FileOutputStream fileOutputStream;
        void var1_5;
        File file;
        FileInputStream fileInputStream;
        block9 : {
            FileOutputStream fileOutputStream2;
            if (!this.mIsSupportedFile) throw new IOException("ExifInterface only supports saving attributes on JPEG formats.");
            if (this.mMimeType != 4) {
                throw new IOException("ExifInterface only supports saving attributes on JPEG formats.");
            }
            if (this.mFilename == null) {
                throw new IOException("ExifInterface does not support saving attributes for the current input.");
            }
            this.mThumbnailBytes = this.getThumbnail();
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append(this.mFilename);
            stringBuilder.append(".tmp");
            file = new File(stringBuilder.toString());
            if (!new File(this.mFilename).renameTo(file)) {
                stringBuilder = new StringBuilder();
                stringBuilder.append("Could not rename to ");
                stringBuilder.append(file.getAbsolutePath());
                throw new IOException(stringBuilder.toString());
            }
            fileOutputStream = null;
            fileInputStream = new FileInputStream(file);
            try {
                fileOutputStream2 = new FileOutputStream(this.mFilename);
            }
            catch (Throwable throwable) {
                break block9;
            }
            try {
                this.saveJpegAttributes(fileInputStream, fileOutputStream2);
            }
            catch (Throwable throwable) {
                fileOutputStream = fileOutputStream2;
                break block9;
            }
            ExifInterface.closeQuietly(fileInputStream);
            ExifInterface.closeQuietly(fileOutputStream2);
            file.delete();
            this.mThumbnailBytes = null;
            return;
            catch (Throwable throwable) {
                fileInputStream = null;
            }
        }
        ExifInterface.closeQuietly(fileInputStream);
        ExifInterface.closeQuietly(fileOutputStream);
        file.delete();
        throw var1_5;
    }

    public void setAltitude(double d) {
        String string2 = d >= 0.0 ? "0" : "1";
        this.setAttribute(TAG_GPS_ALTITUDE, new Rational(Math.abs(d)).toString());
        this.setAttribute(TAG_GPS_ALTITUDE_REF, string2);
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    public void setAttribute(@NonNull String var1_1, @Nullable String var2_4) {
        block28 : {
            var6_5 = var2_4;
            var5_6 = "ISOSpeedRatings".equals(var1_1) != false ? "PhotographicSensitivity" : var1_1;
            var1_1 = var6_5;
            if (var6_5 != null) {
                var1_1 = var6_5;
                if (ExifInterface.sTagSetForCompatibility.contains(var5_6)) {
                    if (var5_6.equals("GPSTimeStamp")) {
                        var1_1 = ExifInterface.sGpsTimestampPattern.matcher((CharSequence)var6_5);
                        if (!var1_1.find()) {
                            var1_1 = new StringBuilder();
                            var1_1.append("Invalid value for ");
                            var1_1.append((String)var5_6);
                            var1_1.append(" : ");
                            var1_1.append((String)var6_5);
                            Log.w((String)"ExifInterface", (String)var1_1.toString());
                            return;
                        }
                        var2_4 = new StringBuilder();
                        var2_4.append(Integer.parseInt(var1_1.group(1)));
                        var2_4.append("/1,");
                        var2_4.append(Integer.parseInt(var1_1.group(2)));
                        var2_4.append("/1,");
                        var2_4.append(Integer.parseInt(var1_1.group(3)));
                        var2_4.append("/1");
                        var1_1 = var2_4.toString();
                    } else {
                        var1_1 = new Rational(Double.parseDouble((String)var2_4)).toString();
                    }
                    break block28;
                    catch (NumberFormatException var1_2) {}
                    var1_3 = new StringBuilder();
                    var1_3.append("Invalid value for ");
                    var1_3.append((String)var5_6);
                    var1_3.append(" : ");
                    var1_3.append((String)var6_5);
                    Log.w((String)"ExifInterface", (String)var1_3.toString());
                    return;
                }
            }
        }
        var4_7 = 0;
        while (var4_7 < ExifInterface.EXIF_TAGS.length) {
            block29 : {
                block33 : {
                    block31 : {
                        block34 : {
                            block32 : {
                                block30 : {
                                    if (var4_7 == 4 && !this.mHasThumbnail || (var2_4 = ExifInterface.sExifTagMapsForWriting[var4_7].get(var5_6)) == null) break block29;
                                    if (var1_1 != null) break block30;
                                    this.mAttributes[var4_7].remove(var5_6);
                                    break block29;
                                }
                                var7_9 = ExifInterface.guessDataFormat((String)var1_1);
                                if (var2_4.primaryFormat == (Integer)var7_9.first || var2_4.primaryFormat == (Integer)var7_9.second) break block31;
                                if (var2_4.secondaryFormat == -1 || var2_4.secondaryFormat != (Integer)var7_9.first && var2_4.secondaryFormat != (Integer)var7_9.second) break block32;
                                var3_8 = var2_4.secondaryFormat;
                                break block33;
                            }
                            if (var2_4.primaryFormat == 1 || var2_4.primaryFormat == 7 || var2_4.primaryFormat == 2) break block34;
                            var6_5 = new StringBuilder();
                            var6_5.append("Given tag (");
                            var6_5.append((String)var5_6);
                            var6_5.append(") value didn't match with one of expected ");
                            var6_5.append("formats: ");
                            var6_5.append(ExifInterface.IFD_FORMAT_NAMES[var2_4.primaryFormat]);
                            if (var2_4.secondaryFormat == -1) {
                                var2_4 = "";
                            } else {
                                var8_10 = new StringBuilder();
                                var8_10.append(", ");
                                var8_10.append(ExifInterface.IFD_FORMAT_NAMES[var2_4.secondaryFormat]);
                                var2_4 = var8_10.toString();
                            }
                            var6_5.append((String)var2_4);
                            var6_5.append(" (guess: ");
                            var6_5.append(ExifInterface.IFD_FORMAT_NAMES[(Integer)var7_9.first]);
                            if ((Integer)var7_9.second == -1) {
                                var2_4 = "";
                            } else {
                                var2_4 = new StringBuilder();
                                var2_4.append(", ");
                                var2_4.append(ExifInterface.IFD_FORMAT_NAMES[(Integer)var7_9.second]);
                                var2_4 = var2_4.toString();
                            }
                            var6_5.append((String)var2_4);
                            var6_5.append(")");
                            Log.w((String)"ExifInterface", (String)var6_5.toString());
                            break block29;
                        }
                        var3_8 = var2_4.primaryFormat;
                        break block33;
                    }
                    var3_8 = var2_4.primaryFormat;
                }
                switch (var3_8) {
                    default: {
                        var2_4 = new StringBuilder();
                        var2_4.append("Data format isn't one of expected formats: ");
                        var2_4.append(var3_8);
                        Log.w((String)"ExifInterface", (String)var2_4.toString());
                        ** break;
                    }
                    case 12: {
                        var2_4 = var1_1.split(",");
                        var6_5 = new double[((Object)var2_4).length];
                        for (var3_8 = 0; var3_8 < ((Object)var2_4).length; ++var3_8) {
                            var6_5[var3_8] = Double.parseDouble((String)var2_4[var3_8]);
                        }
                        this.mAttributes[var4_7].put((String)var5_6, ExifAttribute.createDouble((double[])var6_5, this.mExifByteOrder));
                        ** break;
                    }
                    case 10: {
                        var2_4 = var1_1.split(",");
                        var6_5 = new Rational[((Object)var2_4).length];
                        for (var3_8 = 0; var3_8 < ((Object)var2_4).length; ++var3_8) {
                            var7_9 = var2_4[var3_8].split("/");
                            var6_5[var3_8] = (double)new Rational((long)Double.parseDouble(var7_9[0]), (long)Double.parseDouble(var7_9[1]));
                        }
                        this.mAttributes[var4_7].put((String)var5_6, ExifAttribute.createSRational((Rational[])var6_5, this.mExifByteOrder));
                        ** break;
                    }
                    case 9: {
                        var2_4 = var1_1.split(",");
                        var6_5 = new int[((Object)var2_4).length];
                        for (var3_8 = 0; var3_8 < ((Object)var2_4).length; ++var3_8) {
                            var6_5[var3_8] = Integer.parseInt((String)var2_4[var3_8]);
                        }
                        this.mAttributes[var4_7].put((String)var5_6, ExifAttribute.createSLong((int[])var6_5, this.mExifByteOrder));
                        ** break;
                    }
                    case 5: {
                        var2_4 = var1_1.split(",");
                        var6_5 = new Rational[((Object)var2_4).length];
                        for (var3_8 = 0; var3_8 < ((Object)var2_4).length; ++var3_8) {
                            var7_9 = var2_4[var3_8].split("/");
                            var6_5[var3_8] = (double)new Rational((long)Double.parseDouble(var7_9[0]), (long)Double.parseDouble(var7_9[1]));
                        }
                        this.mAttributes[var4_7].put((String)var5_6, ExifAttribute.createURational((Rational[])var6_5, this.mExifByteOrder));
                        ** break;
                    }
                    case 4: {
                        var2_4 = var1_1.split(",");
                        var6_5 = new long[((Object)var2_4).length];
                        for (var3_8 = 0; var3_8 < ((Object)var2_4).length; ++var3_8) {
                            var6_5[var3_8] = Long.parseLong((String)var2_4[var3_8]);
                        }
                        this.mAttributes[var4_7].put((String)var5_6, ExifAttribute.createULong((long[])var6_5, this.mExifByteOrder));
                        ** break;
                    }
                    case 3: {
                        var2_4 = var1_1.split(",");
                        var6_5 = new int[((Object)var2_4).length];
                        for (var3_8 = 0; var3_8 < ((Object)var2_4).length; ++var3_8) {
                            var6_5[var3_8] = Integer.parseInt((String)var2_4[var3_8]);
                        }
                        this.mAttributes[var4_7].put((String)var5_6, ExifAttribute.createUShort((int[])var6_5, this.mExifByteOrder));
                        ** break;
                    }
                    case 2: 
                    case 7: {
                        this.mAttributes[var4_7].put((String)var5_6, ExifAttribute.createString((String)var1_1));
                        ** break;
                    }
                    case 1: 
                }
                this.mAttributes[var4_7].put((String)var5_6, ExifAttribute.createByte((String)var1_1));
            }
            ++var4_7;
        }
    }

    @RestrictTo(value={RestrictTo.Scope.LIBRARY})
    public void setDateTime(long l) {
        this.setAttribute(TAG_DATETIME, sFormatter.format(new Date(l)));
        this.setAttribute(TAG_SUBSEC_TIME, Long.toString(l % 1000L));
    }

    public void setGpsInfo(Location arrstring) {
        if (arrstring == null) {
            return;
        }
        this.setAttribute(TAG_GPS_PROCESSING_METHOD, arrstring.getProvider());
        this.setLatLong(arrstring.getLatitude(), arrstring.getLongitude());
        this.setAltitude(arrstring.getAltitude());
        this.setAttribute(TAG_GPS_SPEED_REF, "K");
        this.setAttribute(TAG_GPS_SPEED, new Rational(arrstring.getSpeed() * (float)TimeUnit.HOURS.toSeconds(1L) / 1000.0f).toString());
        arrstring = sFormatter.format(new Date(arrstring.getTime())).split("\\s+");
        this.setAttribute(TAG_GPS_DATESTAMP, arrstring[0]);
        this.setAttribute(TAG_GPS_TIMESTAMP, arrstring[1]);
    }

    public void setLatLong(double d, double d2) {
        if (d >= -90.0 && d <= 90.0 && !Double.isNaN(d)) {
            if (d2 >= -180.0 && d2 <= 180.0 && !Double.isNaN(d2)) {
                String string2 = d >= 0.0 ? "N" : LATITUDE_SOUTH;
                this.setAttribute(TAG_GPS_LATITUDE_REF, string2);
                this.setAttribute(TAG_GPS_LATITUDE, this.convertDecimalDegree(Math.abs(d)));
                string2 = d2 >= 0.0 ? LONGITUDE_EAST : LONGITUDE_WEST;
                this.setAttribute(TAG_GPS_LONGITUDE_REF, string2);
                this.setAttribute(TAG_GPS_LONGITUDE, this.convertDecimalDegree(Math.abs(d2)));
                return;
            }
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("Longitude value ");
            stringBuilder.append(d2);
            stringBuilder.append(" is not valid.");
            throw new IllegalArgumentException(stringBuilder.toString());
        }
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("Latitude value ");
        stringBuilder.append(d);
        stringBuilder.append(" is not valid.");
        throw new IllegalArgumentException(stringBuilder.toString());
    }

    private static class ByteOrderedDataInputStream
    extends InputStream
    implements DataInput {
        private static final ByteOrder BIG_ENDIAN;
        private static final ByteOrder LITTLE_ENDIAN;
        private ByteOrder mByteOrder = ByteOrder.BIG_ENDIAN;
        private DataInputStream mDataInputStream;
        private final int mLength;
        private int mPosition;

        static {
            LITTLE_ENDIAN = ByteOrder.LITTLE_ENDIAN;
            BIG_ENDIAN = ByteOrder.BIG_ENDIAN;
        }

        public ByteOrderedDataInputStream(InputStream inputStream) throws IOException {
            this.mDataInputStream = new DataInputStream(inputStream);
            this.mLength = this.mDataInputStream.available();
            this.mPosition = 0;
            this.mDataInputStream.mark(this.mLength);
        }

        public ByteOrderedDataInputStream(byte[] arrby) throws IOException {
            this(new ByteArrayInputStream(arrby));
        }

        static /* synthetic */ int access$700(ByteOrderedDataInputStream byteOrderedDataInputStream) {
            return byteOrderedDataInputStream.mPosition;
        }

        static /* synthetic */ int access$800(ByteOrderedDataInputStream byteOrderedDataInputStream) {
            return byteOrderedDataInputStream.mLength;
        }

        @Override
        public int available() throws IOException {
            return this.mDataInputStream.available();
        }

        public int peek() {
            return this.mPosition;
        }

        @Override
        public int read() throws IOException {
            ++this.mPosition;
            return this.mDataInputStream.read();
        }

        @Override
        public int read(byte[] arrby, int n, int n2) throws IOException {
            n = this.mDataInputStream.read(arrby, n, n2);
            this.mPosition += n;
            return n;
        }

        @Override
        public boolean readBoolean() throws IOException {
            ++this.mPosition;
            return this.mDataInputStream.readBoolean();
        }

        @Override
        public byte readByte() throws IOException {
            ++this.mPosition;
            if (this.mPosition > this.mLength) {
                throw new EOFException();
            }
            int n = this.mDataInputStream.read();
            if (n < 0) {
                throw new EOFException();
            }
            return (byte)n;
        }

        @Override
        public char readChar() throws IOException {
            this.mPosition += 2;
            return this.mDataInputStream.readChar();
        }

        @Override
        public double readDouble() throws IOException {
            return Double.longBitsToDouble(this.readLong());
        }

        @Override
        public float readFloat() throws IOException {
            return Float.intBitsToFloat(this.readInt());
        }

        @Override
        public void readFully(byte[] arrby) throws IOException {
            this.mPosition += arrby.length;
            if (this.mPosition > this.mLength) {
                throw new EOFException();
            }
            if (this.mDataInputStream.read(arrby, 0, arrby.length) != arrby.length) {
                throw new IOException("Couldn't read up to the length of buffer");
            }
        }

        @Override
        public void readFully(byte[] arrby, int n, int n2) throws IOException {
            this.mPosition += n2;
            if (this.mPosition > this.mLength) {
                throw new EOFException();
            }
            if (this.mDataInputStream.read(arrby, n, n2) != n2) {
                throw new IOException("Couldn't read up to the length of buffer");
            }
        }

        @Override
        public int readInt() throws IOException {
            int n;
            int n2;
            int n3;
            this.mPosition += 4;
            if (this.mPosition > this.mLength) {
                throw new EOFException();
            }
            int n4 = this.mDataInputStream.read();
            if ((n4 | (n3 = this.mDataInputStream.read()) | (n = this.mDataInputStream.read()) | (n2 = this.mDataInputStream.read())) < 0) {
                throw new EOFException();
            }
            if (this.mByteOrder == LITTLE_ENDIAN) {
                return (n2 << 24) + (n << 16) + (n3 << 8) + n4;
            }
            if (this.mByteOrder == BIG_ENDIAN) {
                return (n4 << 24) + (n3 << 16) + (n << 8) + n2;
            }
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("Invalid byte order: ");
            stringBuilder.append(this.mByteOrder);
            throw new IOException(stringBuilder.toString());
        }

        @Override
        public String readLine() throws IOException {
            Log.d((String)ExifInterface.TAG, (String)"Currently unsupported");
            return null;
        }

        @Override
        public long readLong() throws IOException {
            int n;
            int n2;
            int n3;
            int n4;
            int n5;
            int n6;
            int n7;
            this.mPosition += 8;
            if (this.mPosition > this.mLength) {
                throw new EOFException();
            }
            int n8 = this.mDataInputStream.read();
            if ((n8 | (n6 = this.mDataInputStream.read()) | (n = this.mDataInputStream.read()) | (n5 = this.mDataInputStream.read()) | (n3 = this.mDataInputStream.read()) | (n2 = this.mDataInputStream.read()) | (n7 = this.mDataInputStream.read()) | (n4 = this.mDataInputStream.read())) < 0) {
                throw new EOFException();
            }
            if (this.mByteOrder == LITTLE_ENDIAN) {
                return ((long)n4 << 56) + ((long)n7 << 48) + ((long)n2 << 40) + ((long)n3 << 32) + ((long)n5 << 24) + ((long)n << 16) + ((long)n6 << 8) + (long)n8;
            }
            if (this.mByteOrder == BIG_ENDIAN) {
                return ((long)n8 << 56) + ((long)n6 << 48) + ((long)n << 40) + ((long)n5 << 32) + ((long)n3 << 24) + ((long)n2 << 16) + ((long)n7 << 8) + (long)n4;
            }
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("Invalid byte order: ");
            stringBuilder.append(this.mByteOrder);
            throw new IOException(stringBuilder.toString());
        }

        @Override
        public short readShort() throws IOException {
            int n;
            this.mPosition += 2;
            if (this.mPosition > this.mLength) {
                throw new EOFException();
            }
            int n2 = this.mDataInputStream.read();
            if ((n2 | (n = this.mDataInputStream.read())) < 0) {
                throw new EOFException();
            }
            if (this.mByteOrder == LITTLE_ENDIAN) {
                return (short)((n << 8) + n2);
            }
            if (this.mByteOrder == BIG_ENDIAN) {
                return (short)((n2 << 8) + n);
            }
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("Invalid byte order: ");
            stringBuilder.append(this.mByteOrder);
            throw new IOException(stringBuilder.toString());
        }

        @Override
        public String readUTF() throws IOException {
            this.mPosition += 2;
            return this.mDataInputStream.readUTF();
        }

        @Override
        public int readUnsignedByte() throws IOException {
            ++this.mPosition;
            return this.mDataInputStream.readUnsignedByte();
        }

        public long readUnsignedInt() throws IOException {
            return (long)this.readInt() & 0xFFFFFFFFL;
        }

        @Override
        public int readUnsignedShort() throws IOException {
            int n;
            this.mPosition += 2;
            if (this.mPosition > this.mLength) {
                throw new EOFException();
            }
            int n2 = this.mDataInputStream.read();
            if ((n2 | (n = this.mDataInputStream.read())) < 0) {
                throw new EOFException();
            }
            if (this.mByteOrder == LITTLE_ENDIAN) {
                return (n << 8) + n2;
            }
            if (this.mByteOrder == BIG_ENDIAN) {
                return (n2 << 8) + n;
            }
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("Invalid byte order: ");
            stringBuilder.append(this.mByteOrder);
            throw new IOException(stringBuilder.toString());
        }

        public void seek(long l) throws IOException {
            if ((long)this.mPosition > l) {
                this.mPosition = 0;
                this.mDataInputStream.reset();
                this.mDataInputStream.mark(this.mLength);
            } else {
                l -= (long)this.mPosition;
            }
            int n = (int)l;
            if (this.skipBytes(n) != n) {
                throw new IOException("Couldn't seek up to the byteCount");
            }
        }

        public void setByteOrder(ByteOrder byteOrder) {
            this.mByteOrder = byteOrder;
        }

        @Override
        public int skipBytes(int n) throws IOException {
            int n2 = Math.min(n, this.mLength - this.mPosition);
            for (n = 0; n < n2; n += this.mDataInputStream.skipBytes((int)(n2 - n))) {
            }
            this.mPosition += n;
            return n;
        }
    }

    private static class ByteOrderedDataOutputStream
    extends FilterOutputStream {
        private ByteOrder mByteOrder;
        private final OutputStream mOutputStream;

        public ByteOrderedDataOutputStream(OutputStream outputStream, ByteOrder byteOrder) {
            super(outputStream);
            this.mOutputStream = outputStream;
            this.mByteOrder = byteOrder;
        }

        public void setByteOrder(ByteOrder byteOrder) {
            this.mByteOrder = byteOrder;
        }

        @Override
        public void write(byte[] arrby) throws IOException {
            this.mOutputStream.write(arrby);
        }

        @Override
        public void write(byte[] arrby, int n, int n2) throws IOException {
            this.mOutputStream.write(arrby, n, n2);
        }

        public void writeByte(int n) throws IOException {
            this.mOutputStream.write(n);
        }

        public void writeInt(int n) throws IOException {
            if (this.mByteOrder == ByteOrder.LITTLE_ENDIAN) {
                this.mOutputStream.write(n >>> 0 & 255);
                this.mOutputStream.write(n >>> 8 & 255);
                this.mOutputStream.write(n >>> 16 & 255);
                this.mOutputStream.write(n >>> 24 & 255);
                return;
            }
            if (this.mByteOrder == ByteOrder.BIG_ENDIAN) {
                this.mOutputStream.write(n >>> 24 & 255);
                this.mOutputStream.write(n >>> 16 & 255);
                this.mOutputStream.write(n >>> 8 & 255);
                this.mOutputStream.write(n >>> 0 & 255);
            }
        }

        public void writeShort(short s) throws IOException {
            if (this.mByteOrder == ByteOrder.LITTLE_ENDIAN) {
                this.mOutputStream.write(s >>> 0 & 255);
                this.mOutputStream.write(s >>> 8 & 255);
                return;
            }
            if (this.mByteOrder == ByteOrder.BIG_ENDIAN) {
                this.mOutputStream.write(s >>> 8 & 255);
                this.mOutputStream.write(s >>> 0 & 255);
            }
        }

        public void writeUnsignedInt(long l) throws IOException {
            this.writeInt((int)l);
        }

        public void writeUnsignedShort(int n) throws IOException {
            this.writeShort((short)n);
        }
    }

    private static class ExifAttribute {
        public final byte[] bytes;
        public final int format;
        public final int numberOfComponents;

        private ExifAttribute(int n, int n2, byte[] arrby) {
            this.format = n;
            this.numberOfComponents = n2;
            this.bytes = arrby;
        }

        public static ExifAttribute createByte(String arrby) {
            if (arrby.length() == 1 && arrby.charAt(0) >= '0' && arrby.charAt(0) <= '1') {
                byte[] arrby2 = new byte[]{(byte)(arrby.charAt(0) - 48)};
                return new ExifAttribute(1, arrby2.length, arrby2);
            }
            arrby = arrby.getBytes(ASCII);
            return new ExifAttribute(1, arrby.length, arrby);
        }

        public static ExifAttribute createDouble(double d, ByteOrder byteOrder) {
            return ExifAttribute.createDouble(new double[]{d}, byteOrder);
        }

        public static ExifAttribute createDouble(double[] arrd, ByteOrder byteOrder) {
            ByteBuffer byteBuffer = ByteBuffer.wrap(new byte[ExifInterface.IFD_FORMAT_BYTES_PER_FORMAT[12] * arrd.length]);
            byteBuffer.order(byteOrder);
            int n = arrd.length;
            for (int i = 0; i < n; ++i) {
                byteBuffer.putDouble(arrd[i]);
            }
            return new ExifAttribute(12, arrd.length, byteBuffer.array());
        }

        public static ExifAttribute createSLong(int n, ByteOrder byteOrder) {
            return ExifAttribute.createSLong(new int[]{n}, byteOrder);
        }

        public static ExifAttribute createSLong(int[] arrn, ByteOrder byteOrder) {
            ByteBuffer byteBuffer = ByteBuffer.wrap(new byte[ExifInterface.IFD_FORMAT_BYTES_PER_FORMAT[9] * arrn.length]);
            byteBuffer.order(byteOrder);
            int n = arrn.length;
            for (int i = 0; i < n; ++i) {
                byteBuffer.putInt(arrn[i]);
            }
            return new ExifAttribute(9, arrn.length, byteBuffer.array());
        }

        public static ExifAttribute createSRational(Rational rational, ByteOrder byteOrder) {
            return ExifAttribute.createSRational(new Rational[]{rational}, byteOrder);
        }

        public static ExifAttribute createSRational(Rational[] arrrational, ByteOrder object) {
            ByteBuffer byteBuffer = ByteBuffer.wrap(new byte[ExifInterface.IFD_FORMAT_BYTES_PER_FORMAT[10] * arrrational.length]);
            byteBuffer.order((ByteOrder)object);
            int n = arrrational.length;
            for (int i = 0; i < n; ++i) {
                object = arrrational[i];
                byteBuffer.putInt((int)object.numerator);
                byteBuffer.putInt((int)object.denominator);
            }
            return new ExifAttribute(10, arrrational.length, byteBuffer.array());
        }

        public static ExifAttribute createString(String arrby) {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append((String)arrby);
            stringBuilder.append('\u0000');
            arrby = stringBuilder.toString().getBytes(ASCII);
            return new ExifAttribute(2, arrby.length, arrby);
        }

        public static ExifAttribute createULong(long l, ByteOrder byteOrder) {
            return ExifAttribute.createULong(new long[]{l}, byteOrder);
        }

        public static ExifAttribute createULong(long[] arrl, ByteOrder byteOrder) {
            ByteBuffer byteBuffer = ByteBuffer.wrap(new byte[ExifInterface.IFD_FORMAT_BYTES_PER_FORMAT[4] * arrl.length]);
            byteBuffer.order(byteOrder);
            int n = arrl.length;
            for (int i = 0; i < n; ++i) {
                byteBuffer.putInt((int)arrl[i]);
            }
            return new ExifAttribute(4, arrl.length, byteBuffer.array());
        }

        public static ExifAttribute createURational(Rational rational, ByteOrder byteOrder) {
            return ExifAttribute.createURational(new Rational[]{rational}, byteOrder);
        }

        public static ExifAttribute createURational(Rational[] arrrational, ByteOrder object) {
            ByteBuffer byteBuffer = ByteBuffer.wrap(new byte[ExifInterface.IFD_FORMAT_BYTES_PER_FORMAT[5] * arrrational.length]);
            byteBuffer.order((ByteOrder)object);
            int n = arrrational.length;
            for (int i = 0; i < n; ++i) {
                object = arrrational[i];
                byteBuffer.putInt((int)object.numerator);
                byteBuffer.putInt((int)object.denominator);
            }
            return new ExifAttribute(5, arrrational.length, byteBuffer.array());
        }

        public static ExifAttribute createUShort(int n, ByteOrder byteOrder) {
            return ExifAttribute.createUShort(new int[]{n}, byteOrder);
        }

        public static ExifAttribute createUShort(int[] arrn, ByteOrder byteOrder) {
            ByteBuffer byteBuffer = ByteBuffer.wrap(new byte[ExifInterface.IFD_FORMAT_BYTES_PER_FORMAT[3] * arrn.length]);
            byteBuffer.order(byteOrder);
            int n = arrn.length;
            for (int i = 0; i < n; ++i) {
                byteBuffer.putShort((short)arrn[i]);
            }
            return new ExifAttribute(3, arrn.length, byteBuffer.array());
        }

        /*
         * Unable to fully structure code
         * Enabled force condition propagation
         * Lifted jumps to return sites
         */
        private Object getValue(ByteOrder var1_1) {
            block99 : {
                block98 : {
                    block101 : {
                        block100 : {
                            var13_9 = var14_7 = new ByteOrderedDataInputStream(this.bytes);
                            var14_7.setByteOrder((ByteOrder)var1_1);
                            var13_9 = var14_7;
                            try {
                                var12_23 = this.format;
                                var5_24 = 1;
                                var3_25 = 0;
                                var6_26 = 0;
                                var7_27 = 0;
                                var8_28 = 0;
                                var9_29 = 0;
                                var10_30 = 0;
                                var11_31 = 0;
                                var4_32 = 0;
                                var2_33 = 0;
                            }
                            catch (IOException var13_21) {
                                var1_1 = var14_7;
                                var14_7 = var13_21;
                                break block100;
                            }
                            switch (var12_23) {
                                default: {
                                    if (var14_7 == null) return null;
                                    var14_7.close();
                                    return null;
                                }
                                case 12: {
                                    var13_9 = var14_7;
                                    var1_1 = new double[this.numberOfComponents];
                                    do {
                                        var13_9 = var14_7;
                                        if (var2_33 >= this.numberOfComponents) break;
                                        var13_9 = var14_7;
                                        var1_1[var2_33] = var14_7.readDouble();
                                        ++var2_33;
                                    } while (true);
                                    if (var14_7 == null) return var1_1;
                                    try {
                                        var14_7.close();
                                        return var1_1;
                                    }
                                    catch (IOException var13_10) {
                                        Log.e((String)"ExifInterface", (String)"IOException occurred while closing InputStream", (Throwable)var13_10);
                                    }
                                    return var1_1;
                                }
                                case 11: {
                                    var13_9 = var14_7;
                                    var1_1 = new double[this.numberOfComponents];
                                    var2_33 = var3_25;
                                    do {
                                        var13_9 = var14_7;
                                        if (var2_33 >= this.numberOfComponents) break;
                                        var13_9 = var14_7;
                                        var1_1[var2_33] = var14_7.readFloat();
                                        ++var2_33;
                                    } while (true);
                                    if (var14_7 == null) return var1_1;
                                    try {
                                        var14_7.close();
                                        return var1_1;
                                    }
                                    catch (IOException var13_11) {
                                        Log.e((String)"ExifInterface", (String)"IOException occurred while closing InputStream", (Throwable)var13_11);
                                    }
                                    return var1_1;
                                }
                                case 10: {
                                    var13_9 = var14_7;
                                    var1_1 = new Rational[this.numberOfComponents];
                                    var2_33 = var6_26;
                                    do {
                                        var13_9 = var14_7;
                                        if (var2_33 >= this.numberOfComponents) break;
                                        var13_9 = var14_7;
                                        var1_1[var2_33] = new Rational(var14_7.readInt(), var14_7.readInt());
                                        ++var2_33;
                                    } while (true);
                                    if (var14_7 == null) return var1_1;
                                    try {
                                        var14_7.close();
                                        return var1_1;
                                    }
                                    catch (IOException var13_12) {
                                        Log.e((String)"ExifInterface", (String)"IOException occurred while closing InputStream", (Throwable)var13_12);
                                    }
                                    return var1_1;
                                }
                                case 9: {
                                    var13_9 = var14_7;
                                    var1_1 = new int[this.numberOfComponents];
                                    var2_33 = var7_27;
                                    do {
                                        var13_9 = var14_7;
                                        if (var2_33 >= this.numberOfComponents) break;
                                        var13_9 = var14_7;
                                        var1_1[var2_33] = var14_7.readInt();
                                        ++var2_33;
                                    } while (true);
                                    if (var14_7 == null) return var1_1;
                                    try {
                                        var14_7.close();
                                        return var1_1;
                                    }
                                    catch (IOException var13_13) {
                                        Log.e((String)"ExifInterface", (String)"IOException occurred while closing InputStream", (Throwable)var13_13);
                                    }
                                    return var1_1;
                                }
                                case 8: {
                                    var13_9 = var14_7;
                                    var1_1 = new int[this.numberOfComponents];
                                    var2_33 = var8_28;
                                    do {
                                        var13_9 = var14_7;
                                        if (var2_33 >= this.numberOfComponents) break;
                                        var13_9 = var14_7;
                                        var1_1[var2_33] = var14_7.readShort();
                                        ++var2_33;
                                    } while (true);
                                    if (var14_7 == null) return var1_1;
                                    try {
                                        var14_7.close();
                                        return var1_1;
                                    }
                                    catch (IOException var13_14) {
                                        Log.e((String)"ExifInterface", (String)"IOException occurred while closing InputStream", (Throwable)var13_14);
                                    }
                                    return var1_1;
                                }
                                case 5: {
                                    var13_9 = var14_7;
                                    var1_1 = new Rational[this.numberOfComponents];
                                    var2_33 = var9_29;
                                    do {
                                        var13_9 = var14_7;
                                        if (var2_33 >= this.numberOfComponents) break;
                                        var13_9 = var14_7;
                                        var1_1[var2_33] = new Rational(var14_7.readUnsignedInt(), var14_7.readUnsignedInt());
                                        ++var2_33;
                                    } while (true);
                                    if (var14_7 == null) return var1_1;
                                    try {
                                        var14_7.close();
                                        return var1_1;
                                    }
                                    catch (IOException var13_15) {
                                        Log.e((String)"ExifInterface", (String)"IOException occurred while closing InputStream", (Throwable)var13_15);
                                    }
                                    return var1_1;
                                }
                                case 4: {
                                    var13_9 = var14_7;
                                    var1_1 = new long[this.numberOfComponents];
                                    var2_33 = var10_30;
                                    do {
                                        var13_9 = var14_7;
                                        if (var2_33 >= this.numberOfComponents) break;
                                        var13_9 = var14_7;
                                        var1_1[var2_33] = var14_7.readUnsignedInt();
                                        ++var2_33;
                                    } while (true);
                                    if (var14_7 == null) return var1_1;
                                    try {
                                        var14_7.close();
                                        return var1_1;
                                    }
                                    catch (IOException var13_16) {
                                        Log.e((String)"ExifInterface", (String)"IOException occurred while closing InputStream", (Throwable)var13_16);
                                    }
                                    return var1_1;
                                }
                                case 3: {
                                    var13_9 = var14_7;
                                    var1_1 = new int[this.numberOfComponents];
                                    var2_33 = var11_31;
                                    do {
                                        var13_9 = var14_7;
                                        if (var2_33 >= this.numberOfComponents) break;
                                        var13_9 = var14_7;
                                        var1_1[var2_33] = var14_7.readUnsignedShort();
                                        ++var2_33;
                                    } while (true);
                                    if (var14_7 == null) return var1_1;
                                    try {
                                        var14_7.close();
                                        return var1_1;
                                    }
                                    catch (IOException var13_17) {
                                        Log.e((String)"ExifInterface", (String)"IOException occurred while closing InputStream", (Throwable)var13_17);
                                    }
                                    return var1_1;
                                }
                                case 2: 
                                case 7: {
                                    var2_33 = var4_32;
                                    var13_9 = var14_7;
                                    if (this.numberOfComponents < ExifInterface.access$100().length) ** GOTO lbl210
                                    var2_33 = 0;
lbl197: // 2 sources:
                                    var3_25 = var5_24;
                                    var13_9 = var14_7;
                                    if (var2_33 >= ExifInterface.access$100().length) ** GOTO lbl205
                                    var13_9 = var14_7;
                                    if (this.bytes[var2_33] == ExifInterface.access$100()[var2_33]) break block98;
                                    var3_25 = 0;
lbl205: // 2 sources:
                                    var2_33 = var4_32;
                                    if (var3_25 != 0) {
                                        var13_9 = var14_7;
                                        var2_33 = ExifInterface.access$100().length;
                                    }
lbl210: // 4 sources:
                                    var13_9 = var14_7;
                                    var1_1 = new StringBuilder();
lbl213: // 2 sources:
                                    var13_9 = var14_7;
                                    if (var2_33 >= this.numberOfComponents) ** GOTO lbl229
                                    var13_9 = var14_7;
                                    var3_25 = this.bytes[var2_33];
                                    if (var3_25 == 0) ** GOTO lbl229
                                    if (var3_25 < 32) ** GOTO lbl225
                                    var13_9 = var14_7;
                                    var1_1.append((char)var3_25);
                                    break block99;
lbl225: // 1 sources:
                                    var13_9 = var14_7;
                                    var1_1.append('?');
                                    break block99;
lbl229: // 2 sources:
                                    var13_9 = var14_7;
                                    var1_1 = var1_1.toString();
                                    if (var14_7 == null) return var1_1;
                                    try {
                                        var14_7.close();
                                        return var1_1;
                                    }
                                    catch (IOException var13_18) {
                                        Log.e((String)"ExifInterface", (String)"IOException occurred while closing InputStream", (Throwable)var13_18);
                                    }
                                    return var1_1;
                                }
                                case 1: 
                                case 6: {
                                    var13_9 = var14_7;
                                    if (this.bytes.length != 1) ** GOTO lbl259
                                    var13_9 = var14_7;
                                    if (this.bytes[0] < 0) ** GOTO lbl259
                                    var13_9 = var14_7;
                                    if (this.bytes[0] > 1) ** GOTO lbl259
                                    var13_9 = var14_7;
                                    var1_1 = new String(new char[]{(char)(this.bytes[0] + 48)});
                                    if (var14_7 == null) return var1_1;
                                    try {
                                        var14_7.close();
                                        return var1_1;
                                    }
                                    catch (IOException var13_19) {
                                        Log.e((String)"ExifInterface", (String)"IOException occurred while closing InputStream", (Throwable)var13_19);
                                    }
                                    return var1_1;
lbl259: // 3 sources:
                                    var13_9 = var14_7;
                                    var1_1 = new String(this.bytes, ExifInterface.access$000());
                                    if (var14_7 == null) return var1_1;
                                    try {
                                        var14_7.close();
                                        return var1_1;
                                    }
                                    catch (IOException var13_20) {
                                        Log.e((String)"ExifInterface", (String)"IOException occurred while closing InputStream", (Throwable)var13_20);
                                    }
                                    return var1_1;
                                }
                            }
                            catch (IOException var1_2) {
                                Log.e((String)"ExifInterface", (String)"IOException occurred while closing InputStream", (Throwable)var1_2);
                            }
                            return null;
                            catch (Throwable var1_3) {
                                var13_9 = null;
                                break block101;
                            }
                            catch (IOException var14_8) {
                                var1_1 = null;
                            }
                        }
                        var13_9 = var1_1;
                        Log.w((String)"ExifInterface", (String)"IOException occurred during reading a value", (Throwable)var14_7);
                        if (var1_1 == null) return null;
                        try {
                            var1_1.close();
                            return null;
                        }
                        catch (IOException var1_4) {
                            Log.e((String)"ExifInterface", (String)"IOException occurred while closing InputStream", (Throwable)var1_4);
                        }
                        return null;
                        catch (Throwable var1_5) {
                            // empty catch block
                        }
                    }
                    if (var13_9 == null) throw var1_6;
                    try {
                        var13_9.close();
                        throw var1_6;
                    }
                    catch (IOException var13_22) {
                        Log.e((String)"ExifInterface", (String)"IOException occurred while closing InputStream", (Throwable)var13_22);
                    }
                    throw var1_6;
                }
                ++var2_33;
                ** GOTO lbl197
            }
            ++var2_33;
            ** GOTO lbl213
        }

        public double getDoubleValue(ByteOrder arrobject) {
            if ((arrobject = this.getValue((ByteOrder)arrobject)) == null) {
                throw new NumberFormatException("NULL can't be converted to a double value");
            }
            if (arrobject instanceof String) {
                return Double.parseDouble((String)arrobject);
            }
            if (arrobject instanceof long[]) {
                if ((arrobject = (long[])arrobject).length == 1) {
                    return arrobject[0];
                }
                throw new NumberFormatException("There are more than one component");
            }
            if (arrobject instanceof int[]) {
                if ((arrobject = (int[])arrobject).length == 1) {
                    return arrobject[0];
                }
                throw new NumberFormatException("There are more than one component");
            }
            if (arrobject instanceof double[]) {
                if ((arrobject = (double[])arrobject).length == 1) {
                    return arrobject[0];
                }
                throw new NumberFormatException("There are more than one component");
            }
            if (arrobject instanceof Rational[]) {
                if ((arrobject = (Rational[])arrobject).length == 1) {
                    return arrobject[0].calculate();
                }
                throw new NumberFormatException("There are more than one component");
            }
            throw new NumberFormatException("Couldn't find a double value");
        }

        public int getIntValue(ByteOrder arrl) {
            if ((arrl = this.getValue((ByteOrder)arrl)) == null) {
                throw new NumberFormatException("NULL can't be converted to a integer value");
            }
            if (arrl instanceof String) {
                return Integer.parseInt((String)arrl);
            }
            if (arrl instanceof long[]) {
                if ((arrl = (long[])arrl).length == 1) {
                    return (int)arrl[0];
                }
                throw new NumberFormatException("There are more than one component");
            }
            if (arrl instanceof int[]) {
                if ((arrl = (int[])arrl).length == 1) {
                    return (int)arrl[0];
                }
                throw new NumberFormatException("There are more than one component");
            }
            throw new NumberFormatException("Couldn't find a integer value");
        }

        public String getStringValue(ByteOrder object) {
            Object[] arrobject = this.getValue((ByteOrder)object);
            if (arrobject == null) {
                return null;
            }
            if (arrobject instanceof String) {
                return (String)arrobject;
            }
            object = new StringBuilder();
            boolean bl = arrobject instanceof long[];
            int n = 0;
            int n2 = 0;
            int n3 = 0;
            int n4 = 0;
            if (bl) {
                arrobject = arrobject;
                while (n4 < arrobject.length) {
                    object.append(arrobject[n4]);
                    n4 = n = n4 + 1;
                    if (n == arrobject.length) continue;
                    object.append(",");
                    n4 = n;
                }
                return object.toString();
            }
            if (arrobject instanceof int[]) {
                arrobject = (int[])arrobject;
                n4 = n;
                while (n4 < arrobject.length) {
                    object.append((int)arrobject[n4]);
                    n4 = n = n4 + 1;
                    if (n == arrobject.length) continue;
                    object.append(",");
                    n4 = n;
                }
                return object.toString();
            }
            if (arrobject instanceof double[]) {
                arrobject = arrobject;
                n4 = n2;
                while (n4 < arrobject.length) {
                    object.append((double)arrobject[n4]);
                    n4 = n = n4 + 1;
                    if (n == arrobject.length) continue;
                    object.append(",");
                    n4 = n;
                }
                return object.toString();
            }
            if (arrobject instanceof Rational[]) {
                arrobject = (Rational[])arrobject;
                n4 = n3;
                while (n4 < arrobject.length) {
                    object.append(arrobject[n4].numerator);
                    object.append('/');
                    object.append(arrobject[n4].denominator);
                    n4 = n = n4 + 1;
                    if (n == arrobject.length) continue;
                    object.append(",");
                    n4 = n;
                }
                return object.toString();
            }
            return null;
        }

        public int size() {
            return ExifInterface.IFD_FORMAT_BYTES_PER_FORMAT[this.format] * this.numberOfComponents;
        }

        public String toString() {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("(");
            stringBuilder.append(ExifInterface.IFD_FORMAT_NAMES[this.format]);
            stringBuilder.append(", data length:");
            stringBuilder.append(this.bytes.length);
            stringBuilder.append(")");
            return stringBuilder.toString();
        }
    }

    static class ExifTag {
        public final String name;
        public final int number;
        public final int primaryFormat;
        public final int secondaryFormat;

        private ExifTag(String string2, int n, int n2) {
            this.name = string2;
            this.number = n;
            this.primaryFormat = n2;
            this.secondaryFormat = -1;
        }

        private ExifTag(String string2, int n, int n2, int n3) {
            this.name = string2;
            this.number = n;
            this.primaryFormat = n2;
            this.secondaryFormat = n3;
        }

        static /* synthetic */ boolean access$900(ExifTag exifTag, int n) {
            return exifTag.isFormatCompatible(n);
        }

        private boolean isFormatCompatible(int n) {
            if (this.primaryFormat != 7) {
                if (n == 7) {
                    return true;
                }
                if (this.primaryFormat != n) {
                    if (this.secondaryFormat == n) {
                        return true;
                    }
                    if ((this.primaryFormat == 4 || this.secondaryFormat == 4) && n == 3) {
                        return true;
                    }
                    if ((this.primaryFormat == 9 || this.secondaryFormat == 9) && n == 8) {
                        return true;
                    }
                    if ((this.primaryFormat == 12 || this.secondaryFormat == 12) && n == 11) {
                        return true;
                    }
                    return false;
                }
                return true;
            }
            return true;
        }
    }

    @Retention(value=RetentionPolicy.SOURCE)
    @RestrictTo(value={RestrictTo.Scope.LIBRARY})
    public static @interface IfdType {
    }

    private static class Rational {
        public final long denominator;
        public final long numerator;

        private Rational(double d) {
            this((long)(d * 10000.0), 10000L);
        }

        private Rational(long l, long l2) {
            if (l2 == 0L) {
                this.numerator = 0L;
                this.denominator = 1L;
                return;
            }
            this.numerator = l;
            this.denominator = l2;
        }

        public double calculate() {
            return (double)this.numerator / (double)this.denominator;
        }

        public String toString() {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append(this.numerator);
            stringBuilder.append("/");
            stringBuilder.append(this.denominator);
            return stringBuilder.toString();
        }
    }

}

