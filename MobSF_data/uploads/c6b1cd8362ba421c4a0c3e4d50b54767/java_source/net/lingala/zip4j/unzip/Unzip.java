/*
 * Decompiled with CFR 0_132.
 */
package net.lingala.zip4j.unzip;

import java.io.File;
import java.util.ArrayList;
import net.lingala.zip4j.exception.ZipException;
import net.lingala.zip4j.io.ZipInputStream;
import net.lingala.zip4j.model.CentralDirectory;
import net.lingala.zip4j.model.FileHeader;
import net.lingala.zip4j.model.UnzipParameters;
import net.lingala.zip4j.model.Zip64ExtendedInfo;
import net.lingala.zip4j.model.ZipModel;
import net.lingala.zip4j.progress.ProgressMonitor;
import net.lingala.zip4j.unzip.Unzip$1;
import net.lingala.zip4j.unzip.Unzip$2;
import net.lingala.zip4j.unzip.UnzipEngine;
import net.lingala.zip4j.util.Zip4jUtil;

public class Unzip {
    private ZipModel zipModel;

    public Unzip(ZipModel zipModel) throws ZipException {
        if (zipModel == null) {
            throw new ZipException("ZipModel is null");
        }
        this.zipModel = zipModel;
    }

    static /* synthetic */ void access$0(Unzip unzip, ArrayList arrayList, UnzipParameters unzipParameters, ProgressMonitor progressMonitor, String string2) throws ZipException {
        unzip.initExtractAll(arrayList, unzipParameters, progressMonitor, string2);
    }

    static /* synthetic */ void access$1(Unzip unzip, FileHeader fileHeader, String string2, UnzipParameters unzipParameters, String string3, ProgressMonitor progressMonitor) throws ZipException {
        unzip.initExtractFile(fileHeader, string2, unzipParameters, string3, progressMonitor);
    }

    private long calculateTotalWork(ArrayList arrayList) throws ZipException {
        if (arrayList == null) {
            throw new ZipException("fileHeaders is null, cannot calculate total work");
        }
        int n = 0;
        long l = 0L;
        while (n < arrayList.size()) {
            FileHeader fileHeader = (FileHeader)arrayList.get(n);
            l = fileHeader.getZip64ExtendedInfo() != null && fileHeader.getZip64ExtendedInfo().getUnCompressedSize() > 0L ? (l += fileHeader.getZip64ExtendedInfo().getCompressedSize()) : (l += fileHeader.getCompressedSize());
            ++n;
        }
        return l;
    }

    private void checkOutputDirectoryStructure(FileHeader object, String charSequence, String string2) throws ZipException {
        if (object != null && Zip4jUtil.isStringNotNullAndNotEmpty((String)charSequence)) {
            object = object.getFileName();
            if (Zip4jUtil.isStringNotNullAndNotEmpty(string2)) {
                object = string2;
            }
            if (!Zip4jUtil.isStringNotNullAndNotEmpty((String)object)) {
                return;
            }
            charSequence = new StringBuffer(String.valueOf(charSequence));
            charSequence.append((String)object);
            object = charSequence.toString();
            try {
                object = new File(new File((String)object).getParent());
                if (!object.exists()) {
                    object.mkdirs();
                }
                return;
            }
            catch (Exception exception) {
                throw new ZipException(exception);
            }
        }
        throw new ZipException("Cannot check output directory structure...one of the parameters was null");
    }

    private void initExtractAll(ArrayList arrayList, UnzipParameters unzipParameters, ProgressMonitor progressMonitor, String string2) throws ZipException {
        int n = 0;
        while (n < arrayList.size()) {
            this.initExtractFile((FileHeader)arrayList.get(n), string2, unzipParameters, null, progressMonitor);
            if (progressMonitor.isCancelAllTasks()) {
                progressMonitor.setResult(3);
                progressMonitor.setState(0);
                return;
            }
            ++n;
        }
        return;
    }

    /*
     * Exception decompiling
     */
    private void initExtractFile(FileHeader var1_1, String var2_6, UnzipParameters var3_7, String var4_8, ProgressMonitor var5_9) throws ZipException {
        // This method has failed to decompile.  When submitting a bug report, please provide this stack trace, and (if you hold appropriate legal rights) the relevant class file.
        // org.benf.cfr.reader.util.ConfusedCFRException: Started 2 blocks at once
        // org.benf.cfr.reader.bytecode.analysis.opgraph.Op04StructuredStatement.getStartingBlocks(Op04StructuredStatement.java:393)
        // org.benf.cfr.reader.bytecode.analysis.opgraph.Op04StructuredStatement.buildNestedBlocks(Op04StructuredStatement.java:471)
        // org.benf.cfr.reader.bytecode.analysis.opgraph.Op03SimpleStatement.createInitialStructuredBlock(Op03SimpleStatement.java:2960)
        // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisInner(CodeAnalyser.java:818)
        // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisOrWrapFail(CodeAnalyser.java:196)
        // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysis(CodeAnalyser.java:141)
        // org.benf.cfr.reader.entities.attributes.AttributeCode.analyse(AttributeCode.java:95)
        // org.benf.cfr.reader.entities.Method.analyse(Method.java:372)
        // org.benf.cfr.reader.entities.ClassFile.analyseMid(ClassFile.java:867)
        // org.benf.cfr.reader.entities.ClassFile.analyseTop(ClassFile.java:768)
        // org.benf.cfr.reader.Main.doJar(Main.java:141)
        // org.benf.cfr.reader.Main.main(Main.java:242)
        throw new IllegalStateException("Decompilation failed");
    }

    public void extractAll(UnzipParameters unzipParameters, String string2, ProgressMonitor progressMonitor, boolean bl) throws ZipException {
        Object object = this.zipModel.getCentralDirectory();
        if (object != null && object.getFileHeaders() != null) {
            object = object.getFileHeaders();
            progressMonitor.setCurrentOperation(1);
            progressMonitor.setTotalWork(this.calculateTotalWork((ArrayList)object));
            progressMonitor.setState(1);
            if (bl) {
                new Unzip$1(this, "Zip4j", (ArrayList)object, unzipParameters, progressMonitor, string2).start();
                return;
            }
            this.initExtractAll((ArrayList)object, unzipParameters, progressMonitor, string2);
            return;
        }
        throw new ZipException("invalid central directory in zipModel");
    }

    public void extractFile(FileHeader fileHeader, String string2, UnzipParameters unzipParameters, String string3, ProgressMonitor progressMonitor, boolean bl) throws ZipException {
        if (fileHeader == null) {
            throw new ZipException("fileHeader is null");
        }
        progressMonitor.setCurrentOperation(1);
        progressMonitor.setTotalWork(fileHeader.getCompressedSize());
        progressMonitor.setState(1);
        progressMonitor.setPercentDone(0);
        progressMonitor.setFileName(fileHeader.getFileName());
        if (bl) {
            new Unzip$2(this, "Zip4j", fileHeader, string2, unzipParameters, string3, progressMonitor).start();
            return;
        }
        this.initExtractFile(fileHeader, string2, unzipParameters, string3, progressMonitor);
        progressMonitor.endProgressMonitorSuccess();
    }

    public ZipInputStream getInputStream(FileHeader fileHeader) throws ZipException {
        return new UnzipEngine(this.zipModel, fileHeader).getInputStream();
    }
}

