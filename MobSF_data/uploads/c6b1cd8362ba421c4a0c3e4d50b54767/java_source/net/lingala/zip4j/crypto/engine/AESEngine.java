/*
 * Decompiled with CFR 0_132.
 */
package net.lingala.zip4j.crypto.engine;

import java.lang.reflect.Array;
import net.lingala.zip4j.exception.ZipException;

public class AESEngine {
    private static final byte[] S;
    private static final int[] T0;
    private static final int[] rcon;
    private int C0;
    private int C1;
    private int C2;
    private int C3;
    private int rounds;
    private int[][] workingKey = null;

    static {
        byte[] arrby = new byte[256];
        arrby[0] = 99;
        arrby[1] = 124;
        arrby[2] = 119;
        arrby[3] = 123;
        arrby[4] = -14;
        arrby[5] = 107;
        arrby[6] = 111;
        arrby[7] = -59;
        arrby[8] = 48;
        arrby[9] = 1;
        arrby[10] = 103;
        arrby[11] = 43;
        arrby[12] = -2;
        arrby[13] = -41;
        arrby[14] = -85;
        arrby[15] = 118;
        arrby[16] = -54;
        arrby[17] = -126;
        arrby[18] = -55;
        arrby[19] = 125;
        arrby[20] = -6;
        arrby[21] = 89;
        arrby[22] = 71;
        arrby[23] = -16;
        arrby[24] = -83;
        arrby[25] = -44;
        arrby[26] = -94;
        arrby[27] = -81;
        arrby[28] = -100;
        arrby[29] = -92;
        arrby[30] = 114;
        arrby[31] = -64;
        arrby[32] = -73;
        arrby[33] = -3;
        arrby[34] = -109;
        arrby[35] = 38;
        arrby[36] = 54;
        arrby[37] = 63;
        arrby[38] = -9;
        arrby[39] = -52;
        arrby[40] = 52;
        arrby[41] = -91;
        arrby[42] = -27;
        arrby[43] = -15;
        arrby[44] = 113;
        arrby[45] = -40;
        arrby[46] = 49;
        arrby[47] = 21;
        arrby[48] = 4;
        arrby[49] = -57;
        arrby[50] = 35;
        arrby[51] = -61;
        arrby[52] = 24;
        arrby[53] = -106;
        arrby[54] = 5;
        arrby[55] = -102;
        arrby[56] = 7;
        arrby[57] = 18;
        arrby[58] = -128;
        arrby[59] = -30;
        arrby[60] = -21;
        arrby[61] = 39;
        arrby[62] = -78;
        arrby[63] = 117;
        arrby[64] = 9;
        arrby[65] = -125;
        arrby[66] = 44;
        arrby[67] = 26;
        arrby[68] = 27;
        arrby[69] = 110;
        arrby[70] = 90;
        arrby[71] = -96;
        arrby[72] = 82;
        arrby[73] = 59;
        arrby[74] = -42;
        arrby[75] = -77;
        arrby[76] = 41;
        arrby[77] = -29;
        arrby[78] = 47;
        arrby[79] = -124;
        arrby[80] = 83;
        arrby[81] = -47;
        arrby[83] = -19;
        arrby[84] = 32;
        arrby[85] = -4;
        arrby[86] = -79;
        arrby[87] = 91;
        arrby[88] = 106;
        arrby[89] = -53;
        arrby[90] = -66;
        arrby[91] = 57;
        arrby[92] = 74;
        arrby[93] = 76;
        arrby[94] = 88;
        arrby[95] = -49;
        arrby[96] = -48;
        arrby[97] = -17;
        arrby[98] = -86;
        arrby[99] = -5;
        arrby[100] = 67;
        arrby[101] = 77;
        arrby[102] = 51;
        arrby[103] = -123;
        arrby[104] = 69;
        arrby[105] = -7;
        arrby[106] = 2;
        arrby[107] = 127;
        arrby[108] = 80;
        arrby[109] = 60;
        arrby[110] = -97;
        arrby[111] = -88;
        arrby[112] = 81;
        arrby[113] = -93;
        arrby[114] = 64;
        arrby[115] = -113;
        arrby[116] = -110;
        arrby[117] = -99;
        arrby[118] = 56;
        arrby[119] = -11;
        arrby[120] = -68;
        arrby[121] = -74;
        arrby[122] = -38;
        arrby[123] = 33;
        arrby[124] = 16;
        arrby[125] = -1;
        arrby[126] = -13;
        arrby[127] = -46;
        arrby[128] = -51;
        arrby[129] = 12;
        arrby[130] = 19;
        arrby[131] = -20;
        arrby[132] = 95;
        arrby[133] = -105;
        arrby[134] = 68;
        arrby[135] = 23;
        arrby[136] = -60;
        arrby[137] = -89;
        arrby[138] = 126;
        arrby[139] = 61;
        arrby[140] = 100;
        arrby[141] = 93;
        arrby[142] = 25;
        arrby[143] = 115;
        arrby[144] = 96;
        arrby[145] = -127;
        arrby[146] = 79;
        arrby[147] = -36;
        arrby[148] = 34;
        arrby[149] = 42;
        arrby[150] = -112;
        arrby[151] = -120;
        arrby[152] = 70;
        arrby[153] = -18;
        arrby[154] = -72;
        arrby[155] = 20;
        arrby[156] = -34;
        arrby[157] = 94;
        arrby[158] = 11;
        arrby[159] = -37;
        arrby[160] = -32;
        arrby[161] = 50;
        arrby[162] = 58;
        arrby[163] = 10;
        arrby[164] = 73;
        arrby[165] = 6;
        arrby[166] = 36;
        arrby[167] = 92;
        arrby[168] = -62;
        arrby[169] = -45;
        arrby[170] = -84;
        arrby[171] = 98;
        arrby[172] = -111;
        arrby[173] = -107;
        arrby[174] = -28;
        arrby[175] = 121;
        arrby[176] = -25;
        arrby[177] = -56;
        arrby[178] = 55;
        arrby[179] = 109;
        arrby[180] = -115;
        arrby[181] = -43;
        arrby[182] = 78;
        arrby[183] = -87;
        arrby[184] = 108;
        arrby[185] = 86;
        arrby[186] = -12;
        arrby[187] = -22;
        arrby[188] = 101;
        arrby[189] = 122;
        arrby[190] = -82;
        arrby[191] = 8;
        arrby[192] = -70;
        arrby[193] = 120;
        arrby[194] = 37;
        arrby[195] = 46;
        arrby[196] = 28;
        arrby[197] = -90;
        arrby[198] = -76;
        arrby[199] = -58;
        arrby[200] = -24;
        arrby[201] = -35;
        arrby[202] = 116;
        arrby[203] = 31;
        arrby[204] = 75;
        arrby[205] = -67;
        arrby[206] = -117;
        arrby[207] = -118;
        arrby[208] = 112;
        arrby[209] = 62;
        arrby[210] = -75;
        arrby[211] = 102;
        arrby[212] = 72;
        arrby[213] = 3;
        arrby[214] = -10;
        arrby[215] = 14;
        arrby[216] = 97;
        arrby[217] = 53;
        arrby[218] = 87;
        arrby[219] = -71;
        arrby[220] = -122;
        arrby[221] = -63;
        arrby[222] = 29;
        arrby[223] = -98;
        arrby[224] = -31;
        arrby[225] = -8;
        arrby[226] = -104;
        arrby[227] = 17;
        arrby[228] = 105;
        arrby[229] = -39;
        arrby[230] = -114;
        arrby[231] = -108;
        arrby[232] = -101;
        arrby[233] = 30;
        arrby[234] = -121;
        arrby[235] = -23;
        arrby[236] = -50;
        arrby[237] = 85;
        arrby[238] = 40;
        arrby[239] = -33;
        arrby[240] = -116;
        arrby[241] = -95;
        arrby[242] = -119;
        arrby[243] = 13;
        arrby[244] = -65;
        arrby[245] = -26;
        arrby[246] = 66;
        arrby[247] = 104;
        arrby[248] = 65;
        arrby[249] = -103;
        arrby[250] = 45;
        arrby[251] = 15;
        arrby[252] = -80;
        arrby[253] = 84;
        arrby[254] = -69;
        arrby[255] = 22;
        S = arrby;
        rcon = new int[]{1, 2, 4, 8, 16, 32, 64, 128, 27, 54, 108, 216, 171, 77, 154, 47, 94, 188, 99, 198, 151, 53, 106, 212, 179, 125, 250, 239, 197, 145};
        arrby = new int[256];
        arrby[0] = -1520213050;
        arrby[1] = -2072216328;
        arrby[2] = -1720223762;
        arrby[3] = -1921287178;
        arrby[4] = 234025727;
        arrby[5] = -1117033514;
        arrby[6] = -1318096930;
        arrby[7] = 1422247313;
        arrby[8] = 1345335392;
        arrby[9] = 50397442;
        arrby[10] = -1452841010;
        arrby[11] = 2099981142;
        arrby[12] = 436141799;
        arrby[13] = 1658312629;
        arrby[14] = -424957107;
        arrby[15] = -1703512340;
        arrby[16] = 1170918031;
        arrby[17] = -1652391393;
        arrby[18] = 1086966153;
        arrby[19] = -2021818886;
        arrby[20] = 368769775;
        arrby[21] = -346465870;
        arrby[22] = -918075506;
        arrby[23] = 200339707;
        arrby[24] = -324162239;
        arrby[25] = 1742001331;
        arrby[26] = -39673249;
        arrby[27] = -357585083;
        arrby[28] = -1080255453;
        arrby[29] = -140204973;
        arrby[30] = -1770884380;
        arrby[31] = 1539358875;
        arrby[32] = -1028147339;
        arrby[33] = 486407649;
        arrby[34] = -1366060227;
        arrby[35] = 1780885068;
        arrby[36] = 1513502316;
        arrby[37] = 1094664062;
        arrby[38] = 49805301;
        arrby[39] = 1338821763;
        arrby[40] = 1546925160;
        arrby[41] = -190470831;
        arrby[42] = 887481809;
        arrby[43] = 150073849;
        arrby[44] = -1821281822;
        arrby[45] = 1943591083;
        arrby[46] = 1395732834;
        arrby[47] = 1058346282;
        arrby[48] = 201589768;
        arrby[49] = 1388824469;
        arrby[50] = 1696801606;
        arrby[51] = 1589887901;
        arrby[52] = 672667696;
        arrby[53] = -1583966665;
        arrby[54] = 251987210;
        arrby[55] = -1248159185;
        arrby[56] = 151455502;
        arrby[57] = 907153956;
        arrby[58] = -1686077413;
        arrby[59] = 1038279391;
        arrby[60] = 652995533;
        arrby[61] = 1764173646;
        arrby[62] = -843926913;
        arrby[63] = -1619692054;
        arrby[64] = 453576978;
        arrby[65] = -1635548387;
        arrby[66] = 1949051992;
        arrby[67] = 773462580;
        arrby[68] = 756751158;
        arrby[69] = -1301385508;
        arrby[70] = -296068428;
        arrby[71] = -73359269;
        arrby[72] = -162377052;
        arrby[73] = 1295727478;
        arrby[74] = 1641469623;
        arrby[75] = -827083907;
        arrby[76] = 2066295122;
        arrby[77] = 1055122397;
        arrby[78] = 1898917726;
        arrby[79] = -1752923117;
        arrby[80] = -179088474;
        arrby[81] = 1758581177;
        arrby[83] = 753790401;
        arrby[84] = 1612718144;
        arrby[85] = 536673507;
        arrby[86] = -927878791;
        arrby[87] = -312779850;
        arrby[88] = -1100322092;
        arrby[89] = 1187761037;
        arrby[90] = -641810841;
        arrby[91] = 1262041458;
        arrby[92] = -565556588;
        arrby[93] = -733197160;
        arrby[94] = -396863312;
        arrby[95] = 1255133061;
        arrby[96] = 1808847035;
        arrby[97] = 720367557;
        arrby[98] = -441800113;
        arrby[99] = 385612781;
        arrby[100] = -985447546;
        arrby[101] = -682799718;
        arrby[102] = 1429418854;
        arrby[103] = -1803188975;
        arrby[104] = -817543798;
        arrby[105] = 284817897;
        arrby[106] = 100794884;
        arrby[107] = -2122350594;
        arrby[108] = -263171936;
        arrby[109] = 1144798328;
        arrby[110] = -1163944155;
        arrby[111] = -475486133;
        arrby[112] = -212774494;
        arrby[113] = -22830243;
        arrby[114] = -1069531008;
        arrby[115] = -1970303227;
        arrby[116] = -1382903233;
        arrby[117] = -1130521311;
        arrby[118] = 1211644016;
        arrby[119] = 83228145;
        arrby[120] = -541279133;
        arrby[121] = -1044990345;
        arrby[122] = 1977277103;
        arrby[123] = 1663115586;
        arrby[124] = 806359072;
        arrby[125] = 452984805;
        arrby[126] = 250868733;
        arrby[127] = 1842533055;
        arrby[128] = 1288555905;
        arrby[129] = 336333848;
        arrby[130] = 890442534;
        arrby[131] = 804056259;
        arrby[132] = -513843266;
        arrby[133] = -1567123659;
        arrby[134] = -867941240;
        arrby[135] = 957814574;
        arrby[136] = 1472513171;
        arrby[137] = -223893675;
        arrby[138] = -2105639172;
        arrby[139] = 1195195770;
        arrby[140] = -1402706744;
        arrby[141] = -413311558;
        arrby[142] = 723065138;
        arrby[143] = -1787595802;
        arrby[144] = -1604296512;
        arrby[145] = -1736343271;
        arrby[146] = -783331426;
        arrby[147] = 2145180835;
        arrby[148] = 1713513028;
        arrby[149] = 2116692564;
        arrby[150] = -1416589253;
        arrby[151] = -2088204277;
        arrby[152] = -901364084;
        arrby[153] = 703524551;
        arrby[154] = -742868885;
        arrby[155] = 1007948840;
        arrby[156] = 2044649127;
        arrby[157] = -497131844;
        arrby[158] = 487262998;
        arrby[159] = 1994120109;
        arrby[160] = 1004593371;
        arrby[161] = 1446130276;
        arrby[162] = 1312438900;
        arrby[163] = 503974420;
        arrby[164] = -615954030;
        arrby[165] = 168166924;
        arrby[166] = 1814307912;
        arrby[167] = -463709000;
        arrby[168] = 1573044895;
        arrby[169] = 1859376061;
        arrby[170] = -273896381;
        arrby[171] = -1503501628;
        arrby[172] = -1466855111;
        arrby[173] = -1533700815;
        arrby[174] = 937747667;
        arrby[175] = -1954973198;
        arrby[176] = 854058965;
        arrby[177] = 1137232011;
        arrby[178] = 1496790894;
        arrby[179] = -1217565222;
        arrby[180] = -1936880383;
        arrby[181] = 1691735473;
        arrby[182] = -766620004;
        arrby[183] = -525751991;
        arrby[184] = -1267962664;
        arrby[185] = -95005012;
        arrby[186] = 133494003;
        arrby[187] = 636152527;
        arrby[188] = -1352309302;
        arrby[189] = -1904575756;
        arrby[190] = -374428089;
        arrby[191] = 403179536;
        arrby[192] = -709182865;
        arrby[193] = -2005370640;
        arrby[194] = 1864705354;
        arrby[195] = 1915629148;
        arrby[196] = 605822008;
        arrby[197] = -240736681;
        arrby[198] = -944458637;
        arrby[199] = 1371981463;
        arrby[200] = 602466507;
        arrby[201] = 2094914977;
        arrby[202] = -1670089496;
        arrby[203] = 555687742;
        arrby[204] = -582268010;
        arrby[205] = -591544991;
        arrby[206] = -2037675251;
        arrby[207] = -2054518257;
        arrby[208] = -1871679264;
        arrby[209] = 1111375484;
        arrby[210] = -994724495;
        arrby[211] = -1436129588;
        arrby[212] = -666351472;
        arrby[213] = 84083462;
        arrby[214] = 32962295;
        arrby[215] = 302911004;
        arrby[216] = -1553899070;
        arrby[217] = 1597322602;
        arrby[218] = -111716434;
        arrby[219] = -793134743;
        arrby[220] = -1853454825;
        arrby[221] = 1489093017;
        arrby[222] = 656219450;
        arrby[223] = -1180787161;
        arrby[224] = 954327513;
        arrby[225] = 335083755;
        arrby[226] = -1281845205;
        arrby[227] = 856756514;
        arrby[228] = -1150719534;
        arrby[229] = 1893325225;
        arrby[230] = -1987146233;
        arrby[231] = -1483434957;
        arrby[232] = -1231316179;
        arrby[233] = 572399164;
        arrby[234] = -1836611819;
        arrby[235] = 552200649;
        arrby[236] = 1238290055;
        arrby[237] = -11184726;
        arrby[238] = 2015897680;
        arrby[239] = 2061492133;
        arrby[240] = -1886614525;
        arrby[241] = -123625127;
        arrby[242] = -2138470135;
        arrby[243] = 386731290;
        arrby[244] = -624967835;
        arrby[245] = 837215959;
        arrby[246] = -968736124;
        arrby[247] = -1201116976;
        arrby[248] = -1019133566;
        arrby[249] = -1332111063;
        arrby[250] = 1999449434;
        arrby[251] = 286199582;
        arrby[252] = -877612933;
        arrby[253] = -61582168;
        arrby[254] = -692339859;
        arrby[255] = 974525996;
        T0 = arrby;
    }

    public AESEngine(byte[] arrby) throws ZipException {
        this.init(arrby);
    }

    private final void encryptBlock(int[][] arrn) {
        this.C0 ^= arrn[0][0];
        this.C1 ^= arrn[0][1];
        this.C2 ^= arrn[0][2];
        this.C3 ^= arrn[0][3];
        int n = 1;
        do {
            int n2;
            int n3;
            int n4;
            int n5;
            int n6;
            int n7;
            int n8;
            int n9;
            if (n >= this.rounds - 1) {
                n4 = T0[this.C0 & 255] ^ this.shift(T0[this.C1 >> 8 & 255], 24) ^ this.shift(T0[this.C2 >> 16 & 255], 16) ^ this.shift(T0[this.C3 >> 24 & 255], 8) ^ arrn[n][0];
                n3 = T0[this.C1 & 255] ^ this.shift(T0[this.C2 >> 8 & 255], 24) ^ this.shift(T0[this.C3 >> 16 & 255], 16) ^ this.shift(T0[this.C0 >> 24 & 255], 8) ^ arrn[n][1];
                n8 = T0[this.C2 & 255] ^ this.shift(T0[this.C3 >> 8 & 255], 24) ^ this.shift(T0[this.C0 >> 16 & 255], 16) ^ this.shift(T0[this.C1 >> 24 & 255], 8) ^ arrn[n][2];
                n9 = T0[this.C3 & 255];
                n6 = this.shift(T0[this.C0 >> 8 & 255], 24);
                n2 = this.shift(T0[this.C1 >> 16 & 255], 16);
                n7 = this.shift(T0[this.C2 >> 24 & 255], 8);
                n5 = n + 1;
                n = arrn[n][3] ^ (n9 ^ n6 ^ n2 ^ n7);
                n9 = S[n4 & 255];
                n6 = S[n3 >> 8 & 255];
                n2 = S[n8 >> 16 & 255];
                n7 = S[n >> 24 & 255];
                this.C0 = arrn[n5][0] ^ ((n6 & 255) << 8 ^ n9 & 255 ^ (n2 & 255) << 16 ^ n7 << 24);
                this.C1 = S[n3 & 255] & 255 ^ (S[n8 >> 8 & 255] & 255) << 8 ^ (S[n >> 16 & 255] & 255) << 16 ^ S[n4 >> 24 & 255] << 24 ^ arrn[n5][1];
                this.C2 = S[n8 & 255] & 255 ^ (S[n >> 8 & 255] & 255) << 8 ^ (S[n4 >> 16 & 255] & 255) << 16 ^ S[n3 >> 24 & 255] << 24 ^ arrn[n5][2];
                n = S[n & 255];
                n4 = S[n4 >> 8 & 255];
                n3 = S[n3 >> 16 & 255];
                n8 = S[n8 >> 24 & 255];
                this.C3 = arrn[n5][3] ^ (n & 255 ^ (n4 & 255) << 8 ^ (n3 & 255) << 16 ^ n8 << 24);
                return;
            }
            n5 = T0[this.C0 & 255] ^ this.shift(T0[this.C1 >> 8 & 255], 24) ^ this.shift(T0[this.C2 >> 16 & 255], 16) ^ this.shift(T0[this.C3 >> 24 & 255], 8) ^ arrn[n][0];
            n8 = T0[this.C1 & 255] ^ this.shift(T0[this.C2 >> 8 & 255], 24) ^ this.shift(T0[this.C3 >> 16 & 255], 16) ^ this.shift(T0[this.C0 >> 24 & 255], 8) ^ arrn[n][1];
            n3 = T0[this.C2 & 255] ^ this.shift(T0[this.C3 >> 8 & 255], 24) ^ this.shift(T0[this.C0 >> 16 & 255], 16) ^ this.shift(T0[this.C1 >> 24 & 255], 8) ^ arrn[n][2];
            n9 = T0[this.C3 & 255];
            n6 = this.shift(T0[this.C0 >> 8 & 255], 24);
            n2 = this.shift(T0[this.C1 >> 16 & 255], 16);
            n7 = this.shift(T0[this.C2 >> 24 & 255], 8);
            n4 = n + 1;
            n = arrn[n][3] ^ (n9 ^ n6 ^ n2 ^ n7);
            this.C0 = T0[n5 & 255] ^ this.shift(T0[n8 >> 8 & 255], 24) ^ this.shift(T0[n3 >> 16 & 255], 16) ^ this.shift(T0[n >> 24 & 255], 8) ^ arrn[n4][0];
            this.C1 = T0[n8 & 255] ^ this.shift(T0[n3 >> 8 & 255], 24) ^ this.shift(T0[n >> 16 & 255], 16) ^ this.shift(T0[n5 >> 24 & 255], 8) ^ arrn[n4][1];
            this.C2 = T0[n3 & 255] ^ this.shift(T0[n >> 8 & 255], 24) ^ this.shift(T0[n5 >> 16 & 255], 16) ^ this.shift(T0[n8 >> 24 & 255], 8) ^ arrn[n4][2];
            this.C3 = T0[n & 255] ^ this.shift(T0[n5 >> 8 & 255], 24) ^ this.shift(T0[n8 >> 16 & 255], 16) ^ this.shift(T0[n3 >> 24 & 255], 8) ^ arrn[n4][3];
            n = n4 + 1;
        } while (true);
    }

    private int[][] generateWorkingKey(byte[] arrby) throws ZipException {
        int n = arrby.length / 4;
        if (n != 4 && n != 6 && n != 8 || n * 4 != arrby.length) {
            throw new ZipException("invalid key length (not 128/192/256)");
        }
        this.rounds = n + 6;
        int[][] arrn = (int[][])Array.newInstance(Integer.TYPE, this.rounds + 1, 4);
        int n2 = 0;
        int n3 = 0;
        do {
            if (n2 >= arrby.length) {
                int n4 = this.rounds;
                n2 = n;
                do {
                    if (n2 >= n4 + 1 << 2) {
                        return arrn;
                    }
                    n3 = n2 - 1;
                    int n5 = arrn[n3 >> 2][n3 & 3];
                    int n6 = n2 % n;
                    if (n6 == 0) {
                        n3 = this.subWord(this.shift(n5, 8)) ^ rcon[n2 / n - 1];
                    } else {
                        n3 = n5;
                        if (n > 6) {
                            n3 = n5;
                            if (n6 == 4) {
                                n3 = this.subWord(n5);
                            }
                        }
                    }
                    arrby = arrn[n2 >> 2];
                    n5 = n2 - n;
                    arrby[n2 & 3] = n3 ^ arrn[n5 >> 2][n5 & 3];
                    ++n2;
                } while (true);
            }
            arrn[n3 >> 2][n3 & 3] = arrby[n2] & 255 | (arrby[n2 + 1] & 255) << 8 | (arrby[n2 + 2] & 255) << 16 | arrby[n2 + 3] << 24;
            n2 += 4;
            ++n3;
        } while (true);
    }

    private int shift(int n, int n2) {
        return n << - n2 | n >>> n2;
    }

    private final void stateIn(byte[] arrby, int n) {
        int n2 = n + 1;
        int n3 = this.C0 = arrby[n] & 255;
        n = n2 + 1;
        n3 = this.C0 = n3 | (arrby[n2] & 255) << 8;
        n2 = n + 1;
        n3 = this.C0 = n3 | (arrby[n] & 255) << 16;
        n = n2 + 1;
        this.C0 = n3 | arrby[n2] << 24;
        n2 = n + 1;
        n3 = this.C1 = arrby[n] & 255;
        n = n2 + 1;
        n3 = this.C1 = (arrby[n2] & 255) << 8 | n3;
        n2 = n + 1;
        n3 = this.C1 = n3 | (arrby[n] & 255) << 16;
        n = n2 + 1;
        this.C1 = n3 | arrby[n2] << 24;
        n2 = n + 1;
        n3 = this.C2 = arrby[n] & 255;
        n = n2 + 1;
        n3 = this.C2 = (arrby[n2] & 255) << 8 | n3;
        n2 = n + 1;
        n3 = this.C2 = n3 | (arrby[n] & 255) << 16;
        n = n2 + 1;
        this.C2 = n3 | arrby[n2] << 24;
        n2 = n + 1;
        n3 = this.C3 = arrby[n] & 255;
        n = n2 + 1;
        this.C3 = (arrby[n2] & 255) << 8 | n3;
        this.C3 |= (arrby[n] & 255) << 16;
        n2 = this.C3;
        this.C3 = arrby[n + 1] << 24 | n2;
    }

    private final void stateOut(byte[] arrby, int n) {
        int n2 = n + 1;
        arrby[n] = (byte)this.C0;
        n = n2 + 1;
        arrby[n2] = (byte)(this.C0 >> 8);
        n2 = n + 1;
        arrby[n] = (byte)(this.C0 >> 16);
        n = n2 + 1;
        arrby[n2] = (byte)(this.C0 >> 24);
        n2 = n + 1;
        arrby[n] = (byte)this.C1;
        n = n2 + 1;
        arrby[n2] = (byte)(this.C1 >> 8);
        n2 = n + 1;
        arrby[n] = (byte)(this.C1 >> 16);
        n = n2 + 1;
        arrby[n2] = (byte)(this.C1 >> 24);
        n2 = n + 1;
        arrby[n] = (byte)this.C2;
        n = n2 + 1;
        arrby[n2] = (byte)(this.C2 >> 8);
        n2 = n + 1;
        arrby[n] = (byte)(this.C2 >> 16);
        n = n2 + 1;
        arrby[n2] = (byte)(this.C2 >> 24);
        n2 = n + 1;
        arrby[n] = (byte)this.C3;
        n = n2 + 1;
        arrby[n2] = (byte)(this.C3 >> 8);
        arrby[n] = (byte)(this.C3 >> 16);
        arrby[n + 1] = (byte)(this.C3 >> 24);
    }

    private int subWord(int n) {
        byte by = S[n & 255];
        byte by2 = S[n >> 8 & 255];
        byte by3 = S[n >> 16 & 255];
        return S[n >> 24 & 255] << 24 | (by & 255 | (by2 & 255) << 8 | (by3 & 255) << 16);
    }

    public void init(byte[] arrby) throws ZipException {
        this.workingKey = this.generateWorkingKey(arrby);
    }

    public int processBlock(byte[] arrby, int n, byte[] arrby2, int n2) throws ZipException {
        if (this.workingKey == null) {
            throw new ZipException("AES engine not initialised");
        }
        if (n + 16 > arrby.length) {
            throw new ZipException("input buffer too short");
        }
        if (n2 + 16 > arrby2.length) {
            throw new ZipException("output buffer too short");
        }
        this.stateIn(arrby, n);
        this.encryptBlock(this.workingKey);
        this.stateOut(arrby2, n2);
        return 16;
    }

    public int processBlock(byte[] arrby, byte[] arrby2) throws ZipException {
        return this.processBlock(arrby, 0, arrby2, 0);
    }
}

