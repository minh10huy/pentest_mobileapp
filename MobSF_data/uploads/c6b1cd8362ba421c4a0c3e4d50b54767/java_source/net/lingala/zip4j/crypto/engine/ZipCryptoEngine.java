/*
 * Decompiled with CFR 0_132.
 */
package net.lingala.zip4j.crypto.engine;

public class ZipCryptoEngine {
    private static final int[] CRC_TABLE = new int[256];
    private final int[] keys = new int[3];

    static {
        int n = 0;
        block0 : while (n < 256) {
            int n2 = n;
            int n3 = 0;
            do {
                if (n3 >= 8) {
                    ZipCryptoEngine.CRC_TABLE[n] = n2;
                    ++n;
                    continue block0;
                }
                n2 = (n2 & 1) == 1 ? n2 >>> 1 ^ -306674912 : (n2 >>>= 1);
                ++n3;
            } while (true);
            break;
        }
        return;
    }

    private int crc32(int n, byte by) {
        return CRC_TABLE[(n ^ by) & 255] ^ n >>> 8;
    }

    public byte decryptByte() {
        int n = this.keys[2] | 2;
        return (byte)(n * (n ^ 1) >>> 8);
    }

    public void initKeys(char[] arrc) {
        int[] arrn = this.keys;
        int n = 0;
        arrn[0] = 305419896;
        this.keys[1] = 591751049;
        this.keys[2] = 878082192;
        while (n < arrc.length) {
            this.updateKeys((byte)(arrc[n] & 255));
            ++n;
        }
        return;
    }

    public void updateKeys(byte by) {
        this.keys[0] = this.crc32(this.keys[0], by);
        int[] arrn = this.keys;
        arrn[1] = arrn[1] + (this.keys[0] & 255);
        this.keys[1] = this.keys[1] * 134775813 + 1;
        this.keys[2] = this.crc32(this.keys[2], (byte)(this.keys[1] >> 24));
    }
}

