/*
 * Decompiled with CFR 0_132.
 */
package net.lingala.zip4j.crypto.PBKDF2;

import java.security.InvalidKeyException;
import java.security.Key;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;
import net.lingala.zip4j.crypto.PBKDF2.PRF;

public class MacBasedPRF
implements PRF {
    protected int hLen;
    protected Mac mac;
    protected String macAlgorithm;

    public MacBasedPRF(String string2) {
        this.macAlgorithm = string2;
        try {
            this.mac = Mac.getInstance(string2);
            this.hLen = this.mac.getMacLength();
            return;
        }
        catch (NoSuchAlgorithmException noSuchAlgorithmException) {
            throw new RuntimeException(noSuchAlgorithmException);
        }
    }

    public MacBasedPRF(String string2, String string3) {
        this.macAlgorithm = string2;
        try {
            this.mac = Mac.getInstance(string2, string3);
            this.hLen = this.mac.getMacLength();
            return;
        }
        catch (NoSuchProviderException noSuchProviderException) {
            throw new RuntimeException(noSuchProviderException);
        }
        catch (NoSuchAlgorithmException noSuchAlgorithmException) {
            throw new RuntimeException(noSuchAlgorithmException);
        }
    }

    public byte[] doFinal() {
        return this.mac.doFinal();
    }

    @Override
    public byte[] doFinal(byte[] arrby) {
        return this.mac.doFinal(arrby);
    }

    @Override
    public int getHLen() {
        return this.hLen;
    }

    @Override
    public void init(byte[] arrby) {
        try {
            this.mac.init(new SecretKeySpec(arrby, this.macAlgorithm));
            return;
        }
        catch (InvalidKeyException invalidKeyException) {
            throw new RuntimeException(invalidKeyException);
        }
    }

    public void update(byte[] arrby) {
        try {
            this.mac.update(arrby);
            return;
        }
        catch (IllegalStateException illegalStateException) {
            throw new RuntimeException(illegalStateException);
        }
    }

    public void update(byte[] arrby, int n, int n2) {
        try {
            this.mac.update(arrby, n, n2);
            return;
        }
        catch (IllegalStateException illegalStateException) {
            throw new RuntimeException(illegalStateException);
        }
    }
}

