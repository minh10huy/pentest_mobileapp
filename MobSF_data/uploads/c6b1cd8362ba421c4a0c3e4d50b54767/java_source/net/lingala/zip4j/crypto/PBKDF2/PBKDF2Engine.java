/*
 * Decompiled with CFR 0_132.
 */
package net.lingala.zip4j.crypto.PBKDF2;

import net.lingala.zip4j.crypto.PBKDF2.MacBasedPRF;
import net.lingala.zip4j.crypto.PBKDF2.PBKDF2Parameters;
import net.lingala.zip4j.crypto.PBKDF2.PRF;
import net.lingala.zip4j.util.Raw;

public class PBKDF2Engine {
    protected PBKDF2Parameters parameters;
    protected PRF prf;

    public PBKDF2Engine() {
        this.parameters = null;
        this.prf = null;
    }

    public PBKDF2Engine(PBKDF2Parameters pBKDF2Parameters) {
        this.parameters = pBKDF2Parameters;
        this.prf = null;
    }

    public PBKDF2Engine(PBKDF2Parameters pBKDF2Parameters, PRF pRF) {
        this.parameters = pBKDF2Parameters;
        this.prf = pRF;
    }

    protected void INT(byte[] arrby, int n, int n2) {
        arrby[n + 0] = (byte)(n2 / 16777216);
        arrby[n + 1] = (byte)(n2 / 65536);
        arrby[n + 2] = (byte)(n2 / 256);
        arrby[n + 3] = (byte)n2;
    }

    protected byte[] PBKDF2(PRF arrby, byte[] arrby2, int n, int n2) {
        if (arrby2 == null) {
            arrby2 = new byte[]{};
        }
        int n3 = arrby.getHLen();
        int n4 = this.ceil(n2, n3);
        byte[] arrby3 = new byte[n4 * n3];
        int n5 = 1;
        int n6 = 0;
        do {
            if (n5 > n4) {
                if (n2 - (n4 - 1) * n3 < n3) {
                    arrby = new byte[n2];
                    System.arraycopy(arrby3, 0, arrby, 0, n2);
                    return arrby;
                }
                return arrby3;
            }
            this._F(arrby3, n6, (PRF)arrby, arrby2, n, n5);
            n6 += n3;
            ++n5;
        } while (true);
    }

    protected void _F(byte[] arrby, int n, PRF pRF, byte[] arrby2, int n2, int n3) {
        int n4 = pRF.getHLen();
        byte[] arrby3 = new byte[n4];
        byte[] arrby4 = new byte[arrby2.length + 4];
        System.arraycopy(arrby2, 0, arrby4, 0, arrby2.length);
        this.INT(arrby4, arrby2.length, n3);
        n3 = 0;
        arrby2 = arrby4;
        do {
            if (n3 >= n2) {
                System.arraycopy(arrby3, 0, arrby, n, n4);
                return;
            }
            arrby2 = pRF.doFinal(arrby2);
            this.xor(arrby3, arrby2);
            ++n3;
        } while (true);
    }

    protected void assertPRF(byte[] arrby) {
        if (this.prf == null) {
            this.prf = new MacBasedPRF(this.parameters.getHashAlgorithm());
        }
        this.prf.init(arrby);
    }

    protected int ceil(int n, int n2) {
        int n3 = n % n2 > 0 ? 1 : 0;
        return n / n2 + n3;
    }

    public byte[] deriveKey(char[] arrc) {
        return this.deriveKey(arrc, 0);
    }

    public byte[] deriveKey(char[] arrc, int n) {
        byte[] arrby = null;
        if (arrc == null) {
            throw new NullPointerException();
        }
        this.assertPRF(Raw.convertCharArrayToByteArray(arrc));
        int n2 = n;
        if (n == 0) {
            n2 = this.prf.getHLen();
        }
        return this.PBKDF2(this.prf, this.parameters.getSalt(), this.parameters.getIterationCount(), n2);
    }

    public PBKDF2Parameters getParameters() {
        return this.parameters;
    }

    public PRF getPseudoRandomFunction() {
        return this.prf;
    }

    public void setParameters(PBKDF2Parameters pBKDF2Parameters) {
        this.parameters = pBKDF2Parameters;
    }

    public void setPseudoRandomFunction(PRF pRF) {
        this.prf = pRF;
    }

    public boolean verifyKey(char[] arrc) {
        byte[] arrby = this.getParameters().getDerivedKey();
        if (arrby != null) {
            if (arrby.length == 0) {
                return false;
            }
            if ((arrc = this.deriveKey(arrc, arrby.length)) != null) {
                if (arrc.length != arrby.length) {
                    return false;
                }
                int n = 0;
                do {
                    if (n >= arrc.length) {
                        return true;
                    }
                    if (arrc[n] != arrby[n]) {
                        return false;
                    }
                    ++n;
                } while (true);
            }
            return false;
        }
        return false;
    }

    protected void xor(byte[] arrby, byte[] arrby2) {
        int n = 0;
        while (n < arrby.length) {
            arrby[n] = (byte)(arrby[n] ^ arrby2[n]);
            ++n;
        }
        return;
    }
}

