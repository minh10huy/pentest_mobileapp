/*
 * Decompiled with CFR 0_132.
 */
package net.lingala.zip4j.util;

import java.io.File;
import java.io.UnsupportedEncodingException;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.List;
import java.util.TimeZone;
import net.lingala.zip4j.exception.ZipException;
import net.lingala.zip4j.model.CentralDirectory;
import net.lingala.zip4j.model.EndCentralDirRecord;
import net.lingala.zip4j.model.FileHeader;
import net.lingala.zip4j.model.ZipModel;
import net.lingala.zip4j.util.InternalZipConstants;

public class Zip4jUtil {
    /*
     * Enabled aggressive block sorting
     */
    public static boolean checkArrayListTypes(ArrayList arrayList, int n) throws ZipException {
        if (arrayList == null) {
            throw new ZipException("input arraylist is null, cannot check types");
        }
        if (arrayList.size() <= 0) {
            return true;
        }
        int n2 = 0;
        block0 : switch (n) {
            default: {
                n = n2;
                return (boolean)(n ^ 1);
            }
            case 2: {
                n = 0;
                do {
                    if (n >= arrayList.size()) {
                        n = n2;
                        return (boolean)(n ^ 1);
                    }
                    if (!(arrayList.get(n) instanceof String)) break block0;
                    ++n;
                } while (true);
            }
            case 1: {
                n = 0;
                do {
                    if (n >= arrayList.size()) {
                        n = n2;
                        return (boolean)(n ^ 1);
                    }
                    if (!(arrayList.get(n) instanceof File)) break block0;
                    ++n;
                } while (true);
            }
        }
        n = 1;
        return (boolean)(n ^ 1);
    }

    public static boolean checkFileExists(File file) throws ZipException {
        if (file == null) {
            throw new ZipException("cannot check if file exists: input file is null");
        }
        return file.exists();
    }

    public static boolean checkFileExists(String string2) throws ZipException {
        if (!Zip4jUtil.isStringNotNullAndNotEmpty(string2)) {
            throw new ZipException("path is null");
        }
        return Zip4jUtil.checkFileExists(new File(string2));
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    public static boolean checkFileReadAccess(String string2) throws ZipException {
        if (!Zip4jUtil.isStringNotNullAndNotEmpty(string2)) {
            throw new ZipException("path is null");
        }
        if (!Zip4jUtil.checkFileExists(string2)) {
            StringBuffer stringBuffer = new StringBuffer("file does not exist: ");
            stringBuffer.append(string2);
            throw new ZipException(stringBuffer.toString());
        }
        try {
            return new File(string2).canRead();
        }
        catch (Exception exception) {
            throw new ZipException("cannot read zip file");
        }
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    public static boolean checkFileWriteAccess(String string2) throws ZipException {
        if (!Zip4jUtil.isStringNotNullAndNotEmpty(string2)) {
            throw new ZipException("path is null");
        }
        if (!Zip4jUtil.checkFileExists(string2)) {
            StringBuffer stringBuffer = new StringBuffer("file does not exist: ");
            stringBuffer.append(string2);
            throw new ZipException(stringBuffer.toString());
        }
        try {
            return new File(string2).canWrite();
        }
        catch (Exception exception) {
            throw new ZipException("cannot read zip file");
        }
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    public static boolean checkOutputFolder(String object) throws ZipException {
        if (!Zip4jUtil.isStringNotNullAndNotEmpty((String)object)) {
            throw new ZipException(new NullPointerException("output path is null"));
        }
        if ((object = new File((String)object)).exists()) {
            if (!object.isDirectory()) {
                throw new ZipException("output folder is not valid");
            }
            if (object.canWrite()) return true;
            throw new ZipException("no write access to output folder");
        }
        try {
            object.mkdirs();
            if (!object.isDirectory()) {
                throw new ZipException("output folder is not valid");
            }
            if (object.canWrite()) return true;
            throw new ZipException("no write access to destination folder");
        }
        catch (Exception exception) {
            throw new ZipException("Cannot create destination folder");
        }
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    public static byte[] convertCharset(String string2) throws ZipException {
        try {
            Object object = null;
            object = Zip4jUtil.detectCharSet(string2);
            if (object.equals("Cp850")) {
                return string2.getBytes("Cp850");
            }
            if (!object.equals("UTF8")) return string2.getBytes();
            return string2.getBytes("UTF8");
        }
        catch (Exception exception) {
            throw new ZipException(exception);
        }
        catch (UnsupportedEncodingException unsupportedEncodingException) {
            return string2.getBytes();
        }
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    public static String decodeFileName(byte[] arrby, boolean bl) {
        if (!bl) return Zip4jUtil.getCp850EncodedString(arrby);
        try {
            return new String(arrby, "UTF8");
        }
        catch (UnsupportedEncodingException unsupportedEncodingException) {
            return new String(arrby);
        }
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    public static String detectCharSet(String string2) throws ZipException {
        block9 : {
            boolean bl;
            block8 : {
                if (string2 == null) {
                    throw new ZipException("input string is null, cannot detect charset");
                }
                bl = string2.equals(new String(string2.getBytes("Cp850"), "Cp850"));
                if (!bl) break block8;
                return "Cp850";
            }
            bl = string2.equals(new String(string2.getBytes("UTF8"), "UTF8"));
            if (!bl) break block9;
            return "UTF8";
        }
        try {
            return InternalZipConstants.CHARSET_DEFAULT;
        }
        catch (UnsupportedEncodingException unsupportedEncodingException) {
            return InternalZipConstants.CHARSET_DEFAULT;
        }
        catch (Exception exception) {
            return InternalZipConstants.CHARSET_DEFAULT;
        }
    }

    public static long dosToJavaTme(int n) {
        Calendar calendar = Calendar.getInstance();
        calendar.set((n >> 25 & 127) + 1980, (n >> 21 & 15) - 1, n >> 16 & 31, n >> 11 & 31, n >> 5 & 63, (n & 31) * 2);
        calendar.set(14, 0);
        return calendar.getTime().getTime();
    }

    public static String getAbsoluteFilePath(String string2) throws ZipException {
        if (!Zip4jUtil.isStringNotNullAndNotEmpty(string2)) {
            throw new ZipException("filePath is null or empty, cannot get absolute file path");
        }
        return new File(string2).getAbsolutePath();
    }

    public static long[] getAllHeaderSignatures() {
        return new long[]{67324752L, 134695760L, 33639248L, 101010256L, 84233040L, 134630224L, 134695760L, 117853008L, 101075792L, 1L, 39169L};
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    public static String getCp850EncodedString(byte[] arrby) {
        try {
            return new String(arrby, "Cp850");
        }
        catch (UnsupportedEncodingException unsupportedEncodingException) {
            return new String(arrby);
        }
    }

    public static int getEncodedStringLength(String string2) throws ZipException {
        if (!Zip4jUtil.isStringNotNullAndNotEmpty(string2)) {
            throw new ZipException("input string is null, cannot calculate encoded String length");
        }
        return Zip4jUtil.getEncodedStringLength(string2, Zip4jUtil.detectCharSet(string2));
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public static int getEncodedStringLength(String object, String object2) throws ZipException {
        if (!Zip4jUtil.isStringNotNullAndNotEmpty((String)object)) {
            throw new ZipException("input string is null, cannot calculate encoded String length");
        }
        if (!Zip4jUtil.isStringNotNullAndNotEmpty((String)object2)) {
            throw new ZipException("encoding is not defined, cannot calculate string length");
        }
        try {
            if (object2.equals("Cp850")) {
                object = object2 = ByteBuffer.wrap(object.getBytes("Cp850"));
                return object.limit();
            }
            if (object2.equals("UTF8")) {
                object = object2 = ByteBuffer.wrap(object.getBytes("UTF8"));
                return object.limit();
            }
            object = object2 = ByteBuffer.wrap(object.getBytes((String)object2));
            return object.limit();
        }
        catch (Exception exception) {
            throw new ZipException(exception);
        }
        catch (UnsupportedEncodingException unsupportedEncodingException) {}
        object = ByteBuffer.wrap(object.getBytes());
        return object.limit();
    }

    public static FileHeader getFileHeader(ZipModel object, String object2) throws ZipException {
        Object object3;
        if (object == null) {
            object = new StringBuffer("zip model is null, cannot determine file header for fileName: ");
            object.append((String)object2);
            throw new ZipException(object.toString());
        }
        if (!Zip4jUtil.isStringNotNullAndNotEmpty((String)object2)) {
            object = new StringBuffer("file name is null, cannot determine file header for fileName: ");
            object.append((String)object2);
            throw new ZipException(object.toString());
        }
        Object object4 = object3 = Zip4jUtil.getFileHeaderWithExactMatch((ZipModel)object, (String)object2);
        if (object3 == null) {
            object3 = object2.replaceAll("\\\\", "/");
            object4 = object2 = Zip4jUtil.getFileHeaderWithExactMatch((ZipModel)object, (String)object3);
            if (object2 == null) {
                object4 = Zip4jUtil.getFileHeaderWithExactMatch((ZipModel)object, object3.replaceAll("/", "\\\\"));
            }
        }
        return object4;
    }

    public static FileHeader getFileHeaderWithExactMatch(ZipModel object, String string2) throws ZipException {
        if (object == null) {
            object = new StringBuffer("zip model is null, cannot determine file header with exact match for fileName: ");
            object.append(string2);
            throw new ZipException(object.toString());
        }
        if (!Zip4jUtil.isStringNotNullAndNotEmpty(string2)) {
            object = new StringBuffer("file name is null, cannot determine file header with exact match for fileName: ");
            object.append(string2);
            throw new ZipException(object.toString());
        }
        if (object.getCentralDirectory() == null) {
            object = new StringBuffer("central directory is null, cannot determine file header with exact match for fileName: ");
            object.append(string2);
            throw new ZipException(object.toString());
        }
        if (object.getCentralDirectory().getFileHeaders() == null) {
            object = new StringBuffer("file Headers are null, cannot determine file header with exact match for fileName: ");
            object.append(string2);
            throw new ZipException(object.toString());
        }
        if (object.getCentralDirectory().getFileHeaders().size() <= 0) {
            return null;
        }
        object = object.getCentralDirectory().getFileHeaders();
        int n = 0;
        while (n < object.size()) {
            FileHeader fileHeader = (FileHeader)object.get(n);
            String string3 = fileHeader.getFileName();
            if (Zip4jUtil.isStringNotNullAndNotEmpty(string3) && string2.equalsIgnoreCase(string3)) {
                return fileHeader;
            }
            ++n;
        }
        return null;
    }

    public static long getFileLengh(File file) throws ZipException {
        if (file == null) {
            throw new ZipException("input file is null, cannot calculate file length");
        }
        if (file.isDirectory()) {
            return -1L;
        }
        return file.length();
    }

    public static long getFileLengh(String string2) throws ZipException {
        if (!Zip4jUtil.isStringNotNullAndNotEmpty(string2)) {
            throw new ZipException("invalid file name");
        }
        return Zip4jUtil.getFileLengh(new File(string2));
    }

    public static String getFileNameFromFilePath(File file) throws ZipException {
        if (file == null) {
            throw new ZipException("input file is null, cannot get file name");
        }
        if (file.isDirectory()) {
            return null;
        }
        return file.getName();
    }

    public static ArrayList getFilesInDirectoryRec(File file, boolean bl) throws ZipException {
        if (file == null) {
            throw new ZipException("input path is null, cannot read files in the directory");
        }
        ArrayList<File> arrayList = new ArrayList<File>();
        List<File> list = Arrays.asList(file.listFiles());
        if (!file.canRead()) {
            return arrayList;
        }
        int n = 0;
        while (n < list.size()) {
            file = list.get(n);
            if (file.isHidden() && !bl) {
                return arrayList;
            }
            arrayList.add(file);
            if (file.isDirectory()) {
                arrayList.addAll(Zip4jUtil.getFilesInDirectoryRec(file, bl));
            }
            ++n;
        }
        return arrayList;
    }

    public static int getIndexOfFileHeader(ZipModel cloneable, FileHeader object) throws ZipException {
        if (cloneable != null && object != null) {
            if (cloneable.getCentralDirectory() == null) {
                throw new ZipException("central directory is null, ccannot determine index of file header");
            }
            if (cloneable.getCentralDirectory().getFileHeaders() == null) {
                throw new ZipException("file Headers are null, cannot determine index of file header");
            }
            if (cloneable.getCentralDirectory().getFileHeaders().size() <= 0) {
                return -1;
            }
            if (!Zip4jUtil.isStringNotNullAndNotEmpty((String)(object = object.getFileName()))) {
                throw new ZipException("file name in file header is empty or null, cannot determine index of file header");
            }
            cloneable = cloneable.getCentralDirectory().getFileHeaders();
            int n = 0;
            do {
                if (n >= cloneable.size()) {
                    return -1;
                }
                String string2 = ((FileHeader)cloneable.get(n)).getFileName();
                if (Zip4jUtil.isStringNotNullAndNotEmpty(string2) && object.equalsIgnoreCase(string2)) {
                    return n;
                }
                ++n;
            } while (true);
        }
        throw new ZipException("input parameters is null, cannot determine index of file header");
    }

    public static long getLastModifiedFileTime(File file, TimeZone timeZone) throws ZipException {
        if (file == null) {
            throw new ZipException("input file is null, cannot read last modified file time");
        }
        if (!file.exists()) {
            throw new ZipException("input file does not exist, cannot read last modified file time");
        }
        return file.lastModified();
    }

    public static String getRelativeFileName(String object, String charSequence, String object2) throws ZipException {
        if (!Zip4jUtil.isStringNotNullAndNotEmpty((String)object)) {
            throw new ZipException("input file path/name is empty, cannot calculate relative file name");
        }
        if (Zip4jUtil.isStringNotNullAndNotEmpty((String)object2)) {
            String string2 = new File((String)object2).getPath();
            object2 = string2;
            if (!string2.endsWith(InternalZipConstants.FILE_SEPARATOR)) {
                object2 = new StringBuffer(String.valueOf(string2));
                object2.append(InternalZipConstants.FILE_SEPARATOR);
                object2 = object2.toString();
            }
            string2 = object.substring(object2.length());
            object2 = string2;
            if (string2.startsWith(System.getProperty("file.separator"))) {
                object2 = string2.substring(1);
            }
            if ((object = new File((String)object)).isDirectory()) {
                object = new StringBuffer(String.valueOf(object2.replaceAll("\\\\", "/")));
                object.append("/");
                object = object.toString();
            } else {
                object2 = new StringBuffer(String.valueOf(object2.substring(0, object2.lastIndexOf(object.getName())).replaceAll("\\\\", "/")));
                object2.append(object.getName());
                object = object2.toString();
            }
        } else {
            object2 = new File((String)object);
            if (object2.isDirectory()) {
                object = new StringBuffer(String.valueOf(object2.getName()));
                object.append("/");
                object = object.toString();
            } else {
                object = Zip4jUtil.getFileNameFromFilePath(new File((String)object));
            }
        }
        object2 = object;
        if (Zip4jUtil.isStringNotNullAndNotEmpty((String)charSequence)) {
            charSequence = new StringBuffer(String.valueOf(charSequence));
            charSequence.append((String)object);
            object2 = charSequence.toString();
        }
        if (!Zip4jUtil.isStringNotNullAndNotEmpty((String)object2)) {
            throw new ZipException("Error determining file name");
        }
        return object2;
    }

    public static ArrayList getSplitZipFiles(ZipModel zipModel) throws ZipException {
        if (zipModel == null) {
            throw new ZipException("cannot get split zip files: zipmodel is null");
        }
        if (zipModel.getEndCentralDirRecord() == null) {
            return null;
        }
        ArrayList<String> arrayList = new ArrayList<String>();
        String string2 = zipModel.getZipFile();
        String string3 = new File(string2).getName();
        if (!Zip4jUtil.isStringNotNullAndNotEmpty(string2)) {
            throw new ZipException("cannot get split zip files: zipfile is null");
        }
        if (!zipModel.isSplitArchive()) {
            arrayList.add(string2);
            return arrayList;
        }
        int n = zipModel.getEndCentralDirRecord().getNoOfThisDisk();
        if (n == 0) {
            arrayList.add(string2);
            return arrayList;
        }
        int n2 = 0;
        while (n2 <= n) {
            if (n2 == n) {
                arrayList.add(zipModel.getZipFile());
            } else {
                String string4 = ".z0";
                if (n2 > 9) {
                    string4 = ".z";
                }
                CharSequence charSequence = string3.indexOf(".") >= 0 ? string2.substring(0, string2.lastIndexOf(".")) : string2;
                charSequence = new StringBuffer(String.valueOf(charSequence));
                charSequence.append(string4);
                charSequence.append(n2 + 1);
                arrayList.add(charSequence.toString());
            }
            ++n2;
        }
        return arrayList;
    }

    public static String getZipFileNameWithoutExt(String string2) throws ZipException {
        if (!Zip4jUtil.isStringNotNullAndNotEmpty(string2)) {
            throw new ZipException("zip file name is empty or null, cannot determine zip file name");
        }
        String string3 = string2;
        if (string2.indexOf(System.getProperty("file.separator")) >= 0) {
            string3 = string2.substring(string2.lastIndexOf(System.getProperty("file.separator")));
        }
        string2 = string3;
        if (string3.indexOf(".") > 0) {
            string2 = string3.substring(0, string3.lastIndexOf("."));
        }
        return string2;
    }

    public static boolean isStringNotNullAndNotEmpty(String string2) {
        if (string2 != null && string2.trim().length() > 0) {
            return true;
        }
        return false;
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    public static boolean isSupportedCharset(String string2) throws ZipException {
        if (!Zip4jUtil.isStringNotNullAndNotEmpty(string2)) {
            throw new ZipException("charset is null or empty, cannot check if it is supported");
        }
        try {
            new String("a".getBytes(), string2);
            return true;
        }
        catch (Exception exception) {
            throw new ZipException(exception);
        }
        catch (UnsupportedEncodingException unsupportedEncodingException) {
            return false;
        }
    }

    public static boolean isWindows() {
        if (System.getProperty("os.name").toLowerCase().indexOf("win") >= 0) {
            return true;
        }
        return false;
    }

    public static long javaToDosTime(long l) {
        Calendar calendar = Calendar.getInstance();
        calendar.setTimeInMillis(l);
        int n = calendar.get(1);
        if (n < 1980) {
            return 2162688L;
        }
        int n2 = calendar.get(2);
        int n3 = calendar.get(5);
        int n4 = calendar.get(11);
        int n5 = calendar.get(12);
        return calendar.get(13) >> 1 | (n - 1980 << 25 | n2 + 1 << 21 | n3 << 16 | n4 << 11 | n5 << 5);
    }

    public static void setFileArchive(File file) throws ZipException {
    }

    public static void setFileHidden(File file) throws ZipException {
    }

    public static void setFileReadOnly(File file) throws ZipException {
        if (file == null) {
            throw new ZipException("input file is null. cannot set read only file attribute");
        }
        if (file.exists()) {
            file.setReadOnly();
        }
    }

    public static void setFileSystemMode(File file) throws ZipException {
    }
}

