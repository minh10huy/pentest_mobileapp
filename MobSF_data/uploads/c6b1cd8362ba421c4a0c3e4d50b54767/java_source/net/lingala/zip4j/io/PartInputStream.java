/*
 * Decompiled with CFR 0_132.
 */
package net.lingala.zip4j.io;

import java.io.IOException;
import java.io.RandomAccessFile;
import net.lingala.zip4j.crypto.AESDecrypter;
import net.lingala.zip4j.crypto.IDecrypter;
import net.lingala.zip4j.exception.ZipException;
import net.lingala.zip4j.io.BaseInputStream;
import net.lingala.zip4j.model.FileHeader;
import net.lingala.zip4j.model.ZipModel;
import net.lingala.zip4j.unzip.UnzipEngine;

public class PartInputStream
extends BaseInputStream {
    private byte[] aesBlockByte;
    private int aesBytesReturned;
    private long bytesRead;
    private int count;
    private IDecrypter decrypter;
    private boolean isAESEncryptedFile;
    private long length;
    private byte[] oneByteBuff;
    private RandomAccessFile raf;
    private UnzipEngine unzipEngine;

    public PartInputStream(RandomAccessFile randomAccessFile, long l, long l2, UnzipEngine unzipEngine) {
        boolean bl = true;
        this.oneByteBuff = new byte[1];
        this.aesBlockByte = new byte[16];
        this.aesBytesReturned = 0;
        this.isAESEncryptedFile = false;
        this.count = -1;
        this.raf = randomAccessFile;
        this.unzipEngine = unzipEngine;
        this.decrypter = unzipEngine.getDecrypter();
        this.bytesRead = 0L;
        this.length = l2;
        if (!unzipEngine.getFileHeader().isEncrypted() || unzipEngine.getFileHeader().getEncryptionMethod() != 99) {
            bl = false;
        }
        this.isAESEncryptedFile = bl;
    }

    @Override
    public int available() {
        long l = this.length - this.bytesRead;
        if (l > Integer.MAX_VALUE) {
            return Integer.MAX_VALUE;
        }
        return (int)l;
    }

    protected void checkAndReadAESMacBytes() throws IOException {
        if (this.isAESEncryptedFile && this.decrypter != null && this.decrypter instanceof AESDecrypter) {
            if (((AESDecrypter)this.decrypter).getStoredMac() != null) {
                return;
            }
            byte[] arrby = new byte[10];
            int n = this.raf.read(arrby);
            if (n != 10) {
                if (this.unzipEngine.getZipModel().isSplitArchive()) {
                    this.raf.close();
                    this.raf = this.unzipEngine.startNextSplitFile();
                    this.raf.read(arrby, n, 10 - n);
                } else {
                    throw new IOException("Error occured while reading stored AES authentication bytes");
                }
            }
            ((AESDecrypter)this.unzipEngine.getDecrypter()).setStoredMac(arrby);
        }
    }

    @Override
    public void close() throws IOException {
        this.raf.close();
    }

    @Override
    public UnzipEngine getUnzipEngine() {
        return this.unzipEngine;
    }

    @Override
    public int read() throws IOException {
        if (this.bytesRead >= this.length) {
            return -1;
        }
        if (this.isAESEncryptedFile) {
            if (this.aesBytesReturned == 0 || this.aesBytesReturned == 16) {
                if (this.read(this.aesBlockByte) == -1) {
                    return -1;
                }
                this.aesBytesReturned = 0;
            }
            byte[] arrby = this.aesBlockByte;
            int n = this.aesBytesReturned;
            this.aesBytesReturned = n + 1;
            return arrby[n] & 255;
        }
        if (this.read(this.oneByteBuff, 0, 1) == -1) {
            return -1;
        }
        return this.oneByteBuff[0] & 255;
    }

    @Override
    public int read(byte[] arrby) throws IOException {
        return this.read(arrby, 0, arrby.length);
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Converted monitor instructions to comments
     * Lifted jumps to return sites
     */
    @Override
    public int read(byte[] arrby, int n, int n2) throws IOException {
        int n3 = n2;
        if ((long)n2 > this.length - this.bytesRead) {
            n3 = n2 = (int)(this.length - this.bytesRead);
            if (n2 == 0) {
                this.checkAndReadAESMacBytes();
                return -1;
            }
        }
        n2 = n3;
        if (this.unzipEngine.getDecrypter() instanceof AESDecrypter) {
            n2 = n3;
            if (this.bytesRead + (long)n3 < this.length) {
                int n4 = n3 % 16;
                n2 = n3;
                if (n4 != 0) {
                    n2 = n3 - n4;
                }
            }
        }
        RandomAccessFile randomAccessFile = this.raf;
        // MONITORENTER : randomAccessFile
        this.count = this.raf.read(arrby, n, n2);
        if (this.count < n2 && this.unzipEngine.getZipModel().isSplitArchive()) {
            this.raf.close();
            this.raf = this.unzipEngine.startNextSplitFile();
            if (this.count < 0) {
                this.count = 0;
            }
            if ((n2 = this.raf.read(arrby, this.count, n2 - this.count)) > 0) {
                this.count += n2;
            }
        }
        // MONITOREXIT : randomAccessFile
        if (this.count > 0) {
            if (this.decrypter != null) {
                try {
                    this.decrypter.decryptData(arrby, n, this.count);
                }
                catch (ZipException zipException) {
                    throw new IOException(zipException.getMessage());
                }
            }
            this.bytesRead += (long)this.count;
        }
        if (this.bytesRead < this.length) return this.count;
        this.checkAndReadAESMacBytes();
        return this.count;
    }

    @Override
    public void seek(long l) throws IOException {
        this.raf.seek(l);
    }

    @Override
    public long skip(long l) throws IOException {
        if (l < 0L) {
            throw new IllegalArgumentException();
        }
        long l2 = l;
        if (l > this.length - this.bytesRead) {
            l2 = this.length - this.bytesRead;
        }
        this.bytesRead += l2;
        return l2;
    }
}

