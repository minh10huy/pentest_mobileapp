/*
 * Decompiled with CFR 0_132.
 */
package net.lingala.zip4j.io;

import java.io.EOFException;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.util.zip.DataFormatException;
import java.util.zip.Inflater;
import net.lingala.zip4j.io.PartInputStream;
import net.lingala.zip4j.model.FileHeader;
import net.lingala.zip4j.model.LocalFileHeader;
import net.lingala.zip4j.unzip.UnzipEngine;

public class InflaterInputStream
extends PartInputStream {
    private byte[] buff = new byte[4096];
    private long bytesWritten;
    private Inflater inflater = new Inflater(true);
    private byte[] oneByteBuff = new byte[1];
    private long uncompressedSize;
    private UnzipEngine unzipEngine;

    public InflaterInputStream(RandomAccessFile randomAccessFile, long l, long l2, UnzipEngine unzipEngine) {
        super(randomAccessFile, l, l2, unzipEngine);
        this.unzipEngine = unzipEngine;
        this.bytesWritten = 0L;
        this.uncompressedSize = unzipEngine.getFileHeader().getUncompressedSize();
    }

    private void fill() throws IOException {
        int n = super.read(this.buff, 0, this.buff.length);
        if (n == -1) {
            throw new EOFException("Unexpected end of ZLIB input stream");
        }
        this.inflater.setInput(this.buff, 0, n);
    }

    private void finishInflating() throws IOException {
        byte[] arrby = new byte[1024];
        while (super.read(arrby, 0, 1024) != -1) {
        }
        this.checkAndReadAESMacBytes();
    }

    @Override
    public int available() {
        return this.inflater.finished() ^ true;
    }

    @Override
    public void close() throws IOException {
        this.inflater.end();
        super.close();
    }

    @Override
    public UnzipEngine getUnzipEngine() {
        return super.getUnzipEngine();
    }

    @Override
    public int read() throws IOException {
        if (this.read(this.oneByteBuff, 0, 1) == -1) {
            return -1;
        }
        return this.oneByteBuff[0] & 255;
    }

    @Override
    public int read(byte[] arrby) throws IOException {
        if (arrby == null) {
            throw new NullPointerException("input buffer is null");
        }
        return this.read(arrby, 0, arrby.length);
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @Override
    public int read(byte[] object, int n, int n2) throws IOException {
        if (object == null) {
            throw new NullPointerException("input buffer is null");
        }
        if (n < 0) throw new IndexOutOfBoundsException();
        if (n2 < 0) throw new IndexOutOfBoundsException();
        if (n2 > ((Object)object).length - n) {
            throw new IndexOutOfBoundsException();
        }
        if (n2 == 0) {
            return 0;
        }
        try {
            if (this.bytesWritten >= this.uncompressedSize) {
                this.finishInflating();
                return -1;
            }
            do {
                int n3;
                if ((n3 = this.inflater.inflate((byte[])object, n, n2)) != 0) {
                    this.bytesWritten += (long)n3;
                    return n3;
                }
                if (this.inflater.finished() || this.inflater.needsDictionary()) break;
                if (!this.inflater.needsInput()) continue;
                this.fill();
            } while (true);
            this.finishInflating();
            return -1;
        }
        catch (DataFormatException dataFormatException) {
            object = "Invalid ZLIB data format";
            if (dataFormatException.getMessage() != null) {
                object = dataFormatException.getMessage();
            }
            Object object2 = object;
            if (this.unzipEngine == null) throw new IOException((String)object2);
            object2 = object;
            if (!this.unzipEngine.getLocalFileHeader().isEncrypted()) throw new IOException((String)object2);
            object2 = object;
            if (this.unzipEngine.getLocalFileHeader().getEncryptionMethod() != 0) throw new IOException((String)object2);
            object = new StringBuffer(String.valueOf(object));
            object.append(" - Wrong Password?");
            object2 = object.toString();
            throw new IOException((String)object2);
        }
    }

    @Override
    public void seek(long l) throws IOException {
        super.seek(l);
    }

    @Override
    public long skip(long l) throws IOException {
        if (l < 0L) {
            throw new IllegalArgumentException("negative skip length");
        }
        int n = (int)Math.min(l, Integer.MAX_VALUE);
        byte[] arrby = new byte[512];
        int n2 = 0;
        do {
            int n3;
            block7 : {
                block6 : {
                    int n4;
                    if (n2 >= n) break block6;
                    n3 = n4 = n - n2;
                    if (n4 > arrby.length) {
                        n3 = arrby.length;
                    }
                    if ((n3 = this.read(arrby, 0, n3)) != -1) break block7;
                }
                return n2;
            }
            n2 += n3;
        } while (true);
    }
}

