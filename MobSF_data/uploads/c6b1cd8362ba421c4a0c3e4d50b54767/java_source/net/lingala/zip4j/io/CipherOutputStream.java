/*
 * Decompiled with CFR 0_132.
 */
package net.lingala.zip4j.io;

import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.List;
import java.util.TimeZone;
import java.util.zip.CRC32;
import net.lingala.zip4j.core.HeaderWriter;
import net.lingala.zip4j.crypto.AESEncrpyter;
import net.lingala.zip4j.crypto.IEncrypter;
import net.lingala.zip4j.crypto.StandardEncrypter;
import net.lingala.zip4j.exception.ZipException;
import net.lingala.zip4j.io.BaseOutputStream;
import net.lingala.zip4j.io.SplitOutputStream;
import net.lingala.zip4j.model.AESExtraDataRecord;
import net.lingala.zip4j.model.CentralDirectory;
import net.lingala.zip4j.model.EndCentralDirRecord;
import net.lingala.zip4j.model.FileHeader;
import net.lingala.zip4j.model.LocalFileHeader;
import net.lingala.zip4j.model.ZipModel;
import net.lingala.zip4j.model.ZipParameters;
import net.lingala.zip4j.util.Raw;
import net.lingala.zip4j.util.Zip4jUtil;

public class CipherOutputStream
extends BaseOutputStream {
    private long bytesWrittenForThisFile;
    protected CRC32 crc;
    private IEncrypter encrypter;
    protected FileHeader fileHeader;
    protected LocalFileHeader localFileHeader;
    protected OutputStream outputStream;
    private byte[] pendingBuffer;
    private int pendingBufferLength;
    private File sourceFile;
    private long totalBytesRead;
    private long totalBytesWritten;
    protected ZipModel zipModel;
    protected ZipParameters zipParameters;

    public CipherOutputStream(OutputStream outputStream, ZipModel zipModel) {
        this.outputStream = outputStream;
        this.initZipModel(zipModel);
        this.crc = new CRC32();
        this.totalBytesWritten = 0L;
        this.bytesWrittenForThisFile = 0L;
        this.pendingBuffer = new byte[16];
        this.pendingBufferLength = 0;
        this.totalBytesRead = 0L;
    }

    private void createFileHeader() throws ZipException {
        byte[] arrby;
        boolean bl;
        this.fileHeader = new FileHeader();
        this.fileHeader.setSignature(33639248);
        this.fileHeader.setVersionMadeBy(20);
        this.fileHeader.setVersionNeededToExtract(20);
        if (this.zipParameters.isEncryptFiles() && this.zipParameters.getEncryptionMethod() == 99) {
            this.fileHeader.setCompressionMethod(99);
            this.fileHeader.setAesExtraDataRecord(this.generateAESExtraDataRecord(this.zipParameters));
        } else {
            this.fileHeader.setCompressionMethod(this.zipParameters.getCompressionMethod());
        }
        if (this.zipParameters.isEncryptFiles()) {
            this.fileHeader.setEncrypted(true);
            this.fileHeader.setEncryptionMethod(this.zipParameters.getEncryptionMethod());
        }
        if (this.zipParameters.isSourceExternalStream()) {
            this.fileHeader.setLastModFileTime((int)Zip4jUtil.javaToDosTime(System.currentTimeMillis()));
            if (!Zip4jUtil.isStringNotNullAndNotEmpty(this.zipParameters.getFileNameInZip())) {
                throw new ZipException("fileNameInZip is null or empty");
            }
            arrby = this.zipParameters.getFileNameInZip();
        } else {
            this.fileHeader.setLastModFileTime((int)Zip4jUtil.javaToDosTime(Zip4jUtil.getLastModifiedFileTime(this.sourceFile, this.zipParameters.getTimeZone())));
            this.fileHeader.setUncompressedSize(this.sourceFile.length());
            arrby = Zip4jUtil.getRelativeFileName(this.sourceFile.getAbsolutePath(), this.zipParameters.getRootFolderInZip(), this.zipParameters.getDefaultFolderPath());
        }
        if (!Zip4jUtil.isStringNotNullAndNotEmpty((String)arrby)) {
            throw new ZipException("fileName is null or empty. unable to create file header");
        }
        this.fileHeader.setFileName((String)arrby);
        if (Zip4jUtil.isStringNotNullAndNotEmpty(this.zipModel.getFileNameCharset())) {
            this.fileHeader.setFileNameLength(Zip4jUtil.getEncodedStringLength((String)arrby, this.zipModel.getFileNameCharset()));
        } else {
            this.fileHeader.setFileNameLength(Zip4jUtil.getEncodedStringLength((String)arrby));
        }
        if (this.outputStream instanceof SplitOutputStream) {
            this.fileHeader.setDiskNumberStart(((SplitOutputStream)this.outputStream).getCurrSplitFileCounter());
        } else {
            this.fileHeader.setDiskNumberStart(0);
        }
        int n = !this.zipParameters.isSourceExternalStream() ? this.getFileAttributes(this.sourceFile) : 0;
        Object object = new byte[4];
        object[0] = (byte)n;
        this.fileHeader.setExternalFileAttr((byte[])object);
        if (this.zipParameters.isSourceExternalStream()) {
            object = this.fileHeader;
            bl = arrby.endsWith("/") || arrby.endsWith("\\");
            object.setDirectory(bl);
        } else {
            this.fileHeader.setDirectory(this.sourceFile.isDirectory());
        }
        if (this.fileHeader.isDirectory()) {
            this.fileHeader.setCompressedSize(0L);
            this.fileHeader.setUncompressedSize(0L);
        } else if (!this.zipParameters.isSourceExternalStream()) {
            long l = Zip4jUtil.getFileLengh(this.sourceFile);
            if (this.zipParameters.getCompressionMethod() == 0) {
                if (this.zipParameters.getEncryptionMethod() == 0) {
                    this.fileHeader.setCompressedSize(l + 12L);
                } else if (this.zipParameters.getEncryptionMethod() == 99) {
                    n = this.zipParameters.getAesKeyStrength();
                    if (n != 1) {
                        if (n != 3) {
                            throw new ZipException("invalid aes key strength, cannot determine key sizes");
                        }
                        n = 16;
                    } else {
                        n = 8;
                    }
                    this.fileHeader.setCompressedSize(l + (long)n + 10L + 2L);
                } else {
                    this.fileHeader.setCompressedSize(0L);
                }
            } else {
                this.fileHeader.setCompressedSize(0L);
            }
            this.fileHeader.setUncompressedSize(l);
        }
        if (this.zipParameters.isEncryptFiles() && this.zipParameters.getEncryptionMethod() == 0) {
            this.fileHeader.setCrc32(this.zipParameters.getSourceFileCRC());
        }
        arrby = new byte[2];
        arrby[0] = Raw.bitArrayToByte(this.generateGeneralPurposeBitArray(this.fileHeader.isEncrypted(), this.zipParameters.getCompressionMethod()));
        bl = Zip4jUtil.isStringNotNullAndNotEmpty(this.zipModel.getFileNameCharset());
        arrby[1] = bl && this.zipModel.getFileNameCharset().equalsIgnoreCase("UTF8") || !bl && Zip4jUtil.detectCharSet(this.fileHeader.getFileName()).equals("UTF8") ? 8 : 0;
        this.fileHeader.setGeneralPurposeFlag(arrby);
    }

    private void createLocalFileHeader() throws ZipException {
        if (this.fileHeader == null) {
            throw new ZipException("file header is null, cannot create local file header");
        }
        this.localFileHeader = new LocalFileHeader();
        this.localFileHeader.setSignature(67324752);
        this.localFileHeader.setVersionNeededToExtract(this.fileHeader.getVersionNeededToExtract());
        this.localFileHeader.setCompressionMethod(this.fileHeader.getCompressionMethod());
        this.localFileHeader.setLastModFileTime(this.fileHeader.getLastModFileTime());
        this.localFileHeader.setUncompressedSize(this.fileHeader.getUncompressedSize());
        this.localFileHeader.setFileNameLength(this.fileHeader.getFileNameLength());
        this.localFileHeader.setFileName(this.fileHeader.getFileName());
        this.localFileHeader.setEncrypted(this.fileHeader.isEncrypted());
        this.localFileHeader.setEncryptionMethod(this.fileHeader.getEncryptionMethod());
        this.localFileHeader.setAesExtraDataRecord(this.fileHeader.getAesExtraDataRecord());
        this.localFileHeader.setCrc32(this.fileHeader.getCrc32());
        this.localFileHeader.setCompressedSize(this.fileHeader.getCompressedSize());
        this.localFileHeader.setGeneralPurposeFlag((byte[])this.fileHeader.getGeneralPurposeFlag().clone());
    }

    private void encryptAndWrite(byte[] arrby, int n, int n2) throws IOException {
        if (this.encrypter != null) {
            try {
                this.encrypter.encryptData(arrby, n, n2);
            }
            catch (ZipException zipException) {
                throw new IOException(zipException.getMessage());
            }
        }
        this.outputStream.write(arrby, n, n2);
        long l = this.totalBytesWritten;
        long l2 = n2;
        this.totalBytesWritten = l + l2;
        this.bytesWrittenForThisFile += l2;
    }

    private AESExtraDataRecord generateAESExtraDataRecord(ZipParameters zipParameters) throws ZipException {
        block6 : {
            AESExtraDataRecord aESExtraDataRecord;
            block5 : {
                block4 : {
                    if (zipParameters == null) {
                        throw new ZipException("zip parameters are null, cannot generate AES Extra Data record");
                    }
                    aESExtraDataRecord = new AESExtraDataRecord();
                    aESExtraDataRecord.setSignature(39169L);
                    aESExtraDataRecord.setDataSize(7);
                    aESExtraDataRecord.setVendorID("AE");
                    aESExtraDataRecord.setVersionNumber(2);
                    if (zipParameters.getAesKeyStrength() != 1) break block4;
                    aESExtraDataRecord.setAesStrength(1);
                    break block5;
                }
                if (zipParameters.getAesKeyStrength() != 3) break block6;
                aESExtraDataRecord.setAesStrength(3);
            }
            aESExtraDataRecord.setCompressionMethod(zipParameters.getCompressionMethod());
            return aESExtraDataRecord;
        }
        throw new ZipException("invalid AES key strength, cannot generate AES Extra data record");
    }

    private int[] generateGeneralPurposeBitArray(boolean bl, int n) {
        int[] arrn = new int[8];
        arrn[0] = bl ? 1 : 0;
        if (n != 8) {
            arrn[1] = 0;
            arrn[2] = 0;
        }
        arrn[3] = 1;
        return arrn;
    }

    private int getFileAttributes(File file) throws ZipException {
        if (file == null) {
            throw new ZipException("input file is null, cannot get file attributes");
        }
        if (!file.exists()) {
            return 0;
        }
        if (file.isDirectory()) {
            if (file.isHidden()) {
                return 18;
            }
            return 16;
        }
        if (!file.canWrite() && file.isHidden()) {
            return 3;
        }
        if (!file.canWrite()) {
            return 1;
        }
        if (file.isHidden()) {
            return 2;
        }
        return 0;
    }

    private void initEncrypter() throws ZipException {
        if (!this.zipParameters.isEncryptFiles()) {
            this.encrypter = null;
            return;
        }
        int n = this.zipParameters.getEncryptionMethod();
        if (n != 0) {
            if (n != 99) {
                throw new ZipException("invalid encprytion method");
            }
            this.encrypter = new AESEncrpyter(this.zipParameters.getPassword(), this.zipParameters.getAesKeyStrength());
            return;
        }
        this.encrypter = new StandardEncrypter(this.zipParameters.getPassword(), (this.localFileHeader.getLastModFileTime() & 65535) << 16);
    }

    private void initZipModel(ZipModel zipModel) {
        this.zipModel = zipModel == null ? new ZipModel() : zipModel;
        if (this.zipModel.getEndCentralDirRecord() == null) {
            this.zipModel.setEndCentralDirRecord(new EndCentralDirRecord());
        }
        if (this.zipModel.getCentralDirectory() == null) {
            this.zipModel.setCentralDirectory(new CentralDirectory());
        }
        if (this.zipModel.getCentralDirectory().getFileHeaders() == null) {
            this.zipModel.getCentralDirectory().setFileHeaders(new ArrayList());
        }
        if (this.zipModel.getLocalFileHeaderList() == null) {
            this.zipModel.setLocalFileHeaderList(new ArrayList());
        }
        if (this.outputStream instanceof SplitOutputStream && ((SplitOutputStream)this.outputStream).isSplitZipFile()) {
            this.zipModel.setSplitArchive(true);
            this.zipModel.setSplitLength(((SplitOutputStream)this.outputStream).getSplitLength());
        }
        this.zipModel.getEndCentralDirRecord().setSignature(101010256L);
    }

    @Override
    public void close() throws IOException {
        if (this.outputStream != null) {
            this.outputStream.close();
        }
    }

    public void closeEntry() throws IOException, ZipException {
        long l;
        if (this.pendingBufferLength != 0) {
            this.encryptAndWrite(this.pendingBuffer, 0, this.pendingBufferLength);
            this.pendingBufferLength = 0;
        }
        if (this.zipParameters.isEncryptFiles() && this.zipParameters.getEncryptionMethod() == 99) {
            if (this.encrypter instanceof AESEncrpyter) {
                this.outputStream.write(((AESEncrpyter)this.encrypter).getFinalMac());
                this.bytesWrittenForThisFile += 10L;
                this.totalBytesWritten += 10L;
            } else {
                throw new ZipException("invalid encrypter for AES encrypted file");
            }
        }
        this.fileHeader.setCompressedSize(this.bytesWrittenForThisFile);
        this.localFileHeader.setCompressedSize(this.bytesWrittenForThisFile);
        if (this.zipParameters.isSourceExternalStream()) {
            this.fileHeader.setUncompressedSize(this.totalBytesRead);
            if (this.localFileHeader.getUncompressedSize() != this.totalBytesRead) {
                this.localFileHeader.setUncompressedSize(this.totalBytesRead);
            }
        }
        long l2 = l = this.crc.getValue();
        if (this.fileHeader.isEncrypted()) {
            l2 = l;
            if (this.fileHeader.getEncryptionMethod() == 99) {
                l2 = 0L;
            }
        }
        if (this.zipParameters.isEncryptFiles() && this.zipParameters.getEncryptionMethod() == 99) {
            this.fileHeader.setCrc32(0L);
            this.localFileHeader.setCrc32(0L);
        } else {
            this.fileHeader.setCrc32(l2);
            this.localFileHeader.setCrc32(l2);
        }
        this.zipModel.getLocalFileHeaderList().add(this.localFileHeader);
        this.zipModel.getCentralDirectory().getFileHeaders().add(this.fileHeader);
        HeaderWriter headerWriter = new HeaderWriter();
        this.totalBytesWritten += (long)headerWriter.writeExtendedLocalHeader(this.localFileHeader, this.outputStream);
        this.crc.reset();
        this.bytesWrittenForThisFile = 0L;
        this.encrypter = null;
        this.totalBytesRead = 0L;
    }

    public void decrementCompressedFileSize(int n) {
        if (n <= 0) {
            return;
        }
        long l = n;
        if (l <= this.bytesWrittenForThisFile) {
            this.bytesWrittenForThisFile -= l;
        }
    }

    public void finish() throws IOException, ZipException {
        this.zipModel.getEndCentralDirRecord().setOffsetOfStartOfCentralDir(this.totalBytesWritten);
        new HeaderWriter().finalizeZipFile(this.zipModel, this.outputStream);
    }

    public File getSourceFile() {
        return this.sourceFile;
    }

    public void putNextEntry(File object, ZipParameters arrby) throws ZipException {
        if (!arrby.isSourceExternalStream() && object == null) {
            throw new ZipException("input file is null");
        }
        if (!arrby.isSourceExternalStream() && !Zip4jUtil.checkFileExists((File)object)) {
            throw new ZipException("input file does not exist");
        }
        try {
            this.sourceFile = object;
            this.zipParameters = (ZipParameters)arrby.clone();
            if (!arrby.isSourceExternalStream()) {
                if (this.sourceFile.isDirectory()) {
                    this.zipParameters.setEncryptFiles(false);
                    this.zipParameters.setEncryptionMethod(-1);
                    this.zipParameters.setCompressionMethod(0);
                }
            } else {
                if (!Zip4jUtil.isStringNotNullAndNotEmpty(this.zipParameters.getFileNameInZip())) {
                    throw new ZipException("file name is empty for external stream");
                }
                if (this.zipParameters.getFileNameInZip().endsWith("/") || this.zipParameters.getFileNameInZip().endsWith("\\")) {
                    this.zipParameters.setEncryptFiles(false);
                    this.zipParameters.setEncryptionMethod(-1);
                    this.zipParameters.setCompressionMethod(0);
                }
            }
            this.createFileHeader();
            this.createLocalFileHeader();
            if (this.zipModel.isSplitArchive() && (this.zipModel.getCentralDirectory() == null || this.zipModel.getCentralDirectory().getFileHeaders() == null || this.zipModel.getCentralDirectory().getFileHeaders().size() == 0)) {
                object = new byte[4];
                Raw.writeIntLittleEndian((byte[])object, 0, 134695760);
                this.outputStream.write((byte[])object);
                this.totalBytesWritten += 4L;
            }
            if (this.outputStream instanceof SplitOutputStream) {
                if (this.totalBytesWritten == 4L) {
                    this.fileHeader.setOffsetLocalHeader(4L);
                } else {
                    this.fileHeader.setOffsetLocalHeader(((SplitOutputStream)this.outputStream).getFilePointer());
                }
            } else if (this.totalBytesWritten == 4L) {
                this.fileHeader.setOffsetLocalHeader(4L);
            } else {
                this.fileHeader.setOffsetLocalHeader(this.totalBytesWritten);
            }
            object = new HeaderWriter();
            this.totalBytesWritten += (long)object.writeLocalFileHeader(this.zipModel, this.localFileHeader, this.outputStream);
            if (this.zipParameters.isEncryptFiles()) {
                this.initEncrypter();
                if (this.encrypter != null) {
                    if (arrby.getEncryptionMethod() == 0) {
                        object = ((StandardEncrypter)this.encrypter).getHeaderBytes();
                        this.outputStream.write((byte[])object);
                        this.totalBytesWritten += (long)((Object)object).length;
                        this.bytesWrittenForThisFile += (long)((Object)object).length;
                    } else if (arrby.getEncryptionMethod() == 99) {
                        object = ((AESEncrpyter)this.encrypter).getSaltBytes();
                        arrby = ((AESEncrpyter)this.encrypter).getDerivedPasswordVerifier();
                        this.outputStream.write((byte[])object);
                        this.outputStream.write(arrby);
                        this.totalBytesWritten += (long)(((Object)object).length + arrby.length);
                        this.bytesWrittenForThisFile += (long)(((Object)object).length + arrby.length);
                    }
                }
            }
            this.crc.reset();
            return;
        }
        catch (Exception exception) {
            throw new ZipException(exception);
        }
        catch (ZipException zipException) {
            throw zipException;
        }
        catch (CloneNotSupportedException cloneNotSupportedException) {
            throw new ZipException(cloneNotSupportedException);
        }
    }

    public void setSourceFile(File file) {
        this.sourceFile = file;
    }

    protected void updateTotalBytesRead(int n) {
        if (n > 0) {
            this.totalBytesRead += (long)n;
        }
    }

    @Override
    public void write(int n) throws IOException {
        this.write(new byte[]{(byte)n}, 0, 1);
    }

    @Override
    public void write(byte[] arrby) throws IOException {
        if (arrby == null) {
            throw new NullPointerException();
        }
        if (arrby.length == 0) {
            return;
        }
        this.write(arrby, 0, arrby.length);
    }

    @Override
    public void write(byte[] arrby, int n, int n2) throws IOException {
        if (n2 == 0) {
            return;
        }
        int n3 = n;
        int n4 = n2;
        if (this.zipParameters.isEncryptFiles()) {
            n3 = n;
            n4 = n2;
            if (this.zipParameters.getEncryptionMethod() == 99) {
                int n5 = n;
                int n6 = n2;
                if (this.pendingBufferLength != 0) {
                    if (n2 >= 16 - this.pendingBufferLength) {
                        System.arraycopy(arrby, n, this.pendingBuffer, this.pendingBufferLength, 16 - this.pendingBufferLength);
                        this.encryptAndWrite(this.pendingBuffer, 0, this.pendingBuffer.length);
                        n5 = 16 - this.pendingBufferLength;
                        n6 = n2 - n5;
                        this.pendingBufferLength = 0;
                    } else {
                        System.arraycopy(arrby, n, this.pendingBuffer, this.pendingBufferLength, n2);
                        this.pendingBufferLength += n2;
                        return;
                    }
                }
                n3 = n5;
                n4 = n6;
                if (n6 != 0) {
                    n = n6 % 16;
                    n3 = n5;
                    n4 = n6;
                    if (n != 0) {
                        System.arraycopy(arrby, n6 + n5 - n, this.pendingBuffer, 0, n);
                        this.pendingBufferLength = n;
                        n4 = n6 - this.pendingBufferLength;
                        n3 = n5;
                    }
                }
            }
        }
        if (n4 != 0) {
            this.encryptAndWrite(arrby, n3, n4);
        }
    }
}

