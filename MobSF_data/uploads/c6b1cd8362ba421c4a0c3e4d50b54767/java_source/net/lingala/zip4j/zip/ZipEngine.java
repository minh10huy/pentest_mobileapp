/*
 * Decompiled with CFR 0_132.
 */
package net.lingala.zip4j.zip;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.RandomAccessFile;
import java.util.ArrayList;
import java.util.HashMap;
import net.lingala.zip4j.exception.ZipException;
import net.lingala.zip4j.io.SplitOutputStream;
import net.lingala.zip4j.io.ZipOutputStream;
import net.lingala.zip4j.model.CentralDirectory;
import net.lingala.zip4j.model.EndCentralDirRecord;
import net.lingala.zip4j.model.FileHeader;
import net.lingala.zip4j.model.ZipModel;
import net.lingala.zip4j.model.ZipParameters;
import net.lingala.zip4j.progress.ProgressMonitor;
import net.lingala.zip4j.util.ArchiveMaintainer;
import net.lingala.zip4j.util.CRCUtil;
import net.lingala.zip4j.util.Zip4jUtil;
import net.lingala.zip4j.zip.ZipEngine$1;

public class ZipEngine {
    private ZipModel zipModel;

    public ZipEngine(ZipModel zipModel) throws ZipException {
        if (zipModel == null) {
            throw new ZipException("zip model is null in ZipEngine constructor");
        }
        this.zipModel = zipModel;
    }

    static /* synthetic */ void access$0(ZipEngine zipEngine, ArrayList arrayList, ZipParameters zipParameters, ProgressMonitor progressMonitor) throws ZipException {
        zipEngine.initAddFiles(arrayList, zipParameters, progressMonitor);
    }

    private long calculateTotalWork(ArrayList arrayList, ZipParameters zipParameters) throws ZipException {
        if (arrayList == null) {
            throw new ZipException("file list is null, cannot calculate total work");
        }
        long l = 0L;
        int n = 0;
        while (n < arrayList.size()) {
            long l2 = l;
            if (arrayList.get(n) instanceof File) {
                l2 = l;
                if (((File)arrayList.get(n)).exists()) {
                    l2 = zipParameters.isEncryptFiles() && zipParameters.getEncryptionMethod() == 0 ? l + Zip4jUtil.getFileLengh((File)arrayList.get(n)) * 2L : l + Zip4jUtil.getFileLengh((File)arrayList.get(n));
                    if (this.zipModel.getCentralDirectory() != null && this.zipModel.getCentralDirectory().getFileHeaders() != null && this.zipModel.getCentralDirectory().getFileHeaders().size() > 0) {
                        Object object = Zip4jUtil.getRelativeFileName(((File)arrayList.get(n)).getAbsolutePath(), zipParameters.getRootFolderInZip(), zipParameters.getDefaultFolderPath());
                        if ((object = Zip4jUtil.getFileHeader(this.zipModel, (String)object)) != null) {
                            l2 += Zip4jUtil.getFileLengh(new File(this.zipModel.getZipFile())) - object.getCompressedSize();
                        }
                    }
                }
            }
            ++n;
            l = l2;
        }
        return l;
    }

    private void checkParameters(ZipParameters zipParameters) throws ZipException {
        if (zipParameters == null) {
            throw new ZipException("cannot validate zip parameters");
        }
        if (zipParameters.getCompressionMethod() != 0 && zipParameters.getCompressionMethod() != 8) {
            throw new ZipException("unsupported compression type");
        }
        if (zipParameters.getCompressionMethod() == 8 && zipParameters.getCompressionLevel() < 0 && zipParameters.getCompressionLevel() > 9) {
            throw new ZipException("invalid compression level. compression level dor deflate should be in the range of 0-9");
        }
        if (zipParameters.isEncryptFiles()) {
            if (zipParameters.getEncryptionMethod() != 0 && zipParameters.getEncryptionMethod() != 99) {
                throw new ZipException("unsupported encryption method");
            }
            if (zipParameters.getPassword() == null || zipParameters.getPassword().length <= 0) {
                throw new ZipException("input password is empty or null");
            }
        } else {
            zipParameters.setAesKeyStrength(-1);
            zipParameters.setEncryptionMethod(-1);
        }
    }

    private EndCentralDirRecord createEndOfCentralDirectoryRecord() {
        EndCentralDirRecord endCentralDirRecord = new EndCentralDirRecord();
        endCentralDirRecord.setSignature(101010256L);
        endCentralDirRecord.setNoOfThisDisk(0);
        endCentralDirRecord.setTotNoOfEntriesInCentralDir(0);
        endCentralDirRecord.setTotNoOfEntriesInCentralDirOnThisDisk(0);
        endCentralDirRecord.setOffsetOfStartOfCentralDir(0L);
        return endCentralDirRecord;
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    private void initAddFiles(ArrayList var1_1, ZipParameters var2_17, ProgressMonitor var3_20) throws ZipException {
        block58 : {
            block57 : {
                if (var1_1 == null) throw new ZipException("one of the input parameters is null when adding files");
                if (var2_17 == null) {
                    throw new ZipException("one of the input parameters is null when adding files");
                }
                if (var1_1.size() <= 0) {
                    throw new ZipException("no files to add");
                }
                if (this.zipModel.getEndCentralDirRecord() == null) {
                    this.zipModel.setEndCentralDirRecord(this.createEndOfCentralDirectoryRecord());
                }
                var9_21 = null;
                var8_25 = null;
                this.checkParameters((ZipParameters)var2_17);
                this.removeFilesIfExists((ArrayList)var1_1, (ZipParameters)var2_17, var3_20);
                var6_29 = Zip4jUtil.checkFileExists(this.zipModel.getZipFile());
                var10_30 = new byte[](new File(this.zipModel.getZipFile()), this.zipModel.getSplitLength());
                var7_31 = new ZipOutputStream((OutputStream)var10_30, this.zipModel);
                if (!var6_29) ** GOTO lbl21
                if (this.zipModel.getEndCentralDirRecord() == null) {
                    throw new ZipException("invalid end of central directory record");
                }
                var10_30.seek(this.zipModel.getEndCentralDirRecord().getOffsetOfStartOfCentralDir());
lbl21: // 2 sources:
                var10_30 = new byte[4096];
                var8_25 = null;
                var4_33 = 0;
                break block57;
                catch (Throwable var1_5) {
                    var8_25 = var7_31 = null;
                    ** GOTO lbl175
                }
                catch (Exception var9_23) {
                    var2_17 = null;
                    var1_1 = var8_25;
                    ** GOTO lbl165
                }
                catch (Throwable var1_16) {
                    var8_25 = null;
                    ** GOTO lbl175
                }
                catch (Exception var9_24) {
                    var2_17 = null;
                    ** GOTO lbl124
                }
                catch (ZipException var8_28) {
                    var2_17 = null;
                    ** GOTO lbl127
                }
                catch (ZipException var7_32) {
                    var2_17 = null;
                    var1_1 = var9_21;
                    var9_21 = var7_32;
                    break block58;
                }
            }
            do {
                block65 : {
                    block70 : {
                        block74 : {
                            block72 : {
                                block67 : {
                                    block73 : {
                                        block66 : {
                                            block69 : {
                                                block68 : {
                                                    block64 : {
                                                        block62 : {
                                                            block60 : {
                                                                block63 : {
                                                                    block61 : {
                                                                        block59 : {
                                                                            if (var4_33 < var1_1.size()) break block59;
                                                                            var7_31.finish();
                                                                            var3_20.endProgressMonitorSuccess();
                                                                            ** if (var8_25 == null) goto lbl-1000
lbl-1000: // 1 sources:
                                                                            {
                                                                                var8_25.close();
                                                                            }
lbl-1000: // 2 sources:
                                                                            {
                                                                                break block60;
                                                                            }
                                                                        }
                                                                        if (!var3_20.isCancelAllTasks()) break block61;
                                                                        var3_20.setResult(3);
                                                                        var3_20.setState(0);
                                                                        ** if (var8_25 == null) goto lbl-1000
lbl-1000: // 1 sources:
                                                                        {
                                                                            var8_25.close();
                                                                        }
lbl-1000: // 2 sources:
                                                                        {
                                                                            break block62;
                                                                        }
                                                                    }
                                                                    var9_21 = (ZipParameters)var2_17.clone();
                                                                    var3_20.setFileName(((File)var1_1.get(var4_33)).getAbsolutePath());
                                                                    if (((File)var1_1.get(var4_33)).isDirectory()) ** GOTO lbl85
                                                                    if (!var9_21.isEncryptFiles() || var9_21.getEncryptionMethod() != 0) break block63;
                                                                    var3_20.setCurrentOperation(3);
                                                                    var9_21.setSourceFileCRC((int)CRCUtil.computeFileCRC(((File)var1_1.get(var4_33)).getAbsolutePath(), var3_20));
                                                                    var3_20.setCurrentOperation(0);
                                                                    if (!var3_20.isCancelAllTasks()) break block63;
                                                                    var3_20.setResult(3);
                                                                    var3_20.setState(0);
                                                                    ** if (var8_25 == null) goto lbl-1000
lbl-1000: // 1 sources:
                                                                    {
                                                                        var8_25.close();
                                                                    }
lbl-1000: // 2 sources:
                                                                    {
                                                                        break block64;
                                                                    }
                                                                }
                                                                try {
                                                                    if (Zip4jUtil.getFileLengh((File)var1_1.get(var4_33)) == 0L) {
                                                                        var9_21.setCompressionMethod(0);
                                                                    }
lbl85: // 4 sources:
                                                                    var7_31.putNextEntry((File)var1_1.get(var4_33), (ZipParameters)var9_21);
                                                                    if (((File)var1_1.get(var4_33)).isDirectory()) {
                                                                        var7_31.closeEntry();
                                                                        break block65;
                                                                    }
                                                                    var9_21 = new FileInputStream((File)var1_1.get(var4_33));
                                                                    break block66;
                                                                }
                                                                catch (Throwable var1_3) {
                                                                    break block67;
                                                                }
                                                                catch (Exception var9_22) {
                                                                    var2_17 = var8_25;
                                                                    break block68;
                                                                }
                                                                catch (ZipException var1_4) {
                                                                    var2_17 = var8_25;
                                                                    var8_25 = var1_4;
                                                                    break block69;
                                                                }
                                                                catch (IOException var1_8) {}
                                                            }
                                                            if (var7_31 == null) return;
                                                            try {
                                                                var7_31.close();
                                                                return;
                                                            }
                                                            catch (IOException var1_9) {
                                                                return;
                                                            }
                                                            catch (IOException var1_10) {}
                                                        }
                                                        if (var7_31 == null) return;
                                                        try {
                                                            var7_31.close();
                                                            return;
                                                        }
                                                        catch (IOException var1_11) {
                                                            return;
                                                        }
                                                        catch (IOException var1_12) {}
                                                    }
                                                    if (var7_31 == null) return;
                                                    try {
                                                        var7_31.close();
                                                        return;
                                                    }
                                                    catch (IOException var1_13) {
                                                        return;
                                                    }
                                                }
                                                var1_1 = var7_31;
                                                break block73;
                                            }
                                            var1_1 = var7_31;
                                            var9_21 = var8_25;
                                            break;
                                        }
                                        do {
                                            block71 : {
                                                var5_34 = var9_21.read(var10_30);
                                                if (var5_34 == -1) {
                                                    var7_31.closeEntry();
                                                    if (var9_21 != null) {
                                                        var9_21.close();
                                                    }
                                                    break block70;
                                                }
                                                if (!var3_20.isCancelAllTasks()) break block71;
                                                var3_20.setResult(3);
                                                var3_20.setState(0);
                                                ** if (var9_21 == null) goto lbl-1000
lbl-1000: // 1 sources:
                                                {
                                                    var9_21.close();
                                                }
lbl-1000: // 2 sources:
                                                {
                                                    break block72;
                                                }
                                            }
                                            var7_31.write(var10_30, 0, var5_34);
                                            var3_20.updateWorkCompleted(var5_34);
                                            continue;
                                            break;
                                        } while (true);
                                        catch (Throwable var1_2) {
                                            var8_25 = var9_21;
                                            break block67;
                                        }
                                        catch (Exception var8_26) {
                                            var1_1 = var7_31;
                                            var2_17 = var9_21;
                                            var9_21 = var8_26;
                                            break block73;
                                        }
                                        catch (ZipException var8_27) {
                                            var1_1 = var7_31;
                                            var2_17 = var9_21;
                                            var9_21 = var8_27;
                                            break;
                                        }
                                    }
                                    var7_31 = var1_1;
                                    var8_25 = var2_17;
                                    try {
                                        var3_20.endProgressMonitorError((Throwable)var9_21);
                                        var7_31 = var1_1;
                                        var8_25 = var2_17;
                                        throw new ZipException((Throwable)var9_21);
                                    }
                                    catch (Throwable var1_6) {
                                        // empty catch block
                                    }
                                }
                                if (var8_25 != null) {
                                    var8_25.close();
                                }
                                break block74;
                                catch (IOException var1_14) {}
                            }
                            if (var7_31 == null) return;
                            try {
                                var7_31.close();
                                return;
                            }
                            catch (IOException var1_15) {
                                return;
                            }
                            catch (IOException var2_18) {}
                        }
                        if (var7_31 == null) throw var1_7;
                        try {
                            var7_31.close();
                        }
                        catch (IOException var2_19) {
                            throw var1_7;
                        }
                        throw var1_7;
                    }
                    var8_25 = var9_21;
                }
                ++var4_33;
            } while (true);
        }
        var7_31 = var1_1;
        var8_25 = var2_17;
        var3_20.endProgressMonitorError((Throwable)var9_21);
        var7_31 = var1_1;
        var8_25 = var2_17;
        throw var9_21;
    }

    private RandomAccessFile prepareFileOutputStream() throws ZipException {
        Object object = this.zipModel.getZipFile();
        if (!Zip4jUtil.isStringNotNullAndNotEmpty((String)object)) {
            throw new ZipException("invalid output path");
        }
        try {
            object = new File((String)object);
            if (!object.getParentFile().exists()) {
                object.getParentFile().mkdirs();
            }
            object = new RandomAccessFile((File)object, "rw");
            return object;
        }
        catch (FileNotFoundException fileNotFoundException) {
            throw new ZipException(fileNotFoundException);
        }
    }

    /*
     * WARNING - Removed back jump from a try to a catch block - possible behaviour change.
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    private void removeFilesIfExists(ArrayList var1_1, ZipParameters var2_11, ProgressMonitor var3_13) throws ZipException {
        block25 : {
            if (this.zipModel == null) return;
            if (this.zipModel.getCentralDirectory() == null) return;
            if (this.zipModel.getCentralDirectory().getFileHeaders() == null) return;
            if (this.zipModel.getCentralDirectory().getFileHeaders().size() <= 0) {
                return;
            }
            var9_14 = null;
            var4_15 = 0;
            do lbl-1000: // 2 sources:
            {
                var10_19 = var9_14;
                var11_20 = var9_14;
                var5_16 = var1_1.size();
                if (var4_15 < var5_16) ** break block21
                if (var9_14 == null) return;
                var9_14.close();
                return;
                break;
            } while (true);
            catch (IOException var1_7) {
                return;
            }
            {
                block22 : {
                    block24 : {
                        block23 : {
                            
                            var10_19 = var9_14;
                            var11_20 = var9_14;
                            var8_18 = Zip4jUtil.getRelativeFileName(((File)var1_1.get(var4_15)).getAbsolutePath(), var2_11.getRootFolderInZip(), var2_11.getDefaultFolderPath());
                            var10_19 = var9_14;
                            var11_20 = var9_14;
                            var12_21 = Zip4jUtil.getFileHeader(this.zipModel, (String)var8_18);
                            var10_19 = var9_14;
                            if (var12_21 == null) break block22;
                            var8_18 = var9_14;
                            if (var9_14 != null) {
                                var10_19 = var9_14;
                                var11_20 = var9_14;
                                var9_14.close();
                                var8_18 = null;
                            }
                            var10_19 = var8_18;
                            var11_20 = var8_18;
                            var9_14 = new ArchiveMaintainer();
                            var10_19 = var8_18;
                            var11_20 = var8_18;
                            var3_13.setCurrentOperation(2);
                            var10_19 = var8_18;
                            var11_20 = var8_18;
                            var9_14 = var9_14.initRemoveZipFile(this.zipModel, var12_21, var3_13);
                            var10_19 = var8_18;
                            var11_20 = var8_18;
                            if (!var3_13.isCancelAllTasks()) break block23;
                            var10_19 = var8_18;
                            var11_20 = var8_18;
                            var3_13.setResult(3);
                            var10_19 = var8_18;
                            var11_20 = var8_18;
                            var3_13.setState(0);
                            if (var8_18 == null) return;
                            var8_18.close();
                            return;
                        }
                        var10_19 = var8_18;
                        var11_20 = var8_18;
                        var3_13.setCurrentOperation(0);
                        var10_19 = var8_18;
                        if (var8_18 != null) break block22;
                        var10_19 = var8_18;
                        var11_20 = var8_18;
                        var8_18 = this.prepareFileOutputStream();
                        if (var9_14 == null) break block24;
                        try {
                            var10_19 = var9_14.get("offsetCentralDir");
                            if (var10_19 == null) break block24;
                            var6_17 = Long.parseLong((String)var9_14.get("offsetCentralDir"));
                            if (var6_17 < 0L) break block24;
                            var8_18.seek(var6_17);
                        }
                        catch (Throwable var1_2) {
                            var10_19 = var8_18;
                            break block25;
                        }
                        catch (IOException var1_3) {
                            var10_19 = var8_18;
                            throw new ZipException((Throwable)var1_1);
                        }
                    }
                    var10_19 = var8_18;
                }
                ++var4_15;
                var9_14 = var10_19;
                ** while (true)
            }
            catch (IOException var1_8) {
                return;
            }
            catch (NumberFormatException var1_9) {
                throw new ZipException("NumberFormatException while parsing offset central directory. Cannot update already existing file header");
            }
            catch (Exception var1_10) {
                throw new ZipException("Error while parsing offset central directory. Cannot update already existing file header");
            }
            catch (Throwable var1_4) {
                break block25;
            }
            catch (IOException var1_5) {
                var10_19 = var11_20;
            }
            {
                throw new ZipException((Throwable)var1_1);
            }
        }
        if (var10_19 == null) throw var1_6;
        try {
            var10_19.close();
        }
        catch (IOException var2_12) {
            throw var1_6;
        }
        throw var1_6;
    }

    public void addFiles(ArrayList arrayList, ZipParameters zipParameters, ProgressMonitor progressMonitor, boolean bl) throws ZipException {
        if (arrayList != null && zipParameters != null) {
            if (arrayList.size() <= 0) {
                throw new ZipException("no files to add");
            }
            progressMonitor.setCurrentOperation(0);
            progressMonitor.setState(1);
            progressMonitor.setResult(1);
            if (bl) {
                progressMonitor.setTotalWork(this.calculateTotalWork(arrayList, zipParameters));
                progressMonitor.setFileName(((File)arrayList.get(0)).getAbsolutePath());
                new ZipEngine$1(this, "Zip4j", arrayList, zipParameters, progressMonitor).start();
                return;
            }
            this.initAddFiles(arrayList, zipParameters, progressMonitor);
            return;
        }
        throw new ZipException("one of the input parameters is null when adding files");
    }

    public void addFolderToZip(File file, ZipParameters object, ProgressMonitor progressMonitor, boolean bl) throws ZipException {
        if (file != null && object != null) {
            if (!Zip4jUtil.checkFileExists(file.getAbsolutePath())) {
                throw new ZipException("input folder does not exist");
            }
            if (!file.isDirectory()) {
                throw new ZipException("input file is not a folder, user addFileToZip method to add files");
            }
            if (!Zip4jUtil.checkFileReadAccess(file.getAbsolutePath())) {
                object = new StringBuffer("cannot read folder: ");
                object.append(file.getAbsolutePath());
                throw new ZipException(object.toString());
            }
            Object object2 = object.isIncludeRootFolder() ? (file.getAbsolutePath() != null ? (file.getAbsoluteFile().getParentFile() != null ? file.getAbsoluteFile().getParentFile().getAbsolutePath() : "") : (file.getParentFile() != null ? file.getParentFile().getAbsolutePath() : "")) : file.getAbsolutePath();
            object.setDefaultFolderPath((String)object2);
            ArrayList arrayList = Zip4jUtil.getFilesInDirectoryRec(file, object.isReadHiddenFiles());
            object2 = arrayList;
            if (object.isIncludeRootFolder()) {
                object2 = arrayList;
                if (arrayList == null) {
                    object2 = new ArrayList<File>();
                }
                object2.add(file);
            }
            this.addFiles((ArrayList)object2, (ZipParameters)object, progressMonitor, bl);
            return;
        }
        throw new ZipException("one of the input parameters is null, cannot add folder to zip");
    }

    /*
     * WARNING - Removed back jump from a try to a catch block - possible behaviour change.
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    public void addStreamToZip(InputStream var1_1, ZipParameters var2_11) throws ZipException {
        block17 : {
            if (var1_1 == null) throw new ZipException("one of the input parameters is null, cannot add stream to zip");
            if (var2_11 == null) {
                throw new ZipException("one of the input parameters is null, cannot add stream to zip");
            }
            var7_13 = null;
            var8_14 = null;
            var5_16 = var6_15 = null;
            this.checkParameters(var2_11);
            var5_16 = var6_15;
            var4_17 = Zip4jUtil.checkFileExists(this.zipModel.getZipFile());
            var5_16 = var6_15;
            var9_18 = new SplitOutputStream(new File(this.zipModel.getZipFile()), this.zipModel.getSplitLength());
            var5_16 = var6_15;
            var6_15 = new ZipOutputStream(var9_18, this.zipModel);
            if (!var4_17) ** GOTO lbl20
            if (this.zipModel.getEndCentralDirRecord() == null) {
                throw new ZipException("invalid end of central directory record");
            }
            var9_18.seek(this.zipModel.getEndCentralDirRecord().getOffsetOfStartOfCentralDir());
lbl20: // 2 sources:
            var5_16 = new byte[4096];
            var6_15.putNextEntry(null, var2_11);
            if (!var2_11.getFileNameInZip().endsWith("/") && !var2_11.getFileNameInZip().endsWith("\\")) {
                while ((var3_19 = var1_1.read(var5_16)) != -1) {
                    var6_15.write(var5_16, 0, var3_19);
                }
            }
            var6_15.closeEntry();
            var6_15.finish();
            if (var6_15 == null) return;
            try {
                var6_15.close();
                return;
            }
            catch (IOException var1_6) {
                return;
            }
            catch (Throwable var1_7) {
                break block17;
            }
            catch (Exception var1_8) {
                var5_16 = var6_15;
                throw new ZipException((Throwable)var1_1);
            }
            catch (ZipException var1_9) {
                var5_16 = var6_15;
                throw var1_4;
            }
            {
                catch (Throwable var1_2) {
                    var6_15 = var5_16;
                }
                catch (Exception var1_3) {}
                var5_16 = var7_13;
                {
                    throw new ZipException((Throwable)var1_1);
                }
            }
        }
        if (var6_15 == null) throw var1_5;
        try {
            var6_15.close();
        }
        catch (IOException var2_12) {
            throw var1_5;
        }
        throw var1_5;
        catch (ZipException var1_10) {
            var5_16 = var8_14;
            throw var1_4;
        }
    }
}

