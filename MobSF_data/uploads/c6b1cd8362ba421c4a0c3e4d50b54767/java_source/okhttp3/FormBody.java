/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  javax.annotation.Nullable
 */
package okhttp3;

import java.io.IOException;
import java.util.List;
import javax.annotation.Nullable;
import okhttp3.HttpUrl;
import okhttp3.MediaType;
import okhttp3.RequestBody;
import okhttp3.internal.Util;
import okio.Buffer;
import okio.BufferedSink;

public final class FormBody
extends RequestBody {
    private static final MediaType CONTENT_TYPE = MediaType.parse("application/x-www-form-urlencoded");
    private final List<String> encodedNames;
    private final List<String> encodedValues;

    FormBody(List<String> list, List<String> list2) {
        this.encodedNames = Util.immutableList(list);
        this.encodedValues = Util.immutableList(list2);
    }

    private long writeOrCountBytes(@Nullable BufferedSink bufferedSink, boolean bl) {
        bufferedSink = bl ? new Buffer() : bufferedSink.buffer();
        int n = this.encodedNames.size();
        for (int i = 0; i < n; ++i) {
            if (i > 0) {
                bufferedSink.writeByte(38);
            }
            bufferedSink.writeUtf8(this.encodedNames.get(i));
            bufferedSink.writeByte(61);
            bufferedSink.writeUtf8(this.encodedValues.get(i));
        }
        if (bl) {
            long l = bufferedSink.size();
            bufferedSink.clear();
            return l;
        }
        return 0L;
    }

    @Override
    public long contentLength() {
        return this.writeOrCountBytes(null, true);
    }

    @Override
    public MediaType contentType() {
        return CONTENT_TYPE;
    }

    public String encodedName(int n) {
        return this.encodedNames.get(n);
    }

    public String encodedValue(int n) {
        return this.encodedValues.get(n);
    }

    public String name(int n) {
        return HttpUrl.percentDecode(this.encodedName(n), true);
    }

    public int size() {
        return this.encodedNames.size();
    }

    public String value(int n) {
        return HttpUrl.percentDecode(this.encodedValue(n), true);
    }

    @Override
    public void writeTo(BufferedSink bufferedSink) throws IOException {
        this.writeOrCountBytes(bufferedSink, false);
    }
}

