/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  javax.annotation.Nullable
 *  okhttp3.Headers$Builder
 *  okhttp3.internal.http.HttpDate
 */
package okhttp3;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.TreeMap;
import java.util.TreeSet;
import javax.annotation.Nullable;
import okhttp3.Headers;
import okhttp3.internal.http.HttpDate;

public final class Headers {
    private final String[] namesAndValues;

    Headers( builder) {
        this.namesAndValues = builder.namesAndValues.toArray(new String[builder.namesAndValues.size()]);
    }

    private Headers(String[] arrstring) {
        this.namesAndValues = arrstring;
    }

    private static String get(String[] arrstring, String string2) {
        for (int i = arrstring.length - 2; i >= 0; i -= 2) {
            if (!string2.equalsIgnoreCase(arrstring[i])) continue;
            return arrstring[i + 1];
        }
        return null;
    }

    public static Headers of(Map<String, String> object) {
        if (object == null) {
            throw new NullPointerException("headers == null");
        }
        Object object2 = new String[object.size() * 2];
        Iterator<Map.Entry<String, String>> iterator = object.entrySet().iterator();
        int n = 0;
        while (iterator.hasNext()) {
            Map.Entry<String, String> entry = iterator.next();
            if (entry.getKey() != null && entry.getValue() != null) {
                object = entry.getKey().trim();
                entry = entry.getValue().trim();
                if (object.length() != 0 && object.indexOf(0) == -1 && entry.indexOf(0) == -1) {
                    object2[n] = object;
                    object2[n + 1] = entry;
                    n += 2;
                    continue;
                }
                object2 = new StringBuilder();
                object2.append("Unexpected header: ");
                object2.append((String)object);
                object2.append(": ");
                object2.append((String)((Object)entry));
                throw new IllegalArgumentException(object2.toString());
            }
            throw new IllegalArgumentException("Headers cannot be null");
        }
        return new Headers((String[])object2);
    }

    public static /* varargs */ Headers of(String ... object) {
        int n;
        if (object == null) {
            throw new NullPointerException("namesAndValues == null");
        }
        if (((String[])object).length % 2 != 0) {
            throw new IllegalArgumentException("Expected alternating header names and values");
        }
        Object object2 = (String[])object.clone();
        for (n = 0; n < ((String[])object2).length; ++n) {
            if (object2[n] == null) {
                throw new IllegalArgumentException("Headers cannot be null");
            }
            object2[n] = object2[n].trim();
        }
        for (n = 0; n < ((String[])object2).length; n += 2) {
            object = object2[n];
            String string2 = object2[n + 1];
            if (object.length() != 0 && object.indexOf(0) == -1 && string2.indexOf(0) == -1) {
                continue;
            }
            object2 = new StringBuilder();
            object2.append("Unexpected header: ");
            object2.append((String)object);
            object2.append(": ");
            object2.append(string2);
            throw new IllegalArgumentException(object2.toString());
        }
        return new Headers((String[])object2);
    }

    public long byteCount() {
        long l = this.namesAndValues.length * 2;
        int n = this.namesAndValues.length;
        int n2 = 0;
        while (n2 < n) {
            long l2 = this.namesAndValues[n2].length();
            ++n2;
            l += l2;
        }
        return l;
    }

    public boolean equals(@Nullable Object object) {
        if (object instanceof Headers && Arrays.equals(((Headers)object).namesAndValues, this.namesAndValues)) {
            return true;
        }
        return false;
    }

    @Nullable
    public String get(String string2) {
        return Headers.get(this.namesAndValues, string2);
    }

    @Nullable
    public Date getDate(String string2) {
        if ((string2 = this.get(string2)) != null) {
            return HttpDate.parse((String)string2);
        }
        return null;
    }

    public int hashCode() {
        return Arrays.hashCode(this.namesAndValues);
    }

    public String name(int n) {
        return this.namesAndValues[n * 2];
    }

    public Set<String> names() {
        TreeSet<String> treeSet = new TreeSet<String>(String.CASE_INSENSITIVE_ORDER);
        int n = this.size();
        for (int i = 0; i < n; ++i) {
            treeSet.add(this.name(i));
        }
        return Collections.unmodifiableSet(treeSet);
    }

    public  newBuilder() {
         builder = new /* Unavailable Anonymous Inner Class!! */;
        Collections.addAll(builder.namesAndValues, this.namesAndValues);
        return builder;
    }

    public int size() {
        return this.namesAndValues.length / 2;
    }

    public Map<String, List<String>> toMultimap() {
        TreeMap<String, List<String>> treeMap = new TreeMap<String, List<String>>(String.CASE_INSENSITIVE_ORDER);
        int n = this.size();
        for (int i = 0; i < n; ++i) {
            List<String> list;
            String string2 = this.name(i).toLowerCase(Locale.US);
            List<String> list2 = list = treeMap.get(string2);
            if (list == null) {
                list2 = new ArrayList<String>(2);
                treeMap.put(string2, list2);
            }
            list2.add(this.value(i));
        }
        return treeMap;
    }

    public String toString() {
        StringBuilder stringBuilder = new StringBuilder();
        int n = this.size();
        for (int i = 0; i < n; ++i) {
            stringBuilder.append(this.name(i));
            stringBuilder.append(": ");
            stringBuilder.append(this.value(i));
            stringBuilder.append("\n");
        }
        return stringBuilder.toString();
    }

    public String value(int n) {
        return this.namesAndValues[n * 2 + 1];
    }

    public List<String> values(String string2) {
        int n = this.size();
        ArrayList<String> arrayList = null;
        for (int i = 0; i < n; ++i) {
            ArrayList<String> arrayList2 = arrayList;
            if (string2.equalsIgnoreCase(this.name(i))) {
                arrayList2 = arrayList;
                if (arrayList == null) {
                    arrayList2 = new ArrayList<String>(2);
                }
                arrayList2.add(this.value(i));
            }
            arrayList = arrayList2;
        }
        if (arrayList != null) {
            return Collections.unmodifiableList(arrayList);
        }
        return Collections.emptyList();
    }
}

