/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  javax.annotation.Nullable
 *  okhttp3.CipherSuite
 *  okhttp3.TlsVersion
 */
package okhttp3;

import java.security.Principal;
import java.security.cert.Certificate;
import java.security.cert.X509Certificate;
import java.util.Collections;
import java.util.List;
import javax.annotation.Nullable;
import javax.net.ssl.SSLPeerUnverifiedException;
import javax.net.ssl.SSLSession;
import javax.security.auth.x500.X500Principal;
import okhttp3.CipherSuite;
import okhttp3.TlsVersion;
import okhttp3.internal.Util;

public final class Handshake {
    private final CipherSuite cipherSuite;
    private final List<Certificate> localCertificates;
    private final List<Certificate> peerCertificates;
    private final TlsVersion tlsVersion;

    private Handshake(TlsVersion tlsVersion, CipherSuite cipherSuite, List<Certificate> list, List<Certificate> list2) {
        this.tlsVersion = tlsVersion;
        this.cipherSuite = cipherSuite;
        this.peerCertificates = list;
        this.localCertificates = list2;
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public static Handshake get(SSLSession object) {
        void var0_4;
        void var1_10;
        void var1_13;
        CipherSuite cipherSuite;
        TlsVersion tlsVersion;
        block7 : {
            String string2 = object.getCipherSuite();
            if (string2 == null) {
                throw new IllegalStateException("cipherSuite == null");
            }
            cipherSuite = CipherSuite.forJavaName((String)string2);
            String string3 = object.getProtocol();
            if (string3 == null) {
                throw new IllegalStateException("tlsVersion == null");
            }
            tlsVersion = TlsVersion.forJavaName((String)string3);
            try {
                Certificate[] arrcertificate = object.getPeerCertificates();
                break block7;
            }
            catch (SSLPeerUnverifiedException sSLPeerUnverifiedException) {}
            Object var1_9 = null;
        }
        if (var1_10 != null) {
            List list = Util.immutableList(var1_10);
        } else {
            List list = Collections.emptyList();
        }
        Certificate[] arrcertificate = object.getLocalCertificates();
        if (arrcertificate != null) {
            List<Certificate> list = Util.immutableList(arrcertificate);
            return new Handshake(tlsVersion, cipherSuite, (List<Certificate>)var1_13, (List<Certificate>)var0_4);
        }
        List list = Collections.emptyList();
        return new Handshake(tlsVersion, cipherSuite, (List<Certificate>)var1_13, (List<Certificate>)var0_4);
    }

    public static Handshake get(TlsVersion tlsVersion, CipherSuite cipherSuite, List<Certificate> list, List<Certificate> list2) {
        if (tlsVersion == null) {
            throw new NullPointerException("tlsVersion == null");
        }
        if (cipherSuite == null) {
            throw new NullPointerException("cipherSuite == null");
        }
        return new Handshake(tlsVersion, cipherSuite, Util.immutableList(list), Util.immutableList(list2));
    }

    public CipherSuite cipherSuite() {
        return this.cipherSuite;
    }

    public boolean equals(@Nullable Object object) {
        boolean bl = object instanceof Handshake;
        boolean bl2 = false;
        if (!bl) {
            return false;
        }
        object = (Handshake)object;
        bl = bl2;
        if (this.tlsVersion.equals((Object)object.tlsVersion)) {
            bl = bl2;
            if (this.cipherSuite.equals((Object)object.cipherSuite)) {
                bl = bl2;
                if (this.peerCertificates.equals(object.peerCertificates)) {
                    bl = bl2;
                    if (this.localCertificates.equals(object.localCertificates)) {
                        bl = true;
                    }
                }
            }
        }
        return bl;
    }

    public int hashCode() {
        return (((527 + this.tlsVersion.hashCode()) * 31 + this.cipherSuite.hashCode()) * 31 + this.peerCertificates.hashCode()) * 31 + this.localCertificates.hashCode();
    }

    public List<Certificate> localCertificates() {
        return this.localCertificates;
    }

    @Nullable
    public Principal localPrincipal() {
        if (!this.localCertificates.isEmpty()) {
            return ((X509Certificate)this.localCertificates.get(0)).getSubjectX500Principal();
        }
        return null;
    }

    public List<Certificate> peerCertificates() {
        return this.peerCertificates;
    }

    @Nullable
    public Principal peerPrincipal() {
        if (!this.peerCertificates.isEmpty()) {
            return ((X509Certificate)this.peerCertificates.get(0)).getSubjectX500Principal();
        }
        return null;
    }

    public TlsVersion tlsVersion() {
        return this.tlsVersion;
    }
}

