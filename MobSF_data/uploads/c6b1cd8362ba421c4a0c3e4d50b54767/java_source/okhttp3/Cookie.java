/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  javax.annotation.Nullable
 *  okhttp3.Cookie$Builder
 *  okhttp3.internal.http.HttpDate
 *  okhttp3.internal.publicsuffix.PublicSuffixDatabase
 */
package okhttp3;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.Locale;
import java.util.TimeZone;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.annotation.Nullable;
import okhttp3.Cookie;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.internal.Util;
import okhttp3.internal.http.HttpDate;
import okhttp3.internal.publicsuffix.PublicSuffixDatabase;

public final class Cookie {
    private static final Pattern DAY_OF_MONTH_PATTERN;
    private static final Pattern MONTH_PATTERN;
    private static final Pattern TIME_PATTERN;
    private static final Pattern YEAR_PATTERN;
    private final String domain;
    private final long expiresAt;
    private final boolean hostOnly;
    private final boolean httpOnly;
    private final String name;
    private final String path;
    private final boolean persistent;
    private final boolean secure;
    private final String value;

    static {
        YEAR_PATTERN = Pattern.compile("(\\d{2,4})[^\\d]*");
        MONTH_PATTERN = Pattern.compile("(?i)(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec).*");
        DAY_OF_MONTH_PATTERN = Pattern.compile("(\\d{1,2})[^\\d]*");
        TIME_PATTERN = Pattern.compile("(\\d{1,2}):(\\d{1,2}):(\\d{1,2})[^\\d]*");
    }

    private Cookie(String string2, String string3, long l, String string4, String string5, boolean bl, boolean bl2, boolean bl3, boolean bl4) {
        this.name = string2;
        this.value = string3;
        this.expiresAt = l;
        this.domain = string4;
        this.path = string5;
        this.secure = bl;
        this.httpOnly = bl2;
        this.hostOnly = bl3;
        this.persistent = bl4;
    }

    Cookie( builder) {
        if (builder.name == null) {
            throw new NullPointerException("builder.name == null");
        }
        if (builder.value == null) {
            throw new NullPointerException("builder.value == null");
        }
        if (builder.domain == null) {
            throw new NullPointerException("builder.domain == null");
        }
        this.name = builder.name;
        this.value = builder.value;
        this.expiresAt = builder.expiresAt;
        this.domain = builder.domain;
        this.path = builder.path;
        this.secure = builder.secure;
        this.httpOnly = builder.httpOnly;
        this.persistent = builder.persistent;
        this.hostOnly = builder.hostOnly;
    }

    private static int dateCharacterOffset(String string2, int n, int n2, boolean bl) {
        while (n < n2) {
            char c = string2.charAt(n);
            c = !(c < ' ' && c != '\t' || c >= '' || c >= '0' && c <= '9' || c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z' || c == ':') ? (char)'\u0000' : '\u0001';
            if (c == (bl ^ true)) {
                return n;
            }
            ++n;
        }
        return n2;
    }

    private static boolean domainMatch(String string2, String string3) {
        if (string2.equals(string3)) {
            return true;
        }
        if (string2.endsWith(string3) && string2.charAt(string2.length() - string3.length() - 1) == '.' && !Util.verifyAsIpAddress(string2)) {
            return true;
        }
        return false;
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    @Nullable
    static Cookie parse(long var0, HttpUrl var2_1, String var3_2) {
        var5_3 = var3_2.length();
        var4_4 = Util.delimiterOffset(var3_2, 0, var5_3, ';');
        var6_5 = Util.delimiterOffset(var3_2, 0, var4_4, '=');
        if (var6_5 == var4_4) {
            return null;
        }
        var27_6 = Util.trimSubstring(var3_2, 0, var6_5);
        if (var27_6.isEmpty() != false) return null;
        if (Util.indexOfControlOrNonAscii(var27_6) != -1) {
            return null;
        }
        var28_7 = Util.trimSubstring(var3_2, var6_5 + 1, var4_4);
        if (Util.indexOfControlOrNonAscii(var28_7) != -1) {
            return null;
        }
        ++var4_4;
        var23_9 = var24_8 = null;
        var10_10 = -1L;
        var8_11 = 253402300799999L;
        var18_12 = false;
        var19_13 = false;
        var17_14 = true;
        var16_15 = false;
        do {
            block27 : {
                block29 : {
                    block30 : {
                        block31 : {
                            block28 : {
                                block25 : {
                                    block26 : {
                                        if (var4_4 >= var5_3) break block25;
                                        var6_5 = Util.delimiterOffset(var3_2, var4_4, var5_3, ';');
                                        var7_16 = Util.delimiterOffset(var3_2, var4_4, var6_5, '=');
                                        var29_25 = Util.trimSubstring(var3_2, var4_4, var7_16);
                                        var25_22 = var7_16 < var6_5 ? Util.trimSubstring(var3_2, var7_16 + 1, var6_5) : "";
                                        if (!var29_25.equalsIgnoreCase("expires")) break block26;
                                        try {
                                            var8_11 = var12_17 = Cookie.parseExpires(var25_22, 0, var25_22.length());
                                            ** GOTO lbl35
                                        }
                                        catch (IllegalArgumentException | NumberFormatException var25_23) {
                                            var25_22 = var24_8;
                                            var12_17 = var10_10;
                                            var20_19 = var18_12;
                                            var21_20 = var17_14;
                                            var26_24 = var23_9;
                                            var14_18 = var8_11;
                                            var22_21 = var16_15;
                                        }
                                    }
                                    if (var29_25.equalsIgnoreCase("max-age")) {
                                        var10_10 = var12_17 = Cookie.parseMaxAge(var25_22);
lbl35: // 2 sources:
                                        var22_21 = true;
                                        var25_22 = var24_8;
                                        var12_17 = var10_10;
                                        var20_19 = var18_12;
                                        var21_20 = var17_14;
                                        var26_24 = var23_9;
                                        var14_18 = var8_11;
                                    } else if (var29_25.equalsIgnoreCase("domain")) {
                                        var25_22 = Cookie.parseDomain(var25_22);
                                        var21_20 = false;
                                        var12_17 = var10_10;
                                        var20_19 = var18_12;
                                        var26_24 = var23_9;
                                        var14_18 = var8_11;
                                        var22_21 = var16_15;
                                        ** GOTO lbl132
                                    } else if (var29_25.equalsIgnoreCase("path")) {
                                        var26_24 = var25_22;
                                        var25_22 = var24_8;
                                        var12_17 = var10_10;
                                        var20_19 = var18_12;
                                        var21_20 = var17_14;
                                        var14_18 = var8_11;
                                        var22_21 = var16_15;
                                    } else if (var29_25.equalsIgnoreCase("secure")) {
                                        var20_19 = true;
                                        var25_22 = var24_8;
                                        var12_17 = var10_10;
                                        var21_20 = var17_14;
                                        var26_24 = var23_9;
                                        var14_18 = var8_11;
                                        var22_21 = var16_15;
                                    } else {
                                        var25_22 = var24_8;
                                        var12_17 = var10_10;
                                        var20_19 = var18_12;
                                        var21_20 = var17_14;
                                        var26_24 = var23_9;
                                        var14_18 = var8_11;
                                        var22_21 = var16_15;
                                        if (var29_25.equalsIgnoreCase("httponly")) {
                                            var19_13 = true;
                                            var22_21 = var16_15;
                                            var14_18 = var8_11;
                                            var26_24 = var23_9;
                                            var21_20 = var17_14;
                                            var20_19 = var18_12;
                                            var12_17 = var10_10;
                                            var25_22 = var24_8;
                                        }
                                    }
                                    break block27;
                                }
                                var12_17 = Long.MIN_VALUE;
                                if (var10_10 != Long.MIN_VALUE) break block28;
                                var0 = var12_17;
                                break block29;
                            }
                            if (var10_10 == -1L) break block30;
                            var8_11 = var10_10 <= 9223372036854775L ? var10_10 * 1000L : Long.MAX_VALUE;
                            if ((var8_11 = var0 + var8_11) < var0) break block31;
                            var0 = var8_11;
                            if (var8_11 <= 253402300799999L) break block29;
                        }
                        var0 = 253402300799999L;
                        break block29;
                    }
                    var0 = var8_11;
                }
                var25_22 = var2_1.host();
                if (var24_8 == null) {
                    var3_2 = var25_22;
                } else {
                    if (!Cookie.domainMatch(var25_22, var24_8)) {
                        return null;
                    }
                    var3_2 = var24_8;
                }
                if (var25_22.length() != var3_2.length() && PublicSuffixDatabase.get().getEffectiveTldPlusOne(var3_2) == null) {
                    return null;
                }
                if (var23_9 != null && var23_9.startsWith("/")) {
                    var2_1 = var23_9;
                    return new Cookie(var27_6, var28_7, var0, var3_2, (String)var2_1, var18_12, var19_13, var17_14, var16_15);
                }
                var4_4 = (var2_1 = var2_1.encodedPath()).lastIndexOf(47);
                if (var4_4 != 0) {
                    var2_1 = var2_1.substring(0, var4_4);
                    return new Cookie(var27_6, var28_7, var0, var3_2, (String)var2_1, var18_12, var19_13, var17_14, var16_15);
                }
                var2_1 = "/";
                return new Cookie(var27_6, var28_7, var0, var3_2, (String)var2_1, var18_12, var19_13, var17_14, var16_15);
            }
            var4_4 = var6_5 + 1;
            var24_8 = var25_22;
            var10_10 = var12_17;
            var18_12 = var20_19;
            var17_14 = var21_20;
            var23_9 = var26_24;
            var8_11 = var14_18;
            var16_15 = var22_21;
        } while (true);
    }

    @Nullable
    public static Cookie parse(HttpUrl httpUrl, String string2) {
        return Cookie.parse(System.currentTimeMillis(), httpUrl, string2);
    }

    public static List<Cookie> parseAll(HttpUrl httpUrl, Headers object) {
        List<String> list = object.values("Set-Cookie");
        int n = list.size();
        object = null;
        for (int i = 0; i < n; ++i) {
            Cookie cookie = Cookie.parse(httpUrl, list.get(i));
            if (cookie == null) continue;
            Object object2 = object;
            if (object == null) {
                object2 = new ArrayList();
            }
            object2.add(cookie);
            object = object2;
        }
        if (object != null) {
            return Collections.unmodifiableList(object);
        }
        return Collections.emptyList();
    }

    private static String parseDomain(String string2) {
        if (string2.endsWith(".")) {
            throw new IllegalArgumentException();
        }
        String string3 = string2;
        if (string2.startsWith(".")) {
            string3 = string2.substring(1);
        }
        if ((string2 = Util.canonicalizeHost(string3)) == null) {
            throw new IllegalArgumentException();
        }
        return string2;
    }

    private static long parseExpires(String object, int n, int n2) {
        int n3 = Cookie.dateCharacterOffset((String)object, n, n2, false);
        Matcher matcher = TIME_PATTERN.matcher((CharSequence)object);
        int n4 = -1;
        n = -1;
        int n5 = -1;
        int n6 = -1;
        int n7 = -1;
        int n8 = -1;
        while (n3 < n2) {
            int n9;
            int n10;
            int n11;
            int n12;
            int n13;
            int n14 = Cookie.dateCharacterOffset((String)object, n3 + 1, n2, true);
            matcher.region(n3, n14);
            if (n4 == -1 && matcher.usePattern(TIME_PATTERN).matches()) {
                n3 = Integer.parseInt(matcher.group(1));
                n12 = Integer.parseInt(matcher.group(2));
                n13 = Integer.parseInt(matcher.group(3));
                n9 = n;
                n11 = n5;
                n10 = n6;
            } else if (n5 == -1 && matcher.usePattern(DAY_OF_MONTH_PATTERN).matches()) {
                n11 = Integer.parseInt(matcher.group(1));
                n3 = n4;
                n9 = n;
                n10 = n6;
                n12 = n7;
                n13 = n8;
            } else if (n6 == -1 && matcher.usePattern(MONTH_PATTERN).matches()) {
                String string2 = matcher.group(1).toLowerCase(Locale.US);
                n10 = MONTH_PATTERN.pattern().indexOf(string2) / 4;
                n3 = n4;
                n9 = n;
                n11 = n5;
                n12 = n7;
                n13 = n8;
            } else {
                n3 = n4;
                n9 = n;
                n11 = n5;
                n10 = n6;
                n12 = n7;
                n13 = n8;
                if (n == -1) {
                    n3 = n4;
                    n9 = n;
                    n11 = n5;
                    n10 = n6;
                    n12 = n7;
                    n13 = n8;
                    if (matcher.usePattern(YEAR_PATTERN).matches()) {
                        n9 = Integer.parseInt(matcher.group(1));
                        n13 = n8;
                        n12 = n7;
                        n10 = n6;
                        n11 = n5;
                        n3 = n4;
                    }
                }
            }
            n14 = Cookie.dateCharacterOffset((String)object, n14 + 1, n2, false);
            n4 = n3;
            n = n9;
            n5 = n11;
            n6 = n10;
            n7 = n12;
            n8 = n13;
            n3 = n14;
        }
        n2 = n;
        if (n >= 70) {
            n2 = n;
            if (n <= 99) {
                n2 = n + 1900;
            }
        }
        n = n2;
        if (n2 >= 0) {
            n = n2;
            if (n2 <= 69) {
                n = n2 + 2000;
            }
        }
        if (n < 1601) {
            throw new IllegalArgumentException();
        }
        if (n6 == -1) {
            throw new IllegalArgumentException();
        }
        if (n5 >= 1 && n5 <= 31) {
            if (n4 >= 0 && n4 <= 23) {
                if (n7 >= 0 && n7 <= 59) {
                    if (n8 >= 0 && n8 <= 59) {
                        object = new GregorianCalendar(Util.UTC);
                        object.setLenient(false);
                        object.set(1, n);
                        object.set(2, n6 - 1);
                        object.set(5, n5);
                        object.set(11, n4);
                        object.set(12, n7);
                        object.set(13, n8);
                        object.set(14, 0);
                        return object.getTimeInMillis();
                    }
                    throw new IllegalArgumentException();
                }
                throw new IllegalArgumentException();
            }
            throw new IllegalArgumentException();
        }
        throw new IllegalArgumentException();
    }

    private static long parseMaxAge(String string2) {
        try {
            long l = Long.parseLong(string2);
            if (l <= 0L) {
                return Long.MIN_VALUE;
            }
            return l;
        }
        catch (NumberFormatException numberFormatException) {
            if (string2.matches("-?\\d+")) {
                if (string2.startsWith("-")) {
                    return Long.MIN_VALUE;
                }
                return Long.MAX_VALUE;
            }
            throw numberFormatException;
        }
    }

    private static boolean pathMatch(HttpUrl object, String string2) {
        if ((object = object.encodedPath()).equals(string2)) {
            return true;
        }
        if (object.startsWith(string2)) {
            if (string2.endsWith("/")) {
                return true;
            }
            if (object.charAt(string2.length()) == '/') {
                return true;
            }
        }
        return false;
    }

    public String domain() {
        return this.domain;
    }

    public boolean equals(@Nullable Object object) {
        boolean bl = object instanceof Cookie;
        boolean bl2 = false;
        if (!bl) {
            return false;
        }
        object = (Cookie)object;
        bl = bl2;
        if (object.name.equals(this.name)) {
            bl = bl2;
            if (object.value.equals(this.value)) {
                bl = bl2;
                if (object.domain.equals(this.domain)) {
                    bl = bl2;
                    if (object.path.equals(this.path)) {
                        bl = bl2;
                        if (object.expiresAt == this.expiresAt) {
                            bl = bl2;
                            if (object.secure == this.secure) {
                                bl = bl2;
                                if (object.httpOnly == this.httpOnly) {
                                    bl = bl2;
                                    if (object.persistent == this.persistent) {
                                        bl = bl2;
                                        if (object.hostOnly == this.hostOnly) {
                                            bl = true;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return bl;
    }

    public long expiresAt() {
        return this.expiresAt;
    }

    public int hashCode() {
        return ((((((((527 + this.name.hashCode()) * 31 + this.value.hashCode()) * 31 + this.domain.hashCode()) * 31 + this.path.hashCode()) * 31 + (int)(this.expiresAt ^ this.expiresAt >>> 32)) * 31 + (this.secure ^ true)) * 31 + (this.httpOnly ^ true)) * 31 + (this.persistent ^ true)) * 31 + (this.hostOnly ^ true);
    }

    public boolean hostOnly() {
        return this.hostOnly;
    }

    public boolean httpOnly() {
        return this.httpOnly;
    }

    public boolean matches(HttpUrl httpUrl) {
        boolean bl = this.hostOnly ? httpUrl.host().equals(this.domain) : Cookie.domainMatch(httpUrl.host(), this.domain);
        if (!bl) {
            return false;
        }
        if (!Cookie.pathMatch(httpUrl, this.path)) {
            return false;
        }
        if (this.secure && !httpUrl.isHttps()) {
            return false;
        }
        return true;
    }

    public String name() {
        return this.name;
    }

    public String path() {
        return this.path;
    }

    public boolean persistent() {
        return this.persistent;
    }

    public boolean secure() {
        return this.secure;
    }

    public String toString() {
        return this.toString(false);
    }

    String toString(boolean bl) {
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append(this.name);
        stringBuilder.append('=');
        stringBuilder.append(this.value);
        if (this.persistent) {
            if (this.expiresAt == Long.MIN_VALUE) {
                stringBuilder.append("; max-age=0");
            } else {
                stringBuilder.append("; expires=");
                stringBuilder.append(HttpDate.format((Date)new Date(this.expiresAt)));
            }
        }
        if (!this.hostOnly) {
            stringBuilder.append("; domain=");
            if (bl) {
                stringBuilder.append(".");
            }
            stringBuilder.append(this.domain);
        }
        stringBuilder.append("; path=");
        stringBuilder.append(this.path);
        if (this.secure) {
            stringBuilder.append("; secure");
        }
        if (this.httpOnly) {
            stringBuilder.append("; httponly");
        }
        return stringBuilder.toString();
    }

    public String value() {
        return this.value;
    }
}

