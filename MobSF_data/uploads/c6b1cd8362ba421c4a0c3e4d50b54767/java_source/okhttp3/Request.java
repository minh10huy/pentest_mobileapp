/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  javax.annotation.Nullable
 *  okhttp3.Headers$Builder
 *  okhttp3.internal.http.HttpMethod
 */
package okhttp3;

import java.net.URL;
import java.util.List;
import javax.annotation.Nullable;
import okhttp3.CacheControl;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.RequestBody;
import okhttp3.internal.Util;
import okhttp3.internal.http.HttpMethod;

public final class Request {
    @Nullable
    final RequestBody body;
    private volatile CacheControl cacheControl;
    final Headers headers;
    final String method;
    final Object tag;
    final HttpUrl url;

    Request(Builder object) {
        this.url = object.url;
        this.method = object.method;
        this.headers = object.headers.build();
        this.body = object.body;
        object = object.tag != null ? object.tag : this;
        this.tag = object;
    }

    @Nullable
    public RequestBody body() {
        return this.body;
    }

    public CacheControl cacheControl() {
        CacheControl cacheControl = this.cacheControl;
        if (cacheControl != null) {
            return cacheControl;
        }
        this.cacheControl = cacheControl = CacheControl.parse(this.headers);
        return cacheControl;
    }

    @Nullable
    public String header(String string2) {
        return this.headers.get(string2);
    }

    public List<String> headers(String string2) {
        return this.headers.values(string2);
    }

    public Headers headers() {
        return this.headers;
    }

    public boolean isHttps() {
        return this.url.isHttps();
    }

    public String method() {
        return this.method;
    }

    public Builder newBuilder() {
        return new Builder(this);
    }

    public Object tag() {
        return this.tag;
    }

    public String toString() {
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("Request{method=");
        stringBuilder.append(this.method);
        stringBuilder.append(", url=");
        stringBuilder.append(this.url);
        stringBuilder.append(", tag=");
        Object object = this.tag != this ? this.tag : null;
        stringBuilder.append(object);
        stringBuilder.append('}');
        return stringBuilder.toString();
    }

    public HttpUrl url() {
        return this.url;
    }

    public static class Builder {
        RequestBody body;
        Headers headers;
        String method;
        Object tag;
        HttpUrl url;

        public Builder() {
            this.method = "GET";
            this.headers = new /* Unavailable Anonymous Inner Class!! */;
        }

        Builder(Request request) {
            this.url = request.url;
            this.method = request.method;
            this.body = request.body;
            this.tag = request.tag;
            this.headers = request.headers.newBuilder();
        }

        public Builder addHeader(String string2, String string3) {
            this.headers.add(string2, string3);
            return this;
        }

        public Request build() {
            if (this.url == null) {
                throw new IllegalStateException("url == null");
            }
            return new Request(this);
        }

        public Builder cacheControl(CacheControl object) {
            if ((object = object.toString()).isEmpty()) {
                return this.removeHeader("Cache-Control");
            }
            return this.header("Cache-Control", (String)object);
        }

        public Builder delete() {
            return this.delete(Util.EMPTY_REQUEST);
        }

        public Builder delete(@Nullable RequestBody requestBody) {
            return this.method("DELETE", requestBody);
        }

        public Builder get() {
            return this.method("GET", null);
        }

        public Builder head() {
            return this.method("HEAD", null);
        }

        public Builder header(String string2, String string3) {
            this.headers.set(string2, string3);
            return this;
        }

        public Builder headers(Headers headers) {
            this.headers = headers.newBuilder();
            return this;
        }

        public Builder method(String string2, @Nullable RequestBody object) {
            if (string2 == null) {
                throw new NullPointerException("method == null");
            }
            if (string2.length() == 0) {
                throw new IllegalArgumentException("method.length() == 0");
            }
            if (object != null && !HttpMethod.permitsRequestBody((String)string2)) {
                object = new StringBuilder();
                object.append("method ");
                object.append(string2);
                object.append(" must not have a request body.");
                throw new IllegalArgumentException(object.toString());
            }
            if (object == null && HttpMethod.requiresRequestBody((String)string2)) {
                object = new StringBuilder();
                object.append("method ");
                object.append(string2);
                object.append(" must have a request body.");
                throw new IllegalArgumentException(object.toString());
            }
            this.method = string2;
            this.body = object;
            return this;
        }

        public Builder patch(RequestBody requestBody) {
            return this.method("PATCH", requestBody);
        }

        public Builder post(RequestBody requestBody) {
            return this.method("POST", requestBody);
        }

        public Builder put(RequestBody requestBody) {
            return this.method("PUT", requestBody);
        }

        public Builder removeHeader(String string2) {
            this.headers.removeAll(string2);
            return this;
        }

        public Builder tag(Object object) {
            this.tag = object;
            return this;
        }

        public Builder url(String object) {
            CharSequence charSequence;
            if (object == null) {
                throw new NullPointerException("url == null");
            }
            if (object.regionMatches(true, 0, "ws:", 0, 3)) {
                charSequence = new StringBuilder();
                charSequence.append("http:");
                charSequence.append(object.substring(3));
                charSequence = charSequence.toString();
            } else {
                charSequence = object;
                if (object.regionMatches(true, 0, "wss:", 0, 4)) {
                    charSequence = new StringBuilder();
                    charSequence.append("https:");
                    charSequence.append(object.substring(4));
                    charSequence = charSequence.toString();
                }
            }
            object = HttpUrl.parse((String)charSequence);
            if (object == null) {
                object = new StringBuilder();
                object.append("unexpected url: ");
                object.append((String)charSequence);
                throw new IllegalArgumentException(object.toString());
            }
            return this.url((HttpUrl)object);
        }

        public Builder url(URL uRL) {
            if (uRL == null) {
                throw new NullPointerException("url == null");
            }
            Object object = HttpUrl.get(uRL);
            if (object == null) {
                object = new StringBuilder();
                object.append("unexpected url: ");
                object.append(uRL);
                throw new IllegalArgumentException(object.toString());
            }
            return this.url((HttpUrl)object);
        }

        public Builder url(HttpUrl httpUrl) {
            if (httpUrl == null) {
                throw new NullPointerException("url == null");
            }
            this.url = httpUrl;
            return this;
        }
    }

}

