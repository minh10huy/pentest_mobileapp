/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  javax.annotation.Nullable
 *  okhttp3.Call
 *  okhttp3.RealCall
 *  okhttp3.RealCall$AsyncCall
 */
package okhttp3;

import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.Deque;
import java.util.Iterator;
import java.util.List;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.SynchronousQueue;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import javax.annotation.Nullable;
import okhttp3.Call;
import okhttp3.RealCall;
import okhttp3.internal.Util;

public final class Dispatcher {
    @Nullable
    private ExecutorService executorService;
    @Nullable
    private Runnable idleCallback;
    private int maxRequests = 64;
    private int maxRequestsPerHost = 5;
    private final Deque<RealCall.AsyncCall> readyAsyncCalls = new ArrayDeque<RealCall.AsyncCall>();
    private final Deque<RealCall.AsyncCall> runningAsyncCalls = new ArrayDeque<RealCall.AsyncCall>();
    private final Deque<RealCall> runningSyncCalls = new ArrayDeque<RealCall>();

    public Dispatcher() {
    }

    public Dispatcher(ExecutorService executorService) {
        this.executorService = executorService;
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Converted monitor instructions to comments
     * Lifted jumps to return sites
     */
    private <T> void finished(Deque<T> object, T t, boolean bl) {
        // MONITORENTER : this
        if (!object.remove(t)) {
            throw new AssertionError((Object)"Call wasn't in-flight!");
        }
        if (bl) {
            this.promoteCalls();
        }
        int n = this.runningCallsCount();
        object = this.idleCallback;
        // MONITOREXIT : this
        if (n != 0) return;
        if (object == null) return;
        object.run();
    }

    private void promoteCalls() {
        if (this.runningAsyncCalls.size() >= this.maxRequests) {
            return;
        }
        if (this.readyAsyncCalls.isEmpty()) {
            return;
        }
        Iterator<RealCall.AsyncCall> iterator = this.readyAsyncCalls.iterator();
        while (iterator.hasNext()) {
            RealCall.AsyncCall asyncCall = iterator.next();
            if (this.runningCallsForHost(asyncCall) < this.maxRequestsPerHost) {
                iterator.remove();
                this.runningAsyncCalls.add(asyncCall);
                this.executorService().execute((Runnable)asyncCall);
            }
            if (this.runningAsyncCalls.size() < this.maxRequests) continue;
            return;
        }
    }

    private int runningCallsForHost(RealCall.AsyncCall asyncCall) {
        Iterator<RealCall.AsyncCall> iterator = this.runningAsyncCalls.iterator();
        int n = 0;
        while (iterator.hasNext()) {
            RealCall.AsyncCall asyncCall2 = iterator.next();
            if (asyncCall2.get().forWebSocket || !asyncCall2.host().equals(asyncCall.host())) continue;
            ++n;
        }
        return n;
    }

    public void cancelAll() {
        synchronized (this) {
            Iterator<RealCall.AsyncCall> iterator = this.readyAsyncCalls.iterator();
            while (iterator.hasNext()) {
                iterator.next().get().cancel();
            }
            iterator = this.runningAsyncCalls.iterator();
            while (iterator.hasNext()) {
                iterator.next().get().cancel();
            }
            iterator = this.runningSyncCalls.iterator();
            while (iterator.hasNext()) {
                ((RealCall)iterator.next()).cancel();
            }
            return;
        }
    }

    void enqueue(RealCall.AsyncCall asyncCall) {
        synchronized (this) {
            if (this.runningAsyncCalls.size() < this.maxRequests && this.runningCallsForHost(asyncCall) < this.maxRequestsPerHost) {
                this.runningAsyncCalls.add(asyncCall);
                this.executorService().execute((Runnable)asyncCall);
            } else {
                this.readyAsyncCalls.add(asyncCall);
            }
            return;
        }
    }

    void executed(RealCall realCall) {
        synchronized (this) {
            this.runningSyncCalls.add(realCall);
            return;
        }
    }

    public ExecutorService executorService() {
        synchronized (this) {
            if (this.executorService == null) {
                this.executorService = new ThreadPoolExecutor(0, Integer.MAX_VALUE, 60L, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(), Util.threadFactory("OkHttp Dispatcher", false));
            }
            ExecutorService executorService = this.executorService;
            return executorService;
        }
    }

    void finished(RealCall.AsyncCall asyncCall) {
        this.finished((Deque<T>)this.runningAsyncCalls, (T)asyncCall, true);
    }

    void finished(RealCall realCall) {
        this.finished((Deque<T>)this.runningSyncCalls, (T)realCall, false);
    }

    public int getMaxRequests() {
        synchronized (this) {
            int n = this.maxRequests;
            return n;
        }
    }

    public int getMaxRequestsPerHost() {
        synchronized (this) {
            int n = this.maxRequestsPerHost;
            return n;
        }
    }

    public List<Call> queuedCalls() {
        synchronized (this) {
            ArrayList<Call> arrayList = new ArrayList<RealCall>();
            Iterator<RealCall.AsyncCall> iterator = this.readyAsyncCalls.iterator();
            while (iterator.hasNext()) {
                arrayList.add((Call)iterator.next().get());
            }
            arrayList = Collections.unmodifiableList(arrayList);
            return arrayList;
        }
    }

    public int queuedCallsCount() {
        synchronized (this) {
            int n = this.readyAsyncCalls.size();
            return n;
        }
    }

    public List<Call> runningCalls() {
        synchronized (this) {
            ArrayList<Call> arrayList = new ArrayList<RealCall>();
            arrayList.addAll(this.runningSyncCalls);
            Iterator<RealCall.AsyncCall> iterator = this.runningAsyncCalls.iterator();
            while (iterator.hasNext()) {
                arrayList.add((Call)iterator.next().get());
            }
            arrayList = Collections.unmodifiableList(arrayList);
            return arrayList;
        }
    }

    public int runningCallsCount() {
        synchronized (this) {
            int n = this.runningAsyncCalls.size();
            int n2 = this.runningSyncCalls.size();
            return n + n2;
        }
    }

    public void setIdleCallback(@Nullable Runnable runnable) {
        synchronized (this) {
            this.idleCallback = runnable;
            return;
        }
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Converted monitor instructions to comments
     * Lifted jumps to return sites
     */
    public void setMaxRequests(int var1_1) {
        // MONITORENTER : this
        if (var1_1 >= 1) ** GOTO lbl8
        var2_2 = new StringBuilder();
        var2_2.append("max < 1: ");
        var2_2.append(var1_1);
        throw new IllegalArgumentException(var2_2.toString());
lbl8: // 1 sources:
        this.maxRequests = var1_1;
        this.promoteCalls();
        // MONITOREXIT : this
        return;
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Converted monitor instructions to comments
     * Lifted jumps to return sites
     */
    public void setMaxRequestsPerHost(int var1_1) {
        // MONITORENTER : this
        if (var1_1 >= 1) ** GOTO lbl8
        var2_2 = new StringBuilder();
        var2_2.append("max < 1: ");
        var2_2.append(var1_1);
        throw new IllegalArgumentException(var2_2.toString());
lbl8: // 1 sources:
        this.maxRequestsPerHost = var1_1;
        this.promoteCalls();
        // MONITOREXIT : this
        return;
    }
}

