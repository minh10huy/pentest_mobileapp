/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  javax.annotation.Nullable
 *  okhttp3.ConnectionPool$1
 *  okhttp3.internal.connection.RouteDatabase
 *  okhttp3.internal.connection.StreamAllocation
 *  okhttp3.internal.connection.StreamAllocation$StreamAllocationReference
 */
package okhttp3;

import java.lang.ref.Reference;
import java.net.Socket;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Deque;
import java.util.Iterator;
import java.util.List;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.Executor;
import java.util.concurrent.SynchronousQueue;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import javax.annotation.Nullable;
import okhttp3.Address;
import okhttp3.ConnectionPool;
import okhttp3.HttpUrl;
import okhttp3.Route;
import okhttp3.internal.Util;
import okhttp3.internal.connection.RealConnection;
import okhttp3.internal.connection.RouteDatabase;
import okhttp3.internal.connection.StreamAllocation;
import okhttp3.internal.platform.Platform;

public final class ConnectionPool {
    static final /* synthetic */ boolean $assertionsDisabled = false;
    private static final Executor executor = new ThreadPoolExecutor(0, Integer.MAX_VALUE, 60L, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(), Util.threadFactory("OkHttp ConnectionPool", true));
    private final Runnable cleanupRunnable = new 1(this);
    boolean cleanupRunning;
    private final Deque<RealConnection> connections = new ArrayDeque<RealConnection>();
    private final long keepAliveDurationNs;
    private final int maxIdleConnections;
    final RouteDatabase routeDatabase = new RouteDatabase();

    public ConnectionPool() {
        this(5, 5L, TimeUnit.MINUTES);
    }

    public ConnectionPool(int n, long l, TimeUnit object) {
        this.maxIdleConnections = n;
        this.keepAliveDurationNs = object.toNanos(l);
        if (l <= 0L) {
            object = new StringBuilder();
            object.append("keepAliveDuration <= 0: ");
            object.append(l);
            throw new IllegalArgumentException(object.toString());
        }
    }

    private int pruneAndGetAllocationCount(RealConnection realConnection, long l) {
        List<Reference<StreamAllocation>> list = realConnection.allocations;
        int n = 0;
        while (n < list.size()) {
            StreamAllocation.StreamAllocationReference streamAllocationReference = list.get(n);
            if (streamAllocationReference.get() != null) {
                ++n;
                continue;
            }
            streamAllocationReference = streamAllocationReference;
            CharSequence charSequence = new StringBuilder();
            charSequence.append("A connection to ");
            charSequence.append(realConnection.route().address().url());
            charSequence.append(" was leaked. Did you forget to close a response body?");
            charSequence = charSequence.toString();
            Platform.get().logCloseableLeak((String)charSequence, streamAllocationReference.callStackTrace);
            list.remove(n);
            realConnection.noNewStreams = true;
            if (!list.isEmpty()) continue;
            realConnection.idleAtNanos = l - this.keepAliveDurationNs;
            return 0;
        }
        return list.size();
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    long cleanup(long l) {
        RealConnection realConnection;
        synchronized (this) {
            Iterator<RealConnection> iterator = this.connections.iterator();
            long l2 = Long.MIN_VALUE;
            realConnection = null;
            int n = 0;
            int n2 = 0;
            while (iterator.hasNext()) {
                RealConnection realConnection2 = iterator.next();
                if (this.pruneAndGetAllocationCount(realConnection2, l) > 0) {
                    ++n2;
                    continue;
                }
                int n3 = n + 1;
                long l3 = l - realConnection2.idleAtNanos;
                n = n3;
                if (l3 <= l2) continue;
                realConnection = realConnection2;
                l2 = l3;
                n = n3;
            }
            if (l2 < this.keepAliveDurationNs && n <= this.maxIdleConnections) {
                if (n > 0) {
                    l = this.keepAliveDurationNs;
                    return l - l2;
                }
                if (n2 > 0) {
                    return this.keepAliveDurationNs;
                }
                this.cleanupRunning = false;
                return -1L;
            }
            this.connections.remove(realConnection);
        }
        Util.closeQuietly(realConnection.socket());
        return 0L;
    }

    boolean connectionBecameIdle(RealConnection realConnection) {
        if (!realConnection.noNewStreams && this.maxIdleConnections != 0) {
            this.notifyAll();
            return false;
        }
        this.connections.remove(realConnection);
        return true;
    }

    public int connectionCount() {
        synchronized (this) {
            int n = this.connections.size();
            return n;
        }
    }

    @Nullable
    Socket deduplicate(Address address, StreamAllocation streamAllocation) {
        for (RealConnection realConnection : this.connections) {
            if (!realConnection.isEligible(address, null) || !realConnection.isMultiplexed() || realConnection == streamAllocation.connection()) continue;
            return streamAllocation.releaseAndAcquire(realConnection);
        }
        return null;
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public void evictAll() {
        Object object = new ArrayList();
        synchronized (this) {
            Iterator<RealConnection> iterator = this.connections.iterator();
            while (iterator.hasNext()) {
                RealConnection realConnection = iterator.next();
                if (!realConnection.allocations.isEmpty()) continue;
                realConnection.noNewStreams = true;
                object.add(realConnection);
                iterator.remove();
            }
        }
        object = object.iterator();
        while (object.hasNext()) {
            Util.closeQuietly(((RealConnection)object.next()).socket());
        }
        return;
    }

    @Nullable
    RealConnection get(Address address, StreamAllocation streamAllocation, Route route) {
        for (RealConnection realConnection : this.connections) {
            if (!realConnection.isEligible(address, route)) continue;
            streamAllocation.acquire(realConnection, true);
            return realConnection;
        }
        return null;
    }

    public int idleConnectionCount() {
        synchronized (this) {
            int n = 0;
            Iterator<RealConnection> iterator = this.connections.iterator();
            while (iterator.hasNext()) {
                boolean bl = iterator.next().allocations.isEmpty();
                if (!bl) continue;
            }
            {
                ++n;
                continue;
            }
            return n;
        }
    }

    void put(RealConnection realConnection) {
        if (!this.cleanupRunning) {
            this.cleanupRunning = true;
            executor.execute(this.cleanupRunnable);
        }
        this.connections.add(realConnection);
    }
}

