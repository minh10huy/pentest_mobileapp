/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  javax.annotation.Nullable
 *  okhttp3.CacheControl$Builder
 *  okhttp3.internal.http.HttpHeaders
 */
package okhttp3;

import java.util.concurrent.TimeUnit;
import javax.annotation.Nullable;
import okhttp3.CacheControl;
import okhttp3.Headers;
import okhttp3.internal.http.HttpHeaders;

public final class CacheControl {
    public static final CacheControl FORCE_CACHE;
    public static final CacheControl FORCE_NETWORK;
    @Nullable
    String headerValue;
    private final boolean immutable;
    private final boolean isPrivate;
    private final boolean isPublic;
    private final int maxAgeSeconds;
    private final int maxStaleSeconds;
    private final int minFreshSeconds;
    private final boolean mustRevalidate;
    private final boolean noCache;
    private final boolean noStore;
    private final boolean noTransform;
    private final boolean onlyIfCached;
    private final int sMaxAgeSeconds;

    static {
        FORCE_NETWORK = new /* Unavailable Anonymous Inner Class!! */.noCache().build();
        FORCE_CACHE = new /* Unavailable Anonymous Inner Class!! */.onlyIfCached().maxStale(Integer.MAX_VALUE, TimeUnit.SECONDS).build();
    }

    CacheControl( builder) {
        this.noCache = builder.noCache;
        this.noStore = builder.noStore;
        this.maxAgeSeconds = builder.maxAgeSeconds;
        this.sMaxAgeSeconds = -1;
        this.isPrivate = false;
        this.isPublic = false;
        this.mustRevalidate = false;
        this.maxStaleSeconds = builder.maxStaleSeconds;
        this.minFreshSeconds = builder.minFreshSeconds;
        this.onlyIfCached = builder.onlyIfCached;
        this.noTransform = builder.noTransform;
        this.immutable = builder.immutable;
    }

    private CacheControl(boolean bl, boolean bl2, int n, int n2, boolean bl3, boolean bl4, boolean bl5, int n3, int n4, boolean bl6, boolean bl7, boolean bl8, @Nullable String string2) {
        this.noCache = bl;
        this.noStore = bl2;
        this.maxAgeSeconds = n;
        this.sMaxAgeSeconds = n2;
        this.isPrivate = bl3;
        this.isPublic = bl4;
        this.mustRevalidate = bl5;
        this.maxStaleSeconds = n3;
        this.minFreshSeconds = n4;
        this.onlyIfCached = bl6;
        this.noTransform = bl7;
        this.immutable = bl8;
        this.headerValue = string2;
    }

    private String headerValue() {
        StringBuilder stringBuilder = new StringBuilder();
        if (this.noCache) {
            stringBuilder.append("no-cache, ");
        }
        if (this.noStore) {
            stringBuilder.append("no-store, ");
        }
        if (this.maxAgeSeconds != -1) {
            stringBuilder.append("max-age=");
            stringBuilder.append(this.maxAgeSeconds);
            stringBuilder.append(", ");
        }
        if (this.sMaxAgeSeconds != -1) {
            stringBuilder.append("s-maxage=");
            stringBuilder.append(this.sMaxAgeSeconds);
            stringBuilder.append(", ");
        }
        if (this.isPrivate) {
            stringBuilder.append("private, ");
        }
        if (this.isPublic) {
            stringBuilder.append("public, ");
        }
        if (this.mustRevalidate) {
            stringBuilder.append("must-revalidate, ");
        }
        if (this.maxStaleSeconds != -1) {
            stringBuilder.append("max-stale=");
            stringBuilder.append(this.maxStaleSeconds);
            stringBuilder.append(", ");
        }
        if (this.minFreshSeconds != -1) {
            stringBuilder.append("min-fresh=");
            stringBuilder.append(this.minFreshSeconds);
            stringBuilder.append(", ");
        }
        if (this.onlyIfCached) {
            stringBuilder.append("only-if-cached, ");
        }
        if (this.noTransform) {
            stringBuilder.append("no-transform, ");
        }
        if (this.immutable) {
            stringBuilder.append("immutable, ");
        }
        if (stringBuilder.length() == 0) {
            return "";
        }
        stringBuilder.delete(stringBuilder.length() - 2, stringBuilder.length());
        return stringBuilder.toString();
    }

    /*
     * Enabled aggressive block sorting
     */
    public static CacheControl parse(Headers headers) {
        int n = headers.size();
        int n2 = 0;
        int n3 = 1;
        String string2 = null;
        boolean bl = false;
        boolean bl2 = false;
        int n4 = -1;
        int n5 = -1;
        boolean bl3 = false;
        boolean bl4 = false;
        boolean bl5 = false;
        int n6 = -1;
        int n7 = -1;
        boolean bl6 = false;
        boolean bl7 = false;
        boolean bl8 = false;
        do {
            boolean bl9;
            boolean bl10;
            int n8;
            boolean bl11;
            int n9;
            boolean bl12;
            boolean bl13;
            boolean bl14;
            int n10;
            String string3;
            boolean bl15;
            int n11;
            int n12;
            boolean bl16;
            block34 : {
                String string4;
                String string5;
                block33 : {
                    block30 : {
                        block32 : {
                            block31 : {
                                if (n2 >= n) break block30;
                                string5 = headers.name(n2);
                                string4 = headers.value(n2);
                                if (!string5.equalsIgnoreCase("Cache-Control")) break block31;
                                if (string2 != null) break block32;
                                string2 = string4;
                                break block33;
                            }
                            n9 = n3;
                            string3 = string2;
                            bl9 = bl;
                            bl13 = bl2;
                            n10 = n4;
                            n11 = n5;
                            bl14 = bl3;
                            bl11 = bl4;
                            bl16 = bl5;
                            n8 = n6;
                            n12 = n7;
                            bl10 = bl6;
                            bl15 = bl7;
                            bl12 = bl8;
                            if (!string5.equalsIgnoreCase("Pragma")) break block34;
                        }
                        n3 = 0;
                        break block33;
                    }
                    if (n3 == 0) {
                        string2 = null;
                    }
                    return new CacheControl(bl, bl2, n4, n5, bl3, bl4, bl5, n6, n7, bl6, bl7, bl8, string2);
                }
                int n13 = 0;
                do {
                    n9 = n3;
                    string3 = string2;
                    bl9 = bl;
                    bl13 = bl2;
                    n10 = n4;
                    n11 = n5;
                    bl14 = bl3;
                    bl11 = bl4;
                    bl16 = bl5;
                    n8 = n6;
                    n12 = n7;
                    bl10 = bl6;
                    bl15 = bl7;
                    bl12 = bl8;
                    if (n13 >= string4.length()) break;
                    n10 = HttpHeaders.skipUntil((String)string4, (int)n13, (String)"=,;");
                    string5 = string4.substring(n13, n10).trim();
                    if (n10 != string4.length() && string4.charAt(n10) != ',' && string4.charAt(n10) != ';') {
                        n11 = HttpHeaders.skipWhitespace((String)string4, (int)(n10 + 1));
                        if (n11 < string4.length() && string4.charAt(n11) == '\"') {
                            n10 = n11 + 1;
                            n11 = HttpHeaders.skipUntil((String)string4, (int)n10, (String)"\"");
                            string3 = string4.substring(n10, n11);
                            n10 = n11 + 1;
                        } else {
                            n10 = HttpHeaders.skipUntil((String)string4, (int)n11, (String)",;");
                            string3 = string4.substring(n11, n10).trim();
                        }
                    } else {
                        ++n10;
                        string3 = null;
                    }
                    if ("no-cache".equalsIgnoreCase(string5)) {
                        bl9 = true;
                        bl13 = bl2;
                        n11 = n4;
                        n8 = n5;
                        bl14 = bl3;
                        bl11 = bl4;
                        bl16 = bl5;
                        n12 = n6;
                        n9 = n7;
                        bl10 = bl6;
                        bl15 = bl7;
                    } else if ("no-store".equalsIgnoreCase(string5)) {
                        bl13 = true;
                        bl9 = bl;
                        n11 = n4;
                        n8 = n5;
                        bl14 = bl3;
                        bl11 = bl4;
                        bl16 = bl5;
                        n12 = n6;
                        n9 = n7;
                        bl10 = bl6;
                        bl15 = bl7;
                    } else if ("max-age".equalsIgnoreCase(string5)) {
                        n11 = HttpHeaders.parseSeconds((String)string3, (int)-1);
                        bl9 = bl;
                        bl13 = bl2;
                        n8 = n5;
                        bl14 = bl3;
                        bl11 = bl4;
                        bl16 = bl5;
                        n12 = n6;
                        n9 = n7;
                        bl10 = bl6;
                        bl15 = bl7;
                    } else if ("s-maxage".equalsIgnoreCase(string5)) {
                        n8 = HttpHeaders.parseSeconds((String)string3, (int)-1);
                        bl9 = bl;
                        bl13 = bl2;
                        n11 = n4;
                        bl14 = bl3;
                        bl11 = bl4;
                        bl16 = bl5;
                        n12 = n6;
                        n9 = n7;
                        bl10 = bl6;
                        bl15 = bl7;
                    } else if ("private".equalsIgnoreCase(string5)) {
                        bl14 = true;
                        bl9 = bl;
                        bl13 = bl2;
                        n11 = n4;
                        n8 = n5;
                        bl11 = bl4;
                        bl16 = bl5;
                        n12 = n6;
                        n9 = n7;
                        bl10 = bl6;
                        bl15 = bl7;
                    } else if ("public".equalsIgnoreCase(string5)) {
                        bl11 = true;
                        bl9 = bl;
                        bl13 = bl2;
                        n11 = n4;
                        n8 = n5;
                        bl14 = bl3;
                        bl16 = bl5;
                        n12 = n6;
                        n9 = n7;
                        bl10 = bl6;
                        bl15 = bl7;
                    } else if ("must-revalidate".equalsIgnoreCase(string5)) {
                        bl16 = true;
                        bl9 = bl;
                        bl13 = bl2;
                        n11 = n4;
                        n8 = n5;
                        bl14 = bl3;
                        bl11 = bl4;
                        n12 = n6;
                        n9 = n7;
                        bl10 = bl6;
                        bl15 = bl7;
                    } else if ("max-stale".equalsIgnoreCase(string5)) {
                        n12 = HttpHeaders.parseSeconds((String)string3, (int)Integer.MAX_VALUE);
                        bl9 = bl;
                        bl13 = bl2;
                        n11 = n4;
                        n8 = n5;
                        bl14 = bl3;
                        bl11 = bl4;
                        bl16 = bl5;
                        n9 = n7;
                        bl10 = bl6;
                        bl15 = bl7;
                    } else if ("min-fresh".equalsIgnoreCase(string5)) {
                        n9 = HttpHeaders.parseSeconds((String)string3, (int)-1);
                        bl9 = bl;
                        bl13 = bl2;
                        n11 = n4;
                        n8 = n5;
                        bl14 = bl3;
                        bl11 = bl4;
                        bl16 = bl5;
                        n12 = n6;
                        bl10 = bl6;
                        bl15 = bl7;
                    } else if ("only-if-cached".equalsIgnoreCase(string5)) {
                        bl10 = true;
                        bl9 = bl;
                        bl13 = bl2;
                        n11 = n4;
                        n8 = n5;
                        bl14 = bl3;
                        bl11 = bl4;
                        bl16 = bl5;
                        n12 = n6;
                        n9 = n7;
                        bl15 = bl7;
                    } else if ("no-transform".equalsIgnoreCase(string5)) {
                        bl15 = true;
                        bl9 = bl;
                        bl13 = bl2;
                        n11 = n4;
                        n8 = n5;
                        bl14 = bl3;
                        bl11 = bl4;
                        bl16 = bl5;
                        n12 = n6;
                        n9 = n7;
                        bl10 = bl6;
                    } else {
                        bl9 = bl;
                        bl13 = bl2;
                        n11 = n4;
                        n8 = n5;
                        bl14 = bl3;
                        bl11 = bl4;
                        bl16 = bl5;
                        n12 = n6;
                        n9 = n7;
                        bl10 = bl6;
                        bl15 = bl7;
                        if ("immutable".equalsIgnoreCase(string5)) {
                            bl8 = true;
                            bl15 = bl7;
                            bl10 = bl6;
                            n9 = n7;
                            n12 = n6;
                            bl16 = bl5;
                            bl11 = bl4;
                            bl14 = bl3;
                            n8 = n5;
                            n11 = n4;
                            bl13 = bl2;
                            bl9 = bl;
                        }
                    }
                    n13 = n10;
                    bl = bl9;
                    bl2 = bl13;
                    n4 = n11;
                    n5 = n8;
                    bl3 = bl14;
                    bl4 = bl11;
                    bl5 = bl16;
                    n6 = n12;
                    n7 = n9;
                    bl6 = bl10;
                    bl7 = bl15;
                } while (true);
            }
            ++n2;
            n3 = n9;
            string2 = string3;
            bl = bl9;
            bl2 = bl13;
            n4 = n10;
            n5 = n11;
            bl3 = bl14;
            bl4 = bl11;
            bl5 = bl16;
            n6 = n8;
            n7 = n12;
            bl6 = bl10;
            bl7 = bl15;
            bl8 = bl12;
        } while (true);
    }

    public boolean immutable() {
        return this.immutable;
    }

    public boolean isPrivate() {
        return this.isPrivate;
    }

    public boolean isPublic() {
        return this.isPublic;
    }

    public int maxAgeSeconds() {
        return this.maxAgeSeconds;
    }

    public int maxStaleSeconds() {
        return this.maxStaleSeconds;
    }

    public int minFreshSeconds() {
        return this.minFreshSeconds;
    }

    public boolean mustRevalidate() {
        return this.mustRevalidate;
    }

    public boolean noCache() {
        return this.noCache;
    }

    public boolean noStore() {
        return this.noStore;
    }

    public boolean noTransform() {
        return this.noTransform;
    }

    public boolean onlyIfCached() {
        return this.onlyIfCached;
    }

    public int sMaxAgeSeconds() {
        return this.sMaxAgeSeconds;
    }

    public String toString() {
        String string2 = this.headerValue;
        if (string2 != null) {
            return string2;
        }
        this.headerValue = string2 = this.headerValue();
        return string2;
    }
}

