/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  okhttp3.Address
 *  okhttp3.EventListener
 *  okhttp3.HttpUrl
 *  okhttp3.Route
 *  okhttp3.internal.Util
 */
package okhttp3.internal.connection;

import java.io.IOException;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.net.Proxy;
import java.net.ProxySelector;
import java.net.SocketAddress;
import java.net.SocketException;
import java.net.URI;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.List;
import java.util.NoSuchElementException;
import okhttp3.Address;
import okhttp3.Call;
import okhttp3.Dns;
import okhttp3.EventListener;
import okhttp3.HttpUrl;
import okhttp3.Route;
import okhttp3.internal.Util;
import okhttp3.internal.connection.RouteDatabase;

public final class RouteSelector {
    private final Address address;
    private final Call call;
    private final EventListener eventListener;
    private List<InetSocketAddress> inetSocketAddresses = Collections.emptyList();
    private int nextProxyIndex;
    private final List<Route> postponedRoutes = new ArrayList<Route>();
    private List<Proxy> proxies = Collections.emptyList();
    private final RouteDatabase routeDatabase;

    public RouteSelector(Address address, RouteDatabase routeDatabase, Call call, EventListener eventListener) {
        this.address = address;
        this.routeDatabase = routeDatabase;
        this.call = call;
        this.eventListener = eventListener;
        this.resetNextProxy(address.url(), address.proxy());
    }

    static String getHostString(InetSocketAddress inetSocketAddress) {
        InetAddress inetAddress = inetSocketAddress.getAddress();
        if (inetAddress == null) {
            return inetSocketAddress.getHostName();
        }
        return inetAddress.getHostAddress();
    }

    private boolean hasNextProxy() {
        if (this.nextProxyIndex < this.proxies.size()) {
            return true;
        }
        return false;
    }

    private Proxy nextProxy() throws IOException {
        if (!this.hasNextProxy()) {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("No route to ");
            stringBuilder.append(this.address.url().host());
            stringBuilder.append("; exhausted proxy configurations: ");
            stringBuilder.append(this.proxies);
            throw new SocketException(stringBuilder.toString());
        }
        Object object = this.proxies;
        int n = this.nextProxyIndex;
        this.nextProxyIndex = n + 1;
        object = object.get(n);
        this.resetNextInetSocketAddress((Proxy)object);
        return object;
    }

    private void resetNextInetSocketAddress(Proxy object) throws IOException {
        int n;
        Object object2;
        this.inetSocketAddresses = new ArrayList<InetSocketAddress>();
        if (object.type() != Proxy.Type.DIRECT && object.type() != Proxy.Type.SOCKS) {
            object2 = object.address();
            if (!(object2 instanceof InetSocketAddress)) {
                object = new StringBuilder();
                object.append("Proxy.address() is not an InetSocketAddress: ");
                object.append(object2.getClass());
                throw new IllegalArgumentException(object.toString());
            }
            InetSocketAddress inetSocketAddress = (InetSocketAddress)object2;
            object2 = RouteSelector.getHostString(inetSocketAddress);
            n = inetSocketAddress.getPort();
        } else {
            object2 = this.address.url().host();
            n = this.address.url().port();
        }
        if (n >= 1 && n <= 65535) {
            if (object.type() == Proxy.Type.SOCKS) {
                this.inetSocketAddresses.add(InetSocketAddress.createUnresolved((String)object2, n));
                return;
            }
            this.eventListener.dnsStart(this.call, (String)object2);
            object = this.address.dns().lookup((String)object2);
            if (object.isEmpty()) {
                object = new StringBuilder();
                object.append(this.address.dns());
                object.append(" returned no addresses for ");
                object.append((String)object2);
                throw new UnknownHostException(object.toString());
            }
            this.eventListener.dnsEnd(this.call, (String)object2, (List)object);
            int n2 = object.size();
            for (int i = 0; i < n2; ++i) {
                object2 = (InetAddress)object.get(i);
                this.inetSocketAddresses.add(new InetSocketAddress((InetAddress)object2, n));
            }
            return;
        }
        object = new StringBuilder();
        object.append("No route to ");
        object.append((String)object2);
        object.append(":");
        object.append(n);
        object.append("; port is out of range");
        throw new SocketException(object.toString());
    }

    private void resetNextProxy(HttpUrl object, Proxy proxy) {
        if (proxy != null) {
            this.proxies = Collections.singletonList(proxy);
        } else {
            object = this.address.proxySelector().select(object.uri());
            object = object != null && !object.isEmpty() ? Util.immutableList((List)object) : Util.immutableList((Object[])new Proxy[]{Proxy.NO_PROXY});
            this.proxies = object;
        }
        this.nextProxyIndex = 0;
    }

    public void connectFailed(Route route, IOException iOException) {
        if (route.proxy().type() != Proxy.Type.DIRECT && this.address.proxySelector() != null) {
            this.address.proxySelector().connectFailed(this.address.url().uri(), route.proxy().address(), iOException);
        }
        this.routeDatabase.failed(route);
    }

    public boolean hasNext() {
        if (!this.hasNextProxy() && this.postponedRoutes.isEmpty()) {
            return false;
        }
        return true;
    }

    public Selection next() throws IOException {
        if (!this.hasNext()) {
            throw new NoSuchElementException();
        }
        ArrayList<Route> arrayList = new ArrayList<Route>();
        while (this.hasNextProxy()) {
            Proxy proxy = this.nextProxy();
            int n = this.inetSocketAddresses.size();
            for (int i = 0; i < n; ++i) {
                Route route = new Route(this.address, proxy, this.inetSocketAddresses.get(i));
                if (this.routeDatabase.shouldPostpone(route)) {
                    this.postponedRoutes.add(route);
                    continue;
                }
                arrayList.add(route);
            }
            if (arrayList.isEmpty()) continue;
        }
        if (arrayList.isEmpty()) {
            arrayList.addAll(this.postponedRoutes);
            this.postponedRoutes.clear();
        }
        return new Selection(arrayList);
    }

    public static final class Selection {
        private int nextRouteIndex = 0;
        private final List<Route> routes;

        Selection(List<Route> list) {
            this.routes = list;
        }

        public List<Route> getAll() {
            return new ArrayList<Route>(this.routes);
        }

        public boolean hasNext() {
            if (this.nextRouteIndex < this.routes.size()) {
                return true;
            }
            return false;
        }

        public Route next() {
            if (!this.hasNext()) {
                throw new NoSuchElementException();
            }
            List<Route> list = this.routes;
            int n = this.nextRouteIndex;
            this.nextRouteIndex = n + 1;
            return list.get(n);
        }
    }

}

