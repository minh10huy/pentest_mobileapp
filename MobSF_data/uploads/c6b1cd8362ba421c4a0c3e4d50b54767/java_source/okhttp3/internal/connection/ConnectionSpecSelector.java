/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  okhttp3.ConnectionSpec
 */
package okhttp3.internal.connection;

import java.io.IOException;
import java.io.InterruptedIOException;
import java.net.ProtocolException;
import java.net.UnknownServiceException;
import java.security.cert.CertificateException;
import java.util.Arrays;
import java.util.List;
import javax.net.ssl.SSLHandshakeException;
import javax.net.ssl.SSLPeerUnverifiedException;
import javax.net.ssl.SSLProtocolException;
import javax.net.ssl.SSLSocket;
import okhttp3.ConnectionSpec;
import okhttp3.internal.Internal;

public final class ConnectionSpecSelector {
    private final List<ConnectionSpec> connectionSpecs;
    private boolean isFallback;
    private boolean isFallbackPossible;
    private int nextModeIndex = 0;

    public ConnectionSpecSelector(List<ConnectionSpec> list) {
        this.connectionSpecs = list;
    }

    private boolean isFallbackPossible(SSLSocket sSLSocket) {
        for (int i = this.nextModeIndex; i < this.connectionSpecs.size(); ++i) {
            if (!this.connectionSpecs.get(i).isCompatible(sSLSocket)) continue;
            return true;
        }
        return false;
    }

    public ConnectionSpec configureSecureSocket(SSLSocket sSLSocket) throws IOException {
        Object object;
        block2 : {
            int n = this.connectionSpecs.size();
            for (int i = this.nextModeIndex; i < n; ++i) {
                object = this.connectionSpecs.get(i);
                if (!object.isCompatible(sSLSocket)) continue;
                this.nextModeIndex = i + 1;
                break block2;
            }
            object = null;
        }
        if (object == null) {
            object = new StringBuilder();
            object.append("Unable to find acceptable protocols. isFallback=");
            object.append(this.isFallback);
            object.append(", modes=");
            object.append(this.connectionSpecs);
            object.append(", supported protocols=");
            object.append(Arrays.toString(sSLSocket.getEnabledProtocols()));
            throw new UnknownServiceException(object.toString());
        }
        this.isFallbackPossible = this.isFallbackPossible(sSLSocket);
        Internal.instance.apply((ConnectionSpec)object, sSLSocket, this.isFallback);
        return object;
    }

    public boolean connectionFailed(IOException iOException) {
        boolean bl = true;
        this.isFallback = true;
        if (!this.isFallbackPossible) {
            return false;
        }
        if (iOException instanceof ProtocolException) {
            return false;
        }
        if (iOException instanceof InterruptedIOException) {
            return false;
        }
        boolean bl2 = iOException instanceof SSLHandshakeException;
        if (bl2 && iOException.getCause() instanceof CertificateException) {
            return false;
        }
        if (iOException instanceof SSLPeerUnverifiedException) {
            return false;
        }
        if (!bl2) {
            if (iOException instanceof SSLProtocolException) {
                return true;
            }
            bl = false;
        }
        return bl;
    }
}

