/*
 * Decompiled with CFR 0_132.
 */
package okhttp3.internal.http2;

import java.util.Arrays;

public final class Settings {
    static final int COUNT = 10;
    static final int DEFAULT_INITIAL_WINDOW_SIZE = 65535;
    static final int ENABLE_PUSH = 2;
    static final int HEADER_TABLE_SIZE = 1;
    static final int INITIAL_WINDOW_SIZE = 7;
    static final int MAX_CONCURRENT_STREAMS = 4;
    static final int MAX_FRAME_SIZE = 5;
    static final int MAX_HEADER_LIST_SIZE = 6;
    private int set;
    private final int[] values = new int[10];

    void clear() {
        this.set = 0;
        Arrays.fill(this.values, 0);
    }

    int get(int n) {
        return this.values[n];
    }

    boolean getEnablePush(boolean bl) {
        int n = this.set;
        boolean bl2 = false;
        n = (n & 4) != 0 ? this.values[2] : (bl ? 1 : 0);
        bl = bl2;
        if (n == 1) {
            bl = true;
        }
        return bl;
    }

    int getHeaderTableSize() {
        if ((this.set & 2) != 0) {
            return this.values[1];
        }
        return -1;
    }

    int getInitialWindowSize() {
        if ((this.set & 128) != 0) {
            return this.values[7];
        }
        return 65535;
    }

    int getMaxConcurrentStreams(int n) {
        if ((this.set & 16) != 0) {
            n = this.values[4];
        }
        return n;
    }

    int getMaxFrameSize(int n) {
        if ((this.set & 32) != 0) {
            n = this.values[5];
        }
        return n;
    }

    int getMaxHeaderListSize(int n) {
        if ((this.set & 64) != 0) {
            n = this.values[6];
        }
        return n;
    }

    boolean isSet(int n) {
        if ((1 << n & this.set) != 0) {
            return true;
        }
        return false;
    }

    void merge(Settings settings) {
        for (int i = 0; i < 10; ++i) {
            if (!settings.isSet(i)) continue;
            this.set(i, settings.get(i));
        }
    }

    Settings set(int n, int n2) {
        if (n >= 0) {
            if (n >= this.values.length) {
                return this;
            }
            this.set = 1 << n | this.set;
            this.values[n] = n2;
            return this;
        }
        return this;
    }

    int size() {
        return Integer.bitCount(this.set);
    }
}

