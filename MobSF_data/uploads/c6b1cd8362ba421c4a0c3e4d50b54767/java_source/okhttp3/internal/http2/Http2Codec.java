/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  okhttp3.EventListener
 *  okhttp3.Headers
 *  okhttp3.HttpUrl
 *  okhttp3.Interceptor$Chain
 *  okhttp3.OkHttpClient
 *  okhttp3.Request
 *  okhttp3.RequestBody
 *  okhttp3.Response
 *  okhttp3.Response$Builder
 *  okhttp3.ResponseBody
 *  okhttp3.internal.Util
 *  okhttp3.internal.http.RealResponseBody
 *  okio.Buffer
 *  okio.BufferedSource
 *  okio.ByteString
 *  okio.Sink
 *  okio.Source
 *  okio.Timeout
 */
package okhttp3.internal.http2;

import java.io.IOException;
import java.net.ProtocolException;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import java.util.concurrent.TimeUnit;
import okhttp3.Call;
import okhttp3.EventListener;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.Interceptor;
import okhttp3.OkHttpClient;
import okhttp3.Protocol;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import okhttp3.ResponseBody;
import okhttp3.internal.Internal;
import okhttp3.internal.Util;
import okhttp3.internal.connection.StreamAllocation;
import okhttp3.internal.http.HttpCodec;
import okhttp3.internal.http.HttpHeaders;
import okhttp3.internal.http.RealResponseBody;
import okhttp3.internal.http.RequestLine;
import okhttp3.internal.http.StatusLine;
import okhttp3.internal.http2.ErrorCode;
import okhttp3.internal.http2.Header;
import okhttp3.internal.http2.Http2Connection;
import okhttp3.internal.http2.Http2Stream;
import okio.Buffer;
import okio.BufferedSource;
import okio.ByteString;
import okio.ForwardingSource;
import okio.Okio;
import okio.Sink;
import okio.Source;
import okio.Timeout;

public final class Http2Codec
implements HttpCodec {
    private static final ByteString CONNECTION = ByteString.encodeUtf8((String)"connection");
    private static final ByteString ENCODING;
    private static final ByteString HOST;
    private static final List<ByteString> HTTP_2_SKIPPED_REQUEST_HEADERS;
    private static final List<ByteString> HTTP_2_SKIPPED_RESPONSE_HEADERS;
    private static final ByteString KEEP_ALIVE;
    private static final ByteString PROXY_CONNECTION;
    private static final ByteString TE;
    private static final ByteString TRANSFER_ENCODING;
    private static final ByteString UPGRADE;
    private final Interceptor chain;
    private final OkHttpClient client;
    private final Http2Connection connection;
    private Http2Stream stream;
    final StreamAllocation streamAllocation;

    static {
        HOST = ByteString.encodeUtf8((String)"host");
        KEEP_ALIVE = ByteString.encodeUtf8((String)"keep-alive");
        PROXY_CONNECTION = ByteString.encodeUtf8((String)"proxy-connection");
        TRANSFER_ENCODING = ByteString.encodeUtf8((String)"transfer-encoding");
        TE = ByteString.encodeUtf8((String)"te");
        ENCODING = ByteString.encodeUtf8((String)"encoding");
        UPGRADE = ByteString.encodeUtf8((String)"upgrade");
        HTTP_2_SKIPPED_REQUEST_HEADERS = Util.immutableList((Object[])new ByteString[]{CONNECTION, HOST, KEEP_ALIVE, PROXY_CONNECTION, TE, TRANSFER_ENCODING, ENCODING, UPGRADE, Header.TARGET_METHOD, Header.TARGET_PATH, Header.TARGET_SCHEME, Header.TARGET_AUTHORITY});
        HTTP_2_SKIPPED_RESPONSE_HEADERS = Util.immutableList((Object[])new ByteString[]{CONNECTION, HOST, KEEP_ALIVE, PROXY_CONNECTION, TE, TRANSFER_ENCODING, ENCODING, UPGRADE});
    }

    public Http2Codec(OkHttpClient okHttpClient, Interceptor chain, StreamAllocation streamAllocation, Http2Connection http2Connection) {
        this.client = okHttpClient;
        this.chain = chain;
        this.streamAllocation = streamAllocation;
        this.connection = http2Connection;
    }

    public static List<Header> http2HeadersList(Request request) {
        Headers headers = request.headers();
        ArrayList<Header> arrayList = new ArrayList<Header>(headers.size() + 4);
        arrayList.add(new Header(Header.TARGET_METHOD, request.method()));
        arrayList.add(new Header(Header.TARGET_PATH, RequestLine.requestPath(request.url())));
        String string2 = request.header("Host");
        if (string2 != null) {
            arrayList.add(new Header(Header.TARGET_AUTHORITY, string2));
        }
        arrayList.add(new Header(Header.TARGET_SCHEME, request.url().scheme()));
        int n = headers.size();
        for (int i = 0; i < n; ++i) {
            request = ByteString.encodeUtf8((String)headers.name(i).toLowerCase(Locale.US));
            if (HTTP_2_SKIPPED_REQUEST_HEADERS.contains((Object)request)) continue;
            arrayList.add(new Header((ByteString)request, headers.value(i)));
        }
        return arrayList;
    }

    public static Response.Builder readHttp2HeadersList(List<Header> list) throws IOException {
        Headers.Builder builder2 = new Headers.Builder();
        int n = list.size();
        Header header = null;
        for (int i = 0; i < n; ++i) {
            Headers.Builder builder3;
            Object object = list.get(i);
            if (object == null) {
                object = header;
                builder3 = builder2;
                if (header != null) {
                    object = header;
                    builder3 = builder2;
                    if (header.code == 100) {
                        builder3 = new Headers.Builder();
                        object = null;
                    }
                }
            } else {
                ByteString byteString = object.name;
                String string2 = object.value.utf8();
                if (byteString.equals((Object)Header.RESPONSE_STATUS)) {
                    object = new StringBuilder();
                    object.append("HTTP/1.1 ");
                    object.append(string2);
                    object = StatusLine.parse(object.toString());
                    builder3 = builder2;
                } else {
                    object = header;
                    builder3 = builder2;
                    if (!HTTP_2_SKIPPED_RESPONSE_HEADERS.contains((Object)byteString)) {
                        Internal.instance.addLenient(builder2, byteString.utf8(), string2);
                        builder3 = builder2;
                        object = header;
                    }
                }
            }
            header = object;
            builder2 = builder3;
        }
        if (header == null) {
            throw new ProtocolException("Expected ':status' header not present");
        }
        return new Response.Builder().protocol(Protocol.HTTP_2).code(header.code).message(header.message).headers(builder2.build());
    }

    @Override
    public void cancel() {
        if (this.stream != null) {
            this.stream.closeLater(ErrorCode.CANCEL);
        }
    }

    @Override
    public Sink createRequestBody(Request request, long l) {
        return this.stream.getSink();
    }

    @Override
    public void finishRequest() throws IOException {
        this.stream.getSink().close();
    }

    @Override
    public void flushRequest() throws IOException {
        this.connection.flush();
    }

    @Override
    public ResponseBody openResponseBody(Response response) throws IOException {
        this.streamAllocation.eventListener.responseBodyStart(this.streamAllocation.call);
        return new RealResponseBody(response.header("Content-Type"), HttpHeaders.contentLength(response), Okio.buffer(new StreamFinishingSource(this.stream.getSource())));
    }

    @Override
    public Response.Builder readResponseHeaders(boolean bl) throws IOException {
        Response.Builder builder2 = Http2Codec.readHttp2HeadersList(this.stream.takeResponseHeaders());
        if (bl && Internal.instance.code(builder2) == 100) {
            return null;
        }
        return builder2;
    }

    @Override
    public void writeRequestHeaders(Request object) throws IOException {
        if (this.stream != null) {
            return;
        }
        boolean bl = object.body() != null;
        object = Http2Codec.http2HeadersList(object);
        this.stream = this.connection.newStream((List<Header>)object, bl);
        this.stream.readTimeout().timeout((long)this.chain.readTimeoutMillis(), TimeUnit.MILLISECONDS);
        this.stream.writeTimeout().timeout((long)this.chain.writeTimeoutMillis(), TimeUnit.MILLISECONDS);
    }

    class StreamFinishingSource
    extends ForwardingSource {
        long bytesRead;
        boolean completed;

        StreamFinishingSource(Source source) {
            super(source);
            this.completed = false;
            this.bytesRead = 0L;
        }

        private void endOfInput(IOException iOException) {
            if (this.completed) {
                return;
            }
            this.completed = true;
            Http2Codec.this.streamAllocation.streamFinished(false, Http2Codec.this, this.bytesRead, iOException);
        }

        @Override
        public void close() throws IOException {
            super.close();
            this.endOfInput(null);
        }

        @Override
        public long read(Buffer buffer, long l) throws IOException {
            block3 : {
                try {
                    l = this.delegate().read(buffer, l);
                    if (l <= 0L) break block3;
                }
                catch (IOException iOException) {
                    this.endOfInput(iOException);
                    throw iOException;
                }
                this.bytesRead += l;
            }
            return l;
        }
    }

}

