/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  okhttp3.internal.Util
 *  okio.ByteString
 */
package okhttp3.internal.http2;

import java.io.IOException;
import okhttp3.internal.Util;
import okio.ByteString;

public final class Http2 {
    static final String[] BINARY;
    static final ByteString CONNECTION_PREFACE;
    static final String[] FLAGS;
    static final byte FLAG_ACK = 1;
    static final byte FLAG_COMPRESSED = 32;
    static final byte FLAG_END_HEADERS = 4;
    static final byte FLAG_END_PUSH_PROMISE = 4;
    static final byte FLAG_END_STREAM = 1;
    static final byte FLAG_NONE = 0;
    static final byte FLAG_PADDED = 8;
    static final byte FLAG_PRIORITY = 32;
    private static final String[] FRAME_NAMES;
    static final int INITIAL_MAX_FRAME_SIZE = 16384;
    static final byte TYPE_CONTINUATION = 9;
    static final byte TYPE_DATA = 0;
    static final byte TYPE_GOAWAY = 7;
    static final byte TYPE_HEADERS = 1;
    static final byte TYPE_PING = 6;
    static final byte TYPE_PRIORITY = 2;
    static final byte TYPE_PUSH_PROMISE = 5;
    static final byte TYPE_RST_STREAM = 3;
    static final byte TYPE_SETTINGS = 4;
    static final byte TYPE_WINDOW_UPDATE = 8;

    static {
        String[] arrstring;
        String[] arrstring2;
        int n5;
        int n2;
        int n3;
        CONNECTION_PREFACE = ByteString.encodeUtf8((String)"PRI * HTTP/2.0\r\n\r\nSM\r\n\r\n");
        FRAME_NAMES = new String[]{"DATA", "HEADERS", "PRIORITY", "RST_STREAM", "SETTINGS", "PUSH_PROMISE", "PING", "GOAWAY", "WINDOW_UPDATE", "CONTINUATION"};
        FLAGS = new String[64];
        BINARY = new String[256];
        int n4 = 0;
        for (n2 = 0; n2 < BINARY.length; ++n2) {
            Http2.BINARY[n2] = Util.format((String)"%8s", (Object[])new Object[]{Integer.toBinaryString(n2)}).replace(' ', '0');
        }
        Http2.FLAGS[0] = "";
        Http2.FLAGS[1] = "END_STREAM";
        int[] arrn = new int[]{1};
        Http2.FLAGS[8] = "PADDED";
        for (int n5 : arrn) {
            arrstring = FLAGS;
            arrstring2 = new String[]();
            arrstring2.append(FLAGS[n5]);
            arrstring2.append("|PADDED");
            arrstring[n5 | 8] = arrstring2.toString();
        }
        Http2.FLAGS[4] = "END_HEADERS";
        Http2.FLAGS[32] = "PRIORITY";
        Http2.FLAGS[36] = "END_HEADERS|PRIORITY";
        String[] arrstring3 = arrstring = new int[3];
        arrstring3[0] = (String)4;
        arrstring3[1] = (String)32;
        arrstring3[2] = (String)36;
        n5 = arrstring.length;
        n2 = 0;
        do {
            if (n2 >= n5) break;
            String string2 = arrstring[n2];
            int n6 = arrn.length;
            for (n3 = 0; n3 < n6; ++n3) {
                int n7 = arrn[n3];
                arrstring2 = FLAGS;
                int n8 = n7 | string2;
                StringBuilder stringBuilder = new StringBuilder();
                stringBuilder.append(FLAGS[n7]);
                stringBuilder.append('|');
                stringBuilder.append(FLAGS[string2]);
                arrstring2[n8] = stringBuilder.toString();
                arrstring2 = FLAGS;
                stringBuilder = new StringBuilder();
                stringBuilder.append(FLAGS[n7]);
                stringBuilder.append('|');
                stringBuilder.append(FLAGS[string2]);
                stringBuilder.append("|PADDED");
                arrstring2[n8 | 8] = stringBuilder.toString();
            }
            ++n2;
        } while (true);
        for (n3 = n4; n3 < FLAGS.length; ++n3) {
            if (FLAGS[n3] != null) continue;
            Http2.FLAGS[n3] = BINARY[n3];
        }
    }

    private Http2() {
    }

    static String formatFlags(byte by, byte by2) {
        String string2;
        if (by2 == 0) {
            return "";
        }
        switch (by) {
            default: {
                string2 = by2 < FLAGS.length ? FLAGS[by2] : BINARY[by2];
            }
            case 4: 
            case 6: {
                if (by2 == 1) {
                    return "ACK";
                }
                return BINARY[by2];
            }
            case 2: 
            case 3: 
            case 7: 
            case 8: {
                return BINARY[by2];
            }
        }
        if (by == 5 && (by2 & 4) != 0) {
            return string2.replace("HEADERS", "PUSH_PROMISE");
        }
        if (by == 0 && (by2 & 32) != 0) {
            return string2.replace("PRIORITY", "COMPRESSED");
        }
        return string2;
    }

    static String frameLog(boolean bl, int n, int n2, byte by, byte by2) {
        String string2 = by < FRAME_NAMES.length ? FRAME_NAMES[by] : Util.format((String)"0x%02x", (Object[])new Object[]{by});
        String string3 = Http2.formatFlags(by, by2);
        String string4 = bl ? "<<" : ">>";
        return Util.format((String)"%s 0x%08x %5d %-13s %s", (Object[])new Object[]{string4, n, n2, string2, string3});
    }

    static /* varargs */ IllegalArgumentException illegalArgument(String string2, Object ... arrobject) {
        throw new IllegalArgumentException(Util.format((String)string2, (Object[])arrobject));
    }

    static /* varargs */ IOException ioException(String string2, Object ... arrobject) throws IOException {
        throw new IOException(Util.format((String)string2, (Object[])arrobject));
    }
}

