/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  okhttp3.internal.Util
 *  okio.Buffer
 *  okio.BufferedSink
 *  okio.ByteString
 */
package okhttp3.internal.http2;

import java.io.Closeable;
import java.io.IOException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import okhttp3.internal.Util;
import okhttp3.internal.http2.ErrorCode;
import okhttp3.internal.http2.Header;
import okhttp3.internal.http2.Hpack;
import okhttp3.internal.http2.Http2;
import okhttp3.internal.http2.Settings;
import okio.Buffer;
import okio.BufferedSink;
import okio.ByteString;

final class Http2Writer
implements Closeable {
    private static final Logger logger = Logger.getLogger(Http2.class.getName());
    private final boolean client;
    private boolean closed;
    private final Buffer hpackBuffer;
    final Hpack.Writer hpackWriter;
    private int maxFrameSize;
    private final BufferedSink sink;

    Http2Writer(BufferedSink bufferedSink, boolean bl) {
        this.sink = bufferedSink;
        this.client = bl;
        this.hpackBuffer = new Buffer();
        this.hpackWriter = new Hpack.Writer(this.hpackBuffer);
        this.maxFrameSize = 16384;
    }

    private void writeContinuationFrames(int n, long l) throws IOException {
        while (l > 0L) {
            int n2;
            long l2;
            byte by = (l -= (l2 = (long)(n2 = (int)Math.min((long)this.maxFrameSize, l)))) == 0L ? (byte)4 : 0;
            this.frameHeader(n, n2, (byte)9, by);
            this.sink.write(this.hpackBuffer, l2);
        }
    }

    private static void writeMedium(BufferedSink bufferedSink, int n) throws IOException {
        bufferedSink.writeByte(n >>> 16 & 255);
        bufferedSink.writeByte(n >>> 8 & 255);
        bufferedSink.writeByte(n & 255);
    }

    public void applyAndAckSettings(Settings settings) throws IOException {
        synchronized (this) {
            if (this.closed) {
                throw new IOException("closed");
            }
            this.maxFrameSize = settings.getMaxFrameSize(this.maxFrameSize);
            if (settings.getHeaderTableSize() != -1) {
                this.hpackWriter.setHeaderTableSizeSetting(settings.getHeaderTableSize());
            }
            this.frameHeader(0, 0, (byte)4, (byte)1);
            this.sink.flush();
            return;
        }
    }

    @Override
    public void close() throws IOException {
        synchronized (this) {
            this.closed = true;
            this.sink.close();
            return;
        }
    }

    public void connectionPreface() throws IOException {
        synchronized (this) {
            block6 : {
                if (this.closed) {
                    throw new IOException("closed");
                }
                boolean bl = this.client;
                if (bl) break block6;
                return;
            }
            if (logger.isLoggable(Level.FINE)) {
                logger.fine(Util.format((String)">> CONNECTION %s", (Object[])new Object[]{Http2.CONNECTION_PREFACE.hex()}));
            }
            this.sink.write(Http2.CONNECTION_PREFACE.toByteArray());
            this.sink.flush();
            return;
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public void data(boolean bl, int n, Buffer buffer, int n2) throws IOException {
        synchronized (this) {
            void var4_4;
            if (this.closed) {
                throw new IOException("closed");
            }
            byte by = 0;
            if (bl) {
                by = (byte)(true ? 1 : 0);
            }
            this.dataFrame(n, by, buffer, (int)var4_4);
            return;
        }
    }

    void dataFrame(int n, byte by, Buffer buffer, int n2) throws IOException {
        this.frameHeader(n, n2, (byte)0, by);
        if (n2 > 0) {
            this.sink.write(buffer, (long)n2);
        }
    }

    public void flush() throws IOException {
        synchronized (this) {
            if (this.closed) {
                throw new IOException("closed");
            }
            this.sink.flush();
            return;
        }
    }

    public void frameHeader(int n, int n2, byte by, byte by2) throws IOException {
        if (logger.isLoggable(Level.FINE)) {
            logger.fine(Http2.frameLog(false, n, n2, by, by2));
        }
        if (n2 > this.maxFrameSize) {
            throw Http2.illegalArgument("FRAME_SIZE_ERROR length > %d: %d", this.maxFrameSize, n2);
        }
        if ((Integer.MIN_VALUE & n) != 0) {
            throw Http2.illegalArgument("reserved bit set: %s", n);
        }
        Http2Writer.writeMedium(this.sink, n2);
        this.sink.writeByte(by & 255);
        this.sink.writeByte(by2 & 255);
        this.sink.writeInt(n & Integer.MAX_VALUE);
    }

    public void goAway(int n, ErrorCode errorCode, byte[] arrby) throws IOException {
        synchronized (this) {
            if (this.closed) {
                throw new IOException("closed");
            }
            if (errorCode.httpCode == -1) {
                throw Http2.illegalArgument("errorCode.httpCode == -1", new Object[0]);
            }
            this.frameHeader(0, arrby.length + 8, (byte)7, (byte)0);
            this.sink.writeInt(n);
            this.sink.writeInt(errorCode.httpCode);
            if (arrby.length > 0) {
                this.sink.write(arrby);
            }
            this.sink.flush();
            return;
        }
    }

    public void headers(int n, List<Header> list) throws IOException {
        synchronized (this) {
            if (this.closed) {
                throw new IOException("closed");
            }
            this.headers(false, n, list);
            return;
        }
    }

    void headers(boolean bl, int n, List<Header> list) throws IOException {
        if (this.closed) {
            throw new IOException("closed");
        }
        this.hpackWriter.writeHeaders(list);
        long l = this.hpackBuffer.size();
        int n2 = (int)Math.min((long)this.maxFrameSize, l);
        long l2 = n2;
        byte by = l == l2 ? (byte)4 : 0;
        byte by2 = by;
        if (bl) {
            by2 = (byte)(by | 1);
        }
        this.frameHeader(n, n2, (byte)1, by2);
        this.sink.write(this.hpackBuffer, l2);
        if (l > l2) {
            this.writeContinuationFrames(n, l - l2);
        }
    }

    public int maxDataLength() {
        return this.maxFrameSize;
    }

    public void ping(boolean bl, int n, int n2) throws IOException {
        RuntimeException runtimeException;
        super("d2j fail translate: java.lang.RuntimeException: can not merge I and Z\n\tat com.googlecode.dex2jar.ir.TypeClass.merge(TypeClass.java:100)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeRef.updateTypeClass(TypeTransformer.java:174)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.copyTypes(TypeTransformer.java:311)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.fixTypes(TypeTransformer.java:226)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.analyze(TypeTransformer.java:207)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer.transform(TypeTransformer.java:44)\n\tat com.googlecode.d2j.dex.Dex2jar$2.optimize(Dex2jar.java:162)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertCode(Dex2Asm.java:414)\n\tat com.googlecode.d2j.dex.ExDex2Asm.convertCode(ExDex2Asm.java:42)\n\tat com.googlecode.d2j.dex.Dex2jar$2.convertCode(Dex2jar.java:128)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertMethod(Dex2Asm.java:509)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertClass(Dex2Asm.java:406)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertDex(Dex2Asm.java:422)\n\tat com.googlecode.d2j.dex.Dex2jar.doTranslate(Dex2jar.java:172)\n\tat com.googlecode.d2j.dex.Dex2jar.to(Dex2jar.java:272)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.doCommandLine(Dex2jarCmd.java:108)\n\tat com.googlecode.dex2jar.tools.BaseCmd.doMain(BaseCmd.java:288)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.main(Dex2jarCmd.java:32)\n");
        throw runtimeException;
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public void pushPromise(int n, int n2, List<Header> list) throws IOException {
        synchronized (this) {
            if (this.closed) {
                throw new IOException("closed");
            }
            this.hpackWriter.writeHeaders(list);
            long l = this.hpackBuffer.size();
            int n3 = (int)Math.min((long)(this.maxFrameSize - 4), l);
            long l2 = n3;
            byte by = l == l2 ? (byte)4 : 0;
            this.frameHeader(n, n3 + 4, (byte)5, by);
            this.sink.writeInt(n2 & Integer.MAX_VALUE);
            this.sink.write(this.hpackBuffer, l2);
            if (l > l2) {
                this.writeContinuationFrames(n, l - l2);
            }
            return;
        }
    }

    public void rstStream(int n, ErrorCode errorCode) throws IOException {
        synchronized (this) {
            if (this.closed) {
                throw new IOException("closed");
            }
            if (errorCode.httpCode == -1) {
                throw new IllegalArgumentException();
            }
            this.frameHeader(n, 4, (byte)3, (byte)0);
            this.sink.writeInt(errorCode.httpCode);
            this.sink.flush();
            return;
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public void settings(Settings settings) throws IOException {
        synchronized (this) {
            if (this.closed) {
                throw new IOException("closed");
            }
            int n = settings.size();
            int n2 = 0;
            this.frameHeader(0, n * 6, (byte)4, (byte)0);
            do {
                if (n2 >= 10) {
                    this.sink.flush();
                    return;
                }
                if (settings.isSet(n2)) {
                    n = n2 == 4 ? 3 : (n2 == 7 ? 4 : n2);
                    this.sink.writeShort(n);
                    this.sink.writeInt(settings.get(n2));
                }
                ++n2;
            } while (true);
        }
    }

    public void synReply(boolean bl, int n, List<Header> list) throws IOException {
        synchronized (this) {
            if (this.closed) {
                throw new IOException("closed");
            }
            this.headers(bl, n, list);
            return;
        }
    }

    public void synStream(boolean bl, int n, int n2, List<Header> list) throws IOException {
        synchronized (this) {
            if (this.closed) {
                throw new IOException("closed");
            }
            this.headers(bl, n, list);
            return;
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public void windowUpdate(int n, long l) throws IOException {
        synchronized (this) {
            if (this.closed) {
                throw new IOException("closed");
            }
            if (l != 0L && l <= Integer.MAX_VALUE) {
                this.frameHeader(n, 4, (byte)8, (byte)0);
                this.sink.writeInt((int)l);
                this.sink.flush();
                return;
            }
            throw Http2.illegalArgument("windowSizeIncrement == 0 || windowSizeIncrement > 0x7fffffffL: %s", l);
        }
    }
}

