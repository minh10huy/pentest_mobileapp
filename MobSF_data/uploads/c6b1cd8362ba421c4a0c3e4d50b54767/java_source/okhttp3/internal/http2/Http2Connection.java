/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  okhttp3.internal.Util
 *  okhttp3.internal.http2.Http2Connection$Listener
 *  okhttp3.internal.platform.Platform
 *  okio.Buffer
 *  okio.BufferedSink
 *  okio.BufferedSource
 *  okio.ByteString
 */
package okhttp3.internal.http2;

import java.io.Closeable;
import java.io.IOException;
import java.io.InterruptedIOException;
import java.net.InetSocketAddress;
import java.net.Socket;
import java.net.SocketAddress;
import java.util.Collection;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.RejectedExecutionException;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.SynchronousQueue;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import okhttp3.Protocol;
import okhttp3.internal.NamedRunnable;
import okhttp3.internal.Util;
import okhttp3.internal.http2.ConnectionShutdownException;
import okhttp3.internal.http2.ErrorCode;
import okhttp3.internal.http2.Header;
import okhttp3.internal.http2.Http2Connection;
import okhttp3.internal.http2.Http2Reader;
import okhttp3.internal.http2.Http2Stream;
import okhttp3.internal.http2.Http2Writer;
import okhttp3.internal.http2.PushObserver;
import okhttp3.internal.http2.Settings;
import okhttp3.internal.platform.Platform;
import okio.Buffer;
import okio.BufferedSink;
import okio.BufferedSource;
import okio.ByteString;
import okio.Okio;

public final class Http2Connection
implements Closeable {
    static final /* synthetic */ boolean $assertionsDisabled = false;
    private static final int OKHTTP_CLIENT_WINDOW_SIZE = 16777216;
    private static final ExecutorService listenerExecutor = new ThreadPoolExecutor(0, Integer.MAX_VALUE, 60L, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(), Util.threadFactory((String)"OkHttp Http2Connection", (boolean)true));
    private boolean awaitingPong;
    long bytesLeftInWriteWindow;
    final boolean client;
    final Set<Integer> currentPushRequests = new LinkedHashSet<Integer>();
    final String hostname;
    int lastGoodStreamId;
    final  listener;
    int nextStreamId;
    Settings okHttpSettings = new Settings();
    final Settings peerSettings = new Settings();
    private final ExecutorService pushExecutor;
    final PushObserver pushObserver;
    final ReaderRunnable readerRunnable;
    boolean receivedInitialPeerSettings = false;
    boolean shutdown;
    final Socket socket;
    final Map<Integer, Http2Stream> streams = new LinkedHashMap<Integer, Http2Stream>();
    long unacknowledgedBytesRead = 0L;
    final Http2Writer writer;
    private final ScheduledExecutorService writerExecutor;

    Http2Connection(Builder builder2) {
        this.pushObserver = builder2.pushObserver;
        this.client = builder2.client;
        this.listener = builder2.listener;
        int n = builder2.client ? 1 : 2;
        this.nextStreamId = n;
        if (builder2.client) {
            this.nextStreamId += 2;
        }
        if (builder2.client) {
            this.okHttpSettings.set(7, 16777216);
        }
        this.hostname = builder2.hostname;
        this.writerExecutor = new ScheduledThreadPoolExecutor(1, Util.threadFactory((String)Util.format((String)"OkHttp %s Writer", (Object[])new Object[]{this.hostname}), (boolean)false));
        if (builder2.pingIntervalMillis != 0) {
            this.writerExecutor.scheduleAtFixedRate(new PingRunnable(false, 0, 0), builder2.pingIntervalMillis, builder2.pingIntervalMillis, TimeUnit.MILLISECONDS);
        }
        this.pushExecutor = new ThreadPoolExecutor(0, 1, 60L, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>(), Util.threadFactory((String)Util.format((String)"OkHttp %s Push Observer", (Object[])new Object[]{this.hostname}), (boolean)true));
        this.peerSettings.set(7, 65535);
        this.peerSettings.set(5, 16384);
        this.bytesLeftInWriteWindow = this.peerSettings.getInitialWindowSize();
        this.socket = builder2.socket;
        this.writer = new Http2Writer(builder2.sink, this.client);
        this.readerRunnable = new ReaderRunnable(new Http2Reader(builder2.source, this.client));
    }

    private void failConnection() {
        try {
            this.close(ErrorCode.PROTOCOL_ERROR, ErrorCode.PROTOCOL_ERROR);
            return;
        }
        catch (IOException iOException) {
            return;
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Converted monitor instructions to comments
     * Lifted jumps to return sites
     */
    private Http2Stream newStream(int n, List<Header> list, boolean bl) throws IOException {
        boolean bl2 = bl ^ true;
        Http2Writer http2Writer = this.writer;
        // MONITORENTER : http2Writer
        // MONITORENTER : this
        if (this.nextStreamId > 1073741823) {
            this.shutdown(ErrorCode.REFUSED_STREAM);
        }
        if (this.shutdown) {
            throw new ConnectionShutdownException();
        }
        int n2 = this.nextStreamId;
        this.nextStreamId += 2;
        Http2Stream http2Stream = new Http2Stream(n2, this, bl2, false, list);
        boolean bl3 = !bl || this.bytesLeftInWriteWindow == 0L || http2Stream.bytesLeftInWriteWindow == 0L;
        if (http2Stream.isOpen()) {
            this.streams.put(n2, http2Stream);
        }
        // MONITOREXIT : this
        if (n == 0) {
            this.writer.synStream(bl2, n2, n, list);
        } else {
            if (this.client) {
                throw new IllegalArgumentException("client streams shouldn't have associated stream IDs");
            }
            this.writer.pushPromise(n, n2, list);
        }
        // MONITOREXIT : http2Writer
        if (!bl3) return http2Stream;
        this.writer.flush();
        return http2Stream;
    }

    void addBytesToWriteWindow(long l) {
        this.bytesLeftInWriteWindow += l;
        if (l > 0L) {
            this.notifyAll();
        }
    }

    void awaitPong() throws IOException, InterruptedException {
        synchronized (this) {
            while (this.awaitingPong) {
                this.wait();
            }
            return;
        }
    }

    @Override
    public void close() throws IOException {
        this.close(ErrorCode.NO_ERROR, ErrorCode.CANCEL);
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    void close(ErrorCode object, ErrorCode errorCode) throws IOException {
        block16 : {
            Http2Stream[] arrhttp2Stream = null;
            try {
                this.shutdown((ErrorCode)((Object)object));
                object = null;
            }
            catch (IOException iOException) {
                // empty catch block
            }
            synchronized (this) {
                if (!this.streams.isEmpty()) {
                    arrhttp2Stream = this.streams.values().toArray(new Http2Stream[this.streams.size()]);
                    this.streams.clear();
                }
            }
            Object object2 = object;
            if (arrhttp2Stream != null) {
                int n = arrhttp2Stream.length;
                int n2 = 0;
                do {
                    block15 : {
                        object2 = object;
                        if (n2 >= n) break;
                        object2 = arrhttp2Stream[n2];
                        try {
                            object2.close(errorCode);
                            object2 = object;
                        }
                        catch (IOException iOException) {
                            object2 = object;
                            if (object == null) break block15;
                            object2 = iOException;
                        }
                    }
                    ++n2;
                    object = object2;
                } while (true);
            }
            try {
                this.writer.close();
                object = object2;
            }
            catch (IOException iOException) {
                object = object2;
                if (object2 != null) break block16;
                object = iOException;
            }
        }
        try {
            this.socket.close();
        }
        catch (IOException iOException) {
            // empty catch block
        }
        this.writerExecutor.shutdown();
        this.pushExecutor.shutdown();
        if (object != null) {
            throw object;
        }
    }

    public void flush() throws IOException {
        this.writer.flush();
    }

    public Protocol getProtocol() {
        return Protocol.HTTP_2;
    }

    Http2Stream getStream(int n) {
        synchronized (this) {
            Http2Stream http2Stream = this.streams.get(n);
            return http2Stream;
        }
    }

    public boolean isShutdown() {
        synchronized (this) {
            boolean bl = this.shutdown;
            return bl;
        }
    }

    public int maxConcurrentStreams() {
        synchronized (this) {
            int n = this.peerSettings.getMaxConcurrentStreams(Integer.MAX_VALUE);
            return n;
        }
    }

    public Http2Stream newStream(List<Header> list, boolean bl) throws IOException {
        return this.newStream(0, list, bl);
    }

    public int openStreamCount() {
        synchronized (this) {
            int n = this.streams.size();
            return n;
        }
    }

    void pushDataLater(final int n, BufferedSource object, final int n2, final boolean bl) throws IOException {
        final Buffer buffer = new Buffer();
        long l = n2;
        object.require(l);
        object.read(buffer, l);
        if (buffer.size() != l) {
            object = new StringBuilder();
            object.append(buffer.size());
            object.append(" != ");
            object.append(n2);
            throw new IOException(object.toString());
        }
        this.pushExecutor.execute(new NamedRunnable("OkHttp %s Push Data[%s]", new Object[]{this.hostname, n}){

            /*
             * Enabled aggressive block sorting
             * Enabled unnecessary exception pruning
             * Enabled aggressive exception aggregation
             * Converted monitor instructions to comments
             * Lifted jumps to return sites
             */
            @Override
            public void execute() {
                try {
                    boolean bl2 = Http2Connection.this.pushObserver.onData(n, (BufferedSource)buffer, n2, bl);
                    if (bl2) {
                        Http2Connection.this.writer.rstStream(n, ErrorCode.CANCEL);
                    }
                    if (!bl2) {
                        if (!bl) return;
                    }
                    Http2Connection http2Connection = Http2Connection.this;
                    // MONITORENTER : http2Connection
                    Http2Connection.this.currentPushRequests.remove(n);
                }
                catch (IOException iOException) {
                    return;
                }
            }
        });
    }

    void pushHeadersLater(final int n, final List<Header> list, final boolean bl) {
        try {
            this.pushExecutor.execute(new NamedRunnable("OkHttp %s Push Headers[%s]", new Object[]{this.hostname, n}){

                /*
                 * Unable to fully structure code
                 * Enabled aggressive block sorting
                 * Enabled unnecessary exception pruning
                 * Enabled aggressive exception aggregation
                 * Converted monitor instructions to comments
                 * Lifted jumps to return sites
                 */
                @Override
                public void execute() {
                    var1_1 = Http2Connection.this.pushObserver.onHeaders(n, list, bl);
                    if (!var1_1) ** GOTO lbl5
                    try {
                        Http2Connection.this.writer.rstStream(n, ErrorCode.CANCEL);
lbl5: // 2 sources:
                        if (!var1_1) {
                            if (bl == false) return;
                        }
                        var2_2 = Http2Connection.this;
                        // MONITORENTER : var2_2
                        Http2Connection.this.currentPushRequests.remove(n);
                    }
                    catch (IOException var2_3) {
                        return;
                    }
                }
            });
            return;
        }
        catch (RejectedExecutionException rejectedExecutionException) {
            return;
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    void pushRequestLater(final int n, final List<Header> list) {
        synchronized (this) {
            if (this.currentPushRequests.contains(n)) {
                this.writeSynResetLater(n, ErrorCode.PROTOCOL_ERROR);
                return;
            }
            this.currentPushRequests.add(n);
        }
        try {
            this.pushExecutor.execute(new NamedRunnable("OkHttp %s Push Request[%s]", new Object[]{this.hostname, n}){

                /*
                 * Enabled aggressive block sorting
                 * Enabled unnecessary exception pruning
                 * Enabled aggressive exception aggregation
                 * Converted monitor instructions to comments
                 * Lifted jumps to return sites
                 */
                @Override
                public void execute() {
                    if (!Http2Connection.this.pushObserver.onRequest(n, list)) return;
                    try {
                        Http2Connection.this.writer.rstStream(n, ErrorCode.CANCEL);
                        Http2Connection http2Connection = Http2Connection.this;
                        // MONITORENTER : http2Connection
                        Http2Connection.this.currentPushRequests.remove(n);
                    }
                    catch (IOException iOException) {
                        return;
                    }
                }
            });
            return;
        }
        catch (RejectedExecutionException rejectedExecutionException) {
            return;
        }
    }

    void pushResetLater(final int n, final ErrorCode errorCode) {
        this.pushExecutor.execute(new NamedRunnable("OkHttp %s Push Reset[%s]", new Object[]{this.hostname, n}){

            /*
             * Enabled aggressive block sorting
             * Enabled unnecessary exception pruning
             * Enabled aggressive exception aggregation
             */
            @Override
            public void execute() {
                Http2Connection.this.pushObserver.onReset(n, errorCode);
                Http2Connection http2Connection = Http2Connection.this;
                synchronized (http2Connection) {
                    Http2Connection.this.currentPushRequests.remove(n);
                    return;
                }
            }
        });
    }

    public Http2Stream pushStream(int n, List<Header> list, boolean bl) throws IOException {
        if (this.client) {
            throw new IllegalStateException("Client cannot push requests.");
        }
        return this.newStream(n, list, bl);
    }

    boolean pushedStream(int n) {
        if (n != 0 && (n & 1) == 0) {
            return true;
        }
        return false;
    }

    Http2Stream removeStream(int n) {
        synchronized (this) {
            Http2Stream http2Stream = this.streams.remove(n);
            this.notifyAll();
            return http2Stream;
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public void setSettings(Settings settings) throws IOException {
        Http2Writer http2Writer = this.writer;
        synchronized (http2Writer) {
            synchronized (this) {
                if (this.shutdown) {
                    throw new ConnectionShutdownException();
                }
                this.okHttpSettings.merge(settings);
            }
            this.writer.settings(settings);
            return;
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public void shutdown(ErrorCode errorCode) throws IOException {
        Http2Writer http2Writer = this.writer;
        synchronized (http2Writer) {
            int n;
            synchronized (this) {
                if (this.shutdown) {
                    return;
                }
                this.shutdown = true;
                n = this.lastGoodStreamId;
            }
            this.writer.goAway(n, errorCode, Util.EMPTY_BYTE_ARRAY);
            return;
        }
    }

    public void start() throws IOException {
        this.start(true);
    }

    void start(boolean bl) throws IOException {
        if (bl) {
            this.writer.connectionPreface();
            this.writer.settings(this.okHttpSettings);
            int n = this.okHttpSettings.getInitialWindowSize();
            if (n != 65535) {
                this.writer.windowUpdate(0, n - 65535);
            }
        }
        new Thread(this.readerRunnable).start();
    }

    /*
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Converted monitor instructions to comments
     * Lifted jumps to return sites
     */
    public void writeData(int n, boolean bl, Buffer buffer, long l) throws IOException {
        long l2 = l;
        if (l == 0L) {
            this.writer.data(bl, n, buffer, 0);
            return;
        }
        while (l2 > 0L) {
            // MONITORENTER : this
            while (this.bytesLeftInWriteWindow <= 0L) {
                if (!this.streams.containsKey(n)) {
                    throw new IOException("stream closed");
                }
                this.wait();
            }
            int n2 = Math.min((int)Math.min(l2, this.bytesLeftInWriteWindow), this.writer.maxDataLength());
            l = this.bytesLeftInWriteWindow;
            long l3 = n2;
            this.bytesLeftInWriteWindow = l - l3;
            // MONITOREXIT : this
            Http2Writer http2Writer = this.writer;
            boolean bl2 = bl && (l2 -= l3) == 0L;
            http2Writer.data(bl2, n, buffer, n2);
        }
        return;
        {
            catch (InterruptedException interruptedException) {}
            throw new InterruptedIOException();
        }
        catch (Throwable throwable) {
            throw throwable;
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Converted monitor instructions to comments
     * Lifted jumps to return sites
     */
    void writePing(boolean bl, int n, int n2) {
        if (!bl) {
            // MONITORENTER : this
            boolean bl2 = this.awaitingPong;
            this.awaitingPong = true;
            // MONITOREXIT : this
            if (bl2) {
                this.failConnection();
                return;
            }
        }
        try {
            this.writer.ping(bl, n, n2);
            return;
        }
        catch (IOException iOException) {}
        this.failConnection();
    }

    void writePingAndAwaitPong() throws IOException, InterruptedException {
        this.writePing(false, 1330343787, -257978967);
        this.awaitPong();
    }

    void writeSynReply(int n, boolean bl, List<Header> list) throws IOException {
        this.writer.synReply(bl, n, list);
    }

    void writeSynReset(int n, ErrorCode errorCode) throws IOException {
        this.writer.rstStream(n, errorCode);
    }

    void writeSynResetLater(final int n, final ErrorCode errorCode) {
        try {
            this.writerExecutor.execute(new NamedRunnable("OkHttp %s stream %d", new Object[]{this.hostname, n}){

                /*
                 * Enabled aggressive block sorting
                 * Enabled unnecessary exception pruning
                 * Enabled aggressive exception aggregation
                 */
                @Override
                public void execute() {
                    try {
                        Http2Connection.this.writeSynReset(n, errorCode);
                        return;
                    }
                    catch (IOException iOException) {}
                    Http2Connection.this.failConnection();
                }
            });
            return;
        }
        catch (RejectedExecutionException rejectedExecutionException) {
            return;
        }
    }

    void writeWindowUpdateLater(final int n, final long l) {
        try {
            this.writerExecutor.execute(new NamedRunnable("OkHttp Window Update %s stream %d", new Object[]{this.hostname, n}){

                /*
                 * Enabled aggressive block sorting
                 * Enabled unnecessary exception pruning
                 * Enabled aggressive exception aggregation
                 */
                @Override
                public void execute() {
                    try {
                        Http2Connection.this.writer.windowUpdate(n, l);
                        return;
                    }
                    catch (IOException iOException) {}
                    Http2Connection.this.failConnection();
                }
            });
            return;
        }
        catch (RejectedExecutionException rejectedExecutionException) {
            return;
        }
    }

    public static class Builder {
        boolean client;
        String hostname;
         listener = .REFUSE_INCOMING_STREAMS;
        int pingIntervalMillis;
        PushObserver pushObserver = PushObserver.CANCEL;
        BufferedSink sink;
        Socket socket;
        BufferedSource source;

        public Builder(boolean bl) {
            this.client = bl;
        }

        public Http2Connection build() {
            return new Http2Connection(this);
        }

        public Builder listener( listener) {
            this.listener = listener;
            return this;
        }

        public Builder pingIntervalMillis(int n) {
            this.pingIntervalMillis = n;
            return this;
        }

        public Builder pushObserver(PushObserver pushObserver) {
            this.pushObserver = pushObserver;
            return this;
        }

        public Builder socket(Socket socket) throws IOException {
            return this.socket(socket, ((InetSocketAddress)socket.getRemoteSocketAddress()).getHostName(), Okio.buffer(Okio.source(socket)), Okio.buffer(Okio.sink(socket)));
        }

        public Builder socket(Socket socket, String string2, BufferedSource bufferedSource, BufferedSink bufferedSink) {
            this.socket = socket;
            this.hostname = string2;
            this.source = bufferedSource;
            this.sink = bufferedSink;
            return this;
        }
    }

    final class PingRunnable
    extends NamedRunnable {
        final int payload1;
        final int payload2;
        final boolean reply;

        PingRunnable(boolean bl, int n, int n2) {
            super("OkHttp %s ping %08x%08x", Http2Connection.this.hostname, n, n2);
            this.reply = bl;
            this.payload1 = n;
            this.payload2 = n2;
        }

        @Override
        public void execute() {
            Http2Connection.this.writePing(this.reply, this.payload1, this.payload2);
        }
    }

    class ReaderRunnable
    extends NamedRunnable
    implements Http2Reader.Handler {
        final Http2Reader reader;

        ReaderRunnable(Http2Reader http2Reader) {
            super("OkHttp %s", Http2Connection.this.hostname);
            this.reader = http2Reader;
        }

        private void applyAndAckSettings(final Settings settings) {
            try {
                Http2Connection.this.writerExecutor.execute(new NamedRunnable("OkHttp %s ACK Settings", new Object[]{Http2Connection.this.hostname}){

                    /*
                     * Enabled aggressive block sorting
                     * Enabled unnecessary exception pruning
                     * Enabled aggressive exception aggregation
                     */
                    @Override
                    public void execute() {
                        try {
                            Http2Connection.this.writer.applyAndAckSettings(settings);
                            return;
                        }
                        catch (IOException iOException) {}
                        Http2Connection.this.failConnection();
                    }
                });
                return;
            }
            catch (RejectedExecutionException rejectedExecutionException) {
                return;
            }
        }

        @Override
        public void ackSettings() {
        }

        @Override
        public void alternateService(int n, String string2, ByteString byteString, String string3, int n2, long l) {
        }

        @Override
        public void data(boolean bl, int n, BufferedSource bufferedSource, int n2) throws IOException {
            if (Http2Connection.this.pushedStream(n)) {
                Http2Connection.this.pushDataLater(n, bufferedSource, n2, bl);
                return;
            }
            Http2Stream http2Stream = Http2Connection.this.getStream(n);
            if (http2Stream == null) {
                Http2Connection.this.writeSynResetLater(n, ErrorCode.PROTOCOL_ERROR);
                bufferedSource.skip((long)n2);
                return;
            }
            http2Stream.receiveData(bufferedSource, n2);
            if (bl) {
                http2Stream.receiveFin();
            }
        }

        /*
         * WARNING - Removed back jump from a try to a catch block - possible behaviour change.
         * Unable to fully structure code
         * Enabled aggressive block sorting
         * Enabled unnecessary exception pruning
         * Enabled aggressive exception aggregation
         * Lifted jumps to return sites
         */
        @Override
        protected void execute() {
            block17 : {
                block16 : {
                    var3_1 = ErrorCode.INTERNAL_ERROR;
                    var5_2 = ErrorCode.INTERNAL_ERROR;
                    var2_3 /* !! */  = var3_1;
                    this.reader.readConnectionPreface(this);
                    do {
                        var2_3 /* !! */  = var3_1;
                    } while (this.reader.nextFrame(false, this));
                    var2_3 /* !! */  = var3_1;
                    var2_3 /* !! */  = var1_6 = ErrorCode.NO_ERROR;
                    var3_1 = ErrorCode.CANCEL;
                    try {
                        var4_12 = Http2Connection.this;
                        var2_3 /* !! */  = var3_1;
                        var3_1 = var4_12;
lbl17: // 2 sources:
                        var3_1.close(var1_6, var2_3 /* !! */ );
                    }
                    catch (IOException var1_11) {}
                    Util.closeQuietly((Closeable)this.reader);
                    return;
lbl23: // 1 sources:
                    var2_3 /* !! */  = var1_6;
                    ** GOTO lbl-1000
                    catch (Throwable var1_7) {
                        break block16;
                    }
                    catch (IOException var1_10) {
                        var2_3 /* !! */  = var3_1;
                    }
lbl-1000: // 2 sources:
                    {
                        var2_3 /* !! */  = var1_6 = ErrorCode.PROTOCOL_ERROR;
                    }
                    try {
                        var4_13 = ErrorCode.PROTOCOL_ERROR;
                        var3_1 = Http2Connection.this;
                        var2_3 /* !! */  = var4_13;
                        ** GOTO lbl17
                    }
                    catch (Throwable var1_8) {
                        // empty catch block
                    }
                }
                try {
                    Http2Connection.this.close(var2_3 /* !! */ , var5_2);
                    break block17;
                }
                catch (IOException var2_5) {}
                catch (IOException var2_4) {
                    ** GOTO lbl23
                }
            }
            Util.closeQuietly((Closeable)this.reader);
            throw var1_9;
        }

        /*
         * Enabled aggressive block sorting
         * Enabled unnecessary exception pruning
         * Enabled aggressive exception aggregation
         */
        @Override
        public void goAway(int n, ErrorCode object, ByteString arrhttp2Stream) {
            arrhttp2Stream.size();
            object = Http2Connection.this;
            synchronized (object) {
                arrhttp2Stream = Http2Connection.this.streams.values().toArray(new Http2Stream[Http2Connection.this.streams.size()]);
                Http2Connection.this.shutdown = true;
            }
            int n2 = arrhttp2Stream.length;
            int n3 = 0;
            while (n3 < n2) {
                object = arrhttp2Stream[n3];
                if (object.getId() > n && object.isLocallyInitiated()) {
                    object.receiveRstStream(ErrorCode.REFUSED_STREAM);
                    Http2Connection.this.removeStream(object.getId());
                }
                ++n3;
            }
        }

        /*
         * Enabled aggressive block sorting
         * Enabled unnecessary exception pruning
         * Enabled aggressive exception aggregation
         */
        @Override
        public void headers(boolean bl, int n, int n2, List<Header> object) {
            Http2Stream http2Stream;
            if (Http2Connection.this.pushedStream(n)) {
                Http2Connection.this.pushHeadersLater(n, (List<Header>)object, bl);
                return;
            }
            Http2Connection http2Connection = Http2Connection.this;
            synchronized (http2Connection) {
                http2Stream = Http2Connection.this.getStream(n);
                if (http2Stream == null) {
                    if (Http2Connection.this.shutdown) {
                        return;
                    }
                    if (n <= Http2Connection.this.lastGoodStreamId) {
                        return;
                    }
                    if (n % 2 == Http2Connection.this.nextStreamId % 2) {
                        return;
                    }
                    object = new Http2Stream(n, Http2Connection.this, false, bl, (List<Header>)object);
                    Http2Connection.this.lastGoodStreamId = n;
                    Http2Connection.this.streams.put(n, (Http2Stream)object);
                    listenerExecutor.execute(new NamedRunnable("OkHttp %s stream %d", new Object[]{Http2Connection.this.hostname, n}, (Http2Stream)object){
                        final /* synthetic */ Http2Stream val$newStream;
                        {
                            this.val$newStream = http2Stream;
                            super(string2, arrobject);
                        }

                        @Override
                        public void execute() {
                            try {
                                Http2Connection.this.listener.onStream(this.val$newStream);
                                return;
                            }
                            catch (IOException iOException) {
                                Platform platform = Platform.get();
                                StringBuilder stringBuilder = new StringBuilder();
                                stringBuilder.append("Http2Connection.Listener failure for ");
                                stringBuilder.append(Http2Connection.this.hostname);
                                platform.log(4, stringBuilder.toString(), (Throwable)iOException);
                                try {
                                    this.val$newStream.close(ErrorCode.PROTOCOL_ERROR);
                                    return;
                                }
                                catch (IOException iOException2) {
                                    return;
                                }
                            }
                        }
                    });
                    return;
                }
            }
            http2Stream.receiveHeaders((List<Header>)object);
            if (bl) {
                http2Stream.receiveFin();
            }
        }

        /*
         * Enabled aggressive block sorting
         * Enabled unnecessary exception pruning
         * Enabled aggressive exception aggregation
         */
        @Override
        public void ping(boolean bl, int n, int n2) {
            if (bl) {
                Http2Connection http2Connection = Http2Connection.this;
                synchronized (http2Connection) {
                    Http2Connection.this.awaitingPong = false;
                    Http2Connection.this.notifyAll();
                    return;
                }
            }
            try {
                Http2Connection.this.writerExecutor.execute(new PingRunnable(true, n, n2));
                return;
            }
            catch (RejectedExecutionException rejectedExecutionException) {
                return;
            }
        }

        @Override
        public void priority(int n, int n2, int n3, boolean bl) {
        }

        @Override
        public void pushPromise(int n, int n2, List<Header> list) {
            Http2Connection.this.pushRequestLater(n2, list);
        }

        @Override
        public void rstStream(int n, ErrorCode errorCode) {
            if (Http2Connection.this.pushedStream(n)) {
                Http2Connection.this.pushResetLater(n, errorCode);
                return;
            }
            Http2Stream http2Stream = Http2Connection.this.removeStream(n);
            if (http2Stream != null) {
                http2Stream.receiveRstStream(errorCode);
            }
        }

        /*
         * Enabled aggressive block sorting
         * Enabled unnecessary exception pruning
         * Enabled aggressive exception aggregation
         * Converted monitor instructions to comments
         * Lifted jumps to return sites
         */
        @Override
        public void settings(boolean bl, Settings arrhttp2Stream) {
            long l;
            Object object = Http2Connection.this;
            // MONITORENTER : object
            int n = Http2Connection.this.peerSettings.getInitialWindowSize();
            if (bl) {
                Http2Connection.this.peerSettings.clear();
            }
            Http2Connection.this.peerSettings.merge((Settings)arrhttp2Stream);
            this.applyAndAckSettings((Settings)arrhttp2Stream);
            int n2 = Http2Connection.this.peerSettings.getInitialWindowSize();
            arrhttp2Stream = null;
            if (n2 != -1 && n2 != n) {
                long l2 = n2 - n;
                if (!Http2Connection.this.receivedInitialPeerSettings) {
                    Http2Connection.this.addBytesToWriteWindow(l2);
                    Http2Connection.this.receivedInitialPeerSettings = true;
                }
                l = l2;
                if (!Http2Connection.this.streams.isEmpty()) {
                    arrhttp2Stream = Http2Connection.this.streams.values().toArray(new Http2Stream[Http2Connection.this.streams.size()]);
                    l = l2;
                }
            } else {
                l = 0L;
            }
            ExecutorService executorService = listenerExecutor;
            String string2 = Http2Connection.this.hostname;
            n = 0;
            executorService.execute(new NamedRunnable("OkHttp %s settings", new Object[]{string2}){

                @Override
                public void execute() {
                    Http2Connection.this.listener.onSettings(Http2Connection.this);
                }
            });
            // MONITOREXIT : object
            if (arrhttp2Stream == null) return;
            if (l == 0L) return;
            n2 = arrhttp2Stream.length;
            while (n < n2) {
                object = arrhttp2Stream[n];
                // MONITORENTER : object
                object.addBytesToWriteWindow(l);
                // MONITOREXIT : object
                ++n;
            }
        }

        /*
         * Enabled aggressive block sorting
         * Enabled unnecessary exception pruning
         * Enabled aggressive exception aggregation
         */
        @Override
        public void windowUpdate(int n, long l) {
            if (n == 0) {
                Http2Connection http2Connection = Http2Connection.this;
                synchronized (http2Connection) {
                    Http2Connection http2Connection2 = Http2Connection.this;
                    http2Connection2.bytesLeftInWriteWindow += l;
                    Http2Connection.this.notifyAll();
                    return;
                }
            }
            Http2Stream http2Stream = Http2Connection.this.getStream(n);
            if (http2Stream != null) {
                synchronized (http2Stream) {
                    http2Stream.addBytesToWriteWindow(l);
                    return;
                }
            }
        }

    }

}

