/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  javax.annotation.Nullable
 *  okhttp3.internal.Util$1
 *  okhttp3.internal.Util$2
 */
package okhttp3.internal;

import java.io.Closeable;
import java.io.IOException;
import java.io.InterruptedIOException;
import java.net.IDN;
import java.net.InetAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.UnknownHostException;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.Locale;
import java.util.TimeZone;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.TimeUnit;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.annotation.Nullable;
import okhttp3.HttpUrl;
import okhttp3.RequestBody;
import okhttp3.ResponseBody;
import okhttp3.internal.Util;
import okio.Buffer;
import okio.BufferedSource;
import okio.ByteString;
import okio.Source;
import okio.Timeout;

public final class Util {
    public static final byte[] EMPTY_BYTE_ARRAY = new byte[0];
    public static final RequestBody EMPTY_REQUEST;
    public static final ResponseBody EMPTY_RESPONSE;
    public static final String[] EMPTY_STRING_ARRAY;
    public static final Charset ISO_8859_1;
    public static final Comparator<String> NATURAL_ORDER;
    public static final TimeZone UTC;
    private static final Charset UTF_16_BE;
    private static final ByteString UTF_16_BE_BOM;
    private static final Charset UTF_16_LE;
    private static final ByteString UTF_16_LE_BOM;
    private static final Charset UTF_32_BE;
    private static final ByteString UTF_32_BE_BOM;
    private static final Charset UTF_32_LE;
    private static final ByteString UTF_32_LE_BOM;
    public static final Charset UTF_8;
    private static final ByteString UTF_8_BOM;
    private static final Pattern VERIFY_AS_IP_ADDRESS;

    static {
        EMPTY_STRING_ARRAY = new String[0];
        EMPTY_RESPONSE = ResponseBody.create(null, EMPTY_BYTE_ARRAY);
        EMPTY_REQUEST = RequestBody.create(null, EMPTY_BYTE_ARRAY);
        UTF_8_BOM = ByteString.decodeHex("efbbbf");
        UTF_16_BE_BOM = ByteString.decodeHex("feff");
        UTF_16_LE_BOM = ByteString.decodeHex("fffe");
        UTF_32_BE_BOM = ByteString.decodeHex("0000ffff");
        UTF_32_LE_BOM = ByteString.decodeHex("ffff0000");
        UTF_8 = Charset.forName("UTF-8");
        ISO_8859_1 = Charset.forName("ISO-8859-1");
        UTF_16_BE = Charset.forName("UTF-16BE");
        UTF_16_LE = Charset.forName("UTF-16LE");
        UTF_32_BE = Charset.forName("UTF-32BE");
        UTF_32_LE = Charset.forName("UTF-32LE");
        UTC = TimeZone.getTimeZone("GMT");
        NATURAL_ORDER = new 1();
        VERIFY_AS_IP_ADDRESS = Pattern.compile("([0-9a-fA-F]*:[0-9a-fA-F:.]*)|([\\d.]+)");
    }

    private Util() {
    }

    public static AssertionError assertionError(String object, Exception exception) {
        object = new AssertionError(object);
        try {
            object.initCause(exception);
            return object;
        }
        catch (IllegalStateException illegalStateException) {
            return object;
        }
    }

    public static Charset bomAwareCharset(BufferedSource bufferedSource, Charset charset) throws IOException {
        if (bufferedSource.rangeEquals(0L, UTF_8_BOM)) {
            bufferedSource.skip(UTF_8_BOM.size());
            return UTF_8;
        }
        if (bufferedSource.rangeEquals(0L, UTF_16_BE_BOM)) {
            bufferedSource.skip(UTF_16_BE_BOM.size());
            return UTF_16_BE;
        }
        if (bufferedSource.rangeEquals(0L, UTF_16_LE_BOM)) {
            bufferedSource.skip(UTF_16_LE_BOM.size());
            return UTF_16_LE;
        }
        if (bufferedSource.rangeEquals(0L, UTF_32_BE_BOM)) {
            bufferedSource.skip(UTF_32_BE_BOM.size());
            return UTF_32_BE;
        }
        if (bufferedSource.rangeEquals(0L, UTF_32_LE_BOM)) {
            bufferedSource.skip(UTF_32_LE_BOM.size());
            return UTF_32_LE;
        }
        return charset;
    }

    public static String canonicalizeHost(String string2) {
        block7 : {
            if (string2.contains(":")) {
                Object object = string2.startsWith("[") && string2.endsWith("]") ? Util.decodeIpv6(string2, 1, string2.length() - 1) : Util.decodeIpv6(string2, 0, string2.length());
                if (object == null) {
                    return null;
                }
                if (((byte[])(object = object.getAddress())).length == 16) {
                    return Util.inet6AddressToAscii((byte[])object);
                }
                object = new StringBuilder();
                object.append("Invalid IPv6 address: '");
                object.append(string2);
                object.append("'");
                throw new AssertionError((Object)object.toString());
            }
            try {
                string2 = IDN.toASCII(string2).toLowerCase(Locale.US);
                if (!string2.isEmpty()) break block7;
                return null;
            }
            catch (IllegalArgumentException illegalArgumentException) {
                return null;
            }
        }
        boolean bl = Util.containsInvalidHostnameAsciiCodes(string2);
        if (bl) {
            return null;
        }
        return string2;
    }

    public static int checkDuration(String string2, long l, TimeUnit object) {
        if (l < 0L) {
            object = new StringBuilder();
            object.append(string2);
            object.append(" < 0");
            throw new IllegalArgumentException(object.toString());
        }
        if (object == null) {
            throw new NullPointerException("unit == null");
        }
        long l2 = object.toMillis(l);
        if (l2 > Integer.MAX_VALUE) {
            object = new StringBuilder();
            object.append(string2);
            object.append(" too large.");
            throw new IllegalArgumentException(object.toString());
        }
        if (l2 == 0L && l > 0L) {
            object = new StringBuilder();
            object.append(string2);
            object.append(" too small.");
            throw new IllegalArgumentException(object.toString());
        }
        return (int)l2;
    }

    public static void checkOffsetAndCount(long l, long l2, long l3) {
        if ((l2 | l3) >= 0L && l2 <= l && l - l2 >= l3) {
            return;
        }
        throw new ArrayIndexOutOfBoundsException();
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    public static void closeQuietly(Closeable closeable) {
        if (closeable == null) return;
        try {
            closeable.close();
            return;
        }
        catch (RuntimeException runtimeException) {
            throw runtimeException;
        }
        catch (Exception exception) {
            return;
        }
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    public static void closeQuietly(ServerSocket serverSocket) {
        if (serverSocket == null) return;
        try {
            serverSocket.close();
            return;
        }
        catch (RuntimeException runtimeException) {
            throw runtimeException;
        }
        catch (Exception exception) {
            return;
        }
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    public static void closeQuietly(Socket socket) {
        if (socket == null) return;
        try {
            socket.close();
            return;
        }
        catch (RuntimeException runtimeException) {
            throw runtimeException;
        }
        catch (AssertionError assertionError) {
            if (Util.isAndroidGetsocknameError(assertionError)) return;
            throw assertionError;
        }
        catch (Exception exception) {
            return;
        }
    }

    public static String[] concat(String[] arrstring, String string2) {
        String[] arrstring2 = new String[arrstring.length + 1];
        System.arraycopy(arrstring, 0, arrstring2, 0, arrstring.length);
        arrstring2[arrstring2.length - 1] = string2;
        return arrstring2;
    }

    private static boolean containsInvalidHostnameAsciiCodes(String string2) {
        for (int i = 0; i < string2.length(); ++i) {
            char c = string2.charAt(i);
            if (c > '\u001f') {
                if (c >= '') {
                    return true;
                }
                if (" #%/:?@[\\]".indexOf(c) == -1) continue;
                return true;
            }
            return true;
        }
        return false;
    }

    public static int decodeHexDigit(char c) {
        if (c >= '0' && c <= '9') {
            return c - 48;
        }
        if (c >= 'a' && c <= 'f') {
            return c - 97 + 10;
        }
        if (c >= 'A' && c <= 'F') {
            return c - 65 + 10;
        }
        return -1;
    }

    private static boolean decodeIpv4Suffix(String string2, int n, int n2, byte[] arrby, int n3) {
        int n4 = n3;
        int n5 = n;
        while (n5 < n2) {
            char c;
            if (n4 == arrby.length) {
                return false;
            }
            n = n5;
            if (n4 != n3) {
                if (string2.charAt(n5) != '.') {
                    return false;
                }
                n = n5 + 1;
            }
            int n6 = 0;
            for (n5 = n; n5 < n2 && (c = string2.charAt(n5)) >= '0' && c <= '9'; ++n5) {
                if (n6 == 0 && n != n5) {
                    return false;
                }
                if ((n6 = n6 * 10 + c - 48) <= 255) continue;
                return false;
            }
            if (n5 - n == 0) {
                return false;
            }
            arrby[n4] = (byte)n6;
            ++n4;
        }
        if (n4 != n3 + 4) {
            return false;
        }
        return true;
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    @Nullable
    private static InetAddress decodeIpv6(String object, int n, int n2) {
        int n3;
        int n4;
        byte[] arrby = new byte[16];
        int n5 = 0;
        int n6 = -1;
        int n7 = -1;
        do {
            n4 = n5;
            n3 = n6;
            if (n >= n2) break;
            if (n5 == arrby.length) {
                return null;
            }
            n4 = n + 2;
            if (n4 <= n2 && object.regionMatches(n, "::", 0, 2)) {
                if (n6 != -1) {
                    return null;
                }
                n = n5 + 2;
                if (n4 == n2) {
                    n3 = n;
                    n4 = n;
                    break;
                }
                n6 = n;
                n5 = n;
                n = n4;
            } else {
                n4 = n;
                if (n5 != 0) {
                    if (object.regionMatches(n, ":", 0, 1)) {
                        n4 = n + 1;
                    } else {
                        if (!object.regionMatches(n, ".", 0, 1)) return null;
                        if (!Util.decodeIpv4Suffix((String)object, n7, n2, arrby, n5 - 2)) {
                            return null;
                        }
                        n4 = n5 + 2;
                        n3 = n6;
                        break;
                    }
                }
                n = n4;
            }
            n7 = 0;
            for (n4 = n; n4 < n2 && (n3 = Util.decodeHexDigit(object.charAt(n4))) != -1; ++n4) {
                n7 = (n7 << 4) + n3;
            }
            n3 = n4 - n;
            if (n3 == 0) return null;
            if (n3 > 4) {
                return null;
            }
            n3 = n5 + 1;
            arrby[n5] = (byte)(n7 >>> 8 & 255);
            n5 = n3 + 1;
            arrby[n3] = (byte)(n7 & 255);
            n7 = n;
            n = n4;
        } while (true);
        if (n4 != arrby.length) {
            if (n3 == -1) {
                return null;
            }
            n = arrby.length;
            n2 = n4 - n3;
            System.arraycopy(arrby, n3, arrby, n - n2, n2);
            Arrays.fill(arrby, n3, arrby.length - n4 + n3, (byte)0);
        }
        try {
            return InetAddress.getByAddress(arrby);
        }
        catch (UnknownHostException unknownHostException) {
            throw new AssertionError();
        }
    }

    public static int delimiterOffset(String string2, int n, int n2, char c) {
        while (n < n2) {
            if (string2.charAt(n) == c) {
                return n;
            }
            ++n;
        }
        return n2;
    }

    public static int delimiterOffset(String string2, int n, int n2, String string3) {
        while (n < n2) {
            if (string3.indexOf(string2.charAt(n)) != -1) {
                return n;
            }
            ++n;
        }
        return n2;
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    public static boolean discard(Source source, int n, TimeUnit timeUnit) {
        try {
            return Util.skipAll(source, n, timeUnit);
        }
        catch (IOException iOException) {
            return false;
        }
    }

    public static boolean equal(Object object, Object object2) {
        if (!(object == object2 || object != null && object.equals(object2))) {
            return false;
        }
        return true;
    }

    public static /* varargs */ String format(String string2, Object ... arrobject) {
        return String.format(Locale.US, string2, arrobject);
    }

    public static String hostHeader(HttpUrl httpUrl, boolean bl) {
        CharSequence charSequence;
        block6 : {
            CharSequence charSequence2;
            block5 : {
                if (httpUrl.host().contains(":")) {
                    charSequence2 = new StringBuilder();
                    charSequence2.append("[");
                    charSequence2.append(httpUrl.host());
                    charSequence2.append("]");
                    charSequence2 = charSequence2.toString();
                } else {
                    charSequence2 = httpUrl.host();
                }
                if (bl) break block5;
                charSequence = charSequence2;
                if (httpUrl.port() == HttpUrl.defaultPort(httpUrl.scheme())) break block6;
            }
            charSequence = new StringBuilder();
            charSequence.append((String)charSequence2);
            charSequence.append(":");
            charSequence.append(httpUrl.port());
            charSequence = charSequence.toString();
        }
        return charSequence;
    }

    public static <T> List<T> immutableList(List<T> list) {
        return Collections.unmodifiableList(new ArrayList<T>(list));
    }

    public static /* varargs */ <T> List<T> immutableList(T ... arrT) {
        return Collections.unmodifiableList(Arrays.asList((Object[])arrT.clone()));
    }

    public static int indexOf(Comparator<String> comparator, String[] arrstring, String string2) {
        int n = arrstring.length;
        for (int i = 0; i < n; ++i) {
            if (comparator.compare(arrstring[i], string2) != 0) continue;
            return i;
        }
        return -1;
    }

    public static int indexOfControlOrNonAscii(String string2) {
        int n = string2.length();
        for (int i = 0; i < n; ++i) {
            char c = string2.charAt(i);
            if (c > '\u001f') {
                if (c < '') continue;
                return i;
            }
            return i;
        }
        return -1;
    }

    private static String inet6AddressToAscii(byte[] arrby) {
        int n;
        int n2 = 0;
        int n3 = 0;
        int n4 = 0;
        int n5 = -1;
        while (n3 < arrby.length) {
            for (n = n3; n < 16 && arrby[n] == 0 && arrby[n + 1] == 0; n += 2) {
            }
            int n6 = n - n3;
            int n7 = n4;
            int n8 = n5;
            if (n6 > n4) {
                n7 = n4;
                n8 = n5;
                if (n6 >= 4) {
                    n7 = n6;
                    n8 = n3;
                }
            }
            n3 = n + 2;
            n4 = n7;
            n5 = n8;
        }
        Buffer buffer = new Buffer();
        n3 = n2;
        while (n3 < arrby.length) {
            if (n3 == n5) {
                buffer.writeByte(58);
                n3 = n = n3 + n4;
                if (n != 16) continue;
                buffer.writeByte(58);
                n3 = n;
                continue;
            }
            if (n3 > 0) {
                buffer.writeByte(58);
            }
            buffer.writeHexadecimalUnsignedLong((arrby[n3] & 255) << 8 | arrby[n3 + 1] & 255);
            n3 += 2;
        }
        return buffer.readUtf8();
    }

    public static String[] intersect(Comparator<? super String> comparator, String[] arrstring, String[] arrstring2) {
        ArrayList<String> arrayList = new ArrayList<String>();
        block0 : for (String string2 : arrstring) {
            int n = arrstring2.length;
            for (int i = 0; i < n; ++i) {
                if (comparator.compare(string2, arrstring2[i]) != 0) continue;
                arrayList.add(string2);
                continue block0;
            }
        }
        return arrayList.toArray(new String[arrayList.size()]);
    }

    public static boolean isAndroidGetsocknameError(AssertionError assertionError) {
        if (assertionError.getCause() != null && assertionError.getMessage() != null && assertionError.getMessage().contains("getsockname failed")) {
            return true;
        }
        return false;
    }

    public static boolean nonEmptyIntersection(Comparator<String> comparator, String[] arrstring, String[] arrstring2) {
        if (arrstring != null && arrstring2 != null && arrstring.length != 0) {
            if (arrstring2.length == 0) {
                return false;
            }
            for (String string2 : arrstring) {
                int n = arrstring2.length;
                for (int i = 0; i < n; ++i) {
                    if (comparator.compare(string2, arrstring2[i]) != 0) continue;
                    return true;
                }
            }
            return false;
        }
        return false;
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public static boolean skipAll(Source source, int n, TimeUnit object) throws IOException {
        long l = System.nanoTime();
        long l2 = source.timeout().hasDeadline() ? source.timeout().deadlineNanoTime() - l : Long.MAX_VALUE;
        source.timeout().deadlineNanoTime(l + Math.min(l2, object.toNanos(n)));
        try {
            object = new Buffer();
            while (source.read((Buffer)object, 8192L) != -1L) {
                object.clear();
            }
            if (l2 == Long.MAX_VALUE) {
                source.timeout().clearDeadline();
                return true;
            }
            source.timeout().deadlineNanoTime(l + l2);
            return true;
        }
        catch (Throwable throwable) {
            if (l2 == Long.MAX_VALUE) {
                source.timeout().clearDeadline();
                throw throwable;
            }
            source.timeout().deadlineNanoTime(l + l2);
            throw throwable;
        }
        catch (InterruptedIOException interruptedIOException) {}
        if (l2 == Long.MAX_VALUE) {
            source.timeout().clearDeadline();
            return false;
        }
        source.timeout().deadlineNanoTime(l + l2);
        return false;
    }

    public static int skipLeadingAsciiWhitespace(String string2, int n, int n2) {
        while (n < n2) {
            switch (string2.charAt(n)) {
                default: {
                    return n;
                }
                case '\t': 
                case '\n': 
                case '\f': 
                case '\r': 
                case ' ': 
            }
            ++n;
        }
        return n2;
    }

    public static int skipTrailingAsciiWhitespace(String string2, int n, int n2) {
        --n2;
        while (n2 >= n) {
            switch (string2.charAt(n2)) {
                default: {
                    return n2 + 1;
                }
                case '\t': 
                case '\n': 
                case '\f': 
                case '\r': 
                case ' ': 
            }
            --n2;
        }
        return n;
    }

    public static ThreadFactory threadFactory(String string2, boolean bl) {
        return new 2(string2, bl);
    }

    public static String trimSubstring(String string2, int n, int n2) {
        n = Util.skipLeadingAsciiWhitespace(string2, n, n2);
        return string2.substring(n, Util.skipTrailingAsciiWhitespace(string2, n, n2));
    }

    public static boolean verifyAsIpAddress(String string2) {
        return VERIFY_AS_IP_ADDRESS.matcher(string2).matches();
    }
}

