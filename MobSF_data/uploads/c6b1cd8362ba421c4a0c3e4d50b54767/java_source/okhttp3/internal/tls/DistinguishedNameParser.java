/*
 * Decompiled with CFR 0_132.
 */
package okhttp3.internal.tls;

import javax.security.auth.x500.X500Principal;

final class DistinguishedNameParser {
    private int beg;
    private char[] chars;
    private int cur;
    private final String dn;
    private int end;
    private final int length;
    private int pos;

    DistinguishedNameParser(X500Principal x500Principal) {
        this.dn = x500Principal.getName("RFC2253");
        this.length = this.dn.length();
    }

    /*
     * Exception decompiling
     */
    private String escapedAV() {
        // This method has failed to decompile.  When submitting a bug report, please provide this stack trace, and (if you hold appropriate legal rights) the relevant class file.
        // org.benf.cfr.reader.util.ConfusedCFRException: Extractable last case doesn't follow previous
        // org.benf.cfr.reader.bytecode.analysis.opgraph.op3rewriters.SwitchReplacer.examineSwitchContiguity(SwitchReplacer.java:486)
        // org.benf.cfr.reader.bytecode.analysis.opgraph.op3rewriters.SwitchReplacer.replaceRawSwitches(SwitchReplacer.java:65)
        // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisInner(CodeAnalyser.java:416)
        // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisOrWrapFail(CodeAnalyser.java:196)
        // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysis(CodeAnalyser.java:141)
        // org.benf.cfr.reader.entities.attributes.AttributeCode.analyse(AttributeCode.java:95)
        // org.benf.cfr.reader.entities.Method.analyse(Method.java:372)
        // org.benf.cfr.reader.entities.ClassFile.analyseMid(ClassFile.java:867)
        // org.benf.cfr.reader.entities.ClassFile.analyseTop(ClassFile.java:768)
        // org.benf.cfr.reader.Main.doJar(Main.java:141)
        // org.benf.cfr.reader.Main.main(Main.java:242)
        throw new IllegalStateException("Decompilation failed");
    }

    private int getByte(int n) {
        block7 : {
            block11 : {
                int n2;
                block9 : {
                    block10 : {
                        block8 : {
                            block5 : {
                                block6 : {
                                    block4 : {
                                        n2 = n + 1;
                                        if (n2 >= this.length) {
                                            StringBuilder stringBuilder = new StringBuilder();
                                            stringBuilder.append("Malformed DN: ");
                                            stringBuilder.append(this.dn);
                                            throw new IllegalStateException(stringBuilder.toString());
                                        }
                                        if ((n = this.chars[n]) < 48 || n > 57) break block4;
                                        n -= 48;
                                        break block5;
                                    }
                                    if (n < 97 || n > 102) break block6;
                                    n -= 87;
                                    break block5;
                                }
                                if (n < 65 || n > 70) break block7;
                                n -= 55;
                            }
                            n2 = this.chars[n2];
                            if (n2 < 48 || n2 > 57) break block8;
                            n2 -= 48;
                            break block9;
                        }
                        if (n2 < 97 || n2 > 102) break block10;
                        n2 -= 87;
                        break block9;
                    }
                    if (n2 < 65 || n2 > 70) break block11;
                    n2 -= 55;
                }
                return (n << 4) + n2;
            }
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("Malformed DN: ");
            stringBuilder.append(this.dn);
            throw new IllegalStateException(stringBuilder.toString());
        }
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("Malformed DN: ");
        stringBuilder.append(this.dn);
        throw new IllegalStateException(stringBuilder.toString());
    }

    private char getEscaped() {
        ++this.pos;
        if (this.pos == this.length) {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("Unexpected end of DN: ");
            stringBuilder.append(this.dn);
            throw new IllegalStateException(stringBuilder.toString());
        }
        char c = this.chars[this.pos];
        if (c != ' ' && c != '%' && c != '\\' && c != '_') {
            switch (c) {
                default: {
                    switch (c) {
                        default: {
                            switch (c) {
                                default: {
                                    return this.getUTF8();
                                }
                                case ';': 
                                case '<': 
                                case '=': 
                                case '>': 
                            }
                        }
                        case '*': 
                        case '+': 
                        case ',': 
                    }
                }
                case '\"': 
                case '#': 
            }
        }
        return this.chars[this.pos];
    }

    private char getUTF8() {
        int n = this.getByte(this.pos);
        ++this.pos;
        if (n < 128) {
            return (char)n;
        }
        if (n >= 192 && n <= 247) {
            int n2;
            if (n <= 223) {
                n &= 31;
                n2 = 1;
            } else if (n <= 239) {
                n2 = 2;
                n &= 15;
            } else {
                n2 = 3;
                n &= 7;
            }
            for (int i = 0; i < n2; ++i) {
                ++this.pos;
                if (this.pos != this.length) {
                    if (this.chars[this.pos] != '\\') {
                        return '?';
                    }
                    ++this.pos;
                    int n3 = this.getByte(this.pos);
                    ++this.pos;
                    if ((n3 & 192) != 128) {
                        return '?';
                    }
                    n = (n << 6) + (n3 & 63);
                    continue;
                }
                return '?';
            }
            return (char)n;
        }
        return '?';
    }

    private String hexAV() {
        int n;
        int n2;
        byte[] arrby;
        block7 : {
            if (this.pos + 4 >= this.length) {
                StringBuilder stringBuilder = new StringBuilder();
                stringBuilder.append("Unexpected end of DN: ");
                stringBuilder.append(this.dn);
                throw new IllegalStateException(stringBuilder.toString());
            }
            this.beg = this.pos++;
            while (this.pos != this.length && this.chars[this.pos] != '+' && this.chars[this.pos] != ',' && this.chars[this.pos] != ';') {
                if (this.chars[this.pos] == ' ') {
                    this.end = this.pos++;
                    while (this.pos < this.length && this.chars[this.pos] == ' ') {
                        ++this.pos;
                    }
                    break block7;
                }
                if (this.chars[this.pos] >= 'A' && this.chars[this.pos] <= 'F') {
                    arrby = this.chars;
                    n2 = this.pos;
                    arrby[n2] = (char)(arrby[n2] + 32);
                }
                ++this.pos;
            }
            this.end = this.pos;
        }
        if ((n = this.end - this.beg) >= 5 && (n & 1) != 0) {
            arrby = new byte[n / 2];
            int n3 = this.beg + 1;
            for (n2 = 0; n2 < arrby.length; ++n2) {
                arrby[n2] = (byte)this.getByte(n3);
                n3 += 2;
            }
            return new String(this.chars, this.beg, n);
        }
        arrby = new byte[]();
        arrby.append("Unexpected end of DN: ");
        arrby.append(this.dn);
        throw new IllegalStateException(arrby.toString());
    }

    private String nextAT() {
        while (this.pos < this.length && this.chars[this.pos] == ' ') {
            ++this.pos;
        }
        if (this.pos == this.length) {
            return null;
        }
        this.beg = this.pos++;
        while (this.pos < this.length && this.chars[this.pos] != '=' && this.chars[this.pos] != ' ') {
            ++this.pos;
        }
        if (this.pos >= this.length) {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("Unexpected end of DN: ");
            stringBuilder.append(this.dn);
            throw new IllegalStateException(stringBuilder.toString());
        }
        this.end = this.pos;
        if (this.chars[this.pos] == ' ') {
            while (this.pos < this.length && this.chars[this.pos] != '=' && this.chars[this.pos] == ' ') {
                ++this.pos;
            }
            if (this.chars[this.pos] != '=' || this.pos == this.length) {
                StringBuilder stringBuilder = new StringBuilder();
                stringBuilder.append("Unexpected end of DN: ");
                stringBuilder.append(this.dn);
                throw new IllegalStateException(stringBuilder.toString());
            }
        }
        ++this.pos;
        while (this.pos < this.length && this.chars[this.pos] == ' ') {
            ++this.pos;
        }
        if (!(this.end - this.beg <= 4 || this.chars[this.beg + 3] != '.' || this.chars[this.beg] != 'O' && this.chars[this.beg] != 'o' || this.chars[this.beg + 1] != 'I' && this.chars[this.beg + 1] != 'i' || this.chars[this.beg + 2] != 'D' && this.chars[this.beg + 2] != 'd')) {
            this.beg += 4;
        }
        return new String(this.chars, this.beg, this.end - this.beg);
    }

    private String quotedAV() {
        ++this.pos;
        this.end = this.beg = this.pos;
        do {
            if (this.pos == this.length) {
                StringBuilder stringBuilder = new StringBuilder();
                stringBuilder.append("Unexpected end of DN: ");
                stringBuilder.append(this.dn);
                throw new IllegalStateException(stringBuilder.toString());
            }
            if (this.chars[this.pos] == '\"') {
                ++this.pos;
                while (this.pos < this.length && this.chars[this.pos] == ' ') {
                    ++this.pos;
                }
                return new String(this.chars, this.beg, this.end - this.beg);
            }
            this.chars[this.end] = this.chars[this.pos] == '\\' ? this.getEscaped() : this.chars[this.pos];
            ++this.pos;
            ++this.end;
        } while (true);
    }

    public String findMostSpecific(String charSequence) {
        String string2;
        this.pos = 0;
        this.beg = 0;
        this.end = 0;
        this.cur = 0;
        this.chars = this.dn.toCharArray();
        String string3 = string2 = this.nextAT();
        if (string2 == null) {
            return null;
        }
        do {
            string2 = "";
            if (this.pos == this.length) {
                return null;
            }
            switch (this.chars[this.pos]) {
                default: {
                    string2 = this.escapedAV();
                    break;
                }
                case '#': {
                    string2 = this.hexAV();
                    break;
                }
                case '\"': {
                    string2 = this.quotedAV();
                }
                case '+': 
                case ',': 
                case ';': 
            }
            if (charSequence.equalsIgnoreCase(string3)) {
                return string2;
            }
            if (this.pos >= this.length) {
                return null;
            }
            if (this.chars[this.pos] != ',' && this.chars[this.pos] != ';' && this.chars[this.pos] != '+') {
                charSequence = new StringBuilder();
                charSequence.append("Malformed DN: ");
                charSequence.append(this.dn);
                throw new IllegalStateException(charSequence.toString());
            }
            ++this.pos;
            string3 = string2 = this.nextAT();
        } while (string2 != null);
        charSequence = new StringBuilder();
        charSequence.append("Malformed DN: ");
        charSequence.append(this.dn);
        throw new IllegalStateException(charSequence.toString());
    }
}

