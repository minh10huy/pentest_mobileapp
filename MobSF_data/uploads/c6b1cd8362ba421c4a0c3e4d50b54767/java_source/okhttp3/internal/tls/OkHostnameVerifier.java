/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  okhttp3.internal.Util
 */
package okhttp3.internal.tls;

import java.security.cert.Certificate;
import java.security.cert.CertificateParsingException;
import java.security.cert.X509Certificate;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import javax.net.ssl.HostnameVerifier;
import javax.net.ssl.SSLException;
import javax.net.ssl.SSLSession;
import okhttp3.internal.Util;

public final class OkHostnameVerifier
implements HostnameVerifier {
    private static final int ALT_DNS_NAME = 2;
    private static final int ALT_IPA_NAME = 7;
    public static final OkHostnameVerifier INSTANCE = new OkHostnameVerifier();

    private OkHostnameVerifier() {
    }

    public static List<String> allSubjectAltNames(X509Certificate object) {
        List<String> list = OkHostnameVerifier.getSubjectAltNames((X509Certificate)object, 7);
        object = OkHostnameVerifier.getSubjectAltNames((X509Certificate)object, 2);
        ArrayList<String> arrayList = new ArrayList<String>(list.size() + object.size());
        arrayList.addAll(list);
        arrayList.addAll((Collection<String>)object);
        return arrayList;
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    private static List<String> getSubjectAltNames(X509Certificate iterator2, int n) {
        ArrayList<String> arrayList = new ArrayList<String>();
        try {
            iterator2 = iterator2.getSubjectAlternativeNames();
            if (iterator2 == null) {
                return Collections.emptyList();
            }
            iterator2 = iterator2.iterator();
            while (iterator2.hasNext()) {
                Integer n2;
                Object object = (List)iterator2.next();
                if (object == null || object.size() < 2 || (n2 = (Integer)object.get(0)) == null || n2 != n || (object = (String)object.get(1)) == null) continue;
                arrayList.add((String)object);
            }
            return arrayList;
        }
        catch (CertificateParsingException certificateParsingException) {
            return Collections.emptyList();
        }
    }

    private boolean verifyHostname(String string2, X509Certificate object) {
        string2 = string2.toLowerCase(Locale.US);
        object = OkHostnameVerifier.getSubjectAltNames((X509Certificate)object, 2).iterator();
        while (object.hasNext()) {
            if (!this.verifyHostname(string2, (String)object.next())) continue;
            return true;
        }
        return false;
    }

    private boolean verifyIpAddress(String string2, X509Certificate object) {
        object = OkHostnameVerifier.getSubjectAltNames((X509Certificate)object, 7);
        int n = object.size();
        for (int i = 0; i < n; ++i) {
            if (!string2.equalsIgnoreCase((String)object.get(i))) continue;
            return true;
        }
        return false;
    }

    public boolean verify(String string2, X509Certificate x509Certificate) {
        if (Util.verifyAsIpAddress((String)string2)) {
            return this.verifyIpAddress(string2, x509Certificate);
        }
        return this.verifyHostname(string2, x509Certificate);
    }

    @Override
    public boolean verify(String string2, SSLSession sSLSession) {
        try {
            boolean bl = this.verify(string2, (X509Certificate)sSLSession.getPeerCertificates()[0]);
            return bl;
        }
        catch (SSLException sSLException) {
            return false;
        }
    }

    public boolean verifyHostname(String charSequence, String string2) {
        if (charSequence != null && charSequence.length() != 0 && !charSequence.startsWith(".")) {
            if (charSequence.endsWith("..")) {
                return false;
            }
            if (string2 != null && string2.length() != 0 && !string2.startsWith(".")) {
                if (string2.endsWith("..")) {
                    return false;
                }
                CharSequence charSequence2 = charSequence;
                if (!charSequence.endsWith(".")) {
                    charSequence2 = new StringBuilder();
                    charSequence2.append((String)charSequence);
                    charSequence2.append('.');
                    charSequence2 = charSequence2.toString();
                }
                charSequence = string2;
                if (!string2.endsWith(".")) {
                    charSequence = new StringBuilder();
                    charSequence.append(string2);
                    charSequence.append('.');
                    charSequence = charSequence.toString();
                }
                if (!(charSequence = charSequence.toLowerCase(Locale.US)).contains("*")) {
                    return charSequence2.equals(charSequence);
                }
                if (charSequence.startsWith("*.")) {
                    if (charSequence.indexOf(42, 1) != -1) {
                        return false;
                    }
                    if (charSequence2.length() < charSequence.length()) {
                        return false;
                    }
                    if ("*.".equals(charSequence)) {
                        return false;
                    }
                    if (!charSequence2.endsWith((String)(charSequence = charSequence.substring(1)))) {
                        return false;
                    }
                    int n = charSequence2.length() - charSequence.length();
                    if (n > 0 && charSequence2.lastIndexOf(46, n - 1) != -1) {
                        return false;
                    }
                    return true;
                }
                return false;
            }
            return false;
        }
        return false;
    }
}

