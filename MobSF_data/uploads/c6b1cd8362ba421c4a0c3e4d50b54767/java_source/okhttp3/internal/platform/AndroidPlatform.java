/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.os.Build
 *  android.os.Build$VERSION
 *  android.util.Log
 *  javax.annotation.Nullable
 *  okhttp3.Protocol
 *  okhttp3.internal.platform.AndroidPlatform$AndroidCertificateChainCleaner
 *  okhttp3.internal.platform.AndroidPlatform$AndroidTrustRootIndex
 *  okhttp3.internal.platform.AndroidPlatform$CloseGuard
 *  okhttp3.internal.platform.OptionalMethod
 *  okhttp3.internal.tls.CertificateChainCleaner
 *  okhttp3.internal.tls.TrustRootIndex
 */
package okhttp3.internal.platform;

import android.os.Build;
import android.util.Log;
import java.io.IOException;
import java.io.Serializable;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.net.InetSocketAddress;
import java.net.Socket;
import java.net.SocketAddress;
import java.nio.charset.Charset;
import java.security.Security;
import java.security.cert.X509Certificate;
import java.util.List;
import javax.annotation.Nullable;
import javax.net.ssl.SSLSocket;
import javax.net.ssl.SSLSocketFactory;
import javax.net.ssl.X509TrustManager;
import okhttp3.Protocol;
import okhttp3.internal.Util;
import okhttp3.internal.platform.AndroidPlatform;
import okhttp3.internal.platform.OptionalMethod;
import okhttp3.internal.platform.Platform;
import okhttp3.internal.tls.CertificateChainCleaner;
import okhttp3.internal.tls.TrustRootIndex;

class AndroidPlatform
extends Platform {
    private static final int MAX_LOG_LENGTH = 4000;
    private final  closeGuard = .get();
    private final OptionalMethod<Socket> getAlpnSelectedProtocol;
    private final OptionalMethod<Socket> setAlpnProtocols;
    private final OptionalMethod<Socket> setHostname;
    private final OptionalMethod<Socket> setUseSessionTickets;
    private final Class<?> sslParametersClass;

    AndroidPlatform(Class<?> class_, OptionalMethod<Socket> optionalMethod, OptionalMethod<Socket> optionalMethod2, OptionalMethod<Socket> optionalMethod3, OptionalMethod<Socket> optionalMethod4) {
        this.sslParametersClass = class_;
        this.setUseSessionTickets = optionalMethod;
        this.setHostname = optionalMethod2;
        this.getAlpnSelectedProtocol = optionalMethod3;
        this.setAlpnProtocols = optionalMethod4;
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    private boolean api23IsCleartextTrafficPermitted(String string2, Class<?> class_, Object object) throws InvocationTargetException, IllegalAccessException {
        try {
            return (Boolean)class_.getMethod("isCleartextTrafficPermitted", new Class[0]).invoke(object, new Object[0]);
        }
        catch (NoSuchMethodException noSuchMethodException) {
            return super.isCleartextTrafficPermitted(string2);
        }
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    private boolean api24IsCleartextTrafficPermitted(String string2, Class<?> class_, Object object) throws InvocationTargetException, IllegalAccessException {
        try {
            return (Boolean)class_.getMethod("isCleartextTrafficPermitted", String.class).invoke(object, string2);
        }
        catch (NoSuchMethodException noSuchMethodException) {
            return this.api23IsCleartextTrafficPermitted(string2, class_, object);
        }
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    public static Platform buildIfSupported() {
        block4 : {
            try {
                var0 = Class.forName("com.android.org.conscrypt.SSLParametersImpl");
                ** GOTO lbl7
            }
            catch (ClassNotFoundException var0_1) {}
            try {
                var0 = Class.forName("org.apache.harmony.xnet.provider.jsse.SSLParametersImpl");
lbl7: // 2 sources:
                var3_3 = new OptionalMethod(null, "setUseSessionTickets", new Class[]{Boolean.TYPE});
                var4_4 = new OptionalMethod(null, "setHostname", new Class[]{String.class});
                if (!AndroidPlatform.supportsAlpn()) break block4;
                var1_5 = new OptionalMethod(byte[].class, "getAlpnSelectedProtocol", new Class[0]);
                var2_6 = new OptionalMethod(null, "setAlpnProtocols", new Class[]{byte[].class});
                return new AndroidPlatform((Class<?>)var0, (OptionalMethod<Socket>)var3_3, (OptionalMethod<Socket>)var4_4, (OptionalMethod<Socket>)var1_5, (OptionalMethod<Socket>)var2_6);
            }
            catch (ClassNotFoundException var0_2) {
                return null;
            }
        }
        var2_6 = var1_5 = null;
        return new AndroidPlatform((Class<?>)var0, (OptionalMethod<Socket>)var3_3, (OptionalMethod<Socket>)var4_4, (OptionalMethod<Socket>)var1_5, (OptionalMethod<Socket>)var2_6);
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    private static boolean supportsAlpn() {
        if (Security.getProvider("GMSCore_OpenSSL") != null) {
            return true;
        }
        try {
            Class.forName("android.net.Network");
            return true;
        }
        catch (ClassNotFoundException classNotFoundException) {
            return false;
        }
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    @Override
    public CertificateChainCleaner buildCertificateChainCleaner(X509TrustManager x509TrustManager) {
        try {
             androidCertificateChainCleaner = Class.forName("android.net.http.X509TrustManagerExtensions");
            return new /* Unavailable Anonymous Inner Class!! */;
        }
        catch (Exception exception) {
            return super.buildCertificateChainCleaner(x509TrustManager);
        }
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    @Override
    public TrustRootIndex buildTrustRootIndex(X509TrustManager x509TrustManager) {
        try {
            Method method = x509TrustManager.getClass().getDeclaredMethod("findTrustAnchorByIssuerAndSignature", X509Certificate.class);
            method.setAccessible(true);
            return new /* Unavailable Anonymous Inner Class!! */;
        }
        catch (NoSuchMethodException noSuchMethodException) {
            return super.buildTrustRootIndex(x509TrustManager);
        }
    }

    @Override
    public void configureTlsExtensions(SSLSocket sSLSocket, String arrby, List<Protocol> list) {
        if (arrby != null) {
            this.setUseSessionTickets.invokeOptionalWithoutCheckedException((Object)sSLSocket, new Object[]{true});
            this.setHostname.invokeOptionalWithoutCheckedException((Object)sSLSocket, new Object[]{arrby});
        }
        if (this.setAlpnProtocols != null && this.setAlpnProtocols.isSupported((Object)sSLSocket)) {
            arrby = AndroidPlatform.concatLengthPrefixed(list);
            this.setAlpnProtocols.invokeWithoutCheckedException((Object)sSLSocket, new Object[]{arrby});
        }
    }

    @Override
    public void connectSocket(Socket socket, InetSocketAddress serializable, int n) throws IOException {
        try {
            socket.connect((SocketAddress)serializable, n);
            return;
        }
        catch (ClassCastException classCastException) {
            if (Build.VERSION.SDK_INT == 26) {
                serializable = new IOException("Exception in connect");
                serializable.initCause(classCastException);
                throw serializable;
            }
            throw classCastException;
        }
        catch (SecurityException securityException) {
            serializable = new IOException("Exception in connect");
            serializable.initCause(securityException);
            throw serializable;
        }
        catch (AssertionError assertionError) {
            if (Util.isAndroidGetsocknameError(assertionError)) {
                throw new IOException((Throwable)((Object)assertionError));
            }
            throw assertionError;
        }
    }

    @Nullable
    @Override
    public String getSelectedProtocol(SSLSocket object) {
        byte[] arrby = this.getAlpnSelectedProtocol;
        Object var2_3 = null;
        if (arrby == null) {
            return null;
        }
        if (!this.getAlpnSelectedProtocol.isSupported(object)) {
            return null;
        }
        arrby = (byte[])this.getAlpnSelectedProtocol.invokeWithoutCheckedException(object, new Object[0]);
        object = var2_3;
        if (arrby != null) {
            object = new String(arrby, Util.UTF_8);
        }
        return object;
    }

    @Override
    public Object getStackTraceForCloseable(String string2) {
        return this.closeGuard.createAndOpen(string2);
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    @Override
    public boolean isCleartextTrafficPermitted(String string2) {
        try {
            Class<?> class_ = Class.forName("android.security.NetworkSecurityPolicy");
            return this.api24IsCleartextTrafficPermitted(string2, class_, class_.getMethod("getInstance", new Class[0]).invoke(null, new Object[0]));
        }
        catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException exception) {
            throw Util.assertionError("unable to determine cleartext support", exception);
        }
        catch (ClassNotFoundException | NoSuchMethodException reflectiveOperationException) {
            return super.isCleartextTrafficPermitted(string2);
        }
    }

    @Override
    public void log(int n, String string2, Throwable throwable) {
        int n2 = 5;
        if (n != 5) {
            n2 = 3;
        }
        CharSequence charSequence = string2;
        if (throwable != null) {
            charSequence = new StringBuilder();
            charSequence.append(string2);
            charSequence.append('\n');
            charSequence.append(Log.getStackTraceString((Throwable)throwable));
            charSequence = charSequence.toString();
        }
        n = 0;
        int n3 = charSequence.length();
        block0 : while (n < n3) {
            int n4 = charSequence.indexOf(10, n);
            if (n4 == -1) {
                n4 = n3;
            }
            do {
                int n5 = Math.min(n4, n + 4000);
                Log.println((int)n2, (String)"OkHttp", (String)charSequence.substring(n, n5));
                if (n5 >= n4) {
                    n = n5 + 1;
                    continue block0;
                }
                n = n5;
            } while (true);
        }
    }

    @Override
    public void logCloseableLeak(String string2, Object object) {
        if (!this.closeGuard.warnIfOpen(object)) {
            this.log(5, string2, null);
        }
    }

    /*
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    @Override
    protected X509TrustManager trustManager(SSLSocketFactory object) {
        Object obj2;
        Object obj = obj2 = AndroidPlatform.readFieldOrNull(object, this.sslParametersClass, "sslParameters");
        if (obj2 == null) {
            obj = AndroidPlatform.readFieldOrNull(object, Class.forName("com.google.android.gms.org.conscrypt.SSLParametersImpl", false, object.getClass().getClassLoader()), "sslParameters");
        }
        if ((object = AndroidPlatform.readFieldOrNull(obj, X509TrustManager.class, "x509TrustManager")) == null) return AndroidPlatform.readFieldOrNull(obj, X509TrustManager.class, "trustManager");
        return object;
        catch (ClassNotFoundException classNotFoundException) {
            return super.trustManager((SSLSocketFactory)object);
        }
    }
}

