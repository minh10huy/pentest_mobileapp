/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  javax.annotation.Nullable
 *  okhttp3.Protocol
 *  okhttp3.internal.platform.JdkWithJettyBootPlatform$JettyNegoProvider
 */
package okhttp3.internal.platform;

import java.lang.reflect.InvocationHandler;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.lang.reflect.Proxy;
import java.util.List;
import javax.annotation.Nullable;
import javax.net.ssl.SSLSocket;
import okhttp3.Protocol;
import okhttp3.internal.Util;
import okhttp3.internal.platform.JdkWithJettyBootPlatform;
import okhttp3.internal.platform.Platform;

class JdkWithJettyBootPlatform
extends Platform {
    private final Class<?> clientProviderClass;
    private final Method getMethod;
    private final Method putMethod;
    private final Method removeMethod;
    private final Class<?> serverProviderClass;

    JdkWithJettyBootPlatform(Method method, Method method2, Method method3, Class<?> class_, Class<?> class_2) {
        this.putMethod = method;
        this.getMethod = method2;
        this.removeMethod = method3;
        this.clientProviderClass = class_;
        this.serverProviderClass = class_2;
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    public static Platform buildIfSupported() {
        try {
            Class<?> class_ = Class.forName("org.eclipse.jetty.alpn.ALPN");
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("org.eclipse.jetty.alpn.ALPN");
            stringBuilder.append("$Provider");
            Class<?> class_2 = Class.forName(stringBuilder.toString());
            StringBuilder stringBuilder2 = new StringBuilder();
            stringBuilder2.append("org.eclipse.jetty.alpn.ALPN");
            stringBuilder2.append("$ClientProvider");
            Class<?> class_3 = Class.forName(stringBuilder2.toString());
            StringBuilder stringBuilder3 = new StringBuilder();
            stringBuilder3.append("org.eclipse.jetty.alpn.ALPN");
            stringBuilder3.append("$ServerProvider");
            Class<?> class_4 = Class.forName(stringBuilder3.toString());
            return new JdkWithJettyBootPlatform(class_.getMethod("put", SSLSocket.class, class_2), class_.getMethod("get", SSLSocket.class), class_.getMethod("remove", SSLSocket.class), class_3, class_4);
        }
        catch (ClassNotFoundException | NoSuchMethodException reflectiveOperationException) {
            return null;
        }
    }

    @Override
    public void afterHandshake(SSLSocket sSLSocket) {
        try {
            this.removeMethod.invoke(null, sSLSocket);
            return;
        }
        catch (IllegalAccessException | InvocationTargetException reflectiveOperationException) {
            throw Util.assertionError("unable to remove alpn", reflectiveOperationException);
        }
    }

    @Override
    public void configureTlsExtensions(SSLSocket sSLSocket, String object, List<Protocol> object2) {
         jettyNegoProvider = JdkWithJettyBootPlatform.alpnProtocolNames(object2);
        try {
            object = Platform.class.getClassLoader();
            object2 = this.clientProviderClass;
            Class<?> class_ = this.serverProviderClass;
            jettyNegoProvider = new /* Unavailable Anonymous Inner Class!! */;
            object = Proxy.newProxyInstance((ClassLoader)object, new Class[]{object2, class_}, (InvocationHandler)jettyNegoProvider);
            this.putMethod.invoke(null, sSLSocket, object);
            return;
        }
        catch (IllegalAccessException | InvocationTargetException reflectiveOperationException) {
            throw Util.assertionError("unable to set alpn", reflectiveOperationException);
        }
    }

    @Nullable
    @Override
    public String getSelectedProtocol(SSLSocket object) {
        block5 : {
            block4 : {
                object = Proxy.getInvocationHandler(this.getMethod.invoke(null, object));
                if (object.unsupported || object.selected != null) break block4;
                Platform.get().log(4, "ALPN callback dropped: HTTP/2 is disabled. Is alpn-boot on the boot class path?", null);
                return null;
            }
            if (!object.unsupported) break block5;
            return null;
        }
        try {
            object = object.selected;
            return object;
        }
        catch (IllegalAccessException | InvocationTargetException reflectiveOperationException) {
            throw Util.assertionError("unable to get selected protocol", reflectiveOperationException);
        }
    }
}

