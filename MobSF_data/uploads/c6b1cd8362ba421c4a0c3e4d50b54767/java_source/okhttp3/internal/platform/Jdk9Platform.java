/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  javax.annotation.Nullable
 *  okhttp3.Protocol
 */
package okhttp3.internal.platform;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.List;
import javax.annotation.Nullable;
import javax.net.ssl.SSLParameters;
import javax.net.ssl.SSLSocket;
import javax.net.ssl.SSLSocketFactory;
import javax.net.ssl.X509TrustManager;
import okhttp3.Protocol;
import okhttp3.internal.Util;
import okhttp3.internal.platform.Platform;

final class Jdk9Platform
extends Platform {
    final Method getProtocolMethod;
    final Method setProtocolMethod;

    Jdk9Platform(Method method, Method method2) {
        this.setProtocolMethod = method;
        this.getProtocolMethod = method2;
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    public static Jdk9Platform buildIfSupported() {
        try {
            return new Jdk9Platform(SSLParameters.class.getMethod("setApplicationProtocols", String[].class), SSLSocket.class.getMethod("getApplicationProtocol", new Class[0]));
        }
        catch (NoSuchMethodException noSuchMethodException) {
            return null;
        }
    }

    @Override
    public void configureTlsExtensions(SSLSocket sSLSocket, String object, List<Protocol> list) {
        try {
            object = sSLSocket.getSSLParameters();
            list = Jdk9Platform.alpnProtocolNames(list);
            this.setProtocolMethod.invoke(object, new Object[]{list.toArray(new String[list.size()])});
            sSLSocket.setSSLParameters((SSLParameters)object);
            return;
        }
        catch (IllegalAccessException | InvocationTargetException reflectiveOperationException) {
            throw Util.assertionError("unable to set ssl parameters", reflectiveOperationException);
        }
    }

    @Nullable
    @Override
    public String getSelectedProtocol(SSLSocket object) {
        block3 : {
            object = (String)this.getProtocolMethod.invoke(object, new Object[0]);
            if (object == null) break block3;
            try {
                boolean bl = object.equals("");
                if (bl) break block3;
                return object;
            }
            catch (IllegalAccessException | InvocationTargetException reflectiveOperationException) {
                throw Util.assertionError("unable to get selected protocols", reflectiveOperationException);
            }
        }
        return null;
    }

    @Override
    public X509TrustManager trustManager(SSLSocketFactory sSLSocketFactory) {
        throw new UnsupportedOperationException("clientBuilder.sslSocketFactory(SSLSocketFactory) not supported on JDK 9+");
    }
}

