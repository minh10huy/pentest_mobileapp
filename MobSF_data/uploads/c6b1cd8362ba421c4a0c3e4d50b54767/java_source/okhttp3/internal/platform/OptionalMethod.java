/*
 * Decompiled with CFR 0_132.
 */
package okhttp3.internal.platform;

import java.lang.reflect.GenericDeclaration;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

class OptionalMethod<T> {
    private final String methodName;
    private final Class[] methodParams;
    private final Class<?> returnType;

    /* varargs */ OptionalMethod(Class<?> class_, String string2, Class ... arrclass) {
        this.returnType = class_;
        this.methodName = string2;
        this.methodParams = arrclass;
    }

    private Method getMethod(Class<?> class_) {
        String string2 = this.methodName;
        Method method = null;
        if (string2 != null && (method = OptionalMethod.getPublicMethod(class_, this.methodName, this.methodParams)) != null && this.returnType != null && !this.returnType.isAssignableFrom(method.getReturnType())) {
            return null;
        }
        return method;
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    private static Method getPublicMethod(Class<?> genericDeclaration, String string2, Class[] arrclass) {
        try {
            genericDeclaration = genericDeclaration.getMethod(string2, arrclass);
        }
        catch (NoSuchMethodException noSuchMethodException) {
            return null;
        }
        try {
            int n = genericDeclaration.getModifiers();
            if ((n & 1) != 0) return genericDeclaration;
        }
        catch (NoSuchMethodException noSuchMethodException) {
            return genericDeclaration;
        }
        do {
            return null;
            break;
        } while (true);
    }

    public /* varargs */ Object invoke(T object, Object ... object2) throws InvocationTargetException {
        Method method = this.getMethod(object.getClass());
        if (method == null) {
            object2 = new StringBuilder();
            object2.append("Method ");
            object2.append(this.methodName);
            object2.append(" not supported for object ");
            object2.append(object);
            throw new AssertionError((Object)object2.toString());
        }
        try {
            object = method.invoke(object, (Object[])object2);
            return object;
        }
        catch (IllegalAccessException illegalAccessException) {
            object2 = new StringBuilder();
            object2.append("Unexpectedly could not call: ");
            object2.append(method);
            object2 = new AssertionError((Object)object2.toString());
            object2.initCause(illegalAccessException);
            throw object2;
        }
    }

    public /* varargs */ Object invokeOptional(T object, Object ... arrobject) throws InvocationTargetException {
        Method method = this.getMethod(object.getClass());
        if (method == null) {
            return null;
        }
        try {
            object = method.invoke(object, arrobject);
            return object;
        }
        catch (IllegalAccessException illegalAccessException) {
            return null;
        }
    }

    public /* varargs */ Object invokeOptionalWithoutCheckedException(T object, Object ... object2) {
        try {
            object = this.invokeOptional(object, (Object[])object2);
            return object;
        }
        catch (InvocationTargetException invocationTargetException) {
            Throwable throwable = invocationTargetException.getTargetException();
            if (throwable instanceof RuntimeException) {
                throw (RuntimeException)throwable;
            }
            object2 = new AssertionError((Object)"Unexpected exception");
            object2.initCause(throwable);
            throw object2;
        }
    }

    public /* varargs */ Object invokeWithoutCheckedException(T object, Object ... object2) {
        try {
            object = this.invoke(object, (Object[])object2);
            return object;
        }
        catch (InvocationTargetException invocationTargetException) {
            Throwable throwable = invocationTargetException.getTargetException();
            if (throwable instanceof RuntimeException) {
                throw (RuntimeException)throwable;
            }
            object2 = new AssertionError((Object)"Unexpected exception");
            object2.initCause(throwable);
            throw object2;
        }
    }

    public boolean isSupported(T t) {
        if (this.getMethod(t.getClass()) != null) {
            return true;
        }
        return false;
    }
}

