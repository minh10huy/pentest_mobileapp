/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  javax.annotation.Nullable
 *  okhttp3.Protocol
 *  org.conscrypt.Conscrypt
 *  org.conscrypt.OpenSSLProvider
 */
package okhttp3.internal.platform;

import java.security.NoSuchAlgorithmException;
import java.security.Provider;
import java.util.List;
import javax.annotation.Nullable;
import javax.net.ssl.SSLContext;
import javax.net.ssl.SSLSocket;
import javax.net.ssl.SSLSocketFactory;
import javax.net.ssl.X509TrustManager;
import okhttp3.Protocol;
import okhttp3.internal.platform.Platform;
import org.conscrypt.Conscrypt;
import org.conscrypt.OpenSSLProvider;

public class ConscryptPlatform
extends Platform {
    private ConscryptPlatform() {
    }

    public static Platform buildIfSupported() {
        block3 : {
            try {
                Class.forName("org.conscrypt.ConscryptEngineSocket");
                if (Conscrypt.isAvailable()) break block3;
                return null;
            }
            catch (ClassNotFoundException classNotFoundException) {
                return null;
            }
        }
        Conscrypt.setUseEngineSocketByDefault((boolean)true);
        ConscryptPlatform conscryptPlatform = new ConscryptPlatform();
        return conscryptPlatform;
    }

    private Provider getProvider() {
        return new OpenSSLProvider();
    }

    @Override
    public void configureTlsExtensions(SSLSocket sSLSocket, String string2, List<Protocol> list) {
        if (Conscrypt.isConscrypt((SSLSocket)sSLSocket)) {
            if (string2 != null) {
                Conscrypt.setUseSessionTickets((SSLSocket)sSLSocket, (boolean)true);
                Conscrypt.setHostname((SSLSocket)sSLSocket, (String)string2);
            }
            Conscrypt.setApplicationProtocols((SSLSocket)sSLSocket, (String[])Platform.alpnProtocolNames(list).toArray(new String[0]));
            return;
        }
        super.configureTlsExtensions(sSLSocket, string2, list);
    }

    @Override
    public SSLContext getSSLContext() {
        try {
            SSLContext sSLContext = SSLContext.getInstance("TLS", this.getProvider());
            return sSLContext;
        }
        catch (NoSuchAlgorithmException noSuchAlgorithmException) {
            throw new IllegalStateException("No TLS provider", noSuchAlgorithmException);
        }
    }

    @Nullable
    @Override
    public String getSelectedProtocol(SSLSocket sSLSocket) {
        if (Conscrypt.isConscrypt((SSLSocket)sSLSocket)) {
            return Conscrypt.getApplicationProtocol((SSLSocket)sSLSocket);
        }
        return super.getSelectedProtocol(sSLSocket);
    }

    @Override
    public X509TrustManager trustManager(SSLSocketFactory object) {
        block4 : {
            if (!Conscrypt.isConscrypt((SSLSocketFactory)object)) {
                return super.trustManager((SSLSocketFactory)object);
            }
            try {
                object = ConscryptPlatform.readFieldOrNull(object, Object.class, "sslParameters");
                if (object == null) break block4;
            }
            catch (Exception exception) {
                throw new UnsupportedOperationException("clientBuilder.sslSocketFactory(SSLSocketFactory) not supported on Conscrypt", exception);
            }
            object = ConscryptPlatform.readFieldOrNull(object, X509TrustManager.class, "x509TrustManager");
            return object;
        }
        return null;
    }
}

