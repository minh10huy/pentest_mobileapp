/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  javax.annotation.Nullable
 *  okhttp3.internal.cache.DiskLruCache$1
 *  okhttp3.internal.cache.DiskLruCache$2
 *  okhttp3.internal.cache.DiskLruCache$3
 *  okhttp3.internal.cache.DiskLruCache$Editor
 *  okhttp3.internal.cache.DiskLruCache$Entry
 *  okhttp3.internal.io.FileSystem
 *  okio.Okio
 */
package okhttp3.internal.cache;

import java.io.Closeable;
import java.io.EOFException;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.Flushable;
import java.io.IOException;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.Executor;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.annotation.Nullable;
import okhttp3.internal.Util;
import okhttp3.internal.cache.DiskLruCache;
import okhttp3.internal.io.FileSystem;
import okhttp3.internal.platform.Platform;
import okio.BufferedSink;
import okio.BufferedSource;
import okio.Okio;
import okio.Sink;
import okio.Source;

public final class DiskLruCache
implements Closeable,
Flushable {
    static final /* synthetic */ boolean $assertionsDisabled = false;
    static final long ANY_SEQUENCE_NUMBER = -1L;
    private static final String CLEAN = "CLEAN";
    private static final String DIRTY = "DIRTY";
    static final String JOURNAL_FILE = "journal";
    static final String JOURNAL_FILE_BACKUP = "journal.bkp";
    static final String JOURNAL_FILE_TEMP = "journal.tmp";
    static final Pattern LEGAL_KEY_PATTERN = Pattern.compile("[a-z0-9_-]{1,120}");
    static final String MAGIC = "libcore.io.DiskLruCache";
    private static final String READ = "READ";
    private static final String REMOVE = "REMOVE";
    static final String VERSION_1 = "1";
    private final int appVersion;
    private final Runnable cleanupRunnable = new 1(this);
    boolean closed;
    final File directory;
    private final Executor executor;
    final FileSystem fileSystem;
    boolean hasJournalErrors;
    boolean initialized;
    private final File journalFile;
    private final File journalFileBackup;
    private final File journalFileTmp;
    BufferedSink journalWriter;
    final LinkedHashMap<String, > lruEntries = new LinkedHashMap(0, 0.75f, true);
    private long maxSize;
    boolean mostRecentRebuildFailed;
    boolean mostRecentTrimFailed;
    private long nextSequenceNumber = 0L;
    int redundantOpCount;
    private long size = 0L;
    final int valueCount;

    DiskLruCache(FileSystem fileSystem, File file, int n, int n2, long l, Executor executor) {
        this.fileSystem = fileSystem;
        this.directory = file;
        this.appVersion = n;
        this.journalFile = new File(file, JOURNAL_FILE);
        this.journalFileTmp = new File(file, JOURNAL_FILE_TEMP);
        this.journalFileBackup = new File(file, JOURNAL_FILE_BACKUP);
        this.valueCount = n2;
        this.maxSize = l;
        this.executor = executor;
    }

    private void checkNotClosed() {
        synchronized (this) {
            if (this.isClosed()) {
                throw new IllegalStateException("cache is closed");
            }
            return;
        }
    }

    public static DiskLruCache create(FileSystem fileSystem, File file, int n, int n2, long l) {
        if (l <= 0L) {
            throw new IllegalArgumentException("maxSize <= 0");
        }
        if (n2 <= 0) {
            throw new IllegalArgumentException("valueCount <= 0");
        }
        return new DiskLruCache(fileSystem, file, n, n2, l, new ThreadPoolExecutor(0, 1, 60L, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>(), Util.threadFactory("OkHttp DiskLruCache", true)));
    }

    private BufferedSink newJournalWriter() throws FileNotFoundException {
        return Okio.buffer((Sink)new 2(this, this.fileSystem.appendingSink(this.journalFile)));
    }

    private void processJournal() throws IOException {
        this.fileSystem.delete(this.journalFileTmp);
        Iterator<> iterator = this.lruEntries.values().iterator();
        while (iterator.hasNext()) {
            int n;
             entry = iterator.next();
             editor = entry.currentEditor;
            int n2 = 0;
            if (editor == null) {
                for (n = 0; n < this.valueCount; ++n) {
                    this.size += entry.lengths[n];
                }
                continue;
            }
            entry.currentEditor = null;
            for (n = n2; n < this.valueCount; ++n) {
                this.fileSystem.delete(entry.cleanFiles[n]);
                this.fileSystem.delete(entry.dirtyFiles[n]);
            }
            iterator.remove();
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    private void readJournal() throws IOException {
        BufferedSource bufferedSource;
        int n;
        block10 : {
            bufferedSource = Okio.buffer((Source)this.fileSystem.source(this.journalFile));
            try {
                boolean bl;
                String string2 = bufferedSource.readUtf8LineStrict();
                String string3 = bufferedSource.readUtf8LineStrict();
                CharSequence charSequence = bufferedSource.readUtf8LineStrict();
                String string4 = bufferedSource.readUtf8LineStrict();
                String string5 = bufferedSource.readUtf8LineStrict();
                if (!(MAGIC.equals(string2) && VERSION_1.equals(string3) && Integer.toString(this.appVersion).equals(charSequence) && Integer.toString(this.valueCount).equals(string4) && (bl = "".equals(string5)))) {
                    charSequence = new StringBuilder();
                    charSequence.append("unexpected journal header: [");
                    charSequence.append(string2);
                    charSequence.append(", ");
                    charSequence.append(string3);
                    charSequence.append(", ");
                    charSequence.append(string4);
                    charSequence.append(", ");
                    charSequence.append(string5);
                    charSequence.append("]");
                    throw new IOException(charSequence.toString());
                }
                n = 0;
                break block10;
            }
            catch (Throwable throwable) {}
            throw throwable;
        }
        try {
            do {
                this.readJournalLine(bufferedSource.readUtf8LineStrict());
                ++n;
            } while (true);
        }
        catch (EOFException eOFException) {}
        this.redundantOpCount = n - this.lruEntries.size();
        if (!bufferedSource.exhausted()) {
            this.rebuildJournal();
            return;
        }
        this.journalWriter = this.newJournalWriter();
    }

    private void readJournalLine(String arrstring) throws IOException {
        CharSequence charSequence;
        String string2;
        int n = arrstring.indexOf(32);
        if (n == -1) {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("unexpected journal line: ");
            stringBuilder.append((String)arrstring);
            throw new IOException(stringBuilder.toString());
        }
        int n2 = n + 1;
        int n3 = arrstring.indexOf(32, n2);
        if (n3 == -1) {
            string2 = arrstring.substring(n2);
            charSequence = string2;
            if (n == REMOVE.length()) {
                charSequence = string2;
                if (arrstring.startsWith(REMOVE)) {
                    this.lruEntries.remove(string2);
                    return;
                }
            }
        } else {
            charSequence = arrstring.substring(n2, n3);
        }
         entry = this.lruEntries.get(charSequence);
        string2 = entry;
        if (entry == null) {
            string2 = new /* Unavailable Anonymous Inner Class!! */;
            this.lruEntries.put((String)charSequence, string2);
        }
        if (n3 != -1 && n == CLEAN.length() && arrstring.startsWith(CLEAN)) {
            arrstring = arrstring.substring(n3 + 1).split(" ");
            string2.readable = true;
            string2.currentEditor = null;
            string2.setLengths(arrstring);
            return;
        }
        if (n3 == -1 && n == DIRTY.length() && arrstring.startsWith(DIRTY)) {
            string2.currentEditor = new /* Unavailable Anonymous Inner Class!! */;
            return;
        }
        if (n3 == -1 && n == READ.length() && arrstring.startsWith(READ)) {
            return;
        }
        charSequence = new StringBuilder();
        charSequence.append("unexpected journal line: ");
        charSequence.append((String)arrstring);
        throw new IOException(charSequence.toString());
    }

    private void validateKey(String string2) {
        if (!LEGAL_KEY_PATTERN.matcher(string2).matches()) {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("keys must match regex [a-z0-9_-]{1,120}: \"");
            stringBuilder.append(string2);
            stringBuilder.append("\"");
            throw new IllegalArgumentException(stringBuilder.toString());
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @Override
    public void close() throws IOException {
        synchronized (this) {
            if (!this.initialized || this.closed) {
                this.closed = true;
                return;
            }
            [] arrentry = this.lruEntries.values().toArray((T[])new [this.lruEntries.size()]);
            int n = arrentry.length;
            int n2 = 0;
            do {
                if (n2 >= n) {
                    this.trimToSize();
                    this.journalWriter.close();
                    this.journalWriter = null;
                    this.closed = true;
                    return;
                }
                 entry = arrentry[n2];
                if (entry.currentEditor != null) {
                    entry.currentEditor.abort();
                }
                ++n2;
            } while (true);
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    void completeEdit( object, boolean bl) throws IOException {
        synchronized (this) {
            void var2_2;
            int n;
             entry = object.entry;
            if (entry.currentEditor != object) {
                throw new IllegalStateException();
            }
            int n2 = n = 0;
            if (var2_2 != false) {
                n2 = n;
                if (!entry.readable) {
                    int n3 = 0;
                    do {
                        n2 = n;
                        if (n3 >= this.valueCount) break;
                        if (!object.written[n3]) {
                            object.abort();
                            object = new StringBuilder();
                            object.append("Newly created entry didn't create value for index ");
                            object.append(n3);
                            throw new IllegalStateException(object.toString());
                        }
                        if (!this.fileSystem.exists(entry.dirtyFiles[n3])) {
                            object.abort();
                            return;
                        }
                        ++n3;
                    } while (true);
                }
            }
            do {
                long l;
                if (n2 < this.valueCount) {
                    object = entry.dirtyFiles[n2];
                    if (var2_2 != false) {
                        if (this.fileSystem.exists((File)object)) {
                            long l2;
                            File file = entry.cleanFiles[n2];
                            this.fileSystem.rename((File)object, file);
                            l = entry.lengths[n2];
                            entry.lengths[n2] = l2 = this.fileSystem.size(file);
                            this.size = this.size - l + l2;
                        }
                    } else {
                        this.fileSystem.delete((File)object);
                    }
                } else {
                    ++this.redundantOpCount;
                    entry.currentEditor = null;
                    if ((entry.readable | var2_2) != 0) {
                        entry.readable = true;
                        this.journalWriter.writeUtf8(CLEAN).writeByte(32);
                        this.journalWriter.writeUtf8(entry.key);
                        entry.writeLengths(this.journalWriter);
                        this.journalWriter.writeByte(10);
                        if (var2_2 != false) {
                            l = this.nextSequenceNumber;
                            this.nextSequenceNumber = l + 1L;
                            entry.sequenceNumber = l;
                        }
                    } else {
                        this.lruEntries.remove(entry.key);
                        this.journalWriter.writeUtf8(REMOVE).writeByte(32);
                        this.journalWriter.writeUtf8(entry.key);
                        this.journalWriter.writeByte(10);
                    }
                    this.journalWriter.flush();
                    if (this.size > this.maxSize || this.journalRebuildRequired()) {
                        this.executor.execute(this.cleanupRunnable);
                    }
                    return;
                }
                ++n2;
            } while (true);
        }
    }

    public void delete() throws IOException {
        this.close();
        this.fileSystem.deleteContents(this.directory);
    }

    @Nullable
    public  edit(String string2) throws IOException {
        return this.edit(string2, -1L);
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
     edit(String string2, long l) throws IOException {
        synchronized (this) {
            long l2;
             editor;
            void var2_2;
            this.initialize();
            this.checkNotClosed();
            this.validateKey(string2);
             entry = this.lruEntries.get(string2);
            if (var2_2 != -1L && (entry == null || (l2 = entry.sequenceNumber) != var2_2)) {
                return null;
            }
            if (entry != null && (editor = entry.currentEditor) != null) {
                return null;
            }
            if (!this.mostRecentTrimFailed && !this.mostRecentRebuildFailed) {
                this.journalWriter.writeUtf8(DIRTY).writeByte(32).writeUtf8(string2).writeByte(10);
                this.journalWriter.flush();
                boolean bl = this.hasJournalErrors;
                if (bl) {
                    return null;
                }
                editor = entry;
                if (entry == null) {
                    editor = new /* Unavailable Anonymous Inner Class!! */;
                    this.lruEntries.put(string2, editor);
                }
                string2 = new /* Unavailable Anonymous Inner Class!! */;
                editor.currentEditor = string2;
                return string2;
            }
            this.executor.execute(this.cleanupRunnable);
            return null;
        }
    }

    public void evictAll() throws IOException {
        synchronized (this) {
            this.initialize();
            [] arrentry = this.lruEntries.values().toArray((T[])new [this.lruEntries.size()]);
            int n = arrentry.length;
            for (int i = 0; i < n; ++i) {
                this.removeEntry(arrentry[i]);
            }
            this.mostRecentTrimFailed = false;
            return;
        }
    }

    @Override
    public void flush() throws IOException {
        synchronized (this) {
            block4 : {
                boolean bl = this.initialized;
                if (bl) break block4;
                return;
            }
            this.checkNotClosed();
            this.trimToSize();
            this.journalWriter.flush();
            return;
        }
    }

    public Snapshot get(String string2) throws IOException {
        synchronized (this) {
            block6 : {
                Object object;
                block7 : {
                    this.initialize();
                    this.checkNotClosed();
                    this.validateKey(string2);
                    object = this.lruEntries.get(string2);
                    if (object == null) break block6;
                    if (!object.readable) break block6;
                    if ((object = object.snapshot()) != null) break block7;
                    return null;
                }
                ++this.redundantOpCount;
                this.journalWriter.writeUtf8(READ).writeByte(32).writeUtf8(string2).writeByte(10);
                if (this.journalRebuildRequired()) {
                    this.executor.execute(this.cleanupRunnable);
                }
                return object;
            }
            return null;
        }
    }

    public File getDirectory() {
        return this.directory;
    }

    public long getMaxSize() {
        synchronized (this) {
            long l = this.maxSize;
            return l;
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public void initialize() throws IOException {
        synchronized (this) {
            boolean bl = this.initialized;
            if (bl) {
                return;
            }
            if (this.fileSystem.exists(this.journalFileBackup)) {
                if (this.fileSystem.exists(this.journalFile)) {
                    this.fileSystem.delete(this.journalFileBackup);
                } else {
                    this.fileSystem.rename(this.journalFileBackup, this.journalFile);
                }
            }
            if (bl = this.fileSystem.exists(this.journalFile)) {
                try {
                    this.readJournal();
                    this.processJournal();
                    this.initialized = true;
                    return;
                }
                catch (IOException iOException) {
                    Platform platform = Platform.get();
                    StringBuilder stringBuilder = new StringBuilder();
                    stringBuilder.append("DiskLruCache ");
                    stringBuilder.append(this.directory);
                    stringBuilder.append(" is corrupt: ");
                    stringBuilder.append(iOException.getMessage());
                    stringBuilder.append(", removing");
                    platform.log(5, stringBuilder.toString(), iOException);
                    try {
                        this.delete();
                    }
                    finally {
                        this.closed = false;
                    }
                }
            }
            this.rebuildJournal();
            this.initialized = true;
            return;
        }
    }

    public boolean isClosed() {
        synchronized (this) {
            boolean bl = this.closed;
            return bl;
        }
    }

    boolean journalRebuildRequired() {
        if (this.redundantOpCount >= 2000 && this.redundantOpCount >= this.lruEntries.size()) {
            return true;
        }
        return false;
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    void rebuildJournal() throws IOException {
        synchronized (this) {
            BufferedSink bufferedSink;
            block9 : {
                if (this.journalWriter != null) {
                    this.journalWriter.close();
                }
                bufferedSink = Okio.buffer((Sink)this.fileSystem.sink(this.journalFileTmp));
                bufferedSink.writeUtf8(MAGIC).writeByte(10);
                bufferedSink.writeUtf8(VERSION_1).writeByte(10);
                bufferedSink.writeDecimalLong(this.appVersion).writeByte(10);
                bufferedSink.writeDecimalLong(this.valueCount).writeByte(10);
                bufferedSink.writeByte(10);
                for ( entry : this.lruEntries.values()) {
                    if (entry.currentEditor != null) {
                        bufferedSink.writeUtf8(DIRTY).writeByte(32);
                        bufferedSink.writeUtf8(entry.key);
                        bufferedSink.writeByte(10);
                        continue;
                    }
                    bufferedSink.writeUtf8(CLEAN).writeByte(32);
                    bufferedSink.writeUtf8(entry.key);
                    entry.writeLengths(bufferedSink);
                    bufferedSink.writeByte(10);
                }
                if (!this.fileSystem.exists(this.journalFile)) break block9;
                this.fileSystem.rename(this.journalFile, this.journalFileBackup);
            }
            this.fileSystem.rename(this.journalFileTmp, this.journalFile);
            this.fileSystem.delete(this.journalFileBackup);
            this.journalWriter = this.newJournalWriter();
            this.hasJournalErrors = false;
            this.mostRecentRebuildFailed = false;
            return;
            finally {
                bufferedSink.close();
            }
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public boolean remove(String string2) throws IOException {
        synchronized (this) {
            this.initialize();
            this.checkNotClosed();
            this.validateKey(string2);
            string2 = this.lruEntries.get(string2);
            if (string2 == null) {
                return false;
            }
            boolean bl = this.removeEntry(string2);
            if (bl && this.size <= this.maxSize) {
                this.mostRecentTrimFailed = false;
            }
            return bl;
        }
    }

    boolean removeEntry( entry) throws IOException {
        if (entry.currentEditor != null) {
            entry.currentEditor.detach();
        }
        for (int i = 0; i < this.valueCount; ++i) {
            this.fileSystem.delete(entry.cleanFiles[i]);
            this.size -= entry.lengths[i];
            entry.lengths[i] = 0L;
        }
        ++this.redundantOpCount;
        this.journalWriter.writeUtf8(REMOVE).writeByte(32).writeUtf8(entry.key).writeByte(10);
        this.lruEntries.remove(entry.key);
        if (this.journalRebuildRequired()) {
            this.executor.execute(this.cleanupRunnable);
        }
        return true;
    }

    public void setMaxSize(long l) {
        synchronized (this) {
            this.maxSize = l;
            if (this.initialized) {
                this.executor.execute(this.cleanupRunnable);
            }
            return;
        }
    }

    public long size() throws IOException {
        synchronized (this) {
            this.initialize();
            long l = this.size;
            return l;
        }
    }

    public Iterator<Snapshot> snapshots() throws IOException {
        synchronized (this) {
            this.initialize();
            3 var1_1 = new 3(this);
            return var1_1;
        }
    }

    void trimToSize() throws IOException {
        while (this.size > this.maxSize) {
            this.removeEntry(this.lruEntries.values().iterator().next());
        }
        this.mostRecentTrimFailed = false;
    }

    public final class Snapshot
    implements Closeable {
        private final String key;
        private final long[] lengths;
        private final long sequenceNumber;
        private final Source[] sources;

        Snapshot(String string2, long l, Source[] arrsource, long[] arrl) {
            this.key = string2;
            this.sequenceNumber = l;
            this.sources = arrsource;
            this.lengths = arrl;
        }

        static /* synthetic */ String access$000(Snapshot snapshot) {
            return snapshot.key;
        }

        @Override
        public void close() {
            Source[] arrsource = this.sources;
            int n = arrsource.length;
            for (int i = 0; i < n; ++i) {
                Util.closeQuietly(arrsource[i]);
            }
        }

        @Nullable
        public  edit() throws IOException {
            return DiskLruCache.this.edit(this.key, this.sequenceNumber);
        }

        public long getLength(int n) {
            return this.lengths[n];
        }

        public Source getSource(int n) {
            return this.sources[n];
        }

        public String key() {
            return this.key;
        }
    }

}

