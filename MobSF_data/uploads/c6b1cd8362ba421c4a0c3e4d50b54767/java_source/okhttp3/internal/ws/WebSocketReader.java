/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  okhttp3.internal.ws.WebSocketReader$FrameCallback
 *  okio.Buffer
 *  okio.BufferedSource
 *  okio.ByteString
 *  okio.Timeout
 */
package okhttp3.internal.ws;

import java.io.IOException;
import java.net.ProtocolException;
import java.util.concurrent.TimeUnit;
import okhttp3.internal.ws.WebSocketProtocol;
import okhttp3.internal.ws.WebSocketReader;
import okio.Buffer;
import okio.BufferedSource;
import okio.ByteString;
import okio.Timeout;

final class WebSocketReader {
    boolean closed;
    private final Buffer controlFrameBuffer = new Buffer();
    final  frameCallback;
    long frameLength;
    final boolean isClient;
    boolean isControlFrame;
    boolean isFinalFrame;
    private final Buffer.UnsafeCursor maskCursor;
    private final byte[] maskKey;
    private final Buffer messageFrameBuffer = new Buffer();
    int opcode;
    final BufferedSource source;

    WebSocketReader(boolean bl, BufferedSource object,  frameCallback) {
        if (object == null) {
            throw new NullPointerException("source == null");
        }
        if (frameCallback == null) {
            throw new NullPointerException("frameCallback == null");
        }
        this.isClient = bl;
        this.source = object;
        this.frameCallback = frameCallback;
        frameCallback = null;
        object = bl ? null : new byte[4];
        this.maskKey = object;
        object = bl ? frameCallback : new Buffer.UnsafeCursor();
        this.maskCursor = object;
    }

    private void readControlFrame() throws IOException {
        if (this.frameLength > 0L) {
            this.source.readFully(this.controlFrameBuffer, this.frameLength);
            if (!this.isClient) {
                this.controlFrameBuffer.readAndWriteUnsafe(this.maskCursor);
                this.maskCursor.seek(0L);
                WebSocketProtocol.toggleMask(this.maskCursor, this.maskKey);
                this.maskCursor.close();
            }
        }
        switch (this.opcode) {
            default: {
                StringBuilder stringBuilder = new StringBuilder();
                stringBuilder.append("Unknown control opcode: ");
                stringBuilder.append(Integer.toHexString(this.opcode));
                throw new ProtocolException(stringBuilder.toString());
            }
            case 10: {
                this.frameCallback.onReadPong(this.controlFrameBuffer.readByteString());
                return;
            }
            case 9: {
                this.frameCallback.onReadPing(this.controlFrameBuffer.readByteString());
                return;
            }
            case 8: 
        }
        int n = 1005;
        String string2 = "";
        long l = this.controlFrameBuffer.size();
        if (l == 1L) {
            throw new ProtocolException("Malformed close payload length of 1.");
        }
        if (l != 0L) {
            n = this.controlFrameBuffer.readShort();
            string2 = this.controlFrameBuffer.readUtf8();
            String string3 = WebSocketProtocol.closeCodeExceptionMessage(n);
            if (string3 != null) {
                throw new ProtocolException(string3);
            }
        }
        this.frameCallback.onReadClose(n, string2);
        this.closed = true;
    }

    private void readHeader() throws IOException {
        int n;
        if (this.closed) {
            throw new IOException("closed");
        }
        long l = this.source.timeout().timeoutNanos();
        this.source.timeout().clearTimeout();
        try {
            n = this.source.readByte();
        }
        catch (Throwable throwable) {
            this.source.timeout().timeout(l, TimeUnit.NANOSECONDS);
            throw throwable;
        }
        int n2 = n & 255;
        this.source.timeout().timeout(l, TimeUnit.NANOSECONDS);
        this.opcode = n2 & 15;
        boolean bl = false;
        boolean bl2 = (n2 & 128) != 0;
        this.isFinalFrame = bl2;
        bl2 = (n2 & 8) != 0;
        this.isControlFrame = bl2;
        if (this.isControlFrame && !this.isFinalFrame) {
            throw new ProtocolException("Control frames must be final.");
        }
        n = (n2 & 64) != 0 ? 1 : 0;
        boolean bl3 = (n2 & 32) != 0;
        n2 = (n2 & 16) != 0 ? 1 : 0;
        if (n == 0 && !bl3 && n2 == 0) {
            n = this.source.readByte() & 255;
            bl2 = bl;
            if ((n & 128) != 0) {
                bl2 = true;
            }
            if (bl2 == this.isClient) {
                String string2 = this.isClient ? "Server-sent frames must not be masked." : "Client-sent frames must be masked.";
                throw new ProtocolException(string2);
            }
            this.frameLength = n & 127;
            if (this.frameLength == 126L) {
                this.frameLength = (long)this.source.readShort() & 65535L;
            } else if (this.frameLength == 127L) {
                this.frameLength = this.source.readLong();
                if (this.frameLength < 0L) {
                    StringBuilder stringBuilder = new StringBuilder();
                    stringBuilder.append("Frame length 0x");
                    stringBuilder.append(Long.toHexString(this.frameLength));
                    stringBuilder.append(" > 0x7FFFFFFFFFFFFFFF");
                    throw new ProtocolException(stringBuilder.toString());
                }
            }
            if (this.isControlFrame && this.frameLength > 125L) {
                throw new ProtocolException("Control frame must be less than 125B.");
            }
            if (bl2) {
                this.source.readFully(this.maskKey);
            }
            return;
        }
        throw new ProtocolException("Reserved flags are unsupported.");
    }

    private void readMessage() throws IOException {
        do {
            if (this.closed) {
                throw new IOException("closed");
            }
            if (this.frameLength > 0L) {
                this.source.readFully(this.messageFrameBuffer, this.frameLength);
                if (!this.isClient) {
                    this.messageFrameBuffer.readAndWriteUnsafe(this.maskCursor);
                    this.maskCursor.seek(this.messageFrameBuffer.size() - this.frameLength);
                    WebSocketProtocol.toggleMask(this.maskCursor, this.maskKey);
                    this.maskCursor.close();
                }
            }
            if (this.isFinalFrame) {
                return;
            }
            this.readUntilNonControlFrame();
        } while (this.opcode == 0);
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("Expected continuation opcode. Got: ");
        stringBuilder.append(Integer.toHexString(this.opcode));
        throw new ProtocolException(stringBuilder.toString());
    }

    private void readMessageFrame() throws IOException {
        int n = this.opcode;
        if (n != 1 && n != 2) {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("Unknown opcode: ");
            stringBuilder.append(Integer.toHexString(n));
            throw new ProtocolException(stringBuilder.toString());
        }
        this.readMessage();
        if (n == 1) {
            this.frameCallback.onReadMessage(this.messageFrameBuffer.readUtf8());
            return;
        }
        this.frameCallback.onReadMessage(this.messageFrameBuffer.readByteString());
    }

    private void readUntilNonControlFrame() throws IOException {
        while (!this.closed) {
            this.readHeader();
            if (!this.isControlFrame) {
                return;
            }
            this.readControlFrame();
        }
    }

    void processNextFrame() throws IOException {
        this.readHeader();
        if (this.isControlFrame) {
            this.readControlFrame();
            return;
        }
        this.readMessageFrame();
    }
}

