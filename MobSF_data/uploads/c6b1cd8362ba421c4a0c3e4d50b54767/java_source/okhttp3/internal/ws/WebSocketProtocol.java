/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  okio.Buffer
 *  okio.ByteString
 */
package okhttp3.internal.ws;

import okio.Buffer;
import okio.ByteString;

public final class WebSocketProtocol {
    static final String ACCEPT_MAGIC = "258EAFA5-E914-47DA-95CA-C5AB0DC85B11";
    static final int B0_FLAG_FIN = 128;
    static final int B0_FLAG_RSV1 = 64;
    static final int B0_FLAG_RSV2 = 32;
    static final int B0_FLAG_RSV3 = 16;
    static final int B0_MASK_OPCODE = 15;
    static final int B1_FLAG_MASK = 128;
    static final int B1_MASK_LENGTH = 127;
    static final int CLOSE_CLIENT_GOING_AWAY = 1001;
    static final long CLOSE_MESSAGE_MAX = 123L;
    static final int CLOSE_NO_STATUS_CODE = 1005;
    static final int OPCODE_BINARY = 2;
    static final int OPCODE_CONTINUATION = 0;
    static final int OPCODE_CONTROL_CLOSE = 8;
    static final int OPCODE_CONTROL_PING = 9;
    static final int OPCODE_CONTROL_PONG = 10;
    static final int OPCODE_FLAG_CONTROL = 8;
    static final int OPCODE_TEXT = 1;
    static final long PAYLOAD_BYTE_MAX = 125L;
    static final int PAYLOAD_LONG = 127;
    static final int PAYLOAD_SHORT = 126;
    static final long PAYLOAD_SHORT_MAX = 65535L;

    private WebSocketProtocol() {
        throw new AssertionError((Object)"No instances.");
    }

    public static String acceptHeader(String string2) {
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append(string2);
        stringBuilder.append(ACCEPT_MAGIC);
        return ByteString.encodeUtf8((String)stringBuilder.toString()).sha1().base64();
    }

    static String closeCodeExceptionMessage(int n) {
        if (n >= 1000 && n < 5000) {
            if (n >= 1004 && n <= 1006 || n >= 1012 && n <= 2999) {
                StringBuilder stringBuilder = new StringBuilder();
                stringBuilder.append("Code ");
                stringBuilder.append(n);
                stringBuilder.append(" is reserved and may not be used.");
                return stringBuilder.toString();
            }
            return null;
        }
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("Code must be in range [1000,5000): ");
        stringBuilder.append(n);
        return stringBuilder.toString();
    }

    static void toggleMask(Buffer.UnsafeCursor unsafeCursor, byte[] arrby) {
        int n = arrby.length;
        int n2 = 0;
        do {
            byte[] arrby2 = unsafeCursor.data;
            int n3 = unsafeCursor.start;
            int n4 = unsafeCursor.end;
            while (n3 < n4) {
                arrby2[n3] = (byte)(arrby2[n3] ^ arrby[n2 %= n]);
                ++n3;
                ++n2;
            }
        } while (unsafeCursor.next() != -1);
    }

    static void validateCloseCode(int n) {
        String string2 = WebSocketProtocol.closeCodeExceptionMessage(n);
        if (string2 != null) {
            throw new IllegalArgumentException(string2);
        }
    }
}

