/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  javax.annotation.Nullable
 *  okhttp3.Call
 *  okhttp3.Callback
 *  okhttp3.Protocol
 *  okhttp3.internal.Internal
 *  okhttp3.internal.ws.RealWebSocket$1
 *  okhttp3.internal.ws.RealWebSocket$2
 *  okhttp3.internal.ws.RealWebSocket$CancelRunnable
 *  okhttp3.internal.ws.RealWebSocket$Close
 *  okhttp3.internal.ws.RealWebSocket$Message
 *  okhttp3.internal.ws.RealWebSocket$PingRunnable
 *  okhttp3.internal.ws.RealWebSocket$Streams
 *  okhttp3.internal.ws.WebSocketProtocol
 *  okhttp3.internal.ws.WebSocketReader
 *  okhttp3.internal.ws.WebSocketWriter
 *  okio.Okio
 */
package okhttp3.internal.ws;

import java.io.Closeable;
import java.io.IOException;
import java.io.Serializable;
import java.net.ProtocolException;
import java.net.SocketTimeoutException;
import java.util.ArrayDeque;
import java.util.Collections;
import java.util.List;
import java.util.Random;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.TimeUnit;
import javax.annotation.Nullable;
import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.EventListener;
import okhttp3.OkHttpClient;
import okhttp3.Protocol;
import okhttp3.Request;
import okhttp3.Response;
import okhttp3.WebSocket;
import okhttp3.WebSocketListener;
import okhttp3.internal.Internal;
import okhttp3.internal.Util;
import okhttp3.internal.ws.RealWebSocket;
import okhttp3.internal.ws.WebSocketProtocol;
import okhttp3.internal.ws.WebSocketReader;
import okhttp3.internal.ws.WebSocketWriter;
import okio.BufferedSink;
import okio.BufferedSource;
import okio.ByteString;
import okio.Okio;
import okio.Sink;

public final class RealWebSocket
implements WebSocket,
WebSocketReader.FrameCallback {
    static final /* synthetic */ boolean $assertionsDisabled = false;
    private static final long CANCEL_AFTER_CLOSE_MILLIS = 60000L;
    private static final long MAX_QUEUE_SIZE = 0x1000000L;
    private static final List<Protocol> ONLY_HTTP1 = Collections.singletonList(Protocol.HTTP_1_1);
    private boolean awaitingPong;
    private Call call;
    private ScheduledFuture<?> cancelFuture;
    private boolean enqueuedClose;
    private ScheduledExecutorService executor;
    private boolean failed;
    private final String key;
    final WebSocketListener listener;
    private final ArrayDeque<Object> messageAndCloseQueue = new ArrayDeque();
    private final Request originalRequest;
    private final long pingIntervalMillis;
    private final ArrayDeque<ByteString> pongQueue = new ArrayDeque();
    private long queueSize;
    private final Random random;
    private WebSocketReader reader;
    private int receivedCloseCode = -1;
    private String receivedCloseReason;
    private int receivedPingCount;
    private int receivedPongCount;
    private int sentPingCount;
    private  streams;
    private WebSocketWriter writer;
    private final Runnable writerRunnable;

    public RealWebSocket(Request arrby, WebSocketListener object, Random random, long l) {
        if (!"GET".equals(arrby.method())) {
            object = new StringBuilder();
            object.append("Request must be GET: ");
            object.append(arrby.method());
            throw new IllegalArgumentException(object.toString());
        }
        this.originalRequest = arrby;
        this.listener = object;
        this.random = random;
        this.pingIntervalMillis = l;
        arrby = new byte[16];
        random.nextBytes(arrby);
        this.key = ByteString.of(arrby).base64();
        this.writerRunnable = new 1(this);
    }

    private void runWriter() {
        if (this.executor != null) {
            this.executor.execute(this.writerRunnable);
        }
    }

    private boolean send(ByteString byteString, int n) {
        synchronized (this) {
            if (!this.failed) {
                if (this.enqueuedClose) {
                } else {
                    if (this.queueSize + (long)byteString.size() > 0x1000000L) {
                        this.close(1001, null);
                        return false;
                    }
                    this.queueSize += (long)byteString.size();
                    this.messageAndCloseQueue.add((Object)new /* Unavailable Anonymous Inner Class!! */);
                    this.runWriter();
                    return true;
                }
            }
            return false;
        }
    }

    void awaitTermination(int n, TimeUnit timeUnit) throws InterruptedException {
        this.executor.awaitTermination(n, timeUnit);
    }

    @Override
    public void cancel() {
        this.call.cancel();
    }

    void checkResponse(Response object) throws ProtocolException {
        if (object.code() != 101) {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("Expected HTTP 101 response but was '");
            stringBuilder.append(object.code());
            stringBuilder.append(" ");
            stringBuilder.append(object.message());
            stringBuilder.append("'");
            throw new ProtocolException(stringBuilder.toString());
        }
        CharSequence charSequence = object.header("Connection");
        if (!"Upgrade".equalsIgnoreCase((String)charSequence)) {
            object = new StringBuilder();
            object.append("Expected 'Connection' header value 'Upgrade' but was '");
            object.append((String)charSequence);
            object.append("'");
            throw new ProtocolException(object.toString());
        }
        charSequence = object.header("Upgrade");
        if (!"websocket".equalsIgnoreCase((String)charSequence)) {
            object = new StringBuilder();
            object.append("Expected 'Upgrade' header value 'websocket' but was '");
            object.append((String)charSequence);
            object.append("'");
            throw new ProtocolException(object.toString());
        }
        object = object.header("Sec-WebSocket-Accept");
        charSequence = new StringBuilder();
        charSequence.append(this.key);
        charSequence.append("258EAFA5-E914-47DA-95CA-C5AB0DC85B11");
        charSequence = ByteString.encodeUtf8(charSequence.toString()).sha1().base64();
        if (!charSequence.equals(object)) {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("Expected 'Sec-WebSocket-Accept' header value '");
            stringBuilder.append((String)charSequence);
            stringBuilder.append("' but was '");
            stringBuilder.append((String)object);
            stringBuilder.append("'");
            throw new ProtocolException(stringBuilder.toString());
        }
    }

    @Override
    public boolean close(int n, String string2) {
        return this.close(n, string2, 60000L);
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    boolean close(int n, String string2, long l) {
        synchronized (this) {
            WebSocketProtocol.validateCloseCode((int)n);
            Serializable serializable = null;
            if (string2 != null) {
                ByteString byteString = ByteString.encodeUtf8(string2);
                serializable = byteString;
                if ((long)byteString.size() > 123L) {
                    serializable = new StringBuilder();
                    serializable.append("reason.size() > 123: ");
                    serializable.append(string2);
                    throw new IllegalArgumentException(serializable.toString());
                }
            }
            if (!this.failed && !this.enqueuedClose) {
                void var3_3;
                this.enqueuedClose = true;
                this.messageAndCloseQueue.add((Object)new /* Unavailable Anonymous Inner Class!! */);
                this.runWriter();
                return true;
            }
            return false;
        }
    }

    public void connect(OkHttpClient okHttpClient) {
        okHttpClient = okHttpClient.newBuilder().eventListener(EventListener.NONE).protocols(ONLY_HTTP1).build();
        Request request = this.originalRequest.newBuilder().header("Upgrade", "websocket").header("Connection", "Upgrade").header("Sec-WebSocket-Key", this.key).header("Sec-WebSocket-Version", "13").build();
        this.call = Internal.instance.newWebSocketCall(okHttpClient, request);
        this.call.enqueue((Callback)new 2(this, request));
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public void failWebSocket(Exception exception, @Nullable Response response) {
         streams;
        synchronized (this) {
            if (this.failed) {
                return;
            }
            this.failed = true;
            streams = this.streams;
            this.streams = null;
            if (this.cancelFuture != null) {
                this.cancelFuture.cancel(false);
            }
            if (this.executor != null) {
                this.executor.shutdown();
            }
        }
        try {
            this.listener.onFailure(this, exception, response);
            return;
        }
        finally {
            Util.closeQuietly((Closeable)streams);
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public void initReaderAndWriter(String string2,  streams) throws IOException {
        synchronized (this) {
            this.streams = streams;
            this.writer = new WebSocketWriter(streams.client, streams.sink, this.random);
            this.executor = new ScheduledThreadPoolExecutor(1, Util.threadFactory(string2, false));
            if (this.pingIntervalMillis != 0L) {
                this.executor.scheduleAtFixedRate((Runnable)new /* Unavailable Anonymous Inner Class!! */, this.pingIntervalMillis, this.pingIntervalMillis, TimeUnit.MILLISECONDS);
            }
            if (!this.messageAndCloseQueue.isEmpty()) {
                this.runWriter();
            }
        }
        this.reader = new WebSocketReader(streams.client, streams.source, (WebSocketReader.FrameCallback)this);
    }

    public void loopReader() throws IOException {
        while (this.receivedCloseCode == -1) {
            this.reader.processNextFrame();
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @Override
    public void onReadClose(int n, String string2) {
         streams;
        if (n == -1) {
            throw new IllegalArgumentException();
        }
        synchronized (this) {
            if (this.receivedCloseCode != -1) {
                throw new IllegalStateException("already closed");
            }
            this.receivedCloseCode = n;
            this.receivedCloseReason = string2;
            if (this.enqueuedClose && this.messageAndCloseQueue.isEmpty()) {
                streams = this.streams;
                this.streams = null;
                if (this.cancelFuture != null) {
                    this.cancelFuture.cancel(false);
                }
                this.executor.shutdown();
            } else {
                streams = null;
            }
        }
        try {
            this.listener.onClosing(this, n, string2);
            if (streams == null) return;
            this.listener.onClosed(this, n, string2);
            return;
        }
        finally {
            Util.closeQuietly((Closeable)streams);
        }
    }

    @Override
    public void onReadMessage(String string2) throws IOException {
        this.listener.onMessage((WebSocket)this, string2);
    }

    @Override
    public void onReadMessage(ByteString byteString) throws IOException {
        this.listener.onMessage((WebSocket)this, byteString);
    }

    @Override
    public void onReadPing(ByteString byteString) {
        synchronized (this) {
            if (!(this.failed || this.enqueuedClose && this.messageAndCloseQueue.isEmpty())) {
                this.pongQueue.add(byteString);
                this.runWriter();
                ++this.receivedPingCount;
                return;
            }
            return;
        }
    }

    @Override
    public void onReadPong(ByteString byteString) {
        synchronized (this) {
            ++this.receivedPongCount;
            this.awaitingPong = false;
            return;
        }
    }

    boolean pong(ByteString byteString) {
        synchronized (this) {
            if (!this.failed) {
                if (this.enqueuedClose && this.messageAndCloseQueue.isEmpty()) {
                } else {
                    this.pongQueue.add(byteString);
                    this.runWriter();
                    return true;
                }
            }
            return false;
        }
    }

    boolean processNextFrame() throws IOException {
        boolean bl = false;
        try {
            this.reader.processNextFrame();
            int n = this.receivedCloseCode;
            if (n == -1) {
                bl = true;
            }
            return bl;
        }
        catch (Exception exception) {
            this.failWebSocket(exception, null);
            return false;
        }
    }

    @Override
    public long queueSize() {
        synchronized (this) {
            long l = this.queueSize;
            return l;
        }
    }

    int receivedPingCount() {
        synchronized (this) {
            int n = this.receivedPingCount;
            return n;
        }
    }

    int receivedPongCount() {
        synchronized (this) {
            int n = this.receivedPongCount;
            return n;
        }
    }

    @Override
    public Request request() {
        return this.originalRequest;
    }

    @Override
    public boolean send(String string2) {
        if (string2 == null) {
            throw new NullPointerException("text == null");
        }
        return this.send(ByteString.encodeUtf8(string2), 1);
    }

    @Override
    public boolean send(ByteString byteString) {
        if (byteString == null) {
            throw new NullPointerException("bytes == null");
        }
        return this.send(byteString, 2);
    }

    int sentPingCount() {
        synchronized (this) {
            int n = this.sentPingCount;
            return n;
        }
    }

    void tearDown() throws InterruptedException {
        if (this.cancelFuture != null) {
            this.cancelFuture.cancel(false);
        }
        this.executor.shutdown();
        this.executor.awaitTermination(10L, TimeUnit.SECONDS);
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Converted monitor instructions to comments
     * Lifted jumps to return sites
     */
    boolean writeOneFrame() throws IOException {
        block14 : {
            block13 : {
                block17 : {
                    block18 : {
                        block15 : {
                            block16 : {
                                // MONITORENTER : this
                                if (this.failed) {
                                    // MONITOREXIT : this
                                    return false;
                                }
                                var5_1 = this.writer;
                                var6_2 = this.pongQueue.poll();
                                var3_3 = null;
                                if (var6_2 != null) break block15;
                                var2_4 = this.messageAndCloseQueue.poll();
                                if (!(var2_4 instanceof )) break block16;
                                var1_6 = this.receivedCloseCode;
                                var4_7 = this.receivedCloseReason;
                                if (var1_6 != -1) {
                                    var3_3 = this.streams;
                                    this.streams = null;
                                    this.executor.shutdown();
                                } else {
                                    this.cancelFuture = this.executor.schedule((Runnable)new /* Unavailable Anonymous Inner Class!! */, (var2_4).cancelAfterCloseMillis, TimeUnit.MILLISECONDS);
                                }
                                break block17;
                            }
                            if (var2_4 == null) {
                                // MONITOREXIT : this
                                return false;
                            }
                            break block18;
                        }
                        var2_4 = null;
                    }
                    var4_7 = null;
                    var1_6 = -1;
                }
                // MONITOREXIT : this
                if (var6_2 == null) ** GOTO lbl36
                var5_1.writePong(var6_2);
                break block13;
lbl36: // 1 sources:
                if (!(var2_4 instanceof )) ** GOTO lbl-1000
                var4_7 = (var2_4).data;
                var2_4 = Okio.buffer((Sink)var5_1.newMessageSink((var2_4).formatOpcode, (long)var4_7.size()));
                var2_4.write((ByteString)var4_7);
                var2_4.close();
                // MONITORENTER : this
                this.queueSize -= (long)var4_7.size();
                // MONITOREXIT : this
                break block13;
lbl-1000: // 1 sources:
                {
                    if (!(var2_4 instanceof )) break block14;
                    var2_4 = var2_4;
                    var5_1.writeClose(var2_4.code, var2_4.reason);
                    if (var3_3 == null) break block13;
                    this.listener.onClosed(this, var1_6, (String)var4_7);
                }
            }
            Util.closeQuietly(var3_3);
            return true;
        }
        try {
            throw new AssertionError();
        }
        catch (Throwable var2_5) {}
        Util.closeQuietly(var3_3);
        throw var2_5;
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Converted monitor instructions to comments
     * Lifted jumps to return sites
     */
    void writePingFrame() {
        // MONITORENTER : this
        if (this.failed) {
            // MONITOREXIT : this
            return;
        }
        Object object = this.writer;
        int n = this.awaitingPong ? this.sentPingCount : -1;
        ++this.sentPingCount;
        this.awaitingPong = true;
        // MONITOREXIT : this
        if (n != -1) {
            object = new StringBuilder();
            object.append("sent ping but didn't receive pong within ");
            object.append(this.pingIntervalMillis);
            object.append("ms (after ");
            object.append(n - 1);
            object.append(" successful ping/pongs)");
            this.failWebSocket(new SocketTimeoutException(object.toString()), null);
            return;
        }
        try {
            object.writePing(ByteString.EMPTY);
            return;
        }
        catch (IOException iOException) {
            this.failWebSocket(iOException, null);
            return;
        }
    }
}

