/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  okio.Buffer
 *  okio.BufferedSink
 *  okio.ByteString
 *  okio.Sink
 *  okio.Timeout
 */
package okhttp3.internal.ws;

import java.io.IOException;
import java.util.Random;
import okhttp3.internal.ws.WebSocketProtocol;
import okio.Buffer;
import okio.BufferedSink;
import okio.ByteString;
import okio.Sink;
import okio.Timeout;

final class WebSocketWriter {
    boolean activeWriter;
    final Buffer buffer = new Buffer();
    final FrameSink frameSink = new FrameSink();
    final boolean isClient;
    private final Buffer.UnsafeCursor maskCursor;
    private final byte[] maskKey;
    final Random random;
    final BufferedSink sink;
    final Buffer sinkBuffer;
    boolean writerClosed;

    WebSocketWriter(boolean bl, BufferedSink object, Random random) {
        if (object == null) {
            throw new NullPointerException("sink == null");
        }
        if (random == null) {
            throw new NullPointerException("random == null");
        }
        this.isClient = bl;
        this.sink = object;
        this.sinkBuffer = object.buffer();
        this.random = random;
        random = null;
        object = bl ? new byte[4] : null;
        this.maskKey = object;
        object = random;
        if (bl) {
            object = new Buffer.UnsafeCursor();
        }
        this.maskCursor = object;
    }

    private void writeControlFrame(int n, ByteString byteString) throws IOException {
        if (this.writerClosed) {
            throw new IOException("closed");
        }
        int n2 = byteString.size();
        if ((long)n2 > 125L) {
            throw new IllegalArgumentException("Payload size must be less than or equal to 125");
        }
        this.sinkBuffer.writeByte(n | 128);
        if (this.isClient) {
            this.sinkBuffer.writeByte(n2 | 128);
            this.random.nextBytes(this.maskKey);
            this.sinkBuffer.write(this.maskKey);
            if (n2 > 0) {
                long l = this.sinkBuffer.size();
                this.sinkBuffer.write(byteString);
                this.sinkBuffer.readAndWriteUnsafe(this.maskCursor);
                this.maskCursor.seek(l);
                WebSocketProtocol.toggleMask(this.maskCursor, this.maskKey);
                this.maskCursor.close();
            }
        } else {
            this.sinkBuffer.writeByte(n2);
            this.sinkBuffer.write(byteString);
        }
        this.sink.flush();
    }

    Sink newMessageSink(int n, long l) {
        if (this.activeWriter) {
            throw new IllegalStateException("Another message writer is active. Did you call close()?");
        }
        this.activeWriter = true;
        this.frameSink.formatOpcode = n;
        this.frameSink.contentLength = l;
        this.frameSink.isFirstFrame = true;
        this.frameSink.closed = false;
        return this.frameSink;
    }

    void writeClose(int n, ByteString byteString) throws IOException {
        ByteString byteString2 = ByteString.EMPTY;
        if (n != 0 || byteString != null) {
            if (n != 0) {
                WebSocketProtocol.validateCloseCode(n);
            }
            byteString2 = new Buffer();
            byteString2.writeShort(n);
            if (byteString != null) {
                byteString2.write(byteString);
            }
            byteString2 = byteString2.readByteString();
        }
        try {
            this.writeControlFrame(8, byteString2);
            return;
        }
        finally {
            this.writerClosed = true;
        }
    }

    void writeMessageFrame(int n, long l, boolean bl, boolean bl2) throws IOException {
        if (this.writerClosed) {
            throw new IOException("closed");
        }
        int n2 = 0;
        if (!bl) {
            n = 0;
        }
        int n3 = n;
        if (bl2) {
            n3 = n | 128;
        }
        this.sinkBuffer.writeByte(n3);
        n = n2;
        if (this.isClient) {
            n = 128;
        }
        if (l <= 125L) {
            n3 = (int)l;
            this.sinkBuffer.writeByte(n3 | n);
        } else if (l <= 65535L) {
            this.sinkBuffer.writeByte(n | 126);
            this.sinkBuffer.writeShort((int)l);
        } else {
            this.sinkBuffer.writeByte(n | 127);
            this.sinkBuffer.writeLong(l);
        }
        if (this.isClient) {
            this.random.nextBytes(this.maskKey);
            this.sinkBuffer.write(this.maskKey);
            if (l > 0L) {
                long l2 = this.sinkBuffer.size();
                this.sinkBuffer.write(this.buffer, l);
                this.sinkBuffer.readAndWriteUnsafe(this.maskCursor);
                this.maskCursor.seek(l2);
                WebSocketProtocol.toggleMask(this.maskCursor, this.maskKey);
                this.maskCursor.close();
            }
        } else {
            this.sinkBuffer.write(this.buffer, l);
        }
        this.sink.emit();
    }

    void writePing(ByteString byteString) throws IOException {
        this.writeControlFrame(9, byteString);
    }

    void writePong(ByteString byteString) throws IOException {
        this.writeControlFrame(10, byteString);
    }

    final class FrameSink
    implements Sink {
        boolean closed;
        long contentLength;
        int formatOpcode;
        boolean isFirstFrame;

        FrameSink() {
        }

        public void close() throws IOException {
            if (this.closed) {
                throw new IOException("closed");
            }
            WebSocketWriter.this.writeMessageFrame(this.formatOpcode, WebSocketWriter.this.buffer.size(), this.isFirstFrame, true);
            this.closed = true;
            WebSocketWriter.this.activeWriter = false;
        }

        public void flush() throws IOException {
            if (this.closed) {
                throw new IOException("closed");
            }
            WebSocketWriter.this.writeMessageFrame(this.formatOpcode, WebSocketWriter.this.buffer.size(), this.isFirstFrame, false);
            this.isFirstFrame = false;
        }

        public Timeout timeout() {
            return WebSocketWriter.this.sink.timeout();
        }

        public void write(Buffer buffer, long l) throws IOException {
            if (this.closed) {
                throw new IOException("closed");
            }
            WebSocketWriter.this.buffer.write(buffer, l);
            boolean bl = this.isFirstFrame && this.contentLength != -1L && WebSocketWriter.this.buffer.size() > this.contentLength - 8192L;
            l = WebSocketWriter.this.buffer.completeSegmentByteCount();
            if (l > 0L && !bl) {
                WebSocketWriter.this.writeMessageFrame(this.formatOpcode, l, this.isFirstFrame, false);
                this.isFirstFrame = false;
            }
        }
    }

}

