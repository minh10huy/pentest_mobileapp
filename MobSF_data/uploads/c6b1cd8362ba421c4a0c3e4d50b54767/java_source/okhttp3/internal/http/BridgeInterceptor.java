/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  okhttp3.Cookie
 *  okhttp3.Headers
 *  okhttp3.HttpUrl
 *  okhttp3.Interceptor$Chain
 *  okhttp3.MediaType
 *  okhttp3.Request
 *  okhttp3.Request$Builder
 *  okhttp3.RequestBody
 *  okhttp3.Response
 *  okhttp3.Response$Builder
 *  okhttp3.ResponseBody
 *  okhttp3.internal.Util
 *  okhttp3.internal.http.RealResponseBody
 *  okio.BufferedSource
 *  okio.Source
 */
package okhttp3.internal.http;

import java.io.IOException;
import java.util.List;
import okhttp3.Cookie;
import okhttp3.CookieJar;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.Interceptor;
import okhttp3.MediaType;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import okhttp3.ResponseBody;
import okhttp3.internal.Util;
import okhttp3.internal.Version;
import okhttp3.internal.http.HttpHeaders;
import okhttp3.internal.http.RealResponseBody;
import okio.BufferedSource;
import okio.GzipSource;
import okio.Okio;
import okio.Source;

public final class BridgeInterceptor
implements Interceptor {
    private final CookieJar cookieJar;

    public BridgeInterceptor(CookieJar cookieJar) {
        this.cookieJar = cookieJar;
    }

    private String cookieHeader(List<Cookie> list) {
        StringBuilder stringBuilder = new StringBuilder();
        int n = list.size();
        for (int i = 0; i < n; ++i) {
            if (i > 0) {
                stringBuilder.append("; ");
            }
            Cookie cookie = list.get(i);
            stringBuilder.append(cookie.name());
            stringBuilder.append('=');
            stringBuilder.append(cookie.value());
        }
        return stringBuilder.toString();
    }

    @Override
    public Response intercept(Interceptor chain) throws IOException {
        Request request = chain.request();
        Object object = request.newBuilder();
        Object object2 = request.body();
        if (object2 != null) {
            long l;
            MediaType mediaType = object2.contentType();
            if (mediaType != null) {
                object.header("Content-Type", mediaType.toString());
            }
            if ((l = object2.contentLength()) != -1L) {
                object.header("Content-Length", Long.toString(l));
                object.removeHeader("Transfer-Encoding");
            } else {
                object.header("Transfer-Encoding", "chunked");
                object.removeHeader("Content-Length");
            }
        }
        object2 = request.header("Host");
        boolean bl = false;
        if (object2 == null) {
            object.header("Host", Util.hostHeader((HttpUrl)request.url(), (boolean)false));
        }
        if (request.header("Connection") == null) {
            object.header("Connection", "Keep-Alive");
        }
        boolean bl2 = bl;
        if (request.header("Accept-Encoding") == null) {
            bl2 = bl;
            if (request.header("Range") == null) {
                bl2 = true;
                object.header("Accept-Encoding", "gzip");
            }
        }
        if (!(object2 = this.cookieJar.loadForRequest(request.url())).isEmpty()) {
            object.header("Cookie", this.cookieHeader((List<Cookie>)object2));
        }
        if (request.header("User-Agent") == null) {
            object.header("User-Agent", Version.userAgent());
        }
        chain = chain.proceed(object.build());
        HttpHeaders.receiveHeaders(this.cookieJar, request.url(), chain.headers());
        request = chain.newBuilder().request(request);
        if (bl2 && "gzip".equalsIgnoreCase(chain.header("Content-Encoding")) && HttpHeaders.hasBody((Response)chain)) {
            object = new GzipSource((Source)chain.body().source());
            request.headers(chain.headers().newBuilder().removeAll("Content-Encoding").removeAll("Content-Length").build());
            request.body((ResponseBody)new RealResponseBody(chain.header("Content-Type"), -1L, Okio.buffer((Source)object)));
        }
        return request.build();
    }
}

