/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  okhttp3.Challenge
 *  okhttp3.Cookie
 *  okhttp3.Headers
 *  okhttp3.HttpUrl
 *  okhttp3.Request
 *  okhttp3.Response
 *  okhttp3.internal.Util
 */
package okhttp3.internal.http;

import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import okhttp3.Challenge;
import okhttp3.Cookie;
import okhttp3.CookieJar;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.Request;
import okhttp3.Response;
import okhttp3.internal.Util;

public final class HttpHeaders {
    private static final Pattern PARAMETER = Pattern.compile(" +([^ \"=]*)=(:?\"([^\"]*)\"|([^ \"=]*)) *(:?,|$)");
    private static final String QUOTED_STRING = "\"([^\"]*)\"";
    private static final String TOKEN = "([^ \"=]*)";

    private HttpHeaders() {
    }

    public static long contentLength(Headers headers) {
        return HttpHeaders.stringToLong(headers.get("Content-Length"));
    }

    public static long contentLength(Response response) {
        return HttpHeaders.contentLength(response.headers());
    }

    public static boolean hasBody(Response response) {
        if (response.request().method().equals("HEAD")) {
            return false;
        }
        int n = response.code();
        if ((n < 100 || n >= 200) && n != 204 && n != 304) {
            return true;
        }
        if (HttpHeaders.contentLength(response) == -1L) {
            if ("chunked".equalsIgnoreCase(response.header("Transfer-Encoding"))) {
                return true;
            }
            return false;
        }
        return true;
    }

    public static boolean hasVaryAll(Headers headers) {
        return HttpHeaders.varyFields(headers).contains("*");
    }

    public static boolean hasVaryAll(Response response) {
        return HttpHeaders.hasVaryAll(response.headers());
    }

    public static List<Challenge> parseChallenges(Headers object, String string2) {
        ArrayList<Challenge> arrayList = new ArrayList<Challenge>();
        for (String string3 : object.values(string2)) {
            Object object2;
            String string4;
            int n = string3.indexOf(32);
            if (n == -1) continue;
            String string5 = string3.substring(0, n);
            Matcher matcher = PARAMETER.matcher(string3);
            object = null;
            string2 = object;
            do {
                object2 = object;
                string4 = string2;
                if (!matcher.find(n)) break;
                if (string3.regionMatches(true, matcher.start(1), "realm", 0, 5)) {
                    string4 = matcher.group(3);
                } else {
                    string4 = object;
                    if (string3.regionMatches(true, matcher.start(1), "charset", 0, 7)) {
                        string2 = matcher.group(3);
                        string4 = object;
                    }
                }
                if (string4 != null && string2 != null) {
                    object2 = string4;
                    string4 = string2;
                    break;
                }
                n = matcher.end();
                object = string4;
            } while (true);
            if (object2 == null) continue;
            string2 = new Challenge(string5, (String)object2);
            object = string2;
            if (string4 != null) {
                if (!string4.equalsIgnoreCase("UTF-8")) continue;
                object = string2.withCharset(Util.UTF_8);
            }
            arrayList.add((Challenge)object);
        }
        return arrayList;
    }

    public static int parseSeconds(String string2, int n) {
        long l;
        block3 : {
            try {
                l = Long.parseLong(string2);
                if (l > Integer.MAX_VALUE) {
                    return Integer.MAX_VALUE;
                }
                if (l >= 0L) break block3;
                return 0;
            }
            catch (NumberFormatException numberFormatException) {
                return n;
            }
        }
        return (int)l;
    }

    public static void receiveHeaders(CookieJar cookieJar, HttpUrl httpUrl, Headers object) {
        if (cookieJar == CookieJar.NO_COOKIES) {
            return;
        }
        if ((object = Cookie.parseAll((HttpUrl)httpUrl, (Headers)object)).isEmpty()) {
            return;
        }
        cookieJar.saveFromResponse(httpUrl, (List<Cookie>)object);
    }

    public static int skipUntil(String string2, int n, String string3) {
        while (n < string2.length()) {
            if (string3.indexOf(string2.charAt(n)) != -1) {
                return n;
            }
            ++n;
        }
        return n;
    }

    public static int skipWhitespace(String string2, int n) {
        while (n < string2.length()) {
            char c = string2.charAt(n);
            if (c != ' ' && c != '\t') {
                return n;
            }
            ++n;
        }
        return n;
    }

    private static long stringToLong(String string2) {
        if (string2 == null) {
            return -1L;
        }
        try {
            long l = Long.parseLong(string2);
            return l;
        }
        catch (NumberFormatException numberFormatException) {
            return -1L;
        }
    }

    public static Set<String> varyFields(Headers headers) {
        Set<String> set = Collections.emptySet();
        int n = headers.size();
        block0 : for (int i = 0; i < n; ++i) {
            if (!"Vary".equalsIgnoreCase(headers.name(i))) continue;
            String[] arrstring = headers.value(i);
            Set<String> set2 = set;
            if (set.isEmpty()) {
                set2 = new TreeSet<String>(String.CASE_INSENSITIVE_ORDER);
            }
            arrstring = arrstring.split(",");
            int n2 = arrstring.length;
            int n3 = 0;
            do {
                set = set2;
                if (n3 >= n2) continue block0;
                set2.add(arrstring[n3].trim());
                ++n3;
            } while (true);
        }
        return set;
    }

    private static Set<String> varyFields(Response response) {
        return HttpHeaders.varyFields(response.headers());
    }

    public static Headers varyHeaders(Headers headers, Headers object) {
        if ((object = HttpHeaders.varyFields((Headers)object)).isEmpty()) {
            return new Headers.Builder().build();
        }
        Headers.Builder builder2 = new Headers.Builder();
        int n = headers.size();
        for (int i = 0; i < n; ++i) {
            String string2 = headers.name(i);
            if (!object.contains(string2)) continue;
            builder2.add(string2, headers.value(i));
        }
        return builder2.build();
    }

    public static Headers varyHeaders(Response response) {
        return HttpHeaders.varyHeaders(response.networkResponse().request().headers(), response.headers());
    }

    public static boolean varyMatches(Response object, Headers headers, Request request) {
        for (String string2 : HttpHeaders.varyFields((Response)object)) {
            if (Util.equal((Object)headers.values(string2), (Object)request.headers(string2))) continue;
            return false;
        }
        return true;
    }
}

