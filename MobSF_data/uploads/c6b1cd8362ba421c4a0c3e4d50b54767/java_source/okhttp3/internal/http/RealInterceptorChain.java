/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  okhttp3.Connection
 *  okhttp3.EventListener
 *  okhttp3.HttpUrl
 *  okhttp3.Interceptor$Chain
 *  okhttp3.Request
 *  okhttp3.Response
 *  okhttp3.ResponseBody
 *  okhttp3.internal.Util
 *  okhttp3.internal.connection.RealConnection
 */
package okhttp3.internal.http;

import java.io.IOException;
import java.util.List;
import java.util.concurrent.TimeUnit;
import okhttp3.Call;
import okhttp3.Connection;
import okhttp3.EventListener;
import okhttp3.HttpUrl;
import okhttp3.Interceptor;
import okhttp3.Request;
import okhttp3.Response;
import okhttp3.ResponseBody;
import okhttp3.internal.Util;
import okhttp3.internal.connection.RealConnection;
import okhttp3.internal.connection.StreamAllocation;
import okhttp3.internal.http.HttpCodec;

public final class RealInterceptorChain
implements Interceptor {
    private final Call call;
    private int calls;
    private final int connectTimeout;
    private final RealConnection connection;
    private final EventListener eventListener;
    private final HttpCodec httpCodec;
    private final int index;
    private final List<Interceptor> interceptors;
    private final int readTimeout;
    private final Request request;
    private final StreamAllocation streamAllocation;
    private final int writeTimeout;

    public RealInterceptorChain(List<Interceptor> list, StreamAllocation streamAllocation, HttpCodec httpCodec, RealConnection realConnection, int n, Request request, Call call, EventListener eventListener, int n2, int n3, int n4) {
        this.interceptors = list;
        this.connection = realConnection;
        this.streamAllocation = streamAllocation;
        this.httpCodec = httpCodec;
        this.index = n;
        this.request = request;
        this.call = call;
        this.eventListener = eventListener;
        this.connectTimeout = n2;
        this.readTimeout = n3;
        this.writeTimeout = n4;
    }

    public Call call() {
        return this.call;
    }

    public int connectTimeoutMillis() {
        return this.connectTimeout;
    }

    public Connection connection() {
        return this.connection;
    }

    public EventListener eventListener() {
        return this.eventListener;
    }

    public HttpCodec httpStream() {
        return this.httpCodec;
    }

    public Response proceed(Request request) throws IOException {
        return this.proceed(request, this.streamAllocation, this.httpCodec, this.connection);
    }

    public Response proceed(Request object, StreamAllocation object2, HttpCodec httpCodec, RealConnection realConnection) throws IOException {
        if (this.index >= this.interceptors.size()) {
            throw new AssertionError();
        }
        ++this.calls;
        if (this.httpCodec != null && !this.connection.supportsUrl(object.url())) {
            object = new StringBuilder();
            object.append("network interceptor ");
            object.append(this.interceptors.get(this.index - 1));
            object.append(" must retain the same host and port");
            throw new IllegalStateException(object.toString());
        }
        if (this.httpCodec != null && this.calls > 1) {
            object = new StringBuilder();
            object.append("network interceptor ");
            object.append(this.interceptors.get(this.index - 1));
            object.append(" must call proceed() exactly once");
            throw new IllegalStateException(object.toString());
        }
        object2 = new RealInterceptorChain(this.interceptors, (StreamAllocation)object2, httpCodec, realConnection, this.index + 1, (Request)object, this.call, this.eventListener, this.connectTimeout, this.readTimeout, this.writeTimeout);
        object = this.interceptors.get(this.index);
        realConnection = object.intercept(object2);
        if (httpCodec != null && this.index + 1 < this.interceptors.size() && object2.calls != 1) {
            object2 = new StringBuilder();
            object2.append("network interceptor ");
            object2.append(object);
            object2.append(" must call proceed() exactly once");
            throw new IllegalStateException(object2.toString());
        }
        if (realConnection == null) {
            object2 = new StringBuilder();
            object2.append("interceptor ");
            object2.append(object);
            object2.append(" returned null");
            throw new NullPointerException(object2.toString());
        }
        if (realConnection.body() == null) {
            object2 = new StringBuilder();
            object2.append("interceptor ");
            object2.append(object);
            object2.append(" returned a response with no body");
            throw new IllegalStateException(object2.toString());
        }
        return realConnection;
    }

    public int readTimeoutMillis() {
        return this.readTimeout;
    }

    public Request request() {
        return this.request;
    }

    public StreamAllocation streamAllocation() {
        return this.streamAllocation;
    }

    public Interceptor withConnectTimeout(int n, TimeUnit timeUnit) {
        n = Util.checkDuration((String)"timeout", (long)n, (TimeUnit)timeUnit);
        return new RealInterceptorChain(this.interceptors, this.streamAllocation, this.httpCodec, this.connection, this.index, this.request, this.call, this.eventListener, n, this.readTimeout, this.writeTimeout);
    }

    public Interceptor withReadTimeout(int n, TimeUnit timeUnit) {
        n = Util.checkDuration((String)"timeout", (long)n, (TimeUnit)timeUnit);
        return new RealInterceptorChain(this.interceptors, this.streamAllocation, this.httpCodec, this.connection, this.index, this.request, this.call, this.eventListener, this.connectTimeout, n, this.writeTimeout);
    }

    public Interceptor withWriteTimeout(int n, TimeUnit timeUnit) {
        n = Util.checkDuration((String)"timeout", (long)n, (TimeUnit)timeUnit);
        return new RealInterceptorChain(this.interceptors, this.streamAllocation, this.httpCodec, this.connection, this.index, this.request, this.call, this.eventListener, this.connectTimeout, this.readTimeout, n);
    }

    public int writeTimeoutMillis() {
        return this.writeTimeout;
    }
}

