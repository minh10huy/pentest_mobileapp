/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  javax.annotation.Nullable
 *  okio.Okio
 */
package okhttp3;

import java.io.Closeable;
import java.io.File;
import java.io.IOException;
import java.nio.charset.Charset;
import javax.annotation.Nullable;
import okhttp3.MediaType;
import okhttp3.internal.Util;
import okio.BufferedSink;
import okio.ByteString;
import okio.Okio;
import okio.Source;

public abstract class RequestBody {
    public static RequestBody create(@Nullable MediaType mediaType, final File file) {
        if (file == null) {
            throw new NullPointerException("content == null");
        }
        return new RequestBody(){

            @Override
            public long contentLength() {
                return file.length();
            }

            @Nullable
            @Override
            public MediaType contentType() {
                return MediaType.this;
            }

            /*
             * Loose catch block
             * Enabled aggressive block sorting
             * Enabled unnecessary exception pruning
             * Enabled aggressive exception aggregation
             * Lifted jumps to return sites
             */
            @Override
            public void writeTo(BufferedSink closeable) throws IOException {
                Object object;
                block4 : {
                    Object var3_2 = null;
                    object = Okio.source((File)file);
                    try {
                        closeable.writeAll((Source)object);
                    }
                    catch (Throwable throwable) {
                        closeable = object;
                        object = throwable;
                        break block4;
                    }
                    Util.closeQuietly((Closeable)object);
                    return;
                    catch (Throwable throwable) {
                        closeable = var3_2;
                    }
                }
                Util.closeQuietly(closeable);
                throw object;
            }
        };
    }

    public static RequestBody create(@Nullable MediaType mediaType, String string2) {
        Charset charset = Util.UTF_8;
        Object object = mediaType;
        if (mediaType != null) {
            Charset charset2;
            charset = charset2 = mediaType.charset();
            object = mediaType;
            if (charset2 == null) {
                charset = Util.UTF_8;
                object = new StringBuilder();
                object.append(mediaType);
                object.append("; charset=utf-8");
                object = MediaType.parse(object.toString());
            }
        }
        return RequestBody.create((MediaType)object, string2.getBytes(charset));
    }

    public static RequestBody create(@Nullable MediaType mediaType, final ByteString byteString) {
        return new RequestBody(){

            @Override
            public long contentLength() throws IOException {
                return byteString.size();
            }

            @Nullable
            @Override
            public MediaType contentType() {
                return MediaType.this;
            }

            @Override
            public void writeTo(BufferedSink bufferedSink) throws IOException {
                bufferedSink.write(byteString);
            }
        };
    }

    public static RequestBody create(@Nullable MediaType mediaType, byte[] arrby) {
        return RequestBody.create(mediaType, arrby, 0, arrby.length);
    }

    public static RequestBody create(@Nullable MediaType mediaType, final byte[] arrby, final int n, final int n2) {
        if (arrby == null) {
            throw new NullPointerException("content == null");
        }
        Util.checkOffsetAndCount(arrby.length, n, n2);
        return new RequestBody(){

            @Override
            public long contentLength() {
                return n2;
            }

            @Nullable
            @Override
            public MediaType contentType() {
                return MediaType.this;
            }

            @Override
            public void writeTo(BufferedSink bufferedSink) throws IOException {
                bufferedSink.write(arrby, n, n2);
            }
        };
    }

    public long contentLength() throws IOException {
        return -1L;
    }

    @Nullable
    public abstract MediaType contentType();

    public abstract void writeTo(BufferedSink var1) throws IOException;

}

