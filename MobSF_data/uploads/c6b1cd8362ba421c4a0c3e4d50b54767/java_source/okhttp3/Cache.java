/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  javax.annotation.Nullable
 *  okhttp3.Cache$1
 *  okhttp3.Cache$CacheRequestImpl
 *  okhttp3.Cache$CacheResponseBody$1
 *  okhttp3.CipherSuite
 *  okhttp3.Headers$Builder
 *  okhttp3.Protocol
 *  okhttp3.TlsVersion
 *  okhttp3.internal.cache.CacheRequest
 *  okhttp3.internal.cache.DiskLruCache$Editor
 *  okhttp3.internal.cache.InternalCache
 *  okhttp3.internal.http.HttpHeaders
 *  okhttp3.internal.http.HttpMethod
 *  okhttp3.internal.http.StatusLine
 *  okhttp3.internal.io.FileSystem
 *  okio.Okio
 */
package okhttp3;

import java.io.Closeable;
import java.io.File;
import java.io.Flushable;
import java.io.IOException;
import java.io.InputStream;
import java.security.cert.Certificate;
import java.security.cert.CertificateEncodingException;
import java.security.cert.CertificateException;
import java.security.cert.CertificateFactory;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;
import java.util.NoSuchElementException;
import javax.annotation.Nullable;
import okhttp3.Cache;
import okhttp3.CipherSuite;
import okhttp3.Handshake;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.MediaType;
import okhttp3.Protocol;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import okhttp3.ResponseBody;
import okhttp3.TlsVersion;
import okhttp3.internal.Util;
import okhttp3.internal.cache.CacheRequest;
import okhttp3.internal.cache.CacheStrategy;
import okhttp3.internal.cache.DiskLruCache;
import okhttp3.internal.cache.InternalCache;
import okhttp3.internal.http.HttpHeaders;
import okhttp3.internal.http.HttpMethod;
import okhttp3.internal.http.StatusLine;
import okhttp3.internal.io.FileSystem;
import okhttp3.internal.platform.Platform;
import okio.Buffer;
import okio.BufferedSink;
import okio.BufferedSource;
import okio.ByteString;
import okio.Okio;
import okio.Sink;
import okio.Source;

public final class Cache
implements Closeable,
Flushable {
    private static final int ENTRY_BODY = 1;
    private static final int ENTRY_COUNT = 2;
    private static final int ENTRY_METADATA = 0;
    private static final int VERSION = 201105;
    final DiskLruCache cache;
    private int hitCount;
    final InternalCache internalCache = new 1(this);
    private int networkCount;
    private int requestCount;
    int writeAbortCount;
    int writeSuccessCount;

    public Cache(File file, long l) {
        this(file, l, FileSystem.SYSTEM);
    }

    Cache(File file, long l, FileSystem fileSystem) {
        this.cache = DiskLruCache.create(fileSystem, file, 201105, 2, l);
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    private void abortQuietly(@Nullable DiskLruCache editor) {
        if (editor == null) return;
        try {
            editor.abort();
            return;
        }
        catch (IOException iOException) {
            return;
        }
    }

    public static String key(HttpUrl httpUrl) {
        return ByteString.encodeUtf8(httpUrl.toString()).md5().hex();
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    static int readInt(BufferedSource object) throws IOException {
        try {
            long l = object.readDecimalLong();
            object = object.readUtf8LineStrict();
            if (l >= 0L && l <= Integer.MAX_VALUE) {
                if (object.isEmpty()) return (int)l;
            }
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("expected an int but was \"");
            stringBuilder.append(l);
            stringBuilder.append((String)object);
            stringBuilder.append("\"");
            throw new IOException(stringBuilder.toString());
        }
        catch (NumberFormatException numberFormatException) {
            throw new IOException(numberFormatException.getMessage());
        }
    }

    @Override
    public void close() throws IOException {
        this.cache.close();
    }

    public void delete() throws IOException {
        this.cache.delete();
    }

    public File directory() {
        return this.cache.getDirectory();
    }

    public void evictAll() throws IOException {
        this.cache.evictAll();
    }

    @Override
    public void flush() throws IOException {
        this.cache.flush();
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @Nullable
    Response get(Request request) {
        Object object;
        block5 : {
            block4 : {
                object = Cache.key(request.url());
                try {
                    object = this.cache.get((String)object);
                    if (object != null) break block4;
                    return null;
                }
                catch (IOException iOException) {
                    return null;
                }
            }
            try {
                Entry entry = new Entry(object.getSource(0));
                object = entry.response((DiskLruCache.Snapshot)object);
                if (entry.matches(request, (Response)object)) break block5;
            }
            catch (IOException iOException) {}
            Util.closeQuietly(object.body());
            return null;
        }
        return object;
        Util.closeQuietly((Closeable)object);
        return null;
    }

    public int hitCount() {
        synchronized (this) {
            int n = this.hitCount;
            return n;
        }
    }

    public void initialize() throws IOException {
        this.cache.initialize();
    }

    public boolean isClosed() {
        return this.cache.isClosed();
    }

    public long maxSize() {
        return this.cache.getMaxSize();
    }

    public int networkCount() {
        synchronized (this) {
            int n = this.networkCount;
            return n;
        }
    }

    /*
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    @Nullable
    CacheRequest put(Response response) {
        Object object;
        block9 : {
            object = response.request().method();
            if (HttpMethod.invalidatesCache((String)response.request().method())) {
                this.remove(response.request());
                return null;
            }
            if (!object.equals("GET")) {
                return null;
            }
            if (HttpHeaders.hasVaryAll((Response)response)) {
                return null;
            }
            object = new Entry(response);
            try {
                response = this.cache.edit(Cache.key(response.request().url()));
                if (response != null) break block9;
                return null;
            }
            catch (IOException iOException) {}
        }
        try {
            object.writeTo(response);
            return new /* Unavailable Anonymous Inner Class!! */;
        }
        catch (IOException iOException) {}
        catch (IOException iOException) {
            return null;
        }
        response = null;
        this.abortQuietly(response);
        return null;
    }

    void remove(Request request) throws IOException {
        this.cache.remove(Cache.key(request.url()));
    }

    public int requestCount() {
        synchronized (this) {
            int n = this.requestCount;
            return n;
        }
    }

    public long size() throws IOException {
        return this.cache.size();
    }

    void trackConditionalCacheHit() {
        synchronized (this) {
            ++this.hitCount;
            return;
        }
    }

    void trackResponse(CacheStrategy cacheStrategy) {
        synchronized (this) {
            ++this.requestCount;
            if (cacheStrategy.networkRequest != null) {
                ++this.networkCount;
            } else if (cacheStrategy.cacheResponse != null) {
                ++this.hitCount;
            }
            return;
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    void update(Response closeable, Response object) {
        object = new Entry((Response)object);
        closeable = ((CacheResponseBody)closeable.body()).snapshot;
        try {
            closeable = closeable.edit();
            if (closeable == null) return;
        }
        catch (IOException iOException) {}
        try {
            object.writeTo(closeable);
            closeable.commit();
            return;
        }
        catch (IOException iOException) {}
        closeable = null;
        this.abortQuietly(closeable);
    }

    public Iterator<String> urls() throws IOException {
        return new Iterator<String>(){
            boolean canRemove;
            final Iterator<DiskLruCache.Snapshot> delegate;
            @Nullable
            String nextUrl;
            {
                this.delegate = Cache.this.cache.snapshots();
            }

            /*
             * Enabled aggressive block sorting
             * Enabled unnecessary exception pruning
             * Enabled aggressive exception aggregation
             */
            @Override
            public boolean hasNext() {
                if (this.nextUrl != null) {
                    return true;
                }
                this.canRemove = false;
                while (this.delegate.hasNext()) {
                    DiskLruCache.Snapshot snapshot = this.delegate.next();
                    try {
                        this.nextUrl = Okio.buffer((Source)snapshot.getSource(0)).readUtf8LineStrict();
                        snapshot.close();
                        return true;
                    }
                    catch (Throwable throwable) {
                        snapshot.close();
                        throw throwable;
                    }
                    catch (IOException iOException) {}
                    snapshot.close();
                }
                return false;
            }

            @Override
            public String next() {
                if (!this.hasNext()) {
                    throw new NoSuchElementException();
                }
                String string2 = this.nextUrl;
                this.nextUrl = null;
                this.canRemove = true;
                return string2;
            }

            @Override
            public void remove() {
                if (!this.canRemove) {
                    throw new IllegalStateException("remove() before next()");
                }
                this.delegate.remove();
            }
        };
    }

    public int writeAbortCount() {
        synchronized (this) {
            int n = this.writeAbortCount;
            return n;
        }
    }

    public int writeSuccessCount() {
        synchronized (this) {
            int n = this.writeSuccessCount;
            return n;
        }
    }

    private static class CacheResponseBody
    extends ResponseBody {
        private final BufferedSource bodySource;
        @Nullable
        private final String contentLength;
        @Nullable
        private final String contentType;
        final DiskLruCache.Snapshot snapshot;

        CacheResponseBody(DiskLruCache.Snapshot snapshot, String string2, String string3) {
            this.snapshot = snapshot;
            this.contentType = string2;
            this.contentLength = string3;
            this.bodySource = Okio.buffer((Source)new 1(this, snapshot.getSource(1), snapshot));
        }

        @Override
        public long contentLength() {
            long l = -1L;
            try {
                if (this.contentLength != null) {
                    l = Long.parseLong(this.contentLength);
                }
                return l;
            }
            catch (NumberFormatException numberFormatException) {
                return -1L;
            }
        }

        @Override
        public MediaType contentType() {
            if (this.contentType != null) {
                return MediaType.parse(this.contentType);
            }
            return null;
        }

        @Override
        public BufferedSource source() {
            return this.bodySource;
        }
    }

    private static final class Entry {
        private static final String RECEIVED_MILLIS;
        private static final String SENT_MILLIS;
        private final int code;
        @Nullable
        private final Handshake handshake;
        private final String message;
        private final Protocol protocol;
        private final long receivedResponseMillis;
        private final String requestMethod;
        private final Headers responseHeaders;
        private final long sentRequestMillis;
        private final String url;
        private final Headers varyHeaders;

        static {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append(Platform.get().getPrefix());
            stringBuilder.append("-Sent-Millis");
            SENT_MILLIS = stringBuilder.toString();
            stringBuilder = new StringBuilder();
            stringBuilder.append(Platform.get().getPrefix());
            stringBuilder.append("-Received-Millis");
            RECEIVED_MILLIS = stringBuilder.toString();
        }

        Entry(Response response) {
            this.url = response.request().url().toString();
            this.varyHeaders = HttpHeaders.varyHeaders((Response)response);
            this.requestMethod = response.request().method();
            this.protocol = response.protocol();
            this.code = response.code();
            this.message = response.message();
            this.responseHeaders = response.headers();
            this.handshake = response.handshake();
            this.sentRequestMillis = response.sentRequestAtMillis();
            this.receivedResponseMillis = response.receivedResponseAtMillis();
        }

        /*
         * Enabled aggressive block sorting
         * Enabled unnecessary exception pruning
         * Enabled aggressive exception aggregation
         */
        Entry(Source source) throws IOException {
            try {
                int n;
                Object object = Okio.buffer((Source)source);
                this.url = object.readUtf8LineStrict();
                this.requestMethod = object.readUtf8LineStrict();
                Object object2 = new Headers();
                int n2 = Cache.readInt((BufferedSource)object);
                int n3 = 0;
                for (n = 0; n < n2; ++n) {
                    object2.addLenient(object.readUtf8LineStrict());
                }
                this.varyHeaders = object2.build();
                object2 = StatusLine.parse((String)object.readUtf8LineStrict());
                this.protocol = object2.protocol;
                this.code = object2.code;
                this.message = object2.message;
                object2 = new Headers();
                n2 = Cache.readInt((BufferedSource)object);
                for (n = n3; n < n2; ++n) {
                    object2.addLenient(object.readUtf8LineStrict());
                }
                Object object3 = object2.get(SENT_MILLIS);
                Object object4 = object2.get(RECEIVED_MILLIS);
                object2.removeAll(SENT_MILLIS);
                object2.removeAll(RECEIVED_MILLIS);
                long l = 0L;
                long l2 = object3 != null ? Long.parseLong((String)object3) : 0L;
                this.sentRequestMillis = l2;
                l2 = l;
                if (object4 != null) {
                    l2 = Long.parseLong((String)object4);
                }
                this.receivedResponseMillis = l2;
                this.responseHeaders = object2.build();
                if (this.isHttps()) {
                    object2 = object.readUtf8LineStrict();
                    if (object2.length() > 0) {
                        object = new StringBuilder();
                        object.append("expected \"\" but was \"");
                        object.append((String)object2);
                        object.append("\"");
                        throw new IOException(object.toString());
                    }
                    object2 = CipherSuite.forJavaName((String)object.readUtf8LineStrict());
                    object3 = this.readCertificateList((BufferedSource)object);
                    object4 = this.readCertificateList((BufferedSource)object);
                    object = !object.exhausted() ? TlsVersion.forJavaName((String)object.readUtf8LineStrict()) : TlsVersion.SSL_3_0;
                    this.handshake = Handshake.get((TlsVersion)object, (CipherSuite)object2, (List<Certificate>)object3, (List<Certificate>)object4);
                    return;
                } else {
                    this.handshake = null;
                }
                return;
            }
            finally {
                source.close();
            }
        }

        private boolean isHttps() {
            return this.url.startsWith("https://");
        }

        private List<Certificate> readCertificateList(BufferedSource bufferedSource) throws IOException {
            CertificateFactory certificateFactory;
            ArrayList<Certificate> arrayList;
            int n = Cache.readInt(bufferedSource);
            if (n == -1) {
                return Collections.emptyList();
            }
            try {
                certificateFactory = CertificateFactory.getInstance("X.509");
                arrayList = new ArrayList<Certificate>(n);
            }
            catch (CertificateException certificateException) {
                throw new IOException(certificateException.getMessage());
            }
            for (int i = 0; i < n; ++i) {
                String string2 = bufferedSource.readUtf8LineStrict();
                Buffer buffer = new Buffer();
                buffer.write(ByteString.decodeBase64(string2));
                arrayList.add(certificateFactory.generateCertificate(buffer.inputStream()));
                continue;
            }
            return arrayList;
        }

        private void writeCertList(BufferedSink bufferedSink, List<Certificate> list) throws IOException {
            int n;
            bufferedSink.writeDecimalLong(list.size()).writeByte(10);
            try {
                n = list.size();
            }
            catch (CertificateEncodingException certificateEncodingException) {
                throw new IOException(certificateEncodingException.getMessage());
            }
            for (int i = 0; i < n; ++i) {
                bufferedSink.writeUtf8(ByteString.of(list.get(i).getEncoded()).base64()).writeByte(10);
                continue;
            }
            return;
        }

        public boolean matches(Request request, Response response) {
            if (this.url.equals(request.url().toString()) && this.requestMethod.equals(request.method()) && HttpHeaders.varyMatches((Response)response, (Headers)this.varyHeaders, (Request)request)) {
                return true;
            }
            return false;
        }

        public Response response(DiskLruCache.Snapshot snapshot) {
            String string2 = this.responseHeaders.get("Content-Type");
            String string3 = this.responseHeaders.get("Content-Length");
            Request request = new Request.Builder().url(this.url).method(this.requestMethod, null).headers(this.varyHeaders).build();
            return new Response.Builder().request(request).protocol(this.protocol).code(this.code).message(this.message).headers(this.responseHeaders).body(new CacheResponseBody(snapshot, string2, string3)).handshake(this.handshake).sentRequestAtMillis(this.sentRequestMillis).receivedResponseAtMillis(this.receivedResponseMillis).build();
        }

        public void writeTo(DiskLruCache object) throws IOException {
            int n;
            int n2 = 0;
            object = Okio.buffer((Sink)object.newSink(0));
            object.writeUtf8(this.url).writeByte(10);
            object.writeUtf8(this.requestMethod).writeByte(10);
            object.writeDecimalLong(this.varyHeaders.size()).writeByte(10);
            int n3 = this.varyHeaders.size();
            for (n = 0; n < n3; ++n) {
                object.writeUtf8(this.varyHeaders.name(n)).writeUtf8(": ").writeUtf8(this.varyHeaders.value(n)).writeByte(10);
            }
            object.writeUtf8(new StatusLine(this.protocol, this.code, this.message).toString()).writeByte(10);
            object.writeDecimalLong(this.responseHeaders.size() + 2).writeByte(10);
            n3 = this.responseHeaders.size();
            for (n = n2; n < n3; ++n) {
                object.writeUtf8(this.responseHeaders.name(n)).writeUtf8(": ").writeUtf8(this.responseHeaders.value(n)).writeByte(10);
            }
            object.writeUtf8(SENT_MILLIS).writeUtf8(": ").writeDecimalLong(this.sentRequestMillis).writeByte(10);
            object.writeUtf8(RECEIVED_MILLIS).writeUtf8(": ").writeDecimalLong(this.receivedResponseMillis).writeByte(10);
            if (this.isHttps()) {
                object.writeByte(10);
                object.writeUtf8(this.handshake.cipherSuite().javaName()).writeByte(10);
                this.writeCertList((BufferedSink)object, this.handshake.peerCertificates());
                this.writeCertList((BufferedSink)object, this.handshake.localCertificates());
                object.writeUtf8(this.handshake.tlsVersion().javaName()).writeByte(10);
            }
            object.close();
        }
    }

}

