/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  javax.annotation.Nullable
 *  okhttp3.ResponseBody$BomAwareReader
 */
package okhttp3;

import java.io.Closeable;
import java.io.IOException;
import java.io.InputStream;
import java.io.Reader;
import java.nio.charset.Charset;
import javax.annotation.Nullable;
import okhttp3.MediaType;
import okhttp3.ResponseBody;
import okhttp3.internal.Util;
import okio.Buffer;
import okio.BufferedSource;

public abstract class ResponseBody
implements Closeable {
    private Reader reader;

    private Charset charset() {
        MediaType mediaType = this.contentType();
        if (mediaType != null) {
            return mediaType.charset(Util.UTF_8);
        }
        return Util.UTF_8;
    }

    public static ResponseBody create(@Nullable MediaType mediaType, final long l, final BufferedSource bufferedSource) {
        if (bufferedSource == null) {
            throw new NullPointerException("source == null");
        }
        return new ResponseBody(){

            @Override
            public long contentLength() {
                return l;
            }

            @Nullable
            @Override
            public MediaType contentType() {
                return MediaType.this;
            }

            @Override
            public BufferedSource source() {
                return bufferedSource;
            }
        };
    }

    public static ResponseBody create(@Nullable MediaType object, String string2) {
        Charset charset = Util.UTF_8;
        Object object2 = object;
        if (object != null) {
            Charset charset2;
            charset = charset2 = object.charset();
            object2 = object;
            if (charset2 == null) {
                charset = Util.UTF_8;
                object2 = new StringBuilder();
                object2.append(object);
                object2.append("; charset=utf-8");
                object2 = MediaType.parse(object2.toString());
            }
        }
        object = new Buffer().writeString(string2, charset);
        return ResponseBody.create((MediaType)object2, object.size(), (BufferedSource)object);
    }

    public static ResponseBody create(@Nullable MediaType mediaType, byte[] arrby) {
        Buffer buffer = new Buffer().write(arrby);
        return ResponseBody.create(mediaType, arrby.length, buffer);
    }

    public final InputStream byteStream() {
        return this.source().inputStream();
    }

    public final byte[] bytes() throws IOException {
        long l = this.contentLength();
        if (l > Integer.MAX_VALUE) {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("Cannot buffer entire body for content length: ");
            stringBuilder.append(l);
            throw new IOException(stringBuilder.toString());
        }
        Object object = this.source();
        byte[] arrby = object.readByteArray();
        if (l != -1L && l != (long)arrby.length) {
            object = new StringBuilder();
            object.append("Content-Length (");
            object.append(l);
            object.append(") and stream length (");
            object.append(arrby.length);
            object.append(") disagree");
            throw new IOException(object.toString());
        }
        return arrby;
        finally {
            Util.closeQuietly((Closeable)object);
        }
    }

    public final Reader charStream() {
        Reader reader = this.reader;
        if (reader != null) {
            return reader;
        }
        this.reader = reader = new /* Unavailable Anonymous Inner Class!! */;
        return reader;
    }

    @Override
    public void close() {
        Util.closeQuietly(this.source());
    }

    public abstract long contentLength();

    @Nullable
    public abstract MediaType contentType();

    public abstract BufferedSource source();

    public final String string() throws IOException {
        BufferedSource bufferedSource = this.source();
        try {
            String string2 = bufferedSource.readString(Util.bomAwareCharset(bufferedSource, this.charset()));
            return string2;
        }
        finally {
            Util.closeQuietly(bufferedSource);
        }
    }

}

