/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  kotlin.Metadata
 *  kotlin.collections.SlidingWindowKt$windowedIterator
 *  kotlin.collections.SlidingWindowKt$windowedSequence$
 *  kotlin.collections.SlidingWindowKt$windowedSequence$$inlined
 *  kotlin.collections.SlidingWindowKt$windowedSequence$$inlined$Sequence
 *  kotlin.jvm.functions.Function2
 *  kotlin.jvm.internal.Intrinsics
 *  org.jetbrains.annotations.NotNull
 */
package kotlin.collections;

import java.util.Iterator;
import java.util.List;
import kotlin.Metadata;
import kotlin.collections.EmptyIterator;
import kotlin.collections.SlidingWindowKt;
import kotlin.collections.SlidingWindowKt$windowedSequence$;
import kotlin.coroutines.experimental.Continuation;
import kotlin.coroutines.experimental.SequenceBuilderKt;
import kotlin.jvm.functions.Function2;
import kotlin.jvm.internal.Intrinsics;
import kotlin.sequences.Sequence;
import org.jetbrains.annotations.NotNull;

@Metadata(bv={1, 0, 2}, d1={"\u0000*\n\u0000\n\u0002\u0010\u0002\n\u0000\n\u0002\u0010\b\n\u0002\b\u0002\n\u0002\u0010(\n\u0002\u0010 \n\u0002\b\u0003\n\u0002\u0010\u000b\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0000\u001a\u0018\u0010\u0000\u001a\u00020\u00012\u0006\u0010\u0002\u001a\u00020\u00032\u0006\u0010\u0004\u001a\u00020\u0003H\u0000\u001aH\u0010\u0005\u001a\u000e\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\b0\u00070\u0006\"\u0004\b\u0000\u0010\b2\f\u0010\t\u001a\b\u0012\u0004\u0012\u0002H\b0\u00062\u0006\u0010\u0002\u001a\u00020\u00032\u0006\u0010\u0004\u001a\u00020\u00032\u0006\u0010\n\u001a\u00020\u000b2\u0006\u0010\f\u001a\u00020\u000bH\u0000\u001aD\u0010\r\u001a\u000e\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\b0\u00070\u000e\"\u0004\b\u0000\u0010\b*\b\u0012\u0004\u0012\u0002H\b0\u000e2\u0006\u0010\u0002\u001a\u00020\u00032\u0006\u0010\u0004\u001a\u00020\u00032\u0006\u0010\n\u001a\u00020\u000b2\u0006\u0010\f\u001a\u00020\u000bH\u0000\u00a8\u0006\u000f"}, d2={"checkWindowSizeStep", "", "size", "", "step", "windowedIterator", "", "", "T", "iterator", "partialWindows", "", "reuseBuffer", "windowedSequence", "Lkotlin/sequences/Sequence;", "kotlin-stdlib"}, k=2, mv={1, 1, 10})
public final class SlidingWindowKt {
    public static final void checkWindowSizeStep(int n, int n2) {
        boolean bl = n > 0 && n2 > 0;
        if (!bl) {
            CharSequence charSequence;
            if (n != n2) {
                charSequence = new StringBuilder();
                charSequence.append("Both size ");
                charSequence.append(n);
                charSequence.append(" and step ");
                charSequence.append(n2);
                charSequence.append(" must be greater than zero.");
                charSequence = charSequence.toString();
            } else {
                charSequence = new StringBuilder();
                charSequence.append("size ");
                charSequence.append(n);
                charSequence.append(" must be greater than zero.");
                charSequence = charSequence.toString();
            }
            throw (Throwable)new IllegalArgumentException(charSequence.toString());
        }
    }

    @NotNull
    public static final <T> Iterator<List<T>> windowedIterator(@NotNull Iterator<? extends T> iterator2, int n, int n2, boolean bl, boolean bl2) {
        Intrinsics.checkParameterIsNotNull(iterator2, (String)"iterator");
        if (!iterator2.hasNext()) {
            return EmptyIterator.INSTANCE;
        }
        return SequenceBuilderKt.buildIterator((Function2)new Function2<kotlin.coroutines.experimental.SequenceBuilder<? super List<? extends T>>, Continuation<? super kotlin.Unit>, Object>(n2, n, iterator2, bl2, bl, null){
            final /* synthetic */ Iterator $iterator;
            final /* synthetic */ boolean $partialWindows;
            final /* synthetic */ boolean $reuseBuffer;
            final /* synthetic */ int $size;
            final /* synthetic */ int $step;
            int I$0;
            int I$1;
            Object L$0;
            Object L$1;
            Object L$2;
            Object L$3;
            private kotlin.coroutines.experimental.SequenceBuilder p$;
            {
                this.$step = n;
                this.$size = n2;
                this.$iterator = iterator2;
                this.$reuseBuffer = bl;
                this.$partialWindows = bl2;
                super(2, continuation2);
            }

            @NotNull
            public final Continuation<kotlin.Unit> create(@NotNull kotlin.coroutines.experimental.SequenceBuilder<? super List<? extends T>> sequenceBuilder, @NotNull Continuation<? super kotlin.Unit> function2) {
                Intrinsics.checkParameterIsNotNull(sequenceBuilder, (String)"$receiver");
                Intrinsics.checkParameterIsNotNull(function2, (String)"continuation");
                function2 = new /* invalid duplicate definition of identical inner class */;
                function2.p$ = sequenceBuilder;
                return function2;
            }

            /*
             * Unable to fully structure code
             * Enabled force condition propagation
             * Lifted jumps to return sites
             */
            @org.jetbrains.annotations.Nullable
            public final Object doResume(@org.jetbrains.annotations.Nullable Object var1_1, @org.jetbrains.annotations.Nullable Throwable var2_2) {
                block21 : {
                    var1_1 = kotlin.coroutines.experimental.intrinsics.IntrinsicsKt.getCOROUTINE_SUSPENDED();
                    block0 : switch (this.label) {
                        default: {
                            throw new java.lang.IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                        }
                        case 5: {
                            var1_1 = (kotlin.collections.RingBuffer)this.L$0;
                            var3_3 = this.I$0;
                            if (var2_2 == null) return kotlin.Unit.INSTANCE;
                            throw var2_2;
                        }
                        case 4: {
                            var7_6 = (kotlin.collections.RingBuffer<java.util.ArrayList<E>>)this.L$1;
                            var3_4 = this.I$0;
                            var8_8 = (kotlin.coroutines.experimental.SequenceBuilder)this.L$0;
                            if (var2_2 != null) {
                                throw var2_2;
                            }
                            var9_10 = this;
                            var11_12 = var1_1;
                            ** GOTO lbl141
                        }
                        case 3: {
                            var8_8 = (Iterator)this.L$3;
                            var6_14 = this.L$2;
                            var7_6 = (kotlin.collections.RingBuffer)this.L$1;
                            var3_4 = this.I$0;
                            var9_10 = (kotlin.coroutines.experimental.SequenceBuilder)this.L$0;
                            if (var2_2 != null) {
                                throw var2_2;
                            }
                            var11_12 = this;
                            var12_15 = var1_1;
                            ** GOTO lbl124
                        }
                        case 2: {
                            var3_5 = this.I$1;
                            var1_1 = (java.util.ArrayList)this.L$0;
                            var3_5 = this.I$0;
                            if (var2_2 == null) return kotlin.Unit.INSTANCE;
                            throw var2_2;
                        }
                        case 1: {
                            var7_7 = (Iterator)this.L$3;
                            var6_14 = this.L$2;
                            var3_4 = this.I$1;
                            var6_14 = (java.util.ArrayList)this.L$1;
                            var4_17 = this.I$0;
                            var9_11 = (kotlin.coroutines.experimental.SequenceBuilder)this.L$0;
                            if (var2_2 != null) {
                                throw var2_2;
                            }
                            var12_16 = this;
                            var2_2 = var6_14;
                            var11_13 = var1_1;
                            break;
                        }
                        case 0: {
                            if (var2_2 != null) {
                                throw var2_2;
                            }
                            var6_14 = this.p$;
                            var3_4 = this.$step - this.$size;
                            if (var3_4 >= 0) {
                                var9_11 = new java.util.ArrayList<E>(this.$size);
                                var5_18 = 0;
                                var7_7 = this.$iterator;
                                var2_2 = this;
                                var10_19 = var6_14;
                                var4_17 = var3_4;
                                var6_14 = var2_2;
                                var8_9 = var1_1;
                                var3_4 = var5_18;
                                var1_1 = var9_11;
                                while (var7_7.hasNext()) {
                                    var2_2 = var7_7.next();
                                    if (var3_4 > 0) {
                                        --var3_4;
                                        continue;
                                    }
                                    var1_1.add(var2_2);
                                    if (var1_1.size() != var6_14.$size) continue;
                                    var6_14.L$0 = var10_19;
                                    var6_14.I$0 = var4_17;
                                    var6_14.L$1 = var1_1;
                                    var6_14.I$1 = var3_4;
                                    var6_14.L$2 = var2_2;
                                    var6_14.L$3 = var7_7;
                                    var6_14.label = 1;
                                    var2_2 = var1_1;
                                    var9_11 = var10_19;
                                    var11_13 = var8_9;
                                    var12_16 = var6_14;
                                    if (var10_19.yield(var1_1, (Continuation<? super kotlin.Unit>)var6_14) != var8_9) break block0;
                                    return var8_9;
                                }
                            }
                            break block21;
                        }
                    }
                    {
                        if (var12_16.$reuseBuffer) {
                            var2_2.clear();
                            var1_1 = var2_2;
                        } else {
                            var1_1 = new java.util.ArrayList<java.util.ArrayList<E>>(var12_16.$size);
                        }
                        var3_4 = var4_17;
                        var10_19 = var9_11;
                        var8_9 = var11_13;
                        var6_14 = var12_16;
                        continue;
                    }
                    if (!(((java.util.Collection)var1_1).isEmpty() ^ true) || !var6_14.$partialWindows && var1_1.size() != var6_14.$size) return kotlin.Unit.INSTANCE;
                    var6_14.I$0 = var4_17;
                    var6_14.L$0 = var1_1;
                    var6_14.I$1 = var3_4;
                    var6_14.label = 2;
                    if (var10_19.yield(var1_1, (Continuation<? super kotlin.Unit>)var6_14) != var8_9) return kotlin.Unit.INSTANCE;
                    return var8_9;
                }
                var7_6 = new kotlin.collections.RingBuffer<java.util.ArrayList<E>>(this.$size);
                var8_8 = this.$iterator;
                var2_2 = var1_1;
                var1_1 = this;
                while (var8_8.hasNext()) {
                    var9_10 = var8_8.next();
                    var7_6.add(var9_10);
                    if (!var7_6.isFull()) continue;
                    var10_20 = var1_1.$reuseBuffer != false ? (List)var7_6 : (List)new java.util.ArrayList<E>((java.util.Collection)var7_6);
                    var1_1.L$0 = var6_14;
                    var1_1.I$0 = var3_4;
                    var1_1.L$1 = var7_6;
                    var1_1.L$2 = var9_10;
                    var1_1.L$3 = var8_8;
                    var1_1.label = 3;
                    var9_10 = var6_14;
                    var11_12 = var1_1;
                    var12_15 = var2_2;
                    if (var6_14.yield(var10_20, (Continuation<? super kotlin.Unit>)var1_1) == var2_2) {
                        return var2_2;
                    }
lbl124: // 3 sources:
                    var7_6.removeFirst(var11_12.$step);
                    var6_14 = var9_10;
                    var1_1 = var11_12;
                    var2_2 = var12_15;
                }
                if (!var1_1.$partialWindows) return kotlin.Unit.INSTANCE;
                while (var7_6.size() > var1_1.$step) {
                    var10_20 = var1_1.$reuseBuffer != false ? (List)var7_6 : (List)new java.util.ArrayList<E>((java.util.Collection)var7_6);
                    var1_1.L$0 = var6_14;
                    var1_1.I$0 = var3_4;
                    var1_1.L$1 = var7_6;
                    var1_1.label = 4;
                    var8_8 = var6_14;
                    var9_10 = var1_1;
                    var11_12 = var2_2;
                    if (var6_14.yield(var10_20, (Continuation<? super kotlin.Unit>)var1_1) == var2_2) {
                        return var2_2;
                    }
lbl141: // 3 sources:
                    var7_6.removeFirst(var9_10.$step);
                    var6_14 = var8_8;
                    var1_1 = var9_10;
                    var2_2 = var11_12;
                }
                if (!(true ^ ((java.util.Collection)var7_6).isEmpty())) return kotlin.Unit.INSTANCE;
                var1_1.I$0 = var3_4;
                var1_1.L$0 = var7_6;
                var1_1.label = 5;
                if (var6_14.yield(var7_6, (Continuation<? super kotlin.Unit>)var1_1) != var2_2) return kotlin.Unit.INSTANCE;
                return var2_2;
            }

            @org.jetbrains.annotations.Nullable
            public final Object invoke(@NotNull kotlin.coroutines.experimental.SequenceBuilder<? super List<? extends T>> sequenceBuilder, @NotNull Continuation<? super kotlin.Unit> continuation2) {
                Intrinsics.checkParameterIsNotNull(sequenceBuilder, (String)"$receiver");
                Intrinsics.checkParameterIsNotNull(continuation2, (String)"continuation");
                return (this.create(sequenceBuilder, continuation2)).doResume((Object)kotlin.Unit.INSTANCE, null);
            }
        });
    }

    @NotNull
    public static final <T> Sequence<List<T>> windowedSequence(@NotNull Sequence<? extends T> sequence, int n, int n2, boolean bl, boolean bl2) {
        Intrinsics.checkParameterIsNotNull(sequence, (String)"$receiver");
        SlidingWindowKt.checkWindowSizeStep(n, n2);
        return new Sequence<List<? extends T>>(sequence, n, n2, bl, bl2){
            final /* synthetic */ boolean $partialWindows$inlined;
            final /* synthetic */ boolean $reuseBuffer$inlined;
            final /* synthetic */ int $size$inlined;
            final /* synthetic */ int $step$inlined;
            final /* synthetic */ Sequence receiver$0$inlined;
            {
                this.receiver$0$inlined = sequence;
                this.$size$inlined = n;
                this.$step$inlined = n2;
                this.$partialWindows$inlined = bl;
                this.$reuseBuffer$inlined = bl2;
            }

            @NotNull
            public Iterator<List<? extends T>> iterator() {
                return SlidingWindowKt.windowedIterator(this.receiver$0$inlined.iterator(), this.$size$inlined, this.$step$inlined, this.$partialWindows$inlined, this.$reuseBuffer$inlined);
            }
        };
    }
}

