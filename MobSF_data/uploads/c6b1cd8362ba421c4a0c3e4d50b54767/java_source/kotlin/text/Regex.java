/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  kotlin.Metadata
 *  kotlin.PublishedApi
 *  kotlin.jvm.functions.Function0
 *  kotlin.jvm.functions.Function1
 *  kotlin.jvm.internal.DefaultConstructorMarker
 *  kotlin.jvm.internal.Intrinsics
 *  kotlin.text.Regex$findAll
 *  kotlin.text.Regex$fromInt$
 *  kotlin.text.Regex$fromInt$$inlined
 *  kotlin.text.Regex$fromInt$$inlined$apply
 *  kotlin.text.Regex$fromInt$$inlined$apply$lambda
 *  org.jetbrains.annotations.NotNull
 *  org.jetbrains.annotations.Nullable
 */
package kotlin.text;

import java.io.Serializable;
import java.util.Collections;
import java.util.EnumSet;
import java.util.List;
import java.util.Set;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import kotlin.Metadata;
import kotlin.PublishedApi;
import kotlin.collections.ArraysKt;
import kotlin.collections.CollectionsKt;
import kotlin.jvm.functions.Function0;
import kotlin.jvm.functions.Function1;
import kotlin.jvm.internal.DefaultConstructorMarker;
import kotlin.jvm.internal.Intrinsics;
import kotlin.ranges.IntRange;
import kotlin.sequences.Sequence;
import kotlin.sequences.SequencesKt;
import kotlin.text.MatchResult;
import kotlin.text.Regex;
import kotlin.text.Regex$fromInt$;
import kotlin.text.RegexKt;
import kotlin.text.RegexOption;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

@Metadata(bv={1, 0, 2}, d1={"\u0000f\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\u000e\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0010\"\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0007\n\u0002\u0010\u000b\n\u0000\n\u0002\u0010\r\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\b\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0010 \n\u0002\b\u0004\n\u0002\u0010\u0000\n\u0002\b\u0003\u0018\u0000 ,2\u00060\u0001j\u0002`\u0002:\u0002,-B\u000f\b\u0016\u0012\u0006\u0010\u0003\u001a\u00020\u0004\u00a2\u0006\u0002\u0010\u0005B\u0017\b\u0016\u0012\u0006\u0010\u0003\u001a\u00020\u0004\u0012\u0006\u0010\u0006\u001a\u00020\u0007\u00a2\u0006\u0002\u0010\bB\u001d\b\u0016\u0012\u0006\u0010\u0003\u001a\u00020\u0004\u0012\f\u0010\t\u001a\b\u0012\u0004\u0012\u00020\u00070\n\u00a2\u0006\u0002\u0010\u000bB\u000f\b\u0001\u0012\u0006\u0010\f\u001a\u00020\r\u00a2\u0006\u0002\u0010\u000eJ\u000e\u0010\u0014\u001a\u00020\u00152\u0006\u0010\u0016\u001a\u00020\u0017J\u001a\u0010\u0018\u001a\u0004\u0018\u00010\u00192\u0006\u0010\u0016\u001a\u00020\u00172\b\b\u0002\u0010\u001a\u001a\u00020\u001bJ\u001e\u0010\u001c\u001a\b\u0012\u0004\u0012\u00020\u00190\u001d2\u0006\u0010\u0016\u001a\u00020\u00172\b\b\u0002\u0010\u001a\u001a\u00020\u001bJ\u0010\u0010\u001e\u001a\u0004\u0018\u00010\u00192\u0006\u0010\u0016\u001a\u00020\u0017J\u0011\u0010\u001f\u001a\u00020\u00152\u0006\u0010\u0016\u001a\u00020\u0017H\u0086\u0004J\"\u0010 \u001a\u00020\u00042\u0006\u0010\u0016\u001a\u00020\u00172\u0012\u0010!\u001a\u000e\u0012\u0004\u0012\u00020\u0019\u0012\u0004\u0012\u00020\u00170\"J\u0016\u0010 \u001a\u00020\u00042\u0006\u0010\u0016\u001a\u00020\u00172\u0006\u0010#\u001a\u00020\u0004J\u0016\u0010$\u001a\u00020\u00042\u0006\u0010\u0016\u001a\u00020\u00172\u0006\u0010#\u001a\u00020\u0004J\u001e\u0010%\u001a\b\u0012\u0004\u0012\u00020\u00040&2\u0006\u0010\u0016\u001a\u00020\u00172\b\b\u0002\u0010'\u001a\u00020\u001bJ\u0006\u0010(\u001a\u00020\rJ\b\u0010)\u001a\u00020\u0004H\u0016J\b\u0010*\u001a\u00020+H\u0002R\u0016\u0010\u000f\u001a\n\u0012\u0004\u0012\u00020\u0007\u0018\u00010\nX\u0082\u000e\u00a2\u0006\u0002\n\u0000R\u000e\u0010\f\u001a\u00020\rX\u0082\u0004\u00a2\u0006\u0002\n\u0000R\u0017\u0010\t\u001a\b\u0012\u0004\u0012\u00020\u00070\n8F\u00a2\u0006\u0006\u001a\u0004\b\u0010\u0010\u0011R\u0011\u0010\u0003\u001a\u00020\u00048F\u00a2\u0006\u0006\u001a\u0004\b\u0012\u0010\u0013\u00a8\u0006."}, d2={"Lkotlin/text/Regex;", "Ljava/io/Serializable;", "Lkotlin/io/Serializable;", "pattern", "", "(Ljava/lang/String;)V", "option", "Lkotlin/text/RegexOption;", "(Ljava/lang/String;Lkotlin/text/RegexOption;)V", "options", "", "(Ljava/lang/String;Ljava/util/Set;)V", "nativePattern", "Ljava/util/regex/Pattern;", "(Ljava/util/regex/Pattern;)V", "_options", "getOptions", "()Ljava/util/Set;", "getPattern", "()Ljava/lang/String;", "containsMatchIn", "", "input", "", "find", "Lkotlin/text/MatchResult;", "startIndex", "", "findAll", "Lkotlin/sequences/Sequence;", "matchEntire", "matches", "replace", "transform", "Lkotlin/Function1;", "replacement", "replaceFirst", "split", "", "limit", "toPattern", "toString", "writeReplace", "", "Companion", "Serialized", "kotlin-stdlib"}, k=1, mv={1, 1, 10})
public final class Regex
implements Serializable {
    public static final Companion Companion = new Companion(null);
    private Set<? extends RegexOption> _options;
    private final Pattern nativePattern;

    public Regex(@NotNull String object) {
        Intrinsics.checkParameterIsNotNull((Object)object, (String)"pattern");
        object = Pattern.compile((String)object);
        Intrinsics.checkExpressionValueIsNotNull((Object)object, (String)"Pattern.compile(pattern)");
        this((Pattern)object);
    }

    public Regex(@NotNull String object, @NotNull Set<? extends RegexOption> set) {
        Intrinsics.checkParameterIsNotNull((Object)object, (String)"pattern");
        Intrinsics.checkParameterIsNotNull(set, (String)"options");
        object = Pattern.compile((String)object, Companion.ensureUnicodeCase(RegexKt.access$toInt(set)));
        Intrinsics.checkExpressionValueIsNotNull((Object)object, (String)"Pattern.compile(pattern,\u2026odeCase(options.toInt()))");
        this((Pattern)object);
    }

    public Regex(@NotNull String object, @NotNull RegexOption regexOption) {
        Intrinsics.checkParameterIsNotNull((Object)object, (String)"pattern");
        Intrinsics.checkParameterIsNotNull((Object)regexOption, (String)"option");
        object = Pattern.compile((String)object, Companion.ensureUnicodeCase(regexOption.getValue()));
        Intrinsics.checkExpressionValueIsNotNull((Object)object, (String)"Pattern.compile(pattern,\u2026nicodeCase(option.value))");
        this((Pattern)object);
    }

    @PublishedApi
    public Regex(@NotNull Pattern pattern) {
        Intrinsics.checkParameterIsNotNull((Object)pattern, (String)"nativePattern");
        this.nativePattern = pattern;
    }

    @Nullable
    public static /* bridge */ /* synthetic */ MatchResult find$default(Regex regex, CharSequence charSequence, int n, int n2, Object object) {
        if ((n2 & 2) != 0) {
            n = 0;
        }
        return regex.find(charSequence, n);
    }

    @NotNull
    public static /* bridge */ /* synthetic */ Sequence findAll$default(Regex regex, CharSequence charSequence, int n, int n2, Object object) {
        if ((n2 & 2) != 0) {
            n = 0;
        }
        return regex.findAll(charSequence, n);
    }

    @NotNull
    public static /* bridge */ /* synthetic */ List split$default(Regex regex, CharSequence charSequence, int n, int n2, Object object) {
        if ((n2 & 2) != 0) {
            n = 0;
        }
        return regex.split(charSequence, n);
    }

    private final Object writeReplace() {
        String string2 = this.nativePattern.pattern();
        Intrinsics.checkExpressionValueIsNotNull((Object)string2, (String)"nativePattern.pattern()");
        return new Serialized(string2, this.nativePattern.flags());
    }

    public final boolean containsMatchIn(@NotNull CharSequence charSequence) {
        Intrinsics.checkParameterIsNotNull((Object)charSequence, (String)"input");
        return this.nativePattern.matcher(charSequence).find();
    }

    @Nullable
    public final MatchResult find(@NotNull CharSequence charSequence, int n) {
        Intrinsics.checkParameterIsNotNull((Object)charSequence, (String)"input");
        Matcher matcher = this.nativePattern.matcher(charSequence);
        Intrinsics.checkExpressionValueIsNotNull((Object)matcher, (String)"nativePattern.matcher(input)");
        return RegexKt.access$findNext(matcher, n, charSequence);
    }

    @NotNull
    public final Sequence<MatchResult> findAll(@NotNull CharSequence charSequence, int n) {
        Intrinsics.checkParameterIsNotNull((Object)charSequence, (String)"input");
        return SequencesKt.generateSequence((Function0)new Function0<MatchResult>(this, charSequence, n){
            final /* synthetic */ CharSequence $input;
            final /* synthetic */ int $startIndex;
            final /* synthetic */ Regex this$0;
            {
                this.this$0 = regex;
                this.$input = charSequence;
                this.$startIndex = n;
                super(0);
            }

            @Nullable
            public final MatchResult invoke() {
                return this.this$0.find(this.$input, this.$startIndex);
            }
        }, (Function1)findAll.INSTANCE);
    }

    @NotNull
    public final Set<RegexOption> getOptions() {
        Set<RegexOption> set = this._options;
        if (set != null) {
            return set;
        }
        int n = this.nativePattern.flags();
        set = EnumSet.allOf(RegexOption.class);
        CollectionsKt.retainAll((Iterable)set, (Function1)new Function1<T, java.lang.Boolean>(n){
            final /* synthetic */ int $value$inlined;
            {
                this.$value$inlined = n;
                super(1);
            }

            public final boolean invoke(T object) {
                int n = this.$value$inlined;
                if ((n & (object = (kotlin.text.FlagEnum)object).getMask()) == object.getValue()) {
                    return true;
                }
                return false;
            }
        });
        set = Collections.unmodifiableSet(set);
        Intrinsics.checkExpressionValueIsNotNull(set, (String)"Collections.unmodifiable\u2026mask == it.value }\n    })");
        this._options = set;
        return set;
    }

    @NotNull
    public final String getPattern() {
        String string2 = this.nativePattern.pattern();
        Intrinsics.checkExpressionValueIsNotNull((Object)string2, (String)"nativePattern.pattern()");
        return string2;
    }

    @Nullable
    public final MatchResult matchEntire(@NotNull CharSequence charSequence) {
        Intrinsics.checkParameterIsNotNull((Object)charSequence, (String)"input");
        Matcher matcher = this.nativePattern.matcher(charSequence);
        Intrinsics.checkExpressionValueIsNotNull((Object)matcher, (String)"nativePattern.matcher(input)");
        return RegexKt.access$matchEntire(matcher, charSequence);
    }

    public final boolean matches(@NotNull CharSequence charSequence) {
        Intrinsics.checkParameterIsNotNull((Object)charSequence, (String)"input");
        return this.nativePattern.matcher(charSequence).matches();
    }

    @NotNull
    public final String replace(@NotNull CharSequence charSequence, @NotNull String string2) {
        Intrinsics.checkParameterIsNotNull((Object)charSequence, (String)"input");
        Intrinsics.checkParameterIsNotNull((Object)string2, (String)"replacement");
        charSequence = this.nativePattern.matcher(charSequence).replaceAll(string2);
        Intrinsics.checkExpressionValueIsNotNull((Object)charSequence, (String)"nativePattern.matcher(in\u2026).replaceAll(replacement)");
        return charSequence;
    }

    @NotNull
    public final String replace(@NotNull CharSequence charSequence, @NotNull Function1<? super MatchResult, ? extends CharSequence> function1) {
        Intrinsics.checkParameterIsNotNull((Object)charSequence, (String)"input");
        Intrinsics.checkParameterIsNotNull(function1, (String)"transform");
        int n = 0;
        MatchResult matchResult = Regex.find$default(this, charSequence, 0, 2, null);
        if (matchResult != null) {
            int n2;
            MatchResult matchResult2;
            int n3 = charSequence.length();
            StringBuilder stringBuilder = new StringBuilder(n3);
            do {
                if (matchResult == null) {
                    Intrinsics.throwNpe();
                }
                stringBuilder.append(charSequence, n, matchResult.getRange().getStart().intValue());
                stringBuilder.append((CharSequence)function1.invoke((Object)matchResult));
                n2 = matchResult.getRange().getEndInclusive().intValue() + 1;
                matchResult2 = matchResult.next();
                if (n2 >= n3) break;
                n = n2;
                matchResult = matchResult2;
            } while (matchResult2 != null);
            if (n2 < n3) {
                stringBuilder.append(charSequence, n2, n3);
            }
            charSequence = stringBuilder.toString();
            Intrinsics.checkExpressionValueIsNotNull((Object)charSequence, (String)"sb.toString()");
            return charSequence;
        }
        return charSequence.toString();
    }

    @NotNull
    public final String replaceFirst(@NotNull CharSequence charSequence, @NotNull String string2) {
        Intrinsics.checkParameterIsNotNull((Object)charSequence, (String)"input");
        Intrinsics.checkParameterIsNotNull((Object)string2, (String)"replacement");
        charSequence = this.nativePattern.matcher(charSequence).replaceFirst(string2);
        Intrinsics.checkExpressionValueIsNotNull((Object)charSequence, (String)"nativePattern.matcher(in\u2026replaceFirst(replacement)");
        return charSequence;
    }

    @NotNull
    public final List<String> split(@NotNull CharSequence arrstring, int n) {
        Intrinsics.checkParameterIsNotNull((Object)arrstring, (String)"input");
        int n2 = n >= 0 ? 1 : 0;
        if (n2 == 0) {
            arrstring = new StringBuilder();
            arrstring.append("Limit must be non-negative, but was ");
            arrstring.append(n);
            arrstring.append('.');
            throw (Throwable)new IllegalArgumentException(arrstring.toString().toString());
        }
        Pattern pattern = this.nativePattern;
        n2 = n;
        if (n == 0) {
            n2 = -1;
        }
        arrstring = pattern.split((CharSequence)arrstring, n2);
        Intrinsics.checkExpressionValueIsNotNull((Object)arrstring, (String)"nativePattern.split(inpu\u2026imit == 0) -1 else limit)");
        return ArraysKt.asList(arrstring);
    }

    @NotNull
    public final Pattern toPattern() {
        return this.nativePattern;
    }

    @NotNull
    public String toString() {
        String string2 = this.nativePattern.toString();
        Intrinsics.checkExpressionValueIsNotNull((Object)string2, (String)"nativePattern.toString()");
        return string2;
    }

    @Metadata(bv={1, 0, 2}, d1={"\u0000\"\n\u0002\u0018\u0002\n\u0002\u0010\u0000\n\u0002\b\u0002\n\u0002\u0010\b\n\u0002\b\u0002\n\u0002\u0010\u000e\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0000\b\u0086\u0003\u0018\u00002\u00020\u0001B\u0007\b\u0002\u00a2\u0006\u0002\u0010\u0002J\u0010\u0010\u0003\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020\u0004H\u0002J\u000e\u0010\u0006\u001a\u00020\u00072\u0006\u0010\b\u001a\u00020\u0007J\u000e\u0010\t\u001a\u00020\u00072\u0006\u0010\b\u001a\u00020\u0007J\u000e\u0010\n\u001a\u00020\u000b2\u0006\u0010\b\u001a\u00020\u0007\u00a8\u0006\f"}, d2={"Lkotlin/text/Regex$Companion;", "", "()V", "ensureUnicodeCase", "", "flags", "escape", "", "literal", "escapeReplacement", "fromLiteral", "Lkotlin/text/Regex;", "kotlin-stdlib"}, k=1, mv={1, 1, 10})
    public static final class Companion {
        private Companion() {
        }

        public /* synthetic */ Companion(DefaultConstructorMarker defaultConstructorMarker) {
            this();
        }

        private final int ensureUnicodeCase(int n) {
            int n2 = n;
            if ((n & 2) != 0) {
                n2 = n | 64;
            }
            return n2;
        }

        @NotNull
        public final String escape(@NotNull String string2) {
            Intrinsics.checkParameterIsNotNull((Object)string2, (String)"literal");
            string2 = Pattern.quote(string2);
            Intrinsics.checkExpressionValueIsNotNull((Object)string2, (String)"Pattern.quote(literal)");
            return string2;
        }

        @NotNull
        public final String escapeReplacement(@NotNull String string2) {
            Intrinsics.checkParameterIsNotNull((Object)string2, (String)"literal");
            string2 = Matcher.quoteReplacement(string2);
            Intrinsics.checkExpressionValueIsNotNull((Object)string2, (String)"Matcher.quoteReplacement(literal)");
            return string2;
        }

        @NotNull
        public final Regex fromLiteral(@NotNull String string2) {
            Intrinsics.checkParameterIsNotNull((Object)string2, (String)"literal");
            return new Regex(string2, RegexOption.LITERAL);
        }
    }

    @Metadata(bv={1, 0, 2}, d1={"\u0000$\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\u000e\n\u0000\n\u0002\u0010\b\n\u0002\b\u0006\n\u0002\u0010\u0000\n\u0002\b\u0002\b\u0002\u0018\u0000 \u000e2\u00060\u0001j\u0002`\u0002:\u0001\u000eB\u0015\u0012\u0006\u0010\u0003\u001a\u00020\u0004\u0012\u0006\u0010\u0005\u001a\u00020\u0006\u00a2\u0006\u0002\u0010\u0007J\b\u0010\f\u001a\u00020\rH\u0002R\u0011\u0010\u0005\u001a\u00020\u0006\u00a2\u0006\b\n\u0000\u001a\u0004\b\b\u0010\tR\u0011\u0010\u0003\u001a\u00020\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\n\u0010\u000b\u00a8\u0006\u000f"}, d2={"Lkotlin/text/Regex$Serialized;", "Ljava/io/Serializable;", "Lkotlin/io/Serializable;", "pattern", "", "flags", "", "(Ljava/lang/String;I)V", "getFlags", "()I", "getPattern", "()Ljava/lang/String;", "readResolve", "", "Companion", "kotlin-stdlib"}, k=1, mv={1, 1, 10})
    private static final class Serialized
    implements Serializable {
        public static final Companion Companion = new Companion(null);
        private static final long serialVersionUID = 0L;
        private final int flags;
        @NotNull
        private final String pattern;

        public Serialized(@NotNull String string2, int n) {
            Intrinsics.checkParameterIsNotNull((Object)string2, (String)"pattern");
            this.pattern = string2;
            this.flags = n;
        }

        private final Object readResolve() {
            Pattern pattern = Pattern.compile(this.pattern, this.flags);
            Intrinsics.checkExpressionValueIsNotNull((Object)pattern, (String)"Pattern.compile(pattern, flags)");
            return new Regex(pattern);
        }

        public final int getFlags() {
            return this.flags;
        }

        @NotNull
        public final String getPattern() {
            return this.pattern;
        }

        @Metadata(bv={1, 0, 2}, d1={"\u0000\u0012\n\u0002\u0018\u0002\n\u0002\u0010\u0000\n\u0002\b\u0002\n\u0002\u0010\t\n\u0000\b\u0086\u0003\u0018\u00002\u00020\u0001B\u0007\b\u0002\u00a2\u0006\u0002\u0010\u0002R\u000e\u0010\u0003\u001a\u00020\u0004X\u0082T\u00a2\u0006\u0002\n\u0000\u00a8\u0006\u0005"}, d2={"Lkotlin/text/Regex$Serialized$Companion;", "", "()V", "serialVersionUID", "", "kotlin-stdlib"}, k=1, mv={1, 1, 10})
        public static final class Companion {
            private Companion() {
            }

            public /* synthetic */ Companion(DefaultConstructorMarker defaultConstructorMarker) {
                this();
            }
        }

    }

}

