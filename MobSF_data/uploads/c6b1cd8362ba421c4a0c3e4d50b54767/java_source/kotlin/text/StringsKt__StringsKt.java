/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  kotlin.collections.ArraysKt
 *  kotlin.collections.CharIterator
 *  kotlin.collections.CollectionsKt
 *  kotlin.ranges.IntProgression
 *  kotlin.ranges.IntRange
 *  kotlin.ranges.RangesKt
 *  kotlin.sequences.Sequence
 *  kotlin.sequences.SequencesKt
 *  kotlin.text.CharsKt
 *  kotlin.text.DelimitedRangesSequence
 *  kotlin.text.MatchResult
 *  kotlin.text.Regex
 *  kotlin.text.StringsKt
 *  kotlin.text.StringsKt__StringsKt$iterator
 *  kotlin.text.StringsKt__StringsKt$iterator$1
 *  kotlin.text.StringsKt__StringsKt$rangesDelimitedBy
 *  kotlin.text.StringsKt__StringsKt$rangesDelimitedBy$2
 *  kotlin.text.StringsKt__StringsKt$rangesDelimitedBy$4
 *  kotlin.text.StringsKt__StringsKt$splitToSequence
 *  kotlin.text.StringsKt__StringsKt$splitToSequence$1
 *  kotlin.text.StringsKt__StringsKt$splitToSequence$2
 */
package kotlin.text;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;
import kotlin.Deprecated;
import kotlin.Metadata;
import kotlin.Pair;
import kotlin.ReplaceWith;
import kotlin.TuplesKt;
import kotlin.TypeCastException;
import kotlin.collections.ArraysKt;
import kotlin.collections.CharIterator;
import kotlin.collections.CollectionsKt;
import kotlin.internal.InlineOnly;
import kotlin.jvm.functions.Function1;
import kotlin.jvm.functions.Function2;
import kotlin.jvm.internal.Intrinsics;
import kotlin.ranges.IntProgression;
import kotlin.ranges.IntRange;
import kotlin.ranges.RangesKt;
import kotlin.sequences.Sequence;
import kotlin.sequences.SequencesKt;
import kotlin.text.CharsKt;
import kotlin.text.DelimitedRangesSequence;
import kotlin.text.MatchResult;
import kotlin.text.Regex;
import kotlin.text.StringsKt;
import kotlin.text.StringsKt__StringsJVMKt;
import kotlin.text.StringsKt__StringsKt;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

@Metadata(bv={1, 0, 2}, d1={"\u0000t\n\u0000\n\u0002\u0018\u0002\n\u0002\u0010\r\n\u0002\b\u0003\n\u0002\u0010\b\n\u0002\b\u0003\n\u0002\u0010\u000e\n\u0002\b\u0002\n\u0002\u0010\u000b\n\u0002\b\u0003\n\u0002\u0010\f\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\u001e\n\u0002\b\f\n\u0002\u0010\u0019\n\u0002\b\u0006\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010 \n\u0002\b\b\n\u0002\u0010\u0011\n\u0002\b\u000f\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u001b\u001a\u001c\u0010\t\u001a\u00020\n*\u00020\u00022\u0006\u0010\u000b\u001a\u00020\u00022\b\b\u0002\u0010\f\u001a\u00020\r\u001a\u001c\u0010\u000e\u001a\u00020\n*\u00020\u00022\u0006\u0010\u000b\u001a\u00020\u00022\b\b\u0002\u0010\f\u001a\u00020\r\u001a\u001f\u0010\u000f\u001a\u00020\r*\u00020\u00022\u0006\u0010\u0010\u001a\u00020\u00112\b\b\u0002\u0010\f\u001a\u00020\rH\u0086\u0002\u001a\u001f\u0010\u000f\u001a\u00020\r*\u00020\u00022\u0006\u0010\u000b\u001a\u00020\u00022\b\b\u0002\u0010\f\u001a\u00020\rH\u0086\u0002\u001a\u0015\u0010\u000f\u001a\u00020\r*\u00020\u00022\u0006\u0010\u0012\u001a\u00020\u0013H\u0087\n\u001a\u001c\u0010\u0014\u001a\u00020\r*\u00020\u00022\u0006\u0010\u0010\u001a\u00020\u00112\b\b\u0002\u0010\f\u001a\u00020\r\u001a\u001c\u0010\u0014\u001a\u00020\r*\u00020\u00022\u0006\u0010\u0015\u001a\u00020\u00022\b\b\u0002\u0010\f\u001a\u00020\r\u001a:\u0010\u0016\u001a\u0010\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\n\u0018\u00010\u0017*\u00020\u00022\f\u0010\u0018\u001a\b\u0012\u0004\u0012\u00020\n0\u00192\b\b\u0002\u0010\u001a\u001a\u00020\u00062\b\b\u0002\u0010\f\u001a\u00020\r\u001aE\u0010\u0016\u001a\u0010\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\n\u0018\u00010\u0017*\u00020\u00022\f\u0010\u0018\u001a\b\u0012\u0004\u0012\u00020\n0\u00192\u0006\u0010\u001a\u001a\u00020\u00062\u0006\u0010\f\u001a\u00020\r2\u0006\u0010\u001b\u001a\u00020\rH\u0002\u00a2\u0006\u0002\b\u001c\u001a:\u0010\u001d\u001a\u0010\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\n\u0018\u00010\u0017*\u00020\u00022\f\u0010\u0018\u001a\b\u0012\u0004\u0012\u00020\n0\u00192\b\b\u0002\u0010\u001a\u001a\u00020\u00062\b\b\u0002\u0010\f\u001a\u00020\r\u001a\u0012\u0010\u001e\u001a\u00020\r*\u00020\u00022\u0006\u0010\u001f\u001a\u00020\u0006\u001a&\u0010 \u001a\u00020\u0006*\u00020\u00022\u0006\u0010\u0010\u001a\u00020\u00112\b\b\u0002\u0010\u001a\u001a\u00020\u00062\b\b\u0002\u0010\f\u001a\u00020\r\u001a;\u0010 \u001a\u00020\u0006*\u00020\u00022\u0006\u0010\u000b\u001a\u00020\u00022\u0006\u0010\u001a\u001a\u00020\u00062\u0006\u0010!\u001a\u00020\u00062\u0006\u0010\f\u001a\u00020\r2\b\b\u0002\u0010\u001b\u001a\u00020\rH\u0002\u00a2\u0006\u0002\b\"\u001a&\u0010 \u001a\u00020\u0006*\u00020\u00022\u0006\u0010#\u001a\u00020\n2\b\b\u0002\u0010\u001a\u001a\u00020\u00062\b\b\u0002\u0010\f\u001a\u00020\r\u001a&\u0010$\u001a\u00020\u0006*\u00020\u00022\u0006\u0010%\u001a\u00020&2\b\b\u0002\u0010\u001a\u001a\u00020\u00062\b\b\u0002\u0010\f\u001a\u00020\r\u001a,\u0010$\u001a\u00020\u0006*\u00020\u00022\f\u0010\u0018\u001a\b\u0012\u0004\u0012\u00020\n0\u00192\b\b\u0002\u0010\u001a\u001a\u00020\u00062\b\b\u0002\u0010\f\u001a\u00020\r\u001a\r\u0010'\u001a\u00020\r*\u00020\u0002H\u0087\b\u001a\r\u0010(\u001a\u00020\r*\u00020\u0002H\u0087\b\u001a\r\u0010)\u001a\u00020\r*\u00020\u0002H\u0087\b\u001a \u0010*\u001a\u00020\r*\u0004\u0018\u00010\u0002H\u0087\b\u0082\u0002\u000e\n\f\b\u0000\u0012\u0002\u0018\u0001\u001a\u0004\b\u0003\u0010\u0000\u001a \u0010+\u001a\u00020\r*\u0004\u0018\u00010\u0002H\u0087\b\u0082\u0002\u000e\n\f\b\u0000\u0012\u0002\u0018\u0001\u001a\u0004\b\u0003\u0010\u0000\u001a\r\u0010,\u001a\u00020-*\u00020\u0002H\u0086\u0002\u001a&\u0010.\u001a\u00020\u0006*\u00020\u00022\u0006\u0010\u0010\u001a\u00020\u00112\b\b\u0002\u0010\u001a\u001a\u00020\u00062\b\b\u0002\u0010\f\u001a\u00020\r\u001a&\u0010.\u001a\u00020\u0006*\u00020\u00022\u0006\u0010#\u001a\u00020\n2\b\b\u0002\u0010\u001a\u001a\u00020\u00062\b\b\u0002\u0010\f\u001a\u00020\r\u001a&\u0010/\u001a\u00020\u0006*\u00020\u00022\u0006\u0010%\u001a\u00020&2\b\b\u0002\u0010\u001a\u001a\u00020\u00062\b\b\u0002\u0010\f\u001a\u00020\r\u001a,\u0010/\u001a\u00020\u0006*\u00020\u00022\f\u0010\u0018\u001a\b\u0012\u0004\u0012\u00020\n0\u00192\b\b\u0002\u0010\u001a\u001a\u00020\u00062\b\b\u0002\u0010\f\u001a\u00020\r\u001a\u0010\u00100\u001a\b\u0012\u0004\u0012\u00020\n01*\u00020\u0002\u001a\u0010\u00102\u001a\b\u0012\u0004\u0012\u00020\n03*\u00020\u0002\u001a\u0015\u00104\u001a\u00020\r*\u00020\u00022\u0006\u0010\u0012\u001a\u00020\u0013H\u0087\f\u001a\u000f\u00105\u001a\u00020\n*\u0004\u0018\u00010\nH\u0087\b\u001a\u001c\u00106\u001a\u00020\u0002*\u00020\u00022\u0006\u00107\u001a\u00020\u00062\b\b\u0002\u00108\u001a\u00020\u0011\u001a\u001c\u00106\u001a\u00020\n*\u00020\n2\u0006\u00107\u001a\u00020\u00062\b\b\u0002\u00108\u001a\u00020\u0011\u001a\u001c\u00109\u001a\u00020\u0002*\u00020\u00022\u0006\u00107\u001a\u00020\u00062\b\b\u0002\u00108\u001a\u00020\u0011\u001a\u001c\u00109\u001a\u00020\n*\u00020\n2\u0006\u00107\u001a\u00020\u00062\b\b\u0002\u00108\u001a\u00020\u0011\u001aG\u0010:\u001a\b\u0012\u0004\u0012\u00020\u000101*\u00020\u00022\u000e\u0010;\u001a\n\u0012\u0006\b\u0001\u0012\u00020\n0<2\b\b\u0002\u0010\u001a\u001a\u00020\u00062\b\b\u0002\u0010\f\u001a\u00020\r2\b\b\u0002\u0010=\u001a\u00020\u0006H\u0002\u00a2\u0006\u0004\b>\u0010?\u001a=\u0010:\u001a\b\u0012\u0004\u0012\u00020\u000101*\u00020\u00022\u0006\u0010;\u001a\u00020&2\b\b\u0002\u0010\u001a\u001a\u00020\u00062\b\b\u0002\u0010\f\u001a\u00020\r2\b\b\u0002\u0010=\u001a\u00020\u0006H\u0002\u00a2\u0006\u0002\b>\u001a4\u0010@\u001a\u00020\r*\u00020\u00022\u0006\u0010A\u001a\u00020\u00062\u0006\u0010\u000b\u001a\u00020\u00022\u0006\u0010B\u001a\u00020\u00062\u0006\u00107\u001a\u00020\u00062\u0006\u0010\f\u001a\u00020\rH\u0000\u001a\u0012\u0010C\u001a\u00020\u0002*\u00020\u00022\u0006\u0010D\u001a\u00020\u0002\u001a\u0012\u0010C\u001a\u00020\n*\u00020\n2\u0006\u0010D\u001a\u00020\u0002\u001a\u001a\u0010E\u001a\u00020\u0002*\u00020\u00022\u0006\u0010\u001a\u001a\u00020\u00062\u0006\u0010!\u001a\u00020\u0006\u001a\u0012\u0010E\u001a\u00020\u0002*\u00020\u00022\u0006\u0010F\u001a\u00020\u0001\u001a\u001d\u0010E\u001a\u00020\n*\u00020\n2\u0006\u0010\u001a\u001a\u00020\u00062\u0006\u0010!\u001a\u00020\u0006H\u0087\b\u001a\u0015\u0010E\u001a\u00020\n*\u00020\n2\u0006\u0010F\u001a\u00020\u0001H\u0087\b\u001a\u0012\u0010G\u001a\u00020\u0002*\u00020\u00022\u0006\u0010\u0015\u001a\u00020\u0002\u001a\u0012\u0010G\u001a\u00020\n*\u00020\n2\u0006\u0010\u0015\u001a\u00020\u0002\u001a\u0012\u0010H\u001a\u00020\u0002*\u00020\u00022\u0006\u0010I\u001a\u00020\u0002\u001a\u001a\u0010H\u001a\u00020\u0002*\u00020\u00022\u0006\u0010D\u001a\u00020\u00022\u0006\u0010\u0015\u001a\u00020\u0002\u001a\u0012\u0010H\u001a\u00020\n*\u00020\n2\u0006\u0010I\u001a\u00020\u0002\u001a\u001a\u0010H\u001a\u00020\n*\u00020\n2\u0006\u0010D\u001a\u00020\u00022\u0006\u0010\u0015\u001a\u00020\u0002\u001a+\u0010J\u001a\u00020\n*\u00020\u00022\u0006\u0010\u0012\u001a\u00020\u00132\u0014\b\b\u0010K\u001a\u000e\u0012\u0004\u0012\u00020M\u0012\u0004\u0012\u00020\u00020LH\u0087\b\u001a\u001d\u0010J\u001a\u00020\n*\u00020\u00022\u0006\u0010\u0012\u001a\u00020\u00132\u0006\u0010N\u001a\u00020\nH\u0087\b\u001a$\u0010O\u001a\u00020\n*\u00020\n2\u0006\u0010I\u001a\u00020\u00112\u0006\u0010N\u001a\u00020\n2\b\b\u0002\u0010P\u001a\u00020\n\u001a$\u0010O\u001a\u00020\n*\u00020\n2\u0006\u0010I\u001a\u00020\n2\u0006\u0010N\u001a\u00020\n2\b\b\u0002\u0010P\u001a\u00020\n\u001a$\u0010Q\u001a\u00020\n*\u00020\n2\u0006\u0010I\u001a\u00020\u00112\u0006\u0010N\u001a\u00020\n2\b\b\u0002\u0010P\u001a\u00020\n\u001a$\u0010Q\u001a\u00020\n*\u00020\n2\u0006\u0010I\u001a\u00020\n2\u0006\u0010N\u001a\u00020\n2\b\b\u0002\u0010P\u001a\u00020\n\u001a$\u0010R\u001a\u00020\n*\u00020\n2\u0006\u0010I\u001a\u00020\u00112\u0006\u0010N\u001a\u00020\n2\b\b\u0002\u0010P\u001a\u00020\n\u001a$\u0010R\u001a\u00020\n*\u00020\n2\u0006\u0010I\u001a\u00020\n2\u0006\u0010N\u001a\u00020\n2\b\b\u0002\u0010P\u001a\u00020\n\u001a$\u0010S\u001a\u00020\n*\u00020\n2\u0006\u0010I\u001a\u00020\u00112\u0006\u0010N\u001a\u00020\n2\b\b\u0002\u0010P\u001a\u00020\n\u001a$\u0010S\u001a\u00020\n*\u00020\n2\u0006\u0010I\u001a\u00020\n2\u0006\u0010N\u001a\u00020\n2\b\b\u0002\u0010P\u001a\u00020\n\u001a\u001d\u0010T\u001a\u00020\n*\u00020\u00022\u0006\u0010\u0012\u001a\u00020\u00132\u0006\u0010N\u001a\u00020\nH\u0087\b\u001a\"\u0010U\u001a\u00020\u0002*\u00020\u00022\u0006\u0010\u001a\u001a\u00020\u00062\u0006\u0010!\u001a\u00020\u00062\u0006\u0010N\u001a\u00020\u0002\u001a\u001a\u0010U\u001a\u00020\u0002*\u00020\u00022\u0006\u0010F\u001a\u00020\u00012\u0006\u0010N\u001a\u00020\u0002\u001a%\u0010U\u001a\u00020\n*\u00020\n2\u0006\u0010\u001a\u001a\u00020\u00062\u0006\u0010!\u001a\u00020\u00062\u0006\u0010N\u001a\u00020\u0002H\u0087\b\u001a\u001d\u0010U\u001a\u00020\n*\u00020\n2\u0006\u0010F\u001a\u00020\u00012\u0006\u0010N\u001a\u00020\u0002H\u0087\b\u001a=\u0010V\u001a\b\u0012\u0004\u0012\u00020\n03*\u00020\u00022\u0012\u0010;\u001a\n\u0012\u0006\b\u0001\u0012\u00020\n0<\"\u00020\n2\b\b\u0002\u0010\f\u001a\u00020\r2\b\b\u0002\u0010=\u001a\u00020\u0006\u00a2\u0006\u0002\u0010W\u001a0\u0010V\u001a\b\u0012\u0004\u0012\u00020\n03*\u00020\u00022\n\u0010;\u001a\u00020&\"\u00020\u00112\b\b\u0002\u0010\f\u001a\u00020\r2\b\b\u0002\u0010=\u001a\u00020\u0006\u001a/\u0010V\u001a\b\u0012\u0004\u0012\u00020\n03*\u00020\u00022\u0006\u0010I\u001a\u00020\n2\u0006\u0010\f\u001a\u00020\r2\u0006\u0010=\u001a\u00020\u0006H\u0002\u00a2\u0006\u0002\bX\u001a%\u0010V\u001a\b\u0012\u0004\u0012\u00020\n03*\u00020\u00022\u0006\u0010\u0012\u001a\u00020\u00132\b\b\u0002\u0010=\u001a\u00020\u0006H\u0087\b\u001a=\u0010Y\u001a\b\u0012\u0004\u0012\u00020\n01*\u00020\u00022\u0012\u0010;\u001a\n\u0012\u0006\b\u0001\u0012\u00020\n0<\"\u00020\n2\b\b\u0002\u0010\f\u001a\u00020\r2\b\b\u0002\u0010=\u001a\u00020\u0006\u00a2\u0006\u0002\u0010Z\u001a0\u0010Y\u001a\b\u0012\u0004\u0012\u00020\n01*\u00020\u00022\n\u0010;\u001a\u00020&\"\u00020\u00112\b\b\u0002\u0010\f\u001a\u00020\r2\b\b\u0002\u0010=\u001a\u00020\u0006\u001a\u001c\u0010[\u001a\u00020\r*\u00020\u00022\u0006\u0010\u0010\u001a\u00020\u00112\b\b\u0002\u0010\f\u001a\u00020\r\u001a\u001c\u0010[\u001a\u00020\r*\u00020\u00022\u0006\u0010D\u001a\u00020\u00022\b\b\u0002\u0010\f\u001a\u00020\r\u001a$\u0010[\u001a\u00020\r*\u00020\u00022\u0006\u0010D\u001a\u00020\u00022\u0006\u0010\u001a\u001a\u00020\u00062\b\b\u0002\u0010\f\u001a\u00020\r\u001a\u0012\u0010\\\u001a\u00020\u0002*\u00020\u00022\u0006\u0010F\u001a\u00020\u0001\u001a\u001d\u0010\\\u001a\u00020\u0002*\u00020\n2\u0006\u0010]\u001a\u00020\u00062\u0006\u0010^\u001a\u00020\u0006H\u0087\b\u001a\u001f\u0010_\u001a\u00020\n*\u00020\u00022\u0006\u0010\u001a\u001a\u00020\u00062\b\b\u0002\u0010!\u001a\u00020\u0006H\u0087\b\u001a\u0012\u0010_\u001a\u00020\n*\u00020\u00022\u0006\u0010F\u001a\u00020\u0001\u001a\u0012\u0010_\u001a\u00020\n*\u00020\n2\u0006\u0010F\u001a\u00020\u0001\u001a\u001c\u0010`\u001a\u00020\n*\u00020\n2\u0006\u0010I\u001a\u00020\u00112\b\b\u0002\u0010P\u001a\u00020\n\u001a\u001c\u0010`\u001a\u00020\n*\u00020\n2\u0006\u0010I\u001a\u00020\n2\b\b\u0002\u0010P\u001a\u00020\n\u001a\u001c\u0010a\u001a\u00020\n*\u00020\n2\u0006\u0010I\u001a\u00020\u00112\b\b\u0002\u0010P\u001a\u00020\n\u001a\u001c\u0010a\u001a\u00020\n*\u00020\n2\u0006\u0010I\u001a\u00020\n2\b\b\u0002\u0010P\u001a\u00020\n\u001a\u001c\u0010b\u001a\u00020\n*\u00020\n2\u0006\u0010I\u001a\u00020\u00112\b\b\u0002\u0010P\u001a\u00020\n\u001a\u001c\u0010b\u001a\u00020\n*\u00020\n2\u0006\u0010I\u001a\u00020\n2\b\b\u0002\u0010P\u001a\u00020\n\u001a\u001c\u0010c\u001a\u00020\n*\u00020\n2\u0006\u0010I\u001a\u00020\u00112\b\b\u0002\u0010P\u001a\u00020\n\u001a\u001c\u0010c\u001a\u00020\n*\u00020\n2\u0006\u0010I\u001a\u00020\n2\b\b\u0002\u0010P\u001a\u00020\n\u001a\n\u0010d\u001a\u00020\u0002*\u00020\u0002\u001a!\u0010d\u001a\u00020\u0002*\u00020\u00022\u0012\u0010e\u001a\u000e\u0012\u0004\u0012\u00020\u0011\u0012\u0004\u0012\u00020\r0LH\u0086\b\u001a\u0016\u0010d\u001a\u00020\u0002*\u00020\u00022\n\u0010%\u001a\u00020&\"\u00020\u0011\u001a\r\u0010d\u001a\u00020\n*\u00020\nH\u0087\b\u001a!\u0010d\u001a\u00020\n*\u00020\n2\u0012\u0010e\u001a\u000e\u0012\u0004\u0012\u00020\u0011\u0012\u0004\u0012\u00020\r0LH\u0086\b\u001a\u0016\u0010d\u001a\u00020\n*\u00020\n2\n\u0010%\u001a\u00020&\"\u00020\u0011\u001a\n\u0010f\u001a\u00020\u0002*\u00020\u0002\u001a!\u0010f\u001a\u00020\u0002*\u00020\u00022\u0012\u0010e\u001a\u000e\u0012\u0004\u0012\u00020\u0011\u0012\u0004\u0012\u00020\r0LH\u0086\b\u001a\u0016\u0010f\u001a\u00020\u0002*\u00020\u00022\n\u0010%\u001a\u00020&\"\u00020\u0011\u001a\r\u0010f\u001a\u00020\n*\u00020\nH\u0087\b\u001a!\u0010f\u001a\u00020\n*\u00020\n2\u0012\u0010e\u001a\u000e\u0012\u0004\u0012\u00020\u0011\u0012\u0004\u0012\u00020\r0LH\u0086\b\u001a\u0016\u0010f\u001a\u00020\n*\u00020\n2\n\u0010%\u001a\u00020&\"\u00020\u0011\u001a\n\u0010g\u001a\u00020\u0002*\u00020\u0002\u001a!\u0010g\u001a\u00020\u0002*\u00020\u00022\u0012\u0010e\u001a\u000e\u0012\u0004\u0012\u00020\u0011\u0012\u0004\u0012\u00020\r0LH\u0086\b\u001a\u0016\u0010g\u001a\u00020\u0002*\u00020\u00022\n\u0010%\u001a\u00020&\"\u00020\u0011\u001a\r\u0010g\u001a\u00020\n*\u00020\nH\u0087\b\u001a!\u0010g\u001a\u00020\n*\u00020\n2\u0012\u0010e\u001a\u000e\u0012\u0004\u0012\u00020\u0011\u0012\u0004\u0012\u00020\r0LH\u0086\b\u001a\u0016\u0010g\u001a\u00020\n*\u00020\n2\n\u0010%\u001a\u00020&\"\u00020\u0011\"\u0015\u0010\u0000\u001a\u00020\u0001*\u00020\u00028F\u00a2\u0006\u0006\u001a\u0004\b\u0003\u0010\u0004\"\u0015\u0010\u0005\u001a\u00020\u0006*\u00020\u00028F\u00a2\u0006\u0006\u001a\u0004\b\u0007\u0010\b\u00a8\u0006h"}, d2={"indices", "Lkotlin/ranges/IntRange;", "", "getIndices", "(Ljava/lang/CharSequence;)Lkotlin/ranges/IntRange;", "lastIndex", "", "getLastIndex", "(Ljava/lang/CharSequence;)I", "commonPrefixWith", "", "other", "ignoreCase", "", "commonSuffixWith", "contains", "char", "", "regex", "Lkotlin/text/Regex;", "endsWith", "suffix", "findAnyOf", "Lkotlin/Pair;", "strings", "", "startIndex", "last", "findAnyOf$StringsKt__StringsKt", "findLastAnyOf", "hasSurrogatePairAt", "index", "indexOf", "endIndex", "indexOf$StringsKt__StringsKt", "string", "indexOfAny", "chars", "", "isEmpty", "isNotBlank", "isNotEmpty", "isNullOrBlank", "isNullOrEmpty", "iterator", "Lkotlin/collections/CharIterator;", "lastIndexOf", "lastIndexOfAny", "lineSequence", "Lkotlin/sequences/Sequence;", "lines", "", "matches", "orEmpty", "padEnd", "length", "padChar", "padStart", "rangesDelimitedBy", "delimiters", "", "limit", "rangesDelimitedBy$StringsKt__StringsKt", "(Ljava/lang/CharSequence;[Ljava/lang/String;IZI)Lkotlin/sequences/Sequence;", "regionMatchesImpl", "thisOffset", "otherOffset", "removePrefix", "prefix", "removeRange", "range", "removeSuffix", "removeSurrounding", "delimiter", "replace", "transform", "Lkotlin/Function1;", "Lkotlin/text/MatchResult;", "replacement", "replaceAfter", "missingDelimiterValue", "replaceAfterLast", "replaceBefore", "replaceBeforeLast", "replaceFirst", "replaceRange", "split", "(Ljava/lang/CharSequence;[Ljava/lang/String;ZI)Ljava/util/List;", "split$StringsKt__StringsKt", "splitToSequence", "(Ljava/lang/CharSequence;[Ljava/lang/String;ZI)Lkotlin/sequences/Sequence;", "startsWith", "subSequence", "start", "end", "substring", "substringAfter", "substringAfterLast", "substringBefore", "substringBeforeLast", "trim", "predicate", "trimEnd", "trimStart", "kotlin-stdlib"}, k=5, mv={1, 1, 10}, xi=1, xs="kotlin/text/StringsKt")
class StringsKt__StringsKt
extends StringsKt__StringsJVMKt {
    @Nullable
    public static final /* synthetic */ Pair access$findAnyOf(@NotNull CharSequence charSequence, @NotNull Collection collection, int n, boolean bl, boolean bl2) {
        return StringsKt__StringsKt.findAnyOf$StringsKt__StringsKt(charSequence, collection, n, bl, bl2);
    }

    @NotNull
    public static final String commonPrefixWith(@NotNull CharSequence charSequence, @NotNull CharSequence charSequence2, boolean bl) {
        int n;
        block4 : {
            int n2;
            block3 : {
                Intrinsics.checkParameterIsNotNull(charSequence, "$receiver");
                Intrinsics.checkParameterIsNotNull(charSequence2, "other");
                n = Math.min(charSequence.length(), charSequence2.length());
                for (n2 = 0; n2 < n && CharsKt.equals((char)charSequence.charAt(n2), (char)charSequence2.charAt(n2), (boolean)bl); ++n2) {
                }
                int n3 = n2 - 1;
                if (StringsKt.hasSurrogatePairAt((CharSequence)charSequence, (int)n3)) break block3;
                n = n2;
                if (!StringsKt.hasSurrogatePairAt((CharSequence)charSequence2, (int)n3)) break block4;
            }
            n = n2 - 1;
        }
        return charSequence.subSequence(0, n).toString();
    }

    @NotNull
    public static /* bridge */ /* synthetic */ String commonPrefixWith$default(CharSequence charSequence, CharSequence charSequence2, boolean bl, int n, Object object) {
        if ((n & 2) != 0) {
            bl = false;
        }
        return StringsKt.commonPrefixWith((CharSequence)charSequence, (CharSequence)charSequence2, (boolean)bl);
    }

    @NotNull
    public static final String commonSuffixWith(@NotNull CharSequence charSequence, @NotNull CharSequence charSequence2, boolean bl) {
        int n;
        int n2;
        block4 : {
            int n3;
            block3 : {
                Intrinsics.checkParameterIsNotNull(charSequence, "$receiver");
                Intrinsics.checkParameterIsNotNull(charSequence2, "other");
                n2 = charSequence.length();
                int n4 = charSequence2.length();
                n = Math.min(n2, n4);
                for (n3 = 0; n3 < n && CharsKt.equals((char)charSequence.charAt(n2 - n3 - 1), (char)charSequence2.charAt(n4 - n3 - 1), (boolean)bl); ++n3) {
                }
                if (StringsKt.hasSurrogatePairAt((CharSequence)charSequence, (int)(n2 - n3 - 1))) break block3;
                n = n3;
                if (!StringsKt.hasSurrogatePairAt((CharSequence)charSequence2, (int)(n4 - n3 - 1))) break block4;
            }
            n = n3 - 1;
        }
        return charSequence.subSequence(n2 - n, n2).toString();
    }

    @NotNull
    public static /* bridge */ /* synthetic */ String commonSuffixWith$default(CharSequence charSequence, CharSequence charSequence2, boolean bl, int n, Object object) {
        if ((n & 2) != 0) {
            bl = false;
        }
        return StringsKt.commonSuffixWith((CharSequence)charSequence, (CharSequence)charSequence2, (boolean)bl);
    }

    public static final boolean contains(@NotNull CharSequence charSequence, char c, boolean bl) {
        Intrinsics.checkParameterIsNotNull(charSequence, "$receiver");
        if (StringsKt.indexOf$default((CharSequence)charSequence, (char)c, (int)0, (boolean)bl, (int)2, null) >= 0) {
            return true;
        }
        return false;
    }

    /*
     * Enabled aggressive block sorting
     */
    public static final boolean contains(@NotNull CharSequence charSequence, @NotNull CharSequence charSequence2, boolean bl) {
        Intrinsics.checkParameterIsNotNull(charSequence, "$receiver");
        Intrinsics.checkParameterIsNotNull(charSequence2, "other");
        if (charSequence2 instanceof String) {
            if (StringsKt.indexOf$default((CharSequence)charSequence, (String)((String)charSequence2), (int)0, (boolean)bl, (int)2, null) < 0) return false;
            return true;
        }
        if (StringsKt__StringsKt.indexOf$StringsKt__StringsKt$default(charSequence, charSequence2, 0, charSequence.length(), bl, false, 16, null) < 0) return false;
        return true;
    }

    @InlineOnly
    private static final boolean contains(@NotNull CharSequence charSequence, Regex regex) {
        Intrinsics.checkParameterIsNotNull(charSequence, "$receiver");
        return regex.containsMatchIn(charSequence);
    }

    public static /* bridge */ /* synthetic */ boolean contains$default(CharSequence charSequence, char c, boolean bl, int n, Object object) {
        if ((n & 2) != 0) {
            bl = false;
        }
        return StringsKt.contains((CharSequence)charSequence, (char)c, (boolean)bl);
    }

    public static /* bridge */ /* synthetic */ boolean contains$default(CharSequence charSequence, CharSequence charSequence2, boolean bl, int n, Object object) {
        if ((n & 2) != 0) {
            bl = false;
        }
        return StringsKt.contains((CharSequence)charSequence, (CharSequence)charSequence2, (boolean)bl);
    }

    public static final boolean endsWith(@NotNull CharSequence charSequence, char c, boolean bl) {
        Intrinsics.checkParameterIsNotNull(charSequence, "$receiver");
        if (charSequence.length() > 0 && CharsKt.equals((char)charSequence.charAt(StringsKt.getLastIndex((CharSequence)charSequence)), (char)c, (boolean)bl)) {
            return true;
        }
        return false;
    }

    public static final boolean endsWith(@NotNull CharSequence charSequence, @NotNull CharSequence charSequence2, boolean bl) {
        Intrinsics.checkParameterIsNotNull(charSequence, "$receiver");
        Intrinsics.checkParameterIsNotNull(charSequence2, "suffix");
        if (!bl && charSequence instanceof String && charSequence2 instanceof String) {
            return StringsKt.endsWith$default((String)((String)charSequence), (String)((String)charSequence2), (boolean)false, (int)2, null);
        }
        return StringsKt.regionMatchesImpl((CharSequence)charSequence, (int)(charSequence.length() - charSequence2.length()), (CharSequence)charSequence2, (int)0, (int)charSequence2.length(), (boolean)bl);
    }

    public static /* bridge */ /* synthetic */ boolean endsWith$default(CharSequence charSequence, char c, boolean bl, int n, Object object) {
        if ((n & 2) != 0) {
            bl = false;
        }
        return StringsKt.endsWith((CharSequence)charSequence, (char)c, (boolean)bl);
    }

    public static /* bridge */ /* synthetic */ boolean endsWith$default(CharSequence charSequence, CharSequence charSequence2, boolean bl, int n, Object object) {
        if ((n & 2) != 0) {
            bl = false;
        }
        return StringsKt.endsWith((CharSequence)charSequence, (CharSequence)charSequence2, (boolean)bl);
    }

    @Nullable
    public static final Pair<Integer, String> findAnyOf(@NotNull CharSequence charSequence, @NotNull Collection<String> collection, int n, boolean bl) {
        Intrinsics.checkParameterIsNotNull(charSequence, "$receiver");
        Intrinsics.checkParameterIsNotNull(collection, "strings");
        return StringsKt__StringsKt.findAnyOf$StringsKt__StringsKt(charSequence, collection, n, bl, false);
    }

    private static final Pair<Integer, String> findAnyOf$StringsKt__StringsKt(@NotNull CharSequence charSequence, Collection<String> object, int n, boolean bl, boolean bl2) {
        if (!bl && object.size() == 1) {
            object = (String)CollectionsKt.single((Iterable)((Iterable)object));
            n = !bl2 ? StringsKt.indexOf$default((CharSequence)charSequence, (String)object, (int)n, (boolean)false, (int)4, null) : StringsKt.lastIndexOf$default((CharSequence)charSequence, (String)object, (int)n, (boolean)false, (int)4, null);
            if (n < 0) {
                return null;
            }
            return TuplesKt.to(n, object);
        }
        Object object22 = !bl2 ? (IntProgression)new IntRange(RangesKt.coerceAtLeast((int)n, (int)0), charSequence.length()) : RangesKt.downTo((int)RangesKt.coerceAtMost((int)n, (int)StringsKt.getLastIndex((CharSequence)charSequence)), (int)0);
        if (charSequence instanceof String) {
            n = object22.getFirst();
            int n2 = object22.getLast();
            int n3 = object22.getStep();
            if (n3 > 0 ? n <= n2 : n >= n2) {
                do {
                    block13 : {
                        for (Object object22 : (Iterable)object) {
                            String string2 = (String)object22;
                            if (!StringsKt.regionMatches((String)string2, (int)0, (String)((String)charSequence), (int)n, (int)string2.length(), (boolean)bl)) continue;
                            break block13;
                        }
                        object22 = null;
                    }
                    object22 = (String)object22;
                    if (object22 != null) {
                        return TuplesKt.to(n, object22);
                    }
                    if (n != n2) {
                        n += n3;
                        continue;
                    }
                    break;
                } while (true);
            }
        } else {
            n = object22.getFirst();
            int n4 = object22.getLast();
            int n5 = object22.getStep();
            if (n5 > 0 ? n <= n4 : n >= n4) {
                do {
                    block15 : {
                        for (Object object22 : (Iterable)object) {
                            String string3 = (String)object22;
                            if (!StringsKt.regionMatchesImpl((CharSequence)string3, (int)0, (CharSequence)charSequence, (int)n, (int)string3.length(), (boolean)bl)) continue;
                            break block15;
                        }
                        object22 = null;
                    }
                    object22 = (String)object22;
                    if (object22 != null) {
                        return TuplesKt.to(n, object22);
                    }
                    if (n == n4) break;
                    n += n5;
                } while (true);
            }
        }
        return null;
    }

    @Nullable
    public static /* bridge */ /* synthetic */ Pair findAnyOf$default(CharSequence charSequence, Collection collection, int n, boolean bl, int n2, Object object) {
        if ((n2 & 2) != 0) {
            n = 0;
        }
        if ((n2 & 4) != 0) {
            bl = false;
        }
        return StringsKt.findAnyOf((CharSequence)charSequence, (Collection)collection, (int)n, (boolean)bl);
    }

    @Nullable
    public static final Pair<Integer, String> findLastAnyOf(@NotNull CharSequence charSequence, @NotNull Collection<String> collection, int n, boolean bl) {
        Intrinsics.checkParameterIsNotNull(charSequence, "$receiver");
        Intrinsics.checkParameterIsNotNull(collection, "strings");
        return StringsKt__StringsKt.findAnyOf$StringsKt__StringsKt(charSequence, collection, n, bl, true);
    }

    @Nullable
    public static /* bridge */ /* synthetic */ Pair findLastAnyOf$default(CharSequence charSequence, Collection collection, int n, boolean bl, int n2, Object object) {
        if ((n2 & 2) != 0) {
            n = StringsKt.getLastIndex((CharSequence)charSequence);
        }
        if ((n2 & 4) != 0) {
            bl = false;
        }
        return StringsKt.findLastAnyOf((CharSequence)charSequence, (Collection)collection, (int)n, (boolean)bl);
    }

    @NotNull
    public static final IntRange getIndices(@NotNull CharSequence charSequence) {
        Intrinsics.checkParameterIsNotNull(charSequence, "$receiver");
        return new IntRange(0, charSequence.length() - 1);
    }

    public static final int getLastIndex(@NotNull CharSequence charSequence) {
        Intrinsics.checkParameterIsNotNull(charSequence, "$receiver");
        return charSequence.length() - 1;
    }

    public static final boolean hasSurrogatePairAt(@NotNull CharSequence charSequence, int n) {
        Intrinsics.checkParameterIsNotNull(charSequence, "$receiver");
        int n2 = charSequence.length();
        if (n >= 0 && n2 - 2 >= n && Character.isHighSurrogate(charSequence.charAt(n)) && Character.isLowSurrogate(charSequence.charAt(n + 1))) {
            return true;
        }
        return false;
    }

    public static final int indexOf(@NotNull CharSequence charSequence, char c, int n, boolean bl) {
        Intrinsics.checkParameterIsNotNull(charSequence, "$receiver");
        if (!bl && charSequence instanceof String) {
            return ((String)charSequence).indexOf(c, n);
        }
        return StringsKt.indexOfAny((CharSequence)charSequence, (char[])new char[]{c}, (int)n, (boolean)bl);
    }

    public static final int indexOf(@NotNull CharSequence charSequence, @NotNull String string2, int n, boolean bl) {
        Intrinsics.checkParameterIsNotNull(charSequence, "$receiver");
        Intrinsics.checkParameterIsNotNull(string2, "string");
        if (!bl && charSequence instanceof String) {
            return ((String)charSequence).indexOf(string2, n);
        }
        return StringsKt__StringsKt.indexOf$StringsKt__StringsKt$default(charSequence, string2, n, charSequence.length(), bl, false, 16, null);
    }

    private static final int indexOf$StringsKt__StringsKt(@NotNull CharSequence charSequence, CharSequence charSequence2, int n, int n2, boolean bl, boolean bl2) {
        IntProgression intProgression = !bl2 ? (IntProgression)new IntRange(RangesKt.coerceAtLeast((int)n, (int)0), RangesKt.coerceAtMost((int)n2, (int)charSequence.length())) : RangesKt.downTo((int)RangesKt.coerceAtMost((int)n, (int)StringsKt.getLastIndex((CharSequence)charSequence)), (int)RangesKt.coerceAtLeast((int)n2, (int)0));
        if (charSequence instanceof String && charSequence2 instanceof String) {
            n = intProgression.getFirst();
            n2 = intProgression.getLast();
            int n3 = intProgression.getStep();
            if (n3 > 0 ? n <= n2 : n >= n2) {
                do {
                    if (StringsKt.regionMatches((String)((String)charSequence2), (int)0, (String)((String)charSequence), (int)n, (int)charSequence2.length(), (boolean)bl)) {
                        return n;
                    }
                    if (n != n2) {
                        n += n3;
                        continue;
                    }
                    break;
                } while (true);
            }
        } else {
            n = intProgression.getFirst();
            n2 = intProgression.getLast();
            int n4 = intProgression.getStep();
            if (n4 > 0 ? n <= n2 : n >= n2) {
                do {
                    if (StringsKt.regionMatchesImpl((CharSequence)charSequence2, (int)0, (CharSequence)charSequence, (int)n, (int)charSequence2.length(), (boolean)bl)) {
                        return n;
                    }
                    if (n == n2) break;
                    n += n4;
                } while (true);
            }
        }
        return -1;
    }

    static /* bridge */ /* synthetic */ int indexOf$StringsKt__StringsKt$default(CharSequence charSequence, CharSequence charSequence2, int n, int n2, boolean bl, boolean bl2, int n3, Object object) {
        block0 : {
            if ((n3 & 16) == 0) break block0;
            bl2 = false;
        }
        return StringsKt__StringsKt.indexOf$StringsKt__StringsKt(charSequence, charSequence2, n, n2, bl, bl2);
    }

    public static /* bridge */ /* synthetic */ int indexOf$default(CharSequence charSequence, char c, int n, boolean bl, int n2, Object object) {
        if ((n2 & 2) != 0) {
            n = 0;
        }
        if ((n2 & 4) != 0) {
            bl = false;
        }
        return StringsKt.indexOf((CharSequence)charSequence, (char)c, (int)n, (boolean)bl);
    }

    public static /* bridge */ /* synthetic */ int indexOf$default(CharSequence charSequence, String string2, int n, boolean bl, int n2, Object object) {
        if ((n2 & 2) != 0) {
            n = 0;
        }
        if ((n2 & 4) != 0) {
            bl = false;
        }
        return StringsKt.indexOf((CharSequence)charSequence, (String)string2, (int)n, (boolean)bl);
    }

    public static final int indexOfAny(@NotNull CharSequence object, @NotNull Collection<String> collection, int n, boolean bl) {
        Intrinsics.checkParameterIsNotNull(object, "$receiver");
        Intrinsics.checkParameterIsNotNull(collection, "strings");
        object = StringsKt__StringsKt.findAnyOf$StringsKt__StringsKt((CharSequence)object, collection, n, bl, false);
        if (object != null && (object = (Integer)object.getFirst()) != null) {
            return object.intValue();
        }
        return -1;
    }

    public static final int indexOfAny(@NotNull CharSequence charSequence, @NotNull char[] arrc, int n, boolean bl) {
        int n2;
        Intrinsics.checkParameterIsNotNull(charSequence, "$receiver");
        Intrinsics.checkParameterIsNotNull(arrc, "chars");
        if (!bl && arrc.length == 1 && charSequence instanceof String) {
            char c = ArraysKt.single((char[])arrc);
            return ((String)charSequence).indexOf(c, n);
        }
        if ((n = RangesKt.coerceAtLeast((int)n, (int)0)) <= (n2 = StringsKt.getLastIndex((CharSequence)charSequence))) {
            do {
                int n3;
                block5 : {
                    char c = charSequence.charAt(n);
                    int n4 = arrc.length;
                    for (n3 = 0; n3 < n4; ++n3) {
                        if (!CharsKt.equals((char)arrc[n3], (char)c, (boolean)bl)) continue;
                        n3 = 1;
                        break block5;
                    }
                    n3 = 0;
                }
                if (n3 != 0) {
                    return n;
                }
                if (n == n2) break;
                ++n;
            } while (true);
        }
        return -1;
    }

    public static /* bridge */ /* synthetic */ int indexOfAny$default(CharSequence charSequence, Collection collection, int n, boolean bl, int n2, Object object) {
        if ((n2 & 2) != 0) {
            n = 0;
        }
        if ((n2 & 4) != 0) {
            bl = false;
        }
        return StringsKt.indexOfAny((CharSequence)charSequence, (Collection)collection, (int)n, (boolean)bl);
    }

    public static /* bridge */ /* synthetic */ int indexOfAny$default(CharSequence charSequence, char[] arrc, int n, boolean bl, int n2, Object object) {
        if ((n2 & 2) != 0) {
            n = 0;
        }
        if ((n2 & 4) != 0) {
            bl = false;
        }
        return StringsKt.indexOfAny((CharSequence)charSequence, (char[])arrc, (int)n, (boolean)bl);
    }

    @InlineOnly
    private static final boolean isEmpty(@NotNull CharSequence charSequence) {
        if (charSequence.length() == 0) {
            return true;
        }
        return false;
    }

    @InlineOnly
    private static final boolean isNotBlank(@NotNull CharSequence charSequence) {
        return StringsKt.isBlank((CharSequence)charSequence) ^ true;
    }

    @InlineOnly
    private static final boolean isNotEmpty(@NotNull CharSequence charSequence) {
        if (charSequence.length() > 0) {
            return true;
        }
        return false;
    }

    @InlineOnly
    private static final boolean isNullOrBlank(@Nullable CharSequence charSequence) {
        if (charSequence != null && !StringsKt.isBlank((CharSequence)charSequence)) {
            return false;
        }
        return true;
    }

    @InlineOnly
    private static final boolean isNullOrEmpty(@Nullable CharSequence charSequence) {
        if (charSequence != null && charSequence.length() != 0) {
            return false;
        }
        return true;
    }

    @NotNull
    public static final CharIterator iterator(@NotNull CharSequence charSequence) {
        Intrinsics.checkParameterIsNotNull(charSequence, "$receiver");
        return (CharIterator)new iterator.1(charSequence);
    }

    public static final int lastIndexOf(@NotNull CharSequence charSequence, char c, int n, boolean bl) {
        Intrinsics.checkParameterIsNotNull(charSequence, "$receiver");
        if (!bl && charSequence instanceof String) {
            return ((String)charSequence).lastIndexOf(c, n);
        }
        return StringsKt.lastIndexOfAny((CharSequence)charSequence, (char[])new char[]{c}, (int)n, (boolean)bl);
    }

    public static final int lastIndexOf(@NotNull CharSequence charSequence, @NotNull String string2, int n, boolean bl) {
        Intrinsics.checkParameterIsNotNull(charSequence, "$receiver");
        Intrinsics.checkParameterIsNotNull(string2, "string");
        if (!bl && charSequence instanceof String) {
            return ((String)charSequence).lastIndexOf(string2, n);
        }
        return StringsKt__StringsKt.indexOf$StringsKt__StringsKt(charSequence, string2, n, 0, bl, true);
    }

    public static /* bridge */ /* synthetic */ int lastIndexOf$default(CharSequence charSequence, char c, int n, boolean bl, int n2, Object object) {
        if ((n2 & 2) != 0) {
            n = StringsKt.getLastIndex((CharSequence)charSequence);
        }
        if ((n2 & 4) != 0) {
            bl = false;
        }
        return StringsKt.lastIndexOf((CharSequence)charSequence, (char)c, (int)n, (boolean)bl);
    }

    public static /* bridge */ /* synthetic */ int lastIndexOf$default(CharSequence charSequence, String string2, int n, boolean bl, int n2, Object object) {
        if ((n2 & 2) != 0) {
            n = StringsKt.getLastIndex((CharSequence)charSequence);
        }
        if ((n2 & 4) != 0) {
            bl = false;
        }
        return StringsKt.lastIndexOf((CharSequence)charSequence, (String)string2, (int)n, (boolean)bl);
    }

    public static final int lastIndexOfAny(@NotNull CharSequence object, @NotNull Collection<String> collection, int n, boolean bl) {
        Intrinsics.checkParameterIsNotNull(object, "$receiver");
        Intrinsics.checkParameterIsNotNull(collection, "strings");
        object = StringsKt__StringsKt.findAnyOf$StringsKt__StringsKt((CharSequence)object, collection, n, bl, true);
        if (object != null && (object = (Integer)object.getFirst()) != null) {
            return object.intValue();
        }
        return -1;
    }

    public static final int lastIndexOfAny(@NotNull CharSequence charSequence, @NotNull char[] arrc, int n, boolean bl) {
        Intrinsics.checkParameterIsNotNull(charSequence, "$receiver");
        Intrinsics.checkParameterIsNotNull(arrc, "chars");
        if (!bl && arrc.length == 1 && charSequence instanceof String) {
            char c = ArraysKt.single((char[])arrc);
            return ((String)charSequence).lastIndexOf(c, n);
        }
        for (n = RangesKt.coerceAtMost((int)n, (int)StringsKt.getLastIndex((CharSequence)charSequence)); n >= 0; --n) {
            boolean bl2;
            char c = charSequence.charAt(n);
            int n2 = arrc.length;
            boolean bl3 = false;
            int n3 = 0;
            do {
                bl2 = bl3;
                if (n3 >= n2) break;
                if (CharsKt.equals((char)arrc[n3], (char)c, (boolean)bl)) {
                    bl2 = true;
                    break;
                }
                ++n3;
            } while (true);
            if (!bl2) continue;
            return n;
        }
        return -1;
    }

    public static /* bridge */ /* synthetic */ int lastIndexOfAny$default(CharSequence charSequence, Collection collection, int n, boolean bl, int n2, Object object) {
        if ((n2 & 2) != 0) {
            n = StringsKt.getLastIndex((CharSequence)charSequence);
        }
        if ((n2 & 4) != 0) {
            bl = false;
        }
        return StringsKt.lastIndexOfAny((CharSequence)charSequence, (Collection)collection, (int)n, (boolean)bl);
    }

    public static /* bridge */ /* synthetic */ int lastIndexOfAny$default(CharSequence charSequence, char[] arrc, int n, boolean bl, int n2, Object object) {
        if ((n2 & 2) != 0) {
            n = StringsKt.getLastIndex((CharSequence)charSequence);
        }
        if ((n2 & 4) != 0) {
            bl = false;
        }
        return StringsKt.lastIndexOfAny((CharSequence)charSequence, (char[])arrc, (int)n, (boolean)bl);
    }

    @NotNull
    public static final Sequence<String> lineSequence(@NotNull CharSequence charSequence) {
        Intrinsics.checkParameterIsNotNull(charSequence, "$receiver");
        return StringsKt.splitToSequence$default((CharSequence)charSequence, (String[])new String[]{"\r\n", "\n", "\r"}, (boolean)false, (int)0, (int)6, null);
    }

    @NotNull
    public static final List<String> lines(@NotNull CharSequence charSequence) {
        Intrinsics.checkParameterIsNotNull(charSequence, "$receiver");
        return SequencesKt.toList((Sequence)StringsKt.lineSequence((CharSequence)charSequence));
    }

    @InlineOnly
    private static final boolean matches(@NotNull CharSequence charSequence, Regex regex) {
        return regex.matches(charSequence);
    }

    @InlineOnly
    private static final String orEmpty(@Nullable String string2) {
        if (string2 != null) {
            return string2;
        }
        return "";
    }

    @NotNull
    public static final CharSequence padEnd(@NotNull CharSequence charSequence, int n, char c) {
        Intrinsics.checkParameterIsNotNull(charSequence, "$receiver");
        if (n < 0) {
            charSequence = new StringBuilder();
            charSequence.append("Desired length ");
            charSequence.append(n);
            charSequence.append(" is less than zero.");
            throw (Throwable)new IllegalArgumentException(charSequence.toString());
        }
        if (n <= charSequence.length()) {
            return charSequence.subSequence(0, charSequence.length());
        }
        StringBuilder stringBuilder = new StringBuilder(n);
        stringBuilder.append(charSequence);
        int n2 = n - charSequence.length();
        n = 1;
        if (1 <= n2) {
            do {
                stringBuilder.append(c);
                if (n == n2) break;
                ++n;
            } while (true);
        }
        return stringBuilder;
    }

    @NotNull
    public static final String padEnd(@NotNull String string2, int n, char c) {
        Intrinsics.checkParameterIsNotNull(string2, "$receiver");
        return StringsKt.padEnd((CharSequence)string2, (int)n, (char)c).toString();
    }

    @NotNull
    public static /* bridge */ /* synthetic */ CharSequence padEnd$default(CharSequence charSequence, int n, char c, int n2, Object object) {
        if ((n2 & 2) != 0) {
            c = (char)32;
        }
        return StringsKt.padEnd((CharSequence)charSequence, (int)n, (char)c);
    }

    @NotNull
    public static /* bridge */ /* synthetic */ String padEnd$default(String string2, int n, char c, int n2, Object object) {
        if ((n2 & 2) != 0) {
            c = (char)32;
        }
        return StringsKt.padEnd((String)string2, (int)n, (char)c);
    }

    @NotNull
    public static final CharSequence padStart(@NotNull CharSequence charSequence, int n, char c) {
        Intrinsics.checkParameterIsNotNull(charSequence, "$receiver");
        if (n < 0) {
            charSequence = new StringBuilder();
            charSequence.append("Desired length ");
            charSequence.append(n);
            charSequence.append(" is less than zero.");
            throw (Throwable)new IllegalArgumentException(charSequence.toString());
        }
        if (n <= charSequence.length()) {
            return charSequence.subSequence(0, charSequence.length());
        }
        StringBuilder stringBuilder = new StringBuilder(n);
        int n2 = n - charSequence.length();
        n = 1;
        if (1 <= n2) {
            do {
                stringBuilder.append(c);
                if (n == n2) break;
                ++n;
            } while (true);
        }
        stringBuilder.append(charSequence);
        return stringBuilder;
    }

    @NotNull
    public static final String padStart(@NotNull String string2, int n, char c) {
        Intrinsics.checkParameterIsNotNull(string2, "$receiver");
        return StringsKt.padStart((CharSequence)string2, (int)n, (char)c).toString();
    }

    @NotNull
    public static /* bridge */ /* synthetic */ CharSequence padStart$default(CharSequence charSequence, int n, char c, int n2, Object object) {
        if ((n2 & 2) != 0) {
            c = (char)32;
        }
        return StringsKt.padStart((CharSequence)charSequence, (int)n, (char)c);
    }

    @NotNull
    public static /* bridge */ /* synthetic */ String padStart$default(String string2, int n, char c, int n2, Object object) {
        if ((n2 & 2) != 0) {
            c = (char)32;
        }
        return StringsKt.padStart((String)string2, (int)n, (char)c);
    }

    private static final Sequence<IntRange> rangesDelimitedBy$StringsKt__StringsKt(@NotNull CharSequence charSequence, char[] arrc, int n, boolean bl, int n2) {
        boolean bl2 = n2 >= 0;
        if (!bl2) {
            charSequence = new StringBuilder();
            charSequence.append("Limit must be non-negative, but was ");
            charSequence.append(n2);
            charSequence.append('.');
            throw (Throwable)new IllegalArgumentException(charSequence.toString().toString());
        }
        return (Sequence)new DelimitedRangesSequence(charSequence, n, n2, (Function2)new rangesDelimitedBy.2(arrc, bl));
    }

    private static final Sequence<IntRange> rangesDelimitedBy$StringsKt__StringsKt(@NotNull CharSequence charSequence, String[] arrstring, int n, boolean bl, int n2) {
        boolean bl2 = n2 >= 0;
        if (!bl2) {
            charSequence = new StringBuilder();
            charSequence.append("Limit must be non-negative, but was ");
            charSequence.append(n2);
            charSequence.append('.');
            throw (Throwable)new IllegalArgumentException(charSequence.toString().toString());
        }
        return (Sequence)new DelimitedRangesSequence(charSequence, n, n2, (Function2)new rangesDelimitedBy.4(ArraysKt.asList((Object[])arrstring), bl));
    }

    static /* bridge */ /* synthetic */ Sequence rangesDelimitedBy$StringsKt__StringsKt$default(CharSequence charSequence, char[] arrc, int n, boolean bl, int n2, int n3, Object object) {
        if ((n3 & 2) != 0) {
            n = 0;
        }
        if ((n3 & 4) != 0) {
            bl = false;
        }
        if ((n3 & 8) != 0) {
            n2 = 0;
        }
        return StringsKt__StringsKt.rangesDelimitedBy$StringsKt__StringsKt(charSequence, arrc, n, bl, n2);
    }

    static /* bridge */ /* synthetic */ Sequence rangesDelimitedBy$StringsKt__StringsKt$default(CharSequence charSequence, String[] arrstring, int n, boolean bl, int n2, int n3, Object object) {
        if ((n3 & 2) != 0) {
            n = 0;
        }
        if ((n3 & 4) != 0) {
            bl = false;
        }
        if ((n3 & 8) != 0) {
            n2 = 0;
        }
        return StringsKt__StringsKt.rangesDelimitedBy$StringsKt__StringsKt(charSequence, arrstring, n, bl, n2);
    }

    public static final boolean regionMatchesImpl(@NotNull CharSequence charSequence, int n, @NotNull CharSequence charSequence2, int n2, int n3, boolean bl) {
        Intrinsics.checkParameterIsNotNull(charSequence, "$receiver");
        Intrinsics.checkParameterIsNotNull(charSequence2, "other");
        if (n2 >= 0 && n >= 0 && n <= charSequence.length() - n3) {
            if (n2 > charSequence2.length() - n3) {
                return false;
            }
            for (int i = 0; i < n3; ++i) {
                if (CharsKt.equals((char)charSequence.charAt(n + i), (char)charSequence2.charAt(n2 + i), (boolean)bl)) continue;
                return false;
            }
            return true;
        }
        return false;
    }

    @NotNull
    public static final CharSequence removePrefix(@NotNull CharSequence charSequence, @NotNull CharSequence charSequence2) {
        Intrinsics.checkParameterIsNotNull(charSequence, "$receiver");
        Intrinsics.checkParameterIsNotNull(charSequence2, "prefix");
        if (StringsKt.startsWith$default((CharSequence)charSequence, (CharSequence)charSequence2, (boolean)false, (int)2, null)) {
            return charSequence.subSequence(charSequence2.length(), charSequence.length());
        }
        return charSequence.subSequence(0, charSequence.length());
    }

    @NotNull
    public static final String removePrefix(@NotNull String string2, @NotNull CharSequence charSequence) {
        Intrinsics.checkParameterIsNotNull(string2, "$receiver");
        Intrinsics.checkParameterIsNotNull(charSequence, "prefix");
        if (StringsKt.startsWith$default((CharSequence)string2, (CharSequence)charSequence, (boolean)false, (int)2, null)) {
            string2 = string2.substring(charSequence.length());
            Intrinsics.checkExpressionValueIsNotNull(string2, "(this as java.lang.String).substring(startIndex)");
            return string2;
        }
        return string2;
    }

    @NotNull
    public static final CharSequence removeRange(@NotNull CharSequence charSequence, int n, int n2) {
        Intrinsics.checkParameterIsNotNull(charSequence, "$receiver");
        if (n2 < n) {
            charSequence = new StringBuilder();
            charSequence.append("End index (");
            charSequence.append(n2);
            charSequence.append(") is less than start index (");
            charSequence.append(n);
            charSequence.append(").");
            throw (Throwable)new IndexOutOfBoundsException(charSequence.toString());
        }
        if (n2 == n) {
            return charSequence.subSequence(0, charSequence.length());
        }
        StringBuilder stringBuilder = new StringBuilder(charSequence.length() - (n2 - n));
        stringBuilder.append(charSequence, 0, n);
        stringBuilder.append(charSequence, n2, charSequence.length());
        return stringBuilder;
    }

    @NotNull
    public static final CharSequence removeRange(@NotNull CharSequence charSequence, @NotNull IntRange intRange) {
        Intrinsics.checkParameterIsNotNull(charSequence, "$receiver");
        Intrinsics.checkParameterIsNotNull((Object)intRange, "range");
        return StringsKt.removeRange((CharSequence)charSequence, (int)intRange.getStart(), (int)(intRange.getEndInclusive() + 1));
    }

    @InlineOnly
    private static final String removeRange(@NotNull String string2, int n, int n2) {
        if (string2 == null) {
            throw new TypeCastException("null cannot be cast to non-null type kotlin.CharSequence");
        }
        return StringsKt.removeRange((CharSequence)string2, (int)n, (int)n2).toString();
    }

    @InlineOnly
    private static final String removeRange(@NotNull String string2, IntRange intRange) {
        if (string2 == null) {
            throw new TypeCastException("null cannot be cast to non-null type kotlin.CharSequence");
        }
        return StringsKt.removeRange((CharSequence)string2, (IntRange)intRange).toString();
    }

    @NotNull
    public static final CharSequence removeSuffix(@NotNull CharSequence charSequence, @NotNull CharSequence charSequence2) {
        Intrinsics.checkParameterIsNotNull(charSequence, "$receiver");
        Intrinsics.checkParameterIsNotNull(charSequence2, "suffix");
        if (StringsKt.endsWith$default((CharSequence)charSequence, (CharSequence)charSequence2, (boolean)false, (int)2, null)) {
            return charSequence.subSequence(0, charSequence.length() - charSequence2.length());
        }
        return charSequence.subSequence(0, charSequence.length());
    }

    @NotNull
    public static final String removeSuffix(@NotNull String string2, @NotNull CharSequence charSequence) {
        Intrinsics.checkParameterIsNotNull(string2, "$receiver");
        Intrinsics.checkParameterIsNotNull(charSequence, "suffix");
        if (StringsKt.endsWith$default((CharSequence)string2, (CharSequence)charSequence, (boolean)false, (int)2, null)) {
            string2 = string2.substring(0, string2.length() - charSequence.length());
            Intrinsics.checkExpressionValueIsNotNull(string2, "(this as java.lang.Strin\u2026ing(startIndex, endIndex)");
            return string2;
        }
        return string2;
    }

    @NotNull
    public static final CharSequence removeSurrounding(@NotNull CharSequence charSequence, @NotNull CharSequence charSequence2) {
        Intrinsics.checkParameterIsNotNull(charSequence, "$receiver");
        Intrinsics.checkParameterIsNotNull(charSequence2, "delimiter");
        return StringsKt.removeSurrounding((CharSequence)charSequence, (CharSequence)charSequence2, (CharSequence)charSequence2);
    }

    @NotNull
    public static final CharSequence removeSurrounding(@NotNull CharSequence charSequence, @NotNull CharSequence charSequence2, @NotNull CharSequence charSequence3) {
        Intrinsics.checkParameterIsNotNull(charSequence, "$receiver");
        Intrinsics.checkParameterIsNotNull(charSequence2, "prefix");
        Intrinsics.checkParameterIsNotNull(charSequence3, "suffix");
        if (charSequence.length() >= charSequence2.length() + charSequence3.length() && StringsKt.startsWith$default((CharSequence)charSequence, (CharSequence)charSequence2, (boolean)false, (int)2, null) && StringsKt.endsWith$default((CharSequence)charSequence, (CharSequence)charSequence3, (boolean)false, (int)2, null)) {
            return charSequence.subSequence(charSequence2.length(), charSequence.length() - charSequence3.length());
        }
        return charSequence.subSequence(0, charSequence.length());
    }

    @NotNull
    public static final String removeSurrounding(@NotNull String string2, @NotNull CharSequence charSequence) {
        Intrinsics.checkParameterIsNotNull(string2, "$receiver");
        Intrinsics.checkParameterIsNotNull(charSequence, "delimiter");
        return StringsKt.removeSurrounding((String)string2, (CharSequence)charSequence, (CharSequence)charSequence);
    }

    @NotNull
    public static final String removeSurrounding(@NotNull String string2, @NotNull CharSequence charSequence, @NotNull CharSequence charSequence2) {
        CharSequence charSequence3;
        Intrinsics.checkParameterIsNotNull(string2, "$receiver");
        Intrinsics.checkParameterIsNotNull(charSequence, "prefix");
        Intrinsics.checkParameterIsNotNull(charSequence2, "suffix");
        if (string2.length() >= charSequence.length() + charSequence2.length() && StringsKt.startsWith$default((CharSequence)(charSequence3 = (CharSequence)string2), (CharSequence)charSequence, (boolean)false, (int)2, null) && StringsKt.endsWith$default((CharSequence)charSequence3, (CharSequence)charSequence2, (boolean)false, (int)2, null)) {
            string2 = string2.substring(charSequence.length(), string2.length() - charSequence2.length());
            Intrinsics.checkExpressionValueIsNotNull(string2, "(this as java.lang.Strin\u2026ing(startIndex, endIndex)");
            return string2;
        }
        return string2;
    }

    @InlineOnly
    private static final String replace(@NotNull CharSequence charSequence, Regex regex, String string2) {
        return regex.replace(charSequence, string2);
    }

    @InlineOnly
    private static final String replace(@NotNull CharSequence charSequence, Regex regex, Function1<? super MatchResult, ? extends CharSequence> function1) {
        return regex.replace(charSequence, function1);
    }

    @NotNull
    public static final String replaceAfter(@NotNull String string2, char c, @NotNull String string3, @NotNull String string4) {
        Intrinsics.checkParameterIsNotNull(string2, "$receiver");
        Intrinsics.checkParameterIsNotNull(string3, "replacement");
        Intrinsics.checkParameterIsNotNull(string4, "missingDelimiterValue");
        CharSequence charSequence = string2;
        int n = StringsKt.indexOf$default((CharSequence)charSequence, (char)c, (int)0, (boolean)false, (int)6, null);
        if (n == -1) {
            return string4;
        }
        return StringsKt.replaceRange((CharSequence)charSequence, (int)(n + 1), (int)string2.length(), (CharSequence)string3).toString();
    }

    @NotNull
    public static final String replaceAfter(@NotNull String string2, @NotNull String string3, @NotNull String string4, @NotNull String string5) {
        Intrinsics.checkParameterIsNotNull(string2, "$receiver");
        Intrinsics.checkParameterIsNotNull(string3, "delimiter");
        Intrinsics.checkParameterIsNotNull(string4, "replacement");
        Intrinsics.checkParameterIsNotNull(string5, "missingDelimiterValue");
        CharSequence charSequence = string2;
        int n = StringsKt.indexOf$default((CharSequence)charSequence, (String)string3, (int)0, (boolean)false, (int)6, null);
        if (n == -1) {
            return string5;
        }
        return StringsKt.replaceRange((CharSequence)charSequence, (int)(n + string3.length()), (int)string2.length(), (CharSequence)string4).toString();
    }

    @NotNull
    public static /* bridge */ /* synthetic */ String replaceAfter$default(String string2, char c, String string3, String string4, int n, Object object) {
        if ((n & 4) != 0) {
            string4 = string2;
        }
        return StringsKt.replaceAfter((String)string2, (char)c, (String)string3, (String)string4);
    }

    @NotNull
    public static /* bridge */ /* synthetic */ String replaceAfter$default(String string2, String string3, String string4, String string5, int n, Object object) {
        if ((n & 4) != 0) {
            string5 = string2;
        }
        return StringsKt.replaceAfter((String)string2, (String)string3, (String)string4, (String)string5);
    }

    @NotNull
    public static final String replaceAfterLast(@NotNull String string2, char c, @NotNull String string3, @NotNull String string4) {
        Intrinsics.checkParameterIsNotNull(string2, "$receiver");
        Intrinsics.checkParameterIsNotNull(string3, "replacement");
        Intrinsics.checkParameterIsNotNull(string4, "missingDelimiterValue");
        CharSequence charSequence = string2;
        int n = StringsKt.lastIndexOf$default((CharSequence)charSequence, (char)c, (int)0, (boolean)false, (int)6, null);
        if (n == -1) {
            return string4;
        }
        return StringsKt.replaceRange((CharSequence)charSequence, (int)(n + 1), (int)string2.length(), (CharSequence)string3).toString();
    }

    @NotNull
    public static final String replaceAfterLast(@NotNull String string2, @NotNull String string3, @NotNull String string4, @NotNull String string5) {
        Intrinsics.checkParameterIsNotNull(string2, "$receiver");
        Intrinsics.checkParameterIsNotNull(string3, "delimiter");
        Intrinsics.checkParameterIsNotNull(string4, "replacement");
        Intrinsics.checkParameterIsNotNull(string5, "missingDelimiterValue");
        CharSequence charSequence = string2;
        int n = StringsKt.lastIndexOf$default((CharSequence)charSequence, (String)string3, (int)0, (boolean)false, (int)6, null);
        if (n == -1) {
            return string5;
        }
        return StringsKt.replaceRange((CharSequence)charSequence, (int)(n + string3.length()), (int)string2.length(), (CharSequence)string4).toString();
    }

    @NotNull
    public static /* bridge */ /* synthetic */ String replaceAfterLast$default(String string2, char c, String string3, String string4, int n, Object object) {
        if ((n & 4) != 0) {
            string4 = string2;
        }
        return StringsKt.replaceAfterLast((String)string2, (char)c, (String)string3, (String)string4);
    }

    @NotNull
    public static /* bridge */ /* synthetic */ String replaceAfterLast$default(String string2, String string3, String string4, String string5, int n, Object object) {
        if ((n & 4) != 0) {
            string5 = string2;
        }
        return StringsKt.replaceAfterLast((String)string2, (String)string3, (String)string4, (String)string5);
    }

    @NotNull
    public static final String replaceBefore(@NotNull String charSequence, char c, @NotNull String string2, @NotNull String string3) {
        Intrinsics.checkParameterIsNotNull(charSequence, "$receiver");
        Intrinsics.checkParameterIsNotNull(string2, "replacement");
        Intrinsics.checkParameterIsNotNull(string3, "missingDelimiterValue");
        charSequence = charSequence;
        int n = StringsKt.indexOf$default((CharSequence)charSequence, (char)c, (int)0, (boolean)false, (int)6, null);
        if (n == -1) {
            return string3;
        }
        return StringsKt.replaceRange((CharSequence)charSequence, (int)0, (int)n, (CharSequence)string2).toString();
    }

    @NotNull
    public static final String replaceBefore(@NotNull String charSequence, @NotNull String string2, @NotNull String string3, @NotNull String string4) {
        Intrinsics.checkParameterIsNotNull(charSequence, "$receiver");
        Intrinsics.checkParameterIsNotNull(string2, "delimiter");
        Intrinsics.checkParameterIsNotNull(string3, "replacement");
        Intrinsics.checkParameterIsNotNull(string4, "missingDelimiterValue");
        charSequence = charSequence;
        int n = StringsKt.indexOf$default((CharSequence)charSequence, (String)string2, (int)0, (boolean)false, (int)6, null);
        if (n == -1) {
            return string4;
        }
        return StringsKt.replaceRange((CharSequence)charSequence, (int)0, (int)n, (CharSequence)string3).toString();
    }

    @NotNull
    public static /* bridge */ /* synthetic */ String replaceBefore$default(String string2, char c, String string3, String string4, int n, Object object) {
        if ((n & 4) != 0) {
            string4 = string2;
        }
        return StringsKt.replaceBefore((String)string2, (char)c, (String)string3, (String)string4);
    }

    @NotNull
    public static /* bridge */ /* synthetic */ String replaceBefore$default(String string2, String string3, String string4, String string5, int n, Object object) {
        if ((n & 4) != 0) {
            string5 = string2;
        }
        return StringsKt.replaceBefore((String)string2, (String)string3, (String)string4, (String)string5);
    }

    @NotNull
    public static final String replaceBeforeLast(@NotNull String charSequence, char c, @NotNull String string2, @NotNull String string3) {
        Intrinsics.checkParameterIsNotNull(charSequence, "$receiver");
        Intrinsics.checkParameterIsNotNull(string2, "replacement");
        Intrinsics.checkParameterIsNotNull(string3, "missingDelimiterValue");
        charSequence = charSequence;
        int n = StringsKt.lastIndexOf$default((CharSequence)charSequence, (char)c, (int)0, (boolean)false, (int)6, null);
        if (n == -1) {
            return string3;
        }
        return StringsKt.replaceRange((CharSequence)charSequence, (int)0, (int)n, (CharSequence)string2).toString();
    }

    @NotNull
    public static final String replaceBeforeLast(@NotNull String charSequence, @NotNull String string2, @NotNull String string3, @NotNull String string4) {
        Intrinsics.checkParameterIsNotNull(charSequence, "$receiver");
        Intrinsics.checkParameterIsNotNull(string2, "delimiter");
        Intrinsics.checkParameterIsNotNull(string3, "replacement");
        Intrinsics.checkParameterIsNotNull(string4, "missingDelimiterValue");
        charSequence = charSequence;
        int n = StringsKt.lastIndexOf$default((CharSequence)charSequence, (String)string2, (int)0, (boolean)false, (int)6, null);
        if (n == -1) {
            return string4;
        }
        return StringsKt.replaceRange((CharSequence)charSequence, (int)0, (int)n, (CharSequence)string3).toString();
    }

    @NotNull
    public static /* bridge */ /* synthetic */ String replaceBeforeLast$default(String string2, char c, String string3, String string4, int n, Object object) {
        if ((n & 4) != 0) {
            string4 = string2;
        }
        return StringsKt.replaceBeforeLast((String)string2, (char)c, (String)string3, (String)string4);
    }

    @NotNull
    public static /* bridge */ /* synthetic */ String replaceBeforeLast$default(String string2, String string3, String string4, String string5, int n, Object object) {
        if ((n & 4) != 0) {
            string5 = string2;
        }
        return StringsKt.replaceBeforeLast((String)string2, (String)string3, (String)string4, (String)string5);
    }

    @InlineOnly
    private static final String replaceFirst(@NotNull CharSequence charSequence, Regex regex, String string2) {
        return regex.replaceFirst(charSequence, string2);
    }

    @NotNull
    public static final CharSequence replaceRange(@NotNull CharSequence charSequence, int n, int n2, @NotNull CharSequence charSequence2) {
        Intrinsics.checkParameterIsNotNull(charSequence, "$receiver");
        Intrinsics.checkParameterIsNotNull(charSequence2, "replacement");
        if (n2 < n) {
            charSequence = new StringBuilder();
            charSequence.append("End index (");
            charSequence.append(n2);
            charSequence.append(") is less than start index (");
            charSequence.append(n);
            charSequence.append(").");
            throw (Throwable)new IndexOutOfBoundsException(charSequence.toString());
        }
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append(charSequence, 0, n);
        stringBuilder.append(charSequence2);
        stringBuilder.append(charSequence, n2, charSequence.length());
        return stringBuilder;
    }

    @NotNull
    public static final CharSequence replaceRange(@NotNull CharSequence charSequence, @NotNull IntRange intRange, @NotNull CharSequence charSequence2) {
        Intrinsics.checkParameterIsNotNull(charSequence, "$receiver");
        Intrinsics.checkParameterIsNotNull((Object)intRange, "range");
        Intrinsics.checkParameterIsNotNull(charSequence2, "replacement");
        return StringsKt.replaceRange((CharSequence)charSequence, (int)intRange.getStart(), (int)(intRange.getEndInclusive() + 1), (CharSequence)charSequence2);
    }

    @InlineOnly
    private static final String replaceRange(@NotNull String string2, int n, int n2, CharSequence charSequence) {
        if (string2 == null) {
            throw new TypeCastException("null cannot be cast to non-null type kotlin.CharSequence");
        }
        return StringsKt.replaceRange((CharSequence)string2, (int)n, (int)n2, (CharSequence)charSequence).toString();
    }

    @InlineOnly
    private static final String replaceRange(@NotNull String string2, IntRange intRange, CharSequence charSequence) {
        if (string2 == null) {
            throw new TypeCastException("null cannot be cast to non-null type kotlin.CharSequence");
        }
        return StringsKt.replaceRange((CharSequence)string2, (IntRange)intRange, (CharSequence)charSequence).toString();
    }

    @InlineOnly
    private static final List<String> split(@NotNull CharSequence charSequence, Regex regex, int n) {
        return regex.split(charSequence, n);
    }

    @NotNull
    public static final List<String> split(@NotNull CharSequence charSequence, @NotNull char[] object, boolean bl, int n) {
        Intrinsics.checkParameterIsNotNull(charSequence, "$receiver");
        Intrinsics.checkParameterIsNotNull(object, "delimiters");
        if (((char[])object).length == 1) {
            return StringsKt__StringsKt.split$StringsKt__StringsKt(charSequence, String.valueOf(object[0]), bl, n);
        }
        Object object2 = SequencesKt.asIterable((Sequence)StringsKt__StringsKt.rangesDelimitedBy$StringsKt__StringsKt$default(charSequence, (char[])object, 0, bl, n, 2, null));
        object = new ArrayList(CollectionsKt.collectionSizeOrDefault((Iterable)object2, (int)10));
        object2 = object2.iterator();
        while (object2.hasNext()) {
            object.add(StringsKt.substring((CharSequence)charSequence, (IntRange)((IntRange)object2.next())));
        }
        return (List)object;
    }

    @NotNull
    public static final List<String> split(@NotNull CharSequence charSequence, @NotNull String[] object, boolean bl, int n) {
        Object object2;
        Intrinsics.checkParameterIsNotNull(charSequence, "$receiver");
        Intrinsics.checkParameterIsNotNull(object, "delimiters");
        if (((String[])object).length == 1) {
            boolean bl2 = false;
            object2 = object[0];
            if (((CharSequence)object2).length() == 0) {
                bl2 = true;
            }
            if (!bl2) {
                return StringsKt__StringsKt.split$StringsKt__StringsKt(charSequence, (String)object2, bl, n);
            }
        }
        object2 = SequencesKt.asIterable((Sequence)StringsKt__StringsKt.rangesDelimitedBy$StringsKt__StringsKt$default(charSequence, (String[])object, 0, bl, n, 2, null));
        object = new ArrayList(CollectionsKt.collectionSizeOrDefault((Iterable)object2, (int)10));
        object2 = object2.iterator();
        while (object2.hasNext()) {
            object.add(StringsKt.substring((CharSequence)charSequence, (IntRange)((IntRange)object2.next())));
        }
        return (List)object;
    }

    private static final List<String> split$StringsKt__StringsKt(@NotNull CharSequence charSequence, String string2, boolean bl, int n) {
        int n2 = 0;
        boolean bl2 = n >= 0;
        if (!bl2) {
            charSequence = new StringBuilder();
            charSequence.append("Limit must be non-negative, but was ");
            charSequence.append(n);
            charSequence.append('.');
            throw (Throwable)new IllegalArgumentException(charSequence.toString().toString());
        }
        int n3 = StringsKt.indexOf((CharSequence)charSequence, (String)string2, (int)0, (boolean)bl);
        if (n3 != -1 && n != 1) {
            int n4;
            bl2 = n > 0;
            int n5 = 10;
            if (bl2) {
                n5 = RangesKt.coerceAtMost((int)n, (int)10);
            }
            ArrayList<String> arrayList = new ArrayList<String>(n5);
            n5 = n3;
            do {
                arrayList.add(charSequence.subSequence(n2, n5).toString());
                n3 = string2.length() + n5;
                if (bl2 && arrayList.size() == n - 1) break;
                n4 = StringsKt.indexOf((CharSequence)charSequence, (String)string2, (int)n3, (boolean)bl);
                n2 = n3;
                n5 = n4;
            } while (n4 != -1);
            arrayList.add(charSequence.subSequence(n3, charSequence.length()).toString());
            return arrayList;
        }
        return CollectionsKt.listOf((Object)charSequence.toString());
    }

    @InlineOnly
    static /* bridge */ /* synthetic */ List split$default(CharSequence charSequence, Regex regex, int n, int n2, Object object) {
        if ((n2 & 2) != 0) {
            n = 0;
        }
        return regex.split(charSequence, n);
    }

    @NotNull
    public static /* bridge */ /* synthetic */ List split$default(CharSequence charSequence, char[] arrc, boolean bl, int n, int n2, Object object) {
        if ((n2 & 2) != 0) {
            bl = false;
        }
        if ((n2 & 4) != 0) {
            n = 0;
        }
        return StringsKt.split((CharSequence)charSequence, (char[])arrc, (boolean)bl, (int)n);
    }

    @NotNull
    public static /* bridge */ /* synthetic */ List split$default(CharSequence charSequence, String[] arrstring, boolean bl, int n, int n2, Object object) {
        if ((n2 & 2) != 0) {
            bl = false;
        }
        if ((n2 & 4) != 0) {
            n = 0;
        }
        return StringsKt.split((CharSequence)charSequence, (String[])arrstring, (boolean)bl, (int)n);
    }

    @NotNull
    public static final Sequence<String> splitToSequence(@NotNull CharSequence charSequence, @NotNull char[] arrc, boolean bl, int n) {
        Intrinsics.checkParameterIsNotNull(charSequence, "$receiver");
        Intrinsics.checkParameterIsNotNull(arrc, "delimiters");
        return SequencesKt.map((Sequence)StringsKt__StringsKt.rangesDelimitedBy$StringsKt__StringsKt$default(charSequence, arrc, 0, bl, n, 2, null), (Function1)((Function1)new splitToSequence.2(charSequence)));
    }

    @NotNull
    public static final Sequence<String> splitToSequence(@NotNull CharSequence charSequence, @NotNull String[] arrstring, boolean bl, int n) {
        Intrinsics.checkParameterIsNotNull(charSequence, "$receiver");
        Intrinsics.checkParameterIsNotNull(arrstring, "delimiters");
        return SequencesKt.map((Sequence)StringsKt__StringsKt.rangesDelimitedBy$StringsKt__StringsKt$default(charSequence, arrstring, 0, bl, n, 2, null), (Function1)((Function1)new splitToSequence.1(charSequence)));
    }

    @NotNull
    public static /* bridge */ /* synthetic */ Sequence splitToSequence$default(CharSequence charSequence, char[] arrc, boolean bl, int n, int n2, Object object) {
        if ((n2 & 2) != 0) {
            bl = false;
        }
        if ((n2 & 4) != 0) {
            n = 0;
        }
        return StringsKt.splitToSequence((CharSequence)charSequence, (char[])arrc, (boolean)bl, (int)n);
    }

    @NotNull
    public static /* bridge */ /* synthetic */ Sequence splitToSequence$default(CharSequence charSequence, String[] arrstring, boolean bl, int n, int n2, Object object) {
        if ((n2 & 2) != 0) {
            bl = false;
        }
        if ((n2 & 4) != 0) {
            n = 0;
        }
        return StringsKt.splitToSequence((CharSequence)charSequence, (String[])arrstring, (boolean)bl, (int)n);
    }

    public static final boolean startsWith(@NotNull CharSequence charSequence, char c, boolean bl) {
        boolean bl2;
        Intrinsics.checkParameterIsNotNull(charSequence, "$receiver");
        int n = charSequence.length();
        boolean bl3 = bl2 = false;
        if (n > 0) {
            bl3 = bl2;
            if (CharsKt.equals((char)charSequence.charAt(0), (char)c, (boolean)bl)) {
                bl3 = true;
            }
        }
        return bl3;
    }

    public static final boolean startsWith(@NotNull CharSequence charSequence, @NotNull CharSequence charSequence2, int n, boolean bl) {
        Intrinsics.checkParameterIsNotNull(charSequence, "$receiver");
        Intrinsics.checkParameterIsNotNull(charSequence2, "prefix");
        if (!bl && charSequence instanceof String && charSequence2 instanceof String) {
            return StringsKt.startsWith$default((String)((String)charSequence), (String)((String)charSequence2), (int)n, (boolean)false, (int)4, null);
        }
        return StringsKt.regionMatchesImpl((CharSequence)charSequence, (int)n, (CharSequence)charSequence2, (int)0, (int)charSequence2.length(), (boolean)bl);
    }

    public static final boolean startsWith(@NotNull CharSequence charSequence, @NotNull CharSequence charSequence2, boolean bl) {
        Intrinsics.checkParameterIsNotNull(charSequence, "$receiver");
        Intrinsics.checkParameterIsNotNull(charSequence2, "prefix");
        if (!bl && charSequence instanceof String && charSequence2 instanceof String) {
            return StringsKt.startsWith$default((String)((String)charSequence), (String)((String)charSequence2), (boolean)false, (int)2, null);
        }
        return StringsKt.regionMatchesImpl((CharSequence)charSequence, (int)0, (CharSequence)charSequence2, (int)0, (int)charSequence2.length(), (boolean)bl);
    }

    public static /* bridge */ /* synthetic */ boolean startsWith$default(CharSequence charSequence, char c, boolean bl, int n, Object object) {
        if ((n & 2) != 0) {
            bl = false;
        }
        return StringsKt.startsWith((CharSequence)charSequence, (char)c, (boolean)bl);
    }

    public static /* bridge */ /* synthetic */ boolean startsWith$default(CharSequence charSequence, CharSequence charSequence2, int n, boolean bl, int n2, Object object) {
        if ((n2 & 4) != 0) {
            bl = false;
        }
        return StringsKt.startsWith((CharSequence)charSequence, (CharSequence)charSequence2, (int)n, (boolean)bl);
    }

    public static /* bridge */ /* synthetic */ boolean startsWith$default(CharSequence charSequence, CharSequence charSequence2, boolean bl, int n, Object object) {
        if ((n & 2) != 0) {
            bl = false;
        }
        return StringsKt.startsWith((CharSequence)charSequence, (CharSequence)charSequence2, (boolean)bl);
    }

    @NotNull
    public static final CharSequence subSequence(@NotNull CharSequence charSequence, @NotNull IntRange intRange) {
        Intrinsics.checkParameterIsNotNull(charSequence, "$receiver");
        Intrinsics.checkParameterIsNotNull((Object)intRange, "range");
        return charSequence.subSequence(intRange.getStart(), intRange.getEndInclusive() + 1);
    }

    @Deprecated(message="Use parameters named startIndex and endIndex.", replaceWith=@ReplaceWith(expression="subSequence(startIndex = start, endIndex = end)", imports={}))
    @InlineOnly
    private static final CharSequence subSequence(@NotNull String string2, int n, int n2) {
        return string2.subSequence(n, n2);
    }

    @InlineOnly
    private static final String substring(@NotNull CharSequence charSequence, int n, int n2) {
        return charSequence.subSequence(n, n2).toString();
    }

    @NotNull
    public static final String substring(@NotNull CharSequence charSequence, @NotNull IntRange intRange) {
        Intrinsics.checkParameterIsNotNull(charSequence, "$receiver");
        Intrinsics.checkParameterIsNotNull((Object)intRange, "range");
        return charSequence.subSequence(intRange.getStart(), intRange.getEndInclusive() + 1).toString();
    }

    @NotNull
    public static final String substring(@NotNull String string2, @NotNull IntRange intRange) {
        Intrinsics.checkParameterIsNotNull(string2, "$receiver");
        Intrinsics.checkParameterIsNotNull((Object)intRange, "range");
        string2 = string2.substring(intRange.getStart(), intRange.getEndInclusive() + 1);
        Intrinsics.checkExpressionValueIsNotNull(string2, "(this as java.lang.Strin\u2026ing(startIndex, endIndex)");
        return string2;
    }

    @InlineOnly
    static /* bridge */ /* synthetic */ String substring$default(CharSequence charSequence, int n, int n2, int n3, Object object) {
        if ((n3 & 2) != 0) {
            n2 = charSequence.length();
        }
        return charSequence.subSequence(n, n2).toString();
    }

    @NotNull
    public static final String substringAfter(@NotNull String string2, char c, @NotNull String string3) {
        Intrinsics.checkParameterIsNotNull(string2, "$receiver");
        Intrinsics.checkParameterIsNotNull(string3, "missingDelimiterValue");
        int n = StringsKt.indexOf$default((CharSequence)string2, (char)c, (int)0, (boolean)false, (int)6, null);
        if (n == -1) {
            return string3;
        }
        string2 = string2.substring(n + 1, string2.length());
        Intrinsics.checkExpressionValueIsNotNull(string2, "(this as java.lang.Strin\u2026ing(startIndex, endIndex)");
        return string2;
    }

    @NotNull
    public static final String substringAfter(@NotNull String string2, @NotNull String string3, @NotNull String string4) {
        Intrinsics.checkParameterIsNotNull(string2, "$receiver");
        Intrinsics.checkParameterIsNotNull(string3, "delimiter");
        Intrinsics.checkParameterIsNotNull(string4, "missingDelimiterValue");
        int n = StringsKt.indexOf$default((CharSequence)string2, (String)string3, (int)0, (boolean)false, (int)6, null);
        if (n == -1) {
            return string4;
        }
        string2 = string2.substring(n + string3.length(), string2.length());
        Intrinsics.checkExpressionValueIsNotNull(string2, "(this as java.lang.Strin\u2026ing(startIndex, endIndex)");
        return string2;
    }

    @NotNull
    public static /* bridge */ /* synthetic */ String substringAfter$default(String string2, char c, String string3, int n, Object object) {
        if ((n & 2) != 0) {
            string3 = string2;
        }
        return StringsKt.substringAfter((String)string2, (char)c, (String)string3);
    }

    @NotNull
    public static /* bridge */ /* synthetic */ String substringAfter$default(String string2, String string3, String string4, int n, Object object) {
        if ((n & 2) != 0) {
            string4 = string2;
        }
        return StringsKt.substringAfter((String)string2, (String)string3, (String)string4);
    }

    @NotNull
    public static final String substringAfterLast(@NotNull String string2, char c, @NotNull String string3) {
        Intrinsics.checkParameterIsNotNull(string2, "$receiver");
        Intrinsics.checkParameterIsNotNull(string3, "missingDelimiterValue");
        int n = StringsKt.lastIndexOf$default((CharSequence)string2, (char)c, (int)0, (boolean)false, (int)6, null);
        if (n == -1) {
            return string3;
        }
        string2 = string2.substring(n + 1, string2.length());
        Intrinsics.checkExpressionValueIsNotNull(string2, "(this as java.lang.Strin\u2026ing(startIndex, endIndex)");
        return string2;
    }

    @NotNull
    public static final String substringAfterLast(@NotNull String string2, @NotNull String string3, @NotNull String string4) {
        Intrinsics.checkParameterIsNotNull(string2, "$receiver");
        Intrinsics.checkParameterIsNotNull(string3, "delimiter");
        Intrinsics.checkParameterIsNotNull(string4, "missingDelimiterValue");
        int n = StringsKt.lastIndexOf$default((CharSequence)string2, (String)string3, (int)0, (boolean)false, (int)6, null);
        if (n == -1) {
            return string4;
        }
        string2 = string2.substring(n + string3.length(), string2.length());
        Intrinsics.checkExpressionValueIsNotNull(string2, "(this as java.lang.Strin\u2026ing(startIndex, endIndex)");
        return string2;
    }

    @NotNull
    public static /* bridge */ /* synthetic */ String substringAfterLast$default(String string2, char c, String string3, int n, Object object) {
        if ((n & 2) != 0) {
            string3 = string2;
        }
        return StringsKt.substringAfterLast((String)string2, (char)c, (String)string3);
    }

    @NotNull
    public static /* bridge */ /* synthetic */ String substringAfterLast$default(String string2, String string3, String string4, int n, Object object) {
        if ((n & 2) != 0) {
            string4 = string2;
        }
        return StringsKt.substringAfterLast((String)string2, (String)string3, (String)string4);
    }

    @NotNull
    public static final String substringBefore(@NotNull String string2, char c, @NotNull String string3) {
        Intrinsics.checkParameterIsNotNull(string2, "$receiver");
        Intrinsics.checkParameterIsNotNull(string3, "missingDelimiterValue");
        int n = StringsKt.indexOf$default((CharSequence)string2, (char)c, (int)0, (boolean)false, (int)6, null);
        if (n == -1) {
            return string3;
        }
        string2 = string2.substring(0, n);
        Intrinsics.checkExpressionValueIsNotNull(string2, "(this as java.lang.Strin\u2026ing(startIndex, endIndex)");
        return string2;
    }

    @NotNull
    public static final String substringBefore(@NotNull String string2, @NotNull String string3, @NotNull String string4) {
        Intrinsics.checkParameterIsNotNull(string2, "$receiver");
        Intrinsics.checkParameterIsNotNull(string3, "delimiter");
        Intrinsics.checkParameterIsNotNull(string4, "missingDelimiterValue");
        int n = StringsKt.indexOf$default((CharSequence)string2, (String)string3, (int)0, (boolean)false, (int)6, null);
        if (n == -1) {
            return string4;
        }
        string2 = string2.substring(0, n);
        Intrinsics.checkExpressionValueIsNotNull(string2, "(this as java.lang.Strin\u2026ing(startIndex, endIndex)");
        return string2;
    }

    @NotNull
    public static /* bridge */ /* synthetic */ String substringBefore$default(String string2, char c, String string3, int n, Object object) {
        if ((n & 2) != 0) {
            string3 = string2;
        }
        return StringsKt.substringBefore((String)string2, (char)c, (String)string3);
    }

    @NotNull
    public static /* bridge */ /* synthetic */ String substringBefore$default(String string2, String string3, String string4, int n, Object object) {
        if ((n & 2) != 0) {
            string4 = string2;
        }
        return StringsKt.substringBefore((String)string2, (String)string3, (String)string4);
    }

    @NotNull
    public static final String substringBeforeLast(@NotNull String string2, char c, @NotNull String string3) {
        Intrinsics.checkParameterIsNotNull(string2, "$receiver");
        Intrinsics.checkParameterIsNotNull(string3, "missingDelimiterValue");
        int n = StringsKt.lastIndexOf$default((CharSequence)string2, (char)c, (int)0, (boolean)false, (int)6, null);
        if (n == -1) {
            return string3;
        }
        string2 = string2.substring(0, n);
        Intrinsics.checkExpressionValueIsNotNull(string2, "(this as java.lang.Strin\u2026ing(startIndex, endIndex)");
        return string2;
    }

    @NotNull
    public static final String substringBeforeLast(@NotNull String string2, @NotNull String string3, @NotNull String string4) {
        Intrinsics.checkParameterIsNotNull(string2, "$receiver");
        Intrinsics.checkParameterIsNotNull(string3, "delimiter");
        Intrinsics.checkParameterIsNotNull(string4, "missingDelimiterValue");
        int n = StringsKt.lastIndexOf$default((CharSequence)string2, (String)string3, (int)0, (boolean)false, (int)6, null);
        if (n == -1) {
            return string4;
        }
        string2 = string2.substring(0, n);
        Intrinsics.checkExpressionValueIsNotNull(string2, "(this as java.lang.Strin\u2026ing(startIndex, endIndex)");
        return string2;
    }

    @NotNull
    public static /* bridge */ /* synthetic */ String substringBeforeLast$default(String string2, char c, String string3, int n, Object object) {
        if ((n & 2) != 0) {
            string3 = string2;
        }
        return StringsKt.substringBeforeLast((String)string2, (char)c, (String)string3);
    }

    @NotNull
    public static /* bridge */ /* synthetic */ String substringBeforeLast$default(String string2, String string3, String string4, int n, Object object) {
        if ((n & 2) != 0) {
            string4 = string2;
        }
        return StringsKt.substringBeforeLast((String)string2, (String)string3, (String)string4);
    }

    @NotNull
    public static final CharSequence trim(@NotNull CharSequence charSequence) {
        Intrinsics.checkParameterIsNotNull(charSequence, "$receiver");
        int n = charSequence.length() - 1;
        int n2 = 0;
        boolean bl = false;
        while (n2 <= n) {
            int n3 = !bl ? n2 : n;
            boolean bl2 = CharsKt.isWhitespace((char)charSequence.charAt(n3));
            if (!bl) {
                if (!bl2) {
                    bl = true;
                    continue;
                }
                ++n2;
                continue;
            }
            if (!bl2) break;
            --n;
        }
        return charSequence.subSequence(n2, n + 1);
    }

    @NotNull
    public static final CharSequence trim(@NotNull CharSequence charSequence, @NotNull Function1<? super Character, Boolean> function1) {
        Intrinsics.checkParameterIsNotNull(charSequence, "$receiver");
        Intrinsics.checkParameterIsNotNull(function1, "predicate");
        int n = charSequence.length() - 1;
        int n2 = 0;
        boolean bl = false;
        while (n2 <= n) {
            int n3 = !bl ? n2 : n;
            boolean bl2 = function1.invoke(Character.valueOf(charSequence.charAt(n3)));
            if (!bl) {
                if (!bl2) {
                    bl = true;
                    continue;
                }
                ++n2;
                continue;
            }
            if (!bl2) break;
            --n;
        }
        return charSequence.subSequence(n2, n + 1);
    }

    @NotNull
    public static final /* varargs */ CharSequence trim(@NotNull CharSequence charSequence, @NotNull char ... arrc) {
        Intrinsics.checkParameterIsNotNull(charSequence, "$receiver");
        Intrinsics.checkParameterIsNotNull(arrc, "chars");
        int n = charSequence.length() - 1;
        int n2 = 0;
        boolean bl = false;
        while (n2 <= n) {
            int n3 = !bl ? n2 : n;
            boolean bl2 = ArraysKt.contains((char[])arrc, (char)charSequence.charAt(n3));
            if (!bl) {
                if (!bl2) {
                    bl = true;
                    continue;
                }
                ++n2;
                continue;
            }
            if (!bl2) break;
            --n;
        }
        return charSequence.subSequence(n2, n + 1);
    }

    @InlineOnly
    private static final String trim(@NotNull String string2) {
        if (string2 == null) {
            throw new TypeCastException("null cannot be cast to non-null type kotlin.CharSequence");
        }
        return StringsKt.trim((CharSequence)string2).toString();
    }

    @NotNull
    public static final String trim(@NotNull String charSequence, @NotNull Function1<? super Character, Boolean> function1) {
        Intrinsics.checkParameterIsNotNull(charSequence, "$receiver");
        Intrinsics.checkParameterIsNotNull(function1, "predicate");
        charSequence = charSequence;
        int n = charSequence.length() - 1;
        int n2 = 0;
        boolean bl = false;
        while (n2 <= n) {
            int n3 = !bl ? n2 : n;
            boolean bl2 = function1.invoke(Character.valueOf(charSequence.charAt(n3)));
            if (!bl) {
                if (!bl2) {
                    bl = true;
                    continue;
                }
                ++n2;
                continue;
            }
            if (!bl2) break;
            --n;
        }
        return charSequence.subSequence(n2, n + 1).toString();
    }

    @NotNull
    public static final /* varargs */ String trim(@NotNull String charSequence, @NotNull char ... arrc) {
        Intrinsics.checkParameterIsNotNull(charSequence, "$receiver");
        Intrinsics.checkParameterIsNotNull(arrc, "chars");
        charSequence = charSequence;
        int n = charSequence.length() - 1;
        int n2 = 0;
        boolean bl = false;
        while (n2 <= n) {
            int n3 = !bl ? n2 : n;
            boolean bl2 = ArraysKt.contains((char[])arrc, (char)charSequence.charAt(n3));
            if (!bl) {
                if (!bl2) {
                    bl = true;
                    continue;
                }
                ++n2;
                continue;
            }
            if (!bl2) break;
            --n;
        }
        return charSequence.subSequence(n2, n + 1).toString();
    }

    @NotNull
    public static final CharSequence trimEnd(@NotNull CharSequence charSequence) {
        int n;
        Intrinsics.checkParameterIsNotNull(charSequence, "$receiver");
        int n2 = charSequence.length();
        while ((n = n2 - 1) >= 0) {
            n2 = n;
            if (CharsKt.isWhitespace((char)charSequence.charAt(n))) continue;
            return charSequence.subSequence(0, n + 1);
        }
        return "";
    }

    @NotNull
    public static final CharSequence trimEnd(@NotNull CharSequence charSequence, @NotNull Function1<? super Character, Boolean> function1) {
        int n;
        Intrinsics.checkParameterIsNotNull(charSequence, "$receiver");
        Intrinsics.checkParameterIsNotNull(function1, "predicate");
        int n2 = charSequence.length();
        while ((n = n2 - 1) >= 0) {
            n2 = n;
            if (function1.invoke(Character.valueOf(charSequence.charAt(n))).booleanValue()) continue;
            return charSequence.subSequence(0, n + 1);
        }
        return "";
    }

    @NotNull
    public static final /* varargs */ CharSequence trimEnd(@NotNull CharSequence charSequence, @NotNull char ... arrc) {
        int n;
        Intrinsics.checkParameterIsNotNull(charSequence, "$receiver");
        Intrinsics.checkParameterIsNotNull(arrc, "chars");
        int n2 = charSequence.length();
        while ((n = n2 - 1) >= 0) {
            n2 = n;
            if (ArraysKt.contains((char[])arrc, (char)charSequence.charAt(n))) continue;
            return charSequence.subSequence(0, n + 1);
        }
        return "";
    }

    @InlineOnly
    private static final String trimEnd(@NotNull String string2) {
        if (string2 == null) {
            throw new TypeCastException("null cannot be cast to non-null type kotlin.CharSequence");
        }
        return StringsKt.trimEnd((CharSequence)string2).toString();
    }

    @NotNull
    public static final String trimEnd(@NotNull String charSequence, @NotNull Function1<? super Character, Boolean> function1) {
        block1 : {
            int n;
            Intrinsics.checkParameterIsNotNull(charSequence, "$receiver");
            Intrinsics.checkParameterIsNotNull(function1, "predicate");
            charSequence = charSequence;
            int n2 = charSequence.length();
            while ((n = n2 - 1) >= 0) {
                n2 = n;
                if (function1.invoke(Character.valueOf(charSequence.charAt(n))).booleanValue()) continue;
                charSequence = charSequence.subSequence(0, n + 1);
                break block1;
            }
            charSequence = "";
        }
        return charSequence.toString();
    }

    @NotNull
    public static final /* varargs */ String trimEnd(@NotNull String charSequence, @NotNull char ... arrc) {
        block1 : {
            int n;
            Intrinsics.checkParameterIsNotNull(charSequence, "$receiver");
            Intrinsics.checkParameterIsNotNull(arrc, "chars");
            charSequence = charSequence;
            int n2 = charSequence.length();
            while ((n = n2 - 1) >= 0) {
                n2 = n;
                if (ArraysKt.contains((char[])arrc, (char)charSequence.charAt(n))) continue;
                charSequence = charSequence.subSequence(0, n + 1);
                break block1;
            }
            charSequence = "";
        }
        return charSequence.toString();
    }

    @NotNull
    public static final CharSequence trimStart(@NotNull CharSequence charSequence) {
        Intrinsics.checkParameterIsNotNull(charSequence, "$receiver");
        int n = charSequence.length();
        for (int i = 0; i < n; ++i) {
            if (CharsKt.isWhitespace((char)charSequence.charAt(i))) continue;
            return charSequence.subSequence(i, charSequence.length());
        }
        return "";
    }

    @NotNull
    public static final CharSequence trimStart(@NotNull CharSequence charSequence, @NotNull Function1<? super Character, Boolean> function1) {
        Intrinsics.checkParameterIsNotNull(charSequence, "$receiver");
        Intrinsics.checkParameterIsNotNull(function1, "predicate");
        int n = charSequence.length();
        for (int i = 0; i < n; ++i) {
            if (function1.invoke(Character.valueOf(charSequence.charAt(i))).booleanValue()) continue;
            return charSequence.subSequence(i, charSequence.length());
        }
        return "";
    }

    @NotNull
    public static final /* varargs */ CharSequence trimStart(@NotNull CharSequence charSequence, @NotNull char ... arrc) {
        Intrinsics.checkParameterIsNotNull(charSequence, "$receiver");
        Intrinsics.checkParameterIsNotNull(arrc, "chars");
        int n = charSequence.length();
        for (int i = 0; i < n; ++i) {
            if (ArraysKt.contains((char[])arrc, (char)charSequence.charAt(i))) continue;
            return charSequence.subSequence(i, charSequence.length());
        }
        return "";
    }

    @InlineOnly
    private static final String trimStart(@NotNull String string2) {
        if (string2 == null) {
            throw new TypeCastException("null cannot be cast to non-null type kotlin.CharSequence");
        }
        return StringsKt.trimStart((CharSequence)string2).toString();
    }

    @NotNull
    public static final String trimStart(@NotNull String charSequence, @NotNull Function1<? super Character, Boolean> function1) {
        block1 : {
            Intrinsics.checkParameterIsNotNull(charSequence, "$receiver");
            Intrinsics.checkParameterIsNotNull(function1, "predicate");
            charSequence = charSequence;
            int n = charSequence.length();
            for (int i = 0; i < n; ++i) {
                if (function1.invoke(Character.valueOf(charSequence.charAt(i))).booleanValue()) continue;
                charSequence = charSequence.subSequence(i, charSequence.length());
                break block1;
            }
            charSequence = "";
        }
        return charSequence.toString();
    }

    @NotNull
    public static final /* varargs */ String trimStart(@NotNull String charSequence, @NotNull char ... arrc) {
        block1 : {
            Intrinsics.checkParameterIsNotNull(charSequence, "$receiver");
            Intrinsics.checkParameterIsNotNull(arrc, "chars");
            charSequence = charSequence;
            int n = charSequence.length();
            for (int i = 0; i < n; ++i) {
                if (ArraysKt.contains((char[])arrc, (char)charSequence.charAt(i))) continue;
                charSequence = charSequence.subSequence(i, charSequence.length());
                break block1;
            }
            charSequence = "";
        }
        return charSequence.toString();
    }
}

