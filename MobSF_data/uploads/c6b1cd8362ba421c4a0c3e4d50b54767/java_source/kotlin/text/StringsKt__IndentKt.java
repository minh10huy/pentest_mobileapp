/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  kotlin.collections.CollectionsKt
 *  kotlin.sequences.Sequence
 *  kotlin.sequences.SequencesKt
 *  kotlin.text.CharsKt
 *  kotlin.text.StringsKt
 *  kotlin.text.StringsKt__IndentKt$getIndentFunction
 *  kotlin.text.StringsKt__IndentKt$getIndentFunction$1
 *  kotlin.text.StringsKt__IndentKt$getIndentFunction$2
 *  kotlin.text.StringsKt__IndentKt$prependIndent
 *  kotlin.text.StringsKt__IndentKt$prependIndent$1
 */
package kotlin.text;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;
import kotlin.Metadata;
import kotlin.TypeCastException;
import kotlin.collections.CollectionsKt;
import kotlin.jvm.functions.Function1;
import kotlin.jvm.internal.Intrinsics;
import kotlin.sequences.Sequence;
import kotlin.sequences.SequencesKt;
import kotlin.text.CharsKt;
import kotlin.text.StringsKt;
import kotlin.text.StringsKt__IndentKt;
import org.jetbrains.annotations.NotNull;

@Metadata(bv={1, 0, 2}, d1={"\u0000\u001e\n\u0000\n\u0002\u0018\u0002\n\u0002\u0010\u000e\n\u0002\b\u0003\n\u0002\u0010\b\n\u0002\b\u0003\n\u0002\u0010 \n\u0002\b\u000b\u001a!\u0010\u0000\u001a\u000e\u0012\u0004\u0012\u00020\u0002\u0012\u0004\u0012\u00020\u00020\u00012\u0006\u0010\u0003\u001a\u00020\u0002H\u0002\u00a2\u0006\u0002\b\u0004\u001a\u0011\u0010\u0005\u001a\u00020\u0006*\u00020\u0002H\u0002\u00a2\u0006\u0002\b\u0007\u001a\u0014\u0010\b\u001a\u00020\u0002*\u00020\u00022\b\b\u0002\u0010\u0003\u001a\u00020\u0002\u001aJ\u0010\t\u001a\u00020\u0002*\b\u0012\u0004\u0012\u00020\u00020\n2\u0006\u0010\u000b\u001a\u00020\u00062\u0012\u0010\f\u001a\u000e\u0012\u0004\u0012\u00020\u0002\u0012\u0004\u0012\u00020\u00020\u00012\u0014\u0010\r\u001a\u0010\u0012\u0004\u0012\u00020\u0002\u0012\u0006\u0012\u0004\u0018\u00010\u00020\u0001H\u0082\b\u00a2\u0006\u0002\b\u000e\u001a\u0014\u0010\u000f\u001a\u00020\u0002*\u00020\u00022\b\b\u0002\u0010\u0010\u001a\u00020\u0002\u001a\u001e\u0010\u0011\u001a\u00020\u0002*\u00020\u00022\b\b\u0002\u0010\u0010\u001a\u00020\u00022\b\b\u0002\u0010\u0012\u001a\u00020\u0002\u001a\n\u0010\u0013\u001a\u00020\u0002*\u00020\u0002\u001a\u0014\u0010\u0014\u001a\u00020\u0002*\u00020\u00022\b\b\u0002\u0010\u0012\u001a\u00020\u0002\u00a8\u0006\u0015"}, d2={"getIndentFunction", "Lkotlin/Function1;", "", "indent", "getIndentFunction$StringsKt__IndentKt", "indentWidth", "", "indentWidth$StringsKt__IndentKt", "prependIndent", "reindent", "", "resultSizeEstimate", "indentAddFunction", "indentCutFunction", "reindent$StringsKt__IndentKt", "replaceIndent", "newIndent", "replaceIndentByMargin", "marginPrefix", "trimIndent", "trimMargin", "kotlin-stdlib"}, k=5, mv={1, 1, 10}, xi=1, xs="kotlin/text/StringsKt")
class StringsKt__IndentKt {
    private static final Function1<String, String> getIndentFunction$StringsKt__IndentKt(String string2) {
        boolean bl = ((CharSequence)string2).length() == 0;
        if (bl) {
            return (Function1)getIndentFunction.1.INSTANCE;
        }
        return (Function1)new getIndentFunction.2(string2);
    }

    private static final int indentWidth$StringsKt__IndentKt(@NotNull String string2) {
        int n;
        int n2;
        block3 : {
            CharSequence charSequence = string2;
            n = charSequence.length();
            for (n2 = 0; n2 < n; ++n2) {
                if (!(CharsKt.isWhitespace((char)charSequence.charAt(n2)) ^ true)) {
                    continue;
                }
                break block3;
            }
            n2 = -1;
        }
        n = n2;
        if (n2 == -1) {
            n = string2.length();
        }
        return n;
    }

    @NotNull
    public static final String prependIndent(@NotNull String string2, @NotNull String string3) {
        Intrinsics.checkParameterIsNotNull(string2, "$receiver");
        Intrinsics.checkParameterIsNotNull(string3, "indent");
        return SequencesKt.joinToString$default((Sequence)SequencesKt.map((Sequence)StringsKt.lineSequence((CharSequence)string2), (Function1)((Function1)new prependIndent.1(string3))), (CharSequence)"\n", null, null, (int)0, null, null, (int)62, null);
    }

    @NotNull
    public static /* bridge */ /* synthetic */ String prependIndent$default(String string2, String string3, int n, Object object) {
        if ((n & 1) != 0) {
            string3 = "    ";
        }
        return StringsKt.prependIndent((String)string2, (String)string3);
    }

    private static final String reindent$StringsKt__IndentKt(@NotNull List<String> object, int n, Function1<? super String, String> function1, Function1<? super String, String> function12) {
        int n2 = CollectionsKt.getLastIndex(object);
        object = (Iterable)object;
        Collection collection = new ArrayList();
        Iterator<String> iterator = object.iterator();
        int n3 = 0;
        while (iterator.hasNext()) {
            String string2 = iterator.next();
            if ((n3 == 0 || n3 == n2) && StringsKt.isBlank((CharSequence)string2)) {
                object = null;
            } else {
                String string3 = function12.invoke(string2);
                object = string2;
                if (string3 != null) {
                    string3 = function1.invoke(string3);
                    object = string2;
                    if (string3 != null) {
                        object = string3;
                    }
                }
            }
            if (object != null) {
                collection.add(object);
            }
            ++n3;
        }
        object = ((StringBuilder)CollectionsKt.joinTo$default((Iterable)((List)collection), (Appendable)new StringBuilder(n), (CharSequence)"\n", null, null, (int)0, null, null, (int)124, null)).toString();
        Intrinsics.checkExpressionValueIsNotNull(object, "mapIndexedNotNull { inde\u2026\"\\n\")\n        .toString()");
        return object;
    }

    @NotNull
    public static final String replaceIndent(@NotNull String object, @NotNull String string2) {
        Intrinsics.checkParameterIsNotNull(object, "$receiver");
        Intrinsics.checkParameterIsNotNull(string2, "newIndent");
        Collection<String> collection = StringsKt.lines((CharSequence)((CharSequence)object));
        Object object2 = collection;
        Function1<String, String> function1 = new ArrayList();
        Iterator iterator = object2.iterator();
        while (iterator.hasNext()) {
            Object t = iterator.next();
            if (!(StringsKt.isBlank((CharSequence)((String)t)) ^ true)) continue;
            function1.add(t);
        }
        iterator = (List)((Object)function1);
        function1 = new ArrayList(CollectionsKt.collectionSizeOrDefault((Iterable)((Object)iterator), (int)10));
        iterator = iterator.iterator();
        while (iterator.hasNext()) {
            function1.add(StringsKt__IndentKt.indentWidth$StringsKt__IndentKt((String)iterator.next()));
        }
        function1 = (Integer)CollectionsKt.min((Iterable)((List)((Object)function1)));
        int n = 0;
        int n2 = function1 != null ? function1.intValue() : 0;
        int n3 = object.length();
        int n4 = string2.length();
        int n5 = collection.size();
        function1 = StringsKt__IndentKt.getIndentFunction$StringsKt__IndentKt(string2);
        int n6 = CollectionsKt.getLastIndex((List)collection);
        collection = new ArrayList();
        iterator = object2.iterator();
        while (iterator.hasNext()) {
            string2 = (String)iterator.next();
            if ((n == 0 || n == n6) && StringsKt.isBlank((CharSequence)string2)) {
                object = null;
            } else {
                object2 = StringsKt.drop((String)string2, (int)n2);
                object = string2;
                if (object2 != null) {
                    object2 = function1.invoke((String)object2);
                    object = string2;
                    if (object2 != null) {
                        object = object2;
                    }
                }
            }
            if (object != null) {
                collection.add((String)object);
            }
            ++n;
        }
        object = ((StringBuilder)CollectionsKt.joinTo$default((Iterable)collection, (Appendable)new StringBuilder(n3 + n4 * n5), (CharSequence)"\n", null, null, (int)0, null, null, (int)124, null)).toString();
        Intrinsics.checkExpressionValueIsNotNull(object, "mapIndexedNotNull { inde\u2026\"\\n\")\n        .toString()");
        return object;
    }

    @NotNull
    public static /* bridge */ /* synthetic */ String replaceIndent$default(String string2, String string3, int n, Object object) {
        if ((n & 1) != 0) {
            string3 = "";
        }
        return StringsKt.replaceIndent((String)string2, (String)string3);
    }

    @NotNull
    public static final String replaceIndentByMargin(@NotNull String object, @NotNull String string2, @NotNull String string3) {
        Intrinsics.checkParameterIsNotNull(object, "$receiver");
        Intrinsics.checkParameterIsNotNull(string2, "newIndent");
        Intrinsics.checkParameterIsNotNull(string3, "marginPrefix");
        if (!(StringsKt.isBlank((CharSequence)string3) ^ true)) {
            throw (Throwable)new IllegalArgumentException("marginPrefix must be non-blank string.".toString());
        }
        Object object2 = StringsKt.lines((CharSequence)((CharSequence)object));
        int n = object.length();
        int n2 = string2.length();
        int n3 = object2.size();
        Function1<String, String> function1 = StringsKt__IndentKt.getIndentFunction$StringsKt__IndentKt(string2);
        int n4 = CollectionsKt.getLastIndex((List)object2);
        object = (Iterable)object2;
        Collection collection = new ArrayList();
        Iterator iterator = object.iterator();
        int n5 = 0;
        while (iterator.hasNext()) {
            object2 = (String)iterator.next();
            string2 = null;
            if ((n5 == 0 || n5 == n4) && StringsKt.isBlank((CharSequence)((CharSequence)object2))) {
                object = null;
            } else {
                int n6;
                int n7;
                block11 : {
                    object = (CharSequence)object2;
                    n6 = object.length();
                    for (n7 = 0; n7 < n6; ++n7) {
                        if (!(CharsKt.isWhitespace((char)object.charAt(n7)) ^ true)) {
                            continue;
                        }
                        break block11;
                    }
                    n7 = -1;
                }
                if (n7 != -1 && StringsKt.startsWith$default((String)object2, (String)string3, (int)n7, (boolean)false, (int)4, null)) {
                    n6 = string3.length();
                    if (object2 == null) {
                        throw new TypeCastException("null cannot be cast to non-null type java.lang.String");
                    }
                    string2 = object2.substring(n7 + n6);
                    Intrinsics.checkExpressionValueIsNotNull(string2, "(this as java.lang.String).substring(startIndex)");
                }
                object = object2;
                if (string2 != null) {
                    string2 = function1.invoke(string2);
                    object = object2;
                    if (string2 != null) {
                        object = string2;
                    }
                }
            }
            if (object != null) {
                collection.add(object);
            }
            ++n5;
        }
        object = ((StringBuilder)CollectionsKt.joinTo$default((Iterable)((List)collection), (Appendable)new StringBuilder(n + n2 * n3), (CharSequence)"\n", null, null, (int)0, null, null, (int)124, null)).toString();
        Intrinsics.checkExpressionValueIsNotNull(object, "mapIndexedNotNull { inde\u2026\"\\n\")\n        .toString()");
        return object;
    }

    @NotNull
    public static /* bridge */ /* synthetic */ String replaceIndentByMargin$default(String string2, String string3, String string4, int n, Object object) {
        if ((n & 1) != 0) {
            string3 = "";
        }
        if ((n & 2) != 0) {
            string4 = "|";
        }
        return StringsKt.replaceIndentByMargin((String)string2, (String)string3, (String)string4);
    }

    @NotNull
    public static final String trimIndent(@NotNull String string2) {
        Intrinsics.checkParameterIsNotNull(string2, "$receiver");
        return StringsKt.replaceIndent((String)string2, (String)"");
    }

    @NotNull
    public static final String trimMargin(@NotNull String string2, @NotNull String string3) {
        Intrinsics.checkParameterIsNotNull(string2, "$receiver");
        Intrinsics.checkParameterIsNotNull(string3, "marginPrefix");
        return StringsKt.replaceIndentByMargin((String)string2, (String)"", (String)string3);
    }

    @NotNull
    public static /* bridge */ /* synthetic */ String trimMargin$default(String string2, String string3, int n, Object object) {
        if ((n & 1) != 0) {
            string3 = "|";
        }
        return StringsKt.trimMargin((String)string2, (String)string3);
    }
}

