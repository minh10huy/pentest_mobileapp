/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  kotlin.collections.ArraysKt
 *  kotlin.collections.IntIterator
 *  kotlin.jvm.internal.StringCompanionObject
 *  kotlin.sequences.Sequence
 *  kotlin.sequences.SequencesKt
 *  kotlin.text.CharsKt
 *  kotlin.text.Charsets
 *  kotlin.text.StringsKt
 */
package kotlin.text;

import java.nio.charset.Charset;
import java.util.Arrays;
import java.util.Collection;
import java.util.Comparator;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.regex.Pattern;
import kotlin.Metadata;
import kotlin.TypeCastException;
import kotlin.collections.ArraysKt;
import kotlin.collections.IntIterator;
import kotlin.internal.InlineOnly;
import kotlin.jvm.internal.Intrinsics;
import kotlin.jvm.internal.StringCompanionObject;
import kotlin.sequences.Sequence;
import kotlin.sequences.SequencesKt;
import kotlin.text.CharsKt;
import kotlin.text.Charsets;
import kotlin.text.StringsKt;
import kotlin.text.StringsKt__StringNumberConversionsKt;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

@Metadata(bv={1, 0, 2}, d1={"\u0000x\n\u0000\n\u0002\u0018\u0002\n\u0002\u0010\u000e\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\u0012\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\b\n\u0002\b\u0002\n\u0002\u0010\u0019\n\u0000\n\u0002\u0010\u0015\n\u0002\b\n\n\u0002\u0010\u000b\n\u0002\b\u0002\n\u0002\u0010\r\n\u0002\b\u0006\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\u0011\n\u0002\u0010\u0000\n\u0002\b\b\n\u0002\u0010\f\n\u0002\b\u0011\n\u0002\u0010 \n\u0000\n\u0002\u0018\u0002\n\u0002\b\u000e\u001a\u0011\u0010\u0006\u001a\u00020\u00022\u0006\u0010\u0007\u001a\u00020\bH\u0087\b\u001a\u0011\u0010\u0006\u001a\u00020\u00022\u0006\u0010\t\u001a\u00020\nH\u0087\b\u001a\u0011\u0010\u0006\u001a\u00020\u00022\u0006\u0010\u000b\u001a\u00020\fH\u0087\b\u001a\u0019\u0010\u0006\u001a\u00020\u00022\u0006\u0010\u000b\u001a\u00020\f2\u0006\u0010\r\u001a\u00020\u000eH\u0087\b\u001a!\u0010\u0006\u001a\u00020\u00022\u0006\u0010\u000b\u001a\u00020\f2\u0006\u0010\u000f\u001a\u00020\u00102\u0006\u0010\u0011\u001a\u00020\u0010H\u0087\b\u001a)\u0010\u0006\u001a\u00020\u00022\u0006\u0010\u000b\u001a\u00020\f2\u0006\u0010\u000f\u001a\u00020\u00102\u0006\u0010\u0011\u001a\u00020\u00102\u0006\u0010\r\u001a\u00020\u000eH\u0087\b\u001a\u0011\u0010\u0006\u001a\u00020\u00022\u0006\u0010\u0012\u001a\u00020\u0013H\u0087\b\u001a!\u0010\u0006\u001a\u00020\u00022\u0006\u0010\u0012\u001a\u00020\u00132\u0006\u0010\u000f\u001a\u00020\u00102\u0006\u0010\u0011\u001a\u00020\u0010H\u0087\b\u001a!\u0010\u0006\u001a\u00020\u00022\u0006\u0010\u0014\u001a\u00020\u00152\u0006\u0010\u000f\u001a\u00020\u00102\u0006\u0010\u0011\u001a\u00020\u0010H\u0087\b\u001a\n\u0010\u0016\u001a\u00020\u0002*\u00020\u0002\u001a\u0015\u0010\u0017\u001a\u00020\u0010*\u00020\u00022\u0006\u0010\u0018\u001a\u00020\u0010H\u0087\b\u001a\u0015\u0010\u0019\u001a\u00020\u0010*\u00020\u00022\u0006\u0010\u0018\u001a\u00020\u0010H\u0087\b\u001a\u001d\u0010\u001a\u001a\u00020\u0010*\u00020\u00022\u0006\u0010\u001b\u001a\u00020\u00102\u0006\u0010\u001c\u001a\u00020\u0010H\u0087\b\u001a\u001c\u0010\u001d\u001a\u00020\u0010*\u00020\u00022\u0006\u0010\u001e\u001a\u00020\u00022\b\b\u0002\u0010\u001f\u001a\u00020 \u001a\u0015\u0010!\u001a\u00020 *\u00020\u00022\u0006\u0010\t\u001a\u00020\bH\u0087\b\u001a\u0015\u0010!\u001a\u00020 *\u00020\u00022\u0006\u0010\"\u001a\u00020#H\u0087\b\u001a\n\u0010$\u001a\u00020\u0002*\u00020\u0002\u001a\u001c\u0010%\u001a\u00020 *\u00020\u00022\u0006\u0010&\u001a\u00020\u00022\b\b\u0002\u0010\u001f\u001a\u00020 \u001a \u0010'\u001a\u00020 *\u0004\u0018\u00010\u00022\b\u0010\u001e\u001a\u0004\u0018\u00010\u00022\b\b\u0002\u0010\u001f\u001a\u00020 \u001a2\u0010(\u001a\u00020\u0002*\u00020\u00022\u0006\u0010)\u001a\u00020*2\u0016\u0010+\u001a\f\u0012\b\b\u0001\u0012\u0004\u0018\u00010-0,\"\u0004\u0018\u00010-H\u0087\b\u00a2\u0006\u0002\u0010.\u001a*\u0010(\u001a\u00020\u0002*\u00020\u00022\u0016\u0010+\u001a\f\u0012\b\b\u0001\u0012\u0004\u0018\u00010-0,\"\u0004\u0018\u00010-H\u0087\b\u00a2\u0006\u0002\u0010/\u001a:\u0010(\u001a\u00020\u0002*\u00020\u00032\u0006\u0010)\u001a\u00020*2\u0006\u0010(\u001a\u00020\u00022\u0016\u0010+\u001a\f\u0012\b\b\u0001\u0012\u0004\u0018\u00010-0,\"\u0004\u0018\u00010-H\u0087\b\u00a2\u0006\u0002\u00100\u001a2\u0010(\u001a\u00020\u0002*\u00020\u00032\u0006\u0010(\u001a\u00020\u00022\u0016\u0010+\u001a\f\u0012\b\b\u0001\u0012\u0004\u0018\u00010-0,\"\u0004\u0018\u00010-H\u0087\b\u00a2\u0006\u0002\u00101\u001a\r\u00102\u001a\u00020\u0002*\u00020\u0002H\u0087\b\u001a\n\u00103\u001a\u00020 *\u00020#\u001a\u001d\u00104\u001a\u00020\u0010*\u00020\u00022\u0006\u00105\u001a\u0002062\u0006\u00107\u001a\u00020\u0010H\u0081\b\u001a\u001d\u00104\u001a\u00020\u0010*\u00020\u00022\u0006\u00108\u001a\u00020\u00022\u0006\u00107\u001a\u00020\u0010H\u0081\b\u001a\u001d\u00109\u001a\u00020\u0010*\u00020\u00022\u0006\u00105\u001a\u0002062\u0006\u00107\u001a\u00020\u0010H\u0081\b\u001a\u001d\u00109\u001a\u00020\u0010*\u00020\u00022\u0006\u00108\u001a\u00020\u00022\u0006\u00107\u001a\u00020\u0010H\u0081\b\u001a\u001d\u0010:\u001a\u00020\u0010*\u00020\u00022\u0006\u0010\u0018\u001a\u00020\u00102\u0006\u0010;\u001a\u00020\u0010H\u0087\b\u001a4\u0010<\u001a\u00020 *\u00020#2\u0006\u0010=\u001a\u00020\u00102\u0006\u0010\u001e\u001a\u00020#2\u0006\u0010>\u001a\u00020\u00102\u0006\u0010\u0011\u001a\u00020\u00102\b\b\u0002\u0010\u001f\u001a\u00020 \u001a4\u0010<\u001a\u00020 *\u00020\u00022\u0006\u0010=\u001a\u00020\u00102\u0006\u0010\u001e\u001a\u00020\u00022\u0006\u0010>\u001a\u00020\u00102\u0006\u0010\u0011\u001a\u00020\u00102\b\b\u0002\u0010\u001f\u001a\u00020 \u001a\u0012\u0010?\u001a\u00020\u0002*\u00020#2\u0006\u0010@\u001a\u00020\u0010\u001a$\u0010A\u001a\u00020\u0002*\u00020\u00022\u0006\u0010B\u001a\u0002062\u0006\u0010C\u001a\u0002062\b\b\u0002\u0010\u001f\u001a\u00020 \u001a$\u0010A\u001a\u00020\u0002*\u00020\u00022\u0006\u0010D\u001a\u00020\u00022\u0006\u0010E\u001a\u00020\u00022\b\b\u0002\u0010\u001f\u001a\u00020 \u001a$\u0010F\u001a\u00020\u0002*\u00020\u00022\u0006\u0010B\u001a\u0002062\u0006\u0010C\u001a\u0002062\b\b\u0002\u0010\u001f\u001a\u00020 \u001a$\u0010F\u001a\u00020\u0002*\u00020\u00022\u0006\u0010D\u001a\u00020\u00022\u0006\u0010E\u001a\u00020\u00022\b\b\u0002\u0010\u001f\u001a\u00020 \u001a\"\u0010G\u001a\b\u0012\u0004\u0012\u00020\u00020H*\u00020#2\u0006\u0010I\u001a\u00020J2\b\b\u0002\u0010K\u001a\u00020\u0010\u001a\u001c\u0010L\u001a\u00020 *\u00020\u00022\u0006\u0010M\u001a\u00020\u00022\b\b\u0002\u0010\u001f\u001a\u00020 \u001a$\u0010L\u001a\u00020 *\u00020\u00022\u0006\u0010M\u001a\u00020\u00022\u0006\u0010N\u001a\u00020\u00102\b\b\u0002\u0010\u001f\u001a\u00020 \u001a\u0015\u0010O\u001a\u00020\u0002*\u00020\u00022\u0006\u0010N\u001a\u00020\u0010H\u0087\b\u001a\u001d\u0010O\u001a\u00020\u0002*\u00020\u00022\u0006\u0010N\u001a\u00020\u00102\u0006\u0010\u001c\u001a\u00020\u0010H\u0087\b\u001a\u0017\u0010P\u001a\u00020\f*\u00020\u00022\b\b\u0002\u0010\r\u001a\u00020\u000eH\u0087\b\u001a\r\u0010Q\u001a\u00020\u0013*\u00020\u0002H\u0087\b\u001a3\u0010Q\u001a\u00020\u0013*\u00020\u00022\u0006\u0010R\u001a\u00020\u00132\b\b\u0002\u0010S\u001a\u00020\u00102\b\b\u0002\u0010N\u001a\u00020\u00102\b\b\u0002\u0010\u001c\u001a\u00020\u0010H\u0087\b\u001a\r\u0010T\u001a\u00020\u0002*\u00020\u0002H\u0087\b\u001a\u0015\u0010T\u001a\u00020\u0002*\u00020\u00022\u0006\u0010)\u001a\u00020*H\u0087\b\u001a\u0017\u0010U\u001a\u00020J*\u00020\u00022\b\b\u0002\u0010V\u001a\u00020\u0010H\u0087\b\u001a\r\u0010W\u001a\u00020\u0002*\u00020\u0002H\u0087\b\u001a\u0015\u0010W\u001a\u00020\u0002*\u00020\u00022\u0006\u0010)\u001a\u00020*H\u0087\b\"\u001b\u0010\u0000\u001a\b\u0012\u0004\u0012\u00020\u00020\u0001*\u00020\u00038F\u00a2\u0006\u0006\u001a\u0004\b\u0004\u0010\u0005\u00a8\u0006X"}, d2={"CASE_INSENSITIVE_ORDER", "Ljava/util/Comparator;", "", "Lkotlin/String$Companion;", "getCASE_INSENSITIVE_ORDER", "(Lkotlin/jvm/internal/StringCompanionObject;)Ljava/util/Comparator;", "String", "stringBuffer", "Ljava/lang/StringBuffer;", "stringBuilder", "Ljava/lang/StringBuilder;", "bytes", "", "charset", "Ljava/nio/charset/Charset;", "offset", "", "length", "chars", "", "codePoints", "", "capitalize", "codePointAt", "index", "codePointBefore", "codePointCount", "beginIndex", "endIndex", "compareTo", "other", "ignoreCase", "", "contentEquals", "charSequence", "", "decapitalize", "endsWith", "suffix", "equals", "format", "locale", "Ljava/util/Locale;", "args", "", "", "(Ljava/lang/String;Ljava/util/Locale;[Ljava/lang/Object;)Ljava/lang/String;", "(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;", "(Lkotlin/jvm/internal/StringCompanionObject;Ljava/util/Locale;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;", "(Lkotlin/jvm/internal/StringCompanionObject;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;", "intern", "isBlank", "nativeIndexOf", "ch", "", "fromIndex", "str", "nativeLastIndexOf", "offsetByCodePoints", "codePointOffset", "regionMatches", "thisOffset", "otherOffset", "repeat", "n", "replace", "oldChar", "newChar", "oldValue", "newValue", "replaceFirst", "split", "", "regex", "Ljava/util/regex/Pattern;", "limit", "startsWith", "prefix", "startIndex", "substring", "toByteArray", "toCharArray", "destination", "destinationOffset", "toLowerCase", "toPattern", "flags", "toUpperCase", "kotlin-stdlib"}, k=5, mv={1, 1, 10}, xi=1, xs="kotlin/text/StringsKt")
class StringsKt__StringsJVMKt
extends StringsKt__StringNumberConversionsKt {
    @InlineOnly
    private static final String String(StringBuffer stringBuffer) {
        return new String(stringBuffer);
    }

    @InlineOnly
    private static final String String(StringBuilder stringBuilder) {
        return new String(stringBuilder);
    }

    @InlineOnly
    private static final String String(byte[] arrby) {
        return new String(arrby, Charsets.UTF_8);
    }

    @InlineOnly
    private static final String String(byte[] arrby, int n, int n2) {
        return new String(arrby, n, n2, Charsets.UTF_8);
    }

    @InlineOnly
    private static final String String(byte[] arrby, int n, int n2, Charset charset) {
        return new String(arrby, n, n2, charset);
    }

    @InlineOnly
    private static final String String(byte[] arrby, Charset charset) {
        return new String(arrby, charset);
    }

    @InlineOnly
    private static final String String(char[] arrc) {
        return new String(arrc);
    }

    @InlineOnly
    private static final String String(char[] arrc, int n, int n2) {
        return new String(arrc, n, n2);
    }

    @InlineOnly
    private static final String String(int[] arrn, int n, int n2) {
        return new String(arrn, n, n2);
    }

    @NotNull
    public static final String capitalize(@NotNull String string2) {
        Intrinsics.checkParameterIsNotNull(string2, "$receiver");
        boolean bl = ((CharSequence)string2).length() > 0;
        CharSequence charSequence = string2;
        if (bl) {
            charSequence = string2;
            if (Character.isLowerCase(string2.charAt(0))) {
                charSequence = new StringBuilder();
                String string3 = string2.substring(0, 1);
                Intrinsics.checkExpressionValueIsNotNull(string3, "(this as java.lang.Strin\u2026ing(startIndex, endIndex)");
                if (string3 == null) {
                    throw new TypeCastException("null cannot be cast to non-null type java.lang.String");
                }
                string3 = string3.toUpperCase();
                Intrinsics.checkExpressionValueIsNotNull(string3, "(this as java.lang.String).toUpperCase()");
                charSequence.append(string3);
                string2 = string2.substring(1);
                Intrinsics.checkExpressionValueIsNotNull(string2, "(this as java.lang.String).substring(startIndex)");
                charSequence.append(string2);
                charSequence = charSequence.toString();
            }
        }
        return charSequence;
    }

    @InlineOnly
    private static final int codePointAt(@NotNull String string2, int n) {
        if (string2 == null) {
            throw new TypeCastException("null cannot be cast to non-null type java.lang.String");
        }
        return string2.codePointAt(n);
    }

    @InlineOnly
    private static final int codePointBefore(@NotNull String string2, int n) {
        if (string2 == null) {
            throw new TypeCastException("null cannot be cast to non-null type java.lang.String");
        }
        return string2.codePointBefore(n);
    }

    @InlineOnly
    private static final int codePointCount(@NotNull String string2, int n, int n2) {
        if (string2 == null) {
            throw new TypeCastException("null cannot be cast to non-null type java.lang.String");
        }
        return string2.codePointCount(n, n2);
    }

    public static final int compareTo(@NotNull String string2, @NotNull String string3, boolean bl) {
        Intrinsics.checkParameterIsNotNull(string2, "$receiver");
        Intrinsics.checkParameterIsNotNull(string3, "other");
        if (bl) {
            return string2.compareToIgnoreCase(string3);
        }
        return string2.compareTo(string3);
    }

    public static /* bridge */ /* synthetic */ int compareTo$default(String string2, String string3, boolean bl, int n, Object object) {
        if ((n & 2) != 0) {
            bl = false;
        }
        return StringsKt.compareTo((String)string2, (String)string3, (boolean)bl);
    }

    @InlineOnly
    private static final boolean contentEquals(@NotNull String string2, CharSequence charSequence) {
        if (string2 == null) {
            throw new TypeCastException("null cannot be cast to non-null type java.lang.String");
        }
        return string2.contentEquals(charSequence);
    }

    @InlineOnly
    private static final boolean contentEquals(@NotNull String string2, StringBuffer stringBuffer) {
        if (string2 == null) {
            throw new TypeCastException("null cannot be cast to non-null type java.lang.String");
        }
        return string2.contentEquals(stringBuffer);
    }

    @NotNull
    public static final String decapitalize(@NotNull String string2) {
        Intrinsics.checkParameterIsNotNull(string2, "$receiver");
        boolean bl = ((CharSequence)string2).length() > 0;
        CharSequence charSequence = string2;
        if (bl) {
            charSequence = string2;
            if (Character.isUpperCase(string2.charAt(0))) {
                charSequence = new StringBuilder();
                String string3 = string2.substring(0, 1);
                Intrinsics.checkExpressionValueIsNotNull(string3, "(this as java.lang.Strin\u2026ing(startIndex, endIndex)");
                if (string3 == null) {
                    throw new TypeCastException("null cannot be cast to non-null type java.lang.String");
                }
                string3 = string3.toLowerCase();
                Intrinsics.checkExpressionValueIsNotNull(string3, "(this as java.lang.String).toLowerCase()");
                charSequence.append(string3);
                string2 = string2.substring(1);
                Intrinsics.checkExpressionValueIsNotNull(string2, "(this as java.lang.String).substring(startIndex)");
                charSequence.append(string2);
                charSequence = charSequence.toString();
            }
        }
        return charSequence;
    }

    public static final boolean endsWith(@NotNull String string2, @NotNull String string3, boolean bl) {
        Intrinsics.checkParameterIsNotNull(string2, "$receiver");
        Intrinsics.checkParameterIsNotNull(string3, "suffix");
        if (!bl) {
            return string2.endsWith(string3);
        }
        return StringsKt.regionMatches((String)string2, (int)(string2.length() - string3.length()), (String)string3, (int)0, (int)string3.length(), (boolean)true);
    }

    public static /* bridge */ /* synthetic */ boolean endsWith$default(String string2, String string3, boolean bl, int n, Object object) {
        if ((n & 2) != 0) {
            bl = false;
        }
        return StringsKt.endsWith((String)string2, (String)string3, (boolean)bl);
    }

    public static final boolean equals(@Nullable String string2, @Nullable String string3, boolean bl) {
        if (string2 == null) {
            if (string3 == null) {
                return true;
            }
            return false;
        }
        if (!bl) {
            return string2.equals(string3);
        }
        return string2.equalsIgnoreCase(string3);
    }

    public static /* bridge */ /* synthetic */ boolean equals$default(String string2, String string3, boolean bl, int n, Object object) {
        if ((n & 2) != 0) {
            bl = false;
        }
        return StringsKt.equals((String)string2, (String)string3, (boolean)bl);
    }

    @InlineOnly
    private static final /* varargs */ String format(@NotNull String string2, Locale locale, Object ... arrobject) {
        string2 = String.format(locale, string2, Arrays.copyOf(arrobject, arrobject.length));
        Intrinsics.checkExpressionValueIsNotNull(string2, "java.lang.String.format(locale, this, *args)");
        return string2;
    }

    @InlineOnly
    private static final /* varargs */ String format(@NotNull String string2, Object ... arrobject) {
        string2 = String.format(string2, Arrays.copyOf(arrobject, arrobject.length));
        Intrinsics.checkExpressionValueIsNotNull(string2, "java.lang.String.format(this, *args)");
        return string2;
    }

    @InlineOnly
    private static final /* varargs */ String format(@NotNull StringCompanionObject object, String string2, Object ... arrobject) {
        object = String.format(string2, Arrays.copyOf(arrobject, arrobject.length));
        Intrinsics.checkExpressionValueIsNotNull(object, "java.lang.String.format(format, *args)");
        return object;
    }

    @InlineOnly
    private static final /* varargs */ String format(@NotNull StringCompanionObject object, Locale locale, String string2, Object ... arrobject) {
        object = String.format(locale, string2, Arrays.copyOf(arrobject, arrobject.length));
        Intrinsics.checkExpressionValueIsNotNull(object, "java.lang.String.format(locale, format, *args)");
        return object;
    }

    @NotNull
    public static final Comparator<String> getCASE_INSENSITIVE_ORDER(@NotNull StringCompanionObject object) {
        Intrinsics.checkParameterIsNotNull(object, "$receiver");
        object = String.CASE_INSENSITIVE_ORDER;
        Intrinsics.checkExpressionValueIsNotNull(object, "java.lang.String.CASE_INSENSITIVE_ORDER");
        return object;
    }

    @InlineOnly
    private static final String intern(@NotNull String string2) {
        if (string2 == null) {
            throw new TypeCastException("null cannot be cast to non-null type java.lang.String");
        }
        string2 = string2.intern();
        Intrinsics.checkExpressionValueIsNotNull(string2, "(this as java.lang.String).intern()");
        return string2;
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    public static final boolean isBlank(@NotNull CharSequence charSequence) {
        Intrinsics.checkParameterIsNotNull(charSequence, "$receiver");
        int n = charSequence.length();
        boolean bl = false;
        if (n == 0) return true;
        Object object = (Iterable)StringsKt.getIndices((CharSequence)charSequence);
        if (object instanceof Collection && ((Collection)object).isEmpty()) {
            return true;
        }
        object = object.iterator();
        do {
            if (!object.hasNext()) return true;
        } while (CharsKt.isWhitespace((char)charSequence.charAt(((IntIterator)object).nextInt())));
        return bl;
    }

    @InlineOnly
    private static final int nativeIndexOf(@NotNull String string2, char c, int n) {
        if (string2 == null) {
            throw new TypeCastException("null cannot be cast to non-null type java.lang.String");
        }
        return string2.indexOf(c, n);
    }

    @InlineOnly
    private static final int nativeIndexOf(@NotNull String string2, String string3, int n) {
        if (string2 == null) {
            throw new TypeCastException("null cannot be cast to non-null type java.lang.String");
        }
        return string2.indexOf(string3, n);
    }

    @InlineOnly
    private static final int nativeLastIndexOf(@NotNull String string2, char c, int n) {
        if (string2 == null) {
            throw new TypeCastException("null cannot be cast to non-null type java.lang.String");
        }
        return string2.lastIndexOf(c, n);
    }

    @InlineOnly
    private static final int nativeLastIndexOf(@NotNull String string2, String string3, int n) {
        if (string2 == null) {
            throw new TypeCastException("null cannot be cast to non-null type java.lang.String");
        }
        return string2.lastIndexOf(string3, n);
    }

    @InlineOnly
    private static final int offsetByCodePoints(@NotNull String string2, int n, int n2) {
        if (string2 == null) {
            throw new TypeCastException("null cannot be cast to non-null type java.lang.String");
        }
        return string2.offsetByCodePoints(n, n2);
    }

    public static final boolean regionMatches(@NotNull CharSequence charSequence, int n, @NotNull CharSequence charSequence2, int n2, int n3, boolean bl) {
        Intrinsics.checkParameterIsNotNull(charSequence, "$receiver");
        Intrinsics.checkParameterIsNotNull(charSequence2, "other");
        if (charSequence instanceof String && charSequence2 instanceof String) {
            return StringsKt.regionMatches((String)((String)charSequence), (int)n, (String)((String)charSequence2), (int)n2, (int)n3, (boolean)bl);
        }
        return StringsKt.regionMatchesImpl((CharSequence)charSequence, (int)n, (CharSequence)charSequence2, (int)n2, (int)n3, (boolean)bl);
    }

    public static final boolean regionMatches(@NotNull String string2, int n, @NotNull String string3, int n2, int n3, boolean bl) {
        Intrinsics.checkParameterIsNotNull(string2, "$receiver");
        Intrinsics.checkParameterIsNotNull(string3, "other");
        if (!bl) {
            return string2.regionMatches(n, string3, n2, n3);
        }
        return string2.regionMatches(bl, n, string3, n2, n3);
    }

    public static /* bridge */ /* synthetic */ boolean regionMatches$default(CharSequence charSequence, int n, CharSequence charSequence2, int n2, int n3, boolean bl, int n4, Object object) {
        block0 : {
            if ((n4 & 16) == 0) break block0;
            bl = false;
        }
        return StringsKt.regionMatches((CharSequence)charSequence, (int)n, (CharSequence)charSequence2, (int)n2, (int)n3, (boolean)bl);
    }

    public static /* bridge */ /* synthetic */ boolean regionMatches$default(String string2, int n, String string3, int n2, int n3, boolean bl, int n4, Object object) {
        block0 : {
            if ((n4 & 16) == 0) break block0;
            bl = false;
        }
        return StringsKt.regionMatches((String)string2, (int)n, (String)string3, (int)n2, (int)n3, (boolean)bl);
    }

    /*
     * Exception decompiling
     */
    @NotNull
    public static final String repeat(@NotNull CharSequence var0, int var1_1) {
        // This method has failed to decompile.  When submitting a bug report, please provide this stack trace, and (if you hold appropriate legal rights) the relevant class file.
        // org.benf.cfr.reader.util.ConfusedCFRException: Tried to end blocks [1[CASE]], but top level block is 4[SWITCH]
        // org.benf.cfr.reader.bytecode.analysis.opgraph.Op04StructuredStatement.processEndingBlocks(Op04StructuredStatement.java:416)
        // org.benf.cfr.reader.bytecode.analysis.opgraph.Op04StructuredStatement.buildNestedBlocks(Op04StructuredStatement.java:468)
        // org.benf.cfr.reader.bytecode.analysis.opgraph.Op03SimpleStatement.createInitialStructuredBlock(Op03SimpleStatement.java:2960)
        // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisInner(CodeAnalyser.java:818)
        // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysisOrWrapFail(CodeAnalyser.java:196)
        // org.benf.cfr.reader.bytecode.CodeAnalyser.getAnalysis(CodeAnalyser.java:141)
        // org.benf.cfr.reader.entities.attributes.AttributeCode.analyse(AttributeCode.java:95)
        // org.benf.cfr.reader.entities.Method.analyse(Method.java:372)
        // org.benf.cfr.reader.entities.ClassFile.analyseMid(ClassFile.java:867)
        // org.benf.cfr.reader.entities.ClassFile.analyseTop(ClassFile.java:768)
        // org.benf.cfr.reader.Main.doJar(Main.java:141)
        // org.benf.cfr.reader.Main.main(Main.java:242)
        throw new IllegalStateException("Decompilation failed");
    }

    @NotNull
    public static final String replace(@NotNull String string2, char c, char c2, boolean bl) {
        Intrinsics.checkParameterIsNotNull(string2, "$receiver");
        if (!bl) {
            string2 = string2.replace(c, c2);
            Intrinsics.checkExpressionValueIsNotNull(string2, "(this as java.lang.Strin\u2026replace(oldChar, newChar)");
            return string2;
        }
        return SequencesKt.joinToString$default((Sequence)StringsKt.splitToSequence$default((CharSequence)string2, (char[])new char[]{c}, (boolean)bl, (int)0, (int)4, null), (CharSequence)String.valueOf(c2), null, null, (int)0, null, null, (int)62, null);
    }

    @NotNull
    public static final String replace(@NotNull String string2, @NotNull String string3, @NotNull String string4, boolean bl) {
        Intrinsics.checkParameterIsNotNull(string2, "$receiver");
        Intrinsics.checkParameterIsNotNull(string3, "oldValue");
        Intrinsics.checkParameterIsNotNull(string4, "newValue");
        return SequencesKt.joinToString$default((Sequence)StringsKt.splitToSequence$default((CharSequence)string2, (String[])new String[]{string3}, (boolean)bl, (int)0, (int)4, null), (CharSequence)string4, null, null, (int)0, null, null, (int)62, null);
    }

    @NotNull
    public static /* bridge */ /* synthetic */ String replace$default(String string2, char c, char c2, boolean bl, int n, Object object) {
        if ((n & 4) != 0) {
            bl = false;
        }
        return StringsKt.replace((String)string2, (char)c, (char)c2, (boolean)bl);
    }

    @NotNull
    public static /* bridge */ /* synthetic */ String replace$default(String string2, String string3, String string4, boolean bl, int n, Object object) {
        if ((n & 4) != 0) {
            bl = false;
        }
        return StringsKt.replace((String)string2, (String)string3, (String)string4, (boolean)bl);
    }

    @NotNull
    public static final String replaceFirst(@NotNull String string2, char c, char c2, boolean bl) {
        Intrinsics.checkParameterIsNotNull(string2, "$receiver");
        CharSequence charSequence = string2;
        int n = StringsKt.indexOf$default((CharSequence)charSequence, (char)c, (int)0, (boolean)bl, (int)2, null);
        if (n < 0) {
            return string2;
        }
        return StringsKt.replaceRange((CharSequence)charSequence, (int)n, (int)(n + 1), (CharSequence)String.valueOf(c2)).toString();
    }

    @NotNull
    public static final String replaceFirst(@NotNull String string2, @NotNull String string3, @NotNull String string4, boolean bl) {
        Intrinsics.checkParameterIsNotNull(string2, "$receiver");
        Intrinsics.checkParameterIsNotNull(string3, "oldValue");
        Intrinsics.checkParameterIsNotNull(string4, "newValue");
        CharSequence charSequence = string2;
        int n = StringsKt.indexOf$default((CharSequence)charSequence, (String)string3, (int)0, (boolean)bl, (int)2, null);
        if (n < 0) {
            return string2;
        }
        return StringsKt.replaceRange((CharSequence)charSequence, (int)n, (int)(string3.length() + n), (CharSequence)string4).toString();
    }

    @NotNull
    public static /* bridge */ /* synthetic */ String replaceFirst$default(String string2, char c, char c2, boolean bl, int n, Object object) {
        if ((n & 4) != 0) {
            bl = false;
        }
        return StringsKt.replaceFirst((String)string2, (char)c, (char)c2, (boolean)bl);
    }

    @NotNull
    public static /* bridge */ /* synthetic */ String replaceFirst$default(String string2, String string3, String string4, boolean bl, int n, Object object) {
        if ((n & 4) != 0) {
            bl = false;
        }
        return StringsKt.replaceFirst((String)string2, (String)string3, (String)string4, (boolean)bl);
    }

    @NotNull
    public static final List<String> split(@NotNull CharSequence arrobject, @NotNull Pattern pattern, int n) {
        Intrinsics.checkParameterIsNotNull(arrobject, "$receiver");
        Intrinsics.checkParameterIsNotNull(pattern, "regex");
        int n2 = n >= 0 ? 1 : 0;
        if (n2 == 0) {
            arrobject = new StringBuilder();
            arrobject.append("Limit must be non-negative, but was ");
            arrobject.append(n);
            arrobject.append('.');
            throw (Throwable)new IllegalArgumentException(arrobject.toString().toString());
        }
        n2 = n;
        if (n == 0) {
            n2 = -1;
        }
        arrobject = pattern.split((CharSequence)arrobject, n2);
        Intrinsics.checkExpressionValueIsNotNull(arrobject, "regex.split(this, if (limit == 0) -1 else limit)");
        return ArraysKt.asList((Object[])arrobject);
    }

    @NotNull
    public static /* bridge */ /* synthetic */ List split$default(CharSequence charSequence, Pattern pattern, int n, int n2, Object object) {
        if ((n2 & 2) != 0) {
            n = 0;
        }
        return StringsKt.split((CharSequence)charSequence, (Pattern)pattern, (int)n);
    }

    public static final boolean startsWith(@NotNull String string2, @NotNull String string3, int n, boolean bl) {
        Intrinsics.checkParameterIsNotNull(string2, "$receiver");
        Intrinsics.checkParameterIsNotNull(string3, "prefix");
        if (!bl) {
            return string2.startsWith(string3, n);
        }
        return StringsKt.regionMatches((String)string2, (int)n, (String)string3, (int)0, (int)string3.length(), (boolean)bl);
    }

    public static final boolean startsWith(@NotNull String string2, @NotNull String string3, boolean bl) {
        Intrinsics.checkParameterIsNotNull(string2, "$receiver");
        Intrinsics.checkParameterIsNotNull(string3, "prefix");
        if (!bl) {
            return string2.startsWith(string3);
        }
        return StringsKt.regionMatches((String)string2, (int)0, (String)string3, (int)0, (int)string3.length(), (boolean)bl);
    }

    public static /* bridge */ /* synthetic */ boolean startsWith$default(String string2, String string3, int n, boolean bl, int n2, Object object) {
        if ((n2 & 4) != 0) {
            bl = false;
        }
        return StringsKt.startsWith((String)string2, (String)string3, (int)n, (boolean)bl);
    }

    public static /* bridge */ /* synthetic */ boolean startsWith$default(String string2, String string3, boolean bl, int n, Object object) {
        if ((n & 2) != 0) {
            bl = false;
        }
        return StringsKt.startsWith((String)string2, (String)string3, (boolean)bl);
    }

    @InlineOnly
    private static final String substring(@NotNull String string2, int n) {
        if (string2 == null) {
            throw new TypeCastException("null cannot be cast to non-null type java.lang.String");
        }
        string2 = string2.substring(n);
        Intrinsics.checkExpressionValueIsNotNull(string2, "(this as java.lang.String).substring(startIndex)");
        return string2;
    }

    @InlineOnly
    private static final String substring(@NotNull String string2, int n, int n2) {
        if (string2 == null) {
            throw new TypeCastException("null cannot be cast to non-null type java.lang.String");
        }
        string2 = string2.substring(n, n2);
        Intrinsics.checkExpressionValueIsNotNull(string2, "(this as java.lang.Strin\u2026ing(startIndex, endIndex)");
        return string2;
    }

    @InlineOnly
    private static final byte[] toByteArray(@NotNull String arrby, Charset charset) {
        if (arrby == null) {
            throw new TypeCastException("null cannot be cast to non-null type java.lang.String");
        }
        arrby = arrby.getBytes(charset);
        Intrinsics.checkExpressionValueIsNotNull(arrby, "(this as java.lang.String).getBytes(charset)");
        return arrby;
    }

    @InlineOnly
    static /* bridge */ /* synthetic */ byte[] toByteArray$default(String arrby, Charset charset, int n, Object object) {
        if ((n & 1) != 0) {
            charset = Charsets.UTF_8;
        }
        if (arrby == null) {
            throw new TypeCastException("null cannot be cast to non-null type java.lang.String");
        }
        arrby = arrby.getBytes(charset);
        Intrinsics.checkExpressionValueIsNotNull(arrby, "(this as java.lang.String).getBytes(charset)");
        return arrby;
    }

    @InlineOnly
    private static final char[] toCharArray(@NotNull String arrc) {
        if (arrc == null) {
            throw new TypeCastException("null cannot be cast to non-null type java.lang.String");
        }
        arrc = arrc.toCharArray();
        Intrinsics.checkExpressionValueIsNotNull(arrc, "(this as java.lang.String).toCharArray()");
        return arrc;
    }

    @InlineOnly
    private static final char[] toCharArray(@NotNull String string2, char[] arrc, int n, int n2, int n3) {
        if (string2 == null) {
            throw new TypeCastException("null cannot be cast to non-null type java.lang.String");
        }
        string2.getChars(n2, n3, arrc, n);
        return arrc;
    }

    @InlineOnly
    static /* bridge */ /* synthetic */ char[] toCharArray$default(String string2, char[] arrc, int n, int n2, int n3, int n4, Object object) {
        if ((n4 & 2) != 0) {
            n = 0;
        }
        if ((n4 & 4) != 0) {
            n2 = 0;
        }
        if ((n4 & 8) != 0) {
            n3 = string2.length();
        }
        if (string2 == null) {
            throw new TypeCastException("null cannot be cast to non-null type java.lang.String");
        }
        string2.getChars(n2, n3, arrc, n);
        return arrc;
    }

    @InlineOnly
    private static final String toLowerCase(@NotNull String string2) {
        if (string2 == null) {
            throw new TypeCastException("null cannot be cast to non-null type java.lang.String");
        }
        string2 = string2.toLowerCase();
        Intrinsics.checkExpressionValueIsNotNull(string2, "(this as java.lang.String).toLowerCase()");
        return string2;
    }

    @InlineOnly
    private static final String toLowerCase(@NotNull String string2, Locale locale) {
        if (string2 == null) {
            throw new TypeCastException("null cannot be cast to non-null type java.lang.String");
        }
        string2 = string2.toLowerCase(locale);
        Intrinsics.checkExpressionValueIsNotNull(string2, "(this as java.lang.String).toLowerCase(locale)");
        return string2;
    }

    @InlineOnly
    private static final Pattern toPattern(@NotNull String object, int n) {
        object = Pattern.compile((String)object, n);
        Intrinsics.checkExpressionValueIsNotNull(object, "java.util.regex.Pattern.compile(this, flags)");
        return object;
    }

    @InlineOnly
    static /* bridge */ /* synthetic */ Pattern toPattern$default(String object, int n, int n2, Object object2) {
        if ((n2 & 1) != 0) {
            n = 0;
        }
        object = Pattern.compile((String)object, n);
        Intrinsics.checkExpressionValueIsNotNull(object, "java.util.regex.Pattern.compile(this, flags)");
        return object;
    }

    @InlineOnly
    private static final String toUpperCase(@NotNull String string2) {
        if (string2 == null) {
            throw new TypeCastException("null cannot be cast to non-null type java.lang.String");
        }
        string2 = string2.toUpperCase();
        Intrinsics.checkExpressionValueIsNotNull(string2, "(this as java.lang.String).toUpperCase()");
        return string2;
    }

    @InlineOnly
    private static final String toUpperCase(@NotNull String string2, Locale locale) {
        if (string2 == null) {
            throw new TypeCastException("null cannot be cast to non-null type java.lang.String");
        }
        string2 = string2.toUpperCase(locale);
        Intrinsics.checkExpressionValueIsNotNull(string2, "(this as java.lang.String).toUpperCase(locale)");
        return string2;
    }
}

