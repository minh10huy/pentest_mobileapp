/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  kotlin.Metadata
 *  kotlin.Pair
 *  kotlin.SinceKotlin
 *  kotlin.TuplesKt
 *  kotlin.TypeCastException
 *  kotlin.Unit
 *  kotlin.internal.InlineOnly
 *  kotlin.jvm.functions.Function0
 *  kotlin.jvm.functions.Function1
 *  kotlin.jvm.functions.Function2
 *  kotlin.jvm.functions.Function3
 *  kotlin.jvm.internal.Intrinsics
 *  kotlin.text.StringsKt___StringsKt$asIterable$
 *  kotlin.text.StringsKt___StringsKt$asIterable$$inlined
 *  kotlin.text.StringsKt___StringsKt$asIterable$$inlined$Iterable
 *  kotlin.text.StringsKt___StringsKt$asSequence$
 *  kotlin.text.StringsKt___StringsKt$asSequence$$inlined
 *  kotlin.text.StringsKt___StringsKt$asSequence$$inlined$Sequence
 *  kotlin.text.StringsKt___StringsKt$chunkedSequence
 *  kotlin.text.StringsKt___StringsKt$groupingBy
 *  kotlin.text.StringsKt___StringsKt$windowed
 *  kotlin.text.StringsKt___StringsKt$windowedSequence
 *  kotlin.text.StringsKt___StringsKt$withIndex
 *  org.jetbrains.annotations.NotNull
 *  org.jetbrains.annotations.Nullable
 */
package kotlin.text;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;
import kotlin.Metadata;
import kotlin.Pair;
import kotlin.SinceKotlin;
import kotlin.TuplesKt;
import kotlin.TypeCastException;
import kotlin.Unit;
import kotlin.collections.CharIterator;
import kotlin.collections.CollectionsKt;
import kotlin.collections.Grouping;
import kotlin.collections.IndexedValue;
import kotlin.collections.IndexingIterable;
import kotlin.collections.MapsKt;
import kotlin.collections.SetsKt;
import kotlin.collections.SlidingWindowKt;
import kotlin.internal.InlineOnly;
import kotlin.jvm.functions.Function0;
import kotlin.jvm.functions.Function1;
import kotlin.jvm.functions.Function2;
import kotlin.jvm.functions.Function3;
import kotlin.jvm.internal.Intrinsics;
import kotlin.ranges.IntRange;
import kotlin.ranges.RangesKt;
import kotlin.sequences.Sequence;
import kotlin.sequences.SequencesKt;
import kotlin.text.StringsKt;
import kotlin.text.StringsKt___StringsJvmKt;
import kotlin.text.StringsKt___StringsKt;
import kotlin.text.StringsKt___StringsKt$asIterable$;
import kotlin.text.StringsKt___StringsKt$asSequence$;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

@Metadata(bv={1, 0, 2}, d1={"\u0000\u00d4\u0001\n\u0000\n\u0002\u0010\u000b\n\u0002\u0010\r\n\u0000\n\u0002\u0018\u0002\n\u0002\u0010\f\n\u0002\b\u0002\n\u0002\u0010\u001c\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0010%\n\u0002\b\u0005\n\u0002\u0010 \n\u0002\u0010\u000e\n\u0000\n\u0002\u0010\b\n\u0002\b\u0010\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\r\n\u0002\u0010\u001f\n\u0002\b\u0007\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0010\u0002\n\u0002\b\u0006\n\u0002\u0010!\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0007\n\u0002\u0010\u0000\n\u0002\b\b\n\u0002\u0010\u000f\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0012\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0010\u0006\n\u0002\b\u0007\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0010\"\n\u0002\b\u0005\n\u0002\u0018\u0002\n\u0002\b\u0006\u001a!\u0010\u0000\u001a\u00020\u0001*\u00020\u00022\u0012\u0010\u0003\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u00010\u0004H\u0086\b\u001a\n\u0010\u0006\u001a\u00020\u0001*\u00020\u0002\u001a!\u0010\u0006\u001a\u00020\u0001*\u00020\u00022\u0012\u0010\u0003\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u00010\u0004H\u0086\b\u001a\u0010\u0010\u0007\u001a\b\u0012\u0004\u0012\u00020\u00050\b*\u00020\u0002\u001a\u0010\u0010\t\u001a\b\u0012\u0004\u0012\u00020\u00050\n*\u00020\u0002\u001aE\u0010\u000b\u001a\u000e\u0012\u0004\u0012\u0002H\r\u0012\u0004\u0012\u0002H\u000e0\f\"\u0004\b\u0000\u0010\r\"\u0004\b\u0001\u0010\u000e*\u00020\u00022\u001e\u0010\u000f\u001a\u001a\u0012\u0004\u0012\u00020\u0005\u0012\u0010\u0012\u000e\u0012\u0004\u0012\u0002H\r\u0012\u0004\u0012\u0002H\u000e0\u00100\u0004H\u0086\b\u001a3\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\r\u0012\u0004\u0012\u00020\u00050\f\"\u0004\b\u0000\u0010\r*\u00020\u00022\u0012\u0010\u0012\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u0002H\r0\u0004H\u0086\b\u001aM\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\r\u0012\u0004\u0012\u0002H\u000e0\f\"\u0004\b\u0000\u0010\r\"\u0004\b\u0001\u0010\u000e*\u00020\u00022\u0012\u0010\u0012\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u0002H\r0\u00042\u0012\u0010\u0013\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u0002H\u000e0\u0004H\u0086\b\u001aN\u0010\u0014\u001a\u0002H\u0015\"\u0004\b\u0000\u0010\r\"\u0018\b\u0001\u0010\u0015*\u0012\u0012\u0006\b\u0000\u0012\u0002H\r\u0012\u0006\b\u0000\u0012\u00020\u00050\u0016*\u00020\u00022\u0006\u0010\u0017\u001a\u0002H\u00152\u0012\u0010\u0012\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u0002H\r0\u0004H\u0086\b\u00a2\u0006\u0002\u0010\u0018\u001ah\u0010\u0014\u001a\u0002H\u0015\"\u0004\b\u0000\u0010\r\"\u0004\b\u0001\u0010\u000e\"\u0018\b\u0002\u0010\u0015*\u0012\u0012\u0006\b\u0000\u0012\u0002H\r\u0012\u0006\b\u0000\u0012\u0002H\u000e0\u0016*\u00020\u00022\u0006\u0010\u0017\u001a\u0002H\u00152\u0012\u0010\u0012\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u0002H\r0\u00042\u0012\u0010\u0013\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u0002H\u000e0\u0004H\u0086\b\u00a2\u0006\u0002\u0010\u0019\u001a`\u0010\u001a\u001a\u0002H\u0015\"\u0004\b\u0000\u0010\r\"\u0004\b\u0001\u0010\u000e\"\u0018\b\u0002\u0010\u0015*\u0012\u0012\u0006\b\u0000\u0012\u0002H\r\u0012\u0006\b\u0000\u0012\u0002H\u000e0\u0016*\u00020\u00022\u0006\u0010\u0017\u001a\u0002H\u00152\u001e\u0010\u000f\u001a\u001a\u0012\u0004\u0012\u00020\u0005\u0012\u0010\u0012\u000e\u0012\u0004\u0012\u0002H\r\u0012\u0004\u0012\u0002H\u000e0\u00100\u0004H\u0086\b\u00a2\u0006\u0002\u0010\u0018\u001a\u001a\u0010\u001b\u001a\b\u0012\u0004\u0012\u00020\u001d0\u001c*\u00020\u00022\u0006\u0010\u001e\u001a\u00020\u001fH\u0007\u001a4\u0010\u001b\u001a\b\u0012\u0004\u0012\u0002H 0\u001c\"\u0004\b\u0000\u0010 *\u00020\u00022\u0006\u0010\u001e\u001a\u00020\u001f2\u0012\u0010\u000f\u001a\u000e\u0012\u0004\u0012\u00020\u0002\u0012\u0004\u0012\u0002H 0\u0004H\u0007\u001a\u001a\u0010!\u001a\b\u0012\u0004\u0012\u00020\u001d0\n*\u00020\u00022\u0006\u0010\u001e\u001a\u00020\u001fH\u0007\u001a4\u0010!\u001a\b\u0012\u0004\u0012\u0002H 0\n\"\u0004\b\u0000\u0010 *\u00020\u00022\u0006\u0010\u001e\u001a\u00020\u001f2\u0012\u0010\u000f\u001a\u000e\u0012\u0004\u0012\u00020\u0002\u0012\u0004\u0012\u0002H 0\u0004H\u0007\u001a\r\u0010\"\u001a\u00020\u001f*\u00020\u0002H\u0087\b\u001a!\u0010\"\u001a\u00020\u001f*\u00020\u00022\u0012\u0010\u0003\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u00010\u0004H\u0086\b\u001a\u0012\u0010#\u001a\u00020\u0002*\u00020\u00022\u0006\u0010$\u001a\u00020\u001f\u001a\u0012\u0010#\u001a\u00020\u001d*\u00020\u001d2\u0006\u0010$\u001a\u00020\u001f\u001a\u0012\u0010%\u001a\u00020\u0002*\u00020\u00022\u0006\u0010$\u001a\u00020\u001f\u001a\u0012\u0010%\u001a\u00020\u001d*\u00020\u001d2\u0006\u0010$\u001a\u00020\u001f\u001a!\u0010&\u001a\u00020\u0002*\u00020\u00022\u0012\u0010\u0003\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u00010\u0004H\u0086\b\u001a!\u0010&\u001a\u00020\u001d*\u00020\u001d2\u0012\u0010\u0003\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u00010\u0004H\u0086\b\u001a!\u0010'\u001a\u00020\u0002*\u00020\u00022\u0012\u0010\u0003\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u00010\u0004H\u0086\b\u001a!\u0010'\u001a\u00020\u001d*\u00020\u001d2\u0012\u0010\u0003\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u00010\u0004H\u0086\b\u001a\u0015\u0010(\u001a\u00020\u0005*\u00020\u00022\u0006\u0010)\u001a\u00020\u001fH\u0087\b\u001a)\u0010*\u001a\u00020\u0005*\u00020\u00022\u0006\u0010)\u001a\u00020\u001f2\u0012\u0010+\u001a\u000e\u0012\u0004\u0012\u00020\u001f\u0012\u0004\u0012\u00020\u00050\u0004H\u0087\b\u001a\u001c\u0010,\u001a\u0004\u0018\u00010\u0005*\u00020\u00022\u0006\u0010)\u001a\u00020\u001fH\u0087\b\u00a2\u0006\u0002\u0010-\u001a!\u0010.\u001a\u00020\u0002*\u00020\u00022\u0012\u0010\u0003\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u00010\u0004H\u0086\b\u001a!\u0010.\u001a\u00020\u001d*\u00020\u001d2\u0012\u0010\u0003\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u00010\u0004H\u0086\b\u001a6\u0010/\u001a\u00020\u0002*\u00020\u00022'\u0010\u0003\u001a#\u0012\u0013\u0012\u00110\u001f\u00a2\u0006\f\b1\u0012\b\b2\u0012\u0004\b\b()\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u000100H\u0086\b\u001a6\u0010/\u001a\u00020\u001d*\u00020\u001d2'\u0010\u0003\u001a#\u0012\u0013\u0012\u00110\u001f\u00a2\u0006\f\b1\u0012\b\b2\u0012\u0004\b\b()\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u000100H\u0086\b\u001aQ\u00103\u001a\u0002H4\"\f\b\u0000\u00104*\u000605j\u0002`6*\u00020\u00022\u0006\u0010\u0017\u001a\u0002H42'\u0010\u0003\u001a#\u0012\u0013\u0012\u00110\u001f\u00a2\u0006\f\b1\u0012\b\b2\u0012\u0004\b\b()\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u000100H\u0086\b\u00a2\u0006\u0002\u00107\u001a!\u00108\u001a\u00020\u0002*\u00020\u00022\u0012\u0010\u0003\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u00010\u0004H\u0086\b\u001a!\u00108\u001a\u00020\u001d*\u00020\u001d2\u0012\u0010\u0003\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u00010\u0004H\u0086\b\u001a<\u00109\u001a\u0002H4\"\f\b\u0000\u00104*\u000605j\u0002`6*\u00020\u00022\u0006\u0010\u0017\u001a\u0002H42\u0012\u0010\u0003\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u00010\u0004H\u0086\b\u00a2\u0006\u0002\u0010:\u001a<\u0010;\u001a\u0002H4\"\f\b\u0000\u00104*\u000605j\u0002`6*\u00020\u00022\u0006\u0010\u0017\u001a\u0002H42\u0012\u0010\u0003\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u00010\u0004H\u0086\b\u00a2\u0006\u0002\u0010:\u001a(\u0010<\u001a\u0004\u0018\u00010\u0005*\u00020\u00022\u0012\u0010\u0003\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u00010\u0004H\u0087\b\u00a2\u0006\u0002\u0010=\u001a(\u0010>\u001a\u0004\u0018\u00010\u0005*\u00020\u00022\u0012\u0010\u0003\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u00010\u0004H\u0087\b\u00a2\u0006\u0002\u0010=\u001a\n\u0010?\u001a\u00020\u0005*\u00020\u0002\u001a!\u0010?\u001a\u00020\u0005*\u00020\u00022\u0012\u0010\u0003\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u00010\u0004H\u0086\b\u001a\u0011\u0010@\u001a\u0004\u0018\u00010\u0005*\u00020\u0002\u00a2\u0006\u0002\u0010A\u001a(\u0010@\u001a\u0004\u0018\u00010\u0005*\u00020\u00022\u0012\u0010\u0003\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u00010\u0004H\u0086\b\u00a2\u0006\u0002\u0010=\u001a3\u0010B\u001a\b\u0012\u0004\u0012\u0002H 0\u001c\"\u0004\b\u0000\u0010 *\u00020\u00022\u0018\u0010\u000f\u001a\u0014\u0012\u0004\u0012\u00020\u0005\u0012\n\u0012\b\u0012\u0004\u0012\u0002H 0\b0\u0004H\u0086\b\u001aL\u0010C\u001a\u0002H4\"\u0004\b\u0000\u0010 \"\u0010\b\u0001\u00104*\n\u0012\u0006\b\u0000\u0012\u0002H 0D*\u00020\u00022\u0006\u0010\u0017\u001a\u0002H42\u0018\u0010\u000f\u001a\u0014\u0012\u0004\u0012\u00020\u0005\u0012\n\u0012\b\u0012\u0004\u0012\u0002H 0\b0\u0004H\u0086\b\u00a2\u0006\u0002\u0010E\u001aI\u0010F\u001a\u0002H \"\u0004\b\u0000\u0010 *\u00020\u00022\u0006\u0010G\u001a\u0002H 2'\u0010H\u001a#\u0012\u0013\u0012\u0011H \u00a2\u0006\f\b1\u0012\b\b2\u0012\u0004\b\b(I\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u0002H 00H\u0086\b\u00a2\u0006\u0002\u0010J\u001a^\u0010K\u001a\u0002H \"\u0004\b\u0000\u0010 *\u00020\u00022\u0006\u0010G\u001a\u0002H 2<\u0010H\u001a8\u0012\u0013\u0012\u00110\u001f\u00a2\u0006\f\b1\u0012\b\b2\u0012\u0004\b\b()\u0012\u0013\u0012\u0011H \u00a2\u0006\f\b1\u0012\b\b2\u0012\u0004\b\b(I\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u0002H 0LH\u0086\b\u00a2\u0006\u0002\u0010M\u001aI\u0010N\u001a\u0002H \"\u0004\b\u0000\u0010 *\u00020\u00022\u0006\u0010G\u001a\u0002H 2'\u0010H\u001a#\u0012\u0004\u0012\u00020\u0005\u0012\u0013\u0012\u0011H \u00a2\u0006\f\b1\u0012\b\b2\u0012\u0004\b\b(I\u0012\u0004\u0012\u0002H 00H\u0086\b\u00a2\u0006\u0002\u0010J\u001a^\u0010O\u001a\u0002H \"\u0004\b\u0000\u0010 *\u00020\u00022\u0006\u0010G\u001a\u0002H 2<\u0010H\u001a8\u0012\u0013\u0012\u00110\u001f\u00a2\u0006\f\b1\u0012\b\b2\u0012\u0004\b\b()\u0012\u0004\u0012\u00020\u0005\u0012\u0013\u0012\u0011H \u00a2\u0006\f\b1\u0012\b\b2\u0012\u0004\b\b(I\u0012\u0004\u0012\u0002H 0LH\u0086\b\u00a2\u0006\u0002\u0010M\u001a!\u0010P\u001a\u00020Q*\u00020\u00022\u0012\u0010R\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020Q0\u0004H\u0086\b\u001a6\u0010S\u001a\u00020Q*\u00020\u00022'\u0010R\u001a#\u0012\u0013\u0012\u00110\u001f\u00a2\u0006\f\b1\u0012\b\b2\u0012\u0004\b\b()\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020Q00H\u0086\b\u001a)\u0010T\u001a\u00020\u0005*\u00020\u00022\u0006\u0010)\u001a\u00020\u001f2\u0012\u0010+\u001a\u000e\u0012\u0004\u0012\u00020\u001f\u0012\u0004\u0012\u00020\u00050\u0004H\u0087\b\u001a\u0019\u0010U\u001a\u0004\u0018\u00010\u0005*\u00020\u00022\u0006\u0010)\u001a\u00020\u001f\u00a2\u0006\u0002\u0010-\u001a9\u0010V\u001a\u0014\u0012\u0004\u0012\u0002H\r\u0012\n\u0012\b\u0012\u0004\u0012\u00020\u00050\u001c0\f\"\u0004\b\u0000\u0010\r*\u00020\u00022\u0012\u0010\u0012\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u0002H\r0\u0004H\u0086\b\u001aS\u0010V\u001a\u0014\u0012\u0004\u0012\u0002H\r\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u000e0\u001c0\f\"\u0004\b\u0000\u0010\r\"\u0004\b\u0001\u0010\u000e*\u00020\u00022\u0012\u0010\u0012\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u0002H\r0\u00042\u0012\u0010\u0013\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u0002H\u000e0\u0004H\u0086\b\u001aR\u0010W\u001a\u0002H\u0015\"\u0004\b\u0000\u0010\r\"\u001c\b\u0001\u0010\u0015*\u0016\u0012\u0006\b\u0000\u0012\u0002H\r\u0012\n\u0012\b\u0012\u0004\u0012\u00020\u00050X0\u0016*\u00020\u00022\u0006\u0010\u0017\u001a\u0002H\u00152\u0012\u0010\u0012\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u0002H\r0\u0004H\u0086\b\u00a2\u0006\u0002\u0010\u0018\u001al\u0010W\u001a\u0002H\u0015\"\u0004\b\u0000\u0010\r\"\u0004\b\u0001\u0010\u000e\"\u001c\b\u0002\u0010\u0015*\u0016\u0012\u0006\b\u0000\u0012\u0002H\r\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u000e0X0\u0016*\u00020\u00022\u0006\u0010\u0017\u001a\u0002H\u00152\u0012\u0010\u0012\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u0002H\r0\u00042\u0012\u0010\u0013\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u0002H\u000e0\u0004H\u0086\b\u00a2\u0006\u0002\u0010\u0019\u001a5\u0010Y\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u0002H\r0Z\"\u0004\b\u0000\u0010\r*\u00020\u00022\u0014\b\u0004\u0010\u0012\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u0002H\r0\u0004H\u0087\b\u001a!\u0010[\u001a\u00020\u001f*\u00020\u00022\u0012\u0010\u0003\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u00010\u0004H\u0086\b\u001a!\u0010\\\u001a\u00020\u001f*\u00020\u00022\u0012\u0010\u0003\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u00010\u0004H\u0086\b\u001a\n\u0010]\u001a\u00020\u0005*\u00020\u0002\u001a!\u0010]\u001a\u00020\u0005*\u00020\u00022\u0012\u0010\u0003\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u00010\u0004H\u0086\b\u001a\u0011\u0010^\u001a\u0004\u0018\u00010\u0005*\u00020\u0002\u00a2\u0006\u0002\u0010A\u001a(\u0010^\u001a\u0004\u0018\u00010\u0005*\u00020\u00022\u0012\u0010\u0003\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u00010\u0004H\u0086\b\u00a2\u0006\u0002\u0010=\u001a-\u0010_\u001a\b\u0012\u0004\u0012\u0002H 0\u001c\"\u0004\b\u0000\u0010 *\u00020\u00022\u0012\u0010\u000f\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u0002H 0\u0004H\u0086\b\u001aB\u0010`\u001a\b\u0012\u0004\u0012\u0002H 0\u001c\"\u0004\b\u0000\u0010 *\u00020\u00022'\u0010\u000f\u001a#\u0012\u0013\u0012\u00110\u001f\u00a2\u0006\f\b1\u0012\b\b2\u0012\u0004\b\b()\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u0002H 00H\u0086\b\u001aH\u0010a\u001a\b\u0012\u0004\u0012\u0002H 0\u001c\"\b\b\u0000\u0010 *\u00020b*\u00020\u00022)\u0010\u000f\u001a%\u0012\u0013\u0012\u00110\u001f\u00a2\u0006\f\b1\u0012\b\b2\u0012\u0004\b\b()\u0012\u0004\u0012\u00020\u0005\u0012\u0006\u0012\u0004\u0018\u0001H 00H\u0086\b\u001aa\u0010c\u001a\u0002H4\"\b\b\u0000\u0010 *\u00020b\"\u0010\b\u0001\u00104*\n\u0012\u0006\b\u0000\u0012\u0002H 0D*\u00020\u00022\u0006\u0010\u0017\u001a\u0002H42)\u0010\u000f\u001a%\u0012\u0013\u0012\u00110\u001f\u00a2\u0006\f\b1\u0012\b\b2\u0012\u0004\b\b()\u0012\u0004\u0012\u00020\u0005\u0012\u0006\u0012\u0004\u0018\u0001H 00H\u0086\b\u00a2\u0006\u0002\u0010d\u001a[\u0010e\u001a\u0002H4\"\u0004\b\u0000\u0010 \"\u0010\b\u0001\u00104*\n\u0012\u0006\b\u0000\u0012\u0002H 0D*\u00020\u00022\u0006\u0010\u0017\u001a\u0002H42'\u0010\u000f\u001a#\u0012\u0013\u0012\u00110\u001f\u00a2\u0006\f\b1\u0012\b\b2\u0012\u0004\b\b()\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u0002H 00H\u0086\b\u00a2\u0006\u0002\u0010d\u001a3\u0010f\u001a\b\u0012\u0004\u0012\u0002H 0\u001c\"\b\b\u0000\u0010 *\u00020b*\u00020\u00022\u0014\u0010\u000f\u001a\u0010\u0012\u0004\u0012\u00020\u0005\u0012\u0006\u0012\u0004\u0018\u0001H 0\u0004H\u0086\b\u001aL\u0010g\u001a\u0002H4\"\b\b\u0000\u0010 *\u00020b\"\u0010\b\u0001\u00104*\n\u0012\u0006\b\u0000\u0012\u0002H 0D*\u00020\u00022\u0006\u0010\u0017\u001a\u0002H42\u0014\u0010\u000f\u001a\u0010\u0012\u0004\u0012\u00020\u0005\u0012\u0006\u0012\u0004\u0018\u0001H 0\u0004H\u0086\b\u00a2\u0006\u0002\u0010E\u001aF\u0010h\u001a\u0002H4\"\u0004\b\u0000\u0010 \"\u0010\b\u0001\u00104*\n\u0012\u0006\b\u0000\u0012\u0002H 0D*\u00020\u00022\u0006\u0010\u0017\u001a\u0002H42\u0012\u0010\u000f\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u0002H 0\u0004H\u0086\b\u00a2\u0006\u0002\u0010E\u001a\u0011\u0010i\u001a\u0004\u0018\u00010\u0005*\u00020\u0002\u00a2\u0006\u0002\u0010A\u001a8\u0010j\u001a\u0004\u0018\u00010\u0005\"\u000e\b\u0000\u0010 *\b\u0012\u0004\u0012\u0002H 0k*\u00020\u00022\u0012\u0010l\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u0002H 0\u0004H\u0086\b\u00a2\u0006\u0002\u0010=\u001a-\u0010m\u001a\u0004\u0018\u00010\u0005*\u00020\u00022\u001a\u0010n\u001a\u0016\u0012\u0006\b\u0000\u0012\u00020\u00050oj\n\u0012\u0006\b\u0000\u0012\u00020\u0005`p\u00a2\u0006\u0002\u0010q\u001a\u0011\u0010r\u001a\u0004\u0018\u00010\u0005*\u00020\u0002\u00a2\u0006\u0002\u0010A\u001a8\u0010s\u001a\u0004\u0018\u00010\u0005\"\u000e\b\u0000\u0010 *\b\u0012\u0004\u0012\u0002H 0k*\u00020\u00022\u0012\u0010l\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u0002H 0\u0004H\u0086\b\u00a2\u0006\u0002\u0010=\u001a-\u0010t\u001a\u0004\u0018\u00010\u0005*\u00020\u00022\u001a\u0010n\u001a\u0016\u0012\u0006\b\u0000\u0012\u00020\u00050oj\n\u0012\u0006\b\u0000\u0012\u00020\u0005`p\u00a2\u0006\u0002\u0010q\u001a\n\u0010u\u001a\u00020\u0001*\u00020\u0002\u001a!\u0010u\u001a\u00020\u0001*\u00020\u00022\u0012\u0010\u0003\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u00010\u0004H\u0086\b\u001a0\u0010v\u001a\u0002Hw\"\b\b\u0000\u0010w*\u00020\u0002*\u0002Hw2\u0012\u0010R\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020Q0\u0004H\u0087\b\u00a2\u0006\u0002\u0010x\u001a-\u0010y\u001a\u000e\u0012\u0004\u0012\u00020\u0002\u0012\u0004\u0012\u00020\u00020\u0010*\u00020\u00022\u0012\u0010\u0003\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u00010\u0004H\u0086\b\u001a-\u0010y\u001a\u000e\u0012\u0004\u0012\u00020\u001d\u0012\u0004\u0012\u00020\u001d0\u0010*\u00020\u001d2\u0012\u0010\u0003\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u00010\u0004H\u0086\b\u001a6\u0010z\u001a\u00020\u0005*\u00020\u00022'\u0010H\u001a#\u0012\u0013\u0012\u00110\u0005\u00a2\u0006\f\b1\u0012\b\b2\u0012\u0004\b\b(I\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u000500H\u0086\b\u001aK\u0010{\u001a\u00020\u0005*\u00020\u00022<\u0010H\u001a8\u0012\u0013\u0012\u00110\u001f\u00a2\u0006\f\b1\u0012\b\b2\u0012\u0004\b\b()\u0012\u0013\u0012\u00110\u0005\u00a2\u0006\f\b1\u0012\b\b2\u0012\u0004\b\b(I\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u00050LH\u0086\b\u001a6\u0010|\u001a\u00020\u0005*\u00020\u00022'\u0010H\u001a#\u0012\u0004\u0012\u00020\u0005\u0012\u0013\u0012\u00110\u0005\u00a2\u0006\f\b1\u0012\b\b2\u0012\u0004\b\b(I\u0012\u0004\u0012\u00020\u000500H\u0086\b\u001aK\u0010}\u001a\u00020\u0005*\u00020\u00022<\u0010H\u001a8\u0012\u0013\u0012\u00110\u001f\u00a2\u0006\f\b1\u0012\b\b2\u0012\u0004\b\b()\u0012\u0004\u0012\u00020\u0005\u0012\u0013\u0012\u00110\u0005\u00a2\u0006\f\b1\u0012\b\b2\u0012\u0004\b\b(I\u0012\u0004\u0012\u00020\u00050LH\u0086\b\u001a\n\u0010~\u001a\u00020\u0002*\u00020\u0002\u001a\r\u0010~\u001a\u00020\u001d*\u00020\u001dH\u0087\b\u001a\n\u0010\u001a\u00020\u0005*\u00020\u0002\u001a!\u0010\u001a\u00020\u0005*\u00020\u00022\u0012\u0010\u0003\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u00010\u0004H\u0086\b\u001a\u0012\u0010?\u0001\u001a\u0004\u0018\u00010\u0005*\u00020\u0002\u00a2\u0006\u0002\u0010A\u001a)\u0010?\u0001\u001a\u0004\u0018\u00010\u0005*\u00020\u00022\u0012\u0010\u0003\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u00010\u0004H\u0086\b\u00a2\u0006\u0002\u0010=\u001a\u001a\u0010\u0081\u0001\u001a\u00020\u0002*\u00020\u00022\r\u0010\u0082\u0001\u001a\b\u0012\u0004\u0012\u00020\u001f0\b\u001a\u0015\u0010\u0081\u0001\u001a\u00020\u0002*\u00020\u00022\b\u0010\u0082\u0001\u001a\u00030\u0083\u0001\u001a\u001d\u0010\u0081\u0001\u001a\u00020\u001d*\u00020\u001d2\r\u0010\u0082\u0001\u001a\b\u0012\u0004\u0012\u00020\u001f0\bH\u0087\b\u001a\u0015\u0010\u0081\u0001\u001a\u00020\u001d*\u00020\u001d2\b\u0010\u0082\u0001\u001a\u00030\u0083\u0001\u001a\"\u0010\u0084\u0001\u001a\u00020\u001f*\u00020\u00022\u0012\u0010l\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u001f0\u0004H\u0086\b\u001a$\u0010\u0085\u0001\u001a\u00030\u0086\u0001*\u00020\u00022\u0013\u0010l\u001a\u000f\u0012\u0004\u0012\u00020\u0005\u0012\u0005\u0012\u00030\u0086\u00010\u0004H\u0086\b\u001a\u0013\u0010\u0087\u0001\u001a\u00020\u0002*\u00020\u00022\u0006\u0010$\u001a\u00020\u001f\u001a\u0013\u0010\u0087\u0001\u001a\u00020\u001d*\u00020\u001d2\u0006\u0010$\u001a\u00020\u001f\u001a\u0013\u0010\u0088\u0001\u001a\u00020\u0002*\u00020\u00022\u0006\u0010$\u001a\u00020\u001f\u001a\u0013\u0010\u0088\u0001\u001a\u00020\u001d*\u00020\u001d2\u0006\u0010$\u001a\u00020\u001f\u001a\"\u0010\u0089\u0001\u001a\u00020\u0002*\u00020\u00022\u0012\u0010\u0003\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u00010\u0004H\u0086\b\u001a\"\u0010\u0089\u0001\u001a\u00020\u001d*\u00020\u001d2\u0012\u0010\u0003\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u00010\u0004H\u0086\b\u001a\"\u0010\u008a\u0001\u001a\u00020\u0002*\u00020\u00022\u0012\u0010\u0003\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u00010\u0004H\u0086\b\u001a\"\u0010\u008a\u0001\u001a\u00020\u001d*\u00020\u001d2\u0012\u0010\u0003\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u00010\u0004H\u0086\b\u001a+\u0010\u008b\u0001\u001a\u0002H4\"\u0010\b\u0000\u00104*\n\u0012\u0006\b\u0000\u0012\u00020\u00050D*\u00020\u00022\u0006\u0010\u0017\u001a\u0002H4\u00a2\u0006\u0003\u0010\u008c\u0001\u001a\u001d\u0010\u008d\u0001\u001a\u0014\u0012\u0004\u0012\u00020\u00050\u008e\u0001j\t\u0012\u0004\u0012\u00020\u0005`\u008f\u0001*\u00020\u0002\u001a\u0011\u0010\u0090\u0001\u001a\b\u0012\u0004\u0012\u00020\u00050\u001c*\u00020\u0002\u001a\u0011\u0010\u0091\u0001\u001a\b\u0012\u0004\u0012\u00020\u00050X*\u00020\u0002\u001a\u0012\u0010\u0092\u0001\u001a\t\u0012\u0004\u0012\u00020\u00050\u0093\u0001*\u00020\u0002\u001a1\u0010\u0094\u0001\u001a\b\u0012\u0004\u0012\u00020\u001d0\u001c*\u00020\u00022\u0006\u0010\u001e\u001a\u00020\u001f2\t\b\u0002\u0010\u0095\u0001\u001a\u00020\u001f2\t\b\u0002\u0010\u0096\u0001\u001a\u00020\u0001H\u0007\u001aK\u0010\u0094\u0001\u001a\b\u0012\u0004\u0012\u0002H 0\u001c\"\u0004\b\u0000\u0010 *\u00020\u00022\u0006\u0010\u001e\u001a\u00020\u001f2\t\b\u0002\u0010\u0095\u0001\u001a\u00020\u001f2\t\b\u0002\u0010\u0096\u0001\u001a\u00020\u00012\u0012\u0010\u000f\u001a\u000e\u0012\u0004\u0012\u00020\u0002\u0012\u0004\u0012\u0002H 0\u0004H\u0007\u001a1\u0010\u0097\u0001\u001a\b\u0012\u0004\u0012\u00020\u001d0\n*\u00020\u00022\u0006\u0010\u001e\u001a\u00020\u001f2\t\b\u0002\u0010\u0095\u0001\u001a\u00020\u001f2\t\b\u0002\u0010\u0096\u0001\u001a\u00020\u0001H\u0007\u001aK\u0010\u0097\u0001\u001a\b\u0012\u0004\u0012\u0002H 0\n\"\u0004\b\u0000\u0010 *\u00020\u00022\u0006\u0010\u001e\u001a\u00020\u001f2\t\b\u0002\u0010\u0095\u0001\u001a\u00020\u001f2\t\b\u0002\u0010\u0096\u0001\u001a\u00020\u00012\u0012\u0010\u000f\u001a\u000e\u0012\u0004\u0012\u00020\u0002\u0012\u0004\u0012\u0002H 0\u0004H\u0007\u001a\u0018\u0010\u0098\u0001\u001a\u000f\u0012\u000b\u0012\t\u0012\u0004\u0012\u00020\u00050\u0099\u00010\b*\u00020\u0002\u001a)\u0010\u009a\u0001\u001a\u0014\u0012\u0010\u0012\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u00050\u00100\u001c*\u00020\u00022\u0007\u0010\u009b\u0001\u001a\u00020\u0002H\u0086\u0004\u001a]\u0010\u009a\u0001\u001a\b\u0012\u0004\u0012\u0002H\u000e0\u001c\"\u0004\b\u0000\u0010\u000e*\u00020\u00022\u0007\u0010\u009b\u0001\u001a\u00020\u000228\u0010\u000f\u001a4\u0012\u0014\u0012\u00120\u0005\u00a2\u0006\r\b1\u0012\t\b2\u0012\u0005\b\b(\u009c\u0001\u0012\u0014\u0012\u00120\u0005\u00a2\u0006\r\b1\u0012\t\b2\u0012\u0005\b\b(\u009d\u0001\u0012\u0004\u0012\u0002H\u000e00H\u0086\b\u001a\u001f\u0010\u009e\u0001\u001a\u0014\u0012\u0010\u0012\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u00050\u00100\u001c*\u00020\u0002H\u0007\u001aT\u0010\u009e\u0001\u001a\b\u0012\u0004\u0012\u0002H 0\u001c\"\u0004\b\u0000\u0010 *\u00020\u000228\u0010\u000f\u001a4\u0012\u0014\u0012\u00120\u0005\u00a2\u0006\r\b1\u0012\t\b2\u0012\u0005\b\b(\u009c\u0001\u0012\u0014\u0012\u00120\u0005\u00a2\u0006\r\b1\u0012\t\b2\u0012\u0005\b\b(\u009d\u0001\u0012\u0004\u0012\u0002H 00H\u0087\b\u00a8\u0006\u009f\u0001"}, d2={"all", "", "", "predicate", "Lkotlin/Function1;", "", "any", "asIterable", "", "asSequence", "Lkotlin/sequences/Sequence;", "associate", "", "K", "V", "transform", "Lkotlin/Pair;", "associateBy", "keySelector", "valueTransform", "associateByTo", "M", "", "destination", "(Ljava/lang/CharSequence;Ljava/util/Map;Lkotlin/jvm/functions/Function1;)Ljava/util/Map;", "(Ljava/lang/CharSequence;Ljava/util/Map;Lkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function1;)Ljava/util/Map;", "associateTo", "chunked", "", "", "size", "", "R", "chunkedSequence", "count", "drop", "n", "dropLast", "dropLastWhile", "dropWhile", "elementAt", "index", "elementAtOrElse", "defaultValue", "elementAtOrNull", "(Ljava/lang/CharSequence;I)Ljava/lang/Character;", "filter", "filterIndexed", "Lkotlin/Function2;", "Lkotlin/ParameterName;", "name", "filterIndexedTo", "C", "Ljava/lang/Appendable;", "Lkotlin/text/Appendable;", "(Ljava/lang/CharSequence;Ljava/lang/Appendable;Lkotlin/jvm/functions/Function2;)Ljava/lang/Appendable;", "filterNot", "filterNotTo", "(Ljava/lang/CharSequence;Ljava/lang/Appendable;Lkotlin/jvm/functions/Function1;)Ljava/lang/Appendable;", "filterTo", "find", "(Ljava/lang/CharSequence;Lkotlin/jvm/functions/Function1;)Ljava/lang/Character;", "findLast", "first", "firstOrNull", "(Ljava/lang/CharSequence;)Ljava/lang/Character;", "flatMap", "flatMapTo", "", "(Ljava/lang/CharSequence;Ljava/util/Collection;Lkotlin/jvm/functions/Function1;)Ljava/util/Collection;", "fold", "initial", "operation", "acc", "(Ljava/lang/CharSequence;Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;", "foldIndexed", "Lkotlin/Function3;", "(Ljava/lang/CharSequence;Ljava/lang/Object;Lkotlin/jvm/functions/Function3;)Ljava/lang/Object;", "foldRight", "foldRightIndexed", "forEach", "", "action", "forEachIndexed", "getOrElse", "getOrNull", "groupBy", "groupByTo", "", "groupingBy", "Lkotlin/collections/Grouping;", "indexOfFirst", "indexOfLast", "last", "lastOrNull", "map", "mapIndexed", "mapIndexedNotNull", "", "mapIndexedNotNullTo", "(Ljava/lang/CharSequence;Ljava/util/Collection;Lkotlin/jvm/functions/Function2;)Ljava/util/Collection;", "mapIndexedTo", "mapNotNull", "mapNotNullTo", "mapTo", "max", "maxBy", "", "selector", "maxWith", "comparator", "Ljava/util/Comparator;", "Lkotlin/Comparator;", "(Ljava/lang/CharSequence;Ljava/util/Comparator;)Ljava/lang/Character;", "min", "minBy", "minWith", "none", "onEach", "S", "(Ljava/lang/CharSequence;Lkotlin/jvm/functions/Function1;)Ljava/lang/CharSequence;", "partition", "reduce", "reduceIndexed", "reduceRight", "reduceRightIndexed", "reversed", "single", "singleOrNull", "slice", "indices", "Lkotlin/ranges/IntRange;", "sumBy", "sumByDouble", "", "take", "takeLast", "takeLastWhile", "takeWhile", "toCollection", "(Ljava/lang/CharSequence;Ljava/util/Collection;)Ljava/util/Collection;", "toHashSet", "Ljava/util/HashSet;", "Lkotlin/collections/HashSet;", "toList", "toMutableList", "toSet", "", "windowed", "step", "partialWindows", "windowedSequence", "withIndex", "Lkotlin/collections/IndexedValue;", "zip", "other", "a", "b", "zipWithNext", "kotlin-stdlib"}, k=5, mv={1, 1, 10}, xi=1, xs="kotlin/text/StringsKt")
class StringsKt___StringsKt
extends StringsKt___StringsJvmKt {
    public static final boolean all(@NotNull CharSequence charSequence, @NotNull Function1<? super Character, Boolean> function1) {
        Intrinsics.checkParameterIsNotNull((Object)charSequence, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(function1, (String)"predicate");
        for (int i = 0; i < charSequence.length(); ++i) {
            if (((Boolean)function1.invoke((Object)Character.valueOf(charSequence.charAt(i)))).booleanValue()) continue;
            return false;
        }
        return true;
    }

    public static final boolean any(@NotNull CharSequence charSequence) {
        Intrinsics.checkParameterIsNotNull((Object)charSequence, (String)"$receiver");
        boolean bl = charSequence.length() == 0;
        return bl ^ true;
    }

    public static final boolean any(@NotNull CharSequence charSequence, @NotNull Function1<? super Character, Boolean> function1) {
        Intrinsics.checkParameterIsNotNull((Object)charSequence, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(function1, (String)"predicate");
        for (int i = 0; i < charSequence.length(); ++i) {
            if (!((Boolean)function1.invoke((Object)Character.valueOf(charSequence.charAt(i)))).booleanValue()) continue;
            return true;
        }
        return false;
    }

    @NotNull
    public static final Iterable<Character> asIterable(@NotNull CharSequence charSequence) {
        Intrinsics.checkParameterIsNotNull((Object)charSequence, (String)"$receiver");
        if (charSequence instanceof String) {
            boolean bl = charSequence.length() == 0;
            if (bl) {
                return CollectionsKt.emptyList();
            }
        }
        return new Iterable<Character>(charSequence){
            final /* synthetic */ CharSequence receiver$0$inlined;
            {
                this.receiver$0$inlined = charSequence;
            }

            @NotNull
            public Iterator<Character> iterator() {
                return StringsKt.iterator((CharSequence)this.receiver$0$inlined);
            }
        };
    }

    @NotNull
    public static final Sequence<Character> asSequence(@NotNull CharSequence charSequence) {
        Intrinsics.checkParameterIsNotNull((Object)charSequence, (String)"$receiver");
        if (charSequence instanceof String) {
            boolean bl = charSequence.length() == 0;
            if (bl) {
                return SequencesKt.emptySequence();
            }
        }
        return new Sequence<Character>(charSequence){
            final /* synthetic */ CharSequence receiver$0$inlined;
            {
                this.receiver$0$inlined = charSequence;
            }

            @NotNull
            public Iterator<Character> iterator() {
                return StringsKt.iterator((CharSequence)this.receiver$0$inlined);
            }
        };
    }

    @NotNull
    public static final <K, V> Map<K, V> associate(@NotNull CharSequence charSequence, @NotNull Function1<? super Character, ? extends Pair<? extends K, ? extends V>> function1) {
        Intrinsics.checkParameterIsNotNull((Object)charSequence, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(function1, (String)"transform");
        Map map = new LinkedHashMap(RangesKt.coerceAtLeast(MapsKt.mapCapacity(charSequence.length()), 16));
        for (int i = 0; i < charSequence.length(); ++i) {
            Pair pair = (Pair)function1.invoke((Object)Character.valueOf(charSequence.charAt(i)));
            map.put(pair.getFirst(), pair.getSecond());
        }
        return map;
    }

    @NotNull
    public static final <K> Map<K, Character> associateBy(@NotNull CharSequence charSequence, @NotNull Function1<? super Character, ? extends K> function1) {
        Intrinsics.checkParameterIsNotNull((Object)charSequence, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(function1, (String)"keySelector");
        Map map = new LinkedHashMap(RangesKt.coerceAtLeast(MapsKt.mapCapacity(charSequence.length()), 16));
        for (int i = 0; i < charSequence.length(); ++i) {
            char c = charSequence.charAt(i);
            map.put(function1.invoke((Object)Character.valueOf(c)), Character.valueOf(c));
        }
        return map;
    }

    @NotNull
    public static final <K, V> Map<K, V> associateBy(@NotNull CharSequence charSequence, @NotNull Function1<? super Character, ? extends K> function1, @NotNull Function1<? super Character, ? extends V> function12) {
        Intrinsics.checkParameterIsNotNull((Object)charSequence, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(function1, (String)"keySelector");
        Intrinsics.checkParameterIsNotNull(function12, (String)"valueTransform");
        Map map = new LinkedHashMap(RangesKt.coerceAtLeast(MapsKt.mapCapacity(charSequence.length()), 16));
        for (int i = 0; i < charSequence.length(); ++i) {
            char c = charSequence.charAt(i);
            map.put(function1.invoke((Object)Character.valueOf(c)), function12.invoke((Object)Character.valueOf(c)));
        }
        return map;
    }

    @NotNull
    public static final <K, M extends Map<? super K, ? super Character>> M associateByTo(@NotNull CharSequence charSequence, @NotNull M m, @NotNull Function1<? super Character, ? extends K> function1) {
        Intrinsics.checkParameterIsNotNull((Object)charSequence, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(m, (String)"destination");
        Intrinsics.checkParameterIsNotNull(function1, (String)"keySelector");
        for (int i = 0; i < charSequence.length(); ++i) {
            char c = charSequence.charAt(i);
            m.put((Object)function1.invoke((Object)Character.valueOf(c)), (Character)Character.valueOf(c));
        }
        return m;
    }

    @NotNull
    public static final <K, V, M extends Map<? super K, ? super V>> M associateByTo(@NotNull CharSequence charSequence, @NotNull M m, @NotNull Function1<? super Character, ? extends K> function1, @NotNull Function1<? super Character, ? extends V> function12) {
        Intrinsics.checkParameterIsNotNull((Object)charSequence, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(m, (String)"destination");
        Intrinsics.checkParameterIsNotNull(function1, (String)"keySelector");
        Intrinsics.checkParameterIsNotNull(function12, (String)"valueTransform");
        for (int i = 0; i < charSequence.length(); ++i) {
            char c = charSequence.charAt(i);
            m.put((Object)function1.invoke((Object)Character.valueOf(c)), (Object)function12.invoke((Object)Character.valueOf(c)));
        }
        return m;
    }

    @NotNull
    public static final <K, V, M extends Map<? super K, ? super V>> M associateTo(@NotNull CharSequence charSequence, @NotNull M m, @NotNull Function1<? super Character, ? extends Pair<? extends K, ? extends V>> function1) {
        Intrinsics.checkParameterIsNotNull((Object)charSequence, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(m, (String)"destination");
        Intrinsics.checkParameterIsNotNull(function1, (String)"transform");
        for (int i = 0; i < charSequence.length(); ++i) {
            Pair pair = (Pair)function1.invoke((Object)Character.valueOf(charSequence.charAt(i)));
            m.put((Object)pair.getFirst(), (Object)pair.getSecond());
        }
        return m;
    }

    @SinceKotlin(version="1.2")
    @NotNull
    public static final List<String> chunked(@NotNull CharSequence charSequence, int n) {
        Intrinsics.checkParameterIsNotNull((Object)charSequence, (String)"$receiver");
        return StringsKt.windowed(charSequence, n, n, true);
    }

    @SinceKotlin(version="1.2")
    @NotNull
    public static final <R> List<R> chunked(@NotNull CharSequence charSequence, int n, @NotNull Function1<? super CharSequence, ? extends R> function1) {
        Intrinsics.checkParameterIsNotNull((Object)charSequence, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(function1, (String)"transform");
        return StringsKt.windowed(charSequence, n, n, true, function1);
    }

    @SinceKotlin(version="1.2")
    @NotNull
    public static final Sequence<String> chunkedSequence(@NotNull CharSequence charSequence, int n) {
        Intrinsics.checkParameterIsNotNull((Object)charSequence, (String)"$receiver");
        return StringsKt.chunkedSequence(charSequence, n, chunkedSequence.INSTANCE);
    }

    @SinceKotlin(version="1.2")
    @NotNull
    public static final <R> Sequence<R> chunkedSequence(@NotNull CharSequence charSequence, int n, @NotNull Function1<? super CharSequence, ? extends R> function1) {
        Intrinsics.checkParameterIsNotNull((Object)charSequence, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(function1, (String)"transform");
        return StringsKt.windowedSequence(charSequence, n, n, true, function1);
    }

    @InlineOnly
    private static final int count(@NotNull CharSequence charSequence) {
        return charSequence.length();
    }

    public static final int count(@NotNull CharSequence charSequence, @NotNull Function1<? super Character, Boolean> function1) {
        Intrinsics.checkParameterIsNotNull((Object)charSequence, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(function1, (String)"predicate");
        int n = 0;
        for (int i = 0; i < charSequence.length(); ++i) {
            int n2 = n;
            if (((Boolean)function1.invoke((Object)Character.valueOf(charSequence.charAt(i)))).booleanValue()) {
                n2 = n + 1;
            }
            n = n2;
        }
        return n;
    }

    @NotNull
    public static final CharSequence drop(@NotNull CharSequence charSequence, int n) {
        Intrinsics.checkParameterIsNotNull((Object)charSequence, (String)"$receiver");
        boolean bl = n >= 0;
        if (!bl) {
            charSequence = new StringBuilder();
            charSequence.append("Requested character count ");
            charSequence.append(n);
            charSequence.append(" is less than zero.");
            throw (Throwable)new IllegalArgumentException(charSequence.toString().toString());
        }
        return charSequence.subSequence(RangesKt.coerceAtMost(n, charSequence.length()), charSequence.length());
    }

    @NotNull
    public static final String drop(@NotNull String charSequence, int n) {
        Intrinsics.checkParameterIsNotNull((Object)charSequence, (String)"$receiver");
        boolean bl = n >= 0;
        if (!bl) {
            charSequence = new StringBuilder();
            charSequence.append("Requested character count ");
            charSequence.append(n);
            charSequence.append(" is less than zero.");
            throw (Throwable)new IllegalArgumentException(charSequence.toString().toString());
        }
        charSequence = charSequence.substring(RangesKt.coerceAtMost(n, charSequence.length()));
        Intrinsics.checkExpressionValueIsNotNull((Object)charSequence, (String)"(this as java.lang.String).substring(startIndex)");
        return charSequence;
    }

    @NotNull
    public static final CharSequence dropLast(@NotNull CharSequence charSequence, int n) {
        Intrinsics.checkParameterIsNotNull((Object)charSequence, (String)"$receiver");
        boolean bl = n >= 0;
        if (!bl) {
            charSequence = new StringBuilder();
            charSequence.append("Requested character count ");
            charSequence.append(n);
            charSequence.append(" is less than zero.");
            throw (Throwable)new IllegalArgumentException(charSequence.toString().toString());
        }
        return StringsKt.take(charSequence, RangesKt.coerceAtLeast(charSequence.length() - n, 0));
    }

    @NotNull
    public static final String dropLast(@NotNull String charSequence, int n) {
        Intrinsics.checkParameterIsNotNull((Object)charSequence, (String)"$receiver");
        boolean bl = n >= 0;
        if (!bl) {
            charSequence = new StringBuilder();
            charSequence.append("Requested character count ");
            charSequence.append(n);
            charSequence.append(" is less than zero.");
            throw (Throwable)new IllegalArgumentException(charSequence.toString().toString());
        }
        return StringsKt.take((String)charSequence, RangesKt.coerceAtLeast(charSequence.length() - n, 0));
    }

    @NotNull
    public static final CharSequence dropLastWhile(@NotNull CharSequence charSequence, @NotNull Function1<? super Character, Boolean> function1) {
        Intrinsics.checkParameterIsNotNull((Object)charSequence, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(function1, (String)"predicate");
        for (int i = StringsKt.getLastIndex((CharSequence)charSequence); i >= 0; --i) {
            if (((Boolean)function1.invoke((Object)Character.valueOf(charSequence.charAt(i)))).booleanValue()) continue;
            return charSequence.subSequence(0, i + 1);
        }
        return "";
    }

    @NotNull
    public static final String dropLastWhile(@NotNull String string2, @NotNull Function1<? super Character, Boolean> function1) {
        Intrinsics.checkParameterIsNotNull((Object)string2, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(function1, (String)"predicate");
        for (int i = StringsKt.getLastIndex((CharSequence)((CharSequence)string2)); i >= 0; --i) {
            if (((Boolean)function1.invoke((Object)Character.valueOf(string2.charAt(i)))).booleanValue()) continue;
            string2 = string2.substring(0, i + 1);
            Intrinsics.checkExpressionValueIsNotNull((Object)string2, (String)"(this as java.lang.Strin\u2026ing(startIndex, endIndex)");
            return string2;
        }
        return "";
    }

    @NotNull
    public static final CharSequence dropWhile(@NotNull CharSequence charSequence, @NotNull Function1<? super Character, Boolean> function1) {
        Intrinsics.checkParameterIsNotNull((Object)charSequence, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(function1, (String)"predicate");
        int n = charSequence.length();
        for (int i = 0; i < n; ++i) {
            if (((Boolean)function1.invoke((Object)Character.valueOf(charSequence.charAt(i)))).booleanValue()) continue;
            return charSequence.subSequence(i, charSequence.length());
        }
        return "";
    }

    @NotNull
    public static final String dropWhile(@NotNull String string2, @NotNull Function1<? super Character, Boolean> function1) {
        Intrinsics.checkParameterIsNotNull((Object)string2, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(function1, (String)"predicate");
        int n = ((CharSequence)string2).length();
        for (int i = 0; i < n; ++i) {
            if (((Boolean)function1.invoke((Object)Character.valueOf(string2.charAt(i)))).booleanValue()) continue;
            string2 = string2.substring(i);
            Intrinsics.checkExpressionValueIsNotNull((Object)string2, (String)"(this as java.lang.String).substring(startIndex)");
            return string2;
        }
        return "";
    }

    @InlineOnly
    private static final char elementAt(@NotNull CharSequence charSequence, int n) {
        return charSequence.charAt(n);
    }

    @InlineOnly
    private static final char elementAtOrElse(@NotNull CharSequence charSequence, int n, Function1<? super Integer, Character> function1) {
        if (n >= 0 && n <= StringsKt.getLastIndex((CharSequence)charSequence)) {
            return charSequence.charAt(n);
        }
        return ((Character)function1.invoke((Object)n)).charValue();
    }

    @InlineOnly
    private static final Character elementAtOrNull(@NotNull CharSequence charSequence, int n) {
        return StringsKt.getOrNull(charSequence, n);
    }

    @NotNull
    public static final CharSequence filter(@NotNull CharSequence charSequence, @NotNull Function1<? super Character, Boolean> function1) {
        Intrinsics.checkParameterIsNotNull((Object)charSequence, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(function1, (String)"predicate");
        Appendable appendable = new StringBuilder();
        int n = charSequence.length();
        for (int i = 0; i < n; ++i) {
            char c = charSequence.charAt(i);
            if (!((Boolean)function1.invoke((Object)Character.valueOf(c))).booleanValue()) continue;
            appendable.append(c);
        }
        return (CharSequence)((Object)appendable);
    }

    @NotNull
    public static final String filter(@NotNull String charSequence, @NotNull Function1<? super Character, Boolean> function1) {
        Intrinsics.checkParameterIsNotNull((Object)charSequence, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(function1, (String)"predicate");
        charSequence = charSequence;
        Appendable appendable = new StringBuilder();
        int n = charSequence.length();
        for (int i = 0; i < n; ++i) {
            char c = charSequence.charAt(i);
            if (!((Boolean)function1.invoke((Object)Character.valueOf(c))).booleanValue()) continue;
            appendable.append(c);
        }
        charSequence = ((StringBuilder)appendable).toString();
        Intrinsics.checkExpressionValueIsNotNull((Object)charSequence, (String)"filterTo(StringBuilder(), predicate).toString()");
        return charSequence;
    }

    @NotNull
    public static final CharSequence filterIndexed(@NotNull CharSequence charSequence, @NotNull Function2<? super Integer, ? super Character, Boolean> function2) {
        Intrinsics.checkParameterIsNotNull((Object)charSequence, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(function2, (String)"predicate");
        Appendable appendable = new StringBuilder();
        int n = 0;
        int n2 = 0;
        while (n < charSequence.length()) {
            char c = charSequence.charAt(n);
            if (((Boolean)function2.invoke((Object)n2, (Object)Character.valueOf(c))).booleanValue()) {
                appendable.append(c);
            }
            ++n;
            ++n2;
        }
        return (CharSequence)((Object)appendable);
    }

    @NotNull
    public static final String filterIndexed(@NotNull String charSequence, @NotNull Function2<? super Integer, ? super Character, Boolean> function2) {
        Intrinsics.checkParameterIsNotNull((Object)charSequence, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(function2, (String)"predicate");
        charSequence = charSequence;
        Appendable appendable = new StringBuilder();
        int n = 0;
        int n2 = 0;
        while (n < charSequence.length()) {
            char c = charSequence.charAt(n);
            if (((Boolean)function2.invoke((Object)n2, (Object)Character.valueOf(c))).booleanValue()) {
                appendable.append(c);
            }
            ++n;
            ++n2;
        }
        charSequence = ((StringBuilder)appendable).toString();
        Intrinsics.checkExpressionValueIsNotNull((Object)charSequence, (String)"filterIndexedTo(StringBu\u2026(), predicate).toString()");
        return charSequence;
    }

    @NotNull
    public static final <C extends Appendable> C filterIndexedTo(@NotNull CharSequence charSequence, @NotNull C c, @NotNull Function2<? super Integer, ? super Character, Boolean> function2) {
        Intrinsics.checkParameterIsNotNull((Object)charSequence, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(c, (String)"destination");
        Intrinsics.checkParameterIsNotNull(function2, (String)"predicate");
        int n = 0;
        int n2 = 0;
        while (n < charSequence.length()) {
            char c2 = charSequence.charAt(n);
            if (((Boolean)function2.invoke((Object)n2, (Object)Character.valueOf(c2))).booleanValue()) {
                c.append(c2);
            }
            ++n;
            ++n2;
        }
        return c;
    }

    @NotNull
    public static final CharSequence filterNot(@NotNull CharSequence charSequence, @NotNull Function1<? super Character, Boolean> function1) {
        Intrinsics.checkParameterIsNotNull((Object)charSequence, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(function1, (String)"predicate");
        Appendable appendable = new StringBuilder();
        for (int i = 0; i < charSequence.length(); ++i) {
            char c = charSequence.charAt(i);
            if (((Boolean)function1.invoke((Object)Character.valueOf(c))).booleanValue()) continue;
            appendable.append(c);
        }
        return (CharSequence)((Object)appendable);
    }

    @NotNull
    public static final String filterNot(@NotNull String charSequence, @NotNull Function1<? super Character, Boolean> function1) {
        Intrinsics.checkParameterIsNotNull((Object)charSequence, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(function1, (String)"predicate");
        charSequence = charSequence;
        Appendable appendable = new StringBuilder();
        for (int i = 0; i < charSequence.length(); ++i) {
            char c = charSequence.charAt(i);
            if (((Boolean)function1.invoke((Object)Character.valueOf(c))).booleanValue()) continue;
            appendable.append(c);
        }
        charSequence = ((StringBuilder)appendable).toString();
        Intrinsics.checkExpressionValueIsNotNull((Object)charSequence, (String)"filterNotTo(StringBuilder(), predicate).toString()");
        return charSequence;
    }

    @NotNull
    public static final <C extends Appendable> C filterNotTo(@NotNull CharSequence charSequence, @NotNull C c, @NotNull Function1<? super Character, Boolean> function1) {
        Intrinsics.checkParameterIsNotNull((Object)charSequence, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(c, (String)"destination");
        Intrinsics.checkParameterIsNotNull(function1, (String)"predicate");
        for (int i = 0; i < charSequence.length(); ++i) {
            char c2 = charSequence.charAt(i);
            if (((Boolean)function1.invoke((Object)Character.valueOf(c2))).booleanValue()) continue;
            c.append(c2);
        }
        return c;
    }

    @NotNull
    public static final <C extends Appendable> C filterTo(@NotNull CharSequence charSequence, @NotNull C c, @NotNull Function1<? super Character, Boolean> function1) {
        Intrinsics.checkParameterIsNotNull((Object)charSequence, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(c, (String)"destination");
        Intrinsics.checkParameterIsNotNull(function1, (String)"predicate");
        int n = charSequence.length();
        for (int i = 0; i < n; ++i) {
            char c2 = charSequence.charAt(i);
            if (!((Boolean)function1.invoke((Object)Character.valueOf(c2))).booleanValue()) continue;
            c.append(c2);
        }
        return c;
    }

    @InlineOnly
    private static final Character find(@NotNull CharSequence charSequence, Function1<? super Character, Boolean> function1) {
        for (int i = 0; i < charSequence.length(); ++i) {
            char c = charSequence.charAt(i);
            if (!((Boolean)function1.invoke((Object)Character.valueOf(c))).booleanValue()) continue;
            return Character.valueOf(c);
        }
        return null;
    }

    @InlineOnly
    private static final Character findLast(@NotNull CharSequence charSequence, Function1<? super Character, Boolean> function1) {
        int n = charSequence.length();
        while (--n >= 0) {
            char c = charSequence.charAt(n);
            if (!((Boolean)function1.invoke((Object)Character.valueOf(c))).booleanValue()) continue;
            return Character.valueOf(c);
        }
        return null;
    }

    public static final char first(@NotNull CharSequence charSequence) {
        Intrinsics.checkParameterIsNotNull((Object)charSequence, (String)"$receiver");
        boolean bl = charSequence.length() == 0;
        if (bl) {
            throw (Throwable)new NoSuchElementException("Char sequence is empty.");
        }
        return charSequence.charAt(0);
    }

    public static final char first(@NotNull CharSequence charSequence, @NotNull Function1<? super Character, Boolean> function1) {
        Intrinsics.checkParameterIsNotNull((Object)charSequence, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(function1, (String)"predicate");
        for (int i = 0; i < charSequence.length(); ++i) {
            char c = charSequence.charAt(i);
            if (!((Boolean)function1.invoke((Object)Character.valueOf(c))).booleanValue()) continue;
            return c;
        }
        throw (Throwable)new NoSuchElementException("Char sequence contains no character matching the predicate.");
    }

    @Nullable
    public static final Character firstOrNull(@NotNull CharSequence charSequence) {
        Intrinsics.checkParameterIsNotNull((Object)charSequence, (String)"$receiver");
        boolean bl = charSequence.length() == 0;
        if (bl) {
            return null;
        }
        return Character.valueOf(charSequence.charAt(0));
    }

    @Nullable
    public static final Character firstOrNull(@NotNull CharSequence charSequence, @NotNull Function1<? super Character, Boolean> function1) {
        Intrinsics.checkParameterIsNotNull((Object)charSequence, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(function1, (String)"predicate");
        for (int i = 0; i < charSequence.length(); ++i) {
            char c = charSequence.charAt(i);
            if (!((Boolean)function1.invoke((Object)Character.valueOf(c))).booleanValue()) continue;
            return Character.valueOf(c);
        }
        return null;
    }

    @NotNull
    public static final <R> List<R> flatMap(@NotNull CharSequence charSequence, @NotNull Function1<? super Character, ? extends Iterable<? extends R>> function1) {
        Intrinsics.checkParameterIsNotNull((Object)charSequence, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(function1, (String)"transform");
        Collection collection = new ArrayList();
        for (int i = 0; i < charSequence.length(); ++i) {
            CollectionsKt.addAll((Collection)collection, (Iterable)((Iterable)function1.invoke((Object)Character.valueOf(charSequence.charAt(i)))));
        }
        return (List)collection;
    }

    @NotNull
    public static final <R, C extends Collection<? super R>> C flatMapTo(@NotNull CharSequence charSequence, @NotNull C c, @NotNull Function1<? super Character, ? extends Iterable<? extends R>> function1) {
        Intrinsics.checkParameterIsNotNull((Object)charSequence, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(c, (String)"destination");
        Intrinsics.checkParameterIsNotNull(function1, (String)"transform");
        for (int i = 0; i < charSequence.length(); ++i) {
            CollectionsKt.addAll(c, (Iterable)((Iterable)function1.invoke((Object)Character.valueOf(charSequence.charAt(i)))));
        }
        return c;
    }

    public static final <R> R fold(@NotNull CharSequence charSequence, R object, @NotNull Function2<? super R, ? super Character, ? extends R> function2) {
        Intrinsics.checkParameterIsNotNull((Object)charSequence, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(function2, (String)"operation");
        for (int i = 0; i < charSequence.length(); ++i) {
            object = function2.invoke(object, (Object)Character.valueOf(charSequence.charAt(i)));
        }
        return object;
    }

    public static final <R> R foldIndexed(@NotNull CharSequence charSequence, R object, @NotNull Function3<? super Integer, ? super R, ? super Character, ? extends R> function3) {
        Intrinsics.checkParameterIsNotNull((Object)charSequence, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(function3, (String)"operation");
        int n = 0;
        int n2 = 0;
        do {
            int n3 = n2;
            if (n >= charSequence.length()) break;
            char c = charSequence.charAt(n);
            n2 = n3 + 1;
            object = function3.invoke((Object)n3, object, (Object)Character.valueOf(c));
            ++n;
        } while (true);
        return object;
    }

    public static final <R> R foldRight(@NotNull CharSequence charSequence, R object, @NotNull Function2<? super Character, ? super R, ? extends R> function2) {
        Intrinsics.checkParameterIsNotNull((Object)charSequence, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(function2, (String)"operation");
        for (int i = StringsKt.getLastIndex((CharSequence)charSequence); i >= 0; --i) {
            object = function2.invoke((Object)Character.valueOf(charSequence.charAt(i)), object);
        }
        return object;
    }

    public static final <R> R foldRightIndexed(@NotNull CharSequence charSequence, R object, @NotNull Function3<? super Integer, ? super Character, ? super R, ? extends R> function3) {
        Intrinsics.checkParameterIsNotNull((Object)charSequence, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(function3, (String)"operation");
        for (int i = StringsKt.getLastIndex((CharSequence)charSequence); i >= 0; --i) {
            object = function3.invoke((Object)i, (Object)Character.valueOf(charSequence.charAt(i)), object);
        }
        return object;
    }

    public static final void forEach(@NotNull CharSequence charSequence, @NotNull Function1<? super Character, Unit> function1) {
        Intrinsics.checkParameterIsNotNull((Object)charSequence, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(function1, (String)"action");
        for (int i = 0; i < charSequence.length(); ++i) {
            function1.invoke((Object)Character.valueOf(charSequence.charAt(i)));
        }
    }

    public static final void forEachIndexed(@NotNull CharSequence charSequence, @NotNull Function2<? super Integer, ? super Character, Unit> function2) {
        Intrinsics.checkParameterIsNotNull((Object)charSequence, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(function2, (String)"action");
        int n = 0;
        int n2 = 0;
        do {
            int n3 = n2;
            if (n >= charSequence.length()) break;
            char c = charSequence.charAt(n);
            n2 = n3 + 1;
            function2.invoke((Object)n3, (Object)Character.valueOf(c));
            ++n;
        } while (true);
    }

    @InlineOnly
    private static final char getOrElse(@NotNull CharSequence charSequence, int n, Function1<? super Integer, Character> function1) {
        if (n >= 0 && n <= StringsKt.getLastIndex((CharSequence)charSequence)) {
            return charSequence.charAt(n);
        }
        return ((Character)function1.invoke((Object)n)).charValue();
    }

    @Nullable
    public static final Character getOrNull(@NotNull CharSequence charSequence, int n) {
        Intrinsics.checkParameterIsNotNull((Object)charSequence, (String)"$receiver");
        if (n >= 0 && n <= StringsKt.getLastIndex((CharSequence)charSequence)) {
            return Character.valueOf(charSequence.charAt(n));
        }
        return null;
    }

    @NotNull
    public static final <K> Map<K, List<Character>> groupBy(@NotNull CharSequence charSequence, @NotNull Function1<? super Character, ? extends K> function1) {
        Intrinsics.checkParameterIsNotNull((Object)charSequence, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(function1, (String)"keySelector");
        Map map = new LinkedHashMap();
        for (int i = 0; i < charSequence.length(); ++i) {
            Object v;
            char c = charSequence.charAt(i);
            Object object = function1.invoke((Object)Character.valueOf(c));
            Object object2 = v = map.get(object);
            if (v == null) {
                object2 = new ArrayList();
                map.put(object, object2);
            }
            ((List)object2).add(Character.valueOf(c));
        }
        return map;
    }

    @NotNull
    public static final <K, V> Map<K, List<V>> groupBy(@NotNull CharSequence charSequence, @NotNull Function1<? super Character, ? extends K> function1, @NotNull Function1<? super Character, ? extends V> function12) {
        Intrinsics.checkParameterIsNotNull((Object)charSequence, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(function1, (String)"keySelector");
        Intrinsics.checkParameterIsNotNull(function12, (String)"valueTransform");
        Map map = new LinkedHashMap();
        for (int i = 0; i < charSequence.length(); ++i) {
            Object v;
            char c = charSequence.charAt(i);
            Object object = function1.invoke((Object)Character.valueOf(c));
            Object object2 = v = map.get(object);
            if (v == null) {
                object2 = new ArrayList();
                map.put(object, object2);
            }
            ((List)object2).add(function12.invoke((Object)Character.valueOf(c)));
        }
        return map;
    }

    @NotNull
    public static final <K, M extends Map<? super K, List<Character>>> M groupByTo(@NotNull CharSequence charSequence, @NotNull M m, @NotNull Function1<? super Character, ? extends K> function1) {
        Intrinsics.checkParameterIsNotNull((Object)charSequence, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(m, (String)"destination");
        Intrinsics.checkParameterIsNotNull(function1, (String)"keySelector");
        for (int i = 0; i < charSequence.length(); ++i) {
            Object v;
            char c = charSequence.charAt(i);
            Object object = function1.invoke((Object)Character.valueOf(c));
            Object object2 = v = m.get(object);
            if (v == null) {
                object2 = new ArrayList();
                m.put((Object)object, object2);
            }
            ((List)object2).add(Character.valueOf(c));
        }
        return m;
    }

    @NotNull
    public static final <K, V, M extends Map<? super K, List<V>>> M groupByTo(@NotNull CharSequence charSequence, @NotNull M m, @NotNull Function1<? super Character, ? extends K> function1, @NotNull Function1<? super Character, ? extends V> function12) {
        Intrinsics.checkParameterIsNotNull((Object)charSequence, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(m, (String)"destination");
        Intrinsics.checkParameterIsNotNull(function1, (String)"keySelector");
        Intrinsics.checkParameterIsNotNull(function12, (String)"valueTransform");
        for (int i = 0; i < charSequence.length(); ++i) {
            Object v;
            char c = charSequence.charAt(i);
            Object object = function1.invoke((Object)Character.valueOf(c));
            Object object2 = v = m.get(object);
            if (v == null) {
                object2 = new ArrayList();
                m.put((Object)object, object2);
            }
            ((List)object2).add(function12.invoke((Object)Character.valueOf(c)));
        }
        return m;
    }

    @SinceKotlin(version="1.1")
    @NotNull
    public static final <K> Grouping<Character, K> groupingBy(@NotNull CharSequence charSequence, @NotNull Function1<? super Character, ? extends K> function1) {
        Intrinsics.checkParameterIsNotNull((Object)charSequence, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(function1, (String)"keySelector");
        return new Grouping<Character, K>(charSequence, function1){
            final /* synthetic */ Function1 $keySelector;
            final /* synthetic */ CharSequence receiver$0;
            {
                this.receiver$0 = charSequence;
                this.$keySelector = function1;
            }

            public K keyOf(char c) {
                return (K)this.$keySelector.invoke((Object)Character.valueOf(c));
            }

            @NotNull
            public Iterator<Character> sourceIterator() {
                return StringsKt.iterator((CharSequence)this.receiver$0);
            }
        };
    }

    public static final int indexOfFirst(@NotNull CharSequence charSequence, @NotNull Function1<? super Character, Boolean> function1) {
        Intrinsics.checkParameterIsNotNull((Object)charSequence, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(function1, (String)"predicate");
        int n = charSequence.length();
        for (int i = 0; i < n; ++i) {
            if (!((Boolean)function1.invoke((Object)Character.valueOf(charSequence.charAt(i)))).booleanValue()) continue;
            return i;
        }
        return -1;
    }

    public static final int indexOfLast(@NotNull CharSequence charSequence, @NotNull Function1<? super Character, Boolean> function1) {
        Intrinsics.checkParameterIsNotNull((Object)charSequence, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(function1, (String)"predicate");
        for (int i = charSequence.length() - 1; i >= 0; --i) {
            if (!((Boolean)function1.invoke((Object)Character.valueOf(charSequence.charAt(i)))).booleanValue()) continue;
            return i;
        }
        return -1;
    }

    public static final char last(@NotNull CharSequence charSequence) {
        Intrinsics.checkParameterIsNotNull((Object)charSequence, (String)"$receiver");
        boolean bl = charSequence.length() == 0;
        if (bl) {
            throw (Throwable)new NoSuchElementException("Char sequence is empty.");
        }
        return charSequence.charAt(StringsKt.getLastIndex((CharSequence)charSequence));
    }

    public static final char last(@NotNull CharSequence charSequence, @NotNull Function1<? super Character, Boolean> function1) {
        Intrinsics.checkParameterIsNotNull((Object)charSequence, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(function1, (String)"predicate");
        int n = charSequence.length();
        while (--n >= 0) {
            char c = charSequence.charAt(n);
            if (!((Boolean)function1.invoke((Object)Character.valueOf(c))).booleanValue()) continue;
            return c;
        }
        throw (Throwable)new NoSuchElementException("Char sequence contains no character matching the predicate.");
    }

    @Nullable
    public static final Character lastOrNull(@NotNull CharSequence charSequence) {
        Intrinsics.checkParameterIsNotNull((Object)charSequence, (String)"$receiver");
        boolean bl = charSequence.length() == 0;
        if (bl) {
            return null;
        }
        return Character.valueOf(charSequence.charAt(charSequence.length() - 1));
    }

    @Nullable
    public static final Character lastOrNull(@NotNull CharSequence charSequence, @NotNull Function1<? super Character, Boolean> function1) {
        Intrinsics.checkParameterIsNotNull((Object)charSequence, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(function1, (String)"predicate");
        int n = charSequence.length();
        while (--n >= 0) {
            char c = charSequence.charAt(n);
            if (!((Boolean)function1.invoke((Object)Character.valueOf(c))).booleanValue()) continue;
            return Character.valueOf(c);
        }
        return null;
    }

    @NotNull
    public static final <R> List<R> map(@NotNull CharSequence charSequence, @NotNull Function1<? super Character, ? extends R> function1) {
        Intrinsics.checkParameterIsNotNull((Object)charSequence, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(function1, (String)"transform");
        Collection collection = new ArrayList(charSequence.length());
        for (int i = 0; i < charSequence.length(); ++i) {
            collection.add(function1.invoke((Object)Character.valueOf(charSequence.charAt(i))));
        }
        return (List)collection;
    }

    @NotNull
    public static final <R> List<R> mapIndexed(@NotNull CharSequence charSequence, @NotNull Function2<? super Integer, ? super Character, ? extends R> function2) {
        Intrinsics.checkParameterIsNotNull((Object)charSequence, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(function2, (String)"transform");
        Collection collection = new ArrayList(charSequence.length());
        int n = 0;
        int n2 = 0;
        do {
            int n3 = n2;
            if (n >= charSequence.length()) break;
            char c = charSequence.charAt(n);
            n2 = n3 + 1;
            collection.add(function2.invoke((Object)n3, (Object)Character.valueOf(c)));
            ++n;
        } while (true);
        return (List)collection;
    }

    @NotNull
    public static final <R> List<R> mapIndexedNotNull(@NotNull CharSequence charSequence, @NotNull Function2<? super Integer, ? super Character, ? extends R> function2) {
        Intrinsics.checkParameterIsNotNull((Object)charSequence, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(function2, (String)"transform");
        Collection collection = new ArrayList();
        int n = 0;
        int n2 = 0;
        while (n < charSequence.length()) {
            Object object = function2.invoke((Object)n2, (Object)Character.valueOf(charSequence.charAt(n)));
            if (object != null) {
                collection.add(object);
            }
            ++n;
            ++n2;
        }
        return (List)collection;
    }

    @NotNull
    public static final <R, C extends Collection<? super R>> C mapIndexedNotNullTo(@NotNull CharSequence charSequence, @NotNull C c, @NotNull Function2<? super Integer, ? super Character, ? extends R> function2) {
        Intrinsics.checkParameterIsNotNull((Object)charSequence, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(c, (String)"destination");
        Intrinsics.checkParameterIsNotNull(function2, (String)"transform");
        int n = 0;
        int n2 = 0;
        while (n < charSequence.length()) {
            Object object = function2.invoke((Object)n2, (Object)Character.valueOf(charSequence.charAt(n)));
            if (object != null) {
                c.add((Object)object);
            }
            ++n;
            ++n2;
        }
        return c;
    }

    @NotNull
    public static final <R, C extends Collection<? super R>> C mapIndexedTo(@NotNull CharSequence charSequence, @NotNull C c, @NotNull Function2<? super Integer, ? super Character, ? extends R> function2) {
        Intrinsics.checkParameterIsNotNull((Object)charSequence, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(c, (String)"destination");
        Intrinsics.checkParameterIsNotNull(function2, (String)"transform");
        int n = 0;
        int n2 = 0;
        do {
            int n3 = n2;
            if (n >= charSequence.length()) break;
            char c2 = charSequence.charAt(n);
            n2 = n3 + 1;
            c.add((Object)function2.invoke((Object)n3, (Object)Character.valueOf(c2)));
            ++n;
        } while (true);
        return c;
    }

    @NotNull
    public static final <R> List<R> mapNotNull(@NotNull CharSequence charSequence, @NotNull Function1<? super Character, ? extends R> function1) {
        Intrinsics.checkParameterIsNotNull((Object)charSequence, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(function1, (String)"transform");
        Collection collection = new ArrayList();
        for (int i = 0; i < charSequence.length(); ++i) {
            Object object = function1.invoke((Object)Character.valueOf(charSequence.charAt(i)));
            if (object == null) continue;
            collection.add(object);
        }
        return (List)collection;
    }

    @NotNull
    public static final <R, C extends Collection<? super R>> C mapNotNullTo(@NotNull CharSequence charSequence, @NotNull C c, @NotNull Function1<? super Character, ? extends R> function1) {
        Intrinsics.checkParameterIsNotNull((Object)charSequence, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(c, (String)"destination");
        Intrinsics.checkParameterIsNotNull(function1, (String)"transform");
        for (int i = 0; i < charSequence.length(); ++i) {
            Object object = function1.invoke((Object)Character.valueOf(charSequence.charAt(i)));
            if (object == null) continue;
            c.add((Object)object);
        }
        return c;
    }

    @NotNull
    public static final <R, C extends Collection<? super R>> C mapTo(@NotNull CharSequence charSequence, @NotNull C c, @NotNull Function1<? super Character, ? extends R> function1) {
        Intrinsics.checkParameterIsNotNull((Object)charSequence, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(c, (String)"destination");
        Intrinsics.checkParameterIsNotNull(function1, (String)"transform");
        for (int i = 0; i < charSequence.length(); ++i) {
            c.add((Object)function1.invoke((Object)Character.valueOf(charSequence.charAt(i))));
        }
        return c;
    }

    @Nullable
    public static final Character max(@NotNull CharSequence charSequence) {
        Intrinsics.checkParameterIsNotNull((Object)charSequence, (String)"$receiver");
        int n = charSequence.length();
        int n2 = 1;
        n = n == 0 ? 1 : 0;
        if (n != 0) {
            return null;
        }
        char c = charSequence.charAt(0);
        int n3 = StringsKt.getLastIndex((CharSequence)charSequence);
        char c2 = c;
        if (1 <= n3) {
            n = n2;
            c2 = c;
            do {
                char c3 = charSequence.charAt(n);
                c = c2;
                if (c2 < c3) {
                    c = c3;
                }
                c2 = c;
                if (n == n3) break;
                ++n;
                c2 = c;
            } while (true);
        }
        return Character.valueOf(c2);
    }

    @Nullable
    public static final <R extends Comparable<? super R>> Character maxBy(@NotNull CharSequence charSequence, @NotNull Function1<? super Character, ? extends R> function1) {
        Intrinsics.checkParameterIsNotNull((Object)charSequence, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(function1, (String)"selector");
        int n = charSequence.length();
        int n2 = 1;
        n = n == 0 ? 1 : 0;
        if (n != 0) {
            return null;
        }
        char c = charSequence.charAt(0);
        Comparable comparable = (Comparable)function1.invoke((Object)Character.valueOf(c));
        int n3 = StringsKt.getLastIndex((CharSequence)charSequence);
        char c2 = c;
        if (1 <= n3) {
            n = n2;
            do {
                c2 = charSequence.charAt(n);
                Comparable comparable2 = (Comparable)function1.invoke((Object)Character.valueOf(c2));
                Comparable comparable3 = comparable;
                if (comparable.compareTo(comparable2) < 0) {
                    c = c2;
                    comparable3 = comparable2;
                }
                c2 = c;
                if (n == n3) break;
                ++n;
                comparable = comparable3;
            } while (true);
        }
        return Character.valueOf(c2);
    }

    @Nullable
    public static final Character maxWith(@NotNull CharSequence charSequence, @NotNull Comparator<? super Character> comparator) {
        Intrinsics.checkParameterIsNotNull((Object)charSequence, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(comparator, (String)"comparator");
        int n = charSequence.length();
        int n2 = 1;
        n = n == 0 ? 1 : 0;
        if (n != 0) {
            return null;
        }
        char c = charSequence.charAt(0);
        int n3 = StringsKt.getLastIndex((CharSequence)charSequence);
        char c2 = c;
        if (1 <= n3) {
            n = n2;
            c2 = c;
            do {
                char c3 = charSequence.charAt(n);
                c = c2;
                if (comparator.compare(Character.valueOf(c2), Character.valueOf(c3)) < 0) {
                    c = c3;
                }
                c2 = c;
                if (n == n3) break;
                ++n;
                c2 = c;
            } while (true);
        }
        return Character.valueOf(c2);
    }

    @Nullable
    public static final Character min(@NotNull CharSequence charSequence) {
        Intrinsics.checkParameterIsNotNull((Object)charSequence, (String)"$receiver");
        int n = charSequence.length();
        int n2 = 1;
        n = n == 0 ? 1 : 0;
        if (n != 0) {
            return null;
        }
        char c = charSequence.charAt(0);
        int n3 = StringsKt.getLastIndex((CharSequence)charSequence);
        char c2 = c;
        if (1 <= n3) {
            n = n2;
            c2 = c;
            do {
                char c3 = charSequence.charAt(n);
                c = c2;
                if (c2 > c3) {
                    c = c3;
                }
                c2 = c;
                if (n == n3) break;
                ++n;
                c2 = c;
            } while (true);
        }
        return Character.valueOf(c2);
    }

    @Nullable
    public static final <R extends Comparable<? super R>> Character minBy(@NotNull CharSequence charSequence, @NotNull Function1<? super Character, ? extends R> function1) {
        Intrinsics.checkParameterIsNotNull((Object)charSequence, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(function1, (String)"selector");
        int n = charSequence.length();
        int n2 = 1;
        n = n == 0 ? 1 : 0;
        if (n != 0) {
            return null;
        }
        char c = charSequence.charAt(0);
        Comparable comparable = (Comparable)function1.invoke((Object)Character.valueOf(c));
        int n3 = StringsKt.getLastIndex((CharSequence)charSequence);
        char c2 = c;
        if (1 <= n3) {
            n = n2;
            do {
                c2 = charSequence.charAt(n);
                Comparable comparable2 = (Comparable)function1.invoke((Object)Character.valueOf(c2));
                Comparable comparable3 = comparable;
                if (comparable.compareTo(comparable2) > 0) {
                    c = c2;
                    comparable3 = comparable2;
                }
                c2 = c;
                if (n == n3) break;
                ++n;
                comparable = comparable3;
            } while (true);
        }
        return Character.valueOf(c2);
    }

    @Nullable
    public static final Character minWith(@NotNull CharSequence charSequence, @NotNull Comparator<? super Character> comparator) {
        Intrinsics.checkParameterIsNotNull((Object)charSequence, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(comparator, (String)"comparator");
        int n = charSequence.length();
        int n2 = 1;
        n = n == 0 ? 1 : 0;
        if (n != 0) {
            return null;
        }
        char c = charSequence.charAt(0);
        int n3 = StringsKt.getLastIndex((CharSequence)charSequence);
        char c2 = c;
        if (1 <= n3) {
            n = n2;
            c2 = c;
            do {
                char c3 = charSequence.charAt(n);
                c = c2;
                if (comparator.compare(Character.valueOf(c2), Character.valueOf(c3)) > 0) {
                    c = c3;
                }
                c2 = c;
                if (n == n3) break;
                ++n;
                c2 = c;
            } while (true);
        }
        return Character.valueOf(c2);
    }

    public static final boolean none(@NotNull CharSequence charSequence) {
        Intrinsics.checkParameterIsNotNull((Object)charSequence, (String)"$receiver");
        if (charSequence.length() == 0) {
            return true;
        }
        return false;
    }

    public static final boolean none(@NotNull CharSequence charSequence, @NotNull Function1<? super Character, Boolean> function1) {
        Intrinsics.checkParameterIsNotNull((Object)charSequence, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(function1, (String)"predicate");
        for (int i = 0; i < charSequence.length(); ++i) {
            if (!((Boolean)function1.invoke((Object)Character.valueOf(charSequence.charAt(i)))).booleanValue()) continue;
            return false;
        }
        return true;
    }

    @SinceKotlin(version="1.1")
    @NotNull
    public static final <S extends CharSequence> S onEach(@NotNull S s, @NotNull Function1<? super Character, Unit> function1) {
        Intrinsics.checkParameterIsNotNull(s, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(function1, (String)"action");
        for (int i = 0; i < s.length(); ++i) {
            function1.invoke((Object)Character.valueOf(s.charAt(i)));
        }
        return s;
    }

    @NotNull
    public static final Pair<CharSequence, CharSequence> partition(@NotNull CharSequence charSequence, @NotNull Function1<? super Character, Boolean> function1) {
        Intrinsics.checkParameterIsNotNull((Object)charSequence, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(function1, (String)"predicate");
        StringBuilder stringBuilder = new StringBuilder();
        StringBuilder stringBuilder2 = new StringBuilder();
        for (int i = 0; i < charSequence.length(); ++i) {
            char c = charSequence.charAt(i);
            if (((Boolean)function1.invoke((Object)Character.valueOf(c))).booleanValue()) {
                stringBuilder.append(c);
                continue;
            }
            stringBuilder2.append(c);
        }
        return new Pair((Object)stringBuilder, (Object)stringBuilder2);
    }

    @NotNull
    public static final Pair<String, String> partition(@NotNull String string2, @NotNull Function1<? super Character, Boolean> function1) {
        Intrinsics.checkParameterIsNotNull((Object)string2, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(function1, (String)"predicate");
        StringBuilder stringBuilder = new StringBuilder();
        StringBuilder stringBuilder2 = new StringBuilder();
        int n = string2.length();
        for (int i = 0; i < n; ++i) {
            char c = string2.charAt(i);
            if (((Boolean)function1.invoke((Object)Character.valueOf(c))).booleanValue()) {
                stringBuilder.append(c);
                continue;
            }
            stringBuilder2.append(c);
        }
        return new Pair((Object)stringBuilder.toString(), (Object)stringBuilder2.toString());
    }

    public static final char reduce(@NotNull CharSequence charSequence, @NotNull Function2<? super Character, ? super Character, Character> function2) {
        Intrinsics.checkParameterIsNotNull((Object)charSequence, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(function2, (String)"operation");
        int n = charSequence.length();
        int n2 = 1;
        n = n == 0 ? 1 : 0;
        if (n != 0) {
            throw (Throwable)new UnsupportedOperationException("Empty char sequence can't be reduced.");
        }
        char c = charSequence.charAt(0);
        int n3 = StringsKt.getLastIndex((CharSequence)charSequence);
        char c2 = c;
        if (1 <= n3) {
            n = n2;
            do {
                c2 = c = ((Character)function2.invoke((Object)Character.valueOf(c), (Object)Character.valueOf(charSequence.charAt(n)))).charValue();
                if (n == n3) break;
                ++n;
            } while (true);
        }
        return c2;
    }

    public static final char reduceIndexed(@NotNull CharSequence charSequence, @NotNull Function3<? super Integer, ? super Character, ? super Character, Character> function3) {
        Intrinsics.checkParameterIsNotNull((Object)charSequence, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(function3, (String)"operation");
        int n = charSequence.length();
        int n2 = 1;
        n = n == 0 ? 1 : 0;
        if (n != 0) {
            throw (Throwable)new UnsupportedOperationException("Empty char sequence can't be reduced.");
        }
        char c = charSequence.charAt(0);
        int n3 = StringsKt.getLastIndex((CharSequence)charSequence);
        char c2 = c;
        if (1 <= n3) {
            n = n2;
            do {
                c2 = c = ((Character)function3.invoke((Object)n, (Object)Character.valueOf(c), (Object)Character.valueOf(charSequence.charAt(n)))).charValue();
                if (n == n3) break;
                ++n;
            } while (true);
        }
        return c2;
    }

    public static final char reduceRight(@NotNull CharSequence charSequence, @NotNull Function2<? super Character, ? super Character, Character> function2) {
        Intrinsics.checkParameterIsNotNull((Object)charSequence, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(function2, (String)"operation");
        int n = StringsKt.getLastIndex((CharSequence)charSequence);
        if (n < 0) {
            throw (Throwable)new UnsupportedOperationException("Empty char sequence can't be reduced.");
        }
        char c = charSequence.charAt(n);
        for (int i = n - 1; i >= 0; --i) {
            c = ((Character)function2.invoke((Object)Character.valueOf(charSequence.charAt(i)), (Object)Character.valueOf(c))).charValue();
        }
        return c;
    }

    public static final char reduceRightIndexed(@NotNull CharSequence charSequence, @NotNull Function3<? super Integer, ? super Character, ? super Character, Character> function3) {
        Intrinsics.checkParameterIsNotNull((Object)charSequence, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(function3, (String)"operation");
        int n = StringsKt.getLastIndex((CharSequence)charSequence);
        if (n < 0) {
            throw (Throwable)new UnsupportedOperationException("Empty char sequence can't be reduced.");
        }
        char c = charSequence.charAt(n);
        for (int i = n - 1; i >= 0; --i) {
            c = ((Character)function3.invoke((Object)i, (Object)Character.valueOf(charSequence.charAt(i)), (Object)Character.valueOf(c))).charValue();
        }
        return c;
    }

    @NotNull
    public static final CharSequence reversed(@NotNull CharSequence charSequence) {
        Intrinsics.checkParameterIsNotNull((Object)charSequence, (String)"$receiver");
        charSequence = new StringBuilder(charSequence).reverse();
        Intrinsics.checkExpressionValueIsNotNull((Object)charSequence, (String)"StringBuilder(this).reverse()");
        return charSequence;
    }

    @InlineOnly
    private static final String reversed(@NotNull String string2) {
        if (string2 == null) {
            throw new TypeCastException("null cannot be cast to non-null type kotlin.CharSequence");
        }
        return StringsKt.reversed((CharSequence)string2).toString();
    }

    public static final char single(@NotNull CharSequence charSequence) {
        Intrinsics.checkParameterIsNotNull((Object)charSequence, (String)"$receiver");
        switch (charSequence.length()) {
            default: {
                throw (Throwable)new IllegalArgumentException("Char sequence has more than one element.");
            }
            case 1: {
                return charSequence.charAt(0);
            }
            case 0: 
        }
        throw (Throwable)new NoSuchElementException("Char sequence is empty.");
    }

    public static final char single(@NotNull CharSequence charSequence, @NotNull Function1<? super Character, Boolean> function1) {
        Intrinsics.checkParameterIsNotNull((Object)charSequence, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(function1, (String)"predicate");
        Character c = null;
        boolean bl = false;
        for (int i = 0; i < charSequence.length(); ++i) {
            char c2 = charSequence.charAt(i);
            boolean bl2 = bl;
            if (((Boolean)function1.invoke((Object)Character.valueOf(c2))).booleanValue()) {
                if (bl) {
                    throw (Throwable)new IllegalArgumentException("Char sequence contains more than one matching element.");
                }
                c = Character.valueOf(c2);
                bl2 = true;
            }
            bl = bl2;
        }
        if (!bl) {
            throw (Throwable)new NoSuchElementException("Char sequence contains no character matching the predicate.");
        }
        if (c == null) {
            throw new TypeCastException("null cannot be cast to non-null type kotlin.Char");
        }
        return c.charValue();
    }

    @Nullable
    public static final Character singleOrNull(@NotNull CharSequence charSequence) {
        Intrinsics.checkParameterIsNotNull((Object)charSequence, (String)"$receiver");
        if (charSequence.length() == 1) {
            return Character.valueOf(charSequence.charAt(0));
        }
        return null;
    }

    @Nullable
    public static final Character singleOrNull(@NotNull CharSequence charSequence, @NotNull Function1<? super Character, Boolean> function1) {
        Intrinsics.checkParameterIsNotNull((Object)charSequence, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(function1, (String)"predicate");
        Character c = null;
        boolean bl = false;
        for (int i = 0; i < charSequence.length(); ++i) {
            char c2 = charSequence.charAt(i);
            boolean bl2 = bl;
            if (((Boolean)function1.invoke((Object)Character.valueOf(c2))).booleanValue()) {
                if (bl) {
                    return null;
                }
                c = Character.valueOf(c2);
                bl2 = true;
            }
            bl = bl2;
        }
        if (!bl) {
            return null;
        }
        return c;
    }

    @NotNull
    public static final CharSequence slice(@NotNull CharSequence charSequence, @NotNull Iterable<Integer> object) {
        Intrinsics.checkParameterIsNotNull((Object)charSequence, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(object, (String)"indices");
        int n = CollectionsKt.collectionSizeOrDefault(object, (int)10);
        if (n == 0) {
            return "";
        }
        StringBuilder stringBuilder = new StringBuilder(n);
        object = object.iterator();
        while (object.hasNext()) {
            stringBuilder.append(charSequence.charAt(((Number)object.next()).intValue()));
        }
        return stringBuilder;
    }

    @NotNull
    public static final CharSequence slice(@NotNull CharSequence charSequence, @NotNull IntRange intRange) {
        Intrinsics.checkParameterIsNotNull((Object)charSequence, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull((Object)intRange, (String)"indices");
        if (intRange.isEmpty()) {
            return "";
        }
        return StringsKt.subSequence((CharSequence)charSequence, (IntRange)intRange);
    }

    @InlineOnly
    private static final String slice(@NotNull String string2, Iterable<Integer> iterable) {
        if (string2 == null) {
            throw new TypeCastException("null cannot be cast to non-null type kotlin.CharSequence");
        }
        return StringsKt.slice((CharSequence)string2, iterable).toString();
    }

    @NotNull
    public static final String slice(@NotNull String string2, @NotNull IntRange intRange) {
        Intrinsics.checkParameterIsNotNull((Object)string2, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull((Object)intRange, (String)"indices");
        if (intRange.isEmpty()) {
            return "";
        }
        return StringsKt.substring((String)string2, (IntRange)intRange);
    }

    public static final int sumBy(@NotNull CharSequence charSequence, @NotNull Function1<? super Character, Integer> function1) {
        Intrinsics.checkParameterIsNotNull((Object)charSequence, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(function1, (String)"selector");
        int n = 0;
        for (int i = 0; i < charSequence.length(); ++i) {
            n += ((Number)function1.invoke((Object)Character.valueOf(charSequence.charAt(i)))).intValue();
        }
        return n;
    }

    public static final double sumByDouble(@NotNull CharSequence charSequence, @NotNull Function1<? super Character, Double> function1) {
        Intrinsics.checkParameterIsNotNull((Object)charSequence, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(function1, (String)"selector");
        double d = 0.0;
        for (int i = 0; i < charSequence.length(); ++i) {
            d += ((Number)function1.invoke((Object)Character.valueOf(charSequence.charAt(i)))).doubleValue();
        }
        return d;
    }

    @NotNull
    public static final CharSequence take(@NotNull CharSequence charSequence, int n) {
        Intrinsics.checkParameterIsNotNull((Object)charSequence, (String)"$receiver");
        boolean bl = n >= 0;
        if (!bl) {
            charSequence = new StringBuilder();
            charSequence.append("Requested character count ");
            charSequence.append(n);
            charSequence.append(" is less than zero.");
            throw (Throwable)new IllegalArgumentException(charSequence.toString().toString());
        }
        return charSequence.subSequence(0, RangesKt.coerceAtMost(n, charSequence.length()));
    }

    @NotNull
    public static final String take(@NotNull String charSequence, int n) {
        Intrinsics.checkParameterIsNotNull((Object)charSequence, (String)"$receiver");
        boolean bl = n >= 0;
        if (!bl) {
            charSequence = new StringBuilder();
            charSequence.append("Requested character count ");
            charSequence.append(n);
            charSequence.append(" is less than zero.");
            throw (Throwable)new IllegalArgumentException(charSequence.toString().toString());
        }
        charSequence = charSequence.substring(0, RangesKt.coerceAtMost(n, charSequence.length()));
        Intrinsics.checkExpressionValueIsNotNull((Object)charSequence, (String)"(this as java.lang.Strin\u2026ing(startIndex, endIndex)");
        return charSequence;
    }

    @NotNull
    public static final CharSequence takeLast(@NotNull CharSequence charSequence, int n) {
        Intrinsics.checkParameterIsNotNull((Object)charSequence, (String)"$receiver");
        int n2 = n >= 0 ? 1 : 0;
        if (n2 == 0) {
            charSequence = new StringBuilder();
            charSequence.append("Requested character count ");
            charSequence.append(n);
            charSequence.append(" is less than zero.");
            throw (Throwable)new IllegalArgumentException(charSequence.toString().toString());
        }
        n2 = charSequence.length();
        return charSequence.subSequence(n2 - RangesKt.coerceAtMost(n, n2), n2);
    }

    @NotNull
    public static final String takeLast(@NotNull String charSequence, int n) {
        Intrinsics.checkParameterIsNotNull((Object)charSequence, (String)"$receiver");
        int n2 = n >= 0 ? 1 : 0;
        if (n2 == 0) {
            charSequence = new StringBuilder();
            charSequence.append("Requested character count ");
            charSequence.append(n);
            charSequence.append(" is less than zero.");
            throw (Throwable)new IllegalArgumentException(charSequence.toString().toString());
        }
        n2 = charSequence.length();
        charSequence = charSequence.substring(n2 - RangesKt.coerceAtMost(n, n2));
        Intrinsics.checkExpressionValueIsNotNull((Object)charSequence, (String)"(this as java.lang.String).substring(startIndex)");
        return charSequence;
    }

    @NotNull
    public static final CharSequence takeLastWhile(@NotNull CharSequence charSequence, @NotNull Function1<? super Character, Boolean> function1) {
        Intrinsics.checkParameterIsNotNull((Object)charSequence, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(function1, (String)"predicate");
        for (int i = StringsKt.getLastIndex((CharSequence)charSequence); i >= 0; --i) {
            if (((Boolean)function1.invoke((Object)Character.valueOf(charSequence.charAt(i)))).booleanValue()) continue;
            return charSequence.subSequence(i + 1, charSequence.length());
        }
        return charSequence.subSequence(0, charSequence.length());
    }

    @NotNull
    public static final String takeLastWhile(@NotNull String string2, @NotNull Function1<? super Character, Boolean> function1) {
        Intrinsics.checkParameterIsNotNull((Object)string2, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(function1, (String)"predicate");
        for (int i = StringsKt.getLastIndex((CharSequence)((CharSequence)string2)); i >= 0; --i) {
            if (((Boolean)function1.invoke((Object)Character.valueOf(string2.charAt(i)))).booleanValue()) continue;
            string2 = string2.substring(i + 1);
            Intrinsics.checkExpressionValueIsNotNull((Object)string2, (String)"(this as java.lang.String).substring(startIndex)");
            return string2;
        }
        return string2;
    }

    @NotNull
    public static final CharSequence takeWhile(@NotNull CharSequence charSequence, @NotNull Function1<? super Character, Boolean> function1) {
        Intrinsics.checkParameterIsNotNull((Object)charSequence, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(function1, (String)"predicate");
        int n = charSequence.length();
        for (int i = 0; i < n; ++i) {
            if (((Boolean)function1.invoke((Object)Character.valueOf(charSequence.charAt(i)))).booleanValue()) continue;
            return charSequence.subSequence(0, i);
        }
        return charSequence.subSequence(0, charSequence.length());
    }

    @NotNull
    public static final String takeWhile(@NotNull String string2, @NotNull Function1<? super Character, Boolean> function1) {
        Intrinsics.checkParameterIsNotNull((Object)string2, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(function1, (String)"predicate");
        int n = string2.length();
        for (int i = 0; i < n; ++i) {
            if (((Boolean)function1.invoke((Object)Character.valueOf(string2.charAt(i)))).booleanValue()) continue;
            string2 = string2.substring(0, i);
            Intrinsics.checkExpressionValueIsNotNull((Object)string2, (String)"(this as java.lang.Strin\u2026ing(startIndex, endIndex)");
            return string2;
        }
        return string2;
    }

    @NotNull
    public static final <C extends Collection<? super Character>> C toCollection(@NotNull CharSequence charSequence, @NotNull C c) {
        Intrinsics.checkParameterIsNotNull((Object)charSequence, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(c, (String)"destination");
        for (int i = 0; i < charSequence.length(); ++i) {
            c.add((Character)Character.valueOf(charSequence.charAt(i)));
        }
        return c;
    }

    @NotNull
    public static final HashSet<Character> toHashSet(@NotNull CharSequence charSequence) {
        Intrinsics.checkParameterIsNotNull((Object)charSequence, (String)"$receiver");
        return (HashSet)StringsKt.toCollection(charSequence, (Collection)new HashSet(MapsKt.mapCapacity(charSequence.length())));
    }

    @NotNull
    public static final List<Character> toList(@NotNull CharSequence charSequence) {
        Intrinsics.checkParameterIsNotNull((Object)charSequence, (String)"$receiver");
        switch (charSequence.length()) {
            default: {
                return StringsKt.toMutableList(charSequence);
            }
            case 1: {
                return CollectionsKt.listOf((Object)Character.valueOf(charSequence.charAt(0)));
            }
            case 0: 
        }
        return CollectionsKt.emptyList();
    }

    @NotNull
    public static final List<Character> toMutableList(@NotNull CharSequence charSequence) {
        Intrinsics.checkParameterIsNotNull((Object)charSequence, (String)"$receiver");
        return (List)StringsKt.toCollection(charSequence, (Collection)new ArrayList(charSequence.length()));
    }

    @NotNull
    public static final Set<Character> toSet(@NotNull CharSequence charSequence) {
        Intrinsics.checkParameterIsNotNull((Object)charSequence, (String)"$receiver");
        switch (charSequence.length()) {
            default: {
                return (Set)StringsKt.toCollection(charSequence, (Collection)new LinkedHashSet(MapsKt.mapCapacity(charSequence.length())));
            }
            case 1: {
                return SetsKt.setOf(Character.valueOf(charSequence.charAt(0)));
            }
            case 0: 
        }
        return SetsKt.emptySet();
    }

    @SinceKotlin(version="1.2")
    @NotNull
    public static final List<String> windowed(@NotNull CharSequence charSequence, int n, int n2, boolean bl) {
        Intrinsics.checkParameterIsNotNull((Object)charSequence, (String)"$receiver");
        return StringsKt.windowed(charSequence, n, n2, bl, windowed.INSTANCE);
    }

    @SinceKotlin(version="1.2")
    @NotNull
    public static final <R> List<R> windowed(@NotNull CharSequence charSequence, int n, int n2, boolean bl, @NotNull Function1<? super CharSequence, ? extends R> function1) {
        Intrinsics.checkParameterIsNotNull((Object)charSequence, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(function1, (String)"transform");
        SlidingWindowKt.checkWindowSizeStep(n, n2);
        int n3 = charSequence.length();
        ArrayList<Object> arrayList = new ArrayList<Object>((n3 + n2 - 1) / n2);
        for (int i = 0; i < n3; i += n2) {
            int n4;
            int n5 = n4 = i + n;
            if (n4 > n3) {
                if (!bl) break;
                n5 = n3;
            }
            arrayList.add(function1.invoke((Object)charSequence.subSequence(i, n5)));
        }
        return arrayList;
    }

    @SinceKotlin(version="1.2")
    @NotNull
    public static /* bridge */ /* synthetic */ List windowed$default(CharSequence charSequence, int n, int n2, boolean bl, int n3, Object object) {
        if ((n3 & 2) != 0) {
            n2 = 1;
        }
        if ((n3 & 4) != 0) {
            bl = false;
        }
        return StringsKt.windowed(charSequence, n, n2, bl);
    }

    @SinceKotlin(version="1.2")
    @NotNull
    public static /* bridge */ /* synthetic */ List windowed$default(CharSequence charSequence, int n, int n2, boolean bl, Function1 function1, int n3, Object object) {
        if ((n3 & 2) != 0) {
            n2 = 1;
        }
        if ((n3 & 4) != 0) {
            bl = false;
        }
        return StringsKt.windowed(charSequence, n, n2, bl, function1);
    }

    @SinceKotlin(version="1.2")
    @NotNull
    public static final Sequence<String> windowedSequence(@NotNull CharSequence charSequence, int n, int n2, boolean bl) {
        Intrinsics.checkParameterIsNotNull((Object)charSequence, (String)"$receiver");
        return StringsKt.windowedSequence(charSequence, n, n2, bl, windowedSequence.INSTANCE);
    }

    @SinceKotlin(version="1.2")
    @NotNull
    public static final <R> Sequence<R> windowedSequence(@NotNull CharSequence charSequence, int n, int n2, boolean bl, @NotNull Function1<? super CharSequence, ? extends R> function1) {
        Intrinsics.checkParameterIsNotNull((Object)charSequence, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(function1, (String)"transform");
        SlidingWindowKt.checkWindowSizeStep(n, n2);
        IntRange intRange = bl ? StringsKt.getIndices((CharSequence)charSequence) : RangesKt.until(0, charSequence.length() - n + 1);
        return SequencesKt.map(CollectionsKt.asSequence(RangesKt.step(intRange, n2)), (Function1)new Function1<Integer, R>(charSequence, function1, n){
            final /* synthetic */ int $size;
            final /* synthetic */ Function1 $transform;
            final /* synthetic */ CharSequence receiver$0;
            {
                this.receiver$0 = charSequence;
                this.$transform = function1;
                this.$size = n;
                super(1);
            }

            public final R invoke(int n) {
                return (R)this.$transform.invoke((Object)this.receiver$0.subSequence(n, RangesKt.coerceAtMost(this.$size + n, this.receiver$0.length())));
            }
        });
    }

    @SinceKotlin(version="1.2")
    @NotNull
    public static /* bridge */ /* synthetic */ Sequence windowedSequence$default(CharSequence charSequence, int n, int n2, boolean bl, int n3, Object object) {
        if ((n3 & 2) != 0) {
            n2 = 1;
        }
        if ((n3 & 4) != 0) {
            bl = false;
        }
        return StringsKt.windowedSequence(charSequence, n, n2, bl);
    }

    @SinceKotlin(version="1.2")
    @NotNull
    public static /* bridge */ /* synthetic */ Sequence windowedSequence$default(CharSequence charSequence, int n, int n2, boolean bl, Function1 function1, int n3, Object object) {
        if ((n3 & 2) != 0) {
            n2 = 1;
        }
        if ((n3 & 4) != 0) {
            bl = false;
        }
        return StringsKt.windowedSequence(charSequence, n, n2, bl, function1);
    }

    @NotNull
    public static final Iterable<IndexedValue<Character>> withIndex(@NotNull CharSequence charSequence) {
        Intrinsics.checkParameterIsNotNull((Object)charSequence, (String)"$receiver");
        return new IndexingIterable((Function0)new Function0<CharIterator>(charSequence){
            final /* synthetic */ CharSequence receiver$0;
            {
                this.receiver$0 = charSequence;
                super(0);
            }

            @NotNull
            public final CharIterator invoke() {
                return StringsKt.iterator((CharSequence)this.receiver$0);
            }
        });
    }

    @NotNull
    public static final List<Pair<Character, Character>> zip(@NotNull CharSequence charSequence, @NotNull CharSequence charSequence2) {
        Intrinsics.checkParameterIsNotNull((Object)charSequence, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull((Object)charSequence2, (String)"other");
        int n = Math.min(charSequence.length(), charSequence2.length());
        ArrayList<Pair> arrayList = new ArrayList<Pair>(n);
        for (int i = 0; i < n; ++i) {
            arrayList.add(TuplesKt.to((Object)Character.valueOf(charSequence.charAt(i)), (Object)Character.valueOf(charSequence2.charAt(i))));
        }
        return arrayList;
    }

    @NotNull
    public static final <V> List<V> zip(@NotNull CharSequence charSequence, @NotNull CharSequence charSequence2, @NotNull Function2<? super Character, ? super Character, ? extends V> function2) {
        Intrinsics.checkParameterIsNotNull((Object)charSequence, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull((Object)charSequence2, (String)"other");
        Intrinsics.checkParameterIsNotNull(function2, (String)"transform");
        int n = Math.min(charSequence.length(), charSequence2.length());
        ArrayList<Object> arrayList = new ArrayList<Object>(n);
        for (int i = 0; i < n; ++i) {
            arrayList.add(function2.invoke((Object)Character.valueOf(charSequence.charAt(i)), (Object)Character.valueOf(charSequence2.charAt(i))));
        }
        return arrayList;
    }

    @SinceKotlin(version="1.2")
    @NotNull
    public static final List<Pair<Character, Character>> zipWithNext(@NotNull CharSequence charSequence) {
        Intrinsics.checkParameterIsNotNull((Object)charSequence, (String)"$receiver");
        int n = charSequence.length() - 1;
        if (n < 1) {
            return CollectionsKt.emptyList();
        }
        ArrayList<Pair> arrayList = new ArrayList<Pair>(n);
        int n2 = 0;
        while (n2 < n) {
            char c = charSequence.charAt(n2);
            arrayList.add(TuplesKt.to((Object)Character.valueOf(c), (Object)Character.valueOf(charSequence.charAt(++n2))));
        }
        return arrayList;
    }

    @SinceKotlin(version="1.2")
    @NotNull
    public static final <R> List<R> zipWithNext(@NotNull CharSequence charSequence, @NotNull Function2<? super Character, ? super Character, ? extends R> function2) {
        Intrinsics.checkParameterIsNotNull((Object)charSequence, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(function2, (String)"transform");
        int n = charSequence.length() - 1;
        if (n < 1) {
            return CollectionsKt.emptyList();
        }
        ArrayList<Object> arrayList = new ArrayList<Object>(n);
        int n2 = 0;
        while (n2 < n) {
            char c = charSequence.charAt(n2);
            arrayList.add(function2.invoke((Object)Character.valueOf(c), (Object)Character.valueOf(charSequence.charAt(++n2))));
        }
        return arrayList;
    }
}

