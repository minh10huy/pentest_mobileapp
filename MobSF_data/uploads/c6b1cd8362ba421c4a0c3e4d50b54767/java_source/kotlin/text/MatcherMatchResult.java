/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  kotlin.Metadata
 *  kotlin.jvm.internal.Intrinsics
 *  kotlin.text.MatcherMatchResult$groupValues
 *  kotlin.text.MatcherMatchResult$groups
 *  org.jetbrains.annotations.NotNull
 *  org.jetbrains.annotations.Nullable
 */
package kotlin.text;

import java.util.List;
import java.util.regex.Matcher;
import kotlin.Metadata;
import kotlin.collections.AbstractList;
import kotlin.jvm.internal.Intrinsics;
import kotlin.ranges.IntRange;
import kotlin.text.MatchGroupCollection;
import kotlin.text.MatchNamedGroupCollection;
import kotlin.text.MatchResult;
import kotlin.text.MatcherMatchResult;
import kotlin.text.RegexKt;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

@Metadata(bv={1, 0, 2}, d1={"\u0000<\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\r\n\u0002\b\u0002\n\u0002\u0010 \n\u0002\u0010\u000e\n\u0002\b\u0004\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0007\b\u0002\u0018\u00002\u00020\u0001B\u0015\u0012\u0006\u0010\u0002\u001a\u00020\u0003\u0012\u0006\u0010\u0004\u001a\u00020\u0005\u00a2\u0006\u0002\u0010\u0006J\n\u0010\u001b\u001a\u0004\u0018\u00010\u0001H\u0016R\u001a\u0010\u0007\u001a\b\u0012\u0004\u0012\u00020\t0\b8VX\u0096\u0004\u00a2\u0006\u0006\u001a\u0004\b\n\u0010\u000bR\u0016\u0010\f\u001a\n\u0012\u0004\u0012\u00020\t\u0018\u00010\bX\u0082\u000e\u00a2\u0006\u0002\n\u0000R\u0014\u0010\r\u001a\u00020\u000eX\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\u000f\u0010\u0010R\u000e\u0010\u0004\u001a\u00020\u0005X\u0082\u0004\u00a2\u0006\u0002\n\u0000R\u0016\u0010\u0011\u001a\n \u0013*\u0004\u0018\u00010\u00120\u0012X\u0082\u0004\u00a2\u0006\u0002\n\u0000R\u000e\u0010\u0002\u001a\u00020\u0003X\u0082\u0004\u00a2\u0006\u0002\n\u0000R\u0014\u0010\u0014\u001a\u00020\u00158VX\u0096\u0004\u00a2\u0006\u0006\u001a\u0004\b\u0016\u0010\u0017R\u0014\u0010\u0018\u001a\u00020\t8VX\u0096\u0004\u00a2\u0006\u0006\u001a\u0004\b\u0019\u0010\u001a\u00a8\u0006\u001c"}, d2={"Lkotlin/text/MatcherMatchResult;", "Lkotlin/text/MatchResult;", "matcher", "Ljava/util/regex/Matcher;", "input", "", "(Ljava/util/regex/Matcher;Ljava/lang/CharSequence;)V", "groupValues", "", "", "getGroupValues", "()Ljava/util/List;", "groupValues_", "groups", "Lkotlin/text/MatchGroupCollection;", "getGroups", "()Lkotlin/text/MatchGroupCollection;", "matchResult", "Ljava/util/regex/MatchResult;", "kotlin.jvm.PlatformType", "range", "Lkotlin/ranges/IntRange;", "getRange", "()Lkotlin/ranges/IntRange;", "value", "getValue", "()Ljava/lang/String;", "next", "kotlin-stdlib"}, k=1, mv={1, 1, 10})
final class MatcherMatchResult
implements MatchResult {
    private List<String> groupValues_;
    @NotNull
    private final MatchGroupCollection groups;
    private final CharSequence input;
    private final java.util.regex.MatchResult matchResult;
    private final Matcher matcher;

    public MatcherMatchResult(@NotNull Matcher matcher, @NotNull CharSequence charSequence) {
        Intrinsics.checkParameterIsNotNull((Object)matcher, (String)"matcher");
        Intrinsics.checkParameterIsNotNull((Object)charSequence, (String)"input");
        this.matcher = matcher;
        this.input = charSequence;
        this.matchResult = this.matcher.toMatchResult();
        this.groups = new MatchNamedGroupCollection(this){
            final /* synthetic */ MatcherMatchResult this$0;
            {
                this.this$0 = matcherMatchResult;
            }

            @Nullable
            public kotlin.text.MatchGroup get(int n) {
                Object object = MatcherMatchResult.access$getMatchResult$p(this.this$0);
                Intrinsics.checkExpressionValueIsNotNull((Object)object, (String)"matchResult");
                object = RegexKt.access$range((java.util.regex.MatchResult)object, n);
                if (object.getStart().intValue() >= 0) {
                    String string2 = MatcherMatchResult.access$getMatchResult$p(this.this$0).group(n);
                    Intrinsics.checkExpressionValueIsNotNull((Object)string2, (String)"matchResult.group(index)");
                    return new kotlin.text.MatchGroup(string2, (IntRange)object);
                }
                return null;
            }

            @Nullable
            public kotlin.text.MatchGroup get(@NotNull String string2) {
                Intrinsics.checkParameterIsNotNull((Object)string2, (String)"name");
                kotlin.internal.PlatformImplementations platformImplementations = kotlin.internal.PlatformImplementationsKt.IMPLEMENTATIONS;
                java.util.regex.MatchResult matchResult = MatcherMatchResult.access$getMatchResult$p(this.this$0);
                Intrinsics.checkExpressionValueIsNotNull((Object)matchResult, (String)"matchResult");
                return platformImplementations.getMatchResultNamedGroup(matchResult, string2);
            }

            public int getSize() {
                return MatcherMatchResult.access$getMatchResult$p(this.this$0).groupCount() + 1;
            }

            public boolean isEmpty() {
                return false;
            }

            @NotNull
            public java.util.Iterator<kotlin.text.MatchGroup> iterator() {
                return kotlin.sequences.SequencesKt.map(kotlin.collections.CollectionsKt.asSequence(kotlin.collections.CollectionsKt.getIndices((java.util.Collection)this)), (kotlin.jvm.functions.Function1)new kotlin.jvm.functions.Function1<java.lang.Integer, kotlin.text.MatchGroup>(this){
                    final /* synthetic */ groups this$0;
                    {
                        this.this$0 = var1_1;
                        super(1);
                    }

                    @Nullable
                    public final kotlin.text.MatchGroup invoke(int n) {
                        return this.this$0.get(n);
                    }
                }).iterator();
            }
        };
    }

    public static final /* synthetic */ java.util.regex.MatchResult access$getMatchResult$p(MatcherMatchResult matcherMatchResult) {
        return matcherMatchResult.matchResult;
    }

    @NotNull
    @Override
    public MatchResult.Destructured getDestructured() {
        return MatchResult.DefaultImpls.getDestructured(this);
    }

    @NotNull
    @Override
    public List<String> getGroupValues() {
        List<String> list;
        if (this.groupValues_ == null) {
            this.groupValues_ = new AbstractList<String>(this){
                final /* synthetic */ MatcherMatchResult this$0;
                {
                    this.this$0 = matcherMatchResult;
                }

                @NotNull
                public String get(int n) {
                    String string2 = MatcherMatchResult.access$getMatchResult$p(this.this$0).group(n);
                    if (string2 != null) {
                        return string2;
                    }
                    return "";
                }

                public int getSize() {
                    return MatcherMatchResult.access$getMatchResult$p(this.this$0).groupCount() + 1;
                }
            };
        }
        if ((list = this.groupValues_) == null) {
            Intrinsics.throwNpe();
        }
        return list;
    }

    @NotNull
    @Override
    public MatchGroupCollection getGroups() {
        return this.groups;
    }

    @NotNull
    @Override
    public IntRange getRange() {
        java.util.regex.MatchResult matchResult = this.matchResult;
        Intrinsics.checkExpressionValueIsNotNull((Object)matchResult, (String)"matchResult");
        return RegexKt.access$range(matchResult);
    }

    @NotNull
    @Override
    public String getValue() {
        String string2 = this.matchResult.group();
        Intrinsics.checkExpressionValueIsNotNull((Object)string2, (String)"matchResult.group()");
        return string2;
    }

    @Nullable
    @Override
    public MatchResult next() {
        int n = this.matchResult.end();
        int n2 = this.matchResult.end() == this.matchResult.start() ? 1 : 0;
        if ((n2 = n + n2) <= this.input.length()) {
            return RegexKt.access$findNext(this.matcher, n2, this.input);
        }
        return null;
    }
}

