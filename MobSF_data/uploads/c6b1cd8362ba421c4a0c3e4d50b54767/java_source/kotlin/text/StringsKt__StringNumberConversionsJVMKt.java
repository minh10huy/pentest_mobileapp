/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  kotlin.text.CharsKt
 *  kotlin.text.Regex
 *  kotlin.text.ScreenFloatValueRegEx
 *  kotlin.text.StringsKt
 */
package kotlin.text;

import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.MathContext;
import kotlin.Metadata;
import kotlin.SinceKotlin;
import kotlin.internal.InlineOnly;
import kotlin.jvm.functions.Function1;
import kotlin.jvm.internal.Intrinsics;
import kotlin.text.CharsKt;
import kotlin.text.Regex;
import kotlin.text.ScreenFloatValueRegEx;
import kotlin.text.StringsKt;
import kotlin.text.StringsKt__StringBuilderKt;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

@Metadata(bv={1, 0, 2}, d1={"\u0000X\n\u0002\b\u0003\n\u0002\u0010\u000e\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\b\n\u0002\b\u0002\n\u0002\u0010\u000b\n\u0000\n\u0002\u0010\u0005\n\u0000\n\u0002\u0010\u0006\n\u0002\b\u0003\n\u0002\u0010\u0007\n\u0002\b\u0004\n\u0002\u0010\t\n\u0000\n\u0002\u0010\n\n\u0002\b\u0002\u001a4\u0010\u0000\u001a\u0004\u0018\u0001H\u0001\"\u0004\b\u0000\u0010\u00012\u0006\u0010\u0002\u001a\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u00020\u0003\u0012\u0004\u0012\u0002H\u00010\u0005H\u0082\b\u00a2\u0006\u0004\b\u0006\u0010\u0007\u001a\r\u0010\b\u001a\u00020\t*\u00020\u0003H\u0087\b\u001a\u0015\u0010\b\u001a\u00020\t*\u00020\u00032\u0006\u0010\n\u001a\u00020\u000bH\u0087\b\u001a\u000e\u0010\f\u001a\u0004\u0018\u00010\t*\u00020\u0003H\u0007\u001a\u0016\u0010\f\u001a\u0004\u0018\u00010\t*\u00020\u00032\u0006\u0010\n\u001a\u00020\u000bH\u0007\u001a\r\u0010\r\u001a\u00020\u000e*\u00020\u0003H\u0087\b\u001a\u0015\u0010\r\u001a\u00020\u000e*\u00020\u00032\u0006\u0010\u000f\u001a\u00020\u0010H\u0087\b\u001a\u000e\u0010\u0011\u001a\u0004\u0018\u00010\u000e*\u00020\u0003H\u0007\u001a\u0016\u0010\u0011\u001a\u0004\u0018\u00010\u000e*\u00020\u00032\u0006\u0010\u000f\u001a\u00020\u0010H\u0007\u001a\r\u0010\u0012\u001a\u00020\u0013*\u00020\u0003H\u0087\b\u001a\r\u0010\u0014\u001a\u00020\u0015*\u00020\u0003H\u0087\b\u001a\u0015\u0010\u0014\u001a\u00020\u0015*\u00020\u00032\u0006\u0010\u000f\u001a\u00020\u0010H\u0087\b\u001a\r\u0010\u0016\u001a\u00020\u0017*\u00020\u0003H\u0087\b\u001a\u0013\u0010\u0018\u001a\u0004\u0018\u00010\u0017*\u00020\u0003H\u0007\u00a2\u0006\u0002\u0010\u0019\u001a\r\u0010\u001a\u001a\u00020\u001b*\u00020\u0003H\u0087\b\u001a\u0013\u0010\u001c\u001a\u0004\u0018\u00010\u001b*\u00020\u0003H\u0007\u00a2\u0006\u0002\u0010\u001d\u001a\r\u0010\u001e\u001a\u00020\u0010*\u00020\u0003H\u0087\b\u001a\u0015\u0010\u001e\u001a\u00020\u0010*\u00020\u00032\u0006\u0010\u000f\u001a\u00020\u0010H\u0087\b\u001a\r\u0010\u001f\u001a\u00020 *\u00020\u0003H\u0087\b\u001a\u0015\u0010\u001f\u001a\u00020 *\u00020\u00032\u0006\u0010\u000f\u001a\u00020\u0010H\u0087\b\u001a\r\u0010!\u001a\u00020\"*\u00020\u0003H\u0087\b\u001a\u0015\u0010!\u001a\u00020\"*\u00020\u00032\u0006\u0010\u000f\u001a\u00020\u0010H\u0087\b\u001a\u0015\u0010#\u001a\u00020\u0003*\u00020\u00152\u0006\u0010\u000f\u001a\u00020\u0010H\u0087\b\u001a\u0015\u0010#\u001a\u00020\u0003*\u00020\u00102\u0006\u0010\u000f\u001a\u00020\u0010H\u0087\b\u001a\u0015\u0010#\u001a\u00020\u0003*\u00020 2\u0006\u0010\u000f\u001a\u00020\u0010H\u0087\b\u001a\u0015\u0010#\u001a\u00020\u0003*\u00020\"2\u0006\u0010\u000f\u001a\u00020\u0010H\u0087\b\u00a8\u0006$"}, d2={"screenFloatValue", "T", "str", "", "parse", "Lkotlin/Function1;", "screenFloatValue$StringsKt__StringNumberConversionsJVMKt", "(Ljava/lang/String;Lkotlin/jvm/functions/Function1;)Ljava/lang/Object;", "toBigDecimal", "Ljava/math/BigDecimal;", "mathContext", "Ljava/math/MathContext;", "toBigDecimalOrNull", "toBigInteger", "Ljava/math/BigInteger;", "radix", "", "toBigIntegerOrNull", "toBoolean", "", "toByte", "", "toDouble", "", "toDoubleOrNull", "(Ljava/lang/String;)Ljava/lang/Double;", "toFloat", "", "toFloatOrNull", "(Ljava/lang/String;)Ljava/lang/Float;", "toInt", "toLong", "", "toShort", "", "toString", "kotlin-stdlib"}, k=5, mv={1, 1, 10}, xi=1, xs="kotlin/text/StringsKt")
class StringsKt__StringNumberConversionsJVMKt
extends StringsKt__StringBuilderKt {
    private static final <T> T screenFloatValue$StringsKt__StringNumberConversionsJVMKt(String string2, Function1<? super String, ? extends T> function1) {
        T t;
        block2 : {
            t = null;
            try {
                if (!ScreenFloatValueRegEx.value.matches((CharSequence)string2)) break block2;
                t = function1.invoke(string2);
            }
            catch (NumberFormatException numberFormatException) {
                return null;
            }
        }
        return t;
    }

    @SinceKotlin(version="1.2")
    @InlineOnly
    private static final BigDecimal toBigDecimal(@NotNull String string2) {
        return new BigDecimal(string2);
    }

    @SinceKotlin(version="1.2")
    @InlineOnly
    private static final BigDecimal toBigDecimal(@NotNull String string2, MathContext mathContext) {
        return new BigDecimal(string2, mathContext);
    }

    @SinceKotlin(version="1.2")
    @Nullable
    public static final BigDecimal toBigDecimalOrNull(@NotNull String string2) {
        Intrinsics.checkParameterIsNotNull(string2, "$receiver");
        BigDecimal bigDecimal = null;
        try {
            if (ScreenFloatValueRegEx.value.matches((CharSequence)string2)) {
                bigDecimal = new BigDecimal(string2);
            }
            return bigDecimal;
        }
        catch (NumberFormatException numberFormatException) {
            return null;
        }
    }

    @SinceKotlin(version="1.2")
    @Nullable
    public static final BigDecimal toBigDecimalOrNull(@NotNull String string2, @NotNull MathContext mathContext) {
        Intrinsics.checkParameterIsNotNull(string2, "$receiver");
        Intrinsics.checkParameterIsNotNull(mathContext, "mathContext");
        BigDecimal bigDecimal = null;
        try {
            if (ScreenFloatValueRegEx.value.matches((CharSequence)string2)) {
                bigDecimal = new BigDecimal(string2, mathContext);
            }
            return bigDecimal;
        }
        catch (NumberFormatException numberFormatException) {
            return null;
        }
    }

    @SinceKotlin(version="1.2")
    @InlineOnly
    private static final BigInteger toBigInteger(@NotNull String string2) {
        return new BigInteger(string2);
    }

    @SinceKotlin(version="1.2")
    @InlineOnly
    private static final BigInteger toBigInteger(@NotNull String string2, int n) {
        return new BigInteger(string2, CharsKt.checkRadix((int)n));
    }

    @SinceKotlin(version="1.2")
    @Nullable
    public static final BigInteger toBigIntegerOrNull(@NotNull String string2) {
        Intrinsics.checkParameterIsNotNull(string2, "$receiver");
        return StringsKt.toBigIntegerOrNull((String)string2, (int)10);
    }

    @SinceKotlin(version="1.2")
    @Nullable
    public static final BigInteger toBigIntegerOrNull(@NotNull String string2, int n) {
        block7 : {
            Intrinsics.checkParameterIsNotNull(string2, "$receiver");
            CharsKt.checkRadix((int)n);
            int n2 = string2.length();
            int n3 = 0;
            switch (n2) {
                default: {
                    if (string2.charAt(0) != '-') break;
                    n3 = 1;
                    break;
                }
                case 1: {
                    if (CharsKt.digitOf((char)string2.charAt(0), (int)n) < 0) {
                        return null;
                    }
                    break block7;
                }
                case 0: {
                    return null;
                }
            }
            while (n3 < n2) {
                if (CharsKt.digitOf((char)string2.charAt(n3), (int)n) < 0) {
                    return null;
                }
                ++n3;
            }
        }
        return new BigInteger(string2, CharsKt.checkRadix((int)n));
    }

    @InlineOnly
    private static final boolean toBoolean(@NotNull String string2) {
        return Boolean.parseBoolean(string2);
    }

    @InlineOnly
    private static final byte toByte(@NotNull String string2) {
        return Byte.parseByte(string2);
    }

    @SinceKotlin(version="1.1")
    @InlineOnly
    private static final byte toByte(@NotNull String string2, int n) {
        return Byte.parseByte(string2, CharsKt.checkRadix((int)n));
    }

    @InlineOnly
    private static final double toDouble(@NotNull String string2) {
        return Double.parseDouble(string2);
    }

    @SinceKotlin(version="1.1")
    @Nullable
    public static final Double toDoubleOrNull(@NotNull String string2) {
        Double d;
        block2 : {
            double d2;
            Intrinsics.checkParameterIsNotNull(string2, "$receiver");
            d = null;
            try {
                if (!ScreenFloatValueRegEx.value.matches((CharSequence)string2)) break block2;
                d2 = Double.parseDouble(string2);
            }
            catch (NumberFormatException numberFormatException) {
                return null;
            }
            d = d2;
        }
        return d;
    }

    @InlineOnly
    private static final float toFloat(@NotNull String string2) {
        return Float.parseFloat(string2);
    }

    @SinceKotlin(version="1.1")
    @Nullable
    public static final Float toFloatOrNull(@NotNull String string2) {
        Float f;
        block2 : {
            float f2;
            Intrinsics.checkParameterIsNotNull(string2, "$receiver");
            f = null;
            try {
                if (!ScreenFloatValueRegEx.value.matches((CharSequence)string2)) break block2;
                f2 = Float.parseFloat(string2);
            }
            catch (NumberFormatException numberFormatException) {
                return null;
            }
            f = Float.valueOf(f2);
        }
        return f;
    }

    @InlineOnly
    private static final int toInt(@NotNull String string2) {
        return Integer.parseInt(string2);
    }

    @SinceKotlin(version="1.1")
    @InlineOnly
    private static final int toInt(@NotNull String string2, int n) {
        return Integer.parseInt(string2, CharsKt.checkRadix((int)n));
    }

    @InlineOnly
    private static final long toLong(@NotNull String string2) {
        return Long.parseLong(string2);
    }

    @SinceKotlin(version="1.1")
    @InlineOnly
    private static final long toLong(@NotNull String string2, int n) {
        return Long.parseLong(string2, CharsKt.checkRadix((int)n));
    }

    @InlineOnly
    private static final short toShort(@NotNull String string2) {
        return Short.parseShort(string2);
    }

    @SinceKotlin(version="1.1")
    @InlineOnly
    private static final short toShort(@NotNull String string2, int n) {
        return Short.parseShort(string2, CharsKt.checkRadix((int)n));
    }

    @SinceKotlin(version="1.1")
    @InlineOnly
    private static final String toString(byte by, int n) {
        String string2 = Integer.toString(by, CharsKt.checkRadix((int)CharsKt.checkRadix((int)n)));
        Intrinsics.checkExpressionValueIsNotNull(string2, "java.lang.Integer.toStri\u2026(this, checkRadix(radix))");
        return string2;
    }

    @SinceKotlin(version="1.1")
    @InlineOnly
    private static final String toString(int n, int n2) {
        String string2 = Integer.toString(n, CharsKt.checkRadix((int)n2));
        Intrinsics.checkExpressionValueIsNotNull(string2, "java.lang.Integer.toStri\u2026(this, checkRadix(radix))");
        return string2;
    }

    @SinceKotlin(version="1.1")
    @InlineOnly
    private static final String toString(long l, int n) {
        String string2 = Long.toString(l, CharsKt.checkRadix((int)n));
        Intrinsics.checkExpressionValueIsNotNull(string2, "java.lang.Long.toString(this, checkRadix(radix))");
        return string2;
    }

    @SinceKotlin(version="1.1")
    @InlineOnly
    private static final String toString(short s, int n) {
        String string2 = Integer.toString(s, CharsKt.checkRadix((int)CharsKt.checkRadix((int)n)));
        Intrinsics.checkExpressionValueIsNotNull(string2, "java.lang.Integer.toStri\u2026(this, checkRadix(radix))");
        return string2;
    }
}

