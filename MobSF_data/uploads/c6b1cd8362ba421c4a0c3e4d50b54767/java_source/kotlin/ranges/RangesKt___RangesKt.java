/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  kotlin.Metadata
 *  kotlin.SinceKotlin
 *  kotlin.jvm.JvmName
 *  kotlin.jvm.internal.Intrinsics
 *  org.jetbrains.annotations.NotNull
 *  org.jetbrains.annotations.Nullable
 */
package kotlin.ranges;

import kotlin.Metadata;
import kotlin.SinceKotlin;
import kotlin.jvm.JvmName;
import kotlin.jvm.internal.Intrinsics;
import kotlin.ranges.CharProgression;
import kotlin.ranges.CharRange;
import kotlin.ranges.ClosedFloatingPointRange;
import kotlin.ranges.ClosedRange;
import kotlin.ranges.IntProgression;
import kotlin.ranges.IntRange;
import kotlin.ranges.LongProgression;
import kotlin.ranges.LongRange;
import kotlin.ranges.RangesKt;
import kotlin.ranges.RangesKt__RangesKt;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

@Metadata(bv={1, 0, 2}, d1={"\u0000b\n\u0002\b\u0002\n\u0002\u0010\u000f\n\u0002\b\u0002\n\u0002\u0010\u0005\n\u0002\u0010\u0006\n\u0002\u0010\u0007\n\u0002\u0010\b\n\u0002\u0010\t\n\u0002\u0010\n\n\u0002\b\u0005\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0010\u000b\n\u0002\b\b\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0010\f\n\u0002\b\u0015\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\u001a'\u0010\u0000\u001a\u0002H\u0001\"\u000e\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u0002H\u00010\u0002*\u0002H\u00012\u0006\u0010\u0003\u001a\u0002H\u0001\u00a2\u0006\u0002\u0010\u0004\u001a\u0012\u0010\u0000\u001a\u00020\u0005*\u00020\u00052\u0006\u0010\u0003\u001a\u00020\u0005\u001a\u0012\u0010\u0000\u001a\u00020\u0006*\u00020\u00062\u0006\u0010\u0003\u001a\u00020\u0006\u001a\u0012\u0010\u0000\u001a\u00020\u0007*\u00020\u00072\u0006\u0010\u0003\u001a\u00020\u0007\u001a\u0012\u0010\u0000\u001a\u00020\b*\u00020\b2\u0006\u0010\u0003\u001a\u00020\b\u001a\u0012\u0010\u0000\u001a\u00020\t*\u00020\t2\u0006\u0010\u0003\u001a\u00020\t\u001a\u0012\u0010\u0000\u001a\u00020\n*\u00020\n2\u0006\u0010\u0003\u001a\u00020\n\u001a'\u0010\u000b\u001a\u0002H\u0001\"\u000e\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u0002H\u00010\u0002*\u0002H\u00012\u0006\u0010\f\u001a\u0002H\u0001\u00a2\u0006\u0002\u0010\u0004\u001a\u0012\u0010\u000b\u001a\u00020\u0005*\u00020\u00052\u0006\u0010\f\u001a\u00020\u0005\u001a\u0012\u0010\u000b\u001a\u00020\u0006*\u00020\u00062\u0006\u0010\f\u001a\u00020\u0006\u001a\u0012\u0010\u000b\u001a\u00020\u0007*\u00020\u00072\u0006\u0010\f\u001a\u00020\u0007\u001a\u0012\u0010\u000b\u001a\u00020\b*\u00020\b2\u0006\u0010\f\u001a\u00020\b\u001a\u0012\u0010\u000b\u001a\u00020\t*\u00020\t2\u0006\u0010\f\u001a\u00020\t\u001a\u0012\u0010\u000b\u001a\u00020\n*\u00020\n2\u0006\u0010\f\u001a\u00020\n\u001a3\u0010\r\u001a\u0002H\u0001\"\u000e\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u0002H\u00010\u0002*\u0002H\u00012\b\u0010\u0003\u001a\u0004\u0018\u0001H\u00012\b\u0010\f\u001a\u0004\u0018\u0001H\u0001\u00a2\u0006\u0002\u0010\u000e\u001a/\u0010\r\u001a\u0002H\u0001\"\u000e\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u0002H\u00010\u0002*\u0002H\u00012\f\u0010\u000f\u001a\b\u0012\u0004\u0012\u0002H\u00010\u0010H\u0007\u00a2\u0006\u0002\u0010\u0011\u001a-\u0010\r\u001a\u0002H\u0001\"\u000e\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u0002H\u00010\u0002*\u0002H\u00012\f\u0010\u000f\u001a\b\u0012\u0004\u0012\u0002H\u00010\u0012\u00a2\u0006\u0002\u0010\u0013\u001a\u001a\u0010\r\u001a\u00020\u0005*\u00020\u00052\u0006\u0010\u0003\u001a\u00020\u00052\u0006\u0010\f\u001a\u00020\u0005\u001a\u001a\u0010\r\u001a\u00020\u0006*\u00020\u00062\u0006\u0010\u0003\u001a\u00020\u00062\u0006\u0010\f\u001a\u00020\u0006\u001a\u001a\u0010\r\u001a\u00020\u0007*\u00020\u00072\u0006\u0010\u0003\u001a\u00020\u00072\u0006\u0010\f\u001a\u00020\u0007\u001a\u001a\u0010\r\u001a\u00020\b*\u00020\b2\u0006\u0010\u0003\u001a\u00020\b2\u0006\u0010\f\u001a\u00020\b\u001a\u0018\u0010\r\u001a\u00020\b*\u00020\b2\f\u0010\u000f\u001a\b\u0012\u0004\u0012\u00020\b0\u0012\u001a\u001a\u0010\r\u001a\u00020\t*\u00020\t2\u0006\u0010\u0003\u001a\u00020\t2\u0006\u0010\f\u001a\u00020\t\u001a\u0018\u0010\r\u001a\u00020\t*\u00020\t2\f\u0010\u000f\u001a\b\u0012\u0004\u0012\u00020\t0\u0012\u001a\u001a\u0010\r\u001a\u00020\n*\u00020\n2\u0006\u0010\u0003\u001a\u00020\n2\u0006\u0010\f\u001a\u00020\n\u001a \u0010\u0014\u001a\u00020\u0015*\b\u0012\u0004\u0012\u00020\u00050\u00122\u0006\u0010\u0016\u001a\u00020\u0006H\u0087\u0002\u00a2\u0006\u0002\b\u0017\u001a \u0010\u0014\u001a\u00020\u0015*\b\u0012\u0004\u0012\u00020\u00050\u00122\u0006\u0010\u0016\u001a\u00020\u0007H\u0087\u0002\u00a2\u0006\u0002\b\u0017\u001a \u0010\u0014\u001a\u00020\u0015*\b\u0012\u0004\u0012\u00020\u00050\u00122\u0006\u0010\u0016\u001a\u00020\bH\u0087\u0002\u00a2\u0006\u0002\b\u0017\u001a \u0010\u0014\u001a\u00020\u0015*\b\u0012\u0004\u0012\u00020\u00050\u00122\u0006\u0010\u0016\u001a\u00020\tH\u0087\u0002\u00a2\u0006\u0002\b\u0017\u001a \u0010\u0014\u001a\u00020\u0015*\b\u0012\u0004\u0012\u00020\u00050\u00122\u0006\u0010\u0016\u001a\u00020\nH\u0087\u0002\u00a2\u0006\u0002\b\u0017\u001a \u0010\u0014\u001a\u00020\u0015*\b\u0012\u0004\u0012\u00020\u00060\u00122\u0006\u0010\u0016\u001a\u00020\u0005H\u0087\u0002\u00a2\u0006\u0002\b\u0018\u001a \u0010\u0014\u001a\u00020\u0015*\b\u0012\u0004\u0012\u00020\u00060\u00122\u0006\u0010\u0016\u001a\u00020\u0007H\u0087\u0002\u00a2\u0006\u0002\b\u0018\u001a \u0010\u0014\u001a\u00020\u0015*\b\u0012\u0004\u0012\u00020\u00060\u00122\u0006\u0010\u0016\u001a\u00020\bH\u0087\u0002\u00a2\u0006\u0002\b\u0018\u001a \u0010\u0014\u001a\u00020\u0015*\b\u0012\u0004\u0012\u00020\u00060\u00122\u0006\u0010\u0016\u001a\u00020\tH\u0087\u0002\u00a2\u0006\u0002\b\u0018\u001a \u0010\u0014\u001a\u00020\u0015*\b\u0012\u0004\u0012\u00020\u00060\u00122\u0006\u0010\u0016\u001a\u00020\nH\u0087\u0002\u00a2\u0006\u0002\b\u0018\u001a \u0010\u0014\u001a\u00020\u0015*\b\u0012\u0004\u0012\u00020\u00070\u00122\u0006\u0010\u0016\u001a\u00020\u0005H\u0087\u0002\u00a2\u0006\u0002\b\u0019\u001a \u0010\u0014\u001a\u00020\u0015*\b\u0012\u0004\u0012\u00020\u00070\u00122\u0006\u0010\u0016\u001a\u00020\u0006H\u0087\u0002\u00a2\u0006\u0002\b\u0019\u001a \u0010\u0014\u001a\u00020\u0015*\b\u0012\u0004\u0012\u00020\u00070\u00122\u0006\u0010\u0016\u001a\u00020\bH\u0087\u0002\u00a2\u0006\u0002\b\u0019\u001a \u0010\u0014\u001a\u00020\u0015*\b\u0012\u0004\u0012\u00020\u00070\u00122\u0006\u0010\u0016\u001a\u00020\tH\u0087\u0002\u00a2\u0006\u0002\b\u0019\u001a \u0010\u0014\u001a\u00020\u0015*\b\u0012\u0004\u0012\u00020\u00070\u00122\u0006\u0010\u0016\u001a\u00020\nH\u0087\u0002\u00a2\u0006\u0002\b\u0019\u001a \u0010\u0014\u001a\u00020\u0015*\b\u0012\u0004\u0012\u00020\b0\u00122\u0006\u0010\u0016\u001a\u00020\u0005H\u0087\u0002\u00a2\u0006\u0002\b\u001a\u001a \u0010\u0014\u001a\u00020\u0015*\b\u0012\u0004\u0012\u00020\b0\u00122\u0006\u0010\u0016\u001a\u00020\u0006H\u0087\u0002\u00a2\u0006\u0002\b\u001a\u001a \u0010\u0014\u001a\u00020\u0015*\b\u0012\u0004\u0012\u00020\b0\u00122\u0006\u0010\u0016\u001a\u00020\u0007H\u0087\u0002\u00a2\u0006\u0002\b\u001a\u001a \u0010\u0014\u001a\u00020\u0015*\b\u0012\u0004\u0012\u00020\b0\u00122\u0006\u0010\u0016\u001a\u00020\tH\u0087\u0002\u00a2\u0006\u0002\b\u001a\u001a \u0010\u0014\u001a\u00020\u0015*\b\u0012\u0004\u0012\u00020\b0\u00122\u0006\u0010\u0016\u001a\u00020\nH\u0087\u0002\u00a2\u0006\u0002\b\u001a\u001a \u0010\u0014\u001a\u00020\u0015*\b\u0012\u0004\u0012\u00020\t0\u00122\u0006\u0010\u0016\u001a\u00020\u0005H\u0087\u0002\u00a2\u0006\u0002\b\u001b\u001a \u0010\u0014\u001a\u00020\u0015*\b\u0012\u0004\u0012\u00020\t0\u00122\u0006\u0010\u0016\u001a\u00020\u0006H\u0087\u0002\u00a2\u0006\u0002\b\u001b\u001a \u0010\u0014\u001a\u00020\u0015*\b\u0012\u0004\u0012\u00020\t0\u00122\u0006\u0010\u0016\u001a\u00020\u0007H\u0087\u0002\u00a2\u0006\u0002\b\u001b\u001a \u0010\u0014\u001a\u00020\u0015*\b\u0012\u0004\u0012\u00020\t0\u00122\u0006\u0010\u0016\u001a\u00020\bH\u0087\u0002\u00a2\u0006\u0002\b\u001b\u001a \u0010\u0014\u001a\u00020\u0015*\b\u0012\u0004\u0012\u00020\t0\u00122\u0006\u0010\u0016\u001a\u00020\nH\u0087\u0002\u00a2\u0006\u0002\b\u001b\u001a \u0010\u0014\u001a\u00020\u0015*\b\u0012\u0004\u0012\u00020\n0\u00122\u0006\u0010\u0016\u001a\u00020\u0005H\u0087\u0002\u00a2\u0006\u0002\b\u001c\u001a \u0010\u0014\u001a\u00020\u0015*\b\u0012\u0004\u0012\u00020\n0\u00122\u0006\u0010\u0016\u001a\u00020\u0006H\u0087\u0002\u00a2\u0006\u0002\b\u001c\u001a \u0010\u0014\u001a\u00020\u0015*\b\u0012\u0004\u0012\u00020\n0\u00122\u0006\u0010\u0016\u001a\u00020\u0007H\u0087\u0002\u00a2\u0006\u0002\b\u001c\u001a \u0010\u0014\u001a\u00020\u0015*\b\u0012\u0004\u0012\u00020\n0\u00122\u0006\u0010\u0016\u001a\u00020\bH\u0087\u0002\u00a2\u0006\u0002\b\u001c\u001a \u0010\u0014\u001a\u00020\u0015*\b\u0012\u0004\u0012\u00020\n0\u00122\u0006\u0010\u0016\u001a\u00020\tH\u0087\u0002\u00a2\u0006\u0002\b\u001c\u001a\u0015\u0010\u001d\u001a\u00020\u001e*\u00020\u00052\u0006\u0010\u001f\u001a\u00020\u0005H\u0086\u0004\u001a\u0015\u0010\u001d\u001a\u00020\u001e*\u00020\u00052\u0006\u0010\u001f\u001a\u00020\bH\u0086\u0004\u001a\u0015\u0010\u001d\u001a\u00020 *\u00020\u00052\u0006\u0010\u001f\u001a\u00020\tH\u0086\u0004\u001a\u0015\u0010\u001d\u001a\u00020\u001e*\u00020\u00052\u0006\u0010\u001f\u001a\u00020\nH\u0086\u0004\u001a\u0015\u0010\u001d\u001a\u00020!*\u00020\"2\u0006\u0010\u001f\u001a\u00020\"H\u0086\u0004\u001a\u0015\u0010\u001d\u001a\u00020\u001e*\u00020\b2\u0006\u0010\u001f\u001a\u00020\u0005H\u0086\u0004\u001a\u0015\u0010\u001d\u001a\u00020\u001e*\u00020\b2\u0006\u0010\u001f\u001a\u00020\bH\u0086\u0004\u001a\u0015\u0010\u001d\u001a\u00020 *\u00020\b2\u0006\u0010\u001f\u001a\u00020\tH\u0086\u0004\u001a\u0015\u0010\u001d\u001a\u00020\u001e*\u00020\b2\u0006\u0010\u001f\u001a\u00020\nH\u0086\u0004\u001a\u0015\u0010\u001d\u001a\u00020 *\u00020\t2\u0006\u0010\u001f\u001a\u00020\u0005H\u0086\u0004\u001a\u0015\u0010\u001d\u001a\u00020 *\u00020\t2\u0006\u0010\u001f\u001a\u00020\bH\u0086\u0004\u001a\u0015\u0010\u001d\u001a\u00020 *\u00020\t2\u0006\u0010\u001f\u001a\u00020\tH\u0086\u0004\u001a\u0015\u0010\u001d\u001a\u00020 *\u00020\t2\u0006\u0010\u001f\u001a\u00020\nH\u0086\u0004\u001a\u0015\u0010\u001d\u001a\u00020\u001e*\u00020\n2\u0006\u0010\u001f\u001a\u00020\u0005H\u0086\u0004\u001a\u0015\u0010\u001d\u001a\u00020\u001e*\u00020\n2\u0006\u0010\u001f\u001a\u00020\bH\u0086\u0004\u001a\u0015\u0010\u001d\u001a\u00020 *\u00020\n2\u0006\u0010\u001f\u001a\u00020\tH\u0086\u0004\u001a\u0015\u0010\u001d\u001a\u00020\u001e*\u00020\n2\u0006\u0010\u001f\u001a\u00020\nH\u0086\u0004\u001a\n\u0010#\u001a\u00020!*\u00020!\u001a\n\u0010#\u001a\u00020\u001e*\u00020\u001e\u001a\n\u0010#\u001a\u00020 *\u00020 \u001a\u0015\u0010$\u001a\u00020!*\u00020!2\u0006\u0010$\u001a\u00020\bH\u0086\u0004\u001a\u0015\u0010$\u001a\u00020\u001e*\u00020\u001e2\u0006\u0010$\u001a\u00020\bH\u0086\u0004\u001a\u0015\u0010$\u001a\u00020 *\u00020 2\u0006\u0010$\u001a\u00020\tH\u0086\u0004\u001a\u0013\u0010%\u001a\u0004\u0018\u00010\u0005*\u00020\u0006H\u0000\u00a2\u0006\u0002\u0010&\u001a\u0013\u0010%\u001a\u0004\u0018\u00010\u0005*\u00020\u0007H\u0000\u00a2\u0006\u0002\u0010'\u001a\u0013\u0010%\u001a\u0004\u0018\u00010\u0005*\u00020\bH\u0000\u00a2\u0006\u0002\u0010(\u001a\u0013\u0010%\u001a\u0004\u0018\u00010\u0005*\u00020\tH\u0000\u00a2\u0006\u0002\u0010)\u001a\u0013\u0010%\u001a\u0004\u0018\u00010\u0005*\u00020\nH\u0000\u00a2\u0006\u0002\u0010*\u001a\u0013\u0010+\u001a\u0004\u0018\u00010\b*\u00020\u0006H\u0000\u00a2\u0006\u0002\u0010,\u001a\u0013\u0010+\u001a\u0004\u0018\u00010\b*\u00020\u0007H\u0000\u00a2\u0006\u0002\u0010-\u001a\u0013\u0010+\u001a\u0004\u0018\u00010\b*\u00020\tH\u0000\u00a2\u0006\u0002\u0010.\u001a\u0013\u0010/\u001a\u0004\u0018\u00010\t*\u00020\u0006H\u0000\u00a2\u0006\u0002\u00100\u001a\u0013\u0010/\u001a\u0004\u0018\u00010\t*\u00020\u0007H\u0000\u00a2\u0006\u0002\u00101\u001a\u0013\u00102\u001a\u0004\u0018\u00010\n*\u00020\u0006H\u0000\u00a2\u0006\u0002\u00103\u001a\u0013\u00102\u001a\u0004\u0018\u00010\n*\u00020\u0007H\u0000\u00a2\u0006\u0002\u00104\u001a\u0013\u00102\u001a\u0004\u0018\u00010\n*\u00020\bH\u0000\u00a2\u0006\u0002\u00105\u001a\u0013\u00102\u001a\u0004\u0018\u00010\n*\u00020\tH\u0000\u00a2\u0006\u0002\u00106\u001a\u0015\u00107\u001a\u000208*\u00020\u00052\u0006\u0010\u001f\u001a\u00020\u0005H\u0086\u0004\u001a\u0015\u00107\u001a\u000208*\u00020\u00052\u0006\u0010\u001f\u001a\u00020\bH\u0086\u0004\u001a\u0015\u00107\u001a\u000209*\u00020\u00052\u0006\u0010\u001f\u001a\u00020\tH\u0086\u0004\u001a\u0015\u00107\u001a\u000208*\u00020\u00052\u0006\u0010\u001f\u001a\u00020\nH\u0086\u0004\u001a\u0015\u00107\u001a\u00020:*\u00020\"2\u0006\u0010\u001f\u001a\u00020\"H\u0086\u0004\u001a\u0015\u00107\u001a\u000208*\u00020\b2\u0006\u0010\u001f\u001a\u00020\u0005H\u0086\u0004\u001a\u0015\u00107\u001a\u000208*\u00020\b2\u0006\u0010\u001f\u001a\u00020\bH\u0086\u0004\u001a\u0015\u00107\u001a\u000209*\u00020\b2\u0006\u0010\u001f\u001a\u00020\tH\u0086\u0004\u001a\u0015\u00107\u001a\u000208*\u00020\b2\u0006\u0010\u001f\u001a\u00020\nH\u0086\u0004\u001a\u0015\u00107\u001a\u000209*\u00020\t2\u0006\u0010\u001f\u001a\u00020\u0005H\u0086\u0004\u001a\u0015\u00107\u001a\u000209*\u00020\t2\u0006\u0010\u001f\u001a\u00020\bH\u0086\u0004\u001a\u0015\u00107\u001a\u000209*\u00020\t2\u0006\u0010\u001f\u001a\u00020\tH\u0086\u0004\u001a\u0015\u00107\u001a\u000209*\u00020\t2\u0006\u0010\u001f\u001a\u00020\nH\u0086\u0004\u001a\u0015\u00107\u001a\u000208*\u00020\n2\u0006\u0010\u001f\u001a\u00020\u0005H\u0086\u0004\u001a\u0015\u00107\u001a\u000208*\u00020\n2\u0006\u0010\u001f\u001a\u00020\bH\u0086\u0004\u001a\u0015\u00107\u001a\u000209*\u00020\n2\u0006\u0010\u001f\u001a\u00020\tH\u0086\u0004\u001a\u0015\u00107\u001a\u000208*\u00020\n2\u0006\u0010\u001f\u001a\u00020\nH\u0086\u0004\u00a8\u0006;"}, d2={"coerceAtLeast", "T", "", "minimumValue", "(Ljava/lang/Comparable;Ljava/lang/Comparable;)Ljava/lang/Comparable;", "", "", "", "", "", "", "coerceAtMost", "maximumValue", "coerceIn", "(Ljava/lang/Comparable;Ljava/lang/Comparable;Ljava/lang/Comparable;)Ljava/lang/Comparable;", "range", "Lkotlin/ranges/ClosedFloatingPointRange;", "(Ljava/lang/Comparable;Lkotlin/ranges/ClosedFloatingPointRange;)Ljava/lang/Comparable;", "Lkotlin/ranges/ClosedRange;", "(Ljava/lang/Comparable;Lkotlin/ranges/ClosedRange;)Ljava/lang/Comparable;", "contains", "", "value", "byteRangeContains", "doubleRangeContains", "floatRangeContains", "intRangeContains", "longRangeContains", "shortRangeContains", "downTo", "Lkotlin/ranges/IntProgression;", "to", "Lkotlin/ranges/LongProgression;", "Lkotlin/ranges/CharProgression;", "", "reversed", "step", "toByteExactOrNull", "(D)Ljava/lang/Byte;", "(F)Ljava/lang/Byte;", "(I)Ljava/lang/Byte;", "(J)Ljava/lang/Byte;", "(S)Ljava/lang/Byte;", "toIntExactOrNull", "(D)Ljava/lang/Integer;", "(F)Ljava/lang/Integer;", "(J)Ljava/lang/Integer;", "toLongExactOrNull", "(D)Ljava/lang/Long;", "(F)Ljava/lang/Long;", "toShortExactOrNull", "(D)Ljava/lang/Short;", "(F)Ljava/lang/Short;", "(I)Ljava/lang/Short;", "(J)Ljava/lang/Short;", "until", "Lkotlin/ranges/IntRange;", "Lkotlin/ranges/LongRange;", "Lkotlin/ranges/CharRange;", "kotlin-stdlib"}, k=5, mv={1, 1, 10}, xi=1, xs="kotlin/ranges/RangesKt")
class RangesKt___RangesKt
extends RangesKt__RangesKt {
    @JvmName(name="byteRangeContains")
    public static final boolean byteRangeContains(@NotNull ClosedRange<Byte> closedRange, double d) {
        Intrinsics.checkParameterIsNotNull(closedRange, (String)"$receiver");
        Byte by = RangesKt.toByteExactOrNull(d);
        if (by != null) {
            return closedRange.contains(by);
        }
        return false;
    }

    @JvmName(name="byteRangeContains")
    public static final boolean byteRangeContains(@NotNull ClosedRange<Byte> closedRange, float f) {
        Intrinsics.checkParameterIsNotNull(closedRange, (String)"$receiver");
        Byte by = RangesKt.toByteExactOrNull(f);
        if (by != null) {
            return closedRange.contains(by);
        }
        return false;
    }

    @JvmName(name="byteRangeContains")
    public static final boolean byteRangeContains(@NotNull ClosedRange<Byte> closedRange, int n) {
        Intrinsics.checkParameterIsNotNull(closedRange, (String)"$receiver");
        Byte by = RangesKt.toByteExactOrNull(n);
        if (by != null) {
            return closedRange.contains(by);
        }
        return false;
    }

    @JvmName(name="byteRangeContains")
    public static final boolean byteRangeContains(@NotNull ClosedRange<Byte> closedRange, long l) {
        Intrinsics.checkParameterIsNotNull(closedRange, (String)"$receiver");
        Byte by = RangesKt.toByteExactOrNull(l);
        if (by != null) {
            return closedRange.contains(by);
        }
        return false;
    }

    @JvmName(name="byteRangeContains")
    public static final boolean byteRangeContains(@NotNull ClosedRange<Byte> closedRange, short s) {
        Intrinsics.checkParameterIsNotNull(closedRange, (String)"$receiver");
        Byte by = RangesKt.toByteExactOrNull(s);
        if (by != null) {
            return closedRange.contains(by);
        }
        return false;
    }

    public static final byte coerceAtLeast(byte by, byte by2) {
        byte by3 = by;
        if (by < by2) {
            by3 = by2;
        }
        return by3;
    }

    public static final double coerceAtLeast(double d, double d2) {
        double d3 = d;
        if (d < d2) {
            d3 = d2;
        }
        return d3;
    }

    public static final float coerceAtLeast(float f, float f2) {
        float f3 = f;
        if (f < f2) {
            f3 = f2;
        }
        return f3;
    }

    public static final int coerceAtLeast(int n, int n2) {
        int n3 = n;
        if (n < n2) {
            n3 = n2;
        }
        return n3;
    }

    public static final long coerceAtLeast(long l, long l2) {
        long l3 = l;
        if (l < l2) {
            l3 = l2;
        }
        return l3;
    }

    @NotNull
    public static final <T extends Comparable<? super T>> T coerceAtLeast(@NotNull T t, @NotNull T t2) {
        Intrinsics.checkParameterIsNotNull(t, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(t2, (String)"minimumValue");
        T t3 = t;
        if (t.compareTo(t2) < 0) {
            t3 = t2;
        }
        return t3;
    }

    public static final short coerceAtLeast(short s, short s2) {
        short s3 = s;
        if (s < s2) {
            s3 = s2;
        }
        return s3;
    }

    public static final byte coerceAtMost(byte by, byte by2) {
        byte by3 = by;
        if (by > by2) {
            by3 = by2;
        }
        return by3;
    }

    public static final double coerceAtMost(double d, double d2) {
        double d3 = d;
        if (d > d2) {
            d3 = d2;
        }
        return d3;
    }

    public static final float coerceAtMost(float f, float f2) {
        float f3 = f;
        if (f > f2) {
            f3 = f2;
        }
        return f3;
    }

    public static final int coerceAtMost(int n, int n2) {
        int n3 = n;
        if (n > n2) {
            n3 = n2;
        }
        return n3;
    }

    public static final long coerceAtMost(long l, long l2) {
        long l3 = l;
        if (l > l2) {
            l3 = l2;
        }
        return l3;
    }

    @NotNull
    public static final <T extends Comparable<? super T>> T coerceAtMost(@NotNull T t, @NotNull T t2) {
        Intrinsics.checkParameterIsNotNull(t, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(t2, (String)"maximumValue");
        T t3 = t;
        if (t.compareTo(t2) > 0) {
            t3 = t2;
        }
        return t3;
    }

    public static final short coerceAtMost(short s, short s2) {
        short s3 = s;
        if (s > s2) {
            s3 = s2;
        }
        return s3;
    }

    public static final byte coerceIn(byte by, byte by2, byte by3) {
        if (by2 > by3) {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("Cannot coerce value to an empty range: maximum ");
            stringBuilder.append(by3);
            stringBuilder.append(" is less than minimum ");
            stringBuilder.append(by2);
            stringBuilder.append('.');
            throw (Throwable)new IllegalArgumentException(stringBuilder.toString());
        }
        if (by < by2) {
            return by2;
        }
        if (by > by3) {
            return by3;
        }
        return by;
    }

    public static final double coerceIn(double d, double d2, double d3) {
        if (d2 > d3) {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("Cannot coerce value to an empty range: maximum ");
            stringBuilder.append(d3);
            stringBuilder.append(" is less than minimum ");
            stringBuilder.append(d2);
            stringBuilder.append('.');
            throw (Throwable)new IllegalArgumentException(stringBuilder.toString());
        }
        if (d < d2) {
            return d2;
        }
        if (d > d3) {
            return d3;
        }
        return d;
    }

    public static final float coerceIn(float f, float f2, float f3) {
        if (f2 > f3) {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("Cannot coerce value to an empty range: maximum ");
            stringBuilder.append(f3);
            stringBuilder.append(" is less than minimum ");
            stringBuilder.append(f2);
            stringBuilder.append('.');
            throw (Throwable)new IllegalArgumentException(stringBuilder.toString());
        }
        if (f < f2) {
            return f2;
        }
        if (f > f3) {
            return f3;
        }
        return f;
    }

    public static final int coerceIn(int n, int n2, int n3) {
        if (n2 > n3) {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("Cannot coerce value to an empty range: maximum ");
            stringBuilder.append(n3);
            stringBuilder.append(" is less than minimum ");
            stringBuilder.append(n2);
            stringBuilder.append('.');
            throw (Throwable)new IllegalArgumentException(stringBuilder.toString());
        }
        if (n < n2) {
            return n2;
        }
        if (n > n3) {
            return n3;
        }
        return n;
    }

    public static final int coerceIn(int n, @NotNull ClosedRange<Integer> closedRange) {
        Intrinsics.checkParameterIsNotNull(closedRange, (String)"range");
        if (closedRange instanceof ClosedFloatingPointRange) {
            return ((Number)((Object)RangesKt.coerceIn((Comparable)Integer.valueOf(n), (ClosedFloatingPointRange)closedRange))).intValue();
        }
        if (closedRange.isEmpty()) {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("Cannot coerce value to an empty range: ");
            stringBuilder.append(closedRange);
            stringBuilder.append('.');
            throw (Throwable)new IllegalArgumentException(stringBuilder.toString());
        }
        if (n < ((Number)closedRange.getStart()).intValue()) {
            return ((Number)closedRange.getStart()).intValue();
        }
        int n2 = n;
        if (n > ((Number)closedRange.getEndInclusive()).intValue()) {
            n2 = ((Number)closedRange.getEndInclusive()).intValue();
        }
        return n2;
    }

    public static final long coerceIn(long l, long l2, long l3) {
        if (l2 > l3) {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("Cannot coerce value to an empty range: maximum ");
            stringBuilder.append(l3);
            stringBuilder.append(" is less than minimum ");
            stringBuilder.append(l2);
            stringBuilder.append('.');
            throw (Throwable)new IllegalArgumentException(stringBuilder.toString());
        }
        if (l < l2) {
            return l2;
        }
        if (l > l3) {
            return l3;
        }
        return l;
    }

    public static final long coerceIn(long l, @NotNull ClosedRange<Long> closedRange) {
        Intrinsics.checkParameterIsNotNull(closedRange, (String)"range");
        if (closedRange instanceof ClosedFloatingPointRange) {
            return ((Number)((Object)RangesKt.coerceIn((Comparable)Long.valueOf(l), (ClosedFloatingPointRange)closedRange))).longValue();
        }
        if (closedRange.isEmpty()) {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("Cannot coerce value to an empty range: ");
            stringBuilder.append(closedRange);
            stringBuilder.append('.');
            throw (Throwable)new IllegalArgumentException(stringBuilder.toString());
        }
        if (l < ((Number)closedRange.getStart()).longValue()) {
            return ((Number)closedRange.getStart()).longValue();
        }
        long l2 = l;
        if (l > ((Number)closedRange.getEndInclusive()).longValue()) {
            l2 = ((Number)closedRange.getEndInclusive()).longValue();
        }
        return l2;
    }

    @NotNull
    public static final <T extends Comparable<? super T>> T coerceIn(@NotNull T object, @Nullable T t, @Nullable T t2) {
        Intrinsics.checkParameterIsNotNull(object, (String)"$receiver");
        if (t != null && t2 != null) {
            if (t.compareTo(t2) > 0) {
                object = new StringBuilder();
                object.append("Cannot coerce value to an empty range: maximum ");
                object.append(t2);
                object.append(" is less than minimum ");
                object.append(t);
                object.append('.');
                throw (Throwable)new IllegalArgumentException(object.toString());
            }
            if (object.compareTo(t) < 0) {
                return t;
            }
            if (object.compareTo(t2) > 0) {
                return t2;
            }
        } else {
            if (t != null && object.compareTo(t) < 0) {
                return t;
            }
            if (t2 != null && object.compareTo(t2) > 0) {
                return t2;
            }
        }
        return (T)object;
    }

    @SinceKotlin(version="1.1")
    @NotNull
    public static final <T extends Comparable<? super T>> T coerceIn(@NotNull T object, @NotNull ClosedFloatingPointRange<T> closedFloatingPointRange) {
        Intrinsics.checkParameterIsNotNull(object, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(closedFloatingPointRange, (String)"range");
        if (closedFloatingPointRange.isEmpty()) {
            object = new StringBuilder();
            object.append("Cannot coerce value to an empty range: ");
            object.append(closedFloatingPointRange);
            object.append('.');
            throw (Throwable)new IllegalArgumentException(object.toString());
        }
        if (closedFloatingPointRange.lessThanOrEquals(object, closedFloatingPointRange.getStart()) && !closedFloatingPointRange.lessThanOrEquals(closedFloatingPointRange.getStart(), object)) {
            return closedFloatingPointRange.getStart();
        }
        Object object2 = object;
        if (closedFloatingPointRange.lessThanOrEquals(closedFloatingPointRange.getEndInclusive(), object)) {
            object2 = object;
            if (!closedFloatingPointRange.lessThanOrEquals(object, closedFloatingPointRange.getEndInclusive())) {
                object2 = closedFloatingPointRange.getEndInclusive();
            }
        }
        return (T)object2;
    }

    @NotNull
    public static final <T extends Comparable<? super T>> T coerceIn(@NotNull T object, @NotNull ClosedRange<T> closedRange) {
        Intrinsics.checkParameterIsNotNull(object, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(closedRange, (String)"range");
        if (closedRange instanceof ClosedFloatingPointRange) {
            return RangesKt.coerceIn(object, (ClosedFloatingPointRange)closedRange);
        }
        if (closedRange.isEmpty()) {
            object = new StringBuilder();
            object.append("Cannot coerce value to an empty range: ");
            object.append(closedRange);
            object.append('.');
            throw (Throwable)new IllegalArgumentException(object.toString());
        }
        if (object.compareTo(closedRange.getStart()) < 0) {
            return closedRange.getStart();
        }
        Object object2 = object;
        if (object.compareTo(closedRange.getEndInclusive()) > 0) {
            object2 = closedRange.getEndInclusive();
        }
        return (T)object2;
    }

    public static final short coerceIn(short s, short s2, short s3) {
        if (s2 > s3) {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("Cannot coerce value to an empty range: maximum ");
            stringBuilder.append(s3);
            stringBuilder.append(" is less than minimum ");
            stringBuilder.append(s2);
            stringBuilder.append('.');
            throw (Throwable)new IllegalArgumentException(stringBuilder.toString());
        }
        if (s < s2) {
            return s2;
        }
        if (s > s3) {
            return s3;
        }
        return s;
    }

    @JvmName(name="doubleRangeContains")
    public static final boolean doubleRangeContains(@NotNull ClosedRange<Double> closedRange, byte by) {
        Intrinsics.checkParameterIsNotNull(closedRange, (String)"$receiver");
        return closedRange.contains(Double.valueOf(by));
    }

    @JvmName(name="doubleRangeContains")
    public static final boolean doubleRangeContains(@NotNull ClosedRange<Double> closedRange, float f) {
        Intrinsics.checkParameterIsNotNull(closedRange, (String)"$receiver");
        return closedRange.contains(Double.valueOf(f));
    }

    @JvmName(name="doubleRangeContains")
    public static final boolean doubleRangeContains(@NotNull ClosedRange<Double> closedRange, int n) {
        Intrinsics.checkParameterIsNotNull(closedRange, (String)"$receiver");
        return closedRange.contains(Double.valueOf(n));
    }

    @JvmName(name="doubleRangeContains")
    public static final boolean doubleRangeContains(@NotNull ClosedRange<Double> closedRange, long l) {
        Intrinsics.checkParameterIsNotNull(closedRange, (String)"$receiver");
        return closedRange.contains(Double.valueOf(l));
    }

    @JvmName(name="doubleRangeContains")
    public static final boolean doubleRangeContains(@NotNull ClosedRange<Double> closedRange, short s) {
        Intrinsics.checkParameterIsNotNull(closedRange, (String)"$receiver");
        return closedRange.contains(Double.valueOf(s));
    }

    @NotNull
    public static final CharProgression downTo(char c, char c2) {
        return CharProgression.Companion.fromClosedRange(c, c2, -1);
    }

    @NotNull
    public static final IntProgression downTo(byte by, byte by2) {
        return IntProgression.Companion.fromClosedRange(by, by2, -1);
    }

    @NotNull
    public static final IntProgression downTo(byte by, int n) {
        return IntProgression.Companion.fromClosedRange(by, n, -1);
    }

    @NotNull
    public static final IntProgression downTo(byte by, short s) {
        return IntProgression.Companion.fromClosedRange(by, s, -1);
    }

    @NotNull
    public static final IntProgression downTo(int n, byte by) {
        return IntProgression.Companion.fromClosedRange(n, by, -1);
    }

    @NotNull
    public static final IntProgression downTo(int n, int n2) {
        return IntProgression.Companion.fromClosedRange(n, n2, -1);
    }

    @NotNull
    public static final IntProgression downTo(int n, short s) {
        return IntProgression.Companion.fromClosedRange(n, s, -1);
    }

    @NotNull
    public static final IntProgression downTo(short s, byte by) {
        return IntProgression.Companion.fromClosedRange(s, by, -1);
    }

    @NotNull
    public static final IntProgression downTo(short s, int n) {
        return IntProgression.Companion.fromClosedRange(s, n, -1);
    }

    @NotNull
    public static final IntProgression downTo(short s, short s2) {
        return IntProgression.Companion.fromClosedRange(s, s2, -1);
    }

    @NotNull
    public static final LongProgression downTo(byte by, long l) {
        return LongProgression.Companion.fromClosedRange(by, l, -1L);
    }

    @NotNull
    public static final LongProgression downTo(int n, long l) {
        return LongProgression.Companion.fromClosedRange(n, l, -1L);
    }

    @NotNull
    public static final LongProgression downTo(long l, byte by) {
        return LongProgression.Companion.fromClosedRange(l, by, -1L);
    }

    @NotNull
    public static final LongProgression downTo(long l, int n) {
        return LongProgression.Companion.fromClosedRange(l, n, -1L);
    }

    @NotNull
    public static final LongProgression downTo(long l, long l2) {
        return LongProgression.Companion.fromClosedRange(l, l2, -1L);
    }

    @NotNull
    public static final LongProgression downTo(long l, short s) {
        return LongProgression.Companion.fromClosedRange(l, s, -1L);
    }

    @NotNull
    public static final LongProgression downTo(short s, long l) {
        return LongProgression.Companion.fromClosedRange(s, l, -1L);
    }

    @JvmName(name="floatRangeContains")
    public static final boolean floatRangeContains(@NotNull ClosedRange<Float> closedRange, byte by) {
        Intrinsics.checkParameterIsNotNull(closedRange, (String)"$receiver");
        return closedRange.contains(Float.valueOf(by));
    }

    @JvmName(name="floatRangeContains")
    public static final boolean floatRangeContains(@NotNull ClosedRange<Float> closedRange, double d) {
        Intrinsics.checkParameterIsNotNull(closedRange, (String)"$receiver");
        return closedRange.contains(Float.valueOf((float)d));
    }

    @JvmName(name="floatRangeContains")
    public static final boolean floatRangeContains(@NotNull ClosedRange<Float> closedRange, int n) {
        Intrinsics.checkParameterIsNotNull(closedRange, (String)"$receiver");
        return closedRange.contains(Float.valueOf(n));
    }

    @JvmName(name="floatRangeContains")
    public static final boolean floatRangeContains(@NotNull ClosedRange<Float> closedRange, long l) {
        Intrinsics.checkParameterIsNotNull(closedRange, (String)"$receiver");
        return closedRange.contains(Float.valueOf(l));
    }

    @JvmName(name="floatRangeContains")
    public static final boolean floatRangeContains(@NotNull ClosedRange<Float> closedRange, short s) {
        Intrinsics.checkParameterIsNotNull(closedRange, (String)"$receiver");
        return closedRange.contains(Float.valueOf(s));
    }

    @JvmName(name="intRangeContains")
    public static final boolean intRangeContains(@NotNull ClosedRange<Integer> closedRange, byte by) {
        Intrinsics.checkParameterIsNotNull(closedRange, (String)"$receiver");
        return closedRange.contains(Integer.valueOf(by));
    }

    @JvmName(name="intRangeContains")
    public static final boolean intRangeContains(@NotNull ClosedRange<Integer> closedRange, double d) {
        Intrinsics.checkParameterIsNotNull(closedRange, (String)"$receiver");
        Integer n = RangesKt.toIntExactOrNull(d);
        if (n != null) {
            return closedRange.contains(n);
        }
        return false;
    }

    @JvmName(name="intRangeContains")
    public static final boolean intRangeContains(@NotNull ClosedRange<Integer> closedRange, float f) {
        Intrinsics.checkParameterIsNotNull(closedRange, (String)"$receiver");
        Integer n = RangesKt.toIntExactOrNull(f);
        if (n != null) {
            return closedRange.contains(n);
        }
        return false;
    }

    @JvmName(name="intRangeContains")
    public static final boolean intRangeContains(@NotNull ClosedRange<Integer> closedRange, long l) {
        Intrinsics.checkParameterIsNotNull(closedRange, (String)"$receiver");
        Integer n = RangesKt.toIntExactOrNull(l);
        if (n != null) {
            return closedRange.contains(n);
        }
        return false;
    }

    @JvmName(name="intRangeContains")
    public static final boolean intRangeContains(@NotNull ClosedRange<Integer> closedRange, short s) {
        Intrinsics.checkParameterIsNotNull(closedRange, (String)"$receiver");
        return closedRange.contains(Integer.valueOf(s));
    }

    @JvmName(name="longRangeContains")
    public static final boolean longRangeContains(@NotNull ClosedRange<Long> closedRange, byte by) {
        Intrinsics.checkParameterIsNotNull(closedRange, (String)"$receiver");
        return closedRange.contains(Long.valueOf(by));
    }

    @JvmName(name="longRangeContains")
    public static final boolean longRangeContains(@NotNull ClosedRange<Long> closedRange, double d) {
        Intrinsics.checkParameterIsNotNull(closedRange, (String)"$receiver");
        Long l = RangesKt.toLongExactOrNull(d);
        if (l != null) {
            return closedRange.contains(l);
        }
        return false;
    }

    @JvmName(name="longRangeContains")
    public static final boolean longRangeContains(@NotNull ClosedRange<Long> closedRange, float f) {
        Intrinsics.checkParameterIsNotNull(closedRange, (String)"$receiver");
        Long l = RangesKt.toLongExactOrNull(f);
        if (l != null) {
            return closedRange.contains(l);
        }
        return false;
    }

    @JvmName(name="longRangeContains")
    public static final boolean longRangeContains(@NotNull ClosedRange<Long> closedRange, int n) {
        Intrinsics.checkParameterIsNotNull(closedRange, (String)"$receiver");
        return closedRange.contains(Long.valueOf(n));
    }

    @JvmName(name="longRangeContains")
    public static final boolean longRangeContains(@NotNull ClosedRange<Long> closedRange, short s) {
        Intrinsics.checkParameterIsNotNull(closedRange, (String)"$receiver");
        return closedRange.contains(Long.valueOf(s));
    }

    @NotNull
    public static final CharProgression reversed(@NotNull CharProgression charProgression) {
        Intrinsics.checkParameterIsNotNull((Object)charProgression, (String)"$receiver");
        return CharProgression.Companion.fromClosedRange(charProgression.getLast(), charProgression.getFirst(), - charProgression.getStep());
    }

    @NotNull
    public static final IntProgression reversed(@NotNull IntProgression intProgression) {
        Intrinsics.checkParameterIsNotNull((Object)intProgression, (String)"$receiver");
        return IntProgression.Companion.fromClosedRange(intProgression.getLast(), intProgression.getFirst(), - intProgression.getStep());
    }

    @NotNull
    public static final LongProgression reversed(@NotNull LongProgression longProgression) {
        Intrinsics.checkParameterIsNotNull((Object)longProgression, (String)"$receiver");
        return LongProgression.Companion.fromClosedRange(longProgression.getLast(), longProgression.getFirst(), - longProgression.getStep());
    }

    @JvmName(name="shortRangeContains")
    public static final boolean shortRangeContains(@NotNull ClosedRange<Short> closedRange, byte by) {
        Intrinsics.checkParameterIsNotNull(closedRange, (String)"$receiver");
        return closedRange.contains(Short.valueOf(by));
    }

    @JvmName(name="shortRangeContains")
    public static final boolean shortRangeContains(@NotNull ClosedRange<Short> closedRange, double d) {
        Intrinsics.checkParameterIsNotNull(closedRange, (String)"$receiver");
        Short s = RangesKt.toShortExactOrNull(d);
        if (s != null) {
            return closedRange.contains(s);
        }
        return false;
    }

    @JvmName(name="shortRangeContains")
    public static final boolean shortRangeContains(@NotNull ClosedRange<Short> closedRange, float f) {
        Intrinsics.checkParameterIsNotNull(closedRange, (String)"$receiver");
        Short s = RangesKt.toShortExactOrNull(f);
        if (s != null) {
            return closedRange.contains(s);
        }
        return false;
    }

    @JvmName(name="shortRangeContains")
    public static final boolean shortRangeContains(@NotNull ClosedRange<Short> closedRange, int n) {
        Intrinsics.checkParameterIsNotNull(closedRange, (String)"$receiver");
        Short s = RangesKt.toShortExactOrNull(n);
        if (s != null) {
            return closedRange.contains(s);
        }
        return false;
    }

    @JvmName(name="shortRangeContains")
    public static final boolean shortRangeContains(@NotNull ClosedRange<Short> closedRange, long l) {
        Intrinsics.checkParameterIsNotNull(closedRange, (String)"$receiver");
        Short s = RangesKt.toShortExactOrNull(l);
        if (s != null) {
            return closedRange.contains(s);
        }
        return false;
    }

    @NotNull
    public static final CharProgression step(@NotNull CharProgression charProgression, int n) {
        Intrinsics.checkParameterIsNotNull((Object)charProgression, (String)"$receiver");
        boolean bl = n > 0;
        RangesKt.checkStepIsPositive(bl, n);
        CharProgression.Companion companion = CharProgression.Companion;
        char c = charProgression.getFirst();
        char c2 = charProgression.getLast();
        if (charProgression.getStep() <= 0) {
            n = - n;
        }
        return companion.fromClosedRange(c, c2, n);
    }

    @NotNull
    public static final IntProgression step(@NotNull IntProgression intProgression, int n) {
        Intrinsics.checkParameterIsNotNull((Object)intProgression, (String)"$receiver");
        boolean bl = n > 0;
        RangesKt.checkStepIsPositive(bl, n);
        IntProgression.Companion companion = IntProgression.Companion;
        int n2 = intProgression.getFirst();
        int n3 = intProgression.getLast();
        if (intProgression.getStep() <= 0) {
            n = - n;
        }
        return companion.fromClosedRange(n2, n3, n);
    }

    @NotNull
    public static final LongProgression step(@NotNull LongProgression longProgression, long l) {
        LongProgression.Companion companion;
        long l2;
        long l3;
        block0 : {
            Intrinsics.checkParameterIsNotNull((Object)longProgression, (String)"$receiver");
            boolean bl = l > 0L;
            RangesKt.checkStepIsPositive(bl, l);
            companion = LongProgression.Companion;
            l2 = longProgression.getFirst();
            l3 = longProgression.getLast();
            if (longProgression.getStep() > 0L) break block0;
            l = - l;
        }
        return companion.fromClosedRange(l2, l3, l);
    }

    @Nullable
    public static final Byte toByteExactOrNull(double d) {
        double d2 = -128;
        double d3 = 127;
        if (d >= d2 && d <= d3) {
            return (byte)d;
        }
        return null;
    }

    @Nullable
    public static final Byte toByteExactOrNull(float f) {
        float f2 = -128;
        float f3 = 127;
        if (f >= f2 && f <= f3) {
            return (byte)f;
        }
        return null;
    }

    @Nullable
    public static final Byte toByteExactOrNull(int n) {
        if (-128 <= n && 127 >= n) {
            return (byte)n;
        }
        return null;
    }

    @Nullable
    public static final Byte toByteExactOrNull(long l) {
        long l2 = -128;
        long l3 = 127;
        if (l2 <= l && l3 >= l) {
            return (byte)l;
        }
        return null;
    }

    @Nullable
    public static final Byte toByteExactOrNull(short s) {
        short s2 = (short)-128;
        short s3 = (short)127;
        if (s2 <= s && s3 >= s) {
            return (byte)s;
        }
        return null;
    }

    @Nullable
    public static final Integer toIntExactOrNull(double d) {
        double d2 = Integer.MIN_VALUE;
        double d3 = Integer.MAX_VALUE;
        if (d >= d2 && d <= d3) {
            return (int)d;
        }
        return null;
    }

    @Nullable
    public static final Integer toIntExactOrNull(float f) {
        float f2 = Integer.MIN_VALUE;
        float f3 = Integer.MAX_VALUE;
        if (f >= f2 && f <= f3) {
            return (int)f;
        }
        return null;
    }

    @Nullable
    public static final Integer toIntExactOrNull(long l) {
        long l2 = Integer.MIN_VALUE;
        long l3 = Integer.MAX_VALUE;
        if (l2 <= l && l3 >= l) {
            return (int)l;
        }
        return null;
    }

    @Nullable
    public static final Long toLongExactOrNull(double d) {
        double d2 = Long.MIN_VALUE;
        double d3 = Long.MAX_VALUE;
        if (d >= d2 && d <= d3) {
            return (long)d;
        }
        return null;
    }

    @Nullable
    public static final Long toLongExactOrNull(float f) {
        float f2 = Long.MIN_VALUE;
        float f3 = Long.MAX_VALUE;
        if (f >= f2 && f <= f3) {
            return (long)f;
        }
        return null;
    }

    @Nullable
    public static final Short toShortExactOrNull(double d) {
        double d2 = -32768;
        double d3 = 32767;
        if (d >= d2 && d <= d3) {
            return (short)d;
        }
        return null;
    }

    @Nullable
    public static final Short toShortExactOrNull(float f) {
        float f2 = -32768;
        float f3 = 32767;
        if (f >= f2 && f <= f3) {
            return (short)f;
        }
        return null;
    }

    @Nullable
    public static final Short toShortExactOrNull(int n) {
        if (-32768 <= n && 32767 >= n) {
            return (short)n;
        }
        return null;
    }

    @Nullable
    public static final Short toShortExactOrNull(long l) {
        long l2 = -32768;
        long l3 = 32767;
        if (l2 <= l && l3 >= l) {
            return (short)l;
        }
        return null;
    }

    @NotNull
    public static final CharRange until(char c, char c2) {
        if (c2 <= '\u0000') {
            return CharRange.Companion.getEMPTY();
        }
        return new CharRange(c, (char)(c2 - '\u0001'));
    }

    @NotNull
    public static final IntRange until(byte by, byte by2) {
        return new IntRange(by, by2 - 1);
    }

    @NotNull
    public static final IntRange until(byte by, int n) {
        if (n <= Integer.MIN_VALUE) {
            return IntRange.Companion.getEMPTY();
        }
        return new IntRange(by, n - 1);
    }

    @NotNull
    public static final IntRange until(byte by, short s) {
        return new IntRange(by, s - 1);
    }

    @NotNull
    public static final IntRange until(int n, byte by) {
        return new IntRange(n, by - 1);
    }

    @NotNull
    public static final IntRange until(int n, int n2) {
        if (n2 <= Integer.MIN_VALUE) {
            return IntRange.Companion.getEMPTY();
        }
        return new IntRange(n, n2 - 1);
    }

    @NotNull
    public static final IntRange until(int n, short s) {
        return new IntRange(n, s - 1);
    }

    @NotNull
    public static final IntRange until(short s, byte by) {
        return new IntRange(s, by - 1);
    }

    @NotNull
    public static final IntRange until(short s, int n) {
        if (n <= Integer.MIN_VALUE) {
            return IntRange.Companion.getEMPTY();
        }
        return new IntRange(s, n - 1);
    }

    @NotNull
    public static final IntRange until(short s, short s2) {
        return new IntRange(s, s2 - 1);
    }

    @NotNull
    public static final LongRange until(byte by, long l) {
        if (l <= Long.MIN_VALUE) {
            return LongRange.Companion.getEMPTY();
        }
        return new LongRange(by, l - 1L);
    }

    @NotNull
    public static final LongRange until(int n, long l) {
        if (l <= Long.MIN_VALUE) {
            return LongRange.Companion.getEMPTY();
        }
        return new LongRange(n, l - 1L);
    }

    @NotNull
    public static final LongRange until(long l, byte by) {
        return new LongRange(l, (long)by - 1L);
    }

    @NotNull
    public static final LongRange until(long l, int n) {
        return new LongRange(l, (long)n - 1L);
    }

    @NotNull
    public static final LongRange until(long l, long l2) {
        if (l2 <= Long.MIN_VALUE) {
            return LongRange.Companion.getEMPTY();
        }
        return new LongRange(l, l2 - 1L);
    }

    @NotNull
    public static final LongRange until(long l, short s) {
        return new LongRange(l, (long)s - 1L);
    }

    @NotNull
    public static final LongRange until(short s, long l) {
        if (l <= Long.MIN_VALUE) {
            return LongRange.Companion.getEMPTY();
        }
        return new LongRange(s, l - 1L);
    }
}

