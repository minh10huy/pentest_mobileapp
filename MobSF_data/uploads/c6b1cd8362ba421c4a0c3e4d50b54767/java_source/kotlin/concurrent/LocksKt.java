/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  kotlin.Metadata
 *  kotlin.internal.InlineOnly
 *  kotlin.jvm.JvmName
 *  kotlin.jvm.functions.Function0
 *  org.jetbrains.annotations.NotNull
 */
package kotlin.concurrent;

import java.io.Serializable;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import kotlin.Metadata;
import kotlin.internal.InlineOnly;
import kotlin.jvm.JvmName;
import kotlin.jvm.functions.Function0;
import kotlin.jvm.internal.InlineMarker;
import org.jetbrains.annotations.NotNull;

@Metadata(bv={1, 0, 2}, d1={"\u0000\u001a\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0003\u001a&\u0010\u0000\u001a\u0002H\u0001\"\u0004\b\u0000\u0010\u0001*\u00020\u00022\f\u0010\u0003\u001a\b\u0012\u0004\u0012\u0002H\u00010\u0004H\u0087\b\u00a2\u0006\u0002\u0010\u0005\u001a&\u0010\u0006\u001a\u0002H\u0001\"\u0004\b\u0000\u0010\u0001*\u00020\u00072\f\u0010\u0003\u001a\b\u0012\u0004\u0012\u0002H\u00010\u0004H\u0087\b\u00a2\u0006\u0002\u0010\b\u001a&\u0010\t\u001a\u0002H\u0001\"\u0004\b\u0000\u0010\u0001*\u00020\u00022\f\u0010\u0003\u001a\b\u0012\u0004\u0012\u0002H\u00010\u0004H\u0087\b\u00a2\u0006\u0002\u0010\u0005\u00a8\u0006\n"}, d2={"read", "T", "Ljava/util/concurrent/locks/ReentrantReadWriteLock;", "action", "Lkotlin/Function0;", "(Ljava/util/concurrent/locks/ReentrantReadWriteLock;Lkotlin/jvm/functions/Function0;)Ljava/lang/Object;", "withLock", "Ljava/util/concurrent/locks/Lock;", "(Ljava/util/concurrent/locks/Lock;Lkotlin/jvm/functions/Function0;)Ljava/lang/Object;", "write", "kotlin-stdlib"}, k=2, mv={1, 1, 10})
@JvmName(name="LocksKt")
public final class LocksKt {
    @InlineOnly
    private static final <T> T read(@NotNull ReentrantReadWriteLock serializable, Function0<? extends T> object) {
        serializable = serializable.readLock();
        serializable.lock();
        try {
            object = object.invoke();
            return (T)object;
        }
        finally {
            InlineMarker.finallyStart(1);
            serializable.unlock();
            InlineMarker.finallyEnd(1);
        }
    }

    @InlineOnly
    private static final <T> T withLock(@NotNull Lock lock, Function0<? extends T> object) {
        lock.lock();
        try {
            object = object.invoke();
            return (T)object;
        }
        finally {
            InlineMarker.finallyStart(1);
            lock.unlock();
            InlineMarker.finallyEnd(1);
        }
    }

    @InlineOnly
    private static final <T> T write(@NotNull ReentrantReadWriteLock serializable, Function0<? extends T> object) {
        int n;
        ReentrantReadWriteLock.ReadLock readLock = serializable.readLock();
        int n2 = serializable.getWriteHoldCount();
        int n3 = 0;
        int n4 = 0;
        n2 = n2 == 0 ? serializable.getReadHoldCount() : 0;
        for (n = 0; n < n2; ++n) {
            readLock.unlock();
        }
        serializable = serializable.writeLock();
        serializable.lock();
        try {
            object = object.invoke();
        }
        catch (Throwable throwable) {
            InlineMarker.finallyStart(1);
            for (n = n3; n < n2; ++n) {
                readLock.lock();
            }
            serializable.unlock();
            InlineMarker.finallyEnd(1);
            throw throwable;
        }
        InlineMarker.finallyStart(1);
        for (n = n4; n < n2; ++n) {
            readLock.lock();
        }
        serializable.unlock();
        InlineMarker.finallyEnd(1);
        return (T)object;
    }
}

