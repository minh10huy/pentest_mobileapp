/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  kotlin.SinceKotlin
 *  kotlin.jvm.internal.Intrinsics
 */
package kotlin.jvm.internal;

import kotlin.SinceKotlin;
import kotlin.jvm.internal.CallableReference;
import kotlin.jvm.internal.Intrinsics;
import kotlin.reflect.KCallable;
import kotlin.reflect.KDeclarationContainer;
import kotlin.reflect.KProperty;

public abstract class PropertyReference
extends CallableReference
implements KProperty {
    public PropertyReference() {
    }

    @SinceKotlin(version="1.1")
    public PropertyReference(Object object) {
        super(object);
    }

    public boolean equals(Object object) {
        if (object == this) {
            return true;
        }
        if (object instanceof PropertyReference) {
            object = (PropertyReference)object;
            if (this.getOwner().equals(object.getOwner()) && this.getName().equals(object.getName()) && this.getSignature().equals(object.getSignature()) && Intrinsics.areEqual((Object)this.getBoundReceiver(), (Object)object.getBoundReceiver())) {
                return true;
            }
            return false;
        }
        if (object instanceof KProperty) {
            return object.equals(this.compute());
        }
        return false;
    }

    @SinceKotlin(version="1.1")
    @Override
    protected KProperty getReflected() {
        return (KProperty)super.getReflected();
    }

    public int hashCode() {
        return (this.getOwner().hashCode() * 31 + this.getName().hashCode()) * 31 + this.getSignature().hashCode();
    }

    @SinceKotlin(version="1.1")
    @Override
    public boolean isConst() {
        return this.getReflected().isConst();
    }

    @SinceKotlin(version="1.1")
    @Override
    public boolean isLateinit() {
        return this.getReflected().isLateinit();
    }

    public String toString() {
        Object object = this.compute();
        if (object != this) {
            return object.toString();
        }
        object = new StringBuilder();
        object.append("property ");
        object.append(this.getName());
        object.append(" (Kotlin reflection is not available)");
        return object.toString();
    }
}

