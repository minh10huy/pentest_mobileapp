/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  kotlin.SinceKotlin
 *  kotlin.jvm.internal.Intrinsics
 */
package kotlin.jvm.internal;

import kotlin.SinceKotlin;
import kotlin.jvm.internal.CallableReference;
import kotlin.jvm.internal.FunctionBase;
import kotlin.jvm.internal.Intrinsics;
import kotlin.jvm.internal.Reflection;
import kotlin.reflect.KCallable;
import kotlin.reflect.KDeclarationContainer;
import kotlin.reflect.KFunction;

public class FunctionReference
extends CallableReference
implements FunctionBase,
KFunction {
    private final int arity;

    public FunctionReference(int n) {
        this.arity = n;
    }

    @SinceKotlin(version="1.1")
    public FunctionReference(int n, Object object) {
        super(object);
        this.arity = n;
    }

    @SinceKotlin(version="1.1")
    @Override
    protected KCallable computeReflected() {
        return Reflection.function(this);
    }

    public boolean equals(Object object) {
        if (object == this) {
            return true;
        }
        if (object instanceof FunctionReference) {
            object = (FunctionReference)object;
            if ((this.getOwner() == null ? object.getOwner() == null : this.getOwner().equals(object.getOwner())) && this.getName().equals(object.getName()) && this.getSignature().equals(object.getSignature()) && Intrinsics.areEqual((Object)this.getBoundReceiver(), (Object)object.getBoundReceiver())) {
                return true;
            }
            return false;
        }
        if (object instanceof KFunction) {
            return object.equals(this.compute());
        }
        return false;
    }

    @Override
    public int getArity() {
        return this.arity;
    }

    @SinceKotlin(version="1.1")
    @Override
    protected KFunction getReflected() {
        return (KFunction)super.getReflected();
    }

    public int hashCode() {
        int n = this.getOwner() == null ? 0 : this.getOwner().hashCode() * 31;
        return (n + this.getName().hashCode()) * 31 + this.getSignature().hashCode();
    }

    @SinceKotlin(version="1.1")
    @Override
    public boolean isExternal() {
        return this.getReflected().isExternal();
    }

    @SinceKotlin(version="1.1")
    @Override
    public boolean isInfix() {
        return this.getReflected().isInfix();
    }

    @SinceKotlin(version="1.1")
    @Override
    public boolean isInline() {
        return this.getReflected().isInline();
    }

    @SinceKotlin(version="1.1")
    @Override
    public boolean isOperator() {
        return this.getReflected().isOperator();
    }

    @SinceKotlin(version="1.1")
    @Override
    public boolean isSuspend() {
        return this.getReflected().isSuspend();
    }

    public String toString() {
        Object object = this.compute();
        if (object != this) {
            return object.toString();
        }
        if ("<init>".equals(this.getName())) {
            return "constructor (Kotlin reflection is not available)";
        }
        object = new StringBuilder();
        object.append("function ");
        object.append(this.getName());
        object.append(" (Kotlin reflection is not available)");
        return object.toString();
    }
}

