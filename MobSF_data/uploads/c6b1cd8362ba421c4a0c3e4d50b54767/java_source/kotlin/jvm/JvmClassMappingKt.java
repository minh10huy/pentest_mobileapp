/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  kotlin.jvm.internal.ClassBasedDeclarationContainer
 *  kotlin.jvm.internal.Reflection
 *  kotlin.reflect.KClass
 */
package kotlin.jvm;

import java.lang.annotation.Annotation;
import kotlin.Deprecated;
import kotlin.DeprecationLevel;
import kotlin.Metadata;
import kotlin.ReplaceWith;
import kotlin.TypeCastException;
import kotlin.jvm.JvmName;
import kotlin.jvm.internal.ClassBasedDeclarationContainer;
import kotlin.jvm.internal.Intrinsics;
import kotlin.jvm.internal.Reflection;
import kotlin.reflect.KClass;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

@Metadata(bv={1, 0, 2}, d1={"\u0000,\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\u001b\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0010\u0000\n\u0002\b\u000b\n\u0002\u0010\u000b\n\u0002\u0010\u0011\n\u0002\b\u0002\u001a\u001f\u0010\u0018\u001a\u00020\u0019\"\n\b\u0000\u0010\u0002\u0018\u0001*\u00020\r*\u0006\u0012\u0002\b\u00030\u001a\u00a2\u0006\u0002\u0010\u001b\"'\u0010\u0000\u001a\n\u0012\u0006\b\u0001\u0012\u0002H\u00020\u0001\"\b\b\u0000\u0010\u0002*\u00020\u0003*\u0002H\u00028F\u00a2\u0006\u0006\u001a\u0004\b\u0004\u0010\u0005\"0\u0010\u0006\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0007\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00018GX\u0087\u0004\u00a2\u0006\f\u0012\u0004\b\b\u0010\t\u001a\u0004\b\n\u0010\u000b\"&\u0010\f\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0007\"\b\b\u0000\u0010\u0002*\u00020\r*\u0002H\u00028\u00c6\u0002\u00a2\u0006\u0006\u001a\u0004\b\n\u0010\u000e\";\u0010\f\u001a\u000e\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00020\u00010\u0007\"\b\b\u0000\u0010\u0002*\u00020\r*\b\u0012\u0004\u0012\u0002H\u00020\u00018\u00c7\u0002X\u0087\u0004\u00a2\u0006\f\u0012\u0004\b\u000f\u0010\t\u001a\u0004\b\u0010\u0010\u000b\"+\u0010\u0011\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0007\"\b\b\u0000\u0010\u0002*\u00020\r*\b\u0012\u0004\u0012\u0002H\u00020\u00018F\u00a2\u0006\u0006\u001a\u0004\b\u0012\u0010\u000b\"-\u0010\u0013\u001a\n\u0012\u0004\u0012\u0002H\u0002\u0018\u00010\u0007\"\b\b\u0000\u0010\u0002*\u00020\r*\b\u0012\u0004\u0012\u0002H\u00020\u00018F\u00a2\u0006\u0006\u001a\u0004\b\u0014\u0010\u000b\"+\u0010\u0015\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0001\"\b\b\u0000\u0010\u0002*\u00020\r*\b\u0012\u0004\u0012\u0002H\u00020\u00078G\u00a2\u0006\u0006\u001a\u0004\b\u0016\u0010\u0017\u00a8\u0006\u001c"}, d2={"annotationClass", "Lkotlin/reflect/KClass;", "T", "", "getAnnotationClass", "(Ljava/lang/annotation/Annotation;)Lkotlin/reflect/KClass;", "java", "Ljava/lang/Class;", "java$annotations", "(Lkotlin/reflect/KClass;)V", "getJavaClass", "(Lkotlin/reflect/KClass;)Ljava/lang/Class;", "javaClass", "", "(Ljava/lang/Object;)Ljava/lang/Class;", "javaClass$annotations", "getRuntimeClassOfKClassInstance", "javaObjectType", "getJavaObjectType", "javaPrimitiveType", "getJavaPrimitiveType", "kotlin", "getKotlinClass", "(Ljava/lang/Class;)Lkotlin/reflect/KClass;", "isArrayOf", "", "", "([Ljava/lang/Object;)Z", "kotlin-stdlib"}, k=2, mv={1, 1, 10})
@JvmName(name="JvmClassMappingKt")
public final class JvmClassMappingKt {
    @NotNull
    public static final <T extends Annotation> KClass<? extends T> getAnnotationClass(@NotNull T object) {
        Intrinsics.checkParameterIsNotNull(object, "$receiver");
        object = object.annotationType();
        Intrinsics.checkExpressionValueIsNotNull(object, "(this as java.lang.annot\u2026otation).annotationType()");
        object = JvmClassMappingKt.getKotlinClass(object);
        if (object == null) {
            throw new TypeCastException("null cannot be cast to non-null type kotlin.reflect.KClass<out T>");
        }
        return object;
    }

    @NotNull
    public static final <T> Class<T> getJavaClass(@NotNull T object) {
        Intrinsics.checkParameterIsNotNull(object, "$receiver");
        object = object.getClass();
        if (object == null) {
            throw new TypeCastException("null cannot be cast to non-null type java.lang.Class<T>");
        }
        return object;
    }

    @JvmName(name="getJavaClass")
    @NotNull
    public static final <T> Class<T> getJavaClass(@NotNull KClass<T> object) {
        Intrinsics.checkParameterIsNotNull(object, "$receiver");
        object = ((ClassBasedDeclarationContainer)object).getJClass();
        if (object == null) {
            throw new TypeCastException("null cannot be cast to non-null type java.lang.Class<T>");
        }
        return object;
    }

    @NotNull
    public static final <T> Class<T> getJavaObjectType(@NotNull KClass<T> object) {
        Intrinsics.checkParameterIsNotNull(object, "$receiver");
        object = ((ClassBasedDeclarationContainer)object).getJClass();
        if (!object.isPrimitive()) {
            if (object == null) {
                throw new TypeCastException("null cannot be cast to non-null type java.lang.Class<T>");
            }
            return object;
        }
        String string2 = object.getName();
        if (string2 != null) {
            switch (string2.hashCode()) {
                default: {
                    break;
                }
                case 109413500: {
                    if (!string2.equals("short")) break;
                    object = Short.class;
                    break;
                }
                case 97526364: {
                    if (!string2.equals("float")) break;
                    object = Float.class;
                    break;
                }
                case 64711720: {
                    if (!string2.equals("boolean")) break;
                    object = Boolean.class;
                    break;
                }
                case 3625364: {
                    if (!string2.equals("void")) break;
                    object = Void.class;
                    break;
                }
                case 3327612: {
                    if (!string2.equals("long")) break;
                    object = Long.class;
                    break;
                }
                case 3052374: {
                    if (!string2.equals("char")) break;
                    object = Character.class;
                    break;
                }
                case 3039496: {
                    if (!string2.equals("byte")) break;
                    object = Byte.class;
                    break;
                }
                case 104431: {
                    if (!string2.equals("int")) break;
                    object = Integer.class;
                    break;
                }
                case -1325958191: {
                    if (!string2.equals("double")) break;
                    object = Double.class;
                }
            }
        }
        if (object == null) {
            throw new TypeCastException("null cannot be cast to non-null type java.lang.Class<T>");
        }
        return object;
    }

    @Nullable
    public static final <T> Class<T> getJavaPrimitiveType(@NotNull KClass<T> object) {
        Intrinsics.checkParameterIsNotNull(object, "$receiver");
        object = ((ClassBasedDeclarationContainer)object).getJClass();
        if (object.isPrimitive()) {
            if (object == null) {
                throw new TypeCastException("null cannot be cast to non-null type java.lang.Class<T>");
            }
            return object;
        }
        if ((object = object.getName()) != null) {
            switch (object.hashCode()) {
                default: {
                    break;
                }
                case 761287205: {
                    if (!object.equals("java.lang.Double")) break;
                    return Double.TYPE;
                }
                case 399092968: {
                    if (!object.equals("java.lang.Void")) break;
                    return Void.TYPE;
                }
                case 398795216: {
                    if (!object.equals("java.lang.Long")) break;
                    return Long.TYPE;
                }
                case 398507100: {
                    if (!object.equals("java.lang.Byte")) break;
                    return Byte.TYPE;
                }
                case 344809556: {
                    if (!object.equals("java.lang.Boolean")) break;
                    return Boolean.TYPE;
                }
                case 155276373: {
                    if (!object.equals("java.lang.Character")) break;
                    return Character.TYPE;
                }
                case -515992664: {
                    if (!object.equals("java.lang.Short")) break;
                    return Short.TYPE;
                }
                case -527879800: {
                    if (!object.equals("java.lang.Float")) break;
                    return Float.TYPE;
                }
                case -2056817302: {
                    if (!object.equals("java.lang.Integer")) break;
                    return Integer.TYPE;
                }
            }
        }
        return null;
    }

    @JvmName(name="getKotlinClass")
    @NotNull
    public static final <T> KClass<T> getKotlinClass(@NotNull Class<T> class_) {
        Intrinsics.checkParameterIsNotNull(class_, "$receiver");
        return Reflection.getOrCreateKotlinClass(class_);
    }

    @JvmName(name="getRuntimeClassOfKClassInstance")
    @NotNull
    public static final <T> Class<KClass<T>> getRuntimeClassOfKClassInstance(@NotNull KClass<T> object) {
        Intrinsics.checkParameterIsNotNull(object, "$receiver");
        object = ((Object)object).getClass();
        if (object == null) {
            throw new TypeCastException("null cannot be cast to non-null type java.lang.Class<kotlin.reflect.KClass<T>>");
        }
        return object;
    }

    private static final <T> boolean isArrayOf(@NotNull Object[] arrobject) {
        Intrinsics.reifiedOperationMarker(4, "T");
        return Object.class.isAssignableFrom(arrobject.getClass().getComponentType());
    }

    public static /* synthetic */ void java$annotations(KClass kClass) {
    }

    @Deprecated(level=DeprecationLevel.ERROR, message="Use 'java' property to get Java class corresponding to this Kotlin class or cast this instance to Any if you really want to get the runtime Java class of this implementation of KClass.", replaceWith=@ReplaceWith(expression="(this as Any).javaClass", imports={}))
    public static /* synthetic */ void javaClass$annotations(KClass kClass) {
    }
}

