/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  kotlin.KotlinVersion
 *  kotlin.Metadata
 *  kotlin.PublishedApi
 *  kotlin.SinceKotlin
 *  kotlin.TypeCastException
 *  kotlin.internal.InlineOnly
 *  kotlin.jvm.JvmField
 *  kotlin.jvm.internal.Intrinsics
 *  org.jetbrains.annotations.NotNull
 */
package kotlin.internal;

import kotlin.KotlinVersion;
import kotlin.Metadata;
import kotlin.PublishedApi;
import kotlin.SinceKotlin;
import kotlin.TypeCastException;
import kotlin.internal.InlineOnly;
import kotlin.internal.PlatformImplementations;
import kotlin.jvm.JvmField;
import kotlin.jvm.internal.Intrinsics;
import kotlin.text.StringsKt;
import org.jetbrains.annotations.NotNull;

@Metadata(bv={1, 0, 2}, d1={"\u0000\u001e\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\u000b\n\u0000\n\u0002\u0010\b\n\u0002\b\u0004\n\u0002\u0010\u0000\n\u0002\b\u0004\u001a \u0010\u0002\u001a\u00020\u00032\u0006\u0010\u0004\u001a\u00020\u00052\u0006\u0010\u0006\u001a\u00020\u00052\u0006\u0010\u0007\u001a\u00020\u0005H\u0001\u001a\"\u0010\b\u001a\u0002H\t\"\n\b\u0000\u0010\t\u0018\u0001*\u00020\n2\u0006\u0010\u000b\u001a\u00020\nH\u0083\b\u00a2\u0006\u0002\u0010\f\u001a\b\u0010\r\u001a\u00020\u0005H\u0002\"\u0010\u0010\u0000\u001a\u00020\u00018\u0000X\u0081\u0004\u00a2\u0006\u0002\n\u0000\u00a8\u0006\u000e"}, d2={"IMPLEMENTATIONS", "Lkotlin/internal/PlatformImplementations;", "apiVersionIsAtLeast", "", "major", "", "minor", "patch", "castToBaseType", "T", "", "instance", "(Ljava/lang/Object;)Ljava/lang/Object;", "getJavaVersion", "kotlin-stdlib"}, k=2, mv={1, 1, 10})
public final class PlatformImplementationsKt {
    @JvmField
    @NotNull
    public static final PlatformImplementations IMPLEMENTATIONS;

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    static {
        block16 : {
            block18 : {
                block17 : {
                    var0 = PlatformImplementationsKt.getJavaVersion();
                    if (var0 < 65544) break block17;
                    try {
                        var2_1 /* !! */  = Class.forName("kotlin.internal.jdk8.JDK8PlatformImplementations").newInstance();
                        Intrinsics.checkExpressionValueIsNotNull(var2_1 /* !! */ , (String)"Class.forName(\"kotlin.in\u2026entations\").newInstance()");
                        if (var2_1 /* !! */  != null) ** GOTO lbl9
                        throw new TypeCastException("null cannot be cast to non-null type kotlin.internal.PlatformImplementations");
lbl9: // 1 sources:
                        var1_5 = (PlatformImplementations)var2_1 /* !! */ ;
                        break block16;
                    }
                    catch (ClassNotFoundException var1_8) {}
                    try {
                        var2_2 /* !! */  = Class.forName("kotlin.internal.JRE8PlatformImplementations").newInstance();
                        Intrinsics.checkExpressionValueIsNotNull(var2_2 /* !! */ , (String)"Class.forName(\"kotlin.in\u2026entations\").newInstance()");
                        if (var2_2 /* !! */  != null) ** GOTO lbl18
                        throw new TypeCastException("null cannot be cast to non-null type kotlin.internal.PlatformImplementations");
lbl18: // 1 sources:
                        var1_5 = (PlatformImplementations)var2_2 /* !! */ ;
                        break block16;
                    }
                    catch (ClassNotFoundException var1_11) {}
                }
                if (var0 < 65543) break block18;
                try {
                    var2_3 /* !! */  = Class.forName("kotlin.internal.jdk7.JDK7PlatformImplementations").newInstance();
                    Intrinsics.checkExpressionValueIsNotNull(var2_3 /* !! */ , (String)"Class.forName(\"kotlin.in\u2026entations\").newInstance()");
                    if (var2_3 /* !! */  != null) ** GOTO lbl29
                    throw new TypeCastException("null cannot be cast to non-null type kotlin.internal.PlatformImplementations");
lbl29: // 1 sources:
                    var1_5 = (PlatformImplementations)var2_3 /* !! */ ;
                    break block16;
                }
                catch (ClassNotFoundException var1_14) {}
                try {
                    var2_4 /* !! */  = Class.forName("kotlin.internal.JRE7PlatformImplementations").newInstance();
                    Intrinsics.checkExpressionValueIsNotNull(var2_4 /* !! */ , (String)"Class.forName(\"kotlin.in\u2026entations\").newInstance()");
                    if (var2_4 /* !! */  != null) ** GOTO lbl38
                    throw new TypeCastException("null cannot be cast to non-null type kotlin.internal.PlatformImplementations");
lbl38: // 1 sources:
                    var1_5 = (PlatformImplementations)var2_4 /* !! */ ;
                    break block16;
                }
                catch (ClassNotFoundException var1_17) {}
            }
            var1_5 = new PlatformImplementations();
        }
        PlatformImplementationsKt.IMPLEMENTATIONS = var1_5;
        return;
        catch (ClassCastException var1_6) {}
        var2_1 /* !! */  = var2_1 /* !! */ .getClass().getClassLoader();
        var3_18 = PlatformImplementations.class.getClassLoader();
        var4_22 = new StringBuilder();
        var4_22.append("Instance classloader: ");
        var4_22.append(var2_1 /* !! */ );
        var4_22.append(", base type classloader: ");
        var4_22.append(var3_18);
        var1_7 = new ClassCastException(var4_22.toString()).initCause(var1_6);
        Intrinsics.checkExpressionValueIsNotNull((Object)var1_7, (String)"ClassCastException(\"Inst\u2026baseTypeCL\").initCause(e)");
        throw var1_7;
        catch (ClassCastException var1_9) {}
        var2_2 /* !! */  = var2_2 /* !! */ .getClass().getClassLoader();
        var3_19 = PlatformImplementations.class.getClassLoader();
        var4_23 = new StringBuilder();
        var4_23.append("Instance classloader: ");
        var4_23.append(var2_2 /* !! */ );
        var4_23.append(", base type classloader: ");
        var4_23.append(var3_19);
        var1_10 = new ClassCastException(var4_23.toString()).initCause(var1_9);
        Intrinsics.checkExpressionValueIsNotNull((Object)var1_10, (String)"ClassCastException(\"Inst\u2026baseTypeCL\").initCause(e)");
        throw var1_10;
        catch (ClassCastException var1_12) {}
        var2_3 /* !! */  = var2_3 /* !! */ .getClass().getClassLoader();
        var3_20 = PlatformImplementations.class.getClassLoader();
        var4_24 = new StringBuilder();
        var4_24.append("Instance classloader: ");
        var4_24.append(var2_3 /* !! */ );
        var4_24.append(", base type classloader: ");
        var4_24.append(var3_20);
        var1_13 = new ClassCastException(var4_24.toString()).initCause(var1_12);
        Intrinsics.checkExpressionValueIsNotNull((Object)var1_13, (String)"ClassCastException(\"Inst\u2026baseTypeCL\").initCause(e)");
        throw var1_13;
        catch (ClassCastException var1_15) {}
        var2_4 /* !! */  = var2_4 /* !! */ .getClass().getClassLoader();
        var3_21 = PlatformImplementations.class.getClassLoader();
        var4_25 = new StringBuilder();
        var4_25.append("Instance classloader: ");
        var4_25.append(var2_4 /* !! */ );
        var4_25.append(", base type classloader: ");
        var4_25.append(var3_21);
        var1_16 = new ClassCastException(var4_25.toString()).initCause(var1_15);
        Intrinsics.checkExpressionValueIsNotNull((Object)var1_16, (String)"ClassCastException(\"Inst\u2026baseTypeCL\").initCause(e)");
        throw var1_16;
    }

    @PublishedApi
    @SinceKotlin(version="1.2")
    public static final boolean apiVersionIsAtLeast(int n, int n2, int n3) {
        return KotlinVersion.CURRENT.isAtLeast(n, n2, n3);
    }

    @InlineOnly
    private static final <T> T castToBaseType(Object object) {
        Object object2;
        try {
            Intrinsics.reifiedOperationMarker((int)1, (String)"T");
            object2 = object;
        }
        catch (ClassCastException classCastException) {
            object = object.getClass().getClassLoader();
            Intrinsics.reifiedOperationMarker((int)4, (String)"T");
            ClassLoader classLoader = Object.class.getClassLoader();
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("Instance classloader: ");
            stringBuilder.append(object);
            stringBuilder.append(", base type classloader: ");
            stringBuilder.append(classLoader);
            object = new ClassCastException(stringBuilder.toString()).initCause(classCastException);
            Intrinsics.checkExpressionValueIsNotNull((Object)object, (String)"ClassCastException(\"Inst\u2026baseTypeCL\").initCause(e)");
            throw object;
        }
        return (T)object2;
    }

    /*
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    private static final int getJavaVersion() {
        int n;
        String string2 = System.getProperty("java.specification.version");
        if (string2 == null) return 65542;
        CharSequence charSequence = string2;
        int n2 = StringsKt.indexOf$default((CharSequence)charSequence, (char)'.', (int)0, (boolean)false, (int)6, null);
        if (n2 < 0) {
            int n3 = Integer.parseInt(string2);
            return n3 * 65536;
        }
        int n4 = n2 + 1;
        int n5 = n = StringsKt.indexOf$default((CharSequence)charSequence, (char)'.', (int)n4, (boolean)false, (int)4, null);
        if (n < 0) {
            n5 = string2.length();
        }
        if (string2 == null) {
            throw new TypeCastException("null cannot be cast to non-null type java.lang.String");
        }
        charSequence = string2.substring(0, n2);
        Intrinsics.checkExpressionValueIsNotNull((Object)charSequence, (String)"(this as java.lang.Strin\u2026ing(startIndex, endIndex)");
        if (string2 == null) {
            throw new TypeCastException("null cannot be cast to non-null type java.lang.String");
        }
        string2 = string2.substring(n4, n5);
        Intrinsics.checkExpressionValueIsNotNull((Object)string2, (String)"(this as java.lang.Strin\u2026ing(startIndex, endIndex)");
        try {
            n5 = Integer.parseInt((String)charSequence);
            n = Integer.parseInt(string2);
            return n5 * 65536 + n;
        }
        catch (NumberFormatException numberFormatException) {
            return 65542;
        }
        catch (NumberFormatException numberFormatException) {
            return 65542;
        }
    }
}

