/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  kotlin.Metadata
 *  kotlin.Pair
 *  kotlin.SinceKotlin
 *  kotlin.TypeCastException
 *  kotlin.Unit
 *  kotlin.comparisons.ComparisonsKt__ComparisonsKt$compareBy
 *  kotlin.comparisons.ComparisonsKt__ComparisonsKt$compareByDescending
 *  kotlin.internal.InlineOnly
 *  kotlin.jvm.JvmName
 *  kotlin.jvm.functions.Function1
 *  kotlin.jvm.functions.Function2
 *  kotlin.jvm.functions.Function3
 *  kotlin.jvm.internal.Intrinsics
 *  kotlin.sequences.SequencesKt___SequencesKt$asIterable$
 *  kotlin.sequences.SequencesKt___SequencesKt$asIterable$$inlined
 *  kotlin.sequences.SequencesKt___SequencesKt$asIterable$$inlined$Iterable
 *  kotlin.sequences.SequencesKt___SequencesKt$distinct
 *  kotlin.sequences.SequencesKt___SequencesKt$elementAt
 *  kotlin.sequences.SequencesKt___SequencesKt$filterIndexed
 *  kotlin.sequences.SequencesKt___SequencesKt$filterIsInstance
 *  kotlin.sequences.SequencesKt___SequencesKt$filterNotNull
 *  kotlin.sequences.SequencesKt___SequencesKt$flatMap
 *  kotlin.sequences.SequencesKt___SequencesKt$groupingBy
 *  kotlin.sequences.SequencesKt___SequencesKt$minus
 *  kotlin.sequences.SequencesKt___SequencesKt$onEach
 *  kotlin.sequences.SequencesKt___SequencesKt$requireNoNulls
 *  kotlin.sequences.SequencesKt___SequencesKt$sorted
 *  kotlin.sequences.SequencesKt___SequencesKt$sortedWith
 *  kotlin.sequences.SequencesKt___SequencesKt$zip
 *  kotlin.sequences.SequencesKt___SequencesKt$zipWithNext
 *  org.jetbrains.annotations.NotNull
 *  org.jetbrains.annotations.Nullable
 */
package kotlin.sequences;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;
import kotlin.Metadata;
import kotlin.Pair;
import kotlin.SinceKotlin;
import kotlin.TypeCastException;
import kotlin.Unit;
import kotlin.collections.ArraysKt;
import kotlin.collections.CollectionsKt;
import kotlin.collections.Grouping;
import kotlin.collections.IndexedValue;
import kotlin.collections.SetsKt;
import kotlin.collections.SlidingWindowKt;
import kotlin.comparisons.ComparisonsKt;
import kotlin.comparisons.ComparisonsKt__ComparisonsKt;
import kotlin.coroutines.experimental.Continuation;
import kotlin.coroutines.experimental.SequenceBuilderKt;
import kotlin.internal.InlineOnly;
import kotlin.jvm.JvmName;
import kotlin.jvm.functions.Function1;
import kotlin.jvm.functions.Function2;
import kotlin.jvm.functions.Function3;
import kotlin.jvm.internal.DoubleCompanionObject;
import kotlin.jvm.internal.Intrinsics;
import kotlin.sequences.DistinctSequence;
import kotlin.sequences.DropSequence;
import kotlin.sequences.DropTakeSequence;
import kotlin.sequences.DropWhileSequence;
import kotlin.sequences.FilteringSequence;
import kotlin.sequences.FlatteningSequence;
import kotlin.sequences.IndexingSequence;
import kotlin.sequences.MergingSequence;
import kotlin.sequences.Sequence;
import kotlin.sequences.SequencesKt;
import kotlin.sequences.SequencesKt___SequencesJvmKt;
import kotlin.sequences.SequencesKt___SequencesKt;
import kotlin.sequences.SequencesKt___SequencesKt$asIterable$;
import kotlin.sequences.TakeSequence;
import kotlin.sequences.TakeWhileSequence;
import kotlin.sequences.TransformingIndexedSequence;
import kotlin.sequences.TransformingSequence;
import kotlin.text.StringsKt;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

/*
 * Duplicate member names - consider using --renamedupmembers true
 */
@Metadata(bv={1, 0, 2}, d1={"\u0000\u0088\u0002\n\u0000\n\u0002\u0010\u000b\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0010\u001c\n\u0002\b\u0002\n\u0002\u0010$\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0010%\n\u0002\b\u0005\n\u0002\u0010\u0006\n\u0002\u0010\u0005\n\u0002\b\u0002\n\u0002\u0010\u0007\n\u0000\n\u0002\u0010\b\n\u0000\n\u0002\u0010\t\n\u0000\n\u0002\u0010\n\n\u0002\b\u0002\n\u0002\u0010 \n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0012\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0010\u001f\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0010\u0000\n\u0002\b\u0012\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0010\u0002\n\u0002\b\u0004\n\u0002\u0010!\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0006\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0010\r\n\u0002\b\u0006\n\u0002\u0010\u000e\n\u0002\b\f\n\u0002\u0010\u000f\n\u0002\b\u0006\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0007\n\u0002\u0010\u0011\n\u0002\b!\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0010#\n\u0000\n\u0002\u0010\"\n\u0002\b\u0004\n\u0002\u0018\u0002\n\u0002\b\u0006\u001a-\u0010\u0000\u001a\u00020\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u001a\u0016\u0010\u0006\u001a\u00020\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a-\u0010\u0006\u001a\u00020\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u001a\u001c\u0010\u0007\u001a\b\u0012\u0004\u0012\u0002H\u00020\b\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a\u001f\u0010\t\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003H\u0087\b\u001aQ\u0010\n\u001a\u000e\u0012\u0004\u0012\u0002H\f\u0012\u0004\u0012\u0002H\r0\u000b\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f\"\u0004\b\u0002\u0010\r*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u001e\u0010\u000e\u001a\u001a\u0012\u0004\u0012\u0002H\u0002\u0012\u0010\u0012\u000e\u0012\u0004\u0012\u0002H\f\u0012\u0004\u0012\u0002H\r0\u000f0\u0005H\u0086\b\u001a?\u0010\u0010\u001a\u000e\u0012\u0004\u0012\u0002H\f\u0012\u0004\u0012\u0002H\u00020\u000b\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u0005H\u0086\b\u001aY\u0010\u0010\u001a\u000e\u0012\u0004\u0012\u0002H\f\u0012\u0004\u0012\u0002H\r0\u000b\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f\"\u0004\b\u0002\u0010\r*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u00052\u0012\u0010\u0012\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\r0\u0005H\u0086\b\u001aZ\u0010\u0013\u001a\u0002H\u0014\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f\"\u0018\b\u0002\u0010\u0014*\u0012\u0012\u0006\b\u0000\u0012\u0002H\f\u0012\u0006\b\u0000\u0012\u0002H\u00020\u0015*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002H\u00142\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u0005H\u0086\b\u00a2\u0006\u0002\u0010\u0017\u001at\u0010\u0013\u001a\u0002H\u0014\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f\"\u0004\b\u0002\u0010\r\"\u0018\b\u0003\u0010\u0014*\u0012\u0012\u0006\b\u0000\u0012\u0002H\f\u0012\u0006\b\u0000\u0012\u0002H\r0\u0015*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002H\u00142\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u00052\u0012\u0010\u0012\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\r0\u0005H\u0086\b\u00a2\u0006\u0002\u0010\u0018\u001al\u0010\u0019\u001a\u0002H\u0014\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f\"\u0004\b\u0002\u0010\r\"\u0018\b\u0003\u0010\u0014*\u0012\u0012\u0006\b\u0000\u0012\u0002H\f\u0012\u0006\b\u0000\u0012\u0002H\r0\u0015*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002H\u00142\u001e\u0010\u000e\u001a\u001a\u0012\u0004\u0012\u0002H\u0002\u0012\u0010\u0012\u000e\u0012\u0004\u0012\u0002H\f\u0012\u0004\u0012\u0002H\r0\u000f0\u0005H\u0086\b\u00a2\u0006\u0002\u0010\u0017\u001a\u0017\u0010\u001a\u001a\u00020\u001b*\b\u0012\u0004\u0012\u00020\u001c0\u0003H\u0007\u00a2\u0006\u0002\b\u001d\u001a\u0017\u0010\u001a\u001a\u00020\u001b*\b\u0012\u0004\u0012\u00020\u001b0\u0003H\u0007\u00a2\u0006\u0002\b\u001e\u001a\u0017\u0010\u001a\u001a\u00020\u001b*\b\u0012\u0004\u0012\u00020\u001f0\u0003H\u0007\u00a2\u0006\u0002\b \u001a\u0017\u0010\u001a\u001a\u00020\u001b*\b\u0012\u0004\u0012\u00020!0\u0003H\u0007\u00a2\u0006\u0002\b\"\u001a\u0017\u0010\u001a\u001a\u00020\u001b*\b\u0012\u0004\u0012\u00020#0\u0003H\u0007\u00a2\u0006\u0002\b$\u001a\u0017\u0010\u001a\u001a\u00020\u001b*\b\u0012\u0004\u0012\u00020%0\u0003H\u0007\u00a2\u0006\u0002\b&\u001a,\u0010'\u001a\u000e\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00020(0\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010)\u001a\u00020!H\u0007\u001aF\u0010'\u001a\b\u0012\u0004\u0012\u0002H*0\u0003\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010**\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010)\u001a\u00020!2\u0018\u0010\u000e\u001a\u0014\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00020(\u0012\u0004\u0012\u0002H*0\u0005H\u0007\u001a+\u0010+\u001a\u00020\u0001\"\t\b\u0000\u0010\u0002\u00a2\u0006\u0002\b,*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010-\u001a\u0002H\u0002H\u0086\u0002\u00a2\u0006\u0002\u0010.\u001a\u0016\u0010/\u001a\u00020!\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a-\u0010/\u001a\u00020!\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u001a\u001c\u00100\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a6\u00101\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u00102\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u0005\u001a$\u00103\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u00104\u001a\u00020!\u001a0\u00105\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005\u001a#\u00106\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u00107\u001a\u00020!\u00a2\u0006\u0002\u00108\u001a7\u00109\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u00107\u001a\u00020!2\u0012\u0010:\u001a\u000e\u0012\u0004\u0012\u00020!\u0012\u0004\u0012\u0002H\u00020\u0005\u00a2\u0006\u0002\u0010;\u001a%\u0010<\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u00107\u001a\u00020!\u00a2\u0006\u0002\u00108\u001a0\u0010=\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005\u001aE\u0010>\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032'\u0010\u0004\u001a#\u0012\u0013\u0012\u00110!\u00a2\u0006\f\b@\u0012\b\bA\u0012\u0004\b\b(7\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010?\u001aa\u0010B\u001a\u0002HC\"\u0004\b\u0000\u0010\u0002\"\u0010\b\u0001\u0010C*\n\u0012\u0006\b\u0000\u0012\u0002H\u00020D*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HC2'\u0010\u0004\u001a#\u0012\u0013\u0012\u00110!\u00a2\u0006\f\b@\u0012\b\bA\u0012\u0004\b\b(7\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010?H\u0086\b\u00a2\u0006\u0002\u0010E\u001a$\u0010F\u001a\r\u0012\t\u0012\u0007H*\u00a2\u0006\u0002\bG0\u0003\"\u0006\b\u0000\u0010*\u0018\u0001*\u0006\u0012\u0002\b\u00030\u0003H\u0086\b\u001a8\u0010H\u001a\u0002HC\"\u0006\b\u0000\u0010*\u0018\u0001\"\u0010\b\u0001\u0010C*\n\u0012\u0006\b\u0000\u0012\u0002H*0D*\u0006\u0012\u0002\b\u00030\u00032\u0006\u0010\u0016\u001a\u0002HCH\u0086\b\u00a2\u0006\u0002\u0010I\u001a0\u0010J\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005\u001a\"\u0010K\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\b\b\u0000\u0010\u0002*\u00020L*\n\u0012\u0006\u0012\u0004\u0018\u0001H\u00020\u0003\u001a;\u0010M\u001a\u0002HC\"\u0010\b\u0000\u0010C*\n\u0012\u0006\b\u0000\u0012\u0002H\u00020D\"\b\b\u0001\u0010\u0002*\u00020L*\n\u0012\u0006\u0012\u0004\u0018\u0001H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HC\u00a2\u0006\u0002\u0010I\u001aL\u0010N\u001a\u0002HC\"\u0004\b\u0000\u0010\u0002\"\u0010\b\u0001\u0010C*\n\u0012\u0006\b\u0000\u0012\u0002H\u00020D*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HC2\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u00a2\u0006\u0002\u0010O\u001aL\u0010P\u001a\u0002HC\"\u0004\b\u0000\u0010\u0002\"\u0010\b\u0001\u0010C*\n\u0012\u0006\b\u0000\u0012\u0002H\u00020D*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HC2\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u00a2\u0006\u0002\u0010O\u001a4\u0010Q\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0087\b\u00a2\u0006\u0002\u0010R\u001a4\u0010S\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0087\b\u00a2\u0006\u0002\u0010R\u001a\u001b\u0010T\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u00a2\u0006\u0002\u0010U\u001a2\u0010T\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u00a2\u0006\u0002\u0010R\u001a\u001d\u0010V\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u00a2\u0006\u0002\u0010U\u001a4\u0010V\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u00a2\u0006\u0002\u0010R\u001a<\u0010W\u001a\b\u0012\u0004\u0012\u0002H*0\u0003\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010**\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0018\u0010\u000e\u001a\u0014\u0012\u0004\u0012\u0002H\u0002\u0012\n\u0012\b\u0012\u0004\u0012\u0002H*0\u00030\u0005\u001aX\u0010X\u001a\u0002HC\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010*\"\u0010\b\u0002\u0010C*\n\u0012\u0006\b\u0000\u0012\u0002H*0D*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HC2\u0018\u0010\u000e\u001a\u0014\u0012\u0004\u0012\u0002H\u0002\u0012\n\u0012\b\u0012\u0004\u0012\u0002H*0\u00030\u0005H\u0086\b\u00a2\u0006\u0002\u0010O\u001aU\u0010Y\u001a\u0002H*\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010**\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010Z\u001a\u0002H*2'\u0010[\u001a#\u0012\u0013\u0012\u0011H*\u00a2\u0006\f\b@\u0012\b\bA\u0012\u0004\b\b(\\\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H*0?H\u0086\b\u00a2\u0006\u0002\u0010]\u001aj\u0010^\u001a\u0002H*\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010**\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010Z\u001a\u0002H*2<\u0010[\u001a8\u0012\u0013\u0012\u00110!\u00a2\u0006\f\b@\u0012\b\bA\u0012\u0004\b\b(7\u0012\u0013\u0012\u0011H*\u00a2\u0006\f\b@\u0012\b\bA\u0012\u0004\b\b(\\\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H*0_H\u0086\b\u00a2\u0006\u0002\u0010`\u001a-\u0010a\u001a\u00020b\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010c\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020b0\u0005H\u0086\b\u001aB\u0010d\u001a\u00020b\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032'\u0010c\u001a#\u0012\u0013\u0012\u00110!\u00a2\u0006\f\b@\u0012\b\bA\u0012\u0004\b\b(7\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020b0?H\u0086\b\u001aE\u0010e\u001a\u0014\u0012\u0004\u0012\u0002H\f\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00020(0\u000b\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u0005H\u0086\b\u001a_\u0010e\u001a\u0014\u0012\u0004\u0012\u0002H\f\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\r0(0\u000b\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f\"\u0004\b\u0002\u0010\r*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u00052\u0012\u0010\u0012\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\r0\u0005H\u0086\b\u001a^\u0010f\u001a\u0002H\u0014\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f\"\u001c\b\u0002\u0010\u0014*\u0016\u0012\u0006\b\u0000\u0012\u0002H\f\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00020g0\u0015*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002H\u00142\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u0005H\u0086\b\u00a2\u0006\u0002\u0010\u0017\u001ax\u0010f\u001a\u0002H\u0014\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f\"\u0004\b\u0002\u0010\r\"\u001c\b\u0003\u0010\u0014*\u0016\u0012\u0006\b\u0000\u0012\u0002H\f\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\r0g0\u0015*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002H\u00142\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u00052\u0012\u0010\u0012\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\r0\u0005H\u0086\b\u00a2\u0006\u0002\u0010\u0018\u001aA\u0010h\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0i\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0014\b\u0004\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u0005H\u0087\b\u001a(\u0010j\u001a\u00020!\"\t\b\u0000\u0010\u0002\u00a2\u0006\u0002\b,*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010-\u001a\u0002H\u0002\u00a2\u0006\u0002\u0010k\u001a-\u0010l\u001a\u00020!\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u001a-\u0010m\u001a\u00020!\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u001a{\u0010n\u001a\u0002Ho\"\u0004\b\u0000\u0010\u0002\"\f\b\u0001\u0010o*\u00060pj\u0002`q*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010r\u001a\u0002Ho2\b\b\u0002\u0010s\u001a\u00020t2\b\b\u0002\u0010u\u001a\u00020t2\b\b\u0002\u0010v\u001a\u00020t2\b\b\u0002\u0010w\u001a\u00020!2\b\b\u0002\u0010x\u001a\u00020t2\u0016\b\u0002\u0010\u000e\u001a\u0010\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020t\u0018\u00010\u0005\u00a2\u0006\u0002\u0010y\u001a`\u0010z\u001a\u00020{\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\b\b\u0002\u0010s\u001a\u00020t2\b\b\u0002\u0010u\u001a\u00020t2\b\b\u0002\u0010v\u001a\u00020t2\b\b\u0002\u0010w\u001a\u00020!2\b\b\u0002\u0010x\u001a\u00020t2\u0016\b\u0002\u0010\u000e\u001a\u0010\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020t\u0018\u00010\u0005\u001a\u001b\u0010|\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u00a2\u0006\u0002\u0010U\u001a2\u0010|\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u00a2\u0006\u0002\u0010R\u001a(\u0010}\u001a\u00020!\"\t\b\u0000\u0010\u0002\u00a2\u0006\u0002\b,*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010-\u001a\u0002H\u0002\u00a2\u0006\u0002\u0010k\u001a\u001d\u0010~\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u00a2\u0006\u0002\u0010U\u001a4\u0010~\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u00a2\u0006\u0002\u0010R\u001a6\u0010\u001a\b\u0012\u0004\u0012\u0002H*0\u0003\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010**\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u000e\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H*0\u0005\u001aL\u0010?\u0001\u001a\b\u0012\u0004\u0012\u0002H*0\u0003\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010**\b\u0012\u0004\u0012\u0002H\u00020\u00032'\u0010\u000e\u001a#\u0012\u0013\u0012\u00110!\u00a2\u0006\f\b@\u0012\b\bA\u0012\u0004\b\b(7\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H*0?\u001aR\u0010\u0081\u0001\u001a\b\u0012\u0004\u0012\u0002H*0\u0003\"\u0004\b\u0000\u0010\u0002\"\b\b\u0001\u0010**\u00020L*\b\u0012\u0004\u0012\u0002H\u00020\u00032)\u0010\u000e\u001a%\u0012\u0013\u0012\u00110!\u00a2\u0006\f\b@\u0012\b\bA\u0012\u0004\b\b(7\u0012\u0004\u0012\u0002H\u0002\u0012\u0006\u0012\u0004\u0018\u0001H*0?\u001an\u0010\u0082\u0001\u001a\u0002HC\"\u0004\b\u0000\u0010\u0002\"\b\b\u0001\u0010**\u00020L\"\u0010\b\u0002\u0010C*\n\u0012\u0006\b\u0000\u0012\u0002H*0D*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HC2)\u0010\u000e\u001a%\u0012\u0013\u0012\u00110!\u00a2\u0006\f\b@\u0012\b\bA\u0012\u0004\b\b(7\u0012\u0004\u0012\u0002H\u0002\u0012\u0006\u0012\u0004\u0018\u0001H*0?H\u0086\b\u00a2\u0006\u0002\u0010E\u001ah\u0010\u0083\u0001\u001a\u0002HC\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010*\"\u0010\b\u0002\u0010C*\n\u0012\u0006\b\u0000\u0012\u0002H*0D*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HC2'\u0010\u000e\u001a#\u0012\u0013\u0012\u00110!\u00a2\u0006\f\b@\u0012\b\bA\u0012\u0004\b\b(7\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H*0?H\u0086\b\u00a2\u0006\u0002\u0010E\u001a=\u0010\u0084\u0001\u001a\b\u0012\u0004\u0012\u0002H*0\u0003\"\u0004\b\u0000\u0010\u0002\"\b\b\u0001\u0010**\u00020L*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0014\u0010\u000e\u001a\u0010\u0012\u0004\u0012\u0002H\u0002\u0012\u0006\u0012\u0004\u0018\u0001H*0\u0005\u001aY\u0010\u0085\u0001\u001a\u0002HC\"\u0004\b\u0000\u0010\u0002\"\b\b\u0001\u0010**\u00020L\"\u0010\b\u0002\u0010C*\n\u0012\u0006\b\u0000\u0012\u0002H*0D*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HC2\u0014\u0010\u000e\u001a\u0010\u0012\u0004\u0012\u0002H\u0002\u0012\u0006\u0012\u0004\u0018\u0001H*0\u0005H\u0086\b\u00a2\u0006\u0002\u0010O\u001aS\u0010\u0086\u0001\u001a\u0002HC\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010*\"\u0010\b\u0002\u0010C*\n\u0012\u0006\b\u0000\u0012\u0002H*0D*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HC2\u0012\u0010\u000e\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H*0\u0005H\u0086\b\u00a2\u0006\u0002\u0010O\u001a*\u0010\u0087\u0001\u001a\u0004\u0018\u0001H\u0002\"\u000f\b\u0000\u0010\u0002*\t\u0012\u0004\u0012\u0002H\u00020\u0088\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u00a2\u0006\u0003\u0010\u0089\u0001\u001a\u001b\u0010\u0087\u0001\u001a\u0004\u0018\u00010\u001b*\b\u0012\u0004\u0012\u00020\u001b0\u0003H\u0007\u00a2\u0006\u0003\u0010\u008a\u0001\u001a\u001b\u0010\u0087\u0001\u001a\u0004\u0018\u00010\u001f*\b\u0012\u0004\u0012\u00020\u001f0\u0003H\u0007\u00a2\u0006\u0003\u0010\u008b\u0001\u001aF\u0010\u008c\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002\"\u000f\b\u0001\u0010**\t\u0012\u0004\u0012\u0002H*0\u0088\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u00102\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H*0\u0005H\u0086\b\u00a2\u0006\u0002\u0010R\u001a>\u0010\u008d\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u001d\u0010\u008e\u0001\u001a\u0018\u0012\u0006\b\u0000\u0012\u0002H\u00020\u008f\u0001j\u000b\u0012\u0006\b\u0000\u0012\u0002H\u0002`\u0090\u0001\u00a2\u0006\u0003\u0010\u0091\u0001\u001a*\u0010\u0092\u0001\u001a\u0004\u0018\u0001H\u0002\"\u000f\b\u0000\u0010\u0002*\t\u0012\u0004\u0012\u0002H\u00020\u0088\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u00a2\u0006\u0003\u0010\u0089\u0001\u001a\u001b\u0010\u0092\u0001\u001a\u0004\u0018\u00010\u001b*\b\u0012\u0004\u0012\u00020\u001b0\u0003H\u0007\u00a2\u0006\u0003\u0010\u008a\u0001\u001a\u001b\u0010\u0092\u0001\u001a\u0004\u0018\u00010\u001f*\b\u0012\u0004\u0012\u00020\u001f0\u0003H\u0007\u00a2\u0006\u0003\u0010\u008b\u0001\u001aF\u0010\u0093\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002\"\u000f\b\u0001\u0010**\t\u0012\u0004\u0012\u0002H*0\u0088\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u00102\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H*0\u0005H\u0086\b\u00a2\u0006\u0002\u0010R\u001a>\u0010\u0094\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u001d\u0010\u008e\u0001\u001a\u0018\u0012\u0006\b\u0000\u0012\u0002H\u00020\u008f\u0001j\u000b\u0012\u0006\b\u0000\u0012\u0002H\u0002`\u0090\u0001\u00a2\u0006\u0003\u0010\u0091\u0001\u001a.\u0010\u0095\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010-\u001a\u0002H\u0002H\u0086\u0002\u00a2\u0006\u0003\u0010\u0096\u0001\u001a8\u0010\u0095\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0010\u0010\u0097\u0001\u001a\u000b\u0012\u0006\b\u0001\u0012\u0002H\u00020\u0098\u0001H\u0086\u0002\u00a2\u0006\u0003\u0010\u0099\u0001\u001a/\u0010\u0095\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\r\u0010\u0097\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\bH\u0086\u0002\u001a/\u0010\u0095\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\r\u0010\u0097\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003H\u0086\u0002\u001a.\u0010\u009a\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010-\u001a\u0002H\u0002H\u0087\b\u00a2\u0006\u0003\u0010\u0096\u0001\u001a\u0017\u0010\u009b\u0001\u001a\u00020\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a.\u0010\u009b\u0001\u001a\u00020\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u001a3\u0010\u009c\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010c\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020b0\u0005H\u0007\u001aF\u0010\u009d\u0001\u001a\u001a\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00020(\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00020(0\u000f\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u001a.\u0010\u009e\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010-\u001a\u0002H\u0002H\u0086\u0002\u00a2\u0006\u0003\u0010\u0096\u0001\u001a8\u0010\u009e\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0010\u0010\u0097\u0001\u001a\u000b\u0012\u0006\b\u0001\u0012\u0002H\u00020\u0098\u0001H\u0086\u0002\u00a2\u0006\u0003\u0010\u0099\u0001\u001a/\u0010\u009e\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\r\u0010\u0097\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\bH\u0086\u0002\u001a/\u0010\u009e\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\r\u0010\u0097\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003H\u0086\u0002\u001a.\u0010\u009f\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010-\u001a\u0002H\u0002H\u0087\b\u00a2\u0006\u0003\u0010\u0096\u0001\u001aX\u0010\u00a0\u0001\u001a\u0003H\u00a1\u0001\"\u0005\b\u0000\u0010\u00a1\u0001\"\t\b\u0001\u0010\u0002*\u0003H\u00a1\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032)\u0010[\u001a%\u0012\u0014\u0012\u0012H\u00a1\u0001\u00a2\u0006\f\b@\u0012\b\bA\u0012\u0004\b\b(\\\u0012\u0004\u0012\u0002H\u0002\u0012\u0005\u0012\u0003H\u00a1\u00010?H\u0086\b\u00a2\u0006\u0003\u0010\u00a2\u0001\u001am\u0010\u00a3\u0001\u001a\u0003H\u00a1\u0001\"\u0005\b\u0000\u0010\u00a1\u0001\"\t\b\u0001\u0010\u0002*\u0003H\u00a1\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032>\u0010[\u001a:\u0012\u0013\u0012\u00110!\u00a2\u0006\f\b@\u0012\b\bA\u0012\u0004\b\b(7\u0012\u0014\u0012\u0012H\u00a1\u0001\u00a2\u0006\f\b@\u0012\b\bA\u0012\u0004\b\b(\\\u0012\u0004\u0012\u0002H\u0002\u0012\u0005\u0012\u0003H\u00a1\u00010_H\u0086\b\u00a2\u0006\u0003\u0010\u00a4\u0001\u001a#\u0010\u00a5\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\b\b\u0000\u0010\u0002*\u00020L*\n\u0012\u0006\u0012\u0004\u0018\u0001H\u00020\u0003\u001a\u001c\u0010\u00a6\u0001\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u00a2\u0006\u0002\u0010U\u001a3\u0010\u00a6\u0001\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u00a2\u0006\u0002\u0010R\u001a\u001e\u0010\u00a7\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u00a2\u0006\u0002\u0010U\u001a5\u0010\u00a7\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u00a2\u0006\u0002\u0010R\u001a(\u0010\u00a8\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u000f\b\u0000\u0010\u0002*\t\u0012\u0004\u0012\u0002H\u00020\u0088\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001aI\u0010\u00a9\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002\"\u000f\b\u0001\u0010**\t\u0012\u0004\u0012\u0002H*0\u0088\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0016\b\u0004\u00102\u001a\u0010\u0012\u0004\u0012\u0002H\u0002\u0012\u0006\u0012\u0004\u0018\u0001H*0\u0005H\u0086\b\u001aI\u0010\u00aa\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002\"\u000f\b\u0001\u0010**\t\u0012\u0004\u0012\u0002H*0\u0088\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0016\b\u0004\u00102\u001a\u0010\u0012\u0004\u0012\u0002H\u0002\u0012\u0006\u0012\u0004\u0018\u0001H*0\u0005H\u0086\b\u001a(\u0010\u00ab\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u000f\b\u0000\u0010\u0002*\t\u0012\u0004\u0012\u0002H\u00020\u0088\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a<\u0010\u00ac\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u001d\u0010\u008e\u0001\u001a\u0018\u0012\u0006\b\u0000\u0012\u0002H\u00020\u008f\u0001j\u000b\u0012\u0006\b\u0000\u0012\u0002H\u0002`\u0090\u0001\u001a\u0019\u0010\u00ad\u0001\u001a\u00020!*\b\u0012\u0004\u0012\u00020\u001c0\u0003H\u0007\u00a2\u0006\u0003\b\u00ae\u0001\u001a\u0019\u0010\u00ad\u0001\u001a\u00020\u001b*\b\u0012\u0004\u0012\u00020\u001b0\u0003H\u0007\u00a2\u0006\u0003\b\u00af\u0001\u001a\u0019\u0010\u00ad\u0001\u001a\u00020\u001f*\b\u0012\u0004\u0012\u00020\u001f0\u0003H\u0007\u00a2\u0006\u0003\b\u00b0\u0001\u001a\u0019\u0010\u00ad\u0001\u001a\u00020!*\b\u0012\u0004\u0012\u00020!0\u0003H\u0007\u00a2\u0006\u0003\b\u00b1\u0001\u001a\u0019\u0010\u00ad\u0001\u001a\u00020#*\b\u0012\u0004\u0012\u00020#0\u0003H\u0007\u00a2\u0006\u0003\b\u00b2\u0001\u001a\u0019\u0010\u00ad\u0001\u001a\u00020!*\b\u0012\u0004\u0012\u00020%0\u0003H\u0007\u00a2\u0006\u0003\b\u00b3\u0001\u001a.\u0010\u00b4\u0001\u001a\u00020!\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u00102\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020!0\u0005H\u0086\b\u001a.\u0010\u00b5\u0001\u001a\u00020\u001b\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u00102\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u001b0\u0005H\u0086\b\u001a%\u0010\u00b6\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u00104\u001a\u00020!\u001a1\u0010\u00b7\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005\u001a6\u0010\u00b8\u0001\u001a\u0002HC\"\u0004\b\u0000\u0010\u0002\"\u0010\b\u0001\u0010C*\n\u0012\u0006\b\u0000\u0012\u0002H\u00020D*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HC\u00a2\u0006\u0002\u0010I\u001a)\u0010\u00b9\u0001\u001a\u0014\u0012\u0004\u0012\u0002H\u00020\u00ba\u0001j\t\u0012\u0004\u0012\u0002H\u0002`\u00bb\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a\u001d\u0010\u00bc\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020(\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a\u001d\u0010\u00bd\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020g\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a\u001e\u0010\u00be\u0001\u001a\t\u0012\u0004\u0012\u0002H\u00020\u00bf\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a\u001e\u0010\u00c0\u0001\u001a\t\u0012\u0004\u0012\u0002H\u00020\u00c1\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001aC\u0010\u00c2\u0001\u001a\u000e\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00020(0\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010)\u001a\u00020!2\t\b\u0002\u0010\u00c3\u0001\u001a\u00020!2\t\b\u0002\u0010\u00c4\u0001\u001a\u00020\u0001H\u0007\u001a]\u0010\u00c2\u0001\u001a\b\u0012\u0004\u0012\u0002H*0\u0003\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010**\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010)\u001a\u00020!2\t\b\u0002\u0010\u00c3\u0001\u001a\u00020!2\t\b\u0002\u0010\u00c4\u0001\u001a\u00020\u00012\u0018\u0010\u000e\u001a\u0014\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00020(\u0012\u0004\u0012\u0002H*0\u0005H\u0007\u001a$\u0010\u00c5\u0001\u001a\u000f\u0012\u000b\u0012\t\u0012\u0004\u0012\u0002H\u00020\u00c6\u00010\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001aA\u0010\u00c7\u0001\u001a\u0014\u0012\u0010\u0012\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H*0\u000f0\u0003\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010**\b\u0012\u0004\u0012\u0002H\u00020\u00032\r\u0010\u00c8\u0001\u001a\b\u0012\u0004\u0012\u0002H*0\u0003H\u0086\u0004\u001ar\u0010\u00c7\u0001\u001a\b\u0012\u0004\u0012\u0002H\r0\u0003\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010*\"\u0004\b\u0002\u0010\r*\b\u0012\u0004\u0012\u0002H\u00020\u00032\r\u0010\u00c8\u0001\u001a\b\u0012\u0004\u0012\u0002H*0\u000328\u0010\u000e\u001a4\u0012\u0014\u0012\u0012H\u0002\u00a2\u0006\r\b@\u0012\t\bA\u0012\u0005\b\b(\u00c9\u0001\u0012\u0014\u0012\u0012H*\u00a2\u0006\r\b@\u0012\t\bA\u0012\u0005\b\b(\u00ca\u0001\u0012\u0004\u0012\u0002H\r0?\u001a+\u0010\u00cb\u0001\u001a\u0014\u0012\u0010\u0012\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\u00020\u000f0\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003H\u0007\u001a_\u0010\u00cb\u0001\u001a\b\u0012\u0004\u0012\u0002H*0\u0003\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010**\b\u0012\u0004\u0012\u0002H\u00020\u000328\u0010\u000e\u001a4\u0012\u0014\u0012\u0012H\u0002\u00a2\u0006\r\b@\u0012\t\bA\u0012\u0005\b\b(\u00c9\u0001\u0012\u0014\u0012\u0012H\u0002\u00a2\u0006\r\b@\u0012\t\bA\u0012\u0005\b\b(\u00ca\u0001\u0012\u0004\u0012\u0002H*0?H\u0007\u00a8\u0006\u00cc\u0001"}, d2={"all", "", "T", "Lkotlin/sequences/Sequence;", "predicate", "Lkotlin/Function1;", "any", "asIterable", "", "asSequence", "associate", "", "K", "V", "transform", "Lkotlin/Pair;", "associateBy", "keySelector", "valueTransform", "associateByTo", "M", "", "destination", "(Lkotlin/sequences/Sequence;Ljava/util/Map;Lkotlin/jvm/functions/Function1;)Ljava/util/Map;", "(Lkotlin/sequences/Sequence;Ljava/util/Map;Lkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function1;)Ljava/util/Map;", "associateTo", "average", "", "", "averageOfByte", "averageOfDouble", "", "averageOfFloat", "", "averageOfInt", "", "averageOfLong", "", "averageOfShort", "chunked", "", "size", "R", "contains", "Lkotlin/internal/OnlyInputTypes;", "element", "(Lkotlin/sequences/Sequence;Ljava/lang/Object;)Z", "count", "distinct", "distinctBy", "selector", "drop", "n", "dropWhile", "elementAt", "index", "(Lkotlin/sequences/Sequence;I)Ljava/lang/Object;", "elementAtOrElse", "defaultValue", "(Lkotlin/sequences/Sequence;ILkotlin/jvm/functions/Function1;)Ljava/lang/Object;", "elementAtOrNull", "filter", "filterIndexed", "Lkotlin/Function2;", "Lkotlin/ParameterName;", "name", "filterIndexedTo", "C", "", "(Lkotlin/sequences/Sequence;Ljava/util/Collection;Lkotlin/jvm/functions/Function2;)Ljava/util/Collection;", "filterIsInstance", "Lkotlin/internal/NoInfer;", "filterIsInstanceTo", "(Lkotlin/sequences/Sequence;Ljava/util/Collection;)Ljava/util/Collection;", "filterNot", "filterNotNull", "", "filterNotNullTo", "filterNotTo", "(Lkotlin/sequences/Sequence;Ljava/util/Collection;Lkotlin/jvm/functions/Function1;)Ljava/util/Collection;", "filterTo", "find", "(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)Ljava/lang/Object;", "findLast", "first", "(Lkotlin/sequences/Sequence;)Ljava/lang/Object;", "firstOrNull", "flatMap", "flatMapTo", "fold", "initial", "operation", "acc", "(Lkotlin/sequences/Sequence;Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;", "foldIndexed", "Lkotlin/Function3;", "(Lkotlin/sequences/Sequence;Ljava/lang/Object;Lkotlin/jvm/functions/Function3;)Ljava/lang/Object;", "forEach", "", "action", "forEachIndexed", "groupBy", "groupByTo", "", "groupingBy", "Lkotlin/collections/Grouping;", "indexOf", "(Lkotlin/sequences/Sequence;Ljava/lang/Object;)I", "indexOfFirst", "indexOfLast", "joinTo", "A", "Ljava/lang/Appendable;", "Lkotlin/text/Appendable;", "buffer", "separator", "", "prefix", "postfix", "limit", "truncated", "(Lkotlin/sequences/Sequence;Ljava/lang/Appendable;Ljava/lang/CharSequence;Ljava/lang/CharSequence;Ljava/lang/CharSequence;ILjava/lang/CharSequence;Lkotlin/jvm/functions/Function1;)Ljava/lang/Appendable;", "joinToString", "", "last", "lastIndexOf", "lastOrNull", "map", "mapIndexed", "mapIndexedNotNull", "mapIndexedNotNullTo", "mapIndexedTo", "mapNotNull", "mapNotNullTo", "mapTo", "max", "", "(Lkotlin/sequences/Sequence;)Ljava/lang/Comparable;", "(Lkotlin/sequences/Sequence;)Ljava/lang/Double;", "(Lkotlin/sequences/Sequence;)Ljava/lang/Float;", "maxBy", "maxWith", "comparator", "Ljava/util/Comparator;", "Lkotlin/Comparator;", "(Lkotlin/sequences/Sequence;Ljava/util/Comparator;)Ljava/lang/Object;", "min", "minBy", "minWith", "minus", "(Lkotlin/sequences/Sequence;Ljava/lang/Object;)Lkotlin/sequences/Sequence;", "elements", "", "(Lkotlin/sequences/Sequence;[Ljava/lang/Object;)Lkotlin/sequences/Sequence;", "minusElement", "none", "onEach", "partition", "plus", "plusElement", "reduce", "S", "(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;", "reduceIndexed", "(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function3;)Ljava/lang/Object;", "requireNoNulls", "single", "singleOrNull", "sorted", "sortedBy", "sortedByDescending", "sortedDescending", "sortedWith", "sum", "sumOfByte", "sumOfDouble", "sumOfFloat", "sumOfInt", "sumOfLong", "sumOfShort", "sumBy", "sumByDouble", "take", "takeWhile", "toCollection", "toHashSet", "Ljava/util/HashSet;", "Lkotlin/collections/HashSet;", "toList", "toMutableList", "toMutableSet", "", "toSet", "", "windowed", "step", "partialWindows", "withIndex", "Lkotlin/collections/IndexedValue;", "zip", "other", "a", "b", "zipWithNext", "kotlin-stdlib"}, k=5, mv={1, 1, 10}, xi=1, xs="kotlin/sequences/SequencesKt")
class SequencesKt___SequencesKt
extends SequencesKt___SequencesJvmKt {
    public static final <T> boolean all(@NotNull Sequence<? extends T> object, @NotNull Function1<? super T, Boolean> function1) {
        Intrinsics.checkParameterIsNotNull(object, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(function1, (String)"predicate");
        object = object.iterator();
        while (object.hasNext()) {
            if (((Boolean)function1.invoke(object.next())).booleanValue()) continue;
            return false;
        }
        return true;
    }

    public static final <T> boolean any(@NotNull Sequence<? extends T> sequence) {
        Intrinsics.checkParameterIsNotNull(sequence, (String)"$receiver");
        return sequence.iterator().hasNext();
    }

    public static final <T> boolean any(@NotNull Sequence<? extends T> object, @NotNull Function1<? super T, Boolean> function1) {
        Intrinsics.checkParameterIsNotNull(object, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(function1, (String)"predicate");
        object = object.iterator();
        while (object.hasNext()) {
            if (!((Boolean)function1.invoke(object.next())).booleanValue()) continue;
            return true;
        }
        return false;
    }

    @NotNull
    public static final <T> Iterable<T> asIterable(@NotNull Sequence<? extends T> sequence) {
        Intrinsics.checkParameterIsNotNull(sequence, (String)"$receiver");
        return new Iterable<T>(sequence){
            final /* synthetic */ Sequence receiver$0$inlined;
            {
                this.receiver$0$inlined = sequence;
            }

            @NotNull
            public Iterator<T> iterator() {
                return this.receiver$0$inlined.iterator();
            }
        };
    }

    @InlineOnly
    private static final <T> Sequence<T> asSequence(@NotNull Sequence<? extends T> sequence) {
        return sequence;
    }

    @NotNull
    public static final <T, K, V> Map<K, V> associate(@NotNull Sequence<? extends T> object, @NotNull Function1<? super T, ? extends Pair<? extends K, ? extends V>> function1) {
        Intrinsics.checkParameterIsNotNull(object, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(function1, (String)"transform");
        Map map = new LinkedHashMap();
        object = object.iterator();
        while (object.hasNext()) {
            Pair pair = (Pair)function1.invoke(object.next());
            map.put(pair.getFirst(), pair.getSecond());
        }
        return map;
    }

    @NotNull
    public static final <T, K> Map<K, T> associateBy(@NotNull Sequence<? extends T> object, @NotNull Function1<? super T, ? extends K> function1) {
        Intrinsics.checkParameterIsNotNull(object, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(function1, (String)"keySelector");
        Map map = new LinkedHashMap();
        object = object.iterator();
        while (object.hasNext()) {
            Object e = object.next();
            map.put(function1.invoke(e), e);
        }
        return map;
    }

    @NotNull
    public static final <T, K, V> Map<K, V> associateBy(@NotNull Sequence<? extends T> object, @NotNull Function1<? super T, ? extends K> function1, @NotNull Function1<? super T, ? extends V> function12) {
        Intrinsics.checkParameterIsNotNull(object, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(function1, (String)"keySelector");
        Intrinsics.checkParameterIsNotNull(function12, (String)"valueTransform");
        Map map = new LinkedHashMap();
        object = object.iterator();
        while (object.hasNext()) {
            Object e = object.next();
            map.put(function1.invoke(e), function12.invoke(e));
        }
        return map;
    }

    @NotNull
    public static final <T, K, M extends Map<? super K, ? super T>> M associateByTo(@NotNull Sequence<? extends T> object, @NotNull M m, @NotNull Function1<? super T, ? extends K> function1) {
        Intrinsics.checkParameterIsNotNull(object, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(m, (String)"destination");
        Intrinsics.checkParameterIsNotNull(function1, (String)"keySelector");
        object = object.iterator();
        while (object.hasNext()) {
            Object e = object.next();
            m.put((Object)function1.invoke(e), e);
        }
        return m;
    }

    @NotNull
    public static final <T, K, V, M extends Map<? super K, ? super V>> M associateByTo(@NotNull Sequence<? extends T> object, @NotNull M m, @NotNull Function1<? super T, ? extends K> function1, @NotNull Function1<? super T, ? extends V> function12) {
        Intrinsics.checkParameterIsNotNull(object, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(m, (String)"destination");
        Intrinsics.checkParameterIsNotNull(function1, (String)"keySelector");
        Intrinsics.checkParameterIsNotNull(function12, (String)"valueTransform");
        object = object.iterator();
        while (object.hasNext()) {
            Object e = object.next();
            m.put((Object)function1.invoke(e), (Object)function12.invoke(e));
        }
        return m;
    }

    @NotNull
    public static final <T, K, V, M extends Map<? super K, ? super V>> M associateTo(@NotNull Sequence<? extends T> object, @NotNull M m, @NotNull Function1<? super T, ? extends Pair<? extends K, ? extends V>> function1) {
        Intrinsics.checkParameterIsNotNull(object, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(m, (String)"destination");
        Intrinsics.checkParameterIsNotNull(function1, (String)"transform");
        object = object.iterator();
        while (object.hasNext()) {
            Pair pair = (Pair)function1.invoke(object.next());
            m.put((Object)pair.getFirst(), (Object)pair.getSecond());
        }
        return m;
    }

    @JvmName(name="averageOfByte")
    public static final double averageOfByte(@NotNull Sequence<Byte> object) {
        Intrinsics.checkParameterIsNotNull(object, (String)"$receiver");
        object = object.iterator();
        double d = 0.0;
        int n = 0;
        while (object.hasNext()) {
            d += (double)((Number)object.next()).byteValue();
            ++n;
        }
        if (n == 0) {
            return DoubleCompanionObject.INSTANCE.getNaN();
        }
        return d / (double)n;
    }

    @JvmName(name="averageOfDouble")
    public static final double averageOfDouble(@NotNull Sequence<Double> object) {
        Intrinsics.checkParameterIsNotNull(object, (String)"$receiver");
        object = object.iterator();
        double d = 0.0;
        int n = 0;
        while (object.hasNext()) {
            d += ((Number)object.next()).doubleValue();
            ++n;
        }
        if (n == 0) {
            return DoubleCompanionObject.INSTANCE.getNaN();
        }
        return d / (double)n;
    }

    @JvmName(name="averageOfFloat")
    public static final double averageOfFloat(@NotNull Sequence<Float> object) {
        Intrinsics.checkParameterIsNotNull(object, (String)"$receiver");
        object = object.iterator();
        double d = 0.0;
        int n = 0;
        while (object.hasNext()) {
            d += (double)((Number)object.next()).floatValue();
            ++n;
        }
        if (n == 0) {
            return DoubleCompanionObject.INSTANCE.getNaN();
        }
        return d / (double)n;
    }

    @JvmName(name="averageOfInt")
    public static final double averageOfInt(@NotNull Sequence<Integer> object) {
        Intrinsics.checkParameterIsNotNull(object, (String)"$receiver");
        object = object.iterator();
        double d = 0.0;
        int n = 0;
        while (object.hasNext()) {
            d += (double)((Number)object.next()).intValue();
            ++n;
        }
        if (n == 0) {
            return DoubleCompanionObject.INSTANCE.getNaN();
        }
        return d / (double)n;
    }

    @JvmName(name="averageOfLong")
    public static final double averageOfLong(@NotNull Sequence<Long> object) {
        Intrinsics.checkParameterIsNotNull(object, (String)"$receiver");
        object = object.iterator();
        double d = 0.0;
        int n = 0;
        while (object.hasNext()) {
            d += (double)((Number)object.next()).longValue();
            ++n;
        }
        if (n == 0) {
            return DoubleCompanionObject.INSTANCE.getNaN();
        }
        return d / (double)n;
    }

    @JvmName(name="averageOfShort")
    public static final double averageOfShort(@NotNull Sequence<Short> object) {
        Intrinsics.checkParameterIsNotNull(object, (String)"$receiver");
        object = object.iterator();
        double d = 0.0;
        int n = 0;
        while (object.hasNext()) {
            d += (double)((Number)object.next()).shortValue();
            ++n;
        }
        if (n == 0) {
            return DoubleCompanionObject.INSTANCE.getNaN();
        }
        return d / (double)n;
    }

    @SinceKotlin(version="1.2")
    @NotNull
    public static final <T> Sequence<List<T>> chunked(@NotNull Sequence<? extends T> sequence, int n) {
        Intrinsics.checkParameterIsNotNull(sequence, (String)"$receiver");
        return SequencesKt.windowed(sequence, n, n, true);
    }

    @SinceKotlin(version="1.2")
    @NotNull
    public static final <T, R> Sequence<R> chunked(@NotNull Sequence<? extends T> sequence, int n, @NotNull Function1<? super List<? extends T>, ? extends R> function1) {
        Intrinsics.checkParameterIsNotNull(sequence, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(function1, (String)"transform");
        return SequencesKt.windowed(sequence, n, n, true, function1);
    }

    public static final <T> boolean contains(@NotNull Sequence<? extends T> sequence, T t) {
        Intrinsics.checkParameterIsNotNull(sequence, (String)"$receiver");
        if (SequencesKt.indexOf(sequence, t) >= 0) {
            return true;
        }
        return false;
    }

    public static final <T> int count(@NotNull Sequence<? extends T> object) {
        Intrinsics.checkParameterIsNotNull(object, (String)"$receiver");
        object = object.iterator();
        int n = 0;
        while (object.hasNext()) {
            object.next();
            ++n;
        }
        return n;
    }

    public static final <T> int count(@NotNull Sequence<? extends T> object, @NotNull Function1<? super T, Boolean> function1) {
        Intrinsics.checkParameterIsNotNull(object, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(function1, (String)"predicate");
        object = object.iterator();
        int n = 0;
        while (object.hasNext()) {
            if (!((Boolean)function1.invoke(object.next())).booleanValue()) continue;
            ++n;
        }
        return n;
    }

    @NotNull
    public static final <T> Sequence<T> distinct(@NotNull Sequence<? extends T> sequence) {
        Intrinsics.checkParameterIsNotNull(sequence, (String)"$receiver");
        return SequencesKt.distinctBy(sequence, distinct.INSTANCE);
    }

    @NotNull
    public static final <T, K> Sequence<T> distinctBy(@NotNull Sequence<? extends T> sequence, @NotNull Function1<? super T, ? extends K> function1) {
        Intrinsics.checkParameterIsNotNull(sequence, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(function1, (String)"selector");
        return new DistinctSequence<T, K>(sequence, function1);
    }

    @NotNull
    public static final <T> Sequence<T> drop(@NotNull Sequence<? extends T> object, int n) {
        Intrinsics.checkParameterIsNotNull(object, (String)"$receiver");
        boolean bl = n >= 0;
        if (!bl) {
            object = new StringBuilder();
            object.append("Requested element count ");
            object.append(n);
            object.append(" is less than zero.");
            throw (Throwable)new IllegalArgumentException(object.toString().toString());
        }
        if (n == 0) {
            return object;
        }
        if (object instanceof DropTakeSequence) {
            return ((DropTakeSequence)object).drop(n);
        }
        return new DropSequence(object, n);
    }

    @NotNull
    public static final <T> Sequence<T> dropWhile(@NotNull Sequence<? extends T> sequence, @NotNull Function1<? super T, Boolean> function1) {
        Intrinsics.checkParameterIsNotNull(sequence, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(function1, (String)"predicate");
        return new DropWhileSequence<T>(sequence, function1);
    }

    public static final <T> T elementAt(@NotNull Sequence<? extends T> sequence, int n) {
        Intrinsics.checkParameterIsNotNull(sequence, (String)"$receiver");
        return SequencesKt.elementAtOrElse(sequence, n, (Function1)new Function1(n){
            final /* synthetic */ int $index;
            {
                this.$index = n;
                super(1);
            }

            @NotNull
            public final java.lang.Void invoke(int n) {
                StringBuilder stringBuilder = new StringBuilder();
                stringBuilder.append("Sequence doesn't contain element at index ");
                stringBuilder.append(this.$index);
                stringBuilder.append('.');
                throw (Throwable)new java.lang.IndexOutOfBoundsException(stringBuilder.toString());
            }
        });
    }

    public static final <T> T elementAtOrElse(@NotNull Sequence<? extends T> object, int n, @NotNull Function1<? super Integer, ? extends T> function1) {
        Intrinsics.checkParameterIsNotNull(object, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(function1, (String)"defaultValue");
        if (n < 0) {
            return (T)function1.invoke((Object)n);
        }
        object = object.iterator();
        int n2 = 0;
        while (object.hasNext()) {
            Object e = object.next();
            if (n == n2) {
                return (T)e;
            }
            ++n2;
        }
        return (T)function1.invoke((Object)n);
    }

    @Nullable
    public static final <T> T elementAtOrNull(@NotNull Sequence<? extends T> object, int n) {
        Intrinsics.checkParameterIsNotNull(object, (String)"$receiver");
        if (n < 0) {
            return null;
        }
        object = object.iterator();
        int n2 = 0;
        while (object.hasNext()) {
            Object e = object.next();
            if (n == n2) {
                return (T)e;
            }
            ++n2;
        }
        return null;
    }

    @NotNull
    public static final <T> Sequence<T> filter(@NotNull Sequence<? extends T> sequence, @NotNull Function1<? super T, Boolean> function1) {
        Intrinsics.checkParameterIsNotNull(sequence, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(function1, (String)"predicate");
        return new FilteringSequence<T>(sequence, true, function1);
    }

    @NotNull
    public static final <T> Sequence<T> filterIndexed(@NotNull Sequence<? extends T> sequence, @NotNull Function2<? super Integer, ? super T, Boolean> function2) {
        Intrinsics.checkParameterIsNotNull(sequence, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(function2, (String)"predicate");
        return new TransformingSequence(new FilteringSequence((Sequence)new IndexingSequence<T>(sequence), true, (Function1)new Function1<IndexedValue<? extends T>, Boolean>(function2){
            final /* synthetic */ Function2 $predicate;
            {
                this.$predicate = function2;
                super(1);
            }

            public final boolean invoke(@NotNull IndexedValue<? extends T> indexedValue) {
                Intrinsics.checkParameterIsNotNull(indexedValue, (String)"it");
                return (Boolean)this.$predicate.invoke((Object)indexedValue.getIndex(), indexedValue.getValue());
            }
        }), filterIndexed.INSTANCE);
    }

    @NotNull
    public static final <T, C extends Collection<? super T>> C filterIndexedTo(@NotNull Sequence<? extends T> object, @NotNull C c, @NotNull Function2<? super Integer, ? super T, Boolean> function2) {
        Intrinsics.checkParameterIsNotNull(object, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(c, (String)"destination");
        Intrinsics.checkParameterIsNotNull(function2, (String)"predicate");
        object = object.iterator();
        int n = 0;
        while (object.hasNext()) {
            Object e = object.next();
            if (((Boolean)function2.invoke((Object)n, e)).booleanValue()) {
                c.add(e);
            }
            ++n;
        }
        return c;
    }

    private static final <R> Sequence<R> filterIsInstance(@NotNull Sequence<?> sequence) {
        Intrinsics.needClassReification();
        sequence = SequencesKt.filter(sequence, filterIsInstance.INSTANCE);
        if (sequence == null) {
            throw new TypeCastException("null cannot be cast to non-null type kotlin.sequences.Sequence<R>");
        }
        return sequence;
    }

    private static final <R, C extends Collection<? super R>> C filterIsInstanceTo(@NotNull Sequence<?> object, C c) {
        object = object.iterator();
        while (object.hasNext()) {
            Object e = object.next();
            Intrinsics.reifiedOperationMarker((int)3, (String)"R");
            if (!(e instanceof Object)) continue;
            c.add(e);
        }
        return c;
    }

    @NotNull
    public static final <T> Sequence<T> filterNot(@NotNull Sequence<? extends T> sequence, @NotNull Function1<? super T, Boolean> function1) {
        Intrinsics.checkParameterIsNotNull(sequence, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(function1, (String)"predicate");
        return new FilteringSequence<T>(sequence, false, function1);
    }

    @NotNull
    public static final <T> Sequence<T> filterNotNull(@NotNull Sequence<? extends T> sequence) {
        Intrinsics.checkParameterIsNotNull(sequence, (String)"$receiver");
        sequence = SequencesKt.filterNot(sequence, filterNotNull.INSTANCE);
        if (sequence == null) {
            throw new TypeCastException("null cannot be cast to non-null type kotlin.sequences.Sequence<T>");
        }
        return sequence;
    }

    @NotNull
    public static final <C extends Collection<? super T>, T> C filterNotNullTo(@NotNull Sequence<? extends T> object, @NotNull C c) {
        Intrinsics.checkParameterIsNotNull(object, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(c, (String)"destination");
        object = object.iterator();
        while (object.hasNext()) {
            Object e = object.next();
            if (e == null) continue;
            c.add(e);
        }
        return c;
    }

    @NotNull
    public static final <T, C extends Collection<? super T>> C filterNotTo(@NotNull Sequence<? extends T> object, @NotNull C c, @NotNull Function1<? super T, Boolean> function1) {
        Intrinsics.checkParameterIsNotNull(object, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(c, (String)"destination");
        Intrinsics.checkParameterIsNotNull(function1, (String)"predicate");
        object = object.iterator();
        while (object.hasNext()) {
            Object e = object.next();
            if (((Boolean)function1.invoke(e)).booleanValue()) continue;
            c.add(e);
        }
        return c;
    }

    @NotNull
    public static final <T, C extends Collection<? super T>> C filterTo(@NotNull Sequence<? extends T> object, @NotNull C c, @NotNull Function1<? super T, Boolean> function1) {
        Intrinsics.checkParameterIsNotNull(object, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(c, (String)"destination");
        Intrinsics.checkParameterIsNotNull(function1, (String)"predicate");
        object = object.iterator();
        while (object.hasNext()) {
            Object e = object.next();
            if (!((Boolean)function1.invoke(e)).booleanValue()) continue;
            c.add(e);
        }
        return c;
    }

    @InlineOnly
    private static final <T> T find(@NotNull Sequence<? extends T> object, Function1<? super T, Boolean> function1) {
        object = object.iterator();
        while (object.hasNext()) {
            Object e = object.next();
            if (!((Boolean)function1.invoke(e)).booleanValue()) continue;
            return (T)e;
        }
        return null;
    }

    @InlineOnly
    private static final <T> T findLast(@NotNull Sequence<? extends T> sequence, Function1<? super T, Boolean> function1) {
        Iterator<T> iterator2 = sequence.iterator();
        sequence = null;
        while (iterator2.hasNext()) {
            T t = iterator2.next();
            if (!((Boolean)function1.invoke(t)).booleanValue()) continue;
            sequence = t;
        }
        return (T)sequence;
    }

    public static final <T> T first(@NotNull Sequence<? extends T> object) {
        Intrinsics.checkParameterIsNotNull(object, (String)"$receiver");
        object = object.iterator();
        if (!object.hasNext()) {
            throw (Throwable)new NoSuchElementException("Sequence is empty.");
        }
        return (T)object.next();
    }

    public static final <T> T first(@NotNull Sequence<? extends T> object, @NotNull Function1<? super T, Boolean> function1) {
        Intrinsics.checkParameterIsNotNull(object, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(function1, (String)"predicate");
        object = object.iterator();
        while (object.hasNext()) {
            Object e = object.next();
            if (!((Boolean)function1.invoke(e)).booleanValue()) continue;
            return (T)e;
        }
        throw (Throwable)new NoSuchElementException("Sequence contains no element matching the predicate.");
    }

    @Nullable
    public static final <T> T firstOrNull(@NotNull Sequence<? extends T> object) {
        Intrinsics.checkParameterIsNotNull(object, (String)"$receiver");
        object = object.iterator();
        if (!object.hasNext()) {
            return null;
        }
        return (T)object.next();
    }

    @Nullable
    public static final <T> T firstOrNull(@NotNull Sequence<? extends T> object, @NotNull Function1<? super T, Boolean> function1) {
        Intrinsics.checkParameterIsNotNull(object, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(function1, (String)"predicate");
        object = object.iterator();
        while (object.hasNext()) {
            Object e = object.next();
            if (!((Boolean)function1.invoke(e)).booleanValue()) continue;
            return (T)e;
        }
        return null;
    }

    @NotNull
    public static final <T, R> Sequence<R> flatMap(@NotNull Sequence<? extends T> sequence, @NotNull Function1<? super T, ? extends Sequence<? extends R>> function1) {
        Intrinsics.checkParameterIsNotNull(sequence, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(function1, (String)"transform");
        return new FlatteningSequence(sequence, function1, flatMap.INSTANCE);
    }

    @NotNull
    public static final <T, R, C extends Collection<? super R>> C flatMapTo(@NotNull Sequence<? extends T> object, @NotNull C c, @NotNull Function1<? super T, ? extends Sequence<? extends R>> function1) {
        Intrinsics.checkParameterIsNotNull(object, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(c, (String)"destination");
        Intrinsics.checkParameterIsNotNull(function1, (String)"transform");
        object = object.iterator();
        while (object.hasNext()) {
            CollectionsKt.addAll(c, (Sequence)((Sequence)function1.invoke(object.next())));
        }
        return c;
    }

    public static final <T, R> R fold(@NotNull Sequence<? extends T> object, R object2, @NotNull Function2<? super R, ? super T, ? extends R> function2) {
        Intrinsics.checkParameterIsNotNull(object, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(function2, (String)"operation");
        object = object.iterator();
        while (object.hasNext()) {
            object2 = function2.invoke(object2, object.next());
        }
        return object2;
    }

    public static final <T, R> R foldIndexed(@NotNull Sequence<? extends T> object, R object2, @NotNull Function3<? super Integer, ? super R, ? super T, ? extends R> function3) {
        Intrinsics.checkParameterIsNotNull(object, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(function3, (String)"operation");
        object = object.iterator();
        int n = 0;
        while (object.hasNext()) {
            Object e = object.next();
            int n2 = n + 1;
            object2 = function3.invoke((Object)n, object2, e);
            n = n2;
        }
        return object2;
    }

    public static final <T> void forEach(@NotNull Sequence<? extends T> object, @NotNull Function1<? super T, Unit> function1) {
        Intrinsics.checkParameterIsNotNull(object, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(function1, (String)"action");
        object = object.iterator();
        while (object.hasNext()) {
            function1.invoke(object.next());
        }
    }

    public static final <T> void forEachIndexed(@NotNull Sequence<? extends T> object, @NotNull Function2<? super Integer, ? super T, Unit> function2) {
        Intrinsics.checkParameterIsNotNull(object, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(function2, (String)"action");
        object = object.iterator();
        int n = 0;
        while (object.hasNext()) {
            Object e = object.next();
            int n2 = n + 1;
            function2.invoke((Object)n, e);
            n = n2;
        }
    }

    @NotNull
    public static final <T, K> Map<K, List<T>> groupBy(@NotNull Sequence<? extends T> object, @NotNull Function1<? super T, ? extends K> function1) {
        Intrinsics.checkParameterIsNotNull(object, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(function1, (String)"keySelector");
        Map map = new LinkedHashMap();
        Iterator<T> iterator2 = object.iterator();
        while (iterator2.hasNext()) {
            T t = iterator2.next();
            Object object2 = function1.invoke(t);
            Object v = map.get(object2);
            object = v;
            if (v == null) {
                object = new ArrayList();
                map.put(object2, object);
            }
            ((List)object).add(t);
        }
        return map;
    }

    @NotNull
    public static final <T, K, V> Map<K, List<V>> groupBy(@NotNull Sequence<? extends T> object, @NotNull Function1<? super T, ? extends K> function1, @NotNull Function1<? super T, ? extends V> function12) {
        Intrinsics.checkParameterIsNotNull(object, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(function1, (String)"keySelector");
        Intrinsics.checkParameterIsNotNull(function12, (String)"valueTransform");
        Map map = new LinkedHashMap();
        Iterator<T> iterator2 = object.iterator();
        while (iterator2.hasNext()) {
            T t = iterator2.next();
            Object object2 = function1.invoke(t);
            Object v = map.get(object2);
            object = v;
            if (v == null) {
                object = new ArrayList();
                map.put(object2, object);
            }
            ((List)object).add(function12.invoke(t));
        }
        return map;
    }

    @NotNull
    public static final <T, K, M extends Map<? super K, List<T>>> M groupByTo(@NotNull Sequence<? extends T> object, @NotNull M m, @NotNull Function1<? super T, ? extends K> function1) {
        Intrinsics.checkParameterIsNotNull(object, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(m, (String)"destination");
        Intrinsics.checkParameterIsNotNull(function1, (String)"keySelector");
        Iterator<T> iterator2 = object.iterator();
        while (iterator2.hasNext()) {
            T t = iterator2.next();
            Object object2 = function1.invoke(t);
            Object v = m.get(object2);
            object = v;
            if (v == null) {
                object = new ArrayList();
                m.put((Object)object2, (Object)object);
            }
            ((List)object).add(t);
        }
        return m;
    }

    @NotNull
    public static final <T, K, V, M extends Map<? super K, List<V>>> M groupByTo(@NotNull Sequence<? extends T> object, @NotNull M m, @NotNull Function1<? super T, ? extends K> function1, @NotNull Function1<? super T, ? extends V> function12) {
        Intrinsics.checkParameterIsNotNull(object, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(m, (String)"destination");
        Intrinsics.checkParameterIsNotNull(function1, (String)"keySelector");
        Intrinsics.checkParameterIsNotNull(function12, (String)"valueTransform");
        Iterator<T> iterator2 = object.iterator();
        while (iterator2.hasNext()) {
            T t = iterator2.next();
            Object object2 = function1.invoke(t);
            Object v = m.get(object2);
            object = v;
            if (v == null) {
                object = new ArrayList();
                m.put((Object)object2, (Object)object);
            }
            ((List)object).add(function12.invoke(t));
        }
        return m;
    }

    @SinceKotlin(version="1.1")
    @NotNull
    public static final <T, K> Grouping<T, K> groupingBy(@NotNull Sequence<? extends T> sequence, @NotNull Function1<? super T, ? extends K> function1) {
        Intrinsics.checkParameterIsNotNull(sequence, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(function1, (String)"keySelector");
        return new Grouping<T, K>(sequence, function1){
            final /* synthetic */ Function1 $keySelector;
            final /* synthetic */ Sequence receiver$0;
            {
                this.receiver$0 = sequence;
                this.$keySelector = function1;
            }

            public K keyOf(T t) {
                return (K)this.$keySelector.invoke(t);
            }

            @NotNull
            public Iterator<T> sourceIterator() {
                return this.receiver$0.iterator();
            }
        };
    }

    public static final <T> int indexOf(@NotNull Sequence<? extends T> object, T t) {
        Intrinsics.checkParameterIsNotNull(object, (String)"$receiver");
        object = object.iterator();
        int n = 0;
        while (object.hasNext()) {
            if (Intrinsics.areEqual(t, object.next())) {
                return n;
            }
            ++n;
        }
        return -1;
    }

    public static final <T> int indexOfFirst(@NotNull Sequence<? extends T> object, @NotNull Function1<? super T, Boolean> function1) {
        Intrinsics.checkParameterIsNotNull(object, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(function1, (String)"predicate");
        object = object.iterator();
        int n = 0;
        while (object.hasNext()) {
            if (((Boolean)function1.invoke(object.next())).booleanValue()) {
                return n;
            }
            ++n;
        }
        return -1;
    }

    public static final <T> int indexOfLast(@NotNull Sequence<? extends T> object, @NotNull Function1<? super T, Boolean> function1) {
        Intrinsics.checkParameterIsNotNull(object, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(function1, (String)"predicate");
        object = object.iterator();
        int n = -1;
        int n2 = 0;
        while (object.hasNext()) {
            if (((Boolean)function1.invoke(object.next())).booleanValue()) {
                n = n2;
            }
            ++n2;
        }
        return n;
    }

    @NotNull
    public static final <T, A extends Appendable> A joinTo(@NotNull Sequence<? extends T> object, @NotNull A a, @NotNull CharSequence charSequence, @NotNull CharSequence charSequence2, @NotNull CharSequence charSequence3, int n, @NotNull CharSequence charSequence4, @Nullable Function1<? super T, ? extends CharSequence> function1) {
        int n2;
        Intrinsics.checkParameterIsNotNull(object, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(a, (String)"buffer");
        Intrinsics.checkParameterIsNotNull((Object)charSequence, (String)"separator");
        Intrinsics.checkParameterIsNotNull((Object)charSequence2, (String)"prefix");
        Intrinsics.checkParameterIsNotNull((Object)charSequence3, (String)"postfix");
        Intrinsics.checkParameterIsNotNull((Object)charSequence4, (String)"truncated");
        a.append(charSequence2);
        object = object.iterator();
        int n3 = 0;
        do {
            n2 = n3++;
            if (!object.hasNext()) break;
            charSequence2 = object.next();
            if (n3 > 1) {
                a.append(charSequence);
            }
            if (n >= 0) {
                n2 = n3;
                if (n3 > n) break;
            }
            StringsKt.appendElement(a, (Object)charSequence2, function1);
        } while (true);
        if (n >= 0 && n2 > n) {
            a.append(charSequence4);
        }
        a.append(charSequence3);
        return a;
    }

    @NotNull
    public static /* bridge */ /* synthetic */ Appendable joinTo$default(Sequence sequence, Appendable appendable, CharSequence charSequence, CharSequence charSequence2, CharSequence charSequence3, int n, CharSequence charSequence4, Function1 function1, int n2, Object object) {
        block5 : {
            if ((n2 & 2) != 0) {
                charSequence = ", ";
            }
            if ((n2 & 4) != 0) {
                charSequence2 = "";
            }
            if ((n2 & 8) != 0) {
                charSequence3 = "";
            }
            if ((n2 & 16) != 0) {
                n = -1;
            }
            if ((n2 & 32) != 0) {
                charSequence4 = "...";
            }
            if ((n2 & 64) == 0) break block5;
            function1 = null;
        }
        return SequencesKt.joinTo(sequence, appendable, charSequence, charSequence2, charSequence3, n, charSequence4, function1);
    }

    @NotNull
    public static final <T> String joinToString(@NotNull Sequence<? extends T> object, @NotNull CharSequence charSequence, @NotNull CharSequence charSequence2, @NotNull CharSequence charSequence3, int n, @NotNull CharSequence charSequence4, @Nullable Function1<? super T, ? extends CharSequence> function1) {
        Intrinsics.checkParameterIsNotNull(object, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull((Object)charSequence, (String)"separator");
        Intrinsics.checkParameterIsNotNull((Object)charSequence2, (String)"prefix");
        Intrinsics.checkParameterIsNotNull((Object)charSequence3, (String)"postfix");
        Intrinsics.checkParameterIsNotNull((Object)charSequence4, (String)"truncated");
        object = ((StringBuilder)SequencesKt.joinTo(object, (Appendable)new StringBuilder(), charSequence, charSequence2, charSequence3, n, charSequence4, function1)).toString();
        Intrinsics.checkExpressionValueIsNotNull((Object)object, (String)"joinTo(StringBuilder(), \u2026ed, transform).toString()");
        return object;
    }

    @NotNull
    public static /* bridge */ /* synthetic */ String joinToString$default(Sequence sequence, CharSequence charSequence, CharSequence charSequence2, CharSequence charSequence3, int n, CharSequence charSequence4, Function1 function1, int n2, Object object) {
        if ((n2 & 1) != 0) {
            charSequence = ", ";
        }
        if ((n2 & 2) != 0) {
            charSequence2 = "";
        }
        if ((n2 & 4) != 0) {
            charSequence3 = "";
        }
        if ((n2 & 8) != 0) {
            n = -1;
        }
        if ((n2 & 16) != 0) {
            charSequence4 = "...";
        }
        if ((n2 & 32) != 0) {
            function1 = null;
        }
        return SequencesKt.joinToString(sequence, charSequence, charSequence2, charSequence3, n, charSequence4, function1);
    }

    public static final <T> T last(@NotNull Sequence<? extends T> sequence) {
        Intrinsics.checkParameterIsNotNull(sequence, (String)"$receiver");
        Iterator<T> iterator2 = sequence.iterator();
        if (!iterator2.hasNext()) {
            throw (Throwable)new NoSuchElementException("Sequence is empty.");
        }
        sequence = iterator2.next();
        while (iterator2.hasNext()) {
            sequence = iterator2.next();
        }
        return (T)sequence;
    }

    public static final <T> T last(@NotNull Sequence<? extends T> sequence, @NotNull Function1<? super T, Boolean> function1) {
        Intrinsics.checkParameterIsNotNull(sequence, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(function1, (String)"predicate");
        Iterator<T> iterator2 = sequence.iterator();
        sequence = null;
        boolean bl = false;
        while (iterator2.hasNext()) {
            T t = iterator2.next();
            if (!((Boolean)function1.invoke(t)).booleanValue()) continue;
            sequence = t;
            bl = true;
        }
        if (!bl) {
            throw (Throwable)new NoSuchElementException("Sequence contains no element matching the predicate.");
        }
        return (T)sequence;
    }

    public static final <T> int lastIndexOf(@NotNull Sequence<? extends T> object, T t) {
        Intrinsics.checkParameterIsNotNull(object, (String)"$receiver");
        object = object.iterator();
        int n = -1;
        int n2 = 0;
        while (object.hasNext()) {
            if (Intrinsics.areEqual(t, object.next())) {
                n = n2;
            }
            ++n2;
        }
        return n;
    }

    @Nullable
    public static final <T> T lastOrNull(@NotNull Sequence<? extends T> sequence) {
        Intrinsics.checkParameterIsNotNull(sequence, (String)"$receiver");
        Iterator<T> iterator2 = sequence.iterator();
        if (!iterator2.hasNext()) {
            return null;
        }
        sequence = iterator2.next();
        while (iterator2.hasNext()) {
            sequence = iterator2.next();
        }
        return (T)sequence;
    }

    @Nullable
    public static final <T> T lastOrNull(@NotNull Sequence<? extends T> sequence, @NotNull Function1<? super T, Boolean> function1) {
        Intrinsics.checkParameterIsNotNull(sequence, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(function1, (String)"predicate");
        Iterator<T> iterator2 = sequence.iterator();
        sequence = null;
        while (iterator2.hasNext()) {
            T t = iterator2.next();
            if (!((Boolean)function1.invoke(t)).booleanValue()) continue;
            sequence = t;
        }
        return (T)sequence;
    }

    @NotNull
    public static final <T, R> Sequence<R> map(@NotNull Sequence<? extends T> sequence, @NotNull Function1<? super T, ? extends R> function1) {
        Intrinsics.checkParameterIsNotNull(sequence, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(function1, (String)"transform");
        return new TransformingSequence<T, R>(sequence, function1);
    }

    @NotNull
    public static final <T, R> Sequence<R> mapIndexed(@NotNull Sequence<? extends T> sequence, @NotNull Function2<? super Integer, ? super T, ? extends R> function2) {
        Intrinsics.checkParameterIsNotNull(sequence, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(function2, (String)"transform");
        return new TransformingIndexedSequence<T, R>(sequence, function2);
    }

    @NotNull
    public static final <T, R> Sequence<R> mapIndexedNotNull(@NotNull Sequence<? extends T> sequence, @NotNull Function2<? super Integer, ? super T, ? extends R> function2) {
        Intrinsics.checkParameterIsNotNull(sequence, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(function2, (String)"transform");
        return SequencesKt.filterNotNull((Sequence)new TransformingIndexedSequence<T, R>(sequence, function2));
    }

    @NotNull
    public static final <T, R, C extends Collection<? super R>> C mapIndexedNotNullTo(@NotNull Sequence<? extends T> object, @NotNull C c, @NotNull Function2<? super Integer, ? super T, ? extends R> function2) {
        Intrinsics.checkParameterIsNotNull(object, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(c, (String)"destination");
        Intrinsics.checkParameterIsNotNull(function2, (String)"transform");
        object = object.iterator();
        int n = 0;
        while (object.hasNext()) {
            Object object2 = function2.invoke((Object)n, object.next());
            if (object2 != null) {
                c.add((Object)object2);
            }
            ++n;
        }
        return c;
    }

    @NotNull
    public static final <T, R, C extends Collection<? super R>> C mapIndexedTo(@NotNull Sequence<? extends T> object, @NotNull C c, @NotNull Function2<? super Integer, ? super T, ? extends R> function2) {
        Intrinsics.checkParameterIsNotNull(object, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(c, (String)"destination");
        Intrinsics.checkParameterIsNotNull(function2, (String)"transform");
        object = object.iterator();
        int n = 0;
        while (object.hasNext()) {
            Object e = object.next();
            int n2 = n + 1;
            c.add((Object)function2.invoke((Object)n, e));
            n = n2;
        }
        return c;
    }

    @NotNull
    public static final <T, R> Sequence<R> mapNotNull(@NotNull Sequence<? extends T> sequence, @NotNull Function1<? super T, ? extends R> function1) {
        Intrinsics.checkParameterIsNotNull(sequence, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(function1, (String)"transform");
        return SequencesKt.filterNotNull((Sequence)new TransformingSequence<T, R>(sequence, function1));
    }

    @NotNull
    public static final <T, R, C extends Collection<? super R>> C mapNotNullTo(@NotNull Sequence<? extends T> object, @NotNull C c, @NotNull Function1<? super T, ? extends R> function1) {
        Intrinsics.checkParameterIsNotNull(object, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(c, (String)"destination");
        Intrinsics.checkParameterIsNotNull(function1, (String)"transform");
        object = object.iterator();
        while (object.hasNext()) {
            Object object2 = function1.invoke(object.next());
            if (object2 == null) continue;
            c.add((Object)object2);
        }
        return c;
    }

    @NotNull
    public static final <T, R, C extends Collection<? super R>> C mapTo(@NotNull Sequence<? extends T> object, @NotNull C c, @NotNull Function1<? super T, ? extends R> function1) {
        Intrinsics.checkParameterIsNotNull(object, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(c, (String)"destination");
        Intrinsics.checkParameterIsNotNull(function1, (String)"transform");
        object = object.iterator();
        while (object.hasNext()) {
            c.add((Object)function1.invoke(object.next()));
        }
        return c;
    }

    @Nullable
    public static final <T extends Comparable<? super T>> T max(@NotNull Sequence<? extends T> object) {
        Intrinsics.checkParameterIsNotNull(object, (String)"$receiver");
        Iterator<T> iterator2 = object.iterator();
        if (!iterator2.hasNext()) {
            return null;
        }
        object = (Comparable)iterator2.next();
        while (iterator2.hasNext()) {
            Comparable comparable = (Comparable)iterator2.next();
            if (object.compareTo(comparable) >= 0) continue;
            object = comparable;
        }
        return (T)object;
    }

    @SinceKotlin(version="1.1")
    @Nullable
    public static final Double max(@NotNull Sequence<Double> object) {
        double d;
        Intrinsics.checkParameterIsNotNull(object, (String)"$receiver");
        object = object.iterator();
        if (!object.hasNext()) {
            return null;
        }
        double d2 = d = ((Number)object.next()).doubleValue();
        if (Double.isNaN(d)) {
            return d;
        }
        while (object.hasNext()) {
            d = ((Number)object.next()).doubleValue();
            if (Double.isNaN(d)) {
                return d;
            }
            if (d2 >= d) continue;
            d2 = d;
        }
        return d2;
    }

    @SinceKotlin(version="1.1")
    @Nullable
    public static final Float max(@NotNull Sequence<Float> object) {
        float f;
        Intrinsics.checkParameterIsNotNull(object, (String)"$receiver");
        object = object.iterator();
        if (!object.hasNext()) {
            return null;
        }
        float f2 = f = ((Number)object.next()).floatValue();
        if (Float.isNaN(f)) {
            return Float.valueOf(f);
        }
        while (object.hasNext()) {
            f = ((Number)object.next()).floatValue();
            if (Float.isNaN(f)) {
                return Float.valueOf(f);
            }
            if (f2 >= f) continue;
            f2 = f;
        }
        return Float.valueOf(f2);
    }

    @Nullable
    public static final <T, R extends Comparable<? super R>> T maxBy(@NotNull Sequence<? extends T> sequence, @NotNull Function1<? super T, ? extends R> function1) {
        Intrinsics.checkParameterIsNotNull(sequence, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(function1, (String)"selector");
        Iterator<T> iterator2 = sequence.iterator();
        if (!iterator2.hasNext()) {
            return null;
        }
        sequence = iterator2.next();
        Comparable comparable = (Comparable)function1.invoke(sequence);
        while (iterator2.hasNext()) {
            T t = iterator2.next();
            Comparable comparable2 = (Comparable)function1.invoke(t);
            if (comparable.compareTo(comparable2) >= 0) continue;
            sequence = t;
            comparable = comparable2;
        }
        return (T)sequence;
    }

    @Nullable
    public static final <T> T maxWith(@NotNull Sequence<? extends T> sequence, @NotNull Comparator<? super T> comparator) {
        Intrinsics.checkParameterIsNotNull(sequence, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(comparator, (String)"comparator");
        Iterator<T> iterator2 = sequence.iterator();
        if (!iterator2.hasNext()) {
            return null;
        }
        sequence = iterator2.next();
        while (iterator2.hasNext()) {
            T t = iterator2.next();
            if (comparator.compare(sequence, (Sequence<T>)t) >= 0) continue;
            sequence = t;
        }
        return (T)sequence;
    }

    @Nullable
    public static final <T extends Comparable<? super T>> T min(@NotNull Sequence<? extends T> object) {
        Intrinsics.checkParameterIsNotNull(object, (String)"$receiver");
        Iterator<T> iterator2 = object.iterator();
        if (!iterator2.hasNext()) {
            return null;
        }
        object = (Comparable)iterator2.next();
        while (iterator2.hasNext()) {
            Comparable comparable = (Comparable)iterator2.next();
            if (object.compareTo(comparable) <= 0) continue;
            object = comparable;
        }
        return (T)object;
    }

    @SinceKotlin(version="1.1")
    @Nullable
    public static final Double min(@NotNull Sequence<Double> object) {
        double d;
        Intrinsics.checkParameterIsNotNull(object, (String)"$receiver");
        object = object.iterator();
        if (!object.hasNext()) {
            return null;
        }
        double d2 = d = ((Number)object.next()).doubleValue();
        if (Double.isNaN(d)) {
            return d;
        }
        while (object.hasNext()) {
            d = ((Number)object.next()).doubleValue();
            if (Double.isNaN(d)) {
                return d;
            }
            if (d2 <= d) continue;
            d2 = d;
        }
        return d2;
    }

    @SinceKotlin(version="1.1")
    @Nullable
    public static final Float min(@NotNull Sequence<Float> object) {
        float f;
        Intrinsics.checkParameterIsNotNull(object, (String)"$receiver");
        object = object.iterator();
        if (!object.hasNext()) {
            return null;
        }
        float f2 = f = ((Number)object.next()).floatValue();
        if (Float.isNaN(f)) {
            return Float.valueOf(f);
        }
        while (object.hasNext()) {
            f = ((Number)object.next()).floatValue();
            if (Float.isNaN(f)) {
                return Float.valueOf(f);
            }
            if (f2 <= f) continue;
            f2 = f;
        }
        return Float.valueOf(f2);
    }

    @Nullable
    public static final <T, R extends Comparable<? super R>> T minBy(@NotNull Sequence<? extends T> sequence, @NotNull Function1<? super T, ? extends R> function1) {
        Intrinsics.checkParameterIsNotNull(sequence, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(function1, (String)"selector");
        Iterator<T> iterator2 = sequence.iterator();
        if (!iterator2.hasNext()) {
            return null;
        }
        sequence = iterator2.next();
        Comparable comparable = (Comparable)function1.invoke(sequence);
        while (iterator2.hasNext()) {
            T t = iterator2.next();
            Comparable comparable2 = (Comparable)function1.invoke(t);
            if (comparable.compareTo(comparable2) <= 0) continue;
            sequence = t;
            comparable = comparable2;
        }
        return (T)sequence;
    }

    @Nullable
    public static final <T> T minWith(@NotNull Sequence<? extends T> sequence, @NotNull Comparator<? super T> comparator) {
        Intrinsics.checkParameterIsNotNull(sequence, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(comparator, (String)"comparator");
        Iterator<T> iterator2 = sequence.iterator();
        if (!iterator2.hasNext()) {
            return null;
        }
        sequence = iterator2.next();
        while (iterator2.hasNext()) {
            T t = iterator2.next();
            if (comparator.compare(sequence, (Sequence<T>)t) <= 0) continue;
            sequence = t;
        }
        return (T)sequence;
    }

    @NotNull
    public static final <T> Sequence<T> minus(@NotNull Sequence<? extends T> sequence, @NotNull Iterable<? extends T> iterable) {
        Intrinsics.checkParameterIsNotNull(sequence, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(iterable, (String)"elements");
        return new Sequence<T>(sequence, iterable){
            final /* synthetic */ Iterable $elements;
            final /* synthetic */ Sequence receiver$0;
            {
                this.receiver$0 = sequence;
                this.$elements = iterable;
            }

            @NotNull
            public Iterator<T> iterator() {
                Collection collection = CollectionsKt.convertToSetForSetOperation((Iterable)this.$elements);
                if (collection.isEmpty()) {
                    return this.receiver$0.iterator();
                }
                return SequencesKt.filterNot(this.receiver$0, (Function1)new Function1<T, Boolean>(collection){
                    final /* synthetic */ Collection $other;
                    {
                        this.$other = collection;
                        super(1);
                    }

                    public final boolean invoke(T t) {
                        return this.$other.contains(t);
                    }
                }).iterator();
            }
        };
    }

    @NotNull
    public static final <T> Sequence<T> minus(@NotNull Sequence<? extends T> sequence, T t) {
        Intrinsics.checkParameterIsNotNull(sequence, (String)"$receiver");
        return new Sequence<T>(sequence, t){
            final /* synthetic */ Object $element;
            final /* synthetic */ Sequence receiver$0;
            {
                this.receiver$0 = sequence;
                this.$element = object;
            }

            @NotNull
            public Iterator<T> iterator() {
                kotlin.jvm.internal.Ref$BooleanRef booleanRef = new kotlin.jvm.internal.Ref$BooleanRef();
                booleanRef.element = false;
                return SequencesKt.filter(this.receiver$0, (Function1)new Function1<T, Boolean>(this, booleanRef){
                    final /* synthetic */ kotlin.jvm.internal.Ref$BooleanRef $removed;
                    final /* synthetic */ minus this$0;
                    {
                        this.this$0 = var1_1;
                        this.$removed = booleanRef;
                        super(1);
                    }

                    public final boolean invoke(T t) {
                        boolean bl;
                        boolean bl2 = this.$removed.element;
                        boolean bl3 = bl = true;
                        if (!bl2) {
                            bl3 = bl;
                            if (Intrinsics.areEqual(t, (Object)this.this$0.$element)) {
                                this.$removed.element = true;
                                bl3 = false;
                            }
                        }
                        return bl3;
                    }
                }).iterator();
            }
        };
    }

    @NotNull
    public static final <T> Sequence<T> minus(@NotNull Sequence<? extends T> sequence, @NotNull Sequence<? extends T> sequence2) {
        Intrinsics.checkParameterIsNotNull(sequence, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(sequence2, (String)"elements");
        return new Sequence<T>(sequence, sequence2){
            final /* synthetic */ Sequence $elements;
            final /* synthetic */ Sequence receiver$0;
            {
                this.receiver$0 = sequence;
                this.$elements = sequence2;
            }

            @NotNull
            public Iterator<T> iterator() {
                HashSet<T> hashSet = SequencesKt.toHashSet(this.$elements);
                if (hashSet.isEmpty()) {
                    return this.receiver$0.iterator();
                }
                return SequencesKt.filterNot(this.receiver$0, (Function1)new Function1<T, Boolean>(hashSet){
                    final /* synthetic */ HashSet $other;
                    {
                        this.$other = hashSet;
                        super(1);
                    }

                    public final boolean invoke(T t) {
                        return this.$other.contains(t);
                    }
                }).iterator();
            }
        };
    }

    @NotNull
    public static final <T> Sequence<T> minus(@NotNull Sequence<? extends T> sequence, @NotNull T[] arrT) {
        Intrinsics.checkParameterIsNotNull(sequence, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(arrT, (String)"elements");
        boolean bl = arrT.length == 0;
        if (bl) {
            return sequence;
        }
        return new Sequence<T>(sequence, arrT){
            final /* synthetic */ Object[] $elements;
            final /* synthetic */ Sequence receiver$0;
            {
                this.receiver$0 = sequence;
                this.$elements = arrobject;
            }

            @NotNull
            public Iterator<T> iterator() {
                HashSet<Object> hashSet = ArraysKt.toHashSet(this.$elements);
                return SequencesKt.filterNot(this.receiver$0, (Function1)new Function1<T, Boolean>(hashSet){
                    final /* synthetic */ HashSet $other;
                    {
                        this.$other = hashSet;
                        super(1);
                    }

                    public final boolean invoke(T t) {
                        return this.$other.contains(t);
                    }
                }).iterator();
            }
        };
    }

    @InlineOnly
    private static final <T> Sequence<T> minusElement(@NotNull Sequence<? extends T> sequence, T t) {
        return SequencesKt.minus(sequence, t);
    }

    public static final <T> boolean none(@NotNull Sequence<? extends T> sequence) {
        Intrinsics.checkParameterIsNotNull(sequence, (String)"$receiver");
        return sequence.iterator().hasNext() ^ true;
    }

    public static final <T> boolean none(@NotNull Sequence<? extends T> object, @NotNull Function1<? super T, Boolean> function1) {
        Intrinsics.checkParameterIsNotNull(object, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(function1, (String)"predicate");
        object = object.iterator();
        while (object.hasNext()) {
            if (!((Boolean)function1.invoke(object.next())).booleanValue()) continue;
            return false;
        }
        return true;
    }

    @SinceKotlin(version="1.1")
    @NotNull
    public static final <T> Sequence<T> onEach(@NotNull Sequence<? extends T> sequence, @NotNull Function1<? super T, Unit> function1) {
        Intrinsics.checkParameterIsNotNull(sequence, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(function1, (String)"action");
        return SequencesKt.map(sequence, (Function1)new Function1<T, T>(function1){
            final /* synthetic */ Function1 $action;
            {
                this.$action = function1;
                super(1);
            }

            public final T invoke(T t) {
                this.$action.invoke(t);
                return t;
            }
        });
    }

    @NotNull
    public static final <T> Pair<List<T>, List<T>> partition(@NotNull Sequence<? extends T> object, @NotNull Function1<? super T, Boolean> function1) {
        Intrinsics.checkParameterIsNotNull(object, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(function1, (String)"predicate");
        ArrayList arrayList = new ArrayList();
        ArrayList arrayList2 = new ArrayList();
        object = object.iterator();
        while (object.hasNext()) {
            Object e = object.next();
            if (((Boolean)function1.invoke(e)).booleanValue()) {
                arrayList.add(e);
                continue;
            }
            arrayList2.add(e);
        }
        return new Pair(arrayList, arrayList2);
    }

    @NotNull
    public static final <T> Sequence<T> plus(@NotNull Sequence<? extends T> sequence, @NotNull Iterable<? extends T> iterable) {
        Intrinsics.checkParameterIsNotNull(sequence, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(iterable, (String)"elements");
        return SequencesKt.flatten(SequencesKt.sequenceOf(sequence, CollectionsKt.asSequence(iterable)));
    }

    @NotNull
    public static final <T> Sequence<T> plus(@NotNull Sequence<? extends T> sequence, T t) {
        Intrinsics.checkParameterIsNotNull(sequence, (String)"$receiver");
        return SequencesKt.flatten(SequencesKt.sequenceOf(sequence, SequencesKt.sequenceOf(t)));
    }

    @NotNull
    public static final <T> Sequence<T> plus(@NotNull Sequence<? extends T> sequence, @NotNull Sequence<? extends T> sequence2) {
        Intrinsics.checkParameterIsNotNull(sequence, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(sequence2, (String)"elements");
        return SequencesKt.flatten(SequencesKt.sequenceOf(sequence, sequence2));
    }

    @NotNull
    public static final <T> Sequence<T> plus(@NotNull Sequence<? extends T> sequence, @NotNull T[] arrT) {
        Intrinsics.checkParameterIsNotNull(sequence, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(arrT, (String)"elements");
        return SequencesKt.plus(sequence, (Iterable)ArraysKt.asList(arrT));
    }

    @InlineOnly
    private static final <T> Sequence<T> plusElement(@NotNull Sequence<? extends T> sequence, T t) {
        return SequencesKt.plus(sequence, t);
    }

    public static final <S, T extends S> S reduce(@NotNull Sequence<? extends T> object, @NotNull Function2<? super S, ? super T, ? extends S> function2) {
        Intrinsics.checkParameterIsNotNull(object, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(function2, (String)"operation");
        Iterator<T> iterator2 = object.iterator();
        if (!iterator2.hasNext()) {
            throw (Throwable)new UnsupportedOperationException("Empty sequence can't be reduced.");
        }
        object = iterator2.next();
        while (iterator2.hasNext()) {
            object = function2.invoke(object, iterator2.next());
        }
        return (S)object;
    }

    public static final <S, T extends S> S reduceIndexed(@NotNull Sequence<? extends T> object, @NotNull Function3<? super Integer, ? super S, ? super T, ? extends S> function3) {
        Intrinsics.checkParameterIsNotNull(object, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(function3, (String)"operation");
        Iterator<T> iterator2 = object.iterator();
        if (!iterator2.hasNext()) {
            throw (Throwable)new UnsupportedOperationException("Empty sequence can't be reduced.");
        }
        object = iterator2.next();
        int n = 1;
        while (iterator2.hasNext()) {
            int n2 = n + 1;
            object = function3.invoke((Object)n, object, iterator2.next());
            n = n2;
        }
        return (S)object;
    }

    @NotNull
    public static final <T> Sequence<T> requireNoNulls(@NotNull Sequence<? extends T> sequence) {
        Intrinsics.checkParameterIsNotNull(sequence, (String)"$receiver");
        return SequencesKt.map(sequence, (Function1)new Function1<T, T>(sequence){
            final /* synthetic */ Sequence receiver$0;
            {
                this.receiver$0 = sequence;
                super(1);
            }

            @NotNull
            public final T invoke(@Nullable T object) {
                if (object != null) {
                    return (T)object;
                }
                object = new StringBuilder();
                object.append("null element found in ");
                object.append(this.receiver$0);
                object.append('.');
                throw (Throwable)new IllegalArgumentException(object.toString());
            }
        });
    }

    public static final <T> T single(@NotNull Sequence<? extends T> object) {
        Intrinsics.checkParameterIsNotNull(object, (String)"$receiver");
        object = object.iterator();
        if (!object.hasNext()) {
            throw (Throwable)new NoSuchElementException("Sequence is empty.");
        }
        Object e = object.next();
        if (object.hasNext()) {
            throw (Throwable)new IllegalArgumentException("Sequence has more than one element.");
        }
        return (T)e;
    }

    public static final <T> T single(@NotNull Sequence<? extends T> sequence, @NotNull Function1<? super T, Boolean> function1) {
        Intrinsics.checkParameterIsNotNull(sequence, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(function1, (String)"predicate");
        Iterator<T> iterator2 = sequence.iterator();
        sequence = null;
        boolean bl = false;
        while (iterator2.hasNext()) {
            T t = iterator2.next();
            if (!((Boolean)function1.invoke(t)).booleanValue()) continue;
            if (bl) {
                throw (Throwable)new IllegalArgumentException("Sequence contains more than one matching element.");
            }
            sequence = t;
            bl = true;
        }
        if (!bl) {
            throw (Throwable)new NoSuchElementException("Sequence contains no element matching the predicate.");
        }
        return (T)sequence;
    }

    @Nullable
    public static final <T> T singleOrNull(@NotNull Sequence<? extends T> object) {
        Intrinsics.checkParameterIsNotNull(object, (String)"$receiver");
        object = object.iterator();
        if (!object.hasNext()) {
            return null;
        }
        Object e = object.next();
        if (object.hasNext()) {
            return null;
        }
        return (T)e;
    }

    @Nullable
    public static final <T> T singleOrNull(@NotNull Sequence<? extends T> sequence, @NotNull Function1<? super T, Boolean> function1) {
        Intrinsics.checkParameterIsNotNull(sequence, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(function1, (String)"predicate");
        Iterator<T> iterator2 = sequence.iterator();
        boolean bl = false;
        sequence = null;
        while (iterator2.hasNext()) {
            T t = iterator2.next();
            if (!((Boolean)function1.invoke(t)).booleanValue()) continue;
            if (bl) {
                return null;
            }
            bl = true;
            sequence = t;
        }
        if (!bl) {
            return null;
        }
        return (T)sequence;
    }

    @NotNull
    public static final <T extends Comparable<? super T>> Sequence<T> sorted(@NotNull Sequence<? extends T> sequence) {
        Intrinsics.checkParameterIsNotNull(sequence, (String)"$receiver");
        return new Sequence<T>(sequence){
            final /* synthetic */ Sequence receiver$0;
            {
                this.receiver$0 = sequence;
            }

            @NotNull
            public Iterator<T> iterator() {
                List<T> list = SequencesKt.toMutableList(this.receiver$0);
                CollectionsKt.sort(list);
                return list.iterator();
            }
        };
    }

    @NotNull
    public static final <T, R extends Comparable<? super R>> Sequence<T> sortedBy(@NotNull Sequence<? extends T> sequence, @NotNull Function1<? super T, ? extends R> function1) {
        Intrinsics.checkParameterIsNotNull(sequence, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(function1, (String)"selector");
        return SequencesKt.sortedWith(sequence, }
    java.lang.IllegalStateException: Inner class got unexpected class file - revert this change
    
    