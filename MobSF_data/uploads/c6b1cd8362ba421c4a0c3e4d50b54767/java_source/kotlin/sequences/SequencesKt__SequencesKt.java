/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  kotlin.Metadata
 *  kotlin.Pair
 *  kotlin.TuplesKt
 *  kotlin.internal.InlineOnly
 *  kotlin.internal.LowPriorityInOverloadResolution
 *  kotlin.jvm.JvmName
 *  kotlin.jvm.functions.Function0
 *  kotlin.jvm.functions.Function1
 *  kotlin.jvm.internal.Intrinsics
 *  kotlin.sequences.SequencesKt__SequencesKt$Sequence
 *  kotlin.sequences.SequencesKt__SequencesKt$asSequence$
 *  kotlin.sequences.SequencesKt__SequencesKt$asSequence$$inlined
 *  kotlin.sequences.SequencesKt__SequencesKt$asSequence$$inlined$Sequence
 *  kotlin.sequences.SequencesKt__SequencesKt$flatten
 *  kotlin.sequences.SequencesKt__SequencesKt$generateSequence
 *  org.jetbrains.annotations.NotNull
 *  org.jetbrains.annotations.Nullable
 */
package kotlin.sequences;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import kotlin.Metadata;
import kotlin.Pair;
import kotlin.TuplesKt;
import kotlin.collections.ArraysKt;
import kotlin.internal.InlineOnly;
import kotlin.internal.LowPriorityInOverloadResolution;
import kotlin.jvm.JvmName;
import kotlin.jvm.functions.Function0;
import kotlin.jvm.functions.Function1;
import kotlin.jvm.internal.Intrinsics;
import kotlin.sequences.ConstrainedOnceSequence;
import kotlin.sequences.EmptySequence;
import kotlin.sequences.FlatteningSequence;
import kotlin.sequences.GeneratorSequence;
import kotlin.sequences.SequencesKt;
import kotlin.sequences.SequencesKt__SequencesJVMKt;
import kotlin.sequences.SequencesKt__SequencesKt;
import kotlin.sequences.SequencesKt__SequencesKt$asSequence$;
import kotlin.sequences.TransformingSequence;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

@Metadata(bv={1, 0, 2}, d1={"\u0000@\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\u0010(\n\u0002\b\u0002\n\u0002\u0010\u0000\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0010\u0011\n\u0002\b\u0006\n\u0002\u0010\u001c\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\u0010 \n\u0000\u001a+\u0010\u0000\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0001\"\u0004\b\u0000\u0010\u00022\u0014\b\u0004\u0010\u0003\u001a\u000e\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00020\u00050\u0004H\u0087\b\u001a\u0012\u0010\u0006\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0001\"\u0004\b\u0000\u0010\u0002\u001a&\u0010\u0007\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0001\"\b\b\u0000\u0010\u0002*\u00020\b2\u000e\u0010\t\u001a\n\u0012\u0006\u0012\u0004\u0018\u0001H\u00020\u0004\u001a<\u0010\u0007\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0001\"\b\b\u0000\u0010\u0002*\u00020\b2\u000e\u0010\n\u001a\n\u0012\u0006\u0012\u0004\u0018\u0001H\u00020\u00042\u0014\u0010\t\u001a\u0010\u0012\u0004\u0012\u0002H\u0002\u0012\u0006\u0012\u0004\u0018\u0001H\u00020\u000b\u001a=\u0010\u0007\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0001\"\b\b\u0000\u0010\u0002*\u00020\b2\b\u0010\f\u001a\u0004\u0018\u0001H\u00022\u0014\u0010\t\u001a\u0010\u0012\u0004\u0012\u0002H\u0002\u0012\u0006\u0012\u0004\u0018\u0001H\u00020\u000bH\u0007\u00a2\u0006\u0002\u0010\r\u001a+\u0010\u000e\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0001\"\u0004\b\u0000\u0010\u00022\u0012\u0010\u000f\u001a\n\u0012\u0006\b\u0001\u0012\u0002H\u00020\u0010\"\u0002H\u0002\u00a2\u0006\u0002\u0010\u0011\u001a\u001c\u0010\u0012\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0005\u001a\u001c\u0010\u0013\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0001\u001aC\u0010\u0014\u001a\b\u0012\u0004\u0012\u0002H\u00150\u0001\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\u0015*\b\u0012\u0004\u0012\u0002H\u00020\u00012\u0018\u0010\u0003\u001a\u0014\u0012\u0004\u0012\u0002H\u0002\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00150\u00050\u000bH\u0002\u00a2\u0006\u0002\b\u0016\u001a)\u0010\u0014\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0001\"\u0004\b\u0000\u0010\u0002*\u000e\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00020\u00170\u0001H\u0007\u00a2\u0006\u0002\b\u0018\u001a\"\u0010\u0014\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0001\"\u0004\b\u0000\u0010\u0002*\u000e\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00020\u00010\u0001\u001a@\u0010\u0019\u001a\u001a\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00020\u001b\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00150\u001b0\u001a\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\u0015*\u0014\u0012\u0010\u0012\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\u00150\u001a0\u0001\u00a8\u0006\u001c"}, d2={"Sequence", "Lkotlin/sequences/Sequence;", "T", "iterator", "Lkotlin/Function0;", "", "emptySequence", "generateSequence", "", "nextFunction", "seedFunction", "Lkotlin/Function1;", "seed", "(Ljava/lang/Object;Lkotlin/jvm/functions/Function1;)Lkotlin/sequences/Sequence;", "sequenceOf", "elements", "", "([Ljava/lang/Object;)Lkotlin/sequences/Sequence;", "asSequence", "constrainOnce", "flatten", "R", "flatten$SequencesKt__SequencesKt", "", "flattenSequenceOfIterable", "unzip", "Lkotlin/Pair;", "", "kotlin-stdlib"}, k=5, mv={1, 1, 10}, xi=1, xs="kotlin/sequences/SequencesKt")
class SequencesKt__SequencesKt
extends SequencesKt__SequencesJVMKt {
    @InlineOnly
    private static final <T> kotlin.sequences.Sequence<T> Sequence(Function0<? extends Iterator<? extends T>> function0) {
        return new kotlin.sequences.Sequence<T>(function0){
            final /* synthetic */ Function0 $iterator;
            {
                this.$iterator = function0;
            }

            @NotNull
            public Iterator<T> iterator() {
                return (Iterator)this.$iterator.invoke();
            }
        };
    }

    @NotNull
    public static final <T> kotlin.sequences.Sequence<T> asSequence(@NotNull Iterator<? extends T> iterator2) {
        Intrinsics.checkParameterIsNotNull(iterator2, (String)"$receiver");
        return SequencesKt.constrainOnce(new kotlin.sequences.Sequence<T>(iterator2){
            final /* synthetic */ Iterator receiver$0$inlined;
            {
                this.receiver$0$inlined = iterator2;
            }

            @NotNull
            public Iterator<T> iterator() {
                return this.receiver$0$inlined;
            }
        });
    }

    @NotNull
    public static final <T> kotlin.sequences.Sequence<T> constrainOnce(@NotNull kotlin.sequences.Sequence<? extends T> sequence) {
        Intrinsics.checkParameterIsNotNull(sequence, (String)"$receiver");
        if (sequence instanceof ConstrainedOnceSequence) {
            return sequence;
        }
        return new ConstrainedOnceSequence<T>(sequence);
    }

    @NotNull
    public static final <T> kotlin.sequences.Sequence<T> emptySequence() {
        return EmptySequence.INSTANCE;
    }

    @NotNull
    public static final <T> kotlin.sequences.Sequence<T> flatten(@NotNull kotlin.sequences.Sequence<? extends kotlin.sequences.Sequence<? extends T>> sequence) {
        Intrinsics.checkParameterIsNotNull(sequence, (String)"$receiver");
        return SequencesKt__SequencesKt.flatten$SequencesKt__SequencesKt(sequence, flatten.INSTANCE);
    }

    private static final <T, R> kotlin.sequences.Sequence<R> flatten$SequencesKt__SequencesKt(@NotNull kotlin.sequences.Sequence<? extends T> sequence, Function1<? super T, ? extends Iterator<? extends R>> function1) {
        if (sequence instanceof TransformingSequence) {
            return ((TransformingSequence)sequence).flatten$kotlin_stdlib(function1);
        }
        return new FlatteningSequence(sequence, flatten.INSTANCE, function1);
    }

    @JvmName(name="flattenSequenceOfIterable")
    @NotNull
    public static final <T> kotlin.sequences.Sequence<T> flattenSequenceOfIterable(@NotNull kotlin.sequences.Sequence<? extends Iterable<? extends T>> sequence) {
        Intrinsics.checkParameterIsNotNull(sequence, (String)"$receiver");
        return SequencesKt__SequencesKt.flatten$SequencesKt__SequencesKt(sequence, flatten.INSTANCE);
    }

    @LowPriorityInOverloadResolution
    @NotNull
    public static final <T> kotlin.sequences.Sequence<T> generateSequence(@Nullable T t, @NotNull Function1<? super T, ? extends T> function1) {
        Intrinsics.checkParameterIsNotNull(function1, (String)"nextFunction");
        if (t == null) {
            return EmptySequence.INSTANCE;
        }
        return new GeneratorSequence<T>((Function0)new Function0<T>(t){
            final /* synthetic */ Object $seed;
            {
                this.$seed = object;
                super(0);
            }

            @Nullable
            public final T invoke() {
                return (T)this.$seed;
            }
        }, function1);
    }

    @NotNull
    public static final <T> kotlin.sequences.Sequence<T> generateSequence(@NotNull Function0<? extends T> function0) {
        Intrinsics.checkParameterIsNotNull(function0, (String)"nextFunction");
        return SequencesKt.constrainOnce((kotlin.sequences.Sequence)new GeneratorSequence<T>(function0, (Function1)new Function1<T, T>(function0){
            final /* synthetic */ Function0 $nextFunction;
            {
                this.$nextFunction = function0;
                super(1);
            }

            @Nullable
            public final T invoke(@NotNull T t) {
                Intrinsics.checkParameterIsNotNull(t, (String)"it");
                return (T)this.$nextFunction.invoke();
            }
        }));
    }

    @NotNull
    public static final <T> kotlin.sequences.Sequence<T> generateSequence(@NotNull Function0<? extends T> function0, @NotNull Function1<? super T, ? extends T> function1) {
        Intrinsics.checkParameterIsNotNull(function0, (String)"seedFunction");
        Intrinsics.checkParameterIsNotNull(function1, (String)"nextFunction");
        return new GeneratorSequence<T>(function0, function1);
    }

    @NotNull
    public static final /* varargs */ <T> kotlin.sequences.Sequence<T> sequenceOf(@NotNull T ... arrT) {
        Intrinsics.checkParameterIsNotNull(arrT, (String)"elements");
        boolean bl = arrT.length == 0;
        if (bl) {
            return SequencesKt.emptySequence();
        }
        return ArraysKt.asSequence(arrT);
    }

    @NotNull
    public static final <T, R> Pair<List<T>, List<R>> unzip(@NotNull kotlin.sequences.Sequence<? extends Pair<? extends T, ? extends R>> object) {
        Intrinsics.checkParameterIsNotNull(object, (String)"$receiver");
        ArrayList<Object> arrayList = new ArrayList<Object>();
        ArrayList<Object> arrayList2 = new ArrayList<Object>();
        object = object.iterator();
        while (object.hasNext()) {
            Pair pair = (Pair)object.next();
            arrayList.add(pair.getFirst());
            arrayList2.add(pair.getSecond());
        }
        return TuplesKt.to(arrayList, arrayList2);
    }
}

