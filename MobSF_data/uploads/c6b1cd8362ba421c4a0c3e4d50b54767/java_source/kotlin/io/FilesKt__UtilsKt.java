/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  kotlin.Metadata
 *  kotlin.Unit
 *  kotlin.io.FilesKt__UtilsKt$copyRecursively
 *  kotlin.jvm.functions.Function2
 *  kotlin.jvm.internal.DefaultConstructorMarker
 *  kotlin.jvm.internal.Intrinsics
 *  org.jetbrains.annotations.NotNull
 *  org.jetbrains.annotations.Nullable
 */
package kotlin.io;

import java.io.Closeable;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import kotlin.Metadata;
import kotlin.Unit;
import kotlin.collections.CollectionsKt;
import kotlin.io.ByteStreamsKt;
import kotlin.io.CloseableKt;
import kotlin.io.FileAlreadyExistsException;
import kotlin.io.FilePathComponents;
import kotlin.io.FileSystemException;
import kotlin.io.FileTreeWalk;
import kotlin.io.FilesKt;
import kotlin.io.FilesKt__FileTreeWalkKt;
import kotlin.io.FilesKt__UtilsKt;
import kotlin.io.NoSuchFileException;
import kotlin.io.OnErrorAction;
import kotlin.io.TerminateException;
import kotlin.jvm.functions.Function2;
import kotlin.jvm.internal.DefaultConstructorMarker;
import kotlin.jvm.internal.Intrinsics;
import kotlin.sequences.Sequence;
import kotlin.text.StringsKt;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

@Metadata(bv={1, 0, 2}, d1={"\u0000<\n\u0000\n\u0002\u0010\u000e\n\u0002\u0018\u0002\n\u0002\b\f\n\u0002\u0010\u000b\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0010\b\n\u0002\b\u0004\n\u0002\u0010 \n\u0000\n\u0002\u0018\u0002\n\u0002\b\f\u001a(\u0010\t\u001a\u00020\u00022\b\b\u0002\u0010\n\u001a\u00020\u00012\n\b\u0002\u0010\u000b\u001a\u0004\u0018\u00010\u00012\n\b\u0002\u0010\f\u001a\u0004\u0018\u00010\u0002\u001a(\u0010\r\u001a\u00020\u00022\b\b\u0002\u0010\n\u001a\u00020\u00012\n\b\u0002\u0010\u000b\u001a\u0004\u0018\u00010\u00012\n\b\u0002\u0010\f\u001a\u0004\u0018\u00010\u0002\u001a8\u0010\u000e\u001a\u00020\u000f*\u00020\u00022\u0006\u0010\u0010\u001a\u00020\u00022\b\b\u0002\u0010\u0011\u001a\u00020\u000f2\u001a\b\u0002\u0010\u0012\u001a\u0014\u0012\u0004\u0012\u00020\u0002\u0012\u0004\u0012\u00020\u0014\u0012\u0004\u0012\u00020\u00150\u0013\u001a&\u0010\u0016\u001a\u00020\u0002*\u00020\u00022\u0006\u0010\u0010\u001a\u00020\u00022\b\b\u0002\u0010\u0011\u001a\u00020\u000f2\b\b\u0002\u0010\u0017\u001a\u00020\u0018\u001a\n\u0010\u0019\u001a\u00020\u000f*\u00020\u0002\u001a\u0012\u0010\u001a\u001a\u00020\u000f*\u00020\u00022\u0006\u0010\u001b\u001a\u00020\u0002\u001a\u0012\u0010\u001a\u001a\u00020\u000f*\u00020\u00022\u0006\u0010\u001b\u001a\u00020\u0001\u001a\n\u0010\u001c\u001a\u00020\u0002*\u00020\u0002\u001a\u001d\u0010\u001c\u001a\b\u0012\u0004\u0012\u00020\u00020\u001d*\b\u0012\u0004\u0012\u00020\u00020\u001dH\u0002\u00a2\u0006\u0002\b\u001e\u001a\u0011\u0010\u001c\u001a\u00020\u001f*\u00020\u001fH\u0002\u00a2\u0006\u0002\b\u001e\u001a\u0012\u0010 \u001a\u00020\u0002*\u00020\u00022\u0006\u0010!\u001a\u00020\u0002\u001a\u0014\u0010\"\u001a\u0004\u0018\u00010\u0002*\u00020\u00022\u0006\u0010!\u001a\u00020\u0002\u001a\u0012\u0010#\u001a\u00020\u0002*\u00020\u00022\u0006\u0010!\u001a\u00020\u0002\u001a\u0012\u0010$\u001a\u00020\u0002*\u00020\u00022\u0006\u0010%\u001a\u00020\u0002\u001a\u0012\u0010$\u001a\u00020\u0002*\u00020\u00022\u0006\u0010%\u001a\u00020\u0001\u001a\u0012\u0010&\u001a\u00020\u0002*\u00020\u00022\u0006\u0010%\u001a\u00020\u0002\u001a\u0012\u0010&\u001a\u00020\u0002*\u00020\u00022\u0006\u0010%\u001a\u00020\u0001\u001a\u0012\u0010'\u001a\u00020\u000f*\u00020\u00022\u0006\u0010\u001b\u001a\u00020\u0002\u001a\u0012\u0010'\u001a\u00020\u000f*\u00020\u00022\u0006\u0010\u001b\u001a\u00020\u0001\u001a\u0012\u0010(\u001a\u00020\u0001*\u00020\u00022\u0006\u0010!\u001a\u00020\u0002\u001a\u001b\u0010)\u001a\u0004\u0018\u00010\u0001*\u00020\u00022\u0006\u0010!\u001a\u00020\u0002H\u0002\u00a2\u0006\u0002\b*\"\u0015\u0010\u0000\u001a\u00020\u0001*\u00020\u00028F\u00a2\u0006\u0006\u001a\u0004\b\u0003\u0010\u0004\"\u0015\u0010\u0005\u001a\u00020\u0001*\u00020\u00028F\u00a2\u0006\u0006\u001a\u0004\b\u0006\u0010\u0004\"\u0015\u0010\u0007\u001a\u00020\u0001*\u00020\u00028F\u00a2\u0006\u0006\u001a\u0004\b\b\u0010\u0004\u00a8\u0006+"}, d2={"extension", "", "Ljava/io/File;", "getExtension", "(Ljava/io/File;)Ljava/lang/String;", "invariantSeparatorsPath", "getInvariantSeparatorsPath", "nameWithoutExtension", "getNameWithoutExtension", "createTempDir", "prefix", "suffix", "directory", "createTempFile", "copyRecursively", "", "target", "overwrite", "onError", "Lkotlin/Function2;", "Ljava/io/IOException;", "Lkotlin/io/OnErrorAction;", "copyTo", "bufferSize", "", "deleteRecursively", "endsWith", "other", "normalize", "", "normalize$FilesKt__UtilsKt", "Lkotlin/io/FilePathComponents;", "relativeTo", "base", "relativeToOrNull", "relativeToOrSelf", "resolve", "relative", "resolveSibling", "startsWith", "toRelativeString", "toRelativeStringOrNull", "toRelativeStringOrNull$FilesKt__UtilsKt", "kotlin-stdlib"}, k=5, mv={1, 1, 10}, xi=1, xs="kotlin/io/FilesKt")
class FilesKt__UtilsKt
extends FilesKt__FileTreeWalkKt {
    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    public static final boolean copyRecursively(@NotNull File var0, @NotNull File var1_2, boolean var2_3, @NotNull Function2<? super File, ? super IOException, ? extends OnErrorAction> var3_4) {
        block5 : {
            Intrinsics.checkParameterIsNotNull((Object)var0, (String)"$receiver");
            Intrinsics.checkParameterIsNotNull((Object)var1_2, (String)"target");
            Intrinsics.checkParameterIsNotNull(var3_4, (String)"onError");
            if (!var0.exists()) {
                if ((OnErrorAction)var3_4.invoke((Object)var0, (Object)new NoSuchFileException(var0, null, "The source file doesn't exist.", 2, null)) == OnErrorAction.TERMINATE) return false;
                return true;
            }
            try {
                block6 : {
                    var5_5 = FilesKt.walkTopDown(var0).onFail((Function2<? super File, ? super IOException, Unit>)((Function2)new Function2<File, IOException, Unit>(var3_4){
                        final /* synthetic */ Function2 $onError;
                        {
                            this.$onError = function2;
                            super(2);
                        }

                        public final void invoke(@NotNull File file, @NotNull IOException iOException) {
                            Intrinsics.checkParameterIsNotNull((Object)file, (String)"f");
                            Intrinsics.checkParameterIsNotNull((Object)iOException, (String)"e");
                            if ((OnErrorAction)((Object)this.$onError.invoke((Object)file, (Object)iOException)) == OnErrorAction.TERMINATE) {
                                throw (Throwable)new TerminateException(file);
                            }
                        }
                    })).iterator();
lbl9: // 5 sources:
                    if (var5_5.hasNext() == false) return true;
                    var6_8 = var5_5.next();
                    if (var6_8.exists()) break block6;
                    if ((OnErrorAction)var3_4.invoke((Object)var6_8, (Object)new NoSuchFileException(var6_8, null, "The source file doesn't exist.", 2, null)) != OnErrorAction.TERMINATE) ** GOTO lbl9
                    return false;
                }
                var7_11 = new File(var1_2, FilesKt.toRelativeString(var6_8, var0));
                if (var7_11.exists() && (!var6_8.isDirectory() || !var7_11.isDirectory())) break block5;
lbl17: // 2 sources:
                do {
                    block7 : {
                        if (!var6_8.isDirectory()) break block7;
                        var7_11.mkdirs();
                        ** GOTO lbl9
                    }
                    if (FilesKt.copyTo$default(var6_8, var7_11, var2_3, 0, 4, null).length() == var6_8.length() || (var6_9 = (OnErrorAction)var3_4.invoke((Object)var6_8, (Object)new IOException("Source file wasn't copied completely, length of destination file differs."))) != (var7_12 = OnErrorAction.TERMINATE)) ** GOTO lbl9
                    return false;
                    break;
                } while (true);
            }
            catch (TerminateException var0_1) {
                return false;
            }
        }
        ** while (!(var4_6 = var2_3 == false || (var7_11.isDirectory() != false ? FilesKt.deleteRecursively((File)var7_11) == false : var7_11.delete() == false)))
lbl28: // 1 sources:
        if ((OnErrorAction)var3_4.invoke((Object)var7_11, (Object)new FileAlreadyExistsException(var6_8, var7_11, "The destination file already exists.")) != OnErrorAction.TERMINATE) ** GOTO lbl9
        return false;
    }

    public static /* bridge */ /* synthetic */ boolean copyRecursively$default(File file, File file2, boolean bl, Function2 function2, int n, Object object) {
        if ((n & 2) != 0) {
            bl = false;
        }
        if ((n & 4) != 0) {
            function2 = copyRecursively.INSTANCE;
        }
        return FilesKt.copyRecursively(file, file2, bl, (Function2<? super File, ? super IOException, ? extends OnErrorAction>)function2);
    }

    /*
     * WARNING - Removed back jump from a try to a catch block - possible behaviour change.
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    @NotNull
    public static final File copyTo(@NotNull File serializable, @NotNull File file, boolean bl, int n) {
        Throwable throwable6222;
        Closeable closeable;
        Object object;
        block16 : {
            Throwable throwable32222;
            Intrinsics.checkParameterIsNotNull((Object)serializable, (String)"$receiver");
            Intrinsics.checkParameterIsNotNull((Object)file, (String)"target");
            if (!serializable.exists()) {
                throw (Throwable)new NoSuchFileException((File)serializable, null, "The source file doesn't exist.", 2, null);
            }
            if (file.exists()) {
                boolean bl2 = true;
                if (bl && file.delete()) {
                    bl2 = false;
                }
                if (bl2) {
                    throw (Throwable)new FileAlreadyExistsException((File)serializable, file, "The destination file already exists.");
                }
            }
            if (serializable.isDirectory()) {
                if (file.mkdirs()) return file;
                throw (Throwable)new FileSystemException((File)serializable, file, "Failed to create target directory.");
            }
            object = file.getParentFile();
            if (object != null) {
                object.mkdirs();
            }
            closeable = new FileInputStream((File)serializable);
            Throwable throwable2 = null;
            object = throwable2;
            FileInputStream fileInputStream = (FileInputStream)closeable;
            object = throwable2;
            Closeable closeable2 = new FileOutputStream(file);
            object = throwable2;
            Throwable throwable4 = null;
            serializable = throwable4;
            object = (FileOutputStream)closeable2;
            serializable = throwable4;
            ByteStreamsKt.copyTo(fileInputStream, (OutputStream)object, n);
            object = throwable2;
            CloseableKt.closeFinally(closeable2, throwable4);
            CloseableKt.closeFinally(closeable, throwable2);
            return file;
            {
                catch (Throwable throwable32222) {
                }
                catch (Throwable throwable5) {}
                serializable = throwable5;
                {
                    throw throwable5;
                }
            }
            object = throwable2;
            try {
                CloseableKt.closeFinally(closeable2, (Throwable)serializable);
                object = throwable2;
                throw throwable32222;
            }
            catch (Throwable throwable6222) {
                break block16;
            }
            catch (Throwable throwable7) {
                object = throwable7;
                throw throwable7;
            }
        }
        CloseableKt.closeFinally(closeable, (Throwable)object);
        throw throwable6222;
    }

    @NotNull
    public static /* bridge */ /* synthetic */ File copyTo$default(File file, File file2, boolean bl, int n, int n2, Object object) {
        if ((n2 & 2) != 0) {
            bl = false;
        }
        if ((n2 & 4) != 0) {
            n = 8192;
        }
        return FilesKt.copyTo(file, file2, bl, n);
    }

    @NotNull
    public static final File createTempDir(@NotNull String object, @Nullable String charSequence, @Nullable File file) {
        Intrinsics.checkParameterIsNotNull((Object)object, (String)"prefix");
        object = File.createTempFile((String)object, (String)charSequence, file);
        object.delete();
        if (object.mkdir()) {
            Intrinsics.checkExpressionValueIsNotNull((Object)object, (String)"dir");
            return object;
        }
        charSequence = new StringBuilder();
        charSequence.append("Unable to create temporary directory ");
        charSequence.append(object);
        charSequence.append('.');
        throw (Throwable)new IOException(charSequence.toString());
    }

    @NotNull
    public static /* bridge */ /* synthetic */ File createTempDir$default(String string2, String string3, File file, int n, Object object) {
        if ((n & 1) != 0) {
            string2 = "tmp";
        }
        if ((n & 2) != 0) {
            string3 = null;
        }
        if ((n & 4) != 0) {
            file = null;
        }
        return FilesKt.createTempDir(string2, string3, file);
    }

    @NotNull
    public static final File createTempFile(@NotNull String object, @Nullable String string2, @Nullable File file) {
        Intrinsics.checkParameterIsNotNull((Object)object, (String)"prefix");
        object = File.createTempFile((String)object, string2, file);
        Intrinsics.checkExpressionValueIsNotNull((Object)object, (String)"File.createTempFile(prefix, suffix, directory)");
        return object;
    }

    @NotNull
    public static /* bridge */ /* synthetic */ File createTempFile$default(String string2, String string3, File file, int n, Object object) {
        if ((n & 1) != 0) {
            string2 = "tmp";
        }
        if ((n & 2) != 0) {
            string3 = null;
        }
        if ((n & 4) != 0) {
            file = null;
        }
        return FilesKt.createTempFile(string2, string3, file);
    }

    public static final boolean deleteRecursively(@NotNull File object) {
        boolean bl;
        Intrinsics.checkParameterIsNotNull((Object)object, (String)"$receiver");
        object = ((Sequence)FilesKt.walkBottomUp((File)object)).iterator();
        block0 : do {
            bl = true;
            while (object.hasNext()) {
                File file = (File)object.next();
                if ((file.delete() || !file.exists()) && bl) continue block0;
                bl = false;
            }
            break;
        } while (true);
        return bl;
    }

    public static final boolean endsWith(@NotNull File file, @NotNull File file2) {
        Intrinsics.checkParameterIsNotNull((Object)file, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull((Object)file2, (String)"other");
        FilePathComponents filePathComponents = FilesKt.toComponents(file);
        FilePathComponents filePathComponents2 = FilesKt.toComponents(file2);
        if (filePathComponents2.isRooted()) {
            return Intrinsics.areEqual((Object)file, (Object)file2);
        }
        int n = filePathComponents.getSize() - filePathComponents2.getSize();
        if (n < 0) {
            return false;
        }
        return filePathComponents.getSegments().subList(n, filePathComponents.getSize()).equals(filePathComponents2.getSegments());
    }

    public static final boolean endsWith(@NotNull File file, @NotNull String string2) {
        Intrinsics.checkParameterIsNotNull((Object)file, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull((Object)string2, (String)"other");
        return FilesKt.endsWith(file, new File(string2));
    }

    @NotNull
    public static final String getExtension(@NotNull File object) {
        Intrinsics.checkParameterIsNotNull((Object)object, (String)"$receiver");
        object = object.getName();
        Intrinsics.checkExpressionValueIsNotNull((Object)object, (String)"name");
        return StringsKt.substringAfterLast((String)object, (char)'.', (String)"");
    }

    @NotNull
    public static final String getInvariantSeparatorsPath(@NotNull File object) {
        Intrinsics.checkParameterIsNotNull((Object)object, (String)"$receiver");
        if (File.separatorChar != '/') {
            object = object.getPath();
            Intrinsics.checkExpressionValueIsNotNull((Object)object, (String)"path");
            return StringsKt.replace$default((String)object, (char)File.separatorChar, (char)'/', (boolean)false, (int)4, null);
        }
        object = object.getPath();
        Intrinsics.checkExpressionValueIsNotNull((Object)object, (String)"path");
        return object;
    }

    @NotNull
    public static final String getNameWithoutExtension(@NotNull File object) {
        Intrinsics.checkParameterIsNotNull((Object)object, (String)"$receiver");
        object = object.getName();
        Intrinsics.checkExpressionValueIsNotNull((Object)object, (String)"name");
        return StringsKt.substringBeforeLast$default((String)object, (String)".", null, (int)2, null);
    }

    @NotNull
    public static final File normalize(@NotNull File file) {
        Intrinsics.checkParameterIsNotNull((Object)file, (String)"$receiver");
        Object object = FilesKt.toComponents(file);
        file = object.getRoot();
        object = FilesKt__UtilsKt.normalize$FilesKt__UtilsKt(object.getSegments());
        String string2 = File.separator;
        Intrinsics.checkExpressionValueIsNotNull((Object)string2, (String)"File.separator");
        return FilesKt.resolve(file, CollectionsKt.joinToString$default((Iterable)object, string2, null, null, 0, null, null, 62, null));
    }

    private static final List<File> normalize$FilesKt__UtilsKt(@NotNull List<? extends File> object) {
        List list = new ArrayList(object.size());
        object = object.iterator();
        while (object.hasNext()) {
            File file = (File)object.next();
            String string2 = file.getName();
            if (string2 != null) {
                int n = string2.hashCode();
                if (n != 46) {
                    if (n == 1472 && string2.equals("..")) {
                        if (!list.isEmpty() && Intrinsics.areEqual((Object)((File)CollectionsKt.last(list)).getName(), (Object)"..") ^ true) {
                            list.remove(list.size() - 1);
                            continue;
                        }
                        list.add(file);
                        continue;
                    }
                } else if (string2.equals(".")) continue;
            }
            list.add(file);
        }
        return list;
    }

    private static final FilePathComponents normalize$FilesKt__UtilsKt(@NotNull FilePathComponents filePathComponents) {
        return new FilePathComponents(filePathComponents.getRoot(), FilesKt__UtilsKt.normalize$FilesKt__UtilsKt(filePathComponents.getSegments()));
    }

    @NotNull
    public static final File relativeTo(@NotNull File file, @NotNull File file2) {
        Intrinsics.checkParameterIsNotNull((Object)file, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull((Object)file2, (String)"base");
        return new File(FilesKt.toRelativeString(file, file2));
    }

    @Nullable
    public static final File relativeToOrNull(@NotNull File object, @NotNull File file) {
        Intrinsics.checkParameterIsNotNull((Object)object, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull((Object)file, (String)"base");
        object = FilesKt__UtilsKt.toRelativeStringOrNull$FilesKt__UtilsKt((File)object, file);
        if (object != null) {
            return new File((String)object);
        }
        return null;
    }

    @NotNull
    public static final File relativeToOrSelf(@NotNull File file, @NotNull File object) {
        Intrinsics.checkParameterIsNotNull((Object)file, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull((Object)object, (String)"base");
        object = FilesKt__UtilsKt.toRelativeStringOrNull$FilesKt__UtilsKt(file, (File)object);
        if (object != null) {
            file = new File((String)object);
        }
        return file;
    }

    @NotNull
    public static final File resolve(@NotNull File object, @NotNull File file) {
        Intrinsics.checkParameterIsNotNull((Object)object, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull((Object)file, (String)"relative");
        if (FilesKt.isRooted(file)) {
            return file;
        }
        object = object.toString();
        Intrinsics.checkExpressionValueIsNotNull((Object)object, (String)"baseName");
        CharSequence charSequence = (CharSequence)object;
        boolean bl = charSequence.length() == 0;
        if (!bl && !StringsKt.endsWith$default((CharSequence)charSequence, (char)File.separatorChar, (boolean)false, (int)2, null)) {
            charSequence = new StringBuilder();
            charSequence.append((String)object);
            charSequence.append(File.separatorChar);
            charSequence.append(file);
            return new File(charSequence.toString());
        }
        charSequence = new StringBuilder();
        charSequence.append((String)object);
        charSequence.append(file);
        return new File(charSequence.toString());
    }

    @NotNull
    public static final File resolve(@NotNull File file, @NotNull String string2) {
        Intrinsics.checkParameterIsNotNull((Object)file, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull((Object)string2, (String)"relative");
        return FilesKt.resolve(file, new File(string2));
    }

    @NotNull
    public static final File resolveSibling(@NotNull File file, @NotNull File file2) {
        Intrinsics.checkParameterIsNotNull((Object)file, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull((Object)file2, (String)"relative");
        FilePathComponents filePathComponents = FilesKt.toComponents(file);
        file = filePathComponents.getSize() == 0 ? new File("..") : filePathComponents.subPath(0, filePathComponents.getSize() - 1);
        return FilesKt.resolve(FilesKt.resolve(filePathComponents.getRoot(), file), file2);
    }

    @NotNull
    public static final File resolveSibling(@NotNull File file, @NotNull String string2) {
        Intrinsics.checkParameterIsNotNull((Object)file, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull((Object)string2, (String)"relative");
        return FilesKt.resolveSibling(file, new File(string2));
    }

    public static final boolean startsWith(@NotNull File object, @NotNull File object2) {
        Intrinsics.checkParameterIsNotNull((Object)object, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull((Object)object2, (String)"other");
        object = FilesKt.toComponents((File)object);
        object2 = FilesKt.toComponents((File)object2);
        if (Intrinsics.areEqual((Object)object.getRoot(), (Object)object2.getRoot()) ^ true) {
            return false;
        }
        if (object.getSize() < object2.getSize()) {
            return false;
        }
        return object.getSegments().subList(0, object2.getSize()).equals(object2.getSegments());
    }

    public static final boolean startsWith(@NotNull File file, @NotNull String string2) {
        Intrinsics.checkParameterIsNotNull((Object)file, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull((Object)string2, (String)"other");
        return FilesKt.startsWith(file, new File(string2));
    }

    @NotNull
    public static final String toRelativeString(@NotNull File file, @NotNull File file2) {
        Intrinsics.checkParameterIsNotNull((Object)file, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull((Object)file2, (String)"base");
        CharSequence charSequence = FilesKt__UtilsKt.toRelativeStringOrNull$FilesKt__UtilsKt(file, file2);
        if (charSequence != null) {
            return charSequence;
        }
        charSequence = new StringBuilder();
        charSequence.append("this and base files have different roots: ");
        charSequence.append(file);
        charSequence.append(" and ");
        charSequence.append(file2);
        charSequence.append('.');
        throw (Throwable)new IllegalArgumentException(charSequence.toString());
    }

    private static final String toRelativeStringOrNull$FilesKt__UtilsKt(@NotNull File serializable, File object) {
        int n;
        Object object2 = FilesKt__UtilsKt.normalize$FilesKt__UtilsKt(FilesKt.toComponents((File)serializable));
        object = FilesKt__UtilsKt.normalize$FilesKt__UtilsKt(FilesKt.toComponents((File)object));
        if (Intrinsics.areEqual((Object)object2.getRoot(), (Object)object.getRoot()) ^ true) {
            return null;
        }
        int n2 = object.getSize();
        int n3 = object2.getSize();
        int n4 = Math.min(n3, n2);
        for (n = 0; n < n4 && Intrinsics.areEqual((Object)object2.getSegments().get(n), (Object)object.getSegments().get(n)); ++n) {
        }
        serializable = new StringBuilder();
        n4 = n2 - 1;
        if (n4 >= n) {
            do {
                if (Intrinsics.areEqual((Object)object.getSegments().get(n4).getName(), (Object)"..")) {
                    return null;
                }
                serializable.append("..");
                if (n4 != n) {
                    serializable.append(File.separatorChar);
                }
                if (n4 == n) break;
                --n4;
            } while (true);
        }
        if (n < n3) {
            if (n < n2) {
                serializable.append(File.separatorChar);
            }
            object = CollectionsKt.drop((Iterable)object2.getSegments(), n);
            object2 = (Appendable)((Object)serializable);
            String string2 = File.separator;
            Intrinsics.checkExpressionValueIsNotNull((Object)string2, (String)"File.separator");
            CollectionsKt.joinTo$default((Iterable)object, (Appendable)object2, string2, null, null, 0, null, null, 124, null);
        }
        return serializable.toString();
    }
}

