/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  kotlin.Metadata
 *  kotlin.TypeCastException
 *  kotlin.internal.InlineOnly
 *  kotlin.io.ByteStreamsKt$iterator
 *  kotlin.jvm.JvmName
 *  kotlin.jvm.internal.Intrinsics
 *  org.jetbrains.annotations.NotNull
 */
package kotlin.io;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.Closeable;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.Reader;
import java.io.Writer;
import java.nio.charset.Charset;
import kotlin.Metadata;
import kotlin.TypeCastException;
import kotlin.collections.ByteIterator;
import kotlin.internal.InlineOnly;
import kotlin.io.ByteStreamsKt;
import kotlin.jvm.JvmName;
import kotlin.jvm.internal.Intrinsics;
import kotlin.text.Charsets;
import org.jetbrains.annotations.NotNull;

@Metadata(bv={1, 0, 2}, d1={"\u0000Z\n\u0000\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\b\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\u0010\u000e\n\u0000\n\u0002\u0010\t\n\u0002\b\u0002\n\u0002\u0010\u0012\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\u001a\u0017\u0010\u0000\u001a\u00020\u0001*\u00020\u00022\b\b\u0002\u0010\u0003\u001a\u00020\u0004H\u0087\b\u001a\u0017\u0010\u0000\u001a\u00020\u0005*\u00020\u00062\b\b\u0002\u0010\u0003\u001a\u00020\u0004H\u0087\b\u001a\u0017\u0010\u0007\u001a\u00020\b*\u00020\u00022\b\b\u0002\u0010\t\u001a\u00020\nH\u0087\b\u001a\u0017\u0010\u000b\u001a\u00020\f*\u00020\u00062\b\b\u0002\u0010\t\u001a\u00020\nH\u0087\b\u001a\u0017\u0010\r\u001a\u00020\u000e*\u00020\u000f2\b\b\u0002\u0010\t\u001a\u00020\nH\u0087\b\u001a\u001c\u0010\u0010\u001a\u00020\u0011*\u00020\u00022\u0006\u0010\u0012\u001a\u00020\u00062\b\b\u0002\u0010\u0003\u001a\u00020\u0004\u001a\r\u0010\u0013\u001a\u00020\u000e*\u00020\u0014H\u0087\b\u001a\u001d\u0010\u0013\u001a\u00020\u000e*\u00020\u00142\u0006\u0010\u0015\u001a\u00020\u00042\u0006\u0010\u0016\u001a\u00020\u0004H\u0087\b\u001a\r\u0010\u0017\u001a\u00020\u0018*\u00020\u0001H\u0086\u0002\u001a\u0014\u0010\u0019\u001a\u00020\u0014*\u00020\u00022\b\b\u0002\u0010\u001a\u001a\u00020\u0004\u001a\u0017\u0010\u001b\u001a\u00020\u001c*\u00020\u00022\b\b\u0002\u0010\t\u001a\u00020\nH\u0087\b\u001a\u0017\u0010\u001d\u001a\u00020\u001e*\u00020\u00062\b\b\u0002\u0010\t\u001a\u00020\nH\u0087\b\u00a8\u0006\u001f"}, d2={"buffered", "Ljava/io/BufferedInputStream;", "Ljava/io/InputStream;", "bufferSize", "", "Ljava/io/BufferedOutputStream;", "Ljava/io/OutputStream;", "bufferedReader", "Ljava/io/BufferedReader;", "charset", "Ljava/nio/charset/Charset;", "bufferedWriter", "Ljava/io/BufferedWriter;", "byteInputStream", "Ljava/io/ByteArrayInputStream;", "", "copyTo", "", "out", "inputStream", "", "offset", "length", "iterator", "Lkotlin/collections/ByteIterator;", "readBytes", "estimatedSize", "reader", "Ljava/io/InputStreamReader;", "writer", "Ljava/io/OutputStreamWriter;", "kotlin-stdlib"}, k=2, mv={1, 1, 10})
@JvmName(name="ByteStreamsKt")
public final class ByteStreamsKt {
    @InlineOnly
    private static final BufferedInputStream buffered(@NotNull InputStream inputStream, int n) {
        if (inputStream instanceof BufferedInputStream) {
            return (BufferedInputStream)inputStream;
        }
        return new BufferedInputStream(inputStream, n);
    }

    @InlineOnly
    private static final BufferedOutputStream buffered(@NotNull OutputStream outputStream, int n) {
        if (outputStream instanceof BufferedOutputStream) {
            return (BufferedOutputStream)outputStream;
        }
        return new BufferedOutputStream(outputStream, n);
    }

    @InlineOnly
    static /* bridge */ /* synthetic */ BufferedInputStream buffered$default(InputStream inputStream, int n, int n2, Object object) {
        if ((n2 & 1) != 0) {
            n = 8192;
        }
        if (inputStream instanceof BufferedInputStream) {
            return (BufferedInputStream)inputStream;
        }
        return new BufferedInputStream(inputStream, n);
    }

    @InlineOnly
    static /* bridge */ /* synthetic */ BufferedOutputStream buffered$default(OutputStream outputStream, int n, int n2, Object object) {
        if ((n2 & 1) != 0) {
            n = 8192;
        }
        if (outputStream instanceof BufferedOutputStream) {
            return (BufferedOutputStream)outputStream;
        }
        return new BufferedOutputStream(outputStream, n);
    }

    @InlineOnly
    private static final BufferedReader bufferedReader(@NotNull InputStream closeable, Charset charset) {
        if ((closeable = (Reader)new InputStreamReader((InputStream)closeable, charset)) instanceof BufferedReader) {
            return (BufferedReader)closeable;
        }
        return new BufferedReader((Reader)closeable, 8192);
    }

    @InlineOnly
    static /* bridge */ /* synthetic */ BufferedReader bufferedReader$default(InputStream closeable, Charset charset, int n, Object object) {
        if ((n & 1) != 0) {
            charset = Charsets.UTF_8;
        }
        if ((closeable = (Reader)new InputStreamReader((InputStream)closeable, charset)) instanceof BufferedReader) {
            return (BufferedReader)closeable;
        }
        return new BufferedReader((Reader)closeable, 8192);
    }

    @InlineOnly
    private static final BufferedWriter bufferedWriter(@NotNull OutputStream closeable, Charset charset) {
        if ((closeable = (Writer)new OutputStreamWriter((OutputStream)closeable, charset)) instanceof BufferedWriter) {
            return (BufferedWriter)closeable;
        }
        return new BufferedWriter((Writer)closeable, 8192);
    }

    @InlineOnly
    static /* bridge */ /* synthetic */ BufferedWriter bufferedWriter$default(OutputStream closeable, Charset charset, int n, Object object) {
        if ((n & 1) != 0) {
            charset = Charsets.UTF_8;
        }
        if ((closeable = (Writer)new OutputStreamWriter((OutputStream)closeable, charset)) instanceof BufferedWriter) {
            return (BufferedWriter)closeable;
        }
        return new BufferedWriter((Writer)closeable, 8192);
    }

    @InlineOnly
    private static final ByteArrayInputStream byteInputStream(@NotNull String arrby, Charset charset) {
        if (arrby == null) {
            throw new TypeCastException("null cannot be cast to non-null type java.lang.String");
        }
        arrby = arrby.getBytes(charset);
        Intrinsics.checkExpressionValueIsNotNull((Object)arrby, (String)"(this as java.lang.String).getBytes(charset)");
        return new ByteArrayInputStream(arrby);
    }

    @InlineOnly
    static /* bridge */ /* synthetic */ ByteArrayInputStream byteInputStream$default(String arrby, Charset charset, int n, Object object) {
        if ((n & 1) != 0) {
            charset = Charsets.UTF_8;
        }
        if (arrby == null) {
            throw new TypeCastException("null cannot be cast to non-null type java.lang.String");
        }
        arrby = arrby.getBytes(charset);
        Intrinsics.checkExpressionValueIsNotNull((Object)arrby, (String)"(this as java.lang.String).getBytes(charset)");
        return new ByteArrayInputStream(arrby);
    }

    public static final long copyTo(@NotNull InputStream inputStream, @NotNull OutputStream outputStream, int n) {
        Intrinsics.checkParameterIsNotNull((Object)inputStream, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull((Object)outputStream, (String)"out");
        byte[] arrby = new byte[n];
        n = inputStream.read(arrby);
        long l = 0L;
        while (n >= 0) {
            outputStream.write(arrby, 0, n);
            long l2 = n;
            n = inputStream.read(arrby);
            l += l2;
        }
        return l;
    }

    public static /* bridge */ /* synthetic */ long copyTo$default(InputStream inputStream, OutputStream outputStream, int n, int n2, Object object) {
        if ((n2 & 2) != 0) {
            n = 8192;
        }
        return ByteStreamsKt.copyTo(inputStream, outputStream, n);
    }

    @InlineOnly
    private static final ByteArrayInputStream inputStream(@NotNull byte[] arrby) {
        return new ByteArrayInputStream(arrby);
    }

    @InlineOnly
    private static final ByteArrayInputStream inputStream(@NotNull byte[] arrby, int n, int n2) {
        return new ByteArrayInputStream(arrby, n, n2);
    }

    @NotNull
    public static final ByteIterator iterator(@NotNull BufferedInputStream bufferedInputStream) {
        Intrinsics.checkParameterIsNotNull((Object)bufferedInputStream, (String)"$receiver");
        return new ByteIterator(bufferedInputStream){
            private boolean finished;
            private int nextByte;
            private boolean nextPrepared;
            final /* synthetic */ BufferedInputStream receiver$0;
            {
                this.receiver$0 = bufferedInputStream;
                this.nextByte = -1;
            }

            private final void prepareNext() {
                if (!this.nextPrepared && !this.finished) {
                    this.nextByte = this.receiver$0.read();
                    boolean bl = true;
                    this.nextPrepared = true;
                    if (this.nextByte != -1) {
                        bl = false;
                    }
                    this.finished = bl;
                }
            }

            public final boolean getFinished() {
                return this.finished;
            }

            public final int getNextByte() {
                return this.nextByte;
            }

            public final boolean getNextPrepared() {
                return this.nextPrepared;
            }

            public boolean hasNext() {
                this.prepareNext();
                return this.finished ^ true;
            }

            public byte nextByte() {
                this.prepareNext();
                if (this.finished) {
                    throw (java.lang.Throwable)new java.util.NoSuchElementException("Input stream is over.");
                }
                byte by = (byte)this.nextByte;
                this.nextPrepared = false;
                return by;
            }

            public final void setFinished(boolean bl) {
                this.finished = bl;
            }

            public final void setNextByte(int n) {
                this.nextByte = n;
            }

            public final void setNextPrepared(boolean bl) {
                this.nextPrepared = bl;
            }
        };
    }

    @NotNull
    public static final byte[] readBytes(@NotNull InputStream arrby, int n) {
        Intrinsics.checkParameterIsNotNull((Object)arrby, (String)"$receiver");
        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(Math.max(n, arrby.available()));
        ByteStreamsKt.copyTo$default((InputStream)arrby, byteArrayOutputStream, 0, 2, null);
        arrby = byteArrayOutputStream.toByteArray();
        Intrinsics.checkExpressionValueIsNotNull((Object)arrby, (String)"buffer.toByteArray()");
        return arrby;
    }

    @NotNull
    public static /* bridge */ /* synthetic */ byte[] readBytes$default(InputStream inputStream, int n, int n2, Object object) {
        if ((n2 & 1) != 0) {
            n = 8192;
        }
        return ByteStreamsKt.readBytes(inputStream, n);
    }

    @InlineOnly
    private static final InputStreamReader reader(@NotNull InputStream inputStream, Charset charset) {
        return new InputStreamReader(inputStream, charset);
    }

    @InlineOnly
    static /* bridge */ /* synthetic */ InputStreamReader reader$default(InputStream inputStream, Charset charset, int n, Object object) {
        if ((n & 1) != 0) {
            charset = Charsets.UTF_8;
        }
        return new InputStreamReader(inputStream, charset);
    }

    @InlineOnly
    private static final OutputStreamWriter writer(@NotNull OutputStream outputStream, Charset charset) {
        return new OutputStreamWriter(outputStream, charset);
    }

    @InlineOnly
    static /* bridge */ /* synthetic */ OutputStreamWriter writer$default(OutputStream outputStream, Charset charset, int n, Object object) {
        if ((n & 1) != 0) {
            charset = Charsets.UTF_8;
        }
        return new OutputStreamWriter(outputStream, charset);
    }
}

