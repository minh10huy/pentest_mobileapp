/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  kotlin.Metadata
 *  kotlin.Unit
 *  kotlin.internal.InlineOnly
 *  kotlin.io.FilesKt__FileReadWriteKt$readLines
 *  kotlin.jvm.functions.Function1
 *  kotlin.jvm.functions.Function2
 *  kotlin.jvm.internal.Intrinsics
 *  org.jetbrains.annotations.NotNull
 */
package kotlin.io;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.Closeable;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.Serializable;
import java.io.Writer;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import kotlin.Metadata;
import kotlin.Unit;
import kotlin.internal.InlineOnly;
import kotlin.internal.PlatformImplementationsKt;
import kotlin.io.CloseableKt;
import kotlin.io.FilesKt;
import kotlin.io.FilesKt__FilePathComponentsKt;
import kotlin.io.FilesKt__FileReadWriteKt;
import kotlin.io.TextStreamsKt;
import kotlin.jvm.functions.Function1;
import kotlin.jvm.functions.Function2;
import kotlin.jvm.internal.InlineMarker;
import kotlin.jvm.internal.Intrinsics;
import kotlin.ranges.RangesKt;
import kotlin.sequences.Sequence;
import kotlin.text.Charsets;
import org.jetbrains.annotations.NotNull;

@Metadata(bv={1, 0, 2}, d1={"\u0000z\n\u0000\n\u0002\u0010\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\u0012\n\u0002\b\u0002\n\u0002\u0010\u000e\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\b\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0010 \n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0018\u0002\n\u0000\u001a\u0012\u0010\u0000\u001a\u00020\u0001*\u00020\u00022\u0006\u0010\u0003\u001a\u00020\u0004\u001a\u001c\u0010\u0005\u001a\u00020\u0001*\u00020\u00022\u0006\u0010\u0006\u001a\u00020\u00072\b\b\u0002\u0010\b\u001a\u00020\t\u001a!\u0010\n\u001a\u00020\u000b*\u00020\u00022\b\b\u0002\u0010\b\u001a\u00020\t2\b\b\u0002\u0010\f\u001a\u00020\rH\u0087\b\u001a!\u0010\u000e\u001a\u00020\u000f*\u00020\u00022\b\b\u0002\u0010\b\u001a\u00020\t2\b\b\u0002\u0010\f\u001a\u00020\rH\u0087\b\u001aB\u0010\u0010\u001a\u00020\u0001*\u00020\u000226\u0010\u0011\u001a2\u0012\u0013\u0012\u00110\u0004\u00a2\u0006\f\b\u0013\u0012\b\b\u0014\u0012\u0004\b\b(\u0015\u0012\u0013\u0012\u00110\r\u00a2\u0006\f\b\u0013\u0012\b\b\u0014\u0012\u0004\b\b(\u0016\u0012\u0004\u0012\u00020\u00010\u0012\u001aJ\u0010\u0010\u001a\u00020\u0001*\u00020\u00022\u0006\u0010\u0017\u001a\u00020\r26\u0010\u0011\u001a2\u0012\u0013\u0012\u00110\u0004\u00a2\u0006\f\b\u0013\u0012\b\b\u0014\u0012\u0004\b\b(\u0015\u0012\u0013\u0012\u00110\r\u00a2\u0006\f\b\u0013\u0012\b\b\u0014\u0012\u0004\b\b(\u0016\u0012\u0004\u0012\u00020\u00010\u0012\u001a7\u0010\u0018\u001a\u00020\u0001*\u00020\u00022\b\b\u0002\u0010\b\u001a\u00020\t2!\u0010\u0011\u001a\u001d\u0012\u0013\u0012\u00110\u0007\u00a2\u0006\f\b\u0013\u0012\b\b\u0014\u0012\u0004\b\b(\u001a\u0012\u0004\u0012\u00020\u00010\u0019\u001a\r\u0010\u001b\u001a\u00020\u001c*\u00020\u0002H\u0087\b\u001a\r\u0010\u001d\u001a\u00020\u001e*\u00020\u0002H\u0087\b\u001a\u0017\u0010\u001f\u001a\u00020 *\u00020\u00022\b\b\u0002\u0010\b\u001a\u00020\tH\u0087\b\u001a\n\u0010!\u001a\u00020\u0004*\u00020\u0002\u001a\u001a\u0010\"\u001a\b\u0012\u0004\u0012\u00020\u00070#*\u00020\u00022\b\b\u0002\u0010\b\u001a\u00020\t\u001a\u0014\u0010$\u001a\u00020\u0007*\u00020\u00022\b\b\u0002\u0010\b\u001a\u00020\t\u001a\u0017\u0010%\u001a\u00020&*\u00020\u00022\b\b\u0002\u0010\b\u001a\u00020\tH\u0087\b\u001a?\u0010'\u001a\u0002H(\"\u0004\b\u0000\u0010(*\u00020\u00022\b\b\u0002\u0010\b\u001a\u00020\t2\u0018\u0010)\u001a\u0014\u0012\n\u0012\b\u0012\u0004\u0012\u00020\u00070*\u0012\u0004\u0012\u0002H(0\u0019H\u0086\b\u00f8\u0001\u0000\u00a2\u0006\u0002\u0010,\u001a\u0012\u0010-\u001a\u00020\u0001*\u00020\u00022\u0006\u0010\u0003\u001a\u00020\u0004\u001a\u001c\u0010.\u001a\u00020\u0001*\u00020\u00022\u0006\u0010\u0006\u001a\u00020\u00072\b\b\u0002\u0010\b\u001a\u00020\t\u001a\u0017\u0010/\u001a\u000200*\u00020\u00022\b\b\u0002\u0010\b\u001a\u00020\tH\u0087\b\u0082\u0002\b\n\u0006\b\u0011(+0\u0001\u00a8\u00061"}, d2={"appendBytes", "", "Ljava/io/File;", "array", "", "appendText", "text", "", "charset", "Ljava/nio/charset/Charset;", "bufferedReader", "Ljava/io/BufferedReader;", "bufferSize", "", "bufferedWriter", "Ljava/io/BufferedWriter;", "forEachBlock", "action", "Lkotlin/Function2;", "Lkotlin/ParameterName;", "name", "buffer", "bytesRead", "blockSize", "forEachLine", "Lkotlin/Function1;", "line", "inputStream", "Ljava/io/FileInputStream;", "outputStream", "Ljava/io/FileOutputStream;", "printWriter", "Ljava/io/PrintWriter;", "readBytes", "readLines", "", "readText", "reader", "Ljava/io/InputStreamReader;", "useLines", "T", "block", "Lkotlin/sequences/Sequence;", "Requires newer compiler version to be inlined correctly.", "(Ljava/io/File;Ljava/nio/charset/Charset;Lkotlin/jvm/functions/Function1;)Ljava/lang/Object;", "writeBytes", "writeText", "writer", "Ljava/io/OutputStreamWriter;", "kotlin-stdlib"}, k=5, mv={1, 1, 10}, xi=1, xs="kotlin/io/FilesKt")
class FilesKt__FileReadWriteKt
extends FilesKt__FilePathComponentsKt {
    /*
     * WARNING - Removed back jump from a try to a catch block - possible behaviour change.
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    public static final void appendBytes(@NotNull File serializable, @NotNull byte[] unit) {
        Throwable throwable3222;
        Intrinsics.checkParameterIsNotNull((Object)serializable, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull((Object)unit, (String)"array");
        Closeable closeable = new FileOutputStream((File)serializable, true);
        Throwable throwable2 = null;
        serializable = throwable2;
        ((FileOutputStream)closeable).write((byte[])unit);
        serializable = throwable2;
        unit = Unit.INSTANCE;
        CloseableKt.closeFinally(closeable, throwable2);
        return;
        {
            catch (Throwable throwable3222) {
            }
            catch (Throwable throwable4) {}
            serializable = throwable4;
            {
                throw throwable4;
            }
        }
        CloseableKt.closeFinally(closeable, (Throwable)serializable);
        throw throwable3222;
    }

    public static final void appendText(@NotNull File file, @NotNull String arrby, @NotNull Charset charset) {
        Intrinsics.checkParameterIsNotNull((Object)file, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull((Object)arrby, (String)"text");
        Intrinsics.checkParameterIsNotNull((Object)charset, (String)"charset");
        arrby = arrby.getBytes(charset);
        Intrinsics.checkExpressionValueIsNotNull((Object)arrby, (String)"(this as java.lang.String).getBytes(charset)");
        FilesKt.appendBytes(file, arrby);
    }

    public static /* bridge */ /* synthetic */ void appendText$default(File file, String string2, Charset charset, int n, Object object) {
        if ((n & 2) != 0) {
            charset = Charsets.UTF_8;
        }
        FilesKt.appendText(file, string2, charset);
    }

    @InlineOnly
    private static final BufferedReader bufferedReader(@NotNull File object, Charset charset, int n) {
        if ((object = (Reader)new InputStreamReader((InputStream)new FileInputStream((File)object), charset)) instanceof BufferedReader) {
            return (BufferedReader)object;
        }
        return new BufferedReader((Reader)object, n);
    }

    @InlineOnly
    static /* bridge */ /* synthetic */ BufferedReader bufferedReader$default(File object, Charset charset, int n, int n2, Object object2) {
        if ((n2 & 1) != 0) {
            charset = Charsets.UTF_8;
        }
        if ((n2 & 2) != 0) {
            n = 8192;
        }
        if ((object = (Reader)new InputStreamReader((InputStream)new FileInputStream((File)object), charset)) instanceof BufferedReader) {
            return (BufferedReader)object;
        }
        return new BufferedReader((Reader)object, n);
    }

    @InlineOnly
    private static final BufferedWriter bufferedWriter(@NotNull File object, Charset charset, int n) {
        if ((object = (Writer)new OutputStreamWriter((OutputStream)new FileOutputStream((File)object), charset)) instanceof BufferedWriter) {
            return (BufferedWriter)object;
        }
        return new BufferedWriter((Writer)object, n);
    }

    @InlineOnly
    static /* bridge */ /* synthetic */ BufferedWriter bufferedWriter$default(File object, Charset charset, int n, int n2, Object object2) {
        if ((n2 & 1) != 0) {
            charset = Charsets.UTF_8;
        }
        if ((n2 & 2) != 0) {
            n = 8192;
        }
        if ((object = (Writer)new OutputStreamWriter((OutputStream)new FileOutputStream((File)object), charset)) instanceof BufferedWriter) {
            return (BufferedWriter)object;
        }
        return new BufferedWriter((Writer)object, n);
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public static final void forEachBlock(@NotNull File serializable, int n, @NotNull Function2<? super byte[], ? super Integer, Unit> unit) {
        Throwable throwable;
        Closeable closeable;
        block7 : {
            Intrinsics.checkParameterIsNotNull((Object)serializable, (String)"$receiver");
            Intrinsics.checkParameterIsNotNull((Object)unit, (String)"action");
            byte[] arrby = new byte[RangesKt.coerceAtLeast(n, 512)];
            closeable = new FileInputStream((File)serializable);
            throwable = null;
            serializable = throwable;
            try {
                FileInputStream fileInputStream = (FileInputStream)closeable;
                do {
                    serializable = throwable;
                    n = fileInputStream.read(arrby);
                    if (n <= 0) {
                        serializable = throwable;
                        unit = Unit.INSTANCE;
                        break block7;
                    }
                    serializable = throwable;
                    unit.invoke((Object)arrby, (Object)n);
                    continue;
                    break;
                } while (true);
            }
            catch (Throwable throwable2) {
            }
            catch (Throwable throwable3) {
                serializable = throwable3;
                throw throwable3;
            }
            CloseableKt.closeFinally(closeable, (Throwable)serializable);
            throw throwable2;
        }
        CloseableKt.closeFinally(closeable, throwable);
    }

    public static final void forEachBlock(@NotNull File file, @NotNull Function2<? super byte[], ? super Integer, Unit> function2) {
        Intrinsics.checkParameterIsNotNull((Object)file, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull(function2, (String)"action");
        FilesKt.forEachBlock(file, 4096, function2);
    }

    public static final void forEachLine(@NotNull File file, @NotNull Charset charset, @NotNull Function1<? super String, Unit> function1) {
        Intrinsics.checkParameterIsNotNull((Object)file, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull((Object)charset, (String)"charset");
        Intrinsics.checkParameterIsNotNull(function1, (String)"action");
        TextStreamsKt.forEachLine(new BufferedReader(new InputStreamReader((InputStream)new FileInputStream(file), charset)), function1);
    }

    public static /* bridge */ /* synthetic */ void forEachLine$default(File file, Charset charset, Function1 function1, int n, Object object) {
        if ((n & 1) != 0) {
            charset = Charsets.UTF_8;
        }
        FilesKt.forEachLine(file, charset, (Function1<? super String, Unit>)function1);
    }

    @InlineOnly
    private static final FileInputStream inputStream(@NotNull File file) {
        return new FileInputStream(file);
    }

    @InlineOnly
    private static final FileOutputStream outputStream(@NotNull File file) {
        return new FileOutputStream(file);
    }

    @InlineOnly
    private static final PrintWriter printWriter(@NotNull File object, Charset charset) {
        object = (object = (Writer)new OutputStreamWriter((OutputStream)new FileOutputStream((File)object), charset)) instanceof BufferedWriter ? (BufferedWriter)object : new BufferedWriter((Writer)object, 8192);
        return new PrintWriter((Writer)object);
    }

    @InlineOnly
    static /* bridge */ /* synthetic */ PrintWriter printWriter$default(File object, Charset charset, int n, Object object2) {
        if ((n & 1) != 0) {
            charset = Charsets.UTF_8;
        }
        object = (object = (Writer)new OutputStreamWriter((OutputStream)new FileOutputStream((File)object), charset)) instanceof BufferedWriter ? (BufferedWriter)object : new BufferedWriter((Writer)object, 8192);
        return new PrintWriter((Writer)object);
    }

    /*
     * WARNING - Removed back jump from a try to a catch block - possible behaviour change.
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    @NotNull
    public static final byte[] readBytes(@NotNull File arrby) {
        Throwable throwable;
        Closeable closeable;
        Throwable throwable3;
        Throwable throwable22222;
        block6 : {
            int n2;
            int n;
            Intrinsics.checkParameterIsNotNull((Object)arrby, (String)"$receiver");
            closeable = new FileInputStream((File)arrby);
            throwable3 = throwable = (Throwable)null;
            Object object = (FileInputStream)closeable;
            int n3 = 0;
            throwable3 = throwable;
            long l = arrby.length();
            if (l > (long)Integer.MAX_VALUE) {
                throwable3 = throwable;
                object = new StringBuilder();
                throwable3 = throwable;
                object.append("File ");
                throwable3 = throwable;
                object.append(arrby);
                throwable3 = throwable;
                object.append(" is too big (");
                throwable3 = throwable;
                object.append(l);
                throwable3 = throwable;
                object.append(" bytes) to fit in memory.");
                throwable3 = throwable;
                throw (Throwable)new OutOfMemoryError(object.toString());
            }
            throwable3 = throwable;
            arrby = new byte[n2];
            for (n2 = (int)l; n2 > 0; n2 -= n, n3 += n) {
                throwable3 = throwable;
                n = object.read(arrby, n3, n2);
                if (n < 0) break;
            }
            if (n2 == 0) break block6;
            throwable3 = throwable;
            arrby = Arrays.copyOf(arrby, n3);
            throwable3 = throwable;
            Intrinsics.checkExpressionValueIsNotNull((Object)arrby, (String)"java.util.Arrays.copyOf(this, newSize)");
        }
        CloseableKt.closeFinally(closeable, throwable);
        return arrby;
        {
            catch (Throwable throwable22222) {
            }
            catch (Throwable throwable4) {}
            throwable3 = throwable4;
            {
                throw throwable4;
            }
        }
        CloseableKt.closeFinally(closeable, throwable3);
        throw throwable22222;
    }

    @NotNull
    public static final List<String> readLines(@NotNull File file, @NotNull Charset charset) {
        Intrinsics.checkParameterIsNotNull((Object)file, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull((Object)charset, (String)"charset");
        ArrayList arrayList = new ArrayList();
        FilesKt.forEachLine(file, charset, (Function1<? super String, Unit>)((Function1)new Function1<String, Unit>(arrayList){
            final /* synthetic */ ArrayList $result;
            {
                this.$result = arrayList;
                super(1);
            }

            public final void invoke(@NotNull String string2) {
                Intrinsics.checkParameterIsNotNull((Object)string2, (String)"it");
                this.$result.add(string2);
            }
        }));
        return arrayList;
    }

    @NotNull
    public static /* bridge */ /* synthetic */ List readLines$default(File file, Charset charset, int n, Object object) {
        if ((n & 1) != 0) {
            charset = Charsets.UTF_8;
        }
        return FilesKt.readLines(file, charset);
    }

    @NotNull
    public static final String readText(@NotNull File file, @NotNull Charset charset) {
        Intrinsics.checkParameterIsNotNull((Object)file, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull((Object)charset, (String)"charset");
        return new String(FilesKt.readBytes(file), charset);
    }

    @NotNull
    public static /* bridge */ /* synthetic */ String readText$default(File file, Charset charset, int n, Object object) {
        if ((n & 1) != 0) {
            charset = Charsets.UTF_8;
        }
        return FilesKt.readText(file, charset);
    }

    @InlineOnly
    private static final InputStreamReader reader(@NotNull File file, Charset charset) {
        return new InputStreamReader((InputStream)new FileInputStream(file), charset);
    }

    @InlineOnly
    static /* bridge */ /* synthetic */ InputStreamReader reader$default(File file, Charset charset, int n, Object object) {
        if ((n & 1) != 0) {
            charset = Charsets.UTF_8;
        }
        return new InputStreamReader((InputStream)new FileInputStream(file), charset);
    }

    /*
     * WARNING - Removed back jump from a try to a catch block - possible behaviour change.
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    public static final <T> T useLines(@NotNull File object, @NotNull Charset object2, @NotNull Function1<? super Sequence<String>, ? extends T> object3) {
        Throwable throwable2222;
        Intrinsics.checkParameterIsNotNull((Object)object, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull((Object)object2, (String)"charset");
        Intrinsics.checkParameterIsNotNull((Object)object3, (String)"block");
        object = new InputStreamReader((InputStream)new FileInputStream((File)object), (Charset)object2);
        object = object instanceof BufferedReader ? (BufferedReader)object : new BufferedReader((Reader)object, 8192);
        Closeable closeable = (Closeable)object;
        object = object2 = (Throwable)null;
        object3 = object3.invoke(TextStreamsKt.lineSequence((BufferedReader)closeable));
        InlineMarker.finallyStart(1);
        if (PlatformImplementationsKt.apiVersionIsAtLeast(1, 1, 0)) {
            CloseableKt.closeFinally(closeable, (Throwable)object2);
        } else {
            closeable.close();
        }
        InlineMarker.finallyEnd(1);
        return (T)object3;
        {
            catch (Throwable throwable2222) {
            }
            catch (Throwable throwable3) {}
            object = throwable3;
            {
                throw throwable3;
            }
        }
        InlineMarker.finallyStart(1);
        if (PlatformImplementationsKt.apiVersionIsAtLeast(1, 1, 0)) {
            CloseableKt.closeFinally(closeable, (Throwable)object);
        } else if (object == null) {
            closeable.close();
        } else {
            try {
                closeable.close();
            }
            catch (Throwable throwable4) {}
        }
        InlineMarker.finallyEnd(1);
        throw throwable2222;
    }

    /*
     * WARNING - Removed back jump from a try to a catch block - possible behaviour change.
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    public static /* bridge */ /* synthetic */ Object useLines$default(File object, Charset object2, Function1 object3, int n, Object object4) {
        Throwable throwable2222;
        if ((n & 1) != 0) {
            object2 = Charsets.UTF_8;
        }
        Intrinsics.checkParameterIsNotNull((Object)object, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull((Object)object2, (String)"charset");
        Intrinsics.checkParameterIsNotNull((Object)object3, (String)"block");
        object = new InputStreamReader((InputStream)new FileInputStream((File)object), (Charset)object2);
        object = object instanceof BufferedReader ? (BufferedReader)object : new BufferedReader((Reader)object, 8192);
        object4 = (Closeable)object;
        object = object2 = (Throwable)null;
        object3 = object3.invoke(TextStreamsKt.lineSequence((BufferedReader)object4));
        InlineMarker.finallyStart(1);
        if (PlatformImplementationsKt.apiVersionIsAtLeast(1, 1, 0)) {
            CloseableKt.closeFinally((Closeable)object4, (Throwable)object2);
        } else {
            object4.close();
        }
        InlineMarker.finallyEnd(1);
        return object3;
        {
            catch (Throwable throwable2222) {
            }
            catch (Throwable throwable3) {}
            object = throwable3;
            {
                throw throwable3;
            }
        }
        InlineMarker.finallyStart(1);
        if (PlatformImplementationsKt.apiVersionIsAtLeast(1, 1, 0)) {
            CloseableKt.closeFinally((Closeable)object4, (Throwable)object);
        } else if (object == null) {
            object4.close();
        } else {
            try {
                object4.close();
            }
            catch (Throwable throwable4) {}
        }
        InlineMarker.finallyEnd(1);
        throw throwable2222;
    }

    /*
     * WARNING - Removed back jump from a try to a catch block - possible behaviour change.
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    public static final void writeBytes(@NotNull File serializable, @NotNull byte[] unit) {
        Throwable throwable3222;
        Intrinsics.checkParameterIsNotNull((Object)serializable, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull((Object)unit, (String)"array");
        Closeable closeable = new FileOutputStream((File)serializable);
        Throwable throwable2 = null;
        serializable = throwable2;
        ((FileOutputStream)closeable).write((byte[])unit);
        serializable = throwable2;
        unit = Unit.INSTANCE;
        CloseableKt.closeFinally(closeable, throwable2);
        return;
        {
            catch (Throwable throwable3222) {
            }
            catch (Throwable throwable4) {}
            serializable = throwable4;
            {
                throw throwable4;
            }
        }
        CloseableKt.closeFinally(closeable, (Throwable)serializable);
        throw throwable3222;
    }

    public static final void writeText(@NotNull File file, @NotNull String arrby, @NotNull Charset charset) {
        Intrinsics.checkParameterIsNotNull((Object)file, (String)"$receiver");
        Intrinsics.checkParameterIsNotNull((Object)arrby, (String)"text");
        Intrinsics.checkParameterIsNotNull((Object)charset, (String)"charset");
        arrby = arrby.getBytes(charset);
        Intrinsics.checkExpressionValueIsNotNull((Object)arrby, (String)"(this as java.lang.String).getBytes(charset)");
        FilesKt.writeBytes(file, arrby);
    }

    public static /* bridge */ /* synthetic */ void writeText$default(File file, String string2, Charset charset, int n, Object object) {
        if ((n & 2) != 0) {
            charset = Charsets.UTF_8;
        }
        FilesKt.writeText(file, string2, charset);
    }

    @InlineOnly
    private static final OutputStreamWriter writer(@NotNull File file, Charset charset) {
        return new OutputStreamWriter((OutputStream)new FileOutputStream(file), charset);
    }

    @InlineOnly
    static /* bridge */ /* synthetic */ OutputStreamWriter writer$default(File file, Charset charset, int n, Object object) {
        if ((n & 1) != 0) {
            charset = Charsets.UTF_8;
        }
        return new OutputStreamWriter((OutputStream)new FileOutputStream(file), charset);
    }
}

