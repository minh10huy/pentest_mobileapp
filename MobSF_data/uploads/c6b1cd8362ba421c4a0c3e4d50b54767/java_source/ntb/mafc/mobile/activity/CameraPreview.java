/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.content.Context
 *  android.hardware.Camera
 *  android.hardware.Camera$Parameters
 *  android.hardware.Camera$Size
 *  android.util.Log
 *  android.view.Surface
 *  android.view.SurfaceHolder
 *  android.view.SurfaceHolder$Callback
 *  android.view.SurfaceView
 *  android.view.View
 *  kotlin.Metadata
 *  kotlin.jvm.internal.Intrinsics
 *  org.jetbrains.annotations.NotNull
 *  org.jetbrains.annotations.Nullable
 */
package ntb.mafc.mobile.activity;

import android.content.Context;
import android.hardware.Camera;
import android.util.Log;
import android.view.Surface;
import android.view.SurfaceHolder;
import android.view.SurfaceView;
import android.view.View;
import java.io.IOException;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import kotlin.Metadata;
import kotlin.jvm.internal.Intrinsics;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

@Metadata(bv={1, 0, 2}, d1={"\u0000@\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010 \n\u0002\b\u0003\n\u0002\u0010\b\n\u0002\b\u0002\n\u0002\u0010\u0002\n\u0002\b\b\u0018\u00002\u00020\u00012\u00020\u0002B\u0017\u0012\u0006\u0010\u0003\u001a\u00020\u0004\u0012\b\u0010\u0005\u001a\u0004\u0018\u00010\u0006\u00a2\u0006\u0002\u0010\u0007J2\u0010\u000f\u001a\b\u0018\u00010\fR\u00020\u00062\u0012\u0010\u0010\u001a\u000e\u0012\b\u0012\u00060\fR\u00020\u0006\u0018\u00010\u000e2\u0006\u0010\u0011\u001a\u00020\u00122\u0006\u0010\u0013\u001a\u00020\u0012H\u0002J\u0018\u0010\u0014\u001a\u00020\u00152\u0006\u0010\u0016\u001a\u00020\u00122\u0006\u0010\u0017\u001a\u00020\u0012H\u0014J(\u0010\u0018\u001a\u00020\u00152\u0006\u0010\u0019\u001a\u00020\n2\u0006\u0010\u001a\u001a\u00020\u00122\u0006\u0010\u0011\u001a\u00020\u00122\u0006\u0010\u0013\u001a\u00020\u0012H\u0016J\u0010\u0010\u001b\u001a\u00020\u00152\u0006\u0010\u0019\u001a\u00020\nH\u0016J\u0010\u0010\u001c\u001a\u00020\u00152\u0006\u0010\u0019\u001a\u00020\nH\u0016R\u0010\u0010\b\u001a\u0004\u0018\u00010\u0006X\u0082\u000e\u00a2\u0006\u0002\n\u0000R\u000e\u0010\t\u001a\u00020\nX\u0082\u000e\u00a2\u0006\u0002\n\u0000R\u0012\u0010\u000b\u001a\u00060\fR\u00020\u0006X\u0082.\u00a2\u0006\u0002\n\u0000R\u0018\u0010\r\u001a\f\u0012\b\u0012\u00060\fR\u00020\u00060\u000eX\u0082\u000e\u00a2\u0006\u0002\n\u0000\u00a8\u0006\u001d"}, d2={"Lntb/mafc/mobile/activity/CameraPreview;", "Landroid/view/SurfaceView;", "Landroid/view/SurfaceHolder$Callback;", "context", "Landroid/content/Context;", "camera", "Landroid/hardware/Camera;", "(Landroid/content/Context;Landroid/hardware/Camera;)V", "mCamera", "mHolder", "Landroid/view/SurfaceHolder;", "mPreviewSize", "Landroid/hardware/Camera$Size;", "mSupportedPreviewSizes", "", "getOptimalPreviewSize", "sizes", "w", "", "h", "onMeasure", "", "widthMeasureSpec", "heightMeasureSpec", "surfaceChanged", "holder", "format", "surfaceCreated", "surfaceDestroyed", "app_release"}, k=1, mv={1, 1, 11})
public final class CameraPreview
extends SurfaceView
implements SurfaceHolder.Callback {
    private HashMap _$_findViewCache;
    private Camera mCamera;
    private SurfaceHolder mHolder;
    private Camera.Size mPreviewSize;
    private List<? extends Camera.Size> mSupportedPreviewSizes;

    public CameraPreview(@NotNull Context object, @Nullable Camera camera) {
        Intrinsics.checkParameterIsNotNull((Object)object, (String)"context");
        super(object);
        this.mCamera = camera;
        object = this.mCamera;
        object = object != null && (object = object.getParameters()) != null ? object.getSupportedPreviewSizes() : null;
        if (object == null) {
            Intrinsics.throwNpe();
        }
        this.mSupportedPreviewSizes = object;
        object = this.getHolder();
        Intrinsics.checkExpressionValueIsNotNull((Object)object, (String)"holder");
        this.mHolder = object;
        this.mHolder.addCallback((SurfaceHolder.Callback)this);
        this.mHolder.setType(3);
    }

    private final Camera.Size getOptimalPreviewSize(List<? extends Camera.Size> size, int n, int n2) {
        Camera.Size size2;
        double d = (double)n2 / (double)n;
        if (size == null) {
            return null;
        }
        Camera.Size size3 = null;
        Iterator<? extends Camera.Size> iterator2 = size.iterator();
        double d2 = Double.MAX_VALUE;
        double d3 = Double.MAX_VALUE;
        while (iterator2.hasNext()) {
            size2 = iterator2.next();
            if (Math.abs((double)size2.width / (double)size2.height - d) > 0.198 || (double)Math.abs(size2.height - n2) >= d3) continue;
            d3 = Math.abs(size2.height - n2);
            size3 = size2;
        }
        size2 = size3;
        if (size3 == null) {
            iterator2 = size.iterator();
            d3 = d2;
            do {
                size2 = size3;
                if (!iterator2.hasNext()) break;
                size = iterator2.next();
                if ((double)Math.abs(size.height - n2) >= d3) continue;
                d3 = Math.abs(size.height - n2);
                size3 = size;
            } while (true);
        }
        return size2;
    }

    public void _$_clearFindViewByIdCache() {
        if (this._$_findViewCache != null) {
            this._$_findViewCache.clear();
        }
    }

    public View _$_findCachedViewById(int n) {
        View view;
        if (this._$_findViewCache == null) {
            this._$_findViewCache = new HashMap();
        }
        View view2 = view = (View)this._$_findViewCache.get(n);
        if (view == null) {
            view2 = this.findViewById(n);
            this._$_findViewCache.put(n, view2);
        }
        return view2;
    }

    protected void onMeasure(int n, int n2) {
        n = View.resolveSize((int)this.getSuggestedMinimumWidth(), (int)n);
        n2 = View.resolveSize((int)this.getSuggestedMinimumHeight(), (int)n2);
        this.setMeasuredDimension(n, n2);
        Camera.Size size = this.getOptimalPreviewSize(this.mSupportedPreviewSizes, n, n2);
        if (size == null) {
            Intrinsics.throwNpe();
        }
        this.mPreviewSize = size;
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public void surfaceChanged(@NotNull SurfaceHolder object, int n, int n2, int n3) {
        Intrinsics.checkParameterIsNotNull((Object)object, (String)"holder");
        if (this.mHolder.getSurface() == null) {
            return;
        }
        try {
            object = this.mCamera;
            if (object != null) {
                object.stopPreview();
            }
        }
        catch (Exception exception) {}
        try {
            Camera.Size size;
            object = this.mCamera;
            object = object != null ? object.getParameters() : null;
            if (object != null) {
                size = this.mPreviewSize;
                if (size == null) {
                    Intrinsics.throwUninitializedPropertyAccessException((String)"mPreviewSize");
                }
                n = size.width;
                size = this.mPreviewSize;
                if (size == null) {
                    Intrinsics.throwUninitializedPropertyAccessException((String)"mPreviewSize");
                }
                object.setPreviewSize(n, size.height);
            }
            if (object != null) {
                object.setFlashMode("auto");
            }
            if (object != null) {
                object.setJpegQuality(100);
            }
            if ((size = this.mCamera) != null) {
                size.setParameters((Camera.Parameters)object);
            }
            if ((object = this.mCamera) != null) {
                object.setPreviewDisplay(this.mHolder);
            }
            if ((object = this.mCamera) == null) return;
            {
                object.startPreview();
                return;
            }
        }
        catch (Exception exception) {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("Error starting camera preview: ");
            stringBuilder.append(exception.getMessage());
            Log.d((String)"ContentValues", (String)stringBuilder.toString());
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public void surfaceCreated(@NotNull SurfaceHolder surfaceHolder) {
        Intrinsics.checkParameterIsNotNull((Object)surfaceHolder, (String)"holder");
        try {
            Camera camera = this.mCamera;
            if (camera != null) {
                camera.setPreviewDisplay(surfaceHolder);
            }
            if ((surfaceHolder = this.mCamera) == null) return;
            surfaceHolder.startPreview();
            return;
        }
        catch (IOException iOException) {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("Error setting camera preview: ");
            stringBuilder.append(iOException.getMessage());
            Log.d((String)"ContentValues", (String)stringBuilder.toString());
        }
    }

    public void surfaceDestroyed(@NotNull SurfaceHolder surfaceHolder) {
        Intrinsics.checkParameterIsNotNull((Object)surfaceHolder, (String)"holder");
    }
}

