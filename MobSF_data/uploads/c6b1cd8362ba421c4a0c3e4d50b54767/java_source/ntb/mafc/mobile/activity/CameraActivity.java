/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.app.Activity
 *  android.content.Context
 *  android.content.Intent
 *  android.graphics.Bitmap
 *  android.graphics.Bitmap$CompressFormat
 *  android.graphics.Bitmap$Config
 *  android.graphics.BitmapFactory
 *  android.graphics.Canvas
 *  android.graphics.Matrix
 *  android.graphics.Paint
 *  android.hardware.Camera
 *  android.hardware.Camera$AutoFocusCallback
 *  android.hardware.Camera$Parameters
 *  android.hardware.Camera$PictureCallback
 *  android.hardware.Camera$ShutterCallback
 *  android.os.Bundle
 *  android.support.v4.app.ActivityCompat
 *  android.support.v4.content.ContextCompat
 *  android.support.v7.app.AppCompatActivity
 *  android.view.MotionEvent
 *  android.view.SurfaceHolder
 *  android.view.SurfaceHolder$Callback
 *  android.view.View
 *  android.view.View$OnClickListener
 *  android.widget.FrameLayout
 *  android.widget.ImageButton
 *  android.widget.ProgressBar
 *  android.widget.TextView
 *  android.widget.Toast
 *  kotlin.Metadata
 *  kotlin.jvm.internal.Intrinsics
 *  ntb.mafc.mobile.activity.CameraActivity$onCreate
 *  ntb.mafc.mobile.activity.CameraActivity$onPictureTaken
 *  ntb.mafc.mobile.activity.CameraActivity$onTouchEvent
 *  ntb.mafc.mobile.manager.LocaleManager
 *  ntb.mafc.mobile.manager.MainApplication
 *  ntb.mafc.mobile.manager.MainApplication$Companion
 *  org.jetbrains.annotations.NotNull
 *  org.jetbrains.annotations.Nullable
 */
package ntb.mafc.mobile.activity;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Canvas;
import android.graphics.Matrix;
import android.graphics.Paint;
import android.hardware.Camera;
import android.os.Bundle;
import android.support.v4.app.ActivityCompat;
import android.support.v4.content.ContextCompat;
import android.support.v7.app.AppCompatActivity;
import android.view.MotionEvent;
import android.view.SurfaceHolder;
import android.view.View;
import android.widget.FrameLayout;
import android.widget.ImageButton;
import android.widget.ProgressBar;
import android.widget.TextView;
import android.widget.Toast;
import java.io.File;
import java.io.FileOutputStream;
import java.io.OutputStream;
import java.io.Serializable;
import java.util.HashMap;
import kotlin.Metadata;
import kotlin.jvm.internal.Intrinsics;
import ntb.mafc.mobile.R;
import ntb.mafc.mobile.activity.CameraActivity;
import ntb.mafc.mobile.activity.CameraPreview;
import ntb.mafc.mobile.manager.BitmapManager;
import ntb.mafc.mobile.manager.ConfigManager;
import ntb.mafc.mobile.manager.LocaleManager;
import ntb.mafc.mobile.manager.MainApplication;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

@Metadata(bv={1, 0, 2}, d1={"\u0000\u0092\u0001\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0010\b\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0018\u0002\n\u0002\b\u0006\n\u0002\u0010\u000e\n\u0002\b\u0005\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0010\u000b\n\u0002\b\u0005\n\u0002\u0018\u0002\n\u0002\b\b\n\u0002\u0010\u0002\n\u0002\b\u0003\n\u0002\u0010\u0011\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0007\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0010\u0012\n\u0002\b\u0005\n\u0002\u0010\u0015\n\u0002\b\u0006\n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0010\u0007\n\u0002\b\u0003\u0018\u00002\u00020\u00012\u00020\u0002B\u0005\u00a2\u0006\u0002\u0010\u0003J\u0010\u0010.\u001a\u00020\u00052\u0006\u0010/\u001a\u00020\u0005H\u0002J\u0010\u00100\u001a\u00020\u00052\u0006\u0010/\u001a\u00020\u0005H\u0002J\b\u00101\u001a\u000202H\u0002J\b\u00103\u001a\u000202H\u0002J\u001b\u00104\u001a\u0002022\f\u00105\u001a\b\u0012\u0004\u0012\u00020706H\u0002\u00a2\u0006\u0002\u00108J(\u00109\u001a\u00020:2\u0006\u0010;\u001a\u00020:2\u0006\u0010<\u001a\u00020:2\u0006\u0010=\u001a\u00020:2\u0006\u0010>\u001a\u00020:H\u0002J \u0010?\u001a\u00020:2\u0006\u0010;\u001a\u00020:2\u0006\u0010<\u001a\u00020:2\u0006\u0010=\u001a\u00020:H\u0002J\u0012\u0010@\u001a\u0002022\b\u0010A\u001a\u0004\u0018\u00010BH\u0016J\b\u0010C\u001a\u000202H\u0014J\u001c\u0010D\u001a\u0002022\b\u0010E\u001a\u0004\u0018\u00010F2\b\u0010G\u001a\u0004\u0018\u00010\u001cH\u0016J-\u0010H\u001a\u0002022\u0006\u0010I\u001a\u00020\u00052\u000e\u0010J\u001a\n\u0012\u0006\b\u0001\u0012\u00020\u0016062\u0006\u0010K\u001a\u00020LH\u0016\u00a2\u0006\u0002\u0010MJ\b\u0010N\u001a\u000202H\u0014J\b\u0010O\u001a\u000202H\u0014J\b\u0010P\u001a\u000202H\u0014J\u0012\u0010Q\u001a\u00020#2\b\u0010R\u001a\u0004\u0018\u00010SH\u0016J\b\u0010T\u001a\u000202H\u0002J\b\u0010U\u001a\u000202H\u0002J\u0016\u0010V\u001a\u00020:2\u0006\u0010W\u001a\u00020:2\u0006\u0010X\u001a\u00020YJ\b\u0010Z\u001a\u000202H\u0002J\u0006\u0010[\u001a\u000202R\u0014\u0010\u0004\u001a\u00020\u0005X\u0086D\u00a2\u0006\b\n\u0000\u001a\u0004\b\u0006\u0010\u0007R\u001c\u0010\b\u001a\u0004\u0018\u00010\tX\u0086\u000e\u00a2\u0006\u000e\n\u0000\u001a\u0004\b\n\u0010\u000b\"\u0004\b\f\u0010\rR\u001c\u0010\u000e\u001a\u0004\u0018\u00010\u000fX\u0086\u000e\u00a2\u0006\u000e\n\u0000\u001a\u0004\b\u0010\u0010\u0011\"\u0004\b\u0012\u0010\u0013R\u000e\u0010\u0014\u001a\u00020\u0005X\u0082\u000e\u00a2\u0006\u0002\n\u0000R\u001c\u0010\u0015\u001a\u0004\u0018\u00010\u0016X\u0086\u000e\u00a2\u0006\u000e\n\u0000\u001a\u0004\b\u0017\u0010\u0018\"\u0004\b\u0019\u0010\u001aR\u0010\u0010\u001b\u001a\u0004\u0018\u00010\u001cX\u0082\u000e\u00a2\u0006\u0002\n\u0000R\u0010\u0010\u001d\u001a\u0004\u0018\u00010\u001eX\u0082\u000e\u00a2\u0006\u0002\n\u0000R\u001c\u0010\u001f\u001a\u0004\u0018\u00010\u0016X\u0086\u000e\u00a2\u0006\u000e\n\u0000\u001a\u0004\b \u0010\u0018\"\u0004\b!\u0010\u001aR\u001a\u0010\"\u001a\u00020#X\u0086\u000e\u00a2\u0006\u000e\n\u0000\u001a\u0004\b$\u0010%\"\u0004\b&\u0010'R\u001c\u0010(\u001a\u0004\u0018\u00010)X\u0086\u000e\u00a2\u0006\u000e\n\u0000\u001a\u0004\b*\u0010+\"\u0004\b,\u0010-\u00a8\u0006\\"}, d2={"Lntb/mafc/mobile/activity/CameraActivity;", "Landroid/support/v7/app/AppCompatActivity;", "Landroid/hardware/Camera$PictureCallback;", "()V", "REQUEST_PERMISSION_CAMERA", "", "getREQUEST_PERMISSION_CAMERA", "()I", "bitmapManager", "Lntb/mafc/mobile/manager/BitmapManager;", "getBitmapManager", "()Lntb/mafc/mobile/manager/BitmapManager;", "setBitmapManager", "(Lntb/mafc/mobile/manager/BitmapManager;)V", "configManager", "Lntb/mafc/mobile/manager/ConfigManager;", "getConfigManager", "()Lntb/mafc/mobile/manager/ConfigManager;", "setConfigManager", "(Lntb/mafc/mobile/manager/ConfigManager;)V", "count", "folderParent", "", "getFolderParent", "()Ljava/lang/String;", "setFolderParent", "(Ljava/lang/String;)V", "mCamera", "Landroid/hardware/Camera;", "mPreview", "Lntb/mafc/mobile/activity/CameraPreview;", "nameFolder", "getNameFolder", "setNameFolder", "safeToTakePhoto", "", "getSafeToTakePhoto", "()Z", "setSafeToTakePhoto", "(Z)V", "thread", "Ljava/lang/Thread;", "getThread", "()Ljava/lang/Thread;", "setThread", "(Ljava/lang/Thread;)V", "calculatorScale600", "size", "calculatorScale800", "checkCKFolder", "", "checkPermission", "deleteImageAfterMerge", "arrayFile", "", "Ljava/io/File;", "([Ljava/io/File;)V", "mergeFourBitmap", "Landroid/graphics/Bitmap;", "frame", "img", "img2", "img3", "mergeThreeBitmap", "onCreate", "savedInstanceState", "Landroid/os/Bundle;", "onDestroy", "onPictureTaken", "data", "", "camera", "onRequestPermissionsResult", "requestCode", "permissions", "grantResults", "", "(I[Ljava/lang/String;[I)V", "onResume", "onStart", "onStop", "onTouchEvent", "event", "Landroid/view/MotionEvent;", "openCamera", "releaseCameraAndPreview", "rotate", "bitmap", "degree", "", "stepByStepCK", "takePhoto", "app_release"}, k=1, mv={1, 1, 11})
public final class CameraActivity
extends AppCompatActivity
implements Camera.PictureCallback {
    private final int REQUEST_PERMISSION_CAMERA = 222;
    private HashMap _$_findViewCache;
    @Nullable
    private BitmapManager bitmapManager;
    @Nullable
    private ConfigManager configManager;
    private int count;
    @Nullable
    private String folderParent;
    private Camera mCamera;
    private CameraPreview mPreview;
    @Nullable
    private String nameFolder;
    private boolean safeToTakePhoto = true;
    @Nullable
    private Thread thread;

    public static final /* synthetic */ int access$getCount$p(CameraActivity cameraActivity) {
        return cameraActivity.count;
    }

    @Nullable
    public static final /* synthetic */ Camera access$getMCamera$p(CameraActivity cameraActivity) {
        return cameraActivity.mCamera;
    }

    public static final /* synthetic */ void access$setCount$p(CameraActivity cameraActivity, int n) {
        cameraActivity.count = n;
    }

    public static final /* synthetic */ void access$setMCamera$p(CameraActivity cameraActivity, @Nullable Camera camera) {
        cameraActivity.mCamera = camera;
    }

    private final int calculatorScale600(int n) {
        double d = n;
        return (int)(d / (d / (double)600) / (double)2);
    }

    private final int calculatorScale800(int n) {
        double d = n;
        return (int)(d / (d / (double)800) / (double)2);
    }

    private final void checkCKFolder() {
        Bitmap bitmap = new Bitmap(String.valueOf(this.folderParent));
        Object object = this.nameFolder;
        if (object == null) {
            return;
        }
        if (object.hashCode() != 2152) {
            return;
        }
        if (object.equals("CK")) {
            bitmap = bitmap.listFiles();
            switch (((File[])bitmap).length) {
                default: {
                    return;
                }
                case 4: {
                    object = bitmap[0];
                    Intrinsics.checkExpressionValueIsNotNull((Object)object, (String)"childFile.get(0)");
                    object = BitmapFactory.decodeFile((String)object.getAbsolutePath());
                    Serializable serializable = bitmap[1];
                    Intrinsics.checkExpressionValueIsNotNull((Object)serializable, (String)"childFile.get(1)");
                    serializable = BitmapFactory.decodeFile((String)serializable.getAbsolutePath());
                    File file = bitmap[2];
                    Intrinsics.checkExpressionValueIsNotNull((Object)file, (String)"childFile.get(2)");
                    file = BitmapFactory.decodeFile((String)file.getAbsolutePath());
                    File file2 = bitmap[3];
                    Intrinsics.checkExpressionValueIsNotNull((Object)file2, (String)"childFile.get(3)");
                    file2 = BitmapFactory.decodeFile((String)file2.getAbsolutePath());
                    Intrinsics.checkExpressionValueIsNotNull((Object)bitmap, (String)"childFile");
                    this.deleteImageAfterMerge((File[])bitmap);
                    Intrinsics.checkExpressionValueIsNotNull((Object)object, (String)"bitmap1");
                    Intrinsics.checkExpressionValueIsNotNull((Object)serializable, (String)"bitmap2");
                    Intrinsics.checkExpressionValueIsNotNull((Object)file, (String)"bitmap3");
                    Intrinsics.checkExpressionValueIsNotNull((Object)file2, (String)"bitmap4");
                    bitmap = this.mergeFourBitmap((Bitmap)object, (Bitmap)serializable, (Bitmap)file, (Bitmap)file2);
                    object = Bitmap.CompressFormat.JPEG;
                    serializable = new StringBuilder();
                    serializable.append(this.folderParent);
                    serializable.append('/');
                    serializable.append(this.nameFolder);
                    serializable.append("1.jpg");
                    bitmap.compress((Bitmap.CompressFormat)object, 100, (OutputStream)new FileOutputStream(serializable.toString()));
                    return;
                }
                case 3: 
            }
            object = bitmap[0];
            Intrinsics.checkExpressionValueIsNotNull((Object)object, (String)"childFile.get(0)");
            object = BitmapFactory.decodeFile((String)object.getAbsolutePath());
            Serializable serializable = bitmap[1];
            Intrinsics.checkExpressionValueIsNotNull((Object)serializable, (String)"childFile.get(1)");
            serializable = BitmapFactory.decodeFile((String)serializable.getAbsolutePath());
            File file = bitmap[2];
            Intrinsics.checkExpressionValueIsNotNull((Object)file, (String)"childFile.get(2)");
            file = BitmapFactory.decodeFile((String)file.getAbsolutePath());
            Intrinsics.checkExpressionValueIsNotNull((Object)bitmap, (String)"childFile");
            this.deleteImageAfterMerge((File[])bitmap);
            Intrinsics.checkExpressionValueIsNotNull((Object)object, (String)"bitmap1");
            Intrinsics.checkExpressionValueIsNotNull((Object)serializable, (String)"bitmap2");
            Intrinsics.checkExpressionValueIsNotNull((Object)file, (String)"bitmap3");
            bitmap = this.mergeThreeBitmap((Bitmap)object, (Bitmap)serializable, (Bitmap)file);
            object = Bitmap.CompressFormat.JPEG;
            serializable = new StringBuilder();
            serializable.append(this.folderParent);
            serializable.append('/');
            serializable.append(this.nameFolder);
            serializable.append(".jpg");
            bitmap.compress((Bitmap.CompressFormat)object, 100, (OutputStream)new FileOutputStream(serializable.toString()));
        }
    }

    private final void checkPermission() {
        if (ContextCompat.checkSelfPermission((Context)((Context)this), (String)"android.permission.CAMERA") == 0) {
            this.openCamera();
            return;
        }
        Activity activity = (Activity)this;
        int n = this.REQUEST_PERMISSION_CAMERA;
        ActivityCompat.requestPermissions((Activity)activity, (String[])new String[]{"android.permission.CAMERA"}, (int)n);
    }

    private final void deleteImageAfterMerge(File[] arrfile) {
        int n = arrfile.length;
        for (int i = 0; i < n; ++i) {
            arrfile[i].delete();
        }
    }

    private final Bitmap mergeFourBitmap(Bitmap bitmap, Bitmap bitmap2, Bitmap bitmap3, Bitmap bitmap4) {
        bitmap = Bitmap.createScaledBitmap((Bitmap)bitmap, (int)400, (int)300, (boolean)false);
        bitmap2 = Bitmap.createScaledBitmap((Bitmap)bitmap2, (int)400, (int)300, (boolean)false);
        bitmap3 = Bitmap.createScaledBitmap((Bitmap)bitmap3, (int)400, (int)300, (boolean)false);
        bitmap4 = Bitmap.createScaledBitmap((Bitmap)bitmap4, (int)400, (int)300, (boolean)false);
        Bitmap bitmap5 = Bitmap.createBitmap((int)800, (int)600, (Bitmap.Config)Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(bitmap5);
        canvas.drawBitmap(bitmap, 0.0f, 0.0f, null);
        Intrinsics.checkExpressionValueIsNotNull((Object)bitmap, (String)"bitmap1");
        canvas.drawBitmap(bitmap2, (float)bitmap.getWidth() / 1.0f, 0.0f, null);
        canvas.drawBitmap(bitmap3, 0.0f, (float)bitmap.getHeight() / 1.0f, null);
        Intrinsics.checkExpressionValueIsNotNull((Object)bitmap3, (String)"bitmap3");
        canvas.drawBitmap(bitmap4, (float)bitmap3.getWidth() / 1.0f, (float)bitmap.getHeight() / 1.0f, null);
        Intrinsics.checkExpressionValueIsNotNull((Object)bitmap5, (String)"bmOverlay");
        return bitmap5;
    }

    private final Bitmap mergeThreeBitmap(Bitmap bitmap, Bitmap bitmap2, Bitmap bitmap3) {
        bitmap = Bitmap.createScaledBitmap((Bitmap)bitmap, (int)400, (int)300, (boolean)false);
        bitmap2 = Bitmap.createScaledBitmap((Bitmap)bitmap2, (int)400, (int)300, (boolean)false);
        bitmap3 = Bitmap.createScaledBitmap((Bitmap)bitmap3, (int)800, (int)300, (boolean)false);
        Bitmap bitmap4 = Bitmap.createBitmap((int)800, (int)600, (Bitmap.Config)Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(bitmap4);
        canvas.drawBitmap(bitmap, 0.0f, 0.0f, null);
        Intrinsics.checkExpressionValueIsNotNull((Object)bitmap, (String)"bitmap1");
        canvas.drawBitmap(bitmap2, (float)bitmap.getWidth() / 1.0f, 0.0f, null);
        canvas.drawBitmap(bitmap3, 0.0f, (float)bitmap.getHeight() / 1.0f, null);
        Intrinsics.checkExpressionValueIsNotNull((Object)bitmap4, (String)"bmOverlay");
        return bitmap4;
    }

    private final void openCamera() {
        this.mCamera = Camera.open();
        Camera camera = this.mCamera;
        if (camera != null) {
            camera.setDisplayOrientation(90);
        }
        this.mPreview = new CameraPreview((Context)this, this.mCamera);
        ((FrameLayout)this._$_findCachedViewById(R.id.cameraPreview)).addView((View)this.mPreview);
    }

    private final void releaseCameraAndPreview() {
        if (this.mCamera != null) {
            Camera camera = this.mCamera;
            if (camera != null) {
                camera.release();
            }
            this.mCamera = null;
        }
    }

    private final void stepByStepCK() {
        String string2 = this.nameFolder;
        if (string2 == null) {
            return;
        }
        if (string2.hashCode() != 2152) {
            return;
        }
        if (string2.equals("CK")) {
            string2 = MainApplication.Companion.getLocale();
            switch (this.count) {
                default: {
                    break;
                }
                case 4: {
                    TextView textView = (TextView)this._$_findCachedViewById(R.id.txtNameFile);
                    Intrinsics.checkExpressionValueIsNotNull((Object)textView, (String)"txtNameFile");
                    textView.setText((CharSequence)string2.getInformationconfirmationform());
                    break;
                }
                case 3: {
                    TextView textView = (TextView)this._$_findCachedViewById(R.id.txtNameFile);
                    Intrinsics.checkExpressionValueIsNotNull((Object)textView, (String)"txtNameFile");
                    textView.setText((CharSequence)string2.getSignature());
                    break;
                }
                case 2: {
                    TextView textView = (TextView)this._$_findCachedViewById(R.id.txtNameFile);
                    Intrinsics.checkExpressionValueIsNotNull((Object)textView, (String)"txtNameFile");
                    textView.setText((CharSequence)string2.getIdcardback());
                    break;
                }
                case 1: {
                    TextView textView = (TextView)this._$_findCachedViewById(R.id.txtNameFile);
                    Intrinsics.checkExpressionValueIsNotNull((Object)textView, (String)"txtNameFile");
                    textView.setText((CharSequence)string2.getIdcardfront());
                }
            }
            ++this.count;
        }
    }

    public void _$_clearFindViewByIdCache() {
        if (this._$_findViewCache != null) {
            this._$_findViewCache.clear();
        }
    }

    public View _$_findCachedViewById(int n) {
        View view;
        if (this._$_findViewCache == null) {
            this._$_findViewCache = new HashMap();
        }
        View view2 = view = (View)this._$_findViewCache.get(n);
        if (view == null) {
            view2 = this.findViewById(n);
            this._$_findViewCache.put(n, view2);
        }
        return view2;
    }

    @Nullable
    public final BitmapManager getBitmapManager() {
        return this.bitmapManager;
    }

    @Nullable
    public final ConfigManager getConfigManager() {
        return this.configManager;
    }

    @Nullable
    public final String getFolderParent() {
        return this.folderParent;
    }

    @Nullable
    public final String getNameFolder() {
        return this.nameFolder;
    }

    public final int getREQUEST_PERMISSION_CAMERA() {
        return this.REQUEST_PERMISSION_CAMERA;
    }

    public final boolean getSafeToTakePhoto() {
        return this.safeToTakePhoto;
    }

    @Nullable
    public final Thread getThread() {
        return this.thread;
    }

    public void onCreate(@Nullable Bundle bundle) {
        super.onCreate(bundle);
        this.setContentView(2131427392);
        this.folderParent = this.getIntent().getStringExtra("parentfolder");
        this.nameFolder = this.getIntent().getStringExtra("namefolder");
        this.bitmapManager = new BitmapManager();
        this.configManager = new ConfigManager();
        bundle = (TextView)this._$_findCachedViewById(R.id.txtNameFile);
        if (bundle != null) {
            bundle.setText((CharSequence)this.nameFolder);
        }
        this.stepByStepCK();
        ((ImageButton)this._$_findCachedViewById(R.id.btnBack)).setOnClickListener(new View.OnClickListener(this){
            final /* synthetic */ CameraActivity this$0;
            {
                this.this$0 = cameraActivity;
            }

            public final void onClick(View view) {
                view = CameraActivity.access$getMCamera$p(this.this$0);
                if (view != null) {
                    view.release();
                }
                this.this$0.finish();
            }
        });
        ((ImageButton)this._$_findCachedViewById(R.id.imTakePhoto)).setOnClickListener(new View.OnClickListener(this){
            final /* synthetic */ CameraActivity this$0;
            {
                this.this$0 = cameraActivity;
            }

            public final void onClick(View view) {
                this.this$0.takePhoto();
            }
        });
    }

    protected void onDestroy() {
        this.checkCKFolder();
        super.onDestroy();
        Camera camera = this.mCamera;
        if (camera != null) {
            camera.release();
        }
    }

    public void onPictureTaken(@Nullable byte[] object, @Nullable Camera camera) {
        this.thread = new Thread(new Runnable(this, (byte[])object){
            final /* synthetic */ byte[] $data;
            final /* synthetic */ CameraActivity this$0;
            {
                this.this$0 = cameraActivity;
                this.$data = arrby;
            }

            /*
             * Loose catch block
             * Enabled aggressive block sorting
             * Enabled unnecessary exception pruning
             * Enabled aggressive exception aggregation
             * Lifted jumps to return sites
             */
            public final void run() {
                Object object;
                File file;
                block17 : {
                    Bitmap bitmap;
                    block18 : {
                        block20 : {
                            Serializable serializable;
                            void var2_8;
                            block19 : {
                                Object object2;
                                object = CameraActivity.access$getMCamera$p(this.this$0);
                                if (object != null) {
                                    object.stopPreview();
                                }
                                if ((object = CameraActivity.access$getMCamera$p(this.this$0)) != null) {
                                    object.cancelAutoFocus();
                                }
                                bitmap = null;
                                object = null;
                                object = this.this$0.getNameFolder();
                                if (object != null && object.hashCode() == 2152 && object.equals("CK")) {
                                    object = new StringBuilder();
                                    object.append(this.this$0.getFolderParent());
                                    object.append('/');
                                    object.append(this.this$0.getNameFolder());
                                    object.append(CameraActivity.access$getCount$p(this.this$0));
                                    object.append(".jpeg");
                                    object = object.toString();
                                } else {
                                    object = new StringBuilder();
                                    object.append(this.this$0.getFolderParent());
                                    object.append('/');
                                    object.append(this.this$0.getNameFolder());
                                    serializable = java.util.Calendar.getInstance();
                                    Intrinsics.checkExpressionValueIsNotNull((Object)serializable, (String)"Calendar.getInstance()");
                                    object.append(serializable.getTimeInMillis());
                                    object.append(".jpeg");
                                    object = object.toString();
                                }
                                serializable = new StringBuilder();
                                serializable.append(this.this$0.getFilesDir());
                                serializable.append('/');
                                serializable.append((String)object);
                                file = new File(serializable.toString());
                                object = object2 = (Bitmap)null;
                                serializable = object2;
                                FileOutputStream fileOutputStream = new FileOutputStream(file);
                                object = object2;
                                serializable = object2;
                                BitmapManager bitmapManager = this.this$0.getBitmapManager();
                                if (bitmapManager != null) {
                                    object = object2;
                                    serializable = object2;
                                    bitmap = this.$data;
                                    if (bitmap == null) {
                                        object = object2;
                                        serializable = object2;
                                        Intrinsics.throwNpe();
                                    }
                                    object = object2;
                                    serializable = object2;
                                    bitmap = bitmapManager.decodeSampledBitmapFromResource((byte[])bitmap, 794, 1123);
                                }
                                object = bitmap;
                                serializable = bitmap;
                                object2 = this.this$0;
                                if (bitmap == null) {
                                    object = bitmap;
                                    serializable = bitmap;
                                    Intrinsics.throwNpe();
                                }
                                object = bitmap;
                                serializable = bitmap;
                                bitmap = object2.rotate(bitmap, 90.0f);
                                try {
                                    if (bitmap.compress(Bitmap.CompressFormat.JPEG, 100, (OutputStream)fileOutputStream)) {
                                        object = new android.media.ExifInterface(file.getAbsolutePath());
                                        object.setAttribute("ExposureTime", this.this$0.getString(2131624010));
                                        object.setAttribute("Model", this.this$0.getString(2131624025));
                                        object.saveAttributes();
                                    }
                                    fileOutputStream.close();
                                    if (bitmap == null) break block17;
                                    break block18;
                                }
                                catch (java.lang.Throwable throwable) {
                                    object = bitmap;
                                    break block19;
                                }
                                catch (java.lang.Throwable throwable) {
                                    // empty catch block
                                }
                            }
                            if (object == null) throw var2_8;
                            object.recycle();
                            throw var2_8;
                            catch (Exception exception) {}
                            bitmap = serializable;
                            break block20;
                            catch (Exception exception) {}
                        }
                        if (bitmap == null) break block17;
                    }
                    bitmap.recycle();
                }
                object = new Intent((Context)this.this$0, ntb.mafc.mobile.activity.EditImageActivity.class);
                object.putExtra("uri", file.getAbsolutePath());
                object.putExtra("folderParent", this.this$0.getFolderParent());
                object.putExtra("nameFolder", this.this$0.getNameFolder());
                this.this$0.startActivity((Intent)object);
                this.this$0.setSafeToTakePhoto(true);
            }
        });
        object = this.thread;
        if (object != null) {
            object.start();
        }
    }

    public void onRequestPermissionsResult(int n, @NotNull String[] arrstring, @NotNull int[] arrn) {
        Intrinsics.checkParameterIsNotNull((Object)arrstring, (String)"permissions");
        Intrinsics.checkParameterIsNotNull((Object)arrn, (String)"grantResults");
        super.onRequestPermissionsResult(n, arrstring, arrn);
        if (n == this.REQUEST_PERMISSION_CAMERA) {
            n = arrn.length == 0 ? 1 : 0;
            if ((n ^ 1) != 0 && arrn[0] == 0) {
                this.openCamera();
                return;
            }
            this.finish();
        }
    }

    protected void onResume() {
        super.onResume();
        this.checkPermission();
        this.stepByStepCK();
        if (this.count > 5) {
            this.finish();
        }
    }

    protected void onStart() {
        super.onStart();
    }

    protected void onStop() {
        Object object;
        super.onStop();
        if (this.thread != null && (object = this.thread) != null) {
            object.interrupt();
        }
        if (this.mCamera != null) {
            object = this.mPreview;
            if (object != null && (object = object.getHolder()) != null) {
                object.removeCallback((SurfaceHolder.Callback)this.mPreview);
            }
            if ((object = this.mCamera) != null) {
                object.release();
            }
            this.mCamera = null;
        }
        if ((object = (ProgressBar)this._$_findCachedViewById(R.id.progressBar)) != null) {
            object.setVisibility(8);
        }
        if ((object = (ImageButton)this._$_findCachedViewById(R.id.imTakePhoto)) != null) {
            object.setVisibility(0);
        }
    }

    public boolean onTouchEvent(@Nullable MotionEvent object) {
        object = object != null ? Integer.valueOf(object.getAction()) : null;
        if (object != null && object.intValue() == 0 && this.safeToTakePhoto && (object = this.mCamera) != null) {
            object.autoFocus((Camera.AutoFocusCallback)onTouchEvent.INSTANCE);
        }
        return true;
    }

    @NotNull
    public final Bitmap rotate(@NotNull Bitmap bitmap, float f) {
        Intrinsics.checkParameterIsNotNull((Object)bitmap, (String)"bitmap");
        int n = bitmap.getWidth();
        int n2 = bitmap.getHeight();
        Matrix matrix = new Matrix();
        matrix.setRotate(f);
        bitmap = Bitmap.createBitmap((Bitmap)bitmap, (int)0, (int)0, (int)n, (int)n2, (Matrix)matrix, (boolean)true);
        Intrinsics.checkExpressionValueIsNotNull((Object)bitmap, (String)"Bitmap.createBitmap(bitmap, 0, 0, w, h, mtx, true)");
        return bitmap;
    }

    public final void setBitmapManager(@Nullable BitmapManager bitmapManager) {
        this.bitmapManager = bitmapManager;
    }

    public final void setConfigManager(@Nullable ConfigManager configManager) {
        this.configManager = configManager;
    }

    public final void setFolderParent(@Nullable String string2) {
        this.folderParent = string2;
    }

    public final void setNameFolder(@Nullable String string2) {
        this.nameFolder = string2;
    }

    public final void setSafeToTakePhoto(boolean bl) {
        this.safeToTakePhoto = bl;
    }

    public final void setThread(@Nullable Thread thread2) {
        this.thread = thread2;
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    public final void takePhoto() {
        Object object = this.configManager;
        object = object != null ? Boolean.valueOf(object.isFreeSpaceInternalStorage()) : null;
        if (object == null) {
            Intrinsics.throwNpe();
        }
        if (!object.booleanValue()) {
            Toast.makeText((Context)this.getApplicationContext(), (CharSequence)MainApplication.Companion.getLocale().getErrorStorage(), (int)0).show();
            return;
        }
        try {
            object = (ProgressBar)this._$_findCachedViewById(R.id.progressBar);
            if (object != null) {
                object.setVisibility(0);
            }
            if ((object = (ImageButton)this._$_findCachedViewById(R.id.imTakePhoto)) != null) {
                object.setVisibility(4);
            }
            if (!this.safeToTakePhoto) return;
            object = this.mCamera;
            object = object != null ? object.getParameters() : null;
            if (object != null) {
                object.setJpegQuality(100);
            }
            if (object != null) {
                object.setPictureFormat(256);
            }
            if ((object = this.mCamera) != null) {
                object.takePicture(null, null, (Camera.PictureCallback)this);
            }
            this.safeToTakePhoto = false;
            return;
        }
        catch (Exception exception) {
            return;
        }
    }
}

