/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.annotation.SuppressLint
 *  android.app.Activity
 *  android.content.Context
 *  android.content.DialogInterface
 *  android.content.DialogInterface$OnClickListener
 *  android.content.Intent
 *  android.content.SharedPreferences
 *  android.location.Location
 *  android.location.LocationListener
 *  android.location.LocationManager
 *  android.media.ExifInterface
 *  android.os.Bundle
 *  android.os.Parcelable
 *  android.support.v4.app.ActivityCompat
 *  android.support.v4.app.Fragment
 *  android.support.v4.app.FragmentManager
 *  android.support.v4.app.FragmentTransaction
 *  android.support.v4.content.ContextCompat
 *  android.support.v7.app.AlertDialog
 *  android.support.v7.app.AlertDialog$Builder
 *  android.support.v7.app.AppCompatActivity
 *  android.support.v7.widget.LinearLayoutManager
 *  android.support.v7.widget.RecyclerView
 *  android.support.v7.widget.RecyclerView$Adapter
 *  android.support.v7.widget.RecyclerView$LayoutManager
 *  android.text.Editable
 *  android.view.MenuItem
 *  android.view.View
 *  android.view.View$OnClickListener
 *  android.widget.EditText
 *  android.widget.ImageButton
 *  android.widget.ProgressBar
 *  android.widget.TextView
 *  android.widget.Toast
 *  kotlin.Metadata
 *  kotlin.TypeCastException
 *  kotlin.jvm.internal.Intrinsics
 *  ntb.mafc.mobile.activity.DocumentActivity$onCreate
 *  ntb.mafc.mobile.activity.DocumentActivity$showDialog
 *  ntb.mafc.mobile.activity.DocumentActivity$showDialogOkCancel
 *  ntb.mafc.mobile.activity.DocumentActivity$uploadDefer
 *  ntb.mafc.mobile.activity.DocumentActivity$uploadFaile
 *  ntb.mafc.mobile.activity.DocumentActivity$uploadNewAndHardQDEDocument
 *  ntb.mafc.mobile.activity.DocumentActivity$uploadNewApp
 *  ntb.mafc.mobile.activity.DocumentActivity$uploadZip
 *  ntb.mafc.mobile.activity.DocumentActivity$validateReason
 *  ntb.mafc.mobile.manager.LocaleManager
 *  ntb.mafc.mobile.manager.MainApplication
 *  ntb.mafc.mobile.manager.MainApplication$Companion
 *  okhttp3.MediaType
 *  okhttp3.MultipartBody
 *  okhttp3.MultipartBody$Part
 *  okhttp3.RequestBody
 *  org.jetbrains.annotations.NotNull
 *  org.jetbrains.annotations.Nullable
 */
package ntb.mafc.mobile.activity;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.SharedPreferences;
import android.location.Location;
import android.location.LocationListener;
import android.location.LocationManager;
import android.media.ExifInterface;
import android.os.Bundle;
import android.os.Parcelable;
import android.support.v4.app.ActivityCompat;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentManager;
import android.support.v4.app.FragmentTransaction;
import android.support.v4.content.ContextCompat;
import android.support.v7.app.AlertDialog;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.text.Editable;
import android.view.MenuItem;
import android.view.View;
import android.widget.EditText;
import android.widget.ImageButton;
import android.widget.ProgressBar;
import android.widget.TextView;
import android.widget.Toast;
import java.io.File;
import java.io.Serializable;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import kotlin.Metadata;
import kotlin.TypeCastException;
import kotlin.io.FilesKt;
import kotlin.jvm.internal.Intrinsics;
import kotlin.jvm.internal.Ref;
import kotlin.text.StringsKt;
import ntb.mafc.mobile.R;
import ntb.mafc.mobile.activity.DocumentActivity;
import ntb.mafc.mobile.customadapter.AdapterDetailFileCustomer;
import ntb.mafc.mobile.entity.Defer;
import ntb.mafc.mobile.entity.FileEntity;
import ntb.mafc.mobile.entity.User;
import ntb.mafc.mobile.fragment.DialogFragment;
import ntb.mafc.mobile.fragment.FragmentListDocument;
import ntb.mafc.mobile.manager.ConfigManager;
import ntb.mafc.mobile.manager.FileManager;
import ntb.mafc.mobile.manager.LocaleManager;
import ntb.mafc.mobile.manager.MainApplication;
import ntb.mafc.mobile.model.DeferModel;
import ntb.mafc.mobile.model.FileModel;
import ntb.mafc.mobile.model.UserModel;
import ntb.mafc.mobile.view.DeferView;
import ntb.mafc.mobile.view.FileView;
import ntb.mafc.mobile.view.UploadInterface;
import okhttp3.MediaType;
import okhttp3.MultipartBody;
import okhttp3.RequestBody;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

@Metadata(bv={1, 0, 2}, d1={"\u0000\u00bc\u0001\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\u000e\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0006\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0010\u000b\n\u0002\b\u0006\n\u0002\u0010!\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0010\b\n\u0002\b\u0007\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\u0002\n\u0002\b\u0016\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0007\n\u0002\u0010\u0011\n\u0000\n\u0002\u0010\u0015\n\u0002\b\u001f\u0018\u00002\u00020\u00012\u00020\u00022\u00020\u00032\u00020\u00042\u00020\u0005B\u0005\u00a2\u0006\u0002\u0010\u0006J\u0006\u0010?\u001a\u00020@J\b\u0010A\u001a\u00020@H\u0016J\u0012\u0010B\u001a\u00020@2\b\u0010C\u001a\u0004\u0018\u00010\nH\u0016J\u0017\u0010D\u001a\u0004\u0018\u0001022\u0006\u0010E\u001a\u00020\nH\u0002\u00a2\u0006\u0002\u0010FJ\b\u0010G\u001a\u00020 H\u0002J\u0012\u0010H\u001a\u00020 2\b\u0010I\u001a\u0004\u0018\u00010\u0016H\u0002J\b\u0010J\u001a\u00020 H\u0002J\b\u0010K\u001a\u00020@H\u0003J\b\u0010L\u001a\u00020@H\u0002J\u0006\u0010M\u001a\u00020@J\b\u0010N\u001a\u00020@H\u0002J\u0012\u0010O\u001a\u00020@2\b\u0010P\u001a\u0004\u0018\u00010\nH\u0016J\b\u0010Q\u001a\u00020@H\u0016J\u0010\u0010R\u001a\u00020@2\u0006\u0010E\u001a\u00020\nH\u0002J\u0017\u0010S\u001a\u00020@2\b\u0010T\u001a\u0004\u0018\u000102H\u0016\u00a2\u0006\u0002\u00106J\u0012\u0010U\u001a\u00020 2\b\u0010V\u001a\u0004\u0018\u00010WH\u0016J\u0012\u0010X\u001a\u00020@2\b\u0010Y\u001a\u0004\u0018\u00010ZH\u0014J\u0012\u0010[\u001a\u00020@2\b\u0010+\u001a\u0004\u0018\u00010,H\u0016J\u0012\u0010\\\u001a\u00020@2\b\u0010]\u001a\u0004\u0018\u00010\nH\u0016J\u0012\u0010^\u001a\u00020@2\b\u0010]\u001a\u0004\u0018\u00010\nH\u0016J-\u0010_\u001a\u00020@2\u0006\u0010`\u001a\u0002022\u000e\u0010a\u001a\n\u0012\u0006\b\u0001\u0012\u00020\n0b2\u0006\u0010c\u001a\u00020dH\u0017\u00a2\u0006\u0002\u0010eJ\b\u0010f\u001a\u00020@H\u0014J\b\u0010g\u001a\u00020@H\u0014J$\u0010h\u001a\u00020@2\b\u0010]\u001a\u0004\u0018\u00010\n2\u0006\u0010i\u001a\u0002022\b\u0010j\u001a\u0004\u0018\u00010ZH\u0016J\b\u0010k\u001a\u00020@H\u0014J\b\u0010l\u001a\u00020@H\u0016J\b\u0010m\u001a\u00020@H\u0002J\u0006\u0010n\u001a\u00020@J\u0010\u0010o\u001a\u00020@2\b\u0010p\u001a\u0004\u0018\u00010\u0016J!\u0010q\u001a\u00020@2\b\u0010`\u001a\u0004\u0018\u0001022\b\u0010\u000b\u001a\u0004\u0018\u00010\fH\u0016\u00a2\u0006\u0002\u0010rJ\u0012\u0010s\u001a\u00020@2\b\u0010C\u001a\u0004\u0018\u00010\nH\u0002J\u0012\u0010t\u001a\u00020@2\b\u0010C\u001a\u0004\u0018\u00010\nH\u0002J\u0018\u0010u\u001a\u00020@2\u000e\u0010v\u001a\n\u0012\u0004\u0012\u00020(\u0018\u00010'H\u0016J\b\u0010w\u001a\u00020@H\u0002J\u0012\u0010x\u001a\u00020@2\b\u0010y\u001a\u0004\u0018\u00010\nH\u0016J\u0012\u0010z\u001a\u00020@2\b\u0010y\u001a\u0004\u0018\u00010\nH\u0016J\u0010\u0010{\u001a\u00020@2\u0006\u0010|\u001a\u00020\nH\u0002J\u0010\u0010}\u001a\u00020@2\u0006\u0010~\u001a\u00020 H\u0002J\b\u0010\u001a\u00020@H\u0002J\t\u0010?\u0001\u001a\u00020@H\u0016J\u0007\u0010\u0081\u0001\u001a\u00020@J\t\u0010\u0082\u0001\u001a\u00020 H\u0002R\u0010\u0010\u0007\u001a\u0004\u0018\u00010\bX\u0082\u000e\u00a2\u0006\u0002\n\u0000R\u0010\u0010\t\u001a\u0004\u0018\u00010\nX\u0082\u000e\u00a2\u0006\u0002\n\u0000R\u0010\u0010\u000b\u001a\u0004\u0018\u00010\fX\u0082\u000e\u00a2\u0006\u0002\n\u0000R\u0010\u0010\r\u001a\u0004\u0018\u00010\u000eX\u0082\u000e\u00a2\u0006\u0002\n\u0000R\u0010\u0010\u000f\u001a\u0004\u0018\u00010\u0010X\u0082\u000e\u00a2\u0006\u0002\n\u0000R\u0010\u0010\u0011\u001a\u0004\u0018\u00010\u0012X\u0082\u000e\u00a2\u0006\u0002\n\u0000R\u0010\u0010\u0013\u001a\u0004\u0018\u00010\u0014X\u0082\u000e\u00a2\u0006\u0002\n\u0000R\u001c\u0010\u0015\u001a\u0004\u0018\u00010\u0016X\u0086\u000e\u00a2\u0006\u000e\n\u0000\u001a\u0004\b\u0017\u0010\u0018\"\u0004\b\u0019\u0010\u001aR\u0010\u0010\u001b\u001a\u0004\u0018\u00010\nX\u0082\u000e\u00a2\u0006\u0002\n\u0000R\u0010\u0010\u001c\u001a\u0004\u0018\u00010\u001dX\u0082\u000e\u00a2\u0006\u0002\n\u0000R\u0010\u0010\u001e\u001a\u0004\u0018\u00010\nX\u0082\u000e\u00a2\u0006\u0002\n\u0000R\u001a\u0010\u001f\u001a\u00020 X\u0086\u000e\u00a2\u0006\u000e\n\u0000\u001a\u0004\b\u001f\u0010!\"\u0004\b\"\u0010#R\u000e\u0010$\u001a\u00020 X\u0082\u000e\u00a2\u0006\u0002\n\u0000R\u000e\u0010%\u001a\u00020 X\u0082\u000e\u00a2\u0006\u0002\n\u0000R\u0016\u0010&\u001a\n\u0012\u0004\u0012\u00020(\u0018\u00010'X\u0082\u000e\u00a2\u0006\u0002\n\u0000R\u0010\u0010)\u001a\u0004\u0018\u00010*X\u0082\u000e\u00a2\u0006\u0002\n\u0000R\u0010\u0010+\u001a\u0004\u0018\u00010,X\u0082\u000e\u00a2\u0006\u0002\n\u0000R\u0010\u0010-\u001a\u0004\u0018\u00010.X\u0082\u000e\u00a2\u0006\u0002\n\u0000R\u0010\u0010/\u001a\u0004\u0018\u00010\nX\u0082\u000e\u00a2\u0006\u0002\n\u0000R\u0010\u00100\u001a\u0004\u0018\u00010\nX\u0082\u000e\u00a2\u0006\u0002\n\u0000R\u001e\u00101\u001a\u0004\u0018\u000102X\u0086\u000e\u00a2\u0006\u0010\n\u0002\u00107\u001a\u0004\b3\u00104\"\u0004\b5\u00106R\u000e\u00108\u001a\u000202X\u0082D\u00a2\u0006\u0002\n\u0000R\u0010\u00109\u001a\u0004\u0018\u00010:X\u0082\u000e\u00a2\u0006\u0002\n\u0000R\u0010\u0010;\u001a\u0004\u0018\u00010<X\u0082\u000e\u00a2\u0006\u0002\n\u0000R\u0010\u0010=\u001a\u0004\u0018\u00010>X\u0082\u000e\u00a2\u0006\u0002\n\u0000\u00a8\u0006\u0083\u0001"}, d2={"Lntb/mafc/mobile/activity/DocumentActivity;", "Landroid/support/v7/app/AppCompatActivity;", "Lntb/mafc/mobile/view/FileView;", "Landroid/location/LocationListener;", "Lntb/mafc/mobile/view/UploadInterface;", "Lntb/mafc/mobile/view/DeferView;", "()V", "configManager", "Lntb/mafc/mobile/manager/ConfigManager;", "customerName", "", "defer", "Lntb/mafc/mobile/entity/Defer;", "deferModel", "Lntb/mafc/mobile/model/DeferModel;", "dialogFragment", "Lntb/mafc/mobile/fragment/DialogFragment;", "fileManager", "Lntb/mafc/mobile/manager/FileManager;", "fileModel", "Lntb/mafc/mobile/model/FileModel;", "folderSelected", "Ljava/io/File;", "getFolderSelected", "()Ljava/io/File;", "setFolderSelected", "(Ljava/io/File;)V", "folderzip", "fragmentListDocument", "Lntb/mafc/mobile/fragment/FragmentListDocument;", "idCustomer", "isDefer", "", "()Z", "setDefer", "(Z)V", "isQDEHard", "isUpload", "listFileDowndload", "", "Lntb/mafc/mobile/entity/FileEntity;", "localeManager", "Lntb/mafc/mobile/manager/LocaleManager;", "location", "Landroid/location/Location;", "locationManager", "Landroid/location/LocationManager;", "nameFolderLevelOne", "nameFolderTwo", "numberFileUpload", "", "getNumberFileUpload", "()Ljava/lang/Integer;", "setNumberFileUpload", "(Ljava/lang/Integer;)V", "Ljava/lang/Integer;", "requestNotification", "thread", "Ljava/lang/Thread;", "user", "Lntb/mafc/mobile/entity/User;", "userModel", "Lntb/mafc/mobile/model/UserModel;", "back", "", "checkDeferCMNDSGBSuccess", "checkDeferFail", "message", "checkFileNotFromApp", "nameFile", "(Ljava/lang/String;)Ljava/lang/Integer;", "checkHasFile", "checkHasImportantFilePDF", "fileFolderCustomerInLevelOne", "checkHasRequiredFile", "checkLocation", "checkPermission", "choiceImportantFolder", "closeDialog", "errorDupCMNDSGB", "reason", "idf1CanDefer", "loadFileAdapter", "numberUploadPerday", "number", "onContextItemSelected", "item", "Landroid/view/MenuItem;", "onCreate", "savedInstanceState", "Landroid/os/Bundle;", "onLocationChanged", "onProviderDisabled", "provider", "onProviderEnabled", "onRequestPermissionsResult", "requestCode", "permissions", "", "grantResults", "", "(I[Ljava/lang/String;[I)V", "onResume", "onStart", "onStatusChanged", "status", "extras", "onStop", "passCMNDSGB", "removeZipFileAndFolderLevelTwo", "resetAdapterFile", "setSelectedFolder", "file", "showDataDefer", "(Ljava/lang/Integer;Lntb/mafc/mobile/entity/Defer;)V", "showDialog", "showDialogOkCancel", "showListDocument", "listFile", "uploadDefer", "uploadFail", "error", "uploadFaile", "uploadFileZip", "path", "uploadNewAndHardQDEDocument", "isQDE", "uploadNewApp", "uploadSuccess", "uploadZip", "validateReason", "app_release"}, k=1, mv={1, 1, 11})
public final class DocumentActivity
extends AppCompatActivity
implements FileView,
LocationListener,
UploadInterface,
DeferView {
    private HashMap _$_findViewCache;
    private ConfigManager configManager;
    private String customerName;
    private Defer defer;
    private DeferModel deferModel;
    private DialogFragment dialogFragment;
    private FileManager fileManager;
    private FileModel fileModel;
    @Nullable
    private File folderSelected;
    private String folderzip;
    private FragmentListDocument fragmentListDocument;
    private String idCustomer;
    private boolean isDefer;
    private boolean isQDEHard;
    private boolean isUpload;
    private List<FileEntity> listFileDowndload;
    private LocaleManager localeManager;
    private Location location;
    private LocationManager locationManager;
    private String nameFolderLevelOne;
    private String nameFolderTwo;
    @Nullable
    private Integer numberFileUpload = 0;
    private final int requestNotification = 111;
    private Thread thread;
    private User user;
    private UserModel userModel;

    public static final /* synthetic */ boolean access$checkHasFile(DocumentActivity documentActivity) {
        return documentActivity.checkHasFile();
    }

    public static final /* synthetic */ boolean access$checkHasRequiredFile(DocumentActivity documentActivity) {
        return documentActivity.checkHasRequiredFile();
    }

    public static final /* synthetic */ void access$closeDialog(DocumentActivity documentActivity) {
        documentActivity.closeDialog();
    }

    @Nullable
    public static final /* synthetic */ ConfigManager access$getConfigManager$p(DocumentActivity documentActivity) {
        return documentActivity.configManager;
    }

    @Nullable
    public static final /* synthetic */ Defer access$getDefer$p(DocumentActivity documentActivity) {
        return documentActivity.defer;
    }

    @Nullable
    public static final /* synthetic */ DialogFragment access$getDialogFragment$p(DocumentActivity documentActivity) {
        return documentActivity.dialogFragment;
    }

    @Nullable
    public static final /* synthetic */ FileModel access$getFileModel$p(DocumentActivity documentActivity) {
        return documentActivity.fileModel;
    }

    @Nullable
    public static final /* synthetic */ String access$getIdCustomer$p(DocumentActivity documentActivity) {
        return documentActivity.idCustomer;
    }

    @Nullable
    public static final /* synthetic */ LocaleManager access$getLocaleManager$p(DocumentActivity documentActivity) {
        return documentActivity.localeManager;
    }

    @Nullable
    public static final /* synthetic */ Location access$getLocation$p(DocumentActivity documentActivity) {
        return documentActivity.location;
    }

    @Nullable
    public static final /* synthetic */ Thread access$getThread$p(DocumentActivity documentActivity) {
        return documentActivity.thread;
    }

    @Nullable
    public static final /* synthetic */ User access$getUser$p(DocumentActivity documentActivity) {
        return documentActivity.user;
    }

    public static final /* synthetic */ boolean access$isQDEHard$p(DocumentActivity documentActivity) {
        return documentActivity.isQDEHard;
    }

    public static final /* synthetic */ void access$setConfigManager$p(DocumentActivity documentActivity, @Nullable ConfigManager configManager) {
        documentActivity.configManager = configManager;
    }

    public static final /* synthetic */ void access$setDefer$p(DocumentActivity documentActivity, @Nullable Defer defer) {
        documentActivity.defer = defer;
    }

    public static final /* synthetic */ void access$setDialogFragment$p(DocumentActivity documentActivity, @Nullable DialogFragment dialogFragment) {
        documentActivity.dialogFragment = dialogFragment;
    }

    public static final /* synthetic */ void access$setFileModel$p(DocumentActivity documentActivity, @Nullable FileModel fileModel) {
        documentActivity.fileModel = fileModel;
    }

    public static final /* synthetic */ void access$setIdCustomer$p(DocumentActivity documentActivity, @Nullable String string2) {
        documentActivity.idCustomer = string2;
    }

    public static final /* synthetic */ void access$setLocaleManager$p(DocumentActivity documentActivity, @Nullable LocaleManager localeManager) {
        documentActivity.localeManager = localeManager;
    }

    public static final /* synthetic */ void access$setLocation$p(DocumentActivity documentActivity, @Nullable Location location) {
        documentActivity.location = location;
    }

    public static final /* synthetic */ void access$setQDEHard$p(DocumentActivity documentActivity, boolean bl) {
        documentActivity.isQDEHard = bl;
    }

    public static final /* synthetic */ void access$setThread$p(DocumentActivity documentActivity, @Nullable Thread thread2) {
        documentActivity.thread = thread2;
    }

    public static final /* synthetic */ void access$setUser$p(DocumentActivity documentActivity, @Nullable User user) {
        documentActivity.user = user;
    }

    public static final /* synthetic */ void access$uploadNewAndHardQDEDocument(DocumentActivity documentActivity, boolean bl) {
        documentActivity.uploadNewAndHardQDEDocument(bl);
    }

    public static final /* synthetic */ boolean access$validateReason(DocumentActivity documentActivity) {
        return documentActivity.validateReason();
    }

    private final Integer checkFileNotFromApp(String object) {
        File[] arrfile = this.fileManager;
        object = arrfile != null ? arrfile.getChildFileInFolder((String)object) : null;
        if (object == null) {
            Intrinsics.throwNpe();
        }
        int n = ((File[])object).length;
        int n2 = 0;
        for (int i = 0; i < n; ++i) {
            int n3;
            block6 : {
                arrfile = object[i].listFiles();
                Intrinsics.checkExpressionValueIsNotNull((Object)arrfile, (String)"childFile");
                int n4 = arrfile.length == 0 ? 1 : 0;
                n3 = n2;
                if (!(n4 ^ true)) break block6;
                int n5 = arrfile.length;
                for (n3 = 0; n3 < n5; ++n3) {
                    block8 : {
                        block7 : {
                            ExifInterface exifInterface = new ExifInterface(arrfile[n3].toString());
                            if (Intrinsics.areEqual((Object)exifInterface.getAttribute("ExposureTime"), (Object)this.getString(2131624010)) ^ true) break block7;
                            n4 = n2;
                            if (!(Intrinsics.areEqual((Object)exifInterface.getAttribute("Model"), (Object)this.getString(2131624025)) ^ true)) break block8;
                        }
                        n4 = n2 + 1;
                    }
                    n2 = n4;
                }
                n3 = n2;
            }
            n2 = n3;
        }
        return n2;
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Lifted jumps to return sites
     */
    private final boolean checkHasFile() {
        var6_1 = this.fileManager;
        var5_2 = false;
        if (var6_1 == null) ** GOTO lbl-1000
        var7_3 = this.nameFolderTwo;
        if (var7_3 == null) {
            Intrinsics.throwNpe();
        }
        if ((var6_1 = var6_1.getChildFileInFolder((String)var7_3)) != null) {
            var4_4 = var6_1.length;
            var2_5 = 0;
            var1_6 = 0;
            do {
                var3_7 = var1_6++;
                if (var2_5 < var4_4) {
                    var7_3 = var6_1[var2_5];
                    ++var2_5;
                    continue;
                }
                break;
            } while (true);
        } else lbl-1000: // 2 sources:
        {
            var3_7 = 0;
        }
        if (var3_7 <= 0) return var5_2;
        return true;
    }

    private final boolean checkHasImportantFilePDF(File object) {
        boolean bl;
        Collection collection = null;
        object = object != null ? object.listFiles() : null;
        boolean bl2 = bl = false;
        if (object != null) {
            List<FileEntity> list = this.listFileDowndload;
            if (list != null) {
                list = list;
                collection = new ArrayList();
                for (Object object2 : list) {
                    if (!Intrinsics.areEqual((Object)((FileEntity)object2).is_required(), (Object)true)) continue;
                    collection.add(object2);
                }
            }
            int n = collection != null ? collection.size() : 0;
            int n2 = ((Object)object).length;
            int n3 = 0;
            for (int i = 0; i < n2; ++i) {
                list = object[i];
                int n4 = n3;
                if (collection != null) {
                    Iterator iterator2 = ((Iterable)collection).iterator();
                    do {
                        n4 = n3++;
                        if (!iterator2.hasNext()) break;
                        FileEntity fileEntity = (FileEntity)iterator2.next();
                        Intrinsics.checkExpressionValueIsNotNull((Object)list, (String)"filePDF");
                        String string2 = list.getName();
                        StringBuilder stringBuilder = new StringBuilder();
                        stringBuilder.append(fileEntity.getShort_document_name());
                        stringBuilder.append(".pdf");
                        if (!Intrinsics.areEqual((Object)string2, (Object)stringBuilder.toString())) continue;
                    } while (true);
                }
                n3 = n4;
            }
            bl2 = bl;
            if (n3 >= n) {
                bl2 = true;
            }
        }
        return bl2;
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    private final boolean checkHasRequiredFile() {
        File[] arrfile = this.fileManager;
        if (arrfile == null) return true;
        File[] arrfile2 = this.nameFolderTwo;
        if (arrfile2 == null) {
            Intrinsics.throwNpe();
        }
        if ((arrfile = arrfile.getChildFileInFolder((String)arrfile2)) == null) return true;
        int n = arrfile.length;
        int n2 = 0;
        int n3 = 0;
        do {
            int n4 = n3;
            if (n2 >= n) return true;
            arrfile2 = arrfile[n2].listFiles();
            Intrinsics.checkExpressionValueIsNotNull((Object)arrfile2, (String)"it.listFiles()");
            boolean bl = arrfile2.length == 0;
            n4 = n3;
            if (bl) {
                n4 = n3 + 1;
            }
            ++n2;
            n3 = n4;
        } while (true);
    }

    @SuppressLint(value={"MissingPermission"})
    private final void checkLocation() {
        Object object = this.locationManager;
        Object var3_2 = null;
        Boolean bl = object != null ? Boolean.valueOf(object.isProviderEnabled("gps")) : null;
        object = this.locationManager;
        object = object != null ? Boolean.valueOf(object.isProviderEnabled("network")) : null;
        if (Intrinsics.areEqual((Object)bl, (Object)true)) {
            bl = this.locationManager;
            if (bl != null) {
                bl.requestLocationUpdates("gps", 0L, 0.0f, (LocationListener)this);
            }
            if (this.localeManager != null) {
                bl = this.locationManager;
                bl = bl != null ? bl.getLastKnownLocation("gps") : null;
                this.location = bl;
            }
        }
        if (Intrinsics.areEqual((Object)object, (Object)true) && this.location == null) {
            object = this.locationManager;
            if (object != null) {
                object.requestLocationUpdates("network", 0L, 0.0f, (LocationListener)this);
            }
            if (this.locationManager != null) {
                bl = this.locationManager;
                object = var3_2;
                if (bl != null) {
                    object = bl.getLastKnownLocation("network");
                }
                this.location = object;
            }
        }
    }

    private final void checkPermission() {
        if (ContextCompat.checkSelfPermission((Context)((Context)this), (String)"android.permission.ACCESS_FINE_LOCATION") != 0) {
            Activity activity = (Activity)this;
            int n = this.requestNotification;
            ActivityCompat.requestPermissions((Activity)activity, (String[])new String[]{"android.permission.ACCESS_FINE_LOCATION"}, (int)n);
            return;
        }
        this.checkLocation();
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    private final void closeDialog() {
        try {
            this.isUpload = false;
            if (this.dialogFragment != null) {
                DialogFragment dialogFragment = this.dialogFragment;
                if (dialogFragment != null) {
                    dialogFragment.dismissAllowingStateLoss();
                }
                this.dialogFragment = null;
            }
            return;
        }
        catch (Exception exception) {
            return;
        }
    }

    private final void loadFileAdapter(String object) {
        FileManager fileManager = this.fileManager;
        object = fileManager != null ? fileManager.getChildFileInFolder((String)object) : null;
        RecyclerView recyclerView = (RecyclerView)this._$_findCachedViewById(R.id.recylerDocUser);
        Intrinsics.checkExpressionValueIsNotNull((Object)recyclerView, (String)"recylerDocUser");
        fileManager = (Context)this;
        recyclerView.setLayoutManager((RecyclerView.LayoutManager)new LinearLayoutManager((Context)fileManager));
        recyclerView = (RecyclerView)this._$_findCachedViewById(R.id.recylerDocUser);
        Intrinsics.checkExpressionValueIsNotNull((Object)recyclerView, (String)"recylerDocUser");
        recyclerView.setAdapter((RecyclerView.Adapter)new AdapterDetailFileCustomer((Context)fileManager, (File[])object, this.nameFolderTwo));
    }

    private final void removeZipFileAndFolderLevelTwo() {
        File file = new File(this.folderzip);
        if (file.exists()) {
            file.delete();
        }
    }

    private final void showDialog(String string2) {
        AlertDialog.Builder builder2 = new AlertDialog.Builder((Context)this);
        AlertDialog.Builder builder3 = builder2.setMessage((CharSequence)string2);
        string2 = this.localeManager;
        Object var2_4 = null;
        string2 = string2 != null ? string2.getNotification() : null;
        builder3.setTitle((CharSequence)string2);
        builder3 = this.localeManager;
        string2 = var2_4;
        if (builder3 != null) {
            string2 = builder3.getOk();
        }
        builder2.setPositiveButton((CharSequence)string2, (DialogInterface.OnClickListener)showDialog.INSTANCE);
        builder2.create().show();
    }

    private final void showDialogOkCancel(String string2) {
        Ref.ObjectRef objectRef = new Ref.ObjectRef();
        Object var2_3 = null;
        objectRef.element = null;
        AlertDialog.Builder builder2 = new AlertDialog.Builder((Context)this);
        AlertDialog.Builder builder3 = builder2.setMessage((CharSequence)string2);
        string2 = this.localeManager;
        string2 = string2 != null ? string2.getNotification() : null;
        builder3.setTitle((CharSequence)string2);
        builder3 = this.localeManager;
        string2 = var2_3;
        if (builder3 != null) {
            string2 = builder3.getOk();
        }
        builder2.setPositiveButton((CharSequence)string2, new DialogInterface.OnClickListener(this, objectRef){
            final /* synthetic */ Ref.ObjectRef $dialog;
            final /* synthetic */ DocumentActivity this$0;
            {
                this.this$0 = documentActivity;
                this.$dialog = objectRef;
            }

            public final void onClick(DialogInterface dialogInterface, int n) {
                dialogInterface = (AlertDialog)this.$dialog.element;
                if (dialogInterface != null) {
                    dialogInterface.dismiss();
                }
                this.this$0.finish();
            }
        });
        objectRef.element = builder2.create();
        ((AlertDialog)objectRef.element).show();
    }

    private final void uploadDefer() {
        if (!this.isUpload) {
            this.isUpload = true;
            if (this.location != null) {
                this.thread = new Thread(new Runnable(this){
                    final /* synthetic */ DocumentActivity this$0;
                    {
                        this.this$0 = documentActivity;
                    }

                    public final void run() {
                        if (DocumentActivity.access$validateReason(this.this$0)) {
                            if (DocumentActivity.access$checkHasFile(this.this$0)) {
                                if (DocumentActivity.access$checkHasRequiredFile(this.this$0)) {
                                    DocumentActivity.access$uploadNewAndHardQDEDocument(this.this$0, true);
                                    DocumentActivity.access$setQDEHard$p(this.this$0, true);
                                    return;
                                }
                                this.this$0.runOnUiThread(new Runnable(this){
                                    final /* synthetic */ uploadDefer this$0;
                                    {
                                        this.this$0 = var1_1;
                                    }

                                    public final void run() {
                                        DocumentActivity.access$closeDialog(this.this$0.this$0);
                                        Context context = this.this$0.this$0.getApplicationContext();
                                        Object object = DocumentActivity.access$getLocaleManager$p(this.this$0.this$0);
                                        object = object != null ? object.getErroremptydocument() : null;
                                        Toast.makeText((Context)context, (CharSequence)((CharSequence)object), (int)0).show();
                                    }
                                });
                                return;
                            }
                            FileModel fileModel = DocumentActivity.access$getFileModel$p(this.this$0);
                            if (fileModel != null) {
                                UploadInterface uploadInterface = this.this$0;
                                Object object = DocumentActivity.access$getUser$p(this.this$0);
                                Object object2 = null;
                                object = object != null ? object.getFullname() : null;
                                Object object3 = DocumentActivity.access$getUser$p(this.this$0);
                                object3 = object3 != null ? object3.getChannel() : null;
                                String string2 = DocumentActivity.access$getIdCustomer$p(this.this$0);
                                Object object4 = DocumentActivity.access$getDefer$p(this.this$0);
                                object4 = object4 != null ? object4.getCustomer_name() : null;
                                Object object5 = DocumentActivity.access$getLocation$p(this.this$0);
                                object5 = object5 != null ? Double.valueOf(object5.getLatitude()) : null;
                                String string3 = String.valueOf(object5);
                                object5 = DocumentActivity.access$getLocation$p(this.this$0);
                                object5 = object5 != null ? Double.valueOf(object5.getLongitude()) : null;
                                String string4 = String.valueOf(object5);
                                object5 = (EditText)this.this$0._$_findCachedViewById(R.id.edReason);
                                Intrinsics.checkExpressionValueIsNotNull((Object)object5, (String)"edReason");
                                String string5 = object5.getText().toString();
                                Defer defer = DocumentActivity.access$getDefer$p(this.this$0);
                                object5 = object2;
                                if (defer != null) {
                                    object5 = defer.getIdf1();
                                }
                                if ((object2 = DocumentActivity.access$getDefer$p(this.this$0)) == null || (object2 = object2.getManagement_id()) == null) {
                                    object2 = "";
                                }
                                fileModel.uploadSoftQDE(uploadInterface, (String)object, (String)object3, string2, (String)object4, string3, string4, string5, (String)object5, String.valueOf(object2));
                            }
                            DocumentActivity.access$setQDEHard$p(this.this$0, false);
                            return;
                        }
                        DocumentActivity.access$closeDialog(this.this$0);
                    }
                });
                Thread thread2 = this.thread;
                if (thread2 != null) {
                    thread2.start();
                    return;
                }
            } else {
                this.closeDialog();
                Context context = this.getApplicationContext();
                Object object = this.localeManager;
                object = object != null ? object.getErrorlocation() : null;
                Toast.makeText((Context)context, (CharSequence)((CharSequence)object), (int)0).show();
            }
        }
    }

    private final void uploadFileZip(String object) {
        Object object2 = new File((String)object);
        object = this.getSharedPreferences("userinfo", 0);
        RequestBody requestBody = RequestBody.create((MediaType)MediaType.parse((String)"multipart/form-data"), (File)object2);
        requestBody = MultipartBody.Part.createFormData((String)"upFile", (String)object2.getName(), (RequestBody)requestBody);
        RequestBody requestBody2 = RequestBody.create((MediaType)MediaType.parse((String)"multipart/form-data"), (String)object.getString("username", ""));
        RequestBody requestBody3 = RequestBody.create((MediaType)MediaType.parse((String)"multipart/form-data"), (String)object.getString("channel", ""));
        object = MediaType.parse((String)"multipart/form-data");
        object2 = this.idCustomer;
        if (object2 == null) {
            Intrinsics.throwNpe();
        }
        RequestBody requestBody4 = RequestBody.create((MediaType)object, (String)object2);
        RequestBody requestBody5 = RequestBody.create((MediaType)MediaType.parse((String)"multipart/form-data"), (String)String.valueOf(this.customerName));
        MediaType mediaType = MediaType.parse((String)"multipart/form-data");
        object = this.location;
        object2 = null;
        object = object != null ? Double.valueOf(object.getLatitude()) : null;
        mediaType = RequestBody.create((MediaType)mediaType, (String)String.valueOf(object));
        MediaType mediaType2 = MediaType.parse((String)"multipart/form-data");
        object = this.location;
        object = object != null ? Double.valueOf(object.getLongitude()) : null;
        mediaType2 = RequestBody.create((MediaType)mediaType2, (String)String.valueOf(object));
        if (this.isDefer) {
            Object object3;
            RequestBody requestBody6 = RequestBody.create((MediaType)MediaType.parse((String)"multipart/form-data"), (String)"HOSOBOSUNG");
            object = MediaType.parse((String)"multipart/form-data");
            EditText editText = (EditText)this._$_findCachedViewById(R.id.edReason);
            Intrinsics.checkExpressionValueIsNotNull((Object)editText, (String)"edReason");
            editText = RequestBody.create((MediaType)object, (String)editText.getText().toString());
            MediaType mediaType3 = MediaType.parse((String)"multipart/form-data");
            object = this.defer;
            object = object != null ? object.getIdf1() : null;
            mediaType3 = RequestBody.create((MediaType)mediaType3, (String)String.valueOf(object));
            object = this.defer;
            object = object != null ? object.getIdf1() : null;
            if (object != null && object.hashCode() == 1444 && object.equals("-1")) {
                object3 = MediaType.parse((String)"multipart/form-data");
                Defer defer = this.defer;
                object = object2;
                if (defer != null) {
                    object = defer.getManagement_id();
                }
                object = RequestBody.create((MediaType)object3, (String)String.valueOf(object));
                Intrinsics.checkExpressionValueIsNotNull((Object)object, (String)"RequestBody.create(Media\u2026${defer?.management_id}\")");
            } else {
                object = RequestBody.create((MediaType)MediaType.parse((String)"multipart/form-data"), (String)"");
                Intrinsics.checkExpressionValueIsNotNull((Object)object, (String)"RequestBody.create(MediaType.parse(dataType),\"\")");
            }
            object2 = this.fileModel;
            if (object2 != null) {
                object3 = this;
                Intrinsics.checkExpressionValueIsNotNull((Object)requestBody, (String)"body");
                Intrinsics.checkExpressionValueIsNotNull((Object)requestBody6, (String)"upType");
                object2.uploadHardQDE((UploadInterface)object3, (MultipartBody.Part)requestBody, requestBody2, requestBody3, requestBody4, requestBody5, (RequestBody)mediaType, (RequestBody)mediaType2, requestBody6, (RequestBody)editText, (RequestBody)mediaType3, (RequestBody)object);
                return;
            }
        } else {
            object = RequestBody.create((MediaType)MediaType.parse((String)"multipart/form-data"), (String)"HOSOMOI");
            object2 = this.fileModel;
            if (object2 != null) {
                UploadInterface uploadInterface = this;
                Intrinsics.checkExpressionValueIsNotNull((Object)requestBody, (String)"body");
                Intrinsics.checkExpressionValueIsNotNull((Object)requestBody2, (String)"ccCode");
                Intrinsics.checkExpressionValueIsNotNull((Object)requestBody3, (String)"ccChannel");
                Intrinsics.checkExpressionValueIsNotNull((Object)requestBody4, (String)"cusid");
                Intrinsics.checkExpressionValueIsNotNull((Object)requestBody5, (String)"cusname");
                Intrinsics.checkExpressionValueIsNotNull((Object)mediaType, (String)"latitude");
                Intrinsics.checkExpressionValueIsNotNull((Object)mediaType2, (String)"longitude");
                Intrinsics.checkExpressionValueIsNotNull((Object)object, (String)"upType");
                object2.uploadFileZip(uploadInterface, (MultipartBody.Part)requestBody, requestBody2, requestBody3, requestBody4, requestBody5, (RequestBody)mediaType, (RequestBody)mediaType2, (RequestBody)object);
            }
        }
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    private final void uploadNewAndHardQDEDocument(boolean var1_1) {
        var5_2 = new SimpleDateFormat("yyyyMMdd", Locale.ENGLISH);
        var6_5 = Calendar.getInstance();
        Intrinsics.checkExpressionValueIsNotNull((Object)var6_5, (String)"Calendar.getInstance()");
        var6_5 = var5_2.format(var6_5.getTime());
        var4_10 = this.isDefer;
        var11_11 = null;
        var10_12 = null;
        var9_13 = null;
        if (var4_10) {
            var7_14 = new StringBuilder();
            var7_14.append("DEFER_");
            var5_2 = this.user;
            var5_2 = var5_2 != null ? var5_2.getFullname() : null;
            var7_14.append((String)var5_2);
            var7_14.append('_');
            var7_14.append((String)var6_5);
            var7_14.append('_');
            var7_14.append(this.numberFileUpload);
            this.nameFolderLevelOne = var7_14.toString();
        } else {
            var7_14 = new StringBuilder();
            var5_2 = this.user;
            var5_2 = var5_2 != null ? var5_2.getFullname() : null;
            var7_14.append((String)var5_2);
            var7_14.append('_');
            var7_14.append((String)var6_5);
            var7_14.append('_');
            var7_14.append(this.numberFileUpload);
            this.nameFolderLevelOne = var7_14.toString();
        }
        var5_2 = this.fileManager;
        var5_2 = var5_2 != null ? var5_2.CreateFile(this.nameFolderLevelOne) : null;
        var6_5 = var5_2 != null ? var5_2.getAbsoluteFile() : null;
        try {
            var8_16 = this.fileManager;
            if (var8_16 != null) {
                var12_17 = new StringBuilder();
                var12_17.append(this.nameFolderLevelOne);
                var12_17.append('/');
                var12_17.append(this.customerName);
                var12_17.append('_');
                var12_17.append(this.idCustomer);
                var12_17.append('_');
                var7_14 = this.userModel;
                var7_14 = var7_14 != null && (var7_14 = var7_14.getInfoUser()) != null ? var7_14.getChannel() : null;
                var12_17.append((String)var7_14);
                var5_2 = var7_14 = var8_16.CreateFile(var12_17.toString());
            } else {
                var5_2 = null;
            }
        }
        catch (Exception var7_15) {}
        var7_14 = new StringBuilder();
        var7_14.append(var6_5);
        var7_14.append(".zip");
        this.folderzip = var7_14.toString();
        var8_16 = this.fileManager;
        if (var8_16 != null) {
            var7_14 = this.nameFolderTwo;
            if (var7_14 == null) {
                var7_14 = "";
            }
            var7_14 = var8_16.getChildFileInFolder((String)var7_14);
        } else {
            var7_14 = null;
        }
        if (var7_14 != null) {
            var12_17 = new Ref.ObjectRef();
            var12_17.element = "";
            var3_18 = ((File[])var7_14).length;
            var4_10 = true;
        } else {
            this.closeDialog();
            Toast.makeText((Context)this.getApplicationContext(), (CharSequence)"Kh\u00f4ng t\u00ecm th\u1ea5y ch\u1ee9ng t\u1eeb \u0111\u1ec3 convert", (int)0).show();
            return;
        }
        for (var2_19 = 0; var2_19 < var3_18; ++var2_19) {
            var13_20 = var7_14[var2_19];
            var14_21 = this.dialogFragment;
            if (var14_21 != null) {
                var15_22 = new File[]();
                var8_16 = this.localeManager;
                var8_16 = var8_16 != null ? var8_16.getConvertpdf() : null;
                var15_22.append((String)var8_16);
                var15_22.append(" : ");
                var15_22.append(var13_20.getName());
                var14_21.changeText(var15_22.toString());
            }
            if ((var14_21 = this.fileManager) != null) {
                var15_22 = var13_20.listFiles();
                var8_16 = var5_2 != null ? var5_2.getAbsolutePath() : null;
                var8_16 = String.valueOf(var8_16);
                var16_23 = new StringBuilder();
                var16_23.append(var13_20.getName());
                var16_23.append(".pdf");
                var4_10 = var14_21.createMultiFilePdfiText(var15_22, (String)var8_16, var16_23.toString());
            } else {
                var4_10 = false;
            }
            if (var4_10) continue;
            var7_14 = var13_20.getName();
            Intrinsics.checkExpressionValueIsNotNull((Object)var7_14, (String)"item.name");
            var12_17.element = var7_14;
            if (var4_10) {
                break;
            }
            ** GOTO lbl164
        }
        if (!var1_1) {
            var8_16 = this.dialogFragment;
            if (var8_16 != null) {
                var7_14 = this.localeManager;
                var7_14 = var7_14 != null ? var7_14.getCheckingdocumentimportantpdf() : null;
                var8_16.changeText((String)var7_14);
            }
            if (this.checkHasImportantFilePDF((File)var5_2)) {
                var8_16 = this.dialogFragment;
                if (var8_16 != null) {
                    var7_14 = this.localeManager;
                    var7_14 = var7_14 != null ? var7_14.getZipfile() : null;
                    var8_16.changeText((String)var7_14);
                }
                var7_14 = this.fileManager;
                if (var7_14 != null) {
                    if (var6_5 == null) {
                        Intrinsics.throwNpe();
                    }
                    var6_5 = var6_5.getAbsolutePath();
                    Intrinsics.checkExpressionValueIsNotNull((Object)var6_5, (String)"fileFolderRootZip!!.absolutePath");
                    var8_16 = this.folderzip;
                    if (var8_16 == null) {
                        Intrinsics.throwNpe();
                    }
                    var7_14.zipFolder((String)var6_5, (String)var8_16);
                }
                if ((var7_14 = this.dialogFragment) != null) {
                    var6_5 = this.localeManager;
                    var6_5 = var6_5 != null ? var6_5.getUploading() : null;
                    var7_14.changeText((String)var6_5);
                }
                if ((var6_5 = this.folderzip) == null) {
                    Intrinsics.throwNpe();
                }
                this.uploadFileZip((String)var6_5);
                return;
            }
            var6_5 = new StringBuilder();
            var6_5.append(this.getFilesDir());
            var6_5.append('/');
            var6_5.append(this.nameFolderLevelOne);
            if (new File(var6_5.toString()).exists() && var5_2 != null) {
                FilesKt.deleteRecursively((File)var5_2);
            }
        } else {
            var8_16 = this.dialogFragment;
            if (var8_16 != null) {
                var7_14 = this.localeManager;
                var7_14 = var7_14 != null ? var7_14.getZipfile() : null;
                var8_16.changeText((String)var7_14);
            }
            var7_14 = this.fileManager;
            if (var7_14 != null) {
                if (var6_5 == null) {
                    Intrinsics.throwNpe();
                }
                var6_5 = var6_5.getAbsolutePath();
                Intrinsics.checkExpressionValueIsNotNull((Object)var6_5, (String)"fileFolderRootZip!!.absolutePath");
                var8_16 = this.folderzip;
                if (var8_16 == null) {
                    Intrinsics.throwNpe();
                }
                var7_14.zipFolder((String)var6_5, (String)var8_16);
            }
            if ((var7_14 = this.dialogFragment) != null) {
                var6_5 = this.localeManager;
                var6_5 = var6_5 != null ? var6_5.getUploading() : null;
                var7_14.changeText((String)var6_5);
            }
            if ((var6_5 = this.folderzip) == null) {
                Intrinsics.throwNpe();
            }
            this.uploadFileZip((String)var6_5);
            return;
lbl164: // 1 sources:
            this.closeDialog();
            var6_5 = new StringBuilder();
            var6_5.append(this.getFilesDir());
            var6_5.append('/');
            var6_5.append(this.nameFolderLevelOne);
            if (new File(var6_5.toString()).exists() && var5_2 != null) {
                FilesKt.deleteRecursively((File)var5_2);
            }
            this.runOnUiThread(new Runnable(this, (Ref.ObjectRef)var12_17){
                final /* synthetic */ Ref.ObjectRef $filePdfCreateError;
                final /* synthetic */ DocumentActivity this$0;
                {
                    this.this$0 = documentActivity;
                    this.$filePdfCreateError = objectRef;
                }

                public final void run() {
                    Context context = this.this$0.getApplicationContext();
                    StringBuilder stringBuilder = new StringBuilder();
                    stringBuilder.append(MainApplication.Companion.getLocale().getErrorcreatepdf());
                    stringBuilder.append(": ");
                    stringBuilder.append((String)this.$filePdfCreateError.element);
                    stringBuilder.append(" . ");
                    stringBuilder.append(MainApplication.Companion.getLocale().getPleasecheckandtryagain());
                    Toast.makeText((Context)context, (CharSequence)stringBuilder.toString(), (int)0).show();
                }
            });
            return;
            catch (Exception var6_6) {}
            var7_14 = this.localeManager;
            var6_7 = var9_13;
            if (var7_14 != null) {
                var6_7 = var7_14.getErrorzip();
            }
            this.uploadFaile((String)var6_7);
            var6_7 = new StringBuilder();
            var6_7.append(this.getFilesDir());
            var6_7.append('/');
            var6_7.append(this.nameFolderLevelOne);
            if (new File(var6_7.toString()).exists() == false) return;
            if (var5_2 == null) return;
            FilesKt.deleteRecursively((File)var5_2);
            return;
            catch (Exception var5_4) {}
        }
        var6_5 = this.localeManager;
        var5_2 = var11_11;
        if (var6_5 != null) {
            var5_2 = var6_5.getErrorconvertimportantpdf();
        }
        this.uploadFaile((String)var5_2);
        return;
        catch (Exception var6_8) {}
        var7_14 = this.localeManager;
        var6_9 = var10_12;
        if (var7_14 != null) {
            var6_9 = var7_14.getErrorzip();
        }
        this.uploadFaile((String)var6_9);
        try {
            var6_9 = new StringBuilder();
            var6_9.append(this.getFilesDir());
            var6_9.append('/');
            var6_9.append(this.nameFolderLevelOne);
            if (new File(var6_9.toString()).exists() == false) return;
            if (var5_2 == null) return;
            FilesKt.deleteRecursively((File)var5_2);
            return;
        }
        catch (Exception var5_3) {
            return;
        }
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    private final void uploadNewApp() {
        if (this.isUpload) return;
        this.isUpload = true;
        Location location = this.location;
        Context context = null;
        Object object = null;
        if (location != null) {
            if (this.checkHasRequiredFile()) {
                this.thread = new Thread(new Runnable(this){
                    final /* synthetic */ DocumentActivity this$0;
                    {
                        this.this$0 = documentActivity;
                    }

                    public final void run() {
                        DocumentActivity.access$uploadNewAndHardQDEDocument(this.this$0, false);
                        DocumentActivity.access$setQDEHard$p(this.this$0, false);
                    }
                });
                object = this.thread;
                if (object == null) return;
                object.start();
                return;
            }
            this.closeDialog();
            context = this.getApplicationContext();
            location = this.localeManager;
            if (location != null) {
                object = location.getErroremptydocument();
            }
            Toast.makeText((Context)context, (CharSequence)((CharSequence)object), (int)0).show();
            return;
        }
        this.closeDialog();
        location = this.getApplicationContext();
        LocaleManager localeManager = this.localeManager;
        object = context;
        if (localeManager != null) {
            object = localeManager.getErrorlocation();
        }
        Toast.makeText((Context)location, (CharSequence)((CharSequence)object), (int)0).show();
    }

    private final boolean validateReason() {
        Object object = (EditText)this._$_findCachedViewById(R.id.edReason);
        Intrinsics.checkExpressionValueIsNotNull((Object)object, (String)"edReason");
        object = object.getText().toString();
        if (object == null) {
            throw new TypeCastException("null cannot be cast to non-null type kotlin.CharSequence");
        }
        if ((object = StringsKt.trim((CharSequence)((CharSequence)object)).toString()).hashCode() == 0 && object.equals("")) {
            this.runOnUiThread(new Runnable(this){
                final /* synthetic */ DocumentActivity this$0;
                {
                    this.this$0 = documentActivity;
                }

                public final void run() {
                    Context context = this.this$0.getApplicationContext();
                    Object object = DocumentActivity.access$getLocaleManager$p(this.this$0);
                    object = object != null ? object.getEmptyreason() : null;
                    Toast.makeText((Context)context, (CharSequence)((CharSequence)object), (int)0).show();
                    object = DocumentActivity.access$getThread$p(this.this$0);
                    if (object != null) {
                        object.interrupt();
                    }
                    DocumentActivity.access$closeDialog(this.this$0);
                }
            });
            return false;
        }
        return true;
    }

    public void _$_clearFindViewByIdCache() {
        if (this._$_findViewCache != null) {
            this._$_findViewCache.clear();
        }
    }

    public View _$_findCachedViewById(int n) {
        View view;
        if (this._$_findViewCache == null) {
            this._$_findViewCache = new HashMap();
        }
        View view2 = view = (View)this._$_findViewCache.get(n);
        if (view == null) {
            view2 = this.findViewById(n);
            this._$_findViewCache.put(n, view2);
        }
        return view2;
    }

    public final void back() {
        this.finish();
    }

    @Override
    public void checkDeferCMNDSGBSuccess() {
        this.uploadDefer();
    }

    @Override
    public void checkDeferFail(@Nullable String string2) {
        this.closeDialog();
        Toast.makeText((Context)this.getApplicationContext(), (CharSequence)string2, (int)0).show();
    }

    public final void choiceImportantFolder() {
        this.fragmentListDocument = new FragmentListDocument();
        Bundle bundle = new Bundle();
        Object object = this.user;
        object = object != null ? object.getProduct() : null;
        bundle.putString("group_name", (String)object);
        bundle.putString("foldername", this.nameFolderTwo);
        bundle.putBoolean("isQDE", this.isDefer);
        object = this.fragmentListDocument;
        if (object != null) {
            object.setArguments(bundle);
        }
        this.getSupportFragmentManager().beginTransaction().addToBackStack("documentactivity").replace(2131296367, (Fragment)this.fragmentListDocument).commit();
    }

    @Override
    public void errorDupCMNDSGB(@Nullable String string2) {
        this.closeDialog();
        this.showDialog(string2);
    }

    @Nullable
    public final File getFolderSelected() {
        return this.folderSelected;
    }

    @Nullable
    public final Integer getNumberFileUpload() {
        return this.numberFileUpload;
    }

    @Override
    public void idf1CanDefer() {
        this.uploadDefer();
    }

    public final boolean isDefer() {
        return this.isDefer;
    }

    @Override
    public void numberUploadPerday(@Nullable Integer object) {
        Object var2_2 = null;
        object = object != null ? Integer.valueOf(object.intValue() + 1) : null;
        this.numberFileUpload = object;
        if (this.isDefer) {
            object = this.defer;
            object = object != null ? object.getIdf1() : null;
            if (object != null && object.hashCode() == 1444 && object.equals("-1")) {
                object = this.deferModel;
                if (object != null) {
                    object.checkDeferByCMNDSGB(this, this.idCustomer);
                    return;
                }
            } else {
                DeferModel deferModel = this.deferModel;
                if (deferModel != null) {
                    DeferView deferView = this;
                    Defer defer = this.defer;
                    object = var2_2;
                    if (defer != null) {
                        object = defer.getIdf1();
                    }
                    deferModel.checkDeferExpried(deferView, (String)object);
                    return;
                }
            }
        } else {
            object = this.deferModel;
            if (object != null) {
                object.checkDupCMNDSGB(this, this.idCustomer);
            }
        }
    }

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Lifted jumps to return sites
     */
    public boolean onContextItemSelected(@Nullable MenuItem var1_1) {
        block14 : {
            block12 : {
                block13 : {
                    block11 : {
                        if (this.folderSelected == null) return true;
                        var1_1 = this.folderSelected;
                        var3_2 = null;
                        var1_1 = var1_1 != null ? Boolean.valueOf(var1_1.exists()) : null;
                        if (var1_1 == null) {
                            Intrinsics.throwNpe();
                        }
                        if (var1_1.booleanValue() == false) return true;
                        if (this.listFileDowndload == null) break block11;
                        var1_1 = this.listFileDowndload;
                        if (var1_1 == null) {
                            Intrinsics.throwNpe();
                        }
                        if (var1_1.size() <= 0) break block11;
                        var4_3 = this.listFileDowndload;
                        var1_1 = var3_2;
                        if (var4_3 == null) break block12;
                        var1_1 = (Iterable)var4_3;
                        var3_2 = new ArrayList<E>();
                        var4_3 = var1_1.iterator();
                        break block13;
                    }
                    if ((var1_1 = this.folderSelected) != null) {
                        FilesKt.deleteRecursively((File)var1_1);
                    }
                    break block14;
                }
                while (var4_3.hasNext()) {
                    var5_5 = var4_3.next();
                    var1_1 = (FileEntity)var5_5;
                    if (!Intrinsics.areEqual((Object)var1_1.is_required(), (Object)true)) ** GOTO lbl-1000
                    var6_6 = var1_1.getShort_document_name();
                    var1_1 = this.folderSelected;
                    var1_1 = var1_1 != null ? var1_1.getName() : null;
                    if (Intrinsics.areEqual((Object)var6_6, (Object)var1_1)) {
                        var2_4 = true;
                    } else lbl-1000: // 2 sources:
                    {
                        var2_4 = false;
                    }
                    if (!var2_4) continue;
                    var3_2.add(var5_5);
                }
                var1_1 = ((List)var3_2).size();
            }
            if (var1_1 == null) {
                Intrinsics.throwNpe();
            }
            if (var1_1.intValue() > 0) {
                Toast.makeText((Context)this.getApplicationContext(), (CharSequence)MainApplication.Companion.getLocale().getErrordeletefilerequired(), (int)0).show();
            } else {
                var1_1 = this.folderSelected;
                if (var1_1 != null) {
                    FilesKt.deleteRecursively((File)var1_1);
                }
            }
        }
        var1_1 = this.nameFolderTwo;
        if (var1_1 == null) {
            Intrinsics.throwNpe();
        }
        this.loadFileAdapter((String)var1_1);
        return true;
    }

    protected void onCreate(@Nullable Bundle object) {
        super.onCreate((Bundle)object);
        this.setContentView(2131427400);
        this.fileManager = new FileManager((Context)this);
        this.fileModel = new FileModel();
        this.userModel = new UserModel();
        this.configManager = new ConfigManager();
        this.localeManager = MainApplication.Companion.getLocale();
        this.deferModel = new DeferModel();
        this.nameFolderTwo = this.getIntent().getStringExtra("nameFolderTwo");
        this.idCustomer = this.getIntent().getStringExtra("idcustomer");
        this.defer = (Defer)this.getIntent().getParcelableExtra("defer");
        this.customerName = this.getIntent().getStringExtra("customername");
        this.isDefer = this.getIntent().getBooleanExtra("isdefer", false);
        object = this.getIntent().getStringExtra("title");
        this.locationManager = (LocationManager)this.getSystemService("location");
        Object object2 = (TextView)this._$_findCachedViewById(R.id.txtNameFile);
        Intrinsics.checkExpressionValueIsNotNull((Object)object2, (String)"txtNameFile");
        object2.setText((CharSequence)object);
        if (this.isDefer) {
            object = (ProgressBar)this._$_findCachedViewById(R.id.progressBar);
            Intrinsics.checkExpressionValueIsNotNull((Object)object, (String)"progressBar");
            object.setVisibility(8);
        } else {
            object = (EditText)this._$_findCachedViewById(R.id.edReason);
            if (object != null) {
                object.setVisibility(8);
            }
            if ((object2 = this.fileModel) != null) {
                object = this.user;
                object = object != null ? object.getProduct() : null;
                object2.getListFileFromServer((String)object, this);
            }
        }
        ((ImageButton)this._$_findCachedViewById(R.id.btnBack)).setOnClickListener(new View.OnClickListener(this){
            final /* synthetic */ DocumentActivity this$0;
            {
                this.this$0 = documentActivity;
            }

            public final void onClick(View view) {
                this.this$0.back();
            }
        });
        ((ImageButton)this._$_findCachedViewById(R.id.btnChoiceImportantFolder)).setOnClickListener(new View.OnClickListener(this){
            final /* synthetic */ DocumentActivity this$0;
            {
                this.this$0 = documentActivity;
            }

            public final void onClick(View view) {
                this.this$0.choiceImportantFolder();
            }
        });
        ((ImageButton)this._$_findCachedViewById(R.id.btnUploadZip)).setOnClickListener(new View.OnClickListener(this){
            final /* synthetic */ DocumentActivity this$0;
            {
                this.this$0 = documentActivity;
            }

            public final void onClick(View view) {
                this.this$0.uploadZip();
            }
        });
    }

    public void onLocationChanged(@Nullable Location location) {
        this.location = location;
    }

    public void onProviderDisabled(@Nullable String string2) {
    }

    public void onProviderEnabled(@Nullable String string2) {
    }

    @SuppressLint(value={"MissingPermission"})
    public void onRequestPermissionsResult(int n, @NotNull String[] arrstring, @NotNull int[] arrn) {
        Intrinsics.checkParameterIsNotNull((Object)arrstring, (String)"permissions");
        Intrinsics.checkParameterIsNotNull((Object)arrn, (String)"grantResults");
        super.onRequestPermissionsResult(n, arrstring, arrn);
        if (n == this.requestNotification) {
            n = arrn.length == 0 ? 1 : 0;
            if ((n ^ 1) != 0 && arrn[0] == 0) {
                this.checkLocation();
                return;
            }
            this.finish();
            return;
        }
    }

    protected void onResume() {
        super.onResume();
        this.checkPermission();
        String string2 = this.nameFolderTwo;
        if (string2 == null) {
            Intrinsics.throwNpe();
        }
        this.loadFileAdapter(string2);
    }

    protected void onStart() {
        super.onStart();
        Object object = this.userModel;
        object = object != null ? object.getInfoUser() : null;
        this.user = object;
    }

    public void onStatusChanged(@Nullable String string2, int n, @Nullable Bundle bundle) {
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    protected void onStop() {
        Object object = this.locationManager;
        if (object != null) {
            object.removeUpdates((LocationListener)this);
        }
        object = (object = this.fileManager) != null ? object.CreateFile(this.nameFolderLevelOne) : null;
        try {
            Thread thread2;
            if (this.thread != null && (thread2 = this.thread) != null) {
                thread2.interrupt();
            }
            if (object != null && object.exists()) {
                FilesKt.deleteRecursively((File)object);
            }
        }
        catch (Exception exception) {}
        super.onStop();
    }

    @Override
    public void passCMNDSGB() {
        this.uploadNewApp();
    }

    public final void resetAdapterFile() {
        String string2 = this.nameFolderTwo;
        if (string2 == null) {
            Intrinsics.throwNpe();
        }
        this.loadFileAdapter(string2);
    }

    public final void setDefer(boolean bl) {
        this.isDefer = bl;
    }

    public final void setFolderSelected(@Nullable File file) {
        this.folderSelected = file;
    }

    public final void setNumberFileUpload(@Nullable Integer n) {
        this.numberFileUpload = n;
    }

    public final void setSelectedFolder(@Nullable File file) {
        this.folderSelected = file;
    }

    @Override
    public void showDataDefer(@Nullable Integer n, @Nullable Defer defer) {
    }

    @Override
    public void showListDocument(@Nullable List<FileEntity> iterator2) {
        Object object = (ProgressBar)this._$_findCachedViewById(R.id.progressBar);
        if (object != null) {
            object.setVisibility(8);
        }
        this.listFileDowndload = iterator2;
        if (iterator2 != null) {
            Object object2;
            object = (Iterable)((Object)iterator2);
            iterator2 = new ArrayList();
            object = object.iterator();
            while (object.hasNext()) {
                object2 = object.next();
                if (!Intrinsics.areEqual((Object)((FileEntity)object2).is_required(), (Object)true)) continue;
                iterator2.add(object2);
            }
            iterator2 = ((Iterable)((List)((Object)iterator2))).iterator();
            while (iterator2.hasNext()) {
                object = (FileEntity)iterator2.next();
                object2 = this.fileManager;
                if (object2 == null) continue;
                StringBuilder stringBuilder = new StringBuilder();
                stringBuilder.append(this.nameFolderTwo);
                stringBuilder.append('/');
                stringBuilder.append(object.getShort_document_name());
                object2.CreateFile(stringBuilder.toString());
            }
        }
        if ((iterator2 = this.nameFolderTwo) == null) {
            Intrinsics.throwNpe();
        }
        this.loadFileAdapter((String)((Object)iterator2));
    }

    @Override
    public void uploadFail(@Nullable String string2) {
        this.closeDialog();
        Toast.makeText((Context)this.getApplicationContext(), (CharSequence)string2, (int)0).show();
    }

    @Override
    public void uploadFaile(@Nullable String string2) {
        this.closeDialog();
        this.runOnUiThread(new Runnable(this, string2){
            final /* synthetic */ String $error;
            final /* synthetic */ DocumentActivity this$0;
            {
                this.this$0 = documentActivity;
                this.$error = string2;
            }

            public final void run() {
                ProgressBar progressBar = (ProgressBar)this.this$0._$_findCachedViewById(R.id.progressBar);
                if (progressBar != null) {
                    progressBar.setVisibility(8);
                }
                Toast.makeText((Context)this.this$0.getApplicationContext(), (CharSequence)this.$error, (int)0).show();
            }
        });
    }

    @Override
    public void uploadSuccess() {
        this.closeDialog();
        Object object = this.getApplicationContext();
        Object object2 = this.localeManager;
        Object var2_3 = null;
        object2 = object2 != null ? object2.getUploadsuccess() : null;
        Toast.makeText((Context)object, (CharSequence)((CharSequence)object2), (int)0).show();
        if (this.isDefer && (object = this.fileModel) != null) {
            object2 = this.nameFolderTwo;
            if (object2 == null) {
                object2 = "";
            }
            object.removeFileUploadedWhenDeferSuccess((String)object2);
        }
        if (this.isQDEHard) {
            this.removeZipFileAndFolderLevelTwo();
            object2 = this.fileManager;
            object2 = object2 != null ? object2.CreateFile(this.nameFolderTwo) : null;
            if (object2 == null) {
                Intrinsics.throwNpe();
            }
            if (object2.exists()) {
                FilesKt.deleteRecursively((File)object2);
            }
        }
        if (!this.isDefer) {
            object = this.fileModel;
            if (object != null) {
                FileManager fileManager = this.fileManager;
                object2 = var2_3;
                if (fileManager != null) {
                    object2 = fileManager.CreateFile(String.valueOf(this.nameFolderTwo));
                }
                if (object2 == null) {
                    Intrinsics.throwNpe();
                }
                object.saveFileUploadToJSON((File)object2);
            }
            this.removeZipFileAndFolderLevelTwo();
        }
        this.finish();
    }

    public final void uploadZip() {
        this.dialogFragment = new DialogFragment();
        Object object = this.dialogFragment;
        if (object != null) {
            object.setCancelable(false);
        }
        AlertDialog.Builder builder2 = new AlertDialog.Builder((Context)this);
        object = this.localeManager;
        Object var2_3 = null;
        object = object != null ? object.getAreyousureupload() : null;
        builder2.setMessage((CharSequence)object).setTitle((CharSequence)MainApplication.Companion.getLocale().getNotification());
        object = this.localeManager;
        object = object != null ? object.getOk() : null;
        builder2.setPositiveButton((CharSequence)object, new DialogInterface.OnClickListener(this){
            final /* synthetic */ DocumentActivity this$0;
            {
                this.this$0 = documentActivity;
            }

            /*
             * Enabled force condition propagation
             * Lifted jumps to return sites
             */
            public final void onClick(DialogInterface object, int n) {
                object = DocumentActivity.access$getDialogFragment$p(this.this$0);
                Context context = null;
                Context context2 = null;
                object = object != null ? Boolean.valueOf(object.isAdded()) : null;
                if (object == null) {
                    Intrinsics.throwNpe();
                }
                if (object.booleanValue()) {
                    DocumentActivity.access$closeDialog(this.this$0);
                } else {
                    object = DocumentActivity.access$getDialogFragment$p(this.this$0);
                    if (object != null) {
                        object.show(this.this$0.getSupportFragmentManager(), "dialog");
                    }
                }
                object = DocumentActivity.access$getConfigManager$p(this.this$0);
                object = object != null ? Boolean.valueOf(object.isFreeSpaceInternalStorage()) : null;
                if (object == null) {
                    Intrinsics.throwNpe();
                }
                if (object.booleanValue()) {
                    object = DocumentActivity.access$getConfigManager$p(this.this$0);
                    object = object != null ? Boolean.valueOf(object.isConnectedInternet()) : null;
                    if (object == null) {
                        Intrinsics.throwNpe();
                    }
                    if (object.booleanValue()) {
                        object = DocumentActivity.access$getFileModel$p(this.this$0);
                        if (object == null) return;
                        object.getCountUploadPerday(this.this$0, this.this$0.isDefer());
                        return;
                    }
                    DocumentActivity.access$closeDialog(this.this$0);
                    context = this.this$0.getApplicationContext();
                    LocaleManager localeManager = DocumentActivity.access$getLocaleManager$p(this.this$0);
                    object = context2;
                    if (localeManager != null) {
                        object = localeManager.getCheckinternet();
                    }
                    Toast.makeText((Context)context, (CharSequence)((CharSequence)object), (int)0).show();
                    return;
                }
                DocumentActivity.access$closeDialog(this.this$0);
                context2 = this.this$0.getApplicationContext();
                LocaleManager localeManager = DocumentActivity.access$getLocaleManager$p(this.this$0);
                object = context;
                if (localeManager != null) {
                    object = localeManager.getErrorStorage();
                }
                Toast.makeText((Context)context2, (CharSequence)((CharSequence)object), (int)0).show();
            }
        });
        LocaleManager localeManager = this.localeManager;
        object = var2_3;
        if (localeManager != null) {
            object = localeManager.getCancel();
        }
        builder2.setNegativeButton((CharSequence)object, (DialogInterface.OnClickListener)uploadZip.INSTANCE);
        builder2.create().show();
    }
}

