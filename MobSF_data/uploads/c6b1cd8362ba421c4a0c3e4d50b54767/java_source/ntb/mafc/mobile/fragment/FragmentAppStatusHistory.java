/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.content.Context
 *  android.os.Bundle
 *  android.os.IBinder
 *  android.support.constraint.ConstraintLayout
 *  android.support.v4.app.Fragment
 *  android.support.v4.app.FragmentActivity
 *  android.support.v4.app.FragmentManager
 *  android.support.v7.widget.AppCompatRadioButton
 *  android.support.v7.widget.LinearLayoutManager
 *  android.support.v7.widget.RecyclerView
 *  android.support.v7.widget.RecyclerView$Adapter
 *  android.support.v7.widget.RecyclerView$LayoutManager
 *  android.view.LayoutInflater
 *  android.view.View
 *  android.view.View$OnClickListener
 *  android.view.ViewGroup
 *  android.view.inputmethod.InputMethodManager
 *  android.widget.AdapterView
 *  android.widget.AdapterView$OnItemSelectedListener
 *  android.widget.ArrayAdapter
 *  android.widget.Button
 *  android.widget.EditText
 *  android.widget.Spinner
 *  android.widget.SpinnerAdapter
 *  android.widget.TextView
 *  android.widget.TextView$OnEditorActionListener
 *  android.widget.Toast
 *  kotlin.Metadata
 *  kotlin.TypeCastException
 *  kotlin.jvm.internal.Intrinsics
 *  ntb.mafc.mobile.fragment.FragmentAppStatusHistory$onViewCreated
 *  ntb.mafc.mobile.manager.LocaleManager
 *  ntb.mafc.mobile.manager.MainApplication
 *  ntb.mafc.mobile.manager.MainApplication$Companion
 *  org.jetbrains.annotations.NotNull
 *  org.jetbrains.annotations.Nullable
 */
package ntb.mafc.mobile.fragment;

import android.content.Context;
import android.os.Bundle;
import android.os.IBinder;
import android.support.constraint.ConstraintLayout;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentActivity;
import android.support.v4.app.FragmentManager;
import android.support.v7.widget.AppCompatRadioButton;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.view.inputmethod.InputMethodManager;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.EditText;
import android.widget.Spinner;
import android.widget.SpinnerAdapter;
import android.widget.TextView;
import android.widget.Toast;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import kotlin.Metadata;
import kotlin.TypeCastException;
import kotlin.collections.CollectionsKt;
import kotlin.jvm.internal.Intrinsics;
import ntb.mafc.mobile.R;
import ntb.mafc.mobile.customadapter.AdapterAppStatus;
import ntb.mafc.mobile.entity.Content;
import ntb.mafc.mobile.entity.ContentFinOne;
import ntb.mafc.mobile.entity.HistoryEntity;
import ntb.mafc.mobile.fragment.DatePickerFragment;
import ntb.mafc.mobile.fragment.FragmentAppStatusHistory;
import ntb.mafc.mobile.manager.LocaleManager;
import ntb.mafc.mobile.manager.MainApplication;
import ntb.mafc.mobile.model.HistoryModel;
import ntb.mafc.mobile.view.DateView;
import ntb.mafc.mobile.view.HistoryView;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

@Metadata(bv={1, 0, 2}, d1={"\u0000\u008e\u0001\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0010\u000b\n\u0002\b\u0004\n\u0002\u0010!\n\u0002\u0010\u000e\n\u0002\b\u0005\n\u0002\u0018\u0002\n\u0002\b\n\n\u0002\u0010\u0002\n\u0002\b\u0004\n\u0002\u0010\b\n\u0002\b\u0004\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0010\t\n\u0002\b\u0006\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\u0018\u00002\u00020\u00012\u00020\u00022\u00020\u00032\u00020\u00042\u00020\u0005B\u0005\u00a2\u0006\u0002\u0010\u0006J\u0012\u0010$\u001a\u00020%2\b\u0010&\u001a\u0004\u0018\u00010\u0014H\u0016J!\u0010'\u001a\u00020%2\b\u0010(\u001a\u0004\u0018\u00010\u00142\b\u0010)\u001a\u0004\u0018\u00010*H\u0016\u00a2\u0006\u0002\u0010+J\b\u0010,\u001a\u00020%H\u0002J\u0012\u0010-\u001a\u00020%2\b\u0010.\u001a\u0004\u0018\u00010/H\u0016J&\u00100\u001a\u0004\u0018\u00010/2\u0006\u00101\u001a\u0002022\b\u00103\u001a\u0004\u0018\u0001042\b\u00105\u001a\u0004\u0018\u000106H\u0016J0\u00107\u001a\u00020%2\f\u00108\u001a\b\u0012\u0002\b\u0003\u0018\u0001092\b\u0010:\u001a\u0004\u0018\u00010/2\u0006\u0010;\u001a\u00020*2\u0006\u0010)\u001a\u00020<H\u0016J\u0016\u0010=\u001a\u00020%2\f\u00108\u001a\b\u0012\u0002\b\u0003\u0018\u000109H\u0016J\u001a\u0010>\u001a\u00020%2\u0006\u0010:\u001a\u00020/2\b\u00105\u001a\u0004\u0018\u000106H\u0016J\b\u0010?\u001a\u00020%H\u0002J\u0010\u0010@\u001a\u00020%2\u0006\u0010)\u001a\u00020*H\u0002J \u0010A\u001a\u00020%2\u000e\u0010B\u001a\n\u0012\u0004\u0012\u00020C\u0018\u00010\u00132\u0006\u0010\r\u001a\u00020\u000eH\u0016J\u0018\u0010D\u001a\u00020%2\u000e\u0010B\u001a\n\u0012\u0004\u0012\u00020E\u0018\u00010\u0013H\u0016J\u0016\u0010F\u001a\u00020%2\f\u0010B\u001a\b\u0012\u0004\u0012\u00020G0\u0013H\u0016R\u001c\u0010\u0007\u001a\u0004\u0018\u00010\bX\u0086\u000e\u00a2\u0006\u000e\n\u0000\u001a\u0004\b\t\u0010\n\"\u0004\b\u000b\u0010\fR\u001a\u0010\r\u001a\u00020\u000eX\u0086\u000e\u00a2\u0006\u000e\n\u0000\u001a\u0004\b\r\u0010\u000f\"\u0004\b\u0010\u0010\u0011R \u0010\u0012\u001a\b\u0012\u0004\u0012\u00020\u00140\u0013X\u0086\u000e\u00a2\u0006\u000e\n\u0000\u001a\u0004\b\u0015\u0010\u0016\"\u0004\b\u0017\u0010\u0018R\u001c\u0010\u0019\u001a\u0004\u0018\u00010\u001aX\u0086\u000e\u00a2\u0006\u000e\n\u0000\u001a\u0004\b\u001b\u0010\u001c\"\u0004\b\u001d\u0010\u001eR\u001c\u0010\u001f\u001a\u0004\u0018\u00010\u0014X\u0086\u000e\u00a2\u0006\u000e\n\u0000\u001a\u0004\b \u0010!\"\u0004\b\"\u0010#\u00a8\u0006H"}, d2={"Lntb/mafc/mobile/fragment/FragmentAppStatusHistory;", "Landroid/support/v4/app/Fragment;", "Landroid/view/View$OnClickListener;", "Lntb/mafc/mobile/view/HistoryView;", "Landroid/widget/AdapterView$OnItemSelectedListener;", "Lntb/mafc/mobile/view/DateView;", "()V", "historyModel", "Lntb/mafc/mobile/model/HistoryModel;", "getHistoryModel", "()Lntb/mafc/mobile/model/HistoryModel;", "setHistoryModel", "(Lntb/mafc/mobile/model/HistoryModel;)V", "isSearchDate", "", "()Z", "setSearchDate", "(Z)V", "listChoiceStatus", "", "", "getListChoiceStatus", "()Ljava/util/List;", "setListChoiceStatus", "(Ljava/util/List;)V", "simpleDateFormat", "Ljava/text/SimpleDateFormat;", "getSimpleDateFormat", "()Ljava/text/SimpleDateFormat;", "setSimpleDateFormat", "(Ljava/text/SimpleDateFormat;)V", "typeSelect", "getTypeSelect", "()Ljava/lang/String;", "setTypeSelect", "(Ljava/lang/String;)V", "errorSearch", "", "error", "getDate", "date", "id", "", "(Ljava/lang/String;Ljava/lang/Integer;)V", "hideSoftKeyboard", "onClick", "v", "Landroid/view/View;", "onCreateView", "inflater", "Landroid/view/LayoutInflater;", "container", "Landroid/view/ViewGroup;", "savedInstanceState", "Landroid/os/Bundle;", "onItemSelected", "parent", "Landroid/widget/AdapterView;", "view", "position", "", "onNothingSelected", "onViewCreated", "setLanguage", "showDateDialog", "showListSearchHistory", "list", "Lntb/mafc/mobile/entity/Content;", "showListSearchHistoryStatusFinOne", "Lntb/mafc/mobile/entity/ContentFinOne;", "showListUploadedHistory", "Lntb/mafc/mobile/entity/HistoryEntity;", "app_release"}, k=1, mv={1, 1, 11})
public final class FragmentAppStatusHistory
extends Fragment
implements View.OnClickListener,
HistoryView,
AdapterView.OnItemSelectedListener,
DateView {
    private HashMap _$_findViewCache;
    @Nullable
    private HistoryModel historyModel;
    private boolean isSearchDate = true;
    @NotNull
    private List<String> listChoiceStatus = CollectionsKt.mutableListOf((Object[])new String[]{"ALL", "BAD", "PROCESSING", "SUCCESS", "DEFER"});
    @Nullable
    private SimpleDateFormat simpleDateFormat;
    @Nullable
    private String typeSelect;

    public static final /* synthetic */ void access$hideSoftKeyboard(FragmentAppStatusHistory fragmentAppStatusHistory) {
        fragmentAppStatusHistory.hideSoftKeyboard();
    }

    private final void hideSoftKeyboard() {
        Object object = this.getActivity();
        Object var2_2 = null;
        object = object != null ? object.getSystemService("input_method") : null;
        if (object == null) {
            throw new TypeCastException("null cannot be cast to non-null type android.view.inputmethod.InputMethodManager");
        }
        InputMethodManager inputMethodManager = (InputMethodManager)object;
        FragmentActivity fragmentActivity = this.getActivity();
        object = var2_2;
        if (fragmentActivity != null) {
            fragmentActivity = fragmentActivity.getCurrentFocus();
            object = var2_2;
            if (fragmentActivity != null) {
                object = fragmentActivity.getWindowToken();
            }
        }
        inputMethodManager.hideSoftInputFromWindow((IBinder)object, 0);
    }

    private final void setLanguage() {
        AppCompatRadioButton appCompatRadioButton = (AppCompatRadioButton)this._$_findCachedViewById(R.id.rdSearchOnDate);
        Intrinsics.checkExpressionValueIsNotNull((Object)appCompatRadioButton, (String)"rdSearchOnDate");
        appCompatRadioButton.setText((CharSequence)MainApplication.Companion.getLocale().getSearchondate());
        appCompatRadioButton = (AppCompatRadioButton)this._$_findCachedViewById(R.id.rdSearchOnId);
        Intrinsics.checkExpressionValueIsNotNull((Object)appCompatRadioButton, (String)"rdSearchOnId");
        appCompatRadioButton.setText((CharSequence)MainApplication.Companion.getLocale().getSearchonid());
    }

    private final void showDateDialog(int n) {
        DatePickerFragment datePickerFragment = new DatePickerFragment();
        datePickerFragment.setTargetFragment((Fragment)this, 0);
        Object object = new Bundle();
        object.putInt("idbutton", n);
        datePickerFragment.setArguments(object);
        object = this.getActivity();
        object = object != null ? object.getSupportFragmentManager() : null;
        datePickerFragment.show((FragmentManager)object, "dateDialog");
    }

    public void _$_clearFindViewByIdCache() {
        if (this._$_findViewCache != null) {
            this._$_findViewCache.clear();
        }
    }

    public View _$_findCachedViewById(int n) {
        View view;
        if (this._$_findViewCache == null) {
            this._$_findViewCache = new HashMap();
        }
        View view2 = view = (View)this._$_findViewCache.get(n);
        if (view == null) {
            view2 = this.getView();
            if (view2 == null) {
                return null;
            }
            view2 = view2.findViewById(n);
            this._$_findViewCache.put(n, view2);
        }
        return view2;
    }

    @Override
    public void errorSearch(@Nullable String string2) {
        Toast.makeText((Context)this.getContext(), (CharSequence)string2, (int)0).show();
    }

    @Override
    public void getDate(@Nullable String object, @Nullable Integer object2) {
        if (object2 != null && object2.intValue() == 2131296333) {
            object2 = (Button)this._$_findCachedViewById(R.id.btnStartDate);
            Intrinsics.checkExpressionValueIsNotNull((Object)object2, (String)"btnStartDate");
            object2.setText((CharSequence)object);
            object = this.historyModel;
            if (object != null) {
                object2 = this;
                Object object3 = (Button)this._$_findCachedViewById(R.id.btnStartDate);
                Intrinsics.checkExpressionValueIsNotNull((Object)object3, (String)"btnStartDate");
                object3 = object3.getText().toString();
                Button button = (Button)this._$_findCachedViewById(R.id.btnEndDate);
                Intrinsics.checkExpressionValueIsNotNull((Object)button, (String)"btnEndDate");
                object.getListHistoryByDate((HistoryView)object2, (String)object3, button.getText().toString(), this.typeSelect);
                return;
            }
        } else {
            if (object2 == null) {
                return;
            }
            if (object2.intValue() == 2131296322) {
                object2 = (Button)this._$_findCachedViewById(R.id.btnEndDate);
                Intrinsics.checkExpressionValueIsNotNull((Object)object2, (String)"btnEndDate");
                object2.setText((CharSequence)object);
                object = this.historyModel;
                if (object != null) {
                    object2 = this;
                    Object object4 = (Button)this._$_findCachedViewById(R.id.btnStartDate);
                    Intrinsics.checkExpressionValueIsNotNull((Object)object4, (String)"btnStartDate");
                    object4 = object4.getText().toString();
                    Button button = (Button)this._$_findCachedViewById(R.id.btnEndDate);
                    Intrinsics.checkExpressionValueIsNotNull((Object)button, (String)"btnEndDate");
                    object.getListHistoryByDate((HistoryView)object2, (String)object4, button.getText().toString(), this.typeSelect);
                }
            }
        }
    }

    @Nullable
    public final HistoryModel getHistoryModel() {
        return this.historyModel;
    }

    @NotNull
    public final List<String> getListChoiceStatus() {
        return this.listChoiceStatus;
    }

    @Nullable
    public final SimpleDateFormat getSimpleDateFormat() {
        return this.simpleDateFormat;
    }

    @Nullable
    public final String getTypeSelect() {
        return this.typeSelect;
    }

    public final boolean isSearchDate() {
        return this.isSearchDate;
    }

    public void onClick(@Nullable View object) {
        object = object != null ? Integer.valueOf(object.getId()) : null;
        if (object != null && object.intValue() == 2131296524) {
            this.isSearchDate = true;
            this.hideSoftKeyboard();
            object = (ConstraintLayout)this._$_findCachedViewById(R.id.containerSearchOnDate);
            Intrinsics.checkExpressionValueIsNotNull((Object)object, (String)"containerSearchOnDate");
            object.setVisibility(0);
            object = (ConstraintLayout)this._$_findCachedViewById(R.id.containerSearchOnID);
            Intrinsics.checkExpressionValueIsNotNull((Object)object, (String)"containerSearchOnID");
            object.setVisibility(8);
            return;
        }
        if (object != null && object.intValue() == 2131296526) {
            this.isSearchDate = false;
            this.hideSoftKeyboard();
            object = (ConstraintLayout)this._$_findCachedViewById(R.id.containerSearchOnDate);
            Intrinsics.checkExpressionValueIsNotNull((Object)object, (String)"containerSearchOnDate");
            object.setVisibility(8);
            object = (ConstraintLayout)this._$_findCachedViewById(R.id.containerSearchOnID);
            Intrinsics.checkExpressionValueIsNotNull((Object)object, (String)"containerSearchOnID");
            object.setVisibility(0);
            return;
        }
        if (object != null && object.intValue() == 2131296333) {
            this.showDateDialog(2131296333);
            return;
        }
        if (object == null) {
            return;
        }
        if (object.intValue() == 2131296322) {
            this.showDateDialog(2131296322);
        }
    }

    @Nullable
    public View onCreateView(@NotNull LayoutInflater layoutInflater, @Nullable ViewGroup viewGroup, @Nullable Bundle bundle) {
        Intrinsics.checkParameterIsNotNull((Object)layoutInflater, (String)"inflater");
        return layoutInflater.inflate(2131427402, viewGroup, false);
    }

    public /* synthetic */ void onDestroyView() {
        super.onDestroyView();
        this._$_clearFindViewByIdCache();
    }

    public void onItemSelected(@Nullable AdapterView<?> object, @Nullable View object2, int n, long l) {
        this.typeSelect = this.listChoiceStatus.get(n);
        object = this.historyModel;
        if (object != null) {
            object2 = this;
            Object object3 = (Button)this._$_findCachedViewById(R.id.btnStartDate);
            Intrinsics.checkExpressionValueIsNotNull((Object)object3, (String)"btnStartDate");
            object3 = object3.getText().toString();
            Button button = (Button)this._$_findCachedViewById(R.id.btnEndDate);
            Intrinsics.checkExpressionValueIsNotNull((Object)button, (String)"btnEndDate");
            object.getListHistoryByDate((HistoryView)object2, (String)object3, button.getText().toString(), this.typeSelect);
        }
    }

    public void onNothingSelected(@Nullable AdapterView<?> adapterView) {
    }

    public void onViewCreated(@NotNull View object, @Nullable Bundle bundle) {
        Cloneable cloneable;
        Intrinsics.checkParameterIsNotNull((Object)object, (String)"view");
        super.onViewCreated((View)object, bundle);
        this.simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd", Locale.ENGLISH);
        Button button = (Button)this._$_findCachedViewById(R.id.btnStartDate);
        Intrinsics.checkExpressionValueIsNotNull((Object)button, (String)"btnStartDate");
        object = this.simpleDateFormat;
        bundle = null;
        if (object != null) {
            cloneable = Calendar.getInstance();
            Intrinsics.checkExpressionValueIsNotNull((Object)cloneable, (String)"Calendar.getInstance()");
            object = object.format(cloneable.getTimeInMillis());
        } else {
            object = null;
        }
        button.setText((CharSequence)object);
        button = (Button)this._$_findCachedViewById(R.id.btnEndDate);
        Intrinsics.checkExpressionValueIsNotNull((Object)button, (String)"btnEndDate");
        cloneable = this.simpleDateFormat;
        object = bundle;
        if (cloneable != null) {
            object = Calendar.getInstance();
            Intrinsics.checkExpressionValueIsNotNull((Object)object, (String)"Calendar.getInstance()");
            object = cloneable.format(object.getTimeInMillis());
        }
        button.setText((CharSequence)object);
        this.historyModel = new HistoryModel();
        object = (Spinner)this._$_findCachedViewById(R.id.spinnerStatus);
        Intrinsics.checkExpressionValueIsNotNull((Object)object, (String)"spinnerStatus");
        object.setAdapter((SpinnerAdapter)new ArrayAdapter(this.getContext(), 17367043, MainApplication.Companion.getLocale().getListSpinnerStatus()));
        this.setLanguage();
        object = (Button)this._$_findCachedViewById(R.id.btnStartDate);
        bundle = this;
        object.setOnClickListener((View.OnClickListener)bundle);
        ((Button)this._$_findCachedViewById(R.id.btnEndDate)).setOnClickListener((View.OnClickListener)bundle);
        ((AppCompatRadioButton)this._$_findCachedViewById(R.id.rdSearchOnId)).setOnClickListener((View.OnClickListener)bundle);
        ((AppCompatRadioButton)this._$_findCachedViewById(R.id.rdSearchOnDate)).setOnClickListener((View.OnClickListener)bundle);
        ((EditText)this._$_findCachedViewById(R.id.edSearchIDCustomer)).setOnEditorActionListener(new TextView.OnEditorActionListener(this){
            final /* synthetic */ FragmentAppStatusHistory this$0;
            {
                this.this$0 = fragmentAppStatusHistory;
            }

            public final boolean onEditorAction(TextView object, int n, android.view.KeyEvent object2) {
                if (n == 3) {
                    FragmentAppStatusHistory.access$hideSoftKeyboard(this.this$0);
                    object = this.this$0.getHistoryModel();
                    if (object != null) {
                        object2 = this.this$0;
                        EditText editText = (EditText)this.this$0._$_findCachedViewById(R.id.edSearchIDCustomer);
                        Intrinsics.checkExpressionValueIsNotNull((Object)editText, (String)"edSearchIDCustomer");
                        object.getListHistoryById((HistoryView)object2, editText.getText().toString());
                    }
                }
                return false;
            }
        });
        object = (Spinner)this._$_findCachedViewById(R.id.spinnerStatus);
        Intrinsics.checkExpressionValueIsNotNull((Object)object, (String)"spinnerStatus");
        object.setOnItemSelectedListener((AdapterView.OnItemSelectedListener)this);
    }

    public final void setHistoryModel(@Nullable HistoryModel historyModel) {
        this.historyModel = historyModel;
    }

    public final void setListChoiceStatus(@NotNull List<String> list) {
        Intrinsics.checkParameterIsNotNull(list, (String)"<set-?>");
        this.listChoiceStatus = list;
    }

    public final void setSearchDate(boolean bl) {
        this.isSearchDate = bl;
    }

    public final void setSimpleDateFormat(@Nullable SimpleDateFormat simpleDateFormat) {
        this.simpleDateFormat = simpleDateFormat;
    }

    public final void setTypeSelect(@Nullable String string2) {
        this.typeSelect = string2;
    }

    @Override
    public void showListSearchHistory(@Nullable List<Content> list, boolean bl) {
        if (bl) {
            RecyclerView recyclerView = (RecyclerView)this._$_findCachedViewById(R.id.recyclerSearchOnDate);
            Intrinsics.checkExpressionValueIsNotNull((Object)recyclerView, (String)"recyclerSearchOnDate");
            recyclerView.setLayoutManager((RecyclerView.LayoutManager)new LinearLayoutManager(this.getContext()));
            recyclerView = (RecyclerView)this._$_findCachedViewById(R.id.recyclerSearchOnDate);
            Intrinsics.checkExpressionValueIsNotNull((Object)recyclerView, (String)"recyclerSearchOnDate");
            Context context = this.getContext();
            if (list == null) {
                Intrinsics.throwNpe();
            }
            recyclerView.setAdapter((RecyclerView.Adapter)new AdapterAppStatus(context, list));
            return;
        }
        RecyclerView recyclerView = (RecyclerView)this._$_findCachedViewById(R.id.recyclerSearchOnID);
        Intrinsics.checkExpressionValueIsNotNull((Object)recyclerView, (String)"recyclerSearchOnID");
        recyclerView.setLayoutManager((RecyclerView.LayoutManager)new LinearLayoutManager(this.getContext()));
        recyclerView = (RecyclerView)this._$_findCachedViewById(R.id.recyclerSearchOnID);
        Intrinsics.checkExpressionValueIsNotNull((Object)recyclerView, (String)"recyclerSearchOnID");
        Context context = this.getContext();
        if (list == null) {
            Intrinsics.throwNpe();
        }
        recyclerView.setAdapter((RecyclerView.Adapter)new AdapterAppStatus(context, list));
    }

    @Override
    public void showListSearchHistoryStatusFinOne(@Nullable List<ContentFinOne> list) {
    }

    @Override
    public void showListUploadedHistory(@NotNull List<HistoryEntity> list) {
        Intrinsics.checkParameterIsNotNull(list, (String)"list");
    }
}

