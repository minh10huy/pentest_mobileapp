/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.content.Context
 *  android.os.Bundle
 *  android.support.v4.app.Fragment
 *  android.support.v4.app.FragmentActivity
 *  android.support.v4.app.FragmentManager
 *  android.support.v7.widget.AppCompatRadioButton
 *  android.support.v7.widget.LinearLayoutManager
 *  android.support.v7.widget.RecyclerView
 *  android.support.v7.widget.RecyclerView$Adapter
 *  android.support.v7.widget.RecyclerView$LayoutManager
 *  android.view.LayoutInflater
 *  android.view.View
 *  android.view.View$OnClickListener
 *  android.view.ViewGroup
 *  android.widget.Button
 *  android.widget.Toast
 *  kotlin.Metadata
 *  kotlin.jvm.internal.Intrinsics
 *  ntb.mafc.mobile.manager.LocaleManager
 *  ntb.mafc.mobile.manager.MainApplication
 *  ntb.mafc.mobile.manager.MainApplication$Companion
 *  org.jetbrains.annotations.NotNull
 *  org.jetbrains.annotations.Nullable
 */
package ntb.mafc.mobile.fragment;

import android.content.Context;
import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentActivity;
import android.support.v4.app.FragmentManager;
import android.support.v7.widget.AppCompatRadioButton;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.Toast;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import kotlin.Metadata;
import kotlin.jvm.internal.Intrinsics;
import ntb.mafc.mobile.R;
import ntb.mafc.mobile.customadapter.AdapterHistory;
import ntb.mafc.mobile.entity.Content;
import ntb.mafc.mobile.entity.ContentFinOne;
import ntb.mafc.mobile.entity.HistoryEntity;
import ntb.mafc.mobile.fragment.DatePickerFragment;
import ntb.mafc.mobile.manager.LocaleManager;
import ntb.mafc.mobile.manager.MainApplication;
import ntb.mafc.mobile.model.HistoryModel;
import ntb.mafc.mobile.view.DateView;
import ntb.mafc.mobile.view.HistoryView;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

@Metadata(bv={1, 0, 2}, d1={"\u0000x\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0010\u000b\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0010\u0002\n\u0000\n\u0002\u0010\u000e\n\u0002\b\u0003\n\u0002\u0010\b\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0006\n\u0002\u0010!\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\u0018\u00002\u00020\u00012\u00020\u00022\u00020\u00032\u00020\u0004B\u0005\u00a2\u0006\u0002\u0010\u0005J\u0012\u0010\u0014\u001a\u00020\u00152\b\u0010\u0016\u001a\u0004\u0018\u00010\u0017H\u0016J!\u0010\u0018\u001a\u00020\u00152\b\u0010\u0019\u001a\u0004\u0018\u00010\u00172\b\u0010\u001a\u001a\u0004\u0018\u00010\u001bH\u0016\u00a2\u0006\u0002\u0010\u001cJ\u0012\u0010\u001d\u001a\u00020\u00152\b\u0010\u001e\u001a\u0004\u0018\u00010\u001fH\u0016J&\u0010 \u001a\u0004\u0018\u00010\u001f2\u0006\u0010!\u001a\u00020\"2\b\u0010#\u001a\u0004\u0018\u00010$2\b\u0010%\u001a\u0004\u0018\u00010&H\u0016J\u001a\u0010'\u001a\u00020\u00152\u0006\u0010(\u001a\u00020\u001f2\b\u0010%\u001a\u0004\u0018\u00010&H\u0016J\b\u0010)\u001a\u00020\u0015H\u0002J\u0010\u0010*\u001a\u00020\u00152\u0006\u0010\u001a\u001a\u00020\u001bH\u0002J \u0010+\u001a\u00020\u00152\u000e\u0010,\u001a\n\u0012\u0004\u0012\u00020.\u0018\u00010-2\u0006\u0010/\u001a\u00020\rH\u0016J\u0018\u00100\u001a\u00020\u00152\u000e\u0010,\u001a\n\u0012\u0004\u0012\u000201\u0018\u00010-H\u0016J\u0016\u00102\u001a\u00020\u00152\f\u0010,\u001a\b\u0012\u0004\u0012\u0002030-H\u0016R\u001c\u0010\u0006\u001a\u0004\u0018\u00010\u0007X\u0086\u000e\u00a2\u0006\u000e\n\u0000\u001a\u0004\b\b\u0010\t\"\u0004\b\n\u0010\u000bR\u000e\u0010\f\u001a\u00020\rX\u0082\u000e\u00a2\u0006\u0002\n\u0000R\u001c\u0010\u000e\u001a\u0004\u0018\u00010\u000fX\u0086\u000e\u00a2\u0006\u000e\n\u0000\u001a\u0004\b\u0010\u0010\u0011\"\u0004\b\u0012\u0010\u0013\u00a8\u00064"}, d2={"Lntb/mafc/mobile/fragment/FragmentUploadedHistory;", "Landroid/support/v4/app/Fragment;", "Landroid/view/View$OnClickListener;", "Lntb/mafc/mobile/view/DateView;", "Lntb/mafc/mobile/view/HistoryView;", "()V", "historyModel", "Lntb/mafc/mobile/model/HistoryModel;", "getHistoryModel", "()Lntb/mafc/mobile/model/HistoryModel;", "setHistoryModel", "(Lntb/mafc/mobile/model/HistoryModel;)V", "isQDE", "", "simpleDateFormat", "Ljava/text/SimpleDateFormat;", "getSimpleDateFormat", "()Ljava/text/SimpleDateFormat;", "setSimpleDateFormat", "(Ljava/text/SimpleDateFormat;)V", "errorSearch", "", "error", "", "getDate", "date", "id", "", "(Ljava/lang/String;Ljava/lang/Integer;)V", "onClick", "v", "Landroid/view/View;", "onCreateView", "inflater", "Landroid/view/LayoutInflater;", "container", "Landroid/view/ViewGroup;", "savedInstanceState", "Landroid/os/Bundle;", "onViewCreated", "view", "resetList", "showDateDialog", "showListSearchHistory", "list", "", "Lntb/mafc/mobile/entity/Content;", "isSearchDate", "showListSearchHistoryStatusFinOne", "Lntb/mafc/mobile/entity/ContentFinOne;", "showListUploadedHistory", "Lntb/mafc/mobile/entity/HistoryEntity;", "app_release"}, k=1, mv={1, 1, 11})
public final class FragmentUploadedHistory
extends Fragment
implements View.OnClickListener,
DateView,
HistoryView {
    private HashMap _$_findViewCache;
    @Nullable
    private HistoryModel historyModel;
    private boolean isQDE;
    @Nullable
    private SimpleDateFormat simpleDateFormat;

    private final void resetList() {
        RecyclerView recyclerView = (RecyclerView)this._$_findCachedViewById(R.id.recyclerUploadHistory);
        Intrinsics.checkExpressionValueIsNotNull((Object)recyclerView, (String)"recyclerUploadHistory");
        recyclerView.setLayoutManager((RecyclerView.LayoutManager)new LinearLayoutManager(this.getContext()));
        recyclerView = (RecyclerView)this._$_findCachedViewById(R.id.recyclerUploadHistory);
        Intrinsics.checkExpressionValueIsNotNull((Object)recyclerView, (String)"recyclerUploadHistory");
        recyclerView.setAdapter((RecyclerView.Adapter)new AdapterHistory(this.getContext(), new ArrayList()));
    }

    private final void showDateDialog(int n) {
        DatePickerFragment datePickerFragment = new DatePickerFragment();
        datePickerFragment.setTargetFragment((Fragment)this, 0);
        Object object = new Bundle();
        object.putInt("idbutton", n);
        datePickerFragment.setArguments(object);
        object = this.getActivity();
        object = object != null ? object.getSupportFragmentManager() : null;
        datePickerFragment.show((FragmentManager)object, "dateDialog");
    }

    public void _$_clearFindViewByIdCache() {
        if (this._$_findViewCache != null) {
            this._$_findViewCache.clear();
        }
    }

    public View _$_findCachedViewById(int n) {
        View view;
        if (this._$_findViewCache == null) {
            this._$_findViewCache = new HashMap();
        }
        View view2 = view = (View)this._$_findViewCache.get(n);
        if (view == null) {
            view2 = this.getView();
            if (view2 == null) {
                return null;
            }
            view2 = view2.findViewById(n);
            this._$_findViewCache.put(n, view2);
        }
        return view2;
    }

    @Override
    public void errorSearch(@Nullable String string2) {
        Toast.makeText((Context)MainApplication.Companion.applicationContext(), (CharSequence)string2, (int)0).show();
    }

    @Override
    public void getDate(@Nullable String object, @Nullable Integer object2) {
        if (object2 != null && object2.intValue() == 2131296333) {
            object2 = (Button)this._$_findCachedViewById(R.id.btnStartDate);
            Intrinsics.checkExpressionValueIsNotNull((Object)object2, (String)"btnStartDate");
            object2.setText((CharSequence)object);
        } else if (object2 != null && object2.intValue() == 2131296322) {
            object2 = (Button)this._$_findCachedViewById(R.id.btnEndDate);
            Intrinsics.checkExpressionValueIsNotNull((Object)object2, (String)"btnEndDate");
            object2.setText((CharSequence)object);
        }
        object = this.historyModel;
        if (object != null) {
            object2 = this;
            Object object3 = (Button)this._$_findCachedViewById(R.id.btnStartDate);
            Intrinsics.checkExpressionValueIsNotNull((Object)object3, (String)"btnStartDate");
            object3 = object3.getText().toString();
            Button button = (Button)this._$_findCachedViewById(R.id.btnEndDate);
            Intrinsics.checkExpressionValueIsNotNull((Object)button, (String)"btnEndDate");
            object.getListUploadHistory((HistoryView)object2, (String)object3, button.getText().toString(), this.isQDE);
        }
    }

    @Nullable
    public final HistoryModel getHistoryModel() {
        return this.historyModel;
    }

    @Nullable
    public final SimpleDateFormat getSimpleDateFormat() {
        return this.simpleDateFormat;
    }

    public void onClick(@Nullable View object) {
        object = object != null ? Integer.valueOf(object.getId()) : null;
        if (object != null && object.intValue() == 2131296521) {
            this.isQDE = false;
            this.resetList();
            return;
        }
        if (object != null && object.intValue() == 2131296519) {
            this.isQDE = true;
            this.resetList();
            return;
        }
        if (object != null && object.intValue() == 2131296333) {
            this.showDateDialog(2131296333);
            return;
        }
        if (object == null) {
            return;
        }
        if (object.intValue() == 2131296322) {
            this.showDateDialog(2131296322);
        }
    }

    @Nullable
    public View onCreateView(@NotNull LayoutInflater layoutInflater, @Nullable ViewGroup viewGroup, @Nullable Bundle bundle) {
        Intrinsics.checkParameterIsNotNull((Object)layoutInflater, (String)"inflater");
        return layoutInflater.inflate(2131427408, viewGroup, false);
    }

    public /* synthetic */ void onDestroyView() {
        super.onDestroyView();
        this._$_clearFindViewByIdCache();
    }

    public void onViewCreated(@NotNull View object, @Nullable Bundle bundle) {
        Cloneable cloneable;
        Intrinsics.checkParameterIsNotNull((Object)object, (String)"view");
        super.onViewCreated((View)object, bundle);
        this.simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd", Locale.ENGLISH);
        Button button = (Button)this._$_findCachedViewById(R.id.btnStartDate);
        Intrinsics.checkExpressionValueIsNotNull((Object)button, (String)"btnStartDate");
        object = this.simpleDateFormat;
        bundle = null;
        if (object != null) {
            cloneable = Calendar.getInstance();
            Intrinsics.checkExpressionValueIsNotNull((Object)cloneable, (String)"Calendar.getInstance()");
            object = object.format(cloneable.getTimeInMillis());
        } else {
            object = null;
        }
        button.setText((CharSequence)object);
        button = (Button)this._$_findCachedViewById(R.id.btnEndDate);
        Intrinsics.checkExpressionValueIsNotNull((Object)button, (String)"btnEndDate");
        cloneable = this.simpleDateFormat;
        object = bundle;
        if (cloneable != null) {
            object = Calendar.getInstance();
            Intrinsics.checkExpressionValueIsNotNull((Object)object, (String)"Calendar.getInstance()");
            object = cloneable.format(object.getTimeInMillis());
        }
        button.setText((CharSequence)object);
        this.historyModel = new HistoryModel();
        object = (AppCompatRadioButton)this._$_findCachedViewById(R.id.rdNewApp);
        Intrinsics.checkExpressionValueIsNotNull((Object)object, (String)"rdNewApp");
        object.setText((CharSequence)MainApplication.Companion.getLocale().getNewdoc());
        object = (AppCompatRadioButton)this._$_findCachedViewById(R.id.rdDefer);
        Intrinsics.checkExpressionValueIsNotNull((Object)object, (String)"rdDefer");
        object.setText((CharSequence)MainApplication.Companion.getLocale().getQde());
        object = (AppCompatRadioButton)this._$_findCachedViewById(R.id.rdNewApp);
        bundle = this;
        object.setOnClickListener((View.OnClickListener)bundle);
        ((AppCompatRadioButton)this._$_findCachedViewById(R.id.rdDefer)).setOnClickListener((View.OnClickListener)bundle);
        ((Button)this._$_findCachedViewById(R.id.btnStartDate)).setOnClickListener((View.OnClickListener)bundle);
        ((Button)this._$_findCachedViewById(R.id.btnEndDate)).setOnClickListener((View.OnClickListener)bundle);
    }

    public final void setHistoryModel(@Nullable HistoryModel historyModel) {
        this.historyModel = historyModel;
    }

    public final void setSimpleDateFormat(@Nullable SimpleDateFormat simpleDateFormat) {
        this.simpleDateFormat = simpleDateFormat;
    }

    @Override
    public void showListSearchHistory(@Nullable List<Content> list, boolean bl) {
    }

    @Override
    public void showListSearchHistoryStatusFinOne(@Nullable List<ContentFinOne> list) {
    }

    @Override
    public void showListUploadedHistory(@NotNull List<HistoryEntity> list) {
        Intrinsics.checkParameterIsNotNull(list, (String)"list");
        RecyclerView recyclerView = (RecyclerView)this._$_findCachedViewById(R.id.recyclerUploadHistory);
        Intrinsics.checkExpressionValueIsNotNull((Object)recyclerView, (String)"recyclerUploadHistory");
        recyclerView.setLayoutManager((RecyclerView.LayoutManager)new LinearLayoutManager(this.getContext()));
        recyclerView = (RecyclerView)this._$_findCachedViewById(R.id.recyclerUploadHistory);
        Intrinsics.checkExpressionValueIsNotNull((Object)recyclerView, (String)"recyclerUploadHistory");
        recyclerView.setAdapter((RecyclerView.Adapter)new AdapterHistory(this.getContext(), list));
    }
}

