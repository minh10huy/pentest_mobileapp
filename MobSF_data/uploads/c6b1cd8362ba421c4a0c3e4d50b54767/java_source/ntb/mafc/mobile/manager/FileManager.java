/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.content.Context
 *  android.content.res.AssetManager
 *  android.graphics.Bitmap
 *  android.graphics.Bitmap$CompressFormat
 *  android.graphics.Canvas
 *  android.graphics.Paint
 *  android.graphics.pdf.PdfDocument
 *  android.graphics.pdf.PdfDocument$Page
 *  android.graphics.pdf.PdfDocument$PageInfo
 *  android.graphics.pdf.PdfDocument$PageInfo$Builder
 *  android.support.v4.app.FragmentActivity
 *  android.support.v7.app.AppCompatActivity
 *  android.util.DisplayMetrics
 *  android.view.Display
 *  android.view.WindowManager
 *  com.bumptech.glide.BitmapTypeRequest
 *  com.bumptech.glide.DrawableTypeRequest
 *  com.bumptech.glide.Glide
 *  com.bumptech.glide.request.FutureTarget
 *  com.crashlytics.android.Crashlytics
 *  com.itextpdf.text.Document
 *  com.itextpdf.text.Element
 *  com.itextpdf.text.Image
 *  com.itextpdf.text.Rectangle
 *  com.itextpdf.text.pdf.PdfReader
 *  com.itextpdf.text.pdf.PdfWriter
 *  kotlin.Metadata
 *  kotlin.TypeCastException
 *  kotlin.jvm.internal.Intrinsics
 *  org.jetbrains.annotations.NotNull
 *  org.jetbrains.annotations.Nullable
 */
package ntb.mafc.mobile.manager;

import android.content.Context;
import android.content.res.AssetManager;
import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.Paint;
import android.graphics.pdf.PdfDocument;
import android.support.v4.app.FragmentActivity;
import android.support.v7.app.AppCompatActivity;
import android.util.DisplayMetrics;
import android.view.Display;
import android.view.WindowManager;
import com.bumptech.glide.BitmapTypeRequest;
import com.bumptech.glide.DrawableTypeRequest;
import com.bumptech.glide.Glide;
import com.bumptech.glide.request.FutureTarget;
import com.crashlytics.android.Crashlytics;
import com.itextpdf.text.Document;
import com.itextpdf.text.Element;
import com.itextpdf.text.Image;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.pdf.PdfReader;
import com.itextpdf.text.pdf.PdfWriter;
import java.io.ByteArrayOutputStream;
import java.io.Closeable;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.Serializable;
import kotlin.Metadata;
import kotlin.TypeCastException;
import kotlin.io.ByteStreamsKt;
import kotlin.io.CloseableKt;
import kotlin.io.FilesKt;
import kotlin.jvm.internal.Intrinsics;
import net.lingala.zip4j.core.ZipFile;
import net.lingala.zip4j.model.ZipParameters;
import ntb.mafc.mobile.manager.BitmapManager;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

@Metadata(bv={1, 0, 2}, d1={"\u0000N\n\u0002\u0018\u0002\n\u0002\u0010\u0000\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0007\n\u0002\u0018\u0002\n\u0002\b\u0006\n\u0002\u0010\u000e\n\u0000\n\u0002\u0010\u000b\n\u0002\b\u0003\n\u0002\u0010\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0010\u0011\n\u0002\b\t\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B\r\u0012\u0006\u0010\u0002\u001a\u00020\u0003\u00a2\u0006\u0002\u0010\u0004J\u0010\u0010\u0013\u001a\u00020\u000e2\b\u0010\u0014\u001a\u0004\u0018\u00010\u0015J\u0010\u0010\u0016\u001a\u00020\u00172\b\u0010\u0018\u001a\u0004\u0018\u00010\u0015J\u0006\u0010\u0019\u001a\u00020\u000eJ\u001a\u0010\u001a\u001a\u00020\u001b2\b\u0010\u001c\u001a\u0004\u0018\u00010\u001d2\u0006\u0010\u001e\u001a\u00020\u000eH\u0002J#\u0010\u001f\u001a\u00020\u001b2\u000e\u0010 \u001a\n\u0012\u0004\u0012\u00020\u000e\u0018\u00010!2\u0006\u0010\"\u001a\u00020\u0015\u00a2\u0006\u0002\u0010#J+\u0010$\u001a\u00020\u00172\u000e\u0010 \u001a\n\u0012\u0004\u0012\u00020\u000e\u0018\u00010!2\u0006\u0010\"\u001a\u00020\u00152\u0006\u0010%\u001a\u00020\u0015\u00a2\u0006\u0002\u0010&J\u001b\u0010'\u001a\n\u0012\u0004\u0012\u00020\u000e\u0018\u00010!2\u0006\u0010\"\u001a\u00020\u0015\u00a2\u0006\u0002\u0010(J\u0016\u0010)\u001a\u00020\u001b2\u0006\u0010\"\u001a\u00020\u00152\u0006\u0010*\u001a\u00020+J\u0016\u0010,\u001a\u00020\u001b2\u0006\u0010-\u001a\u00020\u00152\u0006\u0010.\u001a\u00020\u0015R\u001c\u0010\u0005\u001a\u0004\u0018\u00010\u0006X\u0086\u000e\u00a2\u0006\u000e\n\u0000\u001a\u0004\b\u0007\u0010\b\"\u0004\b\t\u0010\nR\u0011\u0010\u0002\u001a\u00020\u0003\u00a2\u0006\b\n\u0000\u001a\u0004\b\u000b\u0010\fR\u001c\u0010\r\u001a\u0004\u0018\u00010\u000eX\u0086\u000e\u00a2\u0006\u000e\n\u0000\u001a\u0004\b\u000f\u0010\u0010\"\u0004\b\u0011\u0010\u0012\u00a8\u0006/"}, d2={"Lntb/mafc/mobile/manager/FileManager;", "", "context", "Landroid/content/Context;", "(Landroid/content/Context;)V", "bitmapManager", "Lntb/mafc/mobile/manager/BitmapManager;", "getBitmapManager", "()Lntb/mafc/mobile/manager/BitmapManager;", "setBitmapManager", "(Lntb/mafc/mobile/manager/BitmapManager;)V", "getContext", "()Landroid/content/Context;", "rootPath", "Ljava/io/File;", "getRootPath", "()Ljava/io/File;", "setRootPath", "(Ljava/io/File;)V", "CreateFile", "filename", "", "checkNewFolderExits", "", "nameFolder", "copyFileFromAsset", "copyInputStreamToFile", "", "inputStream", "Ljava/io/InputStream;", "file", "createMultiFileInPDF", "list", "", "path", "([Ljava/io/File;Ljava/lang/String;)V", "createMultiFilePdfiText", "nameFile", "([Ljava/io/File;Ljava/lang/String;Ljava/lang/String;)Z", "getChildFileInFolder", "(Ljava/lang/String;)[Ljava/io/File;", "saveFileToBitmap", "bitmap", "Landroid/graphics/Bitmap;", "zipFolder", "sourcePath", "toLocation", "app_release"}, k=1, mv={1, 1, 11})
public final class FileManager {
    @Nullable
    private BitmapManager bitmapManager;
    @NotNull
    private final Context context;
    @Nullable
    private File rootPath;

    public FileManager(@NotNull Context object) {
        Intrinsics.checkParameterIsNotNull((Object)object, (String)"context");
        this.context = object;
        this.rootPath = this.context.getFilesDir();
        this.bitmapManager = new BitmapManager();
        object = new StringBuilder();
        object.append(this.rootPath);
        object.append("/defer");
        object = new File(object.toString());
        Serializable serializable = new StringBuilder();
        serializable.append(this.rootPath);
        serializable.append("/newdocument");
        serializable = new File(serializable.toString());
        if (!object.exists()) {
            object.mkdirs();
        }
        if (!serializable.exists()) {
            serializable.mkdirs();
        }
    }

    /*
     * WARNING - Removed back jump from a try to a catch block - possible behaviour change.
     * Loose catch block
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    private final void copyInputStreamToFile(InputStream object, File serializable) {
        Throwable throwable6222;
        Closeable closeable;
        block11 : {
            Throwable throwable22222;
            closeable = (Closeable)object;
            Throwable throwable3 = null;
            object = throwable3;
            InputStream inputStream = (InputStream)closeable;
            object = throwable3;
            Closeable closeable2 = new FileOutputStream((File)serializable);
            object = throwable3;
            Throwable throwable4 = null;
            serializable = throwable4;
            object = (FileOutputStream)closeable2;
            if (inputStream != null) {
                serializable = throwable4;
                ByteStreamsKt.copyTo(inputStream, (OutputStream)object, 1024);
            }
            object = throwable3;
            CloseableKt.closeFinally(closeable2, throwable4);
            CloseableKt.closeFinally(closeable, throwable3);
            return;
            {
                catch (Throwable throwable22222) {
                }
                catch (Throwable throwable5) {}
                serializable = throwable5;
                {
                    throw throwable5;
                }
            }
            object = throwable3;
            try {
                CloseableKt.closeFinally(closeable2, (Throwable)serializable);
                object = throwable3;
                throw throwable22222;
            }
            catch (Throwable throwable6222) {
                break block11;
            }
            catch (Throwable throwable7) {
                object = throwable7;
                throw throwable7;
            }
        }
        CloseableKt.closeFinally(closeable, (Throwable)object);
        throw throwable6222;
    }

    @NotNull
    public final File CreateFile(@Nullable String object) {
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append(this.rootPath);
        stringBuilder.append('/');
        stringBuilder.append((String)object);
        object = new File(stringBuilder.toString());
        if (!object.exists()) {
            object.mkdirs();
        }
        return object;
    }

    public final boolean checkNewFolderExits(@Nullable String string2) {
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append(this.rootPath);
        stringBuilder.append("/newdocument/");
        stringBuilder.append(string2);
        return new File(stringBuilder.toString()).exists();
    }

    @NotNull
    public final File copyFileFromAsset() {
        File file;
        File file2 = new File(this.context.getFilesDir(), "/masgo");
        if (!file2.exists()) {
            file2.mkdirs();
        }
        if (!(file = new File(this.context.getFilesDir(), "/masgo/userguide.pdf")).exists()) {
            file2 = this.context;
            InputStream inputStream = null;
            file2 = file2 != null ? file2.getAssets() : null;
            if (file2 != null) {
                inputStream = file2.open("userguide.pdf");
            }
            this.copyInputStreamToFile(inputStream, file);
        }
        return file;
    }

    public final void createMultiFileInPDF(@Nullable File[] arrfile, @NotNull String object) {
        Intrinsics.checkParameterIsNotNull((Object)object, (String)"path");
        object = new File((String)object);
        DisplayMetrics displayMetrics = new DisplayMetrics();
        Object object2 = this.context;
        if (object2 == null) {
            throw new TypeCastException("null cannot be cast to non-null type android.support.v7.app.AppCompatActivity");
        }
        ((AppCompatActivity)object2).getWindowManager().getDefaultDisplay().getMetrics(displayMetrics);
        displayMetrics = new PdfDocument();
        if (arrfile == null) {
            Intrinsics.throwNpe();
        }
        int n = arrfile.length;
        int n2 = 1;
        for (int i = 0; i < n; ++i) {
            int n3;
            String string2;
            int n4;
            block18 : {
                block17 : {
                    object2 = arrfile[i];
                    string2 = object.getName();
                    if (string2 == null) break block17;
                    switch (string2.hashCode()) {
                        default: {
                            break block17;
                        }
                        case 2020298126: {
                            if (string2.equals("DN.pdf")) {
                                break;
                            }
                            break block17;
                        }
                        case 1850396749: {
                            if (string2.equals("HOADON.pdf")) {
                                break;
                            }
                            break block17;
                        }
                        case 1580876451: {
                            if (string2.equals("LUONG.pdf")) {
                                break;
                            }
                            break block17;
                        }
                        case -905870472: {
                            if (string2.equals("HDLD.pdf")) {
                                break;
                            }
                            break block17;
                        }
                        case -1231282410: {
                            if (!string2.equals("SKNH.pdf")) break block17;
                        }
                    }
                    n3 = 1123;
                    n4 = 794;
                    break block18;
                }
                n3 = 842;
                n4 = 595;
            }
            object2 = Bitmap.createScaledBitmap((Bitmap)((Bitmap)Glide.with((FragmentActivity)((FragmentActivity)this.context)).load((File)object2).asBitmap().into(n4, n3).get()), (int)n4, (int)n3, (boolean)true);
            if (object2 == null) {
                Intrinsics.throwNpe();
            }
            string2 = displayMetrics.startPage(new PdfDocument.PageInfo.Builder(object2.getWidth(), object2.getHeight(), n2).create());
            Intrinsics.checkExpressionValueIsNotNull((Object)string2, (String)"page");
            Canvas canvas = string2.getCanvas();
            Paint paint = new Paint();
            canvas.drawPaint(paint);
            paint.setColor(-1);
            canvas.drawBitmap((Bitmap)object2, 0.0f, 0.0f, null);
            displayMetrics.finishPage((PdfDocument.Page)string2);
            object2.recycle();
            ++n2;
        }
        try {
            displayMetrics.writeTo((OutputStream)new FileOutputStream((File)object));
        }
        catch (IOException iOException) {
            iOException.printStackTrace();
        }
        displayMetrics.close();
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    public final boolean createMultiFilePdfiText(@Nullable File[] arrfile, @NotNull String object, @NotNull String object2) {
        Document document;
        boolean bl;
        FileOutputStream fileOutputStream;
        File file;
        block14 : {
            Intrinsics.checkParameterIsNotNull((Object)object, (String)"path");
            Intrinsics.checkParameterIsNotNull((Object)object2, (String)"nameFile");
            bl = false;
            if (arrfile == null) return bl;
            document = new Document();
            if (!(object = new File((String)object)).exists()) {
                object.mkdirs();
            }
            file = new File((File)object, (String)object2);
            fileOutputStream = new FileOutputStream(file);
            PdfWriter.getInstance((Document)document, (OutputStream)fileOutputStream);
            document.open();
            for (File file2 : arrfile) {
                try {
                    object = this.bitmapManager;
                    Object var7_23 = null;
                    if (object != null) {
                        String string2 = file2.getAbsolutePath();
                        Intrinsics.checkExpressionValueIsNotNull((Object)string2, (String)"itemFile.absolutePath");
                        object = object.decodeSampledBitmapFromFile(string2, 1240, 1754);
                    } else {
                        object = null;
                    }
                    if (object != null) {
                        void var3_14;
                        Object object3 = object;
                        if (object.getWidth() > object.getHeight()) {
                            BitmapManager bitmapManager = this.bitmapManager;
                            Object var3_12 = var7_23;
                            if (bitmapManager != null) {
                                Bitmap bitmap = bitmapManager.rotate((Bitmap)object, 90.0f);
                            }
                        }
                        if ((object = Bitmap.createScaledBitmap((Bitmap)var3_14, (int)1240, (int)1754, (boolean)false)) != null) {
                            ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
                            object.compress(Bitmap.CompressFormat.JPEG, 80, (OutputStream)byteArrayOutputStream);
                            object = Image.getInstance((byte[])byteArrayOutputStream.toByteArray());
                            Intrinsics.checkExpressionValueIsNotNull((Object)object, (String)"image");
                            document.setPageSize(new Rectangle(object.getWidth(), object.getHeight()));
                            object.setAbsolutePosition(0.0f, 0.0f);
                            document.newPage();
                            document.add((Element)object);
                            continue;
                        }
                    }
                }
                catch (Exception exception) {
                    Crashlytics.log((String)exception.getMessage());
                }
                bl = false;
                break block14;
            }
            bl = true;
        }
        try {
            document.close();
            fileOutputStream.flush();
            fileOutputStream.close();
        }
        catch (Exception exception) {
            Crashlytics.log((String)exception.getMessage());
            bl = false;
        }
        try {
            new PdfReader(file.getAbsolutePath()).close();
            return bl;
        }
        catch (Exception exception) {
            return false;
        }
    }

    @Nullable
    public final BitmapManager getBitmapManager() {
        return this.bitmapManager;
    }

    @Nullable
    public final File[] getChildFileInFolder(@NotNull String string2) {
        Intrinsics.checkParameterIsNotNull((Object)string2, (String)"path");
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append(this.rootPath);
        stringBuilder.append('/');
        stringBuilder.append(string2);
        return new File(stringBuilder.toString()).listFiles();
    }

    @NotNull
    public final Context getContext() {
        return this.context;
    }

    @Nullable
    public final File getRootPath() {
        return this.rootPath;
    }

    public final void saveFileToBitmap(@NotNull String object, @NotNull Bitmap bitmap) {
        Intrinsics.checkParameterIsNotNull((Object)object, (String)"path");
        Intrinsics.checkParameterIsNotNull((Object)bitmap, (String)"bitmap");
        object = new FileOutputStream((String)object);
        bitmap.compress(Bitmap.CompressFormat.JPEG, 80, (OutputStream)object);
        object.flush();
        object.close();
        bitmap.recycle();
    }

    public final void setBitmapManager(@Nullable BitmapManager bitmapManager) {
        this.bitmapManager = bitmapManager;
    }

    public final void setRootPath(@Nullable File file) {
        this.rootPath = file;
    }

    public final void zipFolder(@NotNull String string2, @NotNull String object) {
        Intrinsics.checkParameterIsNotNull((Object)string2, (String)"sourcePath");
        Intrinsics.checkParameterIsNotNull((Object)object, (String)"toLocation");
        Object object2 = new File((String)object);
        if (object2.exists()) {
            object2.delete();
        }
        object = new ZipFile((String)object);
        object2 = new ZipParameters();
        object2.setCompressionMethod(8);
        object2.setCompressionLevel(9);
        object.addFolder(string2, (ZipParameters)object2);
        FilesKt.deleteRecursively(new File(string2));
    }
}

