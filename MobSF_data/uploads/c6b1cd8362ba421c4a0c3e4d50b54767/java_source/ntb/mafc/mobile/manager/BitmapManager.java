/*
 * Decompiled with CFR 0_132.
 * 
 * Could not load the following classes:
 *  android.graphics.Bitmap
 *  android.graphics.BitmapFactory
 *  android.graphics.BitmapFactory$Options
 *  android.graphics.Matrix
 *  kotlin.Metadata
 *  kotlin.jvm.internal.Intrinsics
 *  org.jetbrains.annotations.NotNull
 */
package ntb.mafc.mobile.manager;

import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Matrix;
import kotlin.Metadata;
import kotlin.jvm.internal.Intrinsics;
import org.jetbrains.annotations.NotNull;

@Metadata(bv={1, 0, 2}, d1={"\u00006\n\u0002\u0018\u0002\n\u0002\u0010\u0000\n\u0002\b\u0002\n\u0002\u0010\b\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\u000e\n\u0002\b\u0002\n\u0002\u0010\u0012\n\u0002\b\u0003\n\u0002\u0010\u0007\n\u0000\u0018\u00002\u00020\u0001B\u0005\u00a2\u0006\u0002\u0010\u0002J \u0010\u0003\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020\u00062\u0006\u0010\u0007\u001a\u00020\u00042\u0006\u0010\b\u001a\u00020\u0004H\u0002J\u001e\u0010\t\u001a\u00020\n2\u0006\u0010\u000b\u001a\u00020\f2\u0006\u0010\u0007\u001a\u00020\u00042\u0006\u0010\b\u001a\u00020\u0004J\u001e\u0010\r\u001a\u00020\n2\u0006\u0010\u000e\u001a\u00020\u000f2\u0006\u0010\u0007\u001a\u00020\u00042\u0006\u0010\b\u001a\u00020\u0004J\u0016\u0010\u0010\u001a\u00020\n2\u0006\u0010\u0011\u001a\u00020\n2\u0006\u0010\u0012\u001a\u00020\u0013\u00a8\u0006\u0014"}, d2={"Lntb/mafc/mobile/manager/BitmapManager;", "", "()V", "calculateInSampleSize", "", "options", "Landroid/graphics/BitmapFactory$Options;", "reqWidth", "reqHeight", "decodeSampledBitmapFromFile", "Landroid/graphics/Bitmap;", "pathFile", "", "decodeSampledBitmapFromResource", "data", "", "rotate", "bitmap", "degree", "", "app_release"}, k=1, mv={1, 1, 11})
public final class BitmapManager {
    private final int calculateInSampleSize(BitmapFactory.Options options, int n, int n2) {
        int n3 = options.outHeight;
        int n4 = options.outWidth;
        int n5 = 1;
        int n6 = 1;
        if (n3 > n2 || n4 > n) {
            n4 /= 2;
            do {
                n5 = n6;
                if ((n3 /= 2) / n6 < n2) break;
                n5 = n6;
                if (n4 / n6 < n) break;
                n6 *= 2;
            } while (true);
        }
        return n5;
    }

    @NotNull
    public final Bitmap decodeSampledBitmapFromFile(@NotNull String string2, int n, int n2) {
        Intrinsics.checkParameterIsNotNull((Object)string2, (String)"pathFile");
        BitmapFactory.Options options = new BitmapFactory.Options();
        options.inJustDecodeBounds = true;
        BitmapFactory.decodeFile((String)string2, (BitmapFactory.Options)options);
        options.inSampleSize = this.calculateInSampleSize(options, n, n2);
        options.inJustDecodeBounds = false;
        string2 = BitmapFactory.decodeFile((String)string2, (BitmapFactory.Options)options);
        Intrinsics.checkExpressionValueIsNotNull((Object)string2, (String)"BitmapFactory.decodeFile(pathFile,options)");
        return string2;
    }

    @NotNull
    public final Bitmap decodeSampledBitmapFromResource(@NotNull byte[] bitmap, int n, int n2) {
        Intrinsics.checkParameterIsNotNull((Object)bitmap, (String)"data");
        BitmapFactory.Options options = new BitmapFactory.Options();
        options.inJustDecodeBounds = true;
        BitmapFactory.decodeByteArray((byte[])bitmap, (int)0, (int)((byte[])bitmap).length);
        options.inSampleSize = this.calculateInSampleSize(options, n, n2);
        options.inJustDecodeBounds = false;
        bitmap = BitmapFactory.decodeByteArray((byte[])bitmap, (int)0, (int)((byte[])bitmap).length);
        Intrinsics.checkExpressionValueIsNotNull((Object)bitmap, (String)"BitmapFactory.decodeByteArray(data,0,data.size)");
        return bitmap;
    }

    @NotNull
    public final Bitmap rotate(@NotNull Bitmap bitmap, float f) {
        Intrinsics.checkParameterIsNotNull((Object)bitmap, (String)"bitmap");
        int n = bitmap.getWidth();
        int n2 = bitmap.getHeight();
        Matrix matrix = new Matrix();
        matrix.setRotate(f);
        bitmap = Bitmap.createBitmap((Bitmap)bitmap, (int)0, (int)0, (int)n, (int)n2, (Matrix)matrix, (boolean)true);
        Intrinsics.checkExpressionValueIsNotNull((Object)bitmap, (String)"Bitmap.createBitmap(bitmap, 0, 0, w, h, mtx, true)");
        return bitmap;
    }
}

